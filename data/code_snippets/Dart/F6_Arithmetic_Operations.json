[
  {
    "task": "Write a function that takes two numbers and returns their sum.",
    "code": "```dart\nint sum(int a, int b) {\n  return a + b;\n}\n```"
  },
  {
    "task": "Create a program that calculates the difference between two given integers.",
    "code": "```dart\nvoid main() {\n  int number1 = 10;\n  int number2 = 5;\n  int difference = number1 - number2;\n  print('The difference is: $difference');\n}\n```"
  },
  {
    "task": "Design a function to multiply two floating-point numbers and return the result.",
    "code": "```dart\ndouble multiply(double a, double b) {\n  return a * b;\n}\n```"
  },
  {
    "task": "Implement a function that divides two numbers and handles division by zero exceptions.",
    "code": "```dart\ndouble divideNumbers(double numerator, double denominator) {\n  if (denominator == 0) {\n    throw ArgumentError('Cannot divide by zero');\n  }\n  return numerator / denominator;\n}\n```"
  },
  {
    "task": "Build a calculator that can perform addition, subtraction, multiplication, and division on user-provided inputs.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  print('Enter first number:');\n  double num1 = double.parse(stdin.readLineSync()!);\n\n  print('Enter second number:');\n  double num2 = double.parse(stdin.readLineSync()!);\n\n  print('Enter operation (+, -, *, /):');\n  String operation = stdin.readLineSync()!;\n\n  double result;\n\n  switch (operation) {\n    case '+':\n      result = num1 + num2;\n      break;\n    case '-':\n      result = num1 - num2;\n      break;\n    case '*':\n      result = num1 * num2;\n      break;\n    case '/':\n      if (num2 != 0) {\n        result = num1 / num2;\n      } else {\n        print('Error: Division by zero');\n        return;\n      }\n      break;\n    default:\n      print('Invalid operation');\n      return;\n  }\n\n  print('Result: $result');\n}\n```"
  },
  {
    "task": "Write a script to compute the average of a list of numbers using arithmetic operations.",
    "code": "```dart\nvoid main() {\n  List<double> numbers = [10, 20, 30, 40, 50];\n  double sum = 0;\n  \n  for (var number in numbers) {\n    sum += number;\n  }\n  \n  double average = sum / numbers.length;\n  print('Average: $average');\n}\n```"
  },
  {
    "task": "Create a function that returns the remainder of the division of two integers.",
    "code": "```dart\nint remainder(int a, int b) {\n  return a % b;\n}\n```"
  },
  {
    "task": "Develop a function that can add a variable number of arguments and return the total.",
    "code": "```dart\nnum addNumbers(List<num> numbers) {\n  return numbers.reduce((sum, element) => sum + element);\n}\n\nvoid main() {\n  var result = addNumbers([1, 2, 3, 4, 5]);\n  print(result); // Output: 15\n}\n```"
  },
  {
    "task": "Write a program that subtracts a series of numbers from an initial value.",
    "code": "```dart\nvoid main() {\n  double initialValue = 100.0;\n  List<double> numbersToSubtract = [10.5, 20.0, 5.5, 3.0];\n\n  double result = numbersToSubtract.fold(initialValue, (prev, element) => prev - element);\n\n  print('Result: $result');\n}\n```"
  },
  {
    "task": "Implement a function that multiplies all elements in an array and returns the product.",
    "code": "```dart\nint multiplyArrayElements(List<int> numbers) {\n  int product = 1;\n  for (var number in numbers) {\n    product *= number;\n  }\n  return product;\n}\n```"
  },
  {
    "task": "Design a program that divides a number by another and rounds the result to two decimal places.",
    "code": "```dart\nvoid main() {\n  double divideAndRound(double numerator, double denominator) {\n    double result = numerator / denominator;\n    return double.parse(result.toStringAsFixed(2));\n  }\n\n  double result = divideAndRound(10, 3);\n  print(result);\n}\n```"
  },
  {
    "task": "Create a function that performs arithmetic operations on complex numbers.",
    "code": "```dart\nclass Complex {\n  final double real;\n  final double imaginary;\n\n  Complex(this.real, this.imaginary);\n\n  Complex operator +(Complex other) => \n      Complex(real + other.real, imaginary + other.imaginary);\n\n  Complex operator -(Complex other) => \n      Complex(real - other.real, imaginary - other.imaginary);\n\n  Complex operator *(Complex other) => Complex(\n      real * other.real - imaginary * other.imaginary,\n      real * other.imaginary + imaginary * other.real);\n\n  Complex operator /(Complex other) {\n    double denominator = other.real * other.real + other.imaginary * other.imaginary;\n    return Complex(\n        (real * other.real + imaginary * other.imaginary) / denominator,\n        (imaginary * other.real - real * other.imaginary) / denominator);\n  }\n}\n\nvoid main() {\n  Complex a = Complex(4, 5);\n  Complex b = Complex(2, 3);\n\n  Complex sum = a + b;\n  Complex difference = a - b;\n  Complex product = a * b;\n  Complex quotient = a / b;\n  \n  print('Sum: ${sum.real} + ${sum.imaginary}i');\n  print('Difference: ${difference.real} + ${difference.imaginary}i');\n  print('Product: ${product.real} + ${product.imaginary}i');\n  print('Quotient: ${quotient.real} + ${quotient.imaginary}i');\n}\n```"
  },
  {
    "task": "Write a function to calculate the area of a rectangle given its length and width using multiplication.",
    "code": "```dart\ndouble calculateRectangleArea(double length, double width) {\n  return length * width;\n}\n```"
  },
  {
    "task": "Build a program that converts a price in dollars to another currency using multiplication with exchange rates.",
    "code": "```dart\nvoid main() {\n  double convertCurrency(double dollars, double exchangeRate) {\n    return dollars * exchangeRate;\n  }\n\n  double dollars = 100.0;\n  double exchangeRate = 0.85; // Example exchange rate\n  double convertedAmount = convertCurrency(dollars, exchangeRate);\n\n  print('Converted Amount: $convertedAmount');\n}\n```"
  },
  {
    "task": "Implement a function that checks if a number is divisible by another and returns a boolean.",
    "code": "```dart\nbool isDivisible(int number, int divisor) {\n  return number % divisor == 0;\n}\n```"
  },
  {
    "task": "Write a script to sum the digits of an integer using arithmetic operations.",
    "code": "```dart\nint sumDigits(int number) {\n  number = number.abs(); // Handle negative numbers\n  int sum = 0;\n  while (number > 0) {\n    sum += number % 10;\n    number ~/= 10;\n  }\n  return sum;\n}\n\nvoid main() {\n  int number = 12345; // Example number\n  int result = sumDigits(number);\n  print('Sum of digits: $result');\n}\n```"
  },
  {
    "task": "Develop a function that applies a discount percentage to a price using subtraction and multiplication.",
    "code": "```dart\ndouble applyDiscount(double price, double discountPercentage) {\n  return price - (price * (discountPercentage / 100));\n}\n```"
  },
  {
    "task": "Create a program to calculate the yearly salary given an hourly wage and hours worked per week.",
    "code": "```dart\nvoid main() {\n  double hourlyWage = 20.0; // Example hourly wage\n  int hoursPerWeek = 40;    // Example hours worked per week\n\n  double weeklySalary = hourlyWage * hoursPerWeek;\n  double yearlySalary = weeklySalary * 52;\n\n  print('Yearly Salary: \\$${yearlySalary.toStringAsFixed(2)}');\n}\n```"
  },
  {
    "task": "Design a function that calculates the compound interest over a given period using arithmetic operations.",
    "code": "```dart\ndouble calculateCompoundInterest(double principal, double rate, int time, int n) {\n  return principal * (1 + rate / n).pow(n * time);\n}\n\nvoid main() {\n  double principal = 1000.0; // Principal amount\n  double rate = 0.05; // Annual interest rate\n  int time = 5; // Time in years\n  int n = 12; // Number of times interest is compounded per year\n\n  double compoundInterest = calculateCompoundInterest(principal, rate, time, n);\n  print('Compound Interest: \\$${compoundInterest.toStringAsFixed(2)}');\n}\n```"
  },
  {
    "task": "Write a program that scales a 2D point by a given factor using multiplication.",
    "code": "```dart\nclass Point {\n  double x, y;\n\n  Point(this.x, this.y);\n\n  void scale(double factor) {\n    x *= factor;\n    y *= factor;\n  }\n\n  @override\n  String toString() {\n    return 'Point(x: $x, y: $y)';\n  }\n}\n\nvoid main() {\n  Point point = Point(3, 4);\n  double scaleFactor = 2.5;\n\n  point.scale(scaleFactor);\n\n  print(point);\n}\n```"
  },
  {
    "task": "Implement a function that calculates the perimeter of a triangle given its side lengths.",
    "code": "```dart\ndouble calculatePerimeter(double side1, double side2, double side3) {\n  return side1 + side2 + side3;\n}\n```"
  },
  {
    "task": "Create a function to determine if three sides can form a right triangle using the Pythagorean theorem.",
    "code": "```dart\nbool isRightTriangle(num a, num b, num c) {\n  List<num> sides = [a, b, c]..sort();\n  return (sides[0] * sides[0] + sides[1] * sides[1]) == (sides[2] * sides[2]);\n}\n```"
  },
  {
    "task": "Write a script that calculates the total cost of items in a shopping cart using addition.",
    "code": "```dart\nvoid main() {\n  List<double> prices = [15.99, 23.75, 9.99, 5.50];\n  double totalCost = prices.reduce((sum, price) => sum + price);\n  print('Total cost: \\$${totalCost.toStringAsFixed(2)}');\n}\n```"
  },
  {
    "task": "Develop a function that returns the quotient and remainder of a division operation.",
    "code": "```dart\nMap<String, int> divide(int dividend, int divisor) {\n  int quotient = dividend ~/ divisor;\n  int remainder = dividend % divisor;\n  return {\n    'quotient': quotient,\n    'remainder': remainder,\n  };\n}\n```"
  },
  {
    "task": "Build a program that simulates a basic checkout system using arithmetic operations for totals and discounts.",
    "code": "```dart\nvoid main() {\n  // Sample items and prices\n  Map<String, double> items = {\n    'apple': 1.20,\n    'banana': 0.50,\n    'orange': 0.75,\n    'grape': 2.00,\n  };\n\n  // Sample quantities purchased\n  Map<String, int> quantities = {\n    'apple': 3,\n    'banana': 5,\n    'orange': 2,\n    'grape': 1,\n  };\n\n  // Calculate total price\n  double totalPrice = 0.0;\n  items.forEach((item, price) {\n    totalPrice += price * (quantities[item] ?? 0);\n  });\n\n  // Apply discount if total price exceeds a certain amount\n  double discount = 0.0;\n  if (totalPrice > 10.0) {\n    discount = totalPrice * 0.10; // 10% discount\n  }\n\n  // Calculate final price\n  double finalPrice = totalPrice - discount;\n\n  // Output the results\n  print('Total Price: \\$${totalPrice.toStringAsFixed(2)}');\n  print('Discount: \\$${discount.toStringAsFixed(2)}');\n  print('Final Price: \\$${finalPrice.toStringAsFixed(2)}');\n}\n```"
  },
  {
    "task": "Implement a function to calculate the distance between two points on a plane using subtraction and square roots.",
    "code": "```dart\nimport 'dart:math';\n\ndouble calculateDistance(double x1, double y1, double x2, double y2) {\n  double dx = x2 - x1;\n  double dy = y2 - y1;\n  return sqrt(dx * dx + dy * dy);\n}\n```"
  },
  {
    "task": "Write a function that calculates the speed of a vehicle given distance and time using division.",
    "code": "```dart\ndouble calculateSpeed(double distance, double time) {\n  return distance / time;\n}\n```"
  },
  {
    "task": "Create a program to compute the total minutes in a given number of hours using multiplication.",
    "code": "```dart\nvoid main() {\n  int hours = 5; // Example input\n  int minutesPerHour = 60;\n  int totalMinutes = hours * minutesPerHour;\n  print('Total minutes: $totalMinutes');\n}\n```"
  },
  {
    "task": "Design a function that determines the number of dozens of eggs from a given total number of eggs.",
    "code": "```dart\nint calculateDozens(int totalEggs) {\n  return totalEggs ~/ 12;\n}\n```"
  },
  {
    "task": "Write a script to find the greatest common divisor of two numbers using arithmetic operations.",
    "code": "```dart\nint gcd(int a, int b) {\n  while (b != 0) {\n    int temp = b;\n    b = a % b;\n    a = temp;\n  }\n  return a;\n}\n\nvoid main() {\n  int num1 = 48;\n  int num2 = 18;\n  print('GCD of $num1 and $num2 is ${gcd(num1, num2)}');\n}\n```"
  },
  {
    "task": "Develop a program that calculates the total weight of multiple items using addition.",
    "code": "```dart\nvoid main() {\n  List<double> itemWeights = [2.5, 3.0, 4.75, 1.25, 2.0];\n  double totalWeight = 0;\n\n  for (double weight in itemWeights) {\n    totalWeight += weight;\n  }\n\n  print('Total weight of items: $totalWeight');\n}\n```"
  },
  {
    "task": "Implement a function to convert a temperature from Celsius to Fahrenheit using multiplication and addition.",
    "code": "```dart\ndouble celsiusToFahrenheit(double celsius) {\n  return celsius * 9 / 5 + 32;\n}\n```"
  },
  {
    "task": "Create a program that determines the age difference between two people given their birth years.",
    "code": "```dart\nvoid main() {\n  int birthYearPerson1 = 1990;\n  int birthYearPerson2 = 1985;\n\n  int ageDifference = (birthYearPerson1 - birthYearPerson2).abs();\n\n  print('The age difference is $ageDifference years.');\n}\n```"
  },
  {
    "task": "Write a function to calculate the final price after applying tax and discount using addition and subtraction.",
    "code": "```dart\ndouble calculateFinalPrice(double initialPrice, double taxRate, double discount) {\n  double taxAmount = initialPrice * taxRate / 100;\n  double discountAmount = initialPrice * discount / 100;\n  double finalPrice = initialPrice + taxAmount - discountAmount;\n  return finalPrice;\n}\n```"
  },
  {
    "task": "Design a program to compute the net profit given total revenue and expenses.",
    "code": "```dart\nvoid main() {\n  double totalRevenue = 10000.0;\n  double totalExpenses = 7500.0;\n  \n  double netProfit = totalRevenue - totalExpenses;\n  \n  print('Net Profit: \\$${netProfit}');\n}\n```"
  },
  {
    "task": "Develop a function to calculate the BMI given weight and height using division and multiplication.",
    "code": "```dart\ndouble calculateBMI(double weight, double height) {\n  return weight / (height * height);\n}\n```"
  },
  {
    "task": "Create a function that calculates the midpoint between two numbers using addition and division.",
    "code": "```dart\ndouble calculateMidpoint(double a, double b) {\n  return (a + b) / 2;\n}\n```"
  },
  {
    "task": "Write a program that outputs the result of dividing a number by another with remainder.",
    "code": "```dart\nvoid main() {\n  int dividend = 10;\n  int divisor = 3;\n  int quotient = dividend ~/ divisor;\n  int remainder = dividend % divisor;\n\n  print('Quotient: $quotient');\n  print('Remainder: $remainder');\n}\n```"
  },
  {
    "task": "Implement a function to calculate the factorial of a number using multiplication.",
    "code": "```dart\nint factorial(int n) {\n  if (n < 0) return 0;\n  int result = 1;\n  for (int i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}\n```"
  },
  {
    "task": "Build a script to find the average of three numbers using addition and division.",
    "code": "```dart\nvoid main() {\n  double num1 = 10.0;\n  double num2 = 20.0;\n  double num3 = 30.0;\n\n  double sum = num1 + num2 + num3;\n  double average = sum / 3;\n\n  print('The average is: $average');\n}\n```"
  },
  {
    "task": "Create a program that simulates a simple bank account using arithmetic operations for deposits and withdrawals.",
    "code": "```dart\nclass BankAccount {\n  double balance;\n\n  BankAccount(this.balance);\n\n  void deposit(double amount) {\n    balance += amount;\n  }\n\n  void withdraw(double amount) {\n    if (amount <= balance) {\n      balance -= amount;\n    } else {\n      print('Insufficient funds');\n    }\n  }\n\n  double getBalance() {\n    return balance;\n  }\n}\n\nvoid main() {\n  var account = BankAccount(1000.0);\n  account.deposit(500.0);\n  print('Balance after deposit: \\$${account.getBalance()}');\n  account.withdraw(200.0);\n  print('Balance after withdrawal: \\$${account.getBalance()}');\n  account.withdraw(1500.0); // Attempt to withdraw more than balance\n}\n```"
  },
  {
    "task": "Write a function that computes the cost per item given a total cost and quantity using division.",
    "code": "```dart\ndouble computeCostPerItem(double totalCost, int quantity) {\n  return totalCost / quantity;\n}\n```"
  },
  {
    "task": "Design a program that calculates the time required to travel a distance at a given speed.",
    "code": "```dart\nvoid main() {\n  double distance = 150.0; // distance in kilometers\n  double speed = 50.0; // speed in kilometers per hour\n\n  double time = calculateTravelTime(distance, speed);\n  print('Time required to travel $distance km at $speed km/h is $time hours.');\n}\n\ndouble calculateTravelTime(double distance, double speed) {\n  return distance / speed;\n}\n```"
  },
  {
    "task": "Develop a function that returns the absolute difference between two numbers.",
    "code": "```dart\nint absoluteDifference(int num1, int num2) {\n  return (num1 - num2).abs();\n}\n```"
  },
  {
    "task": "Implement a program to compute the geometric mean of a set of numbers using multiplication and roots.",
    "code": "```dart\nimport 'dart:math';\n\ndouble geometricMean(List<double> numbers) {\n  if (numbers.isEmpty) return 0.0;\n  double product = numbers.reduce((value, element) => value * element);\n  return pow(product, 1 / numbers.length);\n}\n\nvoid main() {\n  List<double> numbers = [1.0, 2.0, 3.0, 4.0, 5.0];\n  double result = geometricMean(numbers);\n  print('Geometric Mean: $result');\n}\n```"
  },
  {
    "task": "Write a function to calculate the total interest paid on a loan using arithmetic operations.",
    "code": "```dart\ndouble calculateTotalInterest(double principal, double annualRate, int years) {\n  double totalInterest = principal * annualRate * years;\n  return totalInterest;\n}\n```"
  },
  {
    "task": "Create a program that calculates the sum of even numbers within a specified range.",
    "code": "```dart\nvoid main() {\n  int start = 1;\n  int end = 10;\n  int sum = 0;\n\n  for (int i = start; i <= end; i++) {\n    if (i % 2 == 0) {\n      sum += i;\n    }\n  }\n\n  print('Sum of even numbers between $start and $end is $sum');\n}\n```"
  },
  {
    "task": "Design a script to determine the final balance in a savings account after regular deposits and withdrawals.",
    "code": "```dart\nvoid main() {\n  double initialBalance = 1000.0;\n  List<double> deposits = [200.0, 150.0, 300.0];\n  List<double> withdrawals = [100.0, 250.0];\n\n  double finalBalance = initialBalance;\n\n  for (var deposit in deposits) {\n    finalBalance += deposit;\n  }\n\n  for (var withdrawal in withdrawals) {\n    finalBalance -= withdrawal;\n  }\n\n  print('Final Balance: \\$${finalBalance.toStringAsFixed(2)}');\n}\n```"
  },
  {
    "task": "Develop a function to compute the surface area of a cylinder given its radius and height.",
    "code": "```dart\ndouble cylinderSurfaceArea(double radius, double height) {\n  const double pi = 3.141592653589793;\n  return 2 * pi * radius * (radius + height);\n}\n```"
  },
  {
    "task": "Write a program that outputs the result of an arithmetic sequence given the first term and common difference.",
    "code": "```dart\nvoid main() {\n  int firstTerm = 5; // Example first term\n  int commonDifference = 3; // Example common difference\n  int numberOfTerms = 10; // Example number of terms\n  \n  List<int> arithmeticSequence = generateArithmeticSequence(firstTerm, commonDifference, numberOfTerms);\n  print(arithmeticSequence);\n}\n\nList<int> generateArithmeticSequence(int firstTerm, int commonDifference, int numberOfTerms) {\n  List<int> sequence = [];\n  for (int i = 0; i < numberOfTerms; i++) {\n    sequence.add(firstTerm + i * commonDifference);\n  }\n  return sequence;\n}\n```"
  },
  {
    "task": "Implement a function that finds the average speed for a trip given total distance and time.",
    "code": "```dart\ndouble averageSpeed(double totalDistance, double totalTime) {\n  return totalDistance / totalTime;\n}\n\nvoid main() {\n  double distance = 150.0; // example distance in kilometers\n  double time = 3.0; // example time in hours\n  double speed = averageSpeed(distance, time);\n  print('Average Speed: $speed km/h');\n}\n```"
  },
  {
    "task": "Create a function to calculate the total cost of a road trip given fuel cost per mile and distance.",
    "code": "```dart\ndouble calculateTotalCost(double fuelCostPerMile, double distance) {\n  return fuelCostPerMile * distance;\n}\n```"
  },
  {
    "task": "Write a script that determines the number of tiles required to cover a floor area using arithmetic operations.",
    "code": "```dart\nvoid main() {\n  double floorLength = 10.0; // in meters\n  double floorWidth = 5.0; // in meters\n  double tileLength = 0.5; // in meters\n  double tileWidth = 0.5; // in meters\n\n  double floorArea = floorLength * floorWidth;\n  double tileArea = tileLength * tileWidth;\n  \n  int numberOfTiles = (floorArea / tileArea).ceil();\n  \n  print('Number of tiles required: $numberOfTiles');\n}\n```"
  },
  {
    "task": "Develop a program to calculate the amount of paint needed to cover a wall given its area.",
    "code": "```dart\nvoid main() {\n  double width = 10.0; // width of the wall in meters\n  double height = 3.0; // height of the wall in meters\n  double coveragePerLiter = 10.0; // area covered by one liter of paint in square meters\n\n  double area = width * height;\n  double paintNeeded = area / coveragePerLiter;\n\n  print('Amount of paint needed: ${paintNeeded.toStringAsFixed(2)} liters');\n}\n```"
  },
  {
    "task": "Build a function that calculates the price per unit weight given total price and weight.",
    "code": "```dart\ndouble calculatePricePerUnitWeight(double totalPrice, double totalWeight) {\n  return totalPrice / totalWeight;\n}\n```"
  },
  {
    "task": "Implement a program that computes the volume of a rectangular prism given its dimensions.",
    "code": "```dart\nvoid main() {\n  double length = 5.0;\n  double width = 3.0;\n  double height = 2.0;\n  \n  double volume = length * width * height;\n  \n  print('The volume of the rectangular prism is: $volume');\n}\n```"
  },
  {
    "task": "Write a function to find the percentage increase or decrease between two numbers.",
    "code": "```dart\ndouble percentageChange(num initial, num final) {\n  if (initial == 0) {\n    throw ArgumentError('Initial value cannot be zero');\n  }\n  return ((final - initial) / initial) * 100;\n}\n```"
  },
  {
    "task": "Create a program to determine the number of complete weeks within a specified number of days.",
    "code": "```dart\nvoid main() {\n  int days = 45; // Example number of days\n  int completeWeeks = days ~/ 7;\n  print('Complete weeks: $completeWeeks');\n}\n```"
  },
  {
    "task": "Design a function that calculates the break-even point for a business using cost and revenue data.",
    "code": "```dart\ndouble calculateBreakEvenPoint(double fixedCosts, double variableCostsPerUnit, double pricePerUnit) {\n  if (pricePerUnit <= variableCostsPerUnit) {\n    throw ArgumentError('Price per unit must be greater than variable costs per unit to break even.');\n  }\n  return fixedCosts / (pricePerUnit - variableCostsPerUnit);\n}\n\nvoid main() {\n  double fixedCosts = 10000.0;\n  double variableCostsPerUnit = 20.0;\n  double pricePerUnit = 50.0;\n\n  try {\n    double breakEvenPoint = calculateBreakEvenPoint(fixedCosts, variableCostsPerUnit, pricePerUnit);\n    print('Break-even point is at $breakEvenPoint units.');\n  } catch (e) {\n    print(e);\n  }\n}\n```"
  },
  {
    "task": "Develop a program that converts a total number of seconds into hours, minutes, and seconds.",
    "code": "```dart\nvoid main() {\n  int totalSeconds = 3665; // Example input\n  int hours = totalSeconds ~/ 3600;\n  int minutes = (totalSeconds % 3600) ~/ 60;\n  int seconds = totalSeconds % 60;\n\n  print('Hours: $hours, Minutes: $minutes, Seconds: $seconds');\n}\n```"
  },
  {
    "task": "Write a function that calculates the depreciation of an asset over time using arithmetic operations.",
    "code": "```dart\ndouble calculateDepreciation(double initialCost, double salvageValue, int usefulLife) {\n  if (usefulLife <= 0) throw ArgumentError('Useful life must be greater than zero');\n  double annualDepreciation = (initialCost - salvageValue) / usefulLife;\n  return annualDepreciation;\n}\n\nvoid main() {\n  double initialCost = 10000;\n  double salvageValue = 2000;\n  int usefulLife = 5;\n\n  double depreciation = calculateDepreciation(initialCost, salvageValue, usefulLife);\n  print('Annual depreciation: \\$${depreciation.toStringAsFixed(2)}');\n}\n```"
  },
  {
    "task": "Create a program that computes the final exam grade needed to achieve a target course average.",
    "code": "```dart\nvoid main() {\n  double currentAverage = 85.0;\n  double targetAverage = 90.0;\n  double finalExamWeight = 0.4;\n\n  double finalExamGradeNeeded = (targetAverage - (currentAverage * (1 - finalExamWeight))) / finalExamWeight;\n\n  print('Final exam grade needed: ${finalExamGradeNeeded.toStringAsFixed(2)}');\n}\n```"
  },
  {
    "task": "Implement a function to calculate the total cost of groceries given prices and quantities of items.",
    "code": "```dart\ndouble calculateTotalCost(List<double> prices, List<int> quantities) {\n  double totalCost = 0.0;\n  for (int i = 0; i < prices.length; i++) {\n    totalCost += prices[i] * quantities[i];\n  }\n  return totalCost;\n}\n\nvoid main() {\n  List<double> prices = [2.5, 3.0, 4.5];\n  List<int> quantities = [2, 1, 3];\n  double totalCost = calculateTotalCost(prices, quantities);\n  print('Total Cost: \\$${totalCost.toStringAsFixed(2)}');\n}\n```"
  },
  {
    "task": "Write a script that determines the number of years required to double an investment using a fixed interest rate.",
    "code": "```dart\nvoid main() {\n  double initialInvestment = 1000.0;\n  double interestRate = 0.05; // 5% interest rate\n  double targetInvestment = initialInvestment * 2;\n  int years = 0;\n  double currentInvestment = initialInvestment;\n\n  while (currentInvestment < targetInvestment) {\n    currentInvestment += currentInvestment * interestRate;\n    years++;\n  }\n\n  print('Years required to double the investment: $years');\n}\n```"
  },
  {
    "task": "Develop a function that computes the harmonic mean of a set of numbers using division and addition.",
    "code": "```dart\ndouble harmonicMean(List<double> numbers) {\n  if (numbers.isEmpty) return 0.0;\n  double sum = numbers.fold(0.0, (acc, n) => acc + 1 / n);\n  return numbers.length / sum;\n}\n```"
  },
  {
    "task": "Create a program to find the sum of the squares of numbers in a given range.",
    "code": "```dart\nint sumOfSquares(int start, int end) {\n  int sum = 0;\n  for (int i = start; i <= end; i++) {\n    sum += i * i;\n  }\n  return sum;\n}\n\nvoid main() {\n  int start = 1;\n  int end = 5;\n  int result = sumOfSquares(start, end);\n  print('Sum of squares from $start to $end is $result');\n}\n```"
  },
  {
    "task": "Design a function that calculates the energy consumption of an appliance given power and usage time.",
    "code": "```dart\ndouble calculateEnergyConsumption(double power, double time) {\n  return power * time;\n}\n```"
  },
  {
    "task": "Write a program that simulates a simple stock portfolio using arithmetic operations for buying and selling.",
    "code": "```dart\nvoid main() {\n  // Simulated stock portfolio\n  double cash = 10000.0; // Initial cash in dollars\n  double stockPrice = 50.0; // Price per stock in dollars\n  int stocksOwned = 0;\n  \n  // Function to buy stocks\n  void buyStocks(int amount) {\n    double cost = amount * stockPrice;\n    if (cost <= cash) {\n      stocksOwned += amount;\n      cash -= cost;\n      print('Bought $amount stocks.');\n    } else {\n      print('Not enough cash to buy $amount stocks.');\n    }\n  }\n  \n  // Function to sell stocks\n  void sellStocks(int amount) {\n    if (amount <= stocksOwned) {\n      stocksOwned -= amount;\n      cash += amount * stockPrice;\n      print('Sold $amount stocks.');\n    } else {\n      print('Not enough stocks to sell $amount.');\n    }\n  }\n  \n  // Simulating a few transactions\n  buyStocks(100); // Try buying 100 stocks\n  sellStocks(50); // Try selling 50 stocks\n  buyStocks(200); // Try buying 200 stocks\n  sellStocks(100); // Try selling 100 stocks\n  \n  // Display the final portfolio status\n  print('Final cash balance: \\$${cash.toStringAsFixed(2)}');\n  print('Final stocks owned: $stocksOwned');\n}\n```"
  },
  {
    "task": "Implement a function to calculate the gravitational force between two masses using multiplication and division.",
    "code": "```dart\ndouble calculateGravitationalForce(double mass1, double mass2, double distance) {\n  const double gravitationalConstant = 6.67430e-11;\n  return (gravitationalConstant * mass1 * mass2) / (distance * distance);\n}\n```"
  },
  {
    "task": "Create a function that determines the price per square foot of a piece of real estate.",
    "code": "```dart\ndouble pricePerSquareFoot(double totalPrice, double areaInSquareFeet) {\n  return totalPrice / areaInSquareFeet;\n}\n```"
  },
  {
    "task": "Write a script to compute the total interest earned on a savings account with monthly compounding.",
    "code": "```dart\nvoid main() {\n  double principal = 1000.0; // Initial amount\n  double annualInterestRate = 0.05; // 5% annual interest\n  int years = 5; // Number of years\n\n  double totalAmount = principal * (1 + annualInterestRate / 12).pow(12 * years);\n  double totalInterest = totalAmount - principal;\n\n  print('Total Interest Earned: \\$${totalInterest.toStringAsFixed(2)}');\n}\n```"
  },
  {
    "task": "Develop a program that calculates the calories burned during exercise given MET value and duration.",
    "code": "```dart\nvoid main() {\n  double calculateCaloriesBurned(double metValue, double durationInHours, double weightInKg) {\n    return metValue * weightInKg * durationInHours;\n  }\n\n  double metValue = 8.0; // Example MET value\n  double durationInMinutes = 60.0; // Example duration in minutes\n  double weightInKg = 70.0; // Example weight in kilograms\n\n  double durationInHours = durationInMinutes / 60.0;\n  double caloriesBurned = calculateCaloriesBurned(metValue, durationInHours, weightInKg);\n\n  print(\"Calories burned: $caloriesBurned\");\n}\n```"
  },
  {
    "task": "Build a function that converts a speed from miles per hour to kilometers per hour using multiplication.",
    "code": "```dart\ndouble convertMphToKph(double mph) {\n  return mph * 1.60934;\n}\n```"
  },
  {
    "task": "Implement a program to find the number of days between two dates using arithmetic operations.",
    "code": "```dart\nimport 'dart:core';\n\nvoid main() {\n  DateTime date1 = DateTime(2023, 10, 1);\n  DateTime date2 = DateTime(2023, 10, 15);\n  \n  int difference = date2.difference(date1).inDays;\n  \n  print('Number of days between the two dates: $difference');\n}\n```"
  },
  {
    "task": "Write a function to calculate the area of a circle given its radius.",
    "code": "```dart\ndouble calculateCircleArea(double radius) {\n  const double pi = 3.141592653589793;\n  return pi * radius * radius;\n}\n```"
  },
  {
    "task": "Create a program that determines the total distance driven given trips with varying speeds and durations.",
    "code": "```dart\nvoid main() {\n  List<Map<String, dynamic>> trips = [\n    {'speed': 60, 'duration': 2},\n    {'speed': 75, 'duration': 1.5},\n    {'speed': 50, 'duration': 3},\n  ];\n\n  double totalDistance = calculateTotalDistance(trips);\n  print('Total distance driven: $totalDistance km');\n}\n\ndouble calculateTotalDistance(List<Map<String, dynamic>> trips) {\n  double totalDistance = 0.0;\n  for (var trip in trips) {\n    double distance = trip['speed'] * trip['duration'];\n    totalDistance += distance;\n  }\n  return totalDistance;\n}\n```"
  },
  {
    "task": "Design a function to compute the final price of an item after applying multiple discounts sequentially.",
    "code": "```dart\ndouble computeFinalPrice(double initialPrice, List<double> discounts) {\n  double finalPrice = initialPrice;\n  for (double discount in discounts) {\n    finalPrice -= finalPrice * (discount / 100);\n  }\n  return finalPrice;\n}\n\nvoid main() {\n  double initialPrice = 100.0;\n  List<double> discounts = [10, 20, 5]; // Discounts in percentage\n  double finalPrice = computeFinalPrice(initialPrice, discounts);\n  print('Final price: \\$${finalPrice.toStringAsFixed(2)}');\n}\n```"
  },
  {
    "task": "Write a script that calculates the number of bricks needed to build a wall given wall dimensions and brick size.",
    "code": "```dart\nvoid main() {\n  double wallWidth = 10.0; // in meters\n  double wallHeight = 2.5; // in meters\n  double brickWidth = 0.2; // in meters\n  double brickHeight = 0.1; // in meters\n\n  double wallArea = wallWidth * wallHeight;\n  double brickArea = brickWidth * brickHeight;\n\n  int numberOfBricks = (wallArea / brickArea).ceil();\n\n  print('Number of bricks needed: $numberOfBricks');\n}\n```"
  },
  {
    "task": "Develop a program to determine the number of pizzas required for a party given the number of people and slices per pizza.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  stdout.write('Enter the number of people: ');\n  int numberOfPeople = int.parse(stdin.readLineSync()!);\n\n  stdout.write('Enter the number of slices each person will eat: ');\n  int slicesPerPerson = int.parse(stdin.readLineSync()!);\n\n  stdout.write('Enter the number of slices per pizza: ');\n  int slicesPerPizza = int.parse(stdin.readLineSync()!);\n\n  int totalSlicesNeeded = numberOfPeople * slicesPerPerson;\n  int pizzasRequired = (totalSlicesNeeded / slicesPerPizza).ceil();\n\n  print('Number of pizzas required: $pizzasRequired');\n}\n```"
  },
  {
    "task": "Implement a function that calculates the total cost of a meal including tax and tip.",
    "code": "```dart\ndouble calculateTotalCost(double mealCost, double taxRate, double tipRate) {\n  double taxAmount = mealCost * taxRate / 100;\n  double tipAmount = mealCost * tipRate / 100;\n  return mealCost + taxAmount + tipAmount;\n}\n```"
  },
  {
    "task": "Create a program to compute the average rainfall over a period using addition and division.",
    "code": "```dart\nvoid main() {\n  List<double> rainfallData = [10.5, 20.0, 15.5, 30.0, 25.5]; // Example data\n  double totalRainfall = 0.0;\n\n  for (double rainfall in rainfallData) {\n    totalRainfall += rainfall;\n  }\n\n  double averageRainfall = totalRainfall / rainfallData.length;\n  print('Average Rainfall: $averageRainfall');\n}\n```"
  },
  {
    "task": "Write a function that determines the number of batches needed to produce a specific quantity of a product.",
    "code": "```dart\nint calculateBatches(int quantity, int batchSize) {\n  return (quantity / batchSize).ceil();\n}\n\nvoid main() {\n  int quantity = 105;\n  int batchSize = 20;\n  int batches = calculateBatches(quantity, batchSize);\n  print('Number of batches needed: $batches');\n}\n```"
  },
  {
    "task": "Design a program to calculate the total energy consumption of a household given individual appliance usage.",
    "code": "```dart\nvoid main() {\n  // Example appliance usage in kilowatt-hours (kWh)\n  double fridgeUsage = 150.0;\n  double tvUsage = 120.0;\n  double washingMachineUsage = 200.0;\n  double airConditionerUsage = 350.0;\n\n  // Total energy consumption calculation\n  double totalEnergyConsumption = fridgeUsage + tvUsage + washingMachineUsage + airConditionerUsage;\n\n  // Output the total energy consumption\n  print('Total Energy Consumption: $totalEnergyConsumption kWh');\n}\n```"
  },
  {
    "task": "Develop a function that computes the body surface area of a person using height and weight.",
    "code": "```dart\ndouble calculateBodySurfaceArea(double height, double weight) {\n  return 0.007184 * (height.pow(0.725)) * (weight.pow(0.425));\n}\n\nvoid main() {\n  double height = 170.0; // in cm\n  double weight = 65.0;  // in kg\n  double bsa = calculateBodySurfaceArea(height, weight);\n  print('The Body Surface Area is: ${bsa.toStringAsFixed(2)} m\u00b2');\n}\n```"
  },
  {
    "task": "Build a script to calculate the monthly payment on a mortgage using principal, interest rate, and term.",
    "code": "```dart\ndouble calculateMonthlyPayment(double principal, double annualInterestRate, int termYears) {\n  double monthlyInterestRate = annualInterestRate / 12 / 100;\n  int numberOfPayments = termYears * 12;\n  return principal * monthlyInterestRate / (1 - (1 + monthlyInterestRate).pow(-numberOfPayments));\n}\n\nvoid main() {\n  double principal = 200000; // Example principal amount\n  double annualInterestRate = 5; // Example annual interest rate\n  int termYears = 30; // Example term in years\n\n  double monthlyPayment = calculateMonthlyPayment(principal, annualInterestRate, termYears);\n  print('Monthly Payment: \\$${monthlyPayment.toStringAsFixed(2)}');\n}\n```"
  },
  {
    "task": "Implement a function to find the volume of a cone given its height and radius.",
    "code": "```dart\nimport 'dart:math';\n\ndouble volumeOfCone(double radius, double height) {\n  return (1 / 3) * pi * pow(radius, 2) * height;\n}\n\nvoid main() {\n  double radius = 3.0;\n  double height = 5.0;\n  double volume = volumeOfCone(radius, height);\n  print('Volume of the cone: $volume');\n}\n```"
  },
  {
    "task": "Write a program that estimates the cost of a trip using fuel efficiency and distance.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  stdout.write('Enter the distance of the trip in kilometers: ');\n  double distance = double.parse(stdin.readLineSync()!);\n\n  stdout.write('Enter the fuel efficiency in kilometers per liter: ');\n  double efficiency = double.parse(stdin.readLineSync()!);\n\n  stdout.write('Enter the cost of fuel per liter: ');\n  double costPerLiter = double.parse(stdin.readLineSync()!);\n\n  double fuelNeeded = distance / efficiency;\n  double totalCost = fuelNeeded * costPerLiter;\n\n  print('The estimated cost of the trip is: \\$${totalCost.toStringAsFixed(2)}');\n}\n```"
  }
]