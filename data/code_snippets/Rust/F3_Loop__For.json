[
  {
    "task": "Write a program that prints numbers from 1 to 10 using a for loop.",
    "code": "```rust\nfn main() {\n    for number in 1..=10 {\n        println!(\"{}\", number);\n    }\n}\n```"
  },
  {
    "task": "Create a loop that iterates over an array of names and prints each name.",
    "code": "```rust\nfn main() {\n    let names = [\"Alice\", \"Bob\", \"Charlie\"];\n\n    for name in names.iter() {\n        println!(\"{}\", name);\n    }\n}\n```"
  },
  {
    "task": "Design a for loop to calculate the factorial of a given number.",
    "code": "```rust\nfn factorial(n: u32) -> u32 {\n    let mut result = 1;\n    for i in 1..=n {\n        result *= i;\n    }\n    result\n}\n```"
  },
  {
    "task": "Implement a program that uses a for loop to sum all even numbers between 1 and 100.",
    "code": "```rust\nfn main() {\n    let mut sum = 0;\n    for number in 1..=100 {\n        if number % 2 == 0 {\n            sum += number;\n        }\n    }\n    println!(\"The sum of all even numbers between 1 and 100 is: {}\", sum);\n}\n```"
  },
  {
    "task": "Use a for loop to generate and print the Fibonacci sequence up to 20 terms.",
    "code": "```rust\nfn main() {\n    let mut a = 0;\n    let mut b = 1;\n\n    for _ in 0..20 {\n        println!(\"{}\", a);\n        let temp = a;\n        a = b;\n        b = temp + b;\n    }\n}\n```"
  },
  {
    "task": "Construct a for loop that prints the multiplication table for a given number.",
    "code": "```rust\nfn main() {\n    let number = 5; // You can change this to any number for a different multiplication table\n    let limit = 10;\n\n    for i in 1..=limit {\n        println!(\"{} x {} = {}\", number, i, number * i);\n    }\n}\n```"
  },
  {
    "task": "Write code to iterate through a list of student grades and print only those above a certain threshold.",
    "code": "```rust\nfn main() {\n    let grades = vec![75, 85, 92, 58, 63, 77, 89];\n    let threshold = 70;\n\n    for &grade in &grades {\n        if grade > threshold {\n            println!(\"{}\", grade);\n        }\n    }\n}\n```"
  },
  {
    "task": "Create a for loop that appends the square of numbers 1 to 10 to a list.",
    "code": "```rust\nfn main() {\n    let mut squares = Vec::new();\n    for i in 1..=10 {\n        squares.push(i * i);\n    }\n    println!(\"{:?}\", squares);\n}\n```"
  },
  {
    "task": "Develop a for loop that reverses a given string.",
    "code": "```rust\nfn reverse_string(input: &str) -> String {\n    let mut reversed = String::new();\n    for c in input.chars().rev() {\n        reversed.push(c);\n    }\n    reversed\n}\n\nfn main() {\n    let original = \"Hello, world!\";\n    let reversed = reverse_string(original);\n    println!(\"Reversed: {}\", reversed);\n}\n```"
  },
  {
    "task": "Build a program that uses a for loop to print all elements in a 2D matrix.",
    "code": "```rust\nfn main() {\n    let matrix = vec![\n        vec![1, 2, 3],\n        vec![4, 5, 6],\n        vec![7, 8, 9],\n    ];\n\n    for row in &matrix {\n        for element in row {\n            println!(\"{}\", element);\n        }\n    }\n}\n```"
  },
  {
    "task": "Use a for loop to find the maximum value in an array of integers.",
    "code": "```rust\nfn find_maximum(arr: &[i32]) -> i32 {\n    let mut max_value = arr[0];\n    for &value in arr.iter() {\n        if value > max_value {\n            max_value = value;\n        }\n    }\n    max_value\n}\n\nfn main() {\n    let numbers = [3, 7, 2, 9, 5];\n    let max_value = find_maximum(&numbers);\n    println!(\"The maximum value is: {}\", max_value);\n}\n```"
  },
  {
    "task": "Write a program that uses a for loop to print the characters of a string, one per line.",
    "code": "```rust\nfn main() {\n    let my_string = \"Hello, World!\";\n    \n    for ch in my_string.chars() {\n        println!(\"{}\", ch);\n    }\n}\n```"
  },
  {
    "task": "Create a for loop that counts the number of vowels in a given sentence.",
    "code": "```rust\nfn count_vowels(sentence: &str) -> usize {\n    let vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n    let mut count = 0;\n    for ch in sentence.chars() {\n        if vowels.contains(&ch) {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let sentence = \"The quick brown fox jumps over the lazy dog.\";\n    let vowel_count = count_vowels(sentence);\n    println!(\"Number of vowels: {}\", vowel_count);\n}\n```"
  },
  {
    "task": "Implement a for loop to check if a number is prime by testing divisibility.",
    "code": "```rust\nfn is_prime(n: u32) -> bool {\n    if n <= 1 {\n        return false;\n    }\n    for i in 2..((n as f64).sqrt().floor() as u32 + 1) {\n        if n % i == 0 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let number = 29;\n    if is_prime(number) {\n        println!(\"{} is a prime number.\", number);\n    } else {\n        println!(\"{} is not a prime number.\", number);\n    }\n}\n```"
  },
  {
    "task": "Design a for loop that prints a pyramid pattern of asterisks with a given height.",
    "code": "```rust\nfn main() {\n    let height = 5; // example height, you can change this value\n\n    for i in 0..height {\n        let spaces = height - i - 1;\n        let stars = 2 * i + 1;\n\n        for _ in 0..spaces {\n            print!(\" \");\n        }\n        for _ in 0..stars {\n            print!(\"*\");\n        }\n        println!();\n    }\n}\n```"
  },
  {
    "task": "Write a program that uses a for loop to calculate the sum of digits of a number.",
    "code": "```rust\nfn sum_of_digits(number: u32) -> u32 {\n    let mut sum = 0;\n    for digit_char in number.to_string().chars() {\n        if let Some(digit) = digit_char.to_digit(10) {\n            sum += digit;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let number = 12345;\n    let result = sum_of_digits(number);\n    println!(\"The sum of digits of {} is {}\", number, result);\n}\n```"
  },
  {
    "task": "Construct a for loop to flatten a list of lists into a single list.",
    "code": "```rust\nfn flatten<T: Clone>(nested: Vec<Vec<T>>) -> Vec<T> {\n    let mut flat = Vec::new();\n    for sublist in nested {\n        for item in sublist {\n            flat.push(item);\n        }\n    }\n    flat\n}\n\nfn main() {\n    let nested_list = vec![vec![1, 2], vec![3, 4], vec![5, 6]];\n    let flat_list = flatten(nested_list);\n    println!(\"{:?}\", flat_list);\n}\n```"
  },
  {
    "task": "Use a for loop to generate a list of random numbers and print them.",
    "code": "```rust\nuse rand::Rng;\n\nfn main() {\n    let mut rng = rand::thread_rng();\n    let mut random_numbers = Vec::new();\n\n    for _ in 0..10 {\n        let num = rng.gen_range(1..101);\n        random_numbers.push(num);\n    }\n\n    for number in random_numbers {\n        println!(\"{}\", number);\n    }\n}\n```"
  },
  {
    "task": "Create a for loop that iterates through a dictionary and prints its keys and values.",
    "code": "```rust\nfn main() {\n    let dictionary = [(\"key1\", \"value1\"), (\"key2\", \"value2\"), (\"key3\", \"value3\")];\n\n    for (key, value) in &dictionary {\n        println!(\"Key: {}, Value: {}\", key, value);\n    }\n}\n```"
  },
  {
    "task": "Develop a for loop that counts down from 10 to 1 and prints each number.",
    "code": "```rust\nfn main() {\n    for num in (1..=10).rev() {\n        println!(\"{}\", num);\n    }\n}\n```"
  },
  {
    "task": "Write code to multiply each element in an array by 2 using a for loop.",
    "code": "```rust\nfn main() {\n    let mut arr = [1, 2, 3, 4, 5];\n    \n    for i in 0..arr.len() {\n        arr[i] *= 2;\n    }\n\n    println!(\"{:?}\", arr);\n}\n```"
  },
  {
    "task": "Create a for loop that calculates the average of numbers in a list.",
    "code": "```rust\nfn main() {\n    let numbers = vec![1, 2, 3, 4, 5];\n    let mut sum = 0;\n    for num in &numbers {\n        sum += num;\n    }\n    let average = sum as f64 / numbers.len() as f64;\n    println!(\"The average is: {}\", average);\n}\n```"
  },
  {
    "task": "Implement a for loop to find duplicate elements in an array.",
    "code": "```rust\nfn find_duplicates(arr: &[i32]) -> Vec<i32> {\n    let mut duplicates = Vec::new();\n    let mut seen = std::collections::HashSet::new();\n\n    for &item in arr {\n        if !seen.insert(item) {\n            duplicates.push(item);\n        }\n    }\n\n    duplicates\n}\n\nfn main() {\n    let arr = [1, 2, 3, 4, 5, 3, 2, 1];\n    let duplicates = find_duplicates(&arr);\n    println!(\"Duplicates: {:?}\", duplicates);\n}\n```"
  },
  {
    "task": "Design a for loop that removes all occurrences of a specific element from a list.",
    "code": "```rust\nfn remove_element_from_list(elements: &mut Vec<i32>, target: i32) {\n    elements.retain(|&x| x != target);\n}\n\nfn main() {\n    let mut numbers = vec![1, 2, 3, 4, 2, 5, 2];\n    let target = 2;\n    remove_element_from_list(&mut numbers, target);\n    println!(\"{:?}\", numbers);\n}\n```"
  },
  {
    "task": "Use a for loop to simulate rolling a dice 100 times and count the occurrences of each face.",
    "code": "```rust\nuse rand::Rng;\nuse std::collections::HashMap;\n\nfn main() {\n    let mut occurrences = HashMap::new();\n    for _ in 0..100 {\n        let roll = rand::thread_rng().gen_range(1..=6);\n        *occurrences.entry(roll).or_insert(0) += 1;\n    }\n\n    for face in 1..=6 {\n        let count = occurrences.get(&face).unwrap_or(&0);\n        println!(\"Face {}: {} times\", face, count);\n    }\n}\n```"
  },
  {
    "task": "Write a for loop that prints all the prime numbers between 1 and 50.",
    "code": "```rust\nfn main() {\n    for num in 2..=50 {\n        if is_prime(num) {\n            println!(\"{}\", num);\n        }\n    }\n}\n\nfn is_prime(n: u32) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for i in 2..=((n as f64).sqrt() as u32) {\n        if n % i == 0 {\n            return false;\n        }\n    }\n    true\n}\n```"
  },
  {
    "task": "Develop a for loop that extracts all the uppercase letters from a string.",
    "code": "```rust\nfn extract_uppercase(input: &str) -> String {\n    let mut uppercase_letters = String::new();\n    for c in input.chars() {\n        if c.is_uppercase() {\n            uppercase_letters.push(c);\n        }\n    }\n    uppercase_letters\n}\n\nfn main() {\n    let input = \"Hello, World!\";\n    let result = extract_uppercase(input);\n    println!(\"{}\", result); // Output: \"HW\"\n}\n```"
  },
  {
    "task": "Create a for loop that checks if a list is sorted in ascending order.",
    "code": "```rust\nfn is_sorted_ascending(list: &[i32]) -> bool {\n    for i in 0..list.len() - 1 {\n        if list[i] > list[i + 1] {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let numbers = vec![1, 2, 3, 4, 5];\n    println!(\"Is sorted: {}\", is_sorted_ascending(&numbers));\n}\n```"
  },
  {
    "task": "Implement a for loop to generate a list of the first 10 square numbers.",
    "code": "```rust\nfn main() {\n    let mut squares = Vec::new();\n    for i in 1..=10 {\n        squares.push(i * i);\n    }\n    println!(\"{:?}\", squares);\n}\n```"
  },
  {
    "task": "Write code to print all the elements of a list that are greater than a given number using a for loop.",
    "code": "```rust\nfn main() {\n    let numbers = vec![3, 7, 1, 9, 4, 5];\n    let threshold = 4;\n    for &number in &numbers {\n        if number > threshold {\n            println!(\"{}\", number);\n        }\n    }\n}\n```"
  },
  {
    "task": "Construct a for loop that finds the smallest number in an array.",
    "code": "```rust\nfn find_smallest_number(arr: &[i32]) -> i32 {\n    let mut smallest = arr[0];\n    for &num in arr.iter() {\n        if num < smallest {\n            smallest = num;\n        }\n    }\n    smallest\n}\n\nfn main() {\n    let numbers = [3, 5, 2, 8, 1];\n    let smallest_number = find_smallest_number(&numbers);\n    println!(\"The smallest number is: {}\", smallest_number);\n}\n```"
  },
  {
    "task": "Develop a for loop that prints the first N lines of Pascal's Triangle.",
    "code": "```rust\nfn main() {\n    let n = 5; // You can change this value to print more or fewer lines\n    for line in 0..n {\n        let mut c = 1;\n        for i in 0..=line {\n            print!(\"{} \", c);\n            c = c * (line - i) / (i + 1);\n        }\n        println!();\n    }\n}\n```"
  },
  {
    "task": "Create a for loop that calculates the product of all elements in a list.",
    "code": "```rust\nfn main() {\n    let numbers = vec![1, 2, 3, 4, 5];\n    let mut product = 1;\n\n    for number in numbers {\n        product *= number;\n    }\n\n    println!(\"The product of all elements is: {}\", product);\n}\n```"
  },
  {
    "task": "Use a for loop to print numbers from 1 to 100, but replace multiples of 3 with 'Fizz'.",
    "code": "```rust\nfn main() {\n    for i in 1..=100 {\n        if i % 3 == 0 {\n            println!(\"Fizz\");\n        } else {\n            println!(\"{}\", i);\n        }\n    }\n}\n```"
  },
  {
    "task": "Write a for loop that iterates over a string and counts the number of words.",
    "code": "```rust\nfn count_words(s: &str) -> usize {\n    let mut count = 0;\n    let mut in_word = false;\n\n    for c in s.chars() {\n        if c.is_whitespace() {\n            in_word = false;\n        } else if !in_word {\n            in_word = true;\n            count += 1;\n        }\n    }\n\n    count\n}\n\nfn main() {\n    let text = \"Hello, world! This is a test.\";\n    let word_count = count_words(text);\n    println!(\"The number of words is: {}\", word_count);\n}\n```"
  },
  {
    "task": "Design a for loop that prints numbers from 1 to 50, but skips numbers divisible by 5.",
    "code": "```rust\nfn main() {\n    for number in 1..=50 {\n        if number % 5 != 0 {\n            println!(\"{}\", number);\n        }\n    }\n}\n```"
  },
  {
    "task": "Implement a for loop that prints a checkerboard pattern of asterisks.",
    "code": "```rust\nfn main() {\n    let size = 8; // Define the size of the checkerboard\n    for i in 0..size {\n        for j in 0..size {\n            if (i + j) % 2 == 0 {\n                print!(\"*\");\n            } else {\n                print!(\" \");\n            }\n        }\n        println!();\n    }\n}\n```"
  },
  {
    "task": "Create a for loop that finds the index of a target value in a list.",
    "code": "```rust\nfn find_index_of_target(list: &[i32], target: i32) -> Option<usize> {\n    for (index, &value) in list.iter().enumerate() {\n        if value == target {\n            return Some(index);\n        }\n    }\n    None\n}\n\nfn main() {\n    let numbers = vec![3, 9, 12, 18, 24];\n    let target = 18;\n    if let Some(index) = find_index_of_target(&numbers, target) {\n        println!(\"Target found at index: {}\", index);\n    } else {\n        println!(\"Target not found in the list.\");\n    }\n}\n```"
  },
  {
    "task": "Use a for loop to concatenate a list of strings into a single string.",
    "code": "```rust\nfn concatenate_strings(strings: Vec<&str>) -> String {\n    let mut result = String::new();\n    for s in strings {\n        result.push_str(s);\n    }\n    result\n}\n\nfn main() {\n    let strings = vec![\"Hello\", \" \", \"world\", \"!\"];\n    let concatenated = concatenate_strings(strings);\n    println!(\"{}\", concatenated);\n}\n```"
  },
  {
    "task": "Develop a for loop that rotates a list to the right by a given number of positions.",
    "code": "```rust\nfn rotate_right<T: Clone>(list: &mut Vec<T>, positions: usize) {\n    let len = list.len();\n    let positions = positions % len; // Handle cases where positions > len\n    \n    if positions == 0 || len == 0 {\n        return;\n    }\n    \n    let mut rotated = vec![list[0].clone(); len];\n    \n    for i in 0..len {\n        rotated[(i + positions) % len] = list[i].clone();\n    }\n    \n    list.copy_from_slice(&rotated);\n}\n\nfn main() {\n    let mut list = vec![1, 2, 3, 4, 5];\n    rotate_right(&mut list, 2);\n    println!(\"{:?}\", list); // Output: [4, 5, 1, 2, 3]\n}\n```"
  },
  {
    "task": "Write code that uses a for loop to insert an element into a sorted list while maintaining order.",
    "code": "```rust\nfn insert_into_sorted_list(sorted_list: &mut Vec<i32>, element: i32) {\n    let mut inserted = false;\n    for i in 0..sorted_list.len() {\n        if sorted_list[i] > element {\n            sorted_list.insert(i, element);\n            inserted = true;\n            break;\n        }\n    }\n    if !inserted {\n        sorted_list.push(element);\n    }\n}\n\nfn main() {\n    let mut sorted_list = vec![1, 3, 5, 7, 9];\n    let element = 6;\n    insert_into_sorted_list(&mut sorted_list, element);\n    println!(\"{:?}\", sorted_list);\n}\n```"
  },
  {
    "task": "Implement a for loop that counts the frequency of each character in a string.",
    "code": "```rust\nuse std::collections::HashMap;\n\nfn count_char_frequency(s: &str) -> HashMap<char, usize> {\n    let mut frequency = HashMap::new();\n    for ch in s.chars() {\n        *frequency.entry(ch).or_insert(0) += 1;\n    }\n    frequency\n}\n\nfn main() {\n    let s = \"example string\";\n    let frequency = count_char_frequency(s);\n    for (ch, count) in &frequency {\n        println!(\"{}: {}\", ch, count);\n    }\n}\n```"
  },
  {
    "task": "Create a for loop that prints all subsets of a given set.",
    "code": "```rust\nfn main() {\n    let set = vec![1, 2, 3];\n    let n = set.len();\n    let subset_count = 1 << n; // 2^n subsets\n\n    for i in 0..subset_count {\n        let mut subset = Vec::new();\n        for j in 0..n {\n            if i & (1 << j) != 0 {\n                subset.push(set[j]);\n            }\n        }\n        println!(\"{:?}\", subset);\n    }\n}\n```"
  },
  {
    "task": "Design a for loop to generate all permutations of a string.",
    "code": "```rust\nfn heap_permutation(s: &mut Vec<char>, size: usize, result: &mut Vec<String>) {\n    if size == 1 {\n        result.push(s.iter().collect());\n        return;\n    }\n\n    for i in 0..size {\n        heap_permutation(s, size - 1, result);\n\n        if size % 2 == 1 {\n            s.swap(0, size - 1);\n        } else {\n            s.swap(i, size - 1);\n        }\n    }\n}\n\nfn main() {\n    let mut s = String::from(\"abc\").chars().collect::<Vec<_>>();\n    let mut result = Vec::new();\n    heap_permutation(&mut s, s.len(), &mut result);\n    for permutation in result {\n        println!(\"{}\", permutation);\n    }\n}\n```"
  },
  {
    "task": "Write a for loop that sorts an array in descending order.",
    "code": "```rust\nfn main() {\n    let mut arr = [5, 3, 8, 6, 2];\n\n    for i in 0..arr.len() {\n        for j in 0..arr.len() - i - 1 {\n            if arr[j] < arr[j + 1] {\n                arr.swap(j, j + 1);\n            }\n        }\n    }\n\n    println!(\"{:?}\", arr);\n}\n```"
  },
  {
    "task": "Use a for loop to generate a sequence of random characters and print them.",
    "code": "```rust\nuse rand::Rng;\n\nfn main() {\n    let charset: Vec<char> = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\".chars().collect();\n    let mut rng = rand::thread_rng();\n\n    for _ in 0..10 {\n        let idx = rng.gen_range(0..charset.len());\n        print!(\"{}\", charset[idx]);\n    }\n    println!();\n}\n```"
  },
  {
    "task": "Construct a for loop that finds the common elements between two lists.",
    "code": "```rust\nfn main() {\n    let list1 = vec![1, 2, 3, 4, 5];\n    let list2 = vec![3, 4, 5, 6, 7];\n    let mut common_elements = Vec::new();\n\n    for &item in &list1 {\n        if list2.contains(&item) {\n            common_elements.push(item);\n        }\n    }\n\n    println!(\"Common elements: {:?}\", common_elements);\n}\n```"
  },
  {
    "task": "Develop a for loop to calculate and print the cumulative sum of a list.",
    "code": "```rust\nfn main() {\n    let numbers = vec![1, 2, 3, 4, 5];\n    let mut cumulative_sum = 0;\n\n    for number in numbers {\n        cumulative_sum += number;\n        println!(\"{}\", cumulative_sum);\n    }\n}\n```"
  },
  {
    "task": "Create a for loop that prints a diamond pattern using asterisks.",
    "code": "```rust\nfn main() {\n    let n = 5; // Size of the diamond\n\n    // Top half including the middle line\n    for i in 0..n {\n        for _ in 0..(n - i - 1) {\n            print!(\" \");\n        }\n        for _ in 0..(2 * i + 1) {\n            print!(\"*\");\n        }\n        println!();\n    }\n\n    // Bottom half\n    for i in (0..n - 1).rev() {\n        for _ in 0..(n - i - 1) {\n            print!(\" \");\n        }\n        for _ in 0..(2 * i + 1) {\n            print!(\"*\");\n        }\n        println!();\n    }\n}\n```"
  },
  {
    "task": "Write a for loop that simulates a countdown timer from a specified number of seconds.",
    "code": "```rust\nfn main() {\n    let countdown_start = 10; // specify the starting number of seconds\n    for seconds in (0..=countdown_start).rev() {\n        println!(\"{} seconds remaining\", seconds);\n    }\n}\n```"
  },
  {
    "task": "Use a for loop to print the transpose of a matrix.",
    "code": "```rust\nfn main() {\n    let matrix = vec![\n        vec![1, 2, 3],\n        vec![4, 5, 6],\n        vec![7, 8, 9],\n    ];\n\n    let rows = matrix.len();\n    let cols = matrix[0].len();\n\n    for j in 0..cols {\n        for i in 0..rows {\n            print!(\"{} \", matrix[i][j]);\n        }\n        println!();\n    }\n}\n```"
  },
  {
    "task": "Implement a for loop that reverses the order of words in a sentence.",
    "code": "```rust\nfn reverse_words(sentence: &str) -> String {\n    let words: Vec<&str> = sentence.split_whitespace().collect();\n    let mut reversed_sentence = String::new();\n    for word in words.iter().rev() {\n        reversed_sentence.push_str(word);\n        reversed_sentence.push(' ');\n    }\n    reversed_sentence.trim_end().to_string()\n}\n\nfn main() {\n    let sentence = \"The quick brown fox jumps over the lazy dog\";\n    let reversed = reverse_words(sentence);\n    println!(\"{}\", reversed);\n}\n```"
  },
  {
    "task": "Create a for loop that deletes elements from a list that are less than a given value.",
    "code": "```rust\nfn main() {\n    let mut numbers = vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n    let threshold = 5;\n    numbers.retain(|&x| x >= threshold);\n    println!(\"{:?}\", numbers);\n}\n```"
  },
  {
    "task": "Design a for loop to merge two sorted lists into a single sorted list.",
    "code": "```rust\nfn merge_sorted_lists(list1: &[i32], list2: &[i32]) -> Vec<i32> {\n    let mut merged_list = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n\n    while i < list1.len() && j < list2.len() {\n        if list1[i] < list2[j] {\n            merged_list.push(list1[i]);\n            i += 1;\n        } else {\n            merged_list.push(list2[j]);\n            j += 1;\n        }\n    }\n\n    for &item in &list1[i..] {\n        merged_list.push(item);\n    }\n\n    for &item in &list2[j..] {\n        merged_list.push(item);\n    }\n\n    merged_list\n}\n\nfn main() {\n    let list1 = vec![1, 3, 5, 7];\n    let list2 = vec![2, 4, 6, 8];\n    let merged_list = merge_sorted_lists(&list1, &list2);\n    println!(\"{:?}\", merged_list);\n}\n```"
  },
  {
    "task": "Write a for loop that calculates the power of a number using repeated multiplication.",
    "code": "```rust\nfn power(base: i32, exponent: u32) -> i32 {\n    let mut result = 1;\n    for _ in 0..exponent {\n        result *= base;\n    }\n    result\n}\n\nfn main() {\n    let base = 3;\n    let exponent = 4;\n    let result = power(base, exponent);\n    println!(\"{} to the power of {} is {}\", base, exponent, result);\n}\n```"
  },
  {
    "task": "Use a for loop to find the longest word in a list of words.",
    "code": "```rust\nfn find_longest_word(words: &[&str]) -> &str {\n    let mut longest_word = \"\";\n    for &word in words {\n        if word.len() > longest_word.len() {\n            longest_word = word;\n        }\n    }\n    longest_word\n}\n\nfn main() {\n    let words = [\"apple\", \"banana\", \"cherry\", \"date\"];\n    let longest = find_longest_word(&words);\n    println!(\"The longest word is: {}\", longest);\n}\n```"
  },
  {
    "task": "Develop a for loop that sorts a list of tuples based on the second element.",
    "code": "```rust\nfn main() {\n    let mut data = vec![(3, 4), (1, 2), (5, 1), (4, 3)];\n    for i in 0..data.len() {\n        for j in 0..data.len() - 1 {\n            if data[j].1 > data[j + 1].1 {\n                data.swap(j, j + 1);\n            }\n        }\n    }\n    println!(\"{:?}\", data);\n}\n```"
  },
  {
    "task": "Create a for loop that replicates each character in a string a given number of times.",
    "code": "```rust\nfn replicate_chars(input: &str, times: usize) -> String {\n    let mut result = String::new();\n    for c in input.chars() {\n        for _ in 0..times {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let original = \"hello\";\n    let replicated = replicate_chars(original, 3);\n    println!(\"{}\", replicated); // Output: hhheeellllllooo\n}\n```"
  },
  {
    "task": "Construct a for loop that replaces spaces in a string with hyphens.",
    "code": "```rust\nfn replace_spaces_with_hyphens(input: &str) -> String {\n    let mut result = String::new();\n    for c in input.chars() {\n        if c == ' ' {\n            result.push('-');\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let input = \"Replace spaces in this string\";\n    let output = replace_spaces_with_hyphens(input);\n    println!(\"{}\", output);\n}\n```"
  },
  {
    "task": "Design a for loop to find the intersection of two sets.",
    "code": "```rust\nuse std::collections::HashSet;\n\nfn main() {\n    let set1: HashSet<i32> = [1, 2, 3, 4, 5].iter().cloned().collect();\n    let set2: HashSet<i32> = [3, 4, 5, 6, 7].iter().cloned().collect();\n    \n    let mut intersection = HashSet::new();\n    \n    for &item in &set1 {\n        if set2.contains(&item) {\n            intersection.insert(item);\n        }\n    }\n    \n    println!(\"{:?}\", intersection);\n}\n```"
  },
  {
    "task": "Write a for loop that generates a list of prime numbers up to a given number.",
    "code": "```rust\nfn is_prime(n: u32) -> bool {\n    if n <= 1 {\n        return false;\n    }\n    for i in 2..=((n as f64).sqrt() as u32) {\n        if n % i == 0 {\n            return false;\n        }\n    }\n    true\n}\n\nfn generate_primes(up_to: u32) -> Vec<u32> {\n    let mut primes = Vec::new();\n    for num in 2..=up_to {\n        if is_prime(num) {\n            primes.push(num);\n        }\n    }\n    primes\n}\n\nfn main() {\n    let up_to = 30; // Change this number to generate primes up to a different value\n    let primes = generate_primes(up_to);\n    println!(\"{:?}\", primes);\n}\n```"
  },
  {
    "task": "Use a for loop to implement a simple text-based progress bar.",
    "code": "```rust\nfn main() {\n    let total_steps = 10;\n    for step in 1..=total_steps {\n        print!(\"[\");\n        for _ in 0..step {\n            print!(\"#\");\n        }\n        for _ in step..total_steps {\n            print!(\"-\");\n        }\n        println!(\"] Step {}/{}\", step, total_steps);\n    }\n}\n```"
  },
  {
    "task": "Implement a for loop that finds and prints all palindromic numbers between 10 and 200.",
    "code": "```rust\nfn main() {\n    for num in 10..=200 {\n        let num_str = num.to_string();\n        if num_str.chars().rev().collect::<String>() == num_str {\n            println!(\"{}\", num);\n        }\n    }\n}\n```"
  },
  {
    "task": "Create a for loop that multiplies corresponding elements of two lists and stores the result.",
    "code": "```rust\nfn main() {\n    let list1 = vec![1, 2, 3, 4, 5];\n    let list2 = vec![6, 7, 8, 9, 10];\n    let mut result = Vec::new();\n\n    for i in 0..list1.len() {\n        result.push(list1[i] * list2[i]);\n    }\n\n    println!(\"{:?}\", result);\n}\n```"
  },
  {
    "task": "Develop a for loop that finds the difference between the largest and smallest numbers in a list.",
    "code": "```rust\nfn main() {\n    let numbers = vec![10, 3, 5, 6, 2, 8];\n    if numbers.is_empty() {\n        println!(\"The list is empty.\");\n        return;\n    }\n\n    let mut min = numbers[0];\n    let mut max = numbers[0];\n\n    for &num in &numbers {\n        if num < min {\n            min = num;\n        }\n        if num > max {\n            max = num;\n        }\n    }\n\n    let difference = max - min;\n    println!(\"The difference between the largest and smallest numbers is: {}\", difference);\n}\n```"
  },
  {
    "task": "Write a for loop that prints numbers from 1 to 100, replacing multiples of 5 with 'Buzz'.",
    "code": "```rust\nfn main() {\n    for i in 1..=100 {\n        if i % 5 == 0 {\n            println!(\"Buzz\");\n        } else {\n            println!(\"{}\", i);\n        }\n    }\n}\n```"
  },
  {
    "task": "Use a for loop to convert a list of integers into their binary representation.",
    "code": "```rust\nfn main() {\n    let numbers = vec![1, 2, 3, 4, 5];\n    let binary_representations: Vec<String> = numbers.iter().map(|&num| format!(\"{:b}\", num)).collect();\n\n    for binary in binary_representations {\n        println!(\"{}\", binary);\n    }\n}\n```"
  },
  {
    "task": "Design a for loop that fills a 2D array with consecutive numbers in a spiral pattern.",
    "code": "```rust\nfn fill_spiral(n: usize) -> Vec<Vec<i32>> {\n    let mut matrix = vec![vec![0; n]; n];\n    let mut num = 1;\n    let mut left = 0;\n    let mut right = n - 1;\n    let mut top = 0;\n    let mut bottom = n - 1;\n\n    while left <= right && top <= bottom {\n        for i in left..=right {\n            matrix[top][i] = num;\n            num += 1;\n        }\n        top += 1;\n\n        for i in top..=bottom {\n            matrix[i][right] = num;\n            num += 1;\n        }\n        if right == 0 { break; }\n        right -= 1;\n\n        if top <= bottom {\n            for i in (left..=right).rev() {\n                matrix[bottom][i] = num;\n                num += 1;\n            }\n        }\n        if bottom == 0 { break; }\n        bottom -= 1;\n\n        if left <= right {\n            for i in (top..=bottom).rev() {\n                matrix[i][left] = num;\n                num += 1;\n            }\n        }\n        left += 1;\n    }\n\n    matrix\n}\n\nfn main() {\n    let n = 4;\n    let spiral_matrix = fill_spiral(n);\n    for row in spiral_matrix {\n        for val in row {\n            print!(\"{:3} \", val);\n        }\n        println!();\n    }\n}\n```"
  },
  {
    "task": "Create a for loop that iterates over a list and removes duplicates.",
    "code": "```rust\nfn remove_duplicates(input: Vec<i32>) -> Vec<i32> {\n    let mut seen = std::collections::HashSet::new();\n    let mut output = Vec::new();\n\n    for &item in &input {\n        if seen.insert(item) {\n            output.push(item);\n        }\n    }\n\n    output\n}\n\nfn main() {\n    let numbers = vec![1, 2, 3, 2, 4, 1, 5];\n    let unique_numbers = remove_duplicates(numbers);\n    println!(\"{:?}\", unique_numbers);\n}\n```"
  },
  {
    "task": "Implement a for loop to calculate the dot product of two vectors.",
    "code": "```rust\nfn dot_product(vec1: &[i32], vec2: &[i32]) -> i32 {\n    let mut result = 0;\n    for i in 0..vec1.len() {\n        result += vec1[i] * vec2[i];\n    }\n    result\n}\n\nfn main() {\n    let vector1 = vec![1, 2, 3];\n    let vector2 = vec![4, 5, 6];\n    let result = dot_product(&vector1, &vector2);\n    println!(\"Dot product: {}\", result);\n}\n```"
  },
  {
    "task": "Write a for loop that prints a sequence of numbers in reverse order.",
    "code": "```rust\nfn main() {\n    for number in (1..=10).rev() {\n        println!(\"{}\", number);\n    }\n}\n```"
  },
  {
    "task": "Develop a for loop that computes the greatest common divisor (GCD) of two numbers.",
    "code": "```rust\nfn gcd(mut a: u32, mut b: u32) -> u32 {\n    for _ in 0.. {\n        if b == 0 {\n            break;\n        }\n        let temp = b;\n        b = a % b;\n        a = temp;\n    }\n    a\n}\n\nfn main() {\n    let num1 = 48;\n    let num2 = 18;\n    let result = gcd(num1, num2);\n    println!(\"The GCD of {} and {} is {}\", num1, num2, result);\n}\n```"
  },
  {
    "task": "Construct a for loop that prints a square pattern of numbers with a given side length.",
    "code": "```rust\nfn print_square_pattern(side_length: usize) {\n    for _ in 0..side_length {\n        for j in 1..=side_length {\n            print!(\"{} \", j);\n        }\n        println!();\n    }\n}\n\nfn main() {\n    let side_length = 5; // Example side length\n    print_square_pattern(side_length);\n}\n```"
  },
  {
    "task": "Create a for loop that shifts all elements of a list to the left by one position.",
    "code": "```rust\nfn shift_left(arr: &mut Vec<i32>) {\n    if arr.is_empty() {\n        return;\n    }\n    let first = arr.remove(0);\n    arr.push(first);\n}\n\nfn main() {\n    let mut numbers = vec![1, 2, 3, 4, 5];\n    shift_left(&mut numbers);\n    println!(\"{:?}\", numbers);\n}\n```"
  },
  {
    "task": "Use a for loop to print the first 20 triangular numbers.",
    "code": "```rust\nfn main() {\n    for n in 1..=20 {\n        let triangular_number = n * (n + 1) / 2;\n        println!(\"{}\", triangular_number);\n    }\n}\n```"
  },
  {
    "task": "Write a for loop that finds the first repeating character in a string.",
    "code": "```rust\nfn first_repeating_character(s: &str) -> Option<char> {\n    let mut seen = std::collections::HashSet::new();\n    for ch in s.chars() {\n        if !seen.insert(ch) {\n            return Some(ch);\n        }\n    }\n    None\n}\n\nfn main() {\n    let input = \"swiss\";\n    if let Some(ch) = first_repeating_character(input) {\n        println!(\"First repeating character: {}\", ch);\n    } else {\n        println!(\"No repeating characters found.\");\n    }\n}\n```"
  },
  {
    "task": "Design a for loop that transforms a list of temperatures from Celsius to Fahrenheit.",
    "code": "```rust\nfn main() {\n    let celsius_temperatures = vec![0.0, 20.0, 37.0, 100.0];\n    let mut fahrenheit_temperatures = Vec::new();\n\n    for &temp in &celsius_temperatures {\n        let fahrenheit = temp * 9.0 / 5.0 + 32.0;\n        fahrenheit_temperatures.push(fahrenheit);\n    }\n\n    println!(\"{:?}\", fahrenheit_temperatures);\n}\n```"
  },
  {
    "task": "Implement a for loop to determine if a string is an isogram.",
    "code": "```rust\nfn is_isogram(s: &str) -> bool {\n    let mut seen = std::collections::HashSet::new();\n    for c in s.chars() {\n        let c_lower = c.to_ascii_lowercase();\n        if seen.contains(&c_lower) {\n            return false;\n        }\n        seen.insert(c_lower);\n    }\n    true\n}\n\nfn main() {\n    let test_string = \"Dermatoglyphics\";\n    println!(\"Is '{}' an isogram? {}\", test_string, is_isogram(test_string));\n}\n```"
  },
  {
    "task": "Use a for loop to create a histogram from a list of integers.",
    "code": "```rust\nfn main() {\n    let data = vec![1, 2, 2, 3, 3, 3, 4, 4, 4, 4];\n    let mut histogram = std::collections::HashMap::new();\n\n    for &value in &data {\n        *histogram.entry(value).or_insert(0) += 1;\n    }\n\n    for (key, count) in &histogram {\n        println!(\"{}: {}\", key, \"*\".repeat(*count));\n    }\n}\n```"
  },
  {
    "task": "Create a for loop that prints the indexes of all occurrences of a particular element in a list.",
    "code": "```rust\nfn main() {\n    let list = vec![1, 2, 3, 2, 4, 2, 5];\n    let target = 2;\n    \n    for (index, &value) in list.iter().enumerate() {\n        if value == target {\n            println!(\"{}\", index);\n        }\n    }\n}\n```"
  },
  {
    "task": "Write a for loop that checks if a given string is a palindrome.",
    "code": "```rust\nfn is_palindrome(s: &str) -> bool {\n    let chars: Vec<char> = s.chars().collect();\n    let len = chars.len();\n    for i in 0..len / 2 {\n        if chars[i] != chars[len - i - 1] {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let input = \"radar\";\n    if is_palindrome(input) {\n        println!(\"'{}' is a palindrome.\", input);\n    } else {\n        println!(\"'{}' is not a palindrome.\", input);\n    }\n}\n```"
  },
  {
    "task": "Develop a for loop to simulate the behavior of a simple finite state machine.",
    "code": "```rust\nfn main() {\n    let states = vec![\"State1\", \"State2\", \"State3\", \"State4\"];\n    let transitions = vec![\n        (\"State1\", \"State2\"),\n        (\"State2\", \"State3\"),\n        (\"State3\", \"State4\"),\n        (\"State4\", \"State1\"),\n    ];\n\n    let mut current_state = \"State1\";\n\n    for _ in 0..10 {\n        println!(\"Current State: {}\", current_state);\n        current_state = match transitions.iter().find(|&&(s, _)| s == current_state) {\n            Some(&(_, next_state)) => next_state,\n            None => break,\n        };\n    }\n}\n```"
  },
  {
    "task": "Design a for loop that finds the sum of all odd numbers in a list.",
    "code": "```rust\nfn sum_of_odds(numbers: &[i32]) -> i32 {\n    let mut sum = 0;\n    for &num in numbers {\n        if num % 2 != 0 {\n            sum += num;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let numbers = vec![1, 2, 3, 4, 5, 6, 7, 8, 9];\n    let sum = sum_of_odds(&numbers);\n    println!(\"Sum of odd numbers: {}\", sum);\n}\n```"
  },
  {
    "task": "Use a for loop to count how many words start with a vowel in a given sentence.",
    "code": "```rust\nfn count_words_starting_with_vowel(sentence: &str) -> usize {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let mut count = 0;\n\n    for word in sentence.split_whitespace() {\n        if let Some(first_char) = word.chars().next() {\n            if vowels.contains(&first_char.to_ascii_lowercase()) {\n                count += 1;\n            }\n        }\n    }\n\n    count\n}\n\nfn main() {\n    let sentence = \"An example of a sentence with some vowels.\";\n    let count = count_words_starting_with_vowel(sentence);\n    println!(\"Number of words starting with a vowel: {}\", count);\n}\n```"
  },
  {
    "task": "Implement a for loop that sorts a list of strings by their length.",
    "code": "```rust\nfn main() {\n    let mut strings = vec![\"apple\", \"banana\", \"kiwi\", \"peach\", \"grape\"];\n    \n    for i in 0..strings.len() {\n        for j in 0..strings.len() - i - 1 {\n            if strings[j].len() > strings[j + 1].len() {\n                strings.swap(j, j + 1);\n            }\n        }\n    }\n    \n    println!(\"{:?}\", strings);\n}\n```"
  },
  {
    "task": "Write a for loop that prints the factorial of numbers from 1 to 10.",
    "code": "```rust\nfn main() {\n    for i in 1..=10 {\n        let mut factorial = 1;\n        for j in 1..=i {\n            factorial *= j;\n        }\n        println!(\"Factorial of {} is {}\", i, factorial);\n    }\n}\n```"
  },
  {
    "task": "Create a for loop that replaces all instances of a substring in a string with another substring.",
    "code": "```rust\nfn replace_substring(original: &str, to_replace: &str, replacement: &str) -> String {\n    let mut result = String::new();\n    let mut start = 0;\n    let original_len = original.len();\n    let to_replace_len = to_replace.len();\n\n    while start < original_len {\n        if original[start..].starts_with(to_replace) {\n            result.push_str(replacement);\n            start += to_replace_len;\n        } else {\n            result.push(original[start..].chars().next().unwrap());\n            start += 1;\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let text = \"Hello world! Hello universe!\";\n    let replaced_text = replace_substring(text, \"Hello\", \"Hi\");\n    println!(\"{}\", replaced_text);\n}\n```"
  },
  {
    "task": "Develop a for loop that squares each element in a list of numbers.",
    "code": "```rust\nfn main() {\n    let numbers = vec![1, 2, 3, 4, 5];\n    let mut squared_numbers = Vec::new();\n\n    for number in &numbers {\n        squared_numbers.push(number * number);\n    }\n\n    println!(\"{:?}\", squared_numbers);\n}\n```"
  },
  {
    "task": "Use a for loop to reverse the order of elements in an array.",
    "code": "```rust\nfn reverse_array(arr: &mut [i32]) {\n    let len = arr.len();\n    for i in 0..len / 2 {\n        arr.swap(i, len - 1 - i);\n    }\n}\n\nfn main() {\n    let mut arr = [1, 2, 3, 4, 5];\n    reverse_array(&mut arr);\n    println!(\"{:?}\", arr);\n}\n```"
  },
  {
    "task": "Implement a for loop that tests if two strings are anagrams of each other.",
    "code": "```rust\nfn are_anagrams(s1: &str, s2: &str) -> bool {\n    if s1.len() != s2.len() {\n        return false;\n    }\n\n    let mut char_count = [0; 256];\n\n    for c in s1.chars() {\n        char_count[c as usize] += 1;\n    }\n\n    for c in s2.chars() {\n        char_count[c as usize] -= 1;\n    }\n\n    for count in char_count.iter() {\n        if *count != 0 {\n            return false;\n        }\n    }\n\n    true\n}\n\nfn main() {\n    let s1 = \"listen\";\n    let s2 = \"silent\";\n    \n    if are_anagrams(s1, s2) {\n        println!(\"The strings are anagrams.\");\n    } else {\n        println!(\"The strings are not anagrams.\");\n    }\n}\n```"
  },
  {
    "task": "Design a for loop to find and print all Armstrong numbers between 100 and 999.",
    "code": "```rust\nfn main() {\n    for number in 100..=999 {\n        let digits = (\n            number / 100,\n            (number / 10) % 10,\n            number % 10,\n        );\n        \n        let sum_of_cubes = digits.0.pow(3) + digits.1.pow(3) + digits.2.pow(3);\n        \n        if sum_of_cubes == number {\n            println!(\"{}\", number);\n        }\n    }\n}\n```"
  }
]