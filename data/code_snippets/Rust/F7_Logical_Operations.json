[
  {
    "task": "Create a function that takes two boolean inputs and returns true if both are true using logical AND.",
    "code": "```rust\nfn both_true(a: bool, b: bool) -> bool {\n    a && b\n}\n```"
  },
  {
    "task": "Write a script to check if either of two given conditions are met using logical OR.",
    "code": "```rust\nfn main() {\n    let condition1 = true; // Example condition 1: can be any boolean expression\n    let condition2 = false; // Example condition 2: can be any boolean expression\n\n    if condition1 || condition2 {\n        println!(\"At least one condition is met.\");\n    } else {\n        println!(\"Neither condition is met.\");\n    }\n}\n```"
  },
  {
    "task": "Develop a program that negates a boolean variable using logical NOT.",
    "code": "```rust\nfn main() {\n    let original_value = true;\n    let negated_value = !original_value;\n    println!(\"Original: {}, Negated: {}\", original_value, negated_value);\n}\n```"
  },
  {
    "task": "Implement a feature that determines if a number is within a specific range using logical operators.",
    "code": "```rust\nfn is_within_range(number: i32, lower_bound: i32, upper_bound: i32) -> bool {\n    number >= lower_bound && number <= upper_bound\n}\n\nfn main() {\n    let number = 10;\n    let lower_bound = 5;\n    let upper_bound = 15;\n\n    if is_within_range(number, lower_bound, upper_bound) {\n        println!(\"The number {} is within the range {} to {}\", number, lower_bound, upper_bound);\n    } else {\n        println!(\"The number {} is NOT within the range {} to {}\", number, lower_bound, upper_bound);\n    }\n}\n```"
  },
  {
    "task": "Design a system that checks if a user has both read and write permissions using logical AND.",
    "code": "```rust\nstruct UserPermissions {\n    can_read: bool,\n    can_write: bool,\n}\n\nfn has_read_and_write_permissions(user: &UserPermissions) -> bool {\n    user.can_read && user.can_write\n}\n\nfn main() {\n    let user = UserPermissions {\n        can_read: true,\n        can_write: true,\n    };\n\n    if has_read_and_write_permissions(&user) {\n        println!(\"User has both read and write permissions.\");\n    } else {\n        println!(\"User does not have both read and write permissions.\");\n    }\n}\n```"
  },
  {
    "task": "Write a function to verify if a string is neither empty nor null using logical NOT.",
    "code": "```rust\nfn is_not_empty_or_null(s: Option<&str>) -> bool {\n    !(s.is_none() || s.unwrap_or(\"\").is_empty())\n}\n\nfn main() {\n    let test1 = Some(\"hello\");\n    let test2: Option<&str> = None;\n    let test3 = Some(\"\");\n    \n    println!(\"{}\", is_not_empty_or_null(test1)); // true\n    println!(\"{}\", is_not_empty_or_null(test2)); // false\n    println!(\"{}\", is_not_empty_or_null(test3)); // false\n}\n```"
  },
  {
    "task": "Create a conditional statement that executes a block of code if either of two expressions are true using logical OR.",
    "code": "```rust\nfn main() {\n    let expression1 = true; // Example expression 1\n    let expression2 = false; // Example expression 2\n\n    if expression1 || expression2 {\n        println!(\"At least one expression is true.\");\n    }\n}\n```"
  },
  {
    "task": "Build a program that inverts the truth value of a given condition using logical NOT.",
    "code": "```rust\nfn main() {\n    let condition = true;\n    let inverted_condition = !condition;\n    println!(\"Original: {}, Inverted: {}\", condition, inverted_condition);\n}\n```"
  },
  {
    "task": "Compose a function to return true if a list is not empty using logical NOT.",
    "code": "```rust\nfn is_not_empty<T>(list: &[T]) -> bool {\n    !list.is_empty()\n}\n```"
  },
  {
    "task": "Develop a filter that selects items from a collection only if they meet multiple criteria using logical AND.",
    "code": "```rust\nfn filter_items(items: Vec<i32>) -> Vec<i32> {\n    items.into_iter()\n        .filter(|&item| item > 10 && item % 2 == 0)\n        .collect()\n}\n\nfn main() {\n    let items = vec![5, 12, 18, 7, 20, 3, 14];\n    let filtered_items = filter_items(items);\n    println!(\"{:?}\", filtered_items);\n}\n```"
  },
  {
    "task": "Write a script that checks if a value is outside a given range using logical OR.",
    "code": "```rust\nfn is_outside_range(value: i32, min: i32, max: i32) -> bool {\n    value < min || value > max\n}\n\nfn main() {\n    let value = 10;\n    let min = 5;\n    let max = 8;\n\n    if is_outside_range(value, min, max) {\n        println!(\"The value is outside the range.\");\n    } else {\n        println!(\"The value is inside the range.\");\n    }\n}\n```"
  },
  {
    "task": "Create a small program to toggle a boolean flag using logical NOT.",
    "code": "```rust\nfn main() {\n    let mut flag = true;\n    println!(\"Initial flag: {}\", flag);\n    \n    // Toggle the flag\n    flag = !flag;\n    println!(\"Toggled flag: {}\", flag);\n}\n```"
  },
  {
    "task": "Implement a feature that evaluates if a username is both unique and valid using logical AND.",
    "code": "```rust\nuse std::collections::HashSet;\n\nfn is_username_valid(username: &str) -> bool {\n    // Example validation logic: username must be at least 5 characters long\n    username.len() >= 5\n}\n\nfn is_username_unique(username: &str, existing_usernames: &HashSet<String>) -> bool {\n    !existing_usernames.contains(username)\n}\n\nfn is_username_unique_and_valid(username: &str, existing_usernames: &HashSet<String>) -> bool {\n    is_username_valid(username) && is_username_unique(username, existing_usernames)\n}\n\nfn main() {\n    let mut existing_usernames = HashSet::new();\n    existing_usernames.insert(\"user1\".to_string());\n    existing_usernames.insert(\"user2\".to_string());\n\n    let username = \"new_user\";\n    if is_username_unique_and_valid(username, &existing_usernames) {\n        println!(\"The username '{}' is unique and valid.\", username);\n    } else {\n        println!(\"The username '{}' is not unique or not valid.\", username);\n    }\n}\n```"
  },
  {
    "task": "Design a conditional to perform an action if neither of two flags are set using logical NOT.",
    "code": "```rust\nfn main() {\n    let flag_one = false;\n    let flag_two = false;\n\n    if !flag_one && !flag_two {\n        println!(\"Neither flag is set. Performing action.\");\n    }\n}\n```"
  },
  {
    "task": "Write a function that returns true if at least one of multiple boolean inputs is true using logical OR.",
    "code": "```rust\nfn at_least_one_true(inputs: &[bool]) -> bool {\n    inputs.iter().any(|&b| b)\n}\n\nfn main() {\n    let test_case = vec![false, false, true, false];\n    println!(\"{}\", at_least_one_true(&test_case)); // Output: true\n}\n```"
  },
  {
    "task": "Create a loop that continues executing as long as two conditions are both false using logical NOT and AND.",
    "code": "```rust\nfn main() {\n    let mut condition1 = false;\n    let mut condition2 = false;\n\n    while !condition1 && !condition2 {\n        // Perform some operations here\n\n        // Example update conditions to eventually break the loop\n        condition1 = true; // or some condition that changes over time\n        condition2 = true; // or some condition that changes over time\n    }\n}\n```"
  },
  {
    "task": "Develop a sequence that checks if a character is either a vowel or a consonant using logical OR.",
    "code": "```rust\nfn is_vowel_or_consonant(c: char) -> &'static str {\n    if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ||\n       c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' {\n        \"vowel\"\n    } else if c.is_alphabetic() {\n        \"consonant\"\n    } else {\n        \"neither\"\n    }\n}\n\nfn main() {\n    let test_chars = ['a', 'b', 'E', 'x', '1', 'O'];\n    for &c in &test_chars {\n        println!(\"{} is a {}\", c, is_vowel_or_consonant(c));\n    }\n}\n```"
  },
  {
    "task": "Implement a validation that ensures a password is both of minimum length and contains numbers using logical AND.",
    "code": "```rust\nfn is_valid_password(password: &str) -> bool {\n    let is_minimum_length = password.len() >= 8;\n    let contains_number = password.chars().any(|c| c.is_digit(10));\n    is_minimum_length && contains_number\n}\n\nfn main() {\n    let password = \"pass1234\";\n    if is_valid_password(password) {\n        println!(\"Password is valid.\");\n    } else {\n        println!(\"Password is invalid.\");\n    }\n}\n```"
  },
  {
    "task": "Compose a test to determine if a point is not within a circle using logical NOT.",
    "code": "```rust\nstruct Point {\n    x: f64,\n    y: f64,\n}\n\nstruct Circle {\n    center: Point,\n    radius: f64,\n}\n\nfn is_not_within_circle(point: &Point, circle: &Circle) -> bool {\n    let dx = point.x - circle.center.x;\n    let dy = point.y - circle.center.y;\n    let distance_squared = dx * dx + dy * dy;\n    !(distance_squared < circle.radius * circle.radius)\n}\n\nfn main() {\n    let point = Point { x: 3.0, y: 4.0 };\n    let circle = Circle {\n        center: Point { x: 0.0, y: 0.0 },\n        radius: 5.0,\n    };\n\n    if is_not_within_circle(&point, &circle) {\n        println!(\"The point is not within the circle.\");\n    } else {\n        println!(\"The point is within the circle.\");\n    }\n}\n```"
  },
  {
    "task": "Write a function to decide if a user is either an admin or an editor using logical OR.",
    "code": "```rust\nfn is_admin_or_editor(user_role: &str) -> bool {\n    user_role == \"admin\" || user_role == \"editor\"\n}\n\nfn main() {\n    let user_role = \"admin\";\n    if is_admin_or_editor(user_role) {\n        println!(\"User is either an admin or an editor.\");\n    } else {\n        println!(\"User is neither an admin nor an editor.\");\n    }\n}\n```"
  },
  {
    "task": "Create a conditional statement to trigger an alert if two sensors both detect motion using logical AND.",
    "code": "```rust\nfn main() {\n    let sensor1_detects_motion = true; // Example value\n    let sensor2_detects_motion = true; // Example value\n\n    if sensor1_detects_motion && sensor2_detects_motion {\n        trigger_alert();\n    }\n}\n\nfn trigger_alert() {\n    println!(\"Alert: Both sensors detect motion!\");\n}\n```"
  },
  {
    "task": "Design a program to validate an email format and ensure it contains a domain using logical AND.",
    "code": "```rust\nfn is_valid_email(email: &str) -> bool {\n    let at_index = email.find('@');\n    let dot_index = email.rfind('.');\n    \n    match (at_index, dot_index) {\n        (Some(at), Some(dot)) => at < dot && dot < email.len() - 1,\n        _ => false,\n    }\n}\n\nfn main() {\n    let email = \"example@domain.com\";\n    if is_valid_email(email) {\n        println!(\"The email is valid.\");\n    } else {\n        println!(\"The email is invalid.\");\n    }\n}\n```"
  },
  {
    "task": "Develop a method to confirm that a transaction is neither fraudulent nor unauthorized using logical NOT.",
    "code": "```rust\nstruct Transaction {\n    is_fraudulent: bool,\n    is_unauthorized: bool,\n}\n\nimpl Transaction {\n    fn is_valid(&self) -> bool {\n        !self.is_fraudulent && !self.is_unauthorized\n    }\n}\n\nfn main() {\n    let transaction = Transaction {\n        is_fraudulent: false,\n        is_unauthorized: false,\n    };\n\n    if transaction.is_valid() {\n        println!(\"Transaction is valid.\");\n    } else {\n        println!(\"Transaction is not valid.\");\n    }\n}\n```"
  },
  {
    "task": "Write a function that outputs true if a file is either missing or empty using logical OR.",
    "code": "```rust\nuse std::fs;\n\nfn is_file_missing_or_empty(path: &str) -> bool {\n    !fs::metadata(path).is_ok() || fs::read_to_string(path).unwrap_or_default().is_empty()\n}\n\nfn main() {\n    let path = \"example.txt\";\n    println!(\"{}\", is_file_missing_or_empty(path));\n}\n```"
  },
  {
    "task": "Implement a system to check if a student's grade is neither failing nor incomplete using logical NOT.",
    "code": "```rust\nfn is_grade_passed_and_complete(grade: char) -> bool {\n    !(grade == 'F' || grade == 'I')\n}\n\nfn main() {\n    let grade1 = 'A';\n    let grade2 = 'F';\n    let grade3 = 'I';\n    \n    println!(\"Grade {} passed and complete: {}\", grade1, is_grade_passed_and_complete(grade1));\n    println!(\"Grade {} passed and complete: {}\", grade2, is_grade_passed_and_complete(grade2));\n    println!(\"Grade {} passed and complete: {}\", grade3, is_grade_passed_and_complete(grade3));\n}\n```"
  },
  {
    "task": "Create a script that executes a command if a file is both readable and writable using logical AND.",
    "code": "```rust\nuse std::fs;\n\nfn main() {\n    let file_path = \"example.txt\";\n    \n    if is_readable_and_writable(file_path) {\n        execute_command();\n    }\n}\n\nfn is_readable_and_writable(file_path: &str) -> bool {\n    fs::metadata(file_path).map(|metadata| {\n        metadata.permissions().readonly() == false\n    }).unwrap_or(false) && fs::File::open(file_path).is_ok()\n}\n\nfn execute_command() {\n    println!(\"File is both readable and writable, executing command.\");\n}\n```"
  },
  {
    "task": "Compose a function to determine if a temperature is not within a safe operating range using logical NOT.",
    "code": "```rust\nfn is_temperature_unsafe(temp: f64) -> bool {\n    !(temp >= 15.0 && temp <= 25.0)\n}\n\nfn main() {\n    let temperature = 30.0;\n    if is_temperature_unsafe(temperature) {\n        println!(\"The temperature is unsafe.\");\n    } else {\n        println!(\"The temperature is safe.\");\n    }\n}\n```"
  },
  {
    "task": "Design a check to see if a car is either out of fuel or needs maintenance using logical OR.",
    "code": "```rust\nfn needs_attention(out_of_fuel: bool, needs_maintenance: bool) -> bool {\n    out_of_fuel || needs_maintenance\n}\n\nfn main() {\n    let out_of_fuel = true;\n    let needs_maintenance = false;\n\n    if needs_attention(out_of_fuel, needs_maintenance) {\n        println!(\"The car needs attention.\");\n    } else {\n        println!(\"The car is fine.\");\n    }\n}\n```"
  },
  {
    "task": "Develop a routine that ensures a network connection is both stable and secure using logical AND.",
    "code": "```rust\nfn is_connection_stable() -> bool {\n    // Placeholder for actual stability check logic\n    true // Assume the connection is stable for demonstration\n}\n\nfn is_connection_secure() -> bool {\n    // Placeholder for actual security check logic\n    true // Assume the connection is secure for demonstration\n}\n\nfn is_connection_stable_and_secure() -> bool {\n    is_connection_stable() && is_connection_secure()\n}\n\nfn main() {\n    if is_connection_stable_and_secure() {\n        println!(\"The network connection is stable and secure.\");\n    } else {\n        println!(\"The network connection is not stable or secure.\");\n    }\n}\n```"
  },
  {
    "task": "Write a conditional to print a message if a user is not logged in using logical NOT.",
    "code": "```rust\nfn main() {\n    let is_logged_in = false;\n\n    if !is_logged_in {\n        println!(\"User is not logged in.\");\n    }\n}\n```"
  },
  {
    "task": "Create a function that checks if a number is both even and positive using logical AND.",
    "code": "```rust\nfn is_even_and_positive(number: i32) -> bool {\n    number % 2 == 0 && number > 0\n}\n\nfn main() {\n    let number = 4;\n    if is_even_and_positive(number) {\n        println!(\"The number is both even and positive.\");\n    } else {\n        println!(\"The number is not both even and positive.\");\n    }\n}\n```"
  },
  {
    "task": "Implement a feature that turns off a device if neither of two switches are on using logical NOT.",
    "code": "```rust\nfn main() {\n    let switch1 = false;\n    let switch2 = false;\n\n    let device_on = switch1 || switch2;\n    \n    let device_off = !device_on;\n\n    if device_off {\n        println!(\"The device is off.\");\n    } else {\n        println!(\"The device is on.\");\n    }\n}\n```"
  },
  {
    "task": "Compose a script to alert if a server is either down or running slow using logical OR.",
    "code": "```rust\nfn main() {\n    let server_down = true; // Example condition for server down\n    let server_slow = false; // Example condition for server running slow\n\n    if server_down || server_slow {\n        println!(\"Alert: The server is either down or running slow!\");\n    }\n}\n```"
  },
  {
    "task": "Design a validation method to ensure a form field is not empty using logical NOT.",
    "code": "```rust\nfn is_field_not_empty(field: &str) -> bool {\n    !field.is_empty()\n}\n\nfn main() {\n    let field_value = \"example input\";\n    if is_field_not_empty(field_value) {\n        println!(\"Field is not empty.\");\n    } else {\n        println!(\"Field is empty.\");\n    }\n}\n```"
  },
  {
    "task": "Write a program to determine if two strings are both non-empty using logical AND.",
    "code": "```rust\nfn main() {\n    let string1 = \"Hello\";\n    let string2 = \"World\";\n\n    if !string1.is_empty() && !string2.is_empty() {\n        println!(\"Both strings are non-empty.\");\n    } else {\n        println!(\"At least one of the strings is empty.\");\n    }\n}\n```"
  },
  {
    "task": "Create a function that checks if a number is either prime or a perfect square using logical OR.",
    "code": "```rust\nfn is_prime_or_perfect_square(n: u32) -> bool {\n    fn is_prime(num: u32) -> bool {\n        if num <= 1 {\n            return false;\n        }\n        for i in 2..=((num as f64).sqrt() as u32) {\n            if num % i == 0 {\n                return false;\n            }\n        }\n        true\n    }\n\n    fn is_perfect_square(num: u32) -> bool {\n        let sq_root = (num as f64).sqrt() as u32;\n        sq_root * sq_root == num\n    }\n\n    is_prime(n) || is_perfect_square(n)\n}\n\nfn main() {\n    let number = 10;\n    println!(\"Is {} either prime or a perfect square? {}\", number, is_prime_or_perfect_square(number));\n}\n```"
  },
  {
    "task": "Develop a script to ensure a user is either an adult or has parental consent using logical OR.",
    "code": "```rust\nfn main() {\n    let is_adult = true; // Example value, should be determined by your logic\n    let has_parental_consent = false; // Example value, should be determined by your logic\n\n    if is_adult || has_parental_consent {\n        println!(\"Access granted.\");\n    } else {\n        println!(\"Access denied.\");\n    }\n}\n```"
  },
  {
    "task": "Implement a condition to execute a task if a variable is neither zero nor negative using logical NOT.",
    "code": "```rust\nfn main() {\n    let value = 5; // Example value\n\n    if !(value <= 0) {\n        println!(\"The task is executed because the value is neither zero nor negative.\");\n    }\n}\n```"
  },
  {
    "task": "Compose a method to verify if a system is both up-to-date and functioning using logical AND.",
    "code": "```rust\nstruct System {\n    is_up_to_date: bool,\n    is_functioning: bool,\n}\n\nimpl System {\n    fn is_verified(&self) -> bool {\n        self.is_up_to_date && self.is_functioning\n    }\n}\n\nfn main() {\n    let system = System { \n        is_up_to_date: true,\n        is_functioning: true,\n    };\n    \n    let verified = system.is_verified();\n    println!(\"System verified: {}\", verified);\n}\n```"
  },
  {
    "task": "Write a function that returns true if a list contains neither duplicates nor null values using logical NOT.",
    "code": "```rust\nfn has_no_duplicates_or_nulls(list: &[Option<i32>]) -> bool {\n    let mut seen = std::collections::HashSet::new();\n    !list.iter().any(|&item| item.is_none() || !seen.insert(item))\n}\n\nfn main() {\n    let list = vec![Some(1), Some(2), Some(3)];\n    println!(\"{}\", has_no_duplicates_or_nulls(&list)); // true\n\n    let list_with_duplicates = vec![Some(1), Some(2), Some(2)];\n    println!(\"{}\", has_no_duplicates_or_nulls(&list_with_duplicates)); // false\n\n    let list_with_nulls = vec![Some(1), None, Some(3)];\n    println!(\"{}\", has_no_duplicates_or_nulls(&list_with_nulls)); // false\n}\n```"
  },
  {
    "task": "Create a script to perform an action if a temperature is either too high or too low using logical OR.",
    "code": "```rust\nfn main() {\n    let temperature = 35; // Example temperature value\n    \n    if temperature < 0 || temperature > 30 {\n        println!(\"Temperature is out of the safe range!\");\n    }\n}\n```"
  },
  {
    "task": "Design a feature to toggle an option if a setting is not enabled using logical NOT.",
    "code": "```rust\nstruct Settings {\n    option_enabled: bool,\n    setting_enabled: bool,\n}\n\nimpl Settings {\n    fn toggle_option_if_setting_disabled(&mut self) {\n        if !self.setting_enabled {\n            self.option_enabled = !self.option_enabled;\n        }\n    }\n}\n\nfn main() {\n    let mut settings = Settings {\n        option_enabled: false,\n        setting_enabled: false,\n    };\n\n    settings.toggle_option_if_setting_disabled();\n    println!(\"Option enabled: {}\", settings.option_enabled);\n}\n```"
  },
  {
    "task": "Develop a check to ensure a username is both available and meets length requirements using logical AND.",
    "code": "```rust\nfn is_username_valid(username: &str, is_available: bool) -> bool {\n    let min_length = 5;\n    let max_length = 15;\n    \n    is_available && (username.len() >= min_length && username.len() <= max_length)\n}\n\nfn main() {\n    let username = \"exampleUser\";\n    let is_available = true;\n    \n    if is_username_valid(username, is_available) {\n        println!(\"Username is valid.\");\n    } else {\n        println!(\"Username is invalid.\");\n    }\n}\n```"
  },
  {
    "task": "Implement a function that returns true if a number is neither too large nor too small using logical NOT.",
    "code": "```rust\nfn is_neither_too_large_nor_too_small(num: i32) -> bool {\n    !(num > 100 || num < 10)\n}\n\nfn main() {\n    let number = 50;\n    let result = is_neither_too_large_nor_too_small(number);\n    println!(\"Is the number neither too large nor too small? {}\", result);\n}\n```"
  },
  {
    "task": "Write a conditional to print a warning if a disk is either full or nearly full using logical OR.",
    "code": "```rust\nfn main() {\n    let disk_full = true;\n    let disk_nearly_full = false;\n\n    if disk_full || disk_nearly_full {\n        println!(\"Warning: Disk is either full or nearly full.\");\n    }\n}\n```"
  },
  {
    "task": "Create a routine to validate that two dates are both within a valid range using logical AND.",
    "code": "```rust\nuse chrono::{NaiveDate, ParseError};\n\nfn validate_dates(date1_str: &str, date2_str: &str, start_str: &str, end_str: &str) -> Result<bool, ParseError> {\n    let date1 = NaiveDate::parse_from_str(date1_str, \"%Y-%m-%d\")?;\n    let date2 = NaiveDate::parse_from_str(date2_str, \"%Y-%m-%d\")?;\n    let start = NaiveDate::parse_from_str(start_str, \"%Y-%m-%d\")?;\n    let end = NaiveDate::parse_from_str(end_str, \"%Y-%m-%d\")?;\n\n    Ok((date1 >= start && date1 <= end) && (date2 >= start && date2 <= end))\n}\n\nfn main() {\n    match validate_dates(\"2023-01-01\", \"2023-12-31\", \"2023-01-01\", \"2023-12-31\") {\n        Ok(valid) => println!(\"Dates are within range: {}\", valid),\n        Err(e) => println!(\"Error parsing dates: {}\", e),\n    }\n}\n```"
  },
  {
    "task": "Compose a function to decide if a person is either a minor or a senior using logical OR.",
    "code": "```rust\nfn is_minor_or_senior(age: u32) -> bool {\n    age < 18 || age >= 65\n}\n\nfn main() {\n    let person_age = 70;\n    if is_minor_or_senior(person_age) {\n        println!(\"The person is either a minor or a senior.\");\n    } else {\n        println!(\"The person is neither a minor nor a senior.\");\n    }\n}\n```"
  },
  {
    "task": "Design a script to execute a task if a condition is not met using logical NOT.",
    "code": "```rust\nfn main() {\n    let condition = false;\n\n    if !condition {\n        execute_task();\n    }\n}\n\nfn execute_task() {\n    println!(\"Task is executed because condition is not met.\");\n}\n```"
  },
  {
    "task": "Develop a program to verify if a process is neither running nor scheduled using logical NOT.",
    "code": "```rust\nfn main() {\n    let is_running = false;\n    let is_scheduled = false;\n\n    if !(is_running || is_scheduled) {\n        println!(\"The process is neither running nor scheduled.\");\n    } else {\n        println!(\"The process is either running or scheduled.\");\n    }\n}\n```"
  },
  {
    "task": "Implement a feature that confirms a file is both accessible and not locked using logical AND.",
    "code": "```rust\nuse std::fs::File;\nuse std::io::{self, Write};\nuse std::path::Path;\n\nfn is_file_accessible_and_not_locked(file_path: &str) -> io::Result<bool> {\n    // Check if the file is accessible by trying to open it in read mode\n    let accessible = Path::new(file_path).exists() && File::open(file_path).is_ok();\n\n    // Check if the file is not locked by attempting to open it in write mode\n    let not_locked = File::options().write(true).open(file_path).is_ok();\n\n    // Return true if both conditions are satisfied\n    Ok(accessible && not_locked)\n}\n\nfn main() {\n    let file_path = \"example.txt\";\n    match is_file_accessible_and_not_locked(file_path) {\n        Ok(true) => println!(\"The file is accessible and not locked.\"),\n        Ok(false) => println!(\"The file is either not accessible or locked.\"),\n        Err(e) => println!(\"An error occurred: {}\", e),\n    }\n}\n```"
  },
  {
    "task": "Write a script to check if a device is either offline or in maintenance mode using logical OR.",
    "code": "```rust\nfn main() {\n    let is_offline = true; // Example condition\n    let in_maintenance_mode = false; // Example condition\n\n    if is_offline || in_maintenance_mode {\n        println!(\"Device is either offline or in maintenance mode.\");\n    } else {\n        println!(\"Device is online and not in maintenance mode.\");\n    }\n}\n```"
  },
  {
    "task": "Create a function to ensure a password is both complex and unique using logical AND.",
    "code": "```rust\nuse std::collections::HashSet;\n\nfn is_complex_and_unique(password: &str, used_passwords: &mut HashSet<String>) -> bool {\n    let is_complex = password.len() >= 8\n        && password.chars().any(|c| c.is_ascii_uppercase())\n        && password.chars().any(|c| c.is_ascii_lowercase())\n        && password.chars().any(|c| c.is_ascii_digit())\n        && password.chars().any(|c| !c.is_ascii_alphanumeric());\n\n    let is_unique = !used_passwords.contains(password);\n\n    if is_complex && is_unique {\n        used_passwords.insert(password.to_string());\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let mut used_passwords = HashSet::new();\n    let password = \"Complex@123\";\n    println!(\"Password is valid: {}\", is_complex_and_unique(password, &mut used_passwords));\n}\n```"
  },
  {
    "task": "Design a validation that ensures a value is not negative using logical NOT.",
    "code": "```rust\nfn is_not_negative(value: i32) -> bool {\n    !(value < 0)\n}\n\nfn main() {\n    let value = 5;\n    if is_not_negative(value) {\n        println!(\"The value is not negative.\");\n    } else {\n        println!(\"The value is negative.\");\n    }\n}\n```"
  },
  {
    "task": "Develop a check to see if a user has either exceeded their quota or is nearing it using logical OR.",
    "code": "```rust\nfn has_exceeded_or_nearing_quota(used: u32, quota: u32, threshold: u32) -> bool {\n    used > quota || used >= quota - threshold\n}\n\nfn main() {\n    let used = 90;\n    let quota = 100;\n    let threshold = 10;\n    \n    if has_exceeded_or_nearing_quota(used, quota, threshold) {\n        println!(\"User has either exceeded or is nearing their quota.\");\n    } else {\n        println!(\"User is within safe quota limits.\");\n    }\n}\n```"
  },
  {
    "task": "Implement a routine to confirm that a user is both authenticated and authorized using logical AND.",
    "code": "```rust\nfn is_user_authenticated_and_authorized(authenticated: bool, authorized: bool) -> bool {\n    authenticated && authorized\n}\n\nfn main() {\n    let authenticated = true;\n    let authorized = false;\n\n    if is_user_authenticated_and_authorized(authenticated, authorized) {\n        println!(\"User is authenticated and authorized.\");\n    } else {\n        println!(\"User is not authenticated and authorized.\");\n    }\n}\n```"
  },
  {
    "task": "Compose a function to determine if a light is either on or blinking using logical OR.",
    "code": "```rust\nfn is_light_on_or_blinking(is_on: bool, is_blinking: bool) -> bool {\n    is_on || is_blinking\n}\n\nfn main() {\n    let light_on = true;\n    let light_blinking = false;\n    let result = is_light_on_or_blinking(light_on, light_blinking);\n    println!(\"Is the light on or blinking? {}\", result);\n}\n```"
  },
  {
    "task": "Write a script that executes a command if a network connection is neither weak nor unstable using logical NOT.",
    "code": "```rust\nfn main() {\n    let connection_strength = \"strong\"; // Can be \"strong\", \"weak\", or \"unstable\"\n    let is_weak = connection_strength == \"weak\";\n    let is_unstable = connection_strength == \"unstable\";\n\n    if !is_weak && !is_unstable {\n        execute_command();\n    }\n}\n\nfn execute_command() {\n    println!(\"Executing command because the network connection is strong and stable.\");\n}\n```"
  },
  {
    "task": "Create a program to verify that a sensor is both calibrated and active using logical AND.",
    "code": "```rust\nfn main() {\n    let sensor_calibrated = true;\n    let sensor_active = true;\n\n    if sensor_calibrated && sensor_active {\n        println!(\"Sensor is both calibrated and active.\");\n    } else {\n        println!(\"Sensor is not both calibrated and active.\");\n    }\n}\n```"
  },
  {
    "task": "Design a feature to alert if a process is either overdue or incomplete using logical OR.",
    "code": "```rust\nfn main() {\n    let process_overdue = true;\n    let process_incomplete = false;\n\n    if process_overdue || process_incomplete {\n        println!(\"Alert: Process is either overdue or incomplete.\");\n    } else {\n        println!(\"Process is on track.\");\n    }\n}\n```"
  },
  {
    "task": "Develop a script to check if a person is neither a guest nor a temporary user using logical NOT.",
    "code": "```rust\nfn main() {\n    let is_guest = false;\n    let is_temporary_user = false;\n\n    if !is_guest && !is_temporary_user {\n        println!(\"The person is neither a guest nor a temporary user.\");\n    } else {\n        println!(\"The person is either a guest or a temporary user.\");\n    }\n}\n```"
  },
  {
    "task": "Implement a function to toggle a light if a switch is not pressed using logical NOT.",
    "code": "```rust\nfn toggle_light(switch_pressed: bool) -> bool {\n    !switch_pressed\n}\n```"
  },
  {
    "task": "Write a conditional to trigger an event if a file is either corrupted or missing using logical OR.",
    "code": "```rust\nfn main() {\n    let file_is_corrupted = true; // Example condition, replace with actual logic\n    let file_is_missing = false;  // Example condition, replace with actual logic\n\n    if file_is_corrupted || file_is_missing {\n        trigger_event();\n    }\n}\n\nfn trigger_event() {\n    println!(\"Event triggered due to file issue.\");\n}\n```"
  },
  {
    "task": "Create a routine that verifies if a vehicle is both insured and registered using logical AND.",
    "code": "```rust\nstruct Vehicle {\n    insured: bool,\n    registered: bool,\n}\n\nimpl Vehicle {\n    fn is_insured_and_registered(&self) -> bool {\n        self.insured && self.registered\n    }\n}\n\nfn main() {\n    let vehicle = Vehicle {\n        insured: true,\n        registered: true,\n    };\n\n    let result = vehicle.is_insured_and_registered();\n    println!(\"Vehicle is insured and registered: {}\", result);\n}\n```"
  },
  {
    "task": "Compose a method to check if an account is either overdrawn or flagged using logical OR.",
    "code": "```rust\nstruct Account {\n    balance: f64,\n    is_flagged: bool,\n}\n\nimpl Account {\n    fn is_overdrawn_or_flagged(&self) -> bool {\n        self.balance < 0.0 || self.is_flagged\n    }\n}\n\nfn main() {\n    let account = Account {\n        balance: -50.0,\n        is_flagged: false,\n    };\n    \n    if account.is_overdrawn_or_flagged() {\n        println!(\"Account is either overdrawn or flagged.\");\n    } else {\n        println!(\"Account is in good standing.\");\n    }\n}\n```"
  },
  {
    "task": "Design a program to ensure an application is both installed and updated using logical AND.",
    "code": "```rust\nfn main() {\n    let is_installed = true; // Assume the application is installed\n    let is_updated = true;   // Assume the application is updated\n\n    if is_installed && is_updated {\n        println!(\"The application is both installed and updated.\");\n    } else {\n        println!(\"The application is not properly installed or updated.\");\n    }\n}\n```"
  },
  {
    "task": "Develop a function that returns true if a number is neither divisible by 3 nor 5 using logical NOT.",
    "code": "```rust\nfn not_divisible_by_3_or_5(n: i32) -> bool {\n    !(n % 3 == 0 || n % 5 == 0)\n}\n```"
  },
  {
    "task": "Implement a script that alerts if a device is either overheating or underperforming using logical OR.",
    "code": "```rust\nfn alert_device_status(temperature: f32, performance: f32) -> bool {\n    const OVERHEATING_THRESHOLD: f32 = 75.0;\n    const UNDERPERFORMING_THRESHOLD: f32 = 50.0;\n    \n    if temperature > OVERHEATING_THRESHOLD || performance < UNDERPERFORMING_THRESHOLD {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let temperature = 80.0;\n    let performance = 45.0;\n\n    if alert_device_status(temperature, performance) {\n        println!(\"Alert: Device is either overheating or underperforming!\");\n    } else {\n        println!(\"Device status is normal.\");\n    }\n}\n```"
  },
  {
    "task": "Write a function to validate that a directory is both writable and not full using logical AND.",
    "code": "```rust\nuse std::fs;\nuse std::io;\nuse std::path::Path;\n\nfn is_directory_writable_and_not_full(dir: &Path) -> io::Result<bool> {\n    let writable = dir.metadata()?.permissions().readonly() == false;\n    let not_full = fs::metadata(dir)?.len() < fs::space(dir)?.available;\n    Ok(writable && not_full)\n}\n```"
  },
  {
    "task": "Create a conditional statement that executes if a button is not clicked using logical NOT.",
    "code": "```rust\nfn main() {\n    let button_clicked = false;\n\n    if !button_clicked {\n        println!(\"Button is not clicked.\");\n    }\n}\n```"
  },
  {
    "task": "Design a check to ensure a transaction is both verified and complete using logical AND.",
    "code": "```rust\nfn is_transaction_valid(verified: bool, complete: bool) -> bool {\n    verified && complete\n}\n\nfn main() {\n    let verified = true;\n    let complete = true;\n\n    if is_transaction_valid(verified, complete) {\n        println!(\"Transaction is valid.\");\n    } else {\n        println!(\"Transaction is not valid.\");\n    }\n}\n```"
  },
  {
    "task": "Develop a routine to determine if a string is either uppercase or lowercase using logical OR.",
    "code": "```rust\nfn is_upper_or_lower_case(s: &str) -> bool {\n    s.chars().all(|c| c.is_uppercase()) || s.chars().all(|c| c.is_lowercase())\n}\n\nfn main() {\n    let test_string_1 = \"HELLO\";\n    let test_string_2 = \"world\";\n    let test_string_3 = \"Hello\";\n\n    println!(\"{}\", is_upper_or_lower_case(test_string_1)); // true\n    println!(\"{}\", is_upper_or_lower_case(test_string_2)); // true\n    println!(\"{}\", is_upper_or_lower_case(test_string_3)); // false\n}\n```"
  },
  {
    "task": "Implement a feature to execute a task if a variable is neither null nor undefined using logical NOT.",
    "code": "```rust\nfn execute_task_if_not_null_or_undefined(variable: Option<&str>) {\n    if variable.is_some() {\n        // Execute the task here\n        println!(\"Task executed.\");\n    }\n}\n\nfn main() {\n    let var = Some(\"value\");\n    execute_task_if_not_null_or_undefined(var);\n\n    let var_none: Option<&str> = None;\n    execute_task_if_not_null_or_undefined(var_none);\n}\n```"
  },
  {
    "task": "Compose a function to return true if a date is either today or tomorrow using logical OR.",
    "code": "```rust\nuse chrono::{Local, Datelike, NaiveDate};\n\nfn is_today_or_tomorrow(date: NaiveDate) -> bool {\n    let today = Local::today().naive_local();\n    let tomorrow = today.succ();\n    date == today || date == tomorrow\n}\n```"
  },
  {
    "task": "Write a script to confirm that a system is both running and not in maintenance mode using logical AND.",
    "code": "```rust\nfn main() {\n    let is_running = true;\n    let in_maintenance_mode = false;\n\n    if is_running && !in_maintenance_mode {\n        println!(\"The system is running and not in maintenance mode.\");\n    } else {\n        println!(\"The system is either not running or in maintenance mode.\");\n    }\n}\n```"
  },
  {
    "task": "Create a program to verify if a text field is neither empty nor exceeds character limit using logical NOT.",
    "code": "```rust\nfn main() {\n    let text_field = String::from(\"Sample text\");\n    let max_length = 20;\n\n    if !text_field.is_empty() && !(text_field.len() > max_length) {\n        println!(\"Text is valid\");\n    } else {\n        println!(\"Text is invalid\");\n    }\n}\n```"
  },
  {
    "task": "Design a feature that checks if a user has either admin privileges or editor rights using logical OR.",
    "code": "```rust\nfn has_access(is_admin: bool, is_editor: bool) -> bool {\n    is_admin || is_editor\n}\n\nfn main() {\n    let user_is_admin = true;\n    let user_is_editor = false;\n\n    if has_access(user_is_admin, user_is_editor) {\n        println!(\"User has access.\");\n    } else {\n        println!(\"User does not have access.\");\n    }\n}\n```"
  },
  {
    "task": "Develop a script to ensure a file is both present and not empty using logical AND.",
    "code": "```rust\nuse std::fs;\n\nfn main() {\n    let file_path = \"your_file.txt\";\n\n    if is_file_present_and_not_empty(file_path) {\n        println!(\"The file is present and not empty.\");\n    } else {\n        println!(\"The file is either missing or empty.\");\n    }\n}\n\nfn is_file_present_and_not_empty(file_path: &str) -> bool {\n    if let Ok(metadata) = fs::metadata(file_path) {\n        metadata.is_file() && metadata.len() > 0\n    } else {\n        false\n    }\n}\n```"
  },
  {
    "task": "Implement a condition to execute a command if a setting is not active using logical NOT.",
    "code": "```rust\nfn main() {\n    let setting_active = false;\n\n    if !setting_active {\n        println!(\"Executing command as the setting is not active.\");\n    }\n}\n```"
  },
  {
    "task": "Compose a method to decide if a person is either eligible or exempt using logical OR.",
    "code": "```rust\nstruct Person {\n    eligible: bool,\n    exempt: bool,\n}\n\nimpl Person {\n    fn is_eligible_or_exempt(&self) -> bool {\n        self.eligible || self.exempt\n    }\n}\n\nfn main() {\n    let person = Person {\n        eligible: true,\n        exempt: false,\n    };\n    println!(\"{}\", person.is_eligible_or_exempt());\n}\n```"
  },
  {
    "task": "Write a function that returns true if a number is both greater than zero and less than ten using logical AND.",
    "code": "```rust\nfn is_between_zero_and_ten(num: i32) -> bool {\n    num > 0 && num < 10\n}\n```"
  },
  {
    "task": "Create a loop to continue as long as a condition is either true or false using logical OR.",
    "code": "```rust\nfn main() {\n    let mut condition1 = false;\n    let mut condition2 = true;\n\n    while condition1 || condition2 {\n        // Loop body\n        println!(\"Looping while one of the conditions is true.\");\n\n        // Example logic to change conditions\n        condition1 = !condition1;\n        condition2 = !condition2;\n    }\n}\n```"
  },
  {
    "task": "Design a program to verify if an account is neither inactive nor suspended using logical NOT.",
    "code": "```rust\nfn main() {\n    let is_inactive = false;\n    let is_suspended = false;\n\n    if !is_inactive && !is_suspended {\n        println!(\"The account is active and not suspended.\");\n    } else {\n        println!(\"The account is either inactive or suspended.\");\n    }\n}\n```"
  },
  {
    "task": "Develop a feature to confirm that a document is both signed and verified using logical AND.",
    "code": "```rust\nfn is_document_signed_and_verified(signed: bool, verified: bool) -> bool {\n    signed && verified\n}\n\nfn main() {\n    let signed = true;\n    let verified = true;\n    \n    if is_document_signed_and_verified(signed, verified) {\n        println!(\"The document is both signed and verified.\");\n    } else {\n        println!(\"The document is not properly signed and verified.\");\n    }\n}\n```"
  },
  {
    "task": "Implement a script to alert if a network is either congested or down using logical OR.",
    "code": "```rust\nfn alert_network_status(is_congested: bool, is_down: bool) {\n    if is_congested || is_down {\n        println!(\"Alert: Network is either congested or down.\");\n    } else {\n        println!(\"Network is operating normally.\");\n    }\n}\n\nfn main() {\n    let network_congested = true;\n    let network_down = false;\n\n    alert_network_status(network_congested, network_down);\n}\n```"
  },
  {
    "task": "Write a function to ensure a list is both sorted and unique using logical AND.",
    "code": "```rust\nfn ensure_sorted_and_unique(mut list: Vec<i32>) -> Vec<i32> {\n    list.sort();\n    list.dedup();\n    list\n}\n\nfn main() {\n    let list = vec![3, 1, 2, 2, 4];\n    let result = ensure_sorted_and_unique(list);\n    println!(\"{:?}\", result);\n}\n```"
  },
  {
    "task": "Create a conditional statement to execute if a task is not completed using logical NOT.",
    "code": "```rust\nfn main() {\n    let task_completed = false;\n\n    if !task_completed {\n        println!(\"The task is not completed. Executing conditional block.\");\n    }\n}\n```"
  },
  {
    "task": "Design a check to determine if a component is either faulty or missing using logical OR.",
    "code": "```rust\nfn is_faulty_or_missing(is_faulty: bool, is_missing: bool) -> bool {\n    is_faulty || is_missing\n}\n\nfn main() {\n    let faulty = true;\n    let missing = false;\n    let result = is_faulty_or_missing(faulty, missing);\n    println!(\"The component is faulty or missing: {}\", result);\n}\n```"
  },
  {
    "task": "Develop a routine to verify if a user is both online and available using logical AND.",
    "code": "```rust\nstruct User {\n    is_online: bool,\n    is_available: bool,\n}\n\nimpl User {\n    fn is_online_and_available(&self) -> bool {\n        self.is_online && self.is_available\n    }\n}\n\nfn main() {\n    let user = User {\n        is_online: true,\n        is_available: true,\n    };\n\n    if user.is_online_and_available() {\n        println!(\"User is both online and available.\");\n    } else {\n        println!(\"User is not both online and available.\");\n    }\n}\n```"
  },
  {
    "task": "Implement a feature to toggle an alert if a condition is not satisfied using logical NOT.",
    "code": "```rust\nstruct Alert {\n    is_active: bool,\n}\n\nimpl Alert {\n    fn new() -> Self {\n        Alert { is_active: false }\n    }\n\n    fn toggle_if_not(&mut self, condition: bool) {\n        if !condition {\n            self.is_active = !self.is_active;\n        }\n    }\n}\n\nfn main() {\n    let mut alert = Alert::new();\n    let condition = false;\n\n    alert.toggle_if_not(condition);\n    println!(\"Alert active: {}\", alert.is_active);\n}\n```"
  },
  {
    "task": "Compose a function to return true if a transaction is either pending or failed using logical OR.",
    "code": "```rust\nfn is_pending_or_failed(status: &str) -> bool {\n    status == \"pending\" || status == \"failed\"\n}\n\nfn main() {\n    let status1 = \"pending\";\n    let status2 = \"failed\";\n    let status3 = \"completed\";\n\n    println!(\"{}\", is_pending_or_failed(status1)); // true\n    println!(\"{}\", is_pending_or_failed(status2)); // true\n    println!(\"{}\", is_pending_or_failed(status3)); // false\n}\n```"
  },
  {
    "task": "Write a script to ensure a configuration is both correct and active using logical AND.",
    "code": "```rust\nfn main() {\n    let is_correct = true; // Example condition for correctness\n    let is_active = true;  // Example condition for active status\n\n    if is_correct && is_active {\n        println!(\"The configuration is both correct and active.\");\n    } else {\n        println!(\"The configuration is not valid.\");\n    }\n}\n```"
  }
]