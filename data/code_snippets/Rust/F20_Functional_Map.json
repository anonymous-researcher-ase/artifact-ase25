[
  {
    "task": "Convert a list of temperatures from Celsius to Fahrenheit using a map function.",
    "code": "```rust\nfn main() {\n    let celsius_temps = vec![0.0, 20.0, 37.0, 100.0];\n    let fahrenheit_temps: Vec<f64> = celsius_temps.iter().map(|&c| c * 9.0 / 5.0 + 32.0).collect();\n    println!(\"{:?}\", fahrenheit_temps);\n}\n```"
  },
  {
    "task": "Use map to convert a list of lowercase words to uppercase.",
    "code": "```rust\nfn main() {\n    let words = vec![\"hello\", \"world\", \"rust\", \"programming\"];\n    let uppercased_words: Vec<String> = words.iter().map(|word| word.to_uppercase()).collect();\n    println!(\"{:?}\", uppercased_words);\n}\n```"
  },
  {
    "task": "Apply map to add a prefix to each string in a list of filenames.",
    "code": "```rust\nfn main() {\n    let filenames = vec![\"file1.txt\", \"file2.txt\", \"file3.txt\"];\n    let prefix = \"new_\";\n    \n    let prefixed_filenames: Vec<String> = filenames.iter()\n        .map(|filename| format!(\"{}{}\", prefix, filename))\n        .collect();\n    \n    for filename in prefixed_filenames {\n        println!(\"{}\", filename);\n    }\n}\n```"
  },
  {
    "task": "Transform a list of numbers by squaring each element with a map function.",
    "code": "```rust\nfn main() {\n    let numbers = vec![1, 2, 3, 4, 5];\n    let squared_numbers: Vec<i32> = numbers.iter().map(|&x| x * x).collect();\n    println!(\"{:?}\", squared_numbers);\n}\n```"
  },
  {
    "task": "Convert a list of integers to their string representations using map.",
    "code": "```rust\nfn main() {\n    let numbers = vec![1, 2, 3, 4, 5];\n    let string_representations: Vec<String> = numbers.iter().map(|&num| num.to_string()).collect();\n    println!(\"{:?}\", string_representations);\n}\n```"
  },
  {
    "task": "Use map to compute the length of each string in a list of sentences.",
    "code": "```rust\nfn main() {\n    let sentences = vec![\n        \"The quick brown fox\",\n        \"jumps over the lazy dog\",\n        \"Rust is fun\",\n    ];\n\n    let lengths: Vec<usize> = sentences.iter().map(|s| s.len()).collect();\n\n    println!(\"{:?}\", lengths);\n}\n```"
  },
  {
    "task": "Apply a discount to a list of prices using a map function.",
    "code": "```rust\nfn main() {\n    let prices = vec![100.0, 200.0, 300.0, 400.0];\n    let discount = 0.1; // 10% discount\n\n    let discounted_prices: Vec<f64> = prices.iter().map(|&price| price * (1.0 - discount)).collect();\n\n    println!(\"{:?}\", discounted_prices);\n}\n```"
  },
  {
    "task": "Extract the first element from each tuple in a list of tuples with map.",
    "code": "```rust\nfn main() {\n    let tuples = vec![(1, 2), (3, 4), (5, 6)];\n    let first_elements: Vec<_> = tuples.into_iter().map(|(x, _)| x).collect();\n    println!(\"{:?}\", first_elements);\n}\n```"
  },
  {
    "task": "Use map to round a list of floating-point numbers to two decimal places.",
    "code": "```rust\nfn main() {\n    let numbers = vec![3.14159, 2.71828, 1.61803, 0.57721];\n    let rounded: Vec<f64> = numbers.iter().map(|&x| (x * 100.0).round() / 100.0).collect();\n    println!(\"{:?}\", rounded);\n}\n```"
  },
  {
    "task": "Capitalize the first letter of each word in a list of names using map.",
    "code": "```rust\nfn capitalize_first_letter(names: Vec<&str>) -> Vec<String> {\n    names.into_iter()\n        .map(|name| {\n            name.split_whitespace()\n                .map(|word| {\n                    let mut chars = word.chars();\n                    chars.next()\n                        .map(|c| c.to_uppercase().collect::<String>())\n                        .unwrap_or_default() + chars.as_str()\n                })\n                .collect::<Vec<String>>()\n                .join(\" \")\n        })\n        .collect()\n}\n\nfn main() {\n    let names = vec![\"john doe\", \"jane smith\", \"alice johnson\"];\n    let capitalized_names = capitalize_first_letter(names);\n    for name in capitalized_names {\n        println!(\"{}\", name);\n    }\n}\n```"
  },
  {
    "task": "Convert a list of JSON strings to corresponding dictionary objects with map.",
    "code": "```rust\nuse serde_json::Value;\n\nfn main() {\n    let json_strings = vec![\n        r#\"{\"key1\": \"value1\", \"key2\": \"value2\"}\"#,\n        r#\"{\"keyA\": \"valueA\", \"keyB\": \"valueB\"}\"#,\n    ];\n\n    let json_objects: Vec<Value> = json_strings.iter()\n        .map(|s| serde_json::from_str(s).unwrap())\n        .collect();\n\n    for obj in json_objects {\n        println!(\"{:?}\", obj);\n    }\n}\n```"
  },
  {
    "task": "Use map to double the value of each number in a list.",
    "code": "```rust\nfn main() {\n    let numbers = vec![1, 2, 3, 4, 5];\n    let doubled_numbers: Vec<i32> = numbers.iter().map(|&x| x * 2).collect();\n    println!(\"{:?}\", doubled_numbers);\n}\n```"
  },
  {
    "task": "Transform a list of RGB tuples to hexadecimal color codes using map.",
    "code": "```rust\nfn rgb_to_hex(rgb: (u8, u8, u8)) -> String {\n    format!(\"#{:02X}{:02X}{:02X}\", rgb.0, rgb.1, rgb.2)\n}\n\nfn main() {\n    let rgb_list = vec![(255, 0, 0), (0, 255, 0), (0, 0, 255)];\n    let hex_codes: Vec<String> = rgb_list.into_iter().map(rgb_to_hex).collect();\n    println!(\"{:?}\", hex_codes);\n}\n```"
  },
  {
    "task": "Use map to compute the factorial of each number in a list.",
    "code": "```rust\nfn factorial(n: u32) -> u32 {\n    (1..=n).product()\n}\n\nfn main() {\n    let numbers = vec![1, 2, 3, 4, 5];\n    let factorials: Vec<u32> = numbers.iter().map(|&x| factorial(x)).collect();\n    println!(\"{:?}\", factorials);\n}\n```"
  },
  {
    "task": "Translate a list of English words to Spanish using a map function.",
    "code": "```rust\nfn main() {\n    let english_words = vec![\"hello\", \"world\", \"food\", \"computer\"];\n    let spanish_translation = |word: &str| match word {\n        \"hello\" => \"hola\",\n        \"world\" => \"mundo\",\n        \"food\" => \"comida\",\n        \"computer\" => \"computadora\",\n        _ => \"desconocido\", // default case for unknown words\n    };\n\n    let spanish_words: Vec<&str> = english_words.iter().map(|&word| spanish_translation(word)).collect();\n\n    for word in spanish_words {\n        println!(\"{}\", word);\n    }\n}\n```"
  },
  {
    "task": "Apply a map function to format a list of dates from one format to another.",
    "code": "```rust\nuse chrono::NaiveDate;\nuse std::iter::Iterator;\n\nfn main() {\n    let date_strings = vec![\"2023-10-25\", \"2023-12-01\", \"2024-01-15\"];\n    let formatted_dates: Vec<String> = date_strings\n        .iter()\n        .map(|date_str| {\n            NaiveDate::parse_from_str(date_str, \"%Y-%m-%d\")\n                .unwrap()\n                .format(\"%d/%m/%Y\")\n                .to_string()\n        })\n        .collect();\n    \n    for date in formatted_dates {\n        println!(\"{}\", date);\n    }\n}\n```"
  },
  {
    "task": "Use map to check if each number in a list is even, returning a list of booleans.",
    "code": "```rust\nfn main() {\n    let numbers = vec![1, 2, 3, 4, 5];\n    let is_even: Vec<bool> = numbers.iter().map(|&x| x % 2 == 0).collect();\n    println!(\"{:?}\", is_even);\n}\n```"
  },
  {
    "task": "Convert a list of binary strings to decimal numbers using map.",
    "code": "```rust\nfn main() {\n    let binary_strings = vec![\"101\", \"111\", \"1001\", \"11001\"];\n    let decimal_numbers: Vec<u32> = binary_strings\n        .iter()\n        .map(|s| u32::from_str_radix(s, 2).unwrap())\n        .collect();\n    println!(\"{:?}\", decimal_numbers);\n}\n```"
  },
  {
    "task": "Use map to append a domain name to a list of user names to create email addresses.",
    "code": "```rust\nfn main() {\n    let usernames = vec![\"alice\", \"bob\", \"charlie\"];\n    let domain = \"@example.com\";\n    \n    let emails: Vec<String> = usernames.iter()\n        .map(|username| format!(\"{}{}\", username, domain))\n        .collect();\n    \n    for email in emails {\n        println!(\"{}\", email);\n    }\n}\n```"
  },
  {
    "task": "Calculate the area of each circle in a list of radii using a map function.",
    "code": "```rust\nfn main() {\n    let radii = vec![1.0, 2.0, 3.0, 4.0, 5.0];\n    let areas: Vec<f64> = radii.iter().map(|r| std::f64::consts::PI * r * r).collect();\n    println!(\"{:?}\", areas);\n}\n```"
  },
  {
    "task": "Use map to strip whitespace from the start and end of each string in a list.",
    "code": "```rust\nfn main() {\n    let strings = vec![\"  hello  \", \"  world  \", \"  rust  \"];\n    let trimmed_strings: Vec<String> = strings.into_iter()\n        .map(|s| s.trim().to_string())\n        .collect();\n    println!(\"{:?}\", trimmed_strings);\n}\n```"
  },
  {
    "task": "Apply map to replace spaces with underscores in a list of file paths.",
    "code": "```rust\nfn replace_spaces_with_underscores(paths: Vec<&str>) -> Vec<String> {\n    paths.into_iter()\n        .map(|path| path.replace(' ', \"_\"))\n        .collect()\n}\n\nfn main() {\n    let file_paths = vec![\"path with spaces/file1.txt\", \"another path/file2.txt\", \"some path/file3.txt\"];\n    let updated_paths = replace_spaces_with_underscores(file_paths);\n    for path in updated_paths {\n        println!(\"{}\", path);\n    }\n}\n```"
  },
  {
    "task": "Convert a list of mixed-case strings to title case using map.",
    "code": "```rust\nfn main() {\n    let strings = vec![\"hello world\", \"rust programming\", \"functional MAP\"];\n    let title_cased: Vec<String> = strings\n        .into_iter()\n        .map(|s| {\n            s.split_whitespace()\n                .map(|word| {\n                    let mut chars = word.chars();\n                    match chars.next() {\n                        None => String::new(),\n                        Some(f) => f.to_uppercase().collect::<String>() + chars.as_str(),\n                    }\n                })\n                .collect::<Vec<String>>()\n                .join(\" \")\n        })\n        .collect();\n\n    for s in title_cased {\n        println!(\"{}\", s);\n    }\n}\n```"
  },
  {
    "task": "Use map to filter out only the digits from a list of mixed alphanumeric strings.",
    "code": "```rust\nfn main() {\n    let mixed_strings = vec![\"a1b2\", \"34x\", \"y56z\", \"789\"];\n    let digits: Vec<String> = mixed_strings.iter()\n        .map(|s| s.chars().filter(|c| c.is_digit(10)).collect())\n        .collect();\n    println!(\"{:?}\", digits);\n}\n```"
  },
  {
    "task": "Apply map to convert a list of Unix timestamps to readable date strings.",
    "code": "```rust\nuse chrono::{NaiveDateTime, Utc, TimeZone};\n\nfn main() {\n    let timestamps = vec![1609459200, 1612137600, 1614556800]; // Example timestamps\n    let readable_dates: Vec<String> = timestamps.iter()\n        .map(|&ts| Utc.timestamp(ts, 0).format(\"%Y-%m-%d %H:%M:%S\").to_string())\n        .collect();\n    \n    for date in readable_dates {\n        println!(\"{}\", date);\n    }\n}\n```"
  },
  {
    "task": "Transform a list of dictionary objects by extracting a specific key's value using map.",
    "code": "```rust\nfn main() {\n    let objects = vec![\n        std::collections::HashMap::from([(\"key1\", \"value1\"), (\"key2\", \"value2\")]),\n        std::collections::HashMap::from([(\"key1\", \"value3\"), (\"key2\", \"value4\")]),\n        std::collections::HashMap::from([(\"key1\", \"value5\"), (\"key2\", \"value6\")]),\n    ];\n\n    let extracted_values: Vec<&str> = objects\n        .iter()\n        .filter_map(|obj| obj.get(\"key1\"))\n        .copied()\n        .collect();\n\n    println!(\"{:?}\", extracted_values);\n}\n```"
  },
  {
    "task": "Use map to compute the cube of each number in a list.",
    "code": "```rust\nfn main() {\n    let numbers = vec![1, 2, 3, 4, 5];\n    let cubes: Vec<i32> = numbers.iter().map(|&x| x.pow(3)).collect();\n    println!(\"{:?}\", cubes);\n}\n```"
  },
  {
    "task": "Translate a list of URLs to their respective domain names using a map function.",
    "code": "```rust\nfn extract_domain(url: &str) -> &str {\n    url.split(\"://\")\n        .nth(1)\n        .unwrap_or(url)\n        .split('/')\n        .next()\n        .unwrap_or(url)\n}\n\nfn main() {\n    let urls = vec![\n        \"http://example.com/path\",\n        \"https://www.rust-lang.org/\",\n        \"ftp://fileserver.com/files\",\n    ];\n\n    let domains: Vec<&str> = urls.iter().map(|url| extract_domain(url)).collect();\n\n    for domain in domains {\n        println!(\"{}\", domain);\n    }\n}\n```"
  },
  {
    "task": "Use map to generate HTML list items from a list of text strings.",
    "code": "```rust\nfn main() {\n    let text_strings = vec![\"Item 1\", \"Item 2\", \"Item 3\"];\n    let html_list_items: Vec<String> = text_strings\n        .iter()\n        .map(|s| format!(\"<li>{}</li>\", s))\n        .collect();\n    \n    for item in html_list_items {\n        println!(\"{}\", item);\n    }\n}\n```"
  },
  {
    "task": "Convert a list of polar coordinates to Cartesian coordinates using map.",
    "code": "```rust\nfn polar_to_cartesian(polar_coords: &[(f64, f64)]) -> Vec<(f64, f64)> {\n    polar_coords.iter()\n        .map(|&(r, theta)| (r * theta.cos(), r * theta.sin()))\n        .collect()\n}\n\nfn main() {\n    let polar_coords = vec![(1.0, 0.0), (1.0, std::f64::consts::FRAC_PI_2), (1.0, std::f64::consts::PI)];\n    let cartesian_coords = polar_to_cartesian(&polar_coords);\n    println!(\"{:?}\", cartesian_coords);\n}\n```"
  },
  {
    "task": "Use map to decode a list of Base64 encoded strings.",
    "code": "```rust\nuse base64::decode;\n\nfn decode_base64_strings(encoded_strings: Vec<&str>) -> Vec<Option<Vec<u8>>> {\n    encoded_strings.into_iter().map(|s| decode(s).ok()).collect()\n}\n\nfn main() {\n    let encoded_strings = vec![\n        \"SGVsbG8sIFdvcmxkIQ==\",\n        \"U29tZSBvdGhlciBzdHJpbmc=\",\n    ];\n    let decoded_strings = decode_base64_strings(encoded_strings);\n    for decoded in decoded_strings {\n        if let Some(bytes) = decoded {\n            if let Ok(string) = String::from_utf8(bytes) {\n                println!(\"{}\", string);\n            }\n        }\n    }\n}\n```"
  },
  {
    "task": "Convert a list of English sentences to Pig Latin using a map function.",
    "code": "```rust\nfn to_pig_latin(sentence: &str) -> String {\n    sentence.split_whitespace().map(|word| {\n        let first_char = word.chars().next().unwrap();\n        if \"aeiouAEIOU\".contains(first_char) {\n            format!(\"{}-hay\", word)\n        } else {\n            let mut chars = word.chars();\n            chars.next();\n            format!(\"{}-{}ay\", chars.collect::<String>(), first_char)\n        }\n    }).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let sentences = vec![\n        \"hello world\",\n        \"this is a test\",\n        \"rust is fun\",\n    ];\n\n    let pig_latin_sentences: Vec<String> = sentences.iter().map(|s| to_pig_latin(s)).collect();\n    for sentence in pig_latin_sentences {\n        println!(\"{}\", sentence);\n    }\n}\n```"
  },
  {
    "task": "Use map to anonymize a list of email addresses by masking them.",
    "code": "```rust\nfn anonymize_emails(emails: Vec<&str>) -> Vec<String> {\n    emails.iter()\n        .map(|email| {\n            let at_index = email.find('@').unwrap_or(0);\n            let masked = \"*\".repeat(at_index);\n            format!(\"{}{}\", masked, &email[at_index..])\n        })\n        .collect()\n}\n\nfn main() {\n    let emails = vec![\"example1@example.com\", \"example2@example.com\"];\n    let anonymized_emails = anonymize_emails(emails);\n    for email in anonymized_emails {\n        println!(\"{}\", email);\n    }\n}\n```"
  },
  {
    "task": "Apply map to reverse each string in a list of words.",
    "code": "```rust\nfn main() {\n    let words = vec![\"hello\", \"world\", \"rust\"];\n    let reversed_words: Vec<String> = words.iter().map(|word| word.chars().rev().collect()).collect();\n    println!(\"{:?}\", reversed_words);\n}\n```"
  },
  {
    "task": "Convert a list of hexadecimal color codes to RGB tuples using map.",
    "code": "```rust\nfn hex_to_rgb(hex: &str) -> Option<(u8, u8, u8)> {\n    if hex.len() != 7 || !hex.starts_with('#') {\n        return None;\n    }\n    \n    let r = u8::from_str_radix(&hex[1..3], 16).ok()?;\n    let g = u8::from_str_radix(&hex[3..5], 16).ok()?;\n    let b = u8::from_str_radix(&hex[5..7], 16).ok()?;\n    \n    Some((r, g, b))\n}\n\nfn main() {\n    let hex_colors = vec![\"#FF5733\", \"#33FF57\", \"#3357FF\"];\n    let rgb_colors: Vec<Option<(u8, u8, u8)>> = hex_colors.iter().map(|&hex| hex_to_rgb(hex)).collect();\n    println!(\"{:?}\", rgb_colors);\n}\n```"
  },
  {
    "task": "Use map to increment each integer in a list by a constant value.",
    "code": "```rust\nfn main() {\n    let numbers = vec![1, 2, 3, 4, 5];\n    let incremented: Vec<i32> = numbers.iter().map(|&x| x + 1).collect();\n    println!(\"{:?}\", incremented);\n}\n```"
  },
  {
    "task": "Calculate the square root of each number in a list using a map function.",
    "code": "```rust\nfn main() {\n    let numbers = vec![1.0, 4.0, 9.0, 16.0, 25.0];\n    let square_roots: Vec<f64> = numbers.iter().map(|&x| x.sqrt()).collect();\n    println!(\"{:?}\", square_roots);\n}\n```"
  },
  {
    "task": "Use map to convert a list of currency amounts from dollars to euros.",
    "code": "```rust\nfn main() {\n    let dollar_amounts = vec![100.0, 250.0, 75.5, 40.0];\n    let euro_conversion_rate = 0.85; // Assume 1 dollar = 0.85 euros\n\n    let euro_amounts: Vec<f64> = dollar_amounts.iter()\n        .map(|&amount| amount * euro_conversion_rate)\n        .collect();\n\n    println!(\"{:?}\", euro_amounts);\n}\n```"
  },
  {
    "task": "Extract the domain from each email address in a list using map.",
    "code": "```rust\nfn main() {\n    let emails = vec![\"user1@example.com\", \"user2@test.com\", \"user3@domain.org\"];\n    let domains: Vec<&str> = emails.iter().map(|email| {\n        email.split('@').nth(1).unwrap_or(\"\")\n    }).collect();\n\n    println!(\"{:?}\", domains);\n}\n```"
  },
  {
    "task": "Use map to serialize a list of objects into JSON strings.",
    "code": "```rust\nuse serde::Serialize;\nuse serde_json::to_string;\n\n#[derive(Serialize)]\nstruct MyObject {\n    id: u32,\n    name: String,\n}\n\nfn main() {\n    let objects = vec![\n        MyObject { id: 1, name: \"Object1\".to_string() },\n        MyObject { id: 2, name: \"Object2\".to_string() },\n    ];\n\n    let json_strings: Vec<String> = objects\n        .iter()\n        .map(|obj| to_string(obj).unwrap())\n        .collect();\n\n    for json in json_strings {\n        println!(\"{}\", json);\n    }\n}\n```"
  },
  {
    "task": "Transform a list of file sizes from bytes to kilobytes using map.",
    "code": "```rust\nfn main() {\n    let file_sizes_in_bytes = vec![1024, 2048, 5120, 10240];\n    let file_sizes_in_kilobytes: Vec<f64> = file_sizes_in_bytes.iter().map(|&size| size as f64 / 1024.0).collect();\n    println!(\"{:?}\", file_sizes_in_kilobytes);\n}\n```"
  },
  {
    "task": "Use map to append a suffix to each string in a list of identifiers.",
    "code": "```rust\nfn main() {\n    let identifiers = vec![\"id1\", \"id2\", \"id3\"];\n    let suffix = \"_suffix\";\n    let updated_identifiers: Vec<String> = identifiers.iter().map(|id| format!(\"{}{}\", id, suffix)).collect();\n    \n    for identifier in updated_identifiers {\n        println!(\"{}\", identifier);\n    }\n}\n```"
  },
  {
    "task": "Apply map to convert measurements from inches to centimeters in a list.",
    "code": "```rust\nfn main() {\n    let inches = vec![1.0, 2.5, 3.75, 4.0, 5.5];\n    let centimeters: Vec<f64> = inches.iter().map(|&inch| inch * 2.54).collect();\n    println!(\"{:?}\", centimeters);\n}\n```"
  },
  {
    "task": "Use map to encrypt a list of plaintext messages using a simple cipher.",
    "code": "```rust\nfn main() {\n    let plaintexts = vec![\"hello\", \"rust\", \"world\"];\n    let shift = 3; // Simple Caesar cipher shift\n\n    let encrypted_messages: Vec<String> = plaintexts.into_iter().map(|message| {\n        message.chars().map(|c| {\n            if c.is_ascii_alphabetic() {\n                let ascii_offset = if c.is_ascii_lowercase() { b'a' } else { b'A' };\n                ((c as u8 - ascii_offset + shift) % 26 + ascii_offset) as char\n            } else {\n                c\n            }\n        }).collect()\n    }).collect();\n\n    for message in encrypted_messages {\n        println!(\"{}\", message);\n    }\n}\n```"
  },
  {
    "task": "Transform a list of date strings to day of the week names using a map function.",
    "code": "```rust\nuse chrono::NaiveDate;\nuse chrono::Datelike;\n\nfn main() {\n    let date_strings = vec![\"2023-10-01\", \"2023-10-02\", \"2023-10-03\"];\n    let days_of_week: Vec<String> = date_strings.iter()\n        .map(|date_str| {\n            let date = NaiveDate::parse_from_str(date_str, \"%Y-%m-%d\").unwrap();\n            date.weekday().to_string()\n        })\n        .collect();\n\n    println!(\"{:?}\", days_of_week);\n}\n```"
  },
  {
    "task": "Use map to derive the absolute value of each number in a list.",
    "code": "```rust\nfn main() {\n    let numbers = vec![-1, 2, -3, 4, -5];\n    let absolute_values: Vec<i32> = numbers.iter().map(|&x| x.abs()).collect();\n    println!(\"{:?}\", absolute_values);\n}\n```"
  },
  {
    "task": "Convert a list of lowercase hexadecimal strings to uppercase using map.",
    "code": "```rust\nfn main() {\n    let hex_strings = vec![\"1a\", \"2b\", \"3c\", \"4d\", \"5e\"];\n    let uppercase_hex_strings: Vec<String> = hex_strings\n        .into_iter()\n        .map(|s| s.to_uppercase())\n        .collect();\n\n    for s in uppercase_hex_strings {\n        println!(\"{}\", s);\n    }\n}\n```"
  },
  {
    "task": "Use map to find the maximum value in a list of lists of numbers.",
    "code": "```rust\nfn main() {\n    let list_of_lists = vec![\n        vec![1, 2, 3],\n        vec![4, 5, 6],\n        vec![7, 8, 9],\n    ];\n\n    let max_value = list_of_lists.iter()\n        .map(|list| list.iter().max().unwrap_or(&i32::MIN))\n        .max()\n        .unwrap_or(&i32::MIN);\n\n    println!(\"The maximum value is: {}\", max_value);\n}\n```"
  },
  {
    "task": "Apply map to extract the year from each date in a list of date objects.",
    "code": "```rust\nstruct Date {\n    year: i32,\n    month: u32,\n    day: u32,\n}\n\nfn main() {\n    let dates = vec![\n        Date { year: 2023, month: 10, day: 5 },\n        Date { year: 2022, month: 6, day: 15 },\n        Date { year: 2021, month: 2, day: 28 },\n    ];\n\n    let years: Vec<i32> = dates.iter().map(|date| date.year).collect();\n\n    println!(\"{:?}\", years);\n}\n```"
  },
  {
    "task": "Use map to prepend a country code to each phone number in a list.",
    "code": "```rust\nfn prepend_country_code(phone_numbers: Vec<&str>, country_code: &str) -> Vec<String> {\n    phone_numbers.iter()\n        .map(|&number| format!(\"{}{}\", country_code, number))\n        .collect()\n}\n\nfn main() {\n    let phone_numbers = vec![\"+1234567890\", \"+9876543210\"];\n    let country_code = \"+1\";\n    let updated_numbers = prepend_country_code(phone_numbers, country_code);\n    for number in updated_numbers {\n        println!(\"{}\", number);\n    }\n}\n```"
  },
  {
    "task": "Capitalize the last letter of each word in a list using a map function.",
    "code": "```rust\nfn capitalize_last(s: &str) -> String {\n    if let Some((last, rest)) = s.char_indices().rev().next() {\n        let mut chars: Vec<char> = s.chars().collect();\n        chars[last] = chars[last].to_uppercase().next().unwrap();\n        chars.into_iter().collect()\n    } else {\n        s.to_string()\n    }\n}\n\nfn main() {\n    let words = vec![\"hello\", \"world\", \"example\"];\n    let capitalized: Vec<String> = words.iter().map(|&word| capitalize_last(word)).collect();\n    println!(\"{:?}\", capitalized);\n}\n```"
  },
  {
    "task": "Use map to transform a list of strings by removing all vowels.",
    "code": "```rust\nfn remove_vowels(s: &str) -> String {\n    s.chars().filter(|&c| !\"aeiouAEIOU\".contains(c)).collect()\n}\n\nfn main() {\n    let strings = vec![\"example\", \"rust\", \"programming\"];\n    let result: Vec<String> = strings.iter().map(|s| remove_vowels(s)).collect();\n    println!(\"{:?}\", result);\n}\n```"
  },
  {
    "task": "Convert a list of music notes to their corresponding frequencies using map.",
    "code": "```rust\nfn note_to_frequency(note: &str) -> f32 {\n    match note {\n        \"C4\" => 261.63,\n        \"D4\" => 293.66,\n        \"E4\" => 329.63,\n        \"F4\" => 349.23,\n        \"G4\" => 392.00,\n        \"A4\" => 440.00,\n        \"B4\" => 493.88,\n        _ => 0.0,\n    }\n}\n\nfn main() {\n    let notes = vec![\"C4\", \"E4\", \"G4\", \"A4\"];\n    let frequencies: Vec<f32> = notes.iter().map(|&note| note_to_frequency(note)).collect();\n    println!(\"{:?}\", frequencies);\n}\n```"
  },
  {
    "task": "Use map to find the reciprocal of each number in a list.",
    "code": "```rust\nfn main() {\n    let numbers = vec![1.0, 2.0, 4.0, 5.0];\n    let reciprocals: Vec<f64> = numbers.iter().map(|&x| 1.0 / x).collect();\n    println!(\"{:?}\", reciprocals);\n}\n```"
  },
  {
    "task": "Transform a list of URLs to their shortened versions using a map function.",
    "code": "```rust\nfn shorten_url(url: &str) -> String {\n    format!(\"short_{}\", url)\n}\n\nfn main() {\n    let urls = vec![\n        \"https://example.com\",\n        \"https://rust-lang.org\",\n        \"https://openai.com\",\n    ];\n    \n    let shortened_urls: Vec<String> = urls.iter().map(|&url| shorten_url(url)).collect();\n    \n    for short_url in shortened_urls {\n        println!(\"{}\", short_url);\n    }\n}\n```"
  },
  {
    "task": "Use map to generate a list of initials from a list of full names.",
    "code": "```rust\nfn main() {\n    let names = vec![\"Alice Smith\", \"Bob Johnson\", \"Charlie Brown\"];\n    let initials: Vec<String> = names.iter()\n        .map(|name| {\n            name.split_whitespace()\n                .filter_map(|word| word.chars().next())\n                .collect()\n        })\n        .collect();\n\n    println!(\"{:?}\", initials);\n}\n```"
  },
  {
    "task": "Convert a list of decimal numbers to their binary string representations using map.",
    "code": "```rust\nfn main() {\n    let decimal_numbers = vec![1, 2, 3, 4, 5];\n    let binary_strings: Vec<String> = decimal_numbers.iter().map(|&n| format!(\"{:b}\", n)).collect();\n    println!(\"{:?}\", binary_strings);\n}\n```"
  },
  {
    "task": "Use map to adjust the brightness of each color in a list of RGB tuples.",
    "code": "```rust\nfn adjust_brightness(colors: &[(u8, u8, u8)], adjustment: f32) -> Vec<(u8, u8, u8)> {\n    colors.iter()\n        .map(|&(r, g, b)| {\n            let adjust = |c: u8| (c as f32 * adjustment).min(255.0) as u8;\n            (adjust(r), adjust(g), adjust(b))\n        })\n        .collect()\n}\n\nfn main() {\n    let colors = vec![(100, 150, 200), (50, 75, 100), (255, 255, 255)];\n    let adjusted_colors = adjust_brightness(&colors, 1.2);\n    for color in adjusted_colors {\n        println!(\"{:?}\", color);\n    }\n}\n```"
  },
  {
    "task": "Apply map to filter out only alphabetic characters from a list of strings.",
    "code": "```rust\nfn main() {\n    let strings = vec![\"hello123\", \"world!\", \"2023rust\", \"code\"];\n    let filtered: Vec<String> = strings\n        .into_iter()\n        .map(|s| s.chars().filter(|c| c.is_alphabetic()).collect())\n        .collect();\n    println!(\"{:?}\", filtered);\n}\n```"
  },
  {
    "task": "Use map to compute the prime factorization of each number in a list.",
    "code": "```rust\nfn prime_factors(mut n: u32) -> Vec<u32> {\n    let mut factors = Vec::new();\n    let mut divisor = 2;\n\n    while n >= divisor * divisor {\n        while n % divisor == 0 {\n            factors.push(divisor);\n            n /= divisor;\n        }\n        divisor += 1;\n    }\n\n    if n > 1 {\n        factors.push(n);\n    }\n\n    factors\n}\n\nfn main() {\n    let numbers = vec![12, 18, 27, 29];\n    let factorizations: Vec<Vec<u32>> = numbers.iter().map(|&n| prime_factors(n)).collect();\n    println!(\"{:?}\", factorizations);\n}\n```"
  },
  {
    "task": "Calculate the exponential of each number in a list using a map function.",
    "code": "```rust\nfn main() {\n    let numbers = vec![1.0, 2.0, 3.0, 4.0];\n    let exponentials: Vec<f64> = numbers.iter().map(|&x| x.exp()).collect();\n    println!(\"{:?}\", exponentials);\n}\n```"
  },
  {
    "task": "Use map to convert a list of text messages to morse code.",
    "code": "```rust\nuse std::collections::HashMap;\n\nfn text_to_morse(text: &str, morse_map: &HashMap<char, &str>) -> String {\n    text.chars()\n        .filter_map(|c| morse_map.get(&c.to_ascii_lowercase()).cloned())\n        .collect::<Vec<_>>()\n        .join(\" \")\n}\n\nfn main() {\n    let morse_map: HashMap<char, &str> = [\n        ('a', \".-\"), ('b', \"-...\"), ('c', \"-.-.\"), ('d', \"-..\"), ('e', \".\"), ('f', \"..-.\"), \n        ('g', \"--.\"), ('h', \"....\"), ('i', \"..\"), ('j', \".---\"), ('k', \"-.-\"), ('l', \".-..\"), \n        ('m', \"--\"), ('n', \"-.\"), ('o', \"---\"), ('p', \".--.\"), ('q', \"--.-\"), ('r', \".-.\"), \n        ('s', \"...\"), ('t', \"-\"), ('u', \"..-\"), ('v', \"...-\"), ('w', \".--\"), ('x', \"-..-\"), \n        ('y', \"-.--\"), ('z', \"--..\"), ('1', \".----\"), ('2', \"..---\"), ('3', \"...--\"), \n        ('4', \"....-\"), ('5', \".....\"), ('6', \"-....\"), ('7', \"--...\"), ('8', \"---..\"), \n        ('9', \"----.\"), ('0', \"-----\"), (' ', \"/\")\n    ].iter().cloned().collect();\n\n    let messages = vec![\"hello\", \"world\", \"rust\"];\n\n    let morse_messages: Vec<String> = messages.iter()\n        .map(|msg| text_to_morse(msg, &morse_map))\n        .collect();\n\n    for morse in morse_messages {\n        println!(\"{}\", morse);\n    }\n}\n```"
  },
  {
    "task": "Transform a list of JSON objects to XML strings using a map function.",
    "code": "```rust\nextern crate serde_json;\nextern crate serde_xml_rs;\n\nuse serde_json::Value;\nuse serde_xml_rs::to_string;\n\nfn main() {\n    let json_data = r#\"\n    [\n        {\"name\": \"John\", \"age\": 30},\n        {\"name\": \"Jane\", \"age\": 25}\n    ]\n    \"#;\n\n    let json_objects: Vec<Value> = serde_json::from_str(json_data).unwrap();\n    let xml_strings: Vec<String> = json_objects\n        .iter()\n        .map(|obj| to_string(obj).unwrap())\n        .collect();\n\n    for xml in xml_strings {\n        println!(\"{}\", xml);\n    }\n}\n```"
  },
  {
    "task": "Use map to extract the extension from each filename in a list.",
    "code": "```rust\nfn main() {\n    let filenames = vec![\"file1.txt\", \"archive.tar.gz\", \"document.pdf\", \"image.jpeg\"];\n    let extensions: Vec<&str> = filenames.iter()\n        .filter_map(|filename| filename.split('.').last())\n        .collect();\n\n    for ext in extensions {\n        println!(\"{}\", ext);\n    }\n}\n```"
  },
  {
    "task": "Convert a list of temperatures from Fahrenheit to Kelvin using map.",
    "code": "```rust\nfn fahrenheit_to_kelvin(f: f64) -> f64 {\n    (f - 32.0) * 5.0 / 9.0 + 273.15\n}\n\nfn main() {\n    let fahrenheit_temps = vec![32.0, 68.0, 104.0, 212.0];\n    let kelvin_temps: Vec<f64> = fahrenheit_temps.iter().map(|&f| fahrenheit_to_kelvin(f)).collect();\n    println!(\"{:?}\", kelvin_temps);\n}\n```"
  },
  {
    "task": "Use map to calculate the perimeter of each rectangle in a list of dimensions.",
    "code": "```rust\nfn main() {\n    let rectangles = vec![(2, 3), (4, 5), (6, 7)];\n    let perimeters: Vec<i32> = rectangles.iter().map(|&(width, height)| 2 * (width + height)).collect();\n    println!(\"{:?}\", perimeters);\n}\n```"
  },
  {
    "task": "Apply map to format a list of phone numbers into a standard format.",
    "code": "```rust\nfn main() {\n    let phone_numbers = vec![\n        \"1234567890\",\n        \"0987654321\",\n        \"5556667777\",\n    ];\n\n    let formatted_numbers: Vec<String> = phone_numbers\n        .iter()\n        .map(|num| format!(\"({}) {}-{}\", &num[0..3], &num[3..6], &num[6..]))\n        .collect();\n\n    for number in formatted_numbers {\n        println!(\"{}\", number);\n    }\n}\n```"
  },
  {
    "task": "Use map to generate a hashed version of passwords from a list.",
    "code": "```rust\nuse sha2::{Sha256, Digest};\n\nfn hashed_passwords(passwords: Vec<&str>) -> Vec<String> {\n    passwords.into_iter()\n        .map(|password| {\n            let mut hasher = Sha256::new();\n            hasher.update(password);\n            format!(\"{:x}\", hasher.finalize())\n        })\n        .collect()\n}\n\nfn main() {\n    let passwords = vec![\"password123\", \"qwerty\", \"letmein\"];\n    let hashed = hashed_passwords(passwords);\n    for hash in hashed {\n        println!(\"{}\", hash);\n    }\n}\n```"
  },
  {
    "task": "Convert a list of text paragraphs to a word count using map.",
    "code": "```rust\nfn main() {\n    let paragraphs = vec![\n        \"This is the first paragraph.\",\n        \"Here is another paragraph with more words.\",\n        \"Rust is a systems programming language that runs blazingly fast, prevents segfaults, and guarantees thread safety.\"\n    ];\n\n    let word_counts: Vec<usize> = paragraphs.iter()\n        .map(|p| p.split_whitespace().count())\n        .collect();\n\n    println!(\"{:?}\", word_counts);\n}\n```"
  },
  {
    "task": "Use map to remove punctuation from each string in a list of sentences.",
    "code": "```rust\nfn remove_punctuation(sentences: Vec<&str>) -> Vec<String> {\n    sentences.iter()\n        .map(|sentence| sentence.chars()\n            .filter(|c| !c.is_ascii_punctuation())\n            .collect::<String>())\n        .collect()\n}\n\nfn main() {\n    let sentences = vec![\n        \"Hello, world!\",\n        \"Rust is great; isn't it?\",\n        \"Functional map: powerful & expressive.\"\n    ];\n    let result = remove_punctuation(sentences);\n    for sentence in result {\n        println!(\"{}\", sentence);\n    }\n}\n```"
  },
  {
    "task": "Transform a list of URLs to their base domain using a map function.",
    "code": "```rust\nfn extract_base_domain(url: &str) -> Option<&str> {\n    url.split(\"://\")\n        .nth(1)\n        .and_then(|s| s.split('/').next())\n}\n\nfn main() {\n    let urls = vec![\n        \"https://www.example.com/some/path\",\n        \"http://subdomain.example.org/another/path\",\n        \"https://example.net/\",\n    ];\n\n    let domains: Vec<Option<&str>> = urls.iter().map(|url| extract_base_domain(url)).collect();\n\n    println!(\"{:?}\", domains);\n}\n```"
  },
  {
    "task": "Use map to translate a list of expressions to their symbolic algebraic forms.",
    "code": "```rust\nfn main() {\n    let expressions = vec![\"a + b\", \"c - d\", \"e * f\", \"g / h\"];\n    let symbolic_forms: Vec<String> = expressions.iter().map(|&expr| {\n        match expr {\n            \"a + b\" => \"Symbolic(a, b, +)\".to_string(),\n            \"c - d\" => \"Symbolic(c, d, -)\".to_string(),\n            \"e * f\" => \"Symbolic(e, f, *)\".to_string(),\n            \"g / h\" => \"Symbolic(g, h, /)\".to_string(),\n            _ => \"Unknown\".to_string(),\n        }\n    }).collect();\n\n    for form in symbolic_forms {\n        println!(\"{}\", form);\n    }\n}\n```"
  },
  {
    "task": "Apply map to convert a list of ASCII codes to corresponding characters.",
    "code": "```rust\nfn main() {\n    let ascii_codes = vec![65, 66, 67, 68, 69]; // Example ASCII codes\n    let characters: Vec<char> = ascii_codes.into_iter().map(|code| code as u8 as char).collect();\n    println!(\"{:?}\", characters);\n}\n```"
  },
  {
    "task": "Use map to transform a list of text strings to their lemmatized forms.",
    "code": "```rust\nuse lemmatizer::Lemmatizer;\n\nfn main() {\n    let lemmatizer = Lemmatizer::load(\"path/to/lemmatizer/data\").expect(\"Failed to load lemmatizer\");\n    let texts = vec![\"running\", \"jumps\", \"easily\"];\n\n    let lemmatized_texts: Vec<String> = texts\n        .iter()\n        .map(|text| lemmatizer.lemmatize(text).to_string())\n        .collect();\n\n    println!(\"{:?}\", lemmatized_texts);\n}\n```"
  },
  {
    "task": "Convert a list of HTML strings to plain text using map.",
    "code": "```rust\nfn html_to_plain_text(html: &str) -> String {\n    let re = regex::Regex::new(r\"<[^>]*>\").unwrap();\n    re.replace_all(html, \"\").to_string()\n}\n\nfn main() {\n    let html_strings = vec![\n        \"<p>Hello, <b>world!</b></p>\",\n        \"<div>Another <span>example</span>.</div>\",\n        \"<h1>Title</h1><p>Content</p>\",\n    ];\n\n    let plain_texts: Vec<String> = html_strings.iter().map(|s| html_to_plain_text(s)).collect();\n\n    for text in plain_texts {\n        println!(\"{}\", text);\n    }\n}\n```"
  },
  {
    "task": "Use map to create a summary of each article in a list of texts.",
    "code": "```rust\nfn main() {\n    let articles = vec![\n        \"The Rust Programming Language is a language empowering everyone to build reliable and efficient software.\",\n        \"Rust is a multi-paradigm programming language focused on performance and safety, especially safe concurrency.\",\n        \"The language grew out of a personal project by Mozilla employee Graydon Hoare.\",\n    ];\n\n    let summaries: Vec<String> = articles.iter()\n        .map(|article| {\n            let words: Vec<&str> = article.split_whitespace().collect();\n            if words.len() > 5 {\n                words[..5].join(\" \") + \"...\"\n            } else {\n                article.to_string()\n            }\n        })\n        .collect();\n    \n    for summary in summaries {\n        println!(\"{}\", summary);\n    }\n}\n```"
  },
  {
    "task": "Transform a list of paths to their absolute paths using a map function.",
    "code": "```rust\nuse std::path::Path;\nuse std::env;\n\nfn main() {\n    let paths = vec![\"./foo\", \"../bar\", \"/baz\"];\n    let absolute_paths: Vec<_> = paths.iter()\n        .map(|p| Path::new(p).canonicalize().unwrap())\n        .collect();\n\n    for path in absolute_paths {\n        println!(\"{}\", path.display());\n    }\n}\n```"
  },
  {
    "task": "Use map to generate QR codes from a list of URLs.",
    "code": "```rust\nuse qrcode::{QrCode, Version};\nuse image::Luma;\n\nfn main() {\n    let urls = vec![\n        \"https://example.com\",\n        \"https://rust-lang.org\",\n        \"https://github.com\",\n    ];\n\n    let qr_codes: Vec<_> = urls.iter().map(|url| {\n        let code = QrCode::new(url).unwrap();\n        let image = code.render::<Luma<u8>>().build();\n        image\n    }).collect();\n\n    qr_codes.iter().enumerate().for_each(|(i, qr)| {\n        let filename = format!(\"qr_code_{}.png\", i);\n        qr.save(&filename).unwrap();\n    });\n}\n```"
  },
  {
    "task": "Convert a list of angles from degrees to radians using map.",
    "code": "```rust\nfn main() {\n    let degrees = vec![0.0, 30.0, 45.0, 60.0, 90.0];\n    let radians: Vec<f64> = degrees.iter().map(|&d| d.to_radians()).collect();\n    println!(\"{:?}\", radians);\n}\n```"
  },
  {
    "task": "Use map to anonymize a list of IP addresses by masking parts of them.",
    "code": "```rust\nfn anonymize_ips(ips: Vec<&str>) -> Vec<String> {\n    ips.into_iter()\n        .map(|ip| {\n            let mut parts: Vec<&str> = ip.split('.').collect();\n            if parts.len() == 4 {\n                parts[2] = \"xxx\";\n                parts[3] = \"xxx\";\n            }\n            parts.join(\".\")\n        })\n        .collect()\n}\n\nfn main() {\n    let ip_addresses = vec![\"192.168.1.1\", \"10.0.0.2\", \"172.16.0.3\"];\n    let anonymized_ips = anonymize_ips(ip_addresses);\n    for ip in anonymized_ips {\n        println!(\"{}\", ip);\n    }\n}\n```"
  },
  {
    "task": "Transform a list of tuples by swapping their elements using a map function.",
    "code": "```rust\nfn main() {\n    let tuples = vec![(1, 'a'), (2, 'b'), (3, 'c')];\n    let swapped: Vec<_> = tuples.into_iter().map(|(x, y)| (y, x)).collect();\n    println!(\"{:?}\", swapped);\n}\n```"
  },
  {
    "task": "Use map to compute the greatest common divisor of pairs in a list of number pairs.",
    "code": "```rust\nfn gcd(a: u32, b: u32) -> u32 {\n    match b {\n        0 => a,\n        _ => gcd(b, a % b),\n    }\n}\n\nfn main() {\n    let pairs = vec![(48, 18), (56, 98), (99, 121)];\n    let gcds: Vec<u32> = pairs.into_iter()\n        .map(|(a, b)| gcd(a, b))\n        .collect();\n    \n    println!(\"{:?}\", gcds);\n}\n```"
  },
  {
    "task": "Convert a list of file paths to their directory names using map.",
    "code": "```rust\nfn main() {\n    let file_paths = vec![\n        \"/home/user/documents/file1.txt\",\n        \"/home/user/photos/image1.png\",\n        \"/var/log/system.log\",\n    ];\n\n    let directory_names: Vec<&str> = file_paths\n        .iter()\n        .map(|path| {\n            path.rsplit_once('/')\n                .map(|(dir, _file)| dir)\n                .unwrap_or(path)\n        })\n        .collect();\n\n    for dir in directory_names {\n        println!(\"{}\", dir);\n    }\n}\n```"
  },
  {
    "task": "Use map to replace each vowel in a list of strings with a specific character.",
    "code": "```rust\nfn replace_vowels_with_char(strings: Vec<&str>, replacement: char) -> Vec<String> {\n    strings.into_iter().map(|s| {\n        s.chars().map(|c| {\n            if \"aeiouAEIOU\".contains(c) {\n                replacement\n            } else {\n                c\n            }\n        }).collect()\n    }).collect()\n}\n\nfn main() {\n    let strings = vec![\"hello\", \"world\", \"example\"];\n    let replaced_strings = replace_vowels_with_char(strings, '*');\n    for s in replaced_strings {\n        println!(\"{}\", s);\n    }\n}\n```"
  },
  {
    "task": "Transform a list of integers to their hexadecimal representations using map.",
    "code": "```rust\nfn main() {\n    let numbers = vec![10, 15, 255, 1024];\n    let hex_numbers: Vec<String> = numbers.iter().map(|&n| format!(\"{:x}\", n)).collect();\n    println!(\"{:?}\", hex_numbers);\n}\n```"
  },
  {
    "task": "Use map to apply a transformation matrix to a list of 2D vectors.",
    "code": "```rust\nfn main() {\n    let vectors = vec![(1.0, 2.0), (3.0, 4.0), (5.0, 6.0)];\n    let transformation_matrix = [[2.0, 0.0], [0.0, 2.0]];\n\n    let transformed_vectors: Vec<(f64, f64)> = vectors.iter().map(|&(x, y)| {\n        (\n            x * transformation_matrix[0][0] + y * transformation_matrix[0][1],\n            x * transformation_matrix[1][0] + y * transformation_matrix[1][1],\n        )\n    }).collect();\n\n    for vector in transformed_vectors {\n        println!(\"{:?}\", vector);\n    }\n}\n```"
  },
  {
    "task": "Convert a list of text strings to their phonetic alphabet equivalents using map.",
    "code": "```rust\nfn main() {\n    let input = vec![\"A\", \"B\", \"C\", \"D\", \"E\"];\n    let phonetic_alphabet = |letter: &str| match letter {\n        \"A\" => \"Alpha\",\n        \"B\" => \"Bravo\",\n        \"C\" => \"Charlie\",\n        \"D\" => \"Delta\",\n        \"E\" => \"Echo\",\n        _ => \"\",\n    };\n\n    let result: Vec<&str> = input.iter().map(phonetic_alphabet).collect();\n    for word in result {\n        println!(\"{}\", word);\n    }\n}\n```"
  },
  {
    "task": "Use map to determine if each word in a list is a palindrome, returning booleans.",
    "code": "```rust\nfn main() {\n    let words = vec![\"racecar\", \"hello\", \"level\", \"world\", \"radar\"];\n    let palindromes: Vec<bool> = words.iter().map(|word| is_palindrome(word)).collect();\n    println!(\"{:?}\", palindromes);\n}\n\nfn is_palindrome(word: &str) -> bool {\n    let reversed: String = word.chars().rev().collect();\n    word == reversed\n}\n```"
  },
  {
    "task": "Transform a list of dictionaries by renaming a specified key using a map function.",
    "code": "```rust\nfn rename_key_in_dicts(dicts: Vec<std::collections::HashMap<String, String>>, old_key: &str, new_key: &str) -> Vec<std::collections::HashMap<String, String>> {\n    dicts.into_iter().map(|mut dict| {\n        if let Some(value) = dict.remove(old_key) {\n            dict.insert(new_key.to_string(), value);\n        }\n        dict\n    }).collect()\n}\n\nfn main() {\n    let dicts = vec![\n        [(\"old_key\".to_string(), \"value1\".to_string())].iter().cloned().collect(),\n        [(\"old_key\".to_string(), \"value2\".to_string())].iter().cloned().collect(),\n    ];\n    let transformed = rename_key_in_dicts(dicts, \"old_key\", \"new_key\");\n    println!(\"{:?}\", transformed);\n}\n```"
  },
  {
    "task": "Use map to compute the logarithm of each number in a list.",
    "code": "```rust\nfn main() {\n    let numbers = vec![1.0, 10.0, 100.0, 1000.0];\n    let logs: Vec<f64> = numbers.iter().map(|&x| x.log10()).collect();\n    println!(\"{:?}\", logs);\n}\n```"
  },
  {
    "task": "Convert a list of image file paths to grayscale versions using map.",
    "code": "```rust\nuse image::{open, GrayImage};\nuse std::path::PathBuf;\n\nfn convert_to_grayscale(paths: Vec<PathBuf>) -> Vec<GrayImage> {\n    paths.into_iter().filter_map(|path| {\n        open(&path).ok().map(|img| img.to_luma8())\n    }).collect()\n}\n\nfn main() {\n    let image_paths = vec![\n        PathBuf::from(\"image1.jpg\"),\n        PathBuf::from(\"image2.png\"),\n        PathBuf::from(\"image3.bmp\"),\n    ];\n\n    let grayscale_images = convert_to_grayscale(image_paths);\n    \n    // Example of saving the grayscale images if needed\n    for (i, img) in grayscale_images.iter().enumerate() {\n        img.save(format!(\"grayscale_image{}.png\", i)).unwrap();\n    }\n}\n```"
  },
  {
    "task": "Use map to flatten a list of lists of strings into a single list of strings.",
    "code": "```rust\nfn main() {\n    let nested_lists = vec![\n        vec![\"apple\", \"banana\"],\n        vec![\"cherry\", \"date\"],\n        vec![\"fig\", \"grape\"],\n    ];\n\n    let flattened: Vec<&str> = nested_lists.into_iter().flatten().collect();\n\n    println!(\"{:?}\", flattened);\n}\n```"
  },
  {
    "task": "Transform a list of temperature readings to temperature anomalies using a map function.",
    "code": "```rust\nfn main() {\n    let temperature_readings = vec![15.0, 22.5, 19.0, 25.5, 18.5];\n    let average_temperature = temperature_readings.iter().sum::<f64>() / temperature_readings.len() as f64;\n    \n    let temperature_anomalies: Vec<f64> = temperature_readings\n        .iter()\n        .map(|&temp| temp - average_temperature)\n        .collect();\n    \n    println!(\"{:?}\", temperature_anomalies);\n}\n```"
  }
]