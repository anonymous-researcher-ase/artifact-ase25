[
  {
    "task": "Define a class representing a book with attributes for title, author, and number of pages, and a method to display the book's information.",
    "code": "```rust\nstruct Book {\n    title: String,\n    author: String,\n    num_pages: u32,\n}\n\nimpl Book {\n    fn new(title: &str, author: &str, num_pages: u32) -> Book {\n        Book {\n            title: title.to_string(),\n            author: author.to_string(),\n            num_pages,\n        }\n    }\n\n    fn display_info(&self) {\n        println!(\"Title: {}\", self.title);\n        println!(\"Author: {}\", self.author);\n        println!(\"Number of pages: {}\", self.num_pages);\n    }\n}\n```"
  },
  {
    "task": "Create a class for a bank account that includes attributes for account number, balance, and a method to deposit funds.",
    "code": "```rust\nstruct BankAccount {\n    account_number: u32,\n    balance: f64,\n}\n\nimpl BankAccount {\n    fn new(account_number: u32, initial_balance: f64) -> Self {\n        BankAccount {\n            account_number,\n            balance: initial_balance,\n        }\n    }\n\n    fn deposit(&mut self, amount: f64) {\n        self.balance += amount;\n    }\n}\n\nfn main() {\n    let mut account = BankAccount::new(123456, 1000.0);\n    account.deposit(500.0);\n}\n```"
  },
  {
    "task": "Design a class for a vehicle with properties for make, model, and year, and a method to start the engine.",
    "code": "```rust\nstruct Vehicle {\n    make: String,\n    model: String,\n    year: u32,\n}\n\nimpl Vehicle {\n    fn new(make: String, model: String, year: u32) -> Self {\n        Vehicle { make, model, year }\n    }\n\n    fn start_engine(&self) {\n        println!(\"The engine of the {} {} ({}) is starting.\", self.make, self.model, self.year);\n    }\n}\n\nfn main() {\n    let car = Vehicle::new(String::from(\"Toyota\"), String::from(\"Corolla\"), 2021);\n    car.start_engine();\n}\n```"
  },
  {
    "task": "Implement a class that models a student with attributes for name, ID, and grades, and a method to calculate the GPA.",
    "code": "```rust\nstruct Student {\n    name: String,\n    id: u32,\n    grades: Vec<f32>,\n}\n\nimpl Student {\n    fn new(name: String, id: u32, grades: Vec<f32>) -> Self {\n        Student { name, id, grades }\n    }\n\n    fn calculate_gpa(&self) -> f32 {\n        if self.grades.is_empty() {\n            0.0\n        } else {\n            let sum: f32 = self.grades.iter().sum();\n            sum / self.grades.len() as f32\n        }\n    }\n}\n```"
  },
  {
    "task": "Construct a class for a rectangle that has attributes for width and height, and methods to calculate area and perimeter.",
    "code": "```rust\nstruct Rectangle {\n    width: f64,\n    height: f64,\n}\n\nimpl Rectangle {\n    fn new(width: f64, height: f64) -> Self {\n        Rectangle { width, height }\n    }\n\n    fn area(&self) -> f64 {\n        self.width * self.height\n    }\n\n    fn perimeter(&self) -> f64 {\n        2.0 * (self.width + self.height)\n    }\n}\n```"
  },
  {
    "task": "Formulate a class for a smartphone with properties for brand, model, and battery life, and a method to make a call.",
    "code": "```rust\nstruct Smartphone {\n    brand: String,\n    model: String,\n    battery_life: u32,\n}\n\nimpl Smartphone {\n    fn new(brand: &str, model: &str, battery_life: u32) -> Self {\n        Smartphone {\n            brand: brand.to_string(),\n            model: model.to_string(),\n            battery_life,\n        }\n    }\n\n    fn make_call(&self, number: &str) {\n        println!(\"Calling {} using {} {}...\", number, self.brand, self.model);\n    }\n}\n\nfn main() {\n    let phone = Smartphone::new(\"ExampleBrand\", \"ExampleModel\", 100);\n    phone.make_call(\"+1234567890\");\n}\n```"
  },
  {
    "task": "Build a class representing a movie with attributes for title, director, and duration, and a method to play the movie.",
    "code": "```rust\nstruct Movie {\n    title: String,\n    director: String,\n    duration: u32,\n}\n\nimpl Movie {\n    fn play(&self) {\n        println!(\"Playing movie: {}\", self.title);\n    }\n}\n\nfn main() {\n    let movie = Movie {\n        title: String::from(\"Inception\"),\n        director: String::from(\"Christopher Nolan\"),\n        duration: 148,\n    };\n\n    movie.play();\n}\n```"
  },
  {
    "task": "Create a class for an employee with attributes for name, position, and salary, and a method to display their profile.",
    "code": "```rust\nstruct Employee {\n    name: String,\n    position: String,\n    salary: f64,\n}\n\nimpl Employee {\n    fn new(name: String, position: String, salary: f64) -> Self {\n        Employee { name, position, salary }\n    }\n\n    fn display_profile(&self) {\n        println!(\"Name: {}\", self.name);\n        println!(\"Position: {}\", self.position);\n        println!(\"Salary: ${:.2}\", self.salary);\n    }\n}\n\nfn main() {\n    let employee = Employee::new(String::from(\"Alice\"), String::from(\"Developer\"), 75000.0);\n    employee.display_profile();\n}\n```"
  },
  {
    "task": "Design a class for a library that includes attributes for name, location, and books available, and a method to add a new book.",
    "code": "```rust\nstruct Library {\n    name: String,\n    location: String,\n    books_available: Vec<String>,\n}\n\nimpl Library {\n    fn new(name: &str, location: &str) -> Library {\n        Library {\n            name: name.to_string(),\n            location: location.to_string(),\n            books_available: Vec::new(),\n        }\n    }\n\n    fn add_book(&mut self, book: &str) {\n        self.books_available.push(book.to_string());\n    }\n}\n\nfn main() {\n    let mut my_library = Library::new(\"Central Library\", \"Main Street\");\n    my_library.add_book(\"1984 by George Orwell\");\n}\n```"
  },
  {
    "task": "Develop a class for a shopping cart with properties for items and total cost, and methods to add and remove items.",
    "code": "```rust\nstruct Item {\n    name: String,\n    price: f64,\n}\n\nstruct ShoppingCart {\n    items: Vec<Item>,\n    total_cost: f64,\n}\n\nimpl ShoppingCart {\n    fn new() -> Self {\n        ShoppingCart {\n            items: Vec::new(),\n            total_cost: 0.0,\n        }\n    }\n\n    fn add_item(&mut self, item: Item) {\n        self.total_cost += item.price;\n        self.items.push(item);\n    }\n\n    fn remove_item(&mut self, item_name: &str) -> bool {\n        if let Some(pos) = self.items.iter().position(|x| x.name == item_name) {\n            self.total_cost -= self.items[pos].price;\n            self.items.remove(pos);\n            true\n        } else {\n            false\n        }\n    }\n}\n```"
  },
  {
    "task": "Implement a class for a thermostat with attributes for current temperature and desired temperature, and a method to adjust the temperature.",
    "code": "```rust\nstruct Thermostat {\n    current_temperature: f64,\n    desired_temperature: f64,\n}\n\nimpl Thermostat {\n    fn new(current_temperature: f64, desired_temperature: f64) -> Self {\n        Thermostat {\n            current_temperature,\n            desired_temperature,\n        }\n    }\n\n    fn adjust_temperature(&mut self) {\n        if self.current_temperature < self.desired_temperature {\n            self.current_temperature += 1.0; // Example increment\n        } else if self.current_temperature > self.desired_temperature {\n            self.current_temperature -= 1.0; // Example decrement\n        }\n    }\n}\n\nfn main() {\n    let mut thermostat = Thermostat::new(20.0, 22.0);\n    thermostat.adjust_temperature();\n    println!(\n        \"Current temperature: {}, Desired temperature: {}\",\n        thermostat.current_temperature, thermostat.desired_temperature\n    );\n}\n```"
  },
  {
    "task": "Formulate a class for a person with attributes for first name, last name, and age, and a method to return the full name.",
    "code": "```rust\nstruct Person {\n    first_name: String,\n    last_name: String,\n    age: u32,\n}\n\nimpl Person {\n    fn new(first_name: &str, last_name: &str, age: u32) -> Self {\n        Person {\n            first_name: first_name.to_string(),\n            last_name: last_name.to_string(),\n            age,\n        }\n    }\n\n    fn full_name(&self) -> String {\n        format!(\"{} {}\", self.first_name, self.last_name)\n    }\n}\n```"
  },
  {
    "task": "Construct a class for a game character with properties for health, strength, and inventory, and a method to attack.",
    "code": "```rust\nstruct GameCharacter {\n    health: i32,\n    strength: i32,\n    inventory: Vec<String>,\n}\n\nimpl GameCharacter {\n    fn new(health: i32, strength: i32, inventory: Vec<String>) -> Self {\n        GameCharacter {\n            health,\n            strength,\n            inventory,\n        }\n    }\n\n    fn attack(&self) -> i32 {\n        self.strength\n    }\n}\n\nfn main() {\n    let character = GameCharacter::new(100, 50, vec![\"Sword\".to_string()]);\n    println!(\"Character attacks with strength: {}\", character.attack());\n}\n```"
  },
  {
    "task": "Create a class for a calendar event with attributes for title, date, and location, and a method to reschedule the event.",
    "code": "```rust\nstruct CalendarEvent {\n    title: String,\n    date: String,\n    location: String,\n}\n\nimpl CalendarEvent {\n    fn new(title: &str, date: &str, location: &str) -> Self {\n        CalendarEvent {\n            title: title.to_string(),\n            date: date.to_string(),\n            location: location.to_string(),\n        }\n    }\n\n    fn reschedule(&mut self, new_date: &str) {\n        self.date = new_date.to_string();\n    }\n}\n\nfn main() {\n    let mut event = CalendarEvent::new(\"Meeting\", \"2023-12-01\", \"Conference Room\");\n    event.reschedule(\"2023-12-02\");\n}\n```"
  },
  {
    "task": "Design a class representing a song with properties for title, artist, and duration, and a method to play the song.",
    "code": "```rust\nstruct Song {\n    title: String,\n    artist: String,\n    duration: u32,\n}\n\nimpl Song {\n    fn new(title: &str, artist: &str, duration: u32) -> Song {\n        Song {\n            title: title.to_string(),\n            artist: artist.to_string(),\n            duration,\n        }\n    }\n\n    fn play(&self) {\n        println!(\"Playing '{}' by {}...\", self.title, self.artist);\n    }\n}\n\nfn main() {\n    let song = Song::new(\"Imagine\", \"John Lennon\", 183);\n    song.play();\n}\n```"
  },
  {
    "task": "Develop a class for an order in an e-commerce system with attributes for order ID, customer, and items, and a method to calculate total price.",
    "code": "```rust\nstruct Order {\n    order_id: u32,\n    customer: String,\n    items: Vec<Item>,\n}\n\nstruct Item {\n    name: String,\n    price: f64,\n}\n\nimpl Order {\n    fn calculate_total_price(&self) -> f64 {\n        self.items.iter().map(|item| item.price).sum()\n    }\n}\n```"
  },
  {
    "task": "Build a class for a social media post with attributes for content, author, and timestamp, and a method to like the post.",
    "code": "```rust\nuse std::time::{SystemTime, UNIX_EPOCH};\n\nstruct SocialMediaPost {\n    content: String,\n    author: String,\n    timestamp: u64,\n    likes: u32,\n}\n\nimpl SocialMediaPost {\n    fn new(content: &str, author: &str) -> Self {\n        SocialMediaPost {\n            content: content.to_string(),\n            author: author.to_string(),\n            timestamp: SystemTime::now()\n                .duration_since(UNIX_EPOCH)\n                .unwrap()\n                .as_secs(),\n            likes: 0,\n        }\n    }\n\n    fn like(&mut self) {\n        self.likes += 1;\n    }\n}\n\nfn main() {\n    let mut post = SocialMediaPost::new(\"Hello, world!\", \"Alice\");\n    post.like();\n    println!(\"Post by {}: {} ({} likes)\", post.author, post.content, post.likes);\n}\n```"
  },
  {
    "task": "Create a class for a computer with properties for processor, RAM, and storage, and a method to display system specifications.",
    "code": "```rust\nstruct Computer {\n    processor: String,\n    ram: u32, // in GB\n    storage: u32, // in GB\n}\n\nimpl Computer {\n    fn new(processor: String, ram: u32, storage: u32) -> Computer {\n        Computer { processor, ram, storage }\n    }\n\n    fn display_specs(&self) {\n        println!(\"Processor: {}\", self.processor);\n        println!(\"RAM: {} GB\", self.ram);\n        println!(\"Storage: {} GB\", self.storage);\n    }\n}\n\nfn main() {\n    let my_computer = Computer::new(\"Intel i7\".to_string(), 16, 512);\n    my_computer.display_specs();\n}\n```"
  },
  {
    "task": "Implement a class for a restaurant menu item with attributes for name, price, and description, and a method to update the price.",
    "code": "```rust\nstruct MenuItem {\n    name: String,\n    price: f64,\n    description: String,\n}\n\nimpl MenuItem {\n    fn new(name: &str, price: f64, description: &str) -> Self {\n        MenuItem {\n            name: name.to_string(),\n            price,\n            description: description.to_string(),\n        }\n    }\n\n    fn update_price(&mut self, new_price: f64) {\n        self.price = new_price;\n    }\n}\n```"
  },
  {
    "task": "Design a class for a package delivery with attributes for tracking number, destination, and status, and a method to update the status.",
    "code": "```rust\nstruct PackageDelivery {\n    tracking_number: String,\n    destination: String,\n    status: String,\n}\n\nimpl PackageDelivery {\n    fn new(tracking_number: &str, destination: &str, status: &str) -> Self {\n        PackageDelivery {\n            tracking_number: tracking_number.to_string(),\n            destination: destination.to_string(),\n            status: status.to_string(),\n        }\n    }\n\n    fn update_status(&mut self, new_status: &str) {\n        self.status = new_status.to_string();\n    }\n}\n```"
  },
  {
    "task": "Construct a class representing a pet with attributes for species, age, and name, and a method to display its details.",
    "code": "```rust\nstruct Pet {\n    species: String,\n    age: u32,\n    name: String,\n}\n\nimpl Pet {\n    fn new(species: String, age: u32, name: String) -> Self {\n        Pet { species, age, name }\n    }\n\n    fn display_details(&self) {\n        println!(\"Species: {}, Age: {}, Name: {}\", self.species, self.age, self.name);\n    }\n}\n\nfn main() {\n    let pet = Pet::new(\"Dog\".to_string(), 5, \"Buddy\".to_string());\n    pet.display_details();\n}\n```"
  },
  {
    "task": "Formulate a class for a product in a store with properties for SKU, name, and price, and a method to apply a discount.",
    "code": "```rust\nstruct Product {\n    sku: String,\n    name: String,\n    price: f64,\n}\n\nimpl Product {\n    fn new(sku: String, name: String, price: f64) -> Self {\n        Product { sku, name, price }\n    }\n\n    fn apply_discount(&mut self, discount_percentage: f64) {\n        let discount = self.price * (discount_percentage / 100.0);\n        self.price -= discount;\n    }\n}\n```"
  },
  {
    "task": "Develop a class for a university course with attributes for course code, title, and credits, and a method to enroll a student.",
    "code": "```rust\nstruct UniversityCourse {\n    course_code: String,\n    title: String,\n    credits: u32,\n    students_enrolled: Vec<String>,\n}\n\nimpl UniversityCourse {\n    fn new(course_code: &str, title: &str, credits: u32) -> Self {\n        UniversityCourse {\n            course_code: course_code.to_string(),\n            title: title.to_string(),\n            credits,\n            students_enrolled: Vec::new(),\n        }\n    }\n\n    fn enroll_student(&mut self, student_name: &str) {\n        self.students_enrolled.push(student_name.to_string());\n    }\n}\n```"
  },
  {
    "task": "Create a class for a smart light bulb with attributes for color, brightness, and state (on/off), and a method to change the color.",
    "code": "```rust\nstruct SmartLightBulb {\n    color: String,\n    brightness: u8,\n    state: bool,\n}\n\nimpl SmartLightBulb {\n    fn new(color: String, brightness: u8, state: bool) -> Self {\n        SmartLightBulb {\n            color,\n            brightness,\n            state,\n        }\n    }\n\n    fn change_color(&mut self, new_color: String) {\n        self.color = new_color;\n    }\n}\n```"
  },
  {
    "task": "Design a class for a blog post with properties for title, content, and date published, and a method to edit the content.",
    "code": "```rust\nstruct BlogPost {\n    title: String,\n    content: String,\n    date_published: String,\n}\n\nimpl BlogPost {\n    fn new(title: String, content: String, date_published: String) -> Self {\n        BlogPost {\n            title,\n            content,\n            date_published,\n        }\n    }\n\n    fn edit_content(&mut self, new_content: String) {\n        self.content = new_content;\n    }\n}\n```"
  },
  {
    "task": "Build a class for a bank transaction with attributes for transaction ID, amount, and type, and a method to reverse the transaction.",
    "code": "```rust\nstruct BankTransaction {\n    transaction_id: u32,\n    amount: f64,\n    transaction_type: String,\n}\n\nimpl BankTransaction {\n    fn new(transaction_id: u32, amount: f64, transaction_type: String) -> Self {\n        BankTransaction {\n            transaction_id,\n            amount,\n            transaction_type,\n        }\n    }\n\n    fn reverse_transaction(&mut self) {\n        self.amount = -self.amount;\n    }\n}\n\nfn main() {\n    let mut transaction = BankTransaction::new(1, 100.0, String::from(\"Deposit\"));\n    transaction.reverse_transaction();\n}\n```"
  },
  {
    "task": "Implement a class for a city with properties for name, population, and area, and a method to calculate population density.",
    "code": "```rust\nstruct City {\n    name: String,\n    population: u32,\n    area: f64,\n}\n\nimpl City {\n    fn new(name: String, population: u32, area: f64) -> Self {\n        City { name, population, area }\n    }\n\n    fn population_density(&self) -> f64 {\n        self.population as f64 / self.area\n    }\n}\n\nfn main() {\n    let city = City::new(String::from(\"Sample City\"), 1_000_000, 500.0);\n    println!(\"Population Density: {}\", city.population_density());\n}\n```"
  },
  {
    "task": "Construct a class for a library member with attributes for member ID, name, and borrowed books, and a method to borrow a book.",
    "code": "```rust\nstruct LibraryMember {\n    member_id: u32,\n    name: String,\n    borrowed_books: Vec<String>,\n}\n\nimpl LibraryMember {\n    fn borrow_book(&mut self, book: String) {\n        self.borrowed_books.push(book);\n    }\n}\n\nfn main() {\n    let mut member = LibraryMember {\n        member_id: 1,\n        name: String::from(\"Alice\"),\n        borrowed_books: Vec::new(),\n    };\n\n    member.borrow_book(String::from(\"1984\"));\n}\n```"
  },
  {
    "task": "Create a class for a flight reservation with attributes for flight number, passenger name, and seat number, and a method to change the seat.",
    "code": "```rust\nstruct FlightReservation {\n    flight_number: String,\n    passenger_name: String,\n    seat_number: String,\n}\n\nimpl FlightReservation {\n    fn new(flight_number: &str, passenger_name: &str, seat_number: &str) -> Self {\n        Self {\n            flight_number: flight_number.to_string(),\n            passenger_name: passenger_name.to_string(),\n            seat_number: seat_number.to_string(),\n        }\n    }\n\n    fn change_seat(&mut self, new_seat_number: &str) {\n        self.seat_number = new_seat_number.to_string();\n    }\n}\n\nfn main() {\n    let mut reservation = FlightReservation::new(\"AB123\", \"John Doe\", \"12A\");\n    reservation.change_seat(\"14C\");\n}\n```"
  },
  {
    "task": "Develop a class for a digital photo album with properties for album name, photos, and a method to add a new photo.",
    "code": "```rust\nstruct PhotoAlbum {\n    album_name: String,\n    photos: Vec<String>,\n}\n\nimpl PhotoAlbum {\n    fn new(album_name: String) -> Self {\n        PhotoAlbum {\n            album_name,\n            photos: Vec::new(),\n        }\n    }\n\n    fn add_photo(&mut self, photo: String) {\n        self.photos.push(photo);\n    }\n}\n```"
  },
  {
    "task": "Design a class for a task in a to-do list with attributes for description, deadline, and status, and a method to mark it as complete.",
    "code": "```rust\nstruct Task {\n    description: String,\n    deadline: String,\n    status: bool,\n}\n\nimpl Task {\n    fn new(description: String, deadline: String) -> Self {\n        Task {\n            description,\n            deadline,\n            status: false,\n        }\n    }\n\n    fn mark_as_complete(&mut self) {\n        self.status = true;\n    }\n}\n```"
  },
  {
    "task": "Formulate a class for a conference speaker with attributes for name, topic, and time slot, and a method to update the time slot.",
    "code": "```rust\nstruct Speaker {\n    name: String,\n    topic: String,\n    time_slot: String,\n}\n\nimpl Speaker {\n    fn new(name: &str, topic: &str, time_slot: &str) -> Self {\n        Speaker {\n            name: name.to_string(),\n            topic: topic.to_string(),\n            time_slot: time_slot.to_string(),\n        }\n    }\n\n    fn update_time_slot(&mut self, new_time_slot: &str) {\n        self.time_slot = new_time_slot.to_string();\n    }\n}\n```"
  },
  {
    "task": "Construct a class for a real estate property with attributes for address, price, and square footage, and a method to change the price.",
    "code": "```rust\nstruct RealEstateProperty {\n    address: String,\n    price: f64,\n    square_footage: u32,\n}\n\nimpl RealEstateProperty {\n    fn new(address: String, price: f64, square_footage: u32) -> Self {\n        RealEstateProperty {\n            address,\n            price,\n            square_footage,\n        }\n    }\n\n    fn change_price(&mut self, new_price: f64) {\n        self.price = new_price;\n    }\n}\n\nfn main() {\n    let mut property = RealEstateProperty::new(\n        String::from(\"123 Main St\"),\n        250000.0,\n        1500,\n    );\n\n    property.change_price(275000.0);\n}\n```"
  },
  {
    "task": "Create a class for a weather forecast with properties for temperature, humidity, and condition, and a method to update the forecast.",
    "code": "```rust\nstruct WeatherForecast {\n    temperature: f64,\n    humidity: f64,\n    condition: String,\n}\n\nimpl WeatherForecast {\n    fn new(temperature: f64, humidity: f64, condition: String) -> Self {\n        WeatherForecast {\n            temperature,\n            humidity,\n            condition,\n        }\n    }\n\n    fn update_forecast(&mut self, temperature: f64, humidity: f64, condition: String) {\n        self.temperature = temperature;\n        self.humidity = humidity;\n        self.condition = condition;\n    }\n}\n```"
  },
  {
    "task": "Build a class for a musical instrument with attributes for type, brand, and model, and a method to play a note.",
    "code": "```rust\nstruct MusicalInstrument {\n    instrument_type: String,\n    brand: String,\n    model: String,\n}\n\nimpl MusicalInstrument {\n    fn new(instrument_type: String, brand: String, model: String) -> Self {\n        MusicalInstrument {\n            instrument_type,\n            brand,\n            model,\n        }\n    }\n\n    fn play_note(&self, note: &str) {\n        println!(\"Playing note {} on a {} {} {}\", note, self.brand, self.model, self.instrument_type);\n    }\n}\n\nfn main() {\n    let guitar = MusicalInstrument::new(String::from(\"Guitar\"), String::from(\"Fender\"), String::from(\"Stratocaster\"));\n    guitar.play_note(\"C\");\n}\n```"
  },
  {
    "task": "Design a class for a sports team with attributes for team name, players, and coach, and a method to add a new player.",
    "code": "```rust\nstruct SportsTeam {\n    team_name: String,\n    players: Vec<String>,\n    coach: String,\n}\n\nimpl SportsTeam {\n    fn new(team_name: String, coach: String) -> SportsTeam {\n        SportsTeam {\n            team_name,\n            players: Vec::new(),\n            coach,\n        }\n    }\n\n    fn add_player(&mut self, player: String) {\n        self.players.push(player);\n    }\n}\n\nfn main() {\n    let mut team = SportsTeam::new(String::from(\"Tigers\"), String::from(\"Coach Smith\"));\n    team.add_player(String::from(\"Player One\"));\n}\n```"
  },
  {
    "task": "Implement a class for a podcast episode with attributes for title, duration, and host, and a method to play the episode.",
    "code": "```rust\nstruct PodcastEpisode {\n    title: String,\n    duration: u32, // in seconds\n    host: String,\n}\n\nimpl PodcastEpisode {\n    fn new(title: String, duration: u32, host: String) -> Self {\n        PodcastEpisode { title, duration, host }\n    }\n\n    fn play(&self) {\n        println!(\"Playing episode: '{}' hosted by {}\", self.title, self.host);\n    }\n}\n\nfn main() {\n    let episode = PodcastEpisode::new(\n        String::from(\"Learning Rust\"),\n        3600,\n        String::from(\"Jane Doe\"),\n    );\n    episode.play();\n}\n```"
  },
  {
    "task": "Develop a class for a space mission with properties for mission name, crew, and launch date, and a method to launch the mission.",
    "code": "```rust\nstruct SpaceMission {\n    mission_name: String,\n    crew: Vec<String>,\n    launch_date: String,\n}\n\nimpl SpaceMission {\n    fn new(mission_name: String, crew: Vec<String>, launch_date: String) -> SpaceMission {\n        SpaceMission {\n            mission_name,\n            crew,\n            launch_date,\n        }\n    }\n\n    fn launch_mission(&self) {\n        println!(\"Launching mission: {}\", self.mission_name);\n    }\n}\n\nfn main() {\n    let mission = SpaceMission::new(\n        String::from(\"Apollo 11\"),\n        vec![String::from(\"Neil Armstrong\"), String::from(\"Buzz Aldrin\")],\n        String::from(\"1969-07-16\"),\n    );\n\n    mission.launch_mission();\n}\n```"
  },
  {
    "task": "Create a class for a virtual assistant with attributes for name, language, and skills, and a method to add a new skill.",
    "code": "```rust\nstruct VirtualAssistant {\n    name: String,\n    language: String,\n    skills: Vec<String>,\n}\n\nimpl VirtualAssistant {\n    fn new(name: String, language: String, skills: Vec<String>) -> Self {\n        VirtualAssistant { name, language, skills }\n    }\n\n    fn add_skill(&mut self, skill: String) {\n        self.skills.push(skill);\n    }\n}\n\nfn main() {\n    let mut assistant = VirtualAssistant::new(\n        String::from(\"Alexa\"),\n        String::from(\"English\"),\n        vec![String::from(\"music\"), String::from(\"weather\")],\n    );\n    \n    assistant.add_skill(String::from(\"news\"));\n}\n```"
  },
  {
    "task": "Formulate a class for a news article with attributes for headline, content, and author, and a method to publish the article.",
    "code": "```rust\nstruct NewsArticle {\n    headline: String,\n    content: String,\n    author: String,\n}\n\nimpl NewsArticle {\n    fn publish(&self) {\n        println!(\"Headline: {}\", self.headline);\n        println!(\"Content: {}\", self.content);\n        println!(\"Author: {}\", self.author);\n    }\n}\n```"
  },
  {
    "task": "Construct a class for a hiking trail with attributes for trail name, length, and difficulty, and a method to update the difficulty.",
    "code": "```rust\nstruct HikingTrail {\n    trail_name: String,\n    length: f32,\n    difficulty: String,\n}\n\nimpl HikingTrail {\n    fn new(trail_name: String, length: f32, difficulty: String) -> Self {\n        Self {\n            trail_name,\n            length,\n            difficulty,\n        }\n    }\n\n    fn update_difficulty(&mut self, new_difficulty: String) {\n        self.difficulty = new_difficulty;\n    }\n}\n```"
  },
  {
    "task": "Design a class for a subscription service with properties for service name, subscriber count, and subscription fee, and a method to update the fee.",
    "code": "```rust\nstruct SubscriptionService {\n    service_name: String,\n    subscriber_count: u32,\n    subscription_fee: f64,\n}\n\nimpl SubscriptionService {\n    fn new(service_name: String, subscriber_count: u32, subscription_fee: f64) -> Self {\n        SubscriptionService {\n            service_name,\n            subscriber_count,\n            subscription_fee,\n        }\n    }\n\n    fn update_fee(&mut self, new_fee: f64) {\n        self.subscription_fee = new_fee;\n    }\n}\n\nfn main() {\n    let mut service = SubscriptionService::new(String::from(\"MyService\"), 100, 9.99);\n    service.update_fee(12.99);\n}\n```"
  },
  {
    "task": "Build a class for a digital wallet with attributes for balance, transaction history, and a method to add funds.",
    "code": "```rust\nstruct DigitalWallet {\n    balance: f64,\n    transaction_history: Vec<String>,\n}\n\nimpl DigitalWallet {\n    fn new() -> Self {\n        DigitalWallet {\n            balance: 0.0,\n            transaction_history: Vec::new(),\n        }\n    }\n\n    fn add_funds(&mut self, amount: f64) {\n        self.balance += amount;\n        self.transaction_history.push(format!(\"Added: ${}\", amount));\n    }\n}\n\nfn main() {\n    let mut wallet = DigitalWallet::new();\n    wallet.add_funds(100.0);\n}\n```"
  },
  {
    "task": "Implement a class for a cooking recipe with attributes for name, ingredients, and instructions, and a method to update the instructions.",
    "code": "```rust\nstruct Recipe {\n    name: String,\n    ingredients: Vec<String>,\n    instructions: String,\n}\n\nimpl Recipe {\n    fn new(name: String, ingredients: Vec<String>, instructions: String) -> Self {\n        Recipe {\n            name,\n            ingredients,\n            instructions,\n        }\n    }\n\n    fn update_instructions(&mut self, new_instructions: String) {\n        self.instructions = new_instructions;\n    }\n}\n```"
  },
  {
    "task": "Develop a class for a time zone with properties for zone name, offset, and a method to convert time from another time zone.",
    "code": "```rust\nstruct TimeZone {\n    zone_name: String,\n    offset: i32, // offset in minutes from UTC\n}\n\nimpl TimeZone {\n    fn new(zone_name: &str, offset: i32) -> Self {\n        TimeZone {\n            zone_name: zone_name.to_string(),\n            offset,\n        }\n    }\n\n    fn convert_time(&self, time: i32, other: &TimeZone) -> i32 {\n        time + (self.offset - other.offset)\n    }\n}\n```"
  },
  {
    "task": "Create a class for a camera with attributes for resolution, brand, and model, and a method to take a picture.",
    "code": "```rust\nstruct Camera {\n    resolution: String,\n    brand: String,\n    model: String,\n}\n\nimpl Camera {\n    fn new(resolution: String, brand: String, model: String) -> Camera {\n        Camera {\n            resolution,\n            brand,\n            model,\n        }\n    }\n\n    fn take_picture(&self) {\n        println!(\"Taking a picture with {} {} ({} resolution)\", self.brand, self.model, self.resolution);\n    }\n}\n\nfn main() {\n    let my_camera = Camera::new(String::from(\"1080p\"), String::from(\"Canon\"), String::from(\"EOS R5\"));\n    my_camera.take_picture();\n}\n```"
  },
  {
    "task": "Design a class for a gaming console with properties for brand, model, and storage capacity, and a method to install a game.",
    "code": "```rust\nstruct GamingConsole {\n    brand: String,\n    model: String,\n    storage_capacity: u32,\n}\n\nimpl GamingConsole {\n    fn new(brand: String, model: String, storage_capacity: u32) -> Self {\n        GamingConsole {\n            brand,\n            model,\n            storage_capacity,\n        }\n    }\n\n    fn install_game(&self, game_name: &str) {\n        println!(\"Installing {} on the {} {}\", game_name, self.brand, self.model);\n    }\n}\n\nfn main() {\n    let console = GamingConsole::new(String::from(\"Sony\"), String::from(\"PlayStation 5\"), 825);\n    console.install_game(\"Cyberpunk 2077\");\n}\n```"
  },
  {
    "task": "Formulate a class for a museum exhibit with attributes for exhibit name, artist, and year, and a method to update the year.",
    "code": "```rust\nstruct Exhibit {\n    name: String,\n    artist: String,\n    year: u32,\n}\n\nimpl Exhibit {\n    fn update_year(&mut self, new_year: u32) {\n        self.year = new_year;\n    }\n}\n\nfn main() {\n    let mut exhibit = Exhibit {\n        name: String::from(\"Starry Night\"),\n        artist: String::from(\"Vincent van Gogh\"),\n        year: 1889,\n    };\n\n    exhibit.update_year(1890);\n}\n```"
  },
  {
    "task": "Construct a class for a fitness tracker with attributes for steps, calories burned, and heart rate, and a method to add steps.",
    "code": "```rust\nstruct FitnessTracker {\n    steps: u32,\n    calories_burned: u32,\n    heart_rate: u32,\n}\n\nimpl FitnessTracker {\n    fn new(steps: u32, calories_burned: u32, heart_rate: u32) -> Self {\n        FitnessTracker {\n            steps,\n            calories_burned,\n            heart_rate,\n        }\n    }\n\n    fn add_steps(&mut self, steps: u32) {\n        self.steps += steps;\n    }\n}\n```"
  },
  {
    "task": "Build a class for an aquarium with properties for tank size, fish species, and water temperature, and a method to add a new fish.",
    "code": "```rust\nstruct Aquarium {\n    tank_size: u32,\n    fish_species: Vec<String>,\n    water_temperature: f32,\n}\n\nimpl Aquarium {\n    fn new(tank_size: u32, water_temperature: f32) -> Self {\n        Aquarium {\n            tank_size,\n            fish_species: Vec::new(),\n            water_temperature,\n        }\n    }\n\n    fn add_fish(&mut self, species: String) {\n        self.fish_species.push(species);\n    }\n}\n\nfn main() {\n    let mut my_aquarium = Aquarium::new(100, 25.5);\n    my_aquarium.add_fish(String::from(\"Goldfish\"));\n}\n```"
  },
  {
    "task": "Create a class for a chat message with attributes for sender, content, and timestamp, and a method to edit the content.",
    "code": "```rust\nuse std::time::SystemTime;\n\nstruct ChatMessage {\n    sender: String,\n    content: String,\n    timestamp: SystemTime,\n}\n\nimpl ChatMessage {\n    fn new(sender: String, content: String) -> Self {\n        ChatMessage {\n            sender,\n            content,\n            timestamp: SystemTime::now(),\n        }\n    }\n\n    fn edit_content(&mut self, new_content: String) {\n        self.content = new_content;\n    }\n}\n```"
  },
  {
    "task": "Design a class for a vending machine with properties for items available, prices, and a method to dispense an item.",
    "code": "```rust\nstruct VendingMachine {\n    items: Vec<String>,\n    prices: Vec<f64>,\n}\n\nimpl VendingMachine {\n    fn new(items: Vec<String>, prices: Vec<f64>) -> Self {\n        VendingMachine { items, prices }\n    }\n\n    fn dispense_item(&mut self, item_name: &str) -> Option<f64> {\n        if let Some(index) = self.items.iter().position(|item| item == item_name) {\n            let price = self.prices[index];\n            self.items.remove(index);\n            self.prices.remove(index);\n            Some(price)\n        } else {\n            None\n        }\n    }\n}\n```"
  },
  {
    "task": "Implement a class for a digital clock with attributes for current time, time zone, and a method to set an alarm.",
    "code": "```rust\nstruct DigitalClock {\n    current_time: String,\n    time_zone: String,\n    alarm: Option<String>,\n}\n\nimpl DigitalClock {\n    fn new(current_time: String, time_zone: String) -> Self {\n        DigitalClock {\n            current_time,\n            time_zone,\n            alarm: None,\n        }\n    }\n\n    fn set_alarm(&mut self, alarm_time: String) {\n        self.alarm = Some(alarm_time);\n    }\n}\n```"
  },
  {
    "task": "Develop a class for a historical figure with attributes for name, birthdate, and achievements, and a method to add an achievement.",
    "code": "```rust\nstruct HistoricalFigure {\n    name: String,\n    birthdate: String,\n    achievements: Vec<String>,\n}\n\nimpl HistoricalFigure {\n    fn new(name: String, birthdate: String) -> Self {\n        HistoricalFigure {\n            name,\n            birthdate,\n            achievements: Vec::new(),\n        }\n    }\n\n    fn add_achievement(&mut self, achievement: String) {\n        self.achievements.push(achievement);\n    }\n}\n```"
  },
  {
    "task": "Formulate a class for a travel itinerary with attributes for destinations, travel dates, and activities, and a method to add a destination.",
    "code": "```rust\nstruct TravelItinerary {\n    destinations: Vec<String>,\n    travel_dates: Vec<String>,\n    activities: Vec<String>,\n}\n\nimpl TravelItinerary {\n    fn new() -> Self {\n        TravelItinerary {\n            destinations: Vec::new(),\n            travel_dates: Vec::new(),\n            activities: Vec::new(),\n        }\n    }\n\n    fn add_destination(&mut self, destination: String) {\n        self.destinations.push(destination);\n    }\n}\n\nfn main() {\n    let mut itinerary = TravelItinerary::new();\n    itinerary.add_destination(\"Paris\".to_string());\n}\n```"
  },
  {
    "task": "Construct a class for a fashion brand with properties for brand name, founder, and product lines, and a method to launch a new product line.",
    "code": "```rust\nstruct FashionBrand {\n    brand_name: String,\n    founder: String,\n    product_lines: Vec<String>,\n}\n\nimpl FashionBrand {\n    fn new(brand_name: String, founder: String) -> Self {\n        FashionBrand {\n            brand_name,\n            founder,\n            product_lines: Vec::new(),\n        }\n    }\n\n    fn launch_product_line(&mut self, product_line: String) {\n        self.product_lines.push(product_line);\n    }\n}\n```"
  },
  {
    "task": "Create a class for a video game with attributes for title, genre, and rating, and a method to update the rating.",
    "code": "```rust\nstruct VideoGame {\n    title: String,\n    genre: String,\n    rating: f32,\n}\n\nimpl VideoGame {\n    fn new(title: &str, genre: &str, rating: f32) -> Self {\n        Self {\n            title: title.to_string(),\n            genre: genre.to_string(),\n            rating,\n        }\n    }\n\n    fn update_rating(&mut self, new_rating: f32) {\n        self.rating = new_rating;\n    }\n}\n\nfn main() {\n    let mut game = VideoGame::new(\"Example Game\", \"Action\", 4.5);\n    game.update_rating(4.8);\n}\n```"
  },
  {
    "task": "Build a class for a scientific experiment with attributes for experiment name, hypothesis, and results, and a method to record results.",
    "code": "```rust\nstruct ScientificExperiment {\n    name: String,\n    hypothesis: String,\n    results: Vec<String>,\n}\n\nimpl ScientificExperiment {\n    fn new(name: &str, hypothesis: &str) -> ScientificExperiment {\n        ScientificExperiment {\n            name: name.to_string(),\n            hypothesis: hypothesis.to_string(),\n            results: Vec::new(),\n        }\n    }\n\n    fn record_result(&mut self, result: &str) {\n        self.results.push(result.to_string());\n    }\n}\n```"
  },
  {
    "task": "Design a class for a gourmet dish with properties for dish name, ingredients, and cooking time, and a method to change cooking time.",
    "code": "```rust\nstruct GourmetDish {\n    dish_name: String,\n    ingredients: Vec<String>,\n    cooking_time: u32,\n}\n\nimpl GourmetDish {\n    fn new(dish_name: String, ingredients: Vec<String>, cooking_time: u32) -> Self {\n        GourmetDish {\n            dish_name,\n            ingredients,\n            cooking_time,\n        }\n    }\n\n    fn change_cooking_time(&mut self, new_cooking_time: u32) {\n        self.cooking_time = new_cooking_time;\n    }\n}\n```"
  },
  {
    "task": "Implement a class for a political office with attributes for office title, holder, and term length, and a method to change the holder.",
    "code": "```rust\nstruct PoliticalOffice {\n    office_title: String,\n    holder: String,\n    term_length: u32,\n}\n\nimpl PoliticalOffice {\n    fn new(office_title: String, holder: String, term_length: u32) -> Self {\n        PoliticalOffice {\n            office_title,\n            holder,\n            term_length,\n        }\n    }\n\n    fn change_holder(&mut self, new_holder: String) {\n        self.holder = new_holder;\n    }\n}\n\nfn main() {\n    let mut office = PoliticalOffice::new(\n        String::from(\"President\"),\n        String::from(\"John Doe\"),\n        4,\n    );\n    \n    office.change_holder(String::from(\"Jane Smith\"));\n}\n```"
  },
  {
    "task": "Develop a class for an astronomical object with properties for name, type, and distance from Earth, and a method to update the distance.",
    "code": "```rust\nstruct AstronomicalObject {\n    name: String,\n    obj_type: String,\n    distance_from_earth: f64,\n}\n\nimpl AstronomicalObject {\n    fn new(name: &str, obj_type: &str, distance_from_earth: f64) -> Self {\n        AstronomicalObject {\n            name: name.to_string(),\n            obj_type: obj_type.to_string(),\n            distance_from_earth,\n        }\n    }\n\n    fn update_distance(&mut self, new_distance: f64) {\n        self.distance_from_earth = new_distance;\n    }\n}\n```"
  },
  {
    "task": "Formulate a class for a public transportation route with attributes for route number, stops, and schedule, and a method to add a stop.",
    "code": "```rust\nstruct Route {\n    route_number: u32,\n    stops: Vec<String>,\n    schedule: Vec<String>,\n}\n\nimpl Route {\n    fn new(route_number: u32, stops: Vec<String>, schedule: Vec<String>) -> Self {\n        Route {\n            route_number,\n            stops,\n            schedule,\n        }\n    }\n\n    fn add_stop(&mut self, stop: String) {\n        self.stops.push(stop);\n    }\n}\n\nfn main() {\n    let mut route = Route::new(42, vec![\"Stop 1\".to_string(), \"Stop 2\".to_string()], vec![\"08:00\".to_string(), \"09:00\".to_string()]);\n    route.add_stop(\"Stop 3\".to_string());\n}\n```"
  },
  {
    "task": "Construct a class for a board game with properties for game name, player count, and rules, and a method to change the rules.",
    "code": "```rust\nstruct BoardGame {\n    game_name: String,\n    player_count: u32,\n    rules: String,\n}\n\nimpl BoardGame {\n    fn new(game_name: String, player_count: u32, rules: String) -> Self {\n        BoardGame {\n            game_name,\n            player_count,\n            rules,\n        }\n    }\n\n    fn change_rules(&mut self, new_rules: String) {\n        self.rules = new_rules;\n    }\n}\n```"
  },
  {
    "task": "Create a class for a customer loyalty program with attributes for program name, points, and rewards, and a method to redeem points.",
    "code": "```rust\nstruct LoyaltyProgram {\n    program_name: String,\n    points: u32,\n    rewards: Vec<String>,\n}\n\nimpl LoyaltyProgram {\n    fn new(program_name: String) -> Self {\n        LoyaltyProgram {\n            program_name,\n            points: 0,\n            rewards: Vec::new(),\n        }\n    }\n\n    fn add_points(&mut self, points: u32) {\n        self.points += points;\n    }\n\n    fn redeem_points(&mut self, points: u32) -> bool {\n        if self.points >= points {\n            self.points -= points;\n            true\n        } else {\n            false\n        }\n    }\n\n    fn add_reward(&mut self, reward: String) {\n        self.rewards.push(reward);\n    }\n}\n\nfn main() {\n    let mut program = LoyaltyProgram::new(String::from(\"Super Saver\"));\n    program.add_points(100);\n    program.add_reward(String::from(\"Free Coffee\"));\n    \n    if program.redeem_points(50) {\n        println!(\"Points redeemed successfully!\");\n    } else {\n        println!(\"Not enough points to redeem.\");\n    }\n}\n```"
  },
  {
    "task": "Design a class for an art gallery with properties for gallery name, location, and exhibitions, and a method to add a new exhibition.",
    "code": "```rust\nstruct ArtGallery {\n    gallery_name: String,\n    location: String,\n    exhibitions: Vec<String>,\n}\n\nimpl ArtGallery {\n    fn new(gallery_name: String, location: String) -> Self {\n        ArtGallery {\n            gallery_name,\n            location,\n            exhibitions: Vec::new(),\n        }\n    }\n\n    fn add_exhibition(&mut self, exhibition: String) {\n        self.exhibitions.push(exhibition);\n    }\n}\n```"
  },
  {
    "task": "Build a class for a personal blog with attributes for blog name, posts, and a method to add a new post.",
    "code": "```rust\nstruct Blog {\n    name: String,\n    posts: Vec<String>,\n}\n\nimpl Blog {\n    fn new(name: String) -> Self {\n        Blog {\n            name,\n            posts: Vec::new(),\n        }\n    }\n\n    fn add_post(&mut self, post: String) {\n        self.posts.push(post);\n    }\n}\n\nfn main() {\n    let mut my_blog = Blog::new(String::from(\"My Personal Blog\"));\n    my_blog.add_post(String::from(\"First post!\"));\n}\n```"
  },
  {
    "task": "Implement a class for a mobile application with properties for app name, version, and developer, and a method to update the version.",
    "code": "```rust\nstruct MobileApp {\n    app_name: String,\n    version: String,\n    developer: String,\n}\n\nimpl MobileApp {\n    fn new(app_name: &str, version: &str, developer: &str) -> Self {\n        MobileApp {\n            app_name: app_name.to_string(),\n            version: version.to_string(),\n            developer: developer.to_string(),\n        }\n    }\n\n    fn update_version(&mut self, new_version: &str) {\n        self.version = new_version.to_string();\n    }\n}\n\nfn main() {\n    let mut app = MobileApp::new(\"ExampleApp\", \"1.0\", \"Dev Company\");\n    app.update_version(\"2.0\");\n}\n```"
  },
  {
    "task": "Develop a class for a language translator with attributes for source language, target language, and translation method, and a method to translate a text.",
    "code": "```rust\nstruct LanguageTranslator {\n    source_language: String,\n    target_language: String,\n    translation_method: String,\n}\n\nimpl LanguageTranslator {\n    fn new(source_language: &str, target_language: &str, translation_method: &str) -> LanguageTranslator {\n        LanguageTranslator {\n            source_language: source_language.to_string(),\n            target_language: target_language.to_string(),\n            translation_method: translation_method.to_string(),\n        }\n    }\n\n    fn translate(&self, text: &str) -> String {\n        // Placeholder for translation logic\n        format!(\"Translated '{}' from {} to {} using {}\", text, self.source_language, self.target_language, self.translation_method)\n    }\n}\n```"
  },
  {
    "task": "Formulate a class for a culinary school with properties for school name, courses offered, and a method to add a new course.",
    "code": "```rust\nstruct CulinarySchool {\n    school_name: String,\n    courses_offered: Vec<String>,\n}\n\nimpl CulinarySchool {\n    fn new(school_name: String) -> Self {\n        CulinarySchool {\n            school_name,\n            courses_offered: Vec::new(),\n        }\n    }\n\n    fn add_course(&mut self, course: String) {\n        self.courses_offered.push(course);\n    }\n}\n\nfn main() {\n    let mut school = CulinarySchool::new(String::from(\"Gourmet Academy\"));\n    school.add_course(String::from(\"Baking Basics\"));\n}\n```"
  },
  {
    "task": "Construct a class for a musical band with attributes for band name, members, and genre, and a method to add a new member.",
    "code": "```rust\nstruct Band {\n    name: String,\n    members: Vec<String>,\n    genre: String,\n}\n\nimpl Band {\n    fn new(name: String, genre: String) -> Self {\n        Band {\n            name,\n            members: Vec::new(),\n            genre,\n        }\n    }\n\n    fn add_member(&mut self, member: String) {\n        self.members.push(member);\n    }\n}\n```"
  },
  {
    "task": "Create a class for a television series with properties for series title, episodes, and network, and a method to add a new episode.",
    "code": "```rust\nstruct TelevisionSeries {\n    title: String,\n    episodes: Vec<String>,\n    network: String,\n}\n\nimpl TelevisionSeries {\n    fn new(title: String, network: String) -> Self {\n        Self {\n            title,\n            episodes: Vec::new(),\n            network,\n        }\n    }\n\n    fn add_episode(&mut self, episode: String) {\n        self.episodes.push(episode);\n    }\n}\n```"
  },
  {
    "task": "Design a class for a wildlife reserve with attributes for reserve name, species protected, and area size, and a method to expand the area.",
    "code": "```rust\nstruct WildlifeReserve {\n    reserve_name: String,\n    species_protected: Vec<String>,\n    area_size: f64,\n}\n\nimpl WildlifeReserve {\n    fn new(reserve_name: String, species_protected: Vec<String>, area_size: f64) -> Self {\n        WildlifeReserve {\n            reserve_name,\n            species_protected,\n            area_size,\n        }\n    }\n\n    fn expand_area(&mut self, additional_area: f64) {\n        self.area_size += additional_area;\n    }\n}\n```"
  },
  {
    "task": "Build a class for a luxury car with properties for brand, model, and price, and a method to update the price.",
    "code": "```rust\nstruct LuxuryCar {\n    brand: String,\n    model: String,\n    price: f64,\n}\n\nimpl LuxuryCar {\n    fn new(brand: &str, model: &str, price: f64) -> Self {\n        Self {\n            brand: brand.to_string(),\n            model: model.to_string(),\n            price,\n        }\n    }\n\n    fn update_price(&mut self, new_price: f64) {\n        self.price = new_price;\n    }\n}\n\nfn main() {\n    let mut car = LuxuryCar::new(\"Mercedes\", \"S-Class\", 100000.0);\n    car.update_price(105000.0);\n}\n```"
  },
  {
    "task": "Implement a class for a scientific journal with attributes for journal name, articles, and impact factor, and a method to add a new article.",
    "code": "```rust\nstruct ScientificJournal {\n    journal_name: String,\n    articles: Vec<String>,\n    impact_factor: f64,\n}\n\nimpl ScientificJournal {\n    fn new(journal_name: String, impact_factor: f64) -> Self {\n        Self {\n            journal_name,\n            articles: Vec::new(),\n            impact_factor,\n        }\n    }\n\n    fn add_article(&mut self, article: String) {\n        self.articles.push(article);\n    }\n}\n\nfn main() {\n    let mut journal = ScientificJournal::new(String::from(\"Nature\"), 42.8);\n    journal.add_article(String::from(\"New Discoveries in Quantum Physics\"));\n}\n```"
  },
  {
    "task": "Develop a class for a historical monument with properties for monument name, location, and year established, and a method to update the location.",
    "code": "```rust\nstruct HistoricalMonument {\n    name: String,\n    location: String,\n    year_established: u32,\n}\n\nimpl HistoricalMonument {\n    fn new(name: String, location: String, year_established: u32) -> Self {\n        HistoricalMonument {\n            name,\n            location,\n            year_established,\n        }\n    }\n\n    fn update_location(&mut self, new_location: String) {\n        self.location = new_location;\n    }\n}\n```"
  },
  {
    "task": "Formulate a class for an educational course with attributes for course title, instructor, and syllabus, and a method to update the syllabus.",
    "code": "```rust\nstruct Course {\n    title: String,\n    instructor: String,\n    syllabus: String,\n}\n\nimpl Course {\n    fn new(title: &str, instructor: &str, syllabus: &str) -> Self {\n        Self {\n            title: title.to_string(),\n            instructor: instructor.to_string(),\n            syllabus: syllabus.to_string(),\n        }\n    }\n\n    fn update_syllabus(&mut self, new_syllabus: &str) {\n        self.syllabus = new_syllabus.to_string();\n    }\n}\n```"
  },
  {
    "task": "Construct a class for a city park with properties for park name, facilities, and opening hours, and a method to add a new facility.",
    "code": "```rust\nstruct CityPark {\n    park_name: String,\n    facilities: Vec<String>,\n    opening_hours: String,\n}\n\nimpl CityPark {\n    fn new(park_name: &str, opening_hours: &str) -> Self {\n        CityPark {\n            park_name: park_name.to_string(),\n            facilities: Vec::new(),\n            opening_hours: opening_hours.to_string(),\n        }\n    }\n\n    fn add_facility(&mut self, facility: &str) {\n        self.facilities.push(facility.to_string());\n    }\n}\n\nfn main() {\n    let mut park = CityPark::new(\"Central Park\", \"6 AM - 9 PM\");\n    park.add_facility(\"Playground\");\n    park.add_facility(\"Restroom\");\n}\n```"
  },
  {
    "task": "Create a class for a fitness class with attributes for class name, instructor, and schedule, and a method to update the schedule.",
    "code": "```rust\nstruct FitnessClass {\n    class_name: String,\n    instructor: String,\n    schedule: String,\n}\n\nimpl FitnessClass {\n    fn new(class_name: String, instructor: String, schedule: String) -> Self {\n        FitnessClass {\n            class_name,\n            instructor,\n            schedule,\n        }\n    }\n\n    fn update_schedule(&mut self, new_schedule: String) {\n        self.schedule = new_schedule;\n    }\n}\n```"
  },
  {
    "task": "Design a class for a virtual reality game with properties for game name, platform, and VR compatibility, and a method to change the platform.",
    "code": "```rust\nstruct VRGame {\n    game_name: String,\n    platform: String,\n    vr_compatible: bool,\n}\n\nimpl VRGame {\n    fn new(game_name: String, platform: String, vr_compatible: bool) -> Self {\n        VRGame {\n            game_name,\n            platform,\n            vr_compatible,\n        }\n    }\n\n    fn change_platform(&mut self, new_platform: String) {\n        self.platform = new_platform;\n    }\n}\n\nfn main() {\n    let mut game = VRGame::new(\"Virtual Adventure\".to_string(), \"PC\".to_string(), true);\n    game.change_platform(\"Console\".to_string());\n}\n```"
  },
  {
    "task": "Build a class for a mountain range with attributes for range name, highest peak, and countries covered, and a method to add a new peak.",
    "code": "```rust\nstruct MountainRange {\n    range_name: String,\n    highest_peak: String,\n    countries_covered: Vec<String>,\n    peaks: Vec<String>,\n}\n\nimpl MountainRange {\n    fn new(range_name: &str, highest_peak: &str, countries_covered: Vec<String>) -> Self {\n        MountainRange {\n            range_name: range_name.to_string(),\n            highest_peak: highest_peak.to_string(),\n            countries_covered,\n            peaks: vec![highest_peak.to_string()],\n        }\n    }\n\n    fn add_peak(&mut self, peak_name: &str) {\n        self.peaks.push(peak_name.to_string());\n    }\n}\n```"
  },
  {
    "task": "Implement a class for a documentary film with properties for title, director, and subject, and a method to update the subject.",
    "code": "```rust\nstruct DocumentaryFilm {\n    title: String,\n    director: String,\n    subject: String,\n}\n\nimpl DocumentaryFilm {\n    fn new(title: String, director: String, subject: String) -> Self {\n        DocumentaryFilm {\n            title,\n            director,\n            subject,\n        }\n    }\n\n    fn update_subject(&mut self, new_subject: String) {\n        self.subject = new_subject;\n    }\n}\n```"
  },
  {
    "task": "Develop a class for a classical music composition with attributes for composition name, composer, and duration, and a method to change the duration.",
    "code": "```rust\nstruct ClassicalComposition {\n    composition_name: String,\n    composer: String,\n    duration: u32, // Duration in seconds\n}\n\nimpl ClassicalComposition {\n    fn new(composition_name: &str, composer: &str, duration: u32) -> Self {\n        ClassicalComposition {\n            composition_name: composition_name.to_string(),\n            composer: composer.to_string(),\n            duration,\n        }\n    }\n\n    fn change_duration(&mut self, new_duration: u32) {\n        self.duration = new_duration;\n    }\n}\n\nfn main() {\n    let mut composition = ClassicalComposition::new(\"Symphony No. 5\", \"Beethoven\", 1800);\n    composition.change_duration(1820);\n}\n```"
  },
  {
    "task": "Formulate a class for a public library with properties for library name, books available, and membership, and a method to add a new book.",
    "code": "```rust\nstruct Library {\n    name: String,\n    books_available: Vec<String>,\n    members: Vec<String>,\n}\n\nimpl Library {\n    fn new(name: String) -> Self {\n        Library {\n            name,\n            books_available: Vec::new(),\n            members: Vec::new(),\n        }\n    }\n\n    fn add_book(&mut self, book: String) {\n        self.books_available.push(book);\n    }\n}\n```"
  },
  {
    "task": "Construct a class for a tech startup with attributes for startup name, founder, and funding, and a method to raise additional funding.",
    "code": "```rust\nstruct TechStartup {\n    name: String,\n    founder: String,\n    funding: f64,\n}\n\nimpl TechStartup {\n    fn new(name: &str, founder: &str, funding: f64) -> Self {\n        TechStartup {\n            name: name.to_string(),\n            founder: founder.to_string(),\n            funding,\n        }\n    }\n\n    fn raise_funding(&mut self, amount: f64) {\n        self.funding += amount;\n    }\n}\n\nfn main() {\n    let mut startup = TechStartup::new(\"InnovateTech\", \"Alice Smith\", 500000.0);\n    startup.raise_funding(200000.0);\n    println!(\"Funding after raise: {}\", startup.funding);\n}\n```"
  }
]