[
  {
    "task": "Create a function that calculates the sum of two numbers and returns the result.",
    "code": "```rust\nfn sum(a: i32, b: i32) -> i32 {\n    a + b\n}\n```"
  },
  {
    "task": "Design a function that takes a string and returns its length.",
    "code": "```rust\nfn string_length(s: &str) -> usize {\n    s.len()\n}\n```"
  },
  {
    "task": "Write a function that checks if a number is prime and returns a boolean value.",
    "code": "```rust\nfn is_prime(n: u32) -> bool {\n    if n <= 1 {\n        return false;\n    }\n    if n <= 3 {\n        return true;\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false;\n    }\n    let mut i = 5;\n    while i * i <= n {\n        if n % i == 0 || n % (i + 2) == 0 {\n            return false;\n        }\n        i += 6;\n    }\n    true\n}\n```"
  },
  {
    "task": "Implement a function that returns the highest value in a list of integers.",
    "code": "```rust\nfn highest_value(numbers: &[i32]) -> Option<i32> {\n    numbers.iter().cloned().max()\n}\n\nfn main() {\n    let numbers = vec![3, 5, 7, 2, 8, 6];\n    if let Some(max_value) = highest_value(&numbers) {\n        println!(\"The highest value is: {}\", max_value);\n    } else {\n        println!(\"The list is empty.\");\n    }\n}\n```"
  },
  {
    "task": "Create a function that accepts a list of words and returns the longest word.",
    "code": "```rust\nfn longest_word(words: &[&str]) -> &str {\n    words.iter().max_by_key(|word| word.len()).unwrap_or(\"\")\n}\n\nfn main() {\n    let words = vec![\"rust\", \"programming\", \"task\", \"functionality\"];\n    let longest = longest_word(&words);\n    println!(\"The longest word is: {}\", longest);\n}\n```"
  },
  {
    "task": "Write a function that takes a temperature in Celsius and returns the equivalent in Fahrenheit.",
    "code": "```rust\nfn celsius_to_fahrenheit(celsius: f64) -> f64 {\n    celsius * 9.0 / 5.0 + 32.0\n}\n\nfn main() {\n    let celsius = 25.0;\n    let fahrenheit = celsius_to_fahrenheit(celsius);\n    println!(\"{}\u00b0C is {}\u00b0F\", celsius, fahrenheit);\n}\n```"
  },
  {
    "task": "Develop a function that returns the factorial of a given number.",
    "code": "```rust\nfn factorial(n: u32) -> u32 {\n    if n == 0 {\n        1\n    } else {\n        n * factorial(n - 1)\n    }\n}\n\nfn main() {\n    let number = 5;\n    let result = factorial(number);\n    println!(\"The factorial of {} is {}\", number, result);\n}\n```"
  },
  {
    "task": "Implement a function that receives a date and returns the day of the week.",
    "code": "```rust\nuse chrono::{NaiveDate, Weekday};\n\nfn day_of_week(date: &str) -> Result<Weekday, chrono::ParseError> {\n    let date = NaiveDate::parse_from_str(date, \"%Y-%m-%d\")?;\n    Ok(date.weekday())\n}\n\nfn main() {\n    match day_of_week(\"2023-10-10\") {\n        Ok(weekday) => println!(\"The day of the week is: {:?}\", weekday),\n        Err(e) => println!(\"Error parsing date: {}\", e),\n    }\n}\n```"
  },
  {
    "task": "Write a function that calculates the area of a circle given its radius and returns the value.",
    "code": "```rust\nfn area_of_circle(radius: f64) -> f64 {\n    std::f64::consts::PI * radius * radius\n}\n\nfn main() {\n    let radius = 5.0;\n    let area = area_of_circle(radius);\n    println!(\"The area of the circle is: {}\", area);\n}\n```"
  },
  {
    "task": "Create a function that converts a string to uppercase and returns the modified string.",
    "code": "```rust\nfn to_uppercase(input: &str) -> String {\n    input.to_uppercase()\n}\n\nfn main() {\n    let result = to_uppercase(\"hello\");\n    println!(\"{}\", result);\n}\n```"
  },
  {
    "task": "Design a function that returns the reverse of a given list.",
    "code": "```rust\nfn reverse_list<T: Clone>(list: &[T]) -> Vec<T> {\n    let mut reversed = list.to_vec();\n    reversed.reverse();\n    reversed\n}\n```"
  },
  {
    "task": "Implement a function that accepts a string and returns a dictionary with character frequencies.",
    "code": "```rust\nuse std::collections::HashMap;\n\nfn char_frequencies(s: &str) -> HashMap<char, usize> {\n    let mut frequencies = HashMap::new();\n    for c in s.chars() {\n        *frequencies.entry(c).or_insert(0) += 1;\n    }\n    frequencies\n}\n\nfn main() {\n    let s = \"example\";\n    let frequencies = char_frequencies(s);\n    println!(\"{:?}\", frequencies);\n}\n```"
  },
  {
    "task": "Write a function that returns the first non-repeating character in a string.",
    "code": "```rust\nfn first_non_repeating_char(s: &str) -> Option<char> {\n    let mut counts = std::collections::HashMap::new();\n\n    for ch in s.chars() {\n        *counts.entry(ch).or_insert(0) += 1;\n    }\n\n    for ch in s.chars() {\n        if let Some(&count) = counts.get(&ch) {\n            if count == 1 {\n                return Some(ch);\n            }\n        }\n    }\n\n    None\n}\n```"
  },
  {
    "task": "Create a function that takes a list of numbers and returns a new list with only even numbers.",
    "code": "```rust\nfn filter_even_numbers(numbers: &[i32]) -> Vec<i32> {\n    numbers.iter().filter(|&n| n % 2 == 0).cloned().collect()\n}\n\nfn main() {\n    let numbers = vec![1, 2, 3, 4, 5, 6];\n    let even_numbers = filter_even_numbers(&numbers);\n    println!(\"{:?}\", even_numbers);\n}\n```"
  },
  {
    "task": "Develop a function that receives a sentence and returns the word count.",
    "code": "```rust\nfn word_count(sentence: &str) -> usize {\n    sentence.split_whitespace().count()\n}\n\nfn main() {\n    let sentence = \"Develop a function that receives a sentence and returns the word count.\";\n    let count = word_count(sentence);\n    println!(\"The sentence has {} words.\", count);\n}\n```"
  },
  {
    "task": "Implement a function that returns the smallest element in an array.",
    "code": "```rust\nfn smallest_element(arr: &[i32]) -> Option<i32> {\n    arr.iter().cloned().min()\n}\n\nfn main() {\n    let numbers = [3, 1, 4, 1, 5, 9, 2, 6, 5];\n    if let Some(min) = smallest_element(&numbers) {\n        println!(\"The smallest element is {}\", min);\n    } else {\n        println!(\"The array is empty.\");\n    }\n}\n```"
  },
  {
    "task": "Write a function that takes two strings and returns true if they are anagrams.",
    "code": "```rust\nfn are_anagrams(s1: &str, s2: &str) -> bool {\n    let mut chars1: Vec<char> = s1.chars().collect();\n    let mut chars2: Vec<char> = s2.chars().collect();\n    chars1.sort_unstable();\n    chars2.sort_unstable();\n    chars1 == chars2\n}\n```"
  },
  {
    "task": "Create a function that accepts an integer and returns a list of its divisors.",
    "code": "```rust\nfn divisors(n: i32) -> Vec<i32> {\n    (1..=n).filter(|&x| n % x == 0).collect()\n}\n```"
  },
  {
    "task": "Design a function that returns the square root of a given number.",
    "code": "```rust\nfn square_root(num: f64) -> f64 {\n    num.sqrt()\n}\n\nfn main() {\n    let number = 9.0;\n    let result = square_root(number);\n    println!(\"The square root of {} is {}\", number, result);\n}\n```"
  },
  {
    "task": "Implement a function that accepts a list and returns it sorted in ascending order.",
    "code": "```rust\nfn sort_list(mut list: Vec<i32>) -> Vec<i32> {\n    list.sort();\n    list\n}\n\nfn main() {\n    let numbers = vec![3, 1, 4, 5, 2];\n    let sorted_numbers = sort_list(numbers);\n    println!(\"{:?}\", sorted_numbers);\n}\n```"
  },
  {
    "task": "Write a function that checks whether a given year is a leap year and returns a boolean.",
    "code": "```rust\nfn is_leap_year(year: i32) -> bool {\n    (year % 4 == 0 && year % 100 != 0) || year % 400 == 0\n}\n```"
  },
  {
    "task": "Create a function that receives a list of numbers and returns their average.",
    "code": "```rust\nfn average(numbers: &[f64]) -> f64 {\n    let sum: f64 = numbers.iter().sum();\n    sum / numbers.len() as f64\n}\n```"
  },
  {
    "task": "Develop a function that returns the nth Fibonacci number.",
    "code": "```rust\nfn fibonacci(n: u32) -> u32 {\n    match n {\n        0 => 0,\n        1 => 1,\n        _ => fibonacci(n - 1) + fibonacci(n - 2),\n    }\n}\n\nfn main() {\n    let n = 10;\n    let result = fibonacci(n);\n    println!(\"The {}th Fibonacci number is {}\", n, result);\n}\n```"
  },
  {
    "task": "Implement a function that accepts a string and returns it with vowels removed.",
    "code": "```rust\nfn remove_vowels(input: &str) -> String {\n    input.chars().filter(|c| !\"aeiouAEIOU\".contains(*c)).collect()\n}\n\nfn main() {\n    let result = remove_vowels(\"Hello, World!\");\n    println!(\"{}\", result);\n}\n```"
  },
  {
    "task": "Write a function that takes two dates and returns the number of days between them.",
    "code": "```rust\nuse chrono::{NaiveDate, Duration};\n\nfn days_between(start_date: NaiveDate, end_date: NaiveDate) -> i64 {\n    (end_date - start_date).num_days()\n}\n\nfn main() {\n    let date1 = NaiveDate::from_ymd(2023, 10, 1);\n    let date2 = NaiveDate::from_ymd(2023, 10, 15);\n    let days = days_between(date1, date2);\n    println!(\"Number of days between: {}\", days);\n}\n```"
  },
  {
    "task": "Create a function that returns the last element of a list.",
    "code": "```rust\nfn last_element<T: Clone>(list: &[T]) -> Option<T> {\n    list.last().cloned()\n}\n\nfn main() {\n    let numbers = vec![1, 2, 3, 4, 5];\n    if let Some(last) = last_element(&numbers) {\n        println!(\"The last element is: {}\", last);\n    } else {\n        println!(\"The list is empty.\");\n    }\n}\n```"
  },
  {
    "task": "Design a function that calculates the GCD of two numbers and returns it.",
    "code": "```rust\nfn gcd(a: u32, b: u32) -> u32 {\n    if b == 0 {\n        a\n    } else {\n        gcd(b, a % b)\n    }\n}\n\nfn main() {\n    let result = gcd(48, 18);\n    println!(\"The GCD is: {}\", result);\n}\n```"
  },
  {
    "task": "Implement a function that takes a list and returns a tuple with the min and max values.",
    "code": "```rust\nfn min_max(values: &[i32]) -> Option<(i32, i32)> {\n    if values.is_empty() {\n        None\n    } else {\n        let min = values.iter().min().unwrap();\n        let max = values.iter().max().unwrap();\n        Some((*min, *max))\n    }\n}\n\nfn main() {\n    let numbers = vec![3, 1, 4, 1, 5, 9, 2, 6, 5];\n    match min_max(&numbers) {\n        Some((min, max)) => println!(\"Min: {}, Max: {}\", min, max),\n        None => println!(\"The list is empty.\"),\n    }\n}\n```"
  },
  {
    "task": "Write a function that converts a binary string to its decimal representation and returns it.",
    "code": "```rust\nfn binary_to_decimal(binary: &str) -> Option<u32> {\n    u32::from_str_radix(binary, 2).ok()\n}\n```"
  },
  {
    "task": "Create a function that accepts a dictionary and returns a list of its keys.",
    "code": "```rust\nuse std::collections::HashMap;\n\nfn get_keys<K, V>(dict: HashMap<K, V>) -> Vec<K> \nwhere\n    K: Clone,\n{\n    dict.keys().cloned().collect()\n}\n\nfn main() {\n    let mut dict = HashMap::new();\n    dict.insert(\"key1\", 10);\n    dict.insert(\"key2\", 20);\n    \n    let keys = get_keys(dict);\n    println!(\"{:?}\", keys);\n}\n```"
  },
  {
    "task": "Develop a function that returns the concatenation of two strings.",
    "code": "```rust\nfn concatenate_strings(a: &str, b: &str) -> String {\n    format!(\"{}{}\", a, b)\n}\n\nfn main() {\n    let result = concatenate_strings(\"Hello, \", \"world!\");\n    println!(\"{}\", result);\n}\n```"
  },
  {
    "task": "Implement a function that receives a list and returns a new list with duplicates removed.",
    "code": "```rust\nuse std::collections::HashSet;\n\nfn remove_duplicates<T: Eq + std::hash::Hash + Clone>(list: &[T]) -> Vec<T> {\n    let mut seen = HashSet::new();\n    list.iter().cloned().filter(|item| seen.insert(item.clone())).collect()\n}\n```"
  },
  {
    "task": "Write a function that returns the intersection of two lists.",
    "code": "```rust\nuse std::collections::HashSet;\n\nfn intersection<T: Clone + std::cmp::Eq + std::hash::Hash>(list1: &[T], list2: &[T]) -> Vec<T> {\n    let set1: HashSet<_> = list1.iter().cloned().collect();\n    let set2: HashSet<_> = list2.iter().cloned().collect();\n    set1.intersection(&set2).cloned().collect()\n}\n\nfn main() {\n    let list1 = vec![1, 2, 3, 4];\n    let list2 = vec![3, 4, 5, 6];\n    let result = intersection(&list1, &list2);\n    println!(\"{:?}\", result);\n}\n```"
  },
  {
    "task": "Create a function that takes an integer and returns whether it is even or odd as a string.",
    "code": "```rust\nfn even_or_odd(n: i32) -> &'static str {\n    if n % 2 == 0 {\n        \"even\"\n    } else {\n        \"odd\"\n    }\n}\n```"
  },
  {
    "task": "Design a function that returns the number of vowels in a given string.",
    "code": "```rust\nfn count_vowels(s: &str) -> usize {\n    s.chars().filter(|c| \"aeiouAEIOU\".contains(*c)).count()\n}\n\nfn main() {\n    let input = \"Hello, World!\";\n    let vowel_count = count_vowels(input);\n    println!(\"Number of vowels: {}\", vowel_count);\n}\n```"
  },
  {
    "task": "Implement a function that counts the occurrences of a substring within a string and returns it.",
    "code": "```rust\nfn count_substring_occurrences(text: &str, sub: &str) -> usize {\n    text.matches(sub).count()\n}\n\nfn main() {\n    let text = \"hello, hello, hello\";\n    let sub = \"hello\";\n    let count = count_substring_occurrences(text, sub);\n    println!(\"The substring '{}' occurs {} times.\", sub, count);\n}\n```"
  },
  {
    "task": "Write a function that accepts a list of numbers and returns them sorted in descending order.",
    "code": "```rust\nfn sort_descending(numbers: Vec<i32>) -> Vec<i32> {\n    let mut sorted_numbers = numbers.clone();\n    sorted_numbers.sort_by(|a, b| b.cmp(a));\n    sorted_numbers\n}\n```"
  },
  {
    "task": "Create a function that returns the median of a list of numbers.",
    "code": "```rust\nfn median(numbers: &mut [f64]) -> Option<f64> {\n    let len = numbers.len();\n    if len == 0 {\n        return None;\n    }\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n    if len % 2 == 0 {\n        Some((numbers[len / 2 - 1] + numbers[len / 2]) / 2.0)\n    } else {\n        Some(numbers[len / 2])\n    }\n}\n\nfn main() {\n    let mut numbers = vec![3.0, 1.0, 4.0, 1.5, 2.0];\n    match median(&mut numbers) {\n        Some(med) => println!(\"The median is {}\", med),\n        None => println!(\"The list is empty\"),\n    }\n}\n```"
  },
  {
    "task": "Develop a function that receives a sentence and returns it with words in reverse order.",
    "code": "```rust\nfn reverse_words(sentence: &str) -> String {\n    sentence.split_whitespace().rev().collect::<Vec<&str>>().join(\" \")\n}\n\nfn main() {\n    let sentence = \"Develop a function that receives a sentence\";\n    let reversed = reverse_words(sentence);\n    println!(\"{}\", reversed);\n}\n```"
  },
  {
    "task": "Implement a function that returns the sum of all elements in a matrix.",
    "code": "```rust\nfn sum_matrix(matrix: &Vec<Vec<i32>>) -> i32 {\n    matrix.iter().flatten().sum()\n}\n\nfn main() {\n    let matrix = vec![\n        vec![1, 2, 3],\n        vec![4, 5, 6],\n        vec![7, 8, 9],\n    ];\n    let sum = sum_matrix(&matrix);\n    println!(\"The sum of all elements in the matrix is: {}\", sum);\n}\n```"
  },
  {
    "task": "Write a function that accepts a string and returns true if it is a palindrome.",
    "code": "```rust\nfn is_palindrome(s: &str) -> bool {\n    let s: Vec<char> = s.chars().collect();\n    s.iter().eq(s.iter().rev())\n}\n\nfn main() {\n    let word = \"racecar\";\n    println!(\"{}\", is_palindrome(word)); // true\n}\n```"
  },
  {
    "task": "Create a function that takes a number and returns its binary representation as a string.",
    "code": "```rust\nfn to_binary_string(n: u32) -> String {\n    format!(\"{:b}\", n)\n}\n\nfn main() {\n    let number = 42;\n    let binary_representation = to_binary_string(number);\n    println!(\"Binary representation of {} is {}\", number, binary_representation);\n}\n```"
  },
  {
    "task": "Design a function that returns the number of words in a paragraph.",
    "code": "```rust\nfn count_words(paragraph: &str) -> usize {\n    paragraph.split_whitespace().count()\n}\n\nfn main() {\n    let paragraph = \"This is an example paragraph with several words.\";\n    let word_count = count_words(paragraph);\n    println!(\"The paragraph contains {} words.\", word_count);\n}\n```"
  },
  {
    "task": "Implement a function that accepts a list and returns the index of its maximum element.",
    "code": "```rust\nfn index_of_max_element(list: &[i32]) -> Option<usize> {\n    if list.is_empty() {\n        return None;\n    }\n    let mut max_index = 0;\n    for (i, &value) in list.iter().enumerate() {\n        if value > list[max_index] {\n            max_index = i;\n        }\n    }\n    Some(max_index)\n}\n```"
  },
  {
    "task": "Write a function that takes a list of grades and returns the highest grade.",
    "code": "```rust\nfn highest_grade(grades: &[i32]) -> Option<i32> {\n    grades.iter().cloned().max()\n}\n\nfn main() {\n    let grades = vec![88, 92, 77, 90, 95];\n    if let Some(max_grade) = highest_grade(&grades) {\n        println!(\"The highest grade is: {}\", max_grade);\n    } else {\n        println!(\"The list of grades is empty.\");\n    }\n}\n```"
  },
  {
    "task": "Create a function that returns the product of all positive integers up to a given number.",
    "code": "```rust\nfn product_of_integers(n: u32) -> u32 {\n    (1..=n).product()\n}\n\nfn main() {\n    let result = product_of_integers(5);\n    println!(\"{}\", result);\n}\n```"
  },
  {
    "task": "Develop a function that receives a string and returns a new string with spaces replaced by hyphens.",
    "code": "```rust\nfn replace_spaces_with_hyphens(input: &str) -> String {\n    input.replace(' ', \"-\")\n}\n\nfn main() {\n    let original = \"Hello World from Rust\";\n    let modified = replace_spaces_with_hyphens(&original);\n    println!(\"{}\", modified);\n}\n```"
  },
  {
    "task": "Implement a function that takes a list of integers and returns their sum.",
    "code": "```rust\nfn sum_of_integers(numbers: &[i32]) -> i32 {\n    numbers.iter().sum()\n}\n\nfn main() {\n    let numbers = vec![1, 2, 3, 4, 5];\n    let result = sum_of_integers(&numbers);\n    println!(\"The sum is: {}\", result);\n}\n```"
  },
  {
    "task": "Write a function that checks if a string is a valid email address and returns a boolean.",
    "code": "```rust\nfn is_valid_email(email: &str) -> bool {\n    let email_regex = regex::Regex::new(r\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$\").unwrap();\n    email_regex.is_match(email)\n}\n\nfn main() {\n    let email = \"example@example.com\";\n    println!(\"Is valid email: {}\", is_valid_email(email));\n}\n```"
  },
  {
    "task": "Create a function that returns the decimal equivalent of a hexadecimal string.",
    "code": "```rust\nfn hex_to_decimal(hex: &str) -> Result<u32, std::num::ParseIntError> {\n    u32::from_str_radix(hex, 16)\n}\n```"
  },
  {
    "task": "Design a function that calculates and returns the body mass index based on height and weight.",
    "code": "```rust\nfn calculate_bmi(weight_kg: f64, height_m: f64) -> f64 {\n    weight_kg / (height_m * height_m)\n}\n\nfn main() {\n    let weight = 70.0; // example weight in kilograms\n    let height = 1.75; // example height in meters\n    let bmi = calculate_bmi(weight, height);\n    println!(\"The BMI is: {:.2}\", bmi);\n}\n```"
  },
  {
    "task": "Implement a function that returns the initials of a person's name given a full name.",
    "code": "```rust\nfn get_initials(full_name: &str) -> String {\n    full_name\n        .split_whitespace()\n        .filter_map(|name| name.chars().next())\n        .collect::<String>()\n}\n\nfn main() {\n    let full_name = \"John Doe\";\n    let initials = get_initials(full_name);\n    println!(\"Initials: {}\", initials);\n}\n```"
  },
  {
    "task": "Write a function that accepts a list of names and returns them sorted alphabetically.",
    "code": "```rust\nfn sort_names(mut names: Vec<String>) -> Vec<String> {\n    names.sort();\n    names\n}\n\nfn main() {\n    let names = vec![\"Charlie\".to_string(), \"Alice\".to_string(), \"Bob\".to_string()];\n    let sorted_names = sort_names(names);\n    println!(\"{:?}\", sorted_names);\n}\n```"
  },
  {
    "task": "Create a function that takes a list of integers and returns a list of their squares.",
    "code": "```rust\nfn square_list(numbers: &[i32]) -> Vec<i32> {\n    numbers.iter().map(|&x| x * x).collect()\n}\n\nfn main() {\n    let numbers = vec![1, 2, 3, 4, 5];\n    let squares = square_list(&numbers);\n    println!(\"{:?}\", squares);\n}\n```"
  },
  {
    "task": "Develop a function that returns the common elements between two sets.",
    "code": "```rust\nuse std::collections::HashSet;\n\nfn common_elements<T: Eq + std::hash::Hash + Clone>(set1: &HashSet<T>, set2: &HashSet<T>) -> HashSet<T> {\n    set1.intersection(set2).cloned().collect()\n}\n\nfn main() {\n    let set1: HashSet<i32> = [1, 2, 3, 4].iter().cloned().collect();\n    let set2: HashSet<i32> = [3, 4, 5, 6].iter().cloned().collect();\n    let common = common_elements(&set1, &set2);\n    println!(\"{:?}\", common);\n}\n```"
  },
  {
    "task": "Implement a function that receives a list of strings and returns the shortest string.",
    "code": "```rust\nfn shortest_string(strings: &[String]) -> Option<&String> {\n    strings.iter().min_by_key(|s| s.len())\n}\n\nfn main() {\n    let strings = vec![\n        String::from(\"apple\"),\n        String::from(\"banana\"),\n        String::from(\"pear\"),\n    ];\n    if let Some(shortest) = shortest_string(&strings) {\n        println!(\"The shortest string is: {}\", shortest);\n    } else {\n        println!(\"The list is empty.\");\n    }\n}\n```"
  },
  {
    "task": "Write a function that returns the sum of digits of a given integer.",
    "code": "```rust\nfn sum_of_digits(n: i32) -> i32 {\n    n.abs().to_string().chars().map(|c| c.to_digit(10).unwrap() as i32).sum()\n}\n\nfn main() {\n    let number = 12345;\n    println!(\"The sum of digits of {} is {}\", number, sum_of_digits(number));\n}\n```"
  },
  {
    "task": "Create a function that takes a matrix and returns its transpose.",
    "code": "```rust\nfn transpose(matrix: Vec<Vec<i32>>) -> Vec<Vec<i32>> {\n    if matrix.is_empty() || matrix[0].is_empty() {\n        return vec![];\n    }\n    let rows = matrix.len();\n    let cols = matrix[0].len();\n    let mut transposed = vec![vec![0; rows]; cols];\n    \n    for i in 0..rows {\n        for j in 0..cols {\n            transposed[j][i] = matrix[i][j];\n        }\n    }\n    \n    transposed\n}\n```"
  },
  {
    "task": "Design a function that returns the percentage of uppercase letters in a string.",
    "code": "```rust\nfn uppercase_percentage(s: &str) -> f64 {\n    let total_chars = s.chars().count();\n    let uppercase_count = s.chars().filter(|c| c.is_uppercase()).count();\n\n    if total_chars == 0 {\n        0.0\n    } else {\n        (uppercase_count as f64 / total_chars as f64) * 100.0\n    }\n}\n\nfn main() {\n    let input = \"Hello World!\";\n    let percentage = uppercase_percentage(input);\n    println!(\"Percentage of uppercase letters: {:.2}%\", percentage);\n}\n```"
  },
  {
    "task": "Implement a function that accepts a string and returns it with each word capitalized.",
    "code": "```rust\nfn capitalize_words(input: &str) -> String {\n    input.split_whitespace()\n         .map(|word| {\n             let mut chars = word.chars();\n             match chars.next() {\n                 None => String::new(),\n                 Some(first) => first.to_uppercase().collect::<String>() + chars.as_str(),\n             }\n         })\n         .collect::<Vec<String>>()\n         .join(\" \")\n}\n\nfn main() {\n    let input = \"hello world from rust\";\n    let result = capitalize_words(input);\n    println!(\"{}\", result);\n}\n```"
  },
  {
    "task": "Write a function that takes a list and returns the difference between the max and min values.",
    "code": "```rust\nfn difference_between_max_and_min(values: &[i32]) -> i32 {\n    if let (Some(min), Some(max)) = (values.iter().min(), values.iter().max()) {\n        max - min\n    } else {\n        0\n    }\n}\n```"
  },
  {
    "task": "Create a function that returns a list containing the first n prime numbers.",
    "code": "```rust\nfn is_prime(num: u32) -> bool {\n    if num <= 1 {\n        return false;\n    }\n    for i in 2..=((num as f64).sqrt() as u32) {\n        if num % i == 0 {\n            return false;\n        }\n    }\n    true\n}\n\nfn first_n_primes(n: usize) -> Vec<u32> {\n    let mut primes = Vec::new();\n    let mut num = 2;\n    while primes.len() < n {\n        if is_prime(num) {\n            primes.push(num);\n        }\n        num += 1;\n    }\n    primes\n}\n```"
  },
  {
    "task": "Develop a function that receives a dictionary and returns a new dictionary with keys and values swapped.",
    "code": "```rust\nuse std::collections::HashMap;\nuse std::hash::Hash;\n\nfn swap_keys_values<K, V>(input: HashMap<K, V>) -> HashMap<V, K>\nwhere\n    K: Eq + Hash + Copy,\n    V: Eq + Hash + Copy,\n{\n    let mut swapped = HashMap::new();\n    for (key, value) in input.iter() {\n        swapped.insert(*value, *key);\n    }\n    swapped\n}\n\nfn main() {\n    let mut original = HashMap::new();\n    original.insert(\"one\", 1);\n    original.insert(\"two\", 2);\n    original.insert(\"three\", 3);\n\n    let swapped = swap_keys_values(original);\n    for (key, value) in swapped.iter() {\n        println!(\"{}: {}\", key, value);\n    }\n}\n```"
  },
  {
    "task": "Implement a function that accepts a string and returns the frequency of each word.",
    "code": "```rust\nuse std::collections::HashMap;\n\nfn word_frequency(s: &str) -> HashMap<String, usize> {\n    let mut frequencies = HashMap::new();\n    for word in s.split_whitespace() {\n        let counter = frequencies.entry(word.to_string()).or_insert(0);\n        *counter += 1;\n    }\n    frequencies\n}\n\nfn main() {\n    let input = \"hello world hello\";\n    let result = word_frequency(input);\n    for (word, count) in result {\n        println!(\"{}: {}\", word, count);\n    }\n}\n```"
  },
  {
    "task": "Write a function that takes two numbers and returns their greatest common divisor.",
    "code": "```rust\nfn greatest_common_divisor(a: u32, b: u32) -> u32 {\n    if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b, a % b)\n    }\n}\n\nfn main() {\n    let num1 = 56;\n    let num2 = 98;\n    let gcd = greatest_common_divisor(num1, num2);\n    println!(\"The greatest common divisor of {} and {} is {}\", num1, num2, gcd);\n}\n```"
  },
  {
    "task": "Create a function that returns the number of consonants in a given string.",
    "code": "```rust\nfn count_consonants(s: &str) -> usize {\n    s.chars()\n        .filter(|c| c.is_alphabetic() && !\"aeiouAEIOU\".contains(*c))\n        .count()\n}\n\nfn main() {\n    let test_string = \"Hello, World!\";\n    let consonants_count = count_consonants(test_string);\n    println!(\"Number of consonants: {}\", consonants_count);\n}\n```"
  },
  {
    "task": "Design a function that checks if a number is a perfect square and returns a boolean.",
    "code": "```rust\nfn is_perfect_square(n: u32) -> bool {\n    let root = (n as f64).sqrt() as u32;\n    root * root == n\n}\n```"
  },
  {
    "task": "Implement a function that takes a list of numbers and returns the mode.",
    "code": "```rust\nuse std::collections::HashMap;\n\nfn mode(numbers: &[i32]) -> Option<i32> {\n    let mut occurrences = HashMap::new();\n    for &number in numbers {\n        *occurrences.entry(number).or_insert(0) += 1;\n    }\n    occurrences.into_iter().max_by_key(|&(_, count)| count).map(|(num, _)| num)\n}\n\nfn main() {\n    let numbers = vec![1, 2, 2, 3, 3, 3, 4];\n    match mode(&numbers) {\n        Some(m) => println!(\"Mode: {}\", m),\n        None => println!(\"No mode found\"),\n    }\n}\n```"
  },
  {
    "task": "Write a function that accepts a string and returns a new string with characters in reverse order.",
    "code": "```rust\nfn reverse_string(input: &str) -> String {\n    input.chars().rev().collect()\n}\n\nfn main() {\n    let original = \"Hello, world!\";\n    let reversed = reverse_string(original);\n    println!(\"{}\", reversed);\n}\n```"
  },
  {
    "task": "Create a function that returns the sum of all even numbers in a list.",
    "code": "```rust\nfn sum_of_evens(numbers: &[i32]) -> i32 {\n    numbers.iter().filter(|&&x| x % 2 == 0).sum()\n}\n\nfn main() {\n    let numbers = vec![1, 2, 3, 4, 5, 6];\n    let sum = sum_of_evens(&numbers);\n    println!(\"Sum of even numbers: {}\", sum);\n}\n```"
  },
  {
    "task": "Develop a function that receives two lists and returns their union.",
    "code": "```rust\nuse std::collections::HashSet;\n\nfn union<T: Clone + std::hash::Hash + Eq>(list1: &[T], list2: &[T]) -> Vec<T> {\n    let set1: HashSet<_> = list1.iter().cloned().collect();\n    let set2: HashSet<_> = list2.iter().cloned().collect();\n    set1.union(&set2).cloned().collect()\n}\n\nfn main() {\n    let list1 = vec![1, 2, 3];\n    let list2 = vec![3, 4, 5];\n    let result = union(&list1, &list2);\n    println!(\"{:?}\", result);\n}\n```"
  },
  {
    "task": "Implement a function that takes a string and returns the number of unique characters.",
    "code": "```rust\nuse std::collections::HashSet;\n\nfn count_unique_characters(s: &str) -> usize {\n    let mut unique_chars = HashSet::new();\n    for c in s.chars() {\n        unique_chars.insert(c);\n    }\n    unique_chars.len()\n}\n\nfn main() {\n    let test_string = \"hello world\";\n    let unique_count = count_unique_characters(test_string);\n    println!(\"Number of unique characters: {}\", unique_count);\n}\n```"
  },
  {
    "task": "Write a function that returns the cube of a given number.",
    "code": "```rust\nfn cube(number: i32) -> i32 {\n    number * number * number\n}\n```"
  },
  {
    "task": "Create a function that calculates the power of a number given a base and exponent and returns the result.",
    "code": "```rust\nfn power(base: f64, exponent: i32) -> f64 {\n    base.powi(exponent)\n}\n\nfn main() {\n    let result = power(2.0, 3);\n    println!(\"2^3 = {}\", result);\n}\n```"
  },
  {
    "task": "Design a function that accepts a URL and returns its domain name.",
    "code": "```rust\nfn extract_domain(url: &str) -> Option<&str> {\n    if let Some(start) = url.find(\"://\") {\n        let start = start + 3; // Skip past \"://\"\n        if let Some(end) = url[start..].find('/') {\n            return Some(&url[start..start + end]);\n        } else {\n            return Some(&url[start..]);\n        }\n    }\n    None\n}\n\nfn main() {\n    let url = \"https://www.example.com/path\";\n    if let Some(domain) = extract_domain(url) {\n        println!(\"Domain: {}\", domain);\n    } else {\n        println!(\"Invalid URL\");\n    }\n}\n```"
  },
  {
    "task": "Implement a function that takes a sentence and returns it with each letter shifted by one in the alphabet.",
    "code": "```rust\nfn shift_sentence(sentence: &str) -> String {\n    sentence.chars().map(|c| {\n        match c {\n            'a'..='y' | 'A'..='Y' => (c as u8 + 1) as char,\n            'z' => 'a',\n            'Z' => 'A',\n            _ => c,\n        }\n    }).collect()\n}\n\nfn main() {\n    let sentence = \"Hello, World!\";\n    let shifted_sentence = shift_sentence(sentence);\n    println!(\"{}\", shifted_sentence);\n}\n```"
  },
  {
    "task": "Write a function that checks if a list is sorted and returns a boolean.",
    "code": "```rust\nfn is_sorted<T: PartialOrd>(list: &[T]) -> bool {\n    list.windows(2).all(|w| w[0] <= w[1])\n}\n\nfn main() {\n    let sorted_list = vec![1, 2, 3, 4, 5];\n    let unsorted_list = vec![5, 3, 4, 1, 2];\n    \n    println!(\"{}\", is_sorted(&sorted_list)); // true\n    println!(\"{}\", is_sorted(&unsorted_list)); // false\n}\n```"
  },
  {
    "task": "Create a function that returns the longest increasing subsequence in a list of numbers.",
    "code": "```rust\nfn longest_increasing_subsequence(nums: Vec<i32>) -> Vec<i32> {\n    if nums.is_empty() {\n        return vec![];\n    }\n\n    let n = nums.len();\n    let mut lengths = vec![1; n];\n    let mut predecessors = vec![None; n];\n\n    for i in 1..n {\n        for j in 0..i {\n            if nums[j] < nums[i] && lengths[j] + 1 > lengths[i] {\n                lengths[i] = lengths[j] + 1;\n                predecessors[i] = Some(j);\n            }\n        }\n    }\n\n    let mut max_length = 0;\n    let mut max_index = 0;\n\n    for i in 0..n {\n        if lengths[i] > max_length {\n            max_length = lengths[i];\n            max_index = i;\n        }\n    }\n\n    let mut lis = vec![];\n    let mut current = Some(max_index);\n\n    while let Some(index) = current {\n        lis.push(nums[index]);\n        current = predecessors[index];\n    }\n\n    lis.reverse();\n    lis\n}\n\nfn main() {\n    let nums = vec![10, 9, 2, 5, 3, 7, 101, 18];\n    let lis = longest_increasing_subsequence(nums);\n    println!(\"{:?}\", lis);\n}\n```"
  },
  {
    "task": "Develop a function that calculates and returns the compound interest for given principal, rate, and time.",
    "code": "```rust\nfn calculate_compound_interest(principal: f64, rate: f64, time: f64) -> f64 {\n    principal * (1.0 + rate).powf(time)\n}\n\nfn main() {\n    let principal = 1000.0;\n    let rate = 0.05;\n    let time = 10.0;\n    \n    let compound_interest = calculate_compound_interest(principal, rate, time);\n    println!(\"Compound Interest: {}\", compound_interest);\n}\n```"
  },
  {
    "task": "Implement a function that accepts two strings and returns their longest common substring.",
    "code": "```rust\nfn longest_common_substring(s1: &str, s2: &str) -> String {\n    let m = s1.len();\n    let n = s2.len();\n    let mut longest = 0;\n    let mut end = 0;\n    \n    let mut dp = vec![vec![0; n + 1]; m + 1];\n\n    for i in 1..=m {\n        for j in 1..=n {\n            if s1.as_bytes()[i - 1] == s2.as_bytes()[j - 1] {\n                dp[i][j] = dp[i - 1][j - 1] + 1;\n                if dp[i][j] > longest {\n                    longest = dp[i][j];\n                    end = i;\n                }\n            }\n        }\n    }\n    \n    s1[end - longest..end].to_string()\n}\n```"
  },
  {
    "task": "Write a function that takes a number and returns true if it is a palindrome.",
    "code": "```rust\nfn is_palindrome(num: i32) -> bool {\n    let s = num.to_string();\n    s.chars().rev().collect::<String>() == s\n}\n\nfn main() {\n    let number = 121;\n    println!(\"{}\", is_palindrome(number)); // Should print true\n}\n```"
  },
  {
    "task": "Create a function that returns the average length of words in a given sentence.",
    "code": "```rust\nfn average_word_length(sentence: &str) -> f64 {\n    let words: Vec<&str> = sentence.split_whitespace().collect();\n    let total_length: usize = words.iter().map(|word| word.len()).sum();\n    total_length as f64 / words.len() as f64\n}\n\nfn main() {\n    let sentence = \"The quick brown fox jumps over the lazy dog\";\n    let average_length = average_word_length(sentence);\n    println!(\"Average word length: {}\", average_length);\n}\n```"
  },
  {
    "task": "Design a function that checks if a string contains only digits and returns a boolean.",
    "code": "```rust\nfn is_only_digits(s: &str) -> bool {\n    s.chars().all(|c| c.is_digit(10))\n}\n```"
  },
  {
    "task": "Implement a function that receives a list of tuples and returns a list of the first elements.",
    "code": "```rust\nfn first_elements<T>(tuples: &[(T,)]) -> Vec<&T> {\n    tuples.iter().map(|(first,)| first).collect()\n}\n\nfn main() {\n    let tuples = vec![(1,), (2,), (3,)];\n    let firsts = first_elements(&tuples);\n    println!(\"{:?}\", firsts);\n}\n```"
  },
  {
    "task": "Write a function that takes a year and returns the Chinese zodiac sign for that year.",
    "code": "```rust\nfn chinese_zodiac(year: i32) -> &'static str {\n    match year % 12 {\n        0 => \"Monkey\",\n        1 => \"Rooster\",\n        2 => \"Dog\",\n        3 => \"Pig\",\n        4 => \"Rat\",\n        5 => \"Ox\",\n        6 => \"Tiger\",\n        7 => \"Rabbit\",\n        8 => \"Dragon\",\n        9 => \"Snake\",\n        10 => \"Horse\",\n        11 => \"Goat\",\n        _ => unreachable!(),\n    }\n}\n\nfn main() {\n    let year = 2023;\n    println!(\"The Chinese zodiac sign for year {} is {}.\", year, chinese_zodiac(year));\n}\n```"
  },
  {
    "task": "Create a function that returns the number of trailing zeros in a factorial of a given number.",
    "code": "```rust\nfn trailing_zeros_of_factorial(n: u64) -> u64 {\n    let mut count = 0;\n    let mut power_of_5 = 5;\n    while n >= power_of_5 {\n        count += n / power_of_5;\n        power_of_5 *= 5;\n    }\n    count\n}\n\nfn main() {\n    let number = 10;\n    let zeros = trailing_zeros_of_factorial(number);\n    println!(\"The number of trailing zeros in {}! is {}\", number, zeros);\n}\n```"
  },
  {
    "task": "Develop a function that accepts a list and returns a new list with elements multiplied by their index.",
    "code": "```rust\nfn multiply_by_index(input: &[i32]) -> Vec<i32> {\n    input.iter().enumerate().map(|(i, &x)| i as i32 * x).collect()\n}\n\nfn main() {\n    let numbers = vec![1, 2, 3, 4, 5];\n    let result = multiply_by_index(&numbers);\n    println!(\"{:?}\", result);\n}\n```"
  },
  {
    "task": "Implement a function that receives a string and returns a dictionary of word lengths.",
    "code": "```rust\nuse std::collections::HashMap;\n\nfn word_lengths(s: &str) -> HashMap<&str, usize> {\n    let mut lengths = HashMap::new();\n    for word in s.split_whitespace() {\n        lengths.insert(word, word.len());\n    }\n    lengths\n}\n\nfn main() {\n    let text = \"hello world from rust\";\n    let result = word_lengths(text);\n    println!(\"{:?}\", result);\n}\n```"
  },
  {
    "task": "Write a function that takes a list of integers and returns a list of numbers that are divisible by 3.",
    "code": "```rust\nfn divisible_by_3(numbers: &[i32]) -> Vec<i32> {\n    numbers.iter().filter(|&&x| x % 3 == 0).cloned().collect()\n}\n```"
  },
  {
    "task": "Create a function that returns the result of a quadratic equation given its coefficients.",
    "code": "```rust\nfn quadratic_result(a: f64, b: f64, c: f64, x: f64) -> f64 {\n    a * x * x + b * x + c\n}\n\nfn main() {\n    let a = 1.0;\n    let b = -3.0;\n    let c = 2.0;\n    let x = 2.0;\n    let result = quadratic_result(a, b, c, x);\n    println!(\"The result of the quadratic equation is: {}\", result);\n}\n```"
  },
  {
    "task": "Design a function that checks if two lists have any elements in common and returns a boolean.",
    "code": "```rust\nfn have_common_elements<T: PartialEq>(list1: &[T], list2: &[T]) -> bool {\n    for item1 in list1 {\n        if list2.contains(item1) {\n            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let list1 = vec![1, 2, 3];\n    let list2 = vec![4, 5, 6];\n    let result = have_common_elements(&list1, &list2);\n    println!(\"Do the lists have common elements? {}\", result);\n}\n```"
  },
  {
    "task": "Implement a function that accepts a list and returns the sum of its elements using recursion.",
    "code": "```rust\nfn sum_recursive(numbers: &[i32]) -> i32 {\n    if numbers.is_empty() {\n        0\n    } else {\n        numbers[0] + sum_recursive(&numbers[1..])\n    }\n}\n\nfn main() {\n    let numbers = vec![1, 2, 3, 4, 5];\n    let result = sum_recursive(&numbers);\n    println!(\"The sum is: {}\", result);\n}\n```"
  },
  {
    "task": "Write a function that takes a list of numbers and returns the variance.",
    "code": "```rust\nfn variance(numbers: &[f64]) -> f64 {\n    let len = numbers.len() as f64;\n    let mean = numbers.iter().sum::<f64>() / len;\n    numbers.iter().map(|&x| (x - mean).powi(2)).sum::<f64>() / len\n}\n\nfn main() {\n    let numbers = vec![1.0, 2.0, 3.0, 4.0, 5.0];\n    let var = variance(&numbers);\n    println!(\"Variance: {}\", var);\n}\n```"
  },
  {
    "task": "Create a function that returns the ASCII value of a given character.",
    "code": "```rust\nfn ascii_value(c: char) -> u32 {\n    c as u32\n}\n\nfn main() {\n    let character = 'A';\n    let value = ascii_value(character);\n    println!(\"The ASCII value of '{}' is {}\", character, value);\n}\n```"
  },
  {
    "task": "Develop a function that takes a number and returns the number of bits required for its binary representation.",
    "code": "```rust\nfn bits_required(n: u32) -> u32 {\n    if n == 0 {\n        1\n    } else {\n        32 - n.leading_zeros()\n    }\n}\n\nfn main() {\n    let number = 5;\n    let result = bits_required(number);\n    println!(\"Bits required for {}: {}\", number, result);\n}\n```"
  }
]