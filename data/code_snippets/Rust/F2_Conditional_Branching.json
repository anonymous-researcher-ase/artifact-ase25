[
  {
    "task": "Write a program that checks if a number is even or odd and outputs the result.",
    "code": "```rust\nuse std::io;\n\nfn main() {\n    let mut input = String::new();\n    println!(\"Enter a number:\");\n    io::stdin().read_line(&mut input).expect(\"Failed to read line\");\n    let number: i32 = input.trim().parse().expect(\"Please enter a valid number\");\n\n    if number % 2 == 0 {\n        println!(\"The number is even.\");\n    } else {\n        println!(\"The number is odd.\");\n    }\n}\n```"
  },
  {
    "task": "Create a function that determines if a given year is a leap year.",
    "code": "```rust\nfn is_leap_year(year: i32) -> bool {\n    if year % 4 == 0 {\n        if year % 100 == 0 {\n            if year % 400 == 0 {\n                true\n            } else {\n                false\n            }\n        } else {\n            true\n        }\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let year = 2024;\n    if is_leap_year(year) {\n        println!(\"{} is a leap year.\", year);\n    } else {\n        println!(\"{} is not a leap year.\", year);\n    }\n}\n```"
  },
  {
    "task": "Develop a script that categorizes an input number as positive, negative, or zero.",
    "code": "```rust\nuse std::io;\n\nfn main() {\n    let mut input = String::new();\n    println!(\"Enter a number:\");\n    io::stdin().read_line(&mut input).expect(\"Failed to read line\");\n    \n    let number: i32 = input.trim().parse().expect(\"Please type a number!\");\n\n    if number > 0 {\n        println!(\"The number is positive.\");\n    } else if number < 0 {\n        println!(\"The number is negative.\");\n    } else {\n        println!(\"The number is zero.\");\n    }\n}\n```"
  },
  {
    "task": "Implement a system that grants access only if a correct password and username are provided.",
    "code": "```rust\nfn main() {\n    let correct_username = \"admin\";\n    let correct_password = \"password123\";\n    \n    let input_username = \"admin\"; // Assume this is provided by user input\n    let input_password = \"password123\"; // Assume this is provided by user input\n\n    if input_username == correct_username && input_password == correct_password {\n        println!(\"Access granted\");\n    } else {\n        println!(\"Access denied\");\n    }\n}\n```"
  },
  {
    "task": "Design a program that outputs 'Fizz' for numbers divisible by 3, 'Buzz' for numbers divisible by 5, and 'FizzBuzz' for numbers divisible by both.",
    "code": "```rust\nfn main() {\n    for i in 1..=100 {\n        match (i % 3, i % 5) {\n            (0, 0) => println!(\"FizzBuzz\"),\n            (0, _) => println!(\"Fizz\"),\n            (_, 0) => println!(\"Buzz\"),\n            _ => println!(\"{}\", i),\n        }\n    }\n}\n```"
  },
  {
    "task": "Write a function to determine if a character is a vowel or a consonant.",
    "code": "```rust\nfn is_vowel_or_consonant(c: char) -> &'static str {\n    match c {\n        'a' | 'e' | 'i' | 'o' | 'u' | 'A' | 'E' | 'I' | 'O' | 'U' => \"vowel\",\n        'a'..='z' | 'A'..='Z' => \"consonant\",\n        _ => \"not a letter\",\n    }\n}\n\nfn main() {\n    let character = 'a';\n    println!(\"The character '{}' is a {}.\", character, is_vowel_or_consonant(character));\n}\n```"
  },
  {
    "task": "Create a program that assigns letter grades based on numerical scores.",
    "code": "```rust\nfn main() {\n    let score = 85; // Example score\n\n    let grade = if score >= 90 {\n        'A'\n    } else if score >= 80 {\n        'B'\n    } else if score >= 70 {\n        'C'\n    } else if score >= 60 {\n        'D'\n    } else {\n        'F'\n    };\n\n    println!(\"The grade for score {} is {}\", score, grade);\n}\n```"
  },
  {
    "task": "Develop a routine that suggests clothing based on the current temperature.",
    "code": "```rust\nfn suggest_clothing(temperature: i32) -> &'static str {\n    if temperature < 0 {\n        \"Wear a heavy winter coat, gloves, and a hat.\"\n    } else if temperature < 10 {\n        \"Wear a coat and a warm hat.\"\n    } else if temperature < 20 {\n        \"Wear a jacket and a sweater.\"\n    } else if temperature < 30 {\n        \"A t-shirt and jeans should be fine.\"\n    } else {\n        \"Wear shorts and a t-shirt.\"\n    }\n}\n\nfn main() {\n    let current_temperature = 15; // Example temperature\n    let suggestion = suggest_clothing(current_temperature);\n    println!(\"Clothing suggestion: {}\", suggestion);\n}\n```"
  },
  {
    "task": "Implement a system that checks if a user is an adult or a minor based on their age.",
    "code": "```rust\nfn check_age(age: u32) -> &'static str {\n    if age >= 18 {\n        \"Adult\"\n    } else {\n        \"Minor\"\n    }\n}\n\nfn main() {\n    let age = 20;\n    println!(\"The user is an: {}\", check_age(age));\n}\n```"
  },
  {
    "task": "Design a program that validates if a triangle can exist based on its side lengths.",
    "code": "```rust\nfn can_triangle_exist(a: f64, b: f64, c: f64) -> bool {\n    if a + b > c && a + c > b && b + c > a {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let side1 = 3.0;\n    let side2 = 4.0;\n    let side3 = 5.0;\n\n    if can_triangle_exist(side1, side2, side3) {\n        println!(\"The triangle can exist.\");\n    } else {\n        println!(\"The triangle cannot exist.\");\n    }\n}\n```"
  },
  {
    "task": "Write a function that determines the largest of three input numbers.",
    "code": "```rust\nfn largest_of_three(a: i32, b: i32, c: i32) -> i32 {\n    if a >= b && a >= c {\n        a\n    } else if b >= a && b >= c {\n        b\n    } else {\n        c\n    }\n}\n```"
  },
  {
    "task": "Create a program that checks if a string is a palindrome.",
    "code": "```rust\nfn is_palindrome(s: &str) -> bool {\n    let s = s.chars().collect::<Vec<char>>();\n    let len = s.len();\n    for i in 0..len / 2 {\n        if s[i] != s[len - i - 1] {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let test_string = \"radar\";\n    if is_palindrome(test_string) {\n        println!(\"\\\"{}\\\" is a palindrome.\", test_string);\n    } else {\n        println!(\"\\\"{}\\\" is not a palindrome.\", test_string);\n    }\n}\n```"
  },
  {
    "task": "Develop a routine that calculates the total cost with a discount applied if applicable.",
    "code": "```rust\nfn calculate_total_cost(price: f64, quantity: u32, discount_threshold: u32, discount_rate: f64) -> f64 {\n    let total_cost = price * quantity as f64;\n    if quantity >= discount_threshold {\n        total_cost * (1.0 - discount_rate)\n    } else {\n        total_cost\n    }\n}\n\nfn main() {\n    let price = 50.0;\n    let quantity = 10;\n    let discount_threshold = 5;\n    let discount_rate = 0.1; // 10% discount\n\n    let total_cost = calculate_total_cost(price, quantity, discount_threshold, discount_rate);\n    println!(\"The total cost is: ${:.2}\", total_cost);\n}\n```"
  },
  {
    "task": "Implement a system that checks if a person is eligible to vote based on age and citizenship.",
    "code": "```rust\nfn is_eligible_to_vote(age: u32, is_citizen: bool) -> bool {\n    if age >= 18 && is_citizen {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let age = 20;\n    let is_citizen = true;\n\n    if is_eligible_to_vote(age, is_citizen) {\n        println!(\"The person is eligible to vote.\");\n    } else {\n        println!(\"The person is not eligible to vote.\");\n    }\n}\n```"
  },
  {
    "task": "Design a function that returns the day of the week given a number from 1 to 7.",
    "code": "```rust\nfn day_of_week(number: u32) -> &'static str {\n    match number {\n        1 => \"Monday\",\n        2 => \"Tuesday\",\n        3 => \"Wednesday\",\n        4 => \"Thursday\",\n        5 => \"Friday\",\n        6 => \"Saturday\",\n        7 => \"Sunday\",\n        _ => \"Invalid\",\n    }\n}\n```"
  },
  {
    "task": "Write a program that determines if a word is found within a given sentence.",
    "code": "```rust\nfn main() {\n    let sentence = \"The quick brown fox jumps over the lazy dog\";\n    let word = \"fox\";\n\n    if sentence.contains(word) {\n        println!(\"The word '{}' is found in the sentence.\", word);\n    } else {\n        println!(\"The word '{}' is not found in the sentence.\", word);\n    }\n}\n```"
  },
  {
    "task": "Create a script that checks if a number is within a specified range.",
    "code": "```rust\nfn main() {\n    let number = 5;\n    let lower_bound = 1;\n    let upper_bound = 10;\n\n    if number >= lower_bound && number <= upper_bound {\n        println!(\"The number {} is within the range {} to {}.\", number, lower_bound, upper_bound);\n    } else {\n        println!(\"The number {} is outside the range {} to {}.\", number, lower_bound, upper_bound);\n    }\n}\n```"
  },
  {
    "task": "Develop a routine to decide if a user input is a valid email address.",
    "code": "```rust\nuse regex::Regex;\nuse std::io;\n\nfn is_valid_email(email: &str) -> bool {\n    let email_regex = Regex::new(r\"^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$\").unwrap();\n    email_regex.is_match(email)\n}\n\nfn main() {\n    println!(\"Please enter an email address:\");\n\n    let mut input = String::new();\n    io::stdin().read_line(&mut input).expect(\"Failed to read line\");\n    let email = input.trim();\n\n    if is_valid_email(email) {\n        println!(\"The email address is valid.\");\n    } else {\n        println!(\"The email address is not valid.\");\n    }\n}\n```"
  },
  {
    "task": "Implement a program that categorizes a number as small, medium, or large.",
    "code": "```rust\nfn categorize_number(number: i32) -> &'static str {\n    if number < 10 {\n        \"small\"\n    } else if number <= 100 {\n        \"medium\"\n    } else {\n        \"large\"\n    }\n}\n\nfn main() {\n    let number = 42;\n    let category = categorize_number(number);\n    println!(\"The number {} is categorized as: {}\", number, category);\n}\n```"
  },
  {
    "task": "Design a function that outputs the season based on the month provided.",
    "code": "```rust\nfn get_season(month: &str) -> &str {\n    match month {\n        \"December\" | \"January\" | \"February\" => \"Winter\",\n        \"March\" | \"April\" | \"May\" => \"Spring\",\n        \"June\" | \"July\" | \"August\" => \"Summer\",\n        \"September\" | \"October\" | \"November\" => \"Autumn\",\n        _ => \"Unknown\",\n    }\n}\n\nfn main() {\n    let month = \"March\";\n    let season = get_season(month);\n    println!(\"The season for {} is {}\", month, season);\n}\n```"
  },
  {
    "task": "Write a program that checks if a string contains only alphabetic characters.",
    "code": "```rust\nfn is_alphabetic(s: &str) -> bool {\n    for c in s.chars() {\n        if !c.is_alphabetic() {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let test_str = \"HelloWorld\";\n    if is_alphabetic(test_str) {\n        println!(\"The string contains only alphabetic characters.\");\n    } else {\n        println!(\"The string contains non-alphabetic characters.\");\n    }\n}\n```"
  },
  {
    "task": "Create a routine that decides the type of triangle based on its angles.",
    "code": "```rust\nfn triangle_type(angle1: u32, angle2: u32, angle3: u32) -> &'static str {\n    if angle1 + angle2 + angle3 != 180 {\n        \"Not a triangle\"\n    } else if angle1 == 90 || angle2 == 90 || angle3 == 90 {\n        \"Right-angled triangle\"\n    } else if angle1 < 90 && angle2 < 90 && angle3 < 90 {\n        \"Acute-angled triangle\"\n    } else {\n        \"Obtuse-angled triangle\"\n    }\n}\n\nfn main() {\n    let angle1 = 60;\n    let angle2 = 60;\n    let angle3 = 60;\n    println!(\"{}\", triangle_type(angle1, angle2, angle3));\n}\n```"
  },
  {
    "task": "Develop a program that suggests a meal based on the time of day.",
    "code": "```rust\nuse std::io;\n\nfn main() {\n    println!(\"Enter the time of day (in 24-hour format, e.g., 14 for 2 PM):\");\n    \n    let mut input = String::new();\n    io::stdin().read_line(&mut input).expect(\"Failed to read line\");\n    \n    let time: u32 = match input.trim().parse() {\n        Ok(num) => num,\n        Err(_) => {\n            println!(\"Please enter a valid number\");\n            return;\n        }\n    };\n\n    if time >= 0 && time < 12 {\n        println!(\"It's breakfast time! How about some pancakes?\");\n    } else if time >= 12 && time < 17 {\n        println!(\"It's lunch time! How about a sandwich?\");\n    } else if time >= 17 && time <= 23 {\n        println!(\"It's dinner time! How about some pasta?\");\n    } else {\n        println!(\"Invalid time entered. Please enter a time between 0 and 23.\");\n    }\n}\n```"
  },
  {
    "task": "Implement a function that determines if a point lies within a circle given its radius.",
    "code": "```rust\nfn is_point_within_circle(x: f64, y: f64, radius: f64) -> bool {\n    let distance_squared = x * x + y * y;\n    distance_squared <= radius * radius\n}\n\nfn main() {\n    let x = 1.0;\n    let y = 2.0;\n    let radius = 5.0;\n    let result = is_point_within_circle(x, y, radius);\n    println!(\"Is the point within the circle? {}\", result);\n}\n```"
  },
  {
    "task": "Design a script that calculates overtime pay based on hours worked.",
    "code": "```rust\nfn calculate_overtime_pay(hours_worked: f64, hourly_rate: f64) -> f64 {\n    let regular_hours = 40.0;\n    let overtime_rate = 1.5;\n    if hours_worked > regular_hours {\n        let overtime_hours = hours_worked - regular_hours;\n        regular_hours * hourly_rate + overtime_hours * hourly_rate * overtime_rate\n    } else {\n        hours_worked * hourly_rate\n    }\n}\n\nfn main() {\n    let hours_worked = 45.0;\n    let hourly_rate = 20.0;\n    let pay = calculate_overtime_pay(hours_worked, hourly_rate);\n    println!(\"Total pay: ${:.2}\", pay);\n}\n```"
  },
  {
    "task": "Write a program that checks if two strings are anagrams of each other.",
    "code": "```rust\nfn are_anagrams(s1: &str, s2: &str) -> bool {\n    if s1.len() != s2.len() {\n        return false;\n    }\n    \n    let mut chars1: Vec<char> = s1.chars().collect();\n    let mut chars2: Vec<char> = s2.chars().collect();\n    \n    chars1.sort_unstable();\n    chars2.sort_unstable();\n    \n    chars1 == chars2\n}\n\nfn main() {\n    let string1 = \"listen\";\n    let string2 = \"silent\";\n\n    if are_anagrams(string1, string2) {\n        println!(\"The strings are anagrams.\");\n    } else {\n        println!(\"The strings are not anagrams.\");\n    }\n}\n```"
  },
  {
    "task": "Create a function that classifies numbers as prime or composite.",
    "code": "```rust\nfn classify_number(n: u32) -> &'static str {\n    if n <= 1 {\n        return \"Neither prime nor composite\";\n    }\n    for i in 2..=((n as f64).sqrt() as u32) {\n        if n % i == 0 {\n            return \"Composite\";\n        }\n    }\n    \"Prime\"\n}\n\nfn main() {\n    let numbers = [0, 1, 2, 3, 4, 5, 16, 17, 18, 19, 20];\n    for &number in &numbers {\n        println!(\"{} is {}\", number, classify_number(number));\n    }\n}\n```"
  },
  {
    "task": "Develop a routine to determine if a number is a power of two.",
    "code": "```rust\nfn is_power_of_two(n: u32) -> bool {\n    if n == 0 {\n        return false;\n    }\n    (n & (n - 1)) == 0\n}\n\nfn main() {\n    let number = 16;\n    if is_power_of_two(number) {\n        println!(\"{} is a power of two.\", number);\n    } else {\n        println!(\"{} is not a power of two.\", number);\n    }\n}\n```"
  },
  {
    "task": "Implement a program that checks if a list is sorted in ascending order.",
    "code": "```rust\nfn is_sorted_ascending(list: &[i32]) -> bool {\n    for i in 0..list.len() - 1 {\n        if list[i] > list[i + 1] {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let list = vec![1, 2, 3, 4, 5];\n    if is_sorted_ascending(&list) {\n        println!(\"The list is sorted in ascending order.\");\n    } else {\n        println!(\"The list is not sorted in ascending order.\");\n    }\n}\n```"
  },
  {
    "task": "Design a function that suggests a sport based on the weather conditions.",
    "code": "```rust\nfn suggest_sport(weather: &str) -> &str {\n    match weather {\n        \"sunny\" => \"Tennis\",\n        \"rainy\" => \"Swimming\",\n        \"windy\" => \"Kite Surfing\",\n        \"snowy\" => \"Skiing\",\n        _ => \"Indoor Gym\",\n    }\n}\n\nfn main() {\n    let weather_conditions = [\"sunny\", \"rainy\", \"windy\", \"snowy\", \"cloudy\"];\n    \n    for &weather in &weather_conditions {\n        println!(\"When it's {}, you can play {}.\", weather, suggest_sport(weather));\n    }\n}\n```"
  },
  {
    "task": "Write a program that determines if an entered date is valid.",
    "code": "```rust\nuse chrono::NaiveDate;\nuse std::io;\n\nfn main() {\n    let mut input = String::new();\n    println!(\"Enter a date (YYYY-MM-DD):\");\n    \n    io::stdin().read_line(&mut input).expect(\"Failed to read line\");\n    let input = input.trim();\n    \n    match NaiveDate::parse_from_str(input, \"%Y-%m-%d\") {\n        Ok(_) => println!(\"The date is valid.\"),\n        Err(_) => println!(\"The date is invalid.\"),\n    }\n}\n```"
  },
  {
    "task": "Create a script to decide which of two products to buy based on price and reviews.",
    "code": "```rust\nfn main() {\n    let product1_price = 50.0;\n    let product1_reviews = 4.5;\n    let product2_price = 45.0;\n    let product2_reviews = 4.0;\n\n    let chosen_product = if product1_price < product2_price && product1_reviews >= product2_reviews {\n        \"Product 1\"\n    } else if product2_price < product1_price && product2_reviews >= product1_reviews {\n        \"Product 2\"\n    } else if product1_reviews > product2_reviews {\n        \"Product 1\"\n    } else {\n        \"Product 2\"\n    };\n\n    println!(\"The chosen product is: {}\", chosen_product);\n}\n```"
  },
  {
    "task": "Develop a function that categorizes a person\u2019s BMI as underweight, normal, overweight, or obese.",
    "code": "```rust\nfn categorize_bmi(bmi: f32) -> &'static str {\n    if bmi < 18.5 {\n        \"underweight\"\n    } else if bmi >= 18.5 && bmi < 24.9 {\n        \"normal\"\n    } else if bmi >= 25.0 && bmi < 29.9 {\n        \"overweight\"\n    } else {\n        \"obese\"\n    }\n}\n\nfn main() {\n    let bmi = 22.0;\n    let category = categorize_bmi(bmi);\n    println!(\"A BMI of {} is categorized as: {}\", bmi, category);\n}\n```"
  },
  {
    "task": "Implement a program that checks if a credit card number is valid using the Luhn algorithm.",
    "code": "```rust\nfn luhn_check(card_number: &str) -> bool {\n    let mut sum = 0;\n    let mut double_digit = false;\n\n    for c in card_number.chars().rev() {\n        if let Some(mut digit) = c.to_digit(10) {\n            if double_digit {\n                digit *= 2;\n                if digit > 9 {\n                    digit -= 9;\n                }\n            }\n            sum += digit;\n            double_digit = !double_digit;\n        } else {\n            return false;\n        }\n    }\n\n    sum % 10 == 0\n}\n\nfn main() {\n    let card_number = \"4532015112830366\";\n    if luhn_check(card_number) {\n        println!(\"The card number is valid.\");\n    } else {\n        println!(\"The card number is invalid.\");\n    }\n}\n```"
  },
  {
    "task": "Design a routine that outputs a greeting based on the current time of day.",
    "code": "```rust\nuse chrono::prelude::*;\n\nfn main() {\n    let local: DateTime<Local> = Local::now();\n    let hour = local.hour();\n\n    let greeting = if hour < 12 {\n        \"Good morning!\"\n    } else if hour < 18 {\n        \"Good afternoon!\"\n    } else {\n        \"Good evening!\"\n    };\n\n    println!(\"{}\", greeting);\n}\n```"
  },
  {
    "task": "Write a program that determines if a given word can be formed with a set of letters.",
    "code": "```rust\nuse std::collections::HashMap;\n\nfn can_form_word(word: &str, letters: &str) -> bool {\n    let mut letter_count = HashMap::new();\n\n    for letter in letters.chars() {\n        *letter_count.entry(letter).or_insert(0) += 1;\n    }\n\n    for letter in word.chars() {\n        if let Some(count) = letter_count.get_mut(&letter) {\n            if *count > 0 {\n                *count -= 1;\n            } else {\n                return false;\n            }\n        } else {\n            return false;\n        }\n    }\n\n    true\n}\n\nfn main() {\n    let word = \"hello\";\n    let letters = \"hleol\";\n    \n    if can_form_word(word, letters) {\n        println!(\"The word '{}' can be formed with the letters '{}'\", word, letters);\n    } else {\n        println!(\"The word '{}' cannot be formed with the letters '{}'\", word, letters);\n    }\n}\n```"
  },
  {
    "task": "Create a function that outputs the appropriate greeting based on the day of the week.",
    "code": "```rust\nfn greeting_for_day(day: &str) -> &str {\n    match day.to_lowercase().as_str() {\n        \"monday\" => \"Hello, it's Monday!\",\n        \"tuesday\" => \"Happy Tuesday!\",\n        \"wednesday\" => \"It's Wednesday, halfway through!\",\n        \"thursday\" => \"Almost there, it's Thursday!\",\n        \"friday\" => \"TGIF - It's Friday!\",\n        \"saturday\" => \"Enjoy your Saturday!\",\n        \"sunday\" => \"Relax, it's Sunday!\",\n        _ => \"Unknown day!\",\n    }\n}\n\nfn main() {\n    let day = \"Monday\";\n    println!(\"{}\", greeting_for_day(day));\n}\n```"
  },
  {
    "task": "Develop a system to determine if a person qualifies for a senior citizen discount.",
    "code": "```rust\nfn main() {\n    let age: u32 = 65; // Example age, can be replaced with input\n    let qualifies_for_discount = if age >= 65 { true } else { false };\n\n    if qualifies_for_discount {\n        println!(\"The person qualifies for a senior citizen discount.\");\n    } else {\n        println!(\"The person does not qualify for a senior citizen discount.\");\n    }\n}\n```"
  },
  {
    "task": "Implement a function that checks if a number is a perfect square.",
    "code": "```rust\nfn is_perfect_square(n: i32) -> bool {\n    if n < 0 {\n        return false;\n    }\n    let sqrt_n = (n as f64).sqrt() as i32;\n    sqrt_n * sqrt_n == n\n}\n\nfn main() {\n    let number = 16;\n    if is_perfect_square(number) {\n        println!(\"{} is a perfect square.\", number);\n    } else {\n        println!(\"{} is not a perfect square.\", number);\n    }\n}\n```"
  },
  {
    "task": "Design a program that outputs the correct shipping cost based on weight and distance.",
    "code": "```rust\nfn main() {\n    let weight = 10.0; // example weight in kg\n    let distance = 500.0; // example distance in km\n    \n    let shipping_cost = calculate_shipping_cost(weight, distance);\n    println!(\"The shipping cost is: ${:.2}\", shipping_cost);\n}\n\nfn calculate_shipping_cost(weight: f64, distance: f64) -> f64 {\n    let base_rate = 5.0;\n    let weight_rate = if weight <= 5.0 {\n        1.0\n    } else if weight <= 20.0 {\n        1.5\n    } else {\n        2.0\n    };\n\n    let distance_rate = if distance <= 100.0 {\n        1.0\n    } else if distance <= 500.0 {\n        1.2\n    } else {\n        1.5\n    };\n\n    base_rate + (weight_rate * weight) + (distance_rate * distance)\n}\n```"
  },
  {
    "task": "Write a routine that chooses the correct pronoun based on gender input.",
    "code": "```rust\nfn choose_pronoun(gender: &str) -> &str {\n    match gender.to_lowercase().as_str() {\n        \"male\" => \"he\",\n        \"female\" => \"she\",\n        \"non-binary\" => \"they\",\n        _ => \"they\",\n    }\n}\n\nfn main() {\n    let gender_input = \"male\";\n    let pronoun = choose_pronoun(gender_input);\n    println!(\"The pronoun for {} is {}.\", gender_input, pronoun);\n}\n```"
  },
  {
    "task": "Create a program that checks if a user input is a palindrome number.",
    "code": "```rust\nuse std::io;\n\nfn main() {\n    let mut input = String::new();\n    println!(\"Enter a number: \");\n    io::stdin().read_line(&mut input).expect(\"Failed to read line\");\n    let input = input.trim();\n\n    if is_palindrome(input) {\n        println!(\"The number is a palindrome.\");\n    } else {\n        println!(\"The number is not a palindrome.\");\n    }\n}\n\nfn is_palindrome(s: &str) -> bool {\n    s.chars().eq(s.chars().rev())\n}\n```"
  },
  {
    "task": "Develop a script to decide if a number is a perfect number.",
    "code": "```rust\nfn is_perfect_number(n: u32) -> bool {\n    if n < 2 {\n        return false;\n    }\n    \n    let mut sum_of_divisors = 0;\n    for i in 1..n {\n        if n % i == 0 {\n            sum_of_divisors += i;\n        }\n    }\n    \n    sum_of_divisors == n\n}\n\nfn main() {\n    let number = 28; // Example number\n    if is_perfect_number(number) {\n        println!(\"{} is a perfect number.\", number);\n    } else {\n        println!(\"{} is not a perfect number.\", number);\n    }\n}\n```"
  },
  {
    "task": "Implement a system that determines the winner in a rock-paper-scissors game.",
    "code": "```rust\nuse std::io;\n\nfn main() {\n    let mut player1_choice = String::new();\n    let mut player2_choice = String::new();\n\n    println!(\"Player 1, enter your choice (rock, paper, or scissors):\");\n    io::stdin().read_line(&mut player1_choice).expect(\"Failed to read line\");\n    println!(\"Player 2, enter your choice (rock, paper, or scissors):\");\n    io::stdin().read_line(&mut player2_choice).expect(\"Failed to read line\");\n\n    let player1_choice = player1_choice.trim();\n    let player2_choice = player2_choice.trim();\n\n    let result = match (player1_choice, player2_choice) {\n        (\"rock\", \"scissors\") | (\"scissors\", \"paper\") | (\"paper\", \"rock\") => \"Player 1 wins!\",\n        (\"scissors\", \"rock\") | (\"paper\", \"scissors\") | (\"rock\", \"paper\") => \"Player 2 wins!\",\n        _ if player1_choice == player2_choice => \"It's a tie!\",\n        _ => \"Invalid input!\",\n    };\n\n    println!(\"{}\", result);\n}\n```"
  },
  {
    "task": "Design a function that suggests a movie genre based on user mood.",
    "code": "```rust\nfn suggest_genre(mood: &str) -> &str {\n    match mood.to_lowercase().as_str() {\n        \"happy\" => \"Comedy\",\n        \"sad\" => \"Drama\",\n        \"excited\" => \"Action\",\n        \"relaxed\" => \"Romance\",\n        \"bored\" => \"Adventure\",\n        \"curious\" => \"Mystery\",\n        _ => \"Documentary\",\n    }\n}\n\nfn main() {\n    let mood = \"happy\";\n    let genre = suggest_genre(mood);\n    println!(\"Based on your mood '{}', you might enjoy a {} movie.\", mood, genre);\n}\n```"
  },
  {
    "task": "Write a program that checks if a file extension is valid for an image file.",
    "code": "```rust\nuse std::env;\n\nfn is_valid_image_extension(extension: &str) -> bool {\n    match extension.to_lowercase().as_str() {\n        \"jpg\" | \"jpeg\" | \"png\" | \"gif\" | \"bmp\" | \"tiff\" | \"webp\" => true,\n        _ => false,\n    }\n}\n\nfn main() {\n    let args: Vec<String> = env::args().collect();\n    if args.len() != 2 {\n        println!(\"Usage: {} <file_extension>\", args[0]);\n        return;\n    }\n\n    let extension = &args[1];\n    if is_valid_image_extension(extension) {\n        println!(\"The file extension {} is valid for an image file.\", extension);\n    } else {\n        println!(\"The file extension {} is not valid for an image file.\", extension);\n    }\n}\n```"
  },
  {
    "task": "Create a routine that decides the appropriate currency symbol based on country.",
    "code": "```rust\nfn currency_symbol(country: &str) -> &str {\n    match country {\n        \"USA\" => \"$\",\n        \"UK\" => \"\u00a3\",\n        \"Japan\" => \"\u00a5\",\n        \"EU\" => \"\u20ac\",\n        \"India\" => \"\u20b9\",\n        _ => \"Unknown\",\n    }\n}\n\nfn main() {\n    let countries = vec![\"USA\", \"UK\", \"Japan\", \"EU\", \"India\", \"Brazil\"];\n    \n    for country in countries {\n        println!(\"The currency symbol for {} is {}\", country, currency_symbol(country));\n    }\n}\n```"
  },
  {
    "task": "Develop a function that determines if a string is a valid palindrome ignoring spaces and punctuation.",
    "code": "```rust\nfn is_valid_palindrome(s: &str) -> bool {\n    let filtered: String = s.chars()\n        .filter(|c| c.is_alphanumeric())\n        .map(|c| c.to_ascii_lowercase())\n        .collect();\n    let reversed: String = filtered.chars().rev().collect();\n    filtered == reversed\n}\n\nfn main() {\n    let test_string = \"A man, a plan, a canal, Panama\";\n    println!(\"Is valid palindrome? {}\", is_valid_palindrome(test_string));\n}\n```"
  },
  {
    "task": "Implement a program that checks if a number is in the Fibonacci sequence.",
    "code": "```rust\nfn is_fibonacci(n: u32) -> bool {\n    if n == 0 || n == 1 {\n        return true;\n    }\n    let mut a = 0;\n    let mut b = 1;\n    while b < n {\n        let temp = b;\n        b = a + b;\n        a = temp;\n    }\n    b == n\n}\n\nfn main() {\n    let number = 21; // Example number\n    if is_fibonacci(number) {\n        println!(\"{} is in the Fibonacci sequence.\", number);\n    } else {\n        println!(\"{} is not in the Fibonacci sequence.\", number);\n    }\n}\n```"
  },
  {
    "task": "Design a script to calculate the correct tip based on service quality rating.",
    "code": "```rust\nfn calculate_tip(amount: f64, service_quality: &str) -> f64 {\n    let tip_percentage = match service_quality {\n        \"excellent\" => 0.20,\n        \"good\" => 0.15,\n        \"average\" => 0.10,\n        \"poor\" => 0.05,\n        _ => 0.0,\n    };\n    amount * tip_percentage\n}\n\nfn main() {\n    let bill_amount = 100.0;\n    let service_quality = \"good\";\n    let tip = calculate_tip(bill_amount, service_quality);\n    println!(\"The tip for a service quality of '{}' on a bill amount of ${} is: ${}\", service_quality, bill_amount, tip);\n}\n```"
  },
  {
    "task": "Write a function that determines if a year is a century year.",
    "code": "```rust\nfn is_century_year(year: i32) -> bool {\n    year % 100 == 0\n}\n```"
  },
  {
    "task": "Create a program that checks if a date falls on a weekend.",
    "code": "```rust\nuse chrono::{Datelike, NaiveDate};\n\nfn is_weekend(year: i32, month: u32, day: u32) -> bool {\n    if let Ok(date) = NaiveDate::from_ymd_opt(year, month, day) {\n        match date.weekday() {\n            chrono::Weekday::Sat | chrono::Weekday::Sun => true,\n            _ => false,\n        }\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let year = 2023;\n    let month = 10;\n    let day = 7;\n    \n    if is_weekend(year, month, day) {\n        println!(\"The date {}/{}/{} is a weekend.\", year, month, day);\n    } else {\n        println!(\"The date {}/{}/{} is a weekday.\", year, month, day);\n    }\n}\n```"
  },
  {
    "task": "Develop a routine that suggests a book based on genre preference.",
    "code": "```rust\nfn suggest_book(genre: &str) -> &str {\n    match genre.to_lowercase().as_str() {\n        \"fantasy\" => \"The Hobbit by J.R.R. Tolkien\",\n        \"science fiction\" => \"Dune by Frank Herbert\",\n        \"mystery\" => \"The Girl with the Dragon Tattoo by Stieg Larsson\",\n        \"romance\" => \"Pride and Prejudice by Jane Austen\",\n        \"horror\" => \"It by Stephen King\",\n        \"non-fiction\" => \"Sapiens: A Brief History of Humankind by Yuval Noah Harari\",\n        _ => \"Genre not recognized. Please choose a different genre.\",\n    }\n}\n\nfn main() {\n    let genre = \"fantasy\";\n    let book_suggestion = suggest_book(genre);\n    println!(\"Based on your preference for {}, we suggest: {}\", genre, book_suggestion);\n}\n```"
  },
  {
    "task": "Implement a system that determines if a student passes or fails based on their grades.",
    "code": "```rust\nfn main() {\n    let grade = 75; // Example grade, can be replaced with any value\n    if grade >= 50 {\n        println!(\"Pass\");\n    } else {\n        println!(\"Fail\");\n    }\n}\n```"
  },
  {
    "task": "Design a function to validate if a string is a valid URL.",
    "code": "```rust\nfn is_valid_url(url: &str) -> bool {\n    let url = url.trim();\n    if !url.contains(\"://\") {\n        return false;\n    }\n    \n    let parts: Vec<&str> = url.split(\"://\").collect();\n    if parts.len() != 2 {\n        return false;\n    }\n    \n    let scheme = parts[0];\n    let rest = parts[1];\n    \n    let valid_schemes = [\"http\", \"https\", \"ftp\"];\n    if !valid_schemes.contains(&scheme) {\n        return false;\n    }\n    \n    if rest.is_empty() {\n        return false;\n    }\n    \n    true\n}\n\nfn main() {\n    let urls = [\n        \"http://example.com\",\n        \"https://example.com\",\n        \"ftp://example.com\",\n        \"invalid://example.com\",\n        \"http://\",\n        \"example.com\",\n    ];\n    \n    for url in &urls {\n        println!(\"{} is valid: {}\", url, is_valid_url(url));\n    }\n}\n```"
  },
  {
    "task": "Write a program that checks if a point is inside a rectangle given its coordinates.",
    "code": "```rust\nfn is_point_inside_rectangle(px: f64, py: f64, rx: f64, ry: f64, rw: f64, rh: f64) -> bool {\n    if px >= rx && px <= rx + rw && py >= ry && py <= ry + rh {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let point_x = 5.0;\n    let point_y = 5.0;\n    let rect_x = 2.0;\n    let rect_y = 2.0;\n    let rect_width = 4.0;\n    let rect_height = 4.0;\n\n    if is_point_inside_rectangle(point_x, point_y, rect_x, rect_y, rect_width, rect_height) {\n        println!(\"The point is inside the rectangle.\");\n    } else {\n        println!(\"The point is outside the rectangle.\");\n    }\n}\n```"
  },
  {
    "task": "Create a script to determine if a word can be constructed from a given set of letters.",
    "code": "```rust\nfn can_construct_word(word: &str, letters: &str) -> bool {\n    let mut letter_counts = std::collections::HashMap::new();\n\n    for letter in letters.chars() {\n        *letter_counts.entry(letter).or_insert(0) += 1;\n    }\n\n    for c in word.chars() {\n        match letter_counts.get_mut(&c) {\n            Some(count) if *count > 0 => *count -= 1,\n            _ => return false,\n        }\n    }\n\n    true\n}\n\nfn main() {\n    let word = \"rust\";\n    let letters = \"usrtr\";\n    let result = can_construct_word(word, letters);\n    println!(\"Can construct '{}': {}\", word, result);\n}\n```"
  },
  {
    "task": "Develop a routine that calculates insurance premiums based on age and driving record.",
    "code": "```rust\nfn calculate_insurance_premium(age: u32, has_good_driving_record: bool) -> f64 {\n    let base_premium = 500.0;\n    let mut premium = base_premium;\n\n    if age < 25 {\n        premium += 100.0;\n    } else if age >= 25 && age <= 50 {\n        premium += 50.0;\n    } else {\n        premium += 75.0;\n    }\n\n    if has_good_driving_record {\n        premium *= 0.9;\n    } else {\n        premium *= 1.2;\n    }\n\n    premium\n}\n\nfn main() {\n    let age = 30;\n    let has_good_driving_record = true;\n    let premium = calculate_insurance_premium(age, has_good_driving_record);\n    println!(\"The insurance premium is: ${:.2}\", premium);\n}\n```"
  },
  {
    "task": "Implement a program that checks for palindrome sentences.",
    "code": "```rust\nfn is_palindrome(s: &str) -> bool {\n    let filtered: String = s.chars()\n        .filter(|c| c.is_alphanumeric())\n        .map(|c| c.to_lowercase().collect::<String>())\n        .collect();\n    filtered == filtered.chars().rev().collect::<String>()\n}\n\nfn main() {\n    let sentence = \"A man, a plan, a canal, Panama\";\n    if is_palindrome(sentence) {\n        println!(\"The sentence is a palindrome.\");\n    } else {\n        println!(\"The sentence is not a palindrome.\");\n    }\n}\n```"
  },
  {
    "task": "Design a function to evaluate if a string contains balanced parentheses.",
    "code": "```rust\nfn are_parentheses_balanced(s: &str) -> bool {\n    let mut balance = 0;\n    for ch in s.chars() {\n        if ch == '(' {\n            balance += 1;\n        } else if ch == ')' {\n            balance -= 1;\n        }\n        if balance < 0 {\n            return false;\n        }\n    }\n    balance == 0\n}\n\nfn main() {\n    let test_str = \"(())\";\n    println!(\"Are parentheses balanced? {}\", are_parentheses_balanced(test_str));\n}\n```"
  },
  {
    "task": "Write a program that suggests a pet based on living conditions and preferences.",
    "code": "```rust\nuse std::io;\n\nfn main() {\n    let mut living_condition = String::new();\n    let mut preference = String::new();\n\n    println!(\"What is your living condition? (apartment/house)\");\n    io::stdin().read_line(&mut living_condition).expect(\"Failed to read line\");\n    let living_condition = living_condition.trim();\n\n    println!(\"Do you prefer a pet that is (low_maintenance/high_maintenance)?\");\n    io::stdin().read_line(&mut preference).expect(\"Failed to read line\");\n    let preference = preference.trim();\n\n    let suggestion = if living_condition == \"apartment\" {\n        if preference == \"low_maintenance\" {\n            \"Fish\"\n        } else {\n            \"Cat\"\n        }\n    } else {\n        if preference == \"low_maintenance\" {\n            \"Dog\"\n        } else {\n            \"Parrot\"\n        }\n    };\n\n    println!(\"Based on your living conditions and preferences, you should consider a: {}\", suggestion);\n}\n```"
  },
  {
    "task": "Create a routine that determines if a phone number is valid based on format.",
    "code": "```rust\nfn is_valid_phone_number(phone_number: &str) -> bool {\n    if phone_number.starts_with(\"+\") && phone_number.len() == 12 {\n        return phone_number[1..].chars().all(char::is_numeric);\n    } else if phone_number.len() == 10 {\n        return phone_number.chars().all(char::is_numeric);\n    }\n    false\n}\n\nfn main() {\n    let phone_number1 = \"+12345678901\";\n    let phone_number2 = \"1234567890\";\n    let phone_number3 = \"123-456-7890\";\n\n    println!(\"Is '{}' a valid phone number? {}\", phone_number1, is_valid_phone_number(phone_number1));\n    println!(\"Is '{}' a valid phone number? {}\", phone_number2, is_valid_phone_number(phone_number2));\n    println!(\"Is '{}' a valid phone number? {}\", phone_number3, is_valid_phone_number(phone_number3));\n}\n```"
  },
  {
    "task": "Develop a function that checks if two rectangles overlap.",
    "code": "```rust\nstruct Rectangle {\n    x: i32,\n    y: i32,\n    width: i32,\n    height: i32,\n}\n\nfn rectangles_overlap(rect1: &Rectangle, rect2: &Rectangle) -> bool {\n    let rect1_right = rect1.x + rect1.width;\n    let rect1_bottom = rect1.y + rect1.height;\n    let rect2_right = rect2.x + rect2.width;\n    let rect2_bottom = rect2.y + rect2.height;\n\n    !(rect1_right <= rect2.x || rect1.x >= rect2_right || \n      rect1_bottom <= rect2.y || rect1.y >= rect2_bottom)\n}\n\nfn main() {\n    let rect1 = Rectangle { x: 0, y: 0, width: 10, height: 10 };\n    let rect2 = Rectangle { x: 5, y: 5, width: 10, height: 10 };\n    let overlap = rectangles_overlap(&rect1, &rect2);\n    println!(\"Do the rectangles overlap? {}\", overlap);\n}\n```"
  },
  {
    "task": "Implement a program that chooses a beverage based on user input time.",
    "code": "```rust\nuse std::io;\n\nfn main() {\n    let mut input = String::new();\n    println!(\"Enter the current hour (0-23):\");\n\n    io::stdin().read_line(&mut input).expect(\"Failed to read line\");\n    let hour: u32 = input.trim().parse().expect(\"Please enter a number\");\n\n    let beverage = if hour < 12 {\n        \"Coffee\"\n    } else if hour < 18 {\n        \"Tea\"\n    } else {\n        \"Water\"\n    };\n\n    println!(\"Recommended beverage: {}\", beverage);\n}\n```"
  },
  {
    "task": "Design a script to determine if a URL is secure (HTTPS).",
    "code": "```rust\nfn is_secure_url(url: &str) -> bool {\n    url.starts_with(\"https://\")\n}\n\nfn main() {\n    let urls = [\"https://example.com\", \"http://example.com\", \"https://secure.com\", \"ftp://example.com\"];\n\n    for url in urls.iter() {\n        if is_secure_url(url) {\n            println!(\"The URL '{}' is secure.\", url);\n        } else {\n            println!(\"The URL '{}' is not secure.\", url);\n        }\n    }\n}\n```"
  },
  {
    "task": "Write a function that outputs different messages based on the input number's divisibility.",
    "code": "```rust\nfn divisibility_message(num: i32) -> &'static str {\n    if num % 15 == 0 {\n        \"Divisible by 15\"\n    } else if num % 5 == 0 {\n        \"Divisible by 5\"\n    } else if num % 3 == 0 {\n        \"Divisible by 3\"\n    } else {\n        \"Not divisible by 3, 5, or 15\"\n    }\n}\n\nfn main() {\n    let number = 30;\n    println!(\"{}\", divisibility_message(number));\n}\n```"
  },
  {
    "task": "Create a program to decide if a person should bring an umbrella based on the weather forecast.",
    "code": "```rust\nfn main() {\n    let weather_forecast = \"rainy\"; // Possible values: \"sunny\", \"cloudy\", \"rainy\", \"stormy\"\n\n    if weather_forecast == \"rainy\" || weather_forecast == \"stormy\" {\n        println!(\"You should bring an umbrella.\");\n    } else {\n        println!(\"No need to bring an umbrella.\");\n    }\n}\n```"
  },
  {
    "task": "Develop a routine that checks if a chess move is valid.",
    "code": "```rust\nfn is_valid_move(piece: &str, from: (i32, i32), to: (i32, i32)) -> bool {\n    match piece {\n        \"pawn\" => {\n            let direction = if from.1 == 2 { 1 } else { -1 };\n            (to.0 == from.0 && to.1 == from.1 + direction) ||\n            (from.1 == 2 && to.0 == from.0 && to.1 == from.1 + 2 * direction)\n        },\n        \"rook\" => from.0 == to.0 || from.1 == to.1,\n        \"knight\" => {\n            let dx = (from.0 - to.0).abs();\n            let dy = (from.1 - to.1).abs();\n            (dx == 2 && dy == 1) || (dx == 1 && dy == 2)\n        },\n        \"bishop\" => (from.0 - to.0).abs() == (from.1 - to.1).abs(),\n        \"queen\" => {\n            (from.0 == to.0 || from.1 == to.1) ||\n            (from.0 - to.0).abs() == (from.1 - to.1).abs()\n        },\n        \"king\" => {\n            let dx = (from.0 - to.0).abs();\n            let dy = (from.1 - to.1).abs();\n            dx <= 1 && dy <= 1\n        },\n        _ => false,\n    }\n}\n\nfn main() {\n    let piece = \"knight\";\n    let from = (1, 2);\n    let to = (2, 4);\n    println!(\"Is the move valid? {}\", is_valid_move(piece, from, to));\n}\n```"
  },
  {
    "task": "Implement a program that outputs the number of days in a given month.",
    "code": "```rust\nuse std::io;\n\nfn main() {\n    let mut input = String::new();\n    println!(\"Enter the month number (1-12):\");\n    \n    io::stdin().read_line(&mut input).expect(\"Failed to read line\");\n    let month: u32 = input.trim().parse().expect(\"Please enter a valid number\");\n\n    let days = match month {\n        1 => 31,\n        2 => 28,\n        3 => 31,\n        4 => 30,\n        5 => 31,\n        6 => 30,\n        7 => 31,\n        8 => 31,\n        9 => 30,\n        10 => 31,\n        11 => 30,\n        12 => 31,\n        _ => {\n            println!(\"Invalid month number.\");\n            return;\n        }\n    };\n\n    println!(\"Number of days: {}\", days);\n}\n```"
  },
  {
    "task": "Design a function that validates if a string is a valid hexadecimal number.",
    "code": "```rust\nfn is_valid_hex(s: &str) -> bool {\n    if s.is_empty() {\n        return false;\n    }\n    for c in s.chars() {\n        if !c.is_digit(16) {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let test_cases = vec![\"1A3F\", \"GH12\", \"abc123\", \"\", \"123\"];\n    for test in test_cases {\n        println!(\"{} is a valid hex: {}\", test, is_valid_hex(test));\n    }\n}\n```"
  },
  {
    "task": "Write a script that checks if a word is present in a list of predefined words.",
    "code": "```rust\nfn main() {\n    let predefined_words = vec![\"apple\", \"banana\", \"cherry\"];\n    let word_to_check = \"banana\";\n    \n    if predefined_words.contains(&word_to_check) {\n        println!(\"The word is present in the list.\");\n    } else {\n        println!(\"The word is not present in the list.\");\n    }\n}\n```"
  },
  {
    "task": "Create a routine to decide the correct tax bracket for a given income.",
    "code": "```rust\nfn tax_bracket(income: f64) -> &'static str {\n    if income < 9875.0 {\n        \"10%\"\n    } else if income < 40125.0 {\n        \"12%\"\n    } else if income < 85525.0 {\n        \"22%\"\n    } else if income < 163300.0 {\n        \"24%\"\n    } else if income < 207350.0 {\n        \"32%\"\n    } else if income < 518400.0 {\n        \"35%\"\n    } else {\n        \"37%\"\n    }\n}\n\nfn main() {\n    let income = 75000.0;\n    let bracket = tax_bracket(income);\n    println!(\"The tax bracket for an income of ${} is {}\", income, bracket);\n}\n```"
  },
  {
    "task": "Develop a function that determines if a point is within a triangle.",
    "code": "```rust\nstruct Point {\n    x: f64,\n    y: f64,\n}\n\nfn is_point_in_triangle(p: Point, a: Point, b: Point, c: Point) -> bool {\n    fn sign(p1: Point, p2: Point, p3: Point) -> f64 {\n        (p1.x - p3.x) * (p2.y - p3.y) - (p2.x - p3.x) * (p1.y - p3.y)\n    }\n\n    let d1 = sign(p, a, b);\n    let d2 = sign(p, b, c);\n    let d3 = sign(p, c, a);\n\n    let has_neg = (d1 < 0.0) || (d2 < 0.0) || (d3 < 0.0);\n    let has_pos = (d1 > 0.0) || (d2 > 0.0) || (d3 > 0.0);\n\n    !(has_neg && has_pos)\n}\n```"
  },
  {
    "task": "Implement a program that checks if a given string is a valid binary number.",
    "code": "```rust\nfn is_valid_binary(s: &str) -> bool {\n    for c in s.chars() {\n        if c != '0' && c != '1' {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let test_strings = vec![\"1010\", \"11002\", \"111\", \"abc\", \"0000\"];\n    \n    for s in test_strings {\n        if is_valid_binary(s) {\n            println!(\"'{}' is a valid binary number.\", s);\n        } else {\n            println!(\"'{}' is not a valid binary number.\", s);\n        }\n    }\n}\n```"
  },
  {
    "task": "Design a system to evaluate the risk level of an investment based on criteria.",
    "code": "```rust\nfn evaluate_risk(investment_amount: f64, volatility: f64, duration_years: u32) -> &'static str {\n    if investment_amount < 1000.0 {\n        if volatility < 0.2 {\n            if duration_years > 5 {\n                \"Low Risk\"\n            } else {\n                \"Moderate Risk\"\n            }\n        } else {\n            \"High Risk\"\n        }\n    } else if investment_amount >= 1000.0 && investment_amount < 10000.0 {\n        if volatility < 0.3 {\n            if duration_years > 3 {\n                \"Moderate Risk\"\n            } else {\n                \"High Risk\"\n            }\n        } else {\n            \"Very High Risk\"\n        }\n    } else {\n        if volatility < 0.5 {\n            if duration_years > 10 {\n                \"Moderate Risk\"\n            } else {\n                \"High Risk\"\n            }\n        } else {\n            \"Very High Risk\"\n        }\n    }\n}\n\nfn main() {\n    let risk_level = evaluate_risk(5000.0, 0.25, 4);\n    println!(\"The investment risk level is: {}\", risk_level);\n}\n```"
  },
  {
    "task": "Write a program that suggests a vacation destination based on budget and preferences.",
    "code": "```rust\nuse std::io;\n\nfn main() {\n    let mut budget_input = String::new();\n    let mut preference_input = String::new();\n\n    println!(\"Enter your budget (low, medium, high): \");\n    io::stdin().read_line(&mut budget_input).expect(\"Failed to read line\");\n    let budget = budget_input.trim();\n\n    println!(\"Enter your preference (beach, city, adventure): \");\n    io::stdin().read_line(&mut preference_input).expect(\"Failed to read line\");\n    let preference = preference_input.trim();\n\n    let destination = match (budget, preference) {\n        (\"low\", \"beach\") => \"Consider a local beach or a nearby coastal town.\",\n        (\"low\", \"city\") => \"Explore a local city or a nearby town with cultural attractions.\",\n        (\"low\", \"adventure\") => \"Try a nearby hiking trail or a camping trip.\",\n        (\"medium\", \"beach\") => \"How about a trip to Florida or Southern Europe?\",\n        (\"medium\", \"city\") => \"Consider visiting New York City or Paris.\",\n        (\"medium\", \"adventure\") => \"Think about a skiing trip or a national park.\",\n        (\"high\", \"beach\") => \"Consider Maldives or Bora Bora for a luxury beach experience.\",\n        (\"high\", \"city\") => \"Tokyo or London could be exciting destinations.\",\n        (\"high\", \"adventure\") => \"How about a safari in Africa or trekking in Nepal?\",\n        _ => \"Invalid input. Please enter valid budget and preference.\",\n    };\n\n    println!(\"Suggested destination: {}\", destination);\n}\n```"
  },
  {
    "task": "Create a routine that checks if a username is already taken in a database.",
    "code": "```rust\nuse std::collections::HashSet;\n\nfn is_username_taken(username: &str, database: &HashSet<String>) -> bool {\n    if database.contains(username) {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let mut database = HashSet::new();\n    database.insert(\"user1\".to_string());\n    database.insert(\"user2\".to_string());\n    database.insert(\"user3\".to_string());\n\n    let username_to_check = \"user2\";\n    if is_username_taken(username_to_check, &database) {\n        println!(\"Username '{}' is already taken.\", username_to_check);\n    } else {\n        println!(\"Username '{}' is available.\", username_to_check);\n    }\n}\n```"
  },
  {
    "task": "Develop a function that determines if a string is a valid IPv4 address.",
    "code": "```rust\nfn is_valid_ipv4_address(ip: &str) -> bool {\n    let parts: Vec<&str> = ip.split('.').collect();\n    if parts.len() != 4 {\n        return false;\n    }\n\n    for part in parts {\n        if let Ok(num) = part.parse::<u8>() {\n            if num.to_string() != part {\n                return false;\n            }\n        } else {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let ip = \"192.168.1.1\";\n    println!(\"Is '{}' a valid IPv4 address? {}\", ip, is_valid_ipv4_address(ip));\n}\n```"
  },
  {
    "task": "Implement a program to decide which transportation method is quickest based on distance.",
    "code": "```rust\nfn main() {\n    let distance = 10.0; // Example distance in kilometers\n\n    let transport_method = if distance < 1.0 {\n        \"Walking\"\n    } else if distance < 5.0 {\n        \"Bicycle\"\n    } else if distance < 20.0 {\n        \"Car\"\n    } else {\n        \"Train\"\n    };\n\n    println!(\"The quickest transportation method for {} km is: {}\", distance, transport_method);\n}\n```"
  },
  {
    "task": "Design a script to validate if a number is a prime number.",
    "code": "```rust\nfn is_prime(number: u32) -> bool {\n    if number <= 1 {\n        return false;\n    }\n    if number <= 3 {\n        return true;\n    }\n    if number % 2 == 0 || number % 3 == 0 {\n        return false;\n    }\n    let mut i = 5;\n    while i * i <= number {\n        if number % i == 0 || number % (i + 2) == 0 {\n            return false;\n        }\n        i += 6;\n    }\n    true\n}\n\nfn main() {\n    let number = 29;\n    if is_prime(number) {\n        println!(\"{} is a prime number.\", number);\n    } else {\n        println!(\"{} is not a prime number.\", number);\n    }\n}\n```"
  },
  {
    "task": "Write a function that checks if a number is divisible by another number without remainder.",
    "code": "```rust\nfn is_divisible(dividend: i32, divisor: i32) -> bool {\n    if divisor == 0 {\n        false\n    } else {\n        dividend % divisor == 0\n    }\n}\n\nfn main() {\n    let num1 = 10;\n    let num2 = 2;\n    println!(\"Is {} divisible by {}: {}\", num1, num2, is_divisible(num1, num2));\n}\n```"
  },
  {
    "task": "Create a program that determines the type of a quadrilateral based on side lengths.",
    "code": "```rust\nfn main() {\n    let side1 = 5;\n    let side2 = 5;\n    let side3 = 5;\n    let side4 = 5;\n\n    let quadrilateral_type = if side1 == side2 && side2 == side3 && side3 == side4 {\n        \"Square\"\n    } else if side1 == side3 && side2 == side4 {\n        \"Rectangle\"\n    } else if side1 == side2 && side3 == side4 {\n        \"Rhombus\"\n    } else {\n        \"Irregular Quadrilateral\"\n    };\n\n    println!(\"The quadrilateral is a: {}\", quadrilateral_type);\n}\n```"
  },
  {
    "task": "Develop a routine to check if a sentence contains all letters of the alphabet.",
    "code": "```rust\nfn contains_all_letters(sentence: &str) -> bool {\n    let mut alphabet = [false; 26];\n    let sentence = sentence.to_lowercase();\n\n    for char in sentence.chars() {\n        if char.is_ascii_alphabetic() {\n            let index = (char as u8 - b'a') as usize;\n            alphabet[index] = true;\n        }\n    }\n\n    alphabet.iter().all(|&present| present)\n}\n\nfn main() {\n    let sentence = \"The quick brown fox jumps over the lazy dog\";\n    if contains_all_letters(sentence) {\n        println!(\"The sentence contains all letters of the alphabet.\");\n    } else {\n        println!(\"The sentence does not contain all letters of the alphabet.\");\n    }\n}\n```"
  },
  {
    "task": "Implement a program that outputs the appropriate error message based on an error code.",
    "code": "```rust\nfn main() {\n    let error_code = 2; // Example error code\n\n    let error_message = match error_code {\n        1 => \"File not found\",\n        2 => \"Access denied\",\n        3 => \"Network timeout\",\n        _ => \"Unknown error\",\n    };\n\n    println!(\"{}\", error_message);\n}\n```"
  },
  {
    "task": "Design a function that categorizes a movie rating as G, PG, PG-13, or R.",
    "code": "```rust\nfn categorize_rating(rating: u8) -> &'static str {\n    if rating <= 7 {\n        \"G\"\n    } else if rating <= 13 {\n        \"PG\"\n    } else if rating <= 16 {\n        \"PG-13\"\n    } else {\n        \"R\"\n    }\n}\n\nfn main() {\n    let ratings = [5, 12, 15, 18];\n    for &rating in &ratings {\n        println!(\"Rating {}: {}\", rating, categorize_rating(rating));\n    }\n}\n```"
  },
  {
    "task": "Write a script to check if a string is a valid Roman numeral.",
    "code": "```rust\nfn is_valid_roman_numeral(s: &str) -> bool {\n    let valid_roman = |c: char| match c {\n        'I' | 'V' | 'X' | 'L' | 'C' | 'D' | 'M' => true,\n        _ => false,\n    };\n\n    let mut last_value = 1001; // larger than any Roman numeral value\n    let mut repeat_count = 0;\n    let mut last_char = '\\0';\n\n    for c in s.chars() {\n        if !valid_roman(c) {\n            return false;\n        }\n\n        let value = match c {\n            'I' => 1,\n            'V' => 5,\n            'X' => 10,\n            'L' => 50,\n            'C' => 100,\n            'D' => 500,\n            'M' => 1000,\n            _ => 0,\n        };\n\n        if value > last_value {\n            if repeat_count > 0 {\n                return false;\n            }\n            if !matches!((last_char, c), ('I', 'V' | 'X') | ('X', 'L' | 'C') | ('C', 'D' | 'M')) {\n                return false;\n            }\n            repeat_count = 0;\n        } else if value == last_value {\n            repeat_count += 1;\n            if matches!(c, 'V' | 'L' | 'D') || repeat_count == 3 {\n                return false;\n            }\n        } else {\n            repeat_count = 0;\n        }\n\n        last_value = value;\n        last_char = c;\n    }\n\n    true\n}\n\nfn main() {\n    let test_cases = [\"XIV\", \"MMXXIII\", \"IIII\", \"IC\", \"XLII\", \"MCMXCIV\", \"LVIII\"];\n    for case in &test_cases {\n        println!(\"{}: {}\", case, is_valid_roman_numeral(case));\n    }\n}\n```"
  },
  {
    "task": "Create a routine that decides if a person can retire based on age and years worked.",
    "code": "```rust\nfn can_retire(age: u32, years_worked: u32) -> bool {\n    if age >= 65 || years_worked >= 30 || (age >= 60 && years_worked >= 25) {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let age = 62;\n    let years_worked = 27;\n    if can_retire(age, years_worked) {\n        println!(\"The person can retire.\");\n    } else {\n        println!(\"The person cannot retire yet.\");\n    }\n}\n```"
  },
  {
    "task": "Develop a function that outputs a different emoji based on user mood input.",
    "code": "```rust\nfn mood_emoji(mood: &str) -> &str {\n    match mood {\n        \"happy\" => \"\ud83d\ude0a\",\n        \"sad\" => \"\ud83d\ude22\",\n        \"angry\" => \"\ud83d\ude20\",\n        \"excited\" => \"\ud83e\udd29\",\n        \"bored\" => \"\ud83d\ude10\",\n        _ => \"\ud83e\udd14\",\n    }\n}\n\nfn main() {\n    let mood = \"happy\";\n    println!(\"The emoji for your mood is: {}\", mood_emoji(mood));\n}\n```"
  },
  {
    "task": "Implement a program that checks if a password meets security requirements.",
    "code": "```rust\nfn main() {\n    let password = \"SecurePass123!\";\n    if is_secure_password(password) {\n        println!(\"Password is secure.\");\n    } else {\n        println!(\"Password is not secure.\");\n    }\n}\n\nfn is_secure_password(password: &str) -> bool {\n    let has_min_length = password.len() >= 8;\n    let has_uppercase = password.chars().any(|c| c.is_uppercase());\n    let has_lowercase = password.chars().any(|c| c.is_lowercase());\n    let has_digit = password.chars().any(|c| c.is_digit(10));\n    let has_special_char = password.chars().any(|c| !c.is_alphanumeric());\n\n    has_min_length && has_uppercase && has_lowercase && has_digit && has_special_char\n}\n```"
  },
  {
    "task": "Design a script to determine if a number is a palindrome when reversed.",
    "code": "```rust\nfn is_palindrome(num: i32) -> bool {\n    let original = num.to_string();\n    let reversed: String = original.chars().rev().collect();\n    original == reversed\n}\n\nfn main() {\n    let number = 12321;\n    if is_palindrome(number) {\n        println!(\"{} is a palindrome.\", number);\n    } else {\n        println!(\"{} is not a palindrome.\", number);\n    }\n}\n```"
  },
  {
    "task": "Write a function that evaluates if a given day is a holiday.",
    "code": "```rust\nfn is_holiday(day: &str) -> bool {\n    match day {\n        \"New Year's Day\" | \"Christmas\" | \"Independence Day\" => true,\n        _ => false,\n    }\n}\n\nfn main() {\n    let day = \"Christmas\";\n    if is_holiday(day) {\n        println!(\"{} is a holiday!\", day);\n    } else {\n        println!(\"{} is not a holiday.\", day);\n    }\n}\n```"
  },
  {
    "task": "Create a program to decide if a library book is overdue based on the due date.",
    "code": "```rust\nuse chrono::{Datelike, Local, NaiveDate};\n\nfn main() {\n    let due_date = NaiveDate::from_ymd(2023, 10, 1); // Adjust the due date as needed\n    let today = Local::today().naive_local();\n\n    if today > due_date {\n        println!(\"The library book is overdue.\");\n    } else {\n        println!(\"The library book is not overdue.\");\n    }\n}\n```"
  },
  {
    "task": "Develop a routine that checks if a given year is part of a leap century.",
    "code": "```rust\nfn is_leap_century(year: u32) -> bool {\n    if year % 100 == 0 {\n        if year % 400 == 0 {\n            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let year = 2000;\n    if is_leap_century(year) {\n        println!(\"{} is a leap century\", year);\n    } else {\n        println!(\"{} is not a leap century\", year);\n    }\n}\n```"
  },
  {
    "task": "Implement a system to determine the correct category for a product based on user input.",
    "code": "```rust\nuse std::io;\n\nfn main() {\n    let mut input = String::new();\n    println!(\"Enter the product type:\");\n    \n    io::stdin().read_line(&mut input).expect(\"Failed to read line\");\n    let product_type = input.trim();\n\n    let category = if product_type.eq_ignore_ascii_case(\"electronics\") {\n        \"Category: Electronics\"\n    } else if product_type.eq_ignore_ascii_case(\"clothing\") {\n        \"Category: Clothing\"\n    } else if product_type.eq_ignore_ascii_case(\"grocery\") {\n        \"Category: Grocery\"\n    } else {\n        \"Category: Other\"\n    };\n\n    println!(\"{}\", category);\n}\n```"
  }
]