[
  {
    "task": "Create a new instance of a class that represents a book, with properties for title, author, and ISBN number.",
    "code": "```rust\nstruct Book {\n    title: String,\n    author: String,\n    isbn: String,\n}\n\nimpl Book {\n    fn new(title: &str, author: &str, isbn: &str) -> Book {\n        Book {\n            title: title.to_string(),\n            author: author.to_string(),\n            isbn: isbn.to_string(),\n        }\n    }\n}\n\nfn main() {\n    let book = Book::new(\"The Rust Programming Language\", \"Steve Klabnik and Carol Nichols\", \"9781593278281\");\n}\n```"
  },
  {
    "task": "Instantiate an object of a class named Car, and set its make, model, and year attributes.",
    "code": "```rust\nstruct Car {\n    make: String,\n    model: String,\n    year: u32,\n}\n\nfn main() {\n    let car = Car {\n        make: String::from(\"Toyota\"),\n        model: String::from(\"Corolla\"),\n        year: 2021,\n    };\n\n    println!(\"Car make: {}, model: {}, year: {}\", car.make, car.model, car.year);\n}\n```"
  },
  {
    "task": "Develop a class to represent a rectangle, then create an object with specific width and height.",
    "code": "```rust\nstruct Rectangle {\n    width: u32,\n    height: u32,\n}\n\nimpl Rectangle {\n    fn new(width: u32, height: u32) -> Self {\n        Rectangle { width, height }\n    }\n}\n\nfn main() {\n    let rect = Rectangle::new(10, 20);\n}\n```"
  },
  {
    "task": "Construct an object of a class Person, initializing it with a name and age.",
    "code": "```rust\nstruct Person {\n    name: String,\n    age: u32,\n}\n\nimpl Person {\n    fn new(name: &str, age: u32) -> Self {\n        Person {\n            name: name.to_string(),\n            age,\n        }\n    }\n}\n\nfn main() {\n    let person = Person::new(\"Alice\", 30);\n}\n```"
  },
  {
    "task": "Create a new object from a class called Circle, initializing it with a radius value.",
    "code": "```rust\nstruct Circle {\n    radius: f64,\n}\n\nimpl Circle {\n    fn new(radius: f64) -> Self {\n        Circle { radius }\n    }\n}\n\nfn main() {\n    let circle = Circle::new(5.0);\n}\n```"
  },
  {
    "task": "Instantiate a class named Student with properties for name, student ID, and GPA.",
    "code": "```rust\nstruct Student {\n    name: String,\n    student_id: u32,\n    gpa: f32,\n}\n\nimpl Student {\n    fn new(name: String, student_id: u32, gpa: f32) -> Student {\n        Student { name, student_id, gpa }\n    }\n}\n\nfn main() {\n    let student = Student::new(String::from(\"Alice\"), 12345, 3.8);\n}\n```"
  },
  {
    "task": "Design a class for a smartphone, then create an instance with specific brand, model, and storage capacity.",
    "code": "```rust\nstruct Smartphone {\n    brand: String,\n    model: String,\n    storage_capacity: u32,\n}\n\nimpl Smartphone {\n    fn new(brand: &str, model: &str, storage_capacity: u32) -> Smartphone {\n        Smartphone {\n            brand: brand.to_string(),\n            model: model.to_string(),\n            storage_capacity,\n        }\n    }\n}\n\nfn main() {\n    let my_phone = Smartphone::new(\"Apple\", \"iPhone 14\", 256);\n}\n```"
  },
  {
    "task": "Create an object of a class named BankAccount, initializing it with an account number and balance.",
    "code": "```rust\nstruct BankAccount {\n    account_number: u32,\n    balance: f64,\n}\n\nimpl BankAccount {\n    fn new(account_number: u32, balance: f64) -> Self {\n        BankAccount { account_number, balance }\n    }\n}\n\nfn main() {\n    let account = BankAccount::new(123456, 1000.0);\n}\n```"
  },
  {
    "task": "Write a class for a movie, then instantiate it with a title, director, and release year.",
    "code": "```rust\nstruct Movie {\n    title: String,\n    director: String,\n    release_year: u32,\n}\n\nimpl Movie {\n    fn new(title: &str, director: &str, release_year: u32) -> Self {\n        Movie {\n            title: title.to_string(),\n            director: director.to_string(),\n            release_year,\n        }\n    }\n}\n\nfn main() {\n    let movie = Movie::new(\"Inception\", \"Christopher Nolan\", 2010);\n}\n```"
  },
  {
    "task": "Define a class representing a point in 2D space and create an object with x and y coordinates.",
    "code": "```rust\nstruct Point {\n    x: f64,\n    y: f64,\n}\n\nimpl Point {\n    fn new(x: f64, y: f64) -> Self {\n        Point { x, y }\n    }\n}\n\nfn main() {\n    let point = Point::new(3.0, 4.0);\n}\n```"
  },
  {
    "task": "Create an instance of a class called Computer with attributes for CPU, RAM, and storage.",
    "code": "```rust\nstruct Computer {\n    cpu: String,\n    ram: u32,\n    storage: u32,\n}\n\nimpl Computer {\n    fn new(cpu: String, ram: u32, storage: u32) -> Self {\n        Computer { cpu, ram, storage }\n    }\n}\n\nfn main() {\n    let my_computer = Computer::new(String::from(\"Intel i7\"), 16, 512);\n}\n```"
  },
  {
    "task": "Design a class for a Song with properties for title, artist, and duration, and instantiate it.",
    "code": "```rust\nstruct Song {\n    title: String,\n    artist: String,\n    duration: u32, // duration in seconds\n}\n\nimpl Song {\n    fn new(title: &str, artist: &str, duration: u32) -> Self {\n        Song {\n            title: title.to_string(),\n            artist: artist.to_string(),\n            duration,\n        }\n    }\n}\n\nfn main() {\n    let song = Song::new(\"Imagine\", \"John Lennon\", 183);\n}\n```"
  },
  {
    "task": "Create a new instance of a class named Pet, initializing it with type, breed, and age.",
    "code": "```rust\nstruct Pet {\n    pet_type: String,\n    breed: String,\n    age: u8,\n}\n\nimpl Pet {\n    fn new(pet_type: &str, breed: &str, age: u8) -> Pet {\n        Pet {\n            pet_type: pet_type.to_string(),\n            breed: breed.to_string(),\n            age,\n        }\n    }\n}\n\nfn main() {\n    let my_pet = Pet::new(\"Dog\", \"Labrador\", 3);\n    // Use my_pet as needed\n}\n```"
  },
  {
    "task": "Instantiate an object of a class named House with attributes for address, number of bedrooms, and price.",
    "code": "```rust\nstruct House {\n    address: String,\n    number_of_bedrooms: u32,\n    price: f64,\n}\n\nfn main() {\n    let my_house = House {\n        address: String::from(\"123 Main St\"),\n        number_of_bedrooms: 3,\n        price: 250000.0,\n    };\n}\n```"
  },
  {
    "task": "Develop a class for a Camera, then create an object with resolution and zoom level attributes.",
    "code": "```rust\nstruct Camera {\n    resolution: (u32, u32),\n    zoom_level: f32,\n}\n\nimpl Camera {\n    fn new(resolution: (u32, u32), zoom_level: f32) -> Camera {\n        Camera {\n            resolution,\n            zoom_level,\n        }\n    }\n}\n\nfn main() {\n    let camera = Camera::new((1920, 1080), 2.5);\n}\n```"
  },
  {
    "task": "Construct an object from a class named Bicycle with properties for brand, type, and gear count.",
    "code": "```rust\nstruct Bicycle {\n    brand: String,\n    bicycle_type: String,\n    gear_count: u32,\n}\n\nimpl Bicycle {\n    fn new(brand: &str, bicycle_type: &str, gear_count: u32) -> Bicycle {\n        Bicycle {\n            brand: brand.to_string(),\n            bicycle_type: bicycle_type.to_string(),\n            gear_count,\n        }\n    }\n}\n\nfn main() {\n    let my_bike = Bicycle::new(\"Giant\", \"Mountain\", 18);\n}\n```"
  },
  {
    "task": "Create a class for a book author with name and nationality, then instantiate it.",
    "code": "```rust\nstruct Author {\n    name: String,\n    nationality: String,\n}\n\nimpl Author {\n    fn new(name: &str, nationality: &str) -> Self {\n        Author {\n            name: name.to_string(),\n            nationality: nationality.to_string(),\n        }\n    }\n}\n\nfn main() {\n    let author = Author::new(\"Leo Tolstoy\", \"Russian\");\n    println!(\"Author: {}, Nationality: {}\", author.name, author.nationality);\n}\n```"
  },
  {
    "task": "Define a class representing a video game with attributes for title, genre, and platform, and create an object.",
    "code": "```rust\nstruct VideoGame {\n    title: String,\n    genre: String,\n    platform: String,\n}\n\nfn main() {\n    let game = VideoGame {\n        title: String::from(\"The Legend of Rust\"),\n        genre: String::from(\"Adventure\"),\n        platform: String::from(\"PC\"),\n    };\n}\n```"
  },
  {
    "task": "Instantiate a class named Plane with properties for airline, model, and capacity.",
    "code": "```rust\nstruct Plane {\n    airline: String,\n    model: String,\n    capacity: u32,\n}\n\nimpl Plane {\n    fn new(airline: String, model: String, capacity: u32) -> Self {\n        Plane {\n            airline,\n            model,\n            capacity,\n        }\n    }\n}\n\nfn main() {\n    let plane = Plane::new(String::from(\"AirlineName\"), String::from(\"ModelType\"), 200);\n}\n```"
  },
  {
    "task": "Create a new object of a class called Lamp, initializing it with color and brightness level.",
    "code": "```rust\nstruct Lamp {\n    color: String,\n    brightness: u8,\n}\n\nimpl Lamp {\n    fn new(color: String, brightness: u8) -> Lamp {\n        Lamp { color, brightness }\n    }\n}\n\nfn main() {\n    let my_lamp = Lamp::new(String::from(\"Red\"), 75);\n}\n```"
  },
  {
    "task": "Design a class for a TV show with properties for title, season, and episode count, then instantiate it.",
    "code": "```rust\nstruct TvShow {\n    title: String,\n    season: u32,\n    episode_count: u32,\n}\n\nimpl TvShow {\n    fn new(title: String, season: u32, episode_count: u32) -> Self {\n        TvShow {\n            title,\n            season,\n            episode_count,\n        }\n    }\n}\n\nfn main() {\n    let show = TvShow::new(String::from(\"My Favorite Show\"), 1, 10);\n}\n```"
  },
  {
    "task": "Instantiate an object of a class named Garden with attributes for size and number of plants.",
    "code": "```rust\nstruct Garden {\n    size: u32,\n    number_of_plants: u32,\n}\n\nimpl Garden {\n    fn new(size: u32, number_of_plants: u32) -> Self {\n        Garden { size, number_of_plants }\n    }\n}\n\nfn main() {\n    let my_garden = Garden::new(100, 25);\n}\n```"
  },
  {
    "task": "Develop a class for a Train, then create an object with properties for type and number of carriages.",
    "code": "```rust\nstruct Train {\n    train_type: String,\n    number_of_carriages: u32,\n}\n\nimpl Train {\n    fn new(train_type: &str, number_of_carriages: u32) -> Self {\n        Train {\n            train_type: train_type.to_string(),\n            number_of_carriages,\n        }\n    }\n}\n\nfn main() {\n    let train = Train::new(\"Freight\", 20);\n    println!(\"Train type: {}, Number of carriages: {}\", train.train_type, train.number_of_carriages);\n}\n```"
  },
  {
    "task": "Define a class representing a planet with attributes for name, size, and distance from the sun, and create an object.",
    "code": "```rust\nstruct Planet {\n    name: String,\n    size: f64,\n    distance_from_sun: f64,\n}\n\nimpl Planet {\n    fn new(name: &str, size: f64, distance_from_sun: f64) -> Planet {\n        Planet {\n            name: name.to_string(),\n            size,\n            distance_from_sun,\n        }\n    }\n}\n\nfn main() {\n    let earth = Planet::new(\"Earth\", 12742.0, 149.6e6);\n}\n```"
  },
  {
    "task": "Create an instance of a class named Fridge with properties for brand and capacity.",
    "code": "```rust\nstruct Fridge {\n    brand: String,\n    capacity: u32,\n}\n\nfn main() {\n    let my_fridge = Fridge {\n        brand: String::from(\"Whirlpool\"),\n        capacity: 350,\n    };\n}\n```"
  },
  {
    "task": "Design a class for a Restaurant with attributes for name, cuisine type, and location, then create an instance.",
    "code": "```rust\nstruct Restaurant {\n    name: String,\n    cuisine_type: String,\n    location: String,\n}\n\nimpl Restaurant {\n    fn new(name: &str, cuisine_type: &str, location: &str) -> Self {\n        Restaurant {\n            name: name.to_string(),\n            cuisine_type: cuisine_type.to_string(),\n            location: location.to_string(),\n        }\n    }\n}\n\nfn main() {\n    let my_restaurant = Restaurant::new(\"The Rusty Spoon\", \"Italian\", \"123 Main St\");\n}\n```"
  },
  {
    "task": "Create a new object from a class named Bookstore, initializing it with name and number of books.",
    "code": "```rust\nstruct Bookstore {\n    name: String,\n    number_of_books: u32,\n}\n\nimpl Bookstore {\n    fn new(name: String, number_of_books: u32) -> Bookstore {\n        Bookstore { name, number_of_books }\n    }\n}\n\nfn main() {\n    let my_bookstore = Bookstore::new(String::from(\"The Rusty Shelf\"), 100);\n}\n```"
  },
  {
    "task": "Instantiate a class named Library with properties for total books and number of members.",
    "code": "```rust\nstruct Library {\n    total_books: u32,\n    number_of_members: u32,\n}\n\nimpl Library {\n    fn new(total_books: u32, number_of_members: u32) -> Self {\n        Library {\n            total_books,\n            number_of_members,\n        }\n    }\n}\n\nfn main() {\n    let library = Library::new(1000, 300);\n}\n```"
  },
  {
    "task": "Write a class for a Beverage with properties for name, type, and volume, and instantiate it.",
    "code": "```rust\nstruct Beverage {\n    name: String,\n    beverage_type: String,\n    volume: f32,\n}\n\nimpl Beverage {\n    fn new(name: &str, beverage_type: &str, volume: f32) -> Beverage {\n        Beverage {\n            name: name.to_string(),\n            beverage_type: beverage_type.to_string(),\n            volume,\n        }\n    }\n}\n\nfn main() {\n    let my_beverage = Beverage::new(\"Coffee\", \"Hot\", 250.0);\n}\n```"
  },
  {
    "task": "Create an object of a class named User with attributes for username, email, and password.",
    "code": "```rust\nstruct User {\n    username: String,\n    email: String,\n    password: String,\n}\n\nimpl User {\n    fn new(username: String, email: String, password: String) -> User {\n        User {\n            username,\n            email,\n            password,\n        }\n    }\n}\n\nfn main() {\n    let user = User::new(\n        String::from(\"example_username\"),\n        String::from(\"example@example.com\"),\n        String::from(\"securepassword\"),\n    );\n}\n```"
  },
  {
    "task": "Define a class for a Laptop with properties for brand, processor, and RAM, then instantiate it.",
    "code": "```rust\nstruct Laptop {\n    brand: String,\n    processor: String,\n    ram: u32,\n}\n\nimpl Laptop {\n    fn new(brand: &str, processor: &str, ram: u32) -> Laptop {\n        Laptop {\n            brand: brand.to_string(),\n            processor: processor.to_string(),\n            ram,\n        }\n    }\n}\n\nfn main() {\n    let my_laptop = Laptop::new(\"Dell\", \"Intel i7\", 16);\n}\n```"
  },
  {
    "task": "Construct an object from a class named Mountain with attributes for name and elevation.",
    "code": "```rust\nstruct Mountain {\n    name: String,\n    elevation: u32,\n}\n\nimpl Mountain {\n    fn new(name: &str, elevation: u32) -> Self {\n        Mountain {\n            name: name.to_string(),\n            elevation,\n        }\n    }\n}\n\nfn main() {\n    let mountain = Mountain::new(\"Everest\", 8848);\n}\n```"
  },
  {
    "task": "Create an instance of a class called Weather with properties for temperature, humidity, and condition.",
    "code": "```rust\nstruct Weather {\n    temperature: f32,\n    humidity: f32,\n    condition: String,\n}\n\nfn main() {\n    let weather_instance = Weather {\n        temperature: 22.5,\n        humidity: 65.0,\n        condition: String::from(\"Sunny\"),\n    };\n\n    // You can use `weather_instance` here\n}\n```"
  },
  {
    "task": "Design a class for a Classroom with attributes for room number and capacity, then create an instance.",
    "code": "```rust\nstruct Classroom {\n    room_number: u32,\n    capacity: u32,\n}\n\nimpl Classroom {\n    fn new(room_number: u32, capacity: u32) -> Self {\n        Classroom {\n            room_number,\n            capacity,\n        }\n    }\n}\n\nfn main() {\n    let classroom = Classroom::new(101, 30);\n}\n```"
  },
  {
    "task": "Instantiate an object of a class named Zoo with properties for name and number of animals.",
    "code": "```rust\nstruct Zoo {\n    name: String,\n    number_of_animals: u32,\n}\n\nimpl Zoo {\n    fn new(name: &str, number_of_animals: u32) -> Self {\n        Zoo {\n            name: name.to_string(),\n            number_of_animals,\n        }\n    }\n}\n\nfn main() {\n    let zoo = Zoo::new(\"Safari Park\", 150);\n}\n```"
  },
  {
    "task": "Develop a class for an Album with properties for name, artist, and release date, then instantiate it.",
    "code": "```rust\nstruct Album {\n    name: String,\n    artist: String,\n    release_date: String,\n}\n\nimpl Album {\n    fn new(name: &str, artist: &str, release_date: &str) -> Self {\n        Album {\n            name: name.to_string(),\n            artist: artist.to_string(),\n            release_date: release_date.to_string(),\n        }\n    }\n}\n\nfn main() {\n    let album = Album::new(\"Album Name\", \"Artist Name\", \"Release Date\");\n}\n```"
  },
  {
    "task": "Create a new object from a class named Hotel, initializing it with name, location, and star rating.",
    "code": "```rust\nstruct Hotel {\n    name: String,\n    location: String,\n    star_rating: u8,\n}\n\nimpl Hotel {\n    fn new(name: &str, location: &str, star_rating: u8) -> Hotel {\n        Hotel {\n            name: name.to_string(),\n            location: location.to_string(),\n            star_rating,\n        }\n    }\n}\n\nfn main() {\n    let hotel = Hotel::new(\"Grand Plaza\", \"New York\", 5);\n}\n```"
  },
  {
    "task": "Write a class for a Recipe with properties for name, ingredients, and cooking time, and instantiate it.",
    "code": "```rust\nstruct Recipe {\n    name: String,\n    ingredients: Vec<String>,\n    cooking_time: u32,\n}\n\nimpl Recipe {\n    fn new(name: String, ingredients: Vec<String>, cooking_time: u32) -> Recipe {\n        Recipe {\n            name,\n            ingredients,\n            cooking_time,\n        }\n    }\n}\n\nfn main() {\n    let recipe = Recipe::new(\n        String::from(\"Pasta\"),\n        vec![String::from(\"noodles\"), String::from(\"sauce\")],\n        20,\n    );\n}\n```"
  },
  {
    "task": "Define a class representing a Conference with attributes for name, date, and number of attendees, and create an object.",
    "code": "```rust\nstruct Conference {\n    name: String,\n    date: String,\n    attendees: u32,\n}\n\nimpl Conference {\n    fn new(name: &str, date: &str, attendees: u32) -> Self {\n        Conference {\n            name: name.to_string(),\n            date: date.to_string(),\n            attendees,\n        }\n    }\n}\n\nfn main() {\n    let conference = Conference::new(\"Tech Summit\", \"2023-10-15\", 150);\n}\n```"
  },
  {
    "task": "Create an instance of a class called Park with properties for name, location, and area.",
    "code": "```rust\nstruct Park {\n    name: String,\n    location: String,\n    area: f64,\n}\n\nimpl Park {\n    fn new(name: &str, location: &str, area: f64) -> Park {\n        Park {\n            name: name.to_string(),\n            location: location.to_string(),\n            area,\n        }\n    }\n}\n\nfn main() {\n    let central_park = Park::new(\"Central Park\", \"New York\", 843.0);\n}\n```"
  },
  {
    "task": "Design a class for a Bicycle with attributes for brand, type, and wheel size, then create an instance.",
    "code": "```rust\nstruct Bicycle {\n    brand: String,\n    bicycle_type: String,\n    wheel_size: u32,\n}\n\nimpl Bicycle {\n    fn new(brand: &str, bicycle_type: &str, wheel_size: u32) -> Self {\n        Bicycle {\n            brand: brand.to_string(),\n            bicycle_type: bicycle_type.to_string(),\n            wheel_size,\n        }\n    }\n}\n\nfn main() {\n    let my_bike = Bicycle::new(\"Trek\", \"Mountain\", 29);\n}\n```"
  },
  {
    "task": "Instantiate an object of a class named Festival with properties for name, location, and duration.",
    "code": "```rust\nstruct Festival {\n    name: String,\n    location: String,\n    duration: u32,\n}\n\nfn main() {\n    let festival = Festival {\n        name: String::from(\"Music Fest\"),\n        location: String::from(\"City Park\"),\n        duration: 3,\n    };\n}\n```"
  },
  {
    "task": "Develop a class for a Ship with properties for name, capacity, and type, then instantiate it.",
    "code": "```rust\nstruct Ship {\n    name: String,\n    capacity: u32,\n    ship_type: String,\n}\n\nimpl Ship {\n    fn new(name: &str, capacity: u32, ship_type: &str) -> Ship {\n        Ship {\n            name: name.to_string(),\n            capacity,\n            ship_type: ship_type.to_string(),\n        }\n    }\n}\n\nfn main() {\n    let ship = Ship::new(\"Titanic\", 3327, \"Cruise\");\n    println!(\"Ship Name: {}\", ship.name);\n    println!(\"Capacity: {}\", ship.capacity);\n    println!(\"Type: {}\", ship.ship_type);\n}\n```"
  },
  {
    "task": "Create an object of a class named Currency with attributes for name, symbol, and exchange rate.",
    "code": "```rust\nstruct Currency {\n    name: String,\n    symbol: String,\n    exchange_rate: f64,\n}\n\nfn main() {\n    let currency = Currency {\n        name: String::from(\"Dollar\"),\n        symbol: String::from(\"$\"),\n        exchange_rate: 1.0,\n    };\n}\n```"
  },
  {
    "task": "Define a class for a Gadget with properties for name, brand, and functionality, then instantiate it.",
    "code": "```rust\nstruct Gadget {\n    name: String,\n    brand: String,\n    functionality: String,\n}\n\nimpl Gadget {\n    fn new(name: &str, brand: &str, functionality: &str) -> Self {\n        Gadget {\n            name: name.to_string(),\n            brand: brand.to_string(),\n            functionality: functionality.to_string(),\n        }\n    }\n}\n\nfn main() {\n    let gadget = Gadget::new(\"Smartphone\", \"TechBrand\", \"Communication\");\n}\n```"
  },
  {
    "task": "Construct an object from a class named Bridge with attributes for name, length, and location.",
    "code": "```rust\nstruct Bridge {\n    name: String,\n    length: f32,\n    location: String,\n}\n\nimpl Bridge {\n    fn new(name: &str, length: f32, location: &str) -> Bridge {\n        Bridge {\n            name: name.to_string(),\n            length,\n            location: location.to_string(),\n        }\n    }\n}\n\nfn main() {\n    let bridge = Bridge::new(\"Golden Gate\", 2737.4, \"San Francisco\");\n    println!(\"Bridge Name: {}\", bridge.name);\n    println!(\"Bridge Length: {} meters\", bridge.length);\n    println!(\"Bridge Location: {}\", bridge.location);\n}\n```"
  },
  {
    "task": "Create an instance of a class called Forest with properties for name, area, and tree species.",
    "code": "```rust\nstruct Forest {\n    name: String,\n    area: f64,\n    tree_species: Vec<String>,\n}\n\nimpl Forest {\n    fn new(name: String, area: f64, tree_species: Vec<String>) -> Forest {\n        Forest { name, area, tree_species }\n    }\n}\n\nfn main() {\n    let forest = Forest::new(\n        String::from(\"Amazon\"),\n        5_500_000.0,\n        vec![String::from(\"Mahogany\"), String::from(\"Cedar\")],\n    );\n}\n```"
  },
  {
    "task": "Design a class for a Sculpture with attributes for title, artist, and material, then create an instance.",
    "code": "```rust\nstruct Sculpture {\n    title: String,\n    artist: String,\n    material: String,\n}\n\nimpl Sculpture {\n    fn new(title: &str, artist: &str, material: &str) -> Sculpture {\n        Sculpture {\n            title: String::from(title),\n            artist: String::from(artist),\n            material: String::from(material),\n        }\n    }\n}\n\nfn main() {\n    let sculpture = Sculpture::new(\"The Thinker\", \"Auguste Rodin\", \"Bronze\");\n}\n```"
  },
  {
    "task": "Instantiate an object of a class named Aquarium with properties for name and number of tanks.",
    "code": "```rust\nstruct Aquarium {\n    name: String,\n    number_of_tanks: u32,\n}\n\nfn main() {\n    let aquarium = Aquarium {\n        name: String::from(\"Ocean World\"),\n        number_of_tanks: 5,\n    };\n}\n```"
  },
  {
    "task": "Develop a class for a Play with properties for title, playwright, and genre, then instantiate it.",
    "code": "```rust\nstruct Play {\n    title: String,\n    playwright: String,\n    genre: String,\n}\n\nimpl Play {\n    fn new(title: &str, playwright: &str, genre: &str) -> Play {\n        Play {\n            title: title.to_string(),\n            playwright: playwright.to_string(),\n            genre: genre.to_string(),\n        }\n    }\n}\n\nfn main() {\n    let my_play = Play::new(\"Hamlet\", \"William Shakespeare\", \"Tragedy\");\n}\n```"
  },
  {
    "task": "Create a new object from a class named Telescope, initializing it with type and focal length.",
    "code": "```rust\nstruct Telescope {\n    type_name: String,\n    focal_length: f64,\n}\n\nimpl Telescope {\n    fn new(type_name: &str, focal_length: f64) -> Telescope {\n        Telescope {\n            type_name: type_name.to_string(),\n            focal_length,\n        }\n    }\n}\n\nfn main() {\n    let telescope = Telescope::new(\"Refractor\", 700.0);\n}\n```"
  },
  {
    "task": "Write a class for a Monument with properties for name, location, and year built, and instantiate it.",
    "code": "```rust\nstruct Monument {\n    name: String,\n    location: String,\n    year_built: u32,\n}\n\nimpl Monument {\n    fn new(name: &str, location: &str, year_built: u32) -> Monument {\n        Monument {\n            name: name.to_string(),\n            location: location.to_string(),\n            year_built,\n        }\n    }\n}\n\nfn main() {\n    let monument = Monument::new(\"Eiffel Tower\", \"Paris\", 1889);\n}\n```"
  },
  {
    "task": "Define a class representing a Star with attributes for name, size, and distance from Earth, and create an object.",
    "code": "```rust\nstruct Star {\n    name: String,\n    size: f64,\n    distance_from_earth: f64,\n}\n\nimpl Star {\n    fn new(name: String, size: f64, distance_from_earth: f64) -> Self {\n        Star {\n            name,\n            size,\n            distance_from_earth,\n        }\n    }\n}\n\nfn main() {\n    let star = Star::new(String::from(\"Sirius\"), 1.71, 8.6);\n}\n```"
  },
  {
    "task": "Create an instance of a class called Festival with properties for name, location, and number of events.",
    "code": "```rust\nstruct Festival {\n    name: String,\n    location: String,\n    number_of_events: u32,\n}\n\nfn main() {\n    let festival = Festival {\n        name: String::from(\"Music Fest\"),\n        location: String::from(\"Central Park\"),\n        number_of_events: 5,\n    };\n}\n```"
  },
  {
    "task": "Design a class for a Clock with attributes for brand, type, and display, then create an instance.",
    "code": "```rust\nstruct Clock {\n    brand: String,\n    clock_type: String,\n    display: String,\n}\n\nimpl Clock {\n    fn new(brand: &str, clock_type: &str, display: &str) -> Clock {\n        Clock {\n            brand: brand.to_string(),\n            clock_type: clock_type.to_string(),\n            display: display.to_string(),\n        }\n    }\n}\n\nfn main() {\n    let my_clock = Clock::new(\"Seiko\", \"Analog\", \"Digital\");\n    println!(\"Clock brand: {}, type: {}, display: {}\", my_clock.brand, my_clock.clock_type, my_clock.display);\n}\n```"
  },
  {
    "task": "Instantiate an object of a class named Stadium with properties for name, capacity, and location.",
    "code": "```rust\nstruct Stadium {\n    name: String,\n    capacity: u32,\n    location: String,\n}\n\nfn main() {\n    let stadium = Stadium {\n        name: String::from(\"National Stadium\"),\n        capacity: 50000,\n        location: String::from(\"City Center\"),\n    };\n}\n```"
  },
  {
    "task": "Develop a class for a Potion with properties for name, effect, and duration, then instantiate it.",
    "code": "```rust\nstruct Potion {\n    name: String,\n    effect: String,\n    duration: u32,\n}\n\nimpl Potion {\n    fn new(name: &str, effect: &str, duration: u32) -> Potion {\n        Potion {\n            name: name.to_string(),\n            effect: effect.to_string(),\n            duration,\n        }\n    }\n}\n\nfn main() {\n    let potion = Potion::new(\"Healing Potion\", \"Restores health\", 5);\n    println!(\"Potion: {}, Effect: {}, Duration: {} minutes\", potion.name, potion.effect, potion.duration);\n}\n```"
  },
  {
    "task": "Create an object of a class named Planet with attributes for name, mass, and orbital period.",
    "code": "```rust\nstruct Planet {\n    name: String,\n    mass: f64,\n    orbital_period: f64,\n}\n\nfn main() {\n    let earth = Planet {\n        name: String::from(\"Earth\"),\n        mass: 5.972e24,\n        orbital_period: 365.25,\n    };\n}\n```"
  },
  {
    "task": "Define a class for a Lighthouse with properties for name, height, and light range, then instantiate it.",
    "code": "```rust\nstruct Lighthouse {\n    name: String,\n    height: f32,\n    light_range: f32,\n}\n\nimpl Lighthouse {\n    fn new(name: String, height: f32, light_range: f32) -> Self {\n        Lighthouse {\n            name,\n            height,\n            light_range,\n        }\n    }\n}\n\nfn main() {\n    let lighthouse = Lighthouse::new(\n        String::from(\"Beacon of Hope\"),\n        45.0,\n        20.0,\n    );\n}\n```"
  },
  {
    "task": "Construct an object from a class named Volcano with attributes for name, height, and eruption history.",
    "code": "```rust\nstruct Volcano {\n    name: String,\n    height: f64,\n    eruption_history: Vec<String>,\n}\n\nimpl Volcano {\n    fn new(name: String, height: f64, eruption_history: Vec<String>) -> Self {\n        Volcano {\n            name,\n            height,\n            eruption_history,\n        }\n    }\n}\n\nfn main() {\n    let eruption_history = vec![\n        String::from(\"2021\"),\n        String::from(\"2010\"),\n        String::from(\"1995\"),\n    ];\n    let my_volcano = Volcano::new(String::from(\"Mount Example\"), 3482.0, eruption_history);\n}\n```"
  },
  {
    "task": "Create an instance of a class called Sculpture with properties for title, artist, and year created.",
    "code": "```rust\nstruct Sculpture {\n    title: String,\n    artist: String,\n    year_created: u32,\n}\n\nimpl Sculpture {\n    fn new(title: &str, artist: &str, year_created: u32) -> Self {\n        Sculpture {\n            title: title.to_string(),\n            artist: artist.to_string(),\n            year_created,\n        }\n    }\n}\n\nfn main() {\n    let sculpture = Sculpture::new(\"The Thinker\", \"Auguste Rodin\", 1902);\n}\n```"
  },
  {
    "task": "Design a class for a Ship with attributes for name, type, and displacement, then create an instance.",
    "code": "```rust\nstruct Ship {\n    name: String,\n    ship_type: String,\n    displacement: f32,\n}\n\nimpl Ship {\n    fn new(name: &str, ship_type: &str, displacement: f32) -> Ship {\n        Ship {\n            name: name.to_string(),\n            ship_type: ship_type.to_string(),\n            displacement,\n        }\n    }\n}\n\nfn main() {\n    let ship = Ship::new(\"Titanic\", \"Passenger\", 52310.0);\n}\n```"
  },
  {
    "task": "Instantiate an object of a class named Opera with properties for title, composer, and act count.",
    "code": "```rust\nstruct Opera {\n    title: String,\n    composer: String,\n    act_count: u32,\n}\n\nimpl Opera {\n    fn new(title: &str, composer: &str, act_count: u32) -> Self {\n        Opera {\n            title: title.to_string(),\n            composer: composer.to_string(),\n            act_count,\n        }\n    }\n}\n\nfn main() {\n    let opera = Opera::new(\"La Traviata\", \"Giuseppe Verdi\", 3);\n}\n```"
  },
  {
    "task": "Develop a class for a Waterfall with properties for name, height, and flow rate, then instantiate it.",
    "code": "```rust\nstruct Waterfall {\n    name: String,\n    height: f64,\n    flow_rate: f64,\n}\n\nimpl Waterfall {\n    fn new(name: String, height: f64, flow_rate: f64) -> Waterfall {\n        Waterfall {\n            name,\n            height,\n            flow_rate,\n        }\n    }\n}\n\nfn main() {\n    let waterfall = Waterfall::new(String::from(\"Niagara Falls\"), 51.0, 2800.0);\n}\n```"
  },
  {
    "task": "Create a new object from a class named Castle, initializing it with name, location, and year built.",
    "code": "```rust\nstruct Castle {\n    name: String,\n    location: String,\n    year_built: u32,\n}\n\nimpl Castle {\n    fn new(name: &str, location: &str, year_built: u32) -> Self {\n        Castle {\n            name: name.to_string(),\n            location: location.to_string(),\n            year_built,\n        }\n    }\n}\n\nfn main() {\n    let my_castle = Castle::new(\"Winterfell\", \"North\", 1500);\n}\n```"
  },
  {
    "task": "Write a class for a Cat with properties for name, breed, and color, and instantiate it.",
    "code": "```rust\nstruct Cat {\n    name: String,\n    breed: String,\n    color: String,\n}\n\nimpl Cat {\n    fn new(name: &str, breed: &str, color: &str) -> Cat {\n        Cat {\n            name: name.to_string(),\n            breed: breed.to_string(),\n            color: color.to_string(),\n        }\n    }\n}\n\nfn main() {\n    let my_cat = Cat::new(\"Whiskers\", \"Siamese\", \"Brown\");\n}\n```"
  },
  {
    "task": "Define a class representing a Spaceship with attributes for name, speed, and crew capacity, and create an object.",
    "code": "```rust\nstruct Spaceship {\n    name: String,\n    speed: f64,\n    crew_capacity: u32,\n}\n\nfn main() {\n    let spaceship = Spaceship {\n        name: String::from(\"Galactic Voyager\"),\n        speed: 75000.0,\n        crew_capacity: 100,\n    };\n}\n```"
  },
  {
    "task": "Create an instance of a class called Robot with properties for name, model, and function.",
    "code": "```rust\nstruct Robot {\n    name: String,\n    model: String,\n    function: String,\n}\n\nimpl Robot {\n    fn new(name: &str, model: &str, function: &str) -> Robot {\n        Robot {\n            name: name.to_string(),\n            model: model.to_string(),\n            function: function.to_string(),\n        }\n    }\n}\n\nfn main() {\n    let robot_instance = Robot::new(\"Robo-One\", \"RX-78\", \"Welding\");\n}\n```"
  },
  {
    "task": "Design a class for a Computer Program with attributes for name, language, and lines of code, then create an instance.",
    "code": "```rust\nstruct ComputerProgram {\n    name: String,\n    language: String,\n    lines_of_code: u32,\n}\n\nimpl ComputerProgram {\n    fn new(name: &str, language: &str, lines_of_code: u32) -> Self {\n        ComputerProgram {\n            name: name.to_string(),\n            language: language.to_string(),\n            lines_of_code,\n        }\n    }\n}\n\nfn main() {\n    let program = ComputerProgram::new(\"MyApp\", \"Rust\", 1500);\n}\n```"
  },
  {
    "task": "Instantiate an object of a class named Mountain with properties for name, range, and prominence.",
    "code": "```rust\nstruct Mountain {\n    name: String,\n    range: String,\n    prominence: u32,\n}\n\nfn main() {\n    let mountain = Mountain {\n        name: String::from(\"Mount Everest\"),\n        range: String::from(\"Himalayas\"),\n        prominence: 8848, // in meters\n    };\n}\n```"
  },
  {
    "task": "Develop a class for a Painting with properties for title, artist, and dimensions, then instantiate it.",
    "code": "```rust\nstruct Painting {\n    title: String,\n    artist: String,\n    dimensions: (f32, f32),\n}\n\nimpl Painting {\n    fn new(title: &str, artist: &str, width: f32, height: f32) -> Painting {\n        Painting {\n            title: title.to_string(),\n            artist: artist.to_string(),\n            dimensions: (width, height),\n        }\n    }\n}\n\nfn main() {\n    let painting = Painting::new(\"Starry Night\", \"Vincent van Gogh\", 73.7, 92.1);\n}\n```"
  },
  {
    "task": "Create an object of a class named Symphony with attributes for title, composer, and movement count.",
    "code": "```rust\nstruct Symphony {\n    title: String,\n    composer: String,\n    movement_count: u32,\n}\n\nimpl Symphony {\n    fn new(title: &str, composer: &str, movement_count: u32) -> Self {\n        Symphony {\n            title: title.to_string(),\n            composer: composer.to_string(),\n            movement_count,\n        }\n    }\n}\n\nfn main() {\n    let symphony = Symphony::new(\"Symphony No. 5\", \"Ludwig van Beethoven\", 4);\n}\n```"
  },
  {
    "task": "Define a class for a Dinosaur with properties for name, period, and diet, then instantiate it.",
    "code": "```rust\nstruct Dinosaur {\n    name: String,\n    period: String,\n    diet: String,\n}\n\nimpl Dinosaur {\n    fn new(name: &str, period: &str, diet: &str) -> Dinosaur {\n        Dinosaur {\n            name: name.to_string(),\n            period: period.to_string(),\n            diet: diet.to_string(),\n        }\n    }\n}\n\nfn main() {\n    let dinosaur = Dinosaur::new(\"Tyrannosaurus\", \"Cretaceous\", \"Carnivore\");\n}\n```"
  },
  {
    "task": "Construct an object from a class named River with attributes for name, length, and basin size.",
    "code": "```rust\nstruct River {\n    name: String,\n    length: f64,\n    basin_size: f64,\n}\n\nfn main() {\n    let river = River {\n        name: String::from(\"Amazon\"),\n        length: 6400.0,\n        basin_size: 7050000.0,\n    };\n}\n```"
  },
  {
    "task": "Create an instance of a class called Instrument with properties for name, type, and material.",
    "code": "```rust\nstruct Instrument {\n    name: String,\n    type_: String,\n    material: String,\n}\n\nfn main() {\n    let instrument = Instrument {\n        name: String::from(\"Guitar\"),\n        type_: String::from(\"String\"),\n        material: String::from(\"Wood\"),\n    };\n}\n```"
  },
  {
    "task": "Design a class for a Planetarium with attributes for name, location, and dome size, then create an instance.",
    "code": "```rust\nstruct Planetarium {\n    name: String,\n    location: String,\n    dome_size: f64,\n}\n\nimpl Planetarium {\n    fn new(name: &str, location: &str, dome_size: f64) -> Planetarium {\n        Planetarium {\n            name: name.to_string(),\n            location: location.to_string(),\n            dome_size,\n        }\n    }\n}\n\nfn main() {\n    let planetarium = Planetarium::new(\"Galactic View\", \"Springfield\", 30.5);\n}\n```"
  },
  {
    "task": "Instantiate an object of a class named Island with properties for name, area, and population.",
    "code": "```rust\nstruct Island {\n    name: String,\n    area: f64,\n    population: u64,\n}\n\nfn main() {\n    let island = Island {\n        name: String::from(\"Paradise Island\"),\n        area: 123.45,\n        population: 10000,\n    };\n}\n```"
  },
  {
    "task": "Develop a class for a Space Station with properties for name, crew size, and modules, then instantiate it.",
    "code": "```rust\nstruct SpaceStation {\n    name: String,\n    crew_size: u32,\n    modules: Vec<String>,\n}\n\nimpl SpaceStation {\n    fn new(name: &str, crew_size: u32, modules: Vec<String>) -> Self {\n        SpaceStation {\n            name: name.to_string(),\n            crew_size,\n            modules,\n        }\n    }\n}\n\nfn main() {\n    let station_name = \"International Space Station\";\n    let crew_size = 6;\n    let modules = vec![\"Habitat\".to_string(), \"Laboratory\".to_string(), \"Command\".to_string()];\n\n    let space_station = SpaceStation::new(station_name, crew_size, modules);\n}\n```"
  },
  {
    "task": "Create a new object from a class named Dinosaur, initializing it with species and period.",
    "code": "```rust\nstruct Dinosaur {\n    species: String,\n    period: String,\n}\n\nimpl Dinosaur {\n    fn new(species: &str, period: &str) -> Self {\n        Dinosaur {\n            species: species.to_string(),\n            period: period.to_string(),\n        }\n    }\n}\n\nfn main() {\n    let dino = Dinosaur::new(\"Tyrannosaurus Rex\", \"Cretaceous\");\n}\n```"
  },
  {
    "task": "Write a class for a Tree with properties for species, height, and age, and instantiate it.",
    "code": "```rust\nstruct Tree {\n    species: String,\n    height: f32,\n    age: u32,\n}\n\nimpl Tree {\n    fn new(species: &str, height: f32, age: u32) -> Tree {\n        Tree {\n            species: species.to_string(),\n            height,\n            age,\n        }\n    }\n}\n\nfn main() {\n    let tree = Tree::new(\"Oak\", 5.0, 10);\n}\n```"
  },
  {
    "task": "Define a class representing a Firework with attributes for name, color, and duration, and create an object.",
    "code": "```rust\nstruct Firework {\n    name: String,\n    color: String,\n    duration: u32,\n}\n\nfn main() {\n    let firework = Firework {\n        name: String::from(\"Sky Blaster\"),\n        color: String::from(\"Red\"),\n        duration: 10,\n    };\n}\n```"
  },
  {
    "task": "Create an instance of a class called ComicBook with properties for title, author, and issue number.",
    "code": "```rust\nstruct ComicBook {\n    title: String,\n    author: String,\n    issue_number: u32,\n}\n\nfn main() {\n    let comic = ComicBook {\n        title: String::from(\"The Amazing Spider-Man\"),\n        author: String::from(\"Stan Lee\"),\n        issue_number: 1,\n    };\n}\n```"
  },
  {
    "task": "Design a class for a Metropolis with attributes for name, population, and GDP, then create an instance.",
    "code": "```rust\nstruct Metropolis {\n    name: String,\n    population: u64,\n    gdp: f64,\n}\n\nimpl Metropolis {\n    fn new(name: &str, population: u64, gdp: f64) -> Metropolis {\n        Metropolis {\n            name: name.to_string(),\n            population,\n            gdp,\n        }\n    }\n}\n\nfn main() {\n    let metropolis_instance = Metropolis::new(\"Fictional City\", 5000000, 250000000000.0);\n}\n```"
  },
  {
    "task": "Instantiate an object of a class named Dragon with properties for name, element, and age.",
    "code": "```rust\nstruct Dragon {\n    name: String,\n    element: String,\n    age: u32,\n}\n\nfn main() {\n    let dragon = Dragon {\n        name: String::from(\"Smaug\"),\n        element: String::from(\"Fire\"),\n        age: 200,\n    };\n}\n```"
  },
  {
    "task": "Develop a class for a Novel with properties for title, author, and genre, then instantiate it.",
    "code": "```rust\nstruct Novel {\n    title: String,\n    author: String,\n    genre: String,\n}\n\nimpl Novel {\n    fn new(title: &str, author: &str, genre: &str) -> Self {\n        Novel {\n            title: title.to_string(),\n            author: author.to_string(),\n            genre: genre.to_string(),\n        }\n    }\n}\n\nfn main() {\n    let novel = Novel::new(\"1984\", \"George Orwell\", \"Dystopian\");\n}\n```"
  },
  {
    "task": "Create an object of a class named Satellite with attributes for name, orbit, and mission.",
    "code": "```rust\nstruct Satellite {\n    name: String,\n    orbit: String,\n    mission: String,\n}\n\nimpl Satellite {\n    fn new(name: &str, orbit: &str, mission: &str) -> Satellite {\n        Satellite {\n            name: name.to_string(),\n            orbit: orbit.to_string(),\n            mission: mission.to_string(),\n        }\n    }\n}\n\nfn main() {\n    let satellite = Satellite::new(\"Hubble\", \"Low Earth Orbit\", \"Space Observation\");\n}\n```"
  },
  {
    "task": "Define a class for a Castle with properties for name, location, and architectural style, then instantiate it.",
    "code": "```rust\nstruct Castle {\n    name: String,\n    location: String,\n    architectural_style: String,\n}\n\nimpl Castle {\n    fn new(name: &str, location: &str, architectural_style: &str) -> Self {\n        Castle {\n            name: name.to_string(),\n            location: location.to_string(),\n            architectural_style: architectural_style.to_string(),\n        }\n    }\n}\n\nfn main() {\n    let my_castle = Castle::new(\"Winterfell\", \"The North\", \"Medieval\");\n}\n```"
  },
  {
    "task": "Construct an object from a class named Jungle with attributes for name, area, and biodiversity.",
    "code": "```rust\nstruct Jungle {\n    name: String,\n    area: f64,\n    biodiversity: u32,\n}\n\nimpl Jungle {\n    fn new(name: String, area: f64, biodiversity: u32) -> Self {\n        Jungle { name, area, biodiversity }\n    }\n}\n\nfn main() {\n    let jungle = Jungle::new(String::from(\"Amazon\"), 5_500_000.0, 3000);\n    println!(\"Jungle Name: {}, Area: {}, Biodiversity: {}\", jungle.name, jungle.area, jungle.biodiversity);\n}\n```"
  },
  {
    "task": "Create an instance of a class called Dinosaur with properties for species, size, and diet.",
    "code": "```rust\nstruct Dinosaur {\n    species: String,\n    size: String,\n    diet: String,\n}\n\nimpl Dinosaur {\n    fn new(species: &str, size: &str, diet: &str) -> Dinosaur {\n        Dinosaur {\n            species: species.to_string(),\n            size: size.to_string(),\n            diet: diet.to_string(),\n        }\n    }\n}\n\nfn main() {\n    let dinosaur = Dinosaur::new(\"Tyrannosaurus Rex\", \"Large\", \"Carnivore\");\n}\n```"
  },
  {
    "task": "Design a class for a Superhero with attributes for name, powers, and alias, then create an instance.",
    "code": "```rust\nstruct Superhero {\n    name: String,\n    powers: Vec<String>,\n    alias: String,\n}\n\nimpl Superhero {\n    fn new(name: &str, powers: Vec<&str>, alias: &str) -> Superhero {\n        Superhero {\n            name: name.to_string(),\n            powers: powers.into_iter().map(|s| s.to_string()).collect(),\n            alias: alias.to_string(),\n        }\n    }\n}\n\nfn main() {\n    let superhero = Superhero::new(\"Clark Kent\", vec![\"Flying\", \"Super Strength\"], \"Superman\");\n}\n```"
  }
]