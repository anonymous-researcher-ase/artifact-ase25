[
  {
    "task": "Write a function that takes two numbers and returns their sum.",
    "code": "```rust\nfn add_numbers(a: i32, b: i32) -> i32 {\n    a + b\n}\n```"
  },
  {
    "task": "Create a program that calculates the difference between two given integers.",
    "code": "```rust\nfn main() {\n    let a: i32 = 10; // Example integer\n    let b: i32 = 5;  // Example integer\n    let difference = a - b;\n    println!(\"The difference is: {}\", difference);\n}\n```"
  },
  {
    "task": "Design a function to multiply two floating-point numbers and return the result.",
    "code": "```rust\nfn multiply(a: f64, b: f64) -> f64 {\n    a * b\n}\n```"
  },
  {
    "task": "Implement a function that divides two numbers and handles division by zero exceptions.",
    "code": "```rust\nfn divide_numbers(numerator: f64, denominator: f64) -> Result<f64, String> {\n    if denominator == 0.0 {\n        Err(String::from(\"Division by zero error\"))\n    } else {\n        Ok(numerator / denominator)\n    }\n}\n\nfn main() {\n    match divide_numbers(10.0, 2.0) {\n        Ok(result) => println!(\"Result: {}\", result),\n        Err(e) => println!(\"Error: {}\", e),\n    }\n\n    match divide_numbers(10.0, 0.0) {\n        Ok(result) => println!(\"Result: {}\", result),\n        Err(e) => println!(\"Error: {}\", e),\n    }\n}\n```"
  },
  {
    "task": "Build a calculator that can perform addition, subtraction, multiplication, and division on user-provided inputs.",
    "code": "```rust\nuse std::io;\n\nfn main() {\n    let mut input = String::new();\n\n    println!(\"Enter first number:\");\n    io::stdin().read_line(&mut input).expect(\"Failed to read line\");\n    let num1: f64 = input.trim().parse().expect(\"Please type a number!\");\n\n    input.clear();\n    println!(\"Enter second number:\");\n    io::stdin().read_line(&mut input).expect(\"Failed to read line\");\n    let num2: f64 = input.trim().parse().expect(\"Please type a number!\");\n\n    input.clear();\n    println!(\"Enter operation (+, -, *, /):\");\n    io::stdin().read_line(&mut input).expect(\"Failed to read line\");\n    let operation = input.trim();\n\n    let result = match operation {\n        \"+\" => num1 + num2,\n        \"-\" => num1 - num2,\n        \"*\" => num1 * num2,\n        \"/\" => num1 / num2,\n        _ => {\n            println!(\"Invalid operation\");\n            return;\n        }\n    };\n\n    println!(\"Result: {}\", result);\n}\n```"
  },
  {
    "task": "Write a script to compute the average of a list of numbers using arithmetic operations.",
    "code": "```rust\nfn compute_average(numbers: &[f64]) -> f64 {\n    let sum: f64 = numbers.iter().sum();\n    sum / numbers.len() as f64\n}\n\nfn main() {\n    let numbers = vec![1.0, 2.0, 3.0, 4.0, 5.0];\n    let average = compute_average(&numbers);\n    println!(\"The average is: {}\", average);\n}\n```"
  },
  {
    "task": "Create a function that returns the remainder of the division of two integers.",
    "code": "```rust\nfn remainder_of_division(a: i32, b: i32) -> i32 {\n    a % b\n}\n\nfn main() {\n    let result = remainder_of_division(10, 3);\n    println!(\"The remainder is: {}\", result);\n}\n```"
  },
  {
    "task": "Develop a function that can add a variable number of arguments and return the total.",
    "code": "```rust\nfn sum_of_args(args: &[i32]) -> i32 {\n    args.iter().sum()\n}\n\nfn main() {\n    let numbers = vec![1, 2, 3, 4, 5];\n    let total = sum_of_args(&numbers);\n    println!(\"The total is: {}\", total);\n}\n```"
  },
  {
    "task": "Write a program that subtracts a series of numbers from an initial value.",
    "code": "```rust\nfn main() {\n    let initial_value = 100;\n    let numbers_to_subtract = vec![10, 20, 30, 5, 15];\n    \n    let result = numbers_to_subtract.iter().fold(initial_value, |acc, &x| acc - x);\n    \n    println!(\"The result of the subtraction is: {}\", result);\n}\n```"
  },
  {
    "task": "Implement a function that multiplies all elements in an array and returns the product.",
    "code": "```rust\nfn multiply_elements(arr: &[i32]) -> i32 {\n    arr.iter().product()\n}\n\nfn main() {\n    let numbers = [1, 2, 3, 4, 5];\n    let result = multiply_elements(&numbers);\n    println!(\"The product is: {}\", result);\n}\n```"
  },
  {
    "task": "Design a program that divides a number by another and rounds the result to two decimal places.",
    "code": "```rust\nfn main() {\n    let numerator: f64 = 10.0;\n    let denominator: f64 = 3.0;\n\n    let result = numerator / denominator;\n    let rounded_result = (result * 100.0).round() / 100.0;\n\n    println!(\"{:.2}\", rounded_result);\n}\n```"
  },
  {
    "task": "Create a function that performs arithmetic operations on complex numbers.",
    "code": "```rust\nstruct Complex {\n    real: f64,\n    imag: f64,\n}\n\nimpl Complex {\n    fn new(real: f64, imag: f64) -> Complex {\n        Complex { real, imag }\n    }\n\n    fn add(&self, other: &Complex) -> Complex {\n        Complex::new(self.real + other.real, self.imag + other.imag)\n    }\n\n    fn sub(&self, other: &Complex) -> Complex {\n        Complex::new(self.real - other.real, self.imag - other.imag)\n    }\n\n    fn mul(&self, other: &Complex) -> Complex {\n        Complex::new(\n            self.real * other.real - self.imag * other.imag,\n            self.real * other.imag + self.imag * other.real,\n        )\n    }\n\n    fn div(&self, other: &Complex) -> Complex {\n        let denom = other.real * other.real + other.imag * other.imag;\n        Complex::new(\n            (self.real * other.real + self.imag * other.imag) / denom,\n            (self.imag * other.real - self.real * other.imag) / denom,\n        )\n    }\n}\n\nfn main() {\n    let c1 = Complex::new(3.0, 2.0);\n    let c2 = Complex::new(1.0, 7.0);\n\n    let sum = c1.add(&c2);\n    let difference = c1.sub(&c2);\n    let product = c1.mul(&c2);\n    let quotient = c1.div(&c2);\n\n    println!(\"Sum: {} + {}i\", sum.real, sum.imag);\n    println!(\"Difference: {} + {}i\", difference.real, difference.imag);\n    println!(\"Product: {} + {}i\", product.real, product.imag);\n    println!(\"Quotient: {} + {}i\", quotient.real, quotient.imag);\n}\n```"
  },
  {
    "task": "Write a function to calculate the area of a rectangle given its length and width using multiplication.",
    "code": "```rust\nfn calculate_area(length: f64, width: f64) -> f64 {\n    length * width\n}\n```"
  },
  {
    "task": "Build a program that converts a price in dollars to another currency using multiplication with exchange rates.",
    "code": "```rust\nfn convert_currency(price_in_dollars: f64, exchange_rate: f64) -> f64 {\n    price_in_dollars * exchange_rate\n}\n\nfn main() {\n    let price_in_dollars = 100.0; // Example price in dollars\n    let exchange_rate = 0.85; // Example exchange rate (e.g., USD to EUR)\n\n    let converted_price = convert_currency(price_in_dollars, exchange_rate);\n    println!(\"The converted price is: {}\", converted_price);\n}\n```"
  },
  {
    "task": "Implement a function that checks if a number is divisible by another and returns a boolean.",
    "code": "```rust\nfn is_divisible_by(dividend: i32, divisor: i32) -> bool {\n    if divisor == 0 {\n        return false;\n    }\n    dividend % divisor == 0\n}\n\nfn main() {\n    let result = is_divisible_by(10, 2);\n    println!(\"{}\", result); // true\n\n    let result = is_divisible_by(10, 3);\n    println!(\"{}\", result); // false\n}\n```"
  },
  {
    "task": "Write a script to sum the digits of an integer using arithmetic operations.",
    "code": "```rust\nfn sum_of_digits(mut n: i32) -> i32 {\n    let mut sum = 0;\n    n = n.abs();\n    while n > 0 {\n        sum += n % 10;\n        n /= 10;\n    }\n    sum\n}\n\nfn main() {\n    let number = 12345;\n    let result = sum_of_digits(number);\n    println!(\"Sum of digits: {}\", result);\n}\n```"
  },
  {
    "task": "Develop a function that applies a discount percentage to a price using subtraction and multiplication.",
    "code": "```rust\nfn apply_discount(price: f64, discount_percentage: f64) -> f64 {\n    let discount_amount = price * (discount_percentage / 100.0);\n    price - discount_amount\n}\n\nfn main() {\n    let price = 100.0;\n    let discount_percentage = 15.0;\n    let discounted_price = apply_discount(price, discount_percentage);\n    println!(\"The discounted price is: {}\", discounted_price);\n}\n```"
  },
  {
    "task": "Create a program to calculate the yearly salary given an hourly wage and hours worked per week.",
    "code": "```rust\nfn calculate_yearly_salary(hourly_wage: f64, hours_per_week: f64) -> f64 {\n    let weeks_per_year = 52.0;\n    hourly_wage * hours_per_week * weeks_per_year\n}\n\nfn main() {\n    let hourly_wage = 20.0; // Example hourly wage\n    let hours_per_week = 40.0; // Example hours worked per week\n    let yearly_salary = calculate_yearly_salary(hourly_wage, hours_per_week);\n    println!(\"Yearly Salary: ${:.2}\", yearly_salary);\n}\n```"
  },
  {
    "task": "Design a function that calculates the compound interest over a given period using arithmetic operations.",
    "code": "```rust\nfn calculate_compound_interest(principal: f64, rate: f64, times: u32, years: u32) -> f64 {\n    let amount = principal * (1.0 + rate / times as f64).powf((times * years) as f64);\n    amount\n}\n\nfn main() {\n    let principal = 1000.0;\n    let rate = 0.05;\n    let times = 4;\n    let years = 10;\n    let compound_interest = calculate_compound_interest(principal, rate, times, years);\n    println!(\"Compound Interest: {:.2}\", compound_interest);\n}\n```"
  },
  {
    "task": "Write a program that scales a 2D point by a given factor using multiplication.",
    "code": "```rust\nstruct Point {\n    x: f64,\n    y: f64,\n}\n\nfn scale_point(point: &Point, factor: f64) -> Point {\n    Point {\n        x: point.x * factor,\n        y: point.y * factor,\n    }\n}\n\nfn main() {\n    let point = Point { x: 3.0, y: 4.0 };\n    let factor = 2.5;\n    let scaled_point = scale_point(&point, factor);\n    println!(\"Scaled Point: ({}, {})\", scaled_point.x, scaled_point.y);\n}\n```"
  },
  {
    "task": "Implement a function that calculates the perimeter of a triangle given its side lengths.",
    "code": "```rust\nfn calculate_perimeter(a: f64, b: f64, c: f64) -> f64 {\n    a + b + c\n}\n\nfn main() {\n    let side1 = 5.0;\n    let side2 = 7.0;\n    let side3 = 10.0;\n    let perimeter = calculate_perimeter(side1, side2, side3);\n    println!(\"The perimeter of the triangle is: {}\", perimeter);\n}\n```"
  },
  {
    "task": "Create a function to determine if three sides can form a right triangle using the Pythagorean theorem.",
    "code": "```rust\nfn is_right_triangle(a: f64, b: f64, c: f64) -> bool {\n    let mut sides = [a, b, c];\n    sides.sort_by(|x, y| x.partial_cmp(y).unwrap());\n    (sides[0].powi(2) + sides[1].powi(2) - sides[2].powi(2)).abs() < f64::EPSILON\n}\n\nfn main() {\n    let a = 3.0;\n    let b = 4.0;\n    let c = 5.0;\n    println!(\"Can form right triangle: {}\", is_right_triangle(a, b, c));\n}\n```"
  },
  {
    "task": "Write a script that calculates the total cost of items in a shopping cart using addition.",
    "code": "```rust\nfn main() {\n    let prices = vec![12.99, 23.50, 9.99, 5.25, 14.75];\n    let total_cost: f64 = prices.iter().sum();\n    println!(\"Total cost: ${:.2}\", total_cost);\n}\n```"
  },
  {
    "task": "Develop a function that returns the quotient and remainder of a division operation.",
    "code": "```rust\nfn division_quotient_remainder(dividend: i32, divisor: i32) -> (i32, i32) {\n    let quotient = dividend / divisor;\n    let remainder = dividend % divisor;\n    (quotient, remainder)\n}\n\nfn main() {\n    let dividend = 10;\n    let divisor = 3;\n    let (quotient, remainder) = division_quotient_remainder(dividend, divisor);\n    println!(\"Quotient: {}, Remainder: {}\", quotient, remainder);\n}\n```"
  },
  {
    "task": "Build a program that simulates a basic checkout system using arithmetic operations for totals and discounts.",
    "code": "```rust\nuse std::io;\n\nfn main() {\n    let mut input = String::new();\n\n    println!(\"Enter the price of the item: \");\n    io::stdin().read_line(&mut input).expect(\"Failed to read line\");\n    let price: f64 = input.trim().parse().expect(\"Please enter a valid number\");\n\n    input.clear();\n    println!(\"Enter the quantity of the item: \");\n    io::stdin().read_line(&mut input).expect(\"Failed to read line\");\n    let quantity: u32 = input.trim().parse().expect(\"Please enter a valid number\");\n\n    input.clear();\n    println!(\"Enter the discount percentage (0-100): \");\n    io::stdin().read_line(&mut input).expect(\"Failed to read line\");\n    let discount: f64 = input.trim().parse().expect(\"Please enter a valid number\");\n\n    let total = price * quantity as f64;\n    let discount_amount = total * (discount / 100.0);\n    let final_total = total - discount_amount;\n\n    println!(\"Total price before discount: ${:.2}\", total);\n    println!(\"Discount amount: ${:.2}\", discount_amount);\n    println!(\"Total price after discount: ${:.2}\", final_total);\n}\n```"
  },
  {
    "task": "Implement a function to calculate the distance between two points on a plane using subtraction and square roots.",
    "code": "```rust\nfn distance(x1: f64, y1: f64, x2: f64, y2: f64) -> f64 {\n    let dx = x2 - x1;\n    let dy = y2 - y1;\n    (dx.powi(2) + dy.powi(2)).sqrt()\n}\n\nfn main() {\n    let x1 = 1.0;\n    let y1 = 2.0;\n    let x2 = 4.0;\n    let y2 = 6.0;\n    \n    let dist = distance(x1, y1, x2, y2);\n    println!(\"The distance between the points is: {}\", dist);\n}\n```"
  },
  {
    "task": "Write a function that calculates the speed of a vehicle given distance and time using division.",
    "code": "```rust\nfn calculate_speed(distance: f64, time: f64) -> f64 {\n    distance / time\n}\n\nfn main() {\n    let distance = 100.0; // Example distance in km\n    let time = 2.0; // Example time in hours\n    let speed = calculate_speed(distance, time);\n    println!(\"The speed of the vehicle is {} km/h\", speed);\n}\n```"
  },
  {
    "task": "Create a program to compute the total minutes in a given number of hours using multiplication.",
    "code": "```rust\nfn main() {\n    let hours = 5; // Example input\n    let minutes_in_an_hour = 60;\n    let total_minutes = hours * minutes_in_an_hour;\n    println!(\"Total minutes: {}\", total_minutes);\n}\n```"
  },
  {
    "task": "Design a function that determines the number of dozens of eggs from a given total number of eggs.",
    "code": "```rust\nfn dozens_of_eggs(total_eggs: u32) -> u32 {\n    total_eggs / 12\n}\n\nfn main() {\n    let total_eggs = 28;\n    println!(\"Number of dozens: {}\", dozens_of_eggs(total_eggs));\n}\n```"
  },
  {
    "task": "Write a script to find the greatest common divisor of two numbers using arithmetic operations.",
    "code": "```rust\nfn gcd(mut a: i32, mut b: i32) -> i32 {\n    while b != 0 {\n        let t = b;\n        b = a % b;\n        a = t;\n    }\n    a\n}\n\nfn main() {\n    let num1 = 48;\n    let num2 = 18;\n    let result = gcd(num1, num2);\n    println!(\"The GCD of {} and {} is {}\", num1, num2, result);\n}\n```"
  },
  {
    "task": "Develop a program that calculates the total weight of multiple items using addition.",
    "code": "```rust\nfn main() {\n    let weights = vec![2.5, 3.0, 4.5, 1.0, 5.5];\n    let total_weight: f64 = weights.iter().sum();\n    println!(\"Total weight: {}\", total_weight);\n}\n```"
  },
  {
    "task": "Implement a function to convert a temperature from Celsius to Fahrenheit using multiplication and addition.",
    "code": "```rust\nfn celsius_to_fahrenheit(celsius: f64) -> f64 {\n    celsius * 1.8 + 32.0\n}\n\nfn main() {\n    let celsius = 25.0;\n    let fahrenheit = celsius_to_fahrenheit(celsius);\n    println!(\"{}\u00b0C is equal to {}\u00b0F\", celsius, fahrenheit);\n}\n```"
  },
  {
    "task": "Create a program that determines the age difference between two people given their birth years.",
    "code": "```rust\nuse std::io;\n\nfn main() {\n    let mut input = String::new();\n    \n    println!(\"Enter the birth year of the first person:\");\n    io::stdin().read_line(&mut input).expect(\"Failed to read line\");\n    let year1: i32 = input.trim().parse().expect(\"Please enter a valid year\");\n    \n    input.clear();\n    println!(\"Enter the birth year of the second person:\");\n    io::stdin().read_line(&mut input).expect(\"Failed to read line\");\n    let year2: i32 = input.trim().parse().expect(\"Please enter a valid year\");\n    \n    let age_difference = (year1 - year2).abs();\n    \n    println!(\"The age difference between the two people is {} years.\", age_difference);\n}\n```"
  },
  {
    "task": "Write a function to calculate the final price after applying tax and discount using addition and subtraction.",
    "code": "```rust\nfn calculate_final_price(initial_price: f64, tax_rate: f64, discount: f64) -> f64 {\n    let tax_amount = initial_price * tax_rate;\n    let price_with_tax = initial_price + tax_amount;\n    let final_price = price_with_tax - discount;\n    final_price\n}\n```"
  },
  {
    "task": "Design a program to compute the net profit given total revenue and expenses.",
    "code": "```rust\nfn main() {\n    let total_revenue: f64 = 10000.0; // Example revenue\n    let total_expenses: f64 = 7500.0; // Example expenses\n\n    let net_profit = total_revenue - total_expenses;\n\n    println!(\"Net Profit: ${:.2}\", net_profit);\n}\n```"
  },
  {
    "task": "Develop a function to calculate the BMI given weight and height using division and multiplication.",
    "code": "```rust\nfn calculate_bmi(weight: f64, height: f64) -> f64 {\n    weight / (height * height)\n}\n\nfn main() {\n    let weight = 70.0; // in kilograms\n    let height = 1.75; // in meters\n    let bmi = calculate_bmi(weight, height);\n    println!(\"The BMI is: {}\", bmi);\n}\n```"
  },
  {
    "task": "Create a function that calculates the midpoint between two numbers using addition and division.",
    "code": "```rust\nfn calculate_midpoint(a: f64, b: f64) -> f64 {\n    (a + b) / 2.0\n}\n```"
  },
  {
    "task": "Write a program that outputs the result of dividing a number by another with remainder.",
    "code": "```rust\nfn main() {\n    let dividend = 10;\n    let divisor = 3;\n\n    let quotient = dividend / divisor;\n    let remainder = dividend % divisor;\n\n    println!(\"Quotient: {}\", quotient);\n    println!(\"Remainder: {}\", remainder);\n}\n```"
  },
  {
    "task": "Implement a function to calculate the factorial of a number using multiplication.",
    "code": "```rust\nfn factorial(n: u64) -> u64 {\n    (1..=n).product()\n}\n\nfn main() {\n    let number = 5;\n    let result = factorial(number);\n    println!(\"The factorial of {} is {}\", number, result);\n}\n```"
  },
  {
    "task": "Build a script to find the average of three numbers using addition and division.",
    "code": "```rust\nfn main() {\n    let a = 5.0;\n    let b = 10.0;\n    let c = 15.0;\n\n    let sum = a + b + c;\n    let average = sum / 3.0;\n\n    println!(\"The average is: {}\", average);\n}\n```"
  },
  {
    "task": "Create a program that simulates a simple bank account using arithmetic operations for deposits and withdrawals.",
    "code": "```rust\nstruct BankAccount {\n    balance: f64,\n}\n\nimpl BankAccount {\n    fn new(initial_balance: f64) -> BankAccount {\n        BankAccount { balance: initial_balance }\n    }\n\n    fn deposit(&mut self, amount: f64) {\n        self.balance += amount;\n    }\n\n    fn withdraw(&mut self, amount: f64) -> Result<(), String> {\n        if amount > self.balance {\n            Err(\"Insufficient funds\".to_string())\n        } else {\n            self.balance -= amount;\n            Ok(())\n        }\n    }\n\n    fn get_balance(&self) -> f64 {\n        self.balance\n    }\n}\n\nfn main() {\n    let mut account = BankAccount::new(1000.0);\n    account.deposit(500.0);\n    match account.withdraw(300.0) {\n        Ok(_) => println!(\"Withdrawal successful\"),\n        Err(e) => println!(\"Error: {}\", e),\n    }\n    println!(\"Current balance: {}\", account.get_balance());\n}\n```"
  },
  {
    "task": "Write a function that computes the cost per item given a total cost and quantity using division.",
    "code": "```rust\nfn cost_per_item(total_cost: f64, quantity: u32) -> f64 {\n    total_cost / quantity as f64\n}\n\nfn main() {\n    let total_cost = 100.0;\n    let quantity = 5;\n    let cost = cost_per_item(total_cost, quantity);\n    println!(\"Cost per item: ${:.2}\", cost);\n}\n```"
  },
  {
    "task": "Design a program that calculates the time required to travel a distance at a given speed.",
    "code": "```rust\nuse std::io;\n\nfn main() {\n    let mut distance_str = String::new();\n    let mut speed_str = String::new();\n\n    println!(\"Enter the distance (in kilometers):\");\n    io::stdin().read_line(&mut distance_str).expect(\"Failed to read line\");\n    let distance: f64 = distance_str.trim().parse().expect(\"Please enter a valid number\");\n\n    println!(\"Enter the speed (in kilometers per hour):\");\n    io::stdin().read_line(&mut speed_str).expect(\"Failed to read line\");\n    let speed: f64 = speed_str.trim().parse().expect(\"Please enter a valid number\");\n\n    if speed != 0.0 {\n        let time = distance / speed;\n        println!(\"Time required to travel {:.2} km at {:.2} km/h is {:.2} hours.\", distance, speed, time);\n    } else {\n        println!(\"Speed cannot be zero.\");\n    }\n}\n```"
  },
  {
    "task": "Develop a function that returns the absolute difference between two numbers.",
    "code": "```rust\nfn absolute_difference(a: i32, b: i32) -> i32 {\n    (a - b).abs()\n}\n\nfn main() {\n    let result = absolute_difference(10, 4);\n    println!(\"The absolute difference is: {}\", result);\n}\n```"
  },
  {
    "task": "Implement a program to compute the geometric mean of a set of numbers using multiplication and roots.",
    "code": "```rust\nfn geometric_mean(numbers: &[f64]) -> f64 {\n    let product: f64 = numbers.iter().product();\n    let n = numbers.len() as f64;\n    product.powf(1.0 / n)\n}\n\nfn main() {\n    let numbers = vec![2.0, 8.0, 4.0];\n    let result = geometric_mean(&numbers);\n    println!(\"Geometric mean: {}\", result);\n}\n```"
  },
  {
    "task": "Write a function to calculate the total interest paid on a loan using arithmetic operations.",
    "code": "```rust\nfn calculate_total_interest(principal: f64, annual_rate: f64, years: u32) -> f64 {\n    let rate_per_period = annual_rate / 100.0;\n    let total_amount = principal * (1.0 + rate_per_period * years as f64);\n    total_amount - principal\n}\n\nfn main() {\n    let principal = 10000.0;\n    let annual_rate = 5.0;\n    let years = 10;\n    let total_interest = calculate_total_interest(principal, annual_rate, years);\n    println!(\"Total interest paid: {:.2}\", total_interest);\n}\n```"
  },
  {
    "task": "Create a program that calculates the sum of even numbers within a specified range.",
    "code": "```rust\nfn sum_of_evens(start: i32, end: i32) -> i32 {\n    (start..=end).filter(|&x| x % 2 == 0).sum()\n}\n\nfn main() {\n    let start = 1;\n    let end = 10;\n    let sum = sum_of_evens(start, end);\n    println!(\"The sum of even numbers between {} and {} is {}\", start, end, sum);\n}\n```"
  },
  {
    "task": "Design a script to determine the final balance in a savings account after regular deposits and withdrawals.",
    "code": "```rust\nfn main() {\n    let initial_balance: f64 = 1000.0;\n    let deposits: Vec<f64> = vec![200.0, 150.0, 300.0];\n    let withdrawals: Vec<f64> = vec![100.0, 50.0, 75.0];\n\n    let total_deposits: f64 = deposits.iter().sum();\n    let total_withdrawals: f64 = withdrawals.iter().sum();\n\n    let final_balance = initial_balance + total_deposits - total_withdrawals;\n\n    println!(\"Final balance: ${:.2}\", final_balance);\n}\n```"
  },
  {
    "task": "Develop a function to compute the surface area of a cylinder given its radius and height.",
    "code": "```rust\nfn surface_area_of_cylinder(radius: f64, height: f64) -> f64 {\n    let base_area = std::f64::consts::PI * radius * radius;\n    let lateral_area = 2.0 * std::f64::consts::PI * radius * height;\n    2.0 * base_area + lateral_area\n}\n```"
  },
  {
    "task": "Write a program that outputs the result of an arithmetic sequence given the first term and common difference.",
    "code": "```rust\nfn arithmetic_sequence(first_term: i32, common_difference: i32, n: usize) -> Vec<i32> {\n    (0..n).map(|i| first_term + i as i32 * common_difference).collect()\n}\n\nfn main() {\n    let first_term = 3;\n    let common_difference = 5;\n    let number_of_terms = 10;\n\n    let sequence = arithmetic_sequence(first_term, common_difference, number_of_terms);\n    for term in sequence {\n        println!(\"{}\", term);\n    }\n}\n```"
  },
  {
    "task": "Implement a function that finds the average speed for a trip given total distance and time.",
    "code": "```rust\nfn average_speed(total_distance: f64, total_time: f64) -> f64 {\n    total_distance / total_time\n}\n\nfn main() {\n    let distance = 150.0; // example distance in kilometers\n    let time = 2.0; // example time in hours\n    let avg_speed = average_speed(distance, time);\n    println!(\"The average speed is {:.2} km/h\", avg_speed);\n}\n```"
  },
  {
    "task": "Create a function to calculate the total cost of a road trip given fuel cost per mile and distance.",
    "code": "```rust\nfn calculate_total_cost(fuel_cost_per_mile: f64, distance: f64) -> f64 {\n    fuel_cost_per_mile * distance\n}\n\nfn main() {\n    let fuel_cost_per_mile = 0.12; // Example value\n    let distance = 150.0; // Example value\n    let total_cost = calculate_total_cost(fuel_cost_per_mile, distance);\n    println!(\"Total cost of the road trip: ${:.2}\", total_cost);\n}\n```"
  },
  {
    "task": "Write a script that determines the number of tiles required to cover a floor area using arithmetic operations.",
    "code": "```rust\nfn main() {\n    let floor_length: f64 = 10.0; // in meters\n    let floor_width: f64 = 8.0; // in meters\n    let tile_length: f64 = 0.5; // in meters\n    let tile_width: f64 = 0.5; // in meters\n\n    let floor_area = floor_length * floor_width;\n    let tile_area = tile_length * tile_width;\n\n    let tiles_required = (floor_area / tile_area).ceil();\n\n    println!(\"Number of tiles required: {}\", tiles_required);\n}\n```"
  },
  {
    "task": "Develop a program to calculate the amount of paint needed to cover a wall given its area.",
    "code": "```rust\nfn calculate_paint_needed(area: f64, coverage_per_liter: f64) -> f64 {\n    area / coverage_per_liter\n}\n\nfn main() {\n    let wall_area: f64 = 50.0; // Example wall area in square meters\n    let paint_coverage: f64 = 10.0; // Example coverage in square meters per liter\n\n    let paint_needed = calculate_paint_needed(wall_area, paint_coverage);\n    println!(\"Paint needed: {:.2} liters\", paint_needed);\n}\n```"
  },
  {
    "task": "Build a function that calculates the price per unit weight given total price and weight.",
    "code": "```rust\nfn price_per_unit_weight(total_price: f64, weight: f64) -> f64 {\n    total_price / weight\n}\n\nfn main() {\n    let total_price = 100.0;\n    let weight = 5.0;\n    let unit_price = price_per_unit_weight(total_price, weight);\n    println!(\"Price per unit weight: {}\", unit_price);\n}\n```"
  },
  {
    "task": "Implement a program that computes the volume of a rectangular prism given its dimensions.",
    "code": "```rust\nfn main() {\n    let length: f64 = 5.0;\n    let width: f64 = 3.0;\n    let height: f64 = 2.0;\n\n    let volume = length * width * height;\n\n    println!(\"The volume of the rectangular prism is: {}\", volume);\n}\n```"
  },
  {
    "task": "Write a function to find the percentage increase or decrease between two numbers.",
    "code": "```rust\nfn percentage_change(original: f64, new: f64) -> f64 {\n    ((new - original) / original) * 100.0\n}\n\nfn main() {\n    let original = 100.0;\n    let new = 120.0;\n    let change = percentage_change(original, new);\n    println!(\"The percentage change is: {:.2}%\", change);\n}\n```"
  },
  {
    "task": "Create a program to determine the number of complete weeks within a specified number of days.",
    "code": "```rust\nfn complete_weeks(days: i32) -> i32 {\n    days / 7\n}\n\nfn main() {\n    let days = 45; // Example number of days\n    let weeks = complete_weeks(days);\n    println!(\"Complete weeks in {} days: {}\", days, weeks);\n}\n```"
  },
  {
    "task": "Design a function that calculates the break-even point for a business using cost and revenue data.",
    "code": "```rust\nfn calculate_break_even_point(fixed_costs: f64, variable_costs_per_unit: f64, revenue_per_unit: f64) -> Option<f64> {\n    if revenue_per_unit <= variable_costs_per_unit {\n        return None;\n    }\n    Some(fixed_costs / (revenue_per_unit - variable_costs_per_unit))\n}\n\nfn main() {\n    let fixed_costs = 1000.0;\n    let variable_costs_per_unit = 5.0;\n    let revenue_per_unit = 10.0;\n\n    match calculate_break_even_point(fixed_costs, variable_costs_per_unit, revenue_per_unit) {\n        Some(units) => println!(\"Break-even point is {} units.\", units),\n        None => println!(\"No break-even point can be reached.\"),\n    }\n}\n```"
  },
  {
    "task": "Develop a program that converts a total number of seconds into hours, minutes, and seconds.",
    "code": "```rust\nfn convert_seconds(total_seconds: u32) -> (u32, u32, u32) {\n    let hours = total_seconds / 3600;\n    let minutes = (total_seconds % 3600) / 60;\n    let seconds = total_seconds % 60;\n    (hours, minutes, seconds)\n}\n\nfn main() {\n    let total_seconds = 3661;\n    let (hours, minutes, seconds) = convert_seconds(total_seconds);\n    println!(\"{} seconds is equal to {} hours, {} minutes, and {} seconds\", total_seconds, hours, minutes, seconds);\n}\n```"
  },
  {
    "task": "Write a function that calculates the depreciation of an asset over time using arithmetic operations.",
    "code": "```rust\nfn calculate_depreciation(initial_value: f64, depreciation_rate: f64, years: u32) -> f64 {\n    initial_value * (1.0 - depreciation_rate).powf(years as f64)\n}\n\nfn main() {\n    let initial_value = 1000.0;\n    let depreciation_rate = 0.1;\n    let years = 5;\n\n    let depreciated_value = calculate_depreciation(initial_value, depreciation_rate, years);\n    println!(\"Depreciated value after {} years: {}\", years, depreciated_value);\n}\n```"
  },
  {
    "task": "Create a program that computes the final exam grade needed to achieve a target course average.",
    "code": "```rust\nfn main() {\n    let current_average = 85.0; // Current average score\n    let target_average = 90.0; // Target average score\n    let weight_of_final = 0.4; // Weight of the final exam\n\n    let required_final_score = (target_average - current_average * (1.0 - weight_of_final)) / weight_of_final;\n\n    println!(\"You need to score {:.2} on the final exam to achieve a course average of {:.2}.\",\n             required_final_score, target_average);\n}\n```"
  },
  {
    "task": "Implement a function to calculate the total cost of groceries given prices and quantities of items.",
    "code": "```rust\nfn calculate_total_cost(prices: &[f64], quantities: &[u32]) -> f64 {\n    prices.iter().zip(quantities.iter())\n        .map(|(price, quantity)| price * (*quantity as f64))\n        .sum()\n}\n\nfn main() {\n    let prices = vec![2.99, 5.49, 3.89];\n    let quantities = vec![2, 1, 4];\n    let total_cost = calculate_total_cost(&prices, &quantities);\n    println!(\"Total cost: ${:.2}\", total_cost);\n}\n```"
  },
  {
    "task": "Write a script that determines the number of years required to double an investment using a fixed interest rate.",
    "code": "```rust\nfn years_to_double_investment(principal: f64, interest_rate: f64) -> u32 {\n    let mut years = 0;\n    let mut amount = principal;\n\n    while amount < 2.0 * principal {\n        amount += amount * interest_rate;\n        years += 1;\n    }\n\n    years\n}\n\nfn main() {\n    let principal = 1000.0; // Example principal\n    let interest_rate = 0.05; // Example interest rate (5%)\n    \n    let years = years_to_double_investment(principal, interest_rate);\n    println!(\"Years to double the investment: {}\", years);\n}\n```"
  },
  {
    "task": "Develop a function that computes the harmonic mean of a set of numbers using division and addition.",
    "code": "```rust\nfn harmonic_mean(numbers: &[f64]) -> f64 {\n    let n = numbers.len();\n    let sum_of_reciprocals: f64 = numbers.iter().map(|&x| 1.0 / x).sum();\n    n as f64 / sum_of_reciprocals\n}\n\nfn main() {\n    let numbers = vec![1.0, 2.0, 3.0, 4.0, 5.0];\n    let mean = harmonic_mean(&numbers);\n    println!(\"Harmonic Mean: {}\", mean);\n}\n```"
  },
  {
    "task": "Create a program to find the sum of the squares of numbers in a given range.",
    "code": "```rust\nfn main() {\n    let start = 1;\n    let end = 10;\n    let sum_of_squares: i32 = (start..=end).map(|x| x * x).sum();\n    println!(\"The sum of squares from {} to {} is: {}\", start, end, sum_of_squares);\n}\n```"
  },
  {
    "task": "Design a function that calculates the energy consumption of an appliance given power and usage time.",
    "code": "```rust\nfn calculate_energy_consumption(power: f64, usage_time: f64) -> f64 {\n    power * usage_time\n}\n\nfn main() {\n    let power = 1500.0; // in watts\n    let usage_time = 3.0; // in hours\n    let energy_consumption = calculate_energy_consumption(power, usage_time);\n    println!(\"Energy Consumption: {} Wh\", energy_consumption);\n}\n```"
  },
  {
    "task": "Write a program that simulates a simple stock portfolio using arithmetic operations for buying and selling.",
    "code": "```rust\nstruct StockPortfolio {\n    cash: f64,\n    shares: f64,\n    stock_price: f64,\n}\n\nimpl StockPortfolio {\n    fn new(initial_cash: f64, stock_price: f64) -> Self {\n        Self {\n            cash: initial_cash,\n            shares: 0.0,\n            stock_price,\n        }\n    }\n\n    fn buy_shares(&mut self, amount: f64) {\n        let cost = amount * self.stock_price;\n        if self.cash >= cost {\n            self.shares += amount;\n            self.cash -= cost;\n        } else {\n            println!(\"Not enough cash to buy {} shares.\", amount);\n        }\n    }\n\n    fn sell_shares(&mut self, amount: f64) {\n        if self.shares >= amount {\n            self.shares -= amount;\n            self.cash += amount * self.stock_price;\n        } else {\n            println!(\"Not enough shares to sell {} shares.\", amount);\n        }\n    }\n\n    fn current_value(&self) -> f64 {\n        self.cash + self.shares * self.stock_price\n    }\n}\n\nfn main() {\n    let mut portfolio = StockPortfolio::new(1000.0, 50.0); // $1000 cash, $50 per share\n\n    portfolio.buy_shares(10.0); // Buy 10 shares\n    portfolio.sell_shares(5.0); // Sell 5 shares\n\n    println!(\"Cash: ${:.2}\", portfolio.cash);\n    println!(\"Shares: {:.2}\", portfolio.shares);\n    println!(\"Portfolio Value: ${:.2}\", portfolio.current_value());\n}\n```"
  },
  {
    "task": "Implement a function to calculate the gravitational force between two masses using multiplication and division.",
    "code": "```rust\nfn gravitational_force(mass1: f64, mass2: f64, distance: f64) -> f64 {\n    let gravitational_constant: f64 = 6.67430e-11;\n    gravitational_constant * (mass1 * mass2) / (distance * distance)\n}\n\nfn main() {\n    let mass1 = 5.972e24; // Earth mass in kg\n    let mass2 = 7.348e22; // Moon mass in kg\n    let distance = 3.844e8; // Distance between Earth and Moon in meters\n\n    let force = gravitational_force(mass1, mass2, distance);\n    println!(\"The gravitational force is: {} N\", force);\n}\n```"
  },
  {
    "task": "Create a function that determines the price per square foot of a piece of real estate.",
    "code": "```rust\nfn price_per_square_foot(price: f64, area: f64) -> f64 {\n    if area == 0.0 {\n        0.0\n    } else {\n        price / area\n    }\n}\n\nfn main() {\n    let total_price = 350000.0;\n    let total_area = 2500.0;\n    let price_per_sqft = price_per_square_foot(total_price, total_area);\n    println!(\"Price per square foot: ${:.2}\", price_per_sqft);\n}\n```"
  },
  {
    "task": "Write a script to compute the total interest earned on a savings account with monthly compounding.",
    "code": "```rust\nfn main() {\n    let principal = 1000.0; // Initial amount\n    let annual_rate = 0.05; // Annual interest rate\n    let months = 12; // Number of months\n\n    let monthly_rate = annual_rate / 12.0;\n    let amount = principal * (1.0 + monthly_rate).powf(months as f64);\n    let interest_earned = amount - principal;\n\n    println!(\"Total interest earned: {:.2}\", interest_earned);\n}\n```"
  },
  {
    "task": "Develop a program that calculates the calories burned during exercise given MET value and duration.",
    "code": "```rust\nfn calculate_calories_burned(met: f64, duration_in_minutes: f64, weight_in_kg: f64) -> f64 {\n    // Calories burned per minute = MET * weight (kg) * 3.5 / 200\n    let calories_per_minute = met * weight_in_kg * 3.5 / 200.0;\n    calories_per_minute * duration_in_minutes\n}\n\nfn main() {\n    let met_value = 8.0; // Example MET value for running\n    let duration = 30.0; // Duration in minutes\n    let weight = 70.0; // Weight in kilograms\n\n    let calories_burned = calculate_calories_burned(met_value, duration, weight);\n    println!(\"Calories burned: {:.2}\", calories_burned);\n}\n```"
  },
  {
    "task": "Build a function that converts a speed from miles per hour to kilometers per hour using multiplication.",
    "code": "```rust\nfn miles_per_hour_to_kilometers_per_hour(mph: f64) -> f64 {\n    mph * 1.60934\n}\n\nfn main() {\n    let mph = 60.0;\n    let kph = miles_per_hour_to_kilometers_per_hour(mph);\n    println!(\"{} mph is {:.2} kph\", mph, kph);\n}\n```"
  },
  {
    "task": "Implement a program to find the number of days between two dates using arithmetic operations.",
    "code": "```rust\nuse chrono::{NaiveDate, Duration};\n\nfn days_between_dates(date1: &str, date2: &str) -> i64 {\n    let start_date = NaiveDate::parse_from_str(date1, \"%Y-%m-%d\").unwrap();\n    let end_date = NaiveDate::parse_from_str(date2, \"%Y-%m-%d\").unwrap();\n    let duration = end_date - start_date;\n    duration.num_days()\n}\n\nfn main() {\n    let date1 = \"2023-01-01\";\n    let date2 = \"2023-12-31\";\n    let days = days_between_dates(date1, date2);\n    println!(\"Number of days between {} and {} is: {}\", date1, date2, days);\n}\n```"
  },
  {
    "task": "Write a function to calculate the area of a circle given its radius.",
    "code": "```rust\nfn area_of_circle(radius: f64) -> f64 {\n    std::f64::consts::PI * radius * radius\n}\n\nfn main() {\n    let radius = 5.0;\n    let area = area_of_circle(radius);\n    println!(\"The area of the circle with radius {} is {}\", radius, area);\n}\n```"
  },
  {
    "task": "Create a program that determines the total distance driven given trips with varying speeds and durations.",
    "code": "```rust\nfn main() {\n    let trips = vec![\n        (60.0, 1.5),  // speed in km/h, duration in hours\n        (80.0, 2.0),\n        (100.0, 0.75),\n    ];\n\n    let total_distance: f64 = trips.iter()\n        .map(|(speed, duration)| speed * duration)\n        .sum();\n\n    println!(\"Total distance driven: {:.2} km\", total_distance);\n}\n```"
  },
  {
    "task": "Design a function to compute the final price of an item after applying multiple discounts sequentially.",
    "code": "```rust\nfn compute_final_price(initial_price: f64, discounts: &[f64]) -> f64 {\n    discounts.iter().fold(initial_price, |price, &discount| price * (1.0 - discount))\n}\n\nfn main() {\n    let initial_price = 100.0;\n    let discounts = [0.1, 0.2, 0.05];\n    let final_price = compute_final_price(initial_price, &discounts);\n    println!(\"Final price: {:.2}\", final_price);\n}\n```"
  },
  {
    "task": "Write a script that calculates the number of bricks needed to build a wall given wall dimensions and brick size.",
    "code": "```rust\nfn main() {\n    let wall_length = 10.0; // Wall length in meters\n    let wall_height = 3.0; // Wall height in meters\n\n    let brick_length = 0.2; // Brick length in meters\n    let brick_height = 0.1; // Brick height in meters\n\n    let wall_area = wall_length * wall_height;\n    let brick_area = brick_length * brick_height;\n\n    let num_bricks = (wall_area / brick_area).ceil() as u32;\n\n    println!(\"Number of bricks needed: {}\", num_bricks);\n}\n```"
  },
  {
    "task": "Develop a program to determine the number of pizzas required for a party given the number of people and slices per pizza.",
    "code": "```rust\nfn main() {\n    let people = 25; // Number of people attending the party\n    let slices_per_person = 3; // Number of slices each person will eat\n    let slices_per_pizza = 8; // Number of slices per pizza\n\n    let total_slices_needed = people * slices_per_person;\n    let pizzas_needed = (total_slices_needed + slices_per_pizza - 1) / slices_per_pizza;\n\n    println!(\"Pizzas needed: {}\", pizzas_needed);\n}\n```"
  },
  {
    "task": "Implement a function that calculates the total cost of a meal including tax and tip.",
    "code": "```rust\nfn calculate_total_cost(meal_cost: f64, tax_rate: f64, tip_rate: f64) -> f64 {\n    let tax_amount = meal_cost * tax_rate;\n    let tip_amount = meal_cost * tip_rate;\n    meal_cost + tax_amount + tip_amount\n}\n\nfn main() {\n    let meal_cost = 50.0;\n    let tax_rate = 0.1; // 10%\n    let tip_rate = 0.15; // 15%\n    let total_cost = calculate_total_cost(meal_cost, tax_rate, tip_rate);\n    println!(\"The total cost of the meal is: ${:.2}\", total_cost);\n}\n```"
  },
  {
    "task": "Create a program to compute the average rainfall over a period using addition and division.",
    "code": "```rust\nfn main() {\n    let rainfall_data = vec![23.4, 45.6, 12.2, 67.8, 34.5];\n    let total_rainfall: f64 = rainfall_data.iter().sum();\n    let average_rainfall = total_rainfall / rainfall_data.len() as f64;\n    println!(\"Average Rainfall: {:.2}\", average_rainfall);\n}\n```"
  },
  {
    "task": "Write a function that determines the number of batches needed to produce a specific quantity of a product.",
    "code": "```rust\nfn calculate_batches_needed(total_quantity: u32, batch_size: u32) -> u32 {\n    (total_quantity + batch_size - 1) / batch_size\n}\n\nfn main() {\n    let total_quantity = 100;\n    let batch_size = 30;\n    let batches_needed = calculate_batches_needed(total_quantity, batch_size);\n    println!(\"Batches needed: {}\", batches_needed);\n}\n```"
  },
  {
    "task": "Design a program to calculate the total energy consumption of a household given individual appliance usage.",
    "code": "```rust\nfn main() {\n    let appliance_usages = vec![\n        (\"Fridge\", 100.0), // kWh\n        (\"Washing Machine\", 200.0), // kWh\n        (\"Dryer\", 150.0), // kWh\n        (\"Air Conditioner\", 300.0), // kWh\n    ];\n\n    let total_energy_consumption: f64 = appliance_usages.iter().map(|(_, usage)| usage).sum();\n\n    println!(\"Total Energy Consumption: {:.2} kWh\", total_energy_consumption);\n}\n```"
  },
  {
    "task": "Develop a function that computes the body surface area of a person using height and weight.",
    "code": "```rust\nfn body_surface_area(height: f64, weight: f64) -> f64 {\n    0.007184 * height.powf(0.725) * weight.powf(0.425)\n}\n\nfn main() {\n    let height = 180.0; // in cm\n    let weight = 75.0;  // in kg\n    let bsa = body_surface_area(height, weight);\n    println!(\"Body Surface Area: {:.2} m\u00b2\", bsa);\n}\n```"
  },
  {
    "task": "Build a script to calculate the monthly payment on a mortgage using principal, interest rate, and term.",
    "code": "```rust\nfn calculate_monthly_payment(principal: f64, annual_interest_rate: f64, term_years: u32) -> f64 {\n    let monthly_interest_rate = annual_interest_rate / 12.0 / 100.0;\n    let term_months = term_years * 12;\n    if monthly_interest_rate == 0.0 {\n        return principal / term_months as f64;\n    }\n    let monthly_payment = principal * (monthly_interest_rate * (1.0 + monthly_interest_rate).powi(term_months as i32))\n        / ((1.0 + monthly_interest_rate).powi(term_months as i32) - 1.0);\n    monthly_payment\n}\n\nfn main() {\n    let principal = 300000.0; // Example principal\n    let annual_interest_rate = 3.5; // Example annual interest rate\n    let term_years = 30; // Example term in years\n\n    let monthly_payment = calculate_monthly_payment(principal, annual_interest_rate, term_years);\n    println!(\"Monthly Payment: ${:.2}\", monthly_payment);\n}\n```"
  },
  {
    "task": "Implement a function to find the volume of a cone given its height and radius.",
    "code": "```rust\nfn volume_of_cone(radius: f64, height: f64) -> f64 {\n    let pi = std::f64::consts::PI;\n    (1.0 / 3.0) * pi * radius * radius * height\n}\n\nfn main() {\n    let radius = 3.0;\n    let height = 5.0;\n    let volume = volume_of_cone(radius, height);\n    println!(\"The volume of the cone is: {}\", volume);\n}\n```"
  },
  {
    "task": "Write a program that estimates the cost of a trip using fuel efficiency and distance.",
    "code": "```rust\nfn main() {\n    let distance: f64 = 150.0; // distance in kilometers\n    let fuel_efficiency: f64 = 15.0; // kilometers per liter\n    let fuel_price: f64 = 1.2; // price per liter\n    \n    let total_fuel_needed = distance / fuel_efficiency;\n    let total_cost = total_fuel_needed * fuel_price;\n    \n    println!(\"The estimated cost of the trip is: {:.2}\", total_cost);\n}\n```"
  }
]