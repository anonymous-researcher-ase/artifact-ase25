[
  {
    "task": "Create a map to store student names as keys and their grades as values, then calculate the average grade.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim studentGrades As New Dictionary(Of String, Double) From {\n            {\"Alice\", 85.0},\n            {\"Bob\", 90.0},\n            {\"Charlie\", 78.0},\n            {\"David\", 92.0}\n        }\n\n        Dim total As Double = 0.0\n        For Each grade As Double In studentGrades.Values\n            total += grade\n        Next\n\n        Dim average As Double = total / studentGrades.Count\n        Console.WriteLine(\"Average Grade: \" & average)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a function that takes a dictionary of product names and prices, and returns the total cost of all products.",
    "code": "```vb\nFunction TotalCost(products As Dictionary(Of String, Decimal)) As Decimal\n    Dim total As Decimal = 0\n    For Each price In products.Values\n        total += price\n    Next\n    Return total\nEnd Function\n```"
  },
  {
    "task": "Implement a program that counts the frequency of each word in a given text using a dictionary.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim text As String = \"This is a sample text with some sample words. This text is just a sample.\"\n        Dim words() As String = text.Split({\" \"c, \".\"c, \",\"c}, StringSplitOptions.RemoveEmptyEntries)\n        Dim wordCount As New Dictionary(Of String, Integer)\n\n        For Each word In words\n            Dim lowerWord As String = word.ToLower()\n            If wordCount.ContainsKey(lowerWord) Then\n                wordCount(lowerWord) += 1\n            Else\n                wordCount(lowerWord) = 1\n            End If\n        Next\n\n        For Each kvp In wordCount\n            Console.WriteLine($\"{kvp.Key}: {kvp.Value}\")\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function that takes a dictionary of employee IDs and their work hours, and returns the ID of the employee with the most hours.",
    "code": "```vb\nFunction EmployeeWithMostHours(workHours As Dictionary(Of String, Integer)) As String\n    Dim maxHours As Integer = -1\n    Dim employeeID As String = \"\"\n    \n    For Each kvp As KeyValuePair(Of String, Integer) In workHours\n        If kvp.Value > maxHours Then\n            maxHours = kvp.Value\n            employeeID = kvp.Key\n        End If\n    Next\n    \n    Return employeeID\nEnd Function\n```"
  },
  {
    "task": "Design a system that uses a map to store users' login attempts and timestamps, then locks the account after three failed attempts.",
    "code": "```vb\nModule Program\n    Sub Main()\n        Dim loginAttempts As New Dictionary(Of String, List(Of DateTime))\n        Dim lockedAccounts As New HashSet(Of String)\n\n        While True\n            Console.Write(\"Enter username: \")\n            Dim username As String = Console.ReadLine()\n\n            If lockedAccounts.Contains(username) Then\n                Console.WriteLine(\"Account locked due to multiple failed attempts.\")\n                Continue While\n            End If\n\n            Console.Write(\"Enter password: \")\n            Dim password As String = Console.ReadLine()\n\n            If Not AuthenticateUser(username, password) Then\n                If Not loginAttempts.ContainsKey(username) Then\n                    loginAttempts(username) = New List(Of DateTime)\n                End If\n                loginAttempts(username).Add(DateTime.Now)\n\n                If loginAttempts(username).Count >= 3 Then\n                    lockedAccounts.Add(username)\n                    Console.WriteLine(\"Account locked due to multiple failed attempts.\")\n                Else\n                    Console.WriteLine(\"Invalid login attempt.\")\n                End If\n            Else\n                Console.WriteLine(\"Login successful.\")\n                loginAttempts.Remove(username)\n            End If\n        End While\n    End Sub\n\n    Function AuthenticateUser(username As String, password As String) As Boolean\n        ' Dummy authentication logic for demonstration purposes\n        Return password = \"password123\"\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Create a dictionary to represent a phonebook, allowing users to add, remove, and look up contacts by name.",
    "code": "```vb\nModule Phonebook\n    Sub Main()\n        Dim phonebook As New Dictionary(Of String, String)\n        \n        ' Add contacts\n        phonebook.Add(\"John Doe\", \"555-1234\")\n        phonebook.Add(\"Jane Smith\", \"555-5678\")\n\n        ' Remove a contact\n        If phonebook.ContainsKey(\"John Doe\") Then\n            phonebook.Remove(\"John Doe\")\n        End If\n\n        ' Look up a contact\n        Dim contactName As String = \"Jane Smith\"\n        If phonebook.ContainsKey(contactName) Then\n            Console.WriteLine(\"Phone number for \" & contactName & \": \" & phonebook(contactName))\n        Else\n            Console.WriteLine(contactName & \" not found in phonebook.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Build a map that associates city names with their population, then find the city with the highest population.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim cityPopulation As New Dictionary(Of String, Integer) From {\n            {\"New York\", 8419000},\n            {\"Los Angeles\", 3980000},\n            {\"Chicago\", 2716000},\n            {\"Houston\", 2328000},\n            {\"Phoenix\", 1690000}\n        }\n\n        Dim maxCity As String = \"\"\n        Dim maxPopulation As Integer = 0\n\n        For Each kvp As KeyValuePair(Of String, Integer) In cityPopulation\n            If kvp.Value > maxPopulation Then\n                maxPopulation = kvp.Value\n                maxCity = kvp.Key\n            End If\n        Next\n\n        Console.WriteLine(\"City with the highest population: \" & maxCity & \" (\" & maxPopulation & \")\")\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a program that translates English words to another language using a provided dictionary, and translates a given sentence.",
    "code": "```vb\nModule TranslationProgram\n    Sub Main()\n        Dim dictionary As New Dictionary(Of String, String) From {\n            {\"hello\", \"hola\"},\n            {\"world\", \"mundo\"},\n            {\"how\", \"c\u00f3mo\"},\n            {\"are\", \"est\u00e1s\"},\n            {\"you\", \"t\u00fa\"}\n        }\n\n        Dim sentence As String = \"hello world how are you\"\n        Dim translatedSentence As String = TranslateSentence(sentence, dictionary)\n        \n        Console.WriteLine(translatedSentence)\n    End Sub\n\n    Function TranslateSentence(ByVal sentence As String, ByVal dictionary As Dictionary(Of String, String)) As String\n        Dim words() As String = sentence.Split(\" \"c)\n        Dim translatedWords As New List(Of String)\n\n        For Each word In words\n            If dictionary.ContainsKey(word) Then\n                translatedWords.Add(dictionary(word))\n            Else\n                translatedWords.Add(word)\n            End If\n        Next\n\n        Return String.Join(\" \", translatedWords)\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Construct a dictionary to map book titles to their authors, and implement a search function to find all books by a given author.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim books As New Dictionary(Of String, String) From {\n            {\"To Kill a Mockingbird\", \"Harper Lee\"},\n            {\"1984\", \"George Orwell\"},\n            {\"The Great Gatsby\", \"F. Scott Fitzgerald\"},\n            {\"Brave New World\", \"Aldous Huxley\"},\n            {\"Animal Farm\", \"George Orwell\"}\n        }\n\n        Dim author As String = \"George Orwell\"\n        Dim result As List(Of String) = FindBooksByAuthor(books, author)\n\n        For Each title In result\n            Console.WriteLine(title)\n        Next\n    End Sub\n\n    Function FindBooksByAuthor(ByVal books As Dictionary(Of String, String), ByVal author As String) As List(Of String)\n        Dim titles As New List(Of String)\n        For Each kvp In books\n            If kvp.Value = author Then\n                titles.Add(kvp.Key)\n            End If\n        Next\n        Return titles\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Create a map to store product IDs and their stock levels, then implement a function to update stock levels after a sale.",
    "code": "```vb\nModule ProductStock\n\n    Dim productStock As New Dictionary(Of Integer, Integer)\n\n    Sub Main()\n        ' Initialize the product stock map\n        productStock.Add(101, 50)\n        productStock.Add(102, 30)\n        productStock.Add(103, 20)\n\n        ' Simulate a sale\n        UpdateStockAfterSale(101, 5)\n        UpdateStockAfterSale(102, 2)\n    End Sub\n\n    Sub UpdateStockAfterSale(productId As Integer, quantitySold As Integer)\n        If productStock.ContainsKey(productId) Then\n            productStock(productId) -= quantitySold\n        End If\n    End Sub\n\nEnd Module\n```"
  },
  {
    "task": "Write a script that uses a dictionary to convert country codes to country names and prints the full name for a given code.",
    "code": "```vb\nModule Program\n    Sub Main()\n        Dim countryMap As New Dictionary(Of String, String) From {\n            {\"US\", \"United States\"},\n            {\"CA\", \"Canada\"},\n            {\"MX\", \"Mexico\"},\n            {\"FR\", \"France\"},\n            {\"DE\", \"Germany\"}\n        }\n\n        Dim code As String = \"FR\"\n        If countryMap.ContainsKey(code) Then\n            Console.WriteLine(countryMap(code))\n        Else\n            Console.WriteLine(\"Country code not found.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a program that stores student IDs and names in a dictionary, and allows retrieval of names by ID.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim students As New Dictionary(Of Integer, String)\n\n        ' Add student IDs and names\n        students.Add(101, \"Alice\")\n        students.Add(102, \"Bob\")\n        students.Add(103, \"Charlie\")\n\n        ' Retrieve a name by ID\n        Dim studentId As Integer = 102\n        If students.ContainsKey(studentId) Then\n            Dim studentName As String = students(studentId)\n            Console.WriteLine(\"Student ID: \" & studentId & \" - Name: \" & studentName)\n        Else\n            Console.WriteLine(\"Student ID not found.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a dictionary to store configuration settings for a software application, allowing updates and retrieval of settings.",
    "code": "```vb\nModule ConfigurationSettings\n    Sub Main()\n        Dim configSettings As New Dictionary(Of String, String)()\n\n        ' Add configuration settings\n        configSettings(\"Theme\") = \"Dark\"\n        configSettings(\"FontSize\") = \"12\"\n        configSettings(\"Language\") = \"English\"\n\n        ' Update a configuration setting\n        configSettings(\"FontSize\") = \"14\"\n\n        ' Retrieve and print configuration settings\n        Console.WriteLine(\"Theme: \" & configSettings(\"Theme\"))\n        Console.WriteLine(\"FontSize: \" & configSettings(\"FontSize\"))\n        Console.WriteLine(\"Language: \" & configSettings(\"Language\"))\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a map that stores words as keys and their definitions as values, and write a function to display all words starting with a given letter.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim dictionary As New Dictionary(Of String, String) From {\n            {\"Apple\", \"A fruit that is red, green, or yellow\"},\n            {\"Banana\", \"A long curved fruit that grows in clusters\"},\n            {\"Cherry\", \"A small, round, red fruit\"},\n            {\"Date\", \"A sweet, dark brown fruit\"},\n            {\"Elderberry\", \"A small, dark purple fruit\"}\n        }\n\n        DisplayWordsStartingWith(dictionary, \"A\")\n    End Sub\n\n    Sub DisplayWordsStartingWith(ByVal dict As Dictionary(Of String, String), ByVal letter As String)\n        For Each word As String In dict.Keys\n            If word.StartsWith(letter, StringComparison.OrdinalIgnoreCase) Then\n                Console.WriteLine(word)\n            End If\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a program that uses a dictionary to store usernames and passwords, and verifies login attempts.",
    "code": "```vb\nModule LoginModule\n    Sub Main()\n        Dim credentials As New Dictionary(Of String, String) From {\n            {\"user1\", \"password1\"},\n            {\"user2\", \"password2\"},\n            {\"user3\", \"password3\"}\n        }\n\n        Console.WriteLine(\"Enter username:\")\n        Dim username As String = Console.ReadLine()\n\n        Console.WriteLine(\"Enter password:\")\n        Dim password As String = Console.ReadLine()\n\n        If credentials.ContainsKey(username) AndAlso credentials(username) = password Then\n            Console.WriteLine(\"Login successful!\")\n        Else\n            Console.WriteLine(\"Invalid username or password.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a map to track the number of times each item is purchased in a store, then find the most popular item.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim purchaseMap As New Dictionary(Of String, Integer)()\n\n        ' Example purchases\n        Dim purchases As String() = {\"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\"}\n\n        ' Track purchases\n        For Each item In purchases\n            If purchaseMap.ContainsKey(item) Then\n                purchaseMap(item) += 1\n            Else\n                purchaseMap(item) = 1\n            End If\n        Next\n\n        ' Find the most popular item\n        Dim mostPopularItem As String = \"\"\n        Dim maxCount As Integer = 0\n\n        For Each kvp In purchaseMap\n            If kvp.Value > maxCount Then\n                maxCount = kvp.Value\n                mostPopularItem = kvp.Key\n            End If\n        Next\n\n        Console.WriteLine(\"Most popular item is: \" & mostPopularItem & \" with \" & maxCount & \" purchases.\")\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Build a dictionary that associates file extensions with their corresponding application types and uses it to determine how to open a given file.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim fileAssociations As New Dictionary(Of String, String) From {\n            {\".txt\", \"Text Editor\"},\n            {\".jpg\", \"Image Viewer\"},\n            {\".mp3\", \"Music Player\"},\n            {\".mp4\", \"Video Player\"},\n            {\".pdf\", \"PDF Reader\"}\n        }\n\n        Dim fileName As String = \"document.pdf\"\n        Dim extension As String = IO.Path.GetExtension(fileName).ToLower()\n\n        If fileAssociations.ContainsKey(extension) Then\n            Console.WriteLine(\"Open with: \" & fileAssociations(extension))\n        Else\n            Console.WriteLine(\"Unknown file type\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a program that uses a map to store menu items and their prices, and allows customers to calculate their total bill.",
    "code": "```vb\nModule Program\n    Sub Main()\n        Dim menu As New Dictionary(Of String, Decimal) From {\n            {\"Burger\", 5.99D},\n            {\"Fries\", 2.99D},\n            {\"Soda\", 1.50D},\n            {\"Salad\", 4.50D}\n        }\n\n        Dim totalBill As Decimal = 0\n\n        Console.WriteLine(\"Enter the items purchased (type 'done' to finish):\")\n        While True\n            Dim input As String = Console.ReadLine()\n            If input.ToLower() = \"done\" Then\n                Exit While\n            End If\n\n            If menu.ContainsKey(input) Then\n                totalBill += menu(input)\n            Else\n                Console.WriteLine(\"Item not on menu.\")\n            End If\n        End While\n\n        Console.WriteLine(\"Total Bill: $\" & totalBill.ToString(\"F2\"))\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a dictionary to track the inventory of a warehouse, allowing additions, removals, and inventory checks.",
    "code": "```vb\nModule WarehouseInventory\n    Sub Main()\n        Dim inventory As New Dictionary(Of String, Integer)()\n\n        ' Add items to inventory\n        AddItem(inventory, \"ItemA\", 100)\n        AddItem(inventory, \"ItemB\", 50)\n\n        ' Remove items from inventory\n        RemoveItem(inventory, \"ItemA\", 30)\n\n        ' Check inventory\n        CheckInventory(inventory, \"ItemA\")\n        CheckInventory(inventory, \"ItemB\")\n        CheckInventory(inventory, \"ItemC\")\n    End Sub\n\n    Sub AddItem(ByRef inventory As Dictionary(Of String, Integer), itemName As String, quantity As Integer)\n        If inventory.ContainsKey(itemName) Then\n            inventory(itemName) += quantity\n        Else\n            inventory(itemName) = quantity\n        End If\n    End Sub\n\n    Sub RemoveItem(ByRef inventory As Dictionary(Of String, Integer), itemName As String, quantity As Integer)\n        If inventory.ContainsKey(itemName) Then\n            inventory(itemName) -= quantity\n            If inventory(itemName) <= 0 Then\n                inventory.Remove(itemName)\n            End If\n        End If\n    End Sub\n\n    Sub CheckInventory(inventory As Dictionary(Of String, Integer), itemName As String)\n        If inventory.ContainsKey(itemName) Then\n            Console.WriteLine(itemName & \": \" & inventory(itemName))\n        Else\n            Console.WriteLine(itemName & \" not found in inventory.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function that uses a map to convert Roman numerals to integers.",
    "code": "```vb\nFunction RomanToInteger(roman As String) As Integer\n    Dim romanMap As New Dictionary(Of Char, Integer) From {\n        {\"I\"c, 1},\n        {\"V\"c, 5},\n        {\"X\"c, 10},\n        {\"L\"c, 50},\n        {\"C\"c, 100},\n        {\"D\"c, 500},\n        {\"M\"c, 1000}\n    }\n    \n    Dim total As Integer = 0\n    Dim prevValue As Integer = 0\n    \n    For i As Integer = roman.Length - 1 To 0 Step -1\n        Dim currentValue As Integer = romanMap(roman(i))\n        If currentValue < prevValue Then\n            total -= currentValue\n        Else\n            total += currentValue\n        End If\n        prevValue = currentValue\n    Next\n    \n    Return total\nEnd Function\n```"
  },
  {
    "task": "Develop a program that uses a dictionary to track the number of occurrences of each letter in a string.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim inputString As String = \"example string\"\n        Dim letterCount As New Dictionary(Of Char, Integer)\n\n        For Each letter As Char In inputString\n            If Char.IsLetter(letter) Then\n                If letterCount.ContainsKey(letter) Then\n                    letterCount(letter) += 1\n                Else\n                    letterCount(letter) = 1\n                End If\n            End If\n        Next\n\n        For Each kvp As KeyValuePair(Of Char, Integer) In letterCount\n            Console.WriteLine(\"Letter: {0}, Count: {1}\", kvp.Key, kvp.Value)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a map to store team names and their scores, then determine the team with the highest score.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim teamScores As New Dictionary(Of String, Integer) From {\n            {\"TeamA\", 85},\n            {\"TeamB\", 92},\n            {\"TeamC\", 78},\n            {\"TeamD\", 95}\n        }\n\n        Dim highestScoringTeam As String = \"\"\n        Dim highestScore As Integer = Integer.MinValue\n\n        For Each kvp As KeyValuePair(Of String, Integer) In teamScores\n            If kvp.Value > highestScore Then\n                highestScore = kvp.Value\n                highestScoringTeam = kvp.Key\n            End If\n        Next\n\n        Console.WriteLine(\"The team with the highest score is \" & highestScoringTeam & \" with a score of \" & highestScore)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function that takes a dictionary of item weights and calculates the total weight of all items.",
    "code": "```vb\nFunction CalculateTotalWeight(itemWeights As Dictionary(Of String, Double)) As Double\n    Dim totalWeight As Double = 0\n    For Each weight As Double In itemWeights.Values\n        totalWeight += weight\n    Next\n    Return totalWeight\nEnd Function\n```"
  },
  {
    "task": "Implement a map to store website URLs and their respective visit counts, then find the most visited website.",
    "code": "```vb\nModule Program\n    Sub Main()\n        Dim websiteVisits As New Dictionary(Of String, Integer) From {\n            {\"https://example.com\", 120},\n            {\"https://another.com\", 150},\n            {\"https://example.net\", 90},\n            {\"https://website.org\", 200}\n        }\n        \n        Dim mostVisited As String = \"\"\n        Dim maxVisits As Integer = -1\n\n        For Each kvp As KeyValuePair(Of String, Integer) In websiteVisits\n            If kvp.Value > maxVisits Then\n                maxVisits = kvp.Value\n                mostVisited = kvp.Key\n            End If\n        Next\n\n        Console.WriteLine(\"Most visited website: \" & mostVisited)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a script that uses a dictionary to map error codes to error messages, and prints the message for a given code.",
    "code": "```vb\nModule ErrorMapper\n    Sub Main()\n        Dim errorMap As New Dictionary(Of Integer, String) From {\n            {404, \"Not Found\"},\n            {500, \"Internal Server Error\"},\n            {403, \"Forbidden\"},\n            {401, \"Unauthorized\"}\n        }\n\n        Dim errorCode As Integer = 404\n        If errorMap.ContainsKey(errorCode) Then\n            Console.WriteLine(\"Error \" & errorCode & \": \" & errorMap(errorCode))\n        Else\n            Console.WriteLine(\"Unknown error code: \" & errorCode)\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a dictionary to store contact information with names as keys and phone numbers as values, allowing updates and lookups.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        ' Create a dictionary to hold contact information\n        Dim contacts As New Dictionary(Of String, String)\n\n        ' Add a contact\n        contacts(\"Alice\") = \"123-456-7890\"\n\n        ' Update a contact\n        contacts(\"Alice\") = \"098-765-4321\"\n\n        ' Lookup a contact\n        Dim phoneNumber As String = \"\"\n        If contacts.TryGetValue(\"Alice\", phoneNumber) Then\n            Console.WriteLine(\"Alice's phone number is \" & phoneNumber)\n        Else\n            Console.WriteLine(\"Contact not found.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a program that uses a map to assign tasks to employees based on their skill levels.",
    "code": "```vb\nModule TaskAssignment\n    Sub Main()\n        Dim employeeSkills As Dictionary(Of String, String) = New Dictionary(Of String, String)()\n        employeeSkills.Add(\"Alice\", \"Expert\")\n        employeeSkills.Add(\"Bob\", \"Intermediate\")\n        employeeSkills.Add(\"Charlie\", \"Beginner\")\n\n        Dim taskAssignments As Dictionary(Of String, String) = New Dictionary(Of String, String)()\n        taskAssignments.Add(\"Expert\", \"Design Architecture\")\n        taskAssignments.Add(\"Intermediate\", \"Develop Features\")\n        taskAssignments.Add(\"Beginner\", \"Write Tests\")\n\n        For Each employee As KeyValuePair(Of String, String) In employeeSkills\n            Dim skillLevel As String = employee.Value\n            If taskAssignments.ContainsKey(skillLevel) Then\n                Console.WriteLine(employee.Key & \" is assigned to \" & taskAssignments(skillLevel))\n            End If\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a dictionary that maps airport codes to their respective city names, and allows retrieval of city names by code.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim airportDictionary As New Dictionary(Of String, String) From {\n            {\"LAX\", \"Los Angeles\"},\n            {\"JFK\", \"New York\"},\n            {\"ORD\", \"Chicago\"},\n            {\"ATL\", \"Atlanta\"},\n            {\"DFW\", \"Dallas/Fort Worth\"}\n        }\n\n        Dim airportCode As String = \"JFK\"\n        Dim cityName As String = airportDictionary(airportCode)\n        Console.WriteLine(\"The city for airport code \" & airportCode & \" is \" & cityName)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Build a map to store movie titles and their release years, then find all movies released in a given decade.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim movies As New Dictionary(Of String, Integer) From {\n            {\"The Godfather\", 1972},\n            {\"Star Wars\", 1977},\n            {\"Back to the Future\", 1985},\n            {\"Pulp Fiction\", 1994},\n            {\"The Matrix\", 1999}\n        }\n\n        Dim targetDecade As Integer = 1980\n        Dim moviesInDecade = From movie In movies\n                             Where movie.Value >= targetDecade AndAlso movie.Value < targetDecade + 10\n                             Select movie.Key\n\n        For Each title In moviesInDecade\n            Console.WriteLine(title)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function that uses a dictionary to group students by their grades.",
    "code": "```vb\nFunction GroupStudentsByGrades(students As Dictionary(Of String, String)) As Dictionary(Of String, List(Of String))\n    Dim groupedStudents As New Dictionary(Of String, List(Of String))()\n\n    For Each student As KeyValuePair(Of String, String) In students\n        Dim name As String = student.Key\n        Dim grade As String = student.Value\n\n        If Not groupedStudents.ContainsKey(grade) Then\n            groupedStudents(grade) = New List(Of String)()\n        End If\n\n        groupedStudents(grade).Add(name)\n    Next\n\n    Return groupedStudents\nEnd Function\n```"
  },
  {
    "task": "Create a dictionary to store the number of visitors to different sections of a website, and determine the most visited section.",
    "code": "```vb\nModule Program\n    Sub Main()\n        Dim visitors As New Dictionary(Of String, Integer) From {\n            {\"Home\", 500},\n            {\"About\", 150},\n            {\"Contact\", 250},\n            {\"Blog\", 300},\n            {\"Services\", 400}\n        }\n\n        Dim mostVisitedSection As String = Nothing\n        Dim maxVisitors As Integer = 0\n\n        For Each section In visitors\n            If section.Value > maxVisitors Then\n                maxVisitors = section.Value\n                mostVisitedSection = section.Key\n            End If\n        Next\n\n        Console.WriteLine(\"The most visited section is: \" & mostVisitedSection)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a program that uses a map to assign project deadlines to team members, allowing for deadline extensions.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        ' Create a dictionary to store team members and their project deadlines\n        Dim projectDeadlines As New Dictionary(Of String, Date)\n\n        ' Assign initial deadlines\n        projectDeadlines(\"Alice\") = New Date(2023, 10, 31)\n        projectDeadlines(\"Bob\") = New Date(2023, 11, 15)\n        projectDeadlines(\"Charlie\") = New Date(2023, 12, 1)\n\n        ' Print initial deadlines\n        PrintDeadlines(projectDeadlines)\n\n        ' Extend deadlines\n        ExtendDeadline(projectDeadlines, \"Alice\", 10)\n        ExtendDeadline(projectDeadlines, \"Bob\", 5)\n\n        ' Print updated deadlines\n        PrintDeadlines(projectDeadlines)\n    End Sub\n\n    Sub ExtendDeadline(deadlines As Dictionary(Of String, Date), member As String, days As Integer)\n        If deadlines.ContainsKey(member) Then\n            deadlines(member) = deadlines(member).AddDays(days)\n        End If\n    End Sub\n\n    Sub PrintDeadlines(deadlines As Dictionary(Of String, Date))\n        For Each kvp As KeyValuePair(Of String, Date) In deadlines\n            Console.WriteLine($\"{kvp.Key}: {kvp.Value.ToShortDateString()}\")\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a dictionary that keeps track of borrowed books in a library, allowing users to check available books.",
    "code": "```vb\nModule LibrarySystem\n    Sub Main()\n        Dim borrowedBooks As New Dictionary(Of String, Boolean) From {\n            {\"1984\", False},\n            {\"To Kill a Mockingbird\", True},\n            {\"The Great Gatsby\", False},\n            {\"Pride and Prejudice\", True}\n        }\n\n        Console.WriteLine(\"Available books:\")\n        For Each book In borrowedBooks\n            If Not book.Value Then\n                Console.WriteLine(book.Key)\n            End If\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a map to store the names of planets and their distances from the sun, then find the closest planet to Earth.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim planets As New Dictionary(Of String, Double) From {\n            {\"Mercury\", 57.91},\n            {\"Venus\", 108.2},\n            {\"Earth\", 149.6},\n            {\"Mars\", 227.9},\n            {\"Jupiter\", 778.5},\n            {\"Saturn\", 1434},\n            {\"Uranus\", 2871},\n            {\"Neptune\", 4495}\n        }\n\n        Dim earthDistance As Double = planets(\"Earth\")\n        Dim closestPlanet As String = \"\"\n        Dim minDistance As Double = Double.MaxValue\n\n        For Each planet In planets\n            If planet.Key <> \"Earth\" Then\n                Dim distance As Double = Math.Abs(earthDistance - planet.Value)\n                If distance < minDistance Then\n                    minDistance = distance\n                    closestPlanet = planet.Key\n                End If\n            End If\n        Next\n\n        Console.WriteLine(\"The closest planet to Earth is \" & closestPlanet)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a script that uses a dictionary to translate Morse code into plain text.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim morseToText As New Dictionary(Of String, String) From {\n            {\".-\", \"A\"}, {\"-...\", \"B\"}, {\"-.-.\", \"C\"}, {\"-..\", \"D\"},\n            {\".\", \"E\"}, {\"..-.\", \"F\"}, {\"--.\", \"G\"}, {\"....\", \"H\"},\n            {\"..\", \"I\"}, {\".---\", \"J\"}, {\"-.-\", \"K\"}, {\".-..\", \"L\"},\n            {\"--\", \"M\"}, {\"-.\", \"N\"}, {\"---\", \"O\"}, {\".--.\", \"P\"},\n            {\"--.-\", \"Q\"}, {\".-.\", \"R\"}, {\"...\", \"S\"}, {\"-\", \"T\"},\n            {\"..-\", \"U\"}, {\"...-\", \"V\"}, {\".--\", \"W\"}, {\"-..-\", \"X\"},\n            {\"-.--\", \"Y\"}, {\"--..\", \"Z\"}, {\"-----\", \"0\"}, {\".----\", \"1\"},\n            {\"..---\", \"2\"}, {\"...--\", \"3\"}, {\"....-\", \"4\"}, {\".....\", \"5\"},\n            {\"-....\", \"6\"}, {\"--...\", \"7\"}, {\"---..\", \"8\"}, {\"----.\", \"9\"}\n        }\n        \n        Dim morseCode As String = \"... --- ...\"\n        Dim words As String() = morseCode.Split(\" \"c)\n        Dim plainText As String = \"\"\n\n        For Each symbol In words\n            If morseToText.ContainsKey(symbol) Then\n                plainText &= morseToText(symbol)\n            Else\n                plainText &= \"?\"\n            End If\n        Next\n\n        Console.WriteLine(plainText)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a program that uses a map to store vehicle registration numbers and their corresponding owner's name.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim vehicleOwners As New Dictionary(Of String, String)()\n        \n        ' Add vehicle registration numbers and owner's names\n        vehicleOwners.Add(\"ABC123\", \"John Doe\")\n        vehicleOwners.Add(\"XYZ789\", \"Jane Smith\")\n        vehicleOwners.Add(\"LMN456\", \"Alice Johnson\")\n\n        ' Example access\n        Dim ownerName As String = vehicleOwners(\"ABC123\")\n        Console.WriteLine(\"Owner of ABC123: \" & ownerName)\n\n        ' Loop through all entries\n        For Each kvp As KeyValuePair(Of String, String) In vehicleOwners\n            Console.WriteLine(\"Vehicle Number: \" & kvp.Key & \" - Owner: \" & kvp.Value)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a dictionary that maps sports teams to their win-loss records, and find the team with the best record.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim teamRecords As New Dictionary(Of String, Tuple(Of Integer, Integer)) From {\n            {\"TeamA\", Tuple.Create(10, 2)},\n            {\"TeamB\", Tuple.Create(8, 4)},\n            {\"TeamC\", Tuple.Create(12, 1)},\n            {\"TeamD\", Tuple.Create(7, 5)}\n        }\n\n        Dim bestTeam As String = \"\"\n        Dim bestRecord As Tuple(Of Integer, Integer) = Tuple.Create(0, 0)\n        Dim bestWinRatio As Double = 0\n\n        For Each team In teamRecords\n            Dim wins As Integer = team.Value.Item1\n            Dim losses As Integer = team.Value.Item2\n            Dim winRatio As Double = If(losses + wins > 0, wins / (losses + wins), 0)\n\n            If winRatio > bestWinRatio Then\n                bestWinRatio = winRatio\n                bestTeam = team.Key\n                bestRecord = team.Value\n            End If\n        Next\n\n        Console.WriteLine(\"The team with the best record is: \" & bestTeam & \" with a record of \" & bestRecord.Item1 & \"-\" & bestRecord.Item2)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function that uses a map to convert currency codes to full currency names.",
    "code": "```vb\nFunction GetCurrencyName(currencyCode As String) As String\n    Dim currencyMap As New Dictionary(Of String, String) From {\n        {\"USD\", \"United States Dollar\"},\n        {\"EUR\", \"Euro\"},\n        {\"JPY\", \"Japanese Yen\"},\n        {\"GBP\", \"British Pound\"},\n        {\"AUD\", \"Australian Dollar\"},\n        {\"CAD\", \"Canadian Dollar\"},\n        {\"CHF\", \"Swiss Franc\"},\n        {\"CNY\", \"Chinese Yuan\"},\n        {\"SEK\", \"Swedish Krona\"},\n        {\"NZD\", \"New Zealand Dollar\"}\n    }\n    \n    If currencyMap.ContainsKey(currencyCode) Then\n        Return currencyMap(currencyCode)\n    Else\n        Return \"Unknown Currency\"\n    End If\nEnd Function\n```"
  },
  {
    "task": "Build a dictionary to store student names and their attendance counts, and determine the student with the highest attendance.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim attendance As New Dictionary(Of String, Integer) From {\n            {\"Alice\", 5},\n            {\"Bob\", 7},\n            {\"Charlie\", 3},\n            {\"David\", 9},\n            {\"Eva\", 6}\n        }\n\n        Dim maxAttendance As Integer = Integer.MinValue\n        Dim studentWithMaxAttendance As String = \"\"\n\n        For Each kvp As KeyValuePair(Of String, Integer) In attendance\n            If kvp.Value > maxAttendance Then\n                maxAttendance = kvp.Value\n                studentWithMaxAttendance = kvp.Key\n            End If\n        Next\n\n        Console.WriteLine(\"Student with the highest attendance: \" & studentWithMaxAttendance)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a map to store the names of countries and their capitals, allowing lookups by country name.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim countryCapitals As New Dictionary(Of String, String)\n\n        ' Add countries and their capitals\n        countryCapitals(\"USA\") = \"Washington, D.C.\"\n        countryCapitals(\"France\") = \"Paris\"\n        countryCapitals(\"Japan\") = \"Tokyo\"\n        countryCapitals(\"Germany\") = \"Berlin\"\n        countryCapitals(\"India\") = \"New Delhi\"\n\n        ' Lookup by country name\n        Dim countryName As String = \"France\"\n        If countryCapitals.ContainsKey(countryName) Then\n            Console.WriteLine(\"The capital of \" & countryName & \" is \" & countryCapitals(countryName))\n        Else\n            Console.WriteLine(\"Country not found.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a program that uses a dictionary to keep track of recipe ingredients and their quantities.",
    "code": "```vb\nModule RecipeTracker\n    Sub Main()\n        Dim ingredients As New Dictionary(Of String, Integer)()\n\n        ' Add ingredients to the dictionary\n        ingredients(\"Flour\") = 2  ' 2 cups\n        ingredients(\"Sugar\") = 1  ' 1 cup\n        ingredients(\"Eggs\") = 3   ' 3 pieces\n        ingredients(\"Milk\") = 2   ' 2 cups\n        ingredients(\"Butter\") = 1 ' 1 stick\n\n        ' Display the ingredients and their quantities\n        For Each kvp As KeyValuePair(Of String, Integer) In ingredients\n            Console.WriteLine(\"Ingredient: {0}, Quantity: {1}\", kvp.Key, kvp.Value)\n        Next\n\n        Console.ReadLine()\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a system that uses a map to associate social media usernames with user profiles.",
    "code": "```vb\nModule SocialMediaProfiles\n    Sub Main()\n        Dim userProfiles As New Dictionary(Of String, String)()\n        \n        ' Add sample data\n        userProfiles.Add(\"alice123\", \"Alice Johnson\")\n        userProfiles.Add(\"bob_the_builder\", \"Bob Builder\")\n        userProfiles.Add(\"charlie_chocolate\", \"Charlie Bucket\")\n        \n        ' Access and display user profiles\n        For Each username As String In userProfiles.Keys\n            Console.WriteLine(\"Username: \" & username & \", Profile: \" & userProfiles(username))\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function that takes a dictionary of product categories and lists all products in a given category.",
    "code": "```vb\nFunction ListProductsInCategory(products As Dictionary(Of String, List(Of String)), category As String) As List(Of String)\n    If products.ContainsKey(category) Then\n        Return products(category)\n    Else\n        Return New List(Of String)()\n    End If\nEnd Function\n```"
  },
  {
    "task": "Create a dictionary to store shopping list items and their quantities, and implement a function to update quantities.",
    "code": "```vb\nModule ShoppingList\n    Sub Main()\n        Dim shoppingList As New Dictionary(Of String, Integer) From {\n            {\"Apples\", 3},\n            {\"Bread\", 1},\n            {\"Milk\", 2}\n        }\n\n        UpdateQuantity(shoppingList, \"Apples\", 5)\n        UpdateQuantity(shoppingList, \"Eggs\", 12)\n\n        For Each item In shoppingList\n            Console.WriteLine(item.Key & \": \" & item.Value)\n        Next\n    End Sub\n\n    Sub UpdateQuantity(ByRef list As Dictionary(Of String, Integer), ByVal item As String, ByVal quantity As Integer)\n        If list.ContainsKey(item) Then\n            list(item) = quantity\n        Else\n            list.Add(item, quantity)\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Build a program that uses a map to store historical events and their dates, and finds events that occurred in a given year.",
    "code": "```vb\nModule HistoricalEvents\n    Sub Main()\n        Dim events As New Dictionary(Of String, String) From {\n            {\"Moon Landing\", \"1969\"},\n            {\"Fall of Berlin Wall\", \"1989\"},\n            {\"Y2K\", \"2000\"},\n            {\"World War II Ends\", \"1945\"}\n        }\n\n        Console.WriteLine(\"Enter a year to find events that occurred in that year:\")\n        Dim year As String = Console.ReadLine()\n\n        Dim found As Boolean = False\n        For Each kvp As KeyValuePair(Of String, String) In events\n            If kvp.Value = year Then\n                Console.WriteLine(\"Event: \" & kvp.Key & \", Year: \" & kvp.Value)\n                found = True\n            End If\n        Next\n\n        If Not found Then\n            Console.WriteLine(\"No events found for the year \" & year)\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a dictionary to manage user roles and permissions within an application.",
    "code": "```vb\nModule UserRoleManager\n    Sub Main()\n        Dim userRoles As New Dictionary(Of String, List(Of String)) From {\n            {\"admin\", New List(Of String) From {\"read\", \"write\", \"delete\"}},\n            {\"editor\", New List(Of String) From {\"read\", \"write\"}},\n            {\"viewer\", New List(Of String) From {\"read\"}}\n        }\n\n        ' Example usage\n        Dim role As String = \"editor\"\n        If userRoles.ContainsKey(role) Then\n            Console.WriteLine(role & \" has the following permissions:\")\n            For Each permission In userRoles(role)\n                Console.WriteLine(permission)\n            Next\n        Else\n            Console.WriteLine(\"Role not found.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a script that uses a map to convert numeric grades to letter grades.",
    "code": "```vb\nModule GradeConverter\n    Sub Main()\n        Dim gradeMap As New Dictionary(Of Integer, String) From {\n            {90, \"A\"},\n            {80, \"B\"},\n            {70, \"C\"},\n            {60, \"D\"},\n            {0, \"F\"}\n        }\n\n        Dim numericGrades() As Integer = {95, 85, 75, 65, 55}\n        For Each grade In numericGrades\n            Console.WriteLine($\"Numeric Grade: {grade} => Letter Grade: {ConvertToLetterGrade(grade, gradeMap)}\")\n        Next\n    End Sub\n\n    Function ConvertToLetterGrade(grade As Integer, gradeMap As Dictionary(Of Integer, String)) As String\n        For Each kvp In gradeMap\n            If grade >= kvp.Key Then\n                Return kvp.Value\n            End If\n        Next\n        Return \"F\"\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Create a dictionary that maps holiday names to their corresponding dates, and allows lookup by holiday name.",
    "code": "```vb\nModule HolidayDictionary\n    Sub Main()\n        Dim holidays As New Dictionary(Of String, Date) From {\n            {\"New Year's Day\", #1/1/2023#},\n            {\"Independence Day\", #7/4/2023#},\n            {\"Christmas Day\", #12/25/2023#}\n        }\n\n        Dim holidayName As String = \"Christmas Day\"\n        If holidays.ContainsKey(holidayName) Then\n            Console.WriteLine(\"The date of \" & holidayName & \" is \" & holidays(holidayName).ToShortDateString())\n        Else\n            Console.WriteLine(\"Holiday not found.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a system that uses a map to track the status of online orders, allowing updates to order status.",
    "code": "```vb\nModule OrderTracking\n\n    Sub Main()\n        Dim orderStatus As New Dictionary(Of String, String)\n\n        ' Add some orders with initial statuses\n        orderStatus(\"Order001\") = \"Pending\"\n        orderStatus(\"Order002\") = \"Shipped\"\n        orderStatus(\"Order003\") = \"Delivered\"\n\n        ' Update the status of an order\n        UpdateOrderStatus(orderStatus, \"Order001\", \"Shipped\")\n        UpdateOrderStatus(orderStatus, \"Order002\", \"Delivered\")\n\n        ' Display the status of all orders\n        DisplayOrderStatus(orderStatus)\n    End Sub\n\n    Sub UpdateOrderStatus(ByVal orders As Dictionary(Of String, String), ByVal orderId As String, ByVal status As String)\n        If orders.ContainsKey(orderId) Then\n            orders(orderId) = status\n        Else\n            Console.WriteLine(\"Order ID not found: \" & orderId)\n        End If\n    End Sub\n\n    Sub DisplayOrderStatus(ByVal orders As Dictionary(Of String, String))\n        For Each order In orders\n            Console.WriteLine(\"Order ID: \" & order.Key & \", Status: \" & order.Value)\n        Next\n    End Sub\n\nEnd Module\n```"
  },
  {
    "task": "Develop a program that uses a dictionary to associate food items with their nutritional information.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim foodNutrition As New Dictionary(Of String, String) From {\n            {\"Apple\", \"Calories: 52, Carbs: 14g, Protein: 0.3g\"},\n            {\"Banana\", \"Calories: 96, Carbs: 27g, Protein: 1.3g\"},\n            {\"Carrot\", \"Calories: 41, Carbs: 10g, Protein: 0.9g\"},\n            {\"Chicken Breast\", \"Calories: 165, Carbs: 0g, Protein: 31g\"}\n        }\n\n        For Each foodItem As KeyValuePair(Of String, String) In foodNutrition\n            Console.WriteLine(foodItem.Key & \" - \" & foodItem.Value)\n        Next\n\n        Console.ReadLine()\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a map to store book genres and lists of book titles, allowing retrieval of all books in a given genre.",
    "code": "```vb\nModule BookGenres\n    Sub Main()\n        Dim genres As New Dictionary(Of String, List(Of String))\n        \n        ' Add genres and book titles\n        genres(\"Science Fiction\") = New List(Of String) From {\"Dune\", \"Neuromancer\", \"Foundation\"}\n        genres(\"Fantasy\") = New List(Of String) From {\"The Hobbit\", \"Harry Potter\", \"The Name of the Wind\"}\n        genres(\"Mystery\") = New List(Of String) From {\"The Girl with the Dragon Tattoo\", \"Gone Girl\", \"Sherlock Holmes\"}\n        \n        ' Retrieve books for a given genre\n        Dim genreToSearch As String = \"Fantasy\"\n        If genres.ContainsKey(genreToSearch) Then\n            Dim books As List(Of String) = genres(genreToSearch)\n            For Each book In books\n                Console.WriteLine(book)\n            Next\n        Else\n            Console.WriteLine(\"Genre not found.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function that uses a dictionary to convert state abbreviations to full state names.",
    "code": "```vb\nFunction GetStateName(abbreviation As String) As String\n    Dim states As New Dictionary(Of String, String) From {\n        {\"AL\", \"Alabama\"},\n        {\"AK\", \"Alaska\"},\n        {\"AZ\", \"Arizona\"},\n        {\"AR\", \"Arkansas\"},\n        {\"CA\", \"California\"},\n        {\"CO\", \"Colorado\"},\n        {\"CT\", \"Connecticut\"},\n        {\"DE\", \"Delaware\"},\n        {\"FL\", \"Florida\"},\n        {\"GA\", \"Georgia\"},\n        {\"HI\", \"Hawaii\"},\n        {\"ID\", \"Idaho\"},\n        {\"IL\", \"Illinois\"},\n        {\"IN\", \"Indiana\"},\n        {\"IA\", \"Iowa\"},\n        {\"KS\", \"Kansas\"},\n        {\"KY\", \"Kentucky\"},\n        {\"LA\", \"Louisiana\"},\n        {\"ME\", \"Maine\"},\n        {\"MD\", \"Maryland\"},\n        {\"MA\", \"Massachusetts\"},\n        {\"MI\", \"Michigan\"},\n        {\"MN\", \"Minnesota\"},\n        {\"MS\", \"Mississippi\"},\n        {\"MO\", \"Missouri\"},\n        {\"MT\", \"Montana\"},\n        {\"NE\", \"Nebraska\"},\n        {\"NV\", \"Nevada\"},\n        {\"NH\", \"New Hampshire\"},\n        {\"NJ\", \"New Jersey\"},\n        {\"NM\", \"New Mexico\"},\n        {\"NY\", \"New York\"},\n        {\"NC\", \"North Carolina\"},\n        {\"ND\", \"North Dakota\"},\n        {\"OH\", \"Ohio\"},\n        {\"OK\", \"Oklahoma\"},\n        {\"OR\", \"Oregon\"},\n        {\"PA\", \"Pennsylvania\"},\n        {\"RI\", \"Rhode Island\"},\n        {\"SC\", \"South Carolina\"},\n        {\"SD\", \"South Dakota\"},\n        {\"TN\", \"Tennessee\"},\n        {\"TX\", \"Texas\"},\n        {\"UT\", \"Utah\"},\n        {\"VT\", \"Vermont\"},\n        {\"VA\", \"Virginia\"},\n        {\"WA\", \"Washington\"},\n        {\"WV\", \"West Virginia\"},\n        {\"WI\", \"Wisconsin\"},\n        {\"WY\", \"Wyoming\"}\n    }\n\n    If states.ContainsKey(abbreviation.ToUpper()) Then\n        Return states(abbreviation.ToUpper())\n    Else\n        Return \"Unknown abbreviation\"\n    End If\nEnd Function\n```"
  },
  {
    "task": "Build a dictionary to store customer names and their order histories.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim customerOrders As New Dictionary(Of String, List(Of String))()\n\n        ' Assuming you want to add some customers and their order histories\n        customerOrders(\"John Doe\") = New List(Of String) From {\"Order1\", \"Order2\"}\n        customerOrders(\"Jane Smith\") = New List(Of String) From {\"Order3\", \"Order4\"}\n\n        ' Output the customer names and their order histories\n        For Each customer In customerOrders.Keys\n            Console.WriteLine(\"Customer: \" & customer)\n            Console.WriteLine(\"Orders: \" & String.Join(\", \", customerOrders(customer)))\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a map to manage parking lot spaces, tracking which spaces are occupied.",
    "code": "```vb\nModule ParkingLotManager\n    Sub Main()\n        Dim parkingLot As New Dictionary(Of Integer, Boolean) From {\n            {1, False},\n            {2, False},\n            {3, False},\n            {4, False},\n            {5, False}\n        }\n\n        ' Mark space 3 as occupied\n        parkingLot(3) = True\n\n        ' Check if space 2 is occupied\n        Dim isOccupied As Boolean = parkingLot(2)\n\n        ' Print the status of each parking space\n        For Each space In parkingLot.Keys\n            Console.WriteLine(\"Space \" & space & \" is \" & If(parkingLot(space), \"occupied\", \"free\"))\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a program that uses a dictionary to track the scores of players in a game.",
    "code": "```vb\nModule GameScores\n    Sub Main()\n        Dim playerScores As New Dictionary(Of String, Integer)()\n\n        ' Adding players and their scores\n        playerScores(\"Alice\") = 10\n        playerScores(\"Bob\") = 15\n        playerScores(\"Charlie\") = 12\n\n        ' Updating a player's score\n        playerScores(\"Alice\") += 5\n\n        ' Displaying the scores\n        For Each player In playerScores.Keys\n            Console.WriteLine(player & \": \" & playerScores(player))\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a dictionary to store scientific terms and their definitions, allowing users to look up definitions.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim scientificTerms As New Dictionary(Of String, String) From {\n            {\"Photosynthesis\", \"The process by which green plants use sunlight to synthesize foods with the help of chlorophyll.\"},\n            {\"Evolution\", \"The process by which different kinds of living organisms are thought to have developed and diversified from earlier forms during the history of the earth.\"},\n            {\"Atom\", \"The basic unit of a chemical element.\"}\n        }\n\n        Console.WriteLine(\"Enter a scientific term to look up its definition:\")\n        Dim term As String = Console.ReadLine()\n\n        If scientificTerms.ContainsKey(term) Then\n            Console.WriteLine(\"Definition: \" & scientificTerms(term))\n        Else\n            Console.WriteLine(\"Term not found in the dictionary.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function that uses a map to convert temperature scales (e.g., Celsius to Fahrenheit).",
    "code": "```vb\nModule TemperatureConverter\n    Function ConvertTemperature(value As Double, scale As String) As Double\n        Dim conversionMap As New Dictionary(Of String, Func(Of Double, Double)) From {\n            {\"CtoF\", Function(c) (c * 9 / 5) + 32},\n            {\"FtoC\", Function(f) (f - 32) * 5 / 9}\n        }\n        \n        If conversionMap.ContainsKey(scale) Then\n            Return conversionMap(scale).Invoke(value)\n        Else\n            Throw New ArgumentException(\"Invalid temperature scale\")\n        End If\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Create a dictionary to store employee names and their respective departments.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim employeeDepartments As New Dictionary(Of String, String) From {\n            {\"Alice Johnson\", \"Human Resources\"},\n            {\"Bob Smith\", \"Engineering\"},\n            {\"Carol White\", \"Marketing\"}\n        }\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Build a program that uses a map to store tourist attractions and their locations.",
    "code": "```vb\nModule TouristAttractions\n    Sub Main()\n        Dim attractions As New Dictionary(Of String, String) From {\n            {\"Eiffel Tower\", \"Paris\"},\n            {\"Statue of Liberty\", \"New York\"},\n            {\"Great Wall of China\", \"China\"},\n            {\"Colosseum\", \"Rome\"},\n            {\"Taj Mahal\", \"Agra\"}\n        }\n\n        For Each attraction In attractions\n            Console.WriteLine(\"Attraction: \" & attraction.Key & \", Location: \" & attraction.Value)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a dictionary to manage a collection of music albums, allowing additions and removals.",
    "code": "```vb\nModule MusicAlbumsManager\n    Sub Main()\n        ' Create a dictionary to hold music albums\n        Dim albums As New Dictionary(Of String, String)()\n\n        ' Add some albums to the collection\n        AddAlbum(albums, \"The Dark Side of the Moon\", \"Pink Floyd\")\n        AddAlbum(albums, \"Abbey Road\", \"The Beatles\")\n        AddAlbum(albums, \"Thriller\", \"Michael Jackson\")\n\n        ' Remove an album from the collection\n        RemoveAlbum(albums, \"Abbey Road\")\n\n        ' Display remaining albums\n        DisplayAlbums(albums)\n    End Sub\n\n    ' Function to add an album\n    Sub AddAlbum(albums As Dictionary(Of String, String), title As String, artist As String)\n        If Not albums.ContainsKey(title) Then\n            albums.Add(title, artist)\n        End If\n    End Sub\n\n    ' Function to remove an album\n    Sub RemoveAlbum(albums As Dictionary(Of String, String), title As String)\n        If albums.ContainsKey(title) Then\n            albums.Remove(title)\n        End If\n    End Sub\n\n    ' Function to display all albums\n    Sub DisplayAlbums(albums As Dictionary(Of String, String))\n        For Each album In albums\n            Console.WriteLine(\"Title: \" & album.Key & \", Artist: \" & album.Value)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a script that uses a map to track the inventory of a small retail store.",
    "code": "```vb\nModule InventoryTracker\n    Sub Main()\n        Dim inventory As New Dictionary(Of String, Integer) From {\n            {\"Apples\", 100},\n            {\"Bananas\", 150},\n            {\"Oranges\", 120}\n        }\n\n        ' Accessing the inventory\n        Console.WriteLine(\"Current Inventory:\")\n        For Each item As KeyValuePair(Of String, Integer) In inventory\n            Console.WriteLine(item.Key & \": \" & item.Value)\n        Next\n\n        ' Update inventory\n        inventory(\"Apples\") -= 10\n        inventory(\"Bananas\") += 20\n\n        ' Add new item to the inventory\n        inventory(\"Grapes\") = 50\n\n        ' Display updated inventory\n        Console.WriteLine(vbCrLf & \"Updated Inventory:\")\n        For Each item As KeyValuePair(Of String, Integer) In inventory\n            Console.WriteLine(item.Key & \": \" & item.Value)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a dictionary to store the names of rivers and their lengths, allowing length lookups by river name.",
    "code": "```vb\nModule Program\n    Sub Main()\n        Dim rivers As New Dictionary(Of String, Integer) From {\n            {\"Nile\", 6650},\n            {\"Amazon\", 6400},\n            {\"Yangtze\", 6300},\n            {\"Mississippi\", 3730}\n        }\n\n        ' Example lookup\n        Dim riverName As String = \"Amazon\"\n        If rivers.ContainsKey(riverName) Then\n            Console.WriteLine(\"The length of the \" & riverName & \" is \" & rivers(riverName) & \" km.\")\n        Else\n            Console.WriteLine(\"River not found.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a system that uses a map to track the availability of conference rooms in an office building.",
    "code": "```vb\nModule ConferenceRoomTracker\n    Sub Main()\n        Dim conferenceRooms As New Dictionary(Of String, Boolean)\n\n        ' Initialize the map with conference rooms and their availability\n        conferenceRooms.Add(\"Room A\", True)\n        conferenceRooms.Add(\"Room B\", False)\n        conferenceRooms.Add(\"Room C\", True)\n        conferenceRooms.Add(\"Room D\", True)\n\n        ' Function to check room availability\n        Dim roomName As String = \"Room A\"\n        If conferenceRooms.ContainsKey(roomName) Then\n            Dim isAvailable As Boolean = conferenceRooms(roomName)\n            Console.WriteLine(roomName & \" is \" & If(isAvailable, \"available\", \"not available\"))\n        Else\n            Console.WriteLine(\"Room not found\")\n        End If\n\n        ' Function to book a room\n        Dim roomToBook As String = \"Room C\"\n        If conferenceRooms.ContainsKey(roomToBook) AndAlso conferenceRooms(roomToBook) Then\n            conferenceRooms(roomToBook) = False\n            Console.WriteLine(roomToBook & \" has been booked.\")\n        Else\n            Console.WriteLine(roomToBook & \" is not available for booking.\")\n        End If\n\n        ' Function to release a room\n        Dim roomToRelease As String = \"Room B\"\n        If conferenceRooms.ContainsKey(roomToRelease) AndAlso Not conferenceRooms(roomToRelease) Then\n            conferenceRooms(roomToRelease) = True\n            Console.WriteLine(roomToRelease & \" has been released.\")\n        Else\n            Console.WriteLine(roomToRelease & \" cannot be released.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a program that uses a dictionary to associate animal species with their habitats.",
    "code": "```vb\nModule AnimalHabitat\n    Sub Main()\n        Dim animalHabitats As New Dictionary(Of String, String)\n\n        animalHabitats(\"Lion\") = \"Savannah\"\n        animalHabitats(\"Polar Bear\") = \"Arctic\"\n        animalHabitats(\"Kangaroo\") = \"Grassland\"\n        animalHabitats(\"Penguin\") = \"Antarctica\"\n        animalHabitats(\"Eagle\") = \"Mountains\"\n\n        For Each animal In animalHabitats.Keys\n            Console.WriteLine(\"The \" & animal & \" lives in the \" & animalHabitats(animal) & \".\")\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a map to store the names of mountains and their elevations, then find the tallest mountain.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim mountains As New Dictionary(Of String, Integer) From {\n            {\"Everest\", 8848},\n            {\"K2\", 8611},\n            {\"Kangchenjunga\", 8586},\n            {\"Lhotse\", 8516},\n            {\"Makalu\", 8485}\n        }\n\n        Dim tallestMountain As String = \"\"\n        Dim maxElevation As Integer = Integer.MinValue\n\n        For Each mountain In mountains\n            If mountain.Value > maxElevation Then\n                maxElevation = mountain.Value\n                tallestMountain = mountain.Key\n            End If\n        Next\n\n        Console.WriteLine(\"The tallest mountain is \" & tallestMountain & \" with an elevation of \" & maxElevation & \" meters.\")\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function that uses a dictionary to convert time zones to their respective UTC offsets.",
    "code": "```vb\nFunction TimeZoneToUTCOffset(timeZone As String) As String\n    Dim timeZones As New Dictionary(Of String, String) From {\n        {\"PST\", \"-08:00\"},\n        {\"MST\", \"-07:00\"},\n        {\"CST\", \"-06:00\"},\n        {\"EST\", \"-05:00\"},\n        {\"GMT\", \"+00:00\"},\n        {\"CET\", \"+01:00\"},\n        {\"EET\", \"+02:00\"},\n        {\"IST\", \"+05:30\"},\n        {\"CST China\", \"+08:00\"},\n        {\"JST\", \"+09:00\"}\n    }\n\n    If timeZones.ContainsKey(timeZone) Then\n        Return timeZones(timeZone)\n    Else\n        Return \"Unknown Time Zone\"\n    End If\nEnd Function\n```"
  },
  {
    "task": "Build a dictionary to store the names of programming languages and their creators.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim languages As New Dictionary(Of String, String)\n        languages.Add(\"Python\", \"Guido van Rossum\")\n        languages.Add(\"Java\", \"James Gosling\")\n        languages.Add(\"C\", \"Dennis Ritchie\")\n        languages.Add(\"C++\", \"Bjarne Stroustrup\")\n        languages.Add(\"JavaScript\", \"Brendan Eich\")\n        ' Additional languages can be added similarly\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a map to manage a list of subscribers to a newsletter, allowing subscriptions and cancellations.",
    "code": "```vb\nModule NewsletterManager\n    Sub Main()\n        Dim subscribers As New Dictionary(Of String, Boolean)\n\n        ' Subscribe users\n        Subscribe(subscribers, \"alice@example.com\")\n        Subscribe(subscribers, \"bob@example.com\")\n\n        ' Cancel subscription\n        CancelSubscription(subscribers, \"alice@example.com\")\n\n        ' Display subscribers\n        DisplaySubscribers(subscribers)\n    End Sub\n\n    Sub Subscribe(ByRef subs As Dictionary(Of String, Boolean), email As String)\n        If Not subs.ContainsKey(email) Then\n            subs(email) = True\n            Console.WriteLine(email & \" subscribed successfully.\")\n        Else\n            Console.WriteLine(email & \" is already subscribed.\")\n        End If\n    End Sub\n\n    Sub CancelSubscription(ByRef subs As Dictionary(Of String, Boolean), email As String)\n        If subs.ContainsKey(email) Then\n            subs.Remove(email)\n            Console.WriteLine(email & \" subscription canceled.\")\n        Else\n            Console.WriteLine(email & \" is not subscribed.\")\n        End If\n    End Sub\n\n    Sub DisplaySubscribers(ByVal subs As Dictionary(Of String, Boolean))\n        Console.WriteLine(\"Current subscribers:\")\n        For Each email In subs.Keys\n            Console.WriteLine(email)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a program that uses a dictionary to track the number of likes for social media posts.",
    "code": "```vb\nModule SocialMediaLikes\n    Sub Main()\n        Dim postLikes As New Dictionary(Of String, Integer)\n\n        ' Add some posts with initial likes\n        postLikes(\"Post1\") = 0\n        postLikes(\"Post2\") = 0\n        postLikes(\"Post3\") = 0\n\n        ' Simulate liking posts\n        AddLike(postLikes, \"Post1\")\n        AddLike(postLikes, \"Post2\")\n        AddLike(postLikes, \"Post2\")\n        AddLike(postLikes, \"Post3\")\n        AddLike(postLikes, \"Post3\")\n        AddLike(postLikes, \"Post3\")\n\n        ' Display the number of likes for each post\n        For Each post In postLikes.Keys\n            Console.WriteLine(post & \" has \" & postLikes(post) & \" likes.\")\n        Next\n    End Sub\n\n    Sub AddLike(posts As Dictionary(Of String, Integer), postName As String)\n        If posts.ContainsKey(postName) Then\n            posts(postName) += 1\n        Else\n            posts(postName) = 1\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a dictionary to store the names of elements and their atomic numbers, allowing lookups by element name.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim elements As New Dictionary(Of String, Integer)\n        elements.Add(\"Hydrogen\", 1)\n        elements.Add(\"Helium\", 2)\n        elements.Add(\"Lithium\", 3)\n        elements.Add(\"Beryllium\", 4)\n        elements.Add(\"Boron\", 5)\n        elements.Add(\"Carbon\", 6)\n        elements.Add(\"Nitrogen\", 7)\n        elements.Add(\"Oxygen\", 8)\n        elements.Add(\"Fluorine\", 9)\n        elements.Add(\"Neon\", 10)\n\n        ' Example of lookup by element name\n        Dim elementName As String = \"Oxygen\"\n        If elements.ContainsKey(elementName) Then\n            Console.WriteLine(\"The atomic number of \" & elementName & \" is \" & elements(elementName))\n        Else\n            Console.WriteLine(elementName & \" not found in the dictionary.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function that uses a map to group movies by their directors.",
    "code": "```vb\nFunction GroupMoviesByDirector(movies As List(Of Tuple(Of String, String))) As Dictionary(Of String, List(Of String))\n    Dim directorMap As New Dictionary(Of String, List(Of String))\n\n    For Each movie In movies\n        Dim director As String = movie.Item1\n        Dim movieTitle As String = movie.Item2\n        \n        If Not directorMap.ContainsKey(director) Then\n            directorMap(director) = New List(Of String)\n        End If\n        \n        directorMap(director).Add(movieTitle)\n    Next\n\n    Return directorMap\nEnd Function\n```"
  },
  {
    "task": "Create a dictionary to store the names of historical figures and their birth years.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim historicalFigures As New Dictionary(Of String, Integer) From {\n            {\"Albert Einstein\", 1879},\n            {\"Isaac Newton\", 1643},\n            {\"Marie Curie\", 1867},\n            {\"Galileo Galilei\", 1564},\n            {\"Ada Lovelace\", 1815}\n        }\n        ' Example usage: Display the birth year of a specific historical figure\n        Console.WriteLine(\"Albert Einstein was born in \" & historicalFigures(\"Albert Einstein\"))\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Build a program that uses a map to store the names of planets and their diameters.",
    "code": "```vb\nModule PlanetsMap\n    Sub Main()\n        Dim planets As New Dictionary(Of String, Double) From {\n            {\"Mercury\", 4879.4},\n            {\"Venus\", 12103.6},\n            {\"Earth\", 12742.0},\n            {\"Mars\", 6779.0},\n            {\"Jupiter\", 139822.0},\n            {\"Saturn\", 116464.0},\n            {\"Uranus\", 50724.0},\n            {\"Neptune\", 49244.0}\n        }\n\n        For Each planet In planets\n            Console.WriteLine(\"Planet: \" & planet.Key & \", Diameter: \" & planet.Value & \" km\")\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a dictionary to track the ratings of restaurants, allowing updates to ratings.",
    "code": "```vb\nModule RestaurantRatings\n    Sub Main()\n        Dim restaurantRatings As New Dictionary(Of String, Integer)\n\n        ' Adding initial ratings\n        restaurantRatings(\"Pasta Palace\") = 5\n        restaurantRatings(\"Burger Barn\") = 4\n        restaurantRatings(\"Sushi Central\") = 3\n\n        ' Updating a rating\n        restaurantRatings(\"Burger Barn\") = 5\n\n        ' Displaying all ratings\n        For Each restaurant As KeyValuePair(Of String, Integer) In restaurantRatings\n            Console.WriteLine(\"Restaurant: \" & restaurant.Key & \", Rating: \" & restaurant.Value)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a script that uses a map to translate binary numbers to decimal.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim binaryToDecimal As New Dictionary(Of String, Integer) From {\n            {\"0\", 0},\n            {\"1\", 1},\n            {\"10\", 2},\n            {\"11\", 3},\n            {\"100\", 4},\n            {\"101\", 5},\n            {\"110\", 6},\n            {\"111\", 7},\n            {\"1000\", 8},\n            {\"1001\", 9}\n        }\n\n        Dim binaryInputs As String() = {\"0\", \"1\", \"10\", \"11\", \"100\", \"101\", \"110\", \"111\", \"1000\", \"1001\"}\n\n        For Each binary As String In binaryInputs\n            If binaryToDecimal.ContainsKey(binary) Then\n                Console.WriteLine(\"Binary: \" & binary & \" -> Decimal: \" & binaryToDecimal(binary))\n            Else\n                Console.WriteLine(\"Binary: \" & binary & \" -> Decimal: Not Found\")\n            End If\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a dictionary to store the names of artists and their famous works.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim artistsWorks As New Dictionary(Of String, String) From {\n            {\"Vincent van Gogh\", \"Starry Night\"},\n            {\"Leonardo da Vinci\", \"Mona Lisa\"},\n            {\"Pablo Picasso\", \"Guernica\"},\n            {\"Claude Monet\", \"Water Lilies\"},\n            {\"Frida Kahlo\", \"The Two Fridas\"}\n        }\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a system that uses a map to track the maintenance schedules of vehicles.",
    "code": "```vb\nModule VehicleMaintenance\n    Sub Main()\n        Dim maintenanceSchedule As New Dictionary(Of String, String) From {\n            {\"ABC123\", \"2023-11-01\"},\n            {\"XYZ789\", \"2023-12-15\"},\n            {\"LMN456\", \"2024-01-20\"}\n        }\n\n        ' Example of accessing and displaying the maintenance schedule\n        For Each vehicle In maintenanceSchedule.Keys\n            Console.WriteLine(\"Vehicle: \" & vehicle & \", Maintenance Date: \" & maintenanceSchedule(vehicle))\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a program that uses a dictionary to associate languages with their number of speakers worldwide.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim languageSpeakers As New Dictionary(Of String, Long) From {\n            {\"English\", 1500000000},\n            {\"Mandarin\", 1100000000},\n            {\"Hindi\", 600000000},\n            {\"Spanish\", 460000000},\n            {\"French\", 280000000}\n        }\n\n        For Each language In languageSpeakers.Keys\n            Console.WriteLine(\"Language: \" & language & \", Speakers: \" & languageSpeakers(language))\n        Next\n\n        Console.ReadLine()\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a map to store the names of cities and their average annual temperatures.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim cityTemperatures As New Dictionary(Of String, Double) From {\n            {\"New York\", 12.7},\n            {\"Los Angeles\", 18.5},\n            {\"Chicago\", 10.3},\n            {\"Houston\", 20.8},\n            {\"Phoenix\", 23.0}\n        }\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function that uses a dictionary to convert metric units to imperial units.",
    "code": "```vb\nFunction ConvertMetricToImperial(ByVal unit As String, ByVal value As Double) As Double\n    Dim conversionFactors As New Dictionary(Of String, Double) From {\n        {\"metersToFeet\", 3.28084},\n        {\"kilometersToMiles\", 0.621371},\n        {\"centimetersToInches\", 0.393701},\n        {\"gramsToOunces\", 0.035274},\n        {\"kilogramsToPounds\", 2.20462}\n    }\n\n    Dim conversionKey As String = unit.ToLower()\n    If conversionFactors.ContainsKey(conversionKey) Then\n        Return value * conversionFactors(conversionKey)\n    Else\n        Throw New ArgumentException(\"Unsupported unit conversion\")\n    End If\nEnd Function\n```"
  },
  {
    "task": "Build a dictionary to store the names of sports and their respective world records.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim worldRecords As New Dictionary(Of String, String) From {\n            {\"100m\", \"Usain Bolt - 9.58 seconds\"},\n            {\"Marathon\", \"Eliud Kipchoge - 2:01:09\"},\n            {\"Long Jump\", \"Mike Powell - 8.95 meters\"},\n            {\"High Jump\", \"Javier Sotomayor - 2.45 meters\"}\n        }\n\n        ' Example usage of the dictionary\n        For Each sport As KeyValuePair(Of String, String) In worldRecords\n            Console.WriteLine(\"Sport: \" & sport.Key & \", World Record: \" & sport.Value)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a map to manage a list of favorite movies, allowing additions and deletions.",
    "code": "```vb\nModule FavoriteMovies\n\n    Sub Main()\n        Dim favoriteMovies As New Dictionary(Of String, String)\n\n        ' Add movies to the dictionary\n        favoriteMovies.Add(\"Inception\", \"Christopher Nolan\")\n        favoriteMovies.Add(\"The Matrix\", \"Lana Wachowski, Lilly Wachowski\")\n        favoriteMovies.Add(\"Interstellar\", \"Christopher Nolan\")\n\n        ' Remove a movie from the dictionary\n        favoriteMovies.Remove(\"The Matrix\")\n\n        ' Output the current favorite movies\n        For Each movie As KeyValuePair(Of String, String) In favoriteMovies\n            Console.WriteLine(\"Title: \" & movie.Key & \", Director: \" & movie.Value)\n        Next\n    End Sub\n\nEnd Module\n```"
  },
  {
    "task": "Create a program that uses a dictionary to track the distances between pairs of cities.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim cityDistances As New Dictionary(Of String, Integer)\n\n        ' Adding distances between pairs of cities\n        cityDistances(\"New York to Los Angeles\") = 2445\n        cityDistances(\"Chicago to Houston\") = 1084\n        cityDistances(\"Phoenix to Philadelphia\") = 2075\n        cityDistances(\"San Antonio to San Diego\") = 1173\n        cityDistances(\"Dallas to San Jose\") = 1438\n\n        ' Accessing and displaying the distances\n        For Each pair In cityDistances\n            Console.WriteLine(pair.Key & \" : \" & pair.Value & \" miles\")\n        Next\n\n        Console.ReadLine()\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a dictionary to store the names of planets and their orbital periods.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim planetOrbitalPeriods As New Dictionary(Of String, Double) From {\n            {\"Mercury\", 88.0},\n            {\"Venus\", 224.7},\n            {\"Earth\", 365.2},\n            {\"Mars\", 687.0},\n            {\"Jupiter\", 4331.0},\n            {\"Saturn\", 10747.0},\n            {\"Uranus\", 30589.0},\n            {\"Neptune\", 59800.0}\n        }\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function that uses a map to convert HTML color codes to their respective color names.",
    "code": "```vb\nFunction GetColorNameByCode(colorCode As String) As String\n    Dim colorMap As New Dictionary(Of String, String) From {\n        {\"#FFFFFF\", \"White\"},\n        {\"#000000\", \"Black\"},\n        {\"#FF0000\", \"Red\"},\n        {\"#00FF00\", \"Green\"},\n        {\"#0000FF\", \"Blue\"},\n        {\"#FFFF00\", \"Yellow\"},\n        {\"#FFA500\", \"Orange\"},\n        {\"#800080\", \"Purple\"}\n    }\n    \n    If colorMap.ContainsKey(colorCode) Then\n        Return colorMap(colorCode)\n    Else\n        Return \"Unknown\"\n    End If\nEnd Function\n```"
  },
  {
    "task": "Create a dictionary to store the names of composers and their famous compositions.",
    "code": "```vb\nModule ComposerDictionary\n    Sub Main()\n        Dim composers As New Dictionary(Of String, String) From {\n            {\"Ludwig van Beethoven\", \"Symphony No. 9\"},\n            {\"Wolfgang Amadeus Mozart\", \"Eine kleine Nachtmusik\"},\n            {\"Johann Sebastian Bach\", \"Brandenburg Concertos\"},\n            {\"Fr\u00e9d\u00e9ric Chopin\", \"Nocturnes\"},\n            {\"Pyotr Ilyich Tchaikovsky\", \"Swan Lake\"}\n        }\n\n        For Each composer In composers\n            Console.WriteLine(\"Composer: \" & composer.Key & \", Famous Composition: \" & composer.Value)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Build a program that uses a map to store the names of bridges and their lengths.",
    "code": "```vb\nModule BridgeLengths\n    Sub Main()\n        Dim bridgeLengths As New Dictionary(Of String, Integer) From {\n            {\"Golden Gate Bridge\", 2737},\n            {\"Brooklyn Bridge\", 1595},\n            {\"London Bridge\", 928}\n        }\n\n        For Each bridge As KeyValuePair(Of String, Integer) In bridgeLengths\n            Console.WriteLine(\"Bridge: \" & bridge.Key & \", Length: \" & bridge.Value & \" meters\")\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a dictionary to manage a list of personal goals, allowing updates to goals.",
    "code": "```vb\nModule PersonalGoals\n    Sub Main()\n        Dim goals As New Dictionary(Of String, String) From {\n            {\"Health\", \"Exercise daily\"},\n            {\"Career\", \"Complete a coding course\"},\n            {\"Finance\", \"Save 20% of income\"}\n        }\n\n        ' Update a goal\n        goals(\"Health\") = \"Exercise three times a week\"\n\n        ' Display all goals\n        For Each goal In goals\n            Console.WriteLine($\"{goal.Key}: {goal.Value}\")\n        Next\n\n        ' Keep the console open\n        Console.ReadLine()\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a script that uses a map to convert hexadecimal numbers to binary.",
    "code": "```vb\nModule HexToBinaryConverter\n    Sub Main()\n        Dim hexToBin As New Dictionary(Of Char, String) From {\n            {\"0\"c, \"0000\"},\n            {\"1\"c, \"0001\"},\n            {\"2\"c, \"0010\"},\n            {\"3\"c, \"0011\"},\n            {\"4\"c, \"0100\"},\n            {\"5\"c, \"0101\"},\n            {\"6\"c, \"0110\"},\n            {\"7\"c, \"0111\"},\n            {\"8\"c, \"1000\"},\n            {\"9\"c, \"1001\"},\n            {\"A\"c, \"1010\"},\n            {\"B\"c, \"1011\"},\n            {\"C\"c, \"1100\"},\n            {\"D\"c, \"1101\"},\n            {\"E\"c, \"1110\"},\n            {\"F\"c, \"1111\"}\n        }\n\n        Dim hexNumber As String = \"1A3F\"\n        Dim binaryResult As String = String.Empty\n\n        For Each digit As Char In hexNumber\n            If hexToBin.ContainsKey(Char.ToUpper(digit)) Then\n                binaryResult &= hexToBin(Char.ToUpper(digit))\n            End If\n        Next\n\n        Console.WriteLine(\"Hexadecimal: \" & hexNumber)\n        Console.WriteLine(\"Binary: \" & binaryResult)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a dictionary to store the names of trees and their average heights.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim treeHeights As New Dictionary(Of String, Double) From {\n            {\"Oak\", 70.0},\n            {\"Pine\", 80.0},\n            {\"Maple\", 50.0},\n            {\"Birch\", 40.0},\n            {\"Spruce\", 60.0}\n        }\n    End Sub\nEnd Module\n```"
  }
]