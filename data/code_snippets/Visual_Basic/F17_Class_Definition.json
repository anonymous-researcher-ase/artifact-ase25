[
  {
    "task": "Define a class representing a book with attributes for title, author, and number of pages, and a method to display the book's information.",
    "code": "```vb\nPublic Class Book\n    Public Property Title As String\n    Public Property Author As String\n    Public Property NumberOfPages As Integer\n\n    Public Sub DisplayInfo()\n        Console.WriteLine(\"Title: \" & Title)\n        Console.WriteLine(\"Author: \" & Author)\n        Console.WriteLine(\"Number of Pages: \" & NumberOfPages)\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Create a class for a bank account that includes attributes for account number, balance, and a method to deposit funds.",
    "code": "```vb\nPublic Class BankAccount\n    Private accountNumber As String\n    Private balance As Decimal\n\n    Public Sub New(ByVal acctNumber As String, ByVal initialBalance As Decimal)\n        accountNumber = acctNumber\n        balance = initialBalance\n    End Sub\n\n    Public Sub Deposit(ByVal amount As Decimal)\n        balance += amount\n    End Sub\n\n    Public ReadOnly Property AccountNumber() As String\n        Get\n            Return accountNumber\n        End Get\n    End Property\n\n    Public ReadOnly Property Balance() As Decimal\n        Get\n            Return balance\n        End Get\n    End Property\nEnd Class\n```"
  },
  {
    "task": "Design a class for a vehicle with properties for make, model, and year, and a method to start the engine.",
    "code": "```vb\nPublic Class Vehicle\n    Private _make As String\n    Private _model As String\n    Private _year As Integer\n\n    Public Property Make() As String\n        Get\n            Return _make\n        End Get\n        Set(ByVal value As String)\n            _make = value\n        End Set\n    End Property\n\n    Public Property Model() As String\n        Get\n            Return _model\n        End Get\n        Set(ByVal value As String)\n            _model = value\n        End Set\n    End Property\n\n    Public Property Year() As Integer\n        Get\n            Return _year\n        End Get\n        Set(ByVal value As Integer)\n            _year = value\n        End Set\n    End Property\n\n    Public Sub StartEngine()\n        Console.WriteLine(\"The engine is starting.\")\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Implement a class that models a student with attributes for name, ID, and grades, and a method to calculate the GPA.",
    "code": "```vb\nPublic Class Student\n    Private name As String\n    Private studentID As String\n    Private grades As List(Of Double)\n\n    Public Sub New(ByVal name As String, ByVal studentID As String, ByVal grades As List(Of Double))\n        Me.name = name\n        Me.studentID = studentID\n        Me.grades = grades\n    End Sub\n\n    Public Function CalculateGPA() As Double\n        If grades.Count = 0 Then\n            Return 0\n        End If\n        Dim total As Double = 0\n        For Each grade As Double In grades\n            total += grade\n        Next\n        Return total / grades.Count\n    End Function\nEnd Class\n```"
  },
  {
    "task": "Construct a class for a rectangle that has attributes for width and height, and methods to calculate area and perimeter.",
    "code": "```vb\nPublic Class Rectangle\n    Private width As Double\n    Private height As Double\n\n    Public Sub New(ByVal width As Double, ByVal height As Double)\n        Me.width = width\n        Me.height = height\n    End Sub\n\n    Public Function CalculateArea() As Double\n        Return width * height\n    End Function\n\n    Public Function CalculatePerimeter() As Double\n        Return 2 * (width + height)\n    End Function\nEnd Class\n```"
  },
  {
    "task": "Formulate a class for a smartphone with properties for brand, model, and battery life, and a method to make a call.",
    "code": "```vb\nPublic Class Smartphone\n    Public Property Brand As String\n    Public Property Model As String\n    Public Property BatteryLife As Integer\n\n    Public Sub MakeCall(ByVal phoneNumber As String)\n        Console.WriteLine(\"Calling \" & phoneNumber & \" from \" & Model & \"...\")\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Build a class representing a movie with attributes for title, director, and duration, and a method to play the movie.",
    "code": "```vb\nPublic Class Movie\n    Private title As String\n    Private director As String\n    Private duration As Integer\n\n    Public Sub New(ByVal movieTitle As String, ByVal movieDirector As String, ByVal movieDuration As Integer)\n        title = movieTitle\n        director = movieDirector\n        duration = movieDuration\n    End Sub\n\n    Public Sub PlayMovie()\n        Console.WriteLine(\"Playing movie: \" & title)\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Create a class for an employee with attributes for name, position, and salary, and a method to display their profile.",
    "code": "```vb\nPublic Class Employee\n    Public Property Name As String\n    Public Property Position As String\n    Public Property Salary As Decimal\n\n    Public Sub DisplayProfile()\n        Console.WriteLine(\"Name: \" & Name)\n        Console.WriteLine(\"Position: \" & Position)\n        Console.WriteLine(\"Salary: \" & Salary.ToString(\"C\"))\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Design a class for a library that includes attributes for name, location, and books available, and a method to add a new book.",
    "code": "```vb\nPublic Class Library\n    Private name As String\n    Private location As String\n    Private booksAvailable As List(Of String)\n\n    Public Sub New(ByVal name As String, ByVal location As String)\n        Me.name = name\n        Me.location = location\n        Me.booksAvailable = New List(Of String)()\n    End Sub\n\n    Public Sub AddBook(ByVal book As String)\n        booksAvailable.Add(book)\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Develop a class for a shopping cart with properties for items and total cost, and methods to add and remove items.",
    "code": "```vb\nPublic Class ShoppingCart\n    Private items As List(Of String)\n    Private totalCost As Decimal\n\n    Public Sub New()\n        items = New List(Of String)()\n        totalCost = 0D\n    End Sub\n\n    Public Sub AddItem(item As String, cost As Decimal)\n        items.Add(item)\n        totalCost += cost\n    End Sub\n\n    Public Sub RemoveItem(item As String, cost As Decimal)\n        If items.Contains(item) Then\n            items.Remove(item)\n            totalCost -= cost\n        End If\n    End Sub\n\n    Public Function GetItems() As List(Of String)\n        Return New List(Of String)(items)\n    End Function\n\n    Public Function GetTotalCost() As Decimal\n        Return totalCost\n    End Function\nEnd Class\n```"
  },
  {
    "task": "Implement a class for a thermostat with attributes for current temperature and desired temperature, and a method to adjust the temperature.",
    "code": "```vb\nPublic Class Thermostat\n    Private currentTemperature As Double\n    Private desiredTemperature As Double\n\n    Public Property CurrentTemp As Double\n        Get\n            Return currentTemperature\n        End Get\n        Set(value As Double)\n            currentTemperature = value\n        End Set\n    End Property\n\n    Public Property DesiredTemp As Double\n        Get\n            Return desiredTemperature\n        End Get\n        Set(value As Double)\n            desiredTemperature = value\n        End Set\n    End Property\n\n    Public Sub AdjustTemperature()\n        If currentTemperature < desiredTemperature Then\n            currentTemperature += 1\n        ElseIf currentTemperature > desiredTemperature Then\n            currentTemperature -= 1\n        End If\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Formulate a class for a person with attributes for first name, last name, and age, and a method to return the full name.",
    "code": "```vb\nPublic Class Person\n    Private firstName As String\n    Private lastName As String\n    Private age As Integer\n\n    Public Sub New(ByVal fName As String, ByVal lName As String, ByVal age As Integer)\n        Me.firstName = fName\n        Me.lastName = lName\n        Me.age = age\n    End Sub\n\n    Public Function GetFullName() As String\n        Return firstName & \" \" & lastName\n    End Function\nEnd Class\n```"
  },
  {
    "task": "Construct a class for a game character with properties for health, strength, and inventory, and a method to attack.",
    "code": "```vb\nPublic Class GameCharacter\n    Private _health As Integer\n    Private _strength As Integer\n    Private _inventory As List(Of String)\n\n    Public Sub New(health As Integer, strength As Integer)\n        _health = health\n        _strength = strength\n        _inventory = New List(Of String)()\n    End Sub\n\n    Public Property Health As Integer\n        Get\n            Return _health\n        End Get\n        Set(value As Integer)\n            _health = value\n        End Set\n    End Property\n\n    Public Property Strength As Integer\n        Get\n            Return _strength\n        End Get\n        Set(value As Integer)\n            _strength = value\n        End Set\n    End Property\n\n    Public ReadOnly Property Inventory As List(Of String)\n        Get\n            Return _inventory\n        End Get\n    End Property\n\n    Public Sub Attack(target As GameCharacter)\n        target.Health -= Me.Strength\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Create a class for a calendar event with attributes for title, date, and location, and a method to reschedule the event.",
    "code": "```vb\nPublic Class CalendarEvent\n    Public Property Title As String\n    Public Property EventDate As DateTime\n    Public Property Location As String\n\n    Public Sub RescheduleEvent(newDate As DateTime)\n        Me.EventDate = newDate\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Design a class representing a song with properties for title, artist, and duration, and a method to play the song.",
    "code": "```vb\nPublic Class Song\n    Private _title As String\n    Private _artist As String\n    Private _duration As Double\n\n    Public Property Title As String\n        Get\n            Return _title\n        End Get\n        Set(value As String)\n            _title = value\n        End Set\n    End Property\n\n    Public Property Artist As String\n        Get\n            Return _artist\n        End Get\n        Set(value As String)\n            _artist = value\n        End Set\n    End Property\n\n    Public Property Duration As Double\n        Get\n            Return _duration\n        End Get\n        Set(value As Double)\n            _duration = value\n        End Set\n    End Property\n\n    Public Sub Play()\n        Console.WriteLine($\"Playing '{Title}' by {Artist}. Duration: {Duration} minutes.\")\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Develop a class for an order in an e-commerce system with attributes for order ID, customer, and items, and a method to calculate total price.",
    "code": "```vb\nPublic Class Order\n    Public Property OrderID As Integer\n    Public Property Customer As String\n    Public Property Items As List(Of OrderItem)\n\n    Public Sub New(orderID As Integer, customer As String, items As List(Of OrderItem))\n        Me.OrderID = orderID\n        Me.Customer = customer\n        Me.Items = items\n    End Sub\n\n    Public Function CalculateTotalPrice() As Decimal\n        Dim totalPrice As Decimal = 0\n        For Each item As OrderItem In Items\n            totalPrice += item.Price * item.Quantity\n        Next\n        Return totalPrice\n    End Function\nEnd Class\n\nPublic Class OrderItem\n    Public Property ItemName As String\n    Public Property Price As Decimal\n    Public Property Quantity As Integer\n\n    Public Sub New(itemName As String, price As Decimal, quantity As Integer)\n        Me.ItemName = itemName\n        Me.Price = price\n        Me.Quantity = quantity\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Build a class for a social media post with attributes for content, author, and timestamp, and a method to like the post.",
    "code": "```vb\nPublic Class SocialMediaPost\n    Public Property Content As String\n    Public Property Author As String\n    Public Property Timestamp As DateTime\n    Private Likes As Integer\n\n    Public Sub New(content As String, author As String, timestamp As DateTime)\n        Me.Content = content\n        Me.Author = author\n        Me.Timestamp = timestamp\n        Me.Likes = 0\n    End Sub\n\n    Public Sub LikePost()\n        Likes += 1\n    End Sub\n\n    Public Function GetLikes() As Integer\n        Return Likes\n    End Function\nEnd Class\n```"
  },
  {
    "task": "Create a class for a computer with properties for processor, RAM, and storage, and a method to display system specifications.",
    "code": "```vb\nPublic Class Computer\n    Public Property Processor As String\n    Public Property RAM As Integer\n    Public Property Storage As Integer\n\n    Public Sub DisplaySpecifications()\n        Console.WriteLine(\"Processor: \" & Processor)\n        Console.WriteLine(\"RAM: \" & RAM & \" GB\")\n        Console.WriteLine(\"Storage: \" & Storage & \" GB\")\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Implement a class for a restaurant menu item with attributes for name, price, and description, and a method to update the price.",
    "code": "```vb\nPublic Class MenuItem\n    Public Property Name As String\n    Public Property Price As Decimal\n    Public Property Description As String\n\n    Public Sub New(ByVal itemName As String, ByVal itemPrice As Decimal, ByVal itemDescription As String)\n        Name = itemName\n        Price = itemPrice\n        Description = itemDescription\n    End Sub\n\n    Public Sub UpdatePrice(ByVal newPrice As Decimal)\n        Price = newPrice\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Design a class for a package delivery with attributes for tracking number, destination, and status, and a method to update the status.",
    "code": "```vb\nPublic Class PackageDelivery\n    Private trackingNumber As String\n    Private destination As String\n    Private status As String\n\n    Public Sub New(ByVal trackingNumber As String, ByVal destination As String, ByVal status As String)\n        Me.trackingNumber = trackingNumber\n        Me.destination = destination\n        Me.status = status\n    End Sub\n\n    Public Function GetTrackingNumber() As String\n        Return trackingNumber\n    End Function\n\n    Public Function GetDestination() As String\n        Return destination\n    End Function\n\n    Public Function GetStatus() As String\n        Return status\n    End Function\n\n    Public Sub UpdateStatus(ByVal newStatus As String)\n        status = newStatus\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Construct a class representing a pet with attributes for species, age, and name, and a method to display its details.",
    "code": "```vb\nPublic Class Pet\n    Public Property Species As String\n    Public Property Age As Integer\n    Public Property Name As String\n\n    Public Sub DisplayDetails()\n        Console.WriteLine(\"Species: \" & Species)\n        Console.WriteLine(\"Age: \" & Age)\n        Console.WriteLine(\"Name: \" & Name)\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Formulate a class for a product in a store with properties for SKU, name, and price, and a method to apply a discount.",
    "code": "```vb\nPublic Class Product\n    Public Property SKU As String\n    Public Property Name As String\n    Public Property Price As Decimal\n\n    Public Sub ApplyDiscount(ByVal discountPercentage As Decimal)\n        Dim discountAmount As Decimal = Price * (discountPercentage / 100)\n        Price -= discountAmount\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Develop a class for a university course with attributes for course code, title, and credits, and a method to enroll a student.",
    "code": "```vb\nPublic Class UniversityCourse\n    Private CourseCode As String\n    Private Title As String\n    Private Credits As Integer\n\n    Public Sub New(code As String, title As String, credits As Integer)\n        CourseCode = code\n        Title = title\n        Credits = credits\n    End Sub\n\n    Public Sub EnrollStudent(studentName As String)\n        ' Enrollment logic can be implemented here\n        Console.WriteLine(\"Enrolled \" & studentName & \" in \" & Title)\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Create a class for a smart light bulb with attributes for color, brightness, and state (on/off), and a method to change the color.",
    "code": "```vb\nPublic Class SmartLightBulb\n    Private _color As String\n    Private _brightness As Integer\n    Private _state As Boolean\n\n    Public Property Color As String\n        Get\n            Return _color\n        End Get\n        Set(value As String)\n            _color = value\n        End Set\n    End Property\n\n    Public Property Brightness As Integer\n        Get\n            Return _brightness\n        End Get\n        Set(value As Integer)\n            _brightness = value\n        End Set\n    End Property\n\n    Public Property State As Boolean\n        Get\n            Return _state\n        End Get\n        Set(value As Boolean)\n            _state = value\n        End Set\n    End Property\n\n    Public Sub ChangeColor(newColor As String)\n        _color = newColor\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Design a class for a blog post with properties for title, content, and date published, and a method to edit the content.",
    "code": "```vb\nPublic Class BlogPost\n    Public Property Title As String\n    Public Property Content As String\n    Public Property DatePublished As DateTime\n\n    Public Sub EditContent(newContent As String)\n        Content = newContent\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Build a class for a bank transaction with attributes for transaction ID, amount, and type, and a method to reverse the transaction.",
    "code": "```vb\nPublic Class BankTransaction\n    Public Property TransactionID As Integer\n    Public Property Amount As Decimal\n    Public Property Type As String\n\n    Public Sub ReverseTransaction()\n        If Type = \"credit\" Then\n            Type = \"debit\"\n        ElseIf Type = \"debit\" Then\n            Type = \"credit\"\n        End If\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Implement a class for a city with properties for name, population, and area, and a method to calculate population density.",
    "code": "```vb\nPublic Class City\n    Private _name As String\n    Private _population As Integer\n    Private _area As Double\n\n    Public Property Name() As String\n        Get\n            Return _name\n        End Get\n        Set(ByVal value As String)\n            _name = value\n        End Set\n    End Property\n\n    Public Property Population() As Integer\n        Get\n            Return _population\n        End Get\n        Set(ByVal value As Integer)\n            _population = value\n        End Set\n    End Property\n\n    Public Property Area() As Double\n        Get\n            Return _area\n        End Get\n        Set(ByVal value As Double)\n            _area = value\n        End Set\n    End Property\n\n    Public Function CalculatePopulationDensity() As Double\n        If _area > 0 Then\n            Return _population / _area\n        Else\n            Return 0\n        End If\n    End Function\nEnd Class\n```"
  },
  {
    "task": "Construct a class for a library member with attributes for member ID, name, and borrowed books, and a method to borrow a book.",
    "code": "```vb\nPublic Class LibraryMember\n    Private memberId As Integer\n    Private memberName As String\n    Private borrowedBooks As List(Of String)\n\n    Public Sub New(id As Integer, name As String)\n        memberId = id\n        memberName = name\n        borrowedBooks = New List(Of String)()\n    End Sub\n\n    Public Sub BorrowBook(book As String)\n        borrowedBooks.Add(book)\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Create a class for a flight reservation with attributes for flight number, passenger name, and seat number, and a method to change the seat.",
    "code": "```vb\nPublic Class FlightReservation\n    Private flightNumber As String\n    Private passengerName As String\n    Private seatNumber As String\n\n    Public Sub New(flightNum As String, passenger As String, seatNum As String)\n        flightNumber = flightNum\n        passengerName = passenger\n        seatNumber = seatNum\n    End Sub\n\n    Public Sub ChangeSeat(newSeat As String)\n        seatNumber = newSeat\n    End Sub\n\n    Public Function GetFlightNumber() As String\n        Return flightNumber\n    End Function\n\n    Public Function GetPassengerName() As String\n        Return passengerName\n    End Function\n\n    Public Function GetSeatNumber() As String\n        Return seatNumber\n    End Function\nEnd Class\n```"
  },
  {
    "task": "Develop a class for a digital photo album with properties for album name, photos, and a method to add a new photo.",
    "code": "```vb\nPublic Class DigitalPhotoAlbum\n    Public Property AlbumName As String\n    Public Property Photos As List(Of String)\n\n    Public Sub New(ByVal name As String)\n        AlbumName = name\n        Photos = New List(Of String)()\n    End Sub\n\n    Public Sub AddPhoto(ByVal photo As String)\n        Photos.Add(photo)\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Design a class for a task in a to-do list with attributes for description, deadline, and status, and a method to mark it as complete.",
    "code": "```vb\nPublic Class TaskItem\n    Public Property Description As String\n    Public Property Deadline As DateTime\n    Public Property Status As Boolean\n\n    Public Sub New(description As String, deadline As DateTime)\n        Me.Description = description\n        Me.Deadline = deadline\n        Me.Status = False\n    End Sub\n\n    Public Sub MarkAsComplete()\n        Me.Status = True\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Formulate a class for a conference speaker with attributes for name, topic, and time slot, and a method to update the time slot.",
    "code": "```vb\nPublic Class ConferenceSpeaker\n    Private speakerName As String\n    Private topic As String\n    Private timeSlot As String\n\n    Public Sub New(ByVal name As String, ByVal topic As String, ByVal time As String)\n        speakerName = name\n        Me.topic = topic\n        timeSlot = time\n    End Sub\n\n    Public Property Name() As String\n        Get\n            Return speakerName\n        End Get\n        Set(ByVal value As String)\n            speakerName = value\n        End Set\n    End Property\n\n    Public Property Topic() As String\n        Get\n            Return topic\n        End Get\n        Set(ByVal value As String)\n            topic = value\n        End Set\n    End Property\n\n    Public Property TimeSlot() As String\n        Get\n            Return timeSlot\n        End Get\n        Set(ByVal value As String)\n            timeSlot = value\n        End Set\n    End Property\n\n    Public Sub UpdateTimeSlot(ByVal newTimeSlot As String)\n        timeSlot = newTimeSlot\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Construct a class for a real estate property with attributes for address, price, and square footage, and a method to change the price.",
    "code": "```vb\nPublic Class RealEstateProperty\n    Public Property Address As String\n    Public Property Price As Decimal\n    Public Property SquareFootage As Integer\n\n    Public Sub ChangePrice(newPrice As Decimal)\n        Price = newPrice\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Create a class for a weather forecast with properties for temperature, humidity, and condition, and a method to update the forecast.",
    "code": "```vb\nPublic Class WeatherForecast\n    Public Property Temperature As Double\n    Public Property Humidity As Double\n    Public Property Condition As String\n\n    Public Sub UpdateForecast(newTemperature As Double, newHumidity As Double, newCondition As String)\n        Temperature = newTemperature\n        Humidity = newHumidity\n        Condition = newCondition\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Build a class for a musical instrument with attributes for type, brand, and model, and a method to play a note.",
    "code": "```vb\nPublic Class MusicalInstrument\n    Private _type As String\n    Private _brand As String\n    Private _model As String\n\n    Public Property Type() As String\n        Get\n            Return _type\n        End Get\n        Set(value As String)\n            _type = value\n        End Set\n    End Property\n\n    Public Property Brand() As String\n        Get\n            Return _brand\n        End Get\n        Set(value As String)\n            _brand = value\n        End Set\n    End Property\n\n    Public Property Model() As String\n        Get\n            Return _model\n        End Get\n        Set(value As String)\n            _model = value\n        End Set\n    End Property\n\n    Public Sub PlayNote()\n        Console.WriteLine(\"Playing a note...\")\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Design a class for a sports team with attributes for team name, players, and coach, and a method to add a new player.",
    "code": "```vb\nPublic Class SportsTeam\n    Public Property TeamName As String\n    Public Property Players As List(Of String)\n    Public Property Coach As String\n\n    Public Sub New(teamName As String, coach As String)\n        Me.TeamName = teamName\n        Me.Coach = coach\n        Me.Players = New List(Of String)()\n    End Sub\n\n    Public Sub AddPlayer(playerName As String)\n        Me.Players.Add(playerName)\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Implement a class for a podcast episode with attributes for title, duration, and host, and a method to play the episode.",
    "code": "```vb\nPublic Class PodcastEpisode\n    Public Property Title As String\n    Public Property Duration As Double\n    Public Property Host As String\n\n    Public Sub PlayEpisode()\n        Console.WriteLine(\"Playing episode: \" & Title)\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Develop a class for a space mission with properties for mission name, crew, and launch date, and a method to launch the mission.",
    "code": "```vb\nPublic Class SpaceMission\n    Public Property MissionName As String\n    Public Property Crew As String\n    Public Property LaunchDate As DateTime\n\n    Public Sub LaunchMission()\n        Console.WriteLine(\"Launching mission: \" & MissionName)\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Create a class for a virtual assistant with attributes for name, language, and skills, and a method to add a new skill.",
    "code": "```vb\nPublic Class VirtualAssistant\n    Public Property Name As String\n    Public Property Language As String\n    Public Property Skills As List(Of String)\n\n    Public Sub New(ByVal name As String, ByVal language As String)\n        Me.Name = name\n        Me.Language = language\n        Me.Skills = New List(Of String)()\n    End Sub\n\n    Public Sub AddSkill(ByVal skill As String)\n        Skills.Add(skill)\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Formulate a class for a news article with attributes for headline, content, and author, and a method to publish the article.",
    "code": "```vb\nPublic Class NewsArticle\n    Public Property Headline As String\n    Public Property Content As String\n    Public Property Author As String\n\n    Public Sub PublishArticle()\n        Console.WriteLine(\"Headline: \" & Headline)\n        Console.WriteLine(\"Content: \" & Content)\n        Console.WriteLine(\"Author: \" & Author)\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Construct a class for a hiking trail with attributes for trail name, length, and difficulty, and a method to update the difficulty.",
    "code": "```vb\nPublic Class HikingTrail\n    Private trailName As String\n    Private length As Double\n    Private difficulty As String\n\n    Public Sub New(name As String, trailLength As Double, trailDifficulty As String)\n        trailName = name\n        length = trailLength\n        difficulty = trailDifficulty\n    End Sub\n\n    Public Function GetTrailName() As String\n        Return trailName\n    End Function\n\n    Public Function GetLength() As Double\n        Return length\n    End Function\n\n    Public Function GetDifficulty() As String\n        Return difficulty\n    End Function\n\n    Public Sub UpdateDifficulty(newDifficulty As String)\n        difficulty = newDifficulty\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Design a class for a subscription service with properties for service name, subscriber count, and subscription fee, and a method to update the fee.",
    "code": "```vb\nPublic Class SubscriptionService\n    Public Property ServiceName As String\n    Public Property SubscriberCount As Integer\n    Public Property SubscriptionFee As Decimal\n\n    Public Sub UpdateFee(newFee As Decimal)\n        SubscriptionFee = newFee\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Build a class for a digital wallet with attributes for balance, transaction history, and a method to add funds.",
    "code": "```vb\nPublic Class DigitalWallet\n    Private balance As Decimal\n    Private transactionHistory As List(Of String)\n\n    Public Sub New()\n        balance = 0D\n        transactionHistory = New List(Of String)()\n    End Sub\n\n    Public Sub AddFunds(amount As Decimal)\n        If amount > 0 Then\n            balance += amount\n            transactionHistory.Add(\"Added: \" & amount.ToString(\"C\"))\n        End If\n    End Sub\n\n    Public Function GetBalance() As Decimal\n        Return balance\n    End Function\n\n    Public Function GetTransactionHistory() As List(Of String)\n        Return New List(Of String)(transactionHistory)\n    End Function\nEnd Class\n```"
  },
  {
    "task": "Implement a class for a cooking recipe with attributes for name, ingredients, and instructions, and a method to update the instructions.",
    "code": "```vb\nPublic Class Recipe\n    Private recipeName As String\n    Private ingredients As List(Of String)\n    Private instructions As String\n\n    Public Sub New(ByVal name As String, ByVal ingredientsList As List(Of String), ByVal instructions As String)\n        Me.recipeName = name\n        Me.ingredients = ingredientsList\n        Me.instructions = instructions\n    End Sub\n\n    Public Property Name() As String\n        Get\n            Return recipeName\n        End Get\n        Set(ByVal value As String)\n            recipeName = value\n        End Set\n    End Property\n\n    Public Property Ingredients() As List(Of String)\n        Get\n            Return ingredients\n        End Get\n        Set(ByVal value As List(Of String))\n            ingredients = value\n        End Set\n    End Property\n\n    Public Property Instructions() As String\n        Get\n            Return instructions\n        End Get\n        Set(ByVal value As String)\n            instructions = value\n        End Set\n    End Property\n\n    Public Sub UpdateInstructions(ByVal newInstructions As String)\n        instructions = newInstructions\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Develop a class for a time zone with properties for zone name, offset, and a method to convert time from another time zone.",
    "code": "```vb\nPublic Class TimeZone\n    Public Property ZoneName As String\n    Public Property Offset As TimeSpan\n\n    Public Sub New(zoneName As String, offset As TimeSpan)\n        Me.ZoneName = zoneName\n        Me.Offset = offset\n    End Sub\n\n    Public Function ConvertTime(fromTimeZone As TimeZone, time As DateTime) As DateTime\n        Dim universalTime As DateTime = time.Subtract(fromTimeZone.Offset)\n        Return universalTime.Add(Me.Offset)\n    End Function\nEnd Class\n```"
  },
  {
    "task": "Create a class for a camera with attributes for resolution, brand, and model, and a method to take a picture.",
    "code": "```vb\nPublic Class Camera\n    Public Property Resolution As String\n    Public Property Brand As String\n    Public Property Model As String\n\n    Public Sub TakePicture()\n        Console.WriteLine(\"Picture taken with \" & Brand & \" \" & Model & \" at \" & Resolution & \" resolution.\")\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Design a class for a gaming console with properties for brand, model, and storage capacity, and a method to install a game.",
    "code": "```vb\nPublic Class GamingConsole\n    Public Property Brand As String\n    Public Property Model As String\n    Public Property StorageCapacity As Integer\n\n    Public Sub InstallGame(gameName As String)\n        Console.WriteLine(\"Installing \" & gameName & \" on \" & Brand & \" \" & Model)\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Formulate a class for a museum exhibit with attributes for exhibit name, artist, and year, and a method to update the year.",
    "code": "```vb\nPublic Class MuseumExhibit\n    Private exhibitName As String\n    Private artist As String\n    Private year As Integer\n\n    Public Sub New(ByVal name As String, ByVal artistName As String, ByVal exhibitYear As Integer)\n        exhibitName = name\n        artist = artistName\n        year = exhibitYear\n    End Sub\n\n    Public Property ExhibitName() As String\n        Get\n            Return exhibitName\n        End Get\n        Set(ByVal value As String)\n            exhibitName = value\n        End Set\n    End Property\n\n    Public Property Artist() As String\n        Get\n            Return artist\n        End Get\n        Set(ByVal value As String)\n            artist = value\n        End Set\n    End Property\n\n    Public Property Year() As Integer\n        Get\n            Return year\n        End Get\n        Set(ByVal value As Integer)\n            year = value\n        End Set\n    End Property\n\n    Public Sub UpdateYear(ByVal newYear As Integer)\n        year = newYear\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Construct a class for a fitness tracker with attributes for steps, calories burned, and heart rate, and a method to add steps.",
    "code": "```vb\nPublic Class FitnessTracker\n    Private steps As Integer\n    Private caloriesBurned As Integer\n    Private heartRate As Integer\n\n    Public Sub New()\n        steps = 0\n        caloriesBurned = 0\n        heartRate = 0\n    End Sub\n\n    Public Sub AddSteps(stepCount As Integer)\n        steps += stepCount\n    End Sub\n\n    Public Property StepCount() As Integer\n        Get\n            Return steps\n        End Get\n        Set(value As Integer)\n            steps = value\n        End Set\n    End Property\n\n    Public Property Calories() As Integer\n        Get\n            Return caloriesBurned\n        End Get\n        Set(value As Integer)\n            caloriesBurned = value\n        End Set\n    End Property\n\n    Public Property HeartRateValue() As Integer\n        Get\n            Return heartRate\n        End Get\n        Set(value As Integer)\n            heartRate = value\n        End Set\n    End Property\nEnd Class\n```"
  },
  {
    "task": "Build a class for an aquarium with properties for tank size, fish species, and water temperature, and a method to add a new fish.",
    "code": "```vb\nPublic Class Aquarium\n    Private tankSize As Double\n    Private fishSpecies As List(Of String)\n    Private waterTemperature As Double\n\n    Public Sub New(size As Double, temp As Double)\n        tankSize = size\n        waterTemperature = temp\n        fishSpecies = New List(Of String)()\n    End Sub\n\n    Public Property Size As Double\n        Get\n            Return tankSize\n        End Get\n        Set(value As Double)\n            tankSize = value\n        End Set\n    End Property\n\n    Public Property Temperature As Double\n        Get\n            Return waterTemperature\n        End Get\n        Set(value As Double)\n            waterTemperature = value\n        End Set\n    End Property\n\n    Public ReadOnly Property Species As List(Of String)\n        Get\n            Return fishSpecies\n        End Get\n    End Property\n\n    Public Sub AddFish(newFish As String)\n        fishSpecies.Add(newFish)\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Create a class for a chat message with attributes for sender, content, and timestamp, and a method to edit the content.",
    "code": "```vb\nPublic Class ChatMessage\n    Private _sender As String\n    Private _content As String\n    Private _timestamp As DateTime\n\n    Public Sub New(sender As String, content As String, timestamp As DateTime)\n        _sender = sender\n        _content = content\n        _timestamp = timestamp\n    End Sub\n\n    Public Property Sender As String\n        Get\n            Return _sender\n        End Get\n        Set(value As String)\n            _sender = value\n        End Set\n    End Property\n\n    Public Property Content As String\n        Get\n            Return _content\n        End Get\n        Set(value As String)\n            _content = value\n        End Set\n    End Property\n\n    Public Property Timestamp As DateTime\n        Get\n            Return _timestamp\n        End Get\n        Set(value As DateTime)\n            _timestamp = value\n        End Set\n    End Property\n\n    Public Sub EditContent(newContent As String)\n        _content = newContent\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Design a class for a vending machine with properties for items available, prices, and a method to dispense an item.",
    "code": "```vb\nPublic Class VendingMachine\n    Public Property ItemsAvailable As List(Of String)\n    Public Property Prices As Dictionary(Of String, Decimal)\n\n    Public Sub New()\n        ItemsAvailable = New List(Of String)()\n        Prices = New Dictionary(Of String, Decimal)()\n    End Sub\n\n    Public Function DispenseItem(itemName As String) As String\n        If ItemsAvailable.Contains(itemName) Then\n            ItemsAvailable.Remove(itemName)\n            Return $\"Dispensing {itemName}\"\n        Else\n            Return \"Item not available\"\n        End If\n    End Function\nEnd Class\n```"
  },
  {
    "task": "Implement a class for a digital clock with attributes for current time, time zone, and a method to set an alarm.",
    "code": "```vb\nPublic Class DigitalClock\n    Private currentTime As DateTime\n    Private timeZone As String\n    Private alarmTime As DateTime\n\n    Public Sub New(initTime As DateTime, initTimeZone As String)\n        currentTime = initTime\n        timeZone = initTimeZone\n    End Sub\n\n    Public Property CurrentTimeProperty() As DateTime\n        Get\n            Return currentTime\n        End Get\n        Set(value As DateTime)\n            currentTime = value\n        End Set\n    End Property\n\n    Public Property TimeZoneProperty() As String\n        Get\n            Return timeZone\n        End Get\n        Set(value As String)\n            timeZone = value\n        End Set\n    End Property\n\n    Public Sub SetAlarm(alarm As DateTime)\n        alarmTime = alarm\n    End Sub\n\n    Public Function GetAlarm() As DateTime\n        Return alarmTime\n    End Function\nEnd Class\n```"
  },
  {
    "task": "Develop a class for a historical figure with attributes for name, birthdate, and achievements, and a method to add an achievement.",
    "code": "```vb\nPublic Class HistoricalFigure\n    Private _name As String\n    Private _birthdate As Date\n    Private _achievements As List(Of String)\n\n    Public Sub New(name As String, birthdate As Date)\n        _name = name\n        _birthdate = birthdate\n        _achievements = New List(Of String)()\n    End Sub\n\n    Public Property Name As String\n        Get\n            Return _name\n        End Get\n        Set(value As String)\n            _name = value\n        End Set\n    End Property\n\n    Public Property Birthdate As Date\n        Get\n            Return _birthdate\n        End Get\n        Set(value As Date)\n            _birthdate = value\n        End Set\n    End Property\n\n    Public ReadOnly Property Achievements As List(Of String)\n        Get\n            Return _achievements\n        End Get\n    End Property\n\n    Public Sub AddAchievement(achievement As String)\n        _achievements.Add(achievement)\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Formulate a class for a travel itinerary with attributes for destinations, travel dates, and activities, and a method to add a destination.",
    "code": "```vb\nPublic Class TravelItinerary\n    Public Property Destinations As List(Of String)\n    Public Property TravelDates As List(Of Date)\n    Public Property Activities As List(Of String)\n\n    Public Sub New()\n        Destinations = New List(Of String)()\n        TravelDates = New List(Of Date)()\n        Activities = New List(Of String)()\n    End Sub\n\n    Public Sub AddDestination(destination As String)\n        Destinations.Add(destination)\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Construct a class for a fashion brand with properties for brand name, founder, and product lines, and a method to launch a new product line.",
    "code": "```vb\nPublic Class FashionBrand\n    Public Property BrandName As String\n    Public Property Founder As String\n    Public Property ProductLines As List(Of String)\n\n    Public Sub New(ByVal brandName As String, ByVal founder As String)\n        Me.BrandName = brandName\n        Me.Founder = founder\n        Me.ProductLines = New List(Of String)()\n    End Sub\n\n    Public Sub LaunchNewProductLine(ByVal productLine As String)\n        ProductLines.Add(productLine)\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Create a class for a video game with attributes for title, genre, and rating, and a method to update the rating.",
    "code": "```vb\nPublic Class VideoGame\n    Private _title As String\n    Private _genre As String\n    Private _rating As Double\n\n    Public Sub New(ByVal title As String, ByVal genre As String, ByVal rating As Double)\n        _title = title\n        _genre = genre\n        _rating = rating\n    End Sub\n\n    Public Property Title() As String\n        Get\n            Return _title\n        End Get\n        Set(ByVal value As String)\n            _title = value\n        End Set\n    End Property\n\n    Public Property Genre() As String\n        Get\n            Return _genre\n        End Get\n        Set(ByVal value As String)\n            _genre = value\n        End Set\n    End Property\n\n    Public Property Rating() As Double\n        Get\n            Return _rating\n        End Get\n        Set(ByVal value As Double)\n            _rating = value\n        End Set\n    End Property\n\n    Public Sub UpdateRating(ByVal newRating As Double)\n        _rating = newRating\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Build a class for a scientific experiment with attributes for experiment name, hypothesis, and results, and a method to record results.",
    "code": "```vb\nPublic Class ScientificExperiment\n    Private experimentName As String\n    Private hypothesis As String\n    Private results As String\n\n    Public Sub New(ByVal name As String, ByVal hypo As String)\n        experimentName = name\n        hypothesis = hypo\n        results = \"\"\n    End Sub\n\n    Public Property Name() As String\n        Get\n            Return experimentName\n        End Get\n        Set(ByVal value As String)\n            experimentName = value\n        End Set\n    End Property\n\n    Public Property Hypothesis() As String\n        Get\n            Return hypothesis\n        End Get\n        Set(ByVal value As String)\n            hypothesis = value\n        End Set\n    End Property\n\n    Public Property ExperimentResults() As String\n        Get\n            Return results\n        End Get\n        Set(ByVal value As String)\n            results = value\n        End Set\n    End Property\n\n    Public Sub RecordResults(ByVal newResults As String)\n        results = newResults\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Design a class for a gourmet dish with properties for dish name, ingredients, and cooking time, and a method to change cooking time.",
    "code": "```vb\nPublic Class GourmetDish\n    Private dishName As String\n    Private ingredients As String\n    Private cookingTime As Integer\n\n    Public Sub New(name As String, ingredients As String, time As Integer)\n        Me.dishName = name\n        Me.ingredients = ingredients\n        Me.cookingTime = time\n    End Sub\n\n    Public Property Name As String\n        Get\n            Return dishName\n        End Get\n        Set(value As String)\n            dishName = value\n        End Set\n    End Property\n\n    Public Property DishIngredients As String\n        Get\n            Return ingredients\n        End Get\n        Set(value As String)\n            ingredients = value\n        End Set\n    End Property\n\n    Public Property Time As Integer\n        Get\n            Return cookingTime\n        End Get\n        Set(value As Integer)\n            cookingTime = value\n        End Set\n    End Property\n\n    Public Sub ChangeCookingTime(newTime As Integer)\n        cookingTime = newTime\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Implement a class for a political office with attributes for office title, holder, and term length, and a method to change the holder.",
    "code": "```vb\nPublic Class PoliticalOffice\n    Private officeTitle As String\n    Private holder As String\n    Private termLength As Integer\n\n    Public Sub New(title As String, holderName As String, length As Integer)\n        officeTitle = title\n        holder = holderName\n        termLength = length\n    End Sub\n\n    Public Sub ChangeHolder(newHolder As String)\n        holder = newHolder\n    End Sub\n\n    Public Function GetOfficeTitle() As String\n        Return officeTitle\n    End Function\n\n    Public Function GetHolder() As String\n        Return holder\n    End Function\n\n    Public Function GetTermLength() As Integer\n        Return termLength\n    End Function\nEnd Class\n```"
  },
  {
    "task": "Develop a class for an astronomical object with properties for name, type, and distance from Earth, and a method to update the distance.",
    "code": "```vb\nPublic Class AstronomicalObject\n    Public Property Name As String\n    Public Property Type As String\n    Public Property DistanceFromEarth As Double\n\n    Public Sub New(ByVal name As String, ByVal type As String, ByVal distance As Double)\n        Me.Name = name\n        Me.Type = type\n        Me.DistanceFromEarth = distance\n    End Sub\n\n    Public Sub UpdateDistance(ByVal newDistance As Double)\n        Me.DistanceFromEarth = newDistance\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Formulate a class for a public transportation route with attributes for route number, stops, and schedule, and a method to add a stop.",
    "code": "```vb\nPublic Class TransportationRoute\n    Public Property RouteNumber As Integer\n    Public Property Stops As List(Of String)\n    Public Property Schedule As String\n\n    Public Sub New(routeNumber As Integer, schedule As String)\n        Me.RouteNumber = routeNumber\n        Me.Stops = New List(Of String)()\n        Me.Schedule = schedule\n    End Sub\n\n    Public Sub AddStop(stop As String)\n        Stops.Add(stop)\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Construct a class for a board game with properties for game name, player count, and rules, and a method to change the rules.",
    "code": "```vb\nPublic Class BoardGame\n    Private gameName As String\n    Private playerCount As Integer\n    Private rules As String\n\n    Public Sub New(name As String, count As Integer, gameRules As String)\n        gameName = name\n        playerCount = count\n        rules = gameRules\n    End Sub\n\n    Public Property Name() As String\n        Get\n            Return gameName\n        End Get\n        Set(value As String)\n            gameName = value\n        End Set\n    End Property\n\n    Public Property Count() As Integer\n        Get\n            Return playerCount\n        End Get\n        Set(value As Integer)\n            playerCount = value\n        End Set\n    End Property\n\n    Public Property GameRules() As String\n        Get\n            Return rules\n        End Get\n        Set(value As String)\n            rules = value\n        End Set\n    End Property\n\n    Public Sub ChangeRules(newRules As String)\n        rules = newRules\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Create a class for a customer loyalty program with attributes for program name, points, and rewards, and a method to redeem points.",
    "code": "```vb\nPublic Class LoyaltyProgram\n    Private programName As String\n    Private points As Integer\n    Private rewards As String\n\n    Public Sub New(ByVal programName As String, ByVal points As Integer, ByVal rewards As String)\n        Me.programName = programName\n        Me.points = points\n        Me.rewards = rewards\n    End Sub\n\n    Public Property ProgramNameProperty() As String\n        Get\n            Return programName\n        End Get\n        Set(ByVal value As String)\n            programName = value\n        End Set\n    End Property\n\n    Public Property PointsProperty() As Integer\n        Get\n            Return points\n        End Get\n        Set(ByVal value As Integer)\n            points = value\n        End Set\n    End Property\n\n    Public Property RewardsProperty() As String\n        Get\n            Return rewards\n        End Get\n        Set(ByVal value As String)\n            rewards = value\n        End Set\n    End Property\n\n    Public Sub RedeemPoints(ByVal pointsToRedeem As Integer)\n        If pointsToRedeem <= points Then\n            points -= pointsToRedeem\n            Console.WriteLine(\"Points redeemed: \" & pointsToRedeem)\n        Else\n            Console.WriteLine(\"Not enough points to redeem.\")\n        End If\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Design a class for an art gallery with properties for gallery name, location, and exhibitions, and a method to add a new exhibition.",
    "code": "```vb\nPublic Class ArtGallery\n    Public Property GalleryName As String\n    Public Property Location As String\n    Public Property Exhibitions As List(Of String)\n\n    Public Sub New(galleryName As String, location As String)\n        Me.GalleryName = galleryName\n        Me.Location = location\n        Me.Exhibitions = New List(Of String)()\n    End Sub\n\n    Public Sub AddExhibition(exhibitionName As String)\n        Exhibitions.Add(exhibitionName)\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Build a class for a personal blog with attributes for blog name, posts, and a method to add a new post.",
    "code": "```vb\nPublic Class PersonalBlog\n    Private blogName As String\n    Private posts As List(Of String)\n\n    Public Sub New(ByVal name As String)\n        blogName = name\n        posts = New List(Of String)()\n    End Sub\n\n    Public Sub AddPost(ByVal post As String)\n        posts.Add(post)\n    End Sub\n\n    Public Function GetBlogName() As String\n        Return blogName\n    End Function\n\n    Public Function GetPosts() As List(Of String)\n        Return posts\n    End Function\nEnd Class\n```"
  },
  {
    "task": "Implement a class for a mobile application with properties for app name, version, and developer, and a method to update the version.",
    "code": "```vb\nPublic Class MobileApp\n    Private appName As String\n    Private appVersion As String\n    Private appDeveloper As String\n\n    Public Sub New(name As String, version As String, developer As String)\n        appName = name\n        appVersion = version\n        appDeveloper = developer\n    End Sub\n\n    Public Property Name() As String\n        Get\n            Return appName\n        End Get\n        Set(value As String)\n            appName = value\n        End Set\n    End Property\n\n    Public Property Version() As String\n        Get\n            Return appVersion\n        End Get\n        Set(value As String)\n            appVersion = value\n        End Set\n    End Property\n\n    Public Property Developer() As String\n        Get\n            Return appDeveloper\n        End Get\n        Set(value As String)\n            appDeveloper = value\n        End Set\n    End Property\n\n    Public Sub UpdateVersion(newVersion As String)\n        appVersion = newVersion\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Develop a class for a language translator with attributes for source language, target language, and translation method, and a method to translate a text.",
    "code": "```vb\nPublic Class LanguageTranslator\n    Private _sourceLanguage As String\n    Private _targetLanguage As String\n    Private _translationMethod As String\n\n    Public Property SourceLanguage As String\n        Get\n            Return _sourceLanguage\n        End Get\n        Set(value As String)\n            _sourceLanguage = value\n        End Set\n    End Property\n\n    Public Property TargetLanguage As String\n        Get\n            Return _targetLanguage\n        End Get\n        Set(value As String)\n            _targetLanguage = value\n        End Set\n    End Property\n\n    Public Property TranslationMethod As String\n        Get\n            Return _translationMethod\n        End Get\n        Set(value As String)\n            _translationMethod = value\n        End Set\n    End Property\n\n    Public Function Translate(text As String) As String\n        ' Translation logic would go here\n        Return $\"Translating '{text}' from {_sourceLanguage} to {_targetLanguage} using {_translationMethod} method.\"\n    End Function\nEnd Class\n```"
  },
  {
    "task": "Formulate a class for a culinary school with properties for school name, courses offered, and a method to add a new course.",
    "code": "```vb\nPublic Class CulinarySchool\n    Private _schoolName As String\n    Private _coursesOffered As List(Of String)\n\n    Public Property SchoolName As String\n        Get\n            Return _schoolName\n        End Get\n        Set(value As String)\n            _schoolName = value\n        End Set\n    End Property\n\n    Public Property CoursesOffered As List(Of String)\n        Get\n            Return _coursesOffered\n        End Get\n        Set(value As List(Of String))\n            _coursesOffered = value\n        End Set\n    End Property\n\n    Public Sub New()\n        _coursesOffered = New List(Of String)()\n    End Sub\n\n    Public Sub AddCourse(courseName As String)\n        _coursesOffered.Add(courseName)\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Construct a class for a musical band with attributes for band name, members, and genre, and a method to add a new member.",
    "code": "```vb\nPublic Class MusicBand\n    Private bandName As String\n    Private members As List(Of String)\n    Private genre As String\n\n    Public Sub New(ByVal name As String, ByVal genre As String)\n        Me.bandName = name\n        Me.genre = genre\n        Me.members = New List(Of String)()\n    End Sub\n\n    Public Sub AddMember(ByVal memberName As String)\n        Me.members.Add(memberName)\n    End Sub\n\n    Public Function GetBandName() As String\n        Return Me.bandName\n    End Function\n\n    Public Function GetMembers() As List(Of String)\n        Return Me.members\n    End Function\n\n    Public Function GetGenre() As String\n        Return Me.genre\n    End Function\nEnd Class\n```"
  },
  {
    "task": "Create a class for a television series with properties for series title, episodes, and network, and a method to add a new episode.",
    "code": "```vb\nPublic Class TelevisionSeries\n    Public Property SeriesTitle As String\n    Public Property Episodes As List(Of String)\n    Public Property Network As String\n\n    Public Sub New(title As String, network As String)\n        SeriesTitle = title\n        Network = network\n        Episodes = New List(Of String)()\n    End Sub\n\n    Public Sub AddEpisode(episodeTitle As String)\n        Episodes.Add(episodeTitle)\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Design a class for a wildlife reserve with attributes for reserve name, species protected, and area size, and a method to expand the area.",
    "code": "```vb\nPublic Class WildlifeReserve\n    Private reserveName As String\n    Private speciesProtected As String\n    Private areaSize As Double\n\n    Public Sub New(name As String, species As String, area As Double)\n        Me.reserveName = name\n        Me.speciesProtected = species\n        Me.areaSize = area\n    End Sub\n\n    Public Sub ExpandArea(additionalArea As Double)\n        Me.areaSize += additionalArea\n    End Sub\n\n    Public Property Name() As String\n        Get\n            Return Me.reserveName\n        End Get\n        Set(value As String)\n            Me.reserveName = value\n        End Set\n    End Property\n\n    Public Property Species() As String\n        Get\n            Return Me.speciesProtected\n        End Get\n        Set(value As String)\n            Me.speciesProtected = value\n        End Set\n    End Property\n\n    Public Property Area() As Double\n        Get\n            Return Me.areaSize\n        End Get\n        Set(value As Double)\n            Me.areaSize = value\n        End Set\n    End Property\nEnd Class\n```"
  },
  {
    "task": "Build a class for a luxury car with properties for brand, model, and price, and a method to update the price.",
    "code": "```vb\nPublic Class LuxuryCar\n    Private _brand As String\n    Private _model As String\n    Private _price As Decimal\n\n    Public Property Brand() As String\n        Get\n            Return _brand\n        End Get\n        Set(ByVal value As String)\n            _brand = value\n        End Set\n    End Property\n\n    Public Property Model() As String\n        Get\n            Return _model\n        End Get\n        Set(ByVal value As String)\n            _model = value\n        End Set\n    End Property\n\n    Public Property Price() As Decimal\n        Get\n            Return _price\n        End Get\n        Set(ByVal value As Decimal)\n            _price = value\n        End Set\n    End Property\n\n    Public Sub UpdatePrice(ByVal newPrice As Decimal)\n        _price = newPrice\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Implement a class for a scientific journal with attributes for journal name, articles, and impact factor, and a method to add a new article.",
    "code": "```vb\nPublic Class ScientificJournal\n    Private journalName As String\n    Private articles As List(Of String)\n    Private impactFactor As Double\n\n    Public Sub New(name As String, factor As Double)\n        journalName = name\n        impactFactor = factor\n        articles = New List(Of String)()\n    End Sub\n\n    Public Sub AddArticle(article As String)\n        articles.Add(article)\n    End Sub\n\n    ' Additional properties or methods can be added here as needed.\nEnd Class\n```"
  },
  {
    "task": "Develop a class for a historical monument with properties for monument name, location, and year established, and a method to update the location.",
    "code": "```vb\nPublic Class HistoricalMonument\n    Private _monumentName As String\n    Private _location As String\n    Private _yearEstablished As Integer\n\n    Public Property MonumentName() As String\n        Get\n            Return _monumentName\n        End Get\n        Set(ByVal value As String)\n            _monumentName = value\n        End Set\n    End Property\n\n    Public Property Location() As String\n        Get\n            Return _location\n        End Get\n        Set(ByVal value As String)\n            _location = value\n        End Set\n    End Property\n\n    Public Property YearEstablished() As Integer\n        Get\n            Return _yearEstablished\n        End Get\n        Set(ByVal value As Integer)\n            _yearEstablished = value\n        End Set\n    End Property\n\n    Public Sub UpdateLocation(ByVal newLocation As String)\n        _location = newLocation\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Formulate a class for an educational course with attributes for course title, instructor, and syllabus, and a method to update the syllabus.",
    "code": "```vb\nPublic Class EducationalCourse\n    Private courseTitle As String\n    Private instructor As String\n    Private syllabus As String\n\n    Public Sub New(title As String, instructorName As String, courseSyllabus As String)\n        courseTitle = title\n        instructor = instructorName\n        syllabus = courseSyllabus\n    End Sub\n\n    Public Property Title() As String\n        Get\n            Return courseTitle\n        End Get\n        Set(value As String)\n            courseTitle = value\n        End Set\n    End Property\n\n    Public Property Instructor() As String\n        Get\n            Return instructor\n        End Get\n        Set(value As String)\n            instructor = value\n        End Set\n    End Property\n\n    Public Property CourseSyllabus() As String\n        Get\n            Return syllabus\n        End Get\n        Set(value As String)\n            syllabus = value\n        End Set\n    End Property\n\n    Public Sub UpdateSyllabus(newSyllabus As String)\n        syllabus = newSyllabus\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Construct a class for a city park with properties for park name, facilities, and opening hours, and a method to add a new facility.",
    "code": "```vb\nPublic Class CityPark\n    Private parkName As String\n    Private facilities As List(Of String)\n    Private openingHours As String\n\n    Public Sub New(name As String, hours As String)\n        parkName = name\n        facilities = New List(Of String)()\n        openingHours = hours\n    End Sub\n\n    Public Property Name As String\n        Get\n            Return parkName\n        End Get\n        Set(value As String)\n            parkName = value\n        End Set\n    End Property\n\n    Public Property ParkFacilities As List(Of String)\n        Get\n            Return facilities\n        End Get\n        Set(value As List(Of String))\n            facilities = value\n        End Set\n    End Property\n\n    Public Property Hours As String\n        Get\n            Return openingHours\n        End Get\n        Set(value As String)\n            openingHours = value\n        End Set\n    End Property\n\n    Public Sub AddFacility(facility As String)\n        facilities.Add(facility)\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Create a class for a fitness class with attributes for class name, instructor, and schedule, and a method to update the schedule.",
    "code": "```vb\nPublic Class FitnessClass\n    Private className As String\n    Private instructor As String\n    Private schedule As String\n\n    Public Sub New(ByVal className As String, ByVal instructor As String, ByVal schedule As String)\n        Me.className = className\n        Me.instructor = instructor\n        Me.schedule = schedule\n    End Sub\n\n    Public Sub UpdateSchedule(ByVal newSchedule As String)\n        Me.schedule = newSchedule\n    End Sub\n\n    Public Function GetClassName() As String\n        Return className\n    End Function\n\n    Public Function GetInstructor() As String\n        Return instructor\n    End Function\n\n    Public Function GetSchedule() As String\n        Return schedule\n    End Function\nEnd Class\n```"
  },
  {
    "task": "Design a class for a virtual reality game with properties for game name, platform, and VR compatibility, and a method to change the platform.",
    "code": "```vb\nPublic Class VRGame\n    Private gameName As String\n    Private platform As String\n    Private vrCompatibility As Boolean\n\n    Public Sub New(ByVal name As String, ByVal platform As String, ByVal vrCompatible As Boolean)\n        Me.gameName = name\n        Me.platform = platform\n        Me.vrCompatibility = vrCompatible\n    End Sub\n\n    Public Property Name() As String\n        Get\n            Return gameName\n        End Get\n        Set(ByVal value As String)\n            gameName = value\n        End Set\n    End Property\n\n    Public Property GamePlatform() As String\n        Get\n            Return platform\n        End Get\n        Set(ByVal value As String)\n            platform = value\n        End Set\n    End Property\n\n    Public Property IsVRCompatible() As Boolean\n        Get\n            Return vrCompatibility\n        End Get\n        Set(ByVal value As Boolean)\n            vrCompatibility = value\n        End Set\n    End Property\n\n    Public Sub ChangePlatform(ByVal newPlatform As String)\n        platform = newPlatform\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Build a class for a mountain range with attributes for range name, highest peak, and countries covered, and a method to add a new peak.",
    "code": "```vb\nPublic Class MountainRange\n    Private rangeName As String\n    Private highestPeak As String\n    Private countriesCovered As List(Of String)\n    Private peaks As List(Of String)\n\n    Public Sub New(name As String, peak As String, countries As List(Of String))\n        Me.rangeName = name\n        Me.highestPeak = peak\n        Me.countriesCovered = New List(Of String)(countries)\n        Me.peaks = New List(Of String)\n        Me.peaks.Add(peak)\n    End Sub\n\n    Public Sub AddPeak(ByVal peak As String)\n        Me.peaks.Add(peak)\n    End Sub\n\n    Public Function GetRangeName() As String\n        Return Me.rangeName\n    End Function\n\n    Public Function GetHighestPeak() As String\n        Return Me.highestPeak\n    End Function\n\n    Public Function GetCountriesCovered() As List(Of String)\n        Return New List(Of String)(Me.countriesCovered)\n    End Function\n\n    Public Function GetPeaks() As List(Of String)\n        Return New List(Of String)(Me.peaks)\n    End Function\n\nEnd Class\n```"
  },
  {
    "task": "Implement a class for a documentary film with properties for title, director, and subject, and a method to update the subject.",
    "code": "```vb\nPublic Class DocumentaryFilm\n    Private _title As String\n    Private _director As String\n    Private _subject As String\n\n    Public Property Title() As String\n        Get\n            Return _title\n        End Get\n        Set(value As String)\n            _title = value\n        End Set\n    End Property\n\n    Public Property Director() As String\n        Get\n            Return _director\n        End Get\n        Set(value As String)\n            _director = value\n        End Set\n    End Property\n\n    Public Property Subject() As String\n        Get\n            Return _subject\n        End Get\n        Set(value As String)\n            _subject = value\n        End Set\n    End Property\n\n    Public Sub UpdateSubject(newSubject As String)\n        _subject = newSubject\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Develop a class for a classical music composition with attributes for composition name, composer, and duration, and a method to change the duration.",
    "code": "```vb\nPublic Class ClassicalMusicComposition\n    Private compositionName As String\n    Private composer As String\n    Private duration As Double\n\n    Public Sub New(name As String, composer As String, duration As Double)\n        Me.compositionName = name\n        Me.composer = composer\n        Me.duration = duration\n    End Sub\n\n    Public Property CompositionNameProperty As String\n        Get\n            Return compositionName\n        End Get\n        Set(value As String)\n            compositionName = value\n        End Set\n    End Property\n\n    Public Property ComposerProperty As String\n        Get\n            Return composer\n        End Get\n        Set(value As String)\n            composer = value\n        End Set\n    End Property\n\n    Public Property DurationProperty As Double\n        Get\n            Return duration\n        End Get\n        Set(value As Double)\n            duration = value\n        End Set\n    End Property\n\n    Public Sub ChangeDuration(newDuration As Double)\n        duration = newDuration\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Formulate a class for a public library with properties for library name, books available, and membership, and a method to add a new book.",
    "code": "```vb\nPublic Class PublicLibrary\n    Public Property LibraryName As String\n    Public Property BooksAvailable As List(Of String)\n    Public Property Membership As Boolean\n\n    Public Sub New(libraryName As String, membership As Boolean)\n        Me.LibraryName = libraryName\n        Me.BooksAvailable = New List(Of String)()\n        Me.Membership = membership\n    End Sub\n\n    Public Sub AddBook(ByVal bookTitle As String)\n        BooksAvailable.Add(bookTitle)\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Construct a class for a tech startup with attributes for startup name, founder, and funding, and a method to raise additional funding.",
    "code": "```vb\nPublic Class TechStartup\n    Private startupName As String\n    Private founder As String\n    Private funding As Double\n\n    Public Sub New(name As String, founder As String, initialFunding As Double)\n        Me.startupName = name\n        Me.founder = founder\n        Me.funding = initialFunding\n    End Sub\n\n    Public Sub RaiseFunding(additionalFunds As Double)\n        Me.funding += additionalFunds\n    End Sub\n\n    Public Function GetStartupName() As String\n        Return startupName\n    End Function\n\n    Public Function GetFounder() As String\n        Return founder\n    End Function\n\n    Public Function GetFunding() As Double\n        Return funding\n    End Function\nEnd Class\n```"
  }
]