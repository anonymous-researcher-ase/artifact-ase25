[
  {
    "task": "Write a function that reads a file and handles the exception if the file is not found.",
    "code": "```vb\nImports System.IO\n\nModule Module1\n    Sub Main()\n        ReadFile(\"example.txt\")\n    End Sub\n\n    Sub ReadFile(fileName As String)\n        Try\n            Dim content As String = File.ReadAllText(fileName)\n            Console.WriteLine(content)\n        Catch ex As FileNotFoundException\n            Console.WriteLine(\"File not found: \" & fileName)\n        End Try\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a program that divides two numbers and catches any division by zero errors.",
    "code": "```vb\nModule DivisionProgram\n    Sub Main()\n        Dim numerator As Double\n        Dim denominator As Double\n        Dim result As Double\n\n        Console.WriteLine(\"Enter the numerator:\")\n        Double.TryParse(Console.ReadLine(), numerator)\n        \n        Console.WriteLine(\"Enter the denominator:\")\n        Double.TryParse(Console.ReadLine(), denominator)\n\n        Try\n            result = numerator / denominator\n            Console.WriteLine(\"The result is: \" & result)\n        Catch ex As DivideByZeroException\n            Console.WriteLine(\"Error: Division by zero is not allowed.\")\n        End Try\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a function to parse an integer from a string and manage invalid input exceptions.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim input As String = \"123a\"\n        Dim result As Integer\n\n        If TryParseInteger(input, result) Then\n            Console.WriteLine(\"Parsed Integer: \" & result)\n        Else\n            Console.WriteLine(\"Invalid input. Could not parse integer.\")\n        End If\n    End Sub\n\n    Function TryParseInteger(ByVal input As String, ByRef result As Integer) As Boolean\n        Try\n            result = Integer.Parse(input)\n            Return True\n        Catch ex As FormatException\n            Return False\n        End Try\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Implement an API call and catch exceptions related to network errors or timeouts.",
    "code": "```vb\nImports System.Net.Http\n\nModule ApiCallModule\n    Sub Main()\n        Dim client As New HttpClient()\n\n        Try\n            Dim response As HttpResponseMessage = client.GetAsync(\"https://api.example.com/data\").Result\n            response.EnsureSuccessStatusCode()\n            Dim responseData As String = response.Content.ReadAsStringAsync().Result\n            Console.WriteLine(responseData)\n        Catch ex As HttpRequestException\n            Console.WriteLine(\"Network error: \" & ex.Message)\n        Catch ex As TaskCanceledException\n            Console.WriteLine(\"Request timeout: \" & ex.Message)\n        Finally\n            client.Dispose()\n        End Try\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a program that opens a database connection and handles any connection failure exceptions.",
    "code": "```vb\nImports System.Data.SqlClient\n\nModule Program\n    Sub Main()\n        Dim connectionString As String = \"Your_Connection_String_Here\"\n        Dim connection As SqlConnection = Nothing\n\n        Try\n            connection = New SqlConnection(connectionString)\n            connection.Open()\n            Console.WriteLine(\"Database connection opened successfully.\")\n        Catch ex As SqlException\n            Console.WriteLine(\"An error occurred while opening the database connection.\")\n            Console.WriteLine(\"Error: \" & ex.Message)\n        Finally\n            If connection IsNot Nothing AndAlso connection.State = ConnectionState.Open Then\n                connection.Close()\n                Console.WriteLine(\"Database connection closed.\")\n            End If\n        End Try\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function that accesses an array by index and catches out-of-bounds exceptions.",
    "code": "```vb\nFunction AccessArrayElement(ByVal arr() As Integer, ByVal index As Integer) As Integer\n    Try\n        Return arr(index)\n    Catch ex As IndexOutOfRangeException\n        Return -1 ' or any other default value or error code\n    End Try\nEnd Function\n```"
  },
  {
    "task": "Create a function that converts a string to a date object and manages format exceptions.",
    "code": "```vb\nFunction ConvertStringToDate(dateString As String) As Date\n    Dim result As Date\n    Try\n        result = Date.Parse(dateString)\n    Catch ex As FormatException\n        ' Handle format exception\n        result = Date.MinValue\n    End Try\n    Return result\nEnd Function\n```"
  },
  {
    "task": "Design a program that writes data to a file and catches any file permission exceptions.",
    "code": "```vb\nImports System.IO\n\nModule Program\n    Sub Main()\n        Dim filePath As String = \"output.txt\"\n        Dim data As String = \"Sample data to write to file.\"\n\n        Try\n            File.WriteAllText(filePath, data)\n            Console.WriteLine(\"Data written successfully.\")\n        Catch ex As UnauthorizedAccessException\n            Console.WriteLine(\"Error: You do not have permission to write to this file.\")\n        Catch ex As Exception\n            Console.WriteLine(\"An unexpected error occurred: \" & ex.Message)\n        End Try\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a module that retrieves data from a URL and handles malformed URL exceptions.",
    "code": "```vb\nImports System\nImports System.Net\n\nModule URLDataRetriever\n    Sub Main()\n        Dim url As String = \"http://example.com\"\n\n        Try\n            Dim client As New WebClient()\n            Dim data As String = client.DownloadString(url)\n            Console.WriteLine(\"Data retrieved successfully.\")\n        Catch ex As UriFormatException\n            Console.WriteLine(\"Malformed URL: \" & ex.Message)\n        Catch ex As Exception\n            Console.WriteLine(\"An error occurred: \" & ex.Message)\n        End Try\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function to calculate the square root of a number and catch any negative input exceptions.",
    "code": "```vb\nFunction CalculateSquareRoot(number As Double) As Double\n    Try\n        If number < 0 Then\n            Throw New ArgumentOutOfRangeException(\"number\", \"Input must be non-negative.\")\n        End If\n        Return Math.Sqrt(number)\n    Catch ex As ArgumentOutOfRangeException\n        Console.WriteLine(\"Error: \" & ex.Message)\n        Return -1\n    End Try\nEnd Function\n```"
  },
  {
    "task": "Develop a program that sends an email and manages exceptions for invalid email addresses.",
    "code": "```vb\nImports System.Net.Mail\n\nModule EmailSender\n\n    Sub Main()\n        Try\n            Dim smtpClient As New SmtpClient(\"smtp.example.com\")\n            smtpClient.Port = 587\n            smtpClient.Credentials = New System.Net.NetworkCredential(\"username\", \"password\")\n            smtpClient.EnableSsl = True\n\n            Dim mail As New MailMessage()\n            mail.From = New MailAddress(\"sender@example.com\")\n            mail.To.Add(\"invalid-email-address\")\n            mail.Subject = \"Test Email\"\n            mail.Body = \"This is a test email.\"\n\n            smtpClient.Send(mail)\n            Console.WriteLine(\"Email sent successfully.\")\n        Catch ex As FormatException\n            Console.WriteLine(\"Invalid email address format.\")\n        Catch ex As SmtpException\n            Console.WriteLine(\"SMTP error: \" & ex.Message)\n        Catch ex As Exception\n            Console.WriteLine(\"An error occurred: \" & ex.Message)\n        End Try\n    End Sub\n\nEnd Module\n```"
  },
  {
    "task": "Create a calculator application that handles invalid operations gracefully.",
    "code": "```vb\nModule Calculator\n    Sub Main()\n        Try\n            Console.WriteLine(\"Enter the first number:\")\n            Dim num1 As Double = Convert.ToDouble(Console.ReadLine())\n            \n            Console.WriteLine(\"Enter the second number:\")\n            Dim num2 As Double = Convert.ToDouble(Console.ReadLine())\n            \n            Console.WriteLine(\"Enter an operation (+, -, *, /):\")\n            Dim operation As String = Console.ReadLine()\n\n            Dim result As Double\n\n            Select Case operation\n                Case \"+\"\n                    result = num1 + num2\n                Case \"-\"\n                    result = num1 - num2\n                Case \"*\"\n                    result = num1 * num2\n                Case \"/\"\n                    If num2 = 0 Then\n                        Throw New DivideByZeroException(\"Cannot divide by zero.\")\n                    End If\n                    result = num1 / num2\n                Case Else\n                    Throw New InvalidOperationException(\"Invalid operation.\")\n            End Select\n\n            Console.WriteLine(\"The result is: \" & result)\n        Catch ex As FormatException\n            Console.WriteLine(\"Invalid input. Please enter a valid number.\")\n        Catch ex As DivideByZeroException\n            Console.WriteLine(ex.Message)\n        Catch ex As InvalidOperationException\n            Console.WriteLine(ex.Message)\n        Catch ex As Exception\n            Console.WriteLine(\"An error occurred: \" & ex.Message)\n        End Try\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a function that tries to parse JSON data and catches parsing errors.",
    "code": "```vb\nImports System\nImports System.Web.Script.Serialization\n\nModule Module1\n    Sub Main()\n        Dim jsonString As String = \"{\"\"name\"\":\"\"John Doe\"\", \"\"age\"\":30}\"\n        Dim result As Object = ParseJson(jsonString)\n        If result IsNot Nothing Then\n            Console.WriteLine(\"JSON parsed successfully.\")\n        Else\n            Console.WriteLine(\"Failed to parse JSON.\")\n        End If\n    End Sub\n\n    Function ParseJson(ByVal jsonData As String) As Object\n        Dim serializer As New JavaScriptSerializer()\n        Try\n            Return serializer.DeserializeObject(jsonData)\n        Catch ex As Exception\n            Console.WriteLine(\"Error parsing JSON: \" & ex.Message)\n            Return Nothing\n        End Try\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Implement a system that processes user input and handles any type conversion exceptions.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Console.WriteLine(\"Enter a number:\")\n        Dim userInput As String = Console.ReadLine()\n\n        Try\n            Dim number As Integer = Convert.ToInt32(userInput)\n            Console.WriteLine(\"You entered the number: \" & number)\n        Catch ex As FormatException\n            Console.WriteLine(\"The input is not a valid number format.\")\n        Catch ex As OverflowException\n            Console.WriteLine(\"The number entered is too large or too small.\")\n        Catch ex As Exception\n            Console.WriteLine(\"An unexpected error occurred: \" & ex.Message)\n        End Try\n\n        Console.WriteLine(\"Press any key to exit.\")\n        Console.ReadKey()\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function that fetches data from a database and manages exceptions for missing records.",
    "code": "```vb\nImports System\nImports System.Data.SqlClient\n\nModule Module1\n    Sub Main()\n        Dim data As String = FetchDataFromDatabase(\"SELECT * FROM SomeTable WHERE Id = 1\")\n        If data IsNot Nothing Then\n            Console.WriteLine(data)\n        End If\n    End Sub\n\n    Function FetchDataFromDatabase(query As String) As String\n        Dim connectionString As String = \"YourConnectionStringHere\"\n        Dim result As String = Nothing\n\n        Try\n            Using connection As New SqlConnection(connectionString)\n                connection.Open()\n                Using command As New SqlCommand(query, connection)\n                    Dim reader As SqlDataReader = command.ExecuteReader()\n                    If reader.HasRows Then\n                        While reader.Read()\n                            result = reader.GetString(0)\n                        End While\n                    Else\n                        Throw New Exception(\"Record not found.\")\n                    End If\n                End Using\n            End Using\n        Catch ex As SqlException\n            Console.WriteLine(\"SQL Error: \" & ex.Message)\n        Catch ex As Exception\n            Console.WriteLine(\"Error: \" & ex.Message)\n        End Try\n\n        Return result\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Create a program that connects to a remote server and handles authentication failure exceptions.",
    "code": "```vb\nImports System.Net\nImports System.Net.Sockets\n\nModule Program\n    Sub Main()\n        Dim serverAddress As String = \"192.168.1.1\" ' Replace with actual server address\n        Dim port As Integer = 8080 ' Replace with actual port\n\n        Try\n            Dim client As New TcpClient(serverAddress, port)\n            ' Add authentication logic here\n            Console.WriteLine(\"Connected successfully!\")\n        Catch ex As SocketException\n            Console.WriteLine(\"Failed to connect to server: \" & ex.Message)\n        Catch ex As UnauthorizedAccessException\n            Console.WriteLine(\"Authentication failed: \" & ex.Message)\n        Catch ex As Exception\n            Console.WriteLine(\"An unexpected error occurred: \" & ex.Message)\n        End Try\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a function to download a file from the internet and handle file not found exceptions.",
    "code": "```vb\nImports System.Net\n\nModule Module1\n    Sub Main()\n        Dim url As String = \"http://example.com/file.txt\"\n        Dim destination As String = \"C:\\path\\to\\file.txt\"\n        DownloadFile(url, destination)\n    End Sub\n\n    Sub DownloadFile(ByVal url As String, ByVal destination As String)\n        Dim client As New WebClient()\n        Try\n            client.DownloadFile(url, destination)\n            Console.WriteLine(\"File downloaded successfully.\")\n        Catch ex As WebException\n            If ex.Response IsNot Nothing AndAlso CType(ex.Response, HttpWebResponse).StatusCode = HttpStatusCode.NotFound Then\n                Console.WriteLine(\"File not found at the specified URL.\")\n            Else\n                Console.WriteLine(\"An error occurred: \" & ex.Message)\n            End If\n        Finally\n            client.Dispose()\n        End Try\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a program that attempts to connect to an API and handles rate limit exceptions.",
    "code": "```vb\nImports System.Net.Http\n\nModule Program\n    Sub Main()\n        Dim client As New HttpClient()\n\n        Try\n            Dim response As HttpResponseMessage = client.GetAsync(\"https://api.example.com/data\").Result\n            response.EnsureSuccessStatusCode()\n            Dim responseData As String = response.Content.ReadAsStringAsync().Result\n            Console.WriteLine(responseData)\n\n        Catch ex As HttpRequestException\n            If ex.Message.Contains(\"429\") Then\n                Console.WriteLine(\"Rate limit exceeded. Please try again later.\")\n            Else\n                Console.WriteLine(\"Request failed: \" & ex.Message)\n            End If\n\n        Catch ex As Exception\n            Console.WriteLine(\"An unexpected error occurred: \" & ex.Message)\n        End Try\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function that reads from a configuration file and manages key not found exceptions.",
    "code": "```vb\nImports System.IO\n\nModule ConfigReader\n    Function ReadConfigValue(ByVal filePath As String, ByVal key As String) As String\n        Try\n            Dim lines() As String = File.ReadAllLines(filePath)\n            For Each line As String In lines\n                Dim parts() As String = line.Split(\"=\"c)\n                If parts.Length = 2 AndAlso parts(0).Trim() = key Then\n                    Return parts(1).Trim()\n                End If\n            Next\n            Throw New KeyNotFoundException($\"Key '{key}' not found in configuration file.\")\n        Catch ex As IOException\n            Throw New Exception(\"Error reading configuration file.\", ex)\n        Catch ex As KeyNotFoundException\n            Throw\n        End Try\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Create an application that processes a list of tasks and catches any task execution exceptions.",
    "code": "```vb\nModule TaskProcessor\n\n    Sub Main()\n        Dim tasks As List(Of Action) = New List(Of Action) From {\n            Sub() Console.WriteLine(\"Task 1: Successful execution.\"),\n            Sub() Throw New Exception(\"Task 2: Failed to execute.\"),\n            Sub() Console.WriteLine(\"Task 3: Successful execution.\")\n        }\n\n        For Each task In tasks\n            Try\n                task.Invoke()\n            Catch ex As Exception\n                Console.WriteLine(\"Exception caught: \" & ex.Message)\n            End Try\n        Next\n\n        Console.WriteLine(\"Task processing completed.\")\n    End Sub\n\nEnd Module\n```"
  },
  {
    "task": "Implement a program that performs batch processing and handles individual item processing exceptions.",
    "code": "```vb\nModule BatchProcessor\n    Sub Main()\n        Dim items As List(Of String) = New List(Of String) From {\"Item1\", \"Item2\", \"Item3\"}\n        For Each item In items\n            Try\n                ProcessItem(item)\n            Catch ex As Exception\n                Console.WriteLine($\"Error processing {item}: {ex.Message}\")\n            End Try\n        Next\n    End Sub\n\n    Sub ProcessItem(item As String)\n        ' Simulate processing\n        If item = \"Item2\" Then\n            Throw New Exception(\"Processing error\")\n        End If\n        Console.WriteLine($\"{item} processed successfully\")\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a function that performs mathematical operations and catches arithmetic exceptions.",
    "code": "```vb\nModule MathOperations\n\n    Sub Main()\n        Try\n            Dim result As Double = PerformOperation(10, 0, \"/\")\n            Console.WriteLine(\"Result: \" & result)\n        Catch ex As DivideByZeroException\n            Console.WriteLine(\"Error: Division by zero is not allowed.\")\n        Catch ex As Exception\n            Console.WriteLine(\"An error occurred: \" & ex.Message)\n        End Try\n    End Sub\n\n    Function PerformOperation(ByVal num1 As Double, ByVal num2 As Double, ByVal operation As String) As Double\n        Select Case operation\n            Case \"+\"\n                Return num1 + num2\n            Case \"-\"\n                Return num1 - num2\n            Case \"*\"\n                Return num1 * num2\n            Case \"/\"\n                If num2 = 0 Then\n                    Throw New DivideByZeroException()\n                End If\n                Return num1 / num2\n            Case Else\n                Throw New ArgumentException(\"Invalid operation.\")\n        End Select\n    End Function\n\nEnd Module\n```"
  },
  {
    "task": "Write a program that logs error messages when exceptions occur during data processing.",
    "code": "```vb\nImports System.IO\n\nModule Program\n    Sub Main()\n        Try\n            ProcessData()\n        Catch ex As Exception\n            LogError(ex.Message)\n        End Try\n    End Sub\n\n    Sub ProcessData()\n        ' Insert data processing code here\n        ' For demonstration, let's throw an exception\n        Throw New InvalidOperationException(\"An error occurred during data processing.\")\n    End Sub\n\n    Sub LogError(errorMessage As String)\n        Dim logFilePath As String = \"error_log.txt\"\n        Using writer As StreamWriter = New StreamWriter(logFilePath, True)\n            writer.WriteLine(DateTime.Now.ToString() & \": \" & errorMessage)\n        End Using\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a script that monitors system resources and handles exceptions when limits are exceeded.",
    "code": "```vb\nImports System.Diagnostics\n\nModule ResourceMonitor\n    Sub Main()\n        Try\n            MonitorResources()\n        Catch ex As Exception\n            Console.WriteLine(\"An error occurred: \" & ex.Message)\n        End Try\n    End Sub\n\n    Sub MonitorResources()\n        Dim cpuCounter As New PerformanceCounter(\"Processor\", \"% Processor Time\", \"_Total\")\n        Dim ramCounter As New PerformanceCounter(\"Memory\", \"Available MBytes\")\n\n        While True\n            Try\n                Dim cpuUsage As Single = cpuCounter.NextValue()\n                Dim availableMemory As Single = ramCounter.NextValue()\n\n                Console.WriteLine(\"CPU Usage: \" & cpuUsage & \"%\")\n                Console.WriteLine(\"Available Memory: \" & availableMemory & \"MB\")\n\n                If cpuUsage > 80 Then\n                    Throw New Exception(\"CPU usage exceeds limit!\")\n                End If\n\n                If availableMemory < 500 Then\n                    Throw New Exception(\"Available memory below limit!\")\n                End If\n\n                Threading.Thread.Sleep(1000)\n            Catch ex As Exception\n                Console.WriteLine(\"Resource monitoring error: \" & ex.Message)\n            End Try\n        End While\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a function that validates user input and manages any format exceptions.",
    "code": "```vb\nFunction ValidateInput(userInput As String) As Boolean\n    Try\n        Dim number As Integer = Integer.Parse(userInput)\n        Return True\n    Catch ex As FormatException\n        Return False\n    End Try\nEnd Function\n```"
  },
  {
    "task": "Implement a service that interacts with third-party APIs and handles unexpected response exceptions.",
    "code": "```vb\nImports System.Net.Http\n\nModule ApiService\n    Async Function CallThirdPartyApiAsync(ByVal url As String) As Task(Of String)\n        Dim httpClient As New HttpClient()\n        Try\n            Dim response As HttpResponseMessage = Await httpClient.GetAsync(url)\n            response.EnsureSuccessStatusCode()\n            Dim responseBody As String = Await response.Content.ReadAsStringAsync()\n            Return responseBody\n        Catch ex As HttpRequestException\n            Return $\"Request error: {ex.Message}\"\n        Catch ex As Exception\n            Return $\"Unexpected error: {ex.Message}\"\n        End Try\n    End Function\n\n    Sub Main()\n        Dim apiUrl As String = \"https://api.example.com/data\"\n        Dim task As Task(Of String) = CallThirdPartyApiAsync(apiUrl)\n        task.Wait()\n        Dim result As String = task.Result\n        Console.WriteLine(result)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function that uploads files to a server and handles exceptions for unsupported file types.",
    "code": "```vb\nImports System\nImports System.IO\n\nModule FileUploader\n    Sub Main()\n        Try\n            UploadFile(\"example.txt\")\n        Catch ex As NotSupportedException\n            Console.WriteLine(\"Error: \" & ex.Message)\n        Catch ex As Exception\n            Console.WriteLine(\"An unexpected error occurred: \" & ex.Message)\n        End Try\n    End Sub\n\n    Sub UploadFile(fileName As String)\n        Dim supportedExtensions As String() = {\".txt\", \".docx\", \".pdf\"}\n\n        If Not supportedExtensions.Contains(Path.GetExtension(fileName).ToLower()) Then\n            Throw New NotSupportedException(\"File type is not supported.\")\n        End If\n\n        ' Code to upload the file to the server goes here\n\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a program that simulates network traffic and manages packet loss exceptions.",
    "code": "```vb\nModule NetworkSimulator\n\n    Sub Main()\n        Try\n            SimulateNetworkTraffic()\n        Catch ex As PacketLossException\n            Console.WriteLine(\"Packet loss occurred: \" & ex.Message)\n        Catch ex As Exception\n            Console.WriteLine(\"An unexpected error occurred: \" & ex.Message)\n        End Try\n    End Sub\n\n    Sub SimulateNetworkTraffic()\n        Dim rand As New Random()\n        For i As Integer = 1 To 10\n            Dim packetLoss As Boolean = rand.Next(1, 11) > 8\n            If packetLoss Then\n                Throw New PacketLossException(\"Packet #\" & i & \" was lost.\")\n            End If\n            Console.WriteLine(\"Packet #\" & i & \" transmitted successfully.\")\n        Next\n    End Sub\n\nEnd Module\n\nPublic Class PacketLossException\n    Inherits Exception\n\n    Public Sub New(ByVal message As String)\n        MyBase.New(message)\n    End Sub\n\nEnd Class\n```"
  },
  {
    "task": "Develop a function that processes XML data and catches any structural exceptions.",
    "code": "```vb\nImports System.Xml\n\nModule Module1\n    Sub Main()\n        Dim xmlData As String = \"<root><item>Value</item></root>\"\n        ProcessXmlData(xmlData)\n    End Sub\n\n    Sub ProcessXmlData(xml As String)\n        Try\n            Dim xmlDoc As New XmlDocument()\n            xmlDoc.LoadXml(xml)\n            ' Process the XML data here\n        Catch ex As XmlException\n            Console.WriteLine(\"XML Exception caught: \" & ex.Message)\n        Catch ex As Exception\n            Console.WriteLine(\"General Exception caught: \" & ex.Message)\n        End Try\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a program that handles exceptions when accessing environment variables.",
    "code": "```vb\nModule Program\n    Sub Main()\n        Try\n            Dim envVar As String = Environment.GetEnvironmentVariable(\"MY_ENV_VAR\")\n            If envVar Is Nothing Then\n                Throw New Exception(\"Environment variable 'MY_ENV_VAR' not found.\")\n            End If\n            Console.WriteLine(\"Environment variable value: \" & envVar)\n        Catch ex As Exception\n            Console.WriteLine(\"An error occurred: \" & ex.Message)\n        End Try\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function that calculates factorial and manages exceptions for negative input values.",
    "code": "```vb\nFunction CalculateFactorial(ByVal n As Integer) As Long\n    Try\n        If n < 0 Then\n            Throw New ArgumentException(\"Negative input value.\")\n        End If\n        Dim result As Long = 1\n        For i As Integer = 1 To n\n            result *= i\n        Next\n        Return result\n    Catch ex As ArgumentException\n        Console.WriteLine(ex.Message)\n        Return -1\n    Catch ex As Exception\n        Console.WriteLine(\"An unexpected error occurred.\")\n        Return -1\n    End Try\nEnd Function\n```"
  },
  {
    "task": "Create a software tool that converts file formats and handles unsupported format exceptions.",
    "code": "```vb\nImports System.IO\n\nModule FileFormatConverter\n\n    Sub Main()\n        Dim inputFile As String = \"example.txt\"\n        Dim outputFile As String = \"example.converted\"\n        Try\n            ConvertFileFormat(inputFile, outputFile)\n            Console.WriteLine(\"File format conversion successful.\")\n        Catch ex As UnsupportedFormatException\n            Console.WriteLine(\"Error: \" & ex.Message)\n        Catch ex As Exception\n            Console.WriteLine(\"An unexpected error occurred: \" & ex.Message)\n        End Try\n    End Sub\n\n    Sub ConvertFileFormat(inputFile As String, outputFile As String)\n        Dim supportedFormats As String() = {\".txt\", \".md\"} ' Example supported formats\n        Dim inputExtension As String = Path.GetExtension(inputFile)\n        \n        If Not supportedFormats.Contains(inputExtension) Then\n            Throw New UnsupportedFormatException(\"The file format \" & inputExtension & \" is not supported.\")\n        End If\n        \n        ' Dummy conversion logic\n        File.Copy(inputFile, outputFile)\n    End Sub\n\nEnd Module\n\nPublic Class UnsupportedFormatException\n    Inherits Exception\n\n    Public Sub New(message As String)\n        MyBase.New(message)\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Implement a function that sends HTTP requests and catches exceptions for invalid response status codes.",
    "code": "```vb\nImports System.Net.Http\n\nModule Module1\n\n    Sub Main()\n        Dim url As String = \"http://example.com\"\n        Dim response As String = SendHttpRequest(url)\n        Console.WriteLine(response)\n    End Sub\n\n    Function SendHttpRequest(ByVal url As String) As String\n        Dim client As New HttpClient()\n        Try\n            Dim response = client.GetAsync(url).Result\n            response.EnsureSuccessStatusCode()\n            Return response.Content.ReadAsStringAsync().Result\n        Catch ex As HttpRequestException\n            Return $\"Request error: {ex.Message}\"\n        Catch ex As Exception\n            Return $\"Unexpected error: {ex.Message}\"\n        End Try\n    End Function\n\nEnd Module\n```"
  },
  {
    "task": "Develop a program that interacts with a message queue and handles message delivery exceptions.",
    "code": "```vb\nImports System\nImports System.Messaging\n\nModule MessageQueueExample\n    Sub Main()\n        Dim queuePath As String = \".\\private$\\testQueue\"\n        \n        If Not MessageQueue.Exists(queuePath) Then\n            MessageQueue.Create(queuePath)\n        End If\n\n        Dim mq As New MessageQueue(queuePath)\n\n        Try\n            Dim msg As New Message()\n            msg.Body = \"Hello, Message Queue!\"\n            mq.Send(msg)\n            Console.WriteLine(\"Message sent successfully.\")\n        Catch ex As MessageQueueException\n            Console.WriteLine(\"MessageQueueException: \" & ex.Message)\n        Catch ex As InvalidOperationException\n            Console.WriteLine(\"InvalidOperationException: \" & ex.Message)\n        Catch ex As Exception\n            Console.WriteLine(\"General Exception: \" & ex.Message)\n        Finally\n            mq.Close()\n        End Try\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function that reads user input and catches exceptions for unexpected data types.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Console.WriteLine(\"Enter a number:\")\n        Dim input As String = Console.ReadLine()\n        Try\n            Dim number As Integer = Convert.ToInt32(input)\n            Console.WriteLine(\"You entered the number: \" & number)\n        Catch ex As FormatException\n            Console.WriteLine(\"Invalid input. Please enter a valid number.\")\n        End Try\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a system that processes transactions and manages exceptions for insufficient funds.",
    "code": "```vb\nModule TransactionSystem\n    Sub Main()\n        Dim balance As Decimal = 1000\n        Dim amount As Decimal = 0\n\n        Console.WriteLine(\"Enter the transaction amount:\")\n        Try\n            amount = Convert.ToDecimal(Console.ReadLine())\n            ProcessTransaction(balance, amount)\n        Catch ex As FormatException\n            Console.WriteLine(\"Invalid input. Please enter a valid number.\")\n        Catch ex As Exception\n            Console.WriteLine(\"An unexpected error occurred: \" & ex.Message)\n        End Try\n    End Sub\n\n    Sub ProcessTransaction(ByRef balance As Decimal, ByVal amount As Decimal)\n        Try\n            If amount <= 0 Then\n                Throw New ArgumentException(\"Transaction amount must be greater than zero.\")\n            End If\n            If balance < amount Then\n                Throw New InvalidOperationException(\"Insufficient funds.\")\n            End If\n            balance -= amount\n            Console.WriteLine(\"Transaction successful. New balance: \" & balance.ToString(\"C\"))\n        Catch ex As InvalidOperationException\n            Console.WriteLine(\"Transaction failed: \" & ex.Message)\n        Catch ex As ArgumentException\n            Console.WriteLine(\"Transaction failed: \" & ex.Message)\n        End Try\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a function that generates random numbers and handles exceptions when the range is invalid.",
    "code": "```vb\nImports System\n\nModule RandomNumberGenerator\n    Sub Main()\n        Try\n            Dim min As Integer = 10\n            Dim max As Integer = 5\n            Dim randomNumber As Integer = GenerateRandomNumber(min, max)\n            Console.WriteLine(\"Random Number: \" & randomNumber)\n        Catch ex As ArgumentException\n            Console.WriteLine(\"Error: \" & ex.Message)\n        End Try\n    End Sub\n\n    Function GenerateRandomNumber(min As Integer, max As Integer) As Integer\n        If min >= max Then\n            Throw New ArgumentException(\"The minimum value must be less than the maximum value.\")\n        End If\n        Dim rand As New Random()\n        Return rand.Next(min, max)\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Implement a program that performs image processing and catches exceptions for unsupported file dimensions.",
    "code": "```vb\nImports System\nImports System.Drawing\nImports System.IO\n\nModule ImageProcessing\n    Sub Main()\n        Try\n            Dim imagePath As String = \"path_to_image_file.jpg\"\n            Dim image As Bitmap = New Bitmap(imagePath)\n\n            If image.Width > 1920 Or image.Height > 1080 Then\n                Throw New NotSupportedException(\"Unsupported image dimensions.\")\n            End If\n\n            ' Perform image processing here\n\n        Catch ex As FileNotFoundException\n            Console.WriteLine(\"Image file not found: \" & ex.Message)\n        Catch ex As NotSupportedException\n            Console.WriteLine(\"Error: \" & ex.Message)\n        Catch ex As Exception\n            Console.WriteLine(\"An unexpected error occurred: \" & ex.Message)\n        End Try\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function that manipulates strings and manages exceptions for invalid operations.",
    "code": "```vb\nFunction ManipulateString(input As String) As String\n    Try\n        ' Example string manipulation: Reverse the string\n        Dim charArray() As Char = input.ToCharArray()\n        Array.Reverse(charArray)\n        Return New String(charArray)\n    Catch ex As ArgumentNullException\n        Return \"Input cannot be null.\"\n    Catch ex As Exception\n        Return \"An error occurred: \" & ex.Message\n    End Try\nEnd Function\n```"
  },
  {
    "task": "Create a script that automates tasks and handles exceptions for missing dependencies.",
    "code": "```vb\nModule TaskAutomation\n\n    Sub Main()\n        Try\n            AutomateTasks()\n        Catch ex As TypeLoadException\n            Console.WriteLine(\"A required dependency is missing: \" & ex.Message)\n        Catch ex As Exception\n            Console.WriteLine(\"An unexpected error occurred: \" & ex.Message)\n        Finally\n            Console.WriteLine(\"Task automation process has completed.\")\n        End Try\n    End Sub\n\n    Sub AutomateTasks()\n        ' Simulate task automation\n        Console.WriteLine(\"Automating tasks...\")\n\n        ' Simulate missing dependency\n        Throw New TypeLoadException(\"Dependency not found.\")\n    End Sub\n\nEnd Module\n```"
  },
  {
    "task": "Develop a function that accesses nested data structures and manages key access exceptions.",
    "code": "```vb\nModule Module1\n\n    Sub Main()\n        Dim data As New Dictionary(Of String, Object) From {\n            {\"level1\", New Dictionary(Of String, Object) From {\n                {\"level2\", New Dictionary(Of String, Object) From {\n                    {\"key\", \"value\"}\n                }}\n            }}\n        }\n\n        Dim result As String = AccessNestedData(data, \"level1\", \"level2\", \"key\")\n        Console.WriteLine(\"Accessed value: \" & result)\n\n        result = AccessNestedData(data, \"level1\", \"level3\", \"key\")\n        Console.WriteLine(\"Accessed value: \" & result)\n    End Sub\n\n    Function AccessNestedData(ByVal data As Dictionary(Of String, Object), ByVal ParamArray keys() As String) As String\n        Dim current As Object = data\n\n        Try\n            For Each key As String In keys\n                If TypeOf current Is Dictionary(Of String, Object) AndAlso DirectCast(current, Dictionary(Of String, Object)).ContainsKey(key) Then\n                    current = DirectCast(current, Dictionary(Of String, Object))(key)\n                Else\n                    Throw New KeyNotFoundException(\"Key not found: \" & key)\n                End If\n            Next\n            Return current.ToString()\n        Catch ex As Exception\n            Return \"Error: \" & ex.Message\n        End Try\n    End Function\n\nEnd Module\n```"
  },
  {
    "task": "Design a program that synchronizes data between sources and handles data mismatch exceptions.",
    "code": "```vb\nImports System\n\nModule DataSynchronization\n\n    Sub Main()\n        Try\n            SynchronizeData()\n        Catch ex As DataMismatchException\n            Console.WriteLine(\"Data mismatch error: \" & ex.Message)\n        Catch ex As Exception\n            Console.WriteLine(\"An error occurred: \" & ex.Message)\n        End Try\n    End Sub\n\n    Sub SynchronizeData()\n        ' Example of data synchronization logic\n        Dim sourceData As String = GetDataFromSource()\n        Dim targetData As String = GetDataFromTarget()\n\n        If Not sourceData.Equals(targetData) Then\n            Throw New DataMismatchException(\"The source data does not match the target data.\")\n        End If\n\n        Console.WriteLine(\"Data synchronized successfully.\")\n    End Sub\n\n    Function GetDataFromSource() As String\n        ' Mock function to retrieve data from a source\n        Return \"SampleData\"\n    End Function\n\n    Function GetDataFromTarget() As String\n        ' Mock function to retrieve data from a target\n        Return \"DifferentData\"\n    End Function\n\nEnd Module\n\nPublic Class DataMismatchException\n    Inherits Exception\n    Public Sub New(ByVal message As String)\n        MyBase.New(message)\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Write a function that interacts with hardware devices and handles connection failure exceptions.",
    "code": "```vb\nModule HardwareInteraction\n\n    Sub Main()\n        Try\n            ConnectToDevice()\n        Catch ex As Exception\n            Console.WriteLine(\"Failed to connect to the device: \" & ex.Message)\n        End Try\n    End Sub\n\n    Sub ConnectToDevice()\n        ' Simulated interaction with a hardware device\n        Throw New Exception(\"Connection failure\")\n    End Sub\n\nEnd Module\n```"
  },
  {
    "task": "Create a tool that compresses files and manages exceptions for unsupported compression formats.",
    "code": "```vb\nImports System.IO\nImports System.IO.Compression\n\nModule FileCompressor\n\n    Sub Main()\n        Dim filePath As String = \"example.txt\"\n        Dim compressedFilePath As String = \"example.gz\"\n\n        Try\n            CompressFile(filePath, compressedFilePath)\n            Console.WriteLine(\"File compressed successfully.\")\n        Catch ex As NotSupportedException\n            Console.WriteLine(\"Error: Unsupported compression format.\")\n        Catch ex As Exception\n            Console.WriteLine(\"An error occurred: \" & ex.Message)\n        End Try\n    End Sub\n\n    Sub CompressFile(inputFile As String, outputFile As String)\n        If Path.GetExtension(outputFile).ToLower() <> \".gz\" Then\n            Throw New NotSupportedException(\"Only .gz compression is supported.\")\n        End If\n\n        Using inputFileStream As FileStream = File.OpenRead(inputFile)\n            Using outputFileStream As FileStream = File.Create(outputFile)\n                Using compressionStream As GZipStream = New GZipStream(outputFileStream, CompressionMode.Compress)\n                    inputFileStream.CopyTo(compressionStream)\n                End Using\n            End Using\n        End Using\n    End Sub\n\nEnd Module\n```"
  },
  {
    "task": "Implement a function that parses command-line arguments and handles missing argument exceptions.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Try\n            ParseArguments(Environment.GetCommandLineArgs())\n        Catch ex As ArgumentException\n            Console.WriteLine(\"Error: \" & ex.Message)\n        End Try\n    End Sub\n\n    Sub ParseArguments(args As String())\n        If args.Length < 2 Then\n            Throw New ArgumentException(\"Missing command-line arguments\")\n        End If\n\n        ' Process arguments\n        For i As Integer = 1 To args.Length - 1\n            Console.WriteLine(\"Argument \" & i & \": \" & args(i))\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a program that simulates user interactions and manages timing exceptions.",
    "code": "```vb\nModule Program\n    Sub Main()\n        Try\n            SimulateUserInteraction()\n        Catch ex As TimeoutException\n            Console.WriteLine(\"A timing issue occurred: \" & ex.Message)\n        Catch ex As Exception\n            Console.WriteLine(\"An unexpected error occurred: \" & ex.Message)\n        End Try\n    End Sub\n\n    Sub SimulateUserInteraction()\n        ' Simulate some user interaction that might take time and cause a timeout\n        Dim rnd As New Random()\n        Dim timeTaken As Integer = rnd.Next(1, 10)\n\n        If timeTaken > 5 Then\n            Throw New TimeoutException(\"The operation took too long.\")\n        End If\n\n        Console.WriteLine(\"User interaction completed successfully.\")\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function that encrypts data and handles exceptions for unsupported encryption algorithms.",
    "code": "```vb\nFunction EncryptData(data As String, algorithm As String) As String\n    Try\n        Select Case algorithm.ToLower()\n            Case \"aes\"\n                ' Implement AES encryption logic here\n                Return \"Encrypted with AES\"\n            Case \"rsa\"\n                ' Implement RSA encryption logic here\n                Return \"Encrypted with RSA\"\n            Case Else\n                Throw New NotSupportedException(\"The encryption algorithm is not supported.\")\n        End Select\n    Catch ex As NotSupportedException\n        Return \"Error: \" & ex.Message\n    Catch ex As Exception\n        Return \"An unexpected error occurred: \" & ex.Message\n    End Try\nEnd Function\n```"
  },
  {
    "task": "Create a system that aggregates data and manages exceptions for data inconsistency.",
    "code": "```vb\nModule DataAggregator\n\n    Sub Main()\n        Try\n            Dim data As List(Of String) = GetData()\n            Dim aggregatedData As String = AggregateData(data)\n            Console.WriteLine(\"Aggregated Data: \" & aggregatedData)\n        Catch ex As DataInconsistencyException\n            Console.WriteLine(\"Data inconsistency error: \" & ex.Message)\n        Catch ex As Exception\n            Console.WriteLine(\"An unexpected error occurred: \" & ex.Message)\n        End Try\n    End Sub\n\n    Function GetData() As List(Of String)\n        ' Simulate data retrieval\n        Return New List(Of String) From {\"Data1\", \"Data2\", \"Data3\"}\n    End Function\n\n    Function AggregateData(data As List(Of String)) As String\n        If data Is Nothing OrElse data.Count = 0 Then\n            Throw New DataInconsistencyException(\"No data available for aggregation.\")\n        End If\n\n        ' Simulate data aggregation\n        Dim aggregatedData As String = String.Join(\", \", data)\n        Return aggregatedData\n    End Function\n\nEnd Module\n\nPublic Class DataInconsistencyException\n    Inherits Exception\n\n    Public Sub New(message As String)\n        MyBase.New(message)\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Design a program that processes real-time data streams and handles connection drop exceptions.",
    "code": "```vb\nImports System\nImports System.IO\nImports System.Net.Sockets\n\nModule RealTimeDataProcessor\n\n    Sub Main()\n        Try\n            ProcessDataStream()\n        Catch ex As SocketException\n            Console.WriteLine(\"Connection dropped: \" & ex.Message)\n        Catch ex As Exception\n            Console.WriteLine(\"An unexpected error occurred: \" & ex.Message)\n        End Try\n    End Sub\n\n    Sub ProcessDataStream()\n        Dim client As TcpClient = New TcpClient(\"example.com\", 8000)\n        Dim stream As NetworkStream = client.GetStream()\n        Dim buffer(1024) As Byte\n        Dim bytesRead As Int32\n\n        Try\n            While (True)\n                bytesRead = stream.Read(buffer, 0, buffer.Length)\n                If bytesRead = 0 Then Exit While\n                ' Process data here\n            End While\n        Catch ex As IOException\n            Throw New SocketException()\n        Finally\n            stream.Close()\n            client.Close()\n        End Try\n    End Sub\n\nEnd Module\n```"
  },
  {
    "task": "Implement a function that performs scientific calculations and manages precision exceptions.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Try\n            Dim result As Double = ScientificCalculation(1.23)\n            Console.WriteLine(\"Result: \" & result)\n        Catch ex As ArithmeticException\n            Console.WriteLine(\"Arithmetic error: \" & ex.Message)\n        Catch ex As Exception\n            Console.WriteLine(\"An error occurred: \" & ex.Message)\n        End Try\n    End Sub\n\n    Function ScientificCalculation(input As Double) As Double\n        Try\n            ' Example scientific calculation: Squaring the input\n            Dim result As Double = Math.Pow(input, 2)\n            If Double.IsInfinity(result) OrElse Double.IsNaN(result) Then\n                Throw New ArithmeticException(\"Result is not a finite number.\")\n            End If\n            Return result\n        Catch ex As ArithmeticException\n            Throw\n        End Try\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Write a script that generates reports and handles exceptions for missing data sources.",
    "code": "```vb\nModule ReportGenerator\n\n    Sub Main()\n        Try\n            GenerateReport()\n        Catch ex As Exception\n            Console.WriteLine(\"Error: \" & ex.Message)\n        End Try\n    End Sub\n\n    Sub GenerateReport()\n        Dim dataSource As String = GetDataSource()\n        \n        If String.IsNullOrEmpty(dataSource) Then\n            Throw New Exception(\"Data source is missing.\")\n        End If\n\n        ' Code to generate report using the data source\n        Console.WriteLine(\"Report generated successfully.\")\n    End Sub\n\n    Function GetDataSource() As String\n        ' Simulate missing data source\n        Return Nothing\n    End Function\n\nEnd Module\n```"
  },
  {
    "task": "Create a program that validates digital certificates and manages trust exceptions.",
    "code": "```vb\nImports System.Security.Cryptography.X509Certificates\n\nModule CertificateValidator\n\n    Sub Main()\n        Dim certPath As String = \"path_to_certificate.cer\"\n        Dim cert As X509Certificate2\n\n        Try\n            cert = New X509Certificate2(certPath)\n            ValidateCertificate(cert)\n            Console.WriteLine(\"Certificate is valid and trusted.\")\n        Catch ex As CryptographicException\n            Console.WriteLine(\"Certificate validation failed: \" & ex.Message)\n        Catch ex As Exception\n            Console.WriteLine(\"An unexpected error occurred: \" & ex.Message)\n        End Try\n    End Sub\n\n    Sub ValidateCertificate(cert As X509Certificate2)\n        Dim chain As New X509Chain()\n        chain.ChainPolicy.RevocationMode = X509RevocationMode.Online\n        chain.ChainPolicy.TrustMode = X509ChainTrustMode.System\n\n        If Not chain.Build(cert) Then\n            Throw New CryptographicException(\"Certificate is not trusted or has expired.\")\n        End If\n    End Sub\n\nEnd Module\n```"
  },
  {
    "task": "Develop a function that schedules tasks and handles exceptions for scheduling conflicts.",
    "code": "```vb\nModule Scheduler\n\n    Sub Main()\n        Try\n            Dim taskList As New List(Of String) From {\"Task1\", \"Task2\", \"Task3\"}\n            ScheduleTask(taskList, \"Task2\")\n        Catch ex As Exception\n            Console.WriteLine(\"Error: \" & ex.Message)\n        End Try\n    End Sub\n\n    Sub ScheduleTask(tasks As List(Of String), newTask As String)\n        Try\n            If tasks.Contains(newTask) Then\n                Throw New InvalidOperationException(\"Scheduling conflict: Task already exists.\")\n            End If\n            tasks.Add(newTask)\n            Console.WriteLine(\"Task scheduled successfully: \" & newTask)\n        Catch ex As InvalidOperationException\n            Throw\n        End Try\n    End Sub\n\nEnd Module\n```"
  },
  {
    "task": "Design a system that manages user sessions and handles session timeout exceptions.",
    "code": "```vb\nImports System\nImports System.Collections.Generic\nImports System.Timers\n\nModule SessionManager\n\n    Private Sessions As New Dictionary(Of String, DateTime)\n    Private SessionDuration As TimeSpan = TimeSpan.FromMinutes(30)\n\n    Sub Main()\n        ' Example usage\n        StartSession(\"user1\")\n        Try\n            CheckSession(\"user1\")\n        Catch ex As SessionTimeoutException\n            Console.WriteLine(ex.Message)\n        End Try\n    End Sub\n\n    Sub StartSession(userId As String)\n        Sessions(userId) = DateTime.Now\n    End Sub\n\n    Sub CheckSession(userId As String)\n        If Sessions.ContainsKey(userId) Then\n            Dim lastActivity = Sessions(userId)\n            If DateTime.Now - lastActivity > SessionDuration Then\n                Throw New SessionTimeoutException($\"Session for {userId} has timed out.\")\n            Else\n                Sessions(userId) = DateTime.Now ' Refresh session\n            End If\n        Else\n            Throw New SessionTimeoutException($\"Session for {userId} does not exist.\")\n        End If\n    End Sub\n\n    Public Class SessionTimeoutException\n        Inherits Exception\n        Public Sub New(message As String)\n            MyBase.New(message)\n        End Sub\n    End Class\n\nEnd Module\n```"
  },
  {
    "task": "Write a function that processes audio files and manages exceptions for unsupported audio formats.",
    "code": "```vb\nFunction ProcessAudioFile(filePath As String) As Boolean\n    Try\n        ' Placeholder for processing the audio file\n        ' Simulate processing by checking for unsupported formats\n        Dim supportedFormats As String() = {\"mp3\", \"wav\", \"aac\"}\n        Dim fileExtension As String = IO.Path.GetExtension(filePath).ToLower().TrimStart(\".\"c)\n        \n        If Not supportedFormats.Contains(fileExtension) Then\n            Throw New NotSupportedException(\"Unsupported audio format: \" & fileExtension)\n        End If\n\n        ' Simulate successful processing\n        Return True\n\n    Catch ex As NotSupportedException\n        Console.WriteLine(\"Error: \" & ex.Message)\n        Return False\n    Catch ex As Exception\n        Console.WriteLine(\"An unexpected error occurred: \" & ex.Message)\n        Return False\n    End Try\nEnd Function\n```"
  },
  {
    "task": "Create a service that sends notifications and handles exceptions for unreachable destinations.",
    "code": "```vb\nImports System\n\nPublic Class NotificationService\n    Public Sub SendNotification(destination As String, message As String)\n        Try\n            ' Simulate sending a notification\n            If String.IsNullOrEmpty(destination) OrElse Not IsDestinationReachable(destination) Then\n                Throw New InvalidOperationException(\"Destination is unreachable.\")\n            End If\n            Console.WriteLine(\"Notification sent to \" & destination & \": \" & message)\n        Catch ex As Exception\n            HandleException(ex)\n        End Try\n    End Sub\n\n    Private Function IsDestinationReachable(destination As String) As Boolean\n        ' Simulate destination reachability check\n        Return Not destination.Contains(\"unreachable\")\n    End Function\n\n    Private Sub HandleException(ex As Exception)\n        Console.WriteLine(\"Exception occurred: \" & ex.Message)\n    End Sub\nEnd Class\n\nModule Module1\n    Sub Main()\n        Dim service As New NotificationService()\n\n        service.SendNotification(\"validDestination\", \"Hello, World!\")\n        service.SendNotification(\"unreachableDestination\", \"Hello, World!\")\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a program that performs data migration and manages data transformation exceptions.",
    "code": "```vb\nImports System\n\nModule DataMigration\n\n    Sub Main()\n        Try\n            ' Simulate data migration\n            MigrateData()\n        Catch ex As Exception\n            Console.WriteLine(\"An error occurred during data migration: \" & ex.Message)\n        End Try\n    End Sub\n\n    Sub MigrateData()\n        Try\n            ' Simulate data transformation\n            TransformData()\n        Catch ex As Exception\n            Throw New Exception(\"Data transformation failed.\", ex)\n        End Try\n    End Sub\n\n    Sub TransformData()\n        ' Simulating a transformation error\n        Throw New InvalidOperationException(\"Invalid data format.\")\n    End Sub\n\nEnd Module\n```"
  },
  {
    "task": "Develop a function that processes video files and handles codec compatibility exceptions.",
    "code": "```vb\nFunction ProcessVideoFile(filePath As String) As Boolean\n    Try\n        ' Assume this function checks the codec and processes the video\n        Dim isCompatibleCodec As Boolean = CheckCodecCompatibility(filePath)\n        If Not isCompatibleCodec Then\n            Throw New Exception(\"Incompatible codec detected.\")\n        End If\n        ' Video processing logic here\n        Return True\n    Catch ex As Exception\n        ' Handle exceptions related to codec compatibility\n        Console.WriteLine(\"Error processing video file: \" & ex.Message)\n        Return False\n    End Try\nEnd Function\n\nFunction CheckCodecCompatibility(filePath As String) As Boolean\n    ' Simulated check for codec compatibility\n    ' Replace with actual implementation\n    Return False\nEnd Function\n```"
  },
  {
    "task": "Write a function that manages memory allocation and catches out-of-memory exceptions.",
    "code": "```vb\nModule MemoryManager\n    Sub Main()\n        Try\n            ManageMemory()\n        Catch ex As OutOfMemoryException\n            Console.WriteLine(\"Out of memory: \" & ex.Message)\n        End Try\n    End Sub\n\n    Sub ManageMemory()\n        Try\n            ' Attempt to allocate a large amount of memory\n            Dim largeArray() As Byte = New Byte(Integer.MaxValue) {}\n        Catch ex As OutOfMemoryException\n            Throw\n        End Try\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a program that processes financial transactions and handles currency conversion exceptions.",
    "code": "```vb\nModule FinancialProcessor\n\n    Sub Main()\n        Try\n            Dim amount As Double = 100.0\n            Dim exchangeRate As Double = GetExchangeRate(\"USD\", \"EUR\")\n            Dim convertedAmount As Double = ConvertCurrency(amount, exchangeRate)\n            Console.WriteLine(\"Converted Amount: \" & convertedAmount.ToString(\"C2\"))\n        Catch ex As Exception\n            Console.WriteLine(\"An error occurred during currency conversion: \" & ex.Message)\n        End Try\n    End Sub\n\n    Function GetExchangeRate(ByVal fromCurrency As String, ByVal toCurrency As String) As Double\n        ' Simulate getting exchange rate, throw exception if rate not found\n        If fromCurrency = \"USD\" And toCurrency = \"EUR\" Then\n            Return 0.85\n        Else\n            Throw New Exception(\"Exchange rate not available for given currency pair.\")\n        End If\n    End Function\n\n    Function ConvertCurrency(ByVal amount As Double, ByVal rate As Double) As Double\n        Return amount * rate\n    End Function\n\nEnd Module\n```"
  },
  {
    "task": "Design a function that interacts with cloud storage and manages access permission exceptions.",
    "code": "```vb\nImports System\n\nModule Program\n    Sub Main()\n        Try\n            AccessCloudStorage()\n        Catch ex As UnauthorizedAccessException\n            Console.WriteLine(\"Access denied: \" & ex.Message)\n        Catch ex As Exception\n            Console.WriteLine(\"An error occurred: \" & ex.Message)\n        End Try\n    End Sub\n\n    Sub AccessCloudStorage()\n        ' Simulate cloud storage interaction that may throw exceptions\n        Throw New UnauthorizedAccessException(\"User does not have permission to access the resource.\")\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a script that automates deployment and handles exceptions for missing configuration files.",
    "code": "```vb\nImports System.IO\n\nModule DeploymentAutomation\n    Sub Main()\n        Try\n            DeployApplication()\n        Catch ex As FileNotFoundException\n            Console.WriteLine(\"Error: Configuration file missing. \" & ex.Message)\n        Catch ex As Exception\n            Console.WriteLine(\"An unexpected error occurred: \" & ex.Message)\n        End Try\n    End Sub\n\n    Sub DeployApplication()\n        Dim configFilePath As String = \"config.ini\"\n        If Not File.Exists(configFilePath) Then\n            Throw New FileNotFoundException(\"The configuration file is missing.\")\n        End If\n\n        ' Code to automate deployment goes here\n\n        Console.WriteLine(\"Deployment completed successfully.\")\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function that normalizes data and handles exceptions for invalid data ranges.",
    "code": "```vb\nFunction NormalizeData(data() As Double) As Double()\n    Dim result(data.Length - 1) As Double\n    Try\n        Dim minValue As Double = data.Min()\n        Dim maxValue As Double = data.Max()\n\n        If minValue = maxValue Then\n            Throw New ArgumentException(\"Invalid data range: min and max values are equal.\")\n        End If\n\n        For i As Integer = 0 To data.Length - 1\n            result(i) = (data(i) - minValue) / (maxValue - minValue)\n        Next\n    Catch ex As Exception\n        Console.WriteLine(\"Error: \" & ex.Message)\n    End Try\n    Return result\nEnd Function\n```"
  },
  {
    "task": "Create a system that monitors application performance and handles threshold breach exceptions.",
    "code": "```vb\nModule PerformanceMonitor\n\n    Sub Main()\n        Try\n            MonitorPerformance()\n        Catch ex As ThresholdBreachException\n            Console.WriteLine(\"Threshold Breach Exception: \" & ex.Message)\n        Catch ex As Exception\n            Console.WriteLine(\"An unexpected error occurred: \" & ex.Message)\n        End Try\n    End Sub\n\n    Sub MonitorPerformance()\n        Dim performanceValue As Integer = GetPerformanceValue()\n\n        If performanceValue > 100 Then\n            Throw New ThresholdBreachException(\"Performance threshold exceeded with value: \" & performanceValue)\n        End If\n\n        Console.WriteLine(\"Performance is within acceptable limits.\")\n    End Sub\n\n    Function GetPerformanceValue() As Integer\n        ' Simulate retrieving a performance value\n        Return 105\n    End Function\n\n    Class ThresholdBreachException\n        Inherits Exception\n\n        Public Sub New(message As String)\n            MyBase.New(message)\n        End Sub\n    End Class\n\nEnd Module\n```"
  },
  {
    "task": "Develop a program that processes social media data and manages API limit exceptions.",
    "code": "```vb\nModule SocialMediaDataProcessor\n    Sub Main()\n        Try\n            ProcessSocialMediaData()\n        Catch ex As ApiLimitExceededException\n            Console.WriteLine(\"API limit exceeded: \" & ex.Message)\n        Catch ex As Exception\n            Console.WriteLine(\"An unexpected error occurred: \" & ex.Message)\n        End Try\n    End Sub\n\n    Sub ProcessSocialMediaData()\n        ' Simulated processing logic\n        Dim apiLimitExceeded As Boolean = True ' Simulate API limit condition\n\n        If apiLimitExceeded Then\n            Throw New ApiLimitExceededException(\"You have reached the maximum number of API calls allowed.\")\n        End If\n\n        ' Continue processing data\n    End Sub\nEnd Module\n\nPublic Class ApiLimitExceededException\n    Inherits Exception\n\n    Public Sub New(message As String)\n        MyBase.New(message)\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Design a function that integrates with payment gateways and handles payment failure exceptions.",
    "code": "```vb\nImports System\n\nModule PaymentModule\n\n    Sub Main()\n        Try\n            ProcessPayment()\n        Catch ex As PaymentGatewayException\n            Console.WriteLine(\"Payment failed: \" & ex.Message)\n        Catch ex As Exception\n            Console.WriteLine(\"An unexpected error occurred: \" & ex.Message)\n        End Try\n    End Sub\n\n    Sub ProcessPayment()\n        Try\n            ' Simulate payment processing\n            Dim success As Boolean = PaymentGatewayIntegration()\n            If Not success Then\n                Throw New PaymentGatewayException(\"Payment gateway error.\")\n            End If\n            Console.WriteLine(\"Payment processed successfully.\")\n        Catch ex As Exception\n            Throw\n        End Try\n    End Sub\n\n    Function PaymentGatewayIntegration() As Boolean\n        ' Simulate a failure in the payment gateway\n        Return False\n    End Function\n\n    Class PaymentGatewayException\n        Inherits Exception\n\n        Public Sub New(message As String)\n            MyBase.New(message)\n        End Sub\n    End Class\n\nEnd Module\n```"
  },
  {
    "task": "Write a function that backs up data and handles exceptions for unavailable storage media.",
    "code": "```vb\nFunction BackupData() As Boolean\n    Try\n        ' Simulate backing up data\n        ' Replace this with actual backup code\n        Console.WriteLine(\"Backing up data...\")\n        \n        ' Simulate an exception for unavailable storage media\n        Throw New IOException(\"Storage media unavailable\")\n\n        ' If successful, return True\n        Return True\n    Catch ex As IOException\n        Console.WriteLine(\"Backup failed: \" & ex.Message)\n        ' Handle exception for unavailable storage media\n        Return False\n    Catch ex As Exception\n        Console.WriteLine(\"An unexpected error occurred: \" & ex.Message)\n        ' Handle any other exceptions\n        Return False\n    End Try\nEnd Function\n```"
  },
  {
    "task": "Create a tool that manages software updates and handles exceptions for version conflicts.",
    "code": "```vb\nModule SoftwareUpdateManager\n\n    Sub Main()\n        Try\n            CheckForUpdates()\n        Catch ex As VersionConflictException\n            Console.WriteLine(\"Version conflict encountered: \" & ex.Message)\n        Catch ex As Exception\n            Console.WriteLine(\"An error occurred: \" & ex.Message)\n        End Try\n    End Sub\n\n    Sub CheckForUpdates()\n        ' Simulate update check\n        Dim currentVersion As String = \"1.0.0\"\n        Dim newVersion As String = \"1.1.0\"\n\n        If IsVersionConflict(currentVersion, newVersion) Then\n            Throw New VersionConflictException(\"Current version \" & currentVersion & \" conflicts with new version \" & newVersion)\n        End If\n\n        Console.WriteLine(\"Software is up to date.\")\n    End Sub\n\n    Function IsVersionConflict(currentVersion As String, newVersion As String) As Boolean\n        ' Simulate version conflict checking logic\n        Return currentVersion <> newVersion\n    End Function\n\n    ' Custom exception class for version conflicts\n    Public Class VersionConflictException\n        Inherits Exception\n        Public Sub New(message As String)\n            MyBase.New(message)\n        End Sub\n    End Class\n\nEnd Module\n```"
  },
  {
    "task": "Implement a program that performs sentiment analysis and manages exceptions for ambiguous texts.",
    "code": "```vb\nModule SentimentAnalysis\n    Sub Main()\n        Dim text As String = \"This is a sample text for sentiment analysis.\"\n        \n        Try\n            Dim sentimentScore As Integer = AnalyzeSentiment(text)\n            Console.WriteLine(\"Sentiment Score: \" & sentimentScore)\n        Catch ex As AmbiguousTextException\n            Console.WriteLine(\"Ambiguous text detected: \" & ex.Message)\n        Catch ex As Exception\n            Console.WriteLine(\"An error occurred: \" & ex.Message)\n        End Try\n    End Sub\n\n    Function AnalyzeSentiment(text As String) As Integer\n        If String.IsNullOrWhiteSpace(text) Then\n            Throw New AmbiguousTextException(\"The provided text is empty or whitespace.\")\n        End If\n        ' Placeholder for sentiment analysis logic\n        Return 0 ' Assume neutral sentiment\n    End Function\n\n    Class AmbiguousTextException\n        Inherits Exception\n        Public Sub New(message As String)\n            MyBase.New(message)\n        End Sub\n    End Class\nEnd Module\n```"
  },
  {
    "task": "Develop a function that manages user authentication and handles credential mismatch exceptions.",
    "code": "```vb\nModule AuthenticationModule\n    Sub Main()\n        Try\n            AuthenticateUser(\"username\", \"password\")\n        Catch ex As CredentialMismatchException\n            Console.WriteLine(ex.Message)\n        End Try\n    End Sub\n\n    Function AuthenticateUser(username As String, password As String) As Boolean\n        Dim storedUsername As String = \"admin\"\n        Dim storedPassword As String = \"admin123\"\n\n        If username <> storedUsername OrElse password <> storedPassword Then\n            Throw New CredentialMismatchException(\"Invalid username or password.\")\n        End If\n\n        Return True\n    End Function\nEnd Module\n\nPublic Class CredentialMismatchException\n    Inherits ApplicationException\n\n    Public Sub New(message As String)\n        MyBase.New(message)\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Write a program that processes geographic data and handles exceptions for invalid coordinates.",
    "code": "```vb\nModule GeographicDataProcessor\n\n    Sub Main()\n        Try\n            ProcessGeographicData()\n        Catch ex As ArgumentOutOfRangeException\n            Console.WriteLine(\"Error: Invalid coordinates. \" & ex.Message)\n        Catch ex As Exception\n            Console.WriteLine(\"An unexpected error occurred: \" & ex.Message)\n        End Try\n    End Sub\n\n    Sub ProcessGeographicData()\n        Dim latitude As Double = GetLatitude()\n        Dim longitude As Double = GetLongitude()\n\n        If latitude < -90 Or latitude > 90 Then\n            Throw New ArgumentOutOfRangeException(\"latitude\", \"Latitude must be between -90 and 90.\")\n        End If\n\n        If longitude < -180 Or longitude > 180 Then\n            Throw New ArgumentOutOfRangeException(\"longitude\", \"Longitude must be between -180 and 180.\")\n        End If\n\n        Console.WriteLine(\"Processing data for coordinates: \" & latitude & \", \" & longitude)\n    End Sub\n\n    Function GetLatitude() As Double\n        ' Simulated input for latitude\n        Return 95.0\n    End Function\n\n    Function GetLongitude() As Double\n        ' Simulated input for longitude\n        Return 45.0\n    End Function\n\nEnd Module\n```"
  },
  {
    "task": "Create a script that manages network configurations and handles exceptions for invalid syntax.",
    "code": "```vb\nImports System\nImports System.Net\n\nModule NetworkConfigManager\n    Sub Main()\n        Try\n            ConfigureNetwork(\"192.168.1.1\", \"255.255.255.0\")\n        Catch ex As FormatException\n            Console.WriteLine(\"Invalid IP address format: \" & ex.Message)\n        Catch ex As Exception\n            Console.WriteLine(\"An error occurred: \" & ex.Message)\n        End Try\n    End Sub\n\n    Sub ConfigureNetwork(ipAddress As String, subnetMask As String)\n        Try\n            Dim ip As IPAddress = IPAddress.Parse(ipAddress)\n            Dim mask As IPAddress = IPAddress.Parse(subnetMask)\n            ' Simulating network configuration logic\n            Console.WriteLine(\"Network configured with IP: \" & ip.ToString() & \" and Subnet Mask: \" & mask.ToString())\n        Catch ex As FormatException\n            Throw New FormatException(\"Invalid syntax in network configuration\", ex)\n        End Try\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a function that processes biometric data and handles exceptions for sensor errors.",
    "code": "```vb\nModule BiometricProcessor\n\n    Sub Main()\n        Try\n            Dim result As String = ProcessBiometricData()\n            Console.WriteLine(\"Processing Result: \" & result)\n        Catch ex As SensorException\n            Console.WriteLine(\"Sensor Error: \" & ex.Message)\n        Catch ex As Exception\n            Console.WriteLine(\"An unexpected error occurred: \" & ex.Message)\n        End Try\n    End Sub\n\n    Function ProcessBiometricData() As String\n        Try\n            ' Simulate processing biometric data\n            Dim sensorData As Integer = GetSensorData()\n\n            ' Simulate a potential sensor error\n            If sensorData < 0 Then\n                Throw New SensorException(\"Invalid sensor data received.\")\n            End If\n\n            Return \"Biometric data processed successfully.\"\n        Catch ex As SensorException\n            Throw\n        Catch ex As Exception\n            Throw New Exception(\"Error processing biometric data.\", ex)\n        End Try\n    End Function\n\n    Function GetSensorData() As Integer\n        ' Simulate sensor data retrieval\n        ' Returning -1 to simulate a sensor error\n        Return -1\n    End Function\n\n    Public Class SensorException\n        Inherits Exception\n\n        Public Sub New(message As String)\n            MyBase.New(message)\n        End Sub\n    End Class\n\nEnd Module\n```"
  },
  {
    "task": "Implement a system that manages access control and handles exceptions for unauthorized access attempts.",
    "code": "```vb\nModule AccessControlSystem\n    Sub Main()\n        Dim authorizedUsers As New List(Of String) From {\"Alice\", \"Bob\", \"Charlie\"}\n        Dim userName As String\n\n        Console.WriteLine(\"Enter your username:\")\n        userName = Console.ReadLine()\n\n        Try\n            GrantAccess(userName, authorizedUsers)\n            Console.WriteLine(\"Access Granted\")\n        Catch ex As UnauthorizedAccessException\n            Console.WriteLine(\"Access Denied: \" & ex.Message)\n        End Try\n\n    End Sub\n\n    Sub GrantAccess(userName As String, authorizedUsers As List(Of String))\n        If Not authorizedUsers.Contains(userName) Then\n            Throw New UnauthorizedAccessException(\"User \" & userName & \" is not authorized.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function that performs load balancing and handles exceptions for unreachable nodes.",
    "code": "```vb\nImports System\n\nModule LoadBalancerModule\n\n    Sub Main()\n        Try\n            Dim nodes As String() = {\"Node1\", \"Node2\", \"Node3\"}\n            PerformLoadBalancing(nodes)\n        Catch ex As Exception\n            Console.WriteLine(\"An error occurred during load balancing: \" & ex.Message)\n        End Try\n    End Sub\n\n    Sub PerformLoadBalancing(ByVal nodes As String())\n        For Each node In nodes\n            Try\n                ConnectToNode(node)\n                Console.WriteLine(\"Connected to \" & node)\n            Catch ex As Exception\n                Console.WriteLine(\"Failed to connect to \" & node & \": \" & ex.Message)\n            End Try\n        Next\n    End Sub\n\n    Sub ConnectToNode(ByVal nodeName As String)\n        ' Simulating a connection attempt\n        If nodeName = \"Node2\" Then\n            Throw New Exception(\"Node is unreachable\")\n        End If\n    End Sub\n\nEnd Module\n```"
  },
  {
    "task": "Create a program that simulates virtual environments and manages resource allocation exceptions.",
    "code": "```vb\nModule VirtualEnvironmentSimulator\n\n    Sub Main()\n        Try\n            SimulateVirtualEnvironment()\n        Catch ex As InsufficientMemoryException\n            Console.WriteLine(\"Error: Insufficient memory to allocate resources.\")\n        Catch ex As InvalidOperationException\n            Console.WriteLine(\"Error: Invalid operation during resource allocation.\")\n        Catch ex As Exception\n            Console.WriteLine(\"An unexpected error occurred: \" & ex.Message)\n        End Try\n    End Sub\n\n    Sub SimulateVirtualEnvironment()\n        ' Simulation logic here\n        ' For demonstration, we will throw an exception\n        Throw New InsufficientMemoryException(\"Not enough memory available.\")\n    End Sub\n\nEnd Module\n```"
  },
  {
    "task": "Develop a tool that manages digital rights and handles exceptions for unauthorized content access.",
    "code": "```vb\nImports System\n\nModule DigitalRightsManager\n    Sub Main()\n        Dim content As New Dictionary(Of String, Boolean) From {\n            {\"Content1\", True},  ' True means authorized\n            {\"Content2\", False}  ' False means unauthorized\n        }\n\n        Try\n            AccessContent(\"Content1\", content)\n            AccessContent(\"Content2\", content)\n        Catch ex As UnauthorizedAccessException\n            Console.WriteLine(\"Exception: \" & ex.Message)\n        End Try\n    End Sub\n\n    Sub AccessContent(contentName As String, content As Dictionary(Of String, Boolean))\n        If Not content.ContainsKey(contentName) Then\n            Throw New ArgumentException(\"Content not found: \" & contentName)\n        End If\n\n        If Not content(contentName) Then\n            Throw New UnauthorizedAccessException(\"Unauthorized access to content: \" & contentName)\n        End If\n\n        Console.WriteLine(\"Access granted to: \" & contentName)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a function that synchronizes clocks and handles exceptions for time drift.",
    "code": "```vb\nImports System\n\nModule ClockSynchronizer\n    Sub Main()\n        Try\n            SynchronizeClocks()\n        Catch ex As Exception\n            Console.WriteLine(\"An error occurred: \" & ex.Message)\n        End Try\n    End Sub\n\n    Sub SynchronizeClocks()\n        Try\n            ' Simulate clock synchronization\n            Dim localTime As DateTime = DateTime.Now\n            Dim serverTime As DateTime = GetServerTime()\n\n            If Math.Abs((localTime - serverTime).TotalSeconds) > 5 Then\n                Throw New ApplicationException(\"Time drift is too large.\")\n            End If\n\n            Console.WriteLine(\"Clocks synchronized successfully.\")\n        Catch ex As ApplicationException\n            Console.WriteLine(\"Synchronization failed: \" & ex.Message)\n        Catch ex As Exception\n            Throw ' Re-throw unexpected exceptions\n        End Try\n    End Sub\n\n    Function GetServerTime() As DateTime\n        ' Simulate fetching server time\n        Return DateTime.Now.AddSeconds(-3) ' Example drift\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Write a script that manages system backups and handles exceptions for insufficient backup space.",
    "code": "```vb\nModule BackupManager\n\n    Sub Main()\n        Try\n            PerformBackup()\n        Catch ex As InsufficientSpaceException\n            Console.WriteLine(\"Backup failed: Insufficient backup space.\")\n        Catch ex As Exception\n            Console.WriteLine(\"An unexpected error occurred: \" & ex.Message)\n        End Try\n    End Sub\n\n    Sub PerformBackup()\n        ' This function simulates a backup operation\n        Dim backupSpaceAvailable As Boolean = CheckBackupSpace()\n\n        If Not backupSpaceAvailable Then\n            Throw New InsufficientSpaceException(\"Not enough space for backup.\")\n        End If\n\n        Console.WriteLine(\"Backup completed successfully.\")\n    End Sub\n\n    Function CheckBackupSpace() As Boolean\n        ' Simulate checking backup space\n        Return False ' Simulate insufficient space for demonstration\n    End Function\n\nEnd Module\n\nClass InsufficientSpaceException\n    Inherits Exception\n\n    Public Sub New(message As String)\n        MyBase.New(message)\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Create a program that processes natural language text and handles parsing exceptions.",
    "code": "```vb\nImports System\n\nModule Program\n    Sub Main()\n        Dim text As String = \"This is a sample text for parsing.\"\n        \n        Try\n            ProcessText(text)\n        Catch ex As Exception\n            Console.WriteLine(\"An error occurred while parsing the text: \" & ex.Message)\n        End Try\n    End Sub\n\n    Sub ProcessText(ByVal input As String)\n        If String.IsNullOrWhiteSpace(input) Then\n            Throw New ArgumentException(\"Input text cannot be empty.\")\n        End If\n\n        ' Dummy parse operation\n        Dim words() As String = input.Split(\" \"c)\n        For Each word As String In words\n            If word.Length > 10 Then\n                Throw New FormatException(\"Word length exceeds limit.\")\n            End If\n        Next\n\n        Console.WriteLine(\"Text processed successfully.\")\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a function that manages thread execution and handles race condition exceptions.",
    "code": "```vb\nImports System\nImports System.Threading\n\nModule Module1\n    Dim lockObject As New Object()\n    Dim sharedResource As Integer = 0\n\n    Sub Main()\n        Dim thread1 As New Thread(AddressOf ThreadTask)\n        Dim thread2 As New Thread(AddressOf ThreadTask)\n\n        thread1.Start()\n        thread2.Start()\n\n        thread1.Join()\n        thread2.Join()\n\n        Console.WriteLine(\"Final value of shared resource: \" & sharedResource)\n    End Sub\n\n    Sub ThreadTask()\n        Try\n            For i As Integer = 1 To 1000\n                SafeIncrement()\n            Next\n        Catch ex As Exception\n            Console.WriteLine(\"Exception occurred: \" & ex.Message)\n        End Try\n    End Sub\n\n    Sub SafeIncrement()\n        SyncLock lockObject\n            Try\n                sharedResource += 1\n            Catch ex As Exception\n                Console.WriteLine(\"Exception during increment: \" & ex.Message)\n            End Try\n        End SyncLock\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a system that integrates with IoT devices and handles connectivity exceptions.",
    "code": "```vb\nImports System\nImports System.Net.Sockets\n\nModule IoTIntegration\n    Sub Main()\n        Try\n            ConnectToIoTDevice(\"192.168.1.10\", 8080)\n            Console.WriteLine(\"Successfully connected to IoT device.\")\n        Catch ex As SocketException\n            Console.WriteLine(\"Failed to connect to IoT device: \" & ex.Message)\n        Catch ex As Exception\n            Console.WriteLine(\"An unexpected error occurred: \" & ex.Message)\n        End Try\n    End Sub\n\n    Sub ConnectToIoTDevice(ip As String, port As Integer)\n        Dim client As New TcpClient()\n        client.Connect(ip, port)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function that manages application logging and handles exceptions for log overflow.",
    "code": "```vb\nImports System.IO\n\nModule LoggingModule\n\n    Sub Main()\n        Try\n            LogMessage(\"This is a log message.\")\n        Catch ex As Exception\n            Console.WriteLine(\"Exception caught: \" & ex.Message)\n        End Try\n    End Sub\n\n    Sub LogMessage(ByVal message As String)\n        Try\n            Dim logFilePath As String = \"app_log.txt\"\n            Dim maxLogSize As Integer = 1024 * 1024 ' 1MB\n\n            If File.Exists(logFilePath) Then\n                Dim fileInfo As New FileInfo(logFilePath)\n                If fileInfo.Length > maxLogSize Then\n                    Throw New Exception(\"Log overflow: The log file size exceeds the maximum limit.\")\n                End If\n            End If\n\n            Using writer As StreamWriter = File.AppendText(logFilePath)\n                writer.WriteLine(DateTime.Now.ToString(\"yyyy-MM-dd HH:mm:ss\") & \" - \" & message)\n            End Using\n        Catch ex As Exception\n            Console.WriteLine(\"Error logging message: \" & ex.Message)\n        End Try\n    End Sub\n\nEnd Module\n```"
  },
  {
    "task": "Create a tool that visualizes data and handles exceptions for unsupported visualization types.",
    "code": "```vb\nImports System\n\nModule DataVisualizer\n    Sub Main()\n        Try\n            ' Example data input\n            Dim data() As Integer = {1, 2, 3, 4, 5}\n            Dim visualizationType As String = \"UnsupportedType\"\n\n            VisualizeData(data, visualizationType)\n        Catch ex As Exception\n            Console.WriteLine(\"Error: \" & ex.Message)\n        End Try\n    End Sub\n\n    Sub VisualizeData(ByVal data() As Integer, ByVal visualizationType As String)\n        Select Case visualizationType\n            Case \"BarChart\"\n                ' Code to visualize data as a bar chart\n            Case \"PieChart\"\n                ' Code to visualize data as a pie chart\n            Case Else\n                Throw New NotSupportedException(\"The visualization type is not supported.\")\n        End Select\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a program that performs genetic algorithm simulations and manages exception for invalid mutations.",
    "code": "```vb\nImports System\n\nModule GeneticAlgorithm\n    Sub Main()\n        Try\n            ' Simulate a genetic algorithm process\n            Dim result As String = PerformGeneticSimulation()\n            Console.WriteLine(\"Simulation Result: \" & result)\n        Catch ex As InvalidMutationException\n            Console.WriteLine(\"Error: \" & ex.Message)\n        Catch ex As Exception\n            Console.WriteLine(\"An unexpected error occurred: \" & ex.Message)\n        End Try\n    End Sub\n\n    Function PerformGeneticSimulation() As String\n        Dim isValidMutation As Boolean = False ' Placeholder for actual mutation validation logic\n\n        If Not isValidMutation Then\n            Throw New InvalidMutationException(\"Invalid mutation detected during simulation.\")\n        End If\n\n        Return \"Success\"\n    End Function\n\n    Public Class InvalidMutationException\n        Inherits Exception\n\n        Public Sub New(message As String)\n            MyBase.New(message)\n        End Sub\n    End Class\nEnd Module\n```"
  },
  {
    "task": "Implement a function that manages distributed transactions and handles consistency exceptions.",
    "code": "```vb\nImports System\nImports System.Transactions\n\nModule TransactionManager\n    Sub Main()\n        Try\n            ManageDistributedTransaction()\n        Catch ex As TransactionAbortedException\n            Console.WriteLine(\"Transaction aborted: \" & ex.Message)\n        Catch ex As Exception\n            Console.WriteLine(\"An error occurred: \" & ex.Message)\n        End Try\n    End Sub\n\n    Sub ManageDistributedTransaction()\n        Using scope As New TransactionScope()\n            Try\n                ' Simulate distributed transaction logic here\n                ' If any operation fails, raise an exception to test exception handling\n                ' For demonstration, we'll assume an operation throws an exception\n                Throw New InvalidOperationException(\"Simulated operation failure\")\n\n                ' Complete the transaction\n                scope.Complete()\n            Catch ex As Exception\n                Console.WriteLine(\"Exception during transaction: \" & ex.Message)\n                Throw\n            End Try\n        End Using\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function that handles secure communications and manages encryption key exceptions.",
    "code": "```vb\nModule SecureCommunication\n\n    Sub Main()\n        Try\n            HandleSecureCommunication()\n        Catch ex As KeyNotFoundException\n            Console.WriteLine(\"Encryption key not found: \" & ex.Message)\n        Catch ex As Exception\n            Console.WriteLine(\"An error occurred: \" & ex.Message)\n        End Try\n    End Sub\n\n    Sub HandleSecureCommunication()\n        Try\n            ' Simulate key retrieval and encryption process\n            Dim encryptionKey As String = GetEncryptionKey()\n            If String.IsNullOrEmpty(encryptionKey) Then\n                Throw New KeyNotFoundException(\"Key is missing.\")\n            End If\n            ' Proceed with secure communication using the encryptionKey\n            Console.WriteLine(\"Secure communication established.\")\n        Catch ex As KeyNotFoundException\n            Throw\n        Catch ex As Exception\n            Throw New Exception(\"Failed to handle secure communication.\", ex)\n        End Try\n    End Sub\n\n    Function GetEncryptionKey() As String\n        ' Simulate retrieving an encryption key\n        Return Nothing ' Simulate a missing key\n    End Function\n\nEnd Module\n```"
  },
  {
    "task": "Create a system that processes sensor data and handles out-of-range value exceptions.",
    "code": "```vb\nModule SensorDataProcessor\n\n    Sub Main()\n        Dim sensorData() As Integer = {23, 45, 102, 78, 56, -5, 130}\n        \n        For Each data As Integer In sensorData\n            Try\n                ProcessSensorData(data)\n            Catch ex As Exception\n                Console.WriteLine(\"Error: \" & ex.Message)\n            End Try\n        Next\n    End Sub\n\n    Sub ProcessSensorData(ByVal data As Integer)\n        If data < 0 Or data > 100 Then\n            Throw New ArgumentOutOfRangeException(\"Sensor data out of range: \" & data)\n        End If\n        Console.WriteLine(\"Processing data: \" & data)\n    End Sub\n\nEnd Module\n```"
  },
  {
    "task": "Develop a program that simulates weather patterns and handles model prediction exceptions.",
    "code": "```vb\nModule WeatherSimulation\n\n    Sub Main()\n        Try\n            SimulateWeatherPattern()\n        Catch ex As Exception\n            Console.WriteLine(\"An error occurred during weather simulation: \" & ex.Message)\n        End Try\n    End Sub\n\n    Sub SimulateWeatherPattern()\n        Dim random As New Random()\n        Dim probability As Integer = random.Next(0, 10)\n\n        If probability < 3 Then\n            Throw New Exception(\"Model prediction failed due to insufficient data.\")\n        Else\n            Console.WriteLine(\"Weather pattern simulation successful.\")\n        End If\n    End Sub\n\nEnd Module\n```"
  },
  {
    "task": "Design a function that manages API versioning and handles backward compatibility exceptions.",
    "code": "```vb\nModule APIVersioning\n    Sub Main()\n        Try\n            Dim version As String = \"v2\"\n            ManageAPIVersion(version)\n        Catch ex As NotSupportedException\n            Console.WriteLine(\"Error: \" & ex.Message)\n        End Try\n    End Sub\n\n    Sub ManageAPIVersion(version As String)\n        Select Case version\n            Case \"v1\"\n                Console.WriteLine(\"Handling API version 1\")\n            Case \"v2\"\n                Console.WriteLine(\"Handling API version 2\")\n            Case Else\n                Throw New NotSupportedException(\"Unsupported API version: \" & version)\n        End Select\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a tool that converts character encodings and handles unsupported encoding exceptions.",
    "code": "```vb\nImports System.Text\n\nModule EncodingConverter\n    Sub Main()\n        Console.Write(\"Enter the text: \")\n        Dim inputText As String = Console.ReadLine()\n\n        Console.Write(\"Enter the source encoding (e.g., utf-8): \")\n        Dim sourceEncodingName As String = Console.ReadLine()\n\n        Console.Write(\"Enter the target encoding (e.g., utf-16): \")\n        Dim targetEncodingName As String = Console.ReadLine()\n\n        Try\n            Dim sourceEncoding As Encoding = Encoding.GetEncoding(sourceEncodingName)\n            Dim targetEncoding As Encoding = Encoding.GetEncoding(targetEncodingName)\n\n            Dim sourceBytes As Byte() = sourceEncoding.GetBytes(inputText)\n            Dim targetBytes As Byte() = Encoding.Convert(sourceEncoding, targetEncoding, sourceBytes)\n            Dim convertedText As String = targetEncoding.GetString(targetBytes)\n\n            Console.WriteLine(\"Converted text: \" & convertedText)\n        Catch ex As ArgumentException\n            Console.WriteLine(\"Error: Unsupported encoding specified.\")\n        Catch ex As Exception\n            Console.WriteLine(\"An error occurred: \" & ex.Message)\n        End Try\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a program that handles dynamic content generation and manages template parsing exceptions.",
    "code": "```vb\nImports System\n\nModule DynamicContentGenerator\n\n    Sub Main()\n        Dim template As String = \"Welcome, {name}! Today is {day}.\"\n        Dim data As Dictionary(Of String, String) = New Dictionary(Of String, String) From {\n            {\"name\", \"John\"},\n            {\"day\", \"Monday\"}\n        }\n\n        Try\n            Dim result As String = ParseTemplate(template, data)\n            Console.WriteLine(result)\n        Catch ex As Exception\n            Console.WriteLine(\"An error occurred during template parsing: \" & ex.Message)\n        End Try\n    End Sub\n\n    Function ParseTemplate(template As String, data As Dictionary(Of String, String)) As String\n        For Each key As String In data.Keys\n            If template.Contains(\"{\" & key & \"}\") Then\n                template = template.Replace(\"{\" & key & \"}\", data(key))\n            Else\n                Throw New Exception(\"Missing placeholder for key: \" & key)\n            End If\n        Next\n        Return template\n    End Function\n\nEnd Module\n```"
  },
  {
    "task": "Implement a script that schedules automated tests and handles exceptions for missing test cases.",
    "code": "```vb\nImports System\nImports System.Collections.Generic\n\nModule TestScheduler\n\n    Sub Main()\n        Dim testCases As New Dictionary(Of String, Action) From {\n            {\"Test1\", AddressOf TestCase1},\n            {\"Test2\", AddressOf TestCase2}\n        }\n\n        Dim scheduledTests As New List(Of String) From {\"Test1\", \"Test3\"}\n\n        For Each testName In scheduledTests\n            Try\n                If testCases.ContainsKey(testName) Then\n                    Console.WriteLine(\"Running \" & testName)\n                    testCases(testName).Invoke()\n                Else\n                    Throw New KeyNotFoundException(\"Test case \" & testName & \" is missing.\")\n                End If\n            Catch ex As KeyNotFoundException\n                Console.WriteLine(\"Exception caught: \" & ex.Message)\n            End Try\n        Next\n\n    End Sub\n\n    Sub TestCase1()\n        Console.WriteLine(\"Test Case 1 executed.\")\n    End Sub\n\n    Sub TestCase2()\n        Console.WriteLine(\"Test Case 2 executed.\")\n    End Sub\n\nEnd Module\n```"
  },
  {
    "task": "Develop a system that manages virtual machine instances and handles provisioning exceptions.",
    "code": "```vb\nImports System\n\nModule VirtualMachineManager\n    Sub Main()\n        Try\n            ProvisionVM()\n        Catch ex As ProvisioningException\n            Console.WriteLine(\"Provisioning Error: \" & ex.Message)\n        Catch ex As Exception\n            Console.WriteLine(\"General Error: \" & ex.Message)\n        End Try\n    End Sub\n\n    Sub ProvisionVM()\n        ' Simulate provisioning logic\n        Dim random As New Random()\n        Dim success As Boolean = random.Next(0, 2) = 0\n\n        If Not success Then\n            Throw New ProvisioningException(\"Failed to provision the virtual machine.\")\n        End If\n\n        Console.WriteLine(\"Virtual machine provisioned successfully.\")\n    End Sub\n\n    Public Class ProvisioningException\n        Inherits Exception\n\n        Public Sub New(message As String)\n            MyBase.New(message)\n        End Sub\n    End Class\nEnd Module\n```"
  },
  {
    "task": "Write a function that processes credit scores and handles exceptions for missing credit history.",
    "code": "```vb\nFunction ProcessCreditScore(creditScore As Nullable(Of Integer)) As String\n    Try\n        If Not creditScore.HasValue Then\n            Throw New Exception(\"Missing credit history\")\n        End If\n\n        If creditScore >= 700 Then\n            Return \"Good credit score\"\n        ElseIf creditScore >= 600 Then\n            Return \"Average credit score\"\n        Else\n            Return \"Poor credit score\"\n        End If\n\n    Catch ex As Exception\n        Return ex.Message\n    End Try\nEnd Function\n```"
  },
  {
    "task": "Create a tool that manages digital certificates and handles expiration exceptions.",
    "code": "```vb\nImports System\nImports System.Security.Cryptography.X509Certificates\n\nModule CertificateManager\n\n    Sub Main()\n        Try\n            Dim certPath As String = \"path/to/your/certificate.cer\"\n            Dim certificate As X509Certificate2 = New X509Certificate2(certPath)\n            \n            If CertificateExpired(certificate) Then\n                Throw New Exception(\"The certificate has expired.\")\n            End If\n            \n            Console.WriteLine(\"Certificate is valid.\")\n        Catch ex As Exception\n            Console.WriteLine(\"An error occurred: \" & ex.Message)\n        End Try\n    End Sub\n\n    Function CertificateExpired(cert As X509Certificate2) As Boolean\n        Return DateTime.Now > cert.NotAfter\n    End Function\n\nEnd Module\n```"
  },
  {
    "task": "Design a program that processes genome sequences and handles exceptions for sequence alignment.",
    "code": "```vb\nModule GenomeProcessor\n\n    Sub Main()\n        Dim sequence1 As String = \"AGCT\"\n        Dim sequence2 As String = \"AGTT\"\n\n        Try\n            Dim alignmentScore As Integer = AlignSequences(sequence1, sequence2)\n            Console.WriteLine(\"Alignment Score: \" & alignmentScore)\n        Catch ex As Exception\n            Console.WriteLine(\"An error occurred during sequence alignment: \" & ex.Message)\n        End Try\n    End Sub\n\n    Function AlignSequences(seq1 As String, seq2 As String) As Integer\n        If String.IsNullOrEmpty(seq1) OrElse String.IsNullOrEmpty(seq2) Then\n            Throw New ArgumentException(\"Sequences must not be empty.\")\n        End If\n\n        ' Dummy alignment logic for demonstration\n        If seq1.Length <> seq2.Length Then\n            Throw New Exception(\"Sequences must be of equal length for alignment.\")\n        End If\n\n        Dim score As Integer = 0\n        For i As Integer = 0 To seq1.Length - 1\n            If seq1(i) = seq2(i) Then\n                score += 1\n            End If\n        Next\n\n        Return score\n    End Function\n\nEnd Module\n```"
  }
]