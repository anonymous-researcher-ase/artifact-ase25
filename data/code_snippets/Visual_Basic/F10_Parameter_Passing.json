[
  {
    "task": "Create a function that modifies the first element of an array passed to it. Explain how the changes are reflected in the original array.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers As Integer() = {10, 20, 30}\n        ModifyArray(numbers)\n        Console.WriteLine(numbers(0))\n    End Sub\n\n    Sub ModifyArray(ByRef arr As Integer())\n        arr(0) = 99\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a function that swaps the values of two variables using pass-by-reference. Demonstrate how the swap affects the original variables.",
    "code": "```vb\nModule SwapExample\n    Sub Main()\n        Dim a As Integer = 5\n        Dim b As Integer = 10\n        Console.WriteLine(\"Before Swap: a = \" & a & \", b = \" & b)\n        Swap(a, b)\n        Console.WriteLine(\"After Swap: a = \" & a & \", b = \" & b)\n    End Sub\n\n    Sub Swap(ByRef x As Integer, ByRef y As Integer)\n        Dim temp As Integer\n        temp = x\n        x = y\n        y = temp\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a program that passes a large data structure to a function by value and by reference. Compare the performance and memory usage for both approaches.",
    "code": "```vb\nModule ParameterPassingExample\n\n    Structure LargeDataStructure\n        Dim Data() As Integer\n        Sub New(size As Integer)\n            ReDim Data(size - 1)\n            For i As Integer = 0 To size - 1\n                Data(i) = i\n            Next\n        End Sub\n    End Structure\n\n    Sub Main()\n        Dim size As Integer = 1000000\n        Dim largeData As New LargeDataStructure(size)\n\n        Dim startTime As DateTime = DateTime.Now\n        ProcessByValue(largeData)\n        Dim durationByValue As TimeSpan = DateTime.Now - startTime\n\n        startTime = DateTime.Now\n        ProcessByReference(largeData)\n        Dim durationByReference As TimeSpan = DateTime.Now - startTime\n\n        Console.WriteLine(\"Time taken by value: \" & durationByValue.TotalMilliseconds & \" ms\")\n        Console.WriteLine(\"Time taken by reference: \" & durationByReference.TotalMilliseconds & \" ms\")\n    End Sub\n\n    Sub ProcessByValue(data As LargeDataStructure)\n        Dim sum As Long = 0\n        For Each value In data.Data\n            sum += value\n        Next\n    End Sub\n\n    Sub ProcessByReference(ByRef data As LargeDataStructure)\n        Dim sum As Long = 0\n        For Each value In data.Data\n            sum += value\n        Next\n    End Sub\n\nEnd Module\n```"
  },
  {
    "task": "Implement a function that accepts an integer and doubles its value. Show the difference in the original variable when using pass-by-value versus pass-by-reference.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim originalValue As Integer = 10\n        Console.WriteLine(\"Original Value: \" & originalValue)\n\n        DoubleValueByVal(originalValue)\n        Console.WriteLine(\"After Pass-by-Value: \" & originalValue)\n\n        DoubleValueByRef(originalValue)\n        Console.WriteLine(\"After Pass-by-Reference: \" & originalValue)\n    End Sub\n\n    Sub DoubleValueByVal(ByVal num As Integer)\n        num *= 2\n    End Sub\n\n    Sub DoubleValueByRef(ByRef num As Integer)\n        num *= 2\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a function that takes a list and returns a new list with elements doubled. Ensure the original list remains unchanged.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim originalList As New List(Of Integer)({1, 2, 3, 4, 5})\n        Dim doubledList As List(Of Integer) = DoubleElements(originalList)\n        \n        ' Output the lists to verify results\n        Console.WriteLine(\"Original List: \" & String.Join(\", \", originalList))\n        Console.WriteLine(\"Doubled List: \" & String.Join(\", \", doubledList))\n    End Sub\n    \n    Function DoubleElements(ByVal inputList As List(Of Integer)) As List(Of Integer)\n        Dim newList As New List(Of Integer)\n        For Each item In inputList\n            newList.Add(item * 2)\n        Next\n        Return newList\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Design a function that takes a string argument and appends a character to it. Illustrate the result when the string is passed by value.",
    "code": "```vb\nModule Module1\n\n    Sub Main()\n        Dim originalString As String = \"Hello\"\n        Dim appendedString As String\n\n        appendedString = AppendCharacter(originalString, \"!\")\n        \n        Console.WriteLine(\"Original String: \" & originalString)\n        Console.WriteLine(\"Appended String: \" & appendedString)\n    End Sub\n\n    Function AppendCharacter(ByVal inputString As String, ByVal characterToAppend As String) As String\n        Return inputString & characterToAppend\n    End Function\n\nEnd Module\n```"
  },
  {
    "task": "Write a function that increments a counter variable. Pass the variable by reference to see changes in the original variable.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim counter As Integer = 5\n        IncrementCounter(counter)\n        Console.WriteLine(counter)\n    End Sub\n\n    Sub IncrementCounter(ByRef count As Integer)\n        count += 1\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a function that removes an item from a dictionary passed to it. Demonstrate how pass-by-reference affects the original dictionary.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim myDictionary As New Dictionary(Of String, Integer)\n        myDictionary.Add(\"Apple\", 1)\n        myDictionary.Add(\"Banana\", 2)\n        myDictionary.Add(\"Cherry\", 3)\n\n        Console.WriteLine(\"Before removal:\")\n        For Each kvp As KeyValuePair(Of String, Integer) In myDictionary\n            Console.WriteLine($\"{kvp.Key}: {kvp.Value}\")\n        Next\n\n        RemoveItem(myDictionary, \"Banana\")\n\n        Console.WriteLine(\"After removal:\")\n        For Each kvp As KeyValuePair(Of String, Integer) In myDictionary\n            Console.WriteLine($\"{kvp.Key}: {kvp.Value}\")\n        Next\n    End Sub\n\n    Sub RemoveItem(ByRef dict As Dictionary(Of String, Integer), ByVal key As String)\n        If dict.ContainsKey(key) Then\n            dict.Remove(key)\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a program that passes a matrix to a function, which transposes it. Explain how the transposition affects the original matrix with pass-by-reference.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim matrix(,) As Integer = {{1, 2, 3}, {4, 5, 6}}\n        Console.WriteLine(\"Original Matrix:\")\n        PrintMatrix(matrix)\n        \n        TransposeMatrix(matrix)\n        Console.WriteLine(\"Transposed Matrix:\")\n        PrintMatrix(matrix)\n    End Sub\n\n    Sub TransposeMatrix(ByRef mat(,) As Integer)\n        Dim rows As Integer = mat.GetLength(0)\n        Dim cols As Integer = mat.GetLength(1)\n        Dim temp(cols - 1, rows - 1) As Integer\n        \n        For i As Integer = 0 To rows - 1\n            For j As Integer = 0 To cols - 1\n                temp(j, i) = mat(i, j)\n            Next\n        Next\n        \n        ReDim mat(cols - 1, rows - 1)\n        Array.Copy(temp, mat, temp.Length)\n    End Sub\n\n    Sub PrintMatrix(ByVal mat(,) As Integer)\n        For i As Integer = 0 To mat.GetLength(0) - 1\n            For j As Integer = 0 To mat.GetLength(1) - 1\n                Console.Write(mat(i, j) & \" \")\n            Next\n            Console.WriteLine()\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a function that takes a float number and rounds it. Discuss the implications of passing the number by value.",
    "code": "```vb\nModule Program\n    Sub Main()\n        Dim num As Single = 12.3456\n        Console.WriteLine(\"Original Number: \" & num)\n        Dim rounded As Integer = RoundNumber(num)\n        Console.WriteLine(\"Rounded Number: \" & rounded)\n        Console.WriteLine(\"Number After Function Call: \" & num)\n    End Sub\n\n    Function RoundNumber(ByVal number As Single) As Integer\n        Return Math.Round(number)\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Design a function that accepts a dictionary and adds a key-value pair to it. Show the changes when the dictionary is passed by reference.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim myDictionary As New Dictionary(Of String, String)\n        myDictionary.Add(\"Key1\", \"Value1\")\n        Console.WriteLine(\"Before: \" & myDictionary.Count)\n        AddKeyValuePair(myDictionary, \"Key2\", \"Value2\")\n        Console.WriteLine(\"After: \" & myDictionary.Count)\n    End Sub\n\n    Sub AddKeyValuePair(ByRef dict As Dictionary(Of String, String), key As String, value As String)\n        dict.Add(key, value)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a program that passes a string to a function that converts it to uppercase. Explain how this affects the original string with pass-by-value.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim originalString As String = \"hello world\"\n        Dim upperString As String = ConvertToUpper(originalString)\n        Console.WriteLine(\"Original String: \" & originalString)\n        Console.WriteLine(\"Uppercase String: \" & upperString)\n    End Sub\n\n    Function ConvertToUpper(ByVal str As String) As String\n        Return str.ToUpper()\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Create a function that receives a tuple and attempts to modify one of its elements. Discuss the outcome of using pass-by-value.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim originalTuple As (Integer, String) = (1, \"Original\")\n        Console.WriteLine(\"Before modification: \" & originalTuple.ToString())\n        ModifyTuple(originalTuple)\n        Console.WriteLine(\"After modification: \" & originalTuple.ToString())\n    End Sub\n\n    Sub ModifyTuple(ByVal tuple As (Integer, String))\n        tuple.Item2 = \"Modified\"\n        Console.WriteLine(\"Inside ModifyTuple: \" & tuple.ToString())\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a function that accepts an object and modifies one of its attributes. Illustrate how pass-by-reference alters the original object.",
    "code": "```vb\nClass MyObject\n    Public Property Attribute As Integer\nEnd Class\n\nModule Program\n    Sub Main()\n        Dim obj As New MyObject()\n        obj.Attribute = 10\n        Console.WriteLine(\"Before modification: \" & obj.Attribute)\n        ModifyObject(obj)\n        Console.WriteLine(\"After modification: \" & obj.Attribute)\n    End Sub\n\n    Sub ModifyObject(ByRef obj As MyObject)\n        obj.Attribute = 20\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a function that outputs the sum of all elements in an array passed by value. Confirm the original array remains unchanged.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers() As Integer = {1, 2, 3, 4, 5}\n        Dim total As Integer\n\n        total = SumArray(numbers)\n        Console.WriteLine(\"Sum: \" & total)\n        Console.WriteLine(\"Original Array: \" & String.Join(\", \", numbers))\n    End Sub\n\n    Function SumArray(ByVal arr() As Integer) As Integer\n        Dim sum As Integer = 0\n        For Each num As Integer In arr\n            sum += num\n        Next\n        Return sum\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Write a function that takes a boolean flag and toggles its value. Demonstrate the effect of pass-by-reference on the original flag.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim flag As Boolean = True\n        Console.WriteLine(\"Original flag: \" & flag)\n        ToggleFlag(flag)\n        Console.WriteLine(\"Toggled flag: \" & flag)\n    End Sub\n\n    Sub ToggleFlag(ByRef flag As Boolean)\n        flag = Not flag\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a function that takes an object and clones it. Modify the clone and show that the original object remains unaffected.",
    "code": "```vb\nModule Program\n    Sub Main()\n        Dim original As New SampleObject With {.Value = 10}\n        Dim clone As SampleObject = CloneAndModify(original)\n\n        Console.WriteLine(\"Original Value: \" & original.Value)\n        Console.WriteLine(\"Clone Value: \" & clone.Value)\n    End Sub\n\n    Function CloneAndModify(ByVal obj As SampleObject) As SampleObject\n        Dim clonedObj As New SampleObject With {.Value = obj.Value}\n        clonedObj.Value += 5\n        Return clonedObj\n    End Function\n\n    Class SampleObject\n        Public Property Value As Integer\n    End Class\nEnd Module\n```"
  },
  {
    "task": "Implement a function that accepts a list of integers and removes all even numbers. Describe the difference in behavior when using pass-by-value and pass-by-reference.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers As List(Of Integer) = New List(Of Integer) From {1, 2, 3, 4, 5, 6}\n        \n        Console.WriteLine(\"Original list:\")\n        For Each number In numbers\n            Console.Write(number & \" \")\n        Next\n        Console.WriteLine()\n\n        RemoveEvensByValue(numbers)\n        Console.WriteLine(\"After RemoveEvensByValue:\")\n        For Each number In numbers\n            Console.Write(number & \" \")\n        Next\n        Console.WriteLine()\n\n        RemoveEvensByReference(numbers)\n        Console.WriteLine(\"After RemoveEvensByReference:\")\n        For Each number In numbers\n            Console.Write(number & \" \")\n        Next\n        Console.WriteLine()\n    End Sub\n\n    Sub RemoveEvensByValue(ByVal numbers As List(Of Integer))\n        numbers = numbers.Where(Function(x) x Mod 2 <> 0).ToList()\n    End Sub\n\n    Sub RemoveEvensByReference(ByRef numbers As List(Of Integer))\n        numbers = numbers.Where(Function(x) x Mod 2 <> 0).ToList()\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a function that takes a complex number and returns its conjugate. Explain how pass-by-value affects the original complex number.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim originalComplex As New ComplexNumber(3, 4)\n        Dim conjugateComplex As ComplexNumber\n\n        conjugateComplex = GetConjugate(originalComplex)\n\n        Console.WriteLine(\"Original Complex: \" & originalComplex.ToString())\n        Console.WriteLine(\"Conjugate Complex: \" & conjugateComplex.ToString())\n    End Sub\n\n    Function GetConjugate(ByVal complex As ComplexNumber) As ComplexNumber\n        Return New ComplexNumber(complex.RealPart, -complex.ImaginaryPart)\n    End Function\nEnd Module\n\nPublic Class ComplexNumber\n    Public Property RealPart As Double\n    Public Property ImaginaryPart As Double\n\n    Public Sub New(real As Double, imaginary As Double)\n        Me.RealPart = real\n        Me.ImaginaryPart = imaginary\n    End Sub\n\n    Public Overrides Function ToString() As String\n        Return String.Format(\"{0} + {1}i\", RealPart, ImaginaryPart)\n    End Function\nEnd Class\n```"
  },
  {
    "task": "Design a program where a function receives a binary tree and inverts it. Discuss how pass-by-reference impacts the original tree structure.",
    "code": "```vb\nModule Module1\n\n    Sub Main()\n        Dim root As New TreeNode(1)\n        root.Left = New TreeNode(2)\n        root.Right = New TreeNode(3)\n        root.Left.Left = New TreeNode(4)\n        root.Left.Right = New TreeNode(5)\n        \n        InvertTree(root)\n        \n        ' The original tree structure is now inverted.\n    End Sub\n\n    Public Sub InvertTree(ByRef node As TreeNode)\n        If node Is Nothing Then\n            Return\n        End If\n\n        Dim temp As TreeNode = node.Left\n        node.Left = node.Right\n        node.Right = temp\n\n        InvertTree(node.Left)\n        InvertTree(node.Right)\n    End Sub\n\n    Public Class TreeNode\n        Public Property Value As Integer\n        Public Property Left As TreeNode\n        Public Property Right As TreeNode\n\n        Public Sub New(ByVal value As Integer)\n            Me.Value = value\n            Me.Left = Nothing\n            Me.Right = Nothing\n        End Sub\n    End Class\n\nEnd Module\n```"
  },
  {
    "task": "Write a function that adds an element to a set passed to it. Show how pass-by-reference affects the original set.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers As New HashSet(Of Integer) From {1, 2, 3}\n        Console.WriteLine(\"Original Set: \" & String.Join(\", \", numbers))\n        AddElement(numbers, 4)\n        Console.WriteLine(\"Modified Set: \" & String.Join(\", \", numbers))\n    End Sub\n\n    Sub AddElement(ByRef set As HashSet(Of Integer), element As Integer)\n        set.Add(element)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a function that accepts an integer array and sorts it. Demonstrate the difference when the array is passed by value.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim arr() As Integer = {5, 3, 8, 1, 4}\n        Console.WriteLine(\"Original array:\")\n        PrintArray(arr)\n\n        SortArrayByValue(arr)\n\n        Console.WriteLine(\"Array after passing by value:\")\n        PrintArray(arr)\n    End Sub\n\n    ' Function to sort an array passed by value\n    Sub SortArrayByValue(ByVal array() As Integer)\n        Array.Sort(array)\n    End Sub\n\n    ' Function to print the elements of an array\n    Sub PrintArray(ByVal array() As Integer)\n        For Each num As Integer In array\n            Console.Write(num & \" \")\n        Next\n        Console.WriteLine()\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a function that takes a configuration object and toggles a setting. Illustrate the changes with pass-by-reference.",
    "code": "```vb\nModule Module1\n\n    Class Config\n        Public Property Setting As Boolean\n    End Class\n\n    Sub ToggleSetting(ByRef config As Config)\n        config.Setting = Not config.Setting\n    End Sub\n\n    Sub Main()\n        Dim myConfig As New Config()\n        myConfig.Setting = False\n        Console.WriteLine(\"Initial Setting: \" & myConfig.Setting)\n        ToggleSetting(myConfig)\n        Console.WriteLine(\"Toggled Setting: \" & myConfig.Setting)\n    End Sub\n\nEnd Module\n```"
  },
  {
    "task": "Design a function that receives a file path and reads its content. Explain how passing the path by value affects the outcome.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim filePath As String = \"example.txt\"\n        Console.WriteLine(ReadFileContent(filePath))\n    End Sub\n\n    Function ReadFileContent(ByVal path As String) As String\n        Dim content As String = \"\"\n        If IO.File.Exists(path) Then\n            content = IO.File.ReadAllText(path)\n        Else\n            content = \"File not found.\"\n        End If\n        Return content\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Write a program in which a function takes a stack and reverses its elements. Discuss the impact of pass-by-reference on the stack.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim stack As New Stack(Of Integer)\n        stack.Push(1)\n        stack.Push(2)\n        stack.Push(3)\n        Console.WriteLine(\"Original Stack:\")\n        PrintStack(stack)\n        ReverseStack(stack)\n        Console.WriteLine(\"Reversed Stack:\")\n        PrintStack(stack)\n    End Sub\n\n    Sub ReverseStack(ByRef stack As Stack(Of Integer))\n        Dim tempStack As New Stack(Of Integer)\n        While stack.Count > 0\n            tempStack.Push(stack.Pop())\n        End While\n        stack = tempStack\n    End Sub\n\n    Sub PrintStack(stack As Stack(Of Integer))\n        For Each item In stack\n            Console.WriteLine(item)\n        Next\n        Console.WriteLine()\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a function that takes a queue and dequeues an element. Show the result when the queue is passed by reference.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim queue As New Queue(Of Integer)\n        queue.Enqueue(1)\n        queue.Enqueue(2)\n        queue.Enqueue(3)\n\n        Console.WriteLine(\"Queue before dequeue:\")\n        For Each item In queue\n            Console.WriteLine(item)\n        Next\n\n        DequeueElement(queue)\n\n        Console.WriteLine(\"Queue after dequeue:\")\n        For Each item In queue\n            Console.WriteLine(item)\n        Next\n    End Sub\n\n    Sub DequeueElement(ByRef q As Queue(Of Integer))\n        If q.Count > 0 Then\n            q.Dequeue()\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a function that accepts a hashmap and updates a value for a specific key. Illustrate the effects of pass-by-reference.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim myDict As New Dictionary(Of String, String) From {\n            {\"Key1\", \"Value1\"},\n            {\"Key2\", \"Value2\"}\n        }\n\n        Console.WriteLine(\"Before update: \" & myDict(\"Key1\"))\n        UpdateDictionary(myDict, \"Key1\", \"UpdatedValue1\")\n        Console.WriteLine(\"After update: \" & myDict(\"Key1\"))\n    End Sub\n\n    Sub UpdateDictionary(ByRef dict As Dictionary(Of String, String), key As String, newValue As String)\n        If dict.ContainsKey(key) Then\n            dict(key) = newValue\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a function that receives a JSON object and adds a new property. Discuss the implications of modifying the object by reference.",
    "code": "```vb\nImports System.Web.Script.Serialization\n\nModule Module1\n    Sub Main()\n        Dim jsonString As String = \"{\"\"name\"\":\"\"John\"\", \"\"age\"\":30}\"\n        Dim jsonObj As Object = New JavaScriptSerializer().DeserializeObject(jsonString)\n        AddProperty(jsonObj, \"city\", \"New York\")\n        Dim updatedJsonString As String = New JavaScriptSerializer().Serialize(jsonObj)\n        Console.WriteLine(updatedJsonString)\n    End Sub\n\n    Sub AddProperty(ByRef jsonObj As Object, propertyName As String, propertyValue As Object)\n        jsonObj(propertyName) = propertyValue\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a program where a function accepts a graph and adds a node. Explain how pass-by-reference affects the original graph structure.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim graph As New Dictionary(Of String, List(Of String))()\n        graph(\"A\") = New List(Of String)() From {\"B\", \"C\"}\n        graph(\"B\") = New List(Of String)() From {\"A\"}\n        graph(\"C\") = New List(Of String)() From {\"A\"}\n\n        Console.WriteLine(\"Graph before adding node D:\")\n        PrintGraph(graph)\n\n        AddNode(graph, \"D\")\n\n        Console.WriteLine(\"Graph after adding node D:\")\n        PrintGraph(graph)\n    End Sub\n\n    Sub AddNode(ByRef g As Dictionary(Of String, List(Of String)), node As String)\n        If Not g.ContainsKey(node) Then\n            g(node) = New List(Of String)()\n        End If\n    End Sub\n\n    Sub PrintGraph(g As Dictionary(Of String, List(Of String)))\n        For Each key As String In g.Keys\n            Console.Write(key & \" -> \")\n            For Each value As String In g(key)\n                Console.Write(value & \" \")\n            Next\n            Console.WriteLine()\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a function that accepts a set of coordinates and shifts them. Demonstrate how pass-by-value ensures the original set is unchanged.",
    "code": "```vb\nModule Module1\n\n    Sub Main()\n        Dim x As Integer = 5\n        Dim y As Integer = 10\n\n        Console.WriteLine(\"Original Coordinates: x = \" & x & \", y = \" & y)\n\n        ShiftCoordinates(x, y, 3, 4)\n\n        Console.WriteLine(\"After Shift by Value: x = \" & x & \", y = \" & y)\n    End Sub\n\n    Sub ShiftCoordinates(ByVal x As Integer, ByVal y As Integer, ByVal offsetX As Integer, ByVal offsetY As Integer)\n        x += offsetX\n        y += offsetY\n        Console.WriteLine(\"Inside ShiftCoordinates: x = \" & x & \", y = \" & y)\n    End Sub\n\nEnd Module\n```"
  },
  {
    "task": "Implement a function that takes a date object and sets it to the next day. Discuss the effects of pass-by-reference on the date object.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim today As Date = #10/20/2023#\n        Console.WriteLine(\"Original Date: \" & today.ToShortDateString())\n        IncrementDay(today)\n        Console.WriteLine(\"Next Day: \" & today.ToShortDateString())\n    End Sub\n\n    Sub IncrementDay(ByRef dateObj As Date)\n        dateObj = dateObj.AddDays(1)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a function that receives a polynomial represented as a list of coefficients and differentiates it. Show how the original list remains unchanged with pass-by-value.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim originalCoefficients As List(Of Integer) = New List(Of Integer)({3, 2, 1}) ' Represents 3x^2 + 2x + 1\n        Dim differentiatedCoefficients As List(Of Integer) = DifferentiatePolynomial(originalCoefficients)\n        \n        Console.WriteLine(\"Original Coefficients:\")\n        For Each coeff In originalCoefficients\n            Console.Write(coeff & \" \")\n        Next\n        Console.WriteLine()\n        \n        Console.WriteLine(\"Differentiated Coefficients:\")\n        For Each coeff In differentiatedCoefficients\n            Console.Write(coeff & \" \")\n        Next\n        Console.WriteLine()\n    End Sub\n\n    Function DifferentiatePolynomial(coefficients As List(Of Integer)) As List(Of Integer)\n        Dim differentiated As New List(Of Integer)\n        For i As Integer = 1 To coefficients.Count - 1\n            differentiated.Add(coefficients(i) * i)\n        Next\n        Return differentiated\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Design a function that accepts a stack and clears it. Explain how pass-by-reference affects the original stack.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim myStack As New Stack(Of Integer)\n        myStack.Push(1)\n        myStack.Push(2)\n        myStack.Push(3)\n        \n        ClearStack(myStack)\n        \n        Console.WriteLine(\"Stack count after clearing: \" & myStack.Count)\n    End Sub\n    \n    Sub ClearStack(ByRef stack As Stack(Of Integer))\n        stack.Clear()\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function that takes a linked list and appends a new node. Demonstrate the impact of pass-by-reference on the list.",
    "code": "```vb\nModule Module1\n\n    Class Node\n        Public Property Data As Integer\n        Public Property NextNode As Node\n\n        Public Sub New(ByVal data As Integer)\n            Me.Data = data\n            Me.NextNode = Nothing\n        End Sub\n    End Class\n\n    Sub Main()\n        Dim head As Node = New Node(1)\n        head.NextNode = New Node(2)\n\n        Console.WriteLine(\"Before appending:\")\n        PrintList(head)\n\n        AppendNode(head, New Node(3))\n\n        Console.WriteLine(\"After appending:\")\n        PrintList(head)\n    End Sub\n\n    Sub AppendNode(ByRef list As Node, ByVal newNode As Node)\n        Dim current As Node = list\n        While current.NextNode IsNot Nothing\n            current = current.NextNode\n        End While\n        current.NextNode = newNode\n    End Sub\n\n    Sub PrintList(ByVal node As Node)\n        While node IsNot Nothing\n            Console.Write(node.Data & \" \")\n            node = node.NextNode\n        End While\n        Console.WriteLine()\n    End Sub\n\nEnd Module\n```"
  },
  {
    "task": "Create a function that receives a URL and extracts the domain name. Discuss the effects of pass-by-value on the URL string.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim url As String = \"http://www.example.com/path\"\n        Dim domain As String = ExtractDomain(url)\n        Console.WriteLine(\"Domain: \" & domain)\n        Console.WriteLine(\"Original URL: \" & url)\n    End Sub\n\n    Function ExtractDomain(ByVal url As String) As String\n        Dim uri As New Uri(url)\n        Return uri.Host\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Implement a function that takes a priority queue and changes the priority of an element. Illustrate the effects using pass-by-reference.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim pq As New PriorityQueue(Of String, Integer)\n        pq.Enqueue(\"Task1\", 1)\n        pq.Enqueue(\"Task2\", 2)\n        pq.Enqueue(\"Task3\", 3)\n\n        Console.WriteLine(\"Before change:\")\n        PrintPriorityQueue(pq)\n\n        ChangePriority(pq, \"Task2\", 5)\n\n        Console.WriteLine(\"After change:\")\n        PrintPriorityQueue(pq)\n    End Sub\n\n    Sub ChangePriority(ByRef pq As PriorityQueue(Of String, Integer), element As String, newPriority As Integer)\n        Dim tempQueue As New PriorityQueue(Of String, Integer)\n        Dim found As Boolean = False\n\n        While pq.Count > 0\n            Dim item = pq.Dequeue()\n            If item.Equals(element) AndAlso Not found Then\n                tempQueue.Enqueue(item, newPriority)\n                found = True\n            Else\n                tempQueue.Enqueue(item, pq.PeekPriority())\n            End If\n        End While\n\n        pq = tempQueue\n    End Sub\n\n    Sub PrintPriorityQueue(ByRef pq As PriorityQueue(Of String, Integer))\n        Dim tempQueue As New PriorityQueue(Of String, Integer)\n\n        While pq.Count > 0\n            Dim item = pq.Dequeue()\n            Console.WriteLine(item & \" - Priority: \" & pq.PeekPriority())\n            tempQueue.Enqueue(item, pq.PeekPriority())\n        End While\n\n        pq = tempQueue\n    End Sub\nEnd Module\n\nPublic Class PriorityQueue(Of T, P As IComparable)\n    Private ReadOnly elements As New List(Of KeyValuePair(Of T, P))\n\n    Public Sub Enqueue(item As T, priority As P)\n        elements.Add(New KeyValuePair(Of T, P)(item, priority))\n    End Sub\n\n    Public Function Dequeue() As T\n        Dim bestIndex As Integer = 0\n        For i As Integer = 1 To elements.Count - 1\n            If elements(i).Value.CompareTo(elements(bestIndex).Value) < 0 Then\n                bestIndex = i\n            End If\n        Next\n        Dim bestItem As T = elements(bestIndex).Key\n        elements.RemoveAt(bestIndex)\n        Return bestItem\n    End Function\n\n    Public Function PeekPriority() As P\n        Dim bestIndex As Integer = 0\n        For i As Integer = 1 To elements.Count - 1\n            If elements(i).Value.CompareTo(elements(bestIndex).Value) < 0 Then\n                bestIndex = i\n            End If\n        Next\n        Return elements(bestIndex).Value\n    End Function\n\n    Public ReadOnly Property Count As Integer\n        Get\n            Return elements.Count\n        End Get\n    End Property\nEnd Class\n```"
  },
  {
    "task": "Develop a function that accepts a circular buffer and reads an element. Explain how pass-by-reference influences the buffer.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim circularBuffer As Queue(Of Integer) = New Queue(Of Integer)()\n        circularBuffer.Enqueue(1)\n        circularBuffer.Enqueue(2)\n        circularBuffer.Enqueue(3)\n\n        Dim element As Integer = ReadElement(circularBuffer)\n        Console.WriteLine(\"Element read: \" & element)\n        Console.WriteLine(\"Buffer count after read: \" & circularBuffer.Count)\n    End Sub\n\n    Function ReadElement(ByRef buffer As Queue(Of Integer)) As Integer\n        If buffer.Count > 0 Then\n            Return buffer.Dequeue()\n        Else\n            Throw New InvalidOperationException(\"Buffer is empty.\")\n        End If\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Design a program where a function receives a record and updates a field. Show how pass-by-reference affects the original record.",
    "code": "```vb\nModule Module1\n\n    Structure Person\n        Dim Name As String\n        Dim Age As Integer\n    End Structure\n\n    Sub UpdateAge(ByRef p As Person, ByVal newAge As Integer)\n        p.Age = newAge\n    End Sub\n\n    Sub Main()\n        Dim person1 As Person\n        person1.Name = \"John\"\n        person1.Age = 30\n\n        Console.WriteLine(\"Before update: \" & person1.Name & \" is \" & person1.Age & \" years old.\")\n\n        UpdateAge(person1, 35)\n\n        Console.WriteLine(\"After update: \" & person1.Name & \" is \" & person1.Age & \" years old.\")\n    End Sub\n\nEnd Module\n```"
  },
  {
    "task": "Write a function that takes a frequency list and normalizes it. Describe how pass-by-value ensures the original list remains unchanged.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim frequencies As List(Of Double) = New List(Of Double)({10.0, 30.0, 20.0, 40.0})\n        Dim normalizedFrequencies As List(Of Double) = NormalizeFrequencies(frequencies)\n\n        For Each value As Double In normalizedFrequencies\n            Console.WriteLine(value)\n        Next\n    End Sub\n\n    Function NormalizeFrequencies(ByVal freqList As List(Of Double)) As List(Of Double)\n        Dim total As Double = freqList.Sum()\n        Dim normalized As New List(Of Double)\n\n        For Each freq As Double In freqList\n            normalized.Add(freq / total)\n        Next\n\n        Return normalized\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Create a function that accepts a chessboard and makes a move. Discuss how pass-by-reference alters the original board setup.",
    "code": "```vb\nModule ChessModule\n    Sub Main()\n        Dim chessboard(7, 7) As String\n        InitializeBoard(chessboard)\n        MakeMove(chessboard, 0, 1, 2, 2) ' Example move: from position (0,1) to (2,2)\n        DisplayBoard(chessboard)\n    End Sub\n\n    Sub InitializeBoard(ByRef board(,) As String)\n        ' Example initialization with only a few pieces\n        board(0, 0) = \"R\" ' Rook\n        board(0, 1) = \"N\" ' Knight\n        board(0, 2) = \"B\" ' Bishop\n        ' ... Initialize other pieces as needed\n    End Sub\n\n    Sub MakeMove(ByRef board(,) As String, fromRow As Integer, fromCol As Integer, toRow As Integer, toCol As Integer)\n        board(toRow, toCol) = board(fromRow, fromCol)\n        board(fromRow, fromCol) = Nothing\n    End Sub\n\n    Sub DisplayBoard(ByRef board(,) As String)\n        For i As Integer = 0 To 7\n            For j As Integer = 0 To 7\n                Console.Write(If(board(i, j) Is Nothing, \".\", board(i, j)) & \" \")\n            Next\n            Console.WriteLine()\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a function that takes a decimal number and converts it to binary. Explain the effects of pass-by-value on the original number.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim number As Decimal = 10\n        Console.WriteLine(\"Original number: \" & number)\n        Console.WriteLine(\"Binary representation: \" & DecimalToBinary(number))\n        Console.WriteLine(\"After function call, original number: \" & number)\n    End Sub\n\n    Function DecimalToBinary(ByVal num As Decimal) As String\n        Dim binary As String = \"\"\n        Do While num >= 1\n            binary = (num Mod 2) & binary\n            num = Math.Floor(num / 2)\n        Loop\n        Return binary\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Develop a function that receives a DNA sequence and counts nucleotides. Illustrate how pass-by-value ensures the original sequence remains intact.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim dnaSequence As String = \"AGCTAGCCTA\"\n        Dim countA, countC, countG, countT As Integer\n\n        CountNucleotides(dnaSequence, countA, countC, countG, countT)\n\n        Console.WriteLine(\"A: \" & countA)\n        Console.WriteLine(\"C: \" & countC)\n        Console.WriteLine(\"G: \" & countG)\n        Console.WriteLine(\"T: \" & countT)\n        Console.WriteLine(\"Original DNA Sequence: \" & dnaSequence)\n    End Sub\n\n    Sub CountNucleotides(ByVal sequence As String, ByRef countA As Integer, ByRef countC As Integer, ByRef countG As Integer, ByRef countT As Integer)\n        countA = 0\n        countC = 0\n        countG = 0\n        countT = 0\n\n        For Each nucleotide As Char In sequence\n            Select Case nucleotide\n                Case \"A\"\n                    countA += 1\n                Case \"C\"\n                    countC += 1\n                Case \"G\"\n                    countG += 1\n                Case \"T\"\n                    countT += 1\n            End Select\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a function that accepts a shopping cart object and applies a discount. Show the changes with pass-by-reference.",
    "code": "```vb\nModule ShoppingCartModule\n    Sub Main()\n        Dim cart As New ShoppingCart With {.TotalAmount = 100.0}\n        Console.WriteLine(\"Original Total: \" & cart.TotalAmount)\n        ApplyDiscount(cart)\n        Console.WriteLine(\"Discounted Total: \" & cart.TotalAmount)\n    End Sub\n\n    Sub ApplyDiscount(ByRef cart As ShoppingCart)\n        Dim discountRate As Double = 0.1\n        cart.TotalAmount -= cart.TotalAmount * discountRate\n    End Sub\nEnd Module\n\nPublic Class ShoppingCart\n    Public Property TotalAmount As Double\nEnd Class\n```"
  },
  {
    "task": "Write a program where a function receives a playlist and adds a song. Discuss how pass-by-reference affects the original playlist.",
    "code": "```vb\nModule PlaylistModule\n    Sub Main()\n        Dim playlist As New List(Of String) From {\"Song1\", \"Song2\", \"Song3\"}\n        AddSong(playlist, \"NewSong\")\n        \n        For Each song As String In playlist\n            Console.WriteLine(song)\n        Next\n    End Sub\n\n    Sub AddSong(ByRef playlist As List(Of String), song As String)\n        playlist.Add(song)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a function that takes a sprite in a game and moves it. Demonstrate the result when the sprite is passed by reference.",
    "code": "```vb\nModule SpriteMover\n    Sub Main()\n        Dim mySprite As New Sprite With {.X = 10, .Y = 20}\n        Console.WriteLine(\"Original Position: X={0}, Y={1}\", mySprite.X, mySprite.Y)\n        \n        MoveSprite(mySprite, 5, 7)\n        \n        Console.WriteLine(\"New Position: X={0}, Y={1}\", mySprite.X, mySprite.Y)\n    End Sub\n\n    Sub MoveSprite(ByRef sprite As Sprite, ByVal deltaX As Integer, ByVal deltaY As Integer)\n        sprite.X += deltaX\n        sprite.Y += deltaY\n    End Sub\n\n    Class Sprite\n        Public Property X As Integer\n        Public Property Y As Integer\n    End Class\nEnd Module\n```"
  },
  {
    "task": "Implement a function that accepts a book object and updates the title. Illustrate the impact of pass-by-reference on the original object.",
    "code": "```vb\nModule Module1\n    Class Book\n        Public Title As String\n    End Class\n\n    Sub UpdateBookTitle(ByRef book As Book, ByVal newTitle As String)\n        book.Title = newTitle\n    End Sub\n\n    Sub Main()\n        Dim myBook As New Book()\n        myBook.Title = \"Original Title\"\n        UpdateBookTitle(myBook, \"Updated Title\")\n        Console.WriteLine(myBook.Title)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a function that receives a sound wave and normalizes it. Explain how pass-by-value affects the original sound wave.",
    "code": "```vb\nModule SoundModule\n    Sub Main()\n        ' Example usage\n        Dim originalWave() As Double = {0.5, 1.5, -2.0, 4.0}\n        Dim normalizedWave() As Double\n\n        normalizedWave = NormalizeSoundWave(originalWave)\n\n        ' Display the normalized wave\n        For Each value In normalizedWave\n            Console.WriteLine(value)\n        Next\n\n        ' Display the original wave to show it is unchanged\n        For Each value In originalWave\n            Console.WriteLine(value)\n        Next\n    End Sub\n\n    Function NormalizeSoundWave(ByVal wave() As Double) As Double()\n        Dim maxAmplitude As Double = wave.Max()\n        Dim normalized(wave.Length - 1) As Double\n\n        For i As Integer = 0 To wave.Length - 1\n            normalized(i) = wave(i) / maxAmplitude\n        Next\n\n        Return normalized\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Design a program where a function receives a bank account object and credits an amount. Discuss the effects of pass-by-reference.",
    "code": "```vb\nModule BankModule\n\n    Class BankAccount\n        Public Property Balance As Decimal\n\n        Public Sub New(initialBalance As Decimal)\n            Balance = initialBalance\n        End Sub\n    End Class\n\n    Sub Main()\n        Dim myAccount As New BankAccount(1000D)\n        Console.WriteLine(\"Initial Balance: \" & myAccount.Balance)\n\n        CreditAmount(myAccount, 200D)\n        Console.WriteLine(\"Balance after credit: \" & myAccount.Balance)\n    End Sub\n\n    Sub CreditAmount(ByRef account As BankAccount, ByVal amount As Decimal)\n        account.Balance += amount\n    End Sub\n\nEnd Module\n```"
  },
  {
    "task": "Write a function that takes an email list and filters out invalid addresses. Show the difference in the list when using pass-by-value.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim emails As New List(Of String) From {\n            \"valid@example.com\",\n            \"invalid-email.com\",\n            \"another.valid@example.com\",\n            \"still.invalid@com\"\n        }\n\n        Console.WriteLine(\"Original List:\")\n        For Each email In emails\n            Console.WriteLine(email)\n        Next\n\n        FilterInvalidEmailsByValue(emails)\n\n        Console.WriteLine(vbCrLf & \"List after Pass-by-Value:\")\n        For Each email In emails\n            Console.WriteLine(email)\n        Next\n    End Sub\n\n    Sub FilterInvalidEmailsByValue(ByVal emailList As List(Of String))\n        Dim validEmails As New List(Of String)\n\n        For Each email In emailList\n            If email.Contains(\"@\") AndAlso email.Contains(\".\") Then\n                validEmails.Add(email)\n            End If\n        Next\n\n        emailList = validEmails\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a function that accepts a 3D model and scales it. Demonstrate how pass-by-reference affects the original model.",
    "code": "```vb\nModule Module1\n\n    Sub Main()\n        Dim myModel As New Model With {.Width = 2, .Height = 3, .Depth = 4}\n        Console.WriteLine(\"Original Model Size: {0}, {1}, {2}\", myModel.Width, myModel.Height, myModel.Depth)\n        \n        ScaleModel(myModel, 2)\n        \n        Console.WriteLine(\"Scaled Model Size: {0}, {1}, {2}\", myModel.Width, myModel.Height, myModel.Depth)\n    End Sub\n\n    Sub ScaleModel(ByRef model As Model, factor As Double)\n        model.Width *= factor\n        model.Height *= factor\n        model.Depth *= factor\n    End Sub\n\n    Class Model\n        Public Property Width As Double\n        Public Property Height As Double\n        Public Property Depth As Double\n    End Class\n\nEnd Module\n```"
  },
  {
    "task": "Implement a function that receives a text document and redacts sensitive information. Explain the impact of pass-by-reference.",
    "code": "```vb\nModule RedactModule\n    Sub Main()\n        Dim document As String = \"This is a confidential document. SSN: 123-45-6789.\"\n        Console.WriteLine(\"Original Document: \" & document)\n        RedactSensitiveInformation(document)\n        Console.WriteLine(\"Redacted Document: \" & document)\n    End Sub\n\n    Sub RedactSensitiveInformation(ByRef textDocument As String)\n        Dim sensitivePattern As String = \"\\d{3}-\\d{2}-\\d{4}\"\n        textDocument = System.Text.RegularExpressions.Regex.Replace(textDocument, sensitivePattern, \"REDACTED\")\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a function that takes a temperature reading and adjusts for calibration. Discuss how pass-by-value ensures the original reading is unchanged.",
    "code": "```vb\nModule Module1\n\n    Sub Main()\n        Dim originalReading As Double = 25.0\n        Dim calibratedReading As Double\n\n        calibratedReading = AdjustForCalibration(originalReading)\n\n        Console.WriteLine(\"Original Reading: \" & originalReading)\n        Console.WriteLine(\"Calibrated Reading: \" & calibratedReading)\n    End Sub\n\n    Function AdjustForCalibration(ByVal temperature As Double) As Double\n        Dim calibrationFactor As Double = 1.05\n        Return temperature * calibrationFactor\n    End Function\n\nEnd Module\n```"
  },
  {
    "task": "Design a function that accepts a bug report and updates its status. Show the changes with pass-by-reference.",
    "code": "```vb\nModule BugReportModule\n    Sub Main()\n        Dim bugReport As New BugReport With {.Status = \"Open\"}\n        Console.WriteLine(\"Before update: \" & bugReport.Status)\n        UpdateBugReportStatus(bugReport, \"Resolved\")\n        Console.WriteLine(\"After update: \" & bugReport.Status)\n    End Sub\n\n    Public Structure BugReport\n        Public Status As String\n    End Structure\n\n    Sub UpdateBugReportStatus(ByRef report As BugReport, ByVal newStatus As String)\n        report.Status = newStatus\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a program where a function receives a sensor array and calibrates it. Demonstrate the effect of pass-by-reference on the array.",
    "code": "```vb\nModule SensorCalibration\n\n    Sub Main()\n        Dim sensorData() As Integer = {10, 20, 30, 40, 50}\n        CalibrateSensorData(sensorData)\n\n        ' Output the calibrated sensor data\n        For Each value As Integer In sensorData\n            Console.WriteLine(value)\n        Next\n    End Sub\n\n    Sub CalibrateSensorData(ByRef data() As Integer)\n        For i As Integer = 0 To data.Length - 1\n            data(i) += 5 ' Simple calibration logic\n        Next\n    End Sub\n\nEnd Module\n```"
  },
  {
    "task": "Create a function that takes a vector and rotates it. Explain how pass-by-value ensures the original vector remains unchanged.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim originalVector As Integer() = {1, 2, 3, 4, 5}\n        Dim rotatedVector As Integer() = RotateVector(originalVector)\n\n        Console.WriteLine(\"Original Vector: \" & String.Join(\", \", originalVector))\n        Console.WriteLine(\"Rotated Vector: \" & String.Join(\", \", rotatedVector))\n    End Sub\n\n    Function RotateVector(ByVal vector As Integer()) As Integer()\n        Dim newVector As Integer() = New Integer(vector.Length - 1) {}\n        Array.Copy(vector, 1, newVector, 0, vector.Length - 1)\n        newVector(vector.Length - 1) = vector(0)\n        Return newVector\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Implement a function that accepts an operation log and compresses it. Discuss the impact of pass-by-reference on the log.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim operationLog As New List(Of String) From {\"start\", \"process\", \"process\", \"end\"}\n        CompressLog(operationLog)\n        For Each entry In operationLog\n            Console.WriteLine(entry)\n        Next\n    End Sub\n\n    Sub CompressLog(ByRef log As List(Of String))\n        Dim compressedLog As New List(Of String)\n        Dim previous As String = Nothing\n\n        For Each entry In log\n            If entry <> previous Then\n                compressedLog.Add(entry)\n                previous = entry\n            End If\n        Next\n\n        log.Clear()\n        log.AddRange(compressedLog)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a function that receives a neural network model and updates its weights. Illustrate the effects of pass-by-reference.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim nnModel As New NeuralNetwork\n        nnModel.Weights = New Double() {0.5, 0.3, 0.8}\n\n        Console.WriteLine(\"Before update:\")\n        For Each weight In nnModel.Weights\n            Console.WriteLine(weight)\n        Next\n\n        UpdateWeights(nnModel)\n\n        Console.WriteLine(\"After update:\")\n        For Each weight In nnModel.Weights\n            Console.WriteLine(weight)\n        Next\n    End Sub\n\n    Sub UpdateWeights(ByRef model As NeuralNetwork)\n        For i As Integer = 0 To model.Weights.Length - 1\n            model.Weights(i) += 0.1\n        Next\n    End Sub\n\n    Class NeuralNetwork\n        Public Property Weights As Double()\n    End Class\nEnd Module\n```"
  },
  {
    "task": "Design a function that accepts a command history and reverts the last command. Show the changes with pass-by-reference.",
    "code": "```vb\nModule Module1\n\n    Sub Main()\n        Dim commandHistory As New List(Of String) From {\"Open\", \"Edit\", \"Save\"}\n        Console.WriteLine(\"Before Revert:\")\n        For Each command In commandHistory\n            Console.WriteLine(command)\n        Next\n\n        RevertLastCommand(commandHistory)\n\n        Console.WriteLine(\"After Revert:\")\n        For Each command In commandHistory\n            Console.WriteLine(command)\n        Next\n    End Sub\n\n    Sub RevertLastCommand(ByRef history As List(Of String))\n        If history.Count > 0 Then\n            history.RemoveAt(history.Count - 1)\n        End If\n    End Sub\n\nEnd Module\n```"
  },
  {
    "task": "Write a function that takes a user profile and anonymizes it. Discuss how pass-by-reference affects the original profile.",
    "code": "```vb\nModule Module1\n\n    Sub Main()\n        Dim userProfile As New Dictionary(Of String, String) From {\n            {\"Name\", \"John Doe\"},\n            {\"Email\", \"john.doe@example.com\"},\n            {\"Phone\", \"123-456-7890\"}\n        }\n\n        Console.WriteLine(\"Before Anonymization:\")\n        DisplayProfile(userProfile)\n\n        AnonymizeProfile(userProfile)\n\n        Console.WriteLine(\"After Anonymization:\")\n        DisplayProfile(userProfile)\n    End Sub\n\n    Sub AnonymizeProfile(ByRef profile As Dictionary(Of String, String))\n        If profile.ContainsKey(\"Name\") Then\n            profile(\"Name\") = \"Anonymous\"\n        End If\n        If profile.ContainsKey(\"Email\") Then\n            profile(\"Email\") = \"anonymous@example.com\"\n        End If\n        If profile.ContainsKey(\"Phone\") Then\n            profile(\"Phone\") = \"000-000-0000\"\n        End If\n    End Sub\n\n    Sub DisplayProfile(ByVal profile As Dictionary(Of String, String))\n        For Each kvp As KeyValuePair(Of String, String) In profile\n            Console.WriteLine($\"{kvp.Key}: {kvp.Value}\")\n        Next\n    End Sub\n\nEnd Module\n```"
  },
  {
    "task": "Create a function that accepts a polynomial and evaluates it at a given point. Explain how pass-by-value ensures the polynomial remains unchanged.",
    "code": "```vb\nModule Module1\n    Function EvaluatePolynomial(ByVal polynomial() As Double, ByVal x As Double) As Double\n        Dim result As Double = 0\n        Dim power As Integer = 0\n        For i As Integer = 0 To polynomial.Length - 1\n            result += polynomial(i) * Math.Pow(x, power)\n            power += 1\n        Next\n        Return result\n    End Function\n\n    Sub Main()\n        Dim poly() As Double = {3, 2, 1} ' Represents 3 + 2x + x^2\n        Dim xValue As Double = 5\n        Dim result As Double = EvaluatePolynomial(poly, xValue)\n        Console.WriteLine(\"Polynomial evaluated at x = \" & xValue & \" is \" & result)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a function that receives a video stream and applies a filter. Demonstrate the effects of pass-by-reference on the stream.",
    "code": "```vb\nModule VideoProcessor\n\n    Sub Main()\n        Dim videoStream As New VideoStream\n        Console.WriteLine(\"Original Video Stream Value: \" & videoStream.Value)\n        ApplyFilter(videoStream)\n        Console.WriteLine(\"Filtered Video Stream Value: \" & videoStream.Value)\n    End Sub\n\n    Sub ApplyFilter(ByRef stream As VideoStream)\n        ' Simulate applying a filter by modifying the stream's value\n        stream.Value = \"Filtered \" & stream.Value\n    End Sub\n\n    Class VideoStream\n        Public Property Value As String = \"Original Stream\"\n    End Class\n\nEnd Module\n```"
  },
  {
    "task": "Develop a function that takes a task queue and reorders tasks based on priority. Illustrate the impact of pass-by-reference.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim taskQueue As New List(Of Task)\n        taskQueue.Add(New Task(\"Task1\", 2))\n        taskQueue.Add(New Task(\"Task2\", 1))\n        taskQueue.Add(New Task(\"Task3\", 3))\n\n        Console.WriteLine(\"Before Reordering:\")\n        PrintTasks(taskQueue)\n\n        ReorderTasksByPriority(taskQueue)\n\n        Console.WriteLine(\"After Reordering:\")\n        PrintTasks(taskQueue)\n    End Sub\n\n    Sub ReorderTasksByPriority(ByRef tasks As List(Of Task))\n        tasks.Sort(Function(x, y) x.Priority.CompareTo(y.Priority))\n    End Sub\n\n    Sub PrintTasks(tasks As List(Of Task))\n        For Each task In tasks\n            Console.WriteLine(task.Name & \" - Priority: \" & task.Priority)\n        Next\n    End Sub\n\n    Class Task\n        Public Property Name As String\n        Public Property Priority As Integer\n\n        Public Sub New(ByVal name As String, ByVal priority As Integer)\n            Me.Name = name\n            Me.Priority = priority\n        End Sub\n    End Class\nEnd Module\n```"
  },
  {
    "task": "Design a program where a function receives a blockchain and verifies a transaction. Discuss how pass-by-reference affects the blockchain.",
    "code": "```vb\nModule BlockchainVerification\n    Sub Main()\n        Dim blockchain As New List(Of String) From {\"Transaction1\", \"Transaction2\", \"Transaction3\"}\n        Dim transactionToVerify As String = \"Transaction2\"\n        VerifyTransaction(blockchain, transactionToVerify)\n    End Sub\n\n    Sub VerifyTransaction(ByRef blockchain As List(Of String), ByVal transaction As String)\n        If blockchain.Contains(transaction) Then\n            Console.WriteLine(\"Transaction is verified.\")\n            ' Pass-by-reference allows modifications to the blockchain\n            blockchain.Remove(transaction)\n        Else\n            Console.WriteLine(\"Transaction not found.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function that takes a game leaderboard and updates scores. Show the changes with pass-by-reference.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim leaderboard As New Dictionary(Of String, Integer) From {\n            {\"Alice\", 100},\n            {\"Bob\", 150},\n            {\"Charlie\", 120}\n        }\n\n        UpdateScores(leaderboard)\n\n        For Each player In leaderboard\n            Console.WriteLine(player.Key & \": \" & player.Value)\n        Next\n    End Sub\n\n    Sub UpdateScores(ByRef leaderboard As Dictionary(Of String, Integer))\n        leaderboard(\"Alice\") += 20\n        leaderboard(\"Bob\") += 15\n        leaderboard(\"Charlie\") += 25\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a function that accepts a project timeline and adjusts for delays. Explain how pass-by-reference influences the timeline.",
    "code": "```vb\nModule Program\n    Sub Main()\n        Dim projectTimeline As Integer = 100\n        Console.WriteLine(\"Original Timeline: \" & projectTimeline)\n        AdjustForDelays(projectTimeline)\n        Console.WriteLine(\"Adjusted Timeline: \" & projectTimeline)\n    End Sub\n\n    Sub AdjustForDelays(ByRef timeline As Integer)\n        Dim delay As Integer = 15\n        timeline += delay\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a function that receives a to-do list and completes a task. Demonstrate the effect of pass-by-reference on the list.",
    "code": "```vb\nModule TodoListModule\n    Sub Main()\n        Dim todoList As New List(Of String) From {\"Task 1\", \"Task 2\", \"Task 3\"}\n        Console.WriteLine(\"Before completing a task:\")\n        DisplayTodoList(todoList)\n        \n        CompleteTask(todoList, 1)\n        \n        Console.WriteLine(\"After completing a task:\")\n        DisplayTodoList(todoList)\n    End Sub\n\n    Sub CompleteTask(ByRef todoList As List(Of String), ByVal taskIndex As Integer)\n        If taskIndex >= 0 AndAlso taskIndex < todoList.Count Then\n            todoList.RemoveAt(taskIndex)\n        End If\n    End Sub\n\n    Sub DisplayTodoList(ByVal todoList As List(Of String))\n        For Each task As String In todoList\n            Console.WriteLine(task)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a function that takes a paint canvas and adds a layer. Discuss the impact of pass-by-reference on the canvas.",
    "code": "```vb\nModule Module1\n\n    Sub Main()\n        Dim myCanvas As New Canvas()\n        Console.WriteLine(\"Initial Canvas Layers: \" & myCanvas.Layers)\n        AddLayerByReference(myCanvas)\n        Console.WriteLine(\"Canvas Layers after adding by reference: \" & myCanvas.Layers)\n    End Sub\n\n    Sub AddLayerByReference(ByRef canvas As Canvas)\n        canvas.Layers += 1\n    End Sub\n\n    Public Class Canvas\n        Public Property Layers As Integer\n\n        Public Sub New()\n            Layers = 0\n        End Sub\n    End Class\n\nEnd Module\n```"
  },
  {
    "task": "Design a function that accepts a URL list and fetches content. Show the difference in the list when using pass-by-value.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim urls As New List(Of String) From {\n            \"http://example.com\",\n            \"http://example.org\"\n        }\n        FetchContent(urls)\n        Console.WriteLine(\"Original List:\")\n        For Each url As String In urls\n            Console.WriteLine(url)\n        Next\n    End Sub\n\n    Sub FetchContent(ByVal urlList As List(Of String))\n        urlList = New List(Of String) From {\n            \"http://modified.com\",\n            \"http://modified.org\"\n        }\n        Console.WriteLine(\"Modified List Inside Function:\")\n        For Each url As String In urlList\n            Console.WriteLine(url)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a program where a function receives a game board and resets it. Illustrate the effects of pass-by-reference.",
    "code": "```vb\nModule GameBoardModule\n\n    Sub Main()\n        Dim gameBoard(2, 2) As String\n\n        ' Initialize the game board with some values\n        gameBoard(0, 0) = \"X\"\n        gameBoard(0, 1) = \"O\"\n        gameBoard(0, 2) = \"X\"\n        gameBoard(1, 0) = \"O\"\n        gameBoard(1, 1) = \"X\"\n        gameBoard(1, 2) = \"O\"\n        gameBoard(2, 0) = \"X\"\n        gameBoard(2, 1) = \"O\"\n        gameBoard(2, 2) = \"X\"\n\n        ' Print the game board before reset\n        Console.WriteLine(\"Game board before reset:\")\n        PrintGameBoard(gameBoard)\n\n        ' Reset the game board\n        ResetBoard(gameBoard)\n\n        ' Print the game board after reset\n        Console.WriteLine(\"Game board after reset:\")\n        PrintGameBoard(gameBoard)\n    End Sub\n\n    Sub ResetBoard(ByRef board(,) As String)\n        For i As Integer = 0 To board.GetUpperBound(0)\n            For j As Integer = 0 To board.GetUpperBound(1)\n                board(i, j) = \"\"\n            Next\n        Next\n    End Sub\n\n    Sub PrintGameBoard(ByVal board(,) As String)\n        For i As Integer = 0 To board.GetUpperBound(0)\n            For j As Integer = 0 To board.GetUpperBound(1)\n                Console.Write(If(board(i, j) = \"\", \"-\", board(i, j)) & \" \")\n            Next\n            Console.WriteLine()\n        Next\n    End Sub\n\nEnd Module\n```"
  },
  {
    "task": "Create a function that takes a sound effect and increases its volume. Explain how pass-by-reference affects the original sound.",
    "code": "```vb\nModule SoundModule\n    Sub Main()\n        Dim sound As Integer = 5 ' Example sound level\n        IncreaseVolume(sound)\n        Console.WriteLine(\"New Sound Level: \" & sound)\n    End Sub\n\n    Sub IncreaseVolume(ByRef soundEffect As Integer)\n        soundEffect += 10\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a function that accepts a weather forecast and updates temperature predictions. Discuss the impact of pass-by-reference.",
    "code": "```vb\nModule WeatherForecast\n\n    Sub Main()\n        Dim forecast As New Dictionary(Of String, Integer) From {\n            {\"Monday\", 20},\n            {\"Tuesday\", 22},\n            {\"Wednesday\", 21}\n        }\n\n        Console.WriteLine(\"Before update:\")\n        PrintForecast(forecast)\n\n        UpdateTemperatureByRef(forecast)\n\n        Console.WriteLine(\"After update:\")\n        PrintForecast(forecast)\n    End Sub\n\n    Sub UpdateTemperatureByRef(ByRef forecast As Dictionary(Of String, Integer))\n        For Each day As String In forecast.Keys.ToList()\n            forecast(day) += 2\n        Next\n    End Sub\n\n    Sub PrintForecast(forecast As Dictionary(Of String, Integer))\n        For Each kvp As KeyValuePair(Of String, Integer) In forecast\n            Console.WriteLine($\"{kvp.Key}: {kvp.Value}\u00b0C\")\n        Next\n    End Sub\n\nEnd Module\n```"
  },
  {
    "task": "Develop a function that receives a system log and extracts error messages. Show how pass-by-value ensures the original log remains unchanged.",
    "code": "```vb\nModule LogProcessor\n    Sub Main()\n        Dim systemLog As String = \"INFO: System started. ERROR: File not found. INFO: Operation complete. ERROR: Disk full.\"\n        Dim errorMessages As String = ExtractErrorMessages(systemLog)\n        Console.WriteLine(\"Original Log: \" & systemLog)\n        Console.WriteLine(\"Extracted Errors: \" & errorMessages)\n    End Sub\n\n    Function ExtractErrorMessages(ByVal log As String) As String\n        Dim errors As New System.Text.StringBuilder()\n        Dim entries() As String = log.Split(New String() {\"INFO:\", \"ERROR:\"}, StringSplitOptions.None)\n\n        For Each entry As String In entries\n            If entry.Trim().StartsWith(\"File not found\") Or entry.Trim().StartsWith(\"Disk full\") Then\n                errors.Append(\"ERROR:\" & entry.Trim() & \" \")\n            End If\n        Next\n\n        Return errors.ToString().Trim()\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Design a function that accepts a data packet and encrypts it. Demonstrate the effect of pass-by-value on the packet.",
    "code": "```vb\nModule Module1\n\n    Sub Main()\n        Dim originalPacket As String = \"SensitiveData123\"\n        Console.WriteLine(\"Original Packet Before Encryption: \" & originalPacket)\n        EncryptPacket(originalPacket)\n        Console.WriteLine(\"Original Packet After Encryption: \" & originalPacket)\n        Console.ReadLine()\n    End Sub\n\n    Sub EncryptPacket(ByVal packet As String)\n        packet = Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(packet))\n        Console.WriteLine(\"Encrypted Packet Inside Function: \" & packet)\n    End Sub\n\nEnd Module\n```"
  },
  {
    "task": "Write a function that takes a website theme and applies a color change. Explain how pass-by-reference affects the original theme.",
    "code": "```vb\nModule Module1\n\n    Sub Main()\n        Dim theme As New Theme()\n        theme.Color = \"Blue\"\n\n        Console.WriteLine(\"Original Theme Color: \" & theme.Color)\n        ApplyColorChange(theme, \"Red\")\n        Console.WriteLine(\"Modified Theme Color: \" & theme.Color)\n\n        Console.ReadLine()\n    End Sub\n\n    Sub ApplyColorChange(ByRef theme As Theme, newColor As String)\n        theme.Color = newColor\n    End Sub\n\nEnd Module\n\nPublic Class Theme\n    Public Property Color As String\nEnd Class\n```"
  },
  {
    "task": "Create a function that accepts a digital signature and verifies it. Discuss the implications of pass-by-value on the signature.",
    "code": "```vb\nModule SignatureVerification\n    Sub Main()\n        Dim signature As String = \"example_signature\"\n        Dim isValid As Boolean = VerifySignature(signature)\n        Console.WriteLine(\"Signature is valid: \" & isValid)\n    End Sub\n\n    Function VerifySignature(ByVal digitalSignature As String) As Boolean\n        ' Simulate verification logic\n        If digitalSignature = \"example_signature\" Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Implement a function that receives a robot's path and optimizes it. Illustrate the effects of pass-by-reference on the path.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim path As List(Of String) = New List(Of String) From {\"N\", \"E\", \"E\", \"S\", \"S\", \"W\", \"N\", \"N\"}\n        OptimizePath(path)\n        For Each step As String In path\n            Console.WriteLine(step)\n        Next\n    End Sub\n\n    Sub OptimizePath(ByRef path As List(Of String))\n        Dim optimizedPath As New List(Of String)\n        Dim i As Integer = 0\n        While i < path.Count\n            If i < path.Count - 1 AndAlso ((path(i) = \"N\" And path(i + 1) = \"S\") Or (path(i) = \"S\" And path(i + 1) = \"N\") Or\n                                           (path(i) = \"E\" And path(i + 1) = \"W\") Or (path(i) = \"W\" And path(i + 1) = \"E\")) Then\n                i += 2\n            Else\n                optimizedPath.Add(path(i))\n                i += 1\n            End If\n        End While\n        path.Clear()\n        path.AddRange(optimizedPath)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a function that takes a music playlist and shuffles it. Demonstrate the impact of pass-by-reference on the playlist.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim playlist As New List(Of String) From {\"Song1\", \"Song2\", \"Song3\", \"Song4\", \"Song5\"}\n        Console.WriteLine(\"Original Playlist:\")\n        PrintPlaylist(playlist)\n\n        ShufflePlaylist(playlist)\n        Console.WriteLine(\"Shuffled Playlist:\")\n        PrintPlaylist(playlist)\n    End Sub\n\n    Sub ShufflePlaylist(ByRef playlist As List(Of String))\n        Dim rand As New Random()\n        For i As Integer = 0 To playlist.Count - 1\n            Dim j As Integer = rand.Next(i, playlist.Count)\n            Dim temp As String = playlist(i)\n            playlist(i) = playlist(j)\n            playlist(j) = temp\n        Next\n    End Sub\n\n    Sub PrintPlaylist(ByVal playlist As List(Of String))\n        For Each song As String In playlist\n            Console.WriteLine(song)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a program where a function receives a social media feed and removes duplicates. Show the changes with pass-by-reference.",
    "code": "```vb\nModule SocialMediaFeed\n\n    Sub Main()\n        Dim feed As List(Of String) = New List(Of String) From {\n            \"Post1\", \"Post2\", \"Post1\", \"Post3\", \"Post2\", \"Post4\"\n        }\n        Console.WriteLine(\"Original Feed:\")\n        For Each post In feed\n            Console.WriteLine(post)\n        Next\n\n        RemoveDuplicates(feed)\n\n        Console.WriteLine(vbCrLf & \"Feed After Removing Duplicates:\")\n        For Each post In feed\n            Console.WriteLine(post)\n        Next\n\n    End Sub\n\n    Sub RemoveDuplicates(ByRef feed As List(Of String))\n        Dim uniquePosts As HashSet(Of String) = New HashSet(Of String)(feed)\n        feed.Clear()\n        feed.AddRange(uniquePosts)\n    End Sub\n\nEnd Module\n```"
  },
  {
    "task": "Write a function that takes a coding challenge and adds test cases. Discuss the effects of pass-by-reference on the challenge.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim challenge As String = \"Sort an array of integers.\"\n        AddTestCases(challenge)\n        Console.WriteLine(challenge)\n    End Sub\n\n    Sub AddTestCases(ByRef codingChallenge As String)\n        codingChallenge &= \" Test Case 1: Input: [3, 1, 2] -> Output: [1, 2, 3].\"\n        codingChallenge &= \" Test Case 2: Input: [5, 4, 6] -> Output: [4, 5, 6].\"\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a function that accepts an animation sequence and reverses it. Explain how pass-by-value ensures the sequence remains unchanged.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim originalSequence As String = \"ABCDEF\"\n        Dim reversedSequence As String = ReverseAnimationSequence(originalSequence)\n        Console.WriteLine(\"Original Sequence: \" & originalSequence)\n        Console.WriteLine(\"Reversed Sequence: \" & reversedSequence)\n    End Sub\n\n    Function ReverseAnimationSequence(ByVal sequence As String) As String\n        Dim charArray() As Char = sequence.ToCharArray()\n        Array.Reverse(charArray)\n        Return New String(charArray)\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Implement a function that receives a GPS route and recalculates it. Illustrate the impact of pass-by-reference on the route.",
    "code": "```vb\nModule GPSModule\n\n    Sub Main()\n        Dim route As List(Of String) = New List(Of String) From {\"Start\", \"PointA\", \"PointB\", \"End\"}\n        Console.WriteLine(\"Original Route: \" & String.Join(\" -> \", route))\n        \n        RecalculateRoute(route)\n        \n        Console.WriteLine(\"Recalculated Route: \" & String.Join(\" -> \", route))\n    End Sub\n\n    Sub RecalculateRoute(ByRef route As List(Of String))\n        If route.Count > 2 Then\n            route.Insert(2, \"NewPoint\")\n        End If\n    End Sub\n\nEnd Module\n```"
  },
  {
    "task": "Develop a function that takes a chat history and censors inappropriate language. Show the effect of pass-by-reference on the history.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim chatHistory As List(Of String) = New List(Of String) From {\n            \"Hello, how are you?\",\n            \"I'm good, thanks!\",\n            \"This is inappropriate language!\",\n            \"See you later.\"\n        }\n\n        CensorInappropriateLanguage(chatHistory)\n\n        For Each message As String In chatHistory\n            Console.WriteLine(message)\n        Next\n    End Sub\n\n    Sub CensorInappropriateLanguage(ByRef history As List(Of String))\n        Dim inappropriateWords As List(Of String) = New List(Of String) From {\n            \"inappropriate\"\n        }\n\n        For i As Integer = 0 To history.Count - 1\n            For Each word As String In inappropriateWords\n                If history(i).Contains(word) Then\n                    history(i) = history(i).Replace(word, \"****\")\n                End If\n            Next\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a function that accepts a lighting setup and adjusts brightness. Discuss the changes when the setup is passed by reference.",
    "code": "```vb\nModule LightingModule\n\n    Sub Main()\n        Dim lightingSetup As Integer = 5\n        Console.WriteLine(\"Original Brightness: \" & lightingSetup)\n        AdjustBrightness(ByRef lightingSetup)\n        Console.WriteLine(\"Adjusted Brightness: \" & lightingSetup)\n    End Sub\n\n    Sub AdjustBrightness(ByRef setup As Integer)\n        setup += 10\n    End Sub\n\nEnd Module\n```"
  },
  {
    "task": "Write a program where a function receives a VR environment and changes the scenery. Demonstrate the effects of pass-by-reference.",
    "code": "```vb\nModule Module1\n\n    Sub Main()\n        Dim vrEnvironment As String = \"Beach\"\n        Console.WriteLine(\"Original Environment: \" & vrEnvironment)\n        ChangeScenery(ByRef vrEnvironment)\n        Console.WriteLine(\"Updated Environment: \" & vrEnvironment)\n    End Sub\n\n    Sub ChangeScenery(ByRef environment As String)\n        environment = \"Mountain\"\n    End Sub\n\nEnd Module\n```"
  },
  {
    "task": "Create a function that takes a blockchain ledger and adds a block. Explain how pass-by-reference affects the ledger.",
    "code": "```vb\nModule BlockchainModule\n    Sub Main()\n        Dim ledger As New List(Of String) From {\"Genesis Block\"}\n        AddBlock(ledger, \"Block 1\")\n        AddBlock(ledger, \"Block 2\")\n        \n        For Each block In ledger\n            Console.WriteLine(block)\n        Next\n    End Sub\n\n    Sub AddBlock(ByRef ledger As List(Of String), ByVal newBlock As String)\n        ledger.Add(newBlock)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a function that accepts a network packet and alters its headers. Discuss the implications of pass-by-value on the packet.",
    "code": "```vb\nModule NetworkModule\n\n    Sub Main()\n        Dim originalPacket As String = \"OriginalPacketHeader|Payload\"\n        Console.WriteLine(\"Before alteration: \" & originalPacket)\n        \n        AlterPacketHeaders(originalPacket)\n        \n        Console.WriteLine(\"After alteration: \" & originalPacket)\n    End Sub\n\n    Sub AlterPacketHeaders(ByVal packet As String)\n        Dim alteredPacket As String = \"AlteredHeader|\" & packet.Split(\"|\"c)(1)\n        Console.WriteLine(\"Inside function: \" & alteredPacket)\n    End Sub\n\nEnd Module\n```"
  }
]