[
  {
    "task": "Create a set to store unique usernames and demonstrate adding new ones.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim usernames As HashSet(Of String) = New HashSet(Of String)()\n\n        ' Add new usernames\n        usernames.Add(\"Alice\")\n        usernames.Add(\"Bob\")\n        usernames.Add(\"Charlie\")\n\n        ' Attempt to add duplicate\n        usernames.Add(\"Alice\")\n\n        ' Display the unique usernames\n        For Each username As String In usernames\n            Console.WriteLine(username)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function that returns the union of two sets of integers.",
    "code": "```vb\nFunction UnionOfSets(set1 As HashSet(Of Integer), set2 As HashSet(Of Integer)) As HashSet(Of Integer)\n    Dim resultSet As New HashSet(Of Integer)(set1)\n    resultSet.UnionWith(set2)\n    Return resultSet\nEnd Function\n```"
  },
  {
    "task": "Given two sets of strings, find their intersection.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim set1 As New HashSet(Of String) From {\"apple\", \"banana\", \"cherry\"}\n        Dim set2 As New HashSet(Of String) From {\"banana\", \"cherry\", \"date\"}\n\n        set1.IntersectWith(set2)\n\n        For Each item As String In set1\n            Console.WriteLine(item)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a set to track visited web pages and check if a page has been visited.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim visitedPages As New HashSet(Of String)\n\n        ' Visit a page\n        visitedPages.Add(\"http://example.com\")\n\n        ' Check if a page has been visited\n        Dim page As String = \"http://example.com\"\n        If visitedPages.Contains(page) Then\n            Console.WriteLine(\"Page has been visited.\")\n        Else\n            Console.WriteLine(\"Page has not been visited.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a set from a list of numbers and remove duplicates.",
    "code": "```vb\nImports System.Collections.Generic\n\nModule Module1\n    Sub Main()\n        Dim numbers As New List(Of Integer) From {1, 2, 3, 2, 4, 3, 5}\n        Dim uniqueNumbers As New HashSet(Of Integer)(numbers)\n\n        For Each number In uniqueNumbers\n            Console.WriteLine(number)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Check if a set is a subset of another set.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim setA As New HashSet(Of Integer) From {1, 2, 3}\n        Dim setB As New HashSet(Of Integer) From {1, 2, 3, 4, 5}\n\n        Dim isSubset As Boolean = setB.IsSupersetOf(setA)\n\n        Console.WriteLine(\"SetA is a subset of SetB: \" & isSubset)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Demonstrate adding and removing elements from a set of book titles.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim bookTitles As HashSet(Of String) = New HashSet(Of String)()\n\n        ' Adding elements to the set\n        bookTitles.Add(\"To Kill a Mockingbird\")\n        bookTitles.Add(\"1984\")\n        bookTitles.Add(\"The Great Gatsby\")\n\n        ' Removing an element from the set\n        bookTitles.Remove(\"1984\")\n\n        ' Output the remaining elements\n        For Each title As String In bookTitles\n            Console.WriteLine(title)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a set and show how to clear all its elements.",
    "code": "```vb\nDim mySet As New HashSet(Of Integer)\nmySet.Add(1)\nmySet.Add(2)\nmySet.Add(3)\n\n' Clear all elements from the set\nmySet.Clear()\n```"
  },
  {
    "task": "Write a program to find the difference between two sets of employee IDs.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim set1 As New HashSet(Of Integer) From {101, 102, 103, 104}\n        Dim set2 As New HashSet(Of Integer) From {103, 104, 105, 106}\n\n        set1.ExceptWith(set2)\n\n        For Each id In set1\n            Console.WriteLine(id)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a set to store unique email addresses and check membership.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim emailSet As New HashSet(Of String)\n        \n        ' Add some email addresses to the set\n        emailSet.Add(\"example1@example.com\")\n        emailSet.Add(\"example2@example.com\")\n        emailSet.Add(\"example3@example.com\")\n        \n        ' Check membership\n        Dim emailToCheck As String = \"example1@example.com\"\n        \n        If emailSet.Contains(emailToCheck) Then\n            Console.WriteLine(emailToCheck & \" is in the set.\")\n        Else\n            Console.WriteLine(emailToCheck & \" is not in the set.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Use a set to determine if two lists have any common elements.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim list1 As New List(Of Integer)({1, 2, 3, 4, 5})\n        Dim list2 As New List(Of Integer)({5, 6, 7, 8, 9})\n\n        Dim set1 As New HashSet(Of Integer)(list1)\n        Dim set2 As New HashSet(Of Integer)(list2)\n\n        set1.IntersectWith(set2)\n\n        If set1.Count > 0 Then\n            Console.WriteLine(\"The lists have common elements.\")\n        Else\n            Console.WriteLine(\"The lists do not have common elements.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a set to represent a group of students and update it with new entries.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim studentSet As New HashSet(Of String)()\n\n        ' Add initial students\n        studentSet.Add(\"Alice\")\n        studentSet.Add(\"Bob\")\n        studentSet.Add(\"Charlie\")\n\n        ' Update with new entries\n        studentSet.Add(\"David\")\n        studentSet.Add(\"Eve\")\n\n        ' Display the students\n        For Each student In studentSet\n            Console.WriteLine(student)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function to find symmetric difference between two sets of colors.",
    "code": "```vb\nFunction SymmetricDifference(set1 As HashSet(Of String), set2 As HashSet(Of String)) As HashSet(Of String)\n    Dim result As New HashSet(Of String)(set1)\n    result.SymmetricExceptWith(set2)\n    Return result\nEnd Function\n```"
  },
  {
    "task": "Implement a set to store unique product codes and demonstrate iteration over it.",
    "code": "```vb\nModule Module1\n\n    Sub Main()\n        Dim productCodes As New HashSet(Of String)\n\n        productCodes.Add(\"P001\")\n        productCodes.Add(\"P002\")\n        productCodes.Add(\"P003\")\n        productCodes.Add(\"P002\") ' Duplicate entry won't be added\n\n        For Each code As String In productCodes\n            Console.WriteLine(code)\n        Next\n    End Sub\n\nEnd Module\n```"
  },
  {
    "task": "Create a set and demonstrate the use of the `discard` method.",
    "code": "```vb\nImports System.Collections.Generic\n\nModule Program\n    Sub Main()\n        ' Create a HashSet of integers\n        Dim numbers As New HashSet(Of Integer) From {1, 2, 3, 4, 5}\n\n        ' Attempt to remove an element and discard the result\n        Dim discard As Boolean = numbers.Remove(3)\n\n        ' Output the current elements in the set\n        For Each number In numbers\n            Console.WriteLine(number)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Given a list of numbers, create a set and check if a specific number is present.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers As Integer() = {1, 2, 3, 4, 5}\n        Dim numberSet As HashSet(Of Integer) = New HashSet(Of Integer)(numbers)\n        Dim specificNumber As Integer = 3\n\n        If numberSet.Contains(specificNumber) Then\n            Console.WriteLine(\"Number is present in the set.\")\n        Else\n            Console.WriteLine(\"Number is not present in the set.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Use a set to find all unique words in a sentence.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim sentence As String = \"This is a sentence with some words and some repeated words\"\n        Dim words() As String = sentence.Split(\" \"c)\n        Dim uniqueWords As HashSet(Of String) = New HashSet(Of String)(words)\n\n        For Each word As String In uniqueWords\n            Console.WriteLine(word)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a set from a sequence of characters and demonstrate set operations.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim charSequence As String = \"abcde\"\n        Dim charSet As HashSet(Of Char) = New HashSet(Of Char)(charSequence)\n\n        ' Demonstrate set operations\n        Dim anotherSet As HashSet(Of Char) = New HashSet(Of Char)({\"c\", \"d\", \"e\", \"f\", \"g\"})\n\n        ' Union\n        Dim unionSet As HashSet(Of Char) = New HashSet(Of Char)(charSet)\n        unionSet.UnionWith(anotherSet)\n        Console.WriteLine(\"Union: \" & String.Join(\", \", unionSet))\n\n        ' Intersection\n        Dim intersectionSet As HashSet(Of Char) = New HashSet(Of Char)(charSet)\n        intersectionSet.IntersectWith(anotherSet)\n        Console.WriteLine(\"Intersection: \" & String.Join(\", \", intersectionSet))\n\n        ' Difference\n        Dim differenceSet As HashSet(Of Char) = New HashSet(Of Char)(charSet)\n        differenceSet.ExceptWith(anotherSet)\n        Console.WriteLine(\"Difference: \" & String.Join(\", \", differenceSet))\n\n        ' Symmetric Difference\n        Dim symmetricDifferenceSet As HashSet(Of Char) = New HashSet(Of Char)(unionSet)\n        symmetricDifferenceSet.ExceptWith(intersectionSet)\n        Console.WriteLine(\"Symmetric Difference: \" & String.Join(\", \", symmetricDifferenceSet))\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function to merge two sets and return the result.",
    "code": "```vb\nFunction MergeSets(set1 As HashSet(Of Integer), set2 As HashSet(Of Integer)) As HashSet(Of Integer)\n    Dim resultSet As New HashSet(Of Integer)(set1)\n    resultSet.UnionWith(set2)\n    Return resultSet\nEnd Function\n```"
  },
  {
    "task": "Implement a set to hold unique IP addresses and demonstrate basic operations.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        ' Create a HashSet to store unique IP addresses\n        Dim ipSet As New HashSet(Of String)\n\n        ' Add IP addresses to the set\n        ipSet.Add(\"192.168.1.1\")\n        ipSet.Add(\"192.168.1.2\")\n        ipSet.Add(\"10.0.0.1\")\n        ipSet.Add(\"192.168.1.1\") ' Duplicate, will not be added\n\n        ' Display the IP addresses in the set\n        Console.WriteLine(\"IP Addresses in the set:\")\n        For Each ip As String In ipSet\n            Console.WriteLine(ip)\n        Next\n\n        ' Check if a specific IP address is in the set\n        Dim checkIP As String = \"10.0.0.1\"\n        If ipSet.Contains(checkIP) Then\n            Console.WriteLine(checkIP & \" is in the set.\")\n        Else\n            Console.WriteLine(checkIP & \" is not in the set.\")\n        End If\n\n        ' Remove an IP address from the set\n        ipSet.Remove(\"192.168.1.2\")\n\n        ' Display the IP addresses after removal\n        Console.WriteLine(\"IP Addresses after removal:\")\n        For Each ip As String In ipSet\n            Console.WriteLine(ip)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a set and demonstrate how to find the size of the set.",
    "code": "```vb\nDim mySet As New HashSet(Of Integer)\nmySet.Add(1)\nmySet.Add(2)\nmySet.Add(3)\nDim setSize As Integer = mySet.Count\nConsole.WriteLine(setSize)\n```"
  },
  {
    "task": "Write a program to check if two sets of dates are disjoint.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim set1 As New HashSet(Of Date) From {\n            New Date(2023, 1, 1),\n            New Date(2023, 5, 15),\n            New Date(2023, 7, 20)\n        }\n\n        Dim set2 As New HashSet(Of Date) From {\n            New Date(2023, 2, 10),\n            New Date(2023, 3, 25),\n            New Date(2023, 7, 20)\n        }\n\n        Dim disjoint As Boolean = Not set1.Overlaps(set2)\n\n        If disjoint Then\n            Console.WriteLine(\"The sets are disjoint.\")\n        Else\n            Console.WriteLine(\"The sets are not disjoint.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a set to manage a collection of tags and demonstrate addition and removal.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        ' Create a HashSet to manage a collection of tags\n        Dim tags As New HashSet(Of String)\n\n        ' Add tags to the set\n        tags.Add(\"VB\")\n        tags.Add(\"Programming\")\n        tags.Add(\"Code\")\n\n        ' Remove a tag from the set\n        tags.Remove(\"Code\")\n\n        ' Display the remaining tags\n        For Each tag In tags\n            Console.WriteLine(tag)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a set to track unique inventory items in a store.",
    "code": "```vb\nImports System.Collections.Generic\n\nModule InventoryTracker\n    Sub Main()\n        Dim inventory As HashSet(Of String) = New HashSet(Of String)()\n\n        ' Example usage\n        inventory.Add(\"Apple\")\n        inventory.Add(\"Banana\")\n        inventory.Add(\"Orange\")\n\n        ' Attempt to add duplicate item\n        inventory.Add(\"Apple\")\n\n        ' Display all unique items\n        For Each item As String In inventory\n            Console.WriteLine(item)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a set of numbers and demonstrate conversion to a list.",
    "code": "```vb\nImports System.Collections.Generic\n\nModule Module1\n    Sub Main()\n        Dim numberSet As New HashSet(Of Integer) From {1, 2, 3, 4, 5}\n        Dim numberList As List(Of Integer) = New List(Of Integer)(numberSet)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function that returns all elements present in either of two sets but not both.",
    "code": "```vb\nFunction SymmetricDifference(set1 As HashSet(Of Integer), set2 As HashSet(Of Integer)) As HashSet(Of Integer)\n    Dim result As New HashSet(Of Integer)(set1)\n    result.SymmetricExceptWith(set2)\n    Return result\nEnd Function\n```"
  },
  {
    "task": "Use a set to manage a collection of unique transaction IDs.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim transactionIDs As New HashSet(Of String)\n\n        ' Adding transaction IDs to the set\n        transactionIDs.Add(\"TXN123456\")\n        transactionIDs.Add(\"TXN234567\")\n        transactionIDs.Add(\"TXN345678\")\n\n        ' Attempting to add a duplicate transaction ID\n        transactionIDs.Add(\"TXN123456\")\n\n        ' Displaying the transaction IDs in the set\n        For Each id In transactionIDs\n            Console.WriteLine(id)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a set of integers and demonstrate the `pop` operation.",
    "code": "```vb\nImports System.Collections.Generic\n\nModule Module1\n    Sub Main()\n        Dim numbers As New HashSet(Of Integer) From {1, 2, 3, 4, 5}\n\n        ' Pop operation: Remove an element\n        Dim valueToRemove As Integer\n        If numbers.Count > 0 Then\n            valueToRemove = numbers.First()\n            numbers.Remove(valueToRemove)\n            Console.WriteLine(\"Popped value: \" & valueToRemove)\n        Else\n            Console.WriteLine(\"Set is empty.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a program to find the maximum element in a set of floating-point numbers.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers As New HashSet(Of Double) From {3.5, 2.2, 9.8, 4.4, 7.1}\n        Dim maxElement As Double = Double.MinValue\n\n        For Each number In numbers\n            If number > maxElement Then\n                maxElement = number\n            End If\n        Next\n\n        Console.WriteLine(\"The maximum element is: \" & maxElement)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a set and demonstrate the use of the `update` method with another set.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim set1 As HashSet(Of Integer) = New HashSet(Of Integer)({1, 2, 3})\n        Dim set2 As HashSet(Of Integer) = New HashSet(Of Integer)({3, 4, 5})\n\n        set1.UnionWith(set2)\n\n        For Each item In set1\n            Console.WriteLine(item)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a set to keep track of unique file extensions in a directory.",
    "code": "```vb\nImports System.IO\nImports System.Collections.Generic\n\nModule Module1\n    Sub Main()\n        Dim directoryPath As String = \"C:\\YourDirectoryPath\"\n        Dim uniqueExtensions As New HashSet(Of String)\n\n        If Directory.Exists(directoryPath) Then\n            Dim files As String() = Directory.GetFiles(directoryPath)\n            For Each file As String In files\n                Dim extension As String = Path.GetExtension(file)\n                If Not String.IsNullOrEmpty(extension) Then\n                    uniqueExtensions.Add(extension.ToLowerInvariant())\n                End If\n            Next\n        End If\n\n        For Each ext As String In uniqueExtensions\n            Console.WriteLine(ext)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a set of strings and demonstrate how to iterate over it in reverse order.",
    "code": "```vb\nImports System.Collections.Generic\n\nModule Module1\n    Sub Main()\n        Dim mySet As New HashSet(Of String) From {\"apple\", \"banana\", \"cherry\"}\n        \n        Dim list As New List(Of String)(mySet)\n        list.Reverse()\n\n        For Each item In list\n            Console.WriteLine(item)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function to check if a set is empty.",
    "code": "```vb\nFunction IsSetEmpty(Of T)(ByVal inputSet As HashSet(Of T)) As Boolean\n    Return inputSet.Count = 0\nEnd Function\n```"
  },
  {
    "task": "Use a set to filter out duplicate entries from a list of participants.",
    "code": "```vb\nModule Program\n    Sub Main()\n        Dim participants As New List(Of String) From {\"Alice\", \"Bob\", \"Alice\", \"Charlie\", \"Bob\"}\n        Dim uniqueParticipants As New HashSet(Of String)(participants)\n\n        For Each participant In uniqueParticipants\n            Console.WriteLine(participant)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a set of tuples and demonstrate basic set operations.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim set1 As New HashSet(Of (Integer, Integer))\n        Dim set2 As New HashSet(Of (Integer, Integer))\n\n        ' Add tuples to the sets\n        set1.Add((1, 2))\n        set1.Add((3, 4))\n        set1.Add((5, 6))\n\n        set2.Add((3, 4))\n        set2.Add((7, 8))\n        set2.Add((9, 10))\n\n        ' Union of set1 and set2\n        Dim unionSet As New HashSet(Of (Integer, Integer))(set1)\n        unionSet.UnionWith(set2)\n        Console.WriteLine(\"Union:\")\n        For Each item In unionSet\n            Console.WriteLine(item)\n        Next\n\n        ' Intersection of set1 and set2\n        Dim intersectionSet As New HashSet(Of (Integer, Integer))(set1)\n        intersectionSet.IntersectWith(set2)\n        Console.WriteLine(\"Intersection:\")\n        For Each item In intersectionSet\n            Console.WriteLine(item)\n        Next\n\n        ' Difference of set1 and set2\n        Dim differenceSet As New HashSet(Of (Integer, Integer))(set1)\n        differenceSet.ExceptWith(set2)\n        Console.WriteLine(\"Difference (set1 - set2):\")\n        For Each item In differenceSet\n            Console.WriteLine(item)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a program to find the common elements between two sets of country names.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim set1 As HashSet(Of String) = New HashSet(Of String) From {\"USA\", \"Canada\", \"Mexico\", \"Germany\"}\n        Dim set2 As HashSet(Of String) = New HashSet(Of String) From {\"France\", \"Germany\", \"Italy\", \"Canada\"}\n\n        set1.IntersectWith(set2)\n\n        For Each country In set1\n            Console.WriteLine(country)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a set of characters and demonstrate the use of the `issubset` method.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim setA As HashSet(Of Char) = New HashSet(Of Char)({\"a\"c, \"b\"c, \"c\"c})\n        Dim setB As HashSet(Of Char) = New HashSet(Of Char)({\"a\"c, \"b\"c})\n\n        Dim isSubset As Boolean = setB.IsSubsetOf(setA)\n\n        Console.WriteLine(\"Set B is a subset of Set A: \" & isSubset)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a set to manage a collection of unique hashtags from social media posts.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim hashtags As New HashSet(Of String)\n\n        ' Example usage:\n        hashtags.Add(\"#technology\")\n        hashtags.Add(\"#innovation\")\n        hashtags.Add(\"#technology\") ' Duplicate, will not be added\n\n        For Each hashtag In hashtags\n            Console.WriteLine(hashtag)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a set and demonstrate how to copy it to another set.",
    "code": "```vb\nDim set1 As New HashSet(Of Integer) From {1, 2, 3, 4, 5}\nDim set2 As New HashSet(Of Integer)(set1)\n```"
  },
  {
    "task": "Write a function that accepts two sets and returns a new set with elements found in both.",
    "code": "```vb\nFunction IntersectSets(set1 As HashSet(Of Integer), set2 As HashSet(Of Integer)) As HashSet(Of Integer)\n    Dim resultSet As New HashSet(Of Integer)(set1)\n    resultSet.IntersectWith(set2)\n    Return resultSet\nEnd Function\n```"
  },
  {
    "task": "Use a set to determine the unique items purchased in a day.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim purchases As New HashSet(Of String)\n\n        ' Example purchases\n        purchases.Add(\"Apple\")\n        purchases.Add(\"Banana\")\n        purchases.Add(\"Apple\")\n        purchases.Add(\"Orange\")\n        purchases.Add(\"Banana\")\n        purchases.Add(\"Grapes\")\n\n        ' Display unique items\n        Console.WriteLine(\"Unique items purchased:\")\n        For Each item In purchases\n            Console.WriteLine(item)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a set of student IDs and demonstrate set comprehension to filter IDs.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim studentIds As New HashSet(Of Integer) From {101, 102, 103, 104, 105}\n        Dim filteredIds As IEnumerable(Of Integer) = From id In studentIds Where id > 102 Select id\n\n        For Each id In filteredIds\n            Console.WriteLine(id)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a program to check if a set of strings is a superset of another set.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim setA As New HashSet(Of String)() From {\"apple\", \"banana\", \"cherry\"}\n        Dim setB As New HashSet(Of String)() From {\"banana\", \"cherry\"}\n\n        Dim isSuperset As Boolean = setA.IsSupersetOf(setB)\n        Console.WriteLine(\"Is setA a superset of setB? \" & isSuperset)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a set of unique words from a text file.",
    "code": "```vb\nImports System.IO\nImports System.Collections.Generic\n\nModule Module1\n    Sub Main()\n        Dim filePath As String = \"path_to_your_text_file.txt\"\n        Dim uniqueWords As New HashSet(Of String)\n\n        If File.Exists(filePath) Then\n            Dim lines() As String = File.ReadAllLines(filePath)\n            For Each line In lines\n                Dim words() As String = line.Split({\" \"c, ControlChars.Tab}, StringSplitOptions.RemoveEmptyEntries)\n                For Each word In words\n                    uniqueWords.Add(word)\n                Next\n            Next\n        End If\n\n        ' Output unique words\n        For Each word In uniqueWords\n            Console.WriteLine(word)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a set to store unique project identifiers and demonstrate membership testing.",
    "code": "```vb\nModule ProjectSetDemo\n    Sub Main()\n        Dim projectIdentifiers As New HashSet(Of String)\n        \n        ' Add identifiers to the set\n        projectIdentifiers.Add(\"Proj-001\")\n        projectIdentifiers.Add(\"Proj-002\")\n        projectIdentifiers.Add(\"Proj-003\")\n        \n        ' Attempt to add a duplicate identifier\n        projectIdentifiers.Add(\"Proj-002\")\n        \n        ' Test for membership\n        Dim testIdentifier As String = \"Proj-002\"\n        If projectIdentifiers.Contains(testIdentifier) Then\n            Console.WriteLine(testIdentifier & \" is in the set.\")\n        Else\n            Console.WriteLine(testIdentifier & \" is not in the set.\")\n        End If\n        \n        ' Display all unique identifiers\n        Console.WriteLine(\"Unique project identifiers:\")\n        For Each identifier In projectIdentifiers\n            Console.WriteLine(identifier)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a set and demonstrate the `symmetric_difference_update` method.",
    "code": "```vbnet\nModule Module1\n    Sub Main()\n        Dim set1 As New HashSet(Of Integer)({1, 2, 3, 4})\n        Dim set2 As New HashSet(Of Integer)({3, 4, 5, 6})\n\n        ' Perform symmetric difference update\n        set1.SymmetricExceptWith(set2)\n\n        ' Output the result\n        For Each item In set1\n            Console.WriteLine(item)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function to remove all elements from a set that are also in another set.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim set1 As New HashSet(Of Integer)({1, 2, 3, 4, 5})\n        Dim set2 As New HashSet(Of Integer)({3, 4, 6})\n        RemoveElements(set1, set2)\n        For Each item In set1\n            Console.WriteLine(item)\n        Next\n    End Sub\n\n    Sub RemoveElements(set1 As HashSet(Of Integer), set2 As HashSet(Of Integer))\n        set1.ExceptWith(set2)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Use a set to keep track of unique error codes from server logs.",
    "code": "```vb\nImports System.Collections.Generic\n\nModule Module1\n    Sub Main()\n        Dim errorCodes As New HashSet(Of String)()\n\n        ' Example log entries\n        Dim logs As String() = {\n            \"Error 404: Not Found\",\n            \"Error 500: Internal Server Error\",\n            \"Error 404: Not Found\",\n            \"Error 403: Forbidden\",\n            \"Error 500: Internal Server Error\"\n        }\n\n        For Each log As String In logs\n            Dim errorCode As String = log.Split(\":\"c)(0)\n            errorCodes.Add(errorCode)\n        Next\n\n        Console.WriteLine(\"Unique Error Codes:\")\n        For Each code As String In errorCodes\n            Console.WriteLine(code)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a set and demonstrate how to find all unique pairs of elements.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers As New HashSet(Of Integer) From {1, 2, 3, 4}\n        Dim pairs As New HashSet(Of String)\n\n        For Each num1 In numbers\n            For Each num2 In numbers\n                If num1 < num2 Then\n                    pairs.Add($\"{num1},{num2}\")\n                End If\n            Next\n        Next\n\n        For Each pair In pairs\n            Console.WriteLine(pair)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a program to find the smallest element in a set of integers.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers As New HashSet(Of Integer) From {5, 3, 8, 1, 9}\n        Dim smallest As Integer = Integer.MaxValue\n\n        For Each number In numbers\n            If number < smallest Then\n                smallest = number\n            End If\n        Next\n\n        Console.WriteLine(\"The smallest element is: \" & smallest)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a set and demonstrate the `add` method with multiple elements.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim mySet As New HashSet(Of Integer)()\n\n        ' Adding elements to the set\n        mySet.Add(1)\n        mySet.Add(2)\n        mySet.Add(3)\n        mySet.Add(4)\n        mySet.Add(5)\n\n        ' Display the elements in the set\n        For Each element In mySet\n            Console.WriteLine(element)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a set to manage a collection of unique author names.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim authorSet As New HashSet(Of String)\n        \n        ' Adding authors to the set\n        authorSet.Add(\"Author One\")\n        authorSet.Add(\"Author Two\")\n        authorSet.Add(\"Author Three\")\n\n        ' Trying to add a duplicate author\n        authorSet.Add(\"Author One\")\n\n        ' Display the authors\n        For Each author In authorSet\n            Console.WriteLine(author)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a set of integers and demonstrate converting it to a sorted list.",
    "code": "```vb\nImports System.Linq\n\nModule Module1\n    Sub Main()\n        Dim intSet As HashSet(Of Integer) = New HashSet(Of Integer) From {5, 3, 8, 1, 9}\n        Dim sortedList As List(Of Integer) = intSet.ToList()\n        sortedList.Sort()\n\n        For Each num In sortedList\n            Console.WriteLine(num)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function that returns the union of multiple sets.",
    "code": "```vb\nFunction UnionOfSets(ParamArray sets() As HashSet(Of Integer)) As HashSet(Of Integer)\n    Dim result As New HashSet(Of Integer)\n    For Each set In sets\n        result.UnionWith(set)\n    Next\n    Return result\nEnd Function\n```"
  },
  {
    "task": "Use a set to identify unique characters in a string.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim inputString As String = \"example string\"\n        Dim uniqueChars As New HashSet(Of Char)\n\n        For Each ch As Char In inputString\n            uniqueChars.Add(ch)\n        Next\n\n        For Each ch As Char In uniqueChars\n            Console.Write(ch & \" \")\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a set of prime numbers and demonstrate basic set operations.",
    "code": "```vb\nImports System.Collections.Generic\n\nModule Module1\n    Sub Main()\n        ' Create a set of prime numbers\n        Dim primeNumbers As New HashSet(Of Integer)({2, 3, 5, 7, 11, 13, 17, 19, 23, 29})\n\n        ' Add more prime numbers to the set\n        primeNumbers.Add(31)\n        primeNumbers.Add(37)\n\n        ' Attempt to add a duplicate element\n        primeNumbers.Add(3)\n\n        ' Display the set of prime numbers\n        Console.WriteLine(\"Prime Numbers:\")\n        For Each number In primeNumbers\n            Console.WriteLine(number)\n        Next\n\n        ' Create another set for demonstration\n        Dim otherNumbers As New HashSet(Of Integer)({5, 10, 15, 20, 25, 30, 35, 40})\n\n        ' Perform union operation\n        Dim unionSet As New HashSet(Of Integer)(primeNumbers)\n        unionSet.UnionWith(otherNumbers)\n        Console.WriteLine(vbCrLf & \"Union of Prime Numbers and Other Numbers:\")\n        For Each number In unionSet\n            Console.WriteLine(number)\n        Next\n\n        ' Perform intersection operation\n        Dim intersectionSet As New HashSet(Of Integer)(primeNumbers)\n        intersectionSet.IntersectWith(otherNumbers)\n        Console.WriteLine(vbCrLf & \"Intersection of Prime Numbers and Other Numbers:\")\n        For Each number In intersectionSet\n            Console.WriteLine(number)\n        Next\n\n        ' Perform difference operation\n        Dim differenceSet As New HashSet(Of Integer)(primeNumbers)\n        differenceSet.ExceptWith(otherNumbers)\n        Console.WriteLine(vbCrLf & \"Difference of Prime Numbers and Other Numbers:\")\n        For Each number In differenceSet\n            Console.WriteLine(number)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a set and demonstrate how to check for non-membership.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim setExample As New HashSet(Of String) From {\"apple\", \"banana\", \"cherry\"}\n        Dim itemToCheck As String = \"orange\"\n        \n        If Not setExample.Contains(itemToCheck) Then\n            Console.WriteLine(itemToCheck & \" is not in the set.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a program to find the largest element in a set of numbers.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers As New HashSet(Of Integer)({10, 5, 23, 8, 42, 15})\n        Dim largest As Integer = Integer.MinValue\n\n        For Each num In numbers\n            If num > largest Then\n                largest = num\n            End If\n        Next\n\n        Console.WriteLine(\"The largest element is: \" & largest)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a set of unique movie titles and demonstrate membership testing.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim movieTitles As New HashSet(Of String) From {\n            \"Inception\",\n            \"The Matrix\",\n            \"Interstellar\",\n            \"The Matrix\" ' Duplicate entry will be ignored\n        }\n\n        Dim testTitle As String = \"Inception\"\n        If movieTitles.Contains(testTitle) Then\n            Console.WriteLine(testTitle & \" is in the set.\")\n        Else\n            Console.WriteLine(testTitle & \" is not in the set.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a set to store unique keys from a dictionary.",
    "code": "```vb\nDim dictionary As New Dictionary(Of String, Integer)\ndictionary(\"key1\") = 1\ndictionary(\"key2\") = 2\ndictionary(\"key3\") = 3\n\nDim uniqueKeys As New HashSet(Of String)(dictionary.Keys)\n```"
  },
  {
    "task": "Create a set and demonstrate the `difference_update` method.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim setA As New HashSet(Of Integer)({1, 2, 3, 4, 5})\n        Dim setB As New HashSet(Of Integer)({3, 4, 5, 6, 7})\n\n        setA.ExceptWith(setB)\n\n        For Each item In setA\n            Console.WriteLine(item)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function to merge multiple sets into a single set.",
    "code": "```vb\nFunction MergeSets(ParamArray sets() As HashSet(Of Integer)) As HashSet(Of Integer)\n    Dim resultSet As New HashSet(Of Integer)\n    For Each set In sets\n        resultSet.UnionWith(set)\n    Next\n    Return resultSet\nEnd Function\n```"
  },
  {
    "task": "Use a set to filter out duplicate letters from a word.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim word As String = \"example\"\n        Dim uniqueLetters As New HashSet(Of Char)(word)\n        Dim result As String = New String(uniqueLetters.ToArray())\n        Console.WriteLine(result)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a set and demonstrate the use of the `isdisjoint` method.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim set1 As New HashSet(Of Integer)({1, 2, 3, 4, 5})\n        Dim set2 As New HashSet(Of Integer)({6, 7, 8, 9, 10})\n\n        Dim isDisjoint As Boolean = set1.Intersect(set2).Count = 0\n        Console.WriteLine(\"Are the sets disjoint? \" & isDisjoint)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a program to find all elements that are only in one of two sets.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim set1 As New HashSet(Of Integer)({1, 2, 3, 4, 5})\n        Dim set2 As New HashSet(Of Integer)({4, 5, 6, 7, 8})\n\n        Dim onlyInSet1 As New HashSet(Of Integer)(set1)\n        onlyInSet1.ExceptWith(set2)\n\n        Dim onlyInSet2 As New HashSet(Of Integer)(set2)\n        onlyInSet2.ExceptWith(set1)\n\n        Dim result As New HashSet(Of Integer)(onlyInSet1)\n        result.UnionWith(onlyInSet2)\n\n        For Each item As Integer In result\n            Console.WriteLine(item)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a set of unique book authors and demonstrate basic set operations.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim authors As New HashSet(Of String)\n\n        ' Adding authors to the set\n        authors.Add(\"George Orwell\")\n        authors.Add(\"Jane Austen\")\n        authors.Add(\"Mark Twain\")\n        authors.Add(\"George Orwell\") ' Duplicate, will not be added\n\n        ' Display all unique authors\n        Console.WriteLine(\"Unique Authors:\")\n        For Each author In authors\n            Console.WriteLine(author)\n        Next\n\n        ' Demonstrate set operations\n        Dim moreAuthors As New HashSet(Of String) From {\"Agatha Christie\", \"Mark Twain\"}\n        \n        ' Union\n        Dim allAuthors As New HashSet(Of String)(authors)\n        allAuthors.UnionWith(moreAuthors)\n        Console.WriteLine(vbCrLf & \"Union of Authors:\")\n        For Each author In allAuthors\n            Console.WriteLine(author)\n        Next\n\n        ' Intersection\n        Dim commonAuthors As New HashSet(Of String)(authors)\n        commonAuthors.IntersectWith(moreAuthors)\n        Console.WriteLine(vbCrLf & \"Intersection of Authors:\")\n        For Each author In commonAuthors\n            Console.WriteLine(author)\n        Next\n        \n        ' Difference\n        Dim uniqueAuthors As New HashSet(Of String)(authors)\n        uniqueAuthors.ExceptWith(moreAuthors)\n        Console.WriteLine(vbCrLf & \"Difference of Authors:\")\n        For Each author In uniqueAuthors\n            Console.WriteLine(author)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a set to store unique phone numbers and check for duplicates.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim phoneNumbers As New HashSet(Of String)\n\n        ' Add phone numbers\n        Dim phone1 As String = \"123-456-7890\"\n        Dim phone2 As String = \"098-765-4321\"\n        Dim phone3 As String = \"123-456-7890\" ' Duplicate\n\n        AddPhoneNumber(phoneNumbers, phone1)\n        AddPhoneNumber(phoneNumbers, phone2)\n        AddPhoneNumber(phoneNumbers, phone3)\n\n        Console.WriteLine(\"Unique phone numbers:\")\n        For Each number In phoneNumbers\n            Console.WriteLine(number)\n        Next\n    End Sub\n\n    Sub AddPhoneNumber(ByVal set As HashSet(Of String), ByVal number As String)\n        If set.Contains(number) Then\n            Console.WriteLine(\"Duplicate phone number found: \" & number)\n        Else\n            set.Add(number)\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a set of floating-point numbers and demonstrate rounding each element.",
    "code": "```vb\nModule Program\n    Sub Main()\n        Dim numbers As HashSet(Of Double) = New HashSet(Of Double) From {1.234, 5.678, 9.1011}\n        For Each num In numbers\n            Console.WriteLine(Math.Round(num))\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function that returns a set of all vowels present in a given sentence.",
    "code": "```vb\nFunction GetVowelsInSentence(sentence As String) As HashSet(Of Char)\n    Dim vowels As New HashSet(Of Char) From {\"a\", \"e\", \"i\", \"o\", \"u\"}\n    Dim result As New HashSet(Of Char)\n    \n    For Each c As Char In sentence.ToLower()\n        If vowels.Contains(c) Then\n            result.Add(c)\n        End If\n    Next\n    \n    Return result\nEnd Function\n```"
  },
  {
    "task": "Use a set to track unique session IDs for a web application.",
    "code": "```vb\nImports System.Collections.Generic\n\nModule UniqueSessionTracker\n    Sub Main()\n        Dim uniqueSessionIDs As New HashSet(Of String)()\n\n        ' Example of adding session IDs\n        uniqueSessionIDs.Add(\"session1\")\n        uniqueSessionIDs.Add(\"session2\")\n        uniqueSessionIDs.Add(\"session3\")\n\n        ' Example of checking if a session ID is unique\n        Dim newSessionID As String = \"session2\"\n        If Not uniqueSessionIDs.Contains(newSessionID) Then\n            uniqueSessionIDs.Add(newSessionID)\n            Console.WriteLine(\"Added new session ID: \" & newSessionID)\n        Else\n            Console.WriteLine(\"Session ID already exists: \" & newSessionID)\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a set of unique city names and demonstrate set operations with it.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim citySet As New HashSet(Of String) From {\"New York\", \"London\", \"Tokyo\", \"Paris\"}\n\n        ' Adding a new city\n        citySet.Add(\"Sydney\")\n\n        ' Attempting to add a duplicate city\n        citySet.Add(\"New York\")\n\n        ' Removing a city\n        citySet.Remove(\"Tokyo\")\n\n        ' Check if the set contains a city\n        If citySet.Contains(\"Paris\") Then\n            Console.WriteLine(\"Paris is in the set.\")\n        End If\n\n        ' Display all cities in the set\n        Console.WriteLine(\"Cities in the set:\")\n        For Each city In citySet\n            Console.WriteLine(city)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a program to find the common elements in three sets.",
    "code": "```vb\nModule Program\n    Sub Main()\n        Dim set1 As New HashSet(Of Integer)({1, 2, 3, 4, 5})\n        Dim set2 As New HashSet(Of Integer)({3, 4, 5, 6, 7})\n        Dim set3 As New HashSet(Of Integer)({5, 6, 7, 8, 9})\n\n        set1.IntersectWith(set2)\n        set1.IntersectWith(set3)\n\n        For Each element As Integer In set1\n            Console.WriteLine(element)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a set and demonstrate how to remove an element by its value.",
    "code": "```vb\nImports System.Collections.Generic\n\nModule Module1\n    Sub Main()\n        Dim mySet As New HashSet(Of Integer) From {1, 2, 3, 4, 5}\n        \n        ' Remove element by value\n        mySet.Remove(3)\n        \n        ' Display the set elements\n        For Each item In mySet\n            Console.WriteLine(item)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a set to store a collection of unique ISBN numbers.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim isbnSet As HashSet(Of String) = New HashSet(Of String)()\n\n        ' Example: Adding ISBN numbers to the set\n        isbnSet.Add(\"978-3-16-148410-0\")\n        isbnSet.Add(\"978-1-4028-9462-6\")\n        isbnSet.Add(\"978-0-596-52068-7\")\n\n        ' Display all unique ISBN numbers\n        For Each isbn As String In isbnSet\n            Console.WriteLine(isbn)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a set and demonstrate the `intersection_update` method.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim setA As HashSet(Of Integer) = New HashSet(Of Integer)({1, 2, 3, 4, 5})\n        Dim setB As HashSet(Of Integer) = New HashSet(Of Integer)({3, 4, 5, 6, 7})\n\n        setA.IntersectWith(setB)\n\n        For Each item In setA\n            Console.WriteLine(item)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function to generate a set of all unique elements in a list.",
    "code": "```vb\nFunction GenerateUniqueSet(ByVal itemList As List(Of Object)) As HashSet(Of Object)\n    Dim uniqueSet As New HashSet(Of Object)(itemList)\n    Return uniqueSet\nEnd Function\n```"
  },
  {
    "task": "Use a set to determine the unique characters in two strings.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim str1 As String = \"example\"\n        Dim str2 As String = \"sample\"\n\n        Dim uniqueChars As New HashSet(Of Char)(str1)\n        uniqueChars.UnionWith(str2)\n\n        For Each ch As Char In uniqueChars\n            Console.WriteLine(ch)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a set of unique animal names and demonstrate the `discard` method.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim animalNames As HashSet(Of String) = New HashSet(Of String)() From {\"Cat\", \"Dog\", \"Elephant\"}\n\n        ' Attempt to discard \"Dog\" from the set\n        Dim removed As Boolean = animalNames.Remove(\"Dog\")\n\n        ' Output the result\n        Console.WriteLine(\"Dog removed: \" & removed)\n        \n        ' Display remaining elements in the set\n        For Each animal In animalNames\n            Console.WriteLine(animal)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a program to find all elements present in the first set but not in the second.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim set1 As New HashSet(Of Integer) From {1, 2, 3, 4, 5}\n        Dim set2 As New HashSet(Of Integer) From {4, 5, 6, 7, 8}\n        set1.ExceptWith(set2)\n        For Each element In set1\n            Console.WriteLine(element)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a set of integers and demonstrate using it to eliminate duplicates from a list.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers As New List(Of Integer)({1, 2, 3, 2, 4, 5, 3, 6, 1})\n        Dim uniqueNumbers As New HashSet(Of Integer)(numbers)\n\n        For Each number As Integer In uniqueNumbers\n            Console.WriteLine(number)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a set to manage a collection of unique car models.",
    "code": "```vb\nModule CarModelSet\n    Sub Main()\n        Dim carModels As New HashSet(Of String)\n\n        ' Example usage\n        carModels.Add(\"Toyota Corolla\")\n        carModels.Add(\"Honda Accord\")\n        carModels.Add(\"Ford Mustang\")\n\n        ' Attempting to add a duplicate\n        carModels.Add(\"Toyota Corolla\")\n\n        ' Display the set\n        For Each model In carModels\n            Console.WriteLine(model)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a set and demonstrate the use of the `clear` method.",
    "code": "```vb\nImports System.Collections.Generic\n\nModule Module1\n    Sub Main()\n        Dim mySet As New HashSet(Of Integer) From {1, 2, 3, 4, 5}\n        \n        ' Clear the set\n        mySet.Clear()\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function that finds the intersection of multiple sets.",
    "code": "```vb\nFunction IntersectionOfSets(ParamArray sets() As HashSet(Of Integer)) As HashSet(Of Integer)\n    If sets.Length = 0 Then Return New HashSet(Of Integer)\n    Dim result As HashSet(Of Integer) = New HashSet(Of Integer)(sets(0))\n    For i As Integer = 1 To sets.Length - 1\n        result.IntersectWith(sets(i))\n    Next\n    Return result\nEnd Function\n```"
  },
  {
    "task": "Use a set to identify unique words in a paragraph.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim paragraph As String = \"This is an example paragraph with some words. Some words repeat.\"\n        Dim words() As String = paragraph.Split({\" \"c, \".\"c, \",\"c}, StringSplitOptions.RemoveEmptyEntries)\n        Dim uniqueWords As New HashSet(Of String)(words)\n\n        For Each word In uniqueWords\n            Console.WriteLine(word)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a set of unique country codes and demonstrate membership testing.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim countryCodes As New HashSet(Of String) From {\"US\", \"CA\", \"GB\", \"FR\", \"DE\"}\n        \n        Dim testCode As String = \"CA\"\n        If countryCodes.Contains(testCode) Then\n            Console.WriteLine(testCode & \" is in the set.\")\n        Else\n            Console.WriteLine(testCode & \" is not in the set.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a program to find the union of two sets and return it as a list.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim set1 As HashSet(Of Integer) = New HashSet(Of Integer)() From {1, 2, 3, 4}\n        Dim set2 As HashSet(Of Integer) = New HashSet(Of Integer)() From {3, 4, 5, 6}\n        \n        set1.UnionWith(set2)\n        \n        Dim resultList As List(Of Integer) = New List(Of Integer)(set1)\n        \n        For Each item As Integer In resultList\n            Console.WriteLine(item)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a set and demonstrate using it to check if all elements of another set are present.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim setA As New HashSet(Of Integer) From {1, 2, 3, 4, 5}\n        Dim setB As New HashSet(Of Integer) From {2, 3}\n\n        If setA.IsSupersetOf(setB) Then\n            Console.WriteLine(\"All elements of setB are present in setA.\")\n        Else\n            Console.WriteLine(\"Not all elements of setB are present in setA.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a set to store unique coupon codes and demonstrate adding new codes.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        ' Initialize a HashSet to store unique coupon codes\n        Dim couponCodes As New HashSet(Of String)\n\n        ' Add new coupon codes\n        couponCodes.Add(\"DISCOUNT2023\")\n        couponCodes.Add(\"SUMMERSALE\")\n        couponCodes.Add(\"WELCOME10\")\n\n        ' Attempt to add a duplicate code\n        couponCodes.Add(\"DISCOUNT2023\")\n\n        ' Display the coupon codes\n        For Each code In couponCodes\n            Console.WriteLine(code)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a set and demonstrate the `copy` method.",
    "code": "```vb\nImports System.Collections.Generic\n\nModule Module1\n    Sub Main()\n        Dim originalSet As New HashSet(Of Integer)() From {\n            1, 2, 3, 4, 5\n        }\n\n        Dim copiedSet As New HashSet(Of Integer)(originalSet)\n\n        For Each item In copiedSet\n            Console.WriteLine(item)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function to remove duplicates from a list using a set.",
    "code": "```vb\nFunction RemoveDuplicates(inputList As List(Of Integer)) As List(Of Integer)\n    Dim uniqueSet As HashSet(Of Integer) = New HashSet(Of Integer)(inputList)\n    Return uniqueSet.ToList()\nEnd Function\n```"
  },
  {
    "task": "Use a set to identify unique numbers in a sequence.",
    "code": "```vb\nSub IdentifyUniqueNumbers()\n    Dim numbers As Integer() = {1, 2, 3, 2, 4, 5, 3, 6, 1}\n    Dim uniqueNumbers As New Collection\n\n    For Each number In numbers\n        On Error Resume Next\n        uniqueNumbers.Add(number, CStr(number))\n        On Error GoTo 0\n    Next\n\n    For Each number In uniqueNumbers\n        Console.WriteLine(number)\n    Next\nEnd Sub\n```"
  },
  {
    "task": "Create a set of unique fruit names and demonstrate set operations with it.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        ' Create a set of unique fruit names\n        Dim fruits As HashSet(Of String) = New HashSet(Of String) From {\"Apple\", \"Banana\", \"Cherry\"}\n\n        ' Demonstrate adding a new fruit\n        fruits.Add(\"Orange\")\n\n        ' Demonstrate attempting to add a duplicate fruit\n        fruits.Add(\"Apple\")\n\n        ' Demonstrate removing a fruit\n        fruits.Remove(\"Banana\")\n\n        ' Demonstrate checking if a fruit is in the set\n        Dim containsCherry As Boolean = fruits.Contains(\"Cherry\")\n\n        ' Output the results\n        Console.WriteLine(\"Fruits in the set:\")\n        For Each fruit As String In fruits\n            Console.WriteLine(fruit)\n        Next\n\n        Console.WriteLine(\"Contains 'Cherry': \" & containsCherry)\n    End Sub\nEnd Module\n```"
  }
]