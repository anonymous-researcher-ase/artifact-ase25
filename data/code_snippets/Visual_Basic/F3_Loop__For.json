[
  {
    "task": "Write a program that prints numbers from 1 to 10 using a for loop.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        For i As Integer = 1 To 10\n            Console.WriteLine(i)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a loop that iterates over an array of names and prints each name.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim names() As String = {\"Alice\", \"Bob\", \"Charlie\", \"Diana\"}\n        For i As Integer = 0 To names.Length - 1\n            Console.WriteLine(names(i))\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a for loop to calculate the factorial of a given number.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim number As Integer = 5 ' Example number\n        Dim factorial As Integer = 1\n\n        For i As Integer = 1 To number\n            factorial *= i\n        Next\n\n        Console.WriteLine(\"Factorial of \" & number & \" is \" & factorial)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a program that uses a for loop to sum all even numbers between 1 and 100.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim sum As Integer = 0\n        For i As Integer = 1 To 100\n            If i Mod 2 = 0 Then\n                sum += i\n            End If\n        Next\n        Console.WriteLine(\"The sum of all even numbers between 1 and 100 is: \" & sum)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Use a for loop to generate and print the Fibonacci sequence up to 20 terms.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim n1 As Integer = 0\n        Dim n2 As Integer = 1\n        Dim n3 As Integer\n        Dim i As Integer\n        Dim terms As Integer = 20\n\n        Console.WriteLine(n1)\n        Console.WriteLine(n2)\n\n        For i = 3 To terms\n            n3 = n1 + n2\n            Console.WriteLine(n3)\n            n1 = n2\n            n2 = n3\n        Next\n\n        Console.ReadLine()\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Construct a for loop that prints the multiplication table for a given number.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim number As Integer = 5 ' Example number\n        For i As Integer = 1 To 10\n            Console.WriteLine(number & \" x \" & i & \" = \" & (number * i))\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write code to iterate through a list of student grades and print only those above a certain threshold.",
    "code": "```vb\nDim grades As List(Of Integer) = New List(Of Integer) From {85, 92, 78, 90, 67, 88, 76}\nDim threshold As Integer = 80\n\nFor Each grade As Integer In grades\n    If grade > threshold Then\n        Console.WriteLine(grade)\n    End If\nNext\n```"
  },
  {
    "task": "Create a for loop that appends the square of numbers 1 to 10 to a list.",
    "code": "```vb\nDim numbers As New List(Of Integer)\n\nFor i As Integer = 1 To 10\n    numbers.Add(i * i)\nNext\n```"
  },
  {
    "task": "Develop a for loop that reverses a given string.",
    "code": "```vb\nFunction ReverseString(ByVal inputString As String) As String\n    Dim reversedString As String = \"\"\n    For i As Integer = inputString.Length - 1 To 0 Step -1\n        reversedString &= inputString(i)\n    Next\n    Return reversedString\nEnd Function\n```"
  },
  {
    "task": "Build a program that uses a for loop to print all elements in a 2D matrix.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim matrix(,) As Integer = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}\n        For i As Integer = 0 To matrix.GetLength(0) - 1\n            For j As Integer = 0 To matrix.GetLength(1) - 1\n                Console.WriteLine(matrix(i, j))\n            Next\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Use a for loop to find the maximum value in an array of integers.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers() As Integer = {3, 7, 2, 9, 1, 5}\n        Dim maxValue As Integer = numbers(0)\n        \n        For i As Integer = 1 To numbers.Length - 1\n            If numbers(i) > maxValue Then\n                maxValue = numbers(i)\n            End If\n        Next\n        \n        Console.WriteLine(\"The maximum value is: \" & maxValue)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a program that uses a for loop to print the characters of a string, one per line.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim inputString As String = \"Hello, World!\"\n        For i As Integer = 0 To inputString.Length - 1\n            Console.WriteLine(inputString(i))\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a for loop that counts the number of vowels in a given sentence.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim sentence As String = \"Your sentence here\"\n        Dim vowelCount As Integer = 0\n        Dim vowels As String = \"aeiouAEIOU\"\n\n        For i As Integer = 0 To sentence.Length - 1\n            If vowels.Contains(sentence(i)) Then\n                vowelCount += 1\n            End If\n        Next\n\n        Console.WriteLine(\"Number of vowels: \" & vowelCount)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a for loop to check if a number is prime by testing divisibility.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim number As Integer = 29\n        Dim isPrime As Boolean = True\n\n        If number < 2 Then\n            isPrime = False\n        Else\n            For i As Integer = 2 To Math.Sqrt(number)\n                If number Mod i = 0 Then\n                    isPrime = False\n                    Exit For\n                End If\n            Next\n        End If\n\n        If isPrime Then\n            Console.WriteLine(number & \" is a prime number.\")\n        Else\n            Console.WriteLine(number & \" is not a prime number.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a for loop that prints a pyramid pattern of asterisks with a given height.",
    "code": "```vb\nSub PrintPyramid(height As Integer)\n    For i As Integer = 1 To height\n        Dim spaces As Integer = height - i\n        Dim stars As Integer = 2 * i - 1\n        Console.Write(StrDup(spaces, \" \") & StrDup(stars, \"*\") & vbCrLf)\n    Next\nEnd Sub\n```"
  },
  {
    "task": "Write a program that uses a for loop to calculate the sum of digits of a number.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim number As Integer = 12345\n        Dim sumOfDigits As Integer = 0\n        Dim digit As Integer\n\n        For Each c As Char In number.ToString()\n            digit = Convert.ToInt32(c.ToString())\n            sumOfDigits += digit\n        Next\n\n        Console.WriteLine(\"The sum of the digits is: \" & sumOfDigits)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Construct a for loop to flatten a list of lists into a single list.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim listOfLists As List(Of List(Of Integer)) = New List(Of List(Of Integer)) From {\n            New List(Of Integer) From {1, 2, 3},\n            New List(Of Integer) From {4, 5, 6},\n            New List(Of Integer) From {7, 8, 9}\n        }\n        \n        Dim flatList As New List(Of Integer)\n        \n        For Each sublist In listOfLists\n            For Each item In sublist\n                flatList.Add(item)\n            Next\n        Next\n        \n        For Each item In flatList\n            Console.WriteLine(item)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Use a for loop to generate a list of random numbers and print them.",
    "code": "```vb\nImports System\n\nModule Module1\n    Sub Main()\n        Dim random As New Random()\n        For i As Integer = 1 To 10\n            Console.WriteLine(random.Next())\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a for loop that iterates through a dictionary and prints its keys and values.",
    "code": "```vb\nDim myDictionary As New Dictionary(Of String, String) From {\n    {\"key1\", \"value1\"},\n    {\"key2\", \"value2\"},\n    {\"key3\", \"value3\"}\n}\n\nFor Each kvp As KeyValuePair(Of String, String) In myDictionary\n    Console.WriteLine(\"Key: \" & kvp.Key & \", Value: \" & kvp.Value)\nNext\n```"
  },
  {
    "task": "Develop a for loop that counts down from 10 to 1 and prints each number.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        For i As Integer = 10 To 1 Step -1\n            Console.WriteLine(i)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write code to multiply each element in an array by 2 using a for loop.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers As Integer() = {1, 2, 3, 4, 5}\n        For i As Integer = 0 To numbers.Length - 1\n            numbers(i) *= 2\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a for loop that calculates the average of numbers in a list.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers As Integer() = {10, 20, 30, 40, 50}\n        Dim total As Integer = 0\n        Dim count As Integer = numbers.Length\n\n        For i As Integer = 0 To count - 1\n            total += numbers(i)\n        Next\n\n        Dim average As Double = total / count\n        Console.WriteLine(\"Average: \" & average)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a for loop to find duplicate elements in an array.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim arr() As Integer = {1, 2, 3, 4, 2, 5, 3, 6}\n        Dim duplicates As New List(Of Integer)\n\n        For i As Integer = 0 To arr.Length - 1\n            For j As Integer = i + 1 To arr.Length - 1\n                If arr(i) = arr(j) AndAlso Not duplicates.Contains(arr(i)) Then\n                    duplicates.Add(arr(i))\n                End If\n            Next\n        Next\n\n        Console.WriteLine(\"Duplicate elements:\")\n        For Each duplicate In duplicates\n            Console.WriteLine(duplicate)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a for loop that removes all occurrences of a specific element from a list.",
    "code": "```vb\nSub RemoveSpecificElement(ByRef list As List(Of Integer), ByVal element As Integer)\n    For i As Integer = list.Count - 1 To 0 Step -1\n        If list(i) = element Then\n            list.RemoveAt(i)\n        End If\n    Next i\nEnd Sub\n```"
  },
  {
    "task": "Use a for loop to simulate rolling a dice 100 times and count the occurrences of each face.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim rand As New Random()\n        Dim counts(6) As Integer\n\n        For i As Integer = 1 To 100\n            Dim roll As Integer = rand.Next(1, 7)\n            counts(roll) += 1\n        Next\n\n        For face As Integer = 1 To 6\n            Console.WriteLine(\"Face \" & face & \": \" & counts(face) & \" times\")\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a for loop that prints all the prime numbers between 1 and 50.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        For num As Integer = 2 To 50\n            Dim isPrime As Boolean = True\n            For i As Integer = 2 To Math.Sqrt(num)\n                If num Mod i = 0 Then\n                    isPrime = False\n                    Exit For\n                End If\n            Next\n            If isPrime Then\n                Console.WriteLine(num)\n            End If\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a for loop that extracts all the uppercase letters from a string.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim inputString As String = \"Your Input String Here\"\n        Dim upperCaseLetters As String = \"\"\n\n        For i As Integer = 0 To inputString.Length - 1\n            If Char.IsUpper(inputString(i)) Then\n                upperCaseLetters &= inputString(i)\n            End If\n        Next\n\n        Console.WriteLine(upperCaseLetters)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a for loop that checks if a list is sorted in ascending order.",
    "code": "```vb\nDim numbers As List(Of Integer) = New List(Of Integer) From {1, 2, 3, 4, 5}\nDim isSorted As Boolean = True\n\nFor i As Integer = 0 To numbers.Count - 2\n    If numbers(i) > numbers(i + 1) Then\n        isSorted = False\n        Exit For\n    End If\nNext\n\nConsole.WriteLine(\"List is sorted: \" & isSorted)\n```"
  },
  {
    "task": "Implement a for loop to generate a list of the first 10 square numbers.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim squareNumbers As New List(Of Integer)\n        For i As Integer = 1 To 10\n            squareNumbers.Add(i * i)\n        Next\n        For Each num As Integer In squareNumbers\n            Console.WriteLine(num)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write code to print all the elements of a list that are greater than a given number using a for loop.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers As Integer() = {2, 5, 8, 1, 9, 7}\n        Dim threshold As Integer = 4\n        Dim i As Integer\n\n        For i = 0 To numbers.Length - 1\n            If numbers(i) > threshold Then\n                Console.WriteLine(numbers(i))\n            End If\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Construct a for loop that finds the smallest number in an array.",
    "code": "```vb\nDim numbers() As Integer = {10, 3, 6, 1, 8, 4}\nDim smallest As Integer = numbers(0)\n\nFor i As Integer = 1 To numbers.Length - 1\n    If numbers(i) < smallest Then\n        smallest = numbers(i)\n    End If\nNext\n\nConsole.WriteLine(\"The smallest number is: \" & smallest)\n```"
  },
  {
    "task": "Develop a for loop that prints the first N lines of Pascal's Triangle.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim N As Integer = 5 ' You can set N to any desired number of lines\n        For i As Integer = 0 To N - 1\n            Dim line As String = \"\"\n            Dim number As Integer = 1\n            For j As Integer = 0 To i\n                line &= number.ToString() & \" \"\n                number = number * (i - j) \\ (j + 1)\n            Next\n            Console.WriteLine(line.Trim())\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a for loop that calculates the product of all elements in a list.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers As Integer() = {1, 2, 3, 4, 5}\n        Dim product As Integer = 1\n        \n        For i As Integer = 0 To numbers.Length - 1\n            product *= numbers(i)\n        Next\n        \n        Console.WriteLine(\"Product: \" & product)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Use a for loop to print numbers from 1 to 100, but replace multiples of 3 with 'Fizz'.",
    "code": "```vb\nFor i As Integer = 1 To 100\n    If i Mod 3 = 0 Then\n        Console.WriteLine(\"Fizz\")\n    Else\n        Console.WriteLine(i)\n    End If\nNext\n```"
  },
  {
    "task": "Write a for loop that iterates over a string and counts the number of words.",
    "code": "```vb\nDim inputString As String = \"This is a sample string to count words\"\nDim wordCount As Integer = 0\nDim words() As String = inputString.Split(New Char() {\" \"c}, StringSplitOptions.RemoveEmptyEntries)\n\nFor i As Integer = 0 To words.Length - 1\n    wordCount += 1\nNext\n\nConsole.WriteLine(\"Number of words: \" & wordCount)\n```"
  },
  {
    "task": "Design a for loop that prints numbers from 1 to 50, but skips numbers divisible by 5.",
    "code": "```vb\nFor i As Integer = 1 To 50\n    If i Mod 5 <> 0 Then\n        Console.WriteLine(i)\n    End If\nNext\n```"
  },
  {
    "task": "Implement a for loop that prints a checkerboard pattern of asterisks.",
    "code": "```vb\nModule CheckerboardPattern\n    Sub Main()\n        Dim rows As Integer = 8\n        Dim cols As Integer = 8\n        For i As Integer = 0 To rows - 1\n            For j As Integer = 0 To cols - 1\n                If (i + j) Mod 2 = 0 Then\n                    Console.Write(\"*\")\n                Else\n                    Console.Write(\" \")\n                End If\n            Next\n            Console.WriteLine()\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a for loop that finds the index of a target value in a list.",
    "code": "```vb\nDim numbers As List(Of Integer) = New List(Of Integer)({10, 20, 30, 40, 50})\nDim target As Integer = 30\nDim targetIndex As Integer = -1\n\nFor i As Integer = 0 To numbers.Count - 1\n    If numbers(i) = target Then\n        targetIndex = i\n        Exit For\n    End If\nNext\n\nConsole.WriteLine(\"Index of target: \" & targetIndex)\n```"
  },
  {
    "task": "Use a for loop to concatenate a list of strings into a single string.",
    "code": "```vb\nDim strings As List(Of String) = New List(Of String) From {\"Hello\", \"World\", \"Visual\", \"Basic\"}\nDim result As String = \"\"\n\nFor Each str As String In strings\n    result &= str\nNext\n\nConsole.WriteLine(result)\n```"
  },
  {
    "task": "Develop a for loop that rotates a list to the right by a given number of positions.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim list As Integer() = {1, 2, 3, 4, 5}\n        Dim positions As Integer = 2\n        RotateListRight(list, positions)\n        \n        For Each item As Integer In list\n            Console.Write(item & \" \")\n        Next\n    End Sub\n\n    Sub RotateListRight(ByRef list As Integer(), ByVal positions As Integer)\n        Dim n As Integer = list.Length\n        Dim rotatedList As Integer() = New Integer(n - 1) {}\n        \n        For i As Integer = 0 To n - 1\n            Dim newIndex As Integer = (i + positions) Mod n\n            rotatedList(newIndex) = list(i)\n        Next\n        \n        For i As Integer = 0 To n - 1\n            list(i) = rotatedList(i)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write code that uses a for loop to insert an element into a sorted list while maintaining order.",
    "code": "```vb\nDim sortedList As New List(Of Integer) From {1, 3, 5, 7, 9}\nDim newElement As Integer = 6\nDim inserted As Boolean = False\n\nFor i As Integer = 0 To sortedList.Count - 1\n    If newElement < sortedList(i) Then\n        sortedList.Insert(i, newElement)\n        inserted = True\n        Exit For\n    End If\nNext\n\nIf Not inserted Then\n    sortedList.Add(newElement)\nEnd If\n```"
  },
  {
    "task": "Implement a for loop that counts the frequency of each character in a string.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim inputString As String = \"example string\"\n        Dim frequency As New Dictionary(Of Char, Integer)\n\n        For i As Integer = 0 To inputString.Length - 1\n            Dim ch As Char = inputString(i)\n            If frequency.ContainsKey(ch) Then\n                frequency(ch) += 1\n            Else\n                frequency(ch) = 1\n            End If\n        Next\n\n        For Each kvp As KeyValuePair(Of Char, Integer) In frequency\n            Console.WriteLine(\"Character: \" & kvp.Key & \" Frequency: \" & kvp.Value)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a for loop that prints all subsets of a given set.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim setElements() As String = {\"a\", \"b\", \"c\"}\n        Dim numSubsets As Integer = 2 ^ setElements.Length\n\n        For i As Integer = 0 To numSubsets - 1\n            Console.Write(\"{\")\n            For j As Integer = 0 To setElements.Length - 1\n                If (i And (1 << j)) <> 0 Then\n                    Console.Write(setElements(j) & \" \")\n                End If\n            Next\n            Console.WriteLine(\"}\")\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a for loop to generate all permutations of a string.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim str As String = \"abc\"\n        Permute(str, 0, str.Length - 1)\n    End Sub\n\n    Sub Permute(ByVal str As String, ByVal l As Integer, ByVal r As Integer)\n        If l = r Then\n            Console.WriteLine(str)\n        Else\n            For i As Integer = l To r\n                str = Swap(str, l, i)\n                Permute(str, l + 1, r)\n                str = Swap(str, l, i)\n            Next\n        End If\n    End Sub\n\n    Function Swap(ByVal str As String, ByVal i As Integer, ByVal j As Integer) As String\n        Dim charArray() As Char = str.ToCharArray()\n        Dim temp As Char = charArray(i)\n        charArray(i) = charArray(j)\n        charArray(j) = temp\n        Return New String(charArray)\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Write a for loop that sorts an array in descending order.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim arr() As Integer = {5, 3, 8, 6, 2}\n        Dim temp As Integer\n\n        For i As Integer = 0 To arr.Length - 2\n            For j As Integer = i + 1 To arr.Length - 1\n                If arr(i) < arr(j) Then\n                    temp = arr(i)\n                    arr(i) = arr(j)\n                    arr(j) = temp\n                End If\n            Next\n        Next\n\n        For Each num As Integer In arr\n            Console.WriteLine(num)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Use a for loop to generate a sequence of random characters and print them.",
    "code": "```vb\nImports System\n\nModule Program\n    Sub Main()\n        Dim random As New Random()\n        Dim characters As String = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"\n        Dim output As String = \"\"\n\n        For i As Integer = 1 To 10 ' Adjust the range to generate more or fewer characters\n            Dim index As Integer = random.Next(0, characters.Length)\n            output &= characters(index)\n        Next\n\n        Console.WriteLine(output)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Construct a for loop that finds the common elements between two lists.",
    "code": "```vb\nDim list1 As New List(Of Integer) From {1, 2, 3, 4, 5}\nDim list2 As New List(Of Integer) From {3, 4, 5, 6, 7}\nDim commonElements As New List(Of Integer)\n\nFor Each item1 In list1\n    For Each item2 In list2\n        If item1 = item2 Then\n            commonElements.Add(item1)\n            Exit For\n        End If\n    Next\nNext\n\nFor Each commonItem In commonElements\n    Console.WriteLine(commonItem)\nNext\n```"
  },
  {
    "task": "Develop a for loop to calculate and print the cumulative sum of a list.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers As Integer() = {1, 2, 3, 4, 5}\n        Dim cumulativeSum As Integer = 0\n        \n        For i As Integer = 0 To numbers.Length - 1\n            cumulativeSum += numbers(i)\n            Console.WriteLine(\"Cumulative Sum: \" & cumulativeSum)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a for loop that prints a diamond pattern using asterisks.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim n As Integer = 5 ' Height of the diamond\n        Dim i As Integer, j As Integer\n\n        ' Upper part of the diamond\n        For i = 1 To n\n            For j = 1 To n - i\n                Console.Write(\" \")\n            Next\n            For j = 1 To 2 * i - 1\n                Console.Write(\"*\")\n            Next\n            Console.WriteLine()\n        Next\n\n        ' Lower part of the diamond\n        For i = n - 1 To 1 Step -1\n            For j = 1 To n - i\n                Console.Write(\" \")\n            Next\n            For j = 1 To 2 * i - 1\n                Console.Write(\"*\")\n            Next\n            Console.WriteLine()\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a for loop that simulates a countdown timer from a specified number of seconds.",
    "code": "```vb\nSub CountdownTimer(seconds As Integer)\n    For i As Integer = seconds To 0 Step -1\n        Console.WriteLine(i)\n        System.Threading.Thread.Sleep(1000) ' Pause for 1 second\n    Next\nEnd Sub\n```"
  },
  {
    "task": "Use a for loop to print the transpose of a matrix.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim matrix(,) As Integer = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}\n        Dim rows As Integer = matrix.GetLength(0)\n        Dim cols As Integer = matrix.GetLength(1)\n\n        For i As Integer = 0 To cols - 1\n            For j As Integer = 0 To rows - 1\n                Console.Write(matrix(j, i).ToString() & \" \")\n            Next\n            Console.WriteLine()\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a for loop that reverses the order of words in a sentence.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim sentence As String = \"Hello world this is a test\"\n        Dim words() As String = sentence.Split(\" \"c)\n        Dim reversedSentence As String = \"\"\n        \n        For i As Integer = words.Length - 1 To 0 Step -1\n            reversedSentence &= words(i) & \" \"\n        Next\n        \n        reversedSentence = reversedSentence.Trim()\n        Console.WriteLine(reversedSentence)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a for loop that deletes elements from a list that are less than a given value.",
    "code": "```vb\nSub RemoveElementsLessThan(ByVal list As List(Of Integer), ByVal threshold As Integer)\n    For i As Integer = list.Count - 1 To 0 Step -1\n        If list(i) < threshold Then\n            list.RemoveAt(i)\n        End If\n    Next\nEnd Sub\n```"
  },
  {
    "task": "Design a for loop to merge two sorted lists into a single sorted list.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim list1 As List(Of Integer) = New List(Of Integer) From {1, 3, 5, 7}\n        Dim list2 As List(Of Integer) = New List(Of Integer) From {2, 4, 6, 8}\n        Dim mergedList As List(Of Integer) = New List(Of Integer)\n\n        Dim i As Integer = 0\n        Dim j As Integer = 0\n\n        For k As Integer = 0 To list1.Count + list2.Count - 1\n            If i < list1.Count AndAlso (j >= list2.Count OrElse list1(i) <= list2(j)) Then\n                mergedList.Add(list1(i))\n                i += 1\n            Else\n                mergedList.Add(list2(j))\n                j += 1\n            End If\n        Next\n\n        For Each num As Integer In mergedList\n            Console.WriteLine(num)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a for loop that calculates the power of a number using repeated multiplication.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim base As Double = 2\n        Dim exponent As Integer = 3\n        Dim result As Double = 1\n\n        For i As Integer = 1 To exponent\n            result *= base\n        Next\n\n        Console.WriteLine(\"Result: \" & result)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Use a for loop to find the longest word in a list of words.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim words As String() = {\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"}\n        Dim longestWord As String = \"\"\n        \n        For i As Integer = 0 To words.Length - 1\n            If words(i).Length > longestWord.Length Then\n                longestWord = words(i)\n            End If\n        Next\n\n        Console.WriteLine(\"The longest word is: \" & longestWord)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a for loop that sorts a list of tuples based on the second element.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim tuples As List(Of Tuple(Of Integer, Integer)) = New List(Of Tuple(Of Integer, Integer)) From {\n            New Tuple(Of Integer, Integer)(1, 3),\n            New Tuple(Of Integer, Integer)(4, 1),\n            New Tuple(Of Integer, Integer)(2, 2)\n        }\n\n        Dim sortedTuples As List(Of Tuple(Of Integer, Integer)) = tuples.OrderBy(Function(t) t.Item2).ToList()\n\n        For Each t As Tuple(Of Integer, Integer) In sortedTuples\n            Console.WriteLine(\"(\" & t.Item1 & \", \" & t.Item2 & \")\")\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a for loop that replicates each character in a string a given number of times.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim inputString As String = \"abc\"\n        Dim repeatCount As Integer = 3\n        Dim result As String = \"\"\n\n        For Each ch As Char In inputString\n            For i As Integer = 1 To repeatCount\n                result &= ch\n            Next\n        Next\n\n        Console.WriteLine(result)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Construct a for loop that replaces spaces in a string with hyphens.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim inputString As String = \"This is a test string\"\n        Dim outputString As String = \"\"\n\n        For i As Integer = 0 To inputString.Length - 1\n            If inputString(i) = \" \"c Then\n                outputString &= \"-\"c\n            Else\n                outputString &= inputString(i)\n            End If\n        Next\n\n        Console.WriteLine(outputString)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a for loop to find the intersection of two sets.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim set1 As Integer() = {1, 2, 3, 4, 5}\n        Dim set2 As Integer() = {3, 4, 5, 6, 7}\n        Dim intersection As New List(Of Integer)()\n\n        For Each item1 In set1\n            For Each item2 In set2\n                If item1 = item2 Then\n                    intersection.Add(item1)\n                    Exit For\n                End If\n            Next\n        Next\n\n        Console.WriteLine(\"Intersection of the two sets:\")\n        For Each item In intersection\n            Console.WriteLine(item)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a for loop that generates a list of prime numbers up to a given number.",
    "code": "```vb\nFunction IsPrime(ByVal num As Integer) As Boolean\n    If num <= 1 Then Return False\n    For i As Integer = 2 To Math.Sqrt(num)\n        If num Mod i = 0 Then Return False\n    Next\n    Return True\nEnd Function\n\nFunction GeneratePrimes(ByVal limit As Integer) As List(Of Integer)\n    Dim primes As New List(Of Integer)\n    For num As Integer = 2 To limit\n        If IsPrime(num) Then\n            primes.Add(num)\n        End If\n    Next\n    Return primes\nEnd Function\n```"
  },
  {
    "task": "Use a for loop to implement a simple text-based progress bar.",
    "code": "```vb\nModule ProgressBar\n    Sub Main()\n        Dim total As Integer = 50\n        For i As Integer = 1 To total\n            Console.Write(\"[\")\n            For j As Integer = 1 To total\n                If j <= i Then\n                    Console.Write(\"=\")\n                Else\n                    Console.Write(\" \")\n                End If\n            Next\n            Console.Write(\"] {0}%\", CInt((i / total) * 100))\n            Console.Write(vbCr)\n            Threading.Thread.Sleep(100)\n        Next\n        Console.WriteLine()\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a for loop that finds and prints all palindromic numbers between 10 and 200.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        For i As Integer = 10 To 200\n            Dim strNum As String = i.ToString()\n            Dim revStrNum As String = StrReverse(strNum)\n            If strNum = revStrNum Then\n                Console.WriteLine(i)\n            End If\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a for loop that multiplies corresponding elements of two lists and stores the result.",
    "code": "```vb\nDim list1 As List(Of Integer) = New List(Of Integer)({1, 2, 3})\nDim list2 As List(Of Integer) = New List(Of Integer)({4, 5, 6})\nDim resultList As List(Of Integer) = New List(Of Integer)()\n\nFor i As Integer = 0 To Math.Min(list1.Count, list2.Count) - 1\n    resultList.Add(list1(i) * list2(i))\nNext\n```"
  },
  {
    "task": "Develop a for loop that finds the difference between the largest and smallest numbers in a list.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers() As Integer = {5, 3, 9, 1, 6}\n        Dim min As Integer = Integer.MaxValue\n        Dim max As Integer = Integer.MinValue\n        \n        For i As Integer = 0 To numbers.Length - 1\n            If numbers(i) < min Then\n                min = numbers(i)\n            End If\n            If numbers(i) > max Then\n                max = numbers(i)\n            End If\n        Next\n        \n        Dim difference As Integer = max - min\n        Console.WriteLine(\"Difference: \" & difference)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a for loop that prints numbers from 1 to 100, replacing multiples of 5 with 'Buzz'.",
    "code": "```vb\nFor i As Integer = 1 To 100\n    If i Mod 5 = 0 Then\n        Console.WriteLine(\"Buzz\")\n    Else\n        Console.WriteLine(i)\n    End If\nNext\n```"
  },
  {
    "task": "Use a for loop to convert a list of integers into their binary representation.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers As Integer() = {5, 8, 12, 15, 21}\n        Dim binaryList As New List(Of String)\n\n        For i As Integer = 0 To numbers.Length - 1\n            binaryList.Add(Convert.ToString(numbers(i), 2))\n        Next\n\n        For Each binary As String In binaryList\n            Console.WriteLine(binary)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a for loop that fills a 2D array with consecutive numbers in a spiral pattern.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim n As Integer = 4 ' Define the size of the 2D array (n x n)\n        Dim spiral(n - 1, n - 1) As Integer\n        Dim num As Integer = 1\n        Dim top As Integer = 0\n        Dim bottom As Integer = n - 1\n        Dim left As Integer = 0\n        Dim right As Integer = n - 1\n\n        While top <= bottom AndAlso left <= right\n            For i As Integer = left To right\n                spiral(top, i) = num\n                num += 1\n            Next\n            top += 1\n\n            For i As Integer = top To bottom\n                spiral(i, right) = num\n                num += 1\n            Next\n            right -= 1\n\n            If top <= bottom Then\n                For i As Integer = right To left Step -1\n                    spiral(bottom, i) = num\n                    num += 1\n                Next\n                bottom -= 1\n            End If\n\n            If left <= right Then\n                For i As Integer = bottom To top Step -1\n                    spiral(i, left) = num\n                    num += 1\n                Next\n                left += 1\n            End If\n        End While\n\n        For i As Integer = 0 To n - 1\n            For j As Integer = 0 To n - 1\n                Console.Write(spiral(i, j).ToString(\"D2\") & \" \")\n            Next\n            Console.WriteLine()\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a for loop that iterates over a list and removes duplicates.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim originalList As New List(Of Integer) From {1, 2, 3, 2, 4, 1, 5}\n        Dim uniqueList As New List(Of Integer)\n\n        For Each item In originalList\n            If Not uniqueList.Contains(item) Then\n                uniqueList.Add(item)\n            End If\n        Next\n\n        For Each uniqueItem In uniqueList\n            Console.WriteLine(uniqueItem)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a for loop to calculate the dot product of two vectors.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim vector1() As Integer = {1, 2, 3}\n        Dim vector2() As Integer = {4, 5, 6}\n        Dim dotProduct As Integer = 0\n\n        For i As Integer = 0 To vector1.Length - 1\n            dotProduct += vector1(i) * vector2(i)\n        Next\n\n        Console.WriteLine(\"Dot Product: \" & dotProduct)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a for loop that prints a sequence of numbers in reverse order.",
    "code": "```vb\nFor i As Integer = 10 To 1 Step -1\n    Console.WriteLine(i)\nNext\n```"
  },
  {
    "task": "Develop a for loop that computes the greatest common divisor (GCD) of two numbers.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim number1 As Integer = 48\n        Dim number2 As Integer = 18\n        Dim gcd As Integer = 1\n\n        For i As Integer = 1 To Math.Min(number1, number2)\n            If number1 Mod i = 0 And number2 Mod i = 0 Then\n                gcd = i\n            End If\n        Next\n\n        Console.WriteLine(\"The GCD of \" & number1 & \" and \" & number2 & \" is: \" & gcd)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Construct a for loop that prints a square pattern of numbers with a given side length.",
    "code": "```vb\nSub PrintSquarePattern(ByVal sideLength As Integer)\n    Dim i As Integer\n    Dim j As Integer\n    \n    For i = 1 To sideLength\n        For j = 1 To sideLength\n            Console.Write(j & \" \")\n        Next j\n        Console.WriteLine()\n    Next i\nEnd Sub\n```"
  },
  {
    "task": "Create a for loop that shifts all elements of a list to the left by one position.",
    "code": "```vb\nDim numbers As List(Of Integer) = New List(Of Integer)({1, 2, 3, 4, 5})\nDim firstElement As Integer = numbers(0)\n\nFor i As Integer = 0 To numbers.Count - 2\n    numbers(i) = numbers(i + 1)\nNext\n\nnumbers(numbers.Count - 1) = firstElement\n```"
  },
  {
    "task": "Use a for loop to print the first 20 triangular numbers.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        For n As Integer = 1 To 20\n            Dim triangularNumber As Integer = n * (n + 1) \\ 2\n            Console.WriteLine(triangularNumber)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a for loop that finds the first repeating character in a string.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim input As String = \"exampleinput\"\n        Dim seen As New HashSet(Of Char)()\n\n        For Each c As Char In input\n            If seen.Contains(c) Then\n                Console.WriteLine(\"First repeating character: \" & c)\n                Exit For\n            End If\n            seen.Add(c)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a for loop that transforms a list of temperatures from Celsius to Fahrenheit.",
    "code": "```vb\nModule TemperatureConverter\n    Sub Main()\n        Dim celsiusTemperatures As Double() = {0, 20, 37, 100}\n        Dim fahrenheitTemperatures(celsiusTemperatures.Length - 1) As Double\n        \n        For i As Integer = 0 To celsiusTemperatures.Length - 1\n            fahrenheitTemperatures(i) = celsiusTemperatures(i) * 9 / 5 + 32\n        Next\n        \n        For Each temp As Double In fahrenheitTemperatures\n            Console.WriteLine(temp)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a for loop to determine if a string is an isogram.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim input As String = \"example\"\n        Dim isIsogram As Boolean = True\n\n        For i As Integer = 0 To input.Length - 1\n            For j As Integer = i + 1 To input.Length - 1\n                If Char.ToLower(input(i)) = Char.ToLower(input(j)) Then\n                    isIsogram = False\n                    Exit For\n                End If\n            Next\n            If Not isIsogram Then Exit For\n        Next\n\n        Console.WriteLine(\"Is the string an isogram? \" & isIsogram)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Use a for loop to create a histogram from a list of integers.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers As Integer() = {3, 5, 2, 6, 4}\n        For Each number As Integer In numbers\n            For i As Integer = 1 To number\n                Console.Write(\"*\")\n            Next\n            Console.WriteLine()\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a for loop that prints the indexes of all occurrences of a particular element in a list.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim list As Integer() = {1, 2, 3, 2, 4, 2}\n        Dim target As Integer = 2\n\n        For i As Integer = 0 To list.Length - 1\n            If list(i) = target Then\n                Console.WriteLine(i)\n            End If\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a for loop that checks if a given string is a palindrome.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim inputString As String = \"radar\"\n        Dim isPalindrome As Boolean = True\n        Dim length As Integer = inputString.Length\n\n        For i As Integer = 0 To length \\ 2\n            If inputString(i) <> inputString(length - i - 1) Then\n                isPalindrome = False\n                Exit For\n            End If\n        Next\n\n        If isPalindrome Then\n            Console.WriteLine(\"The string is a palindrome.\")\n        Else\n            Console.WriteLine(\"The string is not a palindrome.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a for loop to simulate the behavior of a simple finite state machine.",
    "code": "```vb\nModule FiniteStateMachine\n    Sub Main()\n        Dim states As String() = {\"State1\", \"State2\", \"State3\"}\n        Dim currentState As String = states(0)\n\n        For i As Integer = 0 To states.Length - 1\n            currentState = states(i)\n            Console.WriteLine(\"Current State: \" & currentState)\n        Next\n\n        Console.WriteLine(\"Finite State Machine completed.\")\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a for loop that finds the sum of all odd numbers in a list.",
    "code": "```vb\nDim numbers As List(Of Integer) = New List(Of Integer) From {1, 2, 3, 4, 5}\nDim sum As Integer = 0\n\nFor Each num As Integer In numbers\n    If num Mod 2 <> 0 Then\n        sum += num\n    End If\nNext\n\nConsole.WriteLine(\"Sum of odd numbers: \" & sum)\n```"
  },
  {
    "task": "Use a for loop to count how many words start with a vowel in a given sentence.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim sentence As String = \"Example input sentence with various words\"\n        Dim words() As String = sentence.Split(\" \"c)\n        Dim vowelCount As Integer = 0\n        Dim vowels As String = \"AEIOUaeiou\"\n\n        For Each word As String In words\n            If word.Length > 0 AndAlso vowels.Contains(word(0)) Then\n                vowelCount += 1\n            End If\n        Next\n\n        Console.WriteLine(\"Number of words starting with a vowel: \" & vowelCount)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a for loop that sorts a list of strings by their length.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim strings As New List(Of String) From {\"apple\", \"banana\", \"cherry\", \"date\"}\n        \n        For i As Integer = 0 To strings.Count - 1\n            For j As Integer = i + 1 To strings.Count - 1\n                If strings(i).Length > strings(j).Length Then\n                    Dim temp As String = strings(i)\n                    strings(i) = strings(j)\n                    strings(j) = temp\n                End If\n            Next\n        Next\n\n        For Each str As String In strings\n            Console.WriteLine(str)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a for loop that prints the factorial of numbers from 1 to 10.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        For i As Integer = 1 To 10\n            Dim factorial As Integer = 1\n            For j As Integer = 1 To i\n                factorial *= j\n            Next\n            Console.WriteLine(\"Factorial of \" & i & \" is \" & factorial)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a for loop that replaces all instances of a substring in a string with another substring.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim originalString As String = \"Replace this substring with another substring.\"\n        Dim searchString As String = \"substring\"\n        Dim replaceString As String = \"word\"\n        Dim startIndex As Integer = 0\n        \n        For i As Integer = 1 To CountOccurrences(originalString, searchString)\n            startIndex = originalString.IndexOf(searchString, startIndex)\n            If startIndex >= 0 Then\n                originalString = originalString.Substring(0, startIndex) & replaceString & originalString.Substring(startIndex + searchString.Length)\n                startIndex += replaceString.Length\n            Else\n                Exit For\n            End If\n        Next\n\n        Console.WriteLine(originalString)\n    End Sub\n    \n    Function CountOccurrences(ByVal str As String, ByVal substr As String) As Integer\n        Dim count As Integer = 0\n        Dim pos As Integer = str.IndexOf(substr)\n        While pos <> -1\n            count += 1\n            pos = str.IndexOf(substr, pos + substr.Length)\n        End While\n        Return count\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Develop a for loop that squares each element in a list of numbers.",
    "code": "```vb\nDim numbers As List(Of Integer) = New List(Of Integer) From {1, 2, 3, 4, 5}\nDim squaredNumbers As New List(Of Integer)\n\nFor i As Integer = 0 To numbers.Count - 1\n    squaredNumbers.Add(numbers(i) * numbers(i))\nNext\n```"
  },
  {
    "task": "Use a for loop to reverse the order of elements in an array.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim arr() As Integer = {1, 2, 3, 4, 5}\n        Dim n As Integer = arr.Length\n\n        For i As Integer = 0 To n \\ 2 - 1\n            Dim temp As Integer = arr(i)\n            arr(i) = arr(n - i - 1)\n            arr(n - i - 1) = temp\n        Next\n\n        For Each num As Integer In arr\n            Console.WriteLine(num)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a for loop that tests if two strings are anagrams of each other.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim str1 As String = \"listen\"\n        Dim str2 As String = \"silent\"\n        Dim isAnagram As Boolean = True\n\n        If str1.Length <> str2.Length Then\n            isAnagram = False\n        Else\n            Dim charCount(255) As Integer\n\n            For Each c As Char In str1\n                charCount(Asc(c)) += 1\n            Next\n\n            For Each c As Char In str2\n                charCount(Asc(c)) -= 1\n            Next\n\n            For i As Integer = 0 To 255\n                If charCount(i) <> 0 Then\n                    isAnagram = False\n                    Exit For\n                End If\n            Next\n        End If\n\n        Console.WriteLine(\"The strings are anagrams: \" & isAnagram)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a for loop to find and print all Armstrong numbers between 100 and 999.",
    "code": "```vb\nModule ArmstrongNumbers\n    Sub Main()\n        For num As Integer = 100 To 999\n            Dim sum As Integer = 0\n            Dim temp As Integer = num\n            While temp > 0\n                Dim digit As Integer = temp Mod 10\n                sum += digit ^ 3\n                temp \\= 10\n            End While\n            If sum = num Then\n                Console.WriteLine(num)\n            End If\n        Next\n    End Sub\nEnd Module\n```"
  }
]