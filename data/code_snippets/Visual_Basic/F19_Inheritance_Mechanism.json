[
  {
    "task": "Create a base class for a vehicle with methods for speed and fuel efficiency, then derive a car class that overrides these methods to provide specific implementations.",
    "code": "```vb\nPublic Class Vehicle\n    Public Overridable Function GetSpeed() As Double\n        Return 0.0\n    End Function\n\n    Public Overridable Function GetFuelEfficiency() As Double\n        Return 0.0\n    End Function\nEnd Class\n\nPublic Class Car\n    Inherits Vehicle\n\n    Public Overrides Function GetSpeed() As Double\n        Return 120.0 ' Example speed in km/h\n    End Function\n\n    Public Overrides Function GetFuelEfficiency() As Double\n        Return 15.0 ' Example fuel efficiency in km/l\n    End Function\nEnd Class\n```"
  },
  {
    "task": "Design a base class for a multimedia file with properties like duration and format, then extend it with a video class that includes resolution and frame rate.",
    "code": "```vb\nPublic Class MultimediaFile\n    Public Property Duration As Integer\n    Public Property Format As String\nEnd Class\n\nPublic Class VideoFile\n    Inherits MultimediaFile\n\n    Public Property Resolution As String\n    Public Property FrameRate As Double\nEnd Class\n```"
  },
  {
    "task": "Develop a superclass for bank accounts with methods for deposit and withdrawal, then create a savings account subclass that overrides the withdrawal method to incorporate interest deductions.",
    "code": "```vb\nPublic Class BankAccount\n    Protected Balance As Decimal\n\n    Public Sub New(initialBalance As Decimal)\n        Balance = initialBalance\n    End Sub\n\n    Public Overridable Sub Deposit(amount As Decimal)\n        Balance += amount\n    End Sub\n\n    Public Overridable Sub Withdraw(amount As Decimal)\n        If amount <= Balance Then\n            Balance -= amount\n        End If\n    End Sub\n\n    Public Function GetBalance() As Decimal\n        Return Balance\n    End Function\nEnd Class\n\nPublic Class SavingsAccount\n    Inherits BankAccount\n    Private interestRate As Decimal\n\n    Public Sub New(initialBalance As Decimal, rate As Decimal)\n        MyBase.New(initialBalance)\n        interestRate = rate\n    End Sub\n\n    Public Overrides Sub Withdraw(amount As Decimal)\n        Dim interestDeduction As Decimal = amount * interestRate\n        Dim totalAmount As Decimal = amount + interestDeduction\n        If totalAmount <= Balance Then\n            Balance -= totalAmount\n        End If\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Implement a base class for a geometric shape with methods to calculate area and perimeter, then create a rectangle subclass that provides specific calculations for these methods.",
    "code": "```vb\nPublic Class Shape\n    Public Overridable Function CalculateArea() As Double\n        Return 0\n    End Function\n\n    Public Overridable Function CalculatePerimeter() As Double\n        Return 0\n    End Function\nEnd Class\n\nPublic Class Rectangle\n    Inherits Shape\n\n    Private _width As Double\n    Private _height As Double\n\n    Public Sub New(ByVal width As Double, ByVal height As Double)\n        _width = width\n        _height = height\n    End Sub\n\n    Public Overrides Function CalculateArea() As Double\n        Return _width * _height\n    End Function\n\n    Public Overrides Function CalculatePerimeter() As Double\n        Return 2 * (_width + _height)\n    End Function\nEnd Class\n```"
  },
  {
    "task": "Construct a parent class for employees with a method to calculate salary, then derive a manager class that overrides this method to include bonuses.",
    "code": "```vb\nPublic Class Employee\n    Public Overridable Function CalculateSalary() As Double\n        ' Basic salary calculation\n        Return 40000\n    End Function\nEnd Class\n\nPublic Class Manager\n    Inherits Employee\n\n    Public Overrides Function CalculateSalary() As Double\n        ' Manager salary calculation includes bonus\n        Dim baseSalary As Double = MyBase.CalculateSalary()\n        Dim bonus As Double = 10000\n        Return baseSalary + bonus\n    End Function\nEnd Class\n```"
  },
  {
    "task": "Set up a base class for a library item with properties like title and author, and extend it with a book subclass that adds a number of pages property.",
    "code": "```vb\nPublic Class LibraryItem\n    Public Property Title As String\n    Public Property Author As String\nEnd Class\n\nPublic Class Book\n    Inherits LibraryItem\n    Public Property NumberOfPages As Integer\nEnd Class\n```"
  },
  {
    "task": "Create a foundation class for an electronic device with a method to turn on and off, and derive a smartphone class that overrides the turn on method to require a passcode.",
    "code": "```vb\nPublic Class ElectronicDevice\n    Public Overridable Sub TurnOn()\n        Console.WriteLine(\"Device is now ON.\")\n    End Sub\n\n    Public Sub TurnOff()\n        Console.WriteLine(\"Device is now OFF.\")\n    End Sub\nEnd Class\n\nPublic Class Smartphone\n    Inherits ElectronicDevice\n\n    Public Overrides Sub TurnOn()\n        Console.WriteLine(\"Enter passcode to turn on the Smartphone.\")\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Design a base class for an animal with a method to make a sound, then create a dog subclass that overrides this method to bark.",
    "code": "```vb\nPublic Class Animal\n    Public Overridable Sub MakeSound()\n        Console.WriteLine(\"Animal sound\")\n    End Sub\nEnd Class\n\nPublic Class Dog\n    Inherits Animal\n\n    Public Overrides Sub MakeSound()\n        Console.WriteLine(\"Bark\")\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Develop a superclass for meals with a method to calculate calories, then create a dessert subclass that overrides it to add extra sugar calories.",
    "code": "```vb\nPublic Class Meal\n    Public Overridable Function CalculateCalories() As Integer\n        ' Base calorie calculation logic\n        Return 500\n    End Function\nEnd Class\n\nPublic Class Dessert\n    Inherits Meal\n\n    Public Overrides Function CalculateCalories() As Integer\n        Dim baseCalories As Integer = MyBase.CalculateCalories()\n        Dim sugarCalories As Integer = 200\n        Return baseCalories + sugarCalories\n    End Function\nEnd Class\n```"
  },
  {
    "task": "Implement a base class for a transportation mode with a method to calculate travel time, then extend it with a plane subclass that overrides the method to calculate based on speed.",
    "code": "```vb\nPublic Class TransportationMode\n    Public Overridable Function CalculateTravelTime(ByVal distance As Double) As Double\n        ' Default implementation\n        Return 0\n    End Function\nEnd Class\n\nPublic Class Plane\n    Inherits TransportationMode\n\n    Private speed As Double\n\n    Public Sub New(ByVal planeSpeed As Double)\n        speed = planeSpeed\n    End Sub\n\n    Public Overrides Function CalculateTravelTime(ByVal distance As Double) As Double\n        Return distance / speed\n    End Function\nEnd Class\n```"
  },
  {
    "task": "Construct a parent class for a musical instrument with a method to play sound, then derive a piano class that overrides the method to play specific notes.",
    "code": "```vb\nPublic Class MusicalInstrument\n    Public Overridable Sub PlaySound()\n        Console.WriteLine(\"Playing sound from a musical instrument.\")\n    End Sub\nEnd Class\n\nPublic Class Piano\n    Inherits MusicalInstrument\n\n    Public Overrides Sub PlaySound()\n        Console.WriteLine(\"Playing specific notes from a piano.\")\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Set up a base class for a user account with a method to reset password, and extend it with an admin account subclass that overrides it to include security questions.",
    "code": "```vb\nPublic Class UserAccount\n    Public Overridable Sub ResetPassword()\n        Console.WriteLine(\"Password reset link has been sent to your email.\")\n    End Sub\nEnd Class\n\nPublic Class AdminAccount\n    Inherits UserAccount\n\n    Public Overrides Sub ResetPassword()\n        Console.WriteLine(\"Please answer the security questions to reset your password.\")\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Create a foundational class for a beverage with properties like volume and temperature, and derive a coffee class that overrides the temperature property to be hot.",
    "code": "```vb\nPublic Class Beverage\n    Public Property Volume As Double\n    Public Overridable Property Temperature As String\nEnd Class\n\nPublic Class Coffee\n    Inherits Beverage\n\n    Public Overrides Property Temperature As String\n        Get\n            Return \"Hot\"\n        End Get\n        Set(value As String)\n            ' Ignore set to ensure temperature is always \"Hot\"\n        End Set\n    End Property\nEnd Class\n```"
  },
  {
    "task": "Design a base class for a service appointment with a method to schedule time, then create a doctor appointment subclass that overrides this method to include consultation duration.",
    "code": "```vb\nPublic Class ServiceAppointment\n    Public Overridable Sub ScheduleTime(time As DateTime)\n        ' Implement scheduling logic\n    End Sub\nEnd Class\n\nPublic Class DoctorAppointment\n    Inherits ServiceAppointment\n\n    Public Overrides Sub ScheduleTime(time As DateTime)\n        Dim consultationDuration As TimeSpan = TimeSpan.FromMinutes(30)\n        ' Implement scheduling logic including consultation duration\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Develop a superclass for electronic gadgets with a method to calculate battery life, then extend it with a laptop class that overrides this method to consider usage patterns.",
    "code": "```vb\nPublic Class ElectronicGadget\n    Public Overridable Function CalculateBatteryLife() As Double\n        ' Default battery life calculation\n        Return 10.0 ' Assume 10 hours as a default for any generic gadget\n    End Function\nEnd Class\n\nPublic Class Laptop\n    Inherits ElectronicGadget\n\n    Public Overrides Function CalculateBatteryLife() As Double\n        ' Override to include specific usage patterns for laptops\n        Dim usageFactor As Double = 0.8 ' Assume usage patterns reduce battery life to 80%\n        Return MyBase.CalculateBatteryLife() * usageFactor\n    End Function\nEnd Class\n```"
  },
  {
    "task": "Implement a base class for a website component with a method to render content, then create a blog post subclass that overrides this method to include author information.",
    "code": "```vb\nPublic Class WebsiteComponent\n    Public Overridable Function RenderContent() As String\n        Return \"Rendering website component content.\"\n    End Function\nEnd Class\n\nPublic Class BlogPost\n    Inherits WebsiteComponent\n\n    Public Property Author As String\n\n    Public Sub New(authorName As String)\n        Author = authorName\n    End Sub\n\n    Public Overrides Function RenderContent() As String\n        Return \"Rendering blog post content by \" & Author\n    End Function\nEnd Class\n```"
  },
  {
    "task": "Construct a parent class for a recipe with methods for ingredients and instructions, then derive a cake recipe class that overrides these methods to add baking steps.",
    "code": "```vb\nPublic Class Recipe\n    Public Overridable Sub Ingredients()\n        Console.WriteLine(\"List of ingredients:\")\n    End Sub\n\n    Public Overridable Sub Instructions()\n        Console.WriteLine(\"List of instructions:\")\n    End Sub\nEnd Class\n\nPublic Class CakeRecipe\n    Inherits Recipe\n\n    Public Overrides Sub Ingredients()\n        MyBase.Ingredients()\n        Console.WriteLine(\"- Flour\")\n        Console.WriteLine(\"- Sugar\")\n        Console.WriteLine(\"- Eggs\")\n        Console.WriteLine(\"- Butter\")\n    End Sub\n\n    Public Overrides Sub Instructions()\n        MyBase.Instructions()\n        Console.WriteLine(\"1. Preheat the oven.\")\n        Console.WriteLine(\"2. Mix the ingredients.\")\n        Console.WriteLine(\"3. Pour the batter into a pan.\")\n        Console.WriteLine(\"4. Bake for 30 minutes.\")\n    End Sub\nEnd Class\n\nModule Module1\n    Sub Main()\n        Dim cake As New CakeRecipe()\n        cake.Ingredients()\n        cake.Instructions()\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Set up a base class for a plant with methods for sunlight and water needs, and extend it with a cactus subclass that overrides these methods to require less water.",
    "code": "```vb\nPublic Class Plant\n    Public Overridable Sub SunlightNeeds()\n        Console.WriteLine(\"This plant needs moderate sunlight.\")\n    End Sub\n\n    Public Overridable Sub WaterNeeds()\n        Console.WriteLine(\"This plant needs regular watering.\")\n    End Sub\nEnd Class\n\nPublic Class Cactus\n    Inherits Plant\n\n    Public Overrides Sub SunlightNeeds()\n        Console.WriteLine(\"This cactus needs plenty of sunlight.\")\n    End Sub\n\n    Public Overrides Sub WaterNeeds()\n        Console.WriteLine(\"This cactus needs minimal watering.\")\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Create a foundational class for a building with properties like height and material, and derive a skyscraper class that overrides the height property to be significantly taller.",
    "code": "```vb\nPublic Class Building\n    Public Overridable Property Height As Integer\n    Public Property Material As String\nEnd Class\n\nPublic Class Skyscraper\n    Inherits Building\n\n    Public Overrides Property Height As Integer\n        Get\n            Return MyBase.Height\n        End Get\n        Set(value As Integer)\n            MyBase.Height = value * 10 ' Assuming skyscraper height is significantly taller\n        End Set\n    End Property\nEnd Class\n```"
  },
  {
    "task": "Design a base class for a payment method with a method to process transactions, then create a credit card subclass that overrides this method to include credit limits.",
    "code": "```vb\nPublic Class PaymentMethod\n    Public Overridable Sub ProcessTransaction(amount As Decimal)\n        Console.WriteLine(\"Processing transaction of amount: \" & amount.ToString(\"C\"))\n    End Sub\nEnd Class\n\nPublic Class CreditCard\n    Inherits PaymentMethod\n\n    Private CreditLimit As Decimal\n\n    Public Sub New(limit As Decimal)\n        CreditLimit = limit\n    End Sub\n\n    Public Overrides Sub ProcessTransaction(amount As Decimal)\n        If amount <= CreditLimit Then\n            Console.WriteLine(\"Credit Card transaction approved for amount: \" & amount.ToString(\"C\"))\n            CreditLimit -= amount\n        Else\n            Console.WriteLine(\"Transaction denied! Amount exceeds credit limit.\")\n        End If\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Develop a superclass for a computer program with methods for input and output, then extend it with a game subclass that overrides these methods to include player interactions.",
    "code": "```vb\nPublic Class ComputerProgram\n    Public Overridable Sub InputMethod()\n        Console.WriteLine(\"General input method for the program.\")\n    End Sub\n\n    Public Overridable Sub OutputMethod()\n        Console.WriteLine(\"General output method for the program.\")\n    End Sub\nEnd Class\n\nPublic Class Game\n    Inherits ComputerProgram\n\n    Public Overrides Sub InputMethod()\n        Console.WriteLine(\"Player input method for the game.\")\n    End Sub\n\n    Public Overrides Sub OutputMethod()\n        Console.WriteLine(\"Player output method for the game.\")\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Implement a base class for a dining establishment with a method to calculate wait time, then create a fast food subclass that overrides this method to be shorter.",
    "code": "```vb\nPublic Class DiningEstablishment\n    Public Overridable Function CalculateWaitTime() As Integer\n        Return 30 ' Default wait time in minutes\n    End Function\nEnd Class\n\nPublic Class FastFood\n    Inherits DiningEstablishment\n\n    Public Overrides Function CalculateWaitTime() As Integer\n        Return 10 ' Shorter wait time for fast food\n    End Function\nEnd Class\n```"
  },
  {
    "task": "Construct a parent class for a social media profile with methods for posting and liking, then derive a business profile class that overrides these methods to include promotions.",
    "code": "```vb\nPublic Class SocialMediaProfile\n    Public Overridable Sub Post(ByVal content As String)\n        Console.WriteLine(\"Post: \" & content)\n    End Sub\n\n    Public Overridable Sub Like(ByVal postId As Integer)\n        Console.WriteLine(\"Liked post with ID: \" & postId)\n    End Sub\nEnd Class\n\nPublic Class BusinessProfile\n    Inherits SocialMediaProfile\n\n    Public Overrides Sub Post(ByVal content As String)\n        Console.WriteLine(\"Business Post: \" & content & \" (with promotion)\")\n    End Sub\n\n    Public Overrides Sub Like(ByVal postId As Integer)\n        Console.WriteLine(\"Business liked post with ID: \" & postId & \" (with promotion)\")\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Set up a base class for an educational course with methods for syllabus and grading, and extend it with an online course subclass that overrides these methods for remote learning.",
    "code": "```vb\nPublic Class Course\n    Public Overridable Sub Syllabus()\n        Console.WriteLine(\"Course syllabus details.\")\n    End Sub\n\n    Public Overridable Sub Grading()\n        Console.WriteLine(\"Course grading details.\")\n    End Sub\nEnd Class\n\nPublic Class OnlineCourse\n    Inherits Course\n\n    Public Overrides Sub Syllabus()\n        Console.WriteLine(\"Online course syllabus details with remote resources.\")\n    End Sub\n\n    Public Overrides Sub Grading()\n        Console.WriteLine(\"Online course grading details with remote submission.\")\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Create a foundational class for a sports team with properties like team name and coach, and derive a football team class that overrides the coach property with a specific person.",
    "code": "```vb\nPublic Class SportsTeam\n    Public Property TeamName As String\n    Public Overridable Property Coach As String\nEnd Class\n\nPublic Class FootballTeam\n    Inherits SportsTeam\n\n    Private footballCoach As String = \"Specific Person\"\n\n    Public Overrides Property Coach As String\n        Get\n            Return footballCoach\n        End Get\n        Set(value As String)\n            footballCoach = value\n        End Set\n    End Property\nEnd Class\n```"
  },
  {
    "task": "Design a base class for a document with methods for printing and saving, then create a PDF document subclass that overrides these methods to include encryption.",
    "code": "```vb\nPublic Class Document\n    Public Overridable Sub Print()\n        Console.WriteLine(\"Printing document...\")\n    End Sub\n\n    Public Overridable Sub Save()\n        Console.WriteLine(\"Saving document...\")\n    End Sub\nEnd Class\n\nPublic Class PDFDocument\n    Inherits Document\n\n    Public Overrides Sub Print()\n        Console.WriteLine(\"Printing PDF document with encryption...\")\n    End Sub\n\n    Public Overrides Sub Save()\n        Console.WriteLine(\"Saving PDF document with encryption...\")\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Develop a superclass for a retail product with methods for pricing and discount, then extend it with an electronics product class that overrides the discount method to offer more.",
    "code": "```vb\nPublic Class RetailProduct\n    Protected ProductName As String\n    Protected BasePrice As Decimal\n\n    Public Sub New(name As String, price As Decimal)\n        ProductName = name\n        BasePrice = price\n    End Sub\n\n    Public Overridable Function GetPrice() As Decimal\n        Return BasePrice\n    End Function\n\n    Public Overridable Function GetDiscountedPrice() As Decimal\n        Return BasePrice * 0.9D\n    End Function\nEnd Class\n\nPublic Class ElectronicsProduct\n    Inherits RetailProduct\n\n    Public Sub New(name As String, price As Decimal)\n        MyBase.New(name, price)\n    End Sub\n\n    Public Overrides Function GetDiscountedPrice() As Decimal\n        Return BasePrice * 0.8D\n    End Function\nEnd Class\n```"
  },
  {
    "task": "Implement a base class for a subscription service with a method to renew membership, then create a monthly subscription subclass that overrides this method for automatic renewal.",
    "code": "```vb\nPublic Class SubscriptionService\n    Public Overridable Sub RenewMembership()\n        Console.WriteLine(\"Membership renewal process initiated.\")\n    End Sub\nEnd Class\n\nPublic Class MonthlySubscription\n    Inherits SubscriptionService\n\n    Public Overrides Sub RenewMembership()\n        Console.WriteLine(\"Automatic monthly membership renewal completed.\")\n    End Sub\nEnd Class\n\nModule Program\n    Sub Main()\n        Dim baseSubscription As New SubscriptionService()\n        baseSubscription.RenewMembership()\n\n        Dim monthlySubscription As New MonthlySubscription()\n        monthlySubscription.RenewMembership()\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Construct a parent class for a language translator with a method to translate text, then derive a French translator class that overrides this method for French language specifics.",
    "code": "```vb\nPublic Class LanguageTranslator\n    Public Overridable Function TranslateText(text As String) As String\n        Return \"Translation not available.\"\n    End Function\nEnd Class\n\nPublic Class FrenchTranslator\n    Inherits LanguageTranslator\n\n    Public Overrides Function TranslateText(text As String) As String\n        ' Simple example for demonstration purposes\n        If text = \"Hello\" Then\n            Return \"Bonjour\"\n        Else\n            Return \"Translation not available.\"\n        End If\n    End Function\nEnd Class\n```"
  },
  {
    "task": "Set up a base class for a customer order with methods for placing and tracking, and extend it with a food order subclass that overrides tracking for delivery status.",
    "code": "```vb\nPublic Class CustomerOrder\n    Public Overridable Sub PlaceOrder()\n        Console.WriteLine(\"Order has been placed.\")\n    End Sub\n\n    Public Overridable Sub TrackOrder()\n        Console.WriteLine(\"Tracking order status.\")\n    End Sub\nEnd Class\n\nPublic Class FoodOrder\n    Inherits CustomerOrder\n\n    Public Overrides Sub TrackOrder()\n        Console.WriteLine(\"Tracking food delivery status.\")\n    End Sub\nEnd Class\n\nModule Program\n    Sub Main()\n        Dim order As CustomerOrder = New CustomerOrder()\n        order.PlaceOrder()\n        order.TrackOrder()\n\n        Dim foodOrder As FoodOrder = New FoodOrder()\n        foodOrder.PlaceOrder()\n        foodOrder.TrackOrder()\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a foundational class for an artwork with properties like artist and medium, and derive a painting class that overrides the medium property to be 'canvas'.",
    "code": "```vb\nPublic Class Artwork\n    Public Property Artist As String\n    Public Overridable Property Medium As String\nEnd Class\n\nPublic Class Painting\n    Inherits Artwork\n\n    Public Overrides Property Medium As String\n        Get\n            Return \"canvas\"\n        End Get\n        Set(value As String)\n            ' Ignore setting the value, always canvas\n        End Set\n    End Property\nEnd Class\n```"
  },
  {
    "task": "Design a base class for a computer network with methods for connectivity and bandwidth, then create a wireless network subclass that overrides these methods for signal strength.",
    "code": "```vb\nPublic Class ComputerNetwork\n    Public Overridable Function Connectivity() As String\n        Return \"Standard connectivity\"\n    End Function\n\n    Public Overridable Function Bandwidth() As String\n        Return \"Standard bandwidth\"\n    End Function\nEnd Class\n\nPublic Class WirelessNetwork\n    Inherits ComputerNetwork\n\n    Public Overrides Function Connectivity() As String\n        Return \"Wireless connectivity\"\n    End Function\n\n    Public Overrides Function Bandwidth() As String\n        Return \"Wireless bandwidth with signal strength optimization\"\n    End Function\nEnd Class\n```"
  },
  {
    "task": "Develop a superclass for a messaging app with methods for sending and receiving messages, then extend it with a secure messaging subclass that overrides these methods for encryption.",
    "code": "```vb\nPublic Class MessagingApp\n    Public Overridable Sub SendMessage(message As String)\n        Console.WriteLine(\"Sending message: \" & message)\n    End Sub\n\n    Public Overridable Sub ReceiveMessage() As String\n        Return \"Receiving message\"\n    End Sub\nEnd Class\n\nPublic Class SecureMessagingApp\n    Inherits MessagingApp\n\n    Public Overrides Sub SendMessage(message As String)\n        Dim encryptedMessage As String = Encrypt(message)\n        Console.WriteLine(\"Sending encrypted message: \" & encryptedMessage)\n    End Sub\n\n    Public Overrides Function ReceiveMessage() As String\n        Dim encryptedMessage As String = \"Encrypted message\"\n        Dim decryptedMessage As String = Decrypt(encryptedMessage)\n        Return decryptedMessage\n    End Function\n\n    Private Function Encrypt(message As String) As String\n        ' Simple encryption logic for demonstration\n        Return Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(message))\n    End Function\n\n    Private Function Decrypt(encryptedMessage As String) As String\n        ' Simple decryption logic for demonstration\n        Return System.Text.Encoding.UTF8.GetString(Convert.FromBase64String(encryptedMessage))\n    End Function\nEnd Class\n```"
  },
  {
    "task": "Implement a base class for a travel itinerary with methods for destinations and activities, then create a vacation itinerary subclass that overrides these methods for leisure activities.",
    "code": "```vb\nPublic Class TravelItinerary\n    Public Overridable Function Destinations() As String\n        Return \"Generic Destinations\"\n    End Function\n\n    Public Overridable Function Activities() As String\n        Return \"Generic Activities\"\n    End Function\nEnd Class\n\nPublic Class VacationItinerary\n    Inherits TravelItinerary\n\n    Public Overrides Function Destinations() As String\n        Return \"Beach, Mountains, City\"\n    End Function\n\n    Public Overrides Function Activities() As String\n        Return \"Swimming, Hiking, Sightseeing\"\n    End Function\nEnd Class\n```"
  },
  {
    "task": "Construct a parent class for a healthcare record with methods for patient data and treatment history, then derive a pediatric record class that overrides these methods for child-specific data.",
    "code": "```vb\nPublic Class HealthcareRecord\n    Public Overridable Sub PatientData()\n        Console.WriteLine(\"General patient data.\")\n    End Sub\n\n    Public Overridable Sub TreatmentHistory()\n        Console.WriteLine(\"General treatment history.\")\n    End Sub\nEnd Class\n\nPublic Class PediatricRecord\n    Inherits HealthcareRecord\n\n    Public Overrides Sub PatientData()\n        Console.WriteLine(\"Child-specific patient data.\")\n    End Sub\n\n    Public Overrides Sub TreatmentHistory()\n        Console.WriteLine(\"Child-specific treatment history.\")\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Set up a base class for a culinary dish with methods for preparation and serving, and extend it with an appetizer subclass that overrides these methods for smaller portions.",
    "code": "```vb\nPublic Class CulinaryDish\n    Public Overridable Sub Prepare()\n        Console.WriteLine(\"Preparing the dish.\")\n    End Sub\n\n    Public Overridable Sub Serve()\n        Console.WriteLine(\"Serving the dish.\")\n    End Sub\nEnd Class\n\nPublic Class Appetizer\n    Inherits CulinaryDish\n\n    Public Overrides Sub Prepare()\n        Console.WriteLine(\"Preparing a smaller portion appetizer.\")\n    End Sub\n\n    Public Overrides Sub Serve()\n        Console.WriteLine(\"Serving a smaller portion appetizer.\")\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Create a foundational class for a book collection with properties like genre and author, and derive a mystery collection class that overrides the genre property to be 'mystery'.",
    "code": "```vb\nPublic Class BookCollection\n    Public Overridable Property Genre As String\n    Public Property Author As String\nEnd Class\n\nPublic Class MysteryCollection\n    Inherits BookCollection\n\n    Public Overrides Property Genre As String\n        Get\n            Return \"mystery\"\n        End Get\n        Set(value As String)\n            ' Do nothing or raise an exception if necessary\n        End Set\n    End Property\nEnd Class\n```"
  },
  {
    "task": "Design a base class for a file storage system with methods for saving and deleting files, then create a cloud storage subclass that overrides these methods for remote access.",
    "code": "```vb\nPublic Class FileStorage\n    Public Overridable Sub SaveFile(fileName As String)\n        ' Logic for saving file locally\n        Console.WriteLine(\"File saved locally: \" & fileName)\n    End Sub\n\n    Public Overridable Sub DeleteFile(fileName As String)\n        ' Logic for deleting file locally\n        Console.WriteLine(\"File deleted locally: \" & fileName)\n    End Sub\nEnd Class\n\nPublic Class CloudStorage\n    Inherits FileStorage\n\n    Public Overrides Sub SaveFile(fileName As String)\n        ' Logic for saving file to the cloud\n        Console.WriteLine(\"File saved to cloud: \" & fileName)\n    End Sub\n\n    Public Overrides Sub DeleteFile(fileName As String)\n        ' Logic for deleting file from the cloud\n        Console.WriteLine(\"File deleted from cloud: \" & fileName)\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Develop a superclass for a seasonal sale event with methods for discounts and promotions, then extend it with a summer sale subclass that overrides these methods for summer items.",
    "code": "```vb\nPublic Class SeasonalSaleEvent\n    Public Overridable Function GetDiscount() As Decimal\n        Return 0.1 ' 10% discount\n    End Function\n\n    Public Overridable Function GetPromotion() As String\n        Return \"General promotion\"\n    End Function\nEnd Class\n\nPublic Class SummerSale\n    Inherits SeasonalSaleEvent\n\n    Public Overrides Function GetDiscount() As Decimal\n        Return 0.2 ' 20% discount for summer\n    End Function\n\n    Public Overrides Function GetPromotion() As String\n        Return \"Summer special promotion\"\n    End Function\nEnd Class\n```"
  },
  {
    "task": "Implement a base class for a personal budget with methods for income and expenses, then create a student budget subclass that overrides these methods for tuition and fees.",
    "code": "```vb\nPublic Class PersonalBudget\n    Protected IncomeAmount As Decimal\n    Protected ExpenseAmount As Decimal\n\n    Public Overridable Sub AddIncome(amount As Decimal)\n        IncomeAmount += amount\n    End Sub\n\n    Public Overridable Sub AddExpense(amount As Decimal)\n        ExpenseAmount += amount\n    End Sub\n\n    Public Function GetBalance() As Decimal\n        Return IncomeAmount - ExpenseAmount\n    End Function\nEnd Class\n\nPublic Class StudentBudget\n    Inherits PersonalBudget\n\n    Public Overrides Sub AddIncome(amount As Decimal)\n        IncomeAmount += amount\n    End Sub\n\n    Public Overrides Sub AddExpense(amount As Decimal)\n        ExpenseAmount += amount + CalculateTuitionFee(amount)\n    End Sub\n\n    Private Function CalculateTuitionFee(amount As Decimal) As Decimal\n        ' Example calculation for tuition fee\n        Return amount * 0.1D\n    End Function\nEnd Class\n```"
  },
  {
    "task": "Construct a parent class for a fitness routine with methods for exercises and duration, then derive a yoga routine class that overrides these methods for flexibility exercises.",
    "code": "```vb\nPublic Class FitnessRoutine\n    Public Overridable Sub Exercise()\n        Console.WriteLine(\"Performing general exercises\")\n    End Sub\n\n    Public Overridable Sub Duration()\n        Console.WriteLine(\"Duration: 30 minutes\")\n    End Sub\nEnd Class\n\nPublic Class YogaRoutine\n    Inherits FitnessRoutine\n\n    Public Overrides Sub Exercise()\n        Console.WriteLine(\"Performing flexibility exercises\")\n    End Sub\n\n    Public Overrides Sub Duration()\n        Console.WriteLine(\"Duration: 60 minutes\")\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Set up a base class for a transportation ticket with methods for pricing and validity, and extend it with an airline ticket subclass that overrides these methods for baggage allowance.",
    "code": "```vb\nPublic Class TransportationTicket\n    Public Overridable Function GetPricing() As Decimal\n        Return 0\n    End Function\n\n    Public Overridable Function GetValidity() As String\n        Return \"Valid\"\n    End Function\nEnd Class\n\nPublic Class AirlineTicket\n    Inherits TransportationTicket\n\n    Public Overrides Function GetPricing() As Decimal\n        Return 150\n    End Function\n\n    Public Overrides Function GetValidity() As String\n        Return \"Valid with baggage allowance\"\n    End Function\n\n    Public Function GetBaggageAllowance() As String\n        Return \"20kg\"\n    End Function\nEnd Class\n```"
  },
  {
    "task": "Create a foundational class for a digital photo album with properties like album name and date, and derive a vacation album class that overrides the date property to be specific.",
    "code": "```vb\nPublic Class PhotoAlbum\n    Public Property AlbumName As String\n    Public Overridable Property Date As DateTime\nEnd Class\n\nPublic Class VacationAlbum\n    Inherits PhotoAlbum\n\n    Public Overrides Property Date As DateTime\n        Get\n            Return MyBase.Date\n        End Get\n        Set(value As DateTime)\n            MyBase.Date = value\n        End Set\n    End Property\nEnd Class\n```"
  },
  {
    "task": "Design a base class for a home appliance with methods for power usage and warranty, then create a refrigerator subclass that overrides these methods for energy efficiency.",
    "code": "```vb\nPublic Class HomeAppliance\n    Public Overridable Function PowerUsage() As String\n        Return \"General power usage.\"\n    End Function\n\n    Public Overridable Function Warranty() As String\n        Return \"General warranty.\"\n    End Function\nEnd Class\n\nPublic Class Refrigerator\n    Inherits HomeAppliance\n\n    Public Overrides Function PowerUsage() As String\n        Return \"Energy efficient power usage.\"\n    End Function\n\n    Public Overrides Function Warranty() As String\n        Return \"Extended warranty for refrigerators.\"\n    End Function\nEnd Class\n```"
  },
  {
    "task": "Develop a superclass for a software update with methods for versioning and patch notes, then extend it with a security update subclass that overrides these methods for vulnerabilities.",
    "code": "```vb\nPublic Class SoftwareUpdate\n    Public Overridable Function GetVersion() As String\n        Return \"Generic Version\"\n    End Function\n\n    Public Overridable Function GetPatchNotes() As String\n        Return \"Generic Patch Notes\"\n    End Function\nEnd Class\n\nPublic Class SecurityUpdate\n    Inherits SoftwareUpdate\n\n    Public Overrides Function GetVersion() As String\n        Return \"Security Update Version\"\n    End Function\n\n    Public Overrides Function GetPatchNotes() As String\n        Return \"Security Vulnerabilities Fixed\"\n    End Function\nEnd Class\n```"
  },
  {
    "task": "Implement a base class for a musical performance with methods for rehearsal and execution, then create a concert performance subclass that overrides these methods for live audience.",
    "code": "```vb\nPublic Class MusicalPerformance\n    Public Overridable Sub Rehearse()\n        Console.WriteLine(\"Rehearsing the musical performance.\")\n    End Sub\n\n    Public Overridable Sub Execute()\n        Console.WriteLine(\"Executing the musical performance.\")\n    End Sub\nEnd Class\n\nPublic Class ConcertPerformance\n    Inherits MusicalPerformance\n\n    Public Overrides Sub Rehearse()\n        Console.WriteLine(\"Rehearsing the concert performance for live audience.\")\n    End Sub\n\n    Public Overrides Sub Execute()\n        Console.WriteLine(\"Executing the concert performance for live audience.\")\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Construct a parent class for an academic degree with methods for course requirements and credits, then derive a master's degree class that overrides these methods for advanced studies.",
    "code": "```vb\nPublic Class AcademicDegree\n    Public Overridable Sub CourseRequirements()\n        Console.WriteLine(\"General course requirements for an academic degree.\")\n    End Sub\n\n    Public Overridable Sub Credits()\n        Console.WriteLine(\"General credit requirements for an academic degree.\")\n    End Sub\nEnd Class\n\nPublic Class MastersDegree\n    Inherits AcademicDegree\n\n    Public Overrides Sub CourseRequirements()\n        Console.WriteLine(\"Advanced course requirements for a master's degree.\")\n    End Sub\n\n    Public Overrides Sub Credits()\n        Console.WriteLine(\"Advanced credit requirements for a master's degree.\")\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Set up a base class for a weather forecast with methods for temperature and conditions, and extend it with a winter forecast subclass that overrides these methods for snow conditions.",
    "code": "```vb\nPublic Class WeatherForecast\n    Public Overridable Function GetTemperature() As String\n        Return \"Temperature is 20 degrees Celsius.\"\n    End Function\n\n    Public Overridable Function GetConditions() As String\n        Return \"Conditions are sunny.\"\n    End Function\nEnd Class\n\nPublic Class WinterForecast\n    Inherits WeatherForecast\n\n    Public Overrides Function GetTemperature() As String\n        Return \"Temperature is -5 degrees Celsius.\"\n    End Function\n\n    Public Overrides Function GetConditions() As String\n        Return \"Conditions are snowy.\"\n    End Function\nEnd Class\n```"
  },
  {
    "task": "Create a foundational class for a personal diary with properties like date and entries, and derive a travel diary class that overrides the date property with travel dates.",
    "code": "```vb\nPublic Class PersonalDiary\n    Private _date As Date\n    Private _entries As String\n\n    Public Property DateProperty() As Date\n        Get\n            Return _date\n        End Get\n        Set(value As Date)\n            _date = value\n        End Set\n    End Property\n\n    Public Property Entries() As String\n        Get\n            Return _entries\n        End Get\n        Set(value As String)\n            _entries = value\n        End Set\n    End Property\nEnd Class\n\nPublic Class TravelDiary\n    Inherits PersonalDiary\n\n    Private _travelDate As Date\n\n    Public Shadows Property DateProperty() As Date\n        Get\n            Return _travelDate\n        End Get\n        Set(value As Date)\n            _travelDate = value\n        End Set\n    End Property\nEnd Class\n```"
  },
  {
    "task": "Design a base class for a pet with methods for feeding and grooming, then create a cat subclass that overrides these methods with specific food preferences.",
    "code": "```vb\nPublic Class Pet\n    Public Overridable Sub Feed()\n        Console.WriteLine(\"Feeding the pet.\")\n    End Sub\n\n    Public Overridable Sub Groom()\n        Console.WriteLine(\"Grooming the pet.\")\n    End Sub\nEnd Class\n\nPublic Class Cat\n    Inherits Pet\n\n    Public Overrides Sub Feed()\n        Console.WriteLine(\"Feeding the cat with fish.\")\n    End Sub\n\n    Public Overrides Sub Groom()\n        Console.WriteLine(\"Grooming the cat with a brush.\")\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Develop a superclass for a software library with methods for installation and updates, then extend it with a graphics library subclass that overrides these methods for rendering capabilities.",
    "code": "```vb\nPublic Class SoftwareLibrary\n    Public Overridable Sub Install()\n        Console.WriteLine(\"Installing software library...\")\n    End Sub\n    \n    Public Overridable Sub Update()\n        Console.WriteLine(\"Updating software library...\")\n    End Sub\nEnd Class\n\nPublic Class GraphicsLibrary\n    Inherits SoftwareLibrary\n\n    Public Overrides Sub Install()\n        Console.WriteLine(\"Installing graphics library with rendering capabilities...\")\n    End Sub\n    \n    Public Overrides Sub Update()\n        Console.WriteLine(\"Updating graphics library with rendering enhancements...\")\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Implement a base class for a political campaign with methods for fundraising and events, then create a presidential campaign subclass that overrides these methods for national scale.",
    "code": "```vb\nPublic Class PoliticalCampaign\n    Public Overridable Sub Fundraise()\n        Console.WriteLine(\"Fundraising for the campaign.\")\n    End Sub\n\n    Public Overridable Sub OrganizeEvent()\n        Console.WriteLine(\"Organizing a campaign event.\")\n    End Sub\nEnd Class\n\nPublic Class PresidentialCampaign\n    Inherits PoliticalCampaign\n\n    Public Overrides Sub Fundraise()\n        Console.WriteLine(\"Fundraising nationwide for the presidential campaign.\")\n    End Sub\n\n    Public Overrides Sub OrganizeEvent()\n        Console.WriteLine(\"Organizing a national campaign event.\")\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Construct a parent class for an automotive part with methods for durability and replacement, then derive an engine part class that overrides these methods for performance.",
    "code": "```vb\nPublic Class AutomotivePart\n    Public Overridable Function Durability() As String\n        Return \"Standard durability\"\n    End Function\n\n    Public Overridable Function Replacement() As String\n        Return \"Standard replacement procedure\"\n    End Function\nEnd Class\n\nPublic Class EnginePart\n    Inherits AutomotivePart\n\n    Public Overrides Function Durability() As String\n        Return \"High performance durability\"\n    End Function\n\n    Public Overrides Function Replacement() As String\n        Return \"Advanced replacement procedure\"\n    End Function\nEnd Class\n```"
  },
  {
    "task": "Set up a base class for an online tutorial with methods for lessons and quizzes, and extend it with a coding tutorial subclass that overrides these methods for interactive exercises.",
    "code": "```vb\nPublic Class OnlineTutorial\n    Public Overridable Sub Lesson()\n        Console.WriteLine(\"This is a generic lesson.\")\n    End Sub\n\n    Public Overridable Sub Quiz()\n        Console.WriteLine(\"This is a generic quiz.\")\n    End Sub\nEnd Class\n\nPublic Class CodingTutorial\n    Inherits OnlineTutorial\n\n    Public Overrides Sub Lesson()\n        Console.WriteLine(\"This is an interactive coding lesson.\")\n    End Sub\n\n    Public Overrides Sub Quiz()\n        Console.WriteLine(\"This is an interactive coding quiz.\")\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Create a foundational class for a personal collection with properties like item type and value, and derive a stamp collection class that overrides the item type property to be 'stamps'.",
    "code": "```vb\nPublic Class PersonalCollection\n    Private itemType As String\n    Private itemValue As Decimal\n\n    Public Property Type() As String\n        Get\n            Return itemType\n        End Get\n        Set(value As String)\n            itemType = value\n        End Set\n    End Property\n\n    Public Property Value() As Decimal\n        Get\n            Return itemValue\n        End Get\n        Set(value As Decimal)\n            itemValue = value\n        End Set\n    End Property\nEnd Class\n\nPublic Class StampCollection\n    Inherits PersonalCollection\n\n    Public Sub New()\n        MyBase.Type = \"stamps\"\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Design a base class for a video game character with methods for health and abilities, then create a warrior character subclass that overrides these methods for strength.",
    "code": "```vb\nPublic Class GameCharacter\n    Public Overridable Function Health() As String\n        Return \"Character Health\"\n    End Function\n    \n    Public Overridable Function Abilities() As String\n        Return \"Character Abilities\"\n    End Function\nEnd Class\n\nPublic Class WarriorCharacter\n    Inherits GameCharacter\n\n    Public Overrides Function Health() As String\n        Return \"Warrior Health: Strong\"\n    End Function\n\n    Public Overrides Function Abilities() As String\n        Return \"Warrior Abilities: Strength\"\n    End Function\nEnd Class\n```"
  },
  {
    "task": "Develop a superclass for an event planner with methods for scheduling and budgeting, then extend it with a wedding planner subclass that overrides these methods for ceremony details.",
    "code": "```vb\nPublic Class EventPlanner\n    Public Overridable Sub ScheduleEvent()\n        Console.WriteLine(\"Scheduling general event.\")\n    End Sub\n\n    Public Overridable Sub BudgetEvent()\n        Console.WriteLine(\"Budgeting for general event.\")\n    End Sub\nEnd Class\n\nPublic Class WeddingPlanner\n    Inherits EventPlanner\n\n    Public Overrides Sub ScheduleEvent()\n        Console.WriteLine(\"Scheduling wedding ceremony details.\")\n    End Sub\n\n    Public Overrides Sub BudgetEvent()\n        Console.WriteLine(\"Budgeting for wedding ceremony details.\")\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Implement a base class for a software feature with methods for functionality and user feedback, then create a beta feature subclass that overrides these methods for testing.",
    "code": "```vb\nPublic Class SoftwareFeature\n    Public Overridable Sub Functionality()\n        Console.WriteLine(\"Base functionality executed.\")\n    End Sub\n\n    Public Overridable Sub UserFeedback()\n        Console.WriteLine(\"Base user feedback collected.\")\n    End Sub\nEnd Class\n\nPublic Class BetaFeature\n    Inherits SoftwareFeature\n\n    Public Overrides Sub Functionality()\n        Console.WriteLine(\"Beta functionality executed for testing.\")\n    End Sub\n\n    Public Overrides Sub UserFeedback()\n        Console.WriteLine(\"Beta user feedback collected for testing.\")\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Construct a parent class for a gardening tool with methods for usage and maintenance, then derive a lawn mower class that overrides these methods for grass cutting.",
    "code": "```vb\nPublic Class GardeningTool\n    Public Overridable Sub UseTool()\n        Console.WriteLine(\"Using the gardening tool.\")\n    End Sub\n\n    Public Overridable Sub MaintainTool()\n        Console.WriteLine(\"Maintaining the gardening tool.\")\n    End Sub\nEnd Class\n\nPublic Class LawnMower\n    Inherits GardeningTool\n\n    Public Overrides Sub UseTool()\n        Console.WriteLine(\"Using the lawn mower to cut grass.\")\n    End Sub\n\n    Public Overrides Sub MaintainTool()\n        Console.WriteLine(\"Maintaining the lawn mower.\")\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Set up a base class for a household chore with methods for time and effort, and extend it with a cleaning chore subclass that overrides these methods for dirt removal.",
    "code": "```vb\nPublic Class HouseholdChore\n    Public Overridable Function Time() As String\n        Return \"General time required for the chore.\"\n    End Function\n\n    Public Overridable Function Effort() As String\n        Return \"General effort required for the chore.\"\n    End Function\nEnd Class\n\nPublic Class CleaningChore\n    Inherits HouseholdChore\n\n    Public Overrides Function Time() As String\n        Return \"Time required specifically for cleaning.\"\n    End Function\n\n    Public Overrides Function Effort() As String\n        Return \"Effort required specifically for cleaning dirt.\"\n    End Function\nEnd Class\n```"
  },
  {
    "task": "Create a foundational class for a personal project with properties like name and deadline, and derive a coding project class that overrides the deadline property for milestones.",
    "code": "```vb\nPublic Class Project\n    Private _name As String\n    Private _deadline As Date\n\n    Public Property Name As String\n        Get\n            Return _name\n        End Get\n        Set(value As String)\n            _name = value\n        End Set\n    End Property\n\n    Public Overridable Property Deadline As Date\n        Get\n            Return _deadline\n        End Get\n        Set(value As Date)\n            _deadline = value\n        End Set\n    End Property\nEnd Class\n\nPublic Class CodingProject\n    Inherits Project\n\n    Private _milestoneDeadline As Date\n\n    Public Overrides Property Deadline As Date\n        Get\n            Return _milestoneDeadline\n        End Get\n        Set(value As Date)\n            _milestoneDeadline = value\n        End Set\n    End Property\nEnd Class\n```"
  },
  {
    "task": "Design a base class for a holiday celebration with methods for traditions and activities, then create a Christmas celebration subclass that overrides these methods for gift exchange.",
    "code": "```vb\nPublic Class HolidayCelebration\n    Public Overridable Sub Traditions()\n        Console.WriteLine(\"General holiday traditions.\")\n    End Sub\n\n    Public Overridable Sub Activities()\n        Console.WriteLine(\"General holiday activities.\")\n    End Sub\nEnd Class\n\nPublic Class ChristmasCelebration\n    Inherits HolidayCelebration\n\n    Public Overrides Sub Traditions()\n        Console.WriteLine(\"Christmas traditions: Decorating the tree, singing carols.\")\n    End Sub\n\n    Public Overrides Sub Activities()\n        Console.WriteLine(\"Christmas activities: Gift exchange, family dinner.\")\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Develop a superclass for a customer feedback system with methods for collecting and analyzing, then extend it with a product feedback subclass that overrides these methods for reviews.",
    "code": "```vb\nPublic Class CustomerFeedback\n    Public Overridable Sub CollectFeedback()\n        ' Code to collect general customer feedback\n    End Sub\n\n    Public Overridable Sub AnalyzeFeedback()\n        ' Code to analyze general customer feedback\n    End Sub\nEnd Class\n\nPublic Class ProductFeedback\n    Inherits CustomerFeedback\n\n    Public Overrides Sub CollectFeedback()\n        ' Code to collect product-specific feedback\n    End Sub\n\n    Public Overrides Sub AnalyzeFeedback()\n        ' Code to analyze product-specific feedback\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Implement a base class for a civic service with methods for public engagement and policy, then create a community service subclass that overrides these methods for local impact.",
    "code": "```vb\nPublic Class CivicService\n    Public Overridable Sub PublicEngagement()\n        Console.WriteLine(\"Engage with citizens through general channels.\")\n    End Sub\n\n    Public Overridable Sub Policy()\n        Console.WriteLine(\"Implement general policies for civic service.\")\n    End Sub\nEnd Class\n\nPublic Class CommunityService\n    Inherits CivicService\n\n    Public Overrides Sub PublicEngagement()\n        Console.WriteLine(\"Engage with community through local events and meetings.\")\n    End Sub\n\n    Public Overrides Sub Policy()\n        Console.WriteLine(\"Implement localized policies to address community needs.\")\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Construct a parent class for a culinary ingredient with methods for flavor and preparation, then derive a spice ingredient class that overrides these methods for seasoning.",
    "code": "```vb\nPublic Class CulinaryIngredient\n    Public Overridable Function Flavor() As String\n        Return \"Generic flavor\"\n    End Function\n\n    Public Overridable Function Preparation() As String\n        Return \"Generic preparation\"\n    End Function\nEnd Class\n\nPublic Class SpiceIngredient\n    Inherits CulinaryIngredient\n\n    Public Overrides Function Flavor() As String\n        Return \"Spicy flavor\"\n    End Function\n\n    Public Overrides Function Preparation() As String\n        Return \"Ground or whole\"\n    End Function\nEnd Class\n```"
  },
  {
    "task": "Set up a base class for a scientific experiment with methods for hypothesis and testing, and extend it with a chemistry experiment subclass that overrides these methods for reactions.",
    "code": "```vb\nPublic Class ScientificExperiment\n    Public Overridable Sub Hypothesis()\n        Console.WriteLine(\"Formulating a general hypothesis.\")\n    End Sub\n\n    Public Overridable Sub Testing()\n        Console.WriteLine(\"Conducting a general test.\")\n    End Sub\nEnd Class\n\nPublic Class ChemistryExperiment\n    Inherits ScientificExperiment\n\n    Public Overrides Sub Hypothesis()\n        Console.WriteLine(\"Formulating a chemistry-specific hypothesis about reactions.\")\n    End Sub\n\n    Public Overrides Sub Testing()\n        Console.WriteLine(\"Conducting a chemistry-specific test on reactions.\")\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Create a foundational class for an inventory system with properties like item ID and quantity, and derive a warehouse inventory class that overrides the quantity property for bulk storage.",
    "code": "```vb\nPublic Class InventoryItem\n    Public Property ItemID As String\n    Public Overridable Property Quantity As Integer\nEnd Class\n\nPublic Class WarehouseInventoryItem\n    Inherits InventoryItem\n\n    Private bulkQuantity As Integer\n\n    Public Overrides Property Quantity As Integer\n        Get\n            Return bulkQuantity\n        End Get\n        Set(value As Integer)\n            bulkQuantity = value\n        End Set\n    End Property\nEnd Class\n```"
  },
  {
    "task": "Design a base class for a travel agency with methods for itinerary and bookings, then create a luxury travel subclass that overrides these methods for premium services.",
    "code": "```vb\nPublic Class TravelAgency\n    Public Overridable Sub Itinerary()\n        Console.WriteLine(\"Standard Itinerary\")\n    End Sub\n\n    Public Overridable Sub Bookings()\n        Console.WriteLine(\"Standard Bookings\")\n    End Sub\nEnd Class\n\nPublic Class LuxuryTravel\n    Inherits TravelAgency\n\n    Public Overrides Sub Itinerary()\n        Console.WriteLine(\"Luxury Itinerary\")\n    End Sub\n\n    Public Overrides Sub Bookings()\n        Console.WriteLine(\"Luxury Bookings\")\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Develop a superclass for an educational tool with methods for teaching and assessment, then extend it with a math tool subclass that overrides these methods for problem-solving.",
    "code": "```vb\nPublic Class EducationalTool\n    Public Overridable Sub Teach()\n        Console.WriteLine(\"Teaching a subject\")\n    End Sub\n\n    Public Overridable Sub Assess()\n        Console.WriteLine(\"Assessing the student\")\n    End Sub\nEnd Class\n\nPublic Class MathTool\n    Inherits EducationalTool\n\n    Public Overrides Sub Teach()\n        Console.WriteLine(\"Teaching math concepts\")\n    End Sub\n\n    Public Overrides Sub Assess()\n        Console.WriteLine(\"Assessing math problem-solving skills\")\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Implement a base class for a community project with methods for planning and execution, then create a park renovation subclass that overrides these methods for landscaping.",
    "code": "```vb\nPublic Class CommunityProject\n    Public Overridable Sub Plan()\n        Console.WriteLine(\"Planning community project...\")\n    End Sub\n\n    Public Overridable Sub Execute()\n        Console.WriteLine(\"Executing community project...\")\n    End Sub\nEnd Class\n\nPublic Class ParkRenovation\n    Inherits CommunityProject\n\n    Public Overrides Sub Plan()\n        Console.WriteLine(\"Planning park renovation with landscaping...\")\n    End Sub\n\n    Public Overrides Sub Execute()\n        Console.WriteLine(\"Executing park renovation with landscaping...\")\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Construct a parent class for a digital marketing strategy with methods for targeting and engagement, then derive a social media strategy class that overrides these methods for platforms.",
    "code": "```vb\nPublic Class DigitalMarketingStrategy\n    Public Overridable Sub Targeting()\n        Console.WriteLine(\"Generic targeting strategy.\")\n    End Sub\n\n    Public Overridable Sub Engagement()\n        Console.WriteLine(\"Generic engagement strategy.\")\n    End Sub\nEnd Class\n\nPublic Class SocialMediaStrategy\n    Inherits DigitalMarketingStrategy\n\n    Public Overrides Sub Targeting()\n        Console.WriteLine(\"Social media-specific targeting strategy.\")\n    End Sub\n\n    Public Overrides Sub Engagement()\n        Console.WriteLine(\"Social media-specific engagement strategy.\")\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Set up a base class for a scientific publication with methods for research and review, and extend it with a journal article subclass that overrides these methods for peer review.",
    "code": "```vb\nPublic Class ScientificPublication\n    Public Overridable Sub Research()\n        Console.WriteLine(\"Conducting general research for the publication.\")\n    End Sub\n\n    Public Overridable Sub Review()\n        Console.WriteLine(\"Reviewing the publication.\")\n    End Sub\nEnd Class\n\nPublic Class JournalArticle\n    Inherits ScientificPublication\n\n    Public Overrides Sub Research()\n        Console.WriteLine(\"Conducting in-depth research for the journal article.\")\n    End Sub\n\n    Public Overrides Sub Review()\n        Console.WriteLine(\"Conducting peer review for the journal article.\")\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Create a foundational class for a software module with properties like name and dependencies, and derive a user interface module class that overrides the dependencies property for UI libraries.",
    "code": "```vb\nPublic Class SoftwareModule\n    Public Property Name As String\n    Public Overridable Property Dependencies As List(Of String)\nEnd Class\n\nPublic Class UserInterfaceModule\n    Inherits SoftwareModule\n\n    Public Overrides Property Dependencies As List(Of String)\n        Get\n            Return New List(Of String) From {\"UI Library A\", \"UI Library B\"}\n        End Get\n        Set(value As List(Of String))\n            ' Custom setter logic if necessary\n        End Set\n    End Property\nEnd Class\n```"
  },
  {
    "task": "Design a base class for a fashion line with methods for design and production, then create a summer collection subclass that overrides these methods for seasonal trends.",
    "code": "```vb\nPublic Class FashionLine\n    Public Overridable Sub Design()\n        Console.WriteLine(\"Designing a general fashion item.\")\n    End Sub\n\n    Public Overridable Sub Production()\n        Console.WriteLine(\"Producing a general fashion item.\")\n    End Sub\nEnd Class\n\nPublic Class SummerCollection\n    Inherits FashionLine\n\n    Public Overrides Sub Design()\n        Console.WriteLine(\"Designing a summer fashion item with seasonal trends.\")\n    End Sub\n\n    Public Overrides Sub Production()\n        Console.WriteLine(\"Producing a summer fashion item with seasonal trends.\")\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Develop a superclass for a family tree with methods for ancestry and descendants, then extend it with a royal lineage subclass that overrides these methods for historical accuracy.",
    "code": "```vb\nPublic Class FamilyTree\n    Public Overridable Function GetAncestry() As String\n        Return \"Generic Ancestry\"\n    End Function\n\n    Public Overridable Function GetDescendants() As String\n        Return \"Generic Descendants\"\n    End Function\nEnd Class\n\nPublic Class RoyalLineage\n    Inherits FamilyTree\n\n    Public Overrides Function GetAncestry() As String\n        Return \"Historical Royal Ancestry\"\n    End Function\n\n    Public Overrides Function GetDescendants() As String\n        Return \"Historical Royal Descendants\"\n    End Function\nEnd Class\n```"
  },
  {
    "task": "Implement a base class for a musical score with methods for composition and arrangement, then create a symphony subclass that overrides these methods for orchestration.",
    "code": "```vb\nPublic Class MusicalScore\n    Public Overridable Sub Compose()\n        ' Base composition logic\n    End Sub\n\n    Public Overridable Sub Arrange()\n        ' Base arrangement logic\n    End Sub\nEnd Class\n\nPublic Class Symphony\n    Inherits MusicalScore\n\n    Public Overrides Sub Compose()\n        ' Orchestration-specific composition logic\n    End Sub\n\n    Public Overrides Sub Arrange()\n        ' Orchestration-specific arrangement logic\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Construct a parent class for a historical record with methods for events and dates, then derive a war history class that overrides these methods for battles.",
    "code": "```vb\nPublic Class HistoricalRecord\n    Public Overridable Function EventDetails() As String\n        Return \"General historical event details.\"\n    End Function\n\n    Public Overridable Function DateInfo() As String\n        Return \"General date information for the event.\"\n    End Function\nEnd Class\n\nPublic Class WarHistory\n    Inherits HistoricalRecord\n\n    Public Overrides Function EventDetails() As String\n        Return \"Detailed battle event information.\"\n    End Function\n\n    Public Overrides Function DateInfo() As String\n        Return \"Specific date information for the battle.\"\n    End Function\nEnd Class\n```"
  },
  {
    "task": "Set up a base class for a pet adoption service with methods for application and approval, and extend it with a dog adoption subclass that overrides these methods for breed compatibility.",
    "code": "```vb\nPublic Class PetAdoption\n    Public Overridable Sub Apply()\n        Console.WriteLine(\"Application submitted for pet adoption.\")\n    End Sub\n\n    Public Overridable Sub Approve()\n        Console.WriteLine(\"Application approved for pet adoption.\")\n    End Sub\nEnd Class\n\nPublic Class DogAdoption\n    Inherits PetAdoption\n\n    Public Overrides Sub Apply()\n        Console.WriteLine(\"Application submitted for dog adoption.\")\n    End Sub\n\n    Public Overrides Sub Approve()\n        Console.WriteLine(\"Application approved for dog adoption with breed compatibility check.\")\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Create a foundational class for a financial report with properties like fiscal year and summary, and derive an annual report class that overrides the fiscal year property for yearly data.",
    "code": "```vb\nPublic Class FinancialReport\n    Private _fiscalYear As String\n    Private _summary As String\n\n    Public Property FiscalYear As String\n        Get\n            Return _fiscalYear\n        End Get\n        Set(value As String)\n            _fiscalYear = value\n        End Set\n    End Property\n\n    Public Property Summary As String\n        Get\n            Return _summary\n        End Get\n        Set(value As String)\n            _summary = value\n        End Set\n    End Property\nEnd Class\n\nPublic Class AnnualReport\n    Inherits FinancialReport\n\n    Public Overrides Property FiscalYear As String\n        Get\n            Return MyBase.FiscalYear\n        End Get\n        Set(value As String)\n            MyBase.FiscalYear = value\n        End Set\n    End Property\nEnd Class\n```"
  },
  {
    "task": "Design a base class for a movie franchise with methods for casting and production, then create a sequel subclass that overrides these methods for continuity.",
    "code": "```vb\nPublic Class MovieFranchise\n    Public Overridable Sub Cast()\n        Console.WriteLine(\"Casting actors for the franchise.\")\n    End Sub\n\n    Public Overridable Sub Produce()\n        Console.WriteLine(\"Producing the movie for the franchise.\")\n    End Sub\nEnd Class\n\nPublic Class Sequel\n    Inherits MovieFranchise\n\n    Public Overrides Sub Cast()\n        Console.WriteLine(\"Casting actors for the sequel to ensure continuity.\")\n    End Sub\n\n    Public Overrides Sub Produce()\n        Console.WriteLine(\"Producing the sequel with continuity considerations.\")\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Develop a superclass for a real estate listing with methods for pricing and description, then extend it with a luxury listing subclass that overrides these methods for high-end features.",
    "code": "```vb\nPublic Class RealEstateListing\n    Public Overridable Function Pricing() As String\n        Return \"Standard pricing details.\"\n    End Function\n    \n    Public Overridable Function Description() As String\n        Return \"Standard description of the property.\"\n    End Function\nEnd Class\n\nPublic Class LuxuryListing\n    Inherits RealEstateListing\n    \n    Public Overrides Function Pricing() As String\n        Return \"Luxury pricing details with premium features.\"\n    End Function\n    \n    Public Overrides Function Description() As String\n        Return \"Luxury description with high-end amenities.\"\n    End Function\nEnd Class\n```"
  },
  {
    "task": "Implement a base class for a mobile app with methods for user interface and performance, then create a gaming app subclass that overrides these methods for graphics and speed.",
    "code": "```vb\nPublic Class MobileApp\n    Public Overridable Sub UserInterface()\n        Console.WriteLine(\"Standard User Interface\")\n    End Sub\n\n    Public Overridable Sub Performance()\n        Console.WriteLine(\"Standard Performance\")\n    End Sub\nEnd Class\n\nPublic Class GamingApp\n    Inherits MobileApp\n\n    Public Overrides Sub UserInterface()\n        Console.WriteLine(\"Enhanced Graphics User Interface\")\n    End Sub\n\n    Public Overrides Sub Performance()\n        Console.WriteLine(\"High-Speed Performance\")\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Construct a parent class for a corporate policy with methods for compliance and enforcement, then derive an HR policy class that overrides these methods for employee relations.",
    "code": "```vb\nPublic Class CorporatePolicy\n    Public Overridable Sub Compliance()\n        Console.WriteLine(\"Compliance process for corporate policy.\")\n    End Sub\n\n    Public Overridable Sub Enforcement()\n        Console.WriteLine(\"Enforcement process for corporate policy.\")\n    End Sub\nEnd Class\n\nPublic Class HRPolicy\n    Inherits CorporatePolicy\n\n    Public Overrides Sub Compliance()\n        Console.WriteLine(\"Compliance process for HR policy related to employee relations.\")\n    End Sub\n\n    Public Overrides Sub Enforcement()\n        Console.WriteLine(\"Enforcement process for HR policy related to employee relations.\")\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Set up a base class for a scientific calculator with methods for basic operations and advanced functions, and extend it with a graphing calculator subclass that overrides these methods for plotting.",
    "code": "```vb\nPublic Class ScientificCalculator\n    Public Overridable Function Add(a As Double, b As Double) As Double\n        Return a + b\n    End Function\n\n    Public Overridable Function Subtract(a As Double, b As Double) As Double\n        Return a - b\n    End Function\n\n    Public Overridable Function Multiply(a As Double, b As Double) As Double\n        Return a * b\n    End Function\n\n    Public Overridable Function Divide(a As Double, b As Double) As Double\n        If b = 0 Then Throw New DivideByZeroException(\"Cannot divide by zero\")\n        Return a / b\n    End Function\n\n    Public Overridable Function Sin(angle As Double) As Double\n        Return Math.Sin(angle)\n    End Function\n\n    Public Overridable Function Cos(angle As Double) As Double\n        Return Math.Cos(angle)\n    End Function\n\n    Public Overridable Function Tan(angle As Double) As Double\n        Return Math.Tan(angle)\n    End Function\nEnd Class\n\nPublic Class GraphingCalculator\n    Inherits ScientificCalculator\n\n    Public Overrides Function Add(a As Double, b As Double) As Double\n        ' Implement plotting logic for addition\n        Return a + b ' Placeholder for actual plotting logic\n    End Function\n\n    Public Overrides Function Subtract(a As Double, b As Double) As Double\n        ' Implement plotting logic for subtraction\n        Return a - b ' Placeholder for actual plotting logic\n    End Function\n\n    Public Overrides Function Multiply(a As Double, b As Double) As Double\n        ' Implement plotting logic for multiplication\n        Return a * b ' Placeholder for actual plotting logic\n    End Function\n\n    Public Overrides Function Divide(a As Double, b As Double) As Double\n        If b = 0 Then Throw New DivideByZeroException(\"Cannot divide by zero\")\n        ' Implement plotting logic for division\n        Return a / b ' Placeholder for actual plotting logic\n    End Function\n\n    Public Overrides Function Sin(angle As Double) As Double\n        ' Implement plotting logic for sine\n        Return Math.Sin(angle) ' Placeholder for actual plotting logic\n    End Function\n\n    Public Overrides Function Cos(angle As Double) As Double\n        ' Implement plotting logic for cosine\n        Return Math.Cos(angle) ' Placeholder for actual plotting logic\n    End Function\n\n    Public Overrides Function Tan(angle As Double) As Double\n        ' Implement plotting logic for tangent\n        Return Math.Tan(angle) ' Placeholder for actual plotting logic\n    End Function\nEnd Class\n```"
  },
  {
    "task": "Create a foundational class for a children's book with properties like age group and illustrations, and derive a picture book class that overrides the illustrations property to be more prominent.",
    "code": "```vb\nPublic Class ChildrensBook\n    Public Property AgeGroup As String\n    Public Overridable Property Illustrations As Boolean\nEnd Class\n\nPublic Class PictureBook\n    Inherits ChildrensBook\n\n    Public Overrides Property Illustrations As Boolean\n        Get\n            Return True\n        End Get\n        Set(value As Boolean)\n            ' Illustrations are always prominent in picture books, so no action needed.\n        End Set\n    End Property\nEnd Class\n```"
  },
  {
    "task": "Design a base class for a cooking class with methods for ingredients and techniques, then create a baking class subclass that overrides these methods for dough preparation.",
    "code": "```vb\nPublic Class CookingClass\n    Public Overridable Sub Ingredients()\n        Console.WriteLine(\"Generic ingredients for any recipe.\")\n    End Sub\n\n    Public Overridable Sub Techniques()\n        Console.WriteLine(\"Generic techniques for cooking.\")\n    End Sub\nEnd Class\n\nPublic Class BakingClass\n    Inherits CookingClass\n\n    Public Overrides Sub Ingredients()\n        Console.WriteLine(\"Specific ingredients for baking, such as flour, eggs, and sugar.\")\n    End Sub\n\n    Public Overrides Sub Techniques()\n        Console.WriteLine(\"Specific baking techniques, such as kneading dough.\")\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Develop a superclass for a public transportation system with methods for routes and schedules, then extend it with a metro system subclass that overrides these methods for urban areas.",
    "code": "```vb\nPublic Class PublicTransportationSystem\n    Public Overridable Function GetRoutes() As String\n        Return \"General routes for public transportation.\"\n    End Function\n\n    Public Overridable Function GetSchedules() As String\n        Return \"General schedules for public transportation.\"\n    End Function\nEnd Class\n\nPublic Class MetroSystem\n    Inherits PublicTransportationSystem\n\n    Public Overrides Function GetRoutes() As String\n        Return \"Urban metro routes.\"\n    End Function\n\n    Public Overrides Function GetSchedules() As String\n        Return \"Urban metro schedules.\"\n    End Function\nEnd Class\n```"
  },
  {
    "task": "Implement a base class for a music store inventory with methods for stock and sales, then create a vinyl record subclass that overrides these methods for collectible items.",
    "code": "```vb\nPublic Class MusicStoreInventory\n    Protected StockCount As Integer\n    Protected SalesCount As Integer\n\n    Public Overridable Sub UpdateStock(count As Integer)\n        StockCount += count\n    End Sub\n\n    Public Overridable Sub RecordSale(count As Integer)\n        SalesCount += count\n        StockCount -= count\n    End Sub\n\n    Public Function GetStockCount() As Integer\n        Return StockCount\n    End Function\n\n    Public Function GetSalesCount() As Integer\n        Return SalesCount\n    End Function\nEnd Class\n\nPublic Class VinylRecord\n    Inherits MusicStoreInventory\n\n    Public Overrides Sub UpdateStock(count As Integer)\n        StockCount += count\n        ' Additional logic for collectible items\n    End Sub\n\n    Public Overrides Sub RecordSale(count As Integer)\n        SalesCount += count\n        StockCount -= count\n        ' Additional logic for collectible items\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Construct a parent class for a legal contract with methods for terms and conditions, then derive a rental agreement class that overrides these methods for tenant rights.",
    "code": "```vbnet\nPublic Class LegalContract\n    Public Overridable Function TermsAndConditions() As String\n        Return \"Standard terms and conditions of the contract.\"\n    End Function\nEnd Class\n\nPublic Class RentalAgreement\n    Inherits LegalContract\n\n    Public Overrides Function TermsAndConditions() As String\n        Return \"Terms and conditions specific to tenant rights.\"\n    End Function\nEnd Class\n```"
  },
  {
    "task": "Set up a base class for a journalism piece with methods for reporting and editing, and extend it with an investigative article subclass that overrides these methods for in-depth analysis.",
    "code": "```vb\nPublic Class JournalismPiece\n    Public Overridable Sub Report()\n        Console.WriteLine(\"Reporting the news.\")\n    End Sub\n\n    Public Overridable Sub Edit()\n        Console.WriteLine(\"Editing the article.\")\n    End Sub\nEnd Class\n\nPublic Class InvestigativeArticle\n    Inherits JournalismPiece\n\n    Public Overrides Sub Report()\n        Console.WriteLine(\"Conducting in-depth investigation.\")\n    End Sub\n\n    Public Overrides Sub Edit()\n        Console.WriteLine(\"Editing with focus on detailed analysis.\")\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Create a foundational class for a wildlife reserve with properties like area and species, and derive a bird sanctuary class that overrides the species property for avians.",
    "code": "```vb\nPublic Class WildlifeReserve\n    Public Property Area As Double\n    Public Overridable Property Species As String\nEnd Class\n\nPublic Class BirdSanctuary\n    Inherits WildlifeReserve\n\n    Public Overrides Property Species As String\n        Get\n            Return \"Avians\"\n        End Get\n        Set(value As String)\n            ' Do nothing or handle as needed\n        End Set\n    End Property\nEnd Class\n```"
  },
  {
    "task": "Design a base class for a subscription box service with methods for curation and delivery, then create a gourmet food box subclass that overrides these methods for artisanal products.",
    "code": "```vb\nPublic Class SubscriptionBox\n    Public Overridable Sub Curate()\n        Console.WriteLine(\"Curating general items for the subscription box.\")\n    End Sub\n\n    Public Overridable Sub Deliver()\n        Console.WriteLine(\"Delivering the subscription box.\")\n    End Sub\nEnd Class\n\nPublic Class GourmetFoodBox\n    Inherits SubscriptionBox\n\n    Public Overrides Sub Curate()\n        Console.WriteLine(\"Curating artisanal products for the gourmet food box.\")\n    End Sub\n\n    Public Overrides Sub Deliver()\n        Console.WriteLine(\"Delivering the gourmet food box with care.\")\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Develop a superclass for a fitness app with methods for tracking and motivation, then extend it with a running app subclass that overrides these methods for pace and distance.",
    "code": "```vb\nPublic Class FitnessApp\n    Public Overridable Sub Track()\n        Console.WriteLine(\"Tracking fitness activity...\")\n    End Sub\n    \n    Public Overridable Sub Motivate()\n        Console.WriteLine(\"Stay motivated!\")\n    End Sub\nEnd Class\n\nPublic Class RunningApp\n    Inherits FitnessApp\n\n    Public Overrides Sub Track()\n        Console.WriteLine(\"Tracking running pace and distance...\")\n    End Sub\n    \n    Public Overrides Sub Motivate()\n        Console.WriteLine(\"Keep pushing your limits!\")\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Implement a base class for a digital portfolio with methods for showcasing and updating, then create an artist portfolio subclass that overrides these methods for galleries.",
    "code": "```vb\nPublic Class DigitalPortfolio\n    Public Overridable Sub Showcase()\n        Console.WriteLine(\"Showcasing digital portfolio.\")\n    End Sub\n\n    Public Overridable Sub UpdatePortfolio()\n        Console.WriteLine(\"Updating digital portfolio.\")\n    End Sub\nEnd Class\n\nPublic Class ArtistPortfolio\n    Inherits DigitalPortfolio\n\n    Public Overrides Sub Showcase()\n        Console.WriteLine(\"Showcasing artist portfolio gallery.\")\n    End Sub\n\n    Public Overrides Sub UpdatePortfolio()\n        Console.WriteLine(\"Updating artist portfolio gallery.\")\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Construct a parent class for a gaming console with methods for performance and compatibility, then derive a next-gen console class that overrides these methods for new features.",
    "code": "```vb\nPublic Class GamingConsole\n    Public Overridable Sub Performance()\n        Console.WriteLine(\"Standard performance features.\")\n    End Sub\n\n    Public Overridable Sub Compatibility()\n        Console.WriteLine(\"Standard compatibility features.\")\n    End Sub\nEnd Class\n\nPublic Class NextGenConsole\n    Inherits GamingConsole\n\n    Public Overrides Sub Performance()\n        Console.WriteLine(\"Enhanced performance features for next-gen.\")\n    End Sub\n\n    Public Overrides Sub Compatibility()\n        Console.WriteLine(\"Advanced compatibility features for next-gen.\")\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Set up a base class for a cultural festival with methods for events and participation, and extend it with a music festival subclass that overrides these methods for performances.",
    "code": "```vb\nPublic Class CulturalFestival\n    Public Overridable Sub Events()\n        Console.WriteLine(\"General cultural events are organized.\")\n    End Sub\n\n    Public Overridable Sub Participation()\n        Console.WriteLine(\"Participants from various cultures are invited.\")\n    End Sub\nEnd Class\n\nPublic Class MusicFestival\n    Inherits CulturalFestival\n\n    Public Overrides Sub Events()\n        Console.WriteLine(\"Music performances are scheduled.\")\n    End Sub\n\n    Public Overrides Sub Participation()\n        Console.WriteLine(\"Musicians from various genres are invited.\")\n    End Sub\nEnd Class\n```"
  }
]