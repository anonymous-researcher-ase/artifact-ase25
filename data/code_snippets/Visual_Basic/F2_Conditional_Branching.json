[
  {
    "task": "Write a program that checks if a number is even or odd and outputs the result.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim number As Integer\n        Console.Write(\"Enter a number: \")\n        number = Convert.ToInt32(Console.ReadLine())\n\n        If number Mod 2 = 0 Then\n            Console.WriteLine(\"The number is even.\")\n        Else\n            Console.WriteLine(\"The number is odd.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a function that determines if a given year is a leap year.",
    "code": "```vb\nFunction IsLeapYear(ByVal year As Integer) As Boolean\n    If (year Mod 4 = 0) Then\n        If (year Mod 100 = 0) Then\n            If (year Mod 400 = 0) Then\n                Return True\n            Else\n                Return False\n            End If\n        Else\n            Return True\n        End If\n    Else\n        Return False\n    End If\nEnd Function\n```"
  },
  {
    "task": "Develop a script that categorizes an input number as positive, negative, or zero.",
    "code": "```vb\nSub CategorizeNumber()\n    Dim inputNumber As Integer\n    inputNumber = CInt(InputBox(\"Enter a number:\"))\n\n    If inputNumber > 0 Then\n        MsgBox \"The number is positive.\"\n    ElseIf inputNumber < 0 Then\n        MsgBox \"The number is negative.\"\n    Else\n        MsgBox \"The number is zero.\"\n    End If\nEnd Sub\n```"
  },
  {
    "task": "Implement a system that grants access only if a correct password and username are provided.",
    "code": "```vb\nModule AccessControl\n    Sub Main()\n        Dim correctUsername As String = \"admin\"\n        Dim correctPassword As String = \"password123\"\n\n        Console.WriteLine(\"Enter Username:\")\n        Dim inputUsername As String = Console.ReadLine()\n\n        Console.WriteLine(\"Enter Password:\")\n        Dim inputPassword As String = Console.ReadLine()\n\n        If inputUsername = correctUsername AndAlso inputPassword = correctPassword Then\n            Console.WriteLine(\"Access Granted\")\n        Else\n            Console.WriteLine(\"Access Denied\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a program that outputs 'Fizz' for numbers divisible by 3, 'Buzz' for numbers divisible by 5, and 'FizzBuzz' for numbers divisible by both.",
    "code": "```vb\nModule FizzBuzz\n    Sub Main()\n        For i As Integer = 1 To 100\n            If i Mod 15 = 0 Then\n                Console.WriteLine(\"FizzBuzz\")\n            ElseIf i Mod 3 = 0 Then\n                Console.WriteLine(\"Fizz\")\n            ElseIf i Mod 5 = 0 Then\n                Console.WriteLine(\"Buzz\")\n            Else\n                Console.WriteLine(i)\n            End If\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function to determine if a character is a vowel or a consonant.",
    "code": "```vb\nFunction CheckVowelOrConsonant(ByVal ch As Char) As String\n    Dim vowels As String = \"AEIOUaeiou\"\n    If vowels.Contains(ch) Then\n        Return \"Vowel\"\n    Else\n        Return \"Consonant\"\n    End If\nEnd Function\n```"
  },
  {
    "task": "Create a program that assigns letter grades based on numerical scores.",
    "code": "```vb\nModule GradeAssignment\n    Sub Main()\n        Console.WriteLine(\"Enter the numerical score:\")\n        Dim score As Integer = Convert.ToInt32(Console.ReadLine())\n        Dim grade As String\n\n        If score >= 90 Then\n            grade = \"A\"\n        ElseIf score >= 80 Then\n            grade = \"B\"\n        ElseIf score >= 70 Then\n            grade = \"C\"\n        ElseIf score >= 60 Then\n            grade = \"D\"\n        Else\n            grade = \"F\"\n        End If\n\n        Console.WriteLine(\"The letter grade is: \" & grade)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a routine that suggests clothing based on the current temperature.",
    "code": "```vb\nSub SuggestClothing(ByVal temperature As Integer)\n    Dim suggestion As String\n\n    If temperature < 0 Then\n        suggestion = \"Wear a heavy coat, scarf, and gloves.\"\n    ElseIf temperature >= 0 And temperature <= 10 Then\n        suggestion = \"Wear a coat and a warm hat.\"\n    ElseIf temperature > 10 And temperature <= 20 Then\n        suggestion = \"Wear a light jacket.\"\n    ElseIf temperature > 20 And temperature <= 30 Then\n        suggestion = \"Wear a t-shirt and shorts.\"\n    Else\n        suggestion = \"Wear light clothing and stay hydrated.\"\n    End If\n\n    Console.WriteLine(\"Suggestion: \" & suggestion)\nEnd Sub\n```"
  },
  {
    "task": "Implement a system that checks if a user is an adult or a minor based on their age.",
    "code": "```vb\nModule AgeChecker\n    Sub Main()\n        Dim age As Integer\n        Console.Write(\"Enter your age: \")\n        age = Convert.ToInt32(Console.ReadLine())\n\n        If age >= 18 Then\n            Console.WriteLine(\"User is an adult.\")\n        Else\n            Console.WriteLine(\"User is a minor.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a program that validates if a triangle can exist based on its side lengths.",
    "code": "```vb\nModule TriangleValidator\n    Sub Main()\n        Console.WriteLine(\"Enter the length of side A:\")\n        Dim sideA As Double = Convert.ToDouble(Console.ReadLine())\n        \n        Console.WriteLine(\"Enter the length of side B:\")\n        Dim sideB As Double = Convert.ToDouble(Console.ReadLine())\n        \n        Console.WriteLine(\"Enter the length of side C:\")\n        Dim sideC As Double = Convert.ToDouble(Console.ReadLine())\n        \n        If (sideA + sideB > sideC) AndAlso (sideA + sideC > sideB) AndAlso (sideB + sideC > sideA) Then\n            Console.WriteLine(\"The triangle is valid.\")\n        Else\n            Console.WriteLine(\"The triangle is not valid.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function that determines the largest of three input numbers.",
    "code": "```vb\nFunction LargestOfThree(a As Double, b As Double, c As Double) As Double\n    If a >= b And a >= c Then\n        Return a\n    ElseIf b >= a And b >= c Then\n        Return b\n    Else\n        Return c\n    End If\nEnd Function\n```"
  },
  {
    "task": "Create a program that checks if a string is a palindrome.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Console.WriteLine(\"Enter a string:\")\n        Dim input As String = Console.ReadLine()\n        Dim isPalindrome As Boolean = True\n        Dim length As Integer = input.Length\n\n        For i As Integer = 0 To length \\ 2\n            If input(i) <> input(length - i - 1) Then\n                isPalindrome = False\n                Exit For\n            End If\n        Next\n\n        If isPalindrome Then\n            Console.WriteLine(\"The string is a palindrome.\")\n        Else\n            Console.WriteLine(\"The string is not a palindrome.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a routine that calculates the total cost with a discount applied if applicable.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim originalCost As Double = 100.0\n        Dim discountRate As Double = 0.1\n        Dim totalCost As Double\n\n        If originalCost > 50 Then\n            totalCost = originalCost - (originalCost * discountRate)\n        Else\n            totalCost = originalCost\n        End If\n\n        Console.WriteLine(\"Total Cost: \" & totalCost)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a system that checks if a person is eligible to vote based on age and citizenship.",
    "code": "```vb\nModule VotingEligibility\n    Sub Main()\n        Dim age As Integer\n        Dim isCitizen As Boolean\n\n        Console.WriteLine(\"Enter age:\")\n        age = CInt(Console.ReadLine())\n\n        Console.WriteLine(\"Are you a citizen? (yes/no):\")\n        Dim citizenInput As String = Console.ReadLine().ToLower()\n        isCitizen = (citizenInput = \"yes\")\n\n        If age >= 18 AndAlso isCitizen Then\n            Console.WriteLine(\"You are eligible to vote.\")\n        Else\n            Console.WriteLine(\"You are not eligible to vote.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a function that returns the day of the week given a number from 1 to 7.",
    "code": "```vb\nFunction GetDayOfWeek(dayNumber As Integer) As String\n    Select Case dayNumber\n        Case 1\n            Return \"Sunday\"\n        Case 2\n            Return \"Monday\"\n        Case 3\n            Return \"Tuesday\"\n        Case 4\n            Return \"Wednesday\"\n        Case 5\n            Return \"Thursday\"\n        Case 6\n            Return \"Friday\"\n        Case 7\n            Return \"Saturday\"\n        Case Else\n            Return \"Invalid\"\n    End Select\nEnd Function\n```"
  },
  {
    "task": "Write a program that determines if a word is found within a given sentence.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim sentence As String = \"This is a sample sentence.\"\n        Dim word As String = \"sample\"\n        If sentence.Contains(word) Then\n            Console.WriteLine(\"The word is found in the sentence.\")\n        Else\n            Console.WriteLine(\"The word is not found in the sentence.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a script that checks if a number is within a specified range.",
    "code": "```vb\nModule Program\n    Sub Main()\n        Dim number As Integer = 10\n        Dim lowerBound As Integer = 5\n        Dim upperBound As Integer = 15\n\n        If number >= lowerBound AndAlso number <= upperBound Then\n            Console.WriteLine(\"The number is within the range.\")\n        Else\n            Console.WriteLine(\"The number is out of the range.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a routine to decide if a user input is a valid email address.",
    "code": "```vb\nFunction IsValidEmail(email As String) As Boolean\n    Dim atIndex As Integer\n    Dim dotIndex As Integer\n    Dim isValid As Boolean\n\n    ' Check if \"@\" is present and not at the start or end\n    atIndex = InStr(email, \"@\")\n    If atIndex <= 1 Or atIndex = Len(email) Then\n        IsValidEmail = False\n        Exit Function\n    End If\n\n    ' Check if \".\" is present after \"@\" and not at the end\n    dotIndex = InStr(atIndex + 1, email, \".\")\n    If dotIndex <= atIndex + 1 Or dotIndex = Len(email) Then\n        IsValidEmail = False\n        Exit Function\n    End If\n    \n    ' Check for invalid characters\n    If InStr(email, \" \") > 0 Then\n        IsValidEmail = False\n        Exit Function\n    End If\n\n    ' If all conditions are satisfied\n    IsValidEmail = True\nEnd Function\n```"
  },
  {
    "task": "Implement a program that categorizes a number as small, medium, or large.",
    "code": "```vb\nModule Program\n    Sub Main()\n        Dim number As Integer\n        Console.WriteLine(\"Enter a number:\")\n        number = Convert.ToInt32(Console.ReadLine())\n\n        If number < 10 Then\n            Console.WriteLine(\"The number is small.\")\n        ElseIf number >= 10 AndAlso number <= 100 Then\n            Console.WriteLine(\"The number is medium.\")\n        Else\n            Console.WriteLine(\"The number is large.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a function that outputs the season based on the month provided.",
    "code": "```vb\nFunction GetSeason(ByVal month As Integer) As String\n    Select Case month\n        Case 12, 1, 2\n            Return \"Winter\"\n        Case 3, 4, 5\n            Return \"Spring\"\n        Case 6, 7, 8\n            Return \"Summer\"\n        Case 9, 10, 11\n            Return \"Autumn\"\n        Case Else\n            Return \"Invalid month\"\n    End Select\nEnd Function\n```"
  },
  {
    "task": "Write a program that checks if a string contains only alphabetic characters.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim inputString As String\n        Console.WriteLine(\"Enter a string:\")\n        inputString = Console.ReadLine()\n\n        If IsAlphabetic(inputString) Then\n            Console.WriteLine(\"The string contains only alphabetic characters.\")\n        Else\n            Console.WriteLine(\"The string contains non-alphabetic characters.\")\n        End If\n    End Sub\n\n    Function IsAlphabetic(ByVal str As String) As Boolean\n        For Each ch As Char In str\n            If Not Char.IsLetter(ch) Then\n                Return False\n            End If\n        Next\n        Return True\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Create a routine that decides the type of triangle based on its angles.",
    "code": "```vb\nFunction TriangleType(angle1 As Double, angle2 As Double, angle3 As Double) As String\n    If angle1 + angle2 + angle3 <> 180 Or angle1 <= 0 Or angle2 <= 0 Or angle3 <= 0 Then\n        Return \"Invalid\"\n    ElseIf angle1 = 90 Or angle2 = 90 Or angle3 = 90 Then\n        Return \"Right\"\n    ElseIf angle1 < 90 And angle2 < 90 And angle3 < 90 Then\n        Return \"Acute\"\n    Else\n        Return \"Obtuse\"\n    End If\nEnd Function\n```"
  },
  {
    "task": "Develop a program that suggests a meal based on the time of day.",
    "code": "```vb\nModule MealSuggestion\n    Sub Main()\n        Dim currentTime As DateTime = DateTime.Now\n        Dim hour As Integer = currentTime.Hour\n        Dim mealSuggestion As String\n\n        If hour >= 5 AndAlso hour < 11 Then\n            mealSuggestion = \"Breakfast\"\n        ElseIf hour >= 11 AndAlso hour < 17 Then\n            mealSuggestion = \"Lunch\"\n        ElseIf hour >= 17 AndAlso hour < 21 Then\n            mealSuggestion = \"Dinner\"\n        Else\n            mealSuggestion = \"Snack\"\n        End If\n\n        Console.WriteLine(\"Based on the current time, you should have: \" & mealSuggestion)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a function that determines if a point lies within a circle given its radius.",
    "code": "```vb\nFunction IsPointInCircle(x As Double, y As Double, centerX As Double, centerY As Double, radius As Double) As Boolean\n    Dim dx As Double\n    Dim dy As Double\n    Dim distanceSquared As Double\n    \n    dx = x - centerX\n    dy = y - centerY\n    distanceSquared = dx * dx + dy * dy\n    \n    If distanceSquared <= radius * radius Then\n        Return True\n    Else\n        Return False\n    End If\nEnd Function\n```"
  },
  {
    "task": "Design a script that calculates overtime pay based on hours worked.",
    "code": "```vb\nModule OvertimePayCalculator\n    Sub Main()\n        Dim hoursWorked As Double\n        Dim hourlyRate As Double\n        Dim regularHours As Double = 40\n        Dim overtimeRate As Double = 1.5\n        Dim totalPay As Double\n\n        ' Example input\n        hoursWorked = 45\n        hourlyRate = 20\n\n        If hoursWorked > regularHours Then\n            Dim overtimeHours As Double = hoursWorked - regularHours\n            totalPay = (regularHours * hourlyRate) + (overtimeHours * hourlyRate * overtimeRate)\n        Else\n            totalPay = hoursWorked * hourlyRate\n        End If\n\n        Console.WriteLine(\"Total Pay: \" & totalPay)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a program that checks if two strings are anagrams of each other.",
    "code": "```vb\nModule Module1\n\n    Sub Main()\n        Dim str1 As String = \"listen\"\n        Dim str2 As String = \"silent\"\n        \n        If AreAnagrams(str1, str2) Then\n            Console.WriteLine(\"The strings are anagrams.\")\n        Else\n            Console.WriteLine(\"The strings are not anagrams.\")\n        End If\n    End Sub\n\n    Function AreAnagrams(ByVal s1 As String, ByVal s2 As String) As Boolean\n        If s1.Length <> s2.Length Then\n            Return False\n        End If\n        \n        Dim charArray1 As Char() = s1.ToCharArray()\n        Dim charArray2 As Char() = s2.ToCharArray()\n        \n        Array.Sort(charArray1)\n        Array.Sort(charArray2)\n        \n        Return charArray1.SequenceEqual(charArray2)\n    End Function\n\nEnd Module\n```"
  },
  {
    "task": "Create a function that classifies numbers as prime or composite.",
    "code": "```vb\nFunction ClassifyNumber(ByVal num As Integer) As String\n    If num <= 1 Then\n        Return \"Neither Prime Nor Composite\"\n    End If\n\n    For i As Integer = 2 To Math.Sqrt(num)\n        If num Mod i = 0 Then\n            Return \"Composite\"\n        End If\n    Next\n\n    Return \"Prime\"\nEnd Function\n```"
  },
  {
    "task": "Develop a routine to determine if a number is a power of two.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim number As Integer = 16\n        If IsPowerOfTwo(number) Then\n            Console.WriteLine(number & \" is a power of two.\")\n        Else\n            Console.WriteLine(number & \" is not a power of two.\")\n        End If\n    End Sub\n\n    Function IsPowerOfTwo(ByVal n As Integer) As Boolean\n        If n < 1 Then\n            Return False\n        End If\n        Return (n And (n - 1)) = 0\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Implement a program that checks if a list is sorted in ascending order.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers As Integer() = {1, 2, 3, 4, 5}\n        Dim isSorted As Boolean = True\n        \n        For i As Integer = 0 To numbers.Length - 2\n            If numbers(i) > numbers(i + 1) Then\n                isSorted = False\n                Exit For\n            End If\n        Next\n        \n        If isSorted Then\n            Console.WriteLine(\"The list is sorted in ascending order.\")\n        Else\n            Console.WriteLine(\"The list is not sorted in ascending order.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a function that suggests a sport based on the weather conditions.",
    "code": "```vb\nFunction SuggestSport(weather As String) As String\n    Select Case weather.ToLower()\n        Case \"sunny\"\n            Return \"Tennis\"\n        Case \"rainy\"\n            Return \"Indoor Swimming\"\n        Case \"windy\"\n            Return \"Kite Flying\"\n        Case \"snowy\"\n            Return \"Skiing\"\n        Case Else\n            Return \"Stay Home\"\n    End Select\nEnd Function\n```"
  },
  {
    "task": "Write a program that determines if an entered date is valid.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Console.WriteLine(\"Enter a date (MM/DD/YYYY):\")\n        Dim input As String = Console.ReadLine()\n        Dim enteredDate As DateTime\n\n        If DateTime.TryParse(input, enteredDate) Then\n            Console.WriteLine(\"The entered date is valid.\")\n        Else\n            Console.WriteLine(\"The entered date is invalid.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a script to decide which of two products to buy based on price and reviews.",
    "code": "```vb\nModule ProductDecision\n    Sub Main()\n        Dim product1Price As Double = 25.99\n        Dim product1Reviews As Integer = 100\n        Dim product2Price As Double = 20.49\n        Dim product2Reviews As Integer = 150\n\n        If product1Price < product2Price AndAlso product1Reviews >= product2Reviews Then\n            Console.WriteLine(\"Buy Product 1\")\n        ElseIf product2Price < product1Price AndAlso product2Reviews >= product1Reviews Then\n            Console.WriteLine(\"Buy Product 2\")\n        ElseIf product1Price = product2Price Then\n            If product1Reviews > product2Reviews Then\n                Console.WriteLine(\"Buy Product 1\")\n            ElseIf product2Reviews > product1Reviews Then\n                Console.WriteLine(\"Buy Product 2\")\n            Else\n                Console.WriteLine(\"Both products are the same\")\n            End If\n        Else\n            Console.WriteLine(\"Consider other factors\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a function that categorizes a person\u2019s BMI as underweight, normal, overweight, or obese.",
    "code": "```vb\nFunction CategorizeBMI(bmi As Double) As String\n    If bmi < 18.5 Then\n        Return \"Underweight\"\n    ElseIf bmi >= 18.5 And bmi < 24.9 Then\n        Return \"Normal\"\n    ElseIf bmi >= 24.9 And bmi < 29.9 Then\n        Return \"Overweight\"\n    Else\n        Return \"Obese\"\n    End If\nEnd Function\n```"
  },
  {
    "task": "Implement a program that checks if a credit card number is valid using the Luhn algorithm.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Console.WriteLine(\"Enter a credit card number:\")\n        Dim cardNumber As String = Console.ReadLine()\n\n        If IsValidCardNumber(cardNumber) Then\n            Console.WriteLine(\"The credit card number is valid.\")\n        Else\n            Console.WriteLine(\"The credit card number is invalid.\")\n        End If\n    End Sub\n\n    Function IsValidCardNumber(cardNumber As String) As Boolean\n        Dim sum As Integer = 0\n        Dim alt As Boolean = False\n\n        For i As Integer = cardNumber.Length - 1 To 0 Step -1\n            Dim n As Integer = Integer.Parse(cardNumber(i).ToString())\n\n            If alt Then\n                n *= 2\n                If n > 9 Then\n                    n -= 9\n                End If\n            End If\n\n            sum += n\n            alt = Not alt\n        Next\n\n        Return sum Mod 10 = 0\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Design a routine that outputs a greeting based on the current time of day.",
    "code": "```vb\nModule GreetingModule\n    Sub Main()\n        Dim currentTime As DateTime = DateTime.Now\n        Dim currentHour As Integer = currentTime.Hour\n        Dim greeting As String\n\n        If currentHour >= 0 And currentHour < 12 Then\n            greeting = \"Good Morning\"\n        ElseIf currentHour >= 12 And currentHour < 18 Then\n            greeting = \"Good Afternoon\"\n        Else\n            greeting = \"Good Evening\"\n        End If\n\n        Console.WriteLine(greeting)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a program that determines if a given word can be formed with a set of letters.",
    "code": "```vb\nModule Program\n    Sub Main()\n        Dim word As String = \"example\"\n        Dim letters As String = \"elpmaxe\"\n        \n        If CanFormWord(word, letters) Then\n            Console.WriteLine(\"The word can be formed.\")\n        Else\n            Console.WriteLine(\"The word cannot be formed.\")\n        End If\n    End Sub\n\n    Function CanFormWord(ByVal word As String, ByVal letters As String) As Boolean\n        Dim lettersCount As New Dictionary(Of Char, Integer)\n\n        For Each letter As Char In letters\n            If lettersCount.ContainsKey(letter) Then\n                lettersCount(letter) += 1\n            Else\n                lettersCount(letter) = 1\n            End If\n        Next\n\n        For Each letter As Char In word\n            If lettersCount.ContainsKey(letter) AndAlso lettersCount(letter) > 0 Then\n                lettersCount(letter) -= 1\n            Else\n                Return False\n            End If\n        Next\n\n        Return True\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Create a function that outputs the appropriate greeting based on the day of the week.",
    "code": "```vb\nFunction GetGreeting(ByVal dayOfWeek As String) As String\n    Select Case dayOfWeek.ToLower()\n        Case \"monday\"\n            Return \"Happy Monday!\"\n        Case \"tuesday\"\n            Return \"Terrific Tuesday!\"\n        Case \"wednesday\"\n            Return \"Wonderful Wednesday!\"\n        Case \"thursday\"\n            Return \"Thoughtful Thursday!\"\n        Case \"friday\"\n            Return \"Fantastic Friday!\"\n        Case \"saturday\"\n            Return \"Super Saturday!\"\n        Case \"sunday\"\n            Return \"Sunny Sunday!\"\n        Case Else\n            Return \"Invalid day!\"\n    End Select\nEnd Function\n```"
  },
  {
    "task": "Develop a system to determine if a person qualifies for a senior citizen discount.",
    "code": "```vb\nModule SeniorDiscount\n    Sub Main()\n        Dim age As Integer\n        Console.WriteLine(\"Enter the age of the person:\")\n        age = Convert.ToInt32(Console.ReadLine())\n\n        If age >= 65 Then\n            Console.WriteLine(\"The person qualifies for a senior citizen discount.\")\n        Else\n            Console.WriteLine(\"The person does not qualify for a senior citizen discount.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a function that checks if a number is a perfect square.",
    "code": "```vb\nFunction IsPerfectSquare(ByVal num As Integer) As Boolean\n    If num < 0 Then\n        Return False\n    End If\n\n    Dim root As Integer = Math.Sqrt(num)\n    Return root * root = num\nEnd Function\n```"
  },
  {
    "task": "Design a program that outputs the correct shipping cost based on weight and distance.",
    "code": "```vb\nModule ShippingCostCalculator\n    Sub Main()\n        Dim weight As Double\n        Dim distance As Double\n        Dim cost As Double\n\n        Console.Write(\"Enter package weight (kg): \")\n        weight = Convert.ToDouble(Console.ReadLine())\n\n        Console.Write(\"Enter shipping distance (km): \")\n        distance = Convert.ToDouble(Console.ReadLine())\n\n        If weight <= 5 Then\n            If distance <= 100 Then\n                cost = 5\n            ElseIf distance <= 500 Then\n                cost = 10\n            Else\n                cost = 15\n            End If\n        ElseIf weight <= 20 Then\n            If distance <= 100 Then\n                cost = 10\n            ElseIf distance <= 500 Then\n                cost = 15\n            Else\n                cost = 25\n            End If\n        Else\n            If distance <= 100 Then\n                cost = 20\n            ElseIf distance <= 500 Then\n                cost = 30\n            Else\n                cost = 50\n            End If\n        End If\n\n        Console.WriteLine(\"The shipping cost is: $\" & cost)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a routine that chooses the correct pronoun based on gender input.",
    "code": "```vb\nFunction ChoosePronoun(gender As String) As String\n    Dim pronoun As String\n    Select Case gender.ToLower()\n        Case \"male\"\n            pronoun = \"he\"\n        Case \"female\"\n            pronoun = \"she\"\n        Case Else\n            pronoun = \"they\"\n    End Select\n    Return pronoun\nEnd Function\n```"
  },
  {
    "task": "Create a program that checks if a user input is a palindrome number.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Console.WriteLine(\"Enter a number:\")\n        Dim input As String = Console.ReadLine()\n        Dim reversedInput As String = StrReverse(input)\n\n        If input = reversedInput Then\n            Console.WriteLine(\"The number is a palindrome.\")\n        Else\n            Console.WriteLine(\"The number is not a palindrome.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a script to decide if a number is a perfect number.",
    "code": "```vb\nModule PerfectNumberCheck\n    Sub Main()\n        Dim number As Integer\n        Console.WriteLine(\"Enter a number:\")\n        number = Convert.ToInt32(Console.ReadLine())\n        \n        If IsPerfectNumber(number) Then\n            Console.WriteLine(number & \" is a perfect number.\")\n        Else\n            Console.WriteLine(number & \" is not a perfect number.\")\n        End If\n    End Sub\n\n    Function IsPerfectNumber(ByVal num As Integer) As Boolean\n        Dim sum As Integer = 0\n        For i As Integer = 1 To num \\ 2\n            If num Mod i = 0 Then\n                sum += i\n            End If\n        Next\n        Return sum = num\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Implement a system that determines the winner in a rock-paper-scissors game.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Console.WriteLine(\"Enter Player 1 choice (rock, paper, scissors):\")\n        Dim player1Choice As String = Console.ReadLine().ToLower()\n\n        Console.WriteLine(\"Enter Player 2 choice (rock, paper, scissors):\")\n        Dim player2Choice As String = Console.ReadLine().ToLower()\n\n        If player1Choice = player2Choice Then\n            Console.WriteLine(\"It's a tie!\")\n        ElseIf player1Choice = \"rock\" And player2Choice = \"scissors\" Then\n            Console.WriteLine(\"Player 1 wins!\")\n        ElseIf player1Choice = \"scissors\" And player2Choice = \"paper\" Then\n            Console.WriteLine(\"Player 1 wins!\")\n        ElseIf player1Choice = \"paper\" And player2Choice = \"rock\" Then\n            Console.WriteLine(\"Player 1 wins!\")\n        Else\n            Console.WriteLine(\"Player 2 wins!\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a function that suggests a movie genre based on user mood.",
    "code": "```vb\nFunction SuggestMovieGenre(mood As String) As String\n    Select Case mood.ToLower()\n        Case \"happy\"\n            Return \"Comedy\"\n        Case \"sad\"\n            Return \"Drama\"\n        Case \"excited\"\n            Return \"Action\"\n        Case \"romantic\"\n            Return \"Romance\"\n        Case \"scared\"\n            Return \"Horror\"\n        Case Else\n            Return \"Documentary\"\n    End Select\nEnd Function\n```"
  },
  {
    "task": "Write a program that checks if a file extension is valid for an image file.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim validExtensions As String() = {\".jpg\", \".jpeg\", \".png\", \".gif\", \".bmp\", \".tiff\"}\n        Console.WriteLine(\"Enter the file name:\")\n        Dim fileName As String = Console.ReadLine()\n        Dim isValid As Boolean = False\n\n        For Each ext As String In validExtensions\n            If fileName.ToLower().EndsWith(ext) Then\n                isValid = True\n                Exit For\n            End If\n        Next\n\n        If isValid Then\n            Console.WriteLine(\"The file extension is valid for an image file.\")\n        Else\n            Console.WriteLine(\"The file extension is not valid for an image file.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a routine that decides the appropriate currency symbol based on country.",
    "code": "```vb\nFunction GetCurrencySymbol(ByVal country As String) As String\n    Select Case country.ToLower()\n        Case \"united states\"\n            Return \"$\"\n        Case \"united kingdom\"\n            Return \"\u00a3\"\n        Case \"japan\"\n            Return \"\u00a5\"\n        Case \"eurozone\"\n            Return \"\u20ac\"\n        Case Else\n            Return \"Unknown\"\n    End Select\nEnd Function\n```"
  },
  {
    "task": "Develop a function that determines if a string is a valid palindrome ignoring spaces and punctuation.",
    "code": "```vb\nFunction IsPalindrome(input As String) As Boolean\n    Dim cleaned As String = \"\"\n    For Each ch As Char In input\n        If Char.IsLetterOrDigit(ch) Then\n            cleaned &= Char.ToLower(ch)\n        End If\n    Next\n    Dim left As Integer = 0\n    Dim right As Integer = cleaned.Length - 1\n    While left < right\n        If cleaned(left) <> cleaned(right) Then\n            Return False\n        End If\n        left += 1\n        right -= 1\n    End While\n    Return True\nEnd Function\n```"
  },
  {
    "task": "Implement a program that checks if a number is in the Fibonacci sequence.",
    "code": "```vb\nModule Module1\n    Function IsFibonacci(n As Integer) As Boolean\n        If n < 0 Then\n            Return False\n        End If\n        \n        Dim a As Integer = 0\n        Dim b As Integer = 1\n        \n        While a < n\n            Dim temp As Integer = a\n            a = b\n            b = temp + b\n        End While\n        \n        If a = n Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\n\n    Sub Main()\n        Dim number As Integer\n        Console.WriteLine(\"Enter a number:\")\n        number = Convert.ToInt32(Console.ReadLine())\n        \n        If IsFibonacci(number) Then\n            Console.WriteLine(\"The number is in the Fibonacci sequence.\")\n        Else\n            Console.WriteLine(\"The number is not in the Fibonacci sequence.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a script to calculate the correct tip based on service quality rating.",
    "code": "```vb\nModule TipCalculator\n    Sub Main()\n        Console.WriteLine(\"Enter the bill amount:\")\n        Dim billAmount As Double = Convert.ToDouble(Console.ReadLine())\n\n        Console.WriteLine(\"Enter the service quality (excellent, good, average, poor):\")\n        Dim serviceQuality As String = Console.ReadLine().ToLower()\n\n        Dim tipPercentage As Double\n\n        Select Case serviceQuality\n            Case \"excellent\"\n                tipPercentage = 0.25\n            Case \"good\"\n                tipPercentage = 0.20\n            Case \"average\"\n                tipPercentage = 0.15\n            Case \"poor\"\n                tipPercentage = 0.10\n            Case Else\n                tipPercentage = 0.0\n        End Select\n\n        Dim tipAmount As Double = billAmount * tipPercentage\n        Console.WriteLine(\"The tip amount is: \" & tipAmount.ToString(\"F2\"))\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function that determines if a year is a century year.",
    "code": "```vb\nFunction IsCenturyYear(year As Integer) As Boolean\n    If year Mod 100 = 0 Then\n        Return True\n    Else\n        Return False\n    End If\nEnd Function\n```"
  },
  {
    "task": "Create a program that checks if a date falls on a weekend.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim inputDate As Date\n        Console.WriteLine(\"Enter a date (yyyy-mm-dd):\")\n        If Date.TryParse(Console.ReadLine(), inputDate) Then\n            Dim dayOfWeek As DayOfWeek = inputDate.DayOfWeek\n            If dayOfWeek = DayOfWeek.Saturday Or dayOfWeek = DayOfWeek.Sunday Then\n                Console.WriteLine(\"The date falls on a weekend.\")\n            Else\n                Console.WriteLine(\"The date is a weekday.\")\n            End If\n        Else\n            Console.WriteLine(\"Invalid date format.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a routine that suggests a book based on genre preference.",
    "code": "```vb\nModule BookSuggestion\n    Sub Main()\n        Console.WriteLine(\"Enter your preferred genre (Fiction, Non-Fiction, Mystery, Science Fiction):\")\n        Dim genre As String = Console.ReadLine()\n\n        Select Case genre.ToLower()\n            Case \"fiction\"\n                Console.WriteLine(\"We suggest 'To Kill a Mockingbird' by Harper Lee.\")\n            Case \"non-fiction\"\n                Console.WriteLine(\"We suggest 'Sapiens: A Brief History of Humankind' by Yuval Noah Harari.\")\n            Case \"mystery\"\n                Console.WriteLine(\"We suggest 'Gone Girl' by Gillian Flynn.\")\n            Case \"science fiction\"\n                Console.WriteLine(\"We suggest 'Dune' by Frank Herbert.\")\n            Case Else\n                Console.WriteLine(\"Sorry, we don't have suggestions for that genre.\")\n        End Select\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a system that determines if a student passes or fails based on their grades.",
    "code": "```vb\nModule StudentGrade\n    Sub Main()\n        Dim grade As Integer\n        Console.WriteLine(\"Enter the student's grade:\")\n        grade = Convert.ToInt32(Console.ReadLine())\n\n        If grade >= 50 Then\n            Console.WriteLine(\"Pass\")\n        Else\n            Console.WriteLine(\"Fail\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a function to validate if a string is a valid URL.",
    "code": "```vb\nImports System.Text.RegularExpressions\n\nModule Module1\n    Function IsValidURL(ByVal url As String) As Boolean\n        Dim pattern As String = \"^(http|https)://([\\w-]+\\.)+[\\w-]+(/[\\w- ./?%&=]*)?$\"\n        Dim regex As New Regex(pattern, RegexOptions.IgnoreCase)\n        If regex.IsMatch(url) Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Write a program that checks if a point is inside a rectangle given its coordinates.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim x As Double\n        Dim y As Double\n        Dim rectX1 As Double = 0\n        Dim rectY1 As Double = 0\n        Dim rectX2 As Double = 10\n        Dim rectY2 As Double = 5\n\n        Console.WriteLine(\"Enter the x coordinate of the point:\")\n        x = Convert.ToDouble(Console.ReadLine())\n        Console.WriteLine(\"Enter the y coordinate of the point:\")\n        y = Convert.ToDouble(Console.ReadLine())\n\n        If x >= rectX1 And x <= rectX2 And y >= rectY1 And y <= rectY2 Then\n            Console.WriteLine(\"The point is inside the rectangle.\")\n        Else\n            Console.WriteLine(\"The point is outside the rectangle.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a script to determine if a word can be constructed from a given set of letters.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim word As String = \"example\"\n        Dim letters As String = \"axmepel\"\n        Dim canConstruct As Boolean = True\n\n        For Each ch As Char In word\n            If letters.Contains(ch) Then\n                letters = letters.Remove(letters.IndexOf(ch), 1)\n            Else\n                canConstruct = False\n                Exit For\n            End If\n        Next\n\n        If canConstruct Then\n            Console.WriteLine(\"The word can be constructed from the given letters.\")\n        Else\n            Console.WriteLine(\"The word cannot be constructed from the given letters.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a routine that calculates insurance premiums based on age and driving record.",
    "code": "```vb\nFunction CalculateInsurancePremium(ByVal age As Integer, ByVal hasGoodDrivingRecord As Boolean) As Double\n    Dim premium As Double\n\n    If age < 25 Then\n        If hasGoodDrivingRecord Then\n            premium = 1000.0\n        Else\n            premium = 1500.0\n        End If\n    Else\n        If hasGoodDrivingRecord Then\n            premium = 700.0\n        Else\n            premium = 1200.0\n        End If\n    End If\n\n    Return premium\nEnd Function\n```"
  },
  {
    "task": "Implement a program that checks for palindrome sentences.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Console.WriteLine(\"Enter a sentence:\")\n        Dim input As String = Console.ReadLine()\n        \n        If IsPalindrome(input) Then\n            Console.WriteLine(\"The sentence is a palindrome.\")\n        Else\n            Console.WriteLine(\"The sentence is not a palindrome.\")\n        End If\n    End Sub\n\n    Function IsPalindrome(ByVal sentence As String) As Boolean\n        Dim cleaned As String = New String(sentence.Where(AddressOf Char.IsLetterOrDigit).ToArray()).ToLower()\n        Dim reversed As String = New String(cleaned.Reverse().ToArray())\n        Return cleaned = reversed\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Design a function to evaluate if a string contains balanced parentheses.",
    "code": "```vb\nFunction IsBalancedParentheses(input As String) As Boolean\n    Dim balance As Integer = 0\n    For Each ch As Char In input\n        If ch = \"(\"c Then\n            balance += 1\n        ElseIf ch = \")\"c Then\n            balance -= 1\n            If balance < 0 Then\n                Return False\n            End If\n        End If\n    Next\n    Return balance = 0\nEnd Function\n```"
  },
  {
    "task": "Write a program that suggests a pet based on living conditions and preferences.",
    "code": "```vb\nModule PetSuggester\n    Sub Main()\n        Console.WriteLine(\"Do you live in an apartment or a house? (apartment/house)\")\n        Dim livingCondition As String = Console.ReadLine().ToLower()\n\n        Console.WriteLine(\"Do you prefer a pet that requires low maintenance or high maintenance? (low/high)\")\n        Dim maintenancePreference As String = Console.ReadLine().ToLower()\n\n        Dim suggestedPet As String = \"\"\n\n        If livingCondition = \"apartment\" Then\n            If maintenancePreference = \"low\" Then\n                suggestedPet = \"Fish\"\n            ElseIf maintenancePreference = \"high\" Then\n                suggestedPet = \"Cat\"\n            End If\n        ElseIf livingCondition = \"house\" Then\n            If maintenancePreference = \"low\" Then\n                suggestedPet = \"Bird\"\n            ElseIf maintenancePreference = \"high\" Then\n                suggestedPet = \"Dog\"\n            End If\n        End If\n\n        If suggestedPet <> \"\" Then\n            Console.WriteLine(\"Based on your inputs, we suggest you get a \" & suggestedPet & \".\")\n        Else\n            Console.WriteLine(\"Invalid input. Please try again.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a routine that determines if a phone number is valid based on format.",
    "code": "```vb\nFunction IsValidPhoneNumber(phoneNumber As String) As Boolean\n    If phoneNumber Like \"(###) ###-####\" Then\n        Return True\n    ElseIf phoneNumber Like \"###-###-####\" Then\n        Return True\n    ElseIf phoneNumber Like \"###.###.####\" Then\n        Return True\n    ElseIf phoneNumber Like \"### ### ####\" Then\n        Return True\n    Else\n        Return False\n    End If\nEnd Function\n```"
  },
  {
    "task": "Develop a function that checks if two rectangles overlap.",
    "code": "```vb\nFunction DoRectanglesOverlap(x1 As Double, y1 As Double, w1 As Double, h1 As Double, x2 As Double, y2 As Double, w2 As Double, h2 As Double) As Boolean\n    If x1 >= x2 + w2 Or x2 >= x1 + w1 Then\n        Return False\n    End If\n    If y1 >= y2 + h2 Or y2 >= y1 + h1 Then\n        Return False\n    End If\n    Return True\nEnd Function\n```"
  },
  {
    "task": "Implement a program that chooses a beverage based on user input time.",
    "code": "```vb\nModule BeverageSelector\n    Sub Main()\n        Dim time As Integer\n        Console.WriteLine(\"Enter the current hour (0-23):\")\n        time = Convert.ToInt32(Console.ReadLine())\n\n        If time >= 0 AndAlso time < 12 Then\n            Console.WriteLine(\"It's morning. Have some coffee!\")\n        ElseIf time >= 12 AndAlso time < 17 Then\n            Console.WriteLine(\"It's afternoon. Enjoy some tea!\")\n        ElseIf time >= 17 AndAlso time < 21 Then\n            Console.WriteLine(\"It's evening. How about some juice?\")\n        ElseIf time >= 21 AndAlso time <= 23 Then\n            Console.WriteLine(\"It's night. Relax with some water.\")\n        Else\n            Console.WriteLine(\"Invalid time entered.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a script to determine if a URL is secure (HTTPS).",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim url As String = \"https://example.com\"\n        If url.StartsWith(\"https://\") Then\n            Console.WriteLine(\"The URL is secure.\")\n        Else\n            Console.WriteLine(\"The URL is not secure.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function that outputs different messages based on the input number's divisibility.",
    "code": "```vb\nFunction CheckDivisibility(number As Integer) As String\n    If number Mod 15 = 0 Then\n        Return \"Divisible by 15\"\n    ElseIf number Mod 5 = 0 Then\n        Return \"Divisible by 5\"\n    ElseIf number Mod 3 = 0 Then\n        Return \"Divisible by 3\"\n    Else\n        Return \"Not divisible by 3, 5, or 15\"\n    End If\nEnd Function\n```"
  },
  {
    "task": "Create a program to decide if a person should bring an umbrella based on the weather forecast.",
    "code": "```vb\nModule Program\n    Sub Main()\n        Dim weatherForecast As String\n\n        Console.WriteLine(\"Enter the weather forecast (rainy/sunny):\")\n        weatherForecast = Console.ReadLine().ToLower()\n\n        If weatherForecast = \"rainy\" Then\n            Console.WriteLine(\"You should bring an umbrella.\")\n        ElseIf weatherForecast = \"sunny\" Then\n            Console.WriteLine(\"No need to bring an umbrella.\")\n        Else\n            Console.WriteLine(\"Invalid input. Please enter 'rainy' or 'sunny'.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a routine that checks if a chess move is valid.",
    "code": "```vb\nModule ChessMoveValidator\n\n    Sub Main()\n        Dim fromRow As Integer = 1\n        Dim fromCol As Integer = 1\n        Dim toRow As Integer = 2\n        Dim toCol As Integer = 2\n        Dim piece As String = \"knight\"\n\n        If IsValidMove(piece, fromRow, fromCol, toRow, toCol) Then\n            Console.WriteLine(\"Valid move\")\n        Else\n            Console.WriteLine(\"Invalid move\")\n        End If\n    End Sub\n\n    Function IsValidMove(piece As String, fromRow As Integer, fromCol As Integer, toRow As Integer, toCol As Integer) As Boolean\n        Select Case piece.ToLower()\n            Case \"pawn\"\n                Return (toRow = fromRow + 1 AndAlso toCol = fromCol)\n            Case \"knight\"\n                Return (Math.Abs(fromRow - toRow) = 2 AndAlso Math.Abs(fromCol - toCol) = 1) OrElse (Math.Abs(fromRow - toRow) = 1 AndAlso Math.Abs(fromCol - toCol) = 2)\n            Case \"bishop\"\n                Return Math.Abs(fromRow - toRow) = Math.Abs(fromCol - toCol)\n            Case \"rook\"\n                Return fromRow = toRow OrElse fromCol = toCol\n            Case \"queen\"\n                Return fromRow = toRow OrElse fromCol = toCol OrElse Math.Abs(fromRow - toRow) = Math.Abs(fromCol - toCol)\n            Case \"king\"\n                Return Math.Abs(fromRow - toRow) <= 1 AndAlso Math.Abs(fromCol - toCol) <= 1\n            Case Else\n                Return False\n        End Select\n    End Function\n\nEnd Module\n```"
  },
  {
    "task": "Implement a program that outputs the number of days in a given month.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim month As Integer\n        Console.WriteLine(\"Enter the month number (1-12): \")\n        month = Convert.ToInt32(Console.ReadLine())\n\n        Select Case month\n            Case 1, 3, 5, 7, 8, 10, 12\n                Console.WriteLine(\"31 days\")\n            Case 4, 6, 9, 11\n                Console.WriteLine(\"30 days\")\n            Case 2\n                Console.WriteLine(\"28 or 29 days\")\n            Case Else\n                Console.WriteLine(\"Invalid month number\")\n        End Select\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a function that validates if a string is a valid hexadecimal number.",
    "code": "```vb\nFunction IsValidHexadecimal(ByVal input As String) As Boolean\n    If String.IsNullOrEmpty(input) Then\n        Return False\n    End If\n\n    For Each c As Char In input.ToUpper()\n        If Not ((c >= \"0\"c AndAlso c <= \"9\"c) OrElse (c >= \"A\"c AndAlso c <= \"F\"c)) Then\n            Return False\n        End If\n    Next\n\n    Return True\nEnd Function\n```"
  },
  {
    "task": "Write a script that checks if a word is present in a list of predefined words.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim predefinedWords As String() = {\"apple\", \"banana\", \"cherry\"}\n        Dim wordToCheck As String = \"banana\"\n        Dim wordFound As Boolean = False\n\n        For Each word As String In predefinedWords\n            If word = wordToCheck Then\n                wordFound = True\n                Exit For\n            End If\n        Next\n\n        If wordFound Then\n            Console.WriteLine(\"Word is present in the list.\")\n        Else\n            Console.WriteLine(\"Word is not present in the list.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a routine to decide the correct tax bracket for a given income.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim income As Double\n        Console.WriteLine(\"Enter your income: \")\n        income = Convert.ToDouble(Console.ReadLine())\n\n        Dim taxBracket As String\n\n        If income <= 9875 Then\n            taxBracket = \"10%\"\n        ElseIf income <= 40125 Then\n            taxBracket = \"12%\"\n        ElseIf income <= 85525 Then\n            taxBracket = \"22%\"\n        ElseIf income <= 163300 Then\n            taxBracket = \"24%\"\n        ElseIf income <= 207350 Then\n            taxBracket = \"32%\"\n        ElseIf income <= 518400 Then\n            taxBracket = \"35%\"\n        Else\n            taxBracket = \"37%\"\n        End If\n\n        Console.WriteLine(\"Your tax bracket is: \" & taxBracket)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a function that determines if a point is within a triangle.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim x As Double = 1.0\n        Dim y As Double = 1.0\n        Dim ax As Double = 0.0\n        Dim ay As Double = 0.0\n        Dim bx As Double = 2.0\n        Dim by As Double = 0.0\n        Dim cx As Double = 1.0\n        Dim cy As Double = 2.0\n        Dim result As Boolean = IsPointInTriangle(x, y, ax, ay, bx, by, cx, cy)\n        Console.WriteLine(\"Point is in triangle: \" & result)\n    End Sub\n\n    Function IsPointInTriangle(ByVal px As Double, ByVal py As Double, ByVal ax As Double, ByVal ay As Double, ByVal bx As Double, ByVal by As Double, ByVal cx As Double, ByVal cy As Double) As Boolean\n        Dim w1 As Double = ((ax * (cy - ay) + (py - ay) * (cx - ax) - px * (cy - ay)) / ((by - ay) * (cx - ax) - (bx - ax) * (cy - ay)))\n        Dim w2 As Double = ((py - ay - w1 * (by - ay)) / (cy - ay))\n        Return w1 >= 0 AndAlso w2 >= 0 AndAlso (w1 + w2) <= 1\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Implement a program that checks if a given string is a valid binary number.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim input As String\n        Console.WriteLine(\"Enter a string:\")\n        input = Console.ReadLine()\n        \n        If IsBinary(input) Then\n            Console.WriteLine(\"The string is a valid binary number.\")\n        Else\n            Console.WriteLine(\"The string is not a valid binary number.\")\n        End If\n    End Sub\n\n    Function IsBinary(ByVal str As String) As Boolean\n        For Each ch As Char In str\n            If ch <> \"0\"c AndAlso ch <> \"1\"c Then\n                Return False\n            End If\n        Next\n        Return True\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Design a system to evaluate the risk level of an investment based on criteria.",
    "code": "```vb\nModule InvestmentRiskEvaluator\n\n    Sub Main()\n        Dim investmentAmount As Double\n        Dim riskLevel As String\n\n        Console.WriteLine(\"Enter the investment amount:\")\n        investmentAmount = Convert.ToDouble(Console.ReadLine())\n\n        If investmentAmount < 1000 Then\n            riskLevel = \"Low\"\n        ElseIf investmentAmount >= 1000 And investmentAmount < 5000 Then\n            riskLevel = \"Medium\"\n        Else\n            riskLevel = \"High\"\n        End If\n\n        Console.WriteLine(\"The risk level of the investment is: \" & riskLevel)\n    End Sub\n\nEnd Module\n```"
  },
  {
    "task": "Write a program that suggests a vacation destination based on budget and preferences.",
    "code": "```vb\nModule VacationSuggestion\n    Sub Main()\n        Console.WriteLine(\"Enter your budget:\")\n        Dim budget As Integer = Convert.ToInt32(Console.ReadLine())\n\n        Console.WriteLine(\"Do you prefer mountains, beaches, or cities?\")\n        Dim preference As String = Console.ReadLine().ToLower()\n\n        Dim destination As String\n\n        If budget < 500 Then\n            If preference = \"mountains\" Then\n                destination = \"Local Hiking Trail\"\n            ElseIf preference = \"beaches\" Then\n                destination = \"Nearby Beach\"\n            ElseIf preference = \"cities\" Then\n                destination = \"Local City Tour\"\n            Else\n                destination = \"Staycation\"\n            End If\n        ElseIf budget >= 500 And budget < 2000 Then\n            If preference = \"mountains\" Then\n                destination = \"National Park\"\n            ElseIf preference = \"beaches\" Then\n                destination = \"Caribbean Getaway\"\n            ElseIf preference = \"cities\" Then\n                destination = \"Big City Weekend\"\n            Else\n                destination = \"Road Trip\"\n            End If\n        Else\n            If preference = \"mountains\" Then\n                destination = \"Alpine Ski Resort\"\n            ElseIf preference = \"beaches\" Then\n                destination = \"Maldives\"\n            ElseIf preference = \"cities\" Then\n                destination = \"European City Tour\"\n            Else\n                destination = \"Luxury Cruise\"\n            End If\n        End If\n\n        Console.WriteLine(\"We suggest you visit: \" & destination)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a routine that checks if a username is already taken in a database.",
    "code": "```vb\nFunction IsUsernameTaken(username As String) As Boolean\n    Dim connectionString As String = \"your_connection_string_here\"\n    Dim query As String = \"SELECT COUNT(*) FROM users WHERE username = @username\"\n    Dim result As Integer\n\n    Using connection As New SqlClient.SqlConnection(connectionString)\n        Using command As New SqlClient.SqlCommand(query, connection)\n            command.Parameters.AddWithValue(\"@username\", username)\n            connection.Open()\n            result = Convert.ToInt32(command.ExecuteScalar())\n        End Using\n    End Using\n\n    If result > 0 Then\n        Return True\n    Else\n        Return False\n    End If\nEnd Function\n```"
  },
  {
    "task": "Develop a function that determines if a string is a valid IPv4 address.",
    "code": "```vb\nFunction IsValidIPv4Address(ipAddress As String) As Boolean\n    Dim parts() As String = Split(ipAddress, \".\")\n    If UBound(parts) <> 3 Then\n        Return False\n    End If\n    \n    For i As Integer = 0 To 3\n        Dim num As Integer\n        If Not Integer.TryParse(parts(i), num) Then\n            Return False\n        End If\n        If num < 0 Or num > 255 Then\n            Return False\n        End If\n        If parts(i).StartsWith(\"0\") And parts(i).Length > 1 Then\n            Return False\n        End If\n    Next\n    \n    Return True\nEnd Function\n```"
  },
  {
    "task": "Implement a program to decide which transportation method is quickest based on distance.",
    "code": "```vb\nModule TransportationDecision\n    Sub Main()\n        Dim distance As Double\n        Console.WriteLine(\"Enter the distance in kilometers:\")\n        distance = Convert.ToDouble(Console.ReadLine())\n        \n        Dim method As String\n        \n        If distance < 1 Then\n            method = \"Walking\"\n        ElseIf distance < 5 Then\n            method = \"Bicycle\"\n        ElseIf distance < 20 Then\n            method = \"Car\"\n        Else\n            method = \"Train\"\n        End If\n        \n        Console.WriteLine(\"The quickest transportation method is: \" & method)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a script to validate if a number is a prime number.",
    "code": "```vb\nModule PrimeChecker\n    Sub Main()\n        Dim number As Integer\n        Console.WriteLine(\"Enter a number:\")\n        number = Convert.ToInt32(Console.ReadLine())\n        \n        If IsPrime(number) Then\n            Console.WriteLine(number & \" is a prime number.\")\n        Else\n            Console.WriteLine(number & \" is not a prime number.\")\n        End If\n    End Sub\n\n    Function IsPrime(ByVal num As Integer) As Boolean\n        If num <= 1 Then\n            Return False\n        End If\n        For i As Integer = 2 To Math.Sqrt(num)\n            If num Mod i = 0 Then\n                Return False\n            End If\n        Next\n        Return True\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Write a function that checks if a number is divisible by another number without remainder.",
    "code": "```vb\nFunction IsDivisible(num As Integer, divisor As Integer) As Boolean\n    If divisor = 0 Then\n        Return False\n    ElseIf num Mod divisor = 0 Then\n        Return True\n    Else\n        Return False\n    End If\nEnd Function\n```"
  },
  {
    "task": "Create a program that determines the type of a quadrilateral based on side lengths.",
    "code": "```vb\nModule QuadrilateralType\n    Sub Main()\n        Dim a As Double\n        Dim b As Double\n        Dim c As Double\n        Dim d As Double\n\n        Console.WriteLine(\"Enter the length of side a:\")\n        a = Convert.ToDouble(Console.ReadLine())\n        \n        Console.WriteLine(\"Enter the length of side b:\")\n        b = Convert.ToDouble(Console.ReadLine())\n        \n        Console.WriteLine(\"Enter the length of side c:\")\n        c = Convert.ToDouble(Console.ReadLine())\n        \n        Console.WriteLine(\"Enter the length of side d:\")\n        d = Convert.ToDouble(Console.ReadLine())\n\n        If a = b And b = c And c = d Then\n            Console.WriteLine(\"The quadrilateral is a square.\")\n        ElseIf a = c And b = d Then\n            Console.WriteLine(\"The quadrilateral is a rectangle.\")\n        ElseIf a = b And c = d Then\n            Console.WriteLine(\"The quadrilateral is a rhombus.\")\n        Else\n            Console.WriteLine(\"The quadrilateral is a general quadrilateral.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a routine to check if a sentence contains all letters of the alphabet.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim sentence As String = \"The quick brown fox jumps over the lazy dog\"\n        If ContainsAllLetters(sentence) Then\n            Console.WriteLine(\"The sentence contains all letters of the alphabet.\")\n        Else\n            Console.WriteLine(\"The sentence does not contain all letters of the alphabet.\")\n        End If\n    End Sub\n\n    Function ContainsAllLetters(ByVal sentence As String) As Boolean\n        Dim alphabet As String = \"abcdefghijklmnopqrstuvwxyz\"\n        sentence = sentence.ToLower()\n        For Each letter As Char In alphabet\n            If Not sentence.Contains(letter) Then\n                Return False\n            End If\n        Next\n        Return True\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Implement a program that outputs the appropriate error message based on an error code.",
    "code": "```vb\nModule ErrorHandling\n    Sub Main()\n        Dim errorCode As Integer\n        Console.WriteLine(\"Enter an error code:\")\n        errorCode = Convert.ToInt32(Console.ReadLine())\n\n        Select Case errorCode\n            Case 404\n                Console.WriteLine(\"Error 404: Not Found\")\n            Case 500\n                Console.WriteLine(\"Error 500: Internal Server Error\")\n            Case 403\n                Console.WriteLine(\"Error 403: Forbidden\")\n            Case 401\n                Console.WriteLine(\"Error 401: Unauthorized\")\n            Case Else\n                Console.WriteLine(\"Unknown Error Code\")\n        End Select\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a function that categorizes a movie rating as G, PG, PG-13, or R.",
    "code": "```vb\nFunction CategorizeMovieRating(ByVal rating As Integer) As String\n    Dim category As String\n    If rating >= 0 AndAlso rating <= 3 Then\n        category = \"G\"\n    ElseIf rating >= 4 AndAlso rating <= 6 Then\n        category = \"PG\"\n    ElseIf rating >= 7 AndAlso rating <= 8 Then\n        category = \"PG-13\"\n    ElseIf rating = 9 OrElse rating = 10 Then\n        category = \"R\"\n    Else\n        category = \"Unknown\"\n    End If\n    Return category\nEnd Function\n```"
  },
  {
    "task": "Write a script to check if a string is a valid Roman numeral.",
    "code": "```vb\nModule RomanNumeralChecker\n\n    Function IsValidRomanNumeral(s As String) As Boolean\n        Dim romanPattern As String = \"^M{0,4}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})$\"\n        Return System.Text.RegularExpressions.Regex.IsMatch(s, romanPattern)\n    End Function\n\n    Sub Main()\n        Dim input As String = \"YourInputHere\"\n        If IsValidRomanNumeral(input) Then\n            Console.WriteLine(\"Valid Roman numeral.\")\n        Else\n            Console.WriteLine(\"Invalid Roman numeral.\")\n        End If\n    End Sub\n\nEnd Module\n```"
  },
  {
    "task": "Create a routine that decides if a person can retire based on age and years worked.",
    "code": "```vb\nModule RetirementCheck\n    Sub Main()\n        Dim age As Integer\n        Dim yearsWorked As Integer\n\n        ' Sample input values\n        age = 65\n        yearsWorked = 30\n\n        If CanRetire(age, yearsWorked) Then\n            Console.WriteLine(\"The person can retire.\")\n        Else\n            Console.WriteLine(\"The person cannot retire.\")\n        End If\n    End Sub\n\n    Function CanRetire(ByVal age As Integer, ByVal yearsWorked As Integer) As Boolean\n        If age >= 65 Or yearsWorked >= 30 Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Develop a function that outputs a different emoji based on user mood input.",
    "code": "```vb\nFunction GetEmojiBasedOnMood(mood As String) As String\n    Select Case mood.ToLower()\n        Case \"happy\"\n            Return \"\ud83d\ude0a\"\n        Case \"sad\"\n            Return \"\ud83d\ude22\"\n        Case \"angry\"\n            Return \"\ud83d\ude21\"\n        Case \"surprised\"\n            Return \"\ud83d\ude32\"\n        Case \"tired\"\n            Return \"\ud83d\ude34\"\n        Case Else\n            Return \"\ud83d\ude10\"\n    End Select\nEnd Function\n```"
  },
  {
    "task": "Implement a program that checks if a password meets security requirements.",
    "code": "```vb\nModule PasswordChecker\n    Sub Main()\n        Console.WriteLine(\"Enter your password:\")\n        Dim password As String = Console.ReadLine()\n        If IsValidPassword(password) Then\n            Console.WriteLine(\"Password is valid.\")\n        Else\n            Console.WriteLine(\"Password is invalid.\")\n        End If\n    End Sub\n\n    Function IsValidPassword(ByVal password As String) As Boolean\n        If password.Length < 8 Then\n            Return False\n        End If\n\n        Dim hasUpperCase As Boolean = False\n        Dim hasLowerCase As Boolean = False\n        Dim hasDigit As Boolean = False\n        Dim hasSpecialChar As Boolean = False\n\n        For Each ch As Char In password\n            If Char.IsUpper(ch) Then\n                hasUpperCase = True\n            ElseIf Char.IsLower(ch) Then\n                hasLowerCase = True\n            ElseIf Char.IsDigit(ch) Then\n                hasDigit = True\n            ElseIf Not Char.IsLetterOrDigit(ch) Then\n                hasSpecialChar = True\n            End If\n        Next\n\n        Return hasUpperCase And hasLowerCase And hasDigit And hasSpecialChar\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Design a script to determine if a number is a palindrome when reversed.",
    "code": "```vb\nModule PalindromeChecker\n    Sub Main()\n        Console.WriteLine(\"Enter a number:\")\n        Dim input As String = Console.ReadLine()\n        Dim reversed As String = StrReverse(input)\n        \n        If input = reversed Then\n            Console.WriteLine(\"The number is a palindrome.\")\n        Else\n            Console.WriteLine(\"The number is not a palindrome.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function that evaluates if a given day is a holiday.",
    "code": "```vb\nFunction IsHoliday(day As String) As Boolean\n    Select Case day.ToLower()\n        Case \"new year\", \"christmas\", \"independence day\"\n            Return True\n        Case Else\n            Return False\n    End Select\nEnd Function\n```"
  },
  {
    "task": "Create a program to decide if a library book is overdue based on the due date.",
    "code": "```vb\nModule LibraryBookCheck\n    Sub Main()\n        Dim dueDate As Date\n        Dim currentDate As Date = Date.Today\n\n        ' Example due date\n        dueDate = #10/15/2023#\n\n        If currentDate > dueDate Then\n            Console.WriteLine(\"The book is overdue.\")\n        Else\n            Console.WriteLine(\"The book is not overdue.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a routine that checks if a given year is part of a leap century.",
    "code": "```vb\nModule LeapCenturyChecker\n    Sub Main()\n        Dim year As Integer = 2000 ' Example year\n        If IsLeapCentury(year) Then\n            Console.WriteLine(year & \" is a leap century.\")\n        Else\n            Console.WriteLine(year & \" is not a leap century.\")\n        End If\n    End Sub\n\n    Function IsLeapCentury(ByVal year As Integer) As Boolean\n        If year Mod 100 = 0 AndAlso year Mod 400 = 0 Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Implement a system to determine the correct category for a product based on user input.",
    "code": "```vb\nModule ProductCategorizer\n    Sub Main()\n        Dim productType As String\n\n        Console.WriteLine(\"Enter the product type:\")\n        productType = Console.ReadLine()\n\n        Select Case productType.ToLower()\n            Case \"electronics\"\n                Console.WriteLine(\"Category: Electronics\")\n            Case \"clothing\"\n                Console.WriteLine(\"Category: Clothing\")\n            Case \"grocery\"\n                Console.WriteLine(\"Category: Grocery\")\n            Case \"furniture\"\n                Console.WriteLine(\"Category: Furniture\")\n            Case Else\n                Console.WriteLine(\"Category: Unknown\")\n        End Select\n    End Sub\nEnd Module\n```"
  }
]