[
  {
    "task": "Write a function that checks if two strings are equal, ignoring case sensitivity.",
    "code": "```vb\nFunction AreStringsEqualIgnoreCase(ByVal str1 As String, ByVal str2 As String) As Boolean\n    Return String.Compare(str1, str2, StringComparison.OrdinalIgnoreCase) = 0\nEnd Function\n```"
  },
  {
    "task": "Create a program that determines if a number is greater than 10.",
    "code": "```vb\nModule Program\n    Sub Main()\n        Dim number As Integer = 15\n        If number > 10 Then\n            Console.WriteLine(\"The number is greater than 10.\")\n        Else\n            Console.WriteLine(\"The number is not greater than 10.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a feature that compares the current date to a given date and returns if it is in the future.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim givenDate As Date = #12/31/2023#\n        Dim currentDate As Date = Date.Now\n\n        If currentDate < givenDate Then\n            Console.WriteLine(\"The given date is in the future.\")\n        Else\n            Console.WriteLine(\"The given date is not in the future.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a system that checks if a user's age is less than 18 and restricts access if true.",
    "code": "```vb\nModule Program\n    Sub Main()\n        Dim age As Integer\n\n        Console.WriteLine(\"Please enter your age:\")\n        age = Convert.ToInt32(Console.ReadLine())\n\n        If age < 18 Then\n            Console.WriteLine(\"Access restricted. You must be 18 or older.\")\n        Else\n            Console.WriteLine(\"Access granted.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Build an algorithm that finds the maximum of three given integers.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim a As Integer = 10\n        Dim b As Integer = 20\n        Dim c As Integer = 15\n        Dim max As Integer\n\n        If a >= b And a >= c Then\n            max = a\n        ElseIf b >= a And b >= c Then\n            max = b\n        Else\n            max = c\n        End If\n\n        Console.WriteLine(\"The maximum value is: \" & max)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function that verifies if two arrays contain the same elements in the same order.",
    "code": "```vb\nFunction ArraysEqual(ByVal array1() As Integer, ByVal array2() As Integer) As Boolean\n    If array1.Length <> array2.Length Then\n        Return False\n    End If\n    \n    For i As Integer = 0 To array1.Length - 1\n        If array1(i) <> array2(i) Then\n            Return False\n        End If\n    Next\n    \n    Return True\nEnd Function\n```"
  },
  {
    "task": "Create a script that checks if a product's price is within a specified range.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim productPrice As Double = 150.0\n        Dim lowerBound As Double = 100.0\n        Dim upperBound As Double = 200.0\n\n        If productPrice >= lowerBound And productPrice <= upperBound Then\n            Console.WriteLine(\"The product's price is within the specified range.\")\n        Else\n            Console.WriteLine(\"The product's price is outside the specified range.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a tool that compares two versions of a software application and determines which is newer.",
    "code": "```vb\nModule VersionComparer\n    Sub Main()\n        Dim version1 As String = \"1.2.0\"\n        Dim version2 As String = \"1.3.0\"\n        \n        Dim result As Integer = CompareVersions(version1, version2)\n        \n        Select Case result\n            Case -1\n                Console.WriteLine(\"Version 1 is older.\")\n            Case 1\n                Console.WriteLine(\"Version 1 is newer.\")\n            Case 0\n                Console.WriteLine(\"Both versions are the same.\")\n        End Select\n    End Sub\n\n    Function CompareVersions(ByVal v1 As String, ByVal v2 As String) As Integer\n        Dim version1Parts As String() = v1.Split(\".\"c)\n        Dim version2Parts As String() = v2.Split(\".\"c)\n        \n        Dim maxLength As Integer = Math.Max(version1Parts.Length, version2Parts.Length)\n        \n        For i As Integer = 0 To maxLength - 1\n            Dim part1 As Integer = If(i < version1Parts.Length, Integer.Parse(version1Parts(i)), 0)\n            Dim part2 As Integer = If(i < version2Parts.Length, Integer.Parse(version2Parts(i)), 0)\n            \n            If part1 < part2 Then\n                Return -1\n            ElseIf part1 > part2 Then\n                Return 1\n            End If\n        Next\n        \n        Return 0\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Implement a test to see if a given year is a leap year.",
    "code": "```vb\nModule LeapYearTest\n    Sub Main()\n        Dim year As Integer = 2024 ' Example year, you can change it for testing\n        Dim isLeapYear As Boolean\n\n        If year Mod 4 = 0 Then\n            If year Mod 100 = 0 Then\n                If year Mod 400 = 0 Then\n                    isLeapYear = True\n                Else\n                    isLeapYear = False\n                End If\n            Else\n                isLeapYear = True\n            End If\n        Else\n            isLeapYear = False\n        End If\n\n        If isLeapYear Then\n            Console.WriteLine(year & \" is a leap year.\")\n        Else\n            Console.WriteLine(year & \" is not a leap year.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a feature that tells if a student\u2019s grade is passing or failing based on a threshold.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim grade As Integer = 75 ' Example grade\n        Dim threshold As Integer = 60\n\n        If grade >= threshold Then\n            Console.WriteLine(\"Passing\")\n        Else\n            Console.WriteLine(\"Failing\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function to compare two file sizes and return the larger one.",
    "code": "```vb\nFunction LargerFileSize(ByVal size1 As Long, ByVal size2 As Long) As Long\n    If size1 > size2 Then\n        Return size1\n    Else\n        Return size2\n    End If\nEnd Function\n```"
  },
  {
    "task": "Build a program that checks if the temperature is below freezing point.",
    "code": "```vb\nModule TemperatureCheck\n    Sub Main()\n        Dim temperature As Double\n        Console.WriteLine(\"Enter the temperature:\")\n        temperature = Convert.ToDouble(Console.ReadLine())\n\n        If temperature < 32 Then\n            Console.WriteLine(\"The temperature is below the freezing point.\")\n        Else\n            Console.WriteLine(\"The temperature is above the freezing point.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a logic that determines if a number is within the Fibonacci sequence.",
    "code": "```vb\nModule Module1\n    Function IsFibonacci(ByVal num As Integer) As Boolean\n        Dim a As Integer = 0\n        Dim b As Integer = 1\n        If num = a Or num = b Then\n            Return True\n        End If\n\n        Dim c As Integer = a + b\n        While c <= num\n            If c = num Then\n                Return True\n            End If\n            a = b\n            b = c\n            c = a + b\n        End While\n\n        Return False\n    End Function\n\n    Sub Main()\n        Dim number As Integer = 21 ' Example number\n        If IsFibonacci(number) Then\n            Console.WriteLine(number & \" is a Fibonacci number.\")\n        Else\n            Console.WriteLine(number & \" is not a Fibonacci number.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a function that checks if a given word is a palindrome.",
    "code": "```vb\nFunction IsPalindrome(ByVal word As String) As Boolean\n    Dim lowerWord As String = word.ToLower()\n    Dim reversedWord As String = StrReverse(lowerWord)\n    Return lowerWord = reversedWord\nEnd Function\n```"
  },
  {
    "task": "Write a script to see if a password meets a minimum length requirement.",
    "code": "```vb\nModule PasswordChecker\n    Sub Main()\n        Dim password As String\n        Dim minLength As Integer = 8\n        \n        Console.WriteLine(\"Enter your password:\")\n        password = Console.ReadLine()\n        \n        If Len(password) >= minLength Then\n            Console.WriteLine(\"Password meets the minimum length requirement.\")\n        Else\n            Console.WriteLine(\"Password does not meet the minimum length requirement.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a system that decides if a point is inside a circle based on its coordinates.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim circleX As Double = 0.0\n        Dim circleY As Double = 0.0\n        Dim radius As Double = 5.0\n\n        Dim pointX As Double = 3.0\n        Dim pointY As Double = 4.0\n\n        Dim distanceSquared As Double = (pointX - circleX) ^ 2 + (pointY - circleY) ^ 2\n        Dim radiusSquared As Double = radius ^ 2\n\n        If distanceSquared <= radiusSquared Then\n            Console.WriteLine(\"The point is inside the circle.\")\n        Else\n            Console.WriteLine(\"The point is outside the circle.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a program that checks if a shopping cart total exceeds a certain budget.",
    "code": "```vb\nModule ShoppingCart\n    Sub Main()\n        Dim budget As Decimal = 100.0D\n        Dim cartTotal As Decimal = 120.5D\n\n        If cartTotal > budget Then\n            Console.WriteLine(\"Cart total exceeds the budget.\")\n        Else\n            Console.WriteLine(\"Cart total is within the budget.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a function that compares two players' scores and returns the winner.",
    "code": "```vb\nFunction DetermineWinner(score1 As Integer, score2 As Integer) As String\n    If score1 > score2 Then\n        Return \"Player 1 is the winner.\"\n    ElseIf score2 > score1 Then\n        Return \"Player 2 is the winner.\"\n    Else\n        Return \"It's a tie.\"\n    End If\nEnd Function\n```"
  },
  {
    "task": "Write a program to determine if one string is a substring of another.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim str1 As String = \"Hello, World!\"\n        Dim str2 As String = \"World\"\n        \n        If str1.Contains(str2) Then\n            Console.WriteLine(\"The string is a substring.\")\n        Else\n            Console.WriteLine(\"The string is not a substring.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Build a utility that checks if a number is a prime number.",
    "code": "```vb\nFunction IsPrime(ByVal num As Integer) As Boolean\n    If num <= 1 Then Return False\n    If num = 2 Then Return True\n    If num Mod 2 = 0 Then Return False\n    For i As Integer = 3 To Math.Sqrt(num) Step 2\n        If num Mod i = 0 Then Return False\n    Next\n    Return True\nEnd Function\n```"
  },
  {
    "task": "Write a function that checks if a given number is a perfect square.",
    "code": "```vb\nFunction IsPerfectSquare(ByVal number As Integer) As Boolean\n    If number < 0 Then\n        Return False\n    End If\n    \n    Dim root As Integer = CInt(Math.Sqrt(number))\n    Return root * root = number\nEnd Function\n```"
  },
  {
    "task": "Create a system that determines if a person is eligible for a senior citizen discount based on their age.",
    "code": "```vb\nModule SeniorDiscountChecker\n    Sub Main()\n        Dim age As Integer\n        Console.WriteLine(\"Enter the age of the person:\")\n        age = Convert.ToInt32(Console.ReadLine())\n        \n        If age >= 65 Then\n            Console.WriteLine(\"The person is eligible for a senior citizen discount.\")\n        Else\n            Console.WriteLine(\"The person is not eligible for a senior citizen discount.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a feature to check if a date falls on a weekend.",
    "code": "```vb\nFunction IsWeekend(ByVal dateValue As Date) As Boolean\n    Dim dayOfWeek As Integer\n    dayOfWeek = Weekday(dateValue, vbSunday)\n    Return dayOfWeek = vbSaturday Or dayOfWeek = vbSunday\nEnd Function\n```"
  },
  {
    "task": "Design a program that sees if a given email address is in the correct format.",
    "code": "```vb\nModule EmailValidator\n    Sub Main()\n        Dim email As String\n        Console.WriteLine(\"Enter an email address:\")\n        email = Console.ReadLine()\n\n        If IsValidEmail(email) Then\n            Console.WriteLine(\"The email address is in the correct format.\")\n        Else\n            Console.WriteLine(\"The email address is not in the correct format.\")\n        End If\n    End Sub\n\n    Function IsValidEmail(email As String) As Boolean\n        Return email.Contains(\"@\") AndAlso email.IndexOf(\"@\") < email.LastIndexOf(\".\")\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Implement a test to check if a rectangle's area is larger than a triangle's area.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim rectangleWidth As Double = 10.0\n        Dim rectangleHeight As Double = 5.0\n        Dim triangleBase As Double = 8.0\n        Dim triangleHeight As Double = 5.0\n\n        Dim rectangleArea As Double = rectangleWidth * rectangleHeight\n        Dim triangleArea As Double = 0.5 * triangleBase * triangleHeight\n\n        If rectangleArea > triangleArea Then\n            Console.WriteLine(\"The rectangle's area is larger than the triangle's area.\")\n        Else\n            Console.WriteLine(\"The rectangle's area is not larger than the triangle's area.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function that verifies if two rectangles overlap each other.",
    "code": "```vb\nFunction RectanglesOverlap(x1 As Integer, y1 As Integer, w1 As Integer, h1 As Integer, x2 As Integer, y2 As Integer, w2 As Integer, h2 As Integer) As Boolean\n    If x1 + w1 <= x2 Or x2 + w2 <= x1 Then\n        Return False\n    End If\n    If y1 + h1 <= y2 Or y2 + h2 <= y1 Then\n        Return False\n    End If\n    Return True\nEnd Function\n```"
  },
  {
    "task": "Create a script to compare two strings lexicographically.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim string1 As String = \"apple\"\n        Dim string2 As String = \"banana\"\n        \n        If string1 < string2 Then\n            Console.WriteLine(\"string1 is less than string2\")\n        ElseIf string1 > string2 Then\n            Console.WriteLine(\"string1 is greater than string2\")\n        Else\n            Console.WriteLine(\"string1 is equal to string2\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Build a program that checks if a list of numbers is in ascending order.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers As Integer() = {1, 2, 3, 4, 5}\n        Dim isAscending As Boolean = True\n\n        For i As Integer = 0 To numbers.Length - 2\n            If numbers(i) > numbers(i + 1) Then\n                isAscending = False\n                Exit For\n            End If\n        Next\n\n        If isAscending Then\n            Console.WriteLine(\"The list is in ascending order.\")\n        Else\n            Console.WriteLine(\"The list is not in ascending order.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a system to compare the heights of two buildings.",
    "code": "```vb\nModule BuildingComparison\n    Sub Main()\n        Dim heightBuilding1 As Double\n        Dim heightBuilding2 As Double\n\n        Console.Write(\"Enter the height of the first building: \")\n        heightBuilding1 = Convert.ToDouble(Console.ReadLine())\n\n        Console.Write(\"Enter the height of the second building: \")\n        heightBuilding2 = Convert.ToDouble(Console.ReadLine())\n\n        If heightBuilding1 > heightBuilding2 Then\n            Console.WriteLine(\"The first building is taller.\")\n        ElseIf heightBuilding1 < heightBuilding2 Then\n            Console.WriteLine(\"The second building is taller.\")\n        Else\n            Console.WriteLine(\"Both buildings have the same height.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a feature that determines if a given time is before noon.",
    "code": "```vb\nFunction IsBeforeNoon(ByVal time As Date) As Boolean\n    Return time.TimeOfDay < New TimeSpan(12, 0, 0)\nEnd Function\n```"
  },
  {
    "task": "Implement a function to check if a given number is a power of two.",
    "code": "```vb\nFunction IsPowerOfTwo(ByVal num As Integer) As Boolean\n    If num <= 0 Then\n        Return False\n    End If\n    Return (num And (num - 1)) = 0\nEnd Function\n```"
  },
  {
    "task": "Create a program that determines if a word is longer than another word.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim word1 As String = \"example\"\n        Dim word2 As String = \"test\"\n        \n        If word1.Length > word2.Length Then\n            Console.WriteLine(\"The first word is longer than the second word.\")\n        ElseIf word1.Length < word2.Length Then\n            Console.WriteLine(\"The second word is longer than the first word.\")\n        Else\n            Console.WriteLine(\"Both words are of the same length.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a function to compare the lengths of two lists and return the longer one.",
    "code": "```vb\nFunction LongerList(list1 As List(Of Object), list2 As List(Of Object)) As List(Of Object)\n    If list1.Count > list2.Count Then\n        Return list1\n    Else\n        Return list2\n    End If\nEnd Function\n```"
  },
  {
    "task": "Write a script to see if a user's input matches a pre-defined secret code.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim secretCode As String = \"1234\"\n        Console.WriteLine(\"Enter the secret code:\")\n        Dim userInput As String = Console.ReadLine()\n\n        If userInput = secretCode Then\n            Console.WriteLine(\"Access Granted.\")\n        Else\n            Console.WriteLine(\"Access Denied.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Build a utility that checks if a given year is in the 21st century.",
    "code": "```vb\nModule CenturyCheck\n    Sub Main()\n        Dim inputYear As Integer\n        Console.WriteLine(\"Enter a year:\")\n        inputYear = Convert.ToInt32(Console.ReadLine())\n\n        If inputYear >= 2001 AndAlso inputYear <= 2100 Then\n            Console.WriteLine(\"The year \" & inputYear & \" is in the 21st century.\")\n        Else\n            Console.WriteLine(\"The year \" & inputYear & \" is not in the 21st century.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a logic that determines if a book's publication year is after 2000.",
    "code": "```vb\nDim publicationYear As Integer = 2005\nDim isAfter2000 As Boolean = publicationYear > 2000\n```"
  },
  {
    "task": "Design a feature to see if a number is divisible by both 3 and 5.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim number As Integer = 15\n        If number Mod 3 = 0 AndAlso number Mod 5 = 0 Then\n            Console.WriteLine(\"The number is divisible by both 3 and 5.\")\n        Else\n            Console.WriteLine(\"The number is not divisible by both 3 and 5.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a system that checks if a student's GPA is above a certain threshold.",
    "code": "```vb\nModule Program\n    Sub Main()\n        Dim studentGPA As Double = 3.5\n        Dim threshold As Double = 3.0\n\n        If studentGPA > threshold Then\n            Console.WriteLine(\"The student's GPA is above the threshold.\")\n        Else\n            Console.WriteLine(\"The student's GPA is not above the threshold.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function to determine if a given angle is acute, right, or obtuse.",
    "code": "```vb\nFunction DetermineAngleType(angle As Integer) As String\n    If angle < 90 Then\n        Return \"Acute\"\n    ElseIf angle = 90 Then\n        Return \"Right\"\n    ElseIf angle > 90 Then\n        Return \"Obtuse\"\n    Else\n        Return \"Invalid angle\"\n    End If\nEnd Function\n```"
  },
  {
    "task": "Develop a program that compares the lengths of two strings and returns the shorter one.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim str1 As String = \"Hello\"\n        Dim str2 As String = \"World\"\n        \n        If str1.Length < str2.Length Then\n            Console.WriteLine(str1)\n        Else\n            Console.WriteLine(str2)\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a script to verify if a username is unique within a list.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim usernames As List(Of String) = New List(Of String) From {\"alice\", \"bob\", \"charlie\"}\n        Dim newUsername As String = \"david\"\n        \n        If Not usernames.Contains(newUsername) Then\n            Console.WriteLine(\"The username is unique.\")\n        Else\n            Console.WriteLine(\"The username is already taken.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Build a tool that checks if a job applicant meets all the listed qualifications.",
    "code": "```vb\nModule ApplicantQualificationChecker\n\n    Sub Main()\n        Dim applicant As Applicant = New Applicant With {\n            .HasDegree = True,\n            .YearsOfExperience = 5,\n            .KnowsProgramming = True\n        }\n\n        Dim qualifies As Boolean = CheckQualifications(applicant)\n        If qualifies Then\n            Console.WriteLine(\"The applicant meets all the qualifications.\")\n        Else\n            Console.WriteLine(\"The applicant does not meet all the qualifications.\")\n        End If\n    End Sub\n\n    Function CheckQualifications(applicant As Applicant) As Boolean\n        Dim requiresDegree As Boolean = True\n        Dim minimumExperience As Integer = 3\n        Dim requiresProgrammingKnowledge As Boolean = True\n\n        If applicant.HasDegree = requiresDegree AndAlso\n           applicant.YearsOfExperience >= minimumExperience AndAlso\n           applicant.KnowsProgramming = requiresProgrammingKnowledge Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\n\nEnd Module\n\nClass Applicant\n    Public Property HasDegree As Boolean\n    Public Property YearsOfExperience As Integer\n    Public Property KnowsProgramming As Boolean\nEnd Class\n```"
  },
  {
    "task": "Write a feature to see if a vehicle's speed exceeds the speed limit.",
    "code": "```vb\nModule SpeedCheck\n    Sub Main()\n        Dim speed As Double = 85.0 ' Example vehicle speed\n        Dim speedLimit As Double = 65.0 ' Speed limit\n\n        If speed > speedLimit Then\n            Console.WriteLine(\"The vehicle's speed exceeds the speed limit.\")\n        Else\n            Console.WriteLine(\"The vehicle's speed is within the speed limit.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a system that determines whether a given point is above or below the x-axis.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim y As Double\n\n        Console.WriteLine(\"Enter the y-coordinate of the point:\")\n        y = Convert.ToDouble(Console.ReadLine())\n\n        If y > 0 Then\n            Console.WriteLine(\"The point is above the x-axis.\")\n        ElseIf y < 0 Then\n            Console.WriteLine(\"The point is below the x-axis.\")\n        Else\n            Console.WriteLine(\"The point is on the x-axis.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a function that checks if a given word appears in a sentence.",
    "code": "```vb\nFunction WordInSentence(sentence As String, word As String) As Boolean\n    Return sentence.Contains(word)\nEnd Function\n```"
  },
  {
    "task": "Implement a program that identifies whether a given number is negative or positive.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim number As Double\n        Console.Write(\"Enter a number: \")\n        number = Convert.ToDouble(Console.ReadLine())\n        \n        If number > 0 Then\n            Console.WriteLine(\"The number is positive.\")\n        ElseIf number < 0 Then\n            Console.WriteLine(\"The number is negative.\")\n        Else\n            Console.WriteLine(\"The number is zero.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a script to see if the sum of two numbers is greater than 100.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim num1 As Integer = 45\n        Dim num2 As Integer = 60\n        Dim sum As Integer = num1 + num2\n        \n        If sum > 100 Then\n            Console.WriteLine(\"The sum is greater than 100.\")\n        Else\n            Console.WriteLine(\"The sum is not greater than 100.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Build a utility that checks if a file exists in a specified directory.",
    "code": "```vb\nModule FileChecker\n    Sub Main()\n        Dim directoryPath As String = \"C:\\Your\\Directory\\Path\"\n        Dim fileName As String = \"yourfile.txt\"\n        Dim filePath As String = System.IO.Path.Combine(directoryPath, fileName)\n\n        If System.IO.File.Exists(filePath) Then\n            Console.WriteLine(\"The file exists.\")\n        Else\n            Console.WriteLine(\"The file does not exist.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a system to compare the weights of two different objects.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim weight1 As Double\n        Dim weight2 As Double\n\n        Console.WriteLine(\"Enter the weight of the first object:\")\n        weight1 = Double.Parse(Console.ReadLine())\n\n        Console.WriteLine(\"Enter the weight of the second object:\")\n        weight2 = Double.Parse(Console.ReadLine())\n\n        If weight1 > weight2 Then\n            Console.WriteLine(\"The first object is heavier.\")\n        ElseIf weight1 < weight2 Then\n            Console.WriteLine(\"The second object is heavier.\")\n        Else\n            Console.WriteLine(\"Both objects have the same weight.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a logic to determine if a number falls within a defined range.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim number As Integer = 15\n        Dim lowerBound As Integer = 10\n        Dim upperBound As Integer = 20\n\n        If number >= lowerBound AndAlso number <= upperBound Then\n            Console.WriteLine(\"The number is within the range.\")\n        Else\n            Console.WriteLine(\"The number is outside the range.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a program that checks if an employee worked overtime based on hours worked.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim hoursWorked As Integer\n        Dim overtimeThreshold As Integer = 40\n        Dim isOvertime As Boolean\n\n        Console.WriteLine(\"Enter the number of hours worked:\")\n        hoursWorked = Convert.ToInt32(Console.ReadLine())\n\n        isOvertime = (hoursWorked > overtimeThreshold)\n\n        If isOvertime Then\n            Console.WriteLine(\"The employee worked overtime.\")\n        Else\n            Console.WriteLine(\"The employee did not work overtime.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function to compare two dates and determine which is earlier.",
    "code": "```vb\nFunction CompareDates(date1 As Date, date2 As Date) As String\n    If date1 < date2 Then\n        Return \"Date1 is earlier\"\n    ElseIf date1 > date2 Then\n        Return \"Date2 is earlier\"\n    Else\n        Return \"Both dates are the same\"\n    End If\nEnd Function\n```"
  },
  {
    "task": "Create a script that verifies if a given word starts with a vowel.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim word As String = \"example\"\n        If StartsWithVowel(word) Then\n            Console.WriteLine(\"The word starts with a vowel.\")\n        Else\n            Console.WriteLine(\"The word does not start with a vowel.\")\n        End If\n    End Sub\n\n    Function StartsWithVowel(ByVal s As String) As Boolean\n        If String.IsNullOrEmpty(s) Then Return False\n        Dim firstChar As Char = Char.ToLower(s(0))\n        Return firstChar = \"a\"c OrElse firstChar = \"e\"c OrElse firstChar = \"i\"c OrElse firstChar = \"o\"c OrElse firstChar = \"u\"c\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Build a utility that checks if a number is even or odd.",
    "code": "```vb\nModule EvenOddChecker\n    Sub Main()\n        Dim number As Integer\n        Console.WriteLine(\"Enter a number:\")\n        number = Convert.ToInt32(Console.ReadLine())\n\n        If number Mod 2 = 0 Then\n            Console.WriteLine(\"The number is even.\")\n        Else\n            Console.WriteLine(\"The number is odd.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a system that determines if a string contains only numeric characters.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim input As String = \"123456\"\n        If IsNumeric(input) Then\n            Console.WriteLine(\"The string contains only numeric characters.\")\n        Else\n            Console.WriteLine(\"The string does not contain only numeric characters.\")\n        End If\n    End Sub\n\n    Function IsNumeric(value As String) As Boolean\n        For Each c As Char In value\n            If Not Char.IsDigit(c) Then\n                Return False\n            End If\n        Next\n        Return True\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Write a function to see if a given character is a vowel or consonant.",
    "code": "```vb\nFunction IsVowelOrConsonant(ByVal ch As Char) As String\n    ch = Char.ToLower(ch)\n    If ch = \"a\"c Or ch = \"e\"c Or ch = \"i\"c Or ch = \"o\"c Or ch = \"u\"c Then\n        Return \"Vowel\"\n    ElseIf Char.IsLetter(ch) Then\n        Return \"Consonant\"\n    Else\n        Return \"Neither\"\n    End If\nEnd Function\n```"
  },
  {
    "task": "Create a program that checks if a point lies within a specified rectangle.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim rectLeft As Integer = 2\n        Dim rectTop As Integer = 3\n        Dim rectWidth As Integer = 5\n        Dim rectHeight As Integer = 4\n\n        Dim pointX As Integer = 4\n        Dim pointY As Integer = 5\n\n        Dim withinRectangle As Boolean = (pointX >= rectLeft) AndAlso (pointX <= rectLeft + rectWidth) AndAlso (pointY >= rectTop) AndAlso (pointY <= rectTop + rectHeight)\n\n        If withinRectangle Then\n            Console.WriteLine(\"The point lies within the rectangle.\")\n        Else\n            Console.WriteLine(\"The point does not lie within the rectangle.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a feature to compare two lists and return the common elements.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim list1 As List(Of Integer) = New List(Of Integer)({1, 2, 3, 4, 5})\n        Dim list2 As List(Of Integer) = New List(Of Integer)({3, 4, 5, 6, 7})\n\n        Dim commonElements As List(Of Integer) = GetCommonElements(list1, list2)\n\n        For Each element In commonElements\n            Console.WriteLine(element)\n        Next\n    End Sub\n\n    Function GetCommonElements(ByVal list1 As List(Of Integer), ByVal list2 As List(Of Integer)) As List(Of Integer)\n        Return list1.Intersect(list2).ToList()\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Design a function that determines if a text contains any uppercase letters.",
    "code": "```vb\nFunction ContainsUppercase(text As String) As Boolean\n    For Each ch As Char In text\n        If Char.IsUpper(ch) Then\n            Return True\n        End If\n    Next\n    Return False\nEnd Function\n```"
  },
  {
    "task": "Implement a script to check if a given sentence is a question.",
    "code": "```vb\nModule Program\n    Sub Main()\n        Dim sentence As String = \"Is this a question?\"\n        If isQuestion(sentence) Then\n            Console.WriteLine(\"The sentence is a question.\")\n        Else\n            Console.WriteLine(\"The sentence is not a question.\")\n        End If\n    End Sub\n\n    Function isQuestion(ByVal input As String) As Boolean\n        Return input.EndsWith(\"?\")\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Write a program to determine if a temperature is measured in Celsius or Fahrenheit.",
    "code": "```vb\nModule TemperatureCheck\n    Sub Main()\n        Console.WriteLine(\"Enter the temperature value:\")\n        Dim input As String = Console.ReadLine()\n\n        If input.EndsWith(\"C\") Then\n            Console.WriteLine(\"The temperature is measured in Celsius.\")\n        ElseIf input.EndsWith(\"F\") Then\n            Console.WriteLine(\"The temperature is measured in Fahrenheit.\")\n        Else\n            Console.WriteLine(\"The temperature unit is not recognized.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a system that verifies if a student is enrolled in a particular course.",
    "code": "```vb\nModule EnrollmentChecker\n    Sub Main()\n        Dim studentName As String = \"John Doe\"\n        Dim courseName As String = \"Mathematics\"\n\n        Dim studentCourseMap As New Dictionary(Of String, List(Of String)) From {\n            {\"John Doe\", New List(Of String) From {\"Mathematics\", \"Science\"}},\n            {\"Jane Smith\", New List(Of String) From {\"History\", \"Mathematics\"}}\n        }\n\n        If studentCourseMap.ContainsKey(studentName) Then\n            If studentCourseMap(studentName).Contains(courseName) Then\n                Console.WriteLine(\"The student \" & studentName & \" is enrolled in \" & courseName & \".\")\n            Else\n                Console.WriteLine(\"The student \" & studentName & \" is not enrolled in \" & courseName & \".\")\n            End If\n        Else\n            Console.WriteLine(\"The student \" & studentName & \" is not found.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Build a utility to check if a given string is a valid hexadecimal number.",
    "code": "```vb\nFunction IsHexadecimal(inputString As String) As Boolean\n    Dim hexPattern As String = \"^[0-9A-Fa-f]+$\"\n    Return System.Text.RegularExpressions.Regex.IsMatch(inputString, hexPattern)\nEnd Function\n```"
  },
  {
    "task": "Write a function to see if two circles intersect based on their radii and center points.",
    "code": "```vb\nFunction CirclesIntersect(x1 As Double, y1 As Double, r1 As Double, x2 As Double, y2 As Double, r2 As Double) As Boolean\n    Dim dx As Double = x2 - x1\n    Dim dy As Double = y2 - y1\n    Dim distanceSquared As Double = dx * dx + dy * dy\n    Dim radiusSum As Double = r1 + r2\n    Return distanceSquared <= radiusSum * radiusSum\nEnd Function\n```"
  },
  {
    "task": "Develop a program that checks if a given number is within 10% of another number.",
    "code": "```vb\nModule Program\n    Sub Main()\n        Dim num1 As Double\n        Dim num2 As Double\n\n        Console.WriteLine(\"Enter the first number:\")\n        num1 = Convert.ToDouble(Console.ReadLine())\n\n        Console.WriteLine(\"Enter the second number:\")\n        num2 = Convert.ToDouble(Console.ReadLine())\n\n        If IsWithinTenPercent(num1, num2) Then\n            Console.WriteLine(\"The first number is within 10% of the second number.\")\n        Else\n            Console.WriteLine(\"The first number is not within 10% of the second number.\")\n        End If\n    End Sub\n\n    Function IsWithinTenPercent(ByVal baseNum As Double, ByVal compareNum As Double) As Boolean\n        Dim lowerBound As Double = baseNum * 0.9\n        Dim upperBound As Double = baseNum * 1.1\n        Return compareNum >= lowerBound AndAlso compareNum <= upperBound\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Create a feature to determine if a character is alphanumeric.",
    "code": "```vb\nFunction IsAlphanumeric(ByVal ch As Char) As Boolean\n    Return Char.IsLetterOrDigit(ch)\nEnd Function\n```"
  },
  {
    "task": "Implement a system to compare the profit margins of two products.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim product1ProfitMargin As Double\n        Dim product2ProfitMargin As Double\n\n        Console.Write(\"Enter the profit margin for Product 1: \")\n        product1ProfitMargin = Convert.ToDouble(Console.ReadLine())\n\n        Console.Write(\"Enter the profit margin for Product 2: \")\n        product2ProfitMargin = Convert.ToDouble(Console.ReadLine())\n\n        If product1ProfitMargin > product2ProfitMargin Then\n            Console.WriteLine(\"Product 1 has a higher profit margin.\")\n        ElseIf product1ProfitMargin < product2ProfitMargin Then\n            Console.WriteLine(\"Product 2 has a higher profit margin.\")\n        Else\n            Console.WriteLine(\"Both products have the same profit margin.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a script to check if a given string contains any special characters.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim inputString As String = \"YourInputStringHere\"\n        If ContainsSpecialCharacters(inputString) Then\n            Console.WriteLine(\"The string contains special characters.\")\n        Else\n            Console.WriteLine(\"The string does not contain special characters.\")\n        End If\n    End Sub\n\n    Function ContainsSpecialCharacters(ByVal str As String) As Boolean\n        For Each ch As Char In str\n            If Not Char.IsLetterOrDigit(ch) Then\n                Return True\n            End If\n        Next\n        Return False\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Write a function to verify if a number is a multiple of another number.",
    "code": "```vb\nFunction IsMultiple(ByVal num As Integer, ByVal divisor As Integer) As Boolean\n    Return num Mod divisor = 0\nEnd Function\n```"
  },
  {
    "task": "Create a program that checks if a date is a holiday based on a list of holidays.",
    "code": "```vb\nModule HolidayChecker\n    Sub Main()\n        Dim holidays As List(Of Date) = New List(Of Date) From {\n            New Date(2023, 12, 25),\n            New Date(2023, 1, 1),\n            New Date(2023, 7, 4)\n        }\n\n        Dim inputDate As Date = New Date(2023, 12, 25)\n\n        If IsHoliday(inputDate, holidays) Then\n            Console.WriteLine(\"The date is a holiday.\")\n        Else\n            Console.WriteLine(\"The date is not a holiday.\")\n        End If\n    End Sub\n\n    Function IsHoliday(ByVal dateToCheck As Date, ByVal holidayList As List(Of Date)) As Boolean\n        For Each holiday As Date In holidayList\n            If dateToCheck = holiday Then\n                Return True\n            End If\n        Next\n        Return False\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Build a utility to compare two text files and highlight the differences.",
    "code": "```vb\nImports System.IO\n\nModule FileComparer\n    Sub Main()\n        Dim filePath1 As String = \"file1.txt\"\n        Dim filePath2 As String = \"file2.txt\"\n\n        Dim lines1() As String = File.ReadAllLines(filePath1)\n        Dim lines2() As String = File.ReadAllLines(filePath2)\n\n        Dim maxLines As Integer = Math.Max(lines1.Length, lines2.Length)\n\n        Console.WriteLine(\"Differences between the files:\")\n        For i As Integer = 0 To maxLines - 1\n            Dim line1 As String = If(i < lines1.Length, lines1(i), \"\")\n            Dim line2 As String = If(i < lines2.Length, lines2(i), \"\")\n\n            If line1 <> line2 Then\n                Console.WriteLine(\"Line {0}:\", i + 1)\n                Console.WriteLine(\"File 1: \" & line1)\n                Console.WriteLine(\"File 2: \" & line2)\n            End If\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a function to determine if a given password is strong based on length and character diversity.",
    "code": "```vb\nFunction IsStrongPassword(password As String) As Boolean\n    Dim minLength As Integer = 8\n    Dim hasLower As Boolean = False\n    Dim hasUpper As Boolean = False\n    Dim hasDigit As Boolean = False\n    Dim hasSpecial As Boolean = False\n    Dim specialChars As String = \"!@#$%^&*()-_=+[]{}|;:'\"\",.<>/?`~\"\n\n    If Len(password) < minLength Then\n        Return False\n    End If\n\n    For Each ch As Char In password\n        If Char.IsLower(ch) Then\n            hasLower = True\n        ElseIf Char.IsUpper(ch) Then\n            hasUpper = True\n        ElseIf Char.IsDigit(ch) Then\n            hasDigit = True\n        ElseIf specialChars.Contains(ch) Then\n            hasSpecial = True\n        End If\n    Next\n\n    Return hasLower And hasUpper And hasDigit And hasSpecial\nEnd Function\n```"
  },
  {
    "task": "Write a script to see if a number is within a specified distance from zero.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim number As Double\n        Dim distance As Double\n\n        Console.WriteLine(\"Enter a number:\")\n        number = Convert.ToDouble(Console.ReadLine())\n\n        Console.WriteLine(\"Enter the distance from zero:\")\n        distance = Convert.ToDouble(Console.ReadLine())\n\n        If Math.Abs(number) <= distance Then\n            Console.WriteLine(\"The number is within the specified distance from zero.\")\n        Else\n            Console.WriteLine(\"The number is not within the specified distance from zero.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a system to check if a book title is available in a library database.",
    "code": "```vb\nModule LibrarySystem\n    Sub Main()\n        Dim libraryDatabase As String() = {\"The Great Gatsby\", \"1984\", \"To Kill a Mockingbird\", \"The Catcher in the Rye\"}\n        Dim bookTitle As String\n\n        Console.WriteLine(\"Enter the book title to check availability:\")\n        bookTitle = Console.ReadLine()\n\n        If IsBookAvailable(libraryDatabase, bookTitle) Then\n            Console.WriteLine(\"The book is available in the library.\")\n        Else\n            Console.WriteLine(\"The book is not available in the library.\")\n        End If\n    End Sub\n\n    Function IsBookAvailable(ByVal database As String(), ByVal title As String) As Boolean\n        For Each book In database\n            If book = title Then\n                Return True\n            End If\n        Next\n        Return False\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Implement a feature that determines if a user has administrator privileges.",
    "code": "```vb\nModule Program\n    Sub Main()\n        Dim userRole As String = \"admin\" ' Example user role\n        If IsAdmin(userRole) Then\n            Console.WriteLine(\"User has administrator privileges.\")\n        Else\n            Console.WriteLine(\"User does not have administrator privileges.\")\n        End If\n    End Sub\n\n    Function IsAdmin(role As String) As Boolean\n        Return role.ToLower() = \"admin\"\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Design a function to compare the brightness of two colors.",
    "code": "```vb\nFunction CompareBrightness(color1 As Color, color2 As Color) As Integer\n    Dim brightness1 As Double = 0.299 * color1.R + 0.587 * color1.G + 0.114 * color1.B\n    Dim brightness2 As Double = 0.299 * color2.R + 0.587 * color2.G + 0.114 * color2.B\n\n    If brightness1 > brightness2 Then\n        Return 1\n    ElseIf brightness1 < brightness2 Then\n        Return -1\n    Else\n        Return 0\n    End If\nEnd Function\n```"
  },
  {
    "task": "Write a program to verify if a number is a valid credit card number using the Luhn algorithm.",
    "code": "```vb\nModule Program\n    Sub Main()\n        Console.WriteLine(\"Enter credit card number:\")\n        Dim input As String = Console.ReadLine()\n        If IsValidCreditCard(input) Then\n            Console.WriteLine(\"Valid credit card number.\")\n        Else\n            Console.WriteLine(\"Invalid credit card number.\")\n        End If\n    End Sub\n\n    Function IsValidCreditCard(cardNumber As String) As Boolean\n        Dim sum As Integer = 0\n        Dim alternate As Boolean = False\n        For i As Integer = cardNumber.Length - 1 To 0 Step -1\n            Dim n As Integer = Integer.Parse(cardNumber(i).ToString())\n            If alternate Then\n                n *= 2\n                If n > 9 Then\n                    n -= 9\n                End If\n            End If\n            sum += n\n            alternate = Not alternate\n        Next\n        Return sum Mod 10 = 0\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Create a script to determine if a given string is a valid IP address.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim ipAddress As String = \"192.168.1.1\"\n        If IsValidIPAddress(ipAddress) Then\n            Console.WriteLine(\"The string is a valid IP address.\")\n        Else\n            Console.WriteLine(\"The string is not a valid IP address.\")\n        End If\n    End Sub\n\n    Function IsValidIPAddress(ip As String) As Boolean\n        Dim parts() As String = ip.Split(\".\")\n        If parts.Length <> 4 Then\n            Return False\n        End If\n\n        For Each part As String In parts\n            Dim num As Integer\n            If Not Integer.TryParse(part, num) OrElse num < 0 OrElse num > 255 Then\n                Return False\n            End If\n        Next\n\n        Return True\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Build a utility that checks if a number is part of an arithmetic sequence.",
    "code": "```vb\nModule ArithmeticSequenceChecker\n\n    Function IsPartOfArithmeticSequence(ByVal number As Integer, ByVal firstTerm As Integer, ByVal difference As Integer) As Boolean\n        If difference = 0 Then\n            Return number = firstTerm\n        End If\n\n        Dim n As Integer = (number - firstTerm) / difference\n        Return (number - firstTerm) Mod difference = 0 And n >= 0\n    End Function\n\n    Sub Main()\n        Dim number As Integer = 10\n        Dim firstTerm As Integer = 2\n        Dim difference As Integer = 2\n\n        If IsPartOfArithmeticSequence(number, firstTerm, difference) Then\n            Console.WriteLine(\"The number is part of the arithmetic sequence.\")\n        Else\n            Console.WriteLine(\"The number is not part of the arithmetic sequence.\")\n        End If\n    End Sub\n\nEnd Module\n```"
  },
  {
    "task": "Develop a feature to compare the efficiency of two algorithms based on time complexity.",
    "code": "```vb\nModule CompareAlgorithms\n    Sub Main()\n        Dim algorithm1 As String = \"Algorithm 1\"\n        Dim algorithm2 As String = \"Algorithm 2\"\n        \n        Dim timeComplexity1 As String = \"O(n)\"\n        Dim timeComplexity2 As String = \"O(n^2)\"\n        \n        If CompareTimeComplexity(timeComplexity1, timeComplexity2) > 0 Then\n            Console.WriteLine(algorithm1 & \" is more efficient than \" & algorithm2)\n        ElseIf CompareTimeComplexity(timeComplexity1, timeComplexity2) < 0 Then\n            Console.WriteLine(algorithm2 & \" is more efficient than \" & algorithm1)\n        Else\n            Console.WriteLine(algorithm1 & \" and \" & algorithm2 & \" have the same efficiency\")\n        End If\n    End Sub\n\n    Function CompareTimeComplexity(ByVal tc1 As String, ByVal tc2 As String) As Integer\n        Dim complexities As New Dictionary(Of String, Integer) From {\n            {\"O(1)\", 1},\n            {\"O(log n)\", 2},\n            {\"O(n)\", 3},\n            {\"O(n log n)\", 4},\n            {\"O(n^2)\", 5},\n            {\"O(n^3)\", 6},\n            {\"O(2^n)\", 7},\n            {\"O(n!)\", 8}\n        }\n        \n        Return complexities(tc1) - complexities(tc2)\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Write a function to see if a given date falls in a leap year.",
    "code": "```vb\nFunction IsLeapYear(ByVal year As Integer) As Boolean\n    If (year Mod 4 = 0 AndAlso year Mod 100 <> 0) OrElse (year Mod 400 = 0) Then\n        Return True\n    Else\n        Return False\n    End If\nEnd Function\n\nFunction IsDateInLeapYear(ByVal dateValue As Date) As Boolean\n    Dim year As Integer = dateValue.Year\n    Return IsLeapYear(year)\nEnd Function\n```"
  },
  {
    "task": "Create a program that determines if a user's subscription is active based on the current date.",
    "code": "```vb\nModule SubscriptionChecker\n    Sub Main()\n        Dim subscriptionEndDate As Date = #12/31/2023#\n        Dim currentDate As Date = Date.Now\n\n        If currentDate <= subscriptionEndDate Then\n            Console.WriteLine(\"Your subscription is active.\")\n        Else\n            Console.WriteLine(\"Your subscription has expired.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a tool to check if a user\u2019s input is a palindrome phrase, ignoring spaces and punctuation.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Console.WriteLine(\"Enter a phrase:\")\n        Dim input As String = Console.ReadLine()\n        Dim cleanedInput As String = String.Empty\n\n        For Each c As Char In input\n            If Char.IsLetterOrDigit(c) Then\n                cleanedInput &= Char.ToLower(c)\n            End If\n        Next\n\n        Dim isPalindrome As Boolean = True\n        Dim length As Integer = cleanedInput.Length\n\n        For i As Integer = 0 To length \\ 2 - 1\n            If cleanedInput(i) <> cleanedInput(length - i - 1) Then\n                isPalindrome = False\n                Exit For\n            End If\n        Next\n\n        If isPalindrome Then\n            Console.WriteLine(\"The phrase is a palindrome.\")\n        Else\n            Console.WriteLine(\"The phrase is not a palindrome.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a system to verify if a given number is part of the Fibonacci sequence.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim number As Integer\n        Console.Write(\"Enter a number: \")\n        number = Convert.ToInt32(Console.ReadLine())\n        If IsFibonacci(number) Then\n            Console.WriteLine(\"The number is part of the Fibonacci sequence.\")\n        Else\n            Console.WriteLine(\"The number is not part of the Fibonacci sequence.\")\n        End If\n    End Sub\n\n    Function IsFibonacci(ByVal n As Integer) As Boolean\n        If n < 0 Then Return False\n        Dim a As Integer = 0\n        Dim b As Integer = 1\n        While a < n\n            Dim temp As Integer = a\n            a = b\n            b = temp + b\n        End While\n        Return a = n\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Write a program to compare the elevation of two geographic locations.",
    "code": "```vb\nModule ElevationComparison\n    Sub Main()\n        Dim elevation1 As Double\n        Dim elevation2 As Double\n\n        Console.Write(\"Enter the elevation of the first location: \")\n        elevation1 = Convert.ToDouble(Console.ReadLine())\n\n        Console.Write(\"Enter the elevation of the second location: \")\n        elevation2 = Convert.ToDouble(Console.ReadLine())\n\n        If elevation1 > elevation2 Then\n            Console.WriteLine(\"The first location is higher than the second location.\")\n        ElseIf elevation1 < elevation2 Then\n            Console.WriteLine(\"The second location is higher than the first location.\")\n        Else\n            Console.WriteLine(\"Both locations have the same elevation.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a function to determine if a given string is a valid JSON format.",
    "code": "```vb\nImports System.Web.Script.Serialization\n\nModule Module1\n    Sub Main()\n        Dim jsonString As String = \"{\"\"key\"\":\"\"value\"\"}\"\n        Console.WriteLine(IsValidJson(jsonString))\n    End Sub\n\n    Function IsValidJson(ByVal str As String) As Boolean\n        Try\n            Dim serializer As New JavaScriptSerializer()\n            serializer.DeserializeObject(str)\n            Return True\n        Catch ex As Exception\n            Return False\n        End Try\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Build a utility that checks if a number is a factorial of any integer.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim number As Integer\n        Console.WriteLine(\"Enter a number:\")\n        number = Convert.ToInt32(Console.ReadLine())\n\n        If IsFactorial(number) Then\n            Console.WriteLine(\"The number is a factorial of an integer.\")\n        Else\n            Console.WriteLine(\"The number is not a factorial of any integer.\")\n        End If\n    End Sub\n\n    Function IsFactorial(n As Integer) As Boolean\n        If n < 0 Then\n            Return False\n        End If\n\n        Dim i As Integer = 1\n        Dim fact As Integer = 1\n\n        While fact < n\n            i += 1\n            fact *= i\n        End While\n\n        Return fact = n\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Develop a feature to compare the widths of two ribbons and return the wider one.",
    "code": "```vb\nModule RibbonComparison\n    Function GetWiderRibbon(width1 As Double, width2 As Double) As Double\n        If width1 > width2 Then\n            Return width1\n        Else\n            Return width2\n        End If\n    End Function\n\n    Sub Main()\n        Dim widthRibbon1 As Double = 5.0\n        Dim widthRibbon2 As Double = 7.5\n        Dim widerRibbon As Double = GetWiderRibbon(widthRibbon1, widthRibbon2)\n        Console.WriteLine(\"The wider ribbon is: \" & widerRibbon)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a script to see if a word is present in a list of banned words.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim bannedWords As String() = {\"word1\", \"word2\", \"word3\"}\n        Dim inputWord As String = \"example\"\n\n        If bannedWords.Contains(inputWord) Then\n            Console.WriteLine(\"The word is banned.\")\n        Else\n            Console.WriteLine(\"The word is not banned.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a system to determine if a patient's temperature is in the normal range.",
    "code": "```vb\nModule TemperatureCheck\n    Sub Main()\n        Dim temperature As Double\n        Console.Write(\"Enter the patient's temperature: \")\n        temperature = Convert.ToDouble(Console.ReadLine())\n\n        If temperature >= 36.5 And temperature <= 37.5 Then\n            Console.WriteLine(\"The patient's temperature is in the normal range.\")\n        Else\n            Console.WriteLine(\"The patient's temperature is outside the normal range.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a program that checks if a given time is during business hours.",
    "code": "```vb\nModule BusinessHoursChecker\n    Sub Main()\n        Dim inputTime As String\n        Console.WriteLine(\"Enter the time (HH:mm):\")\n        inputTime = Console.ReadLine()\n\n        Dim time As DateTime\n        If DateTime.TryParse(inputTime, time) Then\n            Dim businessStart As New DateTime(time.Year, time.Month, time.Day, 9, 0, 0)\n            Dim businessEnd As New DateTime(time.Year, time.Month, time.Day, 17, 0, 0)\n\n            If time >= businessStart AndAlso time <= businessEnd Then\n                Console.WriteLine(\"The time is during business hours.\")\n            Else\n                Console.WriteLine(\"The time is outside business hours.\")\n            End If\n        Else\n            Console.WriteLine(\"Invalid time format.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a function to see if a number is a triangular number.",
    "code": "```vb\nFunction IsTriangularNumber(ByVal n As Integer) As Boolean\n    Dim sum As Integer = 0\n    Dim i As Integer = 1\n\n    While sum < n\n        sum += i\n        i += 1\n    End While\n\n    Return sum = n\nEnd Function\n```"
  },
  {
    "task": "Write a feature to compare the number of vowels in two given strings.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim string1 As String = \"example\"\n        Dim string2 As String = \"testing\"\n        \n        Dim vowels As String = \"aeiouAEIOU\"\n        \n        Dim count1 As Integer = string1.Count(Function(c) vowels.Contains(c))\n        Dim count2 As Integer = string2.Count(Function(c) vowels.Contains(c))\n        \n        Dim comparisonResult As Integer = count1.CompareTo(count2)\n        \n        Select Case comparisonResult\n            Case -1\n                Console.WriteLine(\"String 1 has fewer vowels than String 2.\")\n            Case 0\n                Console.WriteLine(\"String 1 and String 2 have the same number of vowels.\")\n            Case 1\n                Console.WriteLine(\"String 1 has more vowels than String 2.\")\n        End Select\n    End Sub\nEnd Module\n```"
  }
]