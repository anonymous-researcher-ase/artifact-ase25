[
  {
    "task": "Write a program that reads a user's name and age from the input, then prints a greeting message using both values.",
    "code": "```vb\nModule Program\n    Sub Main()\n        Console.Write(\"Enter your name: \")\n        Dim name As String = Console.ReadLine()\n\n        Console.Write(\"Enter your age: \")\n        Dim age As String = Console.ReadLine()\n\n        Console.WriteLine(\"Hello, \" & name & \"! You are \" & age & \" years old.\")\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a script that continuously reads numbers from the input and prints their running total until a negative number is entered.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim total As Integer = 0\n        While True\n            Dim input As String = Console.ReadLine()\n            Dim number As Integer\n            If Integer.TryParse(input, number) Then\n                If number < 0 Then\n                    Exit While\n                End If\n                total += number\n                Console.WriteLine(total)\n            End If\n        End While\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a program that asks the user for a sentence and outputs the number of words it contains.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Console.WriteLine(\"Enter a sentence:\")\n        Dim input As String = Console.ReadLine()\n        Dim words() As String = input.Split(New Char() {\" \"c}, StringSplitOptions.RemoveEmptyEntries)\n        Console.WriteLine(\"Number of words: \" & words.Length)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Build a command-line tool that reads a list of integers and outputs them in sorted order.",
    "code": "```vb\nModule SortIntegers\n    Sub Main()\n        Dim input As String = Console.ReadLine()\n        Dim numbers As List(Of Integer) = input.Split(\" \"c).Select(Function(x) Integer.Parse(x)).ToList()\n        numbers.Sort()\n        For Each number As Integer In numbers\n            Console.Write(number & \" \")\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a program that reads a file name from the input, then prints the number of lines in that file.",
    "code": "```vb\nImports System.IO\n\nModule Program\n    Sub Main()\n        Dim fileName As String = Console.ReadLine()\n        Dim lineCount As Integer = File.ReadAllLines(fileName).Length\n        Console.WriteLine(lineCount)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a calculator that reads two numbers and an operator (+, -, *, /) from the input and prints the result.",
    "code": "```vb\nImports System\n\nModule Calculator\n    Sub Main()\n        Console.Write(\"Enter first number: \")\n        Dim num1 As Double = Convert.ToDouble(Console.ReadLine())\n        \n        Console.Write(\"Enter second number: \")\n        Dim num2 As Double = Convert.ToDouble(Console.ReadLine())\n        \n        Console.Write(\"Enter operator (+, -, *, /): \")\n        Dim op As Char = Convert.ToChar(Console.ReadLine())\n        \n        Dim result As Double\n        \n        Select Case op\n            Case \"+\"c\n                result = num1 + num2\n            Case \"-\"c\n                result = num1 - num2\n            Case \"*\"c\n                result = num1 * num2\n            Case \"/\"c\n                result = num1 / num2\n            Case Else\n                Console.WriteLine(\"Invalid operator\")\n                Return\n        End Select\n        \n        Console.WriteLine(\"Result: \" & result)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a script that reads a user's full name and prints it in reverse order.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Console.WriteLine(\"Enter your full name:\")\n        Dim fullName As String = Console.ReadLine()\n        Dim reversedName As String = StrReverse(fullName)\n        Console.WriteLine(\"Reversed Name: \" & reversedName)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a program that asks for a word and checks if it is a palindrome, printing the appropriate message.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Console.Write(\"Enter a word: \")\n        Dim word As String = Console.ReadLine()\n        Dim reversedWord As String = StrReverse(word)\n        \n        If String.Compare(word, reversedWord, True) = 0 Then\n            Console.WriteLine(\"The word is a palindrome.\")\n        Else\n            Console.WriteLine(\"The word is not a palindrome.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a tool that reads multiple lines of text and outputs the longest line.",
    "code": "```vb\nModule LongestLineFinder\n    Sub Main()\n        Dim lines As New List(Of String)\n        Console.WriteLine(\"Enter lines of text (blank line to finish):\")\n        While True\n            Dim line As String = Console.ReadLine()\n            If String.IsNullOrEmpty(line) Then Exit While\n            lines.Add(line)\n        End While\n\n        Dim longestLine As String = lines.OrderByDescending(Function(l) l.Length).FirstOrDefault()\n        Console.WriteLine(\"The longest line is:\")\n        Console.WriteLine(longestLine)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a script that reads a number 'n' and prints the first 'n' Fibonacci numbers.",
    "code": "```vb\nImports System\n\nModule FibonacciModule\n    Sub Main()\n        Console.Write(\"Enter the number of Fibonacci numbers to print: \")\n        Dim input As String = Console.ReadLine()\n        Dim n As Integer\n        If Integer.TryParse(input, n) AndAlso n > 0 Then\n            Dim a As Integer = 0\n            Dim b As Integer = 1\n            Console.WriteLine(a)\n            If n > 1 Then\n                Console.WriteLine(b)\n                For i As Integer = 2 To n - 1\n                    Dim temp As Integer = a + b\n                    Console.WriteLine(temp)\n                    a = b\n                    b = temp\n                Next\n            End If\n        Else\n            Console.WriteLine(\"Please enter a positive integer.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a program that takes a list of numbers from the input and prints only the even ones.",
    "code": "```vb\nImports System\n\nModule Program\n    Sub Main()\n        Dim input As String = Console.ReadLine()\n        Dim numbers As String() = input.Split(\" \"c)\n        \n        For Each numStr As String In numbers\n            Dim num As Integer\n            If Integer.TryParse(numStr, num) AndAlso num Mod 2 = 0 Then\n                Console.WriteLine(num)\n            End If\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a script that reads a date (day, month, year) and prints the day of the week for that date.",
    "code": "```vb\nImports System\nImports System.Globalization\n\nModule Program\n    Sub Main()\n        Console.WriteLine(\"Enter day:\")\n        Dim day As Integer = Convert.ToInt32(Console.ReadLine())\n        Console.WriteLine(\"Enter month:\")\n        Dim month As Integer = Convert.ToInt32(Console.ReadLine())\n        Console.WriteLine(\"Enter year:\")\n        Dim year As Integer = Convert.ToInt32(Console.ReadLine())\n\n        Dim inputDate As New DateTime(year, month, day)\n        Dim dayOfWeek As String = inputDate.ToString(\"dddd\", CultureInfo.InvariantCulture)\n        \n        Console.WriteLine(\"The day of the week is: \" & dayOfWeek)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a program that reads a paragraph and counts the frequency of each letter in the text.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim filePath As String = \"text.txt\"\n        Dim paragraph As String = System.IO.File.ReadAllText(filePath).ToLower()\n        Dim letterFrequency As New Dictionary(Of Char, Integer)\n\n        For Each c As Char In paragraph\n            If Char.IsLetter(c) Then\n                If letterFrequency.ContainsKey(c) Then\n                    letterFrequency(c) += 1\n                Else\n                    letterFrequency(c) = 1\n                End If\n            End If\n        Next\n\n        For Each kvp As KeyValuePair(Of Char, Integer) In letterFrequency\n            Console.WriteLine(\"Letter: \" & kvp.Key & \" Frequency: \" & kvp.Value)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Build a tool that reads a text and a word, then prints the number of times the word appears in the text.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Console.WriteLine(\"Enter the text:\")\n        Dim text As String = Console.ReadLine()\n        \n        Console.WriteLine(\"Enter the word to count:\")\n        Dim word As String = Console.ReadLine()\n        \n        Dim wordCount As Integer = 0\n        Dim words() As String = text.Split(New Char() {\" \"c}, StringSplitOptions.RemoveEmptyEntries)\n        \n        For Each w As String In words\n            If w.Equals(word, StringComparison.OrdinalIgnoreCase) Then\n                wordCount += 1\n            End If\n        Next\n        \n        Console.WriteLine(\"The word '\" & word & \"' appears \" & wordCount & \" times.\")\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a script that reads a temperature in Celsius and converts it to Fahrenheit, printing the result.",
    "code": "```vb\nImports System.IO\n\nModule TemperatureConverter\n    Sub Main()\n        Console.Write(\"Enter temperature in Celsius: \")\n        Dim input As String = Console.ReadLine()\n        Dim celsius As Double\n\n        If Double.TryParse(input, celsius) Then\n            Dim fahrenheit As Double = celsius * 9 / 5 + 32\n            Console.WriteLine(\"Temperature in Fahrenheit: \" & fahrenheit)\n        Else\n            Console.WriteLine(\"Invalid input. Please enter a numeric value.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a program that continuously reads input until the word 'exit' is entered, then prints all entered inputs.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim inputs As New List(Of String)\n        Dim input As String\n\n        Do\n            input = Console.ReadLine()\n            If input.ToLower() = \"exit\" Then\n                Exit Do\n            End If\n            inputs.Add(input)\n        Loop\n\n        For Each item In inputs\n            Console.WriteLine(item)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a tool that prompts for a filename, reads the file, and prints its content in uppercase.",
    "code": "```vb\nImports System\nImports System.IO\n\nModule Program\n    Sub Main()\n        Console.Write(\"Enter the filename: \")\n        Dim filename As String = Console.ReadLine()\n        \n        If File.Exists(filename) Then\n            Dim content As String = File.ReadAllText(filename)\n            Console.WriteLine(content.ToUpper())\n        Else\n            Console.WriteLine(\"File not found.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a program that reads a series of email addresses and prints the unique domain names.",
    "code": "```vb\nImports System.IO\n\nModule Module1\n    Sub Main()\n        Dim filePath As String = \"emails.txt\"\n        Dim domainNames As New HashSet(Of String)\n\n        If File.Exists(filePath) Then\n            Dim lines As String() = File.ReadAllLines(filePath)\n            For Each line In lines\n                Dim parts As String() = line.Split(\"@\"c)\n                If parts.Length = 2 Then\n                    domainNames.Add(parts(1))\n                End If\n            Next\n        End If\n\n        For Each domain In domainNames\n            Console.WriteLine(domain)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a script that reads a string and prints whether it contains all the letters of the alphabet.",
    "code": "```vb\nImports System.IO\n\nModule Module1\n    Sub Main()\n        Console.WriteLine(\"Enter a string:\")\n        Dim input As String = Console.ReadLine().ToLower()\n        Dim alphabet As String = \"abcdefghijklmnopqrstuvwxyz\"\n        Dim allLettersPresent As Boolean = True\n\n        For Each letter As Char In alphabet\n            If Not input.Contains(letter) Then\n                allLettersPresent = False\n                Exit For\n            End If\n        Next\n\n        If allLettersPresent Then\n            Console.WriteLine(\"The string contains all the letters of the alphabet.\")\n        Else\n            Console.WriteLine(\"The string does not contain all the letters of the alphabet.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a program that reads a number and prints its factorial.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Console.Write(\"Enter a number: \")\n        Dim input As String = Console.ReadLine()\n        Dim number As Integer\n        If Integer.TryParse(input, number) Then\n            Dim factorial As Integer = 1\n            For i As Integer = 2 To number\n                factorial *= i\n            Next\n            Console.WriteLine(\"Factorial: \" & factorial)\n        Else\n            Console.WriteLine(\"Invalid input\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a tool that reads a list of names and prints them in alphabetical order.",
    "code": "```vb\nImports System.IO\n\nModule Module1\n    Sub Main()\n        Dim filePath As String = \"names.txt\"\n        Dim names As List(Of String) = New List(Of String)(File.ReadAllLines(filePath))\n        \n        names.Sort()\n        \n        For Each name As String In names\n            Console.WriteLine(name)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a program that asks for a sentence and prints each word on a new line.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Console.WriteLine(\"Enter a sentence:\")\n        Dim input As String = Console.ReadLine()\n        Dim words As String() = input.Split(\" \"c)\n        For Each word As String In words\n            Console.WriteLine(word)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Build a script that reads a time in 12-hour format and converts it to 24-hour format.",
    "code": "```vb\nModule TimeConversion\n    Sub Main()\n        Console.WriteLine(\"Enter time in 12-hour format (hh:mm AM/PM):\")\n        Dim inputTime As String = Console.ReadLine()\n        Dim parsedTime As DateTime\n        If DateTime.TryParse(inputTime, parsedTime) Then\n            Console.WriteLine(\"Time in 24-hour format: \" & parsedTime.ToString(\"HH:mm\"))\n        Else\n            Console.WriteLine(\"Invalid time format.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a program that reads two strings and checks if they are anagrams, printing the result.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Console.WriteLine(\"Enter first string:\")\n        Dim str1 As String = Console.ReadLine()\n        Console.WriteLine(\"Enter second string:\")\n        Dim str2 As String = Console.ReadLine()\n        \n        If IsAnagram(str1, str2) Then\n            Console.WriteLine(\"The strings are anagrams.\")\n        Else\n            Console.WriteLine(\"The strings are not anagrams.\")\n        End If\n    End Sub\n\n    Function IsAnagram(s1 As String, s2 As String) As Boolean\n        Dim arr1() As Char = s1.ToLower().ToCharArray()\n        Dim arr2() As Char = s2.ToLower().ToCharArray()\n        \n        Array.Sort(arr1)\n        Array.Sort(arr2)\n        \n        Return New String(arr1) = New String(arr2)\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Write a tool that reads a paragraph and prints the first and last sentence.",
    "code": "```vb\nImports System\nImports System.IO\n\nModule Program\n    Sub Main()\n        Console.WriteLine(\"Enter a paragraph:\")\n        Dim paragraph As String = Console.ReadLine()\n        \n        Dim sentences() As String = paragraph.Split(New Char() {\".\"c}, StringSplitOptions.RemoveEmptyEntries)\n        \n        If sentences.Length > 0 Then\n            Console.WriteLine(\"First Sentence: \" & sentences(0).Trim() & \".\")\n            Console.WriteLine(\"Last Sentence: \" & sentences(sentences.Length - 1).Trim() & \".\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a program that reads a binary number and converts it to decimal.",
    "code": "```vb\nImports System\n\nModule Program\n    Sub Main()\n        Console.WriteLine(\"Enter a binary number:\")\n        Dim binaryInput As String = Console.ReadLine()\n        Try\n            Dim decimalValue As Integer = Convert.ToInt32(binaryInput, 2)\n            Console.WriteLine(\"Decimal value: \" & decimalValue)\n        Catch ex As Exception\n            Console.WriteLine(\"Invalid binary number.\")\n        End Try\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a script that reads a series of scores and prints the average score.",
    "code": "```vb\nImports System.IO\n\nModule Module1\n    Sub Main()\n        Dim scores As New List(Of Double)\n        Console.WriteLine(\"Enter scores one by one, type 'done' when finished:\")\n\n        While True\n            Dim input As String = Console.ReadLine()\n            If input.ToLower() = \"done\" Then\n                Exit While\n            End If\n\n            Dim score As Double\n            If Double.TryParse(input, score) Then\n                scores.Add(score)\n            Else\n                Console.WriteLine(\"Invalid input. Please enter a numeric value.\")\n            End If\n        End While\n\n        If scores.Count > 0 Then\n            Dim average As Double = scores.Average()\n            Console.WriteLine(\"The average score is: \" & average.ToString(\"F2\"))\n        Else\n            Console.WriteLine(\"No scores were entered.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a program that reads a list of integers and prints the prime numbers.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim input As String = Console.ReadLine()\n        Dim numbers As String() = input.Split(\" \"c)\n        For Each numStr As String In numbers\n            Dim num As Integer\n            If Integer.TryParse(numStr, num) AndAlso IsPrime(num) Then\n                Console.WriteLine(num)\n            End If\n        Next\n    End Sub\n\n    Function IsPrime(ByVal number As Integer) As Boolean\n        If number <= 1 Then Return False\n        For i As Integer = 2 To Math.Sqrt(number)\n            If number Mod i = 0 Then Return False\n        Next\n        Return True\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Write a script that reads a word and prints its Pig Latin translation.",
    "code": "```vb\nModule PigLatinTranslator\n    Sub Main()\n        Console.WriteLine(\"Enter a word:\")\n        Dim word As String = Console.ReadLine()\n        Dim pigLatin As String = ToPigLatin(word)\n        Console.WriteLine(\"Pig Latin: \" & pigLatin)\n    End Sub\n\n    Function ToPigLatin(ByVal word As String) As String\n        If String.IsNullOrEmpty(word) Then\n            Return String.Empty\n        End If\n\n        Dim vowels As String = \"AEIOUaeiou\"\n        If vowels.Contains(word(0)) Then\n            Return word & \"way\"\n        Else\n            Dim firstVowelIndex As Integer = -1\n            For i As Integer = 0 To word.Length - 1\n                If vowels.Contains(word(i)) Then\n                    firstVowelIndex = i\n                    Exit For\n                End If\n            Next\n            If firstVowelIndex = -1 Then\n                Return word & \"ay\"\n            Else\n                Return word.Substring(firstVowelIndex) & word.Substring(0, firstVowelIndex) & \"ay\"\n            End If\n        End If\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Create a tool that reads a matrix of numbers and prints its transpose.",
    "code": "```vb\nModule MatrixTranspose\n    Sub Main()\n        Dim matrix(,) As Integer = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}\n        Dim rows As Integer = matrix.GetLength(0)\n        Dim cols As Integer = matrix.GetLength(1)\n        Dim transpose(cols - 1, rows - 1) As Integer\n\n        For i As Integer = 0 To rows - 1\n            For j As Integer = 0 To cols - 1\n                transpose(j, i) = matrix(i, j)\n            Next\n        Next\n\n        For i As Integer = 0 To cols - 1\n            For j As Integer = 0 To rows - 1\n                Console.Write(transpose(i, j) & \" \")\n            Next\n            Console.WriteLine()\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a program that reads a URL and prints the domain name.",
    "code": "```vb\nImports System.IO\nImports System.Net\n\nModule Program\n    Sub Main()\n        Console.WriteLine(\"Enter a URL:\")\n        Dim url As String = Console.ReadLine()\n        If Uri.IsWellFormedUriString(url, UriKind.Absolute) Then\n            Dim uri As New Uri(url)\n            Console.WriteLine(\"Domain: \" & uri.Host)\n        Else\n            Console.WriteLine(\"Invalid URL\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a script that reads a number and prints its multiplication table up to 12.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Console.Write(\"Enter a number: \")\n        Dim number As Integer = Convert.ToInt32(Console.ReadLine())\n        \n        For i As Integer = 1 To 12\n            Console.WriteLine(\"{0} x {1} = {2}\", number, i, number * i)\n        Next\n        \n        Console.ReadLine()\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a program that reads a list of dates and prints them in order of occurrence.",
    "code": "```vb\nImports System\nImports System.IO\n\nModule Program\n    Sub Main()\n        Dim dates As New List(Of DateTime)\n\n        ' Read dates from a file\n        Using reader As New StreamReader(\"dates.txt\")\n            Dim line As String\n            line = reader.ReadLine()\n            While line IsNot Nothing\n                Dim dateValue As DateTime\n                If DateTime.TryParse(line, dateValue) Then\n                    dates.Add(dateValue)\n                End If\n                line = reader.ReadLine()\n            End While\n        End Using\n\n        ' Sort dates\n        dates.Sort()\n\n        ' Print sorted dates\n        For Each dateValue As DateTime In dates\n            Console.WriteLine(dateValue.ToString(\"yyyy-MM-dd\"))\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a tool that reads a text and prints it with each sentence capitalized.",
    "code": "```vb\nImports System.IO\n\nModule CapitalizeSentences\n    Sub Main()\n        Console.WriteLine(\"Enter the path of the text file:\")\n        Dim filePath As String = Console.ReadLine()\n        \n        If File.Exists(filePath) Then\n            Dim textContent As String = File.ReadAllText(filePath)\n            Dim sentences As String() = textContent.Split(New Char() {\".\"c}, StringSplitOptions.RemoveEmptyEntries)\n            Dim capitalizedText As New StringBuilder()\n            \n            For Each sentence As String In sentences\n                Dim trimmedSentence As String = sentence.Trim()\n                If trimmedSentence.Length > 0 Then\n                    capitalizedText.Append(Char.ToUpper(trimmedSentence(0)))\n                    If trimmedSentence.Length > 1 Then\n                        capitalizedText.Append(trimmedSentence.Substring(1))\n                    End If\n                    capitalizedText.Append(\". \")\n                End If\n            Next\n            \n            Console.WriteLine(\"Capitalized Text:\")\n            Console.WriteLine(capitalizedText.ToString().Trim())\n        Else\n            Console.WriteLine(\"The file does not exist.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a program that reads a list of words and prints them in reverse alphabetical order.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim words As New List(Of String)\n        Console.WriteLine(\"Enter words separated by commas:\")\n        Dim input As String = Console.ReadLine()\n        words.AddRange(input.Split(\",\"c).Select(Function(w) w.Trim()))\n        words.Sort(Function(x, y) String.Compare(y, x))\n        Console.WriteLine(\"Words in reverse alphabetical order:\")\n        For Each word As String In words\n            Console.WriteLine(word)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a script that asks for two times and prints the difference in minutes.",
    "code": "```vb\nModule Program\n    Sub Main()\n        Console.Write(\"Enter the first time (HH:mm): \")\n        Dim time1 As DateTime = DateTime.Parse(Console.ReadLine())\n        \n        Console.Write(\"Enter the second time (HH:mm): \")\n        Dim time2 As DateTime = DateTime.Parse(Console.ReadLine())\n        \n        Dim difference As TimeSpan = time2 - time1\n        Console.WriteLine(\"Difference in minutes: \" & Math.Abs(difference.TotalMinutes))\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Build a program that reads a text and prints the number of vowels and consonants.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Console.WriteLine(\"Enter a text:\")\n        Dim input As String = Console.ReadLine().ToLower()\n        Dim vowels As String = \"aeiou\"\n        Dim vowelCount As Integer = 0\n        Dim consonantCount As Integer = 0\n\n        For Each c As Char In input\n            If Char.IsLetter(c) Then\n                If vowels.Contains(c) Then\n                    vowelCount += 1\n                Else\n                    consonantCount += 1\n                End If\n            End If\n        Next\n\n        Console.WriteLine(\"Number of vowels: \" & vowelCount)\n        Console.WriteLine(\"Number of consonants: \" & consonantCount)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a tool that reads a JSON object from input and prints its keys.",
    "code": "```vb\nImports System\nImports System.IO\nImports Newtonsoft.Json.Linq\n\nModule Program\n    Sub Main()\n        Dim input As String = Console.In.ReadToEnd()\n        Dim jsonObj As JObject = JObject.Parse(input)\n        For Each key As String In jsonObj.Properties().Select(Function(p) p.Name)\n            Console.WriteLine(key)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a program that reads a CSV file from input and prints each row as a dictionary.",
    "code": "```vb\nImports System\nImports System.IO\nImports System.Collections.Generic\n\nModule Program\n    Sub Main(args As String())\n        Dim filePath As String = Console.ReadLine()\n        Using reader As New StreamReader(filePath)\n            Dim headers As String() = reader.ReadLine().Split(\",\"c)\n            While Not reader.EndOfStream\n                Dim line As String = reader.ReadLine()\n                Dim values As String() = line.Split(\",\"c)\n                Dim rowDict As New Dictionary(Of String, String)()\n                For i As Integer = 0 To headers.Length - 1\n                    rowDict(headers(i)) = values(i)\n                Next\n                For Each kvp In rowDict\n                    Console.WriteLine($\"{kvp.Key}: {kvp.Value}\")\n                Next\n                Console.WriteLine()\n            End While\n        End Using\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a script that reads a sentence and prints it with the words in reverse order.",
    "code": "```vb\nImports System\n\nModule Program\n    Sub Main()\n        Console.WriteLine(\"Enter a sentence:\")\n        Dim input As String = Console.ReadLine()\n        Dim words As String() = input.Split(\" \"c)\n        Array.Reverse(words)\n        Dim reversedSentence As String = String.Join(\" \", words)\n        Console.WriteLine(reversedSentence)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a tool that reads a list of numbers and prints their median.",
    "code": "```vb\nImports System\nImports System.IO\n\nModule MedianCalculator\n    Sub Main()\n        Dim numbers As New List(Of Double)\n        \n        Console.WriteLine(\"Enter the numbers separated by commas:\")\n        Dim input As String = Console.ReadLine()\n        \n        Dim numberStrings() As String = input.Split(\",\"c)\n        For Each numberString As String In numberStrings\n            Dim number As Double\n            If Double.TryParse(numberString.Trim(), number) Then\n                numbers.Add(number)\n            End If\n        Next\n        \n        numbers.Sort()\n        Dim median As Double\n        Dim count As Integer = numbers.Count\n        \n        If count Mod 2 = 0 Then\n            median = (numbers(count \\ 2 - 1) + numbers(count \\ 2)) / 2\n        Else\n            median = numbers(count \\ 2)\n        End If\n        \n        Console.WriteLine(\"The median is: \" & median)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a program that reads a sequence of characters and prints the first non-repeated character.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim input As String\n        Console.WriteLine(\"Enter a sequence of characters:\")\n        input = Console.ReadLine()\n        \n        Dim charCount As New Dictionary(Of Char, Integer)\n        \n        For Each c As Char In input\n            If charCount.ContainsKey(c) Then\n                charCount(c) += 1\n            Else\n                charCount(c) = 1\n            End If\n        Next\n        \n        For Each c As Char In input\n            If charCount(c) = 1 Then\n                Console.WriteLine(\"First non-repeated character: \" & c)\n                Exit Sub\n            End If\n        Next\n        \n        Console.WriteLine(\"No non-repeated character found.\")\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a script that reads a list of tuples and prints them sorted by the second element.",
    "code": "```vb\nImports System\nImports System.IO\nImports System.Collections.Generic\n\nModule Module1\n    Sub Main()\n        Dim tuples As New List(Of Tuple(Of Integer, Integer)) From {\n            Tuple.Create(1, 5),\n            Tuple.Create(2, 3),\n            Tuple.Create(3, 8),\n            Tuple.Create(4, 1)\n        }\n\n        tuples.Sort(Function(a, b) a.Item2.CompareTo(b.Item2))\n\n        For Each t As Tuple(Of Integer, Integer) In tuples\n            Console.WriteLine(\"(\" & t.Item1 & \", \" & t.Item2 & \")\")\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a program that reads a list of cities and prints them grouped by their starting letter.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim cities As String() = {\"Amsterdam\", \"Berlin\", \"Copenhagen\", \"Athens\", \"Brussels\", \"Barcelona\", \"Cologne\"}\n        Dim groupedCities As New Dictionary(Of Char, List(Of String))\n\n        For Each city As String In cities\n            Dim firstLetter As Char = city(0)\n            If Not groupedCities.ContainsKey(firstLetter) Then\n                groupedCities(firstLetter) = New List(Of String)\n            End If\n            groupedCities(firstLetter).Add(city)\n        Next\n\n        For Each key As Char In groupedCities.Keys\n            Console.WriteLine(\"Cities starting with \" & key & \":\")\n            For Each city As String In groupedCities(key)\n                Console.WriteLine(\"  \" & city)\n            Next\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Build a tool that reads a text and prints the longest word.",
    "code": "```vb\nImports System.IO\n\nModule LongestWordFinder\n    Sub Main()\n        Dim filePath As String = \"input.txt\"\n        Dim text As String = File.ReadAllText(filePath)\n        Dim words() As String = text.Split(New Char() {\" \"c, ControlChars.Lf, ControlChars.Cr, ControlChars.Tab})\n        Dim longestWord As String = \"\"\n\n        For Each word As String In words\n            If word.Length > longestWord.Length Then\n                longestWord = word\n            End If\n        Next\n\n        Console.WriteLine(\"The longest word is: \" & longestWord)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a program that reads a string and prints the number of unique characters.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim input As String = Console.ReadLine()\n        Dim uniqueChars As New HashSet(Of Char)(input)\n        Console.WriteLine(uniqueChars.Count)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a script that reads two strings and prints the longest common substring.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Console.WriteLine(\"Enter first string:\")\n        Dim str1 As String = Console.ReadLine()\n        Console.WriteLine(\"Enter second string:\")\n        Dim str2 As String = Console.ReadLine()\n\n        Dim longestCommonSubstring As String = String.Empty\n        Dim maxLength As Integer = 0\n\n        Dim lengths(str1.Length, str2.Length) As Integer\n\n        For i As Integer = 1 To str1.Length\n            For j As Integer = 1 To str2.Length\n                If str1(i - 1) = str2(j - 1) Then\n                    lengths(i, j) = lengths(i - 1, j - 1) + 1\n                    If lengths(i, j) > maxLength Then\n                        maxLength = lengths(i, j)\n                        longestCommonSubstring = str1.Substring(i - maxLength, maxLength)\n                    End If\n                End If\n            Next\n        Next\n\n        Console.WriteLine(\"Longest common substring: \" & longestCommonSubstring)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a program that reads a chessboard position and prints all possible moves for a knight.",
    "code": "```vb\nModule KnightMoves\n    Sub Main()\n        Dim input As String\n        Console.WriteLine(\"Enter knight position (e.g., e4):\")\n        input = Console.ReadLine()\n\n        Dim col As Integer = Asc(input(0)) - Asc(\"a\"c)\n        Dim row As Integer = Asc(input(1)) - Asc(\"1\"c)\n        \n        Dim moves As Integer(,) = {{2, 1}, {2, -1}, {-2, 1}, {-2, -1}, {1, 2}, {1, -2}, {-1, 2}, {-1, -2}}\n        Dim possibleMoves As New List(Of String)\n\n        For i As Integer = 0 To moves.GetLength(0) - 1\n            Dim newCol As Integer = col + moves(i, 0)\n            Dim newRow As Integer = row + moves(i, 1)\n            If newCol >= 0 AndAlso newCol < 8 AndAlso newRow >= 0 AndAlso newRow < 8 Then\n                possibleMoves.Add(Chr(newCol + Asc(\"a\"c)) & Chr(newRow + Asc(\"1\"c)))\n            End If\n        Next\n\n        Console.WriteLine(\"Possible moves:\")\n        For Each move In possibleMoves\n            Console.WriteLine(move)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a tool that reads a list of numbers and prints the mode.",
    "code": "```vb\nModule ModeCalculator\n    Sub Main()\n        Dim numbers As List(Of Integer) = ReadNumbers()\n        Dim mode As Integer = FindMode(numbers)\n        Console.WriteLine(\"Mode: \" & mode)\n    End Sub\n\n    Function ReadNumbers() As List(Of Integer)\n        Dim numbers As New List(Of Integer)\n        Dim input As String\n        Console.WriteLine(\"Enter numbers separated by spaces:\")\n        input = Console.ReadLine()\n        Dim parts() As String = input.Split(\" \"c)\n        For Each part As String In parts\n            Dim number As Integer\n            If Integer.TryParse(part, number) Then\n                numbers.Add(number)\n            End If\n        Next\n        Return numbers\n    End Function\n\n    Function FindMode(numbers As List(Of Integer)) As Integer\n        Dim frequency As New Dictionary(Of Integer, Integer)\n        For Each number As Integer In numbers\n            If frequency.ContainsKey(number) Then\n                frequency(number) += 1\n            Else\n                frequency(number) = 1\n            End If\n        Next\n        Dim mode As Integer = numbers(0)\n        Dim maxCount As Integer = frequency(mode)\n        For Each kvp As KeyValuePair(Of Integer, Integer) In frequency\n            If kvp.Value > maxCount Then\n                mode = kvp.Key\n                maxCount = kvp.Value\n            End If\n        Next\n        Return mode\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Design a program that reads a list of file paths and prints the largest file.",
    "code": "```vb\nImports System.IO\n\nModule LargestFileFinder\n    Sub Main()\n        Dim filePaths As String() = {\"path\\to\\file1.txt\", \"path\\to\\file2.txt\", \"path\\to\\file3.txt\"}\n        Dim largestFile As String = \"\"\n        Dim maxSize As Long = 0\n\n        For Each filePath As String In filePaths\n            If File.Exists(filePath) Then\n                Dim fileSize As Long = New FileInfo(filePath).Length\n                If fileSize > maxSize Then\n                    maxSize = fileSize\n                    largestFile = filePath\n                End If\n            End If\n        Next\n\n        If largestFile <> \"\" Then\n            Console.WriteLine(\"The largest file is: \" & largestFile)\n        Else\n            Console.WriteLine(\"No valid files found.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a script that reads a list of prices and prints the total cost with tax.",
    "code": "```vb\nImports System.IO\n\nModule Module1\n    Sub Main()\n        Dim filePath As String = \"prices.txt\"\n        Dim totalCost As Double = 0.0\n        Dim taxRate As Double = 0.2 ' 20% tax\n        \n        If File.Exists(filePath) Then\n            Dim prices() As String = File.ReadAllLines(filePath)\n            For Each price As String In prices\n                Dim priceValue As Double\n                If Double.TryParse(price, priceValue) Then\n                    totalCost += priceValue\n                End If\n            Next\n        End If\n\n        Dim totalWithTax As Double = totalCost * (1 + taxRate)\n        Console.WriteLine(\"Total cost with tax: \" & totalWithTax.ToString(\"F2\"))\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Build a program that reads a list of temperatures and prints them in Fahrenheit.",
    "code": "```vb\nModule TemperatureConverter\n    Sub Main()\n        Dim temperaturesCelsius As List(Of Double) = New List(Of Double) From {0, 20, 30, 100}\n        Dim temperaturesFahrenheit As List(Of Double) = ConvertToFahrenheit(temperaturesCelsius)\n\n        For Each tempF In temperaturesFahrenheit\n            Console.WriteLine(tempF)\n        Next\n    End Sub\n\n    Function ConvertToFahrenheit(celsius As List(Of Double)) As List(Of Double)\n        Dim fahrenheit As New List(Of Double)\n        For Each tempC In celsius\n            fahrenheit.Add(tempC * 9 / 5 + 32)\n        Next\n        Return fahrenheit\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Implement a tool that reads a list of book titles and prints them sorted by length.",
    "code": "```vb\nModule BookSorter\n    Sub Main()\n        Dim filePath As String = \"books.txt\"\n        Dim bookTitles As List(Of String) = New List(Of String)\n\n        If System.IO.File.Exists(filePath) Then\n            bookTitles = System.IO.File.ReadAllLines(filePath).ToList()\n        End If\n\n        Dim sortedBooks = From title In bookTitles\n                          Order By title.Length, title\n                          Select title\n\n        For Each title As String In sortedBooks\n            Console.WriteLine(title)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a program that reads a directory path and prints all file names.",
    "code": "```vb\nImports System.IO\n\nModule Module1\n    Sub Main()\n        Console.Write(\"Enter directory path: \")\n        Dim dirPath As String = Console.ReadLine()\n\n        If Directory.Exists(dirPath) Then\n            Dim files As String() = Directory.GetFiles(dirPath)\n            For Each file As String In files\n                Console.WriteLine(Path.GetFileName(file))\n            Next\n        Else\n            Console.WriteLine(\"Directory does not exist.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a script that reads a list of URLs and prints those with a secure connection.",
    "code": "```vb\nImports System.IO\n\nModule SecureURLChecker\n    Sub Main()\n        Dim filePath As String = \"urls.txt\"\n        If File.Exists(filePath) Then\n            Dim urls As String() = File.ReadAllLines(filePath)\n            For Each url As String In urls\n                If url.StartsWith(\"https://\") Then\n                    Console.WriteLine(url)\n                End If\n            Next\n        Else\n            Console.WriteLine(\"File not found.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a tool that reads a sequence of numbers and prints if it is strictly increasing.",
    "code": "```vb\nModule Module1\n\n    Sub Main()\n        Console.WriteLine(\"Enter numbers separated by commas:\")\n        Dim input As String = Console.ReadLine()\n        Dim numbers() As String = input.Split(\",\"c)\n        Dim isStrictlyIncreasing As Boolean = True\n        Dim prevNumber As Integer = Integer.MinValue\n\n        For Each strNum As String In numbers\n            Dim num As Integer\n            If Integer.TryParse(strNum.Trim(), num) Then\n                If num <= prevNumber Then\n                    isStrictlyIncreasing = False\n                    Exit For\n                End If\n                prevNumber = num\n            Else\n                Console.WriteLine(\"Invalid input.\")\n                Exit Sub\n            End If\n        Next\n\n        If isStrictlyIncreasing Then\n            Console.WriteLine(\"The sequence is strictly increasing.\")\n        Else\n            Console.WriteLine(\"The sequence is not strictly increasing.\")\n        End If\n    End Sub\n\nEnd Module\n```"
  },
  {
    "task": "Design a program that reads a list of products and prints them grouped by category.",
    "code": "```vb\nImports System.IO\n\nModule Program\n    Sub Main()\n        Dim products As String() = File.ReadAllLines(\"products.txt\")\n        Dim categoryGroups = From line In products\n                             Let parts = line.Split(\",\"c)\n                             Group By Category = parts(1) Into Group\n                             Select New With {Key .Category, Key .Products = Group}\n\n        For Each group In categoryGroups\n            Console.WriteLine(\"Category: \" & group.Category)\n            For Each product In group.Products\n                Console.WriteLine(\"  - \" & product.Split(\",\"c)(0))\n            Next\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a script that reads a sentence and prints it with alternating word capitalization.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Console.WriteLine(\"Enter a sentence:\")\n        Dim input As String = Console.ReadLine()\n        Dim words() As String = input.Split(\" \"c)\n        For i As Integer = 0 To words.Length - 1\n            If i Mod 2 = 0 Then\n                words(i) = words(i).ToUpper()\n            Else\n                words(i) = words(i).ToLower()\n            End If\n        Next\n        Dim result As String = String.Join(\" \", words)\n        Console.WriteLine(result)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a program that reads a list of grades and prints the highest and lowest grade.",
    "code": "```vb\nModule Program\n    Sub Main()\n        Dim grades As New List(Of Integer)()\n\n        Console.WriteLine(\"Enter grades separated by space:\")\n        Dim input As String = Console.ReadLine()\n        Dim gradeStrings() As String = input.Split(\" \"c)\n\n        For Each gradeString In gradeStrings\n            Dim grade As Integer\n            If Integer.TryParse(gradeString, grade) Then\n                grades.Add(grade)\n            End If\n        Next\n\n        If grades.Count > 0 Then\n            Dim highest As Integer = grades.Max()\n            Dim lowest As Integer = grades.Min()\n            Console.WriteLine($\"Highest grade: {highest}\")\n            Console.WriteLine($\"Lowest grade: {lowest}\")\n        Else\n            Console.WriteLine(\"No valid grades entered.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Build a tool that reads a text and prints the number of sentences.",
    "code": "```vb\nImports System.IO\n\nModule SentenceCounter\n    Sub Main()\n        Console.WriteLine(\"Enter the file path:\")\n        Dim filePath As String = Console.ReadLine()\n\n        If File.Exists(filePath) Then\n            Dim text As String = File.ReadAllText(filePath)\n            Dim sentenceCount As Integer = CountSentences(text)\n            Console.WriteLine(\"Number of sentences: \" & sentenceCount)\n        Else\n            Console.WriteLine(\"File does not exist.\")\n        End If\n    End Sub\n\n    Function CountSentences(ByVal text As String) As Integer\n        Dim sentenceEndings() As Char = {\".\", \"!\", \"?\"}\n        Dim sentences() As String = text.Split(sentenceEndings, StringSplitOptions.RemoveEmptyEntries)\n        Return sentences.Length\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Implement a program that reads a list of integers and prints the sum of all odd numbers.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim input As String\n        Dim numbers As Integer()\n        Dim sumOfOdds As Integer = 0\n\n        Console.WriteLine(\"Enter a list of integers separated by spaces:\")\n        input = Console.ReadLine()\n        numbers = Array.ConvertAll(input.Split(\" \"c), Function(s) Integer.Parse(s))\n\n        For Each num As Integer In numbers\n            If num Mod 2 <> 0 Then\n                sumOfOdds += num\n            End If\n        Next\n\n        Console.WriteLine(\"Sum of odd numbers: \" & sumOfOdds)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a script that reads a text and prints the shortest sentence.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim filePath As String = \"input.txt\"\n        Dim text As String = System.IO.File.ReadAllText(filePath)\n        Dim sentences As String() = text.Split(New Char() {\".\"c, \"!\"c, \"?\"c}, StringSplitOptions.RemoveEmptyEntries)\n        Dim shortestSentence As String = sentences.OrderBy(Function(s) s.Length).First().Trim()\n        Console.WriteLine(shortestSentence)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a program that reads a list of dictionaries and prints them sorted by a specific key.",
    "code": "```vb\nImports System\nImports System.Collections.Generic\nImports System.IO\n\nModule Program\n    Sub Main()\n        Dim dictionaries As New List(Of Dictionary(Of String, String)) From {\n            New Dictionary(Of String, String) From {{\"key\", \"value1\"}, {\"name\", \"Alice\"}},\n            New Dictionary(Of String, String) From {{\"key\", \"value2\"}, {\"name\", \"Bob\"}},\n            New Dictionary(Of String, String) From {{\"key\", \"value3\"}, {\"name\", \"Charlie\"}}\n        }\n\n        Dim sortedDictionaries = dictionaries.OrderBy(Function(d) d(\"name\")).ToList()\n\n        For Each dict As Dictionary(Of String, String) In sortedDictionaries\n            For Each kvp As KeyValuePair(Of String, String) In dict\n                Console.WriteLine(\"{0}: {1}\", kvp.Key, kvp.Value)\n            Next\n            Console.WriteLine()\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a tool that reads a sequence of strings and prints the common prefix.",
    "code": "```vb\nImports System\nImports System.IO\n\nModule Module1\n    Sub Main()\n        Dim inputStrings As New List(Of String)()\n        Console.WriteLine(\"Enter strings (type 'end' to finish):\")\n        \n        While True\n            Dim line As String = Console.ReadLine()\n            If line.ToLower() = \"end\" Then Exit While\n            inputStrings.Add(line)\n        End While\n\n        If inputStrings.Count = 0 Then\n            Console.WriteLine(\"No common prefix.\")\n            Return\n        End If\n\n        Dim commonPrefix As String = inputStrings(0)\n\n        For Each str As String In inputStrings\n            Dim j As Integer = 0\n            While j < commonPrefix.Length AndAlso j < str.Length AndAlso commonPrefix(j) = str(j)\n                j += 1\n            End While\n            commonPrefix = commonPrefix.Substring(0, j)\n            If commonPrefix.Length = 0 Then Exit For\n        Next\n\n        Console.WriteLine(\"Common prefix: \" & commonPrefix)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a program that reads a number and prints all of its divisors.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Console.Write(\"Enter a number: \")\n        Dim input As String = Console.ReadLine()\n        Dim number As Integer\n        If Integer.TryParse(input, number) Then\n            Console.WriteLine(\"Divisors of \" & number & \":\")\n            For i As Integer = 1 To number\n                If number Mod i = 0 Then\n                    Console.WriteLine(i)\n                End If\n            Next\n        Else\n            Console.WriteLine(\"Invalid input. Please enter a valid number.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a script that reads a text and prints each word with its length.",
    "code": "```vb\nImports System.IO\n\nModule Module1\n    Sub Main()\n        Dim inputText As String = File.ReadAllText(\"input.txt\")\n        Dim words As String() = inputText.Split(New Char() {\" \"c, vbTab, vbCrLf, vbNewLine}, StringSplitOptions.RemoveEmptyEntries)\n\n        For Each word In words\n            Console.WriteLine($\"{word} {word.Length}\")\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Build a program that reads a list of colors and prints them in a rainbow order.",
    "code": "```vb\nImports System.IO\n\nModule RainbowColors\n    Sub Main()\n        Dim colors As New List(Of String)\n        Dim rainbowOrder As String() = {\"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"indigo\", \"violet\"}\n\n        Console.WriteLine(\"Enter colors (type 'end' to finish):\")\n        Do\n            Dim input As String = Console.ReadLine().ToLower()\n            If input = \"end\" Then Exit Do\n            colors.Add(input)\n        Loop\n\n        For Each color In rainbowOrder\n            If colors.Contains(color) Then\n                Console.WriteLine(color)\n            End If\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a tool that reads a list of names and prints them with their initials.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Console.WriteLine(\"Enter the list of names, separated by commas:\")\n        Dim input As String = Console.ReadLine()\n        Dim names As String() = input.Split(\",\"c)\n        \n        For Each name As String In names\n            Dim trimmedName As String = name.Trim()\n            Dim initials As String = GetInitials(trimmedName)\n            Console.WriteLine(trimmedName & \" - \" & initials)\n        Next\n    End Sub\n\n    Function GetInitials(ByVal fullName As String) As String\n        Dim initials As String = \"\"\n        Dim nameParts As String() = fullName.Split(\" \"c)\n        \n        For Each part As String In nameParts\n            If part.Length > 0 Then\n                initials &= part(0)\n            End If\n        Next\n        \n        Return initials.ToUpper()\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Write a program that reads a series of coordinates and prints the center point.",
    "code": "```vb\nImports System\nImports System.IO\n\nModule Program\n    Sub Main()\n        Dim input As String\n        Dim coordinates As New List(Of Tuple(Of Double, Double))\n        Console.WriteLine(\"Enter coordinates (x y), one per line. Type 'end' to finish:\")\n\n        Do\n            input = Console.ReadLine()\n            If input.ToLower() = \"end\" Then Exit Do\n            Dim parts = input.Split(\" \"c)\n            If parts.Length = 2 Then\n                Dim x As Double\n                Dim y As Double\n                If Double.TryParse(parts(0), x) AndAlso Double.TryParse(parts(1), y) Then\n                    coordinates.Add(Tuple.Create(x, y))\n                End If\n            End If\n        Loop\n\n        If coordinates.Count > 0 Then\n            Dim sumX As Double = 0\n            Dim sumY As Double = 0\n\n            For Each coordinate In coordinates\n                sumX += coordinate.Item1\n                sumY += coordinate.Item2\n            Next\n\n            Dim centerX As Double = sumX / coordinates.Count\n            Dim centerY As Double = sumY / coordinates.Count\n            Console.WriteLine(\"Center Point: (\" & centerX & \", \" & centerY & \")\")\n        Else\n            Console.WriteLine(\"No coordinates entered.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a script that reads a sentence and prints it with each vowel replaced by its uppercase form.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Console.WriteLine(\"Enter a sentence:\")\n        Dim input As String = Console.ReadLine()\n        Dim result As String = ReplaceVowelsWithUppercase(input)\n        Console.WriteLine(\"Modified sentence:\")\n        Console.WriteLine(result)\n    End Sub\n\n    Function ReplaceVowelsWithUppercase(ByVal sentence As String) As String\n        Dim vowels As String = \"aeiou\"\n        Dim result As New System.Text.StringBuilder(sentence.Length)\n        For Each ch As Char In sentence\n            If vowels.Contains(Char.ToLower(ch)) Then\n                result.Append(Char.ToUpper(ch))\n            Else\n                result.Append(ch)\n            End If\n        Next\n        Return result.ToString()\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Develop a tool that reads a mathematical expression and evaluates its result.",
    "code": "```vb\nImports System\nImports System.Data\n\nModule MathEvaluator\n    Sub Main()\n        Console.WriteLine(\"Enter a mathematical expression:\")\n        Dim input As String = Console.ReadLine()\n        Try\n            Dim result As Double = EvaluateExpression(input)\n            Console.WriteLine(\"Result: \" & result)\n        Catch ex As Exception\n            Console.WriteLine(\"Error evaluating expression: \" & ex.Message)\n        End Try\n    End Sub\n\n    Function EvaluateExpression(expression As String) As Double\n        Dim dataTable As New DataTable()\n        Return Convert.ToDouble(dataTable.Compute(expression, String.Empty))\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Design a program that reads a text and prints the first three words.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim inputText As String = Console.ReadLine()\n        Dim words() As String = inputText.Split(\" \"c)\n        For i As Integer = 0 To Math.Min(words.Length, 3) - 1\n            Console.WriteLine(words(i))\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a script that reads a list of numbers and prints them without duplicates.",
    "code": "```vb\nImports System\nImports System.IO\nImports System.Collections.Generic\n\nModule Module1\n    Sub Main()\n        Dim inputNumbers As New List(Of Integer)\n        Dim uniqueNumbers As New HashSet(Of Integer)\n\n        Console.WriteLine(\"Enter numbers separated by spaces:\")\n        Dim input As String = Console.ReadLine()\n        Dim numbers As String() = input.Split(\" \"c)\n\n        For Each number As String In numbers\n            Dim num As Integer\n            If Integer.TryParse(number, num) Then\n                inputNumbers.Add(num)\n            End If\n        Next\n\n        For Each number As Integer In inputNumbers\n            uniqueNumbers.Add(number)\n        Next\n\n        Console.WriteLine(\"Unique numbers:\")\n        For Each number As Integer In uniqueNumbers\n            Console.WriteLine(number)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a program that reads a string and prints it with spaces between each character.",
    "code": "```vb\nModule Program\n    Sub Main()\n        Console.WriteLine(\"Enter a string:\")\n        Dim input As String = Console.ReadLine()\n        Dim result As String = String.Join(\" \", input.ToCharArray())\n        Console.WriteLine(result)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Build a tool that reads a list of events with dates and prints them by chronological order.",
    "code": "```vb\nImports System\nImports System.IO\nImports System.Collections.Generic\n\nModule Module1\n    Sub Main()\n        Dim events As New List(Of Tuple(Of DateTime, String))\n\n        ' Read events from a file\n        Using sr As New StreamReader(\"events.txt\")\n            Dim line As String\n            line = sr.ReadLine()\n            While line IsNot Nothing\n                Dim parts() As String = line.Split(\",\"c)\n                Dim eventDate As DateTime = DateTime.Parse(parts(0).Trim())\n                Dim eventName As String = parts(1).Trim()\n                events.Add(New Tuple(Of DateTime, String)(eventDate, eventName))\n                line = sr.ReadLine()\n            End While\n        End Using\n\n        ' Sort events by date\n        events.Sort(Function(e1, e2) e1.Item1.CompareTo(e2.Item1))\n\n        ' Print events in chronological order\n        For Each eventTuple In events\n            Console.WriteLine($\"{eventTuple.Item1.ToShortDateString()}: {eventTuple.Item2}\")\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a program that reads a list of fractions and prints their sum as a reduced fraction.",
    "code": "```vb\nImports System.IO\n\nModule FractionSum\n    Sub Main()\n        Dim input As String = Console.ReadLine()\n        Dim fractions() As String = input.Split(\" \"c)\n        Dim numeratorSum As Integer = 0\n        Dim denominator As Integer = 1\n\n        For Each fraction As String In fractions\n            Dim parts() As String = fraction.Split(\"/\"c)\n            Dim numerator As Integer = Integer.Parse(parts(0))\n            Dim denom As Integer = Integer.Parse(parts(1))\n            numeratorSum = numeratorSum * denom + numerator * denominator\n            denominator *= denom\n        Next\n\n        Dim gcdValue As Integer = GCD(numeratorSum, denominator)\n        numeratorSum \\= gcdValue\n        denominator \\= gcdValue\n\n        Console.WriteLine($\"{numeratorSum}/{denominator}\")\n    End Sub\n\n    Function GCD(ByVal a As Integer, ByVal b As Integer) As Integer\n        While b <> 0\n            Dim temp As Integer = b\n            b = a Mod b\n            a = temp\n        End While\n        Return a\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Write a script that reads a text and prints it with each consonant doubled.",
    "code": "```vb\nImports System.IO\n\nModule Module1\n    Sub Main()\n        Dim input As String = File.ReadAllText(\"input.txt\")\n        Dim output As New StringBuilder()\n\n        For Each ch As Char In input\n            If \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\".Contains(ch) Then\n                output.Append(ch)\n            End If\n            output.Append(ch)\n        Next\n\n        Console.WriteLine(output.ToString())\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a program that reads a number and prints its representation in Roman numerals.",
    "code": "```vb\nModule RomanNumerals\n    Function ToRoman(ByVal number As Integer) As String\n        Dim roman As String = \"\"\n        Dim values() As Integer = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1}\n        Dim numerals() As String = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"}\n        \n        For i As Integer = 0 To values.Length - 1\n            While number >= values(i)\n                roman &= numerals(i)\n                number -= values(i)\n            End While\n        Next\n        Return roman\n    End Function\n\n    Sub Main()\n        Console.Write(\"Enter a number: \")\n        Dim input As String = Console.ReadLine()\n        Dim number As Integer\n        If Integer.TryParse(input, number) AndAlso number > 0 Then\n            Dim roman As String = ToRoman(number)\n            Console.WriteLine(\"Roman numeral: \" & roman)\n        Else\n            Console.WriteLine(\"Invalid input. Please enter a positive integer.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a tool that reads a list of words and prints them with each letter in reverse order.",
    "code": "```vb\nImports System.IO\n\nModule ReverseWords\n    Sub Main()\n        Dim filePath As String = \"words.txt\"\n        If File.Exists(filePath) Then\n            For Each line As String In File.ReadLines(filePath)\n                Dim words As String() = line.Split(\" \"c)\n                For Each word As String In words\n                    Dim reversedWord As String = New String(word.Reverse().ToArray())\n                    Console.Write(reversedWord & \" \")\n                Next\n                Console.WriteLine()\n            Next\n        Else\n            Console.WriteLine(\"File not found.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a program that reads a set of points and prints the one closest to the origin.",
    "code": "```vb\nModule ClosestPoint\n    Sub Main()\n        Dim points As List(Of Tuple(Of Double, Double)) = New List(Of Tuple(Of Double, Double))()\n        Console.WriteLine(\"Enter number of points:\")\n        Dim numPoints As Integer = CInt(Console.ReadLine())\n\n        For i As Integer = 1 To numPoints\n            Console.WriteLine(\"Enter x and y coordinates for point \" & i & \" separated by space:\")\n            Dim input As String = Console.ReadLine()\n            Dim coordinates() As String = input.Split(\" \"c)\n            Dim x As Double = Convert.ToDouble(coordinates(0))\n            Dim y As Double = Convert.ToDouble(coordinates(1))\n            points.Add(Tuple.Create(x, y))\n        Next\n\n        Dim closestPoint As Tuple(Of Double, Double) = Nothing\n        Dim minDistance As Double = Double.MaxValue\n\n        For Each point As Tuple(Of Double, Double) In points\n            Dim distance As Double = Math.Sqrt(point.Item1 ^ 2 + point.Item2 ^ 2)\n            If distance < minDistance Then\n                minDistance = distance\n                closestPoint = point\n            End If\n        Next\n\n        Console.WriteLine(\"The point closest to the origin is (\" & closestPoint.Item1 & \", \" & closestPoint.Item2 & \")\")\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a script that reads a text and prints the frequency of each word.",
    "code": "```vb\nImports System.IO\n\nModule Module1\n    Sub Main()\n        Dim filePath As String = \"input.txt\"\n        Dim text As String = File.ReadAllText(filePath)\n        Dim words() As String = text.Split({\" \"c, vbTab, vbCrLf, vbLf}, StringSplitOptions.RemoveEmptyEntries)\n        Dim frequency As New Dictionary(Of String, Integer)\n\n        For Each word As String In words\n            word = word.ToLower()\n            If frequency.ContainsKey(word) Then\n                frequency(word) += 1\n            Else\n                frequency(word) = 1\n            End If\n        Next\n\n        For Each kvp As KeyValuePair(Of String, Integer) In frequency\n            Console.WriteLine($\"{kvp.Key}: {kvp.Value}\")\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Build a program that reads a list of integers and prints the second smallest.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim input As String = Console.ReadLine()\n        Dim numbers As List(Of Integer) = input.Split(\" \"c).Select(Function(x) Int32.Parse(x)).ToList()\n        numbers.Sort()\n        Dim secondSmallest As Integer = numbers.Distinct().Skip(1).First()\n        Console.WriteLine(secondSmallest)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a tool that reads a string and prints all its substrings.",
    "code": "```vb\nModule SubstringTool\n    Sub Main()\n        Console.WriteLine(\"Enter a string:\")\n        Dim input As String = Console.ReadLine()\n        PrintSubstrings(input)\n    End Sub\n\n    Sub PrintSubstrings(ByVal str As String)\n        For i As Integer = 0 To str.Length - 1\n            For j As Integer = 1 To str.Length - i\n                Console.WriteLine(str.Substring(i, j))\n            Next\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a program that reads a number and generates a random number up to that number.",
    "code": "```vb\nImports System\n\nModule Program\n    Sub Main()\n        Dim input As String\n        Dim maxNumber As Integer\n        Dim randomNumber As Integer\n        Dim rand As New Random()\n\n        Console.Write(\"Enter a number: \")\n        input = Console.ReadLine()\n        If Integer.TryParse(input, maxNumber) Then\n            randomNumber = rand.Next(0, maxNumber + 1)\n            Console.WriteLine(\"Random number: \" & randomNumber)\n        Else\n            Console.WriteLine(\"Invalid input.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a script that reads a sentence and prints it with each word reversed.",
    "code": "```vb\nImports System.IO\n\nModule Module1\n    Sub Main()\n        Dim input As String = Console.ReadLine()\n        Dim words As String() = input.Split(\" \"c)\n        For Each word As String In words\n            Dim reversedWord As String = New String(word.Reverse().ToArray())\n            Console.Write(reversedWord & \" \")\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a tool that reads a text and prints it with each sentence on a new line.",
    "code": "```vb\nImports System.IO\n\nModule SentenceFormatter\n    Sub Main()\n        Dim inputText As String = File.ReadAllText(\"input.txt\")\n        Dim sentences() As String = inputText.Split(New Char() {\".\"c, \"!\"c, \"?\"c}, StringSplitOptions.RemoveEmptyEntries)\n        For Each sentence In sentences\n            Console.WriteLine(sentence.Trim() & \".\")\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a program that reads a list of numbers and prints the product of all negative numbers.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim input As String\n        Dim numbers() As String\n        Dim product As Integer = 1\n        Dim hasNegative As Boolean = False\n\n        Console.WriteLine(\"Enter a list of numbers separated by spaces:\")\n        input = Console.ReadLine()\n        numbers = input.Split(\" \"c)\n\n        For Each numberStr As String In numbers\n            Dim number As Integer\n            If Integer.TryParse(numberStr, number) AndAlso number < 0 Then\n                product *= number\n                hasNegative = True\n            End If\n        Next\n\n        If hasNegative Then\n            Console.WriteLine(\"Product of all negative numbers: \" & product)\n        Else\n            Console.WriteLine(\"No negative numbers found.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a script that reads a dictionary and prints the keys and values in sorted order.",
    "code": "```vb\nImports System\nImports System.Collections.Generic\n\nModule Module1\n    Sub Main()\n        Dim dict As New Dictionary(Of String, String) From {\n            {\"apple\", \"fruit\"},\n            {\"carrot\", \"vegetable\"},\n            {\"banana\", \"fruit\"}\n        }\n        \n        For Each key In (From k In dict.Keys Order By k)\n            Console.WriteLine(\"Key: \" & key & \", Value: \" & dict(key))\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a program that reads a text and prints the number of unique words.",
    "code": "```vb\nImports System.IO\n\nModule Program\n    Sub Main()\n        Dim filePath As String = \"input.txt\"\n        Dim text As String = File.ReadAllText(filePath)\n        Dim words() As String = text.Split({\" \"c, vbTab, vbCr, vbLf}, StringSplitOptions.RemoveEmptyEntries)\n        Dim uniqueWords As HashSet(Of String) = New HashSet(Of String)(words, StringComparer.OrdinalIgnoreCase)\n        Console.WriteLine(\"Number of unique words: \" & uniqueWords.Count)\n    End Sub\nEnd Module\n```"
  }
]