[
  {
    "task": "Create a function that calculates the sum of two numbers and returns the result.",
    "code": "```vb\nFunction CalculateSum(ByVal num1 As Double, ByVal num2 As Double) As Double\n    Return num1 + num2\nEnd Function\n```"
  },
  {
    "task": "Design a function that takes a string and returns its length.",
    "code": "```vb\nFunction StringLength(inputString As String) As Integer\n    Return inputString.Length\nEnd Function\n```"
  },
  {
    "task": "Write a function that checks if a number is prime and returns a boolean value.",
    "code": "```vb\nFunction IsPrime(ByVal number As Integer) As Boolean\n    If number <= 1 Then\n        Return False\n    End If\n    For i As Integer = 2 To Math.Sqrt(number)\n        If number Mod i = 0 Then\n            Return False\n        End If\n    Next\n    Return True\nEnd Function\n```"
  },
  {
    "task": "Implement a function that returns the highest value in a list of integers.",
    "code": "```vb\nFunction GetHighestValue(ByVal numbers As List(Of Integer)) As Integer\n    Dim highest As Integer = Integer.MinValue\n    For Each number In numbers\n        If number > highest Then\n            highest = number\n        End If\n    Next\n    Return highest\nEnd Function\n```"
  },
  {
    "task": "Create a function that accepts a list of words and returns the longest word.",
    "code": "```vb\nFunction LongestWord(words As List(Of String)) As String\n    Dim longest As String = \"\"\n    For Each word As String In words\n        If word.Length > longest.Length Then\n            longest = word\n        End If\n    Next\n    Return longest\nEnd Function\n```"
  },
  {
    "task": "Write a function that takes a temperature in Celsius and returns the equivalent in Fahrenheit.",
    "code": "```vb\nFunction CelsiusToFahrenheit(ByVal celsius As Double) As Double\n    Return (celsius * 9 / 5) + 32\nEnd Function\n```"
  },
  {
    "task": "Develop a function that returns the factorial of a given number.",
    "code": "```vb\nFunction Factorial(ByVal n As Integer) As Long\n    If n = 0 Then\n        Return 1\n    Else\n        Return n * Factorial(n - 1)\n    End If\nEnd Function\n```"
  },
  {
    "task": "Implement a function that receives a date and returns the day of the week.",
    "code": "```vb\nFunction GetDayOfWeek(ByVal inputDate As Date) As String\n    Return inputDate.DayOfWeek.ToString()\nEnd Function\n```"
  },
  {
    "task": "Write a function that calculates the area of a circle given its radius and returns the value.",
    "code": "```vb\nFunction CalculateCircleArea(radius As Double) As Double\n    Return Math.PI * radius * radius\nEnd Function\n```"
  },
  {
    "task": "Create a function that converts a string to uppercase and returns the modified string.",
    "code": "```vb\nFunction ConvertToUpper(ByVal inputString As String) As String\n    Return inputString.ToUpper()\nEnd Function\n```"
  },
  {
    "task": "Design a function that returns the reverse of a given list.",
    "code": "```vb\nFunction ReverseList(ByVal inputList As List(Of Integer)) As List(Of Integer)\n    Dim reversedList As New List(Of Integer)\n    For i As Integer = inputList.Count - 1 To 0 Step -1\n        reversedList.Add(inputList(i))\n    Next\n    Return reversedList\nEnd Function\n```"
  },
  {
    "task": "Implement a function that accepts a string and returns a dictionary with character frequencies.",
    "code": "```vb\nFunction CharFrequencies(ByVal input As String) As Dictionary(Of Char, Integer)\n    Dim frequencyDict As New Dictionary(Of Char, Integer)()\n    For Each ch As Char In input\n        If frequencyDict.ContainsKey(ch) Then\n            frequencyDict(ch) += 1\n        Else\n            frequencyDict(ch) = 1\n        End If\n    Next\n    Return frequencyDict\nEnd Function\n```"
  },
  {
    "task": "Write a function that returns the first non-repeating character in a string.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim result As Char = FirstNonRepeatingChar(\"swiss\")\n        Console.WriteLine(result)\n    End Sub\n\n    Function FirstNonRepeatingChar(input As String) As Char\n        Dim charCount As New Dictionary(Of Char, Integer)\n\n        For Each ch As Char In input\n            If charCount.ContainsKey(ch) Then\n                charCount(ch) += 1\n            Else\n                charCount(ch) = 1\n            End If\n        Next\n\n        For Each ch As Char In input\n            If charCount(ch) = 1 Then\n                Return ch\n            End If\n        Next\n\n        Return Nothing\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Create a function that takes a list of numbers and returns a new list with only even numbers.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers As New List(Of Integer) From {1, 2, 3, 4, 5, 6}\n        Dim evenNumbers As List(Of Integer) = GetEvenNumbers(numbers)\n        For Each num In evenNumbers\n            Console.WriteLine(num)\n        Next\n    End Sub\n\n    Function GetEvenNumbers(nums As List(Of Integer)) As List(Of Integer)\n        Dim evenNums As New List(Of Integer)\n        For Each num In nums\n            If num Mod 2 = 0 Then\n                evenNums.Add(num)\n            End If\n        Next\n        Return evenNums\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Develop a function that receives a sentence and returns the word count.",
    "code": "```vb\nFunction WordCount(ByVal sentence As String) As Integer\n    If String.IsNullOrWhiteSpace(sentence) Then\n        Return 0\n    End If\n    Dim words() As String = sentence.Split(New Char() {\" \"c}, StringSplitOptions.RemoveEmptyEntries)\n    Return words.Length\nEnd Function\n```"
  },
  {
    "task": "Implement a function that returns the smallest element in an array.",
    "code": "```vb\nFunction FindSmallestElement(arr() As Integer) As Integer\n    If arr.Length = 0 Then\n        Throw New ArgumentException(\"Array cannot be empty\")\n    End If\n    Dim smallest As Integer = arr(0)\n    For Each num As Integer In arr\n        If num < smallest Then\n            smallest = num\n        End If\n    Next\n    Return smallest\nEnd Function\n```"
  },
  {
    "task": "Write a function that takes two strings and returns true if they are anagrams.",
    "code": "```vb\nFunction AreAnagrams(str1 As String, str2 As String) As Boolean\n    Dim arr1() As Char = str1.ToLower().ToCharArray()\n    Dim arr2() As Char = str2.ToLower().ToCharArray()\n    Array.Sort(arr1)\n    Array.Sort(arr2)\n    Return New String(arr1) = New String(arr2)\nEnd Function\n```"
  },
  {
    "task": "Create a function that accepts an integer and returns a list of its divisors.",
    "code": "```vb\nFunction GetDivisors(n As Integer) As List(Of Integer)\n    Dim divisors As New List(Of Integer)\n    For i As Integer = 1 To n\n        If n Mod i = 0 Then\n            divisors.Add(i)\n        End If\n    Next\n    Return divisors\nEnd Function\n```"
  },
  {
    "task": "Design a function that returns the square root of a given number.",
    "code": "```vb\nFunction GetSquareRoot(number As Double) As Double\n    GetSquareRoot = Math.Sqrt(number)\nEnd Function\n```"
  },
  {
    "task": "Implement a function that accepts a list and returns it sorted in ascending order.",
    "code": "```vb\nFunction SortList(ByVal inputList As List(Of Integer)) As List(Of Integer)\n    inputList.Sort()\n    Return inputList\nEnd Function\n```"
  },
  {
    "task": "Write a function that checks whether a given year is a leap year and returns a boolean.",
    "code": "```vb\nFunction IsLeapYear(year As Integer) As Boolean\n    If (year Mod 4 = 0 And year Mod 100 <> 0) Or (year Mod 400 = 0) Then\n        Return True\n    Else\n        Return False\n    End If\nEnd Function\n```"
  },
  {
    "task": "Create a function that receives a list of numbers and returns their average.",
    "code": "```vb\nFunction CalculateAverage(numbers As List(Of Double)) As Double\n    If numbers Is Nothing OrElse numbers.Count = 0 Then\n        Return 0\n    End If\n    Dim sum As Double = 0\n    For Each number As Double In numbers\n        sum += number\n    Next\n    Return sum / numbers.Count\nEnd Function\n```"
  },
  {
    "task": "Develop a function that returns the nth Fibonacci number.",
    "code": "```vb\nFunction Fibonacci(n As Integer) As Integer\n    If n <= 0 Then\n        Return 0\n    ElseIf n = 1 Then\n        Return 1\n    Else\n        Return Fibonacci(n - 1) + Fibonacci(n - 2)\n    End If\nEnd Function\n```"
  },
  {
    "task": "Implement a function that accepts a string and returns it with vowels removed.",
    "code": "```vb\nFunction RemoveVowels(input As String) As String\n    Dim vowels As String = \"aeiouAEIOU\"\n    Dim result As String = \"\"\n    For Each ch As Char In input\n        If Not vowels.Contains(ch) Then\n            result &= ch\n        End If\n    Next\n    Return result\nEnd Function\n```"
  },
  {
    "task": "Write a function that takes two dates and returns the number of days between them.",
    "code": "```vb\nFunction DaysBetweenDates(ByVal startDate As Date, ByVal endDate As Date) As Integer\n    Return CInt((endDate - startDate).TotalDays)\nEnd Function\n```"
  },
  {
    "task": "Create a function that returns the last element of a list.",
    "code": "```vb\nFunction LastElement(Of T)(ByVal list As List(Of T)) As T\n    Return list(list.Count - 1)\nEnd Function\n```"
  },
  {
    "task": "Design a function that calculates the GCD of two numbers and returns it.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim result As Integer\n        result = GCD(48, 18)\n        Console.WriteLine(\"The GCD is \" & result)\n    End Sub\n\n    Function GCD(ByVal a As Integer, ByVal b As Integer) As Integer\n        While b <> 0\n            Dim temp As Integer = b\n            b = a Mod b\n            a = temp\n        End While\n        Return a\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Implement a function that takes a list and returns a tuple with the min and max values.",
    "code": "```vb\nFunction MinMax(values As List(Of Integer)) As (Integer, Integer)\n    If values Is Nothing OrElse values.Count = 0 Then\n        Throw New ArgumentException(\"The list cannot be null or empty.\")\n    End If\n\n    Dim minValue As Integer = values(0)\n    Dim maxValue As Integer = values(0)\n\n    For Each value In values\n        If value < minValue Then\n            minValue = value\n        End If\n        If value > maxValue Then\n            maxValue = value\n        End If\n    Next\n\n    Return (minValue, maxValue)\nEnd Function\n```"
  },
  {
    "task": "Write a function that converts a binary string to its decimal representation and returns it.",
    "code": "```vb\nFunction BinaryToDecimal(ByVal binaryString As String) As Integer\n    Dim decimalValue As Integer = 0\n    Dim baseValue As Integer = 1\n    For i As Integer = Len(binaryString) To 1 Step -1\n        If Mid(binaryString, i, 1) = \"1\" Then\n            decimalValue += baseValue\n        End If\n        baseValue *= 2\n    Next\n    Return decimalValue\nEnd Function\n```"
  },
  {
    "task": "Create a function that accepts a dictionary and returns a list of its keys.",
    "code": "```vb\nFunction GetKeys(dict As Dictionary(Of Object, Object)) As List(Of Object)\n    Return dict.Keys.ToList()\nEnd Function\n```"
  },
  {
    "task": "Develop a function that returns the concatenation of two strings.",
    "code": "```vb\nFunction ConcatenateStrings(ByVal str1 As String, ByVal str2 As String) As String\n    Return str1 & str2\nEnd Function\n```"
  },
  {
    "task": "Implement a function that receives a list and returns a new list with duplicates removed.",
    "code": "```vb\nFunction RemoveDuplicates(ByVal inputList As List(Of Integer)) As List(Of Integer)\n    Dim uniqueList As New List(Of Integer)\n    For Each item In inputList\n        If Not uniqueList.Contains(item) Then\n            uniqueList.Add(item)\n        End If\n    Next\n    Return uniqueList\nEnd Function\n```"
  },
  {
    "task": "Write a function that returns the intersection of two lists.",
    "code": "```vb\nFunction Intersection(Of T)(list1 As List(Of T), list2 As List(Of T)) As List(Of T)\n    Return list1.Intersect(list2).ToList()\nEnd Function\n```"
  },
  {
    "task": "Create a function that takes an integer and returns whether it is even or odd as a string.",
    "code": "```vb\nFunction CheckEvenOdd(number As Integer) As String\n    If number Mod 2 = 0 Then\n        Return \"Even\"\n    Else\n        Return \"Odd\"\n    End If\nEnd Function\n```"
  },
  {
    "task": "Design a function that returns the number of vowels in a given string.",
    "code": "```vb\nFunction CountVowels(inputString As String) As Integer\n    Dim vowels As String = \"aeiouAEIOU\"\n    Dim count As Integer = 0\n    For Each ch As Char In inputString\n        If vowels.IndexOf(ch) >= 0 Then\n            count += 1\n        End If\n    Next\n    Return count\nEnd Function\n```"
  },
  {
    "task": "Implement a function that counts the occurrences of a substring within a string and returns it.",
    "code": "```vb\nFunction CountOccurrences(ByVal mainString As String, ByVal subString As String) As Integer\n    Dim count As Integer = 0\n    Dim position As Integer = mainString.IndexOf(subString)\n    \n    While position <> -1\n        count += 1\n        position = mainString.IndexOf(subString, position + subString.Length)\n    End While\n    \n    Return count\nEnd Function\n```"
  },
  {
    "task": "Write a function that accepts a list of numbers and returns them sorted in descending order.",
    "code": "```vb\nFunction SortDescending(numbers As List(Of Integer)) As List(Of Integer)\n    numbers.Sort()\n    numbers.Reverse()\n    Return numbers\nEnd Function\n```"
  },
  {
    "task": "Create a function that returns the median of a list of numbers.",
    "code": "```vb\nFunction Median(numbers As List(Of Double)) As Double\n    numbers.Sort()\n    Dim count As Integer = numbers.Count\n    If count Mod 2 = 0 Then\n        Return (numbers(count \\ 2 - 1) + numbers(count \\ 2)) / 2.0\n    Else\n        Return numbers(count \\ 2)\n    End If\nEnd Function\n```"
  },
  {
    "task": "Develop a function that receives a sentence and returns it with words in reverse order.",
    "code": "```vb\nFunction ReverseWords(ByVal sentence As String) As String\n    Dim words() As String = sentence.Split(\" \"c)\n    Array.Reverse(words)\n    Return String.Join(\" \", words)\nEnd Function\n```"
  },
  {
    "task": "Implement a function that returns the sum of all elements in a matrix.",
    "code": "```vb\nFunction SumMatrix(matrix As Integer(,)) As Integer\n    Dim total As Integer = 0\n    For i As Integer = 0 To matrix.GetLength(0) - 1\n        For j As Integer = 0 To matrix.GetLength(1) - 1\n            total += matrix(i, j)\n        Next\n    Next\n    Return total\nEnd Function\n```"
  },
  {
    "task": "Write a function that accepts a string and returns true if it is a palindrome.",
    "code": "```vb\nFunction IsPalindrome(input As String) As Boolean\n    Dim reversed As String = StrReverse(input)\n    Return String.Compare(input, reversed, True) = 0\nEnd Function\n```"
  },
  {
    "task": "Create a function that takes a number and returns its binary representation as a string.",
    "code": "```vb\nFunction NumberToBinary(ByVal num As Integer) As String\n    Return Convert.ToString(num, 2)\nEnd Function\n```"
  },
  {
    "task": "Design a function that returns the number of words in a paragraph.",
    "code": "```vb\nFunction CountWords(paragraph As String) As Integer\n    Dim trimmedParagraph As String = Trim(paragraph)\n    If trimmedParagraph = \"\" Then\n        Return 0\n    End If\n    Dim words() As String = Split(trimmedParagraph, \" \")\n    Return UBound(words) + 1\nEnd Function\n```"
  },
  {
    "task": "Implement a function that accepts a list and returns the index of its maximum element.",
    "code": "```vb\nFunction IndexOfMaxElement(ByVal numbers As List(Of Integer)) As Integer\n    Dim maxIndex As Integer = 0\n    For i As Integer = 1 To numbers.Count - 1\n        If numbers(i) > numbers(maxIndex) Then\n            maxIndex = i\n        End If\n    Next\n    Return maxIndex\nEnd Function\n```"
  },
  {
    "task": "Write a function that takes a list of grades and returns the highest grade.",
    "code": "```vb\nFunction GetHighestGrade(grades As List(Of Integer)) As Integer\n    Return grades.Max()\nEnd Function\n```"
  },
  {
    "task": "Create a function that returns the product of all positive integers up to a given number.",
    "code": "```vb\nFunction ProductUpTo(ByVal n As Integer) As Long\n    Dim product As Long = 1\n    For i As Integer = 1 To n\n        product *= i\n    Next\n    Return product\nEnd Function\n```"
  },
  {
    "task": "Develop a function that receives a string and returns a new string with spaces replaced by hyphens.",
    "code": "```vb\nFunction ReplaceSpacesWithHyphens(input As String) As String\n    Return input.Replace(\" \", \"-\")\nEnd Function\n```"
  },
  {
    "task": "Implement a function that takes a list of integers and returns their sum.",
    "code": "```vb\nFunction SumIntegers(numbers As List(Of Integer)) As Integer\n    Dim total As Integer = 0\n    For Each number As Integer In numbers\n        total += number\n    Next\n    Return total\nEnd Function\n```"
  },
  {
    "task": "Write a function that checks if a string is a valid email address and returns a boolean.",
    "code": "```vb\nFunction IsValidEmail(email As String) As Boolean\n    Try\n        Dim addr As New System.Net.Mail.MailAddress(email)\n        Return addr.Address = email\n    Catch\n        Return False\n    End Try\nEnd Function\n```"
  },
  {
    "task": "Create a function that returns the decimal equivalent of a hexadecimal string.",
    "code": "```vb\nFunction HexToDecimal(hexString As String) As Integer\n    Return Convert.ToInt32(hexString, 16)\nEnd Function\n```"
  },
  {
    "task": "Design a function that calculates and returns the body mass index based on height and weight.",
    "code": "```vb\nFunction CalculateBMI(weight As Double, height As Double) As Double\n    Return weight / (height * height)\nEnd Function\n```"
  },
  {
    "task": "Implement a function that returns the initials of a person's name given a full name.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim fullName As String = \"John Doe\"\n        Console.WriteLine(GetInitials(fullName))\n    End Sub\n\n    Function GetInitials(ByVal fullName As String) As String\n        Dim initials As String = \"\"\n        Dim nameParts() As String = fullName.Split(\" \"c)\n        For Each part As String In nameParts\n            If Not String.IsNullOrEmpty(part) Then\n                initials &= part(0)\n            End If\n        Next\n        Return initials.ToUpper()\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Write a function that accepts a list of names and returns them sorted alphabetically.",
    "code": "```vb\nFunction SortNames(names As List(Of String)) As List(Of String)\n    names.Sort()\n    Return names\nEnd Function\n```"
  },
  {
    "task": "Create a function that takes a list of integers and returns a list of their squares.",
    "code": "```vb\nFunction SquareList(numbers As List(Of Integer)) As List(Of Integer)\n    Dim result As New List(Of Integer)\n    For Each number In numbers\n        result.Add(number * number)\n    Next\n    Return result\nEnd Function\n```"
  },
  {
    "task": "Develop a function that returns the common elements between two sets.",
    "code": "```vb\nFunction CommonElements(set1 As HashSet(Of Integer), set2 As HashSet(Of Integer)) As HashSet(Of Integer)\n    Dim result As New HashSet(Of Integer)(set1)\n    result.IntersectWith(set2)\n    Return result\nEnd Function\n```"
  },
  {
    "task": "Implement a function that receives a list of strings and returns the shortest string.",
    "code": "```vb\nFunction GetShortestString(ByVal stringList As List(Of String)) As String\n    If stringList Is Nothing OrElse stringList.Count = 0 Then\n        Return String.Empty\n    End If\n\n    Dim shortest As String = stringList(0)\n    For Each str As String In stringList\n        If str.Length < shortest.Length Then\n            shortest = str\n        End If\n    Next\n    Return shortest\nEnd Function\n```"
  },
  {
    "task": "Write a function that returns the sum of digits of a given integer.",
    "code": "```vb\nFunction SumOfDigits(ByVal number As Integer) As Integer\n    Dim sum As Integer = 0\n    While number <> 0\n        sum += Math.Abs(number Mod 10)\n        number \\= 10\n    End While\n    Return sum\nEnd Function\n```"
  },
  {
    "task": "Create a function that takes a matrix and returns its transpose.",
    "code": "```vb\nFunction TransposeMatrix(matrix As Double(,)) As Double(,)\n    Dim rows As Integer = matrix.GetLength(0)\n    Dim cols As Integer = matrix.GetLength(1)\n    Dim transposed(cols - 1, rows - 1) As Double\n    \n    For i As Integer = 0 To rows - 1\n        For j As Integer = 0 To cols - 1\n            transposed(j, i) = matrix(i, j)\n        Next\n    Next\n    \n    Return transposed\nEnd Function\n```"
  },
  {
    "task": "Design a function that returns the percentage of uppercase letters in a string.",
    "code": "```vb\nFunction PercentageUppercase(inputString As String) As Double\n    Dim totalChars As Integer = Len(inputString)\n    If totalChars = 0 Then Return 0.0\n    \n    Dim upperCaseCount As Integer = 0\n    For Each c As Char In inputString\n        If Char.IsUpper(c) Then\n            upperCaseCount += 1\n        End If\n    Next\n    \n    Return (upperCaseCount / totalChars) * 100\nEnd Function\n```"
  },
  {
    "task": "Implement a function that accepts a string and returns it with each word capitalized.",
    "code": "```vb\nFunction CapitalizeWords(inputStr As String) As String\n    Dim words() As String = Split(inputStr)\n    Dim result As String = \"\"\n    For Each word As String In words\n        If word.Length > 0 Then\n            result &= UCase(Left(word, 1)) & LCase(Mid(word, 2)) & \" \"\n        End If\n    Next\n    Return Trim(result)\nEnd Function\n```"
  },
  {
    "task": "Write a function that takes a list and returns the difference between the max and min values.",
    "code": "```vb\nFunction DifferenceMaxMin(values As List(Of Integer)) As Integer\n    If values Is Nothing OrElse values.Count = 0 Then\n        Return 0\n    End If\n    Dim maxValue As Integer = values.Max()\n    Dim minValue As Integer = values.Min()\n    Return maxValue - minValue\nEnd Function\n```"
  },
  {
    "task": "Create a function that returns a list containing the first n prime numbers.",
    "code": "```vb\nFunction FirstNPrimes(n As Integer) As List(Of Integer)\n    Dim primes As New List(Of Integer)\n    Dim candidate As Integer = 2\n\n    While primes.Count < n\n        If IsPrime(candidate) Then\n            primes.Add(candidate)\n        End If\n        candidate += 1\n    End While\n\n    Return primes\nEnd Function\n\nFunction IsPrime(num As Integer) As Boolean\n    If num <= 1 Then Return False\n    If num <= 3 Then Return True\n    If num Mod 2 = 0 Or num Mod 3 = 0 Then Return False\n    Dim i As Integer = 5\n    While i * i <= num\n        If num Mod i = 0 Or num Mod (i + 2) = 0 Then Return False\n        i += 6\n    End While\n    Return True\nEnd Function\n```"
  },
  {
    "task": "Develop a function that receives a dictionary and returns a new dictionary with keys and values swapped.",
    "code": "```vb\nFunction SwapDictionary(ByVal inputDict As Dictionary(Of Object, Object)) As Dictionary(Of Object, Object)\n    Dim outputDict As New Dictionary(Of Object, Object)\n    For Each kvp As KeyValuePair(Of Object, Object) In inputDict\n        outputDict.Add(kvp.Value, kvp.Key)\n    Next\n    Return outputDict\nEnd Function\n```"
  },
  {
    "task": "Implement a function that accepts a string and returns the frequency of each word.",
    "code": "```vb\nFunction WordFrequency(ByVal input As String) As Dictionary(Of String, Integer)\n    Dim wordDict As New Dictionary(Of String, Integer)\n    Dim words() As String = input.Split(New Char() {\" \"c}, StringSplitOptions.RemoveEmptyEntries)\n    \n    For Each word As String In words\n        word = word.ToLower()\n        If wordDict.ContainsKey(word) Then\n            wordDict(word) += 1\n        Else\n            wordDict(word) = 1\n        End If\n    Next\n    \n    Return wordDict\nEnd Function\n```"
  },
  {
    "task": "Write a function that takes two numbers and returns their greatest common divisor.",
    "code": "```vb\nFunction GreatestCommonDivisor(a As Integer, b As Integer) As Integer\n    While b <> 0\n        Dim temp As Integer = b\n        b = a Mod b\n        a = temp\n    End While\n    Return a\nEnd Function\n```"
  },
  {
    "task": "Create a function that returns the number of consonants in a given string.",
    "code": "```vb\nFunction CountConsonants(ByVal inputString As String) As Integer\n    Dim consonants As String = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    Dim count As Integer = 0\n    For Each ch As Char In inputString\n        If consonants.Contains(ch) Then\n            count += 1\n        End If\n    Next\n    Return count\nEnd Function\n```"
  },
  {
    "task": "Design a function that checks if a number is a perfect square and returns a boolean.",
    "code": "```vb\nFunction IsPerfectSquare(num As Integer) As Boolean\n    Dim root As Integer\n    root = Int(Sqrt(num))\n    Return root * root = num\nEnd Function\n```"
  },
  {
    "task": "Implement a function that takes a list of numbers and returns the mode.",
    "code": "```vb\nFunction FindMode(numbers As List(Of Integer)) As Integer\n    Dim frequency As New Dictionary(Of Integer, Integer)\n    For Each num In numbers\n        If frequency.ContainsKey(num) Then\n            frequency(num) += 1\n        Else\n            frequency(num) = 1\n        End If\n    Next\n    Dim maxFrequency As Integer = 0\n    Dim mode As Integer = numbers(0)\n    For Each kvp In frequency\n        If kvp.Value > maxFrequency Then\n            maxFrequency = kvp.Value\n            mode = kvp.Key\n        End If\n    Next\n    Return mode\nEnd Function\n```"
  },
  {
    "task": "Write a function that accepts a string and returns a new string with characters in reverse order.",
    "code": "```vb\nFunction ReverseString(input As String) As String\n    Dim charArray() As Char = input.ToCharArray()\n    Array.Reverse(charArray)\n    Return New String(charArray)\nEnd Function\n```"
  },
  {
    "task": "Create a function that returns the sum of all even numbers in a list.",
    "code": "```vb\nFunction SumOfEvenNumbers(numbers As List(Of Integer)) As Integer\n    Dim sum As Integer = 0\n    For Each number As Integer In numbers\n        If number Mod 2 = 0 Then\n            sum += number\n        End If\n    Next\n    Return sum\nEnd Function\n```"
  },
  {
    "task": "Develop a function that receives two lists and returns their union.",
    "code": "```vb\nFunction UnionOfLists(list1 As List(Of Integer), list2 As List(Of Integer)) As List(Of Integer)\n    Dim result As New List(Of Integer)(list1)\n    For Each item In list2\n        If Not result.Contains(item) Then\n            result.Add(item)\n        End If\n    Next\n    Return result\nEnd Function\n```"
  },
  {
    "task": "Implement a function that takes a string and returns the number of unique characters.",
    "code": "```vb\nFunction CountUniqueCharacters(ByVal input As String) As Integer\n    Dim uniqueChars As New HashSet(Of Char)(input)\n    Return uniqueChars.Count\nEnd Function\n```"
  },
  {
    "task": "Write a function that returns the cube of a given number.",
    "code": "```vb\nFunction Cube(number As Double) As Double\n    Cube = number ^ 3\nEnd Function\n```"
  },
  {
    "task": "Create a function that calculates the power of a number given a base and exponent and returns the result.",
    "code": "```vb\nFunction CalculatePower(ByVal base As Double, ByVal exponent As Double) As Double\n    Return Math.Pow(base, exponent)\nEnd Function\n```"
  },
  {
    "task": "Design a function that accepts a URL and returns its domain name.",
    "code": "```vb\nFunction GetDomainName(ByVal url As String) As String\n    Dim uri As New Uri(url)\n    Return uri.Host\nEnd Function\n```"
  },
  {
    "task": "Implement a function that takes a sentence and returns it with each letter shifted by one in the alphabet.",
    "code": "```vb\nFunction ShiftSentence(sentence As String) As String\n    Dim shifted As String = \"\"\n    For Each c As Char In sentence\n        If Char.IsLetter(c) Then\n            Dim shiftedChar As Char = Chr(Asc(c) + 1)\n            If c = \"z\"c Then\n                shiftedChar = \"a\"c\n            ElseIf c = \"Z\"c Then\n                shiftedChar = \"A\"c\n            End If\n            shifted &= shiftedChar\n        Else\n            shifted &= c\n        End If\n    Next\n    Return shifted\nEnd Function\n```"
  },
  {
    "task": "Write a function that checks if a list is sorted and returns a boolean.",
    "code": "```vb\nFunction IsListSorted(ByVal lst As List(Of Integer)) As Boolean\n    For i As Integer = 0 To lst.Count - 2\n        If lst(i) > lst(i + 1) Then\n            Return False\n        End If\n    Next\n    Return True\nEnd Function\n```"
  },
  {
    "task": "Create a function that returns the longest increasing subsequence in a list of numbers.",
    "code": "```vb\nFunction LongestIncreasingSubsequence(ByVal nums As List(Of Integer)) As List(Of Integer)\n    Dim n As Integer = nums.Count\n    If n = 0 Then\n        Return New List(Of Integer)()\n    End If\n\n    Dim lengths(n - 1) As Integer\n    Dim previous(n - 1) As Integer\n    Dim maxLength As Integer = 0\n    Dim maxIndex As Integer = 0\n\n    For i As Integer = 0 To n - 1\n        lengths(i) = 1\n        previous(i) = -1\n        For j As Integer = 0 To i - 1\n            If nums(j) < nums(i) AndAlso lengths(j) + 1 > lengths(i) Then\n                lengths(i) = lengths(j) + 1\n                previous(i) = j\n            End If\n        Next\n        If lengths(i) > maxLength Then\n            maxLength = lengths(i)\n            maxIndex = i\n        End If\n    Next\n\n    Dim lis As New List(Of Integer)()\n    While maxIndex <> -1\n        lis.Insert(0, nums(maxIndex))\n        maxIndex = previous(maxIndex)\n    End While\n\n    Return lis\nEnd Function\n```"
  },
  {
    "task": "Develop a function that calculates and returns the compound interest for given principal, rate, and time.",
    "code": "```vb\nFunction CalculateCompoundInterest(principal As Double, rate As Double, time As Double) As Double\n    Return principal * (1 + rate) ^ time - principal\nEnd Function\n```"
  },
  {
    "task": "Implement a function that accepts two strings and returns their longest common substring.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim str1 As String = \"example\"\n        Dim str2 As String = \"ample\"\n        Dim result As String = LongestCommonSubstring(str1, str2)\n        Console.WriteLine(\"Longest Common Substring: \" & result)\n    End Sub\n\n    Function LongestCommonSubstring(ByVal s1 As String, ByVal s2 As String) As String\n        Dim m As Integer = s1.Length\n        Dim n As Integer = s2.Length\n        Dim maxLength As Integer = 0\n        Dim endIndex As Integer = 0\n\n        Dim table(m + 1, n + 1) As Integer\n\n        For i As Integer = 1 To m\n            For j As Integer = 1 To n\n                If s1(i - 1) = s2(j - 1) Then\n                    table(i, j) = table(i - 1, j - 1) + 1\n                    If table(i, j) > maxLength Then\n                        maxLength = table(i, j)\n                        endIndex = i\n                    End If\n                End If\n            Next\n        Next\n\n        If maxLength = 0 Then\n            Return \"\"\n        End If\n\n        Return s1.Substring(endIndex - maxLength, maxLength)\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Write a function that takes a number and returns true if it is a palindrome.",
    "code": "```vb\nFunction IsPalindrome(ByVal num As Integer) As Boolean\n    Dim originalStr As String = num.ToString()\n    Dim reversedStr As String = StrReverse(originalStr)\n    Return originalStr = reversedStr\nEnd Function\n```"
  },
  {
    "task": "Create a function that returns the average length of words in a given sentence.",
    "code": "```vb\nFunction AverageWordLength(sentence As String) As Double\n    Dim words() As String = sentence.Split(New Char() {\" \"c}, StringSplitOptions.RemoveEmptyEntries)\n    Dim totalLength As Integer = 0\n    For Each word As String In words\n        totalLength += word.Length\n    Next\n    Return totalLength / words.Length\nEnd Function\n```"
  },
  {
    "task": "Design a function that checks if a string contains only digits and returns a boolean.",
    "code": "```vb\nFunction IsOnlyDigits(inputStr As String) As Boolean\n    For Each ch As Char In inputStr\n        If Not Char.IsDigit(ch) Then\n            Return False\n        End If\n    Next\n    Return True\nEnd Function\n```"
  },
  {
    "task": "Implement a function that receives a list of tuples and returns a list of the first elements.",
    "code": "```vb\nFunction GetFirstElements(Of T)(tupleList As List(Of Tuple(Of T, Object))) As List(Of T)\n    Dim firstElements As New List(Of T)\n    For Each item In tupleList\n        firstElements.Add(item.Item1)\n    Next\n    Return firstElements\nEnd Function\n```"
  },
  {
    "task": "Write a function that takes a year and returns the Chinese zodiac sign for that year.",
    "code": "```vb\nFunction ChineseZodiac(year As Integer) As String\n    Dim signs() As String = {\"Monkey\", \"Rooster\", \"Dog\", \"Pig\", \"Rat\", \"Ox\", \"Tiger\", \"Rabbit\", \"Dragon\", \"Snake\", \"Horse\", \"Goat\"}\n    Dim index As Integer = (year - 1900) Mod 12\n    Return signs(index)\nEnd Function\n```"
  },
  {
    "task": "Create a function that returns the number of trailing zeros in a factorial of a given number.",
    "code": "```vb\nFunction TrailingZerosInFactorial(ByVal n As Integer) As Integer\n    Dim count As Integer = 0\n    Dim powerOf5 As Integer = 5\n    While n >= powerOf5\n        count += n \\ powerOf5\n        powerOf5 *= 5\n    End While\n    Return count\nEnd Function\n```"
  },
  {
    "task": "Develop a function that accepts a list and returns a new list with elements multiplied by their index.",
    "code": "```vb\nFunction MultiplyByIndex(inputList As List(Of Integer)) As List(Of Integer)\n    Dim resultList As New List(Of Integer)\n    For i As Integer = 0 To inputList.Count - 1\n        resultList.Add(inputList(i) * i)\n    Next\n    Return resultList\nEnd Function\n```"
  },
  {
    "task": "Implement a function that receives a string and returns a dictionary of word lengths.",
    "code": "```vb\nFunction WordLengths(ByVal input As String) As Dictionary(Of String, Integer)\n    Dim wordLengthsDict As New Dictionary(Of String, Integer)()\n    Dim words() As String = input.Split(\" \"c)\n    \n    For Each word In words\n        wordLengthsDict(word) = word.Length\n    Next\n    \n    Return wordLengthsDict\nEnd Function\n```"
  },
  {
    "task": "Write a function that takes a list of integers and returns a list of numbers that are divisible by 3.",
    "code": "```vb\nFunction DivisibleByThree(numbers As List(Of Integer)) As List(Of Integer)\n    Dim result As New List(Of Integer)\n    For Each number In numbers\n        If number Mod 3 = 0 Then\n            result.Add(number)\n        End If\n    Next\n    Return result\nEnd Function\n```"
  },
  {
    "task": "Create a function that returns the result of a quadratic equation given its coefficients.",
    "code": "```vb\nFunction QuadraticEquation(a As Double, b As Double, c As Double, x As Double) As Double\n    Return a * x * x + b * x + c\nEnd Function\n```"
  },
  {
    "task": "Design a function that checks if two lists have any elements in common and returns a boolean.",
    "code": "```vb\nFunction HaveCommonElements(list1 As List(Of Integer), list2 As List(Of Integer)) As Boolean\n    For Each item In list1\n        If list2.Contains(item) Then\n            Return True\n        End If\n    Next\n    Return False\nEnd Function\n```"
  },
  {
    "task": "Implement a function that accepts a list and returns the sum of its elements using recursion.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers As List(Of Integer) = New List(Of Integer) From {1, 2, 3, 4, 5}\n        Dim total As Integer = SumList(numbers, numbers.Count)\n        Console.WriteLine(total)\n    End Sub\n\n    Function SumList(ByVal numbers As List(Of Integer), ByVal n As Integer) As Integer\n        If n = 0 Then\n            Return 0\n        End If\n        Return numbers(n - 1) + SumList(numbers, n - 1)\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Write a function that takes a list of numbers and returns the variance.",
    "code": "```vb\nFunction CalculateVariance(numbers As List(Of Double)) As Double\n    Dim n As Integer = numbers.Count\n    If n = 0 Then Return 0\n    Dim mean As Double = numbers.Average()\n    Dim sumOfSquares As Double = 0\n\n    For Each number As Double In numbers\n        sumOfSquares += (number - mean) ^ 2\n    Next\n\n    Return sumOfSquares / n\nEnd Function\n```"
  },
  {
    "task": "Create a function that returns the ASCII value of a given character.",
    "code": "```vb\nFunction GetAsciiValue(ByVal character As Char) As Integer\n    Return Asc(character)\nEnd Function\n```"
  },
  {
    "task": "Develop a function that takes a number and returns the number of bits required for its binary representation.",
    "code": "```vb\nFunction BitsRequired(ByVal number As Integer) As Integer\n    If number = 0 Then\n        Return 1\n    End If\n    Dim bits As Integer = 0\n    While number <> 0\n        bits += 1\n        number \\= 2\n    End While\n    Return bits\nEnd Function\n```"
  }
]