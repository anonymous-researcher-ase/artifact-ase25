[
  {
    "task": "Filter out all even numbers from a list of integers.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers As List(Of Integer) = New List(Of Integer) From {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n        Dim oddNumbers = numbers.Where(Function(n) n Mod 2 <> 0).ToList()\n        For Each number In oddNumbers\n            Console.WriteLine(number)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Select all words from a list that start with the letter 'a'.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim words As List(Of String) = New List(Of String) From {\"apple\", \"banana\", \"apricot\", \"cherry\", \"avocado\"}\n        Dim filteredWords As List(Of String) = words.Where(Function(word) word.StartsWith(\"a\")).ToList()\n        For Each word In filteredWords\n            Console.WriteLine(word)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Find all positive numbers in a collection of integers.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers As Integer() = {1, -2, 3, -4, 5}\n        Dim positiveNumbers = numbers.Where(Function(n) n > 0)\n        For Each number In positiveNumbers\n            Console.WriteLine(number)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Extract all employees who are older than 30 from an employee directory.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim employees = New List(Of Employee) From {\n            New Employee With {.Name = \"Alice\", .Age = 25},\n            New Employee With {.Name = \"Bob\", .Age = 35},\n            New Employee With {.Name = \"Charlie\", .Age = 32},\n            New Employee With {.Name = \"David\", .Age = 28}\n        }\n\n        Dim olderThan30 = employees.Where(Function(e) e.Age > 30).ToList()\n\n        For Each employee In olderThan30\n            Console.WriteLine(employee.Name)\n        Next\n    End Sub\n\n    Class Employee\n        Public Property Name As String\n        Public Property Age As Integer\n    End Class\nEnd Module\n```"
  },
  {
    "task": "List all cities with a population greater than one million from a dataset.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim cities As List(Of City) = GetCities()\n        Dim largeCities = cities.Where(Function(c) c.Population > 1000000)\n        For Each city In largeCities\n            Console.WriteLine(city.Name)\n        Next\n    End Sub\n\n    Function GetCities() As List(Of City)\n        Return New List(Of City) From {\n            New City With {.Name = \"New York\", .Population = 8419000},\n            New City With {.Name = \"Los Angeles\", .Population = 3980000},\n            New City With {.Name = \"Chicago\", .Population = 2716000},\n            New City With {.Name = \"Houston\", .Population = 2328000},\n            New City With {.Name = \"Phoenix\", .Population = 1690000},\n            New City With {.Name = \"Philadelphia\", .Population = 1584000},\n            New City With {.Name = \"San Antonio\", .Population = 1547000},\n            New City With {.Name = \"San Diego\", .Population = 1424000},\n            New City With {.Name = \"Dallas\", .Population = 1341000},\n            New City With {.Name = \"San Jose\", .Population = 1025000}\n        }\n    End Function\n\n    Class City\n        Public Property Name As String\n        Public Property Population As Integer\n    End Class\nEnd Module\n```"
  },
  {
    "task": "Filter out products that are out of stock from a product list.",
    "code": "```vb\nModule Module1\n    Structure Product\n        Public Name As String\n        Public InStock As Boolean\n    End Structure\n\n    Sub Main()\n        Dim products As List(Of Product) = New List(Of Product) From {\n            New Product With {.Name = \"Laptop\", .InStock = True},\n            New Product With {.Name = \"Mouse\", .InStock = False},\n            New Product With {.Name = \"Keyboard\", .InStock = True},\n            New Product With {.Name = \"Monitor\", .InStock = False}\n        }\n\n        Dim inStockProducts = products.Where(Function(p) p.InStock)\n\n        For Each product In inStockProducts\n            Console.WriteLine(product.Name)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Select all students who have passed with a grade above 70 from a list of student scores.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim studentScores As List(Of Integer) = New List(Of Integer) From {85, 67, 90, 45, 76, 88, 54}\n        Dim passedStudents = studentScores.Where(Function(score) score > 70)\n\n        For Each score In passedStudents\n            Console.WriteLine(score)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Identify all strings in an array that contain the substring 'cat'.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim words As String() = {\"caterpillar\", \"dog\", \"concatenate\", \"cat\", \"catalog\", \"bird\"}\n        Dim filteredWords = words.Where(Function(word) word.Contains(\"cat\")).ToArray()\n        For Each word In filteredWords\n            Console.WriteLine(word)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Extract all transactions above $1000 from a financial record.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim transactions As List(Of Double) = New List(Of Double) From {500, 1500, 2000, 750, 1250}\n        Dim filteredTransactions = transactions.Where(Function(amount) amount > 1000).ToList()\n        For Each transaction In filteredTransactions\n            Console.WriteLine(transaction)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Filter out all non-prime numbers from a list of numbers.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers As Integer() = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n        Dim primes = numbers.Where(Function(n) IsPrime(n)).ToList()\n        For Each prime In primes\n            Console.WriteLine(prime)\n        Next\n    End Sub\n\n    Function IsPrime(ByVal number As Integer) As Boolean\n        If number <= 1 Then Return False\n        For i As Integer = 2 To Math.Sqrt(number)\n            If number Mod i = 0 Then Return False\n        Next\n        Return True\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Select all books with more than 300 pages from a library catalog.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim libraryCatalog As List(Of Book) = New List(Of Book) From {\n            New Book With {.Title = \"Book 1\", .Pages = 250},\n            New Book With {.Title = \"Book 2\", .Pages = 350},\n            New Book With {.Title = \"Book 3\", .Pages = 400}\n        }\n\n        Dim booksWithMoreThan300Pages = libraryCatalog.Where(Function(book) book.Pages > 300).ToList()\n\n        For Each book In booksWithMoreThan300Pages\n            Console.WriteLine(book.Title)\n        Next\n    End Sub\n\n    Public Class Book\n        Public Property Title As String\n        Public Property Pages As Integer\n    End Class\nEnd Module\n```"
  },
  {
    "task": "Identify all users who have logged in within the past week from a user database.",
    "code": "```vb\nImports System\nImports System.Collections.Generic\nImports System.Linq\n\nModule Module1\n    Sub Main()\n        Dim users As New List(Of User) From {\n            New User With {.Username = \"user1\", .LastLogin = DateTime.Now.AddDays(-1)},\n            New User With {.Username = \"user2\", .LastLogin = DateTime.Now.AddDays(-10)},\n            New User With {.Username = \"user3\", .LastLogin = DateTime.Now.AddDays(-3)}\n        }\n\n        Dim oneWeekAgo As DateTime = DateTime.Now.AddDays(-7)\n        Dim recentLogins = users.Where(Function(u) u.LastLogin >= oneWeekAgo)\n\n        For Each user In recentLogins\n            Console.WriteLine(user.Username)\n        Next\n    End Sub\n\n    Class User\n        Public Property Username As String\n        Public Property LastLogin As DateTime\n    End Class\nEnd Module\n```"
  },
  {
    "task": "Extract all URLs that contain 'https' from a list of web addresses.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim webAddresses As List(Of String) = New List(Of String) From {\n            \"http://example.com\",\n            \"https://secure.com\",\n            \"ftp://fileserver.com\",\n            \"https://anothersecure.com\"\n        }\n\n        Dim secureUrls = webAddresses.Where(Function(url) url.Contains(\"https\")).ToList()\n\n        For Each url In secureUrls\n            Console.WriteLine(url)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Find all movies released after the year 2000 from a movie database.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim movies As List(Of Movie) = New List(Of Movie) From {\n            New Movie With {.Title = \"Movie1\", .Year = 1999},\n            New Movie With {.Title = \"Movie2\", .Year = 2001},\n            New Movie With {.Title = \"Movie3\", .Year = 2003},\n            New Movie With {.Title = \"Movie4\", .Year = 1995}\n        }\n\n        Dim filteredMovies = movies.Where(Function(movie) movie.Year > 2000)\n\n        For Each movie In filteredMovies\n            Console.WriteLine(movie.Title)\n        Next\n    End Sub\n\n    Public Class Movie\n        Public Property Title As String\n        Public Property Year As Integer\n    End Class\nEnd Module\n```"
  },
  {
    "task": "Select all tasks with a priority level of 'high' from a task management system.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim tasks As List(Of Task) = New List(Of Task) From {\n            New Task With {.Name = \"Task 1\", .Priority = \"high\"},\n            New Task With {.Name = \"Task 2\", .Priority = \"medium\"},\n            New Task With {.Name = \"Task 3\", .Priority = \"low\"},\n            New Task With {.Name = \"Task 4\", .Priority = \"high\"}\n        }\n\n        Dim highPriorityTasks = tasks.Where(Function(t) t.Priority = \"high\")\n\n        For Each task In highPriorityTasks\n            Console.WriteLine(task.Name)\n        Next\n    End Sub\n\n    Public Class Task\n        Public Property Name As String\n        Public Property Priority As String\n    End Class\nEnd Module\n```"
  },
  {
    "task": "Filter out all words longer than five characters from a text document.",
    "code": "```vb\nImports System.IO\nImports System.Linq\n\nModule Module1\n    Sub Main()\n        Dim filePath As String = \"path\\to\\your\\document.txt\"\n        Dim text As String = File.ReadAllText(filePath)\n        Dim filteredWords As IEnumerable(Of String) = text.Split(New Char() {\" \"c, vbCrLf, vbCr, vbLf}, StringSplitOptions.RemoveEmptyEntries).\n                                                           Where(Function(word) word.Length <= 5)\n        Dim result As String = String.Join(\" \", filteredWords)\n        Console.WriteLine(result)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Extract all odd numbers from a sequence of integers.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers As Integer() = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n        Dim oddNumbers = numbers.Where(Function(x) x Mod 2 <> 0)\n        \n        For Each num In oddNumbers\n            Console.WriteLine(num)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Select all files larger than 10MB from a list of files.",
    "code": "```vb\nFunction FilterLargeFiles(files As List(Of String)) As List(Of String)\n    Return files.Where(Function(file) New FileInfo(file).Length > 10 * 1024 * 1024).ToList()\nEnd Function\n```"
  },
  {
    "task": "Identify all events occurring on weekends from an event schedule.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim events As List(Of Event) = New List(Of Event) From {\n            New Event With {.Name = \"Event1\", .Date = New DateTime(2023, 10, 6)},\n            New Event With {.Name = \"Event2\", .Date = New DateTime(2023, 10, 7)},\n            New Event With {.Name = \"Event3\", .Date = New DateTime(2023, 10, 8)},\n            New Event With {.Name = \"Event4\", .Date = New DateTime(2023, 10, 9)}\n        }\n\n        Dim weekendEvents = events.Where(Function(e) e.Date.DayOfWeek = DayOfWeek.Saturday OrElse e.Date.DayOfWeek = DayOfWeek.Sunday)\n\n        For Each e In weekendEvents\n            Console.WriteLine($\"{e.Name} on {e.Date.ToShortDateString()}\")\n        Next\n    End Sub\n\n    Class Event\n        Public Property Name As String\n        Public Property Date As DateTime\n    End Class\nEnd Module\n```"
  },
  {
    "task": "Find all emails from a specific domain in an email list.",
    "code": "```vb\nModule EmailFilter\n    Sub Main()\n        Dim emails As List(Of String) = New List(Of String) From {\n            \"john@example.com\",\n            \"jane@sample.org\",\n            \"doe@example.com\",\n            \"alice@otherdomain.com\"\n        }\n        \n        Dim specificDomain As String = \"@example.com\"\n        \n        Dim filteredEmails = emails.Where(Function(email) email.EndsWith(specificDomain)).ToList()\n        \n        For Each email In filteredEmails\n            Console.WriteLine(email)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Filter out all people not living in a specific city from a contact list.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim contacts As List(Of Contact) = New List(Of Contact) From {\n            New Contact With {.Name = \"Alice\", .City = \"New York\"},\n            New Contact With {.Name = \"Bob\", .City = \"Los Angeles\"},\n            New Contact With {.Name = \"Charlie\", .City = \"New York\"}\n        }\n\n        Dim city As String = \"New York\"\n        Dim filteredContacts = contacts.Where(Function(c) c.City = city).ToList()\n\n        For Each contact In filteredContacts\n            Console.WriteLine(contact.Name & \" from \" & contact.City)\n        Next\n    End Sub\n\n    Public Class Contact\n        Public Property Name As String\n        Public Property City As String\n    End Class\nEnd Module\n```"
  },
  {
    "task": "Select all rectangles with an area greater than 50 from a list of rectangles.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim rectangles As New List(Of Rectangle) From {\n            New Rectangle(5, 11),\n            New Rectangle(3, 15),\n            New Rectangle(8, 6),\n            New Rectangle(10, 5),\n            New Rectangle(4, 12)\n        }\n\n        Dim largeRectangles = rectangles.Where(Function(r) r.Width * r.Height > 50)\n\n        For Each rect In largeRectangles\n            Console.WriteLine($\"Width: {rect.Width}, Height: {rect.Height}\")\n        Next\n    End Sub\nEnd Module\n\nPublic Class Rectangle\n    Public Property Width As Integer\n    Public Property Height As Integer\n\n    Public Sub New(width As Integer, height As Integer)\n        Me.Width = width\n        Me.Height = height\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Extract all elements that are not null from a collection.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim collection As List(Of String) = New List(Of String) From {\"apple\", Nothing, \"banana\", Nothing, \"cherry\"}\n        Dim filteredCollection = collection.Where(Function(x) x IsNot Nothing).ToList()\n\n        For Each item In filteredCollection\n            Console.WriteLine(item)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Identify all registered voters over the age of 18 from a voter registration list.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim voters As List(Of Voter) = New List(Of Voter) From {\n            New Voter With {.Name = \"Alice\", .Age = 22, .Registered = True},\n            New Voter With {.Name = \"Bob\", .Age = 17, .Registered = True},\n            New Voter With {.Name = \"Charlie\", .Age = 19, .Registered = False},\n            New Voter With {.Name = \"Diana\", .Age = 25, .Registered = True}\n        }\n\n        Dim eligibleVoters = voters.Where(Function(v) v.Registered And v.Age > 18)\n\n        For Each voter In eligibleVoters\n            Console.WriteLine(voter.Name)\n        Next\n    End Sub\n\n    Public Class Voter\n        Public Property Name As String\n        Public Property Age As Integer\n        Public Property Registered As Boolean\n    End Class\nEnd Module\n```"
  },
  {
    "task": "Select all cars manufactured after 2015 from a vehicle registry.",
    "code": "```vb\nModule Program\n    Sub Main()\n        Dim vehicles As New List(Of Vehicle) From {\n            New Vehicle With {.Make = \"Toyota\", .Year = 2010},\n            New Vehicle With {.Make = \"Honda\", .Year = 2018},\n            New Vehicle With {.Make = \"Ford\", .Year = 2016},\n            New Vehicle With {.Make = \"Chevrolet\", .Year = 2014}\n        }\n\n        Dim recentCars = vehicles.Where(Function(car) car.Year > 2015)\n\n        For Each car In recentCars\n            Console.WriteLine($\"{car.Make} - {car.Year}\")\n        Next\n    End Sub\n\n    Public Class Vehicle\n        Public Property Make As String\n        Public Property Year As Integer\n    End Class\nEnd Module\n```"
  },
  {
    "task": "Filter out all negative numbers from a dataset of integers.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers As Integer() = {5, -3, 8, -1, 0, 7, -6}\n        Dim positiveNumbers = numbers.Where(Function(n) n >= 0)\n        For Each num In positiveNumbers\n            Console.WriteLine(num)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Extract all characters from a string that are uppercase.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim input As String = \"YourSampleInputString\"\n        Dim result As String = New String(input.Where(Function(c) Char.IsUpper(c)).ToArray())\n        Console.WriteLine(result)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Identify all projects with a deadline within the next month from a project database.",
    "code": "```vb\nImports System\n\nModule Program\n    Sub Main()\n        Dim projects As List(Of Project) = GetProjectsFromDatabase()\n        Dim today As DateTime = DateTime.Now\n        Dim nextMonth As DateTime = today.AddMonths(1)\n        \n        Dim projectsWithDeadlineWithinNextMonth = projects.Where(Function(p) p.Deadline >= today AndAlso p.Deadline < nextMonth).ToList()\n        \n        ' Output or process the filtered projects\n        For Each project In projectsWithDeadlineWithinNextMonth\n            Console.WriteLine($\"Project: {project.Name}, Deadline: {project.Deadline}\")\n        Next\n    End Sub\n\n    Function GetProjectsFromDatabase() As List(Of Project)\n        ' This function should return the list of projects from the database\n        ' Placeholder implementation\n        Return New List(Of Project) From {\n            New Project With {.Name = \"Project A\", .Deadline = DateTime.Now.AddDays(10)},\n            New Project With {.Name = \"Project B\", .Deadline = DateTime.Now.AddDays(40)},\n            New Project With {.Name = \"Project C\", .Deadline = DateTime.Now.AddDays(20)}\n        }\n    End Function\nEnd Module\n\nClass Project\n    Public Property Name As String\n    Public Property Deadline As DateTime\nEnd Class\n```"
  },
  {
    "task": "Select all athletes with a score higher than 90 from a competition result list.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim results As List(Of Athlete) = New List(Of Athlete) From {\n            New Athlete With {.Name = \"John\", .Score = 85},\n            New Athlete With {.Name = \"Jane\", .Score = 92},\n            New Athlete With {.Name = \"Mike\", .Score = 88},\n            New Athlete With {.Name = \"Lucy\", .Score = 95}\n        }\n\n        Dim highScorers = results.Where(Function(athlete) athlete.Score > 90)\n\n        For Each athlete In highScorers\n            Console.WriteLine(athlete.Name)\n        Next\n    End Sub\n\n    Public Class Athlete\n        Public Property Name As String\n        Public Property Score As Integer\n    End Class\nEnd Module\n```"
  },
  {
    "task": "Filter out all strings that do not contain vowels from a list of words.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim words As List(Of String) = New List(Of String) From {\"test\", \"sky\", \"apple\", \"rhythm\", \"orange\"}\n        Dim filteredWords As List(Of String) = words.Where(Function(word) word.Any(Function(c) \"aeiouAEIOU\".Contains(c))).ToList()\n        For Each word In filteredWords\n            Console.WriteLine(word)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Extract all dates that fall on a weekday from a calendar.",
    "code": "```vb\nImports System.Globalization\n\nModule Module1\n    Sub Main()\n        Dim calendar As Date() = {\n            New Date(2023, 10, 14), ' Saturday\n            New Date(2023, 10, 16), ' Monday\n            New Date(2023, 10, 18), ' Wednesday\n            New Date(2023, 10, 22), ' Sunday\n            New Date(2023, 10, 20)  ' Friday\n        }\n\n        Dim weekdays = calendar.Where(Function(date) date.DayOfWeek <> DayOfWeek.Saturday And date.DayOfWeek <> DayOfWeek.Sunday)\n\n        For Each date In weekdays\n            Console.WriteLine(date.ToShortDateString())\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Find all software versions that are stable releases from a list of software versions.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim softwareVersions As List(Of String) = New List(Of String) From {\n            \"1.0.0-alpha\", \"2.0.0-beta\", \"3.0.0\", \"3.1.0-rc\", \"4.0.0\"\n        }\n\n        Dim stableReleases = softwareVersions.Where(Function(version) Not version.Contains(\"-\"))\n\n        For Each version In stableReleases\n            Console.WriteLine(version)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Select all temperatures above freezing from a weather report.",
    "code": "```vb\nModule WeatherFilter\n    Sub Main()\n        Dim temperatures As List(Of Integer) = New List(Of Integer)({-5, 0, 15, 20, -2, 10, 3})\n        Dim aboveFreezing As List(Of Integer) = temperatures.Where(Function(temp) temp > 0).ToList()\n        \n        For Each temp In aboveFreezing\n            Console.WriteLine(temp)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Identify all countries with a GDP per capita above $40,000 from a country dataset.",
    "code": "```vb\nModule Program\n    Sub Main()\n        Dim countries As List(Of Country) = New List(Of Country) From {\n            New Country With {.Name = \"CountryA\", .GDPPerCapita = 45000},\n            New Country With {.Name = \"CountryB\", .GDPPerCapita = 39000},\n            New Country With {.Name = \"CountryC\", .GDPPerCapita = 42000}\n        }\n\n        Dim filteredCountries = countries.Where(Function(c) c.GDPPerCapita > 40000)\n\n        For Each country In filteredCountries\n            Console.WriteLine(country.Name)\n        Next\n    End Sub\n\n    Public Class Country\n        Public Property Name As String\n        Public Property GDPPerCapita As Double\n    End Class\nEnd Module\n```"
  },
  {
    "task": "Filter out all names shorter than four letters from a roster.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim roster As List(Of String) = New List(Of String) From {\"John\", \"Amy\", \"Lee\", \"Sam\", \"Chris\"}\n        Dim filteredRoster As List(Of String) = roster.Where(Function(name) name.Length >= 4).ToList()\n        \n        For Each name In filteredRoster\n            Console.WriteLine(name)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Extract all numbers divisible by five from a sequence.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers As Integer() = {1, 5, 10, 12, 15, 18, 20, 22, 25}\n        Dim divisibleByFive = numbers.Where(Function(n) n Mod 5 = 0)\n        For Each number In divisibleByFive\n            Console.WriteLine(number)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Select all movies with a rating above 4 stars from a film review site.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim movies = New List(Of Movie) From {\n            New Movie With {.Title = \"Movie A\", .Rating = 4.5},\n            New Movie With {.Title = \"Movie B\", .Rating = 3.9},\n            New Movie With {.Title = \"Movie C\", .Rating = 4.8}\n        }\n\n        Dim highRatedMovies = movies.Where(Function(m) m.Rating > 4.0)\n\n        For Each movie In highRatedMovies\n            Console.WriteLine(movie.Title)\n        Next\n    End Sub\n\n    Class Movie\n        Public Property Title As String\n        Public Property Rating As Double\n    End Class\nEnd Module\n```"
  },
  {
    "task": "Find all jobs with a salary above $50,000 from a job listing.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim jobs As List(Of Job) = New List(Of Job) From {\n            New Job With {.Title = \"Developer\", .Salary = 60000},\n            New Job With {.Title = \"Designer\", .Salary = 45000},\n            New Job With {.Title = \"Manager\", .Salary = 75000},\n            New Job With {.Title = \"Intern\", .Salary = 30000}\n        }\n        \n        Dim highSalaryJobs = jobs.Where(Function(job) job.Salary > 50000)\n\n        For Each job In highSalaryJobs\n            Console.WriteLine(job.Title & \" - \" & job.Salary)\n        Next\n    End Sub\n\n    Class Job\n        Public Property Title As String\n        Public Property Salary As Integer\n    End Class\nEnd Module\n```"
  },
  {
    "task": "Filter out all entries without an email address from a contact form submission list.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim contacts As List(Of Dictionary(Of String, String)) = New List(Of Dictionary(Of String, String)) From {\n            New Dictionary(Of String, String) From {{\"Name\", \"Alice\"}, {\"Email\", \"alice@example.com\"}},\n            New Dictionary(Of String, String) From {{\"Name\", \"Bob\"}, {\"Email\", \"\"}},\n            New Dictionary(Of String, String) From {{\"Name\", \"Charlie\"}, {\"Email\", \"charlie@example.com\"}},\n            New Dictionary(Of String, String) From {{\"Name\", \"David\"}, {\"Email\", Nothing}}\n        }\n\n        Dim filteredContacts = contacts.Where(Function(contact) Not String.IsNullOrEmpty(contact(\"Email\"))).ToList()\n\n        For Each contact In filteredContacts\n            Console.WriteLine(\"Name: \" & contact(\"Name\") & \", Email: \" & contact(\"Email\"))\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Identify all animals weighing more than 50kg from a zoo inventory.",
    "code": "```vb\nModule ZooInventory\n    Sub Main()\n        Dim animals As List(Of Animal) = New List(Of Animal) From {\n            New Animal With {.Name = \"Elephant\", .Weight = 5000},\n            New Animal With {.Name = \"Lion\", .Weight = 190},\n            New Animal With {.Name = \"Giraffe\", .Weight = 800},\n            New Animal With {.Name = \"Monkey\", .Weight = 40},\n            New Animal With {.Name = \"Zebra\", .Weight = 300}\n        }\n\n        Dim heavyAnimals = animals.Where(Function(animal) animal.Weight > 50)\n\n        For Each animal In heavyAnimals\n            Console.WriteLine(animal.Name)\n        Next\n    End Sub\n\n    Class Animal\n        Public Property Name As String\n        Public Property Weight As Integer\n    End Class\nEnd Module\n```"
  },
  {
    "task": "Select all songs with a duration longer than three minutes from a playlist.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim playlist As List(Of Song) = New List(Of Song) From {\n            New Song With {.Title = \"Song1\", .Duration = 180},\n            New Song With {.Title = \"Song2\", .Duration = 240},\n            New Song With {.Title = \"Song3\", .Duration = 200}\n        }\n\n        Dim filteredSongs = playlist.Where(Function(song) song.Duration > 180).ToList()\n\n        For Each song In filteredSongs\n            Console.WriteLine(song.Title)\n        Next\n    End Sub\n\n    Class Song\n        Public Property Title As String\n        Public Property Duration As Integer\n    End Class\nEnd Module\n```"
  },
  {
    "task": "Extract all accounts with a balance below zero from a bank statement.",
    "code": "```vb\nModule BankStatement\n    Sub Main()\n        Dim accounts As List(Of Account) = New List(Of Account) From {\n            New Account With {.Name = \"Account1\", .Balance = -100},\n            New Account With {.Name = \"Account2\", .Balance = 200},\n            New Account With {.Name = \"Account3\", .Balance = -50}\n        }\n\n        Dim negativeBalanceAccounts = accounts.Where(Function(account) account.Balance < 0).ToList()\n\n        For Each account In negativeBalanceAccounts\n            Console.WriteLine($\"{account.Name}: {account.Balance}\")\n        Next\n    End Sub\n\n    Class Account\n        Public Property Name As String\n        Public Property Balance As Decimal\n    End Class\nEnd Module\n```"
  },
  {
    "task": "Filter out all non-alphabetic characters from a string of text.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim inputText As String = \"Th1s 1s a te5t str1ng w1th numb3rs!\"\n        Dim filteredText As String = New String(inputText.Where(Function(c) Char.IsLetter(c)).ToArray())\n        Console.WriteLine(filteredText)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Select all participants who scored above average in a competition.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim participants As List(Of KeyValuePair(Of String, Integer)) = New List(Of KeyValuePair(Of String, Integer)) From {\n            New KeyValuePair(Of String, Integer)(\"Alice\", 85),\n            New KeyValuePair(Of String, Integer)(\"Bob\", 75),\n            New KeyValuePair(Of String, Integer)(\"Charlie\", 90),\n            New KeyValuePair(Of String, Integer)(\"David\", 60)\n        }\n\n        Dim averageScore As Double = participants.Average(Function(p) p.Value)\n        Dim aboveAverageParticipants As IEnumerable(Of KeyValuePair(Of String, Integer)) = participants.Where(Function(p) p.Value > averageScore)\n\n        For Each participant In aboveAverageParticipants\n            Console.WriteLine(participant.Key & \" scored \" & participant.Value)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Find all houses priced under $300,000 from a real estate database.",
    "code": "```vb\nModule RealEstateFilter\n    Sub Main()\n        Dim houses As List(Of House) = GetHousesFromDatabase()\n        Dim affordableHouses = houses.Where(Function(house) house.Price < 300000).ToList()\n        ' Output or process the affordableHouses as needed\n    End Sub\n\n    Function GetHousesFromDatabase() As List(Of House)\n        ' Retrieve houses from database\n        Return New List(Of House) From {\n            New House With {.Price = 250000},\n            New House With {.Price = 350000},\n            New House With {.Price = 275000},\n            New House With {.Price = 400000}\n        }\n    End Function\n\n    Class House\n        Public Property Price As Decimal\n    End Class\nEnd Module\n```"
  },
  {
    "task": "Identify all plants that bloom in spring from a botanical catalog.",
    "code": "```vbnet\nModule BotanicalCatalog\n    Sub Main()\n        Dim plants As List(Of Plant) = New List(Of Plant) From {\n            New Plant With {.Name = \"Tulip\", .BloomSeason = \"Spring\"},\n            New Plant With {.Name = \"Rose\", .BloomSeason = \"Summer\"},\n            New Plant With {.Name = \"Daffodil\", .BloomSeason = \"Spring\"},\n            New Plant With {.Name = \"Sunflower\", .BloomSeason = \"Summer\"}\n        }\n\n        Dim springBloomingPlants = plants.Where(Function(plant) plant.BloomSeason = \"Spring\")\n\n        For Each plant In springBloomingPlants\n            Console.WriteLine(plant.Name)\n        Next\n    End Sub\n\n    Public Class Plant\n        Public Property Name As String\n        Public Property BloomSeason As String\n    End Class\nEnd Module\n```"
  },
  {
    "task": "Extract all passwords that are longer than eight characters from a user database.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim passwords As List(Of String) = New List(Of String) From {\n            \"short\",\n            \"longenoughpassword\",\n            \"123456789\",\n            \"pass\",\n            \"anotherlongpassword\"\n        }\n\n        Dim longPasswords = passwords.Where(Function(password) password.Length > 8)\n\n        For Each password In longPasswords\n            Console.WriteLine(password)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Filter out all projects that are not yet started from a project management tool.",
    "code": "```vb\nModule ProjectFilter\n    Sub Main()\n        Dim projects As List(Of Project) = New List(Of Project) From {\n            New Project With {.Name = \"Project A\", .Status = \"Not Started\"},\n            New Project With {.Name = \"Project B\", .Status = \"In Progress\"},\n            New Project With {.Name = \"Project C\", .Status = \"Completed\"}\n        }\n\n        Dim startedProjects = projects.Where(Function(p) p.Status <> \"Not Started\")\n\n        For Each project In startedProjects\n            Console.WriteLine(project.Name & \" - \" & project.Status)\n        Next\n    End Sub\n\n    Class Project\n        Public Property Name As String\n        Public Property Status As String\n    End Class\nEnd Module\n```"
  },
  {
    "task": "Select all days with temperatures exceeding 25\u00b0C from a climate report.",
    "code": "```vb\nModule ClimateReportFilter\n    Sub Main()\n        Dim climateReport As List(Of KeyValuePair(Of String, Integer)) = New List(Of KeyValuePair(Of String, Integer)) From {\n            New KeyValuePair(Of String, Integer)(\"Monday\", 22),\n            New KeyValuePair(Of String, Integer)(\"Tuesday\", 28),\n            New KeyValuePair(Of String, Integer)(\"Wednesday\", 30),\n            New KeyValuePair(Of String, Integer)(\"Thursday\", 24),\n            New KeyValuePair(Of String, Integer)(\"Friday\", 26),\n            New KeyValuePair(Of String, Integer)(\"Saturday\", 21),\n            New KeyValuePair(Of String, Integer)(\"Sunday\", 29)\n        }\n\n        Dim hotDays = climateReport.Where(Function(day) day.Value > 25).Select(Function(day) day.Key)\n\n        For Each day In hotDays\n            Console.WriteLine(day)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Find all recipes that are vegetarian from a cookbook.",
    "code": "```vb\nModule CookbookFilter\n    Sub Main()\n        Dim recipes As List(Of Recipe) = GetCookbookRecipes()\n        Dim vegetarianRecipes As List(Of Recipe) = recipes.Where(Function(r) r.IsVegetarian).ToList()\n        For Each recipe In vegetarianRecipes\n            Console.WriteLine(recipe.Name)\n        Next\n    End Sub\n\n    Function GetCookbookRecipes() As List(Of Recipe)\n        ' Assume this function returns a list of recipes\n        Return New List(Of Recipe) From {\n            New Recipe With {.Name = \"Veggie Pizza\", .IsVegetarian = True},\n            New Recipe With {.Name = \"Chicken Curry\", .IsVegetarian = False},\n            New Recipe With {.Name = \"Salad\", .IsVegetarian = True}\n        }\n    End Function\nEnd Module\n\nClass Recipe\n    Public Property Name As String\n    Public Property IsVegetarian As Boolean\nEnd Class\n```"
  },
  {
    "task": "Identify all articles that mention a specific keyword from a news feed.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim newsFeed As List(Of String) = New List(Of String) From {\n            \"Breaking news: Keyword found in this article!\",\n            \"Another article without the key term.\",\n            \"Keyword appears once again in this news piece.\",\n            \"This article does not have what you are looking for.\"\n        }\n        \n        Dim keyword As String = \"Keyword\"\n        Dim matchingArticles = newsFeed.Where(Function(article) article.Contains(keyword))\n        \n        For Each article In matchingArticles\n            Console.WriteLine(article)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Extract all files with the '.jpg' extension from a directory.",
    "code": "```vb\nImports System.IO\n\nModule Module1\n    Sub Main()\n        Dim directoryPath As String = \"C:\\YourDirectoryPath\"\n        Dim jpgFiles = Directory.EnumerateFiles(directoryPath).Where(Function(file) file.EndsWith(\".jpg\"))\n\n        For Each jpgFile In jpgFiles\n            Console.WriteLine(jpgFile)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Filter out all transactions that are not categorized from a financial statement.",
    "code": "```vb\nModule Program\n    Sub Main()\n        Dim transactions As List(Of Transaction) = GetTransactions()\n        Dim categorizedTransactions = transactions.Where(Function(t) Not String.IsNullOrEmpty(t.Category)).ToList()\n\n        For Each transaction In categorizedTransactions\n            Console.WriteLine($\"Transaction Id: {transaction.Id}, Amount: {transaction.Amount}, Category: {transaction.Category}\")\n        Next\n    End Sub\n\n    Function GetTransactions() As List(Of Transaction)\n        ' Example data\n        Return New List(Of Transaction) From {\n            New Transaction With {.Id = 1, .Amount = 100, .Category = \"Groceries\"},\n            New Transaction With {.Id = 2, .Amount = 200, .Category = \"\"},\n            New Transaction With {.Id = 3, .Amount = 150, .Category = \"Utilities\"}\n        }\n    End Function\nEnd Module\n\nClass Transaction\n    Public Property Id As Integer\n    Public Property Amount As Decimal\n    Public Property Category As String\nEnd Class\n```"
  },
  {
    "task": "Select all paintings created before 1900 from an art gallery collection.",
    "code": "```vb\nModule ArtGalleryFilter\n    Sub Main()\n        Dim artGallery As New List(Of Painting) From {\n            New Painting(\"Starry Night\", 1889),\n            New Painting(\"The Persistence of Memory\", 1931),\n            New Painting(\"The Last Supper\", 1498),\n            New Painting(\"The Scream\", 1893)\n        }\n\n        Dim paintingsBefore1900 = artGallery.Where(Function(p) p.Year < 1900)\n\n        For Each painting In paintingsBefore1900\n            Console.WriteLine(painting.Title & \" (\" & painting.Year & \")\")\n        Next\n    End Sub\n\n    Class Painting\n        Public Property Title As String\n        Public Property Year As Integer\n\n        Public Sub New(title As String, year As Integer)\n            Me.Title = title\n            Me.Year = year\n        End Sub\n    End Class\nEnd Module\n```"
  },
  {
    "task": "Find all students with perfect attendance from a school record.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim students As List(Of Student) = New List(Of Student) From {\n            New Student With {.Name = \"Alice\", .Attendance = 100},\n            New Student With {.Name = \"Bob\", .Attendance = 95},\n            New Student With {.Name = \"Charlie\", .Attendance = 100}\n        }\n\n        Dim perfectAttendance As List(Of Student) = students.Where(Function(s) s.Attendance = 100).ToList()\n\n        For Each student As Student In perfectAttendance\n            Console.WriteLine(student.Name)\n        Next\n    End Sub\n\n    Public Class Student\n        Public Property Name As String\n        Public Property Attendance As Integer\n    End Class\nEnd Module\n```"
  },
  {
    "task": "Identify all messages sent by a specific user from a chat application.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim messages As List(Of Message) = New List(Of Message) From {\n            New Message(\"user1\", \"Hello!\"),\n            New Message(\"user2\", \"How are you?\"),\n            New Message(\"user1\", \"I'm doing well, thanks!\")\n        }\n        \n        Dim specificUser As String = \"user1\"\n        Dim userMessages = messages.Where(Function(m) m.User = specificUser)\n\n        For Each message In userMessages\n            Console.WriteLine(message.Text)\n        Next\n    End Sub\n\n    Public Class Message\n        Public Property User As String\n        Public Property Text As String\n\n        Public Sub New(user As String, text As String)\n            Me.User = user\n            Me.Text = text\n        End Sub\n    End Class\nEnd Module\n```"
  },
  {
    "task": "Extract all elements greater than 100 from an array of numbers.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers() As Integer = {45, 150, 200, 50, 250, 90, 110}\n        Dim filteredNumbers = numbers.Where(Function(n) n > 100).ToArray()\n        For Each num In filteredNumbers\n            Console.WriteLine(num)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Filter out all words that do not end in 'ed' from a paragraph.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim paragraph As String = \"The dog barked and the cat purred while the wind whispered.\"\n        Dim words As String() = paragraph.Split(\" \"c)\n        Dim filteredWords = words.Where(Function(word) word.EndsWith(\"ed\"))\n        Dim result As String = String.Join(\" \", filteredWords)\n        Console.WriteLine(result)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Select all flights departing before noon from a flight schedule.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim flightSchedule As List(Of Flight) = New List(Of Flight) From {\n            New Flight() With {.FlightNumber = \"AA101\", .DepartureTime = New DateTime(2023, 10, 18, 9, 0, 0)},\n            New Flight() With {.FlightNumber = \"AA102\", .DepartureTime = New DateTime(2023, 10, 18, 15, 0, 0)},\n            New Flight() With {.FlightNumber = \"AA103\", .DepartureTime = New DateTime(2023, 10, 18, 11, 30, 0)}\n        }\n\n        Dim morningFlights = flightSchedule.Where(Function(f) f.DepartureTime.TimeOfDay < New TimeSpan(12, 0, 0))\n\n        For Each flight In morningFlights\n            Console.WriteLine(\"Flight Number: \" & flight.FlightNumber)\n        Next\n    End Sub\n\n    Public Class Flight\n        Public Property FlightNumber As String\n        Public Property DepartureTime As DateTime\n    End Class\nEnd Module\n```"
  },
  {
    "task": "Find all products priced above $20 from an online store inventory.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim products As List(Of Product) = New List(Of Product) From {\n            New Product With {.Name = \"Product1\", .Price = 15},\n            New Product With {.Name = \"Product2\", .Price = 25},\n            New Product With {.Name = \"Product3\", .Price = 30},\n            New Product With {.Name = \"Product4\", .Price = 10}\n        }\n\n        Dim filteredProducts = products.Where(Function(p) p.Price > 20)\n\n        For Each product In filteredProducts\n            Console.WriteLine(product.Name & \" - $\" & product.Price)\n        Next\n    End Sub\n\n    Class Product\n        Public Property Name As String\n        Public Property Price As Decimal\n    End Class\nEnd Module\n```"
  },
  {
    "task": "Identify all sessions longer than one hour from a webinar series.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim sessions As New List(Of TimeSpan) From {\n            New TimeSpan(0, 45, 0),\n            New TimeSpan(1, 15, 0),\n            New TimeSpan(0, 30, 0),\n            New TimeSpan(1, 5, 0),\n            New TimeSpan(2, 0, 0)\n        }\n\n        Dim longSessions = sessions.Where(Function(s) s.TotalMinutes > 60)\n\n        For Each session In longSessions\n            Console.WriteLine(session)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Extract all images with a resolution higher than 1080p from a photo library.",
    "code": "```vb\nModule PhotoLibraryFilter\n    Structure Image\n        Public Property ResolutionWidth As Integer\n        Public Property ResolutionHeight As Integer\n        Public Property FileName As String\n    End Structure\n\n    Function FilterHighResolutionImages(photoLibrary As List(Of Image)) As List(Of Image)\n        Return photoLibrary.Where(Function(img) img.ResolutionWidth > 1920 And img.ResolutionHeight > 1080).ToList()\n    End Function\n\n    Sub Main()\n        Dim photoLibrary As New List(Of Image) From {\n            New Image() With {.ResolutionWidth = 1920, .ResolutionHeight = 1080, .FileName = \"image1.jpg\"},\n            New Image() With {.ResolutionWidth = 2560, .ResolutionHeight = 1440, .FileName = \"image2.jpg\"},\n            New Image() With {.ResolutionWidth = 3840, .ResolutionHeight = 2160, .FileName = \"image3.jpg\"}\n        }\n\n        Dim highResImages = FilterHighResolutionImages(photoLibrary)\n\n        For Each img In highResImages\n            Console.WriteLine(img.FileName)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Filter out all responses that are not 'yes' or 'no' from a survey result.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim surveyResults As String() = {\"yes\", \"no\", \"maybe\", \"yes\", \"no\", \"unsure\"}\n        Dim filteredResults = surveyResults.Where(Function(response) response = \"yes\" Or response = \"no\")\n        \n        For Each result In filteredResults\n            Console.WriteLine(result)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Select all tweets with more than 100 likes from a Twitter feed.",
    "code": "```vb\nImports System.Collections.Generic\n\nModule Module1\n    Sub Main()\n        Dim tweets As New List(Of Tweet) From {\n            New Tweet With {.Text = \"Hello World\", .Likes = 50},\n            New Tweet With {.Text = \"This is a popular tweet\", .Likes = 150},\n            New Tweet With {.Text = \"Another tweet\", .Likes = 200}\n        }\n\n        Dim popularTweets = tweets.Where(Function(t) t.Likes > 100)\n\n        For Each tweet In popularTweets\n            Console.WriteLine(tweet.Text)\n        Next\n    End Sub\n\n    Class Tweet\n        Public Property Text As String\n        Public Property Likes As Integer\n    End Class\nEnd Module\n```"
  },
  {
    "task": "Find all links that are broken from a webpage.",
    "code": "```vb\nImports System.Net\n\nModule Module1\n    Sub Main()\n        Dim webpageUrl As String = \"http://example.com\"\n        Dim links As List(Of String) = ExtractLinks(webpageUrl)\n        Dim brokenLinks As List(Of String) = links.Where(Function(link) IsLinkBroken(link)).ToList()\n        \n        For Each link In brokenLinks\n            Console.WriteLine(link)\n        Next\n    End Sub\n\n    Function ExtractLinks(url As String) As List(Of String)\n        Dim links As New List(Of String)\n        ' Code to extract links from the webpage and add to the links list\n        Return links\n    End Function\n\n    Function IsLinkBroken(url As String) As Boolean\n        Try\n            Dim request As HttpWebRequest = DirectCast(WebRequest.Create(url), HttpWebRequest)\n            request.Method = \"HEAD\"\n            Using response As HttpWebResponse = DirectCast(request.GetResponse(), HttpWebResponse)\n                Return response.StatusCode <> HttpStatusCode.OK\n            End Using\n        Catch\n            Return True\n        End Try\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Identify all machines that are currently offline from a network monitoring tool.",
    "code": "```vb\nModule Program\n    Sub Main()\n        Dim machines As List(Of Machine) = GetNetworkMachines()\n        Dim offlineMachines = machines.Where(Function(m) m.Status = \"Offline\")\n        \n        For Each machine In offlineMachines\n            Console.WriteLine($\"Machine {machine.Name} is offline.\")\n        Next\n    End Sub\n\n    Function GetNetworkMachines() As List(Of Machine)\n        ' This function would normally retrieve the list of machines from a network monitoring tool\n        Return New List(Of Machine) From {\n            New Machine With {.Name = \"Server1\", .Status = \"Online\"},\n            New Machine With {.Name = \"Server2\", .Status = \"Offline\"},\n            New Machine With {.Name = \"Server3\", .Status = \"Online\"},\n            New Machine With {.Name = \"Server4\", .Status = \"Offline\"}\n        }\n    End Function\nEnd Module\n\nClass Machine\n    Public Property Name As String\n    Public Property Status As String\nEnd Class\n```"
  },
  {
    "task": "Extract all invoices with a due date in the current month from an accounting system.",
    "code": "```vb\nImports System\nImports System.Collections.Generic\nImports System.Linq\n\nModule Module1\n    Public Class Invoice\n        Public Property DueDate As DateTime\n    End Class\n\n    Sub Main()\n        Dim invoices As List(Of Invoice) = GetInvoicesFromAccountingSystem()\n        Dim currentMonth As Integer = DateTime.Now.Month\n        Dim currentYear As Integer = DateTime.Now.Year\n\n        Dim currentMonthInvoices = invoices.Where(Function(invoice) invoice.DueDate.Month = currentMonth And invoice.DueDate.Year = currentYear).ToList()\n\n        ' Output or process currentMonthInvoices as needed\n    End Sub\n\n    Function GetInvoicesFromAccountingSystem() As List(Of Invoice)\n        ' Placeholder function - replace with actual implementation\n        Return New List(Of Invoice)()\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Filter out all lines in a file that start with a '#' from a configuration file.",
    "code": "```vb\nImports System.IO\n\nModule Module1\n    Sub Main()\n        Dim inputFile As String = \"config.txt\"\n        Dim outputFile As String = \"filtered_config.txt\"\n\n        Dim lines = File.ReadAllLines(inputFile)\n        Dim filteredLines = lines.Where(Function(line) Not line.TrimStart().StartsWith(\"#\"))\n\n        File.WriteAllLines(outputFile, filteredLines)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Select all posts with a comment count higher than 50 from a blog.",
    "code": "```vb\nPublic Module BlogFilter\n    Public Sub Main()\n        Dim posts As List(Of Post) = GetPosts()\n        Dim filteredPosts = posts.Where(Function(post) post.CommentCount > 50).ToList()\n    End Sub\n\n    Public Function GetPosts() As List(Of Post)\n        ' This function should return a list of Post objects\n        Return New List(Of Post)()\n    End Function\n\n    Public Class Post\n        Public Property CommentCount As Integer\n    End Class\nEnd Module\n```"
  },
  {
    "task": "Find all offers that expire within the next week from a promotional database.",
    "code": "```vb\nImports System\n\nModule Module1\n    Sub Main()\n        Dim offers As List(Of Offer) = GetPromotionalOffers()\n        Dim nextWeek As DateTime = DateTime.Now.AddDays(7)\n        \n        Dim expiringOffers = offers.Where(Function(offer) offer.ExpiryDate <= nextWeek).ToList()\n        \n        For Each offer In expiringOffers\n            Console.WriteLine($\"Offer ID: {offer.Id}, Expiry Date: {offer.ExpiryDate}\")\n        Next\n    End Sub\n\n    Function GetPromotionalOffers() As List(Of Offer)\n        ' This function should return a list of Offer objects from the promotional database\n        ' For demonstration purposes, we'll return a sample list\n        Return New List(Of Offer) From {\n            New Offer With {.Id = 1, .ExpiryDate = DateTime.Now.AddDays(5)},\n            New Offer With {.Id = 2, .ExpiryDate = DateTime.Now.AddDays(10)},\n            New Offer With {.Id = 3, .ExpiryDate = DateTime.Now.AddDays(3)}\n        }\n    End Function\n\n    Class Offer\n        Public Property Id As Integer\n        Public Property ExpiryDate As DateTime\n    End Class\nEnd Module\n```"
  },
  {
    "task": "Identify all items that are on sale from a shopping catalog.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim shoppingCatalog As New List(Of Item) From {\n            New Item With {.Name = \"Laptop\", .OnSale = False},\n            New Item With {.Name = \"Headphones\", .OnSale = True},\n            New Item With {.Name = \"Keyboard\", .OnSale = False},\n            New Item With {.Name = \"Mouse\", .OnSale = True}\n        }\n\n        Dim itemsOnSale = shoppingCatalog.Where(Function(item) item.OnSale)\n\n        For Each item In itemsOnSale\n            Console.WriteLine(item.Name)\n        Next\n    End Sub\n\n    Class Item\n        Public Property Name As String\n        Public Property OnSale As Boolean\n    End Class\nEnd Module\n```"
  },
  {
    "task": "Extract all notes that mention 'urgent' from a meeting record.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim meetingNotes As List(Of String) = New List(Of String) From {\n            \"Discuss project timeline\",\n            \"urgent: finalize budget\",\n            \"Team building activity\",\n            \"urgent: review contract terms\"\n        }\n\n        Dim urgentNotes = meetingNotes.Where(Function(note) note.ToLower().Contains(\"urgent\"))\n\n        For Each note In urgentNotes\n            Console.WriteLine(note)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Filter out all numbers that do not have a remainder when divided by two from a list.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers As List(Of Integer) = New List(Of Integer) From {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n        Dim filteredNumbers As List(Of Integer) = numbers.Where(Function(n) n Mod 2 <> 0).ToList()\n        For Each number In filteredNumbers\n            Console.WriteLine(number)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Select all concerts happening in the summer from an event calendar.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim events As List(Of Event) = New List(Of Event) From {\n            New Event With {.Name = \"Concert A\", .Date = New DateTime(2023, 6, 15)},\n            New Event With {.Name = \"Concert B\", .Date = New DateTime(2023, 7, 10)},\n            New Event With {.Name = \"Concert C\", .Date = New DateTime(2023, 8, 5)},\n            New Event With {.Name = \"Concert D\", .Date = New DateTime(2023, 9, 10)}\n        }\n\n        Dim summerConcerts = events.Where(Function(e) e.Date.Month >= 6 AndAlso e.Date.Month <= 8)\n\n        For Each concert In summerConcerts\n            Console.WriteLine(concert.Name)\n        Next\n    End Sub\n\n    Class Event\n        Public Property Name As String\n        Public Property Date As DateTime\n    End Class\nEnd Module\n```"
  },
  {
    "task": "Find all users with more than 1000 followers from a social media platform.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim users As List(Of User) = GetUsersFromSocialMedia()\n        Dim popularUsers = users.Where(Function(user) user.Followers > 1000)\n\n        For Each user In popularUsers\n            Console.WriteLine(user.Name)\n        Next\n    End Sub\n\n    Function GetUsersFromSocialMedia() As List(Of User)\n        ' This is a stub function for demonstration purposes.\n        Return New List(Of User) From {\n            New User With {.Name = \"Alice\", .Followers = 1200},\n            New User With {.Name = \"Bob\", .Followers = 800},\n            New User With {.Name = \"Charlie\", .Followers = 1500}\n        }\n    End Function\n\n    Public Class User\n        Public Property Name As String\n        Public Property Followers As Integer\n    End Class\nEnd Module\n```"
  },
  {
    "task": "Identify all stocks with a growth rate above 10% from a financial portfolio.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim portfolio As List(Of Stock) = New List(Of Stock) From {\n            New Stock With {.Name = \"StockA\", .GrowthRate = 15.5},\n            New Stock With {.Name = \"StockB\", .GrowthRate = 8.2},\n            New Stock With {.Name = \"StockC\", .GrowthRate = 12.7}\n        }\n\n        Dim highGrowthStocks = portfolio.Where(Function(stock) stock.GrowthRate > 10).ToList()\n\n        For Each stock In highGrowthStocks\n            Console.WriteLine(stock.Name & \": \" & stock.GrowthRate & \"%\")\n        Next\n    End Sub\n\n    Class Stock\n        Public Property Name As String\n        Public Property GrowthRate As Double\n    End Class\nEnd Module\n```"
  },
  {
    "task": "Extract all reviews that have a five-star rating from a product review site.",
    "code": "```vb\nImports System\nImports System.Collections.Generic\nImports System.Linq\n\nModule Module1\n    Sub Main()\n        Dim reviews As New List(Of Review) From {\n            New Review With {.Rating = 5, .Text = \"Excellent product!\"},\n            New Review With {.Rating = 3, .Text = \"Average quality.\"},\n            New Review With {.Rating = 5, .Text = \"Highly recommend!\"},\n            New Review With {.Rating = 4, .Text = \"Very good.\"}\n        }\n\n        Dim fiveStarReviews = reviews.Where(Function(r) r.Rating = 5)\n\n        For Each review In fiveStarReviews\n            Console.WriteLine(review.Text)\n        Next\n    End Sub\n\n    Public Class Review\n        Public Property Rating As Integer\n        Public Property Text As String\n    End Class\nEnd Module\n```"
  },
  {
    "task": "Filter out all emails that are not flagged from an inbox.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim inbox As List(Of Email) = GetInbox()\n        Dim flaggedEmails = inbox.Where(Function(email) email.IsFlagged).ToList()\n\n        For Each email In flaggedEmails\n            Console.WriteLine(email.Subject)\n        Next\n    End Sub\n\n    Function GetInbox() As List(Of Email)\n        Return New List(Of Email) From {\n            New Email With {.Subject = \"Meeting Reminder\", .IsFlagged = True},\n            New Email With {.Subject = \"Newsletter\", .IsFlagged = False},\n            New Email With {.Subject = \"Project Update\", .IsFlagged = True}\n        }\n    End Function\nEnd Module\n\nPublic Class Email\n    Public Property Subject As String\n    Public Property IsFlagged As Boolean\nEnd Class\n```"
  },
  {
    "task": "Select all entries with a timestamp from the past 24 hours from a log file.",
    "code": "```vb\nImports System\nImports System.IO\nImports System.Globalization\n\nModule Program\n    Sub Main()\n        Dim logFilePath As String = \"path_to_log_file.log\"\n        Dim lines As IEnumerable(Of String) = File.ReadLines(logFilePath)\n        Dim filteredEntries = lines.Where(Function(line) IsWithinLast24Hours(line))\n        \n        For Each entry In filteredEntries\n            Console.WriteLine(entry)\n        Next\n    End Sub\n\n    Function IsWithinLast24Hours(logEntry As String) As Boolean\n        Dim parts As String() = logEntry.Split(\" \"c)\n        Dim timestampString As String = parts(0)\n        Dim timestamp As DateTime\n\n        If DateTime.TryParseExact(timestampString, \"yyyy-MM-dd HH:mm:ss\", CultureInfo.InvariantCulture, DateTimeStyles.None, timestamp) Then\n            Return (DateTime.Now - timestamp).TotalHours <= 24\n        End If\n\n        Return False\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Find all books by a specific author from a library database.",
    "code": "```vb\nFunction GetBooksByAuthor(library As List(Of Book), authorName As String) As List(Of Book)\n    Return library.Where(Function(b) b.Author = authorName).ToList()\nEnd Function\n\nPublic Class Book\n    Public Property Title As String\n    Public Property Author As String\nEnd Class\n```"
  },
  {
    "task": "Identify all donations above $500 from a charity fundraiser report.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim donations As List(Of Integer) = New List(Of Integer) From {100, 250, 600, 750, 400, 800, 150}\n        Dim highDonations As List(Of Integer) = donations.Where(Function(d) d > 500).ToList()\n\n        For Each donation In highDonations\n            Console.WriteLine(donation)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Extract all assignments due in the next week from a course syllabus.",
    "code": "```vb\nImports System\n\nModule SyllabusFilter\n    Sub Main()\n        Dim assignments As List(Of Assignment) = New List(Of Assignment) From {\n            New Assignment With {.Title = \"Assignment 1\", .DueDate = #10/15/2023#},\n            New Assignment With {.Title = \"Assignment 2\", .DueDate = #10/18/2023#},\n            New Assignment With {.Title = \"Assignment 3\", .DueDate = #10/25/2023#}\n        }\n\n        Dim nextWeek As DateTime = DateTime.Now.AddDays(7)\n        Dim dueNextWeek = assignments.Where(Function(a) a.DueDate <= nextWeek AndAlso a.DueDate >= DateTime.Now)\n\n        For Each assignment In dueNextWeek\n            Console.WriteLine(\"Title: \" & assignment.Title & \", Due Date: \" & assignment.DueDate)\n        Next\n    End Sub\n\n    Class Assignment\n        Public Property Title As String\n        Public Property DueDate As DateTime\n    End Class\nEnd Module\n```"
  },
  {
    "task": "Filter out all movies that are not in English from a streaming service.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim movies As List(Of Movie) = New List(Of Movie) From {\n            New Movie(\"Inception\", \"English\"),\n            New Movie(\"Am\u00e9lie\", \"French\"),\n            New Movie(\"Parasite\", \"Korean\"),\n            New Movie(\"The Dark Knight\", \"English\")\n        }\n\n        Dim englishMovies As List(Of Movie) = movies.Where(Function(m) m.Language = \"English\").ToList()\n\n        For Each movie In englishMovies\n            Console.WriteLine(movie.Title)\n        Next\n    End Sub\n\n    Public Class Movie\n        Public Property Title As String\n        Public Property Language As String\n\n        Public Sub New(ByVal title As String, ByVal language As String)\n            Me.Title = title\n            Me.Language = language\n        End Sub\n    End Class\nEnd Module\n```"
  },
  {
    "task": "Select all landmarks located in Europe from a travel guide.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim landmarks As List(Of Landmark) = New List(Of Landmark) From {\n            New Landmark With {.Name = \"Eiffel Tower\", .Location = \"Europe\"},\n            New Landmark With {.Name = \"Statue of Liberty\", .Location = \"North America\"},\n            New Landmark With {.Name = \"Colosseum\", .Location = \"Europe\"},\n            New Landmark With {.Name = \"Great Wall\", .Location = \"Asia\"}\n        }\n\n        Dim europeanLandmarks = landmarks.Where(Function(l) l.Location = \"Europe\")\n\n        For Each landmark In europeanLandmarks\n            Console.WriteLine(landmark.Name)\n        Next\n    End Sub\n\n    Class Landmark\n        Public Property Name As String\n        Public Property Location As String\n    End Class\nEnd Module\n```"
  },
  {
    "task": "Find all contracts that are set to renew next month from a contract management system.",
    "code": "```vb\nImports System\nImports System.Collections.Generic\nImports System.Linq\n\nModule ContractManagement\n\n    Class Contract\n        Public Property Id As Integer\n        Public Property RenewalDate As DateTime\n    End Class\n\n    Sub Main()\n        Dim contracts As New List(Of Contract) From {\n            New Contract With {.Id = 1, .RenewalDate = New DateTime(2023, 11, 15)},\n            New Contract With {.Id = 2, .RenewalDate = New DateTime(2023, 12, 10)},\n            New Contract With {.Id = 3, .RenewalDate = New DateTime(2023, 12, 5)}\n        }\n\n        Dim nextMonth As DateTime = DateTime.Now.AddMonths(1)\n        Dim filteredContracts = contracts.Where(Function(c) c.RenewalDate.Year = nextMonth.Year AndAlso c.RenewalDate.Month = nextMonth.Month)\n\n        For Each contract In filteredContracts\n            Console.WriteLine(\"Contract ID: \" & contract.Id)\n        Next\n    End Sub\n\nEnd Module\n```"
  },
  {
    "task": "Identify all volunteer hours logged in the past year from a non-profit organization database.",
    "code": "```vb\nImports System\nImports System.Collections.Generic\nImports System.Linq\n\nModule Module1\n    Sub Main()\n        Dim volunteerHours As List(Of VolunteerHour) = GetVolunteerHoursFromDatabase()\n        Dim pastYear As DateTime = DateTime.Now.AddYears(-1)\n\n        Dim filteredHours = volunteerHours.Where(Function(vh) vh.LoggedDate >= pastYear).ToList()\n\n        For Each hour In filteredHours\n            Console.WriteLine(\"Volunteer ID: \" & hour.VolunteerId & \", Hours: \" & hour.Hours & \", Date: \" & hour.LoggedDate)\n        Next\n    End Sub\n\n    Function GetVolunteerHoursFromDatabase() As List(Of VolunteerHour)\n        ' Placeholder for database retrieval logic\n        Return New List(Of VolunteerHour) From {\n            New VolunteerHour() With {.VolunteerId = 1, .Hours = 5, .LoggedDate = DateTime.Now.AddMonths(-6)},\n            New VolunteerHour() With {.VolunteerId = 2, .Hours = 3, .LoggedDate = DateTime.Now.AddYears(-2)},\n            New VolunteerHour() With {.VolunteerId = 3, .Hours = 8, .LoggedDate = DateTime.Now.AddMonths(-11)}\n        }\n    End Function\n\n    Class VolunteerHour\n        Public Property VolunteerId As Integer\n        Public Property Hours As Integer\n        Public Property LoggedDate As DateTime\n    End Class\nEnd Module\n```"
  },
  {
    "task": "Extract all elements that are not strings from a mixed-type list.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim mixedList As List(Of Object) = New List(Of Object) From {1, \"hello\", 3.14, \"world\", 42, New DateTime(2023, 10, 1)}\n        Dim nonStringElements = mixedList.Where(Function(x) Not TypeOf x Is String).ToList()\n        For Each element In nonStringElements\n            Console.WriteLine(element)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Filter out all orders that are not yet shipped from an e-commerce system.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim orders As New List(Of Order) From {\n            New Order With {.Id = 1, .Shipped = True},\n            New Order With {.Id = 2, .Shipped = False},\n            New Order With {.Id = 3, .Shipped = True},\n            New Order With {.Id = 4, .Shipped = False}\n        }\n\n        Dim shippedOrders = orders.Where(Function(order) order.Shipped).ToList()\n\n        For Each order In shippedOrders\n            Console.WriteLine(\"Order ID: \" & order.Id & \" is shipped.\")\n        Next\n    End Sub\n\n    Public Class Order\n        Public Property Id As Integer\n        Public Property Shipped As Boolean\n    End Class\nEnd Module\n```"
  },
  {
    "task": "Select all emails sent from a specific address in an email server.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim emails As List(Of Email) = GetEmailsFromServer()\n        Dim specificAddress As String = \"specific@example.com\"\n        Dim filteredEmails As List(Of Email) = emails.Where(Function(email) email.FromAddress = specificAddress).ToList()\n        \n        ' Display or process filteredEmails as needed\n    End Sub\n\n    Function GetEmailsFromServer() As List(Of Email)\n        ' This function should return a list of Email objects from the server\n        ' This is a placeholder for actual email retrieval logic\n        Return New List(Of Email)()\n    End Function\n\n    Class Email\n        Public Property FromAddress As String\n        ' Other properties like Subject, Body, etc.\n    End Class\nEnd Module\n```"
  },
  {
    "task": "Find all passwords with at least one special character from a security database.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim passwords As List(Of String) = New List(Of String) From {\n            \"password123!\",\n            \"securepassword\",\n            \"admin@2023\",\n            \"user_pass\",\n            \"nopunctuation\"\n        }\n\n        Dim specialChars As String = \"!@#$%^&*()_+-=[]{}|;':,./<>?\"\n\n        Dim filteredPasswords = passwords.Where(Function(p) p.Any(Function(c) specialChars.Contains(c)))\n\n        For Each pwd In filteredPasswords\n            Console.WriteLine(pwd)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Identify all courses with a prerequisite from a university catalog.",
    "code": "```vb\nModule Program\n    Sub Main()\n        Dim courses As List(Of Course) = New List(Of Course) From {\n            New Course With {.Name = \"Calculus I\", .HasPrerequisite = False},\n            New Course With {.Name = \"Calculus II\", .HasPrerequisite = True},\n            New Course With {.Name = \"Physics I\", .HasPrerequisite = False},\n            New Course With {.Name = \"Physics II\", .HasPrerequisite = True}\n        }\n\n        Dim coursesWithPrerequisites = courses.Where(Function(course) course.HasPrerequisite).ToList()\n\n        For Each course In coursesWithPrerequisites\n            Console.WriteLine(course.Name)\n        Next\n    End Sub\n\n    Public Class Course\n        Public Property Name As String\n        Public Property HasPrerequisite As Boolean\n    End Class\nEnd Module\n```"
  },
  {
    "task": "Extract all genes associated with a specific trait from a genetic database.",
    "code": "```vb\nModule GeneticDatabase\n    Sub Main()\n        Dim genes As List(Of String) = New List(Of String) From {\n            \"gene1_traitA\", \"gene2_traitB\", \"gene3_traitA\", \"gene4_traitC\"\n        }\n        Dim specificTrait As String = \"traitA\"\n        Dim associatedGenes As List(Of String) = genes.Where(Function(gene) gene.Contains(specificTrait)).ToList()\n\n        For Each gene In associatedGenes\n            Console.WriteLine(gene)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Filter out all investments with a risk level below medium from a portfolio.",
    "code": "```vb\nModule Module1\n    Enum RiskLevel\n        Low\n        Medium\n        High\n    End Enum\n\n    Class Investment\n        Public Property Name As String\n        Public Property Risk As RiskLevel\n    End Class\n\n    Sub Main()\n        Dim portfolio As New List(Of Investment) From {\n            New Investment With {.Name = \"Investment1\", .Risk = RiskLevel.Low},\n            New Investment With {.Name = \"Investment2\", .Risk = RiskLevel.Medium},\n            New Investment With {.Name = \"Investment3\", .Risk = RiskLevel.High}\n        }\n\n        Dim filteredPortfolio = portfolio.Where(Function(inv) inv.Risk >= RiskLevel.Medium).ToList()\n\n        For Each investment In filteredPortfolio\n            Console.WriteLine(investment.Name & \" with \" & investment.Risk.ToString() & \" risk\")\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Select all calls longer than five minutes from a call log.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim callLog As List(Of Call) = New List(Of Call) From {\n            New Call With {.Duration = 3},\n            New Call With {.Duration = 10},\n            New Call With {.Duration = 7},\n            New Call With {.Duration = 2}\n        }\n        \n        Dim longCalls = callLog.Where(Function(c) c.Duration > 5).ToList()\n        \n        For Each call In longCalls\n            Console.WriteLine(\"Call Duration: \" & call.Duration)\n        Next\n    End Sub\n\n    Public Class Call\n        Public Property Duration As Integer\n    End Class\nEnd Module\n```"
  }
]