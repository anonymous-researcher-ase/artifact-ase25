[
  {
    "task": "Convert a list of temperatures from Celsius to Fahrenheit using a map function.",
    "code": "```vb\nModule Module1\n    Function CelsiusToFahrenheit(ByVal celsius As Double) As Double\n        Return (celsius * 9 / 5) + 32\n    End Function\n\n    Sub Main()\n        Dim celsiusTemps As List(Of Double) = New List(Of Double)({0, 20, 30, 100})\n        Dim fahrenheitTemps As List(Of Double) = celsiusTemps.Select(Function(c) CelsiusToFahrenheit(c)).ToList()\n\n        For Each temp In fahrenheitTemps\n            Console.WriteLine(temp)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Use map to convert a list of lowercase words to uppercase.",
    "code": "```vb\nModule Program\n    Sub Main()\n        Dim words As List(Of String) = New List(Of String) From {\"apple\", \"banana\", \"cherry\"}\n        Dim upperWords As List(Of String) = words.Select(Function(word) word.ToUpper()).ToList()\n        For Each word In upperWords\n            Console.WriteLine(word)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Apply map to add a prefix to each string in a list of filenames.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim filenames As List(Of String) = New List(Of String) From {\"file1.txt\", \"file2.txt\", \"file3.txt\"}\n        Dim prefix As String = \"prefix_\"\n        \n        Dim prefixedFilenames As List(Of String) = filenames.Select(Function(filename) prefix & filename).ToList()\n        \n        For Each name In prefixedFilenames\n            Console.WriteLine(name)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Transform a list of numbers by squaring each element with a map function.",
    "code": "```vb\nModule Program\n    Sub Main()\n        Dim numbers As List(Of Integer) = New List(Of Integer)({1, 2, 3, 4, 5})\n        Dim squaredNumbers As List(Of Integer) = numbers.Select(Function(x) x * x).ToList()\n        For Each number In squaredNumbers\n            Console.WriteLine(number)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Convert a list of integers to their string representations using map.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers As List(Of Integer) = New List(Of Integer)({1, 2, 3, 4, 5})\n        Dim stringNumbers As List(Of String) = numbers.Select(Function(n) n.ToString()).ToList()\n        For Each strNum As String In stringNumbers\n            Console.WriteLine(strNum)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Use map to compute the length of each string in a list of sentences.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim sentences As List(Of String) = New List(Of String) From {\n            \"Hello world\",\n            \"Visual Basic\",\n            \"Functional programming\"\n        }\n\n        Dim lengths As List(Of Integer) = sentences.[Select](Function(sentence) sentence.Length).ToList()\n\n        For Each length In lengths\n            Console.WriteLine(length)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Apply a discount to a list of prices using a map function.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim prices As List(Of Decimal) = New List(Of Decimal) From {100D, 200D, 300D, 400D, 500D}\n        Dim discount As Decimal = 0.1D ' 10% discount\n\n        Dim discountedPrices As List(Of Decimal) = prices.Select(Function(price) price * (1 - discount)).ToList()\n\n        For Each price In discountedPrices\n            Console.WriteLine(price)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Extract the first element from each tuple in a list of tuples with map.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim tuples As List(Of Tuple(Of Integer, String)) = New List(Of Tuple(Of Integer, String)) From {\n            Tuple.Create(1, \"a\"),\n            Tuple.Create(2, \"b\"),\n            Tuple.Create(3, \"c\")\n        }\n\n        Dim firstElements = tuples.Select(Function(t) t.Item1).ToList()\n\n        For Each element In firstElements\n            Console.WriteLine(element)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Use map to round a list of floating-point numbers to two decimal places.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers As List(Of Double) = New List(Of Double) From {3.14159, 2.71828, 1.61803, 1.41421}\n        Dim roundedNumbers As List(Of Double) = numbers.[Select](Function(x) Math.Round(x, 2)).ToList()\n        For Each num In roundedNumbers\n            Console.WriteLine(num)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Capitalize the first letter of each word in a list of names using map.",
    "code": "```vb\nModule Program\n    Function CapitalizeFirstLetter(name As String) As String\n        Return StrConv(name, VbStrConv.ProperCase)\n    End Function\n\n    Sub Main()\n        Dim names As List(Of String) = New List(Of String) From {\"alice\", \"bob\", \"charlie\"}\n        Dim capitalizedNames As List(Of String) = names.Select(Function(name) CapitalizeFirstLetter(name)).ToList()\n        \n        For Each name In capitalizedNames\n            Console.WriteLine(name)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Convert a list of JSON strings to corresponding dictionary objects with map.",
    "code": "```vb\nImports System.Web.Script.Serialization\n\nModule Module1\n    Sub Main()\n        Dim jsonStrings As List(Of String) = New List(Of String) From {\n            \"{\"\"key1\"\": \"\"value1\"\", \"\"key2\"\": \"\"value2\"\"}\",\n            \"{\"\"keyA\"\": \"\"valueA\"\", \"\"keyB\"\": \"\"valueB\"\"}\"\n        }\n        \n        Dim serializer As New JavaScriptSerializer()\n        Dim dictionaries = jsonStrings.ConvertAll(Function(json) serializer.Deserialize(Of Dictionary(Of String, Object))(json))\n        \n        ' Example to display the result\n        For Each dict In dictionaries\n            For Each kvp In dict\n                Console.WriteLine($\"{kvp.Key}: {kvp.Value}\")\n            Next\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Use map to double the value of each number in a list.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers As List(Of Integer) = New List(Of Integer)({1, 2, 3, 4, 5})\n        Dim doubledNumbers As List(Of Integer) = numbers.Select(Function(x) x * 2).ToList()\n        \n        For Each number In doubledNumbers\n            Console.WriteLine(number)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Transform a list of RGB tuples to hexadecimal color codes using map.",
    "code": "```vb\nModule Module1\n    Function RgbToHex(ByVal rgb As (Integer, Integer, Integer)) As String\n        Return String.Format(\"#{0:X2}{1:X2}{2:X2}\", rgb.Item1, rgb.Item2, rgb.Item3)\n    End Function\n\n    Sub Main()\n        Dim rgbList As List(Of (Integer, Integer, Integer)) = New List(Of (Integer, Integer, Integer)) From {\n            (255, 0, 0),\n            (0, 255, 0),\n            (0, 0, 255)\n        }\n\n        Dim hexList As List(Of String) = rgbList.ConvertAll(Function(rgb) RgbToHex(rgb))\n\n        For Each hexCode As String In hexList\n            Console.WriteLine(hexCode)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Use map to compute the factorial of each number in a list.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers As Integer() = {1, 2, 3, 4, 5}\n        Dim factorials = numbers.Select(Function(n) Factorial(n)).ToArray()\n        For Each fact In factorials\n            Console.WriteLine(fact)\n        Next\n    End Sub\n\n    Function Factorial(n As Integer) As Integer\n        If n <= 1 Then\n            Return 1\n        Else\n            Return n * Factorial(n - 1)\n        End If\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Translate a list of English words to Spanish using a map function.",
    "code": "```vb\nModule Module1\n    Function TranslateToSpanish(ByVal word As String) As String\n        Dim dictionary As New Dictionary(Of String, String) From {\n            {\"hello\", \"hola\"},\n            {\"world\", \"mundo\"},\n            {\"goodbye\", \"adios\"},\n            {\"please\", \"por favor\"},\n            {\"thank you\", \"gracias\"}\n        }\n        If dictionary.ContainsKey(word) Then\n            Return dictionary(word)\n        Else\n            Return word\n        End If\n    End Function\n\n    Sub Main()\n        Dim englishWords As List(Of String) = New List(Of String) From {\"hello\", \"world\", \"goodbye\", \"please\", \"thank you\"}\n        Dim spanishWords As List(Of String) = englishWords.Select(Function(word) TranslateToSpanish(word)).ToList()\n        For Each word In spanishWords\n            Console.WriteLine(word)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Apply a map function to format a list of dates from one format to another.",
    "code": "```vb\nImports System\nImports System.Globalization\n\nModule Program\n    Sub Main()\n        Dim dates As List(Of String) = New List(Of String) From {\n            \"2023-10-05\", \"2023-11-15\", \"2023-12-25\"\n        }\n\n        Dim formattedDates As List(Of String) = dates.ConvertAll(Function(dateStr) FormatDate(dateStr))\n\n        For Each formattedDate As String In formattedDates\n            Console.WriteLine(formattedDate)\n        Next\n    End Sub\n\n    Function FormatDate(dateStr As String) As String\n        Dim originalFormat As String = \"yyyy-MM-dd\"\n        Dim newFormat As String = \"MM/dd/yyyy\"\n        Dim dateValue As DateTime = DateTime.ParseExact(dateStr, originalFormat, CultureInfo.InvariantCulture)\n        Return dateValue.ToString(newFormat)\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Use map to check if each number in a list is even, returning a list of booleans.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers As List(Of Integer) = New List(Of Integer)({1, 2, 3, 4, 5, 6})\n        Dim isEven As List(Of Boolean) = numbers.[Select](Function(n) n Mod 2 = 0).ToList()\n        For Each result As Boolean In isEven\n            Console.WriteLine(result)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Convert a list of binary strings to decimal numbers using map.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim binaryStrings As List(Of String) = New List(Of String) From {\"101\", \"1101\", \"11111\", \"10001\"}\n        Dim decimalNumbers = binaryStrings.Select(Function(bin) Convert.ToInt32(bin, 2)).ToList()\n        For Each num In decimalNumbers\n            Console.WriteLine(num)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Use map to append a domain name to a list of user names to create email addresses.",
    "code": "```vb\nImports System\nImports System.Linq\n\nModule Program\n    Sub Main()\n        Dim userNames As List(Of String) = New List(Of String) From {\"user1\", \"user2\", \"user3\"}\n        Dim domain As String = \"@example.com\"\n        \n        Dim emailAddresses As List(Of String) = userNames.Select(Function(userName) userName & domain).ToList()\n        \n        For Each email In emailAddresses\n            Console.WriteLine(email)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Calculate the area of each circle in a list of radii using a map function.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim radii As List(Of Double) = New List(Of Double)({1.0, 2.0, 3.0, 4.0, 5.0})\n        Dim areas As List(Of Double) = radii.Select(Function(r) Math.PI * r * r).ToList()\n        For Each area In areas\n            Console.WriteLine(area)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Use map to strip whitespace from the start and end of each string in a list.",
    "code": "```vb\nModule Program\n    Sub Main()\n        Dim strings As List(Of String) = New List(Of String) From {\"  hello  \", \"  world  \", \"  Visual Basic  \"}\n        Dim trimmedStrings As List(Of String) = strings.Select(Function(s) s.Trim()).ToList()\n        For Each str As String In trimmedStrings\n            Console.WriteLine(str)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Apply map to replace spaces with underscores in a list of file paths.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim filePaths As List(Of String) = New List(Of String) From {\n            \"path to file 1\",\n            \"another path to file 2\",\n            \"yet another path\"\n        }\n\n        Dim updatedPaths = filePaths.Select(Function(path) path.Replace(\" \", \"_\")).ToList()\n\n        For Each path In updatedPaths\n            Console.WriteLine(path)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Convert a list of mixed-case strings to title case using map.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim mixedCaseStrings As List(Of String) = New List(Of String) From {\"hello world\", \"visual basic\", \"functional map\"}\n        Dim titleCaseStrings As List(Of String) = mixedCaseStrings.Select(Function(s) StrConv(s, VbStrConv.ProperCase)).ToList()\n        For Each str As String In titleCaseStrings\n            Console.WriteLine(str)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Use map to filter out only the digits from a list of mixed alphanumeric strings.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim inputList As List(Of String) = New List(Of String) From {\"abc123\", \"def456\", \"789ghi\"}\n        Dim resultList As List(Of String) = inputList.Select(Function(s) New String(s.Where(AddressOf Char.IsDigit).ToArray())).ToList()\n        \n        For Each result As String In resultList\n            Console.WriteLine(result)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Apply map to convert a list of Unix timestamps to readable date strings.",
    "code": "```vb\nImports System.Globalization\n\nModule Module1\n    Sub Main()\n        Dim timestamps As List(Of Long) = New List(Of Long) From {1609459200, 1612137600, 1614556800}\n        Dim dateStrings As List(Of String) = timestamps.Select(Function(ts) DateTimeOffset.FromUnixTimeSeconds(ts).ToString(\"yyyy-MM-dd HH:mm:ss\", CultureInfo.InvariantCulture)).ToList()\n        \n        For Each dateString As String In dateStrings\n            Console.WriteLine(dateString)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Transform a list of dictionary objects by extracting a specific key's value using map.",
    "code": "```vb\nModule Module1\n\n    Sub Main()\n        Dim dictList As New List(Of Dictionary(Of String, String)) From {\n            New Dictionary(Of String, String) From {{\"key1\", \"value1\"}, {\"key2\", \"value2\"}},\n            New Dictionary(Of String, String) From {{\"key1\", \"value3\"}, {\"key2\", \"value4\"}},\n            New Dictionary(Of String, String) From {{\"key1\", \"value5\"}, {\"key2\", \"value6\"}}\n        }\n\n        Dim extractedValues = dictList.Select(Function(dict) dict(\"key1\")).ToList()\n\n        For Each value In extractedValues\n            Console.WriteLine(value)\n        Next\n    End Sub\n\nEnd Module\n```"
  },
  {
    "task": "Use map to compute the cube of each number in a list.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers As List(Of Integer) = New List(Of Integer)({1, 2, 3, 4, 5})\n        Dim cubes As List(Of Integer) = numbers.Select(Function(x) x ^ 3).ToList()\n        \n        For Each cube In cubes\n            Console.WriteLine(cube)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Translate a list of URLs to their respective domain names using a map function.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim urls As List(Of String) = New List(Of String) From {\n            \"http://example.com\",\n            \"https://www.google.com\",\n            \"http://testsite.org\"\n        }\n\n        Dim domains As List(Of String) = urls.ConvertAll(Function(url) New Uri(url).Host)\n\n        For Each domain As String In domains\n            Console.WriteLine(domain)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Use map to generate HTML list items from a list of text strings.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim textStrings As String() = {\"Item 1\", \"Item 2\", \"Item 3\"}\n        Dim htmlListItems As IEnumerable(Of String) = textStrings.Select(Function(text) \"<li>\" & text & \"</li>\")\n        For Each item As String In htmlListItems\n            Console.WriteLine(item)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Convert a list of polar coordinates to Cartesian coordinates using map.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim polarCoords As List(Of Tuple(Of Double, Double)) = New List(Of Tuple(Of Double, Double)) From {\n            Tuple.Create(1.0, Math.PI / 4),\n            Tuple.Create(2.0, Math.PI / 3),\n            Tuple.Create(3.0, Math.PI / 6)\n        }\n\n        Dim cartesianCoords = polarCoords.Select(Function(p) Tuple.Create(p.Item1 * Math.Cos(p.Item2), p.Item1 * Math.Sin(p.Item2))).ToList()\n\n        For Each coord In cartesianCoords\n            Console.WriteLine(\"X: \" & coord.Item1 & \", Y: \" & coord.Item2)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Use map to decode a list of Base64 encoded strings.",
    "code": "```vb\nImports System\nImports System.Text\n\nModule Program\n    Function DecodeBase64(ByVal encodedStr As String) As String\n        Dim decodedBytes As Byte() = Convert.FromBase64String(encodedStr)\n        Return Encoding.UTF8.GetString(decodedBytes)\n    End Function\n\n    Sub Main()\n        Dim encodedStrings As List(Of String) = New List(Of String) From {\n            \"SGVsbG8=\", \"V29ybGQ=\", \"VmlzdWFsIEJhc2U2NA==\"\n        }\n\n        Dim decodedStrings As List(Of String) = encodedStrings _\n            .Select(Function(s) DecodeBase64(s)).ToList()\n\n        For Each decoded As String In decodedStrings\n            Console.WriteLine(decoded)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Convert a list of English sentences to Pig Latin using a map function.",
    "code": "```vb\nModule Module1\n    Function ToPigLatin(ByVal sentence As String) As String\n        Dim words As String() = sentence.Split(\" \"c)\n        Dim pigLatinWords As String() = Array.ConvertAll(words, Function(word) ConvertWordToPigLatin(word))\n        Return String.Join(\" \", pigLatinWords)\n    End Function\n\n    Function ConvertWordToPigLatin(ByVal word As String) As String\n        Dim vowels As String = \"AEIOUaeiou\"\n        If vowels.Contains(word(0)) Then\n            Return word & \"way\"\n        Else\n            Dim firstVowelPos As Integer = word.IndexOfAny(vowels.ToCharArray())\n            If firstVowelPos > 0 Then\n                Return word.Substring(firstVowelPos) & word.Substring(0, firstVowelPos) & \"ay\"\n            Else\n                Return word & \"ay\"\n            End If\n        End If\n    End Function\n\n    Sub Main()\n        Dim sentences As List(Of String) = New List(Of String) From {\n            \"Hello world\",\n            \"Visual Basic is fun\"\n        }\n        Dim pigLatinSentences As List(Of String) = sentences.ConvertAll(Function(sentence) ToPigLatin(sentence))\n        For Each pigLatinSentence As String In pigLatinSentences\n            Console.WriteLine(pigLatinSentence)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Use map to anonymize a list of email addresses by masking them.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim emails As List(Of String) = New List(Of String) From {\n            \"example1@gmail.com\",\n            \"example2@yahoo.com\",\n            \"example3@outlook.com\"\n        }\n        \n        Dim anonymizedEmails = emails.Select(Function(email)\n                                                 Dim atIndex = email.IndexOf(\"@\")\n                                                 If atIndex > 1 Then\n                                                     Return email.Substring(0, 1) & New String(\"*\"c, atIndex - 1) & email.Substring(atIndex)\n                                                 Else\n                                                     Return email\n                                                 End If\n                                             End Function).ToList()\n        \n        For Each email In anonymizedEmails\n            Console.WriteLine(email)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Apply map to reverse each string in a list of words.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim words As List(Of String) = New List(Of String) From {\"hello\", \"world\", \"example\"}\n        Dim reversedWords As List(Of String) = words.[Select](Function(word) New String(word.Reverse().ToArray())).ToList()\n        \n        For Each reversedWord In reversedWords\n            Console.WriteLine(reversedWord)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Convert a list of hexadecimal color codes to RGB tuples using map.",
    "code": "```vb\nModule Module1\n    Function HexToRgb(hex As String) As Tuple(Of Integer, Integer, Integer)\n        Dim r As Integer = Convert.ToInt32(hex.Substring(1, 2), 16)\n        Dim g As Integer = Convert.ToInt32(hex.Substring(3, 2), 16)\n        Dim b As Integer = Convert.ToInt32(hex.Substring(5, 2), 16)\n        Return Tuple.Create(r, g, b)\n    End Function\n\n    Sub Main()\n        Dim hexColors As List(Of String) = New List(Of String) From {\"#FF5733\", \"#33FF57\", \"#3357FF\"}\n        Dim rgbTuples As List(Of Tuple(Of Integer, Integer, Integer)) = hexColors.ConvertAll(Function(hex) HexToRgb(hex))\n        \n        For Each rgb In rgbTuples\n            Console.WriteLine($\"({rgb.Item1}, {rgb.Item2}, {rgb.Item3})\")\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Use map to increment each integer in a list by a constant value.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers As List(Of Integer) = New List(Of Integer) From {1, 2, 3, 4, 5}\n        Dim incrementedNumbers As List(Of Integer) = numbers.[Select](Function(n) n + 1).ToList()\n        For Each num In incrementedNumbers\n            Console.WriteLine(num)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Calculate the square root of each number in a list using a map function.",
    "code": "```vb\nImports System\nImports System.Linq\n\nModule Module1\n    Sub Main()\n        Dim numbers As Double() = {1, 4, 9, 16, 25}\n        Dim squareRoots = numbers.Select(Function(x) Math.Sqrt(x)).ToList()\n        For Each root In squareRoots\n            Console.WriteLine(root)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Use map to convert a list of currency amounts from dollars to euros.",
    "code": "```vb\nModule Module1\n    Function ConvertToEuro(ByVal dollarAmount As Double) As Double\n        Dim exchangeRate As Double = 0.85\n        Return dollarAmount * exchangeRate\n    End Function\n\n    Function MapCurrencyConversion(ByVal amounts As List(Of Double), ByVal conversionFunction As Func(Of Double, Double)) As List(Of Double)\n        Return amounts.Select(Function(amount) conversionFunction(amount)).ToList()\n    End Function\n\n    Sub Main()\n        Dim dollarAmounts As New List(Of Double) From {10.0, 20.0, 30.0, 40.0, 50.0}\n        Dim euroAmounts As List(Of Double) = MapCurrencyConversion(dollarAmounts, AddressOf ConvertToEuro)\n\n        For Each amount In euroAmounts\n            Console.WriteLine(amount)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Extract the domain from each email address in a list using map.",
    "code": "```vb\nModule Program\n    Sub Main()\n        Dim emails As List(Of String) = New List(Of String) From {\n            \"user1@example.com\",\n            \"user2@domain.com\",\n            \"user3@website.org\"\n        }\n\n        Dim domains As List(Of String) = emails.ConvertAll(Function(email) email.Split(\"@\"c)(1))\n\n        For Each domain In domains\n            Console.WriteLine(domain)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Use map to serialize a list of objects into JSON strings.",
    "code": "```vb\nImports Newtonsoft.Json\n\nModule Module1\n    Sub Main()\n        Dim objects As New List(Of Object)() From {\n            New With {.Name = \"Alice\", .Age = 30},\n            New With {.Name = \"Bob\", .Age = 25},\n            New With {.Name = \"Charlie\", .Age = 35}\n        }\n\n        Dim jsonStrings As List(Of String) = objects.Select(Function(obj) JsonConvert.SerializeObject(obj)).ToList()\n\n        For Each jsonString As String In jsonStrings\n            Console.WriteLine(jsonString)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Transform a list of file sizes from bytes to kilobytes using map.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim byteSizes As List(Of Integer) = New List(Of Integer) From {1024, 2048, 5120}\n        Dim kiloByteSizes = byteSizes.Select(Function(size) size / 1024.0).ToList()\n        \n        For Each size In kiloByteSizes\n            Console.WriteLine(size)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Use map to append a suffix to each string in a list of identifiers.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim identifiers As List(Of String) = New List(Of String) From {\"id1\", \"id2\", \"id3\"}\n        Dim suffix As String = \"_suffix\"\n        Dim modifiedIdentifiers As List(Of String) = identifiers.ConvertAll(Function(id) id & suffix)\n\n        For Each identifier In modifiedIdentifiers\n            Console.WriteLine(identifier)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Apply map to convert measurements from inches to centimeters in a list.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim inches As List(Of Double) = New List(Of Double) From {1.0, 2.5, 4.0, 6.3, 7.8}\n        Dim centimeters As List(Of Double) = inches.ConvertAll(Function(inch) inch * 2.54)\n        For Each cm In centimeters\n            Console.WriteLine(cm)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Use map to encrypt a list of plaintext messages using a simple cipher.",
    "code": "```vb\nModule Module1\n    Function EncryptMessage(ByVal message As String) As String\n        Return String.Join(\"\", message.Select(Function(c) Chr(Asc(c) + 1)))\n    End Function\n\n    Sub Main()\n        Dim plaintextMessages As List(Of String) = New List(Of String) From {\n            \"hello\",\n            \"world\",\n            \"vbnet\"\n        }\n\n        Dim encryptedMessages As List(Of String) = plaintextMessages.Select(AddressOf EncryptMessage).ToList()\n\n        For Each encryptedMessage As String In encryptedMessages\n            Console.WriteLine(encryptedMessage)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Transform a list of date strings to day of the week names using a map function.",
    "code": "```vb\nImports System.Globalization\n\nModule Program\n    Sub Main()\n        Dim dateStrings As List(Of String) = New List(Of String) From {\n            \"2023-10-21\",\n            \"2023-12-25\",\n            \"2024-01-01\"\n        }\n        \n        Dim dayOfWeekNames = dateStrings.Select(Function(dateStr) DateTime.Parse(dateStr).ToString(\"dddd\", CultureInfo.InvariantCulture)).ToList()\n        \n        For Each dayName In dayOfWeekNames\n            Console.WriteLine(dayName)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Use map to derive the absolute value of each number in a list.",
    "code": "```vb\nModule Program\n    Sub Main()\n        Dim numbers As Integer() = {-5, 3, -1, -7, 2}\n        Dim absoluteValues = numbers.Select(Function(x) Math.Abs(x)).ToArray()\n\n        For Each value In absoluteValues\n            Console.WriteLine(value)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Convert a list of lowercase hexadecimal strings to uppercase using map.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim hexList As List(Of String) = New List(Of String) From {\"1a\", \"2b\", \"3c\", \"4d\", \"5e\"}\n        Dim upperHexList As List(Of String) = hexList.ConvertAll(Function(hex) hex.ToUpper())\n        For Each hex In upperHexList\n            Console.WriteLine(hex)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Use map to find the maximum value in a list of lists of numbers.",
    "code": "```vb\nImports System\nImports System.Collections.Generic\nImports System.Linq\n\nModule Program\n    Sub Main()\n        Dim listOfLists As New List(Of List(Of Integer)) From {\n            New List(Of Integer) From {1, 2, 3},\n            New List(Of Integer) From {4, 5, 6},\n            New List(Of Integer) From {7, 8, 9}\n        }\n\n        Dim maxValues = listOfLists.Select(Function(innerList) innerList.Max())\n        Dim overallMax = maxValues.Max()\n\n        Console.WriteLine(\"Maximum value: \" & overallMax)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Apply map to extract the year from each date in a list of date objects.",
    "code": "```vb\nImports System\nImports System.Globalization\n\nModule Module1\n    Sub Main()\n        Dim dates As List(Of DateTime) = New List(Of DateTime) From {\n            New DateTime(2022, 5, 17),\n            New DateTime(2021, 11, 23),\n            New DateTime(2023, 7, 1)\n        }\n\n        Dim years As List(Of Integer) = dates.Select(Function(d) d.Year).ToList()\n\n        For Each year In years\n            Console.WriteLine(year)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Use map to prepend a country code to each phone number in a list.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim phoneNumbers As List(Of String) = New List(Of String) From {\n            \"123456789\",\n            \"987654321\",\n            \"555666777\"\n        }\n        Dim countryCode As String = \"+1\"\n\n        Dim fullNumbers As List(Of String) = phoneNumbers _\n            .Select(Function(number) countryCode & number) _\n            .ToList()\n\n        For Each fullNumber As String In fullNumbers\n            Console.WriteLine(fullNumber)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Capitalize the last letter of each word in a list using a map function.",
    "code": "```vb\nModule Program\n    Sub Main()\n        Dim words As List(Of String) = New List(Of String) From {\"hello\", \"world\", \"example\"}\n        Dim capitalizedWords As List(Of String) = words.Select(Function(word) CapitalizeLastLetter(word)).ToList()\n        \n        For Each word In capitalizedWords\n            Console.WriteLine(word)\n        Next\n    End Sub\n\n    Function CapitalizeLastLetter(ByVal word As String) As String\n        If String.IsNullOrEmpty(word) Then Return word\n        Dim lastChar As String = word.Substring(word.Length - 1).ToUpper()\n        Return word.Substring(0, word.Length - 1) & lastChar\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Use map to transform a list of strings by removing all vowels.",
    "code": "```vb\nModule Module1\n    Function RemoveVowels(ByVal s As String) As String\n        Return String.Concat(s.Where(Function(c) Not \"aeiouAEIOU\".Contains(c)))\n    End Function\n\n    Sub Main()\n        Dim strings As List(Of String) = New List(Of String) From {\"example\", \"visual\", \"basic\", \"code\"}\n        Dim transformedStrings As List(Of String) = strings.Select(Function(str) RemoveVowels(str)).ToList()\n\n        For Each str As String In transformedStrings\n            Console.WriteLine(str)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Convert a list of music notes to their corresponding frequencies using map.",
    "code": "```vb\nImports System.Collections.Generic\n\nModule Module1\n    Function NoteToFrequency(note As String) As Double\n        Dim frequencies As New Dictionary(Of String, Double) From {\n            {\"C\", 261.63},\n            {\"D\", 293.66},\n            {\"E\", 329.63},\n            {\"F\", 349.23},\n            {\"G\", 392.00},\n            {\"A\", 440.00},\n            {\"B\", 493.88}\n        }\n        Return frequencies(note)\n    End Function\n\n    Sub Main()\n        Dim notes As List(Of String) = New List(Of String) From {\"C\", \"E\", \"G\", \"A\"}\n        Dim frequencies As List(Of Double) = notes.ConvertAll(New Converter(Of String, Double)(AddressOf NoteToFrequency))\n        \n        For Each frequency As Double In frequencies\n            Console.WriteLine(frequency)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Use map to find the reciprocal of each number in a list.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers As List(Of Double) = New List(Of Double)({1, 2, 4, 5})\n        Dim reciprocals As List(Of Double) = numbers.Select(Function(n) 1 / n).ToList()\n        \n        For Each reciprocal In reciprocals\n            Console.WriteLine(reciprocal)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Transform a list of URLs to their shortened versions using a map function.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim urls As List(Of String) = New List(Of String) From {\n            \"http://example.com/1\",\n            \"http://example.com/2\",\n            \"http://example.com/3\"\n        }\n\n        Dim shortenedUrls As List(Of String) = urls.Select(Function(url) ShortenUrl(url)).ToList()\n\n        For Each shortUrl In shortenedUrls\n            Console.WriteLine(shortUrl)\n        Next\n    End Sub\n\n    Function ShortenUrl(url As String) As String\n        Return \"http://short.url/\" & url.GetHashCode().ToString()\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Use map to generate a list of initials from a list of full names.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim fullNames As List(Of String) = New List(Of String) From {\"John Doe\", \"Jane Smith\", \"Alice Johnson\"}\n        Dim initials As List(Of String) = fullNames.Select(Function(name) String.Join(\"\", name.Split(\" \"c).Select(Function(part) part(0)))).ToList()\n        For Each initial As String In initials\n            Console.WriteLine(initial)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Convert a list of decimal numbers to their binary string representations using map.",
    "code": "```vbnet\nModule Module1\n    Sub Main()\n        Dim decimalNumbers As List(Of Integer) = New List(Of Integer) From {5, 10, 15, 20}\n        Dim binaryStrings As IEnumerable(Of String) = decimalNumbers.Select(Function(n) Convert.ToString(n, 2))\n        For Each binaryString As String In binaryStrings\n            Console.WriteLine(binaryString)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Use map to adjust the brightness of each color in a list of RGB tuples.",
    "code": "```vb\nModule Module1\n    Function AdjustBrightness(ByVal color As Tuple(Of Integer, Integer, Integer), ByVal factor As Double) As Tuple(Of Integer, Integer, Integer)\n        Dim adjust = Function(x As Integer) Math.Min(255, Math.Max(0, CInt(x * factor)))\n        Return New Tuple(Of Integer, Integer, Integer)(adjust(color.Item1), adjust(color.Item2), adjust(color.Item3))\n    End Function\n\n    Function MapColors(ByVal colors As List(Of Tuple(Of Integer, Integer, Integer)), ByVal factor As Double) As List(Of Tuple(Of Integer, Integer, Integer))\n        Return colors.Select(Function(color) AdjustBrightness(color, factor)).ToList()\n    End Function\n\n    Sub Main()\n        Dim colors As New List(Of Tuple(Of Integer, Integer, Integer)) From {\n            Tuple.Create(100, 150, 200),\n            Tuple.Create(50, 75, 100)\n        }\n        Dim brighterColors = MapColors(colors, 1.1)\n        For Each color In brighterColors\n            Console.WriteLine($\"({color.Item1}, {color.Item2}, {color.Item3})\")\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Apply map to filter out only alphabetic characters from a list of strings.",
    "code": "```vb\nImports System.Linq\n\nModule Module1\n    Sub Main()\n        Dim strings As List(Of String) = New List(Of String) From {\"abc123\", \"def456\", \"ghi789\"}\n        Dim result As List(Of String) = strings.[Select](Function(s) New String(s.Where(Function(c) Char.IsLetter(c)).ToArray())).ToList()\n\n        For Each str As String In result\n            Console.WriteLine(str)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Use map to compute the prime factorization of each number in a list.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers As List(Of Integer) = New List(Of Integer)({60, 100, 77})\n        Dim primeFactorizations = numbers.Select(Function(n) PrimeFactors(n)).ToList()\n        \n        For Each factors In primeFactorizations\n            Console.WriteLine(String.Join(\", \", factors))\n        Next\n    End Sub\n\n    Function PrimeFactors(n As Integer) As List(Of Integer)\n        Dim factors As New List(Of Integer)\n        Dim d As Integer = 2\n        While n > 1\n            While n Mod d = 0\n                factors.Add(d)\n                n /= d\n            End While\n            d += 1\n        End While\n        Return factors\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Calculate the exponential of each number in a list using a map function.",
    "code": "```vb\nModule Program\n    Sub Main()\n        Dim numbers As List(Of Double) = New List(Of Double) From {1.0, 2.0, 3.0, 4.0}\n        Dim exponentials = numbers.Select(Function(n) Math.Exp(n)).ToList()\n        For Each exp In exponentials\n            Console.WriteLine(exp)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Use map to convert a list of text messages to morse code.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim messages As List(Of String) = New List(Of String) From {\n            \"HELLO WORLD\",\n            \"VISUAL BASIC\"\n        }\n\n        Dim morseCodeMapping As Dictionary(Of Char, String) = New Dictionary(Of Char, String) From {\n            {\"A\", \".-\"}, {\"B\", \"-...\"}, {\"C\", \"-.-.\"}, {\"D\", \"-..\"}, {\"E\", \".\"},\n            {\"F\", \"..-.\"}, {\"G\", \"--.\"}, {\"H\", \"....\"}, {\"I\", \"..\"}, {\"J\", \".---\"},\n            {\"K\", \"-.-\"}, {\"L\", \".-..\"}, {\"M\", \"--\"}, {\"N\", \"-.\"}, {\"O\", \"---\"},\n            {\"P\", \".--.\"}, {\"Q\", \"--.-\"}, {\"R\", \".-.\"}, {\"S\", \"...\"}, {\"T\", \"-\"},\n            {\"U\", \"..-\"}, {\"V\", \"...-\"}, {\"W\", \".--\"}, {\"X\", \"-..-\"}, {\"Y\", \"-.--\"},\n            {\"Z\", \"--..\"}, {\" \", \" \"}\n        }\n\n        Dim morseMessages As List(Of String) = messages.ConvertAll(Function(message) _\n            String.Join(\" \", message.Select(Function(c) morseCodeMapping(Char.ToUpper(c)))))\n\n        For Each morseMessage As String In morseMessages\n            Console.WriteLine(morseMessage)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Transform a list of JSON objects to XML strings using a map function.",
    "code": "```vb\nImports System\nImports System.Collections.Generic\nImports System.Xml\nImports Newtonsoft.Json\nImports Newtonsoft.Json.Linq\n\nModule Module1\n    Sub Main()\n        Dim jsonList As List(Of String) = New List(Of String)() From {\n            \"{\"\"name\"\":\"\"John\"\",\"\"age\"\":30}\",\n            \"{\"\"name\"\":\"\"Jane\"\",\"\"age\"\":25}\"\n        }\n\n        Dim xmlStrings As List(Of String) = jsonList.ConvertAll(Function(json) JsonToXml(json))\n\n        For Each xml As String In xmlStrings\n            Console.WriteLine(xml)\n        Next\n    End Sub\n\n    Function JsonToXml(json As String) As String\n        Dim xmlDoc As New XmlDocument()\n        Dim jsonObj As JObject = JObject.Parse(json)\n        xmlDoc.LoadXml(JsonConvert.DeserializeXmlNode(jsonObj.ToString(), \"root\").OuterXml)\n        Return xmlDoc.OuterXml\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Use map to extract the extension from each filename in a list.",
    "code": "```vb\nModule Program\n    Sub Main()\n        Dim filenames As List(Of String) = New List(Of String) From {\n            \"document.pdf\",\n            \"image.jpeg\",\n            \"archive.zip\",\n            \"presentation.pptx\"\n        }\n        \n        Dim extensions As List(Of String) = filenames.Select(Function(filename) System.IO.Path.GetExtension(filename)).ToList()\n        \n        For Each ext As String In extensions\n            Console.WriteLine(ext)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Convert a list of temperatures from Fahrenheit to Kelvin using map.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim fahrenheitTemperatures As List(Of Double) = New List(Of Double) From {32, 68, 212}\n        Dim kelvinTemperatures As List(Of Double) = fahrenheitTemperatures.[Select](Function(f) (f - 32) * 5 / 9 + 273.15).ToList()\n        \n        For Each temp In kelvinTemperatures\n            Console.WriteLine(temp)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Use map to calculate the perimeter of each rectangle in a list of dimensions.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim dimensions As List(Of Tuple(Of Double, Double)) = New List(Of Tuple(Of Double, Double)) From {\n            Tuple.Create(3.0, 4.0),\n            Tuple.Create(5.0, 6.0),\n            Tuple.Create(7.0, 8.0)\n        }\n\n        Dim perimeters As List(Of Double) = dimensions.Select(Function(d) 2 * (d.Item1 + d.Item2)).ToList()\n\n        For Each perimeter In perimeters\n            Console.WriteLine(perimeter)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Apply map to format a list of phone numbers into a standard format.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim phoneNumbers As List(Of String) = New List(Of String) From {\n            \"1234567890\", \"0987654321\", \"5555555555\"\n        }\n\n        Dim formattedNumbers As List(Of String) = phoneNumbers.Select(Function(number) FormatPhoneNumber(number)).ToList()\n\n        For Each number As String In formattedNumbers\n            Console.WriteLine(number)\n        Next\n    End Sub\n\n    Function FormatPhoneNumber(number As String) As String\n        Return String.Format(\"({0}) {1}-{2}\", number.Substring(0, 3), number.Substring(3, 3), number.Substring(6, 4))\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Use map to generate a hashed version of passwords from a list.",
    "code": "```vb\nImports System.Security.Cryptography\nImports System.Text\n\nModule Program\n    Sub Main()\n        Dim passwords As List(Of String) = New List(Of String) From {\n            \"password123\", \"letmein\", \"123456\"\n        }\n\n        Dim hashedPasswords As List(Of String) = passwords.Select(Function(pwd) HashPassword(pwd)).ToList()\n\n        For Each hashedPwd In hashedPasswords\n            Console.WriteLine(hashedPwd)\n        Next\n    End Sub\n\n    Function HashPassword(password As String) As String\n        Using sha256 As SHA256 = SHA256.Create()\n            Dim bytes As Byte() = sha256.ComputeHash(Encoding.UTF8.GetBytes(password))\n            Dim builder As New StringBuilder()\n            For Each b As Byte In bytes\n                builder.Append(b.ToString(\"x2\"))\n            Next\n            Return builder.ToString()\n        End Using\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Convert a list of text paragraphs to a word count using map.",
    "code": "```vb\nModule Program\n    Sub Main()\n        Dim paragraphs As List(Of String) = New List(Of String) From {\n            \"This is the first paragraph.\",\n            \"Here is the second paragraph, which is a bit longer.\",\n            \"Finally, the third paragraph.\"\n        }\n\n        Dim wordCounts As List(Of Integer) = paragraphs.ConvertAll(Function(p) p.Split(New Char() {\" \"c}, StringSplitOptions.RemoveEmptyEntries).Length)\n\n        For Each count As Integer In wordCounts\n            Console.WriteLine(count)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Use map to remove punctuation from each string in a list of sentences.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim sentences As List(Of String) = New List(Of String) From {\n            \"Hello, world!\",\n            \"This is a test.\",\n            \"VB is interesting; isn't it?\"\n        }\n\n        Dim cleanSentences = sentences.Select(Function(sentence) New String(sentence.Where(Function(c) Not Char.IsPunctuation(c)).ToArray())).ToList()\n\n        For Each sentence In cleanSentences\n            Console.WriteLine(sentence)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Transform a list of URLs to their base domain using a map function.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim urls As List(Of String) = New List(Of String) From {\n            \"http://www.example.com/page\",\n            \"https://sub.domain.com/path\",\n            \"http://another-example.org\"\n        }\n\n        Dim baseDomains = urls.Select(Function(url) GetBaseDomain(url)).ToList()\n\n        For Each domain In baseDomains\n            Console.WriteLine(domain)\n        Next\n    End Sub\n\n    Function GetBaseDomain(ByVal url As String) As String\n        Dim uri As New Uri(url)\n        Return uri.Host\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Use map to translate a list of expressions to their symbolic algebraic forms.",
    "code": "```vb\nImports System\nImports System.Collections.Generic\nImports Microsoft.CodeAnalysis\nImports Microsoft.CodeAnalysis.CSharp\nImports Microsoft.CodeAnalysis.CSharp.Scripting\nImports Microsoft.CodeAnalysis.Scripting\n\nModule Module1\n    Sub Main()\n        Dim expressions = New List(Of String) From {\n            \"1 + 2\",\n            \"3 * (4 + 5)\",\n            \"6 / 2\"\n        }\n\n        Dim symbolicForms = expressions.ConvertAll(Function(expr) EvaluateExpression(expr))\n\n        For Each symbolicForm In symbolicForms\n            Console.WriteLine(symbolicForm)\n        Next\n    End Sub\n\n    Function EvaluateExpression(expression As String) As String\n        Dim options = ScriptOptions.Default.AddReferences(\"System\")\n        Dim result = CSharpScript.EvaluateAsync(Of Object)(expression, options).Result\n        Return result.ToString()\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Apply map to convert a list of ASCII codes to corresponding characters.",
    "code": "```vb\nImports System\nImports System.Collections.Generic\n\nModule Program\n    Sub Main()\n        Dim asciiCodes As List(Of Integer) = New List(Of Integer) From {65, 66, 67, 68}\n        Dim characters As List(Of Char) = asciiCodes.ConvertAll(Function(code) Convert.ToChar(code))\n\n        For Each ch As Char In characters\n            Console.WriteLine(ch)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Use map to transform a list of text strings to their lemmatized forms.",
    "code": "```vb\nImports System\nImports System.Collections.Generic\nImports LemmaSharp\n\nModule Module1\n    Sub Main()\n        Dim textList As New List(Of String) From {\n            \"running\",\n            \"jumps\",\n            \"easily\",\n            \"happier\"\n        }\n\n        Dim lemmatizer As New LemmatizerPrebuiltCompact(LemmaSharp.LanguagePrebuilt.English)\n\n        Dim lemmatizedList = textList.ConvertAll(Function(word) lemmatizer.Lemmatize(word))\n\n        For Each word In lemmatizedList\n            Console.WriteLine(word)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Convert a list of HTML strings to plain text using map.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim htmlStrings As List(Of String) = New List(Of String) From {\n            \"<p>Hello, World!</p>\",\n            \"<div>Visual Basic is fun!</div>\",\n            \"<span>Sample text</span>\"\n        }\n\n        Dim plainTexts As List(Of String) = htmlStrings.Select(Function(html) System.Text.RegularExpressions.Regex.Replace(html, \"<.*?>\", \"\")).ToList()\n\n        For Each plainText As String In plainTexts\n            Console.WriteLine(plainText)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Use map to create a summary of each article in a list of texts.",
    "code": "```vb\nImports System\nImports System.Collections.Generic\nImports System.Linq\n\nModule Module1\n    Sub Main()\n        Dim texts As List(Of String) = New List(Of String) From {\n            \"This is the first article. It provides an overview of the topic.\",\n            \"The second article goes into more detail about the subject.\",\n            \"Here is the third article, which summarizes the main points.\"\n        }\n        \n        Dim summaries As List(Of String) = texts.Select(Function(text) CreateSummary(text)).ToList()\n        \n        For Each summary As String In summaries\n            Console.WriteLine(summary)\n        Next\n    End Sub\n\n    Function CreateSummary(text As String) As String\n        ' Simple summary function for demonstration purposes\n        Dim sentences As String() = text.Split(New Char() {\".\"c}, StringSplitOptions.RemoveEmptyEntries)\n        Return If(sentences.Length > 0, sentences(0) & \".\", \"\")\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Transform a list of paths to their absolute paths using a map function.",
    "code": "```vb\nImports System.IO\n\nModule Module1\n    Sub Main()\n        Dim paths As List(Of String) = New List(Of String) From {\n            \"C:\\example\\file1.txt\",\n            \"..\\file2.txt\",\n            \".\\file3.txt\"\n        }\n\n        Dim absolutePaths = paths.Select(Function(p) Path.GetFullPath(p)).ToList()\n\n        For Each path In absolutePaths\n            Console.WriteLine(path)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Use map to generate QR codes from a list of URLs.",
    "code": "```vb\nImports QRCoder\n\nModule QRCodeGenerator\n    Sub Main()\n        Dim urls As List(Of String) = New List(Of String) From {\n            \"http://example.com\",\n            \"http://example.org\",\n            \"http://example.net\"\n        }\n\n        Dim qrCodes As List(Of Bitmap) = urls.Select(Function(url) GenerateQRCode(url)).ToList()\n\n        ' Code to handle or save the generated QR codes can go here\n    End Sub\n\n    Function GenerateQRCode(url As String) As Bitmap\n        Dim qrGenerator As New QRCodeGenerator()\n        Dim qrCodeData As QRCodeData = qrGenerator.CreateQrCode(url, QRCodeGenerator.ECCLevel.Q)\n        Dim qrCode As New QRCode(qrCodeData)\n        Return qrCode.GetGraphic(20)\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Convert a list of angles from degrees to radians using map.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim degrees As List(Of Double) = New List(Of Double) From {0, 30, 45, 60, 90, 180, 270, 360}\n        Dim radians As List(Of Double) = degrees.Select(Function(degree) degree * Math.PI / 180).ToList()\n        \n        For Each radian In radians\n            Console.WriteLine(radian)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Use map to anonymize a list of IP addresses by masking parts of them.",
    "code": "```vb\nModule Program\n    Sub Main()\n        Dim ipAddresses As List(Of String) = New List(Of String) From {\n            \"192.168.1.1\",\n            \"10.0.0.2\",\n            \"172.16.0.3\"\n        }\n\n        Dim anonymizedIPs = ipAddresses.Select(Function(ip) MaskIP(ip)).ToList()\n\n        For Each ip In anonymizedIPs\n            Console.WriteLine(ip)\n        Next\n    End Sub\n\n    Function MaskIP(ip As String) As String\n        Dim parts As String() = ip.Split(\".\"c)\n        If parts.Length = 4 Then\n            Return parts(0) & \".\" & parts(1) & \".x.x\"\n        End If\n        Return ip\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Transform a list of tuples by swapping their elements using a map function.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim tuples As List(Of Tuple(Of Integer, Integer)) = New List(Of Tuple(Of Integer, Integer)) From {\n            Tuple.Create(1, 2),\n            Tuple.Create(3, 4),\n            Tuple.Create(5, 6)\n        }\n\n        Dim swappedTuples = tuples.Select(Function(t) Tuple.Create(t.Item2, t.Item1)).ToList()\n\n        For Each t In swappedTuples\n            Console.WriteLine(\"(\" & t.Item1 & \", \" & t.Item2 & \")\")\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Use map to compute the greatest common divisor of pairs in a list of number pairs.",
    "code": "```vb\nModule Module1\n    Function GCD(ByVal a As Integer, ByVal b As Integer) As Integer\n        While b <> 0\n            Dim temp As Integer = b\n            b = a Mod b\n            a = temp\n        End While\n        Return a\n    End Function\n\n    Sub Main()\n        Dim numberPairs As List(Of Tuple(Of Integer, Integer)) = New List(Of Tuple(Of Integer, Integer))() From {\n            Tuple.Create(48, 18),\n            Tuple.Create(56, 98),\n            Tuple.Create(101, 103)\n        }\n\n        Dim gcdResults As List(Of Integer) = numberPairs.Select(Function(pair) GCD(pair.Item1, pair.Item2)).ToList()\n\n        For Each result As Integer In gcdResults\n            Console.WriteLine(result)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Convert a list of file paths to their directory names using map.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim filePaths As List(Of String) = New List(Of String) From {\n            \"C:\\Users\\Example\\file1.txt\",\n            \"C:\\Program Files\\file2.txt\",\n            \"D:\\Documents\\file3.txt\"\n        }\n\n        Dim directoryNames As List(Of String) = filePaths.Select(Function(path) IO.Path.GetDirectoryName(path)).ToList()\n\n        For Each directory As String In directoryNames\n            Console.WriteLine(directory)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Use map to replace each vowel in a list of strings with a specific character.",
    "code": "```vb\nModule Module1\n    Function ReplaceVowels(ByVal str As String, ByVal ch As Char) As String\n        Return New String(str.Select(Function(c) If(\"aeiouAEIOU\".Contains(c), ch, c)).ToArray())\n    End Function\n\n    Sub Main()\n        Dim strings As List(Of String) = New List(Of String) From {\"apple\", \"banana\", \"cherry\"}\n        Dim replacedStrings As List(Of String) = strings.Select(Function(s) ReplaceVowels(s, \"*\")).ToList()\n\n        For Each s As String In replacedStrings\n            Console.WriteLine(s)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Transform a list of integers to their hexadecimal representations using map.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers As List(Of Integer) = New List(Of Integer) From {10, 15, 255, 1024}\n        Dim hexNumbers As List(Of String) = numbers.Select(Function(num) num.ToString(\"X\")).ToList()\n        For Each hex In hexNumbers\n            Console.WriteLine(hex)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Use map to apply a transformation matrix to a list of 2D vectors.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim vectors As List(Of Tuple(Of Double, Double)) = New List(Of Tuple(Of Double, Double)) From {\n            Tuple.Create(1.0, 2.0),\n            Tuple.Create(3.0, 4.0),\n            Tuple.Create(5.0, 6.0)\n        }\n\n        Dim transformationMatrix As Double(,) = {\n            {1.0, 0.0},\n            {0.0, 1.0}\n        }\n\n        Dim transformedVectors = vectors.[Select](Function(vector) ApplyTransformation(vector, transformationMatrix)).ToList()\n\n        For Each vector In transformedVectors\n            Console.WriteLine($\"({vector.Item1}, {vector.Item2})\")\n        Next\n    End Sub\n\n    Function ApplyTransformation(vector As Tuple(Of Double, Double), matrix As Double(,)) As Tuple(Of Double, Double)\n        Dim x As Double = matrix(0, 0) * vector.Item1 + matrix(0, 1) * vector.Item2\n        Dim y As Double = matrix(1, 0) * vector.Item1 + matrix(1, 1) * vector.Item2\n        Return Tuple.Create(x, y)\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Convert a list of text strings to their phonetic alphabet equivalents using map.",
    "code": "```vb\nModule Module1\n    Function PhoneticAlphabet(ByVal word As String) As String\n        Dim phoneticDict As Dictionary(Of Char, String) = New Dictionary(Of Char, String) From {\n            {\"A\"C, \"Alpha\"}, {\"B\"C, \"Bravo\"}, {\"C\"C, \"Charlie\"}, {\"D\"C, \"Delta\"},\n            {\"E\"C, \"Echo\"}, {\"F\"C, \"Foxtrot\"}, {\"G\"C, \"Golf\"}, {\"H\"C, \"Hotel\"},\n            {\"I\"C, \"India\"}, {\"J\"C, \"Juliett\"}, {\"K\"C, \"Kilo\"}, {\"L\"C, \"Lima\"},\n            {\"M\"C, \"Mike\"}, {\"N\"C, \"November\"}, {\"O\"C, \"Oscar\"}, {\"P\"C, \"Papa\"},\n            {\"Q\"C, \"Quebec\"}, {\"R\"C, \"Romeo\"}, {\"S\"C, \"Sierra\"}, {\"T\"C, \"Tango\"},\n            {\"U\"C, \"Uniform\"}, {\"V\"C, \"Victor\"}, {\"W\"C, \"Whiskey\"}, {\"X\"C, \"X-ray\"},\n            {\"Y\"C, \"Yankee\"}, {\"Z\"C, \"Zulu\"}\n        }\n        \n        Return String.Join(\" \", word.ToUpper().ToCharArray().Select(Function(c)\n            If phoneticDict.ContainsKey(c) Then\n                Return phoneticDict(c)\n            Else\n                Return c.ToString()\n            End If\n        End Function))\n    End Function\n\n    Sub Main()\n        Dim words As List(Of String) = New List(Of String) From {\"Hello\", \"World\"}\n        Dim phoneticWords As List(Of String) = words.Select(Function(w) PhoneticAlphabet(w)).ToList()\n        \n        For Each pw In phoneticWords\n            Console.WriteLine(pw)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Use map to determine if each word in a list is a palindrome, returning booleans.",
    "code": "```vb\nModule Module1\n    Function IsPalindrome(ByVal word As String) As Boolean\n        Dim reversedWord As String = StrReverse(word)\n        Return String.Compare(word, reversedWord, True) = 0\n    End Function\n\n    Sub Main()\n        Dim words As String() = {\"radar\", \"hello\", \"level\", \"world\", \"deified\"}\n        Dim results As IEnumerable(Of Boolean) = words.Select(Function(word) IsPalindrome(word))\n        \n        For Each result As Boolean In results\n            Console.WriteLine(result)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Transform a list of dictionaries by renaming a specified key using a map function.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim listOfDicts As List(Of Dictionary(Of String, String)) = New List(Of Dictionary(Of String, String)) From {\n            New Dictionary(Of String, String) From {{\"name\", \"Alice\"}, {\"age\", \"30\"}},\n            New Dictionary(Of String, String) From {{\"name\", \"Bob\"}, {\"age\", \"25\"}}\n        }\n        \n        Dim oldKey As String = \"name\"\n        Dim newKey As String = \"firstName\"\n\n        Dim transformedList = listOfDicts.Select(Function(dict)\n                                                     Dim newDict As New Dictionary(Of String, String)(dict)\n                                                     If newDict.ContainsKey(oldKey) Then\n                                                         newDict(newKey) = newDict(oldKey)\n                                                         newDict.Remove(oldKey)\n                                                     End If\n                                                     Return newDict\n                                                 End Function).ToList()\n\n        For Each dict In transformedList\n            For Each kvp In dict\n                Console.WriteLine($\"{kvp.Key}: {kvp.Value}\")\n            Next\n            Console.WriteLine()\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Use map to compute the logarithm of each number in a list.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers As List(Of Double) = New List(Of Double) From {1, 10, 100, 1000}\n        Dim logs As List(Of Double) = numbers.ConvertAll(Function(x) Math.Log(x))\n        For Each logValue As Double In logs\n            Console.WriteLine(logValue)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Convert a list of image file paths to grayscale versions using map.",
    "code": "```vb\nModule Module1\n\n    Sub Main()\n        Dim imagePaths As List(Of String) = New List(Of String) From {\n            \"path/to/image1.jpg\",\n            \"path/to/image2.jpg\",\n            \"path/to/image3.jpg\"\n        }\n\n        Dim grayscaleImages = imagePaths.[Select](Function(path) ConvertToGrayscale(path)).ToList()\n\n        ' Further processing of grayscaleImages can be done here\n    End Sub\n\n    Function ConvertToGrayscale(imagePath As String) As String\n        Dim originalImage As Bitmap = CType(Image.FromFile(imagePath), Bitmap)\n        Dim grayscaleImage As New Bitmap(originalImage.Width, originalImage.Height)\n\n        For y As Integer = 0 To originalImage.Height - 1\n            For x As Integer = 0 To originalImage.Width - 1\n                Dim originalColor As Color = originalImage.GetPixel(x, y)\n                Dim grayScale As Integer = CInt((originalColor.R * 0.3 + originalColor.G * 0.59 + originalColor.B * 0.11))\n                Dim newColor As Color = Color.FromArgb(grayScale, grayScale, grayScale)\n                grayscaleImage.SetPixel(x, y, newColor)\n            Next\n        Next\n\n        Dim grayscalePath As String = IO.Path.Combine(IO.Path.GetDirectoryName(imagePath), \"grayscale_\" & IO.Path.GetFileName(imagePath))\n        grayscaleImage.Save(grayscalePath)\n        Return grayscalePath\n    End Function\n\nEnd Module\n```"
  },
  {
    "task": "Use map to flatten a list of lists of strings into a single list of strings.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim listOfLists As List(Of List(Of String)) = New List(Of List(Of String)) From {\n            New List(Of String) From {\"a\", \"b\", \"c\"},\n            New List(Of String) From {\"d\", \"e\"},\n            New List(Of String) From {\"f\", \"g\", \"h\"}\n        }\n\n        Dim flattenedList As List(Of String) = listOfLists.SelectMany(Function(subList) subList).ToList()\n\n        For Each str As String In flattenedList\n            Console.WriteLine(str)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Transform a list of temperature readings to temperature anomalies using a map function.",
    "code": "```vb\nImports System\nImports System.Collections.Generic\nImports System.Linq\n\nModule Module1\n    Sub Main()\n        Dim temperatureReadings As List(Of Double) = New List(Of Double) From {23.5, 25.0, 22.1, 26.7, 24.3}\n        Dim averageTemperature As Double = temperatureReadings.Average()\n        \n        Dim temperatureAnomalies As List(Of Double) = temperatureReadings _\n            .Select(Function(temp) temp - averageTemperature) _\n            .ToList()\n        \n        For Each anomaly As Double In temperatureAnomalies\n            Console.WriteLine(anomaly)\n        Next\n    End Sub\nEnd Module\n```"
  }
]