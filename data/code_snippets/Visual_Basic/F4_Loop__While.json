[
  {
    "task": "Create a program that continuously asks the user to enter a number until they input a negative number.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim number As Integer\n\n        Console.WriteLine(\"Enter a number (negative number to quit):\")\n        number = Convert.ToInt32(Console.ReadLine())\n\n        While number >= 0\n            Console.WriteLine(\"Enter a number (negative number to quit):\")\n            number = Convert.ToInt32(Console.ReadLine())\n        End While\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function that doubles a number and repeats the process until the number is greater than 1000.",
    "code": "```vb\nFunction DoubleUntilGreaterThanThousand(ByVal number As Double) As Double\n    While number <= 1000\n        number = number * 2\n    End While\n    Return number\nEnd Function\n```"
  },
  {
    "task": "Develop a routine to keep printing 'Hello, World!' until a counter reaches 10.",
    "code": "```vb\nSub PrintHelloWorld()\n    Dim counter As Integer\n    counter = 0\n    While counter < 10\n        Console.WriteLine(\"Hello, World!\")\n        counter = counter + 1\n    Wend\nEnd Sub\n```"
  },
  {
    "task": "Construct a loop that checks if a randomly generated number is even, repeating until an odd number is found.",
    "code": "```vb\nImports System\n\nModule Program\n    Sub Main()\n        Dim rand As New Random()\n        Dim number As Integer\n\n        While True\n            number = rand.Next()\n            If number Mod 2 <> 0 Then\n                Exit While\n            End If\n        End While\n\n        Console.WriteLine(\"Found an odd number: \" & number)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a countdown timer that prints each second until it reaches zero.",
    "code": "```vb\nModule CountdownTimer\n    Sub Main()\n        Dim countdown As Integer = 10\n        While countdown >= 0\n            Console.WriteLine(countdown)\n            System.Threading.Thread.Sleep(1000)\n            countdown -= 1\n        End While\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a system where a user can keep adding items to a list until they type 'stop'.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim items As New List(Of String)()\n        Dim input As String = \"\"\n\n        Console.WriteLine(\"Enter items to add to the list. Type 'stop' to finish.\")\n\n        While input.ToLower() <> \"stop\"\n            input = Console.ReadLine()\n            If input.ToLower() <> \"stop\" Then\n                items.Add(input)\n            End If\n        End While\n\n        Console.WriteLine(\"Items in the list:\")\n        For Each item In items\n            Console.WriteLine(item)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a script that simulates rolling a die and continues until a six is rolled.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim rand As New Random()\n        Dim roll As Integer = 0\n\n        While roll <> 6\n            roll = rand.Next(1, 7)\n            Console.WriteLine(\"Rolled: \" & roll)\n        End While\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a program that asks for a password and keeps prompting until the correct password is entered.",
    "code": "```vb\nModule Program\n    Sub Main()\n        Dim password As String\n        Dim correctPassword As String = \"secret123\"\n        \n        Console.WriteLine(\"Enter the password:\")\n        password = Console.ReadLine()\n\n        While password <> correctPassword\n            Console.WriteLine(\"Incorrect password, try again:\")\n            password = Console.ReadLine()\n        End While\n\n        Console.WriteLine(\"Password accepted.\")\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a loop that calculates the sum of entered numbers until the user enters zero.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim sum As Integer = 0\n        Dim number As Integer\n\n        Console.WriteLine(\"Enter numbers to sum (enter 0 to stop):\")\n        number = Convert.ToInt32(Console.ReadLine())\n\n        While number <> 0\n            sum += number\n            number = Convert.ToInt32(Console.ReadLine())\n        End While\n\n        Console.WriteLine(\"The total sum is: \" & sum)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a feature that prints Fibonacci numbers until a number exceeds 100.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim a As Integer = 0\n        Dim b As Integer = 1\n        While a <= 100\n            Console.WriteLine(a)\n            Dim temp As Integer = a\n            a = b\n            b = temp + b\n        End While\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a loop that keeps halving a number until it becomes less than one.",
    "code": "```vb\nDim number As Double\nnumber = 10 ' example starting value\n\nWhile number >= 1\n    number = number / 2\nEnd While\n```"
  },
  {
    "task": "Write a program that asks for names and keeps storing them until the user enters 'done'.",
    "code": "```vb\nModule Program\n    Sub Main()\n        Dim names As New List(Of String)()\n        Dim input As String = \"\"\n\n        While input.ToLower() <> \"done\"\n            Console.Write(\"Enter a name (or 'done' to finish): \")\n            input = Console.ReadLine()\n            If input.ToLower() <> \"done\" Then\n                names.Add(input)\n            End If\n        End While\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a process that keeps flipping a coin, recording results until there have been five heads.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim random As New Random()\n        Dim headsCount As Integer = 0\n\n        While headsCount < 5\n            Dim flip As Integer = random.Next(2)\n            If flip = 0 Then\n                Console.WriteLine(\"Heads\")\n                headsCount += 1\n            Else\n                Console.WriteLine(\"Tails\")\n            End If\n        End While\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a countdown that decreases by two each time, starting from 20, until it reaches zero.",
    "code": "```vb\nModule Countdown\n    Sub Main()\n        Dim number As Integer = 20\n        While number >= 0\n            Console.WriteLine(number)\n            number -= 2\n        End While\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a solution that repeatedly asks for user input and repeats it back until they type 'exit'.",
    "code": "```vb\nModule Program\n    Sub Main()\n        Dim userInput As String = \"\"\n        While userInput <> \"exit\"\n            Console.Write(\"Enter something (type 'exit' to quit): \")\n            userInput = Console.ReadLine()\n            If userInput <> \"exit\" Then\n                Console.WriteLine(\"You entered: \" & userInput)\n            End If\n        End While\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a loop to simulate a bank account balance, repeatedly deducting a fee until the balance is below zero.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim balance As Double = 100.0\n        Dim fee As Double = 10.0\n\n        While balance >= 0\n            balance -= fee\n        End While\n\n        Console.WriteLine(\"Final balance: \" & balance)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a sequence generator that multiplies a number by three each time until it reaches or exceeds 100.",
    "code": "```vb\nModule SequenceGenerator\n    Sub Main()\n        Dim number As Integer = 1\n        While number < 100\n            Console.WriteLine(number)\n            number *= 3\n        End While\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a program that keeps generating random numbers between 1 and 10 until it gets a five.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim rand As New Random()\n        Dim number As Integer = 0\n\n        While number <> 5\n            number = rand.Next(1, 11)\n            Console.WriteLine(number)\n        End While\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a system to keep checking the temperature and only stop when it falls below freezing.",
    "code": "```vb\nModule TemperatureChecker\n    Sub Main()\n        Dim temperature As Integer\n        temperature = GetTemperature()\n\n        While temperature >= 32\n            Console.WriteLine(\"Temperature is above freezing: \" & temperature)\n            temperature = GetTemperature()\n        End While\n\n        Console.WriteLine(\"Temperature has fallen below freezing: \" & temperature)\n    End Sub\n\n    Function GetTemperature() As Integer\n        ' Simulating temperature input for the sake of this example.\n        ' In real implementation, this function should retrieve the actual temperature.\n        Return CInt(Console.ReadLine())\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Construct a quiz game that continues asking questions until the player answers incorrectly.",
    "code": "```vb\nModule QuizGame\n    Sub Main()\n        Dim questions As New Dictionary(Of String, String) From {\n            {\"What is the capital of France?\", \"Paris\"},\n            {\"What is 2 + 2?\", \"4\"},\n            {\"What is the largest planet?\", \"Jupiter\"}\n        }\n\n        Dim correct As Boolean = True\n\n        While correct\n            For Each question As KeyValuePair(Of String, String) In questions\n                Console.WriteLine(question.Key)\n                Dim answer As String = Console.ReadLine()\n\n                If answer.Trim().ToLower() <> question.Value.ToLower() Then\n                    correct = False\n                    Exit While\n                End If\n            Next\n        End While\n\n        Console.WriteLine(\"Game Over. You answered incorrectly.\")\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function that calculates factorials of a number, repeating the process for numbers 1 through 5.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim number As Integer = 1\n        While number <= 5\n            Console.WriteLine(\"Factorial of \" & number & \" is \" & Factorial(number))\n            number += 1\n        End While\n    End Sub\n\n    Function Factorial(ByVal n As Integer) As Integer\n        Dim result As Integer = 1\n        Dim i As Integer = 1\n        While i <= n\n            result *= i\n            i += 1\n        End While\n        Return result\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Create a loop that prints all even numbers between 1 and 50.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim number As Integer = 2\n        While number <= 50\n            Console.WriteLine(number)\n            number += 2\n        End While\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a program that continuously asks for user input until a palindrome is entered.",
    "code": "```vb\nModule PalindromeChecker\n    Sub Main()\n        Dim input As String\n        While True\n            Console.Write(\"Enter a string: \")\n            input = Console.ReadLine()\n            If input = StrReverse(input) Then\n                Exit While\n            End If\n        End While\n        Console.WriteLine(\"Palindrome entered!\")\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a countdown that decreases by one each second, starting from 100.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim count As Integer = 100\n        While count >= 0\n            Console.WriteLine(count)\n            Threading.Thread.Sleep(1000)\n            count -= 1\n        End While\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a script that repeatedly asks for a number and adds it to a total until the total exceeds 500.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim total As Integer = 0\n        Dim input As String\n        Dim number As Integer\n        \n        While total <= 500\n            Console.Write(\"Enter a number: \")\n            input = Console.ReadLine()\n            If Integer.TryParse(input, number) Then\n                total += number\n            End If\n        End While\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a loop that generates random letters until the letter 'Z' appears.",
    "code": "```vb\nImports System\n\nModule Program\n    Sub Main()\n        Dim rand As New Random()\n        Dim letter As Char\n\n        While letter <> \"Z\"c\n            letter = Chr(rand.Next(65, 91))\n            Console.WriteLine(letter)\n        End While\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a process that continues prompting for two numbers and prints their sum if it's even.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim number1 As Integer\n        Dim number2 As Integer\n        Dim sum As Integer\n        Dim input As String\n\n        While True\n            Console.WriteLine(\"Enter the first number:\")\n            input = Console.ReadLine()\n            number1 = Convert.ToInt32(input)\n\n            Console.WriteLine(\"Enter the second number:\")\n            input = Console.ReadLine()\n            number2 = Convert.ToInt32(input)\n\n            sum = number1 + number2\n\n            If sum Mod 2 = 0 Then\n                Console.WriteLine(\"The sum is even: \" & sum)\n            End If\n        End While\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a loop that simulates a traffic light sequence until a manual stop command is received.",
    "code": "```vb\nImports System.Threading\n\nModule TrafficLightSimulator\n    Sub Main()\n        Dim command As String = \"\"\n\n        While command <> \"stop\"\n            Console.WriteLine(\"Red Light\")\n            Thread.Sleep(2000) ' Wait for 2 seconds\n            Console.WriteLine(\"Green Light\")\n            Thread.Sleep(2000) ' Wait for 2 seconds\n            Console.WriteLine(\"Yellow Light\")\n            Thread.Sleep(1000) ' Wait for 1 second\n\n            Console.WriteLine(\"Type 'stop' to end the simulation or press Enter to continue.\")\n            command = Console.ReadLine()\n        End While\n\n        Console.WriteLine(\"Simulation stopped.\")\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a feature that keeps printing numbers in reverse order starting from 10.",
    "code": "```vb\nDim number As Integer = 10\nWhile number > 0\n    Console.WriteLine(number)\n    number -= 1\nEnd While\n```"
  },
  {
    "task": "Create a program that rolls two dice and continues until the sum is exactly seven.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim rand As New Random()\n        Dim roll1 As Integer\n        Dim roll2 As Integer\n        Dim sum As Integer\n\n        While sum <> 7\n            roll1 = rand.Next(1, 7)\n            roll2 = rand.Next(1, 7)\n            sum = roll1 + roll2\n            Console.WriteLine(\"Rolled: \" & roll1 & \" and \" & roll2 & \" - Sum: \" & sum)\n        End While\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a loop that keeps asking for ages and prints the average once a negative age is entered.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim age As Integer\n        Dim sum As Integer = 0\n        Dim count As Integer = 0\n\n        Console.WriteLine(\"Enter ages (enter a negative number to stop):\")\n        age = Convert.ToInt32(Console.ReadLine())\n\n        While age >= 0\n            sum += age\n            count += 1\n            age = Convert.ToInt32(Console.ReadLine())\n        End While\n\n        If count > 0 Then\n            Dim average As Double = sum / count\n            Console.WriteLine(\"Average age: \" & average)\n        Else\n            Console.WriteLine(\"No valid ages entered.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a routine that squares numbers starting from 1 until the square is greater than 500.",
    "code": "```vb\nSub SquareNumbers()\n    Dim number As Integer\n    number = 1\n    \n    While number * number <= 500\n        Console.WriteLine(number * number)\n        number = number + 1\n    Wend\nEnd Sub\n```"
  },
  {
    "task": "Implement a system to ask for a string and append it to a file until 'end' is typed.",
    "code": "```vb\nImports System.IO\n\nModule Module1\n    Sub Main()\n        Dim input As String = \"\"\n        Dim filePath As String = \"output.txt\"\n        \n        While input <> \"end\"\n            Console.Write(\"Enter a string (type 'end' to finish): \")\n            input = Console.ReadLine()\n            If input <> \"end\" Then\n                File.AppendAllText(filePath, input & Environment.NewLine)\n            End If\n        End While\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a script that checks if a number is prime, repeating for each number entered by the user.",
    "code": "```vb\nModule PrimeChecker\n    Sub Main()\n        Dim input As String\n        Dim number As Integer\n        Console.WriteLine(\"Enter numbers to check for prime (enter 'exit' to quit):\")\n        \n        input = Console.ReadLine()\n        While input.ToLower() <> \"exit\"\n            If Integer.TryParse(input, number) Then\n                If IsPrime(number) Then\n                    Console.WriteLine(number & \" is a prime number.\")\n                Else\n                    Console.WriteLine(number & \" is not a prime number.\")\n                End If\n            Else\n                Console.WriteLine(\"Invalid input. Please enter a valid number.\")\n            End If\n            input = Console.ReadLine()\n        End While\n    End Sub\n\n    Function IsPrime(ByVal num As Integer) As Boolean\n        If num <= 1 Then Return False\n        If num = 2 Then Return True\n        If num Mod 2 = 0 Then Return False\n\n        Dim i As Integer = 3\n        While i * i <= num\n            If num Mod i = 0 Then Return False\n            i += 2\n        End While\n        Return True\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Develop a countdown that prints numbers starting from 50 down to 1.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim number As Integer = 50\n        While number >= 1\n            Console.WriteLine(number)\n            number -= 1\n        End While\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a program that keeps doubling the value of a variable until it exceeds 200.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim value As Integer = 1\n        While value <= 200\n            value *= 2\n        End While\n        Console.WriteLine(\"Final value: \" & value)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a loop that keeps generating a random string of letters until a specific word is formed.",
    "code": "```vb\nImports System\n\nModule RandomStringGenerator\n    Sub Main()\n        Dim targetWord As String = \"HELLO\"\n        Dim rand As New Random()\n        Dim generatedWord As String = \"\"\n\n        While generatedWord <> targetWord\n            generatedWord = GenerateRandomString(targetWord.Length, rand)\n            Console.WriteLine(\"Generated: \" & generatedWord)\n        End While\n\n        Console.WriteLine(\"Target word formed: \" & generatedWord)\n    End Sub\n\n    Function GenerateRandomString(length As Integer, rand As Random) As String\n        Dim letters As String = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n        Dim result As String = \"\"\n\n        For i As Integer = 1 To length\n            Dim index As Integer = rand.Next(0, letters.Length)\n            result &= letters(index)\n        Next\n\n        Return result\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Implement a system that continuously fetches data from a sensor until a threshold is crossed.",
    "code": "```vb\nModule SensorSystem\n    Sub Main()\n        Dim sensorValue As Double\n        Dim threshold As Double = 100.0\n\n        While True\n            sensorValue = FetchSensorData()\n            If sensorValue > threshold Then\n                Exit While\n            End If\n        End While\n    End Sub\n\n    Function FetchSensorData() As Double\n        ' Simulate fetching data from a sensor\n        Return New Random().NextDouble() * 200\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Create a game where a player guesses a number, and the game continues until the player guesses correctly.",
    "code": "```vb\nModule GuessingGame\n    Sub Main()\n        Dim randomNumber As Integer = New Random().Next(1, 101)\n        Dim userGuess As Integer = 0\n\n        Console.WriteLine(\"Guess the number between 1 and 100\")\n\n        While userGuess <> randomNumber\n            Console.Write(\"Enter your guess: \")\n            userGuess = Convert.ToInt32(Console.ReadLine())\n\n            If userGuess < randomNumber Then\n                Console.WriteLine(\"Too low! Try again.\")\n            ElseIf userGuess > randomNumber Then\n                Console.WriteLine(\"Too high! Try again.\")\n            End If\n        End While\n\n        Console.WriteLine(\"Congratulations! You guessed the number.\")\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a loop that continues to add random numbers to a list until the list has 10 even numbers.",
    "code": "```vb\nImports System\n\nModule Program\n    Sub Main()\n        Dim random As New Random()\n        Dim numbers As New List(Of Integer)()\n        Dim evenCount As Integer = 0\n        \n        While evenCount < 10\n            Dim num As Integer = random.Next()\n            numbers.Add(num)\n            If num Mod 2 = 0 Then\n                evenCount += 1\n            End If\n        End While\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a routine that keeps removing elements from a list until it is empty.",
    "code": "```vb\nSub RemoveElementsUntilEmpty()\n    Dim myList As Collection\n    Set myList = New Collection\n    \n    ' Example: Adding some elements to the list\n    myList.Add \"Element1\"\n    myList.Add \"Element2\"\n    myList.Add \"Element3\"\n    \n    ' Loop: While\n    While myList.Count > 0\n        myList.Remove 1\n    Wend\nEnd Sub\n```"
  },
  {
    "task": "Implement a sequence that prints the alphabet repeatedly until interrupted by the user.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim alphabet As String = \"abcdefghijklmnopqrstuvwxyz\"\n        Dim i As Integer\n        While True\n            For i = 0 To alphabet.Length - 1\n                Console.Write(alphabet(i))\n            Next\n        End While\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a program that continuously checks for updates and stops once an update is available.",
    "code": "```vb\nModule Program\n    Sub Main()\n        Dim updateAvailable As Boolean = False\n\n        While Not updateAvailable\n            ' Simulate checking for updates\n            updateAvailable = CheckForUpdates()\n        End While\n\n        Console.WriteLine(\"Update is available!\")\n    End Sub\n\n    Function CheckForUpdates() As Boolean\n        ' Placeholder for actual update checking logic\n        ' For demonstration, we'll return True to simulate an update being found\n        Return True\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Write a function that keeps dividing a number by two until it results in a fractional value.",
    "code": "```vb\nFunction DivideUntilFractional(ByVal number As Double) As Double\n    While number Mod 1 = 0\n        number /= 2\n    End While\n    Return number\nEnd Function\n```"
  },
  {
    "task": "Develop a loop that keeps asking for student's grades and calculates the average until a grade of -1 is entered.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim sum As Integer = 0\n        Dim count As Integer = 0\n        Dim grade As Integer\n\n        Console.WriteLine(\"Enter student's grade (-1 to stop): \")\n        grade = Convert.ToInt32(Console.ReadLine())\n\n        While grade <> -1\n            sum += grade\n            count += 1\n            Console.WriteLine(\"Enter student's grade (-1 to stop): \")\n            grade = Convert.ToInt32(Console.ReadLine())\n        End While\n\n        If count > 0 Then\n            Dim average As Double = sum / count\n            Console.WriteLine(\"The average grade is: \" & average)\n        Else\n            Console.WriteLine(\"No grades entered.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a feature that continuously monitors a file for changes and stops when no changes are detected for a minute.",
    "code": "```vb\nImports System.IO\nImports System.Threading\n\nModule FileMonitor\n    Sub Main()\n        Dim filePath As String = \"C:\\path\\to\\your\\file.txt\"\n        Dim lastReadTime As DateTime = DateTime.MinValue\n        Dim lastModifiedTime As DateTime = File.GetLastWriteTime(filePath)\n        Dim noChangeDuration As Integer = 0\n\n        While noChangeDuration < 60\n            Dim currentModifiedTime As DateTime = File.GetLastWriteTime(filePath)\n            If currentModifiedTime <> lastModifiedTime Then\n                lastModifiedTime = currentModifiedTime\n                noChangeDuration = 0\n            Else\n                noChangeDuration += 1\n            End If\n\n            Thread.Sleep(1000)\n        End While\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a process where a motor runs until a certain distance is reached.",
    "code": "```vb\nModule MotorControl\n    Sub Main()\n        Dim distanceCovered As Double = 0.0\n        Dim targetDistance As Double = 100.0 ' Set your target distance here\n\n        While distanceCovered < targetDistance\n            RunMotor()\n            distanceCovered += GetDistanceIncrement() ' Assume this function returns the distance covered in one loop\n        End While\n\n        StopMotor()\n    End Sub\n\n    Sub RunMotor()\n        ' Code to start or continue running the motor\n    End Sub\n\n    Function GetDistanceIncrement() As Double\n        ' Code to get the distance covered in a time increment\n        Return 1.0 ' Example increment\n    End Function\n\n    Sub StopMotor()\n        ' Code to stop the motor\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a script that keeps generating random numbers and stops when it generates a prime number.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim random As New Random()\n        Dim number As Integer\n\n        While True\n            number = random.Next(1, 100)\n            If IsPrime(number) Then\n                Exit While\n            End If\n        End While\n\n        Console.WriteLine(\"Generated prime number: \" & number)\n    End Sub\n\n    Function IsPrime(ByVal num As Integer) As Boolean\n        If num <= 1 Then Return False\n        If num <= 3 Then Return True\n        If num Mod 2 = 0 Or num Mod 3 = 0 Then Return False\n\n        Dim i As Integer = 5\n        While i * i <= num\n            If num Mod i = 0 Or num Mod (i + 2) = 0 Then Return False\n            i += 6\n        End While\n\n        Return True\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Write a program that asks for the user's favorite color and keeps asking until they say 'blue'.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim favoriteColor As String = \"\"\n        While favoriteColor.ToLower() <> \"blue\"\n            Console.WriteLine(\"What is your favorite color?\")\n            favoriteColor = Console.ReadLine()\n        End While\n        Console.WriteLine(\"Thank you!\")\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a loop that continuously prints the time every second until a key is pressed.",
    "code": "```vb\nImports System\nImports System.Threading\n\nModule Program\n    Sub Main()\n        Console.WriteLine(\"Press any key to stop...\")\n        While Not Console.KeyAvailable\n            Console.WriteLine(DateTime.Now.ToString(\"HH:mm:ss\"))\n            Thread.Sleep(1000)\n        End While\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a system to keep downloading data from a server until the connection is lost.",
    "code": "```vb\nSub DownloadData()\n    Dim isConnected As Boolean\n    isConnected = True\n\n    While isConnected\n        ' Simulate data download\n        Console.WriteLine(\"Downloading data...\")\n\n        ' Simulate checking connection status\n        isConnected = CheckServerConnection()\n    End While\n\n    Console.WriteLine(\"Connection lost. Stopping download.\")\nEnd Sub\n\nFunction CheckServerConnection() As Boolean\n    ' Simulate random connection loss\n    Return New Random().Next(0, 5) <> 0\nEnd Function\n```"
  },
  {
    "task": "Write a process to keep a light on until the ambient light level is sufficient.",
    "code": "```vb\nDim ambientLightLevel As Integer\nDim sufficientLightLevel As Integer = 100\nDim lightOn As Boolean = True\n\nWhile lightOn\n    ' Assume GetAmbientLightLevel() is a function that returns the current ambient light level\n    ambientLightLevel = GetAmbientLightLevel()\n    If ambientLightLevel >= sufficientLightLevel Then\n        lightOn = False\n    End If\n    ' Code to keep the light on\nEnd While\n```"
  },
  {
    "task": "Implement a feature that continuously plays a sound until the user presses a button.",
    "code": "```vb\nPublic Class Form1\n    Private soundPlaying As Boolean = True\n\n    Private Sub PlaySound()\n        While soundPlaying\n            ' Assuming My.Computer.Audio.Play is used to play a sound\n            My.Computer.Audio.Play(\"path_to_sound_file.wav\", AudioPlayMode.WaitToComplete)\n        End While\n    End Sub\n\n    Private Sub Button1_Click(sender As Object, e As EventArgs) Handles Button1.Click\n        soundPlaying = False\n    End Sub\n\n    Private Sub Form1_Load(sender As Object, e As EventArgs) Handles MyBase.Load\n        Dim soundThread As New Threading.Thread(AddressOf PlaySound)\n        soundThread.Start()\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Design a program that keeps multiplying a matrix by itself until its determinant is greater than 1000.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim matrix(,) As Double = {{1, 2}, {3, 4}}\n        Dim result(,) As Double = matrix.Clone()\n        \n        While Determinant(result) <= 1000\n            result = MultiplyMatrices(result, matrix)\n        End While\n    End Sub\n\n    Function MultiplyMatrices(ByVal a(,) As Double, ByVal b(,) As Double) As Double(,)\n        Dim rowsA As Integer = a.GetLength(0)\n        Dim colsA As Integer = a.GetLength(1)\n        Dim colsB As Integer = b.GetLength(1)\n        Dim product(rowsA - 1, colsB - 1) As Double\n\n        For i As Integer = 0 To rowsA - 1\n            For j As Integer = 0 To colsB - 1\n                For k As Integer = 0 To colsA - 1\n                    product(i, j) += a(i, k) * b(k, j)\n                Next\n            Next\n        Next\n\n        Return product\n    End Function\n\n    Function Determinant(ByVal matrix(,) As Double) As Double\n        If matrix.GetLength(0) = 2 AndAlso matrix.GetLength(1) = 2 Then\n            Return matrix(0, 0) * matrix(1, 1) - matrix(0, 1) * matrix(1, 0)\n        End If\n        ' Handling for larger matrices would go here\n        Return 0\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Create a script that keeps prompting the user to guess a word until they get it right.",
    "code": "```vb\nModule GuessingGame\n    Sub Main()\n        Dim secretWord As String = \"mystery\"\n        Dim userGuess As String = \"\"\n\n        While userGuess <> secretWord\n            Console.Write(\"Guess the word: \")\n            userGuess = Console.ReadLine()\n        End While\n\n        Console.WriteLine(\"Congratulations! You guessed the word.\")\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a loop that simulates a car's fuel consumption and stops when the tank is empty.",
    "code": "```vb\nModule Program\n    Sub Main()\n        Dim fuel As Integer = 50 ' Initial fuel level\n        Dim consumptionRate As Integer = 5 ' Fuel consumption per loop iteration\n        \n        While fuel > 0\n            Console.WriteLine(\"Current fuel level: \" & fuel)\n            fuel -= consumptionRate\n        End While\n        \n        Console.WriteLine(\"Tank is empty.\")\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a routine that keeps checking if a file exists and stops once it does.",
    "code": "```vb\nImports System.IO\n\nSub CheckFileExists()\n    Dim filePath As String = \"C:\\path\\to\\your\\file.txt\"\n    While Not File.Exists(filePath)\n        ' You can add a delay here if needed\n    End While\n    Console.WriteLine(\"File exists now.\")\nEnd Sub\n```"
  },
  {
    "task": "Implement a feature that continuously calculates the square root of a number until it's less than 0.1.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim number As Double = 1000.0\n\n        While number >= 0.1\n            number = Math.Sqrt(number)\n            Console.WriteLine(number)\n        End While\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a system that prints 'Processing...' every second until a task is complete.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim taskComplete As Boolean = False\n\n        While Not taskComplete\n            Console.WriteLine(\"Processing...\")\n            Threading.Thread.Sleep(1000)\n            ' Assume some condition here that eventually sets taskComplete to True\n            ' For demonstration purposes, let's say the task completes after 5 iterations\n            Static counter As Integer = 0\n            counter += 1\n            If counter >= 5 Then\n                taskComplete = True\n            End If\n        End While\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a loop that repeatedly checks the status of a process until it reports 'complete'.",
    "code": "```vb\nDim processStatus As String = \"incomplete\"\n\nWhile processStatus <> \"complete\"\n    ' Simulate checking the process status\n    processStatus = CheckProcessStatus()\nEnd While\n\nFunction CheckProcessStatus() As String\n    ' Code to check the actual process status\n    Return \"complete\" ' Simulating process completion\nEnd Function\n```"
  },
  {
    "task": "Design a routine to keep pinging a server and alert when the connection is lost.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim server As String = \"example.com\"\n        While True\n            If Not PingServer(server) Then\n                Console.WriteLine(\"Connection lost to server: \" & server)\n            End If\n            System.Threading.Thread.Sleep(1000)\n        End While\n    End Sub\n\n    Function PingServer(server As String) As Boolean\n        Try\n            Dim ping As New System.Net.NetworkInformation.Ping()\n            Dim reply As System.Net.NetworkInformation.PingReply = ping.Send(server)\n            Return reply.Status = System.Net.NetworkInformation.IPStatus.Success\n        Catch\n            Return False\n        End Try\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Implement a loop that counts down from 100 by fives until it reaches zero.",
    "code": "```vb\nDim counter As Integer\ncounter = 100\n\nWhile counter >= 0\n    Console.WriteLine(counter)\n    counter -= 5\nEnd While\n```"
  },
  {
    "task": "Create a script that keeps track of inventory items being added or removed until an end signal is given.",
    "code": "```vb\nModule InventoryManager\n    Sub Main()\n        Dim inventory As Integer = 0\n        Dim input As String\n        \n        Console.WriteLine(\"Enter number of items to add or remove (precede with '-' to remove). Type 'end' to finish.\")\n        \n        While True\n            Console.Write(\"Enter command: \")\n            input = Console.ReadLine()\n            \n            If input.ToLower() = \"end\" Then\n                Exit While\n            End If\n            \n            Dim change As Integer\n            If Integer.TryParse(input, change) Then\n                inventory += change\n                Console.WriteLine(\"Updated inventory: \" & inventory)\n            Else\n                Console.WriteLine(\"Invalid input. Please enter a valid number.\")\n            End If\n        End While\n        \n        Console.WriteLine(\"Final inventory count: \" & inventory)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a program that keeps calculating the power of two for numbers until a result is greater than 1000.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim number As Integer = 1\n        Dim result As Integer = 1\n\n        While result <= 1000\n            result = 2 ^ number\n            Console.WriteLine(\"2 ^ \" & number & \" = \" & result)\n            number += 1\n        End While\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a sequence that keeps appending random numbers to an array until its length is 20.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim random As New Random()\n        Dim numbers As New List(Of Integer)()\n\n        While numbers.Count < 20\n            numbers.Add(random.Next())\n        End While\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a routine that continuously rotates an image until it matches a reference orientation.",
    "code": "```vb\nSub RotateImageUntilMatched(image As Image, referenceOrientation As Integer)\n    Dim currentOrientation As Integer = GetImageOrientation(image)\n    \n    While currentOrientation <> referenceOrientation\n        image.RotateFlip(RotateFlipType.Rotate90FlipNone)\n        currentOrientation = (currentOrientation + 90) Mod 360\n    End While\nEnd Sub\n\nFunction GetImageOrientation(image As Image) As Integer\n    ' Placeholder function to get current orientation\n    ' Replace with actual implementation\n    Return 0\nEnd Function\n```"
  },
  {
    "task": "Design a loop that keeps printing random jokes until the user stops it.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim jokes As String() = {\"Why don't scientists trust atoms? Because they make up everything!\",\n                                 \"Why did the chicken join a band? Because it had the drumsticks!\",\n                                 \"What do you call fake spaghetti? An impasta!\",\n                                 \"How do you organize a space party? You planet!\"}\n        Dim random As New Random()\n        Dim input As String = \"\"\n\n        While input.ToLower() <> \"stop\"\n            Console.WriteLine(jokes(random.Next(jokes.Length)))\n            Console.WriteLine(\"Type 'stop' to quit, or press Enter to see another joke.\")\n            input = Console.ReadLine()\n        End While\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a program that accepts user feedback and continues until a positive feedback is received.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim feedback As String\n        Dim isPositive As Boolean = False\n\n        While Not isPositive\n            Console.WriteLine(\"Please enter your feedback:\")\n            feedback = Console.ReadLine()\n            isPositive = feedback.ToLower().Contains(\"good\") Or feedback.ToLower().Contains(\"excellent\") Or feedback.ToLower().Contains(\"positive\")\n        End While\n\n        Console.WriteLine(\"Thank you for your positive feedback!\")\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a loop that repeatedly reads sensor data and stops when a stable reading is observed.",
    "code": "```vb\nDim stableReading As Boolean = False\nDim currentReading As Integer\nDim previousReading As Integer\n\nWhile Not stableReading\n    ' Simulating reading from a sensor\n    currentReading = GetSensorData()\n\n    ' Check if the reading is stable\n    If currentReading = previousReading Then\n        stableReading = True\n    End If\n\n    previousReading = currentReading\nEnd While\n\nFunction GetSensorData() As Integer\n    ' Placeholder for actual sensor reading logic\n    Return CInt(Int((100 * Rnd()) + 1))\nEnd Function\n```"
  },
  {
    "task": "Develop a system that simulates a stopwatch, counting seconds until stopped manually.",
    "code": "```vb\nModule StopwatchModule\n    Sub Main()\n        Dim stopWatchActive As Boolean = True\n        Dim seconds As Integer = 0\n\n        Console.WriteLine(\"Stopwatch started. Press 'S' to stop.\")\n\n        While stopWatchActive\n            System.Threading.Thread.Sleep(1000)\n            seconds += 1\n            Console.WriteLine(\"Seconds elapsed: \" & seconds)\n\n            If Console.KeyAvailable AndAlso Console.ReadKey(True).Key = ConsoleKey.S Then\n                stopWatchActive = False\n            End If\n        End While\n\n        Console.WriteLine(\"Stopwatch stopped at \" & seconds & \" seconds.\")\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a script that continues adding random integers to a sum until the sum exceeds 100.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim sum As Integer = 0\n        Dim rand As New Random()\n\n        While sum <= 100\n            sum += rand.Next(1, 101)\n        End While\n\n        Console.WriteLine(\"Final Sum: \" & sum)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a process to track a moving object until it stops.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim isMoving As Boolean = True\n        Dim position As Integer = 0\n\n        While isMoving\n            Console.WriteLine(\"Current position: \" & position)\n            ' Simulate movement\n            position += 1\n            ' Check if the object has stopped\n            If position >= 10 Then\n                isMoving = False\n            End If\n        End While\n\n        Console.WriteLine(\"Object has stopped at position: \" & position)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a routine to keep checking user login attempts until a successful login occurs.",
    "code": "```vb\nModule LoginModule\n    Sub Main()\n        Dim isLoggedIn As Boolean = False\n        While Not isLoggedIn\n            Console.Write(\"Enter username: \")\n            Dim username As String = Console.ReadLine()\n\n            Console.Write(\"Enter password: \")\n            Dim password As String = Console.ReadLine()\n\n            If ValidateLogin(username, password) Then\n                isLoggedIn = True\n                Console.WriteLine(\"Login successful!\")\n            Else\n                Console.WriteLine(\"Invalid credentials, please try again.\")\n            End If\n        End While\n    End Sub\n\n    Function ValidateLogin(username As String, password As String) As Boolean\n        ' Dummy validation logic\n        Return username = \"admin\" And password = \"password\"\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Write a loop that repeatedly calculates the area of a circle for radii from 1 to 10.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim radius As Integer = 1\n        While radius <= 10\n            Dim area As Double = Math.PI * radius * radius\n            Console.WriteLine(\"Radius: \" & radius & \", Area: \" & area)\n            radius += 1\n        End While\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a program that continues flipping a card from a deck until an ace is drawn.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim deck As List(Of String) = New List(Of String) From {\n            \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"\n        }\n        Dim random As New Random()\n        Dim card As String = \"\"\n\n        While card <> \"A\"\n            card = deck(random.Next(deck.Count))\n            Console.WriteLine(\"Flipped card: \" & card)\n        End While\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a loop that keeps asking for a word and stores it until a word with more than five letters is entered.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim words As New List(Of String)()\n        Dim input As String\n\n        Do\n            Console.Write(\"Enter a word: \")\n            input = Console.ReadLine()\n            words.Add(input)\n        Loop While input.Length <= 5\n\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a feature that continuously calculates the exponential growth of a population until it doubles.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim initialPopulation As Double = 1000\n        Dim currentPopulation As Double = initialPopulation\n        Dim growthRate As Double = 0.05 ' 5% growth rate\n        Dim targetPopulation As Double = initialPopulation * 2\n\n        While currentPopulation < targetPopulation\n            currentPopulation *= (1 + growthRate)\n        End While\n\n        Console.WriteLine(\"Final Population: \" & currentPopulation)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a script that repeats a string a certain number of times until a limit is reached.",
    "code": "```vb\nSub RepeatStringUntilLimit()\n    Dim str As String\n    Dim repeatedStr As String\n    Dim repeatCount As Integer\n    Dim limit As Integer\n    \n    str = \"RepeatMe\"\n    repeatedStr = \"\"\n    repeatCount = 0\n    limit = 5\n    \n    While repeatCount < limit\n        repeatedStr = repeatedStr & str\n        repeatCount = repeatCount + 1\n    Wend\n    \n    MsgBox repeatedStr\nEnd Sub\n```"
  },
  {
    "task": "Create a routine that keeps accessing an API endpoint until it returns a specific result.",
    "code": "```vb\nSub AccessApiUntilSpecificResult()\n    Dim specificResult As String\n    specificResult = \"desiredResult\"\n    \n    Dim apiResult As String\n    apiResult = \"\"\n\n    While apiResult <> specificResult\n        ' Simulate API call and update apiResult\n        apiResult = CallApiEndpoint()\n    Wend\nEnd Sub\n\nFunction CallApiEndpoint() As String\n    ' This function simulates an API call\n    ' Replace this with actual API call logic\n    CallApiEndpoint = \"desiredResult\" ' Simulated result for demonstration\nEnd Function\n```"
  },
  {
    "task": "Design a loop that continues to fetch stock prices until a certain price threshold is crossed.",
    "code": "```vb\nDim stockPrice As Double\nDim priceThreshold As Double = 150.0 ' Example threshold value\n\n' Simulate fetching initial stock price\nstockPrice = FetchStockPrice()\n\nWhile stockPrice < priceThreshold\n    ' Fetch new stock price\n    stockPrice = FetchStockPrice()\nEnd While\n\n' Function to simulate fetching stock price\nFunction FetchStockPrice() As Double\n    ' This is a placeholder for actual stock price fetching logic\n    Return New Random().NextDouble() * 200\nEnd Function\n```"
  },
  {
    "task": "Implement a process that keeps monitoring CPU usage until it drops below 10%.",
    "code": "```vb\nImports System.Diagnostics\n\nModule Module1\n    Sub Main()\n        Dim cpuCounter As New PerformanceCounter(\"Processor\", \"% Processor Time\", \"_Total\")\n        Dim cpuUsage As Single\n\n        While True\n            cpuUsage = cpuCounter.NextValue()\n            Threading.Thread.Sleep(1000) ' Wait a second to get a valid reading\n            If cpuUsage < 10 Then\n                Exit While\n            End If\n        End While\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a program that asks for a series of numbers and prints the largest once a negative number is entered.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim number As Integer\n        Dim largest As Integer = Integer.MinValue\n\n        Console.WriteLine(\"Enter numbers (a negative number to stop):\")\n        \n        While True\n            number = CInt(Console.ReadLine())\n            If number < 0 Then\n                Exit While\n            End If\n            If number > largest Then\n                largest = number\n            End If\n        End While\n\n        Console.WriteLine(\"The largest number entered is: \" & largest)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a system that keeps a heater on until the room reaches a desired temperature.",
    "code": "```vb\nModule HeaterControl\n    Sub Main()\n        Dim currentTemperature As Double = 15.0\n        Dim desiredTemperature As Double = 22.0\n        \n        While currentTemperature < desiredTemperature\n            Console.WriteLine(\"Heater is on. Current Temperature: \" & currentTemperature)\n            currentTemperature += 0.5\n            System.Threading.Thread.Sleep(1000) ' Simulate time passage\n        End While\n        \n        Console.WriteLine(\"Desired Temperature reached. Heater is off.\")\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a loop that repeatedly checks if a door is open and alerts if it remains open for too long.",
    "code": "```vb\nDim doorIsOpen As Boolean = True\nDim alertThreshold As Integer = 10\nDim openTime As Integer = 0\n\nWhile doorIsOpen\n    ' Simulate checking the door status\n    ' doorIsOpen = CheckDoorStatus()\n\n    openTime += 1\n    If openTime > alertThreshold Then\n        Console.WriteLine(\"Alert: Door has been open for too long!\")\n        Exit While\n    End If\n\n    ' Simulate waiting for the next check\n    Threading.Thread.Sleep(1000)\nEnd While\n```"
  },
  {
    "task": "Implement a feature that keeps adding random characters to a string until its length is 8.",
    "code": "```vb\nImports System\n\nModule Module1\n    Sub Main()\n        Dim random As New Random()\n        Dim result As String = \"\"\n        Dim chars As String = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"\n\n        While result.Length < 8\n            Dim index As Integer = random.Next(chars.Length)\n            result &= chars(index)\n        End While\n\n        Console.WriteLine(result)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a routine that simulates a race and continues until a participant crosses the finish line.",
    "code": "```vb\nModule RaceSimulation\n    Sub Main()\n        Dim finishLine As Integer = 100\n        Dim participantDistance As Integer = 0\n        Dim random As New Random()\n\n        While participantDistance < finishLine\n            participantDistance += random.Next(1, 10)\n            Console.WriteLine(\"Participant Distance: \" & participantDistance)\n        End While\n\n        Console.WriteLine(\"Participant has crossed the finish line!\")\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a script that keeps checking an email inbox until a specific email is received.",
    "code": "```vb\nImports System.Net\nImports System.Net.Mail\n\nModule EmailChecker\n    Sub Main()\n        Dim specificEmailReceived As Boolean = False\n        Dim emailToCheck As String = \"specific_email@example.com\"\n\n        While Not specificEmailReceived\n            ' Check the email inbox for new emails\n            Dim emails As List(Of MailMessage) = CheckInbox()\n\n            For Each email As MailMessage In emails\n                If email.From.Address = emailToCheck Then\n                    specificEmailReceived = True\n                    Exit While\n                End If\n            Next\n\n            ' Wait for some time before checking again\n            Threading.Thread.Sleep(60000) ' 60 seconds\n        End While\n\n        Console.WriteLine(\"Specific email received.\")\n    End Sub\n\n    Function CheckInbox() As List(Of MailMessage)\n        ' Simulate checking an email inbox and returning a list of emails\n        Dim emails As New List(Of MailMessage)\n\n        ' Example email, replace with actual email fetching logic\n        emails.Add(New MailMessage(\"other_email@example.com\", \"my_email@example.com\", \"Subject\", \"Body\"))\n\n        Return emails\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Create a loop that continues to play a video on repeat until the user interrupts.",
    "code": "```vb\nDim userInterrupt As Boolean = False\n\nWhile Not userInterrupt\n    ' Play video\n    Console.WriteLine(\"Playing video...\")\n    \n    ' Simulate user interrupt check\n    Console.WriteLine(\"Press 'Q' to stop or any other key to continue...\")\n    Dim key As ConsoleKeyInfo = Console.ReadKey(True)\n    If key.KeyChar = \"Q\"c Or key.KeyChar = \"q\"c Then\n        userInterrupt = True\n    End If\nEnd While\n```"
  },
  {
    "task": "Develop a process that keeps scanning for Bluetooth devices until a specific device is found.",
    "code": "```vb\nImports System.Threading\n\nModule BluetoothScanner\n\n    Sub Main()\n        Dim deviceFound As Boolean = False\n        Dim targetDeviceName As String = \"Target Device Name\"\n\n        While Not deviceFound\n            Dim devices As List(Of String) = ScanForBluetoothDevices()\n            For Each device As String In devices\n                If device = targetDeviceName Then\n                    deviceFound = True\n                    Exit While\n                End If\n            Next\n            Thread.Sleep(5000) ' Wait for 5 seconds before the next scan\n        End While\n\n        Console.WriteLine(\"Target device found!\")\n    End Sub\n\n    Function ScanForBluetoothDevices() As List(Of String)\n        ' Dummy function to simulate scanning for Bluetooth devices\n        ' Replace with actual Bluetooth scanning code\n        Return New List(Of String) From {\"Device A\", \"Device B\", \"Target Device Name\"}\n    End Function\n\nEnd Module\n```"
  },
  {
    "task": "Implement a script that continuously captures images from a webcam until a motion is detected.",
    "code": "```vb\nImports AForge.Video\nImports AForge.Video.DirectShow\nImports AForge.Vision.Motion\n\nModule Module1\n    Dim videoSource As VideoCaptureDevice\n    Dim motionDetector As New SimpleBackgroundModelingDetector()\n\n    Sub Main()\n        Dim videoDevices As New FilterInfoCollection(FilterCategory.VideoInputDevice)\n        videoSource = New VideoCaptureDevice(videoDevices(0).MonikerString)\n        AddHandler videoSource.NewFrame, AddressOf Video_NewFrame\n\n        videoSource.Start()\n\n        While True\n            ' The loop will continue until motion is detected\n        End While\n\n        videoSource.SignalToStop()\n    End Sub\n\n    Private Sub Video_NewFrame(sender As Object, eventArgs As NewFrameEventArgs)\n        Dim bitmap As Bitmap = DirectCast(eventArgs.Frame.Clone(), Bitmap)\n        Dim motionLevel As Single = motionDetector.ProcessFrame(bitmap)\n\n        If motionLevel > 0.02 Then ' Arbitrary motion threshold\n            videoSource.SignalToStop()\n        End If\n\n        bitmap.Dispose()\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a program that keeps playing a sound file until the user presses a mute button.",
    "code": "```vb\nImports System.Media\n\nPublic Class SoundPlayerForm\n    Private WithEvents muteButton As Button\n    Private soundPlayer As SoundPlayer\n    Private isMuted As Boolean = False\n\n    Public Sub New()\n        Me.Text = \"Sound Player\"\n        Me.Size = New Size(300, 200)\n\n        muteButton = New Button() With {\n            .Text = \"Mute\",\n            .Location = New Point(100, 70)\n        }\n        AddHandler muteButton.Click, AddressOf MuteButton_Click\n\n        Me.Controls.Add(muteButton)\n\n        soundPlayer = New SoundPlayer(\"path_to_sound_file.wav\")\n        soundPlayer.PlayLooping()\n\n        Dim soundThread As New Threading.Thread(AddressOf PlaySoundLoop)\n        soundThread.Start()\n    End Sub\n\n    Private Sub PlaySoundLoop()\n        While Not isMuted\n            ' Sound is playing\n        End While\n        soundPlayer.Stop()\n    End Sub\n\n    Private Sub MuteButton_Click(sender As Object, e As EventArgs)\n        isMuted = True\n    End Sub\nEnd Class\n```"
  },
  {
    "task": "Create a loop that repeatedly generates a random password until it meets certain security criteria.",
    "code": "```vb\nImports System.Text\n\nModule Module1\n    Sub Main()\n        Dim password As String = \"\"\n        Dim rand As New Random()\n\n        While Not IsSecure(password)\n            password = GenerateRandomPassword(rand)\n        End While\n\n        Console.WriteLine(\"Generated secure password: \" & password)\n    End Sub\n\n    Function IsSecure(ByVal password As String) As Boolean\n        If password.Length < 8 Then Return False\n        If Not password.Any(AddressOf Char.IsUpper) Then Return False\n        If Not password.Any(AddressOf Char.IsLower) Then Return False\n        If Not password.Any(AddressOf Char.IsDigit) Then Return False\n        Return True\n    End Function\n\n    Function GenerateRandomPassword(ByVal rand As Random) As String\n        Dim length As Integer = rand.Next(8, 16)\n        Dim builder As New StringBuilder(length)\n\n        For i As Integer = 1 To length\n            Dim ascii As Integer = rand.Next(33, 127)\n            builder.Append(ChrW(ascii))\n        Next\n\n        Return builder.ToString()\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Write a process that keeps checking for file changes in a directory and logs them until stopped.",
    "code": "```vb\nImports System.IO\n\nModule Module1\n    Sub Main()\n        Dim path As String = \"C:\\YourDirectoryPath\"\n        Dim watcher As New FileSystemWatcher()\n\n        watcher.Path = path\n        watcher.NotifyFilter = NotifyFilters.LastWrite Or NotifyFilters.FileName\n        watcher.Filter = \"*.*\"\n\n        AddHandler watcher.Changed, AddressOf OnChanged\n        AddHandler watcher.Created, AddressOf OnChanged\n        AddHandler watcher.Deleted, AddressOf OnChanged\n        AddHandler watcher.Renamed, AddressOf OnRenamed\n\n        watcher.EnableRaisingEvents = True\n\n        Console.WriteLine(\"Press 'q' to quit.\")\n        While Console.Read() <> Asc(\"q\"c)\n        End While\n    End Sub\n\n    Private Sub OnChanged(source As Object, e As FileSystemEventArgs)\n        Dim logMessage As String = $\"{e.ChangeType} file: {e.FullPath} at {DateTime.Now}\"\n        Console.WriteLine(logMessage)\n    End Sub\n\n    Private Sub OnRenamed(source As Object, e As RenamedEventArgs)\n        Dim logMessage As String = $\"Renamed file: {e.OldFullPath} to {e.FullPath} at {DateTime.Now}\"\n        Console.WriteLine(logMessage)\n    End Sub\nEnd Module\n```"
  }
]