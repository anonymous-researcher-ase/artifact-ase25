[
  {
    "task": "Create a function that takes two boolean inputs and returns true if both are true using logical AND.",
    "code": "```vb\nFunction BothTrue(input1 As Boolean, input2 As Boolean) As Boolean\n    Return input1 And input2\nEnd Function\n```"
  },
  {
    "task": "Write a script to check if either of two given conditions are met using logical OR.",
    "code": "```vb\nModule LogicalOperations\n    Sub Main()\n        Dim condition1 As Boolean = True\n        Dim condition2 As Boolean = False\n        \n        If condition1 Or condition2 Then\n            Console.WriteLine(\"At least one condition is met.\")\n        Else\n            Console.WriteLine(\"Neither condition is met.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a program that negates a boolean variable using logical NOT.",
    "code": "```vb\nModule Program\n    Sub Main()\n        Dim myBoolean As Boolean = True\n        myBoolean = Not myBoolean\n        Console.WriteLine(myBoolean)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a feature that determines if a number is within a specific range using logical operators.",
    "code": "```vb\nModule Program\n    Sub Main()\n        Dim number As Integer = 15\n        Dim lowerBound As Integer = 10\n        Dim upperBound As Integer = 20\n\n        If number >= lowerBound AndAlso number <= upperBound Then\n            Console.WriteLine(\"The number is within the range.\")\n        Else\n            Console.WriteLine(\"The number is outside the range.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a system that checks if a user has both read and write permissions using logical AND.",
    "code": "```vb\nModule PermissionCheck\n    Sub Main()\n        Dim hasReadPermission As Boolean = True\n        Dim hasWritePermission As Boolean = True\n\n        If hasReadPermission And hasWritePermission Then\n            Console.WriteLine(\"User has both read and write permissions.\")\n        Else\n            Console.WriteLine(\"User does not have both read and write permissions.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function to verify if a string is neither empty nor null using logical NOT.",
    "code": "```vb\nFunction IsStringValid(inputStr As String) As Boolean\n    Return Not (String.IsNullOrEmpty(inputStr))\nEnd Function\n```"
  },
  {
    "task": "Create a conditional statement that executes a block of code if either of two expressions are true using logical OR.",
    "code": "```vb\nDim expression1 As Boolean = True\nDim expression2 As Boolean = False\n\nIf expression1 Or expression2 Then\n    ' Code block to execute if either expression1 or expression2 is True\n    Console.WriteLine(\"At least one expression is true.\")\nEnd If\n```"
  },
  {
    "task": "Build a program that inverts the truth value of a given condition using logical NOT.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim condition As Boolean = True\n        Dim invertedCondition As Boolean = Not condition\n        Console.WriteLine(\"Original Condition: \" & condition)\n        Console.WriteLine(\"Inverted Condition: \" & invertedCondition)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Compose a function to return true if a list is not empty using logical NOT.",
    "code": "```vb\nFunction IsListNotEmpty(ByVal lst As List(Of Object)) As Boolean\n    Return Not lst.Count = 0\nEnd Function\n```"
  },
  {
    "task": "Develop a filter that selects items from a collection only if they meet multiple criteria using logical AND.",
    "code": "```vb\nModule Program\n    Sub Main()\n        Dim items As List(Of Integer) = New List(Of Integer) From {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n        Dim filteredItems As List(Of Integer) = items.Where(Function(item) item > 3 AndAlso item < 8).ToList()\n        \n        For Each item In filteredItems\n            Console.WriteLine(item)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a script that checks if a value is outside a given range using logical OR.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim value As Integer = 15\n        Dim lowerBound As Integer = 10\n        Dim upperBound As Integer = 20\n\n        If value < lowerBound Or value > upperBound Then\n            Console.WriteLine(\"Value is outside the range\")\n        Else\n            Console.WriteLine(\"Value is within the range\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a small program to toggle a boolean flag using logical NOT.",
    "code": "```vb\nModule Program\n    Sub Main()\n        Dim flag As Boolean = False\n        Console.WriteLine(\"Initial flag value: \" & flag.ToString())\n\n        ' Toggle the flag using logical NOT\n        flag = Not flag\n        Console.WriteLine(\"Toggled flag value: \" & flag.ToString())\n        \n        ' Toggle again to demonstrate the operation\n        flag = Not flag\n        Console.WriteLine(\"Toggled again flag value: \" & flag.ToString())\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a feature that evaluates if a username is both unique and valid using logical AND.",
    "code": "```vb\nModule Module1\n    Function IsUsernameValid(username As String) As Boolean\n        ' Replace the logic below with actual checks\n        Dim isUnique As Boolean = CheckUsernameUniqueness(username)\n        Dim isValid As Boolean = CheckUsernameValidity(username)\n        \n        Return isUnique AndAlso isValid\n    End Function\n\n    Function CheckUsernameUniqueness(username As String) As Boolean\n        ' Placeholder for uniqueness check logic\n        Return True\n    End Function\n\n    Function CheckUsernameValidity(username As String) As Boolean\n        ' Placeholder for validity check logic\n        Return True\n    End Function\n\n    Sub Main()\n        Dim username As String = \"exampleUser\"\n        Dim result As Boolean = IsUsernameValid(username)\n        Console.WriteLine(\"Is username valid and unique? \" & result)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a conditional to perform an action if neither of two flags are set using logical NOT.",
    "code": "```vb\nDim flag1 As Boolean = False\nDim flag2 As Boolean = False\n\nIf Not flag1 And Not flag2 Then\n    ' Perform the action here\nEnd If\n```"
  },
  {
    "task": "Write a function that returns true if at least one of multiple boolean inputs is true using logical OR.",
    "code": "```vb\nFunction AtLeastOneTrue(ParamArray args() As Boolean) As Boolean\n    Dim result As Boolean = False\n    For Each arg As Boolean In args\n        result = result Or arg\n    Next\n    Return result\nEnd Function\n```"
  },
  {
    "task": "Create a loop that continues executing as long as two conditions are both false using logical NOT and AND.",
    "code": "```vb\nDim condition1 As Boolean = False\nDim condition2 As Boolean = False\n\nDo While Not condition1 And Not condition2\n    ' Loop body goes here\n    ' Update condition1 or condition2 as needed to eventually exit the loop\nLoop\n```"
  },
  {
    "task": "Develop a sequence that checks if a character is either a vowel or a consonant using logical OR.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim inputChar As Char\n        Console.WriteLine(\"Enter a character: \")\n        inputChar = Console.ReadLine().ToLower()\n\n        If inputChar = \"a\"c Or inputChar = \"e\"c Or inputChar = \"i\"c Or inputChar = \"o\"c Or inputChar = \"u\"c Then\n            Console.WriteLine(\"The character is a vowel.\")\n        ElseIf Char.IsLetter(inputChar) Then\n            Console.WriteLine(\"The character is a consonant.\")\n        Else\n            Console.WriteLine(\"The input is not a valid letter.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a validation that ensures a password is both of minimum length and contains numbers using logical AND.",
    "code": "```vb\nFunction IsValidPassword(password As String) As Boolean\n    Dim hasMinimumLength As Boolean = password.Length >= 8\n    Dim containsNumber As Boolean = password Like \"*[0-9]*\"\n    Return hasMinimumLength And containsNumber\nEnd Function\n```"
  },
  {
    "task": "Compose a test to determine if a point is not within a circle using logical NOT.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim pointX As Double = 5.0\n        Dim pointY As Double = 3.0\n        Dim circleCenterX As Double = 0.0\n        Dim circleCenterY As Double = 0.0\n        Dim circleRadius As Double = 4.0\n\n        Dim distanceSquared As Double = (pointX - circleCenterX) ^ 2 + (pointY - circleCenterY) ^ 2\n        Dim radiusSquared As Double = circleRadius ^ 2\n\n        Dim isOutsideCircle As Boolean = Not (distanceSquared <= radiusSquared)\n\n        Console.WriteLine(\"Point is outside the circle: \" & isOutsideCircle)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function to decide if a user is either an admin or an editor using logical OR.",
    "code": "```vb\nFunction IsAdminOrEditor(userRole As String) As Boolean\n    Return userRole = \"admin\" Or userRole = \"editor\"\nEnd Function\n```"
  },
  {
    "task": "Create a conditional statement to trigger an alert if two sensors both detect motion using logical AND.",
    "code": "```vb\nDim sensor1DetectsMotion As Boolean = True\nDim sensor2DetectsMotion As Boolean = True\n\nIf sensor1DetectsMotion And sensor2DetectsMotion Then\n    MsgBox(\"Alert: Both sensors detect motion!\")\nEnd If\n```"
  },
  {
    "task": "Design a program to validate an email format and ensure it contains a domain using logical AND.",
    "code": "```vb\nModule EmailValidator\n    Sub Main()\n        Dim email As String\n        Console.WriteLine(\"Enter an email address:\")\n        email = Console.ReadLine()\n\n        If ValidateEmail(email) Then\n            Console.WriteLine(\"Email format is valid.\")\n        Else\n            Console.WriteLine(\"Email format is invalid.\")\n        End If\n    End Sub\n\n    Function ValidateEmail(ByVal email As String) As Boolean\n        Return email.Contains(\"@\") And email.Contains(\".\")\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Develop a method to confirm that a transaction is neither fraudulent nor unauthorized using logical NOT.",
    "code": "```vb\nPublic Class TransactionValidator\n    Public Function IsTransactionValid(isFraudulent As Boolean, isUnauthorized As Boolean) As Boolean\n        Return Not isFraudulent And Not isUnauthorized\n    End Function\nEnd Class\n```"
  },
  {
    "task": "Write a function that outputs true if a file is either missing or empty using logical OR.",
    "code": "```vb\nFunction IsFileMissingOrEmpty(filePath As String) As Boolean\n    Return Not IO.File.Exists(filePath) OrElse IO.File.ReadAllText(filePath) = String.Empty\nEnd Function\n```"
  },
  {
    "task": "Implement a system to check if a student's grade is neither failing nor incomplete using logical NOT.",
    "code": "```vb\nModule GradeCheck\n    Sub Main()\n        Dim grade As String = \"B\"\n        Dim isPassing As Boolean = Not (grade = \"F\" Or grade = \"I\")\n        \n        If isPassing Then\n            Console.WriteLine(\"The student's grade is passing.\")\n        Else\n            Console.WriteLine(\"The student's grade is either failing or incomplete.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a script that executes a command if a file is both readable and writable using logical AND.",
    "code": "```vb\nImports System.IO\n\nModule Module1\n    Sub Main()\n        Dim filePath As String = \"example.txt\"\n\n        If File.Exists(filePath) AndAlso File.GetAttributes(filePath).HasFlag(FileAttributes.ReadOnly) = False Then\n            Console.WriteLine(\"The file is both readable and writable.\")\n            ' Execute your command here\n        Else\n            Console.WriteLine(\"The file is not readable and writable.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Compose a function to determine if a temperature is not within a safe operating range using logical NOT.",
    "code": "```vb\nFunction IsTemperatureUnsafe(ByVal temperature As Double) As Boolean\n    Dim safeMin As Double = 15.0\n    Dim safeMax As Double = 25.0\n    Return Not (temperature >= safeMin And temperature <= safeMax)\nEnd Function\n```"
  },
  {
    "task": "Design a check to see if a car is either out of fuel or needs maintenance using logical OR.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim outOfFuel As Boolean = True ' Example value\n        Dim needsMaintenance As Boolean = False ' Example value\n        \n        If outOfFuel Or needsMaintenance Then\n            Console.WriteLine(\"The car is either out of fuel or needs maintenance.\")\n        Else\n            Console.WriteLine(\"The car is fine.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a routine that ensures a network connection is both stable and secure using logical AND.",
    "code": "```vb\nModule NetworkCheck\n    Sub Main()\n        Dim isStable As Boolean = CheckStability()\n        Dim isSecure As Boolean = CheckSecurity()\n\n        If isStable And isSecure Then\n            Console.WriteLine(\"Network connection is stable and secure.\")\n        Else\n            Console.WriteLine(\"Network connection is not stable or secure.\")\n        End If\n    End Sub\n\n    Function CheckStability() As Boolean\n        ' Placeholder for actual stability check logic\n        Return True ' Assume stable for example purposes\n    End Function\n\n    Function CheckSecurity() As Boolean\n        ' Placeholder for actual security check logic\n        Return True ' Assume secure for example purposes\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Write a conditional to print a message if a user is not logged in using logical NOT.",
    "code": "```vb\nDim userLoggedIn As Boolean = False\n\nIf Not userLoggedIn Then\n    Console.WriteLine(\"User is not logged in.\")\nEnd If\n```"
  },
  {
    "task": "Create a function that checks if a number is both even and positive using logical AND.",
    "code": "```vb\nFunction IsEvenAndPositive(ByVal number As Integer) As Boolean\n    Return (number Mod 2 = 0) And (number > 0)\nEnd Function\n```"
  },
  {
    "task": "Implement a feature that turns off a device if neither of two switches are on using logical NOT.",
    "code": "```vb\nModule DeviceControl\n    Sub Main()\n        Dim switch1 As Boolean = False\n        Dim switch2 As Boolean = False\n        Dim deviceOn As Boolean = True\n\n        If Not (switch1 Or switch2) Then\n            deviceOn = False\n        End If\n\n        Console.WriteLine(\"Device is on: \" & deviceOn)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Compose a script to alert if a server is either down or running slow using logical OR.",
    "code": "```vb\nDim serverDown As Boolean = True\nDim serverSlow As Boolean = False\n\nIf serverDown Or serverSlow Then\n    MsgBox(\"Alert: The server is either down or running slow.\")\nEnd If\n```"
  },
  {
    "task": "Design a validation method to ensure a form field is not empty using logical NOT.",
    "code": "```vb\nFunction IsFieldNotEmpty(fieldValue As String) As Boolean\n    Return Not String.IsNullOrWhiteSpace(fieldValue)\nEnd Function\n```"
  },
  {
    "task": "Write a program to determine if two strings are both non-empty using logical AND.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim str1 As String = \"Hello\"\n        Dim str2 As String = \"World\"\n        Dim areBothNonEmpty As Boolean\n\n        areBothNonEmpty = (str1 <> \"\") And (str2 <> \"\")\n\n        Console.WriteLine(\"Both strings are non-empty: \" & areBothNonEmpty)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a function that checks if a number is either prime or a perfect square using logical OR.",
    "code": "```vb\nModule Module1\n\n    Sub Main()\n        Dim number As Integer = 17 ' Example number\n        Console.WriteLine(IsPrimeOrPerfectSquare(number))\n    End Sub\n\n    Function IsPrimeOrPerfectSquare(ByVal n As Integer) As Boolean\n        Return IsPrime(n) Or IsPerfectSquare(n)\n    End Function\n\n    Function IsPrime(ByVal n As Integer) As Boolean\n        If n <= 1 Then Return False\n        For i As Integer = 2 To Math.Sqrt(n)\n            If n Mod i = 0 Then Return False\n        Next\n        Return True\n    End Function\n\n    Function IsPerfectSquare(ByVal n As Integer) As Boolean\n        Dim root As Integer = CInt(Math.Sqrt(n))\n        Return root * root = n\n    End Function\n\nEnd Module\n```"
  },
  {
    "task": "Develop a script to ensure a user is either an adult or has parental consent using logical OR.",
    "code": "```vb\nModule Program\n    Sub Main()\n        Dim isAdult As Boolean\n        Dim hasParentalConsent As Boolean\n\n        ' Example input\n        isAdult = False\n        hasParentalConsent = True\n\n        If isAdult Or hasParentalConsent Then\n            Console.WriteLine(\"Access granted.\")\n        Else\n            Console.WriteLine(\"Access denied.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a condition to execute a task if a variable is neither zero nor negative using logical NOT.",
    "code": "```vb\nDim number As Integer = 5\n\nIf Not (number <= 0) Then\n    ' Task to execute when number is neither zero nor negative\n    Console.WriteLine(\"The number is positive and non-zero.\")\nEnd If\n```"
  },
  {
    "task": "Compose a method to verify if a system is both up-to-date and functioning using logical AND.",
    "code": "```vb\nModule SystemCheck\n    Function IsSystemUpToDateAndFunctioning(isUpToDate As Boolean, isFunctioning As Boolean) As Boolean\n        Return isUpToDate And isFunctioning\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Write a function that returns true if a list contains neither duplicates nor null values using logical NOT.",
    "code": "```vb\nFunction NoDuplicatesOrNulls(ByVal lst As List(Of Object)) As Boolean\n    Return Not lst.Contains(Nothing) AndAlso lst.Distinct().Count() = lst.Count\nEnd Function\n```"
  },
  {
    "task": "Create a script to perform an action if a temperature is either too high or too low using logical OR.",
    "code": "```vb\nSub CheckTemperature()\n    Dim temperature As Double\n    temperature = 25.0 ' Example temperature value\n\n    If temperature < 18.0 Or temperature > 30.0 Then\n        MsgBox \"Temperature is out of the acceptable range!\"\n    End If\nEnd Sub\n```"
  },
  {
    "task": "Design a feature to toggle an option if a setting is not enabled using logical NOT.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim settingEnabled As Boolean = False\n        Dim optionToggled As Boolean = False\n        \n        If Not settingEnabled Then\n            optionToggled = Not optionToggled\n        End If\n\n        Console.WriteLine(\"Option Toggled: \" & optionToggled)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a check to ensure a username is both available and meets length requirements using logical AND.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim username As String = \"NewUser123\"\n        Dim isAvailable As Boolean = True\n        Dim minLength As Integer = 5\n        Dim maxLength As Integer = 15\n\n        If isAvailable And username.Length >= minLength And username.Length <= maxLength Then\n            Console.WriteLine(\"The username is available and meets the length requirements.\")\n        Else\n            Console.WriteLine(\"The username does not meet the criteria.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a function that returns true if a number is neither too large nor too small using logical NOT.",
    "code": "```vb\nFunction IsNumberInRange(num As Integer) As Boolean\n    Dim tooLarge As Boolean = num > 100\n    Dim tooSmall As Boolean = num < 10\n    Return Not (tooLarge Or tooSmall)\nEnd Function\n```"
  },
  {
    "task": "Write a conditional to print a warning if a disk is either full or nearly full using logical OR.",
    "code": "```vb\nDim diskFull As Boolean = True ' Example value\nDim diskNearlyFull As Boolean = False ' Example value\n\nIf diskFull Or diskNearlyFull Then\n    Console.WriteLine(\"Warning: Disk is full or nearly full.\")\nEnd If\n```"
  },
  {
    "task": "Create a routine to validate that two dates are both within a valid range using logical AND.",
    "code": "```vb\nModule DateValidator\n    Sub Main()\n        Dim date1 As Date = #6/15/2023#\n        Dim date2 As Date = #11/2/2023#\n        Dim startDate As Date = #1/1/2023#\n        Dim endDate As Date = #12/31/2023#\n\n        If ValidateDates(date1, date2, startDate, endDate) Then\n            Console.WriteLine(\"Both dates are within the valid range.\")\n        Else\n            Console.WriteLine(\"One or both dates are outside the valid range.\")\n        End If\n    End Sub\n\n    Function ValidateDates(ByVal date1 As Date, ByVal date2 As Date, ByVal startDate As Date, ByVal endDate As Date) As Boolean\n        Return (date1 >= startDate And date1 <= endDate) And (date2 >= startDate And date2 <= endDate)\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Compose a function to decide if a person is either a minor or a senior using logical OR.",
    "code": "```vb\nFunction IsMinorOrSenior(age As Integer) As Boolean\n    Return age < 18 Or age >= 65\nEnd Function\n```"
  },
  {
    "task": "Design a script to execute a task if a condition is not met using logical NOT.",
    "code": "```vb\nModule Program\n    Sub Main()\n        Dim condition As Boolean = False\n\n        If Not condition Then\n            ExecuteTask()\n        End If\n    End Sub\n\n    Sub ExecuteTask()\n        Console.WriteLine(\"Task executed.\")\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a program to verify if a process is neither running nor scheduled using logical NOT.",
    "code": "```vb\nModule ProcessChecker\n    Sub Main()\n        Dim isRunning As Boolean = False\n        Dim isScheduled As Boolean = False\n\n        If Not isRunning AndAlso Not isScheduled Then\n            Console.WriteLine(\"The process is neither running nor scheduled.\")\n        Else\n            Console.WriteLine(\"The process is either running or scheduled.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a feature that confirms a file is both accessible and not locked using logical AND.",
    "code": "```vb\nImports System.IO\n\nModule FileAccessChecker\n    Sub Main()\n        Dim filePath As String = \"C:\\example\\testfile.txt\"\n\n        If File.Exists(filePath) AndAlso Not IsFileLocked(New FileInfo(filePath)) Then\n            Console.WriteLine(\"The file is accessible and not locked.\")\n        Else\n            Console.WriteLine(\"The file is either not accessible or locked.\")\n        End If\n    End Sub\n\n    Private Function IsFileLocked(file As FileInfo) As Boolean\n        Try\n            Using stream As FileStream = file.Open(FileMode.Open, FileAccess.Read, FileShare.None)\n                stream.Close()\n            End Using\n        Catch ex As IOException\n            Return True\n        End Try\n\n        Return False\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Write a script to check if a device is either offline or in maintenance mode using logical OR.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim isOffline As Boolean = True\n        Dim isInMaintenanceMode As Boolean = False\n\n        If isOffline Or isInMaintenanceMode Then\n            Console.WriteLine(\"The device is either offline or in maintenance mode.\")\n        Else\n            Console.WriteLine(\"The device is online and not in maintenance mode.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a function to ensure a password is both complex and unique using logical AND.",
    "code": "```vb\nModule PasswordValidator\n    Dim existingPasswords As New List(Of String)()\n\n    Function IsPasswordComplexAndUnique(password As String) As Boolean\n        Dim isComplex As Boolean = password.Length >= 8 AndAlso\n                                   password.Any(AddressOf Char.IsUpper) AndAlso\n                                   password.Any(AddressOf Char.IsLower) AndAlso\n                                   password.Any(AddressOf Char.IsDigit) AndAlso\n                                   password.Any(AddressOf Char.IsSymbol)\n        \n        Dim isUnique As Boolean = Not existingPasswords.Contains(password)\n        \n        Return isComplex AndAlso isUnique\n    End Function\n\n    Sub Main()\n        ' Example usage:\n        Dim password As String = \"Example1!\"\n        If IsPasswordComplexAndUnique(password) Then\n            existingPasswords.Add(password)\n            Console.WriteLine(\"Password is complex and unique.\")\n        Else\n            Console.WriteLine(\"Password is not valid.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a validation that ensures a value is not negative using logical NOT.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim value As Integer\n        Console.WriteLine(\"Enter a number:\")\n        value = Convert.ToInt32(Console.ReadLine())\n\n        If Not (value < 0) Then\n            Console.WriteLine(\"The value is not negative.\")\n        Else\n            Console.WriteLine(\"The value is negative.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a check to see if a user has either exceeded their quota or is nearing it using logical OR.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim quotaLimit As Integer = 100\n        Dim userUsage As Integer = 95\n        Dim nearingThreshold As Integer = 90\n\n        If userUsage > quotaLimit OrElse userUsage >= nearingThreshold Then\n            Console.WriteLine(\"User has exceeded their quota or is nearing it.\")\n        Else\n            Console.WriteLine(\"User is within quota limits.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a routine to confirm that a user is both authenticated and authorized using logical AND.",
    "code": "```vb\nModule AuthorizationModule\n    Sub Main()\n        Dim isAuthenticated As Boolean = True\n        Dim isAuthorized As Boolean = True\n\n        If isAuthenticated AndAlso isAuthorized Then\n            Console.WriteLine(\"User is authenticated and authorized.\")\n        Else\n            Console.WriteLine(\"User is not authenticated or not authorized.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Compose a function to determine if a light is either on or blinking using logical OR.",
    "code": "```vb\nFunction IsLightOnOrBlinking(isOn As Boolean, isBlinking As Boolean) As Boolean\n    Return isOn Or isBlinking\nEnd Function\n```"
  },
  {
    "task": "Write a script that executes a command if a network connection is neither weak nor unstable using logical NOT.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim isWeakConnection As Boolean = False\n        Dim isUnstableConnection As Boolean = False\n        \n        If Not isWeakConnection AndAlso Not isUnstableConnection Then\n            ExecuteCommand()\n        End If\n    End Sub\n\n    Sub ExecuteCommand()\n        ' Your command execution logic here\n        Console.WriteLine(\"Executing command...\")\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a program to verify that a sensor is both calibrated and active using logical AND.",
    "code": "```vb\nModule SensorVerification\n    Sub Main()\n        Dim isCalibrated As Boolean = True\n        Dim isActive As Boolean = True\n\n        If isCalibrated And isActive Then\n            Console.WriteLine(\"The sensor is both calibrated and active.\")\n        Else\n            Console.WriteLine(\"The sensor is either not calibrated or not active.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a feature to alert if a process is either overdue or incomplete using logical OR.",
    "code": "```vb\nModule ProcessChecker\n    Sub Main()\n        Dim isOverdue As Boolean = True\n        Dim isIncomplete As Boolean = False\n\n        If isOverdue Or isIncomplete Then\n            AlertProcessStatus()\n        End If\n    End Sub\n\n    Sub AlertProcessStatus()\n        Console.WriteLine(\"Alert: The process is either overdue or incomplete.\")\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a script to check if a person is neither a guest nor a temporary user using logical NOT.",
    "code": "```vb\nModule Program\n    Sub Main()\n        Dim isGuest As Boolean = False\n        Dim isTemporaryUser As Boolean = False\n\n        If Not (isGuest Or isTemporaryUser) Then\n            Console.WriteLine(\"The person is neither a guest nor a temporary user.\")\n        Else\n            Console.WriteLine(\"The person is either a guest or a temporary user.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a function to toggle a light if a switch is not pressed using logical NOT.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim lightOn As Boolean = False\n        Dim switchPressed As Boolean = False\n\n        lightOn = Not switchPressed\n\n        Console.WriteLine(\"Light is on: \" & lightOn)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a conditional to trigger an event if a file is either corrupted or missing using logical OR.",
    "code": "```vb\nDim fileCorrupted As Boolean = True\nDim fileMissing As Boolean = False\n\nIf fileCorrupted Or fileMissing Then\n    ' Trigger event for corrupted or missing file\n    MsgBox(\"The file is either corrupted or missing.\")\nEnd If\n```"
  },
  {
    "task": "Create a routine that verifies if a vehicle is both insured and registered using logical AND.",
    "code": "```vb\nFunction IsVehicleInsuredAndRegistered(ByVal isInsured As Boolean, ByVal isRegistered As Boolean) As Boolean\n    Return isInsured And isRegistered\nEnd Function\n```"
  },
  {
    "task": "Compose a method to check if an account is either overdrawn or flagged using logical OR.",
    "code": "```vb\nPublic Class Account\n    Public Property IsOverdrawn As Boolean\n    Public Property IsFlagged As Boolean\n\n    Public Function CheckAccountStatus() As Boolean\n        Return IsOverdrawn OrElse IsFlagged\n    End Function\nEnd Class\n```"
  },
  {
    "task": "Design a program to ensure an application is both installed and updated using logical AND.",
    "code": "```vb\nModule Program\n    Sub Main()\n        Dim isInstalled As Boolean = True\n        Dim isUpdated As Boolean = True\n\n        If isInstalled And isUpdated Then\n            Console.WriteLine(\"The application is both installed and updated.\")\n        Else\n            Console.WriteLine(\"The application is not ready.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a function that returns true if a number is neither divisible by 3 nor 5 using logical NOT.",
    "code": "```vb\nFunction IsNotDivisibleBy3Or5(ByVal number As Integer) As Boolean\n    Return Not (number Mod 3 = 0 Or number Mod 5 = 0)\nEnd Function\n```"
  },
  {
    "task": "Implement a script that alerts if a device is either overheating or underperforming using logical OR.",
    "code": "```vb\nModule DeviceStatusChecker\n    Sub Main()\n        Dim temperature As Integer = 85 ' Example temperature value\n        Dim performance As Integer = 50 ' Example performance level\n\n        Dim isOverheating As Boolean = temperature > 80\n        Dim isUnderperforming As Boolean = performance < 60\n\n        If isOverheating Or isUnderperforming Then\n            Console.WriteLine(\"Alert: Device is either overheating or underperforming.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function to validate that a directory is both writable and not full using logical AND.",
    "code": "```vb\nFunction IsDirectoryWritableAndNotFull(directoryPath As String) As Boolean\n    Dim dirInfo As New IO.DirectoryInfo(directoryPath)\n    Dim isWritable As Boolean = False\n    Dim isNotFull As Boolean = False\n\n    Try\n        ' Check writability\n        Dim testFile As String = IO.Path.Combine(directoryPath, IO.Path.GetRandomFileName())\n        IO.File.Create(testFile).Dispose()\n        IO.File.Delete(testFile)\n        isWritable = True\n    Catch ex As Exception\n        isWritable = False\n    End Try\n\n    ' Check if directory is not full\n    Try\n        Dim driveInfo As New IO.DriveInfo(dirInfo.Root.FullName)\n        isNotFull = driveInfo.AvailableFreeSpace > 0\n    Catch ex As Exception\n        isNotFull = False\n    End Try\n\n    Return isWritable And isNotFull\nEnd Function\n```"
  },
  {
    "task": "Create a conditional statement that executes if a button is not clicked using logical NOT.",
    "code": "```vb\nPrivate Sub Button1_Click(sender As Object, e As EventArgs) Handles Button1.Click\n    ' Assume a boolean variable that indicates if the button is clicked\n    Dim isButtonClicked As Boolean = False\n    \n    If Not isButtonClicked Then\n        ' Code to execute if the button is not clicked\n    End If\nEnd Sub\n```"
  },
  {
    "task": "Design a check to ensure a transaction is both verified and complete using logical AND.",
    "code": "```vb\nDim isVerified As Boolean = True\nDim isComplete As Boolean = True\n\nIf isVerified And isComplete Then\n    Console.WriteLine(\"The transaction is verified and complete.\")\nElse\n    Console.WriteLine(\"The transaction is not verified or complete.\")\nEnd If\n```"
  },
  {
    "task": "Develop a routine to determine if a string is either uppercase or lowercase using logical OR.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim inputString As String = \"ExampleString\"\n        If IsUppercaseOrLowercase(inputString) Then\n            Console.WriteLine(\"The string is either all uppercase or all lowercase.\")\n        Else\n            Console.WriteLine(\"The string is neither all uppercase nor all lowercase.\")\n        End If\n    End Sub\n\n    Function IsUppercaseOrLowercase(ByVal str As String) As Boolean\n        Return str = str.ToUpper() Or str = str.ToLower()\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Implement a feature to execute a task if a variable is neither null nor undefined using logical NOT.",
    "code": "```vb\nDim myVar As Object = Nothing\n\nIf Not (myVar Is Nothing) Then\n    ' Execute the task\n    Console.WriteLine(\"Executing the task because myVar is neither null nor undefined.\")\nEnd If\n```"
  },
  {
    "task": "Compose a function to return true if a date is either today or tomorrow using logical OR.",
    "code": "```vb\nFunction IsTodayOrTomorrow(ByVal inputDate As Date) As Boolean\n    Dim today As Date = Date.Today\n    Dim tomorrow As Date = today.AddDays(1)\n    Return inputDate = today Or inputDate = tomorrow\nEnd Function\n```"
  },
  {
    "task": "Write a script to confirm that a system is both running and not in maintenance mode using logical AND.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim isRunning As Boolean = True\n        Dim isInMaintenanceMode As Boolean = False\n\n        If isRunning And Not isInMaintenanceMode Then\n            Console.WriteLine(\"The system is running and not in maintenance mode.\")\n        Else\n            Console.WriteLine(\"The system is either not running or in maintenance mode.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a program to verify if a text field is neither empty nor exceeds character limit using logical NOT.",
    "code": "```vb\nModule Program\n    Sub Main()\n        Dim textField As String = \"Sample Text\"\n        Dim characterLimit As Integer = 20\n\n        If Not (String.IsNullOrEmpty(textField) OrElse textField.Length > characterLimit) Then\n            Console.WriteLine(\"Text field is valid.\")\n        Else\n            Console.WriteLine(\"Text field is invalid.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a feature that checks if a user has either admin privileges or editor rights using logical OR.",
    "code": "```vb\nModule PrivilegeChecker\n    Sub Main()\n        Dim isAdmin As Boolean = False\n        Dim isEditor As Boolean = True\n        \n        If isAdmin Or isEditor Then\n            Console.WriteLine(\"User has access.\")\n        Else\n            Console.WriteLine(\"User does not have access.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a script to ensure a file is both present and not empty using logical AND.",
    "code": "```vb\nDim filePath As String = \"example.txt\"\nDim fileExists As Boolean = System.IO.File.Exists(filePath)\nDim fileNotEmpty As Boolean = False\n\nIf fileExists Then\n    Dim fileInfo As New System.IO.FileInfo(filePath)\n    fileNotEmpty = fileInfo.Length > 0\nEnd If\n\nIf fileExists And fileNotEmpty Then\n    Console.WriteLine(\"The file is present and not empty.\")\nElse\n    Console.WriteLine(\"The file is either missing or empty.\")\nEnd If\n```"
  },
  {
    "task": "Implement a condition to execute a command if a setting is not active using logical NOT.",
    "code": "```vb\nDim settingActive As Boolean = False\n\nIf Not settingActive Then\n    ' Execute the command\n    Console.WriteLine(\"Setting is not active. Executing command...\")\nEnd If\n```"
  },
  {
    "task": "Compose a method to decide if a person is either eligible or exempt using logical OR.",
    "code": "```vb\nModule EligibilityChecker\n\n    Function IsEligibleOrExempt(isEligible As Boolean, isExempt As Boolean) As Boolean\n        Return isEligible Or isExempt\n    End Function\n\nEnd Module\n```"
  },
  {
    "task": "Write a function that returns true if a number is both greater than zero and less than ten using logical AND.",
    "code": "```vb\nFunction IsBetweenZeroAndTen(num As Integer) As Boolean\n    Return num > 0 AndAlso num < 10\nEnd Function\n```"
  },
  {
    "task": "Create a loop to continue as long as a condition is either true or false using logical OR.",
    "code": "```vb\nDim conditionTrue As Boolean = True\nDim conditionFalse As Boolean = False\n\nDo While conditionTrue Or conditionFalse\n    ' Your loop code here\n    ' Example: Toggle conditions for demonstration\n    conditionTrue = Not conditionTrue\n    conditionFalse = Not conditionFalse\nLoop\n```"
  },
  {
    "task": "Design a program to verify if an account is neither inactive nor suspended using logical NOT.",
    "code": "```vb\nModule Program\n    Sub Main()\n        Dim isInactive As Boolean = False\n        Dim isSuspended As Boolean = False\n        \n        If Not isInactive And Not isSuspended Then\n            Console.WriteLine(\"The account is active and not suspended.\")\n        Else\n            Console.WriteLine(\"The account is either inactive or suspended.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a feature to confirm that a document is both signed and verified using logical AND.",
    "code": "```vb\nModule DocumentChecker\n    Sub Main()\n        Dim isSigned As Boolean = True\n        Dim isVerified As Boolean = True\n        \n        Dim isConfirmed As Boolean = isSigned And isVerified\n        \n        Console.WriteLine(\"Document confirmed: \" & isConfirmed)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a script to alert if a network is either congested or down using logical OR.",
    "code": "```vb\nModule NetworkAlert\n    Sub Main()\n        Dim isCongested As Boolean = True\n        Dim isDown As Boolean = False\n\n        If isCongested Or isDown Then\n            Console.WriteLine(\"Alert: The network is either congested or down.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function to ensure a list is both sorted and unique using logical AND.",
    "code": "```vb\nFunction SortAndUnique(list As List(Of Integer)) As List(Of Integer)\n    Dim uniqueSorted As New List(Of Integer)\n    list.Sort()\n    For Each item In list\n        If Not uniqueSorted.Contains(item) And list.Contains(item) Then\n            uniqueSorted.Add(item)\n        End If\n    Next\n    Return uniqueSorted\nEnd Function\n```"
  },
  {
    "task": "Create a conditional statement to execute if a task is not completed using logical NOT.",
    "code": "```vb\nDim taskCompleted As Boolean = False\n\nIf Not taskCompleted Then\n    ' Execute task\nEnd If\n```"
  },
  {
    "task": "Design a check to determine if a component is either faulty or missing using logical OR.",
    "code": "```vb\nModule ComponentCheck\n    Sub Main()\n        Dim isFaulty As Boolean = False\n        Dim isMissing As Boolean = True\n\n        If isFaulty Or isMissing Then\n            Console.WriteLine(\"Component is either faulty or missing.\")\n        Else\n            Console.WriteLine(\"Component is present and not faulty.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a routine to verify if a user is both online and available using logical AND.",
    "code": "```vb\nFunction IsUserOnlineAndAvailable(userOnline As Boolean, userAvailable As Boolean) As Boolean\n    Return userOnline And userAvailable\nEnd Function\n```"
  },
  {
    "task": "Implement a feature to toggle an alert if a condition is not satisfied using logical NOT.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim conditionMet As Boolean = False\n        Dim alertToggled As Boolean = False\n\n        alertToggled = Not conditionMet\n\n        Console.WriteLine(\"Alert Toggled: \" & alertToggled)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Compose a function to return true if a transaction is either pending or failed using logical OR.",
    "code": "```vb\nFunction IsTransactionPendingOrFailed(ByVal status As String) As Boolean\n    Return status = \"pending\" Or status = \"failed\"\nEnd Function\n```"
  },
  {
    "task": "Write a script to ensure a configuration is both correct and active using logical AND.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim isConfigurationCorrect As Boolean = True\n        Dim isConfigurationActive As Boolean = True\n\n        If isConfigurationCorrect And isConfigurationActive Then\n            Console.WriteLine(\"The configuration is both correct and active.\")\n        Else\n            Console.WriteLine(\"The configuration is not both correct and active.\")\n        End If\n    End Sub\nEnd Module\n```"
  }
]