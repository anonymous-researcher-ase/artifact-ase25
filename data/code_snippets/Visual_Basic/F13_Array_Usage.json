[
  {
    "task": "Create a function that initializes an array with the first ten prime numbers.",
    "code": "```vb\nFunction InitializePrimeArray() As Integer()\n    Dim primes(9) As Integer\n    primes(0) = 2\n    primes(1) = 3\n    primes(2) = 5\n    primes(3) = 7\n    primes(4) = 11\n    primes(5) = 13\n    primes(6) = 17\n    primes(7) = 19\n    primes(8) = 23\n    primes(9) = 29\n    Return primes\nEnd Function\n```"
  },
  {
    "task": "Write a program to reverse the elements of a given array.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim arr() As Integer = {1, 2, 3, 4, 5}\n        Dim reversedArr(arr.Length - 1) As Integer\n        Dim j As Integer = 0\n\n        For i As Integer = arr.Length - 1 To 0 Step -1\n            reversedArr(j) = arr(i)\n            j += 1\n        Next\n\n        For Each item As Integer In reversedArr\n            Console.Write(item & \" \")\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement an algorithm that finds the maximum value in an array of integers.",
    "code": "```vb\nModule Program\n    Sub Main()\n        Dim numbers() As Integer = {34, 78, 2, 45, 99, 23, 67}\n        Dim maxValue As Integer = FindMaxValue(numbers)\n        Console.WriteLine(\"The maximum value is: \" & maxValue)\n    End Sub\n\n    Function FindMaxValue(ByVal arr() As Integer) As Integer\n        Dim max As Integer = arr(0)\n        For Each num As Integer In arr\n            If num > max Then\n                max = num\n            End If\n        Next\n        Return max\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Design a routine to rotate an array to the right by a given number of steps.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim arr() As Integer = {1, 2, 3, 4, 5}\n        Dim steps As Integer = 2\n        RotateArrayRight(arr, steps)\n        For Each num As Integer In arr\n            Console.Write(num & \" \")\n        Next\n    End Sub\n\n    Sub RotateArrayRight(ByRef arr() As Integer, ByVal steps As Integer)\n        Dim n As Integer = arr.Length\n        steps = steps Mod n\n        ReverseArray(arr, 0, n - 1)\n        ReverseArray(arr, 0, steps - 1)\n        ReverseArray(arr, steps, n - 1)\n    End Sub\n\n    Sub ReverseArray(ByRef arr() As Integer, ByVal start As Integer, ByVal [end] As Integer)\n        While start < [end]\n            Dim temp As Integer = arr(start)\n            arr(start) = arr([end])\n            arr([end]) = temp\n            start += 1\n            [end] -= 1\n        End While\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a function to merge two sorted arrays into one sorted array.",
    "code": "```vb\nFunction MergeSortedArrays(ByVal array1() As Integer, ByVal array2() As Integer) As Integer()\n    Dim merged(array1.Length + array2.Length - 1) As Integer\n    Dim i As Integer = 0\n    Dim j As Integer = 0\n    Dim k As Integer = 0\n    \n    While i < array1.Length AndAlso j < array2.Length\n        If array1(i) < array2(j) Then\n            merged(k) = array1(i)\n            i += 1\n        Else\n            merged(k) = array2(j)\n            j += 1\n        End If\n        k += 1\n    End While\n    \n    While i < array1.Length\n        merged(k) = array1(i)\n        i += 1\n        k += 1\n    End While\n    \n    While j < array2.Length\n        merged(k) = array2(j)\n        j += 1\n        k += 1\n    End While\n    \n    Return merged\nEnd Function\n```"
  },
  {
    "task": "Create a method to remove duplicate values from an array.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers() As Integer = {1, 2, 2, 3, 4, 4, 5}\n        Dim result() As Integer = RemoveDuplicates(numbers)\n        For Each num In result\n            Console.WriteLine(num)\n        Next\n    End Sub\n\n    Function RemoveDuplicates(arr() As Integer) As Integer()\n        Dim uniqueList As New List(Of Integer)\n        Dim uniqueSet As New HashSet(Of Integer)\n\n        For Each num In arr\n            If Not uniqueSet.Contains(num) Then\n                uniqueSet.Add(num)\n                uniqueList.Add(num)\n            End If\n        Next\n\n        Return uniqueList.ToArray()\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Write a script to calculate the sum of all elements in an array.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers() As Integer = {1, 2, 3, 4, 5}\n        Dim sum As Integer = 0\n\n        For Each number In numbers\n            sum += number\n        Next\n\n        Console.WriteLine(\"Sum of array elements: \" & sum)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Construct a function that finds the second largest element in an array.",
    "code": "```vb\nFunction FindSecondLargest(arr() As Integer) As Integer\n    Dim largest As Integer\n    Dim secondLargest As Integer\n    largest = Integer.MinValue\n    secondLargest = Integer.MinValue\n\n    For Each num In arr\n        If num > largest Then\n            secondLargest = largest\n            largest = num\n        ElseIf num > secondLargest And num <> largest Then\n            secondLargest = num\n        End If\n    Next\n\n    Return secondLargest\nEnd Function\n```"
  },
  {
    "task": "Design a program to check if an array contains a specific value.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers() As Integer = {10, 20, 30, 40, 50}\n        Dim valueToFind As Integer = 30\n        Dim found As Boolean = False\n\n        For Each number In numbers\n            If number = valueToFind Then\n                found = True\n                Exit For\n            End If\n        Next\n\n        If found Then\n            Console.WriteLine(\"Value found in the array.\")\n        Else\n            Console.WriteLine(\"Value not found in the array.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a function to sort an array of strings alphabetically.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim strings() As String = {\"Banana\", \"Apple\", \"Orange\", \"Mango\"}\n        SortArrayAlphabetically(strings)\n        For Each str As String In strings\n            Console.WriteLine(str)\n        Next\n    End Sub\n\n    Sub SortArrayAlphabetically(ByRef arr() As String)\n        Array.Sort(arr)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a method to search for a value in an array using binary search.",
    "code": "```vb\nFunction BinarySearch(arr() As Integer, target As Integer) As Integer\n    Dim left As Integer = 0\n    Dim right As Integer = arr.Length - 1\n\n    While left <= right\n        Dim mid As Integer = left + (right - left) \\ 2\n\n        If arr(mid) = target Then\n            Return mid\n        ElseIf arr(mid) < target Then\n            left = mid + 1\n        Else\n            right = mid - 1\n        End If\n    End While\n\n    Return -1\nEnd Function\n```"
  },
  {
    "task": "Write a routine to calculate the average of numbers in an array.",
    "code": "```vb\nFunction CalculateAverage(numbers As Double()) As Double\n    Dim total As Double = 0\n    For Each number As Double In numbers\n        total += number\n    Next\n    Return total / numbers.Length\nEnd Function\n```"
  },
  {
    "task": "Develop a function to find the intersection of two arrays.",
    "code": "```vb\nFunction FindIntersection(arr1 As Integer(), arr2 As Integer()) As Integer()\n    Dim intersection As New List(Of Integer)()\n    Dim set1 As New HashSet(Of Integer)(arr1)\n    \n    For Each num In arr2\n        If set1.Contains(num) Then\n            intersection.Add(num)\n            set1.Remove(num)\n        End If\n    Next\n    \n    Return intersection.ToArray()\nEnd Function\n```"
  },
  {
    "task": "Implement a method to find the union of two arrays without duplicates.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim array1() As Integer = {1, 2, 3, 4, 5}\n        Dim array2() As Integer = {4, 5, 6, 7, 8}\n        Dim result() As Integer = UnionWithoutDuplicates(array1, array2)\n\n        For Each num As Integer In result\n            Console.Write(num & \" \")\n        Next\n    End Sub\n\n    Function UnionWithoutDuplicates(arr1() As Integer, arr2() As Integer) As Integer()\n        Dim unionSet As New HashSet(Of Integer)(arr1)\n        unionSet.UnionWith(arr2)\n        Return unionSet.ToArray()\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Create a program that shifts all zeroes in an array to the end.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers() As Integer = {0, 1, 0, 3, 12}\n        ShiftZeroesToEnd(numbers)\n        For Each num In numbers\n            Console.Write(num & \" \")\n        Next\n    End Sub\n\n    Sub ShiftZeroesToEnd(ByRef arr() As Integer)\n        Dim n As Integer = arr.Length\n        Dim index As Integer = 0\n\n        For i As Integer = 0 To n - 1\n            If arr(i) <> 0 Then\n                arr(index) = arr(i)\n                index += 1\n            End If\n        Next\n\n        For i As Integer = index To n - 1\n            arr(i) = 0\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function to split an array into two parts at a given index.",
    "code": "```vb\nFunction SplitArray(arr() As Integer, index As Integer) As (Integer(), Integer())\n    Dim firstPart(index - 1) As Integer\n    Dim secondPart(arr.Length - index - 1) As Integer\n\n    Array.Copy(arr, 0, firstPart, 0, index)\n    Array.Copy(arr, index, secondPart, 0, arr.Length - index)\n\n    Return (firstPart, secondPart)\nEnd Function\n```"
  },
  {
    "task": "Design a script to find all pairs in an array that sum up to a specific target.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim nums() As Integer = {2, 4, 3, 5, 7, 8, 9}\n        Dim target As Integer = 9\n        FindPairsWithSum(nums, target)\n    End Sub\n\n    Sub FindPairsWithSum(ByVal nums() As Integer, ByVal target As Integer)\n        For i As Integer = 0 To nums.Length - 2\n            For j As Integer = i + 1 To nums.Length - 1\n                If nums(i) + nums(j) = target Then\n                    Console.WriteLine(\"Pair found: (\" & nums(i) & \", \" & nums(j) & \")\")\n                End If\n            Next\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Construct a method to remove all occurrences of a specific value from an array.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers As Integer() = {1, 2, 3, 4, 2, 5, 2}\n        Dim valueToRemove As Integer = 2\n        Dim result As Integer() = RemoveAllOccurrences(numbers, valueToRemove)\n        For Each num In result\n            Console.WriteLine(num)\n        Next\n    End Sub\n\n    Function RemoveAllOccurrences(arr As Integer(), value As Integer) As Integer()\n        Dim resultList As New List(Of Integer)\n        For Each num In arr\n            If num <> value Then\n                resultList.Add(num)\n            End If\n        Next\n        Return resultList.ToArray()\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Write a function to find the longest increasing subsequence in an array.",
    "code": "```vb\nFunction LongestIncreasingSubsequence(arr() As Integer) As Integer\n    Dim n As Integer = arr.Length\n    If n = 0 Then Return 0\n    \n    Dim lis(n - 1) As Integer\n    For i As Integer = 0 To n - 1\n        lis(i) = 1\n    Next\n    \n    For i As Integer = 1 To n - 1\n        For j As Integer = 0 To i - 1\n            If arr(i) > arr(j) AndAlso lis(i) < lis(j) + 1 Then\n                lis(i) = lis(j) + 1\n            End If\n        Next\n    Next\n    \n    Dim max As Integer = 0\n    For i As Integer = 0 To n - 1\n        If max < lis(i) Then\n            max = lis(i)\n        End If\n    Next\n    \n    Return max\nEnd Function\n```"
  },
  {
    "task": "Develop an algorithm to find the missing number in a sequential array.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers As Integer() = {1, 2, 4, 5, 6} ' Example array with a missing number\n        Dim missingNumber As Integer = FindMissingNumber(numbers)\n        Console.WriteLine(\"Missing Number: \" & missingNumber)\n    End Sub\n\n    Function FindMissingNumber(arr As Integer()) As Integer\n        Dim n As Integer = arr.Length + 1\n        Dim total As Integer = (n * (n + 1)) \\ 2\n        Dim sum As Integer = 0\n        For Each num As Integer In arr\n            sum += num\n        Next\n        Return total - sum\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Create a program to find the common elements between two arrays.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim array1 As Integer() = {1, 2, 3, 4, 5}\n        Dim array2 As Integer() = {4, 5, 6, 7, 8}\n        Dim commonElements As New List(Of Integer)\n\n        For Each element1 In array1\n            For Each element2 In array2\n                If element1 = element2 Then\n                    If Not commonElements.Contains(element1) Then\n                        commonElements.Add(element1)\n                    End If\n                End If\n            Next\n        Next\n\n        Console.WriteLine(\"Common Elements:\")\n        For Each element In commonElements\n            Console.WriteLine(element)\n        Next\n\n        Console.ReadLine()\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a function to move all negative numbers to the beginning of an array.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim arr() As Integer = {1, -2, 3, -4, 5, -6}\n        MoveNegativesToFront(arr)\n        For Each num In arr\n            Console.Write(num & \" \")\n        Next\n    End Sub\n\n    Sub MoveNegativesToFront(ByRef arr() As Integer)\n        Dim n As Integer = arr.Length\n        Dim result(n - 1) As Integer\n        Dim index As Integer = 0\n        \n        ' Add negative numbers first\n        For i As Integer = 0 To n - 1\n            If arr(i) < 0 Then\n                result(index) = arr(i)\n                index += 1\n            End If\n        Next\n        \n        ' Add non-negative numbers\n        For i As Integer = 0 To n - 1\n            If arr(i) >= 0 Then\n                result(index) = arr(i)\n                index += 1\n            End If\n        Next\n        \n        ' Copy result back to original array\n        For i As Integer = 0 To n - 1\n            arr(i) = result(i)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a method to check if an array is a palindrome.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim arr() As Integer = {1, 2, 3, 2, 1}\n        Console.WriteLine(IsPalindrome(arr))\n    End Sub\n\n    Function IsPalindrome(ByVal arr() As Integer) As Boolean\n        Dim length As Integer = arr.Length\n        For i As Integer = 0 To length \\ 2 - 1\n            If arr(i) <> arr(length - i - 1) Then\n                Return False\n            End If\n        Next\n        Return True\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Design a routine to create a new array that is the element-wise sum of two input arrays.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim array1() As Integer = {1, 2, 3}\n        Dim array2() As Integer = {4, 5, 6}\n        Dim result() As Integer = ElementWiseSum(array1, array2)\n\n        For Each value As Integer In result\n            Console.WriteLine(value)\n        Next\n    End Sub\n\n    Function ElementWiseSum(arr1() As Integer, arr2() As Integer) As Integer()\n        Dim length As Integer = Math.Min(arr1.Length, arr2.Length)\n        Dim sumArray(length - 1) As Integer\n\n        For i As Integer = 0 To length - 1\n            sumArray(i) = arr1(i) + arr2(i)\n        Next\n\n        Return sumArray\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Create a function to find the product of all elements in an array, excluding the current element.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers() As Integer = {1, 2, 3, 4, 5}\n        Dim result() As Integer = ProductOfAllExceptSelf(numbers)\n        For Each value In result\n            Console.WriteLine(value)\n        Next\n    End Sub\n\n    Function ProductOfAllExceptSelf(ByVal nums() As Integer) As Integer()\n        Dim length As Integer = nums.Length\n        Dim result(length - 1) As Integer\n        Dim leftProduct As Integer = 1\n        Dim rightProduct As Integer = 1\n\n        ' Initialize result array with 1s\n        For i As Integer = 0 To length - 1\n            result(i) = 1\n        Next\n\n        ' Calculate left products\n        For i As Integer = 0 To length - 1\n            result(i) *= leftProduct\n            leftProduct *= nums(i)\n        Next\n\n        ' Calculate right products\n        For i As Integer = length - 1 To 0 Step -1\n            result(i) *= rightProduct\n            rightProduct *= nums(i)\n        Next\n\n        Return result\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Develop a script to remove elements from an array that are smaller than a given threshold.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers() As Integer = {10, 5, 8, 3, 15, 1}\n        Dim threshold As Integer = 6\n        Dim filteredNumbers() As Integer = RemoveBelowThreshold(numbers, threshold)\n        \n        For Each number As Integer In filteredNumbers\n            Console.WriteLine(number)\n        Next\n    End Sub\n\n    Function RemoveBelowThreshold(ByVal arr() As Integer, ByVal threshold As Integer) As Integer()\n        Dim result As New List(Of Integer)\n\n        For Each item As Integer In arr\n            If item >= threshold Then\n                result.Add(item)\n            End If\n        Next\n\n        Return result.ToArray()\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Implement a method to clone an array without using built-in functions.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim originalArray() As Integer = {1, 2, 3, 4, 5}\n        Dim clonedArray() As Integer = CloneArray(originalArray)\n\n        For Each item In clonedArray\n            Console.WriteLine(item)\n        Next\n    End Sub\n\n    Function CloneArray(arr() As Integer) As Integer()\n        Dim newArray(arr.Length - 1) As Integer\n        For i As Integer = 0 To arr.Length - 1\n            newArray(i) = arr(i)\n        Next\n        Return newArray\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Create a program that rotates a 2D array (matrix) 90 degrees clockwise.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim matrix(,) As Integer = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}\n        Dim n As Integer = matrix.GetLength(0)\n        Dim rotatedMatrix(n - 1, n - 1) As Integer\n\n        For i As Integer = 0 To n - 1\n            For j As Integer = 0 To n - 1\n                rotatedMatrix(j, n - 1 - i) = matrix(i, j)\n            Next\n        Next\n\n        For i As Integer = 0 To n - 1\n            For j As Integer = 0 To n - 1\n                Console.Write(rotatedMatrix(i, j) & \" \")\n            Next\n            Console.WriteLine()\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function to find the kth smallest element in an unsorted array.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim arr() As Integer = {12, 3, 5, 7, 19}\n        Dim k As Integer = 2\n        Console.WriteLine(\"Kth smallest element is \" & KthSmallest(arr, k))\n    End Sub\n\n    Function KthSmallest(arr() As Integer, k As Integer) As Integer\n        Array.Sort(arr)\n        Return arr(k - 1)\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Design a routine to partition an array into even and odd numbers.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers() As Integer = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n        Dim evens As New List(Of Integer)()\n        Dim odds As New List(Of Integer)()\n\n        For Each num In numbers\n            If num Mod 2 = 0 Then\n                evens.Add(num)\n            Else\n                odds.Add(num)\n            End If\n        Next\n\n        Console.WriteLine(\"Evens: \" & String.Join(\", \", evens))\n        Console.WriteLine(\"Odds: \" & String.Join(\", \", odds))\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a method to merge overlapping intervals in an array.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim intervals As Integer()() = {New Integer() {1, 3}, New Integer() {2, 6}, New Integer() {8, 10}, New Integer() {15, 18}}\n        Dim merged As List(Of Integer()) = MergeIntervals(intervals)\n\n        For Each interval As Integer() In merged\n            Console.WriteLine(\"[\" & interval(0) & \", \" & interval(1) & \"]\")\n        Next\n    End Sub\n\n    Function MergeIntervals(intervals As Integer()()) As List(Of Integer())\n        If intervals.Length = 0 Then\n            Return New List(Of Integer())()\n        End If\n\n        Array.Sort(intervals, Function(a, b) a(0).CompareTo(b(0)))\n        Dim merged As New List(Of Integer())()\n        Dim currentInterval As Integer() = intervals(0)\n\n        For i As Integer = 1 To intervals.Length - 1\n            If currentInterval(1) >= intervals(i)(0) Then\n                currentInterval(1) = Math.Max(currentInterval(1), intervals(i)(1))\n            Else\n                merged.Add(currentInterval)\n                currentInterval = intervals(i)\n            End If\n        Next\n\n        merged.Add(currentInterval)\n        Return merged\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Develop a function to count the frequency of each unique element in an array.",
    "code": "```vb\nFunction CountFrequency(arr() As Variant) As Dictionary\n    Dim freqDict As New Dictionary\n    Dim elem As Variant\n    \n    For Each elem In arr\n        If freqDict.Exists(elem) Then\n            freqDict(elem) = freqDict(elem) + 1\n        Else\n            freqDict.Add elem, 1\n        End If\n    Next elem\n    \n    Set CountFrequency = freqDict\nEnd Function\n```"
  },
  {
    "task": "Write a program to generate all possible subsets of an array.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim arr() As Integer = {1, 2, 3}\n        Dim n As Integer = arr.Length\n        Dim totalSubsets As Integer = 1 << n\n\n        For i As Integer = 0 To totalSubsets - 1\n            Dim subset As New List(Of Integer)\n            For j As Integer = 0 To n - 1\n                If (i And (1 << j)) <> 0 Then\n                    subset.Add(arr(j))\n                End If\n            Next\n            Console.WriteLine(String.Join(\", \", subset))\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a routine to cyclically permute the elements of an array.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim array() As Integer = {1, 2, 3, 4, 5}\n        CyclicPermute(array)\n        For Each item In array\n            Console.Write(item & \" \")\n        Next\n    End Sub\n\n    Sub CyclicPermute(ByRef arr() As Integer)\n        If arr.Length < 2 Then Exit Sub\n        Dim last As Integer = arr(arr.Length - 1)\n        For i As Integer = arr.Length - 1 To 1 Step -1\n            arr(i) = arr(i - 1)\n        Next\n        arr(0) = last\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a function that checks if two arrays are equal regardless of element order.",
    "code": "```vb\nFunction ArraysAreEqual(arr1() As Integer, arr2() As Integer) As Boolean\n    If arr1.Length <> arr2.Length Then\n        Return False\n    End If\n\n    Dim sortedArr1() As Integer = CType(arr1.Clone(), Integer())\n    Dim sortedArr2() As Integer = CType(arr2.Clone(), Integer())\n\n    Array.Sort(sortedArr1)\n    Array.Sort(sortedArr2)\n\n    For i As Integer = 0 To sortedArr1.Length - 1\n        If sortedArr1(i) <> sortedArr2(i) Then\n            Return False\n        End If\n    Next\n\n    Return True\nEnd Function\n```"
  },
  {
    "task": "Design a script to initialize an array with random integers within a specified range.",
    "code": "```vb\nModule RandomArrayInitializer\n    Sub Main()\n        Dim random As New Random()\n        Dim arraySize As Integer = 10\n        Dim minValue As Integer = 1\n        Dim maxValue As Integer = 100\n        Dim numbers(arraySize - 1) As Integer\n\n        For i As Integer = 0 To numbers.Length - 1\n            numbers(i) = random.Next(minValue, maxValue + 1)\n        Next\n\n        For Each num As Integer In numbers\n            Console.WriteLine(num)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a method to convert an array of integers to a single concatenated number.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers() As Integer = {1, 2, 3, 4, 5}\n        Dim result As Integer = ConvertArrayToNumber(numbers)\n        Console.WriteLine(result)\n    End Sub\n\n    Function ConvertArrayToNumber(ByVal numbers() As Integer) As Integer\n        Dim concatenatedNumber As String = \"\"\n        For Each number As Integer In numbers\n            concatenatedNumber &= number.ToString()\n        Next\n        Return Integer.Parse(concatenatedNumber)\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Develop a function to find the median value of an unsorted array.",
    "code": "```vb\nFunction FindMedian(arr() As Integer) As Double\n    Dim n As Integer = arr.Length\n    Array.Sort(arr)\n    If n Mod 2 = 1 Then\n        Return arr(n \\ 2)\n    Else\n        Return (arr(n \\ 2 - 1) + arr(n \\ 2)) / 2\n    End If\nEnd Function\n```"
  },
  {
    "task": "Create a routine to determine if an array is sorted in ascending order.",
    "code": "```vb\nFunction IsSortedAscending(ByVal arr() As Integer) As Boolean\n    For i As Integer = 1 To UBound(arr)\n        If arr(i) < arr(i - 1) Then\n            Return False\n        End If\n    Next\n    Return True\nEnd Function\n```"
  },
  {
    "task": "Implement a method to find the longest contiguous subarray with equal number of 0s and 1s.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim arr() As Integer = {0, 1, 0, 1, 1, 0, 0}\n        Dim length As Integer = FindMaxLength(arr)\n        Console.WriteLine(\"Length of the longest contiguous subarray: \" & length)\n    End Sub\n\n    Function FindMaxLength(ByVal nums() As Integer) As Integer\n        Dim count As Integer = 0\n        Dim maxLength As Integer = 0\n        Dim countDict As New Dictionary(Of Integer, Integer) From {{0, -1}}\n\n        For i As Integer = 0 To nums.Length - 1\n            count += If(nums(i) = 0, -1, 1)\n            If countDict.ContainsKey(count) Then\n                maxLength = Math.Max(maxLength, i - countDict(count))\n            Else\n                countDict(count) = i\n            End If\n        Next\n\n        Return maxLength\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Write a function to interleave two arrays of equal length.",
    "code": "```vb\nFunction InterleaveArrays(arr1 As Variant, arr2 As Variant) As Variant\n    Dim result() As Variant\n    Dim i As Integer\n    Dim n As Integer\n    \n    n = UBound(arr1)\n    ReDim result(2 * n)\n    \n    For i = 0 To n\n        result(2 * i) = arr1(i)\n        result(2 * i + 1) = arr2(i)\n    Next i\n    \n    InterleaveArrays = result\nEnd Function\n```"
  },
  {
    "task": "Design a program to replace each element in an array with the next greatest element.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim arr() As Integer = {17, 18, 5, 4, 6, 1}\n        ReplaceWithNextGreatest(arr)\n        For Each num In arr\n            Console.Write(num & \" \")\n        Next\n    End Sub\n\n    Sub ReplaceWithNextGreatest(ByRef arr() As Integer)\n        Dim n As Integer = arr.Length\n        Dim maxFromRight As Integer = -1\n\n        For i As Integer = n - 1 To 0 Step -1\n            Dim temp As Integer = arr(i)\n            arr(i) = maxFromRight\n            If temp > maxFromRight Then\n                maxFromRight = temp\n            End If\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a function to calculate the dot product of two numeric arrays.",
    "code": "```vb\nFunction DotProduct(ByVal array1() As Double, ByVal array2() As Double) As Double\n    Dim result As Double = 0\n    If array1.Length = array2.Length Then\n        For i As Integer = 0 To array1.Length - 1\n            result += array1(i) * array2(i)\n        Next\n    Else\n        Throw New ArgumentException(\"Arrays must be of the same length.\")\n    End If\n    Return result\nEnd Function\n```"
  },
  {
    "task": "Develop a script to find the first recurring element in an array.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers() As Integer = {2, 5, 1, 2, 3, 5, 1, 2, 4}\n        Dim seen As New HashSet(Of Integer)()\n        Dim firstRecurring As Integer? = Nothing\n\n        For Each num In numbers\n            If seen.Contains(num) Then\n                firstRecurring = num\n                Exit For\n            End If\n            seen.Add(num)\n        Next\n\n        If firstRecurring.HasValue Then\n            Console.WriteLine(\"First recurring element: \" & firstRecurring.Value)\n        Else\n            Console.WriteLine(\"No recurring elements found.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a method to check if an array is a subset of another array.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim array1 As Integer() = {1, 2, 3, 4, 5}\n        Dim array2 As Integer() = {2, 3, 4}\n        Console.WriteLine(IsSubset(array1, array2))\n    End Sub\n\n    Function IsSubset(ByVal arr1 As Integer(), ByVal arr2 As Integer()) As Boolean\n        For Each element In arr2\n            If Not arr1.Contains(element) Then\n                Return False\n            End If\n        Next\n        Return True\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Implement a function to add a specific value to each element in an array.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers() As Integer = {1, 2, 3, 4, 5}\n        Dim incrementValue As Integer = 2\n        AddToArray(numbers, incrementValue)\n        For Each num In numbers\n            Console.WriteLine(num)\n        Next\n    End Sub\n\n    Sub AddToArray(ByRef arr() As Integer, ByVal valueToAdd As Integer)\n        For i As Integer = 0 To arr.Length - 1\n            arr(i) += valueToAdd\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a program that finds the largest product of three numbers in an array.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers() As Integer = {1, 10, 2, 6, 5, 3}\n        Dim maxProduct As Integer = Integer.MinValue\n\n        Array.Sort(numbers)\n\n        Dim n As Integer = numbers.Length\n        maxProduct = Math.Max(numbers(n - 1) * numbers(n - 2) * numbers(n - 3), numbers(0) * numbers(1) * numbers(n - 1))\n\n        Console.WriteLine(\"The largest product of three numbers is: \" & maxProduct)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a routine to find all unique permutations of an array.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim arr() As Integer = {1, 2, 3}\n        Dim results As New List(Of List(Of Integer))()\n        GetPermutations(arr, 0, arr.Length - 1, results)\n        For Each perm In results\n            Console.WriteLine(String.Join(\", \", perm))\n        Next\n    End Sub\n\n    Sub GetPermutations(ByVal arr() As Integer, ByVal l As Integer, ByVal r As Integer, ByRef results As List(Of List(Of Integer)))\n        If l = r Then\n            results.Add(New List(Of Integer)(arr))\n        Else\n            Dim seen As New HashSet(Of Integer)()\n            For i As Integer = l To r\n                If Not seen.Contains(arr(i)) Then\n                    seen.Add(arr(i))\n                    Swap(arr, l, i)\n                    GetPermutations(arr, l + 1, r, results)\n                    Swap(arr, l, i)\n                End If\n            Next\n        End If\n    End Sub\n\n    Sub Swap(ByRef arr() As Integer, ByVal i As Integer, ByVal j As Integer)\n        Dim temp As Integer = arr(i)\n        arr(i) = arr(j)\n        arr(j) = temp\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function to transpose a square matrix represented as a 2D array.",
    "code": "```vb\nFunction TransposeMatrix(ByVal matrix(,) As Integer) As Integer(,)\n    Dim n As Integer = matrix.GetLength(0)\n    Dim transposed(n - 1, n - 1) As Integer\n\n    For i As Integer = 0 To n - 1\n        For j As Integer = 0 To n - 1\n            transposed(j, i) = matrix(i, j)\n        Next\n    Next\n\n    Return transposed\nEnd Function\n```"
  },
  {
    "task": "Develop a method to find the longest common prefix in an array of strings.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim strs() As String = {\"flower\", \"flow\", \"flight\"}\n        Console.WriteLine(LongestCommonPrefix(strs))\n    End Sub\n\n    Function LongestCommonPrefix(ByVal strs() As String) As String\n        If strs Is Nothing OrElse strs.Length = 0 Then\n            Return \"\"\n        End If\n\n        Dim prefix As String = strs(0)\n        For i As Integer = 1 To strs.Length - 1\n            While strs(i).IndexOf(prefix) <> 0\n                prefix = prefix.Substring(0, prefix.Length - 1)\n                If prefix = \"\" Then\n                    Return \"\"\n                End If\n            End While\n        Next\n\n        Return prefix\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Implement a function to flatten a multi-dimensional array into a single array.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim multiArray As Integer(,) = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}\n        Dim flatArray() As Integer = FlattenArray(multiArray)\n        For Each element As Integer In flatArray\n            Console.Write(element & \" \")\n        Next\n    End Sub\n\n    Function FlattenArray(ByVal multiArray As Array) As Integer()\n        Dim flatList As New List(Of Integer)\n        For Each element In multiArray\n            flatList.Add(Convert.ToInt32(element))\n        Next\n        Return flatList.ToArray()\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Create a script to shift elements of an array to the left by a given number of positions.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim arr() As Integer = {1, 2, 3, 4, 5}\n        Dim shift As Integer = 2\n        Dim result(arr.Length - 1) As Integer\n\n        For i As Integer = 0 To arr.Length - 1\n            result(i) = arr((i + shift) Mod arr.Length)\n        Next\n\n        For Each num In result\n            Console.Write(num & \" \")\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a routine to sort an array of objects based on a specific property.",
    "code": "```vb\nModule Module1\n    Public Class MyObject\n        Public Property Name As String\n        Public Property Value As Integer\n    End Class\n\n    Sub Main()\n        Dim objects As MyObject() = {\n            New MyObject With {.Name = \"Object1\", .Value = 5},\n            New MyObject With {.Name = \"Object2\", .Value = 3},\n            New MyObject With {.Name = \"Object3\", .Value = 8}\n        }\n\n        Array.Sort(objects, Function(x, y) x.Value.CompareTo(y.Value))\n\n        For Each obj In objects\n            Console.WriteLine(obj.Name & \": \" & obj.Value)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a program to find the smallest missing positive integer in an array.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers() As Integer = {3, 4, -1, 1}\n        Dim smallestMissing As Integer = FindSmallestMissingPositive(numbers)\n        Console.WriteLine(\"The smallest missing positive integer is: \" & smallestMissing)\n    End Sub\n\n    Function FindSmallestMissingPositive(ByVal nums() As Integer) As Integer\n        Dim n As Integer = nums.Length\n        Dim i As Integer = 0\n\n        While i < n\n            If nums(i) > 0 AndAlso nums(i) <= n AndAlso nums(nums(i) - 1) <> nums(i) Then\n                Dim temp As Integer = nums(nums(i) - 1)\n                nums(nums(i) - 1) = nums(i)\n                nums(i) = temp\n            Else\n                i += 1\n            End If\n        End While\n\n        For i = 0 To n - 1\n            If nums(i) <> i + 1 Then\n                Return i + 1\n            End If\n        Next\n\n        Return n + 1\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Create a function to calculate the cumulative sum of an array.",
    "code": "```vb\nFunction CumulativeSum(arr() As Integer) As Integer()\n    Dim result(arr.Length - 1) As Integer\n    Dim sum As Integer = 0\n    For i As Integer = 0 To arr.Length - 1\n        sum += arr(i)\n        result(i) = sum\n    Next\n    Return result\nEnd Function\n```"
  },
  {
    "task": "Develop a function to remove consecutive duplicate elements in an array.",
    "code": "```vb\nFunction RemoveConsecutiveDuplicates(inputArray As Variant) As Variant\n    If IsEmpty(inputArray) Or UBound(inputArray) = 0 Then\n        RemoveConsecutiveDuplicates = inputArray\n        Exit Function\n    End If\n    \n    Dim resultArray() As Variant\n    ReDim resultArray(0)\n    resultArray(0) = inputArray(0)\n    \n    Dim i As Integer\n    Dim currentIndex As Integer\n    currentIndex = 0\n    \n    For i = 1 To UBound(inputArray)\n        If inputArray(i) <> inputArray(i - 1) Then\n            currentIndex = currentIndex + 1\n            ReDim Preserve resultArray(currentIndex)\n            resultArray(currentIndex) = inputArray(i)\n        End If\n    Next i\n    \n    RemoveConsecutiveDuplicates = resultArray\nEnd Function\n```"
  },
  {
    "task": "Implement a method to find the majority element in an array, if any.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim nums() As Integer = {2, 2, 1, 1, 1, 2, 2}\n        Dim majority As Integer? = FindMajorityElement(nums)\n        If majority.HasValue Then\n            Console.WriteLine(\"Majority element: \" & majority.Value)\n        Else\n            Console.WriteLine(\"No majority element found.\")\n        End If\n    End Sub\n\n    Function FindMajorityElement(ByVal nums() As Integer) As Integer?\n        Dim count As Integer = 0\n        Dim candidate As Integer? = Nothing\n\n        For Each num In nums\n            If count = 0 Then\n                candidate = num\n            End If\n            If num = candidate Then\n                count += 1\n            Else\n                count -= 1\n            End If\n        Next\n\n        count = 0\n        For Each num In nums\n            If num = candidate Then\n                count += 1\n            End If\n        Next\n\n        If count > nums.Length \\ 2 Then\n            Return candidate\n        End If\n\n        Return Nothing\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Write a script to split an array into chunks of a given size.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim originalArray As Integer() = {1, 2, 3, 4, 5, 6, 7, 8, 9}\n        Dim chunkSize As Integer = 3\n        Dim chunks As List(Of Integer()) = SplitArrayIntoChunks(originalArray, chunkSize)\n        \n        For Each chunk As Integer() In chunks\n            Console.WriteLine(String.Join(\", \", chunk))\n        Next\n    End Sub\n\n    Function SplitArrayIntoChunks(ByVal array As Integer(), ByVal chunkSize As Integer) As List(Of Integer())\n        Dim result As New List(Of Integer())()\n        Dim totalChunks As Integer = Math.Ceiling(array.Length / chunkSize)\n        \n        For i As Integer = 0 To totalChunks - 1\n            Dim start As Integer = i * chunkSize\n            Dim length As Integer = Math.Min(chunkSize, array.Length - start)\n            Dim chunk As Integer() = New Integer(length - 1) {}\n            Array.Copy(array, start, chunk, 0, length)\n            result.Add(chunk)\n        Next\n        \n        Return result\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Create a program to calculate the difference between the largest and smallest values in an array.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers() As Integer = {5, 3, 8, 6, 2, 10}\n        Dim maxValue As Integer = numbers(0)\n        Dim minValue As Integer = numbers(0)\n\n        For Each num In numbers\n            If num > maxValue Then\n                maxValue = num\n            End If\n            If num < minValue Then\n                minValue = num\n            End If\n        Next\n\n        Dim difference As Integer = maxValue - minValue\n        Console.WriteLine(\"Difference: \" & difference)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a routine to find the starting index of a target subarray in a larger array.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim largerArray() As Integer = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n        Dim targetSubarray() As Integer = {5, 6, 7}\n        Dim startIndex As Integer = FindSubarrayIndex(largerArray, targetSubarray)\n        Console.WriteLine(\"Starting Index: \" & startIndex)\n    End Sub\n\n    Function FindSubarrayIndex(ByVal largerArray() As Integer, ByVal targetSubarray() As Integer) As Integer\n        For i As Integer = 0 To largerArray.Length - targetSubarray.Length\n            Dim found As Boolean = True\n            For j As Integer = 0 To targetSubarray.Length - 1\n                If largerArray(i + j) <> targetSubarray(j) Then\n                    found = False\n                    Exit For\n                End If\n            Next\n            If found Then\n                Return i\n            End If\n        Next\n        Return -1\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Write a function to compress an array by eliminating zero values.",
    "code": "```vb\nFunction CompressArray(inputArray As Integer()) As Integer()\n    Dim resultList As New List(Of Integer)()\n    For Each value As Integer In inputArray\n        If value <> 0 Then\n            resultList.Add(value)\n        End If\n    Next\n    Return resultList.ToArray()\nEnd Function\n```"
  },
  {
    "task": "Develop a method to determine if an array can be split into two parts with equal sums.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim arr() As Integer = {1, 5, 11, 5}\n        Console.WriteLine(CanPartition(arr))\n    End Sub\n\n    Function CanPartition(nums() As Integer) As Boolean\n        Dim totalSum As Integer = nums.Sum()\n        \n        If totalSum Mod 2 <> 0 Then\n            Return False\n        End If\n        \n        Dim target As Integer = totalSum \\ 2\n        Dim dp(target + 1) As Boolean\n        dp(0) = True\n        \n        For Each num In nums\n            For j As Integer = target To num Step -1\n                dp(j) = dp(j) Or dp(j - num)\n            Next\n        Next\n        \n        Return dp(target)\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Implement a function to round each element in an array to the nearest integer.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers() As Double = {1.2, 2.5, 3.8, 4.1}\n        Dim roundedNumbers() As Integer = RoundArray(numbers)\n        For Each num In roundedNumbers\n            Console.WriteLine(num)\n        Next\n    End Sub\n\n    Function RoundArray(ByVal arr() As Double) As Integer()\n        Dim rounded(arr.Length - 1) As Integer\n        For i As Integer = 0 To arr.Length - 1\n            rounded(i) = CInt(Math.Round(arr(i)))\n        Next\n        Return rounded\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Create a routine to generate an array of the Fibonacci sequence up to a given number.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim limit As Integer = 10\n        Dim fibSequence() As Integer = GenerateFibonacci(limit)\n        For Each num As Integer In fibSequence\n            Console.WriteLine(num)\n        Next\n    End Sub\n\n    Function GenerateFibonacci(ByVal maxValue As Integer) As Integer()\n        Dim fib As New List(Of Integer)({0, 1})\n        While True\n            Dim nextValue As Integer = fib(fib.Count - 1) + fib(fib.Count - 2)\n            If nextValue > maxValue Then\n                Exit While\n            End If\n            fib.Add(nextValue)\n        End While\n        Return fib.ToArray()\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Write a program to find the longest repeating sequence in an array.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim arr() As Integer = {1, 2, 2, 3, 3, 3, 2, 2, 2, 4, 4, 4, 4}\n        Dim longestSeqLength As Integer = 0\n        Dim longestSeqNumber As Integer = 0\n        Dim currentSeqLength As Integer = 1\n        Dim currentSeqNumber As Integer = arr(0)\n\n        For i As Integer = 1 To arr.Length - 1\n            If arr(i) = currentSeqNumber Then\n                currentSeqLength += 1\n            Else\n                If currentSeqLength > longestSeqLength Then\n                    longestSeqLength = currentSeqLength\n                    longestSeqNumber = currentSeqNumber\n                End If\n                currentSeqNumber = arr(i)\n                currentSeqLength = 1\n            End If\n        Next\n\n        If currentSeqLength > longestSeqLength Then\n            longestSeqLength = currentSeqLength\n            longestSeqNumber = currentSeqNumber\n        End If\n\n        Console.WriteLine(\"Number: \" & longestSeqNumber & \", Length: \" & longestSeqLength)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a function to multiply each element of an array by its index.",
    "code": "```vb\nFunction MultiplyByIndex(arr() As Integer) As Integer()\n    Dim result(arr.Length - 1) As Integer\n    For i As Integer = 0 To arr.Length - 1\n        result(i) = arr(i) * i\n    Next\n    Return result\nEnd Function\n```"
  },
  {
    "task": "Create a method to convert an array of characters into a single string.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim charArray() As Char = {\"H\", \"e\", \"l\", \"l\", \"o\"}\n        Dim result As String = ConvertArrayToString(charArray)\n        Console.WriteLine(result)\n    End Sub\n\n    Function ConvertArrayToString(chars() As Char) As String\n        Return New String(chars)\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Develop a function to fill an array with a specified value.",
    "code": "```vb\nFunction FillArray(ByVal size As Integer, ByVal value As Integer) As Integer()\n    Dim result(size - 1) As Integer\n    For i As Integer = 0 To size - 1\n        result(i) = value\n    Next\n    Return result\nEnd Function\n```"
  },
  {
    "task": "Implement a routine to determine if an array has any duplicate elements.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers() As Integer = {1, 2, 3, 4, 5}\n        Console.WriteLine(HasDuplicates(numbers))\n    End Sub\n\n    Function HasDuplicates(arr() As Integer) As Boolean\n        Dim seen As New HashSet(Of Integer)\n        For Each num In arr\n            If seen.Contains(num) Then\n                Return True\n            End If\n            seen.Add(num)\n        Next\n        Return False\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Write a script to reverse the order of words in an array of strings.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim words() As String = {\"Hello\", \"world\", \"from\", \"Visual\", \"Basic\"}\n        Array.Reverse(words)\n        For Each word As String In words\n            Console.WriteLine(word)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a function to calculate the total number of distinct elements in an array.",
    "code": "```vb\nFunction CountDistinctElements(arr() As Variant) As Integer\n    Dim distinctDict As Object\n    Set distinctDict = CreateObject(\"Scripting.Dictionary\")\n    \n    Dim element As Variant\n    For Each element In arr\n        If Not distinctDict.exists(element) Then\n            distinctDict.Add element, Nothing\n        End If\n    Next element\n    \n    CountDistinctElements = distinctDict.Count\nEnd Function\n```"
  },
  {
    "task": "Design a program to find the largest gap between consecutive elements in a sorted array.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers() As Integer = {1, 3, 6, 9, 14}\n        Dim maxGap As Integer = 0\n\n        For i As Integer = 0 To numbers.Length - 2\n            Dim gap As Integer = numbers(i + 1) - numbers(i)\n            If gap > maxGap Then\n                maxGap = gap\n            End If\n        Next\n\n        Console.WriteLine(\"The largest gap is: \" & maxGap)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a routine to perform element-wise multiplication of two arrays.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim array1 As Integer() = {1, 2, 3, 4, 5}\n        Dim array2 As Integer() = {6, 7, 8, 9, 10}\n        Dim result As Integer() = ElementWiseMultiplication(array1, array2)\n\n        For Each num As Integer In result\n            Console.WriteLine(num)\n        Next\n    End Sub\n\n    Function ElementWiseMultiplication(arr1 As Integer(), arr2 As Integer()) As Integer()\n        Dim length As Integer = Math.Min(arr1.Length, arr2.Length)\n        Dim result(length - 1) As Integer\n        For i As Integer = 0 To length - 1\n            result(i) = arr1(i) * arr2(i)\n        Next\n        Return result\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Develop a method to split a string into an array of words.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim inputString As String = \"This is an example string\"\n        Dim wordsArray() As String = SplitStringIntoWords(inputString)\n        For Each word As String In wordsArray\n            Console.WriteLine(word)\n        Next\n    End Sub\n\n    Function SplitStringIntoWords(ByVal str As String) As String()\n        Return str.Split(\" \"c)\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Implement a function to find the longest contiguous subarray with a sum less than a target.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim nums() As Integer = {1, 2, -1, 2, -3, 2, -5}\n        Dim target As Integer = 4\n        Dim result() As Integer = LongestSubarray(nums, target)\n        \n        For Each num In result\n            Console.Write(num & \" \")\n        Next\n        Console.WriteLine()\n    End Sub\n\n    Function LongestSubarray(ByVal nums() As Integer, ByVal target As Integer) As Integer()\n        Dim maxLength As Integer = 0\n        Dim start As Integer = 0\n        Dim end As Integer = 0\n        Dim currentSum As Integer = 0\n        Dim bestStart As Integer = 0\n        \n        For i As Integer = 0 To nums.Length - 1\n            currentSum = 0\n            For j As Integer = i To nums.Length - 1\n                currentSum += nums(j)\n                If currentSum < target AndAlso (j - i + 1) > maxLength Then\n                    maxLength = j - i + 1\n                    bestStart = i\n                    end = j\n                End If\n            Next\n        Next\n        \n        Dim result(maxLength - 1) As Integer\n        Array.Copy(nums, bestStart, result, 0, maxLength)\n        Return result\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Create a script to rotate a 2D array (matrix) 180 degrees.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim matrix(,) As Integer = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}\n        Dim rotatedMatrix(,) As Integer = Rotate180(matrix)\n        For i As Integer = 0 To rotatedMatrix.GetLength(0) - 1\n            For j As Integer = 0 To rotatedMatrix.GetLength(1) - 1\n                Console.Write(rotatedMatrix(i, j) & \" \")\n            Next\n            Console.WriteLine()\n        Next\n    End Sub\n\n    Function Rotate180(ByVal matrix(,) As Integer) As Integer(,)\n        Dim rows As Integer = matrix.GetLength(0)\n        Dim cols As Integer = matrix.GetLength(1)\n        Dim newMatrix(rows - 1, cols - 1) As Integer\n        For i As Integer = 0 To rows - 1\n            For j As Integer = 0 To cols - 1\n                newMatrix(rows - 1 - i, cols - 1 - j) = matrix(i, j)\n            Next\n        Next\n        Return newMatrix\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Write a program to convert an array of binary digits to its decimal equivalent.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim binaryArray() As Integer = {1, 0, 1, 1, 0, 1}\n        Dim decimalValue As Integer = 0\n        Dim length As Integer = binaryArray.Length\n\n        For i As Integer = 0 To length - 1\n            decimalValue += binaryArray(i) * Math.Pow(2, length - i - 1)\n        Next\n\n        Console.WriteLine(\"Decimal Equivalent: \" & decimalValue)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a function to return a new array with elements squared from the input array.",
    "code": "```vb\nFunction SquareArray(inputArray As Integer()) As Integer()\n    Dim squaredArray(inputArray.Length - 1) As Integer\n    For i As Integer = 0 To inputArray.Length - 1\n        squaredArray(i) = inputArray(i) * inputArray(i)\n    Next\n    Return squaredArray\nEnd Function\n```"
  },
  {
    "task": "Create a method to check if all elements in an array are unique.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers() As Integer = {1, 2, 3, 4, 5}\n        Console.WriteLine(AllElementsUnique(numbers))\n    End Sub\n\n    Function AllElementsUnique(ByVal arr() As Integer) As Boolean\n        Dim seen As New HashSet(Of Integer)\n        For Each num As Integer In arr\n            If seen.Contains(num) Then\n                Return False\n            End If\n            seen.Add(num)\n        Next\n        Return True\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Develop a routine to find the indices of all occurrences of a specific element in an array.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim arr() As Integer = {1, 2, 3, 2, 4, 2, 5}\n        Dim elementToFind As Integer = 2\n        Dim indices() As Integer = FindIndices(arr, elementToFind)\n        \n        For Each index As Integer In indices\n            Console.WriteLine(index)\n        Next\n    End Sub\n\n    Function FindIndices(ByVal arr() As Integer, ByVal element As Integer) As Integer()\n        Dim indices As New List(Of Integer)\n        \n        For i As Integer = 0 To arr.Length - 1\n            If arr(i) = element Then\n                indices.Add(i)\n            End If\n        Next\n        \n        Return indices.ToArray()\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Implement a function to merge multiple arrays into one.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim array1() As Integer = {1, 2, 3}\n        Dim array2() As Integer = {4, 5, 6}\n        Dim array3() As Integer = {7, 8, 9}\n\n        Dim mergedArray() As Integer = MergeArrays(array1, array2, array3)\n\n        For Each num As Integer In mergedArray\n            Console.Write(num & \" \")\n        Next\n    End Sub\n\n    Function MergeArrays(ParamArray arrays()() As Integer) As Integer()\n        Dim totalLength As Integer = 0\n        For Each arr As Integer() In arrays\n            totalLength += arr.Length\n        Next\n\n        Dim result(totalLength - 1) As Integer\n        Dim currentIndex As Integer = 0\n\n        For Each arr As Integer() In arrays\n            arr.CopyTo(result, currentIndex)\n            currentIndex += arr.Length\n        Next\n\n        Return result\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Write a script to convert an array of integers into a formatted string.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers() As Integer = {1, 2, 3, 4, 5}\n        Dim formattedString As String = String.Join(\", \", numbers)\n        Console.WriteLine(formattedString)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a program to find the largest sum of any contiguous subarray.",
    "code": "```vb\nModule Module1\n    Function MaxSubArraySum(arr() As Integer) As Integer\n        Dim maxSoFar As Integer = Integer.MinValue\n        Dim maxEndingHere As Integer = 0\n\n        For Each num In arr\n            maxEndingHere += num\n            If maxSoFar < maxEndingHere Then\n                maxSoFar = maxEndingHere\n            End If\n            If maxEndingHere < 0 Then\n                maxEndingHere = 0\n            End If\n        Next\n\n        Return maxSoFar\n    End Function\n\n    Sub Main()\n        Dim array() As Integer = {1, -2, 3, 4, -1, 2, 1, -5, 4}\n        Dim result As Integer = MaxSubArraySum(array)\n        Console.WriteLine(\"Maximum contiguous sum is \" & result)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a function to compare two arrays and return the differences.",
    "code": "```vb\nFunction CompareArrays(ByVal array1() As Integer, ByVal array2() As Integer) As Integer()\n    Dim differences As New List(Of Integer)\n    \n    Dim maxLength As Integer = Math.Max(array1.Length, array2.Length)\n    \n    For i As Integer = 0 To maxLength - 1\n        Dim value1 As Integer = If(i < array1.Length, array1(i), Integer.MinValue)\n        Dim value2 As Integer = If(i < array2.Length, array2(i), Integer.MinValue)\n        \n        If value1 <> value2 Then\n            If value1 <> Integer.MinValue Then differences.Add(value1)\n            If value2 <> Integer.MinValue Then differences.Add(value2)\n        End If\n    Next\n    \n    Return differences.ToArray()\nEnd Function\n```"
  },
  {
    "task": "Write a method to find the longest subarray with elements in arithmetic progression.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim arr As Integer() = {3, 5, 1, 3, 5, 7, 9, 11, 13}\n        Dim result As Integer() = LongestAPSubarray(arr)\n        Console.WriteLine(String.Join(\", \", result))\n    End Sub\n\n    Function LongestAPSubarray(ByVal arr As Integer()) As Integer()\n        Dim n As Integer = arr.Length\n        If n <= 2 Then Return arr\n\n        Dim maxLength As Integer = 2\n        Dim start As Integer = 0\n        Dim currentLength As Integer = 2\n        Dim currentStart As Integer = 0\n        Dim diff As Integer = arr(1) - arr(0)\n\n        For i As Integer = 2 To n - 1\n            If arr(i) - arr(i - 1) = diff Then\n                currentLength += 1\n            Else\n                If currentLength > maxLength Then\n                    maxLength = currentLength\n                    start = currentStart\n                End If\n                currentStart = i - 1\n                currentLength = 2\n                diff = arr(i) - arr(i - 1)\n            End If\n        Next\n\n        If currentLength > maxLength Then\n            maxLength = currentLength\n            start = currentStart\n        End If\n\n        Dim result(maxLength - 1) As Integer\n        Array.Copy(arr, start, result, 0, maxLength)\n        Return result\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Develop a routine to remove elements from an array based on a predicate function.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers As Integer() = {1, 2, 3, 4, 5, 6}\n        Dim predicate As Func(Of Integer, Boolean) = Function(x) x Mod 2 = 0\n        Dim filteredNumbers As Integer() = RemoveElements(numbers, predicate)\n\n        For Each num In filteredNumbers\n            Console.WriteLine(num)\n        Next\n    End Sub\n\n    Function RemoveElements(Of T)(ByVal array As T(), ByVal predicate As Func(Of T, Boolean)) As T()\n        Dim result As New List(Of T)()\n        For Each item In array\n            If Not predicate(item) Then\n                result.Add(item)\n            End If\n        Next\n        Return result.ToArray()\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Implement a function to determine if two arrays have any common elements.",
    "code": "```vb\nFunction HaveCommonElements(ByVal array1() As Integer, ByVal array2() As Integer) As Boolean\n    For Each element1 In array1\n        For Each element2 In array2\n            If element1 = element2 Then\n                Return True\n            End If\n        Next\n    Next\n    Return False\nEnd Function\n```"
  },
  {
    "task": "Create a script to initialize an empty array and populate it with user input.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim size As Integer\n        Console.WriteLine(\"Enter the size of the array:\")\n        size = Convert.ToInt32(Console.ReadLine())\n        \n        Dim userArray(size - 1) As String\n        \n        For i As Integer = 0 To size - 1\n            Console.WriteLine(\"Enter value for element \" & i & \":\")\n            userArray(i) = Console.ReadLine()\n        Next\n        \n        Console.WriteLine(\"Array elements are:\")\n        For Each element As String In userArray\n            Console.WriteLine(element)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a program to find the maximum sum of non-adjacent elements in an array.",
    "code": "```vb\nModule Module1\n    Function MaxNonAdjacentSum(ByVal nums() As Integer) As Integer\n        Dim include As Integer = 0\n        Dim exclude As Integer = 0\n\n        For Each num As Integer In nums\n            Dim newExclude As Integer = Math.Max(include, exclude)\n            include = exclude + num\n            exclude = newExclude\n        Next\n\n        Return Math.Max(include, exclude)\n    End Function\n\n    Sub Main()\n        Dim numbers() As Integer = {3, 2, 5, 10, 7}\n        Dim result As Integer = MaxNonAdjacentSum(numbers)\n        Console.WriteLine(\"Maximum sum of non-adjacent elements: \" & result)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a function to shuffle an array randomly.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim array() As Integer = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n        ShuffleArray(array)\n        For Each num In array\n            Console.WriteLine(num)\n        Next\n    End Sub\n\n    Sub ShuffleArray(ByRef arr() As Integer)\n        Dim rand As New Random()\n        For i As Integer = arr.Length - 1 To 1 Step -1\n            Dim j As Integer = rand.Next(i + 1)\n            Dim temp As Integer = arr(i)\n            arr(i) = arr(j)\n            arr(j) = temp\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a method to generate a new array where each element is the cumulative product of the input array.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim inputArray As Integer() = {1, 2, 3, 4}\n        Dim resultArray As Integer() = CumulativeProduct(inputArray)\n        For Each num As Integer In resultArray\n            Console.WriteLine(num)\n        Next\n    End Sub\n\n    Function CumulativeProduct(arr As Integer()) As Integer()\n        Dim newArray(arr.Length - 1) As Integer\n        Dim product As Integer = 1\n        For i As Integer = 0 To arr.Length - 1\n            product *= arr(i)\n            newArray(i) = product\n        Next\n        Return newArray\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Develop a routine to find the largest element in each row of a 2D array.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim array2D(,) As Integer = {{3, 5, 9}, {7, 2, 1}, {8, 6, 4}}\n        Dim largestInRows(array2D.GetLength(0) - 1) As Integer\n        \n        For i As Integer = 0 To array2D.GetLength(0) - 1\n            Dim max As Integer = array2D(i, 0)\n            For j As Integer = 1 To array2D.GetLength(1) - 1\n                If array2D(i, j) > max Then\n                    max = array2D(i, j)\n                End If\n            Next\n            largestInRows(i) = max\n        Next\n        \n        For Each value As Integer In largestInRows\n            Console.WriteLine(value)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a function to count the number of negative numbers in an array.",
    "code": "```vb\nFunction CountNegativeNumbers(numbers() As Integer) As Integer\n    Dim count As Integer = 0\n    For Each num As Integer In numbers\n        If num < 0 Then\n            count += 1\n        End If\n    Next\n    Return count\nEnd Function\n```"
  },
  {
    "task": "Write a script to find the longest subarray with all distinct elements.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim arr() As Integer = {1, 2, 3, 1, 2, 3, 4, 5}\n        Dim n As Integer = arr.Length\n        Dim maxLength As Integer = 0\n        Dim start As Integer = 0\n\n        Dim seen As New Dictionary(Of Integer, Integer)()\n\n        For i As Integer = 0 To n - 1\n            If seen.ContainsKey(arr(i)) AndAlso seen(arr(i)) >= start Then\n                start = seen(arr(i)) + 1\n            End If\n            seen(arr(i)) = i\n            maxLength = Math.Max(maxLength, i - start + 1)\n        Next\n\n        Console.WriteLine(\"Length of the longest subarray with all distinct elements: \" & maxLength)\n    End Sub\nEnd Module\n```"
  }
]