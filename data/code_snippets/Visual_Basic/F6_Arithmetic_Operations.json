[
  {
    "task": "Write a function that takes two numbers and returns their sum.",
    "code": "```vb\nFunction AddNumbers(ByVal num1 As Double, ByVal num2 As Double) As Double\n    Return num1 + num2\nEnd Function\n```"
  },
  {
    "task": "Create a program that calculates the difference between two given integers.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim num1 As Integer = 15\n        Dim num2 As Integer = 7\n        Dim difference As Integer = num1 - num2\n        Console.WriteLine(\"The difference is: \" & difference)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a function to multiply two floating-point numbers and return the result.",
    "code": "```vb\nFunction MultiplyTwoFloats(num1 As Double, num2 As Double) As Double\n    Return num1 * num2\nEnd Function\n```"
  },
  {
    "task": "Implement a function that divides two numbers and handles division by zero exceptions.",
    "code": "```vb\nFunction DivideNumbers(ByVal numerator As Double, ByVal denominator As Double) As Double\n    Try\n        Return numerator / denominator\n    Catch ex As DivideByZeroException\n        Return Double.PositiveInfinity\n    End Try\nEnd Function\n```"
  },
  {
    "task": "Build a calculator that can perform addition, subtraction, multiplication, and division on user-provided inputs.",
    "code": "```vb\nModule Calculator\n\n    Sub Main()\n        Dim num1, num2 As Double\n        Dim operation As String\n        Dim result As Double\n\n        Console.WriteLine(\"Enter the first number:\")\n        num1 = Convert.ToDouble(Console.ReadLine())\n\n        Console.WriteLine(\"Enter the second number:\")\n        num2 = Convert.ToDouble(Console.ReadLine())\n\n        Console.WriteLine(\"Enter the operation (+, -, *, /):\")\n        operation = Console.ReadLine()\n\n        Select Case operation\n            Case \"+\"\n                result = num1 + num2\n            Case \"-\"\n                result = num1 - num2\n            Case \"*\"\n                result = num1 * num2\n            Case \"/\"\n                If num2 <> 0 Then\n                    result = num1 / num2\n                Else\n                    Console.WriteLine(\"Error: Division by zero.\")\n                    Exit Sub\n                End If\n            Case Else\n                Console.WriteLine(\"Invalid operation.\")\n                Exit Sub\n        End Select\n\n        Console.WriteLine(\"The result is: \" & result)\n    End Sub\n\nEnd Module\n```"
  },
  {
    "task": "Write a script to compute the average of a list of numbers using arithmetic operations.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers As Double() = {10, 20, 30, 40, 50}\n        Dim sum As Double = 0\n        For Each num As Double In numbers\n            sum += num\n        Next\n        Dim average As Double = sum / numbers.Length\n        Console.WriteLine(\"Average: \" & average)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a function that returns the remainder of the division of two integers.",
    "code": "```vb\nFunction Remainder(ByVal dividend As Integer, ByVal divisor As Integer) As Integer\n    Return dividend Mod divisor\nEnd Function\n```"
  },
  {
    "task": "Develop a function that can add a variable number of arguments and return the total.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim total As Double = AddNumbers(1, 2, 3, 4.5, 5)\n        Console.WriteLine(\"Total: \" & total)\n    End Sub\n\n    Function AddNumbers(ParamArray numbers() As Double) As Double\n        Dim sum As Double = 0\n        For Each num As Double In numbers\n            sum += num\n        Next\n        Return sum\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Write a program that subtracts a series of numbers from an initial value.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim initialValue As Double = 100 ' Example initial value\n        Dim numbers() As Double = {10, 5, 20, 15} ' Example series of numbers\n\n        For Each number As Double In numbers\n            initialValue -= number\n        Next\n\n        Console.WriteLine(\"Final result: \" & initialValue)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a function that multiplies all elements in an array and returns the product.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers As Integer() = {2, 3, 4, 5}\n        Dim result As Integer = MultiplyArrayElements(numbers)\n        Console.WriteLine(\"The product is: \" & result)\n    End Sub\n\n    Function MultiplyArrayElements(arr As Integer()) As Integer\n        Dim product As Integer = 1\n        For Each number As Integer In arr\n            product *= number\n        Next\n        Return product\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Design a program that divides a number by another and rounds the result to two decimal places.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim num1 As Double = 10.0\n        Dim num2 As Double = 3.0\n        Dim result As Double = num1 / num2\n        result = Math.Round(result, 2)\n        Console.WriteLine(\"The result is: \" & result)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a function that performs arithmetic operations on complex numbers.",
    "code": "```vb\nPublic Class ComplexNumber\n    Public Real As Double\n    Public Imaginary As Double\n\n    Public Sub New(real As Double, imaginary As Double)\n        Me.Real = real\n        Me.Imaginary = imaginary\n    End Sub\n\n    Public Function Add(other As ComplexNumber) As ComplexNumber\n        Return New ComplexNumber(Me.Real + other.Real, Me.Imaginary + other.Imaginary)\n    End Function\n\n    Public Function Subtract(other As ComplexNumber) As ComplexNumber\n        Return New ComplexNumber(Me.Real - other.Real, Me.Imaginary - other.Imaginary)\n    End Function\n\n    Public Function Multiply(other As ComplexNumber) As ComplexNumber\n        Dim realPart As Double = Me.Real * other.Real - Me.Imaginary * other.Imaginary\n        Dim imaginaryPart As Double = Me.Real * other.Imaginary + Me.Imaginary * other.Real\n        Return New ComplexNumber(realPart, imaginaryPart)\n    End Function\n\n    Public Function Divide(other As ComplexNumber) As ComplexNumber\n        Dim denominator As Double = other.Real * other.Real + other.Imaginary * other.Imaginary\n        Dim realPart As Double = (Me.Real * other.Real + Me.Imaginary * other.Imaginary) / denominator\n        Dim imaginaryPart As Double = (Me.Imaginary * other.Real - Me.Real * other.Imaginary) / denominator\n        Return New ComplexNumber(realPart, imaginaryPart)\n    End Function\nEnd Class\n```"
  },
  {
    "task": "Write a function to calculate the area of a rectangle given its length and width using multiplication.",
    "code": "```vb\nFunction CalculateRectangleArea(length As Double, width As Double) As Double\n    CalculateRectangleArea = length * width\nEnd Function\n```"
  },
  {
    "task": "Build a program that converts a price in dollars to another currency using multiplication with exchange rates.",
    "code": "```vb\nModule CurrencyConverter\n    Sub Main()\n        Dim dollars As Double\n        Dim exchangeRate As Double\n        Dim convertedAmount As Double\n\n        Console.WriteLine(\"Enter the amount in dollars:\")\n        dollars = Convert.ToDouble(Console.ReadLine())\n\n        Console.WriteLine(\"Enter the exchange rate:\")\n        exchangeRate = Convert.ToDouble(Console.ReadLine())\n\n        convertedAmount = dollars * exchangeRate\n\n        Console.WriteLine(\"Converted amount: \" & convertedAmount)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a function that checks if a number is divisible by another and returns a boolean.",
    "code": "```vb\nFunction IsDivisible(ByVal dividend As Integer, ByVal divisor As Integer) As Boolean\n    Return dividend Mod divisor = 0\nEnd Function\n```"
  },
  {
    "task": "Write a script to sum the digits of an integer using arithmetic operations.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim number As Integer\n        Console.WriteLine(\"Enter an integer:\")\n        number = Convert.ToInt32(Console.ReadLine())\n        Dim sum As Integer = 0\n\n        While number <> 0\n            sum += number Mod 10\n            number \\= 10\n        End While\n\n        Console.WriteLine(\"The sum of the digits is: \" & sum)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a function that applies a discount percentage to a price using subtraction and multiplication.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim originalPrice As Double = 100.0\n        Dim discountPercentage As Double = 15.0\n        Dim discountedPrice As Double = ApplyDiscount(originalPrice, discountPercentage)\n        Console.WriteLine(\"Discounted Price: \" & discountedPrice)\n    End Sub\n\n    Function ApplyDiscount(ByVal price As Double, ByVal discountPercent As Double) As Double\n        Dim discountAmount As Double = price * (discountPercent / 100)\n        Dim finalPrice As Double = price - discountAmount\n        Return finalPrice\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Create a program to calculate the yearly salary given an hourly wage and hours worked per week.",
    "code": "```vb\nModule SalaryCalculator\n    Sub Main()\n        Dim hourlyWage As Double\n        Dim hoursPerWeek As Double\n        Dim weeksPerYear As Integer = 52\n        Dim yearlySalary As Double\n\n        Console.Write(\"Enter hourly wage: \")\n        hourlyWage = Convert.ToDouble(Console.ReadLine())\n\n        Console.Write(\"Enter hours worked per week: \")\n        hoursPerWeek = Convert.ToDouble(Console.ReadLine())\n\n        yearlySalary = hourlyWage * hoursPerWeek * weeksPerYear\n\n        Console.WriteLine(\"Yearly Salary: \" & yearlySalary)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a function that calculates the compound interest over a given period using arithmetic operations.",
    "code": "```vb\nFunction CalculateCompoundInterest(principal As Double, rate As Double, timesCompounded As Integer, years As Integer) As Double\n    Dim amount As Double\n    amount = principal * (1 + rate / timesCompounded) ^ (timesCompounded * years)\n    Return amount\nEnd Function\n```"
  },
  {
    "task": "Write a program that scales a 2D point by a given factor using multiplication.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim x As Double = 3.0\n        Dim y As Double = 4.0\n        Dim scaleFactor As Double = 2.5\n\n        Dim scaledX As Double = x * scaleFactor\n        Dim scaledY As Double = y * scaleFactor\n\n        Console.WriteLine(\"Scaled X: \" & scaledX)\n        Console.WriteLine(\"Scaled Y: \" & scaledY)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a function that calculates the perimeter of a triangle given its side lengths.",
    "code": "```vb\nFunction CalculateTrianglePerimeter(side1 As Double, side2 As Double, side3 As Double) As Double\n    Return side1 + side2 + side3\nEnd Function\n```"
  },
  {
    "task": "Create a function to determine if three sides can form a right triangle using the Pythagorean theorem.",
    "code": "```vb\nFunction IsRightTriangle(a As Double, b As Double, c As Double) As Boolean\n    Dim sides() As Double = {a, b, c}\n    Array.Sort(sides)\n    Return sides(0) ^ 2 + sides(1) ^ 2 = sides(2) ^ 2\nEnd Function\n```"
  },
  {
    "task": "Write a script that calculates the total cost of items in a shopping cart using addition.",
    "code": "```vb\nModule ShoppingCart\n    Sub Main()\n        Dim item1 As Decimal = 15.5D\n        Dim item2 As Decimal = 23.99D\n        Dim item3 As Decimal = 9.75D\n        Dim totalCost As Decimal\n\n        totalCost = item1 + item2 + item3\n\n        Console.WriteLine(\"The total cost of items in the shopping cart is: \" & totalCost)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a function that returns the quotient and remainder of a division operation.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim quotient As Integer\n        Dim remainder As Integer\n        Division(10, 3, quotient, remainder)\n        Console.WriteLine(\"Quotient: \" & quotient)\n        Console.WriteLine(\"Remainder: \" & remainder)\n    End Sub\n\n    Sub Division(ByVal dividend As Integer, ByVal divisor As Integer, ByRef quotient As Integer, ByRef remainder As Integer)\n        quotient = dividend \\ divisor\n        remainder = dividend Mod divisor\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Build a program that simulates a basic checkout system using arithmetic operations for totals and discounts.",
    "code": "```vb\nModule CheckoutSystem\n    Sub Main()\n        Dim item1 As Decimal = 10.5D\n        Dim item2 As Decimal = 5.75D\n        Dim item3 As Decimal = 3.3D\n        Dim discountRate As Decimal = 0.1D\n        Dim total As Decimal\n        Dim discountAmount As Decimal\n        Dim finalTotal As Decimal\n\n        total = item1 + item2 + item3\n        discountAmount = total * discountRate\n        finalTotal = total - discountAmount\n\n        Console.WriteLine(\"Total: $\" & total)\n        Console.WriteLine(\"Discount: $\" & discountAmount)\n        Console.WriteLine(\"Final Total: $\" & finalTotal)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a function to calculate the distance between two points on a plane using subtraction and square roots.",
    "code": "```vb\nImports System\n\nModule Module1\n    Sub Main()\n        Dim x1 As Double = 3.0\n        Dim y1 As Double = 4.0\n        Dim x2 As Double = 6.0\n        Dim y2 As Double = 8.0\n\n        Dim distance As Double = CalculateDistance(x1, y1, x2, y2)\n        Console.WriteLine(\"Distance: \" & distance)\n    End Sub\n\n    Function CalculateDistance(ByVal x1 As Double, ByVal y1 As Double, ByVal x2 As Double, ByVal y2 As Double) As Double\n        Dim dx As Double = x2 - x1\n        Dim dy As Double = y2 - y1\n        Return Math.Sqrt(dx * dx + dy * dy)\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Write a function that calculates the speed of a vehicle given distance and time using division.",
    "code": "```vb\nFunction CalculateSpeed(ByVal distance As Double, ByVal time As Double) As Double\n    Return distance / time\nEnd Function\n```"
  },
  {
    "task": "Create a program to compute the total minutes in a given number of hours using multiplication.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim hours As Integer = 5 ' Example input\n        Dim totalMinutes As Integer\n\n        totalMinutes = hours * 60\n\n        Console.WriteLine(\"Total minutes: \" & totalMinutes)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a function that determines the number of dozens of eggs from a given total number of eggs.",
    "code": "```vb\nFunction CalculateDozens(totalEggs As Integer) As Integer\n    Return totalEggs \\ 12\nEnd Function\n```"
  },
  {
    "task": "Write a script to find the greatest common divisor of two numbers using arithmetic operations.",
    "code": "```vb\nModule Program\n    Sub Main()\n        Dim a As Integer = 56\n        Dim b As Integer = 98\n        Console.WriteLine(\"GCD of \" & a & \" and \" & b & \" is \" & GCD(a, b))\n    End Sub\n\n    Function GCD(ByVal x As Integer, ByVal y As Integer) As Integer\n        While y <> 0\n            Dim temp As Integer = y\n            y = x Mod y\n            x = temp\n        End While\n        Return x\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Develop a program that calculates the total weight of multiple items using addition.",
    "code": "```vb\nModule Program\n    Sub Main()\n        Dim item1Weight As Double = 1.5\n        Dim item2Weight As Double = 2.3\n        Dim item3Weight As Double = 3.7\n\n        Dim totalWeight As Double = item1Weight + item2Weight + item3Weight\n\n        Console.WriteLine(\"The total weight of the items is: \" & totalWeight & \" units.\")\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a function to convert a temperature from Celsius to Fahrenheit using multiplication and addition.",
    "code": "```vb\nFunction CelsiusToFahrenheit(celsius As Double) As Double\n    Return celsius * 9 / 5 + 32\nEnd Function\n```"
  },
  {
    "task": "Create a program that determines the age difference between two people given their birth years.",
    "code": "```vb\nModule Program\n    Sub Main()\n        Console.WriteLine(\"Enter the birth year of the first person:\")\n        Dim birthYear1 As Integer = Convert.ToInt32(Console.ReadLine())\n\n        Console.WriteLine(\"Enter the birth year of the second person:\")\n        Dim birthYear2 As Integer = Convert.ToInt32(Console.ReadLine())\n\n        Dim ageDifference As Integer = Math.Abs(birthYear1 - birthYear2)\n\n        Console.WriteLine(\"The age difference between the two people is: \" & ageDifference & \" years.\")\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function to calculate the final price after applying tax and discount using addition and subtraction.",
    "code": "```vb\nFunction CalculateFinalPrice(originalPrice As Double, taxRate As Double, discount As Double) As Double\n    Dim taxAmount As Double\n    Dim discountedPrice As Double\n    Dim finalPrice As Double\n    \n    taxAmount = originalPrice * taxRate\n    discountedPrice = originalPrice - discount\n    finalPrice = discountedPrice + taxAmount\n    \n    Return finalPrice\nEnd Function\n```"
  },
  {
    "task": "Design a program to compute the net profit given total revenue and expenses.",
    "code": "```vb\nModule NetProfitCalculator\n    Sub Main()\n        Dim totalRevenue As Double\n        Dim totalExpenses As Double\n        Dim netProfit As Double\n\n        Console.WriteLine(\"Enter Total Revenue:\")\n        totalRevenue = Convert.ToDouble(Console.ReadLine())\n\n        Console.WriteLine(\"Enter Total Expenses:\")\n        totalExpenses = Convert.ToDouble(Console.ReadLine())\n\n        netProfit = totalRevenue - totalExpenses\n\n        Console.WriteLine(\"Net Profit: \" & netProfit)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a function to calculate the BMI given weight and height using division and multiplication.",
    "code": "```vb\nFunction CalculateBMI(weight As Double, height As Double) As Double\n    Return weight / (height * height)\nEnd Function\n```"
  },
  {
    "task": "Create a function that calculates the midpoint between two numbers using addition and division.",
    "code": "```vb\nFunction CalculateMidpoint(ByVal num1 As Double, ByVal num2 As Double) As Double\n    Dim midpoint As Double\n    midpoint = (num1 + num2) / 2\n    Return midpoint\nEnd Function\n```"
  },
  {
    "task": "Write a program that outputs the result of dividing a number by another with remainder.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numerator As Integer = 10\n        Dim denominator As Integer = 3\n        Dim quotient As Integer = numerator \\ denominator\n        Dim remainder As Integer = numerator Mod denominator\n        Console.WriteLine(\"Quotient: \" & quotient)\n        Console.WriteLine(\"Remainder: \" & remainder)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a function to calculate the factorial of a number using multiplication.",
    "code": "```vb\nModule FactorialModule\n    Function CalculateFactorial(ByVal number As Integer) As Long\n        Dim result As Long = 1\n        For i As Integer = 1 To number\n            result *= i\n        Next\n        Return result\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Build a script to find the average of three numbers using addition and division.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim num1 As Double = 10\n        Dim num2 As Double = 20\n        Dim num3 As Double = 30\n        Dim sum As Double\n        Dim average As Double\n\n        sum = num1 + num2 + num3\n        average = sum / 3\n\n        Console.WriteLine(\"The average is: \" & average)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a program that simulates a simple bank account using arithmetic operations for deposits and withdrawals.",
    "code": "```vb\nModule SimpleBankAccount\n    Sub Main()\n        Dim balance As Double = 0.0\n        Dim depositAmount As Double\n        Dim withdrawalAmount As Double\n\n        Console.WriteLine(\"Enter the amount to deposit:\")\n        depositAmount = Convert.ToDouble(Console.ReadLine())\n        balance += depositAmount\n        Console.WriteLine(\"Balance after deposit: \" & balance)\n\n        Console.WriteLine(\"Enter the amount to withdraw:\")\n        withdrawalAmount = Convert.ToDouble(Console.ReadLine())\n        If withdrawalAmount <= balance Then\n            balance -= withdrawalAmount\n            Console.WriteLine(\"Balance after withdrawal: \" & balance)\n        Else\n            Console.WriteLine(\"Insufficient funds for withdrawal.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function that computes the cost per item given a total cost and quantity using division.",
    "code": "```vb\nFunction CostPerItem(totalCost As Double, quantity As Integer) As Double\n    Return totalCost / quantity\nEnd Function\n```"
  },
  {
    "task": "Design a program that calculates the time required to travel a distance at a given speed.",
    "code": "```vb\nModule TravelTimeCalculator\n    Sub Main()\n        Dim distance As Double\n        Dim speed As Double\n        Dim time As Double\n\n        Console.WriteLine(\"Enter the distance (in kilometers): \")\n        distance = Convert.ToDouble(Console.ReadLine())\n\n        Console.WriteLine(\"Enter the speed (in kilometers per hour): \")\n        speed = Convert.ToDouble(Console.ReadLine())\n\n        If speed > 0 Then\n            time = distance / speed\n            Console.WriteLine(\"Time required to travel the distance: \" & time & \" hours.\")\n        Else\n            Console.WriteLine(\"Speed must be greater than zero.\")\n        End If\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a function that returns the absolute difference between two numbers.",
    "code": "```vb\nFunction AbsoluteDifference(ByVal num1 As Double, ByVal num2 As Double) As Double\n    Return Math.Abs(num1 - num2)\nEnd Function\n```"
  },
  {
    "task": "Implement a program to compute the geometric mean of a set of numbers using multiplication and roots.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers As Double() = {1.0, 2.0, 3.0, 4.0, 5.0}\n        Dim product As Double = 1.0\n        Dim count As Integer = numbers.Length\n\n        For Each number As Double In numbers\n            product *= number\n        Next\n\n        Dim geometricMean As Double = Math.Pow(product, 1.0 / count)\n        Console.WriteLine(\"Geometric Mean: \" & geometricMean)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function to calculate the total interest paid on a loan using arithmetic operations.",
    "code": "```vb\nFunction CalculateTotalInterest(principal As Double, annualRate As Double, years As Integer) As Double\n    Dim totalAmount As Double\n    Dim totalInterest As Double\n    totalAmount = principal * (1 + annualRate * years)\n    totalInterest = totalAmount - principal\n    Return totalInterest\nEnd Function\n```"
  },
  {
    "task": "Create a program that calculates the sum of even numbers within a specified range.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim startRange As Integer\n        Dim endRange As Integer\n        Dim sum As Integer = 0\n        \n        Console.Write(\"Enter the start of the range: \")\n        startRange = Convert.ToInt32(Console.ReadLine())\n        \n        Console.Write(\"Enter the end of the range: \")\n        endRange = Convert.ToInt32(Console.ReadLine())\n        \n        For i As Integer = startRange To endRange\n            If i Mod 2 = 0 Then\n                sum += i\n            End If\n        Next\n        \n        Console.WriteLine(\"The sum of even numbers in the range is: \" & sum)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a script to determine the final balance in a savings account after regular deposits and withdrawals.",
    "code": "```vb\nModule SavingsAccount\n\n    Sub Main()\n        Dim initialBalance As Decimal = 1000.0D\n        Dim deposits() As Decimal = {200.0D, 150.0D, 300.0D}\n        Dim withdrawals() As Decimal = {100.0D, 50.0D, 25.0D}\n        Dim finalBalance As Decimal = initialBalance\n\n        For Each deposit As Decimal In deposits\n            finalBalance += deposit\n        Next\n\n        For Each withdrawal As Decimal In withdrawals\n            finalBalance -= withdrawal\n        Next\n\n        Console.WriteLine(\"Final Balance: \" & finalBalance.ToString(\"C\"))\n    End Sub\n\nEnd Module\n```"
  },
  {
    "task": "Develop a function to compute the surface area of a cylinder given its radius and height.",
    "code": "```vb\nFunction SurfaceAreaOfCylinder(ByVal radius As Double, ByVal height As Double) As Double\n    Dim surfaceArea As Double\n    surfaceArea = 2 * Math.PI * radius * (radius + height)\n    Return surfaceArea\nEnd Function\n```"
  },
  {
    "task": "Write a program that outputs the result of an arithmetic sequence given the first term and common difference.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim firstTerm As Integer = 5\n        Dim commonDifference As Integer = 3\n        Dim numberOfTerms As Integer = 10\n        Dim result As String = \"\"\n\n        For i As Integer = 0 To numberOfTerms - 1\n            Dim term As Integer = firstTerm + i * commonDifference\n            result &= term.ToString() & \" \"\n        Next\n\n        Console.WriteLine(\"Arithmetic Sequence: \" & result.Trim())\n        Console.ReadLine()\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a function that finds the average speed for a trip given total distance and time.",
    "code": "```vb\nFunction CalculateAverageSpeed(ByVal totalDistance As Double, ByVal totalTime As Double) As Double\n    If totalTime = 0 Then\n        Return 0\n    End If\n    Dim averageSpeed As Double\n    averageSpeed = totalDistance / totalTime\n    Return averageSpeed\nEnd Function\n```"
  },
  {
    "task": "Create a function to calculate the total cost of a road trip given fuel cost per mile and distance.",
    "code": "```vb\nFunction CalculateTotalCost(fuelCostPerMile As Double, distance As Double) As Double\n    Dim totalCost As Double\n    totalCost = fuelCostPerMile * distance\n    Return totalCost\nEnd Function\n```"
  },
  {
    "task": "Write a script that determines the number of tiles required to cover a floor area using arithmetic operations.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim floorLength As Double = 10.0\n        Dim floorWidth As Double = 8.0\n        Dim tileLength As Double = 0.5\n        Dim tileWidth As Double = 0.5\n\n        Dim floorArea As Double = floorLength * floorWidth\n        Dim tileArea As Double = tileLength * tileWidth\n\n        Dim numberOfTiles As Integer = Math.Ceiling(floorArea / tileArea)\n\n        Console.WriteLine(\"Number of tiles required: \" & numberOfTiles)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a program to calculate the amount of paint needed to cover a wall given its area.",
    "code": "```vb\nModule PaintCalculator\n    Sub Main()\n        Dim wallWidth As Double\n        Dim wallHeight As Double\n        Dim paintCoverage As Double\n        Dim area As Double\n        Dim paintNeeded As Double\n        \n        ' Example values, modify as needed\n        wallWidth = 10.0 ' Width of the wall in meters\n        wallHeight = 3.0 ' Height of the wall in meters\n        paintCoverage = 12.0 ' Paint coverage in square meters per liter\n\n        ' Calculate the area of the wall\n        area = wallWidth * wallHeight\n        \n        ' Calculate the amount of paint needed\n        paintNeeded = area / paintCoverage\n        \n        ' Output the result\n        Console.WriteLine(\"Amount of paint needed: \" & paintNeeded & \" liters\")\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Build a function that calculates the price per unit weight given total price and weight.",
    "code": "```vb\nFunction CalculatePricePerUnitWeight(totalPrice As Double, weight As Double) As Double\n    Return totalPrice / weight\nEnd Function\n```"
  },
  {
    "task": "Implement a program that computes the volume of a rectangular prism given its dimensions.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim length As Double\n        Dim width As Double\n        Dim height As Double\n        Dim volume As Double\n\n        Console.WriteLine(\"Enter the length of the rectangular prism:\")\n        length = Convert.ToDouble(Console.ReadLine())\n\n        Console.WriteLine(\"Enter the width of the rectangular prism:\")\n        width = Convert.ToDouble(Console.ReadLine())\n\n        Console.WriteLine(\"Enter the height of the rectangular prism:\")\n        height = Convert.ToDouble(Console.ReadLine())\n\n        volume = length * width * height\n\n        Console.WriteLine(\"The volume of the rectangular prism is: \" & volume)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function to find the percentage increase or decrease between two numbers.",
    "code": "```vb\nFunction PercentageChange(oldValue As Double, newValue As Double) As Double\n    If oldValue = 0 Then\n        Return 0\n    Else\n        Return ((newValue - oldValue) / oldValue) * 100\n    End If\nEnd Function\n```"
  },
  {
    "task": "Create a program to determine the number of complete weeks within a specified number of days.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim days As Integer\n        Console.WriteLine(\"Enter the number of days:\")\n        days = Convert.ToInt32(Console.ReadLine())\n        \n        Dim completeWeeks As Integer\n        completeWeeks = days \\ 7\n        \n        Console.WriteLine(\"Number of complete weeks: \" & completeWeeks)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a function that calculates the break-even point for a business using cost and revenue data.",
    "code": "```vb\nFunction CalculateBreakEvenPoint(fixedCosts As Double, variableCostsPerUnit As Double, pricePerUnit As Double) As Double\n    If pricePerUnit <= variableCostsPerUnit Then\n        Return Double.PositiveInfinity\n    End If\n    Return fixedCosts / (pricePerUnit - variableCostsPerUnit)\nEnd Function\n```"
  },
  {
    "task": "Develop a program that converts a total number of seconds into hours, minutes, and seconds.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim totalSeconds As Integer\n        Dim hours As Integer\n        Dim minutes As Integer\n        Dim seconds As Integer\n\n        Console.WriteLine(\"Enter the total number of seconds:\")\n        totalSeconds = Convert.ToInt32(Console.ReadLine())\n\n        hours = totalSeconds \\ 3600\n        totalSeconds = totalSeconds Mod 3600\n\n        minutes = totalSeconds \\ 60\n        seconds = totalSeconds Mod 60\n\n        Console.WriteLine(\"Hours: \" & hours)\n        Console.WriteLine(\"Minutes: \" & minutes)\n        Console.WriteLine(\"Seconds: \" & seconds)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function that calculates the depreciation of an asset over time using arithmetic operations.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim initialCost As Double = 10000.0\n        Dim salvageValue As Double = 2000.0\n        Dim usefulLife As Integer = 5\n        Dim depreciation As Double\n\n        depreciation = CalculateDepreciation(initialCost, salvageValue, usefulLife)\n        Console.WriteLine(\"Annual Depreciation: \" & depreciation)\n    End Sub\n\n    Function CalculateDepreciation(ByVal initialCost As Double, ByVal salvageValue As Double, ByVal usefulLife As Integer) As Double\n        Return (initialCost - salvageValue) / usefulLife\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Create a program that computes the final exam grade needed to achieve a target course average.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim currentAverage As Double\n        Dim desiredAverage As Double\n        Dim finalExamWeight As Double\n        Dim finalExamGradeNeeded As Double\n\n        Console.Write(\"Enter current course average: \")\n        currentAverage = Convert.ToDouble(Console.ReadLine())\n\n        Console.Write(\"Enter desired course average: \")\n        desiredAverage = Convert.ToDouble(Console.ReadLine())\n\n        Console.Write(\"Enter final exam weight (as a decimal): \")\n        finalExamWeight = Convert.ToDouble(Console.ReadLine())\n\n        finalExamGradeNeeded = (desiredAverage - (1 - finalExamWeight) * currentAverage) / finalExamWeight\n\n        Console.WriteLine(\"Final Exam Grade Needed: \" & finalExamGradeNeeded.ToString(\"F2\"))\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a function to calculate the total cost of groceries given prices and quantities of items.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim prices As Double() = {2.99, 1.49, 3.79}\n        Dim quantities As Integer() = {3, 5, 2}\n\n        Dim totalCost As Double = CalculateTotalCost(prices, quantities)\n        Console.WriteLine(\"Total Cost: \" & totalCost.ToString(\"F2\"))\n    End Sub\n\n    Function CalculateTotalCost(prices As Double(), quantities As Integer()) As Double\n        Dim total As Double = 0.0\n        For i As Integer = 0 To prices.Length - 1\n            total += prices(i) * quantities(i)\n        Next\n        Return total\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Write a script that determines the number of years required to double an investment using a fixed interest rate.",
    "code": "```vb\nModule InvestmentDoubling\n    Sub Main()\n        Dim principal As Double = 1000 ' Initial investment amount\n        Dim rate As Double = 0.05 ' Fixed interest rate (5%)\n        Dim target As Double = principal * 2 ' Target amount to double the investment\n        Dim years As Integer = 0 ' Counter for the number of years\n\n        While principal < target\n            principal *= (1 + rate)\n            years += 1\n        End While\n\n        Console.WriteLine(\"Years required to double the investment: \" & years)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a function that computes the harmonic mean of a set of numbers using division and addition.",
    "code": "```vb\nFunction HarmonicMean(numbers() As Double) As Double\n    Dim sum As Double = 0\n    Dim count As Integer = numbers.Length\n    \n    For Each num As Double In numbers\n        If num <> 0 Then\n            sum += 1 / num\n        End If\n    Next\n    \n    If sum = 0 Then\n        Return 0\n    Else\n        Return count / sum\n    End If\nEnd Function\n```"
  },
  {
    "task": "Create a program to find the sum of the squares of numbers in a given range.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim startRange As Integer = 1\n        Dim endRange As Integer = 10\n        Dim sumOfSquares As Integer = 0\n\n        For i As Integer = startRange To endRange\n            sumOfSquares += i * i\n        Next\n\n        Console.WriteLine(\"Sum of squares: \" & sumOfSquares)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a function that calculates the energy consumption of an appliance given power and usage time.",
    "code": "```vb\nFunction CalculateEnergyConsumption(power As Double, usageTime As Double) As Double\n    Return power * usageTime\nEnd Function\n```"
  },
  {
    "task": "Write a program that simulates a simple stock portfolio using arithmetic operations for buying and selling.",
    "code": "```vb\nModule StockPortfolio\n    Sub Main()\n        Dim cash As Decimal = 10000D\n        Dim stockPrice As Decimal = 50D\n        Dim stocksOwned As Integer = 0\n\n        ' Buying 100 stocks\n        Dim stocksToBuy As Integer = 100\n        Dim purchaseCost As Decimal = stocksToBuy * stockPrice\n        If cash >= purchaseCost Then\n            stocksOwned += stocksToBuy\n            cash -= purchaseCost\n        End If\n\n        ' Selling 50 stocks\n        Dim stocksToSell As Integer = 50\n        Dim saleRevenue As Decimal = stocksToSell * stockPrice\n        If stocksOwned >= stocksToSell Then\n            stocksOwned -= stocksToSell\n            cash += saleRevenue\n        End If\n\n        Console.WriteLine(\"Cash: \" & cash.ToString(\"C\"))\n        Console.WriteLine(\"Stocks Owned: \" & stocksOwned)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a function to calculate the gravitational force between two masses using multiplication and division.",
    "code": "```vb\nModule GravitationalForceCalculator\n    Function CalculateGravitationalForce(ByVal mass1 As Double, ByVal mass2 As Double, ByVal distance As Double) As Double\n        Dim G As Double = 6.67430E-11\n        Return G * (mass1 * mass2) / (distance * distance)\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Create a function that determines the price per square foot of a piece of real estate.",
    "code": "```vb\nFunction PricePerSquareFoot(totalPrice As Double, totalSquareFeet As Double) As Double\n    If totalSquareFeet = 0 Then\n        Return 0\n    End If\n    Return totalPrice / totalSquareFeet\nEnd Function\n```"
  },
  {
    "task": "Write a script to compute the total interest earned on a savings account with monthly compounding.",
    "code": "```vb\nModule SavingsInterestCalculator\n    Sub Main()\n        Dim principal As Double = 1000.0\n        Dim annualRate As Double = 0.05\n        Dim months As Integer = 12\n        Dim totalInterest As Double\n\n        totalInterest = principal * ((1 + annualRate / 12) ^ months - 1)\n\n        Console.WriteLine(\"Total Interest Earned: \" & totalInterest.ToString(\"F2\"))\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a program that calculates the calories burned during exercise given MET value and duration.",
    "code": "```vb\nModule ExerciseCalories\n    Sub Main()\n        Dim metValue As Double\n        Dim durationHours As Double\n        Dim weightKg As Double\n        Dim caloriesBurned As Double\n\n        metValue = 8.0 ' Example MET value for exercise\n        durationHours = 1.0 ' Duration in hours\n        weightKg = 70.0 ' Weight of the person in kilograms\n\n        caloriesBurned = metValue * weightKg * durationHours\n        Console.WriteLine(\"Calories burned: \" & caloriesBurned)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Build a function that converts a speed from miles per hour to kilometers per hour using multiplication.",
    "code": "```vb\nFunction ConvertMphToKph(mph As Double) As Double\n    Return mph * 1.60934\nEnd Function\n```"
  },
  {
    "task": "Implement a program to find the number of days between two dates using arithmetic operations.",
    "code": "```vb\nModule Module1\n\n    Sub Main()\n        Dim date1 As Date = #1/1/2023#\n        Dim date2 As Date = #12/31/2023#\n        \n        Dim difference As TimeSpan = date2.Subtract(date1)\n        Dim numberOfDays As Integer = difference.Days\n        \n        Console.WriteLine(\"Number of days between the two dates: \" & numberOfDays)\n    End Sub\n\nEnd Module\n```"
  },
  {
    "task": "Write a function to calculate the area of a circle given its radius.",
    "code": "```vb\nFunction CalculateCircleArea(ByVal radius As Double) As Double\n    Return Math.PI * radius * radius\nEnd Function\n```"
  },
  {
    "task": "Create a program that determines the total distance driven given trips with varying speeds and durations.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim trips As List(Of Tuple(Of Double, Double)) = New List(Of Tuple(Of Double, Double)) From {\n            Tuple.Create(60.0, 1.5),\n            Tuple.Create(80.0, 2.0),\n            Tuple.Create(50.0, 2.5)\n        }\n        \n        Dim totalDistance As Double = 0.0\n        \n        For Each trip In trips\n            Dim speed As Double = trip.Item1\n            Dim duration As Double = trip.Item2\n            totalDistance += speed * duration\n        Next\n        \n        Console.WriteLine(\"Total Distance Driven: \" & totalDistance & \" kilometers\")\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Design a function to compute the final price of an item after applying multiple discounts sequentially.",
    "code": "```vb\nFunction ComputeFinalPrice(initialPrice As Double, discounts() As Double) As Double\n    Dim finalPrice As Double = initialPrice\n    For Each discount As Double In discounts\n        finalPrice -= finalPrice * discount\n    Next\n    Return finalPrice\nEnd Function\n```"
  },
  {
    "task": "Write a script that calculates the number of bricks needed to build a wall given wall dimensions and brick size.",
    "code": "```vb\nModule WallCalculator\n    Sub Main()\n        Dim wallWidth As Double = 10.0 ' example wall width in meters\n        Dim wallHeight As Double = 2.5 ' example wall height in meters\n        Dim brickWidth As Double = 0.2 ' example brick width in meters\n        Dim brickHeight As Double = 0.1 ' example brick height in meters\n\n        Dim wallArea As Double = wallWidth * wallHeight\n        Dim brickArea As Double = brickWidth * brickHeight\n\n        Dim numberOfBricks As Integer = CInt(Math.Ceiling(wallArea / brickArea))\n\n        Console.WriteLine(\"Number of bricks needed: \" & numberOfBricks)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a program to determine the number of pizzas required for a party given the number of people and slices per pizza.",
    "code": "```vb\nModule PizzaCalculator\n    Sub Main()\n        Dim people As Integer\n        Dim slicesPerPizza As Integer\n        Dim slicesPerPerson As Integer\n        Dim totalSlicesNeeded As Integer\n        Dim pizzasRequired As Integer\n\n        ' Assume some values for demonstration\n        people = 20\n        slicesPerPerson = 3\n        slicesPerPizza = 8\n\n        totalSlicesNeeded = people * slicesPerPerson\n        pizzasRequired = Math.Ceiling(totalSlicesNeeded / slicesPerPizza)\n\n        Console.WriteLine(\"Number of pizzas required: \" & pizzasRequired)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a function that calculates the total cost of a meal including tax and tip.",
    "code": "```vb\nModule MealCostCalculator\n    Function CalculateTotalCost(mealCost As Double, taxRate As Double, tipRate As Double) As Double\n        Dim taxAmount As Double = mealCost * taxRate\n        Dim tipAmount As Double = mealCost * tipRate\n        Dim totalCost As Double = mealCost + taxAmount + tipAmount\n        Return totalCost\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Create a program to compute the average rainfall over a period using addition and division.",
    "code": "```vb\nModule AverageRainfall\n    Sub Main()\n        Dim totalRainfall As Double = 0\n        Dim numberOfPeriods As Integer = 5\n        Dim rainfallAmounts() As Double = {2.3, 4.1, 3.6, 5.0, 3.8}\n        \n        For Each rainfall In rainfallAmounts\n            totalRainfall += rainfall\n        Next\n        \n        Dim averageRainfall As Double = totalRainfall / numberOfPeriods\n        Console.WriteLine(\"Average Rainfall: \" & averageRainfall)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function that determines the number of batches needed to produce a specific quantity of a product.",
    "code": "```vb\nModule Module1\n\n    Sub Main()\n        Dim totalQuantity As Integer = 123\n        Dim batchSize As Integer = 10\n        Dim batchesNeeded As Integer = CalculateBatches(totalQuantity, batchSize)\n        Console.WriteLine(\"Batches needed: \" & batchesNeeded)\n    End Sub\n\n    Function CalculateBatches(ByVal totalQuantity As Integer, ByVal batchSize As Integer) As Integer\n        Return Math.Ceiling(totalQuantity / batchSize)\n    End Function\n\nEnd Module\n```"
  },
  {
    "task": "Design a program to calculate the total energy consumption of a household given individual appliance usage.",
    "code": "```vb\nModule EnergyConsumptionCalculator\n    Sub Main()\n        Dim appliance1Usage As Double = 150 ' Example kWh usage\n        Dim appliance2Usage As Double = 250 ' Example kWh usage\n        Dim appliance3Usage As Double = 75  ' Example kWh usage\n        \n        Dim totalEnergyConsumption As Double\n\n        totalEnergyConsumption = appliance1Usage + appliance2Usage + appliance3Usage\n        \n        Console.WriteLine(\"Total Energy Consumption: \" & totalEnergyConsumption & \" kWh\")\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Develop a function that computes the body surface area of a person using height and weight.",
    "code": "```vb\nFunction ComputeBodySurfaceArea(height As Double, weight As Double) As Double\n    Return 0.007184 * Math.Pow(height, 0.725) * Math.Pow(weight, 0.425)\nEnd Function\n```"
  },
  {
    "task": "Build a script to calculate the monthly payment on a mortgage using principal, interest rate, and term.",
    "code": "```vb\nModule MortgageCalculator\n    Sub Main()\n        Dim principal As Double = 200000 ' Example principal amount\n        Dim annualInterestRate As Double = 5 ' Example annual interest rate in percent\n        Dim termInYears As Integer = 30 ' Example term in years\n\n        Dim monthlyInterestRate As Double = (annualInterestRate / 100) / 12\n        Dim numberOfPayments As Integer = termInYears * 12\n\n        Dim monthlyPayment As Double\n        monthlyPayment = (principal * monthlyInterestRate) / (1 - (1 + monthlyInterestRate) ^ -numberOfPayments)\n\n        Console.WriteLine(\"Monthly Payment: \" & monthlyPayment.ToString(\"F2\"))\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a function to find the volume of a cone given its height and radius.",
    "code": "```vb\nFunction VolumeOfCone(ByVal radius As Double, ByVal height As Double) As Double\n    Dim volume As Double\n    volume = (Math.PI * Math.Pow(radius, 2) * height) / 3\n    Return volume\nEnd Function\n```"
  },
  {
    "task": "Write a program that estimates the cost of a trip using fuel efficiency and distance.",
    "code": "```vb\nModule TripCostEstimator\n    Sub Main()\n        Dim fuelEfficiency As Double\n        Dim distance As Double\n        Dim fuelCostPerUnit As Double\n        Dim totalCost As Double\n\n        ' Assign values to variables\n        fuelEfficiency = 25.0 ' miles per gallon\n        distance = 300.0 ' miles\n        fuelCostPerUnit = 3.5 ' cost per gallon\n\n        ' Estimate the cost of the trip\n        totalCost = (distance / fuelEfficiency) * fuelCostPerUnit\n\n        ' Output the result\n        Console.WriteLine(\"Estimated cost of the trip: $\" & totalCost.ToString(\"F2\"))\n    End Sub\nEnd Module\n```"
  }
]