[
  {
    "task": "Create a list of the first ten positive integers and calculate their sum.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers As New List(Of Integer)\n        For i As Integer = 1 To 10\n            numbers.Add(i)\n        Next\n\n        Dim sum As Integer = numbers.Sum()\n        Console.WriteLine(\"The sum is: \" & sum)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a program to reverse the order of elements in a given list.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers As New List(Of Integer) From {1, 2, 3, 4, 5}\n        numbers.Reverse()\n        \n        For Each number In numbers\n            Console.WriteLine(number)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a function that takes a list and returns the list with duplicates removed.",
    "code": "```vb\nFunction RemoveDuplicates(inputList As List(Of Integer)) As List(Of Integer)\n    Dim uniqueList As New List(Of Integer)\n    For Each item In inputList\n        If Not uniqueList.Contains(item) Then\n            uniqueList.Add(item)\n        End If\n    Next\n    Return uniqueList\nEnd Function\n```"
  },
  {
    "task": "Create a list of names and sort them in alphabetical order.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim names As New List(Of String) From {\"John\", \"Alice\", \"Bob\", \"Diana\"}\n        names.Sort()\n        For Each name As String In names\n            Console.WriteLine(name)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function that appends a new element to an existing list.",
    "code": "```vb\nFunction AppendToList(ByRef lst As List(Of Object), newElement As Object) As List(Of Object)\n    lst.Add(newElement)\n    Return lst\nEnd Function\n```"
  },
  {
    "task": "Generate a list of the first 20 even numbers.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim evenNumbers As New List(Of Integer)\n        For i As Integer = 1 To 20\n            evenNumbers.Add(i * 2)\n        Next\n        For Each num In evenNumbers\n            Console.WriteLine(num)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a nested list (a list of lists) and access an element from the inner list.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim nestedList As New List(Of List(Of Integer)) From {\n            New List(Of Integer) From {1, 2, 3},\n            New List(Of Integer) From {4, 5, 6},\n            New List(Of Integer) From {7, 8, 9}\n        }\n\n        Dim element As Integer = nestedList(1)(2)\n        Console.WriteLine(element)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a program that finds the maximum value in a list of integers.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers As List(Of Integer) = New List(Of Integer) From {34, 67, 23, 89, 12}\n        Dim maxValue As Integer = numbers.Max()\n        Console.WriteLine(\"The maximum value is: \" & maxValue)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a function to merge two lists into a single list without duplicates.",
    "code": "```vb\nFunction MergeListsWithoutDuplicates(list1 As List(Of Integer), list2 As List(Of Integer)) As List(Of Integer)\n    Dim resultSet As New HashSet(Of Integer)(list1)\n    resultSet.UnionWith(list2)\n    Return resultSet.ToList()\nEnd Function\n```"
  },
  {
    "task": "Create a list from user input, then display the list in reverse order.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim inputList As New List(Of String)()\n        Console.WriteLine(\"Enter items for the list (type 'end' to finish):\")\n\n        While True\n            Dim userInput As String = Console.ReadLine()\n            If userInput.ToLower() = \"end\" Then\n                Exit While\n            End If\n            inputList.Add(userInput)\n        End While\n\n        inputList.Reverse()\n\n        Console.WriteLine(\"List in reverse order:\")\n        For Each item As String In inputList\n            Console.WriteLine(item)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function that takes a list and returns a new list containing only the even numbers.",
    "code": "```vb\nFunction GetEvenNumbers(numbers As List(Of Integer)) As List(Of Integer)\n    Dim evenNumbers As New List(Of Integer)()\n    For Each number In numbers\n        If number Mod 2 = 0 Then\n            evenNumbers.Add(number)\n        End If\n    Next\n    Return evenNumbers\nEnd Function\n```"
  },
  {
    "task": "Generate a list of squares for the numbers 1 through 10.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim squares As New List(Of Integer)\n        For i As Integer = 1 To 10\n            squares.Add(i * i)\n        Next\n        For Each square In squares\n            Console.WriteLine(square)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a list of floating-point numbers and find their average.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers As New List(Of Double) From {1.5, 2.5, 3.5, 4.5, 5.5}\n        Dim total As Double = 0\n        \n        For Each num As Double In numbers\n            total += num\n        Next\n        \n        Dim average As Double = total / numbers.Count\n        Console.WriteLine(\"Average: \" & average)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a program to rotate the elements of a list to the right by a given number of steps.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim myList As New List(Of Integer)({1, 2, 3, 4, 5})\n        Dim steps As Integer = 2\n\n        RotateRight(myList, steps)\n\n        For Each item In myList\n            Console.Write(item & \" \")\n        Next\n    End Sub\n\n    Sub RotateRight(ByRef list As List(Of Integer), ByVal steps As Integer)\n        Dim count As Integer = list.Count\n        steps = steps Mod count\n        Dim tempList As New List(Of Integer)(list)\n\n        For i As Integer = 0 To count - 1\n            list((i + steps) Mod count) = tempList(i)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function that checks if a list is a palindrome (reads the same forwards and backwards).",
    "code": "```vb\nFunction IsPalindrome(ByVal lst As List(Of Integer)) As Boolean\n    Dim n As Integer = lst.Count\n    For i As Integer = 0 To n \\ 2 - 1\n        If lst(i) <> lst(n - i - 1) Then\n            Return False\n        End If\n    Next\n    Return True\nEnd Function\n```"
  },
  {
    "task": "Create a list of random integers and count how many are greater than 50.",
    "code": "```vb\nImports System\n\nModule Module1\n    Sub Main()\n        Dim rand As New Random()\n        Dim numbersList As New List(Of Integer)()\n        \n        For i As Integer = 1 To 10\n            numbersList.Add(rand.Next(0, 101))\n        Next\n        \n        Dim count As Integer = numbersList.Count(Function(num) num > 50)\n        \n        Console.WriteLine(\"Count of numbers greater than 50: \" & count)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a program that removes the first occurrence of a specified element from a list.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers As New List(Of Integer) From {1, 2, 3, 4, 2, 5}\n        Dim elementToRemove As Integer = 2\n\n        If numbers.Contains(elementToRemove) Then\n            numbers.Remove(elementToRemove)\n        End If\n\n        For Each number In numbers\n            Console.WriteLine(number)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a function that takes two lists and returns a list containing their intersection.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim list1 As List(Of Integer) = New List(Of Integer) From {1, 2, 3, 4, 5}\n        Dim list2 As List(Of Integer) = New List(Of Integer) From {3, 4, 5, 6, 7}\n        Dim resultList As List(Of Integer) = GetIntersection(list1, list2)\n        For Each item In resultList\n            Console.WriteLine(item)\n        Next\n    End Sub\n\n    Function GetIntersection(ByVal list1 As List(Of Integer), ByVal list2 As List(Of Integer)) As List(Of Integer)\n        Dim intersection As List(Of Integer) = New List(Of Integer)\n        For Each item In list1\n            If list2.Contains(item) Then\n                intersection.Add(item)\n            End If\n        Next\n        Return intersection\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Create a list of prime numbers less than 100.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim primes As New List(Of Integer)\n        For num As Integer = 2 To 99\n            Dim isPrime As Boolean = True\n            For i As Integer = 2 To Math.Sqrt(num)\n                If num Mod i = 0 Then\n                    isPrime = False\n                    Exit For\n                End If\n            Next\n            If isPrime Then\n                primes.Add(num)\n            End If\n        Next\n        For Each prime In primes\n            Console.WriteLine(prime)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function to split a list into two lists: one with even numbers and one with odd numbers.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers As New List(Of Integer)({1, 2, 3, 4, 5, 6, 7, 8, 9, 10})\n        Dim (evens, odds) = SplitEvenOdd(numbers)\n        \n        Console.WriteLine(\"Even Numbers: \" & String.Join(\", \", evens))\n        Console.WriteLine(\"Odd Numbers: \" & String.Join(\", \", odds))\n    End Sub\n\n    Function SplitEvenOdd(ByVal numbers As List(Of Integer)) As (List(Of Integer), List(Of Integer))\n        Dim evens As New List(Of Integer)()\n        Dim odds As New List(Of Integer)()\n        \n        For Each number In numbers\n            If number Mod 2 = 0 Then\n                evens.Add(number)\n            Else\n                odds.Add(number)\n            End If\n        Next\n        \n        Return (evens, odds)\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Create a list of strings and convert all the strings to uppercase.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim stringList As New List(Of String) From {\"apple\", \"banana\", \"cherry\"}\n        Dim upperList As List(Of String) = stringList.Select(Function(s) s.ToUpper()).ToList()\n        For Each str As String In upperList\n            Console.WriteLine(str)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a program that removes all elements from a list that are less than a specified value.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers As New List(Of Integer) From {5, 3, 8, 1, 9, 2}\n        Dim threshold As Integer = 4\n        numbers.RemoveAll(Function(x) x < threshold)\n        For Each number As Integer In numbers\n            Console.WriteLine(number)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function that takes a list and returns a new list with elements in random order.",
    "code": "```vb\nImports System\nImports System.Collections.Generic\n\nModule Program\n    Sub Main()\n        Dim originalList As New List(Of Integer) From {1, 2, 3, 4, 5}\n        Dim shuffledList As List(Of Integer) = ShuffleList(originalList)\n        For Each item In shuffledList\n            Console.WriteLine(item)\n        Next\n    End Sub\n\n    Function ShuffleList(Of T)(inputList As List(Of T)) As List(Of T)\n        Dim rnd As New Random()\n        Dim listCopy As New List(Of T)(inputList)\n        Dim shuffledList As New List(Of T)()\n\n        While listCopy.Count > 0\n            Dim index As Integer = rnd.Next(listCopy.Count)\n            shuffledList.Add(listCopy(index))\n            listCopy.RemoveAt(index)\n        End While\n\n        Return shuffledList\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Create a list of tuples where each tuple contains a number and its square.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numberList As New List(Of Tuple(Of Integer, Integer))\n\n        For i As Integer = 1 To 10\n            numberList.Add(Tuple.Create(i, i * i))\n        Next\n\n        For Each numberTuple In numberList\n            Console.WriteLine(\"Number: \" & numberTuple.Item1 & \", Square: \" & numberTuple.Item2)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a program to multiply all elements in a list by a given factor.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers As New List(Of Integer) From {1, 2, 3, 4, 5}\n        Dim factor As Integer = 3\n        Dim multipliedNumbers As List(Of Integer) = MultiplyList(numbers, factor)\n        \n        For Each number As Integer In multipliedNumbers\n            Console.WriteLine(number)\n        Next\n    End Sub\n\n    Function MultiplyList(ByVal numbers As List(Of Integer), ByVal factor As Integer) As List(Of Integer)\n        Dim result As New List(Of Integer)\n        For Each number As Integer In numbers\n            result.Add(number * factor)\n        Next\n        Return result\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Implement a function that flattens a nested list.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim nestedList As List(Of Object) = New List(Of Object) From {\n            1,\n            New List(Of Object) From {2, 3},\n            New List(Of Object) From {\n                New List(Of Object) From {4, 5},\n                6\n            },\n            7\n        }\n        \n        Dim flattenedList As List(Of Integer) = FlattenList(nestedList)\n        \n        For Each item As Integer In flattenedList\n            Console.WriteLine(item)\n        Next\n    End Sub\n\n    Function FlattenList(ByVal nestedList As List(Of Object)) As List(Of Integer)\n        Dim result As New List(Of Integer)\n        \n        For Each item As Object In nestedList\n            If TypeOf item Is Integer Then\n                result.Add(CType(item, Integer))\n            ElseIf TypeOf item Is List(Of Object) Then\n                result.AddRange(FlattenList(CType(item, List(Of Object))))\n            End If\n        Next\n        \n        Return result\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Create a list of dates and sort them chronologically.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim dates As New List(Of Date) From {\n            #12/25/2023#,\n            #1/1/2023#,\n            #7/4/2023#\n        }\n\n        dates.Sort()\n\n        For Each dateValue As Date In dates\n            Console.WriteLine(dateValue.ToShortDateString())\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function that finds the index of the first occurrence of a given element in a list.",
    "code": "```vb\nFunction FindFirstIndex(Of T)(ByVal list As List(Of T), ByVal element As T) As Integer\n    Return list.IndexOf(element)\nEnd Function\n```"
  },
  {
    "task": "Generate a list of Fibonacci numbers up to a specified limit.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim limit As Integer = 100 ' specify the limit\n        Dim fibonacciList As New List(Of Integer)\n        fibonacciList.Add(0)\n        fibonacciList.Add(1)\n        \n        Dim i As Integer = 2\n        While True\n            Dim nextFib As Integer = fibonacciList(i - 1) + fibonacciList(i - 2)\n            If nextFib > limit Then\n                Exit While\n            End If\n            fibonacciList.Add(nextFib)\n            i += 1\n        End While\n\n        For Each num In fibonacciList\n            Console.WriteLine(num)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a list of booleans and determine if all are True.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim boolList As New List(Of Boolean) From {True, True, False, True}\n        Dim allTrue As Boolean = boolList.All(Function(b) b = True)\n        Console.WriteLine(\"All True: \" & allTrue)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a program to concatenate two lists.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim list1 As New List(Of String) From {\"apple\", \"banana\", \"cherry\"}\n        Dim list2 As New List(Of String) From {\"date\", \"fig\", \"grape\"}\n\n        Dim concatenatedList As New List(Of String)\n        concatenatedList.AddRange(list1)\n        concatenatedList.AddRange(list2)\n\n        For Each item As String In concatenatedList\n            Console.WriteLine(item)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a function that returns the length of a list without using built-in functions.",
    "code": "```vb\nFunction ListLength(ByVal lst As List(Of Object)) As Integer\n    Dim count As Integer = 0\n    For Each item In lst\n        count += 1\n    Next\n    Return count\nEnd Function\n```"
  },
  {
    "task": "Create a list of words and find the longest word.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim words As New List(Of String) From {\"apple\", \"banana\", \"cherry\", \"dragonfruit\", \"elderberry\"}\n        Dim longestWord As String = words.OrderByDescending(Function(word) word.Length).First()\n        Console.WriteLine(\"The longest word is: \" & longestWord)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function that takes a list and a predicate function, returning a list of elements that satisfy the predicate.",
    "code": "```vb\nFunction FilterList(Of T)(inputList As List(Of T), predicate As Func(Of T, Boolean)) As List(Of T)\n    Dim resultList As New List(Of T)\n    For Each item In inputList\n        If predicate(item) Then\n            resultList.Add(item)\n        End If\n    Next\n    Return resultList\nEnd Function\n```"
  },
  {
    "task": "Generate a list of strings and filter out those with less than 5 characters.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim strings As List(Of String) = New List(Of String) From {\"apple\", \"pear\", \"banana\", \"kiwi\", \"plum\"}\n        Dim filteredStrings As List(Of String) = strings.Where(Function(s) s.Length >= 5).ToList()\n        \n        For Each s As String In filteredStrings\n            Console.WriteLine(s)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a list of mixed data types and separate them into lists by type.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim mixedList As New List(Of Object) From {1, \"Hello\", 3.14, 2, \"World\", 5.67, True}\n        Dim intList As New List(Of Integer)\n        Dim stringList As New List(Of String)\n        Dim doubleList As New List(Of Double)\n        Dim boolList As New List(Of Boolean)\n\n        For Each item In mixedList\n            If TypeOf item Is Integer Then\n                intList.Add(CType(item, Integer))\n            ElseIf TypeOf item Is String Then\n                stringList.Add(CType(item, String))\n            ElseIf TypeOf item Is Double Then\n                doubleList.Add(CType(item, Double))\n            ElseIf TypeOf item Is Boolean Then\n                boolList.Add(CType(item, Boolean))\n            End If\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a program to find the common elements between two lists.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim list1 As New List(Of Integer) From {1, 2, 3, 4, 5}\n        Dim list2 As New List(Of Integer) From {4, 5, 6, 7, 8}\n        Dim commonElements As List(Of Integer) = list1.Intersect(list2).ToList()\n\n        For Each element In commonElements\n            Console.WriteLine(element)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a function to rotate the elements of a list to the left by a given number of steps.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim myList As New List(Of Integer)({1, 2, 3, 4, 5})\n        Dim steps As Integer = 2\n        RotateLeft(myList, steps)\n        For Each item In myList\n            Console.WriteLine(item)\n        Next\n    End Sub\n\n    Sub RotateLeft(ByRef lst As List(Of Integer), ByVal steps As Integer)\n        If lst.Count = 0 Then Return\n        steps = steps Mod lst.Count\n        Dim rotated As New List(Of Integer)(lst.Skip(steps).Concat(lst.Take(steps)))\n        lst.Clear()\n        lst.AddRange(rotated)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a list of numbers and find the product of all the elements.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers As New List(Of Integer) From {1, 2, 3, 4, 5}\n        Dim product As Integer = 1\n\n        For Each num In numbers\n            product *= num\n        Next\n\n        Console.WriteLine(\"Product of all elements: \" & product)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function that removes all occurrences of a specified element from a list.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim myList As New List(Of Integer)(New Integer() {1, 2, 3, 4, 3, 5})\n        Dim elementToRemove As Integer = 3\n        RemoveAllOccurrences(myList, elementToRemove)\n        For Each item In myList\n            Console.WriteLine(item)\n        Next\n    End Sub\n\n    Sub RemoveAllOccurrences(ByRef list As List(Of Integer), ByVal element As Integer)\n        list.RemoveAll(Function(x) x = element)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Generate a list of random numbers and find the median value.",
    "code": "```vb\nImports System\nImports System.Collections.Generic\nImports System.Linq\n\nModule Program\n    Sub Main()\n        Dim random As New Random()\n        Dim numbers As New List(Of Integer)()\n\n        For i As Integer = 1 To 10\n            numbers.Add(random.Next(1, 101))\n        Next\n\n        numbers.Sort()\n        Dim median As Double\n        Dim count As Integer = numbers.Count\n\n        If count Mod 2 = 0 Then\n            median = (numbers(count \\ 2 - 1) + numbers(count \\ 2)) / 2.0\n        Else\n            median = numbers(count \\ 2)\n        End If\n\n        Console.WriteLine(\"Numbers: \" & String.Join(\", \", numbers))\n        Console.WriteLine(\"Median: \" & median)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a list of dictionaries and sort them by a specific key.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim listOfDicts As New List(Of Dictionary(Of String, Object)) From {\n            New Dictionary(Of String, Object) From {{\"name\", \"Alice\"}, {\"age\", 30}},\n            New Dictionary(Of String, Object) From {{\"name\", \"Bob\"}, {\"age\", 25}},\n            New Dictionary(Of String, Object) From {{\"name\", \"Charlie\"}, {\"age\", 35}}\n        }\n\n        listOfDicts.Sort(Function(x, y) CInt(x(\"age\")).CompareTo(CInt(y(\"age\"))))\n\n        For Each dict As Dictionary(Of String, Object) In listOfDicts\n            Console.WriteLine($\"{dict(\"name\")}, {dict(\"age\")}\")\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a program to split a list into chunks of a specified size.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim list As New List(Of Integer) From {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n        Dim chunkSize As Integer = 3\n        Dim chunks As List(Of List(Of Integer)) = SplitListIntoChunks(list, chunkSize)\n\n        For Each chunk In chunks\n            Console.WriteLine(String.Join(\", \", chunk))\n        Next\n    End Sub\n\n    Function SplitListIntoChunks(Of T)(list As List(Of T), chunkSize As Integer) As List(Of List(Of T))\n        Dim chunks As New List(Of List(Of T))()\n        For i As Integer = 0 To list.Count - 1 Step chunkSize\n            chunks.Add(list.GetRange(i, Math.Min(chunkSize, list.Count - i)))\n        Next\n        Return chunks\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Implement a function that takes a list and returns a dictionary with the frequency of each element.",
    "code": "```vb\nFunction GetFrequency(ByVal inputList As List(Of Object)) As Dictionary(Of Object, Integer)\n    Dim frequencyDict As New Dictionary(Of Object, Integer)\n    For Each element In inputList\n        If frequencyDict.ContainsKey(element) Then\n            frequencyDict(element) += 1\n        Else\n            frequencyDict(element) = 1\n        End If\n    Next\n    Return frequencyDict\nEnd Function\n```"
  },
  {
    "task": "Create a list of integers and replace all negative numbers with zero.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers As New List(Of Integer)({-5, 10, -3, 8, -2, 14})\n        \n        For i As Integer = 0 To numbers.Count - 1\n            If numbers(i) < 0 Then\n                numbers(i) = 0\n            End If\n        Next\n        \n        For Each number As Integer In numbers\n            Console.WriteLine(number)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function that returns the first n elements of a list.",
    "code": "```vb\nFunction GetFirstNElements(Of T)(lst As List(Of T), n As Integer) As List(Of T)\n    Return lst.Take(n).ToList()\nEnd Function\n```"
  },
  {
    "task": "Generate a list of strings and join them into a single string with spaces.",
    "code": "```vb\nModule Program\n    Sub Main()\n        Dim stringList As New List(Of String) From {\"Hello\", \"world\", \"from\", \"Visual\", \"Basic\"}\n        Dim result As String = String.Join(\" \", stringList)\n        Console.WriteLine(result)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a list of lists and find the sum of each inner list.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim listOfLists As New List(Of List(Of Integer)) From {\n            New List(Of Integer) From {1, 2, 3},\n            New List(Of Integer) From {4, 5, 6},\n            New List(Of Integer) From {7, 8, 9}\n        }\n\n        Dim sums As New List(Of Integer)\n\n        For Each innerList As List(Of Integer) In listOfLists\n            Dim sum As Integer = 0\n            For Each num As Integer In innerList\n                sum += num\n            Next\n            sums.Add(sum)\n        Next\n\n        For Each result As Integer In sums\n            Console.WriteLine(result)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function that finds the second largest number in a list.",
    "code": "```vb\nFunction FindSecondLargest(numbers As List(Of Integer)) As Integer\n    If numbers Is Nothing OrElse numbers.Count < 2 Then\n        Throw New ArgumentException(\"List must contain at least two elements.\")\n    End If\n\n    Dim largest As Integer = Integer.MinValue\n    Dim secondLargest As Integer = Integer.MinValue\n\n    For Each num In numbers\n        If num > largest Then\n            secondLargest = largest\n            largest = num\n        ElseIf num > secondLargest AndAlso num < largest Then\n            secondLargest = num\n        End If\n    Next\n\n    Return secondLargest\nEnd Function\n```"
  },
  {
    "task": "Generate a list of numbers and remove the duplicates while maintaining order.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers As New List(Of Integer) From {1, 2, 3, 2, 4, 5, 3, 6, 1, 7}\n        Dim uniqueNumbers As New List(Of Integer)\n\n        For Each number In numbers\n            If Not uniqueNumbers.Contains(number) Then\n                uniqueNumbers.Add(number)\n            End If\n        Next\n\n        For Each number In uniqueNumbers\n            Console.WriteLine(number)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a list of integers and partition it into two lists: one with numbers above the average and one below.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers As New List(Of Integer) From {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n        Dim average As Double = numbers.Average()\n\n        Dim aboveAverage As New List(Of Integer)\n        Dim belowAverage As New List(Of Integer)\n\n        For Each number In numbers\n            If number > average Then\n                aboveAverage.Add(number)\n            ElseIf number < average Then\n                belowAverage.Add(number)\n            End If\n        Next\n\n        ' Output the results\n        Console.WriteLine(\"Above Average: \" & String.Join(\", \", aboveAverage))\n        Console.WriteLine(\"Below Average: \" & String.Join(\", \", belowAverage))\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a program to find the longest increasing subsequence in a list of numbers.",
    "code": "```vb\nModule Module1\n    Function LongestIncreasingSubsequence(ByVal numbers As List(Of Integer)) As List(Of Integer)\n        If numbers.Count = 0 Then Return New List(Of Integer)()\n\n        Dim lengths(numbers.Count - 1) As Integer\n        Dim previous(numbers.Count - 1) As Integer\n        Dim maxLength As Integer = 0\n        Dim maxIndex As Integer = 0\n\n        For i As Integer = 0 To numbers.Count - 1\n            lengths(i) = 1\n            previous(i) = -1\n            For j As Integer = 0 To i - 1\n                If numbers(j) < numbers(i) AndAlso lengths(j) + 1 > lengths(i) Then\n                    lengths(i) = lengths(j) + 1\n                    previous(i) = j\n                End If\n            Next\n            If lengths(i) > maxLength Then\n                maxLength = lengths(i)\n                maxIndex = i\n            End If\n        Next\n\n        Dim lis As New List(Of Integer)\n        Dim currentIndex As Integer = maxIndex\n        While currentIndex <> -1\n            lis.Add(numbers(currentIndex))\n            currentIndex = previous(currentIndex)\n        End While\n\n        lis.Reverse()\n        Return lis\n    End Function\n\n    Sub Main()\n        Dim numbers As New List(Of Integer) From {10, 9, 2, 5, 3, 7, 101, 18}\n        Dim result As List(Of Integer) = LongestIncreasingSubsequence(numbers)\n        For Each num As Integer In result\n            Console.Write(num & \" \")\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a function to zip two lists into a single list of tuples.",
    "code": "```vb\nFunction ZipLists(Of T1, T2)(list1 As List(Of T1), list2 As List(Of T2)) As List(Of Tuple(Of T1, T2))\n    Dim result As New List(Of Tuple(Of T1, T2))\n    Dim count As Integer = Math.Min(list1.Count, list2.Count)\n    For i As Integer = 0 To count - 1\n        result.Add(Tuple.Create(list1(i), list2(i)))\n    Next\n    Return result\nEnd Function\n```"
  },
  {
    "task": "Create a list of characters and count the vowels.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim charList As New List(Of Char) From {\"a\"c, \"b\"c, \"c\"c, \"e\"c, \"i\"c, \"o\"c, \"u\"c, \"x\"c}\n        Dim vowels As New List(Of Char) From {\"a\"c, \"e\"c, \"i\"c, \"o\"c, \"u\"c}\n        Dim vowelCount As Integer = 0\n\n        For Each ch As Char In charList\n            If vowels.Contains(ch) Then\n                vowelCount += 1\n            End If\n        Next\n\n        Console.WriteLine(\"Number of vowels: \" & vowelCount)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function that returns the last n elements of a list.",
    "code": "```vb\nFunction GetLastNElements(Of T)(ByVal inputList As List(Of T), ByVal n As Integer) As List(Of T)\n    If n > inputList.Count Then\n        Return New List(Of T)(inputList)\n    End If\n    Return inputList.GetRange(inputList.Count - n, n)\nEnd Function\n```"
  },
  {
    "task": "Generate a list of numbers and split it into two lists: one with positive numbers and one with negative numbers.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers As List(Of Integer) = New List(Of Integer) From {3, -1, 7, -4, 0, 5, -6}\n        Dim positives As New List(Of Integer)\n        Dim negatives As New List(Of Integer)\n\n        For Each number In numbers\n            If number > 0 Then\n                positives.Add(number)\n            ElseIf number < 0 Then\n                negatives.Add(number)\n            End If\n        Next\n\n        ' Output results for verification\n        Console.WriteLine(\"Positive Numbers: \" & String.Join(\", \", positives))\n        Console.WriteLine(\"Negative Numbers: \" & String.Join(\", \", negatives))\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a list of random integers and find the mode.",
    "code": "```vb\nImports System\nImports System.Collections.Generic\nImports System.Linq\n\nModule Module1\n    Sub Main()\n        Dim random As New Random()\n        Dim numbers As New List(Of Integer)\n\n        ' Populate the list with random integers\n        For i As Integer = 1 To 10\n            numbers.Add(random.Next(1, 21)) ' Random integers between 1 and 20\n        Next\n\n        ' Find the mode\n        Dim mode = numbers.GroupBy(Function(n) n).\n                           OrderByDescending(Function(g) g.Count()).\n                           First().Key\n\n        Console.WriteLine(\"Numbers: \" & String.Join(\", \", numbers))\n        Console.WriteLine(\"Mode: \" & mode)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a program to find the shortest path in a grid using a list to represent the path.",
    "code": "```vb\nModule ShortestPathFinder\n    Sub Main()\n        Dim grid As Integer(,) = {\n            {1, 1, 1, 1, 1},\n            {1, 0, 0, 1, 1},\n            {1, 1, 1, 0, 1},\n            {0, 0, 1, 1, 1},\n            {1, 1, 1, 1, 1}\n        }\n        \n        Dim start As Tuple(Of Integer, Integer) = Tuple.Create(0, 0)\n        Dim endPos As Tuple(Of Integer, Integer) = Tuple.Create(4, 4)\n        \n        Dim path As List(Of Tuple(Of Integer, Integer)) = FindShortestPath(grid, start, endPos)\n        \n        If path IsNot Nothing Then\n            Console.WriteLine(\"Shortest path found:\")\n            For Each stepPos In path\n                Console.WriteLine(\"(\" & stepPos.Item1 & \", \" & stepPos.Item2 & \")\")\n            Next\n        Else\n            Console.WriteLine(\"No path found\")\n        End If\n    End Sub\n\n    Function FindShortestPath(grid As Integer(,), start As Tuple(Of Integer, Integer), endPos As Tuple(Of Integer, Integer)) As List(Of Tuple(Of Integer, Integer))\n        Dim directions As Tuple(Of Integer, Integer)() = {\n            Tuple.Create(0, 1), Tuple.Create(1, 0),\n            Tuple.Create(0, -1), Tuple.Create(-1, 0)\n        }\n        \n        Dim rows As Integer = grid.GetLength(0)\n        Dim cols As Integer = grid.GetLength(1)\n        \n        Dim queue As New Queue(Of List(Of Tuple(Of Integer, Integer)))()\n        queue.Enqueue(New List(Of Tuple(Of Integer, Integer))() From {start})\n        \n        Dim visited As New HashSet(Of Tuple(Of Integer, Integer))()\n        visited.Add(start)\n        \n        While queue.Count > 0\n            Dim path As List(Of Tuple(Of Integer, Integer)) = queue.Dequeue()\n            Dim current As Tuple(Of Integer, Integer) = path.Last()\n            \n            If current.Equals(endPos) Then\n                Return path\n            End If\n            \n            For Each direction In directions\n                Dim newRow As Integer = current.Item1 + direction.Item1\n                Dim newCol As Integer = current.Item2 + direction.Item2\n                Dim newPos As Tuple(Of Integer, Integer) = Tuple.Create(newRow, newCol)\n                \n                If newRow >= 0 AndAlso newRow < rows AndAlso newCol >= 0 AndAlso newCol < cols AndAlso grid(newRow, newCol) = 1 AndAlso Not visited.Contains(newPos) Then\n                    visited.Add(newPos)\n                    Dim newPath As New List(Of Tuple(Of Integer, Integer))(path)\n                    newPath.Add(newPos)\n                    queue.Enqueue(newPath)\n                End If\n            Next\n        End While\n        \n        Return Nothing\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Implement a function that takes a list and returns a list with elements doubled.",
    "code": "```vb\nFunction DoubleElements(ByVal inputList As List(Of Integer)) As List(Of Integer)\n    Dim doubledList As New List(Of Integer)\n    For Each element In inputList\n        doubledList.Add(element * 2)\n    Next\n    Return doubledList\nEnd Function\n```"
  },
  {
    "task": "Create a list of integers and sort them in descending order.",
    "code": "```vb\nModule Program\n    Sub Main()\n        Dim numbers As New List(Of Integer) From {5, 3, 8, 1, 9, 2}\n        numbers.Sort()\n        numbers.Reverse()\n        For Each num As Integer In numbers\n            Console.WriteLine(num)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function that takes a list of intervals and merges overlapping intervals.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim intervals As New List(Of Tuple(Of Integer, Integer)) From {\n            Tuple.Create(1, 3),\n            Tuple.Create(2, 4),\n            Tuple.Create(5, 7),\n            Tuple.Create(6, 8)\n        }\n        Dim mergedIntervals = MergeIntervals(intervals)\n        For Each interval As Tuple(Of Integer, Integer) In mergedIntervals\n            Console.WriteLine(\"({0}, {1})\", interval.Item1, interval.Item2)\n        Next\n    End Sub\n\n    Function MergeIntervals(ByVal intervals As List(Of Tuple(Of Integer, Integer))) As List(Of Tuple(Of Integer, Integer))\n        If intervals.Count <= 1 Then\n            Return intervals\n        End If\n\n        intervals.Sort(Function(a, b) a.Item1.CompareTo(b.Item1))\n        Dim merged As New List(Of Tuple(Of Integer, Integer))\n        Dim start As Integer = intervals(0).Item1\n        Dim end_ As Integer = intervals(0).Item2\n\n        For Each interval As Tuple(Of Integer, Integer) In intervals\n            If interval.Item1 <= end_ Then\n                end_ = Math.Max(end_, interval.Item2)\n            Else\n                merged.Add(Tuple.Create(start, end_))\n                start = interval.Item1\n                end_ = interval.Item2\n            End If\n        Next\n        merged.Add(Tuple.Create(start, end_))\n\n        Return merged\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Generate a list of random numbers and find the range (difference between max and min).",
    "code": "```vb\nImports System\n\nModule Program\n    Sub Main()\n        Dim random As New Random()\n        Dim numbers As New List(Of Integer)()\n\n        For i As Integer = 1 To 10\n            numbers.Add(random.Next(1, 101))\n        Next\n\n        Dim maxNumber As Integer = numbers.Max()\n        Dim minNumber As Integer = numbers.Min()\n        Dim range As Integer = maxNumber - minNumber\n\n        Console.WriteLine(\"Range: \" & range)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a list of strings and remove any that are palindromes.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim words As New List(Of String) From {\"level\", \"world\", \"radar\", \"hello\", \"deified\"}\n        words.RemoveAll(Function(word) IsPalindrome(word))\n        For Each word In words\n            Console.WriteLine(word)\n        Next\n    End Sub\n\n    Function IsPalindrome(ByVal word As String) As Boolean\n        Return word.SequenceEqual(word.Reverse())\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Write a program to cyclically permute the elements of a list.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim items As New List(Of Integer) From {1, 2, 3, 4, 5}\n        items.Insert(0, items(items.Count - 1))\n        items.RemoveAt(items.Count - 1)\n        For Each item In items\n            Console.WriteLine(item)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a function to create a list of cumulative sums from a list of numbers.",
    "code": "```vb\nFunction CumulativeSums(numbers As List(Of Integer)) As List(Of Integer)\n    Dim cumulative As New List(Of Integer)\n    Dim sum As Integer = 0\n    For Each number In numbers\n        sum += number\n        cumulative.Add(sum)\n    Next\n    Return cumulative\nEnd Function\n```"
  },
  {
    "task": "Create a list of numbers and shift all zeros to the end.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers As New List(Of Integer) From {1, 0, 2, 3, 0, 4, 5, 0}\n        Dim nonZeroNumbers As New List(Of Integer)\n\n        For Each num In numbers\n            If num <> 0 Then\n                nonZeroNumbers.Add(num)\n            End If\n        Next\n\n        Dim zeroCount As Integer = numbers.Count - nonZeroNumbers.Count\n        For i As Integer = 1 To zeroCount\n            nonZeroNumbers.Add(0)\n        Next\n\n        numbers = nonZeroNumbers\n\n        For Each num In numbers\n            Console.Write(num & \" \")\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a program to simulate a queue using a list.",
    "code": "```vb\nModule QueueSimulation\n    Sub Main()\n        Dim queue As New List(Of Integer)()\n        \n        ' Enqueue operation\n        queue.Add(10)\n        queue.Add(20)\n        queue.Add(30)\n\n        ' Dequeue operation\n        If queue.Count > 0 Then\n            queue.RemoveAt(0)\n        End If\n\n        ' Peek operation\n        Dim front As Integer\n        If queue.Count > 0 Then\n            front = queue(0)\n        End If\n\n        ' Display queue\n        For Each item In queue\n            Console.WriteLine(item)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Generate a list of numbers and identify all prime numbers.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers As New List(Of Integer)\n        For i As Integer = 2 To 100\n            numbers.Add(i)\n        Next\n\n        Dim primeNumbers As New List(Of Integer)\n        For Each num In numbers\n            If IsPrime(num) Then\n                primeNumbers.Add(num)\n            End If\n        Next\n\n        For Each prime In primeNumbers\n            Console.WriteLine(prime)\n        Next\n    End Sub\n\n    Function IsPrime(ByVal number As Integer) As Boolean\n        If number <= 1 Then Return False\n        For i As Integer = 2 To Math.Sqrt(number)\n            If number Mod i = 0 Then\n                Return False\n            End If\n        Next\n        Return True\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Create a list of strings and group them by their starting letter.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim strings As New List(Of String) From {\"apple\", \"apricot\", \"banana\", \"blueberry\", \"cherry\", \"citrus\"}\n        Dim grouped As New Dictionary(Of Char, List(Of String))\n\n        For Each str In strings\n            Dim key As Char = Char.ToLower(str(0))\n            If Not grouped.ContainsKey(key) Then\n                grouped(key) = New List(Of String)\n            End If\n            grouped(key).Add(str)\n        Next\n\n        For Each kvp In grouped\n            Console.WriteLine(\"Key: \" & kvp.Key)\n            For Each value In kvp.Value\n                Console.WriteLine(\"  \" & value)\n            Next\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function that takes a list and returns a new list with all elements squared.",
    "code": "```vb\nFunction SquareElements(ByVal originalList As List(Of Integer)) As List(Of Integer)\n    Dim squaredList As New List(Of Integer)\n    For Each number As Integer In originalList\n        squaredList.Add(number * number)\n    Next\n    Return squaredList\nEnd Function\n```"
  },
  {
    "task": "Generate a list of timestamps and find the time difference between consecutive elements.",
    "code": "```vb\nImports System\n\nModule Module1\n    Sub Main()\n        Dim timestamps As New List(Of DateTime)\n        timestamps.Add(DateTime.Now)\n        timestamps.Add(DateTime.Now.AddMinutes(5))\n        timestamps.Add(DateTime.Now.AddMinutes(10))\n        \n        For i As Integer = 1 To timestamps.Count - 1\n            Dim timeDiff As TimeSpan = timestamps(i) - timestamps(i - 1)\n            Console.WriteLine(\"Time difference: \" & timeDiff.ToString())\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a list of numbers and rotate it such that the smallest number is first.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers As New List(Of Integer) From {5, 3, 8, 1, 4}\n        Dim minIndex As Integer = numbers.IndexOf(numbers.Min())\n        Dim rotatedNumbers As List(Of Integer) = numbers.Skip(minIndex).Concat(numbers.Take(minIndex)).ToList()\n        \n        For Each num In rotatedNumbers\n            Console.WriteLine(num)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a program to find all unique pairs in a list that sum up to a specific target.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers As New List(Of Integer)({2, 4, 3, 5, 7, 8, 9})\n        Dim target As Integer = 10\n        Dim seen As New HashSet(Of Integer)\n        Dim pairs As New List(Of Tuple(Of Integer, Integer))\n\n        For Each num In numbers\n            Dim complement As Integer = target - num\n            If seen.Contains(complement) Then\n                Dim pair As New Tuple(Of Integer, Integer)(Math.Min(num, complement), Math.Max(num, complement))\n                If Not pairs.Contains(pair) Then\n                    pairs.Add(pair)\n                End If\n            End If\n            seen.Add(num)\n        Next\n\n        For Each pair In pairs\n            Console.WriteLine(\"(\" & pair.Item1 & \", \" & pair.Item2 & \")\")\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a function that returns true if a list contains a cycle.",
    "code": "```vb\nPublic Function ContainsCycle(ByVal nodes As List(Of Integer)) As Boolean\n    Dim slow As Integer = 0\n    Dim fast As Integer = 0\n\n    While fast < nodes.Count AndAlso fast + 1 < nodes.Count\n        slow = nodes(slow)\n        fast = nodes(nodes(fast + 1))\n\n        If slow = fast Then\n            Return True\n        End If\n    End While\n\n    Return False\nEnd Function\n```"
  },
  {
    "task": "Create a list of numbers and find the contiguous subarray with the maximum sum.",
    "code": "```vb\nModule Module1\n    Function MaxSubArray(nums As List(Of Integer)) As Integer\n        Dim maxSum As Integer = Integer.MinValue\n        Dim currentSum As Integer = 0\n        \n        For Each num In nums\n            currentSum = Math.Max(num, currentSum + num)\n            maxSum = Math.Max(maxSum, currentSum)\n        Next\n        \n        Return maxSum\n    End Function\n\n    Sub Main()\n        Dim numbers As New List(Of Integer)({-2, 1, -3, 4, -1, 2, 1, -5, 4})\n        Dim maxSum As Integer = MaxSubArray(numbers)\n        Console.WriteLine(\"Maximum contiguous subarray sum is: \" & maxSum)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function that takes a list and a number, and finds two numbers in the list that sum to the given number.",
    "code": "```vb\nFunction FindPairWithSum(numbers As List(Of Integer), target As Integer) As Tuple(Of Integer, Integer)\n    For i As Integer = 0 To numbers.Count - 1\n        For j As Integer = i + 1 To numbers.Count - 1\n            If numbers(i) + numbers(j) = target Then\n                Return New Tuple(Of Integer, Integer)(numbers(i), numbers(j))\n            End If\n        Next\n    Next\n    Return Nothing\nEnd Function\n```"
  },
  {
    "task": "Generate a list of even numbers and filter out those that are greater than a specific value.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim specificValue As Integer = 10\n        Dim numbers As New List(Of Integer) From {2, 4, 6, 8, 10, 12, 14, 16, 18, 20}\n        Dim filteredNumbers As List(Of Integer) = numbers.Where(Function(n) n Mod 2 = 0 AndAlso n <= specificValue).ToList()\n\n        For Each num In filteredNumbers\n            Console.WriteLine(num)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a list of characters and reverse the vowels only.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim charList As New List(Of Char) From {\"h\"c, \"e\"c, \"l\"c, \"l\"c, \"o\"c, \" \"c, \"w\"c, \"o\"c, \"r\"c, \"l\"c, \"d\"c}\n        Dim vowels As String = \"aeiouAEIOU\"\n        Dim indices As New List(Of Integer)\n        Dim vowelList As New List(Of Char)\n\n        ' Collect vowels and their indices\n        For i As Integer = 0 To charList.Count - 1\n            If vowels.IndexOf(charList(i)) <> -1 Then\n                indices.Add(i)\n                vowelList.Add(charList(i))\n            End If\n        Next\n\n        ' Reverse the list of vowels\n        vowelList.Reverse()\n\n        ' Put the reversed vowels back into their original positions\n        For j As Integer = 0 To indices.Count - 1\n            charList(indices(j)) = vowelList(j)\n        Next\n\n        ' Output the result\n        For Each ch As Char In charList\n            Console.Write(ch)\n        Next\n        Console.WriteLine()\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a program to find all permutations of a list of elements.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim elements As New List(Of String) From {\"a\", \"b\", \"c\"}\n        Dim results As New List(Of List(Of String))\n        GetPermutations(elements, 0, results)\n\n        For Each perm In results\n            Console.WriteLine(String.Join(\", \", perm))\n        Next\n    End Sub\n\n    Sub GetPermutations(items As List(Of String), start As Integer, results As List(Of List(Of String)))\n        If start >= items.Count Then\n            results.Add(New List(Of String)(items))\n        Else\n            For i As Integer = start To items.Count - 1\n                Swap(items, start, i)\n                GetPermutations(items, start + 1, results)\n                Swap(items, start, i)\n            Next\n        End If\n    End Sub\n\n    Sub Swap(items As List(Of String), i As Integer, j As Integer)\n        Dim temp As String = items(i)\n        items(i) = items(j)\n        items(j) = temp\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a function that takes a list and returns the most frequently occurring element.",
    "code": "```vb\nFunction MostFrequentElement(ByVal elements As List(Of Object)) As Object\n    Dim frequencyMap As New Dictionary(Of Object, Integer)\n    For Each element In elements\n        If frequencyMap.ContainsKey(element) Then\n            frequencyMap(element) += 1\n        Else\n            frequencyMap(element) = 1\n        End If\n    Next\n\n    Dim maxCount As Integer = 0\n    Dim mostFrequent As Object = Nothing\n    For Each kvp In frequencyMap\n        If kvp.Value > maxCount Then\n            maxCount = kvp.Value\n            mostFrequent = kvp.Key\n        End If\n    Next\n\n    Return mostFrequent\nEnd Function\n```"
  },
  {
    "task": "Create a list of numbers and calculate the variance.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers As New List(Of Double) From {1, 2, 3, 4, 5}\n        Dim mean As Double = numbers.Average()\n        Dim variance As Double = numbers.Sum(Function(num) Math.Pow(num - mean, 2)) / numbers.Count\n        Console.WriteLine(\"Variance: \" & variance)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function to concatenate a list of lists into a single list.",
    "code": "```vb\nFunction ConcatenateLists(Of T)(listOfLists As List(Of List(Of T))) As List(Of T)\n    Dim result As New List(Of T)()\n    For Each lst As List(Of T) In listOfLists\n        result.AddRange(lst)\n    Next\n    Return result\nEnd Function\n```"
  },
  {
    "task": "Generate a list of numbers and replace each element with the product of all other elements.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers As List(Of Integer) = New List(Of Integer) From {1, 2, 3, 4, 5}\n        Dim result As New List(Of Integer)(New Integer(numbers.Count - 1) {})\n        Dim totalProduct As Integer = 1\n        Dim zeroCount As Integer = 0\n\n        For Each num In numbers\n            If num = 0 Then\n                zeroCount += 1\n                If zeroCount > 1 Then\n                    Exit For\n                End If\n            Else\n                totalProduct *= num\n            End If\n        Next\n\n        For i As Integer = 0 To numbers.Count - 1\n            If zeroCount > 1 Then\n                result(i) = 0\n            ElseIf zeroCount = 1 Then\n                result(i) = If(numbers(i) = 0, totalProduct, 0)\n            Else\n                result(i) = totalProduct \\ numbers(i)\n            End If\n        Next\n\n        For Each res In result\n            Console.WriteLine(res)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a list of strings and find the common prefix.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim stringList As New List(Of String) From {\"flower\", \"flow\", \"flight\"}\n        Dim commonPrefix As String = FindCommonPrefix(stringList)\n        Console.WriteLine(\"Common Prefix: \" & commonPrefix)\n    End Sub\n\n    Function FindCommonPrefix(strings As List(Of String)) As String\n        If strings Is Nothing OrElse strings.Count = 0 Then Return \"\"\n\n        Dim prefix As String = strings(0)\n        For Each str As String In strings\n            While str.IndexOf(prefix) <> 0\n                prefix = prefix.Substring(0, prefix.Length - 1)\n                If String.IsNullOrEmpty(prefix) Then Return \"\"\n            End While\n        Next\n        Return prefix\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Write a program to partition a list into two lists based on a predicate function.",
    "code": "```vb\nModule Module1\n    Function Partition(Of T)(items As List(Of T), predicate As Func(Of T, Boolean)) As Tuple(Of List(Of T), List(Of T))\n        Dim trueList As New List(Of T)()\n        Dim falseList As New List(Of T)()\n\n        For Each item In items\n            If predicate(item) Then\n                trueList.Add(item)\n            Else\n                falseList.Add(item)\n            End If\n        Next\n\n        Return Tuple.Create(trueList, falseList)\n    End Function\n\n    Sub Main()\n        Dim numbers As New List(Of Integer) From {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n        Dim result = Partition(numbers, Function(n) n Mod 2 = 0)\n\n        Console.WriteLine(\"Even numbers:\")\n        For Each num In result.Item1\n            Console.WriteLine(num)\n        Next\n\n        Console.WriteLine(\"Odd numbers:\")\n        For Each num In result.Item2\n            Console.WriteLine(num)\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Implement a function to find the kth smallest element in a list.",
    "code": "```vb\nFunction FindKthSmallest(ByVal numbers As List(Of Integer), ByVal k As Integer) As Integer\n    numbers.Sort()\n    Return numbers(k - 1)\nEnd Function\n```"
  },
  {
    "task": "Create a list of integers and find the length of the longest contiguous sequence.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers As List(Of Integer) = New List(Of Integer) From {1, 2, 2, 3, 4, 5, 5, 5, 6, 7}\n        Dim maxLength As Integer = 0\n        Dim currentLength As Integer = 1\n\n        For i As Integer = 1 To numbers.Count - 1\n            If numbers(i) = numbers(i - 1) Then\n                currentLength += 1\n            Else\n                If currentLength > maxLength Then\n                    maxLength = currentLength\n                End If\n                currentLength = 1\n            End If\n        Next\n\n        If currentLength > maxLength Then\n            maxLength = currentLength\n        End If\n\n        Console.WriteLine(\"Length of longest contiguous sequence: \" & maxLength)\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a function that rotates elements in a list while maintaining the relative order of non-rotated elements.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim list As New List(Of Integer) From {1, 2, 3, 4, 5}\n        Dim rotatedList = RotateList(list, 2)\n        For Each item In rotatedList\n            Console.WriteLine(item)\n        Next\n    End Sub\n\n    Function RotateList(Of T)(lst As List(Of T), n As Integer) As List(Of T)\n        n = n Mod lst.Count\n        Dim rotated As New List(Of T)(lst.Skip(n).Concat(lst.Take(n)))\n        Return rotated\n    End Function\nEnd Module\n```"
  },
  {
    "task": "Generate a list of random numbers and sort them while maintaining the original index positions.",
    "code": "```vb\nImports System\nImports System.Collections.Generic\n\nModule Module1\n    Sub Main()\n        Dim count As Integer = 10\n        Dim rnd As New Random()\n        Dim numbers As New List(Of KeyValuePair(Of Integer, Integer))()\n\n        For i As Integer = 0 To count - 1\n            numbers.Add(New KeyValuePair(Of Integer, Integer)(i, rnd.Next(100)))\n        Next\n\n        Dim sortedNumbers = numbers.OrderBy(Function(x) x.Value).ToList()\n\n        Console.WriteLine(\"Original List:\")\n        For Each num In numbers\n            Console.WriteLine($\"Index: {num.Key}, Value: {num.Value}\")\n        Next\n\n        Console.WriteLine(vbCrLf & \"Sorted List:\")\n        For Each num In sortedNumbers\n            Console.WriteLine($\"Index: {num.Key}, Value: {num.Value}\")\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Create a list of numbers and find all subsets that sum up to a specific target.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim numbers As List(Of Integer) = New List(Of Integer)({1, 2, 3, 4, 5})\n        Dim target As Integer = 5\n        Dim results As List(Of List(Of Integer)) = New List(Of List(Of Integer))()\n        FindSubsetsThatSumToTarget(numbers, target, New List(Of Integer)(), 0, results)\n\n        For Each subset As List(Of Integer) In results\n            Console.WriteLine(\"{\" & String.Join(\", \", subset) & \"}\")\n        Next\n    End Sub\n\n    Sub FindSubsetsThatSumToTarget(numbers As List(Of Integer), target As Integer, currentSubset As List(Of Integer), startIndex As Integer, results As List(Of List(Of Integer)))\n        If target = 0 Then\n            results.Add(New List(Of Integer)(currentSubset))\n            Return\n        End If\n\n        For i As Integer = startIndex To numbers.Count - 1\n            If numbers(i) <= target Then\n                currentSubset.Add(numbers(i))\n                FindSubsetsThatSumToTarget(numbers, target - numbers(i), currentSubset, i + 1, results)\n                currentSubset.RemoveAt(currentSubset.Count - 1)\n            End If\n        Next\n    End Sub\nEnd Module\n```"
  },
  {
    "task": "Write a program to simulate a stack using a list.",
    "code": "```vb\nModule Module1\n    Sub Main()\n        Dim stack As New List(Of Integer)()\n        \n        ' Push items onto the stack\n        stack.Add(1)\n        stack.Add(2)\n        stack.Add(3)\n        \n        ' Pop an item off the stack\n        Dim lastIndex As Integer = stack.Count - 1\n        Dim poppedItem As Integer = stack(lastIndex)\n        stack.RemoveAt(lastIndex)\n        \n        ' Display the popped item\n        Console.WriteLine(\"Popped item: \" & poppedItem)\n        \n        ' Display remaining items in the stack\n        Console.WriteLine(\"Remaining stack items:\")\n        For Each item In stack\n            Console.WriteLine(item)\n        Next\n        \n        Console.ReadLine()\n    End Sub\nEnd Module\n```"
  }
]