[
  {
    "task": "Create a function that calculates the sum of two numbers and returns the result.",
    "code": "```c\n#include <stdio.h>\n\nint sum(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int result = sum(5, 3);\n    printf(\"The sum is: %d\\n\", result);\n    return 0;\n}\n```"
  },
  {
    "task": "Design a function that takes a string and returns its length.",
    "code": "```c\n#include <stdio.h>\n\nint stringLength(const char *str) {\n    int length = 0;\n    while (str[length] != '\\0') {\n        length++;\n    }\n    return length;\n}\n\nint main() {\n    const char *myString = \"Hello, World!\";\n    int length = stringLength(myString);\n    printf(\"The length of the string is: %d\\n\", length);\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that checks if a number is prime and returns a boolean value.",
    "code": "```c\n#include <stdbool.h>\n\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (int i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) return false;\n    }\n    return true;\n}\n```"
  },
  {
    "task": "Implement a function that returns the highest value in a list of integers.",
    "code": "```c\n#include <stdio.h>\n\nint findMax(int *list, int size) {\n    int max = list[0];\n    for (int i = 1; i < size; ++i) {\n        if (list[i] > max) {\n            max = list[i];\n        }\n    }\n    return max;\n}\n\nint main() {\n    int numbers[] = {5, 3, 9, 1, 6};\n    int size = sizeof(numbers) / sizeof(numbers[0]);\n    int max = findMax(numbers, size);\n    printf(\"The highest value is: %d\\n\", max);\n    return 0;\n}\n```"
  },
  {
    "task": "Create a function that accepts a list of words and returns the longest word.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nchar* longestWord(char* words[], int size) {\n    int maxLength = 0;\n    char* longest = NULL;\n    for (int i = 0; i < size; i++) {\n        int length = strlen(words[i]);\n        if (length > maxLength) {\n            maxLength = length;\n            longest = words[i];\n        }\n    }\n    return longest;\n}\n\nint main() {\n    char* words[] = {\"apple\", \"banana\", \"cherry\", \"date\"};\n    int size = sizeof(words) / sizeof(words[0]);\n    char* longest = longestWord(words, size);\n    printf(\"Longest word: %s\\n\", longest);\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that takes a temperature in Celsius and returns the equivalent in Fahrenheit.",
    "code": "```c\n#include <stdio.h>\n\ndouble celsiusToFahrenheit(double celsius) {\n    return (celsius * 9.0 / 5.0) + 32.0;\n}\n\nint main() {\n    double celsius = 25.0;\n    double fahrenheit = celsiusToFahrenheit(celsius);\n    printf(\"%.2f Celsius is %.2f Fahrenheit\\n\", celsius, fahrenheit);\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a function that returns the factorial of a given number.",
    "code": "```c\n#include <stdio.h>\n\nint factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n\nint main() {\n    int number = 5; // Example input\n    int result = factorial(number);\n    printf(\"Factorial of %d is %d\\n\", number, result);\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function that receives a date and returns the day of the week.",
    "code": "```c\n#include <stdio.h>\n\nconst char* getDayOfWeek(int day, int month, int year) {\n    static const char* days[] = {\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"};\n    int adjustment, mm, yy;\n    \n    if (month < 3) {\n        adjustment = year - 1;\n    } else {\n        adjustment = year;\n    }\n    \n    mm = (month + 9) % 12 + 1;\n    yy = adjustment % 100;\n    adjustment /= 100;\n    \n    int weekday = (day + (13 * mm - 1) / 5 + yy + yy / 4 + adjustment / 4 - 2 * adjustment) % 7;\n    \n    if (weekday < 0) {\n        weekday += 7;\n    }\n    \n    return days[weekday];\n}\n\nint main() {\n    int day = 3, month = 10, year = 2023;\n    printf(\"The day of the week is: %s\\n\", getDayOfWeek(day, month, year));\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that calculates the area of a circle given its radius and returns the value.",
    "code": "```c\n#include <stdio.h>\n\n#define PI 3.14159265358979323846\n\ndouble calculateCircleArea(double radius) {\n    return PI * radius * radius;\n}\n\nint main() {\n    double radius = 5.0;\n    double area = calculateCircleArea(radius);\n    printf(\"The area of the circle is: %.2f\\n\", area);\n    return 0;\n}\n```"
  },
  {
    "task": "Create a function that converts a string to uppercase and returns the modified string.",
    "code": "```c\n#include <stdio.h>\n#include <ctype.h>\n\nchar* toUpperCase(char* str) {\n    char* p = str;\n    while (*p != '\\0') {\n        *p = toupper((unsigned char)*p);\n        p++;\n    }\n    return str;\n}\n\nint main() {\n    char str[] = \"hello, world!\";\n    printf(\"Original: %s\\n\", str);\n    printf(\"Uppercase: %s\\n\", toUpperCase(str));\n    return 0;\n}\n```"
  },
  {
    "task": "Design a function that returns the reverse of a given list.",
    "code": "```c\n#include <stdio.h>\n\nvoid reverseList(int* list, int size, int* reversedList) {\n    for (int i = 0; i < size; i++) {\n        reversedList[i] = list[size - 1 - i];\n    }\n}\n\nint main() {\n    int list[] = {1, 2, 3, 4, 5};\n    int size = sizeof(list) / sizeof(list[0]);\n    int reversedList[size];\n\n    reverseList(list, size, reversedList);\n\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", reversedList[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function that accepts a string and returns a dictionary with character frequencies.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char character;\n    int frequency;\n} CharFrequency;\n\ntypedef struct {\n    CharFrequency *array;\n    size_t size;\n} CharFrequencyDict;\n\nCharFrequencyDict getCharFrequencies(const char *str) {\n    int charCount[256] = {0};\n    size_t length = strlen(str);\n    \n    for (size_t i = 0; i < length; ++i) {\n        charCount[(unsigned char)str[i]]++;\n    }\n    \n    CharFrequency *tempArray = malloc(256 * sizeof(CharFrequency));\n    size_t dictSize = 0;\n    \n    for (int i = 0; i < 256; ++i) {\n        if (charCount[i] > 0) {\n            tempArray[dictSize].character = (char)i;\n            tempArray[dictSize].frequency = charCount[i];\n            dictSize++;\n        }\n    }\n    \n    CharFrequency *finalArray = malloc(dictSize * sizeof(CharFrequency));\n    memcpy(finalArray, tempArray, dictSize * sizeof(CharFrequency));\n    free(tempArray);\n    \n    CharFrequencyDict result;\n    result.array = finalArray;\n    result.size = dictSize;\n    return result;\n}\n\nint main() {\n    const char *text = \"example\";\n    CharFrequencyDict frequencies = getCharFrequencies(text);\n    \n    for (size_t i = 0; i < frequencies.size; ++i) {\n        printf(\"'%c': %d\\n\", frequencies.array[i].character, frequencies.array[i].frequency);\n    }\n    \n    free(frequencies.array);\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that returns the first non-repeating character in a string.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nchar firstNonRepeatingCharacter(const char *str) {\n    int charCount[256] = {0};\n    int i;\n\n    // Count occurrences of each character\n    for (i = 0; str[i] != '\\0'; i++) {\n        charCount[(unsigned char)str[i]]++;\n    }\n\n    // Find the first character with a count of 1\n    for (i = 0; str[i] != '\\0'; i++) {\n        if (charCount[(unsigned char)str[i]] == 1) {\n            return str[i];\n        }\n    }\n\n    return '\\0'; // Return null character if no non-repeating character is found\n}\n\nint main() {\n    const char *str = \"swiss\";\n    char result = firstNonRepeatingCharacter(str);\n    if (result) {\n        printf(\"The first non-repeating character is: %c\\n\", result);\n    } else {\n        printf(\"No non-repeating character found.\\n\");\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Create a function that takes a list of numbers and returns a new list with only even numbers.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\nint* filterEvenNumbers(int* numbers, int length, int* resultLength) {\n    int* evenNumbers = (int*)malloc(length * sizeof(int));\n    int count = 0;\n    \n    for (int i = 0; i < length; i++) {\n        if (numbers[i] % 2 == 0) {\n            evenNumbers[count++] = numbers[i];\n        }\n    }\n    \n    *resultLength = count;\n    return evenNumbers;\n}\n\nint main() {\n    int numbers[] = {1, 2, 3, 4, 5, 6};\n    int length = sizeof(numbers) / sizeof(numbers[0]);\n    int resultLength;\n    \n    int* evenNumbers = filterEvenNumbers(numbers, length, &resultLength);\n    \n    for (int i = 0; i < resultLength; i++) {\n        printf(\"%d \", evenNumbers[i]);\n    }\n    \n    free(evenNumbers);\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a function that receives a sentence and returns the word count.",
    "code": "```c\n#include <stdio.h>\n#include <ctype.h>\n\nint countWords(const char *sentence) {\n    int count = 0;\n    int inWord = 0;\n\n    while (*sentence) {\n        if (isspace(*sentence)) {\n            inWord = 0;\n        } else if (!inWord) {\n            inWord = 1;\n            count++;\n        }\n        sentence++;\n    }\n\n    return count;\n}\n\nint main() {\n    const char *sentence = \"This is a sample sentence.\";\n    int wordCount = countWords(sentence);\n    printf(\"Word count: %d\\n\", wordCount);\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function that returns the smallest element in an array.",
    "code": "```c\n#include <stdio.h>\n\nint findSmallest(int arr[], int size) {\n    int smallest = arr[0];\n    for (int i = 1; i < size; i++) {\n        if (arr[i] < smallest) {\n            smallest = arr[i];\n        }\n    }\n    return smallest;\n}\n\nint main() {\n    int array[] = {5, 2, 8, 1, 4};\n    int size = sizeof(array) / sizeof(array[0]);\n    int smallest = findSmallest(array, size);\n    printf(\"The smallest element is: %d\\n\", smallest);\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that takes two strings and returns true if they are anagrams.",
    "code": "```c\n#include <stdbool.h>\n#include <string.h>\n\nbool areAnagrams(const char *str1, const char *str2) {\n    if (strlen(str1) != strlen(str2)) {\n        return false;\n    }\n\n    int count[256] = {0};\n\n    for (int i = 0; str1[i] && str2[i]; i++) {\n        count[(unsigned char)str1[i]]++;\n        count[(unsigned char)str2[i]]--;\n    }\n\n    for (int i = 0; i < 256; i++) {\n        if (count[i] != 0) {\n            return false;\n        }\n    }\n\n    return true;\n}\n```"
  },
  {
    "task": "Create a function that accepts an integer and returns a list of its divisors.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\nint* findDivisors(int num, int* count) {\n    int* divisors = (int*)malloc(num * sizeof(int));\n    *count = 0;\n\n    for (int i = 1; i <= num; i++) {\n        if (num % i == 0) {\n            divisors[*count] = i;\n            (*count)++;\n        }\n    }\n\n    return divisors;\n}\n\nint main() {\n    int num = 28;\n    int count;\n    int* divisors = findDivisors(num, &count);\n\n    for (int i = 0; i < count; i++) {\n        printf(\"%d \", divisors[i]);\n    }\n    printf(\"\\n\");\n\n    free(divisors);\n    return 0;\n}\n```"
  },
  {
    "task": "Design a function that returns the square root of a given number.",
    "code": "```c\n#include <stdio.h>\n#include <math.h>\n\ndouble calculateSquareRoot(double number) {\n    return sqrt(number);\n}\n\nint main() {\n    double number = 9.0;\n    double result = calculateSquareRoot(number);\n    printf(\"The square root of %.2f is %.2f\\n\", number, result);\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function that accepts a list and returns it sorted in ascending order.",
    "code": "```c\n#include <stdio.h>\n\nvoid sortArray(int arr[], int n) {\n    for (int i = 0; i < n - 1; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (arr[i] > arr[j]) {\n                int temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n}\n\nint* sortAndReturn(int arr[], int n) {\n    sortArray(arr, n);\n    return arr;\n}\n\nint main() {\n    int arr[] = {5, 3, 8, 4, 2};\n    int n = sizeof(arr) / sizeof(arr[0]);\n\n    int* sortedArr = sortAndReturn(arr, n);\n\n    for (int i = 0; i < n; i++) {\n        printf(\"%d \", sortedArr[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that checks whether a given year is a leap year and returns a boolean.",
    "code": "```c\n#include <stdbool.h>\n\nbool isLeapYear(int year) {\n    if (year % 4 == 0) {\n        if (year % 100 == 0) {\n            if (year % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n```"
  },
  {
    "task": "Create a function that receives a list of numbers and returns their average.",
    "code": "```c\n#include <stdio.h>\n\ndouble calculateAverage(int numbers[], int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += numbers[i];\n    }\n    return (double)sum / size;\n}\n\nint main() {\n    int numbers[] = {1, 2, 3, 4, 5};\n    int size = sizeof(numbers) / sizeof(numbers[0]);\n    double average = calculateAverage(numbers, size);\n    printf(\"Average: %.2f\\n\", average);\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a function that returns the nth Fibonacci number.",
    "code": "```c\n#include <stdio.h>\n\nint fibonacci(int n) {\n    if (n <= 1) {\n        return n;\n    }\n    int a = 0, b = 1, c;\n    for (int i = 2; i <= n; i++) {\n        c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n}\n\nint main() {\n    int n = 10; // Example input\n    printf(\"Fibonacci number at position %d is %d\\n\", n, fibonacci(n));\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function that accepts a string and returns it with vowels removed.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar* removeVowels(const char* str) {\n    size_t len = strlen(str);\n    char* result = (char*)malloc(len + 1);\n    size_t j = 0;\n    for (size_t i = 0; i < len; i++) {\n        char c = str[i];\n        if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' &&\n            c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U') {\n            result[j++] = c;\n        }\n    }\n    result[j] = '\\0';\n    return result;\n}\n\nint main() {\n    char str[] = \"Hello World\";\n    char* noVowels = removeVowels(str);\n    printf(\"%s\\n\", noVowels);\n    free(noVowels);\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that takes two dates and returns the number of days between them.",
    "code": "```c\n#include <stdio.h>\n#include <time.h>\n\nint daysBetween(struct tm date1, struct tm date2) {\n    time_t time1 = mktime(&date1);\n    time_t time2 = mktime(&date2);\n    double difference = difftime(time2, time1);\n    return (int)(difference / (60 * 60 * 24));\n}\n\nint main() {\n    struct tm date1 = {0, 0, 0, 15, 6, 121}; // July 15, 2021\n    struct tm date2 = {0, 0, 0, 25, 6, 121}; // July 25, 2021\n\n    int days = daysBetween(date1, date2);\n    printf(\"Days between: %d\\n\", days);\n    return 0;\n}\n```"
  },
  {
    "task": "Create a function that returns the last element of a list.",
    "code": "```c\n#include <stdio.h>\n\nint lastElement(int *list, int size) {\n    if (size > 0) {\n        return list[size - 1];\n    }\n    return -1; // Assuming -1 indicates an error, e.g., empty list\n}\n\nint main() {\n    int numbers[] = {1, 2, 3, 4, 5};\n    int size = sizeof(numbers) / sizeof(numbers[0]);\n    int last = lastElement(numbers, size);\n    printf(\"Last element: %d\\n\", last);\n    return 0;\n}\n```"
  },
  {
    "task": "Design a function that calculates the GCD of two numbers and returns it.",
    "code": "```c\n#include <stdio.h>\n\nint gcd(int a, int b) {\n    while (b != 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n\nint main() {\n    int num1 = 48, num2 = 18;\n    int result = gcd(num1, num2);\n    printf(\"GCD of %d and %d is %d\\n\", num1, num2, result);\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function that takes a list and returns a tuple with the min and max values.",
    "code": "```c\n#include <stdio.h>\n\ntypedef struct {\n    int min;\n    int max;\n} MinMax;\n\nMinMax findMinAndMax(int *arr, int size) {\n    MinMax result;\n    if (size <= 0) {\n        result.min = 0;\n        result.max = 0;\n        return result;\n    }\n    \n    result.min = arr[0];\n    result.max = arr[0];\n    \n    for (int i = 1; i < size; ++i) {\n        if (arr[i] < result.min) {\n            result.min = arr[i];\n        }\n        if (arr[i] > result.max) {\n            result.max = arr[i];\n        }\n    }\n    return result;\n}\n\nint main() {\n    int arr[] = {3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    MinMax result = findMinAndMax(arr, size);\n    printf(\"Min: %d, Max: %d\\n\", result.min, result.max);\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that converts a binary string to its decimal representation and returns it.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n#include <math.h>\n\nint binaryToDecimal(const char *binaryString) {\n    int decimal = 0;\n    int length = strlen(binaryString);\n    for (int i = 0; i < length; i++) {\n        if (binaryString[length - i - 1] == '1') {\n            decimal += pow(2, i);\n        }\n    }\n    return decimal;\n}\n\nint main() {\n    const char *binaryString = \"1101\";\n    int decimal = binaryToDecimal(binaryString);\n    printf(\"%d\\n\", decimal);\n    return 0;\n}\n```"
  },
  {
    "task": "Create a function that accepts a dictionary and returns a list of its keys.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char *key;\n    int value;\n} KeyValuePair;\n\ntypedef struct {\n    KeyValuePair *pairs;\n    size_t size;\n} Dictionary;\n\nchar **getKeys(Dictionary *dict, size_t *keysSize) {\n    *keysSize = dict->size;\n    char **keys = (char **)malloc(*keysSize * sizeof(char *));\n    for (size_t i = 0; i < *keysSize; i++) {\n        keys[i] = strdup(dict->pairs[i].key);\n    }\n    return keys;\n}\n\nint main() {\n    KeyValuePair pairs[] = {{\"key1\", 1}, {\"key2\", 2}, {\"key3\", 3}};\n    Dictionary dict = {pairs, 3};\n\n    size_t keysSize;\n    char **keys = getKeys(&dict, &keysSize);\n\n    for (size_t i = 0; i < keysSize; i++) {\n        printf(\"%s\\n\", keys[i]);\n        free(keys[i]);\n    }\n    free(keys);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a function that returns the concatenation of two strings.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* concatenateStrings(const char* str1, const char* str2) {\n    size_t len1 = strlen(str1);\n    size_t len2 = strlen(str2);\n    char* result = (char*)malloc(len1 + len2 + 1);\n    \n    if (result == NULL) {\n        return NULL;\n    }\n    \n    strcpy(result, str1);\n    strcat(result, str2);\n    \n    return result;\n}\n\nint main() {\n    const char* string1 = \"Hello, \";\n    const char* string2 = \"World!\";\n    char* concatenated = concatenateStrings(string1, string2);\n    \n    if (concatenated != NULL) {\n        printf(\"%s\\n\", concatenated);\n        free(concatenated);\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function that receives a list and returns a new list with duplicates removed.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\nint* removeDuplicates(int* nums, int size, int* returnSize) {\n    int* result = (int*)malloc(size * sizeof(int));\n    int count = 0;\n    \n    for (int i = 0; i < size; i++) {\n        int isDuplicate = 0;\n        for (int j = 0; j < count; j++) {\n            if (nums[i] == result[j]) {\n                isDuplicate = 1;\n                break;\n            }\n        }\n        if (!isDuplicate) {\n            result[count++] = nums[i];\n        }\n    }\n    \n    *returnSize = count;\n    return result;\n}\n\nint main() {\n    int nums[] = {1, 2, 2, 3, 4, 4, 5};\n    int size = sizeof(nums) / sizeof(nums[0]);\n    int newSize;\n    \n    int* newNums = removeDuplicates(nums, size, &newSize);\n    \n    for (int i = 0; i < newSize; i++) {\n        printf(\"%d \", newNums[i]);\n    }\n    \n    free(newNums);\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that returns the intersection of two lists.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\nint* intersection(int* list1, int size1, int* list2, int size2, int* resultSize) {\n    int* result = (int*)malloc(size1 * sizeof(int));\n    int count = 0;\n    for (int i = 0; i < size1; i++) {\n        for (int j = 0; j < size2; j++) {\n            if (list1[i] == list2[j]) {\n                int alreadyInResult = 0;\n                for (int k = 0; k < count; k++) {\n                    if (result[k] == list1[i]) {\n                        alreadyInResult = 1;\n                        break;\n                    }\n                }\n                if (!alreadyInResult) {\n                    result[count++] = list1[i];\n                }\n                break;\n            }\n        }\n    }\n    *resultSize = count;\n    return result;\n}\n\nint main() {\n    int list1[] = {1, 2, 3, 4, 5};\n    int list2[] = {3, 4, 5, 6, 7};\n    int resultSize;\n    int* result = intersection(list1, 5, list2, 5, &resultSize);\n    \n    for (int i = 0; i < resultSize; i++) {\n        printf(\"%d \", result[i]);\n    }\n    printf(\"\\n\");\n    \n    free(result);\n    return 0;\n}\n```"
  },
  {
    "task": "Create a function that takes an integer and returns whether it is even or odd as a string.",
    "code": "```c\n#include <stdio.h>\n\nconst char* evenOrOdd(int n) {\n    return (n % 2 == 0) ? \"even\" : \"odd\";\n}\n\nint main() {\n    int number = 4;\n    printf(\"%d is %s\\n\", number, evenOrOdd(number));\n    return 0;\n}\n```"
  },
  {
    "task": "Design a function that returns the number of vowels in a given string.",
    "code": "```c\n#include <stdio.h>\n#include <ctype.h>\n\nint countVowels(const char *str) {\n    int count = 0;\n    while (*str) {\n        char c = tolower(*str);\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            count++;\n        }\n        str++;\n    }\n    return count;\n}\n\nint main() {\n    const char *text = \"Hello, World!\";\n    int vowelCount = countVowels(text);\n    printf(\"Number of vowels: %d\\n\", vowelCount);\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function that counts the occurrences of a substring within a string and returns it.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nint countOccurrences(const char *str, const char *substr) {\n    int count = 0;\n    const char *temp = str;\n    int len = strlen(substr);\n    \n    if (len == 0) return 0;\n    \n    while ((temp = strstr(temp, substr)) != NULL) {\n        count++;\n        temp += len;\n    }\n    \n    return count;\n}\n\nint main() {\n    const char *str = \"hello hello world\";\n    const char *substr = \"hello\";\n    int result = countOccurrences(str, substr);\n    printf(\"Occurrences: %d\\n\", result);\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that accepts a list of numbers and returns them sorted in descending order.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\nint compare(const void *a, const void *b) {\n    return (*(int *)b - *(int *)a);\n}\n\nint* sortDescending(int* numbers, int size) {\n    qsort(numbers, size, sizeof(int), compare);\n    return numbers;\n}\n\nint main() {\n    int numbers[] = {5, 3, 8, 1, 2};\n    int size = sizeof(numbers) / sizeof(numbers[0]);\n    int* sortedNumbers = sortDescending(numbers, size);\n    \n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", sortedNumbers[i]);\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Create a function that returns the median of a list of numbers.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\nint compare(const void *a, const void *b) {\n    return (*(int *)a - *(int *)b);\n}\n\ndouble median(int *arr, int n) {\n    qsort(arr, n, sizeof(int), compare);\n    if (n % 2 == 0) {\n        return (arr[n / 2 - 1] + arr[n / 2]) / 2.0;\n    } else {\n        return arr[n / 2];\n    }\n}\n\nint main() {\n    int numbers[] = {3, 1, 4, 1, 5, 9};\n    int n = sizeof(numbers) / sizeof(numbers[0]);\n    double med = median(numbers, n);\n    printf(\"Median: %.1f\\n\", med);\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a function that receives a sentence and returns it with words in reverse order.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nvoid reverseWords(char* sentence, char* result) {\n    int length = strlen(sentence);\n    int end = length, start, pos = 0;\n    \n    for (int i = length - 1; i >= 0; i--) {\n        if (sentence[i] == ' ' || i == 0) {\n            start = (i == 0) ? 0 : i + 1;\n            int wordLength = end - start;\n            strncpy(result + pos, sentence + start, wordLength);\n            pos += wordLength;\n            if (i != 0) {\n                result[pos] = ' ';\n                pos++;\n            }\n            end = i;\n        }\n    }\n    result[pos] = '\\0';\n}\n\nint main() {\n    char sentence[] = \"Develop a function that receives a sentence\";\n    char result[100];\n    \n    reverseWords(sentence, result);\n    \n    printf(\"%s\\n\", result);\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function that returns the sum of all elements in a matrix.",
    "code": "```c\n#include <stdio.h>\n\nint sumMatrix(int rows, int cols, int matrix[rows][cols]) {\n    int sum = 0;\n    for (int i = 0; i < rows; i++) {\n        for (int j = 0; j < cols; j++) {\n            sum += matrix[i][j];\n        }\n    }\n    return sum;\n}\n\nint main() {\n    int matrix[3][3] = {\n        {1, 2, 3},\n        {4, 5, 6},\n        {7, 8, 9}\n    };\n    int result = sumMatrix(3, 3, matrix);\n    printf(\"Sum of matrix elements: %d\\n\", result);\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that accepts a string and returns true if it is a palindrome.",
    "code": "```c\n#include <stdbool.h>\n#include <string.h>\n\nbool isPalindrome(const char *str) {\n    int length = strlen(str);\n    for (int i = 0; i < length / 2; i++) {\n        if (str[i] != str[length - i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n```"
  },
  {
    "task": "Create a function that takes a number and returns its binary representation as a string.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\nchar* intToBinaryString(int num) {\n    int size = sizeof(num) * 8;\n    char* binaryStr = (char*)malloc(size + 1);\n    if (binaryStr == NULL) return NULL;\n    binaryStr[size] = '\\0';\n    \n    for (int i = 0; i < size; i++) {\n        binaryStr[size - 1 - i] = (num & (1 << i)) ? '1' : '0';\n    }\n    \n    return binaryStr;\n}\n\nint main() {\n    int num = 10;\n    char* binary = intToBinaryString(num);\n    if (binary != NULL) {\n        printf(\"Binary representation of %d is %s\\n\", num, binary);\n        free(binary);\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Design a function that returns the number of words in a paragraph.",
    "code": "```c\n#include <stdio.h>\n#include <ctype.h>\n\nint countWords(const char *paragraph) {\n    int count = 0;\n    int inWord = 0;\n    \n    while (*paragraph) {\n        if (isspace(*paragraph)) {\n            inWord = 0;\n        } else if (!inWord) {\n            inWord = 1;\n            count++;\n        }\n        paragraph++;\n    }\n    \n    return count;\n}\n\nint main() {\n    const char *paragraph = \"This is a sample paragraph with several words.\";\n    printf(\"Number of words: %d\\n\", countWords(paragraph));\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function that accepts a list and returns the index of its maximum element.",
    "code": "```c\n#include <stdio.h>\n\nint indexOfMaxElement(int *list, int size) {\n    if (size <= 0) return -1;\n    int maxIndex = 0;\n    for (int i = 1; i < size; i++) {\n        if (list[i] > list[maxIndex]) {\n            maxIndex = i;\n        }\n    }\n    return maxIndex;\n}\n\nint main() {\n    int list[] = {3, 5, 2, 9, 6};\n    int size = sizeof(list) / sizeof(list[0]);\n    int index = indexOfMaxElement(list, size);\n    printf(\"Index of maximum element: %d\\n\", index);\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that takes a list of grades and returns the highest grade.",
    "code": "```c\n#include <stdio.h>\n\nint highest_grade(int grades[], int size) {\n    int max_grade = grades[0];\n    for (int i = 1; i < size; i++) {\n        if (grades[i] > max_grade) {\n            max_grade = grades[i];\n        }\n    }\n    return max_grade;\n}\n\nint main() {\n    int grades[] = {88, 92, 75, 91, 85};\n    int size = sizeof(grades) / sizeof(grades[0]);\n    int highest = highest_grade(grades, size);\n    printf(\"The highest grade is: %d\\n\", highest);\n    return 0;\n}\n```"
  },
  {
    "task": "Create a function that returns the product of all positive integers up to a given number.",
    "code": "```c\n#include <stdio.h>\n\nint factorial(int n) {\n    if (n <= 0) {\n        return 1;\n    }\n    int product = 1;\n    for (int i = 1; i <= n; i++) {\n        product *= i;\n    }\n    return product;\n}\n\nint main() {\n    int number = 5;\n    int result = factorial(number);\n    printf(\"The factorial of %d is %d\\n\", number, result);\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a function that receives a string and returns a new string with spaces replaced by hyphens.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* replaceSpacesWithHyphens(const char* input) {\n    int length = strlen(input);\n    char* result = (char*)malloc(length + 1);\n    if (result == NULL) {\n        return NULL; // Memory allocation failed\n    }\n    for (int i = 0; i < length; i++) {\n        if (input[i] == ' ') {\n            result[i] = '-';\n        } else {\n            result[i] = input[i];\n        }\n    }\n    result[length] = '\\0';\n    return result;\n}\n\nint main() {\n    const char* original = \"Replace spaces with hyphens.\";\n    char* modified = replaceSpacesWithHyphens(original);\n    if (modified != NULL) {\n        printf(\"%s\\n\", modified);\n        free(modified);\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function that takes a list of integers and returns their sum.",
    "code": "```c\n#include <stdio.h>\n\nint sumOfList(int *list, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += list[i];\n    }\n    return sum;\n}\n\nint main() {\n    int list[] = {1, 2, 3, 4, 5};\n    int size = sizeof(list) / sizeof(list[0]);\n    int result = sumOfList(list, size);\n    printf(\"Sum: %d\\n\", result);\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that checks if a string is a valid email address and returns a boolean.",
    "code": "```c\n#include <stdbool.h>\n#include <string.h>\n#include <ctype.h>\n\nbool isValidEmail(const char *email) {\n    if (email == NULL) return false;\n\n    const char *at = strchr(email, '@');\n    if (at == NULL || at == email || *(at + 1) == '\\0') return false;\n\n    const char *dot = strchr(at + 1, '.');\n    if (dot == NULL || dot == at + 1 || *(dot + 1) == '\\0') return false;\n\n    for (const char *ptr = email; ptr < at; ++ptr) {\n        if (!isalnum(*ptr) && *ptr != '.' && *ptr != '_' && *ptr != '-') return false;\n    }\n\n    for (const char *ptr = at + 1; ptr < dot; ++ptr) {\n        if (!isalnum(*ptr) && *ptr != '.' && *ptr != '-') return false;\n    }\n\n    for (const char *ptr = dot + 1; *ptr != '\\0'; ++ptr) {\n        if (!isalnum(*ptr)) return false;\n    }\n\n    return true;\n}\n```"
  },
  {
    "task": "Create a function that returns the decimal equivalent of a hexadecimal string.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\nint hexToDecimal(const char *hexString) {\n    return (int)strtol(hexString, NULL, 16);\n}\n\nint main() {\n    const char *hexStr = \"1A3F\";\n    int decimalValue = hexToDecimal(hexStr);\n    printf(\"The decimal equivalent of %s is %d\\n\", hexStr, decimalValue);\n    return 0;\n}\n```"
  },
  {
    "task": "Design a function that calculates and returns the body mass index based on height and weight.",
    "code": "```c\n#include <stdio.h>\n\ndouble calculateBMI(double weight, double height) {\n    return weight / (height * height);\n}\n\nint main() {\n    double weight = 70.0; // Example weight in kilograms\n    double height = 1.75; // Example height in meters\n    double bmi = calculateBMI(weight, height);\n    printf(\"BMI: %.2f\\n\", bmi);\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function that returns the initials of a person's name given a full name.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nchar* getInitials(const char* fullName) {\n    static char initials[10];\n    int len = strlen(fullName);\n    int index = 0;\n\n    // Add the first initial\n    if (len > 0 && isalpha(fullName[0])) {\n        initials[index++] = toupper(fullName[0]);\n    }\n\n    // Add subsequent initials\n    for (int i = 1; i < len; i++) {\n        if (fullName[i] == ' ' && isalpha(fullName[i + 1])) {\n            initials[index++] = toupper(fullName[i + 1]);\n        }\n    }\n\n    initials[index] = '\\0';\n    return initials;\n}\n\nint main() {\n    const char* name = \"john doe smith\";\n    printf(\"Initials: %s\\n\", getInitials(name));\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that accepts a list of names and returns them sorted alphabetically.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint compare(const void *a, const void *b) {\n    return strcmp(*(const char **)a, *(const char **)b);\n}\n\nchar** sortNames(char* names[], int size) {\n    qsort(names, size, sizeof(char*), compare);\n    return names;\n}\n\nint main() {\n    char* names[] = {\"John\", \"Alice\", \"Bob\", \"Diana\"};\n    int size = sizeof(names) / sizeof(names[0]);\n    \n    char** sortedNames = sortNames(names, size);\n    \n    for (int i = 0; i < size; i++) {\n        printf(\"%s\\n\", sortedNames[i]);\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Create a function that takes a list of integers and returns a list of their squares.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\nint* squareList(const int* nums, int size) {\n    int* squares = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        squares[i] = nums[i] * nums[i];\n    }\n    return squares;\n}\n\nint main() {\n    int nums[] = {1, 2, 3, 4, 5};\n    int size = sizeof(nums) / sizeof(nums[0]);\n    int* squares = squareList(nums, size);\n\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", squares[i]);\n    }\n    printf(\"\\n\");\n\n    free(squares);\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a function that returns the common elements between two sets.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int *data;\n    int size;\n} Set;\n\nSet commonElements(Set set1, Set set2) {\n    Set common;\n    common.data = (int *)malloc((set1.size < set2.size ? set1.size : set2.size) * sizeof(int));\n    common.size = 0;\n    \n    for (int i = 0; i < set1.size; i++) {\n        for (int j = 0; j < set2.size; j++) {\n            if (set1.data[i] == set2.data[j]) {\n                int alreadyExists = 0;\n                for (int k = 0; k < common.size; k++) {\n                    if (common.data[k] == set1.data[i]) {\n                        alreadyExists = 1;\n                        break;\n                    }\n                }\n                if (!alreadyExists) {\n                    common.data[common.size] = set1.data[i];\n                    common.size++;\n                }\n            }\n        }\n    }\n    return common;\n}\n\nint main() {\n    Set set1 = { (int[]){1, 2, 3, 4}, 4 };\n    Set set2 = { (int[]){3, 4, 5, 6}, 4 };\n    \n    Set common = commonElements(set1, set2);\n    \n    printf(\"Common elements: \");\n    for (int i = 0; i < common.size; i++) {\n        printf(\"%d \", common.data[i]);\n    }\n    printf(\"\\n\");\n    \n    free(common.data);\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function that receives a list of strings and returns the shortest string.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nchar* shortestString(char* strings[], int size) {\n    if (size == 0) return NULL;\n\n    char* shortest = strings[0];\n    for (int i = 1; i < size; i++) {\n        if (strlen(strings[i]) < strlen(shortest)) {\n            shortest = strings[i];\n        }\n    }\n    return shortest;\n}\n\nint main() {\n    char* list[] = {\"apple\", \"banana\", \"kiwi\", \"peach\"};\n    int size = sizeof(list) / sizeof(list[0]);\n    char* shortest = shortestString(list, size);\n    if (shortest != NULL) {\n        printf(\"The shortest string is: %s\\n\", shortest);\n    } else {\n        printf(\"The list is empty.\\n\");\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that returns the sum of digits of a given integer.",
    "code": "```c\n#include <stdio.h>\n\nint sumOfDigits(int number) {\n    int sum = 0;\n    while (number != 0) {\n        sum += number % 10;\n        number /= 10;\n    }\n    return sum;\n}\n\nint main() {\n    int number = 1234;\n    printf(\"Sum of digits: %d\\n\", sumOfDigits(number));\n    return 0;\n}\n```"
  },
  {
    "task": "Create a function that takes a matrix and returns its transpose.",
    "code": "```c\n#include <stdio.h>\n\n#define MAX_ROWS 100\n#define MAX_COLS 100\n\nvoid transposeMatrix(int rows, int cols, int matrix[MAX_ROWS][MAX_COLS], int result[MAX_COLS][MAX_ROWS]) {\n    for (int i = 0; i < rows; ++i) {\n        for (int j = 0; j < cols; ++j) {\n            result[j][i] = matrix[i][j];\n        }\n    }\n}\n\nint main() {\n    int matrix[MAX_ROWS][MAX_COLS] = {\n        {1, 2, 3},\n        {4, 5, 6}\n    };\n    int rows = 2, cols = 3;\n    int result[MAX_COLS][MAX_ROWS];\n\n    transposeMatrix(rows, cols, matrix, result);\n\n    for (int i = 0; i < cols; ++i) {\n        for (int j = 0; j < rows; ++j) {\n            printf(\"%d \", result[i][j]);\n        }\n        printf(\"\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a function that returns the percentage of uppercase letters in a string.",
    "code": "```c\n#include <stdio.h>\n#include <ctype.h>\n#include <string.h>\n\ndouble percentage_of_uppercase(const char *str) {\n    int uppercase_count = 0;\n    int total_count = 0;\n    while (*str) {\n        if (isalpha(*str)) {\n            total_count++;\n            if (isupper(*str)) {\n                uppercase_count++;\n            }\n        }\n        str++;\n    }\n    return total_count > 0 ? (double)uppercase_count / total_count * 100 : 0.0;\n}\n\nint main() {\n    const char *test_str = \"Hello World!\";\n    double result = percentage_of_uppercase(test_str);\n    printf(\"Percentage of uppercase letters: %.2f%%\\n\", result);\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function that accepts a string and returns it with each word capitalized.",
    "code": "```c\n#include <stdio.h>\n#include <ctype.h>\n\nchar* capitalizeWords(char* str) {\n    int inWord = 0;\n    char* original = str;\n\n    while (*str) {\n        if (!inWord && isalpha(*str)) {\n            *str = toupper(*str);\n            inWord = 1;\n        } else if (isspace(*str)) {\n            inWord = 0;\n        }\n        str++;\n    }\n    return original;\n}\n\nint main() {\n    char text[] = \"this is a test string\";\n    printf(\"%s\\n\", capitalizeWords(text));\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that takes a list and returns the difference between the max and min values.",
    "code": "```c\n#include <stdio.h>\n\nint maxMinDifference(int *arr, int size) {\n    if (size <= 0) return 0;\n\n    int max = arr[0];\n    int min = arr[0];\n    \n    for (int i = 1; i < size; i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n        if (arr[i] < min) {\n            min = arr[i];\n        }\n    }\n    \n    return max - min;\n}\n\nint main() {\n    int list[] = {5, 3, 8, 1, 9, 7};\n    int size = sizeof(list) / sizeof(list[0]);\n    int difference = maxMinDifference(list, size);\n    printf(\"Difference: %d\\n\", difference);\n    return 0;\n}\n```"
  },
  {
    "task": "Create a function that returns a list containing the first n prime numbers.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n\nbool is_prime(int num) {\n    if (num <= 1) return false;\n    if (num <= 3) return true;\n    if (num % 2 == 0 || num % 3 == 0) return false;\n    for (int i = 5; i * i <= num; i += 6) {\n        if (num % i == 0 || num % (i + 2) == 0) return false;\n    }\n    return true;\n}\n\nint* first_n_primes(int n) {\n    int* primes = (int*)malloc(n * sizeof(int));\n    int count = 0;\n    int number = 2;\n    while (count < n) {\n        if (is_prime(number)) {\n            primes[count] = number;\n            count++;\n        }\n        number++;\n    }\n    return primes;\n}\n\nint main() {\n    int n = 10;\n    int* primes = first_n_primes(n);\n    for (int i = 0; i < n; i++) {\n        printf(\"%d \", primes[i]);\n    }\n    free(primes);\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a function that receives a dictionary and returns a new dictionary with keys and values swapped.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char *key;\n    char *value;\n} KeyValuePair;\n\ntypedef struct {\n    KeyValuePair *pairs;\n    int size;\n} Dictionary;\n\nDictionary swapKeysAndValues(Dictionary dict) {\n    Dictionary newDict;\n    newDict.pairs = (KeyValuePair *)malloc(sizeof(KeyValuePair) * dict.size);\n    newDict.size = dict.size;\n    \n    for (int i = 0; i < dict.size; i++) {\n        newDict.pairs[i].key = strdup(dict.pairs[i].value);\n        newDict.pairs[i].value = strdup(dict.pairs[i].key);\n    }\n    \n    return newDict;\n}\n\nint main() {\n    Dictionary dict;\n    dict.size = 3;\n    dict.pairs = (KeyValuePair *)malloc(sizeof(KeyValuePair) * dict.size);\n\n    dict.pairs[0].key = \"one\";\n    dict.pairs[0].value = \"1\";\n    dict.pairs[1].key = \"two\";\n    dict.pairs[1].value = \"2\";\n    dict.pairs[2].key = \"three\";\n    dict.pairs[2].value = \"3\";\n\n    Dictionary swappedDict = swapKeysAndValues(dict);\n\n    for (int i = 0; i < swappedDict.size; i++) {\n        printf(\"Key: %s, Value: %s\\n\", swappedDict.pairs[i].key, swappedDict.pairs[i].value);\n        free(swappedDict.pairs[i].key);\n        free(swappedDict.pairs[i].value);\n    }\n    \n    free(swappedDict.pairs);\n    free(dict.pairs);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function that accepts a string and returns the frequency of each word.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\n#define MAX_WORDS 100\n\ntypedef struct {\n    char word[50];\n    int count;\n} WordFreq;\n\nint isDelimiter(char c) {\n    return c == ' ' || c == '\\t' || c == '\\n' || c == '\\0';\n}\n\nWordFreq* wordFrequency(const char *str, int *size) {\n    WordFreq *freqArr = malloc(MAX_WORDS * sizeof(WordFreq));\n    int wordCount = 0;\n    int i = 0, j, start;\n    char word[50];\n\n    while (str[i] != '\\0') {\n        while (isDelimiter(str[i])) i++;\n        start = i;\n\n        while (!isDelimiter(str[i])) i++;\n\n        if (i > start) {\n            strncpy(word, &str[start], i - start);\n            word[i - start] = '\\0';\n\n            for (j = 0; j < wordCount; j++) {\n                if (strcmp(freqArr[j].word, word) == 0) {\n                    freqArr[j].count++;\n                    break;\n                }\n            }\n\n            if (j == wordCount) {\n                strcpy(freqArr[wordCount].word, word);\n                freqArr[wordCount].count = 1;\n                wordCount++;\n            }\n        }\n    }\n\n    *size = wordCount;\n    return freqArr;\n}\n\nint main() {\n    char text[] = \"example text with some example text\";\n    int i, size;\n    WordFreq *result = wordFrequency(text, &size);\n\n    for (i = 0; i < size; i++) {\n        printf(\"%s: %d\\n\", result[i].word, result[i].count);\n    }\n\n    free(result);\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that takes two numbers and returns their greatest common divisor.",
    "code": "```c\n#include <stdio.h>\n\nint gcd(int a, int b) {\n    while (b != 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n\nint main() {\n    int num1 = 48, num2 = 18;\n    int result = gcd(num1, num2);\n    printf(\"GCD of %d and %d is %d\\n\", num1, num2, result);\n    return 0;\n}\n```"
  },
  {
    "task": "Create a function that returns the number of consonants in a given string.",
    "code": "```c\n#include <stdio.h>\n#include <ctype.h>\n\nint countConsonants(const char *str) {\n    int count = 0;\n    while (*str) {\n        char c = tolower(*str);\n        if (isalpha(c) && c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n            count++;\n        }\n        str++;\n    }\n    return count;\n}\n\nint main() {\n    const char *testString = \"Hello, World!\";\n    int result = countConsonants(testString);\n    printf(\"Number of consonants: %d\\n\", result);\n    return 0;\n}\n```"
  },
  {
    "task": "Design a function that checks if a number is a perfect square and returns a boolean.",
    "code": "```c\n#include <stdbool.h>\n#include <math.h>\n\nbool isPerfectSquare(int num) {\n    if (num < 0) {\n        return false;\n    }\n    int root = (int)sqrt(num);\n    return root * root == num;\n}\n```"
  },
  {
    "task": "Implement a function that takes a list of numbers and returns the mode.",
    "code": "```c\n#include <stdio.h>\n\nint findMode(int arr[], int size) {\n    int maxCount = 0, mode = arr[0];\n    for (int i = 0; i < size; i++) {\n        int count = 0;\n        for (int j = 0; j < size; j++) {\n            if (arr[j] == arr[i]) {\n                count++;\n            }\n        }\n        if (count > maxCount) {\n            maxCount = count;\n            mode = arr[i];\n        }\n    }\n    return mode;\n}\n\nint main() {\n    int numbers[] = {1, 2, 3, 4, 2, 2, 5};\n    int size = sizeof(numbers) / sizeof(numbers[0]);\n    int mode = findMode(numbers, size);\n    printf(\"Mode: %d\\n\", mode);\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that accepts a string and returns a new string with characters in reverse order.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar* reverseString(const char* str) {\n    int len = strlen(str);\n    char* reversed = (char*)malloc((len + 1) * sizeof(char));\n    if (reversed == NULL) {\n        return NULL; // Memory allocation failed\n    }\n    for (int i = 0; i < len; i++) {\n        reversed[i] = str[len - i - 1];\n    }\n    reversed[len] = '\\0';\n    return reversed;\n}\n\nint main() {\n    const char* original = \"example\";\n    char* reversed = reverseString(original);\n    if (reversed != NULL) {\n        printf(\"Reversed: %s\\n\", reversed);\n        free(reversed);\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Create a function that returns the sum of all even numbers in a list.",
    "code": "```c\n#include <stdio.h>\n\nint sumEvenNumbers(int *list, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        if (list[i] % 2 == 0) {\n            sum += list[i];\n        }\n    }\n    return sum;\n}\n\nint main() {\n    int numbers[] = {1, 2, 3, 4, 5, 6};\n    int size = sizeof(numbers) / sizeof(numbers[0]);\n    int sum = sumEvenNumbers(numbers, size);\n    printf(\"Sum of even numbers: %d\\n\", sum);\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a function that receives two lists and returns their union.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int *data;\n    size_t size;\n} IntArray;\n\nIntArray unionOfLists(IntArray list1, IntArray list2) {\n    int *temp = malloc((list1.size + list2.size) * sizeof(int));\n    size_t k = 0;\n    \n    for (size_t i = 0; i < list1.size; ++i) {\n        temp[k++] = list1.data[i];\n    }\n    \n    for (size_t i = 0; i < list2.size; ++i) {\n        int isPresent = 0;\n        for (size_t j = 0; j < list1.size; ++j) {\n            if (list2.data[i] == list1.data[j]) {\n                isPresent = 1;\n                break;\n            }\n        }\n        if (!isPresent) {\n            temp[k++] = list2.data[i];\n        }\n    }\n    \n    IntArray result;\n    result.data = malloc(k * sizeof(int));\n    result.size = k;\n    for (size_t i = 0; i < k; ++i) {\n        result.data[i] = temp[i];\n    }\n    \n    free(temp);\n    return result;\n}\n\nint main() {\n    IntArray list1 = { (int[]){1, 2, 3, 4}, 4 };\n    IntArray list2 = { (int[]){3, 4, 5, 6}, 4 };\n\n    IntArray result = unionOfLists(list1, list2);\n\n    for (size_t i = 0; i < result.size; ++i) {\n        printf(\"%d \", result.data[i]);\n    }\n    printf(\"\\n\");\n    \n    free(result.data);\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function that takes a string and returns the number of unique characters.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nint countUniqueCharacters(const char *str) {\n    int count = 0;\n    int ascii[256] = {0};\n\n    for (int i = 0; str[i] != '\\0'; i++) {\n        if (ascii[(unsigned char)str[i]] == 0) {\n            count++;\n            ascii[(unsigned char)str[i]] = 1;\n        }\n    }\n    return count;\n}\n\nint main() {\n    const char *input = \"hello world\";\n    int uniqueCount = countUniqueCharacters(input);\n    printf(\"Number of unique characters: %d\\n\", uniqueCount);\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that returns the cube of a given number.",
    "code": "```c\n#include <stdio.h>\n\nint cube(int number) {\n    return number * number * number;\n}\n\nint main() {\n    int num = 3;\n    int result = cube(num);\n    printf(\"The cube of %d is %d\\n\", num, result);\n    return 0;\n}\n```"
  },
  {
    "task": "Create a function that calculates the power of a number given a base and exponent and returns the result.",
    "code": "```c\n#include <stdio.h>\n\ndouble power(double base, int exponent) {\n    double result = 1.0;\n    for (int i = 0; i < exponent; i++) {\n        result *= base;\n    }\n    return result;\n}\n\nint main() {\n    double base = 2.0;\n    int exponent = 3;\n    double result = power(base, exponent);\n    printf(\"Result: %f\\n\", result);\n    return 0;\n}\n```"
  },
  {
    "task": "Design a function that accepts a URL and returns its domain name.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nchar* getDomainName(const char* url) {\n    const char* prefix1 = \"http://\";\n    const char* prefix2 = \"https://\";\n    const char* www = \"www.\";\n    const char* start = url;\n\n    if (strncmp(url, prefix1, strlen(prefix1)) == 0) {\n        start += strlen(prefix1);\n    } else if (strncmp(url, prefix2, strlen(prefix2)) == 0) {\n        start += strlen(prefix2);\n    }\n\n    if (strncmp(start, www, strlen(www)) == 0) {\n        start += strlen(www);\n    }\n\n    const char* end = strchr(start, '/');\n    size_t len = end ? (size_t)(end - start) : strlen(start);\n\n    char* domain = (char*)malloc(len + 1);\n    if (domain) {\n        strncpy(domain, start, len);\n        domain[len] = '\\0';\n    }\n    return domain;\n}\n\nint main() {\n    const char* url = \"https://www.example.com/path\";\n    char* domain = getDomainName(url);\n    if (domain) {\n        printf(\"Domain: %s\\n\", domain);\n        free(domain);\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function that takes a sentence and returns it with each letter shifted by one in the alphabet.",
    "code": "```c\n#include <stdio.h>\n\nchar shift_char(char c) {\n    if (c >= 'a' && c <= 'z') {\n        return (c == 'z') ? 'a' : c + 1;\n    } else if (c >= 'A' && c <= 'Z') {\n        return (c == 'Z') ? 'A' : c + 1;\n    } else {\n        return c;\n    }\n}\n\nchar* shift_sentence(const char* sentence, char* result) {\n    int i = 0;\n    while (sentence[i] != '\\0') {\n        result[i] = shift_char(sentence[i]);\n        i++;\n    }\n    result[i] = '\\0';\n    return result;\n}\n\nint main() {\n    const char* sentence = \"Hello, World!\";\n    char result[100];\n    printf(\"%s\\n\", shift_sentence(sentence, result));\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that checks if a list is sorted and returns a boolean.",
    "code": "```c\n#include <stdbool.h>\n\nbool isSorted(int arr[], int size) {\n    for (int i = 0; i < size - 1; i++) {\n        if (arr[i] > arr[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n```"
  },
  {
    "task": "Create a function that returns the longest increasing subsequence in a list of numbers.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\nint* longestIncreasingSubsequence(int* nums, int numsSize, int* returnSize) {\n    if (numsSize == 0) {\n        *returnSize = 0;\n        return NULL;\n    }\n    \n    int* dp = (int*)malloc(numsSize * sizeof(int));\n    int* paths = (int*)malloc(numsSize * sizeof(int));\n    int maxLength = 1, maxIndex = 0;\n\n    for (int i = 0; i < numsSize; i++) {\n        dp[i] = 1;\n        paths[i] = -1;\n        for (int j = 0; j < i; j++) {\n            if (nums[i] > nums[j] && dp[i] < dp[j] + 1) {\n                dp[i] = dp[j] + 1;\n                paths[i] = j;\n            }\n        }\n        if (dp[i] > maxLength) {\n            maxLength = dp[i];\n            maxIndex = i;\n        }\n    }\n\n    int* lis = (int*)malloc(maxLength * sizeof(int));\n    int k = maxLength - 1;\n    for (int i = maxIndex; i != -1; i = paths[i]) {\n        lis[k--] = nums[i];\n    }\n\n    free(dp);\n    free(paths);\n\n    *returnSize = maxLength;\n    return lis;\n}\n\nint main() {\n    int nums[] = {10, 9, 2, 5, 3, 7, 101, 18};\n    int numsSize = sizeof(nums) / sizeof(nums[0]);\n    int returnSize;\n    int* result = longestIncreasingSubsequence(nums, numsSize, &returnSize);\n    \n    printf(\"Longest Increasing Subsequence: \");\n    for (int i = 0; i < returnSize; i++) {\n        printf(\"%d \", result[i]);\n    }\n    \n    free(result);\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a function that calculates and returns the compound interest for given principal, rate, and time.",
    "code": "```c\n#include <stdio.h>\n#include <math.h>\n\ndouble calculateCompoundInterest(double principal, double rate, double time) {\n    return principal * pow((1 + rate), time) - principal;\n}\n\nint main() {\n    double principal = 1000.0, rate = 0.05, time = 5.0;\n    double interest = calculateCompoundInterest(principal, rate, time);\n    printf(\"Compound Interest: %.2f\\n\", interest);\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function that accepts two strings and returns their longest common substring.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nchar* longestCommonSubstring(const char* str1, const char* str2) {\n    int len1 = strlen(str1);\n    int len2 = strlen(str2);\n    int maxLen = 0;\n    int endIndex = 0;\n    \n    int dp[len1 + 1][len2 + 1];\n    memset(dp, 0, sizeof(dp));\n\n    for (int i = 1; i <= len1; i++) {\n        for (int j = 1; j <= len2; j++) {\n            if (str1[i - 1] == str2[j - 1]) {\n                dp[i][j] = dp[i - 1][j - 1] + 1;\n                if (dp[i][j] > maxLen) {\n                    maxLen = dp[i][j];\n                    endIndex = i;\n                }\n            }\n        }\n    }\n\n    char* result = (char*)malloc(sizeof(char) * (maxLen + 1));\n    strncpy(result, str1 + endIndex - maxLen, maxLen);\n    result[maxLen] = '\\0';\n    \n    return result;\n}\n\nint main() {\n    const char* str1 = \"abcde\";\n    const char* str2 = \"abfce\";\n    char* lcs = longestCommonSubstring(str1, str2);\n    printf(\"Longest Common Substring: %s\\n\", lcs);\n    free(lcs);\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that takes a number and returns true if it is a palindrome.",
    "code": "```c\n#include <stdbool.h>\n\nbool isPalindrome(int num) {\n    int original = num;\n    int reversed = 0;\n    \n    while (num > 0) {\n        int digit = num % 10;\n        reversed = reversed * 10 + digit;\n        num /= 10;\n    }\n    \n    return original == reversed;\n}\n```"
  },
  {
    "task": "Create a function that returns the average length of words in a given sentence.",
    "code": "```c\n#include <stdio.h>\n#include <ctype.h>\n#include <string.h>\n\ndouble averageWordLength(const char *sentence) {\n    int wordCount = 0, charCount = 0;\n    int inWord = 0;\n    \n    while (*sentence) {\n        if (isspace(*sentence)) {\n            if (inWord) {\n                wordCount++;\n                inWord = 0;\n            }\n        } else {\n            charCount++;\n            inWord = 1;\n        }\n        sentence++;\n    }\n    \n    if (inWord) {\n        wordCount++;\n    }\n    \n    return wordCount == 0 ? 0.0 : (double)charCount / wordCount;\n}\n\nint main() {\n    const char *sentence = \"This is a sample sentence.\";\n    printf(\"Average word length: %.2f\\n\", averageWordLength(sentence));\n    return 0;\n}\n```"
  },
  {
    "task": "Design a function that checks if a string contains only digits and returns a boolean.",
    "code": "```c\n#include <stdbool.h>\n#include <ctype.h>\n\nbool isStringDigitsOnly(const char *str) {\n    while (*str) {\n        if (!isdigit((unsigned char)*str)) {\n            return false;\n        }\n        str++;\n    }\n    return true;\n}\n```"
  },
  {
    "task": "Implement a function that receives a list of tuples and returns a list of the first elements.",
    "code": "```c\n#include <stdio.h>\n\nint* first_elements(int tuples[][2], int size, int* result_size) {\n    int* firsts = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        firsts[i] = tuples[i][0];\n    }\n    *result_size = size;\n    return firsts;\n}\n\nint main() {\n    int tuples[][2] = {{1, 2}, {3, 4}, {5, 6}};\n    int size = sizeof(tuples) / sizeof(tuples[0]);\n    int result_size;\n    int* firsts = first_elements(tuples, size, &result_size);\n    \n    for (int i = 0; i < result_size; i++) {\n        printf(\"%d \", firsts[i]);\n    }\n    \n    free(firsts);\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that takes a year and returns the Chinese zodiac sign for that year.",
    "code": "```c\n#include <stdio.h>\n\nconst char* getChineseZodiac(int year) {\n    const char* zodiacSigns[] = {\n        \"Monkey\", \"Rooster\", \"Dog\", \"Pig\", \"Rat\", \"Ox\", \"Tiger\", \n        \"Rabbit\", \"Dragon\", \"Snake\", \"Horse\", \"Goat\"\n    };\n    return zodiacSigns[year % 12];\n}\n\nint main() {\n    int year = 2023;\n    const char* zodiac = getChineseZodiac(year);\n    printf(\"The Chinese zodiac sign for the year %d is %s.\\n\", year, zodiac);\n    return 0;\n}\n```"
  },
  {
    "task": "Create a function that returns the number of trailing zeros in a factorial of a given number.",
    "code": "```c\n#include <stdio.h>\n\nint trailingZerosInFactorial(int n) {\n    int count = 0;\n    for (int i = 5; n / i >= 1; i *= 5) {\n        count += n / i;\n    }\n    return count;\n}\n\nint main() {\n    int number = 10; // Example input\n    int result = trailingZerosInFactorial(number);\n    printf(\"Number of trailing zeros in %d! is %d\\n\", number, result);\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a function that accepts a list and returns a new list with elements multiplied by their index.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\nint* multiplyByIndex(int* arr, int size) {\n    int* result = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        result[i] = arr[i] * i;\n    }\n    return result;\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n\n    int* result = multiplyByIndex(arr, size);\n\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", result[i]);\n    }\n\n    free(result);\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function that receives a string and returns a dictionary of word lengths.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char **words;\n    int *lengths;\n    int size;\n} WordLengths;\n\nWordLengths getWordLengths(const char *input) {\n    WordLengths result;\n    result.words = NULL;\n    result.lengths = NULL;\n    result.size = 0;\n    \n    char *tempStr = strdup(input);\n    char *token = strtok(tempStr, \" \");\n    \n    while (token != NULL) {\n        result.words = realloc(result.words, (result.size + 1) * sizeof(char *));\n        result.lengths = realloc(result.lengths, (result.size + 1) * sizeof(int));\n        \n        result.words[result.size] = strdup(token);\n        result.lengths[result.size] = strlen(token);\n        result.size++;\n        \n        token = strtok(NULL, \" \");\n    }\n    \n    free(tempStr);\n    return result;\n}\n\nvoid freeWordLengths(WordLengths wl) {\n    for (int i = 0; i < wl.size; i++) {\n        free(wl.words[i]);\n    }\n    free(wl.words);\n    free(wl.lengths);\n}\n\nint main() {\n    const char *input = \"Implement a function\";\n    WordLengths result = getWordLengths(input);\n    \n    for (int i = 0; i < result.size; i++) {\n        printf(\"Word: %s, Length: %d\\n\", result.words[i], result.lengths[i]);\n    }\n    \n    freeWordLengths(result);\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that takes a list of integers and returns a list of numbers that are divisible by 3.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\nint* divisibleByThree(int* arr, int size, int* resultSize) {\n    int* result = (int*)malloc(size * sizeof(int));\n    int count = 0;\n    for (int i = 0; i < size; i++) {\n        if (arr[i] % 3 == 0) {\n            result[count++] = arr[i];\n        }\n    }\n    *resultSize = count;\n    return result;\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    int resultSize;\n    int* result = divisibleByThree(arr, size, &resultSize);\n    \n    for (int i = 0; i < resultSize; i++) {\n        printf(\"%d \", result[i]);\n    }\n    free(result);\n    return 0;\n}\n```"
  },
  {
    "task": "Create a function that returns the result of a quadratic equation given its coefficients.",
    "code": "```c\n#include <stdio.h>\n#include <math.h>\n\ndouble quadratic(double a, double b, double c, int root) {\n    double discriminant = b * b - 4 * a * c;\n    if (discriminant < 0) {\n        return NAN; // No real roots\n    }\n    if (root == 1) {\n        return (-b + sqrt(discriminant)) / (2 * a);\n    } else {\n        return (-b - sqrt(discriminant)) / (2 * a);\n    }\n}\n\nint main() {\n    double a = 1.0, b = -3.0, c = 2.0;\n    int root = 1; // Choose 1 for first root, 2 for second root\n    double result = quadratic(a, b, c, root);\n    printf(\"Root %d: %f\\n\", root, result);\n    return 0;\n}\n```"
  },
  {
    "task": "Design a function that checks if two lists have any elements in common and returns a boolean.",
    "code": "```c\n#include <stdbool.h>\n\nbool haveCommonElements(int *list1, int size1, int *list2, int size2) {\n    for (int i = 0; i < size1; i++) {\n        for (int j = 0; j < size2; j++) {\n            if (list1[i] == list2[j]) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n```"
  },
  {
    "task": "Implement a function that accepts a list and returns the sum of its elements using recursion.",
    "code": "```c\n#include <stdio.h>\n\nint sumRecursive(int arr[], int n) {\n    if (n <= 0) {\n        return 0;\n    }\n    return arr[n - 1] + sumRecursive(arr, n - 1);\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int length = sizeof(arr) / sizeof(arr[0]);\n    int result = sumRecursive(arr, length);\n    printf(\"Sum of elements: %d\\n\", result);\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that takes a list of numbers and returns the variance.",
    "code": "```c\n#include <stdio.h>\n\ndouble calculateVariance(double numbers[], int size) {\n    double sum = 0.0, mean, variance = 0.0;\n\n    for (int i = 0; i < size; i++) {\n        sum += numbers[i];\n    }\n\n    mean = sum / size;\n\n    for (int i = 0; i < size; i++) {\n        variance += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n\n    return variance / size;\n}\n\nint main() {\n    double numbers[] = {1.0, 2.0, 3.0, 4.0, 5.0};\n    int size = sizeof(numbers) / sizeof(numbers[0]);\n\n    double variance = calculateVariance(numbers, size);\n    printf(\"Variance: %.2f\\n\", variance);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a function that returns the ASCII value of a given character.",
    "code": "```c\n#include <stdio.h>\n\nint asciiValue(char c) {\n    return (int)c;\n}\n\nint main() {\n    char character = 'A';\n    int value = asciiValue(character);\n    printf(\"The ASCII value of %c is %d\\n\", character, value);\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a function that takes a number and returns the number of bits required for its binary representation.",
    "code": "```c\n#include <stdio.h>\n\nint bits_required(int number) {\n    int bits = 0;\n    while (number != 0) {\n        bits++;\n        number >>= 1;\n    }\n    return bits;\n}\n\nint main() {\n    int number = 10;\n    printf(\"Number of bits required: %d\\n\", bits_required(number));\n    return 0;\n}\n```"
  }
]