[
  {
    "task": "Write a program that checks if a number is even or odd and outputs the result.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int number;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &number);\n\n    if (number % 2 == 0) {\n        printf(\"The number is even.\\n\");\n    } else {\n        printf(\"The number is odd.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a function that determines if a given year is a leap year.",
    "code": "```c\n#include <stdbool.h>\n\nbool isLeapYear(int year) {\n    if (year % 4 == 0) {\n        if (year % 100 == 0) {\n            if (year % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n```"
  },
  {
    "task": "Develop a script that categorizes an input number as positive, negative, or zero.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int number;\n\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &number);\n\n    if (number > 0) {\n        printf(\"The number is positive.\\n\");\n    } else if (number < 0) {\n        printf(\"The number is negative.\\n\");\n    } else {\n        printf(\"The number is zero.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a system that grants access only if a correct password and username are provided.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nint main() {\n    const char correctUsername[] = \"admin\";\n    const char correctPassword[] = \"password123\";\n    char inputUsername[50];\n    char inputPassword[50];\n\n    printf(\"Enter username: \");\n    scanf(\"%49s\", inputUsername);\n\n    printf(\"Enter password: \");\n    scanf(\"%49s\", inputPassword);\n\n    if (strcmp(inputUsername, correctUsername) == 0 && strcmp(inputPassword, correctPassword) == 0) {\n        printf(\"Access granted.\\n\");\n    } else {\n        printf(\"Access denied.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a program that outputs 'Fizz' for numbers divisible by 3, 'Buzz' for numbers divisible by 5, and 'FizzBuzz' for numbers divisible by both.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    for (int i = 1; i <= 100; i++) {\n        if (i % 3 == 0 && i % 5 == 0) {\n            printf(\"FizzBuzz\\n\");\n        } else if (i % 3 == 0) {\n            printf(\"Fizz\\n\");\n        } else if (i % 5 == 0) {\n            printf(\"Buzz\\n\");\n        } else {\n            printf(\"%d\\n\", i);\n        }\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function to determine if a character is a vowel or a consonant.",
    "code": "```c\n#include <stdio.h>\n#include <ctype.h>\n\nchar checkVowelOrConsonant(char ch) {\n    ch = tolower(ch);\n    if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') {\n        return 'V'; // Vowel\n    } else if ((ch >= 'a' && ch <= 'z')) {\n        return 'C'; // Consonant\n    } else {\n        return 'N'; // Not a letter\n    }\n}\n\nint main() {\n    char ch = 'A';\n    char result = checkVowelOrConsonant(ch);\n    if (result == 'V') {\n        printf(\"%c is a vowel.\\n\", ch);\n    } else if (result == 'C') {\n        printf(\"%c is a consonant.\\n\", ch);\n    } else {\n        printf(\"%c is not a valid letter.\\n\", ch);\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Create a program that assigns letter grades based on numerical scores.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int score;\n    char grade;\n\n    printf(\"Enter the numerical score: \");\n    scanf(\"%d\", &score);\n\n    if (score >= 90) {\n        grade = 'A';\n    } else if (score >= 80) {\n        grade = 'B';\n    } else if (score >= 70) {\n        grade = 'C';\n    } else if (score >= 60) {\n        grade = 'D';\n    } else {\n        grade = 'F';\n    }\n\n    printf(\"The letter grade is: %c\\n\", grade);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a routine that suggests clothing based on the current temperature.",
    "code": "```c\n#include <stdio.h>\n\nvoid suggestClothing(int temperature) {\n    if (temperature < 0) {\n        printf(\"Wear a heavy coat, scarf, and gloves.\\n\");\n    } else if (temperature >= 0 && temperature < 10) {\n        printf(\"Wear a coat and a hat.\\n\");\n    } else if (temperature >= 10 && temperature < 20) {\n        printf(\"Wear a jacket and long pants.\\n\");\n    } else if (temperature >= 20 && temperature < 30) {\n        printf(\"Wear a t-shirt and shorts.\\n\");\n    } else {\n        printf(\"Wear light clothing, like a tank top and shorts.\\n\");\n    }\n}\n\nint main() {\n    int currentTemperature;\n\n    printf(\"Enter the current temperature in degrees Celsius: \");\n    scanf(\"%d\", &currentTemperature);\n\n    suggestClothing(currentTemperature);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a system that checks if a user is an adult or a minor based on their age.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int age;\n    \n    printf(\"Enter your age: \");\n    scanf(\"%d\", &age);\n    \n    if (age >= 18) {\n        printf(\"You are an adult.\\n\");\n    } else {\n        printf(\"You are a minor.\\n\");\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Design a program that validates if a triangle can exist based on its side lengths.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    float side1, side2, side3;\n\n    printf(\"Enter the lengths of the three sides of the triangle: \");\n    scanf(\"%f %f %f\", &side1, &side2, &side3);\n\n    if ((side1 + side2 > side3) && (side1 + side3 > side2) && (side2 + side3 > side1)) {\n        printf(\"The triangle is valid.\\n\");\n    } else {\n        printf(\"The triangle is not valid.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that determines the largest of three input numbers.",
    "code": "```c\n#include <stdio.h>\n\nint findLargest(int a, int b, int c) {\n    if (a >= b && a >= c) {\n        return a;\n    } else if (b >= a && b >= c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\nint main() {\n    int num1 = 10, num2 = 20, num3 = 15;\n    int largest = findLargest(num1, num2, num3);\n    printf(\"The largest number is: %d\\n\", largest);\n    return 0;\n}\n```"
  },
  {
    "task": "Create a program that checks if a string is a palindrome.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nint main() {\n    char str[100];\n    int i, length;\n    int isPalindrome = 1;  // Assume it is a palindrome\n\n    printf(\"Enter a string: \");\n    scanf(\"%s\", str);\n\n    length = strlen(str);\n\n    for (i = 0; i < length / 2; i++) {\n        if (str[i] != str[length - i - 1]) {\n            isPalindrome = 0;  // Not a palindrome\n            break;\n        }\n    }\n\n    if (isPalindrome) {\n        printf(\"The string is a palindrome.\\n\");\n    } else {\n        printf(\"The string is not a palindrome.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a routine that calculates the total cost with a discount applied if applicable.",
    "code": "```c\n#include <stdio.h>\n\ndouble calculateTotalCost(double initialCost) {\n    double discountRate = 0.1; // 10% discount\n    double discountThreshold = 100.0; // Threshold for discount eligibility\n    double totalCost;\n\n    if (initialCost >= discountThreshold) {\n        totalCost = initialCost * (1 - discountRate);\n    } else {\n        totalCost = initialCost;\n    }\n\n    return totalCost;\n}\n\nint main() {\n    double initialCost = 120.0; // Example initial cost\n    double totalCost = calculateTotalCost(initialCost);\n    printf(\"Total cost after discount (if applicable): %.2f\\n\", totalCost);\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a system that checks if a person is eligible to vote based on age and citizenship.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int age;\n    char isCitizen;\n\n    printf(\"Enter age: \");\n    scanf(\"%d\", &age);\n\n    printf(\"Are you a citizen? (y/n): \");\n    scanf(\" %c\", &isCitizen);\n\n    if (age >= 18 && (isCitizen == 'y' || isCitizen == 'Y')) {\n        printf(\"You are eligible to vote.\\n\");\n    } else {\n        printf(\"You are not eligible to vote.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a function that returns the day of the week given a number from 1 to 7.",
    "code": "```c\n#include <stdio.h>\n\nconst char* getDayOfWeek(int day) {\n    if (day == 1) {\n        return \"Monday\";\n    } else if (day == 2) {\n        return \"Tuesday\";\n    } else if (day == 3) {\n        return \"Wednesday\";\n    } else if (day == 4) {\n        return \"Thursday\";\n    } else if (day == 5) {\n        return \"Friday\";\n    } else if (day == 6) {\n        return \"Saturday\";\n    } else if (day == 7) {\n        return \"Sunday\";\n    } else {\n        return \"Invalid day\";\n    }\n}\n\nint main() {\n    int day;\n    printf(\"Enter a number (1-7): \");\n    scanf(\"%d\", &day);\n    printf(\"Day of the week: %s\\n\", getDayOfWeek(day));\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program that determines if a word is found within a given sentence.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nint main() {\n    char sentence[1000];\n    char word[100];\n\n    printf(\"Enter a sentence: \");\n    fgets(sentence, sizeof(sentence), stdin);\n\n    printf(\"Enter a word to search for: \");\n    fgets(word, sizeof(word), stdin);\n\n    // Remove newline characters, if any\n    sentence[strcspn(sentence, \"\\n\")] = 0;\n    word[strcspn(word, \"\\n\")] = 0;\n\n    if (strstr(sentence, word) != NULL) {\n        printf(\"The word '%s' is found in the sentence.\\n\", word);\n    } else {\n        printf(\"The word '%s' is not found in the sentence.\\n\", word);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a script that checks if a number is within a specified range.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int number, lowerBound, upperBound;\n    \n    printf(\"Enter a number: \");\n    scanf(\"%d\", &number);\n    \n    printf(\"Enter the lower bound: \");\n    scanf(\"%d\", &lowerBound);\n    \n    printf(\"Enter the upper bound: \");\n    scanf(\"%d\", &upperBound);\n    \n    if (number >= lowerBound && number <= upperBound) {\n        printf(\"The number %d is within the range [%d, %d].\\n\", number, lowerBound, upperBound);\n    } else {\n        printf(\"The number %d is not within the range [%d, %d].\\n\", number, lowerBound, upperBound);\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Develop a routine to decide if a user input is a valid email address.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n#include <ctype.h>\n\nbool isValidEmail(const char *email) {\n    int atCount = 0;\n    int dotCount = 0;\n    const char *atPos = NULL;\n    const char *dotPos = NULL;\n\n    if (!email || strlen(email) < 3) {\n        return false;\n    }\n    \n    for (const char *ptr = email; *ptr != '\\0'; ++ptr) {\n        if (*ptr == '@') {\n            atCount++;\n            atPos = ptr;\n        } else if (*ptr == '.') {\n            dotCount++;\n            dotPos = ptr;\n        } else if (!isalnum(*ptr) && *ptr != '_' && *ptr != '-') {\n            return false;\n        }\n    }\n\n    if (atCount != 1 || dotCount < 1) {\n        return false;\n    }\n\n    if (atPos > dotPos || atPos == email || dotPos == email + strlen(email) - 1) {\n        return false;\n    }\n\n    return true;\n}\n\nint main() {\n    char email[256];\n    printf(\"Enter an email address: \");\n    if (scanf(\"%255s\", email) != 1) {\n        printf(\"Invalid input.\\n\");\n        return 1;\n    }\n\n    if (isValidEmail(email)) {\n        printf(\"Valid email address.\\n\");\n    } else {\n        printf(\"Invalid email address.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a program that categorizes a number as small, medium, or large.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int number;\n\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &number);\n\n    if (number < 10) {\n        printf(\"The number is small.\\n\");\n    } else if (number <= 100) {\n        printf(\"The number is medium.\\n\");\n    } else {\n        printf(\"The number is large.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a function that outputs the season based on the month provided.",
    "code": "```c\n#include <stdio.h>\n\nconst char* getSeason(int month) {\n    if (month == 12 || month == 1 || month == 2) {\n        return \"Winter\";\n    } else if (month >= 3 && month <= 5) {\n        return \"Spring\";\n    } else if (month >= 6 && month <= 8) {\n        return \"Summer\";\n    } else if (month >= 9 && month <= 11) {\n        return \"Autumn\";\n    } else {\n        return \"Invalid month\";\n    }\n}\n\nint main() {\n    int month;\n    printf(\"Enter the month number (1-12): \");\n    scanf(\"%d\", &month);\n    printf(\"Season: %s\\n\", getSeason(month));\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program that checks if a string contains only alphabetic characters.",
    "code": "```c\n#include <stdio.h>\n#include <ctype.h>\n\nint isAlphabetic(const char *str) {\n    while (*str) {\n        if (!isalpha(*str)) {\n            return 0;\n        }\n        str++;\n    }\n    return 1;\n}\n\nint main() {\n    const char *testString = \"HelloWorld\";\n    if (isAlphabetic(testString)) {\n        printf(\"The string contains only alphabetic characters.\\n\");\n    } else {\n        printf(\"The string contains non-alphabetic characters.\\n\");\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Create a routine that decides the type of triangle based on its angles.",
    "code": "```c\n#include <stdio.h>\n\nconst char* triangleType(int angle1, int angle2, int angle3) {\n    if (angle1 + angle2 + angle3 != 180) {\n        return \"Not a triangle\";\n    }\n    \n    if (angle1 <= 0 || angle2 <= 0 || angle3 <= 0) {\n        return \"Invalid angles\";\n    }\n\n    if (angle1 == 90 || angle2 == 90 || angle3 == 90) {\n        return \"Right triangle\";\n    }\n    \n    if (angle1 > 90 || angle2 > 90 || angle3 > 90) {\n        return \"Obtuse triangle\";\n    }\n\n    return \"Acute triangle\";\n}\n\nint main() {\n    int angle1, angle2, angle3;\n    printf(\"Enter the three angles of the triangle: \");\n    scanf(\"%d %d %d\", &angle1, &angle2, &angle3);\n\n    printf(\"The triangle is a %s.\\n\", triangleType(angle1, angle2, angle3));\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a program that suggests a meal based on the time of day.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int hour;\n    printf(\"Enter the current hour (0-23): \");\n    scanf(\"%d\", &hour);\n\n    if (hour >= 5 && hour < 11) {\n        printf(\"Suggestion: Breakfast\\n\");\n    } else if (hour >= 11 && hour < 15) {\n        printf(\"Suggestion: Lunch\\n\");\n    } else if (hour >= 15 && hour < 21) {\n        printf(\"Suggestion: Dinner\\n\");\n    } else {\n        printf(\"Suggestion: Snack\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function that determines if a point lies within a circle given its radius.",
    "code": "```c\n#include <stdio.h>\n\nint isPointInsideCircle(double x, double y, double radius) {\n    if ((x * x + y * y) <= (radius * radius)) {\n        return 1; // Point is inside the circle\n    } else {\n        return 0; // Point is outside the circle\n    }\n}\n\nint main() {\n    double x, y, radius;\n    printf(\"Enter the x coordinate of the point: \");\n    scanf(\"%lf\", &x);\n    printf(\"Enter the y coordinate of the point: \");\n    scanf(\"%lf\", &y);\n    printf(\"Enter the radius of the circle: \");\n    scanf(\"%lf\", &radius);\n\n    if (isPointInsideCircle(x, y, radius)) {\n        printf(\"The point is inside the circle.\\n\");\n    } else {\n        printf(\"The point is outside the circle.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a script that calculates overtime pay based on hours worked.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    float hoursWorked, overtimePay;\n    const float regularRate = 15.0;\n    const float overtimeRate = 22.5;\n    const int regularHours = 40;\n\n    printf(\"Enter hours worked: \");\n    scanf(\"%f\", &hoursWorked);\n\n    if (hoursWorked > regularHours) {\n        overtimePay = (hoursWorked - regularHours) * overtimeRate;\n    } else {\n        overtimePay = 0.0;\n    }\n\n    printf(\"Overtime pay is: $%.2f\\n\", overtimePay);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program that checks if two strings are anagrams of each other.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nbool areAnagrams(char *str1, char *str2) {\n    int count[256] = {0};\n    \n    if (strlen(str1) != strlen(str2)) {\n        return false;\n    }\n\n    for (int i = 0; str1[i] && str2[i]; i++) {\n        count[(unsigned char)str1[i]]++;\n        count[(unsigned char)str2[i]]--;\n    }\n\n    for (int i = 0; i < 256; i++) {\n        if (count[i] != 0) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nint main() {\n    char str1[100], str2[100];\n\n    printf(\"Enter the first string: \");\n    scanf(\"%s\", str1);\n\n    printf(\"Enter the second string: \");\n    scanf(\"%s\", str2);\n\n    if (areAnagrams(str1, str2)) {\n        printf(\"The strings are anagrams.\\n\");\n    } else {\n        printf(\"The strings are not anagrams.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a function that classifies numbers as prime or composite.",
    "code": "```c\n#include <stdio.h>\n#include <stdbool.h>\n\nbool isPrime(int num) {\n    if (num <= 1) return false;\n    if (num <= 3) return true;\n    if (num % 2 == 0 || num % 3 == 0) return false;\n    \n    for (int i = 5; i * i <= num; i += 6) {\n        if (num % i == 0 || num % (i + 2) == 0) return false;\n    }\n    return true;\n}\n\nvoid classifyNumber(int num) {\n    if (isPrime(num)) {\n        printf(\"%d is a prime number.\\n\", num);\n    } else {\n        printf(\"%d is a composite number.\\n\", num);\n    }\n}\n\nint main() {\n    int number;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &number);\n    classifyNumber(number);\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a routine to determine if a number is a power of two.",
    "code": "```c\n#include <stdio.h>\n#include <stdbool.h>\n\nbool isPowerOfTwo(int n) {\n    if (n <= 0) {\n        return false;\n    }\n    return (n & (n - 1)) == 0;\n}\n\nint main() {\n    int number;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &number);\n\n    if (isPowerOfTwo(number)) {\n        printf(\"%d is a power of two.\\n\", number);\n    } else {\n        printf(\"%d is not a power of two.\\n\", number);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a program that checks if a list is sorted in ascending order.",
    "code": "```c\n#include <stdio.h>\n\nint isSorted(int arr[], int size) {\n    for (int i = 0; i < size - 1; i++) {\n        if (arr[i] > arr[i + 1]) {\n            return 0;\n        }\n    }\n    return 1;\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n\n    if (isSorted(arr, size)) {\n        printf(\"The list is sorted in ascending order.\\n\");\n    } else {\n        printf(\"The list is not sorted in ascending order.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a function that suggests a sport based on the weather conditions.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nconst char* suggestSport(const char* weather) {\n    if (strcmp(weather, \"sunny\") == 0) {\n        return \"Tennis\";\n    } else if (strcmp(weather, \"rainy\") == 0) {\n        return \"Swimming\";\n    } else if (strcmp(weather, \"windy\") == 0) {\n        return \"Kite Surfing\";\n    } else if (strcmp(weather, \"snowy\") == 0) {\n        return \"Skiing\";\n    } else {\n        return \"Indoor Gym\";\n    }\n}\n\nint main() {\n    const char* weather = \"sunny\";\n    printf(\"Suggested sport for %s weather: %s\\n\", weather, suggestSport(weather));\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program that determines if an entered date is valid.",
    "code": "```c\n#include <stdio.h>\n\nint isLeapYear(int year) {\n    if ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)) {\n        return 1;\n    }\n    return 0;\n}\n\nint isValidDate(int day, int month, int year) {\n    if (year < 1) return 0;\n    \n    if (month < 1 || month > 12) return 0;\n    \n    int daysInMonth;\n    switch (month) {\n        case 2:\n            daysInMonth = isLeapYear(year) ? 29 : 28;\n            break;\n        case 4: case 6: case 9: case 11:\n            daysInMonth = 30;\n            break;\n        default:\n            daysInMonth = 31;\n    }\n    \n    if (day < 1 || day > daysInMonth) return 0;\n    \n    return 1;\n}\n\nint main() {\n    int day, month, year;\n    printf(\"Enter date (DD MM YYYY): \");\n    scanf(\"%d %d %d\", &day, &month, &year);\n    \n    if (isValidDate(day, month, year)) {\n        printf(\"The entered date is valid.\\n\");\n    } else {\n        printf(\"The entered date is invalid.\\n\");\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Create a script to decide which of two products to buy based on price and reviews.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    float price1, price2;\n    float reviews1, reviews2;\n\n    printf(\"Enter the price of product 1: \");\n    scanf(\"%f\", &price1);\n    printf(\"Enter the reviews score of product 1: \");\n    scanf(\"%f\", &reviews1);\n\n    printf(\"Enter the price of product 2: \");\n    scanf(\"%f\", &price2);\n    printf(\"Enter the reviews score of product 2: \");\n    scanf(\"%f\", &reviews2);\n\n    if (price1 < price2) {\n        if (reviews1 >= reviews2) {\n            printf(\"Buy product 1\\n\");\n        } else {\n            printf(\"Buy product 2\\n\");\n        }\n    } else if (price2 < price1) {\n        if (reviews2 >= reviews1) {\n            printf(\"Buy product 2\\n\");\n        } else {\n            printf(\"Buy product 1\\n\");\n        }\n    } else {\n        if (reviews1 > reviews2) {\n            printf(\"Buy product 1\\n\");\n        } else if (reviews2 > reviews1) {\n            printf(\"Buy product 2\\n\");\n        } else {\n            printf(\"Both products are equally good\\n\");\n        }\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a function that categorizes a person\u2019s BMI as underweight, normal, overweight, or obese.",
    "code": "```c\n#include <stdio.h>\n\nconst char* categorizeBMI(float bmi) {\n    if (bmi < 18.5) {\n        return \"Underweight\";\n    } else if (bmi >= 18.5 && bmi < 24.9) {\n        return \"Normal\";\n    } else if (bmi >= 25 && bmi < 29.9) {\n        return \"Overweight\";\n    } else {\n        return \"Obese\";\n    }\n}\n\nint main() {\n    float bmi;\n    printf(\"Enter BMI: \");\n    scanf(\"%f\", &bmi);\n    printf(\"BMI Category: %s\\n\", categorizeBMI(bmi));\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a program that checks if a credit card number is valid using the Luhn algorithm.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\n// Function to check if the credit card number is valid using the Luhn algorithm\nint isValidCreditCard(const char *cardNumber) {\n    int length = strlen(cardNumber);\n    int sum = 0;\n    int doubleDigit = 0;\n    \n    // Traverse the card number from the end to the start\n    for (int i = length - 1; i >= 0; i--) {\n        if (!isdigit(cardNumber[i])) {\n            return 0; // Invalid character detected\n        }\n        \n        int digit = cardNumber[i] - '0';\n        \n        if (doubleDigit) {\n            digit *= 2;\n            if (digit > 9) {\n                digit -= 9;\n            }\n        }\n        \n        sum += digit;\n        doubleDigit = !doubleDigit;\n    }\n    \n    return (sum % 10) == 0;\n}\n\nint main() {\n    char cardNumber[20];\n\n    printf(\"Enter credit card number: \");\n    scanf(\"%19s\", cardNumber);\n\n    if (isValidCreditCard(cardNumber)) {\n        printf(\"Credit card number is valid.\\n\");\n    } else {\n        printf(\"Credit card number is invalid.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a routine that outputs a greeting based on the current time of day.",
    "code": "```c\n#include <stdio.h>\n#include <time.h>\n\nvoid printGreeting() {\n    time_t currentTime;\n    struct tm *localTime;\n\n    time(&currentTime);\n    localTime = localtime(&currentTime);\n\n    int hour = localTime->tm_hour;\n\n    if (hour >= 5 && hour < 12) {\n        printf(\"Good morning!\\n\");\n    } else if (hour >= 12 && hour < 18) {\n        printf(\"Good afternoon!\\n\");\n    } else if (hour >= 18 && hour < 22) {\n        printf(\"Good evening!\\n\");\n    } else {\n        printf(\"Good night!\\n\");\n    }\n}\n\nint main() {\n    printGreeting();\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program that determines if a given word can be formed with a set of letters.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nint canFormWord(const char *word, const char *letters) {\n    int letterCount[256] = {0};\n    \n    for (int i = 0; letters[i] != '\\0'; i++) {\n        letterCount[(unsigned char)letters[i]]++;\n    }\n    \n    for (int i = 0; word[i] != '\\0'; i++) {\n        if (letterCount[(unsigned char)word[i]] == 0) {\n            return 0;\n        }\n        letterCount[(unsigned char)word[i]]--;\n    }\n    \n    return 1;\n}\n\nint main() {\n    const char *word = \"hello\";\n    const char *letters = \"hlleo\";\n    \n    if (canFormWord(word, letters)) {\n        printf(\"The word \\\"%s\\\" can be formed with the letters \\\"%s\\\".\\n\", word, letters);\n    } else {\n        printf(\"The word \\\"%s\\\" cannot be formed with the letters \\\"%s\\\".\\n\", word, letters);\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Create a function that outputs the appropriate greeting based on the day of the week.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nvoid printGreeting(const char* dayOfWeek) {\n    if (strcmp(dayOfWeek, \"Monday\") == 0) {\n        printf(\"Start the week with a smile!\\n\");\n    } else if (strcmp(dayOfWeek, \"Tuesday\") == 0) {\n        printf(\"Keep going!\\n\");\n    } else if (strcmp(dayOfWeek, \"Wednesday\") == 0) {\n        printf(\"Halfway there!\\n\");\n    } else if (strcmp(dayOfWeek, \"Thursday\") == 0) {\n        printf(\"Almost the weekend!\\n\");\n    } else if (strcmp(dayOfWeek, \"Friday\") == 0) {\n        printf(\"It's Friday! Time to relax!\\n\");\n    } else if (strcmp(dayOfWeek, \"Saturday\") == 0) {\n        printf(\"Enjoy your weekend!\\n\");\n    } else if (strcmp(dayOfWeek, \"Sunday\") == 0) {\n        printf(\"Rest and recharge!\\n\");\n    } else {\n        printf(\"Invalid day of the week.\\n\");\n    }\n}\n\nint main() {\n    printGreeting(\"Monday\");\n    printGreeting(\"Friday\");\n    printGreeting(\"Sunday\");\n    printGreeting(\"Invalid\");\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a system to determine if a person qualifies for a senior citizen discount.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int age;\n    printf(\"Enter the person's age: \");\n    scanf(\"%d\", &age);\n\n    if (age >= 65) {\n        printf(\"The person qualifies for a senior citizen discount.\\n\");\n    } else {\n        printf(\"The person does not qualify for a senior citizen discount.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function that checks if a number is a perfect square.",
    "code": "```c\n#include <stdio.h>\n#include <math.h>\n\nint isPerfectSquare(int num) {\n    if (num < 0) return 0;\n    int root = (int)sqrt(num);\n    if (root * root == num) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\n\nint main() {\n    int number = 16;\n    if (isPerfectSquare(number)) {\n        printf(\"%d is a perfect square.\\n\", number);\n    } else {\n        printf(\"%d is not a perfect square.\\n\", number);\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Design a program that outputs the correct shipping cost based on weight and distance.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    double weight, distance, cost;\n\n    printf(\"Enter the weight of the package (in kg): \");\n    scanf(\"%lf\", &weight);\n    printf(\"Enter the distance (in km): \");\n    scanf(\"%lf\", &distance);\n\n    if (weight <= 5) {\n        if (distance <= 100) {\n            cost = 5.0;\n        } else if (distance <= 500) {\n            cost = 10.0;\n        } else {\n            cost = 20.0;\n        }\n    } else if (weight <= 20) {\n        if (distance <= 100) {\n            cost = 10.0;\n        } else if (distance <= 500) {\n            cost = 20.0;\n        } else {\n            cost = 30.0;\n        }\n    } else {\n        if (distance <= 100) {\n            cost = 20.0;\n        } else if (distance <= 500) {\n            cost = 30.0;\n        } else {\n            cost = 50.0;\n        }\n    }\n\n    printf(\"The shipping cost is: $%.2f\\n\", cost);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a routine that chooses the correct pronoun based on gender input.",
    "code": "```c\n#include <stdio.h>\n\nconst char* choosePronoun(const char* gender) {\n    if (gender == NULL) {\n        return \"unknown\";\n    } else if (strcmp(gender, \"male\") == 0) {\n        return \"he\";\n    } else if (strcmp(gender, \"female\") == 0) {\n        return \"she\";\n    } else {\n        return \"they\";\n    }\n}\n\nint main() {\n    printf(\"%s\\n\", choosePronoun(\"male\"));   // Outputs: he\n    printf(\"%s\\n\", choosePronoun(\"female\")); // Outputs: she\n    printf(\"%s\\n\", choosePronoun(\"other\"));  // Outputs: they\n    printf(\"%s\\n\", choosePronoun(NULL));     // Outputs: unknown\n    return 0;\n}\n```"
  },
  {
    "task": "Create a program that checks if a user input is a palindrome number.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int num, reversedNum = 0, remainder, originalNum;\n\n    printf(\"Enter an integer: \");\n    scanf(\"%d\", &num);\n\n    originalNum = num;\n\n    while (num != 0) {\n        remainder = num % 10;\n        reversedNum = reversedNum * 10 + remainder;\n        num /= 10;\n    }\n\n    if (originalNum == reversedNum)\n        printf(\"%d is a palindrome number.\\n\", originalNum);\n    else\n        printf(\"%d is not a palindrome number.\\n\", originalNum);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a script to decide if a number is a perfect number.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int number, sum = 0;\n    \n    printf(\"Enter a number: \");\n    scanf(\"%d\", &number);\n    \n    for (int i = 1; i < number; i++) {\n        if (number % i == 0) {\n            sum += i;\n        }\n    }\n    \n    if (sum == number) {\n        printf(\"%d is a perfect number.\\n\", number);\n    } else {\n        printf(\"%d is not a perfect number.\\n\", number);\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Implement a system that determines the winner in a rock-paper-scissors game.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nconst char *determine_winner(const char *player1, const char *player2) {\n    if (strcmp(player1, player2) == 0) {\n        return \"Draw\";\n    } else if ((strcmp(player1, \"rock\") == 0 && strcmp(player2, \"scissors\") == 0) ||\n               (strcmp(player1, \"scissors\") == 0 && strcmp(player2, \"paper\") == 0) ||\n               (strcmp(player1, \"paper\") == 0 && strcmp(player2, \"rock\") == 0)) {\n        return \"Player 1 wins\";\n    } else {\n        return \"Player 2 wins\";\n    }\n}\n\nint main() {\n    char player1[10];\n    char player2[10];\n    \n    printf(\"Enter choice for Player 1 (rock, paper, scissors): \");\n    scanf(\"%s\", player1);\n    \n    printf(\"Enter choice for Player 2 (rock, paper, scissors): \");\n    scanf(\"%s\", player2);\n    \n    printf(\"%s\\n\", determine_winner(player1, player2));\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Design a function that suggests a movie genre based on user mood.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nconst char* suggestMovieGenre(const char* mood) {\n    if (strcmp(mood, \"happy\") == 0) {\n        return \"Comedy\";\n    } else if (strcmp(mood, \"sad\") == 0) {\n        return \"Drama\";\n    } else if (strcmp(mood, \"adventurous\") == 0) {\n        return \"Action\";\n    } else if (strcmp(mood, \"romantic\") == 0) {\n        return \"Romance\";\n    } else if (strcmp(mood, \"curious\") == 0) {\n        return \"Mystery\";\n    } else {\n        return \"Documentary\";\n    }\n}\n\nint main() {\n    const char* mood = \"happy\";\n    printf(\"Suggested genre: %s\\n\", suggestMovieGenre(mood));\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program that checks if a file extension is valid for an image file.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nint main() {\n    char filename[100];\n    printf(\"Enter the filename: \");\n    scanf(\"%s\", filename);\n\n    char *validExtensions[] = {\".jpg\", \".jpeg\", \".png\", \".gif\", \".bmp\", \".tiff\"};\n    int isValid = 0;\n\n    for (int i = 0; i < sizeof(validExtensions) / sizeof(validExtensions[0]); i++) {\n        if (strstr(filename, validExtensions[i]) != NULL) {\n            isValid = 1;\n            break;\n        }\n    }\n\n    if (isValid) {\n        printf(\"The file extension is valid for an image file.\\n\");\n    } else {\n        printf(\"The file extension is not valid for an image file.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a routine that decides the appropriate currency symbol based on country.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nconst char* getCurrencySymbol(const char* country) {\n    if (strcmp(country, \"United States\") == 0) {\n        return \"$\";\n    } else if (strcmp(country, \"United Kingdom\") == 0) {\n        return \"\u00a3\";\n    } else if (strcmp(country, \"Japan\") == 0) {\n        return \"\u00a5\";\n    } else if (strcmp(country, \"European Union\") == 0) {\n        return \"\u20ac\";\n    } else {\n        return \"Unknown\";\n    }\n}\n\nint main() {\n    const char* country = \"Japan\";\n    printf(\"The currency symbol for %s is %s\\n\", country, getCurrencySymbol(country));\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a function that determines if a string is a valid palindrome ignoring spaces and punctuation.",
    "code": "```c\n#include <stdio.h>\n#include <ctype.h>\n#include <stdbool.h>\n#include <string.h>\n\nbool isPalindrome(const char *str) {\n    int left = 0;\n    int right = strlen(str) - 1;\n    \n    while (left < right) {\n        while (left < right && !isalnum((unsigned char)str[left])) {\n            left++;\n        }\n        while (left < right && !isalnum((unsigned char)str[right])) {\n            right--;\n        }\n        \n        if (tolower((unsigned char)str[left]) != tolower((unsigned char)str[right])) {\n            return false;\n        }\n        \n        left++;\n        right--;\n    }\n    \n    return true;\n}\n\nint main() {\n    const char *testString = \"A man, a plan, a canal, Panama\";\n    if (isPalindrome(testString)) {\n        printf(\"The string is a palindrome.\\n\");\n    } else {\n        printf(\"The string is not a palindrome.\\n\");\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a program that checks if a number is in the Fibonacci sequence.",
    "code": "```c\n#include <stdio.h>\n\nint isFibonacci(int n) {\n    int a = 0, b = 1, c = 0;\n    if (n == 0 || n == 1) {\n        return 1;\n    }\n    while (c < n) {\n        c = a + b;\n        a = b;\n        b = c;\n    }\n    return c == n;\n}\n\nint main() {\n    int num;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &num);\n\n    if (isFibonacci(num)) {\n        printf(\"%d is in the Fibonacci sequence.\\n\", num);\n    } else {\n        printf(\"%d is not in the Fibonacci sequence.\\n\", num);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a script to calculate the correct tip based on service quality rating.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    double billAmount, tip;\n    int serviceQuality;\n\n    printf(\"Enter the bill amount: \");\n    scanf(\"%lf\", &billAmount);\n\n    printf(\"Rate the service quality (1-Poor, 2-Good, 3-Excellent): \");\n    scanf(\"%d\", &serviceQuality);\n\n    if (serviceQuality == 1) {\n        tip = billAmount * 0.10; // 10% tip for Poor service\n    } else if (serviceQuality == 2) {\n        tip = billAmount * 0.15; // 15% tip for Good service\n    } else if (serviceQuality == 3) {\n        tip = billAmount * 0.20; // 20% tip for Excellent service\n    } else {\n        printf(\"Invalid service quality rating.\\n\");\n        return 1;\n    }\n\n    printf(\"The calculated tip is: %.2f\\n\", tip);\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that determines if a year is a century year.",
    "code": "```c\n#include <stdbool.h>\n\nbool isCenturyYear(int year) {\n    if (year % 100 == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n```"
  },
  {
    "task": "Create a program that checks if a date falls on a weekend.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int day, month, year;\n    \n    printf(\"Enter date (dd mm yyyy): \");\n    scanf(\"%d %d %d\", &day, &month, &year);\n\n    // Zeller's Congruence algorithm for calculating the day of the week\n    if (month < 3) {\n        month += 12;\n        year -= 1;\n    }\n\n    int k = year % 100;\n    int j = year / 100;\n    int h = (day + 13 * (month + 1) / 5 + k + k / 4 + j / 4 + 5 * j) % 7;\n\n    // Day of week: Saturday = 0, Sunday = 1, ..., Friday = 6\n    if (h == 0 || h == 1) {\n        printf(\"The date falls on a weekend.\\n\");\n    } else {\n        printf(\"The date does not fall on a weekend.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a routine that suggests a book based on genre preference.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nvoid suggestBook(const char *genre) {\n    if (strcmp(genre, \"Science Fiction\") == 0) {\n        printf(\"Suggested Book: 'Dune' by Frank Herbert\\n\");\n    } else if (strcmp(genre, \"Fantasy\") == 0) {\n        printf(\"Suggested Book: 'The Hobbit' by J.R.R. Tolkien\\n\");\n    } else if (strcmp(genre, \"Mystery\") == 0) {\n        printf(\"Suggested Book: 'The Girl with the Dragon Tattoo' by Stieg Larsson\\n\");\n    } else if (strcmp(genre, \"Romance\") == 0) {\n        printf(\"Suggested Book: 'Pride and Prejudice' by Jane Austen\\n\");\n    } else if (strcmp(genre, \"Horror\") == 0) {\n        printf(\"Suggested Book: 'It' by Stephen King\\n\");\n    } else {\n        printf(\"No suggestion available for genre: %s\\n\", genre);\n    }\n}\n\nint main() {\n    char genre[50];\n    \n    printf(\"Enter your preferred genre: \");\n    fgets(genre, sizeof(genre), stdin);\n    // Remove newline character from input\n    genre[strcspn(genre, \"\\n\")] = 0;\n    \n    suggestBook(genre);\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Implement a system that determines if a student passes or fails based on their grades.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    float grade;\n    \n    printf(\"Enter the student's grade: \");\n    scanf(\"%f\", &grade);\n    \n    if (grade >= 50.0) {\n        printf(\"The student passes.\\n\");\n    } else {\n        printf(\"The student fails.\\n\");\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Design a function to validate if a string is a valid URL.",
    "code": "```c\n#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n\nbool isValidURL(const char *url) {\n    if (url == NULL) {\n        return false;\n    }\n\n    // Check for a valid scheme\n    if (strncmp(url, \"http://\", 7) != 0 && strncmp(url, \"https://\", 8) != 0) {\n        return false;\n    }\n    \n    // Check for presence of at least one dot in the rest of the URL\n    const char *domainStart = strchr(url, ':') + 3; // Skip scheme\n    if (domainStart == NULL || strchr(domainStart, '.') == NULL) {\n        return false;\n    }\n    \n    return true;\n}\n\nint main() {\n    const char *testURL1 = \"https://example.com\";\n    const char *testURL2 = \"ftp://example.com\";\n    \n    printf(\"URL 1 is valid: %s\\n\", isValidURL(testURL1) ? \"true\" : \"false\");\n    printf(\"URL 2 is valid: %s\\n\", isValidURL(testURL2) ? \"true\" : \"false\");\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Write a program that checks if a point is inside a rectangle given its coordinates.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    double x, y;\n    double x_min = 1.0, x_max = 5.0;\n    double y_min = 1.0, y_max = 5.0;\n\n    printf(\"Enter the x coordinate of the point: \");\n    scanf(\"%lf\", &x);\n    printf(\"Enter the y coordinate of the point: \");\n    scanf(\"%lf\", &y);\n\n    if (x >= x_min && x <= x_max && y >= y_min && y <= y_max) {\n        printf(\"The point is inside the rectangle.\\n\");\n    } else {\n        printf(\"The point is outside the rectangle.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a script to determine if a word can be constructed from a given set of letters.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nint canConstructWord(const char *word, const char *letters) {\n    int letterCount[26] = {0};\n    for (int i = 0; letters[i] != '\\0'; i++) {\n        letterCount[letters[i] - 'a']++;\n    }\n    for (int i = 0; word[i] != '\\0'; i++) {\n        if (--letterCount[word[i] - 'a'] < 0) {\n            return 0;\n        }\n    }\n    return 1;\n}\n\nint main() {\n    char word[] = \"example\";\n    char letters[] = \"xplemae\";\n    \n    if (canConstructWord(word, letters)) {\n        printf(\"The word can be constructed from the given letters.\\n\");\n    } else {\n        printf(\"The word cannot be constructed from the given letters.\\n\");\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Develop a routine that calculates insurance premiums based on age and driving record.",
    "code": "```c\n#include <stdio.h>\n\ndouble calculatePremium(int age, int accidents) {\n    double basePremium = 1000.0;\n    double ageSurcharge = 0.0;\n    double accidentSurcharge = 0.0;\n\n    // Conditional branching based on age\n    if (age < 25) {\n        ageSurcharge = 300.0;\n    } else if (age >= 25 && age <= 60) {\n        ageSurcharge = 100.0;\n    } else {\n        ageSurcharge = 200.0;\n    }\n\n    // Conditional branching based on driving record (accidents)\n    if (accidents == 0) {\n        accidentSurcharge = 0.0;\n    } else if (accidents == 1) {\n        accidentSurcharge = 250.0;\n    } else {\n        accidentSurcharge = 500.0;\n    }\n\n    return basePremium + ageSurcharge + accidentSurcharge;\n}\n\nint main() {\n    int age, accidents;\n    printf(\"Enter age: \");\n    scanf(\"%d\", &age);\n    printf(\"Enter number of accidents: \");\n    scanf(\"%d\", &accidents);\n\n    double premium = calculatePremium(age, accidents);\n    printf(\"The insurance premium is: %.2f\\n\", premium);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a program that checks for palindrome sentences.",
    "code": "```c\n#include <stdio.h>\n#include <ctype.h>\n#include <string.h>\n\nint isPalindrome(char *str) {\n    int left = 0, right = strlen(str) - 1;\n    while (left < right) {\n        // Move left index to the next alphanumeric character\n        while (left < right && !isalnum(str[left])) left++;\n        // Move right index to the previous alphanumeric character\n        while (left < right && !isalnum(str[right])) right--;\n\n        // Compare characters in a case-insensitive manner\n        if (tolower(str[left]) != tolower(str[right])) {\n            return 0; // Not a palindrome\n        }\n        left++;\n        right--;\n    }\n    return 1; // Is a palindrome\n}\n\nint main() {\n    char input[1000];\n\n    printf(\"Enter a sentence: \");\n    fgets(input, sizeof(input), stdin);\n\n    if (isPalindrome(input)) {\n        printf(\"The sentence is a palindrome.\\n\");\n    } else {\n        printf(\"The sentence is not a palindrome.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a function to evaluate if a string contains balanced parentheses.",
    "code": "```c\n#include <stdbool.h>\n\nbool isBalanced(const char *str) {\n    int balance = 0;\n    for (int i = 0; str[i] != '\\0'; i++) {\n        if (str[i] == '(') {\n            balance++;\n        } else if (str[i] == ')') {\n            balance--;\n            if (balance < 0) {\n                return false;\n            }\n        }\n    }\n    return balance == 0;\n}\n```"
  },
  {
    "task": "Write a program that suggests a pet based on living conditions and preferences.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nint main() {\n    char livingCondition[20];\n    char preference[20];\n\n    printf(\"Enter your living condition (apartment/house): \");\n    scanf(\"%19s\", livingCondition);\n\n    printf(\"Do you prefer a low maintenance pet? (yes/no): \");\n    scanf(\"%19s\", preference);\n\n    if (strcmp(livingCondition, \"apartment\") == 0) {\n        if (strcmp(preference, \"yes\") == 0) {\n            printf(\"Suggested pet: Fish\\n\");\n        } else {\n            printf(\"Suggested pet: Cat\\n\");\n        }\n    } else if (strcmp(livingCondition, \"house\") == 0) {\n        if (strcmp(preference, \"yes\") == 0) {\n            printf(\"Suggested pet: Bird\\n\");\n        } else {\n            printf(\"Suggested pet: Dog\\n\");\n        }\n    } else {\n        printf(\"Invalid living condition input.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a routine that determines if a phone number is valid based on format.",
    "code": "```c\n#include <stdio.h>\n#include <ctype.h>\n#include <string.h>\n\nint isValidPhoneNumber(const char *phoneNumber) {\n    int length = strlen(phoneNumber);\n\n    if (length != 12) return 0;\n\n    for (int i = 0; i < length; i++) {\n        if (i == 3 || i == 7) {\n            if (phoneNumber[i] != '-') return 0;\n        } else {\n            if (!isdigit(phoneNumber[i])) return 0;\n        }\n    }\n    return 1;\n}\n\nint main() {\n    const char *testNumber = \"123-456-7890\";\n    if (isValidPhoneNumber(testNumber)) {\n        printf(\"The phone number is valid.\\n\");\n    } else {\n        printf(\"The phone number is invalid.\\n\");\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a function that checks if two rectangles overlap.",
    "code": "```c\n#include <stdbool.h>\n\ntypedef struct {\n    int x;\n    int y;\n    int width;\n    int height;\n} Rectangle;\n\nbool doRectanglesOverlap(Rectangle rect1, Rectangle rect2) {\n    if (rect1.x + rect1.width <= rect2.x || rect2.x + rect2.width <= rect1.x) {\n        return false;\n    }\n    if (rect1.y + rect1.height <= rect2.y || rect2.y + rect2.height <= rect1.y) {\n        return false;\n    }\n    return true;\n}\n```"
  },
  {
    "task": "Implement a program that chooses a beverage based on user input time.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int hour;\n    printf(\"Enter the hour of the day (0-23): \");\n    scanf(\"%d\", &hour);\n\n    if (hour >= 0 && hour < 12) {\n        printf(\"Good morning! How about some coffee?\\n\");\n    } else if (hour >= 12 && hour < 17) {\n        printf(\"Good afternoon! Maybe you'd like some tea?\\n\");\n    } else if (hour >= 17 && hour < 21) {\n        printf(\"Good evening! How about some juice?\\n\");\n    } else if (hour >= 21 && hour <= 23) {\n        printf(\"Good night! Time for some water.\\n\");\n    } else {\n        printf(\"Invalid hour entered.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a script to determine if a URL is secure (HTTPS).",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nint main() {\n    char url[256];\n    printf(\"Enter a URL: \");\n    scanf(\"%255s\", url);\n\n    if (strncmp(url, \"https://\", 8) == 0) {\n        printf(\"The URL is secure.\\n\");\n    } else {\n        printf(\"The URL is not secure.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that outputs different messages based on the input number's divisibility.",
    "code": "```c\n#include <stdio.h>\n\nvoid checkDivisibility(int number) {\n    if (number % 3 == 0 && number % 5 == 0) {\n        printf(\"The number is divisible by both 3 and 5.\\n\");\n    } else if (number % 3 == 0) {\n        printf(\"The number is divisible by 3.\\n\");\n    } else if (number % 5 == 0) {\n        printf(\"The number is divisible by 5.\\n\");\n    } else {\n        printf(\"The number is not divisible by 3 or 5.\\n\");\n    }\n}\n\nint main() {\n    int num;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &num);\n    checkDivisibility(num);\n    return 0;\n}\n```"
  },
  {
    "task": "Create a program to decide if a person should bring an umbrella based on the weather forecast.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nint main() {\n    char weather[20];\n\n    printf(\"Enter the weather forecast (e.g., sunny, rainy, cloudy): \");\n    scanf(\"%19s\", weather);\n\n    if (strcmp(weather, \"rainy\") == 0) {\n        printf(\"You should bring an umbrella.\\n\");\n    } else {\n        printf(\"You do not need to bring an umbrella.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a routine that checks if a chess move is valid.",
    "code": "```c\n#include <stdbool.h>\n#include <stdio.h>\n\nbool isValidMove(char piece, int startX, int startY, int endX, int endY) {\n    int dx = endX - startX;\n    int dy = endY - startY;\n    \n    switch (piece) {\n        case 'P': // Pawn\n            if (dy == 1 && dx == 0) return true;\n            if (dy == 1 && (dx == 1 || dx == -1)) return true;\n            break;\n        case 'R': // Rook\n            if (dx == 0 || dy == 0) return true;\n            break;\n        case 'N': // Knight\n            if ((dx * dx + dy * dy) == 5) return true;\n            break;\n        case 'B': // Bishop\n            if (abs(dx) == abs(dy)) return true;\n            break;\n        case 'Q': // Queen\n            if (dx == 0 || dy == 0 || abs(dx) == abs(dy)) return true;\n            break;\n        case 'K': // King\n            if ((abs(dx) <= 1) && (abs(dy) <= 1)) return true;\n            break;\n        default:\n            return false;\n    }\n\n    return false;\n}\n\nint main() {\n    char piece = 'K';\n    int startX = 4, startY = 4, endX = 5, endY = 5;\n    \n    if (isValidMove(piece, startX, startY, endX, endY)) {\n        printf(\"The move is valid.\\n\");\n    } else {\n        printf(\"The move is invalid.\\n\");\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Implement a program that outputs the number of days in a given month.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int month;\n    printf(\"Enter month (1-12): \");\n    scanf(\"%d\", &month);\n\n    if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        printf(\"31 days\\n\");\n    } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n        printf(\"30 days\\n\");\n    } else if (month == 2) {\n        printf(\"28 or 29 days\\n\");\n    } else {\n        printf(\"Invalid month\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a function that validates if a string is a valid hexadecimal number.",
    "code": "```c\n#include <stdio.h>\n#include <stdbool.h>\n#include <ctype.h>\n\nbool isValidHexadecimal(const char *s) {\n    if (s == NULL || *s == '\\0') {\n        return false;\n    }\n    if (*s == '0' && (*(s+1) == 'x' || *(s+1) == 'X')) {\n        s += 2;\n    }\n    if (*s == '\\0') {\n        return false;\n    }\n    while (*s) {\n        if (!isxdigit((unsigned char)*s)) {\n            return false;\n        }\n        s++;\n    }\n    return true;\n}\n\nint main() {\n    const char *test1 = \"0x1A3F\";\n    const char *test2 = \"1A3G\";\n    printf(\"%d\\n\", isValidHexadecimal(test1)); // Expected output: 1 (true)\n    printf(\"%d\\n\", isValidHexadecimal(test2)); // Expected output: 0 (false)\n    return 0;\n}\n```"
  },
  {
    "task": "Write a script that checks if a word is present in a list of predefined words.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nint main() {\n    char *predefinedWords[] = {\"apple\", \"banana\", \"cherry\", \"date\", \"fig\"};\n    int numWords = sizeof(predefinedWords) / sizeof(predefinedWords[0]);\n    char inputWord[50];\n    int found = 0;\n\n    printf(\"Enter a word: \");\n    scanf(\"%49s\", inputWord);\n\n    for(int i = 0; i < numWords; i++) {\n        if(strcmp(inputWord, predefinedWords[i]) == 0) {\n            found = 1;\n            break;\n        }\n    }\n\n    if (found) {\n        printf(\"The word is in the list.\\n\");\n    } else {\n        printf(\"The word is not in the list.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a routine to decide the correct tax bracket for a given income.",
    "code": "```c\n#include <stdio.h>\n\nconst char* determineTaxBracket(double income) {\n    if (income <= 9875) {\n        return \"10%\";\n    } else if (income <= 40125) {\n        return \"12%\";\n    } else if (income <= 85525) {\n        return \"22%\";\n    } else if (income <= 163300) {\n        return \"24%\";\n    } else if (income <= 207350) {\n        return \"32%\";\n    } else if (income <= 518400) {\n        return \"35%\";\n    } else {\n        return \"37%\";\n    }\n}\n\nint main() {\n    double income;\n    printf(\"Enter your income: \");\n    scanf(\"%lf\", &income);\n    printf(\"Your tax bracket is: %s\\n\", determineTaxBracket(income));\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a function that determines if a point is within a triangle.",
    "code": "```c\n#include <stdbool.h>\n\ntypedef struct {\n    double x, y;\n} Point;\n\ndouble sign(Point p1, Point p2, Point p3) {\n    return (p1.x - p3.x) * (p2.y - p3.y) - (p2.x - p3.x) * (p1.y - p3.y);\n}\n\nbool isPointInTriangle(Point pt, Point v1, Point v2, Point v3) {\n    double d1, d2, d3;\n    bool has_neg, has_pos;\n\n    d1 = sign(pt, v1, v2);\n    d2 = sign(pt, v2, v3);\n    d3 = sign(pt, v3, v1);\n\n    has_neg = (d1 < 0) || (d2 < 0) || (d3 < 0);\n    has_pos = (d1 > 0) || (d2 > 0) || (d3 > 0);\n\n    return !(has_neg && has_pos);\n}\n```"
  },
  {
    "task": "Implement a program that checks if a given string is a valid binary number.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nint isValidBinary(const char *str) {\n    for (int i = 0; i < strlen(str); i++) {\n        if (str[i] != '0' && str[i] != '1') {\n            return 0;\n        }\n    }\n    return 1;\n}\n\nint main() {\n    char str[100];\n    printf(\"Enter a string: \");\n    scanf(\"%s\", str);\n\n    if (isValidBinary(str)) {\n        printf(\"The string is a valid binary number.\\n\");\n    } else {\n        printf(\"The string is not a valid binary number.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a system to evaluate the risk level of an investment based on criteria.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    double investmentAmount;\n    int investmentDuration;\n    char riskLevel[20];\n\n    printf(\"Enter the amount of investment: \");\n    scanf(\"%lf\", &investmentAmount);\n\n    printf(\"Enter the duration of investment in years: \");\n    scanf(\"%d\", &investmentDuration);\n\n    if (investmentAmount < 1000) {\n        if (investmentDuration < 2) {\n            snprintf(riskLevel, sizeof(riskLevel), \"High Risk\");\n        } else {\n            snprintf(riskLevel, sizeof(riskLevel), \"Medium Risk\");\n        }\n    } else if (investmentAmount < 5000) {\n        if (investmentDuration < 5) {\n            snprintf(riskLevel, sizeof(riskLevel), \"Medium Risk\");\n        } else {\n            snprintf(riskLevel, sizeof(riskLevel), \"Low Risk\");\n        }\n    } else {\n        snprintf(riskLevel, sizeof(riskLevel), \"Low Risk\");\n    }\n\n    printf(\"The risk level of the investment is: %s\\n\", riskLevel);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program that suggests a vacation destination based on budget and preferences.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nint main() {\n    float budget;\n    char preference[20];\n\n    printf(\"Enter your budget: \");\n    scanf(\"%f\", &budget);\n\n    printf(\"Enter your preference (beach, city, nature): \");\n    scanf(\"%s\", preference);\n\n    if (budget < 500) {\n        if (strcmp(preference, \"beach\") == 0) {\n            printf(\"Suggested destination: Local Beach\\n\");\n        } else if (strcmp(preference, \"city\") == 0) {\n            printf(\"Suggested destination: Nearby City\\n\");\n        } else if (strcmp(preference, \"nature\") == 0) {\n            printf(\"Suggested destination: Local Park\\n\");\n        } else {\n            printf(\"Invalid preference\\n\");\n        }\n    } else if (budget >= 500 && budget < 2000) {\n        if (strcmp(preference, \"beach\") == 0) {\n            printf(\"Suggested destination: National Beach Resort\\n\");\n        } else if (strcmp(preference, \"city\") == 0) {\n            printf(\"Suggested destination: Capital City\\n\");\n        } else if (strcmp(preference, \"nature\") == 0) {\n            printf(\"Suggested destination: National Forest\\n\");\n        } else {\n            printf(\"Invalid preference\\n\");\n        }\n    } else {\n        if (strcmp(preference, \"beach\") == 0) {\n            printf(\"Suggested destination: Tropical Island\\n\");\n        } else if (strcmp(preference, \"city\") == 0) {\n            printf(\"Suggested destination: International City\\n\");\n        } else if (strcmp(preference, \"nature\") == 0) {\n            printf(\"Suggested destination: Grand National Park\\n\");\n        } else {\n            printf(\"Invalid preference\\n\");\n        }\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a routine that checks if a username is already taken in a database.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n#define USERNAME_COUNT 5\n\nint isUsernameTaken(const char *username, const char *database[], int count) {\n    for (int i = 0; i < count; i++) {\n        if (strcmp(username, database[i]) == 0) {\n            return 1;\n        }\n    }\n    return 0;\n}\n\nint main() {\n    const char *userDatabase[USERNAME_COUNT] = {\"user1\", \"user2\", \"user3\", \"user4\", \"user5\"};\n    const char *usernameToCheck = \"user2\";\n\n    if (isUsernameTaken(usernameToCheck, userDatabase, USERNAME_COUNT)) {\n        printf(\"Username is already taken.\\n\");\n    } else {\n        printf(\"Username is available.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a function that determines if a string is a valid IPv4 address.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <ctype.h>\n\nint isValidIPv4(char *ip) {\n    int num, dots = 0;\n    char *ptr;\n    \n    if (ip == NULL)\n        return 0;\n    \n    // Split the string by \".\"\n    ptr = strtok(ip, \".\");\n    if (ptr == NULL)\n        return 0;\n    \n    while (ptr) {\n        // Check if the current part is a valid number\n        if (!isdigit(ptr[0]) || (num = atoi(ptr)) < 0 || num > 255)\n            return 0;\n        \n        // Move to the next part\n        ptr = strtok(NULL, \".\");\n        dots++;\n    }\n    \n    // Valid IPv4 address should contain exactly 3 dots\n    return dots == 4;\n}\n\nint main() {\n    char ip[] = \"192.168.1.1\";\n    if (isValidIPv4(ip))\n        printf(\"Valid IPv4 address\\n\");\n    else\n        printf(\"Invalid IPv4 address\\n\");\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Implement a program to decide which transportation method is quickest based on distance.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    double distance;\n    printf(\"Enter the distance in kilometers: \");\n    scanf(\"%lf\", &distance);\n\n    if (distance < 1) {\n        printf(\"Walking is the quickest for short distances.\\n\");\n    } else if (distance < 5) {\n        printf(\"Bicycling is the quickest for this distance.\\n\");\n    } else if (distance < 20) {\n        printf(\"Taking a car is the quickest for this distance.\\n\");\n    } else {\n        printf(\"Flying is the quickest for long distances.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a script to validate if a number is a prime number.",
    "code": "```c\n#include <stdio.h>\n\nint isPrime(int num) {\n    if (num <= 1) return 0;\n    if (num <= 3) return 1;\n    if (num % 2 == 0 || num % 3 == 0) return 0;\n    for (int i = 5; i * i <= num; i += 6) {\n        if (num % i == 0 || num % (i + 2) == 0) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int number;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &number);\n    \n    if (isPrime(number)) {\n        printf(\"%d is a prime number.\\n\", number);\n    } else {\n        printf(\"%d is not a prime number.\\n\", number);\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that checks if a number is divisible by another number without remainder.",
    "code": "```c\n#include <stdio.h>\n\nint isDivisible(int num, int divisor) {\n    if (divisor == 0) {\n        return 0; // avoid division by zero\n    }\n    return (num % divisor == 0) ? 1 : 0;\n}\n\nint main() {\n    int number = 10;\n    int divisor = 2;\n    \n    if (isDivisible(number, divisor)) {\n        printf(\"%d is divisible by %d\\n\", number, divisor);\n    } else {\n        printf(\"%d is not divisible by %d\\n\", number, divisor);\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Create a program that determines the type of a quadrilateral based on side lengths.",
    "code": "```c\n#include <stdio.h>\n\nconst char* determineQuadrilateralType(int a, int b, int c, int d) {\n    if (a <= 0 || b <= 0 || c <= 0 || d <= 0) {\n        return \"Invalid quadrilateral with non-positive side length.\";\n    }\n    if (a == b && b == c && c == d) {\n        return \"Square\";\n    }\n    if ((a == c && b == d) || (a == b && c == d)) {\n        return \"Rectangle\";\n    }\n    if (a == b || b == c || c == d || a == d || a == c || b == d) {\n        return \"Rhombus\";\n    }\n    return \"Irregular Quadrilateral\";\n}\n\nint main() {\n    int a, b, c, d;\n    printf(\"Enter the lengths of the four sides of the quadrilateral:\\n\");\n    scanf(\"%d %d %d %d\", &a, &b, &c, &d);\n\n    const char* type = determineQuadrilateralType(a, b, c, d);\n    printf(\"The quadrilateral is: %s\\n\", type);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a routine to check if a sentence contains all letters of the alphabet.",
    "code": "```c\n#include <stdio.h>\n#include <stdbool.h>\n#include <ctype.h>\n#include <string.h>\n\nbool containsAllLetters(const char *sentence) {\n    bool letters[26] = { false };\n    int index;\n    \n    for (int i = 0; sentence[i] != '\\0'; i++) {\n        if (isalpha(sentence[i])) {\n            index = tolower(sentence[i]) - 'a';\n            letters[index] = true;\n        }\n    }\n    \n    for (int i = 0; i < 26; i++) {\n        if (!letters[i]) {\n            return false;\n        }\n    }\n    \n    return true;\n}\n\nint main() {\n    const char *sentence = \"The quick brown fox jumps over the lazy dog\";\n    if (containsAllLetters(sentence)) {\n        printf(\"The sentence contains all letters of the alphabet.\\n\");\n    } else {\n        printf(\"The sentence does not contain all letters of the alphabet.\\n\");\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a program that outputs the appropriate error message based on an error code.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int errorCode;\n    printf(\"Enter the error code: \");\n    scanf(\"%d\", &errorCode);\n\n    if (errorCode == 1) {\n        printf(\"Error: Invalid input.\\n\");\n    } else if (errorCode == 2) {\n        printf(\"Error: File not found.\\n\");\n    } else if (errorCode == 3) {\n        printf(\"Error: Access denied.\\n\");\n    } else if (errorCode == 4) {\n        printf(\"Error: Connection lost.\\n\");\n    } else if (errorCode == 5) {\n        printf(\"Error: Out of memory.\\n\");\n    } else {\n        printf(\"Unknown error code.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a function that categorizes a movie rating as G, PG, PG-13, or R.",
    "code": "```c\n#include <stdio.h>\n\nconst char* categorize_movie_rating(int age) {\n    if (age >= 0 && age <= 12) {\n        return \"G\";\n    } else if (age >= 13 && age <= 16) {\n        return \"PG\";\n    } else if (age == 17) {\n        return \"PG-13\";\n    } else if (age >= 18) {\n        return \"R\";\n    } else {\n        return \"Invalid age\";\n    }\n}\n\nint main() {\n    int age = 15;\n    printf(\"The movie rating for age %d is: %s\\n\", age, categorize_movie_rating(age));\n    return 0;\n}\n```"
  },
  {
    "task": "Write a script to check if a string is a valid Roman numeral.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nbool isValidRomanNumeral(const char* str) {\n    int i = 0;\n    while (str[i]) {\n        switch (str[i]) {\n            case 'I':\n                if (str[i+1] == 'V' || str[i+1] == 'X') {\n                    i++;\n                }\n                break;\n            case 'X':\n                if (str[i+1] == 'L' || str[i+1] == 'C') {\n                    i++;\n                }\n                break;\n            case 'C':\n                if (str[i+1] == 'D' || str[i+1] == 'M') {\n                    i++;\n                }\n                break;\n            case 'V':\n            case 'L':\n            case 'D':\n            case 'M':\n                break;\n            default:\n                return false;\n        }\n        i++;\n    }\n    return true;\n}\n\nint main() {\n    const char* testStr = \"XIV\";\n    if (isValidRomanNumeral(testStr)) {\n        printf(\"The string is a valid Roman numeral.\\n\");\n    } else {\n        printf(\"The string is not a valid Roman numeral.\\n\");\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Create a routine that decides if a person can retire based on age and years worked.",
    "code": "```c\n#include <stdio.h>\n\nvoid checkRetirementEligibility(int age, int yearsWorked) {\n    if (age >= 65 || yearsWorked >= 30) {\n        printf(\"Eligible for retirement.\\n\");\n    } else {\n        printf(\"Not eligible for retirement.\\n\");\n    }\n}\n\nint main() {\n    int age, yearsWorked;\n    \n    printf(\"Enter age: \");\n    scanf(\"%d\", &age);\n    \n    printf(\"Enter years worked: \");\n    scanf(\"%d\", &yearsWorked);\n    \n    checkRetirementEligibility(age, yearsWorked);\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Develop a function that outputs a different emoji based on user mood input.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nvoid printEmojiBasedOnMood(const char *mood) {\n    if (strcmp(mood, \"happy\") == 0) {\n        printf(\"\ud83d\ude0a\\n\");\n    } else if (strcmp(mood, \"sad\") == 0) {\n        printf(\"\ud83d\ude22\\n\");\n    } else if (strcmp(mood, \"angry\") == 0) {\n        printf(\"\ud83d\ude20\\n\");\n    } else if (strcmp(mood, \"surprised\") == 0) {\n        printf(\"\ud83d\ude32\\n\");\n    } else {\n        printf(\"\ud83e\udd14\\n\");\n    }\n}\n\nint main() {\n    char mood[20];\n\n    printf(\"Enter your mood: \");\n    scanf(\"%19s\", mood);\n\n    printEmojiBasedOnMood(mood);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a program that checks if a password meets security requirements.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint isStrongPassword(const char *password) {\n    int hasUpper = 0, hasLower = 0, hasDigit = 0, hasSpecial = 0;\n    \n    if (strlen(password) < 8) {\n        return 0; // Password too short\n    }\n\n    for (int i = 0; password[i] != '\\0'; i++) {\n        if (isupper(password[i])) hasUpper = 1;\n        else if (islower(password[i])) hasLower = 1;\n        else if (isdigit(password[i])) hasDigit = 1;\n        else hasSpecial = 1;\n    }\n\n    return hasUpper && hasLower && hasDigit && hasSpecial;\n}\n\nint main() {\n    char password[100];\n\n    printf(\"Enter password: \");\n    scanf(\"%s\", password);\n\n    if (isStrongPassword(password)) {\n        printf(\"Password is strong enough.\\n\");\n    } else {\n        printf(\"Password does not meet security requirements.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a script to determine if a number is a palindrome when reversed.",
    "code": "```c\n#include <stdio.h>\n\nint is_palindrome(int number) {\n    int reversed = 0, original = number, remainder;\n    \n    while (number != 0) {\n        remainder = number % 10;\n        reversed = reversed * 10 + remainder;\n        number /= 10;\n    }\n    \n    if (original == reversed) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\n\nint main() {\n    int number;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &number);\n    \n    if (is_palindrome(number)) {\n        printf(\"%d is a palindrome.\\n\", number);\n    } else {\n        printf(\"%d is not a palindrome.\\n\", number);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that evaluates if a given day is a holiday.",
    "code": "```c\n#include <stdbool.h>\n#include <string.h>\n\nbool isHoliday(const char *day) {\n    if (strcmp(day, \"New Year's Day\") == 0) {\n        return true;\n    } else if (strcmp(day, \"Christmas Day\") == 0) {\n        return true;\n    } else if (strcmp(day, \"Independence Day\") == 0) {\n        return true;\n    } else if (strcmp(day, \"Thanksgiving\") == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n```"
  },
  {
    "task": "Create a program to decide if a library book is overdue based on the due date.",
    "code": "```c\n#include <stdio.h>\n#include <time.h>\n\nint main() {\n    // Define the due date (year, month, day)\n    int dueYear = 2023;\n    int dueMonth = 10;\n    int dueDay = 15;\n\n    // Get the current date\n    time_t t = time(NULL);\n    struct tm currentDate = *localtime(&t);\n\n    // Check if the book is overdue\n    if (currentDate.tm_year + 1900 > dueYear || \n        (currentDate.tm_year + 1900 == dueYear && currentDate.tm_mon + 1 > dueMonth) || \n        (currentDate.tm_year + 1900 == dueYear && currentDate.tm_mon + 1 == dueMonth && currentDate.tm_mday > dueDay)) {\n        printf(\"The book is overdue.\\n\");\n    } else {\n        printf(\"The book is not overdue.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a routine that checks if a given year is part of a leap century.",
    "code": "```c\n#include <stdio.h>\n\nint isLeapCentury(int year) {\n    if (year % 400 == 0) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\n\nint main() {\n    int year;\n    printf(\"Enter a year: \");\n    scanf(\"%d\", &year);\n\n    if (isLeapCentury(year)) {\n        printf(\"%d is part of a leap century.\\n\", year);\n    } else {\n        printf(\"%d is not part of a leap century.\\n\", year);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a system to determine the correct category for a product based on user input.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nint main() {\n    char product[50];\n    \n    printf(\"Enter the product name: \");\n    scanf(\"%49s\", product);\n    \n    if (strcmp(product, \"electronics\") == 0) {\n        printf(\"Category: Electronics\\n\");\n    } else if (strcmp(product, \"furniture\") == 0) {\n        printf(\"Category: Furniture\\n\");\n    } else if (strcmp(product, \"clothing\") == 0) {\n        printf(\"Category: Clothing\\n\");\n    } else {\n        printf(\"Category: Other\\n\");\n    }\n    \n    return 0;\n}\n```"
  }
]