[
  {
    "task": "Define a class representing a book with attributes for title, author, and number of pages, and a method to display the book's information.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    char title[100];\n    char author[100];\n    int pages;\n} Book;\n\nvoid displayBookInfo(Book book) {\n    printf(\"Title: %s\\n\", book.title);\n    printf(\"Author: %s\\n\", book.author);\n    printf(\"Pages: %d\\n\", book.pages);\n}\n\nint main() {\n    Book myBook;\n    strcpy(myBook.title, \"The Great Gatsby\");\n    strcpy(myBook.author, \"F. Scott Fitzgerald\");\n    myBook.pages = 218;\n    \n    displayBookInfo(myBook);\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Create a class for a bank account that includes attributes for account number, balance, and a method to deposit funds.",
    "code": "```c\n#include <stdio.h>\n\ntypedef struct {\n    int accountNumber;\n    double balance;\n} BankAccount;\n\nvoid depositFunds(BankAccount *account, double amount) {\n    if (amount > 0) {\n        account->balance += amount;\n    }\n}\n\nint main() {\n    BankAccount account = {123456, 1000.0};\n    depositFunds(&account, 500.0);\n    printf(\"Account Number: %d\\n\", account.accountNumber);\n    printf(\"Balance: %.2f\\n\", account.balance);\n    return 0;\n}\n```"
  },
  {
    "task": "Design a class for a vehicle with properties for make, model, and year, and a method to start the engine.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    char make[50];\n    char model[50];\n    int year;\n} Vehicle;\n\nvoid startEngine(Vehicle *v) {\n    printf(\"The engine of the %d %s %s is starting.\\n\", v->year, v->make, v->model);\n}\n\nint main() {\n    Vehicle myCar;\n    strcpy(myCar.make, \"Toyota\");\n    strcpy(myCar.model, \"Corolla\");\n    myCar.year = 2021;\n\n    startEngine(&myCar);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a class that models a student with attributes for name, ID, and grades, and a method to calculate the GPA.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n#define MAX_GRADES 10\n\ntypedef struct {\n    char name[50];\n    int id;\n    float grades[MAX_GRADES];\n    int grade_count;\n} Student;\n\nvoid initStudent(Student *s, const char *name, int id) {\n    strncpy(s->name, name, sizeof(s->name) - 1);\n    s->name[sizeof(s->name) - 1] = '\\0';\n    s->id = id;\n    s->grade_count = 0;\n}\n\nvoid addGrade(Student *s, float grade) {\n    if (s->grade_count < MAX_GRADES) {\n        s->grades[s->grade_count++] = grade;\n    }\n}\n\nfloat calculateGPA(Student *s) {\n    float sum = 0.0;\n    for (int i = 0; i < s->grade_count; i++) {\n        sum += s->grades[i];\n    }\n    return s->grade_count ? (sum / s->grade_count) : 0.0;\n}\n\nint main() {\n    Student student;\n    initStudent(&student, \"John Doe\", 12345);\n\n    addGrade(&student, 3.5);\n    addGrade(&student, 4.0);\n    addGrade(&student, 3.7);\n\n    printf(\"GPA: %.2f\\n\", calculateGPA(&student));\n\n    return 0;\n}\n```"
  },
  {
    "task": "Construct a class for a rectangle that has attributes for width and height, and methods to calculate area and perimeter.",
    "code": "```c\n#include <stdio.h>\n\ntypedef struct {\n    double width;\n    double height;\n} Rectangle;\n\ndouble calculateArea(Rectangle *rect) {\n    return rect->width * rect->height;\n}\n\ndouble calculatePerimeter(Rectangle *rect) {\n    return 2 * (rect->width + rect->height);\n}\n\nint main() {\n    Rectangle rect;\n    rect.width = 5.0;\n    rect.height = 3.0;\n\n    printf(\"Area: %.2f\\n\", calculateArea(&rect));\n    printf(\"Perimeter: %.2f\\n\", calculatePerimeter(&rect));\n\n    return 0;\n}\n```"
  },
  {
    "task": "Formulate a class for a smartphone with properties for brand, model, and battery life, and a method to make a call.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    char brand[50];\n    char model[50];\n    int batteryLife;\n} Smartphone;\n\nvoid makeCall(Smartphone *phone) {\n    if (phone->batteryLife > 0) {\n        printf(\"Making a call from %s %s...\\n\", phone->brand, phone->model);\n        phone->batteryLife--;\n    } else {\n        printf(\"Battery is dead. Cannot make a call.\\n\");\n    }\n}\n\nint main() {\n    Smartphone myPhone;\n    strcpy(myPhone.brand, \"Samsung\");\n    strcpy(myPhone.model, \"Galaxy S21\");\n    myPhone.batteryLife = 5;\n\n    makeCall(&myPhone);\n    printf(\"Remaining battery life: %d\\n\", myPhone.batteryLife);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Build a class representing a movie with attributes for title, director, and duration, and a method to play the movie.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    char title[100];\n    char director[100];\n    int duration; // in minutes\n} Movie;\n\nvoid playMovie(Movie *movie) {\n    printf(\"Playing movie: %s\\n\", movie->title);\n}\n\nint main() {\n    Movie myMovie;\n    strcpy(myMovie.title, \"Inception\");\n    strcpy(myMovie.director, \"Christopher Nolan\");\n    myMovie.duration = 148;\n\n    playMovie(&myMovie);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a class for an employee with attributes for name, position, and salary, and a method to display their profile.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    char name[50];\n    char position[50];\n    double salary;\n} Employee;\n\nvoid displayProfile(Employee emp) {\n    printf(\"Name: %s\\n\", emp.name);\n    printf(\"Position: %s\\n\", emp.position);\n    printf(\"Salary: %.2f\\n\", emp.salary);\n}\n\nint main() {\n    Employee emp;\n    strcpy(emp.name, \"John Doe\");\n    strcpy(emp.position, \"Software Engineer\");\n    emp.salary = 75000.00;\n\n    displayProfile(emp);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a class for a library that includes attributes for name, location, and books available, and a method to add a new book.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n#define MAX_BOOKS 100\n#define MAX_NAME_LENGTH 100\n#define MAX_LOCATION_LENGTH 100\n#define MAX_BOOK_TITLE_LENGTH 100\n\ntypedef struct {\n    char name[MAX_NAME_LENGTH];\n    char location[MAX_LOCATION_LENGTH];\n    char books[MAX_BOOKS][MAX_BOOK_TITLE_LENGTH];\n    int book_count;\n} Library;\n\nvoid addBook(Library *library, const char *bookTitle) {\n    if (library->book_count < MAX_BOOKS) {\n        strncpy(library->books[library->book_count], bookTitle, MAX_BOOK_TITLE_LENGTH);\n        library->book_count++;\n    } else {\n        printf(\"Library is full. Cannot add more books.\\n\");\n    }\n}\n\nint main() {\n    Library library;\n    strncpy(library.name, \"Central Library\", MAX_NAME_LENGTH);\n    strncpy(library.location, \"Main Street\", MAX_LOCATION_LENGTH);\n    library.book_count = 0;\n\n    addBook(&library, \"The Great Gatsby\");\n    addBook(&library, \"1984\");\n\n    printf(\"Library: %s\\nLocation: %s\\n\", library.name, library.location);\n    printf(\"Books Available:\\n\");\n    for (int i = 0; i < library.book_count; i++) {\n        printf(\"- %s\\n\", library.books[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a class for a shopping cart with properties for items and total cost, and methods to add and remove items.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char name[50];\n    double price;\n} Item;\n\ntypedef struct {\n    Item *items;\n    int itemCount;\n    double totalCost;\n} ShoppingCart;\n\nvoid initializeCart(ShoppingCart *cart) {\n    cart->items = NULL;\n    cart->itemCount = 0;\n    cart->totalCost = 0.0;\n}\n\nvoid addItem(ShoppingCart *cart, const char *name, double price) {\n    cart->items = realloc(cart->items, (cart->itemCount + 1) * sizeof(Item));\n    strcpy(cart->items[cart->itemCount].name, name);\n    cart->items[cart->itemCount].price = price;\n    cart->itemCount++;\n    cart->totalCost += price;\n}\n\nvoid removeItem(ShoppingCart *cart, const char *name) {\n    int index = -1;\n    for (int i = 0; i < cart->itemCount; i++) {\n        if (strcmp(cart->items[i].name, name) == 0) {\n            index = i;\n            break;\n        }\n    }\n    if (index != -1) {\n        cart->totalCost -= cart->items[index].price;\n        for (int i = index; i < cart->itemCount - 1; i++) {\n            cart->items[i] = cart->items[i + 1];\n        }\n        cart->itemCount--;\n        cart->items = realloc(cart->items, cart->itemCount * sizeof(Item));\n    }\n}\n\nvoid freeCart(ShoppingCart *cart) {\n    free(cart->items);\n    cart->items = NULL;\n    cart->itemCount = 0;\n    cart->totalCost = 0.0;\n}\n\nint main() {\n    ShoppingCart cart;\n    initializeCart(&cart);\n    \n    addItem(&cart, \"Apple\", 1.2);\n    addItem(&cart, \"Banana\", 0.5);\n    removeItem(&cart, \"Apple\");\n    \n    printf(\"Total cost: %.2f\\n\", cart.totalCost);\n    \n    freeCart(&cart);\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a class for a thermostat with attributes for current temperature and desired temperature, and a method to adjust the temperature.",
    "code": "```c\n#include <stdio.h>\n\ntypedef struct {\n    float currentTemperature;\n    float desiredTemperature;\n} Thermostat;\n\nvoid adjustTemperature(Thermostat *t) {\n    if (t->currentTemperature < t->desiredTemperature) {\n        printf(\"Heating up to %.1f\\n\", t->desiredTemperature);\n    } else if (t->currentTemperature > t->desiredTemperature) {\n        printf(\"Cooling down to %.1f\\n\", t->desiredTemperature);\n    } else {\n        printf(\"Temperature is optimal at %.1f\\n\", t->currentTemperature);\n    }\n}\n\nint main() {\n    Thermostat t;\n    t.currentTemperature = 20.0;\n    t.desiredTemperature = 22.0;\n    adjustTemperature(&t);\n    return 0;\n}\n```"
  },
  {
    "task": "Formulate a class for a person with attributes for first name, last name, and age, and a method to return the full name.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    char firstName[50];\n    char lastName[50];\n    int age;\n} Person;\n\nvoid getFullName(Person *p, char *fullName) {\n    strcpy(fullName, p->firstName);\n    strcat(fullName, \" \");\n    strcat(fullName, p->lastName);\n}\n\nint main() {\n    Person person;\n    strcpy(person.firstName, \"John\");\n    strcpy(person.lastName, \"Doe\");\n    person.age = 30;\n\n    char fullName[100];\n    getFullName(&person, fullName);\n\n    printf(\"Full Name: %s\\n\", fullName);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Construct a class for a game character with properties for health, strength, and inventory, and a method to attack.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    int health;\n    int strength;\n    char inventory[10][50];\n    int inventoryCount;\n} GameCharacter;\n\nvoid attack(GameCharacter *character) {\n    printf(\"Character attacks with strength %d!\\n\", character->strength);\n}\n\nint main() {\n    GameCharacter character;\n    character.health = 100;\n    character.strength = 50;\n    character.inventoryCount = 0;\n\n    strcpy(character.inventory[character.inventoryCount++], \"Sword\");\n    strcpy(character.inventory[character.inventoryCount++], \"Shield\");\n\n    attack(&character);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a class for a calendar event with attributes for title, date, and location, and a method to reschedule the event.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    char title[100];\n    char date[11];\n    char location[100];\n} CalendarEvent;\n\n// Function to reschedule the event\nvoid rescheduleEvent(CalendarEvent *event, const char *newDate) {\n    strncpy(event->date, newDate, sizeof(event->date) - 1);\n    event->date[sizeof(event->date) - 1] = '\\0';\n}\n\nint main() {\n    CalendarEvent event;\n\n    // Example usage\n    strncpy(event.title, \"Meeting\", sizeof(event.title) - 1);\n    event.title[sizeof(event.title) - 1] = '\\0';\n\n    strncpy(event.date, \"2023-10-25\", sizeof(event.date) - 1);\n    event.date[sizeof(event.date) - 1] = '\\0';\n\n    strncpy(event.location, \"New York\", sizeof(event.location) - 1);\n    event.location[sizeof(event.location) - 1] = '\\0';\n\n    printf(\"Event: %s, Date: %s, Location: %s\\n\", event.title, event.date, event.location);\n\n    rescheduleEvent(&event, \"2023-11-10\");\n    printf(\"Rescheduled Event: %s, Date: %s, Location: %s\\n\", event.title, event.date, event.location);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a class representing a song with properties for title, artist, and duration, and a method to play the song.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    char title[100];\n    char artist[100];\n    int duration; // Duration in seconds\n} Song;\n\nvoid playSong(Song *song) {\n    printf(\"Playing '%s' by %s, Duration: %d seconds.\\n\", song->title, song->artist, song->duration);\n}\n\nint main() {\n    Song mySong;\n    strcpy(mySong.title, \"Imagine\");\n    strcpy(mySong.artist, \"John Lennon\");\n    mySong.duration = 183;\n\n    playSong(&mySong);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a class for an order in an e-commerce system with attributes for order ID, customer, and items, and a method to calculate total price.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    char name[50];\n    double price;\n} Item;\n\ntypedef struct {\n    int orderID;\n    char customer[100];\n    Item items[10];\n    int itemCount;\n} Order;\n\ndouble calculateTotalPrice(Order *order) {\n    double total = 0.0;\n    for (int i = 0; i < order->itemCount; i++) {\n        total += order->items[i].price;\n    }\n    return total;\n}\n\nint main() {\n    Order order;\n    order.orderID = 1;\n    strcpy(order.customer, \"John Doe\");\n    order.itemCount = 2;\n    \n    strcpy(order.items[0].name, \"Book\");\n    order.items[0].price = 12.99;\n    \n    strcpy(order.items[1].name, \"Pen\");\n    order.items[1].price = 1.50;\n    \n    double totalPrice = calculateTotalPrice(&order);\n    printf(\"Order ID: %d\\n\", order.orderID);\n    printf(\"Customer: %s\\n\", order.customer);\n    printf(\"Total Price: $%.2f\\n\", totalPrice);\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Build a class for a social media post with attributes for content, author, and timestamp, and a method to like the post.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n#include <time.h>\n\ntypedef struct {\n    char content[256];\n    char author[100];\n    char timestamp[100];\n    int likes;\n} SocialMediaPost;\n\nvoid initializePost(SocialMediaPost *post, const char *content, const char *author) {\n    strncpy(post->content, content, sizeof(post->content) - 1);\n    strncpy(post->author, author, sizeof(post->author) - 1);\n    time_t now = time(NULL);\n    strftime(post->timestamp, sizeof(post->timestamp), \"%Y-%m-%d %H:%M:%S\", localtime(&now));\n    post->likes = 0;\n}\n\nvoid likePost(SocialMediaPost *post) {\n    post->likes++;\n}\n\nint main() {\n    SocialMediaPost post;\n    initializePost(&post, \"Hello World!\", \"Author Name\");\n    likePost(&post);\n    printf(\"Content: %s\\nAuthor: %s\\nTimestamp: %s\\nLikes: %d\\n\", post.content, post.author, post.timestamp, post.likes);\n    return 0;\n}\n```"
  },
  {
    "task": "Create a class for a computer with properties for processor, RAM, and storage, and a method to display system specifications.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    char processor[50];\n    int ram; // in GB\n    int storage; // in GB\n} Computer;\n\nvoid displaySpecs(Computer *comp) {\n    printf(\"Processor: %s\\n\", comp->processor);\n    printf(\"RAM: %d GB\\n\", comp->ram);\n    printf(\"Storage: %d GB\\n\", comp->storage);\n}\n\nint main() {\n    Computer myComputer;\n    strcpy(myComputer.processor, \"Intel Core i7\");\n    myComputer.ram = 16;\n    myComputer.storage = 512;\n\n    displaySpecs(&myComputer);\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Implement a class for a restaurant menu item with attributes for name, price, and description, and a method to update the price.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    char name[50];\n    double price;\n    char description[200];\n} MenuItem;\n\nvoid updatePrice(MenuItem *item, double newPrice) {\n    item->price = newPrice;\n}\n\nint main() {\n    MenuItem item;\n    strcpy(item.name, \"Pasta\");\n    item.price = 12.99;\n    strcpy(item.description, \"Delicious homemade pasta.\");\n\n    printf(\"Before update: %s - $%.2f\\n\", item.name, item.price);\n    updatePrice(&item, 14.99);\n    printf(\"After update: %s - $%.2f\\n\", item.name, item.price);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a class for a package delivery with attributes for tracking number, destination, and status, and a method to update the status.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    char trackingNumber[50];\n    char destination[100];\n    char status[50];\n} PackageDelivery;\n\nvoid updateStatus(PackageDelivery *package, const char *newStatus) {\n    strcpy(package->status, newStatus);\n}\n\nint main() {\n    PackageDelivery package;\n    strcpy(package.trackingNumber, \"1234567890\");\n    strcpy(package.destination, \"123 Main St, Anytown, USA\");\n    strcpy(package.status, \"In Transit\");\n\n    printf(\"Tracking Number: %s\\n\", package.trackingNumber);\n    printf(\"Destination: %s\\n\", package.destination);\n    printf(\"Status: %s\\n\", package.status);\n\n    updateStatus(&package, \"Delivered\");\n\n    printf(\"Updated Status: %s\\n\", package.status);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Construct a class representing a pet with attributes for species, age, and name, and a method to display its details.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    char species[50];\n    int age;\n    char name[50];\n} Pet;\n\nvoid displayPetDetails(Pet *pet) {\n    printf(\"Species: %s\\n\", pet->species);\n    printf(\"Age: %d\\n\", pet->age);\n    printf(\"Name: %s\\n\", pet->name);\n}\n\nint main() {\n    Pet myPet;\n    strcpy(myPet.species, \"Dog\");\n    myPet.age = 5;\n    strcpy(myPet.name, \"Buddy\");\n\n    displayPetDetails(&myPet);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Formulate a class for a product in a store with properties for SKU, name, and price, and a method to apply a discount.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    char sku[50];\n    char name[100];\n    double price;\n} Product;\n\nvoid applyDiscount(Product *p, double discountPercentage) {\n    if (discountPercentage > 0 && discountPercentage < 100) {\n        p->price -= p->price * (discountPercentage / 100.0);\n    }\n}\n\nint main() {\n    Product product;\n    strcpy(product.sku, \"12345\");\n    strcpy(product.name, \"Example Product\");\n    product.price = 100.0;\n\n    printf(\"Original Price: %.2f\\n\", product.price);\n    applyDiscount(&product, 10);\n    printf(\"Discounted Price: %.2f\\n\", product.price);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a class for a university course with attributes for course code, title, and credits, and a method to enroll a student.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    char course_code[20];\n    char title[100];\n    int credits;\n    int enrolled_students;\n} UniversityCourse;\n\nvoid enroll_student(UniversityCourse *course) {\n    course->enrolled_students += 1;\n}\n\nint main() {\n    UniversityCourse course;\n\n    strcpy(course.course_code, \"CS101\");\n    strcpy(course.title, \"Introduction to Computer Science\");\n    course.credits = 3;\n    course.enrolled_students = 0;\n\n    enroll_student(&course);\n    printf(\"Course: %s\\nTitle: %s\\nCredits: %d\\nEnrolled Students: %d\\n\",\n           course.course_code, course.title, course.credits, course.enrolled_students);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a class for a smart light bulb with attributes for color, brightness, and state (on/off), and a method to change the color.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    char color[20];\n    int brightness;\n    int isOn;\n} SmartLightBulb;\n\nvoid changeColor(SmartLightBulb *bulb, const char *newColor) {\n    strncpy(bulb->color, newColor, sizeof(bulb->color) - 1);\n    bulb->color[sizeof(bulb->color) - 1] = '\\0';\n}\n\nint main() {\n    SmartLightBulb bulb;\n    strcpy(bulb.color, \"White\");\n    bulb.brightness = 100;\n    bulb.isOn = 1;\n\n    printf(\"Initial color: %s\\n\", bulb.color);\n    changeColor(&bulb, \"Blue\");\n    printf(\"Changed color: %s\\n\", bulb.color);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a class for a blog post with properties for title, content, and date published, and a method to edit the content.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char *title;\n    char *content;\n    char *date_published;\n} BlogPost;\n\nvoid editContent(BlogPost *post, const char *newContent) {\n    free(post->content);\n    post->content = malloc(strlen(newContent) + 1);\n    strcpy(post->content, newContent);\n}\n\nint main() {\n    BlogPost post;\n    \n    post.title = malloc(50);\n    strcpy(post.title, \"First Blog Post\");\n    \n    post.content = malloc(100);\n    strcpy(post.content, \"This is the content of the blog post.\");\n    \n    post.date_published = malloc(20);\n    strcpy(post.date_published, \"2023-10-05\");\n\n    printf(\"Title: %s\\n\", post.title);\n    printf(\"Content: %s\\n\", post.content);\n    printf(\"Date Published: %s\\n\\n\", post.date_published);\n\n    editContent(&post, \"This is the updated content of the blog post.\");\n\n    printf(\"Updated Content: %s\\n\", post.content);\n\n    free(post.title);\n    free(post.content);\n    free(post.date_published);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Build a class for a bank transaction with attributes for transaction ID, amount, and type, and a method to reverse the transaction.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    int transaction_id;\n    double amount;\n    char type[20];\n} BankTransaction;\n\nvoid reverseTransaction(BankTransaction* transaction) {\n    transaction->amount = -transaction->amount;\n    if (strcmp(transaction->type, \"debit\") == 0) {\n        strcpy(transaction->type, \"credit\");\n    } else if (strcmp(transaction->type, \"credit\") == 0) {\n        strcpy(transaction->type, \"debit\");\n    }\n}\n\nint main() {\n    BankTransaction transaction = {1, 100.00, \"debit\"};\n    printf(\"Before reversal: ID=%d, Amount=%.2f, Type=%s\\n\", transaction.transaction_id, transaction.amount, transaction.type);\n    reverseTransaction(&transaction);\n    printf(\"After reversal: ID=%d, Amount=%.2f, Type=%s\\n\", transaction.transaction_id, transaction.amount, transaction.type);\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a class for a city with properties for name, population, and area, and a method to calculate population density.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    char name[100];\n    int population;\n    double area;\n} City;\n\ndouble calculate_population_density(City* city) {\n    if (city->area == 0) {\n        return 0.0; // Avoid division by zero\n    }\n    return city->population / city->area;\n}\n\nint main() {\n    City city;\n    strcpy(city.name, \"SampleCity\");\n    city.population = 1000000;\n    city.area = 250.0;\n\n    double density = calculate_population_density(&city);\n    printf(\"City: %s\\nPopulation Density: %.2f\\n\", city.name, density);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Construct a class for a library member with attributes for member ID, name, and borrowed books, and a method to borrow a book.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n#define MAX_BOOKS 10\n\ntypedef struct {\n    char title[100];\n} Book;\n\ntypedef struct {\n    int memberID;\n    char name[100];\n    Book borrowedBooks[MAX_BOOKS];\n    int borrowedCount;\n} LibraryMember;\n\nvoid borrowBook(LibraryMember *member, const char *bookTitle) {\n    if (member->borrowedCount < MAX_BOOKS) {\n        strcpy(member->borrowedBooks[member->borrowedCount].title, bookTitle);\n        member->borrowedCount++;\n    } else {\n        printf(\"Cannot borrow more books.\\n\");\n    }\n}\n\nint main() {\n    LibraryMember member = {1, \"John Doe\", {}, 0};\n    borrowBook(&member, \"The Great Gatsby\");\n    printf(\"Member Name: %s\\n\", member.name);\n    printf(\"Borrowed Book: %s\\n\", member.borrowedBooks[0].title);\n    return 0;\n}\n```"
  },
  {
    "task": "Create a class for a flight reservation with attributes for flight number, passenger name, and seat number, and a method to change the seat.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    char flightNumber[20];\n    char passengerName[50];\n    char seatNumber[10];\n} FlightReservation;\n\nvoid changeSeat(FlightReservation *reservation, const char *newSeat) {\n    strncpy(reservation->seatNumber, newSeat, sizeof(reservation->seatNumber) - 1);\n    reservation->seatNumber[sizeof(reservation->seatNumber) - 1] = '\\0';\n}\n\nint main() {\n    FlightReservation reservation;\n\n    strncpy(reservation.flightNumber, \"AB123\", sizeof(reservation.flightNumber) - 1);\n    reservation.flightNumber[sizeof(reservation.flightNumber) - 1] = '\\0';\n\n    strncpy(reservation.passengerName, \"John Doe\", sizeof(reservation.passengerName) - 1);\n    reservation.passengerName[sizeof(reservation.passengerName) - 1] = '\\0';\n\n    strncpy(reservation.seatNumber, \"12A\", sizeof(reservation.seatNumber) - 1);\n    reservation.seatNumber[sizeof(reservation.seatNumber) - 1] = '\\0';\n\n    printf(\"Initial seat number: %s\\n\", reservation.seatNumber);\n\n    changeSeat(&reservation, \"14B\");\n\n    printf(\"Changed seat number: %s\\n\", reservation.seatNumber);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a class for a digital photo album with properties for album name, photos, and a method to add a new photo.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char **photos;\n    int photoCount;\n    int capacity;\n} PhotoAlbum;\n\nPhotoAlbum *createAlbum(const char *name) {\n    PhotoAlbum *album = (PhotoAlbum *)malloc(sizeof(PhotoAlbum));\n    album->photos = (char **)malloc(sizeof(char *) * 10);\n    album->photoCount = 0;\n    album->capacity = 10;\n    return album;\n}\n\nvoid addPhoto(PhotoAlbum *album, const char *photo) {\n    if (album->photoCount == album->capacity) {\n        album->capacity *= 2;\n        album->photos = (char **)realloc(album->photos, sizeof(char *) * album->capacity);\n    }\n    album->photos[album->photoCount] = strdup(photo);\n    album->photoCount++;\n}\n\nvoid freeAlbum(PhotoAlbum *album) {\n    for (int i = 0; i < album->photoCount; ++i) {\n        free(album->photos[i]);\n    }\n    free(album->photos);\n    free(album);\n}\n\nint main() {\n    PhotoAlbum *album = createAlbum(\"Vacation\");\n    addPhoto(album, \"Beach.png\");\n    addPhoto(album, \"Mountain.png\");\n    freeAlbum(album);\n    return 0;\n}\n```"
  },
  {
    "task": "Design a class for a task in a to-do list with attributes for description, deadline, and status, and a method to mark it as complete.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    char description[100];\n    char deadline[20];\n    int isComplete;\n} Task;\n\nvoid markAsComplete(Task *task) {\n    task->isComplete = 1;\n}\n\nint main() {\n    Task task;\n    strcpy(task.description, \"Complete C programming assignment\");\n    strcpy(task.deadline, \"2023-10-15\");\n    task.isComplete = 0;\n\n    printf(\"Description: %s\\n\", task.description);\n    printf(\"Deadline: %s\\n\", task.deadline);\n    printf(\"Status: %s\\n\", task.isComplete ? \"Complete\" : \"Incomplete\");\n\n    markAsComplete(&task);\n\n    printf(\"Status after marking complete: %s\\n\", task.isComplete ? \"Complete\" : \"Incomplete\");\n\n    return 0;\n}\n```"
  },
  {
    "task": "Formulate a class for a conference speaker with attributes for name, topic, and time slot, and a method to update the time slot.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    char name[100];\n    char topic[100];\n    char timeSlot[50];\n} ConferenceSpeaker;\n\nvoid updateTimeSlot(ConferenceSpeaker *speaker, const char *newTimeSlot) {\n    strcpy(speaker->timeSlot, newTimeSlot);\n}\n\nint main() {\n    ConferenceSpeaker speaker;\n\n    strcpy(speaker.name, \"John Doe\");\n    strcpy(speaker.topic, \"Artificial Intelligence\");\n    strcpy(speaker.timeSlot, \"10:00 AM\");\n\n    printf(\"Before update: %s\\n\", speaker.timeSlot);\n\n    updateTimeSlot(&speaker, \"2:00 PM\");\n\n    printf(\"After update: %s\\n\", speaker.timeSlot);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Construct a class for a real estate property with attributes for address, price, and square footage, and a method to change the price.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    char address[100];\n    double price;\n    double squareFootage;\n} RealEstateProperty;\n\nvoid changePrice(RealEstateProperty *property, double newPrice) {\n    property->price = newPrice;\n}\n\nint main() {\n    RealEstateProperty property;\n    \n    strcpy(property.address, \"123 Main St\");\n    property.price = 250000.00;\n    property.squareFootage = 2000.0;\n    \n    printf(\"Initial Price: $%.2f\\n\", property.price);\n    changePrice(&property, 275000.00);\n    printf(\"Updated Price: $%.2f\\n\", property.price);\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Create a class for a weather forecast with properties for temperature, humidity, and condition, and a method to update the forecast.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    float temperature;\n    float humidity;\n    char condition[50];\n} WeatherForecast;\n\nvoid updateForecast(WeatherForecast *forecast, float newTemperature, float newHumidity, const char *newCondition) {\n    forecast->temperature = newTemperature;\n    forecast->humidity = newHumidity;\n    strncpy(forecast->condition, newCondition, sizeof(forecast->condition) - 1);\n    forecast->condition[sizeof(forecast->condition) - 1] = '\\0';\n}\n\nint main() {\n    WeatherForecast forecast;\n    \n    updateForecast(&forecast, 25.5, 60.0, \"Sunny\");\n\n    printf(\"Temperature: %.1f\\n\", forecast.temperature);\n    printf(\"Humidity: %.1f\\n\", forecast.humidity);\n    printf(\"Condition: %s\\n\", forecast.condition);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Build a class for a musical instrument with attributes for type, brand, and model, and a method to play a note.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    char type[50];\n    char brand[50];\n    char model[50];\n} Instrument;\n\nvoid playNote(Instrument *instrument, const char *note) {\n    printf(\"Playing %s on the %s %s %s.\\n\", note, instrument->brand, instrument->model, instrument->type);\n}\n\nint main() {\n    Instrument myInstrument;\n    strcpy(myInstrument.type, \"Guitar\");\n    strcpy(myInstrument.brand, \"Fender\");\n    strcpy(myInstrument.model, \"Stratocaster\");\n\n    playNote(&myInstrument, \"C#\");\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Design a class for a sports team with attributes for team name, players, and coach, and a method to add a new player.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MAX_PLAYERS 100\n#define NAME_LENGTH 50\n\ntypedef struct {\n    char name[NAME_LENGTH];\n    char players[MAX_PLAYERS][NAME_LENGTH];\n    char coach[NAME_LENGTH];\n    int player_count;\n} SportsTeam;\n\nvoid addPlayer(SportsTeam *team, const char *player_name) {\n    if (team->player_count < MAX_PLAYERS) {\n        strncpy(team->players[team->player_count], player_name, NAME_LENGTH - 1);\n        team->players[team->player_count][NAME_LENGTH - 1] = '\\0'; // Ensure null-termination\n        team->player_count++;\n    } else {\n        printf(\"Cannot add more players. Team is full.\\n\");\n    }\n}\n\nint main() {\n    SportsTeam team;\n    strncpy(team.name, \"Team A\", NAME_LENGTH - 1);\n    team.name[NAME_LENGTH - 1] = '\\0';\n    strncpy(team.coach, \"Coach X\", NAME_LENGTH - 1);\n    team.coach[NAME_LENGTH - 1] = '\\0';\n    team.player_count = 0;\n\n    addPlayer(&team, \"Player 1\");\n    addPlayer(&team, \"Player 2\");\n\n    printf(\"Team: %s\\n\", team.name);\n    printf(\"Coach: %s\\n\", team.coach);\n    printf(\"Players:\\n\");\n    for (int i = 0; i < team.player_count; i++) {\n        printf(\"- %s\\n\", team.players[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a class for a podcast episode with attributes for title, duration, and host, and a method to play the episode.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    char title[100];\n    int duration; // in minutes\n    char host[100];\n} PodcastEpisode;\n\nvoid playEpisode(PodcastEpisode *episode) {\n    printf(\"Playing episode: %s\\n\", episode->title);\n    printf(\"Duration: %d minutes\\n\", episode->duration);\n    printf(\"Hosted by: %s\\n\", episode->host);\n}\n\nint main() {\n    PodcastEpisode episode;\n    strcpy(episode.title, \"The Fascinating World of C Programming\");\n    episode.duration = 45;\n    strcpy(episode.host, \"John Doe\");\n\n    playEpisode(&episode);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a class for a space mission with properties for mission name, crew, and launch date, and a method to launch the mission.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    char name[50];\n    int crew;\n    char launchDate[20];\n} SpaceMission;\n\nvoid launchMission(SpaceMission *mission) {\n    printf(\"Launching mission: %s\\n\", mission->name);\n    printf(\"Crew members: %d\\n\", mission->crew);\n    printf(\"Launch date: %s\\n\", mission->launchDate);\n}\n\nint main() {\n    SpaceMission mission;\n    strcpy(mission.name, \"Apollo 11\");\n    mission.crew = 3;\n    strcpy(mission.launchDate, \"1969-07-16\");\n\n    launchMission(&mission);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a class for a virtual assistant with attributes for name, language, and skills, and a method to add a new skill.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    char name[50];\n    char language[50];\n    char skills[10][50];\n    int skill_count;\n} VirtualAssistant;\n\nvoid addSkill(VirtualAssistant* assistant, const char* skill) {\n    if (assistant->skill_count < 10) {\n        strcpy(assistant->skills[assistant->skill_count], skill);\n        assistant->skill_count++;\n    } else {\n        printf(\"Skill list is full.\\n\");\n    }\n}\n\nint main() {\n    VirtualAssistant assistant;\n    strcpy(assistant.name, \"Alexa\");\n    strcpy(assistant.language, \"English\");\n    assistant.skill_count = 0;\n\n    addSkill(&assistant, \"Weather Forecast\");\n    addSkill(&assistant, \"Play Music\");\n\n    return 0;\n}\n```"
  },
  {
    "task": "Formulate a class for a news article with attributes for headline, content, and author, and a method to publish the article.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    char headline[100];\n    char content[1000];\n    char author[50];\n} NewsArticle;\n\nvoid publishArticle(NewsArticle *article) {\n    printf(\"Headline: %s\\n\", article->headline);\n    printf(\"Content: %s\\n\", article->content);\n    printf(\"Author: %s\\n\", article->author);\n}\n\nint main() {\n    NewsArticle article;\n    strcpy(article.headline, \"Breaking News\");\n    strcpy(article.content, \"This is the content of the news article.\");\n    strcpy(article.author, \"John Doe\");\n    \n    publishArticle(&article);\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Construct a class for a hiking trail with attributes for trail name, length, and difficulty, and a method to update the difficulty.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    char trailName[100];\n    double length;\n    char difficulty[20];\n} HikingTrail;\n\nvoid updateDifficulty(HikingTrail *trail, const char *newDifficulty) {\n    strncpy(trail->difficulty, newDifficulty, sizeof(trail->difficulty) - 1);\n    trail->difficulty[sizeof(trail->difficulty) - 1] = '\\0';\n}\n\nint main() {\n    HikingTrail trail;\n    strncpy(trail.trailName, \"Sunset Trail\", sizeof(trail.trailName) - 1);\n    trail.trailName[sizeof(trail.trailName) - 1] = '\\0';\n    trail.length = 5.5;\n    strncpy(trail.difficulty, \"Moderate\", sizeof(trail.difficulty) - 1);\n    trail.difficulty[sizeof(trail.difficulty) - 1] = '\\0';\n\n    printf(\"Trail: %s, Length: %.1f, Difficulty: %s\\n\", trail.trailName, trail.length, trail.difficulty);\n\n    updateDifficulty(&trail, \"Difficult\");\n\n    printf(\"Updated Trail: %s, Length: %.1f, Difficulty: %s\\n\", trail.trailName, trail.length, trail.difficulty);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a class for a subscription service with properties for service name, subscriber count, and subscription fee, and a method to update the fee.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    char serviceName[50];\n    int subscriberCount;\n    double subscriptionFee;\n} SubscriptionService;\n\nvoid updateSubscriptionFee(SubscriptionService *service, double newFee) {\n    service->subscriptionFee = newFee;\n}\n\nint main() {\n    SubscriptionService service;\n    strcpy(service.serviceName, \"ExampleService\");\n    service.subscriberCount = 1000;\n    service.subscriptionFee = 9.99;\n\n    printf(\"Before update: %s, Subscribers: %d, Fee: $%.2f\\n\", \n           service.serviceName, service.subscriberCount, service.subscriptionFee);\n\n    updateSubscriptionFee(&service, 12.99);\n\n    printf(\"After update: %s, Subscribers: %d, Fee: $%.2f\\n\", \n           service.serviceName, service.subscriberCount, service.subscriptionFee);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Build a class for a digital wallet with attributes for balance, transaction history, and a method to add funds.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    double balance;\n    double *transactionHistory;\n    size_t transactionCount;\n} DigitalWallet;\n\nvoid initializeWallet(DigitalWallet *wallet) {\n    wallet->balance = 0.0;\n    wallet->transactionHistory = NULL;\n    wallet->transactionCount = 0;\n}\n\nvoid addFunds(DigitalWallet *wallet, double amount) {\n    wallet->balance += amount;\n    wallet->transactionCount++;\n    wallet->transactionHistory = realloc(wallet->transactionHistory, wallet->transactionCount * sizeof(double));\n    wallet->transactionHistory[wallet->transactionCount - 1] = amount;\n}\n\nvoid freeWallet(DigitalWallet *wallet) {\n    free(wallet->transactionHistory);\n}\n\nint main() {\n    DigitalWallet wallet;\n    initializeWallet(&wallet);\n\n    addFunds(&wallet, 100.0);\n\n    printf(\"Balance: %.2f\\n\", wallet.balance);\n\n    freeWallet(&wallet);\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a class for a cooking recipe with attributes for name, ingredients, and instructions, and a method to update the instructions.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char *name;\n    char **ingredients;\n    int num_ingredients;\n    char *instructions;\n} Recipe;\n\nvoid update_instructions(Recipe *recipe, const char *new_instructions) {\n    free(recipe->instructions);\n    recipe->instructions = (char *)malloc(strlen(new_instructions) + 1);\n    strcpy(recipe->instructions, new_instructions);\n}\n\nRecipe *create_recipe(const char *name, char **ingredients, int num_ingredients, const char *instructions) {\n    Recipe *recipe = (Recipe *)malloc(sizeof(Recipe));\n    recipe->name = (char *)malloc(strlen(name) + 1);\n    strcpy(recipe->name, name);\n\n    recipe->num_ingredients = num_ingredients;\n    recipe->ingredients = (char **)malloc(num_ingredients * sizeof(char *));\n    for (int i = 0; i < num_ingredients; i++) {\n        recipe->ingredients[i] = (char *)malloc(strlen(ingredients[i]) + 1);\n        strcpy(recipe->ingredients[i], ingredients[i]);\n    }\n\n    recipe->instructions = (char *)malloc(strlen(instructions) + 1);\n    strcpy(recipe->instructions, instructions);\n\n    return recipe;\n}\n\nvoid free_recipe(Recipe *recipe) {\n    free(recipe->name);\n    for (int i = 0; i < recipe->num_ingredients; i++) {\n        free(recipe->ingredients[i]);\n    }\n    free(recipe->ingredients);\n    free(recipe->instructions);\n    free(recipe);\n}\n\nint main() {\n    char *ingredients[] = {\"1 cup flour\", \"2 eggs\", \"1 cup sugar\"};\n    Recipe *recipe = create_recipe(\"Cake\", ingredients, 3, \"Mix ingredients and bake.\");\n    \n    update_instructions(recipe, \"Mix ingredients, bake at 350F for 30 minutes.\");\n    \n    printf(\"Recipe: %s\\nInstructions: %s\\n\", recipe->name, recipe->instructions);\n\n    free_recipe(recipe);\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a class for a time zone with properties for zone name, offset, and a method to convert time from another time zone.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct TimeZone {\n    char zoneName[50];\n    int offset; // offset in hours\n\n    int (*convertTime)(struct TimeZone *self, int timeInOriginalZone, int originalZoneOffset);\n} TimeZone;\n\nint convertTimeMethod(TimeZone *self, int timeInOriginalZone, int originalZoneOffset) {\n    return timeInOriginalZone + (self->offset - originalZoneOffset);\n}\n\nTimeZone createTimeZone(const char *name, int offset) {\n    TimeZone tz;\n    strncpy(tz.zoneName, name, 50);\n    tz.offset = offset;\n    tz.convertTime = convertTimeMethod;\n    return tz;\n}\n\nint main() {\n    TimeZone est = createTimeZone(\"EST\", -5);\n    TimeZone pst = createTimeZone(\"PST\", -8);\n\n    int timeInEST = 10; // 10 AM in EST\n    int timeInPST = pst.convertTime(&pst, timeInEST, est.offset);\n\n    printf(\"Time in %s: %d\\n\", pst.zoneName, timeInPST); // Output: Time in PST: 7\n    return 0;\n}\n```"
  },
  {
    "task": "Create a class for a camera with attributes for resolution, brand, and model, and a method to take a picture.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    int resolution;\n    char brand[50];\n    char model[50];\n} Camera;\n\nvoid take_picture(Camera *camera) {\n    printf(\"Taking a picture with %s %s at %d resolution.\\n\", camera->brand, camera->model, camera->resolution);\n}\n\nint main() {\n    Camera myCamera;\n    myCamera.resolution = 1080;\n    strcpy(myCamera.brand, \"Canon\");\n    strcpy(myCamera.model, \"EOS R5\");\n\n    take_picture(&myCamera);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a class for a gaming console with properties for brand, model, and storage capacity, and a method to install a game.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    char brand[50];\n    char model[50];\n    int storageCapacity;\n} GamingConsole;\n\nvoid installGame(GamingConsole *console, const char *gameName) {\n    printf(\"Installing '%s' on %s %s...\\n\", gameName, console->brand, console->model);\n}\n\nint main() {\n    GamingConsole console;\n    strcpy(console.brand, \"XYZ\");\n    strcpy(console.model, \"UltraPro\");\n    console.storageCapacity = 1000;\n\n    installGame(&console, \"Adventure Quest\");\n\n    return 0;\n}\n```"
  },
  {
    "task": "Formulate a class for a museum exhibit with attributes for exhibit name, artist, and year, and a method to update the year.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    char exhibitName[100];\n    char artist[100];\n    int year;\n} Exhibit;\n\nvoid updateYear(Exhibit *e, int newYear) {\n    e->year = newYear;\n}\n\nint main() {\n    Exhibit exhibit;\n    strcpy(exhibit.exhibitName, \"Starry Night\");\n    strcpy(exhibit.artist, \"Vincent van Gogh\");\n    exhibit.year = 1889;\n\n    printf(\"Before update: %s by %s, Year: %d\\n\", exhibit.exhibitName, exhibit.artist, exhibit.year);\n\n    updateYear(&exhibit, 1890);\n\n    printf(\"After update: %s by %s, Year: %d\\n\", exhibit.exhibitName, exhibit.artist, exhibit.year);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Construct a class for a fitness tracker with attributes for steps, calories burned, and heart rate, and a method to add steps.",
    "code": "```c\n#include <stdio.h>\n\ntypedef struct {\n    int steps;\n    int calories_burned;\n    int heart_rate;\n} FitnessTracker;\n\nvoid addSteps(FitnessTracker *tracker, int steps) {\n    tracker->steps += steps;\n}\n\nint main() {\n    FitnessTracker tracker = {0, 0, 0};\n    addSteps(&tracker, 1000);\n    printf(\"Steps: %d\\n\", tracker.steps);\n    return 0;\n}\n```"
  },
  {
    "task": "Build a class for an aquarium with properties for tank size, fish species, and water temperature, and a method to add a new fish.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n// Define a structure for the Aquarium class\ntypedef struct {\n    float tankSize;\n    char fishSpecies[100][50];\n    int fishCount;\n    float waterTemperature;\n} Aquarium;\n\n// Method to add a new fish\nvoid addFish(Aquarium *aquarium, const char *newFish) {\n    if (aquarium->fishCount < 100) {\n        strcpy(aquarium->fishSpecies[aquarium->fishCount], newFish);\n        aquarium->fishCount++;\n    } else {\n        printf(\"Aquarium is full, cannot add more fish.\\n\");\n    }\n}\n\n// Function to initialize an Aquarium\nAquarium createAquarium(float tankSize, float waterTemperature) {\n    Aquarium aquarium;\n    aquarium.tankSize = tankSize;\n    aquarium.waterTemperature = waterTemperature;\n    aquarium.fishCount = 0;\n    return aquarium;\n}\n\nint main() {\n    // Create an aquarium\n    Aquarium myAquarium = createAquarium(50.0, 25.0);\n\n    // Add fish to the aquarium\n    addFish(&myAquarium, \"Goldfish\");\n    addFish(&myAquarium, \"Guppy\");\n\n    // Output the details of the aquarium\n    printf(\"Aquarium Tank Size: %.2f\\n\", myAquarium.tankSize);\n    printf(\"Water Temperature: %.2f\\n\", myAquarium.waterTemperature);\n    printf(\"Fish Species:\\n\");\n    for (int i = 0; i < myAquarium.fishCount; i++) {\n        printf(\"- %s\\n\", myAquarium.fishSpecies[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a class for a chat message with attributes for sender, content, and timestamp, and a method to edit the content.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n#include <time.h>\n\n// Define a structure for a chat message\ntypedef struct {\n    char sender[50];\n    char content[255];\n    time_t timestamp;\n} ChatMessage;\n\n// Function to edit the content of the chat message\nvoid editContent(ChatMessage *msg, const char *newContent) {\n    strncpy(msg->content, newContent, sizeof(msg->content) - 1);\n    msg->content[sizeof(msg->content) - 1] = '\\0';\n}\n\nint main() {\n    // Example usage\n    ChatMessage message;\n    strcpy(message.sender, \"Alice\");\n    strcpy(message.content, \"Hello, Bob!\");\n    message.timestamp = time(NULL);\n\n    printf(\"Before edit: %s\\n\", message.content);\n    editContent(&message, \"Hi, Bob!\");\n    printf(\"After edit: %s\\n\", message.content);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a class for a vending machine with properties for items available, prices, and a method to dispense an item.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n#define MAX_ITEMS 10\n\ntypedef struct {\n    char name[50];\n    float price;\n} Item;\n\ntypedef struct {\n    Item items[MAX_ITEMS];\n    int itemCount;\n} VendingMachine;\n\nvoid initializeVendingMachine(VendingMachine* vm) {\n    vm->itemCount = 0;\n}\n\nvoid addItem(VendingMachine* vm, const char* name, float price) {\n    if (vm->itemCount < MAX_ITEMS) {\n        strcpy(vm->items[vm->itemCount].name, name);\n        vm->items[vm->itemCount].price = price;\n        vm->itemCount++;\n    }\n}\n\nvoid dispenseItem(VendingMachine* vm, const char* name) {\n    for (int i = 0; i < vm->itemCount; i++) {\n        if (strcmp(vm->items[i].name, name) == 0) {\n            printf(\"Dispensing item: %s\\n\", vm->items[i].name);\n            return;\n        }\n    }\n    printf(\"Item not found: %s\\n\", name);\n}\n\nint main() {\n    VendingMachine vm;\n    initializeVendingMachine(&vm);\n    addItem(&vm, \"Soda\", 1.25);\n    addItem(&vm, \"Chips\", 0.99);\n    dispenseItem(&vm, \"Soda\");\n    dispenseItem(&vm, \"Juice\");\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a class for a digital clock with attributes for current time, time zone, and a method to set an alarm.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    int hours;\n    int minutes;\n    int seconds;\n    char timeZone[6];\n    int alarmHours;\n    int alarmMinutes;\n    int alarmSeconds;\n    int alarmSet;\n} DigitalClock;\n\nvoid setAlarm(DigitalClock *clock, int hours, int minutes, int seconds) {\n    clock->alarmHours = hours;\n    clock->alarmMinutes = minutes;\n    clock->alarmSeconds = seconds;\n    clock->alarmSet = 1;\n}\n\nvoid displayClock(const DigitalClock *clock) {\n    printf(\"Current Time: %02d:%02d:%02d %s\\n\", clock->hours, clock->minutes, clock->seconds, clock->timeZone);\n    if (clock->alarmSet) {\n        printf(\"Alarm Set For: %02d:%02d:%02d\\n\", clock->alarmHours, clock->alarmMinutes, clock->alarmSeconds);\n    } else {\n        printf(\"No Alarm Set\\n\");\n    }\n}\n\nint main() {\n    DigitalClock myClock = {12, 30, 45, \"GMT\", 0, 0, 0, 0};\n    displayClock(&myClock);\n    setAlarm(&myClock, 6, 30, 0);\n    displayClock(&myClock);\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a class for a historical figure with attributes for name, birthdate, and achievements, and a method to add an achievement.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char *name;\n    char *birthdate;\n    char **achievements;\n    int achievements_count;\n} HistoricalFigure;\n\nvoid initHistoricalFigure(HistoricalFigure *hf, const char *name, const char *birthdate) {\n    hf->name = strdup(name);\n    hf->birthdate = strdup(birthdate);\n    hf->achievements = NULL;\n    hf->achievements_count = 0;\n}\n\nvoid addAchievement(HistoricalFigure *hf, const char *achievement) {\n    hf->achievements = realloc(hf->achievements, (hf->achievements_count + 1) * sizeof(char *));\n    hf->achievements[hf->achievements_count] = strdup(achievement);\n    hf->achievements_count++;\n}\n\nvoid freeHistoricalFigure(HistoricalFigure *hf) {\n    free(hf->name);\n    free(hf->birthdate);\n    for (int i = 0; i < hf->achievements_count; i++) {\n        free(hf->achievements[i]);\n    }\n    free(hf->achievements);\n}\n\nint main() {\n    HistoricalFigure figure;\n    initHistoricalFigure(&figure, \"Albert Einstein\", \"March 14, 1879\");\n\n    addAchievement(&figure, \"Theory of Relativity\");\n    addAchievement(&figure, \"Photoelectric Effect\");\n\n    freeHistoricalFigure(&figure);\n    return 0;\n}\n```"
  },
  {
    "task": "Formulate a class for a travel itinerary with attributes for destinations, travel dates, and activities, and a method to add a destination.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char **destinations;\n    char **travel_dates;\n    char **activities;\n    int destination_count;\n} TravelItinerary;\n\nvoid add_destination(TravelItinerary *itinerary, const char *destination, const char *date, const char *activity) {\n    itinerary->destination_count++;\n    itinerary->destinations = (char **)realloc(itinerary->destinations, itinerary->destination_count * sizeof(char *));\n    itinerary->travel_dates = (char **)realloc(itinerary->travel_dates, itinerary->destination_count * sizeof(char *));\n    itinerary->activities = (char **)realloc(itinerary->activities, itinerary->destination_count * sizeof(char *));\n\n    itinerary->destinations[itinerary->destination_count - 1] = strdup(destination);\n    itinerary->travel_dates[itinerary->destination_count - 1] = strdup(date);\n    itinerary->activities[itinerary->destination_count - 1] = strdup(activity);\n}\n\nint main() {\n    TravelItinerary itinerary = { NULL, NULL, NULL, 0 };\n\n    add_destination(&itinerary, \"Paris\", \"2023-10-15\", \"Eiffel Tower Visit\");\n    add_destination(&itinerary, \"Rome\", \"2023-10-20\", \"Colosseum Tour\");\n\n    for (int i = 0; i < itinerary.destination_count; i++) {\n        printf(\"Destination: %s, Date: %s, Activity: %s\\n\", \n               itinerary.destinations[i], \n               itinerary.travel_dates[i], \n               itinerary.activities[i]);\n        free(itinerary.destinations[i]);\n        free(itinerary.travel_dates[i]);\n        free(itinerary.activities[i]);\n    }\n\n    free(itinerary.destinations);\n    free(itinerary.travel_dates);\n    free(itinerary.activities);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Construct a class for a fashion brand with properties for brand name, founder, and product lines, and a method to launch a new product line.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    char brandName[50];\n    char founder[50];\n    char productLines[10][50];\n    int productLineCount;\n} FashionBrand;\n\nvoid launchNewProductLine(FashionBrand *brand, const char *newProductLine) {\n    if (brand->productLineCount < 10) {\n        strcpy(brand->productLines[brand->productLineCount], newProductLine);\n        brand->productLineCount++;\n    } else {\n        printf(\"Cannot add more product lines.\\n\");\n    }\n}\n\nint main() {\n    FashionBrand brand;\n    strcpy(brand.brandName, \"Fashionista\");\n    strcpy(brand.founder, \"Jane Doe\");\n    brand.productLineCount = 0;\n\n    launchNewProductLine(&brand, \"Spring Collection\");\n    launchNewProductLine(&brand, \"Summer Collection\");\n\n    printf(\"Brand: %s\\n\", brand.brandName);\n    printf(\"Founder: %s\\n\", brand.founder);\n    printf(\"Product Lines:\\n\");\n    for (int i = 0; i < brand.productLineCount; i++) {\n        printf(\"- %s\\n\", brand.productLines[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a class for a video game with attributes for title, genre, and rating, and a method to update the rating.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n// Define the VideoGame class\ntypedef struct {\n    char title[50];\n    char genre[50];\n    float rating;\n} VideoGame;\n\n// Method to update the rating\nvoid updateRating(VideoGame *game, float newRating) {\n    game->rating = newRating;\n}\n\nint main() {\n    // Example usage\n    VideoGame game;\n    strcpy(game.title, \"Example Game\");\n    strcpy(game.genre, \"Adventure\");\n    game.rating = 4.5;\n\n    printf(\"Title: %s\\n\", game.title);\n    printf(\"Genre: %s\\n\", game.genre);\n    printf(\"Rating: %.1f\\n\", game.rating);\n\n    updateRating(&game, 4.8);\n    printf(\"Updated Rating: %.1f\\n\", game.rating);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Build a class for a scientific experiment with attributes for experiment name, hypothesis, and results, and a method to record results.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    char experiment_name[100];\n    char hypothesis[256];\n    char results[256];\n} Experiment;\n\nvoid record_results(Experiment *exp, const char *new_results) {\n    strncpy(exp->results, new_results, sizeof(exp->results) - 1);\n    exp->results[sizeof(exp->results) - 1] = '\\0';  // Ensure null-termination\n}\n\nint main() {\n    Experiment exp;\n    strncpy(exp.experiment_name, \"Gravity Test\", sizeof(exp.experiment_name) - 1);\n    strncpy(exp.hypothesis, \"Objects fall at the same rate.\", sizeof(exp.hypothesis) - 1);\n\n    record_results(&exp, \"All objects fell at the same rate.\");\n\n    printf(\"Experiment: %s\\n\", exp.experiment_name);\n    printf(\"Hypothesis: %s\\n\", exp.hypothesis);\n    printf(\"Results: %s\\n\", exp.results);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a class for a gourmet dish with properties for dish name, ingredients, and cooking time, and a method to change cooking time.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    char dishName[100];\n    char ingredients[256];\n    int cookingTime;\n} GourmetDish;\n\nvoid changeCookingTime(GourmetDish *dish, int newTime) {\n    dish->cookingTime = newTime;\n}\n\nint main() {\n    GourmetDish dish;\n    \n    strcpy(dish.dishName, \"Truffle Pasta\");\n    strcpy(dish.ingredients, \"Pasta, Truffle, Garlic, Olive Oil\");\n    dish.cookingTime = 20;\n    \n    printf(\"Original Cooking Time: %d\\n\", dish.cookingTime);\n    \n    changeCookingTime(&dish, 25);\n    printf(\"Updated Cooking Time: %d\\n\", dish.cookingTime);\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Implement a class for a political office with attributes for office title, holder, and term length, and a method to change the holder.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    char title[100];\n    char holder[100];\n    int term_length;\n} PoliticalOffice;\n\nvoid changeHolder(PoliticalOffice *office, const char *new_holder) {\n    strncpy(office->holder, new_holder, sizeof(office->holder) - 1);\n    office->holder[sizeof(office->holder) - 1] = '\\0';\n}\n\nint main() {\n    PoliticalOffice office;\n    strncpy(office.title, \"President\", sizeof(office.title) - 1);\n    office.title[sizeof(office.title) - 1] = '\\0';\n    strncpy(office.holder, \"John Doe\", sizeof(office.holder) - 1);\n    office.holder[sizeof(office.holder) - 1] = '\\0';\n    office.term_length = 4;\n\n    printf(\"Office: %s\\n\", office.title);\n    printf(\"Holder: %s\\n\", office.holder);\n    printf(\"Term Length: %d years\\n\", office.term_length);\n\n    changeHolder(&office, \"Jane Smith\");\n\n    printf(\"New Holder: %s\\n\", office.holder);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a class for an astronomical object with properties for name, type, and distance from Earth, and a method to update the distance.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    char name[50];\n    char type[50];\n    double distanceFromEarth;\n} AstronomicalObject;\n\nvoid updateDistance(AstronomicalObject *obj, double newDistance) {\n    obj->distanceFromEarth = newDistance;\n}\n\nint main() {\n    AstronomicalObject obj;\n    strcpy(obj.name, \"Proxima Centauri\");\n    strcpy(obj.type, \"Star\");\n    obj.distanceFromEarth = 4.24;\n\n    printf(\"Name: %s\\nType: %s\\nDistance: %.2f light years\\n\", obj.name, obj.type, obj.distanceFromEarth);\n\n    updateDistance(&obj, 4.25);\n    printf(\"Updated Distance: %.2f light years\\n\", obj.distanceFromEarth);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Formulate a class for a public transportation route with attributes for route number, stops, and schedule, and a method to add a stop.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    int routeNumber;\n    char **stops;\n    char **schedule;\n    int numStops;\n    int numScheduleEntries;\n} Route;\n\nvoid addStop(Route *route, const char *newStop) {\n    route->stops = realloc(route->stops, (route->numStops + 1) * sizeof(char *));\n    route->stops[route->numStops] = strdup(newStop);\n    route->numStops++;\n}\n\nint main() {\n    Route route;\n    route.routeNumber = 42;\n    route.stops = NULL;\n    route.schedule = NULL;\n    route.numStops = 0;\n    route.numScheduleEntries = 0;\n\n    addStop(&route, \"Main Street\");\n    addStop(&route, \"Central Station\");\n\n    for (int i = 0; i < route.numStops; i++) {\n        printf(\"Stop %d: %s\\n\", i + 1, route.stops[i]);\n        free(route.stops[i]);\n    }\n    free(route.stops);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Construct a class for a board game with properties for game name, player count, and rules, and a method to change the rules.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n#define MAX_NAME_LENGTH 100\n#define MAX_RULES_LENGTH 500\n\ntypedef struct {\n    char gameName[MAX_NAME_LENGTH];\n    int playerCount;\n    char rules[MAX_RULES_LENGTH];\n} BoardGame;\n\nvoid changeRules(BoardGame *game, const char *newRules) {\n    strncpy(game->rules, newRules, MAX_RULES_LENGTH - 1);\n    game->rules[MAX_RULES_LENGTH - 1] = '\\0'; // Ensure null termination\n}\n\nint main() {\n    BoardGame game;\n\n    strncpy(game.gameName, \"Chess\", MAX_NAME_LENGTH - 1);\n    game.gameName[MAX_NAME_LENGTH - 1] = '\\0';\n    \n    game.playerCount = 2;\n    \n    strncpy(game.rules, \"Standard chess rules\", MAX_RULES_LENGTH - 1);\n    game.rules[MAX_RULES_LENGTH - 1] = '\\0';\n    \n    printf(\"Game: %s\\nPlayers: %d\\nRules: %s\\n\", game.gameName, game.playerCount, game.rules);\n\n    changeRules(&game, \"New custom chess rules\");\n    \n    printf(\"Updated Rules: %s\\n\", game.rules);\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Create a class for a customer loyalty program with attributes for program name, points, and rewards, and a method to redeem points.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    char programName[50];\n    int points;\n    char rewards[100];\n} CustomerLoyaltyProgram;\n\nvoid redeemPoints(CustomerLoyaltyProgram *program, int pointsToRedeem) {\n    if (program->points >= pointsToRedeem) {\n        program->points -= pointsToRedeem;\n        printf(\"Redeemed %d points. Remaining points: %d\\n\", pointsToRedeem, program->points);\n    } else {\n        printf(\"Not enough points to redeem.\\n\");\n    }\n}\n\nint main() {\n    CustomerLoyaltyProgram program;\n    strcpy(program.programName, \"Super Saver\");\n    program.points = 100;\n    strcpy(program.rewards, \"Free Coffee\");\n\n    printf(\"Program Name: %s\\n\", program.programName);\n    printf(\"Points: %d\\n\", program.points);\n    printf(\"Rewards: %s\\n\", program.rewards);\n\n    redeemPoints(&program, 50);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a class for an art gallery with properties for gallery name, location, and exhibitions, and a method to add a new exhibition.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char name[100];\n    char location[100];\n    char exhibitions[100][100];\n    int exhibitionCount;\n} ArtGallery;\n\nvoid addExhibition(ArtGallery* gallery, const char* exhibition) {\n    if (gallery->exhibitionCount < 100) {\n        strcpy(gallery->exhibitions[gallery->exhibitionCount], exhibition);\n        gallery->exhibitionCount++;\n    } else {\n        printf(\"Exhibition limit reached.\\n\");\n    }\n}\n\nvoid initArtGallery(ArtGallery* gallery, const char* name, const char* location) {\n    strcpy(gallery->name, name);\n    strcpy(gallery->location, location);\n    gallery->exhibitionCount = 0;\n}\n\nint main() {\n    ArtGallery gallery;\n    initArtGallery(&gallery, \"Modern Art Gallery\", \"New York\");\n    addExhibition(&gallery, \"Impressionist Art\");\n    addExhibition(&gallery, \"Contemporary Art\");\n\n    printf(\"Gallery: %s\\nLocation: %s\\n\", gallery.name, gallery.location);\n    for (int i = 0; i < gallery.exhibitionCount; i++) {\n        printf(\"Exhibition %d: %s\\n\", i + 1, gallery.exhibitions[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Build a class for a personal blog with attributes for blog name, posts, and a method to add a new post.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char **posts;\n    int postCount;\n    int capacity;\n} Blog;\n\nvoid initBlog(Blog *blog, int initialCapacity) {\n    blog->posts = (char **)malloc(initialCapacity * sizeof(char *));\n    blog->postCount = 0;\n    blog->capacity = initialCapacity;\n}\n\nvoid addPost(Blog *blog, const char *newPost) {\n    if (blog->postCount >= blog->capacity) {\n        blog->capacity *= 2;\n        blog->posts = (char **)realloc(blog->posts, blog->capacity * sizeof(char *));\n    }\n    blog->posts[blog->postCount] = strdup(newPost);\n    blog->postCount++;\n}\n\nvoid freeBlog(Blog *blog) {\n    for (int i = 0; i < blog->postCount; i++) {\n        free(blog->posts[i]);\n    }\n    free(blog->posts);\n}\n\nint main() {\n    Blog myBlog;\n    initBlog(&myBlog, 2);\n    addPost(&myBlog, \"Hello World!\");\n    addPost(&myBlog, \"Another post\");\n\n    for (int i = 0; i < myBlog.postCount; i++) {\n        printf(\"%s\\n\", myBlog.posts[i]);\n    }\n\n    freeBlog(&myBlog);\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a class for a mobile application with properties for app name, version, and developer, and a method to update the version.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    char appName[100];\n    char version[20];\n    char developer[100];\n} MobileApp;\n\nvoid updateVersion(MobileApp *app, const char *newVersion) {\n    strncpy(app->version, newVersion, sizeof(app->version) - 1);\n    app->version[sizeof(app->version) - 1] = '\\0'; // Ensure null-termination\n}\n\nint main() {\n    MobileApp app;\n    strncpy(app.appName, \"ExampleApp\", sizeof(app.appName) - 1);\n    app.appName[sizeof(app.appName) - 1] = '\\0';\n    strncpy(app.version, \"1.0.0\", sizeof(app.version) - 1);\n    app.version[sizeof(app.version) - 1] = '\\0';\n    strncpy(app.developer, \"ExampleDev\", sizeof(app.developer) - 1);\n    app.developer[sizeof(app.developer) - 1] = '\\0';\n\n    printf(\"App Name: %s\\n\", app.appName);\n    printf(\"Version: %s\\n\", app.version);\n    printf(\"Developer: %s\\n\", app.developer);\n\n    updateVersion(&app, \"1.1.0\");\n    printf(\"Updated Version: %s\\n\", app.version);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a class for a language translator with attributes for source language, target language, and translation method, and a method to translate a text.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    char sourceLanguage[50];\n    char targetLanguage[50];\n    char translationMethod[50];\n} LanguageTranslator;\n\nvoid translate(LanguageTranslator *translator, const char *text) {\n    printf(\"Translating from %s to %s using %s method: %s\\n\", \n           translator->sourceLanguage, \n           translator->targetLanguage, \n           translator->translationMethod, \n           text);\n}\n\nint main() {\n    LanguageTranslator translator;\n    strcpy(translator.sourceLanguage, \"English\");\n    strcpy(translator.targetLanguage, \"Spanish\");\n    strcpy(translator.translationMethod, \"Neural Machine Translation\");\n\n    translate(&translator, \"Hello, world!\");\n    return 0;\n}\n```"
  },
  {
    "task": "Formulate a class for a culinary school with properties for school name, courses offered, and a method to add a new course.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n#define MAX_COURSES 100\n#define MAX_NAME_LEN 50\n\ntypedef struct {\n    char name[MAX_NAME_LEN];\n    char courses[MAX_COURSES][MAX_NAME_LEN];\n    int course_count;\n} CulinarySchool;\n\nvoid addCourse(CulinarySchool *school, const char *course) {\n    if (school->course_count < MAX_COURSES) {\n        strncpy(school->courses[school->course_count], course, MAX_NAME_LEN);\n        school->courses[school->course_count][MAX_NAME_LEN - 1] = '\\0';\n        school->course_count++;\n    } else {\n        printf(\"Cannot add more courses, maximum reached.\\n\");\n    }\n}\n\nint main() {\n    CulinarySchool school;\n    strncpy(school.name, \"Gourmet Institute\", MAX_NAME_LEN);\n    school.name[MAX_NAME_LEN - 1] = '\\0';\n    school.course_count = 0;\n\n    addCourse(&school, \"Baking Basics\");\n    addCourse(&school, \"Italian Cuisine\");\n\n    printf(\"School Name: %s\\n\", school.name);\n    printf(\"Courses Offered:\\n\");\n    for (int i = 0; i < school.course_count; i++) {\n        printf(\"%s\\n\", school.courses[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Construct a class for a musical band with attributes for band name, members, and genre, and a method to add a new member.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char *name;\n    char **members;\n    int member_count;\n    char *genre;\n} Band;\n\nvoid add_member(Band *band, const char *new_member) {\n    band->members = realloc(band->members, (band->member_count + 1) * sizeof(char *));\n    band->members[band->member_count] = strdup(new_member);\n    band->member_count++;\n}\n\nint main() {\n    Band myBand;\n    myBand.name = strdup(\"The Rockers\");\n    myBand.genre = strdup(\"Rock\");\n    myBand.members = NULL;\n    myBand.member_count = 0;\n\n    add_member(&myBand, \"Alice\");\n    add_member(&myBand, \"Bob\");\n\n    // Clean up\n    for (int i = 0; i < myBand.member_count; i++) {\n        free(myBand.members[i]);\n    }\n    free(myBand.members);\n    free(myBand.name);\n    free(myBand.genre);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a class for a television series with properties for series title, episodes, and network, and a method to add a new episode.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char title[100];\n    int episodes;\n    char network[100];\n} TelevisionSeries;\n\nvoid addEpisode(TelevisionSeries *series) {\n    series->episodes += 1;\n}\n\nint main() {\n    TelevisionSeries mySeries;\n    strcpy(mySeries.title, \"My Favorite Show\");\n    mySeries.episodes = 10;\n    strcpy(mySeries.network, \"Awesome Network\");\n\n    printf(\"Series: %s\\nEpisodes: %d\\nNetwork: %s\\n\", mySeries.title, mySeries.episodes, mySeries.network);\n\n    addEpisode(&mySeries);\n\n    printf(\"After adding an episode:\\nEpisodes: %d\\n\", mySeries.episodes);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a class for a wildlife reserve with attributes for reserve name, species protected, and area size, and a method to expand the area.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    char reserve_name[100];\n    char species_protected[100];\n    double area_size;\n} WildlifeReserve;\n\nvoid expand_area(WildlifeReserve *reserve, double additional_area) {\n    reserve->area_size += additional_area;\n}\n\nint main() {\n    WildlifeReserve reserve;\n    strcpy(reserve.reserve_name, \"Savannah Reserve\");\n    strcpy(reserve.species_protected, \"Elephants\");\n    reserve.area_size = 1500.0;\n\n    printf(\"Before expansion:\\n\");\n    printf(\"Reserve Name: %s\\n\", reserve.reserve_name);\n    printf(\"Species Protected: %s\\n\", reserve.species_protected);\n    printf(\"Area Size: %.2f\\n\", reserve.area_size);\n\n    expand_area(&reserve, 500.0);\n\n    printf(\"\\nAfter expansion:\\n\");\n    printf(\"Reserve Name: %s\\n\", reserve.reserve_name);\n    printf(\"Species Protected: %s\\n\", reserve.species_protected);\n    printf(\"Area Size: %.2f\\n\", reserve.area_size);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Build a class for a luxury car with properties for brand, model, and price, and a method to update the price.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    char brand[50];\n    char model[50];\n    double price;\n} LuxuryCar;\n\nvoid updatePrice(LuxuryCar *car, double newPrice) {\n    car->price = newPrice;\n}\n\nint main() {\n    LuxuryCar car;\n    strcpy(car.brand, \"ExampleBrand\");\n    strcpy(car.model, \"ExampleModel\");\n    car.price = 50000.00;\n\n    printf(\"Brand: %s\\nModel: %s\\nPrice: %.2f\\n\", car.brand, car.model, car.price);\n\n    updatePrice(&car, 55000.00);\n\n    printf(\"Updated Price: %.2f\\n\", car.price);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a class for a scientific journal with attributes for journal name, articles, and impact factor, and a method to add a new article.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MAX_ARTICLES 100\n#define MAX_TITLE_LENGTH 100\n\ntypedef struct {\n    char title[MAX_TITLE_LENGTH];\n} Article;\n\ntypedef struct {\n    char name[MAX_TITLE_LENGTH];\n    Article articles[MAX_ARTICLES];\n    int article_count;\n    double impact_factor;\n} ScientificJournal;\n\nvoid add_article(ScientificJournal *journal, const char *title) {\n    if (journal->article_count < MAX_ARTICLES) {\n        strncpy(journal->articles[journal->article_count].title, title, MAX_TITLE_LENGTH - 1);\n        journal->articles[journal->article_count].title[MAX_TITLE_LENGTH - 1] = '\\0'; // Ensure null-termination\n        journal->article_count++;\n    } else {\n        printf(\"Cannot add more articles, limit reached.\\n\");\n    }\n}\n\nint main() {\n    ScientificJournal journal;\n    strcpy(journal.name, \"Journal of Science\");\n    journal.article_count = 0;\n    journal.impact_factor = 3.5;\n\n    add_article(&journal, \"New Discoveries in Quantum Physics\");\n\n    printf(\"Journal Name: %s\\n\", journal.name);\n    printf(\"Impact Factor: %.1f\\n\", journal.impact_factor);\n    printf(\"Number of Articles: %d\\n\", journal.article_count);\n    for (int i = 0; i < journal.article_count; i++) {\n        printf(\"Article %d: %s\\n\", i + 1, journal.articles[i].title);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a class for a historical monument with properties for monument name, location, and year established, and a method to update the location.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    char name[100];\n    char location[100];\n    int yearEstablished;\n} HistoricalMonument;\n\nvoid updateLocation(HistoricalMonument *monument, const char *newLocation) {\n    strcpy(monument->location, newLocation);\n}\n\nint main() {\n    HistoricalMonument monument;\n    strcpy(monument.name, \"Eiffel Tower\");\n    strcpy(monument.location, \"Paris\");\n    monument.yearEstablished = 1889;\n\n    printf(\"Monument: %s\\nLocation: %s\\nYear Established: %d\\n\", \n           monument.name, monument.location, monument.yearEstablished);\n\n    updateLocation(&monument, \"New Location\");\n    printf(\"Updated Location: %s\\n\", monument.location);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Formulate a class for an educational course with attributes for course title, instructor, and syllabus, and a method to update the syllabus.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    char title[100];\n    char instructor[100];\n    char syllabus[500];\n} Course;\n\nvoid updateSyllabus(Course *course, const char *newSyllabus) {\n    strncpy(course->syllabus, newSyllabus, sizeof(course->syllabus) - 1);\n    course->syllabus[sizeof(course->syllabus) - 1] = '\\0';\n}\n\nint main() {\n    Course course;\n    strncpy(course.title, \"Introduction to Programming\", sizeof(course.title) - 1);\n    strncpy(course.instructor, \"Dr. Smith\", sizeof(course.instructor) - 1);\n    strncpy(course.syllabus, \"Basic programming concepts\", sizeof(course.syllabus) - 1);\n\n    printf(\"Original Syllabus: %s\\n\", course.syllabus);\n\n    updateSyllabus(&course, \"Advanced programming concepts\");\n    printf(\"Updated Syllabus: %s\\n\", course.syllabus);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Construct a class for a city park with properties for park name, facilities, and opening hours, and a method to add a new facility.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char name[100];\n    char facilities[10][100];\n    int facilityCount;\n    char openingHours[100];\n} CityPark;\n\nvoid addFacility(CityPark *park, const char *facility) {\n    if (park->facilityCount < 10) {\n        strcpy(park->facilities[park->facilityCount], facility);\n        park->facilityCount++;\n    } else {\n        printf(\"Cannot add more facilities.\\n\");\n    }\n}\n\nint main() {\n    CityPark park;\n    strcpy(park.name, \"Central Park\");\n    strcpy(park.openingHours, \"6:00 AM to 10:00 PM\");\n    park.facilityCount = 0;\n\n    addFacility(&park, \"Playground\");\n    addFacility(&park, \"Picnic Area\");\n\n    printf(\"Park Name: %s\\n\", park.name);\n    printf(\"Opening Hours: %s\\n\", park.openingHours);\n    printf(\"Facilities:\\n\");\n    for (int i = 0; i < park.facilityCount; i++) {\n        printf(\"- %s\\n\", park.facilities[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a class for a fitness class with attributes for class name, instructor, and schedule, and a method to update the schedule.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    char className[50];\n    char instructor[50];\n    char schedule[100];\n} FitnessClass;\n\nvoid updateSchedule(FitnessClass *fc, const char *newSchedule) {\n    strncpy(fc->schedule, newSchedule, sizeof(fc->schedule) - 1);\n    fc->schedule[sizeof(fc->schedule) - 1] = '\\0';\n}\n\nint main() {\n    FitnessClass yogaClass;\n\n    strncpy(yogaClass.className, \"Yoga Basics\", sizeof(yogaClass.className) - 1);\n    yogaClass.className[sizeof(yogaClass.className) - 1] = '\\0';\n\n    strncpy(yogaClass.instructor, \"Alice Smith\", sizeof(yogaClass.instructor) - 1);\n    yogaClass.instructor[sizeof(yogaClass.instructor) - 1] = '\\0';\n\n    strncpy(yogaClass.schedule, \"Monday 8 AM\", sizeof(yogaClass.schedule) - 1);\n    yogaClass.schedule[sizeof(yogaClass.schedule) - 1] = '\\0';\n\n    printf(\"Original Schedule: %s\\n\", yogaClass.schedule);\n    \n    updateSchedule(&yogaClass, \"Wednesday 6 PM\");\n    printf(\"Updated Schedule: %s\\n\", yogaClass.schedule);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a class for a virtual reality game with properties for game name, platform, and VR compatibility, and a method to change the platform.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    char gameName[100];\n    char platform[100];\n    int vrCompatible;\n} VRGame;\n\nvoid changePlatform(VRGame *game, const char *newPlatform) {\n    strncpy(game->platform, newPlatform, sizeof(game->platform) - 1);\n    game->platform[sizeof(game->platform) - 1] = '\\0';\n}\n\nint main() {\n    VRGame game;\n    strncpy(game.gameName, \"Virtual Adventure\", sizeof(game.gameName) - 1);\n    game.gameName[sizeof(game.gameName) - 1] = '\\0';\n    strncpy(game.platform, \"PC\", sizeof(game.platform) - 1);\n    game.platform[sizeof(game.platform) - 1] = '\\0';\n    game.vrCompatible = 1;\n\n    printf(\"Game: %s\\nPlatform: %s\\nVR Compatible: %d\\n\", game.gameName, game.platform, game.vrCompatible);\n\n    changePlatform(&game, \"VR Console\");\n\n    printf(\"Updated Platform: %s\\n\", game.platform);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Build a class for a mountain range with attributes for range name, highest peak, and countries covered, and a method to add a new peak.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char *peakName;\n    int height;\n} Peak;\n\ntypedef struct {\n    char *rangeName;\n    Peak highestPeak;\n    char **countries;\n    int countryCount;\n    Peak *additionalPeaks;\n    int peakCount;\n} MountainRange;\n\nvoid addNewPeak(MountainRange *range, char *peakName, int height) {\n    range->additionalPeaks = (Peak *)realloc(range->additionalPeaks, (range->peakCount + 1) * sizeof(Peak));\n    range->additionalPeaks[range->peakCount].peakName = (char *)malloc((strlen(peakName) + 1) * sizeof(char));\n    strcpy(range->additionalPeaks[range->peakCount].peakName, peakName);\n    range->additionalPeaks[range->peakCount].height = height;\n    range->peakCount++;\n}\n\nint main() {\n    MountainRange range;\n    range.rangeName = \"Himalayas\";\n    range.highestPeak.peakName = \"Mount Everest\";\n    range.highestPeak.height = 8848;\n    range.countries = (char **)malloc(2 * sizeof(char *));\n    range.countries[0] = \"Nepal\";\n    range.countries[1] = \"China\";\n    range.countryCount = 2;\n    range.additionalPeaks = NULL;\n    range.peakCount = 0;\n\n    addNewPeak(&range, \"K2\", 8611);\n\n    printf(\"Mountain Range: %s\\n\", range.rangeName);\n    printf(\"Highest Peak: %s, %d m\\n\", range.highestPeak.peakName, range.highestPeak.height);\n    printf(\"Countries Covered: \");\n    for (int i = 0; i < range.countryCount; i++) {\n        printf(\"%s\", range.countries[i]);\n        if (i < range.countryCount - 1) {\n            printf(\", \");\n        }\n    }\n    printf(\"\\nAdditional Peaks:\\n\");\n    for (int i = 0; i < range.peakCount; i++) {\n        printf(\"%s, %d m\\n\", range.additionalPeaks[i].peakName, range.additionalPeaks[i].height);\n    }\n\n    // Free allocated memory\n    free(range.countries);\n    for (int i = 0; i < range.peakCount; i++) {\n        free(range.additionalPeaks[i].peakName);\n    }\n    free(range.additionalPeaks);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a class for a documentary film with properties for title, director, and subject, and a method to update the subject.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    char title[100];\n    char director[100];\n    char subject[100];\n} DocumentaryFilm;\n\nvoid updateSubject(DocumentaryFilm *film, const char *newSubject) {\n    strcpy(film->subject, newSubject);\n}\n\nint main() {\n    DocumentaryFilm film;\n\n    strcpy(film.title, \"The Social Dilemma\");\n    strcpy(film.director, \"Jeff Orlowski\");\n    strcpy(film.subject, \"Technology\");\n\n    printf(\"Before update: %s\\n\", film.subject);\n    \n    updateSubject(&film, \"Social media\");\n    \n    printf(\"After update: %s\\n\", film.subject);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a class for a classical music composition with attributes for composition name, composer, and duration, and a method to change the duration.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    char composition_name[100];\n    char composer[100];\n    int duration; // duration in minutes\n} ClassicalComposition;\n\nvoid change_duration(ClassicalComposition *comp, int new_duration) {\n    comp->duration = new_duration;\n}\n\nint main() {\n    ClassicalComposition comp;\n    strcpy(comp.composition_name, \"Symphony No. 9\");\n    strcpy(comp.composer, \"Ludwig van Beethoven\");\n    comp.duration = 70;\n\n    printf(\"Original Duration: %d minutes\\n\", comp.duration);\n    change_duration(&comp, 75);\n    printf(\"New Duration: %d minutes\\n\", comp.duration);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Formulate a class for a public library with properties for library name, books available, and membership, and a method to add a new book.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char title[100];\n} Book;\n\ntypedef struct {\n    char libraryName[100];\n    Book* books;\n    int booksCount;\n    int membership;\n} Library;\n\nvoid addBook(Library* library, const char* bookTitle) {\n    library->books = realloc(library->books, (library->booksCount + 1) * sizeof(Book));\n    strcpy(library->books[library->booksCount].title, bookTitle);\n    library->booksCount++;\n}\n\nint main() {\n    Library myLibrary;\n    strcpy(myLibrary.libraryName, \"Central Library\");\n    myLibrary.books = NULL;\n    myLibrary.booksCount = 0;\n    myLibrary.membership = 100;\n\n    addBook(&myLibrary, \"The Great Gatsby\");\n    addBook(&myLibrary, \"1984\");\n\n    printf(\"Library Name: %s\\n\", myLibrary.libraryName);\n    printf(\"Books Available: %d\\n\", myLibrary.booksCount);\n    printf(\"Membership: %d\\n\", myLibrary.membership);\n\n    for (int i = 0; i < myLibrary.booksCount; i++) {\n        printf(\"Book %d: %s\\n\", i + 1, myLibrary.books[i].title);\n    }\n\n    free(myLibrary.books);\n    return 0;\n}\n```"
  },
  {
    "task": "Construct a class for a tech startup with attributes for startup name, founder, and funding, and a method to raise additional funding.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    char name[100];\n    char founder[100];\n    double funding;\n} TechStartup;\n\nvoid raiseFunding(TechStartup *startup, double additionalFunding) {\n    startup->funding += additionalFunding;\n}\n\nint main() {\n    TechStartup startup;\n    \n    strcpy(startup.name, \"InnovTech\");\n    strcpy(startup.founder, \"John Doe\");\n    startup.funding = 1000000.0;\n    \n    printf(\"Startup: %s\\n\", startup.name);\n    printf(\"Founder: %s\\n\", startup.founder);\n    printf(\"Current Funding: $%.2f\\n\", startup.funding);\n    \n    raiseFunding(&startup, 500000.0);\n    \n    printf(\"Updated Funding: $%.2f\\n\", startup.funding);\n    \n    return 0;\n}\n```"
  }
]