[
  {
    "task": "Create a function that initializes an array with the first ten prime numbers.",
    "code": "```c\n#include <stdio.h>\n\nvoid initializePrimes(int primes[]) {\n    int firstTenPrimes[10] = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29};\n    for (int i = 0; i < 10; i++) {\n        primes[i] = firstTenPrimes[i];\n    }\n}\n\nint main() {\n    int primes[10];\n    initializePrimes(primes);\n    for (int i = 0; i < 10; i++) {\n        printf(\"%d \", primes[i]);\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program to reverse the elements of a given array.",
    "code": "```c\n#include <stdio.h>\n\nvoid reverseArray(int arr[], int size) {\n    int start = 0;\n    int end = size - 1;\n    while (start < end) {\n        int temp = arr[start];\n        arr[start] = arr[end];\n        arr[end] = temp;\n        start++;\n        end--;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n\n    reverseArray(arr, size);\n\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement an algorithm that finds the maximum value in an array of integers.",
    "code": "```c\n#include <stdio.h>\n\nint findMaxValue(int arr[], int size) {\n    if (size <= 0) return -1; // Handle empty array case\n    int max = arr[0];\n    for (int i = 1; i < size; i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n    }\n    return max;\n}\n\nint main() {\n    int array[] = {3, 5, 7, 2, 8, 6};\n    int size = sizeof(array) / sizeof(array[0]);\n    int maxValue = findMaxValue(array, size);\n    printf(\"The maximum value in the array is: %d\\n\", maxValue);\n    return 0;\n}\n```"
  },
  {
    "task": "Design a routine to rotate an array to the right by a given number of steps.",
    "code": "```c\n#include <stdio.h>\n\nvoid rotateArray(int arr[], int n, int steps) {\n    int temp[n];\n    steps = steps % n; // In case steps are greater than n\n\n    for (int i = 0; i < n; i++) {\n        temp[(i + steps) % n] = arr[i];\n    }\n\n    for (int i = 0; i < n; i++) {\n        arr[i] = temp[i];\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int n = sizeof(arr) / sizeof(arr[0]);\n    int steps = 2;\n\n    rotateArray(arr, n, steps);\n\n    for (int i = 0; i < n; i++) {\n        printf(\"%d \", arr[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a function to merge two sorted arrays into one sorted array.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\nint* mergeSortedArrays(int* array1, int size1, int* array2, int size2, int* mergedSize) {\n    int* mergedArray = (int*)malloc((size1 + size2) * sizeof(int));\n    int i = 0, j = 0, k = 0;\n\n    while (i < size1 && j < size2) {\n        if (array1[i] <= array2[j]) {\n            mergedArray[k++] = array1[i++];\n        } else {\n            mergedArray[k++] = array2[j++];\n        }\n    }\n\n    while (i < size1) {\n        mergedArray[k++] = array1[i++];\n    }\n\n    while (j < size2) {\n        mergedArray[k++] = array2[j++];\n    }\n\n    *mergedSize = size1 + size2;\n    return mergedArray;\n}\n\nint main() {\n    int array1[] = {1, 3, 5, 7};\n    int array2[] = {2, 4, 6, 8};\n    int mergedSize;\n    int* mergedArray = mergeSortedArrays(array1, 4, array2, 4, &mergedSize);\n\n    for (int i = 0; i < mergedSize; i++) {\n        printf(\"%d \", mergedArray[i]);\n    }\n    printf(\"\\n\");\n\n    free(mergedArray);\n    return 0;\n}\n```"
  },
  {
    "task": "Create a method to remove duplicate values from an array.",
    "code": "```c\n#include <stdio.h>\n\nvoid removeDuplicates(int *arr, int *n) {\n    int i, j, k;\n    for (i = 0; i < *n; i++) {\n        for (j = i + 1; j < *n; ) {\n            if (arr[i] == arr[j]) {\n                for (k = j; k < *n - 1; k++) {\n                    arr[k] = arr[k + 1];\n                }\n                (*n)--;\n            } else {\n                j++;\n            }\n        }\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 2, 3, 4, 4, 5, 5, 5};\n    int n = sizeof(arr) / sizeof(arr[0]);\n    int i;\n\n    removeDuplicates(arr, &n);\n\n    printf(\"Array after removing duplicates:\\n\");\n    for (i = 0; i < n; i++) {\n        printf(\"%d \", arr[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a script to calculate the sum of all elements in an array.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int array[] = {1, 2, 3, 4, 5}; // Example array\n    int sum = 0;\n    int length = sizeof(array) / sizeof(array[0]);\n\n    for(int i = 0; i < length; i++) {\n        sum += array[i];\n    }\n\n    printf(\"Sum of array elements: %d\\n\", sum);\n    return 0;\n}\n```"
  },
  {
    "task": "Construct a function that finds the second largest element in an array.",
    "code": "```c\n#include <stdio.h>\n\nint findSecondLargest(int arr[], int length) {\n    if (length < 2) {\n        return -1; // Return -1 if there is no second largest element\n    }\n\n    int first, second;\n    first = second = -1;\n\n    for (int i = 0; i < length; i++) {\n        if (arr[i] > first) {\n            second = first;\n            first = arr[i];\n        } else if (arr[i] > second && arr[i] != first) {\n            second = arr[i];\n        }\n    }\n\n    return second;\n}\n\nint main() {\n    int arr[] = {10, 20, 4, 45, 99};\n    int length = sizeof(arr) / sizeof(arr[0]);\n    int secondLargest = findSecondLargest(arr, length);\n    printf(\"The second largest element is %d\\n\", secondLargest);\n    return 0;\n}\n```"
  },
  {
    "task": "Design a program to check if an array contains a specific value.",
    "code": "```c\n#include <stdio.h>\n#include <stdbool.h>\n\nbool contains(int arr[], int size, int value) {\n    for (int i = 0; i < size; i++) {\n        if (arr[i] == value) {\n            return true;\n        }\n    }\n    return false;\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    int value = 3;\n\n    if (contains(arr, size, value)) {\n        printf(\"Array contains the value %d.\\n\", value);\n    } else {\n        printf(\"Array does not contain the value %d.\\n\", value);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function to sort an array of strings alphabetically.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nvoid sortStrings(char *arr[], int n) {\n    char *temp;\n    for (int i = 0; i < n - 1; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (strcmp(arr[i], arr[j]) > 0) {\n                temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n}\n\nint main() {\n    char *arr[] = {\"banana\", \"apple\", \"orange\", \"mango\"};\n    int n = sizeof(arr) / sizeof(arr[0]);\n\n    sortStrings(arr, n);\n\n    for (int i = 0; i < n; i++) {\n        printf(\"%s\\n\", arr[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a method to search for a value in an array using binary search.",
    "code": "```c\n#include <stdio.h>\n\nint binarySearch(int arr[], int size, int target) {\n    int left = 0;\n    int right = size - 1;\n    \n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        \n        if (arr[mid] == target) {\n            return mid;\n        } else if (arr[mid] < target) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    \n    return -1;\n}\n\nint main() {\n    int arr[] = {2, 3, 4, 10, 40};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    int target = 10;\n    int result = binarySearch(arr, size, target);\n    \n    if (result != -1) {\n        printf(\"Element found at index %d\\n\", result);\n    } else {\n        printf(\"Element not found\\n\");\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Write a routine to calculate the average of numbers in an array.",
    "code": "```c\n#include <stdio.h>\n\ndouble calculateAverage(int arr[], int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    return (double)sum / size;\n}\n\nint main() {\n    int numbers[] = {1, 2, 3, 4, 5};\n    int size = sizeof(numbers) / sizeof(numbers[0]);\n    double average = calculateAverage(numbers, size);\n    printf(\"Average: %.2f\\n\", average);\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a function to find the intersection of two arrays.",
    "code": "```c\n#include <stdio.h>\n\nvoid findIntersection(int *arr1, int size1, int *arr2, int size2, int *result, int *resultSize) {\n    int k = 0;\n    for (int i = 0; i < size1; i++) {\n        for (int j = 0; j < size2; j++) {\n            if (arr1[i] == arr2[j]) {\n                int isDuplicate = 0;\n                for (int m = 0; m < k; m++) {\n                    if (result[m] == arr1[i]) {\n                        isDuplicate = 1;\n                        break;\n                    }\n                }\n                if (!isDuplicate) {\n                    result[k++] = arr1[i];\n                }\n                break;\n            }\n        }\n    }\n    *resultSize = k;\n}\n\nint main() {\n    int arr1[] = {1, 2, 3, 4, 5};\n    int arr2[] = {3, 4, 5, 6, 7};\n    int result[5];\n    int resultSize;\n\n    findIntersection(arr1, 5, arr2, 5, result, &resultSize);\n\n    printf(\"Intersection: \");\n    for (int i = 0; i < resultSize; i++) {\n        printf(\"%d \", result[i]);\n    }\n    printf(\"\\n\");\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a method to find the union of two arrays without duplicates.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\nvoid findUnion(int *arr1, int size1, int *arr2, int size2) {\n    int *unionArr = (int *)malloc((size1 + size2) * sizeof(int));\n    int unionSize = 0;\n    \n    for (int i = 0; i < size1; i++) {\n        int found = 0;\n        for (int j = 0; j < unionSize; j++) {\n            if (unionArr[j] == arr1[i]) {\n                found = 1;\n                break;\n            }\n        }\n        if (!found) {\n            unionArr[unionSize++] = arr1[i];\n        }\n    }\n\n    for (int i = 0; i < size2; i++) {\n        int found = 0;\n        for (int j = 0; j < unionSize; j++) {\n            if (unionArr[j] == arr2[i]) {\n                found = 1;\n                break;\n            }\n        }\n        if (!found) {\n            unionArr[unionSize++] = arr2[i];\n        }\n    }\n\n    for (int i = 0; i < unionSize; i++) {\n        printf(\"%d \", unionArr[i]);\n    }\n    printf(\"\\n\");\n\n    free(unionArr);\n}\n\nint main() {\n    int arr1[] = {1, 2, 3, 4, 5};\n    int arr2[] = {4, 5, 6, 7, 8};\n    int size1 = sizeof(arr1) / sizeof(arr1[0]);\n    int size2 = sizeof(arr2) / sizeof(arr2[0]);\n\n    findUnion(arr1, size1, arr2, size2);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a program that shifts all zeroes in an array to the end.",
    "code": "```c\n#include <stdio.h>\n\nvoid shiftZeroesToEnd(int arr[], int size) {\n    int count = 0; // Count of non-zero elements\n\n    // Traverse the array. If element encountered is non-zero, then\n    // replace the element at index 'count' with this element\n    for (int i = 0; i < size; i++) {\n        if (arr[i] != 0) {\n            arr[count++] = arr[i];\n        }\n    }\n\n    // Now all non-zero elements have been shifted to front and 'count' is\n    // set as index of first 0. Make all elements 0 from count to end.\n    while (count < size) {\n        arr[count++] = 0;\n    }\n}\n\nint main() {\n    int arr[] = {0, 1, 0, 3, 12};\n    int size = sizeof(arr) / sizeof(arr[0]);\n\n    shiftZeroesToEnd(arr, size);\n\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function to split an array into two parts at a given index.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\nvoid splitArray(int* array, int size, int index, int** firstPart, int* firstSize, int** secondPart, int* secondSize) {\n    if (index < 0 || index > size) {\n        *firstPart = NULL;\n        *secondPart = NULL;\n        *firstSize = 0;\n        *secondSize = 0;\n        return;\n    }\n\n    *firstSize = index;\n    *secondSize = size - index;\n\n    *firstPart = (int*)malloc(*firstSize * sizeof(int));\n    *secondPart = (int*)malloc(*secondSize * sizeof(int));\n\n    for (int i = 0; i < *firstSize; i++) {\n        (*firstPart)[i] = array[i];\n    }\n\n    for (int i = 0; i < *secondSize; i++) {\n        (*secondPart)[i] = array[index + i];\n    }\n}\n\nint main() {\n    int array[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n    int size = 10;\n    int index = 5;\n    int *firstPart = NULL, *secondPart = NULL;\n    int firstSize, secondSize;\n\n    splitArray(array, size, index, &firstPart, &firstSize, &secondPart, &secondSize);\n\n    // Example usage of the split parts\n    printf(\"First part: \");\n    for (int i = 0; i < firstSize; i++) {\n        printf(\"%d \", firstPart[i]);\n    }\n    printf(\"\\nSecond part: \");\n    for (int i = 0; i < secondSize; i++) {\n        printf(\"%d \", secondPart[i]);\n    }\n\n    free(firstPart);\n    free(secondPart);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a script to find all pairs in an array that sum up to a specific target.",
    "code": "```c\n#include <stdio.h>\n\nvoid findPairs(int arr[], int size, int target) {\n    for (int i = 0; i < size; i++) {\n        for (int j = i + 1; j < size; j++) {\n            if (arr[i] + arr[j] == target) {\n                printf(\"Pair found: (%d, %d)\\n\", arr[i], arr[j]);\n            }\n        }\n    }\n}\n\nint main() {\n    int arr[] = {2, 4, 3, 5, 7, 8, 1};\n    int target = 9;\n    int size = sizeof(arr)/sizeof(arr[0]);\n    findPairs(arr, size, target);\n    return 0;\n}\n```"
  },
  {
    "task": "Construct a method to remove all occurrences of a specific value from an array.",
    "code": "```c\n#include <stdio.h>\n\nvoid removeValue(int* arr, int* size, int value) {\n    int j = 0;\n    for (int i = 0; i < *size; i++) {\n        if (arr[i] != value) {\n            arr[j++] = arr[i];\n        }\n    }\n    *size = j;\n}\n\nint main() {\n    int arr[] = {3, 1, 2, 3, 4, 3, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    int valueToRemove = 3;\n\n    removeValue(arr, &size, valueToRemove);\n\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function to find the longest increasing subsequence in an array.",
    "code": "```c\n#include <stdio.h>\n\nint longestIncreasingSubsequence(int arr[], int n) {\n    if (n == 0) return 0;\n    int lis[n];\n    for (int i = 0; i < n; i++) lis[i] = 1;\n\n    for (int i = 1; i < n; i++) {\n        for (int j = 0; j < i; j++) {\n            if (arr[i] > arr[j] && lis[i] < lis[j] + 1) {\n                lis[i] = lis[j] + 1;\n            }\n        }\n    }\n\n    int max = 0;\n    for (int i = 0; i < n; i++) {\n        if (lis[i] > max) {\n            max = lis[i];\n        }\n    }\n    return max;\n}\n\nint main() {\n    int arr[] = {10, 22, 9, 33, 21, 50, 41, 60};\n    int n = sizeof(arr) / sizeof(arr[0]);\n    printf(\"Length of longest increasing subsequence is %d\\n\", longestIncreasingSubsequence(arr, n));\n    return 0;\n}\n```"
  },
  {
    "task": "Develop an algorithm to find the missing number in a sequential array.",
    "code": "```c\n#include <stdio.h>\n\nint findMissingNumber(int arr[], int size) {\n    int total = (size + 1) * (size + 2) / 2;\n    for (int i = 0; i < size; i++) {\n        total -= arr[i];\n    }\n    return total;\n}\n\nint main() {\n    int arr[] = {1, 2, 4, 5, 6};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    int missingNumber = findMissingNumber(arr, size);\n    printf(\"The missing number is: %d\\n\", missingNumber);\n    return 0;\n}\n```"
  },
  {
    "task": "Create a program to find the common elements between two arrays.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int array1[] = {1, 2, 3, 4, 5};\n    int array2[] = {3, 4, 5, 6, 7};\n    int size1 = sizeof(array1) / sizeof(array1[0]);\n    int size2 = sizeof(array2) / sizeof(array2[0]);\n\n    printf(\"Common elements: \");\n    for (int i = 0; i < size1; i++) {\n        for (int j = 0; j < size2; j++) {\n            if (array1[i] == array2[j]) {\n                printf(\"%d \", array1[i]);\n                break;\n            }\n        }\n    }\n    printf(\"\\n\");\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function to move all negative numbers to the beginning of an array.",
    "code": "```c\n#include <stdio.h>\n\nvoid moveNegativesToFront(int arr[], int size) {\n    int temp[size];\n    int index = 0;\n\n    // Move negative numbers to temp array\n    for (int i = 0; i < size; i++) {\n        if (arr[i] < 0) {\n            temp[index++] = arr[i];\n        }\n    }\n\n    // Move non-negative numbers to temp array\n    for (int i = 0; i < size; i++) {\n        if (arr[i] >= 0) {\n            temp[index++] = arr[i];\n        }\n    }\n\n    // Copy temp array back to original array\n    for (int i = 0; i < size; i++) {\n        arr[i] = temp[i];\n    }\n}\n\nint main() {\n    int arr[] = {1, -2, 3, -4, 5, -6, 7, 8, -9};\n    int size = sizeof(arr) / sizeof(arr[0]);\n\n    moveNegativesToFront(arr, size);\n\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a method to check if an array is a palindrome.",
    "code": "```c\n#include <stdbool.h>\n#include <stdio.h>\n\nbool isPalindrome(int arr[], int size) {\n    for (int i = 0; i < size / 2; i++) {\n        if (arr[i] != arr[size - 1 - i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 2, 1};\n    int size = sizeof(arr) / sizeof(arr[0]);\n\n    if (isPalindrome(arr, size)) {\n        printf(\"The array is a palindrome.\\n\");\n    } else {\n        printf(\"The array is not a palindrome.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a routine to create a new array that is the element-wise sum of two input arrays.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\nint* elementwise_sum(int* array1, int* array2, int size) {\n    int* result = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        result[i] = array1[i] + array2[i];\n    }\n    return result;\n}\n\nint main() {\n    int array1[] = {1, 2, 3, 4, 5};\n    int array2[] = {5, 4, 3, 2, 1};\n    int size = sizeof(array1) / sizeof(array1[0]);\n\n    int* result = elementwise_sum(array1, array2, size);\n\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", result[i]);\n    }\n    printf(\"\\n\");\n\n    free(result);\n    return 0;\n}\n```"
  },
  {
    "task": "Create a function to find the product of all elements in an array, excluding the current element.",
    "code": "```c\n#include <stdio.h>\n\nvoid productExceptSelf(int* nums, int numsSize, int* output) {\n    int leftProduct = 1;\n    for (int i = 0; i < numsSize; i++) {\n        output[i] = leftProduct;\n        leftProduct *= nums[i];\n    }\n    \n    int rightProduct = 1;\n    for (int i = numsSize - 1; i >= 0; i--) {\n        output[i] *= rightProduct;\n        rightProduct *= nums[i];\n    }\n}\n\nint main() {\n    int nums[] = {1, 2, 3, 4};\n    int size = sizeof(nums) / sizeof(nums[0]);\n    int output[size];\n\n    productExceptSelf(nums, size, output);\n\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", output[i]);\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Develop a script to remove elements from an array that are smaller than a given threshold.",
    "code": "```c\n#include <stdio.h>\n\nvoid removeElements(int *arr, int *size, int threshold) {\n    int i, j = 0;\n    for (i = 0; i < *size; i++) {\n        if (arr[i] >= threshold) {\n            arr[j++] = arr[i];\n        }\n    }\n    *size = j;\n}\n\nint main() {\n    int arr[] = {1, 5, 3, 7, 2, 8, 4};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    int threshold = 4;\n    \n    removeElements(arr, &size, threshold);\n    \n    printf(\"Filtered array: \");\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Implement a method to clone an array without using built-in functions.",
    "code": "```c\n#include <stdio.h>\n\nvoid cloneArray(int* source, int* destination, int length) {\n    for (int i = 0; i < length; i++) {\n        destination[i] = source[i];\n    }\n}\n\nint main() {\n    int original[] = {1, 2, 3, 4, 5};\n    int length = sizeof(original) / sizeof(original[0]);\n    int cloned[length];\n\n    cloneArray(original, cloned, length);\n\n    // Example Usage: Printing the cloned array\n    for (int i = 0; i < length; i++) {\n        printf(\"%d \", cloned[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a program that rotates a 2D array (matrix) 90 degrees clockwise.",
    "code": "```c\n#include <stdio.h>\n\n#define N 3\n\nvoid rotateMatrix(int matrix[N][N]) {\n    int rotated[N][N];\n    for (int i = 0; i < N; i++) {\n        for (int j = 0; j < N; j++) {\n            rotated[j][N - 1 - i] = matrix[i][j];\n        }\n    }\n    for (int i = 0; i < N; i++) {\n        for (int j = 0; j < N; j++) {\n            matrix[i][j] = rotated[i][j];\n        }\n    }\n}\n\nvoid printMatrix(int matrix[N][N]) {\n    for (int i = 0; i < N; i++) {\n        for (int j = 0; j < N; j++) {\n            printf(\"%d \", matrix[i][j]);\n        }\n        printf(\"\\n\");\n    }\n}\n\nint main() {\n    int matrix[N][N] = {\n        {1, 2, 3},\n        {4, 5, 6},\n        {7, 8, 9}\n    };\n\n    printf(\"Original Matrix:\\n\");\n    printMatrix(matrix);\n\n    rotateMatrix(matrix);\n\n    printf(\"Rotated Matrix:\\n\");\n    printMatrix(matrix);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function to find the kth smallest element in an unsorted array.",
    "code": "```c\n#include <stdio.h>\n\nint partition(int arr[], int low, int high) {\n    int pivot = arr[high];\n    int i = low - 1;\n    for (int j = low; j < high; j++) {\n        if (arr[j] < pivot) {\n            i++;\n            int temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n        }\n    }\n    int temp = arr[i + 1];\n    arr[i + 1] = arr[high];\n    arr[high] = temp;\n    return i + 1;\n}\n\nint quickSelect(int arr[], int low, int high, int k) {\n    if (low <= high) {\n        int pi = partition(arr, low, high);\n        if (pi == k) {\n            return arr[pi];\n        } else if (pi < k) {\n            return quickSelect(arr, pi + 1, high, k);\n        } else {\n            return quickSelect(arr, low, pi - 1, k);\n        }\n    }\n    return -1;\n}\n\nint findKthSmallest(int arr[], int n, int k) {\n    if (k > 0 && k <= n) {\n        return quickSelect(arr, 0, n - 1, k - 1);\n    }\n    return -1;\n}\n\nint main() {\n    int arr[] = {7, 10, 4, 3, 20, 15};\n    int n = sizeof(arr) / sizeof(arr[0]);\n    int k = 3;\n    int result = findKthSmallest(arr, n, k);\n    if (result != -1) {\n        printf(\"The %dth smallest element is %d\\n\", k, result);\n    } else {\n        printf(\"Invalid input\\n\");\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Design a routine to partition an array into even and odd numbers.",
    "code": "```c\n#include <stdio.h>\n\nvoid partitionArray(int *arr, int size, int *even, int *odd, int *evenCount, int *oddCount) {\n    *evenCount = 0;\n    *oddCount = 0;\n    for (int i = 0; i < size; i++) {\n        if (arr[i] % 2 == 0) {\n            even[*evenCount] = arr[i];\n            (*evenCount)++;\n        } else {\n            odd[*oddCount] = arr[i];\n            (*oddCount)++;\n        }\n    }\n}\n\nint main() {\n    int arr[] = {12, 3, 5, 8, 7, 6, 14, 9};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    int even[size], odd[size];\n    int evenCount, oddCount;\n\n    partitionArray(arr, size, even, odd, &evenCount, &oddCount);\n\n    printf(\"Even numbers: \");\n    for (int i = 0; i < evenCount; i++) {\n        printf(\"%d \", even[i]);\n    }\n    printf(\"\\n\");\n\n    printf(\"Odd numbers: \");\n    for (int i = 0; i < oddCount; i++) {\n        printf(\"%d \", odd[i]);\n    }\n    printf(\"\\n\");\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a method to merge overlapping intervals in an array.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int start;\n    int end;\n} Interval;\n\nint compareIntervals(const void *a, const void *b) {\n    Interval *intervalA = (Interval *)a;\n    Interval *intervalB = (Interval *)b;\n    return intervalA->start - intervalB->start;\n}\n\nInterval* mergeIntervals(Interval* intervals, int intervalsSize, int* returnSize) {\n    if (intervalsSize == 0) {\n        *returnSize = 0;\n        return NULL;\n    }\n    \n    qsort(intervals, intervalsSize, sizeof(Interval), compareIntervals);\n\n    Interval* merged = (Interval*)malloc(sizeof(Interval) * intervalsSize);\n    int index = 0;\n    merged[index] = intervals[0];\n    \n    for (int i = 1; i < intervalsSize; i++) {\n        if (merged[index].end >= intervals[i].start) {\n            if (merged[index].end < intervals[i].end) {\n                merged[index].end = intervals[i].end;\n            }\n        } else {\n            index++;\n            merged[index] = intervals[i];\n        }\n    }\n    \n    *returnSize = index + 1;\n    return merged;\n}\n\nint main() {\n    Interval intervals[] = {{1, 3}, {2, 6}, {8, 10}, {15, 18}};\n    int intervalsSize = sizeof(intervals) / sizeof(intervals[0]);\n    int returnSize;\n    Interval* merged = mergeIntervals(intervals, intervalsSize, &returnSize);\n    \n    for (int i = 0; i < returnSize; i++) {\n        printf(\"[%d, %d] \", merged[i].start, merged[i].end);\n    }\n    \n    free(merged);\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a function to count the frequency of each unique element in an array.",
    "code": "```c\n#include <stdio.h>\n\nvoid countFrequencies(int arr[], int size) {\n    int visited[size];\n    for (int i = 0; i < size; i++) {\n        visited[i] = 0;\n    }\n\n    for (int i = 0; i < size; i++) {\n        if (visited[i] == 1)\n            continue;\n\n        int count = 1;\n        for (int j = i + 1; j < size; j++) {\n            if (arr[i] == arr[j]) {\n                visited[j] = 1;\n                count++;\n            }\n        }\n        printf(\"Element %d occurs %d times\\n\", arr[i], count);\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 2, 3, 4, 4, 4, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n\n    countFrequencies(arr, size);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program to generate all possible subsets of an array.",
    "code": "```c\n#include <stdio.h>\n\nvoid printSubset(int arr[], int n, int subset[], int subsetSize) {\n    printf(\"{ \");\n    for (int i = 0; i < subsetSize; i++) {\n        printf(\"%d \", subset[i]);\n    }\n    printf(\"}\\n\");\n}\n\nvoid generateSubsets(int arr[], int n, int index, int subset[], int subsetSize) {\n    if (index == n) {\n        printSubset(arr, n, subset, subsetSize);\n        return;\n    }\n    generateSubsets(arr, n, index + 1, subset, subsetSize);\n    subset[subsetSize] = arr[index];\n    generateSubsets(arr, n, index + 1, subset, subsetSize + 1);\n}\n\nint main() {\n    int arr[] = {1, 2, 3};\n    int n = sizeof(arr) / sizeof(arr[0]);\n    int subset[n];\n    generateSubsets(arr, n, 0, subset, 0);\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a routine to cyclically permute the elements of an array.",
    "code": "```c\n#include <stdio.h>\n\nvoid cyclicPermute(int arr[], int n) {\n    if (n <= 1) return;\n\n    int last = arr[n - 1];\n    for (int i = n - 1; i > 0; i--) {\n        arr[i] = arr[i - 1];\n    }\n    arr[0] = last;\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int n = sizeof(arr) / sizeof(arr[0]);\n\n    cyclicPermute(arr, n);\n\n    for (int i = 0; i < n; i++) {\n        printf(\"%d \", arr[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a function that checks if two arrays are equal regardless of element order.",
    "code": "```c\n#include <stdio.h>\n#include <stdbool.h>\n\nbool areArraysEqual(int *arr1, int size1, int *arr2, int size2) {\n    if (size1 != size2) {\n        return false;\n    }\n    \n    int count1[1001] = {0};\n    int count2[1001] = {0};\n    \n    for (int i = 0; i < size1; i++) {\n        count1[arr1[i]]++;\n    }\n    \n    for (int i = 0; i < size2; i++) {\n        count2[arr2[i]]++;\n    }\n    \n    for (int i = 0; i < 1001; i++) {\n        if (count1[i] != count2[i]) {\n            return false;\n        }\n    }\n    \n    return true;\n}\n\nint main() {\n    int arr1[] = {1, 2, 3, 4};\n    int arr2[] = {4, 3, 2, 1};\n    int size1 = sizeof(arr1) / sizeof(arr1[0]);\n    int size2 = sizeof(arr2) / sizeof(arr2[0]);\n    \n    if (areArraysEqual(arr1, size1, arr2, size2)) {\n        printf(\"Arrays are equal.\\n\");\n    } else {\n        printf(\"Arrays are not equal.\\n\");\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Design a script to initialize an array with random integers within a specified range.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\n#define ARRAY_SIZE 10\n#define MIN_VALUE 1\n#define MAX_VALUE 100\n\nint main() {\n    int array[ARRAY_SIZE];\n    srand(time(NULL));\n\n    for(int i = 0; i < ARRAY_SIZE; i++) {\n        array[i] = rand() % (MAX_VALUE - MIN_VALUE + 1) + MIN_VALUE;\n    }\n\n    for(int i = 0; i < ARRAY_SIZE; i++) {\n        printf(\"%d \", array[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a method to convert an array of integers to a single concatenated number.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\nint concatenateArrayToNumber(int* arr, int size) {\n    char buffer[1024] = \"\"; // assume the buffer is large enough\n    for (int i = 0; i < size; i++) {\n        char temp[12];\n        sprintf(temp, \"%d\", arr[i]);\n        strcat(buffer, temp);\n    }\n    return atoi(buffer);\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    int result = concatenateArrayToNumber(arr, size);\n    printf(\"Concatenated Number: %d\\n\", result);\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a function to find the median value of an unsorted array.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\nint compare(const void *a, const void *b) {\n    return (*(int *)a - *(int *)b);\n}\n\ndouble findMedian(int *arr, int size) {\n    qsort(arr, size, sizeof(int), compare);\n    if (size % 2 == 0) {\n        return (arr[size / 2 - 1] + arr[size / 2]) / 2.0;\n    } else {\n        return arr[size / 2];\n    }\n}\n\nint main() {\n    int arr[] = {3, 1, 4, 2, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    double median = findMedian(arr, size);\n    printf(\"Median: %f\\n\", median);\n    return 0;\n}\n```"
  },
  {
    "task": "Create a routine to determine if an array is sorted in ascending order.",
    "code": "```c\n#include <stdbool.h>\n\nbool isSortedAscending(int arr[], int length) {\n    for (int i = 0; i < length - 1; i++) {\n        if (arr[i] > arr[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n```"
  },
  {
    "task": "Implement a method to find the longest contiguous subarray with equal number of 0s and 1s.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\nint findMaxLength(int* nums, int numsSize) {\n    int* map = (int*)malloc((2 * numsSize + 1) * sizeof(int));\n    for (int i = 0; i < 2 * numsSize + 1; i++) {\n        map[i] = -2;\n    }\n    map[numsSize] = -1;\n    int maxLen = 0, count = 0;\n\n    for (int i = 0; i < numsSize; i++) {\n        count += nums[i] == 1 ? 1 : -1;\n        if (map[count + numsSize] >= -1) {\n            if (i - map[count + numsSize] > maxLen) {\n                maxLen = i - map[count + numsSize];\n            }\n        } else {\n            map[count + numsSize] = i;\n        }\n    }\n\n    free(map);\n    return maxLen;\n}\n\nint main() {\n    int nums[] = {0, 1, 0, 1, 0, 1, 0, 0, 1};\n    int size = sizeof(nums) / sizeof(nums[0]);\n    int maxLength = findMaxLength(nums, size);\n    printf(\"The longest contiguous subarray with equal number of 0s and 1s is of length: %d\\n\", maxLength);\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function to interleave two arrays of equal length.",
    "code": "```c\n#include <stdio.h>\n\nvoid interleaveArrays(int *arr1, int *arr2, int *result, int length) {\n    for (int i = 0, j = 0; i < length; i++) {\n        result[j++] = arr1[i];\n        result[j++] = arr2[i];\n    }\n}\n\nint main() {\n    int arr1[] = {1, 3, 5};\n    int arr2[] = {2, 4, 6};\n    int length = sizeof(arr1) / sizeof(arr1[0]);\n    int result[2 * length];\n\n    interleaveArrays(arr1, arr2, result, length);\n\n    for (int i = 0; i < 2 * length; i++) {\n        printf(\"%d \", result[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a program to replace each element in an array with the next greatest element.",
    "code": "```c\n#include <stdio.h>\n\nvoid replaceWithNextGreatest(int arr[], int size) {\n    int maxFromRight = arr[size - 1];\n    arr[size - 1] = -1;\n    \n    for (int i = size - 2; i >= 0; i--) {\n        int temp = arr[i];\n        arr[i] = maxFromRight;\n        if (temp > maxFromRight) {\n            maxFromRight = temp;\n        }\n    }\n}\n\nint main() {\n    int arr[] = {16, 17, 4, 3, 5, 2};\n    int size = sizeof(arr) / sizeof(arr[0]);\n\n    replaceWithNextGreatest(arr, size);\n\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a function to calculate the dot product of two numeric arrays.",
    "code": "```c\n#include <stdio.h>\n\ndouble dot_product(double *array1, double *array2, int size) {\n    double result = 0.0;\n    for (int i = 0; i < size; i++) {\n        result += array1[i] * array2[i];\n    }\n    return result;\n}\n\nint main() {\n    double array1[] = {1.0, 2.0, 3.0};\n    double array2[] = {4.0, 5.0, 6.0};\n    int size = 3;\n    double result = dot_product(array1, array2, size);\n    printf(\"Dot product: %f\\n\", result);\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a script to find the first recurring element in an array.",
    "code": "```c\n#include <stdio.h>\n\nint findFirstRecurring(int arr[], int size) {\n    int hash[256] = {0};\n    for (int i = 0; i < size; i++) {\n        if (hash[arr[i]] == 1) {\n            return arr[i];\n        }\n        hash[arr[i]]++;\n    }\n    return -1; // Return -1 if no recurring element is found\n}\n\nint main() {\n    int arr[] = {2, 5, 1, 2, 3, 5, 1, 2, 4};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    int result = findFirstRecurring(arr, size);\n    if (result != -1) {\n        printf(\"First recurring element: %d\\n\", result);\n    } else {\n        printf(\"No recurring element found\\n\");\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Write a method to check if an array is a subset of another array.",
    "code": "```c\n#include <stdio.h>\n#include <stdbool.h>\n\nbool isSubset(int arr1[], int size1, int arr2[], int size2) {\n    for (int i = 0; i < size2; i++) {\n        bool found = false;\n        for (int j = 0; j < size1; j++) {\n            if (arr2[i] == arr1[j]) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint main() {\n    int arr1[] = {1, 2, 3, 4, 5};\n    int arr2[] = {2, 3, 4};\n    int size1 = sizeof(arr1) / sizeof(arr1[0]);\n    int size2 = sizeof(arr2) / sizeof(arr2[0]);\n\n    if (isSubset(arr1, size1, arr2, size2)) {\n        printf(\"arr2 is a subset of arr1\\n\");\n    } else {\n        printf(\"arr2 is not a subset of arr1\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function to add a specific value to each element in an array.",
    "code": "```c\n#include <stdio.h>\n\nvoid addValueToArray(int *array, int size, int valueToAdd) {\n    for (int i = 0; i < size; i++) {\n        array[i] += valueToAdd;\n    }\n}\n\nint main() {\n    int array[] = {1, 2, 3, 4, 5};\n    int size = sizeof(array) / sizeof(array[0]);\n    int valueToAdd = 10;\n\n    addValueToArray(array, size, valueToAdd);\n\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", array[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a program that finds the largest product of three numbers in an array.",
    "code": "```c\n#include <stdio.h>\n\nint findMaxProduct(int arr[], int n) {\n    if (n < 3) return 0;\n\n    int max1 = -1000000, max2 = -1000000, max3 = -1000000;\n    int min1 = 1000000, min2 = 1000000;\n\n    for (int i = 0; i < n; i++) {\n        if (arr[i] > max1) {\n            max3 = max2;\n            max2 = max1;\n            max1 = arr[i];\n        } else if (arr[i] > max2) {\n            max3 = max2;\n            max2 = arr[i];\n        } else if (arr[i] > max3) {\n            max3 = arr[i];\n        }\n\n        if (arr[i] < min1) {\n            min2 = min1;\n            min1 = arr[i];\n        } else if (arr[i] < min2) {\n            min2 = arr[i];\n        }\n    }\n\n    int product1 = max1 * max2 * max3;\n    int product2 = max1 * min1 * min2;\n\n    return product1 > product2 ? product1 : product2;\n}\n\nint main() {\n    int arr[] = {10, -10, 5, 2, 9, -3, 7};\n    int n = sizeof(arr) / sizeof(arr[0]);\n    int maxProduct = findMaxProduct(arr, n);\n    printf(\"Maximum product of three numbers is: %d\\n\", maxProduct);\n    return 0;\n}\n```"
  },
  {
    "task": "Design a routine to find all unique permutations of an array.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint shouldSwap(int *arr, int start, int curr) {\n    for (int i = start; i < curr; i++) {\n        if (arr[i] == arr[curr]) {\n            return 0;\n        }\n    }\n    return 1;\n}\n\nvoid findPermutations(int *arr, int index, int n) {\n    if (index >= n) {\n        for (int i = 0; i < n; i++) {\n            printf(\"%d \", arr[i]);\n        }\n        printf(\"\\n\");\n        return;\n    }\n\n    for (int i = index; i < n; i++) {\n        if (shouldSwap(arr, index, i)) {\n            swap(&arr[index], &arr[i]);\n            findPermutations(arr, index + 1, n);\n            swap(&arr[index], &arr[i]);\n        }\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 2};\n    int n = sizeof(arr) / sizeof(arr[0]);\n    findPermutations(arr, 0, n);\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function to transpose a square matrix represented as a 2D array.",
    "code": "```c\n#include <stdio.h>\n\n#define N 4 // Define the size of the square matrix\n\nvoid transposeMatrix(int matrix[N][N]) {\n    for (int i = 0; i < N; i++) {\n        for (int j = i + 1; j < N; j++) {\n            int temp = matrix[i][j];\n            matrix[i][j] = matrix[j][i];\n            matrix[j][i] = temp;\n        }\n    }\n}\n\nvoid printMatrix(int matrix[N][N]) {\n    for (int i = 0; i < N; i++) {\n        for (int j = 0; j < N; j++) {\n            printf(\"%d \", matrix[i][j]);\n        }\n        printf(\"\\n\");\n    }\n}\n\nint main() {\n    int matrix[N][N] = {\n        {1, 2, 3, 4},\n        {5, 6, 7, 8},\n        {9, 10, 11, 12},\n        {13, 14, 15, 16}\n    };\n\n    printf(\"Original matrix:\\n\");\n    printMatrix(matrix);\n\n    transposeMatrix(matrix);\n\n    printf(\"\\nTransposed matrix:\\n\");\n    printMatrix(matrix);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a method to find the longest common prefix in an array of strings.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nchar* longestCommonPrefix(char** strs, int strsSize) {\n    if (strsSize == 0) return \"\";\n    char* prefix = strs[0];\n    for (int i = 1; i < strsSize; i++) {\n        while (strstr(strs[i], prefix) != strs[i]) {\n            prefix[strlen(prefix) - 1] = '\\0';\n            if (strlen(prefix) == 0) return \"\";\n        }\n    }\n    return prefix;\n}\n\nint main() {\n    char* strs[] = {\"flower\", \"flow\", \"flight\"};\n    int strsSize = sizeof(strs) / sizeof(strs[0]);\n    printf(\"Longest Common Prefix: %s\\n\", longestCommonPrefix(strs, strsSize));\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function to flatten a multi-dimensional array into a single array.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\nvoid flatten(int *input, int *output, int *dims, int numDims, int currentDim, int *currentIndex) {\n    if (currentDim == numDims - 1) {\n        for (int i = 0; i < dims[currentDim]; i++) {\n            output[*currentIndex] = input[i];\n            (*currentIndex)++;\n        }\n    } else {\n        for (int i = 0; i < dims[currentDim]; i++) {\n            flatten(input + i * dims[currentDim + 1], output, dims, numDims, currentDim + 1, currentIndex);\n        }\n    }\n}\n\nint main() {\n    int dims[] = {2, 3, 4}; // Example dimensions for a 3D array\n    int numDims = sizeof(dims) / sizeof(dims[0]);\n    int totalSize = 1;\n    for (int i = 0; i < numDims; i++) {\n        totalSize *= dims[i];\n    }\n\n    int *multiArray = (int *)malloc(totalSize * sizeof(int));\n    int *flatArray = (int *)malloc(totalSize * sizeof(int));\n\n    // Initialize the multi-dimensional array with some values\n    for (int i = 0; i < totalSize; i++) {\n        multiArray[i] = i + 1;\n    }\n\n    int currentIndex = 0;\n    flatten(multiArray, flatArray, dims, numDims, 0, &currentIndex);\n\n    // Print the flattened array\n    for (int i = 0; i < totalSize; i++) {\n        printf(\"%d \", flatArray[i]);\n    }\n    printf(\"\\n\");\n\n    free(multiArray);\n    free(flatArray);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a script to shift elements of an array to the left by a given number of positions.",
    "code": "```c\n#include <stdio.h>\n\nvoid shiftLeft(int arr[], int size, int positions) {\n    int temp[positions];\n    \n    // Store first 'positions' elements in a temporary array\n    for (int i = 0; i < positions; i++) {\n        temp[i] = arr[i];\n    }\n    \n    // Shift the array elements to the left\n    for (int i = 0; i < size - positions; i++) {\n        arr[i] = arr[i + positions];\n    }\n    \n    // Put the temporary elements back to the end of the array\n    for (int i = 0; i < positions; i++) {\n        arr[size - positions + i] = temp[i];\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    int positions = 2;\n\n    shiftLeft(arr, size, positions);\n\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a routine to sort an array of objects based on a specific property.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    char name[50];\n    int age;\n} Person;\n\nvoid sortByAge(Person arr[], int n) {\n    for (int i = 0; i < n - 1; i++) {\n        for (int j = 0; j < n - i - 1; j++) {\n            if (arr[j].age > arr[j + 1].age) {\n                Person temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n}\n\nint main() {\n    Person people[] = {{\"Alice\", 30}, {\"Bob\", 25}, {\"Charlie\", 20}};\n    int n = sizeof(people) / sizeof(people[0]);\n    \n    sortByAge(people, n);\n    \n    for (int i = 0; i < n; i++) {\n        printf(\"%s: %d\\n\", people[i].name, people[i].age);\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Design a program to find the smallest missing positive integer in an array.",
    "code": "```c\n#include <stdio.h>\n\nint findSmallestMissingPositive(int arr[], int size) {\n    int i;\n    for (i = 0; i < size; i++) {\n        while (arr[i] > 0 && arr[i] <= size && arr[arr[i] - 1] != arr[i]) {\n            int temp = arr[i];\n            arr[i] = arr[temp - 1];\n            arr[temp - 1] = temp;\n        }\n    }\n    \n    for (i = 0; i < size; i++) {\n        if (arr[i] != i + 1) {\n            return i + 1;\n        }\n    }\n    \n    return size + 1;\n}\n\nint main() {\n    int arr[] = {3, 4, -1, 1};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    int missing = findSmallestMissingPositive(arr, size);\n    printf(\"The smallest missing positive integer is %d\\n\", missing);\n    return 0;\n}\n```"
  },
  {
    "task": "Create a function to calculate the cumulative sum of an array.",
    "code": "```c\n#include <stdio.h>\n\nvoid cumulativeSum(int arr[], int result[], int size) {\n    if (size <= 0) return;\n    result[0] = arr[0];\n    for (int i = 1; i < size; i++) {\n        result[i] = result[i - 1] + arr[i];\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    int result[size];\n\n    cumulativeSum(arr, result, size);\n\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", result[i]);\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Develop a function to remove consecutive duplicate elements in an array.",
    "code": "```c\n#include <stdio.h>\n\nint removeConsecutiveDuplicates(int *arr, int n, int *result) {\n    if (n == 0) return 0;\n    int j = 0;\n    result[j++] = arr[0];\n    for (int i = 1; i < n; i++) {\n        if (arr[i] != arr[i - 1]) {\n            result[j++] = arr[i];\n        }\n    }\n    return j;\n}\n\nint main() {\n    int arr[] = {1, 2, 2, 3, 3, 3, 4, 5, 5, 6};\n    int n = sizeof(arr) / sizeof(arr[0]);\n    int result[n];\n    int newLength = removeConsecutiveDuplicates(arr, n, result);\n\n    for (int i = 0; i < newLength; i++) {\n        printf(\"%d \", result[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a method to find the majority element in an array, if any.",
    "code": "```c\n#include <stdio.h>\n\nint findMajorityElement(int *arr, int size) {\n    int count = 0, candidate = -1;\n\n    for (int i = 0; i < size; i++) {\n        if (count == 0) {\n            candidate = arr[i];\n            count = 1;\n        } else if (arr[i] == candidate) {\n            count++;\n        } else {\n            count--;\n        }\n    }\n\n    count = 0;\n    for (int i = 0; i < size; i++) {\n        if (arr[i] == candidate) {\n            count++;\n        }\n    }\n\n    if (count > size / 2) {\n        return candidate;\n    }\n\n    return -1;\n}\n\nint main() {\n    int arr[] = {2, 2, 1, 1, 1, 2, 2};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    int majorityElement = findMajorityElement(arr, size);\n    if (majorityElement != -1) {\n        printf(\"Majority element is %d\\n\", majorityElement);\n    } else {\n        printf(\"No majority element\\n\");\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Write a script to split an array into chunks of a given size.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\nvoid splitArrayIntoChunks(int *array, int arraySize, int chunkSize) {\n    int i, j, k;\n    int numChunks = (arraySize + chunkSize - 1) / chunkSize;\n\n    for (i = 0; i < numChunks; i++) {\n        printf(\"Chunk %d: \", i + 1);\n        for (j = 0; j < chunkSize; j++) {\n            k = i * chunkSize + j;\n            if (k < arraySize) {\n                printf(\"%d \", array[k]);\n            }\n        }\n        printf(\"\\n\");\n    }\n}\n\nint main() {\n    int array[] = {1, 2, 3, 4, 5, 6, 7, 8, 9};\n    int arraySize = sizeof(array) / sizeof(array[0]);\n    int chunkSize = 3;\n\n    splitArrayIntoChunks(array, arraySize, chunkSize);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a program to calculate the difference between the largest and smallest values in an array.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int arr[] = {12, 5, 8, 20, 3};\n    int n = sizeof(arr) / sizeof(arr[0]);\n    int min = arr[0], max = arr[0];\n\n    for (int i = 1; i < n; i++) {\n        if (arr[i] < min) {\n            min = arr[i];\n        }\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n    }\n    \n    int difference = max - min;\n    printf(\"Difference between largest and smallest values: %d\\n\", difference);\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Design a routine to find the starting index of a target subarray in a larger array.",
    "code": "```c\n#include <stdio.h>\n#include <stdbool.h>\n\nint findSubarrayStartIndex(int *array, int arraySize, int *subarray, int subarraySize) {\n    for (int i = 0; i <= arraySize - subarraySize; i++) {\n        bool match = true;\n        for (int j = 0; j < subarraySize; j++) {\n            if (array[i + j] != subarray[j]) {\n                match = false;\n                break;\n            }\n        }\n        if (match) {\n            return i;\n        }\n    }\n    return -1;\n}\n\nint main() {\n    int array[] = {1, 2, 3, 4, 5, 6, 7, 8, 9};\n    int subarray[] = {4, 5, 6};\n    int arraySize = sizeof(array) / sizeof(array[0]);\n    int subarraySize = sizeof(subarray) / sizeof(subarray[0]);\n\n    int index = findSubarrayStartIndex(array, arraySize, subarray, subarraySize);\n    printf(\"Starting index: %d\\n\", index);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function to compress an array by eliminating zero values.",
    "code": "```c\n#include <stdio.h>\n\nint compressArray(int *array, int size, int *compressedArray) {\n    int j = 0;\n    for (int i = 0; i < size; i++) {\n        if (array[i] != 0) {\n            compressedArray[j++] = array[i];\n        }\n    }\n    return j; // Return new size of the compressed array\n}\n\nint main() {\n    int array[] = {1, 0, 2, 0, 3, 0, 4, 5, 0};\n    int size = sizeof(array) / sizeof(array[0]);\n    int compressedArray[size];\n    \n    int newSize = compressArray(array, size, compressedArray);\n    \n    for (int i = 0; i < newSize; i++) {\n        printf(\"%d \", compressedArray[i]);\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Develop a method to determine if an array can be split into two parts with equal sums.",
    "code": "```c\n#include <stdio.h>\n#include <stdbool.h>\n\nbool canBeSplitIntoEqualSums(int* arr, int size) {\n    int totalSum = 0;\n    for (int i = 0; i < size; i++) {\n        totalSum += arr[i];\n    }\n    if (totalSum % 2 != 0) {\n        return false;\n    }\n    int halfSum = totalSum / 2;\n    bool dp[halfSum + 1];\n    for (int i = 0; i <= halfSum; i++) {\n        dp[i] = false;\n    }\n    dp[0] = true;\n    for (int i = 0; i < size; i++) {\n        for (int j = halfSum; j >= arr[i]; j--) {\n            dp[j] = dp[j] || dp[j - arr[i]];\n        }\n    }\n    return dp[halfSum];\n}\n\nint main() {\n    int arr[] = {1, 5, 11, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    if (canBeSplitIntoEqualSums(arr, size)) {\n        printf(\"The array can be split into two parts with equal sums.\\n\");\n    } else {\n        printf(\"The array cannot be split into two parts with equal sums.\\n\");\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function to round each element in an array to the nearest integer.",
    "code": "```c\n#include <stdio.h>\n#include <math.h>\n\nvoid roundArray(double *array, int size, int *result) {\n    for (int i = 0; i < size; i++) {\n        result[i] = (int)round(array[i]);\n    }\n}\n\nint main() {\n    double array[] = {1.2, 2.5, 3.7, 4.4, 5.9};\n    int size = sizeof(array) / sizeof(array[0]);\n    int result[size];\n\n    roundArray(array, size, result);\n\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", result[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a routine to generate an array of the Fibonacci sequence up to a given number.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\nint* generateFibonacci(int n, int* length) {\n    if (n <= 0) {\n        *length = 0;\n        return NULL;\n    }\n\n    int* fibArray = malloc(n * sizeof(int));\n    fibArray[0] = 0;\n    if (n > 1) {\n        fibArray[1] = 1;\n    }\n\n    for (int i = 2; i < n; i++) {\n        fibArray[i] = fibArray[i - 1] + fibArray[i - 2];\n    }\n\n    *length = n;\n    return fibArray;\n}\n\nint main() {\n    int n;\n    printf(\"Enter the number of Fibonacci numbers to generate: \");\n    scanf(\"%d\", &n);\n\n    int length;\n    int* fibArray = generateFibonacci(n, &length);\n\n    printf(\"Fibonacci sequence up to %d numbers:\\n\", length);\n    for (int i = 0; i < length; i++) {\n        printf(\"%d \", fibArray[i]);\n    }\n    printf(\"\\n\");\n\n    free(fibArray);\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program to find the longest repeating sequence in an array.",
    "code": "```c\n#include <stdio.h>\n\nint findLongestRepeatingSequence(int *arr, int n) {\n    int maxLength = 0, currentLength = 1, maxElement = arr[0], currentElement = arr[0];\n\n    for (int i = 1; i < n; i++) {\n        if (arr[i] == currentElement) {\n            currentLength++;\n        } else {\n            if (currentLength > maxLength) {\n                maxLength = currentLength;\n                maxElement = currentElement;\n            }\n            currentElement = arr[i];\n            currentLength = 1;\n        }\n    }\n    \n    if (currentLength > maxLength) {\n        maxLength = currentLength;\n        maxElement = currentElement;\n    }\n\n    printf(\"Element: %d, Length: %d\\n\", maxElement, maxLength);\n    return maxLength;\n}\n\nint main() {\n    int arr[] = {1, 2, 2, 2, 3, 3, 4, 4, 4, 4};\n    int n = sizeof(arr) / sizeof(arr[0]);\n    \n    findLongestRepeatingSequence(arr, n);\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Design a function to multiply each element of an array by its index.",
    "code": "```c\n#include <stdio.h>\n\nvoid multiplyByIndex(int* array, int size) {\n    for (int i = 0; i < size; i++) {\n        array[i] *= i;\n    }\n}\n\nint main() {\n    int array[] = {1, 2, 3, 4, 5};\n    int size = sizeof(array) / sizeof(array[0]);\n\n    multiplyByIndex(array, size);\n\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", array[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a method to convert an array of characters into a single string.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nvoid arrayToString(char arr[], int size, char *result) {\n    strcpy(result, arr);\n}\n\nint main() {\n    char arr[] = {'H', 'e', 'l', 'l', 'o'};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    char result[size + 1]; // +1 for the null terminator\n\n    arrayToString(arr, size, result);\n\n    printf(\"String: %s\\n\", result);\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a function to fill an array with a specified value.",
    "code": "```c\n#include <stdio.h>\n\nvoid fillArray(int *array, int size, int value) {\n    for (int i = 0; i < size; i++) {\n        array[i] = value;\n    }\n}\n\nint main() {\n    int size = 10;\n    int value = 5;\n    int array[10];\n\n    fillArray(array, size, value);\n\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", array[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a routine to determine if an array has any duplicate elements.",
    "code": "```c\n#include <stdio.h>\n#include <stdbool.h>\n\nbool hasDuplicates(int arr[], int size) {\n    for (int i = 0; i < size - 1; i++) {\n        for (int j = i + 1; j < size; j++) {\n            if (arr[i] == arr[j]) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5, 6, 7};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    \n    if (hasDuplicates(arr, size)) {\n        printf(\"Array has duplicates.\\n\");\n    } else {\n        printf(\"Array has no duplicates.\\n\");\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Write a script to reverse the order of words in an array of strings.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nvoid reverseArray(char *arr[], int n) {\n    int start = 0;\n    int end = n - 1;\n    while (start < end) {\n        char *temp = arr[start];\n        arr[start] = arr[end];\n        arr[end] = temp;\n        start++;\n        end--;\n    }\n}\n\nint main() {\n    char *words[] = {\"hello\", \"world\", \"this\", \"is\", \"C\"};\n    int n = sizeof(words) / sizeof(words[0]);\n\n    printf(\"Original array:\\n\");\n    for (int i = 0; i < n; i++) {\n        printf(\"%s \", words[i]);\n    }\n    printf(\"\\n\");\n\n    reverseArray(words, n);\n\n    printf(\"Reversed array:\\n\");\n    for (int i = 0; i < n; i++) {\n        printf(\"%s \", words[i]);\n    }\n    printf(\"\\n\");\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a function to calculate the total number of distinct elements in an array.",
    "code": "```c\n#include <stdio.h>\n\nint countDistinct(int arr[], int size) {\n    int count = 0;\n    for (int i = 0; i < size; i++) {\n        int isDistinct = 1;\n        for (int j = 0; j < i; j++) {\n            if (arr[i] == arr[j]) {\n                isDistinct = 0;\n                break;\n            }\n        }\n        if (isDistinct) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    int arr[] = {1, 2, 2, 3, 4, 4, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    int distinctCount = countDistinct(arr, size);\n    printf(\"Number of distinct elements: %d\\n\", distinctCount);\n    return 0;\n}\n```"
  },
  {
    "task": "Design a program to find the largest gap between consecutive elements in a sorted array.",
    "code": "```c\n#include <stdio.h>\n\nint findLargestGap(int arr[], int size) {\n    int largestGap = 0;\n    for (int i = 0; i < size - 1; i++) {\n        int gap = arr[i + 1] - arr[i];\n        if (gap > largestGap) {\n            largestGap = gap;\n        }\n    }\n    return largestGap;\n}\n\nint main() {\n    int arr[] = {1, 2, 4, 7, 11, 18};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    int largestGap = findLargestGap(arr, size);\n    printf(\"The largest gap is: %d\\n\", largestGap);\n    return 0;\n}\n```"
  },
  {
    "task": "Write a routine to perform element-wise multiplication of two arrays.",
    "code": "```c\n#include <stdio.h>\n\nvoid elementWiseMultiplication(int *array1, int *array2, int *result, int size) {\n    for (int i = 0; i < size; i++) {\n        result[i] = array1[i] * array2[i];\n    }\n}\n\nint main() {\n    int array1[] = {1, 2, 3, 4, 5};\n    int array2[] = {6, 7, 8, 9, 10};\n    int size = sizeof(array1) / sizeof(array1[0]);\n    int result[size];\n    \n    elementWiseMultiplication(array1, array2, result, size);\n    \n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", result[i]);\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Develop a method to split a string into an array of words.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\n#define MAX_WORDS 100\n#define MAX_WORD_LENGTH 50\n\nvoid splitStringToWords(const char* str, char words[MAX_WORDS][MAX_WORD_LENGTH], int *wordCount) {\n    char *token;\n    char *strCopy = strdup(str); // Duplicate the input string to avoid modifying the original\n    *wordCount = 0;\n\n    // Use strtok to split the string into words\n    token = strtok(strCopy, \" \");\n    while (token != NULL && *wordCount < MAX_WORDS) {\n        strncpy(words[*wordCount], token, MAX_WORD_LENGTH - 1);\n        words[*wordCount][MAX_WORD_LENGTH - 1] = '\\0';  // Ensure null-termination\n        (*wordCount)++;\n        token = strtok(NULL, \" \");\n    }\n    free(strCopy); // Free the duplicated string\n}\n\nint main() {\n    const char *input = \"This is a sample string for splitting.\";\n    char words[MAX_WORDS][MAX_WORD_LENGTH];\n    int wordCount = 0;\n    int i;\n\n    splitStringToWords(input, words, &wordCount);\n\n    printf(\"Words in the string:\\n\");\n    for (i = 0; i < wordCount; i++) {\n        printf(\"%s\\n\", words[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function to find the longest contiguous subarray with a sum less than a target.",
    "code": "```c\n#include <stdio.h>\n\nint longestSubarrayWithSumLessThanTarget(int* nums, int numsSize, int target) {\n    int maxLength = 0;\n    int currentSum = 0;\n    int start = 0;\n    \n    for (int end = 0; end < numsSize; end++) {\n        currentSum += nums[end];\n        \n        while (currentSum >= target && start <= end) {\n            currentSum -= nums[start];\n            start++;\n        }\n        \n        if (currentSum < target) {\n            int currentLength = end - start + 1;\n            if (currentLength > maxLength) {\n                maxLength = currentLength;\n            }\n        }\n    }\n    \n    return maxLength;\n}\n\nint main() {\n    int nums[] = {1, 2, 3, 4, 5};\n    int target = 10;\n    int numsSize = sizeof(nums) / sizeof(nums[0]);\n    \n    int result = longestSubarrayWithSumLessThanTarget(nums, numsSize, target);\n    printf(\"The length of the longest subarray is: %d\\n\", result);\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Create a script to rotate a 2D array (matrix) 180 degrees.",
    "code": "```c\n#include <stdio.h>\n\n#define ROWS 3\n#define COLS 3\n\nvoid rotate180(int matrix[ROWS][COLS], int result[ROWS][COLS]) {\n    for (int i = 0; i < ROWS; i++) {\n        for (int j = 0; j < COLS; j++) {\n            result[ROWS - 1 - i][COLS - 1 - j] = matrix[i][j];\n        }\n    }\n}\n\nvoid printMatrix(int matrix[ROWS][COLS]) {\n    for (int i = 0; i < ROWS; i++) {\n        for (int j = 0; j < COLS; j++) {\n            printf(\"%d \", matrix[i][j]);\n        }\n        printf(\"\\n\");\n    }\n}\n\nint main() {\n    int matrix[ROWS][COLS] = {\n        {1, 2, 3},\n        {4, 5, 6},\n        {7, 8, 9}\n    };\n    int result[ROWS][COLS];\n\n    rotate180(matrix, result);\n\n    printf(\"Original Matrix:\\n\");\n    printMatrix(matrix);\n    printf(\"Rotated Matrix:\\n\");\n    printMatrix(result);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program to convert an array of binary digits to its decimal equivalent.",
    "code": "```c\n#include <stdio.h>\n#include <math.h>\n\nint binaryToDecimal(int binaryArray[], int size) {\n    int decimal = 0;\n    for (int i = 0; i < size; i++) {\n        decimal += binaryArray[size - i - 1] * pow(2, i);\n    }\n    return decimal;\n}\n\nint main() {\n    int binaryArray[] = {1, 0, 1, 1}; // Example binary number: 1011\n    int size = sizeof(binaryArray) / sizeof(binaryArray[0]);\n    int decimal = binaryToDecimal(binaryArray, size);\n    printf(\"Decimal equivalent: %d\\n\", decimal);\n    return 0;\n}\n```"
  },
  {
    "task": "Design a function to return a new array with elements squared from the input array.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\nint* squareArray(const int* arr, int size) {\n    int* squaredArr = (int*)malloc(size * sizeof(int));\n    if (squaredArr == NULL) {\n        return NULL; // Allocation failed\n    }\n    for (int i = 0; i < size; i++) {\n        squaredArr[i] = arr[i] * arr[i];\n    }\n    return squaredArr;\n}\n\nint main() {\n    int inputArr[] = {1, 2, 3, 4, 5};\n    int size = sizeof(inputArr) / sizeof(inputArr[0]);\n    \n    int* resultArr = squareArray(inputArr, size);\n    if (resultArr != NULL) {\n        for (int i = 0; i < size; i++) {\n            printf(\"%d \", resultArr[i]);\n        }\n        free(resultArr);\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Create a method to check if all elements in an array are unique.",
    "code": "```c\n#include <stdio.h>\n#include <stdbool.h>\n\nbool areElementsUnique(int arr[], int size) {\n    for (int i = 0; i < size; i++) {\n        for (int j = i + 1; j < size; j++) {\n            if (arr[i] == arr[j]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n\n    if (areElementsUnique(arr, size)) {\n        printf(\"All elements are unique.\\n\");\n    } else {\n        printf(\"There are duplicate elements.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a routine to find the indices of all occurrences of a specific element in an array.",
    "code": "```c\n#include <stdio.h>\n\nvoid findIndices(int arr[], int size, int target, int indices[], int *count) {\n    *count = 0;\n    for (int i = 0; i < size; i++) {\n        if (arr[i] == target) {\n            indices[*count] = i;\n            (*count)++;\n        }\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 2, 4, 2, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    int target = 2;\n    int indices[size];\n    int count;\n\n    findIndices(arr, size, target, indices, &count);\n\n    for (int i = 0; i < count; i++) {\n        printf(\"%d \", indices[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function to merge multiple arrays into one.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\nint* mergeArrays(int** arrays, int* sizes, int numArrays, int* mergedSize) {\n    *mergedSize = 0;\n    for (int i = 0; i < numArrays; i++) {\n        *mergedSize += sizes[i];\n    }\n    \n    int* mergedArray = (int*)malloc(*mergedSize * sizeof(int));\n    if (mergedArray == NULL) {\n        return NULL;\n    }\n\n    int index = 0;\n    for (int i = 0; i < numArrays; i++) {\n        for (int j = 0; j < sizes[i]; j++) {\n            mergedArray[index++] = arrays[i][j];\n        }\n    }\n\n    return mergedArray;\n}\n\nint main() {\n    int arr1[] = {1, 2, 3};\n    int arr2[] = {4, 5};\n    int arr3[] = {6, 7, 8, 9};\n\n    int* arrays[] = {arr1, arr2, arr3};\n    int sizes[] = {3, 2, 4};\n    int numArrays = 3;\n\n    int mergedSize;\n    int* mergedArray = mergeArrays(arrays, sizes, numArrays, &mergedSize);\n\n    if (mergedArray != NULL) {\n        for (int i = 0; i < mergedSize; i++) {\n            printf(\"%d \", mergedArray[i]);\n        }\n        free(mergedArray);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a script to convert an array of integers into a formatted string.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\nchar* arrayToString(int* array, int size) {\n    if (size <= 0) return NULL;\n    \n    int bufferSize = size * 12;\n    char* result = (char*)malloc(bufferSize * sizeof(char));\n    if (!result) return NULL;\n\n    int offset = 0;\n    for (int i = 0; i < size; i++) {\n        offset += snprintf(result + offset, bufferSize - offset, \"%d\", array[i]);\n        if (i < size - 1) {\n            offset += snprintf(result + offset, bufferSize - offset, \", \");\n        }\n    }\n    return result;\n}\n\nint main() {\n    int array[] = {1, 2, 3, 4, 5};\n    int size = sizeof(array) / sizeof(array[0]);\n\n    char* formattedString = arrayToString(array, size);\n    if (formattedString) {\n        printf(\"%s\\n\", formattedString);\n        free(formattedString);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a program to find the largest sum of any contiguous subarray.",
    "code": "```c\n#include <stdio.h>\n\nint maxSubArray(int* nums, int numsSize) {\n    int maxSoFar = nums[0];\n    int currentMax = nums[0];\n\n    for (int i = 1; i < numsSize; i++) {\n        currentMax = (nums[i] > currentMax + nums[i]) ? nums[i] : currentMax + nums[i];\n        maxSoFar = (maxSoFar > currentMax) ? maxSoFar : currentMax;\n    }\n\n    return maxSoFar;\n}\n\nint main() {\n    int nums[] = {-2, 1, -3, 4, -1, 2, 1, -5, 4};\n    int numsSize = sizeof(nums) / sizeof(nums[0]);\n    int maxSum = maxSubArray(nums, numsSize);\n    printf(\"Largest sum of contiguous subarray: %d\\n\", maxSum);\n    return 0;\n}\n```"
  },
  {
    "task": "Design a function to compare two arrays and return the differences.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\nint* findDifferences(int* array1, int size1, int* array2, int size2, int* diffSize) {\n    int maxSize = size1 > size2 ? size1 : size2;\n    int* differences = (int*)malloc(maxSize * sizeof(int));\n    *diffSize = 0;\n\n    for (int i = 0; i < maxSize; i++) {\n        if ((i < size1 && i < size2 && array1[i] != array2[i]) || \n            (i >= size1 && i < size2) || \n            (i >= size2 && i < size1)) {\n            differences[*diffSize] = i;\n            (*diffSize)++;\n        }\n    }\n    \n    return differences;\n}\n\nint main() {\n    int array1[] = {1, 2, 3, 4, 5};\n    int array2[] = {1, 2, 3, 0, 5, 6};\n    int diffSize;\n    \n    int* differences = findDifferences(array1, 5, array2, 6, &diffSize);\n    \n    printf(\"Differences at indices: \");\n    for (int i = 0; i < diffSize; i++) {\n        printf(\"%d \", differences[i]);\n    }\n    printf(\"\\n\");\n    \n    free(differences);\n    return 0;\n}\n```"
  },
  {
    "task": "Write a method to find the longest subarray with elements in arithmetic progression.",
    "code": "```c\n#include <stdio.h>\n\nint longestAPSubarray(int arr[], int n) {\n    if (n <= 1) return n;\n\n    int maxLength = 2;\n    int currentLength = 2;\n    int commonDifference = arr[1] - arr[0];\n\n    for (int i = 2; i < n; i++) {\n        if (arr[i] - arr[i - 1] == commonDifference) {\n            currentLength++;\n        } else {\n            commonDifference = arr[i] - arr[i - 1];\n            currentLength = 2;\n        }\n        if (currentLength > maxLength) {\n            maxLength = currentLength;\n        }\n    }\n\n    return maxLength;\n}\n\nint main() {\n    int arr[] = {1, 7, 10, 13, 14, 19};\n    int n = sizeof(arr) / sizeof(arr[0]);\n    int result = longestAPSubarray(arr, n);\n    printf(\"Length of longest subarray in AP: %d\\n\", result);\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a routine to remove elements from an array based on a predicate function.",
    "code": "```c\n#include <stdio.h>\n#include <stdbool.h>\n\n#define MAX_SIZE 100\n\nbool predicate(int element) {\n    // Example predicate: remove even numbers\n    return element % 2 == 0;\n}\n\nint removeElements(int *array, int size, bool (*predicate)(int)) {\n    int newArray[MAX_SIZE];\n    int newSize = 0;\n    for (int i = 0; i < size; i++) {\n        if (!predicate(array[i])) {\n            newArray[newSize++] = array[i];\n        }\n    }\n    for (int i = 0; i < newSize; i++) {\n        array[i] = newArray[i];\n    }\n    return newSize;\n}\n\nint main() {\n    int array[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n    int size = sizeof(array) / sizeof(array[0]);\n\n    int newSize = removeElements(array, size, predicate);\n\n    for (int i = 0; i < newSize; i++) {\n        printf(\"%d \", array[i]);\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function to determine if two arrays have any common elements.",
    "code": "```c\n#include <stdbool.h>\n#include <stdio.h>\n\nbool haveCommonElements(int arr1[], int size1, int arr2[], int size2) {\n    for (int i = 0; i < size1; i++) {\n        for (int j = 0; j < size2; j++) {\n            if (arr1[i] == arr2[j]) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nint main() {\n    int arr1[] = {1, 2, 3, 4, 5};\n    int arr2[] = {6, 7, 8, 4, 9};\n    int size1 = sizeof(arr1) / sizeof(arr1[0]);\n    int size2 = sizeof(arr2) / sizeof(arr2[0]);\n\n    if (haveCommonElements(arr1, size1, arr2, size2)) {\n        printf(\"The arrays have common elements.\\n\");\n    } else {\n        printf(\"The arrays do not have common elements.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a script to initialize an empty array and populate it with user input.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int array[100];\n    int n, i;\n\n    printf(\"Enter number of elements: \");\n    scanf(\"%d\", &n);\n\n    printf(\"Enter %d integers:\\n\", n);\n    for(i = 0; i < n; i++) {\n        scanf(\"%d\", &array[i]);\n    }\n\n    printf(\"Array elements are:\\n\");\n    for(i = 0; i < n; i++) {\n        printf(\"%d \", array[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program to find the maximum sum of non-adjacent elements in an array.",
    "code": "```c\n#include <stdio.h>\n\nint max(int a, int b) {\n    return (a > b) ? a : b;\n}\n\nint maxSumNonAdjacent(int arr[], int n) {\n    if (n == 0) return 0;\n    if (n == 1) return arr[0];\n    \n    int incl = arr[0];\n    int excl = 0;\n    int new_excl;\n    \n    for (int i = 1; i < n; i++) {\n        new_excl = max(incl, excl);\n        incl = excl + arr[i];\n        excl = new_excl;\n    }\n    \n    return max(incl, excl);\n}\n\nint main() {\n    int arr[] = {3, 2, 5, 10, 7};\n    int n = sizeof(arr) / sizeof(arr[0]);\n    printf(\"Maximum sum of non-adjacent elements: %d\\n\", maxSumNonAdjacent(arr, n));\n    return 0;\n}\n```"
  },
  {
    "task": "Design a function to shuffle an array randomly.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nvoid shuffle(int *array, size_t n) {\n    if (n > 1) {\n        size_t i;\n        for (i = 0; i < n - 1; i++) {\n            size_t j = i + rand() / (RAND_MAX / (n - i) + 1);\n            int t = array[j];\n            array[j] = array[i];\n            array[i] = t;\n        }\n    }\n}\n\nint main() {\n    srand(time(NULL));\n    int array[] = {1, 2, 3, 4, 5};\n    size_t n = sizeof(array) / sizeof(array[0]);\n    \n    shuffle(array, n);\n    \n    for (size_t i = 0; i < n; i++) {\n        printf(\"%d \", array[i]);\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Create a method to generate a new array where each element is the cumulative product of the input array.",
    "code": "```c\n#include <stdio.h>\n\nvoid cumulativeProduct(int *input, int *output, int length) {\n    if (length == 0) return;\n    output[0] = input[0];\n    for (int i = 1; i < length; i++) {\n        output[i] = output[i - 1] * input[i];\n    }\n}\n\nint main() {\n    int input[] = {1, 2, 3, 4, 5};\n    int length = sizeof(input) / sizeof(input[0]);\n    int output[length];\n\n    cumulativeProduct(input, output, length);\n\n    for (int i = 0; i < length; i++) {\n        printf(\"%d \", output[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a routine to find the largest element in each row of a 2D array.",
    "code": "```c\n#include <stdio.h>\n\n#define ROWS 3\n#define COLS 4\n\nvoid findLargestInRows(int arr[ROWS][COLS], int largest[ROWS]) {\n    for (int i = 0; i < ROWS; i++) {\n        largest[i] = arr[i][0];\n        for (int j = 1; j < COLS; j++) {\n            if (arr[i][j] > largest[i]) {\n                largest[i] = arr[i][j];\n            }\n        }\n    }\n}\n\nint main() {\n    int array[ROWS][COLS] = {\n        {3, 8, 1, 4},\n        {2, 7, 9, 10},\n        {5, 6, 11, 12}\n    };\n    \n    int largestInRows[ROWS];\n    findLargestInRows(array, largestInRows);\n    \n    for (int i = 0; i < ROWS; i++) {\n        printf(\"Largest in row %d: %d\\n\", i, largestInRows[i]);\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function to count the number of negative numbers in an array.",
    "code": "```c\n#include <stdio.h>\n\nint countNegativeNumbers(int arr[], int size) {\n    int count = 0;\n    for (int i = 0; i < size; i++) {\n        if (arr[i] < 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    int arr[] = {1, -2, 3, -4, 5, -6, 7, -8};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    int negativeCount = countNegativeNumbers(arr, size);\n    printf(\"Number of negative numbers: %d\\n\", negativeCount);\n    return 0;\n}\n```"
  },
  {
    "task": "Write a script to find the longest subarray with all distinct elements.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint longestSubarrayWithDistinctElements(int* arr, int n) {\n    int maxLength = 0;\n    int start = 0;\n    int* lastIndex = (int*)malloc(100001 * sizeof(int));\n    for (int i = 0; i < 100001; i++) lastIndex[i] = -1;\n\n    for (int end = 0; end < n; end++) {\n        if (lastIndex[arr[end]] >= start) {\n            start = lastIndex[arr[end]] + 1;\n        }\n        lastIndex[arr[end]] = end;\n        maxLength = (maxLength > (end - start + 1)) ? maxLength : (end - start + 1);\n    }\n\n    free(lastIndex);\n    return maxLength;\n}\n\nint main() {\n    int arr[] = {1, 2, 1, 3, 4, 2, 3};\n    int n = sizeof(arr) / sizeof(arr[0]);\n    int result = longestSubarrayWithDistinctElements(arr, n);\n    printf(\"Length of the longest subarray with all distinct elements: %d\\n\", result);\n    return 0;\n}\n```"
  }
]