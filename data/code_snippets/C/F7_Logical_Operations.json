[
  {
    "task": "Create a function that takes two boolean inputs and returns true if both are true using logical AND.",
    "code": "```c\n#include <stdbool.h>\n\nbool bothTrue(bool a, bool b) {\n    return a && b;\n}\n```"
  },
  {
    "task": "Write a script to check if either of two given conditions are met using logical OR.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int condition1 = 1; // Example condition\n    int condition2 = 0; // Example condition\n\n    if (condition1 || condition2) {\n        printf(\"At least one condition is met.\\n\");\n    } else {\n        printf(\"Neither condition is met.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a program that negates a boolean variable using logical NOT.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int booleanVar = 1; // True\n    booleanVar = !booleanVar; // Negate using logical NOT\n    printf(\"%d\\n\", booleanVar); // Outputs 0\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a feature that determines if a number is within a specific range using logical operators.",
    "code": "```c\n#include <stdio.h>\n\nint isWithinRange(int number, int lower, int upper) {\n    return number >= lower && number <= upper;\n}\n\nint main() {\n    int number = 15;\n    int lower = 10;\n    int upper = 20;\n    \n    if (isWithinRange(number, lower, upper)) {\n        printf(\"Number %d is within the range [%d, %d].\\n\", number, lower, upper);\n    } else {\n        printf(\"Number %d is not within the range [%d, %d].\\n\", number, lower, upper);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a system that checks if a user has both read and write permissions using logical AND.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int hasReadPermission = 1;  // 1 represents true, 0 represents false\n    int hasWritePermission = 1; // 1 represents true, 0 represents false\n\n    if (hasReadPermission && hasWritePermission) {\n        printf(\"User has both read and write permissions.\\n\");\n    } else {\n        printf(\"User does not have both read and write permissions.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function to verify if a string is neither empty nor null using logical NOT.",
    "code": "```c\n#include <stdio.h>\n#include <stdbool.h>\n\nbool isStringValid(const char *str) {\n    return !(!str || !*str);\n}\n\nint main() {\n    const char *testStr1 = \"Hello\";\n    const char *testStr2 = \"\";\n    const char *testStr3 = NULL;\n\n    printf(\"Test 1: %s\\n\", isStringValid(testStr1) ? \"Valid\" : \"Invalid\");\n    printf(\"Test 2: %s\\n\", isStringValid(testStr2) ? \"Valid\" : \"Invalid\");\n    printf(\"Test 3: %s\\n\", isStringValid(testStr3) ? \"Valid\" : \"Invalid\");\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a conditional statement that executes a block of code if either of two expressions are true using logical OR.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int expression1 = 0; // Example value\n    int expression2 = 1; // Example value\n\n    if (expression1 || expression2) {\n        printf(\"At least one of the expressions is true.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Build a program that inverts the truth value of a given condition using logical NOT.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int condition = 1; // Example condition (true)\n\n    if (!condition) {\n        printf(\"Condition is false.\\n\");\n    } else {\n        printf(\"Condition is true.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Compose a function to return true if a list is not empty using logical NOT.",
    "code": "```c\n#include <stdbool.h>\n\nbool isNotEmpty(int *list, int size) {\n    return !(!(size));\n}\n```"
  },
  {
    "task": "Develop a filter that selects items from a collection only if they meet multiple criteria using logical AND.",
    "code": "```c\n#include <stdio.h>\n#include <stdbool.h>\n\n#define SIZE 10\n\n// Function to check if an item meets the criteria\nbool meetsCriteria(int item) {\n    // Example criteria: item should be greater than 10 and less than 50\n    return (item > 10) && (item < 50);\n}\n\n// Function to filter items based on criteria\nvoid filterItems(int items[], int filteredItems[], int size, int *filteredSize) {\n    *filteredSize = 0;\n    for (int i = 0; i < size; i++) {\n        if (meetsCriteria(items[i])) {\n            filteredItems[*filteredSize] = items[i];\n            (*filteredSize)++;\n        }\n    }\n}\n\nint main() {\n    int items[SIZE] = {5, 12, 25, 7, 60, 45, 30, 5, 50, 40};\n    int filteredItems[SIZE];\n    int filteredSize;\n\n    filterItems(items, filteredItems, SIZE, &filteredSize);\n\n    printf(\"Filtered items: \");\n    for (int i = 0; i < filteredSize; i++) {\n        printf(\"%d \", filteredItems[i]);\n    }\n    printf(\"\\n\");\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a script that checks if a value is outside a given range using logical OR.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int value = 15;\n    int lower_bound = 10;\n    int upper_bound = 20;\n\n    if (value < lower_bound || value > upper_bound) {\n        printf(\"Value is outside the range.\\n\");\n    } else {\n        printf(\"Value is within the range.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a small program to toggle a boolean flag using logical NOT.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int flag = 0; // false\n\n    printf(\"Initial flag value: %d\\n\", flag);\n\n    // Toggle the flag\n    flag = !flag;\n    printf(\"Toggled flag value: %d\\n\", flag);\n\n    // Toggle again\n    flag = !flag;\n    printf(\"Toggled again flag value: %d\\n\", flag);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a feature that evaluates if a username is both unique and valid using logical AND.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\n#define MAX_USERS 100\n#define MAX_LENGTH 50\n\nbool isUsernameUnique(char usernames[][MAX_LENGTH], int userCount, const char* username) {\n    for (int i = 0; i < userCount; i++) {\n        if (strcmp(usernames[i], username) == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nbool isUsernameValid(const char* username) {\n    int len = strlen(username);\n    return len > 0 && len < MAX_LENGTH;\n}\n\nbool isUsernameUniqueAndValid(char usernames[][MAX_LENGTH], int userCount, const char* username) {\n    return isUsernameUnique(usernames, userCount, username) && isUsernameValid(username);\n}\n\nint main() {\n    char usernames[MAX_USERS][MAX_LENGTH] = {\"user1\", \"user2\", \"user3\"};\n    int userCount = 3;\n    char newUsername[MAX_LENGTH] = \"user4\";\n\n    if (isUsernameUniqueAndValid(usernames, userCount, newUsername)) {\n        printf(\"Username is unique and valid.\\n\");\n    } else {\n        printf(\"Username is not unique or valid.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a conditional to perform an action if neither of two flags are set using logical NOT.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int flag1 = 0; // Example flag, 0 means not set\n    int flag2 = 0; // Example flag, 0 means not set\n\n    if (!flag1 && !flag2) {\n        // Perform action if neither flag is set\n        printf(\"Neither flag1 nor flag2 is set.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that returns true if at least one of multiple boolean inputs is true using logical OR.",
    "code": "```c\n#include <stdbool.h>\n\nbool atLeastOneTrue(bool a, bool b, bool c) {\n    return a || b || c;\n}\n```"
  },
  {
    "task": "Create a loop that continues executing as long as two conditions are both false using logical NOT and AND.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int condition1 = 0;\n    int condition2 = 0;\n    \n    while (!condition1 && !condition2) {\n        // Your loop logic here\n        // For demonstration, we modify the conditions to eventually exit the loop\n        condition1 = 1; // Change to 1 to eventually break the loop\n        condition2 = 1; // Change to 1 to eventually break the loop\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Develop a sequence that checks if a character is either a vowel or a consonant using logical OR.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    char ch;\n    \n    printf(\"Enter a character: \");\n    scanf(\"%c\", &ch);\n    \n    if ((ch == 'a') || (ch == 'e') || (ch == 'i') || (ch == 'o') || (ch == 'u') ||\n        (ch == 'A') || (ch == 'E') || (ch == 'I') || (ch == 'O') || (ch == 'U')) {\n        printf(\"%c is a vowel.\\n\", ch);\n    } else if (((ch >= 'b' && ch <= 'z') || (ch >= 'B' && ch <= 'Z')) &&\n               !(ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u' || ch == 'a' ||\n                 ch == 'E' || ch == 'I' || ch == 'O' || ch == 'U' || ch == 'A')) {\n        printf(\"%c is a consonant.\\n\", ch);\n    } else {\n        printf(\"%c is not an alphabetic character.\\n\", ch);\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Implement a validation that ensures a password is both of minimum length and contains numbers using logical AND.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint isValidPassword(const char *password, int minLength) {\n    int hasNumber = 0;\n    int length = strlen(password);\n\n    for (int i = 0; i < length; i++) {\n        if (isdigit(password[i])) {\n            hasNumber = 1;\n            break;\n        }\n    }\n\n    return length >= minLength && hasNumber;\n}\n\nint main() {\n    const char *password = \"abc123\";\n    int minLength = 6;\n\n    if (isValidPassword(password, minLength)) {\n        printf(\"Password is valid.\\n\");\n    } else {\n        printf(\"Password is invalid.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Compose a test to determine if a point is not within a circle using logical NOT.",
    "code": "```c\n#include <stdio.h>\n#include <stdbool.h>\n\nbool isPointOutsideCircle(float x, float y, float circleX, float circleY, float radius) {\n    float dx = x - circleX;\n    float dy = y - circleY;\n    float distanceSquared = dx * dx + dy * dy;\n    return !(distanceSquared <= radius * radius);\n}\n\nint main() {\n    float pointX = 3.0, pointY = 4.0;\n    float centerX = 0.0, centerY = 0.0;\n    float radius = 5.0;\n\n    if (isPointOutsideCircle(pointX, pointY, centerX, centerY, radius)) {\n        printf(\"The point is outside the circle.\\n\");\n    } else {\n        printf(\"The point is inside the circle.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function to decide if a user is either an admin or an editor using logical OR.",
    "code": "```c\n#include <stdbool.h>\n\nbool isAdminOrEditor(bool isAdmin, bool isEditor) {\n    return isAdmin || isEditor;\n}\n```"
  },
  {
    "task": "Create a conditional statement to trigger an alert if two sensors both detect motion using logical AND.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int sensor1 = 1; // Assuming 1 means motion detected\n    int sensor2 = 1; // Assuming 1 means motion detected\n\n    if (sensor1 && sensor2) {\n        printf(\"Alert: Motion detected by both sensors!\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a program to validate an email format and ensure it contains a domain using logical AND.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nint isValidEmail(const char *email) {\n    const char *at = strchr(email, '@');\n    const char *dot = strrchr(email, '.');\n\n    return (at != NULL) && (dot != NULL) && (at < dot) && (dot - at > 1);\n}\n\nint main() {\n    const char *testEmail = \"example@domain.com\";\n\n    if (isValidEmail(testEmail)) {\n        printf(\"Valid email format.\\n\");\n    } else {\n        printf(\"Invalid email format.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a method to confirm that a transaction is neither fraudulent nor unauthorized using logical NOT.",
    "code": "```c\n#include <stdbool.h>\n#include <stdio.h>\n\nbool isTransactionValid(bool isFraudulent, bool isUnauthorized) {\n    return !(isFraudulent || isUnauthorized);\n}\n\nint main() {\n    bool isFraudulent = false;\n    bool isUnauthorized = false;\n\n    if (isTransactionValid(isFraudulent, isUnauthorized)) {\n        printf(\"Transaction is valid.\\n\");\n    } else {\n        printf(\"Transaction is invalid.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that outputs true if a file is either missing or empty using logical OR.",
    "code": "```c\n#include <stdio.h>\n#include <stdbool.h>\n\nbool isFileMissingOrEmpty(const char *filename) {\n    FILE *file = fopen(filename, \"r\");\n    if (file == NULL) {\n        return true;\n    }\n    fseek(file, 0, SEEK_END);\n    long size = ftell(file);\n    fclose(file);\n    return size == 0;\n}\n\nint main() {\n    const char *filename = \"example.txt\";\n    if (isFileMissingOrEmpty(filename)) {\n        printf(\"The file is either missing or empty.\\n\");\n    } else {\n        printf(\"The file is present and not empty.\\n\");\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a system to check if a student's grade is neither failing nor incomplete using logical NOT.",
    "code": "```c\n#include <stdio.h>\n#include <stdbool.h>\n\nbool isGradePassingAndComplete(char grade) {\n    // Assuming 'F' is failing and 'I' is incomplete\n    return !(grade == 'F' || grade == 'I');\n}\n\nint main() {\n    char grade;\n\n    printf(\"Enter the student's grade: \");\n    scanf(\" %c\", &grade);\n\n    if (isGradePassingAndComplete(grade)) {\n        printf(\"The grade is passing and complete.\\n\");\n    } else {\n        printf(\"The grade is either failing or incomplete.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a script that executes a command if a file is both readable and writable using logical AND.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n\nint main() {\n    const char *filename = \"example.txt\";\n    \n    if (access(filename, R_OK) == 0 && access(filename, W_OK) == 0) {\n        // Execute the command if the file is readable and writable\n        system(\"echo 'File is readable and writable'\");\n    } else {\n        printf(\"File is not readable and writable\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Compose a function to determine if a temperature is not within a safe operating range using logical NOT.",
    "code": "```c\n#include <stdbool.h>\n\nbool isTemperatureUnsafe(int temperature) {\n    int safeMin = 10;\n    int safeMax = 35;\n    return !(temperature >= safeMin && temperature <= safeMax);\n}\n```"
  },
  {
    "task": "Design a check to see if a car is either out of fuel or needs maintenance using logical OR.",
    "code": "```c\n#include <stdio.h>\n#include <stdbool.h>\n\nbool isCarOutOfFuelOrNeedsMaintenance(bool outOfFuel, bool needsMaintenance) {\n    return outOfFuel || needsMaintenance;\n}\n\nint main() {\n    bool outOfFuel = true; // Example condition\n    bool needsMaintenance = false; // Example condition\n\n    if (isCarOutOfFuelOrNeedsMaintenance(outOfFuel, needsMaintenance)) {\n        printf(\"Car is either out of fuel or needs maintenance.\\n\");\n    } else {\n        printf(\"Car is good to go.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a routine that ensures a network connection is both stable and secure using logical AND.",
    "code": "```c\n#include <stdio.h>\n#include <stdbool.h>\n\nbool isConnectionStable() {\n    // Simulate checking for a stable connection\n    return true; // Assume connection is stable\n}\n\nbool isConnectionSecure() {\n    // Simulate checking for a secure connection\n    return true; // Assume connection is secure\n}\n\nbool isConnectionStableAndSecure() {\n    return isConnectionStable() && isConnectionSecure();\n}\n\nint main() {\n    if (isConnectionStableAndSecure()) {\n        printf(\"The network connection is stable and secure.\\n\");\n    } else {\n        printf(\"The network connection is not stable or not secure.\\n\");\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Write a conditional to print a message if a user is not logged in using logical NOT.",
    "code": "```c\n#include <stdio.h>\n#include <stdbool.h>\n\nint main() {\n    bool isLoggedIn = false;\n\n    if (!isLoggedIn) {\n        printf(\"User is not logged in.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a function that checks if a number is both even and positive using logical AND.",
    "code": "```c\n#include <stdio.h>\n\nint isEvenAndPositive(int number) {\n    return (number > 0) && (number % 2 == 0);\n}\n\nint main() {\n    int num = 10;\n    if (isEvenAndPositive(num)) {\n        printf(\"%d is both even and positive.\\n\", num);\n    } else {\n        printf(\"%d is not both even and positive.\\n\", num);\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a feature that turns off a device if neither of two switches are on using logical NOT.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int switch1 = 0; // 0 represents OFF, 1 represents ON\n    int switch2 = 0; // 0 represents OFF, 1 represents ON\n    int deviceOn = 1; // Assume the device is initially ON\n\n    if (!(switch1 || switch2)) {\n        deviceOn = 0; // Turn off the device\n    }\n\n    printf(\"Device is %s\\n\", deviceOn ? \"ON\" : \"OFF\");\n    return 0;\n}\n```"
  },
  {
    "task": "Compose a script to alert if a server is either down or running slow using logical OR.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int serverDown = 1; // 1 represents true, 0 represents false\n    int serverSlow = 0; // 1 represents true, 0 represents false\n\n    if (serverDown || serverSlow) {\n        printf(\"Alert: Server is either down or running slow.\\n\");\n    } else {\n        printf(\"Server is running normally.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a validation method to ensure a form field is not empty using logical NOT.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nint isFieldNotEmpty(const char *field) {\n    // Return 1 (true) if field is not empty, 0 (false) otherwise\n    return !!(*field);\n}\n\nint main() {\n    const char *testField1 = \"Hello, World!\";\n    const char *testField2 = \"\";\n\n    printf(\"Test Field 1 is %s\\n\", isFieldNotEmpty(testField1) ? \"not empty\" : \"empty\");\n    printf(\"Test Field 2 is %s\\n\", isFieldNotEmpty(testField2) ? \"not empty\" : \"empty\");\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program to determine if two strings are both non-empty using logical AND.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nint main() {\n    char str1[] = \"Hello\";\n    char str2[] = \"World\";\n    \n    if (strlen(str1) > 0 && strlen(str2) > 0) {\n        printf(\"Both strings are non-empty.\\n\");\n    } else {\n        printf(\"At least one string is empty.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a function that checks if a number is either prime or a perfect square using logical OR.",
    "code": "```c\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (int i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) return false;\n    }\n    return true;\n}\n\nbool isPerfectSquare(int n) {\n    int root = (int)sqrt(n);\n    return root * root == n;\n}\n\nbool isPrimeOrPerfectSquare(int n) {\n    return isPrime(n) || isPerfectSquare(n);\n}\n\nint main() {\n    int number = 10; // Example number\n    if (isPrimeOrPerfectSquare(number)) {\n        printf(\"%d is either a prime number or a perfect square.\\n\", number);\n    } else {\n        printf(\"%d is neither a prime number nor a perfect square.\\n\", number);\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a script to ensure a user is either an adult or has parental consent using logical OR.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int isAdult, hasParentalConsent;\n    \n    printf(\"Are you an adult? (1 for Yes, 0 for No): \");\n    scanf(\"%d\", &isAdult);\n    \n    printf(\"Do you have parental consent? (1 for Yes, 0 for No): \");\n    scanf(\"%d\", &hasParentalConsent);\n    \n    if (isAdult || hasParentalConsent) {\n        printf(\"Access granted.\\n\");\n    } else {\n        printf(\"Access denied.\\n\");\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Implement a condition to execute a task if a variable is neither zero nor negative using logical NOT.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int variable = 5; // Example value\n\n    if (!(variable <= 0)) {\n        // Task to execute if the variable is neither zero nor negative\n        printf(\"Variable is positive and non-zero.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Compose a method to verify if a system is both up-to-date and functioning using logical AND.",
    "code": "```c\n#include <stdbool.h>\n\nbool isSystemUpToDate();\nbool isSystemFunctioning();\n\nbool isSystemUpToDateAndFunctioning() {\n    return isSystemUpToDate() && isSystemFunctioning();\n}\n```"
  },
  {
    "task": "Write a function that returns true if a list contains neither duplicates nor null values using logical NOT.",
    "code": "```c\n#include <stdbool.h>\n#include <stddef.h>\n\nbool contains_no_duplicates_or_nulls(int *list, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        if (!list[i]) {\n            return false;\n        }\n        for (size_t j = i + 1; j < length; ++j) {\n            if (!(list[i] ^ list[j])) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n```"
  },
  {
    "task": "Create a script to perform an action if a temperature is either too high or too low using logical OR.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    // Example temperature\n    int temperature = 35;\n    \n    // Define temperature thresholds\n    int highThreshold = 30;\n    int lowThreshold = 10;\n    \n    // Check if temperature is too high or too low\n    if (temperature > highThreshold || temperature < lowThreshold) {\n        printf(\"Temperature is out of range.\\n\");\n    } else {\n        printf(\"Temperature is within the safe range.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a feature to toggle an option if a setting is not enabled using logical NOT.",
    "code": "```c\n#include <stdio.h>\n#include <stdbool.h>\n\nint main() {\n    bool settingEnabled = false;\n    bool optionToggled = false;\n\n    if (!settingEnabled) {\n        optionToggled = !optionToggled;\n    }\n\n    printf(\"Option Toggled: %s\\n\", optionToggled ? \"true\" : \"false\");\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a check to ensure a username is both available and meets length requirements using logical AND.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\n#define MIN_LENGTH 5\n#define MAX_LENGTH 15\n\nbool isUsernameAvailable(const char* username) {\n    // Dummy check for availability (for demonstration purposes)\n    // In a real scenario, this would check against a database or list\n    if (strcmp(username, \"existinguser\") == 0) {\n        return false;\n    }\n    return true;\n}\n\nbool isValidUsername(const char* username) {\n    int length = strlen(username);\n    return length >= MIN_LENGTH && length <= MAX_LENGTH;\n}\n\nbool checkUsername(const char* username) {\n    return isUsernameAvailable(username) && isValidUsername(username);\n}\n\nint main() {\n    const char* username = \"newuser\";\n    \n    if (checkUsername(username)) {\n        printf(\"Username is available and valid.\\n\");\n    } else {\n        printf(\"Username is either unavailable or invalid.\\n\");\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function that returns true if a number is neither too large nor too small using logical NOT.",
    "code": "```c\n#include <stdbool.h>\n\nbool isNeitherTooLargeNorTooSmall(int number) {\n    return !(number > 100 || number < 10);\n}\n```"
  },
  {
    "task": "Write a conditional to print a warning if a disk is either full or nearly full using logical OR.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int diskFull = 1; // 1 means true, 0 means false\n    int diskNearlyFull = 0; // 1 means true, 0 means false\n\n    if (diskFull || diskNearlyFull) {\n        printf(\"Warning: Disk is full or nearly full.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a routine to validate that two dates are both within a valid range using logical AND.",
    "code": "```c\n#include <stdbool.h>\n\nbool isValidDate(int day, int month, int year) {\n    // Check if year, month, day are within a valid range\n    if (year < 1 || month < 1 || month > 12 || day < 1 || day > 31) {\n        return false;\n    }\n    // Check for months with 30 days\n    if ((month == 4 || month == 6 || month == 9 || month == 11) && day > 30) {\n        return false;\n    }\n    // Check for February\n    if (month == 2) {\n        // Check for leap year\n        bool isLeapYear = (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);\n        if (isLeapYear && day > 29) {\n            return false;\n        }\n        if (!isLeapYear && day > 28) {\n            return false;\n        }\n    }\n    return true;\n}\n\nbool areDatesValid(int day1, int month1, int year1, int day2, int month2, int year2) {\n    return isValidDate(day1, month1, year1) && isValidDate(day2, month2, year2);\n}\n```"
  },
  {
    "task": "Compose a function to decide if a person is either a minor or a senior using logical OR.",
    "code": "```c\n#include <stdbool.h>\n\nbool isMinorOrSenior(int age) {\n    return (age < 18) || (age >= 65);\n}\n\n#include <stdio.h>\n\nint main() {\n    int age;\n    printf(\"Enter age: \");\n    scanf(\"%d\", &age);\n\n    if (isMinorOrSenior(age)) {\n        printf(\"The person is either a minor or a senior.\\n\");\n    } else {\n        printf(\"The person is neither a minor nor a senior.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a script to execute a task if a condition is not met using logical NOT.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int condition = 0; // Assume condition is 0 (false)\n\n    if (!condition) {\n        printf(\"Task executed because condition is not met.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a program to verify if a process is neither running nor scheduled using logical NOT.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int isRunning = 0;   // 0 indicates false, 1 indicates true\n    int isScheduled = 0; // 0 indicates false, 1 indicates true\n\n    if (!isRunning && !isScheduled) {\n        printf(\"The process is neither running nor scheduled.\\n\");\n    } else {\n        printf(\"The process is either running or scheduled.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a feature that confirms a file is both accessible and not locked using logical AND.",
    "code": "```c\n#include <stdio.h>\n#include <errno.h>\n#include <fcntl.h>\n#include <unistd.h>\n\nint main() {\n    const char *filename = \"example.txt\";\n    int file_accessible = access(filename, F_OK) == 0;\n    int file_unlocked = access(filename, W_OK) == 0;\n    \n    if (file_accessible && file_unlocked) {\n        printf(\"The file is accessible and not locked.\\n\");\n    } else {\n        printf(\"The file is either not accessible or is locked.\\n\");\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Write a script to check if a device is either offline or in maintenance mode using logical OR.",
    "code": "```c\n#include <stdio.h>\n#include <stdbool.h>\n\nint main() {\n    bool isOffline = false;\n    bool isInMaintenanceMode = true;\n\n    if (isOffline || isInMaintenanceMode) {\n        printf(\"Device is either offline or in maintenance mode.\\n\");\n    } else {\n        printf(\"Device is online and not in maintenance mode.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a function to ensure a password is both complex and unique using logical AND.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\n// Sample function to check password uniqueness\nbool isPasswordUnique(const char *password) {\n    // This is a placeholder function.\n    // Implement your own logic to check for uniqueness.\n    return true; // Assume true for the demonstration.\n}\n\n// Function to check password complexity\nbool isPasswordComplex(const char *password) {\n    bool hasUpper = false;\n    bool hasLower = false;\n    bool hasDigit = false;\n    bool hasSpecial = false;\n\n    for (int i = 0; i < strlen(password); i++) {\n        if (password[i] >= 'A' && password[i] <= 'Z') {\n            hasUpper = true;\n        } else if (password[i] >= 'a' && password[i] <= 'z') {\n            hasLower = true;\n        } else if (password[i] >= '0' && password[i] <= '9') {\n            hasDigit = true;\n        } else {\n            hasSpecial = true;\n        }\n    }\n\n    return hasUpper && hasLower && hasDigit && hasSpecial;\n}\n\n// Function to ensure password is both complex and unique\nbool checkPassword(const char *password) {\n    return isPasswordComplex(password) && isPasswordUnique(password);\n}\n\nint main() {\n    const char *password = \"Passw0rd!\";\n\n    if (checkPassword(password)) {\n        printf(\"Password is complex and unique.\\n\");\n    } else {\n        printf(\"Password is not complex and/or unique.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a validation that ensures a value is not negative using logical NOT.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int value;\n    printf(\"Enter a value: \");\n    scanf(\"%d\", &value);\n\n    // Validation using logical NOT\n    if (!(value < 0)) {\n        printf(\"The value is not negative.\\n\");\n    } else {\n        printf(\"The value is negative.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a check to see if a user has either exceeded their quota or is nearing it using logical OR.",
    "code": "```c\n#include <stdio.h>\n#include <stdbool.h>\n\nbool checkQuota(int usage, int quotaLimit, int warningThreshold) {\n    return usage >= quotaLimit || usage >= warningThreshold;\n}\n\nint main() {\n    int usage = 85;\n    int quotaLimit = 100;\n    int warningThreshold = 90;\n\n    if (checkQuota(usage, quotaLimit, warningThreshold)) {\n        printf(\"User has exceeded or is nearing their quota.\\n\");\n    } else {\n        printf(\"User is within safe usage limits.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a routine to confirm that a user is both authenticated and authorized using logical AND.",
    "code": "```c\n#include <stdio.h>\n#include <stdbool.h>\n\nbool isAuthenticated(int userId) {\n    // Placeholder for authentication logic\n    return userId == 1; // Example condition\n}\n\nbool isAuthorized(int userId) {\n    // Placeholder for authorization logic\n    return userId == 1; // Example condition\n}\n\nbool isUserAuthenticatedAndAuthorized(int userId) {\n    return isAuthenticated(userId) && isAuthorized(userId);\n}\n\nint main() {\n    int userId = 1; // Example user ID\n    if (isUserAuthenticatedAndAuthorized(userId)) {\n        printf(\"User is authenticated and authorized.\\n\");\n    } else {\n        printf(\"User is not authenticated or not authorized.\\n\");\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Compose a function to determine if a light is either on or blinking using logical OR.",
    "code": "```c\n#include <stdbool.h>\n\nbool isLightOnOrBlinking(bool isOn, bool isBlinking) {\n    return isOn || isBlinking;\n}\n\nint main() {\n    bool lightIsOn = true;      // Example: The light is on\n    bool lightIsBlinking = false; // Example: The light is not blinking\n\n    if (isLightOnOrBlinking(lightIsOn, lightIsBlinking)) {\n        // The light is either on or blinking\n    } else {\n        // The light is neither on nor blinking\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a script that executes a command if a network connection is neither weak nor unstable using logical NOT.",
    "code": "```c\n#include <stdio.h>\n#include <stdbool.h>\n\n// Simulated functions to check network conditions\nbool isWeakConnection() {\n    // Placeholder logic for weak connection\n    return false;\n}\n\nbool isUnstableConnection() {\n    // Placeholder logic for unstable connection\n    return false;\n}\n\nint main() {\n    if (!(isWeakConnection() || isUnstableConnection())) {\n        // Execute command if network connection is neither weak nor unstable\n        printf(\"Executing command: Network is stable and strong.\\n\");\n    } else {\n        printf(\"Network is either weak or unstable.\\n\");\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Create a program to verify that a sensor is both calibrated and active using logical AND.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int isCalibrated = 1; // 1 for true, 0 for false\n    int isActive = 1;     // 1 for true, 0 for false\n\n    if (isCalibrated && isActive) {\n        printf(\"Sensor is both calibrated and active.\\n\");\n    } else {\n        printf(\"Sensor is not both calibrated and active.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a feature to alert if a process is either overdue or incomplete using logical OR.",
    "code": "```c\n#include <stdio.h>\n#include <stdbool.h>\n\nvoid checkProcessStatus(bool isOverdue, bool isIncomplete) {\n    if (isOverdue || isIncomplete) {\n        printf(\"Alert: The process is either overdue or incomplete.\\n\");\n    } else {\n        printf(\"The process is on track.\\n\");\n    }\n}\n\nint main() {\n    bool overdue = true; // Example value\n    bool incomplete = false; // Example value\n\n    checkProcessStatus(overdue, incomplete);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a script to check if a person is neither a guest nor a temporary user using logical NOT.",
    "code": "```c\n#include <stdio.h>\n#include <stdbool.h>\n\nint main() {\n    bool isGuest = false; // Example value, change as needed\n    bool isTemporaryUser = false; // Example value, change as needed\n    \n    if (!isGuest && !isTemporaryUser) {\n        printf(\"The person is neither a guest nor a temporary user.\\n\");\n    } else {\n        printf(\"The person is either a guest or a temporary user.\\n\");\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function to toggle a light if a switch is not pressed using logical NOT.",
    "code": "```c\n#include <stdio.h>\n#include <stdbool.h>\n\nbool toggleLight(bool isSwitchPressed, bool currentLightState) {\n    if (!isSwitchPressed) {\n        return !currentLightState;\n    }\n    return currentLightState;\n}\n\nint main() {\n    bool isSwitchPressed = false; // Example: switch is not pressed\n    bool currentLightState = false; // Example: light is initially off\n\n    bool newLightState = toggleLight(isSwitchPressed, currentLightState);\n\n    printf(\"The new light state is: %s\\n\", newLightState ? \"ON\" : \"OFF\");\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a conditional to trigger an event if a file is either corrupted or missing using logical OR.",
    "code": "```c\n#include <stdio.h>\n#include <stdbool.h>\n\nbool isFileCorrupted() {\n    // Placeholder function to check if file is corrupted\n    return false; // Change this as needed\n}\n\nbool isFileMissing() {\n    // Placeholder function to check if file is missing\n    return true; // Change this as needed\n}\n\nvoid triggerEvent() {\n    printf(\"Event triggered: File is either corrupted or missing.\\n\");\n}\n\nint main() {\n    if (isFileCorrupted() || isFileMissing()) {\n        triggerEvent();\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Create a routine that verifies if a vehicle is both insured and registered using logical AND.",
    "code": "```c\n#include <stdio.h>\n#include <stdbool.h>\n\nbool isVehicleInsuredAndRegistered(bool isInsured, bool isRegistered) {\n    return isInsured && isRegistered;\n}\n\nint main() {\n    bool insured = true;\n    bool registered = true;\n\n    if (isVehicleInsuredAndRegistered(insured, registered)) {\n        printf(\"The vehicle is both insured and registered.\\n\");\n    } else {\n        printf(\"The vehicle is not both insured and registered.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Compose a method to check if an account is either overdrawn or flagged using logical OR.",
    "code": "```c\n#include <stdio.h>\n#include <stdbool.h>\n\nbool isAccountOverdrawnOrFlagged(bool isOverdrawn, bool isFlagged) {\n    return isOverdrawn || isFlagged;\n}\n\nint main() {\n    bool overdrawn = true;\n    bool flagged = false;\n\n    if (isAccountOverdrawnOrFlagged(overdrawn, flagged)) {\n        printf(\"The account is either overdrawn or flagged.\\n\");\n    } else {\n        printf(\"The account is neither overdrawn nor flagged.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a program to ensure an application is both installed and updated using logical AND.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int isInstalled = 1; // Assume the application is installed (1 for true, 0 for false)\n    int isUpdated = 1;   // Assume the application is updated (1 for true, 0 for false)\n\n    if (isInstalled && isUpdated) {\n        printf(\"The application is both installed and updated.\\n\");\n    } else {\n        printf(\"The application is either not installed or not updated.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a function that returns true if a number is neither divisible by 3 nor 5 using logical NOT.",
    "code": "```c\n#include <stdbool.h>\n\nbool isNeitherDivisibleBy3Nor5(int number) {\n    return !(number % 3 == 0 || number % 5 == 0);\n}\n```"
  },
  {
    "task": "Implement a script that alerts if a device is either overheating or underperforming using logical OR.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int temperature = 85; // Example temperature in degrees Celsius\n    int performance = 50; // Example performance percentage\n\n    if (temperature > 80 || performance < 60) {\n        printf(\"Alert: Device is either overheating or underperforming.\\n\");\n    } else {\n        printf(\"Device is operating normally.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function to validate that a directory is both writable and not full using logical AND.",
    "code": "```c\n#include <sys/statvfs.h>\n#include <unistd.h>\n#include <stdbool.h>\n\nbool isDirectoryWritableAndNotFull(const char *path) {\n    struct statvfs stat;\n    \n    if (access(path, W_OK) != 0) {\n        return false;\n    }\n    \n    if (statvfs(path, &stat) != 0) {\n        return false;\n    }\n    \n    return (stat.f_bfree > 0) && (stat.f_bavail > 0);\n}\n```"
  },
  {
    "task": "Create a conditional statement that executes if a button is not clicked using logical NOT.",
    "code": "```c\n#include <stdio.h>\n#include <stdbool.h>\n\nint main() {\n    bool buttonClicked = false;\n\n    if (!buttonClicked) {\n        printf(\"The button is not clicked.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a check to ensure a transaction is both verified and complete using logical AND.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int isVerified = 1; // 1 for true, 0 for false\n    int isComplete = 1; // 1 for true, 0 for false\n\n    if (isVerified && isComplete) {\n        printf(\"Transaction is verified and complete.\\n\");\n    } else {\n        printf(\"Transaction check failed.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a routine to determine if a string is either uppercase or lowercase using logical OR.",
    "code": "```c\n#include <stdio.h>\n#include <ctype.h>\n\nint isUpperOrLower(const char *str) {\n    int isUpper = 1;\n    int isLower = 1;\n    \n    for (int i = 0; str[i] != '\\0'; i++) {\n        if (!isupper(str[i])) {\n            isUpper = 0;\n        }\n        if (!islower(str[i])) {\n            isLower = 0;\n        }\n    }\n    \n    return isUpper || isLower;\n}\n\nint main() {\n    const char *testStr1 = \"HELLO\";\n    const char *testStr2 = \"world\";\n    const char *testStr3 = \"HelloWorld\";\n\n    printf(\"Test 1: %d\\n\", isUpperOrLower(testStr1));\n    printf(\"Test 2: %d\\n\", isUpperOrLower(testStr2));\n    printf(\"Test 3: %d\\n\", isUpperOrLower(testStr3));\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a feature to execute a task if a variable is neither null nor undefined using logical NOT.",
    "code": "```c\n#include <stdio.h>\n\nvoid executeTask() {\n    printf(\"Task executed.\\n\");\n}\n\nint main() {\n    int *variable = NULL; // Example variable, can be set to a valid address to test\n\n    if (!(variable == NULL)) {\n        executeTask();\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Compose a function to return true if a date is either today or tomorrow using logical OR.",
    "code": "```c\n#include <stdbool.h>\n#include <time.h>\n\nbool isTodayOrTomorrow(int year, int month, int day) {\n    time_t t = time(NULL);\n    struct tm *currentTime = localtime(&t);\n\n    int todayYear = currentTime->tm_year + 1900;\n    int todayMonth = currentTime->tm_mon + 1;\n    int todayDay = currentTime->tm_mday;\n\n    bool isToday = (year == todayYear && month == todayMonth && day == todayDay);\n    bool isTomorrow = (year == todayYear && month == todayMonth && day == todayDay + 1);\n\n    return isToday || isTomorrow;\n}\n```"
  },
  {
    "task": "Write a script to confirm that a system is both running and not in maintenance mode using logical AND.",
    "code": "```c\n#include <stdio.h>\n#include <stdbool.h>\n\nbool isSystemRunning() {\n    // Placeholder function to check if the system is running\n    return true; // Assume the system is running for this example\n}\n\nbool isInMaintenanceMode() {\n    // Placeholder function to check if the system is in maintenance mode\n    return false; // Assume the system is not in maintenance mode for this example\n}\n\nint main() {\n    if (isSystemRunning() && !isInMaintenanceMode()) {\n        printf(\"The system is running and not in maintenance mode.\\n\");\n    } else {\n        printf(\"The system is either not running or in maintenance mode.\\n\");\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Create a program to verify if a text field is neither empty nor exceeds character limit using logical NOT.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n#define MAX_LENGTH 100\n\nint main() {\n    char text[MAX_LENGTH + 1];\n    \n    printf(\"Enter text: \");\n    fgets(text, sizeof(text), stdin);\n\n    // Remove newline character\n    size_t length = strlen(text);\n    if (length > 0 && text[length - 1] == '\\n') {\n        text[length - 1] = '\\0';\n        length--;\n    }\n\n    if (!((length == 0) || (length > MAX_LENGTH))) {\n        printf(\"Text is valid.\\n\");\n    } else {\n        printf(\"Text is invalid.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a feature that checks if a user has either admin privileges or editor rights using logical OR.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int isAdmin = 0; // 1 if user has admin privileges, 0 otherwise\n    int isEditor = 1; // 1 if user has editor rights, 0 otherwise\n\n    if (isAdmin || isEditor) {\n        printf(\"User has access.\\n\");\n    } else {\n        printf(\"User does not have access.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a script to ensure a file is both present and not empty using logical AND.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    const char *filename = \"example.txt\";\n    FILE *file = fopen(filename, \"r\");\n\n    if (file != NULL) {\n        fseek(file, 0, SEEK_END);\n        long size = ftell(file);\n        fclose(file);\n\n        if (size > 0) {\n            printf(\"File is present and not empty.\\n\");\n        } else {\n            printf(\"File is present but empty.\\n\");\n        }\n    } else {\n        printf(\"File is not present.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a condition to execute a command if a setting is not active using logical NOT.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int settingActive = 0; // 0 indicates the setting is not active\n\n    if (!settingActive) {\n        printf(\"Executing command as the setting is not active.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Compose a method to decide if a person is either eligible or exempt using logical OR.",
    "code": "```c\n#include <stdio.h>\n#include <stdbool.h>\n\nbool isEligibleOrExempt(bool eligible, bool exempt) {\n    return eligible || exempt;\n}\n\nint main() {\n    bool eligible = true; // Example values\n    bool exempt = false; // Example values\n\n    if (isEligibleOrExempt(eligible, exempt)) {\n        printf(\"The person is either eligible or exempt.\\n\");\n    } else {\n        printf(\"The person is neither eligible nor exempt.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that returns true if a number is both greater than zero and less than ten using logical AND.",
    "code": "```c\n#include <stdbool.h>\n\nbool isWithinRange(int number) {\n    return number > 0 && number < 10;\n}\n```"
  },
  {
    "task": "Create a loop to continue as long as a condition is either true or false using logical OR.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int condition1 = 0; // Example condition\n    int condition2 = 1; // Example condition\n\n    // Loop with logical OR condition\n    while (condition1 || condition2) {\n        // Example loop body\n        printf(\"Loop iteration\\n\");\n\n        // Modify conditions to eventually break the loop\n        condition1 = 0;\n        condition2 = 0;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a program to verify if an account is neither inactive nor suspended using logical NOT.",
    "code": "```c\n#include <stdio.h>\n#include <stdbool.h>\n\nint main() {\n    bool isInactive = false;\n    bool isSuspended = false;\n\n    if (!(isInactive || isSuspended)) {\n        printf(\"The account is active and not suspended.\\n\");\n    } else {\n        printf(\"The account is either inactive or suspended.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a feature to confirm that a document is both signed and verified using logical AND.",
    "code": "```c\n#include <stdio.h>\n#include <stdbool.h>\n\nbool isDocumentSignedAndVerified(bool isSigned, bool isVerified) {\n    return isSigned && isVerified;\n}\n\nint main() {\n    bool signedDocument = true;\n    bool verifiedDocument = true;\n    \n    if (isDocumentSignedAndVerified(signedDocument, verifiedDocument)) {\n        printf(\"The document is signed and verified.\\n\");\n    } else {\n        printf(\"The document is not properly signed or verified.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a script to alert if a network is either congested or down using logical OR.",
    "code": "```c\n#include <stdio.h>\n#include <stdbool.h>\n\nbool isNetworkCongested() {\n    // Placeholder function to determine if the network is congested\n    // Replace with actual logic\n    return true;\n}\n\nbool isNetworkDown() {\n    // Placeholder function to determine if the network is down\n    // Replace with actual logic\n    return false;\n}\n\nint main() {\n    if (isNetworkCongested() || isNetworkDown()) {\n        printf(\"Alert: The network is either congested or down.\\n\");\n    } else {\n        printf(\"The network is operating normally.\\n\");\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function to ensure a list is both sorted and unique using logical AND.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\nint cmpfunc(const void *a, const void *b) {\n    return (*(int*)a - *(int*)b);\n}\n\nvoid ensureSortedAndUnique(int* arr, int* size) {\n    if (*size <= 1) return;\n\n    qsort(arr, *size, sizeof(int), cmpfunc);\n\n    int uniqueCount = 0;\n    for (int i = 0; i < *size; i++) {\n        if (i == 0 || (arr[i] != arr[i - 1])) {\n            arr[uniqueCount++] = arr[i];\n        }\n    }\n    *size = uniqueCount;\n}\n\nint main() {\n    int arr[] = {4, 2, 1, 3, 2, 4, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n\n    ensureSortedAndUnique(arr, &size);\n\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Create a conditional statement to execute if a task is not completed using logical NOT.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int taskCompleted = 0; // 0 indicates the task is not completed\n\n    if (!taskCompleted) {\n        printf(\"The task is not completed.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a check to determine if a component is either faulty or missing using logical OR.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int isFaulty = 0; // 0 means not faulty, 1 means faulty\n    int isMissing = 1; // 0 means not missing, 1 means missing\n\n    if (isFaulty || isMissing) {\n        printf(\"Component is either faulty or missing.\\n\");\n    } else {\n        printf(\"Component is present and not faulty.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a routine to verify if a user is both online and available using logical AND.",
    "code": "```c\n#include <stdio.h>\n\nint isUserOnlineAndAvailable(int isOnline, int isAvailable) {\n    return isOnline && isAvailable;\n}\n\nint main() {\n    int online = 1;    // 1 for true, 0 for false\n    int available = 1; // 1 for true, 0 for false\n\n    if (isUserOnlineAndAvailable(online, available)) {\n        printf(\"User is online and available.\\n\");\n    } else {\n        printf(\"User is not online and available.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a feature to toggle an alert if a condition is not satisfied using logical NOT.",
    "code": "```c\n#include <stdio.h>\n#include <stdbool.h>\n\nvoid checkCondition(bool condition) {\n    bool alert = false;\n\n    if (!condition) {\n        alert = true;\n    }\n\n    if (alert) {\n        printf(\"Alert is ON\\n\");\n    } else {\n        printf(\"Alert is OFF\\n\");\n    }\n}\n\nint main() {\n    bool condition = false; // Change this to test different scenarios\n    checkCondition(condition);\n    return 0;\n}\n```"
  },
  {
    "task": "Compose a function to return true if a transaction is either pending or failed using logical OR.",
    "code": "```c\n#include <stdbool.h>\n\nbool isTransactionPendingOrFailed(bool isPending, bool isFailed) {\n    return isPending || isFailed;\n}\n```"
  },
  {
    "task": "Write a script to ensure a configuration is both correct and active using logical AND.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int isConfigCorrect = 1; // Assume 1 is true, 0 is false\n    int isConfigActive = 1;  // Assume 1 is true, 0 is false\n\n    if (isConfigCorrect && isConfigActive) {\n        printf(\"The configuration is both correct and active.\\n\");\n    } else {\n        printf(\"The configuration is either incorrect or inactive.\\n\");\n    }\n\n    return 0;\n}\n```"
  }
]