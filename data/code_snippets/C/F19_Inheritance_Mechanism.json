[
  {
    "task": "Create a base class for a vehicle with methods for speed and fuel efficiency, then derive a car class that overrides these methods to provide specific implementations.",
    "code": "```c\n#include <stdio.h>\n\ntypedef struct Vehicle {\n    void (*speed)(struct Vehicle*);\n    void (*fuelEfficiency)(struct Vehicle*);\n} Vehicle;\n\nvoid vehicleSpeed(Vehicle* v) {\n    printf(\"Generic vehicle speed.\\n\");\n}\n\nvoid vehicleFuelEfficiency(Vehicle* v) {\n    printf(\"Generic vehicle fuel efficiency.\\n\");\n}\n\nVehicle newVehicle() {\n    Vehicle v;\n    v.speed = vehicleSpeed;\n    v.fuelEfficiency = vehicleFuelEfficiency;\n    return v;\n}\n\ntypedef struct Car {\n    Vehicle base;\n} Car;\n\nvoid carSpeed(Vehicle* v) {\n    printf(\"Car specific speed.\\n\");\n}\n\nvoid carFuelEfficiency(Vehicle* v) {\n    printf(\"Car specific fuel efficiency.\\n\");\n}\n\nCar newCar() {\n    Car c;\n    c.base = newVehicle();\n    c.base.speed = carSpeed;\n    c.base.fuelEfficiency = carFuelEfficiency;\n    return c;\n}\n\nint main() {\n    Vehicle v = newVehicle();\n    Car c = newCar();\n\n    v.speed(&v);\n    v.fuelEfficiency(&v);\n\n    c.base.speed((Vehicle*)&c);\n    c.base.fuelEfficiency((Vehicle*)&c);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a base class for a multimedia file with properties like duration and format, then extend it with a video class that includes resolution and frame rate.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    int duration;\n    char format[50];\n} MultimediaFile;\n\ntypedef struct {\n    MultimediaFile base;\n    int resolutionWidth;\n    int resolutionHeight;\n    float frameRate;\n} VideoFile;\n\nvoid initMultimediaFile(MultimediaFile *file, int duration, const char *format) {\n    file->duration = duration;\n    strncpy(file->format, format, sizeof(file->format) - 1);\n    file->format[sizeof(file->format) - 1] = '\\0';\n}\n\nvoid initVideoFile(VideoFile *video, int duration, const char *format, int width, int height, float frameRate) {\n    initMultimediaFile(&video->base, duration, format);\n    video->resolutionWidth = width;\n    video->resolutionHeight = height;\n    video->frameRate = frameRate;\n}\n\nint main() {\n    VideoFile video;\n    initVideoFile(&video, 120, \"MP4\", 1920, 1080, 30.0);\n\n    printf(\"Video Details:\\n\");\n    printf(\"Duration: %d seconds\\n\", video.base.duration);\n    printf(\"Format: %s\\n\", video.base.format);\n    printf(\"Resolution: %dx%d\\n\", video.resolutionWidth, video.resolutionHeight);\n    printf(\"Frame Rate: %.2f fps\\n\", video.frameRate);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a superclass for bank accounts with methods for deposit and withdrawal, then create a savings account subclass that overrides the withdrawal method to incorporate interest deductions.",
    "code": "```c\n#include <stdio.h>\n\ntypedef struct {\n    double balance;\n} BankAccount;\n\nvoid deposit(BankAccount *account, double amount) {\n    if (amount > 0) {\n        account->balance += amount;\n    }\n}\n\nvoid withdraw(BankAccount *account, double amount) {\n    if (amount > 0 && account->balance >= amount) {\n        account->balance -= amount;\n    }\n}\n\ntypedef struct {\n    BankAccount base;\n    double interestRate;\n} SavingsAccount;\n\nvoid savingsWithdraw(SavingsAccount *account, double amount) {\n    double interestDeduction = amount * account->interestRate;\n    double totalAmount = amount + interestDeduction;\n    if (totalAmount > 0 && account->base.balance >= totalAmount) {\n        account->base.balance -= totalAmount;\n    }\n}\n\nint main() {\n    BankAccount ba = {1000.0};\n    deposit(&ba, 200.0);\n    withdraw(&ba, 500.0);\n    printf(\"BankAccount Balance: %.2f\\n\", ba.balance);\n\n    SavingsAccount sa = {{1000.0}, 0.02};\n    deposit(&sa.base, 200.0);\n    savingsWithdraw(&sa, 500.0);\n    printf(\"SavingsAccount Balance: %.2f\\n\", sa.base.balance);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a base class for a geometric shape with methods to calculate area and perimeter, then create a rectangle subclass that provides specific calculations for these methods.",
    "code": "```c\n#include <stdio.h>\n\n// Base class for geometric shape\ntypedef struct {\n    double (*area)(void*);\n    double (*perimeter)(void*);\n} Shape;\n\n// Rectangle subclass\ntypedef struct {\n    Shape shape; // Inherit from Shape\n    double width;\n    double height;\n} Rectangle;\n\n// Function to calculate area of a rectangle\ndouble rectangle_area(void* self) {\n    Rectangle* rect = (Rectangle*)self;\n    return rect->width * rect->height;\n}\n\n// Function to calculate perimeter of a rectangle\ndouble rectangle_perimeter(void* self) {\n    Rectangle* rect = (Rectangle*)self;\n    return 2 * (rect->width + rect->height);\n}\n\n// Function to create a new rectangle\nRectangle create_rectangle(double width, double height) {\n    Rectangle rect;\n    rect.shape.area = rectangle_area;\n    rect.shape.perimeter = rectangle_perimeter;\n    rect.width = width;\n    rect.height = height;\n    return rect;\n}\n\nint main() {\n    Rectangle rect = create_rectangle(5.0, 10.0);\n    printf(\"Area: %.2f\\n\", rect.shape.area(&rect));\n    printf(\"Perimeter: %.2f\\n\", rect.shape.perimeter(&rect));\n    return 0;\n}\n```"
  },
  {
    "task": "Construct a parent class for employees with a method to calculate salary, then derive a manager class that overrides this method to include bonuses.",
    "code": "```c\n#include <stdio.h>\n\n// Parent class\ntypedef struct {\n    double baseSalary;\n} Employee;\n\ndouble calculateSalary(Employee *e) {\n    return e->baseSalary;\n}\n\n// Derived class\ntypedef struct {\n    Employee employee;\n    double bonus;\n} Manager;\n\ndouble calculateManagerSalary(Manager *m) {\n    return m->employee.baseSalary + m->bonus;\n}\n\nint main() {\n    Employee e = {50000};\n    printf(\"Employee Salary: %.2f\\n\", calculateSalary(&e));\n\n    Manager m = {{50000}, 10000};\n    printf(\"Manager Salary: %.2f\\n\", calculateManagerSalary(&m));\n\n    return 0;\n}\n```"
  },
  {
    "task": "Set up a base class for a library item with properties like title and author, and extend it with a book subclass that adds a number of pages property.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n// Base class for a library item\ntypedef struct {\n    char title[100];\n    char author[100];\n} LibraryItem;\n\n// Subclass for a book\ntypedef struct {\n    LibraryItem base; // Inheritance\n    int numberOfPages;\n} Book;\n\n// Function to initialize a LibraryItem\nvoid initLibraryItem(LibraryItem* item, const char* title, const char* author) {\n    strncpy(item->title, title, sizeof(item->title) - 1);\n    item->title[sizeof(item->title) - 1] = '\\0';\n    strncpy(item->author, author, sizeof(item->author) - 1);\n    item->author[sizeof(item->author) - 1] = '\\0';\n}\n\n// Function to initialize a Book\nvoid initBook(Book* book, const char* title, const char* author, int numberOfPages) {\n    initLibraryItem(&book->base, title, author);\n    book->numberOfPages = numberOfPages;\n}\n\nint main() {\n    Book myBook;\n    initBook(&myBook, \"1984\", \"George Orwell\", 328);\n    printf(\"Title: %s\\n\", myBook.base.title);\n    printf(\"Author: %s\\n\", myBook.base.author);\n    printf(\"Number of Pages: %d\\n\", myBook.numberOfPages);\n    return 0;\n}\n```"
  },
  {
    "task": "Create a foundation class for an electronic device with a method to turn on and off, and derive a smartphone class that overrides the turn on method to require a passcode.",
    "code": "```c\n#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n\ntypedef struct {\n    bool is_on;\n    void (*turn_on)(void *);\n    void (*turn_off)(void *);\n} ElectronicDevice;\n\nvoid device_turn_on(void *self) {\n    ElectronicDevice *device = (ElectronicDevice *)self;\n    device->is_on = true;\n    printf(\"Device is now on.\\n\");\n}\n\nvoid device_turn_off(void *self) {\n    ElectronicDevice *device = (ElectronicDevice *)self;\n    device->is_on = false;\n    printf(\"Device is now off.\\n\");\n}\n\ntypedef struct {\n    ElectronicDevice base;\n    char passcode[10];\n} Smartphone;\n\nvoid smartphone_turn_on(void *self) {\n    Smartphone *phone = (Smartphone *)self;\n    char input_passcode[10];\n    printf(\"Enter passcode to turn on: \");\n    scanf(\"%9s\", input_passcode);\n    if (strcmp(phone->passcode, input_passcode) == 0) {\n        phone->base.is_on = true;\n        printf(\"Smartphone is now on.\\n\");\n    } else {\n        printf(\"Incorrect passcode. Smartphone remains off.\\n\");\n    }\n}\n\nint main() {\n    ElectronicDevice device = {false, device_turn_on, device_turn_off};\n    device.turn_on(&device);\n    device.turn_off(&device);\n\n    Smartphone phone = {{false, smartphone_turn_on, device_turn_off}, \"1234\"};\n    phone.base.turn_on(&phone);\n    phone.base.turn_off(&phone);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a base class for an animal with a method to make a sound, then create a dog subclass that overrides this method to bark.",
    "code": "```c\n#include <stdio.h>\n\ntypedef struct {\n    void (*makeSound)(void);\n} Animal;\n\nvoid animalMakeSound(void) {\n    printf(\"Animal sound\\n\");\n}\n\ntypedef struct {\n    Animal base;\n} Dog;\n\nvoid dogMakeSound(void) {\n    printf(\"Woof! Woof!\\n\");\n}\n\nDog createDog() {\n    Dog dog;\n    dog.base.makeSound = dogMakeSound;\n    return dog;\n}\n\nint main() {\n    Animal myAnimal;\n    myAnimal.makeSound = animalMakeSound;\n\n    Dog myDog = createDog();\n\n    myAnimal.makeSound();\n    myDog.base.makeSound();\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a superclass for meals with a method to calculate calories, then create a dessert subclass that overrides it to add extra sugar calories.",
    "code": "```c\n#include <stdio.h>\n\ntypedef struct {\n    int baseCalories;\n} Meal;\n\nint calculateCalories(Meal *meal) {\n    return meal->baseCalories;\n}\n\ntypedef struct {\n    Meal base;\n    int sugarGrams;\n} Dessert;\n\nint calculateDessertCalories(Dessert *dessert) {\n    int sugarCalories = dessert->sugarGrams * 4; // Assuming each gram of sugar has 4 calories\n    return dessert->base.baseCalories + sugarCalories;\n}\n\nint main() {\n    Meal meal = {200};\n    Dessert dessert = {{300}, 50};\n\n    printf(\"Meal Calories: %d\\n\", calculateCalories(&meal));\n    printf(\"Dessert Calories: %d\\n\", calculateDessertCalories(&dessert));\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a base class for a transportation mode with a method to calculate travel time, then extend it with a plane subclass that overrides the method to calculate based on speed.",
    "code": "```c\n#include <stdio.h>\n\ntypedef struct {\n    int (*calculate_travel_time)(void*, int);\n} TransportMode;\n\nint base_calculate_travel_time(void* self, int distance) {\n    return distance / 50; // Assuming a base speed of 50 units\n}\n\nTransportMode BaseTransportMode = { \n    .calculate_travel_time = base_calculate_travel_time \n};\n\ntypedef struct {\n    TransportMode* mode;\n    int speed;\n} Plane;\n\nint plane_calculate_travel_time(void* self, int distance) {\n    Plane* plane = (Plane*)self;\n    return distance / plane->speed;\n}\n\nTransportMode PlaneTransportMode = { \n    .calculate_travel_time = plane_calculate_travel_time \n};\n\nint main() {\n    Plane plane = { &PlaneTransportMode, 600 };\n    int distance = 1200;\n    int time = plane.mode->calculate_travel_time(&plane, distance);\n    printf(\"Travel time by plane: %d\\n\", time);\n    return 0;\n}\n```"
  },
  {
    "task": "Construct a parent class for a musical instrument with a method to play sound, then derive a piano class that overrides the method to play specific notes.",
    "code": "```c\n#include <stdio.h>\n\ntypedef struct {\n    void (*playSound)(void);\n} MusicalInstrument;\n\nvoid playInstrumentSound() {\n    printf(\"Playing generic sound of a musical instrument.\\n\");\n}\n\nMusicalInstrument createMusicalInstrument() {\n    MusicalInstrument instrument;\n    instrument.playSound = playInstrumentSound;\n    return instrument;\n}\n\ntypedef struct {\n    MusicalInstrument base;\n} Piano;\n\nvoid playPianoSound() {\n    printf(\"Playing piano notes: C, E, G.\\n\");\n}\n\nPiano createPiano() {\n    Piano piano;\n    piano.base = createMusicalInstrument();\n    piano.base.playSound = playPianoSound;\n    return piano;\n}\n\nint main() {\n    MusicalInstrument instrument = createMusicalInstrument();\n    instrument.playSound();\n\n    Piano piano = createPiano();\n    piano.base.playSound();\n\n    return 0;\n}\n```"
  },
  {
    "task": "Set up a base class for a user account with a method to reset password, and extend it with an admin account subclass that overrides it to include security questions.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n// Base class\ntypedef struct {\n    char username[50];\n    char password[50];\n    void (*resetPassword)(void* self);\n} UserAccount;\n\n// Method to reset password in the base class\nvoid userAccountResetPassword(void* self) {\n    UserAccount* user = (UserAccount*)self;\n    printf(\"Resetting password for user: %s\\n\", user->username);\n    strcpy(user->password, \"default_password\");\n    printf(\"Password reset to default.\\n\");\n}\n\n// Function to create a new UserAccount\nUserAccount createUserAccount(const char* username) {\n    UserAccount user;\n    strcpy(user.username, username);\n    user.resetPassword = userAccountResetPassword;\n    return user;\n}\n\n// Subclass\ntypedef struct {\n    UserAccount base;\n    char securityQuestion[100];\n    char securityAnswer[50];\n} AdminAccount;\n\n// Method to reset password in the subclass\nvoid adminAccountResetPassword(void* self) {\n    AdminAccount* admin = (AdminAccount*)self;\n    printf(\"Resetting password for admin: %s\\n\", admin->base.username);\n    printf(\"Please answer the security question: %s\\n\", admin->securityQuestion);\n    // For simplicity, we assume the correct answer is always given\n    strcpy(admin->base.password, \"admin_default_password\");\n    printf(\"Password reset to admin default after answering security question.\\n\");\n}\n\n// Function to create a new AdminAccount\nAdminAccount createAdminAccount(const char* username, const char* securityQuestion, const char* securityAnswer) {\n    AdminAccount admin;\n    admin.base = createUserAccount(username);\n    admin.base.resetPassword = adminAccountResetPassword;\n    strcpy(admin.securityQuestion, securityQuestion);\n    strcpy(admin.securityAnswer, securityAnswer);\n    return admin;\n}\n\nint main() {\n    // Create and use a UserAccount\n    UserAccount user = createUserAccount(\"user1\");\n    user.resetPassword(&user);\n\n    // Create and use an AdminAccount\n    AdminAccount admin = createAdminAccount(\"admin1\", \"What is your favorite color?\", \"blue\");\n    admin.base.resetPassword(&admin);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a foundational class for a beverage with properties like volume and temperature, and derive a coffee class that overrides the temperature property to be hot.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    float volume;\n    char temperature[10];\n} Beverage;\n\ntypedef struct {\n    Beverage base;\n} Coffee;\n\nvoid initBeverage(Beverage *b, float vol, const char *temp) {\n    b->volume = vol;\n    strncpy(b->temperature, temp, sizeof(b->temperature) - 1);\n    b->temperature[sizeof(b->temperature) - 1] = '\\0';\n}\n\nvoid initCoffee(Coffee *c, float vol) {\n    initBeverage(&c->base, vol, \"Hot\");\n}\n\nvoid printBeverage(Beverage *b) {\n    printf(\"Volume: %.2f, Temperature: %s\\n\", b->volume, b->temperature);\n}\n\nint main() {\n    Coffee myCoffee;\n    initCoffee(&myCoffee, 250.0);\n    printBeverage(&myCoffee.base);\n    return 0;\n}\n```"
  },
  {
    "task": "Design a base class for a service appointment with a method to schedule time, then create a doctor appointment subclass that overrides this method to include consultation duration.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n// Base class for a service appointment\ntypedef struct {\n    char time[20];\n    void (*schedule_time)(struct ServiceAppointment*, const char*);\n} ServiceAppointment;\n\nvoid schedule_service_time(ServiceAppointment* appointment, const char* time) {\n    strncpy(appointment->time, time, sizeof(appointment->time) - 1);\n    appointment->time[sizeof(appointment->time) - 1] = '\\0';\n    printf(\"Scheduled service appointment at: %s\\n\", appointment->time);\n}\n\n// Doctor appointment subclass\ntypedef struct {\n    ServiceAppointment base;\n    int consultation_duration; // in minutes\n    void (*schedule_time)(struct DoctorAppointment*, const char*, int);\n} DoctorAppointment;\n\nvoid schedule_doctor_time(DoctorAppointment* appointment, const char* time, int duration) {\n    strncpy(appointment->base.time, time, sizeof(appointment->base.time) - 1);\n    appointment->base.time[sizeof(appointment->base.time) - 1] = '\\0';\n    appointment->consultation_duration = duration;\n    printf(\"Scheduled doctor appointment at: %s with duration: %d minutes\\n\", \n           appointment->base.time, appointment->consultation_duration);\n}\n\nint main() {\n    ServiceAppointment service_appointment;\n    service_appointment.schedule_time = (void (*)(ServiceAppointment*, const char*))schedule_service_time;\n\n    DoctorAppointment doctor_appointment;\n    doctor_appointment.base.schedule_time = (void (*)(ServiceAppointment*, const char*))schedule_service_time;\n    doctor_appointment.schedule_time = schedule_doctor_time;\n\n    service_appointment.schedule_time(&service_appointment, \"10:00 AM\");\n    doctor_appointment.schedule_time(&doctor_appointment, \"11:00 AM\", 30);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a superclass for electronic gadgets with a method to calculate battery life, then extend it with a laptop class that overrides this method to consider usage patterns.",
    "code": "```c\n#include <stdio.h>\n\ntypedef struct {\n    int batteryCapacity; // in mAh\n} ElectronicGadget;\n\nint calculateBatteryLife(ElectronicGadget *gadget) {\n    // Default battery life calculation\n    return gadget->batteryCapacity / 100; // Example calculation\n}\n\ntypedef struct {\n    ElectronicGadget base;\n    int usagePattern; // 1 for light, 2 for moderate, 3 for heavy\n} Laptop;\n\nint calculateLaptopBatteryLife(Laptop *laptop) {\n    int baseLife = calculateBatteryLife(&laptop->base);\n    switch (laptop->usagePattern) {\n        case 1:\n            return baseLife;\n        case 2:\n            return baseLife / 2;\n        case 3:\n            return baseLife / 4;\n        default:\n            return baseLife;\n    }\n}\n\nint main() {\n    Laptop myLaptop;\n    myLaptop.base.batteryCapacity = 5000; // Example capacity\n    myLaptop.usagePattern = 2; // Moderate usage\n\n    int batteryLife = calculateLaptopBatteryLife(&myLaptop);\n    printf(\"Estimated Battery Life: %d hours\\n\", batteryLife);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a base class for a website component with a method to render content, then create a blog post subclass that overrides this method to include author information.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n// Base class\ntypedef struct {\n    char content[256];\n    void (*render)(void *);\n} WebsiteComponent;\n\nvoid renderWebsiteComponent(void *self) {\n    WebsiteComponent *component = (WebsiteComponent *)self;\n    printf(\"Content: %s\\n\", component->content);\n}\n\n// BlogPost subclass\ntypedef struct {\n    WebsiteComponent base;\n    char author[50];\n} BlogPost;\n\nvoid renderBlogPost(void *self) {\n    BlogPost *post = (BlogPost *)self;\n    printf(\"Content: %s\\n\", post->base.content);\n    printf(\"Author: %s\\n\", post->author);\n}\n\nint main() {\n    WebsiteComponent component = {\"Generic content\", renderWebsiteComponent};\n    BlogPost post;\n    strcpy(post.base.content, \"Blog post content\");\n    strcpy(post.author, \"John Doe\");\n    post.base.render = renderBlogPost;\n\n    component.render(&component);\n    post.base.render(&post);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Construct a parent class for a recipe with methods for ingredients and instructions, then derive a cake recipe class that overrides these methods to add baking steps.",
    "code": "```c\n#include <stdio.h>\n\n// Parent class: Recipe\ntypedef struct {\n    void (*getIngredients)(void);\n    void (*getInstructions)(void);\n} Recipe;\n\n// Derived class: CakeRecipe\ntypedef struct {\n    Recipe base; // Inherited methods\n} CakeRecipe;\n\n// Parent class methods\nvoid recipe_getIngredients(void) {\n    printf(\"Ingredients: Basic ingredients list.\\n\");\n}\n\nvoid recipe_getInstructions(void) {\n    printf(\"Instructions: Basic instructions.\\n\");\n}\n\n// Derived class methods\nvoid cakeRecipe_getIngredients(void) {\n    printf(\"Ingredients: Flour, sugar, eggs, butter.\\n\");\n}\n\nvoid cakeRecipe_getInstructions(void) {\n    printf(\"Instructions: Mix ingredients, bake at 350F for 30 minutes.\\n\");\n}\n\nint main() {\n    // Create a CakeRecipe instance\n    CakeRecipe cake;\n    \n    // Initialize the base class methods\n    cake.base.getIngredients = cakeRecipe_getIngredients;\n    cake.base.getInstructions = cakeRecipe_getInstructions;\n    \n    // Call the overridden methods\n    cake.base.getIngredients();\n    cake.base.getInstructions();\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Set up a base class for a plant with methods for sunlight and water needs, and extend it with a cactus subclass that overrides these methods to require less water.",
    "code": "```c\n#include <stdio.h>\n\ntypedef struct {\n    void (*sunlightNeeds)();\n    void (*waterNeeds)();\n} Plant;\n\nvoid plantSunlightNeeds() {\n    printf(\"Plant needs regular sunlight.\\n\");\n}\n\nvoid plantWaterNeeds() {\n    printf(\"Plant needs regular watering.\\n\");\n}\n\ntypedef struct {\n    Plant base;\n} Cactus;\n\nvoid cactusSunlightNeeds() {\n    printf(\"Cactus needs plenty of sunlight.\\n\");\n}\n\nvoid cactusWaterNeeds() {\n    printf(\"Cactus needs very little watering.\\n\");\n}\n\nint main() {\n    Plant plant;\n    plant.sunlightNeeds = plantSunlightNeeds;\n    plant.waterNeeds = plantWaterNeeds;\n\n    Cactus cactus;\n    cactus.base.sunlightNeeds = cactusSunlightNeeds;\n    cactus.base.waterNeeds = cactusWaterNeeds;\n\n    printf(\"Plant:\\n\");\n    plant.sunlightNeeds();\n    plant.waterNeeds();\n\n    printf(\"\\nCactus:\\n\");\n    cactus.base.sunlightNeeds();\n    cactus.base.waterNeeds();\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a foundational class for a building with properties like height and material, and derive a skyscraper class that overrides the height property to be significantly taller.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n// Base class\ntypedef struct {\n    double height;\n    char material[50];\n} Building;\n\n// Derived class\ntypedef struct {\n    Building base;\n} Skyscraper;\n\n// Function to initialize a Building\nvoid initBuilding(Building *b, double height, const char *material) {\n    b->height = height;\n    strcpy(b->material, material);\n}\n\n// Function to initialize a Skyscraper with overridden height\nvoid initSkyscraper(Skyscraper *s, const char *material) {\n    initBuilding(&(s->base), 300.0, material); // Skyscraper height set to 300.0\n}\n\nint main() {\n    Building building;\n    Skyscraper skyscraper;\n\n    initBuilding(&building, 10.0, \"Brick\");\n    initSkyscraper(&skyscraper, \"Steel\");\n\n    printf(\"Building: Height = %.1f, Material = %s\\n\", building.height, building.material);\n    printf(\"Skyscraper: Height = %.1f, Material = %s\\n\", skyscraper.base.height, skyscraper.base.material);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a base class for a payment method with a method to process transactions, then create a credit card subclass that overrides this method to include credit limits.",
    "code": "```c\n#include <stdio.h>\n\n// Base class for a payment method\ntypedef struct PaymentMethod {\n    void (*processTransaction)(struct PaymentMethod *, double amount);\n} PaymentMethod;\n\nvoid processTransactionBase(PaymentMethod *self, double amount) {\n    printf(\"Processing transaction of amount: %.2f\\n\", amount);\n}\n\n// Subclass for CreditCard\ntypedef struct CreditCard {\n    PaymentMethod base;\n    double creditLimit;\n    double currentDebt;\n} CreditCard;\n\nvoid processTransactionCreditCard(PaymentMethod *self, double amount) {\n    CreditCard *creditCard = (CreditCard *)self;\n    if (creditCard->currentDebt + amount > creditCard->creditLimit) {\n        printf(\"Transaction declined! Exceeds credit limit.\\n\");\n    } else {\n        creditCard->currentDebt += amount;\n        printf(\"Transaction approved. New debt: %.2f\\n\", creditCard->currentDebt);\n    }\n}\n\nvoid CreditCard_init(CreditCard *creditCard, double creditLimit) {\n    creditCard->base.processTransaction = processTransactionCreditCard;\n    creditCard->creditLimit = creditLimit;\n    creditCard->currentDebt = 0.0;\n}\n\nint main() {\n    CreditCard myCard;\n    CreditCard_init(&myCard, 1000.0);\n\n    myCard.base.processTransaction((PaymentMethod *)&myCard, 250.0);\n    myCard.base.processTransaction((PaymentMethod *)&myCard, 800.0);\n    myCard.base.processTransaction((PaymentMethod *)&myCard, 100.0);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a superclass for a computer program with methods for input and output, then extend it with a game subclass that overrides these methods to include player interactions.",
    "code": "```c\n#include <stdio.h>\n\n// Superclass\ntypedef struct {\n    void (*input)(void);\n    void (*output)(void);\n} Program;\n\n// Superclass methods\nvoid programInput() {\n    printf(\"Program Input\\n\");\n}\n\nvoid programOutput() {\n    printf(\"Program Output\\n\");\n}\n\n// Game subclass\ntypedef struct {\n    Program base;\n    void (*playerInput)(void);\n    void (*playerOutput)(void);\n} Game;\n\n// Subclass methods\nvoid gameInput() {\n    printf(\"Game Player Input\\n\");\n}\n\nvoid gameOutput() {\n    printf(\"Game Player Output\\n\");\n}\n\n// Function to create and initialize a Program object\nProgram createProgram() {\n    Program p;\n    p.input = programInput;\n    p.output = programOutput;\n    return p;\n}\n\n// Function to create and initialize a Game object\nGame createGame() {\n    Game g;\n    g.base = createProgram();\n    g.base.input = gameInput;\n    g.base.output = gameOutput;\n    g.playerInput = gameInput;\n    g.playerOutput = gameOutput;\n    return g;\n}\n\nint main() {\n    Program p = createProgram();\n    Game g = createGame();\n\n    p.input();\n    p.output();\n\n    g.base.input();\n    g.base.output();\n\n    g.playerInput();\n    g.playerOutput();\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a base class for a dining establishment with a method to calculate wait time, then create a fast food subclass that overrides this method to be shorter.",
    "code": "```c\n#include <stdio.h>\n\n// Base class\ntypedef struct {\n    void (*calculateWaitTime)(void);\n} DiningEstablishment;\n\nvoid baseCalculateWaitTime() {\n    printf(\"Base wait time: 30 minutes\\n\");\n}\n\n// Fast food subclass\ntypedef struct {\n    DiningEstablishment base;\n} FastFood;\n\nvoid fastFoodCalculateWaitTime() {\n    printf(\"Fast food wait time: 10 minutes\\n\");\n}\n\nvoid initFastFood(FastFood *fastFood) {\n    fastFood->base.calculateWaitTime = fastFoodCalculateWaitTime;\n}\n\nint main() {\n    DiningEstablishment diningEstablishment = { baseCalculateWaitTime };\n    FastFood fastFood;\n    initFastFood(&fastFood);\n\n    printf(\"Dining Establishment:\\n\");\n    diningEstablishment.calculateWaitTime();\n    \n    printf(\"Fast Food:\\n\");\n    fastFood.base.calculateWaitTime();\n\n    return 0;\n}\n```"
  },
  {
    "task": "Construct a parent class for a social media profile with methods for posting and liking, then derive a business profile class that overrides these methods to include promotions.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n// Parent class: SocialMediaProfile\ntypedef struct {\n    char name[50];\n    void (*post)(const char* message);\n    void (*like)(const char* postID);\n} SocialMediaProfile;\n\nvoid socialMediaPost(const char* message) {\n    printf(\"Posting: %s\\n\", message);\n}\n\nvoid socialMediaLike(const char* postID) {\n    printf(\"Liking post ID: %s\\n\", postID);\n}\n\n// Derived class: BusinessProfile\ntypedef struct {\n    SocialMediaProfile base;\n    void (*post)(const char* message);\n    void (*like)(const char* postID);\n    void (*promote)(const char* message);\n} BusinessProfile;\n\nvoid businessPost(const char* message) {\n    printf(\"Business posting: %s\\n\", message);\n}\n\nvoid businessLike(const char* postID) {\n    printf(\"Business liking post ID: %s\\n\", postID);\n}\n\nvoid businessPromote(const char* message) {\n    printf(\"Promoting: %s\\n\", message);\n}\n\nint main() {\n    SocialMediaProfile userProfile = {\"User\", socialMediaPost, socialMediaLike};\n    BusinessProfile businessProfile;\n\n    // Initialize BusinessProfile\n    strcpy(businessProfile.base.name, \"Business\");\n    businessProfile.base.post = (void(*)(const char*))businessPost;\n    businessProfile.base.like = (void(*)(const char*))businessLike;\n    businessProfile.promote = businessPromote;\n\n    // Using SocialMediaProfile\n    userProfile.post(\"Hello, world!\");\n    userProfile.like(\"123\");\n\n    // Using BusinessProfile\n    businessProfile.base.post(\"New product launch!\");\n    businessProfile.base.like(\"456\");\n    businessProfile.promote(\"Special offer!\");\n\n    return 0;\n}\n```"
  },
  {
    "task": "Set up a base class for an educational course with methods for syllabus and grading, and extend it with an online course subclass that overrides these methods for remote learning.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n// Base class for an educational course\ntypedef struct {\n    char name[50];\n    void (*syllabus)(void);\n    void (*grading)(void);\n} Course;\n\n// Method implementations for the base class\nvoid baseSyllabus(void) {\n    printf(\"Base Course Syllabus\\n\");\n}\n\nvoid baseGrading(void) {\n    printf(\"Base Course Grading\\n\");\n}\n\n// Function to initialize a Course object\nvoid initCourse(Course *course, const char *name) {\n    strcpy(course->name, name);\n    course->syllabus = baseSyllabus;\n    course->grading = baseGrading;\n}\n\n// Subclass for an online course\ntypedef struct {\n    Course base;\n} OnlineCourse;\n\n// Method implementations for the online course subclass\nvoid onlineSyllabus(void) {\n    printf(\"Online Course Syllabus\\n\");\n}\n\nvoid onlineGrading(void) {\n    printf(\"Online Course Grading\\n\");\n}\n\n// Function to initialize an OnlineCourse object\nvoid initOnlineCourse(OnlineCourse *onlineCourse, const char *name) {\n    initCourse(&onlineCourse->base, name);\n    onlineCourse->base.syllabus = onlineSyllabus;\n    onlineCourse->base.grading = onlineGrading;\n}\n\nint main() {\n    Course baseCourse;\n    initCourse(&baseCourse, \"Base Course\");\n\n    OnlineCourse onlineCourse;\n    initOnlineCourse(&onlineCourse, \"Online Course\");\n\n    printf(\"Base Course:\\n\");\n    baseCourse.syllabus();\n    baseCourse.grading();\n\n    printf(\"\\nOnline Course:\\n\");\n    onlineCourse.base.syllabus();\n    onlineCourse.base.grading();\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a foundational class for a sports team with properties like team name and coach, and derive a football team class that overrides the coach property with a specific person.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n// Base class for a sports team\ntypedef struct {\n    char team_name[50];\n    char coach[50];\n} SportsTeam;\n\n// Derived class for a football team\ntypedef struct {\n    SportsTeam base;\n} FootballTeam;\n\n// Function to initialize a sports team\nvoid initSportsTeam(SportsTeam* team, const char* name, const char* coach) {\n    strcpy(team->team_name, name);\n    strcpy(team->coach, coach);\n}\n\n// Function to initialize a football team with a specific coach\nvoid initFootballTeam(FootballTeam* team, const char* name, const char* specific_coach) {\n    initSportsTeam(&team->base, name, specific_coach);\n}\n\nint main() {\n    FootballTeam myFootballTeam;\n    initFootballTeam(&myFootballTeam, \"Tigers\", \"John Doe\");\n\n    printf(\"Football Team: %s\\n\", myFootballTeam.base.team_name);\n    printf(\"Coach: %s\\n\", myFootballTeam.base.coach);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a base class for a document with methods for printing and saving, then create a PDF document subclass that overrides these methods to include encryption.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n// Base class: Document\ntypedef struct {\n    void (*print)();\n    void (*save)();\n} Document;\n\n// Base class methods\nvoid document_print() {\n    printf(\"Printing document...\\n\");\n}\n\nvoid document_save() {\n    printf(\"Saving document...\\n\");\n}\n\n// Subclass: PDFDocument\ntypedef struct {\n    Document base; // Inheritance\n    char encryption[50];\n} PDFDocument;\n\n// Subclass methods\nvoid pdfdocument_print() {\n    printf(\"Printing PDF document with encryption: %s\\n\", \"AES256\");\n}\n\nvoid pdfdocument_save() {\n    printf(\"Saving PDF document with encryption: %s\\n\", \"AES256\");\n}\n\n// Function to create a new PDFDocument\nvoid new_pdfdocument(PDFDocument *pdfdoc) {\n    pdfdoc->base.print = pdfdocument_print;\n    pdfdoc->base.save = pdfdocument_save;\n    strcpy(pdfdoc->encryption, \"AES256\");\n}\n\nint main() {\n    PDFDocument pdf;\n    new_pdfdocument(&pdf);\n    \n    pdf.base.print();\n    pdf.base.save();\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Develop a superclass for a retail product with methods for pricing and discount, then extend it with an electronics product class that overrides the discount method to offer more.",
    "code": "```c\n#include <stdio.h>\n\ntypedef struct {\n    double price;\n} RetailProduct;\n\ndouble getPrice(RetailProduct *product) {\n    return product->price;\n}\n\ndouble getDiscount(RetailProduct *product) {\n    return product->price * 0.1;\n}\n\ntypedef struct {\n    RetailProduct base;\n} ElectronicsProduct;\n\ndouble getElectronicsDiscount(ElectronicsProduct *product) {\n    return product->base.price * 0.2;\n}\n\nint main() {\n    RetailProduct retailProduct = {100.0};\n    ElectronicsProduct electronicsProduct = {{200.0}};\n\n    printf(\"Retail Product Price: %.2f\\n\", getPrice(&retailProduct));\n    printf(\"Retail Product Discount: %.2f\\n\", getDiscount(&retailProduct));\n\n    printf(\"Electronics Product Price: %.2f\\n\", getPrice((RetailProduct*)&electronicsProduct));\n    printf(\"Electronics Product Discount: %.2f\\n\", getElectronicsDiscount(&electronicsProduct));\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a base class for a subscription service with a method to renew membership, then create a monthly subscription subclass that overrides this method for automatic renewal.",
    "code": "```c\n#include <stdio.h>\n\n// Base class\ntypedef struct Subscription {\n    void (*renew_membership)(struct Subscription* self);\n} Subscription;\n\nvoid renew_membership_base(Subscription* self) {\n    printf(\"Membership renewed manually.\\n\");\n}\n\nSubscription* new_Subscription() {\n    Subscription* sub = (Subscription*)malloc(sizeof(Subscription));\n    sub->renew_membership = renew_membership_base;\n    return sub;\n}\n\n// Subclass\ntypedef struct MonthlySubscription {\n    Subscription base;\n} MonthlySubscription;\n\nvoid renew_membership_monthly(Subscription* self) {\n    printf(\"Membership renewed automatically for monthly subscription.\\n\");\n}\n\nMonthlySubscription* new_MonthlySubscription() {\n    MonthlySubscription* sub = (MonthlySubscription*)malloc(sizeof(MonthlySubscription));\n    sub->base.renew_membership = renew_membership_monthly;\n    return sub;\n}\n\n// Example usage\nint main() {\n    Subscription* base = new_Subscription();\n    base->renew_membership(base);\n\n    MonthlySubscription* monthly = new_MonthlySubscription();\n    monthly->base.renew_membership((Subscription*)monthly);\n\n    free(base);\n    free(monthly);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Construct a parent class for a language translator with a method to translate text, then derive a French translator class that overrides this method for French language specifics.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n// Parent class\ntypedef struct {\n    void (*translate)(const char*);\n} LanguageTranslator;\n\n// Method to translate text in parent class\nvoid translateText(const char* text) {\n    printf(\"Translating text: %s\\n\", text);\n}\n\n// Constructor for LanguageTranslator\nLanguageTranslator* createLanguageTranslator() {\n    LanguageTranslator* translator = (LanguageTranslator*)malloc(sizeof(LanguageTranslator));\n    translator->translate = translateText;\n    return translator;\n}\n\n// Derived class for FrenchTranslator\ntypedef struct {\n    LanguageTranslator base;\n} FrenchTranslator;\n\n// Overridden method for French language specifics\nvoid translateTextFrench(const char* text) {\n    printf(\"Traduction du texte: %s\\n\", text);\n}\n\n// Constructor for FrenchTranslator\nFrenchTranslator* createFrenchTranslator() {\n    FrenchTranslator* frenchTranslator = (FrenchTranslator*)malloc(sizeof(FrenchTranslator));\n    frenchTranslator->base.translate = translateTextFrench;\n    return frenchTranslator;\n}\n\nint main() {\n    LanguageTranslator* translator = createLanguageTranslator();\n    translator->translate(\"Hello, world!\");\n\n    FrenchTranslator* frenchTranslator = createFrenchTranslator();\n    frenchTranslator->base.translate(\"Hello, world!\");\n\n    free(translator);\n    free(frenchTranslator);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Set up a base class for a customer order with methods for placing and tracking, and extend it with a food order subclass that overrides tracking for delivery status.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    void (*placeOrder)(void);\n    void (*trackOrder)(void);\n} CustomerOrder;\n\nvoid placeCustomerOrder() {\n    printf(\"Customer order placed.\\n\");\n}\n\nvoid trackCustomerOrder() {\n    printf(\"Tracking customer order.\\n\");\n}\n\ntypedef struct {\n    CustomerOrder base;\n    void (*trackOrder)(void);\n} FoodOrder;\n\nvoid placeFoodOrder() {\n    printf(\"Food order placed.\\n\");\n}\n\nvoid trackFoodOrder() {\n    printf(\"Tracking food order delivery status.\\n\");\n}\n\nint main() {\n    CustomerOrder customerOrder;\n    customerOrder.placeOrder = placeCustomerOrder;\n    customerOrder.trackOrder = trackCustomerOrder;\n\n    FoodOrder foodOrder;\n    foodOrder.base.placeOrder = placeFoodOrder;\n    foodOrder.trackOrder = trackFoodOrder;\n\n    customerOrder.placeOrder();\n    customerOrder.trackOrder();\n\n    foodOrder.base.placeOrder();\n    foodOrder.trackOrder();\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a foundational class for an artwork with properties like artist and medium, and derive a painting class that overrides the medium property to be 'canvas'.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n// Base class\ntypedef struct {\n    char artist[50];\n    char medium[50];\n} Artwork;\n\n// Derived class\ntypedef struct {\n    Artwork base;\n} Painting;\n\n// Function to initialize an Artwork\nvoid initArtwork(Artwork* artwork, const char* artist, const char* medium) {\n    strcpy(artwork->artist, artist);\n    strcpy(artwork->medium, medium);\n}\n\n// Function to initialize a Painting\nvoid initPainting(Painting* painting, const char* artist) {\n    initArtwork(&(painting->base), artist, \"canvas\");\n}\n\n// Function to display an Artwork\nvoid displayArtwork(Artwork* artwork) {\n    printf(\"Artist: %s\\n\", artwork->artist);\n    printf(\"Medium: %s\\n\", artwork->medium);\n}\n\nint main() {\n    Artwork artwork;\n    Painting painting;\n\n    initArtwork(&artwork, \"Leonardo da Vinci\", \"oil\");\n    initPainting(&painting, \"Vincent van Gogh\");\n\n    printf(\"Artwork:\\n\");\n    displayArtwork(&artwork);\n\n    printf(\"\\nPainting:\\n\");\n    displayArtwork(&(painting.base));\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a base class for a computer network with methods for connectivity and bandwidth, then create a wireless network subclass that overrides these methods for signal strength.",
    "code": "```c\n#include <stdio.h>\n\n// Base class\ntypedef struct {\n    void (*connectivity)(void);\n    void (*bandwidth)(void);\n} ComputerNetwork;\n\n// Base class methods\nvoid base_connectivity() {\n    printf(\"Base network connectivity.\\n\");\n}\n\nvoid base_bandwidth() {\n    printf(\"Base network bandwidth.\\n\");\n}\n\n// Wireless network subclass\ntypedef struct {\n    ComputerNetwork base;\n} WirelessNetwork;\n\n// Subclass methods\nvoid wireless_connectivity() {\n    printf(\"Wireless network connectivity with signal strength.\\n\");\n}\n\nvoid wireless_bandwidth() {\n    printf(\"Wireless network bandwidth with signal strength.\\n\");\n}\n\n// Function to create a WirelessNetwork instance\nWirelessNetwork create_wireless_network() {\n    WirelessNetwork wn;\n    wn.base.connectivity = wireless_connectivity;\n    wn.base.bandwidth = wireless_bandwidth;\n    return wn;\n}\n\nint main() {\n    WirelessNetwork wn = create_wireless_network();\n    wn.base.connectivity();\n    wn.base.bandwidth();\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a superclass for a messaging app with methods for sending and receiving messages, then extend it with a secure messaging subclass that overrides these methods for encryption.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    void (*sendMessage)(const char*);\n    void (*receiveMessage)(const char*);\n} MessagingApp;\n\nvoid sendBasicMessage(const char* message) {\n    printf(\"Sending message: %s\\n\", message);\n}\n\nvoid receiveBasicMessage(const char* message) {\n    printf(\"Received message: %s\\n\", message);\n}\n\nMessagingApp createBasicMessagingApp() {\n    MessagingApp app;\n    app.sendMessage = sendBasicMessage;\n    app.receiveMessage = receiveBasicMessage;\n    return app;\n}\n\ntypedef struct {\n    MessagingApp base;\n    void (*encrypt)(char*, const char*);\n    void (*decrypt)(char*, const char*);\n} SecureMessagingApp;\n\nvoid encryptMessage(char* encrypted, const char* message) {\n    // Simple Caesar cipher for example purposes\n    for (int i = 0; message[i] != '\\0'; i++) {\n        encrypted[i] = message[i] + 3;\n    }\n}\n\nvoid decryptMessage(char* decrypted, const char* message) {\n    for (int i = 0; message[i] != '\\0'; i++) {\n        decrypted[i] = message[i] - 3;\n    }\n}\n\nvoid sendEncryptedMessage(const char* message) {\n    char encrypted[1024];\n    encryptMessage(encrypted, message);\n    printf(\"Sending encrypted message: %s\\n\", encrypted);\n}\n\nvoid receiveEncryptedMessage(const char* message) {\n    char decrypted[1024];\n    decryptMessage(decrypted, message);\n    printf(\"Received decrypted message: %s\\n\", decrypted);\n}\n\nSecureMessagingApp createSecureMessagingApp() {\n    SecureMessagingApp app;\n    app.base.sendMessage = sendEncryptedMessage;\n    app.base.receiveMessage = receiveEncryptedMessage;\n    app.encrypt = encryptMessage;\n    app.decrypt = decryptMessage;\n    return app;\n}\n\nint main() {\n    char message[] = \"Hello, World!\";\n    MessagingApp basicApp = createBasicMessagingApp();\n    SecureMessagingApp secureApp = createSecureMessagingApp();\n\n    basicApp.sendMessage(message);\n    basicApp.receiveMessage(message);\n\n    secureApp.base.sendMessage(message);\n    secureApp.base.receiveMessage(message);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a base class for a travel itinerary with methods for destinations and activities, then create a vacation itinerary subclass that overrides these methods for leisure activities.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n// Base class: TravelItinerary\ntypedef struct {\n    char destinations[100];\n    char activities[100];\n    void (*setDestinations)(struct TravelItinerary*, const char*);\n    void (*setActivities)(struct TravelItinerary*, const char*);\n    void (*printDetails)(struct TravelItinerary*);\n} TravelItinerary;\n\nvoid setDestinations(TravelItinerary* self, const char* dest) {\n    strcpy(self->destinations, dest);\n}\n\nvoid setActivities(TravelItinerary* self, const char* act) {\n    strcpy(self->activities, act);\n}\n\nvoid printDetails(TravelItinerary* self) {\n    printf(\"Destinations: %s\\n\", self->destinations);\n    printf(\"Activities: %s\\n\", self->activities);\n}\n\n// Initialize the base class\nvoid initTravelItinerary(TravelItinerary* itinerary) {\n    itinerary->setDestinations = setDestinations;\n    itinerary->setActivities = setActivities;\n    itinerary->printDetails = printDetails;\n}\n\n// Subclass: VacationItinerary\ntypedef struct {\n    TravelItinerary base;\n} VacationItinerary;\n\nvoid setLeisureActivities(TravelItinerary* self, const char* act) {\n    strcpy(self->activities, act);\n}\n\n// Initialize the subclass\nvoid initVacationItinerary(VacationItinerary* itinerary) {\n    initTravelItinerary(&itinerary->base);\n    itinerary->base.setActivities = setLeisureActivities;\n}\n\nint main() {\n    VacationItinerary vacation;\n    initVacationItinerary(&vacation);\n\n    vacation.base.setDestinations(&vacation.base, \"Hawaii\");\n    vacation.base.setActivities(&vacation.base, \"Surfing, Snorkeling, Relaxing\");\n    \n    vacation.base.printDetails(&vacation.base);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Construct a parent class for a healthcare record with methods for patient data and treatment history, then derive a pediatric record class that overrides these methods for child-specific data.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n// Parent class\ntypedef struct {\n    char patientName[100];\n    char treatmentHistory[1000];\n    void (*setPatientData)(void*, const char*);\n    void (*setTreatmentHistory)(void*, const char*);\n    void (*getPatientData)(void*);\n    void (*getTreatmentHistory)(void*);\n} HealthcareRecord;\n\nvoid setPatientData(void* self, const char* name) {\n    strcpy(((HealthcareRecord*)self)->patientName, name);\n}\n\nvoid setTreatmentHistory(void* self, const char* history) {\n    strcpy(((HealthcareRecord*)self)->treatmentHistory, history);\n}\n\nvoid getPatientData(void* self) {\n    printf(\"Patient Name: %s\\n\", ((HealthcareRecord*)self)->patientName);\n}\n\nvoid getTreatmentHistory(void* self) {\n    printf(\"Treatment History: %s\\n\", ((HealthcareRecord*)self)->treatmentHistory);\n}\n\nHealthcareRecord createHealthcareRecord() {\n    HealthcareRecord record;\n    record.setPatientData = setPatientData;\n    record.setTreatmentHistory = setTreatmentHistory;\n    record.getPatientData = getPatientData;\n    record.getTreatmentHistory = getTreatmentHistory;\n    return record;\n}\n\n// Derived class\ntypedef struct {\n    HealthcareRecord base;\n    char childSpecificData[500];\n} PediatricRecord;\n\nvoid setPediatricPatientData(void* self, const char* name) {\n    strcpy(((PediatricRecord*)self)->base.patientName, name);\n    strcat(((PediatricRecord*)self)->childSpecificData, \" - Child Data\");\n}\n\nvoid setPediatricTreatmentHistory(void* self, const char* history) {\n    strcpy(((PediatricRecord*)self)->base.treatmentHistory, history);\n    strcat(((PediatricRecord*)self)->childSpecificData, \" - Child History\");\n}\n\nPediatricRecord createPediatricRecord() {\n    PediatricRecord record;\n    record.base.setPatientData = setPediatricPatientData;\n    record.base.setTreatmentHistory = setPediatricTreatmentHistory;\n    record.base.getPatientData = getPatientData;\n    record.base.getTreatmentHistory = getTreatmentHistory;\n    return record;\n}\n\nint main() {\n    PediatricRecord pediRecord = createPediatricRecord();\n    \n    pediRecord.base.setPatientData(&pediRecord, \"John Doe\");\n    pediRecord.base.setTreatmentHistory(&pediRecord, \"Flu Vaccination\");\n\n    pediRecord.base.getPatientData(&pediRecord);\n    pediRecord.base.getTreatmentHistory(&pediRecord);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Set up a base class for a culinary dish with methods for preparation and serving, and extend it with an appetizer subclass that overrides these methods for smaller portions.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    void (*prepare)(void*);\n    void (*serve)(void*);\n} DishVTable;\n\ntypedef struct {\n    DishVTable* vtable;\n    char name[50];\n} Dish;\n\nvoid dishPrepare(void* self) {\n    Dish* dish = (Dish*)self;\n    printf(\"Preparing the dish: %s\\n\", dish->name);\n}\n\nvoid dishServe(void* self) {\n    Dish* dish = (Dish*)self;\n    printf(\"Serving the dish: %s\\n\", dish->name);\n}\n\nDishVTable dishVTable = {\n    dishPrepare,\n    dishServe\n};\n\nvoid initDish(Dish* dish, const char* name) {\n    dish->vtable = &dishVTable;\n    strncpy(dish->name, name, 50);\n}\n\ntypedef struct {\n    Dish base;\n} Appetizer;\n\nvoid appetizerPrepare(void* self) {\n    Appetizer* appetizer = (Appetizer*)self;\n    printf(\"Preparing a small portion of appetizer: %s\\n\", appetizer->base.name);\n}\n\nvoid appetizerServe(void* self) {\n    Appetizer* appetizer = (Appetizer*)self;\n    printf(\"Serving a small portion of appetizer: %s\\n\", appetizer->base.name);\n}\n\nDishVTable appetizerVTable = {\n    appetizerPrepare,\n    appetizerServe\n};\n\nvoid initAppetizer(Appetizer* appetizer, const char* name) {\n    initDish((Dish*)appetizer, name);\n    appetizer->base.vtable = &appetizerVTable;\n}\n\nint main() {\n    Dish dish;\n    initDish(&dish, \"Pasta\");\n    dish.vtable->prepare(&dish);\n    dish.vtable->serve(&dish);\n\n    Appetizer appetizer;\n    initAppetizer(&appetizer, \"Bruschetta\");\n    appetizer.base.vtable->prepare(&appetizer);\n    appetizer.base.vtable->serve(&appetizer);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a foundational class for a book collection with properties like genre and author, and derive a mystery collection class that overrides the genre property to be 'mystery'.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    char genre[50];\n    char author[50];\n} BookCollection;\n\ntypedef struct {\n    BookCollection base;\n} MysteryCollection;\n\nvoid initBookCollection(BookCollection *collection, const char *genre, const char *author) {\n    strcpy(collection->genre, genre);\n    strcpy(collection->author, author);\n}\n\nvoid initMysteryCollection(MysteryCollection *collection, const char *author) {\n    initBookCollection(&collection->base, \"mystery\", author);\n}\n\nint main() {\n    MysteryCollection mysteryBook;\n    initMysteryCollection(&mysteryBook, \"Agatha Christie\");\n\n    printf(\"Genre: %s\\n\", mysteryBook.base.genre);\n    printf(\"Author: %s\\n\", mysteryBook.base.author);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a base class for a file storage system with methods for saving and deleting files, then create a cloud storage subclass that overrides these methods for remote access.",
    "code": "```c\n#include <stdio.h>\n\n// Base class for file storage system\ntypedef struct {\n    void (*saveFile)(const char *filename);\n    void (*deleteFile)(const char *filename);\n} FileStorage;\n\n// Method implementations for base class\nvoid saveFileLocal(const char *filename) {\n    printf(\"Saving file locally: %s\\n\", filename);\n}\n\nvoid deleteFileLocal(const char *filename) {\n    printf(\"Deleting file locally: %s\\n\", filename);\n}\n\n// Cloud storage subclass\ntypedef struct {\n    FileStorage base;\n} CloudStorage;\n\n// Method implementations for cloud storage subclass\nvoid saveFileRemote(const char *filename) {\n    printf(\"Saving file to cloud: %s\\n\", filename);\n}\n\nvoid deleteFileRemote(const char *filename) {\n    printf(\"Deleting file from cloud: %s\\n\", filename);\n}\n\n// Function to initialize CloudStorage\nvoid initCloudStorage(CloudStorage *cloudStorage) {\n    cloudStorage->base.saveFile = saveFileRemote;\n    cloudStorage->base.deleteFile = deleteFileRemote;\n}\n\nint main() {\n    // Base class usage\n    FileStorage localStorage;\n    localStorage.saveFile = saveFileLocal;\n    localStorage.deleteFile = deleteFileLocal;\n\n    localStorage.saveFile(\"localfile.txt\");\n    localStorage.deleteFile(\"localfile.txt\");\n\n    // CloudStorage subclass usage\n    CloudStorage cloudStorage;\n    initCloudStorage(&cloudStorage);\n\n    cloudStorage.base.saveFile(\"cloudfile.txt\");\n    cloudStorage.base.deleteFile(\"cloudfile.txt\");\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a superclass for a seasonal sale event with methods for discounts and promotions, then extend it with a summer sale subclass that overrides these methods for summer items.",
    "code": "```c\n#include <stdio.h>\n\n// Superclass for a seasonal sale event\ntypedef struct {\n    void (*discounts)(void);\n    void (*promotions)(void);\n} SeasonalSale;\n\nvoid seasonalDiscounts() {\n    printf(\"General discounts available.\\n\");\n}\n\nvoid seasonalPromotions() {\n    printf(\"General promotions available.\\n\");\n}\n\nSeasonalSale createSeasonalSale() {\n    SeasonalSale sale;\n    sale.discounts = seasonalDiscounts;\n    sale.promotions = seasonalPromotions;\n    return sale;\n}\n\n// Subclass for a summer sale event\ntypedef struct {\n    SeasonalSale base;\n} SummerSale;\n\nvoid summerDiscounts() {\n    printf(\"Summer discounts available.\\n\");\n}\n\nvoid summerPromotions() {\n    printf(\"Summer promotions available.\\n\");\n}\n\nSummerSale createSummerSale() {\n    SummerSale summerSale;\n    summerSale.base.discounts = summerDiscounts;\n    summerSale.base.promotions = summerPromotions;\n    return summerSale;\n}\n\nint main() {\n    SeasonalSale seasonalSale = createSeasonalSale();\n    SummerSale summerSale = createSummerSale();\n\n    printf(\"Seasonal Sale:\\n\");\n    seasonalSale.discounts();\n    seasonalSale.promotions();\n\n    printf(\"\\nSummer Sale:\\n\");\n    summerSale.base.discounts();\n    summerSale.base.promotions();\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a base class for a personal budget with methods for income and expenses, then create a student budget subclass that overrides these methods for tuition and fees.",
    "code": "```c\n#include <stdio.h>\n\ntypedef struct {\n    double income;\n    double expenses;\n} PersonalBudget;\n\nvoid setIncome(PersonalBudget *budget, double amount) {\n    budget->income = amount;\n}\n\nvoid setExpenses(PersonalBudget *budget, double amount) {\n    budget->expenses = amount;\n}\n\ntypedef struct {\n    PersonalBudget base;\n    double tuition;\n    double fees;\n} StudentBudget;\n\nvoid setStudentIncome(StudentBudget *budget, double amount) {\n    budget->base.income = amount;\n}\n\nvoid setStudentExpenses(StudentBudget *budget, double tuition, double fees) {\n    budget->base.expenses = tuition + fees;\n    budget->tuition = tuition;\n    budget->fees = fees;\n}\n\nint main() {\n    PersonalBudget personal;\n    setIncome(&personal, 5000.0);\n    setExpenses(&personal, 2000.0);\n    \n    StudentBudget student;\n    setStudentIncome(&student, 4000.0);\n    setStudentExpenses(&student, 1500.0, 500.0);\n\n    printf(\"Personal Budget Income: %.2f, Expenses: %.2f\\n\", personal.income, personal.expenses);\n    printf(\"Student Budget Income: %.2f, Tuition: %.2f, Fees: %.2f, Total Expenses: %.2f\\n\",\n           student.base.income, student.tuition, student.fees, student.base.expenses);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Construct a parent class for a fitness routine with methods for exercises and duration, then derive a yoga routine class that overrides these methods for flexibility exercises.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n// Parent class for fitness routine\ntypedef struct {\n    void (*exercise)(void);\n    void (*duration)(void);\n} FitnessRoutine;\n\n// Methods for the parent class\nvoid fitnessExercise() {\n    printf(\"General fitness exercises.\\n\");\n}\n\nvoid fitnessDuration() {\n    printf(\"Duration: 30 minutes.\\n\");\n}\n\n// Derived class for yoga routine\ntypedef struct {\n    FitnessRoutine base;\n} YogaRoutine;\n\n// Overridden methods for the derived class\nvoid yogaExercise() {\n    printf(\"Flexibility exercises.\\n\");\n}\n\nvoid yogaDuration() {\n    printf(\"Duration: 45 minutes.\\n\");\n}\n\n// Function to create a new YogaRoutine\nYogaRoutine newYogaRoutine() {\n    YogaRoutine yr;\n    yr.base.exercise = yogaExercise;\n    yr.base.duration = yogaDuration;\n    return yr;\n}\n\nint main() {\n    // Using the parent class\n    FitnessRoutine fitnessRoutine;\n    fitnessRoutine.exercise = fitnessExercise;\n    fitnessRoutine.duration = fitnessDuration;\n\n    printf(\"Fitness Routine:\\n\");\n    fitnessRoutine.exercise();\n    fitnessRoutine.duration();\n\n    // Using the derived class\n    YogaRoutine yogaRoutine = newYogaRoutine();\n\n    printf(\"\\nYoga Routine:\\n\");\n    yogaRoutine.base.exercise();\n    yogaRoutine.base.duration();\n\n    return 0;\n}\n```"
  },
  {
    "task": "Set up a base class for a transportation ticket with methods for pricing and validity, and extend it with an airline ticket subclass that overrides these methods for baggage allowance.",
    "code": "```c\n#include <stdio.h>\n\n// Base class for a transportation ticket\ntypedef struct {\n    double (*getPrice)(void *);\n    int (*isValid)(void *);\n} TransportationTicket;\n\n// Method implementations for the base class\ndouble baseGetPrice(void *self) {\n    return 100.0; // Base price\n}\n\nint baseIsValid(void *self) {\n    return 1; // Base validity\n}\n\n// Initialize the base class\nvoid initTransportationTicket(TransportationTicket *ticket) {\n    ticket->getPrice = baseGetPrice;\n    ticket->isValid = baseIsValid;\n}\n\n// Subclass for an airline ticket\ntypedef struct {\n    TransportationTicket base;\n    int baggageAllowance;\n} AirlineTicket;\n\n// Method implementations for the airline ticket subclass\ndouble airlineGetPrice(void *self) {\n    AirlineTicket *ticket = (AirlineTicket *)self;\n    return 200.0; // Airline ticket price\n}\n\nint airlineIsValid(void *self) {\n    AirlineTicket *ticket = (AirlineTicket *)self;\n    return ticket->baggageAllowance > 0; // Validity based on baggage allowance\n}\n\n// Initialize the airline ticket subclass\nvoid initAirlineTicket(AirlineTicket *ticket, int baggageAllowance) {\n    initTransportationTicket(&ticket->base);\n    ticket->base.getPrice = airlineGetPrice;\n    ticket->base.isValid = airlineIsValid;\n    ticket->baggageAllowance = baggageAllowance;\n}\n\n// Demonstration\nint main() {\n    AirlineTicket myTicket;\n    initAirlineTicket(&myTicket, 2);\n\n    printf(\"Price: %.2f\\n\", myTicket.base.getPrice(&myTicket));\n    printf(\"Validity: %d\\n\", myTicket.base.isValid(&myTicket));\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a foundational class for a digital photo album with properties like album name and date, and derive a vacation album class that overrides the date property to be specific.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    char albumName[50];\n    char date[20];\n} PhotoAlbum;\n\ntypedef struct {\n    PhotoAlbum base;\n    char vacationDate[20];\n} VacationAlbum;\n\nvoid initializePhotoAlbum(PhotoAlbum *album, const char *name, const char *date) {\n    strncpy(album->albumName, name, sizeof(album->albumName) - 1);\n    strncpy(album->date, date, sizeof(album->date) - 1);\n}\n\nvoid initializeVacationAlbum(VacationAlbum *album, const char *name, const char *vacationDate) {\n    initializePhotoAlbum(&album->base, name, \"\");\n    strncpy(album->vacationDate, vacationDate, sizeof(album->vacationDate) - 1);\n}\n\nint main() {\n    PhotoAlbum myAlbum;\n    initializePhotoAlbum(&myAlbum, \"Family Memories\", \"2023-10-12\");\n\n    VacationAlbum myVacationAlbum;\n    initializeVacationAlbum(&myVacationAlbum, \"Beach Trip\", \"2023-08-15\");\n\n    printf(\"Photo Album: %s, Date: %s\\n\", myAlbum.albumName, myAlbum.date);\n    printf(\"Vacation Album: %s, Vacation Date: %s\\n\", myVacationAlbum.base.albumName, myVacationAlbum.vacationDate);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a base class for a home appliance with methods for power usage and warranty, then create a refrigerator subclass that overrides these methods for energy efficiency.",
    "code": "```c\n#include <stdio.h>\n\n// Base class for HomeAppliance\ntypedef struct {\n    void (*powerUsage)(void);\n    void (*warranty)(void);\n} HomeAppliance;\n\nvoid homeAppliancePowerUsage() {\n    printf(\"Generic home appliance power usage.\\n\");\n}\n\nvoid homeApplianceWarranty() {\n    printf(\"Generic home appliance warranty.\\n\");\n}\n\n// Refrigerator subclass\ntypedef struct {\n    HomeAppliance base; // Inheritance mechanism\n} Refrigerator;\n\nvoid refrigeratorPowerUsage() {\n    printf(\"Refrigerator energy-efficient power usage.\\n\");\n}\n\nvoid refrigeratorWarranty() {\n    printf(\"Refrigerator specific warranty.\\n\");\n}\n\nint main() {\n    // Instantiate the Refrigerator subclass\n    Refrigerator fridge;\n\n    // Override methods\n    fridge.base.powerUsage = refrigeratorPowerUsage;\n    fridge.base.warranty = refrigeratorWarranty;\n\n    // Call overridden methods\n    fridge.base.powerUsage();\n    fridge.base.warranty();\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a superclass for a software update with methods for versioning and patch notes, then extend it with a security update subclass that overrides these methods for vulnerabilities.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n// Superclass\ntypedef struct {\n    char version[50];\n    char patchNotes[200];\n    void (*getVersion)(struct SoftwareUpdate*);\n    void (*getPatchNotes)(struct SoftwareUpdate*);\n} SoftwareUpdate;\n\nvoid getVersion(SoftwareUpdate* this) {\n    printf(\"Version: %s\\n\", this->version);\n}\n\nvoid getPatchNotes(SoftwareUpdate* this) {\n    printf(\"Patch Notes: %s\\n\", this->patchNotes);\n}\n\nSoftwareUpdate createSoftwareUpdate(char* version, char* patchNotes) {\n    SoftwareUpdate update;\n    strcpy(update.version, version);\n    strcpy(update.patchNotes, patchNotes);\n    update.getVersion = getVersion;\n    update.getPatchNotes = getPatchNotes;\n    return update;\n}\n\n// Subclass\ntypedef struct {\n    SoftwareUpdate base;\n    char vulnerabilities[200];\n    void (*getVersion)(struct SecurityUpdate*);\n    void (*getPatchNotes)(struct SecurityUpdate*);\n} SecurityUpdate;\n\nvoid getSecurityVersion(SecurityUpdate* this) {\n    printf(\"Security Update Version: %s\\n\", this->base.version);\n}\n\nvoid getSecurityPatchNotes(SecurityUpdate* this) {\n    printf(\"Vulnerabilities: %s\\n\", this->vulnerabilities);\n}\n\nSecurityUpdate createSecurityUpdate(char* version, char* vulnerabilities) {\n    SecurityUpdate update;\n    strcpy(update.base.version, version);\n    strcpy(update.vulnerabilities, vulnerabilities);\n    update.getVersion = getSecurityVersion;\n    update.getPatchNotes = getSecurityPatchNotes;\n    return update;\n}\n\nint main() {\n    SoftwareUpdate update = createSoftwareUpdate(\"1.0.0\", \"Initial release\");\n    update.getVersion(&update);\n    update.getPatchNotes(&update);\n\n    SecurityUpdate secUpdate = createSecurityUpdate(\"2.0.1\", \"Fixed buffer overflow\");\n    secUpdate.getVersion(&secUpdate);\n    secUpdate.getPatchNotes(&secUpdate);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a base class for a musical performance with methods for rehearsal and execution, then create a concert performance subclass that overrides these methods for live audience.",
    "code": "```c\n#include <stdio.h>\n\ntypedef struct {\n    void (*rehearse)(void);\n    void (*execute)(void);\n} MusicalPerformance;\n\nvoid baseRehearse() {\n    printf(\"Rehearsing performance...\\n\");\n}\n\nvoid baseExecute() {\n    printf(\"Executing performance...\\n\");\n}\n\nMusicalPerformance* createMusicalPerformance() {\n    MusicalPerformance* performance = (MusicalPerformance*)malloc(sizeof(MusicalPerformance));\n    performance->rehearse = baseRehearse;\n    performance->execute = baseExecute;\n    return performance;\n}\n\ntypedef struct {\n    MusicalPerformance base;\n} ConcertPerformance;\n\nvoid concertRehearse() {\n    printf(\"Rehearsing concert performance...\\n\");\n}\n\nvoid concertExecute() {\n    printf(\"Executing concert performance for live audience...\\n\");\n}\n\nConcertPerformance* createConcertPerformance() {\n    ConcertPerformance* concert = (ConcertPerformance*)malloc(sizeof(ConcertPerformance));\n    concert->base.rehearse = concertRehearse;\n    concert->base.execute = concertExecute;\n    return concert;\n}\n\nint main() {\n    MusicalPerformance* performance = createMusicalPerformance();\n    performance->rehearse();\n    performance->execute();\n\n    ConcertPerformance* concert = createConcertPerformance();\n    concert->base.rehearse();\n    concert->base.execute();\n\n    free(performance);\n    free(concert);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Construct a parent class for an academic degree with methods for course requirements and credits, then derive a master's degree class that overrides these methods for advanced studies.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n// Parent class: AcademicDegree\ntypedef struct {\n    char name[50];\n    void (*courseRequirements)(void);\n    int (*credits)(void);\n} AcademicDegree;\n\n// Method implementations for AcademicDegree\nvoid degreeCourseRequirements() {\n    printf(\"General course requirements for an academic degree.\\n\");\n}\n\nint degreeCredits() {\n    return 120;\n}\n\n// Derived class: MastersDegree\ntypedef struct {\n    AcademicDegree base;\n} MastersDegree;\n\n// Method implementations for MastersDegree\nvoid mastersCourseRequirements() {\n    printf(\"Advanced course requirements for a master's degree.\\n\");\n}\n\nint mastersCredits() {\n    return 60;\n}\n\n// Function to initialize a MastersDegree instance\nvoid initMastersDegree(MastersDegree *md) {\n    strcpy(md->base.name, \"Master's Degree\");\n    md->base.courseRequirements = mastersCourseRequirements;\n    md->base.credits = mastersCredits;\n}\n\nint main() {\n    MastersDegree md;\n    initMastersDegree(&md);\n\n    printf(\"%s:\\n\", md.base.name);\n    md.base.courseRequirements();\n    printf(\"Credits required: %d\\n\", md.base.credits());\n\n    return 0;\n}\n```"
  },
  {
    "task": "Set up a base class for a weather forecast with methods for temperature and conditions, and extend it with a winter forecast subclass that overrides these methods for snow conditions.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n// Base class\ntypedef struct {\n    void (*getTemperature)(void);\n    void (*getConditions)(void);\n} WeatherForecast;\n\n// Base class methods\nvoid baseGetTemperature(void) {\n    printf(\"Temperature: 20\u00b0C\\n\");\n}\n\nvoid baseGetConditions(void) {\n    printf(\"Conditions: Sunny\\n\");\n}\n\n// WinterForecast subclass\ntypedef struct {\n    WeatherForecast base;\n} WinterForecast;\n\n// Overridden methods for WinterForecast\nvoid winterGetTemperature(void) {\n    printf(\"Temperature: -5\u00b0C\\n\");\n}\n\nvoid winterGetConditions(void) {\n    printf(\"Conditions: Snow\\n\");\n}\n\n// Helper function to set up a WinterForecast object\nvoid initWinterForecast(WinterForecast *wf) {\n    wf->base.getTemperature = winterGetTemperature;\n    wf->base.getConditions = winterGetConditions;\n}\n\nint main() {\n    WeatherForecast wf;\n    WinterForecast winter;\n\n    // Initialize base class\n    wf.getTemperature = baseGetTemperature;\n    wf.getConditions = baseGetConditions;\n\n    // Call base class methods\n    printf(\"Base Weather Forecast:\\n\");\n    wf.getTemperature();\n    wf.getConditions();\n\n    // Initialize and call subclass methods\n    printf(\"\\nWinter Weather Forecast:\\n\");\n    initWinterForecast(&winter);\n    winter.base.getTemperature();\n    winter.base.getConditions();\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a foundational class for a personal diary with properties like date and entries, and derive a travel diary class that overrides the date property with travel dates.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    char date[20];\n    char entries[256];\n} PersonalDiary;\n\ntypedef struct {\n    PersonalDiary base;\n    char travelDate[20];\n} TravelDiary;\n\nvoid printPersonalDiary(PersonalDiary *diary) {\n    printf(\"Date: %s\\n\", diary->date);\n    printf(\"Entries: %s\\n\", diary->entries);\n}\n\nvoid printTravelDiary(TravelDiary *diary) {\n    printf(\"Travel Date: %s\\n\", diary->travelDate);\n    printf(\"Entries: %s\\n\", diary->base.entries);\n}\n\nint main() {\n    PersonalDiary myDiary;\n    strcpy(myDiary.date, \"2023-10-01\");\n    strcpy(myDiary.entries, \"Started learning C.\");\n\n    TravelDiary myTravelDiary;\n    strcpy(myTravelDiary.base.entries, \"Visited Paris.\");\n    strcpy(myTravelDiary.travelDate, \"2023-11-15\");\n\n    printPersonalDiary(&myDiary);\n    printTravelDiary(&myTravelDiary);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a base class for a pet with methods for feeding and grooming, then create a cat subclass that overrides these methods with specific food preferences.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    void (*feed)(void *self);\n    void (*groom)(void *self);\n} PetVtable;\n\ntypedef struct {\n    PetVtable *vtable;\n} Pet;\n\nvoid pet_feed(void *self) {\n    printf(\"Feeding the pet.\\n\");\n}\n\nvoid pet_groom(void *self) {\n    printf(\"Grooming the pet.\\n\");\n}\n\nPetVtable pet_vtable = {\n    .feed = pet_feed,\n    .groom = pet_groom\n};\n\nvoid pet_init(Pet *pet) {\n    pet->vtable = &pet_vtable;\n}\n\ntypedef struct {\n    Pet base;\n} Cat;\n\nvoid cat_feed(void *self) {\n    printf(\"Feeding the cat with fish.\\n\");\n}\n\nvoid cat_groom(void *self) {\n    printf(\"Grooming the cat with a brush.\\n\");\n}\n\nPetVtable cat_vtable = {\n    .feed = cat_feed,\n    .groom = cat_groom\n};\n\nvoid cat_init(Cat *cat) {\n    pet_init(&cat->base);\n    cat->base.vtable = &cat_vtable;\n}\n\nint main() {\n    Pet pet;\n    Cat cat;\n\n    pet_init(&pet);\n    cat_init(&cat);\n\n    pet.vtable->feed(&pet);\n    pet.vtable->groom(&pet);\n\n    cat.base.vtable->feed(&cat);\n    cat.base.vtable->groom(&cat);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a superclass for a software library with methods for installation and updates, then extend it with a graphics library subclass that overrides these methods for rendering capabilities.",
    "code": "```c\n#include <stdio.h>\n\n// Superclass for a software library\ntypedef struct SoftwareLibrary {\n    // Function pointers for methods\n    void (*install)(struct SoftwareLibrary*);\n    void (*update)(struct SoftwareLibrary*);\n} SoftwareLibrary;\n\n// Method implementations for SoftwareLibrary\nvoid software_install(SoftwareLibrary* lib) {\n    printf(\"Installing software library...\\n\");\n}\n\nvoid software_update(SoftwareLibrary* lib) {\n    printf(\"Updating software library...\\n\");\n}\n\n// Constructor for SoftwareLibrary\nSoftwareLibrary createSoftwareLibrary() {\n    SoftwareLibrary lib;\n    lib.install = software_install;\n    lib.update = software_update;\n    return lib;\n}\n\n// Subclass for a graphics library\ntypedef struct GraphicsLibrary {\n    SoftwareLibrary base; // Inheritance\n} GraphicsLibrary;\n\n// Method implementations for GraphicsLibrary\nvoid graphics_install(SoftwareLibrary* lib) {\n    printf(\"Installing graphics library with rendering capabilities...\\n\");\n}\n\nvoid graphics_update(SoftwareLibrary* lib) {\n    printf(\"Updating graphics library with rendering capabilities...\\n\");\n}\n\n// Constructor for GraphicsLibrary\nGraphicsLibrary createGraphicsLibrary() {\n    GraphicsLibrary lib;\n    lib.base.install = graphics_install;\n    lib.base.update = graphics_update;\n    return lib;\n}\n\n// Example usage\nint main() {\n    // Create and use SoftwareLibrary\n    SoftwareLibrary swLib = createSoftwareLibrary();\n    swLib.install(&swLib);\n    swLib.update(&swLib);\n\n    // Create and use GraphicsLibrary\n    GraphicsLibrary gfxLib = createGraphicsLibrary();\n    gfxLib.base.install((SoftwareLibrary*)&gfxLib);\n    gfxLib.base.update((SoftwareLibrary*)&gfxLib);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a base class for a political campaign with methods for fundraising and events, then create a presidential campaign subclass that overrides these methods for national scale.",
    "code": "```c\n#include <stdio.h>\n\n// Base class for a political campaign\ntypedef struct {\n    void (*fundraising)(void);\n    void (*events)(void);\n} PoliticalCampaign;\n\n// Method implementations for the base class\nvoid baseFundraising() {\n    printf(\"Fundraising at local level.\\n\");\n}\n\nvoid baseEvents() {\n    printf(\"Organizing events at local level.\\n\");\n}\n\n// Subclass for a presidential campaign\ntypedef struct {\n    PoliticalCampaign base;\n} PresidentialCampaign;\n\n// Method implementations for the subclass\nvoid presidentialFundraising() {\n    printf(\"Fundraising at national level.\\n\");\n}\n\nvoid presidentialEvents() {\n    printf(\"Organizing events at national level.\\n\");\n}\n\n// Function to initialize the base class\nvoid initPoliticalCampaign(PoliticalCampaign *campaign) {\n    campaign->fundraising = baseFundraising;\n    campaign->events = baseEvents;\n}\n\n// Function to initialize the subclass\nvoid initPresidentialCampaign(PresidentialCampaign *campaign) {\n    initPoliticalCampaign(&campaign->base);\n    campaign->base.fundraising = presidentialFundraising;\n    campaign->base.events = presidentialEvents;\n}\n\nint main() {\n    PoliticalCampaign localCampaign;\n    initPoliticalCampaign(&localCampaign);\n    localCampaign.fundraising();\n    localCampaign.events();\n\n    PresidentialCampaign nationalCampaign;\n    initPresidentialCampaign(&nationalCampaign);\n    nationalCampaign.base.fundraising();\n    nationalCampaign.base.events();\n\n    return 0;\n}\n```"
  },
  {
    "task": "Construct a parent class for an automotive part with methods for durability and replacement, then derive an engine part class that overrides these methods for performance.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct AutomotivePart {\n    void (*durability)(struct AutomotivePart*);\n    void (*replacement)(struct AutomotivePart*);\n} AutomotivePart;\n\nvoid automotivePartDurability(AutomotivePart* part) {\n    printf(\"Automotive Part Durability: Generic Check\\n\");\n}\n\nvoid automotivePartReplacement(AutomotivePart* part) {\n    printf(\"Automotive Part Replacement: Generic Process\\n\");\n}\n\nAutomotivePart newAutomotivePart() {\n    AutomotivePart part;\n    part.durability = automotivePartDurability;\n    part.replacement = automotivePartReplacement;\n    return part;\n}\n\ntypedef struct EnginePart {\n    AutomotivePart base;\n} EnginePart;\n\nvoid enginePartDurability(AutomotivePart* part) {\n    printf(\"Engine Part Durability: Detailed Engine Check\\n\");\n}\n\nvoid enginePartReplacement(AutomotivePart* part) {\n    printf(\"Engine Part Replacement: Complex Engine Process\\n\");\n}\n\nEnginePart newEnginePart() {\n    EnginePart part;\n    part.base = newAutomotivePart();\n    part.base.durability = enginePartDurability;\n    part.base.replacement = enginePartReplacement;\n    return part;\n}\n\nint main() {\n    AutomotivePart genericPart = newAutomotivePart();\n    genericPart.durability(&genericPart);\n    genericPart.replacement(&genericPart);\n\n    EnginePart engine = newEnginePart();\n    engine.base.durability((AutomotivePart*)&engine);\n    engine.base.replacement((AutomotivePart*)&engine);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Set up a base class for an online tutorial with methods for lessons and quizzes, and extend it with a coding tutorial subclass that overrides these methods for interactive exercises.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n// Base class: OnlineTutorial\ntypedef struct {\n    void (*lessons)(void);\n    void (*quizzes)(void);\n} OnlineTutorial;\n\nvoid onlineTutorialLessons() {\n    printf(\"Base Lesson: General tutorial lessons.\\n\");\n}\n\nvoid onlineTutorialQuizzes() {\n    printf(\"Base Quiz: General tutorial quizzes.\\n\");\n}\n\nOnlineTutorial* newOnlineTutorial() {\n    OnlineTutorial* tutorial = (OnlineTutorial*)malloc(sizeof(OnlineTutorial));\n    tutorial->lessons = onlineTutorialLessons;\n    tutorial->quizzes = onlineTutorialQuizzes;\n    return tutorial;\n}\n\n// Subclass: CodingTutorial\ntypedef struct {\n    OnlineTutorial base;\n} CodingTutorial;\n\nvoid codingTutorialLessons() {\n    printf(\"Coding Lesson: Interactive coding exercises.\\n\");\n}\n\nvoid codingTutorialQuizzes() {\n    printf(\"Coding Quiz: Interactive coding quizzes.\\n\");\n}\n\nCodingTutorial* newCodingTutorial() {\n    CodingTutorial* tutorial = (CodingTutorial*)malloc(sizeof(CodingTutorial));\n    tutorial->base.lessons = codingTutorialLessons;\n    tutorial->base.quizzes = codingTutorialQuizzes;\n    return tutorial;\n}\n\nint main() {\n    // Using the base class\n    OnlineTutorial* basicTutorial = newOnlineTutorial();\n    basicTutorial->lessons();\n    basicTutorial->quizzes();\n    \n    // Using the subclass\n    CodingTutorial* codingTutorial = newCodingTutorial();\n    codingTutorial->base.lessons();\n    codingTutorial->base.quizzes();\n    \n    // Free allocated memory\n    free(basicTutorial);\n    free(codingTutorial);\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Create a foundational class for a personal collection with properties like item type and value, and derive a stamp collection class that overrides the item type property to be 'stamps'.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n// Base class\ntypedef struct {\n    char item_type[50];\n    double value;\n} PersonalCollection;\n\n// Derived class\ntypedef struct {\n    PersonalCollection base;\n} StampCollection;\n\n// Helper function to initialize PersonalCollection\nvoid initPersonalCollection(PersonalCollection *collection, const char *item_type, double value) {\n    strcpy(collection->item_type, item_type);\n    collection->value = value;\n}\n\n// Helper function to initialize StampCollection\nvoid initStampCollection(StampCollection *collection, double value) {\n    initPersonalCollection(&collection->base, \"stamps\", value);\n}\n\nint main() {\n    StampCollection myStamps;\n    initStampCollection(&myStamps, 150.0);\n\n    printf(\"Item type: %s\\n\", myStamps.base.item_type);\n    printf(\"Value: %.2f\\n\", myStamps.base.value);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a base class for a video game character with methods for health and abilities, then create a warrior character subclass that overrides these methods for strength.",
    "code": "```c\n#include <stdio.h>\n\n// Base class for a video game character\ntypedef struct {\n    int health;\n    void (*abilities)(void);\n} Character;\n\n// Method for health in the base class\nvoid character_health(Character* c) {\n    printf(\"Character health: %d\\n\", c->health);\n}\n\n// Base class method for abilities\nvoid character_abilities() {\n    printf(\"Character abilities: Generic\\n\");\n}\n\n// Warrior subclass\ntypedef struct {\n    Character base;\n    int strength;\n} Warrior;\n\n// Overridden method for health in the warrior subclass\nvoid warrior_health(Warrior* w) {\n    printf(\"Warrior health: %d\\n\", w->base.health);\n}\n\n// Overridden method for abilities in the warrior subclass\nvoid warrior_abilities() {\n    printf(\"Warrior abilities: Strength\\n\");\n}\n\n// Function to create a Warrior instance\nWarrior create_warrior(int health, int strength) {\n    Warrior w;\n    w.base.health = health;\n    w.base.abilities = warrior_abilities;\n    w.strength = strength;\n    return w;\n}\n\nint main() {\n    // Create a generic character\n    Character c = {100, character_abilities};\n    character_health(&c);\n    c.abilities();\n\n    // Create a warrior character\n    Warrior w = create_warrior(150, 75);\n    warrior_health(&w);\n    w.base.abilities();\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a superclass for an event planner with methods for scheduling and budgeting, then extend it with a wedding planner subclass that overrides these methods for ceremony details.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n// Superclass EventPlanner\ntypedef struct {\n    void (*schedule)(void);\n    void (*budget)(void);\n} EventPlanner;\n\n// Method implementations for EventPlanner\nvoid eventSchedule() {\n    printf(\"Scheduling general event.\\n\");\n}\n\nvoid eventBudget() {\n    printf(\"Budgeting general event.\\n\");\n}\n\n// Function to create a new EventPlanner\nEventPlanner* newEventPlanner() {\n    EventPlanner* ep = (EventPlanner*)malloc(sizeof(EventPlanner));\n    ep->schedule = eventSchedule;\n    ep->budget = eventBudget;\n    return ep;\n}\n\n// Subclass WeddingPlanner extending EventPlanner\ntypedef struct {\n    EventPlanner base;\n} WeddingPlanner;\n\n// Method implementations for WeddingPlanner\nvoid weddingSchedule() {\n    printf(\"Scheduling wedding ceremony.\\n\");\n}\n\nvoid weddingBudget() {\n    printf(\"Budgeting wedding ceremony.\\n\");\n}\n\n// Function to create a new WeddingPlanner\nWeddingPlanner* newWeddingPlanner() {\n    WeddingPlanner* wp = (WeddingPlanner*)malloc(sizeof(WeddingPlanner));\n    wp->base.schedule = weddingSchedule;\n    wp->base.budget = weddingBudget;\n    return wp;\n}\n\nint main() {\n    EventPlanner* eventPlanner = newEventPlanner();\n    WeddingPlanner* weddingPlanner = newWeddingPlanner();\n\n    printf(\"Event Planner:\\n\");\n    eventPlanner->schedule();\n    eventPlanner->budget();\n\n    printf(\"\\nWedding Planner:\\n\");\n    weddingPlanner->base.schedule();\n    weddingPlanner->base.budget();\n\n    free(eventPlanner);\n    free(weddingPlanner);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a base class for a software feature with methods for functionality and user feedback, then create a beta feature subclass that overrides these methods for testing.",
    "code": "```c\n#include <stdio.h>\n\n// Base class for software feature\ntypedef struct {\n    void (*functionality)(void);\n    void (*userFeedback)(void);\n} SoftwareFeature;\n\n// Base class methods\nvoid baseFunctionality() {\n    printf(\"Base feature functionality\\n\");\n}\n\nvoid baseUserFeedback() {\n    printf(\"Base feature user feedback\\n\");\n}\n\n// Beta feature subclass\ntypedef struct {\n    SoftwareFeature base;\n} BetaFeature;\n\n// Beta feature methods\nvoid betaFunctionality() {\n    printf(\"Beta feature functionality for testing\\n\");\n}\n\nvoid betaUserFeedback() {\n    printf(\"Beta feature user feedback for testing\\n\");\n}\n\n// Function to create a new SoftwareFeature\nSoftwareFeature createSoftwareFeature() {\n    SoftwareFeature feature;\n    feature.functionality = baseFunctionality;\n    feature.userFeedback = baseUserFeedback;\n    return feature;\n}\n\n// Function to create a new BetaFeature\nBetaFeature createBetaFeature() {\n    BetaFeature beta;\n    beta.base.functionality = betaFunctionality;\n    beta.base.userFeedback = betaUserFeedback;\n    return beta;\n}\n\nint main() {\n    SoftwareFeature feature = createSoftwareFeature();\n    BetaFeature beta = createBetaFeature();\n\n    printf(\"Using base feature:\\n\");\n    feature.functionality();\n    feature.userFeedback();\n\n    printf(\"\\nUsing beta feature:\\n\");\n    beta.base.functionality();\n    beta.base.userFeedback();\n\n    return 0;\n}\n```"
  },
  {
    "task": "Construct a parent class for a gardening tool with methods for usage and maintenance, then derive a lawn mower class that overrides these methods for grass cutting.",
    "code": "```c\n#include <stdio.h>\n\n// Parent class: GardeningTool\ntypedef struct {\n    void (*usage)(void);\n    void (*maintenance)(void);\n} GardeningTool;\n\n// Method implementations for GardeningTool\nvoid gardeningToolUsage() {\n    printf(\"Using the gardening tool.\\n\");\n}\n\nvoid gardeningToolMaintenance() {\n    printf(\"Maintaining the gardening tool.\\n\");\n}\n\n// Derived class: LawnMower\ntypedef struct {\n    GardeningTool base; // Inheritance\n} LawnMower;\n\n// Method overrides for LawnMower\nvoid lawnMowerUsage() {\n    printf(\"Using the lawn mower to cut grass.\\n\");\n}\n\nvoid lawnMowerMaintenance() {\n    printf(\"Maintaining the lawn mower.\\n\");\n}\n\n// Function to initialize a LawnMower\nvoid initLawnMower(LawnMower *lawnMower) {\n    lawnMower->base.usage = lawnMowerUsage;\n    lawnMower->base.maintenance = lawnMowerMaintenance;\n}\n\nint main() {\n    // Create a LawnMower instance\n    LawnMower myLawnMower;\n    initLawnMower(&myLawnMower);\n\n    // Use the LawnMower\n    myLawnMower.base.usage();\n    myLawnMower.base.maintenance();\n\n    return 0;\n}\n```"
  },
  {
    "task": "Set up a base class for a household chore with methods for time and effort, and extend it with a cleaning chore subclass that overrides these methods for dirt removal.",
    "code": "```c\n#include <stdio.h>\n\n// Base class for household chore\ntypedef struct {\n    void (*time)(void);\n    void (*effort)(void);\n} HouseholdChore;\n\n// Method implementations for base class\nvoid baseTime() {\n    printf(\"Base time for chore\\n\");\n}\n\nvoid baseEffort() {\n    printf(\"Base effort for chore\\n\");\n}\n\n// Subclass for cleaning chore\ntypedef struct {\n    HouseholdChore base;\n} CleaningChore;\n\n// Method implementations for subclass\nvoid cleaningTime() {\n    printf(\"Time for cleaning chore\\n\");\n}\n\nvoid cleaningEffort() {\n    printf(\"Effort for cleaning chore\\n\");\n}\n\n// Function to initialize the base class\nvoid initHouseholdChore(HouseholdChore* chore) {\n    chore->time = baseTime;\n    chore->effort = baseEffort;\n}\n\n// Function to initialize the subclass\nvoid initCleaningChore(CleaningChore* chore) {\n    initHouseholdChore(&chore->base);\n    chore->base.time = cleaningTime;\n    chore->base.effort = cleaningEffort;\n}\n\nint main() {\n    HouseholdChore chore;\n    initHouseholdChore(&chore);\n    chore.time();\n    chore.effort();\n\n    CleaningChore cleaningChore;\n    initCleaningChore(&cleaningChore);\n    cleaningChore.base.time();\n    cleaningChore.base.effort();\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a foundational class for a personal project with properties like name and deadline, and derive a coding project class that overrides the deadline property for milestones.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n// Base class\ntypedef struct {\n    char name[50];\n    char deadline[50];\n} PersonalProject;\n\n// Derived class\ntypedef struct {\n    PersonalProject base;\n    char milestoneDeadline[50];\n} CodingProject;\n\n// Function to create a new PersonalProject\nPersonalProject createPersonalProject(const char* name, const char* deadline) {\n    PersonalProject project;\n    strncpy(project.name, name, sizeof(project.name) - 1);\n    strncpy(project.deadline, deadline, sizeof(project.deadline) - 1);\n    return project;\n}\n\n// Function to create a new CodingProject\nCodingProject createCodingProject(const char* name, const char* deadline, const char* milestoneDeadline) {\n    CodingProject project;\n    project.base = createPersonalProject(name, deadline);\n    strncpy(project.milestoneDeadline, milestoneDeadline, sizeof(project.milestoneDeadline) - 1);\n    return project;\n}\n\n// Function to print PersonalProject details\nvoid printPersonalProject(PersonalProject project) {\n    printf(\"Personal Project: %s\\n\", project.name);\n    printf(\"Deadline: %s\\n\", project.deadline);\n}\n\n// Function to print CodingProject details\nvoid printCodingProject(CodingProject project) {\n    printPersonalProject(project.base);\n    printf(\"Milestone Deadline: %s\\n\", project.milestoneDeadline);\n}\n\nint main() {\n    PersonalProject personalProj = createPersonalProject(\"Project A\", \"2023-12-31\");\n    CodingProject codingProj = createCodingProject(\"Coding Project B\", \"2023-12-31\", \"2023-11-30\");\n\n    printPersonalProject(personalProj);\n    printCodingProject(codingProj);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a base class for a holiday celebration with methods for traditions and activities, then create a Christmas celebration subclass that overrides these methods for gift exchange.",
    "code": "```c\n#include <stdio.h>\n\n// Base class\ntypedef struct HolidayCelebration {\n    void (*traditions)(struct HolidayCelebration*);\n    void (*activities)(struct HolidayCelebration*);\n} HolidayCelebration;\n\nvoid holiday_traditions(HolidayCelebration* self) {\n    printf(\"General holiday traditions.\\n\");\n}\n\nvoid holiday_activities(HolidayCelebration* self) {\n    printf(\"General holiday activities.\\n\");\n}\n\n// Christmas subclass\ntypedef struct {\n    HolidayCelebration base;\n} ChristmasCelebration;\n\nvoid christmas_traditions(HolidayCelebration* self) {\n    printf(\"Christmas traditions: Decorating the tree, singing carols.\\n\");\n}\n\nvoid christmas_activities(HolidayCelebration* self) {\n    printf(\"Christmas activities: Gift exchange.\\n\");\n}\n\n// Helper function to create a ChristmasCelebration instance\nChristmasCelebration create_christmas_celebration() {\n    ChristmasCelebration christmas;\n    christmas.base.traditions = christmas_traditions;\n    christmas.base.activities = christmas_activities;\n    return christmas;\n}\n\nint main() {\n    ChristmasCelebration christmas = create_christmas_celebration();\n    christmas.base.traditions((HolidayCelebration*)&christmas);\n    christmas.base.activities((HolidayCelebration*)&christmas);\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a superclass for a customer feedback system with methods for collecting and analyzing, then extend it with a product feedback subclass that overrides these methods for reviews.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    void (*collectFeedback)(void*);\n    void (*analyzeFeedback)(void*);\n} CustomerFeedback;\n\nvoid collectFeedback(void* self) {\n    printf(\"Collecting generic customer feedback.\\n\");\n}\n\nvoid analyzeFeedback(void* self) {\n    printf(\"Analyzing generic customer feedback.\\n\");\n}\n\nCustomerFeedback newCustomerFeedback() {\n    CustomerFeedback feedback;\n    feedback.collectFeedback = collectFeedback;\n    feedback.analyzeFeedback = analyzeFeedback;\n    return feedback;\n}\n\ntypedef struct {\n    CustomerFeedback base;\n    char productName[100];\n} ProductFeedback;\n\nvoid collectProductFeedback(void* self) {\n    ProductFeedback* feedback = (ProductFeedback*)self;\n    printf(\"Collecting product feedback for: %s\\n\", feedback->productName);\n}\n\nvoid analyzeProductFeedback(void* self) {\n    ProductFeedback* feedback = (ProductFeedback*)self;\n    printf(\"Analyzing product feedback for: %s\\n\", feedback->productName);\n}\n\nProductFeedback newProductFeedback(const char* productName) {\n    ProductFeedback feedback;\n    feedback.base.collectFeedback = collectProductFeedback;\n    feedback.base.analyzeFeedback = analyzeProductFeedback;\n    strncpy(feedback.productName, productName, sizeof(feedback.productName));\n    return feedback;\n}\n\nint main() {\n    CustomerFeedback customerFeedback = newCustomerFeedback();\n    ProductFeedback productFeedback = newProductFeedback(\"Widget 3000\");\n\n    customerFeedback.collectFeedback(&customerFeedback);\n    customerFeedback.analyzeFeedback(&customerFeedback);\n\n    productFeedback.base.collectFeedback(&productFeedback);\n    productFeedback.base.analyzeFeedback(&productFeedback);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a base class for a civic service with methods for public engagement and policy, then create a community service subclass that overrides these methods for local impact.",
    "code": "```c\n#include <stdio.h>\n\ntypedef struct CivicService {\n    void (*publicEngagement)(struct CivicService *self);\n    void (*policy)(struct CivicService *self);\n} CivicService;\n\nvoid basePublicEngagement(CivicService *self) {\n    printf(\"Civic Service: General public engagement.\\n\");\n}\n\nvoid basePolicy(CivicService *self) {\n    printf(\"Civic Service: General policy.\\n\");\n}\n\nCivicService *newCivicService() {\n    CivicService *service = (CivicService *)malloc(sizeof(CivicService));\n    service->publicEngagement = basePublicEngagement;\n    service->policy = basePolicy;\n    return service;\n}\n\ntypedef struct CommunityService {\n    CivicService base;\n} CommunityService;\n\nvoid localPublicEngagement(CivicService *self) {\n    printf(\"Community Service: Local public engagement.\\n\");\n}\n\nvoid localPolicy(CivicService *self) {\n    printf(\"Community Service: Local policy.\\n\");\n}\n\nCommunityService *newCommunityService() {\n    CommunityService *service = (CommunityService *)malloc(sizeof(CommunityService));\n    service->base.publicEngagement = localPublicEngagement;\n    service->base.policy = localPolicy;\n    return service;\n}\n\nint main() {\n    CivicService *civicService = newCivicService();\n    CivicService *communityService = (CivicService *)newCommunityService();\n\n    civicService->publicEngagement(civicService);\n    civicService->policy(civicService);\n\n    communityService->publicEngagement(communityService);\n    communityService->policy(communityService);\n\n    free(civicService);\n    free(communityService);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Construct a parent class for a culinary ingredient with methods for flavor and preparation, then derive a spice ingredient class that overrides these methods for seasoning.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n// Base class for CulinaryIngredient\ntypedef struct {\n    char name[50];\n    void (*flavor)(void);\n    void (*preparation)(void);\n} CulinaryIngredient;\n\n// Flavor and preparation methods for CulinaryIngredient\nvoid culinary_flavor(void) {\n    printf(\"Generic flavor.\\n\");\n}\n\nvoid culinary_preparation(void) {\n    printf(\"Generic preparation.\\n\");\n}\n\n// Derived class for SpiceIngredient\ntypedef struct {\n    CulinaryIngredient base;\n} SpiceIngredient;\n\n// Flavor and preparation methods for SpiceIngredient\nvoid spice_flavor(void) {\n    printf(\"Spicy flavor.\\n\");\n}\n\nvoid spice_preparation(void) {\n    printf(\"Grind and sprinkle.\\n\");\n}\n\n// Function to initialize a CulinaryIngredient\nvoid init_culinary_ingredient(CulinaryIngredient *ingredient, const char *name) {\n    strcpy(ingredient->name, name);\n    ingredient->flavor = culinary_flavor;\n    ingredient->preparation = culinary_preparation;\n}\n\n// Function to initialize a SpiceIngredient\nvoid init_spice_ingredient(SpiceIngredient *spice, const char *name) {\n    init_culinary_ingredient(&spice->base, name);\n    spice->base.flavor = spice_flavor;\n    spice->base.preparation = spice_preparation;\n}\n\nint main() {\n    CulinaryIngredient ingredient;\n    init_culinary_ingredient(&ingredient, \"Generic Ingredient\");\n\n    SpiceIngredient spice;\n    init_spice_ingredient(&spice, \"Chili Pepper\");\n\n    printf(\"Ingredient: %s\\n\", ingredient.name);\n    ingredient.flavor();\n    ingredient.preparation();\n\n    printf(\"Spice: %s\\n\", spice.base.name);\n    spice.base.flavor();\n    spice.base.preparation();\n\n    return 0;\n}\n```"
  },
  {
    "task": "Set up a base class for a scientific experiment with methods for hypothesis and testing, and extend it with a chemistry experiment subclass that overrides these methods for reactions.",
    "code": "```c\n#include <stdio.h>\n\n// Base class for scientific experiment\ntypedef struct {\n    void (*hypothesis)(void);\n    void (*testing)(void);\n} ScientificExperiment;\n\n// Method implementations for base class\nvoid baseHypothesis() {\n    printf(\"Base hypothesis for scientific experiment.\\n\");\n}\n\nvoid baseTesting() {\n    printf(\"Base testing method for scientific experiment.\\n\");\n}\n\n// Subclass for chemistry experiment\ntypedef struct {\n    ScientificExperiment base;\n} ChemistryExperiment;\n\n// Method implementations for subclass\nvoid chemistryHypothesis() {\n    printf(\"Hypothesis for chemistry experiment: Predict reaction outcome.\\n\");\n}\n\nvoid chemistryTesting() {\n    printf(\"Testing method for chemistry experiment: Conduct reaction.\\n\");\n}\n\n// Function to initialize base class\nvoid initScientificExperiment(ScientificExperiment *exp) {\n    exp->hypothesis = baseHypothesis;\n    exp->testing = baseTesting;\n}\n\n// Function to initialize subclass\nvoid initChemistryExperiment(ChemistryExperiment *chemExp) {\n    initScientificExperiment(&(chemExp->base));\n    chemExp->base.hypothesis = chemistryHypothesis;\n    chemExp->base.testing = chemistryTesting;\n}\n\nint main() {\n    ScientificExperiment experiment;\n    initScientificExperiment(&experiment);\n    experiment.hypothesis();\n    experiment.testing();\n    \n    ChemistryExperiment chemExperiment;\n    initChemistryExperiment(&chemExperiment);\n    chemExperiment.base.hypothesis();\n    chemExperiment.base.testing();\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Create a foundational class for an inventory system with properties like item ID and quantity, and derive a warehouse inventory class that overrides the quantity property for bulk storage.",
    "code": "```c\n#include <stdio.h>\n\n// Base class for inventory\ntypedef struct {\n    int itemID;\n    int quantity;\n} Inventory;\n\n// Function to initialize inventory\nvoid initInventory(Inventory* inv, int itemID, int quantity) {\n    inv->itemID = itemID;\n    inv->quantity = quantity;\n}\n\n// Derived class for warehouse inventory\ntypedef struct {\n    Inventory base; // Inherit from Inventory\n    int bulkQuantity; // Override quantity\n} WarehouseInventory;\n\n// Function to initialize warehouse inventory\nvoid initWarehouseInventory(WarehouseInventory* whInv, int itemID, int bulkQuantity) {\n    initInventory(&whInv->base, itemID, 0); // Initialize base\n    whInv->bulkQuantity = bulkQuantity; // Set bulk quantity\n}\n\n// Function to display warehouse inventory\nvoid displayWarehouseInventory(WarehouseInventory* whInv) {\n    printf(\"Item ID: %d, Bulk Quantity: %d\\n\", whInv->base.itemID, whInv->bulkQuantity);\n}\n\nint main() {\n    WarehouseInventory whInv;\n    initWarehouseInventory(&whInv, 101, 500);\n    displayWarehouseInventory(&whInv);\n    return 0;\n}\n```"
  },
  {
    "task": "Design a base class for a travel agency with methods for itinerary and bookings, then create a luxury travel subclass that overrides these methods for premium services.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n// Base class\ntypedef struct {\n    void (*itinerary)(void);\n    void (*bookings)(void);\n} TravelAgency;\n\n// Base class methods\nvoid baseItinerary() {\n    printf(\"Base Itinerary: Standard travel itinerary.\\n\");\n}\n\nvoid baseBookings() {\n    printf(\"Base Bookings: Standard travel bookings.\\n\");\n}\n\nTravelAgency* createTravelAgency() {\n    TravelAgency* agency = (TravelAgency*)malloc(sizeof(TravelAgency));\n    if (agency != NULL) {\n        agency->itinerary = baseItinerary;\n        agency->bookings = baseBookings;\n    }\n    return agency;\n}\n\n// Subclass for luxury travel\ntypedef struct {\n    TravelAgency base;\n} LuxuryTravel;\n\n// Overridden methods for luxury travel\nvoid luxuryItinerary() {\n    printf(\"Luxury Itinerary: Premium travel itinerary with exclusive experiences.\\n\");\n}\n\nvoid luxuryBookings() {\n    printf(\"Luxury Bookings: Premium travel bookings with 5-star accommodations.\\n\");\n}\n\nLuxuryTravel* createLuxuryTravel() {\n    LuxuryTravel* luxury = (LuxuryTravel*)malloc(sizeof(LuxuryTravel));\n    if (luxury != NULL) {\n        luxury->base.itinerary = luxuryItinerary;\n        luxury->base.bookings = luxuryBookings;\n    }\n    return luxury;\n}\n\nint main() {\n    // Using the base class\n    TravelAgency* agency = createTravelAgency();\n    agency->itinerary();\n    agency->bookings();\n\n    // Using the subclass\n    LuxuryTravel* luxury = createLuxuryTravel();\n    luxury->base.itinerary();\n    luxury->base.bookings();\n\n    // Clean up\n    free(agency);\n    free(luxury);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a superclass for an educational tool with methods for teaching and assessment, then extend it with a math tool subclass that overrides these methods for problem-solving.",
    "code": "```c\n#include <stdio.h>\n\n// Superclass for the educational tool\ntypedef struct EducationalTool {\n    void (*teach)(struct EducationalTool*);\n    void (*assess)(struct EducationalTool*);\n} EducationalTool;\n\nvoid educationalToolTeach(EducationalTool* self) {\n    printf(\"Teaching a general education topic.\\n\");\n}\n\nvoid educationalToolAssess(EducationalTool* self) {\n    printf(\"Assessing a general education topic.\\n\");\n}\n\nEducationalTool newEducationalTool() {\n    EducationalTool tool;\n    tool.teach = educationalToolTeach;\n    tool.assess = educationalToolAssess;\n    return tool;\n}\n\n// Subclass for the math tool\ntypedef struct MathTool {\n    EducationalTool base;\n    // Additional properties for MathTool can be added here\n} MathTool;\n\nvoid mathToolTeach(EducationalTool* self) {\n    printf(\"Teaching a math problem.\\n\");\n}\n\nvoid mathToolAssess(EducationalTool* self) {\n    printf(\"Assessing a math problem.\\n\");\n}\n\nMathTool newMathTool() {\n    MathTool tool;\n    tool.base = newEducationalTool();\n    tool.base.teach = mathToolTeach;\n    tool.base.assess = mathToolAssess;\n    return tool;\n}\n\nint main() {\n    EducationalTool eduTool = newEducationalTool();\n    eduTool.teach(&eduTool);\n    eduTool.assess(&eduTool);\n\n    MathTool mathTool = newMathTool();\n    mathTool.base.teach((EducationalTool*)&mathTool);\n    mathTool.base.assess((EducationalTool*)&mathTool);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a base class for a community project with methods for planning and execution, then create a park renovation subclass that overrides these methods for landscaping.",
    "code": "```c\n#include <stdio.h>\n\n// Base class for a community project\ntypedef struct {\n    void (*plan)(void);\n    void (*execute)(void);\n} CommunityProject;\n\n// Method implementations for CommunityProject\nvoid communityProjectPlan() {\n    printf(\"Planning community project...\\n\");\n}\n\nvoid communityProjectExecute() {\n    printf(\"Executing community project...\\n\");\n}\n\n// Subclass for a park renovation project\ntypedef struct {\n    CommunityProject base;\n} ParkRenovation;\n\n// Overridden method implementations for ParkRenovation\nvoid parkRenovationPlan() {\n    printf(\"Planning park renovation with landscaping...\\n\");\n}\n\nvoid parkRenovationExecute() {\n    printf(\"Executing park renovation with landscaping...\\n\");\n}\n\n// Function to initialize a CommunityProject\nvoid initCommunityProject(CommunityProject *project) {\n    project->plan = communityProjectPlan;\n    project->execute = communityProjectExecute;\n}\n\n// Function to initialize a ParkRenovation\nvoid initParkRenovation(ParkRenovation *renovation) {\n    initCommunityProject(&renovation->base);\n    renovation->base.plan = parkRenovationPlan;\n    renovation->base.execute = parkRenovationExecute;\n}\n\nint main() {\n    CommunityProject project;\n    initCommunityProject(&project);\n    project.plan();\n    project.execute();\n\n    ParkRenovation renovation;\n    initParkRenovation(&renovation);\n    renovation.base.plan();\n    renovation.base.execute();\n\n    return 0;\n}\n```"
  },
  {
    "task": "Construct a parent class for a digital marketing strategy with methods for targeting and engagement, then derive a social media strategy class that overrides these methods for platforms.",
    "code": "```c\n#include <stdio.h>\n\n// Base class\ntypedef struct {\n    void (*targeting)();\n    void (*engagement)();\n} DigitalMarketingStrategy;\n\nvoid baseTargeting() {\n    printf(\"Generic targeting strategy.\\n\");\n}\n\nvoid baseEngagement() {\n    printf(\"Generic engagement strategy.\\n\");\n}\n\nDigitalMarketingStrategy* createDigitalMarketingStrategy() {\n    DigitalMarketingStrategy* strategy = (DigitalMarketingStrategy*)malloc(sizeof(DigitalMarketingStrategy));\n    strategy->targeting = baseTargeting;\n    strategy->engagement = baseEngagement;\n    return strategy;\n}\n\n// Derived class\ntypedef struct {\n    DigitalMarketingStrategy base;\n} SocialMediaStrategy;\n\nvoid socialMediaTargeting() {\n    printf(\"Social media specific targeting strategy.\\n\");\n}\n\nvoid socialMediaEngagement() {\n    printf(\"Social media specific engagement strategy.\\n\");\n}\n\nSocialMediaStrategy* createSocialMediaStrategy() {\n    SocialMediaStrategy* strategy = (SocialMediaStrategy*)malloc(sizeof(SocialMediaStrategy));\n    strategy->base.targeting = socialMediaTargeting;\n    strategy->base.engagement = socialMediaEngagement;\n    return strategy;\n}\n\nint main() {\n    DigitalMarketingStrategy* digitalStrategy = createDigitalMarketingStrategy();\n    SocialMediaStrategy* socialStrategy = createSocialMediaStrategy();\n\n    printf(\"Digital Marketing Strategy:\\n\");\n    digitalStrategy->targeting();\n    digitalStrategy->engagement();\n\n    printf(\"\\nSocial Media Strategy:\\n\");\n    socialStrategy->base.targeting();\n    socialStrategy->base.engagement();\n\n    free(digitalStrategy);\n    free(socialStrategy);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Set up a base class for a scientific publication with methods for research and review, and extend it with a journal article subclass that overrides these methods for peer review.",
    "code": "```c\n#include <stdio.h>\n\n// Base class for a scientific publication\ntypedef struct {\n    void (*research)(void);\n    void (*review)(void);\n} ScientificPublication;\n\n// Methods for the base class\nvoid baseResearch() {\n    printf(\"Conducting research for a scientific publication.\\n\");\n}\n\nvoid baseReview() {\n    printf(\"Reviewing a scientific publication.\\n\");\n}\n\n// Derived class for a journal article\ntypedef struct {\n    ScientificPublication base;\n} JournalArticle;\n\n// Methods for the derived class\nvoid journalResearch() {\n    printf(\"Conducting research for a journal article.\\n\");\n}\n\nvoid journalReview() {\n    printf(\"Peer reviewing a journal article.\\n\");\n}\n\n// Function to initialize a scientific publication\nvoid initScientificPublication(ScientificPublication *pub) {\n    pub->research = baseResearch;\n    pub->review = baseReview;\n}\n\n// Function to initialize a journal article\nvoid initJournalArticle(JournalArticle *article) {\n    initScientificPublication(&article->base);\n    article->base.research = journalResearch;\n    article->base.review = journalReview;\n}\n\nint main() {\n    ScientificPublication pub;\n    initScientificPublication(&pub);\n    pub.research();\n    pub.review();\n\n    JournalArticle article;\n    initJournalArticle(&article);\n    article.base.research();\n    article.base.review();\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a foundational class for a software module with properties like name and dependencies, and derive a user interface module class that overrides the dependencies property for UI libraries.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n// Base class\ntypedef struct {\n    char name[50];\n    char dependencies[100];\n} Module;\n\n// Function to initialize a Module\nvoid initModule(Module* module, const char* name, const char* dependencies) {\n    strncpy(module->name, name, sizeof(module->name) - 1);\n    strncpy(module->dependencies, dependencies, sizeof(module->dependencies) - 1);\n}\n\n// Derived class\ntypedef struct {\n    Module base;\n    char uiDependencies[100];\n} UIModule;\n\n// Function to initialize a UIModule\nvoid initUIModule(UIModule* uiModule, const char* name, const char* uiDependencies) {\n    initModule(&uiModule->base, name, \"\");\n    strncpy(uiModule->uiDependencies, uiDependencies, sizeof(uiModule->uiDependencies) - 1);\n}\n\n// Function to print module info\nvoid printModuleInfo(Module* module) {\n    printf(\"Name: %s\\n\", module->name);\n    printf(\"Dependencies: %s\\n\", module->dependencies);\n}\n\n// Function to print UI module info, overriding dependencies\nvoid printUIModuleInfo(UIModule* uiModule) {\n    printf(\"Name: %s\\n\", uiModule->base.name);\n    printf(\"UI Dependencies: %s\\n\", uiModule->uiDependencies);\n}\n\nint main() {\n    Module coreModule;\n    initModule(&coreModule, \"CoreModule\", \"CoreLib\");\n\n    UIModule userInterfaceModule;\n    initUIModule(&userInterfaceModule, \"UIModule\", \"UILibrary\");\n\n    printModuleInfo(&coreModule);\n    printUIModuleInfo(&userInterfaceModule);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a base class for a fashion line with methods for design and production, then create a summer collection subclass that overrides these methods for seasonal trends.",
    "code": "```c\n#include <stdio.h>\n\n// Base class for fashion line\ntypedef struct {\n    void (*design)(void);\n    void (*production)(void);\n} FashionLine;\n\n// Base class methods\nvoid baseDesign() {\n    printf(\"Designing generic fashion line...\\n\");\n}\n\nvoid baseProduction() {\n    printf(\"Producing generic fashion line...\\n\");\n}\n\n// Create a summer collection subclass\ntypedef struct {\n    FashionLine base;\n} SummerCollection;\n\n// Overriding methods for summer collection\nvoid summerDesign() {\n    printf(\"Designing summer collection with seasonal trends...\\n\");\n}\n\nvoid summerProduction() {\n    printf(\"Producing summer collection with seasonal trends...\\n\");\n}\n\n// Helper function to initialize SummerCollection\nvoid initializeSummerCollection(SummerCollection *collection) {\n    collection->base.design = summerDesign;\n    collection->base.production = summerProduction;\n}\n\nint main() {\n    FashionLine baseFashionLine = {baseDesign, baseProduction};\n    SummerCollection summerCollection;\n    initializeSummerCollection(&summerCollection);\n\n    // Using base class methods\n    baseFashionLine.design();\n    baseFashionLine.production();\n\n    // Using overridden methods for summer collection\n    summerCollection.base.design();\n    summerCollection.base.production();\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a superclass for a family tree with methods for ancestry and descendants, then extend it with a royal lineage subclass that overrides these methods for historical accuracy.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    char name[50];\n    char ancestors[100];\n    char descendants[100];\n} FamilyTree;\n\nvoid setAncestry(FamilyTree *family, const char *ancestry) {\n    strcpy(family->ancestors, ancestry);\n}\n\nvoid setDescendants(FamilyTree *family, const char *descendants) {\n    strcpy(family->descendants, descendants);\n}\n\nvoid getAncestry(const FamilyTree *family) {\n    printf(\"Ancestry of %s: %s\\n\", family->name, family->ancestors);\n}\n\nvoid getDescendants(const FamilyTree *family) {\n    printf(\"Descendants of %s: %s\\n\", family->name, family->descendants);\n}\n\ntypedef struct {\n    FamilyTree base;\n    char historicalNotes[100];\n} RoyalLineage;\n\nvoid setRoyalAncestry(RoyalLineage *royal, const char *ancestry) {\n    strcpy(royal->base.ancestors, ancestry);\n    strcat(royal->base.ancestors, \" (historically verified)\");\n}\n\nvoid setRoyalDescendants(RoyalLineage *royal, const char *descendants) {\n    strcpy(royal->base.descendants, descendants);\n    strcat(royal->base.descendants, \" (historically verified)\");\n}\n\nvoid getRoyalAncestry(const RoyalLineage *royal) {\n    printf(\"Ancestry of %s: %s\\n\", royal->base.name, royal->base.ancestors);\n}\n\nvoid getRoyalDescendants(const RoyalLineage *royal) {\n    printf(\"Descendants of %s: %s\\n\", royal->base.name, royal->base.descendants);\n}\n\nint main() {\n    FamilyTree family;\n    strcpy(family.name, \"Generic Family\");\n    setAncestry(&family, \"John, Mary\");\n    setDescendants(&family, \"Alice, Bob\");\n    getAncestry(&family);\n    getDescendants(&family);\n\n    RoyalLineage royal;\n    strcpy(royal.base.name, \"Royal Family\");\n    setRoyalAncestry(&royal, \"King Arthur, Queen Guinevere\");\n    setRoyalDescendants(&royal, \"Prince William, Princess Charlotte\");\n    getRoyalAncestry(&royal);\n    getRoyalDescendants(&royal);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a base class for a musical score with methods for composition and arrangement, then create a symphony subclass that overrides these methods for orchestration.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct MusicalScore {\n    void (*compose)(struct MusicalScore*);\n    void (*arrange)(struct MusicalScore*);\n} MusicalScore;\n\nvoid baseCompose(MusicalScore* self) {\n    printf(\"Composing a basic musical score.\\n\");\n}\n\nvoid baseArrange(MusicalScore* self) {\n    printf(\"Arranging a basic musical score.\\n\");\n}\n\nMusicalScore* createMusicalScore() {\n    MusicalScore* score = (MusicalScore*)malloc(sizeof(MusicalScore));\n    score->compose = baseCompose;\n    score->arrange = baseArrange;\n    return score;\n}\n\ntypedef struct Symphony {\n    MusicalScore base;\n} Symphony;\n\nvoid symphonyCompose(MusicalScore* self) {\n    printf(\"Composing a symphony with complex structures.\\n\");\n}\n\nvoid symphonyArrange(MusicalScore* self) {\n    printf(\"Arranging a symphony for full orchestra.\\n\");\n}\n\nSymphony* createSymphony() {\n    Symphony* symphony = (Symphony*)malloc(sizeof(Symphony));\n    symphony->base.compose = symphonyCompose;\n    symphony->base.arrange = symphonyArrange;\n    return symphony;\n}\n\nint main() {\n    MusicalScore* score = createMusicalScore();\n    score->compose(score);\n    score->arrange(score);\n\n    Symphony* symphony = createSymphony();\n    symphony->base.compose((MusicalScore*)symphony);\n    symphony->base.arrange((MusicalScore*)symphony);\n\n    free(score);\n    free(symphony);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Construct a parent class for a historical record with methods for events and dates, then derive a war history class that overrides these methods for battles.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n// Parent class for HistoricalRecord\ntypedef struct {\n    void (*events)(struct HistoricalRecord *);\n    void (*dates)(struct HistoricalRecord *);\n} HistoricalRecord;\n\n// Implementation of events and dates for HistoricalRecord\nvoid historicalRecordEvents(HistoricalRecord *self) {\n    printf(\"Generic historical event.\\n\");\n}\n\nvoid historicalRecordDates(HistoricalRecord *self) {\n    printf(\"Generic historical date.\\n\");\n}\n\n// Constructor for HistoricalRecord\nHistoricalRecord newHistoricalRecord() {\n    HistoricalRecord record;\n    record.events = historicalRecordEvents;\n    record.dates = historicalRecordDates;\n    return record;\n}\n\n// Derived class for WarHistory\ntypedef struct {\n    HistoricalRecord base;\n} WarHistory;\n\n// Overridden events and dates for WarHistory\nvoid warHistoryEvents(HistoricalRecord *self) {\n    printf(\"Battle event.\\n\");\n}\n\nvoid warHistoryDates(HistoricalRecord *self) {\n    printf(\"Battle date.\\n\");\n}\n\n// Constructor for WarHistory\nWarHistory newWarHistory() {\n    WarHistory warRecord;\n    warRecord.base = newHistoricalRecord();\n    warRecord.base.events = warHistoryEvents;\n    warRecord.base.dates = warHistoryDates;\n    return warRecord;\n}\n\nint main() {\n    HistoricalRecord record = newHistoricalRecord();\n    WarHistory battleRecord = newWarHistory();\n\n    printf(\"Historical Record:\\n\");\n    record.events(&record);\n    record.dates(&record);\n\n    printf(\"\\nWar History Record:\\n\");\n    battleRecord.base.events(&battleRecord.base);\n    battleRecord.base.dates(&battleRecord.base);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Set up a base class for a pet adoption service with methods for application and approval, and extend it with a dog adoption subclass that overrides these methods for breed compatibility.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n// Base class\ntypedef struct {\n    char applicantName[100];\n    int isApproved;\n} PetAdoption;\n\n// Base class methods\nvoid applyForAdoption(PetAdoption *adoption, const char *name) {\n    strcpy(adoption->applicantName, name);\n    adoption->isApproved = 0;\n    printf(\"Application received for %s.\\n\", name);\n}\n\nvoid approveAdoption(PetAdoption *adoption) {\n    adoption->isApproved = 1;\n    printf(\"Adoption approved for %s.\\n\", adoption->applicantName);\n}\n\n// Dog adoption subclass\ntypedef struct {\n    PetAdoption base;\n    char breed[50];\n} DogAdoption;\n\n// Overridden methods\nvoid applyForDogAdoption(DogAdoption *adoption, const char *name, const char *breed) {\n    applyForAdoption(&adoption->base, name);\n    strcpy(adoption->breed, breed);\n    printf(\"Breed specified: %s.\\n\", breed);\n}\n\nvoid approveDogAdoption(DogAdoption *adoption) {\n    // Custom approval logic for breed compatibility\n    if (strcmp(adoption->breed, \"CompatibleBreed\") == 0) {\n        approveAdoption(&adoption->base);\n    } else {\n        printf(\"Adoption not approved due to breed incompatibility for %s.\\n\", adoption->base.applicantName);\n    }\n}\n\nint main() {\n    DogAdoption dogAdoption;\n    applyForDogAdoption(&dogAdoption, \"John Doe\", \"CompatibleBreed\");\n    approveDogAdoption(&dogAdoption);\n\n    applyForDogAdoption(&dogAdoption, \"Jane Smith\", \"IncompatibleBreed\");\n    approveDogAdoption(&dogAdoption);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a foundational class for a financial report with properties like fiscal year and summary, and derive an annual report class that overrides the fiscal year property for yearly data.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n// Base class: FinancialReport\ntypedef struct {\n    char fiscalYear[20];\n    char summary[100];\n} FinancialReport;\n\n// Derived class: AnnualReport\ntypedef struct {\n    FinancialReport base;\n} AnnualReport;\n\n// Function to set fiscal year in FinancialReport\nvoid setFiscalYear(FinancialReport* report, const char* year) {\n    strncpy(report->fiscalYear, year, sizeof(report->fiscalYear) - 1);\n    report->fiscalYear[sizeof(report->fiscalYear) - 1] = '\\0';\n}\n\n// Function to set summary in FinancialReport\nvoid setSummary(FinancialReport* report, const char* summaryText) {\n    strncpy(report->summary, summaryText, sizeof(report->summary) - 1);\n    report->summary[sizeof(report->summary) - 1] = '\\0';\n}\n\n// Function to set fiscal year in AnnualReport (override)\nvoid setAnnualFiscalYear(AnnualReport* report, const char* year) {\n    setFiscalYear(&report->base, year);\n}\n\nint main() {\n    // Create an instance of AnnualReport\n    AnnualReport annualReport;\n    \n    // Override fiscal year using derived class method\n    setAnnualFiscalYear(&annualReport, \"2023\");\n    \n    // Set summary\n    setSummary(&annualReport.base, \"Annual financial overview.\");\n\n    // Output the AnnualReport\n    printf(\"Fiscal Year: %s\\n\", annualReport.base.fiscalYear);\n    printf(\"Summary: %s\\n\", annualReport.base.summary);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a base class for a movie franchise with methods for casting and production, then create a sequel subclass that overrides these methods for continuity.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n// Base class\ntypedef struct {\n    char title[100];\n    void (*casting)(void);\n    void (*production)(void);\n} Movie;\n\n// Methods for the base class\nvoid baseCasting() {\n    printf(\"Base movie casting process.\\n\");\n}\n\nvoid baseProduction() {\n    printf(\"Base movie production process.\\n\");\n}\n\n// Function to initialize a base movie\nvoid initMovie(Movie* movie, const char* title) {\n    strcpy(movie->title, title);\n    movie->casting = baseCasting;\n    movie->production = baseProduction;\n}\n\n// Sequel subclass\ntypedef struct {\n    Movie base;\n} Sequel;\n\n// Overridden methods for the sequel\nvoid sequelCasting() {\n    printf(\"Sequel movie casting process for continuity.\\n\");\n}\n\nvoid sequelProduction() {\n    printf(\"Sequel movie production process for continuity.\\n\");\n}\n\n// Function to initialize a sequel\nvoid initSequel(Sequel* sequel, const char* title) {\n    initMovie(&sequel->base, title);\n    sequel->base.casting = sequelCasting;\n    sequel->base.production = sequelProduction;\n}\n\nint main() {\n    Movie baseMovie;\n    initMovie(&baseMovie, \"Base Movie\");\n    printf(\"Title: %s\\n\", baseMovie.title);\n    baseMovie.casting();\n    baseMovie.production();\n\n    Sequel sequelMovie;\n    initSequel(&sequelMovie, \"Sequel Movie\");\n    printf(\"Title: %s\\n\", sequelMovie.base.title);\n    sequelMovie.base.casting();\n    sequelMovie.base.production();\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a superclass for a real estate listing with methods for pricing and description, then extend it with a luxury listing subclass that overrides these methods for high-end features.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n// Superclass for a real estate listing\ntypedef struct {\n    char description[256];\n    double price;\n    void (*setDescription)(void *, const char *);\n    void (*setPrice)(void *, double);\n    void (*getDescription)(void *);\n    void (*getPrice)(void *);\n} RealEstateListing;\n\nvoid setDescription(void *self, const char *desc) {\n    RealEstateListing *listing = (RealEstateListing *)self;\n    strncpy(listing->description, desc, sizeof(listing->description) - 1);\n    listing->description[sizeof(listing->description) - 1] = '\\0';\n}\n\nvoid setPrice(void *self, double price) {\n    RealEstateListing *listing = (RealEstateListing *)self;\n    listing->price = price;\n}\n\nvoid getDescription(void *self) {\n    RealEstateListing *listing = (RealEstateListing *)self;\n    printf(\"Description: %s\\n\", listing->description);\n}\n\nvoid getPrice(void *self) {\n    RealEstateListing *listing = (RealEstateListing *)self;\n    printf(\"Price: $%.2f\\n\", listing->price);\n}\n\n// Subclass for a luxury real estate listing\ntypedef struct {\n    RealEstateListing base;\n    char luxuryFeatures[256];\n} LuxuryRealEstateListing;\n\nvoid getLuxuryDescription(void *self) {\n    LuxuryRealEstateListing *listing = (LuxuryRealEstateListing *)self;\n    printf(\"Luxury Description: %s with features: %s\\n\", listing->base.description, listing->luxuryFeatures);\n}\n\nvoid getLuxuryPrice(void *self) {\n    LuxuryRealEstateListing *listing = (LuxuryRealEstateListing *)self;\n    printf(\"Luxury Price: $%.2f (includes high-end amenities)\\n\", listing->base.price);\n}\n\nint main() {\n    RealEstateListing standardListing = { \"\", 0.0, setDescription, setPrice, getDescription, getPrice };\n    LuxuryRealEstateListing luxuryListing;\n    \n    // Initialize the base class part of the luxury listing\n    luxuryListing.base.setDescription = setDescription;\n    luxuryListing.base.setPrice = setPrice;\n    luxuryListing.base.getDescription = getLuxuryDescription; // override\n    luxuryListing.base.getPrice = getLuxuryPrice; // override\n\n    // Set values for standard listing\n    standardListing.setDescription(&standardListing, \"Standard House\");\n    standardListing.setPrice(&standardListing, 300000.00);\n    standardListing.getDescription(&standardListing);\n    standardListing.getPrice(&standardListing);\n\n    // Set values for luxury listing\n    luxuryListing.base.setDescription(&luxuryListing, \"Luxury Villa\");\n    luxuryListing.base.setPrice(&luxuryListing, 2000000.00);\n    strcpy(luxuryListing.luxuryFeatures, \"Infinity pool, Home theater\");\n    luxuryListing.base.getDescription(&luxuryListing);\n    luxuryListing.base.getPrice(&luxuryListing);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a base class for a mobile app with methods for user interface and performance, then create a gaming app subclass that overrides these methods for graphics and speed.",
    "code": "```c\n#include <stdio.h>\n\n// Base class for a Mobile App\ntypedef struct MobileApp {\n    void (*userInterface)(struct MobileApp*);\n    void (*performance)(struct MobileApp*);\n} MobileApp;\n\nvoid baseUserInterface(MobileApp* app) {\n    printf(\"Mobile App: Standard User Interface\\n\");\n}\n\nvoid basePerformance(MobileApp* app) {\n    printf(\"Mobile App: Standard Performance\\n\");\n}\n\nMobileApp* createMobileApp() {\n    MobileApp* app = (MobileApp*)malloc(sizeof(MobileApp));\n    app->userInterface = baseUserInterface;\n    app->performance = basePerformance;\n    return app;\n}\n\n// Subclass for a Gaming App\ntypedef struct GamingApp {\n    MobileApp base;\n} GamingApp;\n\nvoid gamingUserInterface(MobileApp* app) {\n    printf(\"Gaming App: Enhanced Graphics User Interface\\n\");\n}\n\nvoid gamingPerformance(MobileApp* app) {\n    printf(\"Gaming App: Optimized Speed Performance\\n\");\n}\n\nGamingApp* createGamingApp() {\n    GamingApp* app = (GamingApp*)malloc(sizeof(GamingApp));\n    app->base.userInterface = gamingUserInterface;\n    app->base.performance = gamingPerformance;\n    return app;\n}\n\nint main() {\n    MobileApp* mobileApp = createMobileApp();\n    mobileApp->userInterface(mobileApp);\n    mobileApp->performance(mobileApp);\n\n    GamingApp* gamingApp = createGamingApp();\n    gamingApp->base.userInterface((MobileApp*)gamingApp);\n    gamingApp->base.performance((MobileApp*)gamingApp);\n\n    free(mobileApp);\n    free(gamingApp);\n    return 0;\n}\n```"
  },
  {
    "task": "Construct a parent class for a corporate policy with methods for compliance and enforcement, then derive an HR policy class that overrides these methods for employee relations.",
    "code": "```c\n#include <stdio.h>\n\n// Parent class\ntypedef struct CorporatePolicy {\n    void (*compliance)(struct CorporatePolicy*);\n    void (*enforcement)(struct CorporatePolicy*);\n} CorporatePolicy;\n\nvoid corporate_compliance(CorporatePolicy* self) {\n    printf(\"General corporate compliance rules.\\n\");\n}\n\nvoid corporate_enforcement(CorporatePolicy* self) {\n    printf(\"General corporate enforcement actions.\\n\");\n}\n\nCorporatePolicy* new_CorporatePolicy() {\n    CorporatePolicy* policy = (CorporatePolicy*)malloc(sizeof(CorporatePolicy));\n    policy->compliance = corporate_compliance;\n    policy->enforcement = corporate_enforcement;\n    return policy;\n}\n\n// Derived class\ntypedef struct HRPolicy {\n    CorporatePolicy base;\n} HRPolicy;\n\nvoid hr_compliance(CorporatePolicy* self) {\n    printf(\"HR-specific compliance rules.\\n\");\n}\n\nvoid hr_enforcement(CorporatePolicy* self) {\n    printf(\"HR-specific enforcement actions.\\n\");\n}\n\nHRPolicy* new_HRPolicy() {\n    HRPolicy* policy = (HRPolicy*)malloc(sizeof(HRPolicy));\n    policy->base.compliance = hr_compliance;\n    policy->base.enforcement = hr_enforcement;\n    return policy;\n}\n\nint main() {\n    CorporatePolicy* corporate_policy = new_CorporatePolicy();\n    HRPolicy* hr_policy = new_HRPolicy();\n\n    corporate_policy->compliance(corporate_policy);\n    corporate_policy->enforcement(corporate_policy);\n\n    hr_policy->base.compliance((CorporatePolicy*)hr_policy);\n    hr_policy->base.enforcement((CorporatePolicy*)hr_policy);\n\n    free(corporate_policy);\n    free(hr_policy);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Set up a base class for a scientific calculator with methods for basic operations and advanced functions, and extend it with a graphing calculator subclass that overrides these methods for plotting.",
    "code": "```c\n#include <stdio.h>\n#include <math.h>\n\n// Base class for a scientific calculator\ntypedef struct {\n    double (*add)(double, double);\n    double (*subtract)(double, double);\n    double (*multiply)(double, double);\n    double (*divide)(double, double);\n    double (*power)(double, double);\n    double (*sqrt)(double);\n} ScientificCalculator;\n\n// Function implementations for scientific calculator\ndouble sci_add(double a, double b) { return a + b; }\ndouble sci_subtract(double a, double b) { return a - b; }\ndouble sci_multiply(double a, double b) { return a * b; }\ndouble sci_divide(double a, double b) { return a / b; }\ndouble sci_power(double a, double b) { return pow(a, b); }\ndouble sci_sqrt(double a) { return sqrt(a); }\n\n// Initialization of scientific calculator\nScientificCalculator createScientificCalculator() {\n    ScientificCalculator calc;\n    calc.add = sci_add;\n    calc.subtract = sci_subtract;\n    calc.multiply = sci_multiply;\n    calc.divide = sci_divide;\n    calc.power = sci_power;\n    calc.sqrt = sci_sqrt;\n    return calc;\n}\n\n// Subclass for a graphing calculator\ntypedef struct {\n    ScientificCalculator base; // Inherit from ScientificCalculator\n    void (*plot)(double (*func)(double), double, double, double);\n} GraphingCalculator;\n\n// Function implementation for graph plotting\nvoid graph_plot(double (*func)(double), double start, double end, double step) {\n    for (double x = start; x <= end; x += step) {\n        printf(\"f(%0.2lf) = %0.2lf\\n\", x, func(x));\n    }\n}\n\n// Overriding methods for plotting\nvoid plot_add(double (*func)(double), double start, double end, double step) {\n    printf(\"Plotting add function:\\n\");\n    graph_plot(func, start, end, step);\n}\n\nvoid plot_subtract(double (*func)(double), double start, double end, double step) {\n    printf(\"Plotting subtract function:\\n\");\n    graph_plot(func, start, end, step);\n}\n\nvoid plot_multiply(double (*func)(double), double start, double end, double step) {\n    printf(\"Plotting multiply function:\\n\");\n    graph_plot(func, start, end, step);\n}\n\nvoid plot_divide(double (*func)(double), double start, double end, double step) {\n    printf(\"Plotting divide function:\\n\");\n    graph_plot(func, start, end, step);\n}\n\n// Initialization of graphing calculator\nGraphingCalculator createGraphingCalculator() {\n    GraphingCalculator calc;\n    calc.base = createScientificCalculator();\n    calc.plot = graph_plot;\n    return calc;\n}\n\n// Example function to plot\ndouble example_func(double x) {\n    return sin(x);\n}\n\nint main() {\n    GraphingCalculator graphCalc = createGraphingCalculator();\n\n    printf(\"Scientific Calculator Operations:\\n\");\n    printf(\"Add: %0.2lf\\n\", graphCalc.base.add(5, 3));\n    printf(\"Subtract: %0.2lf\\n\", graphCalc.base.subtract(5, 3));\n    printf(\"Multiply: %0.2lf\\n\", graphCalc.base.multiply(5, 3));\n    printf(\"Divide: %0.2lf\\n\", graphCalc.base.divide(5, 3));\n\n    printf(\"\\nGraphing Calculator Plotting:\\n\");\n    graphCalc.plot(example_func, 0, 2 * M_PI, 0.1);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a foundational class for a children's book with properties like age group and illustrations, and derive a picture book class that overrides the illustrations property to be more prominent.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    char age_group[50];\n    char illustrations[50];\n} ChildrensBook;\n\ntypedef struct {\n    ChildrensBook base;\n    char prominent_illustrations[100];\n} PictureBook;\n\nvoid printChildrensBook(ChildrensBook *book) {\n    printf(\"Age Group: %s\\n\", book->age_group);\n    printf(\"Illustrations: %s\\n\", book->illustrations);\n}\n\nvoid printPictureBook(PictureBook *book) {\n    printf(\"Age Group: %s\\n\", book->base.age_group);\n    printf(\"Illustrations: %s\\n\", book->prominent_illustrations);\n}\n\nint main() {\n    ChildrensBook cb;\n    strcpy(cb.age_group, \"3-5 years\");\n    strcpy(cb.illustrations, \"Basic illustrations\");\n\n    PictureBook pb;\n    strcpy(pb.base.age_group, \"3-5 years\");\n    strcpy(pb.prominent_illustrations, \"Rich and colorful illustrations\");\n\n    printf(\"Children's Book Details:\\n\");\n    printChildrensBook(&cb);\n\n    printf(\"\\nPicture Book Details:\\n\");\n    printPictureBook(&pb);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a base class for a cooking class with methods for ingredients and techniques, then create a baking class subclass that overrides these methods for dough preparation.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n// Base class\ntypedef struct {\n    void (*ingredients)(char*);\n    void (*techniques)(char*);\n} CookingClass;\n\n// Base class methods\nvoid base_ingredients(char* output) {\n    strcpy(output, \"Basic ingredients\");\n}\n\nvoid base_techniques(char* output) {\n    strcpy(output, \"Basic techniques\");\n}\n\n// Subclass\ntypedef struct {\n    CookingClass base;  // Inheritance\n} BakingClass;\n\n// Subclass methods\nvoid baking_ingredients(char* output) {\n    strcpy(output, \"Flour, water, yeast\");\n}\n\nvoid baking_techniques(char* output) {\n    strcpy(output, \"Kneading, proofing\");\n}\n\n// Function to initialize BakingClass\nvoid BakingClass_init(BakingClass* baking_class) {\n    baking_class->base.ingredients = baking_ingredients;\n    baking_class->base.techniques = baking_techniques;\n}\n\nint main() {\n    BakingClass baking_class;\n    BakingClass_init(&baking_class);\n\n    char output[50];\n\n    baking_class.base.ingredients(output);\n    printf(\"Ingredients: %s\\n\", output);\n\n    baking_class.base.techniques(output);\n    printf(\"Techniques: %s\\n\", output);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a superclass for a public transportation system with methods for routes and schedules, then extend it with a metro system subclass that overrides these methods for urban areas.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n// Superclass for public transportation\ntypedef struct {\n    void (*routes)(void);\n    void (*schedules)(void);\n} PublicTransportation;\n\n// Method implementations for PublicTransportation\nvoid pt_routes() {\n    printf(\"General routes for public transportation.\\n\");\n}\n\nvoid pt_schedules() {\n    printf(\"General schedules for public transportation.\\n\");\n}\n\n// Subclass for metro system\ntypedef struct {\n    PublicTransportation base;\n} MetroSystem;\n\n// Method implementations for MetroSystem\nvoid metro_routes() {\n    printf(\"Urban metro routes.\\n\");\n}\n\nvoid metro_schedules() {\n    printf(\"Urban metro schedules.\\n\");\n}\n\n// Function to initialize the MetroSystem subclass\nvoid initMetroSystem(MetroSystem *metroSystem) {\n    metroSystem->base.routes = metro_routes;\n    metroSystem->base.schedules = metro_schedules;\n}\n\nint main() {\n    // Using the superclass\n    PublicTransportation publicTransportation;\n    publicTransportation.routes = pt_routes;\n    publicTransportation.schedules = pt_schedules;\n    publicTransportation.routes();\n    publicTransportation.schedules();\n\n    // Using the subclass\n    MetroSystem metroSystem;\n    initMetroSystem(&metroSystem);\n    metroSystem.base.routes();\n    metroSystem.base.schedules();\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a base class for a music store inventory with methods for stock and sales, then create a vinyl record subclass that overrides these methods for collectible items.",
    "code": "```c\n#include <stdio.h>\n\n// Base class\ntypedef struct {\n    int stock;\n    double sales;\n} MusicStoreInventory;\n\n// Base class methods\nvoid setStock(MusicStoreInventory *inventory, int stock) {\n    inventory->stock = stock;\n}\n\nvoid setSales(MusicStoreInventory *inventory, double sales) {\n    inventory->sales = sales;\n}\n\nint getStock(MusicStoreInventory *inventory) {\n    return inventory->stock;\n}\n\ndouble getSales(MusicStoreInventory *inventory) {\n    return inventory->sales;\n}\n\n// VinylRecord subclass\ntypedef struct {\n    MusicStoreInventory base;\n    double collectibleValue;\n} VinylRecord;\n\n// VinylRecord methods (overrides base class methods)\nvoid setVinylStock(VinylRecord *vinyl, int stock) {\n    vinyl->base.stock = stock;\n}\n\nvoid setVinylSales(VinylRecord *vinyl, double sales) {\n    vinyl->base.sales = sales + vinyl->collectibleValue;\n}\n\nint getVinylStock(VinylRecord *vinyl) {\n    return vinyl->base.stock;\n}\n\ndouble getVinylSales(VinylRecord *vinyl) {\n    return vinyl->base.sales;\n}\n\nint main() {\n    VinylRecord vinyl;\n    vinyl.collectibleValue = 20.0;\n\n    setVinylStock(&vinyl, 100);\n    setVinylSales(&vinyl, 150.0);\n\n    printf(\"Vinyl Record Stock: %d\\n\", getVinylStock(&vinyl));\n    printf(\"Vinyl Record Sales: %.2f\\n\", getVinylSales(&vinyl));\n\n    return 0;\n}\n```"
  },
  {
    "task": "Construct a parent class for a legal contract with methods for terms and conditions, then derive a rental agreement class that overrides these methods for tenant rights.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n// Parent class for a legal contract\ntypedef struct LegalContract {\n    void (*terms_and_conditions)(struct LegalContract *);\n} LegalContract;\n\nvoid legal_contract_terms_and_conditions(LegalContract *self) {\n    printf(\"General terms and conditions of the legal contract.\\n\");\n}\n\n// Derived class for a rental agreement\ntypedef struct RentalAgreement {\n    LegalContract base;\n} RentalAgreement;\n\nvoid rental_agreement_terms_and_conditions(LegalContract *self) {\n    printf(\"Specific terms and conditions for tenant rights.\\n\");\n}\n\nint main() {\n    LegalContract legalContract;\n    legalContract.terms_and_conditions = legal_contract_terms_and_conditions;\n\n    RentalAgreement rentalAgreement;\n    rentalAgreement.base.terms_and_conditions = rental_agreement_terms_and_conditions;\n\n    printf(\"LegalContract: \");\n    legalContract.terms_and_conditions(&legalContract);\n\n    printf(\"RentalAgreement: \");\n    rentalAgreement.base.terms_and_conditions((LegalContract *)&rentalAgreement);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Set up a base class for a journalism piece with methods for reporting and editing, and extend it with an investigative article subclass that overrides these methods for in-depth analysis.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n// Base class for journalism piece\ntypedef struct JournalismPiece {\n    void (*reporting)(struct JournalismPiece *);\n    void (*editing)(struct JournalismPiece *);\n} JournalismPiece;\n\nvoid journalism_reporting(JournalismPiece *self) {\n    printf(\"Reporting a general journalism piece.\\n\");\n}\n\nvoid journalism_editing(JournalismPiece *self) {\n    printf(\"Editing a general journalism piece.\\n\");\n}\n\nJournalismPiece *new_journalism_piece() {\n    JournalismPiece *jp = (JournalismPiece *)malloc(sizeof(JournalismPiece));\n    jp->reporting = journalism_reporting;\n    jp->editing = journalism_editing;\n    return jp;\n}\n\n// Subclass for investigative article\ntypedef struct InvestigativeArticle {\n    JournalismPiece base;\n} InvestigativeArticle;\n\nvoid investigative_reporting(JournalismPiece *self) {\n    printf(\"Reporting an in-depth investigative article.\\n\");\n}\n\nvoid investigative_editing(JournalismPiece *self) {\n    printf(\"Editing an in-depth investigative article.\\n\");\n}\n\nInvestigativeArticle *new_investigative_article() {\n    InvestigativeArticle *ia = (InvestigativeArticle *)malloc(sizeof(InvestigativeArticle));\n    ia->base.reporting = investigative_reporting;\n    ia->base.editing = investigative_editing;\n    return ia;\n}\n\nint main() {\n    JournalismPiece *jp = new_journalism_piece();\n    jp->reporting(jp);\n    jp->editing(jp);\n\n    InvestigativeArticle *ia = new_investigative_article();\n    ia->base.reporting((JournalismPiece *)ia);\n    ia->base.editing((JournalismPiece *)ia);\n\n    free(jp);\n    free(ia);\n    return 0;\n}\n```"
  },
  {
    "task": "Create a foundational class for a wildlife reserve with properties like area and species, and derive a bird sanctuary class that overrides the species property for avians.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    float area;\n    char species[50];\n} WildlifeReserve;\n\ntypedef struct {\n    WildlifeReserve base;\n    char birdSpecies[50];\n} BirdSanctuary;\n\nint main() {\n    WildlifeReserve reserve;\n    reserve.area = 1500.0;\n    strcpy(reserve.species, \"General Wildlife\");\n\n    BirdSanctuary sanctuary;\n    sanctuary.base.area = reserve.area;\n    strcpy(sanctuary.base.species, reserve.species);\n    strcpy(sanctuary.birdSpecies, \"Avians\");\n\n    printf(\"Wildlife Reserve: Area = %.2f, Species = %s\\n\", reserve.area, reserve.species);\n    printf(\"Bird Sanctuary: Area = %.2f, Species = %s\\n\", sanctuary.base.area, sanctuary.birdSpecies);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a base class for a subscription box service with methods for curation and delivery, then create a gourmet food box subclass that overrides these methods for artisanal products.",
    "code": "```c\n#include <stdio.h>\n\ntypedef struct SubscriptionBox {\n    void (*curate)(struct SubscriptionBox*);\n    void (*deliver)(struct SubscriptionBox*);\n} SubscriptionBox;\n\nvoid baseCurate(SubscriptionBox* box) {\n    printf(\"Curating a standard subscription box.\\n\");\n}\n\nvoid baseDeliver(SubscriptionBox* box) {\n    printf(\"Delivering the standard subscription box.\\n\");\n}\n\nSubscriptionBox* newSubscriptionBox() {\n    SubscriptionBox* box = (SubscriptionBox*)malloc(sizeof(SubscriptionBox));\n    box->curate = baseCurate;\n    box->deliver = baseDeliver;\n    return box;\n}\n\ntypedef struct GourmetFoodBox {\n    SubscriptionBox base;\n} GourmetFoodBox;\n\nvoid gourmetCurate(SubscriptionBox* box) {\n    printf(\"Curating a gourmet food box with artisanal products.\\n\");\n}\n\nvoid gourmetDeliver(SubscriptionBox* box) {\n    printf(\"Delivering the gourmet food box with care for freshness.\\n\");\n}\n\nGourmetFoodBox* newGourmetFoodBox() {\n    GourmetFoodBox* box = (GourmetFoodBox*)malloc(sizeof(GourmetFoodBox));\n    box->base.curate = gourmetCurate;\n    box->base.deliver = gourmetDeliver;\n    return box;\n}\n\nint main() {\n    SubscriptionBox* standardBox = newSubscriptionBox();\n    GourmetFoodBox* gourmetBox = newGourmetFoodBox();\n\n    standardBox->curate(standardBox);\n    standardBox->deliver(standardBox);\n\n    gourmetBox->base.curate((SubscriptionBox*)gourmetBox);\n    gourmetBox->base.deliver((SubscriptionBox*)gourmetBox);\n\n    free(standardBox);\n    free(gourmetBox);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a superclass for a fitness app with methods for tracking and motivation, then extend it with a running app subclass that overrides these methods for pace and distance.",
    "code": "```c\n#include <stdio.h>\n\n// Superclass\ntypedef struct {\n    void (*track)();\n    void (*motivate)();\n} FitnessApp;\n\n// Method implementations for the superclass\nvoid trackFitness() {\n    printf(\"Tracking general fitness data...\\n\");\n}\n\nvoid motivateFitness() {\n    printf(\"Keep going! You're doing great!\\n\");\n}\n\n// Subclass\ntypedef struct {\n    FitnessApp base;\n    void (*track)();\n    void (*motivate)();\n} RunningApp;\n\n// Method implementations for the subclass\nvoid trackRunning() {\n    printf(\"Tracking running pace and distance...\\n\");\n}\n\nvoid motivateRunning() {\n    printf(\"Push your limits! Keep your pace steady!\\n\");\n}\n\nint main() {\n    // Instantiate and initialize the superclass\n    FitnessApp myFitnessApp;\n    myFitnessApp.track = trackFitness;\n    myFitnessApp.motivate = motivateFitness;\n\n    // Use the superclass methods\n    myFitnessApp.track();\n    myFitnessApp.motivate();\n\n    // Instantiate and initialize the subclass\n    RunningApp myRunningApp;\n    myRunningApp.base = myFitnessApp;  // Inherit from FitnessApp\n    myRunningApp.track = trackRunning;\n    myRunningApp.motivate = motivateRunning;\n\n    // Use the subclass methods\n    myRunningApp.track();\n    myRunningApp.motivate();\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a base class for a digital portfolio with methods for showcasing and updating, then create an artist portfolio subclass that overrides these methods for galleries.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n// Base class\ntypedef struct {\n    char name[100];\n    void (*showcase)(void *);\n    void (*update)(void *, const char *);\n} DigitalPortfolio;\n\nvoid showcasePortfolio(void *self) {\n    DigitalPortfolio *portfolio = (DigitalPortfolio *)self;\n    printf(\"Showcasing portfolio: %s\\n\", portfolio->name);\n}\n\nvoid updatePortfolio(void *self, const char *newName) {\n    DigitalPortfolio *portfolio = (DigitalPortfolio *)self;\n    strncpy(portfolio->name, newName, sizeof(portfolio->name) - 1);\n    portfolio->name[sizeof(portfolio->name) - 1] = '\\0';\n}\n\n// Derived class\ntypedef struct {\n    DigitalPortfolio base;\n    char galleryName[100];\n} ArtistPortfolio;\n\nvoid showcaseGallery(void *self) {\n    ArtistPortfolio *portfolio = (ArtistPortfolio *)self;\n    printf(\"Showcasing artist gallery: %s\\n\", portfolio->galleryName);\n}\n\nvoid updateGallery(void *self, const char *newGalleryName) {\n    ArtistPortfolio *portfolio = (ArtistPortfolio *)self;\n    strncpy(portfolio->galleryName, newGalleryName, sizeof(portfolio->galleryName) - 1);\n    portfolio->galleryName[sizeof(portfolio->galleryName) - 1] = '\\0';\n}\n\nint main() {\n    DigitalPortfolio dp;\n    strncpy(dp.name, \"Generic Portfolio\", sizeof(dp.name) - 1);\n    dp.name[sizeof(dp.name) - 1] = '\\0';\n    dp.showcase = showcasePortfolio;\n    dp.update = updatePortfolio;\n\n    ArtistPortfolio ap;\n    strncpy(ap.base.name, \"Artist Portfolio\", sizeof(ap.base.name) - 1);\n    ap.base.name[sizeof(ap.base.name) - 1] = '\\0';\n    strncpy(ap.galleryName, \"Initial Gallery\", sizeof(ap.galleryName) - 1);\n    ap.galleryName[sizeof(ap.galleryName) - 1] = '\\0';\n    ap.base.showcase = showcaseGallery;\n    ap.base.update = updateGallery;\n\n    dp.showcase(&dp);\n    dp.update(&dp, \"Updated Portfolio\");\n    dp.showcase(&dp);\n\n    ap.base.showcase(&ap);\n    ap.base.update(&ap, \"Updated Artist Gallery\");\n    ap.base.showcase(&ap);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Construct a parent class for a gaming console with methods for performance and compatibility, then derive a next-gen console class that overrides these methods for new features.",
    "code": "```c\n#include <stdio.h>\n\n// Parent class\ntypedef struct {\n    void (*performance)();\n    void (*compatibility)();\n} GamingConsole;\n\n// Method implementations for parent class\nvoid parentPerformance() {\n    printf(\"Standard performance metrics.\\n\");\n}\n\nvoid parentCompatibility() {\n    printf(\"Compatible with previous-gen games.\\n\");\n}\n\n// Next-gen console class inheriting from GamingConsole\ntypedef struct {\n    GamingConsole base;\n} NextGenConsole;\n\n// Method implementations for next-gen class\nvoid nextGenPerformance() {\n    printf(\"Enhanced next-gen performance metrics.\\n\");\n}\n\nvoid nextGenCompatibility() {\n    printf(\"Backwards compatibility with additional features.\\n\");\n}\n\n// Function to create a new next-gen console\nNextGenConsole createNextGenConsole() {\n    NextGenConsole console;\n    console.base.performance = nextGenPerformance;\n    console.base.compatibility = nextGenCompatibility;\n    return console;\n}\n\nint main() {\n    // Create parent console\n    GamingConsole parentConsole;\n    parentConsole.performance = parentPerformance;\n    parentConsole.compatibility = parentCompatibility;\n\n    // Create next-gen console\n    NextGenConsole nextGenConsole = createNextGenConsole();\n\n    // Use parent console methods\n    parentConsole.performance();\n    parentConsole.compatibility();\n\n    // Use next-gen console methods\n    nextGenConsole.base.performance();\n    nextGenConsole.base.compatibility();\n\n    return 0;\n}\n```"
  },
  {
    "task": "Set up a base class for a cultural festival with methods for events and participation, and extend it with a music festival subclass that overrides these methods for performances.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n// Base class\ntypedef struct {\n    char name[50];\n    void (*events)(void);\n    void (*participation)(void);\n} CulturalFestival;\n\n// Base class methods\nvoid baseEvents() {\n    printf(\"Cultural festival includes various events.\\n\");\n}\n\nvoid baseParticipation() {\n    printf(\"Participation is open to all.\\n\");\n}\n\n// Derived class\ntypedef struct {\n    CulturalFestival base;\n    char genre[50];\n} MusicFestival;\n\n// Derived class methods\nvoid musicEvents() {\n    printf(\"Music festival features live performances.\\n\");\n}\n\nvoid musicParticipation() {\n    printf(\"Participation is open to musicians and bands.\\n\");\n}\n\n// Function to set up a CulturalFestival object\nvoid setupCulturalFestival(CulturalFestival *cf, const char *name) {\n    strcpy(cf->name, name);\n    cf->events = baseEvents;\n    cf->participation = baseParticipation;\n}\n\n// Function to set up a MusicFestival object\nvoid setupMusicFestival(MusicFestival *mf, const char *name, const char *genre) {\n    setupCulturalFestival(&mf->base, name);\n    mf->base.events = musicEvents;\n    mf->base.participation = musicParticipation;\n    strcpy(mf->genre, genre);\n}\n\nint main() {\n    CulturalFestival cf;\n    setupCulturalFestival(&cf, \"Global Cultural Fest\");\n    printf(\"Festival: %s\\n\", cf.name);\n    cf.events();\n    cf.participation();\n\n    MusicFestival mf;\n    setupMusicFestival(&mf, \"Summer Music Fest\", \"Rock\");\n    printf(\"\\nFestival: %s\\n\", mf.base.name);\n    printf(\"Genre: %s\\n\", mf.genre);\n    mf.base.events();\n    mf.base.participation();\n\n    return 0;\n}\n```"
  }
]