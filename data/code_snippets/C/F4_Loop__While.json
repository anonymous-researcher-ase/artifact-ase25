[
  {
    "task": "Create a program that continuously asks the user to enter a number until they input a negative number.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int number = 0;\n\n    while (number >= 0) {\n        printf(\"Enter a number: \");\n        scanf(\"%d\", &number);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that doubles a number and repeats the process until the number is greater than 1000.",
    "code": "```c\n#include <stdio.h>\n\nvoid doubleUntilGreaterThan1000(int num) {\n    while (num <= 1000) {\n        num *= 2;\n    }\n    printf(\"Result: %d\\n\", num);\n}\n\nint main() {\n    int number;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &number);\n    doubleUntilGreaterThan1000(number);\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a routine to keep printing 'Hello, World!' until a counter reaches 10.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int counter = 0;\n    while (counter < 10) {\n        printf(\"Hello, World!\\n\");\n        counter++;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Construct a loop that checks if a randomly generated number is even, repeating until an odd number is found.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nint main() {\n    srand(time(NULL));\n    int number;\n\n    do {\n        number = rand();\n    } while (number % 2 == 0);\n\n    printf(\"Found an odd number: %d\\n\", number);\n    return 0;\n}\n```"
  },
  {
    "task": "Design a countdown timer that prints each second until it reaches zero.",
    "code": "```c\n#include <stdio.h>\n#include <unistd.h>\n\nint main() {\n    int countdown = 10; // Set the countdown start value\n\n    while (countdown > 0) {\n        printf(\"%d\\n\", countdown);\n        sleep(1); // Wait for 1 second\n        countdown--;\n    }\n    \n    printf(\"0\\n\"); // Print zero after countdown ends\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a system where a user can keep adding items to a list until they type 'stop'.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nint main() {\n    char input[100];\n    char itemList[1000] = \"\";\n\n    while (1) {\n        printf(\"Enter an item (or type 'stop' to finish): \");\n        fgets(input, sizeof(input), stdin);\n        input[strcspn(input, \"\\n\")] = '\\0';\n\n        if (strcmp(input, \"stop\") == 0) {\n            break;\n        }\n\n        strcat(itemList, input);\n        strcat(itemList, \"\\n\");\n    }\n\n    printf(\"Items added:\\n%s\", itemList);\n    return 0;\n}\n```"
  },
  {
    "task": "Write a script that simulates rolling a die and continues until a six is rolled.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nint main() {\n    int roll;\n    srand(time(NULL));\n    \n    while (1) {\n        roll = rand() % 6 + 1;\n        printf(\"Rolled: %d\\n\", roll);\n        if (roll == 6) {\n            break;\n        }\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Create a program that asks for a password and keeps prompting until the correct password is entered.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nint main() {\n    const char correctPassword[] = \"password123\";\n    char input[100];\n\n    while (1) {\n        printf(\"Enter password: \");\n        scanf(\"%99s\", input);\n\n        if (strcmp(input, correctPassword) == 0) {\n            printf(\"Access granted.\\n\");\n            break;\n        } else {\n            printf(\"Incorrect password. Try again.\\n\");\n        }\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a loop that calculates the sum of entered numbers until the user enters zero.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int number;\n    int sum = 0;\n    \n    printf(\"Enter numbers to sum, enter 0 to stop:\\n\");\n    \n    while (1) {\n        scanf(\"%d\", &number);\n        if (number == 0) {\n            break;\n        }\n        sum += number;\n    }\n    \n    printf(\"Sum: %d\\n\", sum);\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a feature that prints Fibonacci numbers until a number exceeds 100.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int a = 0, b = 1;\n    while (a <= 100) {\n        printf(\"%d\\n\", a);\n        int next = a + b;\n        a = b;\n        b = next;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a loop that keeps halving a number until it becomes less than one.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    double num = 50.0; // Example starting number\n    while (num >= 1) {\n        num /= 2;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program that asks for names and keeps storing them until the user enters 'done'.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nint main() {\n    char name[100];\n\n    printf(\"Enter names (type 'done' to stop):\\n\");\n\n    while (1) {\n        printf(\"Enter a name: \");\n        scanf(\"%s\", name);\n\n        if (strcmp(name, \"done\") == 0) {\n            break;\n        }\n\n        // Here you would store the name, e.g., in an array or list.\n        // For this example, we're simply printing it.\n        printf(\"Stored: %s\\n\", name);\n    }\n\n    printf(\"Finished storing names.\\n\");\n    return 0;\n}\n```"
  },
  {
    "task": "Create a process that keeps flipping a coin, recording results until there have been five heads.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nint main() {\n    int heads = 0;\n    int result;\n\n    // Seed the random number generator\n    srand(time(NULL));\n\n    while (heads < 5) {\n        result = rand() % 2; // 0 for tails, 1 for heads\n        if (result == 1) {\n            heads++;\n        }\n        printf(\"Flip result: %s\\n\", result == 1 ? \"Heads\" : \"Tails\");\n    }\n\n    printf(\"Five heads have been flipped.\\n\");\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a countdown that decreases by two each time, starting from 20, until it reaches zero.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int count = 20;\n    while (count > 0) {\n        printf(\"%d\\n\", count);\n        count -= 2;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Design a solution that repeatedly asks for user input and repeats it back until they type 'exit'.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nint main() {\n    char input[100];\n    \n    while (1) {\n        printf(\"Enter input (type 'exit' to quit): \");\n        fgets(input, sizeof(input), stdin);\n        \n        input[strcspn(input, \"\\n\")] = 0;  // Remove newline character\n        \n        if (strcmp(input, \"exit\") == 0) {\n            break;\n        }\n        \n        printf(\"You entered: %s\\n\", input);\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Develop a loop to simulate a bank account balance, repeatedly deducting a fee until the balance is below zero.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    double balance = 100.0; // Example initial balance\n    double fee = 10.0; // Fee to be deducted\n\n    while (balance >= 0) {\n        balance -= fee;\n    }\n\n    printf(\"Final balance: %.2f\\n\", balance);\n    return 0;\n}\n```"
  },
  {
    "task": "Create a sequence generator that multiplies a number by three each time until it reaches or exceeds 100.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int number = 1;\n    \n    while (number < 100) {\n        printf(\"%d\\n\", number);\n        number *= 3;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Write a program that keeps generating random numbers between 1 and 10 until it gets a five.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nint main() {\n    srand(time(NULL));\n    int number;\n\n    while (1) {\n        number = rand() % 10 + 1;\n        printf(\"Generated: %d\\n\", number);\n        if (number == 5) {\n            break;\n        }\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a system to keep checking the temperature and only stop when it falls below freezing.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    float temperature;\n\n    while (1) {\n        printf(\"Enter the current temperature: \");\n        scanf(\"%f\", &temperature);\n\n        if (temperature < 0.0) {\n            printf(\"Temperature is below freezing. Stopping the check.\\n\");\n            break;\n        }\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Construct a quiz game that continues asking questions until the player answers incorrectly.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nint main() {\n    char answer[100];\n    char correctAnswer[] = \"42\"; // Example correct answer\n\n    while (1) {\n        printf(\"What is the answer to life, the universe, and everything? \");\n        scanf(\"%99s\", answer);\n\n        if (strcmp(answer, correctAnswer) != 0) {\n            printf(\"Incorrect! Game Over.\\n\");\n            break;\n        } else {\n            printf(\"Correct! Next question...\\n\");\n            // Add more questions here or loop back for the same question\n        }\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that calculates factorials of a number, repeating the process for numbers 1 through 5.",
    "code": "```c\n#include <stdio.h>\n\nint factorial(int n) {\n    int result = 1;\n    while (n > 1) {\n        result *= n;\n        n--;\n    }\n    return result;\n}\n\nint main() {\n    int i = 1;\n    while (i <= 5) {\n        printf(\"Factorial of %d is %d\\n\", i, factorial(i));\n        i++;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Create a loop that prints all even numbers between 1 and 50.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int i = 2;\n    while (i <= 50) {\n        printf(\"%d\\n\", i);\n        i += 2;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Design a program that continuously asks for user input until a palindrome is entered.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nint isPalindrome(char str[]) {\n    int len = strlen(str);\n    for (int i = 0; i < len / 2; i++) {\n        if (str[i] != str[len - i - 1]) {\n            return 0;\n        }\n    }\n    return 1;\n}\n\nint main() {\n    char input[100];\n\n    while (1) {\n        printf(\"Enter a string: \");\n        fgets(input, sizeof(input), stdin);\n        input[strcspn(input, \"\\n\")] = '\\0'; // Remove trailing newline\n\n        if (isPalindrome(input)) {\n            break;\n        }\n    }\n\n    printf(\"Palindrome entered: %s\\n\", input);\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a countdown that decreases by one each second, starting from 100.",
    "code": "```c\n#include <stdio.h>\n#include <unistd.h>\n\nint main() {\n    int count = 100;\n    while (count > 0) {\n        printf(\"%d\\n\", count);\n        count--;\n        sleep(1);\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Write a script that repeatedly asks for a number and adds it to a total until the total exceeds 500.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int total = 0;\n    int number;\n    \n    while (total <= 500) {\n        printf(\"Enter a number: \");\n        scanf(\"%d\", &number);\n        total += number;\n    }\n    \n    printf(\"Total exceeded 500. Final total: %d\\n\", total);\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Create a loop that generates random letters until the letter 'Z' appears.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nint main() {\n    srand(time(NULL));\n    char letter;\n    \n    while (1) {\n        letter = 'A' + rand() % 26;\n        printf(\"%c\\n\", letter);\n        if (letter == 'Z') {\n            break;\n        }\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Write a process that continues prompting for two numbers and prints their sum if it's even.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int num1, num2, sum;\n\n    while (1) {\n        printf(\"Enter two numbers: \");\n        scanf(\"%d %d\", &num1, &num2);\n\n        sum = num1 + num2;\n\n        if (sum % 2 == 0) {\n            printf(\"Sum is even: %d\\n\", sum);\n        }\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a loop that simulates a traffic light sequence until a manual stop command is received.",
    "code": "```c\n#include <stdio.h>\n#include <stdbool.h>\n\nint main() {\n    bool stop = false;\n    char command;\n\n    while (!stop) {\n        printf(\"Traffic Light: Green\\n\");\n        printf(\"Enter 's' to stop or any other key to continue: \");\n        command = getchar();\n        if (command == 's' || command == 'S') {\n            stop = true;\n            break;\n        }\n        while (getchar() != '\\n'); // Clear the buffer\n\n        printf(\"Traffic Light: Yellow\\n\");\n        printf(\"Enter 's' to stop or any other key to continue: \");\n        command = getchar();\n        if (command == 's' || command == 'S') {\n            stop = true;\n            break;\n        }\n        while (getchar() != '\\n'); // Clear the buffer\n\n        printf(\"Traffic Light: Red\\n\");\n        printf(\"Enter 's' to stop or any other key to continue: \");\n        command = getchar();\n        if (command == 's' || command == 'S') {\n            stop = true;\n            break;\n        }\n        while (getchar() != '\\n'); // Clear the buffer\n    }\n\n    printf(\"Traffic Light simulation stopped.\\n\");\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a feature that keeps printing numbers in reverse order starting from 10.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int num = 10;\n    while (num > 0) {\n        printf(\"%d\\n\", num);\n        num--;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Create a program that rolls two dice and continues until the sum is exactly seven.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nint main() {\n    srand(time(NULL));\n    int die1, die2, sum;\n    \n    do {\n        die1 = rand() % 6 + 1;\n        die2 = rand() % 6 + 1;\n        sum = die1 + die2;\n    } while (sum != 7);\n    \n    printf(\"Rolled a sum of 7 with dice: %d and %d\\n\", die1, die2);\n    return 0;\n}\n```"
  },
  {
    "task": "Design a loop that keeps asking for ages and prints the average once a negative age is entered.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int age;\n    int count = 0;\n    int sum = 0;\n    double average;\n\n    printf(\"Enter ages (negative age to stop): \");\n    scanf(\"%d\", &age);\n\n    while (age >= 0) {\n        sum += age;\n        count++;\n        printf(\"Enter ages (negative age to stop): \");\n        scanf(\"%d\", &age);\n    }\n\n    if (count > 0) {\n        average = (double)sum / count;\n        printf(\"Average age: %.2f\\n\", average);\n    } else {\n        printf(\"No valid age entered.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a routine that squares numbers starting from 1 until the square is greater than 500.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int num = 1;\n    while (num * num <= 500) {\n        printf(\"%d\\n\", num * num);\n        num++;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a system to ask for a string and append it to a file until 'end' is typed.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nint main() {\n    FILE *file = fopen(\"output.txt\", \"a\");\n    char input[256];\n    \n    if (file == NULL) {\n        return 1;\n    }\n    \n    while (1) {\n        printf(\"Enter a string (type 'end' to stop): \");\n        fgets(input, sizeof(input), stdin);\n        \n        // Remove newline character from fgets\n        input[strcspn(input, \"\\n\")] = '\\0';\n        \n        if (strcmp(input, \"end\") == 0) {\n            break;\n        }\n        \n        fprintf(file, \"%s\\n\", input);\n    }\n    \n    fclose(file);\n    return 0;\n}\n```"
  },
  {
    "task": "Create a script that checks if a number is prime, repeating for each number entered by the user.",
    "code": "```c\n#include <stdio.h>\n\nint is_prime(int num) {\n    if (num <= 1) return 0;\n    for (int i = 2; i * i <= num; i++) {\n        if (num % i == 0) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int num;\n    while (1) {\n        printf(\"Enter a number (or a negative number to exit): \");\n        scanf(\"%d\", &num);\n        if (num < 0) break;\n        if (is_prime(num)) {\n            printf(\"%d is a prime number.\\n\", num);\n        } else {\n            printf(\"%d is not a prime number.\\n\", num);\n        }\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a countdown that prints numbers starting from 50 down to 1.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int number = 50;\n    while (number >= 1) {\n        printf(\"%d\\n\", number);\n        number--;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program that keeps doubling the value of a variable until it exceeds 200.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int value = 1;\n    \n    while (value <= 200) {\n        value *= 2;\n    }\n    \n    printf(\"Final value: %d\\n\", value);\n    return 0;\n}\n```"
  },
  {
    "task": "Design a loop that keeps generating a random string of letters until a specific word is formed.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <time.h>\n\n#define TARGET \"HELLO\"\n#define LENGTH 5\n\nvoid generate_random_string(char *str, int length) {\n    const char charset[] = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    for (int i = 0; i < length; i++) {\n        int key = rand() % (int)(sizeof(charset) - 1);\n        str[i] = charset[key];\n    }\n    str[length] = '\\0';\n}\n\nint main() {\n    srand(time(0));\n    char randomString[LENGTH + 1];\n\n    do {\n        generate_random_string(randomString, LENGTH);\n    } while (strcmp(randomString, TARGET) != 0);\n\n    printf(\"Generated target string: %s\\n\", randomString);\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a system that continuously fetches data from a sensor until a threshold is crossed.",
    "code": "```c\n#include <stdio.h>\n\nint fetchDataFromSensor() {\n    // Simulated sensor data fetch\n    return rand() % 100; // returns a random value between 0 and 99\n}\n\nint main() {\n    int threshold = 50;\n    int sensorData;\n\n    while (1) {\n        sensorData = fetchDataFromSensor();\n        printf(\"Sensor data: %d\\n\", sensorData);\n\n        if (sensorData > threshold) {\n            printf(\"Threshold crossed. Stopping.\\n\");\n            break;\n        }\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a game where a player guesses a number, and the game continues until the player guesses correctly.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nint main() {\n    srand(time(0));\n    int numberToGuess = rand() % 100 + 1;\n    int playerGuess = 0;\n    \n    printf(\"Guess the number between 1 and 100: \");\n    \n    while (playerGuess != numberToGuess) {\n        scanf(\"%d\", &playerGuess);\n        if (playerGuess < numberToGuess) {\n            printf(\"Too low! Try again: \");\n        } else if (playerGuess > numberToGuess) {\n            printf(\"Too high! Try again: \");\n        } else {\n            printf(\"Congratulations! You guessed it right.\\n\");\n        }\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Write a loop that continues to add random numbers to a list until the list has 10 even numbers.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nint main() {\n    int list[10];\n    int count = 0;\n\n    srand(time(NULL));\n\n    while (count < 10) {\n        int num = rand();\n        if (num % 2 == 0) {\n            list[count] = num;\n            count++;\n        }\n    }\n\n    for (int i = 0; i < 10; i++) {\n        printf(\"%d\\n\", list[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a routine that keeps removing elements from a list until it is empty.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct Node {\n    int data;\n    struct Node* next;\n} Node;\n\nvoid removeElements(Node** head) {\n    while (*head != NULL) {\n        Node* temp = *head;\n        *head = (*head)->next;\n        free(temp);\n    }\n}\n\nint main() {\n    Node* head = NULL;\n    // Code to populate the linked list would go here\n\n    removeElements(&head);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a sequence that prints the alphabet repeatedly until interrupted by the user.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    char ch;\n    while (1) {\n        for (ch = 'A'; ch <= 'Z'; ++ch) {\n            putchar(ch);\n        }\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Create a program that continuously checks for updates and stops once an update is available.",
    "code": "```c\n#include <stdio.h>\n#include <stdbool.h>\n\nbool checkForUpdates() {\n    // Simulate the update check; return true if an update is available\n    return false; // Change this to true to simulate an available update\n}\n\nint main() {\n    bool updateAvailable = false;\n\n    while (!updateAvailable) {\n        // Continuously check for updates\n        updateAvailable = checkForUpdates();\n    }\n\n    printf(\"Update is available!\\n\");\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that keeps dividing a number by two until it results in a fractional value.",
    "code": "```c\n#include <stdio.h>\n\nvoid divideUntilFractional(int number) {\n    while (number % 2 == 0) {\n        number /= 2;\n    }\n    printf(\"Result: %d\\n\", number);\n}\n\nint main() {\n    int num = 20; // Example number\n    divideUntilFractional(num);\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a loop that keeps asking for student's grades and calculates the average until a grade of -1 is entered.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int grade, count = 0;\n    double sum = 0.0;\n    \n    printf(\"Enter grades (-1 to end): \");\n    scanf(\"%d\", &grade);\n    \n    while (grade != -1) {\n        sum += grade;\n        count++;\n        printf(\"Enter grades (-1 to end): \");\n        scanf(\"%d\", &grade);\n    }\n    \n    if (count > 0) {\n        printf(\"Average grade: %.2f\\n\", sum / count);\n    } else {\n        printf(\"No grades entered.\\n\");\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Design a feature that continuously monitors a file for changes and stops when no changes are detected for a minute.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <sys/stat.h>\n#include <time.h>\n#include <unistd.h>\n\nint main() {\n    const char *filename = \"file_to_monitor.txt\";\n    struct stat file_stat;\n    time_t last_mod_time = 0;\n    time_t no_change_start = 0;\n    int no_change_duration = 0;\n\n    while (1) {\n        if (stat(filename, &file_stat) == -1) {\n            perror(\"Failed to get file status\");\n            return 1;\n        }\n        \n        if (file_stat.st_mtime != last_mod_time) {\n            last_mod_time = file_stat.st_mtime;\n            no_change_start = time(NULL);\n        } else {\n            no_change_duration = time(NULL) - no_change_start;\n            if (no_change_duration >= 60) {\n                break;\n            }\n        }\n        \n        sleep(1);\n    }\n\n    printf(\"No changes detected for a minute, stopping monitoring.\\n\");\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a process where a motor runs until a certain distance is reached.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int distance = 0;\n    int target_distance = 100; // Example target distance\n\n    while (distance < target_distance) {\n        // Simulate motor running and increasing the distance\n        distance += 10; // Increment distance by 10 as an example\n        printf(\"Motor running. Current distance: %d\\n\", distance);\n    }\n\n    printf(\"Target distance reached. Motor stopped.\\n\");\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a script that keeps generating random numbers and stops when it generates a prime number.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nint is_prime(int num) {\n    if (num <= 1) return 0;\n    if (num <= 3) return 1;\n    if (num % 2 == 0 || num % 3 == 0) return 0;\n    for (int i = 5; i * i <= num; i += 6) {\n        if (num % i == 0 || num % (i + 2) == 0) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    srand(time(0));\n    int number;\n    \n    while (1) {\n        number = rand();\n        if (is_prime(number)) break;\n    }\n    \n    printf(\"Generated prime number: %d\\n\", number);\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program that asks for the user's favorite color and keeps asking until they say 'blue'.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nint main() {\n    char color[50];\n\n    printf(\"What is your favorite color? \");\n    while (1) {\n        fgets(color, sizeof(color), stdin);\n        color[strcspn(color, \"\\n\")] = '\\0'; // Remove newline character\n        if (strcmp(color, \"blue\") == 0) {\n            break;\n        }\n        printf(\"What is your favorite color? \");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a loop that continuously prints the time every second until a key is pressed.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n#include <conio.h>  // For _kbhit()\n\nint main() {\n    while (!_kbhit()) {\n        time_t currentTime;\n        time(&currentTime);\n        printf(\"%s\", ctime(&currentTime));\n        Sleep(1000);  // Sleep for 1000 milliseconds (1 second)\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Create a system to keep downloading data from a server until the connection is lost.",
    "code": "```c\n#include <stdio.h>\n#include <stdbool.h>\n\nbool isConnectionActive() {\n    // Simulate checking connection status\n    // In a real scenario, this function would check the actual connection status\n    return true;  // Placeholder for actual connection check\n}\n\nvoid downloadData() {\n    // Simulate downloading data\n    // In a real scenario, this function would perform actual data download\n    printf(\"Downloading data...\\n\");\n}\n\nint main() {\n    while (isConnectionActive()) {\n        downloadData();\n    }\n    printf(\"Connection lost. Stopping download.\\n\");\n    return 0;\n}\n```"
  },
  {
    "task": "Write a process to keep a light on until the ambient light level is sufficient.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int ambientLightLevel = 0; // Example value, replace with actual sensor reading\n    int sufficientLightLevel = 10; // Example threshold value\n\n    while (ambientLightLevel < sufficientLightLevel) {\n        // Code to turn the light on\n        printf(\"Light is ON\\n\");\n\n        // Update the ambientLightLevel with actual sensor reading\n        // ambientLightLevel = getAmbientLightLevel();\n\n        // For demonstration purposes, simulate an increase in ambient light\n        ambientLightLevel++;\n    }\n\n    // Code to turn the light off\n    printf(\"Light is OFF\\n\");\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a feature that continuously plays a sound until the user presses a button.",
    "code": "```c\n#include <stdio.h>\n#include <stdbool.h>\n\nbool isButtonPressed() {\n    // Replace with actual implementation to check button state\n    return false;\n}\n\nvoid playSound() {\n    // Replace with actual implementation to play sound\n}\n\nint main() {\n    while (!isButtonPressed()) {\n        playSound();\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Design a program that keeps multiplying a matrix by itself until its determinant is greater than 1000.",
    "code": "```c\n#include <stdio.h>\n\n#define SIZE 2\n\ndouble determinant(double matrix[SIZE][SIZE]) {\n    return matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0];\n}\n\nvoid multiply(double result[SIZE][SIZE], double matrix[SIZE][SIZE]) {\n    double temp[SIZE][SIZE];\n    for (int i = 0; i < SIZE; i++) {\n        for (int j = 0; j < SIZE; j++) {\n            temp[i][j] = 0;\n            for (int k = 0; k < SIZE; k++) {\n                temp[i][j] += result[i][k] * matrix[k][j];\n            }\n        }\n    }\n    for (int i = 0; i < SIZE; i++) {\n        for (int j = 0; j < SIZE; j++) {\n            result[i][j] = temp[i][j];\n        }\n    }\n}\n\nint main() {\n    double matrix[SIZE][SIZE] = {{2, 1}, {1, 2}};\n    double det = determinant(matrix);\n\n    while (det <= 1000) {\n        multiply(matrix, matrix);\n        det = determinant(matrix);\n    }\n\n    printf(\"Determinant: %lf\\n\", det);\n    return 0;\n}\n```"
  },
  {
    "task": "Create a script that keeps prompting the user to guess a word until they get it right.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nint main() {\n    char guess[100];\n    const char *secretWord = \"secret\";\n\n    while (1) {\n        printf(\"Guess the word: \");\n        scanf(\"%99s\", guess);\n        \n        if (strcmp(guess, secretWord) == 0) {\n            printf(\"Correct!\\n\");\n            break;\n        } else {\n            printf(\"Wrong guess. Try again.\\n\");\n        }\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Write a loop that simulates a car's fuel consumption and stops when the tank is empty.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    double fuel = 50.0; // initial fuel in liters\n    double consumptionRate = 5.0; // fuel consumption per iteration\n\n    while (fuel > 0) {\n        printf(\"Current fuel: %.2f liters\\n\", fuel);\n        fuel -= consumptionRate;\n    }\n\n    printf(\"The tank is empty.\\n\");\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a routine that keeps checking if a file exists and stops once it does.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    FILE *file;\n    while (1) {\n        file = fopen(\"filename.txt\", \"r\");\n        if (file) {\n            fclose(file);\n            break;\n        }\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a feature that continuously calculates the square root of a number until it's less than 0.1.",
    "code": "```c\n#include <stdio.h>\n#include <math.h>\n\nint main() {\n    double number;\n\n    printf(\"Enter a number: \");\n    scanf(\"%lf\", &number);\n\n    while (number >= 0.1) {\n        number = sqrt(number);\n        printf(\"Current square root: %f\\n\", number);\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Create a system that prints 'Processing...' every second until a task is complete.",
    "code": "```c\n#include <stdio.h>\n#include <unistd.h>\n\nint main() {\n    int taskComplete = 0;\n\n    while (!taskComplete) {\n        printf(\"Processing...\\n\");\n        sleep(1);\n\n        // Here you would normally check if the task is complete and update taskComplete\n        // For demonstration, we'll simulate task completion after 5 seconds\n        static int counter = 0;\n        counter++;\n        if (counter >= 5) {\n            taskComplete = 1;\n        }\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a loop that repeatedly checks the status of a process until it reports 'complete'.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n// Mock function to simulate checking the process status\nconst char* checkProcessStatus() {\n    // In a real scenario, this function would interface with a process.\n    // This is just a placeholder for demonstration purposes.\n    static int count = 0;\n    count++;\n    if(count < 5) {\n        return \"in progress\";\n    } else {\n        return \"complete\";\n    }\n}\n\nint main() {\n    const char* status = checkProcessStatus();\n\n    while(strcmp(status, \"complete\") != 0) {\n        printf(\"Process status: %s\\n\", status);\n        status = checkProcessStatus();\n    }\n\n    printf(\"Process status: %s\\n\", status);\n    return 0;\n}\n```"
  },
  {
    "task": "Design a routine to keep pinging a server and alert when the connection is lost.",
    "code": "```c\n#include <stdio.h>\n#include <stdbool.h>\n\n// Simulated function to check server connection\nbool pingServer() {\n    // This function should implement real ping logic\n    // Here it just returns true to simulate a server connection\n    return true;\n}\n\nint main() {\n    bool serverConnected = true;\n\n    while (serverConnected) {\n        serverConnected = pingServer();\n        \n        if (!serverConnected) {\n            printf(\"Connection lost!\\n\");\n        }\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Implement a loop that counts down from 100 by fives until it reaches zero.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int i = 100;\n    while (i >= 0) {\n        printf(\"%d\\n\", i);\n        i -= 5;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Create a script that keeps track of inventory items being added or removed until an end signal is given.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nint main() {\n    int inventory = 0;\n    char input[10];\n    int number;\n\n    while (1) {\n        printf(\"Enter command (add/remove/quit): \");\n        scanf(\"%s\", input);\n\n        if (strcmp(input, \"quit\") == 0) {\n            break;\n        } else if (strcmp(input, \"add\") == 0) {\n            printf(\"Enter number to add: \");\n            scanf(\"%d\", &number);\n            inventory += number;\n        } else if (strcmp(input, \"remove\") == 0) {\n            printf(\"Enter number to remove: \");\n            scanf(\"%d\", &number);\n            inventory -= number;\n        } else {\n            printf(\"Invalid command.\\n\");\n        }\n\n        printf(\"Current inventory: %d\\n\", inventory);\n    }\n\n    printf(\"Final inventory: %d\\n\", inventory);\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program that keeps calculating the power of two for numbers until a result is greater than 1000.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int number = 1;\n    int power = 1;\n\n    while (power <= 1000) {\n        power = 1 << number;\n        if (power > 1000) {\n            break;\n        }\n        printf(\"2^%d = %d\\n\", number, power);\n        number++;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a sequence that keeps appending random numbers to an array until its length is 20.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nint main() {\n    int numbers[20];\n    int count = 0;\n    srand(time(0));\n\n    while (count < 20) {\n        numbers[count] = rand();\n        count++;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a routine that continuously rotates an image until it matches a reference orientation.",
    "code": "```c\n#include <stdbool.h>\n#include <stdio.h>\n\n// Function to check if the image matches the reference orientation\nbool matchesReferenceOrientation(int image, int reference) {\n    return image == reference;\n}\n\n// Function to rotate the image\nint rotateImage(int image) {\n    // Dummy rotation logic: just increment the \"image\" value\n    return image + 1;\n}\n\nvoid rotateUntilMatch(int image, int reference) {\n    while (!matchesReferenceOrientation(image, reference)) {\n        image = rotateImage(image);\n        printf(\"Rotated image: %d\\n\", image);\n    }\n    printf(\"Image matches the reference orientation.\\n\");\n}\n\nint main() {\n    int image = 0; // Initial state of the image\n    int reference = 5; // Reference orientation\n\n    rotateUntilMatch(image, reference);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a loop that keeps printing random jokes until the user stops it.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nvoid print_random_joke() {\n    const char* jokes[] = {\n        \"Why don't scientists trust atoms? Because they make up everything!\",\n        \"What do you get if you cross a cat with a dark horse? Kitty Perry.\",\n        \"Why was the math book sad? Because it had too many problems.\",\n        \"Why can't you hear a pterodactyl go to the bathroom? Because the 'P' is silent.\"\n    };\n    int num_jokes = sizeof(jokes) / sizeof(jokes[0]);\n    int index = rand() % num_jokes;\n    printf(\"%s\\n\", jokes[index]);\n}\n\nint main() {\n    char input;\n    srand(time(NULL));\n\n    while (1) {\n        print_random_joke();\n        printf(\"Do you want to hear another joke? (y/n): \");\n        input = getchar();\n        getchar(); // to consume the newline character\n        if (input != 'y' && input != 'Y') {\n            break;\n        }\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a program that accepts user feedback and continues until a positive feedback is received.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nint main() {\n    char feedback[100];\n\n    while (1) {\n        printf(\"Please enter your feedback: \");\n        fgets(feedback, sizeof(feedback), stdin);\n\n        if (strstr(feedback, \"good\") || strstr(feedback, \"great\") || strstr(feedback, \"excellent\") || strstr(feedback, \"positive\")) {\n            printf(\"Thank you for your positive feedback!\\n\");\n            break;\n        } else {\n            printf(\"We are sorry to hear that. Please enter your feedback again.\\n\");\n        }\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a loop that repeatedly reads sensor data and stops when a stable reading is observed.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nint read_sensor_data() {\n    // Simulate sensor data reading\n    return rand() % 100;\n}\n\nint is_stable(int current_reading, int previous_reading) {\n    return current_reading == previous_reading;\n}\n\nint main() {\n    srand(time(NULL));\n    int previous_reading = -1;\n    int current_reading = read_sensor_data();\n\n    while (!is_stable(current_reading, previous_reading)) {\n        previous_reading = current_reading;\n        current_reading = read_sensor_data();\n    }\n\n    printf(\"Stable reading observed: %d\\n\", current_reading);\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a system that simulates a stopwatch, counting seconds until stopped manually.",
    "code": "```c\n#include <stdio.h>\n#include <unistd.h>\n#include <stdbool.h>\n\nint main() {\n    int seconds = 0;\n    char input;\n    bool running = true;\n\n    printf(\"Press 'q' then Enter to stop the stopwatch.\\n\");\n\n    while (running) {\n        printf(\"Seconds elapsed: %d\\n\", seconds);\n        sleep(1);\n        seconds++;\n\n        if (kbhit()) {\n            input = getchar();\n            if (input == 'q') {\n                running = false;\n            }\n        }\n    }\n\n    printf(\"Stopwatch stopped at %d seconds.\\n\", seconds);\n    return 0;\n}\n\nint kbhit(void) {\n    struct timeval tv = {0, 0};\n    fd_set readfds;\n    FD_ZERO(&readfds);\n    FD_SET(0, &readfds);\n    return select(1, &readfds, NULL, NULL, &tv) > 0;\n}\n```"
  },
  {
    "task": "Create a script that continues adding random integers to a sum until the sum exceeds 100.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nint main() {\n    int sum = 0;\n    time(NULL);\n    srand((unsigned int)time(NULL));\n\n    while (sum <= 100) {\n        int randomNumber = rand() % 100 + 1;\n        sum += randomNumber;\n    }\n\n    printf(\"Final sum: %d\\n\", sum);\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a process to track a moving object until it stops.",
    "code": "```c\n#include <stdio.h>\n#include <stdbool.h>\n\nint main() {\n    bool isMoving = true;\n    int position = 0;\n    int speed = 5; // Assume some speed\n\n    while (isMoving) {\n        position += speed;\n\n        // Simulate speed reduction\n        speed--;\n\n        if (speed <= 0) {\n            isMoving = false;\n        }\n\n        printf(\"Object at position: %d\\n\", position);\n    }\n\n    printf(\"Object has stopped.\\n\");\n    return 0;\n}\n```"
  },
  {
    "task": "Design a routine to keep checking user login attempts until a successful login occurs.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nint main() {\n    const char correctUsername[] = \"user\";\n    const char correctPassword[] = \"password\";\n    char inputUsername[50];\n    char inputPassword[50];\n    int isLoggedIn = 0;\n\n    while (!isLoggedIn) {\n        printf(\"Enter username: \");\n        scanf(\"%s\", inputUsername);\n        printf(\"Enter password: \");\n        scanf(\"%s\", inputPassword);\n\n        if (strcmp(inputUsername, correctUsername) == 0 && strcmp(inputPassword, correctPassword) == 0) {\n            printf(\"Login successful!\\n\");\n            isLoggedIn = 1;\n        } else {\n            printf(\"Incorrect username or password. Please try again.\\n\");\n        }\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a loop that repeatedly calculates the area of a circle for radii from 1 to 10.",
    "code": "```c\n#include <stdio.h>\n#define PI 3.14159\n\nint main() {\n    int radius = 1;\n    while (radius <= 10) {\n        double area = PI * radius * radius;\n        printf(\"Radius: %d, Area: %.2f\\n\", radius, area);\n        radius++;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Create a program that continues flipping a card from a deck until an ace is drawn.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nint main() {\n    srand(time(NULL));\n    int card;\n    do {\n        card = rand() % 52;  // Assume 0-3 represent aces\n        printf(\"Flipped card: %d\\n\", card);\n    } while (card > 3);\n    printf(\"An ace was drawn!\\n\");\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a loop that keeps asking for a word and stores it until a word with more than five letters is entered.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nint main() {\n    char word[100];\n    \n    while (1) {\n        printf(\"Enter a word: \");\n        scanf(\"%99s\", word);\n        \n        if (strlen(word) > 5) {\n            break;\n        }\n        \n        // Store the word (logic for storing can be added here)\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Implement a feature that continuously calculates the exponential growth of a population until it doubles.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    double initial_population = 1000.0; // Example initial population\n    double growth_rate = 0.05; // Example growth rate per cycle\n    double population = initial_population;\n    double target_population = initial_population * 2;\n\n    while (population < target_population) {\n        population += population * growth_rate;\n    }\n\n    printf(\"Population has doubled to: %.2f\\n\", population);\n    return 0;\n}\n```"
  },
  {
    "task": "Write a script that repeats a string a certain number of times until a limit is reached.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nint main() {\n    const char *string = \"Hello\";\n    int limit = 5;\n    int count = 0;\n    \n    while (count < limit) {\n        printf(\"%s\\n\", string);\n        count++;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Create a routine that keeps accessing an API endpoint until it returns a specific result.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <curl/curl.h>\n\nsize_t write_callback(void *ptr, size_t size, size_t nmemb, char *data) {\n    size_t total_size = size * nmemb;\n    strncpy(data, ptr, total_size);\n    data[total_size] = '\\0';\n    return total_size;\n}\n\nint main() {\n    CURL *curl;\n    CURLcode res;\n    char data[1024];\n    const char *desired_result = \"specific result\";\n\n    curl_global_init(CURL_GLOBAL_DEFAULT);\n    curl = curl_easy_init();\n\n    if(curl) {\n        curl_easy_setopt(curl, CURLOPT_URL, \"http://api.example.com/endpoint\");\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_callback);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, data);\n\n        while(1) {\n            res = curl_easy_perform(curl);\n            if(res != CURLE_OK) {\n                fprintf(stderr, \"curl_easy_perform() failed: %s\\n\", curl_easy_strerror(res));\n                break;\n            }\n            if(strstr(data, desired_result) != NULL) {\n                printf(\"Desired result obtained.\\n\");\n                break;\n            }\n        }\n\n        curl_easy_cleanup(curl);\n    }\n\n    curl_global_cleanup();\n    return 0;\n}\n```"
  },
  {
    "task": "Design a loop that continues to fetch stock prices until a certain price threshold is crossed.",
    "code": "```c\n#include <stdio.h>\n\nfloat fetchStockPrice();\n\nint main() {\n    float priceThreshold = 150.0; // Example threshold\n    float currentPrice = 0.0;\n\n    while (currentPrice <= priceThreshold) {\n        currentPrice = fetchStockPrice();\n        printf(\"Current Stock Price: %.2f\\n\", currentPrice);\n    }\n\n    printf(\"Price threshold crossed. Current Price: %.2f\\n\", currentPrice);\n    return 0;\n}\n\nfloat fetchStockPrice() {\n    // Placeholder function to simulate fetching stock price\n    // In a real scenario, this would likely fetch data from an API or database\n    return (float)(rand() % 200); // Random price between 0 and 199\n}\n```"
  },
  {
    "task": "Implement a process that keeps monitoring CPU usage until it drops below 10%.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n\nfloat getCpuUsage() {\n    // Dummy implementation for CPU usage retrieval\n    // Replace with actual code to get CPU usage on your system\n    return (float)(rand() % 100);\n}\n\nint main() {\n    float cpuUsage;\n    do {\n        cpuUsage = getCpuUsage();\n        printf(\"Current CPU Usage: %.2f%%\\n\", cpuUsage);\n        sleep(1); // Sleep for a while before checking again\n    } while (cpuUsage >= 10.0);\n    \n    printf(\"CPU usage dropped below 10%%.\\n\");\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program that asks for a series of numbers and prints the largest once a negative number is entered.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int number, largest = 0;\n    \n    printf(\"Enter numbers (negative number to stop):\\n\");\n    while (1) {\n        scanf(\"%d\", &number);\n        if (number < 0) {\n            break;\n        }\n        if (number > largest) {\n            largest = number;\n        }\n    }\n    \n    printf(\"The largest number entered is: %d\\n\", largest);\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a system that keeps a heater on until the room reaches a desired temperature.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    float currentTemperature = 20.0; // Example starting temperature\n    float desiredTemperature = 25.0; // Example desired temperature\n\n    while (currentTemperature < desiredTemperature) {\n        printf(\"Heater is ON. Current Temperature: %.1f\\n\", currentTemperature);\n        currentTemperature += 0.5; // Simulate heating\n    }\n\n    printf(\"Heater is OFF. Desired temperature reached.\\n\");\n    return 0;\n}\n```"
  },
  {
    "task": "Create a loop that repeatedly checks if a door is open and alerts if it remains open for too long.",
    "code": "```c\n#include <stdio.h>\n#include <stdbool.h>\n#include <unistd.h> // for sleep function\n\nbool isDoorOpen() {\n    // Placeholder function to simulate door status\n    // Replace with actual logic to check the door status\n    return true; // Let's assume the door is open for demonstration\n}\n\nvoid alertDoorOpenTooLong() {\n    printf(\"Alert: The door has been open for too long!\\n\");\n}\n\nint main() {\n    int openTime = 0;\n    const int maxOpenTime = 10; // Maximum time in seconds the door can remain open\n\n    while (isDoorOpen()) {\n        sleep(1); // Wait for 1 second\n        openTime++;\n        if (openTime > maxOpenTime) {\n            alertDoorOpenTooLong();\n            break;\n        }\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a feature that keeps adding random characters to a string until its length is 8.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n#include <string.h>\n\nint main() {\n    char str[9] = \"\"; // 8 characters + 1 for the null terminator\n    const char charset[] = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n    size_t length = 0;\n    size_t charset_size = sizeof(charset) - 1;\n\n    srand(time(NULL));\n\n    while (length < 8) {\n        str[length] = charset[rand() % charset_size];\n        length++;\n    }\n    str[length] = '\\0';\n\n    printf(\"Random String: %s\\n\", str);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a routine that simulates a race and continues until a participant crosses the finish line.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\n#define FINISH_LINE 100\n\nint main() {\n    int position = 0;\n    srand(time(0));\n\n    while (position < FINISH_LINE) {\n        int advance = rand() % 10 + 1; // Random advance between 1 and 10\n        position += advance;\n        printf(\"Current position: %d\\n\", position);\n    }\n\n    printf(\"A participant has crossed the finish line!\\n\");\n    return 0;\n}\n```"
  },
  {
    "task": "Write a script that keeps checking an email inbox until a specific email is received.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\n// Placeholder function to simulate checking an email inbox\nbool checkInboxForEmail(const char* targetEmail) {\n    // Simulate an inbox check; replace with actual email check logic\n    static int attempts = 0;\n    attempts++;\n    if (attempts == 5) { // Simulate finding the email on the 5th attempt\n        return true;\n    }\n    return false;\n}\n\nint main() {\n    const char* specificEmail = \"target@example.com\";\n    bool emailReceived = false;\n\n    while (!emailReceived) {\n        emailReceived = checkInboxForEmail(specificEmail);\n    }\n\n    printf(\"Specific email received.\\n\");\n    return 0;\n}\n```"
  },
  {
    "task": "Create a loop that continues to play a video on repeat until the user interrupts.",
    "code": "```c\n#include <stdio.h>\n#include <stdbool.h>\n\nbool userInterrupted() {\n    // This function should check if the user wants to interrupt\n    // Return true if interrupted, otherwise false\n    // For demonstration purposes, we'll always return false\n    return false;\n}\n\nvoid playVideo() {\n    // This function should contain the logic to play the video\n    printf(\"Playing video...\\n\");\n}\n\nint main() {\n    while (true) {\n        if (userInterrupted()) {\n            break;\n        }\n        playVideo();\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a process that keeps scanning for Bluetooth devices until a specific device is found.",
    "code": "```c\n#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n\n// Mock function to simulate scanning for Bluetooth devices\nbool scanForDevices(char *foundDevice) {\n    // Simulate finding a device\n    static int callCount = 0;\n    callCount++;\n    if (callCount == 5) {\n        strcpy(foundDevice, \"TargetDevice\");\n        return true;\n    }\n    strcpy(foundDevice, \"OtherDevice\");\n    return false;\n}\n\nint main() {\n    char foundDevice[256];\n    const char *targetDevice = \"TargetDevice\";\n    bool found = false;\n\n    while (!found) {\n        found = scanForDevices(foundDevice);\n        if (found && strcmp(foundDevice, targetDevice) == 0) {\n            printf(\"Found the target device: %s\\n\", foundDevice);\n            break;\n        } else {\n            printf(\"Scanning... Current device: %s\\n\", foundDevice);\n            found = false;\n        }\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a script that continuously captures images from a webcam until a motion is detected.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <opencv2/opencv.hpp>\n\nusing namespace cv;\n\nint main() {\n    VideoCapture cap(0);\n    if (!cap.isOpened()) {\n        printf(\"Error: Could not open camera\\n\");\n        return -1;\n    }\n\n    Mat frame, prevFrame, diffFrame;\n    bool motionDetected = false;\n\n    while (!motionDetected) {\n        cap >> frame;\n        if (frame.empty()) {\n            printf(\"Error: Could not capture frame\\n\");\n            break;\n        }\n\n        if (!prevFrame.empty()) {\n            absdiff(frame, prevFrame, diffFrame);\n            cvtColor(diffFrame, diffFrame, COLOR_BGR2GRAY);\n            threshold(diffFrame, diffFrame, 25, 255, THRESH_BINARY);\n            if (countNonZero(diffFrame) > 500) {\n                motionDetected = true;\n            }\n        }\n\n        prevFrame = frame.clone();\n    }\n\n    cap.release();\n    return 0;\n}\n```"
  },
  {
    "task": "Design a program that keeps playing a sound file until the user presses a mute button.",
    "code": "```c\n#include <stdio.h>\n#include <stdbool.h>\n\nbool isMuteButtonPressed() {\n    // Placeholder function for checking if the mute button is pressed\n    // Replace this with actual implementation\n    return false;\n}\n\nvoid playSound() {\n    // Placeholder function for playing sound\n    // Replace this with actual implementation\n    printf(\"Playing sound...\\n\");\n}\n\nint main() {\n    while (!isMuteButtonPressed()) {\n        playSound();\n    }\n    printf(\"Sound muted.\\n\");\n    return 0;\n}\n```"
  },
  {
    "task": "Create a loop that repeatedly generates a random password until it meets certain security criteria.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n#include <string.h>\n#include <ctype.h>\n\n#define PASSWORD_LENGTH 12\n\nint is_secure_password(const char *password) {\n    int has_upper = 0, has_lower = 0, has_digit = 0;\n    for (int i = 0; i < PASSWORD_LENGTH; i++) {\n        if (isupper(password[i])) has_upper = 1;\n        if (islower(password[i])) has_lower = 1;\n        if (isdigit(password[i])) has_digit = 1;\n    }\n    return has_upper && has_lower && has_digit;\n}\n\nvoid generate_password(char *password) {\n    const char charset[] = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n    for (int i = 0; i < PASSWORD_LENGTH; i++) {\n        int key = rand() % (int)(sizeof(charset) - 1);\n        password[i] = charset[key];\n    }\n    password[PASSWORD_LENGTH] = '\\0';\n}\n\nint main() {\n    srand(time(NULL));\n    char password[PASSWORD_LENGTH + 1];\n\n    do {\n        generate_password(password);\n    } while (!is_secure_password(password));\n\n    printf(\"Secure Password: %s\\n\", password);\n    return 0;\n}\n```"
  },
  {
    "task": "Write a process that keeps checking for file changes in a directory and logs them until stopped.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <unistd.h>\n#include <string.h>\n#include <dirent.h>\n\n#define DIRECTORY_PATH \"./watched_directory/\"\n#define LOG_FILE \"change_log.txt\"\n\nint has_file_changed(const char *filename, time_t *last_modified) {\n    struct stat file_stat;\n    if (stat(filename, &file_stat) == -1) {\n        return 0;\n    }\n    if (*last_modified != file_stat.st_mtime) {\n        *last_modified = file_stat.st_mtime;\n        return 1;\n    }\n    return 0;\n}\n\nvoid log_change(const char *filename) {\n    FILE *log_fp = fopen(LOG_FILE, \"a\");\n    if (log_fp == NULL) {\n        perror(\"Failed to open log file\");\n        exit(EXIT_FAILURE);\n    }\n    fprintf(log_fp, \"File changed: %s\\n\", filename);\n    fclose(log_fp);\n}\n\nint main() {\n    struct dirent *entry;\n    DIR *dir = opendir(DIRECTORY_PATH);\n    if (dir == NULL) {\n        perror(\"Failed to open directory\");\n        return EXIT_FAILURE;\n    }\n\n    time_t last_modified[256] = {0};\n    char filenames[256][256];\n    int file_count = 0;\n\n    while (1) {\n        rewinddir(dir);\n        while ((entry = readdir(dir)) != NULL) {\n            if (entry->d_type == DT_REG) {\n                char filepath[512];\n                snprintf(filepath, sizeof(filepath), \"%s%s\", DIRECTORY_PATH, entry->d_name);\n\n                int found = 0;\n                for (int i = 0; i < file_count; ++i) {\n                    if (strcmp(filenames[i], filepath) == 0) {\n                        found = 1;\n                        if (has_file_changed(filepath, &last_modified[i])) {\n                            log_change(filepath);\n                        }\n                        break;\n                    }\n                }\n\n                if (!found) {\n                    strcpy(filenames[file_count], filepath);\n                    if (has_file_changed(filepath, &last_modified[file_count])) {\n                        log_change(filepath);\n                    }\n                    file_count++;\n                }\n            }\n        }\n        sleep(1);\n    }\n\n    closedir(dir);\n    return 0;\n}\n```"
  }
]