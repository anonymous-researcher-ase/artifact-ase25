[
  {
    "task": "Write a program that reads a user's name and age from the input, then prints a greeting message using both values.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    char name[50];\n    int age;\n\n    printf(\"Enter your name: \");\n    scanf(\"%s\", name);\n    \n    printf(\"Enter your age: \");\n    scanf(\"%d\", &age);\n    \n    printf(\"Hello, %s! You are %d years old.\\n\", name, age);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a script that continuously reads numbers from the input and prints their running total until a negative number is entered.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int number;\n    int total = 0;\n\n    while (1) {\n        printf(\"Enter a number: \");\n        scanf(\"%d\", &number);\n\n        if (number < 0) {\n            break;\n        }\n\n        total += number;\n        printf(\"Running total: %d\\n\", total);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a program that asks the user for a sentence and outputs the number of words it contains.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint countWords(const char *sentence) {\n    int count = 0;\n    int inWord = 0;\n\n    while (*sentence) {\n        if (isspace(*sentence)) {\n            inWord = 0;\n        } else if (!inWord) {\n            inWord = 1;\n            count++;\n        }\n        sentence++;\n    }\n    return count;\n}\n\nint main() {\n    char sentence[1024];\n\n    printf(\"Enter a sentence: \");\n    if (fgets(sentence, sizeof(sentence), stdin) != NULL) {\n        int wordCount = countWords(sentence);\n        printf(\"The sentence contains %d words.\\n\", wordCount);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Build a command-line tool that reads a list of integers and outputs them in sorted order.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\nint compare(const void *a, const void *b) {\n    return (*(int *)a - *(int *)b);\n}\n\nint main() {\n    int numbers[100];\n    int count = 0;\n    int num;\n\n    printf(\"Enter integers separated by spaces (end with EOF):\\n\");\n\n    while (scanf(\"%d\", &num) == 1) {\n        if (count < 100) {\n            numbers[count++] = num;\n        }\n    }\n\n    qsort(numbers, count, sizeof(int), compare);\n\n    printf(\"Sorted integers:\\n\");\n    for (int i = 0; i < count; i++) {\n        printf(\"%d \", numbers[i]);\n    }\n    printf(\"\\n\");\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a program that reads a file name from the input, then prints the number of lines in that file.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    char filename[256];\n    printf(\"Enter the filename: \");\n    scanf(\"%255s\", filename);\n\n    FILE *file = fopen(filename, \"r\");\n    if (!file) {\n        printf(\"Error opening file.\\n\");\n        return 1;\n    }\n\n    int lines = 0;\n    char ch;\n    while ((ch = fgetc(file)) != EOF) {\n        if (ch == '\\n') {\n            lines++;\n        }\n    }\n\n    fclose(file);\n    printf(\"Number of lines: %d\\n\", lines);\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a calculator that reads two numbers and an operator (+, -, *, /) from the input and prints the result.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    double num1, num2, result;\n    char operator;\n\n    printf(\"Enter first number: \");\n    scanf(\"%lf\", &num1);\n    printf(\"Enter an operator (+, -, *, /): \");\n    scanf(\" %c\", &operator);\n    printf(\"Enter second number: \");\n    scanf(\"%lf\", &num2);\n\n    switch (operator) {\n        case '+':\n            result = num1 + num2;\n            break;\n        case '-':\n            result = num1 - num2;\n            break;\n        case '*':\n            result = num1 * num2;\n            break;\n        case '/':\n            if (num2 != 0)\n                result = num1 / num2;\n            else {\n                printf(\"Error: Division by zero.\\n\");\n                return 1;\n            }\n            break;\n        default:\n            printf(\"Error: Invalid operator.\\n\");\n            return 1;\n    }\n\n    printf(\"Result: %lf\\n\", result);\n    return 0;\n}\n```"
  },
  {
    "task": "Write a script that reads a user's full name and prints it in reverse order.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nint main() {\n    char fullName[100];\n\n    printf(\"Enter your full name: \");\n    fgets(fullName, sizeof(fullName), stdin);\n\n    // Remove newline character if present\n    size_t len = strlen(fullName);\n    if (len > 0 && fullName[len - 1] == '\\n') {\n        fullName[len - 1] = '\\0';\n    }\n\n    // Print the name in reverse order\n    for (int i = len - 1; i >= 0; i--) {\n        putchar(fullName[i]);\n    }\n    putchar('\\n');\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a program that asks for a word and checks if it is a palindrome, printing the appropriate message.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nint main() {\n    char word[100];\n    int length, i, palindrome = 1;\n\n    printf(\"Enter a word: \");\n    scanf(\"%99s\", word);\n\n    length = strlen(word);\n\n    for (i = 0; i < length / 2; i++) {\n        if (word[i] != word[length - i - 1]) {\n            palindrome = 0;\n            break;\n        }\n    }\n\n    if (palindrome) {\n        printf(\"The word is a palindrome.\\n\");\n    } else {\n        printf(\"The word is not a palindrome.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a tool that reads multiple lines of text and outputs the longest line.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n#define MAX_LINE 1024\n\nint main() {\n    char line[MAX_LINE];\n    char longest[MAX_LINE] = \"\";\n    size_t longest_len = 0;\n\n    while (fgets(line, sizeof(line), stdin)) {\n        size_t len = strlen(line);\n        if (line[len - 1] == '\\n') {\n            line[len - 1] = '\\0';\n            len--;\n        }\n        if (len > longest_len) {\n            strcpy(longest, line);\n            longest_len = len;\n        }\n    }\n\n    if (longest_len > 0) {\n        printf(\"%s\\n\", longest);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a script that reads a number 'n' and prints the first 'n' Fibonacci numbers.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int n;\n    printf(\"Enter the number of Fibonacci numbers to print: \");\n    scanf(\"%d\", &n);\n\n    unsigned long long first = 0, second = 1, next;\n\n    for (int i = 0; i < n; i++) {\n        if (i <= 1) {\n            next = i;\n        } else {\n            next = first + second;\n            first = second;\n            second = next;\n        }\n        printf(\"%llu\\n\", next);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program that takes a list of numbers from the input and prints only the even ones.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int number;\n    \n    printf(\"Enter numbers (end with a non-numeric input):\\n\");\n    while (scanf(\"%d\", &number) == 1) {\n        if (number % 2 == 0) {\n            printf(\"%d\\n\", number);\n        }\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Create a script that reads a date (day, month, year) and prints the day of the week for that date.",
    "code": "```c\n#include <stdio.h>\n#include <time.h>\n\nint main() {\n    int day, month, year;\n    printf(\"Enter date (day month year): \");\n    scanf(\"%d %d %d\", &day, &month, &year);\n\n    struct tm time_info = {0};\n    time_info.tm_mday = day;\n    time_info.tm_mon = month - 1;\n    time_info.tm_year = year - 1900;\n\n    if (mktime(&time_info) != -1) {\n        char buffer[10];\n        strftime(buffer, sizeof(buffer), \"%A\", &time_info);\n        printf(\"Day of the week: %s\\n\", buffer);\n    } else {\n        printf(\"Invalid date\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a program that reads a paragraph and counts the frequency of each letter in the text.",
    "code": "```c\n#include <stdio.h>\n#include <ctype.h>\n\nint main() {\n    int frequency[26] = {0};\n    char ch;\n\n    printf(\"Enter a paragraph (end with EOF):\\n\");\n    while ((ch = getchar()) != EOF) {\n        if (isalpha(ch)) {\n            ch = tolower(ch);\n            frequency[ch - 'a']++;\n        }\n    }\n\n    printf(\"\\nLetter Frequency:\\n\");\n    for (int i = 0; i < 26; i++) {\n        printf(\"%c: %d\\n\", i + 'a', frequency[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Build a tool that reads a text and a word, then prints the number of times the word appears in the text.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nint main() {\n    char text[1000], word[100];\n    int count = 0;\n    \n    printf(\"Enter the text: \");\n    fgets(text, sizeof(text), stdin);\n    \n    printf(\"Enter the word: \");\n    fgets(word, sizeof(word), stdin);\n\n    // Remove newline character from the word\n    word[strcspn(word, \"\\n\")] = '\\0';\n\n    char *pos = text;\n    while ((pos = strstr(pos, word)) != NULL) {\n        count++;\n        pos += strlen(word);\n    }\n\n    printf(\"The word '%s' appears %d times in the text.\\n\", word, count);\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Implement a script that reads a temperature in Celsius and converts it to Fahrenheit, printing the result.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    float celsius, fahrenheit;\n    \n    printf(\"Enter temperature in Celsius: \");\n    scanf(\"%f\", &celsius);\n\n    fahrenheit = (celsius * 9 / 5) + 32;\n\n    printf(\"Temperature in Fahrenheit: %.2f\\n\", fahrenheit);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program that continuously reads input until the word 'exit' is entered, then prints all entered inputs.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nint main() {\n    char input[100];\n    char inputs[1000] = \"\";\n\n    while (1) {\n        printf(\"Enter input (type 'exit' to quit): \");\n        fgets(input, sizeof(input), stdin);\n        input[strcspn(input, \"\\n\")] = '\\0';  // Remove newline character\n\n        if (strcmp(input, \"exit\") == 0) {\n            break;\n        }\n\n        strcat(inputs, input);\n        strcat(inputs, \"\\n\");\n    }\n\n    printf(\"\\nEntered inputs:\\n%s\", inputs);\n    return 0;\n}\n```"
  },
  {
    "task": "Create a tool that prompts for a filename, reads the file, and prints its content in uppercase.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <ctype.h>\n\nvoid to_uppercase_and_print(FILE *file) {\n    int c;\n    while ((c = fgetc(file)) != EOF) {\n        putchar(toupper(c));\n    }\n}\n\nint main() {\n    char filename[256];\n    FILE *file;\n\n    printf(\"Enter the filename: \");\n    if (scanf(\"%255s\", filename) != 1) {\n        fprintf(stderr, \"Error reading filename.\\n\");\n        return 1;\n    }\n\n    file = fopen(filename, \"r\");\n    if (file == NULL) {\n        perror(\"Error opening file\");\n        return 1;\n    }\n\n    to_uppercase_and_print(file);\n    \n    fclose(file);\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a program that reads a series of email addresses and prints the unique domain names.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MAX_EMAIL_LENGTH 256\n#define MAX_DOMAINS 100\n\nint main() {\n    char email[MAX_EMAIL_LENGTH];\n    char *domains[MAX_DOMAINS];\n    int domain_count = 0;\n\n    while (1) {\n        printf(\"Enter email address (or 'exit' to quit): \");\n        if (fgets(email, MAX_EMAIL_LENGTH, stdin) == NULL) {\n            break;\n        }\n\n        // Remove newline character\n        email[strcspn(email, \"\\n\")] = '\\0';\n\n        if (strcmp(email, \"exit\") == 0) {\n            break;\n        }\n\n        char *at_sign = strchr(email, '@');\n        if (at_sign == NULL) {\n            printf(\"Invalid email address. No '@' found.\\n\");\n            continue;\n        }\n\n        char *domain = at_sign + 1;\n        int is_unique = 1;\n\n        for (int i = 0; i < domain_count; i++) {\n            if (strcmp(domains[i], domain) == 0) {\n                is_unique = 0;\n                break;\n            }\n        }\n\n        if (is_unique && domain_count < MAX_DOMAINS) {\n            domains[domain_count] = strdup(domain);\n            domain_count++;\n        }\n    }\n\n    printf(\"\\nUnique domain names:\\n\");\n    for (int i = 0; i < domain_count; i++) {\n        printf(\"%s\\n\", domains[i]);\n        free(domains[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a script that reads a string and prints whether it contains all the letters of the alphabet.",
    "code": "```c\n#include <stdio.h>\n#include <ctype.h>\n#include <string.h>\n\nint containsAllLetters(const char *str) {\n    int alphabet[26] = {0};\n    for (int i = 0; str[i] != '\\0'; i++) {\n        if (isalpha(str[i])) {\n            alphabet[tolower(str[i]) - 'a'] = 1;\n        }\n    }\n    for (int i = 0; i < 26; i++) {\n        if (alphabet[i] == 0) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    char input[1000];\n    printf(\"Enter a string: \");\n    if (fgets(input, sizeof(input), stdin) != NULL) {\n        if (containsAllLetters(input)) {\n            printf(\"The string contains all the letters of the alphabet.\\n\");\n        } else {\n            printf(\"The string does not contain all the letters of the alphabet.\\n\");\n        }\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program that reads a number and prints its factorial.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int n, i;\n    unsigned long long factorial = 1;\n\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &n);\n\n    if (n < 0)\n        printf(\"Factorial of a negative number doesn't exist.\\n\");\n    else {\n        for (i = 1; i <= n; ++i) {\n            factorial *= i;\n        }\n        printf(\"Factorial of %d is %llu\\n\", n, factorial);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a tool that reads a list of names and prints them in alphabetical order.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MAX_NAMES 100\n#define MAX_LENGTH 100\n\nint compare(const void *a, const void *b) {\n    return strcmp(*(const char **)a, *(const char **)b);\n}\n\nint main() {\n    char *names[MAX_NAMES];\n    char buffer[MAX_LENGTH];\n    int count = 0;\n\n    printf(\"Enter names (one per line, end with an empty line):\\n\");\n\n    while (fgets(buffer, MAX_LENGTH, stdin)) {\n        if (buffer[0] == '\\n') break;\n        names[count] = malloc(strlen(buffer) + 1);\n        strcpy(names[count], buffer);\n        names[count][strcspn(names[count], \"\\n\")] = '\\0'; // Remove newline\n        count++;\n        if (count >= MAX_NAMES) break;\n    }\n\n    qsort(names, count, sizeof(char *), compare);\n\n    printf(\"\\nNames in alphabetical order:\\n\");\n    for (int i = 0; i < count; i++) {\n        printf(\"%s\\n\", names[i]);\n        free(names[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a program that asks for a sentence and prints each word on a new line.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nint main() {\n    char sentence[256];\n    printf(\"Enter a sentence: \");\n    fgets(sentence, sizeof(sentence), stdin);\n\n    char *word = strtok(sentence, \" \\n\");\n    while (word != NULL) {\n        printf(\"%s\\n\", word);\n        word = strtok(NULL, \" \\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Build a script that reads a time in 12-hour format and converts it to 24-hour format.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nint main() {\n    char time12[10];\n    int hour, minute;\n    char period[3];\n\n    printf(\"Enter time in 12-hour format (hh:mm AM/PM): \");\n    scanf(\"%d:%d %2s\", &hour, &minute, period);\n\n    if (strcmp(period, \"PM\") == 0 && hour != 12) {\n        hour += 12;\n    }\n    if (strcmp(period, \"AM\") == 0 && hour == 12) {\n        hour = 0;\n    }\n\n    printf(\"Time in 24-hour format: %02d:%02d\\n\", hour, minute);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a program that reads two strings and checks if they are anagrams, printing the result.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_LENGTH 100\n\nint areAnagrams(char *str1, char *str2) {\n    int count[256] = {0};\n    int i;\n    \n    for (i = 0; str1[i] && str2[i]; i++) {\n        count[(unsigned char)tolower(str1[i])]++;\n        count[(unsigned char)tolower(str2[i])]--;\n    }\n    \n    if (str1[i] || str2[i])\n        return 0;\n    \n    for (i = 0; i < 256; i++)\n        if (count[i])\n            return 0;\n    \n    return 1;\n}\n\nint main() {\n    char str1[MAX_LENGTH], str2[MAX_LENGTH];\n    \n    printf(\"Enter the first string: \");\n    if (!fgets(str1, MAX_LENGTH, stdin)) {\n        return 1;\n    }\n    \n    printf(\"Enter the second string: \");\n    if (!fgets(str2, MAX_LENGTH, stdin)) {\n        return 1;\n    }\n    \n    // Remove newline characters if present\n    size_t len1 = strlen(str1);\n    if (len1 > 0 && str1[len1 - 1] == '\\n') {\n        str1[len1 - 1] = '\\0';\n    }\n    \n    size_t len2 = strlen(str2);\n    if (len2 > 0 && str2[len2 - 1] == '\\n') {\n        str2[len2 - 1] = '\\0';\n    }\n    \n    if (areAnagrams(str1, str2))\n        printf(\"The strings are anagrams.\\n\");\n    else\n        printf(\"The strings are not anagrams.\\n\");\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Write a tool that reads a paragraph and prints the first and last sentence.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n#define MAX_PARAGRAPH_LENGTH 1000\n\nint main() {\n    char paragraph[MAX_PARAGRAPH_LENGTH];\n    char firstSentence[MAX_PARAGRAPH_LENGTH] = \"\";\n    char lastSentence[MAX_PARAGRAPH_LENGTH] = \"\";\n    int firstSentenceEnd = 0;\n    int lastSentenceStart = 0;\n\n    // Read paragraph from standard input\n    printf(\"Enter a paragraph: \");\n    fgets(paragraph, MAX_PARAGRAPH_LENGTH, stdin);\n\n    // Find the first sentence\n    for (int i = 0; paragraph[i] != '\\0'; i++) {\n        if (paragraph[i] == '.' || paragraph[i] == '?' || paragraph[i] == '!') {\n            firstSentenceEnd = i + 1;\n            break;\n        }\n    }\n    strncpy(firstSentence, paragraph, firstSentenceEnd);\n\n    // Find the last sentence\n    for (int i = strlen(paragraph) - 1; i >= 0; i--) {\n        if (paragraph[i] == '.' || paragraph[i] == '?' || paragraph[i] == '!') {\n            lastSentenceStart = i;\n            while (lastSentenceStart > 0 && paragraph[lastSentenceStart - 1] != '.' && paragraph[lastSentenceStart - 1] != '?' && paragraph[lastSentenceStart - 1] != '!') {\n                lastSentenceStart--;\n            }\n            break;\n        }\n    }\n    strcpy(lastSentence, &paragraph[lastSentenceStart]);\n\n    // Print the first and last sentences\n    printf(\"First sentence: %s\\n\", firstSentence);\n    printf(\"Last sentence: %s\\n\", lastSentence);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a program that reads a binary number and converts it to decimal.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nint binaryToDecimal(const char *binary) {\n    int decimal = 0;\n    int base = 1;\n    int len = strlen(binary);\n    for (int i = len - 1; i >= 0; i--) {\n        if (binary[i] == '1') {\n            decimal += base;\n        }\n        base *= 2;\n    }\n    return decimal;\n}\n\nint main() {\n    char binary[65];\n    printf(\"Enter a binary number: \");\n    scanf(\"%64s\", binary);\n    int decimal = binaryToDecimal(binary);\n    printf(\"Decimal: %d\\n\", decimal);\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a script that reads a series of scores and prints the average score.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int score, count = 0;\n    double sum = 0.0, average;\n    \n    printf(\"Enter scores (negative number to end):\\n\");\n    while (1) {\n        scanf(\"%d\", &score);\n        if (score < 0) {\n            break;\n        }\n        sum += score;\n        count++;\n    }\n    \n    if (count > 0) {\n        average = sum / count;\n        printf(\"Average score: %.2f\\n\", average);\n    } else {\n        printf(\"No scores entered.\\n\");\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Design a program that reads a list of integers and prints the prime numbers.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n\nbool is_prime(int num) {\n    if (num <= 1) return false;\n    for (int i = 2; i * i <= num; i++) {\n        if (num % i == 0) return false;\n    }\n    return true;\n}\n\nint main() {\n    int n;\n    printf(\"Enter number of integers: \");\n    scanf(\"%d\", &n);\n    \n    int *numbers = (int *)malloc(n * sizeof(int));\n    printf(\"Enter the integers:\\n\");\n    for (int i = 0; i < n; i++) {\n        scanf(\"%d\", &numbers[i]);\n    }\n    \n    printf(\"Prime numbers are:\\n\");\n    for (int i = 0; i < n; i++) {\n        if (is_prime(numbers[i])) {\n            printf(\"%d \", numbers[i]);\n        }\n    }\n    \n    free(numbers);\n    return 0;\n}\n```"
  },
  {
    "task": "Write a script that reads a word and prints its Pig Latin translation.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nvoid toPigLatin(char *word, char *output) {\n    int len = strlen(word);\n    if (len == 0) {\n        output[0] = '\\0';\n        return;\n    }\n\n    if (strchr(\"aeiouAEIOU\", word[0]) != NULL) {\n        sprintf(output, \"%say\", word);\n    } else {\n        sprintf(output, \"%s%cay\", word + 1, tolower(word[0]));\n    }\n}\n\nint main() {\n    char word[100];\n    char pigLatin[103]; // Account for added 'ay' and possible extra letter\n\n    printf(\"Enter a word: \");\n    if (scanf(\"%99s\", word) == 1) {\n        toPigLatin(word, pigLatin);\n        printf(\"Pig Latin: %s\\n\", pigLatin);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a tool that reads a matrix of numbers and prints its transpose.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int rows, cols;\n    printf(\"Enter number of rows and columns: \");\n    scanf(\"%d %d\", &rows, &cols);\n\n    int matrix[rows][cols];\n    printf(\"Enter the matrix elements:\\n\");\n    for (int i = 0; i < rows; i++) {\n        for (int j = 0; j < cols; j++) {\n            scanf(\"%d\", &matrix[i][j]);\n        }\n    }\n\n    printf(\"Transpose of the matrix:\\n\");\n    for (int i = 0; i < cols; i++) {\n        for (int j = 0; j < rows; j++) {\n            printf(\"%d \", matrix[j][i]);\n        }\n        printf(\"\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a program that reads a URL and prints the domain name.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nint main() {\n    char url[256];\n    printf(\"Enter a URL: \");\n    scanf(\"%255s\", url);\n\n    char *start = strstr(url, \"://\");\n    if (start != NULL) {\n        start += 3;\n    } else {\n        start = url;\n    }\n\n    char *end = strchr(start, '/');\n    if (end != NULL) {\n        *end = '\\0';\n    }\n\n    printf(\"Domain name: %s\\n\", start);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a script that reads a number and prints its multiplication table up to 12.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int number, i;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &number);\n\n    for (i = 1; i <= 12; i++) {\n        printf(\"%d x %d = %d\\n\", number, i, number * i);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a program that reads a list of dates and prints them in order of occurrence.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MAX_DATES 100\n#define MAX_DATE_LENGTH 11\n\nint compare_dates(const void *a, const void *b) {\n    return strcmp(*(const char **)a, *(const char **)b);\n}\n\nint main() {\n    char dates[MAX_DATES][MAX_DATE_LENGTH];\n    int count = 0;\n\n    printf(\"Enter dates in YYYY-MM-DD format (one per line), end with EOF (Ctrl+D):\\n\");\n    while (count < MAX_DATES && scanf(\"%10s\", dates[count]) == 1) {\n        count++;\n    }\n\n    qsort(dates, count, sizeof(dates[0]), compare_dates);\n\n    printf(\"Dates in order of occurrence:\\n\");\n    for (int i = 0; i < count; i++) {\n        printf(\"%s\\n\", dates[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a tool that reads a text and prints it with each sentence capitalized.",
    "code": "```c\n#include <stdio.h>\n#include <ctype.h>\n\nvoid capitalize_sentences(char *text) {\n    int capitalize = 1;\n    for (char *p = text; *p; p++) {\n        if (capitalize && isalpha(*p)) {\n            *p = toupper(*p);\n            capitalize = 0;\n        }\n        if (*p == '.' || *p == '!' || *p == '?') {\n            capitalize = 1;\n        }\n    }\n}\n\nint main() {\n    char text[1024];\n    printf(\"Enter text: \");\n    if (fgets(text, sizeof(text), stdin) != NULL) {\n        capitalize_sentences(text);\n        printf(\"%s\", text);\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Design a program that reads a list of words and prints them in reverse alphabetical order.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint compare(const void *a, const void *b) {\n    return strcmp(*(const char **)b, *(const char **)a);\n}\n\nint main() {\n    char *words[100];\n    char buffer[100];\n    int count = 0;\n\n    printf(\"Enter words (type 'done' to finish):\\n\");\n    while (1) {\n        scanf(\"%99s\", buffer);\n        if (strcmp(buffer, \"done\") == 0) {\n            break;\n        }\n        words[count] = malloc(strlen(buffer) + 1);\n        strcpy(words[count], buffer);\n        count++;\n    }\n\n    qsort(words, count, sizeof(char *), compare);\n\n    printf(\"Words in reverse alphabetical order:\\n\");\n    for (int i = 0; i < count; i++) {\n        printf(\"%s\\n\", words[i]);\n        free(words[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a script that asks for two times and prints the difference in minutes.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    int hour1, minute1, hour2, minute2;\n    int totalMinutes1, totalMinutes2, difference;\n\n    printf(\"Enter first time (HH MM): \");\n    scanf(\"%d %d\", &hour1, &minute1);\n\n    printf(\"Enter second time (HH MM): \");\n    scanf(\"%d %d\", &hour2, &minute2);\n\n    totalMinutes1 = hour1 * 60 + minute1;\n    totalMinutes2 = hour2 * 60 + minute2;\n\n    difference = abs(totalMinutes2 - totalMinutes1);\n\n    printf(\"Difference in minutes: %d\\n\", difference);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Build a program that reads a text and prints the number of vowels and consonants.",
    "code": "```c\n#include <stdio.h>\n#include <ctype.h>\n\nint main() {\n    char ch;\n    int vowels = 0, consonants = 0;\n\n    printf(\"Enter a text (end with EOF):\\n\");\n    while ((ch = getchar()) != EOF) {\n        ch = tolower(ch);\n        if (ch >= 'a' && ch <= 'z') {\n            if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u')\n                vowels++;\n            else\n                consonants++;\n        }\n    }\n\n    printf(\"Vowels: %d\\n\", vowels);\n    printf(\"Consonants: %d\\n\", consonants);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a tool that reads a JSON object from input and prints its keys.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <jansson.h>\n\nint main() {\n    char buffer[4096];\n    if (fgets(buffer, sizeof(buffer), stdin) == NULL) {\n        fprintf(stderr, \"Error reading input\\n\");\n        return 1;\n    }\n\n    json_error_t error;\n    json_t *root = json_loads(buffer, 0, &error);\n    if (!root) {\n        fprintf(stderr, \"Error parsing JSON: %s\\n\", error.text);\n        return 1;\n    }\n\n    const char *key;\n    json_t *value;\n    json_object_foreach(root, key, value) {\n        printf(\"%s\\n\", key);\n    }\n\n    json_decref(root);\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program that reads a CSV file from input and prints each row as a dictionary.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MAX_LINE_LENGTH 1024\n#define MAX_COLUMNS 100\n\nint main() {\n    char line[MAX_LINE_LENGTH];\n    char *headers[MAX_COLUMNS];\n    char *values[MAX_COLUMNS];\n    int columnCount = 0;\n\n    if (fgets(line, sizeof(line), stdin)) {\n        char *token = strtok(line, \",\");\n        while (token != NULL && columnCount < MAX_COLUMNS) {\n            headers[columnCount++] = strdup(token);\n            token = strtok(NULL, \",\");\n        }\n    }\n\n    while (fgets(line, sizeof(line), stdin)) {\n        int valueCount = 0;\n        char *token = strtok(line, \",\");\n        while (token != NULL && valueCount < columnCount) {\n            values[valueCount++] = strdup(token);\n            token = strtok(NULL, \",\");\n        }\n\n        printf(\"{\");\n        for (int i = 0; i < valueCount; i++) {\n            printf(\"\\\"%s\\\": \\\"%s\\\"\", headers[i], values[i]);\n            if (i < valueCount - 1) {\n                printf(\", \");\n            }\n        }\n        printf(\"}\\n\");\n\n        for (int i = 0; i < valueCount; i++) {\n            free(values[i]);\n        }\n    }\n\n    for (int i = 0; i < columnCount; i++) {\n        free(headers[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a script that reads a sentence and prints it with the words in reverse order.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n#define MAX_LENGTH 1000\n\nvoid reverseWords(char *sentence) {\n    char *words[MAX_LENGTH];\n    int count = 0;\n    char *token = strtok(sentence, \" \");\n    \n    while (token != NULL) {\n        words[count++] = token;\n        token = strtok(NULL, \" \");\n    }\n    \n    for (int i = count - 1; i >= 0; i--) {\n        printf(\"%s\", words[i]);\n        if (i > 0) {\n            printf(\" \");\n        }\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    char sentence[MAX_LENGTH];\n    \n    printf(\"Enter a sentence: \");\n    fgets(sentence, MAX_LENGTH, stdin);\n    \n    // Remove newline character from the end if it exists\n    size_t length = strlen(sentence);\n    if (length > 0 && sentence[length - 1] == '\\n') {\n        sentence[length - 1] = '\\0';\n    }\n    \n    reverseWords(sentence);\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Develop a tool that reads a list of numbers and prints their median.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\nint compare(const void *a, const void *b) {\n    return (*(int *)a - *(int *)b);\n}\n\ndouble find_median(int *numbers, int size) {\n    qsort(numbers, size, sizeof(int), compare);\n    if (size % 2 == 0) {\n        return (numbers[size / 2 - 1] + numbers[size / 2]) / 2.0;\n    } else {\n        return numbers[size / 2];\n    }\n}\n\nint main() {\n    int size;\n    printf(\"Enter the number of elements: \");\n    scanf(\"%d\", &size);\n\n    int *numbers = (int *)malloc(size * sizeof(int));\n    if (numbers == NULL) {\n        fprintf(stderr, \"Memory allocation failed\\n\");\n        return 1;\n    }\n\n    printf(\"Enter the numbers: \");\n    for (int i = 0; i < size; i++) {\n        scanf(\"%d\", &numbers[i]);\n    }\n\n    double median = find_median(numbers, size);\n    printf(\"The median is: %.2f\\n\", median);\n\n    free(numbers);\n    return 0;\n}\n```"
  },
  {
    "task": "Design a program that reads a sequence of characters and prints the first non-repeated character.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nint main() {\n    char str[1000];\n    int count[256] = {0};\n    printf(\"Enter a sequence of characters: \");\n    fgets(str, sizeof(str), stdin);\n\n    for (int i = 0; str[i] != '\\0'; i++) {\n        count[(unsigned char)str[i]]++;\n    }\n\n    for (int i = 0; str[i] != '\\0'; i++) {\n        if (count[(unsigned char)str[i]] == 1) {\n            printf(\"The first non-repeated character is: %c\\n\", str[i]);\n            return 0;\n        }\n    }\n\n    printf(\"No non-repeated character found.\\n\");\n    return 0;\n}\n```"
  },
  {
    "task": "Write a script that reads a list of tuples and prints them sorted by the second element.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int first;\n    int second;\n} Tuple;\n\nint compare(const void *a, const void *b) {\n    return ((Tuple *)a)->second - ((Tuple *)b)->second;\n}\n\nint main() {\n    int n;\n    printf(\"Enter number of tuples: \");\n    scanf(\"%d\", &n);\n\n    Tuple *tuples = malloc(n * sizeof(Tuple));\n    if (tuples == NULL) {\n        fprintf(stderr, \"Memory allocation failed\\n\");\n        return 1;\n    }\n\n    printf(\"Enter the tuples (first second):\\n\");\n    for (int i = 0; i < n; i++) {\n        scanf(\"%d %d\", &tuples[i].first, &tuples[i].second);\n    }\n\n    qsort(tuples, n, sizeof(Tuple), compare);\n\n    printf(\"Sorted tuples by second element:\\n\");\n    for (int i = 0; i < n; i++) {\n        printf(\"(%d, %d)\\n\", tuples[i].first, tuples[i].second);\n    }\n\n    free(tuples);\n    return 0;\n}\n```"
  },
  {
    "task": "Create a program that reads a list of cities and prints them grouped by their starting letter.",
    "code": "```c\n#include <stdio.h>\n#include <ctype.h>\n#include <string.h>\n\n#define MAX_CITIES 100\n#define MAX_NAME_LENGTH 100\n\nint main() {\n    char cities[MAX_CITIES][MAX_NAME_LENGTH];\n    int count = 0;\n    char input[MAX_NAME_LENGTH];\n\n    printf(\"Enter city names (type 'END' to finish):\\n\");\n    while (count < MAX_CITIES) {\n        fgets(input, MAX_NAME_LENGTH, stdin);\n        input[strcspn(input, \"\\n\")] = 0; // Remove trailing newline\n        if (strcmp(input, \"END\") == 0) {\n            break;\n        }\n        strcpy(cities[count], input);\n        count++;\n    }\n\n    for (char letter = 'A'; letter <= 'Z'; letter++) {\n        int found = 0;\n        for (int i = 0; i < count; i++) {\n            if (toupper(cities[i][0]) == letter) {\n                if (!found) {\n                    printf(\"\\nCities starting with '%c':\\n\", letter);\n                    found = 1;\n                }\n                printf(\"%s\\n\", cities[i]);\n            }\n        }\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Build a tool that reads a text and prints the longest word.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n#define MAX_WORD_LENGTH 100\n\nint main() {\n    char text[1000];\n    char word[MAX_WORD_LENGTH];\n    char longestWord[MAX_WORD_LENGTH] = \"\";\n    int maxLength = 0;\n\n    printf(\"Enter text: \");\n    fgets(text, sizeof(text), stdin);\n\n    char *token = strtok(text, \" \\n\");\n    while (token != NULL) {\n        if (strlen(token) > maxLength) {\n            maxLength = strlen(token);\n            strcpy(longestWord, token);\n        }\n        token = strtok(NULL, \" \\n\");\n    }\n\n    printf(\"Longest word: %s\\n\", longestWord);\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a program that reads a string and prints the number of unique characters.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nint main() {\n    char input[1000];\n    bool seen[256] = {0};\n    int uniqueCount = 0;\n    \n    printf(\"Enter a string: \");\n    fgets(input, sizeof(input), stdin);\n    \n    for (int i = 0; input[i] != '\\0'; i++) {\n        if (!seen[(unsigned char)input[i]]) {\n            seen[(unsigned char)input[i]] = true;\n            uniqueCount++;\n        }\n    }\n    \n    printf(\"Number of unique characters: %d\\n\", uniqueCount);\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Write a script that reads two strings and prints the longest common substring.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nvoid longestCommonSubstring(char *str1, char *str2) {\n    int len1 = strlen(str1);\n    int len2 = strlen(str2);\n    int maxLen = 0;\n    int endIndex = 0;\n    int table[len1 + 1][len2 + 1];\n\n    for (int i = 0; i <= len1; i++) {\n        for (int j = 0; j <= len2; j++) {\n            if (i == 0 || j == 0) {\n                table[i][j] = 0;\n            } else if (str1[i - 1] == str2[j - 1]) {\n                table[i][j] = table[i - 1][j - 1] + 1;\n                if (table[i][j] > maxLen) {\n                    maxLen = table[i][j];\n                    endIndex = i - 1;\n                }\n            } else {\n                table[i][j] = 0;\n            }\n        }\n    }\n\n    if (maxLen > 0) {\n        char result[maxLen + 1];\n        strncpy(result, str1 + endIndex - maxLen + 1, maxLen);\n        result[maxLen] = '\\0';\n        printf(\"%s\\n\", result);\n    } else {\n        printf(\"\\n\");\n    }\n}\n\nint main() {\n    char str1[1000], str2[1000];\n\n    printf(\"Enter first string: \");\n    fgets(str1, sizeof(str1), stdin);\n    str1[strcspn(str1, \"\\n\")] = '\\0';\n\n    printf(\"Enter second string: \");\n    fgets(str2, sizeof(str2), stdin);\n    str2[strcspn(str2, \"\\n\")] = '\\0';\n\n    longestCommonSubstring(str1, str2);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a program that reads a chessboard position and prints all possible moves for a knight.",
    "code": "```c\n#include <stdio.h>\n#include <stdbool.h>\n\n#define BOARD_SIZE 8\n\nbool is_valid(int x, int y) {\n    return x >= 0 && x < BOARD_SIZE && y >= 0 && y < BOARD_SIZE;\n}\n\nvoid print_knight_moves(int x, int y) {\n    int moves[8][2] = {\n        {2, 1}, {2, -1}, {-2, 1}, {-2, -1},\n        {1, 2}, {1, -2}, {-1, 2}, {-1, -2}\n    };\n\n    printf(\"Possible moves for knight at (%d, %d):\\n\", x, y);\n    for (int i = 0; i < 8; ++i) {\n        int newX = x + moves[i][0];\n        int newY = y + moves[i][1];\n        if (is_valid(newX, newY)) {\n            printf(\"(%d, %d)\\n\", newX, newY);\n        }\n    }\n}\n\nint main() {\n    int x, y;\n    printf(\"Enter knight's current position (x y): \");\n    scanf(\"%d %d\", &x, &y);\n    if (!is_valid(x, y)) {\n        printf(\"Invalid position.\\n\");\n        return 1;\n    }\n    print_knight_moves(x, y);\n    return 0;\n}\n```"
  },
  {
    "task": "Create a tool that reads a list of numbers and prints the mode.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\nint findMode(int numbers[], int n) {\n    int maxCount = 0, mode = numbers[0];\n    for (int i = 0; i < n; i++) {\n        int count = 0;\n        for (int j = 0; j < n; j++) {\n            if (numbers[j] == numbers[i]) {\n                count++;\n            }\n        }\n        if (count > maxCount) {\n            maxCount = count;\n            mode = numbers[i];\n        }\n    }\n    return mode;\n}\n\nint main() {\n    int n;\n    printf(\"Enter the number of elements: \");\n    scanf(\"%d\", &n);\n\n    int *numbers = (int *)malloc(n * sizeof(int));\n    if (numbers == NULL) {\n        printf(\"Memory allocation failed\\n\");\n        return 1;\n    }\n\n    printf(\"Enter the numbers:\\n\");\n    for (int i = 0; i < n; i++) {\n        scanf(\"%d\", &numbers[i]);\n    }\n\n    int mode = findMode(numbers, n);\n    printf(\"The mode is: %d\\n\", mode);\n\n    free(numbers);\n    return 0;\n}\n```"
  },
  {
    "task": "Design a program that reads a list of file paths and prints the largest file.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\n#define MAX_PATH_LENGTH 1024\n\nlong getFileSize(const char *filename) {\n    FILE *file = fopen(filename, \"rb\");\n    if (!file) return -1;\n    fseek(file, 0, SEEK_END);\n    long size = ftell(file);\n    fclose(file);\n    return size;\n}\n\nint main() {\n    char filePath[MAX_PATH_LENGTH];\n    char largestFilePath[MAX_PATH_LENGTH] = \"\";\n    long largestFileSize = -1;\n\n    printf(\"Enter file paths, one per line. Enter 'END' to finish:\\n\");\n    while (1) {\n        if (fgets(filePath, MAX_PATH_LENGTH, stdin) == NULL) break;\n        if (strncmp(filePath, \"END\", 3) == 0) break;\n        \n        filePath[strcspn(filePath, \"\\n\")] = '\\0'; // Remove newline character\n        long fileSize = getFileSize(filePath);\n        if (fileSize > largestFileSize) {\n            largestFileSize = fileSize;\n            strncpy(largestFilePath, filePath, MAX_PATH_LENGTH);\n        }\n    }\n\n    if (largestFileSize == -1) {\n        printf(\"No valid files were provided.\\n\");\n    } else {\n        printf(\"The largest file is: %s\\n\", largestFilePath);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a script that reads a list of prices and prints the total cost with tax.",
    "code": "```c\n#include <stdio.h>\n\n#define TAX_RATE 0.1\n\nint main() {\n    double price, total = 0.0;\n    \n    printf(\"Enter prices (end with a non-numeric input):\\n\");\n    while (scanf(\"%lf\", &price) == 1) {\n        total += price;\n    }\n    \n    double totalWithTax = total * (1 + TAX_RATE);\n    printf(\"Total cost with tax: %.2lf\\n\", totalWithTax);\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Build a program that reads a list of temperatures and prints them in Fahrenheit.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int n, i;\n    float tempC, tempF;\n    \n    printf(\"Enter the number of temperatures to convert: \");\n    scanf(\"%d\", &n);\n    \n    for (i = 0; i < n; i++) {\n        printf(\"Enter temperature in Celsius: \");\n        scanf(\"%f\", &tempC);\n        tempF = (tempC * 9 / 5) + 32;\n        printf(\"Temperature in Fahrenheit: %.2f\\n\", tempF);\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Implement a tool that reads a list of book titles and prints them sorted by length.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MAX_BOOKS 100\n#define MAX_TITLE_LENGTH 256\n\nint compare(const void *a, const void *b) {\n    const char *titleA = *(const char **)a;\n    const char *titleB = *(const char **)b;\n    return strlen(titleA) - strlen(titleB);\n}\n\nint main() {\n    char *titles[MAX_BOOKS];\n    char buffer[MAX_TITLE_LENGTH];\n    int count = 0;\n\n    printf(\"Enter book titles (one per line, blank line to end):\\n\");\n    while(fgets(buffer, sizeof(buffer), stdin) != NULL) {\n        if (buffer[0] == '\\n') break;\n        buffer[strcspn(buffer, \"\\n\")] = '\\0'; // Remove newline character\n        titles[count] = strdup(buffer);\n        count++;\n    }\n\n    qsort(titles, count, sizeof(char *), compare);\n\n    printf(\"\\nSorted book titles by length:\\n\");\n    for(int i = 0; i < count; i++) {\n        printf(\"%s\\n\", titles[i]);\n        free(titles[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program that reads a directory path and prints all file names.",
    "code": "```c\n#include <stdio.h>\n#include <dirent.h>\n\nint main() {\n    char path[256];\n    printf(\"Enter directory path: \");\n    scanf(\"%255s\", path);\n\n    DIR *dir = opendir(path);\n    if (dir == NULL) {\n        perror(\"opendir\");\n        return 1;\n    }\n\n    struct dirent *entry;\n    while ((entry = readdir(dir)) != NULL) {\n        printf(\"%s\\n\", entry->d_name);\n    }\n\n    closedir(dir);\n    return 0;\n}\n```"
  },
  {
    "task": "Create a script that reads a list of URLs and prints those with a secure connection.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n#define MAX_URLS 100\n#define MAX_LENGTH 2048\n\nint main() {\n    char urls[MAX_URLS][MAX_LENGTH];\n    int count = 0;\n    \n    printf(\"Enter URLs (type 'END' to finish):\\n\");\n    while (count < MAX_URLS) {\n        if (fgets(urls[count], MAX_LENGTH, stdin) == NULL) {\n            break;\n        }\n        urls[count][strcspn(urls[count], \"\\n\")] = 0; // Remove newline character\n        if (strcmp(urls[count], \"END\") == 0) {\n            break;\n        }\n        count++;\n    }\n    \n    printf(\"\\nSecure URLs (HTTPS):\\n\");\n    for (int i = 0; i < count; i++) {\n        if (strncmp(urls[i], \"https://\", 8) == 0) {\n            printf(\"%s\\n\", urls[i]);\n        }\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Develop a tool that reads a sequence of numbers and prints if it is strictly increasing.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int current, previous;\n    int isFirstNumber = 1;\n    int isStrictlyIncreasing = 1;\n\n    printf(\"Enter a sequence of numbers (end with a non-numeric input):\\n\");\n    while (scanf(\"%d\", &current) == 1) {\n        if (!isFirstNumber && current <= previous) {\n            isStrictlyIncreasing = 0;\n            break;\n        }\n        previous = current;\n        isFirstNumber = 0;\n    }\n\n    if (isStrictlyIncreasing && !isFirstNumber) {\n        printf(\"The sequence is strictly increasing.\\n\");\n    } else {\n        printf(\"The sequence is not strictly increasing.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a program that reads a list of products and prints them grouped by category.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n#define MAX_PRODUCTS 100\n#define MAX_NAME_LEN 50\n#define MAX_CATEGORY_LEN 50\n\ntypedef struct {\n    char name[MAX_NAME_LEN];\n    char category[MAX_CATEGORY_LEN];\n} Product;\n\nvoid printProductsByCategory(Product products[], int count) {\n    char printedCategories[MAX_PRODUCTS][MAX_CATEGORY_LEN];\n    int printedCount = 0;\n\n    for (int i = 0; i < count; i++) {\n        int categoryAlreadyPrinted = 0;\n        for (int j = 0; j < printedCount; j++) {\n            if (strcmp(products[i].category, printedCategories[j]) == 0) {\n                categoryAlreadyPrinted = 1;\n                break;\n            }\n        }\n        if (!categoryAlreadyPrinted) {\n            printf(\"Category: %s\\n\", products[i].category);\n            for (int k = 0; k < count; k++) {\n                if (strcmp(products[i].category, products[k].category) == 0) {\n                    printf(\"  - %s\\n\", products[k].name);\n                }\n            }\n            strcpy(printedCategories[printedCount++], products[i].category);\n        }\n    }\n}\n\nint main() {\n    Product products[MAX_PRODUCTS];\n    int count = 0;\n    char input[MAX_NAME_LEN + MAX_CATEGORY_LEN + 2];\n\n    printf(\"Enter products (name,category), or 'END' to stop:\\n\");\n    while (fgets(input, sizeof(input), stdin)) {\n        if (strncmp(input, \"END\", 3) == 0) {\n            break;\n        }\n        char *comma = strchr(input, ',');\n        if (comma != NULL) {\n            *comma = '\\0';\n            strcpy(products[count].name, input);\n            strcpy(products[count].category, comma + 1);\n            products[count].category[strcspn(products[count].category, \"\\n\")] = '\\0'; // Remove newline\n            count++;\n        }\n    }\n\n    printProductsByCategory(products, count);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a script that reads a sentence and prints it with alternating word capitalization.",
    "code": "```c\n#include <stdio.h>\n#include <ctype.h>\n#include <string.h>\n\nvoid alternateWordCapitalization(char *sentence) {\n    int capitalize = 1;\n    char *word = strtok(sentence, \" \");\n    \n    while (word != NULL) {\n        for (int i = 0; word[i] != '\\0'; i++) {\n            if (capitalize) {\n                word[i] = toupper(word[i]);\n            } else {\n                word[i] = tolower(word[i]);\n            }\n        }\n        printf(\"%s \", word);\n        capitalize = !capitalize;\n        word = strtok(NULL, \" \");\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    char sentence[256];\n    \n    printf(\"Enter a sentence: \");\n    if (fgets(sentence, sizeof(sentence), stdin) != NULL) {\n        size_t len = strlen(sentence);\n        if (len > 0 && sentence[len - 1] == '\\n') {\n            sentence[len - 1] = '\\0';\n        }\n        alternateWordCapitalization(sentence);\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Create a program that reads a list of grades and prints the highest and lowest grade.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int n, grade, highest, lowest;\n\n    printf(\"Enter the number of grades: \");\n    scanf(\"%d\", &n);\n\n    if (n > 0) {\n        printf(\"Enter grade 1: \");\n        scanf(\"%d\", &grade);\n        highest = lowest = grade;\n\n        for (int i = 2; i <= n; i++) {\n            printf(\"Enter grade %d: \", i);\n            scanf(\"%d\", &grade);\n            if (grade > highest) {\n                highest = grade;\n            }\n            if (grade < lowest) {\n                lowest = grade;\n            }\n        }\n\n        printf(\"Highest grade: %d\\n\", highest);\n        printf(\"Lowest grade: %d\\n\", lowest);\n    } else {\n        printf(\"No grades to process.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Build a tool that reads a text and prints the number of sentences.",
    "code": "```c\n#include <stdio.h>\n#include <ctype.h>\n\nint count_sentences(const char *text) {\n    int count = 0;\n    int i = 0;\n    while (text[i]) {\n        if (text[i] == '.' || text[i] == '!' || text[i] == '?') {\n            count++;\n        }\n        i++;\n    }\n    return count;\n}\n\nint main() {\n    char text[1000];\n    printf(\"Enter the text: \");\n    if (fgets(text, sizeof(text), stdin) != NULL) {\n        int sentence_count = count_sentences(text);\n        printf(\"Number of sentences: %d\\n\", sentence_count);\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a program that reads a list of integers and prints the sum of all odd numbers.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int n, num, sum = 0;\n    \n    printf(\"Enter the number of integers: \");\n    scanf(\"%d\", &n);\n    \n    printf(\"Enter the integers: \");\n    for (int i = 0; i < n; i++) {\n        scanf(\"%d\", &num);\n        if (num % 2 != 0) {\n            sum += num;\n        }\n    }\n    \n    printf(\"Sum of odd numbers: %d\\n\", sum);\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Write a script that reads a text and prints the shortest sentence.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n#include <limits.h>\n\n#define MAX_TEXT_LENGTH 1000\n#define MAX_SENTENCE_LENGTH 256\n\nint main() {\n    char text[MAX_TEXT_LENGTH];\n    char sentence[MAX_SENTENCE_LENGTH];\n    char shortest_sentence[MAX_SENTENCE_LENGTH];\n    int min_length = INT_MAX;\n\n    printf(\"Enter text: \");\n    fgets(text, MAX_TEXT_LENGTH, stdin);\n\n    char *ptr = strtok(text, \".!?\");\n    while (ptr != NULL) {\n        int length = strlen(ptr);\n        if (length < min_length) {\n            min_length = length;\n            strncpy(shortest_sentence, ptr, MAX_SENTENCE_LENGTH);\n        }\n        ptr = strtok(NULL, \".!?\");\n    }\n\n    printf(\"Shortest sentence: %s\\n\", shortest_sentence);\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a program that reads a list of dictionaries and prints them sorted by a specific key.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MAX_DICTS 100\n#define MAX_KEY_LENGTH 50\n#define MAX_VALUE_LENGTH 50\n\ntypedef struct {\n    char key[MAX_KEY_LENGTH];\n    char value[MAX_VALUE_LENGTH];\n} Dictionary;\n\nint compare(const void *a, const void *b) {\n    Dictionary *dictA = (Dictionary *)a;\n    Dictionary *dictB = (Dictionary *)b;\n    return strcmp(dictA->key, dictB->key);\n}\n\nint main() {\n    int n, i;\n    Dictionary dicts[MAX_DICTS];\n\n    printf(\"Enter the number of dictionaries: \");\n    scanf(\"%d\", &n);\n\n    for (i = 0; i < n; i++) {\n        printf(\"Enter key and value for dictionary %d: \", i + 1);\n        scanf(\"%s %s\", dicts[i].key, dicts[i].value);\n    }\n\n    qsort(dicts, n, sizeof(Dictionary), compare);\n\n    printf(\"Sorted dictionaries:\\n\");\n    for (i = 0; i < n; i++) {\n        printf(\"Key: %s, Value: %s\\n\", dicts[i].key, dicts[i].value);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a tool that reads a sequence of strings and prints the common prefix.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n#define MAX_STRINGS 100\n#define MAX_LENGTH 100\n\nint main() {\n    char strings[MAX_STRINGS][MAX_LENGTH];\n    int n;\n\n    printf(\"Enter number of strings: \");\n    scanf(\"%d\", &n);\n    getchar(); // Consume newline after number input\n\n    printf(\"Enter the strings:\\n\");\n    for (int i = 0; i < n; i++) {\n        fgets(strings[i], MAX_LENGTH, stdin);\n        strings[i][strcspn(strings[i], \"\\n\")] = 0; // Remove newline\n    }\n\n    int prefix_length = 0;\n    while (1) {\n        char current = strings[0][prefix_length];\n        for (int i = 1; i < n; i++) {\n            if (strings[i][prefix_length] != current || current == '\\0') {\n                goto end;\n            }\n        }\n        prefix_length++;\n    }\n\nend:\n    if (prefix_length > 0) {\n        printf(\"Common prefix: \");\n        for (int i = 0; i < prefix_length; i++) {\n            putchar(strings[0][i]);\n        }\n        printf(\"\\n\");\n    } else {\n        printf(\"No common prefix\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a program that reads a number and prints all of its divisors.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int number;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &number);\n\n    printf(\"Divisors of %d are: \", number);\n    for (int i = 1; i <= number; i++) {\n        if (number % i == 0) {\n            printf(\"%d \", i);\n        }\n    }\n    printf(\"\\n\");\n    return 0;\n}\n```"
  },
  {
    "task": "Write a script that reads a text and prints each word with its length.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint main() {\n    char text[1000], word[100];\n    int i = 0, j = 0;\n\n    printf(\"Enter text: \");\n    fgets(text, sizeof(text), stdin);\n\n    while (text[i] != '\\0') {\n        if (isspace(text[i]) || text[i] == '\\0') {\n            if (j > 0) {\n                word[j] = '\\0';\n                printf(\"%s: %d\\n\", word, j);\n                j = 0;\n            }\n        } else {\n            word[j++] = text[i];\n        }\n        i++;\n    }\n\n    if (j > 0) {\n        word[j] = '\\0';\n        printf(\"%s: %d\\n\", word, j);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Build a program that reads a list of colors and prints them in a rainbow order.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nint main() {\n    char *rainbow_order[] = {\"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"indigo\", \"violet\"};\n    char input_colors[100][20];\n    char color[20];\n    int input_count = 0;\n\n    printf(\"Enter colors (type 'done' to finish):\\n\");\n    while (1) {\n        scanf(\"%s\", color);\n        if (strcmp(color, \"done\") == 0) {\n            break;\n        }\n        strcpy(input_colors[input_count], color);\n        input_count++;\n    }\n\n    printf(\"Colors in rainbow order:\\n\");\n    for (int i = 0; i < 7; i++) {\n        for (int j = 0; j < input_count; j++) {\n            if (strcmp(rainbow_order[i], input_colors[j]) == 0) {\n                printf(\"%s\\n\", input_colors[j]);\n            }\n        }\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a tool that reads a list of names and prints them with their initials.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint main() {\n    char names[100][100];\n    int n;\n\n    printf(\"Enter the number of names: \");\n    scanf(\"%d\", &n);\n    getchar(); // Consume newline character\n\n    printf(\"Enter the names:\\n\");\n    for (int i = 0; i < n; i++) {\n        fgets(names[i], sizeof(names[i]), stdin);\n        names[i][strcspn(names[i], \"\\n\")] = 0; // Remove newline character\n    }\n\n    printf(\"\\nNames with initials:\\n\");\n    for (int i = 0; i < n; i++) {\n        int len = strlen(names[i]);\n        printf(\"%c\", toupper(names[i][0]));\n        for (int j = 1; j < len; j++) {\n            if (names[i][j] == ' ' && j + 1 < len) {\n                printf(\". %c\", toupper(names[i][j + 1]));\n            }\n        }\n        printf(\"\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program that reads a series of coordinates and prints the center point.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int n;\n    double x, y, sum_x = 0, sum_y = 0;\n\n    printf(\"Enter the number of points: \");\n    scanf(\"%d\", &n);\n\n    for (int i = 0; i < n; i++) {\n        printf(\"Enter coordinates (x y): \");\n        scanf(\"%lf %lf\", &x, &y);\n        sum_x += x;\n        sum_y += y;\n    }\n\n    printf(\"Center point: (%.2f, %.2f)\\n\", sum_x / n, sum_y / n);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a script that reads a sentence and prints it with each vowel replaced by its uppercase form.",
    "code": "```c\n#include <stdio.h>\n#include <ctype.h>\n\nint main() {\n    char sentence[256];\n    char ch;\n    int i = 0;\n\n    printf(\"Enter a sentence: \");\n    fgets(sentence, sizeof(sentence), stdin);\n\n    while ((ch = sentence[i]) != '\\0') {\n        switch (ch) {\n            case 'a': case 'e': case 'i': case 'o': case 'u':\n                sentence[i] = toupper(ch);\n                break;\n            default:\n                break;\n        }\n        i++;\n    }\n\n    printf(\"Modified sentence: %s\", sentence);\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a tool that reads a mathematical expression and evaluates its result.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    char expression[256];\n    double result;\n\n    printf(\"Enter a mathematical expression: \");\n    fgets(expression, sizeof(expression), stdin);\n\n    result = atof(expression);\n\n    printf(\"Result: %f\\n\", result);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a program that reads a text and prints the first three words.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nint main() {\n    char input[1000];\n    char *words[3];\n    int count = 0;\n\n    printf(\"Enter text: \");\n    fgets(input, sizeof(input), stdin);\n\n    char *token = strtok(input, \" \\t\\n\");\n    while (token != NULL && count < 3) {\n        words[count++] = token;\n        token = strtok(NULL, \" \\t\\n\");\n    }\n\n    for (int i = 0; i < count; i++) {\n        printf(\"%s \", words[i]);\n    }\n    printf(\"\\n\");\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a script that reads a list of numbers and prints them without duplicates.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int numbers[100], unique[100];\n    int n, count = 0, flag;\n\n    printf(\"Enter the number of elements: \");\n    scanf(\"%d\", &n);\n\n    printf(\"Enter %d numbers: \", n);\n    for (int i = 0; i < n; i++) {\n        scanf(\"%d\", &numbers[i]);\n    }\n\n    for (int i = 0; i < n; i++) {\n        flag = 0;\n        for (int j = 0; j < count; j++) {\n            if (numbers[i] == unique[j]) {\n                flag = 1;\n                break;\n            }\n        }\n        if (!flag) {\n            unique[count++] = numbers[i];\n        }\n    }\n\n    printf(\"Unique numbers: \");\n    for (int i = 0; i < count; i++) {\n        printf(\"%d \", unique[i]);\n    }\n    printf(\"\\n\");\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a program that reads a string and prints it with spaces between each character.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nint main() {\n    char str[100];\n    \n    printf(\"Enter a string: \");\n    fgets(str, sizeof(str), stdin);\n    \n    // Remove newline character if present\n    size_t len = strlen(str);\n    if (len > 0 && str[len - 1] == '\\n') {\n        str[len - 1] = '\\0';\n    }\n\n    for (size_t i = 0; i < strlen(str); i++) {\n        printf(\"%c\", str[i]);\n        if (i < strlen(str) - 1) {\n            printf(\" \");\n        }\n    }\n    printf(\"\\n\");\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Build a tool that reads a list of events with dates and prints them by chronological order.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char event[100];\n    int year, month, day;\n} Event;\n\nint compareEvents(const void* a, const void* b) {\n    Event* eventA = (Event*)a;\n    Event* eventB = (Event*)b;\n    if (eventA->year != eventB->year)\n        return eventA->year - eventB->year;\n    if (eventA->month != eventB->month)\n        return eventA->month - eventB->month;\n    return eventA->day - eventB->day;\n}\n\nint main() {\n    int n;\n    printf(\"Enter number of events: \");\n    scanf(\"%d\", &n);\n    \n    Event* events = (Event*)malloc(n * sizeof(Event));\n    for (int i = 0; i < n; i++) {\n        printf(\"Enter event %d (format: YYYY MM DD EventName): \", i + 1);\n        scanf(\"%d %d %d %[^\\n]\", &events[i].year, &events[i].month, &events[i].day, events[i].event);\n    }\n\n    qsort(events, n, sizeof(Event), compareEvents);\n\n    printf(\"\\nEvents in chronological order:\\n\");\n    for (int i = 0; i < n; i++) {\n        printf(\"%04d-%02d-%02d %s\\n\", events[i].year, events[i].month, events[i].day, events[i].event);\n    }\n\n    free(events);\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a program that reads a list of fractions and prints their sum as a reduced fraction.",
    "code": "```c\n#include <stdio.h>\n\nint gcd(int a, int b) {\n    while (b != 0) {\n        int t = b;\n        b = a % b;\n        a = t;\n    }\n    return a;\n}\n\nvoid reduce(int *num, int *den) {\n    int g = gcd(*num, *den);\n    *num /= g;\n    *den /= g;\n}\n\nint main() {\n    int n, num, den, sum_num = 0, sum_den = 1;\n    \n    printf(\"Enter number of fractions: \");\n    scanf(\"%d\", &n);\n    \n    for (int i = 0; i < n; ++i) {\n        printf(\"Enter fraction %d (numerator denominator): \", i + 1);\n        scanf(\"%d %d\", &num, &den);\n        \n        sum_num = sum_num * den + num * sum_den;\n        sum_den *= den;\n        \n        reduce(&sum_num, &sum_den);\n    }\n    \n    printf(\"Sum of fractions: %d/%d\\n\", sum_num, sum_den);\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Write a script that reads a text and prints it with each consonant doubled.",
    "code": "```c\n#include <stdio.h>\n#include <ctype.h>\n\nint main() {\n    char ch;\n    while ((ch = getchar()) != EOF) {\n        putchar(ch);\n        if (isalpha(ch) && !strchr(\"AEIOUaeiou\", ch)) {\n            putchar(ch);\n        }\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a program that reads a number and prints its representation in Roman numerals.",
    "code": "```c\n#include <stdio.h>\n\nvoid printRoman(int number) {\n    while (number != 0) {\n        if (number >= 1000) {\n            printf(\"M\");\n            number -= 1000;\n        } else if (number >= 900) {\n            printf(\"CM\");\n            number -= 900;\n        } else if (number >= 500) {\n            printf(\"D\");\n            number -= 500;\n        } else if (number >= 400) {\n            printf(\"CD\");\n            number -= 400;\n        } else if (number >= 100) {\n            printf(\"C\");\n            number -= 100;\n        } else if (number >= 90) {\n            printf(\"XC\");\n            number -= 90;\n        } else if (number >= 50) {\n            printf(\"L\");\n            number -= 50;\n        } else if (number >= 40) {\n            printf(\"XL\");\n            number -= 40;\n        } else if (number >= 10) {\n            printf(\"X\");\n            number -= 10;\n        } else if (number >= 9) {\n            printf(\"IX\");\n            number -= 9;\n        } else if (number >= 5) {\n            printf(\"V\");\n            number -= 5;\n        } else if (number >= 4) {\n            printf(\"IV\");\n            number -= 4;\n        } else if (number >= 1) {\n            printf(\"I\");\n            number -= 1;\n        }\n    }\n}\n\nint main() {\n    int number;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &number);\n    printf(\"Roman numeral: \");\n    printRoman(number);\n    printf(\"\\n\");\n    return 0;\n}\n```"
  },
  {
    "task": "Create a tool that reads a list of words and prints them with each letter in reverse order.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nvoid reverseString(char* str) {\n    int length = strlen(str);\n    for (int i = length - 1; i >= 0; i--) {\n        putchar(str[i]);\n    }\n}\n\nint main() {\n    char word[100];\n    while (scanf(\"%99s\", word) == 1) {\n        reverseString(word);\n        putchar('\\n');\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Design a program that reads a set of points and prints the one closest to the origin.",
    "code": "```c\n#include <stdio.h>\n#include <math.h>\n\ntypedef struct {\n    double x;\n    double y;\n} Point;\n\ndouble distanceFromOrigin(Point p) {\n    return sqrt(p.x * p.x + p.y * p.y);\n}\n\nint main() {\n    int n, i, closestIndex = 0;\n    printf(\"Enter the number of points: \");\n    scanf(\"%d\", &n);\n\n    Point points[n];\n    printf(\"Enter the points (x y):\\n\");\n    for (i = 0; i < n; ++i) {\n        scanf(\"%lf %lf\", &points[i].x, &points[i].y);\n    }\n\n    double minDistance = distanceFromOrigin(points[0]);\n    for (i = 1; i < n; ++i) {\n        double dist = distanceFromOrigin(points[i]);\n        if (dist < minDistance) {\n            minDistance = dist;\n            closestIndex = i;\n        }\n    }\n\n    printf(\"The point closest to the origin is: (%.2f, %.2f)\\n\", points[closestIndex].x, points[closestIndex].y);\n    return 0;\n}\n```"
  },
  {
    "task": "Write a script that reads a text and prints the frequency of each word.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <ctype.h>\n\n#define MAX_WORDS 1000\n#define MAX_WORD_LENGTH 100\n\ntypedef struct {\n    char word[MAX_WORD_LENGTH];\n    int count;\n} WordFreq;\n\nvoid toLowerCase(char* str) {\n    for (int i = 0; str[i]; i++) {\n        str[i] = tolower(str[i]);\n    }\n}\n\nint main() {\n    char text[10000];\n    WordFreq words[MAX_WORDS];\n    int wordCount = 0;\n\n    printf(\"Enter text: \");\n    fgets(text, sizeof(text), stdin);\n\n    char *token = strtok(text, \" \\t\\n\\r,.!?;:\\\"()-\");\n\n    while (token != NULL) {\n        toLowerCase(token);\n        int found = 0;\n\n        for (int i = 0; i < wordCount; i++) {\n            if (strcmp(words[i].word, token) == 0) {\n                words[i].count++;\n                found = 1;\n                break;\n            }\n        }\n\n        if (!found && wordCount < MAX_WORDS) {\n            strcpy(words[wordCount].word, token);\n            words[wordCount].count = 1;\n            wordCount++;\n        }\n\n        token = strtok(NULL, \" \\t\\n\\r,.!?;:\\\"()-\");\n    }\n\n    printf(\"Word Frequencies:\\n\");\n    for (int i = 0; i < wordCount; i++) {\n        printf(\"%s: %d\\n\", words[i].word, words[i].count);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Build a program that reads a list of integers and prints the second smallest.",
    "code": "```c\n#include <stdio.h>\n#include <limits.h>\n\nint main() {\n    int n, i, num;\n    int smallest = INT_MAX, second_smallest = INT_MAX;\n    \n    printf(\"Enter the number of integers: \");\n    scanf(\"%d\", &n);\n    \n    if (n < 2) {\n        printf(\"Error: At least two numbers are required.\\n\");\n        return 1;\n    }\n\n    printf(\"Enter the integers:\\n\");\n    for (i = 0; i < n; i++) {\n        scanf(\"%d\", &num);\n        if (num < smallest) {\n            second_smallest = smallest;\n            smallest = num;\n        } else if (num < second_smallest && num != smallest) {\n            second_smallest = num;\n        }\n    }\n    \n    if (second_smallest == INT_MAX) {\n        printf(\"Error: No distinct second smallest number.\\n\");\n    } else {\n        printf(\"The second smallest number is: %d\\n\", second_smallest);\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Implement a tool that reads a string and prints all its substrings.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nint main() {\n    char input[100];\n    printf(\"Enter a string: \");\n    fgets(input, sizeof(input), stdin);\n    \n    size_t len = strlen(input);\n    if (input[len - 1] == '\\n') {\n        input[len - 1] = '\\0';\n        len--;\n    }\n\n    for (size_t i = 0; i < len; i++) {\n        for (size_t j = i; j < len; j++) {\n            for (size_t k = i; k <= j; k++) {\n                putchar(input[k]);\n            }\n            putchar('\\n');\n        }\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program that reads a number and generates a random number up to that number.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nint main() {\n    int limit, randomNumber;\n\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &limit);\n\n    srand(time(NULL));\n    randomNumber = rand() % (limit + 1);\n\n    printf(\"Random number: %d\\n\", randomNumber);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a script that reads a sentence and prints it with each word reversed.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nvoid reverseWord(char *start, char *end) {\n    while (start < end) {\n        char temp = *start;\n        *start = *end;\n        *end = temp;\n        start++;\n        end--;\n    }\n}\n\nint main() {\n    char sentence[256];\n    printf(\"Enter a sentence: \");\n    fgets(sentence, sizeof(sentence), stdin);\n\n    char *word_start = sentence;\n    char *temp = sentence;\n\n    while (*temp) {\n        if (*temp == ' ' || *temp == '\\n') {\n            reverseWord(word_start, temp - 1);\n            word_start = temp + 1;\n        }\n        temp++;\n    }\n    reverseWord(word_start, temp - 1);\n\n    printf(\"Reversed sentence: %s\", sentence);\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a tool that reads a text and prints it with each sentence on a new line.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n#define BUFFER_SIZE 1024\n\nvoid printSentencesOnNewLines(char *text) {\n    char *sentence;\n    const char delimiters[] = \".!?\";\n    sentence = strtok(text, delimiters);\n    while (sentence != NULL) {\n        printf(\"%s\\n\", sentence);\n        sentence = strtok(NULL, delimiters);\n    }\n}\n\nint main() {\n    char text[BUFFER_SIZE];\n\n    printf(\"Enter text: \");\n    if (fgets(text, BUFFER_SIZE, stdin) != NULL) {\n        printSentencesOnNewLines(text);\n    } else {\n        fprintf(stderr, \"Failed to read input.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a program that reads a list of numbers and prints the product of all negative numbers.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int n, num;\n    long long product = 1;\n    int hasNegative = 0;\n\n    printf(\"Enter the number of elements: \");\n    scanf(\"%d\", &n);\n\n    printf(\"Enter the numbers: \");\n    for (int i = 0; i < n; i++) {\n        scanf(\"%d\", &num);\n        if (num < 0) {\n            product *= num;\n            hasNegative = 1;\n        }\n    }\n\n    if (hasNegative) {\n        printf(\"Product of negative numbers: %lld\\n\", product);\n    } else {\n        printf(\"No negative numbers found.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a script that reads a dictionary and prints the keys and values in sorted order.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char key[100];\n    char value[100];\n} Pair;\n\nint comparePairs(const void *a, const void *b) {\n    return strcmp(((Pair *)a)->key, ((Pair *)b)->key);\n}\n\nint main() {\n    Pair dictionary[100];\n    int count = 0;\n    char inputKey[100], inputValue[100];\n\n    printf(\"Enter key-value pairs (key value), type 'exit' to stop:\\n\");\n\n    while (1) {\n        if (scanf(\"%s\", inputKey) != 1 || strcmp(inputKey, \"exit\") == 0) break;\n        if (scanf(\"%s\", inputValue) != 1) break;\n        strcpy(dictionary[count].key, inputKey);\n        strcpy(dictionary[count].value, inputValue);\n        count++;\n    }\n\n    qsort(dictionary, count, sizeof(Pair), comparePairs);\n\n    printf(\"\\nSorted key-value pairs:\\n\");\n    for (int i = 0; i < count; i++) {\n        printf(\"%s: %s\\n\", dictionary[i].key, dictionary[i].value);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a program that reads a text and prints the number of unique words.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_WORDS 1000\n#define MAX_WORD_LENGTH 100\n\ntypedef struct {\n    char word[MAX_WORD_LENGTH];\n    int count;\n} Word;\n\nint is_unique(Word words[], int count, const char *word) {\n    for (int i = 0; i < count; i++) {\n        if (strcmp(words[i].word, word) == 0) {\n            return 0;\n        }\n    }\n    return 1;\n}\n\nvoid to_lowercase(char *str) {\n    for (int i = 0; str[i]; i++) {\n        str[i] = tolower((unsigned char)str[i]);\n    }\n}\n\nint main() {\n    char input[10000];\n    Word words[MAX_WORDS];\n    int word_count = 0;\n    \n    printf(\"Enter text: \");\n    fgets(input, sizeof(input), stdin);\n    \n    char *token = strtok(input, \" \\t\\n\");\n    while (token != NULL) {\n        to_lowercase(token);\n        if (is_unique(words, word_count, token)) {\n            strcpy(words[word_count].word, token);\n            words[word_count].count = 1;\n            word_count++;\n        }\n        token = strtok(NULL, \" \\t\\n\");\n    }\n\n    printf(\"Number of unique words: %d\\n\", word_count);\n    return 0;\n}\n```"
  }
]