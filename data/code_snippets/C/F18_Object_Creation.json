[
  {
    "task": "Create a new instance of a class that represents a book, with properties for title, author, and ISBN number.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char *title;\n    char *author;\n    char *isbn;\n} Book;\n\nBook* createBook(const char *title, const char *author, const char *isbn) {\n    Book *newBook = (Book*)malloc(sizeof(Book));\n    newBook->title = strdup(title);\n    newBook->author = strdup(author);\n    newBook->isbn = strdup(isbn);\n    return newBook;\n}\n\nint main() {\n    Book *myBook = createBook(\"The Great Gatsby\", \"F. Scott Fitzgerald\", \"9780743273565\");\n\n    printf(\"Title: %s\\n\", myBook->title);\n    printf(\"Author: %s\\n\", myBook->author);\n    printf(\"ISBN: %s\\n\", myBook->isbn);\n\n    free(myBook->title);\n    free(myBook->author);\n    free(myBook->isbn);\n    free(myBook);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Instantiate an object of a class named Car, and set its make, model, and year attributes.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    char make[50];\n    char model[50];\n    int year;\n} Car;\n\nint main() {\n    Car myCar;\n    \n    strcpy(myCar.make, \"Toyota\");\n    strcpy(myCar.model, \"Corolla\");\n    myCar.year = 2020;\n    \n    printf(\"Car Make: %s\\n\", myCar.make);\n    printf(\"Car Model: %s\\n\", myCar.model);\n    printf(\"Car Year: %d\\n\", myCar.year);\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Develop a class to represent a rectangle, then create an object with specific width and height.",
    "code": "```c\n#include <stdio.h>\n\ntypedef struct {\n    double width;\n    double height;\n} Rectangle;\n\nRectangle createRectangle(double width, double height) {\n    Rectangle rect;\n    rect.width = width;\n    rect.height = height;\n    return rect;\n}\n\nint main() {\n    Rectangle myRectangle = createRectangle(5.0, 10.0);\n    printf(\"Rectangle: width = %.2f, height = %.2f\\n\", myRectangle.width, myRectangle.height);\n    return 0;\n}\n```"
  },
  {
    "task": "Construct an object of a class Person, initializing it with a name and age.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char* name;\n    int age;\n} Person;\n\nPerson* createPerson(const char* name, int age) {\n    Person* newPerson = (Person*)malloc(sizeof(Person));\n    newPerson->name = (char*)malloc(strlen(name) + 1);\n    strcpy(newPerson->name, name);\n    newPerson->age = age;\n    return newPerson;\n}\n\nvoid freePerson(Person* person) {\n    free(person->name);\n    free(person);\n}\n\nint main() {\n    Person* person = createPerson(\"Alice\", 30);\n    printf(\"Name: %s, Age: %d\\n\", person->name, person->age);\n    freePerson(person);\n    return 0;\n}\n```"
  },
  {
    "task": "Create a new object from a class called Circle, initializing it with a radius value.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    double radius;\n} Circle;\n\nCircle* create_circle(double radius) {\n    Circle* new_circle = (Circle*)malloc(sizeof(Circle));\n    if (new_circle != NULL) {\n        new_circle->radius = radius;\n    }\n    return new_circle;\n}\n\nint main() {\n    double radius = 5.0;\n    Circle* my_circle = create_circle(radius);\n\n    // Use the object as needed\n\n    // Clean up\n    free(my_circle);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Instantiate a class named Student with properties for name, student ID, and GPA.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char name[50];\n    int studentID;\n    float GPA;\n} Student;\n\nStudent* createStudent(const char* name, int studentID, float GPA) {\n    Student* newStudent = (Student*)malloc(sizeof(Student));\n    strcpy(newStudent->name, name);\n    newStudent->studentID = studentID;\n    newStudent->GPA = GPA;\n    return newStudent;\n}\n\nint main() {\n    Student* student = createStudent(\"John Doe\", 12345, 3.75);\n    printf(\"Name: %s\\n\", student->name);\n    printf(\"Student ID: %d\\n\", student->studentID);\n    printf(\"GPA: %.2f\\n\", student->GPA);\n    free(student);\n    return 0;\n}\n```"
  },
  {
    "task": "Design a class for a smartphone, then create an instance with specific brand, model, and storage capacity.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char brand[50];\n    char model[50];\n    int storageCapacity;\n} Smartphone;\n\nSmartphone* createSmartphone(const char* brand, const char* model, int storageCapacity) {\n    Smartphone* phone = (Smartphone*)malloc(sizeof(Smartphone));\n    if (phone != NULL) {\n        strncpy(phone->brand, brand, sizeof(phone->brand) - 1);\n        phone->brand[sizeof(phone->brand) - 1] = '\\0';\n        strncpy(phone->model, model, sizeof(phone->model) - 1);\n        phone->model[sizeof(phone->model) - 1] = '\\0';\n        phone->storageCapacity = storageCapacity;\n    }\n    return phone;\n}\n\nint main() {\n    Smartphone* myPhone = createSmartphone(\"Apple\", \"iPhone 13\", 256);\n    printf(\"Brand: %s\\n\", myPhone->brand);\n    printf(\"Model: %s\\n\", myPhone->model);\n    printf(\"Storage Capacity: %dGB\\n\", myPhone->storageCapacity);\n\n    free(myPhone);\n    return 0;\n}\n```"
  },
  {
    "task": "Create an object of a class named BankAccount, initializing it with an account number and balance.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char accountNumber[20];\n    double balance;\n} BankAccount;\n\nBankAccount* createBankAccount(const char* accountNumber, double balance) {\n    BankAccount* account = (BankAccount*)malloc(sizeof(BankAccount));\n    if (account != NULL) {\n        strncpy(account->accountNumber, accountNumber, sizeof(account->accountNumber) - 1);\n        account->accountNumber[sizeof(account->accountNumber) - 1] = '\\0';\n        account->balance = balance;\n    }\n    return account;\n}\n\nint main() {\n    BankAccount* myAccount = createBankAccount(\"1234567890\", 1000.50);\n    if (myAccount != NULL) {\n        printf(\"Account Number: %s\\n\", myAccount->accountNumber);\n        printf(\"Balance: %.2f\\n\", myAccount->balance);\n        free(myAccount);\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Write a class for a movie, then instantiate it with a title, director, and release year.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char title[100];\n    char director[100];\n    int releaseYear;\n} Movie;\n\nMovie* createMovie(const char* title, const char* director, int releaseYear) {\n    Movie* newMovie = (Movie*)malloc(sizeof(Movie));\n    strcpy(newMovie->title, title);\n    strcpy(newMovie->director, director);\n    newMovie->releaseYear = releaseYear;\n    return newMovie;\n}\n\nint main() {\n    Movie* myMovie = createMovie(\"Inception\", \"Christopher Nolan\", 2010);\n    printf(\"Title: %s\\n\", myMovie->title);\n    printf(\"Director: %s\\n\", myMovie->director);\n    printf(\"Release Year: %d\\n\", myMovie->releaseYear);\n    free(myMovie);\n    return 0;\n}\n```"
  },
  {
    "task": "Define a class representing a point in 2D space and create an object with x and y coordinates.",
    "code": "```c\n#include <stdio.h>\n\ntypedef struct {\n    double x;\n    double y;\n} Point;\n\nint main() {\n    Point point;\n    point.x = 3.0;\n    point.y = 4.0;\n\n    printf(\"Point coordinates: (%.1f, %.1f)\\n\", point.x, point.y);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create an instance of a class called Computer with attributes for CPU, RAM, and storage.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char *cpu;\n    int ram;\n    int storage;\n} Computer;\n\nComputer *create_computer(const char *cpu, int ram, int storage) {\n    Computer *new_computer = (Computer *)malloc(sizeof(Computer));\n    new_computer->cpu = strdup(cpu);\n    new_computer->ram = ram;\n    new_computer->storage = storage;\n    return new_computer;\n}\n\nint main() {\n    Computer *my_computer = create_computer(\"Intel i7\", 16, 512);\n\n    printf(\"Computer Specs:\\n\");\n    printf(\"CPU: %s\\n\", my_computer->cpu);\n    printf(\"RAM: %d GB\\n\", my_computer->ram);\n    printf(\"Storage: %d GB\\n\", my_computer->storage);\n\n    free(my_computer->cpu);\n    free(my_computer);\n    return 0;\n}\n```"
  },
  {
    "task": "Design a class for a Song with properties for title, artist, and duration, and instantiate it.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char *title;\n    char *artist;\n    int duration; // duration in seconds\n} Song;\n\nSong* createSong(const char *title, const char *artist, int duration) {\n    Song *newSong = (Song*)malloc(sizeof(Song));\n    newSong->title = strdup(title);\n    newSong->artist = strdup(artist);\n    newSong->duration = duration;\n    return newSong;\n}\n\nint main() {\n    Song *mySong = createSong(\"Imagine\", \"John Lennon\", 183);\n\n    printf(\"Title: %s\\n\", mySong->title);\n    printf(\"Artist: %s\\n\", mySong->artist);\n    printf(\"Duration: %d seconds\\n\", mySong->duration);\n\n    free(mySong->title);\n    free(mySong->artist);\n    free(mySong);\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Create a new instance of a class named Pet, initializing it with type, breed, and age.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char type[50];\n    char breed[50];\n    int age;\n} Pet;\n\nPet* createPet(const char* type, const char* breed, int age) {\n    Pet* newPet = (Pet*)malloc(sizeof(Pet));\n    if (newPet != NULL) {\n        strncpy(newPet->type, type, sizeof(newPet->type) - 1);\n        newPet->type[sizeof(newPet->type) - 1] = '\\0';\n        strncpy(newPet->breed, breed, sizeof(newPet->breed) - 1);\n        newPet->breed[sizeof(newPet->breed) - 1] = '\\0';\n        newPet->age = age;\n    }\n    return newPet;\n}\n\nint main() {\n    Pet* myPet = createPet(\"Dog\", \"Labrador\", 5);\n    if (myPet != NULL) {\n        printf(\"Pet Type: %s\\n\", myPet->type);\n        printf(\"Pet Breed: %s\\n\", myPet->breed);\n        printf(\"Pet Age: %d\\n\", myPet->age);\n        free(myPet);\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Instantiate an object of a class named House with attributes for address, number of bedrooms, and price.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char address[100];\n    int num_bedrooms;\n    double price;\n} House;\n\nHouse* createHouse(const char* address, int num_bedrooms, double price) {\n    House* newHouse = (House*)malloc(sizeof(House));\n    if (newHouse != NULL) {\n        strncpy(newHouse->address, address, sizeof(newHouse->address) - 1);\n        newHouse->address[sizeof(newHouse->address) - 1] = '\\0';\n        newHouse->num_bedrooms = num_bedrooms;\n        newHouse->price = price;\n    }\n    return newHouse;\n}\n\nint main() {\n    House* myHouse = createHouse(\"123 Elm St\", 3, 250000.00);\n    printf(\"Address: %s\\nBedrooms: %d\\nPrice: $%.2f\\n\", myHouse->address, myHouse->num_bedrooms, myHouse->price);\n    free(myHouse);\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a class for a Camera, then create an object with resolution and zoom level attributes.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\n// Define the Camera class\ntypedef struct {\n    int resolution;\n    int zoomLevel;\n} Camera;\n\n// Function to create a Camera object\nCamera* createCamera(int resolution, int zoomLevel) {\n    Camera* newCamera = (Camera*)malloc(sizeof(Camera));\n    if (newCamera != NULL) {\n        newCamera->resolution = resolution;\n        newCamera->zoomLevel = zoomLevel;\n    }\n    return newCamera;\n}\n\nint main() {\n    // Create a Camera object\n    Camera* myCamera = createCamera(1080, 5);\n\n    if (myCamera != NULL) {\n        printf(\"Camera created with resolution: %d and zoom level: %d\\n\", myCamera->resolution, myCamera->zoomLevel);\n        free(myCamera);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Construct an object from a class named Bicycle with properties for brand, type, and gear count.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char brand[50];\n    char type[50];\n    int gear_count;\n} Bicycle;\n\nint main() {\n    Bicycle *myBicycle = (Bicycle *)malloc(sizeof(Bicycle));\n    if (myBicycle == NULL) {\n        fprintf(stderr, \"Memory allocation failed\\n\");\n        return 1;\n    }\n\n    strcpy(myBicycle->brand, \"Giant\");\n    strcpy(myBicycle->type, \"Mountain\");\n    myBicycle->gear_count = 21;\n\n    printf(\"Bicycle Brand: %s\\n\", myBicycle->brand);\n    printf(\"Bicycle Type: %s\\n\", myBicycle->type);\n    printf(\"Gear Count: %d\\n\", myBicycle->gear_count);\n\n    free(myBicycle);\n    return 0;\n}\n```"
  },
  {
    "task": "Create a class for a book author with name and nationality, then instantiate it.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char name[100];\n    char nationality[100];\n} Author;\n\nAuthor* createAuthor(const char* name, const char* nationality) {\n    Author* newAuthor = (Author*)malloc(sizeof(Author));\n    if (newAuthor != NULL) {\n        strncpy(newAuthor->name, name, sizeof(newAuthor->name) - 1);\n        newAuthor->name[sizeof(newAuthor->name) - 1] = '\\0';\n        strncpy(newAuthor->nationality, nationality, sizeof(newAuthor->nationality) - 1);\n        newAuthor->nationality[sizeof(newAuthor->nationality) - 1] = '\\0';\n    }\n    return newAuthor;\n}\n\nint main() {\n    Author* author = createAuthor(\"John Doe\", \"American\");\n    printf(\"Author: %s, Nationality: %s\\n\", author->name, author->nationality);\n    free(author);\n    return 0;\n}\n```"
  },
  {
    "task": "Define a class representing a video game with attributes for title, genre, and platform, and create an object.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    char title[100];\n    char genre[50];\n    char platform[50];\n} VideoGame;\n\nint main() {\n    VideoGame game;\n    \n    strcpy(game.title, \"The Legend of Zelda\");\n    strcpy(game.genre, \"Action-Adventure\");\n    strcpy(game.platform, \"Nintendo Switch\");\n    \n    printf(\"Title: %s\\n\", game.title);\n    printf(\"Genre: %s\\n\", game.genre);\n    printf(\"Platform: %s\\n\", game.platform);\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Instantiate a class named Plane with properties for airline, model, and capacity.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    char airline[50];\n    char model[50];\n    int capacity;\n} Plane;\n\nint main() {\n    Plane myPlane;\n\n    strcpy(myPlane.airline, \"Example Airline\");\n    strcpy(myPlane.model, \"Boeing 747\");\n    myPlane.capacity = 416;\n\n    printf(\"Airline: %s\\n\", myPlane.airline);\n    printf(\"Model: %s\\n\", myPlane.model);\n    printf(\"Capacity: %d\\n\", myPlane.capacity);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a new object of a class called Lamp, initializing it with color and brightness level.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char color[20];\n    int brightness;\n} Lamp;\n\nLamp* createLamp(const char* color, int brightness) {\n    Lamp* newLamp = (Lamp*)malloc(sizeof(Lamp));\n    if (newLamp != NULL) {\n        strncpy(newLamp->color, color, sizeof(newLamp->color) - 1);\n        newLamp->color[sizeof(newLamp->color) - 1] = '\\0';\n        newLamp->brightness = brightness;\n    }\n    return newLamp;\n}\n\nint main() {\n    Lamp* myLamp = createLamp(\"blue\", 75);\n    // Use myLamp here\n    free(myLamp);\n    return 0;\n}\n```"
  },
  {
    "task": "Design a class for a TV show with properties for title, season, and episode count, then instantiate it.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char title[100];\n    int season;\n    int episode_count;\n} TVShow;\n\nTVShow* create_tv_show(const char* title, int season, int episode_count) {\n    TVShow* show = (TVShow*)malloc(sizeof(TVShow));\n    if (show != NULL) {\n        strncpy(show->title, title, sizeof(show->title) - 1);\n        show->title[sizeof(show->title) - 1] = '\\0';\n        show->season = season;\n        show->episode_count = episode_count;\n    }\n    return show;\n}\n\nint main() {\n    TVShow* my_show = create_tv_show(\"Example Show\", 1, 10);\n    if (my_show != NULL) {\n        printf(\"Title: %s\\nSeason: %d\\nEpisode Count: %d\\n\", my_show->title, my_show->season, my_show->episode_count);\n        free(my_show);\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Instantiate an object of a class named Garden with attributes for size and number of plants.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int size;\n    int numberOfPlants;\n} Garden;\n\nGarden* createGarden(int size, int numberOfPlants) {\n    Garden* newGarden = (Garden*)malloc(sizeof(Garden));\n    if (newGarden != NULL) {\n        newGarden->size = size;\n        newGarden->numberOfPlants = numberOfPlants;\n    }\n    return newGarden;\n}\n\nint main() {\n    Garden* myGarden = createGarden(100, 20);\n    if (myGarden != NULL) {\n        printf(\"Garden created with size: %d and number of plants: %d\\n\", myGarden->size, myGarden->numberOfPlants);\n        free(myGarden);\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a class for a Train, then create an object with properties for type and number of carriages.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char type[50];\n    int numberOfCarriages;\n} Train;\n\nTrain* createTrain(const char* type, int numberOfCarriages) {\n    Train* newTrain = (Train*)malloc(sizeof(Train));\n    if (newTrain != NULL) {\n        strncpy(newTrain->type, type, sizeof(newTrain->type) - 1);\n        newTrain->type[sizeof(newTrain->type) - 1] = '\\0';\n        newTrain->numberOfCarriages = numberOfCarriages;\n    }\n    return newTrain;\n}\n\nint main() {\n    Train* myTrain = createTrain(\"Freight\", 20);\n    printf(\"Train type: %s\\n\", myTrain->type);\n    printf(\"Number of carriages: %d\\n\", myTrain->numberOfCarriages);\n\n    // Free allocated memory\n    free(myTrain);\n    return 0;\n}\n```"
  },
  {
    "task": "Define a class representing a planet with attributes for name, size, and distance from the sun, and create an object.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    char name[50];\n    double size;\n    double distanceFromSun;\n} Planet;\n\nint main() {\n    Planet earth;\n\n    strcpy(earth.name, \"Earth\");\n    earth.size = 12742.0;\n    earth.distanceFromSun = 149.6;\n\n    printf(\"Planet Name: %s\\n\", earth.name);\n    printf(\"Size: %.2f km\\n\", earth.size);\n    printf(\"Distance from Sun: %.2f million km\\n\", earth.distanceFromSun);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create an instance of a class named Fridge with properties for brand and capacity.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char brand[50];\n    int capacity;\n} Fridge;\n\nFridge* createFridge(const char* brand, int capacity) {\n    Fridge* newFridge = (Fridge*)malloc(sizeof(Fridge));\n    strcpy(newFridge->brand, brand);\n    newFridge->capacity = capacity;\n    return newFridge;\n}\n\nint main() {\n    Fridge* myFridge = createFridge(\"Samsung\", 300);\n    printf(\"Brand: %s, Capacity: %d\\n\", myFridge->brand, myFridge->capacity);\n    free(myFridge);\n    return 0;\n}\n```"
  },
  {
    "task": "Design a class for a Restaurant with attributes for name, cuisine type, and location, then create an instance.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char name[50];\n    char cuisineType[50];\n    char location[100];\n} Restaurant;\n\nRestaurant* createRestaurant(const char* name, const char* cuisineType, const char* location) {\n    Restaurant* newRestaurant = (Restaurant*)malloc(sizeof(Restaurant));\n    if(newRestaurant) {\n        strncpy(newRestaurant->name, name, sizeof(newRestaurant->name) - 1);\n        strncpy(newRestaurant->cuisineType, cuisineType, sizeof(newRestaurant->cuisineType) - 1);\n        strncpy(newRestaurant->location, location, sizeof(newRestaurant->location) - 1);\n    }\n    return newRestaurant;\n}\n\nint main() {\n    Restaurant* myRestaurant = createRestaurant(\"The Gourmet Place\", \"Italian\", \"123 Culinary Ave\");\n    if(myRestaurant) {\n        printf(\"Restaurant Name: %s\\n\", myRestaurant->name);\n        printf(\"Cuisine Type: %s\\n\", myRestaurant->cuisineType);\n        printf(\"Location: %s\\n\", myRestaurant->location);\n        free(myRestaurant);\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Create a new object from a class named Bookstore, initializing it with name and number of books.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char *name;\n    int numberOfBooks;\n} Bookstore;\n\nBookstore* createBookstore(const char* name, int numberOfBooks) {\n    Bookstore* newBookstore = (Bookstore*)malloc(sizeof(Bookstore));\n    newBookstore->name = (char*)malloc(strlen(name) + 1);\n    strcpy(newBookstore->name, name);\n    newBookstore->numberOfBooks = numberOfBooks;\n    return newBookstore;\n}\n\nint main() {\n    Bookstore* myBookstore = createBookstore(\"My Bookstore\", 1000);\n    printf(\"Bookstore Name: %s, Number of Books: %d\\n\", myBookstore->name, myBookstore->numberOfBooks);\n\n    free(myBookstore->name);\n    free(myBookstore);\n    return 0;\n}\n```"
  },
  {
    "task": "Instantiate a class named Library with properties for total books and number of members.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    int total_books;\n    int number_of_members;\n} Library;\n\nLibrary* createLibrary(int books, int members) {\n    Library* lib = (Library*)malloc(sizeof(Library));\n    if (lib == NULL) {\n        fprintf(stderr, \"Memory allocation failed\\n\");\n        exit(1);\n    }\n    lib->total_books = books;\n    lib->number_of_members = members;\n    return lib;\n}\n\nint main() {\n    Library* myLibrary = createLibrary(1000, 150);\n    printf(\"Total books: %d\\n\", myLibrary->total_books);\n    printf(\"Number of members: %d\\n\", myLibrary->number_of_members);\n\n    free(myLibrary);\n    return 0;\n}\n```"
  },
  {
    "task": "Write a class for a Beverage with properties for name, type, and volume, and instantiate it.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n// Define the Beverage structure\ntypedef struct {\n    char name[50];\n    char type[50];\n    int volume;\n} Beverage;\n\n// Function to create a new Beverage instance\nBeverage* createBeverage(const char* name, const char* type, int volume) {\n    Beverage* newBeverage = (Beverage*)malloc(sizeof(Beverage));\n    if (newBeverage) {\n        strncpy(newBeverage->name, name, sizeof(newBeverage->name));\n        strncpy(newBeverage->type, type, sizeof(newBeverage->type));\n        newBeverage->volume = volume;\n    }\n    return newBeverage;\n}\n\nint main() {\n    // Instantiate a Beverage\n    Beverage* myBeverage = createBeverage(\"Cola\", \"Soda\", 355);\n\n    // Output properties to verify\n    if (myBeverage) {\n        printf(\"Beverage Name: %s\\n\", myBeverage->name);\n        printf(\"Beverage Type: %s\\n\", myBeverage->type);\n        printf(\"Beverage Volume: %d ml\\n\", myBeverage->volume);\n        free(myBeverage);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create an object of a class named User with attributes for username, email, and password.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char username[50];\n    char email[100];\n    char password[50];\n} User;\n\nUser* createUser(const char* username, const char* email, const char* password) {\n    User* user = (User*)malloc(sizeof(User));\n    if (user != NULL) {\n        strncpy(user->username, username, sizeof(user->username) - 1);\n        user->username[sizeof(user->username) - 1] = '\\0';\n        strncpy(user->email, email, sizeof(user->email) - 1);\n        user->email[sizeof(user->email) - 1] = '\\0';\n        strncpy(user->password, password, sizeof(user->password) - 1);\n        user->password[sizeof(user->password) - 1] = '\\0';\n    }\n    return user;\n}\n\nint main() {\n    User* user = createUser(\"john_doe\", \"john@example.com\", \"securepassword123\");\n    if (user != NULL) {\n        printf(\"User created: %s, %s\\n\", user->username, user->email);\n        free(user);\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Define a class for a Laptop with properties for brand, processor, and RAM, then instantiate it.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char brand[50];\n    char processor[50];\n    int ram;\n} Laptop;\n\nLaptop* createLaptop(const char* brand, const char* processor, int ram) {\n    Laptop* laptop = (Laptop*)malloc(sizeof(Laptop));\n    if (laptop != NULL) {\n        strncpy(laptop->brand, brand, sizeof(laptop->brand) - 1);\n        laptop->brand[sizeof(laptop->brand) - 1] = '\\0';\n        strncpy(laptop->processor, processor, sizeof(laptop->processor) - 1);\n        laptop->processor[sizeof(laptop->processor) - 1] = '\\0';\n        laptop->ram = ram;\n    }\n    return laptop;\n}\n\nint main() {\n    Laptop* myLaptop = createLaptop(\"Dell\", \"Intel i7\", 16);\n    if (myLaptop != NULL) {\n        printf(\"Brand: %s\\n\", myLaptop->brand);\n        printf(\"Processor: %s\\n\", myLaptop->processor);\n        printf(\"RAM: %dGB\\n\", myLaptop->ram);\n        free(myLaptop);\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Construct an object from a class named Mountain with attributes for name and elevation.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char name[50];\n    int elevation;\n} Mountain;\n\nMountain* createMountain(const char* name, int elevation) {\n    Mountain* newMountain = (Mountain*)malloc(sizeof(Mountain));\n    if (newMountain != NULL) {\n        strncpy(newMountain->name, name, sizeof(newMountain->name) - 1);\n        newMountain->name[sizeof(newMountain->name) - 1] = '\\0';\n        newMountain->elevation = elevation;\n    }\n    return newMountain;\n}\n\nint main() {\n    Mountain* myMountain = createMountain(\"Everest\", 8848);\n    printf(\"Mountain Name: %s\\n\", myMountain->name);\n    printf(\"Elevation: %d\\n\", myMountain->elevation);\n    free(myMountain);\n    return 0;\n}\n```"
  },
  {
    "task": "Create an instance of a class called Weather with properties for temperature, humidity, and condition.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n// Define the Weather class\ntypedef struct {\n    float temperature;\n    float humidity;\n    char condition[50];\n} Weather;\n\n// Function to create a new Weather instance\nWeather* createWeather(float temperature, float humidity, const char* condition) {\n    Weather* newWeather = (Weather*)malloc(sizeof(Weather));\n    if (newWeather != NULL) {\n        newWeather->temperature = temperature;\n        newWeather->humidity = humidity;\n        strncpy(newWeather->condition, condition, sizeof(newWeather->condition) - 1);\n        newWeather->condition[sizeof(newWeather->condition) - 1] = '\\0';\n    }\n    return newWeather;\n}\n\nint main() {\n    Weather* todayWeather = createWeather(30.5, 65.0, \"Sunny\");\n\n    if (todayWeather != NULL) {\n        printf(\"Temperature: %.1f\\n\", todayWeather->temperature);\n        printf(\"Humidity: %.1f\\n\", todayWeather->humidity);\n        printf(\"Condition: %s\\n\", todayWeather->condition);\n\n        free(todayWeather);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a class for a Classroom with attributes for room number and capacity, then create an instance.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    int roomNumber;\n    int capacity;\n} Classroom;\n\nClassroom* createClassroom(int roomNumber, int capacity) {\n    Classroom* newClassroom = (Classroom*)malloc(sizeof(Classroom));\n    newClassroom->roomNumber = roomNumber;\n    newClassroom->capacity = capacity;\n    return newClassroom;\n}\n\nint main() {\n    Classroom* classroomInstance = createClassroom(101, 30);\n    printf(\"Classroom Room Number: %d, Capacity: %d\\n\", classroomInstance->roomNumber, classroomInstance->capacity);\n    free(classroomInstance);\n    return 0;\n}\n```"
  },
  {
    "task": "Instantiate an object of a class named Zoo with properties for name and number of animals.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char *name;\n    int numberOfAnimals;\n} Zoo;\n\nZoo* createZoo(const char *name, int numberOfAnimals) {\n    Zoo *newZoo = (Zoo*)malloc(sizeof(Zoo));\n    newZoo->name = (char*)malloc(strlen(name) + 1);\n    strcpy(newZoo->name, name);\n    newZoo->numberOfAnimals = numberOfAnimals;\n    return newZoo;\n}\n\nint main() {\n    Zoo *myZoo = createZoo(\"Safari Park\", 150);\n\n    printf(\"Zoo Name: %s\\n\", myZoo->name);\n    printf(\"Number of Animals: %d\\n\", myZoo->numberOfAnimals);\n\n    // Clean up\n    free(myZoo->name);\n    free(myZoo);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a class for an Album with properties for name, artist, and release date, then instantiate it.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char *name;\n    char *artist;\n    char *release_date;\n} Album;\n\nAlbum* create_album(const char *name, const char *artist, const char *release_date) {\n    Album *new_album = (Album*)malloc(sizeof(Album));\n    new_album->name = strdup(name);\n    new_album->artist = strdup(artist);\n    new_album->release_date = strdup(release_date);\n    return new_album;\n}\n\nint main() {\n    Album *album = create_album(\"The Dark Side of the Moon\", \"Pink Floyd\", \"1973-03-01\");\n    printf(\"Album: %s\\nArtist: %s\\nRelease Date: %s\\n\", album->name, album->artist, album->release_date);\n    free(album->name);\n    free(album->artist);\n    free(album->release_date);\n    free(album);\n    return 0;\n}\n```"
  },
  {
    "task": "Create a new object from a class named Hotel, initializing it with name, location, and star rating.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char *name;\n    char *location;\n    int starRating;\n} Hotel;\n\nHotel* createHotel(const char *name, const char *location, int starRating) {\n    Hotel *newHotel = (Hotel*)malloc(sizeof(Hotel));\n    newHotel->name = strdup(name);\n    newHotel->location = strdup(location);\n    newHotel->starRating = starRating;\n    return newHotel;\n}\n\nint main() {\n    Hotel *myHotel = createHotel(\"Grand Plaza\", \"New York\", 5);\n\n    printf(\"Hotel Name: %s\\n\", myHotel->name);\n    printf(\"Location: %s\\n\", myHotel->location);\n    printf(\"Star Rating: %d\\n\", myHotel->starRating);\n\n    free(myHotel->name);\n    free(myHotel->location);\n    free(myHotel);\n    return 0;\n}\n```"
  },
  {
    "task": "Write a class for a Recipe with properties for name, ingredients, and cooking time, and instantiate it.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char* name;\n    char** ingredients;\n    int ingredient_count;\n    int cooking_time;\n} Recipe;\n\nRecipe* createRecipe(const char* name, char** ingredients, int ingredient_count, int cooking_time) {\n    Recipe* newRecipe = (Recipe*)malloc(sizeof(Recipe));\n    newRecipe->name = strdup(name);\n    newRecipe->ingredients = (char**)malloc(ingredient_count * sizeof(char*));\n    for (int i = 0; i < ingredient_count; i++) {\n        newRecipe->ingredients[i] = strdup(ingredients[i]);\n    }\n    newRecipe->ingredient_count = ingredient_count;\n    newRecipe->cooking_time = cooking_time;\n    return newRecipe;\n}\n\nvoid freeRecipe(Recipe* recipe) {\n    free(recipe->name);\n    for (int i = 0; i < recipe->ingredient_count; i++) {\n        free(recipe->ingredients[i]);\n    }\n    free(recipe->ingredients);\n    free(recipe);\n}\n\nint main() {\n    char* ingredients[] = {\"Flour\", \"Sugar\", \"Eggs\"};\n    Recipe* myRecipe = createRecipe(\"Cake\", ingredients, 3, 45);\n\n    printf(\"Recipe: %s\\n\", myRecipe->name);\n    printf(\"Ingredients:\\n\");\n    for (int i = 0; i < myRecipe->ingredient_count; i++) {\n        printf(\"- %s\\n\", myRecipe->ingredients[i]);\n    }\n    printf(\"Cooking time: %d minutes\\n\", myRecipe->cooking_time);\n\n    freeRecipe(myRecipe);\n    return 0;\n}\n```"
  },
  {
    "task": "Define a class representing a Conference with attributes for name, date, and number of attendees, and create an object.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    char name[100];\n    char date[20];\n    int attendees;\n} Conference;\n\nint main() {\n    Conference conf;\n\n    strcpy(conf.name, \"Tech Conference\");\n    strcpy(conf.date, \"2023-12-01\");\n    conf.attendees = 150;\n\n    printf(\"Conference Name: %s\\n\", conf.name);\n    printf(\"Conference Date: %s\\n\", conf.date);\n    printf(\"Number of Attendees: %d\\n\", conf.attendees);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create an instance of a class called Park with properties for name, location, and area.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char name[50];\n    char location[100];\n    double area;\n} Park;\n\nPark* createPark(const char* name, const char* location, double area) {\n    Park* newPark = (Park*)malloc(sizeof(Park));\n    if (newPark != NULL) {\n        strncpy(newPark->name, name, sizeof(newPark->name) - 1);\n        newPark->name[sizeof(newPark->name) - 1] = '\\0';\n        strncpy(newPark->location, location, sizeof(newPark->location) - 1);\n        newPark->location[sizeof(newPark->location) - 1] = '\\0';\n        newPark->area = area;\n    }\n    return newPark;\n}\n\nint main() {\n    Park* myPark = createPark(\"Central Park\", \"New York, NY\", 843.0);\n    printf(\"Park Name: %s\\nLocation: %s\\nArea: %.2f acres\\n\", myPark->name, myPark->location, myPark->area);\n    free(myPark);\n    return 0;\n}\n```"
  },
  {
    "task": "Design a class for a Bicycle with attributes for brand, type, and wheel size, then create an instance.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    char brand[50];\n    char type[50];\n    int wheel_size;\n} Bicycle;\n\nint main() {\n    Bicycle myBike;\n    \n    strcpy(myBike.brand, \"Trek\");\n    strcpy(myBike.type, \"Mountain\");\n    myBike.wheel_size = 29;\n\n    printf(\"Brand: %s\\nType: %s\\nWheel Size: %d\\n\", myBike.brand, myBike.type, myBike.wheel_size);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Instantiate an object of a class named Festival with properties for name, location, and duration.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    char name[50];\n    char location[50];\n    int duration;\n} Festival;\n\nint main() {\n    Festival myFestival;\n    \n    strcpy(myFestival.name, \"Music Fest\");\n    strcpy(myFestival.location, \"New York\");\n    myFestival.duration = 3;\n\n    printf(\"Festival Name: %s\\n\", myFestival.name);\n    printf(\"Location: %s\\n\", myFestival.location);\n    printf(\"Duration: %d days\\n\", myFestival.duration);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a class for a Ship with properties for name, capacity, and type, then instantiate it.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char *name;\n    int capacity;\n    char *type;\n} Ship;\n\nShip *createShip(const char *name, int capacity, const char *type) {\n    Ship *newShip = (Ship *)malloc(sizeof(Ship));\n    newShip->name = strdup(name);\n    newShip->capacity = capacity;\n    newShip->type = strdup(type);\n    return newShip;\n}\n\nvoid freeShip(Ship *ship) {\n    free(ship->name);\n    free(ship->type);\n    free(ship);\n}\n\nint main() {\n    Ship *myShip = createShip(\"Titanic\", 3000, \"Cruise\");\n    \n    printf(\"Ship Name: %s\\n\", myShip->name);\n    printf(\"Ship Capacity: %d\\n\", myShip->capacity);\n    printf(\"Ship Type: %s\\n\", myShip->type);\n    \n    freeShip(myShip);\n    return 0;\n}\n```"
  },
  {
    "task": "Create an object of a class named Currency with attributes for name, symbol, and exchange rate.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char *name;\n    char *symbol;\n    double exchange_rate;\n} Currency;\n\nCurrency *createCurrency(const char *name, const char *symbol, double exchange_rate) {\n    Currency *currency = (Currency *)malloc(sizeof(Currency));\n    if (currency == NULL) {\n        perror(\"Failed to allocate memory\");\n        exit(EXIT_FAILURE);\n    }\n    currency->name = strdup(name);\n    currency->symbol = strdup(symbol);\n    currency->exchange_rate = exchange_rate;\n    return currency;\n}\n\nint main() {\n    Currency *usd = createCurrency(\"US Dollar\", \"$\", 1.0);\n    printf(\"Currency: %s, Symbol: %s, Exchange Rate: %.2f\\n\", usd->name, usd->symbol, usd->exchange_rate);\n\n    free(usd->name);\n    free(usd->symbol);\n    free(usd);\n    return 0;\n}\n```"
  },
  {
    "task": "Define a class for a Gadget with properties for name, brand, and functionality, then instantiate it.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char *name;\n    char *brand;\n    char *functionality;\n} Gadget;\n\nGadget* createGadget(const char *name, const char *brand, const char *functionality) {\n    Gadget *newGadget = (Gadget*)malloc(sizeof(Gadget));\n    newGadget->name = strdup(name);\n    newGadget->brand = strdup(brand);\n    newGadget->functionality = strdup(functionality);\n    return newGadget;\n}\n\nvoid freeGadget(Gadget* gadget) {\n    free(gadget->name);\n    free(gadget->brand);\n    free(gadget->functionality);\n    free(gadget);\n}\n\nint main() {\n    Gadget *myGadget = createGadget(\"Smartphone\", \"TechBrand\", \"Communication\");\n    printf(\"Gadget Name: %s\\n\", myGadget->name);\n    printf(\"Gadget Brand: %s\\n\", myGadget->brand);\n    printf(\"Gadget Functionality: %s\\n\", myGadget->functionality);\n    freeGadget(myGadget);\n    return 0;\n}\n```"
  },
  {
    "task": "Construct an object from a class named Bridge with attributes for name, length, and location.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char name[50];\n    double length;\n    char location[100];\n} Bridge;\n\nBridge* createBridge(const char* name, double length, const char* location) {\n    Bridge* newBridge = (Bridge*)malloc(sizeof(Bridge));\n    if (newBridge != NULL) {\n        strncpy(newBridge->name, name, sizeof(newBridge->name) - 1);\n        newBridge->name[sizeof(newBridge->name) - 1] = '\\0';\n        newBridge->length = length;\n        strncpy(newBridge->location, location, sizeof(newBridge->location) - 1);\n        newBridge->location[sizeof(newBridge->location) - 1] = '\\0';\n    }\n    return newBridge;\n}\n\nint main() {\n    Bridge* bridge = createBridge(\"Golden Gate\", 2737.4, \"San Francisco\");\n    if (bridge != NULL) {\n        printf(\"Bridge Name: %s\\n\", bridge->name);\n        printf(\"Bridge Length: %.2f meters\\n\", bridge->length);\n        printf(\"Bridge Location: %s\\n\", bridge->location);\n        free(bridge);\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Create an instance of a class called Forest with properties for name, area, and tree species.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char name[50];\n    float area;\n    char treeSpecies[50];\n} Forest;\n\nForest* createForest(const char* name, float area, const char* treeSpecies) {\n    Forest* newForest = (Forest*)malloc(sizeof(Forest));\n    if (newForest == NULL) {\n        return NULL;\n    }\n    strncpy(newForest->name, name, sizeof(newForest->name) - 1);\n    newForest->name[sizeof(newForest->name) - 1] = '\\0';\n    newForest->area = area;\n    strncpy(newForest->treeSpecies, treeSpecies, sizeof(newForest->treeSpecies) - 1);\n    newForest->treeSpecies[sizeof(newForest->treeSpecies) - 1] = '\\0';\n    return newForest;\n}\n\nint main() {\n    Forest* myForest = createForest(\"Amazon\", 5500.0, \"Tropical\");\n    if (myForest != NULL) {\n        printf(\"Forest Name: %s\\n\", myForest->name);\n        printf(\"Forest Area: %.2f\\n\", myForest->area);\n        printf(\"Tree Species: %s\\n\", myForest->treeSpecies);\n        free(myForest);\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Design a class for a Sculpture with attributes for title, artist, and material, then create an instance.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char title[100];\n    char artist[100];\n    char material[100];\n} Sculpture;\n\nSculpture* createSculpture(const char* title, const char* artist, const char* material) {\n    Sculpture* newSculpture = (Sculpture*)malloc(sizeof(Sculpture));\n    if (newSculpture != NULL) {\n        strncpy(newSculpture->title, title, sizeof(newSculpture->title) - 1);\n        newSculpture->title[sizeof(newSculpture->title) - 1] = '\\0';\n        strncpy(newSculpture->artist, artist, sizeof(newSculpture->artist) - 1);\n        newSculpture->artist[sizeof(newSculpture->artist) - 1] = '\\0';\n        strncpy(newSculpture->material, material, sizeof(newSculpture->material) - 1);\n        newSculpture->material[sizeof(newSculpture->material) - 1] = '\\0';\n    }\n    return newSculpture;\n}\n\nint main() {\n    Sculpture* mySculpture = createSculpture(\"The Thinker\", \"Auguste Rodin\", \"Bronze\");\n    \n    if (mySculpture != NULL) {\n        printf(\"Sculpture Title: %s\\n\", mySculpture->title);\n        printf(\"Artist: %s\\n\", mySculpture->artist);\n        printf(\"Material: %s\\n\", mySculpture->material);\n        \n        free(mySculpture);\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Instantiate an object of a class named Aquarium with properties for name and number of tanks.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char name[50];\n    int numberOfTanks;\n} Aquarium;\n\nAquarium* createAquarium(const char* name, int numberOfTanks) {\n    Aquarium* newAquarium = (Aquarium*)malloc(sizeof(Aquarium));\n    if (newAquarium != NULL) {\n        strncpy(newAquarium->name, name, sizeof(newAquarium->name) - 1);\n        newAquarium->name[sizeof(newAquarium->name) - 1] = '\\0';\n        newAquarium->numberOfTanks = numberOfTanks;\n    }\n    return newAquarium;\n}\n\nint main() {\n    Aquarium* myAquarium = createAquarium(\"Sea World\", 5);\n    if (myAquarium != NULL) {\n        printf(\"Aquarium Name: %s, Number of Tanks: %d\\n\", myAquarium->name, myAquarium->numberOfTanks);\n        free(myAquarium);\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a class for a Play with properties for title, playwright, and genre, then instantiate it.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char title[100];\n    char playwright[100];\n    char genre[100];\n} Play;\n\nPlay* createPlay(const char* title, const char* playwright, const char* genre) {\n    Play* newPlay = (Play*)malloc(sizeof(Play));\n    strncpy(newPlay->title, title, sizeof(newPlay->title) - 1);\n    strncpy(newPlay->playwright, playwright, sizeof(newPlay->playwright) - 1);\n    strncpy(newPlay->genre, genre, sizeof(newPlay->genre) - 1);\n    return newPlay;\n}\n\nint main() {\n    Play* myPlay = createPlay(\"Hamlet\", \"William Shakespeare\", \"Tragedy\");\n\n    printf(\"Title: %s\\n\", myPlay->title);\n    printf(\"Playwright: %s\\n\", myPlay->playwright);\n    printf(\"Genre: %s\\n\", myPlay->genre);\n\n    free(myPlay);\n    return 0;\n}\n```"
  },
  {
    "task": "Create a new object from a class named Telescope, initializing it with type and focal length.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char type[50];\n    double focalLength;\n} Telescope;\n\nTelescope* createTelescope(const char* type, double focalLength) {\n    Telescope* newTelescope = (Telescope*)malloc(sizeof(Telescope));\n    if (newTelescope == NULL) {\n        perror(\"Failed to allocate memory\");\n        exit(EXIT_FAILURE);\n    }\n    strncpy(newTelescope->type, type, sizeof(newTelescope->type) - 1);\n    newTelescope->type[sizeof(newTelescope->type) - 1] = '\\0';\n    newTelescope->focalLength = focalLength;\n    return newTelescope;\n}\n\nint main() {\n    Telescope* myTelescope = createTelescope(\"Reflector\", 1200.0);\n    printf(\"Telescope Type: %s\\n\", myTelescope->type);\n    printf(\"Focal Length: %.2f\\n\", myTelescope->focalLength);\n    free(myTelescope);\n    return 0;\n}\n```"
  },
  {
    "task": "Write a class for a Monument with properties for name, location, and year built, and instantiate it.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char name[100];\n    char location[100];\n    int yearBuilt;\n} Monument;\n\nMonument* createMonument(const char* name, const char* location, int yearBuilt) {\n    Monument* newMonument = (Monument*)malloc(sizeof(Monument));\n    strcpy(newMonument->name, name);\n    strcpy(newMonument->location, location);\n    newMonument->yearBuilt = yearBuilt;\n    return newMonument;\n}\n\nint main() {\n    Monument* myMonument = createMonument(\"Statue of Liberty\", \"New York\", 1886);\n    printf(\"Monument: %s, Location: %s, Year Built: %d\\n\", myMonument->name, myMonument->location, myMonument->yearBuilt);\n    free(myMonument);\n    return 0;\n}\n```"
  },
  {
    "task": "Define a class representing a Star with attributes for name, size, and distance from Earth, and create an object.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    char name[50];\n    double size;\n    double distanceFromEarth;\n} Star;\n\nint main() {\n    Star myStar;\n    strcpy(myStar.name, \"Sirius\");\n    myStar.size = 1.71;\n    myStar.distanceFromEarth = 8.6;\n\n    printf(\"Star Name: %s\\n\", myStar.name);\n    printf(\"Size: %.2f\\n\", myStar.size);\n    printf(\"Distance from Earth: %.2f light years\\n\", myStar.distanceFromEarth);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create an instance of a class called Festival with properties for name, location, and number of events.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char *name;\n    char *location;\n    int numberOfEvents;\n} Festival;\n\nFestival* createFestival(const char *name, const char *location, int numberOfEvents) {\n    Festival *newFestival = (Festival *)malloc(sizeof(Festival));\n    newFestival->name = strdup(name);\n    newFestival->location = strdup(location);\n    newFestival->numberOfEvents = numberOfEvents;\n    return newFestival;\n}\n\nint main() {\n    Festival *myFestival = createFestival(\"Music Fest\", \"New York\", 5);\n    printf(\"Festival: %s\\n\", myFestival->name);\n    printf(\"Location: %s\\n\", myFestival->location);\n    printf(\"Number of Events: %d\\n\", myFestival->numberOfEvents);\n\n    free(myFestival->name);\n    free(myFestival->location);\n    free(myFestival);\n    return 0;\n}\n```"
  },
  {
    "task": "Design a class for a Clock with attributes for brand, type, and display, then create an instance.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    char brand[50];\n    char type[50];\n    char display[50];\n} Clock;\n\nint main() {\n    Clock myClock;\n\n    strcpy(myClock.brand, \"Seiko\");\n    strcpy(myClock.type, \"Analog\");\n    strcpy(myClock.display, \"12-Hour\");\n\n    printf(\"Clock Brand: %s\\n\", myClock.brand);\n    printf(\"Clock Type: %s\\n\", myClock.type);\n    printf(\"Clock Display: %s\\n\", myClock.display);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Instantiate an object of a class named Stadium with properties for name, capacity, and location.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char* name;\n    int capacity;\n    char* location;\n} Stadium;\n\nStadium* create_stadium(const char* name, int capacity, const char* location) {\n    Stadium* new_stadium = (Stadium*)malloc(sizeof(Stadium));\n    new_stadium->name = strdup(name);\n    new_stadium->capacity = capacity;\n    new_stadium->location = strdup(location);\n    return new_stadium;\n}\n\nint main() {\n    Stadium* myStadium = create_stadium(\"Olympic Stadium\", 80000, \"Athens\");\n    printf(\"Stadium Name: %s\\n\", myStadium->name);\n    printf(\"Capacity: %d\\n\", myStadium->capacity);\n    printf(\"Location: %s\\n\", myStadium->location);\n\n    free(myStadium->name);\n    free(myStadium->location);\n    free(myStadium);\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a class for a Potion with properties for name, effect, and duration, then instantiate it.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char name[50];\n    char effect[100];\n    int duration;\n} Potion;\n\nPotion* createPotion(const char* name, const char* effect, int duration) {\n    Potion* newPotion = (Potion*)malloc(sizeof(Potion));\n    if (newPotion != NULL) {\n        strncpy(newPotion->name, name, sizeof(newPotion->name) - 1);\n        newPotion->name[sizeof(newPotion->name) - 1] = '\\0';\n        strncpy(newPotion->effect, effect, sizeof(newPotion->effect) - 1);\n        newPotion->effect[sizeof(newPotion->effect) - 1] = '\\0';\n        newPotion->duration = duration;\n    }\n    return newPotion;\n}\n\nint main() {\n    Potion* healthPotion = createPotion(\"Health Potion\", \"Restores Health\", 5);\n    if (healthPotion != NULL) {\n        printf(\"Potion: %s\\nEffect: %s\\nDuration: %d minutes\\n\", healthPotion->name, healthPotion->effect, healthPotion->duration);\n        free(healthPotion);\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Create an object of a class named Planet with attributes for name, mass, and orbital period.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n// Define the Planet structure\ntypedef struct {\n    char name[50];\n    double mass;\n    double orbital_period;\n} Planet;\n\n// Function to create a Planet object\nPlanet* createPlanet(const char* name, double mass, double orbital_period) {\n    Planet* newPlanet = (Planet*)malloc(sizeof(Planet));\n    if (newPlanet != NULL) {\n        strncpy(newPlanet->name, name, sizeof(newPlanet->name) - 1);\n        newPlanet->name[sizeof(newPlanet->name) - 1] = '\\0';\n        newPlanet->mass = mass;\n        newPlanet->orbital_period = orbital_period;\n    }\n    return newPlanet;\n}\n\nint main() {\n    // Create an object of Planet\n    Planet* earth = createPlanet(\"Earth\", 5.972e24, 365.25);\n\n    // Use the Planet\n    if (earth != NULL) {\n        printf(\"Planet Name: %s\\n\", earth->name);\n        printf(\"Planet Mass: %e kg\\n\", earth->mass);\n        printf(\"Orbital Period: %lf days\\n\", earth->orbital_period);\n\n        // Free the allocated memory\n        free(earth);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Define a class for a Lighthouse with properties for name, height, and light range, then instantiate it.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char name[50];\n    int height;\n    int lightRange;\n} Lighthouse;\n\nLighthouse* createLighthouse(const char* name, int height, int lightRange) {\n    Lighthouse* newLighthouse = (Lighthouse*)malloc(sizeof(Lighthouse));\n    strcpy(newLighthouse->name, name);\n    newLighthouse->height = height;\n    newLighthouse->lightRange = lightRange;\n    return newLighthouse;\n}\n\nint main() {\n    Lighthouse* lighthouse = createLighthouse(\"Beacon Light\", 150, 20);\n\n    printf(\"Lighthouse Name: %s\\n\", lighthouse->name);\n    printf(\"Height: %d\\n\", lighthouse->height);\n    printf(\"Light Range: %d\\n\", lighthouse->lightRange);\n\n    free(lighthouse);\n    return 0;\n}\n```"
  },
  {
    "task": "Construct an object from a class named Volcano with attributes for name, height, and eruption history.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    char *name;\n    double height;\n    char *eruptionHistory;\n} Volcano;\n\nVolcano* createVolcano(char *name, double height, char *eruptionHistory) {\n    Volcano *volcano = (Volcano *)malloc(sizeof(Volcano));\n    if (volcano != NULL) {\n        volcano->name = name;\n        volcano->height = height;\n        volcano->eruptionHistory = eruptionHistory;\n    }\n    return volcano;\n}\n\nint main() {\n    Volcano *myVolcano = createVolcano(\"Mount St. Helens\", 2549.0, \"1980, 2004-2008\");\n    printf(\"Volcano Name: %s\\n\", myVolcano->name);\n    printf(\"Height: %.2f meters\\n\", myVolcano->height);\n    printf(\"Eruption History: %s\\n\", myVolcano->eruptionHistory);\n    free(myVolcano);\n    return 0;\n}\n```"
  },
  {
    "task": "Create an instance of a class called Sculpture with properties for title, artist, and year created.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char title[100];\n    char artist[100];\n    int year_created;\n} Sculpture;\n\nSculpture* create_sculpture(const char* title, const char* artist, int year_created) {\n    Sculpture* sculpture = (Sculpture*)malloc(sizeof(Sculpture));\n    if (sculpture != NULL) {\n        strncpy(sculpture->title, title, sizeof(sculpture->title) - 1);\n        sculpture->title[sizeof(sculpture->title) - 1] = '\\0';\n        strncpy(sculpture->artist, artist, sizeof(sculpture->artist) - 1);\n        sculpture->artist[sizeof(sculpture->artist) - 1] = '\\0';\n        sculpture->year_created = year_created;\n    }\n    return sculpture;\n}\n\nint main() {\n    Sculpture* mySculpture = create_sculpture(\"The Thinker\", \"Auguste Rodin\", 1904);\n    if (mySculpture != NULL) {\n        printf(\"Title: %s\\n\", mySculpture->title);\n        printf(\"Artist: %s\\n\", mySculpture->artist);\n        printf(\"Year Created: %d\\n\", mySculpture->year_created);\n        free(mySculpture);\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Design a class for a Ship with attributes for name, type, and displacement, then create an instance.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char name[50];\n    char type[50];\n    float displacement;\n} Ship;\n\nShip* createShip(const char* name, const char* type, float displacement) {\n    Ship* newShip = (Ship*)malloc(sizeof(Ship));\n    if (newShip != NULL) {\n        strncpy(newShip->name, name, sizeof(newShip->name) - 1);\n        newShip->name[sizeof(newShip->name) - 1] = '\\0';\n        strncpy(newShip->type, type, sizeof(newShip->type) - 1);\n        newShip->type[sizeof(newShip->type) - 1] = '\\0';\n        newShip->displacement = displacement;\n    }\n    return newShip;\n}\n\nint main() {\n    Ship* ship = createShip(\"Titanic\", \"Cruise\", 52310.0);\n    \n    if (ship != NULL) {\n        printf(\"Ship Name: %s\\n\", ship->name);\n        printf(\"Ship Type: %s\\n\", ship->type);\n        printf(\"Ship Displacement: %.2f\\n\", ship->displacement);\n        free(ship);\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Instantiate an object of a class named Opera with properties for title, composer, and act count.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    char title[50];\n    char composer[50];\n    int actCount;\n} Opera;\n\nint main() {\n    // Create an instance of Opera\n    Opera myOpera;\n    \n    // Initialize properties\n    strcpy(myOpera.title, \"La Traviata\");\n    strcpy(myOpera.composer, \"Giuseppe Verdi\");\n    myOpera.actCount = 3;\n    \n    // Example usage\n    printf(\"Opera Title: %s\\n\", myOpera.title);\n    printf(\"Composer: %s\\n\", myOpera.composer);\n    printf(\"Act Count: %d\\n\", myOpera.actCount);\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Develop a class for a Waterfall with properties for name, height, and flow rate, then instantiate it.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char name[50];\n    double height;\n    double flow_rate;\n} Waterfall;\n\nWaterfall* createWaterfall(const char* name, double height, double flow_rate) {\n    Waterfall* wf = (Waterfall*)malloc(sizeof(Waterfall));\n    if (wf != NULL) {\n        strncpy(wf->name, name, sizeof(wf->name) - 1);\n        wf->name[sizeof(wf->name) - 1] = '\\0';\n        wf->height = height;\n        wf->flow_rate = flow_rate;\n    }\n    return wf;\n}\n\nint main() {\n    Waterfall* niagara = createWaterfall(\"Niagara Falls\", 51.0, 2800.0);\n    \n    if (niagara != NULL) {\n        printf(\"Waterfall Name: %s\\n\", niagara->name);\n        printf(\"Height: %.2f meters\\n\", niagara->height);\n        printf(\"Flow Rate: %.2f cubic meters per second\\n\", niagara->flow_rate);\n        free(niagara);\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Create a new object from a class named Castle, initializing it with name, location, and year built.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char *name;\n    char *location;\n    int year_built;\n} Castle;\n\nCastle* create_castle(const char *name, const char *location, int year_built) {\n    Castle *new_castle = (Castle *)malloc(sizeof(Castle));\n    new_castle->name = strdup(name);\n    new_castle->location = strdup(location);\n    new_castle->year_built = year_built;\n    return new_castle;\n}\n\nint main() {\n    Castle *my_castle = create_castle(\"Winterfell\", \"North\", 1472);\n    printf(\"Castle: %s, Location: %s, Year Built: %d\\n\", my_castle->name, my_castle->location, my_castle->year_built);\n    free(my_castle->name);\n    free(my_castle->location);\n    free(my_castle);\n    return 0;\n}\n```"
  },
  {
    "task": "Write a class for a Cat with properties for name, breed, and color, and instantiate it.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char name[50];\n    char breed[50];\n    char color[50];\n} Cat;\n\nCat* createCat(const char* name, const char* breed, const char* color) {\n    Cat* newCat = (Cat*)malloc(sizeof(Cat));\n    strcpy(newCat->name, name);\n    strcpy(newCat->breed, breed);\n    strcpy(newCat->color, color);\n    return newCat;\n}\n\nint main() {\n    Cat* myCat = createCat(\"Whiskers\", \"Siamese\", \"Brown\");\n    printf(\"Cat Details:\\nName: %s\\nBreed: %s\\nColor: %s\\n\", myCat->name, myCat->breed, myCat->color);\n    free(myCat);\n    return 0;\n}\n```"
  },
  {
    "task": "Define a class representing a Spaceship with attributes for name, speed, and crew capacity, and create an object.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char name[50];\n    int speed;\n    int crew_capacity;\n} Spaceship;\n\nint main() {\n    Spaceship *spaceship = (Spaceship *)malloc(sizeof(Spaceship));\n    strcpy(spaceship->name, \"Galaxy Cruiser\");\n    spaceship->speed = 75000;\n    spaceship->crew_capacity = 100;\n\n    printf(\"Spaceship Name: %s\\n\", spaceship->name);\n    printf(\"Speed: %d\\n\", spaceship->speed);\n    printf(\"Crew Capacity: %d\\n\", spaceship->crew_capacity);\n\n    free(spaceship);\n    return 0;\n}\n```"
  },
  {
    "task": "Create an instance of a class called Robot with properties for name, model, and function.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char* name;\n    char* model;\n    char* function;\n} Robot;\n\nRobot* createRobot(const char* name, const char* model, const char* function) {\n    Robot* newRobot = (Robot*) malloc(sizeof(Robot));\n    newRobot->name = strdup(name);\n    newRobot->model = strdup(model);\n    newRobot->function = strdup(function);\n    return newRobot;\n}\n\nvoid freeRobot(Robot* robot) {\n    free(robot->name);\n    free(robot->model);\n    free(robot->function);\n    free(robot);\n}\n\nint main() {\n    Robot* myRobot = createRobot(\"Robo1\", \"XJ-9\", \"Housekeeping\");\n    printf(\"Robot Name: %s\\n\", myRobot->name);\n    printf(\"Robot Model: %s\\n\", myRobot->model);\n    printf(\"Robot Function: %s\\n\", myRobot->function);\n    freeRobot(myRobot);\n    return 0;\n}\n```"
  },
  {
    "task": "Design a class for a Computer Program with attributes for name, language, and lines of code, then create an instance.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char name[50];\n    char language[50];\n    int lines_of_code;\n} ComputerProgram;\n\nint main() {\n    ComputerProgram program;\n    strcpy(program.name, \"Example Program\");\n    strcpy(program.language, \"C\");\n    program.lines_of_code = 150;\n\n    printf(\"Program Name: %s\\n\", program.name);\n    printf(\"Programming Language: %s\\n\", program.language);\n    printf(\"Lines of Code: %d\\n\", program.lines_of_code);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Instantiate an object of a class named Mountain with properties for name, range, and prominence.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char name[100];\n    char range[100];\n    double prominence;\n} Mountain;\n\nMountain* createMountain(const char* name, const char* range, double prominence) {\n    Mountain* newMountain = (Mountain*)malloc(sizeof(Mountain));\n    if (newMountain) {\n        strncpy(newMountain->name, name, sizeof(newMountain->name) - 1);\n        newMountain->name[sizeof(newMountain->name) - 1] = '\\0';\n        strncpy(newMountain->range, range, sizeof(newMountain->range) - 1);\n        newMountain->range[sizeof(newMountain->range) - 1] = '\\0';\n        newMountain->prominence = prominence;\n    }\n    return newMountain;\n}\n\nint main() {\n    Mountain* myMountain = createMountain(\"Everest\", \"Himalayas\", 8848.86);\n    if (myMountain) {\n        printf(\"Mountain Name: %s\\n\", myMountain->name);\n        printf(\"Mountain Range: %s\\n\", myMountain->range);\n        printf(\"Mountain Prominence: %.2f\\n\", myMountain->prominence);\n        free(myMountain);\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a class for a Painting with properties for title, artist, and dimensions, then instantiate it.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char *title;\n    char *artist;\n    float width;\n    float height;\n} Painting;\n\nPainting* createPainting(const char *title, const char *artist, float width, float height) {\n    Painting *newPainting = (Painting *)malloc(sizeof(Painting));\n    newPainting->title = strdup(title);\n    newPainting->artist = strdup(artist);\n    newPainting->width = width;\n    newPainting->height = height;\n    return newPainting;\n}\n\nvoid freePainting(Painting *painting) {\n    free(painting->title);\n    free(painting->artist);\n    free(painting);\n}\n\nint main() {\n    Painting *myPainting = createPainting(\"Starry Night\", \"Vincent van Gogh\", 73.7, 92.1);\n    \n    printf(\"Title: %s\\n\", myPainting->title);\n    printf(\"Artist: %s\\n\", myPainting->artist);\n    printf(\"Dimensions: %.2fx%.2f cm\\n\", myPainting->width, myPainting->height);\n\n    freePainting(myPainting);\n    return 0;\n}\n```"
  },
  {
    "task": "Create an object of a class named Symphony with attributes for title, composer, and movement count.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char title[100];\n    char composer[100];\n    int movement_count;\n} Symphony;\n\nint main() {\n    Symphony *symphony = (Symphony *)malloc(sizeof(Symphony));\n    if (symphony == NULL) {\n        fprintf(stderr, \"Memory allocation failed\\n\");\n        return 1;\n    }\n\n    strcpy(symphony->title, \"Symphony No. 5\");\n    strcpy(symphony->composer, \"Ludwig van Beethoven\");\n    symphony->movement_count = 4;\n\n    printf(\"Title: %s\\n\", symphony->title);\n    printf(\"Composer: %s\\n\", symphony->composer);\n    printf(\"Movement Count: %d\\n\", symphony->movement_count);\n\n    free(symphony);\n    return 0;\n}\n```"
  },
  {
    "task": "Define a class for a Dinosaur with properties for name, period, and diet, then instantiate it.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char name[50];\n    char period[50];\n    char diet[50];\n} Dinosaur;\n\nDinosaur* createDinosaur(const char* name, const char* period, const char* diet) {\n    Dinosaur* dino = (Dinosaur*)malloc(sizeof(Dinosaur));\n    strcpy(dino->name, name);\n    strcpy(dino->period, period);\n    strcpy(dino->diet, diet);\n    return dino;\n}\n\nint main() {\n    Dinosaur* myDino = createDinosaur(\"Tyrannosaurus Rex\", \"Cretaceous\", \"Carnivore\");\n    \n    printf(\"Dinosaur Name: %s\\n\", myDino->name);\n    printf(\"Period: %s\\n\", myDino->period);\n    printf(\"Diet: %s\\n\", myDino->diet);\n    \n    free(myDino);\n    return 0;\n}\n```"
  },
  {
    "task": "Construct an object from a class named River with attributes for name, length, and basin size.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char name[100];\n    float length;\n    float basin_size;\n} River;\n\nRiver* create_river(const char *name, float length, float basin_size) {\n    River *new_river = (River *)malloc(sizeof(River));\n    if (new_river != NULL) {\n        strncpy(new_river->name, name, sizeof(new_river->name) - 1);\n        new_river->name[sizeof(new_river->name) - 1] = '\\0';\n        new_river->length = length;\n        new_river->basin_size = basin_size;\n    }\n    return new_river;\n}\n\nint main() {\n    River *nile = create_river(\"Nile\", 6650.0, 3340000.0);\n    if (nile != NULL) {\n        printf(\"River: %s, Length: %.2f km, Basin Size: %.2f sq km\\n\", nile->name, nile->length, nile->basin_size);\n        free(nile);\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Create an instance of a class called Instrument with properties for name, type, and material.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    char name[50];\n    char type[50];\n    char material[50];\n} Instrument;\n\nint main() {\n    Instrument myInstrument;\n\n    strcpy(myInstrument.name, \"Guitar\");\n    strcpy(myInstrument.type, \"String\");\n    strcpy(myInstrument.material, \"Wood\");\n\n    printf(\"Instrument Name: %s\\n\", myInstrument.name);\n    printf(\"Instrument Type: %s\\n\", myInstrument.type);\n    printf(\"Instrument Material: %s\\n\", myInstrument.material);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a class for a Planetarium with attributes for name, location, and dome size, then create an instance.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char name[100];\n    char location[100];\n    double dome_size;\n} Planetarium;\n\nPlanetarium* create_planetarium(const char* name, const char* location, double dome_size) {\n    Planetarium* p = (Planetarium*)malloc(sizeof(Planetarium));\n    strcpy(p->name, name);\n    strcpy(p->location, location);\n    p->dome_size = dome_size;\n    return p;\n}\n\nint main() {\n    Planetarium* p = create_planetarium(\"Cosmic Wonders\", \"Greenwich\", 25.5);\n    printf(\"Planetarium Name: %s\\n\", p->name);\n    printf(\"Location: %s\\n\", p->location);\n    printf(\"Dome Size: %.2f\\n\", p->dome_size);\n    free(p);\n    return 0;\n}\n```"
  },
  {
    "task": "Instantiate an object of a class named Island with properties for name, area, and population.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char name[50];\n    double area;\n    int population;\n} Island;\n\nint main() {\n    Island *island = (Island *)malloc(sizeof(Island));\n    \n    strcpy(island->name, \"Bora Bora\");\n    island->area = 30.55;\n    island->population = 10780;\n\n    printf(\"Island Name: %s\\nArea: %.2f km\u00b2\\nPopulation: %d\\n\", island->name, island->area, island->population);\n\n    free(island);\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a class for a Space Station with properties for name, crew size, and modules, then instantiate it.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char name[50];\n    int crewSize;\n    int modules;\n} SpaceStation;\n\nSpaceStation* createSpaceStation(const char* name, int crewSize, int modules) {\n    SpaceStation* station = (SpaceStation*)malloc(sizeof(SpaceStation));\n    strncpy(station->name, name, sizeof(station->name) - 1);\n    station->name[sizeof(station->name) - 1] = '\\0';\n    station->crewSize = crewSize;\n    station->modules = modules;\n    return station;\n}\n\nint main() {\n    SpaceStation* myStation = createSpaceStation(\"Orbital One\", 150, 12);\n\n    printf(\"Space Station Name: %s\\n\", myStation->name);\n    printf(\"Crew Size: %d\\n\", myStation->crewSize);\n    printf(\"Modules: %d\\n\", myStation->modules);\n\n    free(myStation);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a new object from a class named Dinosaur, initializing it with species and period.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char species[50];\n    char period[50];\n} Dinosaur;\n\nDinosaur* createDinosaur(const char* species, const char* period) {\n    Dinosaur* newDino = (Dinosaur*)malloc(sizeof(Dinosaur));\n    if (newDino != NULL) {\n        strncpy(newDino->species, species, sizeof(newDino->species) - 1);\n        newDino->species[sizeof(newDino->species) - 1] = '\\0';\n        strncpy(newDino->period, period, sizeof(newDino->period) - 1);\n        newDino->period[sizeof(newDino->period) - 1] = '\\0';\n    }\n    return newDino;\n}\n\nint main() {\n    Dinosaur* myDino = createDinosaur(\"Tyrannosaurus\", \"Cretaceous\");\n    if (myDino != NULL) {\n        printf(\"Dinosaur: %s, Period: %s\\n\", myDino->species, myDino->period);\n        free(myDino);\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Write a class for a Tree with properties for species, height, and age, and instantiate it.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char species[50];\n    float height;\n    int age;\n} Tree;\n\nTree* create_tree(const char* species, float height, int age) {\n    Tree* new_tree = (Tree*)malloc(sizeof(Tree));\n    strcpy(new_tree->species, species);\n    new_tree->height = height;\n    new_tree->age = age;\n    return new_tree;\n}\n\nint main() {\n    Tree* myTree = create_tree(\"Oak\", 15.5, 100);\n    \n    printf(\"Tree Species: %s\\n\", myTree->species);\n    printf(\"Tree Height: %.2f\\n\", myTree->height);\n    printf(\"Tree Age: %d\\n\", myTree->age);\n    \n    free(myTree);\n    return 0;\n}\n```"
  },
  {
    "task": "Define a class representing a Firework with attributes for name, color, and duration, and create an object.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    char name[50];\n    char color[50];\n    int duration;\n} Firework;\n\nint main() {\n    Firework firework;\n\n    strcpy(firework.name, \"Sparkler\");\n    strcpy(firework.color, \"Red\");\n    firework.duration = 10;\n\n    printf(\"Firework Name: %s\\n\", firework.name);\n    printf(\"Firework Color: %s\\n\", firework.color);\n    printf(\"Firework Duration: %d seconds\\n\", firework.duration);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create an instance of a class called ComicBook with properties for title, author, and issue number.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char title[100];\n    char author[100];\n    int issueNumber;\n} ComicBook;\n\nComicBook* createComicBook(const char* title, const char* author, int issueNumber) {\n    ComicBook* newComicBook = (ComicBook*)malloc(sizeof(ComicBook));\n    if (newComicBook != NULL) {\n        strncpy(newComicBook->title, title, sizeof(newComicBook->title) - 1);\n        newComicBook->title[sizeof(newComicBook->title) - 1] = '\\0';\n        strncpy(newComicBook->author, author, sizeof(newComicBook->author) - 1);\n        newComicBook->author[sizeof(newComicBook->author) - 1] = '\\0';\n        newComicBook->issueNumber = issueNumber;\n    }\n    return newComicBook;\n}\n\nint main() {\n    ComicBook* myComic = createComicBook(\"The Amazing Spider-Man\", \"Stan Lee\", 1);\n    if (myComic != NULL) {\n        printf(\"Title: %s\\n\", myComic->title);\n        printf(\"Author: %s\\n\", myComic->author);\n        printf(\"Issue Number: %d\\n\", myComic->issueNumber);\n        free(myComic);\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Design a class for a Metropolis with attributes for name, population, and GDP, then create an instance.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char name[100];\n    int population;\n    double gdp;\n} Metropolis;\n\nint main() {\n    Metropolis *city = (Metropolis *)malloc(sizeof(Metropolis));\n    strcpy(city->name, \"MetropolisName\");\n    city->population = 1000000;\n    city->gdp = 1234567890.0;\n\n    printf(\"City Name: %s\\n\", city->name);\n    printf(\"Population: %d\\n\", city->population);\n    printf(\"GDP: %.2f\\n\", city->gdp);\n\n    free(city);\n    return 0;\n}\n```"
  },
  {
    "task": "Instantiate an object of a class named Dragon with properties for name, element, and age.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char name[50];\n    char element[50];\n    int age;\n} Dragon;\n\nDragon* createDragon(const char* name, const char* element, int age) {\n    Dragon* newDragon = (Dragon*)malloc(sizeof(Dragon));\n    if (newDragon != NULL) {\n        strncpy(newDragon->name, name, sizeof(newDragon->name) - 1);\n        newDragon->name[sizeof(newDragon->name) - 1] = '\\0';\n        strncpy(newDragon->element, element, sizeof(newDragon->element) - 1);\n        newDragon->element[sizeof(newDragon->element) - 1] = '\\0';\n        newDragon->age = age;\n    }\n    return newDragon;\n}\n\nint main() {\n    Dragon* myDragon = createDragon(\"Smaug\", \"Fire\", 1000);\n    printf(\"Dragon: %s, Element: %s, Age: %d\\n\", myDragon->name, myDragon->element, myDragon->age);\n    \n    free(myDragon);\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a class for a Novel with properties for title, author, and genre, then instantiate it.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n// Define the Novel structure\ntypedef struct {\n    char title[100];\n    char author[100];\n    char genre[100];\n} Novel;\n\n// Function to create a new Novel\nNovel* createNovel(const char* title, const char* author, const char* genre) {\n    Novel* novel = (Novel*)malloc(sizeof(Novel));\n    if (novel != NULL) {\n        strncpy(novel->title, title, sizeof(novel->title) - 1);\n        novel->title[sizeof(novel->title) - 1] = '\\0';\n        strncpy(novel->author, author, sizeof(novel->author) - 1);\n        novel->author[sizeof(novel->author) - 1] = '\\0';\n        strncpy(novel->genre, genre, sizeof(novel->genre) - 1);\n        novel->genre[sizeof(novel->genre) - 1] = '\\0';\n    }\n    return novel;\n}\n\n// Function to free the Novel\nvoid freeNovel(Novel* novel) {\n    if (novel != NULL) {\n        free(novel);\n    }\n}\n\nint main() {\n    // Instantiate a Novel\n    Novel* myNovel = createNovel(\"1984\", \"George Orwell\", \"Dystopian\");\n\n    // Output the Novel's properties\n    if (myNovel != NULL) {\n        printf(\"Title: %s\\n\", myNovel->title);\n        printf(\"Author: %s\\n\", myNovel->author);\n        printf(\"Genre: %s\\n\", myNovel->genre);\n    }\n\n    // Clean up memory\n    freeNovel(myNovel);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create an object of a class named Satellite with attributes for name, orbit, and mission.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char name[50];\n    char orbit[50];\n    char mission[100];\n} Satellite;\n\nSatellite* createSatellite(const char* name, const char* orbit, const char* mission) {\n    Satellite* newSatellite = (Satellite*)malloc(sizeof(Satellite));\n    strcpy(newSatellite->name, name);\n    strcpy(newSatellite->orbit, orbit);\n    strcpy(newSatellite->mission, mission);\n    return newSatellite;\n}\n\nint main() {\n    Satellite* mySatellite = createSatellite(\"Hubble\", \"Low Earth Orbit\", \"Space observation\");\n    printf(\"Satellite Name: %s\\n\", mySatellite->name);\n    printf(\"Orbit: %s\\n\", mySatellite->orbit);\n    printf(\"Mission: %s\\n\", mySatellite->mission);\n    free(mySatellite);\n    return 0;\n}\n```"
  },
  {
    "task": "Define a class for a Castle with properties for name, location, and architectural style, then instantiate it.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char *name;\n    char *location;\n    char *architectural_style;\n} Castle;\n\nCastle *create_castle(const char *name, const char *location, const char *architectural_style) {\n    Castle *new_castle = (Castle *)malloc(sizeof(Castle));\n    new_castle->name = strdup(name);\n    new_castle->location = strdup(location);\n    new_castle->architectural_style = strdup(architectural_style);\n    return new_castle;\n}\n\nvoid free_castle(Castle *castle) {\n    free(castle->name);\n    free(castle->location);\n    free(castle->architectural_style);\n    free(castle);\n}\n\nint main() {\n    Castle *my_castle = create_castle(\"Winterfell\", \"The North\", \"Medieval\");\n    printf(\"Castle Name: %s\\n\", my_castle->name);\n    printf(\"Location: %s\\n\", my_castle->location);\n    printf(\"Architectural Style: %s\\n\", my_castle->architectural_style);\n    free_castle(my_castle);\n    return 0;\n}\n```"
  },
  {
    "task": "Construct an object from a class named Jungle with attributes for name, area, and biodiversity.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char name[50];\n    float area;\n    int biodiversity;\n} Jungle;\n\nJungle* createJungle(const char* name, float area, int biodiversity) {\n    Jungle* newJungle = (Jungle*)malloc(sizeof(Jungle));\n    if (newJungle == NULL) {\n        return NULL;\n    }\n    strncpy(newJungle->name, name, sizeof(newJungle->name) - 1);\n    newJungle->name[sizeof(newJungle->name) - 1] = '\\0';\n    newJungle->area = area;\n    newJungle->biodiversity = biodiversity;\n    return newJungle;\n}\n\nint main() {\n    Jungle* amazon = createJungle(\"Amazon\", 5500000.0, 3000000);\n    if (amazon != NULL) {\n        printf(\"Jungle Name: %s\\n\", amazon->name);\n        printf(\"Area: %.2f\\n\", amazon->area);\n        printf(\"Biodiversity: %d\\n\", amazon->biodiversity);\n        free(amazon);\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Create an instance of a class called Dinosaur with properties for species, size, and diet.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char species[50];\n    float size;\n    char diet[20];\n} Dinosaur;\n\nDinosaur* createDinosaur(const char* species, float size, const char* diet) {\n    Dinosaur* newDinosaur = (Dinosaur*)malloc(sizeof(Dinosaur));\n    if (newDinosaur != NULL) {\n        strncpy(newDinosaur->species, species, sizeof(newDinosaur->species) - 1);\n        newDinosaur->species[sizeof(newDinosaur->species) - 1] = '\\0';\n        newDinosaur->size = size;\n        strncpy(newDinosaur->diet, diet, sizeof(newDinosaur->diet) - 1);\n        newDinosaur->diet[sizeof(newDinosaur->diet) - 1] = '\\0';\n    }\n    return newDinosaur;\n}\n\nint main() {\n    Dinosaur* myDinosaur = createDinosaur(\"Tyrannosaurus Rex\", 12.3, \"Carnivore\");\n    if (myDinosaur != NULL) {\n        printf(\"Species: %s\\n\", myDinosaur->species);\n        printf(\"Size: %.2f meters\\n\", myDinosaur->size);\n        printf(\"Diet: %s\\n\", myDinosaur->diet);\n        free(myDinosaur);\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Design a class for a Superhero with attributes for name, powers, and alias, then create an instance.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n// Define the Superhero structure\ntypedef struct {\n    char name[50];\n    char powers[100];\n    char alias[50];\n} Superhero;\n\n// Function to create a Superhero instance\nSuperhero* createSuperhero(const char* name, const char* powers, const char* alias) {\n    Superhero* hero = (Superhero*)malloc(sizeof(Superhero));\n    if (hero != NULL) {\n        strncpy(hero->name, name, sizeof(hero->name) - 1);\n        hero->name[sizeof(hero->name) - 1] = '\\0';\n        strncpy(hero->powers, powers, sizeof(hero->powers) - 1);\n        hero->powers[sizeof(hero->powers) - 1] = '\\0';\n        strncpy(hero->alias, alias, sizeof(hero->alias) - 1);\n        hero->alias[sizeof(hero->alias) - 1] = '\\0';\n    }\n    return hero;\n}\n\nint main() {\n    // Create an instance of Superhero\n    Superhero* superhero = createSuperhero(\"Clark Kent\", \"Flight, Super Strength\", \"Superman\");\n\n    // Output the superhero details\n    if (superhero != NULL) {\n        printf(\"Name: %s\\n\", superhero->name);\n        printf(\"Powers: %s\\n\", superhero->powers);\n        printf(\"Alias: %s\\n\", superhero->alias);\n        free(superhero);\n    }\n\n    return 0;\n}\n```"
  }
]