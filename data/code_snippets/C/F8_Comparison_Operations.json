[
  {
    "task": "Write a function that checks if two strings are equal, ignoring case sensitivity.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint stringsAreEqualIgnoreCase(const char *str1, const char *str2) {\n    while (*str1 && *str2) {\n        if (tolower((unsigned char)*str1) != tolower((unsigned char)*str2)) {\n            return 0;\n        }\n        str1++;\n        str2++;\n    }\n    return *str1 == '\\0' && *str2 == '\\0';\n}\n\nint main() {\n    const char *str1 = \"Hello\";\n    const char *str2 = \"hello\";\n\n    if (stringsAreEqualIgnoreCase(str1, str2)) {\n        printf(\"The strings are equal (ignoring case).\\n\");\n    } else {\n        printf(\"The strings are not equal.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a program that determines if a number is greater than 10.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int number;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &number);\n\n    if (number > 10) {\n        printf(\"The number is greater than 10.\\n\");\n    } else {\n        printf(\"The number is not greater than 10.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a feature that compares the current date to a given date and returns if it is in the future.",
    "code": "```c\n#include <stdio.h>\n#include <time.h>\n\nint isFutureDate(int year, int month, int day) {\n    time_t t = time(NULL);\n    struct tm currentDate = *localtime(&t);\n\n    if (year > currentDate.tm_year + 1900) return 1;\n    if (year < currentDate.tm_year + 1900) return 0;\n\n    if (month > currentDate.tm_mon + 1) return 1;\n    if (month < currentDate.tm_mon + 1) return 0;\n\n    if (day > currentDate.tm_mday) return 1;\n\n    return 0;\n}\n\nint main() {\n    int year = 2024;\n    int month = 12;\n    int day = 31;\n\n    if (isFutureDate(year, month, day)) {\n        printf(\"The date is in the future.\\n\");\n    } else {\n        printf(\"The date is not in the future.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a system that checks if a user's age is less than 18 and restricts access if true.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int age;\n    printf(\"Enter your age: \");\n    scanf(\"%d\", &age);\n\n    if (age < 18) {\n        printf(\"Access restricted.\\n\");\n    } else {\n        printf(\"Access granted.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Build an algorithm that finds the maximum of three given integers.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int a, b, c;\n    printf(\"Enter three integers: \");\n    scanf(\"%d %d %d\", &a, &b, &c);\n\n    int max = a;\n\n    if (b > max) {\n        max = b;\n    }\n\n    if (c > max) {\n        max = c;\n    }\n\n    printf(\"The maximum value is: %d\\n\", max);\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that verifies if two arrays contain the same elements in the same order.",
    "code": "```c\n#include <stdbool.h>\n#include <stddef.h>\n\nbool arrays_are_equal(int *arr1, size_t len1, int *arr2, size_t len2) {\n    if (len1 != len2) {\n        return false;\n    }\n    for (size_t i = 0; i < len1; i++) {\n        if (arr1[i] != arr2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n```"
  },
  {
    "task": "Create a script that checks if a product's price is within a specified range.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    double price = 150.0; // Example price of the product\n    double lower_bound = 100.0;\n    double upper_bound = 200.0;\n\n    if (price >= lower_bound && price <= upper_bound) {\n        printf(\"Price is within the specified range.\\n\");\n    } else {\n        printf(\"Price is not within the specified range.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a tool that compares two versions of a software application and determines which is newer.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nint compare_versions(const char *version1, const char *version2) {\n    int v1_major, v1_minor, v1_patch;\n    int v2_major, v2_minor, v2_patch;\n\n    sscanf(version1, \"%d.%d.%d\", &v1_major, &v1_minor, &v1_patch);\n    sscanf(version2, \"%d.%d.%d\", &v2_major, &v2_minor, &v2_patch);\n\n    if (v1_major > v2_major) return 1;\n    if (v1_major < v2_major) return -1;\n    if (v1_minor > v2_minor) return 1;\n    if (v1_minor < v2_minor) return -1;\n    if (v1_patch > v2_patch) return 1;\n    if (v1_patch < v2_patch) return -1;\n\n    return 0;\n}\n\nint main() {\n    const char *version1 = \"1.2.3\";\n    const char *version2 = \"1.2.4\";\n\n    int result = compare_versions(version1, version2);\n\n    if (result > 0) {\n        printf(\"Version %s is newer than version %s\\n\", version1, version2);\n    } else if (result < 0) {\n        printf(\"Version %s is newer than version %s\\n\", version2, version1);\n    } else {\n        printf(\"Version %s and version %s are the same\\n\", version1, version2);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a test to see if a given year is a leap year.",
    "code": "```c\n#include <stdio.h>\n\nint isLeapYear(int year) {\n    if ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\n\nint main() {\n    int year;\n    printf(\"Enter a year: \");\n    scanf(\"%d\", &year);\n\n    if (isLeapYear(year)) {\n        printf(\"%d is a leap year.\\n\", year);\n    } else {\n        printf(\"%d is not a leap year.\\n\", year);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a feature that tells if a student\u2019s grade is passing or failing based on a threshold.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int grade;\n    int threshold = 50; // Example threshold for passing\n\n    printf(\"Enter the student's grade: \");\n    scanf(\"%d\", &grade);\n\n    if (grade >= threshold) {\n        printf(\"The student's grade is passing.\\n\");\n    } else {\n        printf(\"The student's grade is failing.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function to compare two file sizes and return the larger one.",
    "code": "```c\n#include <stdio.h>\n\nlong getFileSize(const char *filename) {\n    FILE *file = fopen(filename, \"rb\");\n    if (file == NULL) return -1;\n\n    fseek(file, 0, SEEK_END);\n    long size = ftell(file);\n    fclose(file);\n\n    return size;\n}\n\nconst char* compareFileSizes(const char *file1, const char *file2) {\n    long size1 = getFileSize(file1);\n    long size2 = getFileSize(file2);\n\n    if (size1 == -1 || size2 == -1) return NULL;\n\n    return (size1 > size2) ? file1 : file2;\n}\n\nint main() {\n    const char *largerFile = compareFileSizes(\"file1.txt\", \"file2.txt\");\n    if (largerFile != NULL) {\n        printf(\"The larger file is: %s\\n\", largerFile);\n    } else {\n        printf(\"Error in reading file sizes.\\n\");\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Build a program that checks if the temperature is below freezing point.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    float temperature;\n    \n    printf(\"Enter the temperature in Celsius: \");\n    scanf(\"%f\", &temperature);\n    \n    if (temperature < 0.0) {\n        printf(\"The temperature is below freezing point.\\n\");\n    } else {\n        printf(\"The temperature is above freezing point.\\n\");\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Create a logic that determines if a number is within the Fibonacci sequence.",
    "code": "```c\n#include <stdio.h>\n\nint isFibonacci(int n) {\n    int a = 0, b = 1, temp;\n    if (n == a || n == b) return 1;\n    while (b < n) {\n        temp = b;\n        b = a + b;\n        a = temp;\n    }\n    return b == n;\n}\n\nint main() {\n    int number;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &number);\n    if (isFibonacci(number)) {\n        printf(\"%d is in the Fibonacci sequence.\\n\", number);\n    } else {\n        printf(\"%d is not in the Fibonacci sequence.\\n\", number);\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a function that checks if a given word is a palindrome.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nint isPalindrome(const char *word) {\n    int length = strlen(word);\n    for (int i = 0; i < length / 2; i++) {\n        if (word[i] != word[length - i - 1]) {\n            return 0;\n        }\n    }\n    return 1;\n}\n\nint main() {\n    const char *word = \"radar\";\n    if (isPalindrome(word)) {\n        printf(\"%s is a palindrome.\\n\", word);\n    } else {\n        printf(\"%s is not a palindrome.\\n\", word);\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Write a script to see if a password meets a minimum length requirement.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nint main() {\n    const int MIN_LENGTH = 8;\n    char password[100];\n\n    printf(\"Enter your password: \");\n    scanf(\"%99s\", password);\n\n    if (strlen(password) >= MIN_LENGTH) {\n        printf(\"Password meets the minimum length requirement.\\n\");\n    } else {\n        printf(\"Password does not meet the minimum length requirement.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a system that decides if a point is inside a circle based on its coordinates.",
    "code": "```c\n#include <stdio.h>\n#include <math.h>\n\nint isPointInsideCircle(double x, double y, double centerX, double centerY, double radius) {\n    double distanceSquared = (x - centerX) * (x - centerX) + (y - centerY) * (y - centerY);\n    double radiusSquared = radius * radius;\n    return distanceSquared < radiusSquared;\n}\n\nint main() {\n    double x = 1.0, y = 2.0;\n    double centerX = 0.0, centerY = 0.0;\n    double radius = 5.0;\n\n    if (isPointInsideCircle(x, y, centerX, centerY, radius)) {\n        printf(\"The point is inside the circle.\\n\");\n    } else {\n        printf(\"The point is outside the circle.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a program that checks if a shopping cart total exceeds a certain budget.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    double cartTotal = 150.75; // Example cart total\n    double budget = 100.00;    // Example budget\n\n    if (cartTotal > budget) {\n        printf(\"The cart total exceeds the budget.\\n\");\n    } else {\n        printf(\"The cart total is within the budget.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a function that compares two players' scores and returns the winner.",
    "code": "```c\n#include <stdio.h>\n\nconst char* compareScores(int score1, int score2) {\n    if (score1 > score2) {\n        return \"Player 1 wins\";\n    } else if (score2 > score1) {\n        return \"Player 2 wins\";\n    } else {\n        return \"It's a tie\";\n    }\n}\n\nint main() {\n    int player1Score = 85;\n    int player2Score = 90;\n    \n    const char* result = compareScores(player1Score, player2Score);\n    printf(\"%s\\n\", result);\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Write a program to determine if one string is a substring of another.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nint main() {\n    char str1[100], str2[100];\n\n    printf(\"Enter the main string: \");\n    fgets(str1, sizeof(str1), stdin);\n    str1[strcspn(str1, \"\\n\")] = '\\0'; // Remove newline character\n\n    printf(\"Enter the substring: \");\n    fgets(str2, sizeof(str2), stdin);\n    str2[strcspn(str2, \"\\n\")] = '\\0'; // Remove newline character\n\n    if (strstr(str1, str2) != NULL) {\n        printf(\"'%s' is a substring of '%s'.\\n\", str2, str1);\n    } else {\n        printf(\"'%s' is not a substring of '%s'.\\n\", str2, str1);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Build a utility that checks if a number is a prime number.",
    "code": "```c\n#include <stdio.h>\n\nint is_prime(int number) {\n    if (number <= 1) return 0;\n    for (int i = 2; i * i <= number; i++) {\n        if (number % i == 0) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int number;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &number);\n\n    if (is_prime(number)) {\n        printf(\"%d is a prime number.\\n\", number);\n    } else {\n        printf(\"%d is not a prime number.\\n\", number);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that checks if a given number is a perfect square.",
    "code": "```c\n#include <stdbool.h>\n#include <math.h>\n\nbool isPerfectSquare(int num) {\n    if (num < 0) return false;\n    int root = (int)sqrt(num);\n    return root * root == num;\n}\n```"
  },
  {
    "task": "Create a system that determines if a person is eligible for a senior citizen discount based on their age.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int age;\n    printf(\"Enter age: \");\n    scanf(\"%d\", &age);\n\n    if (age >= 65) {\n        printf(\"Eligible for senior citizen discount.\\n\");\n    } else {\n        printf(\"Not eligible for senior citizen discount.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a feature to check if a date falls on a weekend.",
    "code": "```c\n#include <stdio.h>\n#include <time.h>\n\nint isWeekend(int day, int month, int year) {\n    struct tm timeStruct = {0};\n    timeStruct.tm_mday = day;\n    timeStruct.tm_mon = month - 1;\n    timeStruct.tm_year = year - 1900;\n\n    // Normalize the time structure\n    mktime(&timeStruct);\n\n    if (timeStruct.tm_wday == 0 || timeStruct.tm_wday == 6) {\n        return 1;\n    }\n    return 0;\n}\n\nint main() {\n    int day = 14, month = 10, year = 2023;\n    if (isWeekend(day, month, year)) {\n        printf(\"The date %02d/%02d/%d falls on a weekend.\\n\", day, month, year);\n    } else {\n        printf(\"The date %02d/%02d/%d does not fall on a weekend.\\n\", day, month, year);\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Design a program that sees if a given email address is in the correct format.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nbool isValidEmail(char *email) {\n    int atCount = 0;\n    int dotCountAfterAt = 0;\n    bool atFound = false;\n    int length = strlen(email);\n\n    for (int i = 0; i < length; i++) {\n        if (email[i] == '@') {\n            atCount++;\n            atFound = true;\n        } else if (atFound && email[i] == '.') {\n            dotCountAfterAt++;\n        }\n    }\n\n    return atCount == 1 && dotCountAfterAt >= 1;\n}\n\nint main() {\n    char email[100];\n    printf(\"Enter the email address: \");\n    scanf(\"%s\", email);\n\n    if (isValidEmail(email)) {\n        printf(\"The email address is in the correct format.\\n\");\n    } else {\n        printf(\"The email address is not in the correct format.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a test to check if a rectangle's area is larger than a triangle's area.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    double rect_width, rect_height, tri_base, tri_height;\n    double rect_area, tri_area;\n\n    // Example values for rectangle and triangle dimensions\n    rect_width = 10.0;\n    rect_height = 5.0;\n    tri_base = 6.0;\n    tri_height = 4.0;\n\n    // Calculate areas\n    rect_area = rect_width * rect_height;\n    tri_area = 0.5 * tri_base * tri_height;\n\n    // Compare the areas\n    if (rect_area > tri_area) {\n        printf(\"The rectangle's area is larger than the triangle's area.\\n\");\n    } else {\n        printf(\"The rectangle's area is not larger than the triangle's area.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that verifies if two rectangles overlap each other.",
    "code": "```c\n#include <stdbool.h>\n\ntypedef struct {\n    int x;\n    int y;\n    int width;\n    int height;\n} Rectangle;\n\nbool doRectanglesOverlap(Rectangle r1, Rectangle r2) {\n    if (r1.x >= r2.x + r2.width || r2.x >= r1.x + r1.width) {\n        return false;\n    }\n    if (r1.y >= r2.y + r2.height || r2.y >= r1.y + r1.height) {\n        return false;\n    }\n    return true;\n}\n```"
  },
  {
    "task": "Create a script to compare two strings lexicographically.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nint main() {\n    char str1[100], str2[100];\n\n    printf(\"Enter the first string: \");\n    fgets(str1, sizeof(str1), stdin);\n\n    printf(\"Enter the second string: \");\n    fgets(str2, sizeof(str2), stdin);\n\n    // Remove trailing newline character from strings\n    str1[strcspn(str1, \"\\n\")] = 0;\n    str2[strcspn(str2, \"\\n\")] = 0;\n\n    int result = strcmp(str1, str2);\n\n    if (result < 0) {\n        printf(\"The first string is lexicographically smaller than the second string.\\n\");\n    } else if (result > 0) {\n        printf(\"The first string is lexicographically greater than the second string.\\n\");\n    } else {\n        printf(\"Both strings are lexicographically equal.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Build a program that checks if a list of numbers is in ascending order.",
    "code": "```c\n#include <stdio.h>\n\nint isAscending(int arr[], int n) {\n    for (int i = 0; i < n - 1; i++) {\n        if (arr[i] > arr[i + 1]) {\n            return 0;\n        }\n    }\n    return 1;\n}\n\nint main() {\n    int numbers[] = {1, 2, 3, 4, 5}; // Example list of numbers\n    int size = sizeof(numbers) / sizeof(numbers[0]);\n\n    if (isAscending(numbers, size)) {\n        printf(\"The list is in ascending order.\\n\");\n    } else {\n        printf(\"The list is not in ascending order.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a system to compare the heights of two buildings.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    double height1, height2;\n\n    printf(\"Enter the height of the first building: \");\n    scanf(\"%lf\", &height1);\n    \n    printf(\"Enter the height of the second building: \");\n    scanf(\"%lf\", &height2);\n\n    if (height1 > height2) {\n        printf(\"The first building is taller.\\n\");\n    } else if (height1 < height2) {\n        printf(\"The second building is taller.\\n\");\n    } else {\n        printf(\"Both buildings have the same height.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a feature that determines if a given time is before noon.",
    "code": "```c\n#include <stdio.h>\n\nint isBeforeNoon(int hour, int minute) {\n    if (hour < 12) {\n        return 1; // True, it is before noon\n    } else if (hour == 12 && minute == 0) {\n        return 0; // False, it is exactly noon\n    }\n    return 0; // False, it is after noon\n}\n\nint main() {\n    int hour = 11;\n    int minute = 30;\n    \n    if (isBeforeNoon(hour, minute)) {\n        printf(\"The time is before noon.\\n\");\n    } else {\n        printf(\"The time is not before noon.\\n\");\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function to check if a given number is a power of two.",
    "code": "```c\n#include <stdbool.h>\n\nbool isPowerOfTwo(int n) {\n    if (n <= 0) return false;\n    return (n & (n - 1)) == 0;\n}\n```"
  },
  {
    "task": "Create a program that determines if a word is longer than another word.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nint main() {\n    char word1[100];\n    char word2[100];\n\n    printf(\"Enter the first word: \");\n    scanf(\"%99s\", word1);\n\n    printf(\"Enter the second word: \");\n    scanf(\"%99s\", word2);\n\n    if (strlen(word1) > strlen(word2)) {\n        printf(\"The first word is longer than the second word.\\n\");\n    } else if (strlen(word1) < strlen(word2)) {\n        printf(\"The second word is longer than the first word.\\n\");\n    } else {\n        printf(\"Both words are of equal length.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a function to compare the lengths of two lists and return the longer one.",
    "code": "```c\n#include <stdio.h>\n\nint* longerList(int* list1, int size1, int* list2, int size2) {\n    if (size1 >= size2) {\n        return list1;\n    } else {\n        return list2;\n    }\n}\n\nint main() {\n    int list1[] = {1, 2, 3, 4, 5};\n    int list2[] = {6, 7, 8};\n\n    int* longer = longerList(list1, 5, list2, 3);\n\n    printf(\"The longer list starts with: %d\\n\", longer[0]);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a script to see if a user's input matches a pre-defined secret code.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nint main() {\n    const char secretCode[] = \"openSesame\";\n    char userInput[50];\n\n    printf(\"Enter the secret code: \");\n    scanf(\"%49s\", userInput);\n\n    if (strcmp(userInput, secretCode) == 0) {\n        printf(\"Access granted.\\n\");\n    } else {\n        printf(\"Access denied.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Build a utility that checks if a given year is in the 21st century.",
    "code": "```c\n#include <stdio.h>\n\nint isIn21stCentury(int year) {\n    return year >= 2001 && year <= 2100;\n}\n\nint main() {\n    int year = 2022; // Example year\n    if (isIn21stCentury(year)) {\n        printf(\"%d is in the 21st century.\\n\", year);\n    } else {\n        printf(\"%d is not in the 21st century.\\n\", year);\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Create a logic that determines if a book's publication year is after 2000.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int publicationYear;\n    \n    printf(\"Enter the publication year of the book: \");\n    scanf(\"%d\", &publicationYear);\n    \n    if (publicationYear > 2000) {\n        printf(\"The book was published after the year 2000.\\n\");\n    } else {\n        printf(\"The book was published in the year 2000 or before.\\n\");\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Design a feature to see if a number is divisible by both 3 and 5.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int number;\n\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &number);\n\n    if (number % 3 == 0 && number % 5 == 0) {\n        printf(\"The number is divisible by both 3 and 5.\\n\");\n    } else {\n        printf(\"The number is not divisible by both 3 and 5.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a system that checks if a student's GPA is above a certain threshold.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    float studentGPA = 3.5; // Example GPA\n    float threshold = 3.0;\n\n    if (studentGPA > threshold) {\n        printf(\"Student's GPA is above the threshold.\\n\");\n    } else {\n        printf(\"Student's GPA is not above the threshold.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function to determine if a given angle is acute, right, or obtuse.",
    "code": "```c\n#include <stdio.h>\n\nconst char* determineAngleType(int angle) {\n    if (angle < 90) {\n        return \"Acute\";\n    } else if (angle == 90) {\n        return \"Right\";\n    } else if (angle > 90 && angle < 180) {\n        return \"Obtuse\";\n    } else {\n        return \"Invalid\";\n    }\n}\n\nint main() {\n    int angle = 75; // Example angle\n    printf(\"The angle is: %s\\n\", determineAngleType(angle));\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a program that compares the lengths of two strings and returns the shorter one.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nconst char* shorterString(const char *str1, const char *str2) {\n    return (strlen(str1) < strlen(str2)) ? str1 : str2;\n}\n\nint main() {\n    const char *string1 = \"Hello\";\n    const char *string2 = \"World!\";\n    \n    printf(\"Shorter string: %s\\n\", shorterString(string1, string2));\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Create a script to verify if a username is unique within a list.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nint isUniqueUsername(const char *username, const char *userList[], int listSize) {\n    for (int i = 0; i < listSize; i++) {\n        if (strcmp(username, userList[i]) == 0) {\n            return 0; // Not unique\n        }\n    }\n    return 1; // Unique\n}\n\nint main() {\n    const char *userList[] = {\"user1\", \"user2\", \"user3\", \"user4\"};\n    int listSize = sizeof(userList) / sizeof(userList[0]);\n    \n    const char *usernameToCheck = \"user5\";\n    \n    if (isUniqueUsername(usernameToCheck, userList, listSize)) {\n        printf(\"Username is unique.\\n\");\n    } else {\n        printf(\"Username is not unique.\\n\");\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Build a tool that checks if a job applicant meets all the listed qualifications.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int hasDegree = 1;         // 1 for true, 0 for false\n    int hasExperience = 1;     // 1 for true, 0 for false\n    int hasSkills = 1;         // 1 for true, 0 for false\n    \n    if (hasDegree && hasExperience && hasSkills) {\n        printf(\"Applicant meets all qualifications.\\n\");\n    } else {\n        printf(\"Applicant does not meet all qualifications.\\n\");\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Write a feature to see if a vehicle's speed exceeds the speed limit.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    double vehicleSpeed, speedLimit;\n\n    printf(\"Enter the vehicle's speed: \");\n    scanf(\"%lf\", &vehicleSpeed);\n\n    printf(\"Enter the speed limit: \");\n    scanf(\"%lf\", &speedLimit);\n\n    if (vehicleSpeed > speedLimit) {\n        printf(\"The vehicle's speed exceeds the speed limit.\\n\");\n    } else {\n        printf(\"The vehicle's speed is within the speed limit.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a system that determines whether a given point is above or below the x-axis.",
    "code": "```c\n#include <stdio.h>\n\nvoid checkPointPosition(double y) {\n    if (y > 0) {\n        printf(\"The point is above the x-axis.\\n\");\n    } else if (y < 0) {\n        printf(\"The point is below the x-axis.\\n\");\n    } else {\n        printf(\"The point is on the x-axis.\\n\");\n    }\n}\n\nint main() {\n    double y;\n\n    printf(\"Enter the y-coordinate of the point: \");\n    scanf(\"%lf\", &y);\n\n    checkPointPosition(y);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a function that checks if a given word appears in a sentence.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nint word_in_sentence(const char *sentence, const char *word) {\n    return strstr(sentence, word) != NULL;\n}\n\nint main() {\n    const char *sentence = \"This is a sample sentence.\";\n    const char *word = \"sample\";\n\n    if (word_in_sentence(sentence, word)) {\n        printf(\"The word '%s' is in the sentence.\\n\", word);\n    } else {\n        printf(\"The word '%s' is not in the sentence.\\n\", word);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a program that identifies whether a given number is negative or positive.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int number;\n    \n    printf(\"Enter a number: \");\n    scanf(\"%d\", &number);\n    \n    if (number > 0) {\n        printf(\"The number is positive.\\n\");\n    } else if (number < 0) {\n        printf(\"The number is negative.\\n\");\n    } else {\n        printf(\"The number is zero.\\n\");\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Write a script to see if the sum of two numbers is greater than 100.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int num1, num2, sum;\n    \n    printf(\"Enter the first number: \");\n    scanf(\"%d\", &num1);\n    \n    printf(\"Enter the second number: \");\n    scanf(\"%d\", &num2);\n    \n    sum = num1 + num2;\n    \n    if (sum > 100) {\n        printf(\"The sum is greater than 100.\\n\");\n    } else {\n        printf(\"The sum is not greater than 100.\\n\");\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Build a utility that checks if a file exists in a specified directory.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\nint file_exists(const char *directory, const char *filename) {\n    char filepath[1024];\n    snprintf(filepath, sizeof(filepath), \"%s/%s\", directory, filename);\n    FILE *file = fopen(filepath, \"r\");\n    if (file) {\n        fclose(file);\n        return 1; // File exists\n    }\n    return 0; // File does not exist\n}\n\nint main() {\n    const char *directory = \"/path/to/directory\";\n    const char *filename = \"file.txt\";\n\n    if (file_exists(directory, filename)) {\n        printf(\"File exists.\\n\");\n    } else {\n        printf(\"File does not exist.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a system to compare the weights of two different objects.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    double weight1, weight2;\n\n    printf(\"Enter the weight of the first object: \");\n    scanf(\"%lf\", &weight1);\n\n    printf(\"Enter the weight of the second object: \");\n    scanf(\"%lf\", &weight2);\n\n    if (weight1 > weight2) {\n        printf(\"The first object is heavier.\\n\");\n    } else if (weight1 < weight2) {\n        printf(\"The second object is heavier.\\n\");\n    } else {\n        printf(\"Both objects have the same weight.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a logic to determine if a number falls within a defined range.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int number = 15;\n    int lower_bound = 10;\n    int upper_bound = 20;\n    \n    if (number >= lower_bound && number <= upper_bound) {\n        printf(\"The number %d is within the range.\\n\", number);\n    } else {\n        printf(\"The number %d is outside the range.\\n\", number);\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Design a program that checks if an employee worked overtime based on hours worked.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int hoursWorked;\n    printf(\"Enter hours worked: \");\n    scanf(\"%d\", &hoursWorked);\n\n    if (hoursWorked > 40) {\n        printf(\"Overtime worked.\\n\");\n    } else {\n        printf(\"No overtime worked.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function to compare two dates and determine which is earlier.",
    "code": "```c\n#include <stdio.h>\n\ntypedef struct {\n    int year;\n    int month;\n    int day;\n} Date;\n\nint compareDates(Date date1, Date date2) {\n    if (date1.year < date2.year) {\n        return -1;\n    } else if (date1.year > date2.year) {\n        return 1;\n    } else {\n        if (date1.month < date2.month) {\n            return -1;\n        } else if (date1.month > date2.month) {\n            return 1;\n        } else {\n            if (date1.day < date2.day) {\n                return -1;\n            } else if (date1.day > date2.day) {\n                return 1;\n            } else {\n                return 0;\n            }\n        }\n    }\n}\n\nint main() {\n    Date date1 = {2023, 10, 5};\n    Date date2 = {2023, 10, 6};\n\n    int result = compareDates(date1, date2);\n\n    if (result == -1) {\n        printf(\"Date1 is earlier.\\n\");\n    } else if (result == 1) {\n        printf(\"Date2 is earlier.\\n\");\n    } else {\n        printf(\"Both dates are the same.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a script that verifies if a given word starts with a vowel.",
    "code": "```c\n#include <stdio.h>\n#include <ctype.h>\n\nint startsWithVowel(const char *word) {\n    if (word == NULL || *word == '\\0') {\n        return 0; // False\n    }\n    char firstChar = tolower(word[0]);\n    return firstChar == 'a' || firstChar == 'e' || firstChar == 'i' || firstChar == 'o' || firstChar == 'u';\n}\n\nint main() {\n    const char *word = \"example\";\n    if (startsWithVowel(word)) {\n        printf(\"The word starts with a vowel.\\n\");\n    } else {\n        printf(\"The word does not start with a vowel.\\n\");\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Build a utility that checks if a number is even or odd.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int number;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &number);\n\n    if (number % 2 == 0) {\n        printf(\"%d is even.\\n\", number);\n    } else {\n        printf(\"%d is odd.\\n\", number);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a system that determines if a string contains only numeric characters.",
    "code": "```c\n#include <stdio.h>\n#include <ctype.h>\n\nint isNumericString(const char *str) {\n    while (*str) {\n        if (!isdigit((unsigned char)*str)) {\n            return 0;\n        }\n        str++;\n    }\n    return 1;\n}\n\nint main() {\n    const char *testString = \"123456\";\n    if (isNumericString(testString)) {\n        printf(\"The string contains only numeric characters.\\n\");\n    } else {\n        printf(\"The string contains non-numeric characters.\\n\");\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function to see if a given character is a vowel or consonant.",
    "code": "```c\n#include <stdio.h>\n\nint isVowel(char ch) {\n    ch = tolower(ch);\n    if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') {\n        return 1; // Vowel\n    } else {\n        return 0; // Consonant\n    }\n}\n\nint main() {\n    char ch;\n    printf(\"Enter a character: \");\n    scanf(\"%c\", &ch);\n\n    if (isVowel(ch)) {\n        printf(\"%c is a vowel.\\n\", ch);\n    } else {\n        printf(\"%c is a consonant.\\n\", ch);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a program that checks if a point lies within a specified rectangle.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int x, y;\n    int x1 = 1, y1 = 1, x2 = 5, y2 = 5; // Rectangle coordinates\n\n    printf(\"Enter the x and y coordinates of the point: \");\n    scanf(\"%d %d\", &x, &y);\n\n    if (x >= x1 && x <= x2 && y >= y1 && y <= y2) {\n        printf(\"The point (%d, %d) is inside the rectangle.\\n\", x, y);\n    } else {\n        printf(\"The point (%d, %d) is outside the rectangle.\\n\", x, y);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a feature to compare two lists and return the common elements.",
    "code": "```c\n#include <stdio.h>\n\nint *findCommonElements(int *list1, int size1, int *list2, int size2, int *commonSize) {\n    int static common[100]; // assuming maximum 100 common elements\n    *commonSize = 0;\n\n    for (int i = 0; i < size1; i++) {\n        for (int j = 0; j < size2; j++) {\n            if (list1[i] == list2[j]) {\n                int isAlreadyCommon = 0;\n                for (int k = 0; k < *commonSize; k++) {\n                    if (common[k] == list1[i]) {\n                        isAlreadyCommon = 1;\n                        break;\n                    }\n                }\n                if (!isAlreadyCommon) {\n                    common[*commonSize] = list1[i];\n                    (*commonSize)++;\n                }\n            }\n        }\n    }\n    return common;\n}\n\nint main() {\n    int list1[] = {1, 2, 3, 4, 5};\n    int list2[] = {3, 4, 5, 6, 7};\n    int commonSize;\n    \n    int *common = findCommonElements(list1, 5, list2, 5, &commonSize);\n    \n    printf(\"Common elements: \");\n    for (int i = 0; i < commonSize; i++) {\n        printf(\"%d \", common[i]);\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Design a function that determines if a text contains any uppercase letters.",
    "code": "```c\n#include <stdbool.h>\n#include <ctype.h>\n\nbool contains_uppercase(const char *text) {\n    while (*text) {\n        if (isupper((unsigned char)*text)) {\n            return true;\n        }\n        text++;\n    }\n    return false;\n}\n```"
  },
  {
    "task": "Implement a script to check if a given sentence is a question.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nbool is_question(const char *sentence) {\n    size_t len = strlen(sentence);\n    if (len == 0) {\n        return false;\n    }\n    return sentence[len - 1] == '?';\n}\n\nint main() {\n    const char *sentence = \"Is this a question?\";\n    if (is_question(sentence)) {\n        printf(\"The sentence is a question.\\n\");\n    } else {\n        printf(\"The sentence is not a question.\\n\");\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program to determine if a temperature is measured in Celsius or Fahrenheit.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nint main() {\n    char scale[10];\n    float temperature;\n\n    printf(\"Enter the temperature followed by C for Celsius or F for Fahrenheit (e.g., 25C or 77F): \");\n    scanf(\"%f%s\", &temperature, scale);\n\n    if (strcmp(scale, \"C\") == 0 || strcmp(scale, \"c\") == 0) {\n        printf(\"The temperature is in Celsius.\\n\");\n    } else if (strcmp(scale, \"F\") == 0 || strcmp(scale, \"f\") == 0) {\n        printf(\"The temperature is in Fahrenheit.\\n\");\n    } else {\n        printf(\"Invalid temperature scale entered.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a system that verifies if a student is enrolled in a particular course.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n#define MAX_STUDENTS 100\n#define MAX_COURSES 10\n\ntypedef struct {\n    char name[50];\n    char courses[MAX_COURSES][50];\n    int course_count;\n} Student;\n\nint isEnrolled(Student student, const char *course) {\n    for (int i = 0; i < student.course_count; i++) {\n        if (strcmp(student.courses[i], course) == 0) {\n            return 1; // Enrolled\n        }\n    }\n    return 0; // Not enrolled\n}\n\nint main() {\n    Student students[MAX_STUDENTS] = {\n        {\"Alice\", {\"Math\", \"Science\"}, 2},\n        {\"Bob\", {\"History\", \"Art\"}, 2}\n    };\n    int student_count = 2;\n\n    char target_student[50];\n    char target_course[50];\n\n    printf(\"Enter student name: \");\n    scanf(\"%49s\", target_student);\n    printf(\"Enter course name: \");\n    scanf(\"%49s\", target_course);\n\n    int found = 0;\n    for (int i = 0; i < student_count; i++) {\n        if (strcmp(students[i].name, target_student) == 0) {\n            found = 1;\n            if (isEnrolled(students[i], target_course)) {\n                printf(\"%s is enrolled in %s.\\n\", target_student, target_course);\n            } else {\n                printf(\"%s is not enrolled in %s.\\n\", target_student, target_course);\n            }\n            break;\n        }\n    }\n\n    if (!found) {\n        printf(\"Student %s not found.\\n\", target_student);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Build a utility to check if a given string is a valid hexadecimal number.",
    "code": "```c\n#include <stdio.h>\n#include <ctype.h>\n\nint isValidHexadecimal(const char *str) {\n    if (str == NULL || *str == '\\0') {\n        return 0;\n    }\n    if (*str == '0' && (*(str + 1) == 'x' || *(str + 1) == 'X')) {\n        str += 2;\n    }\n    if (*str == '\\0') {\n        return 0;\n    }\n    while (*str) {\n        if (!isxdigit(*str)) {\n            return 0;\n        }\n        str++;\n    }\n    return 1;\n}\n\nint main() {\n    const char *test1 = \"0x1A3F\";\n    const char *test2 = \"GHIJK\";\n    const char *test3 = \"123ABC\";\n    const char *test4 = \"0x\";\n\n    printf(\"Test 1: %s -> %s\\n\", test1, isValidHexadecimal(test1) ? \"Valid\" : \"Invalid\");\n    printf(\"Test 2: %s -> %s\\n\", test2, isValidHexadecimal(test2) ? \"Valid\" : \"Invalid\");\n    printf(\"Test 3: %s -> %s\\n\", test3, isValidHexadecimal(test3) ? \"Valid\" : \"Invalid\");\n    printf(\"Test 4: %s -> %s\\n\", test4, isValidHexadecimal(test4) ? \"Valid\" : \"Invalid\");\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function to see if two circles intersect based on their radii and center points.",
    "code": "```c\n#include <stdbool.h>\n#include <math.h>\n\ntypedef struct {\n    double x;\n    double y;\n    double radius;\n} Circle;\n\nbool doCirclesIntersect(Circle c1, Circle c2) {\n    double dx = c1.x - c2.x;\n    double dy = c1.y - c2.y;\n    double distanceSquared = dx * dx + dy * dy;\n    double radiiSum = c1.radius + c2.radius;\n    return distanceSquared <= radiiSum * radiiSum;\n}\n```"
  },
  {
    "task": "Develop a program that checks if a given number is within 10% of another number.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    double number1, number2, lower_bound, upper_bound, margin;\n\n    printf(\"Enter the first number: \");\n    scanf(\"%lf\", &number1);\n    printf(\"Enter the second number: \");\n    scanf(\"%lf\", &number2);\n\n    margin = number1 * 0.1;\n    lower_bound = number1 - margin;\n    upper_bound = number1 + margin;\n\n    if (number2 >= lower_bound && number2 <= upper_bound) {\n        printf(\"The number %.2lf is within 10%% of %.2lf\\n\", number2, number1);\n    } else {\n        printf(\"The number %.2lf is not within 10%% of %.2lf\\n\", number2, number1);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a feature to determine if a character is alphanumeric.",
    "code": "```c\n#include <stdio.h>\n#include <ctype.h>\n\nint is_alphanumeric(char c) {\n    return isalnum(c);\n}\n\nint main() {\n    char ch = 'a'; // Example character\n    if (is_alphanumeric(ch)) {\n        printf(\"The character '%c' is alphanumeric.\\n\", ch);\n    } else {\n        printf(\"The character '%c' is not alphanumeric.\\n\", ch);\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a system to compare the profit margins of two products.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    double profitMargin1, profitMargin2;\n\n    printf(\"Enter the profit margin of product 1: \");\n    scanf(\"%lf\", &profitMargin1);\n\n    printf(\"Enter the profit margin of product 2: \");\n    scanf(\"%lf\", &profitMargin2);\n\n    if (profitMargin1 > profitMargin2) {\n        printf(\"Product 1 has a higher profit margin.\\n\");\n    } else if (profitMargin1 < profitMargin2) {\n        printf(\"Product 2 has a higher profit margin.\\n\");\n    } else {\n        printf(\"Both products have the same profit margin.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a script to check if a given string contains any special characters.",
    "code": "```c\n#include <stdio.h>\n#include <ctype.h>\n#include <stdbool.h>\n\nbool contains_special_characters(const char *str) {\n    while (*str) {\n        if (!isalnum((unsigned char)*str)) {\n            return true;\n        }\n        str++;\n    }\n    return false;\n}\n\nint main() {\n    const char *test_str = \"Hello, World!\";\n    \n    if (contains_special_characters(test_str)) {\n        printf(\"The string contains special characters.\\n\");\n    } else {\n        printf(\"The string does not contain special characters.\\n\");\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Write a function to verify if a number is a multiple of another number.",
    "code": "```c\n#include <stdbool.h>\n\nbool isMultiple(int a, int b) {\n    return b != 0 && a % b == 0;\n}\n```"
  },
  {
    "task": "Create a program that checks if a date is a holiday based on a list of holidays.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nint isHoliday(const char *date) {\n    const char *holidays[] = {\n        \"2023-01-01\", // New Year's Day\n        \"2023-12-25\", // Christmas Day\n        \"2023-07-04\", // Independence Day\n        // Add more holidays here as needed\n    };\n    size_t numHolidays = sizeof(holidays) / sizeof(holidays[0]);\n\n    for (size_t i = 0; i < numHolidays; i++) {\n        if (strcmp(date, holidays[i]) == 0) {\n            return 1;\n        }\n    }\n    return 0;\n}\n\nint main() {\n    const char *date = \"2023-12-25\"; // Example date to check\n\n    if (isHoliday(date)) {\n        printf(\"%s is a holiday.\\n\", date);\n    } else {\n        printf(\"%s is not a holiday.\\n\", date);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Build a utility to compare two text files and highlight the differences.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid compareFiles(FILE *file1, FILE *file2) {\n    char line1[1024], line2[1024];\n    int lineNum = 1;\n    int differences = 0;\n\n    while (fgets(line1, sizeof(line1), file1) != NULL && fgets(line2, sizeof(line2), file2) != NULL) {\n        if (strcmp(line1, line2) != 0) {\n            printf(\"Difference at line %d:\\n\", lineNum);\n            printf(\"File1: %s\", line1);\n            printf(\"File2: %s\", line2);\n            differences++;\n        }\n        lineNum++;\n    }\n    \n    while (fgets(line1, sizeof(line1), file1) != NULL) {\n        printf(\"File1 has extra line at %d: %s\", lineNum, line1);\n        differences++;\n        lineNum++;\n    }\n\n    while (fgets(line2, sizeof(line2), file2) != NULL) {\n        printf(\"File2 has extra line at %d: %s\", lineNum, line2);\n        differences++;\n        lineNum++;\n    }\n\n    if (differences == 0) {\n        printf(\"The files are identical.\\n\");\n    }\n}\n\nint main(int argc, char *argv[]) {\n    if (argc != 3) {\n        fprintf(stderr, \"Usage: %s <file1> <file2>\\n\", argv[0]);\n        return 1;\n    }\n\n    FILE *file1 = fopen(argv[1], \"r\");\n    FILE *file2 = fopen(argv[2], \"r\");\n\n    if (file1 == NULL || file2 == NULL) {\n        fprintf(stderr, \"Error opening files.\\n\");\n        return 1;\n    }\n\n    compareFiles(file1, file2);\n\n    fclose(file1);\n    fclose(file2);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a function to determine if a given password is strong based on length and character diversity.",
    "code": "```c\n#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n#include <ctype.h>\n\nbool isStrongPassword(const char *password) {\n    int length = strlen(password);\n    if (length < 8) return false;\n\n    bool hasLower = false, hasUpper = false, hasDigit = false, hasSpecial = false;\n\n    for (int i = 0; i < length; i++) {\n        if (islower(password[i])) hasLower = true;\n        else if (isupper(password[i])) hasUpper = true;\n        else if (isdigit(password[i])) hasDigit = true;\n        else hasSpecial = true;\n\n        if (hasLower && hasUpper && hasDigit && hasSpecial) return true;\n    }\n    \n    return false;\n}\n\nint main() {\n    const char *password = \"Aa1@password\";\n    if (isStrongPassword(password)) {\n        printf(\"The password is strong.\\n\");\n    } else {\n        printf(\"The password is not strong.\\n\");\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Write a script to see if a number is within a specified distance from zero.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    double number, distance;\n    \n    printf(\"Enter a number: \");\n    scanf(\"%lf\", &number);\n    \n    printf(\"Enter the distance: \");\n    scanf(\"%lf\", &distance);\n    \n    if (fabs(number) <= distance) {\n        printf(\"The number is within the specified distance from zero.\\n\");\n    } else {\n        printf(\"The number is not within the specified distance from zero.\\n\");\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Create a system to check if a book title is available in a library database.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n#define MAX_BOOKS 100\n\ntypedef struct {\n    char title[100];\n} Book;\n\nint isBookAvailable(Book books[], int numBooks, const char *titleToCheck) {\n    for (int i = 0; i < numBooks; i++) {\n        if (strcmp(books[i].title, titleToCheck) == 0) {\n            return 1; // Book is available\n        }\n    }\n    return 0; // Book is not available\n}\n\nint main() {\n    Book library[MAX_BOOKS] = {\n        {\"The Great Gatsby\"},\n        {\"1984\"},\n        {\"To Kill a Mockingbird\"},\n        {\"The Catcher in the Rye\"},\n        {\"Moby-Dick\"}\n    };\n    int numBooks = 5;\n    \n    const char *titleToCheck = \"1984\";\n    \n    if (isBookAvailable(library, numBooks, titleToCheck)) {\n        printf(\"The book \\\"%s\\\" is available in the library.\\n\", titleToCheck);\n    } else {\n        printf(\"The book \\\"%s\\\" is not available in the library.\\n\", titleToCheck);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a feature that determines if a user has administrator privileges.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nint main() {\n    char role[20];\n    printf(\"Enter user role: \");\n    scanf(\"%19s\", role);\n    \n    if (strcmp(role, \"admin\") == 0) {\n        printf(\"User has administrator privileges.\\n\");\n    } else {\n        printf(\"User does not have administrator privileges.\\n\");\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Design a function to compare the brightness of two colors.",
    "code": "```c\n#include <stdio.h>\n\n// Function to calculate the brightness of a color\ndouble calculate_brightness(int red, int green, int blue) {\n    return 0.299 * red + 0.587 * green + 0.114 * blue;\n}\n\n// Function to compare the brightness of two colors\nint compare_brightness(int red1, int green1, int blue1, int red2, int green2, int blue2) {\n    double brightness1 = calculate_brightness(red1, green1, blue1);\n    double brightness2 = calculate_brightness(red2, green2, blue2);\n\n    if (brightness1 > brightness2) {\n        return 1; // First color is brighter\n    } else if (brightness1 < brightness2) {\n        return -1; // Second color is brighter\n    } else {\n        return 0; // Both colors have the same brightness\n    }\n}\n\nint main() {\n    int result = compare_brightness(100, 150, 200, 50, 100, 150);\n    printf(\"Comparison result: %d\\n\", result);\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program to verify if a number is a valid credit card number using the Luhn algorithm.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint isValidCreditCard(const char *number) {\n    int nDigits = strlen(number);\n    int sum = 0;\n    int isSecond = 0;\n\n    for (int i = nDigits - 1; i >= 0; i--) {\n        if (!isdigit(number[i])) {\n            return 0;\n        }\n\n        int digit = number[i] - '0';\n\n        if (isSecond) {\n            digit *= 2;\n            if (digit > 9) {\n                digit -= 9;\n            }\n        }\n\n        sum += digit;\n        isSecond = !isSecond;\n    }\n\n    return (sum % 10 == 0);\n}\n\nint main() {\n    char cardNumber[20];\n    printf(\"Enter credit card number: \");\n    scanf(\"%19s\", cardNumber);\n\n    if (isValidCreditCard(cardNumber)) {\n        printf(\"Valid credit card number.\\n\");\n    } else {\n        printf(\"Invalid credit card number.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a script to determine if a given string is a valid IP address.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <ctype.h>\n\nint isValidSegment(char *segment) {\n    int len = strlen(segment);\n\n    if (len == 0 || len > 3) {\n        return 0;\n    }\n\n    for (int i = 0; i < len; i++) {\n        if (!isdigit(segment[i])) {\n            return 0;\n        }\n    }\n\n    int value = atoi(segment);\n    if (value < 0 || value > 255) {\n        return 0;\n    }\n\n    if (len > 1 && segment[0] == '0') {\n        return 0;\n    }\n\n    return 1;\n}\n\nint isValidIPAddress(char *ip) {\n    char *ipCopy = strdup(ip);\n    char *segment;\n    int count = 0;\n\n    segment = strtok(ipCopy, \".\");\n    while (segment != NULL) {\n        if (!isValidSegment(segment)) {\n            free(ipCopy);\n            return 0;\n        }\n        count++;\n        segment = strtok(NULL, \".\");\n    }\n\n    free(ipCopy);\n    return count == 4;\n}\n\nint main() {\n    char ip[100];\n    printf(\"Enter an IP address: \");\n    scanf(\"%99s\", ip);\n\n    if (isValidIPAddress(ip)) {\n        printf(\"%s is a valid IP address.\\n\", ip);\n    } else {\n        printf(\"%s is not a valid IP address.\\n\", ip);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Build a utility that checks if a number is part of an arithmetic sequence.",
    "code": "```c\n#include <stdio.h>\n#include <stdbool.h>\n\nbool isPartOfArithmeticSequence(int number, int firstTerm, int difference) {\n    if (difference == 0) {\n        return number == firstTerm;\n    }\n    return (number - firstTerm) % difference == 0;\n}\n\nint main() {\n    int number = 10;\n    int firstTerm = 2;\n    int difference = 2;\n\n    if (isPartOfArithmeticSequence(number, firstTerm, difference)) {\n        printf(\"%d is part of the arithmetic sequence.\\n\", number);\n    } else {\n        printf(\"%d is not part of the arithmetic sequence.\\n\", number);\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Develop a feature to compare the efficiency of two algorithms based on time complexity.",
    "code": "```c\n#include <stdio.h>\n\nvoid compare_efficiency(int algo1_n, int algo1_time, int algo2_n, int algo2_time) {\n    double algo1_efficiency = (double)algo1_time / algo1_n;\n    double algo2_efficiency = (double)algo2_time / algo2_n;\n\n    printf(\"Algorithm 1 efficiency: %.2f\\n\", algo1_efficiency);\n    printf(\"Algorithm 2 efficiency: %.2f\\n\", algo2_efficiency);\n\n    if (algo1_efficiency < algo2_efficiency) {\n        printf(\"Algorithm 1 is more efficient.\\n\");\n    } else if (algo1_efficiency > algo2_efficiency) {\n        printf(\"Algorithm 2 is more efficient.\\n\");\n    } else {\n        printf(\"Both algorithms have the same efficiency.\\n\");\n    }\n}\n\nint main() {\n    int algo1_n = 1000;\n    int algo1_time = 500;\n    int algo2_n = 1000;\n    int algo2_time = 700;\n\n    compare_efficiency(algo1_n, algo1_time, algo2_n, algo2_time);\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Write a function to see if a given date falls in a leap year.",
    "code": "```c\n#include <stdbool.h>\n\nbool isLeapYear(int year) {\n    if (year % 4 == 0) {\n        if (year % 100 == 0) {\n            if (year % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nbool isDateInLeapYear(int day, int month, int year) {\n    return isLeapYear(year);\n}\n```"
  },
  {
    "task": "Create a program that determines if a user's subscription is active based on the current date.",
    "code": "```c\n#include <stdio.h>\n#include <time.h>\n\nint main() {\n    // Define the expiration date (YYYY, MM, DD)\n    int expYear = 2023, expMonth = 12, expDay = 31;\n\n    // Get the current date\n    time_t t = time(NULL);\n    struct tm tm = *localtime(&t);\n\n    // Compare current date with expiration date\n    if (tm.tm_year + 1900 < expYear ||\n        (tm.tm_year + 1900 == expYear && tm.tm_mon + 1 < expMonth) ||\n        (tm.tm_year + 1900 == expYear && tm.tm_mon + 1 == expMonth && tm.tm_mday <= expDay)) {\n        printf(\"Subscription is active.\\n\");\n    } else {\n        printf(\"Subscription has expired.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a tool to check if a user\u2019s input is a palindrome phrase, ignoring spaces and punctuation.",
    "code": "```c\n#include <stdio.h>\n#include <ctype.h>\n#include <string.h>\n\nint isPalindrome(const char *str) {\n    int left = 0;\n    int right = strlen(str) - 1;\n    \n    while (left < right) {\n        while (left < right && !isalnum(str[left])) left++;\n        while (left < right && !isalnum(str[right])) right--;\n        \n        if (tolower(str[left]) != tolower(str[right])) {\n            return 0;\n        }\n        \n        left++;\n        right--;\n    }\n    \n    return 1;\n}\n\nint main() {\n    char input[256];\n    \n    printf(\"Enter a phrase: \");\n    fgets(input, sizeof(input), stdin);\n    \n    if (isPalindrome(input)) {\n        printf(\"The input is a palindrome.\\n\");\n    } else {\n        printf(\"The input is not a palindrome.\\n\");\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Implement a system to verify if a given number is part of the Fibonacci sequence.",
    "code": "```c\n#include <stdio.h>\n\nint isFibonacci(int n) {\n    int a = 0, b = 1, temp;\n    if (n == a || n == b) return 1;\n    while (b < n) {\n        temp = a + b;\n        a = b;\n        b = temp;\n        if (b == n) return 1;\n    }\n    return 0;\n}\n\nint main() {\n    int number;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &number);\n    \n    if (isFibonacci(number)) {\n        printf(\"%d is a Fibonacci number.\\n\", number);\n    } else {\n        printf(\"%d is not a Fibonacci number.\\n\", number);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program to compare the elevation of two geographic locations.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    float elevation1, elevation2;\n\n    // Example elevations\n    elevation1 = 450.0;\n    elevation2 = 320.0;\n\n    if (elevation1 > elevation2) {\n        printf(\"Location 1 is higher than Location 2.\\n\");\n    } else if (elevation1 < elevation2) {\n        printf(\"Location 1 is lower than Location 2.\\n\");\n    } else {\n        printf(\"Both locations have the same elevation.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a function to determine if a given string is a valid JSON format.",
    "code": "```c\n#include <stdbool.h>\n#include <string.h>\n#include <ctype.h>\n\nbool isValidJSON(const char *str) {\n    if (str == NULL) return false;\n\n    while (isspace(*str)) str++;\n    \n    if (*str == '{' || *str == '[') {\n        int curlyBraces = 0, squareBrackets = 0;\n        bool inQuotes = false;\n        char quoteChar = '\\0';\n        \n        for (; *str != '\\0'; str++) {\n            if (inQuotes) {\n                if (*str == quoteChar && *(str - 1) != '\\\\') {\n                    inQuotes = false;\n                }\n            } else {\n                switch (*str) {\n                    case '{':\n                        curlyBraces++;\n                        break;\n                    case '}':\n                        curlyBraces--;\n                        if (curlyBraces < 0) return false;\n                        break;\n                    case '[':\n                        squareBrackets++;\n                        break;\n                    case ']':\n                        squareBrackets--;\n                        if (squareBrackets < 0) return false;\n                        break;\n                    case '\"':\n                    case '\\'':\n                        inQuotes = true;\n                        quoteChar = *str;\n                        break;\n                }\n            }\n        }\n        \n        return curlyBraces == 0 && squareBrackets == 0 && !inQuotes;\n    }\n\n    return false;\n}\n```"
  },
  {
    "task": "Build a utility that checks if a number is a factorial of any integer.",
    "code": "```c\n#include <stdio.h>\n\nint isFactorial(int number) {\n    int i = 1;\n    int factorial = 1;\n    \n    while (factorial < number) {\n        i++;\n        factorial *= i;\n    }\n    \n    return factorial == number;\n}\n\nint main() {\n    int number;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &number);\n    \n    if (isFactorial(number)) {\n        printf(\"%d is a factorial of an integer.\\n\", number);\n    } else {\n        printf(\"%d is not a factorial of any integer.\\n\", number);\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Develop a feature to compare the widths of two ribbons and return the wider one.",
    "code": "```c\n#include <stdio.h>\n\nfloat widerRibbon(float width1, float width2) {\n    if (width1 > width2) {\n        return width1;\n    } else {\n        return width2;\n    }\n}\n\nint main() {\n    float ribbon1 = 2.5;\n    float ribbon2 = 3.7;\n    \n    float wider = widerRibbon(ribbon1, ribbon2);\n    printf(\"The wider ribbon is: %.1f\\n\", wider);\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Write a script to see if a word is present in a list of banned words.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nint main() {\n    const char *bannedWords[] = {\"example\", \"test\", \"banned\", \"prohibited\"};\n    const int bannedWordsCount = sizeof(bannedWords) / sizeof(bannedWords[0]);\n    const char *wordToCheck = \"test\";\n    \n    int isBanned = 0;\n    for (int i = 0; i < bannedWordsCount; i++) {\n        if (strcmp(wordToCheck, bannedWords[i]) == 0) {\n            isBanned = 1;\n            break;\n        }\n    }\n    \n    if (isBanned) {\n        printf(\"The word '%s' is banned.\\n\", wordToCheck);\n    } else {\n        printf(\"The word '%s' is not banned.\\n\", wordToCheck);\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Design a system to determine if a patient's temperature is in the normal range.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    float temperature;\n    printf(\"Enter the patient's temperature: \");\n    scanf(\"%f\", &temperature);\n\n    if (temperature >= 36.1 && temperature <= 37.2) {\n        printf(\"The temperature is in the normal range.\\n\");\n    } else {\n        printf(\"The temperature is outside the normal range.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a program that checks if a given time is during business hours.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int hour, minute;\n    \n    printf(\"Enter the time (hour minute): \");\n    scanf(\"%d %d\", &hour, &minute);\n    \n    if ((hour > 9 || (hour == 9 && minute >= 0)) && (hour < 17 || (hour == 17 && minute == 0))) {\n        printf(\"The time is during business hours.\\n\");\n    } else {\n        printf(\"The time is not during business hours.\\n\");\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function to see if a number is a triangular number.",
    "code": "```c\n#include <stdbool.h>\n#include <math.h>\n\nbool isTriangularNumber(int num) {\n    if (num < 0) return false;\n    int n = (int)(sqrt(2 * num));\n    return n * (n + 1) / 2 == num;\n}\n\n#include <stdio.h>\n\nint main() {\n    int num = 10;\n    if (isTriangularNumber(num)) {\n        printf(\"%d is a triangular number.\\n\", num);\n    } else {\n        printf(\"%d is not a triangular number.\\n\", num);\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Write a feature to compare the number of vowels in two given strings.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nint countVowels(const char *str) {\n    int count = 0;\n    for (int i = 0; str[i] != '\\0'; i++) {\n        char c = str[i];\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ||\n            c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            count++;\n        }\n    }\n    return count;\n}\n\nvoid compareVowelCount(const char *str1, const char *str2) {\n    int vowels1 = countVowels(str1);\n    int vowels2 = countVowels(str2);\n    \n    if (vowels1 > vowels2) {\n        printf(\"String 1 has more vowels.\\n\");\n    } else if (vowels1 < vowels2) {\n        printf(\"String 2 has more vowels.\\n\");\n    } else {\n        printf(\"Both strings have an equal number of vowels.\\n\");\n    }\n}\n\nint main() {\n    const char *string1 = \"Hello World\";\n    const char *string2 = \"Programming\";\n    \n    compareVowelCount(string1, string2);\n    \n    return 0;\n}\n```"
  }
]