[
  {
    "task": "Filter out all even numbers from a list of integers.",
    "code": "```c\n#include <stdio.h>\n\nvoid filterOddNumbers(int *input, int *output, int size, int *newSize) {\n    int j = 0;\n    for (int i = 0; i < size; i++) {\n        if (input[i] % 2 != 0) {\n            output[j++] = input[i];\n        }\n    }\n    *newSize = j;\n}\n\nint main() {\n    int input[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n    int size = sizeof(input) / sizeof(input[0]);\n    int output[size];\n    int newSize = 0;\n\n    filterOddNumbers(input, output, size, &newSize);\n\n    for (int i = 0; i < newSize; i++) {\n        printf(\"%d \", output[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Select all words from a list that start with the letter 'a'.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nint starts_with_a(const char *word) {\n    return word[0] == 'a';\n}\n\nvoid filter_words(const char *words[], int size, const char *result[], int *result_size) {\n    *result_size = 0;\n    for (int i = 0; i < size; ++i) {\n        if (starts_with_a(words[i])) {\n            result[(*result_size)++] = words[i];\n        }\n    }\n}\n\nint main() {\n    const char *words[] = {\"apple\", \"banana\", \"avocado\", \"cherry\", \"apricot\"};\n    int size = 5;\n    const char *filtered_words[size];\n    int filtered_size;\n\n    filter_words(words, size, filtered_words, &filtered_size);\n\n    for (int i = 0; i < filtered_size; ++i) {\n        printf(\"%s\\n\", filtered_words[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Find all positive numbers in a collection of integers.",
    "code": "```c\n#include <stdio.h>\n\nvoid filterPositiveNumbers(int* numbers, int size, int* positives, int* count) {\n    *count = 0;\n    for(int i = 0; i < size; i++) {\n        if(numbers[i] > 0) {\n            positives[(*count)++] = numbers[i];\n        }\n    }\n}\n\nint main() {\n    int numbers[] = {-3, 4, -1, 5, -2, 7};\n    int size = sizeof(numbers) / sizeof(numbers[0]);\n    int positives[size];\n    int count;\n\n    filterPositiveNumbers(numbers, size, positives, &count);\n\n    for(int i = 0; i < count; i++) {\n        printf(\"%d \", positives[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Extract all employees who are older than 30 from an employee directory.",
    "code": "```c\n#include <stdio.h>\n\ntypedef struct {\n    char name[50];\n    int age;\n} Employee;\n\nvoid filterEmployees(Employee* employees, int size, Employee* result, int* resultSize) {\n    *resultSize = 0;\n    for (int i = 0; i < size; i++) {\n        if (employees[i].age > 30) {\n            result[*resultSize] = employees[i];\n            (*resultSize)++;\n        }\n    }\n}\n\nint main() {\n    Employee directory[] = {\n        {\"Alice\", 28},\n        {\"Bob\", 35},\n        {\"Charlie\", 32},\n        {\"David\", 25}\n    };\n    int directorySize = sizeof(directory) / sizeof(directory[0]);\n\n    Employee filtered[10]; // Assuming there will be at most 10 employees older than 30\n    int filteredSize;\n\n    filterEmployees(directory, directorySize, filtered, &filteredSize);\n\n    for (int i = 0; i < filteredSize; i++) {\n        printf(\"Name: %s, Age: %d\\n\", filtered[i].name, filtered[i].age);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "List all cities with a population greater than one million from a dataset.",
    "code": "```c\n#include <stdio.h>\n\ntypedef struct {\n    char name[50];\n    int population;\n} City;\n\nvoid filterCities(City cities[], int size) {\n    for (int i = 0; i < size; i++) {\n        if (cities[i].population > 1000000) {\n            printf(\"%s\\n\", cities[i].name);\n        }\n    }\n}\n\nint main() {\n    City cities[] = {\n        {\"New York\", 8419000},\n        {\"Los Angeles\", 3980000},\n        {\"Chicago\", 2716000},\n        {\"Houston\", 2328000},\n        {\"Phoenix\", 1690000},\n        {\"Philadelphia\", 1584000},\n        {\"San Antonio\", 1547000},\n        {\"San Diego\", 1424000},\n        {\"Dallas\", 1341000},\n        {\"San Jose\", 1035000},\n        {\"Austin\", 964000},\n        {\"Jacksonville\", 902000},\n        {\"Fort Worth\", 895000},\n        {\"Columbus\", 898000},\n        {\"Charlotte\", 874000}\n    };\n\n    int size = sizeof(cities) / sizeof(cities[0]);\n\n    filterCities(cities, size);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Filter out products that are out of stock from a product list.",
    "code": "```c\n#include <stdio.h>\n\ntypedef struct {\n    char name[50];\n    int stock;\n} Product;\n\nvoid filterInStockProducts(Product products[], int size, Product result[], int *resultSize) {\n    *resultSize = 0;\n    for (int i = 0; i < size; i++) {\n        if (products[i].stock > 0) {\n            result[*resultSize] = products[i];\n            (*resultSize)++;\n        }\n    }\n}\n\nint main() {\n    Product products[] = {\n        {\"Product A\", 10},\n        {\"Product B\", 0},\n        {\"Product C\", 5},\n        {\"Product D\", 0}\n    };\n    int size = sizeof(products) / sizeof(products[0]);\n    Product inStockProducts[size];\n    int inStockSize;\n\n    filterInStockProducts(products, size, inStockProducts, &inStockSize);\n\n    for (int i = 0; i < inStockSize; i++) {\n        printf(\"In Stock: %s, Stock: %d\\n\", inStockProducts[i].name, inStockProducts[i].stock);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Select all students who have passed with a grade above 70 from a list of student scores.",
    "code": "```c\n#include <stdio.h>\n\ntypedef struct {\n    char name[50];\n    int grade;\n} Student;\n\nvoid filterPassedStudents(Student students[], int size, Student passedStudents[], int *passedCount) {\n    *passedCount = 0;\n    for (int i = 0; i < size; i++) {\n        if (students[i].grade > 70) {\n            passedStudents[*passedCount] = students[i];\n            (*passedCount)++;\n        }\n    }\n}\n\nint main() {\n    Student students[] = {\n        {\"Alice\", 85},\n        {\"Bob\", 65},\n        {\"Charlie\", 72},\n        {\"David\", 90}\n    };\n    int size = sizeof(students) / sizeof(students[0]);\n    Student passedStudents[size];\n    int passedCount;\n\n    filterPassedStudents(students, size, passedStudents, &passedCount);\n\n    for (int i = 0; i < passedCount; i++) {\n        printf(\"Name: %s, Grade: %d\\n\", passedStudents[i].name, passedStudents[i].grade);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Identify all strings in an array that contain the substring 'cat'.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nint containsSubstring(const char *str, const char *substring) {\n    return strstr(str, substring) != NULL;\n}\n\nvoid filterStringsWithSubstring(char *arr[], int size, const char *substring) {\n    for (int i = 0; i < size; i++) {\n        if (containsSubstring(arr[i], substring)) {\n            printf(\"%s\\n\", arr[i]);\n        }\n    }\n}\n\nint main() {\n    char *arr[] = {\"catalog\", \"dog\", \"caterpillar\", \"bat\", \"concatenate\"};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    filterStringsWithSubstring(arr, size, \"cat\");\n    return 0;\n}\n```"
  },
  {
    "task": "Extract all transactions above $1000 from a financial record.",
    "code": "```c\n#include <stdio.h>\n\ntypedef struct {\n    int id;\n    double amount;\n} Transaction;\n\nvoid filterTransactions(Transaction transactions[], int size, double threshold) {\n    for (int i = 0; i < size; i++) {\n        if (transactions[i].amount > threshold) {\n            printf(\"Transaction ID: %d Amount: %.2f\\n\", transactions[i].id, transactions[i].amount);\n        }\n    }\n}\n\nint main() {\n    Transaction transactions[] = {\n        {1, 500.00},\n        {2, 1500.50},\n        {3, 1200.00},\n        {4, 400.25},\n        {5, 2500.00}\n    };\n    int size = sizeof(transactions) / sizeof(transactions[0]);\n    double threshold = 1000.00;\n    \n    filterTransactions(transactions, size, threshold);\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Filter out all non-prime numbers from a list of numbers.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n\nbool is_prime(int n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (int i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) return false;\n    }\n    return true;\n}\n\nint* filter_primes(int* arr, int size, int* result_size) {\n    int* result = malloc(size * sizeof(int));\n    int index = 0;\n    for (int i = 0; i < size; i++) {\n        if (is_prime(arr[i])) {\n            result[index++] = arr[i];\n        }\n    }\n    *result_size = index;\n    return result;\n}\n\nint main() {\n    int numbers[] = {10, 15, 3, 7, 11, 20, 2, 1, 19};\n    int size = sizeof(numbers) / sizeof(numbers[0]);\n    int result_size;\n    int* primes = filter_primes(numbers, size, &result_size);\n\n    for (int i = 0; i < result_size; i++) {\n        printf(\"%d \", primes[i]);\n    }\n    printf(\"\\n\");\n\n    free(primes);\n    return 0;\n}\n```"
  },
  {
    "task": "Select all books with more than 300 pages from a library catalog.",
    "code": "```c\n#include <stdio.h>\n\n#define MAX_BOOKS 100\n\ntypedef struct {\n    char title[100];\n    int pages;\n} Book;\n\nvoid filterBooks(Book library[], int size, Book result[], int *resultSize) {\n    *resultSize = 0;\n    for (int i = 0; i < size; i++) {\n        if (library[i].pages > 300) {\n            result[*resultSize] = library[i];\n            (*resultSize)++;\n        }\n    }\n}\n\nint main() {\n    Book library[MAX_BOOKS] = {\n        {\"Book One\", 250},\n        {\"Book Two\", 305},\n        {\"Book Three\", 150},\n        {\"Book Four\", 400},\n        {\"Book Five\", 320},\n    };\n\n    int librarySize = 5;\n    Book filteredBooks[MAX_BOOKS];\n    int filteredSize;\n\n    filterBooks(library, librarySize, filteredBooks, &filteredSize);\n\n    for (int i = 0; i < filteredSize; i++) {\n        printf(\"Title: %s, Pages: %d\\n\", filteredBooks[i].title, filteredBooks[i].pages);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Identify all users who have logged in within the past week from a user database.",
    "code": "```c\n#include <stdio.h>\n#include <time.h>\n\n#define NUM_USERS 100\n\ntypedef struct {\n    char username[50];\n    time_t last_login;\n} User;\n\nvoid filterRecentLogins(User users[], int num_users, User recent_users[], int *num_recent_users) {\n    time_t now = time(NULL);\n    time_t one_week_ago = now - 7 * 24 * 60 * 60;\n    *num_recent_users = 0;\n\n    for (int i = 0; i < num_users; i++) {\n        if (users[i].last_login >= one_week_ago) {\n            recent_users[*num_recent_users] = users[i];\n            (*num_recent_users)++;\n        }\n    }\n}\n\nint main() {\n    User users[NUM_USERS];\n    User recent_users[NUM_USERS];\n    int num_recent_users;\n\n    // Assume users array is populated with data\n\n    filterRecentLogins(users, NUM_USERS, recent_users, &num_recent_users);\n\n    for (int i = 0; i < num_recent_users; i++) {\n        printf(\"Recent user: %s\\n\", recent_users[i].username);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Extract all URLs that contain 'https' from a list of web addresses.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n#define MAX_URLS 100\n#define MAX_LENGTH 256\n\nint has_https(const char *url) {\n    return strstr(url, \"https\") != NULL;\n}\n\nvoid filter_https_urls(const char urls[][MAX_LENGTH], int num_urls, char result[][MAX_LENGTH], int *result_count) {\n    *result_count = 0;\n    for (int i = 0; i < num_urls; i++) {\n        if (has_https(urls[i])) {\n            strcpy(result[*result_count], urls[i]);\n            (*result_count)++;\n        }\n    }\n}\n\nint main() {\n    char urls[MAX_URLS][MAX_LENGTH] = {\n        \"http://example.com\",\n        \"https://secure.com\",\n        \"ftp://files.com\",\n        \"https://secure.example.com\"\n    };\n    int num_urls = 4;\n\n    char filtered_urls[MAX_URLS][MAX_LENGTH];\n    int filtered_count = 0;\n\n    filter_https_urls(urls, num_urls, filtered_urls, &filtered_count);\n\n    for (int i = 0; i < filtered_count; i++) {\n        printf(\"%s\\n\", filtered_urls[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Find all movies released after the year 2000 from a movie database.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char title[100];\n    int year;\n} Movie;\n\n// Function to filter movies released after the year 2000\nint filterMovies(const Movie *movie) {\n    return movie->year > 2000;\n}\n\n// Function to apply the filter to the movie database\nvoid filterMoviesDatabase(const Movie *movies, int size, Movie **result, int *resultSize) {\n    *resultSize = 0;\n    // Allocate memory for the result array\n    *result = malloc(size * sizeof(Movie));\n    \n    for (int i = 0; i < size; i++) {\n        if (filterMovies(&movies[i])) {\n            (*result)[*resultSize] = movies[i];\n            (*resultSize)++;\n        }\n    }\n}\n\nint main() {\n    Movie database[] = {\n        {\"The Matrix\", 1999},\n        {\"Gladiator\", 2000},\n        {\"Inception\", 2010},\n        {\"The Lord of the Rings\", 2001},\n        {\"Avengers: Endgame\", 2019}\n    };\n    int databaseSize = sizeof(database) / sizeof(database[0]);\n    \n    Movie *filteredMovies;\n    int filteredSize;\n    \n    filterMoviesDatabase(database, databaseSize, &filteredMovies, &filteredSize);\n    \n    printf(\"Movies released after the year 2000:\\n\");\n    for (int i = 0; i < filteredSize; i++) {\n        printf(\"%s (%d)\\n\", filteredMovies[i].title, filteredMovies[i].year);\n    }\n    \n    // Free allocated memory\n    free(filteredMovies);\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Select all tasks with a priority level of 'high' from a task management system.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n#define MAX_TASKS 100\n#define DESCRIPTION_LENGTH 256\n#define PRIORITY_LENGTH 10\n\ntypedef struct {\n    char description[DESCRIPTION_LENGTH];\n    char priority[PRIORITY_LENGTH];\n} Task;\n\nvoid filterHighPriorityTasks(Task tasks[], int taskCount) {\n    for (int i = 0; i < taskCount; i++) {\n        if (strcmp(tasks[i].priority, \"high\") == 0) {\n            printf(\"Task: %s, Priority: %s\\n\", tasks[i].description, tasks[i].priority);\n        }\n    }\n}\n\nint main() {\n    Task tasks[MAX_TASKS] = {\n        {\"Task 1\", \"high\"},\n        {\"Task 2\", \"low\"},\n        {\"Task 3\", \"medium\"},\n        {\"Task 4\", \"high\"}\n    };\n    int taskCount = 4;\n\n    filterHighPriorityTasks(tasks, taskCount);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Filter out all words longer than five characters from a text document.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_WORD_LEN 100\n\nint is_longer_than_five(const char *word) {\n    return strlen(word) > 5;\n}\n\nvoid filter_words(FILE *input, FILE *output) {\n    char word[MAX_WORD_LEN];\n    int c, index = 0;\n    \n    while ((c = fgetc(input)) != EOF) {\n        if (isspace(c) || ispunct(c)) {\n            if (index > 0) {\n                word[index] = '\\0';\n                if (!is_longer_than_five(word)) {\n                    fprintf(output, \"%s\", word);\n                }\n                index = 0;\n            }\n            fputc(c, output);\n        } else {\n            if (index < MAX_WORD_LEN - 1) {\n                word[index++] = c;\n            }\n        }\n    }\n    if (index > 0) {\n        word[index] = '\\0';\n        if (!is_longer_than_five(word)) {\n            fprintf(output, \"%s\", word);\n        }\n    }\n}\n\nint main(int argc, char *argv[]) {\n    if (argc != 3) {\n        fprintf(stderr, \"Usage: %s <input_file> <output_file>\\n\", argv[0]);\n        return 1;\n    }\n\n    FILE *input = fopen(argv[1], \"r\");\n    if (!input) {\n        perror(\"Error opening input file\");\n        return 1;\n    }\n\n    FILE *output = fopen(argv[2], \"w\");\n    if (!output) {\n        perror(\"Error opening output file\");\n        fclose(input);\n        return 1;\n    }\n\n    filter_words(input, output);\n\n    fclose(input);\n    fclose(output);\n    return 0;\n}\n```"
  },
  {
    "task": "Extract all odd numbers from a sequence of integers.",
    "code": "```c\n#include <stdio.h>\n\nint is_odd(int num) {\n    return num % 2 != 0;\n}\n\nvoid filter_odds(int *input, int length, int *output, int *output_length) {\n    int count = 0;\n    for (int i = 0; i < length; i++) {\n        if (is_odd(input[i])) {\n            output[count++] = input[i];\n        }\n    }\n    *output_length = count;\n}\n\nint main() {\n    int numbers[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n    int length = sizeof(numbers) / sizeof(numbers[0]);\n    int odd_numbers[length];\n    int odd_count;\n\n    filter_odds(numbers, length, odd_numbers, &odd_count);\n\n    for (int i = 0; i < odd_count; i++) {\n        printf(\"%d \", odd_numbers[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Select all files larger than 10MB from a list of files.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    char *name;\n    long size; // File size in bytes\n} File;\n\nint isLargerThan10MB(File file) {\n    return file.size > 10 * 1024 * 1024; // 10MB in bytes\n}\n\nvoid filterFiles(File *files, int length, int (*predicate)(File), File **result, int *resultSize) {\n    *resultSize = 0;\n    for (int i = 0; i < length; ++i) {\n        if (predicate(files[i])) {\n            (*result)[(*resultSize)++] = files[i];\n        }\n    }\n}\n\nint main() {\n    File files[] = {\n        {\"file1.txt\", 5000000},\n        {\"file2.txt\", 15000000},\n        {\"file3.txt\", 12000000},\n        {\"file4.txt\", 8000000}\n    };\n    int numFiles = sizeof(files) / sizeof(files[0]);\n    \n    File *filteredFiles = malloc(numFiles * sizeof(File));\n    int filteredSize;\n\n    filterFiles(files, numFiles, isLargerThan10MB, &filteredFiles, &filteredSize);\n\n    for (int i = 0; i < filteredSize; ++i) {\n        printf(\"File: %s, Size: %ld bytes\\n\", filteredFiles[i].name, filteredFiles[i].size);\n    }\n\n    free(filteredFiles);\n    return 0;\n}\n```"
  },
  {
    "task": "Identify all events occurring on weekends from an event schedule.",
    "code": "```c\n#include <stdio.h>\n#include <time.h>\n\ntypedef struct {\n    char name[50];\n    struct tm date;\n} Event;\n\nint is_weekend(struct tm date) {\n    int wday = date.tm_wday; // 0 = Sunday, 1 = Monday, ..., 6 = Saturday\n    return (wday == 0 || wday == 6);\n}\n\nvoid filter_weekend_events(Event events[], int size) {\n    for (int i = 0; i < size; i++) {\n        if (is_weekend(events[i].date)) {\n            printf(\"Weekend Event: %s\\n\", events[i].name);\n        }\n    }\n}\n\nint main() {\n    Event events[] = {\n        {\"Conference\", {0, 0, 0, 15, 9, 123, 0, 0, 0}},\n        {\"Workshop\", {0, 0, 0, 16, 9, 123, 0, 0, 0}},\n        {\"Meeting\", {0, 0, 0, 17, 9, 123, 0, 0, 0}}\n    };\n    int size = sizeof(events) / sizeof(events[0]);\n\n    for (int i = 0; i < size; i++) {\n        mktime(&events[i].date); // Normalize and set weekday\n    }\n\n    filter_weekend_events(events, size);\n    return 0;\n}\n```"
  },
  {
    "task": "Find all emails from a specific domain in an email list.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n#define MAX_EMAILS 100\n#define MAX_LENGTH 100\n\nint ends_with(const char *str, const char *suffix) {\n    if (!str || !suffix)\n        return 0;\n    size_t lenstr = strlen(str);\n    size_t lensuffix = strlen(suffix);\n    if (lensuffix > lenstr)\n        return 0;\n    return strncmp(str + lenstr - lensuffix, suffix, lensuffix) == 0;\n}\n\nvoid filter_emails_by_domain(char emails[MAX_EMAILS][MAX_LENGTH], int email_count, const char *domain) {\n    for (int i = 0; i < email_count; i++) {\n        if (ends_with(emails[i], domain)) {\n            printf(\"%s\\n\", emails[i]);\n        }\n    }\n}\n\nint main() {\n    char emails[MAX_EMAILS][MAX_LENGTH] = {\n        \"user1@example.com\",\n        \"user2@test.com\",\n        \"user3@example.com\",\n        \"user4@anotherdomain.com\"\n    };\n    int email_count = 4;\n    const char *domain = \"@example.com\";\n    \n    filter_emails_by_domain(emails, email_count, domain);\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Filter out all people not living in a specific city from a contact list.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    char name[50];\n    char city[50];\n} Person;\n\nvoid filterByCity(Person *contacts, int size, const char *city) {\n    for (int i = 0; i < size; i++) {\n        if (strcmp(contacts[i].city, city) == 0) {\n            printf(\"Name: %s, City: %s\\n\", contacts[i].name, contacts[i].city);\n        }\n    }\n}\n\nint main() {\n    Person contacts[] = {\n        {\"Alice\", \"New York\"},\n        {\"Bob\", \"Los Angeles\"},\n        {\"Charlie\", \"New York\"},\n        {\"Dave\", \"Chicago\"}\n    };\n    int size = sizeof(contacts) / sizeof(contacts[0]);\n    filterByCity(contacts, size, \"New York\");\n    return 0;\n}\n```"
  },
  {
    "task": "Select all rectangles with an area greater than 50 from a list of rectangles.",
    "code": "```c\n#include <stdio.h>\n\ntypedef struct {\n    double width;\n    double height;\n} Rectangle;\n\nint filterRectangle(Rectangle rect) {\n    return rect.width * rect.height > 50;\n}\n\nvoid filterRectangles(Rectangle *rectangles, int size, Rectangle **filtered, int *filteredSize) {\n    *filteredSize = 0;\n    for (int i = 0; i < size; i++) {\n        if (filterRectangle(rectangles[i])) {\n            (*filtered)[(*filteredSize)++] = rectangles[i];\n        }\n    }\n}\n\nint main() {\n    Rectangle rectangles[] = {\n        {5, 10}, {7, 8}, {4, 3}, {10, 5}, {6, 6}\n    };\n    int size = sizeof(rectangles) / sizeof(rectangles[0]);\n    Rectangle filtered[size];\n    int filteredSize;\n\n    filterRectangles(rectangles, size, &filtered, &filteredSize);\n\n    for (int i = 0; i < filteredSize; i++) {\n        printf(\"Rectangle %d: width = %.2f, height = %.2f\\n\", i, filtered[i].width, filtered[i].height);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Extract all elements that are not null from a collection.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\nint* filter_non_null(int* array, int size, int* new_size) {\n    int* result = (int*)malloc(size * sizeof(int));\n    int count = 0;\n    for (int i = 0; i < size; i++) {\n        if (array[i] != 0) {\n            result[count++] = array[i];\n        }\n    }\n    *new_size = count;\n    return result;\n}\n\nint main() {\n    int array[] = {1, 0, 2, 0, 3, 4, 0};\n    int size = sizeof(array) / sizeof(array[0]);\n    int new_size = 0;\n\n    int* filtered = filter_non_null(array, size, &new_size);\n\n    for (int i = 0; i < new_size; i++) {\n        printf(\"%d \", filtered[i]);\n    }\n\n    free(filtered);\n    return 0;\n}\n```"
  },
  {
    "task": "Identify all registered voters over the age of 18 from a voter registration list.",
    "code": "```c\n#include <stdio.h>\n\ntypedef struct {\n    char name[50];\n    int age;\n    int registered;\n} Voter;\n\nint is_eligible(Voter voter) {\n    return voter.age > 18 && voter.registered;\n}\n\nvoid filter_voters(Voter voters[], int size, Voter result[], int *result_size) {\n    int j = 0;\n    for (int i = 0; i < size; i++) {\n        if (is_eligible(voters[i])) {\n            result[j++] = voters[i];\n        }\n    }\n    *result_size = j;\n}\n\nint main() {\n    Voter voters[] = {\n        {\"Alice\", 25, 1},\n        {\"Bob\", 17, 1},\n        {\"Charlie\", 19, 0},\n        {\"David\", 22, 1}\n    };\n    int size = sizeof(voters) / sizeof(voters[0]);\n    Voter eligible_voters[size];\n    int eligible_size = 0;\n\n    filter_voters(voters, size, eligible_voters, &eligible_size);\n\n    for (int i = 0; i < eligible_size; i++) {\n        printf(\"Name: %s, Age: %d\\n\", eligible_voters[i].name, eligible_voters[i].age);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Select all cars manufactured after 2015 from a vehicle registry.",
    "code": "```c\n#include <stdio.h>\n\ntypedef struct {\n    char make[50];\n    char model[50];\n    int year;\n} Car;\n\nvoid filterCars(Car cars[], int size, int yearThreshold) {\n    for (int i = 0; i < size; i++) {\n        if (cars[i].year > yearThreshold) {\n            printf(\"Make: %s, Model: %s, Year: %d\\n\", cars[i].make, cars[i].model, cars[i].year);\n        }\n    }\n}\n\nint main() {\n    Car vehicleRegistry[] = {\n        {\"Toyota\", \"Corolla\", 2016},\n        {\"Ford\", \"Focus\", 2014},\n        {\"Honda\", \"Civic\", 2018},\n        {\"Chevrolet\", \"Malibu\", 2013}\n    };\n\n    int registrySize = sizeof(vehicleRegistry) / sizeof(vehicleRegistry[0]);\n    int yearThreshold = 2015;\n    \n    filterCars(vehicleRegistry, registrySize, yearThreshold);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Filter out all negative numbers from a dataset of integers.",
    "code": "```c\n#include <stdio.h>\n\nvoid filterNegativeNumbers(int *input, int *output, int size, int *newSize) {\n    *newSize = 0;\n    for(int i = 0; i < size; i++) {\n        if(input[i] >= 0) {\n            output[(*newSize)++] = input[i];\n        }\n    }\n}\n\nint main() {\n    int data[] = {3, -1, 4, -2, 5, 0, -6};\n    int size = sizeof(data) / sizeof(data[0]);\n    int filteredData[size];\n    int newSize;\n\n    filterNegativeNumbers(data, filteredData, size, &newSize);\n\n    for(int i = 0; i < newSize; i++) {\n        printf(\"%d \", filteredData[i]);\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Extract all characters from a string that are uppercase.",
    "code": "```c\n#include <stdio.h>\n#include <ctype.h>\n#include <string.h>\n\nvoid extract_uppercase(const char *input, char *output) {\n    while (*input) {\n        if (isupper(*input)) {\n            *output++ = *input;\n        }\n        input++;\n    }\n    *output = '\\0';\n}\n\nint main() {\n    const char *input_str = \"Hello World!\";\n    char output_str[100];\n    extract_uppercase(input_str, output_str);\n    printf(\"Uppercase characters: %s\\n\", output_str);\n    return 0;\n}\n```"
  },
  {
    "task": "Identify all projects with a deadline within the next month from a project database.",
    "code": "```c\n#include <stdio.h>\n#include <time.h>\n#include <string.h>\n\n#define MAX_PROJECTS 100\n\ntypedef struct {\n    char name[50];\n    struct tm deadline;\n} Project;\n\n// Function to check if a project's deadline is within the next month\nint isWithinNextMonth(struct tm deadline) {\n    time_t now;\n    time(&now);\n    struct tm *currentTime = localtime(&now);\n\n    if (deadline.tm_year == currentTime->tm_year &&\n        deadline.tm_mon == currentTime->tm_mon + 1) {\n        return 1;\n    }\n    return 0;\n}\n\n// Function to filter projects with deadlines within the next month\nvoid filterProjects(Project projects[], int count) {\n    for (int i = 0; i < count; i++) {\n        if (isWithinNextMonth(projects[i].deadline)) {\n            printf(\"Project: %s, Deadline: %d-%d-%d\\n\", projects[i].name,\n                   projects[i].deadline.tm_year + 1900,\n                   projects[i].deadline.tm_mon + 1,\n                   projects[i].deadline.tm_mday);\n        }\n    }\n}\n\nint main() {\n    Project projects[MAX_PROJECTS] = {\n        {\"Project A\", {0, 0, 0, 15, 11, 2023 - 1900}},\n        {\"Project B\", {0, 0, 0, 30, 10, 2023 - 1900}},\n        {\"Project C\", {0, 0, 0, 5, 12, 2023 - 1900}}\n    };\n    int projectCount = 3;\n\n    filterProjects(projects, projectCount);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Select all athletes with a score higher than 90 from a competition result list.",
    "code": "```c\n#include <stdio.h>\n\ntypedef struct {\n    char name[50];\n    int score;\n} Athlete;\n\nvoid filterAthletes(Athlete* athletes, int size) {\n    for (int i = 0; i < size; i++) {\n        if (athletes[i].score > 90) {\n            printf(\"Athlete: %s, Score: %d\\n\", athletes[i].name, athletes[i].score);\n        }\n    }\n}\n\nint main() {\n    Athlete athletes[] = {\n        {\"Alice\", 95},\n        {\"Bob\", 88},\n        {\"Charlie\", 92},\n        {\"David\", 70},\n        {\"Eve\", 91}\n    };\n\n    int size = sizeof(athletes) / sizeof(athletes[0]);\n    filterAthletes(athletes, size);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Filter out all strings that do not contain vowels from a list of words.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_WORDS 100\n#define MAX_LENGTH 100\n\nint contains_vowel(const char* word) {\n    for (int i = 0; word[i] != '\\0'; i++) {\n        char c = tolower(word[i]);\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            return 1;\n        }\n    }\n    return 0;\n}\n\nvoid filter_words_with_vowels(char words[][MAX_LENGTH], int n, char result[][MAX_LENGTH], int* result_count) {\n    *result_count = 0;\n    for (int i = 0; i < n; i++) {\n        if (contains_vowel(words[i])) {\n            strcpy(result[*result_count], words[i]);\n            (*result_count)++;\n        }\n    }\n}\n\nint main() {\n    char words[MAX_WORDS][MAX_LENGTH] = {\n        \"apple\", \"sky\", \"orange\", \"fly\", \"banana\", \"dry\"\n    };\n    int n = 6;\n    char result[MAX_WORDS][MAX_LENGTH];\n    int result_count;\n\n    filter_words_with_vowels(words, n, result, &result_count);\n\n    for (int i = 0; i < result_count; i++) {\n        printf(\"%s\\n\", result[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Extract all dates that fall on a weekday from a calendar.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <time.h>\n\ntypedef struct {\n    int year;\n    int month;\n    int day;\n} Date;\n\nint is_weekday(Date date) {\n    struct tm time_info = {0};\n    time_info.tm_year = date.year - 1900;\n    time_info.tm_mon = date.month - 1;\n    time_info.tm_mday = date.day;\n    mktime(&time_info);\n    return time_info.tm_wday != 0 && time_info.tm_wday != 6;\n}\n\nDate* filter_weekdays(Date* dates, int size, int* weekday_count) {\n    Date* weekdays = malloc(size * sizeof(Date));\n    *weekday_count = 0;\n    \n    for (int i = 0; i < size; i++) {\n        if (is_weekday(dates[i])) {\n            weekdays[(*weekday_count)++] = dates[i];\n        }\n    }\n    \n    return weekdays;\n}\n\nint main() {\n    Date calendar[] = {\n        {2023, 10, 13}, // Friday\n        {2023, 10, 14}, // Saturday\n        {2023, 10, 15}, // Sunday\n        {2023, 10, 16}, // Monday\n    };\n    int size = sizeof(calendar) / sizeof(calendar[0]);\n    int weekday_count;\n\n    Date* weekdays = filter_weekdays(calendar, size, &weekday_count);\n\n    for (int i = 0; i < weekday_count; i++) {\n        printf(\"%d-%02d-%02d\\n\", weekdays[i].year, weekdays[i].month, weekdays[i].day);\n    }\n\n    free(weekdays);\n    return 0;\n}\n```"
  },
  {
    "task": "Find all software versions that are stable releases from a list of software versions.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nint is_stable_release(const char *version) {\n    // Assuming stable releases do not contain 'alpha', 'beta', or 'rc'\n    return strstr(version, \"alpha\") == NULL &&\n           strstr(version, \"beta\") == NULL &&\n           strstr(version, \"rc\") == NULL;\n}\n\nvoid filter_stable_releases(const char *versions[], int count, const char *stable_versions[], int *stable_count) {\n    *stable_count = 0;\n    for (int i = 0; i < count; i++) {\n        if (is_stable_release(versions[i])) {\n            stable_versions[*stable_count] = versions[i];\n            (*stable_count)++;\n        }\n    }\n}\n\nint main() {\n    const char *versions[] = {\n        \"1.0.0\",\n        \"1.0.1-beta\",\n        \"1.1.0-rc1\",\n        \"2.0.0\",\n        \"3.0.0-alpha\",\n        \"3.0.1\"\n    };\n    int count = sizeof(versions) / sizeof(versions[0]);\n    const char *stable_versions[count];\n    int stable_count;\n\n    filter_stable_releases(versions, count, stable_versions, &stable_count);\n\n    printf(\"Stable releases:\\n\");\n    for (int i = 0; i < stable_count; i++) {\n        printf(\"%s\\n\", stable_versions[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Select all temperatures above freezing from a weather report.",
    "code": "```c\n#include <stdio.h>\n\n#define FREEZING_POINT 32\n\nvoid filterTemperaturesAboveFreezing(int *temperatures, int size, int *result, int *resultSize) {\n    *resultSize = 0;\n    for (int i = 0; i < size; i++) {\n        if (temperatures[i] > FREEZING_POINT) {\n            result[*resultSize] = temperatures[i];\n            (*resultSize)++;\n        }\n    }\n}\n\nint main() {\n    int temperatures[] = {28, 35, 40, 30, 45, 50};\n    int size = sizeof(temperatures) / sizeof(temperatures[0]);\n    int result[size];\n    int resultSize;\n\n    filterTemperaturesAboveFreezing(temperatures, size, result, &resultSize);\n\n    for (int i = 0; i < resultSize; i++) {\n        printf(\"%d \", result[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Identify all countries with a GDP per capita above $40,000 from a country dataset.",
    "code": "```c\n#include <stdio.h>\n\ntypedef struct {\n    char name[50];\n    double gdp_per_capita;\n} Country;\n\nvoid filterCountriesByGDP(Country countries[], int size) {\n    for (int i = 0; i < size; i++) {\n        if (countries[i].gdp_per_capita > 40000.0) {\n            printf(\"%s\\n\", countries[i].name);\n        }\n    }\n}\n\nint main() {\n    Country countries[] = {\n        {\"CountryA\", 45000.0},\n        {\"CountryB\", 39000.0},\n        {\"CountryC\", 50000.0},\n        {\"CountryD\", 41000.0},\n    };\n    int size = sizeof(countries) / sizeof(countries[0]);\n    filterCountriesByGDP(countries, size);\n    return 0;\n}\n```"
  },
  {
    "task": "Filter out all names shorter than four letters from a roster.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nvoid filterNames(char* roster[], int size) {\n    for (int i = 0; i < size; i++) {\n        if (strlen(roster[i]) >= 4) {\n            printf(\"%s\\n\", roster[i]);\n        }\n    }\n}\n\nint main() {\n    char* roster[] = {\"Tom\", \"Jerry\", \"Anna\", \"Sam\", \"Bob\", \"Alice\"};\n    int size = sizeof(roster) / sizeof(roster[0]);\n    filterNames(roster, size);\n    return 0;\n}\n```"
  },
  {
    "task": "Extract all numbers divisible by five from a sequence.",
    "code": "```c\n#include <stdio.h>\n\nvoid filterDivisibleByFive(int *sequence, int length, int *filtered, int *filteredLength) {\n    *filteredLength = 0;\n    for (int i = 0; i < length; ++i) {\n        if (sequence[i] % 5 == 0) {\n            filtered[*filteredLength] = sequence[i];\n            (*filteredLength)++;\n        }\n    }\n}\n\nint main() {\n    int sequence[] = {10, 23, 45, 60, 77, 85, 92};\n    int length = sizeof(sequence) / sizeof(sequence[0]);\n    int filtered[length];\n    int filteredLength;\n\n    filterDivisibleByFive(sequence, length, filtered, &filteredLength);\n\n    for (int i = 0; i < filteredLength; ++i) {\n        printf(\"%d \", filtered[i]);\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Select all movies with a rating above 4 stars from a film review site.",
    "code": "```c\n#include <stdio.h>\n\ntypedef struct {\n    char title[100];\n    float rating;\n} Movie;\n\n// Function to filter movies with a rating above 4 stars\nvoid filterMovies(Movie movies[], int size) {\n    for (int i = 0; i < size; i++) {\n        if (movies[i].rating > 4.0) {\n            printf(\"%s\\n\", movies[i].title);\n        }\n    }\n}\n\nint main() {\n    Movie movies[] = {\n        {\"Movie A\", 4.5},\n        {\"Movie B\", 3.9},\n        {\"Movie C\", 4.8},\n        {\"Movie D\", 4.1}\n    };\n    int size = sizeof(movies) / sizeof(movies[0]);\n    \n    filterMovies(movies, size);\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Find all jobs with a salary above $50,000 from a job listing.",
    "code": "```c\n#include <stdio.h>\n\n#define MAX_JOBS 100\n\ntypedef struct {\n    char title[50];\n    double salary;\n} Job;\n\nvoid filterJobs(Job jobs[], int size, Job result[], int *resultSize) {\n    *resultSize = 0;\n    for (int i = 0; i < size; ++i) {\n        if (jobs[i].salary > 50000) {\n            result[*resultSize] = jobs[i];\n            (*resultSize)++;\n        }\n    }\n}\n\nint main() {\n    Job jobs[MAX_JOBS] = {\n        {\"Developer\", 60000},\n        {\"Designer\", 45000},\n        {\"Manager\", 75000},\n        {\"Intern\", 30000}\n    };\n    int size = 4;\n\n    Job filteredJobs[MAX_JOBS];\n    int filteredSize;\n\n    filterJobs(jobs, size, filteredJobs, &filteredSize);\n\n    for (int i = 0; i < filteredSize; ++i) {\n        printf(\"Job Title: %s, Salary: %.2f\\n\", filteredJobs[i].title, filteredJobs[i].salary);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Filter out all entries without an email address from a contact form submission list.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n#define MAX_CONTACTS 100\n#define MAX_NAME_LEN 50\n#define MAX_EMAIL_LEN 50\n\ntypedef struct {\n    char name[MAX_NAME_LEN];\n    char email[MAX_EMAIL_LEN];\n} Contact;\n\nint hasEmail(Contact contact) {\n    return strlen(contact.email) > 0;\n}\n\nvoid filterContacts(Contact contacts[], int size, Contact result[], int *resultSize) {\n    *resultSize = 0;\n    for (int i = 0; i < size; i++) {\n        if (hasEmail(contacts[i])) {\n            result[(*resultSize)++] = contacts[i];\n        }\n    }\n}\n\nint main() {\n    Contact contacts[MAX_CONTACTS] = {\n        {\"Alice\", \"alice@example.com\"},\n        {\"Bob\", \"\"},\n        {\"Charlie\", \"charlie@example.com\"}\n    };\n    int size = 3;\n    \n    Contact filteredContacts[MAX_CONTACTS];\n    int filteredSize;\n\n    filterContacts(contacts, size, filteredContacts, &filteredSize);\n\n    for (int i = 0; i < filteredSize; i++) {\n        printf(\"Name: %s, Email: %s\\n\", filteredContacts[i].name, filteredContacts[i].email);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Identify all animals weighing more than 50kg from a zoo inventory.",
    "code": "```c\n#include <stdio.h>\n\ntypedef struct {\n    char name[50];\n    double weight;\n} Animal;\n\nvoid filterAnimals(Animal animals[], int size, double weightThreshold) {\n    for (int i = 0; i < size; i++) {\n        if (animals[i].weight > weightThreshold) {\n            printf(\"Animal: %s, Weight: %.2f\\n\", animals[i].name, animals[i].weight);\n        }\n    }\n}\n\nint main() {\n    Animal zooInventory[] = {\n        {\"Elephant\", 1200.5},\n        {\"Giraffe\", 800.0},\n        {\"Monkey\", 35.5},\n        {\"Lion\", 190.0},\n        {\"Parrot\", 1.5}\n    };\n    int inventorySize = sizeof(zooInventory) / sizeof(zooInventory[0]);\n    filterAnimals(zooInventory, inventorySize, 50.0);\n    return 0;\n}\n```"
  },
  {
    "task": "Select all songs with a duration longer than three minutes from a playlist.",
    "code": "```c\n#include <stdio.h>\n\ntypedef struct {\n    char title[100];\n    int duration; // duration in seconds\n} Song;\n\nvoid filterSongs(Song playlist[], int size, Song result[], int *resultSize) {\n    *resultSize = 0;\n    for (int i = 0; i < size; i++) {\n        if (playlist[i].duration > 180) {\n            result[*resultSize] = playlist[i];\n            (*resultSize)++;\n        }\n    }\n}\n\nint main() {\n    Song playlist[] = {\n        {\"Song1\", 200},\n        {\"Song2\", 150},\n        {\"Song3\", 240}\n    };\n    int size = sizeof(playlist) / sizeof(playlist[0]);\n    Song result[size];\n    int resultSize;\n\n    filterSongs(playlist, size, result, &resultSize);\n\n    for (int i = 0; i < resultSize; i++) {\n        printf(\"Title: %s, Duration: %d\\n\", result[i].title, result[i].duration);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Extract all accounts with a balance below zero from a bank statement.",
    "code": "```c\n#include <stdio.h>\n\ntypedef struct {\n    char name[50];\n    double balance;\n} Account;\n\nvoid filterNegativeBalanceAccounts(Account accounts[], Account result[], int size, int *resultSize) {\n    *resultSize = 0;\n    for (int i = 0; i < size; i++) {\n        if (accounts[i].balance < 0) {\n            result[*resultSize] = accounts[i];\n            (*resultSize)++;\n        }\n    }\n}\n\nint main() {\n    Account accounts[] = {\n        {\"Alice\", 100.0},\n        {\"Bob\", -50.0},\n        {\"Charlie\", -20.0},\n        {\"David\", 200.0}\n    };\n    int size = sizeof(accounts) / sizeof(accounts[0]);\n    Account result[size];\n    int resultSize;\n\n    filterNegativeBalanceAccounts(accounts, result, size, &resultSize);\n\n    for (int i = 0; i < resultSize; i++) {\n        printf(\"Name: %s, Balance: %.2f\\n\", result[i].name, result[i].balance);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Filter out all non-alphabetic characters from a string of text.",
    "code": "```c\n#include <stdio.h>\n#include <ctype.h>\n\nvoid filterAlphabetic(char *src, char *dest) {\n    while (*src) {\n        if (isalpha(*src)) {\n            *dest++ = *src;\n        }\n        src++;\n    }\n    *dest = '\\0';\n}\n\nint main() {\n    char text[] = \"H3ll0, W0rld!\";\n    char filtered[50];\n    \n    filterAlphabetic(text, filtered);\n    printf(\"Filtered text: %s\\n\", filtered);\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Select all participants who scored above average in a competition.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    char name[50];\n    int score;\n} Participant;\n\ndouble calculate_average(Participant participants[], int count) {\n    int sum = 0;\n    for (int i = 0; i < count; i++) {\n        sum += participants[i].score;\n    }\n    return (double)sum / count;\n}\n\nvoid filter_above_average(Participant participants[], int count, double average) {\n    for (int i = 0; i < count; i++) {\n        if (participants[i].score > average) {\n            printf(\"Name: %s, Score: %d\\n\", participants[i].name, participants[i].score);\n        }\n    }\n}\n\nint main() {\n    Participant participants[] = {\n        {\"Alice\", 85}, {\"Bob\", 90}, {\"Charlie\", 75}, {\"David\", 80}\n    };\n    int count = sizeof(participants) / sizeof(participants[0]);\n    double average = calculate_average(participants, count);\n    filter_above_average(participants, count, average);\n    return 0;\n}\n```"
  },
  {
    "task": "Find all houses priced under $300,000 from a real estate database.",
    "code": "```c\n#include <stdio.h>\n\ntypedef struct {\n    char address[100];\n    double price;\n} House;\n\nvoid filterHouses(House *houses, int size, double maxPrice) {\n    for (int i = 0; i < size; i++) {\n        if (houses[i].price < maxPrice) {\n            printf(\"Address: %s, Price: %.2f\\n\", houses[i].address, houses[i].price);\n        }\n    }\n}\n\nint main() {\n    House houses[] = {\n        {\"123 Elm St\", 250000},\n        {\"456 Oak St\", 350000},\n        {\"789 Maple Ave\", 275000}\n    };\n    int size = sizeof(houses) / sizeof(houses[0]);\n    double maxPrice = 300000;\n\n    filterHouses(houses, size, maxPrice);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Identify all plants that bloom in spring from a botanical catalog.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n#define NUM_PLANTS 5\n\ntypedef struct {\n    char name[50];\n    char bloom_season[20];\n} Plant;\n\nvoid filter_spring_bloomers(Plant plants[], int size) {\n    for (int i = 0; i < size; i++) {\n        if (strcmp(plants[i].bloom_season, \"spring\") == 0) {\n            printf(\"Plant: %s\\n\", plants[i].name);\n        }\n    }\n}\n\nint main() {\n    Plant catalog[NUM_PLANTS] = {\n        {\"Daffodil\", \"spring\"},\n        {\"Rose\", \"summer\"},\n        {\"Tulip\", \"spring\"},\n        {\"Chrysanthemum\", \"fall\"},\n        {\"Sunflower\", \"summer\"}\n    };\n\n    filter_spring_bloomers(catalog, NUM_PLANTS);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Extract all passwords that are longer than eight characters from a user database.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n#define MAX_USERS 100\n#define MAX_PASSWORD_LENGTH 50\n\ntypedef struct {\n    char username[50];\n    char password[MAX_PASSWORD_LENGTH];\n} User;\n\nvoid filter_long_passwords(User users[], int user_count) {\n    for (int i = 0; i < user_count; i++) {\n        if (strlen(users[i].password) > 8) {\n            printf(\"%s\\n\", users[i].password);\n        }\n    }\n}\n\nint main() {\n    User users[MAX_USERS] = {\n        {\"user1\", \"short\"},\n        {\"user2\", \"longenoughpassword\"},\n        {\"user3\", \"anotherlongpassword\"},\n        {\"user4\", \"tiny\"}\n    };\n\n    int user_count = 4;\n    filter_long_passwords(users, user_count);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Filter out all projects that are not yet started from a project management tool.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    char name[50];\n    char status[20];\n} Project;\n\nint isStarted(Project project) {\n    return strcmp(project.status, \"Not Started\") != 0;\n}\n\nvoid filterProjects(Project projects[], int size, Project result[], int *resultSize) {\n    *resultSize = 0;\n    for (int i = 0; i < size; i++) {\n        if (isStarted(projects[i])) {\n            result[*resultSize] = projects[i];\n            (*resultSize)++;\n        }\n    }\n}\n\nint main() {\n    Project projects[] = {\n        {\"Project A\", \"In Progress\"},\n        {\"Project B\", \"Not Started\"},\n        {\"Project C\", \"Completed\"},\n        {\"Project D\", \"Not Started\"},\n        {\"Project E\", \"In Progress\"}\n    };\n    int size = sizeof(projects) / sizeof(projects[0]);\n\n    Project filteredProjects[size];\n    int filteredSize;\n\n    filterProjects(projects, size, filteredProjects, &filteredSize);\n\n    for (int i = 0; i < filteredSize; i++) {\n        printf(\"Project Name: %s, Status: %s\\n\", filteredProjects[i].name, filteredProjects[i].status);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Select all days with temperatures exceeding 25\u00b0C from a climate report.",
    "code": "```c\n#include <stdio.h>\n\n#define NUM_DAYS 7\n\nvoid filterTemperatures(float temperatures[], int size, float threshold) {\n    for (int i = 0; i < size; i++) {\n        if (temperatures[i] > threshold) {\n            printf(\"Day %d: %.1f\u00b0C\\n\", i + 1, temperatures[i]);\n        }\n    }\n}\n\nint main() {\n    float temperatures[NUM_DAYS] = {22.5, 27.3, 26.0, 18.7, 29.4, 24.1, 28.9};\n    filterTemperatures(temperatures, NUM_DAYS, 25.0);\n    return 0;\n}\n```"
  },
  {
    "task": "Find all recipes that are vegetarian from a cookbook.",
    "code": "```c\n#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n\n#define NUM_RECIPES 5\n\ntypedef struct {\n    char name[50];\n    bool isVegetarian;\n} Recipe;\n\nvoid filterVegetarianRecipes(Recipe recipes[], int numRecipes) {\n    for (int i = 0; i < numRecipes; i++) {\n        if (recipes[i].isVegetarian) {\n            printf(\"%s\\n\", recipes[i].name);\n        }\n    }\n}\n\nint main() {\n    Recipe cookbook[NUM_RECIPES] = {\n        {\"Spaghetti Bolognese\", false},\n        {\"Vegetable Stir Fry\", true},\n        {\"Beef Tacos\", false},\n        {\"Caprese Salad\", true},\n        {\"Mushroom Risotto\", true}\n    };\n\n    filterVegetarianRecipes(cookbook, NUM_RECIPES);\n    return 0;\n}\n```"
  },
  {
    "task": "Identify all articles that mention a specific keyword from a news feed.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n#define MAX_ARTICLES 100\n#define MAX_LENGTH 256\n\nint containsKeyword(const char *article, const char *keyword) {\n    return strstr(article, keyword) != NULL;\n}\n\nvoid filterArticles(const char articles[][MAX_LENGTH], int count, const char *keyword) {\n    for (int i = 0; i < count; ++i) {\n        if (containsKeyword(articles[i], keyword)) {\n            printf(\"Article %d: %s\\n\", i + 1, articles[i]);\n        }\n    }\n}\n\nint main() {\n    const char articles[MAX_ARTICLES][MAX_LENGTH] = {\n        \"Breaking news: The keyword is here.\",\n        \"This article does not mention it.\",\n        \"Another one with the keyword inside.\"\n    };\n    const char *keyword = \"keyword\";\n    int articleCount = 3;\n\n    filterArticles(articles, articleCount, keyword);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Extract all files with the '.jpg' extension from a directory.",
    "code": "```c\n#include <dirent.h>\n#include <stdio.h>\n#include <string.h>\n\nint main() {\n    DIR *d;\n    struct dirent *dir;\n    d = opendir(\".\");\n    if (d) {\n        while ((dir = readdir(d)) != NULL) {\n            if (strstr(dir->d_name, \".jpg\") != NULL) {\n                printf(\"%s\\n\", dir->d_name);\n            }\n        }\n        closedir(d);\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Filter out all transactions that are not categorized from a financial statement.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n#define MAX_TRANSACTIONS 100\n#define CATEGORY_LENGTH 50\n\ntypedef struct {\n    char description[100];\n    char category[CATEGORY_LENGTH];\n    double amount;\n} Transaction;\n\nvoid filterCategorizedTransactions(Transaction transactions[], int count, Transaction result[], int *resultCount) {\n    *resultCount = 0;\n    for (int i = 0; i < count; i++) {\n        if (strlen(transactions[i].category) > 0) {\n            result[*resultCount] = transactions[i];\n            (*resultCount)++;\n        }\n    }\n}\n\nint main() {\n    Transaction transactions[MAX_TRANSACTIONS] = {\n        {\"Grocery\", \"Food\", 150.00},\n        {\"Electricity Bill\", \"\", 75.00},\n        {\"Rent\", \"Housing\", 500.00},\n        {\"Gym Membership\", \"\", 30.00}\n    };\n    int transactionCount = 4;\n\n    Transaction filteredTransactions[MAX_TRANSACTIONS];\n    int filteredCount;\n\n    filterCategorizedTransactions(transactions, transactionCount, filteredTransactions, &filteredCount);\n\n    for (int i = 0; i < filteredCount; i++) {\n        printf(\"Description: %s, Category: %s, Amount: %.2f\\n\",\n               filteredTransactions[i].description,\n               filteredTransactions[i].category,\n               filteredTransactions[i].amount);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Select all paintings created before 1900 from an art gallery collection.",
    "code": "```c\n#include <stdio.h>\n\ntypedef struct {\n    char title[100];\n    int year;\n} Painting;\n\nvoid filterPaintings(Painting paintings[], int size) {\n    for (int i = 0; i < size; i++) {\n        if (paintings[i].year < 1900) {\n            printf(\"Title: %s, Year: %d\\n\", paintings[i].title, paintings[i].year);\n        }\n    }\n}\n\nint main() {\n    Painting gallery[] = {\n        {\"Starry Night\", 1889},\n        {\"Impression, Sunrise\", 1872},\n        {\"The Persistence of Memory\", 1931},\n        {\"Mona Lisa\", 1503}\n    };\n    int size = sizeof(gallery) / sizeof(gallery[0]);\n    filterPaintings(gallery, size);\n    return 0;\n}\n```"
  },
  {
    "task": "Find all students with perfect attendance from a school record.",
    "code": "```c\n#include <stdio.h>\n\n#define MAX_STUDENTS 100\n\ntypedef struct {\n    char name[50];\n    int attendance; // 1 for perfect attendance, 0 otherwise\n} Student;\n\nvoid filterPerfectAttendance(Student students[], int count, Student result[], int *resultCount) {\n    *resultCount = 0;\n    for (int i = 0; i < count; ++i) {\n        if (students[i].attendance == 1) {\n            result[(*resultCount)++] = students[i];\n        }\n    }\n}\n\nint main() {\n    Student students[MAX_STUDENTS] = {\n        {\"Alice\", 1},\n        {\"Bob\", 0},\n        {\"Charlie\", 1},\n        {\"David\", 0}\n    };\n    int studentCount = 4;\n    \n    Student perfectAttendance[MAX_STUDENTS];\n    int perfectCount;\n\n    filterPerfectAttendance(students, studentCount, perfectAttendance, &perfectCount);\n\n    for (int i = 0; i < perfectCount; ++i) {\n        printf(\"Student with perfect attendance: %s\\n\", perfectAttendance[i].name);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Identify all messages sent by a specific user from a chat application.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n#define MAX_MESSAGES 100\n#define MAX_LENGTH 256\n#define USERNAME_LENGTH 50\n\ntypedef struct {\n    char username[USERNAME_LENGTH];\n    char message[MAX_LENGTH];\n} ChatMessage;\n\nvoid filterMessagesByUser(ChatMessage messages[], int messageCount, const char *username) {\n    for (int i = 0; i < messageCount; i++) {\n        if (strcmp(messages[i].username, username) == 0) {\n            printf(\"User: %s, Message: %s\\n\", messages[i].username, messages[i].message);\n        }\n    }\n}\n\nint main() {\n    ChatMessage messages[MAX_MESSAGES] = {\n        {\"alice\", \"Hello!\"},\n        {\"bob\", \"Hey there!\"},\n        {\"alice\", \"How are you?\"},\n        {\"bob\", \"I'm fine, thanks!\"},\n        {\"alice\", \"What's up?\"}\n    };\n\n    const char *targetUser = \"alice\";\n    filterMessagesByUser(messages, 5, targetUser);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Extract all elements greater than 100 from an array of numbers.",
    "code": "```c\n#include <stdio.h>\n\nvoid filterGreaterThan100(int *input, int size, int *output, int *outputSize) {\n    *outputSize = 0;\n    for (int i = 0; i < size; i++) {\n        if (input[i] > 100) {\n            output[(*outputSize)++] = input[i];\n        }\n    }\n}\n\nint main() {\n    int input[] = {50, 120, 30, 200, 150, 80};\n    int size = sizeof(input) / sizeof(input[0]);\n    int output[size];\n    int outputSize;\n\n    filterGreaterThan100(input, size, output, &outputSize);\n\n    for (int i = 0; i < outputSize; i++) {\n        printf(\"%d \", output[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Filter out all words that do not end in 'ed' from a paragraph.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n#define MAX_WORDS 1000\n#define MAX_WORD_LENGTH 100\n\nvoid filterWordsEndingWithEd(char *paragraph) {\n    char *words[MAX_WORDS];\n    int wordCount = 0;\n\n    char *token = strtok(paragraph, \" \");\n    while (token != NULL) {\n        size_t len = strlen(token);\n        if (len >= 2 && token[len - 2] == 'e' && token[len - 1] == 'd') {\n            words[wordCount++] = token;\n        }\n        token = strtok(NULL, \" \");\n    }\n\n    for (int i = 0; i < wordCount; i++) {\n        printf(\"%s \", words[i]);\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    char paragraph[] = \"The cat jumped and played while the dog barked and chased.\";\n    filterWordsEndingWithEd(paragraph);\n    return 0;\n}\n```"
  },
  {
    "task": "Select all flights departing before noon from a flight schedule.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    char flightNumber[10];\n    int departureHour; // 24-hour format\n    int departureMinute;\n} Flight;\n\nvoid filterFlightsBeforeNoon(const Flight flights[], int size, Flight filtered[], int *filteredSize) {\n    *filteredSize = 0;\n    for (int i = 0; i < size; i++) {\n        if (flights[i].departureHour < 12) {\n            filtered[*filteredSize] = flights[i];\n            (*filteredSize)++;\n        }\n    }\n}\n\nint main() {\n    Flight schedule[] = {\n        {\"AA123\", 10, 30},\n        {\"BB456\", 14, 45},\n        {\"CC789\", 9, 15},\n        {\"DD101\", 11, 50},\n        {\"EE202\", 13, 00}\n    };\n    int scheduleSize = sizeof(schedule) / sizeof(schedule[0]);\n    \n    Flight morningFlights[scheduleSize];\n    int morningFlightsSize;\n\n    filterFlightsBeforeNoon(schedule, scheduleSize, morningFlights, &morningFlightsSize);\n\n    for (int i = 0; i < morningFlightsSize; i++) {\n        printf(\"Flight %s departs at %02d:%02d\\n\",\n               morningFlights[i].flightNumber,\n               morningFlights[i].departureHour,\n               morningFlights[i].departureMinute);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Find all products priced above $20 from an online store inventory.",
    "code": "```c\n#include <stdio.h>\n\ntypedef struct {\n    char name[50];\n    double price;\n} Product;\n\nvoid filterProducts(Product *products, int size) {\n    for (int i = 0; i < size; i++) {\n        if (products[i].price > 20.0) {\n            printf(\"Product: %s, Price: %.2f\\n\", products[i].name, products[i].price);\n        }\n    }\n}\n\nint main() {\n    Product inventory[] = {\n        {\"Product A\", 15.0},\n        {\"Product B\", 25.0},\n        {\"Product C\", 30.0},\n        {\"Product D\", 10.0}\n    };\n    int inventorySize = sizeof(inventory) / sizeof(inventory[0]);\n\n    filterProducts(inventory, inventorySize);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Identify all sessions longer than one hour from a webinar series.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int session_id;\n    int duration_minutes;\n} Session;\n\nvoid filter_long_sessions(Session *sessions, int count) {\n    for (int i = 0; i < count; i++) {\n        if (sessions[i].duration_minutes > 60) {\n            printf(\"Session ID: %d, Duration: %d minutes\\n\", sessions[i].session_id, sessions[i].duration_minutes);\n        }\n    }\n}\n\nint main() {\n    Session webinar_sessions[] = {\n        {1, 45},\n        {2, 75},\n        {3, 90},\n        {4, 30},\n        {5, 120}\n    };\n\n    int session_count = sizeof(webinar_sessions) / sizeof(webinar_sessions[0]);\n    filter_long_sessions(webinar_sessions, session_count);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Extract all images with a resolution higher than 1080p from a photo library.",
    "code": "```c\n#include <stdio.h>\n\ntypedef struct {\n    int width;\n    int height;\n} Image;\n\nint is_higher_than_1080p(const Image *img) {\n    return img->width * img->height > 1920 * 1080;\n}\n\nvoid filter_images(const Image *images, int count, Image *output, int *out_count) {\n    *out_count = 0;\n    for (int i = 0; i < count; i++) {\n        if (is_higher_than_1080p(&images[i])) {\n            output[*out_count] = images[i];\n            (*out_count)++;\n        }\n    }\n}\n\nint main() {\n    Image photos[] = {\n        {1920, 1080}, {2560, 1440}, {3840, 2160}, {1280, 720}\n    };\n    int photo_count = sizeof(photos) / sizeof(photos[0]);\n    Image filtered_photos[photo_count];\n    int filtered_count;\n\n    filter_images(photos, photo_count, filtered_photos, &filtered_count);\n\n    for (int i = 0; i < filtered_count; i++) {\n        printf(\"Image %d: %dx%d\\n\", i + 1, filtered_photos[i].width, filtered_photos[i].height);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Filter out all responses that are not 'yes' or 'no' from a survey result.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n#define MAX_RESPONSES 100\n#define MAX_LENGTH 10\n\nint main() {\n    char responses[MAX_RESPONSES][MAX_LENGTH] = {\n        \"yes\", \"no\", \"maybe\", \"yes\", \"no\", \"unknown\", \"yes\", \"no\", \"yes\", \"no\"\n    };\n    int num_responses = 10;\n    \n    for(int i = 0; i < num_responses; i++) {\n        if(strcmp(responses[i], \"yes\") == 0 || strcmp(responses[i], \"no\") == 0) {\n            printf(\"%s\\n\", responses[i]);\n        }\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Select all tweets with more than 100 likes from a Twitter feed.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    char *content;\n    int likes;\n} Tweet;\n\nvoid filterTweets(Tweet *tweets, int size, int threshold, Tweet **filteredTweets, int *filteredSize) {\n    int count = 0;\n    for (int i = 0; i < size; i++) {\n        if (tweets[i].likes > threshold) {\n            count++;\n        }\n    }\n    \n    *filteredTweets = (Tweet *)malloc(count * sizeof(Tweet));\n    \n    int j = 0;\n    for (int i = 0; i < size; i++) {\n        if (tweets[i].likes > threshold) {\n            (*filteredTweets)[j++] = tweets[i];\n        }\n    }\n    \n    *filteredSize = count;\n}\n\nint main() {\n    Tweet tweets[] = {\n        {\"Hello World!\", 150},\n        {\"Learning C is fun!\", 90},\n        {\"I love programming.\", 200},\n        {\"Functional programming is powerful.\", 80}\n    };\n    \n    int size = sizeof(tweets) / sizeof(tweets[0]);\n    Tweet *filteredTweets;\n    int filteredSize;\n    \n    filterTweets(tweets, size, 100, &filteredTweets, &filteredSize);\n    \n    for (int i = 0; i < filteredSize; i++) {\n        printf(\"Tweet: %s, Likes: %d\\n\", filteredTweets[i].content, filteredTweets[i].likes);\n    }\n    \n    free(filteredTweets);\n    return 0;\n}\n```"
  },
  {
    "task": "Find all links that are broken from a webpage.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <curl/curl.h>\n\ntypedef struct {\n    char *data;\n    size_t size;\n} MemoryStruct;\n\nsize_t WriteMemoryCallback(void *contents, size_t size, size_t nmemb, void *userp) {\n    size_t realsize = size * nmemb;\n    MemoryStruct *mem = (MemoryStruct *)userp;\n\n    char *ptr = realloc(mem->data, mem->size + realsize + 1);\n    if(ptr == NULL) return 0;\n\n    mem->data = ptr;\n    memcpy(&(mem->data[mem->size]), contents, realsize);\n    mem->size += realsize;\n    mem->data[mem->size] = 0;\n\n    return realsize;\n}\n\nint is_broken_link(const char *url) {\n    CURL *curl;\n    CURLcode res;\n    int is_broken = 0;\n\n    curl = curl_easy_init();\n    if(curl) {\n        curl_easy_setopt(curl, CURLOPT_URL, url);\n        curl_easy_setopt(curl, CURLOPT_NOBODY, 1L);\n        curl_easy_setopt(curl, CURLOPT_FAILONERROR, 1L);\n        res = curl_easy_perform(curl);\n        if(res != CURLE_OK) is_broken = 1;\n        curl_easy_cleanup(curl);\n    }\n    return is_broken;\n}\n\nvoid find_broken_links(const char *html) {\n    const char *link_start = html;\n    while((link_start = strstr(link_start, \"<a href=\\\"\")) != NULL) {\n        link_start += 9;\n        const char *link_end = strchr(link_start, '\"');\n        if(link_end) {\n            size_t link_len = link_end - link_start;\n            char *link = (char *)malloc(link_len + 1);\n            if(link) {\n                strncpy(link, link_start, link_len);\n                link[link_len] = '\\0';\n                if(is_broken_link(link)) {\n                    printf(\"Broken link: %s\\n\", link);\n                }\n                free(link);\n            }\n            link_start = link_end;\n        }\n    }\n}\n\nint main(void) {\n    CURL *curl;\n    CURLcode res;\n    MemoryStruct chunk = {0};\n\n    curl_global_init(CURL_GLOBAL_DEFAULT);\n    curl = curl_easy_init();\n    if(curl) {\n        curl_easy_setopt(curl, CURLOPT_URL, \"http://example.com\");\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, WriteMemoryCallback);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, (void *)&chunk);\n        res = curl_easy_perform(curl);\n        if(res == CURLE_OK) {\n            find_broken_links(chunk.data);\n        } else {\n            fprintf(stderr, \"Failed to fetch webpage: %s\\n\", curl_easy_strerror(res));\n        }\n        curl_easy_cleanup(curl);\n    }\n    free(chunk.data);\n    curl_global_cleanup();\n    return 0;\n}\n```"
  },
  {
    "task": "Identify all machines that are currently offline from a network monitoring tool.",
    "code": "```c\n#include <stdio.h>\n#include <stdbool.h>\n\ntypedef struct {\n    char *name;\n    bool isOnline;\n} Machine;\n\nvoid filterOfflineMachines(Machine machines[], int count, Machine offlineMachines[], int *offlineCount) {\n    *offlineCount = 0;\n    for (int i = 0; i < count; ++i) {\n        if (!machines[i].isOnline) {\n            offlineMachines[*offlineCount] = machines[i];\n            (*offlineCount)++;\n        }\n    }\n}\n\nint main() {\n    Machine machines[] = {\n        {\"Machine1\", true},\n        {\"Machine2\", false},\n        {\"Machine3\", true},\n        {\"Machine4\", false},\n    };\n    int totalMachines = sizeof(machines) / sizeof(Machine);\n    Machine offlineMachines[totalMachines];\n    int offlineCount;\n\n    filterOfflineMachines(machines, totalMachines, offlineMachines, &offlineCount);\n\n    printf(\"Offline Machines:\\n\");\n    for (int i = 0; i < offlineCount; ++i) {\n        printf(\"%s\\n\", offlineMachines[i].name);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Extract all invoices with a due date in the current month from an accounting system.",
    "code": "```c\n#include <stdio.h>\n#include <time.h>\n\n#define NUM_INVOICES 100\n\ntypedef struct {\n    int id;\n    struct tm due_date;\n} Invoice;\n\nvoid filter_invoices(Invoice* invoices, int size, Invoice* result, int* result_size) {\n    time_t t = time(NULL);\n    struct tm current_time = *localtime(&t);\n\n    int count = 0;\n    for (int i = 0; i < size; i++) {\n        if (invoices[i].due_date.tm_year == current_time.tm_year &&\n            invoices[i].due_date.tm_mon == current_time.tm_mon) {\n            result[count++] = invoices[i];\n        }\n    }\n    *result_size = count;\n}\n\nint main() {\n    Invoice invoices[NUM_INVOICES];\n    // Populate invoices with data\n\n    Invoice filtered_invoices[NUM_INVOICES];\n    int filtered_size;\n\n    filter_invoices(invoices, NUM_INVOICES, filtered_invoices, &filtered_size);\n\n    for (int i = 0; i < filtered_size; i++) {\n        printf(\"Invoice ID: %d\\n\", filtered_invoices[i].id);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Filter out all lines in a file that start with a '#' from a configuration file.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MAX_LINE_LENGTH 1024\n\nint main(int argc, char *argv[]) {\n    if (argc != 2) {\n        fprintf(stderr, \"Usage: %s <filename>\\n\", argv[0]);\n        return 1;\n    }\n\n    FILE *file = fopen(argv[1], \"r\");\n    if (!file) {\n        perror(\"Error opening file\");\n        return 1;\n    }\n\n    char line[MAX_LINE_LENGTH];\n    while (fgets(line, sizeof(line), file)) {\n        if (line[0] != '#') {\n            printf(\"%s\", line);\n        }\n    }\n\n    fclose(file);\n    return 0;\n}\n```"
  },
  {
    "task": "Select all posts with a comment count higher than 50 from a blog.",
    "code": "```c\n#include <stdio.h>\n\ntypedef struct {\n    int id;\n    char title[100];\n    int comment_count;\n} Post;\n\nvoid filter_posts(Post posts[], int size, int threshold, Post result[], int *result_size) {\n    int j = 0;\n    for (int i = 0; i < size; ++i) {\n        if (posts[i].comment_count > threshold) {\n            result[j++] = posts[i];\n        }\n    }\n    *result_size = j;\n}\n\nint main() {\n    Post posts[] = {\n        {1, \"Post 1\", 45},\n        {2, \"Post 2\", 60},\n        {3, \"Post 3\", 30},\n        {4, \"Post 4\", 75},\n        {5, \"Post 5\", 90}\n    };\n    int size = sizeof(posts) / sizeof(posts[0]);\n    int threshold = 50;\n    Post result[size];\n    int result_size = 0;\n\n    filter_posts(posts, size, threshold, result, &result_size);\n\n    for (int i = 0; i < result_size; ++i) {\n        printf(\"Post ID: %d, Title: %s, Comment Count: %d\\n\", result[i].id, result[i].title, result[i].comment_count);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Find all offers that expire within the next week from a promotional database.",
    "code": "```c\n#include <stdio.h>\n#include <time.h>\n\n#define MAX_OFFERS 100\n\ntypedef struct {\n    char name[50];\n    time_t expiryDate;\n} Offer;\n\nvoid filterOffers(Offer offers[], int size, Offer result[], int *resultSize) {\n    time_t now;\n    time(&now);\n\n    struct tm now_tm;\n    localtime_r(&now, &now_tm);\n    now_tm.tm_mday += 7;\n    time_t nextWeek = mktime(&now_tm);\n\n    *resultSize = 0;\n    for (int i = 0; i < size; i++) {\n        if (difftime(offers[i].expiryDate, now) <= difftime(nextWeek, now)) {\n            result[(*resultSize)++] = offers[i];\n        }\n    }\n}\n\nint main() {\n    Offer offers[MAX_OFFERS] = {\n        {\"Offer1\", 1700000000},\n        {\"Offer2\", 1700086400},\n        {\"Offer3\", 1700172800},\n        // Add more offers as needed\n    };\n\n    Offer filteredOffers[MAX_OFFERS];\n    int filteredSize;\n\n    filterOffers(offers, 3, filteredOffers, &filteredSize);\n\n    printf(\"Offers expiring within the next week:\\n\");\n    for (int i = 0; i < filteredSize; i++) {\n        printf(\"Name: %s\\n\", filteredOffers[i].name);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Identify all items that are on sale from a shopping catalog.",
    "code": "```c\n#include <stdio.h>\n#include <stdbool.h>\n\ntypedef struct {\n    char name[50];\n    double price;\n    bool onSale;\n} Item;\n\nvoid filterOnSaleItems(Item catalog[], int catalogSize) {\n    for (int i = 0; i < catalogSize; i++) {\n        if (catalog[i].onSale) {\n            printf(\"Item on sale: %s\\n\", catalog[i].name);\n        }\n    }\n}\n\nint main() {\n    Item catalog[] = {\n        {\"Laptop\", 999.99, false},\n        {\"Smartphone\", 499.99, true},\n        {\"Headphones\", 79.99, true},\n        {\"Monitor\", 199.99, false}\n    };\n    int catalogSize = sizeof(catalog) / sizeof(catalog[0]);\n    \n    filterOnSaleItems(catalog, catalogSize);\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Extract all notes that mention 'urgent' from a meeting record.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n#define MAX_NOTES 100\n#define MAX_NOTE_LENGTH 256\n\nvoid filterUrgentNotes(char notes[MAX_NOTES][MAX_NOTE_LENGTH], int noteCount) {\n    for (int i = 0; i < noteCount; i++) {\n        if (strstr(notes[i], \"urgent\") != NULL) {\n            printf(\"%s\\n\", notes[i]);\n        }\n    }\n}\n\nint main() {\n    char notes[MAX_NOTES][MAX_NOTE_LENGTH] = {\n        \"Discuss project timeline\",\n        \"urgent: finalize budget\",\n        \"Review team roles\",\n        \"urgent: client feedback needed\",\n        \"Plan next meeting\"\n    };\n    int noteCount = 5;\n\n    filterUrgentNotes(notes, noteCount);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Filter out all numbers that do not have a remainder when divided by two from a list.",
    "code": "```c\n#include <stdio.h>\n\nvoid filterEvenNumbers(int *array, int size, int *result, int *resultSize) {\n    int j = 0;\n    for (int i = 0; i < size; i++) {\n        if (array[i] % 2 != 0) {\n            result[j++] = array[i];\n        }\n    }\n    *resultSize = j;\n}\n\nint main() {\n    int array[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n    int size = sizeof(array) / sizeof(array[0]);\n    int result[size];\n    int resultSize;\n\n    filterEvenNumbers(array, size, result, &resultSize);\n\n    for (int i = 0; i < resultSize; i++) {\n        printf(\"%d \", result[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Select all concerts happening in the summer from an event calendar.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    char name[50];\n    char date[20]; // Assuming date format is \"YYYY-MM-DD\"\n} Concert;\n\nint isSummer(const char* date) {\n    int month;\n    sscanf(date, \"%*d-%d-%*d\", &month);\n    return month >= 6 && month <= 8;\n}\n\nvoid filterSummerConcerts(Concert* concerts, int size) {\n    for (int i = 0; i < size; i++) {\n        if (isSummer(concerts[i].date)) {\n            printf(\"Concert: %s, Date: %s\\n\", concerts[i].name, concerts[i].date);\n        }\n    }\n}\n\nint main() {\n    Concert concerts[] = {\n        {\"Concert A\", \"2023-06-15\"},\n        {\"Concert B\", \"2023-07-20\"},\n        {\"Concert C\", \"2023-09-05\"},\n        {\"Concert D\", \"2023-08-10\"},\n        {\"Concert E\", \"2023-05-30\"}\n    };\n\n    int size = sizeof(concerts) / sizeof(concerts[0]);\n    filterSummerConcerts(concerts, size);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Find all users with more than 1000 followers from a social media platform.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    char *username;\n    int followers;\n} User;\n\nvoid filterUsers(User *users, int userCount, int threshold, User **result, int *resultCount) {\n    *resultCount = 0;\n    for (int i = 0; i < userCount; i++) {\n        if (users[i].followers > threshold) {\n            result[*resultCount] = &users[i];\n            (*resultCount)++;\n        }\n    }\n}\n\nint main() {\n    User users[] = {\n        {\"user1\", 500},\n        {\"user2\", 1500},\n        {\"user3\", 2000},\n        {\"user4\", 800}\n    };\n    int userCount = sizeof(users) / sizeof(users[0]);\n    User *filteredUsers[userCount];\n    int filteredCount;\n\n    filterUsers(users, userCount, 1000, filteredUsers, &filteredCount);\n\n    for (int i = 0; i < filteredCount; i++) {\n        printf(\"Username: %s, Followers: %d\\n\", filteredUsers[i]->username, filteredUsers[i]->followers);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Identify all stocks with a growth rate above 10% from a financial portfolio.",
    "code": "```c\n#include <stdio.h>\n\ntypedef struct {\n    char name[50];\n    double growth_rate;\n} Stock;\n\nvoid filter_stocks(Stock portfolio[], int size, double threshold, Stock result[], int *result_size) {\n    int j = 0;\n    for (int i = 0; i < size; ++i) {\n        if (portfolio[i].growth_rate > threshold) {\n            result[j++] = portfolio[i];\n        }\n    }\n    *result_size = j;\n}\n\nint main() {\n    Stock portfolio[] = {\n        {\"StockA\", 12.5},\n        {\"StockB\", 9.3},\n        {\"StockC\", 15.0},\n        {\"StockD\", 8.7}\n    };\n    int portfolio_size = sizeof(portfolio) / sizeof(portfolio[0]);\n\n    Stock filtered_stocks[portfolio_size];\n    int filtered_size = 0;\n\n    filter_stocks(portfolio, portfolio_size, 10.0, filtered_stocks, &filtered_size);\n\n    for (int i = 0; i < filtered_size; ++i) {\n        printf(\"Name: %s, Growth Rate: %.2f%%\\n\", filtered_stocks[i].name, filtered_stocks[i].growth_rate);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Extract all reviews that have a five-star rating from a product review site.",
    "code": "```c\n#include <stdio.h>\n\ntypedef struct {\n    char *review;\n    int rating;\n} Review;\n\nvoid filterFiveStarReviews(Review reviews[], int size) {\n    for (int i = 0; i < size; i++) {\n        if (reviews[i].rating == 5) {\n            printf(\"%s\\n\", reviews[i].review);\n        }\n    }\n}\n\nint main() {\n    Review reviews[] = {\n        {\"Great product!\", 5},\n        {\"Not bad\", 3},\n        {\"Excellent!\", 5},\n        {\"Could be better\", 2}\n    };\n    int size = sizeof(reviews) / sizeof(reviews[0]);\n    filterFiveStarReviews(reviews, size);\n    return 0;\n}\n```"
  },
  {
    "task": "Filter out all emails that are not flagged from an inbox.",
    "code": "```c\n#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n\n#define MAX_EMAILS 100\n\ntypedef struct {\n    char subject[100];\n    char sender[100];\n    bool flagged;\n} Email;\n\nvoid filterFlaggedEmails(Email inbox[], int totalEmails, Email filtered[], int *filteredCount) {\n    *filteredCount = 0;\n    for (int i = 0; i < totalEmails; i++) {\n        if (inbox[i].flagged) {\n            filtered[*filteredCount] = inbox[i];\n            (*filteredCount)++;\n        }\n    }\n}\n\nint main() {\n    Email inbox[MAX_EMAILS] = {\n        {\"Meeting\", \"boss@example.com\", true},\n        {\"Lunch\", \"friend@example.com\", false},\n        {\"Project Update\", \"colleague@example.com\", true},\n        {\"Spam Email\", \"spammer@example.com\", false}\n    };\n    int totalEmails = 4;\n    Email filtered[MAX_EMAILS];\n    int filteredCount;\n\n    filterFlaggedEmails(inbox, totalEmails, filtered, &filteredCount);\n\n    for (int i = 0; i < filteredCount; i++) {\n        printf(\"Flagged Email: %s from %s\\n\", filtered[i].subject, filtered[i].sender);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Select all entries with a timestamp from the past 24 hours from a log file.",
    "code": "```c\n#include <stdio.h>\n#include <time.h>\n#include <string.h>\n\n#define MAX_LOG_ENTRIES 1000\n#define TIMESTAMP_LENGTH 20\n\ntypedef struct {\n    char timestamp[TIMESTAMP_LENGTH];\n    char message[256];\n} LogEntry;\n\nint is_within_24_hours(const char *timestamp) {\n    struct tm log_time;\n    time_t log_epoch, current_time, diff;\n    \n    strptime(timestamp, \"%Y-%m-%d %H:%M:%S\", &log_time);\n    log_epoch = mktime(&log_time);\n    time(&current_time);\n    \n    diff = current_time - log_epoch;\n    return diff <= 86400 && diff >= 0; // 86400 seconds in 24 hours\n}\n\nint filter_logs(LogEntry *logs, LogEntry *filtered_logs, int log_count) {\n    int filtered_count = 0;\n    for (int i = 0; i < log_count; i++) {\n        if (is_within_24_hours(logs[i].timestamp)) {\n            filtered_logs[filtered_count++] = logs[i];\n        }\n    }\n    return filtered_count;\n}\n\nint main() {\n    LogEntry logs[MAX_LOG_ENTRIES] = {\n        {\"2023-10-14 12:00:00\", \"Log entry 1\"},\n        {\"2023-10-15 11:00:00\", \"Log entry 2\"},\n        // Add more log entries as needed\n    };\n\n    LogEntry filtered_logs[MAX_LOG_ENTRIES];\n    int log_count = 2; // Update with the actual number of log entries\n    int filtered_count = filter_logs(logs, filtered_logs, log_count);\n\n    for (int i = 0; i < filtered_count; i++) {\n        printf(\"Timestamp: %s, Message: %s\\n\", filtered_logs[i].timestamp, filtered_logs[i].message);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Find all books by a specific author from a library database.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n#define MAX_BOOKS 100\n#define MAX_STRING 100\n\ntypedef struct {\n    char title[MAX_STRING];\n    char author[MAX_STRING];\n} Book;\n\nvoid filterBooksByAuthor(Book library[], int librarySize, const char *author) {\n    for (int i = 0; i < librarySize; i++) {\n        if (strcmp(library[i].author, author) == 0) {\n            printf(\"Title: %s, Author: %s\\n\", library[i].title, library[i].author);\n        }\n    }\n}\n\nint main() {\n    Book library[MAX_BOOKS] = {\n        {\"The Great Gatsby\", \"F. Scott Fitzgerald\"},\n        {\"1984\", \"George Orwell\"},\n        {\"To Kill a Mockingbird\", \"Harper Lee\"},\n        {\"Animal Farm\", \"George Orwell\"},\n        {\"Moby Dick\", \"Herman Melville\"}\n    };\n\n    int librarySize = 5;\n    const char *authorToFind = \"George Orwell\";\n    \n    filterBooksByAuthor(library, librarySize, authorToFind);\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Identify all donations above $500 from a charity fundraiser report.",
    "code": "```c\n#include <stdio.h>\n\n#define SIZE 10\n\nvoid filterDonations(double donations[], int size, double threshold, double result[], int *resultSize) {\n    *resultSize = 0;\n    for (int i = 0; i < size; i++) {\n        if (donations[i] > threshold) {\n            result[(*resultSize)++] = donations[i];\n        }\n    }\n}\n\nint main() {\n    double donations[SIZE] = {100.0, 750.0, 300.0, 1200.0, 50.0, 600.0, 700.0, 200.0, 800.0, 1500.0};\n    double threshold = 500.0;\n    double filteredDonations[SIZE];\n    int filteredSize;\n\n    filterDonations(donations, SIZE, threshold, filteredDonations, &filteredSize);\n\n    printf(\"Donations above $500:\\n\");\n    for (int i = 0; i < filteredSize; i++) {\n        printf(\"%.2f\\n\", filteredDonations[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Extract all assignments due in the next week from a course syllabus.",
    "code": "```c\n#include <stdio.h>\n#include <time.h>\n#include <string.h>\n\n#define MAX_ASSIGNMENTS 100\n#define MAX_TITLE_LEN 100\n\ntypedef struct {\n    char title[MAX_TITLE_LEN];\n    time_t due_date;\n} Assignment;\n\nint filterAssignmentsDueNextWeek(Assignment syllabus[], int count, Assignment results[]) {\n    time_t current_time = time(NULL);\n    struct tm *current_tm = localtime(&current_time);\n    current_tm->tm_mday += 7;\n    time_t next_week = mktime(current_tm);\n\n    int result_count = 0;\n    for (int i = 0; i < count; i++) {\n        if (syllabus[i].due_date <= next_week && syllabus[i].due_date >= current_time) {\n            results[result_count++] = syllabus[i];\n        }\n    }\n    return result_count;\n}\n\nint main() {\n    Assignment syllabus[MAX_ASSIGNMENTS] = {\n        {\"Assignment 1\", time(NULL) + (2 * 24 * 3600)},  // 2 days from now\n        {\"Assignment 2\", time(NULL) + (9 * 24 * 3600)},  // 9 days from now\n        {\"Assignment 3\", time(NULL) + (5 * 24 * 3600)}   // 5 days from now\n    };\n    Assignment results[MAX_ASSIGNMENTS];\n    int count = 3;\n\n    int due_count = filterAssignmentsDueNextWeek(syllabus, count, results);\n\n    printf(\"Assignments due in the next week:\\n\");\n    for (int i = 0; i < due_count; i++) {\n        printf(\"%s\\n\", results[i].title);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Filter out all movies that are not in English from a streaming service.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n#define MAX_MOVIES 100\n#define LANGUAGE_LENGTH 20\n\ntypedef struct {\n    char title[100];\n    char language[LANGUAGE_LENGTH];\n} Movie;\n\nvoid filterMovies(Movie movies[], int count, Movie filteredMovies[], int *filteredCount) {\n    *filteredCount = 0;\n    for (int i = 0; i < count; i++) {\n        if (strcmp(movies[i].language, \"English\") == 0) {\n            filteredMovies[*filteredCount] = movies[i];\n            (*filteredCount)++;\n        }\n    }\n}\n\nint main() {\n    Movie movies[MAX_MOVIES] = {\n        {\"Movie 1\", \"English\"},\n        {\"Movie 2\", \"Spanish\"},\n        {\"Movie 3\", \"English\"},\n        {\"Movie 4\", \"French\"},\n        {\"Movie 5\", \"English\"}\n    };\n    Movie filteredMovies[MAX_MOVIES];\n    int filteredCount;\n\n    filterMovies(movies, 5, filteredMovies, &filteredCount);\n\n    for (int i = 0; i < filteredCount; i++) {\n        printf(\"Title: %s, Language: %s\\n\", filteredMovies[i].title, filteredMovies[i].language);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Select all landmarks located in Europe from a travel guide.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n#define NUM_LANDMARKS 5\n\ntypedef struct {\n    char name[50];\n    char location[50];\n} Landmark;\n\nint isEuropeanLandmark(Landmark landmark) {\n    return strcmp(landmark.location, \"Europe\") == 0;\n}\n\nvoid filterEuropeanLandmarks(Landmark landmarks[], int size) {\n    for (int i = 0; i < size; i++) {\n        if (isEuropeanLandmark(landmarks[i])) {\n            printf(\"%s\\n\", landmarks[i].name);\n        }\n    }\n}\n\nint main() {\n    Landmark landmarks[NUM_LANDMARKS] = {\n        {\"Eiffel Tower\", \"Europe\"},\n        {\"Great Wall\", \"Asia\"},\n        {\"Colosseum\", \"Europe\"},\n        {\"Statue of Liberty\", \"North America\"},\n        {\"Big Ben\", \"Europe\"}\n    };\n\n    filterEuropeanLandmarks(landmarks, NUM_LANDMARKS);\n    return 0;\n}\n```"
  },
  {
    "task": "Find all contracts that are set to renew next month from a contract management system.",
    "code": "```c\n#include <stdio.h>\n#include <time.h>\n\n#define NUM_CONTRACTS 5\n\ntypedef struct {\n    int id;\n    struct tm renewalDate;\n} Contract;\n\nint isRenewingNextMonth(struct tm renewalDate) {\n    time_t now = time(NULL);\n    struct tm *currentDate = localtime(&now);\n\n    int nextMonth = (currentDate->tm_mon + 1) % 12;\n    int nextYear = currentDate->tm_year + (currentDate->tm_mon == 11 ? 1 : 0);\n\n    return renewalDate.tm_mon == nextMonth && renewalDate.tm_year == nextYear;\n}\n\nvoid filterContracts(Contract contracts[], int size) {\n    for (int i = 0; i < size; i++) {\n        if (isRenewingNextMonth(contracts[i].renewalDate)) {\n            printf(\"Contract ID %d is renewing next month.\\n\", contracts[i].id);\n        }\n    }\n}\n\nint main() {\n    Contract contracts[NUM_CONTRACTS] = {\n        {1, {0, 0, 0, 15, 11, 2023 - 1900}},\n        {2, {0, 0, 0, 20, 0, 2024 - 1900}},\n        {3, {0, 0, 0, 10, 10, 2023 - 1900}},\n        {4, {0, 0, 0, 5, 0, 2024 - 1900}},\n        {5, {0, 0, 0, 25, 9, 2023 - 1900}}\n    };\n\n    filterContracts(contracts, NUM_CONTRACTS);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Identify all volunteer hours logged in the past year from a non-profit organization database.",
    "code": "```c\n#include <stdio.h>\n#include <time.h>\n\n#define NUM_LOGS 100\n\ntypedef struct {\n    int volunteer_id;\n    time_t date_logged;\n    int hours;\n} VolunteerLog;\n\n// Function to filter logs from the past year\nvoid filter_past_year_logs(VolunteerLog logs[], int num_logs, VolunteerLog result[], int *result_count) {\n    time_t current_time = time(NULL);\n    struct tm *time_info = localtime(&current_time);\n    time_info->tm_year -= 1;\n    time_t one_year_ago = mktime(time_info);\n\n    *result_count = 0;\n    for (int i = 0; i < num_logs; i++) {\n        if (logs[i].date_logged >= one_year_ago) {\n            result[*result_count] = logs[i];\n            (*result_count)++;\n        }\n    }\n}\n\nint main() {\n    VolunteerLog logs[NUM_LOGS] = {\n        // Example data initialization\n        {1, 1672531199, 5},  // Date: 2023-01-01\n        {2, 1609459199, 3},  // Date: 2021-01-01\n        // Add more logs as needed\n    };\n\n    VolunteerLog result[NUM_LOGS];\n    int result_count;\n\n    filter_past_year_logs(logs, NUM_LOGS, result, &result_count);\n\n    printf(\"Volunteer hours logged in the past year:\\n\");\n    for (int i = 0; i < result_count; i++) {\n        printf(\"Volunteer ID: %d, Hours: %d\\n\", result[i].volunteer_id, result[i].hours);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Extract all elements that are not strings from a mixed-type list.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdbool.h>\n\nbool isString(const char *element) {\n    return element[0] == '\"';\n}\n\nint main() {\n    const char *mixedList[] = {\"123\", \"\\\"hello\\\"\", \"456\", \"\\\"world\\\"\", \"789\"};\n    size_t listSize = sizeof(mixedList) / sizeof(mixedList[0]);\n\n    printf(\"Filtered elements:\\n\");\n    for (size_t i = 0; i < listSize; i++) {\n        if (!isString(mixedList[i])) {\n            printf(\"%s\\n\", mixedList[i]);\n        }\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Filter out all orders that are not yet shipped from an e-commerce system.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    int orderId;\n    char status[10];\n} Order;\n\nint isShipped(Order order) {\n    return strcmp(order.status, \"Shipped\") == 0;\n}\n\nvoid filterShippedOrders(Order *orders, int size, Order *result, int *resultSize) {\n    *resultSize = 0;\n    for (int i = 0; i < size; i++) {\n        if (isShipped(orders[i])) {\n            result[*resultSize] = orders[i];\n            (*resultSize)++;\n        }\n    }\n}\n\nint main() {\n    Order orders[] = {\n        {1, \"Shipped\"},\n        {2, \"Pending\"},\n        {3, \"Shipped\"},\n        {4, \"Processing\"},\n        {5, \"Shipped\"}\n    };\n    \n    int size = sizeof(orders) / sizeof(orders[0]);\n    Order shippedOrders[size];\n    int shippedSize;\n    \n    filterShippedOrders(orders, size, shippedOrders, &shippedSize);\n    \n    for (int i = 0; i < shippedSize; i++) {\n        printf(\"Order ID: %d, Status: %s\\n\", shippedOrders[i].orderId, shippedOrders[i].status);\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Select all emails sent from a specific address in an email server.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n#define MAX_EMAILS 100\n#define MAX_ADDRESS_LENGTH 100\n\ntypedef struct {\n    char sender[MAX_ADDRESS_LENGTH];\n    char content[256];\n} Email;\n\nvoid filterEmails(Email emails[], int size, const char *address, Email result[], int *resultSize) {\n    *resultSize = 0;\n    for (int i = 0; i < size; i++) {\n        if (strcmp(emails[i].sender, address) == 0) {\n            result[(*resultSize)++] = emails[i];\n        }\n    }\n}\n\nint main() {\n    Email emails[MAX_EMAILS] = {\n        {\"example1@example.com\", \"Hello, this is an email from example1.\"},\n        {\"example2@example.com\", \"Hello, this is an email from example2.\"},\n        {\"example1@example.com\", \"Another email from example1.\"}\n    };\n    int emailCount = 3;\n    const char *targetAddress = \"example1@example.com\";\n    Email filteredEmails[MAX_EMAILS];\n    int filteredCount;\n\n    filterEmails(emails, emailCount, targetAddress, filteredEmails, &filteredCount);\n\n    for (int i = 0; i < filteredCount; i++) {\n        printf(\"From: %s\\nContent: %s\\n\\n\", filteredEmails[i].sender, filteredEmails[i].content);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Find all passwords with at least one special character from a security database.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\n#define SPECIAL_CHARACTERS \"!@#$%^&*()-_=+[]{}|;:'\\\",.<>/?\\\\\"\n\nint contains_special_character(const char *password) {\n    for (int i = 0; password[i] != '\\0'; i++) {\n        if (strchr(SPECIAL_CHARACTERS, password[i])) {\n            return 1;\n        }\n    }\n    return 0;\n}\n\nvoid filter_passwords_with_special_chars(char passwords[][50], int count, char result[][50], int *result_count) {\n    *result_count = 0;\n    for (int i = 0; i < count; i++) {\n        if (contains_special_character(passwords[i])) {\n            strcpy(result[*result_count], passwords[i]);\n            (*result_count)++;\n        }\n    }\n}\n\nint main() {\n    char passwords[5][50] = {\n        \"password123\",\n        \"secure!pass\",\n        \"admin#123\",\n        \"user2023\",\n        \"my$ecret\"\n    };\n\n    char filtered_passwords[5][50];\n    int filtered_count;\n\n    filter_passwords_with_special_chars(passwords, 5, filtered_passwords, &filtered_count);\n\n    printf(\"Passwords with special characters:\\n\");\n    for (int i = 0; i < filtered_count; i++) {\n        printf(\"%s\\n\", filtered_passwords[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Identify all courses with a prerequisite from a university catalog.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n#define MAX_COURSES 100\n#define MAX_NAME_LEN 100\n\ntypedef struct {\n    char name[MAX_NAME_LEN];\n    char prerequisite[MAX_NAME_LEN];\n} Course;\n\nint hasPrerequisite(const Course *course) {\n    return strlen(course->prerequisite) > 0;\n}\n\nvoid filterCoursesWithPrerequisites(Course *courses, int numCourses, Course *filteredCourses, int *numFiltered) {\n    *numFiltered = 0;\n    for (int i = 0; i < numCourses; i++) {\n        if (hasPrerequisite(&courses[i])) {\n            filteredCourses[*numFiltered] = courses[i];\n            (*numFiltered)++;\n        }\n    }\n}\n\nint main() {\n    Course catalog[MAX_COURSES] = {\n        {\"Math 101\", \"\"},\n        {\"Physics 201\", \"Math 101\"},\n        {\"History 101\", \"\"},\n        {\"Computer Science 101\", \"Math 101\"},\n        {\"Chemistry 101\", \"Physics 201\"}\n    };\n    int numCourses = 5;\n\n    Course filteredCourses[MAX_COURSES];\n    int numFiltered;\n\n    filterCoursesWithPrerequisites(catalog, numCourses, filteredCourses, &numFiltered);\n\n    printf(\"Courses with prerequisites:\\n\");\n    for (int i = 0; i < numFiltered; i++) {\n        printf(\"%s requires %s\\n\", filteredCourses[i].name, filteredCourses[i].prerequisite);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Extract all genes associated with a specific trait from a genetic database.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n#define MAX_GENES 100\n#define MAX_TRAIT_LENGTH 50\n#define MAX_NAME_LENGTH 50\n\ntypedef struct {\n    char name[MAX_NAME_LENGTH];\n    char trait[MAX_TRAIT_LENGTH];\n} Gene;\n\nvoid filterGenesByTrait(Gene *genes, int count, const char *trait, Gene *result, int *resultCount) {\n    *resultCount = 0;\n    for (int i = 0; i < count; i++) {\n        if (strcmp(genes[i].trait, trait) == 0) {\n            result[(*resultCount)++] = genes[i];\n        }\n    }\n}\n\nint main() {\n    Gene database[MAX_GENES] = {\n        {\"Gene1\", \"TraitA\"},\n        {\"Gene2\", \"TraitB\"},\n        {\"Gene3\", \"TraitA\"},\n        {\"Gene4\", \"TraitC\"},\n        {\"Gene5\", \"TraitB\"}\n    };\n    int databaseSize = 5;\n    const char *targetTrait = \"TraitA\";\n    Gene filteredGenes[MAX_GENES];\n    int filteredCount;\n\n    filterGenesByTrait(database, databaseSize, targetTrait, filteredGenes, &filteredCount);\n\n    printf(\"Genes associated with trait %s:\\n\", targetTrait);\n    for (int i = 0; i < filteredCount; i++) {\n        printf(\"%s\\n\", filteredGenes[i].name);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Filter out all investments with a risk level below medium from a portfolio.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    char name[50];\n    char riskLevel[10];\n} Investment;\n\nvoid filterInvestments(Investment* portfolio, int size, Investment* result, int* resultSize) {\n    *resultSize = 0;\n    for (int i = 0; i < size; i++) {\n        if (strcmp(portfolio[i].riskLevel, \"medium\") == 0 || strcmp(portfolio[i].riskLevel, \"high\") == 0) {\n            result[*resultSize] = portfolio[i];\n            (*resultSize)++;\n        }\n    }\n}\n\nint main() {\n    Investment portfolio[] = {\n        {\"Investment A\", \"low\"},\n        {\"Investment B\", \"medium\"},\n        {\"Investment C\", \"high\"},\n        {\"Investment D\", \"medium\"},\n        {\"Investment E\", \"low\"}\n    };\n    \n    int size = sizeof(portfolio) / sizeof(portfolio[0]);\n    Investment filteredPortfolio[size];\n    int filteredSize = 0;\n\n    filterInvestments(portfolio, size, filteredPortfolio, &filteredSize);\n\n    for (int i = 0; i < filteredSize; i++) {\n        printf(\"Name: %s, Risk Level: %s\\n\", filteredPortfolio[i].name, filteredPortfolio[i].riskLevel);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Select all calls longer than five minutes from a call log.",
    "code": "```c\n#include <stdio.h>\n\ntypedef struct {\n    char *caller;\n    char *receiver;\n    int duration; // duration in seconds\n} CallLog;\n\n#define LOG_SIZE 5\n\nvoid filterCalls(CallLog logs[], int size) {\n    for (int i = 0; i < size; i++) {\n        if (logs[i].duration > 300) { // 5 minutes = 300 seconds\n            printf(\"Caller: %s, Receiver: %s, Duration: %d seconds\\n\", logs[i].caller, logs[i].receiver, logs[i].duration);\n        }\n    }\n}\n\nint main() {\n    CallLog logs[LOG_SIZE] = {\n        {\"Alice\", \"Bob\", 400},\n        {\"Charlie\", \"Dan\", 250},\n        {\"Eve\", \"Frank\", 600},\n        {\"Grace\", \"Heidi\", 180},\n        {\"Ivan\", \"Judy\", 360}\n    };\n\n    filterCalls(logs, LOG_SIZE);\n\n    return 0;\n}\n```"
  }
]