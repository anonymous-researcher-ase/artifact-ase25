[
  {
    "task": "Create a list of the first ten positive integers and calculate their sum.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int list[10];\n    int sum = 0;\n\n    // Populate the list with the first ten positive integers\n    for (int i = 0; i < 10; i++) {\n        list[i] = i + 1;\n    }\n\n    // Calculate the sum of the list\n    for (int i = 0; i < 10; i++) {\n        sum += list[i];\n    }\n\n    printf(\"Sum: %d\\n\", sum);\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program to reverse the order of elements in a given list.",
    "code": "```c\n#include <stdio.h>\n\nvoid reverseList(int* list, int size) {\n    int start = 0;\n    int end = size - 1;\n    while (start < end) {\n        int temp = list[start];\n        list[start] = list[end];\n        list[end] = temp;\n        start++;\n        end--;\n    }\n}\n\nint main() {\n    int list[] = {1, 2, 3, 4, 5};\n    int size = sizeof(list) / sizeof(list[0]);\n    \n    reverseList(list, size);\n\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", list[i]);\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function that takes a list and returns the list with duplicates removed.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\nint* removeDuplicates(int* nums, int numsSize, int* returnSize) {\n    int* result = (int*)malloc(numsSize * sizeof(int));\n    int resultIndex = 0;\n    for (int i = 0; i < numsSize; i++) {\n        int isDuplicate = 0;\n        for (int j = 0; j < resultIndex; j++) {\n            if (nums[i] == result[j]) {\n                isDuplicate = 1;\n                break;\n            }\n        }\n        if (!isDuplicate) {\n            result[resultIndex++] = nums[i];\n        }\n    }\n    *returnSize = resultIndex;\n    return result;\n}\n\nint main() {\n    int nums[] = {1, 2, 3, 2, 4, 1, 5};\n    int numsSize = sizeof(nums) / sizeof(nums[0]);\n    int returnSize;\n    int* uniqueNums = removeDuplicates(nums, numsSize, &returnSize);\n\n    for (int i = 0; i < returnSize; i++) {\n        printf(\"%d \", uniqueNums[i]);\n    }\n    free(uniqueNums);\n    return 0;\n}\n```"
  },
  {
    "task": "Create a list of names and sort them in alphabetical order.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n#define NAME_COUNT 5\n#define NAME_LENGTH 50\n\nint main() {\n    char names[NAME_COUNT][NAME_LENGTH] = {\n        \"Charlie\",\n        \"Alice\",\n        \"Eve\",\n        \"Bob\",\n        \"David\"\n    };\n\n    // Sort names using bubble sort\n    for (int i = 0; i < NAME_COUNT - 1; i++) {\n        for (int j = 0; j < NAME_COUNT - i - 1; j++) {\n            if (strcmp(names[j], names[j + 1]) > 0) {\n                char temp[NAME_LENGTH];\n                strcpy(temp, names[j]);\n                strcpy(names[j], names[j + 1]);\n                strcpy(names[j + 1], temp);\n            }\n        }\n    }\n\n    // Print sorted names\n    for (int i = 0; i < NAME_COUNT; i++) {\n        printf(\"%s\\n\", names[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that appends a new element to an existing list.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct Node {\n    int value;\n    struct Node* next;\n} Node;\n\nNode* append(Node* head, int newValue) {\n    Node* newNode = (Node*)malloc(sizeof(Node));\n    newNode->value = newValue;\n    newNode->next = NULL;\n\n    if (head == NULL) {\n        return newNode;\n    }\n\n    Node* current = head;\n    while (current->next != NULL) {\n        current = current->next;\n    }\n    current->next = newNode;\n    return head;\n}\n\nvoid printList(Node* head) {\n    Node* current = head;\n    while (current != NULL) {\n        printf(\"%d \", current->value);\n        current = current->next;\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    Node* head = NULL;\n    head = append(head, 1);\n    head = append(head, 2);\n    head = append(head, 3);\n\n    printList(head);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Generate a list of the first 20 even numbers.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int evenNumbers[20];\n    for (int i = 0; i < 20; i++) {\n        evenNumbers[i] = 2 * (i + 1);\n    }\n\n    for (int i = 0; i < 20; i++) {\n        printf(\"%d \", evenNumbers[i]);\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Create a nested list (a list of lists) and access an element from the inner list.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    // Define a nested list (2D array in C)\n    int nestedList[3][3] = {\n        {1, 2, 3},\n        {4, 5, 6},\n        {7, 8, 9}\n    };\n    \n    // Access an element from the inner list\n    int element = nestedList[1][2]; // Accessing element '6' from the second inner list\n    \n    // Print the accessed element\n    printf(\"Accessed Element: %d\\n\", element);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program that finds the maximum value in a list of integers.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int numbers[] = {3, 7, 2, 9, 5, 1};\n    int size = sizeof(numbers) / sizeof(numbers[0]);\n    int max = numbers[0];\n\n    for (int i = 1; i < size; i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n    }\n\n    printf(\"The maximum value is: %d\\n\", max);\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function to merge two lists into a single list without duplicates.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct Node {\n    int data;\n    struct Node* next;\n} Node;\n\nNode* createNode(int data) {\n    Node* newNode = (Node*)malloc(sizeof(Node));\n    newNode->data = data;\n    newNode->next = NULL;\n    return newNode;\n}\n\nvoid insertEnd(Node** head, int data) {\n    Node* newNode = createNode(data);\n    if (*head == NULL) {\n        *head = newNode;\n    } else {\n        Node* temp = *head;\n        while (temp->next != NULL) {\n            temp = temp->next;\n        }\n        temp->next = newNode;\n    }\n}\n\nint exists(Node* head, int data) {\n    Node* temp = head;\n    while (temp != NULL) {\n        if (temp->data == data) {\n            return 1;\n        }\n        temp = temp->next;\n    }\n    return 0;\n}\n\nNode* mergeLists(Node* list1, Node* list2) {\n    Node* mergedList = NULL;\n    Node* temp = list1;\n    while (temp != NULL) {\n        if (!exists(mergedList, temp->data)) {\n            insertEnd(&mergedList, temp->data);\n        }\n        temp = temp->next;\n    }\n    temp = list2;\n    while (temp != NULL) {\n        if (!exists(mergedList, temp->data)) {\n            insertEnd(&mergedList, temp->data);\n        }\n        temp = temp->next;\n    }\n    return mergedList;\n}\n\nvoid printList(Node* head) {\n    Node* temp = head;\n    while (temp != NULL) {\n        printf(\"%d \", temp->data);\n        temp = temp->next;\n    }\n    printf(\"\\n\");\n}\n\nvoid freeList(Node* head) {\n    Node* temp;\n    while (head != NULL) {\n        temp = head;\n        head = head->next;\n        free(temp);\n    }\n}\n\nint main() {\n    Node* list1 = NULL;\n    Node* list2 = NULL;\n\n    insertEnd(&list1, 1);\n    insertEnd(&list1, 2);\n    insertEnd(&list1, 3);\n\n    insertEnd(&list2, 3);\n    insertEnd(&list2, 4);\n    insertEnd(&list2, 5);\n\n    Node* mergedList = mergeLists(list1, list2);\n\n    printList(mergedList);\n\n    freeList(list1);\n    freeList(list2);\n    freeList(mergedList);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a list from user input, then display the list in reverse order.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    int n, i;\n    printf(\"Enter the number of elements: \");\n    scanf(\"%d\", &n);\n\n    int *list = (int *)malloc(n * sizeof(int));\n    if (list == NULL) {\n        printf(\"Memory allocation failed\\n\");\n        return 1;\n    }\n\n    printf(\"Enter %d elements:\\n\", n);\n    for (i = 0; i < n; i++) {\n        scanf(\"%d\", &list[i]);\n    }\n\n    printf(\"List in reverse order:\\n\");\n    for (i = n - 1; i >= 0; i--) {\n        printf(\"%d \", list[i]);\n    }\n\n    printf(\"\\n\");\n    free(list);\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that takes a list and returns a new list containing only the even numbers.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\nint* filter_even_numbers(int* list, int size, int* new_size) {\n    int* even_list = (int*)malloc(size * sizeof(int));\n    int index = 0;\n    for (int i = 0; i < size; i++) {\n        if (list[i] % 2 == 0) {\n            even_list[index++] = list[i];\n        }\n    }\n    *new_size = index;\n    return even_list;\n}\n\nint main() {\n    int list[] = {1, 2, 3, 4, 5, 6};\n    int size = sizeof(list) / sizeof(list[0]);\n    int new_size;\n\n    int* even_list = filter_even_numbers(list, size, &new_size);\n\n    for (int i = 0; i < new_size; i++) {\n        printf(\"%d \", even_list[i]);\n    }\n\n    free(even_list);\n    return 0;\n}\n```"
  },
  {
    "task": "Generate a list of squares for the numbers 1 through 10.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int squares[10];\n    for (int i = 0; i < 10; i++) {\n        squares[i] = (i + 1) * (i + 1);\n    }\n\n    for (int i = 0; i < 10; i++) {\n        printf(\"%d\\n\", squares[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a list of floating-point numbers and find their average.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    float numbers[] = {3.5, 7.2, 8.1, 4.4, 9.0};\n    int count = sizeof(numbers) / sizeof(numbers[0]);\n    float sum = 0.0;\n    for (int i = 0; i < count; i++) {\n        sum += numbers[i];\n    }\n    float average = sum / count;\n    printf(\"Average: %.2f\\n\", average);\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a program to rotate the elements of a list to the right by a given number of steps.",
    "code": "```c\n#include <stdio.h>\n\nvoid rotateRight(int* arr, int size, int steps) {\n    if (size == 0 || steps % size == 0) return;\n    steps = steps % size;\n    int temp[size];\n    \n    for (int i = 0; i < size; i++) {\n        temp[(i + steps) % size] = arr[i];\n    }\n\n    for (int i = 0; i < size; i++) {\n        arr[i] = temp[i];\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    int steps = 2;\n\n    rotateRight(arr, size, steps);\n\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that checks if a list is a palindrome (reads the same forwards and backwards).",
    "code": "```c\n#include <stdio.h>\n#include <stdbool.h>\n\nbool isPalindrome(int list[], int size) {\n    for (int i = 0; i < size / 2; i++) {\n        if (list[i] != list[size - i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint main() {\n    int list[] = {1, 2, 3, 2, 1};\n    int size = sizeof(list) / sizeof(list[0]);\n    if (isPalindrome(list, size)) {\n        printf(\"The list is a palindrome.\\n\");\n    } else {\n        printf(\"The list is not a palindrome.\\n\");\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Create a list of random integers and count how many are greater than 50.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nint main() {\n    int list[10];\n    int count = 0;\n    srand(time(NULL));\n\n    for(int i = 0; i < 10; i++) {\n        list[i] = rand() % 100; // Random integers from 0 to 99\n    }\n\n    for(int i = 0; i < 10; i++) {\n        if(list[i] > 50) {\n            count++;\n        }\n    }\n\n    printf(\"Count of integers greater than 50: %d\\n\", count);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program that removes the first occurrence of a specified element from a list.",
    "code": "```c\n#include <stdio.h>\n\nvoid removeFirstOccurrence(int list[], int *size, int element) {\n    for (int i = 0; i < *size; i++) {\n        if (list[i] == element) {\n            for (int j = i; j < *size - 1; j++) {\n                list[j] = list[j + 1];\n            }\n            (*size)--;\n            break;\n        }\n    }\n}\n\nint main() {\n    int list[] = {1, 2, 3, 4, 5, 3, 6};\n    int size = 7;\n    int elementToRemove = 3;\n\n    removeFirstOccurrence(list, &size, elementToRemove);\n\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", list[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function that takes two lists and returns a list containing their intersection.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\nint* list_intersection(int* list1, int size1, int* list2, int size2, int* result_size) {\n    int* intersection = (int*)malloc(size1 * sizeof(int)); // Allocate max possible size\n    *result_size = 0;\n\n    for (int i = 0; i < size1; i++) {\n        for (int j = 0; j < size2; j++) {\n            if (list1[i] == list2[j]) {\n                int already_exists = 0;\n                for (int k = 0; k < *result_size; k++) {\n                    if (intersection[k] == list1[i]) {\n                        already_exists = 1;\n                        break;\n                    }\n                }\n                if (!already_exists) {\n                    intersection[*result_size] = list1[i];\n                    (*result_size)++;\n                }\n                break;\n            }\n        }\n    }\n    return intersection;\n}\n\nint main() {\n    int list1[] = {1, 2, 3, 4, 5};\n    int list2[] = {3, 4, 5, 6, 7};\n    int result_size;\n    \n    int* result = list_intersection(list1, 5, list2, 5, &result_size);\n\n    printf(\"Intersection: \");\n    for (int i = 0; i < result_size; i++) {\n        printf(\"%d \", result[i]);\n    }\n    printf(\"\\n\");\n    \n    free(result);\n    return 0;\n}\n```"
  },
  {
    "task": "Create a list of prime numbers less than 100.",
    "code": "```c\n#include <stdio.h>\n#include <stdbool.h>\n\nbool is_prime(int num) {\n    if (num <= 1) return false;\n    if (num == 2) return true;\n    if (num % 2 == 0) return false;\n    for (int i = 3; i * i <= num; i += 2) {\n        if (num % i == 0) return false;\n    }\n    return true;\n}\n\nint main() {\n    int primes[25]; // There are 25 prime numbers less than 100\n    int index = 0;\n\n    for (int i = 2; i < 100; i++) {\n        if (is_prime(i)) {\n            primes[index++] = i;\n        }\n    }\n\n    for (int i = 0; i < index; i++) {\n        printf(\"%d \", primes[i]);\n    }\n    printf(\"\\n\");\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function to split a list into two lists: one with even numbers and one with odd numbers.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int *data;\n    int size;\n} IntList;\n\nvoid splitEvenOdd(const int *input, int size, IntList *evens, IntList *odds) {\n    evens->data = (int *)malloc(size * sizeof(int));\n    odds->data = (int *)malloc(size * sizeof(int));\n    evens->size = 0;\n    odds->size = 0;\n\n    for (int i = 0; i < size; ++i) {\n        if (input[i] % 2 == 0) {\n            evens->data[evens->size++] = input[i];\n        } else {\n            odds->data[odds->size++] = input[i];\n        }\n    }\n}\n\nvoid freeIntList(IntList *list) {\n    free(list->data);\n    list->data = NULL;\n    list->size = 0;\n}\n\nint main() {\n    int input[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n    int size = sizeof(input) / sizeof(input[0]);\n    IntList evens, odds;\n\n    splitEvenOdd(input, size, &evens, &odds);\n\n    printf(\"Even numbers: \");\n    for (int i = 0; i < evens.size; ++i) {\n        printf(\"%d \", evens.data[i]);\n    }\n    printf(\"\\n\");\n\n    printf(\"Odd numbers: \");\n    for (int i = 0; i < odds.size; ++i) {\n        printf(\"%d \", odds.data[i]);\n    }\n    printf(\"\\n\");\n\n    freeIntList(&evens);\n    freeIntList(&odds);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a list of strings and convert all the strings to uppercase.",
    "code": "```c\n#include <stdio.h>\n#include <ctype.h>\n#include <string.h>\n\nvoid to_uppercase(char *str) {\n    while (*str) {\n        *str = toupper((unsigned char)*str);\n        str++;\n    }\n}\n\nint main() {\n    char *list[] = {\"hello\", \"world\", \"example\"};\n    int list_size = sizeof(list) / sizeof(list[0]);\n\n    for (int i = 0; i < list_size; i++) {\n        to_uppercase(list[i]);\n        printf(\"%s\\n\", list[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a program that removes all elements from a list that are less than a specified value.",
    "code": "```c\n#include <stdio.h>\n\nvoid removeLessThan(int *arr, int *size, int value) {\n    int i, j = 0;\n    for (i = 0; i < *size; i++) {\n        if (arr[i] >= value) {\n            arr[j++] = arr[i];\n        }\n    }\n    *size = j;\n}\n\nint main() {\n    int arr[] = {1, 5, 3, 7, 2, 8};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    int value = 4;\n    \n    removeLessThan(arr, &size, value);\n    \n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that takes a list and returns a new list with elements in random order.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nvoid shuffle(int *array, int n) {\n    if (n > 1) {\n        for (int i = 0; i < n - 1; i++) {\n            int j = i + rand() / (RAND_MAX / (n - i) + 1);\n            int t = array[j];\n            array[j] = array[i];\n            array[i] = t;\n        }\n    }\n}\n\nint* randomizeList(int *list, int size) {\n    int *newList = malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        newList[i] = list[i];\n    }\n    shuffle(newList, size);\n    return newList;\n}\n\nint main() {\n    srand(time(NULL));\n    int list[] = {1, 2, 3, 4, 5};\n    int size = sizeof(list) / sizeof(list[0]);\n    int *shuffledList = randomizeList(list, size);\n\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", shuffledList[i]);\n    }\n    free(shuffledList);\n    return 0;\n}\n```"
  },
  {
    "task": "Create a list of tuples where each tuple contains a number and its square.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int numbers[] = {1, 2, 3, 4, 5};\n    int size = sizeof(numbers) / sizeof(numbers[0]);\n    int list[size][2];\n\n    for (int i = 0; i < size; i++) {\n        list[i][0] = numbers[i];\n        list[i][1] = numbers[i] * numbers[i];\n    }\n\n    for (int i = 0; i < size; i++) {\n        printf(\"(%d, %d)\\n\", list[i][0], list[i][1]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program to multiply all elements in a list by a given factor.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int list[] = {1, 2, 3, 4, 5}; // Example list\n    int factor = 3; // Given factor\n    int length = sizeof(list) / sizeof(list[0]);\n    \n    for (int i = 0; i < length; i++) {\n        list[i] *= factor;\n    }\n    \n    for (int i = 0; i < length; i++) {\n        printf(\"%d \", list[i]);\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function that flattens a nested list.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct Node {\n    int value;\n    struct Node *next;\n    struct Node *child;\n} Node;\n\n// Helper function to create a new node\nNode* createNode(int value) {\n    Node *newNode = (Node *)malloc(sizeof(Node));\n    newNode->value = value;\n    newNode->next = NULL;\n    newNode->child = NULL;\n    return newNode;\n}\n\n// Function to append a node to the end of a list\nvoid append(Node **head_ref, Node *new_node) {\n    Node *last = *head_ref;\n    if (*head_ref == NULL) {\n        *head_ref = new_node;\n        return;\n    }\n    while (last->next != NULL) {\n        last = last->next;\n    }\n    last->next = new_node;\n}\n\n// Recursive function to flatten the list\nNode* flattenList(Node *head) {\n    if (!head) return NULL;\n\n    Node *flatHead = NULL;\n    Node *tail = NULL;\n\n    Node *current = head;\n    while (current != NULL) {\n        Node *next = current->next;\n        current->next = NULL;\n\n        if (flatHead == NULL) {\n            flatHead = current;\n            tail = current;\n        } else {\n            tail->next = current;\n            tail = current;\n        }\n\n        if (current->child) {\n            Node *childList = flattenList(current->child);\n            tail->next = childList;\n            while (tail->next) {\n                tail = tail->next;\n            }\n        }\n\n        current = next;\n    }\n    return flatHead;\n}\n\n// Function to print the flattened list\nvoid printList(Node *node) {\n    while (node != NULL) {\n        printf(\"%d \", node->value);\n        node = node->next;\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    Node *head = createNode(1);\n    head->next = createNode(2);\n    head->next->child = createNode(3);\n    head->next->child->next = createNode(4);\n    head->next->next = createNode(5);\n\n    Node *flatList = flattenList(head);\n    printList(flatList);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a list of dates and sort them chronologically.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    int year;\n    int month;\n    int day;\n} Date;\n\nint compareDates(const void *a, const void *b) {\n    Date *dateA = (Date *)a;\n    Date *dateB = (Date *)b;\n\n    if (dateA->year != dateB->year)\n        return dateA->year - dateB->year;\n    if (dateA->month != dateB->month)\n        return dateA->month - dateB->month;\n    return dateA->day - dateB->day;\n}\n\nvoid printDate(Date date) {\n    printf(\"%04d-%02d-%02d\\n\", date.year, date.month, date.day);\n}\n\nint main() {\n    Date dates[] = {\n        {2023, 10, 5},\n        {2021, 3, 12},\n        {2022, 8, 25},\n        {2020, 11, 1}\n    };\n    int n = sizeof(dates) / sizeof(dates[0]);\n\n    qsort(dates, n, sizeof(Date), compareDates);\n\n    for (int i = 0; i < n; i++) {\n        printDate(dates[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that finds the index of the first occurrence of a given element in a list.",
    "code": "```c\n#include <stdio.h>\n\nint findIndex(int arr[], int size, int element) {\n    for (int i = 0; i < size; i++) {\n        if (arr[i] == element) {\n            return i;\n        }\n    }\n    return -1;\n}\n\nint main() {\n    int list[] = {3, 5, 7, 9, 11};\n    int size = sizeof(list) / sizeof(list[0]);\n    int element = 7;\n    int index = findIndex(list, size, element);\n    printf(\"Index: %d\\n\", index);\n    return 0;\n}\n```"
  },
  {
    "task": "Generate a list of Fibonacci numbers up to a specified limit.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int limit;\n    printf(\"Enter the limit: \");\n    scanf(\"%d\", &limit);\n\n    int fib1 = 0, fib2 = 1;\n    int fibonacci[1000];\n    int index = 0;\n\n    if (limit >= fib1) {\n        fibonacci[index++] = fib1;\n    }\n    if (limit >= fib2) {\n        fibonacci[index++] = fib2;\n    }\n\n    while (1) {\n        int nextFib = fib1 + fib2;\n        if (nextFib > limit) {\n            break;\n        }\n        fibonacci[index++] = nextFib;\n        fib1 = fib2;\n        fib2 = nextFib;\n    }\n\n    printf(\"Fibonacci numbers up to %d:\\n\", limit);\n    for (int i = 0; i < index; i++) {\n        printf(\"%d \", fibonacci[i]);\n    }\n    printf(\"\\n\");\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a list of booleans and determine if all are True.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int allTrue = 1;\n    int listSize = 5;\n    int booleanList[] = {1, 1, 1, 1, 1}; // Change values to test different cases\n\n    for (int i = 0; i < listSize; i++) {\n        if (!booleanList[i]) {\n            allTrue = 0;\n            break;\n        }\n    }\n\n    if (allTrue) {\n        printf(\"All elements are True.\\n\");\n    } else {\n        printf(\"Not all elements are True.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program to concatenate two lists.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    // Define the first list\n    int list1[] = {1, 2, 3, 4, 5};\n    int size1 = sizeof(list1) / sizeof(list1[0]);\n\n    // Define the second list\n    int list2[] = {6, 7, 8, 9, 10};\n    int size2 = sizeof(list2) / sizeof(list2[0]);\n\n    // Create a new list to hold the concatenated results\n    int size3 = size1 + size2;\n    int *list3 = (int *)malloc(size3 * sizeof(int));\n    \n    // Concatenate the lists\n    for (int i = 0; i < size1; i++) {\n        list3[i] = list1[i];\n    }\n    for (int i = 0; i < size2; i++) {\n        list3[size1 + i] = list2[i];\n    }\n\n    // Print the concatenated list\n    printf(\"Concatenated list: \");\n    for (int i = 0; i < size3; i++) {\n        printf(\"%d \", list3[i]);\n    }\n    printf(\"\\n\");\n\n    // Free the allocated memory\n    free(list3);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function that returns the length of a list without using built-in functions.",
    "code": "```c\n#include <stdio.h>\n\nint listLength(int list[]) {\n    int length = 0;\n    while (list[length] != '\\0') {\n        length++;\n    }\n    return length;\n}\n\nint main() {\n    int list[] = {1, 2, 3, 4, 5, '\\0'};\n    printf(\"Length of the list: %d\\n\", listLength(list));\n    return 0;\n}\n```"
  },
  {
    "task": "Create a list of words and find the longest word.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nint main() {\n    const char *words[] = {\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"};\n    int numWords = sizeof(words) / sizeof(words[0]);\n    \n    const char *longestWord = words[0];\n    for (int i = 1; i < numWords; i++) {\n        if (strlen(words[i]) > strlen(longestWord)) {\n            longestWord = words[i];\n        }\n    }\n    \n    printf(\"The longest word is: %s\\n\", longestWord);\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that takes a list and a predicate function, returning a list of elements that satisfy the predicate.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\ntypedef int (*Predicate)(int);\n\nint* filter(int* list, int size, Predicate pred, int* resultSize) {\n    int* result = malloc(size * sizeof(int));\n    int count = 0;\n    \n    for (int i = 0; i < size; i++) {\n        if (pred(list[i])) {\n            result[count++] = list[i];\n        }\n    }\n    \n    *resultSize = count;\n    return result;\n}\n\nint isEven(int n) {\n    return n % 2 == 0;\n}\n\nint main() {\n    int list[] = {1, 2, 3, 4, 5, 6};\n    int size = sizeof(list) / sizeof(list[0]);\n    int resultSize;\n    \n    int* filteredList = filter(list, size, isEven, &resultSize);\n    \n    for (int i = 0; i < resultSize; i++) {\n        printf(\"%d \", filteredList[i]);\n    }\n    \n    free(filteredList);\n    return 0;\n}\n```"
  },
  {
    "task": "Generate a list of strings and filter out those with less than 5 characters.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n#define MAX_STRINGS 100\n#define MAX_LENGTH 100\n\nint main() {\n    char *strings[MAX_STRINGS] = {\n        \"apple\", \"kiwi\", \"banana\", \"pear\", \"peach\", \"plum\"\n    };\n    char *filtered[MAX_STRINGS];\n    int count = 0;\n\n    for (int i = 0; i < MAX_STRINGS && strings[i] != NULL; i++) {\n        if (strlen(strings[i]) >= 5) {\n            filtered[count++] = strings[i];\n        }\n    }\n\n    for (int i = 0; i < count; i++) {\n        printf(\"%s\\n\", filtered[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a list of mixed data types and separate them into lists by type.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef enum { INT, FLOAT, CHAR } DataType;\n\ntypedef struct {\n    DataType type;\n    union {\n        int i;\n        float f;\n        char c;\n    } data;\n} MixedData;\n\nint main() {\n    MixedData list[] = {\n        {INT, .data.i = 1},\n        {FLOAT, .data.f = 2.5},\n        {CHAR, .data.c = 'a'},\n        {INT, .data.i = 42},\n        {FLOAT, .data.f = 3.14},\n        {CHAR, .data.c = 'z'}\n    };\n\n    int intList[10];\n    float floatList[10];\n    char charList[10];\n\n    int intCount = 0, floatCount = 0, charCount = 0;\n\n    for (int i = 0; i < 6; i++) {\n        switch (list[i].type) {\n            case INT:\n                intList[intCount++] = list[i].data.i;\n                break;\n            case FLOAT:\n                floatList[floatCount++] = list[i].data.f;\n                break;\n            case CHAR:\n                charList[charCount++] = list[i].data.c;\n                break;\n        }\n    }\n\n    printf(\"Integers: \");\n    for (int i = 0; i < intCount; i++) {\n        printf(\"%d \", intList[i]);\n    }\n    printf(\"\\n\");\n\n    printf(\"Floats: \");\n    for (int i = 0; i < floatCount; i++) {\n        printf(\"%.2f \", floatList[i]);\n    }\n    printf(\"\\n\");\n\n    printf(\"Chars: \");\n    for (int i = 0; i < charCount; i++) {\n        printf(\"%c \", charList[i]);\n    }\n    printf(\"\\n\");\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program to find the common elements between two lists.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int list1[] = {1, 2, 3, 4, 5};\n    int list2[] = {3, 4, 5, 6, 7};\n    int size1 = sizeof(list1) / sizeof(list1[0]);\n    int size2 = sizeof(list2) / sizeof(list2[0]);\n    \n    printf(\"Common elements: \");\n    for (int i = 0; i < size1; i++) {\n        for (int j = 0; j < size2; j++) {\n            if (list1[i] == list2[j]) {\n                printf(\"%d \", list1[i]);\n                break;\n            }\n        }\n    }\n    printf(\"\\n\");\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function to rotate the elements of a list to the left by a given number of steps.",
    "code": "```c\n#include <stdio.h>\n\nvoid rotateLeft(int* list, int size, int steps) {\n    int rotated[size];\n    steps = steps % size;\n    \n    for (int i = 0; i < size; i++) {\n        rotated[i] = list[(i + steps) % size];\n    }\n    \n    for (int i = 0; i < size; i++) {\n        list[i] = rotated[i];\n    }\n}\n\nint main() {\n    int list[] = {1, 2, 3, 4, 5};\n    int size = sizeof(list) / sizeof(list[0]);\n    int steps = 2;\n\n    rotateLeft(list, size, steps);\n\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", list[i]);\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Create a list of numbers and find the product of all the elements.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int numbers[] = {1, 2, 3, 4, 5}; // Example list of numbers\n    int length = sizeof(numbers) / sizeof(numbers[0]);\n    int product = 1;\n\n    for (int i = 0; i < length; i++) {\n        product *= numbers[i];\n    }\n\n    printf(\"Product of all elements: %d\\n\", product);\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that removes all occurrences of a specified element from a list.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\nvoid removeOccurrences(int *list, int size, int element, int *newSize) {\n    int *tempList = (int *)malloc(size * sizeof(int));\n    int j = 0;\n\n    for (int i = 0; i < size; i++) {\n        if (list[i] != element) {\n            tempList[j++] = list[i];\n        }\n    }\n\n    for (int i = 0; i < j; i++) {\n        list[i] = tempList[i];\n    }\n\n    *newSize = j;\n    free(tempList);\n}\n\nint main() {\n    int list[] = {1, 2, 3, 4, 2, 5, 2, 6};\n    int size = 8;\n    int elementToRemove = 2;\n    int newSize;\n\n    removeOccurrences(list, size, elementToRemove, &newSize);\n\n    for (int i = 0; i < newSize; i++) {\n        printf(\"%d \", list[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Generate a list of random numbers and find the median value.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\n#define SIZE 10\n\nint compare(const void *a, const void *b) {\n    return (*(int*)a - *(int*)b);\n}\n\ndouble findMedian(int arr[], int size) {\n    qsort(arr, size, sizeof(int), compare);\n    if (size % 2 == 0) {\n        return (arr[size / 2 - 1] + arr[size / 2]) / 2.0;\n    } else {\n        return arr[size / 2];\n    }\n}\n\nint main() {\n    int numbers[SIZE];\n    srand(time(0));\n    \n    for (int i = 0; i < SIZE; i++) {\n        numbers[i] = rand() % 100;\n    }\n\n    double median = findMedian(numbers, SIZE);\n    printf(\"Median value is: %.2f\\n\", median);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a list of dictionaries and sort them by a specific key.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MAX 100\n#define KEY_SIZE 50\n\ntypedef struct {\n    char key[KEY_SIZE];\n    int value;\n} Dictionary;\n\nint compare(const void *a, const void *b) {\n    Dictionary *dictA = (Dictionary *)a;\n    Dictionary *dictB = (Dictionary *)b;\n    return strcmp(dictA->key, dictB->key);\n}\n\nint main() {\n    Dictionary list[MAX];\n    int n, i;\n    \n    printf(\"Enter the number of dictionaries: \");\n    scanf(\"%d\", &n);\n    \n    for (i = 0; i < n; i++) {\n        printf(\"Enter key for dictionary %d: \", i + 1);\n        scanf(\"%s\", list[i].key);\n        printf(\"Enter value for dictionary %d: \", i + 1);\n        scanf(\"%d\", &list[i].value);\n    }\n    \n    qsort(list, n, sizeof(Dictionary), compare);\n    \n    printf(\"\\nSorted list of dictionaries by key:\\n\");\n    for (i = 0; i < n; i++) {\n        printf(\"Key: %s, Value: %d\\n\", list[i].key, list[i].value);\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Write a program to split a list into chunks of a specified size.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\nvoid split_into_chunks(int *list, int list_size, int chunk_size) {\n    int num_chunks = (list_size + chunk_size - 1) / chunk_size;\n    int **chunks = malloc(num_chunks * sizeof(int*));\n    int *chunk_sizes = malloc(num_chunks * sizeof(int));\n\n    for (int i = 0; i < num_chunks; ++i) {\n        int start_index = i * chunk_size;\n        int end_index = start_index + chunk_size;\n        if (end_index > list_size) end_index = list_size;\n        int current_chunk_size = end_index - start_index;\n        chunk_sizes[i] = current_chunk_size;\n        chunks[i] = malloc(current_chunk_size * sizeof(int));\n\n        for (int j = 0; j < current_chunk_size; ++j) {\n            chunks[i][j] = list[start_index + j];\n        }\n    }\n\n    // Output the chunks\n    for (int i = 0; i < num_chunks; ++i) {\n        printf(\"Chunk %d: \", i+1);\n        for (int j = 0; j < chunk_sizes[i]; ++j) {\n            printf(\"%d \", chunks[i][j]);\n        }\n        printf(\"\\n\");\n        free(chunks[i]);\n    }\n\n    free(chunks);\n    free(chunk_sizes);\n}\n\nint main() {\n    int list[] = {1, 2, 3, 4, 5, 6, 7, 8, 9};\n    int list_size = sizeof(list) / sizeof(list[0]);\n    int chunk_size = 3;\n\n    split_into_chunks(list, list_size, chunk_size);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function that takes a list and returns a dictionary with the frequency of each element.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int key;\n    int value;\n} KeyValuePair;\n\ntypedef struct {\n    KeyValuePair *data;\n    int size;\n    int capacity;\n} Dictionary;\n\nvoid initDictionary(Dictionary *dict) {\n    dict->capacity = 10;\n    dict->size = 0;\n    dict->data = (KeyValuePair *)malloc(sizeof(KeyValuePair) * dict->capacity);\n}\n\nvoid insert(Dictionary *dict, int key, int value) {\n    if (dict->size == dict->capacity) {\n        dict->capacity *= 2;\n        dict->data = (KeyValuePair *)realloc(dict->data, sizeof(KeyValuePair) * dict->capacity);\n    }\n    dict->data[dict->size].key = key;\n    dict->data[dict->size].value = value;\n    dict->size++;\n}\n\nint find(Dictionary *dict, int key) {\n    for (int i = 0; i < dict->size; i++) {\n        if (dict->data[i].key == key) {\n            return i;\n        }\n    }\n    return -1;\n}\n\nDictionary listToFrequencyDictionary(int *list, int listSize) {\n    Dictionary dict;\n    initDictionary(&dict);\n    \n    for (int i = 0; i < listSize; i++) {\n        int index = find(&dict, list[i]);\n        if (index != -1) {\n            dict.data[index].value++;\n        } else {\n            insert(&dict, list[i], 1);\n        }\n    }\n    \n    return dict;\n}\n\nvoid printDictionary(Dictionary *dict) {\n    for (int i = 0; i < dict->size; i++) {\n        printf(\"Element: %d, Frequency: %d\\n\", dict->data[i].key, dict->data[i].value);\n    }\n}\n\nvoid freeDictionary(Dictionary *dict) {\n    free(dict->data);\n}\n\nint main() {\n    int list[] = {1, 2, 2, 3, 3, 3, 4};\n    int listSize = sizeof(list) / sizeof(list[0]);\n    \n    Dictionary dict = listToFrequencyDictionary(list, listSize);\n    printDictionary(&dict);\n    freeDictionary(&dict);\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Create a list of integers and replace all negative numbers with zero.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int numbers[] = {4, -1, 3, -7, 0, 12, -5};\n    int length = sizeof(numbers) / sizeof(numbers[0]);\n\n    for (int i = 0; i < length; i++) {\n        if (numbers[i] < 0) {\n            numbers[i] = 0;\n        }\n    }\n\n    for (int i = 0; i < length; i++) {\n        printf(\"%d \", numbers[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that returns the first n elements of a list.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\nint* getFirstNElements(int* list, int n) {\n    int* result = (int*)malloc(n * sizeof(int));\n    for (int i = 0; i < n; i++) {\n        result[i] = list[i];\n    }\n    return result;\n}\n\nint main() {\n    int list[] = {1, 2, 3, 4, 5};\n    int n = 3;\n    int* firstN = getFirstNElements(list, n);\n\n    for (int i = 0; i < n; i++) {\n        printf(\"%d \", firstN[i]);\n    }\n    printf(\"\\n\");\n\n    free(firstN);\n    return 0;\n}\n```"
  },
  {
    "task": "Generate a list of strings and join them into a single string with spaces.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nint main() {\n    const char *list[] = {\"This\", \"is\", \"a\", \"list\", \"of\", \"strings\"};\n    int listSize = sizeof(list) / sizeof(list[0]);\n    char result[100] = \"\";\n    \n    for (int i = 0; i < listSize; ++i) {\n        strcat(result, list[i]);\n        if (i < listSize - 1) {\n            strcat(result, \" \");\n        }\n    }\n    \n    printf(\"%s\\n\", result);\n    return 0;\n}\n```"
  },
  {
    "task": "Create a list of lists and find the sum of each inner list.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int list[3][3] = {\n        {1, 2, 3},\n        {4, 5, 6},\n        {7, 8, 9}\n    };\n    \n    int num_lists = sizeof(list) / sizeof(list[0]);\n    int num_elements = sizeof(list[0]) / sizeof(list[0][0]);\n\n    for (int i = 0; i < num_lists; i++) {\n        int sum = 0;\n        for (int j = 0; j < num_elements; j++) {\n            sum += list[i][j];\n        }\n        printf(\"Sum of list %d: %d\\n\", i + 1, sum);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that finds the second largest number in a list.",
    "code": "```c\n#include <stdio.h>\n#include <limits.h>\n\nint findSecondLargest(int arr[], int size) {\n    if (size < 2) return INT_MIN; // Return INT_MIN if there are less than two elements\n    \n    int first = INT_MIN, second = INT_MIN;\n    \n    for (int i = 0; i < size; i++) {\n        if (arr[i] > first) {\n            second = first;\n            first = arr[i];\n        } else if (arr[i] > second && arr[i] != first) {\n            second = arr[i];\n        }\n    }\n    \n    return second;\n}\n\nint main() {\n    int numbers[] = {3, 1, 4, 1, 5, 9, 2, 6};\n    int size = sizeof(numbers) / sizeof(numbers[0]);\n    int secondLargest = findSecondLargest(numbers, size);\n    printf(\"Second largest number is: %d\\n\", secondLargest);\n    return 0;\n}\n```"
  },
  {
    "task": "Generate a list of numbers and remove the duplicates while maintaining order.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\nint *remove_duplicates(int *arr, int size, int *new_size) {\n    int *result = (int *)malloc(size * sizeof(int));\n    int *seen = (int *)calloc(1000, sizeof(int)); // assuming numbers range from 0 to 999\n    int j = 0;\n    for (int i = 0; i < size; i++) {\n        if (!seen[arr[i]]) {\n            seen[arr[i]] = 1;\n            result[j++] = arr[i];\n        }\n    }\n    *new_size = j;\n    free(seen);\n    return result;\n}\n\nint main() {\n    int arr[] = {4, 5, 6, 4, 2, 3, 5, 2, 1, 6};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    int new_size;\n    \n    int *unique_list = remove_duplicates(arr, size, &new_size);\n\n    for (int i = 0; i < new_size; i++) {\n        printf(\"%d \", unique_list[i]);\n    }\n    printf(\"\\n\");\n\n    free(unique_list);\n    return 0;\n}\n```"
  },
  {
    "task": "Create a list of integers and partition it into two lists: one with numbers above the average and one below.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    int numbers[] = {10, 20, 30, 40, 50};\n    int num_count = sizeof(numbers) / sizeof(numbers[0]);\n    \n    int sum = 0;\n    for (int i = 0; i < num_count; i++) {\n        sum += numbers[i];\n    }\n    \n    double average = sum / (double)num_count;\n\n    int *above_average = malloc(num_count * sizeof(int));\n    int *below_average = malloc(num_count * sizeof(int));\n    int above_count = 0, below_count = 0;\n\n    for (int i = 0; i < num_count; i++) {\n        if (numbers[i] > average) {\n            above_average[above_count++] = numbers[i];\n        } else {\n            below_average[below_count++] = numbers[i];\n        }\n    }\n\n    printf(\"Above average:\\n\");\n    for (int i = 0; i < above_count; i++) {\n        printf(\"%d \", above_average[i]);\n    }\n    printf(\"\\nBelow average:\\n\");\n    for (int i = 0; i < below_count; i++) {\n        printf(\"%d \", below_average[i]);\n    }\n    \n    free(above_average);\n    free(below_average);\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Write a program to find the longest increasing subsequence in a list of numbers.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\nint* longestIncreasingSubsequence(int* nums, int numsSize, int* returnSize) {\n    if (numsSize == 0) {\n        *returnSize = 0;\n        return NULL;\n    }\n\n    int* dp = (int*)malloc(numsSize * sizeof(int));\n    int* predecessor = (int*)malloc(numsSize * sizeof(int));\n    for (int i = 0; i < numsSize; i++) {\n        dp[i] = 1;\n        predecessor[i] = -1;\n    }\n\n    int maxLength = 1;\n    int endIndex = 0;\n\n    for (int i = 1; i < numsSize; i++) {\n        for (int j = 0; j < i; j++) {\n            if (nums[i] > nums[j] && dp[i] < dp[j] + 1) {\n                dp[i] = dp[j] + 1;\n                predecessor[i] = j;\n            }\n        }\n        if (dp[i] > maxLength) {\n            maxLength = dp[i];\n            endIndex = i;\n        }\n    }\n\n    int* lis = (int*)malloc(maxLength * sizeof(int));\n    int k = maxLength - 1;\n    for (int i = endIndex; i >= 0; i = predecessor[i]) {\n        lis[k--] = nums[i];\n        if (predecessor[i] == -1) break;\n    }\n\n    *returnSize = maxLength;\n    free(dp);\n    free(predecessor);\n    return lis;\n}\n\nint main() {\n    int nums[] = {10, 9, 2, 5, 3, 7, 101, 18};\n    int numsSize = sizeof(nums) / sizeof(nums[0]);\n    int returnSize;\n    int* lis = longestIncreasingSubsequence(nums, numsSize, &returnSize);\n\n    printf(\"Longest Increasing Subsequence: \");\n    for (int i = 0; i < returnSize; i++) {\n        printf(\"%d \", lis[i]);\n    }\n    printf(\"\\n\");\n\n    free(lis);\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function to zip two lists into a single list of tuples.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int first;\n    int second;\n} Tuple;\n\nTuple* zip(int* list1, int* list2, int size, int* resultSize) {\n    int minSize = size;\n    *resultSize = minSize;\n    Tuple* result = (Tuple*)malloc(minSize * sizeof(Tuple));\n    for (int i = 0; i < minSize; i++) {\n        result[i].first = list1[i];\n        result[i].second = list2[i];\n    }\n    return result;\n}\n\nint main() {\n    int list1[] = {1, 2, 3, 4, 5};\n    int list2[] = {10, 20, 30, 40, 50};\n    int size = 5;\n    int resultSize;\n    Tuple* zipped = zip(list1, list2, size, &resultSize);\n    for (int i = 0; i < resultSize; i++) {\n        printf(\"(%d, %d)\\n\", zipped[i].first, zipped[i].second);\n    }\n    free(zipped);\n    return 0;\n}\n```"
  },
  {
    "task": "Create a list of characters and count the vowels.",
    "code": "```c\n#include <stdio.h>\n#include <ctype.h>\n\nint main() {\n    char list[] = {'a', 'b', 'c', 'e', 'i', 'o', 'u', 'x', 'y', 'z'};\n    int count = 0;\n    int length = sizeof(list) / sizeof(list[0]);\n\n    for (int i = 0; i < length; i++) {\n        char ch = tolower(list[i]);\n        if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') {\n            count++;\n        }\n    }\n\n    printf(\"Number of vowels: %d\\n\", count);\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that returns the last n elements of a list.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\nint* last_n_elements(int* list, int list_size, int n, int* result_size) {\n    if (n > list_size) {\n        n = list_size;\n    }\n    *result_size = n;\n    int* result = (int*)malloc(n * sizeof(int));\n    for (int i = 0; i < n; i++) {\n        result[i] = list[list_size - n + i];\n    }\n    return result;\n}\n\nint main() {\n    int list[] = {1, 2, 3, 4, 5, 6, 7, 8, 9};\n    int list_size = sizeof(list) / sizeof(list[0]);\n    int n = 3;\n    int result_size;\n    int* result = last_n_elements(list, list_size, n, &result_size);\n    \n    for (int i = 0; i < result_size; i++) {\n        printf(\"%d \", result[i]);\n    }\n    printf(\"\\n\");\n\n    free(result);\n    return 0;\n}\n```"
  },
  {
    "task": "Generate a list of numbers and split it into two lists: one with positive numbers and one with negative numbers.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    int numbers[] = {5, -3, 12, -9, 7, -1, 0, 4, -6};\n    int size = sizeof(numbers) / sizeof(numbers[0]);\n\n    int *positive = malloc(size * sizeof(int));\n    int *negative = malloc(size * sizeof(int));\n    int posCount = 0, negCount = 0;\n\n    for (int i = 0; i < size; i++) {\n        if (numbers[i] > 0) {\n            positive[posCount++] = numbers[i];\n        } else if (numbers[i] < 0) {\n            negative[negCount++] = numbers[i];\n        }\n    }\n\n    printf(\"Positive numbers: \");\n    for (int i = 0; i < posCount; i++) {\n        printf(\"%d \", positive[i]);\n    }\n    printf(\"\\n\");\n\n    printf(\"Negative numbers: \");\n    for (int i = 0; i < negCount; i++) {\n        printf(\"%d \", negative[i]);\n    }\n    printf(\"\\n\");\n\n    free(positive);\n    free(negative);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a list of random integers and find the mode.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\n#define LIST_SIZE 100\n#define MAX_RANDOM_VALUE 50\n\nint main() {\n    int numbers[LIST_SIZE];\n    int frequency[MAX_RANDOM_VALUE + 1] = {0};\n    int i, mode = 0, max_count = 0;\n\n    srand(time(NULL));\n    for (i = 0; i < LIST_SIZE; i++) {\n        numbers[i] = rand() % (MAX_RANDOM_VALUE + 1);\n        frequency[numbers[i]]++;\n    }\n\n    for (i = 0; i <= MAX_RANDOM_VALUE; i++) {\n        if (frequency[i] > max_count) {\n            max_count = frequency[i];\n            mode = i;\n        }\n    }\n\n    printf(\"Mode: %d\\n\", mode);\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program to find the shortest path in a grid using a list to represent the path.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <limits.h>\n\n#define ROW 5\n#define COL 5\n\ntypedef struct {\n    int x, y;\n} Point;\n\ntypedef struct {\n    Point* points;\n    int size;\n} Path;\n\nint isSafe(int grid[ROW][COL], int visited[ROW][COL], int x, int y) {\n    return (x >= 0 && x < ROW && y >= 0 && y < COL && grid[x][y] && !visited[x][y]);\n}\n\nvoid findShortestPath(int grid[ROW][COL], int visited[ROW][COL], int x, int y, Path* path, Path* shortestPath) {\n    if (x == ROW - 1 && y == COL - 1) {\n        if (path->size < shortestPath->size) {\n            shortestPath->size = path->size;\n            for (int i = 0; i < path->size; i++) {\n                shortestPath->points[i] = path->points[i];\n            }\n        }\n        return;\n    }\n\n    visited[x][y] = 1;\n    Point newPoint = {x, y};\n    path->points[path->size++] = newPoint;\n\n    int rowNum[] = {-1, 1, 0, 0};\n    int colNum[] = {0, 0, -1, 1};\n    for (int i = 0; i < 4; i++) {\n        int newX = x + rowNum[i];\n        int newY = y + colNum[i];\n        if (isSafe(grid, visited, newX, newY)) {\n            findShortestPath(grid, visited, newX, newY, path, shortestPath);\n        }\n    }\n\n    path->size--;\n    visited[x][y] = 0;\n}\n\nint main() {\n    int grid[ROW][COL] = {\n        {1, 1, 1, 1, 0},\n        {0, 0, 1, 0, 1},\n        {1, 1, 1, 0, 1},\n        {1, 0, 0, 1, 1},\n        {1, 1, 1, 1, 1}\n    };\n\n    int visited[ROW][COL] = {0};\n    Path path = {malloc(ROW * COL * sizeof(Point)), 0};\n    Path shortestPath = {malloc(ROW * COL * sizeof(Point)), INT_MAX};\n\n    findShortestPath(grid, visited, 0, 0, &path, &shortestPath);\n\n    printf(\"Shortest path size: %d\\n\", shortestPath.size);\n    for (int i = 0; i < shortestPath.size; i++) {\n        printf(\"(%d, %d) \", shortestPath.points[i].x, shortestPath.points[i].y);\n    }\n\n    free(path.points);\n    free(shortestPath.points);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function that takes a list and returns a list with elements doubled.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\nint* doubleElements(int* list, int size) {\n    int* doubledList = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        doubledList[i] = 2 * list[i];\n    }\n    return doubledList;\n}\n\nint main() {\n    int list[] = {1, 2, 3, 4, 5};\n    int size = sizeof(list) / sizeof(list[0]);\n\n    int* doubledList = doubleElements(list, size);\n\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", doubledList[i]);\n    }\n    printf(\"\\n\");\n\n    free(doubledList);\n    return 0;\n}\n```"
  },
  {
    "task": "Create a list of integers and sort them in descending order.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\nint compare(const void *a, const void *b) {\n    return (*(int *)b - *(int *)a);\n}\n\nint main() {\n    int numbers[] = {5, 3, 8, 1, 9, 2};\n    size_t size = sizeof(numbers) / sizeof(numbers[0]);\n    \n    qsort(numbers, size, sizeof(int), compare);\n\n    for(size_t i = 0; i < size; i++) {\n        printf(\"%d \", numbers[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that takes a list of intervals and merges overlapping intervals.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int start;\n    int end;\n} Interval;\n\nint compareIntervals(const void* a, const void* b) {\n    Interval* intervalA = (Interval*)a;\n    Interval* intervalB = (Interval*)b;\n    return (intervalA->start - intervalB->start);\n}\n\nInterval* mergeIntervals(Interval* intervals, int size, int* returnSize) {\n    if (size <= 0) {\n        *returnSize = 0;\n        return NULL;\n    }\n\n    qsort(intervals, size, sizeof(Interval), compareIntervals);\n\n    Interval* merged = (Interval*)malloc(size * sizeof(Interval));\n    int index = 0;\n    merged[index] = intervals[0];\n\n    for (int i = 1; i < size; i++) {\n        if (merged[index].end >= intervals[i].start) {\n            if (merged[index].end < intervals[i].end) {\n                merged[index].end = intervals[i].end;\n            }\n        } else {\n            index++;\n            merged[index] = intervals[i];\n        }\n    }\n    *returnSize = index + 1;\n    return merged;\n}\n\nint main() {\n    Interval intervals[] = {{1, 3}, {2, 6}, {8, 10}, {15, 18}};\n    int size = sizeof(intervals) / sizeof(intervals[0]);\n    int returnSize;\n    Interval* mergedIntervals = mergeIntervals(intervals, size, &returnSize);\n\n    for (int i = 0; i < returnSize; i++) {\n        printf(\"[%d, %d] \", mergedIntervals[i].start, mergedIntervals[i].end);\n    }\n\n    free(mergedIntervals);\n    return 0;\n}\n```"
  },
  {
    "task": "Generate a list of random numbers and find the range (difference between max and min).",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\n#define LIST_SIZE 10\n#define MAX_RANDOM 100\n\nint main() {\n    int numbers[LIST_SIZE];\n    int i, max, min;\n\n    srand(time(NULL));\n\n    for (i = 0; i < LIST_SIZE; i++) {\n        numbers[i] = rand() % MAX_RANDOM;\n    }\n\n    max = numbers[0];\n    min = numbers[0];\n\n    for (i = 1; i < LIST_SIZE; i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n    }\n\n    printf(\"Range: %d\\n\", max - min);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a list of strings and remove any that are palindromes.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <stdbool.h>\n\nbool isPalindrome(char *str) {\n    int len = strlen(str);\n    for (int i = 0; i < len / 2; i++) {\n        if (str[i] != str[len - i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint main() {\n    char *strings[] = {\"level\", \"world\", \"racecar\", \"hello\", \"madam\"};\n    int size = sizeof(strings) / sizeof(strings[0]);\n    char **filtered = malloc(size * sizeof(char *));\n    int filteredIndex = 0;\n\n    for (int i = 0; i < size; i++) {\n        if (!isPalindrome(strings[i])) {\n            filtered[filteredIndex++] = strings[i];\n        }\n    }\n\n    for (int i = 0; i < filteredIndex; i++) {\n        printf(\"%s\\n\", filtered[i]);\n    }\n\n    free(filtered);\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program to cyclically permute the elements of a list.",
    "code": "```c\n#include <stdio.h>\n\nvoid cyclicPermute(int* arr, int n) {\n    if (n <= 0) return;\n    \n    int last = arr[n - 1];\n    for (int i = n - 1; i > 0; i--) {\n        arr[i] = arr[i - 1];\n    }\n    arr[0] = last;\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int n = sizeof(arr) / sizeof(arr[0]);\n    \n    printf(\"Original list: \");\n    for (int i = 0; i < n; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    \n    cyclicPermute(arr, n);\n    \n    printf(\"Cyclically permuted list: \");\n    for (int i = 0; i < n; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function to create a list of cumulative sums from a list of numbers.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\nint* cumulativeSums(int* nums, int length, int* returnSize) {\n    int* result = (int*)malloc(length * sizeof(int));\n    if (result == NULL) {\n        *returnSize = 0;\n        return NULL;\n    }\n    \n    int cumulativeSum = 0;\n    for (int i = 0; i < length; i++) {\n        cumulativeSum += nums[i];\n        result[i] = cumulativeSum;\n    }\n    \n    *returnSize = length;\n    return result;\n}\n\nint main() {\n    int numbers[] = {1, 2, 3, 4, 5};\n    int length = sizeof(numbers) / sizeof(numbers[0]);\n    int returnSize;\n    \n    int* result = cumulativeSums(numbers, length, &returnSize);\n    \n    for (int i = 0; i < returnSize; i++) {\n        printf(\"%d \", result[i]);\n    }\n    \n    free(result);\n    return 0;\n}\n```"
  },
  {
    "task": "Create a list of numbers and shift all zeros to the end.",
    "code": "```c\n#include <stdio.h>\n\nvoid shiftZerosToEnd(int *arr, int size) {\n    int count = 0;  // Count of non-zero elements\n\n    for (int i = 0; i < size; i++) {\n        if (arr[i] != 0) {\n            arr[count++] = arr[i];\n        }\n    }\n\n    while (count < size) {\n        arr[count++] = 0;\n    }\n}\n\nint main() {\n    int arr[] = {0, 1, 0, 3, 12, 0, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n\n    shiftZerosToEnd(arr, size);\n\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program to simulate a queue using a list.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct Node {\n    int data;\n    struct Node* next;\n} Node;\n\ntypedef struct Queue {\n    Node* front;\n    Node* rear;\n} Queue;\n\nQueue* createQueue() {\n    Queue* q = (Queue*)malloc(sizeof(Queue));\n    q->front = q->rear = NULL;\n    return q;\n}\n\nvoid enqueue(Queue* q, int value) {\n    Node* temp = (Node*)malloc(sizeof(Node));\n    temp->data = value;\n    temp->next = NULL;\n    if (q->rear == NULL) {\n        q->front = q->rear = temp;\n        return;\n    }\n    q->rear->next = temp;\n    q->rear = temp;\n}\n\nint dequeue(Queue* q) {\n    if (q->front == NULL) {\n        printf(\"Queue is empty\\n\");\n        return -1;\n    }\n    Node* temp = q->front;\n    int data = temp->data;\n    q->front = q->front->next;\n    if (q->front == NULL) {\n        q->rear = NULL;\n    }\n    free(temp);\n    return data;\n}\n\nint main() {\n    Queue* q = createQueue();\n    enqueue(q, 10);\n    enqueue(q, 20);\n    enqueue(q, 30);\n\n    printf(\"Dequeued: %d\\n\", dequeue(q));\n    printf(\"Dequeued: %d\\n\", dequeue(q));\n    printf(\"Dequeued: %d\\n\", dequeue(q));\n    printf(\"Dequeued: %d\\n\", dequeue(q));\n\n    return 0;\n}\n```"
  },
  {
    "task": "Generate a list of numbers and identify all prime numbers.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n\nbool is_prime(int num) {\n    if (num <= 1) return false;\n    if (num == 2) return true;\n    if (num % 2 == 0) return false;\n    for (int i = 3; i * i <= num; i += 2) {\n        if (num % i == 0) return false;\n    }\n    return true;\n}\n\nint main() {\n    int numbers[] = {10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20};\n    int size = sizeof(numbers) / sizeof(numbers[0]);\n    int *primes = malloc(size * sizeof(int));\n    int count = 0;\n\n    for (int i = 0; i < size; i++) {\n        if (is_prime(numbers[i])) {\n            primes[count++] = numbers[i];\n        }\n    }\n\n    printf(\"Prime numbers:\\n\");\n    for (int i = 0; i < count; i++) {\n        printf(\"%d \", primes[i]);\n    }\n    printf(\"\\n\");\n\n    free(primes);\n    return 0;\n}\n```"
  },
  {
    "task": "Create a list of strings and group them by their starting letter.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MAX_STRINGS 10\n#define MAX_LENGTH 100\n\ntypedef struct Node {\n    char *data;\n    struct Node *next;\n} Node;\n\ntypedef struct {\n    char letter;\n    Node *head;\n} Group;\n\nvoid add_to_group(Group *groups, int *group_count, const char *str) {\n    char letter = str[0];\n    for (int i = 0; i < *group_count; i++) {\n        if (groups[i].letter == letter) {\n            Node *new_node = (Node *)malloc(sizeof(Node));\n            new_node->data = strdup(str);\n            new_node->next = groups[i].head;\n            groups[i].head = new_node;\n            return;\n        }\n    }\n    Group new_group;\n    new_group.letter = letter;\n    new_group.head = NULL;\n    Node *new_node = (Node *)malloc(sizeof(Node));\n    new_node->data = strdup(str);\n    new_node->next = new_group.head;\n    new_group.head = new_node;\n    groups[*group_count] = new_group;\n    (*group_count)++;\n}\n\nvoid free_memory(Group *groups, int group_count) {\n    for (int i = 0; i < group_count; i++) {\n        Node *current = groups[i].head;\n        while (current != NULL) {\n            Node *next = current->next;\n            free(current->data);\n            free(current);\n            current = next;\n        }\n    }\n}\n\nvoid print_groups(Group *groups, int group_count) {\n    for (int i = 0; i < group_count; i++) {\n        printf(\"Group %c:\\n\", groups[i].letter);\n        Node *current = groups[i].head;\n        while (current != NULL) {\n            printf(\"  %s\\n\", current->data);\n            current = current->next;\n        }\n    }\n}\n\nint main() {\n    Group groups[MAX_STRINGS] = {0};\n    int group_count = 0;\n\n    char *strings[] = {\n        \"apple\", \"apricot\", \"banana\", \"blueberry\", \"cherry\", \n        \"cranberry\", \"date\", \"dragonfruit\", \"elderberry\", \"fig\"\n    };\n    \n    for (int i = 0; i < MAX_STRINGS; i++) {\n        add_to_group(groups, &group_count, strings[i]);\n    }\n\n    print_groups(groups, group_count);\n\n    free_memory(groups, group_count);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that takes a list and returns a new list with all elements squared.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\nint* squareElements(const int* list, size_t size) {\n    int* squaredList = (int*)malloc(size * sizeof(int));\n    if (squaredList == NULL) {\n        return NULL; // Memory allocation failed\n    }\n    for (size_t i = 0; i < size; i++) {\n        squaredList[i] = list[i] * list[i];\n    }\n    return squaredList;\n}\n\nint main() {\n    int list[] = {1, 2, 3, 4, 5};\n    size_t size = sizeof(list) / sizeof(list[0]);\n    int* squaredList = squareElements(list, size);\n    if (squaredList != NULL) {\n        for (size_t i = 0; i < size; i++) {\n            printf(\"%d \", squaredList[i]);\n        }\n        free(squaredList);\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Generate a list of timestamps and find the time difference between consecutive elements.",
    "code": "```c\n#include <stdio.h>\n#include <time.h>\n#include <stdlib.h>\n\n#define LIST_SIZE 5\n\nint main() {\n    time_t timestamps[LIST_SIZE];\n    double differences[LIST_SIZE - 1];\n\n    // Generate a list of timestamps\n    for (int i = 0; i < LIST_SIZE; i++) {\n        timestamps[i] = time(NULL);\n        if (i < LIST_SIZE - 1) {\n            sleep(1); // Sleep for a second to ensure difference\n        }\n    }\n\n    // Calculate the time difference between consecutive elements\n    for (int i = 0; i < LIST_SIZE - 1; i++) {\n        differences[i] = difftime(timestamps[i + 1], timestamps[i]);\n    }\n\n    // Output results\n    for (int i = 0; i < LIST_SIZE - 1; i++) {\n        printf(\"Difference between timestamps[%d] and timestamps[%d]: %.f seconds\\n\", i, i + 1, differences[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a list of numbers and rotate it such that the smallest number is first.",
    "code": "```c\n#include <stdio.h>\n\nvoid rotate(int arr[], int size) {\n    int min_index = 0;\n    for (int i = 1; i < size; i++) {\n        if (arr[i] < arr[min_index]) {\n            min_index = i;\n        }\n    }\n\n    int rotated[size];\n    int index = 0;\n    for (int i = min_index; i < size; i++) {\n        rotated[index++] = arr[i];\n    }\n    for (int i = 0; i < min_index; i++) {\n        rotated[index++] = arr[i];\n    }\n\n    for (int i = 0; i < size; i++) {\n        arr[i] = rotated[i];\n    }\n}\n\nint main() {\n    int numbers[] = {4, 5, 1, 2, 3};\n    int size = sizeof(numbers) / sizeof(numbers[0]);\n\n    rotate(numbers, size);\n\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", numbers[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program to find all unique pairs in a list that sum up to a specific target.",
    "code": "```c\n#include <stdio.h>\n\nvoid findPairs(int arr[], int size, int target) {\n    int seen[size];\n    int seen_index = 0;\n    \n    for (int i = 0; i < size; i++) {\n        int needed = target - arr[i];\n        int is_duplicate = 0;\n        \n        for (int k = 0; k < seen_index; k++) {\n            if (seen[k] == arr[i]) {\n                is_duplicate = 1;\n                break;\n            }\n        }\n\n        if (!is_duplicate) {\n            for (int j = i + 1; j < size; j++) {\n                if (arr[j] == needed) {\n                    printf(\"Pair found: (%d, %d)\\n\", arr[i], arr[j]);\n                    seen[seen_index++] = arr[i];\n                    break;\n                }\n            }\n        }\n    }\n}\n\nint main() {\n    int arr[] = {2, 4, 3, 3, 5, 1, 6, 7, 8, 2};\n    int target = 5;\n    int size = sizeof(arr) / sizeof(arr[0]);\n\n    findPairs(arr, size, target);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function that returns true if a list contains a cycle.",
    "code": "```c\n#include <stdbool.h>\n\nstruct Node {\n    int data;\n    struct Node *next;\n};\n\nbool hasCycle(struct Node *head) {\n    struct Node *slow = head, *fast = head;\n\n    while (fast != NULL && fast->next != NULL) {\n        slow = slow->next;\n        fast = fast->next->next;\n\n        if (slow == fast) {\n            return true;\n        }\n    }\n    return false;\n}\n```"
  },
  {
    "task": "Create a list of numbers and find the contiguous subarray with the maximum sum.",
    "code": "```c\n#include <stdio.h>\n\nint maxSubArray(int* nums, int numsSize) {\n    int maxSum = nums[0];\n    int currentSum = nums[0];\n    \n    for (int i = 1; i < numsSize; i++) {\n        if (currentSum < 0) {\n            currentSum = nums[i];\n        } else {\n            currentSum += nums[i];\n        }\n        \n        if (currentSum > maxSum) {\n            maxSum = currentSum;\n        }\n    }\n    \n    return maxSum;\n}\n\nint main() {\n    int numbers[] = {-2, 1, -3, 4, -1, 2, 1, -5, 4};\n    int size = sizeof(numbers) / sizeof(numbers[0]);\n    int result = maxSubArray(numbers, size);\n    printf(\"Maximum subarray sum is %d\\n\", result);\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that takes a list and a number, and finds two numbers in the list that sum to the given number.",
    "code": "```c\n#include <stdio.h>\n\nint* find_two_numbers(int* list, int size, int target) {\n    static int result[2];\n    for (int i = 0; i < size; i++) {\n        for (int j = i + 1; j < size; j++) {\n            if (list[i] + list[j] == target) {\n                result[0] = list[i];\n                result[1] = list[j];\n                return result;\n            }\n        }\n    }\n    return NULL;\n}\n\nint main() {\n    int list[] = {2, 7, 11, 15};\n    int target = 9;\n    int* pair = find_two_numbers(list, 4, target);\n    if (pair != NULL) {\n        printf(\"Numbers found: %d, %d\\n\", pair[0], pair[1]);\n    } else {\n        printf(\"No pair found.\\n\");\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Generate a list of even numbers and filter out those that are greater than a specific value.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\nint* generate_even_numbers(int limit, int* size) {\n    int* evens = (int*)malloc(limit / 2 * sizeof(int));\n    int index = 0;\n    for (int i = 0; i <= limit; i += 2) {\n        evens[index++] = i;\n    }\n    *size = index;\n    return evens;\n}\n\nint* filter_greater_than(int* list, int size, int threshold, int* new_size) {\n    int* filtered = (int*)malloc(size * sizeof(int));\n    int index = 0;\n    for (int i = 0; i < size; ++i) {\n        if (list[i] <= threshold) {\n            filtered[index++] = list[i];\n        }\n    }\n    *new_size = index;\n    return filtered;\n}\n\nint main() {\n    int limit = 20;\n    int threshold = 10;\n    int size;\n    int new_size;\n    \n    int* even_numbers = generate_even_numbers(limit, &size);\n    int* filtered_numbers = filter_greater_than(even_numbers, size, threshold, &new_size);\n    \n    for (int i = 0; i < new_size; ++i) {\n        printf(\"%d \", filtered_numbers[i]);\n    }\n    printf(\"\\n\");\n    \n    free(even_numbers);\n    free(filtered_numbers);\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Create a list of characters and reverse the vowels only.",
    "code": "```c\n#include <stdio.h>\n#include <ctype.h>\n\nvoid reverseVowels(char *list, int size) {\n    int left = 0, right = size - 1;\n    \n    while (left < right) {\n        while (left < right && !isVowel(list[left])) {\n            left++;\n        }\n        while (left < right && !isVowel(list[right])) {\n            right--;\n        }\n        \n        if (left < right) {\n            char temp = list[left];\n            list[left] = list[right];\n            list[right] = temp;\n            left++;\n            right--;\n        }\n    }\n}\n\nint isVowel(char c) {\n    c = tolower(c);\n    return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';\n}\n\nint main() {\n    char list[] = {'h', 'e', 'l', 'l', 'o'};\n    int size = sizeof(list) / sizeof(list[0]);\n    \n    reverseVowels(list, size);\n    \n    for (int i = 0; i < size; i++) {\n        printf(\"%c \", list[i]);\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Write a program to find all permutations of a list of elements.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\nvoid swap(char *x, char *y) {\n    char temp = *x;\n    *x = *y;\n    *y = temp;\n}\n\nvoid permute(char *list, int start, int end) {\n    if (start == end) {\n        for (int i = 0; i <= end; i++) {\n            printf(\"%c\", list[i]);\n        }\n        printf(\"\\n\");\n    } else {\n        for (int i = start; i <= end; i++) {\n            swap(&list[start], &list[i]);\n            permute(list, start + 1, end);\n            swap(&list[start], &list[i]);\n        }\n    }\n}\n\nint main() {\n    char list[] = {'a', 'b', 'c'};\n    int n = sizeof(list) / sizeof(list[0]);\n    permute(list, 0, n - 1);\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function that takes a list and returns the most frequently occurring element.",
    "code": "```c\n#include <stdio.h>\n\nint mostFrequentElement(int *list, int size) {\n    int maxCount = 0, mostFrequent = list[0];\n    for (int i = 0; i < size; i++) {\n        int count = 0;\n        for (int j = 0; j < size; j++) {\n            if (list[j] == list[i]) {\n                count++;\n            }\n        }\n        if (count > maxCount) {\n            maxCount = count;\n            mostFrequent = list[i];\n        }\n    }\n    return mostFrequent;\n}\n\nint main() {\n    int list[] = {1, 3, 2, 3, 4, 3, 5};\n    int size = sizeof(list) / sizeof(list[0]);\n    int mostFrequent = mostFrequentElement(list, size);\n    printf(\"Most frequent element: %d\\n\", mostFrequent);\n    return 0;\n}\n```"
  },
  {
    "task": "Create a list of numbers and calculate the variance.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    double numbers[] = {10.0, 20.0, 30.0, 40.0, 50.0};\n    int n = sizeof(numbers) / sizeof(numbers[0]);\n    double sum = 0.0, mean, variance = 0.0;\n\n    for (int i = 0; i < n; i++) {\n        sum += numbers[i];\n    }\n\n    mean = sum / n;\n\n    for (int i = 0; i < n; i++) {\n        variance += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n\n    variance /= n;\n\n    printf(\"Variance: %f\\n\", variance);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function to concatenate a list of lists into a single list.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\nint *concatenate(int **lists, int *sizes, int numLists, int *resultSize) {\n    int totalSize = 0;\n    for (int i = 0; i < numLists; i++) {\n        totalSize += sizes[i];\n    }\n    \n    int *result = (int *)malloc(totalSize * sizeof(int));\n    int currentIndex = 0;\n    \n    for (int i = 0; i < numLists; i++) {\n        for (int j = 0; j < sizes[i]; j++) {\n            result[currentIndex++] = lists[i][j];\n        }\n    }\n    \n    *resultSize = totalSize;\n    return result;\n}\n\nint main() {\n    int list1[] = {1, 2, 3};\n    int list2[] = {4, 5};\n    int list3[] = {6, 7, 8, 9};\n    \n    int *lists[] = {list1, list2, list3};\n    int sizes[] = {3, 2, 4};\n    int numLists = 3;\n    \n    int resultSize;\n    int *result = concatenate(lists, sizes, numLists, &resultSize);\n    \n    for (int i = 0; i < resultSize; i++) {\n        printf(\"%d \", result[i]);\n    }\n    \n    free(result);\n    return 0;\n}\n```"
  },
  {
    "task": "Generate a list of numbers and replace each element with the product of all other elements.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int n = sizeof(arr) / sizeof(arr[0]);\n    int product = 1;\n\n    for (int i = 0; i < n; i++) {\n        product *= arr[i];\n    }\n\n    for (int i = 0; i < n; i++) {\n        arr[i] = product / arr[i];\n    }\n\n    for (int i = 0; i < n; i++) {\n        printf(\"%d \", arr[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a list of strings and find the common prefix.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n#define MAX_STRINGS 100\n#define MAX_LENGTH 1000\n\nchar* findCommonPrefix(char* strings[], int n) {\n    if (n == 0) return \"\";\n    char* prefix = strings[0];\n    \n    for (int i = 1; i < n; i++) {\n        int j = 0;\n        while (prefix[j] && strings[i][j] && prefix[j] == strings[i][j]) {\n            j++;\n        }\n        prefix[j] = '\\0';\n    }\n    return prefix;\n}\n\nint main() {\n    char* strings[MAX_STRINGS] = {\n        \"flower\", \n        \"flow\", \n        \"flight\"\n    };\n    \n    int n = 3; // Number of strings\n    char* commonPrefix = findCommonPrefix(strings, n);\n    printf(\"Common Prefix: %s\\n\", commonPrefix);\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Write a program to partition a list into two lists based on a predicate function.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\ntypedef int (*Predicate)(int);\n\ntypedef struct {\n    int *data;\n    size_t size;\n} IntList;\n\nIntList partition_list(IntList list, Predicate predicate) {\n    IntList true_list = { .data = malloc(list.size * sizeof(int)), .size = 0 };\n    IntList false_list = { .data = malloc(list.size * sizeof(int)), .size = 0 };\n\n    for (size_t i = 0; i < list.size; i++) {\n        if (predicate(list.data[i])) {\n            true_list.data[true_list.size++] = list.data[i];\n        } else {\n            false_list.data[false_list.size++] = list.data[i];\n        }\n    }\n\n    IntList result = { .data = malloc((true_list.size + false_list.size) * sizeof(int)), .size = true_list.size + false_list.size };\n    for (size_t i = 0; i < true_list.size; i++) {\n        result.data[i] = true_list.data[i];\n    }\n    for (size_t i = 0; i < false_list.size; i++) {\n        result.data[true_list.size + i] = false_list.data[i];\n    }\n\n    free(true_list.data);\n    free(false_list.data);\n\n    return result;\n}\n\nint is_even(int x) {\n    return x % 2 == 0;\n}\n\nint main() {\n    int raw_data[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n    IntList list = { .data = raw_data, .size = sizeof(raw_data) / sizeof(raw_data[0]) };\n\n    IntList partitioned_list = partition_list(list, is_even);\n\n    printf(\"Partitioned list: \");\n    for (size_t i = 0; i < partitioned_list.size; i++) {\n        printf(\"%d \", partitioned_list.data[i]);\n    }\n    printf(\"\\n\");\n\n    free(partitioned_list.data);\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function to find the kth smallest element in a list.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\nint compare(const void *a, const void *b) {\n    return (*(int *)a - *(int *)b);\n}\n\nint findKthSmallest(int *arr, int size, int k) {\n    qsort(arr, size, sizeof(int), compare);\n    return arr[k - 1];\n}\n\nint main() {\n    int arr[] = {7, 10, 4, 3, 20, 15};\n    int k = 3;\n    int size = sizeof(arr) / sizeof(arr[0]);\n    printf(\"The %dth smallest element is %d\\n\", k, findKthSmallest(arr, size, k));\n    return 0;\n}\n```"
  },
  {
    "task": "Create a list of integers and find the length of the longest contiguous sequence.",
    "code": "```c\n#include <stdio.h>\n\nint findLongestSequence(int *arr, int size) {\n    if (size == 0) return 0;\n\n    int longest = 1, current = 1;\n    for (int i = 1; i < size; i++) {\n        if (arr[i] == arr[i - 1] + 1) {\n            current++;\n        } else {\n            if (current > longest) {\n                longest = current;\n            }\n            current = 1;\n        }\n    }\n    if (current > longest) {\n        longest = current;\n    }\n    return longest;\n}\n\nint main() {\n    int list[] = {1, 2, 3, 5, 6, 7, 8, 10, 11};\n    int size = sizeof(list) / sizeof(list[0]);\n    int longest_sequence = findLongestSequence(list, size);\n    printf(\"The length of the longest contiguous sequence is: %d\\n\", longest_sequence);\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that rotates elements in a list while maintaining the relative order of non-rotated elements.",
    "code": "```c\n#include <stdio.h>\n\nvoid rotateList(int *list, int size, int k) {\n    int rotated[size];\n    for (int i = 0; i < size; i++) {\n        rotated[(i + k) % size] = list[i];\n    }\n    for (int i = 0; i < size; i++) {\n        list[i] = rotated[i];\n    }\n}\n\nint main() {\n    int list[] = {1, 2, 3, 4, 5};\n    int size = sizeof(list) / sizeof(list[0]);\n    int k = 2;\n    \n    rotateList(list, size, k);\n    \n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", list[i]);\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Generate a list of random numbers and sort them while maintaining the original index positions.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\ntypedef struct {\n    int value;\n    int original_index;\n} IndexedValue;\n\nint compare(const void *a, const void *b) {\n    IndexedValue *iv1 = (IndexedValue *)a;\n    IndexedValue *iv2 = (IndexedValue *)b;\n    return iv1->value - iv2->value;\n}\n\nint main() {\n    int i, n = 10;\n    IndexedValue list[n];\n    \n    srand(time(NULL));\n    \n    for (i = 0; i < n; i++) {\n        list[i].value = rand() % 100;\n        list[i].original_index = i;\n    }\n    \n    qsort(list, n, sizeof(IndexedValue), compare);\n    \n    for (i = 0; i < n; i++) {\n        printf(\"Value: %d, Original Index: %d\\n\", list[i].value, list[i].original_index);\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Create a list of numbers and find all subsets that sum up to a specific target.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\nvoid findSubsets(int *numbers, int size, int target, int *subset, int subsetSize, int index) {\n    int sum = 0;\n    for (int i = 0; i < subsetSize; i++) {\n        sum += subset[i];\n    }\n    if (sum == target) {\n        printf(\"{\");\n        for (int i = 0; i < subsetSize; i++) {\n            printf(\"%d\", subset[i]);\n            if (i < subsetSize - 1) printf(\", \");\n        }\n        printf(\"}\\n\");\n    }\n    if (index == size) return;\n    for (int i = index; i < size; i++) {\n        subset[subsetSize] = numbers[i];\n        findSubsets(numbers, size, target, subset, subsetSize + 1, i + 1);\n    }\n}\n\nint main() {\n    int numbers[] = {1, 2, 3, 4, 5}; // Example list of numbers\n    int target = 5; // Example target sum\n    int size = sizeof(numbers) / sizeof(numbers[0]);\n    int *subset = (int *)malloc(size * sizeof(int));\n    \n    findSubsets(numbers, size, target, subset, 0, 0);\n    \n    free(subset);\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program to simulate a stack using a list.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct Stack {\n    int *data;\n    int top;\n    int capacity;\n} Stack;\n\nStack* createStack(int capacity) {\n    Stack *stack = (Stack*)malloc(sizeof(Stack));\n    stack->capacity = capacity;\n    stack->top = -1;\n    stack->data = (int*)malloc(stack->capacity * sizeof(int));\n    return stack;\n}\n\nint isFull(Stack *stack) {\n    return stack->top == stack->capacity - 1;\n}\n\nint isEmpty(Stack *stack) {\n    return stack->top == -1;\n}\n\nvoid push(Stack *stack, int item) {\n    if (isFull(stack)) {\n        printf(\"Stack overflow\\n\");\n        return;\n    }\n    stack->data[++stack->top] = item;\n    printf(\"%d pushed to stack\\n\", item);\n}\n\nint pop(Stack *stack) {\n    if (isEmpty(stack)) {\n        printf(\"Stack underflow\\n\");\n        return -1;\n    }\n    return stack->data[stack->top--];\n}\n\nint peek(Stack *stack) {\n    if (isEmpty(stack)) {\n        printf(\"Stack is empty\\n\");\n        return -1;\n    }\n    return stack->data[stack->top];\n}\n\nint main() {\n    Stack *stack = createStack(100);\n\n    push(stack, 10);\n    push(stack, 20);\n    push(stack, 30);\n\n    printf(\"%d popped from stack\\n\", pop(stack));\n    printf(\"Top element is %d\\n\", peek(stack));\n\n    free(stack->data);\n    free(stack);\n\n    return 0;\n}\n```"
  }
]