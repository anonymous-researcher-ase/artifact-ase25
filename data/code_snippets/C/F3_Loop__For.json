[
  {
    "task": "Write a program that prints numbers from 1 to 10 using a for loop.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    for (int i = 1; i <= 10; i++) {\n        printf(\"%d\\n\", i);\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Create a loop that iterates over an array of names and prints each name.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    const char *names[] = {\"Alice\", \"Bob\", \"Charlie\", \"David\"};\n    int size = sizeof(names) / sizeof(names[0]);\n\n    for (int i = 0; i < size; i++) {\n        printf(\"%s\\n\", names[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a for loop to calculate the factorial of a given number.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int number, factorial = 1;\n\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &number);\n\n    for (int i = 1; i <= number; i++) {\n        factorial *= i;\n    }\n\n    printf(\"Factorial of %d is %d\\n\", number, factorial);\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a program that uses a for loop to sum all even numbers between 1 and 100.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int sum = 0;\n    for (int i = 2; i <= 100; i += 2) {\n        sum += i;\n    }\n    printf(\"Sum of even numbers between 1 and 100: %d\\n\", sum);\n    return 0;\n}\n```"
  },
  {
    "task": "Use a for loop to generate and print the Fibonacci sequence up to 20 terms.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int n1 = 0, n2 = 1, next;\n    int count, terms = 20;\n\n    printf(\"Fibonacci Sequence up to %d terms:\\n\", terms);\n    for (count = 0; count < terms; count++) {\n        if (count <= 1)\n            next = count;\n        else {\n            next = n1 + n2;\n            n1 = n2;\n            n2 = next;\n        }\n        printf(\"%d \", next);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Construct a for loop that prints the multiplication table for a given number.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int number = 5; // Example number for which the multiplication table is printed\n    int i;\n\n    for (i = 1; i <= 10; i++) {\n        printf(\"%d x %d = %d\\n\", number, i, number * i);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write code to iterate through a list of student grades and print only those above a certain threshold.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int grades[] = {85, 92, 78, 90, 88};\n    int threshold = 80;\n    int size = sizeof(grades) / sizeof(grades[0]);\n\n    for (int i = 0; i < size; i++) {\n        if (grades[i] > threshold) {\n            printf(\"%d\\n\", grades[i]);\n        }\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a for loop that appends the square of numbers 1 to 10 to a list.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int squares[10];\n    for (int i = 0; i < 10; i++) {\n        squares[i] = (i + 1) * (i + 1);\n    }\n    \n    // Optional: Print the squares to verify\n    for (int i = 0; i < 10; i++) {\n        printf(\"%d \", squares[i]);\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Develop a for loop that reverses a given string.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nint main() {\n    char str[] = \"Hello, World!\";\n    int length = strlen(str);\n    char reversed[length + 1];\n\n    for (int i = 0; i < length; i++) {\n        reversed[i] = str[length - 1 - i];\n    }\n    reversed[length] = '\\0';\n\n    printf(\"Reversed String: %s\\n\", reversed);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Build a program that uses a for loop to print all elements in a 2D matrix.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int matrix[3][3] = {\n        {1, 2, 3},\n        {4, 5, 6},\n        {7, 8, 9}\n    };\n    \n    for (int i = 0; i < 3; i++) {\n        for (int j = 0; j < 3; j++) {\n            printf(\"%d \", matrix[i][j]);\n        }\n        printf(\"\\n\");\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Use a for loop to find the maximum value in an array of integers.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int arr[] = {3, 1, 4, 1, 5, 9, 2, 6};\n    int length = sizeof(arr) / sizeof(arr[0]);\n    int max = arr[0];\n    \n    for (int i = 1; i < length; i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n    }\n    \n    printf(\"The maximum value is: %d\\n\", max);\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Write a program that uses a for loop to print the characters of a string, one per line.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    char str[] = \"Hello, World!\";\n    for (int i = 0; str[i] != '\\0'; i++) {\n        printf(\"%c\\n\", str[i]);\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Create a for loop that counts the number of vowels in a given sentence.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    char sentence[] = \"This is a sample sentence.\";\n    int vowel_count = 0;\n    char vowels[] = \"aeiouAEIOU\";\n\n    for (int i = 0; sentence[i] != '\\0'; i++) {\n        for (int j = 0; vowels[j] != '\\0'; j++) {\n            if (sentence[i] == vowels[j]) {\n                vowel_count++;\n                break;\n            }\n        }\n    }\n\n    printf(\"Number of vowels: %d\\n\", vowel_count);\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a for loop to check if a number is prime by testing divisibility.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int number = 29; // Example number to check\n    int isPrime = 1; // Assume the number is prime\n\n    if (number <= 1) {\n        isPrime = 0;\n    } else {\n        for (int i = 2; i * i <= number; i++) {\n            if (number % i == 0) {\n                isPrime = 0;\n                break;\n            }\n        }\n    }\n\n    if (isPrime) {\n        printf(\"%d is a prime number.\\n\", number);\n    } else {\n        printf(\"%d is not a prime number.\\n\", number);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a for loop that prints a pyramid pattern of asterisks with a given height.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int height, i, j, k;\n    printf(\"Enter the height of the pyramid: \");\n    scanf(\"%d\", &height);\n\n    for (i = 1; i <= height; i++) {\n        for (j = i; j < height; j++) {\n            printf(\" \");\n        }\n        for (k = 1; k <= (2 * i - 1); k++) {\n            printf(\"*\");\n        }\n        printf(\"\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program that uses a for loop to calculate the sum of digits of a number.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int number, sum = 0;\n\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &number);\n\n    for (; number != 0; number /= 10) {\n        sum += number % 10;\n    }\n\n    printf(\"Sum of digits: %d\\n\", sum);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Construct a for loop to flatten a list of lists into a single list.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int nestedList[3][3] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};\n    int flatList[9];\n    int index = 0;\n\n    for (int i = 0; i < 3; i++) {\n        for (int j = 0; j < 3; j++) {\n            flatList[index++] = nestedList[i][j];\n        }\n    }\n\n    // Print the flattened list\n    for (int i = 0; i < 9; i++) {\n        printf(\"%d \", flatList[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Use a for loop to generate a list of random numbers and print them.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nint main() {\n    int n = 10; // Number of random numbers to generate\n    int randomNumbers[n];\n\n    // Seed the random number generator\n    srand(time(NULL));\n\n    // Generate random numbers and store them in the array\n    for (int i = 0; i < n; i++) {\n        randomNumbers[i] = rand(); // Generate a random number\n    }\n\n    // Print the random numbers\n    for (int i = 0; i < n; i++) {\n        printf(\"%d\\n\", randomNumbers[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a for loop that iterates through a dictionary and prints its keys and values.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    // Define a simple dictionary using arrays\n    char *keys[] = {\"key1\", \"key2\", \"key3\"};\n    char *values[] = {\"value1\", \"value2\", \"value3\"};\n    int size = sizeof(keys) / sizeof(keys[0]);\n    \n    // Iterate through the dictionary\n    for (int i = 0; i < size; i++) {\n        printf(\"Key: %s, Value: %s\\n\", keys[i], values[i]);\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Develop a for loop that counts down from 10 to 1 and prints each number.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    for (int i = 10; i >= 1; i--) {\n        printf(\"%d\\n\", i);\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Write code to multiply each element in an array by 2 using a for loop.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int array[] = {1, 2, 3, 4, 5};\n    int size = sizeof(array) / sizeof(array[0]);\n\n    for (int i = 0; i < size; i++) {\n        array[i] *= 2;\n    }\n\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", array[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a for loop that calculates the average of numbers in a list.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int numbers[] = {10, 20, 30, 40, 50};\n    int sum = 0;\n    int count = sizeof(numbers) / sizeof(numbers[0]);\n    \n    for (int i = 0; i < count; i++) {\n        sum += numbers[i];\n    }\n    \n    double average = (double)sum / count;\n    printf(\"Average: %.2f\\n\", average);\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Implement a for loop to find duplicate elements in an array.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 2, 5, 3, 6, 7, 8, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    int i, j;\n\n    printf(\"Duplicate elements in the array are: \");\n    for (i = 0; i < size - 1; i++) {\n        for (j = i + 1; j < size; j++) {\n            if (arr[i] == arr[j]) {\n                printf(\"%d \", arr[i]);\n                break;\n            }\n        }\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a for loop that removes all occurrences of a specific element from a list.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 2, 5, 2};\n    int n = sizeof(arr) / sizeof(arr[0]);\n    int elementToRemove = 2;\n    int newArr[n];\n    int j = 0;\n\n    for (int i = 0; i < n; i++) {\n        if (arr[i] != elementToRemove) {\n            newArr[j] = arr[i];\n            j++;\n        }\n    }\n\n    // Print the new array\n    for (int i = 0; i < j; i++) {\n        printf(\"%d \", newArr[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Use a for loop to simulate rolling a dice 100 times and count the occurrences of each face.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nint main() {\n    int counts[6] = {0};\n    srand(time(NULL));\n    \n    for (int i = 0; i < 100; i++) {\n        int roll = rand() % 6 + 1;\n        counts[roll - 1]++;\n    }\n    \n    for (int j = 0; j < 6; j++) {\n        printf(\"Face %d: %d times\\n\", j + 1, counts[j]);\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Write a for loop that prints all the prime numbers between 1 and 50.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int num, i, isPrime;\n\n    for (num = 2; num <= 50; num++) {\n        isPrime = 1;\n        for (i = 2; i <= num / 2; i++) {\n            if (num % i == 0) {\n                isPrime = 0;\n                break;\n            }\n        }\n        if (isPrime == 1) {\n            printf(\"%d\\n\", num);\n        }\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a for loop that extracts all the uppercase letters from a string.",
    "code": "```c\n#include <stdio.h>\n#include <ctype.h>\n\nint main() {\n    char input[] = \"Extract UPPERCASE Letters!\";\n    char result[100]; // Assuming the result will have at most 100 characters\n    int j = 0;\n    \n    for (int i = 0; input[i] != '\\0'; i++) {\n        if (isupper(input[i])) {\n            result[j++] = input[i];\n        }\n    }\n    result[j] = '\\0'; // Null-terminate the result string\n\n    printf(\"Uppercase letters: %s\\n\", result);\n    return 0;\n}\n```"
  },
  {
    "task": "Create a for loop that checks if a list is sorted in ascending order.",
    "code": "```c\n#include <stdbool.h>\n\nbool isSorted(int arr[], int n) {\n    for (int i = 0; i < n - 1; i++) {\n        if (arr[i] > arr[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n```"
  },
  {
    "task": "Implement a for loop to generate a list of the first 10 square numbers.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int squares[10];\n    for (int i = 0; i < 10; i++) {\n        squares[i] = (i + 1) * (i + 1);\n    }\n\n    // Optional: Print the squares\n    for (int i = 0; i < 10; i++) {\n        printf(\"%d \", squares[i]);\n    }\n    printf(\"\\n\");\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write code to print all the elements of a list that are greater than a given number using a for loop.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int list[] = {4, 7, 1, 9, 3, 6};\n    int size = sizeof(list) / sizeof(list[0]);\n    int number = 5;\n\n    for (int i = 0; i < size; i++) {\n        if (list[i] > number) {\n            printf(\"%d\\n\", list[i]);\n        }\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Construct a for loop that finds the smallest number in an array.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int numbers[] = {5, 3, 8, 1, 4};\n    int n = sizeof(numbers) / sizeof(numbers[0]);\n    int min = numbers[0];\n\n    for (int i = 1; i < n; i++) {\n        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n    }\n\n    printf(\"The smallest number is: %d\\n\", min);\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a for loop that prints the first N lines of Pascal's Triangle.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int N, i, j, coeff;\n\n    // Input the number of lines\n    printf(\"Enter the number of lines: \");\n    scanf(\"%d\", &N);\n\n    for (i = 0; i < N; i++) {\n        coeff = 1;\n        for (j = 0; j <= i; j++) {\n            printf(\"%d \", coeff);\n            coeff = coeff * (i - j) / (j + 1);\n        }\n        printf(\"\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a for loop that calculates the product of all elements in a list.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int list[] = {1, 2, 3, 4, 5}; // Example list\n    int product = 1;\n    int length = sizeof(list) / sizeof(list[0]);\n\n    for (int i = 0; i < length; i++) {\n        product *= list[i];\n    }\n\n    printf(\"Product of all elements: %d\\n\", product);\n    return 0;\n}\n```"
  },
  {
    "task": "Use a for loop to print numbers from 1 to 100, but replace multiples of 3 with 'Fizz'.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    for (int i = 1; i <= 100; i++) {\n        if (i % 3 == 0) {\n            printf(\"Fizz\\n\");\n        } else {\n            printf(\"%d\\n\", i);\n        }\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Write a for loop that iterates over a string and counts the number of words.",
    "code": "```c\n#include <stdio.h>\n#include <ctype.h>\n\nint countWords(const char *str) {\n    int count = 0;\n    int inWord = 0;\n\n    for (int i = 0; str[i] != '\\0'; i++) {\n        if (isspace(str[i])) {\n            inWord = 0;\n        } else if (!inWord) {\n            inWord = 1;\n            count++;\n        }\n    }\n\n    return count;\n}\n\nint main() {\n    const char *text = \"This is a sample string with several words.\";\n    int wordCount = countWords(text);\n    printf(\"Number of words: %d\\n\", wordCount);\n    return 0;\n}\n```"
  },
  {
    "task": "Design a for loop that prints numbers from 1 to 50, but skips numbers divisible by 5.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    for (int i = 1; i <= 50; i++) {\n        if (i % 5 == 0) {\n            continue;\n        }\n        printf(\"%d\\n\", i);\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a for loop that prints a checkerboard pattern of asterisks.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int rows = 8, cols = 8; // Set the dimensions of the checkerboard\n    for (int i = 0; i < rows; i++) {\n        for (int j = 0; j < cols; j++) {\n            if ((i + j) % 2 == 0) {\n                printf(\"* \");\n            } else {\n                printf(\"  \");\n            }\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Create a for loop that finds the index of a target value in a list.",
    "code": "```c\n#include <stdio.h>\n\nint findIndex(int arr[], int size, int target) {\n    for (int i = 0; i < size; i++) {\n        if (arr[i] == target) {\n            return i;\n        }\n    }\n    return -1; // Return -1 if the target is not found\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    int target = 3;\n    int index = findIndex(arr, size, target);\n    \n    printf(\"Index of target %d is: %d\\n\", target, index);\n    return 0;\n}\n```"
  },
  {
    "task": "Use a for loop to concatenate a list of strings into a single string.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nint main() {\n    const char *strings[] = {\"Hello\", \" \", \"world\", \"!\"};\n    char result[100] = \"\";\n    int numStrings = sizeof(strings) / sizeof(strings[0]);\n\n    for (int i = 0; i < numStrings; i++) {\n        strcat(result, strings[i]);\n    }\n\n    printf(\"%s\\n\", result);\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a for loop that rotates a list to the right by a given number of positions.",
    "code": "```c\n#include <stdio.h>\n\nvoid rotateRight(int arr[], int n, int k) {\n    int rotated[n];\n    k = k % n; // Handle cases where k >= n\n    for (int i = 0; i < n; i++) {\n        rotated[(i + k) % n] = arr[i];\n    }\n    for (int i = 0; i < n; i++) {\n        arr[i] = rotated[i];\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int n = sizeof(arr) / sizeof(arr[0]);\n    int k = 2;\n    \n    rotateRight(arr, n, k);\n    \n    for (int i = 0; i < n; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Write code that uses a for loop to insert an element into a sorted list while maintaining order.",
    "code": "```c\n#include <stdio.h>\n\n#define SIZE 6\n\nvoid insertInOrder(int arr[], int *n, int element) {\n    int i, j;\n    for (i = 0; i < *n; i++) {\n        if (arr[i] > element) {\n            break;\n        }\n    }\n\n    for (j = *n; j > i; j--) {\n        arr[j] = arr[j - 1];\n    }\n\n    arr[i] = element;\n    (*n)++;\n}\n\nint main() {\n    int sortedList[SIZE] = {1, 3, 5, 7, 9};\n    int n = 5;\n    int element = 4;\n\n    insertInOrder(sortedList, &n, element);\n\n    for (int i = 0; i < n; i++) {\n        printf(\"%d \", sortedList[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a for loop that counts the frequency of each character in a string.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nint main() {\n    char str[] = \"example string\";\n    int freq[256] = {0};\n    int i;\n    \n    for (i = 0; str[i] != '\\0'; i++) {\n        freq[(unsigned char)str[i]]++;\n    }\n    \n    for (i = 0; i < 256; i++) {\n        if (freq[i] != 0) {\n            printf(\"Character '%c' occurs %d times\\n\", i, freq[i]);\n        }\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a for loop that prints all subsets of a given set.",
    "code": "```c\n#include <stdio.h>\n#include <math.h>\n\nvoid printSubsets(int set[], int set_size) {\n    unsigned int pow_set_size = pow(2, set_size);\n    int counter, j;\n    \n    for(counter = 0; counter < pow_set_size; counter++) {\n        printf(\"{ \");\n        for(j = 0; j < set_size; j++) {\n            if(counter & (1 << j)) {\n                printf(\"%d \", set[j]);\n            }\n        }\n        printf(\"}\\n\");\n    }\n}\n\nint main() {\n    int set[] = {1, 2, 3};\n    int set_size = sizeof(set) / sizeof(set[0]);\n    printSubsets(set, set_size);\n    return 0;\n}\n```"
  },
  {
    "task": "Design a for loop to generate all permutations of a string.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nvoid swap(char *x, char *y) {\n    char temp;\n    temp = *x;\n    *x = *y;\n    *y = temp;\n}\n\nvoid permute(char *str, int start, int end) {\n    if (start == end) {\n        printf(\"%s\\n\", str);\n    } else {\n        for (int i = start; i <= end; i++) {\n            swap((str + start), (str + i));\n            permute(str, start + 1, end);\n            swap((str + start), (str + i)); // backtrack\n        }\n    }\n}\n\nint main() {\n    char str[] = \"ABC\";\n    int n = strlen(str);\n    permute(str, 0, n - 1);\n    return 0;\n}\n```"
  },
  {
    "task": "Write a for loop that sorts an array in descending order.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int arr[] = {5, 2, 9, 1, 5, 6};\n    int n = sizeof(arr) / sizeof(arr[0]);\n    int i, j, temp;\n\n    for (i = 0; i < n - 1; i++) {\n        for (j = 0; j < n - i - 1; j++) {\n            if (arr[j] < arr[j + 1]) {\n                temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n\n    for (i = 0; i < n; i++) {\n        printf(\"%d \", arr[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Use a for loop to generate a sequence of random characters and print them.",
    "code": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nint main() {\n    int i;\n    int length = 10; // Length of the random character sequence\n    char randomChar;\n\n    srand(time(NULL)); // Seed the random number generator\n\n    for (i = 0; i < length; i++) {\n        randomChar = 'A' + (rand() % 26); // Generate a random uppercase letter\n        printf(\"%c\", randomChar);\n    }\n    \n    printf(\"\\n\");\n    return 0;\n}\n```"
  },
  {
    "task": "Construct a for loop that finds the common elements between two lists.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int list1[] = {1, 2, 3, 4, 5};\n    int list2[] = {3, 4, 5, 6, 7};\n    int size1 = sizeof(list1) / sizeof(list1[0]);\n    int size2 = sizeof(list2) / sizeof(list2[0]);\n\n    printf(\"Common elements: \");\n    for(int i = 0; i < size1; i++) {\n        for(int j = 0; j < size2; j++) {\n            if(list1[i] == list2[j]) {\n                printf(\"%d \", list1[i]);\n                break;\n            }\n        }\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a for loop to calculate and print the cumulative sum of a list.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int list[] = {1, 2, 3, 4, 5}; // Example list\n    int n = sizeof(list) / sizeof(list[0]);\n    int cumulative_sum = 0;\n    \n    for (int i = 0; i < n; i++) {\n        cumulative_sum += list[i];\n        printf(\"Cumulative sum up to index %d: %d\\n\", i, cumulative_sum);\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Create a for loop that prints a diamond pattern using asterisks.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int n = 5; // height of the diamond\n    int i, j;\n\n    // Upper half of the diamond\n    for (i = 1; i <= n; i++) {\n        for (j = 1; j <= n - i; j++) {\n            printf(\" \");\n        }\n        for (j = 1; j <= 2 * i - 1; j++) {\n            printf(\"*\");\n        }\n        printf(\"\\n\");\n    }\n\n    // Lower half of the diamond\n    for (i = n - 1; i >= 1; i--) {\n        for (j = 1; j <= n - i; j++) {\n            printf(\" \");\n        }\n        for (j = 1; j <= 2 * i - 1; j++) {\n            printf(\"*\");\n        }\n        printf(\"\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a for loop that simulates a countdown timer from a specified number of seconds.",
    "code": "```c\n#include <stdio.h>\n#include <unistd.h> // For sleep function\n\nint main() {\n    int seconds = 10; // Specify the number of seconds for countdown\n\n    for (int i = seconds; i >= 0; i--) {\n        printf(\"%d\\n\", i);\n        sleep(1); // Wait for 1 second\n    }\n\n    printf(\"Countdown finished!\\n\");\n\n    return 0;\n}\n```"
  },
  {
    "task": "Use a for loop to print the transpose of a matrix.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int matrix[3][3] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};\n    int rows = 3;\n    int cols = 3;\n\n    printf(\"Transpose of the matrix:\\n\");\n    for (int i = 0; i < cols; i++) {\n        for (int j = 0; j < rows; j++) {\n            printf(\"%d \", matrix[j][i]);\n        }\n        printf(\"\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a for loop that reverses the order of words in a sentence.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nvoid reverseWords(char *sentence) {\n    int length = strlen(sentence);\n    char reversed[length + 1];\n    int wordStart = length;\n    int index = 0;\n\n    for (int i = length - 1; i >= 0; i--) {\n        if (sentence[i] == ' ' || i == 0) {\n            int wordEnd = (i == 0) ? i : i + 1;\n            for (int j = wordEnd; j < wordStart; j++) {\n                reversed[index++] = sentence[j];\n            }\n            if (i != 0) {\n                reversed[index++] = ' ';\n            }\n            wordStart = i;\n        }\n    }\n    reversed[index] = '\\0';\n    printf(\"%s\\n\", reversed);\n}\n\nint main() {\n    char sentence[] = \"Implement a for loop that reverses the order of words\";\n    reverseWords(sentence);\n    return 0;\n}\n```"
  },
  {
    "task": "Create a for loop that deletes elements from a list that are less than a given value.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int list[] = {1, 5, 8, 3, 10, 2};\n    int size = sizeof(list) / sizeof(list[0]);\n    int threshold = 5;\n    int new_size = 0;\n\n    for (int i = 0; i < size; i++) {\n        if (list[i] >= threshold) {\n            list[new_size++] = list[i];\n        }\n    }\n\n    // Printing the modified list\n    for (int i = 0; i < new_size; i++) {\n        printf(\"%d \", list[i]);\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Design a for loop to merge two sorted lists into a single sorted list.",
    "code": "```c\n#include <stdio.h>\n\nvoid mergeSortedLists(int* list1, int size1, int* list2, int size2, int* mergedList) {\n    int i = 0, j = 0, k = 0;\n\n    // Merge both lists\n    for (k = 0; i < size1 && j < size2; k++) {\n        if (list1[i] <= list2[j]) {\n            mergedList[k] = list1[i++];\n        } else {\n            mergedList[k] = list2[j++];\n        }\n    }\n\n    // Copy remaining elements of list1, if any\n    for (; i < size1; i++, k++) {\n        mergedList[k] = list1[i];\n    }\n\n    // Copy remaining elements of list2, if any\n    for (; j < size2; j++, k++) {\n        mergedList[k] = list2[j];\n    }\n}\n\nint main() {\n    int list1[] = {1, 3, 5, 7};\n    int list2[] = {2, 4, 6, 8};\n    int size1 = sizeof(list1) / sizeof(list1[0]);\n    int size2 = sizeof(list2) / sizeof(list2[0]);\n    int mergedList[size1 + size2];\n\n    mergeSortedLists(list1, size1, list2, size2, mergedList);\n\n    for (int i = 0; i < size1 + size2; i++) {\n        printf(\"%d \", mergedList[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a for loop that calculates the power of a number using repeated multiplication.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int base = 2; // Example base\n    int exponent = 5; // Example exponent\n    int result = 1;\n\n    for (int i = 0; i < exponent; i++) {\n        result *= base;\n    }\n\n    printf(\"Result: %d\\n\", result);\n    return 0;\n}\n```"
  },
  {
    "task": "Use a for loop to find the longest word in a list of words.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n#define MAX_WORDS 100\n#define MAX_LENGTH 100\n\nint main() {\n    char words[MAX_WORDS][MAX_LENGTH] = {\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"};\n    int num_words = 5;\n    int max_length = 0;\n    int longest_index = 0;\n\n    for (int i = 0; i < num_words; i++) {\n        int length = strlen(words[i]);\n        if (length > max_length) {\n            max_length = length;\n            longest_index = i;\n        }\n    }\n\n    printf(\"The longest word is: %s\\n\", words[longest_index]);\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a for loop that sorts a list of tuples based on the second element.",
    "code": "```c\n#include <stdio.h>\n\n#define SIZE 5\n\nvoid sortTuples(int arr[][2], int size) {\n    for (int i = 0; i < size - 1; i++) {\n        for (int j = 0; j < size - i - 1; j++) {\n            if (arr[j][1] > arr[j + 1][1]) {\n                int temp0 = arr[j][0];\n                int temp1 = arr[j][1];\n                arr[j][0] = arr[j + 1][0];\n                arr[j][1] = arr[j + 1][1];\n                arr[j + 1][0] = temp0;\n                arr[j + 1][1] = temp1;\n            }\n        }\n    }\n}\n\nint main() {\n    int tuples[SIZE][2] = {{1, 3}, {2, 1}, {3, 2}, {4, 5}, {5, 4}};\n    \n    sortTuples(tuples, SIZE);\n    \n    for (int i = 0; i < SIZE; i++) {\n        printf(\"(%d, %d) \", tuples[i][0], tuples[i][1]);\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Create a for loop that replicates each character in a string a given number of times.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nvoid replicate_characters(const char *input, int times) {\n    int length = strlen(input);\n    for (int i = 0; i < length; i++) {\n        for (int j = 0; j < times; j++) {\n            putchar(input[i]);\n        }\n    }\n}\n\nint main() {\n    const char *str = \"example\";\n    int times = 3;\n    replicate_characters(str, times);\n    return 0;\n}\n```"
  },
  {
    "task": "Construct a for loop that replaces spaces in a string with hyphens.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nvoid replaceSpacesWithHyphens(char *str) {\n    for (int i = 0; i < strlen(str); i++) {\n        if (str[i] == ' ') {\n            str[i] = '-';\n        }\n    }\n}\n\nint main() {\n    char str[] = \"Replace spaces in this string\";\n    replaceSpacesWithHyphens(str);\n    printf(\"%s\\n\", str);\n    return 0;\n}\n```"
  },
  {
    "task": "Design a for loop to find the intersection of two sets.",
    "code": "```c\n#include <stdio.h>\n\n#define SIZE 5\n\nvoid findIntersection(int set1[], int set2[], int size1, int size2) {\n    printf(\"Intersection: \");\n    for (int i = 0; i < size1; i++) {\n        for (int j = 0; j < size2; j++) {\n            if (set1[i] == set2[j]) {\n                printf(\"%d \", set1[i]);\n                break;\n            }\n        }\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    int set1[SIZE] = {1, 2, 3, 4, 5};\n    int set2[SIZE] = {3, 4, 5, 6, 7};\n\n    findIntersection(set1, set2, SIZE, SIZE);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a for loop that generates a list of prime numbers up to a given number.",
    "code": "```c\n#include <stdio.h>\n#include <stdbool.h>\n\nbool is_prime(int num) {\n    if (num <= 1) return false;\n    for (int i = 2; i * i <= num; i++) {\n        if (num % i == 0) return false;\n    }\n    return true;\n}\n\nint main() {\n    int limit;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &limit);\n\n    printf(\"Prime numbers up to %d are: \", limit);\n    for (int i = 2; i <= limit; i++) {\n        if (is_prime(i)) {\n            printf(\"%d \", i);\n        }\n    }\n    printf(\"\\n\");\n\n    return 0;\n}\n```"
  },
  {
    "task": "Use a for loop to implement a simple text-based progress bar.",
    "code": "```c\n#include <stdio.h>\n#include <unistd.h>\n\nint main() {\n    int total = 100; // Total progress\n    int progress;\n\n    printf(\"Progress: [\");\n    for (progress = 0; progress <= total; progress++) {\n        if (progress % 10 == 0) {\n            printf(\"#\");\n            fflush(stdout);\n            usleep(100000); // Sleep for 0.1 second\n        }\n    }\n    printf(\"]\\n\");\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a for loop that finds and prints all palindromic numbers between 10 and 200.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    for (int num = 10; num <= 200; num++) {\n        int reversed = 0, original = num, remainder;\n        while (original != 0) {\n            remainder = original % 10;\n            reversed = reversed * 10 + remainder;\n            original /= 10;\n        }\n        if (num == reversed) {\n            printf(\"%d\\n\", num);\n        }\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Create a for loop that multiplies corresponding elements of two lists and stores the result.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int list1[] = {1, 2, 3, 4, 5};\n    int list2[] = {6, 7, 8, 9, 10};\n    int result[5];\n    int size = sizeof(list1) / sizeof(list1[0]);\n    \n    for (int i = 0; i < size; i++) {\n        result[i] = list1[i] * list2[i];\n    }\n\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", result[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a for loop that finds the difference between the largest and smallest numbers in a list.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int numbers[] = {3, 5, 1, 9, 7};\n    int size = sizeof(numbers) / sizeof(numbers[0]);\n    int max = numbers[0];\n    int min = numbers[0];\n    \n    for (int i = 1; i < size; i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n    }\n    \n    int difference = max - min;\n    printf(\"Difference: %d\\n\", difference);\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Write a for loop that prints numbers from 1 to 100, replacing multiples of 5 with 'Buzz'.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    for (int i = 1; i <= 100; i++) {\n        if (i % 5 == 0) {\n            printf(\"Buzz\\n\");\n        } else {\n            printf(\"%d\\n\", i);\n        }\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Use a for loop to convert a list of integers into their binary representation.",
    "code": "```c\n#include <stdio.h>\n\nvoid printBinary(int n) {\n    for (int i = 31; i >= 0; i--) {\n        int k = n >> i;\n        if (k & 1)\n            printf(\"1\");\n        else\n            printf(\"0\");\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    int numbers[] = {5, 10, 15, 20};\n    int size = sizeof(numbers) / sizeof(numbers[0]);\n\n    for (int i = 0; i < size; i++) {\n        printBinary(numbers[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a for loop that fills a 2D array with consecutive numbers in a spiral pattern.",
    "code": "```c\n#include <stdio.h>\n\n#define N 4\n\nvoid fillSpiral(int arr[N][N]) {\n    int num = 1;\n    int top = 0, bottom = N - 1;\n    int left = 0, right = N - 1;\n\n    while (top <= bottom && left <= right) {\n        for (int i = left; i <= right; ++i) {\n            arr[top][i] = num++;\n        }\n        top++;\n        for (int i = top; i <= bottom; ++i) {\n            arr[i][right] = num++;\n        }\n        right--;\n        if (top <= bottom) {\n            for (int i = right; i >= left; --i) {\n                arr[bottom][i] = num++;\n            }\n            bottom--;\n        }\n        if (left <= right) {\n            for (int i = bottom; i >= top; --i) {\n                arr[i][left] = num++;\n            }\n            left++;\n        }\n    }\n}\n\nint main() {\n    int arr[N][N];\n    fillSpiral(arr);\n\n    for (int i = 0; i < N; i++) {\n        for (int j = 0; j < N; j++) {\n            printf(\"%2d \", arr[i][j]);\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Create a for loop that iterates over a list and removes duplicates.",
    "code": "```c\n#include <stdio.h>\n\nvoid removeDuplicates(int *arr, int size) {\n    int i, j, k;\n    for (i = 0; i < size; i++) {\n        for (j = i + 1; j < size; ) {\n            if (arr[i] == arr[j]) {\n                for (k = j; k < size - 1; k++) {\n                    arr[k] = arr[k + 1];\n                }\n                size--;\n            } else {\n                j++;\n            }\n        }\n    }\n    for (i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 2, 3, 4, 4, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    removeDuplicates(arr, size);\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a for loop to calculate the dot product of two vectors.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int vectorA[] = {1, 2, 3};\n    int vectorB[] = {4, 5, 6};\n    int length = sizeof(vectorA) / sizeof(vectorA[0]);\n    int dotProduct = 0;\n\n    for (int i = 0; i < length; i++) {\n        dotProduct += vectorA[i] * vectorB[i];\n    }\n\n    printf(\"Dot Product: %d\\n\", dotProduct);\n    return 0;\n}\n```"
  },
  {
    "task": "Write a for loop that prints a sequence of numbers in reverse order.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    for (int i = 10; i > 0; i--) {\n        printf(\"%d\\n\", i);\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a for loop that computes the greatest common divisor (GCD) of two numbers.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int a = 48; // Example number\n    int b = 18; // Example number\n    int gcd = 1;\n    int min = (a < b) ? a : b;\n\n    for (int i = 1; i <= min; i++) {\n        if (a % i == 0 && b % i == 0) {\n            gcd = i;\n        }\n    }\n\n    printf(\"GCD of %d and %d is %d\\n\", a, b, gcd);\n    return 0;\n}\n```"
  },
  {
    "task": "Construct a for loop that prints a square pattern of numbers with a given side length.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int side_length = 5; // Example side length, you can change it as needed\n    for (int i = 0; i < side_length; i++) {\n        for (int j = 0; j < side_length; j++) {\n            printf(\"%d \", j + 1);\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Create a for loop that shifts all elements of a list to the left by one position.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int n = sizeof(arr) / sizeof(arr[0]);\n\n    int temp = arr[0];\n    for (int i = 0; i < n - 1; i++) {\n        arr[i] = arr[i + 1];\n    }\n    arr[n - 1] = temp;\n\n    for (int i = 0; i < n; i++) {\n        printf(\"%d \", arr[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Use a for loop to print the first 20 triangular numbers.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int n, triangularNumber;\n    \n    for (n = 1; n <= 20; n++) {\n        triangularNumber = n * (n + 1) / 2;\n        printf(\"%d\\n\", triangularNumber);\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Write a for loop that finds the first repeating character in a string.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nchar findFirstRepeatingChar(const char *str) {\n    int length = strlen(str);\n    for (int i = 0; i < length; i++) {\n        for (int j = i + 1; j < length; j++) {\n            if (str[i] == str[j]) {\n                return str[i];\n            }\n        }\n    }\n    return '\\0'; // Return null character if no repeating character is found\n}\n\nint main() {\n    const char *str = \"example\";\n    char repeatingChar = findFirstRepeatingChar(str);\n    if (repeatingChar) {\n        printf(\"First repeating character: %c\\n\", repeatingChar);\n    } else {\n        printf(\"No repeating character found.\\n\");\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Design a for loop that transforms a list of temperatures from Celsius to Fahrenheit.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    double celsius[] = {0.0, 20.0, 37.0, 100.0};\n    double fahrenheit[4];\n    int length = sizeof(celsius) / sizeof(celsius[0]);\n\n    for (int i = 0; i < length; i++) {\n        fahrenheit[i] = celsius[i] * 9.0 / 5.0 + 32.0;\n    }\n\n    for (int i = 0; i < length; i++) {\n        printf(\"Celsius: %.1f, Fahrenheit: %.1f\\n\", celsius[i], fahrenheit[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a for loop to determine if a string is an isogram.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint isIsogram(const char *str) {\n    int letters[26] = {0};\n    for (int i = 0; str[i] != '\\0'; i++) {\n        if (isalpha(str[i])) {\n            int index = tolower(str[i]) - 'a';\n            if (letters[index] > 0) {\n                return 0; // Not an isogram\n            }\n            letters[index]++;\n        }\n    }\n    return 1; // Is an isogram\n}\n\nint main() {\n    const char *word = \"Dermatoglyphics\";\n    if (isIsogram(word)) {\n        printf(\"\\\"%s\\\" is an isogram.\\n\", word);\n    } else {\n        printf(\"\\\"%s\\\" is not an isogram.\\n\", word);\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Use a for loop to create a histogram from a list of integers.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int data[] = {3, 5, 2, 6, 4}; // Example list of integers\n    int n = sizeof(data) / sizeof(data[0]);\n    \n    for (int i = 0; i < n; i++) {\n        printf(\"%d: \", data[i]);\n        for (int j = 0; j < data[i]; j++) {\n            printf(\"*\");\n        }\n        printf(\"\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a for loop that prints the indexes of all occurrences of a particular element in a list.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int list[] = {1, 2, 3, 4, 2, 5, 2};\n    int target = 2;\n    int length = sizeof(list) / sizeof(list[0]);\n\n    for (int i = 0; i < length; i++) {\n        if (list[i] == target) {\n            printf(\"%d\\n\", i);\n        }\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a for loop that checks if a given string is a palindrome.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nint main() {\n    char str[] = \"racecar\";\n    int len = strlen(str);\n    int isPalindrome = 1;\n\n    for (int i = 0; i < len / 2; i++) {\n        if (str[i] != str[len - i - 1]) {\n            isPalindrome = 0;\n            break;\n        }\n    }\n\n    if (isPalindrome) {\n        printf(\"The string is a palindrome.\\n\");\n    } else {\n        printf(\"The string is not a palindrome.\\n\");\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a for loop to simulate the behavior of a simple finite state machine.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    // Define states\n    enum State { STATE_START, STATE_MIDDLE, STATE_END };\n    enum State currentState = STATE_START;\n\n    // Simulate state transitions\n    for (int i = 0; i < 10; i++) {\n        switch (currentState) {\n            case STATE_START:\n                printf(\"Current State: START\\n\");\n                currentState = STATE_MIDDLE;\n                break;\n            case STATE_MIDDLE:\n                printf(\"Current State: MIDDLE\\n\");\n                currentState = STATE_END;\n                break;\n            case STATE_END:\n                printf(\"Current State: END\\n\");\n                currentState = STATE_START;\n                break;\n        }\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Design a for loop that finds the sum of all odd numbers in a list.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int numbers[] = {1, 2, 3, 4, 5, 6, 7, 8, 9}; // Example list\n    int size = sizeof(numbers) / sizeof(numbers[0]);\n    int sum = 0;\n    \n    for (int i = 0; i < size; i++) {\n        if (numbers[i] % 2 != 0) {\n            sum += numbers[i];\n        }\n    }\n    \n    printf(\"Sum of odd numbers: %d\\n\", sum);\n    return 0;\n}\n```"
  },
  {
    "task": "Use a for loop to count how many words start with a vowel in a given sentence.",
    "code": "```c\n#include <stdio.h>\n#include <ctype.h>\n#include <string.h>\n\nint main() {\n    char sentence[] = \"An example sentence to illustrate the task\";\n    const char *vowels = \"AEIOUaeiou\";\n    int count = 0;\n    int inWord = 0;\n\n    for (int i = 0; i < strlen(sentence); i++) {\n        if (isspace(sentence[i])) {\n            inWord = 0;\n        } else if (!inWord) {\n            inWord = 1;\n            if (strchr(vowels, sentence[i]) != NULL) {\n                count++;\n            }\n        }\n    }\n\n    printf(\"Number of words starting with a vowel: %d\\n\", count);\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a for loop that sorts a list of strings by their length.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nvoid sortStringsByLength(char *arr[], int n) {\n    for (int i = 0; i < n - 1; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (strlen(arr[i]) > strlen(arr[j])) {\n                char *temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n}\n\nint main() {\n    char *strings[] = {\"apple\", \"banana\", \"kiwi\", \"blueberry\", \"cherry\"};\n    int n = sizeof(strings) / sizeof(strings[0]);\n\n    sortStringsByLength(strings, n);\n\n    for (int i = 0; i < n; i++) {\n        printf(\"%s\\n\", strings[i]);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a for loop that prints the factorial of numbers from 1 to 10.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    for (int i = 1; i <= 10; i++) {\n        unsigned long long factorial = 1;\n        for (int j = 1; j <= i; j++) {\n            factorial *= j;\n        }\n        printf(\"Factorial of %d is %llu\\n\", i, factorial);\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Create a for loop that replaces all instances of a substring in a string with another substring.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\nvoid replaceSubstring(char *str, const char *oldSub, const char *newSub) {\n    char buffer[1024];\n    char *pos;\n    int oldLen = strlen(oldSub);\n    int newLen = strlen(newSub);\n    int len;\n\n    buffer[0] = '\\0';\n    while ((pos = strstr(str, oldSub)) != NULL) {\n        len = pos - str;\n        strncat(buffer, str, len);\n        strcat(buffer, newSub);\n        str = pos + oldLen;\n    }\n    strcat(buffer, str);\n    strcpy(str, buffer);\n}\n\nint main() {\n    char str[1024] = \"This is a simple test. This test is simple.\";\n    const char *oldSub = \"simple\";\n    const char *newSub = \"complex\";\n\n    replaceSubstring(str, oldSub, newSub);\n    printf(\"%s\\n\", str);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a for loop that squares each element in a list of numbers.",
    "code": "```c\n#include <stdio.h>\n\nint main() {\n    int numbers[] = {1, 2, 3, 4, 5};\n    int size = sizeof(numbers) / sizeof(numbers[0]);\n    \n    for (int i = 0; i < size; i++) {\n        numbers[i] *= numbers[i];\n    }\n    \n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", numbers[i]);\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Use a for loop to reverse the order of elements in an array.",
    "code": "```c\n#include <stdio.h>\n\nvoid reverseArray(int arr[], int size) {\n    for (int i = 0; i < size / 2; i++) {\n        int temp = arr[i];\n        arr[i] = arr[size - i - 1];\n        arr[size - i - 1] = temp;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    \n    reverseArray(arr, size);\n    \n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Implement a for loop that tests if two strings are anagrams of each other.",
    "code": "```c\n#include <stdio.h>\n#include <string.h>\n\n#define CHAR_COUNT 256\n\nint areAnagrams(char str1[], char str2[]) {\n    int count1[CHAR_COUNT] = {0};\n    int count2[CHAR_COUNT] = {0};\n    int i;\n\n    if (strlen(str1) != strlen(str2))\n        return 0;\n\n    for (i = 0; str1[i] && str2[i]; i++) {\n        count1[(int)str1[i]]++;\n        count2[(int)str2[i]]++;\n    }\n\n    for (i = 0; i < CHAR_COUNT; i++) {\n        if (count1[i] != count2[i])\n            return 0;\n    }\n\n    return 1;\n}\n\nint main() {\n    char str1[] = \"listen\";\n    char str2[] = \"silent\";\n\n    if (areAnagrams(str1, str2))\n        printf(\"The strings are anagrams.\\n\");\n    else\n        printf(\"The strings are not anagrams.\\n\");\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a for loop to find and print all Armstrong numbers between 100 and 999.",
    "code": "```c\n#include <stdio.h>\n#include <math.h>\n\nint main() {\n    for (int num = 100; num <= 999; num++) {\n        int sum = 0;\n        int temp = num;\n        \n        while (temp != 0) {\n            int digit = temp % 10;\n            sum += pow(digit, 3);\n            temp /= 10;\n        }\n        \n        if (sum == num) {\n            printf(\"%d\\n\", num);\n        }\n    }\n    \n    return 0;\n}\n```"
  }
]