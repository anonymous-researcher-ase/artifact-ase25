[
  {
    "task": "Define a class representing a book with attributes for title, author, and number of pages, and a method to display the book's information.",
    "code": "```python\nclass Book:\n    def __init__(self, title, author, pages):\n        self.title = title\n        self.author = author\n        self.pages = pages\n    \n    def display_info(self):\n        print(f\"Title: {self.title}, Author: {self.author}, Pages: {self.pages}\")\n```"
  },
  {
    "task": "Create a class for a bank account that includes attributes for account number, balance, and a method to deposit funds.",
    "code": "```python\nclass BankAccount:\n    def __init__(self, account_number, balance=0):\n        self.account_number = account_number\n        self.balance = balance\n\n    def deposit(self, amount):\n        if amount > 0:\n            self.balance += amount\n```"
  },
  {
    "task": "Design a class for a vehicle with properties for make, model, and year, and a method to start the engine.",
    "code": "```python\nclass Vehicle:\n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year\n\n    def start_engine(self):\n        print(\"The engine is starting.\")\n```"
  },
  {
    "task": "Implement a class that models a student with attributes for name, ID, and grades, and a method to calculate the GPA.",
    "code": "```python\nclass Student:\n    def __init__(self, name, student_id, grades):\n        self.name = name\n        self.student_id = student_id\n        self.grades = grades\n\n    def calculate_gpa(self):\n        if not self.grades:\n            return 0.0\n        return sum(self.grades) / len(self.grades)\n```"
  },
  {
    "task": "Construct a class for a rectangle that has attributes for width and height, and methods to calculate area and perimeter.",
    "code": "```python\nclass Rectangle:\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n\n    def area(self):\n        return self.width * self.height\n\n    def perimeter(self):\n        return 2 * (self.width + self.height)\n```"
  },
  {
    "task": "Formulate a class for a smartphone with properties for brand, model, and battery life, and a method to make a call.",
    "code": "```python\nclass Smartphone:\n    def __init__(self, brand, model, battery_life):\n        self.brand = brand\n        self.model = model\n        self.battery_life = battery_life\n\n    def make_call(self, number):\n        print(f\"Calling {number} from {self.brand} {self.model}...\")\n```"
  },
  {
    "task": "Build a class representing a movie with attributes for title, director, and duration, and a method to play the movie.",
    "code": "```python\nclass Movie:\n    def __init__(self, title, director, duration):\n        self.title = title\n        self.director = director\n        self.duration = duration\n    \n    def play(self):\n        return f\"Playing '{self.title}' directed by {self.director}.\"\n```"
  },
  {
    "task": "Create a class for an employee with attributes for name, position, and salary, and a method to display their profile.",
    "code": "```python\nclass Employee:\n    def __init__(self, name, position, salary):\n        self.name = name\n        self.position = position\n        self.salary = salary\n\n    def display_profile(self):\n        return f\"Name: {self.name}, Position: {self.position}, Salary: {self.salary}\"\n```"
  },
  {
    "task": "Design a class for a library that includes attributes for name, location, and books available, and a method to add a new book.",
    "code": "```python\nclass Library:\n    def __init__(self, name, location, books_available):\n        self.name = name\n        self.location = location\n        self.books_available = books_available\n\n    def add_book(self, book):\n        self.books_available.append(book)\n```"
  },
  {
    "task": "Develop a class for a shopping cart with properties for items and total cost, and methods to add and remove items.",
    "code": "```python\nclass ShoppingCart:\n    def __init__(self):\n        self.items = []\n        self.total_cost = 0.0\n\n    def add_item(self, item, price):\n        self.items.append(item)\n        self.total_cost += price\n\n    def remove_item(self, item, price):\n        if item in self.items:\n            self.items.remove(item)\n            self.total_cost -= price\n```"
  },
  {
    "task": "Implement a class for a thermostat with attributes for current temperature and desired temperature, and a method to adjust the temperature.",
    "code": "```python\nclass Thermostat:\n    def __init__(self, current_temperature, desired_temperature):\n        self.current_temperature = current_temperature\n        self.desired_temperature = desired_temperature\n\n    def adjust_temperature(self):\n        if self.current_temperature < self.desired_temperature:\n            self.current_temperature += 1\n        elif self.current_temperature > self.desired_temperature:\n            self.current_temperature -= 1\n```"
  },
  {
    "task": "Formulate a class for a person with attributes for first name, last name, and age, and a method to return the full name.",
    "code": "```python\nclass Person:\n    def __init__(self, first_name, last_name, age):\n        self.first_name = first_name\n        self.last_name = last_name\n        self.age = age\n\n    def full_name(self):\n        return f\"{self.first_name} {self.last_name}\"\n```"
  },
  {
    "task": "Construct a class for a game character with properties for health, strength, and inventory, and a method to attack.",
    "code": "```python\nclass GameCharacter:\n    def __init__(self, health, strength, inventory=None):\n        if inventory is None:\n            inventory = []\n        self.health = health\n        self.strength = strength\n        self.inventory = inventory\n\n    def attack(self, target):\n        if isinstance(target, GameCharacter):\n            target.health -= self.strength\n```"
  },
  {
    "task": "Create a class for a calendar event with attributes for title, date, and location, and a method to reschedule the event.",
    "code": "```python\nclass CalendarEvent:\n    def __init__(self, title, date, location):\n        self.title = title\n        self.date = date\n        self.location = location\n\n    def reschedule(self, new_date):\n        self.date = new_date\n```"
  },
  {
    "task": "Design a class representing a song with properties for title, artist, and duration, and a method to play the song.",
    "code": "```python\nclass Song:\n    def __init__(self, title, artist, duration):\n        self.title = title\n        self.artist = artist\n        self.duration = duration\n\n    def play(self):\n        print(f\"Playing '{self.title}' by {self.artist}...\")\n```"
  },
  {
    "task": "Develop a class for an order in an e-commerce system with attributes for order ID, customer, and items, and a method to calculate total price.",
    "code": "```python\nclass Order:\n    def __init__(self, order_id, customer, items):\n        self.order_id = order_id\n        self.customer = customer\n        self.items = items\n    \n    def calculate_total_price(self):\n        return sum(item['price'] * item['quantity'] for item in self.items)\n\n# Example usage:\n# order = Order(order_id=1, customer='John Doe', items=[{'price': 10.0, 'quantity': 2}, {'price': 15.0, 'quantity': 3}])\n# total_price = order.calculate_total_price()\n```"
  },
  {
    "task": "Build a class for a social media post with attributes for content, author, and timestamp, and a method to like the post.",
    "code": "```python\nfrom datetime import datetime\n\nclass SocialMediaPost:\n    def __init__(self, content, author, timestamp=None):\n        self.content = content\n        self.author = author\n        self.timestamp = timestamp if timestamp else datetime.now()\n        self.likes = 0\n\n    def like_post(self):\n        self.likes += 1\n```"
  },
  {
    "task": "Create a class for a computer with properties for processor, RAM, and storage, and a method to display system specifications.",
    "code": "```python\nclass Computer:\n    def __init__(self, processor, ram, storage):\n        self.processor = processor\n        self.ram = ram\n        self.storage = storage\n\n    def display_specifications(self):\n        return f\"Processor: {self.processor}, RAM: {self.ram}, Storage: {self.storage}\"\n```"
  },
  {
    "task": "Implement a class for a restaurant menu item with attributes for name, price, and description, and a method to update the price.",
    "code": "```python\nclass MenuItem:\n    def __init__(self, name, price, description):\n        self.name = name\n        self.price = price\n        self.description = description\n\n    def update_price(self, new_price):\n        self.price = new_price\n```"
  },
  {
    "task": "Design a class for a package delivery with attributes for tracking number, destination, and status, and a method to update the status.",
    "code": "```python\nclass PackageDelivery:\n    def __init__(self, tracking_number, destination, status):\n        self.tracking_number = tracking_number\n        self.destination = destination\n        self.status = status\n\n    def update_status(self, new_status):\n        self.status = new_status\n```"
  },
  {
    "task": "Construct a class representing a pet with attributes for species, age, and name, and a method to display its details.",
    "code": "```python\nclass Pet:\n    def __init__(self, species, age, name):\n        self.species = species\n        self.age = age\n        self.name = name\n\n    def display_details(self):\n        print(f\"Species: {self.species}, Age: {self.age}, Name: {self.name}\")\n```"
  },
  {
    "task": "Formulate a class for a product in a store with properties for SKU, name, and price, and a method to apply a discount.",
    "code": "```python\nclass Product:\n    def __init__(self, sku, name, price):\n        self.sku = sku\n        self.name = name\n        self.price = price\n\n    def apply_discount(self, discount_percentage):\n        discount_amount = self.price * (discount_percentage / 100)\n        self.price -= discount_amount\n```"
  },
  {
    "task": "Develop a class for a university course with attributes for course code, title, and credits, and a method to enroll a student.",
    "code": "```python\nclass UniversityCourse:\n    def __init__(self, course_code, title, credits):\n        self.course_code = course_code\n        self.title = title\n        self.credits = credits\n        self.students_enrolled = []\n\n    def enroll_student(self, student_name):\n        self.students_enrolled.append(student_name)\n```"
  },
  {
    "task": "Create a class for a smart light bulb with attributes for color, brightness, and state (on/off), and a method to change the color.",
    "code": "```python\nclass SmartLightBulb:\n    def __init__(self, color: str, brightness: int, state: bool):\n        self.color = color\n        self.brightness = brightness\n        self.state = state\n\n    def change_color(self, new_color: str):\n        self.color = new_color\n```"
  },
  {
    "task": "Design a class for a blog post with properties for title, content, and date published, and a method to edit the content.",
    "code": "```python\nfrom datetime import datetime\n\nclass BlogPost:\n    def __init__(self, title: str, content: str, date_published: datetime):\n        self.title = title\n        self.content = content\n        self.date_published = date_published\n    \n    def edit_content(self, new_content: str):\n        self.content = new_content\n```"
  },
  {
    "task": "Build a class for a bank transaction with attributes for transaction ID, amount, and type, and a method to reverse the transaction.",
    "code": "```python\nclass BankTransaction:\n    def __init__(self, transaction_id, amount, transaction_type):\n        self.transaction_id = transaction_id\n        self.amount = amount\n        self.transaction_type = transaction_type\n\n    def reverse_transaction(self):\n        self.amount = -self.amount\n        self.transaction_type = 'Reversal' if self.transaction_type != 'Reversal' else 'Original'\n```"
  },
  {
    "task": "Implement a class for a city with properties for name, population, and area, and a method to calculate population density.",
    "code": "```python\nclass City:\n    def __init__(self, name, population, area):\n        self.name = name\n        self.population = population\n        self.area = area\n\n    def population_density(self):\n        return self.population / self.area\n```"
  },
  {
    "task": "Construct a class for a library member with attributes for member ID, name, and borrowed books, and a method to borrow a book.",
    "code": "```python\nclass LibraryMember:\n    def __init__(self, member_id, name):\n        self.member_id = member_id\n        self.name = name\n        self.borrowed_books = []\n\n    def borrow_book(self, book_title):\n        self.borrowed_books.append(book_title)\n```"
  },
  {
    "task": "Create a class for a flight reservation with attributes for flight number, passenger name, and seat number, and a method to change the seat.",
    "code": "```python\nclass FlightReservation:\n    def __init__(self, flight_number, passenger_name, seat_number):\n        self.flight_number = flight_number\n        self.passenger_name = passenger_name\n        self.seat_number = seat_number\n\n    def change_seat(self, new_seat_number):\n        self.seat_number = new_seat_number\n```"
  },
  {
    "task": "Develop a class for a digital photo album with properties for album name, photos, and a method to add a new photo.",
    "code": "```python\nclass DigitalPhotoAlbum:\n    def __init__(self, album_name):\n        self.album_name = album_name\n        self.photos = []\n    \n    def add_photo(self, photo):\n        self.photos.append(photo)\n```"
  },
  {
    "task": "Design a class for a task in a to-do list with attributes for description, deadline, and status, and a method to mark it as complete.",
    "code": "```python\nclass Task:\n    def __init__(self, description, deadline, status=False):\n        self.description = description\n        self.deadline = deadline\n        self.status = status\n\n    def mark_as_complete(self):\n        self.status = True\n```"
  },
  {
    "task": "Formulate a class for a conference speaker with attributes for name, topic, and time slot, and a method to update the time slot.",
    "code": "```python\nclass ConferenceSpeaker:\n    def __init__(self, name, topic, time_slot):\n        self.name = name\n        self.topic = topic\n        self.time_slot = time_slot\n\n    def update_time_slot(self, new_time_slot):\n        self.time_slot = new_time_slot\n```"
  },
  {
    "task": "Construct a class for a real estate property with attributes for address, price, and square footage, and a method to change the price.",
    "code": "```python\nclass RealEstateProperty:\n    def __init__(self, address, price, square_footage):\n        self.address = address\n        self.price = price\n        self.square_footage = square_footage\n\n    def change_price(self, new_price):\n        self.price = new_price\n```"
  },
  {
    "task": "Create a class for a weather forecast with properties for temperature, humidity, and condition, and a method to update the forecast.",
    "code": "```python\nclass WeatherForecast:\n    def __init__(self, temperature, humidity, condition):\n        self.temperature = temperature\n        self.humidity = humidity\n        self.condition = condition\n\n    def update_forecast(self, temperature, humidity, condition):\n        self.temperature = temperature\n        self.humidity = humidity\n        self.condition = condition\n```"
  },
  {
    "task": "Build a class for a musical instrument with attributes for type, brand, and model, and a method to play a note.",
    "code": "```python\nclass MusicalInstrument:\n    def __init__(self, instrument_type, brand, model):\n        self.instrument_type = instrument_type\n        self.brand = brand\n        self.model = model\n\n    def play_note(self, note):\n        print(f\"Playing {note} on {self.instrument_type} ({self.brand} {self.model})\")\n\n# Example usage:\n# instrument = MusicalInstrument(\"Guitar\", \"Fender\", \"Stratocaster\")\n# instrument.play_note(\"C\")\n```"
  },
  {
    "task": "Design a class for a sports team with attributes for team name, players, and coach, and a method to add a new player.",
    "code": "```python\nclass SportsTeam:\n    def __init__(self, team_name, players, coach):\n        self.team_name = team_name\n        self.players = players\n        self.coach = coach\n\n    def add_player(self, player):\n        self.players.append(player)\n```"
  },
  {
    "task": "Implement a class for a podcast episode with attributes for title, duration, and host, and a method to play the episode.",
    "code": "```python\nclass PodcastEpisode:\n    def __init__(self, title, duration, host):\n        self.title = title\n        self.duration = duration\n        self.host = host\n\n    def play(self):\n        print(f\"Playing {self.title} hosted by {self.host}. Duration: {self.duration} minutes.\")\n```"
  },
  {
    "task": "Develop a class for a space mission with properties for mission name, crew, and launch date, and a method to launch the mission.",
    "code": "```python\nclass SpaceMission:\n    def __init__(self, mission_name, crew, launch_date):\n        self.mission_name = mission_name\n        self.crew = crew\n        self.launch_date = launch_date\n\n    def launch(self):\n        print(f\"Launching mission {self.mission_name} with crew {self.crew} on {self.launch_date}.\")\n```"
  },
  {
    "task": "Create a class for a virtual assistant with attributes for name, language, and skills, and a method to add a new skill.",
    "code": "```python\nclass VirtualAssistant:\n    def __init__(self, name, language, skills=None):\n        self.name = name\n        self.language = language\n        self.skills = skills if skills is not None else []\n    \n    def add_skill(self, skill):\n        self.skills.append(skill)\n```"
  },
  {
    "task": "Formulate a class for a news article with attributes for headline, content, and author, and a method to publish the article.",
    "code": "```python\nclass NewsArticle:\n    def __init__(self, headline, content, author):\n        self.headline = headline\n        self.content = content\n        self.author = author\n\n    def publish(self):\n        print(f\"Headline: {self.headline}\\nContent: {self.content}\\nAuthor: {self.author}\")\n```"
  },
  {
    "task": "Construct a class for a hiking trail with attributes for trail name, length, and difficulty, and a method to update the difficulty.",
    "code": "```python\nclass HikingTrail:\n    def __init__(self, trail_name, length, difficulty):\n        self.trail_name = trail_name\n        self.length = length\n        self.difficulty = difficulty\n\n    def update_difficulty(self, new_difficulty):\n        self.difficulty = new_difficulty\n```"
  },
  {
    "task": "Design a class for a subscription service with properties for service name, subscriber count, and subscription fee, and a method to update the fee.",
    "code": "```python\nclass SubscriptionService:\n    def __init__(self, service_name, subscriber_count, subscription_fee):\n        self.service_name = service_name\n        self.subscriber_count = subscriber_count\n        self.subscription_fee = subscription_fee\n\n    def update_fee(self, new_fee):\n        self.subscription_fee = new_fee\n```"
  },
  {
    "task": "Build a class for a digital wallet with attributes for balance, transaction history, and a method to add funds.",
    "code": "```python\nclass DigitalWallet:\n    def __init__(self):\n        self.balance = 0.0\n        self.transaction_history = []\n\n    def add_funds(self, amount):\n        if amount > 0:\n            self.balance += amount\n            self.transaction_history.append(f\"Added {amount}\")\n```"
  },
  {
    "task": "Implement a class for a cooking recipe with attributes for name, ingredients, and instructions, and a method to update the instructions.",
    "code": "```python\nclass Recipe:\n    def __init__(self, name, ingredients, instructions):\n        self.name = name\n        self.ingredients = ingredients\n        self.instructions = instructions\n\n    def update_instructions(self, new_instructions):\n        self.instructions = new_instructions\n```"
  },
  {
    "task": "Develop a class for a time zone with properties for zone name, offset, and a method to convert time from another time zone.",
    "code": "```python\nclass TimeZone:\n    def __init__(self, zone_name, offset):\n        self.zone_name = zone_name\n        self.offset = offset\n\n    def convert_time(self, other_zone, time_in_hours):\n        return time_in_hours + (self.offset - other_zone.offset)\n\n# Example usage:\n# tz1 = TimeZone(\"UTC\", 0)\n# tz2 = TimeZone(\"EST\", -5)\n# converted_time = tz1.convert_time(tz2, 10)  # Convert 10 AM EST to UTC\n```"
  },
  {
    "task": "Create a class for a camera with attributes for resolution, brand, and model, and a method to take a picture.",
    "code": "```python\nclass Camera:\n    def __init__(self, resolution, brand, model):\n        self.resolution = resolution\n        self.brand = brand\n        self.model = model\n\n    def take_picture(self):\n        return f\"Picture taken with {self.brand} {self.model} at {self.resolution} resolution.\"\n```"
  },
  {
    "task": "Design a class for a gaming console with properties for brand, model, and storage capacity, and a method to install a game.",
    "code": "```python\nclass GamingConsole:\n    def __init__(self, brand, model, storage_capacity):\n        self.brand = brand\n        self.model = model\n        self.storage_capacity = storage_capacity\n        self.installed_games = []\n\n    def install_game(self, game_name):\n        self.installed_games.append(game_name)\n```"
  },
  {
    "task": "Formulate a class for a museum exhibit with attributes for exhibit name, artist, and year, and a method to update the year.",
    "code": "```python\nclass MuseumExhibit:\n    def __init__(self, exhibit_name, artist, year):\n        self.exhibit_name = exhibit_name\n        self.artist = artist\n        self.year = year\n\n    def update_year(self, new_year):\n        self.year = new_year\n```"
  },
  {
    "task": "Construct a class for a fitness tracker with attributes for steps, calories burned, and heart rate, and a method to add steps.",
    "code": "```python\nclass FitnessTracker:\n    def __init__(self, steps=0, calories_burned=0, heart_rate=0):\n        self.steps = steps\n        self.calories_burned = calories_burned\n        self.heart_rate = heart_rate\n\n    def add_steps(self, additional_steps):\n        self.steps += additional_steps\n```"
  },
  {
    "task": "Build a class for an aquarium with properties for tank size, fish species, and water temperature, and a method to add a new fish.",
    "code": "```python\nclass Aquarium:\n    def __init__(self, tank_size, fish_species, water_temperature):\n        self.tank_size = tank_size\n        self.fish_species = fish_species\n        self.water_temperature = water_temperature\n\n    def add_fish(self, new_fish):\n        self.fish_species.append(new_fish)\n```"
  },
  {
    "task": "Create a class for a chat message with attributes for sender, content, and timestamp, and a method to edit the content.",
    "code": "```python\nfrom datetime import datetime\n\nclass ChatMessage:\n    def __init__(self, sender: str, content: str, timestamp: datetime):\n        self.sender = sender\n        self.content = content\n        self.timestamp = timestamp\n\n    def edit_content(self, new_content: str):\n        self.content = new_content\n```"
  },
  {
    "task": "Design a class for a vending machine with properties for items available, prices, and a method to dispense an item.",
    "code": "```python\nclass VendingMachine:\n    def __init__(self, items, prices):\n        self.items = items\n        self.prices = prices\n\n    def dispense_item(self, item_name):\n        if item_name in self.items:\n            index = self.items.index(item_name)\n            price = self.prices[index]\n            return f\"Dispensing {item_name} for {price}\"\n        else:\n            return \"Item not available\"\n```"
  },
  {
    "task": "Implement a class for a digital clock with attributes for current time, time zone, and a method to set an alarm.",
    "code": "```python\nclass DigitalClock:\n    def __init__(self, current_time, time_zone):\n        self.current_time = current_time\n        self.time_zone = time_zone\n        self.alarm_time = None\n\n    def set_alarm(self, alarm_time):\n        self.alarm_time = alarm_time\n```"
  },
  {
    "task": "Develop a class for a historical figure with attributes for name, birthdate, and achievements, and a method to add an achievement.",
    "code": "```python\nclass HistoricalFigure:\n    def __init__(self, name, birthdate, achievements=None):\n        self.name = name\n        self.birthdate = birthdate\n        self.achievements = achievements if achievements is not None else []\n    \n    def add_achievement(self, achievement):\n        self.achievements.append(achievement)\n```"
  },
  {
    "task": "Formulate a class for a travel itinerary with attributes for destinations, travel dates, and activities, and a method to add a destination.",
    "code": "```python\nclass TravelItinerary:\n    def __init__(self):\n        self.destinations = []\n        self.travel_dates = {}\n        self.activities = {}\n\n    def add_destination(self, destination, travel_date=None, activities=None):\n        if destination not in self.destinations:\n            self.destinations.append(destination)\n            if travel_date:\n                self.travel_dates[destination] = travel_date\n            if activities:\n                self.activities[destination] = activities\n```"
  },
  {
    "task": "Construct a class for a fashion brand with properties for brand name, founder, and product lines, and a method to launch a new product line.",
    "code": "```python\nclass FashionBrand:\n    def __init__(self, brand_name, founder, product_lines=None):\n        self.brand_name = brand_name\n        self.founder = founder\n        self.product_lines = product_lines if product_lines is not None else []\n\n    def launch_new_product_line(self, product_line):\n        self.product_lines.append(product_line)\n```"
  },
  {
    "task": "Create a class for a video game with attributes for title, genre, and rating, and a method to update the rating.",
    "code": "```python\nclass VideoGame:\n    def __init__(self, title, genre, rating):\n        self.title = title\n        self.genre = genre\n        self.rating = rating\n\n    def update_rating(self, new_rating):\n        self.rating = new_rating\n```"
  },
  {
    "task": "Build a class for a scientific experiment with attributes for experiment name, hypothesis, and results, and a method to record results.",
    "code": "```python\nclass ScientificExperiment:\n    def __init__(self, experiment_name, hypothesis):\n        self.experiment_name = experiment_name\n        self.hypothesis = hypothesis\n        self.results = None\n\n    def record_results(self, results):\n        self.results = results\n```"
  },
  {
    "task": "Design a class for a gourmet dish with properties for dish name, ingredients, and cooking time, and a method to change cooking time.",
    "code": "```python\nclass GourmetDish:\n    def __init__(self, dish_name, ingredients, cooking_time):\n        self.dish_name = dish_name\n        self.ingredients = ingredients\n        self.cooking_time = cooking_time\n\n    def change_cooking_time(self, new_cooking_time):\n        self.cooking_time = new_cooking_time\n```"
  },
  {
    "task": "Implement a class for a political office with attributes for office title, holder, and term length, and a method to change the holder.",
    "code": "```python\nclass PoliticalOffice:\n    def __init__(self, title, holder, term_length):\n        self.title = title\n        self.holder = holder\n        self.term_length = term_length\n    \n    def change_holder(self, new_holder):\n        self.holder = new_holder\n```"
  },
  {
    "task": "Develop a class for an astronomical object with properties for name, type, and distance from Earth, and a method to update the distance.",
    "code": "```python\nclass AstronomicalObject:\n    def __init__(self, name, obj_type, distance_from_earth):\n        self.name = name\n        self.obj_type = obj_type\n        self.distance_from_earth = distance_from_earth\n\n    def update_distance(self, new_distance):\n        self.distance_from_earth = new_distance\n```"
  },
  {
    "task": "Formulate a class for a public transportation route with attributes for route number, stops, and schedule, and a method to add a stop.",
    "code": "```python\nclass PublicTransportRoute:\n    def __init__(self, route_number, stops=None, schedule=None):\n        self.route_number = route_number\n        self.stops = stops if stops is not None else []\n        self.schedule = schedule if schedule is not None else {}\n\n    def add_stop(self, stop):\n        self.stops.append(stop)\n```"
  },
  {
    "task": "Construct a class for a board game with properties for game name, player count, and rules, and a method to change the rules.",
    "code": "```python\nclass BoardGame:\n    def __init__(self, name, player_count, rules):\n        self.name = name\n        self.player_count = player_count\n        self.rules = rules\n\n    def change_rules(self, new_rules):\n        self.rules = new_rules\n```"
  },
  {
    "task": "Create a class for a customer loyalty program with attributes for program name, points, and rewards, and a method to redeem points.",
    "code": "```python\nclass CustomerLoyaltyProgram:\n    def __init__(self, program_name, points=0, rewards=None):\n        if rewards is None:\n            rewards = []\n        self.program_name = program_name\n        self.points = points\n        self.rewards = rewards\n\n    def redeem_points(self, points_to_redeem):\n        if points_to_redeem <= self.points:\n            self.points -= points_to_redeem\n            return True\n        return False\n```"
  },
  {
    "task": "Design a class for an art gallery with properties for gallery name, location, and exhibitions, and a method to add a new exhibition.",
    "code": "```python\nclass ArtGallery:\n    def __init__(self, name, location):\n        self.name = name\n        self.location = location\n        self.exhibitions = []\n\n    def add_exhibition(self, exhibition):\n        self.exhibitions.append(exhibition)\n```"
  },
  {
    "task": "Build a class for a personal blog with attributes for blog name, posts, and a method to add a new post.",
    "code": "```python\nclass PersonalBlog:\n    def __init__(self, blog_name):\n        self.blog_name = blog_name\n        self.posts = []\n\n    def add_post(self, post):\n        self.posts.append(post)\n```"
  },
  {
    "task": "Implement a class for a mobile application with properties for app name, version, and developer, and a method to update the version.",
    "code": "```python\nclass MobileApp:\n    def __init__(self, app_name, version, developer):\n        self.app_name = app_name\n        self.version = version\n        self.developer = developer\n\n    def update_version(self, new_version):\n        self.version = new_version\n```"
  },
  {
    "task": "Develop a class for a language translator with attributes for source language, target language, and translation method, and a method to translate a text.",
    "code": "```python\nclass LanguageTranslator:\n    def __init__(self, source_language, target_language, translation_method):\n        self.source_language = source_language\n        self.target_language = target_language\n        self.translation_method = translation_method\n\n    def translate(self, text):\n        # Placeholder for translation logic\n        return f\"Translating '{text}' from {self.source_language} to {self.target_language} using {self.translation_method}\"\n```"
  },
  {
    "task": "Formulate a class for a culinary school with properties for school name, courses offered, and a method to add a new course.",
    "code": "```python\nclass CulinarySchool:\n    def __init__(self, school_name):\n        self.school_name = school_name\n        self.courses_offered = []\n\n    def add_course(self, course_name):\n        self.courses_offered.append(course_name)\n```"
  },
  {
    "task": "Construct a class for a musical band with attributes for band name, members, and genre, and a method to add a new member.",
    "code": "```python\nclass MusicalBand:\n    def __init__(self, band_name, members, genre):\n        self.band_name = band_name\n        self.members = members\n        self.genre = genre\n\n    def add_member(self, new_member):\n        self.members.append(new_member)\n```"
  },
  {
    "task": "Create a class for a television series with properties for series title, episodes, and network, and a method to add a new episode.",
    "code": "```python\nclass TelevisionSeries:\n    def __init__(self, title, episodes, network):\n        self.title = title\n        self.episodes = episodes\n        self.network = network\n\n    def add_episode(self, episode):\n        self.episodes.append(episode)\n```"
  },
  {
    "task": "Design a class for a wildlife reserve with attributes for reserve name, species protected, and area size, and a method to expand the area.",
    "code": "```python\nclass WildlifeReserve:\n    def __init__(self, reserve_name, species_protected, area_size):\n        self.reserve_name = reserve_name\n        self.species_protected = species_protected\n        self.area_size = area_size\n\n    def expand_area(self, additional_size):\n        self.area_size += additional_size\n```"
  },
  {
    "task": "Build a class for a luxury car with properties for brand, model, and price, and a method to update the price.",
    "code": "```python\nclass LuxuryCar:\n    def __init__(self, brand, model, price):\n        self.brand = brand\n        self.model = model\n        self.price = price\n\n    def update_price(self, new_price):\n        self.price = new_price\n```"
  },
  {
    "task": "Implement a class for a scientific journal with attributes for journal name, articles, and impact factor, and a method to add a new article.",
    "code": "```python\nclass ScientificJournal:\n    def __init__(self, journal_name, impact_factor):\n        self.journal_name = journal_name\n        self.impact_factor = impact_factor\n        self.articles = []\n\n    def add_article(self, article):\n        self.articles.append(article)\n```"
  },
  {
    "task": "Develop a class for a historical monument with properties for monument name, location, and year established, and a method to update the location.",
    "code": "```python\nclass HistoricalMonument:\n    def __init__(self, name, location, year_established):\n        self.name = name\n        self.location = location\n        self.year_established = year_established\n\n    def update_location(self, new_location):\n        self.location = new_location\n```"
  },
  {
    "task": "Formulate a class for an educational course with attributes for course title, instructor, and syllabus, and a method to update the syllabus.",
    "code": "```python\nclass Course:\n    def __init__(self, title, instructor, syllabus):\n        self.title = title\n        self.instructor = instructor\n        self.syllabus = syllabus\n    \n    def update_syllabus(self, new_syllabus):\n        self.syllabus = new_syllabus\n```"
  },
  {
    "task": "Construct a class for a city park with properties for park name, facilities, and opening hours, and a method to add a new facility.",
    "code": "```python\nclass CityPark:\n    def __init__(self, park_name, facilities, opening_hours):\n        self.park_name = park_name\n        self.facilities = facilities\n        self.opening_hours = opening_hours\n\n    def add_facility(self, facility):\n        self.facilities.append(facility)\n```"
  },
  {
    "task": "Create a class for a fitness class with attributes for class name, instructor, and schedule, and a method to update the schedule.",
    "code": "```python\nclass FitnessClass:\n    def __init__(self, class_name, instructor, schedule):\n        self.class_name = class_name\n        self.instructor = instructor\n        self.schedule = schedule\n\n    def update_schedule(self, new_schedule):\n        self.schedule = new_schedule\n```"
  },
  {
    "task": "Design a class for a virtual reality game with properties for game name, platform, and VR compatibility, and a method to change the platform.",
    "code": "```python\nclass VirtualRealityGame:\n    def __init__(self, game_name, platform, vr_compatibility):\n        self.game_name = game_name\n        self.platform = platform\n        self.vr_compatibility = vr_compatibility\n\n    def change_platform(self, new_platform):\n        self.platform = new_platform\n```"
  },
  {
    "task": "Build a class for a mountain range with attributes for range name, highest peak, and countries covered, and a method to add a new peak.",
    "code": "```python\nclass MountainRange:\n    def __init__(self, range_name, highest_peak, countries_covered):\n        self.range_name = range_name\n        self.highest_peak = highest_peak\n        self.countries_covered = countries_covered\n        self.peaks = []\n\n    def add_new_peak(self, peak_name):\n        self.peaks.append(peak_name)\n```"
  },
  {
    "task": "Implement a class for a documentary film with properties for title, director, and subject, and a method to update the subject.",
    "code": "```python\nclass DocumentaryFilm:\n    def __init__(self, title, director, subject):\n        self.title = title\n        self.director = director\n        self.subject = subject\n\n    def update_subject(self, new_subject):\n        self.subject = new_subject\n```"
  },
  {
    "task": "Develop a class for a classical music composition with attributes for composition name, composer, and duration, and a method to change the duration.",
    "code": "```python\nclass ClassicalComposition:\n    def __init__(self, name, composer, duration):\n        self.name = name\n        self.composer = composer\n        self.duration = duration\n\n    def change_duration(self, new_duration):\n        self.duration = new_duration\n```"
  },
  {
    "task": "Formulate a class for a public library with properties for library name, books available, and membership, and a method to add a new book.",
    "code": "```python\nclass PublicLibrary:\n    def __init__(self, library_name, books_available, membership):\n        self.library_name = library_name\n        self.books_available = books_available\n        self.membership = membership\n\n    def add_new_book(self, book_title):\n        self.books_available.append(book_title)\n```"
  },
  {
    "task": "Construct a class for a tech startup with attributes for startup name, founder, and funding, and a method to raise additional funding.",
    "code": "```python\nclass TechStartup:\n    def __init__(self, name, founder, funding):\n        self.name = name\n        self.founder = founder\n        self.funding = funding\n\n    def raise_funding(self, amount):\n        self.funding += amount\n```"
  }
]