[
  {
    "task": "Write a program that prints numbers from 1 to 10 using a for loop.",
    "code": "```python\nfor i in range(1, 11):\n    print(i)\n```"
  },
  {
    "task": "Create a loop that iterates over an array of names and prints each name.",
    "code": "```python\nnames = [\"Alice\", \"Bob\", \"Charlie\", \"David\"]\n\nfor name in names:\n    print(name)\n```"
  },
  {
    "task": "Design a for loop to calculate the factorial of a given number.",
    "code": "```python\ndef factorial(n):\n    result = 1\n    for i in range(2, n + 1):\n        result *= i\n    return result\n\n# Example usage:\nnumber = 5\nprint(f\"The factorial of {number} is {factorial(number)}.\")\n```"
  },
  {
    "task": "Implement a program that uses a for loop to sum all even numbers between 1 and 100.",
    "code": "```python\ntotal_sum = 0\nfor number in range(2, 101, 2):\n    total_sum += number\nprint(total_sum)\n```"
  },
  {
    "task": "Use a for loop to generate and print the Fibonacci sequence up to 20 terms.",
    "code": "```python\na, b = 0, 1\nfor _ in range(20):\n    print(a)\n    a, b = b, a + b\n```"
  },
  {
    "task": "Construct a for loop that prints the multiplication table for a given number.",
    "code": "```python\nnumber = 5\nfor i in range(1, 11):\n    print(f\"{number} x {i} = {number * i}\")\n```"
  },
  {
    "task": "Write code to iterate through a list of student grades and print only those above a certain threshold.",
    "code": "```python\ngrades = [85, 92, 78, 90, 67, 88, 79]\nthreshold = 80\n\nfor grade in grades:\n    if grade > threshold:\n        print(grade)\n```"
  },
  {
    "task": "Create a for loop that appends the square of numbers 1 to 10 to a list.",
    "code": "```python\nsquares = []\nfor number in range(1, 11):\n    squares.append(number ** 2)\n```"
  },
  {
    "task": "Develop a for loop that reverses a given string.",
    "code": "```python\ndef reverse_string(s):\n    reversed_str = ''\n    for char in s:\n        reversed_str = char + reversed_str\n    return reversed_str\n\n# Example usage\nstring_to_reverse = \"example\"\nreversed_string = reverse_string(string_to_reverse)\nprint(reversed_string)\n```"
  },
  {
    "task": "Build a program that uses a for loop to print all elements in a 2D matrix.",
    "code": "```python\nmatrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\n\nfor row in matrix:\n    for element in row:\n        print(element)\n```"
  },
  {
    "task": "Use a for loop to find the maximum value in an array of integers.",
    "code": "```python\ndef find_maximum(arr):\n    if not arr:\n        return None\n    max_value = arr[0]\n    for num in arr:\n        if num > max_value:\n            max_value = num\n    return max_value\n\n# Example usage\narray = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]\nmaximum_value = find_maximum(array)\nprint(maximum_value)\n```"
  },
  {
    "task": "Write a program that uses a for loop to print the characters of a string, one per line.",
    "code": "```python\nstring = \"example\"\nfor char in string:\n    print(char)\n```"
  },
  {
    "task": "Create a for loop that counts the number of vowels in a given sentence.",
    "code": "```python\nsentence = \"This is a sample sentence to count vowels.\"\nvowels = \"aeiouAEIOU\"\ncount = 0\n\nfor char in sentence:\n    if char in vowels:\n        count += 1\n\nprint(\"Number of vowels:\", count)\n```"
  },
  {
    "task": "Implement a for loop to check if a number is prime by testing divisibility.",
    "code": "```python\ndef is_prime(number):\n    if number <= 1:\n        return False\n    for i in range(2, int(number ** 0.5) + 1):\n        if number % i == 0:\n            return False\n    return True\n```"
  },
  {
    "task": "Design a for loop that prints a pyramid pattern of asterisks with a given height.",
    "code": "```python\ndef print_pyramid(height):\n    for i in range(1, height + 1):\n        print(' ' * (height - i) + '*' * (2 * i - 1))\n\n# Example usage\nprint_pyramid(5)\n```"
  },
  {
    "task": "Write a program that uses a for loop to calculate the sum of digits of a number.",
    "code": "```python\nnumber = input(\"Enter a number: \")\nsum_of_digits = 0\nfor digit in number:\n    sum_of_digits += int(digit)\nprint(\"Sum of digits:\", sum_of_digits)\n```"
  },
  {
    "task": "Construct a for loop to flatten a list of lists into a single list.",
    "code": "```python\nnested_list = [[1, 2, 3], [4, 5], [6, 7, 8]]\nflattened_list = []\n\nfor sublist in nested_list:\n    for item in sublist:\n        flattened_list.append(item)\n\nprint(flattened_list)\n```"
  },
  {
    "task": "Use a for loop to generate a list of random numbers and print them.",
    "code": "```python\nimport random\n\nrandom_numbers = []\nfor _ in range(10):  # Specify the number of random numbers you want to generate\n    random_numbers.append(random.randint(0, 100))  # Specify the range of the random numbers\nprint(random_numbers)\n```"
  },
  {
    "task": "Create a for loop that iterates through a dictionary and prints its keys and values.",
    "code": "```python\nmy_dict = {'a': 1, 'b': 2, 'c': 3}\n\nfor key, value in my_dict.items():\n    print(f\"Key: {key}, Value: {value}\")\n```"
  },
  {
    "task": "Develop a for loop that counts down from 10 to 1 and prints each number.",
    "code": "```python\nfor i in range(10, 0, -1):\n    print(i)\n```"
  },
  {
    "task": "Write code to multiply each element in an array by 2 using a for loop.",
    "code": "```python\narray = [1, 2, 3, 4, 5]\nfor i in range(len(array)):\n    array[i] *= 2\n```"
  },
  {
    "task": "Create a for loop that calculates the average of numbers in a list.",
    "code": "```python\nnumbers = [10, 20, 30, 40, 50]\ntotal = 0\nfor number in numbers:\n    total += number\naverage = total / len(numbers)\nprint(average)\n```"
  },
  {
    "task": "Implement a for loop to find duplicate elements in an array.",
    "code": "```python\ndef find_duplicates(arr):\n    seen = set()\n    duplicates = set()\n    for elem in arr:\n        if elem in seen:\n            duplicates.add(elem)\n        else:\n            seen.add(elem)\n    return list(duplicates)\n\n# Example usage\narray = [1, 2, 3, 2, 4, 5, 6, 3, 7, 8, 9, 1]\nduplicates = find_duplicates(array)\nprint(duplicates)\n```"
  },
  {
    "task": "Design a for loop that removes all occurrences of a specific element from a list.",
    "code": "```python\ndef remove_element(lst, element_to_remove):\n    return [item for item in lst if item != element_to_remove]\n\n# Example usage:\n# my_list = [1, 2, 3, 4, 2, 5]\n# new_list = remove_element(my_list, 2)\n# print(new_list)  # Output: [1, 3, 4, 5]\n```"
  },
  {
    "task": "Use a for loop to simulate rolling a dice 100 times and count the occurrences of each face.",
    "code": "```python\nimport random\n\ndice_counts = [0] * 6\n\nfor _ in range(100):\n    roll = random.randint(1, 6)\n    dice_counts[roll - 1] += 1\n\nprint(dice_counts)\n```"
  },
  {
    "task": "Write a for loop that prints all the prime numbers between 1 and 50.",
    "code": "```python\ndef is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\nfor number in range(1, 51):\n    if is_prime(number):\n        print(number)\n```"
  },
  {
    "task": "Develop a for loop that extracts all the uppercase letters from a string.",
    "code": "```python\ndef extract_uppercase_letters(input_string):\n    uppercase_letters = ''\n    for char in input_string:\n        if char.isupper():\n            uppercase_letters += char\n    return uppercase_letters\n\n# Example usage\nresult = extract_uppercase_letters(\"Hello World! This is a Test.\")\nprint(result)\n```"
  },
  {
    "task": "Create a for loop that checks if a list is sorted in ascending order.",
    "code": "```python\ndef is_sorted(lst):\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True\n```"
  },
  {
    "task": "Implement a for loop to generate a list of the first 10 square numbers.",
    "code": "```python\nsquares = [i * i for i in range(1, 11)]\n```"
  },
  {
    "task": "Write code to print all the elements of a list that are greater than a given number using a for loop.",
    "code": "```python\nnumbers = [10, 15, 20, 25, 30]\nthreshold = 18\n\nfor num in numbers:\n    if num > threshold:\n        print(num)\n```"
  },
  {
    "task": "Construct a for loop that finds the smallest number in an array.",
    "code": "```python\nnumbers = [5, 3, 9, 1, 6]\nsmallest = numbers[0]\nfor number in numbers:\n    if number < smallest:\n        smallest = number\nprint(smallest)\n```"
  },
  {
    "task": "Develop a for loop that prints the first N lines of Pascal's Triangle.",
    "code": "```python\ndef print_pascals_triangle(n):\n    for line in range(n):\n        num = 1\n        for i in range(line + 1):\n            print(num, end=' ')\n            num = num * (line - i) // (i + 1)\n        print()\n\n# Example usage:\nN = 5\nprint_pascals_triangle(N)\n```"
  },
  {
    "task": "Create a for loop that calculates the product of all elements in a list.",
    "code": "```python\nnumbers = [1, 2, 3, 4, 5]\nproduct = 1\nfor number in numbers:\n    product *= number\n```"
  },
  {
    "task": "Use a for loop to print numbers from 1 to 100, but replace multiples of 3 with 'Fizz'.",
    "code": "```python\nfor i in range(1, 101):\n    if i % 3 == 0:\n        print(\"Fizz\")\n    else:\n        print(i)\n```"
  },
  {
    "task": "Write a for loop that iterates over a string and counts the number of words.",
    "code": "```python\ntext = \"This is a sample string with several words\"\nword_count = 0\nin_word = False\n\nfor char in text:\n    if char.isalpha():\n        if not in_word:\n            word_count += 1\n            in_word = True\n    else:\n        in_word = False\n\nprint(word_count)\n```"
  },
  {
    "task": "Design a for loop that prints numbers from 1 to 50, but skips numbers divisible by 5.",
    "code": "```python\nfor i in range(1, 51):\n    if i % 5 == 0:\n        continue\n    print(i)\n```"
  },
  {
    "task": "Implement a for loop that prints a checkerboard pattern of asterisks.",
    "code": "```python\nsize = 8\nfor i in range(size):\n    for j in range(size):\n        if (i + j) % 2 == 0:\n            print('*', end=' ')\n        else:\n            print(' ', end=' ')\n    print()\n```"
  },
  {
    "task": "Create a for loop that finds the index of a target value in a list.",
    "code": "```python\ndef find_index_of_target(lst, target):\n    for index in range(len(lst)):\n        if lst[index] == target:\n            return index\n    return -1\n\n# Example usage\nlst = [1, 2, 3, 4, 5]\ntarget = 3\nindex = find_index_of_target(lst, target)\nprint(index)\n```"
  },
  {
    "task": "Use a for loop to concatenate a list of strings into a single string.",
    "code": "```python\nstrings = [\"Hello\", \"world\", \"this\", \"is\", \"a\", \"test\"]\nresult = \"\"\nfor s in strings:\n    result += s\n```"
  },
  {
    "task": "Develop a for loop that rotates a list to the right by a given number of positions.",
    "code": "```python\ndef rotate_right(lst, positions):\n    positions %= len(lst)\n    return lst[-positions:] + lst[:-positions]\n\n# Example usage:\nlst = [1, 2, 3, 4, 5]\npositions = 2\nrotated_lst = rotate_right(lst, positions)\nprint(rotated_lst)\n```"
  },
  {
    "task": "Write code that uses a for loop to insert an element into a sorted list while maintaining order.",
    "code": "```python\ndef insert_into_sorted_list(sorted_list, element):\n    for i in range(len(sorted_list)):\n        if element < sorted_list[i]:\n            sorted_list.insert(i, element)\n            return sorted_list\n    sorted_list.append(element)\n    return sorted_list\n\n# Example usage\nsorted_list = [1, 3, 4, 7, 9]\nelement = 5\ninsert_into_sorted_list(sorted_list, element)\n```"
  },
  {
    "task": "Implement a for loop that counts the frequency of each character in a string.",
    "code": "```python\ndef count_character_frequency(s):\n    frequency = {}\n    for char in s:\n        if char in frequency:\n            frequency[char] += 1\n        else:\n            frequency[char] = 1\n    return frequency\n\n# Example usage:\nstring = \"example\"\nresult = count_character_frequency(string)\nprint(result)\n```"
  },
  {
    "task": "Create a for loop that prints all subsets of a given set.",
    "code": "```python\nfrom itertools import chain, combinations\n\ndef all_subsets(s):\n    return chain.from_iterable(combinations(s, r) for r in range(len(s)+1))\n\ngiven_set = {1, 2, 3}\n\nfor subset in all_subsets(given_set):\n    print(set(subset))\n```"
  },
  {
    "task": "Design a for loop to generate all permutations of a string.",
    "code": "```python\nimport itertools\n\ndef generate_permutations(s):\n    permutations = [''.join(p) for p in itertools.permutations(s)]\n    return permutations\n\n# Example usage\nstring = \"abc\"\nprint(generate_permutations(string))\n```"
  },
  {
    "task": "Write a for loop that sorts an array in descending order.",
    "code": "```python\narray = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]\n\nfor i in range(len(array)):\n    for j in range(i + 1, len(array)):\n        if array[i] < array[j]:\n            array[i], array[j] = array[j], array[i]\n\nprint(array)\n```"
  },
  {
    "task": "Use a for loop to generate a sequence of random characters and print them.",
    "code": "```python\nimport random\nimport string\n\nfor _ in range(10):  # Assuming a sequence of 10 characters\n    random_char = random.choice(string.ascii_letters)\n    print(random_char)\n```"
  },
  {
    "task": "Construct a for loop that finds the common elements between two lists.",
    "code": "```python\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [4, 5, 6, 7, 8]\ncommon_elements = []\n\nfor element in list1:\n    if element in list2:\n        common_elements.append(element)\n\nprint(common_elements)\n```"
  },
  {
    "task": "Develop a for loop to calculate and print the cumulative sum of a list.",
    "code": "```python\nnumbers = [1, 2, 3, 4, 5]\ncumulative_sum = 0\n\nfor number in numbers:\n    cumulative_sum += number\n    print(cumulative_sum)\n```"
  },
  {
    "task": "Create a for loop that prints a diamond pattern using asterisks.",
    "code": "```python\ndef print_diamond(n):\n    for i in range(n):\n        print(' ' * (n - i - 1) + '*' * (2 * i + 1))\n    for i in range(n - 2, -1, -1):\n        print(' ' * (n - i - 1) + '*' * (2 * i + 1))\n\nprint_diamond(5)\n```"
  },
  {
    "task": "Write a for loop that simulates a countdown timer from a specified number of seconds.",
    "code": "```python\nimport time\n\ndef countdown_timer(seconds):\n    for i in range(seconds, 0, -1):\n        print(i)\n        time.sleep(1)\n    print(\"Time's up!\")\n\ncountdown_timer(10)\n```"
  },
  {
    "task": "Use a for loop to print the transpose of a matrix.",
    "code": "```python\nmatrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\n\ntranspose = [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]\n\nfor row in transpose:\n    print(row)\n```"
  },
  {
    "task": "Implement a for loop that reverses the order of words in a sentence.",
    "code": "```python\nsentence = \"This is a sample sentence\"\nwords = sentence.split()\nreversed_sentence = ' '.join(words[::-1])\nprint(reversed_sentence)\n```"
  },
  {
    "task": "Create a for loop that deletes elements from a list that are less than a given value.",
    "code": "```python\ndef delete_elements_less_than(lst, value):\n    return [x for x in lst if x >= value]\n\n# Example usage\nlst = [1, 2, 3, 4, 5, 6]\nvalue = 3\nlst = delete_elements_less_than(lst, value)\nprint(lst)\n```"
  },
  {
    "task": "Design a for loop to merge two sorted lists into a single sorted list.",
    "code": "```python\ndef merge_sorted_lists(list1, list2):\n    merged_list = []\n    i, j = 0, 0\n    \n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            merged_list.append(list1[i])\n            i += 1\n        else:\n            merged_list.append(list2[j])\n            j += 1\n    \n    for k in range(i, len(list1)):\n        merged_list.append(list1[k])\n        \n    for k in range(j, len(list2)):\n        merged_list.append(list2[k])\n    \n    return merged_list\n\n# Example usage:\nlist1 = [1, 3, 5]\nlist2 = [2, 4, 6]\nresult = merge_sorted_lists(list1, list2)\nprint(result)\n```"
  },
  {
    "task": "Write a for loop that calculates the power of a number using repeated multiplication.",
    "code": "```python\ndef power(base, exponent):\n    result = 1\n    for _ in range(exponent):\n        result *= base\n    return result\n\n# Example usage:\nbase = 3\nexponent = 4\nprint(power(base, exponent))  # Output: 81\n```"
  },
  {
    "task": "Use a for loop to find the longest word in a list of words.",
    "code": "```python\nwords = [\"apple\", \"banana\", \"cherry\", \"date\"]\nlongest_word = \"\"\n\nfor word in words:\n    if len(word) > len(longest_word):\n        longest_word = word\n\nprint(longest_word)\n```"
  },
  {
    "task": "Develop a for loop that sorts a list of tuples based on the second element.",
    "code": "```python\ndata = [(1, 3), (4, 1), (5, 2), (2, 4)]\nsorted_data = sorted(data, key=lambda x: x[1])\n```"
  },
  {
    "task": "Create a for loop that replicates each character in a string a given number of times.",
    "code": "```python\ndef replicate_characters(input_string, times):\n    result = ''\n    for char in input_string:\n        result += char * times\n    return result\n\n# Example usage:\n# output = replicate_characters(\"hello\", 3)\n# print(output)  # Output will be \"hhheeelllllooo\"\n```"
  },
  {
    "task": "Construct a for loop that replaces spaces in a string with hyphens.",
    "code": "```python\noriginal_string = \"Replace spaces with hyphens\"\nmodified_string = \"\"\n\nfor char in original_string:\n    if char == \" \":\n        modified_string += \"-\"\n    else:\n        modified_string += char\n\nprint(modified_string)\n```"
  },
  {
    "task": "Design a for loop to find the intersection of two sets.",
    "code": "```python\nset1 = {1, 2, 3, 4, 5}\nset2 = {3, 4, 5, 6, 7}\n\nintersection = set()\n\nfor element in set1:\n    if element in set2:\n        intersection.add(element)\n\nprint(intersection)\n```"
  },
  {
    "task": "Write a for loop that generates a list of prime numbers up to a given number.",
    "code": "```python\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef generate_primes(up_to):\n    primes = []\n    for num in range(2, up_to + 1):\n        if is_prime(num):\n            primes.append(num)\n    return primes\n\nup_to = 100  # Example limit\nprime_numbers = generate_primes(up_to)\nprint(prime_numbers)\n```"
  },
  {
    "task": "Use a for loop to implement a simple text-based progress bar.",
    "code": "```python\nimport time\n\ndef progress_bar(total_steps):\n    for step in range(total_steps + 1):\n        progress = int((step / total_steps) * 100)\n        bar = '#' * (progress // 2) + '-' * (50 - progress // 2)\n        print(f\"\\r[{bar}] {progress}%\", end=\"\")\n        time.sleep(0.1)\n\nprogress_bar(100)\n```"
  },
  {
    "task": "Implement a for loop that finds and prints all palindromic numbers between 10 and 200.",
    "code": "```python\nfor num in range(10, 201):\n    if str(num) == str(num)[::-1]:\n        print(num)\n```"
  },
  {
    "task": "Create a for loop that multiplies corresponding elements of two lists and stores the result.",
    "code": "```python\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [6, 7, 8, 9, 10]\nresult = []\n\nfor i in range(len(list1)):\n    result.append(list1[i] * list2[i])\n```"
  },
  {
    "task": "Develop a for loop that finds the difference between the largest and smallest numbers in a list.",
    "code": "```python\nnumbers = [10, 5, 20, 1, 15]\nmin_num = float('inf')\nmax_num = float('-inf')\n\nfor num in numbers:\n    if num < min_num:\n        min_num = num\n    if num > max_num:\n        max_num = num\n\ndifference = max_num - min_num\nprint(difference)\n```"
  },
  {
    "task": "Write a for loop that prints numbers from 1 to 100, replacing multiples of 5 with 'Buzz'.",
    "code": "```python\nfor i in range(1, 101):\n    if i % 5 == 0:\n        print('Buzz')\n    else:\n        print(i)\n```"
  },
  {
    "task": "Use a for loop to convert a list of integers into their binary representation.",
    "code": "```python\nintegers = [5, 10, 15, 20]\nbinary_representations = []\n\nfor number in integers:\n    binary_representations.append(bin(number))\n\nprint(binary_representations)\n```"
  },
  {
    "task": "Design a for loop that fills a 2D array with consecutive numbers in a spiral pattern.",
    "code": "```python\ndef fill_spiral(n):\n    array = [[0] * n for _ in range(n)]\n    num = 1\n    start_row, end_row = 0, n - 1\n    start_col, end_col = 0, n - 1\n\n    while start_row <= end_row and start_col <= end_col:\n        for col in range(start_col, end_col + 1):\n            array[start_row][col] = num\n            num += 1\n        start_row += 1\n\n        for row in range(start_row, end_row + 1):\n            array[row][end_col] = num\n            num += 1\n        end_col -= 1\n\n        if start_row <= end_row:\n            for col in range(end_col, start_col - 1, -1):\n                array[end_row][col] = num\n                num += 1\n            end_row -= 1\n\n        if start_col <= end_col:\n            for row in range(end_row, start_row - 1, -1):\n                array[row][start_col] = num\n                num += 1\n            start_col += 1\n    \n    return array\n\n# Example usage:\nn = 5\nspiral_array = fill_spiral(n)\nfor row in spiral_array:\n    print(row)\n```"
  },
  {
    "task": "Create a for loop that iterates over a list and removes duplicates.",
    "code": "```python\ninput_list = [1, 2, 2, 3, 4, 4, 5]\nunique_list = []\nfor item in input_list:\n    if item not in unique_list:\n        unique_list.append(item)\n```"
  },
  {
    "task": "Implement a for loop to calculate the dot product of two vectors.",
    "code": "```python\ndef dot_product(vector1, vector2):\n    result = 0\n    for v1, v2 in zip(vector1, vector2):\n        result += v1 * v2\n    return result\n```"
  },
  {
    "task": "Write a for loop that prints a sequence of numbers in reverse order.",
    "code": "```python\nfor i in range(10, 0, -1):\n    print(i)\n```"
  },
  {
    "task": "Develop a for loop that computes the greatest common divisor (GCD) of two numbers.",
    "code": "```python\ndef gcd(a, b):\n    for i in range(min(a, b), 0, -1):\n        if a % i == 0 and b % i == 0:\n            return i\n\n# Example usage:\n# result = gcd(54, 24)\n# print(result)\n```"
  },
  {
    "task": "Construct a for loop that prints a square pattern of numbers with a given side length.",
    "code": "```python\nside_length = 5  # Example side length, can be modified as needed\n\nfor i in range(side_length):\n    for j in range(side_length):\n        print(j + 1, end=' ')\n    print()\n```"
  },
  {
    "task": "Create a for loop that shifts all elements of a list to the left by one position.",
    "code": "```python\ndef shift_left(lst):\n    if len(lst) > 1:\n        first_element = lst[0]\n        for i in range(1, len(lst)):\n            lst[i - 1] = lst[i]\n        lst[-1] = first_element\n    return lst\n\n# Example usage\nmy_list = [1, 2, 3, 4, 5]\nshifted_list = shift_left(my_list)\nprint(shifted_list)  # Output: [2, 3, 4, 5, 1]\n```"
  },
  {
    "task": "Use a for loop to print the first 20 triangular numbers.",
    "code": "```python\nfor n in range(1, 21):\n    triangular_number = n * (n + 1) // 2\n    print(triangular_number)\n```"
  },
  {
    "task": "Write a for loop that finds the first repeating character in a string.",
    "code": "```python\ndef first_repeating_character(s):\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None\n\n# Example usage:\ns = \"abcdefgab\"\nprint(first_repeating_character(s))\n```"
  },
  {
    "task": "Design a for loop that transforms a list of temperatures from Celsius to Fahrenheit.",
    "code": "```python\ncelsius_temperatures = [0, 20, 37, 100]\nfahrenheit_temperatures = []\n\nfor celsius in celsius_temperatures:\n    fahrenheit = (celsius * 9/5) + 32\n    fahrenheit_temperatures.append(fahrenheit)\n\nprint(fahrenheit_temperatures)\n```"
  },
  {
    "task": "Implement a for loop to determine if a string is an isogram.",
    "code": "```python\ndef is_isogram(s):\n    s = s.lower()\n    seen = set()\n    for char in s:\n        if char in seen:\n            return False\n        seen.add(char)\n    return True\n\n# Example usage:\n# result = is_isogram(\"machine\")\n# print(result)  # True\n```"
  },
  {
    "task": "Use a for loop to create a histogram from a list of integers.",
    "code": "```python\ndata = [5, 3, 7, 1, 4]\nhistogram = \"\"\n\nfor value in data:\n    histogram += '*' * value + '\\n'\n\nprint(histogram)\n```"
  },
  {
    "task": "Create a for loop that prints the indexes of all occurrences of a particular element in a list.",
    "code": "```python\ndef find_indexes(lst, element):\n    for index, value in enumerate(lst):\n        if value == element:\n            print(index)\n\n# Example usage\nfind_indexes([1, 2, 3, 2, 4, 2, 5], 2)\n```"
  },
  {
    "task": "Write a for loop that checks if a given string is a palindrome.",
    "code": "```python\ndef is_palindrome(s):\n    for i in range(len(s) // 2):\n        if s[i] != s[-(i + 1)]:\n            return False\n    return True\n\n# Example usage\nstring = \"radar\"\nprint(is_palindrome(string))  # Output: True\n```"
  },
  {
    "task": "Develop a for loop to simulate the behavior of a simple finite state machine.",
    "code": "```python\nstates = ['State1', 'State2', 'State3']\ncurrent_state = states[0]\n\nfor i in range(10):  # Simulate transitions for 10 steps\n    print(f\"Step {i}: Current State = {current_state}\")\n    if current_state == 'State1':\n        current_state = 'State2'\n    elif current_state == 'State2':\n        current_state = 'State3'\n    elif current_state == 'State3':\n        current_state = 'State1'\n```"
  },
  {
    "task": "Design a for loop that finds the sum of all odd numbers in a list.",
    "code": "```python\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nsum_of_odds = 0\n\nfor num in numbers:\n    if num % 2 != 0:\n        sum_of_odds += num\n\nprint(sum_of_odds)\n```"
  },
  {
    "task": "Use a for loop to count how many words start with a vowel in a given sentence.",
    "code": "```python\nsentence = \"Enter your sentence here\"\nvowels = \"aeiouAEIOU\"\ncount = 0\n\nfor word in sentence.split():\n    if word[0] in vowels:\n        count += 1\n\nprint(count)\n```"
  },
  {
    "task": "Implement a for loop that sorts a list of strings by their length.",
    "code": "```python\nstrings = [\"apple\", \"banana\", \"kiwi\", \"cherry\", \"mango\"]\nsorted_strings = sorted(strings, key=lambda s: len(s))\nfor string in sorted_strings:\n    print(string)\n```"
  },
  {
    "task": "Write a for loop that prints the factorial of numbers from 1 to 10.",
    "code": "```python\ndef factorial(n):\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result\n\nfor num in range(1, 11):\n    print(factorial(num))\n```"
  },
  {
    "task": "Create a for loop that replaces all instances of a substring in a string with another substring.",
    "code": "```python\ndef replace_substring(original_string, old_substring, new_substring):\n    parts = original_string.split(old_substring)\n    result = new_substring.join(parts)\n    return result\n\noriginal = \"hello world, world is beautiful\"\nold = \"world\"\nnew = \"earth\"\n\nfor _ in range(original.count(old)):\n    original = replace_substring(original, old, new)\n\nprint(original)\n```"
  },
  {
    "task": "Develop a for loop that squares each element in a list of numbers.",
    "code": "```python\nnumbers = [1, 2, 3, 4, 5]\nsquared_numbers = []\n\nfor number in numbers:\n    squared_numbers.append(number ** 2)\n```"
  },
  {
    "task": "Use a for loop to reverse the order of elements in an array.",
    "code": "```python\narray = [1, 2, 3, 4, 5]\nreversed_array = []\n\nfor i in range(len(array) - 1, -1, -1):\n    reversed_array.append(array[i])\n\nprint(reversed_array)\n```"
  },
  {
    "task": "Implement a for loop that tests if two strings are anagrams of each other.",
    "code": "```python\ndef are_anagrams(str1, str2):\n    if len(str1) != len(str2):\n        return False\n    count = {}\n    for char in str1:\n        count[char] = count.get(char, 0) + 1\n    for char in str2:\n        if char not in count or count[char] == 0:\n            return False\n        count[char] -= 1\n    return True\n\n# Example usage\nresult = are_anagrams(\"listen\", \"silent\")\nprint(result)  # Output should be True\n```"
  },
  {
    "task": "Design a for loop to find and print all Armstrong numbers between 100 and 999.",
    "code": "```python\nfor num in range(100, 1000):\n    sum_of_powers = sum(int(digit) ** 3 for digit in str(num))\n    if num == sum_of_powers:\n        print(num)\n```"
  }
]