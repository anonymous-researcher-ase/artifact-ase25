[
  {
    "task": "Write a function that reads a file and handles the exception if the file is not found.",
    "code": "```python\ndef read_file(file_path):\n    try:\n        with open(file_path, 'r') as file:\n            return file.read()\n    except FileNotFoundError:\n        return \"File not found.\"\n```"
  },
  {
    "task": "Create a program that divides two numbers and catches any division by zero errors.",
    "code": "```python\ndef divide_numbers(a, b):\n    try:\n        result = a / b\n    except ZeroDivisionError:\n        return \"Error: Cannot divide by zero.\"\n    else:\n        return result\n\n# Example usage\nnum1 = 10\nnum2 = 0\nprint(divide_numbers(num1, num2))\n```"
  },
  {
    "task": "Design a function to parse an integer from a string and manage invalid input exceptions.",
    "code": "```python\ndef parse_integer(input_str):\n    try:\n        return int(input_str)\n    except ValueError:\n        return \"Invalid input: not an integer\"\n\n# Example usage:\n# result = parse_integer(\"123\")\n# print(result)  # Output: 123\n\n# result = parse_integer(\"abc\")\n# print(result)  # Output: Invalid input: not an integer\n```"
  },
  {
    "task": "Implement an API call and catch exceptions related to network errors or timeouts.",
    "code": "```python\nimport requests\nfrom requests.exceptions import RequestException, Timeout\n\ndef make_api_call(url):\n    try:\n        response = requests.get(url, timeout=5)\n        response.raise_for_status()\n        return response.json()\n    except Timeout:\n        print(\"The request timed out\")\n    except RequestException as e:\n        print(f\"An error occurred: {e}\")\n\n# Example usage\nurl = \"https://api.example.com/data\"\nresult = make_api_call(url)\n```"
  },
  {
    "task": "Develop a program that opens a database connection and handles any connection failure exceptions.",
    "code": "```python\nimport sqlite3\nfrom sqlite3 import Error\n\ndef create_connection(db_file):\n    conn = None\n    try:\n        conn = sqlite3.connect(db_file)\n        print(\"Connection established\")\n    except Error as e:\n        print(f\"Connection failed: {e}\")\n    finally:\n        if conn:\n            conn.close()\n            print(\"Connection closed\")\n\ncreate_connection(\"example.db\")\n```"
  },
  {
    "task": "Write a function that accesses an array by index and catches out-of-bounds exceptions.",
    "code": "```python\ndef access_array_element(array, index):\n    try:\n        return array[index]\n    except IndexError:\n        return \"Index out of bounds\"\n\n# Example usage:\n# result = access_array_element([1, 2, 3], 5)\n# print(result)  # Output: \"Index out of bounds\"\n```"
  },
  {
    "task": "Create a function that converts a string to a date object and manages format exceptions.",
    "code": "```python\nfrom datetime import datetime\n\ndef convert_to_date(date_string):\n    try:\n        return datetime.strptime(date_string, '%Y-%m-%d')\n    except ValueError as e:\n        print(f\"Error: {e}\")\n        return None\n```"
  },
  {
    "task": "Design a program that writes data to a file and catches any file permission exceptions.",
    "code": "```python\ndef write_data_to_file(filename, data):\n    try:\n        with open(filename, 'w') as file:\n            file.write(data)\n    except PermissionError as e:\n        print(f\"PermissionError: {e}\")\n\nwrite_data_to_file('output.txt', 'Hello, World!')\n```"
  },
  {
    "task": "Implement a module that retrieves data from a URL and handles malformed URL exceptions.",
    "code": "```python\nimport requests\nfrom urllib.parse import urlparse\nfrom requests.exceptions import RequestException\n\ndef fetch_data_from_url(url):\n    try:\n        result = urlparse(url)\n        if not all([result.scheme, result.netloc]):\n            raise ValueError(\"Malformed URL\")\n        response = requests.get(url)\n        response.raise_for_status()\n        return response.text\n    except ValueError as ve:\n        print(f\"URL Error: {ve}\")\n    except RequestException as re:\n        print(f\"Request Error: {re}\")\n\n# Example usage:\n# data = fetch_data_from_url(\"http://example.com\")\n```"
  },
  {
    "task": "Write a function to calculate the square root of a number and catch any negative input exceptions.",
    "code": "```python\nimport math\n\ndef calculate_square_root(number):\n    try:\n        if number < 0:\n            raise ValueError(\"Cannot calculate square root of a negative number.\")\n        return math.sqrt(number)\n    except ValueError as e:\n        return str(e)\n```"
  },
  {
    "task": "Develop a program that sends an email and manages exceptions for invalid email addresses.",
    "code": "```python\nimport smtplib\nfrom email.mime.text import MIMEText\nfrom email.mime.multipart import MIMEMultipart\nimport re\n\ndef send_email(sender_email, receiver_email, subject, body, smtp_server, port, login, password):\n    try:\n        # Validate email addresses\n        if not re.match(r\"[^@]+@[^@]+\\.[^@]+\", sender_email):\n            raise ValueError(\"Invalid sender email address\")\n        if not re.match(r\"[^@]+@[^@]+\\.[^@]+\", receiver_email):\n            raise ValueError(\"Invalid receiver email address\")\n        \n        # Create a multipart message\n        message = MIMEMultipart()\n        message['From'] = sender_email\n        message['To'] = receiver_email\n        message['Subject'] = subject\n\n        # Attach body to the message\n        message.attach(MIMEText(body, 'plain'))\n\n        # Establish connection with the server\n        with smtplib.SMTP(smtp_server, port) as server:\n            server.starttls()\n            server.login(login, password)\n            server.sendmail(sender_email, receiver_email, message.as_string())\n\n    except ValueError as e:\n        print(f\"Email validation error: {e}\")\n    except smtplib.SMTPException as e:\n        print(f\"SMTP error occurred: {e}\")\n    except Exception as e:\n        print(f\"An unexpected error occurred: {e}\")\n\n# Example usage\nsend_email(\n    sender_email=\"sender@example.com\",\n    receiver_email=\"receiver@example.com\",\n    subject=\"Test Email\",\n    body=\"This is a test email.\",\n    smtp_server=\"smtp.example.com\",\n    port=587,\n    login=\"your_login\",\n    password=\"your_password\"\n)\n```"
  },
  {
    "task": "Create a calculator application that handles invalid operations gracefully.",
    "code": "```python\ndef calculator():\n    try:\n        num1 = float(input(\"Enter the first number: \"))\n        operator = input(\"Enter an operator (+, -, *, /): \")\n        num2 = float(input(\"Enter the second number: \"))\n\n        if operator == '+':\n            result = num1 + num2\n        elif operator == '-':\n            result = num1 - num2\n        elif operator == '*':\n            result = num1 * num2\n        elif operator == '/':\n            if num2 == 0:\n                raise ZeroDivisionError(\"Cannot divide by zero\")\n            result = num1 / num2\n        else:\n            raise ValueError(\"Invalid operator\")\n        \n        print(f\"The result is: {result}\")\n\n    except ValueError as ve:\n        print(f\"Value error: {ve}\")\n    except ZeroDivisionError as zde:\n        print(f\"Math error: {zde}\")\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n\ncalculator()\n```"
  },
  {
    "task": "Design a function that tries to parse JSON data and catches parsing errors.",
    "code": "```python\nimport json\n\ndef parse_json(data):\n    try:\n        return json.loads(data)\n    except json.JSONDecodeError as e:\n        print(f\"Error parsing JSON: {e}\")\n        return None\n```"
  },
  {
    "task": "Implement a system that processes user input and handles any type conversion exceptions.",
    "code": "```python\ndef process_input(user_input):\n    try:\n        # Attempt to convert the input to an integer\n        result = int(user_input)\n        print(f\"Processed input successfully: {result}\")\n    except ValueError:\n        print(\"Error: Invalid input. Please enter a valid integer.\")\n\nuser_input = input(\"Enter a number: \")\nprocess_input(user_input)\n```"
  },
  {
    "task": "Write a function that fetches data from a database and manages exceptions for missing records.",
    "code": "```python\nimport sqlite3\n\ndef fetch_data_from_database(record_id):\n    try:\n        connection = sqlite3.connect('example.db')\n        cursor = connection.cursor()\n        cursor.execute(\"SELECT * FROM records WHERE id = ?\", (record_id,))\n        data = cursor.fetchone()\n        if data is None:\n            raise ValueError(\"Record not found\")\n        return data\n    except sqlite3.Error as e:\n        print(\"Database error:\", e)\n    except ValueError as e:\n        print(\"Error:\", e)\n    finally:\n        if connection:\n            connection.close()\n```"
  },
  {
    "task": "Create a program that connects to a remote server and handles authentication failure exceptions.",
    "code": "```python\nimport socket\n\ndef connect_to_server(server_address, port, username, password):\n    try:\n        # Simulating server connection\n        sock = socket.create_connection((server_address, port))\n        # Simulating authentication process\n        if not authenticate(sock, username, password):\n            raise AuthenticationError(\"Authentication failed\")\n    except AuthenticationError as auth_err:\n        print(f\"Authentication failed: {auth_err}\")\n    except socket.error as sock_err:\n        print(f\"Socket error: {sock_err}\")\n    except Exception as e:\n        print(f\"An unexpected error occurred: {e}\")\n    finally:\n        sock.close()\n\nclass AuthenticationError(Exception):\n    pass\n\ndef authenticate(sock, username, password):\n    # Dummy authentication logic\n    return username == \"admin\" and password == \"password\"\n\n# Example usage\nconnect_to_server(\"example.com\", 8080, \"user\", \"wrongpassword\")\n```"
  },
  {
    "task": "Develop a function to download a file from the internet and handle file not found exceptions.",
    "code": "```python\nimport requests\n\ndef download_file(url, destination):\n    try:\n        response = requests.get(url)\n        response.raise_for_status()\n        with open(destination, 'wb') as file:\n            file.write(response.content)\n    except requests.exceptions.HTTPError as http_err:\n        print(f\"HTTP error occurred: {http_err}\")\n    except requests.exceptions.RequestException as err:\n        print(f\"Error occurred: {err}\")\n    except FileNotFoundError:\n        print(\"File not found.\")\n```"
  },
  {
    "task": "Design a program that attempts to connect to an API and handles rate limit exceptions.",
    "code": "```python\nimport requests\nimport time\n\ndef connect_to_api(url):\n    while True:\n        try:\n            response = requests.get(url)\n            response.raise_for_status()\n            return response.json()\n        except requests.exceptions.HTTPError as e:\n            if e.response.status_code == 429:  # Rate limit error\n                retry_after = int(e.response.headers.get(\"Retry-After\", 1))\n                time.sleep(retry_after)\n            else:\n                raise e\n\napi_url = \"https://api.example.com/data\"\ndata = connect_to_api(api_url)\n```"
  },
  {
    "task": "Write a function that reads from a configuration file and manages key not found exceptions.",
    "code": "```python\ndef read_config(file_path, key):\n    try:\n        with open(file_path, 'r') as file:\n            config_data = {}\n            for line in file:\n                if '=' in line:\n                    k, v = line.strip().split('=', 1)\n                    config_data[k.strip()] = v.strip()\n            return config_data[key]\n    except FileNotFoundError:\n        raise FileNotFoundError(\"The configuration file was not found.\")\n    except KeyError:\n        raise KeyError(f\"The key '{key}' was not found in the configuration file.\")\n    except Exception as e:\n        raise Exception(f\"An error occurred: {e}\")\n```"
  },
  {
    "task": "Create an application that processes a list of tasks and catches any task execution exceptions.",
    "code": "```python\nclass Task:\n    def __init__(self, name, execute_func):\n        self.name = name\n        self.execute_func = execute_func\n\n    def execute(self):\n        try:\n            self.execute_func()\n            print(f\"Task {self.name} executed successfully.\")\n        except Exception as e:\n            print(f\"Exception in task {self.name}: {e}\")\n\ndef task1():\n    print(\"Task 1 is running.\")\n    # No exception\n\ndef task2():\n    print(\"Task 2 is running.\")\n    raise ValueError(\"An error occurred in task 2.\")\n\ndef task3():\n    print(\"Task 3 is running.\")\n    # No exception\n\ntasks = [\n    Task(\"Task 1\", task1),\n    Task(\"Task 2\", task2),\n    Task(\"Task 3\", task3)\n]\n\nfor task in tasks:\n    task.execute()\n```"
  },
  {
    "task": "Implement a program that performs batch processing and handles individual item processing exceptions.",
    "code": "```python\ndef process_item(item):\n    if item < 0:\n        raise ValueError(\"Negative value encountered\")\n    return item * 2\n\ndef batch_process(items):\n    results = []\n    for item in items:\n        try:\n            result = process_item(item)\n            results.append(result)\n        except Exception as e:\n            print(f\"Error processing item {item}: {e}\")\n            results.append(None)\n    return results\n\nitems = [1, 2, -3, 4, 5]\nprocessed_items = batch_process(items)\nprint(processed_items)\n```"
  },
  {
    "task": "Develop a function that performs mathematical operations and catches arithmetic exceptions.",
    "code": "```python\ndef perform_operation(num1, num2, operation):\n    try:\n        if operation == 'add':\n            return num1 + num2\n        elif operation == 'subtract':\n            return num1 - num2\n        elif operation == 'multiply':\n            return num1 * num2\n        elif operation == 'divide':\n            return num1 / num2\n        else:\n            raise ValueError(\"Invalid operation\")\n    except ZeroDivisionError:\n        return \"Error: Division by zero\"\n    except Exception as e:\n        return f\"Error: {e}\"\n\n# Example usage\nresult = perform_operation(10, 0, 'divide')\nprint(result)\n```"
  },
  {
    "task": "Write a program that logs error messages when exceptions occur during data processing.",
    "code": "```python\nimport logging\n\n# Configure logging\nlogging.basicConfig(level=logging.ERROR, filename='error.log', filemode='a',\n                    format='%(asctime)s - %(levelname)s - %(message)s')\n\ndef process_data(data):\n    try:\n        # Simulate data processing that may raise an exception\n        result = 100 / data\n        return result\n    except Exception as e:\n        logging.error(\"An error occurred during data processing: %s\", e)\n\n# Example usage\ndata_samples = [10, 0, 'string', 5]\n\nfor data in data_samples:\n    process_data(data)\n```"
  },
  {
    "task": "Create a script that monitors system resources and handles exceptions when limits are exceeded.",
    "code": "```python\nimport psutil\n\ndef monitor_system_resources():\n    try:\n        cpu_usage = psutil.cpu_percent(interval=1)\n        memory_usage = psutil.virtual_memory().percent\n        \n        if cpu_usage > 80:\n            raise Exception(\"CPU usage exceeded limit: {}%\".format(cpu_usage))\n        \n        if memory_usage > 80:\n            raise Exception(\"Memory usage exceeded limit: {}%\".format(memory_usage))\n        \n        print(\"CPU Usage: {}%\".format(cpu_usage))\n        print(\"Memory Usage: {}%\".format(memory_usage))\n        \n    except Exception as e:\n        print(\"Exception occurred:\", e)\n\nif __name__ == \"__main__\":\n    monitor_system_resources()\n```"
  },
  {
    "task": "Design a function that validates user input and manages any format exceptions.",
    "code": "```python\ndef validate_input(user_input):\n    try:\n        # Assuming the user input should be an integer\n        value = int(user_input)\n        return value\n    except ValueError:\n        return \"Invalid input format. Please enter a valid integer.\"\n\n# Example usage\nuser_input = input(\"Enter a number: \")\nresult = validate_input(user_input)\nprint(result)\n```"
  },
  {
    "task": "Implement a service that interacts with third-party APIs and handles unexpected response exceptions.",
    "code": "```python\nimport requests\n\nclass ThirdPartyAPIService:\n    def __init__(self, base_url):\n        self.base_url = base_url\n\n    def get_data(self, endpoint):\n        url = f\"{self.base_url}/{endpoint}\"\n        try:\n            response = requests.get(url)\n            response.raise_for_status()\n            return response.json()\n        except requests.exceptions.HTTPError as http_err:\n            print(f\"HTTP error occurred: {http_err}\")\n        except requests.exceptions.ConnectionError as conn_err:\n            print(f\"Connection error occurred: {conn_err}\")\n        except requests.exceptions.Timeout as timeout_err:\n            print(f\"Timeout error occurred: {timeout_err}\")\n        except requests.exceptions.RequestException as req_err:\n            print(f\"General error occurred: {req_err}\")\n        except Exception as e:\n            print(f\"An unexpected error occurred: {e}\")\n        return None\n\n# Example usage\nservice = ThirdPartyAPIService(\"https://api.example.com\")\ndata = service.get_data(\"some/endpoint\")\n```"
  },
  {
    "task": "Write a function that uploads files to a server and handles exceptions for unsupported file types.",
    "code": "```python\ndef upload_file_to_server(file_path):\n    supported_file_types = {'.txt', '.jpg', '.png', '.pdf'}\n\n    try:\n        if not any(file_path.endswith(ext) for ext in supported_file_types):\n            raise ValueError(\"Unsupported file type\")\n\n        # Simulate file upload\n        print(f\"Uploading {file_path} to server...\")\n\n    except ValueError as ve:\n        print(f\"Error: {ve}\")\n\n# Example usage\nupload_file_to_server(\"example.docx\")\nupload_file_to_server(\"example.png\")\n```"
  },
  {
    "task": "Create a program that simulates network traffic and manages packet loss exceptions.",
    "code": "```python\nimport random\n\nclass NetworkError(Exception):\n    pass\n\ndef simulate_network_traffic(packet_count):\n    for packet in range(packet_count):\n        try:\n            if random.random() < 0.1:  # Simulate a 10% packet loss\n                raise NetworkError(f\"Packet {packet} lost.\")\n            print(f\"Packet {packet} successfully sent.\")\n        except NetworkError as e:\n            print(e)\n\nif __name__ == \"__main__\":\n    simulate_network_traffic(20)\n```"
  },
  {
    "task": "Develop a function that processes XML data and catches any structural exceptions.",
    "code": "```python\nimport xml.etree.ElementTree as ET\n\ndef process_xml_data(xml_data):\n    try:\n        root = ET.fromstring(xml_data)\n        # Process the XML data here\n        return root\n    except ET.ParseError as e:\n        print(\"XML parsing error:\", e)\n    except Exception as ex:\n        print(\"An error occurred:\", ex)\n\n# Example usage\nxml_data = \"<root><child>data</child></root>\"\nresult = process_xml_data(xml_data)\n```"
  },
  {
    "task": "Design a program that handles exceptions when accessing environment variables.",
    "code": "```python\nimport os\n\ndef get_environment_variable(var_name):\n    try:\n        value = os.environ[var_name]\n        return value\n    except KeyError:\n        print(f\"Environment variable '{var_name}' not found.\")\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n\n# Example usage\nvar_name = \"MY_ENV_VAR\"\nvalue = get_environment_variable(var_name)\nif value is not None:\n    print(f\"The value of {var_name} is {value}\")\n```"
  },
  {
    "task": "Write a function that calculates factorial and manages exceptions for negative input values.",
    "code": "```python\ndef factorial(n):\n    try:\n        if n < 0:\n            raise ValueError(\"Negative values are not allowed.\")\n        result = 1\n        for i in range(2, n + 1):\n            result *= i\n        return result\n    except ValueError as e:\n        return str(e)\n\n# Example usage:\n# print(factorial(5))  # Output: 120\n# print(factorial(-3)) # Output: \"Negative values are not allowed.\"\n```"
  },
  {
    "task": "Create a software tool that converts file formats and handles unsupported format exceptions.",
    "code": "```python\nclass UnsupportedFormatException(Exception):\n    pass\n\nclass FileConverter:\n    def __init__(self):\n        self.supported_formats = {'txt', 'csv', 'json'}\n\n    def convert(self, input_file: str, output_format: str) -> str:\n        try:\n            if output_format not in self.supported_formats:\n                raise UnsupportedFormatException(f\"Format '{output_format}' is not supported.\")\n            # Simulate file conversion process\n            return f\"File converted to {output_format}\"\n        except UnsupportedFormatException as e:\n            return str(e)\n\n# Example Usage\nconverter = FileConverter()\nresult = converter.convert('example.txt', 'xml')\nprint(result)  # Output: Format 'xml' is not supported.\nresult = converter.convert('example.txt', 'csv')\nprint(result)  # Output: File converted to csv\n```"
  },
  {
    "task": "Implement a function that sends HTTP requests and catches exceptions for invalid response status codes.",
    "code": "```python\nimport requests\n\ndef send_request(url):\n    try:\n        response = requests.get(url)\n        response.raise_for_status()\n        return response.content\n    except requests.exceptions.HTTPError as http_err:\n        print(f'HTTP error occurred: {http_err}')\n    except Exception as err:\n        print(f'Other error occurred: {err}')\n    return None\n```"
  },
  {
    "task": "Develop a program that interacts with a message queue and handles message delivery exceptions.",
    "code": "```python\nimport queue\n\nclass MessageQueue:\n    def __init__(self):\n        self.queue = queue.Queue()\n\n    def send_message(self, message):\n        try:\n            # Simulating sending a message to a queue\n            if not message:\n                raise ValueError(\"Message is empty\")\n            self.queue.put(message)\n            print(f\"Message sent: {message}\")\n        except ValueError as ve:\n            print(f\"Failed to send message: {ve}\")\n        except Exception as e:\n            print(f\"An unexpected error occurred: {e}\")\n\n    def receive_message(self):\n        try:\n            if self.queue.empty():\n                raise queue.Empty(\"No messages in queue\")\n            message = self.queue.get_nowait()\n            print(f\"Message received: {message}\")\n            return message\n        except queue.Empty as qe:\n            print(f\"Failed to receive message: {qe}\")\n        except Exception as e:\n            print(f\"An unexpected error occurred: {e}\")\n\n# Example usage\nmq = MessageQueue()\nmq.send_message(\"Hello, World!\")\nmq.receive_message()\nmq.receive_message()  # This will trigger an exception\nmq.send_message(\"\")   # This will trigger an exception\n```"
  },
  {
    "task": "Write a function that reads user input and catches exceptions for unexpected data types.",
    "code": "```python\ndef read_user_input():\n    try:\n        user_input = input(\"Enter a number: \")\n        number = int(user_input)\n        print(f\"You entered the number: {number}\")\n    except ValueError:\n        print(\"Error: Please enter a valid integer.\")\n```"
  },
  {
    "task": "Create a system that processes transactions and manages exceptions for insufficient funds.",
    "code": "```python\nclass InsufficientFundsException(Exception):\n    pass\n\nclass Account:\n    def __init__(self, balance=0):\n        self.balance = balance\n\n    def deposit(self, amount):\n        if amount <= 0:\n            raise ValueError(\"Deposit amount must be positive.\")\n        self.balance += amount\n\n    def withdraw(self, amount):\n        if amount <= 0:\n            raise ValueError(\"Withdrawal amount must be positive.\")\n        if amount > self.balance:\n            raise InsufficientFundsException(\"Insufficient funds for this transaction.\")\n        self.balance -= amount\n\n    def get_balance(self):\n        return self.balance\n\ndef process_transaction(account, transaction_type, amount):\n    try:\n        if transaction_type == \"deposit\":\n            account.deposit(amount)\n        elif transaction_type == \"withdraw\":\n            account.withdraw(amount)\n        else:\n            raise ValueError(\"Invalid transaction type.\")\n    except (ValueError, InsufficientFundsException) as e:\n        print(f\"Transaction failed: {e}\")\n    else:\n        print(f\"Transaction successful. New balance: {account.get_balance()}\")\n\n# Example usage\naccount = Account(100)\nprocess_transaction(account, \"deposit\", 50)\nprocess_transaction(account, \"withdraw\", 200)\nprocess_transaction(account, \"withdraw\", 50)\n```"
  },
  {
    "task": "Design a function that generates random numbers and handles exceptions when the range is invalid.",
    "code": "```python\nimport random\n\ndef generate_random_number(start, end):\n    try:\n        if start > end:\n            raise ValueError(\"Start must not be greater than end\")\n        return random.randint(start, end)\n    except ValueError as e:\n        print(f\"Error: {e}\")\n\n# Example usage\nprint(generate_random_number(1, 10))  # Valid range\nprint(generate_random_number(10, 1))  # Invalid range\n```"
  },
  {
    "task": "Implement a program that performs image processing and catches exceptions for unsupported file dimensions.",
    "code": "```python\nfrom PIL import Image\n\ndef process_image(file_path):\n    try:\n        with Image.open(file_path) as img:\n            width, height = img.size\n            if width > 4096 or height > 4096:\n                raise ValueError(\"Unsupported file dimensions\")\n            # Perform image processing here\n            # For demonstration, let's just return the size\n            return img.size\n    except FileNotFoundError:\n        print(\"File not found.\")\n    except ValueError as ve:\n        print(f\"Error: {ve}\")\n    except Exception as e:\n        print(f\"An unexpected error occurred: {e}\")\n\n# Example usage:\n# result = process_image(\"path_to_image.jpg\")\n# print(result)\n```"
  },
  {
    "task": "Write a function that manipulates strings and manages exceptions for invalid operations.",
    "code": "```python\ndef manipulate_string(s, operation):\n    try:\n        if operation == 'reverse':\n            return s[::-1]\n        elif operation == 'uppercase':\n            return s.upper()\n        elif operation == 'lowercase':\n            return s.lower()\n        elif operation == 'capitalize':\n            return s.capitalize()\n        else:\n            raise ValueError(\"Invalid operation specified.\")\n    except Exception as e:\n        return f\"An error occurred: {str(e)}\"\n\n# Example usage\nprint(manipulate_string(\"Hello, World!\", \"reverse\"))\nprint(manipulate_string(\"Hello, World!\", \"uppercase\"))\nprint(manipulate_string(\"Hello, World!\", \"lowercase\"))\nprint(manipulate_string(\"Hello, World!\", \"capitalize\"))\nprint(manipulate_string(\"Hello, World!\", \"unknown\"))\n```"
  },
  {
    "task": "Create a script that automates tasks and handles exceptions for missing dependencies.",
    "code": "```python\nimport subprocess\nimport sys\n\ndef check_and_install(package):\n    try:\n        __import__(package)\n    except ImportError:\n        try:\n            subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", package])\n        except subprocess.CalledProcessError as e:\n            print(f\"Failed to install {package}. Error: {e}\")\n            sys.exit(1)\n\ndef main():\n    dependencies = ['requests', 'numpy']  # Add any other dependencies here\n    for package in dependencies:\n        check_and_install(package)\n\n    try:\n        import requests\n        import numpy as np\n        # Perform automated tasks here\n        response = requests.get('https://api.example.com/data')\n        data = np.array(response.json())\n        print(data)\n    except requests.RequestException as e:\n        print(f\"An error occurred with the request: {e}\")\n    except Exception as e:\n        print(f\"An unexpected error occurred: {e}\")\n\nif __name__ == \"__main__\":\n    main()\n```"
  },
  {
    "task": "Develop a function that accesses nested data structures and manages key access exceptions.",
    "code": "```python\ndef access_nested_data(data, keys):\n    try:\n        result = data\n        for key in keys:\n            result = result[key]\n        return result\n    except KeyError as e:\n        return f\"Key error: {e}\"\n    except TypeError as e:\n        return f\"Type error: {e}\"\n\n# Example usage:\n# nested_data = {'a': {'b': {'c': 1}}}\n# keys = ['a', 'b', 'c']\n# print(access_nested_data(nested_data, keys))  # Should output: 1\n# keys = ['a', 'b', 'x']\n# print(access_nested_data(nested_data, keys))  # Should output: Key error: 'x'\n```"
  },
  {
    "task": "Design a program that synchronizes data between sources and handles data mismatch exceptions.",
    "code": "```python\nclass DataMismatchException(Exception):\n    pass\n\ndef synchronize_data(source1, source2):\n    try:\n        if source1 != source2:\n            raise DataMismatchException(\"Data mismatch detected between sources.\")\n        print(\"Data synchronized successfully.\")\n    except DataMismatchException as e:\n        print(f\"Error: {e}\")\n\n# Example usage\nsource1_data = {\"key1\": \"value1\", \"key2\": \"value2\"}\nsource2_data = {\"key1\": \"value1\", \"key2\": \"value3\"}\n\nsynchronize_data(source1_data, source2_data)\n```"
  },
  {
    "task": "Write a function that interacts with hardware devices and handles connection failure exceptions.",
    "code": "```python\ndef interact_with_hardware():\n    try:\n        # Simulate interaction with a hardware device\n        connect_to_device()\n    except ConnectionError as e:\n        print(f\"Failed to connect to the device: {e}\")\n\ndef connect_to_device():\n    # Simulate a connection failure\n    raise ConnectionError(\"Unable to establish a connection to the hardware device.\")\n\ninteract_with_hardware()\n```"
  },
  {
    "task": "Create a tool that compresses files and manages exceptions for unsupported compression formats.",
    "code": "```python\nimport os\nimport zipfile\n\ndef compress_file(file_path, output_path):\n    try:\n        if not file_path.lower().endswith('.txt'):\n            raise ValueError(\"Unsupported file format for compression\")\n        \n        with zipfile.ZipFile(output_path, 'w', zipfile.ZIP_DEFLATED) as zipf:\n            zipf.write(file_path, os.path.basename(file_path))\n        print(\"File compressed successfully.\")\n    \n    except ValueError as ve:\n        print(f\"Error: {ve}\")\n    except FileNotFoundError:\n        print(\"Error: The file was not found.\")\n    except Exception as e:\n        print(f\"An unexpected error occurred: {e}\")\n\n# Example usage\ncompress_file('example.txt', 'example.zip')\ncompress_file('example.unsupported', 'example.zip')\n```"
  },
  {
    "task": "Implement a function that parses command-line arguments and handles missing argument exceptions.",
    "code": "```python\nimport sys\n\ndef parse_args():\n    try:\n        if len(sys.argv) < 2:\n            raise ValueError(\"Missing command-line arguments.\")\n        # Process arguments here\n        # For demonstration, just print the arguments\n        print(\"Arguments:\", sys.argv[1:])\n    except ValueError as e:\n        print(f\"Error: {e}\")\n\nif __name__ == \"__main__\":\n    parse_args()\n```"
  },
  {
    "task": "Develop a program that simulates user interactions and manages timing exceptions.",
    "code": "```python\nimport time\n\ndef simulate_user_interaction():\n    try:\n        # Simulate user interaction with a delay\n        delay = int(input(\"Enter a delay in seconds for the interaction: \"))\n        if delay < 0:\n            raise ValueError(\"Delay cannot be negative.\")\n        print(\"Simulating user interaction...\")\n        time.sleep(delay)\n        print(\"User interaction complete.\")\n    except ValueError as ve:\n        print(f\"Value Error: {ve}\")\n    except KeyboardInterrupt:\n        print(\"\\nUser canceled the operation.\")\n    except Exception as e:\n        print(f\"An unexpected error occurred: {e}\")\n\nif __name__ == \"__main__\":\n    simulate_user_interaction()\n```"
  },
  {
    "task": "Write a function that encrypts data and handles exceptions for unsupported encryption algorithms.",
    "code": "```python\nimport hashlib\n\ndef encrypt_data(data, algorithm='sha256'):\n    try:\n        if algorithm not in hashlib.algorithms_available:\n            raise ValueError(f\"Unsupported encryption algorithm: {algorithm}\")\n\n        hash_func = hashlib.new(algorithm)\n        hash_func.update(data.encode('utf-8'))\n        return hash_func.hexdigest()\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n\n# Example usage\nresult = encrypt_data(\"example data\", \"sha256\")\nif result:\n    print(\"Encrypted data:\", result)\n```"
  },
  {
    "task": "Create a system that aggregates data and manages exceptions for data inconsistency.",
    "code": "```python\nclass DataAggregator:\n    def __init__(self):\n        self.data = []\n\n    def add_data(self, new_data):\n        try:\n            if not isinstance(new_data, (int, float)):\n                raise ValueError(\"Data must be an integer or a float.\")\n            self.data.append(new_data)\n        except ValueError as e:\n            print(f\"Error adding data: {e}\")\n\n    def aggregate_data(self):\n        try:\n            if not self.data:\n                raise ValueError(\"No data to aggregate.\")\n            return sum(self.data) / len(self.data)\n        except ValueError as e:\n            print(f\"Error during aggregation: {e}\")\n            return None\n\n# Example usage:\naggregator = DataAggregator()\naggregator.add_data(10)\naggregator.add_data(20)\naggregator.add_data(\"invalid\")  # This will trigger an exception\naggregator.add_data(30)\nresult = aggregator.aggregate_data()\nif result is not None:\n    print(f\"Aggregated data: {result}\")\n```"
  },
  {
    "task": "Design a program that processes real-time data streams and handles connection drop exceptions.",
    "code": "```python\nimport time\nimport random\n\nclass DataStreamProcessor:\n    def __init__(self):\n        self.connected = False\n\n    def connect(self):\n        # Simulate connection attempt\n        if random.choice([True, False]):\n            self.connected = True\n            print(\"Connected to data stream.\")\n        else:\n            raise ConnectionError(\"Failed to connect to data stream.\")\n\n    def disconnect(self):\n        self.connected = False\n        print(\"Disconnected from data stream.\")\n\n    def process_data(self):\n        if not self.connected:\n            raise ConnectionError(\"No connection to process data.\")\n\n        # Simulate data processing\n        print(\"Processing data...\")\n\ndef main():\n    processor = DataStreamProcessor()\n\n    while True:\n        try:\n            if not processor.connected:\n                processor.connect()\n            processor.process_data()\n            time.sleep(1)  # Simulate real-time data processing delay\n        except ConnectionError as e:\n            print(f\"Connection error: {e}. Attempting to reconnect...\")\n            time.sleep(2)  # Wait before retrying to connect\n\nif __name__ == \"__main__\":\n    main()\n```"
  },
  {
    "task": "Implement a function that performs scientific calculations and manages precision exceptions.",
    "code": "```python\nimport math\n\ndef scientific_calculation(x):\n    try:\n        result = math.log(x) / math.sqrt(x)\n    except ValueError as e:\n        return f\"Error: {str(e)}\"\n    except ZeroDivisionError as e:\n        return f\"Error: {str(e)}\"\n    return result\n```"
  },
  {
    "task": "Write a script that generates reports and handles exceptions for missing data sources.",
    "code": "```python\nimport os\n\ndef load_data_source(file_path):\n    if not os.path.exists(file_path):\n        raise FileNotFoundError(f\"Data source not found: {file_path}\")\n    # Simulate loading data\n    return f\"Data from {file_path}\"\n\ndef generate_report(data):\n    # Simulate report generation\n    return f\"Report based on {data}\"\n\ndef main():\n    data_sources = [\"data/source1.csv\", \"data/source2.csv\", \"data/missing.csv\"]\n    reports = []\n\n    for source in data_sources:\n        try:\n            data = load_data_source(source)\n            report = generate_report(data)\n            reports.append(report)\n        except FileNotFoundError as e:\n            print(e)\n    \n    for report in reports:\n        print(report)\n\nif __name__ == \"__main__\":\n    main()\n```"
  },
  {
    "task": "Create a program that validates digital certificates and manages trust exceptions.",
    "code": "```python\nimport ssl\nimport socket\n\ndef validate_certificate(hostname, port=443):\n    context = ssl.create_default_context()\n\n    try:\n        with socket.create_connection((hostname, port)) as conn:\n            with context.wrap_socket(conn, server_hostname=hostname) as ssl_sock:\n                cert = ssl_sock.getpeercert()\n                ssl.match_hostname(cert, hostname)\n                print(f\"Certificate for {hostname} is valid.\")\n                return True\n    except ssl.CertificateError as e:\n        print(f\"Certificate error: {e}\")\n    except ssl.SSLError as e:\n        print(f\"SSL error: {e}\")\n    except Exception as e:\n        print(f\"An unexpected error occurred: {e}\")\n\n    return False\n\ndef trust_exception_handler(func):\n    def wrapper(*args, **kwargs):\n        try:\n            return func(*args, **kwargs)\n        except ssl.CertificateError:\n            print(\"Handling certificate exception: Trusting certificate temporarily.\")\n            return True\n        except Exception as e:\n            print(f\"Exception handled: {e}\")\n            return False\n    return wrapper\n\n@trust_exception_handler\ndef connect_with_trust_exception(hostname, port=443):\n    return validate_certificate(hostname, port)\n\n# Example usage:\nif __name__ == \"__main__\":\n    hostname = \"www.example.com\"\n    validate_certificate(hostname)\n    connect_with_trust_exception(hostname)\n```"
  },
  {
    "task": "Develop a function that schedules tasks and handles exceptions for scheduling conflicts.",
    "code": "```python\nclass ScheduleConflictException(Exception):\n    pass\n\nclass TaskScheduler:\n    def __init__(self):\n        self.schedule = {}\n\n    def add_task(self, task_name, time_slot):\n        if time_slot in self.schedule:\n            raise ScheduleConflictException(f\"Time slot {time_slot} is already occupied.\")\n        self.schedule[time_slot] = task_name\n\ndef schedule_tasks(tasks):\n    scheduler = TaskScheduler()\n    for task_name, time_slot in tasks:\n        try:\n            scheduler.add_task(task_name, time_slot)\n            print(f\"Task '{task_name}' scheduled at {time_slot}.\")\n        except ScheduleConflictException as e:\n            print(f\"Failed to schedule task '{task_name}': {e}\")\n\n# Example usage\ntasks_to_schedule = [\n    (\"Task 1\", \"10:00 AM\"),\n    (\"Task 2\", \"11:00 AM\"),\n    (\"Task 3\", \"10:00 AM\"),  # This will cause a conflict\n]\n\nschedule_tasks(tasks_to_schedule)\n```"
  },
  {
    "task": "Design a system that manages user sessions and handles session timeout exceptions.",
    "code": "```python\nimport time\n\nclass SessionTimeoutException(Exception):\n    pass\n\nclass UserSession:\n    def __init__(self, user_id, timeout=300):\n        self.user_id = user_id\n        self.start_time = time.time()\n        self.timeout = timeout\n\n    def check_session(self):\n        current_time = time.time()\n        if current_time - self.start_time > self.timeout:\n            raise SessionTimeoutException(f\"Session for user {self.user_id} has timed out.\")\n\n    def refresh_session(self):\n        self.start_time = time.time()\n\nclass SessionManager:\n    def __init__(self):\n        self.sessions = {}\n\n    def create_session(self, user_id, timeout=300):\n        session = UserSession(user_id, timeout)\n        self.sessions[user_id] = session\n\n    def check_user_session(self, user_id):\n        if user_id in self.sessions:\n            try:\n                self.sessions[user_id].check_session()\n                print(f\"Session for user {user_id} is active.\")\n            except SessionTimeoutException as e:\n                print(e)\n                del self.sessions[user_id]\n        else:\n            print(f\"No active session for user {user_id}.\")\n\n    def refresh_user_session(self, user_id):\n        if user_id in self.sessions:\n            self.sessions[user_id].refresh_session()\n            print(f\"Session for user {user_id} has been refreshed.\")\n        else:\n            print(f\"No session found for user {user_id} to refresh.\")\n```"
  },
  {
    "task": "Write a function that processes audio files and manages exceptions for unsupported audio formats.",
    "code": "```python\ndef process_audio_file(file_path):\n    try:\n        # Imagine this function processes the audio file\n        process_file(file_path)\n    except UnsupportedAudioFormatError as e:\n        print(f\"Error: Unsupported audio format for file {file_path}. {str(e)}\")\n    except Exception as e:\n        print(f\"An unexpected error occurred while processing {file_path}: {str(e)}\")\n\n# Simulated function to represent audio processing\ndef process_file(file_path):\n    # Raise an example exception for an unsupported format\n    raise UnsupportedAudioFormatError(\"This format is not supported\")\n\nclass UnsupportedAudioFormatError(Exception):\n    pass\n\n# Example usage\nprocess_audio_file(\"example_audio.mp3\")\n```"
  },
  {
    "task": "Create a service that sends notifications and handles exceptions for unreachable destinations.",
    "code": "```python\nclass NotificationService:\n    def __init__(self):\n        self.destinations = []\n\n    def add_destination(self, destination):\n        self.destinations.append(destination)\n\n    def send_notification(self, message):\n        for destination in self.destinations:\n            try:\n                self._send_to_destination(destination, message)\n            except Exception as e:\n                print(f\"Failed to send to {destination}: {e}\")\n\n    def _send_to_destination(self, destination, message):\n        if not self._is_reachable(destination):\n            raise Exception(\"Destination unreachable\")\n        print(f\"Notification sent to {destination}: {message}\")\n\n    def _is_reachable(self, destination):\n        # Simulating reachability check\n        return destination != \"unreachable_destination\"\n\n# Example usage:\nservice = NotificationService()\nservice.add_destination(\"reachable_destination\")\nservice.add_destination(\"unreachable_destination\")\nservice.send_notification(\"This is a test notification.\")\n```"
  },
  {
    "task": "Implement a program that performs data migration and manages data transformation exceptions.",
    "code": "```python\nclass DataMigrationException(Exception):\n    pass\n\nclass DataTransformer:\n    def transform(self, data):\n        # Simulate transformation logic\n        if data == 'bad_data':\n            raise DataMigrationException(\"Data transformation failed.\")\n        return data.upper()\n\nclass DataMigrator:\n    def __init__(self, transformer):\n        self.transformer = transformer\n\n    def migrate(self, data_list):\n        transformed_data = []\n        for data in data_list:\n            try:\n                transformed = self.transformer.transform(data)\n                transformed_data.append(transformed)\n            except DataMigrationException as e:\n                print(f\"Exception caught during data migration: {e}\")\n        return transformed_data\n\n# Example usage\ntransformer = DataTransformer()\nmigrator = DataMigrator(transformer)\ndata_to_migrate = ['good_data', 'bad_data', 'more_good_data']\nresult = migrator.migrate(data_to_migrate)\nprint(\"Transformed Data:\", result)\n```"
  },
  {
    "task": "Develop a function that processes video files and handles codec compatibility exceptions.",
    "code": "```python\ndef process_video(file_path):\n    try:\n        # Simulate opening and processing a video file\n        if not is_codec_compatible(file_path):\n            raise CodecCompatibilityError(\"Codec is not compatible.\")\n        # Process the video file\n        print(f\"Processing video: {file_path}\")\n    except CodecCompatibilityError as e:\n        print(f\"Error processing {file_path}: {e}\")\n\nclass CodecCompatibilityError(Exception):\n    pass\n\ndef is_codec_compatible(file_path):\n    # Dummy implementation for codec compatibility check\n    # Replace this with actual codec checking logic\n    return False\n\n# Example usage\nprocess_video(\"example_video.mp4\")\n```"
  },
  {
    "task": "Write a function that manages memory allocation and catches out-of-memory exceptions.",
    "code": "```python\ndef manage_memory_allocation(size):\n    try:\n        # Attempt to allocate a large amount of memory\n        large_list = [0] * size\n        return large_list\n    except MemoryError:\n        print(\"Memory allocation failed: Out of memory.\")\n        return None\n```"
  },
  {
    "task": "Create a program that processes financial transactions and handles currency conversion exceptions.",
    "code": "```python\nclass CurrencyConversionError(Exception):\n    pass\n\ndef convert_currency(amount, from_currency, to_currency, exchange_rates):\n    try:\n        if from_currency not in exchange_rates or to_currency not in exchange_rates[from_currency]:\n            raise CurrencyConversionError(f\"Conversion rate not available from {from_currency} to {to_currency}.\")\n        rate = exchange_rates[from_currency][to_currency]\n        return amount * rate\n    except CurrencyConversionError as e:\n        print(f\"Error: {e}\")\n        return None\n\ndef process_transaction(amount, from_currency, to_currency, exchange_rates):\n    try:\n        converted_amount = convert_currency(amount, from_currency, to_currency, exchange_rates)\n        if converted_amount is None:\n            raise CurrencyConversionError(\"Transaction failed due to currency conversion error.\")\n        print(f\"Transaction successful: {amount} {from_currency} = {converted_amount} {to_currency}\")\n    except CurrencyConversionError as e:\n        print(f\"Transaction Error: {e}\")\n\nexchange_rates = {\n    'USD': {'EUR': 0.85, 'JPY': 110.0},\n    'EUR': {'USD': 1.18, 'JPY': 129.53},\n    'JPY': {'USD': 0.0091, 'EUR': 0.0077}\n}\n\n# Example transactions\nprocess_transaction(100, 'USD', 'EUR', exchange_rates)\nprocess_transaction(100, 'EUR', 'USD', exchange_rates)\nprocess_transaction(100, 'USD', 'GBP', exchange_rates)  # Should trigger an exception\n```"
  },
  {
    "task": "Design a function that interacts with cloud storage and manages access permission exceptions.",
    "code": "```python\nimport random\n\nclass CloudStoragePermissionError(Exception):\n    pass\n\ndef interact_with_cloud_storage():\n    # Simulate permission error randomly\n    if random.choice([True, False]):\n        raise CloudStoragePermissionError(\"Access denied: insufficient permissions.\")\n    return \"Accessed cloud storage successfully.\"\n\ndef manage_cloud_storage_access():\n    try:\n        result = interact_with_cloud_storage()\n        print(result)\n    except CloudStoragePermissionError as e:\n        print(f\"Error: {e}\")\n\n# Example usage\nmanage_cloud_storage_access()\n```"
  },
  {
    "task": "Implement a script that automates deployment and handles exceptions for missing configuration files.",
    "code": "```python\nimport os\n\ndef read_config(file_path):\n    if not os.path.exists(file_path):\n        raise FileNotFoundError(f\"Configuration file not found: {file_path}\")\n    with open(file_path, 'r') as file:\n        return file.read()\n\ndef deploy_application(config_data):\n    print(\"Deploying application with the following configuration:\")\n    print(config_data)\n\ndef main():\n    config_path = 'config.txt'\n    try:\n        config_data = read_config(config_path)\n        deploy_application(config_data)\n    except FileNotFoundError as e:\n        print(f\"Deployment failed: {e}\")\n\nif __name__ == \"__main__\":\n    main()\n```"
  },
  {
    "task": "Write a function that normalizes data and handles exceptions for invalid data ranges.",
    "code": "```python\ndef normalize_data(data):\n    try:\n        min_val = min(data)\n        max_val = max(data)\n        if min_val == max_val:\n            raise ValueError(\"Data range is zero, normalization is not possible.\")\n        return [(float(x) - min_val) / (max_val - min_val) for x in data]\n    except TypeError:\n        raise ValueError(\"Data contains non-numeric values.\")\n    except Exception as e:\n        raise ValueError(f\"An error occurred during normalization: {str(e)}\")\n```"
  },
  {
    "task": "Create a system that monitors application performance and handles threshold breach exceptions.",
    "code": "```python\nimport random\nimport time\n\nclass ThresholdBreachException(Exception):\n    def __init__(self, message):\n        super().__init__(message)\n\nclass PerformanceMonitor:\n    def __init__(self, threshold):\n        self.threshold = threshold\n\n    def check_performance(self):\n        # Simulate checking performance, returning a random metric value\n        return random.uniform(0, 100)\n\n    def monitor(self):\n        try:\n            metric_value = self.check_performance()\n            if metric_value > self.threshold:\n                raise ThresholdBreachException(f\"Threshold breached: Metric value {metric_value} exceeds threshold {self.threshold}\")\n            print(f\"Performance is within acceptable range: {metric_value}\")\n        except ThresholdBreachException as e:\n            print(f\"Exception: {e}\")\n\nif __name__ == \"__main__\":\n    threshold = 75.0\n    monitor = PerformanceMonitor(threshold)\n    while True:\n        monitor.monitor()\n        time.sleep(1)\n```"
  },
  {
    "task": "Develop a program that processes social media data and manages API limit exceptions.",
    "code": "```python\nimport time\nimport requests\n\nclass APILimitException(Exception):\n    pass\n\ndef fetch_social_media_data(api_endpoint):\n    try:\n        response = requests.get(api_endpoint)\n        if response.status_code == 429:  # HTTP status code for \"Too Many Requests\"\n            raise APILimitException(\"API rate limit exceeded\")\n        response.raise_for_status()\n        return response.json()\n    except requests.exceptions.HTTPError as e:\n        print(f\"HTTP error occurred: {e}\")\n    except requests.exceptions.RequestException as e:\n        print(f\"Request exception occurred: {e}\")\n    except APILimitException as e:\n        print(e)\n        time.sleep(60)  # Wait before retrying\n        return fetch_social_media_data(api_endpoint)\n    except Exception as e:\n        print(f\"An unexpected error occurred: {e}\")\n\napi_endpoint = \"https://api.socialmedia.com/data\"\ndata = fetch_social_media_data(api_endpoint)\n```"
  },
  {
    "task": "Design a function that integrates with payment gateways and handles payment failure exceptions.",
    "code": "```python\nclass PaymentGatewayError(Exception):\n    pass\n\nclass PaymentGateway:\n    def process_payment(self, amount, currency):\n        # Simulate payment processing\n        if amount <= 0:\n            raise PaymentGatewayError(\"Invalid payment amount.\")\n        if currency not in [\"USD\", \"EUR\", \"GBP\"]:\n            raise PaymentGatewayError(\"Unsupported currency.\")\n        # Simulate random failure\n        import random\n        if random.choice([True, False]):\n            raise PaymentGatewayError(\"Payment processing failed.\")\n        return \"Payment successful\"\n\ndef process_payment_with_handling(amount, currency):\n    gateway = PaymentGateway()\n    try:\n        result = gateway.process_payment(amount, currency)\n        return result\n    except PaymentGatewayError as e:\n        return f\"Payment failed: {str(e)}\"\n\n# Example usage:\n# result = process_payment_with_handling(100, 'USD')\n# print(result)\n```"
  },
  {
    "task": "Write a function that backs up data and handles exceptions for unavailable storage media.",
    "code": "```python\ndef backup_data(data, storage_path):\n    try:\n        with open(storage_path, 'w') as file:\n            file.write(data)\n        return \"Backup successful\"\n    except FileNotFoundError:\n        return \"Error: Storage media not found\"\n    except PermissionError:\n        return \"Error: Permission denied\"\n    except Exception as e:\n        return f\"An unexpected error occurred: {e}\"\n\n# Example usage:\n# result = backup_data(\"Sample data\", \"/path/to/storage\")\n# print(result)\n```"
  },
  {
    "task": "Create a tool that manages software updates and handles exceptions for version conflicts.",
    "code": "```python\nclass VersionConflictError(Exception):\n    pass\n\nclass SoftwareUpdateManager:\n    def __init__(self):\n        self.installed_versions = {}\n\n    def install_update(self, software_name, new_version):\n        try:\n            current_version = self.installed_versions.get(software_name, None)\n            if current_version and current_version >= new_version:\n                raise VersionConflictError(f\"Version conflict for {software_name}: {current_version} >= {new_version}\")\n            self.installed_versions[software_name] = new_version\n            print(f\"Updated {software_name} to version {new_version}.\")\n        except VersionConflictError as e:\n            print(f\"Error: {e}\")\n\n# Example usage\nupdate_manager = SoftwareUpdateManager()\nupdate_manager.install_update(\"SoftwareA\", 1.0)\nupdate_manager.install_update(\"SoftwareA\", 0.9)\nupdate_manager.install_update(\"SoftwareA\", 1.1)\n```"
  },
  {
    "task": "Implement a program that performs sentiment analysis and manages exceptions for ambiguous texts.",
    "code": "```python\nfrom textblob import TextBlob\nfrom textblob.exceptions import NotTranslated\n\ndef analyze_sentiment(text):\n    try:\n        blob = TextBlob(text)\n        sentiment = blob.sentiment\n        return sentiment.polarity, sentiment.subjectivity\n    except NotTranslated:\n        return \"Error: Text could not be analyzed\"\n    except Exception as e:\n        return f\"An error occurred: {str(e)}\"\n\ntexts = [\n    \"I love this product!\",\n    \"This is the worst service ever.\",\n    \"It's okay, not the best but not the worst.\",\n    \"Ambiguous text that might cause issues\",\n    \"\"\n]\n\nfor text in texts:\n    result = analyze_sentiment(text)\n    print(f\"Text: {text}\\nSentiment Result: {result}\\n\")\n```"
  },
  {
    "task": "Develop a function that manages user authentication and handles credential mismatch exceptions.",
    "code": "```python\nclass AuthenticationError(Exception):\n    pass\n\ndef authenticate_user(username, password, user_db):\n    try:\n        if username not in user_db:\n            raise AuthenticationError(\"Username not found.\")\n        if user_db[username] != password:\n            raise AuthenticationError(\"Password is incorrect.\")\n        return \"Authentication successful.\"\n    except AuthenticationError as e:\n        return str(e)\n\n# Example usage:\nuser_database = {\n    'user1': 'pass123',\n    'user2': 'secure456'\n}\n\nprint(authenticate_user('user1', 'pass123', user_database))  # Should print \"Authentication successful.\"\nprint(authenticate_user('user1', 'wrongpass', user_database))  # Should print \"Password is incorrect.\"\nprint(authenticate_user('user3', 'nopass', user_database))  # Should print \"Username not found.\"\n```"
  },
  {
    "task": "Write a program that processes geographic data and handles exceptions for invalid coordinates.",
    "code": "```python\ndef process_geographic_data(coordinates):\n    try:\n        for coord in coordinates:\n            latitude, longitude = coord\n            if not (-90 <= latitude <= 90 and -180 <= longitude <= 180):\n                raise ValueError(f\"Invalid coordinates: {coord}\")\n            # Simulate processing the valid coordinates\n            print(f\"Processing coordinates: {coord}\")\n    except ValueError as e:\n        print(e)\n\n# Example usage\ncoordinates = [(34.0522, -118.2437), (91, 45), (40.7128, -74.0060)]\nprocess_geographic_data(coordinates)\n```"
  },
  {
    "task": "Create a script that manages network configurations and handles exceptions for invalid syntax.",
    "code": "```python\ndef parse_network_config(config):\n    try:\n        # Simulate parsing network configuration\n        if \"INVALID\" in config:\n            raise ValueError(\"Invalid syntax in network configuration\")\n        return \"Network configuration parsed successfully\"\n    except ValueError as e:\n        return f\"Error: {e}\"\n\ndef main():\n    configs = [\n        \"VALID CONFIG\",\n        \"ANOTHER VALID CONFIG\",\n        \"INVALID CONFIG\"\n    ]\n    \n    for config in configs:\n        result = parse_network_config(config)\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
  },
  {
    "task": "Design a function that processes biometric data and handles exceptions for sensor errors.",
    "code": "```python\ndef process_biometric_data(data):\n    try:\n        # Simulate processing biometric data\n        if not data:\n            raise ValueError(\"No data received\")\n        # Further processing logic would go here\n        return \"Processed data successfully\"\n    except ValueError as ve:\n        return f\"Error: {ve}\"\n    except Exception as e:\n        return f\"An unexpected error occurred: {e}\"\n\n# Example usage with exception handling\nbiometric_data = None  # Simulate sensor error with None data\nresult = process_biometric_data(biometric_data)\nprint(result)\n```"
  },
  {
    "task": "Implement a system that manages access control and handles exceptions for unauthorized access attempts.",
    "code": "```python\nclass AccessControlSystem:\n    def __init__(self):\n        self.authorized_users = {\"admin\": \"admin123\", \"user1\": \"password1\"}\n\n    def authenticate(self, username, password):\n        if username in self.authorized_users and self.authorized_users[username] == password:\n            return True\n        else:\n            raise UnauthorizedAccessException(\"Unauthorized access attempt.\")\n\nclass UnauthorizedAccessException(Exception):\n    pass\n\ndef main():\n    system = AccessControlSystem()\n    try:\n        username = input(\"Enter username: \")\n        password = input(\"Enter password: \")\n        if system.authenticate(username, password):\n            print(\"Access granted.\")\n    except UnauthorizedAccessException as e:\n        print(e)\n\nif __name__ == \"__main__\":\n    main()\n```"
  },
  {
    "task": "Write a function that performs load balancing and handles exceptions for unreachable nodes.",
    "code": "```python\nimport random\n\nclass NodeUnreachableException(Exception):\n    pass\n\ndef is_node_reachable(node):\n    return random.choice([True, False])\n\ndef load_balancer(nodes):\n    for node in nodes:\n        try:\n            if not is_node_reachable(node):\n                raise NodeUnreachableException(f\"Node {node} is unreachable.\")\n            print(f\"Node {node} is reachable.\")\n            # Perform load balancing task here\n        except NodeUnreachableException as e:\n            print(e)\n\n# Example usage\nnodes = [\"Node1\", \"Node2\", \"Node3\", \"Node4\"]\nload_balancer(nodes)\n```"
  },
  {
    "task": "Create a program that simulates virtual environments and manages resource allocation exceptions.",
    "code": "```python\nclass VirtualEnvironment:\n    def __init__(self, name, max_resources):\n        self.name = name\n        self.max_resources = max_resources\n        self.allocated_resources = 0\n\n    def allocate_resources(self, resources):\n        try:\n            if resources < 0:\n                raise ValueError(\"Cannot allocate negative resources.\")\n            if self.allocated_resources + resources > self.max_resources:\n                raise ResourceAllocationError(\"Resource allocation exceeded limits.\")\n            self.allocated_resources += resources\n            print(f\"Allocated {resources} resources to {self.name}.\")\n        except ResourceAllocationError as e:\n            print(f\"Error: {e}\")\n        except ValueError as e:\n            print(f\"Error: {e}\")\n\n    def release_resources(self, resources):\n        try:\n            if resources < 0:\n                raise ValueError(\"Cannot release negative resources.\")\n            if resources > self.allocated_resources:\n                raise ResourceReleaseError(\"Cannot release more resources than allocated.\")\n            self.allocated_resources -= resources\n            print(f\"Released {resources} resources from {self.name}.\")\n        except ResourceReleaseError as e:\n            print(f\"Error: {e}\")\n        except ValueError as e:\n            print(f\"Error: {e}\")\n\nclass ResourceAllocationError(Exception):\n    pass\n\nclass ResourceReleaseError(Exception):\n    pass\n\ndef main():\n    env = VirtualEnvironment(\"Dev\", 100)\n    env.allocate_resources(50)\n    env.allocate_resources(60)\n    env.release_resources(30)\n    env.release_resources(80)\n\nif __name__ == \"__main__\":\n    main()\n```"
  },
  {
    "task": "Develop a tool that manages digital rights and handles exceptions for unauthorized content access.",
    "code": "```python\nclass UnauthorizedAccessException(Exception):\n    def __init__(self, message=\"Unauthorized access to content\"):\n        self.message = message\n        super().__init__(self.message)\n\nclass DigitalRightsManager:\n    def __init__(self):\n        self.content_access = {}\n\n    def add_content(self, content_id, access_level):\n        self.content_access[content_id] = access_level\n\n    def request_access(self, user_access_level, content_id):\n        try:\n            if content_id not in self.content_access:\n                raise UnauthorizedAccessException(\"Content not found\")\n            content_access_level = self.content_access[content_id]\n            if user_access_level < content_access_level:\n                raise UnauthorizedAccessException()\n            return f\"Access granted to content {content_id}\"\n        except UnauthorizedAccessException as e:\n            return str(e)\n\n# Example usage:\ndrm = DigitalRightsManager()\ndrm.add_content(\"content_001\", 3)\n\nuser_level = 2\ncontent_id = \"content_001\"\nprint(drm.request_access(user_level, content_id))\n```"
  },
  {
    "task": "Design a function that synchronizes clocks and handles exceptions for time drift.",
    "code": "```python\nimport datetime\n\nclass ClockSyncError(Exception):\n    pass\n\ndef synchronize_clocks(server_time):\n    try:\n        if not isinstance(server_time, datetime.datetime):\n            raise ClockSyncError(\"Invalid server time format.\")\n        \n        local_time = datetime.datetime.now()\n        time_drift = server_time - local_time\n        \n        if abs(time_drift.total_seconds()) > 5:\n            raise ClockSyncError(f\"Time drift too large: {time_drift}.\")\n        \n        # If no exceptions, assume synchronization success\n        return local_time + time_drift\n\n    except ClockSyncError as e:\n        print(f\"Clock synchronization failed: {e}\")\n        return None\n```"
  },
  {
    "task": "Write a script that manages system backups and handles exceptions for insufficient backup space.",
    "code": "```python\nimport shutil\nimport os\n\ndef check_disk_space(required_space, backup_path):\n    total, used, free = shutil.disk_usage(backup_path)\n    return free >= required_space\n\ndef perform_backup(source, backup_path):\n    try:\n        required_space = os.path.getsize(source)\n        if not check_disk_space(required_space, backup_path):\n            raise Exception(\"Insufficient backup space.\")\n\n        shutil.copy(source, backup_path)\n        print(\"Backup completed successfully.\")\n    except Exception as e:\n        print(f\"Backup failed: {e}\")\n\nsource_file = '/path/to/source/file'\nbackup_destination = '/path/to/backup/destination'\n\nperform_backup(source_file, backup_destination)\n```"
  },
  {
    "task": "Create a program that processes natural language text and handles parsing exceptions.",
    "code": "```python\ndef process_text(text):\n    try:\n        # Simulate text processing\n        if not isinstance(text, str):\n            raise ValueError(\"Input must be a string.\")\n        \n        # Example parsing logic, replace with actual processing\n        words = text.split()\n        processed_words = [word.lower() for word in words]\n        return processed_words\n    \n    except ValueError as ve:\n        print(f\"ValueError occurred: {ve}\")\n    except Exception as e:\n        print(f\"An unexpected error occurred: {e}\")\n\n# Example usage\ntext_input = \"This is a sample text\"\nresult = process_text(text_input)\nif result:\n    print(\"Processed text:\", result)\n```"
  },
  {
    "task": "Implement a function that manages thread execution and handles race condition exceptions.",
    "code": "```python\nimport threading\nimport time\n\nclass SharedResource:\n    def __init__(self):\n        self.value = 0\n        self.lock = threading.Lock()\n\n    def increment(self):\n        with self.lock:\n            temp = self.value\n            time.sleep(0.01)  # Simulate some processing delay\n            self.value = temp + 1\n\ndef worker(resource):\n    try:\n        for _ in range(100):\n            resource.increment()\n    except Exception as e:\n        print(f\"Exception occurred: {e}\")\n\ndef manage_threads():\n    resource = SharedResource()\n    threads = []\n\n    for _ in range(10):\n        thread = threading.Thread(target=worker, args=(resource,))\n        threads.append(thread)\n        thread.start()\n\n    for thread in threads:\n        thread.join()\n\n    return resource.value\n\nif __name__ == \"__main__\":\n    final_value = manage_threads()\n    print(f\"Final value: {final_value}\")\n```"
  },
  {
    "task": "Develop a system that integrates with IoT devices and handles connectivity exceptions.",
    "code": "```python\nclass IoTDevice:\n    def __init__(self, device_id):\n        self.device_id = device_id\n\n    def connect(self):\n        # Simulate a connection attempt to an IoT device\n        print(f\"Attempting to connect to device {self.device_id}...\")\n        if self.device_id % 2 == 0:  # Simulate connectivity issues for even IDs\n            raise ConnectionError(f\"Failed to connect to device {self.device_id}.\")\n\n    def send_data(self, data):\n        print(f\"Sending data to device {self.device_id}: {data}\")\n\nclass IoTSystem:\n    def __init__(self, devices):\n        self.devices = devices\n\n    def connect_devices(self):\n        for device in self.devices:\n            try:\n                device.connect()\n                print(f\"Connected to device {device.device_id}.\")\n            except ConnectionError as e:\n                print(e)\n\n    def send_data_to_all(self, data):\n        for device in self.devices:\n            try:\n                device.send_data(data)\n            except Exception as e:\n                print(f\"Error sending data to device {device.device_id}: {e}\")\n\n# Example usage\ndevices = [IoTDevice(device_id=i) for i in range(1, 6)]\nsystem = IoTSystem(devices)\nsystem.connect_devices()\nsystem.send_data_to_all(\"Temperature: 22C\")\n```"
  },
  {
    "task": "Write a function that manages application logging and handles exceptions for log overflow.",
    "code": "```python\nimport logging\nfrom logging.handlers import RotatingFileHandler\n\ndef configure_logger(log_file):\n    logger = logging.getLogger('app_logger')\n    logger.setLevel(logging.DEBUG)\n    handler = RotatingFileHandler(log_file, maxBytes=1024*1024, backupCount=5)\n    formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')\n    handler.setFormatter(formatter)\n    logger.addHandler(handler)\n    return logger\n\ndef manage_logging(log_file, log_message):\n    try:\n        logger = configure_logger(log_file)\n        logger.info(log_message)\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n\n# Example usage:\n# manage_logging('application.log', 'This is a log message.')\n```"
  },
  {
    "task": "Create a tool that visualizes data and handles exceptions for unsupported visualization types.",
    "code": "```python\nimport matplotlib.pyplot as plt\n\nclass UnsupportedVisualizationType(Exception):\n    pass\n\ndef visualize_data(data, visualization_type):\n    try:\n        if visualization_type == 'line':\n            plt.plot(data)\n        elif visualization_type == 'bar':\n            plt.bar(range(len(data)), data)\n        elif visualization_type == 'scatter':\n            plt.scatter(range(len(data)), data)\n        else:\n            raise UnsupportedVisualizationType(f\"Visualization type '{visualization_type}' is not supported.\")\n        plt.show()\n    except UnsupportedVisualizationType as e:\n        print(e)\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n\n# Example usage:\ndata = [1, 2, 3, 4, 5]\nvisualize_data(data, 'line')  # Supported\nvisualize_data(data, 'pie')   # Unsupported\n```"
  },
  {
    "task": "Design a program that performs genetic algorithm simulations and manages exception for invalid mutations.",
    "code": "```python\nimport random\n\nclass GeneticAlgorithm:\n    def __init__(self, population_size, mutation_rate):\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.population = self.initialize_population()\n\n    def initialize_population(self):\n        return [''.join(random.choice('01') for _ in range(10)) for _ in range(self.population_size)]\n\n    def mutate(self, individual):\n        try:\n            if random.random() < self.mutation_rate:\n                mutation_point = random.randint(0, len(individual) - 1)\n                individual = (individual[:mutation_point] +\n                              ('1' if individual[mutation_point] == '0' else '0') +\n                              individual[mutation_point+1:])\n            return individual\n        except Exception as e:\n            print(f\"An error occurred during mutation: {e}\")\n            return individual\n\n    def simulate(self, generations):\n        for _ in range(generations):\n            new_population = []\n            for individual in self.population:\n                new_individual = self.mutate(individual)\n                new_population.append(new_individual)\n            self.population = new_population\n\nga = GeneticAlgorithm(population_size=100, mutation_rate=0.01)\nga.simulate(generations=50)\n```"
  },
  {
    "task": "Implement a function that manages distributed transactions and handles consistency exceptions.",
    "code": "```python\nimport random\n\nclass ConsistencyException(Exception):\n    pass\n\ndef manage_distributed_transaction():\n    try:\n        commit_transaction()\n    except ConsistencyException as e:\n        handle_exception(e)\n\ndef commit_transaction():\n    # Simulate a transaction that might fail for consistency reasons\n    if random.choice([True, False]):\n        raise ConsistencyException(\"Consistency error occurred\")\n\ndef handle_exception(exception):\n    print(f\"Handling exception: {str(exception)}\")\n    # Implement further exception handling logic here\n```"
  },
  {
    "task": "Write a function that handles secure communications and manages encryption key exceptions.",
    "code": "```python\nimport os\n\nclass EncryptionKeyError(Exception):\n    pass\n\ndef secure_communication(message, encrypt=True):\n    try:\n        key = os.getenv('ENCRYPTION_KEY')\n        if not key:\n            raise EncryptionKeyError(\"Encryption key not found\")\n        \n        if encrypt:\n            return f\"encrypted({message}) with key {key}\"\n        else:\n            return f\"decrypted({message}) with key {key}\"\n    \n    except EncryptionKeyError as e:\n        return f\"Error: {str(e)}\"\n    except Exception as e:\n        return f\"An unexpected error occurred: {str(e)}\"\n\n# Example usage\nresult = secure_communication(\"Hello World\")\nprint(result)\n```"
  },
  {
    "task": "Create a system that processes sensor data and handles out-of-range value exceptions.",
    "code": "```python\nclass SensorDataProcessor:\n    def __init__(self, min_value, max_value):\n        self.min_value = min_value\n        self.max_value = max_value\n    \n    def process_sensor_data(self, data):\n        try:\n            if not self.min_value <= data <= self.max_value:\n                raise ValueError(f\"Sensor data {data} is out of range!\")\n            return f\"Processed data: {data}\"\n        except ValueError as e:\n            return f\"Error: {e}\"\n\n# Example usage\nprocessor = SensorDataProcessor(0, 100)\nprint(processor.process_sensor_data(50))  # Processed data: 50\nprint(processor.process_sensor_data(150)) # Error: Sensor data 150 is out of range!\n```"
  },
  {
    "task": "Develop a program that simulates weather patterns and handles model prediction exceptions.",
    "code": "```python\nimport random\n\nclass WeatherModelException(Exception):\n    pass\n\ndef simulate_weather():\n    # Simulate random weather patterns\n    weather_conditions = ['Sunny', 'Rainy', 'Cloudy', 'Stormy', 'Snowy']\n    return random.choice(weather_conditions)\n\ndef predict_weather():\n    try:\n        if random.random() < 0.1:  # 10% chance to simulate a model prediction failure\n            raise WeatherModelException(\"Weather model prediction failed.\")\n        return simulate_weather()\n    except WeatherModelException as e:\n        return f\"Error: {e}\"\n\nif __name__ == \"__main__\":\n    for _ in range(10):\n        prediction = predict_weather()\n        print(f\"Weather prediction: {prediction}\")\n```"
  },
  {
    "task": "Design a function that manages API versioning and handles backward compatibility exceptions.",
    "code": "```python\nclass APIVersionException(Exception):\n    pass\n\nclass APIVersionManager:\n    def __init__(self):\n        self.supported_versions = [\"1.0\", \"1.1\", \"2.0\"]\n\n    def handle_version(self, version):\n        try:\n            if version not in self.supported_versions:\n                raise APIVersionException(f\"Version {version} is not supported.\")\n            return f\"API version {version} is being used.\"\n        except APIVersionException as e:\n            return str(e)\n\ndef manage_api_version(version):\n    manager = APIVersionManager()\n    return manager.handle_version(version)\n\n# Example usage\nresult = manage_api_version(\"1.0\")\nprint(result)\n\nresult = manage_api_version(\"3.0\")\nprint(result)\n```"
  },
  {
    "task": "Write a tool that converts character encodings and handles unsupported encoding exceptions.",
    "code": "```python\ndef convert_encoding(text, source_encoding, target_encoding):\n    try:\n        # Decode the text from the source encoding\n        decoded_text = text.decode(source_encoding)\n        # Encode the text into the target encoding\n        encoded_text = decoded_text.encode(target_encoding)\n        return encoded_text\n    except (UnicodeDecodeError, UnicodeEncodeError) as e:\n        print(f\"Encoding error: {e}\")\n    except LookupError as e:\n        print(f\"Unsupported encoding: {e}\")\n\n# Example Usage\ntext = b'\\xe2\\x9c\\x93'  # Checkmark in UTF-8\nconverted_text = convert_encoding(text, 'utf-8', 'latin1')\nif converted_text:\n    print(converted_text)\n```"
  },
  {
    "task": "Create a program that handles dynamic content generation and manages template parsing exceptions.",
    "code": "```python\nfrom jinja2 import Template, TemplateSyntaxError\n\ndef generate_content(template_string, context):\n    try:\n        template = Template(template_string)\n        return template.render(context)\n    except TemplateSyntaxError as e:\n        print(\"Template parsing error:\", e)\n\ntemplate_string = \"Hello, {{ name }}!\"\ncontext = {\"name\": \"Alice\"}\n\nresult = generate_content(template_string, context)\nif result:\n    print(result)\n```"
  },
  {
    "task": "Implement a script that schedules automated tests and handles exceptions for missing test cases.",
    "code": "```python\nimport schedule\nimport time\n\ndef run_test(test_case):\n    try:\n        if test_case is None:\n            raise ValueError(\"Test case not found.\")\n        # Simulate running the test case\n        print(f\"Running test: {test_case}\")\n    except ValueError as e:\n        print(f\"Exception: {e}\")\n\ndef schedule_tests(tests):\n    for test in tests:\n        schedule.every(10).seconds.do(run_test, test_case=test)\n\ndef main():\n    tests = [\"Test1\", None, \"Test3\", \"Test4\", None]  # Some test cases and missing ones\n    schedule_tests(tests)\n\n    while True:\n        schedule.run_pending()\n        time.sleep(1)\n\nif __name__ == \"__main__\":\n    main()\n```"
  },
  {
    "task": "Develop a system that manages virtual machine instances and handles provisioning exceptions.",
    "code": "```python\nclass VirtualMachine:\n    def __init__(self, vm_id):\n        self.vm_id = vm_id\n        self.is_provisioned = False\n\n    def provision(self):\n        if self.vm_id % 2 == 0:\n            self.is_provisioned = True\n        else:\n            raise Exception(f\"Provisioning failed for VM {self.vm_id}\")\n\nclass VMManager:\n    def __init__(self):\n        self.vms = {}\n\n    def create_vm(self, vm_id):\n        if vm_id in self.vms:\n            print(f\"VM {vm_id} already exists.\")\n        else:\n            self.vms[vm_id] = VirtualMachine(vm_id)\n            print(f\"VM {vm_id} created.\")\n\n    def provision_vm(self, vm_id):\n        if vm_id not in self.vms:\n            print(f\"VM {vm_id} does not exist.\")\n            return\n\n        try:\n            vm = self.vms[vm_id]\n            vm.provision()\n            print(f\"VM {vm_id} provisioned successfully.\")\n        except Exception as e:\n            print(e)\n\nvm_manager = VMManager()\nvm_manager.create_vm(1)\nvm_manager.create_vm(2)\nvm_manager.provision_vm(1)\nvm_manager.provision_vm(2)\n```"
  },
  {
    "task": "Write a function that processes credit scores and handles exceptions for missing credit history.",
    "code": "```python\ndef process_credit_score(credit_data):\n    try:\n        credit_score = credit_data['credit_score']\n        # Process credit score (dummy processing)\n        return f\"Processed credit score: {credit_score}\"\n    except KeyError:\n        return \"Error: Missing credit history data.\"\n```"
  },
  {
    "task": "Create a tool that manages digital certificates and handles expiration exceptions.",
    "code": "```python\nfrom datetime import datetime, timedelta\n\nclass CertificateExpiredException(Exception):\n    pass\n\nclass Certificate:\n    def __init__(self, name, expiry_date):\n        self.name = name\n        self.expiry_date = expiry_date\n\n    def check_validity(self):\n        if datetime.now() > self.expiry_date:\n            raise CertificateExpiredException(f\"The certificate '{self.name}' has expired.\")\n\nclass CertificateManager:\n    def __init__(self):\n        self.certificates = []\n\n    def add_certificate(self, name, days_until_expiry):\n        expiry_date = datetime.now() + timedelta(days=days_until_expiry)\n        cert = Certificate(name, expiry_date)\n        self.certificates.append(cert)\n\n    def check_certificates(self):\n        for cert in self.certificates:\n            try:\n                cert.check_validity()\n                print(f\"The certificate '{cert.name}' is valid.\")\n            except CertificateExpiredException as e:\n                print(e)\n\n# Example usage\nmanager = CertificateManager()\nmanager.add_certificate(\"Cert1\", 10)\nmanager.add_certificate(\"Cert2\", -5)\n\nmanager.check_certificates()\n```"
  },
  {
    "task": "Design a program that processes genome sequences and handles exceptions for sequence alignment.",
    "code": "```python\ndef align_sequences(seq1, seq2):\n    try:\n        if not seq1 or not seq2:\n            raise ValueError(\"Sequences must not be empty.\")\n\n        if not all(c in \"ATCG\" for c in seq1) or not all(c in \"ATCG\" for c in seq2):\n            raise ValueError(\"Sequences must contain only 'A', 'T', 'C', 'G'.\")\n\n        # Placeholder for alignment logic\n        # Example: simple length comparison\n        if len(seq1) != len(seq2):\n            raise ValueError(\"Sequences must be of equal length for alignment.\")\n\n        # Return a dummy alignment result\n        return \"Aligned successfully\"\n\n    except ValueError as ve:\n        return f\"Error: {ve}\"\n\n# Example usage\nseq1 = \"ATCG\"\nseq2 = \"TAGC\"\nresult = align_sequences(seq1, seq2)\nprint(result)\n```"
  }
]