[
  {
    "task": "Convert a list of temperatures from Celsius to Fahrenheit using a map function.",
    "code": "```python\ncelsius_temperatures = [0, 20, 37, 100]\nfahrenheit_temperatures = list(map(lambda c: c * 9/5 + 32, celsius_temperatures))\n```"
  },
  {
    "task": "Use map to convert a list of lowercase words to uppercase.",
    "code": "```python\nwords = ['hello', 'world', 'python', 'code']\nuppercase_words = list(map(str.upper, words))\n```"
  },
  {
    "task": "Apply map to add a prefix to each string in a list of filenames.",
    "code": "```python\nfilenames = [\"file1.txt\", \"file2.txt\", \"file3.txt\"]\nprefix = \"backup_\"\nprefixed_filenames = list(map(lambda filename: prefix + filename, filenames))\n```"
  },
  {
    "task": "Transform a list of numbers by squaring each element with a map function.",
    "code": "```python\nnumbers = [1, 2, 3, 4, 5]\nsquared_numbers = list(map(lambda x: x ** 2, numbers))\nprint(squared_numbers)\n```"
  },
  {
    "task": "Convert a list of integers to their string representations using map.",
    "code": "```python\nintegers = [1, 2, 3, 4, 5]\nstrings = list(map(str, integers))\n```"
  },
  {
    "task": "Use map to compute the length of each string in a list of sentences.",
    "code": "```python\nsentences = [\"This is a sentence.\", \"Another sentence here.\", \"More sentences follow.\"]\nlengths = list(map(len, sentences))\n```"
  },
  {
    "task": "Apply a discount to a list of prices using a map function.",
    "code": "```python\nprices = [100, 200, 300, 400, 500]\ndiscount_rate = 0.1\n\ndiscounted_prices = list(map(lambda price: price * (1 - discount_rate), prices))\n```"
  },
  {
    "task": "Extract the first element from each tuple in a list of tuples with map.",
    "code": "```python\ntuples_list = [(1, 'a'), (2, 'b'), (3, 'c')]\nfirst_elements = list(map(lambda x: x[0], tuples_list))\n```"
  },
  {
    "task": "Use map to round a list of floating-point numbers to two decimal places.",
    "code": "```python\nnumbers = [3.14159, 2.71828, 1.61803, 0.57721]\nrounded_numbers = list(map(lambda x: round(x, 2), numbers))\n```"
  },
  {
    "task": "Capitalize the first letter of each word in a list of names using map.",
    "code": "```python\nnames = ['alice', 'bob', 'charlie']\ncapitalized_names = list(map(lambda name: name.title(), names))\n```"
  },
  {
    "task": "Convert a list of JSON strings to corresponding dictionary objects with map.",
    "code": "```python\nimport json\n\njson_strings = ['{\"name\": \"John\", \"age\": 30}', '{\"name\": \"Jane\", \"age\": 25}']\ndict_objects = list(map(json.loads, json_strings))\n```"
  },
  {
    "task": "Use map to double the value of each number in a list.",
    "code": "```python\nnumbers = [1, 2, 3, 4, 5]\ndoubled_numbers = list(map(lambda x: x * 2, numbers))\n```"
  },
  {
    "task": "Transform a list of RGB tuples to hexadecimal color codes using map.",
    "code": "```python\nrgb_to_hex = lambda rgb: \"#{:02x}{:02x}{:02x}\".format(*rgb)\nrgb_list = [(255, 0, 0), (0, 255, 0), (0, 0, 255)]  # Example list of RGB tuples\nhex_list = list(map(rgb_to_hex, rgb_list))\n```"
  },
  {
    "task": "Use map to compute the factorial of each number in a list.",
    "code": "```python\nfrom math import factorial\n\nnumbers = [1, 2, 3, 4, 5]\nfactorials = list(map(factorial, numbers))\n```"
  },
  {
    "task": "Translate a list of English words to Spanish using a map function.",
    "code": "```python\ndef translate_to_spanish(word):\n    translations = {\n        'hello': 'hola',\n        'world': 'mundo',\n        'cat': 'gato',\n        'dog': 'perro',\n        'apple': 'manzana'\n    }\n    return translations.get(word, word)\n\nenglish_words = ['hello', 'world', 'cat', 'dog', 'apple']\nspanish_words = list(map(translate_to_spanish, english_words))\n```"
  },
  {
    "task": "Apply a map function to format a list of dates from one format to another.",
    "code": "```python\nfrom datetime import datetime\n\ndates = [\"2023-10-01\", \"2023-11-15\", \"2023-12-31\"]\nformatted_dates = list(map(lambda date: datetime.strptime(date, \"%Y-%m-%d\").strftime(\"%d/%m/%Y\"), dates))\n```"
  },
  {
    "task": "Use map to check if each number in a list is even, returning a list of booleans.",
    "code": "```python\nnumbers = [1, 2, 3, 4, 5, 6]\nis_even = list(map(lambda x: x % 2 == 0, numbers))\n```"
  },
  {
    "task": "Convert a list of binary strings to decimal numbers using map.",
    "code": "```python\nbinary_strings = ['101', '1101', '1110', '1001']\ndecimal_numbers = list(map(lambda x: int(x, 2), binary_strings))\n```"
  },
  {
    "task": "Use map to append a domain name to a list of user names to create email addresses.",
    "code": "```python\nusernames = ['alice', 'bob', 'charlie']\ndomain = '@example.com'\nemails = list(map(lambda username: f\"{username}{domain}\", usernames))\n```"
  },
  {
    "task": "Calculate the area of each circle in a list of radii using a map function.",
    "code": "```python\nimport math\n\nradii = [1, 2, 3, 4, 5]\nareas = list(map(lambda r: math.pi * r ** 2, radii))\nprint(areas)\n```"
  },
  {
    "task": "Use map to strip whitespace from the start and end of each string in a list.",
    "code": "```python\nstrings = [\"  hello  \", \"  world \", \"  foo \", \" bar  \"]\nstripped_strings = list(map(str.strip, strings))\n```"
  },
  {
    "task": "Apply map to replace spaces with underscores in a list of file paths.",
    "code": "```python\nfile_paths = ['file one.txt', 'another file.doc', 'image file.png']\nnew_paths = list(map(lambda path: path.replace(' ', '_'), file_paths))\n```"
  },
  {
    "task": "Convert a list of mixed-case strings to title case using map.",
    "code": "```python\nstrings = ['hElLo', 'wOrLD', 'PyThOn']\ntitle_case_strings = list(map(str.title, strings))\n```"
  },
  {
    "task": "Use map to filter out only the digits from a list of mixed alphanumeric strings.",
    "code": "```python\nmixed_list = [\"abc123\", \"def456\", \"ghi789\", \"jkl012\"]\n\ndef filter_digits(s):\n    return ''.join(filter(str.isdigit, s))\n\ndigit_strings = list(map(filter_digits, mixed_list))\nprint(digit_strings)\n```"
  },
  {
    "task": "Apply map to convert a list of Unix timestamps to readable date strings.",
    "code": "```python\nfrom datetime import datetime\n\ntimestamps = [1609459200, 1612137600, 1614556800]  # Example list of Unix timestamps\nreadable_dates = list(map(lambda ts: datetime.utcfromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S'), timestamps))\n\nprint(readable_dates)\n```"
  },
  {
    "task": "Transform a list of dictionary objects by extracting a specific key's value using map.",
    "code": "```python\ndata = [{'key1': 'value1', 'key2': 'value2'}, {'key1': 'value3', 'key2': 'value4'}]\nresult = list(map(lambda x: x['key1'], data))\n```"
  },
  {
    "task": "Use map to compute the cube of each number in a list.",
    "code": "```python\nnumbers = [1, 2, 3, 4, 5]\ncubes = list(map(lambda x: x**3, numbers))\n```"
  },
  {
    "task": "Translate a list of URLs to their respective domain names using a map function.",
    "code": "```python\nfrom urllib.parse import urlparse\n\nurls = [\n    'https://www.example.com/page1',\n    'http://subdomain.example.org/page2',\n    'https://another-example.net/page3'\n]\n\ndomain_names = list(map(lambda url: urlparse(url).netloc, urls))\nprint(domain_names)\n```"
  },
  {
    "task": "Use map to generate HTML list items from a list of text strings.",
    "code": "```python\ntext_strings = [\"Home\", \"About\", \"Contact\", \"Blog\"]\nhtml_list_items = map(lambda text: f\"<li>{text}</li>\", text_strings)\nhtml_list_items = list(html_list_items)\n```"
  },
  {
    "task": "Convert a list of polar coordinates to Cartesian coordinates using map.",
    "code": "```python\nfrom math import cos, sin\n\npolar_coordinates = [(1, 0), (2, 3.14159), (3, 1.5708)]\n\ncartesian_coordinates = list(map(lambda p: (p[0] * cos(p[1]), p[0] * sin(p[1])), polar_coordinates))\n\nprint(cartesian_coordinates)\n```"
  },
  {
    "task": "Use map to decode a list of Base64 encoded strings.",
    "code": "```python\nimport base64\n\ndef decode_base64(encoded_strings):\n    return list(map(lambda s: base64.b64decode(s).decode('utf-8'), encoded_strings))\n\n# Example usage\nencoded_list = ['SGVsbG8gd29ybGQ=', 'UGl0aG9uIGlzIGZ1bg==']\ndecoded_list = decode_base64(encoded_list)\nprint(decoded_list)\n```"
  },
  {
    "task": "Convert a list of English sentences to Pig Latin using a map function.",
    "code": "```python\ndef to_pig_latin(sentence):\n    def convert_word(word):\n        vowels = \"aeiouAEIOU\"\n        if word[0] in vowels:\n            return word + \"way\"\n        else:\n            return word[1:] + word[0] + \"ay\"\n\n    return ' '.join(convert_word(word) for word in sentence.split())\n\nsentences = [\n    \"Hello world\",\n    \"This is a test\",\n    \"Functional map is useful\"\n]\n\npig_latin_sentences = list(map(to_pig_latin, sentences))\nprint(pig_latin_sentences)\n```"
  },
  {
    "task": "Use map to anonymize a list of email addresses by masking them.",
    "code": "```python\ndef anonymize_email(email):\n    name, domain = email.split('@')\n    masked_name = name[0] + '*' * (len(name) - 1)\n    masked_email = masked_name + '@' + domain\n    return masked_email\n\nemails = ['user1@example.com', 'user2@example.com', 'user3@example.com']\nanonymized_emails = list(map(anonymize_email, emails))\n```"
  },
  {
    "task": "Apply map to reverse each string in a list of words.",
    "code": "```python\nwords = ['example', 'function', 'map', 'python']\nreversed_words = list(map(lambda word: word[::-1], words))\n```"
  },
  {
    "task": "Convert a list of hexadecimal color codes to RGB tuples using map.",
    "code": "```python\ndef hex_to_rgb(hex_color):\n    hex_color = hex_color.lstrip('#')\n    return tuple(int(hex_color[i:i+2], 16) for i in (0, 2, 4))\n\nhex_colors = ['#FF5733', '#33FF57', '#3357FF']\nrgb_colors = list(map(hex_to_rgb, hex_colors))\nprint(rgb_colors)\n```"
  },
  {
    "task": "Use map to increment each integer in a list by a constant value.",
    "code": "```python\nnumbers = [1, 2, 3, 4, 5]\nincrement_value = 1\nincremented_numbers = list(map(lambda x: x + increment_value, numbers))\n```"
  },
  {
    "task": "Calculate the square root of each number in a list using a map function.",
    "code": "```python\nimport math\n\nnumbers = [4, 9, 16, 25, 36]\nsquare_roots = list(map(math.sqrt, numbers))\n```"
  },
  {
    "task": "Use map to convert a list of currency amounts from dollars to euros.",
    "code": "```python\ndef dollars_to_euros(dollar_amount):\n    exchange_rate = 0.85  # Example exchange rate\n    return dollar_amount * exchange_rate\n\ndollar_amounts = [10, 20, 30, 40, 50]\neuro_amounts = list(map(dollars_to_euros, dollar_amounts))\n```"
  },
  {
    "task": "Extract the domain from each email address in a list using map.",
    "code": "```python\nemails = ['user1@example.com', 'user2@test.org', 'user3@domain.net']\ndomains = list(map(lambda email: email.split('@')[1], emails))\n```"
  },
  {
    "task": "Use map to serialize a list of objects into JSON strings.",
    "code": "```python\nimport json\n\nclass CustomObject:\n    def __init__(self, name, value):\n        self.name = name\n        self.value = value\n\n    def to_dict(self):\n        return {'name': self.name, 'value': self.value}\n\nobjects = [\n    CustomObject('object1', 10),\n    CustomObject('object2', 20),\n    CustomObject('object3', 30)\n]\n\njson_strings = list(map(lambda obj: json.dumps(obj.to_dict()), objects))\n\nprint(json_strings)\n```"
  },
  {
    "task": "Transform a list of file sizes from bytes to kilobytes using map.",
    "code": "```python\nfile_sizes_bytes = [1024, 2048, 5120, 8192]\nfile_sizes_kilobytes = list(map(lambda x: x / 1024, file_sizes_bytes))\n```"
  },
  {
    "task": "Use map to append a suffix to each string in a list of identifiers.",
    "code": "```python\nidentifiers = ['id1', 'id2', 'id3']\nsuffix = '_suffix'\nupdated_identifiers = list(map(lambda x: x + suffix, identifiers))\n```"
  },
  {
    "task": "Apply map to convert measurements from inches to centimeters in a list.",
    "code": "```python\nmeasurements_in_inches = [5, 10, 15, 20]\nmeasurements_in_cm = list(map(lambda x: x * 2.54, measurements_in_inches))\n```"
  },
  {
    "task": "Use map to encrypt a list of plaintext messages using a simple cipher.",
    "code": "```python\ndef simple_cipher(char):\n    return chr(((ord(char) - 97 + 3) % 26) + 97) if char.isalpha() else char\n\ndef encrypt_message(message):\n    return ''.join(map(simple_cipher, message))\n\nplaintext_messages = [\"hello\", \"world\", \"python\", \"cipher\"]\nencrypted_messages = list(map(encrypt_message, plaintext_messages))\nprint(encrypted_messages)\n```"
  },
  {
    "task": "Transform a list of date strings to day of the week names using a map function.",
    "code": "```python\nfrom datetime import datetime\n\ndate_strings = [\"2023-10-01\", \"2023-10-02\", \"2023-10-03\"]\n\ndef date_to_weekday(date_str):\n    date_obj = datetime.strptime(date_str, \"%Y-%m-%d\")\n    return date_obj.strftime(\"%A\")\n\nweekdays = list(map(date_to_weekday, date_strings))\n```"
  },
  {
    "task": "Use map to derive the absolute value of each number in a list.",
    "code": "```python\nnumbers = [-10, 20, -30, 40, -50]\nabsolute_values = list(map(abs, numbers))\n```"
  },
  {
    "task": "Convert a list of lowercase hexadecimal strings to uppercase using map.",
    "code": "```python\nhex_list = ['1a', '2b', '3c', '4d']\nuppercase_hex_list = list(map(str.upper, hex_list))\n```"
  },
  {
    "task": "Use map to find the maximum value in a list of lists of numbers.",
    "code": "```python\nlists_of_numbers = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nmax_values = map(max, lists_of_numbers)\nmaximum = max(max_values)\nprint(maximum)\n```"
  },
  {
    "task": "Apply map to extract the year from each date in a list of date objects.",
    "code": "```python\nfrom datetime import date\n\ndates = [date(2020, 1, 1), date(2021, 5, 15), date(2022, 8, 30)]\nyears = list(map(lambda d: d.year, dates))\n```"
  },
  {
    "task": "Use map to prepend a country code to each phone number in a list.",
    "code": "```python\nphone_numbers = [\"1234567890\", \"2345678901\", \"3456789012\"]\ncountry_code = \"+1\"\n\nprepended_numbers = list(map(lambda number: country_code + number, phone_numbers))\n```"
  },
  {
    "task": "Capitalize the last letter of each word in a list using a map function.",
    "code": "```python\nwords = [\"hello\", \"world\", \"example\", \"python\"]\ncapitalize_last_letter = lambda word: word[:-1] + word[-1].upper()\ncapitalized_words = list(map(capitalize_last_letter, words))\n```"
  },
  {
    "task": "Use map to transform a list of strings by removing all vowels.",
    "code": "```python\ndef remove_vowels(s):\n    return ''.join(char for char in s if char.lower() not in 'aeiou')\n\nstrings = [\"example\", \"functional\", \"programming\", \"python\"]\nresult = list(map(remove_vowels, strings))\n```"
  },
  {
    "task": "Convert a list of music notes to their corresponding frequencies using map.",
    "code": "```python\ndef note_to_frequency(note):\n    notes_frequencies = {\n        'C': 261.63,\n        'C#': 277.18,\n        'D': 293.66,\n        'D#': 311.13,\n        'E': 329.63,\n        'F': 349.23,\n        'F#': 369.99,\n        'G': 392.00,\n        'G#': 415.30,\n        'A': 440.00,\n        'A#': 466.16,\n        'B': 493.88\n    }\n    return notes_frequencies.get(note, None)\n\nmusic_notes = ['A', 'B', 'C', 'D', 'E', 'F', 'G']\nfrequencies = list(map(note_to_frequency, music_notes))\n```"
  },
  {
    "task": "Use map to find the reciprocal of each number in a list.",
    "code": "```python\nnumbers = [1, 2, 3, 4, 5]\nreciprocals = list(map(lambda x: 1 / x, numbers))\n```"
  },
  {
    "task": "Transform a list of URLs to their shortened versions using a map function.",
    "code": "```python\nimport hashlib\n\ndef shorten_url(url):\n    return hashlib.md5(url.encode()).hexdigest()[:6]\n\nurls = [\n    'https://www.example.com',\n    'https://www.anotherexample.com',\n    'https://www.yetanotherexample.com'\n]\n\nshortened_urls = list(map(shorten_url, urls))\nprint(shortened_urls)\n```"
  },
  {
    "task": "Use map to generate a list of initials from a list of full names.",
    "code": "```python\nnames = [\"John Doe\", \"Jane Smith\", \"Alice Johnson\"]\ninitials = list(map(lambda name: ''.join([part[0] for part in name.split()]), names))\n```"
  },
  {
    "task": "Convert a list of decimal numbers to their binary string representations using map.",
    "code": "```python\ndecimal_numbers = [10, 15, 20, 25, 30]\nbinary_strings = list(map(lambda x: bin(x)[2:], decimal_numbers))\n```"
  },
  {
    "task": "Use map to adjust the brightness of each color in a list of RGB tuples.",
    "code": "```python\ndef adjust_brightness(colors, factor):\n    return list(map(lambda c: (min(int(c[0] * factor), 255), \n                               min(int(c[1] * factor), 255), \n                               min(int(c[2] * factor), 255)), colors))\n\n# Example usage:\ncolors = [(100, 150, 200), (50, 75, 100)]\nfactor = 1.2\nadjusted_colors = adjust_brightness(colors, factor)\nprint(adjusted_colors)\n```"
  },
  {
    "task": "Apply map to filter out only alphabetic characters from a list of strings.",
    "code": "```python\nstrings = [\"abc123\", \"def!\", \"ghi456\", \"789jkl\"]\nfiltered_strings = list(map(lambda s: ''.join(filter(str.isalpha, s)), strings))\n```"
  },
  {
    "task": "Use map to compute the prime factorization of each number in a list.",
    "code": "```python\ndef prime_factors(n):\n    i = 2\n    factors = []\n    while i * i <= n:\n        while (n % i) == 0:\n            factors.append(i)\n            n //= i\n        i += 1\n    if n > 1:\n        factors.append(n)\n    return factors\n\nnumbers = [10, 15, 21, 33]\nfactorizations = list(map(prime_factors, numbers))\nprint(factorizations)\n```"
  },
  {
    "task": "Calculate the exponential of each number in a list using a map function.",
    "code": "```python\nimport math\n\nnumbers = [1, 2, 3, 4, 5]\nexponentials = list(map(math.exp, numbers))\nprint(exponentials)\n```"
  },
  {
    "task": "Use map to convert a list of text messages to morse code.",
    "code": "```python\ndef text_to_morse(text):\n    morse_dict = {\n        'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.',\n        'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..',\n        'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.',\n        'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-',\n        'Y': '-.--', 'Z': '--..', '1': '.----', '2': '..---', '3': '...--',\n        '4': '....-', '5': '.....', '6': '-....', '7': '--...', '8': '---..',\n        '9': '----.', '0': '-----', ' ': '/'\n    }\n    return ' '.join(morse_dict.get(char.upper(), '') for char in text)\n\nmessages = [\"hello world\", \"python\", \"map function\"]\nmorse_messages = list(map(text_to_morse, messages))\n```"
  },
  {
    "task": "Transform a list of JSON objects to XML strings using a map function.",
    "code": "```python\nimport json\nimport dicttoxml\n\ndef json_to_xml(json_obj):\n    return dicttoxml.dicttoxml(json_obj, custom_root='root', attr_type=False).decode('utf-8')\n\njson_list = [\n    {\"name\": \"John\", \"age\": 30},\n    {\"name\": \"Jane\", \"age\": 25}\n]\n\nxml_list = list(map(json_to_xml, json_list))\n```"
  },
  {
    "task": "Use map to extract the extension from each filename in a list.",
    "code": "```python\nfilenames = ['document.txt', 'report.pdf', 'image.jpeg', 'data.csv']\nextensions = list(map(lambda filename: filename.split('.')[-1], filenames))\n```"
  },
  {
    "task": "Convert a list of temperatures from Fahrenheit to Kelvin using map.",
    "code": "```python\ndef fahrenheit_to_kelvin(f):\n    return (f - 32) * 5/9 + 273.15\n\ntemperatures_fahrenheit = [32, 68, 100, 212]\ntemperatures_kelvin = list(map(fahrenheit_to_kelvin, temperatures_fahrenheit))\n```"
  },
  {
    "task": "Use map to calculate the perimeter of each rectangle in a list of dimensions.",
    "code": "```python\ndimensions = [(3, 4), (5, 6), (7, 8)]\nperimeters = list(map(lambda dim: 2 * (dim[0] + dim[1]), dimensions))\n```"
  },
  {
    "task": "Apply map to format a list of phone numbers into a standard format.",
    "code": "```python\nphone_numbers = ['1234567890', '0987654321', '5551234567']\n\nformatted_numbers = map(lambda num: f\"({num[:3]}) {num[3:6]}-{num[6:]}\", phone_numbers)\n\nformatted_list = list(formatted_numbers)\n```"
  },
  {
    "task": "Use map to generate a hashed version of passwords from a list.",
    "code": "```python\nimport hashlib\n\npasswords = [\"password123\", \"securepassword\", \"letmein\"]\n\nhashed_passwords = list(map(lambda pwd: hashlib.sha256(pwd.encode()).hexdigest(), passwords))\n```"
  },
  {
    "task": "Convert a list of text paragraphs to a word count using map.",
    "code": "```python\nparagraphs = [\n    \"This is a sentence.\",\n    \"Here is another paragraph of text.\",\n    \"Python programming is fun and versatile.\"\n]\n\nword_counts = list(map(lambda paragraph: len(paragraph.split()), paragraphs))\n```"
  },
  {
    "task": "Use map to remove punctuation from each string in a list of sentences.",
    "code": "```python\nimport string\n\nsentences = [\"Hello, world!\", \"This is a test.\", \"Python's awesome; isn't it?\"]\nremove_punctuation = lambda s: s.translate(str.maketrans('', '', string.punctuation))\ncleaned_sentences = list(map(remove_punctuation, sentences))\n```"
  },
  {
    "task": "Transform a list of URLs to their base domain using a map function.",
    "code": "```python\nfrom urllib.parse import urlparse\n\nurls = [\n    'https://www.example.com/path/to/page',\n    'http://another-example.org/another/path',\n    'https://subdomain.example.net',\n    'ftp://ftp.example.com/resource'\n]\n\nbase_domains = list(map(lambda url: urlparse(url).netloc, urls))\n```"
  },
  {
    "task": "Use map to translate a list of expressions to their symbolic algebraic forms.",
    "code": "```python\nfrom sympy import sympify\n\nexpressions = ['2*x + 3', 'x**2 + 2*x + 1', 'sin(x) + cos(x)']\nsymbolic_forms = list(map(sympify, expressions))\n```"
  },
  {
    "task": "Apply map to convert a list of ASCII codes to corresponding characters.",
    "code": "```python\nascii_codes = [65, 66, 67, 68, 69]\ncharacters = list(map(chr, ascii_codes))\nprint(characters)\n```"
  },
  {
    "task": "Use map to transform a list of text strings to their lemmatized forms.",
    "code": "```python\nfrom nltk.stem import WordNetLemmatizer\n\nlemmatizer = WordNetLemmatizer()\ntexts = ['running', 'easily', 'fairly', 'dogs']\nlemmatized_texts = list(map(lambda word: lemmatizer.lemmatize(word), texts))\n```"
  },
  {
    "task": "Convert a list of HTML strings to plain text using map.",
    "code": "```python\nfrom bs4 import BeautifulSoup\n\nhtml_strings = [\n    '<p>Hello, <b>world</b>!</p>',\n    '<div>Python <i>is</i> great.</div>',\n    '<h1>Welcome to <a href=\"#\">OpenAI</a></h1>'\n]\n\nplain_texts = list(map(lambda html: BeautifulSoup(html, 'html.parser').get_text(), html_strings))\n```"
  },
  {
    "task": "Use map to create a summary of each article in a list of texts.",
    "code": "```python\ntexts = [\n    \"Python is a high-level programming language designed for readability and simplicity.\",\n    \"Data science involves using scientific methods, processes, and algorithms to extract knowledge from data.\",\n    \"Machine learning is a subset of artificial intelligence focused on building systems that learn from data.\"\n]\n\ndef summarize(text):\n    words = text.split()\n    return ' '.join(words[:5]) + '...'\n\nsummaries = list(map(summarize, texts))\n```"
  },
  {
    "task": "Transform a list of paths to their absolute paths using a map function.",
    "code": "```python\nimport os\n\npaths = ['./folder1/file1', './folder2/file2', '../folder3']\nabsolute_paths = list(map(os.path.abspath, paths))\n```"
  },
  {
    "task": "Use map to generate QR codes from a list of URLs.",
    "code": "```python\nimport qrcode\n\nurls = [\n    \"https://example.com\",\n    \"https://openai.com\",\n    \"https://github.com\"\n]\n\ndef generate_qr_code(url):\n    qr = qrcode.make(url)\n    return qr\n\nqr_codes = list(map(generate_qr_code, urls))\n```"
  },
  {
    "task": "Convert a list of angles from degrees to radians using map.",
    "code": "```python\nimport math\n\nangles_degrees = [0, 30, 45, 60, 90, 180, 270, 360]\nangles_radians = list(map(math.radians, angles_degrees))\n```"
  },
  {
    "task": "Use map to anonymize a list of IP addresses by masking parts of them.",
    "code": "```python\ndef anonymize_ip(ip):\n    parts = ip.split('.')\n    return '.'.join(parts[:2] + ['x', 'x'])\n\nip_addresses = [\n    '192.168.1.1',\n    '10.0.0.5',\n    '172.16.254.3',\n    '192.0.2.1'\n]\n\nanonymized_ips = list(map(anonymize_ip, ip_addresses))\nprint(anonymized_ips)\n```"
  },
  {
    "task": "Transform a list of tuples by swapping their elements using a map function.",
    "code": "```python\ndata = [(1, 2), (3, 4), (5, 6)]\nswapped_data = list(map(lambda x: (x[1], x[0]), data))\n```"
  },
  {
    "task": "Use map to compute the greatest common divisor of pairs in a list of number pairs.",
    "code": "```python\nfrom math import gcd\n\nnumber_pairs = [(48, 18), (56, 98), (101, 103)]\ngcd_results = list(map(lambda pair: gcd(*pair), number_pairs))\nprint(gcd_results)\n```"
  },
  {
    "task": "Convert a list of file paths to their directory names using map.",
    "code": "```python\nimport os\n\nfile_paths = ['/home/user/file1.txt', '/var/log/system.log', '/etc/hosts']\ndirectory_names = list(map(os.path.dirname, file_paths))\n```"
  },
  {
    "task": "Use map to replace each vowel in a list of strings with a specific character.",
    "code": "```python\ndef replace_vowels(strings, replacement_char):\n    vowels = \"aeiouAEIOU\"\n    return list(map(lambda s: ''.join(replacement_char if char in vowels else char for char in s), strings))\n\n# Example usage\nstrings = [\"hello\", \"world\", \"example\"]\nreplacement_char = '*'\nresult = replace_vowels(strings, replacement_char)\nprint(result)\n```"
  },
  {
    "task": "Transform a list of integers to their hexadecimal representations using map.",
    "code": "```python\nnumbers = [10, 15, 255, 1024]\nhex_numbers = list(map(hex, numbers))\n```"
  },
  {
    "task": "Use map to apply a transformation matrix to a list of 2D vectors.",
    "code": "```python\ndef apply_transformation(matrix, vectors):\n    return list(map(lambda v: (\n        matrix[0][0] * v[0] + matrix[0][1] * v[1],\n        matrix[1][0] * v[0] + matrix[1][1] * v[1]\n    ), vectors))\n\ntransformation_matrix = [[1, 2], [3, 4]]\nvectors = [(1, 2), (3, 4), (5, 6)]\n\ntransformed_vectors = apply_transformation(transformation_matrix, vectors)\nprint(transformed_vectors)\n```"
  },
  {
    "task": "Convert a list of text strings to their phonetic alphabet equivalents using map.",
    "code": "```python\ndef to_phonetic(word):\n    phonetic_dict = {\n        'A': 'Alfa', 'B': 'Bravo', 'C': 'Charlie', 'D': 'Delta', 'E': 'Echo',\n        'F': 'Foxtrot', 'G': 'Golf', 'H': 'Hotel', 'I': 'India', 'J': 'Juliett',\n        'K': 'Kilo', 'L': 'Lima', 'M': 'Mike', 'N': 'November', 'O': 'Oscar',\n        'P': 'Papa', 'Q': 'Quebec', 'R': 'Romeo', 'S': 'Sierra', 'T': 'Tango',\n        'U': 'Uniform', 'V': 'Victor', 'W': 'Whiskey', 'X': 'X-ray', 'Y': 'Yankee', 'Z': 'Zulu'\n    }\n    return ' '.join(phonetic_dict.get(letter.upper(), '') for letter in word)\n\ntexts = ['hello', 'world', 'python']\nphonetic_texts = list(map(to_phonetic, texts))\n```"
  },
  {
    "task": "Use map to determine if each word in a list is a palindrome, returning booleans.",
    "code": "```python\nwords = [\"radar\", \"python\", \"level\", \"world\", \"deified\"]\nis_palindrome = list(map(lambda word: word == word[::-1], words))\n```"
  },
  {
    "task": "Transform a list of dictionaries by renaming a specified key using a map function.",
    "code": "```python\ndef rename_key_in_dicts(dicts, old_key, new_key):\n    return list(map(lambda d: {new_key if k == old_key else k: v for k, v in d.items()}, dicts))\n\n# Example usage:\ndict_list = [{'name': 'Alice', 'age': 30}, {'name': 'Bob', 'age': 25}]\nrenamed_dict_list = rename_key_in_dicts(dict_list, 'name', 'first_name')\nprint(renamed_dict_list)\n```"
  },
  {
    "task": "Use map to compute the logarithm of each number in a list.",
    "code": "```python\nimport math\n\nnumbers = [1, 10, 100, 1000, 10000]\nlogarithms = list(map(math.log, numbers))\n```"
  },
  {
    "task": "Convert a list of image file paths to grayscale versions using map.",
    "code": "```python\nfrom PIL import Image\nimport os\n\ndef convert_to_grayscale(image_path):\n    with Image.open(image_path) as img:\n        grayscale_img = img.convert(\"L\")\n        grayscale_path = os.path.splitext(image_path)[0] + \"_grayscale.png\"\n        grayscale_img.save(grayscale_path)\n        return grayscale_path\n\nimage_paths = ['image1.jpg', 'image2.jpg', 'image3.jpg']  # Example list of image paths\n\ngrayscale_paths = list(map(convert_to_grayscale, image_paths))\n```"
  },
  {
    "task": "Use map to flatten a list of lists of strings into a single list of strings.",
    "code": "```python\nlists_of_strings = [['hello', 'world'], ['foo', 'bar'], ['python', 'code']]\nflattened_list = list(map(lambda x: x, [string for sublist in lists_of_strings for string in sublist]))\n```"
  },
  {
    "task": "Transform a list of temperature readings to temperature anomalies using a map function.",
    "code": "```python\ndef temperature_anomalies(temperatures):\n    average_temp = sum(temperatures) / len(temperatures)\n    return list(map(lambda temp: temp - average_temp, temperatures))\n\n# Example Usage:\nreadings = [23.5, 24.0, 22.8, 23.9, 24.5]\nanomalies = temperature_anomalies(readings)\nprint(anomalies)\n```"
  }
]