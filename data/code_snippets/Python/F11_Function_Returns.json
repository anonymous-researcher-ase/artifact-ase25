[
  {
    "task": "Create a function that calculates the sum of two numbers and returns the result.",
    "code": "```python\ndef calculate_sum(a, b):\n    return a + b\n```"
  },
  {
    "task": "Design a function that takes a string and returns its length.",
    "code": "```python\ndef string_length(s: str) -> int:\n    return len(s)\n```"
  },
  {
    "task": "Write a function that checks if a number is prime and returns a boolean value.",
    "code": "```python\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n```"
  },
  {
    "task": "Implement a function that returns the highest value in a list of integers.",
    "code": "```python\ndef find_highest_value(numbers):\n    return max(numbers)\n```"
  },
  {
    "task": "Create a function that accepts a list of words and returns the longest word.",
    "code": "```python\ndef longest_word(words):\n    return max(words, key=len)\n```"
  },
  {
    "task": "Write a function that takes a temperature in Celsius and returns the equivalent in Fahrenheit.",
    "code": "```python\ndef celsius_to_fahrenheit(celsius):\n    return celsius * 9/5 + 32\n```"
  },
  {
    "task": "Develop a function that returns the factorial of a given number.",
    "code": "```python\ndef factorial(n):\n    if n < 0:\n        return None\n    elif n == 0:\n        return 1\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result\n```"
  },
  {
    "task": "Implement a function that receives a date and returns the day of the week.",
    "code": "```python\nfrom datetime import datetime\n\ndef get_day_of_week(date_str):\n    date_obj = datetime.strptime(date_str, '%Y-%m-%d')\n    return date_obj.strftime('%A')\n```"
  },
  {
    "task": "Write a function that calculates the area of a circle given its radius and returns the value.",
    "code": "```python\nimport math\n\ndef calculate_circle_area(radius):\n    return math.pi * radius * radius\n```"
  },
  {
    "task": "Create a function that converts a string to uppercase and returns the modified string.",
    "code": "```python\ndef to_uppercase(s):\n    return s.upper()\n```"
  },
  {
    "task": "Design a function that returns the reverse of a given list.",
    "code": "```python\ndef reverse_list(input_list):\n    return input_list[::-1]\n```"
  },
  {
    "task": "Implement a function that accepts a string and returns a dictionary with character frequencies.",
    "code": "```python\ndef character_frequencies(s):\n    freq = {}\n    for char in s:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    return freq\n```"
  },
  {
    "task": "Write a function that returns the first non-repeating character in a string.",
    "code": "```python\ndef first_non_repeating_character(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    return None\n```"
  },
  {
    "task": "Create a function that takes a list of numbers and returns a new list with only even numbers.",
    "code": "```python\ndef filter_even_numbers(numbers):\n    return [num for num in numbers if num % 2 == 0]\n```"
  },
  {
    "task": "Develop a function that receives a sentence and returns the word count.",
    "code": "```python\ndef word_count(sentence):\n    return len(sentence.split())\n```"
  },
  {
    "task": "Implement a function that returns the smallest element in an array.",
    "code": "```python\ndef find_smallest_element(arr):\n    if not arr:\n        return None\n    return min(arr)\n```"
  },
  {
    "task": "Write a function that takes two strings and returns true if they are anagrams.",
    "code": "```python\ndef are_anagrams(str1, str2):\n    return sorted(str1) == sorted(str2)\n```"
  },
  {
    "task": "Create a function that accepts an integer and returns a list of its divisors.",
    "code": "```python\ndef find_divisors(n):\n    return [i for i in range(1, n + 1) if n % i == 0]\n```"
  },
  {
    "task": "Design a function that returns the square root of a given number.",
    "code": "```python\nimport math\n\ndef square_root(number):\n    return math.sqrt(number)\n```"
  },
  {
    "task": "Implement a function that accepts a list and returns it sorted in ascending order.",
    "code": "```python\ndef sort_list_ascending(lst):\n    return sorted(lst)\n```"
  },
  {
    "task": "Write a function that checks whether a given year is a leap year and returns a boolean.",
    "code": "```python\ndef is_leap_year(year):\n    return (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0)\n```"
  },
  {
    "task": "Create a function that receives a list of numbers and returns their average.",
    "code": "```python\ndef average(numbers):\n    return sum(numbers) / len(numbers) if numbers else 0\n```"
  },
  {
    "task": "Develop a function that returns the nth Fibonacci number.",
    "code": "```python\ndef fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n```"
  },
  {
    "task": "Implement a function that accepts a string and returns it with vowels removed.",
    "code": "```python\ndef remove_vowels(s: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return ''.join(char for char in s if char not in vowels)\n```"
  },
  {
    "task": "Write a function that takes two dates and returns the number of days between them.",
    "code": "```python\nfrom datetime import datetime\n\ndef days_between_dates(date1, date2):\n    date_format = \"%Y-%m-%d\"\n    d1 = datetime.strptime(date1, date_format)\n    d2 = datetime.strptime(date2, date_format)\n    return abs((d2 - d1).days)\n```"
  },
  {
    "task": "Create a function that returns the last element of a list.",
    "code": "```python\ndef get_last_element(lst):\n    return lst[-1] if lst else None\n```"
  },
  {
    "task": "Design a function that calculates the GCD of two numbers and returns it.",
    "code": "```python\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n```"
  },
  {
    "task": "Implement a function that takes a list and returns a tuple with the min and max values.",
    "code": "```python\ndef min_max(lst):\n    return (min(lst), max(lst))\n```"
  },
  {
    "task": "Write a function that converts a binary string to its decimal representation and returns it.",
    "code": "```python\ndef binary_to_decimal(binary_string):\n    return int(binary_string, 2)\n```"
  },
  {
    "task": "Create a function that accepts a dictionary and returns a list of its keys.",
    "code": "```python\ndef get_keys(d):\n    return list(d.keys())\n```"
  },
  {
    "task": "Develop a function that returns the concatenation of two strings.",
    "code": "```python\ndef concatenate_strings(str1, str2):\n    return str1 + str2\n```"
  },
  {
    "task": "Implement a function that receives a list and returns a new list with duplicates removed.",
    "code": "```python\ndef remove_duplicates(lst):\n    return list(dict.fromkeys(lst))\n```"
  },
  {
    "task": "Write a function that returns the intersection of two lists.",
    "code": "```python\ndef intersection_of_lists(list1, list2):\n    return list(set(list1) & set(list2))\n```"
  },
  {
    "task": "Create a function that takes an integer and returns whether it is even or odd as a string.",
    "code": "```python\ndef even_or_odd(n: int) -> str:\n    return \"even\" if n % 2 == 0 else \"odd\"\n```"
  },
  {
    "task": "Design a function that returns the number of vowels in a given string.",
    "code": "```python\ndef count_vowels(s):\n    vowels = \"aeiouAEIOU\"\n    return sum(1 for char in s if char in vowels)\n```"
  },
  {
    "task": "Implement a function that counts the occurrences of a substring within a string and returns it.",
    "code": "```python\ndef count_substring_occurrences(string, substring):\n    return string.count(substring)\n```"
  },
  {
    "task": "Write a function that accepts a list of numbers and returns them sorted in descending order.",
    "code": "```python\ndef sort_descending(numbers):\n    return sorted(numbers, reverse=True)\n```"
  },
  {
    "task": "Create a function that returns the median of a list of numbers.",
    "code": "```python\ndef find_median(numbers):\n    sorted_numbers = sorted(numbers)\n    n = len(sorted_numbers)\n    mid = n // 2\n\n    if n % 2 == 0:\n        return (sorted_numbers[mid - 1] + sorted_numbers[mid]) / 2\n    else:\n        return sorted_numbers[mid]\n```"
  },
  {
    "task": "Develop a function that receives a sentence and returns it with words in reverse order.",
    "code": "```python\ndef reverse_words(sentence):\n    return ' '.join(sentence.split()[::-1])\n```"
  },
  {
    "task": "Implement a function that returns the sum of all elements in a matrix.",
    "code": "```python\ndef sum_matrix(matrix):\n    return sum(sum(row) for row in matrix)\n```"
  },
  {
    "task": "Write a function that accepts a string and returns true if it is a palindrome.",
    "code": "```python\ndef is_palindrome(s: str) -> bool:\n    return s == s[::-1]\n```"
  },
  {
    "task": "Create a function that takes a number and returns its binary representation as a string.",
    "code": "```python\ndef to_binary_string(number):\n    return bin(number)[2:]\n```"
  },
  {
    "task": "Design a function that returns the number of words in a paragraph.",
    "code": "```python\ndef count_words(paragraph):\n    return len(paragraph.split())\n```"
  },
  {
    "task": "Implement a function that accepts a list and returns the index of its maximum element.",
    "code": "```python\ndef index_of_max_element(lst):\n    return lst.index(max(lst))\n```"
  },
  {
    "task": "Write a function that takes a list of grades and returns the highest grade.",
    "code": "```python\ndef highest_grade(grades):\n    return max(grades)\n```"
  },
  {
    "task": "Create a function that returns the product of all positive integers up to a given number.",
    "code": "```python\ndef product_of_positives(n):\n    product = 1\n    for i in range(1, n + 1):\n        product *= i\n    return product\n```"
  },
  {
    "task": "Develop a function that receives a string and returns a new string with spaces replaced by hyphens.",
    "code": "```python\ndef replace_spaces_with_hyphens(input_string):\n    return input_string.replace(' ', '-')\n```"
  },
  {
    "task": "Implement a function that takes a list of integers and returns their sum.",
    "code": "```python\ndef sum_of_integers(int_list):\n    return sum(int_list)\n```"
  },
  {
    "task": "Write a function that checks if a string is a valid email address and returns a boolean.",
    "code": "```python\nimport re\n\ndef is_valid_email(email: str) -> bool:\n    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n    return bool(re.match(pattern, email))\n```"
  },
  {
    "task": "Create a function that returns the decimal equivalent of a hexadecimal string.",
    "code": "```python\ndef hex_to_decimal(hex_string):\n    return int(hex_string, 16)\n```"
  },
  {
    "task": "Design a function that calculates and returns the body mass index based on height and weight.",
    "code": "```python\ndef calculate_bmi(weight, height):\n    return weight / (height ** 2)\n```"
  },
  {
    "task": "Implement a function that returns the initials of a person's name given a full name.",
    "code": "```python\ndef get_initials(full_name):\n    return ''.join(part[0].upper() for part in full_name.split())\n\n# Example usage:\n# initials = get_initials(\"John Doe\")\n# print(initials)  # Output: \"JD\"\n```"
  },
  {
    "task": "Write a function that accepts a list of names and returns them sorted alphabetically.",
    "code": "```python\ndef sort_names(names):\n    return sorted(names)\n```"
  },
  {
    "task": "Create a function that takes a list of integers and returns a list of their squares.",
    "code": "```python\ndef square_integers(int_list):\n    return [x ** 2 for x in int_list]\n```"
  },
  {
    "task": "Develop a function that returns the common elements between two sets.",
    "code": "```python\ndef common_elements(set1, set2):\n    return set1.intersection(set2)\n```"
  },
  {
    "task": "Implement a function that receives a list of strings and returns the shortest string.",
    "code": "```python\ndef shortest_string(strings):\n    return min(strings, key=len)\n```"
  },
  {
    "task": "Write a function that returns the sum of digits of a given integer.",
    "code": "```python\ndef sum_of_digits(n):\n    return sum(int(digit) for digit in str(abs(n)))\n```"
  },
  {
    "task": "Create a function that takes a matrix and returns its transpose.",
    "code": "```python\ndef transpose(matrix):\n    return [list(row) for row in zip(*matrix)]\n```"
  },
  {
    "task": "Design a function that returns the percentage of uppercase letters in a string.",
    "code": "```python\ndef percentage_uppercase(s):\n    if not s:\n        return 0\n    uppercase_count = sum(1 for char in s if char.isupper())\n    return (uppercase_count / len(s)) * 100\n```"
  },
  {
    "task": "Implement a function that accepts a string and returns it with each word capitalized.",
    "code": "```python\ndef capitalize_words(s):\n    return ' '.join(word.capitalize() for word in s.split())\n```"
  },
  {
    "task": "Write a function that takes a list and returns the difference between the max and min values.",
    "code": "```python\ndef max_min_difference(lst):\n    return max(lst) - min(lst)\n```"
  },
  {
    "task": "Create a function that returns a list containing the first n prime numbers.",
    "code": "```python\ndef is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef first_n_primes(n):\n    primes = []\n    num = 2\n    while len(primes) < n:\n        if is_prime(num):\n            primes.append(num)\n        num += 1\n    return primes\n```"
  },
  {
    "task": "Develop a function that receives a dictionary and returns a new dictionary with keys and values swapped.",
    "code": "```python\ndef swap_dict_keys_values(d):\n    return {v: k for k, v in d.items()}\n```"
  },
  {
    "task": "Implement a function that accepts a string and returns the frequency of each word.",
    "code": "```python\ndef word_frequency(s):\n    words = s.split()\n    frequency = {}\n    for word in words:\n        frequency[word] = frequency.get(word, 0) + 1\n    return frequency\n```"
  },
  {
    "task": "Write a function that takes two numbers and returns their greatest common divisor.",
    "code": "```python\ndef greatest_common_divisor(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n```"
  },
  {
    "task": "Create a function that returns the number of consonants in a given string.",
    "code": "```python\ndef count_consonants(s):\n    vowels = 'aeiouAEIOU'\n    return sum(1 for char in s if char.isalpha() and char not in vowels)\n```"
  },
  {
    "task": "Design a function that checks if a number is a perfect square and returns a boolean.",
    "code": "```python\nimport math\n\ndef is_perfect_square(number):\n    if number < 0:\n        return False\n    root = math.isqrt(number)\n    return root * root == number\n```"
  },
  {
    "task": "Implement a function that takes a list of numbers and returns the mode.",
    "code": "```python\nfrom collections import Counter\n\ndef find_mode(numbers):\n    if not numbers:\n        return None\n    count = Counter(numbers)\n    max_count = max(count.values())\n    mode = [num for num, freq in count.items() if freq == max_count]\n    return mode[0] if len(mode) == 1 else mode\n\n# Example usage:\n# mode = find_mode([1, 2, 2, 3, 3, 3, 4])\n# print(mode)  # Output: 3\n```"
  },
  {
    "task": "Write a function that accepts a string and returns a new string with characters in reverse order.",
    "code": "```python\ndef reverse_string(s):\n    return s[::-1]\n```"
  },
  {
    "task": "Create a function that returns the sum of all even numbers in a list.",
    "code": "```python\ndef sum_of_even_numbers(numbers):\n    return sum(num for num in numbers if num % 2 == 0)\n```"
  },
  {
    "task": "Develop a function that receives two lists and returns their union.",
    "code": "```python\ndef union_of_lists(list1, list2):\n    return list(set(list1) | set(list2))\n```"
  },
  {
    "task": "Implement a function that takes a string and returns the number of unique characters.",
    "code": "```python\ndef count_unique_characters(s):\n    return len(set(s))\n```"
  },
  {
    "task": "Write a function that returns the cube of a given number.",
    "code": "```python\ndef cube_number(n):\n    return n ** 3\n```"
  },
  {
    "task": "Create a function that calculates the power of a number given a base and exponent and returns the result.",
    "code": "```python\ndef power(base, exponent):\n    return base ** exponent\n```"
  },
  {
    "task": "Design a function that accepts a URL and returns its domain name.",
    "code": "```python\nfrom urllib.parse import urlparse\n\ndef get_domain_name(url):\n    parsed_url = urlparse(url)\n    return parsed_url.netloc\n```"
  },
  {
    "task": "Implement a function that takes a sentence and returns it with each letter shifted by one in the alphabet.",
    "code": "```python\ndef shift_sentence(sentence):\n    def shift_char(c):\n        if 'a' <= c <= 'z':\n            return chr((ord(c) - ord('a') + 1) % 26 + ord('a'))\n        elif 'A' <= c <= 'Z':\n            return chr((ord(c) - ord('A') + 1) % 26 + ord('A'))\n        else:\n            return c\n    \n    return ''.join(shift_char(c) for c in sentence)\n\n# Example usage:\n# result = shift_sentence(\"Hello World!\")\n# print(result)  # Outputs: \"Ifmmp Xpsme!\"\n```"
  },
  {
    "task": "Write a function that checks if a list is sorted and returns a boolean.",
    "code": "```python\ndef is_sorted(lst):\n    return lst == sorted(lst)\n```"
  },
  {
    "task": "Create a function that returns the longest increasing subsequence in a list of numbers.",
    "code": "```python\ndef longest_increasing_subsequence(nums):\n    if not nums:\n        return []\n    \n    n = len(nums)\n    dp = [1] * n\n    prev = [-1] * n\n    \n    max_len = 0\n    max_index = 0\n    \n    for i in range(n):\n        for j in range(i):\n            if nums[i] > nums[j] and dp[i] < dp[j] + 1:\n                dp[i] = dp[j] + 1\n                prev[i] = j\n        if dp[i] > max_len:\n            max_len = dp[i]\n            max_index = i\n    \n    lis = []\n    while max_index != -1:\n        lis.append(nums[max_index])\n        max_index = prev[max_index]\n    \n    return lis[::-1]\n```"
  },
  {
    "task": "Develop a function that calculates and returns the compound interest for given principal, rate, and time.",
    "code": "```python\ndef calculate_compound_interest(principal, rate, time):\n    amount = principal * (1 + rate) ** time\n    compound_interest = amount - principal\n    return compound_interest\n```"
  },
  {
    "task": "Implement a function that accepts two strings and returns their longest common substring.",
    "code": "```python\ndef longest_common_substring(str1, str2):\n    if not str1 or not str2:\n        return \"\"\n    \n    m, n = len(str1), len(str2)\n    max_length = 0\n    end_index = 0\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if str1[i - 1] == str2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n                if dp[i][j] > max_length:\n                    max_length = dp[i][j]\n                    end_index = i\n    \n    return str1[end_index - max_length:end_index]\n\n# Example usage:\n# result = longest_common_substring(\"abcde\", \"abfde\")\n# print(result)  # Output: \"ab\"\n```"
  },
  {
    "task": "Write a function that takes a number and returns true if it is a palindrome.",
    "code": "```python\ndef is_palindrome(number):\n    num_str = str(number)\n    return num_str == num_str[::-1]\n```"
  },
  {
    "task": "Create a function that returns the average length of words in a given sentence.",
    "code": "```python\ndef average_word_length(sentence):\n    words = sentence.split()\n    total_length = sum(len(word) for word in words)\n    return total_length / len(words) if words else 0\n```"
  },
  {
    "task": "Design a function that checks if a string contains only digits and returns a boolean.",
    "code": "```python\ndef contains_only_digits(s: str) -> bool:\n    return s.isdigit()\n```"
  },
  {
    "task": "Implement a function that receives a list of tuples and returns a list of the first elements.",
    "code": "```python\ndef first_elements(tuples_list):\n    return [t[0] for t in tuples_list]\n```"
  },
  {
    "task": "Write a function that takes a year and returns the Chinese zodiac sign for that year.",
    "code": "```python\ndef chinese_zodiac(year):\n    signs = [\n        \"Monkey\", \"Rooster\", \"Dog\", \"Pig\", \"Rat\", \"Ox\",\n        \"Tiger\", \"Rabbit\", \"Dragon\", \"Snake\", \"Horse\", \"Goat\"\n    ]\n    return signs[(year - 1900) % 12]\n```"
  },
  {
    "task": "Create a function that returns the number of trailing zeros in a factorial of a given number.",
    "code": "```python\ndef trailing_zeros_in_factorial(n):\n    count = 0\n    while n >= 5:\n        n //= 5\n        count += n\n    return count\n```"
  },
  {
    "task": "Develop a function that accepts a list and returns a new list with elements multiplied by their index.",
    "code": "```python\ndef multiply_elements_by_index(lst):\n    return [element * index for index, element in enumerate(lst)]\n```"
  },
  {
    "task": "Implement a function that receives a string and returns a dictionary of word lengths.",
    "code": "```python\ndef word_lengths(text):\n    return {word: len(word) for word in text.split()}\n```"
  },
  {
    "task": "Write a function that takes a list of integers and returns a list of numbers that are divisible by 3.",
    "code": "```python\ndef divisible_by_three(numbers):\n    return [num for num in numbers if num % 3 == 0]\n```"
  },
  {
    "task": "Create a function that returns the result of a quadratic equation given its coefficients.",
    "code": "```python\ndef solve_quadratic(a, b, c):\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        root1 = (-b + discriminant**0.5) / (2*a)\n        root2 = (-b - discriminant**0.5) / (2*a)\n        return root1, root2\n    elif discriminant == 0:\n        root = -b / (2*a)\n        return root,\n    else:\n        return None\n\n# Example usage:\n# roots = solve_quadratic(1, -3, 2)\n# print(roots)  # Output: (2.0, 1.0)\n```"
  },
  {
    "task": "Design a function that checks if two lists have any elements in common and returns a boolean.",
    "code": "```python\ndef have_common_elements(list1, list2):\n    return any(element in list2 for element in list1)\n```"
  },
  {
    "task": "Implement a function that accepts a list and returns the sum of its elements using recursion.",
    "code": "```python\ndef recursive_sum(lst):\n    if not lst:\n        return 0\n    return lst[0] + recursive_sum(lst[1:])\n```"
  },
  {
    "task": "Write a function that takes a list of numbers and returns the variance.",
    "code": "```python\ndef calculate_variance(numbers):\n    if not numbers:\n        return 0\n    mean = sum(numbers) / len(numbers)\n    variance = sum((x - mean) ** 2 for x in numbers) / len(numbers)\n    return variance\n```"
  },
  {
    "task": "Create a function that returns the ASCII value of a given character.",
    "code": "```python\ndef get_ascii_value(char):\n    return ord(char)\n```"
  },
  {
    "task": "Develop a function that takes a number and returns the number of bits required for its binary representation.",
    "code": "```python\ndef bits_required(n):\n    return n.bit_length()\n```"
  }
]