[
  {
    "task": "Create a function that initializes an array with the first ten prime numbers.",
    "code": "```python\ndef initialize_prime_array():\n    prime_array = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    return prime_array\n```"
  },
  {
    "task": "Write a program to reverse the elements of a given array.",
    "code": "```python\ndef reverse_array(arr):\n    return arr[::-1]\n\n# Example usage\narray = [1, 2, 3, 4, 5]\nreversed_array = reverse_array(array)\nprint(reversed_array)\n```"
  },
  {
    "task": "Implement an algorithm that finds the maximum value in an array of integers.",
    "code": "```python\ndef find_max_value(arr):\n    if not arr:\n        return None\n    max_value = arr[0]\n    for num in arr:\n        if num > max_value:\n            max_value = num\n    return max_value\n```"
  },
  {
    "task": "Design a routine to rotate an array to the right by a given number of steps.",
    "code": "```python\ndef rotate_array(arr, steps):\n    n = len(arr)\n    steps %= n\n    return arr[-steps:] + arr[:-steps]\n\n# Example usage:\narray = [1, 2, 3, 4, 5]\nsteps = 2\nrotated_array = rotate_array(array, steps)\nprint(rotated_array)\n```"
  },
  {
    "task": "Develop a function to merge two sorted arrays into one sorted array.",
    "code": "```python\ndef merge_sorted_arrays(arr1, arr2):\n    i, j = 0, 0\n    merged_array = []\n    \n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            merged_array.append(arr1[i])\n            i += 1\n        else:\n            merged_array.append(arr2[j])\n            j += 1\n    \n    while i < len(arr1):\n        merged_array.append(arr1[i])\n        i += 1\n    \n    while j < len(arr2):\n        merged_array.append(arr2[j])\n        j += 1\n    \n    return merged_array\n```"
  },
  {
    "task": "Create a method to remove duplicate values from an array.",
    "code": "```python\ndef remove_duplicates(arr):\n    return list(set(arr))\n\n# Example usage\narray = [1, 2, 2, 3, 4, 4, 5]\nresult = remove_duplicates(array)\nprint(result)\n```"
  },
  {
    "task": "Write a script to calculate the sum of all elements in an array.",
    "code": "```python\ndef sum_of_array(arr):\n    return sum(arr)\n\narray = [1, 2, 3, 4, 5]\nresult = sum_of_array(array)\nprint(result)\n```"
  },
  {
    "task": "Construct a function that finds the second largest element in an array.",
    "code": "```python\ndef second_largest(arr):\n    if len(arr) < 2:\n        return None\n    first, second = float('-inf'), float('-inf')\n    for number in arr:\n        if number > first:\n            second = first\n            first = number\n        elif first > number > second:\n            second = number\n    return second if second != float('-inf') else None\n\n# Example usage\narr = [3, 1, 4, 4, 5, 5, 2]\nprint(second_largest(arr))\n```"
  },
  {
    "task": "Design a program to check if an array contains a specific value.",
    "code": "```python\ndef contains_value(array, value):\n    return value in array\n\n# Example usage\narray = [1, 2, 3, 4, 5]\nvalue_to_check = 3\nresult = contains_value(array, value_to_check)\nprint(result)\n```"
  },
  {
    "task": "Implement a function to sort an array of strings alphabetically.",
    "code": "```python\ndef sort_strings(strings):\n    return sorted(strings)\n\n# Example usage\nstrings = [\"banana\", \"apple\", \"cherry\"]\nsorted_strings = sort_strings(strings)\nprint(sorted_strings)\n```"
  },
  {
    "task": "Create a method to search for a value in an array using binary search.",
    "code": "```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n```"
  },
  {
    "task": "Write a routine to calculate the average of numbers in an array.",
    "code": "```python\ndef calculate_average(numbers):\n    if len(numbers) == 0:\n        return 0\n    return sum(numbers) / len(numbers)\n\n# Example usage\nnumbers = [10, 20, 30, 40, 50]\naverage = calculate_average(numbers)\nprint(average)\n```"
  },
  {
    "task": "Develop a function to find the intersection of two arrays.",
    "code": "```python\ndef intersection(arr1, arr2):\n    return list(set(arr1) & set(arr2))\n\n# Example usage\narr1 = [1, 2, 2, 3, 4]\narr2 = [2, 3, 5]\nresult = intersection(arr1, arr2)\nprint(result)  # Output: [2, 3]\n```"
  },
  {
    "task": "Implement a method to find the union of two arrays without duplicates.",
    "code": "```python\ndef union_arrays(arr1, arr2):\n    return list(set(arr1) | set(arr2))\n\n# Example usage\narray1 = [1, 2, 3, 4, 5]\narray2 = [4, 5, 6, 7, 8]\nresult = union_arrays(array1, array2)\nprint(result)\n```"
  },
  {
    "task": "Create a program that shifts all zeroes in an array to the end.",
    "code": "```python\ndef shift_zeros_to_end(arr):\n    non_zero_index = 0\n    for i in range(len(arr)):\n        if arr[i] != 0:\n            arr[non_zero_index] = arr[i]\n            non_zero_index += 1\n    for i in range(non_zero_index, len(arr)):\n        arr[i] = 0\n    return arr\n\n# Example usage:\narr = [0, 1, 0, 3, 12]\nshifted_arr = shift_zeros_to_end(arr)\nprint(shifted_arr)\n```"
  },
  {
    "task": "Write a function to split an array into two parts at a given index.",
    "code": "```python\ndef split_array(arr, index):\n    return arr[:index], arr[index:]\n```"
  },
  {
    "task": "Design a script to find all pairs in an array that sum up to a specific target.",
    "code": "```python\ndef find_pairs_with_sum(arr, target):\n    pairs = []\n    seen = set()\n    for number in arr:\n        complement = target - number\n        if complement in seen:\n            pairs.append((complement, number))\n        seen.add(number)\n    return pairs\n\n# Example usage\narray = [2, 4, 3, 5, 7, 8, 9]\ntarget_sum = 9\nresult = find_pairs_with_sum(array, target_sum)\nprint(result)\n```"
  },
  {
    "task": "Construct a method to remove all occurrences of a specific value from an array.",
    "code": "```python\ndef remove_all_occurrences(arr, value):\n    return [x for x in arr if x != value]\n\n# Example usage\narray = [1, 2, 3, 4, 2, 5, 2, 6]\nvalue_to_remove = 2\nresult = remove_all_occurrences(array, value_to_remove)\nprint(result)\n```"
  },
  {
    "task": "Write a function to find the longest increasing subsequence in an array.",
    "code": "```python\ndef longest_increasing_subsequence(arr):\n    if not arr:\n        return []\n    \n    n = len(arr)\n    dp = [1] * n\n    prev = [-1] * n\n    \n    max_length = 0\n    max_index = 0\n    \n    for i in range(n):\n        for j in range(i):\n            if arr[i] > arr[j] and dp[i] < dp[j] + 1:\n                dp[i] = dp[j] + 1\n                prev[i] = j\n        if dp[i] > max_length:\n            max_length = dp[i]\n            max_index = i\n    \n    lis = []\n    while max_index != -1:\n        lis.append(arr[max_index])\n        max_index = prev[max_index]\n    \n    return lis[::-1]\n```"
  },
  {
    "task": "Develop an algorithm to find the missing number in a sequential array.",
    "code": "```python\ndef find_missing_number(arr):\n    n = len(arr) + 1\n    expected_sum = n * (n + 1) // 2\n    actual_sum = sum(arr)\n    return expected_sum - actual_sum\n\n# Example usage:\narr = [1, 2, 4, 5, 6]  # Missing number is 3\nmissing_number = find_missing_number(arr)\nprint(missing_number)\n```"
  },
  {
    "task": "Create a program to find the common elements between two arrays.",
    "code": "```python\ndef find_common_elements(array1, array2):\n    return list(set(array1).intersection(array2))\n\n# Example usage\narray1 = [1, 2, 3, 4, 5]\narray2 = [4, 5, 6, 7, 8]\ncommon_elements = find_common_elements(array1, array2)\nprint(common_elements)\n```"
  },
  {
    "task": "Implement a function to move all negative numbers to the beginning of an array.",
    "code": "```python\ndef move_negatives_to_front(arr):\n    return [x for x in arr if x < 0] + [x for x in arr if x >= 0]\n\n# Example usage:\n# arr = [1, -2, 3, -4, 5]\n# result = move_negatives_to_front(arr)\n# print(result)  # Output: [-2, -4, 1, 3, 5]\n```"
  },
  {
    "task": "Write a method to check if an array is a palindrome.",
    "code": "```python\ndef is_palindrome(arr):\n    return arr == arr[::-1]\n```"
  },
  {
    "task": "Design a routine to create a new array that is the element-wise sum of two input arrays.",
    "code": "```python\ndef elementwise_sum(array1, array2):\n    return [x + y for x, y in zip(array1, array2)]\n```"
  },
  {
    "task": "Create a function to find the product of all elements in an array, excluding the current element.",
    "code": "```python\ndef product_except_self(nums):\n    length = len(nums)\n    left_products = [1] * length\n    right_products = [1] * length\n    output = [1] * length\n    \n    for i in range(1, length):\n        left_products[i] = left_products[i - 1] * nums[i - 1]\n        \n    for i in range(length - 2, -1, -1):\n        right_products[i] = right_products[i + 1] * nums[i + 1]\n        \n    for i in range(length):\n        output[i] = left_products[i] * right_products[i]\n        \n    return output\n```"
  },
  {
    "task": "Develop a script to remove elements from an array that are smaller than a given threshold.",
    "code": "```python\ndef remove_elements_below_threshold(arr, threshold):\n    return [x for x in arr if x >= threshold]\n\n# Example usage\narray = [1, 5, 8, 3, 10, 2]\nthreshold = 5\nfiltered_array = remove_elements_below_threshold(array, threshold)\nprint(filtered_array)\n```"
  },
  {
    "task": "Implement a method to clone an array without using built-in functions.",
    "code": "```python\ndef clone_array(original):\n    cloned = [0] * len(original)\n    for i in range(len(original)):\n        cloned[i] = original[i]\n    return cloned\n\n# Example usage:\noriginal_array = [1, 2, 3, 4, 5]\ncloned_array = clone_array(original_array)\n```"
  },
  {
    "task": "Create a program that rotates a 2D array (matrix) 90 degrees clockwise.",
    "code": "```python\ndef rotate_matrix_90_clockwise(matrix):\n    return [list(reversed(col)) for col in zip(*matrix)]\n\n# Example usage:\nmatrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\n\nrotated_matrix = rotate_matrix_90_clockwise(matrix)\nprint(rotated_matrix)\n```"
  },
  {
    "task": "Write a function to find the kth smallest element in an unsorted array.",
    "code": "```python\ndef kth_smallest(arr, k):\n    arr.sort()\n    return arr[k-1]\n```"
  },
  {
    "task": "Design a routine to partition an array into even and odd numbers.",
    "code": "```python\ndef partition_even_odd(arr):\n    even = []\n    odd = []\n    for num in arr:\n        if num % 2 == 0:\n            even.append(num)\n        else:\n            odd.append(num)\n    return even, odd\n\n# Example usage:\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\neven_numbers, odd_numbers = partition_even_odd(numbers)\nprint(\"Even numbers:\", even_numbers)\nprint(\"Odd numbers:\", odd_numbers)\n```"
  },
  {
    "task": "Create a method to merge overlapping intervals in an array.",
    "code": "```python\ndef merge_intervals(intervals):\n    if not intervals:\n        return []\n\n    intervals.sort(key=lambda x: x[0])\n    merged = [intervals[0]]\n\n    for current in intervals[1:]:\n        last_merged = merged[-1]\n        if current[0] <= last_merged[1]:\n            merged[-1] = [last_merged[0], max(last_merged[1], current[1])]\n        else:\n            merged.append(current)\n\n    return merged\n```"
  },
  {
    "task": "Develop a function to count the frequency of each unique element in an array.",
    "code": "```python\ndef count_frequencies(arr):\n    frequency = {}\n    for element in arr:\n        if element in frequency:\n            frequency[element] += 1\n        else:\n            frequency[element] = 1\n    return frequency\n```"
  },
  {
    "task": "Write a program to generate all possible subsets of an array.",
    "code": "```python\ndef generate_subsets(arr):\n    subsets = [[]]\n    for num in arr:\n        subsets += [curr_subset + [num] for curr_subset in subsets]\n    return subsets\n\n# Example usage:\narray = [1, 2, 3]\nall_subsets = generate_subsets(array)\nprint(all_subsets)\n```"
  },
  {
    "task": "Implement a routine to cyclically permute the elements of an array.",
    "code": "```python\ndef cyclic_permute(arr):\n    if not arr:\n        return arr\n    # Move the last element to the front\n    last_element = arr.pop()\n    arr.insert(0, last_element)\n    return arr\n\n# Example usage:\narray = [1, 2, 3, 4, 5]\nnew_array = cyclic_permute(array)\nprint(new_array)\n```"
  },
  {
    "task": "Create a function that checks if two arrays are equal regardless of element order.",
    "code": "```python\ndef arrays_are_equal(arr1, arr2):\n    return sorted(arr1) == sorted(arr2)\n```"
  },
  {
    "task": "Design a script to initialize an array with random integers within a specified range.",
    "code": "```python\nimport random\n\ndef initialize_array(size, lower_bound, upper_bound):\n    return [random.randint(lower_bound, upper_bound) for _ in range(size)]\n\n# Example usage\nsize = 10\nlower_bound = 1\nupper_bound = 100\nrandom_array = initialize_array(size, lower_bound, upper_bound)\nprint(random_array)\n```"
  },
  {
    "task": "Write a method to convert an array of integers to a single concatenated number.",
    "code": "```python\ndef concatenate_numbers(nums):\n    return int(''.join(map(str, nums)))\n```"
  },
  {
    "task": "Develop a function to find the median value of an unsorted array.",
    "code": "```python\ndef find_median(arr):\n    arr.sort()\n    n = len(arr)\n    mid = n // 2\n    if n % 2 == 0:\n        return (arr[mid - 1] + arr[mid]) / 2\n    else:\n        return arr[mid]\n\n# Example usage:\n# array = [3, 1, 4, 2, 5]\n# print(find_median(array))  # Output: 3\n```"
  },
  {
    "task": "Create a routine to determine if an array is sorted in ascending order.",
    "code": "```python\ndef is_sorted_ascending(arr):\n    return all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1))\n```"
  },
  {
    "task": "Implement a method to find the longest contiguous subarray with equal number of 0s and 1s.",
    "code": "```python\ndef findMaxLength(nums):\n    count_map = {0: -1}\n    max_length = count = 0\n\n    for i, num in enumerate(nums):\n        count += 1 if num == 1 else -1\n        if count in count_map:\n            max_length = max(max_length, i - count_map[count])\n        else:\n            count_map[count] = i\n\n    return max_length\n```"
  },
  {
    "task": "Write a function to interleave two arrays of equal length.",
    "code": "```python\ndef interleave_arrays(arr1, arr2):\n    return [val for pair in zip(arr1, arr2) for val in pair]\n```"
  },
  {
    "task": "Design a program to replace each element in an array with the next greatest element.",
    "code": "```python\ndef replace_with_next_greatest(arr):\n    n = len(arr)\n    if n == 0:\n        return arr\n    result = [0] * n\n    max_from_right = arr[-1]\n    result[-1] = -1\n    for i in range(n-2, -1, -1):\n        result[i] = max_from_right\n        if arr[i] > max_from_right:\n            max_from_right = arr[i]\n    return result\n\n# Example usage:\narr = [16, 17, 4, 3, 5, 2]\nnew_arr = replace_with_next_greatest(arr)\nprint(new_arr)  # Output: [17, 5, 5, 5, 2, -1]\n```"
  },
  {
    "task": "Create a function to calculate the dot product of two numeric arrays.",
    "code": "```python\ndef dot_product(array1, array2):\n    return sum(x * y for x, y in zip(array1, array2))\n```"
  },
  {
    "task": "Develop a script to find the first recurring element in an array.",
    "code": "```python\ndef first_recurring_element(arr):\n    seen = set()\n    for element in arr:\n        if element in seen:\n            return element\n        seen.add(element)\n    return None\n\n# Example usage:\narr = [2, 5, 1, 2, 3, 5, 1, 2, 4]\nprint(first_recurring_element(arr))\n```"
  },
  {
    "task": "Write a method to check if an array is a subset of another array.",
    "code": "```python\ndef is_subset(arr1, arr2):\n    return set(arr1).issubset(set(arr2))\n```"
  },
  {
    "task": "Implement a function to add a specific value to each element in an array.",
    "code": "```python\ndef add_value_to_array(arr, value):\n    return [x + value for x in arr]\n```"
  },
  {
    "task": "Create a program that finds the largest product of three numbers in an array.",
    "code": "```python\ndef largest_product_of_three(arr):\n    arr.sort()\n    return max(arr[-1] * arr[-2] * arr[-3], arr[0] * arr[1] * arr[-1])\n\n# Example usage\narray = [1, 10, 2, 6, 5, 3]\nprint(largest_product_of_three(array))\n```"
  },
  {
    "task": "Design a routine to find all unique permutations of an array.",
    "code": "```python\nfrom itertools import permutations\n\ndef unique_permutations(arr):\n    return list(set(permutations(arr)))\n\n# Example usage\narr = [1, 2, 2]\nresult = unique_permutations(arr)\nprint(result)\n```"
  },
  {
    "task": "Write a function to transpose a square matrix represented as a 2D array.",
    "code": "```python\ndef transpose_matrix(matrix):\n    n = len(matrix)\n    transposed = [[matrix[j][i] for j in range(n)] for i in range(n)]\n    return transposed\n```"
  },
  {
    "task": "Develop a method to find the longest common prefix in an array of strings.",
    "code": "```python\ndef longest_common_prefix(strs):\n    if not strs:\n        return \"\"\n    \n    prefix = strs[0]\n    for string in strs[1:]:\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]\n            if not prefix:\n                return \"\"\n    return prefix\n\n# Example usage:\n# result = longest_common_prefix([\"flower\", \"flow\", \"flight\"])\n# print(result)  # Output: \"fl\"\n```"
  },
  {
    "task": "Implement a function to flatten a multi-dimensional array into a single array.",
    "code": "```python\ndef flatten_array(arr):\n    flattened = []\n    for element in arr:\n        if isinstance(element, list):\n            flattened.extend(flatten_array(element))\n        else:\n            flattened.append(element)\n    return flattened\n\n# Example usage\n# multi_dimensional_array = [[1, 2, [3, 4]], [5, 6], 7]\n# print(flatten_array(multi_dimensional_array))\n```"
  },
  {
    "task": "Create a script to shift elements of an array to the left by a given number of positions.",
    "code": "```python\ndef shift_left(arr, positions):\n    n = len(arr)\n    positions %= n  # Ensure the shift is within the array length\n    return arr[positions:] + arr[:positions]\n\n# Example usage:\narray = [1, 2, 3, 4, 5]\nshifted_array = shift_left(array, 2)\nprint(shifted_array)  # Output: [3, 4, 5, 1, 2]\n```"
  },
  {
    "task": "Write a routine to sort an array of objects based on a specific property.",
    "code": "```python\ndef sort_objects_by_property(objects, property_name):\n    return sorted(objects, key=lambda obj: getattr(obj, property_name))\n\n# Example usage\nclass ExampleObject:\n    def __init__(self, name, value):\n        self.name = name\n        self.value = value\n\nobjects = [\n    ExampleObject(\"obj1\", 10),\n    ExampleObject(\"obj2\", 5),\n    ExampleObject(\"obj3\", 7)\n]\n\nsorted_objects = sort_objects_by_property(objects, 'value')\n```"
  },
  {
    "task": "Design a program to find the smallest missing positive integer in an array.",
    "code": "```python\ndef find_smallest_missing_positive(nums):\n    nums = [num for num in nums if num > 0]\n    nums_set = set(nums)\n    smallest_missing = 1\n    while smallest_missing in nums_set:\n        smallest_missing += 1\n    return smallest_missing\n\n# Example usage\narray = [3, 4, -1, 1]\nprint(find_smallest_missing_positive(array))\n```"
  },
  {
    "task": "Create a function to calculate the cumulative sum of an array.",
    "code": "```python\ndef cumulative_sum(arr):\n    result = []\n    total = 0\n    for num in arr:\n        total += num\n        result.append(total)\n    return result\n```"
  },
  {
    "task": "Develop a function to remove consecutive duplicate elements in an array.",
    "code": "```python\ndef remove_consecutive_duplicates(arr):\n    if not arr:\n        return []\n\n    result = [arr[0]]\n    for i in range(1, len(arr)):\n        if arr[i] != arr[i - 1]:\n            result.append(arr[i])\n    return result\n```"
  },
  {
    "task": "Implement a method to find the majority element in an array, if any.",
    "code": "```python\ndef find_majority_element(arr):\n    candidate, count = None, 0\n    for num in arr:\n        if count == 0:\n            candidate, count = num, 1\n        elif num == candidate:\n            count += 1\n        else:\n            count -= 1\n\n    if arr.count(candidate) > len(arr) // 2:\n        return candidate\n    return None\n```"
  },
  {
    "task": "Write a script to split an array into chunks of a given size.",
    "code": "```python\ndef split_array_into_chunks(arr, chunk_size):\n    return [arr[i:i + chunk_size] for i in range(0, len(arr), chunk_size)]\n\n# Example usage:\narray = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nchunk_size = 3\nchunks = split_array_into_chunks(array, chunk_size)\nprint(chunks)\n```"
  },
  {
    "task": "Create a program to calculate the difference between the largest and smallest values in an array.",
    "code": "```python\ndef calculate_difference(arr):\n    if not arr:\n        return 0\n    largest = max(arr)\n    smallest = min(arr)\n    return largest - smallest\n\n# Example usage:\narray = [3, 1, 9, 7, 5]\ndifference = calculate_difference(array)\nprint(difference)\n```"
  },
  {
    "task": "Design a routine to find the starting index of a target subarray in a larger array.",
    "code": "```python\ndef find_subarray_start_index(arr, target):\n    target_length = len(target)\n    for i in range(len(arr) - target_length + 1):\n        if arr[i:i + target_length] == target:\n            return i\n    return -1\n\n# Example usage\narr = [1, 2, 3, 4, 5, 6]\ntarget = [3, 4, 5]\nprint(find_subarray_start_index(arr, target))  # Output: 2\n```"
  },
  {
    "task": "Write a function to compress an array by eliminating zero values.",
    "code": "```python\ndef compress_array(arr):\n    return [x for x in arr if x != 0]\n```"
  },
  {
    "task": "Develop a method to determine if an array can be split into two parts with equal sums.",
    "code": "```python\ndef can_split_array(arr):\n    total_sum = sum(arr)\n    if total_sum % 2 != 0:\n        return False\n    \n    target = total_sum // 2\n    dp = [False] * (target + 1)\n    dp[0] = True\n    \n    for num in arr:\n        for i in range(target, num - 1, -1):\n            dp[i] = dp[i] or dp[i - num]\n    \n    return dp[target]\n\n# Example usage:\n# arr = [1, 5, 11, 5]\n# print(can_split_array(arr))  # Output: True\n```"
  },
  {
    "task": "Implement a function to round each element in an array to the nearest integer.",
    "code": "```python\ndef round_elements(arr):\n    return [round(x) for x in arr]\n\n# Example usage:\narray = [2.3, 3.7, 4.5, 5.2]\nrounded_array = round_elements(array)\n```"
  },
  {
    "task": "Create a routine to generate an array of the Fibonacci sequence up to a given number.",
    "code": "```python\ndef fibonacci_sequence_up_to(n):\n    fib_sequence = []\n    a, b = 0, 1\n    while a <= n:\n        fib_sequence.append(a)\n        a, b = b, a + b\n    return fib_sequence\n\n# Example usage:\n# fib_array = fibonacci_sequence_up_to(10)\n```"
  },
  {
    "task": "Write a program to find the longest repeating sequence in an array.",
    "code": "```python\ndef longest_repeating_sequence(arr):\n    n = len(arr)\n    max_len = 0\n    sequence = []\n\n    # Create a 2D array to store lengths of longest \n    # repeating subsequences.\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    \n    # Fill dp table\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if arr[i - 1] == arr[j - 1] and i != j:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n                if dp[i][j] > max_len:\n                    max_len = dp[i][j]\n                    sequence = arr[i - max_len:i]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    return sequence\n\n# Example usage:\narr = [1, 2, 3, 1, 2, 3, 1, 2]\nprint(longest_repeating_sequence(arr))\n```"
  },
  {
    "task": "Design a function to multiply each element of an array by its index.",
    "code": "```python\ndef multiply_elements_by_index(arr):\n    return [element * index for index, element in enumerate(arr)]\n```"
  },
  {
    "task": "Create a method to convert an array of characters into a single string.",
    "code": "```python\ndef array_to_string(char_array):\n    return ''.join(char_array)\n```"
  },
  {
    "task": "Develop a function to fill an array with a specified value.",
    "code": "```python\ndef fill_array(length, value):\n    return [value] * length\n```"
  },
  {
    "task": "Implement a routine to determine if an array has any duplicate elements.",
    "code": "```python\ndef has_duplicates(arr):\n    return len(arr) != len(set(arr))\n```"
  },
  {
    "task": "Write a script to reverse the order of words in an array of strings.",
    "code": "```python\ndef reverse_words(arr):\n    return arr[::-1]\n\nwords = [\"hello\", \"world\", \"this\", \"is\", \"a\", \"test\"]\nreversed_words = reverse_words(words)\nprint(reversed_words)\n```"
  },
  {
    "task": "Create a function to calculate the total number of distinct elements in an array.",
    "code": "```python\ndef count_distinct_elements(arr):\n    return len(set(arr))\n```"
  },
  {
    "task": "Design a program to find the largest gap between consecutive elements in a sorted array.",
    "code": "```python\ndef largest_gap(arr):\n    if len(arr) < 2:\n        return 0\n    arr.sort()\n    return max(arr[i+1] - arr[i] for i in range(len(arr) - 1))\n\n# Example usage\nsorted_array = [3, 5, 9, 1, 4]\nprint(largest_gap(sorted_array))\n```"
  },
  {
    "task": "Write a routine to perform element-wise multiplication of two arrays.",
    "code": "```python\ndef elementwise_multiply(array1, array2):\n    return [a * b for a, b in zip(array1, array2)]\n```"
  },
  {
    "task": "Develop a method to split a string into an array of words.",
    "code": "```python\ndef split_string_into_words(input_string):\n    return input_string.split()\n\n# Example usage\nwords = split_string_into_words(\"Develop a method to split a string into an array of words\")\nprint(words)\n```"
  },
  {
    "task": "Implement a function to find the longest contiguous subarray with a sum less than a target.",
    "code": "```python\ndef longest_subarray_with_sum_less_than_target(arr, target):\n    max_length = 0\n    start = 0\n    current_sum = 0\n\n    for end in range(len(arr)):\n        current_sum += arr[end]\n\n        while current_sum >= target and start <= end:\n            current_sum -= arr[start]\n            start += 1\n\n        max_length = max(max_length, end - start + 1)\n\n    return max_length\n\n# Example usage:\n# arr = [1, 2, 3, 4, 5]\n# target = 10\n# print(longest_subarray_with_sum_less_than_target(arr, target)) # Output: 3\n```"
  },
  {
    "task": "Create a script to rotate a 2D array (matrix) 180 degrees.",
    "code": "```python\ndef rotate_180(matrix):\n    return [row[::-1] for row in matrix[::-1]]\n\n# Example usage:\nmatrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\n\nrotated_matrix = rotate_180(matrix)\nfor row in rotated_matrix:\n    print(row)\n```"
  },
  {
    "task": "Write a program to convert an array of binary digits to its decimal equivalent.",
    "code": "```python\ndef binary_to_decimal(binary_array):\n    decimal = 0\n    for digit in binary_array:\n        decimal = decimal * 2 + digit\n    return decimal\n\n# Example usage\nbinary_array = [1, 0, 1, 1]\ndecimal_value = binary_to_decimal(binary_array)\nprint(decimal_value)\n```"
  },
  {
    "task": "Design a function to return a new array with elements squared from the input array.",
    "code": "```python\ndef square_elements(arr):\n    return [x ** 2 for x in arr]\n```"
  },
  {
    "task": "Create a method to check if all elements in an array are unique.",
    "code": "```python\ndef all_unique(arr):\n    return len(arr) == len(set(arr))\n```"
  },
  {
    "task": "Develop a routine to find the indices of all occurrences of a specific element in an array.",
    "code": "```python\ndef find_indices_of_element(arr, element):\n    return [index for index, value in enumerate(arr) if value == element]\n\n# Example usage\narr = [1, 2, 3, 2, 4, 2, 5]\nelement = 2\nindices = find_indices_of_element(arr, element)\nprint(indices)  # Output: [1, 3, 5]\n```"
  },
  {
    "task": "Implement a function to merge multiple arrays into one.",
    "code": "```python\ndef merge_arrays(*arrays):\n    result = []\n    for array in arrays:\n        result.extend(array)\n    return result\n```"
  },
  {
    "task": "Write a script to convert an array of integers into a formatted string.",
    "code": "```python\ndef array_to_string(arr):\n    return ', '.join(map(str, arr))\n\n# Example usage\nintegers = [1, 2, 3, 4, 5]\nformatted_string = array_to_string(integers)\nprint(formatted_string)\n```"
  },
  {
    "task": "Create a program to find the largest sum of any contiguous subarray.",
    "code": "```python\ndef max_subarray_sum(arr):\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    for num in arr:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum\n\n# Example usage:\narr = [1, -3, 2, 1, -1]\nprint(max_subarray_sum(arr))\n```"
  },
  {
    "task": "Design a function to compare two arrays and return the differences.",
    "code": "```python\ndef compare_arrays(arr1, arr2):\n    differences = {\n        'in_first_not_second': [item for item in arr1 if item not in arr2],\n        'in_second_not_first': [item for item in arr2 if item not in arr1]\n    }\n    return differences\n```"
  },
  {
    "task": "Write a method to find the longest subarray with elements in arithmetic progression.",
    "code": "```python\ndef longest_arithmetic_subarray(arr):\n    if len(arr) < 2:\n        return arr\n\n    max_len = 1\n    current_len = 1\n    diff = arr[1] - arr[0]\n\n    for i in range(1, len(arr) - 1):\n        if arr[i + 1] - arr[i] == diff:\n            current_len += 1\n        else:\n            diff = arr[i + 1] - arr[i]\n            current_len = 2\n\n        if current_len > max_len:\n            max_len = current_len\n\n    return max_len\n\n# Example usage\narr = [1, 3, 5, 7, 9, 10, 12]\nprint(longest_arithmetic_subarray(arr))\n```"
  },
  {
    "task": "Develop a routine to remove elements from an array based on a predicate function.",
    "code": "```python\ndef remove_elements(array, predicate):\n    return [element for element in array if not predicate(element)]\n\n# Example usage:\n# Define a predicate function\ndef is_even(number):\n    return number % 2 == 0\n\n# Original array\nnumbers = [1, 2, 3, 4, 5, 6]\n\n# Remove elements based on the predicate\nresult = remove_elements(numbers, is_even)\nprint(result)  # Output: [1, 3, 5]\n```"
  },
  {
    "task": "Implement a function to determine if two arrays have any common elements.",
    "code": "```python\ndef have_common_elements(arr1, arr2):\n    return any(element in arr2 for element in arr1)\n\n# Example usage\narray1 = [1, 2, 3, 4]\narray2 = [5, 6, 7, 8]\nprint(have_common_elements(array1, array2))  # Output: False\n\narray3 = [9, 10, 11, 12]\narray4 = [11, 13, 14, 15]\nprint(have_common_elements(array3, array4))  # Output: True\n```"
  },
  {
    "task": "Create a script to initialize an empty array and populate it with user input.",
    "code": "```python\narray = []\nwhile True:\n    user_input = input(\"Enter a value to add to the array (or type 'done' to finish): \")\n    if user_input.lower() == 'done':\n        break\n    array.append(user_input)\nprint(\"Final array:\", array)\n```"
  },
  {
    "task": "Write a program to find the maximum sum of non-adjacent elements in an array.",
    "code": "```python\ndef max_sum_non_adjacent(arr):\n    if not arr:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    \n    prev_one = 0\n    prev_two = 0\n    \n    for num in arr:\n        current = max(prev_one, prev_two + num)\n        prev_two = prev_one\n        prev_one = current\n    \n    return prev_one\n\n# Example usage:\narr = [3, 2, 5, 10, 7]\nprint(max_sum_non_adjacent(arr))\n```"
  },
  {
    "task": "Design a function to shuffle an array randomly.",
    "code": "```python\nimport random\n\ndef shuffle_array(arr):\n    random.shuffle(arr)\n    return arr\n```"
  },
  {
    "task": "Create a method to generate a new array where each element is the cumulative product of the input array.",
    "code": "```python\ndef cumulative_product(arr):\n    if not arr:\n        return []\n    result = [arr[0]]\n    for i in range(1, len(arr)):\n        result.append(result[-1] * arr[i])\n    return result\n```"
  },
  {
    "task": "Develop a routine to find the largest element in each row of a 2D array.",
    "code": "```python\ndef largest_in_rows(array):\n    return [max(row) for row in array]\n```"
  },
  {
    "task": "Implement a function to count the number of negative numbers in an array.",
    "code": "```python\ndef count_negatives(arr):\n    return sum(1 for num in arr if num < 0)\n\n# Example usage\nexample_array = [1, -2, 3, -4, 5]\nnegative_count = count_negatives(example_array)\nprint(negative_count)\n```"
  },
  {
    "task": "Write a script to find the longest subarray with all distinct elements.",
    "code": "```python\ndef longest_distinct_subarray(arr):\n    start = 0\n    max_length = 0\n    index_map = {}\n    \n    for end in range(len(arr)):\n        if arr[end] in index_map:\n            start = max(start, index_map[arr[end]] + 1)\n        \n        index_map[arr[end]] = end\n        max_length = max(max_length, end - start + 1)\n    \n    return max_length\n\n# Example usage\narr = [1, 2, 3, 1, 2, 3, 2, 2]\nprint(longest_distinct_subarray(arr))  # Output: 3\n```"
  }
]