[
  {
    "task": "Write a program that reads a user's name and age from the input, then prints a greeting message using both values.",
    "code": "```python\nname = input(\"Enter your name: \")\nage = input(\"Enter your age: \")\nprint(f\"Hello, {name}! You are {age} years old.\")\n```"
  },
  {
    "task": "Create a script that continuously reads numbers from the input and prints their running total until a negative number is entered.",
    "code": "```python\nrunning_total = 0\n\nwhile True:\n    try:\n        number = float(input(\"Enter a number: \"))\n        if number < 0:\n            break\n        running_total += number\n        print(f\"Running total: {running_total}\")\n    except ValueError:\n        print(\"Please enter a valid number.\")\n```"
  },
  {
    "task": "Design a program that asks the user for a sentence and outputs the number of words it contains.",
    "code": "```python\nsentence = input(\"Please enter a sentence: \")\nword_count = len(sentence.split())\nprint(\"The number of words in the sentence is:\", word_count)\n```"
  },
  {
    "task": "Build a command-line tool that reads a list of integers and outputs them in sorted order.",
    "code": "```python\ndef main():\n    import sys\n    if len(sys.argv) < 2:\n        print(\"Usage: python script.py <space-separated-integers>\")\n        return\n    try:\n        numbers = list(map(int, sys.argv[1:]))\n        numbers.sort()\n        print(\"Sorted numbers:\", \" \".join(map(str, numbers)))\n    except ValueError:\n        print(\"Error: All inputs must be integers.\")\n\nif __name__ == \"__main__\":\n    main()\n```"
  },
  {
    "task": "Develop a program that reads a file name from the input, then prints the number of lines in that file.",
    "code": "```python\nfilename = input(\"Enter the file name: \")\nwith open(filename, 'r') as file:\n    line_count = sum(1 for _ in file)\nprint(line_count)\n```"
  },
  {
    "task": "Implement a calculator that reads two numbers and an operator (+, -, *, /) from the input and prints the result.",
    "code": "```python\ndef calculator():\n    num1 = float(input(\"Enter the first number: \"))\n    operator = input(\"Enter an operator (+, -, *, /): \")\n    num2 = float(input(\"Enter the second number: \"))\n    \n    if operator == '+':\n        result = num1 + num2\n    elif operator == '-':\n        result = num1 - num2\n    elif operator == '*':\n        result = num1 * num2\n    elif operator == '/':\n        result = num1 / num2\n    else:\n        result = \"Invalid operator\"\n    \n    print(\"Result:\", result)\n\ncalculator()\n```"
  },
  {
    "task": "Write a script that reads a user's full name and prints it in reverse order.",
    "code": "```python\nfull_name = input(\"Enter your full name: \")\nreversed_name = full_name[::-1]\nprint(\"Reversed name:\", reversed_name)\n```"
  },
  {
    "task": "Create a program that asks for a word and checks if it is a palindrome, printing the appropriate message.",
    "code": "```python\nword = input(\"Enter a word: \")\nif word == word[::-1]:\n    print(\"The word is a palindrome.\")\nelse:\n    print(\"The word is not a palindrome.\")\n```"
  },
  {
    "task": "Develop a tool that reads multiple lines of text and outputs the longest line.",
    "code": "```python\ndef find_longest_line():\n    import sys\n    longest_line = \"\"\n    for line in sys.stdin:\n        if len(line) > len(longest_line):\n            longest_line = line\n    print(longest_line, end='')\n\nfind_longest_line()\n```"
  },
  {
    "task": "Design a script that reads a number 'n' and prints the first 'n' Fibonacci numbers.",
    "code": "```python\ndef fibonacci(n):\n    a, b = 0, 1\n    for _ in range(n):\n        print(a, end=' ')\n        a, b = b, a + b\n\nif __name__ == \"__main__\":\n    n = int(input(\"Enter a number: \"))\n    fibonacci(n)\n```"
  },
  {
    "task": "Write a program that takes a list of numbers from the input and prints only the even ones.",
    "code": "```python\nnumbers = map(int, input().split())\neven_numbers = filter(lambda x: x % 2 == 0, numbers)\nprint(*even_numbers)\n```"
  },
  {
    "task": "Create a script that reads a date (day, month, year) and prints the day of the week for that date.",
    "code": "```python\nimport datetime\n\ndef main():\n    date_input = input(\"Enter a date (dd-mm-yyyy): \")\n    day, month, year = map(int, date_input.split('-'))\n    date = datetime.date(year, month, day)\n    print(date.strftime(\"%A\"))\n\nif __name__ == \"__main__\":\n    main()\n```"
  },
  {
    "task": "Develop a program that reads a paragraph and counts the frequency of each letter in the text.",
    "code": "```python\ndef count_letter_frequency(paragraph):\n    letter_frequency = {}\n    for char in paragraph:\n        if char.isalpha():\n            char = char.lower()\n            if char in letter_frequency:\n                letter_frequency[char] += 1\n            else:\n                letter_frequency[char] = 1\n    return letter_frequency\n\ndef main():\n    paragraph = input(\"Enter a paragraph: \")\n    frequency = count_letter_frequency(paragraph)\n    for letter, count in sorted(frequency.items()):\n        print(f\"{letter}: {count}\")\n\nif __name__ == \"__main__\":\n    main()\n```"
  },
  {
    "task": "Build a tool that reads a text and a word, then prints the number of times the word appears in the text.",
    "code": "```python\ntext = input(\"Enter the text: \")\nword = input(\"Enter the word to search for: \")\ncount = text.split().count(word)\nprint(count)\n```"
  },
  {
    "task": "Implement a script that reads a temperature in Celsius and converts it to Fahrenheit, printing the result.",
    "code": "```python\ncelsius = float(input(\"Enter temperature in Celsius: \"))\nfahrenheit = (celsius * 9/5) + 32\nprint(\"Temperature in Fahrenheit:\", fahrenheit)\n```"
  },
  {
    "task": "Write a program that continuously reads input until the word 'exit' is entered, then prints all entered inputs.",
    "code": "```python\ninputs = []\nwhile True:\n    user_input = input()\n    if user_input.lower() == 'exit':\n        break\n    inputs.append(user_input)\nfor i in inputs:\n    print(i)\n```"
  },
  {
    "task": "Create a tool that prompts for a filename, reads the file, and prints its content in uppercase.",
    "code": "```python\nfilename = input(\"Enter the filename: \")\nwith open(filename, 'r') as file:\n    content = file.read()\n    print(content.upper())\n```"
  },
  {
    "task": "Develop a program that reads a series of email addresses and prints the unique domain names.",
    "code": "```python\ndef get_unique_domains():\n    email_addresses = []\n    print(\"Enter email addresses one per line (end with an empty line):\")\n    while True:\n        email = input().strip()\n        if email == \"\":\n            break\n        email_addresses.append(email)\n    \n    domains = set()\n    for email in email_addresses:\n        try:\n            domain = email.split('@')[1]\n            domains.add(domain)\n        except IndexError:\n            continue\n    \n    print(\"Unique domain names:\")\n    for domain in domains:\n        print(domain)\n\nget_unique_domains()\n```"
  },
  {
    "task": "Design a script that reads a string and prints whether it contains all the letters of the alphabet.",
    "code": "```python\nimport sys\nimport string\n\ndef contains_all_letters(s):\n    alphabet_set = set(string.ascii_lowercase)\n    return alphabet_set <= set(s.lower())\n\nif __name__ == \"__main__\":\n    input_string = sys.stdin.read().strip()\n    if contains_all_letters(input_string):\n        print(\"Contains all letters of the alphabet\")\n    else:\n        print(\"Does not contain all letters of the alphabet\")\n```"
  },
  {
    "task": "Write a program that reads a number and prints its factorial.",
    "code": "```python\nimport sys\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nif __name__ == \"__main__\":\n    number = int(sys.stdin.read().strip())\n    print(factorial(number))\n```"
  },
  {
    "task": "Create a tool that reads a list of names and prints them in alphabetical order.",
    "code": "```python\ndef main():\n    # Read input from the user\n    names = input(\"Enter a list of names, separated by commas: \")\n    # Split the input string into a list of names\n    name_list = [name.strip() for name in names.split(',')]\n    # Sort the list of names alphabetically\n    name_list.sort()\n    # Print each name in alphabetical order\n    for name in name_list:\n        print(name)\n\nif __name__ == \"__main__\":\n    main()\n```"
  },
  {
    "task": "Develop a program that asks for a sentence and prints each word on a new line.",
    "code": "```python\nsentence = input(\"Enter a sentence: \")\nfor word in sentence.split():\n    print(word)\n```"
  },
  {
    "task": "Build a script that reads a time in 12-hour format and converts it to 24-hour format.",
    "code": "```python\ndef convert_to_24hr(time_12hr):\n    period = time_12hr[-2:]\n    time_parts = time_12hr[:-2].split(':')\n    hours = int(time_parts[0])\n    minutes = time_parts[1]\n    \n    if period.upper() == 'PM' and hours != 12:\n        hours += 12\n    elif period.upper() == 'AM' and hours == 12:\n        hours = 0\n    \n    return f\"{hours:02}:{minutes}\"\n\nif __name__ == \"__main__\":\n    time_12hr = input(\"Enter time in 12-hour format (hh:mmAM/PM): \")\n    time_24hr = convert_to_24hr(time_12hr)\n    print(\"Time in 24-hour format:\", time_24hr)\n```"
  },
  {
    "task": "Implement a program that reads two strings and checks if they are anagrams, printing the result.",
    "code": "```python\ndef are_anagrams(s1, s2):\n    return sorted(s1) == sorted(s2)\n\ndef main():\n    s1 = input(\"Enter the first string: \")\n    s2 = input(\"Enter the second string: \")\n    if are_anagrams(s1, s2):\n        print(\"The strings are anagrams.\")\n    else:\n        print(\"The strings are not anagrams.\")\n\nif __name__ == \"__main__\":\n    main()\n```"
  },
  {
    "task": "Write a tool that reads a paragraph and prints the first and last sentence.",
    "code": "```python\ndef first_and_last_sentence(paragraph):\n    import re\n    sentences = re.split(r'(?<=[.!?]) +', paragraph.strip())\n    if sentences:\n        first_sentence = sentences[0]\n        last_sentence = sentences[-1]\n        print(\"First sentence:\", first_sentence)\n        print(\"Last sentence:\", last_sentence)\n\nparagraph = input(\"Enter a paragraph: \")\nfirst_and_last_sentence(paragraph)\n```"
  },
  {
    "task": "Create a program that reads a binary number and converts it to decimal.",
    "code": "```python\nbinary_number = input(\"Enter a binary number: \")\ndecimal_number = int(binary_number, 2)\nprint(\"Decimal number:\", decimal_number)\n```"
  },
  {
    "task": "Develop a script that reads a series of scores and prints the average score.",
    "code": "```python\ndef main():\n    print(\"Enter scores separated by spaces:\")\n    scores = input().strip().split()\n    scores = [float(score) for score in scores]\n    if scores:\n        average_score = sum(scores) / len(scores)\n        print(f\"Average score: {average_score}\")\n    else:\n        print(\"No scores entered.\")\n\nif __name__ == \"__main__\":\n    main()\n```"
  },
  {
    "task": "Design a program that reads a list of integers and prints the prime numbers.",
    "code": "```python\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef main():\n    input_string = input(\"Enter a list of integers separated by spaces: \")\n    numbers = map(int, input_string.split())\n    primes = filter(is_prime, numbers)\n    print(\"Prime numbers:\", *primes)\n\nif __name__ == \"__main__\":\n    main()\n```"
  },
  {
    "task": "Write a script that reads a word and prints its Pig Latin translation.",
    "code": "```python\ndef pig_latin(word):\n    vowels = \"aeiou\"\n    if word[0] in vowels:\n        return word + \"way\"\n    else:\n        return word[1:] + word[0] + \"ay\"\n\nword = input(\"Enter a word: \")\nprint(pig_latin(word))\n```"
  },
  {
    "task": "Create a tool that reads a matrix of numbers and prints its transpose.",
    "code": "```python\ndef read_matrix():\n    rows = int(input(\"Enter the number of rows: \"))\n    cols = int(input(\"Enter the number of columns: \"))\n    matrix = []\n    for _ in range(rows):\n        row = list(map(int, input(\"Enter the numbers for the row separated by spaces: \").strip().split()))\n        matrix.append(row)\n    return matrix\n\ndef transpose_matrix(matrix):\n    return list(map(list, zip(*matrix)))\n\ndef print_matrix(matrix):\n    for row in matrix:\n        print(\" \".join(map(str, row)))\n\nif __name__ == \"__main__\":\n    matrix = read_matrix()\n    transposed = transpose_matrix(matrix)\n    print(\"The transpose of the matrix is:\")\n    print_matrix(transposed)\n```"
  },
  {
    "task": "Implement a program that reads a URL and prints the domain name.",
    "code": "```python\nimport sys\nfrom urllib.parse import urlparse\n\ndef get_domain_name(url):\n    parsed_url = urlparse(url)\n    return parsed_url.netloc\n\nif __name__ == \"__main__\":\n    url = input().strip()\n    domain_name = get_domain_name(url)\n    print(domain_name)\n```"
  },
  {
    "task": "Write a script that reads a number and prints its multiplication table up to 12.",
    "code": "```python\nnumber = int(input(\"Enter a number: \"))\nfor i in range(1, 13):\n    print(f\"{number} x {i} = {number * i}\")\n```"
  },
  {
    "task": "Develop a program that reads a list of dates and prints them in order of occurrence.",
    "code": "```python\nfrom datetime import datetime\n\ndef read_dates():\n    dates = []\n    while True:\n        try:\n            date_input = input(\"Enter a date (YYYY-MM-DD) or 'stop' to finish: \")\n            if date_input.lower() == 'stop':\n                break\n            date = datetime.strptime(date_input, '%Y-%m-%d')\n            dates.append(date)\n        except ValueError:\n            print(\"Invalid date format. Please try again.\")\n    return dates\n\ndef print_sorted_dates(dates):\n    for date in sorted(dates):\n        print(date.strftime('%Y-%m-%d'))\n\nif __name__ == \"__main__\":\n    dates = read_dates()\n    print_sorted_dates(dates)\n```"
  },
  {
    "task": "Create a tool that reads a text and prints it with each sentence capitalized.",
    "code": "```python\ndef capitalize_sentences(text):\n    import re\n    sentences = re.split(r'(?<=[.!?]) +', text)\n    capitalized = [s.capitalize() for s in sentences]\n    return ' '.join(capitalized)\n\nif __name__ == \"__main__\":\n    input_text = input(\"Enter text: \")\n    output_text = capitalize_sentences(input_text)\n    print(output_text)\n```"
  },
  {
    "task": "Design a program that reads a list of words and prints them in reverse alphabetical order.",
    "code": "```python\ndef main():\n    words = input(\"Enter a list of words separated by spaces: \").split()\n    words.sort(reverse=True)\n    for word in words:\n        print(word)\n\nif __name__ == \"__main__\":\n    main()\n```"
  },
  {
    "task": "Write a script that asks for two times and prints the difference in minutes.",
    "code": "```python\nfrom datetime import datetime\n\ntime_format = \"%H:%M\"\n\ntime1_str = input(\"Enter the first time (HH:MM): \")\ntime2_str = input(\"Enter the second time (HH:MM): \")\n\ntime1 = datetime.strptime(time1_str, time_format)\ntime2 = datetime.strptime(time2_str, time_format)\n\ndifference = time2 - time1\ndifference_in_minutes = abs(difference.total_seconds() / 60)\n\nprint(f\"The difference in minutes is: {int(difference_in_minutes)}\")\n```"
  },
  {
    "task": "Build a program that reads a text and prints the number of vowels and consonants.",
    "code": "```python\ndef count_vowels_and_consonants(text):\n    vowels = \"aeiouAEIOU\"\n    vowels_count = sum(1 for char in text if char in vowels)\n    consonants_count = sum(1 for char in text if char.isalpha() and char not in vowels)\n    return vowels_count, consonants_count\n\nif __name__ == \"__main__\":\n    text = input(\"Enter a text: \")\n    vowels, consonants = count_vowels_and_consonants(text)\n    print(f\"Number of vowels: {vowels}\")\n    print(f\"Number of consonants: {consonants}\")\n```"
  },
  {
    "task": "Implement a tool that reads a JSON object from input and prints its keys.",
    "code": "```python\nimport json\nimport sys\n\ndef main():\n    input_data = sys.stdin.read()\n    json_object = json.loads(input_data)\n    for key in json_object.keys():\n        print(key)\n\nif __name__ == \"__main__\":\n    main()\n```"
  },
  {
    "task": "Write a program that reads a CSV file from input and prints each row as a dictionary.",
    "code": "```python\nimport csv\nimport sys\n\ndef main():\n    input_data = sys.stdin.read()\n    csv_reader = csv.DictReader(input_data.splitlines())\n    for row in csv_reader:\n        print(row)\n\nif __name__ == '__main__':\n    main()\n```"
  },
  {
    "task": "Create a script that reads a sentence and prints it with the words in reverse order.",
    "code": "```python\nsentence = input(\"Enter a sentence: \")\nreversed_sentence = ' '.join(sentence.split()[::-1])\nprint(reversed_sentence)\n```"
  },
  {
    "task": "Develop a tool that reads a list of numbers and prints their median.",
    "code": "```python\nimport sys\n\ndef calculate_median(numbers):\n    numbers.sort()\n    n = len(numbers)\n    if n % 2 == 1:\n        return numbers[n // 2]\n    else:\n        mid1 = n // 2\n        mid2 = mid1 - 1\n        return (numbers[mid1] + numbers[mid2]) / 2\n\nif __name__ == \"__main__\":\n    input_numbers = list(map(float, sys.stdin.read().strip().split()))\n    median = calculate_median(input_numbers)\n    print(median)\n```"
  },
  {
    "task": "Design a program that reads a sequence of characters and prints the first non-repeated character.",
    "code": "```python\ndef first_non_repeated_character(s):\n    from collections import Counter\n    char_count = Counter(s)\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    return None\n\nif __name__ == \"__main__\":\n    s = input(\"Enter a sequence of characters: \")\n    result = first_non_repeated_character(s)\n    if result:\n        print(f\"The first non-repeated character is: {result}\")\n    else:\n        print(\"No non-repeated character found.\")\n```"
  },
  {
    "task": "Write a script that reads a list of tuples and prints them sorted by the second element.",
    "code": "```python\nimport sys\n\n# Read input from system stdin\ninput_data = sys.stdin.read()\n\n# Convert input data into a list of tuples\ntuples_list = eval(input_data.strip())\n\n# Sort the list of tuples by the second element\nsorted_tuples = sorted(tuples_list, key=lambda x: x[1])\n\n# Print the sorted list of tuples\nfor t in sorted_tuples:\n    print(t)\n```"
  },
  {
    "task": "Create a program that reads a list of cities and prints them grouped by their starting letter.",
    "code": "```python\ndef group_cities_by_initial(cities):\n    grouped = {}\n    for city in cities:\n        initial = city[0].upper()\n        if initial not in grouped:\n            grouped[initial] = []\n        grouped[initial].append(city)\n    for initial in sorted(grouped):\n        print(f\"{initial}: {', '.join(sorted(grouped[initial]))}\")\n\nif __name__ == \"__main__\":\n    try:\n        input_cities = input(\"Enter a list of cities separated by commas: \").split(',')\n        input_cities = [city.strip() for city in input_cities if city.strip()]\n        group_cities_by_initial(input_cities)\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n```"
  },
  {
    "task": "Build a tool that reads a text and prints the longest word.",
    "code": "```python\ndef find_longest_word(text):\n    words = text.split()\n    if not words:\n        return \"\"\n    longest_word = max(words, key=len)\n    return longest_word\n\ndef main():\n    text = input(\"Enter text: \")\n    longest_word = find_longest_word(text)\n    print(\"Longest word:\", longest_word)\n\nif __name__ == \"__main__\":\n    main()\n```"
  },
  {
    "task": "Implement a program that reads a string and prints the number of unique characters.",
    "code": "```python\ninput_string = input(\"Enter a string: \")\nunique_chars = set(input_string)\nprint(len(unique_chars))\n```"
  },
  {
    "task": "Write a script that reads two strings and prints the longest common substring.",
    "code": "```python\ndef longest_common_substring(s1, s2):\n    m, n = len(s1), len(s2)\n    max_len = 0\n    ending_index = m\n    length = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s1[i - 1] == s2[j - 1]:\n                length[i][j] = length[i - 1][j - 1] + 1\n                if length[i][j] > max_len:\n                    max_len = length[i][j]\n                    ending_index = i\n            else:\n                length[i][j] = 0\n\n    return s1[ending_index - max_len: ending_index]\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    if len(data) >= 2:\n        s1, s2 = data[0], data[1]\n        result = longest_common_substring(s1, s2)\n        print(result)\n```"
  },
  {
    "task": "Develop a program that reads a chessboard position and prints all possible moves for a knight.",
    "code": "```python\ndef is_valid_position(x, y):\n    return 0 <= x < 8 and 0 <= y < 8\n\ndef knight_moves(x, y):\n    moves = [\n        (x + 2, y + 1), (x + 2, y - 1), \n        (x - 2, y + 1), (x - 2, y - 1),\n        (x + 1, y + 2), (x + 1, y - 2), \n        (x - 1, y + 2), (x - 1, y - 2)\n    ]\n    return [(nx, ny) for nx, ny in moves if is_valid_position(nx, ny)]\n\ndef position_to_coordinates(pos):\n    column, row = pos[0], pos[1]\n    x = ord(column.lower()) - ord('a')\n    y = int(row) - 1\n    return x, y\n\ndef coordinates_to_position(x, y):\n    column = chr(x + ord('a'))\n    row = str(y + 1)\n    return column + row\n\ndef main():\n    position = input(\"Enter a knight's position (e.g., e4): \").strip()\n    x, y = position_to_coordinates(position)\n    moves = knight_moves(x, y)\n    move_positions = [coordinates_to_position(mx, my) for mx, my in moves]\n    print(\"Possible moves:\", \" \".join(move_positions))\n\nif __name__ == \"__main__\":\n    main()\n```"
  },
  {
    "task": "Create a tool that reads a list of numbers and prints the mode.",
    "code": "```python\nfrom collections import Counter\n\ndef find_mode(numbers):\n    if not numbers:\n        return None\n    counter = Counter(numbers)\n    max_count = max(counter.values())\n    mode = [num for num, count in counter.items() if count == max_count]\n    return mode[0] if len(mode) == 1 else mode\n\nif __name__ == \"__main__\":\n    numbers = list(map(int, input(\"Enter numbers separated by spaces: \").split()))\n    mode = find_mode(numbers)\n    print(f\"The mode is: {mode}\")\n```"
  },
  {
    "task": "Design a program that reads a list of file paths and prints the largest file.",
    "code": "```python\nimport os\n\ndef find_largest_file(file_paths):\n    largest_file = None\n    largest_size = -1\n\n    for path in file_paths:\n        if os.path.isfile(path):\n            file_size = os.path.getsize(path)\n            if file_size > largest_size:\n                largest_size = file_size\n                largest_file = path\n\n    return largest_file\n\nif __name__ == \"__main__\":\n    file_paths = input(\"Enter file paths separated by space: \").split()\n    largest_file = find_largest_file(file_paths)\n    if largest_file:\n        print(f\"The largest file is: {largest_file}\")\n    else:\n        print(\"No valid files found.\")\n```"
  },
  {
    "task": "Write a script that reads a list of prices and prints the total cost with tax.",
    "code": "```python\ndef calculate_total_cost_with_tax(prices, tax_rate=0.1):\n    total_cost = sum(prices)\n    total_cost_with_tax = total_cost * (1 + tax_rate)\n    return total_cost_with_tax\n\ndef main():\n    prices_input = input(\"Enter prices separated by spaces: \")\n    prices = list(map(float, prices_input.split()))\n    total_cost_with_tax = calculate_total_cost_with_tax(prices)\n    print(f\"Total cost with tax: {total_cost_with_tax:.2f}\")\n\nif __name__ == \"__main__\":\n    main()\n```"
  },
  {
    "task": "Build a program that reads a list of temperatures and prints them in Fahrenheit.",
    "code": "```python\ndef celsius_to_fahrenheit(celsius):\n    return (celsius * 9/5) + 32\n\ndef main():\n    temperatures = input(\"Enter a list of temperatures in Celsius (separated by spaces): \")\n    celsius_list = map(float, temperatures.split())\n    fahrenheit_list = map(celsius_to_fahrenheit, celsius_list)\n    \n    print(\"Temperatures in Fahrenheit:\")\n    for temp in fahrenheit_list:\n        print(temp)\n\nif __name__ == \"__main__\":\n    main()\n```"
  },
  {
    "task": "Implement a tool that reads a list of book titles and prints them sorted by length.",
    "code": "```python\ndef main():\n    import sys\n\n    # Read input from system stdin\n    book_titles = sys.stdin.read().strip().split('\\n')\n\n    # Sort book titles by length\n    sorted_titles = sorted(book_titles, key=len)\n\n    # Print each title on a new line\n    for title in sorted_titles:\n        print(title)\n\nif __name__ == \"__main__\":\n    main()\n```"
  },
  {
    "task": "Write a program that reads a directory path and prints all file names.",
    "code": "```python\nimport os\n\ndef list_files_in_directory(directory_path):\n    try:\n        with os.scandir(directory_path) as entries:\n            for entry in entries:\n                if entry.is_file():\n                    print(entry.name)\n    except FileNotFoundError:\n        print(\"Directory not found.\")\n\ndirectory_path = input(\"Enter the directory path: \")\nlist_files_in_directory(directory_path)\n```"
  },
  {
    "task": "Create a script that reads a list of URLs and prints those with a secure connection.",
    "code": "```python\ndef is_secure_url(url):\n    return url.startswith('https://')\n\ndef main():\n    urls = input(\"Enter URLs separated by spaces: \").split()\n    secure_urls = filter(is_secure_url, urls)\n    for url in secure_urls:\n        print(url)\n\nif __name__ == \"__main__\":\n    main()\n```"
  },
  {
    "task": "Develop a tool that reads a sequence of numbers and prints if it is strictly increasing.",
    "code": "```python\ndef is_strictly_increasing(sequence):\n    return all(x < y for x, y in zip(sequence, sequence[1:]))\n\ndef main():\n    numbers = list(map(int, input(\"Enter a sequence of numbers separated by spaces: \").split()))\n    if is_strictly_increasing(numbers):\n        print(\"The sequence is strictly increasing.\")\n    else:\n        print(\"The sequence is not strictly increasing.\")\n\nif __name__ == \"__main__\":\n    main()\n```"
  },
  {
    "task": "Design a program that reads a list of products and prints them grouped by category.",
    "code": "```python\ndef read_products():\n    products = []\n    print(\"Enter products and their categories (type 'done' to finish):\")\n    while True:\n        line = input()\n        if line.lower() == 'done':\n            break\n        product, category = line.split(',')\n        products.append((product.strip(), category.strip()))\n    return products\n\ndef group_products_by_category(products):\n    grouped = {}\n    for product, category in products:\n        if category not in grouped:\n            grouped[category] = []\n        grouped[category].append(product)\n    return grouped\n\ndef print_grouped_products(grouped_products):\n    for category, products in grouped_products.items():\n        print(f\"Category: {category}\")\n        for product in products:\n            print(f\"  - {product}\")\n\nproducts = read_products()\ngrouped_products = group_products_by_category(products)\nprint_grouped_products(grouped_products)\n```"
  },
  {
    "task": "Write a script that reads a sentence and prints it with alternating word capitalization.",
    "code": "```python\ndef alternate_word_capitalization(sentence):\n    words = sentence.split()\n    for i in range(len(words)):\n        if i % 2 == 0:\n            words[i] = words[i].upper()\n        else:\n            words[i] = words[i].lower()\n    return ' '.join(words)\n\nif __name__ == \"__main__\":\n    sentence = input(\"Enter a sentence: \")\n    result = alternate_word_capitalization(sentence)\n    print(result)\n```"
  },
  {
    "task": "Create a program that reads a list of grades and prints the highest and lowest grade.",
    "code": "```python\ngrades = list(map(int, input(\"Enter grades separated by spaces: \").split()))\nprint(\"Highest grade:\", max(grades))\nprint(\"Lowest grade:\", min(grades))\n```"
  },
  {
    "task": "Build a tool that reads a text and prints the number of sentences.",
    "code": "```python\nimport sys\nimport re\n\ndef count_sentences(text):\n    sentences = re.split(r'[.!?]+', text)\n    # Filter out any empty strings that result from split\n    return len(list(filter(None, sentences)))\n\nif __name__ == \"__main__\":\n    input_text = sys.stdin.read()\n    sentence_count = count_sentences(input_text)\n    print(sentence_count)\n```"
  },
  {
    "task": "Implement a program that reads a list of integers and prints the sum of all odd numbers.",
    "code": "```python\ndef main():\n    numbers = map(int, input(\"Enter a list of integers separated by spaces: \").split())\n    odd_sum = sum(num for num in numbers if num % 2 != 0)\n    print(\"Sum of odd numbers:\", odd_sum)\n\nif __name__ == \"__main__\":\n    main()\n```"
  },
  {
    "task": "Write a script that reads a text and prints the shortest sentence.",
    "code": "```python\ndef shortest_sentence(text):\n    import re\n    sentences = re.split(r'(?<=[.!?]) +', text)\n    return min(sentences, key=len)\n\nif __name__ == \"__main__\":\n    text = input(\"Enter the text: \")\n    print(shortest_sentence(text))\n```"
  },
  {
    "task": "Develop a program that reads a list of dictionaries and prints them sorted by a specific key.",
    "code": "```python\nimport json\n\ndef main():\n    input_data = input(\"Enter a list of dictionaries (in JSON format): \")\n    key_to_sort_by = input(\"Enter the key to sort by: \")\n    \n    try:\n        data = json.loads(input_data)\n        if isinstance(data, list) and all(isinstance(item, dict) for item in data):\n            sorted_data = sorted(data, key=lambda x: x.get(key_to_sort_by, ''))\n            for item in sorted_data:\n                print(item)\n        else:\n            print(\"Invalid input. Please provide a list of dictionaries.\")\n    except json.JSONDecodeError:\n        print(\"Invalid JSON format.\")\n\nif __name__ == \"__main__\":\n    main()\n```"
  },
  {
    "task": "Create a tool that reads a sequence of strings and prints the common prefix.",
    "code": "```python\nimport sys\n\ndef common_prefix(strings):\n    if not strings:\n        return \"\"\n    prefix = strings[0]\n    for string in strings[1:]:\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]\n            if not prefix:\n                return \"\"\n    return prefix\n\ndef main():\n    strings = sys.stdin.read().strip().split()\n    result = common_prefix(strings)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
  },
  {
    "task": "Design a program that reads a number and prints all of its divisors.",
    "code": "```python\ndef main():\n    number = int(input(\"Enter a number: \"))\n    print(\"Divisors:\")\n    for i in range(1, number + 1):\n        if number % i == 0:\n            print(i)\n\nif __name__ == \"__main__\":\n    main()\n```"
  },
  {
    "task": "Write a script that reads a text and prints each word with its length.",
    "code": "```python\ntext = input(\"Enter text: \")\nwords = text.split()\nfor word in words:\n    print(f\"{word}: {len(word)}\")\n```"
  },
  {
    "task": "Build a program that reads a list of colors and prints them in a rainbow order.",
    "code": "```python\ndef get_rainbow_order(colors):\n    rainbow_order = ['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet']\n    return [color for color in rainbow_order if color in colors]\n\ndef main():\n    colors = input(\"Enter a list of colors separated by commas: \").replace(\" \", \"\").split(',')\n    sorted_colors = get_rainbow_order(colors)\n    print(\"Colors in rainbow order:\")\n    for color in sorted_colors:\n        print(color)\n\nif __name__ == \"__main__\":\n    main()\n```"
  },
  {
    "task": "Implement a tool that reads a list of names and prints them with their initials.",
    "code": "```python\ndef get_initials(name):\n    parts = name.split()\n    initials = ''.join(part[0].upper() for part in parts)\n    return initials\n\ndef main():\n    names = []\n    print(\"Enter names (type 'done' to finish):\")\n    while True:\n        name = input()\n        if name.lower() == 'done':\n            break\n        names.append(name)\n\n    print(\"\\nNames with initials:\")\n    for name in names:\n        print(f\"{name}: {get_initials(name)}\")\n\nif __name__ == \"__main__\":\n    main()\n```"
  },
  {
    "task": "Write a program that reads a series of coordinates and prints the center point.",
    "code": "```python\ndef calculate_center_point(coords):\n    x_sum = sum(x for x, y in coords)\n    y_sum = sum(y for x, y in coords)\n    num_points = len(coords)\n    return (x_sum / num_points, y_sum / num_points)\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    coords = [(float(data[i]), float(data[i + 1])) for i in range(0, len(data), 2)]\n    center = calculate_center_point(coords)\n    print(f\"Center Point: ({center[0]}, {center[1]})\")\n\nif __name__ == \"__main__\":\n    main()\n```"
  },
  {
    "task": "Create a script that reads a sentence and prints it with each vowel replaced by its uppercase form.",
    "code": "```python\ndef replace_vowels_with_uppercase(sentence):\n    vowels = 'aeiou'\n    return ''.join(char.upper() if char in vowels else char for char in sentence)\n\nif __name__ == \"__main__\":\n    sentence = input(\"Enter a sentence: \")\n    print(replace_vowels_with_uppercase(sentence))\n```"
  },
  {
    "task": "Develop a tool that reads a mathematical expression and evaluates its result.",
    "code": "```python\nexpression = input(\"Enter a mathematical expression: \")\ntry:\n    result = eval(expression)\n    print(\"Result:\", result)\nexcept Exception as e:\n    print(\"Error:\", e)\n```"
  },
  {
    "task": "Design a program that reads a text and prints the first three words.",
    "code": "```python\ntext = input(\"Enter text: \")\nwords = text.split()\nprint(' '.join(words[:3]))\n```"
  },
  {
    "task": "Write a script that reads a list of numbers and prints them without duplicates.",
    "code": "```python\ndef main():\n    numbers = input(\"Enter numbers separated by spaces: \").split()\n    unique_numbers = sorted(set(numbers), key=numbers.index)\n    print(\" \".join(unique_numbers))\n\nif __name__ == \"__main__\":\n    main()\n```"
  },
  {
    "task": "Create a program that reads a string and prints it with spaces between each character.",
    "code": "```python\ninput_string = input(\"Enter a string: \")\noutput_string = ' '.join(input_string)\nprint(output_string)\n```"
  },
  {
    "task": "Build a tool that reads a list of events with dates and prints them by chronological order.",
    "code": "```python\nimport sys\nfrom datetime import datetime\n\ndef read_events():\n    events = []\n    for line in sys.stdin:\n        date_str, event = line.strip().split(maxsplit=1)\n        date = datetime.strptime(date_str, '%Y-%m-%d')\n        events.append((date, event))\n    return events\n\ndef print_events_chronologically(events):\n    for date, event in sorted(events):\n        print(f\"{date.strftime('%Y-%m-%d')} {event}\")\n\nif __name__ == \"__main__\":\n    events = read_events()\n    print_events_chronologically(events)\n```"
  },
  {
    "task": "Implement a program that reads a list of fractions and prints their sum as a reduced fraction.",
    "code": "```python\nfrom fractions import Fraction\n\ndef main():\n    fractions = input(\"Enter fractions separated by spaces: \").split()\n    sum_fraction = sum(Fraction(f) for f in fractions)\n    print(f\"Reduced sum: {sum_fraction}\")\n\nif __name__ == \"__main__\":\n    main()\n```"
  },
  {
    "task": "Write a script that reads a text and prints it with each consonant doubled.",
    "code": "```python\ndef double_consonants(text):\n    vowels = \"aeiouAEIOU\"\n    doubled_text = \"\"\n    for char in text:\n        if char.isalpha() and char not in vowels:\n            doubled_text += char * 2\n        else:\n            doubled_text += char\n    return doubled_text\n\nif __name__ == \"__main__\":\n    input_text = input(\"Enter text: \")\n    print(double_consonants(input_text))\n```"
  },
  {
    "task": "Develop a program that reads a number and prints its representation in Roman numerals.",
    "code": "```python\ndef int_to_roman(num):\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n    ]\n    syms = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n    ]\n    roman_num = ''\n    i = 0\n    while num > 0:\n        for _ in range(num // val[i]):\n            roman_num += syms[i]\n            num -= val[i]\n        i += 1\n    return roman_num\n\nif __name__ == \"__main__\":\n    try:\n        num = int(input(\"Enter a number: \"))\n        if num > 0:\n            print(\"Roman numeral:\", int_to_roman(num))\n        else:\n            print(\"Please enter a positive integer.\")\n    except ValueError:\n        print(\"Invalid input. Please enter an integer.\")\n```"
  },
  {
    "task": "Create a tool that reads a list of words and prints them with each letter in reverse order.",
    "code": "```python\ndef reverse_letters_in_words():\n    try:\n        words = input(\"Enter a list of words separated by spaces: \").split()\n        reversed_words = [''.join(reversed(word)) for word in words]\n        for word in reversed_words:\n            print(word)\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n\nreverse_letters_in_words()\n```"
  },
  {
    "task": "Design a program that reads a set of points and prints the one closest to the origin.",
    "code": "```python\nimport sys\nimport math\n\ndef distance_from_origin(point):\n    return math.sqrt(point[0] ** 2 + point[1] ** 2)\n\ndef main():\n    n = int(input(\"Enter the number of points: \"))\n    points = []\n\n    for _ in range(n):\n        x, y = map(float, input(\"Enter the x and y coordinates: \").split())\n        points.append((x, y))\n\n    closest_point = min(points, key=distance_from_origin)\n    print(\"The point closest to the origin is:\", closest_point)\n\nif __name__ == \"__main__\":\n    main()\n```"
  },
  {
    "task": "Write a script that reads a text and prints the frequency of each word.",
    "code": "```python\nfrom collections import Counter\nimport sys\n\ndef main():\n    text = sys.stdin.read()\n    words = text.split()\n    word_count = Counter(words)\n    \n    for word, count in word_count.items():\n        print(f\"{word}: {count}\")\n\nif __name__ == \"__main__\":\n    main()\n```"
  },
  {
    "task": "Build a program that reads a list of integers and prints the second smallest.",
    "code": "```python\ndef second_smallest(numbers):\n    unique_numbers = list(set(numbers))\n    unique_numbers.sort()\n    return unique_numbers[1] if len(unique_numbers) > 1 else None\n\nif __name__ == \"__main__\":\n    try:\n        numbers = list(map(int, input(\"Enter a list of integers separated by spaces: \").split()))\n        result = second_smallest(numbers)\n        if result is not None:\n            print(\"The second smallest number is:\", result)\n        else:\n            print(\"Not enough unique numbers to determine the second smallest.\")\n    except ValueError:\n        print(\"Please enter valid integers.\")\n```"
  },
  {
    "task": "Implement a tool that reads a string and prints all its substrings.",
    "code": "```python\ndef print_substrings(s):\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            print(s[i:j])\n\nif __name__ == \"__main__\":\n    input_string = input(\"Enter a string: \")\n    print_substrings(input_string)\n```"
  },
  {
    "task": "Write a program that reads a number and generates a random number up to that number.",
    "code": "```python\nimport random\n\nnumber = int(input(\"Enter a number: \"))\nrandom_number = random.randint(0, number)\nprint(\"Random number:\", random_number)\n```"
  },
  {
    "task": "Create a script that reads a sentence and prints it with each word reversed.",
    "code": "```python\ndef reverse_words_in_sentence():\n    sentence = input(\"Enter a sentence: \")\n    reversed_sentence = ' '.join(word[::-1] for word in sentence.split())\n    print(reversed_sentence)\n\nreverse_words_in_sentence()\n```"
  },
  {
    "task": "Develop a tool that reads a text and prints it with each sentence on a new line.",
    "code": "```python\ndef process_text(text):\n    import re\n    sentences = re.split(r'(?<=[.!?]) +', text)\n    for sentence in sentences:\n        print(sentence)\n\nif __name__ == \"__main__\":\n    import sys\n    text = sys.stdin.read()\n    process_text(text)\n```"
  },
  {
    "task": "Design a program that reads a list of numbers and prints the product of all negative numbers.",
    "code": "```python\ndef main():\n    numbers = list(map(int, input(\"Enter numbers separated by spaces: \").split()))\n    product = 1\n    has_negative = False\n    \n    for num in numbers:\n        if num < 0:\n            product *= num\n            has_negative = True\n    \n    if has_negative:\n        print(\"Product of negative numbers:\", product)\n    else:\n        print(\"No negative numbers found.\")\n\nif __name__ == \"__main__\":\n    main()\n```"
  },
  {
    "task": "Write a script that reads a dictionary and prints the keys and values in sorted order.",
    "code": "```python\nimport sys\nimport json\n\ndef main():\n    input_data = sys.stdin.read()\n    data_dict = json.loads(input_data)\n    for key in sorted(data_dict.keys()):\n        print(f\"{key}: {data_dict[key]}\")\n\nif __name__ == \"__main__\":\n    main()\n```"
  },
  {
    "task": "Create a program that reads a text and prints the number of unique words.",
    "code": "```python\ndef count_unique_words():\n    text = input(\"Enter text: \")\n    words = text.split()\n    unique_words = set(words)\n    print(len(unique_words))\n\ncount_unique_words()\n```"
  }
]