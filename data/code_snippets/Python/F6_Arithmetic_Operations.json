[
  {
    "task": "Write a function that takes two numbers and returns their sum.",
    "code": "```python\ndef add_numbers(a, b):\n    return a + b\n```"
  },
  {
    "task": "Create a program that calculates the difference between two given integers.",
    "code": "```python\ndef calculate_difference(a, b):\n    return a - b\n\n# Example usage\nnum1 = 10\nnum2 = 5\ndifference = calculate_difference(num1, num2)\nprint(\"The difference is:\", difference)\n```"
  },
  {
    "task": "Design a function to multiply two floating-point numbers and return the result.",
    "code": "```python\ndef multiply_floats(a: float, b: float) -> float:\n    return a * b\n```"
  },
  {
    "task": "Implement a function that divides two numbers and handles division by zero exceptions.",
    "code": "```python\ndef divide_numbers(numerator, denominator):\n    try:\n        result = numerator / denominator\n    except ZeroDivisionError:\n        return \"Error: Division by zero is not allowed.\"\n    return result\n```"
  },
  {
    "task": "Build a calculator that can perform addition, subtraction, multiplication, and division on user-provided inputs.",
    "code": "```python\ndef calculator():\n    print(\"Select operation:\")\n    print(\"1. Add\")\n    print(\"2. Subtract\")\n    print(\"3. Multiply\")\n    print(\"4. Divide\")\n\n    choice = input(\"Enter choice(1/2/3/4): \")\n\n    num1 = float(input(\"Enter first number: \"))\n    num2 = float(input(\"Enter second number: \"))\n\n    if choice == '1':\n        print(f\"The result is: {num1 + num2}\")\n    elif choice == '2':\n        print(f\"The result is: {num1 - num2}\")\n    elif choice == '3':\n        print(f\"The result is: {num1 * num2}\")\n    elif choice == '4':\n        if num2 != 0:\n            print(f\"The result is: {num1 / num2}\")\n        else:\n            print(\"Error: Division by zero is not allowed.\")\n    else:\n        print(\"Invalid choice\")\n\ncalculator()\n```"
  },
  {
    "task": "Write a script to compute the average of a list of numbers using arithmetic operations.",
    "code": "```python\ndef compute_average(numbers):\n    if not numbers:\n        return 0\n    total_sum = sum(numbers)\n    count = len(numbers)\n    average = total_sum / count\n    return average\n\nnumbers_list = [10, 20, 30, 40, 50]\naverage_result = compute_average(numbers_list)\nprint(average_result)\n```"
  },
  {
    "task": "Create a function that returns the remainder of the division of two integers.",
    "code": "```python\ndef remainder_of_division(a, b):\n    return a % b\n```"
  },
  {
    "task": "Develop a function that can add a variable number of arguments and return the total.",
    "code": "```python\ndef add_numbers(*args):\n    return sum(args)\n```"
  },
  {
    "task": "Write a program that subtracts a series of numbers from an initial value.",
    "code": "```python\ndef subtract_series(initial_value, numbers):\n    result = initial_value\n    for number in numbers:\n        result -= number\n    return result\n\n# Example usage\ninitial_value = 100\nnumbers_to_subtract = [10, 20, 5, 15]\nresult = subtract_series(initial_value, numbers_to_subtract)\nprint(result)\n```"
  },
  {
    "task": "Implement a function that multiplies all elements in an array and returns the product.",
    "code": "```python\ndef multiply_elements(array):\n    product = 1\n    for element in array:\n        product *= element\n    return product\n```"
  },
  {
    "task": "Design a program that divides a number by another and rounds the result to two decimal places.",
    "code": "```python\ndef divide_and_round(num1, num2):\n    if num2 == 0:\n        raise ValueError(\"Cannot divide by zero\")\n    result = num1 / num2\n    return round(result, 2)\n\n# Example usage:\n# result = divide_and_round(10, 3)\n# print(result)  # Output: 3.33\n```"
  },
  {
    "task": "Create a function that performs arithmetic operations on complex numbers.",
    "code": "```python\ndef complex_arithmetic_operations(c1, c2):\n    addition = c1 + c2\n    subtraction = c1 - c2\n    multiplication = c1 * c2\n    division = c1 / c2 if c2 != 0 else None\n    return addition, subtraction, multiplication, division\n```"
  },
  {
    "task": "Write a function to calculate the area of a rectangle given its length and width using multiplication.",
    "code": "```python\ndef calculate_rectangle_area(length, width):\n    return length * width\n```"
  },
  {
    "task": "Build a program that converts a price in dollars to another currency using multiplication with exchange rates.",
    "code": "```python\ndef convert_currency(dollars, exchange_rate):\n    return dollars * exchange_rate\n\n# Example usage\ndollars = 100\nexchange_rate = 0.85  # Example exchange rate for dollars to euros\nconverted_amount = convert_currency(dollars, exchange_rate)\nprint(f\"Converted amount: {converted_amount}\")\n```"
  },
  {
    "task": "Implement a function that checks if a number is divisible by another and returns a boolean.",
    "code": "```python\ndef is_divisible(a, b):\n    return a % b == 0\n```"
  },
  {
    "task": "Write a script to sum the digits of an integer using arithmetic operations.",
    "code": "```python\ndef sum_of_digits(n):\n    n = abs(n)\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total\n\n# Example usage\nnumber = 12345\nresult = sum_of_digits(number)\nprint(result)\n```"
  },
  {
    "task": "Develop a function that applies a discount percentage to a price using subtraction and multiplication.",
    "code": "```python\ndef apply_discount(price, discount_percentage):\n    discount_amount = price * (discount_percentage / 100)\n    discounted_price = price - discount_amount\n    return discounted_price\n```"
  },
  {
    "task": "Create a program to calculate the yearly salary given an hourly wage and hours worked per week.",
    "code": "```python\ndef calculate_yearly_salary(hourly_wage, hours_per_week):\n    weeks_per_year = 52\n    yearly_salary = hourly_wage * hours_per_week * weeks_per_year\n    return yearly_salary\n\n# Example usage\nhourly_wage = 25.0  # Example hourly wage\nhours_per_week = 40  # Example hours worked per week\nyearly_salary = calculate_yearly_salary(hourly_wage, hours_per_week)\nprint(\"Yearly Salary:\", yearly_salary)\n```"
  },
  {
    "task": "Design a function that calculates the compound interest over a given period using arithmetic operations.",
    "code": "```python\ndef calculate_compound_interest(principal, rate, times_compounded, years):\n    amount = principal * (1 + rate / times_compounded) ** (times_compounded * years)\n    return amount - principal\n\n# Example usage:\n# principal = 1000, rate = 5% (0.05), times_compounded = 4, years = 5\n# compound_interest = calculate_compound_interest(1000, 0.05, 4, 5)\n```"
  },
  {
    "task": "Write a program that scales a 2D point by a given factor using multiplication.",
    "code": "```python\ndef scale_point(point, factor):\n    x, y = point\n    scaled_x = x * factor\n    scaled_y = y * factor\n    return (scaled_x, scaled_y)\n\n# Example usage:\npoint = (3, 4)\nfactor = 2\nscaled_point = scale_point(point, factor)\nprint(scaled_point)\n```"
  },
  {
    "task": "Implement a function that calculates the perimeter of a triangle given its side lengths.",
    "code": "```python\ndef calculate_triangle_perimeter(side1, side2, side3):\n    return side1 + side2 + side3\n```"
  },
  {
    "task": "Create a function to determine if three sides can form a right triangle using the Pythagorean theorem.",
    "code": "```python\ndef is_right_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n```"
  },
  {
    "task": "Write a script that calculates the total cost of items in a shopping cart using addition.",
    "code": "```python\nshopping_cart = [12.99, 23.45, 8.99, 14.50, 9.99]\ntotal_cost = sum(shopping_cart)\nprint(f\"Total cost: ${total_cost:.2f}\")\n```"
  },
  {
    "task": "Develop a function that returns the quotient and remainder of a division operation.",
    "code": "```python\ndef divide_and_remainder(dividend, divisor):\n    quotient = dividend // divisor\n    remainder = dividend % divisor\n    return quotient, remainder\n```"
  },
  {
    "task": "Build a program that simulates a basic checkout system using arithmetic operations for totals and discounts.",
    "code": "```python\ndef calculate_total(prices, discount_rate=0.0):\n    subtotal = sum(prices)\n    discount = subtotal * discount_rate\n    total = subtotal - discount\n    return total\n\ndef main():\n    prices = [19.99, 5.49, 3.25, 14.99]\n    discount_rate = 0.10  # 10% discount\n    total = calculate_total(prices, discount_rate)\n    print(f\"Subtotal: ${sum(prices):.2f}\")\n    print(f\"Discount: ${sum(prices) * discount_rate:.2f}\")\n    print(f\"Total: ${total:.2f}\")\n\nif __name__ == \"__main__\":\n    main()\n```"
  },
  {
    "task": "Implement a function to calculate the distance between two points on a plane using subtraction and square roots.",
    "code": "```python\nimport math\n\ndef calculate_distance(x1, y1, x2, y2):\n    return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)\n```"
  },
  {
    "task": "Write a function that calculates the speed of a vehicle given distance and time using division.",
    "code": "```python\ndef calculate_speed(distance, time):\n    return distance / time\n```"
  },
  {
    "task": "Create a program to compute the total minutes in a given number of hours using multiplication.",
    "code": "```python\ndef total_minutes(hours):\n    return hours * 60\n\n# Example usage\nhours = 5\nprint(total_minutes(hours))\n```"
  },
  {
    "task": "Design a function that determines the number of dozens of eggs from a given total number of eggs.",
    "code": "```python\ndef calculate_dozens(total_eggs):\n    return total_eggs // 12\n```"
  },
  {
    "task": "Write a script to find the greatest common divisor of two numbers using arithmetic operations.",
    "code": "```python\ndef gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n# Example usage\nnum1 = 48\nnum2 = 18\nresult = gcd(num1, num2)\nprint(\"The GCD of\", num1, \"and\", num2, \"is\", result)\n```"
  },
  {
    "task": "Develop a program that calculates the total weight of multiple items using addition.",
    "code": "```python\ndef calculate_total_weight(weights):\n    return sum(weights)\n\nitems_weights = [2.5, 4.0, 1.75, 3.25]\ntotal_weight = calculate_total_weight(items_weights)\nprint(\"Total weight:\", total_weight)\n```"
  },
  {
    "task": "Implement a function to convert a temperature from Celsius to Fahrenheit using multiplication and addition.",
    "code": "```python\ndef celsius_to_fahrenheit(celsius):\n    return celsius * 9 / 5 + 32\n```"
  },
  {
    "task": "Create a program that determines the age difference between two people given their birth years.",
    "code": "```python\ndef age_difference(birth_year1, birth_year2):\n    return abs(birth_year1 - birth_year2)\n\n# Example usage\nbirth_year_person1 = 1990\nbirth_year_person2 = 1985\ndifference = age_difference(birth_year_person1, birth_year_person2)\nprint(f\"The age difference is {difference} years.\")\n```"
  },
  {
    "task": "Write a function to calculate the final price after applying tax and discount using addition and subtraction.",
    "code": "```python\ndef calculate_final_price(initial_price, tax_rate, discount):\n    tax_amount = initial_price * tax_rate\n    price_after_tax = initial_price + tax_amount\n    final_price = price_after_tax - discount\n    return final_price\n```"
  },
  {
    "task": "Design a program to compute the net profit given total revenue and expenses.",
    "code": "```python\ndef compute_net_profit(revenue, expenses):\n    return revenue - expenses\n\n# Example usage\ntotal_revenue = 1000\ntotal_expenses = 300\nnet_profit = compute_net_profit(total_revenue, total_expenses)\nprint(\"Net Profit:\", net_profit)\n```"
  },
  {
    "task": "Develop a function to calculate the BMI given weight and height using division and multiplication.",
    "code": "```python\ndef calculate_bmi(weight, height):\n    return weight / (height * height)\n```"
  },
  {
    "task": "Create a function that calculates the midpoint between two numbers using addition and division.",
    "code": "```python\ndef calculate_midpoint(num1, num2):\n    return (num1 + num2) / 2\n```"
  },
  {
    "task": "Write a program that outputs the result of dividing a number by another with remainder.",
    "code": "```python\ndef divide_with_remainder(dividend, divisor):\n    quotient = dividend // divisor\n    remainder = dividend % divisor\n    return quotient, remainder\n\n# Example usage\ndividend = 10\ndivisor = 3\nquotient, remainder = divide_with_remainder(dividend, divisor)\nprint(f\"Quotient: {quotient}, Remainder: {remainder}\")\n```"
  },
  {
    "task": "Implement a function to calculate the factorial of a number using multiplication.",
    "code": "```python\ndef factorial(n):\n    result = 1\n    for i in range(2, n + 1):\n        result *= i\n    return result\n```"
  },
  {
    "task": "Build a script to find the average of three numbers using addition and division.",
    "code": "```python\ndef average_of_three_numbers(a, b, c):\n    return (a + b + c) / 3\n\n# Example usage\nnum1 = 10\nnum2 = 20\nnum3 = 30\naverage = average_of_three_numbers(num1, num2, num3)\nprint(\"The average is:\", average)\n```"
  },
  {
    "task": "Create a program that simulates a simple bank account using arithmetic operations for deposits and withdrawals.",
    "code": "```python\nclass BankAccount:\n    def __init__(self, initial_balance=0):\n        self.balance = initial_balance\n\n    def deposit(self, amount):\n        if amount > 0:\n            self.balance += amount\n            return True\n        return False\n\n    def withdraw(self, amount):\n        if 0 < amount <= self.balance:\n            self.balance -= amount\n            return True\n        return False\n\n    def get_balance(self):\n        return self.balance\n\n# Example usage:\naccount = BankAccount(100)\naccount.deposit(50)\naccount.withdraw(30)\nprint(account.get_balance())\n```"
  },
  {
    "task": "Write a function that computes the cost per item given a total cost and quantity using division.",
    "code": "```python\ndef cost_per_item(total_cost, quantity):\n    return total_cost / quantity\n```"
  },
  {
    "task": "Design a program that calculates the time required to travel a distance at a given speed.",
    "code": "```python\ndef calculate_travel_time(distance, speed):\n    if speed <= 0:\n        return \"Speed must be greater than zero.\"\n    return distance / speed\n\n# Example usage:\ndistance = 100  # in kilometers\nspeed = 50      # in km/h\ntime_required = calculate_travel_time(distance, speed)\nprint(\"Time required to travel\", distance, \"km at\", speed, \"km/h is\", time_required, \"hours.\")\n```"
  },
  {
    "task": "Develop a function that returns the absolute difference between two numbers.",
    "code": "```python\ndef absolute_difference(num1, num2):\n    return abs(num1 - num2)\n```"
  },
  {
    "task": "Implement a program to compute the geometric mean of a set of numbers using multiplication and roots.",
    "code": "```python\nimport math\n\ndef geometric_mean(numbers):\n    product = 1\n    for number in numbers:\n        product *= number\n    return math.pow(product, 1/len(numbers))\n\nnumbers = [2, 4, 8, 16]\nresult = geometric_mean(numbers)\nprint(result)\n```"
  },
  {
    "task": "Write a function to calculate the total interest paid on a loan using arithmetic operations.",
    "code": "```python\ndef calculate_total_interest(loan_amount, annual_interest_rate, years):\n    total_payment = loan_amount * (1 + annual_interest_rate * years)\n    total_interest_paid = total_payment - loan_amount\n    return total_interest_paid\n```"
  },
  {
    "task": "Create a program that calculates the sum of even numbers within a specified range.",
    "code": "```python\ndef sum_of_even_numbers(start, end):\n    return sum(number for number in range(start, end + 1) if number % 2 == 0)\n\n# Example usage\nstart_range = 1\nend_range = 10\nresult = sum_of_even_numbers(start_range, end_range)\nprint(result)\n```"
  },
  {
    "task": "Design a script to determine the final balance in a savings account after regular deposits and withdrawals.",
    "code": "```python\ndef calculate_final_balance(initial_balance, transactions):\n    balance = initial_balance\n    for transaction in transactions:\n        balance += transaction\n    return balance\n\n# Example usage\ninitial_balance = 1000  # Initial amount in the savings account\ntransactions = [100, -50, 200, -30]  # List of deposits (positive) and withdrawals (negative)\nfinal_balance = calculate_final_balance(initial_balance, transactions)\nprint(\"Final Balance:\", final_balance)\n```"
  },
  {
    "task": "Develop a function to compute the surface area of a cylinder given its radius and height.",
    "code": "```python\nimport math\n\ndef surface_area_of_cylinder(radius, height):\n    return 2 * math.pi * radius * (radius + height)\n```"
  },
  {
    "task": "Write a program that outputs the result of an arithmetic sequence given the first term and common difference.",
    "code": "```python\ndef arithmetic_sequence(n, first_term, common_difference):\n    return [first_term + i * common_difference for i in range(n)]\n\nn = 10\nfirst_term = 5\ncommon_difference = 3\nresult = arithmetic_sequence(n, first_term, common_difference)\nprint(result)\n```"
  },
  {
    "task": "Implement a function that finds the average speed for a trip given total distance and time.",
    "code": "```python\ndef average_speed(total_distance, total_time):\n    return total_distance / total_time\n```"
  },
  {
    "task": "Create a function to calculate the total cost of a road trip given fuel cost per mile and distance.",
    "code": "```python\ndef calculate_road_trip_cost(fuel_cost_per_mile, distance):\n    total_cost = fuel_cost_per_mile * distance\n    return total_cost\n```"
  },
  {
    "task": "Write a script that determines the number of tiles required to cover a floor area using arithmetic operations.",
    "code": "```python\ndef calculate_tiles(floor_length, floor_width, tile_length, tile_width):\n    floor_area = floor_length * floor_width\n    tile_area = tile_length * tile_width\n    tiles_required = floor_area / tile_area\n    return int(tiles_required) + (1 if tiles_required % 1 != 0 else 0)\n\nfloor_length = 10\nfloor_width = 8\ntile_length = 2\ntile_width = 2\n\ntiles_needed = calculate_tiles(floor_length, floor_width, tile_length, tile_width)\nprint(f\"Tiles required: {tiles_needed}\")\n```"
  },
  {
    "task": "Develop a program to calculate the amount of paint needed to cover a wall given its area.",
    "code": "```python\ndef calculate_paint_needed(area, coverage_per_liter):\n    return area / coverage_per_liter\n\nwall_area = float(input(\"Enter the area of the wall in square meters: \"))\ncoverage_per_liter = float(input(\"Enter the paint coverage per liter in square meters: \"))\n\npaint_needed = calculate_paint_needed(wall_area, coverage_per_liter)\nprint(f\"Amount of paint needed: {paint_needed:.2f} liters\")\n```"
  },
  {
    "task": "Build a function that calculates the price per unit weight given total price and weight.",
    "code": "```python\ndef price_per_unit_weight(total_price, weight):\n    return total_price / weight\n```"
  },
  {
    "task": "Implement a program that computes the volume of a rectangular prism given its dimensions.",
    "code": "```python\ndef volume_of_prism(length, width, height):\n    return length * width * height\n\n# Example usage:\nlength = 5\nwidth = 3\nheight = 2\nvolume = volume_of_prism(length, width, height)\nprint(volume)\n```"
  },
  {
    "task": "Write a function to find the percentage increase or decrease between two numbers.",
    "code": "```python\ndef percentage_change(original, new):\n    if original == 0:\n        raise ValueError(\"Original value cannot be zero for percentage change calculation.\")\n    change = new - original\n    percentage = (change / original) * 100\n    return percentage\n```"
  },
  {
    "task": "Create a program to determine the number of complete weeks within a specified number of days.",
    "code": "```python\ndef complete_weeks(days):\n    return days // 7\n\n# Example usage\ndays = 45\nweeks = complete_weeks(days)\nprint(weeks)\n```"
  },
  {
    "task": "Design a function that calculates the break-even point for a business using cost and revenue data.",
    "code": "```python\ndef calculate_break_even_point(fixed_costs, variable_costs_per_unit, revenue_per_unit):\n    if revenue_per_unit <= variable_costs_per_unit:\n        return None  # No break-even point\n    break_even_units = fixed_costs / (revenue_per_unit - variable_costs_per_unit)\n    return break_even_units\n\n# Example usage:\nfixed_costs = 10000\nvariable_costs_per_unit = 50\nrevenue_per_unit = 100\n\nbreak_even_point = calculate_break_even_point(fixed_costs, variable_costs_per_unit, revenue_per_unit)\nprint(break_even_point)\n```"
  },
  {
    "task": "Develop a program that converts a total number of seconds into hours, minutes, and seconds.",
    "code": "```python\ndef convert_seconds(total_seconds):\n    hours = total_seconds // 3600\n    remaining_seconds = total_seconds % 3600\n    minutes = remaining_seconds // 60\n    seconds = remaining_seconds % 60\n    return hours, minutes, seconds\n\n# Example usage\ntotal_seconds = 3665\nhours, minutes, seconds = convert_seconds(total_seconds)\nprint(f\"{total_seconds} seconds is equal to {hours} hours, {minutes} minutes, and {seconds} seconds.\")\n```"
  },
  {
    "task": "Write a function that calculates the depreciation of an asset over time using arithmetic operations.",
    "code": "```python\ndef calculate_depreciation(initial_value, depreciation_rate, time_periods):\n    return initial_value * ((1 - depreciation_rate) ** time_periods)\n```"
  },
  {
    "task": "Create a program that computes the final exam grade needed to achieve a target course average.",
    "code": "```python\ndef calculate_needed_exam_grade(current_average, target_average, exam_weight):\n    current_weight = 1 - exam_weight\n    needed_exam_grade = (target_average - current_average * current_weight) / exam_weight\n    return needed_exam_grade\n\n# Example usage\ncurrent_average = 85  # Current average grade\ntarget_average = 90   # Desired final average\nexam_weight = 0.4     # Weight of the final exam in the course grade\n\nneeded_grade = calculate_needed_exam_grade(current_average, target_average, exam_weight)\nprint(f\"Needed exam grade: {needed_grade}\")\n```"
  },
  {
    "task": "Implement a function to calculate the total cost of groceries given prices and quantities of items.",
    "code": "```python\ndef calculate_total_cost(prices, quantities):\n    total_cost = sum(price * quantities[i] for i, price in enumerate(prices))\n    return total_cost\n\n# Example usage:\nprices = [2.50, 4.00, 3.75]\nquantities = [2, 1, 4]\nprint(calculate_total_cost(prices, quantities))\n```"
  },
  {
    "task": "Write a script that determines the number of years required to double an investment using a fixed interest rate.",
    "code": "```python\ndef years_to_double_investment(principal, interest_rate):\n    years = 0\n    target = principal * 2\n    while principal < target:\n        principal += principal * interest_rate\n        years += 1\n    return years\n\n# Example usage:\nprincipal_amount = 1000  # initial investment\nannual_interest_rate = 0.05  # 5% interest rate\nprint(years_to_double_investment(principal_amount, annual_interest_rate))\n```"
  },
  {
    "task": "Develop a function that computes the harmonic mean of a set of numbers using division and addition.",
    "code": "```python\ndef harmonic_mean(numbers):\n    if not numbers:\n        return 0\n    n = len(numbers)\n    reciprocal_sum = sum(1 / x for x in numbers)\n    return n / reciprocal_sum\n```"
  },
  {
    "task": "Create a program to find the sum of the squares of numbers in a given range.",
    "code": "```python\ndef sum_of_squares(start, end):\n    return sum(i**2 for i in range(start, end + 1))\n\n# Example usage:\nstart = 1\nend = 5\nresult = sum_of_squares(start, end)\nprint(result)\n```"
  },
  {
    "task": "Design a function that calculates the energy consumption of an appliance given power and usage time.",
    "code": "```python\ndef calculate_energy_consumption(power, time):\n    return power * time\n```"
  },
  {
    "task": "Write a program that simulates a simple stock portfolio using arithmetic operations for buying and selling.",
    "code": "```python\nclass StockPortfolio:\n    def __init__(self):\n        self.stocks = {}\n\n    def buy(self, symbol, price, quantity):\n        if symbol in self.stocks:\n            current_quantity, total_spent = self.stocks[symbol]\n            new_quantity = current_quantity + quantity\n            new_total_spent = total_spent + (price * quantity)\n            self.stocks[symbol] = (new_quantity, new_total_spent)\n        else:\n            self.stocks[symbol] = (quantity, price * quantity)\n\n    def sell(self, symbol, price, quantity):\n        if symbol in self.stocks:\n            current_quantity, total_spent = self.stocks[symbol]\n            if quantity > current_quantity:\n                raise ValueError(\"Not enough stock to sell\")\n            new_quantity = current_quantity - quantity\n            new_total_spent = total_spent - (price * quantity)\n            if new_quantity == 0:\n                del self.stocks[symbol]\n            else:\n                self.stocks[symbol] = (new_quantity, new_total_spent)\n\n    def portfolio_value(self):\n        return sum(quantity * (total_spent / quantity) for quantity, total_spent in self.stocks.values())\n\nportfolio = StockPortfolio()\nportfolio.buy('AAPL', 150, 10)\nportfolio.buy('GOOGL', 2800, 5)\nportfolio.sell('AAPL', 155, 5)\nvalue = portfolio.portfolio_value()\nprint(f\"Total portfolio value: {value}\")\n```"
  },
  {
    "task": "Implement a function to calculate the gravitational force between two masses using multiplication and division.",
    "code": "```python\ndef gravitational_force(m1, m2, r):\n    G = 6.67430e-11  # gravitational constant in m^3 kg^-1 s^-2\n    return G * (m1 * m2) / (r * r)\n```"
  },
  {
    "task": "Create a function that determines the price per square foot of a piece of real estate.",
    "code": "```python\ndef price_per_square_foot(price, area):\n    return price / area\n\n# Example usage\nprice = 250000  # Example total price in dollars\narea = 2000     # Example area in square feet\nresult = price_per_square_foot(price, area)\nprint(f\"Price per square foot: ${result:.2f}\")\n```"
  },
  {
    "task": "Write a script to compute the total interest earned on a savings account with monthly compounding.",
    "code": "```python\nprincipal = 1000  # Initial amount\nannual_rate = 0.05  # Annual interest rate as a decimal\nmonths = 12  # Number of months\n\nmonthly_rate = annual_rate / 12\ntotal_amount = principal * (1 + monthly_rate) ** months\ntotal_interest = total_amount - principal\n\nprint(f\"Total interest earned: {total_interest:.2f}\")\n```"
  },
  {
    "task": "Develop a program that calculates the calories burned during exercise given MET value and duration.",
    "code": "```python\ndef calculate_calories_burned(met_value, duration_hours, weight_kg):\n    calories_burned = met_value * weight_kg * duration_hours\n    return calories_burned\n\n# Example usage:\nmet_value = 8.0  # MET value for the exercise\nduration_hours = 1.5  # Duration in hours\nweight_kg = 70  # Weight in kilograms\n\ncalories = calculate_calories_burned(met_value, duration_hours, weight_kg)\nprint(f\"Calories burned: {calories}\")\n```"
  },
  {
    "task": "Build a function that converts a speed from miles per hour to kilometers per hour using multiplication.",
    "code": "```python\ndef mph_to_kph(speed_mph):\n    return speed_mph * 1.60934\n```"
  },
  {
    "task": "Implement a program to find the number of days between two dates using arithmetic operations.",
    "code": "```python\nfrom datetime import datetime\n\ndef days_between_dates(date1_str, date2_str):\n    date_format = \"%Y-%m-%d\"\n    date1 = datetime.strptime(date1_str, date_format)\n    date2 = datetime.strptime(date2_str, date_format)\n    difference = date2 - date1\n    return abs(difference.days)\n\n# Example usage\ndate1 = \"2023-10-01\"\ndate2 = \"2023-10-15\"\nprint(days_between_dates(date1, date2))\n```"
  },
  {
    "task": "Write a function to calculate the area of a circle given its radius.",
    "code": "```python\nimport math\n\ndef area_of_circle(radius):\n    return math.pi * radius ** 2\n```"
  },
  {
    "task": "Create a program that determines the total distance driven given trips with varying speeds and durations.",
    "code": "```python\ndef total_distance(trips):\n    distance = 0\n    for speed, duration in trips:\n        distance += speed * duration\n    return distance\n\n# Example usage:\ntrips = [(60, 1.5), (50, 2), (70, 0.5)]  # List of (speed, duration) tuples\nprint(total_distance(trips))\n```"
  },
  {
    "task": "Design a function to compute the final price of an item after applying multiple discounts sequentially.",
    "code": "```python\ndef compute_final_price(initial_price, discounts):\n    final_price = initial_price\n    for discount in discounts:\n        final_price -= final_price * (discount / 100.0)\n    return final_price\n```"
  },
  {
    "task": "Write a script that calculates the number of bricks needed to build a wall given wall dimensions and brick size.",
    "code": "```python\ndef calculate_bricks_needed(wall_height, wall_width, brick_height, brick_width):\n    wall_area = wall_height * wall_width\n    brick_area = brick_height * brick_width\n    bricks_needed = wall_area / brick_area\n    return bricks_needed\n\n# Example usage\nwall_height = 10  # in meters\nwall_width = 20   # in meters\nbrick_height = 0.1  # in meters\nbrick_width = 0.2   # in meters\n\nbricks_needed = calculate_bricks_needed(wall_height, wall_width, brick_height, brick_width)\nprint(f\"Number of bricks needed: {bricks_needed}\")\n```"
  },
  {
    "task": "Develop a program to determine the number of pizzas required for a party given the number of people and slices per pizza.",
    "code": "```python\nimport math\n\ndef pizzas_required(people, slices_per_person, slices_per_pizza):\n    total_slices_needed = people * slices_per_person\n    pizzas = math.ceil(total_slices_needed / slices_per_pizza)\n    return pizzas\n\npeople = int(input(\"Enter the number of people: \"))\nslices_per_person = int(input(\"Enter the number of slices each person will eat: \"))\nslices_per_pizza = int(input(\"Enter the number of slices per pizza: \"))\n\npizzas = pizzas_required(people, slices_per_person, slices_per_pizza)\nprint(f\"Number of pizzas required: {pizzas}\")\n```"
  },
  {
    "task": "Implement a function that calculates the total cost of a meal including tax and tip.",
    "code": "```python\ndef calculate_total_cost(meal_cost, tax_rate, tip_rate):\n    tax_amount = meal_cost * tax_rate\n    tip_amount = meal_cost * tip_rate\n    total_cost = meal_cost + tax_amount + tip_amount\n    return total_cost\n```"
  },
  {
    "task": "Create a program to compute the average rainfall over a period using addition and division.",
    "code": "```python\nrainfall_data = [12.0, 15.3, 9.8, 10.2, 16.4, 14.6, 11.7]\ntotal_rainfall = sum(rainfall_data)\nnumber_of_days = len(rainfall_data)\naverage_rainfall = total_rainfall / number_of_days\nprint(average_rainfall)\n```"
  },
  {
    "task": "Write a function that determines the number of batches needed to produce a specific quantity of a product.",
    "code": "```python\ndef calculate_batches(total_quantity, batch_size):\n    return (total_quantity + batch_size - 1) // batch_size\n```"
  },
  {
    "task": "Design a program to calculate the total energy consumption of a household given individual appliance usage.",
    "code": "```python\ndef calculate_total_energy(appliance_usages):\n    total_energy = 0\n    for usage in appliance_usages:\n        total_energy += usage\n    return total_energy\n\nappliance_usages = [100, 200, 150, 300, 250]  # Example values in kilowatt-hours\ntotal_energy_consumption = calculate_total_energy(appliance_usages)\nprint(f\"Total Energy Consumption: {total_energy_consumption} kWh\")\n```"
  },
  {
    "task": "Develop a function that computes the body surface area of a person using height and weight.",
    "code": "```python\ndef compute_body_surface_area(height, weight):\n    return 0.007184 * (height ** 0.725) * (weight ** 0.425)\n```"
  },
  {
    "task": "Build a script to calculate the monthly payment on a mortgage using principal, interest rate, and term.",
    "code": "```python\ndef calculate_monthly_payment(principal, annual_interest_rate, term_years):\n    monthly_interest_rate = annual_interest_rate / 12 / 100\n    number_of_payments = term_years * 12\n    monthly_payment = (principal * monthly_interest_rate) / (1 - (1 + monthly_interest_rate) ** -number_of_payments)\n    return monthly_payment\n\nprincipal = 300000  # Example principal amount\nannual_interest_rate = 3.5  # Example annual interest rate in percent\nterm_years = 30  # Example term in years\n\nmonthly_payment = calculate_monthly_payment(principal, annual_interest_rate, term_years)\nprint(f\"Monthly Payment: {monthly_payment:.2f}\")\n```"
  },
  {
    "task": "Implement a function to find the volume of a cone given its height and radius.",
    "code": "```python\nimport math\n\ndef cone_volume(radius, height):\n    return (1/3) * math.pi * radius**2 * height\n```"
  },
  {
    "task": "Write a program that estimates the cost of a trip using fuel efficiency and distance.",
    "code": "```python\ndef estimate_trip_cost(distance, fuel_efficiency, fuel_price_per_unit):\n    fuel_needed = distance / fuel_efficiency\n    total_cost = fuel_needed * fuel_price_per_unit\n    return total_cost\n\n# Example usage\ndistance = 300  # miles\nfuel_efficiency = 25  # miles per gallon\nfuel_price_per_unit = 3.5  # dollars per gallon\n\ncost = estimate_trip_cost(distance, fuel_efficiency, fuel_price_per_unit)\nprint(f\"Estimated trip cost: ${cost:.2f}\")\n```"
  }
]