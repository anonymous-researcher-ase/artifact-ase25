[
  {
    "task": "Create a function that modifies the first element of an array passed to it. Explain how the changes are reflected in the original array.",
    "code": "```python\ndef modify_first_element(arr):\n    arr[0] = 'Modified'\n\n# Example usage\noriginal_array = [1, 2, 3, 4, 5]\nmodify_first_element(original_array)\nprint(original_array)\n```"
  },
  {
    "task": "Design a function that swaps the values of two variables using pass-by-reference. Demonstrate how the swap affects the original variables.",
    "code": "```python\ndef swap_by_reference(a_container, b_container):\n    a_container[0], b_container[0] = b_container[0], a_container[0]\n\n# Example usage\nx = [5]\ny = [10]\nswap_by_reference(x, y)\n\nprint(\"x:\", x[0])  # Output: x: 10\nprint(\"y:\", y[0])  # Output: y: 5\n```"
  },
  {
    "task": "Write a program that passes a large data structure to a function by value and by reference. Compare the performance and memory usage for both approaches.",
    "code": "```python\nimport time\nimport sys\nimport copy\n\ndef by_value(data):\n    return copy.deepcopy(data)\n\ndef by_reference(data):\n    return data\n\ndef measure_performance_and_memory(func, data):\n    start_time = time.perf_counter()\n    result = func(data)\n    end_time = time.perf_counter()\n    memory_usage = sys.getsizeof(result)\n    return end_time - start_time, memory_usage\n\n# Create a large data structure\nlarge_data = [list(range(1000)) for _ in range(1000)]\n\n# Measure performance and memory usage for both approaches\ntime_value, memory_value = measure_performance_and_memory(by_value, large_data)\ntime_reference, memory_reference = measure_performance_and_memory(by_reference, large_data)\n\nprint(f\"By Value: Time = {time_value:.6f} seconds, Memory = {memory_value} bytes\")\nprint(f\"By Reference: Time = {time_reference:.6f} seconds, Memory = {memory_reference} bytes\")\n```"
  },
  {
    "task": "Implement a function that accepts an integer and doubles its value. Show the difference in the original variable when using pass-by-value versus pass-by-reference.",
    "code": "```python\ndef double_value(val):\n    return val * 2\n\ndef double_reference(lst):\n    lst[0] *= 2\n\n# Pass-by-value\noriginal_val = 10\nnew_val = double_value(original_val)\nprint(\"Original value (pass-by-value):\", original_val)\nprint(\"Doubled value (pass-by-value):\", new_val)\n\n# Pass-by-reference\noriginal_lst = [10]\ndouble_reference(original_lst)\nprint(\"Original value (pass-by-reference):\", original_lst[0])\n```"
  },
  {
    "task": "Create a function that takes a list and returns a new list with elements doubled. Ensure the original list remains unchanged.",
    "code": "```python\ndef double_elements(original_list):\n    return [element * 2 for element in original_list]\n\n# Example usage:\noriginal = [1, 2, 3, 4]\ndoubled = double_elements(original)\n```"
  },
  {
    "task": "Design a function that takes a string argument and appends a character to it. Illustrate the result when the string is passed by value.",
    "code": "```python\ndef append_character(s, char):\n    s += char\n    return s\n\noriginal_string = \"Hello\"\nchar_to_append = \"!\"\nresult = append_character(original_string, char_to_append)\n\nprint(\"Original:\", original_string)\nprint(\"Result:\", result)\n```"
  },
  {
    "task": "Write a function that increments a counter variable. Pass the variable by reference to see changes in the original variable.",
    "code": "```python\nclass Counter:\n    def __init__(self, value=0):\n        self.value = value\n\ndef increment(counter):\n    counter.value += 1\n\n# Usage\ncounter = Counter(0)\nincrement(counter)\nprint(counter.value)  # Output will be 1\n```"
  },
  {
    "task": "Develop a function that removes an item from a dictionary passed to it. Demonstrate how pass-by-reference affects the original dictionary.",
    "code": "```python\ndef remove_item(d, key):\n    if key in d:\n        del d[key]\n\noriginal_dict = {'a': 1, 'b': 2, 'c': 3}\nremove_item(original_dict, 'b')\nprint(original_dict)\n```"
  },
  {
    "task": "Create a program that passes a matrix to a function, which transposes it. Explain how the transposition affects the original matrix with pass-by-reference.",
    "code": "```python\ndef transpose_matrix(matrix):\n    rows = len(matrix)\n    cols = len(matrix[0])\n    transposed = [[matrix[j][i] for j in range(rows)] for i in range(cols)]\n    return transposed\n\ndef main():\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    \n    transposed_matrix = transpose_matrix(matrix)\n    \n    print(\"Original Matrix:\")\n    for row in matrix:\n        print(row)\n    \n    print(\"\\nTransposed Matrix:\")\n    for row in transposed_matrix:\n        print(row)\n\nif __name__ == \"__main__\":\n    main()\n```"
  },
  {
    "task": "Implement a function that takes a float number and rounds it. Discuss the implications of passing the number by value.",
    "code": "```python\ndef round_number(number):\n    return round(number)\n\n# Example usage\nresult = round_number(3.14159)\nprint(result)\n```"
  },
  {
    "task": "Design a function that accepts a dictionary and adds a key-value pair to it. Show the changes when the dictionary is passed by reference.",
    "code": "```python\ndef add_key_value_pair(d, key, value):\n    d[key] = value\n\n# Example usage\nmy_dict = {'a': 1, 'b': 2}\nprint(\"Before:\", my_dict)\nadd_key_value_pair(my_dict, 'c', 3)\nprint(\"After:\", my_dict)\n```"
  },
  {
    "task": "Write a program that passes a string to a function that converts it to uppercase. Explain how this affects the original string with pass-by-value.",
    "code": "```python\ndef convert_to_uppercase(s):\n    s = s.upper()\n    return s\n\noriginal_string = \"hello world\"\nuppercased_string = convert_to_uppercase(original_string)\n\nprint(\"Original String:\", original_string)\nprint(\"Uppercased String:\", uppercased_string)\n```"
  },
  {
    "task": "Create a function that receives a tuple and attempts to modify one of its elements. Discuss the outcome of using pass-by-value.",
    "code": "```python\ndef attempt_modify_tuple(t):\n    try:\n        t[0] = 'modified'\n    except TypeError as e:\n        print(f\"Error: {e}\")\n\noriginal_tuple = ('original', 2, 3)\nattempt_modify_tuple(original_tuple)\nprint(original_tuple)\n```"
  },
  {
    "task": "Develop a function that accepts an object and modifies one of its attributes. Illustrate how pass-by-reference alters the original object.",
    "code": "```python\nclass ExampleObject:\n    def __init__(self, attribute):\n        self.attribute = attribute\n\ndef modify_object(obj):\n    obj.attribute += 10\n\n# Example usage\nmy_object = ExampleObject(5)\nprint(f\"Before modification: {my_object.attribute}\")\nmodify_object(my_object)\nprint(f\"After modification: {my_object.attribute}\")\n```"
  },
  {
    "task": "Design a function that outputs the sum of all elements in an array passed by value. Confirm the original array remains unchanged.",
    "code": "```python\ndef sum_of_elements(arr):\n    copy_arr = arr[:]\n    return sum(copy_arr)\n\n# Example usage:\noriginal_array = [1, 2, 3, 4, 5]\nresult = sum_of_elements(original_array)\n```"
  },
  {
    "task": "Write a function that takes a boolean flag and toggles its value. Demonstrate the effect of pass-by-reference on the original flag.",
    "code": "```python\ndef toggle_flag(flag_container):\n    flag_container[0] = not flag_container[0]\n\n# Demonstration\noriginal_flag = [True]  # Using a list to demonstrate pass-by-reference\ntoggle_flag(original_flag)\nprint(original_flag[0])  # Output: False\n\ntoggle_flag(original_flag)\nprint(original_flag[0])  # Output: True\n```"
  },
  {
    "task": "Create a function that takes an object and clones it. Modify the clone and show that the original object remains unaffected.",
    "code": "```python\nimport copy\n\ndef clone_and_modify(original_object):\n    # Clone the original object\n    cloned_object = copy.deepcopy(original_object)\n    \n    # Modify the cloned object\n    if isinstance(cloned_object, list):\n        cloned_object.append('modified')\n    elif isinstance(cloned_object, dict):\n        cloned_object['modified'] = True\n    elif isinstance(cloned_object, set):\n        cloned_object.add('modified')\n    elif isinstance(cloned_object, str):\n        cloned_object += ' modified'\n    \n    return cloned_object\n\n# Example usage\noriginal_list = [1, 2, 3]\ncloned_list = clone_and_modify(original_list)\nprint(\"Original List:\", original_list)\nprint(\"Cloned and Modified List:\", cloned_list)\n\noriginal_dict = {'a': 1, 'b': 2}\ncloned_dict = clone_and_modify(original_dict)\nprint(\"\\nOriginal Dict:\", original_dict)\nprint(\"Cloned and Modified Dict:\", cloned_dict)\n```"
  },
  {
    "task": "Implement a function that accepts a list of integers and removes all even numbers. Describe the difference in behavior when using pass-by-value and pass-by-reference.",
    "code": "```python\ndef remove_even_numbers(numbers):\n    return [num for num in numbers if num % 2 != 0]\n\n# Demonstration of pass-by-reference behavior:\noriginal_list = [1, 2, 3, 4, 5, 6]\nmodified_list = remove_even_numbers(original_list)\nprint(\"Original list:\", original_list)\nprint(\"Modified list:\", modified_list)\n```"
  },
  {
    "task": "Develop a function that takes a complex number and returns its conjugate. Explain how pass-by-value affects the original complex number.",
    "code": "```python\ndef get_conjugate(c):\n    return complex(c.real, -c.imag)\n\n# Example usage\noriginal_complex = complex(3, 4)\nconjugate = get_conjugate(original_complex)\n\n# Pass-by-value means that the original_complex remains unchanged\nprint(\"Original:\", original_complex)\nprint(\"Conjugate:\", conjugate)\n```"
  },
  {
    "task": "Design a program where a function receives a binary tree and inverts it. Discuss how pass-by-reference impacts the original tree structure.",
    "code": "```python\nclass TreeNode:\n    def __init__(self, value=0, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\n\ndef invert_tree(node):\n    if node is not None:\n        node.left, node.right = node.right, node.left\n        invert_tree(node.left)\n        invert_tree(node.right)\n\n# Example usage:\n# root = TreeNode(1, TreeNode(2), TreeNode(3))\n# invert_tree(root)\n```"
  },
  {
    "task": "Write a function that adds an element to a set passed to it. Show how pass-by-reference affects the original set.",
    "code": "```python\ndef add_element(s, element):\n    s.add(element)\n\nmy_set = {1, 2, 3}\nadd_element(my_set, 4)\nprint(my_set)  # Output will show the original set is modified\n```"
  },
  {
    "task": "Create a function that accepts an integer array and sorts it. Demonstrate the difference when the array is passed by value.",
    "code": "```python\ndef sort_array(arr):\n    return sorted(arr)\n\ndef demonstrate_parameter_passing(arr):\n    sorted_arr = sort_array(arr)\n    return arr, sorted_arr\n\noriginal_array = [5, 3, 8, 1, 2]\nunsorted_array, sorted_array = demonstrate_parameter_passing(original_array)\n\nprint(\"Unsorted Array:\", unsorted_array)\nprint(\"Sorted Array:\", sorted_array)\n```"
  },
  {
    "task": "Implement a function that takes a configuration object and toggles a setting. Illustrate the changes with pass-by-reference.",
    "code": "```python\nclass Config:\n    def __init__(self, setting):\n        self.setting = setting\n\ndef toggle_setting(config):\n    config.setting = not config.setting\n\n# Example usage:\nconfig_obj = Config(setting=True)\nprint(f\"Before toggling: {config_obj.setting}\")\ntoggle_setting(config_obj)\nprint(f\"After toggling: {config_obj.setting}\")\n```"
  },
  {
    "task": "Design a function that receives a file path and reads its content. Explain how passing the path by value affects the outcome.",
    "code": "```python\ndef read_file_content(file_path):\n    try:\n        with open(file_path, 'r') as file:\n            content = file.read()\n        return content\n    except FileNotFoundError:\n        return \"File not found.\"\n    except Exception as e:\n        return f\"An error occurred: {e}\"\n```"
  },
  {
    "task": "Write a program in which a function takes a stack and reverses its elements. Discuss the impact of pass-by-reference on the stack.",
    "code": "```python\ndef reverse_stack(stack):\n    def insert_at_bottom(stack, item):\n        if not stack:\n            stack.append(item)\n        else:\n            temp = stack.pop()\n            insert_at_bottom(stack, item)\n            stack.append(temp)\n\n    if stack:\n        temp = stack.pop()\n        reverse_stack(stack)\n        insert_at_bottom(stack, temp)\n\n# Example usage\nstack = [1, 2, 3, 4, 5]\nreverse_stack(stack)\nprint(stack)  # Output will be [5, 4, 3, 2, 1]\n```"
  },
  {
    "task": "Create a function that takes a queue and dequeues an element. Show the result when the queue is passed by reference.",
    "code": "```python\nfrom collections import deque\n\ndef dequeue_element(queue):\n    if queue:\n        queue.popleft()\n\n# Example usage\nq = deque([1, 2, 3, 4])\ndequeue_element(q)\nprint(q)\n```"
  },
  {
    "task": "Develop a function that accepts a hashmap and updates a value for a specific key. Illustrate the effects of pass-by-reference.",
    "code": "```python\ndef update_value(data, key, new_value):\n    if key in data:\n        data[key] = new_value\n\nsample_data = {'a': 1, 'b': 2, 'c': 3}\n\nprint(\"Before update:\", sample_data)\nupdate_value(sample_data, 'b', 200)\nprint(\"After update:\", sample_data)\n```"
  },
  {
    "task": "Design a function that receives a JSON object and adds a new property. Discuss the implications of modifying the object by reference.",
    "code": "```python\nimport json\n\ndef add_property_to_json(json_obj, key, value):\n    json_obj[key] = value\n    return json_obj\n\n# Example usage\njson_str = '{\"name\": \"John\", \"age\": 30}'\njson_obj = json.loads(json_str)\n\n# Adding a new property\nadd_property_to_json(json_obj, \"city\", \"New York\")\n\n# The json_obj is modified by reference\nprint(json.dumps(json_obj))\n```"
  },
  {
    "task": "Write a program where a function accepts a graph and adds a node. Explain how pass-by-reference affects the original graph structure.",
    "code": "```python\ndef add_node(graph, node):\n    if node not in graph:\n        graph[node] = []\n\ndef main():\n    # Initialize a sample graph (using an adjacency list representation)\n    graph = {\n        'A': ['B', 'C'],\n        'B': ['A', 'D'],\n        'C': ['A', 'D'],\n        'D': ['B', 'C']\n    }\n    \n    # Add a new node to the graph\n    add_node(graph, 'E')\n    \n    # Output the modified graph\n    print(graph)\n\nif __name__ == \"__main__\":\n    main()\n```"
  },
  {
    "task": "Create a function that accepts a set of coordinates and shifts them. Demonstrate how pass-by-value ensures the original set is unchanged.",
    "code": "```python\ndef shift_coordinates(coords, dx, dy):\n    new_coords = set((x + dx, y + dy) for x, y in coords)\n    return new_coords\n\noriginal_coords = {(1, 2), (3, 4), (5, 6)}\nshifted_coords = shift_coordinates(original_coords, 1, 1)\n\nprint(\"Original Coordinates:\", original_coords)\nprint(\"Shifted Coordinates:\", shifted_coords)\n```"
  },
  {
    "task": "Implement a function that takes a date object and sets it to the next day. Discuss the effects of pass-by-reference on the date object.",
    "code": "```python\nfrom datetime import date, timedelta\n\ndef set_to_next_day(d):\n    return d + timedelta(days=1)\n\n# Usage\ncurrent_date = date(2023, 10, 4)\nnext_date = set_to_next_day(current_date)\n```"
  },
  {
    "task": "Develop a function that receives a polynomial represented as a list of coefficients and differentiates it. Show how the original list remains unchanged with pass-by-value.",
    "code": "```python\ndef differentiate_polynomial(coefficients):\n    return [coefficients[i] * i for i in range(1, len(coefficients))]\n\noriginal_polynomial = [3, 2, 1]  # Represents 3 + 2x + x^2\ndifferentiated_polynomial = differentiate_polynomial(original_polynomial)\n\nprint(\"Original Polynomial:\", original_polynomial)\nprint(\"Differentiated Polynomial:\", differentiated_polynomial)\n```"
  },
  {
    "task": "Design a function that accepts a stack and clears it. Explain how pass-by-reference affects the original stack.",
    "code": "```python\ndef clear_stack(stack):\n    while stack:\n        stack.pop()\n\n# Example usage\nmy_stack = [1, 2, 3, 4, 5]\nclear_stack(my_stack)\nprint(my_stack)  # Output will be []\n```"
  },
  {
    "task": "Write a function that takes a linked list and appends a new node. Demonstrate the impact of pass-by-reference on the list.",
    "code": "```python\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n    def append_node(self, data):\n        new_node = Node(data)\n        if not self.head:\n            self.head = new_node\n        else:\n            current = self.head\n            while current.next:\n                current = current.next\n            current.next = new_node\n\ndef append_to_linked_list(linked_list, data):\n    linked_list.append_node(data)\n\ndef print_linked_list(linked_list):\n    current = linked_list.head\n    while current:\n        print(current.data, end=' -> ')\n        current = current.next\n    print('None')\n\n# Demonstration\nll = LinkedList()\nappend_to_linked_list(ll, 1)\nappend_to_linked_list(ll, 2)\nappend_to_linked_list(ll, 3)\nprint_linked_list(ll)\n```"
  },
  {
    "task": "Create a function that receives a URL and extracts the domain name. Discuss the effects of pass-by-value on the URL string.",
    "code": "```python\nfrom urllib.parse import urlparse\n\ndef extract_domain(url):\n    parsed_url = urlparse(url)\n    return parsed_url.netloc\n\n# Example usage\nurl = \"https://www.example.com/path?query=123\"\ndomain = extract_domain(url)\nprint(domain)\n```"
  },
  {
    "task": "Implement a function that takes a priority queue and changes the priority of an element. Illustrate the effects using pass-by-reference.",
    "code": "```python\nimport heapq\n\ndef change_priority(pq, element, new_priority):\n    # Find the element and remove it\n    try:\n        index = next(i for i, (priority, item) in enumerate(pq) if item == element)\n        pq.pop(index)\n        heapq.heapify(pq)\n    except StopIteration:\n        return False\n\n    # Add the element back with new priority\n    heapq.heappush(pq, (new_priority, element))\n    return True\n\n# Example priority queue (as a list of tuples: (priority, item))\npriority_queue = [(1, 'task1'), (3, 'task2'), (5, 'task3')]\nheapq.heapify(priority_queue)\n\n# Change priority of 'task2' to 2\nsuccess = change_priority(priority_queue, 'task2', 2)\n\n# Illustrate pass-by-reference\nprint(priority_queue)\n```"
  },
  {
    "task": "Develop a function that accepts a circular buffer and reads an element. Explain how pass-by-reference influences the buffer.",
    "code": "```python\nclass CircularBuffer:\n    def __init__(self, size):\n        self.buffer = [None] * size\n        self.size = size\n        self.start = 0\n        self.end = 0\n        self.count = 0\n\n    def is_empty(self):\n        return self.count == 0\n\n    def is_full(self):\n        return self.count == self.size\n\n    def add(self, item):\n        if self.is_full():\n            raise BufferError(\"Buffer is full\")\n        self.buffer[self.end] = item\n        self.end = (self.end + 1) % self.size\n        self.count += 1\n\n    def read(self):\n        if self.is_empty():\n            raise BufferError(\"Buffer is empty\")\n        item = self.buffer[self.start]\n        self.start = (self.start + 1) % self.size\n        self.count -= 1\n        return item\n\ndef read_element(buffer):\n    return buffer.read()\n\n# Usage example:\nbuffer = CircularBuffer(5)\nbuffer.add(1)\nbuffer.add(2)\nbuffer.add(3)\n\nelement = read_element(buffer)\n```"
  },
  {
    "task": "Design a program where a function receives a record and updates a field. Show how pass-by-reference affects the original record.",
    "code": "```python\nclass Record:\n    def __init__(self, field):\n        self.field = field\n\ndef update_record(record, new_value):\n    record.field = new_value\n\n# Example usage:\noriginal_record = Record(\"initial_value\")\nprint(\"Before update:\", original_record.field)\n\nupdate_record(original_record, \"updated_value\")\nprint(\"After update:\", original_record.field)\n```"
  },
  {
    "task": "Write a function that takes a frequency list and normalizes it. Describe how pass-by-value ensures the original list remains unchanged.",
    "code": "```python\ndef normalize_frequency(freq_list):\n    total = sum(freq_list)\n    return [x / total for x in freq_list]\n\n# Example usage\noriginal_list = [10, 20, 30]\nnormalized_list = normalize_frequency(original_list)\n\n# original_list remains unchanged\n```"
  },
  {
    "task": "Create a function that accepts a chessboard and makes a move. Discuss how pass-by-reference alters the original board setup.",
    "code": "```python\ndef make_move(chessboard, from_position, to_position):\n    piece = chessboard[from_position[0]][from_position[1]]\n    chessboard[to_position[0]][to_position[1]] = piece\n    chessboard[from_position[0]][from_position[1]] = None\n\n# Example usage\nchessboard = [\n    ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R'],\n    ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'],\n    [None, None, None, None, None, None, None, None],\n    [None, None, None, None, None, None, None, None],\n    [None, None, None, None, None, None, None, None],\n    [None, None, None, None, None, None, None, None],\n    ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'],\n    ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r']\n]\n\nmake_move(chessboard, (6, 0), (4, 0))  # Move pawn from (6, 0) to (4, 0)\n```"
  },
  {
    "task": "Implement a function that takes a decimal number and converts it to binary. Explain the effects of pass-by-value on the original number.",
    "code": "```python\ndef decimal_to_binary(decimal_number):\n    return bin(decimal_number)[2:]\n\noriginal_number = 25\nbinary_representation = decimal_to_binary(original_number)\nprint(\"Original number:\", original_number)\nprint(\"Binary representation:\", binary_representation)\n```"
  },
  {
    "task": "Develop a function that receives a DNA sequence and counts nucleotides. Illustrate how pass-by-value ensures the original sequence remains intact.",
    "code": "```python\ndef count_nucleotides(dna_sequence):\n    # Create a copy of the sequence to ensure the original remains unchanged\n    sequence_copy = dna_sequence[:]\n    nucleotide_count = {\n        'A': sequence_copy.count('A'),\n        'C': sequence_copy.count('C'),\n        'G': sequence_copy.count('G'),\n        'T': sequence_copy.count('T')\n    }\n    return nucleotide_count\n\noriginal_sequence = \"AGCTTAGCTA\"\nnucleotide_counts = count_nucleotides(original_sequence)\n\nprint(\"Original Sequence:\", original_sequence)\nprint(\"Nucleotide Counts:\", nucleotide_counts)\n```"
  },
  {
    "task": "Design a function that accepts a shopping cart object and applies a discount. Show the changes with pass-by-reference.",
    "code": "```python\nclass ShoppingCart:\n    def __init__(self, items):\n        self.items = items  # items is a list of tuples (item_name, price)\n\ndef apply_discount(cart, discount_percentage):\n    for i in range(len(cart.items)):\n        item_name, price = cart.items[i]\n        cart.items[i] = (item_name, price * (1 - discount_percentage / 100))\n\n# Example usage\ncart = ShoppingCart([(\"apple\", 1.0), (\"banana\", 0.5), (\"cherry\", 2.0)])\napply_discount(cart, 10)  # Applying a 10% discount\nprint(cart.items)\n```"
  },
  {
    "task": "Write a program where a function receives a playlist and adds a song. Discuss how pass-by-reference affects the original playlist.",
    "code": "```python\ndef add_song(playlist, song):\n    playlist.append(song)\n\nmy_playlist = ['Song1', 'Song2', 'Song3']\nadd_song(my_playlist, 'NewSong')\n\nprint(my_playlist)\n```"
  },
  {
    "task": "Create a function that takes a sprite in a game and moves it. Demonstrate the result when the sprite is passed by reference.",
    "code": "```python\nclass Sprite:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\ndef move_sprite(sprite, dx, dy):\n    sprite.x += dx\n    sprite.y += dy\n\n# Example usage\nsprite = Sprite(5, 10)\nprint(f\"Before move: x={sprite.x}, y={sprite.y}\")\nmove_sprite(sprite, 3, -2)\nprint(f\"After move: x={sprite.x}, y={sprite.y}\")\n```"
  },
  {
    "task": "Implement a function that accepts a book object and updates the title. Illustrate the impact of pass-by-reference on the original object.",
    "code": "```python\nclass Book:\n    def __init__(self, title):\n        self.title = title\n\ndef update_title(book, new_title):\n    book.title = new_title\n\n# Example usage\nmy_book = Book(\"Original Title\")\nupdate_title(my_book, \"Updated Title\")\nprint(my_book.title)  # Output: Updated Title\n```"
  },
  {
    "task": "Develop a function that receives a sound wave and normalizes it. Explain how pass-by-value affects the original sound wave.",
    "code": "```python\ndef normalize_sound_wave(sound_wave):\n    max_amplitude = max(sound_wave)\n    if max_amplitude == 0:\n        return sound_wave[:]\n    return [sample / max_amplitude for sample in sound_wave]\n\noriginal_wave = [0.2, 0.5, 0.7, 1.0, 0.6]\nnormalized_wave = normalize_sound_wave(original_wave)\n\nprint(\"Original wave:\", original_wave)\nprint(\"Normalized wave:\", normalized_wave)\n```"
  },
  {
    "task": "Design a program where a function receives a bank account object and credits an amount. Discuss the effects of pass-by-reference.",
    "code": "```python\nclass BankAccount:\n    def __init__(self, owner, balance=0):\n        self.owner = owner\n        self.balance = balance\n\ndef credit_account(account, amount):\n    account.balance += amount\n\n# Example usage:\naccount = BankAccount(\"Alice\", 100)\ncredit_account(account, 50)\nprint(account.balance)  # Output: 150\n```"
  },
  {
    "task": "Write a function that takes an email list and filters out invalid addresses. Show the difference in the list when using pass-by-value.",
    "code": "```python\ndef is_valid_email(email):\n    return '@' in email and '.' in email\n\ndef filter_invalid_emails(email_list):\n    return [email for email in email_list if is_valid_email(email)]\n\ndef pass_by_value_example(email_list):\n    filtered_list = filter_invalid_emails(email_list[:])\n    return filtered_list\n\noriginal_list = [\"test@example.com\", \"invalid-email\", \"user@domain.com\"]\nfiltered_list = pass_by_value_example(original_list)\n\nprint(\"Original List:\", original_list)\nprint(\"Filtered List:\", filtered_list)\n```"
  },
  {
    "task": "Create a function that accepts a 3D model and scales it. Demonstrate how pass-by-reference affects the original model.",
    "code": "```python\nclass Model3D:\n    def __init__(self, vertices):\n        self.vertices = vertices\n\ndef scale_model(model, scale_factor):\n    for i in range(len(model.vertices)):\n        model.vertices[i] = tuple(coord * scale_factor for coord in model.vertices[i])\n\n# Example usage\noriginal_model = Model3D([(1, 2, 3), (4, 5, 6), (7, 8, 9)])\nscale_factor = 2\n\nprint(\"Before scaling:\", original_model.vertices)\nscale_model(original_model, scale_factor)\nprint(\"After scaling:\", original_model.vertices)\n```"
  },
  {
    "task": "Implement a function that receives a text document and redacts sensitive information. Explain the impact of pass-by-reference.",
    "code": "```python\nimport re\n\ndef redact_sensitive_info(document):\n    redact_patterns = {\n        'ssn': r'\\b\\d{3}-\\d{2}-\\d{4}\\b',\n        'credit_card': r'\\b\\d{4}-\\d{4}-\\d{4}-\\d{4}\\b',\n        'email': r'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b'\n    }\n    \n    for pattern in redact_patterns.values():\n        document[:] = re.sub(pattern, '[REDACTED]', document)\n\ndef main():\n    text_document = [\"This is a sample document with sensitive information.\",\n                     \"SSN: 123-45-6789, Credit Card: 1234-5678-9012-3456, Email: example@example.com.\"]\n    \n    print(\"Before Redaction:\")\n    print(text_document)\n    \n    redact_sensitive_info(text_document)\n    \n    print(\"\\nAfter Redaction:\")\n    print(text_document)\n\nif __name__ == \"__main__\":\n    main()\n```"
  },
  {
    "task": "Develop a function that takes a temperature reading and adjusts for calibration. Discuss how pass-by-value ensures the original reading is unchanged.",
    "code": "```python\ndef calibrate_temperature(reading, adjustment):\n    return reading + adjustment\n\noriginal_reading = 25.0\ncalibration_adjustment = 2.5\n\nadjusted_reading = calibrate_temperature(original_reading, calibration_adjustment)\n\nprint(f\"Original Reading: {original_reading}\")\nprint(f\"Adjusted Reading: {adjusted_reading}\")\n```"
  },
  {
    "task": "Design a function that accepts a bug report and updates its status. Show the changes with pass-by-reference.",
    "code": "```python\ndef update_bug_status(bug_report, new_status):\n    bug_report['status'] = new_status\n\n# Example bug report\nbug = {'id': 101, 'description': 'Button not working', 'status': 'open'}\n\n# Update status using pass-by-reference\nupdate_bug_status(bug, 'closed')\n\n# Show updated bug report\nprint(bug)\n```"
  },
  {
    "task": "Write a program where a function receives a sensor array and calibrates it. Demonstrate the effect of pass-by-reference on the array.",
    "code": "```python\ndef calibrate_sensor_array(sensor_array):\n    for i in range(len(sensor_array)):\n        sensor_array[i] += 1\n\ndef main():\n    sensors = [10, 20, 30, 40, 50]\n    print(\"Before calibration:\", sensors)\n    calibrate_sensor_array(sensors)\n    print(\"After calibration:\", sensors)\n\nmain()\n```"
  },
  {
    "task": "Create a function that takes a vector and rotates it. Explain how pass-by-value ensures the original vector remains unchanged.",
    "code": "```python\ndef rotate_vector(vector):\n    rotated_vector = vector[1:] + vector[:1]\n    return rotated_vector\n\noriginal_vector = [1, 2, 3, 4]\nnew_vector = rotate_vector(original_vector)\n\nprint(\"Original Vector:\", original_vector)\nprint(\"Rotated Vector:\", new_vector)\n```"
  },
  {
    "task": "Implement a function that accepts an operation log and compresses it. Discuss the impact of pass-by-reference on the log.",
    "code": "```python\ndef compress_log(log):\n    if not log:\n        return log\n\n    compressed = []\n    current_entry = log[0]\n    count = 1\n\n    for entry in log[1:]:\n        if entry == current_entry:\n            count += 1\n        else:\n            compressed.append((current_entry, count))\n            current_entry = entry\n            count = 1\n\n    compressed.append((current_entry, count))\n    return compressed\n\n# Example log\noperation_log = [\"START\", \"START\", \"STOP\", \"STOP\", \"STOP\", \"START\"]\n\n# Compressing the log\ncompressed_log = compress_log(operation_log)\n\n# Output\nprint(compressed_log)\n```"
  },
  {
    "task": "Develop a function that receives a neural network model and updates its weights. Illustrate the effects of pass-by-reference.",
    "code": "```python\nclass NeuralNetwork:\n    def __init__(self):\n        self.weights = [0.5, -0.2, 0.1]\n    \n    def __str__(self):\n        return f\"Weights: {self.weights}\"\n\ndef update_weights(model):\n    # Directly modify the weights attribute\n    for i in range(len(model.weights)):\n        model.weights[i] += 0.1\n\n# Example usage\nnn = NeuralNetwork()\nprint(\"Before update:\", nn)\nupdate_weights(nn)\nprint(\"After update:\", nn)\n```"
  },
  {
    "task": "Design a function that accepts a command history and reverts the last command. Show the changes with pass-by-reference.",
    "code": "```python\ndef revert_last_command(command_history):\n    if command_history:\n        command_history.pop()\n\n# Example usage:\nhistory = ['command1', 'command2', 'command3']\nrevert_last_command(history)\nprint(history)  # Output should be ['command1', 'command2']\n```"
  },
  {
    "task": "Write a function that takes a user profile and anonymizes it. Discuss how pass-by-reference affects the original profile.",
    "code": "```python\ndef anonymize_profile(profile):\n    profile['name'] = 'Anonymous'\n    profile['email'] = 'hidden@example.com'\n    profile['phone'] = '000-000-0000'\n    return profile\n\nuser_profile = {\n    'name': 'John Doe',\n    'email': 'johndoe@example.com',\n    'phone': '123-456-7890',\n    'age': 30\n}\n\nanonymized_profile = anonymize_profile(user_profile)\n```"
  },
  {
    "task": "Create a function that accepts a polynomial and evaluates it at a given point. Explain how pass-by-value ensures the polynomial remains unchanged.",
    "code": "```python\ndef evaluate_polynomial(polynomial, x):\n    result = 0\n    for i, coeff in enumerate(polynomial):\n        result += coeff * (x ** i)\n    return result\n\n# Example usage:\npolynomial = [2, -3, 0, 1]  # Represents 2 - 3x + 0x^2 + x^3\nx_value = 5\nevaluation = evaluate_polynomial(polynomial, x_value)\nprint(\"Polynomial evaluated at x =\", x_value, \"is\", evaluation)\n```"
  },
  {
    "task": "Implement a function that receives a video stream and applies a filter. Demonstrate the effects of pass-by-reference on the stream.",
    "code": "```python\nimport cv2\n\ndef apply_filter_to_stream(video_stream):\n    while True:\n        ret, frame = video_stream.read()\n        if not ret:\n            break\n        # Apply a simple filter, e.g., converting to grayscale\n        gray_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)\n        # Show the original and the filtered frame\n        cv2.imshow('Original Frame', frame)\n        cv2.imshow('Filtered Frame', gray_frame)\n        if cv2.waitKey(1) & 0xFF == ord('q'):\n            break\n\nvideo_stream = cv2.VideoCapture(0)  # Capture from the webcam\napply_filter_to_stream(video_stream)\nvideo_stream.release()\ncv2.destroyAllWindows()\n```"
  },
  {
    "task": "Develop a function that takes a task queue and reorders tasks based on priority. Illustrate the impact of pass-by-reference.",
    "code": "```python\nfrom collections import deque\n\ndef reorder_tasks_by_priority(task_queue):\n    task_queue.sort(key=lambda task: task['priority'])\n\n# Example usage\ntasks = deque([\n    {'name': 'Task 1', 'priority': 3},\n    {'name': 'Task 2', 'priority': 1},\n    {'name': 'Task 3', 'priority': 2}\n])\n\nreorder_tasks_by_priority(tasks)\n\nfor task in tasks:\n    print(f\"Task: {task['name']}, Priority: {task['priority']}\")\n```"
  },
  {
    "task": "Design a program where a function receives a blockchain and verifies a transaction. Discuss how pass-by-reference affects the blockchain.",
    "code": "```python\nclass Blockchain:\n    def __init__(self):\n        self.chain = []\n\n    def add_block(self, block):\n        self.chain.append(block)\n\n    def __str__(self):\n        return str(self.chain)\n\ndef verify_transaction(blockchain, transaction):\n    for block in blockchain.chain:\n        if transaction in block:\n            return True\n    return False\n\n# Example usage\nblockchain = Blockchain()\nblockchain.add_block(['tx1', 'tx2', 'tx3'])\nblockchain.add_block(['tx4', 'tx5'])\n\ntransaction_to_verify = 'tx3'\nis_verified = verify_transaction(blockchain, transaction_to_verify)\nprint(f\"Transaction {transaction_to_verify} verified: {is_verified}\")\n```"
  },
  {
    "task": "Write a function that takes a game leaderboard and updates scores. Show the changes with pass-by-reference.",
    "code": "```python\ndef update_scores(leaderboard, player, new_score):\n    if player in leaderboard:\n        leaderboard[player] = new_score\n\n# Example usage\nleaderboard = {'Alice': 1500, 'Bob': 3000, 'Charlie': 2000}\nupdate_scores(leaderboard, 'Bob', 3200)\n\n# The leaderboard is updated directly due to pass-by-reference nature of dictionaries\nprint(leaderboard)\n```"
  },
  {
    "task": "Create a function that accepts a project timeline and adjusts for delays. Explain how pass-by-reference influences the timeline.",
    "code": "```python\ndef adjust_timeline_for_delays(timeline, delays):\n    for phase, delay in delays.items():\n        if phase in timeline:\n            timeline[phase] += delay\n\n# Example usage\nproject_timeline = {\n    'Phase 1': 10,\n    'Phase 2': 20,\n    'Phase 3': 30\n}\n\ndelays = {\n    'Phase 1': 2,\n    'Phase 3': 5\n}\n\nadjust_timeline_for_delays(project_timeline, delays)\nprint(project_timeline)\n```"
  },
  {
    "task": "Implement a function that receives a to-do list and completes a task. Demonstrate the effect of pass-by-reference on the list.",
    "code": "```python\ndef complete_task(todo_list, task_index):\n    if 0 <= task_index < len(todo_list):\n        todo_list.pop(task_index)\n\n# Example usage\ntodo_list = ['Buy groceries', 'Call Alice', 'Read a book']\ncomplete_task(todo_list, 1)\n\nprint(todo_list)  # Output should be ['Buy groceries', 'Read a book']\n```"
  },
  {
    "task": "Develop a function that takes a paint canvas and adds a layer. Discuss the impact of pass-by-reference on the canvas.",
    "code": "```python\nclass Canvas:\n    def __init__(self):\n        self.layers = []\n\ndef add_layer(canvas, layer):\n    canvas.layers.append(layer)\n\n# Example usage:\nmy_canvas = Canvas()\nadd_layer(my_canvas, \"New Layer\")\nprint(my_canvas.layers)\n```"
  },
  {
    "task": "Design a function that accepts a URL list and fetches content. Show the difference in the list when using pass-by-value.",
    "code": "```python\nimport requests\n\ndef fetch_urls_pass_by_value(url_list):\n    url_list_copy = url_list[:]\n    for url in url_list_copy:\n        try:\n            response = requests.get(url)\n            print(f\"Fetched content from {url}: {response.text[:100]}...\")\n        except requests.RequestException as e:\n            print(f\"Error fetching {url}: {e}\")\n    print(\"Original list inside function:\", url_list_copy)\n\nurls = [\"https://example.com\", \"https://httpbin.org/get\"]\nfetch_urls_pass_by_value(urls)\nprint(\"Original list after function call:\", urls)\n```"
  },
  {
    "task": "Write a program where a function receives a game board and resets it. Illustrate the effects of pass-by-reference.",
    "code": "```python\ndef reset_board(board):\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            board[i][j] = 0\n\n# Example usage\ngame_board = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\n\nprint(\"Before reset:\")\nprint(game_board)\n\nreset_board(game_board)\n\nprint(\"After reset:\")\nprint(game_board)\n```"
  },
  {
    "task": "Create a function that takes a sound effect and increases its volume. Explain how pass-by-reference affects the original sound.",
    "code": "```python\ndef increase_volume(sound_effect):\n    for i in range(len(sound_effect)):\n        sound_effect[i] *= 2\n\n# Example usage:\noriginal_sound = [0.1, 0.2, 0.3, 0.4]\nincrease_volume(original_sound)\nprint(original_sound)\n```"
  },
  {
    "task": "Implement a function that accepts a weather forecast and updates temperature predictions. Discuss the impact of pass-by-reference.",
    "code": "```python\ndef update_temperature_predictions(forecast):\n    for day in forecast:\n        day['temperature'] += 2\n\nweather_forecast = [\n    {'day': 'Monday', 'temperature': 20},\n    {'day': 'Tuesday', 'temperature': 22},\n    {'day': 'Wednesday', 'temperature': 24}\n]\n\nupdate_temperature_predictions(weather_forecast)\n\nprint(weather_forecast)\n```"
  },
  {
    "task": "Develop a function that receives a system log and extracts error messages. Show how pass-by-value ensures the original log remains unchanged.",
    "code": "```python\ndef extract_error_messages(log):\n    error_messages = []\n    for entry in log:\n        if \"ERROR\" in entry:\n            error_messages.append(entry)\n    return error_messages\n\n# Example Usage\noriginal_log = [\n    \"INFO: System started\",\n    \"WARNING: Low disk space\",\n    \"ERROR: Failed to load module\",\n    \"INFO: Operation completed\",\n    \"ERROR: Network timeout\"\n]\n\n# Pass-by-value: original_log remains unchanged\nerror_log = extract_error_messages(original_log)\n\nprint(\"Original Log:\", original_log)\nprint(\"Extracted Errors:\", error_log)\n```"
  },
  {
    "task": "Design a function that accepts a data packet and encrypts it. Demonstrate the effect of pass-by-value on the packet.",
    "code": "```python\ndef encrypt_packet(packet):\n    encrypted_packet = packet.copy()  # To simulate pass-by-value\n    for i in range(len(encrypted_packet)):\n        encrypted_packet[i] = chr((ord(encrypted_packet[i]) + 1) % 256)\n    return encrypted_packet\n\n# Original data packet\ndata_packet = ['H', 'e', 'l', 'l', 'o']\n\n# Encrypt the packet\nencrypted_packet = encrypt_packet(data_packet)\n\n# Show the original and encrypted packets\nprint(\"Original packet:\", data_packet)\nprint(\"Encrypted packet:\", encrypted_packet)\n```"
  },
  {
    "task": "Write a function that takes a website theme and applies a color change. Explain how pass-by-reference affects the original theme.",
    "code": "```python\nclass Theme:\n    def __init__(self, primary_color, secondary_color):\n        self.primary_color = primary_color\n        self.secondary_color = secondary_color\n\ndef apply_color_change(theme, new_primary_color, new_secondary_color):\n    theme.primary_color = new_primary_color\n    theme.secondary_color = new_secondary_color\n\n# Example usage\noriginal_theme = Theme('blue', 'white')\napply_color_change(original_theme, 'red', 'black')\n\nprint(original_theme.primary_color)  # Output: 'red'\nprint(original_theme.secondary_color)  # Output: 'black'\n```"
  },
  {
    "task": "Create a function that accepts a digital signature and verifies it. Discuss the implications of pass-by-value on the signature.",
    "code": "```python\nimport hmac\nimport hashlib\n\ndef verify_signature(message, signature, secret_key):\n    computed_signature = hmac.new(\n        secret_key.encode(),\n        message.encode(),\n        hashlib.sha256\n    ).hexdigest()\n    \n    return hmac.compare_digest(computed_signature, signature)\n\n# Example usage\nmessage = \"Message to verify\"\nsignature = \"Digital signature to verify\"\nsecret_key = \"SecretKey\"\n\nresult = verify_signature(message, signature, secret_key)\nprint(\"Signature is valid:\", result)\n```"
  },
  {
    "task": "Implement a function that receives a robot's path and optimizes it. Illustrate the effects of pass-by-reference on the path.",
    "code": "```python\ndef optimize_path(path):\n    # Placeholder for optimization logic\n    if len(path) > 2:\n        path.pop(0)\n\ndef main():\n    robot_path = [\"start\", \"move1\", \"move2\", \"end\"]\n    print(\"Original path:\", robot_path)\n    optimize_path(robot_path)\n    print(\"Optimized path:\", robot_path)\n\nif __name__ == \"__main__\":\n    main()\n```"
  },
  {
    "task": "Develop a function that takes a music playlist and shuffles it. Demonstrate the impact of pass-by-reference on the playlist.",
    "code": "```python\nimport random\n\ndef shuffle_playlist(playlist):\n    random.shuffle(playlist)\n\n# Example playlist\nmy_playlist = ['Song1', 'Song2', 'Song3', 'Song4', 'Song5']\n\n# Before shuffling\nprint(\"Original Playlist:\", my_playlist)\n\n# Shuffle the playlist\nshuffle_playlist(my_playlist)\n\n# After shuffling\nprint(\"Shuffled Playlist:\", my_playlist)\n```"
  },
  {
    "task": "Design a program where a function receives a social media feed and removes duplicates. Show the changes with pass-by-reference.",
    "code": "```python\ndef remove_duplicates(feed):\n    seen = set()\n    i = 0\n    while i < len(feed):\n        if feed[i] in seen:\n            feed.pop(i)\n        else:\n            seen.add(feed[i])\n            i += 1\n\n# Example usage\nsocial_media_feed = [\n    \"Post 1\", \"Post 2\", \"Post 3\", \n    \"Post 1\", \"Post 4\", \"Post 2\"\n]\n\nremove_duplicates(social_media_feed)\nprint(social_media_feed)\n```"
  },
  {
    "task": "Write a function that takes a coding challenge and adds test cases. Discuss the effects of pass-by-reference on the challenge.",
    "code": "```python\ndef add_test_cases(challenge):\n    # Define test cases\n    test_cases = [\n        {\"input\": [1, 2, 3], \"expected\": 6},\n        {\"input\": [-1, -2, -3], \"expected\": -6},\n        {\"input\": [0, 0, 0], \"expected\": 0},\n    ]\n\n    # Pass each test case to the challenge\n    for test in test_cases:\n        result = challenge(test[\"input\"])\n        print(f\"Input: {test['input']}, Expected: {test['expected']}, Got: {result}\")\n\ndef example_challenge(numbers):\n    return sum(numbers)\n\nadd_test_cases(example_challenge)\n```"
  },
  {
    "task": "Create a function that accepts an animation sequence and reverses it. Explain how pass-by-value ensures the sequence remains unchanged.",
    "code": "```python\ndef reverse_animation(sequence):\n    reversed_sequence = sequence[::-1]\n    return reversed_sequence\n\n# Example usage\noriginal_sequence = ['frame1', 'frame2', 'frame3', 'frame4']\nreversed_sequence = reverse_animation(original_sequence)\n\nprint(\"Original sequence:\", original_sequence)\nprint(\"Reversed sequence:\", reversed_sequence)\n```"
  },
  {
    "task": "Implement a function that receives a GPS route and recalculates it. Illustrate the impact of pass-by-reference on the route.",
    "code": "```python\ndef recalculate_route(route):\n    # Simulate recalculating the route by modifying its points\n    for index in range(len(route)):\n        route[index] = (route[index][0] + 0.001, route[index][1] + 0.001)\n\n# Example of a GPS route with latitude and longitude\ngps_route = [(34.0522, -118.2437), (34.0523, -118.2436), (34.0524, -118.2435)]\n\nprint(\"Original route:\", gps_route)\n\n# Pass the route to the function which modifies it\nrecalculate_route(gps_route)\n\nprint(\"Recalculated route:\", gps_route)\n```"
  },
  {
    "task": "Develop a function that takes a chat history and censors inappropriate language. Show the effect of pass-by-reference on the history.",
    "code": "```python\ndef censor_language(chat_history, inappropriate_words):\n    def censor_word(word):\n        return '*' * len(word)\n    \n    for i in range(len(chat_history)):\n        words = chat_history[i].split()\n        for j in range(len(words)):\n            if words[j].lower() in inappropriate_words:\n                words[j] = censor_word(words[j])\n        chat_history[i] = ' '.join(words)\n\n# Example usage\nchat_history = [\n    \"This is a bad word\",\n    \"Another inappropriate message\",\n    \"Everything is fine here\"\n]\n\ninappropriate_words = {\"bad\", \"inappropriate\"}\n\ncensor_language(chat_history, inappropriate_words)\n\nprint(chat_history)\n```"
  },
  {
    "task": "Design a function that accepts a lighting setup and adjusts brightness. Discuss the changes when the setup is passed by reference.",
    "code": "```python\nclass LightingSetup:\n    def __init__(self, brightness):\n        self.brightness = brightness\n\ndef adjust_brightness(setup, new_brightness):\n    setup.brightness = new_brightness\n\n# Example usage\nlighting = LightingSetup(brightness=50)\nadjust_brightness(lighting, 75)\nprint(lighting.brightness)  # Output will be 75\n```"
  },
  {
    "task": "Write a program where a function receives a VR environment and changes the scenery. Demonstrate the effects of pass-by-reference.",
    "code": "```python\nclass VREnvironment:\n    def __init__(self, scenery):\n        self.scenery = scenery\n\ndef change_scenery(vr_env, new_scenery):\n    vr_env.scenery = new_scenery\n\n# Initial VR environment\nvr_env = VREnvironment(\"Mountains\")\n\n# Change scenery using pass-by-reference\nchange_scenery(vr_env, \"Beach\")\n\n# Output the changed scenery\nprint(vr_env.scenery)\n```"
  },
  {
    "task": "Create a function that takes a blockchain ledger and adds a block. Explain how pass-by-reference affects the ledger.",
    "code": "```python\ndef add_block_to_ledger(ledger, block):\n    # Adding the block to the ledger\n    ledger.append(block)\n\n# Example usage\nledger = []  # This represents the blockchain ledger\nnew_block = {'transactions': ['tx1', 'tx2'], 'previous_hash': 'abc123'}\n\nadd_block_to_ledger(ledger, new_block)\nprint(ledger)\n```"
  },
  {
    "task": "Implement a function that accepts a network packet and alters its headers. Discuss the implications of pass-by-value on the packet.",
    "code": "```python\ndef alter_packet_headers(packet):\n    modified_packet = packet.copy()  # Create a copy to simulate pass-by-value\n    # Alter the headers\n    modified_packet['header'] = 'new header value'\n    return modified_packet\n\n# Example usage\noriginal_packet = {'header': 'original header', 'data': 'some data'}\nnew_packet = alter_packet_headers(original_packet)\n\nprint(\"Original Packet:\", original_packet)\nprint(\"Modified Packet:\", new_packet)\n```"
  }
]