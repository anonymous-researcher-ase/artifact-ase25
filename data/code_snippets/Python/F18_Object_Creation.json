[
  {
    "task": "Create a new instance of a class that represents a book, with properties for title, author, and ISBN number.",
    "code": "```python\nclass Book:\n    def __init__(self, title, author, isbn):\n        self.title = title\n        self.author = author\n        self.isbn = isbn\n\nnew_book = Book(\"The Great Gatsby\", \"F. Scott Fitzgerald\", \"978-0743273565\")\n```"
  },
  {
    "task": "Instantiate an object of a class named Car, and set its make, model, and year attributes.",
    "code": "```python\nclass Car:\n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year\n\nmy_car = Car('Toyota', 'Corolla', 2020)\n```"
  },
  {
    "task": "Develop a class to represent a rectangle, then create an object with specific width and height.",
    "code": "```python\nclass Rectangle:\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n\nrectangle = Rectangle(10, 5)\n```"
  },
  {
    "task": "Construct an object of a class Person, initializing it with a name and age.",
    "code": "```python\nclass Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\nperson = Person(\"Alice\", 30)\n```"
  },
  {
    "task": "Create a new object from a class called Circle, initializing it with a radius value.",
    "code": "```python\nclass Circle:\n    def __init__(self, radius):\n        self.radius = radius\n\n# Create a new object from the Circle class\ncircle_object = Circle(5)\n```"
  },
  {
    "task": "Instantiate a class named Student with properties for name, student ID, and GPA.",
    "code": "```python\nclass Student:\n    def __init__(self, name, student_id, gpa):\n        self.name = name\n        self.student_id = student_id\n        self.gpa = gpa\n\n# Example instantiation\nstudent = Student(\"John Doe\", \"123456\", 3.5)\n```"
  },
  {
    "task": "Design a class for a smartphone, then create an instance with specific brand, model, and storage capacity.",
    "code": "```python\nclass Smartphone:\n    def __init__(self, brand, model, storage_capacity):\n        self.brand = brand\n        self.model = model\n        self.storage_capacity = storage_capacity\n\nsmartphone_instance = Smartphone(\"Apple\", \"iPhone 14\", \"256GB\")\n```"
  },
  {
    "task": "Create an object of a class named BankAccount, initializing it with an account number and balance.",
    "code": "```python\nclass BankAccount:\n    def __init__(self, account_number, balance):\n        self.account_number = account_number\n        self.balance = balance\n\n# Object creation\naccount = BankAccount('123456789', 1000.0)\n```"
  },
  {
    "task": "Write a class for a movie, then instantiate it with a title, director, and release year.",
    "code": "```python\nclass Movie:\n    def __init__(self, title, director, release_year):\n        self.title = title\n        self.director = director\n        self.release_year = release_year\n\nmovie_instance = Movie(\"Inception\", \"Christopher Nolan\", 2010)\n```"
  },
  {
    "task": "Define a class representing a point in 2D space and create an object with x and y coordinates.",
    "code": "```python\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\npoint = Point(3, 4)\n```"
  },
  {
    "task": "Create an instance of a class called Computer with attributes for CPU, RAM, and storage.",
    "code": "```python\nclass Computer:\n    def __init__(self, cpu, ram, storage):\n        self.cpu = cpu\n        self.ram = ram\n        self.storage = storage\n\nmy_computer = Computer(cpu='Intel i7', ram='16GB', storage='512GB SSD')\n```"
  },
  {
    "task": "Design a class for a Song with properties for title, artist, and duration, and instantiate it.",
    "code": "```python\nclass Song:\n    def __init__(self, title, artist, duration):\n        self.title = title\n        self.artist = artist\n        self.duration = duration\n\n# Example instantiation\nsong = Song(\"Imagine\", \"John Lennon\", 183)\n```"
  },
  {
    "task": "Create a new instance of a class named Pet, initializing it with type, breed, and age.",
    "code": "```python\nclass Pet:\n    def __init__(self, type, breed, age):\n        self.type = type\n        self.breed = breed\n        self.age = age\n\nnew_pet = Pet(\"Dog\", \"Labrador\", 3)\n```"
  },
  {
    "task": "Instantiate an object of a class named House with attributes for address, number of bedrooms, and price.",
    "code": "```python\nclass House:\n    def __init__(self, address, number_of_bedrooms, price):\n        self.address = address\n        self.number_of_bedrooms = number_of_bedrooms\n        self.price = price\n\nhouse_instance = House(\"123 Main St\", 3, 250000)\n```"
  },
  {
    "task": "Develop a class for a Camera, then create an object with resolution and zoom level attributes.",
    "code": "```python\nclass Camera:\n    def __init__(self, resolution, zoom_level):\n        self.resolution = resolution\n        self.zoom_level = zoom_level\n\ncamera = Camera(\"1080p\", 5)\n```"
  },
  {
    "task": "Construct an object from a class named Bicycle with properties for brand, type, and gear count.",
    "code": "```python\nclass Bicycle:\n    def __init__(self, brand, type, gear_count):\n        self.brand = brand\n        self.type = type\n        self.gear_count = gear_count\n\nbicycle = Bicycle(\"Trek\", \"Mountain\", 21)\n```"
  },
  {
    "task": "Create a class for a book author with name and nationality, then instantiate it.",
    "code": "```python\nclass Author:\n    def __init__(self, name, nationality):\n        self.name = name\n        self.nationality = nationality\n\nauthor_instance = Author(\"Name\", \"Nationality\")\n```"
  },
  {
    "task": "Define a class representing a video game with attributes for title, genre, and platform, and create an object.",
    "code": "```python\nclass VideoGame:\n    def __init__(self, title, genre, platform):\n        self.title = title\n        self.genre = genre\n        self.platform = platform\n\ngame = VideoGame(\"The Legend of Zelda\", \"Action-Adventure\", \"Nintendo Switch\")\n```"
  },
  {
    "task": "Instantiate a class named Plane with properties for airline, model, and capacity.",
    "code": "```python\nclass Plane:\n    def __init__(self, airline, model, capacity):\n        self.airline = airline\n        self.model = model\n        self.capacity = capacity\n\n# Example of object creation\nplane_instance = Plane(\"Delta\", \"Boeing 747\", 416)\n```"
  },
  {
    "task": "Create a new object of a class called Lamp, initializing it with color and brightness level.",
    "code": "```python\nclass Lamp:\n    def __init__(self, color, brightness):\n        self.color = color\n        self.brightness = brightness\n\n# Object creation\nnew_lamp = Lamp(color=\"blue\", brightness=75)\n```"
  },
  {
    "task": "Design a class for a TV show with properties for title, season, and episode count, then instantiate it.",
    "code": "```python\nclass TVShow:\n    def __init__(self, title, season, episode_count):\n        self.title = title\n        self.season = season\n        self.episode_count = episode_count\n\n# Example instantiation\ntv_show = TVShow(\"Example Show\", 1, 10)\n```"
  },
  {
    "task": "Instantiate an object of a class named Garden with attributes for size and number of plants.",
    "code": "```python\nclass Garden:\n    def __init__(self, size, number_of_plants):\n        self.size = size\n        self.number_of_plants = number_of_plants\n\ngarden = Garden(size=100, number_of_plants=50)\n```"
  },
  {
    "task": "Develop a class for a Train, then create an object with properties for type and number of carriages.",
    "code": "```python\nclass Train:\n    def __init__(self, train_type, number_of_carriages):\n        self.train_type = train_type\n        self.number_of_carriages = number_of_carriages\n\ntrain_object = Train(\"Freight\", 20)\n```"
  },
  {
    "task": "Define a class representing a planet with attributes for name, size, and distance from the sun, and create an object.",
    "code": "```python\nclass Planet:\n    def __init__(self, name, size, distance_from_sun):\n        self.name = name\n        self.size = size\n        self.distance_from_sun = distance_from_sun\n\nearth = Planet(\"Earth\", \"Medium\", 93)\n```"
  },
  {
    "task": "Create an instance of a class named Fridge with properties for brand and capacity.",
    "code": "```python\nclass Fridge:\n    def __init__(self, brand, capacity):\n        self.brand = brand\n        self.capacity = capacity\n\nfridge_instance = Fridge(brand=\"Samsung\", capacity=300)\n```"
  },
  {
    "task": "Design a class for a Restaurant with attributes for name, cuisine type, and location, then create an instance.",
    "code": "```python\nclass Restaurant:\n    def __init__(self, name, cuisine_type, location):\n        self.name = name\n        self.cuisine_type = cuisine_type\n        self.location = location\n\nrestaurant_instance = Restaurant(\"Gourmet Haven\", \"French\", \"Paris\")\n```"
  },
  {
    "task": "Create a new object from a class named Bookstore, initializing it with name and number of books.",
    "code": "```python\nclass Bookstore:\n    def __init__(self, name, number_of_books):\n        self.name = name\n        self.number_of_books = number_of_books\n\nbookstore_instance = Bookstore(\"Example Bookstore\", 1000)\n```"
  },
  {
    "task": "Instantiate a class named Library with properties for total books and number of members.",
    "code": "```python\nclass Library:\n    def __init__(self, total_books, number_of_members):\n        self.total_books = total_books\n        self.number_of_members = number_of_members\n\nlibrary_instance = Library(total_books=1000, number_of_members=250)\n```"
  },
  {
    "task": "Write a class for a Beverage with properties for name, type, and volume, and instantiate it.",
    "code": "```python\nclass Beverage:\n    def __init__(self, name, beverage_type, volume):\n        self.name = name\n        self.beverage_type = beverage_type\n        self.volume = volume\n\n# Instantiation\nbeverage = Beverage(\"Cola\", \"Soda\", 330)\n```"
  },
  {
    "task": "Create an object of a class named User with attributes for username, email, and password.",
    "code": "```python\nclass User:\n    def __init__(self, username, email, password):\n        self.username = username\n        self.email = email\n        self.password = password\n\nuser_object = User(username=\"example_user\", email=\"user@example.com\", password=\"securepassword\")\n```"
  },
  {
    "task": "Define a class for a Laptop with properties for brand, processor, and RAM, then instantiate it.",
    "code": "```python\nclass Laptop:\n    def __init__(self, brand, processor, ram):\n        self.brand = brand\n        self.processor = processor\n        self.ram = ram\n\nlaptop_instance = Laptop(\"Dell\", \"Intel i7\", \"16GB\")\n```"
  },
  {
    "task": "Construct an object from a class named Mountain with attributes for name and elevation.",
    "code": "```python\nclass Mountain:\n    def __init__(self, name, elevation):\n        self.name = name\n        self.elevation = elevation\n\n# Example of creating an object from the Mountain class\nmount_everest = Mountain(\"Mount Everest\", 8848)\n```"
  },
  {
    "task": "Create an instance of a class called Weather with properties for temperature, humidity, and condition.",
    "code": "```python\nclass Weather:\n    def __init__(self, temperature, humidity, condition):\n        self.temperature = temperature\n        self.humidity = humidity\n        self.condition = condition\n\nweather_instance = Weather(temperature=25, humidity=60, condition='Sunny')\n```"
  },
  {
    "task": "Design a class for a Classroom with attributes for room number and capacity, then create an instance.",
    "code": "```python\nclass Classroom:\n    def __init__(self, room_number, capacity):\n        self.room_number = room_number\n        self.capacity = capacity\n\n# Create an instance of the Classroom\nclassroom_instance = Classroom(room_number=101, capacity=30)\n```"
  },
  {
    "task": "Instantiate an object of a class named Zoo with properties for name and number of animals.",
    "code": "```python\nclass Zoo:\n    def __init__(self, name, number_of_animals):\n        self.name = name\n        self.number_of_animals = number_of_animals\n\n# Object creation\nzoo_instance = Zoo(\"Wildlife Park\", 150)\n```"
  },
  {
    "task": "Develop a class for an Album with properties for name, artist, and release date, then instantiate it.",
    "code": "```python\nclass Album:\n    def __init__(self, name, artist, release_date):\n        self.name = name\n        self.artist = artist\n        self.release_date = release_date\n\n# Instantiate an Album object\nalbum = Album(name=\"Thriller\", artist=\"Michael Jackson\", release_date=\"1982-11-30\")\n```"
  },
  {
    "task": "Create a new object from a class named Hotel, initializing it with name, location, and star rating.",
    "code": "```python\nclass Hotel:\n    def __init__(self, name, location, star_rating):\n        self.name = name\n        self.location = location\n        self.star_rating = star_rating\n\n# Create a new object\nhotel_instance = Hotel(\"Grand Plaza\", \"New York\", 5)\n```"
  },
  {
    "task": "Write a class for a Recipe with properties for name, ingredients, and cooking time, and instantiate it.",
    "code": "```python\nclass Recipe:\n    def __init__(self, name, ingredients, cooking_time):\n        self.name = name\n        self.ingredients = ingredients\n        self.cooking_time = cooking_time\n\nrecipe = Recipe(\"Pasta\", [\"pasta\", \"tomato sauce\", \"cheese\"], 30)\n```"
  },
  {
    "task": "Define a class representing a Conference with attributes for name, date, and number of attendees, and create an object.",
    "code": "```python\nclass Conference:\n    def __init__(self, name, date, attendees):\n        self.name = name\n        self.date = date\n        self.attendees = attendees\n\nconference_object = Conference(\"Tech Summit\", \"2023-11-15\", 250)\n```"
  },
  {
    "task": "Create an instance of a class called Park with properties for name, location, and area.",
    "code": "```python\nclass Park:\n    def __init__(self, name, location, area):\n        self.name = name\n        self.location = location\n        self.area = area\n\npark_instance = Park(\"Central Park\", \"New York\", 843)\n```"
  },
  {
    "task": "Design a class for a Bicycle with attributes for brand, type, and wheel size, then create an instance.",
    "code": "```python\nclass Bicycle:\n    def __init__(self, brand, bike_type, wheel_size):\n        self.brand = brand\n        self.bike_type = bike_type\n        self.wheel_size = wheel_size\n\n# Creating an instance of Bicycle\nbicycle_instance = Bicycle(\"Giant\", \"Mountain\", 29)\n```"
  },
  {
    "task": "Instantiate an object of a class named Festival with properties for name, location, and duration.",
    "code": "```python\nclass Festival:\n    def __init__(self, name, location, duration):\n        self.name = name\n        self.location = location\n        self.duration = duration\n\nfestival_instance = Festival(\"Glastonbury\", \"Somerset\", \"5 days\")\n```"
  },
  {
    "task": "Develop a class for a Ship with properties for name, capacity, and type, then instantiate it.",
    "code": "```python\nclass Ship:\n    def __init__(self, name, capacity, ship_type):\n        self.name = name\n        self.capacity = capacity\n        self.ship_type = ship_type\n\n# Instantiate the Ship class\nship_instance = Ship(\"Titanic\", 3000, \"Cruise\")\n```"
  },
  {
    "task": "Create an object of a class named Currency with attributes for name, symbol, and exchange rate.",
    "code": "```python\nclass Currency:\n    def __init__(self, name, symbol, exchange_rate):\n        self.name = name\n        self.symbol = symbol\n        self.exchange_rate = exchange_rate\n\ncurrency_object = Currency(\"US Dollar\", \"$\", 1.0)\n```"
  },
  {
    "task": "Define a class for a Gadget with properties for name, brand, and functionality, then instantiate it.",
    "code": "```python\nclass Gadget:\n    def __init__(self, name, brand, functionality):\n        self.name = name\n        self.brand = brand\n        self.functionality = functionality\n\ngadget = Gadget(name=\"Smartphone\", brand=\"TechBrand\", functionality=\"Communication\")\n```"
  },
  {
    "task": "Construct an object from a class named Bridge with attributes for name, length, and location.",
    "code": "```python\nclass Bridge:\n    def __init__(self, name, length, location):\n        self.name = name\n        self.length = length\n        self.location = location\n\n# Example of creating a Bridge object\nbridge = Bridge(name=\"Golden Gate\", length=2737, location=\"San Francisco, CA\")\n```"
  },
  {
    "task": "Create an instance of a class called Forest with properties for name, area, and tree species.",
    "code": "```python\nclass Forest:\n    def __init__(self, name, area, tree_species):\n        self.name = name\n        self.area = area\n        self.tree_species = tree_species\n\n# Create an instance of the Forest class\nforest_instance = Forest(name=\"Amazon\", area=5500000, tree_species=[\"Cecropia\", \"Rubber Tree\", \"Brazil Nut\"])\n```"
  },
  {
    "task": "Design a class for a Sculpture with attributes for title, artist, and material, then create an instance.",
    "code": "```python\nclass Sculpture:\n    def __init__(self, title, artist, material):\n        self.title = title\n        self.artist = artist\n        self.material = material\n\nsculpture_instance = Sculpture(\"The Thinker\", \"Auguste Rodin\", \"Bronze\")\n```"
  },
  {
    "task": "Instantiate an object of a class named Aquarium with properties for name and number of tanks.",
    "code": "```python\nclass Aquarium:\n    def __init__(self, name, number_of_tanks):\n        self.name = name\n        self.number_of_tanks = number_of_tanks\n\n# Create an instance of the Aquarium class\naquarium = Aquarium(name=\"Sea World\", number_of_tanks=5)\n```"
  },
  {
    "task": "Develop a class for a Play with properties for title, playwright, and genre, then instantiate it.",
    "code": "```python\nclass Play:\n    def __init__(self, title, playwright, genre):\n        self.title = title\n        self.playwright = playwright\n        self.genre = genre\n\n# Example instantiation\nplay_instance = Play(\"Hamlet\", \"William Shakespeare\", \"Tragedy\")\n```"
  },
  {
    "task": "Create a new object from a class named Telescope, initializing it with type and focal length.",
    "code": "```python\nclass Telescope:\n    def __init__(self, type, focal_length):\n        self.type = type\n        self.focal_length = focal_length\n\n# Creating a new object from the class Telescope\ntelescope_instance = Telescope(\"Refractor\", 700)\n```"
  },
  {
    "task": "Write a class for a Monument with properties for name, location, and year built, and instantiate it.",
    "code": "```python\nclass Monument:\n    def __init__(self, name, location, year_built):\n        self.name = name\n        self.location = location\n        self.year_built = year_built\n\nmonument_instance = Monument(\"Eiffel Tower\", \"Paris\", 1889)\n```"
  },
  {
    "task": "Define a class representing a Star with attributes for name, size, and distance from Earth, and create an object.",
    "code": "```python\nclass Star:\n    def __init__(self, name, size, distance_from_earth):\n        self.name = name\n        self.size = size\n        self.distance_from_earth = distance_from_earth\n\nstar_object = Star(\"Sirius\", \"Large\", 8.6)\n```"
  },
  {
    "task": "Create an instance of a class called Festival with properties for name, location, and number of events.",
    "code": "```python\nclass Festival:\n    def __init__(self, name, location, number_of_events):\n        self.name = name\n        self.location = location\n        self.number_of_events = number_of_events\n\n# Creating an instance of the Festival class\nfestival_instance = Festival(\"Summer Fest\", \"New York\", 25)\n```"
  },
  {
    "task": "Design a class for a Clock with attributes for brand, type, and display, then create an instance.",
    "code": "```python\nclass Clock:\n    def __init__(self, brand, type, display):\n        self.brand = brand\n        self.type = type\n        self.display = display\n\nclock_instance = Clock(\"Seiko\", \"Analog\", \"Digital\")\n```"
  },
  {
    "task": "Instantiate an object of a class named Stadium with properties for name, capacity, and location.",
    "code": "```python\nclass Stadium:\n    def __init__(self, name, capacity, location):\n        self.name = name\n        self.capacity = capacity\n        self.location = location\n\nstadium = Stadium(name=\"National Stadium\", capacity=80000, location=\"City Center\")\n```"
  },
  {
    "task": "Develop a class for a Potion with properties for name, effect, and duration, then instantiate it.",
    "code": "```python\nclass Potion:\n    def __init__(self, name, effect, duration):\n        self.name = name\n        self.effect = effect\n        self.duration = duration\n\n# Creating an instance of the Potion class\npotion_instance = Potion(name=\"Healing Potion\", effect=\"Restores Health\", duration=5)\n```"
  },
  {
    "task": "Create an object of a class named Planet with attributes for name, mass, and orbital period.",
    "code": "```python\nclass Planet:\n    def __init__(self, name, mass, orbital_period):\n        self.name = name\n        self.mass = mass\n        self.orbital_period = orbital_period\n\n# Example of creating an object of the class Planet\nearth = Planet(\"Earth\", 5.972e24, 365.25)\n```"
  },
  {
    "task": "Define a class for a Lighthouse with properties for name, height, and light range, then instantiate it.",
    "code": "```python\nclass Lighthouse:\n    def __init__(self, name, height, light_range):\n        self.name = name\n        self.height = height\n        self.light_range = light_range\n\nlighthouse_instance = Lighthouse(\"Beacon\", 50, 20)\n```"
  },
  {
    "task": "Construct an object from a class named Volcano with attributes for name, height, and eruption history.",
    "code": "```python\nclass Volcano:\n    def __init__(self, name, height, eruption_history):\n        self.name = name\n        self.height = height\n        self.eruption_history = eruption_history\n\n# Example of creating a Volcano object\nvolcano = Volcano(\"Mount Fuji\", 3776, [\"1707\", \"864\", \"1033\"])\n```"
  },
  {
    "task": "Create an instance of a class called Sculpture with properties for title, artist, and year created.",
    "code": "```python\nclass Sculpture:\n    def __init__(self, title, artist, year_created):\n        self.title = title\n        self.artist = artist\n        self.year_created = year_created\n\nsculpture_instance = Sculpture(\"The Thinker\", \"Auguste Rodin\", 1902)\n```"
  },
  {
    "task": "Design a class for a Ship with attributes for name, type, and displacement, then create an instance.",
    "code": "```python\nclass Ship:\n    def __init__(self, name, type, displacement):\n        self.name = name\n        self.type = type\n        self.displacement = displacement\n\n# Create an instance of the Ship class\nship_instance = Ship(\"Titanic\", \"Cruise\", 52310)\n```"
  },
  {
    "task": "Instantiate an object of a class named Opera with properties for title, composer, and act count.",
    "code": "```python\nclass Opera:\n    def __init__(self, title, composer, act_count):\n        self.title = title\n        self.composer = composer\n        self.act_count = act_count\n\nopera_instance = Opera(title=\"La Traviata\", composer=\"Giuseppe Verdi\", act_count=3)\n```"
  },
  {
    "task": "Develop a class for a Waterfall with properties for name, height, and flow rate, then instantiate it.",
    "code": "```python\nclass Waterfall:\n    def __init__(self, name, height, flow_rate):\n        self.name = name\n        self.height = height\n        self.flow_rate = flow_rate\n\n# Instantiate the Waterfall class\nwaterfall_instance = Waterfall(\"Niagara\", 51, 2800)\n```"
  },
  {
    "task": "Create a new object from a class named Castle, initializing it with name, location, and year built.",
    "code": "```python\nclass Castle:\n    def __init__(self, name, location, year_built):\n        self.name = name\n        self.location = location\n        self.year_built = year_built\n\ncastle_instance = Castle(\"Windsor Castle\", \"Windsor, England\", 1070)\n```"
  },
  {
    "task": "Write a class for a Cat with properties for name, breed, and color, and instantiate it.",
    "code": "```python\nclass Cat:\n    def __init__(self, name, breed, color):\n        self.name = name\n        self.breed = breed\n        self.color = color\n\nmy_cat = Cat(name=\"Whiskers\", breed=\"Siamese\", color=\"Gray\")\n```"
  },
  {
    "task": "Define a class representing a Spaceship with attributes for name, speed, and crew capacity, and create an object.",
    "code": "```python\nclass Spaceship:\n    def __init__(self, name, speed, crew_capacity):\n        self.name = name\n        self.speed = speed\n        self.crew_capacity = crew_capacity\n\nspaceship = Spaceship(\"Galactic Voyager\", 50000, 10)\n```"
  },
  {
    "task": "Create an instance of a class called Robot with properties for name, model, and function.",
    "code": "```python\nclass Robot:\n    def __init__(self, name, model, function):\n        self.name = name\n        self.model = model\n        self.function = function\n\nrobot_instance = Robot(name=\"Robo1\", model=\"XJ220\", function=\"Industrial Automation\")\n```"
  },
  {
    "task": "Design a class for a Computer Program with attributes for name, language, and lines of code, then create an instance.",
    "code": "```python\nclass ComputerProgram:\n    def __init__(self, name, language, lines_of_code):\n        self.name = name\n        self.language = language\n        self.lines_of_code = lines_of_code\n\n# Create an instance of the ComputerProgram class\nprogram_instance = ComputerProgram(\"Example Program\", \"Python\", 1500)\n```"
  },
  {
    "task": "Instantiate an object of a class named Mountain with properties for name, range, and prominence.",
    "code": "```python\nclass Mountain:\n    def __init__(self, name, range, prominence):\n        self.name = name\n        self.range = range\n        self.prominence = prominence\n\n# Example instantiation\nmountain_instance = Mountain(\"Everest\", \"Himalayas\", 8848)\n```"
  },
  {
    "task": "Develop a class for a Painting with properties for title, artist, and dimensions, then instantiate it.",
    "code": "```python\nclass Painting:\n    def __init__(self, title, artist, dimensions):\n        self.title = title\n        self.artist = artist\n        self.dimensions = dimensions\n\n# Instantiate the Painting class\npainting = Painting(\"Starry Night\", \"Vincent van Gogh\", \"73.7 cm \u00d7 92.1 cm\")\n```"
  },
  {
    "task": "Create an object of a class named Symphony with attributes for title, composer, and movement count.",
    "code": "```python\nclass Symphony:\n    def __init__(self, title, composer, movement_count):\n        self.title = title\n        self.composer = composer\n        self.movement_count = movement_count\n\nsymphony_obj = Symphony(\"Symphony No. 9\", \"Ludwig van Beethoven\", 4)\n```"
  },
  {
    "task": "Define a class for a Dinosaur with properties for name, period, and diet, then instantiate it.",
    "code": "```python\nclass Dinosaur:\n    def __init__(self, name, period, diet):\n        self.name = name\n        self.period = period\n        self.diet = diet\n\ndino = Dinosaur(\"Tyrannosaurus Rex\", \"Cretaceous\", \"Carnivore\")\n```"
  },
  {
    "task": "Construct an object from a class named River with attributes for name, length, and basin size.",
    "code": "```python\nclass River:\n    def __init__(self, name, length, basin_size):\n        self.name = name\n        self.length = length\n        self.basin_size = basin_size\n\n# Example of object creation\nriver_instance = River(\"Amazon\", 6400, 7050000)\n```"
  },
  {
    "task": "Create an instance of a class called Instrument with properties for name, type, and material.",
    "code": "```python\nclass Instrument:\n    def __init__(self, name, type, material):\n        self.name = name\n        self.type = type\n        self.material = material\n\ninstrument_instance = Instrument(name=\"Guitar\", type=\"String\", material=\"Wood\")\n```"
  },
  {
    "task": "Design a class for a Planetarium with attributes for name, location, and dome size, then create an instance.",
    "code": "```python\nclass Planetarium:\n    def __init__(self, name, location, dome_size):\n        self.name = name\n        self.location = location\n        self.dome_size = dome_size\n\nplanetarium_instance = Planetarium(\"Starlight Planetarium\", \"New York\", \"30 meters\")\n```"
  },
  {
    "task": "Instantiate an object of a class named Island with properties for name, area, and population.",
    "code": "```python\nclass Island:\n    def __init__(self, name, area, population):\n        self.name = name\n        self.area = area\n        self.population = population\n\nisland_instance = Island(name=\"Paradise Island\", area=1200, population=5000)\n```"
  },
  {
    "task": "Develop a class for a Space Station with properties for name, crew size, and modules, then instantiate it.",
    "code": "```python\nclass SpaceStation:\n    def __init__(self, name, crew_size, modules):\n        self.name = name\n        self.crew_size = crew_size\n        self.modules = modules\n\n# Example instantiation\nspace_station = SpaceStation(\"International Space Station\", 6, [\"Living Module\", \"Laboratory Module\", \"Habitation Module\"])\n```"
  },
  {
    "task": "Create a new object from a class named Dinosaur, initializing it with species and period.",
    "code": "```python\nclass Dinosaur:\n    def __init__(self, species, period):\n        self.species = species\n        self.period = period\n\nnew_dinosaur = Dinosaur(\"Tyrannosaurus Rex\", \"Cretaceous\")\n```"
  },
  {
    "task": "Write a class for a Tree with properties for species, height, and age, and instantiate it.",
    "code": "```python\nclass Tree:\n    def __init__(self, species, height, age):\n        self.species = species\n        self.height = height\n        self.age = age\n\n# Instantiating the Tree object\ntree_instance = Tree(\"Oak\", 20, 100)\n```"
  },
  {
    "task": "Define a class representing a Firework with attributes for name, color, and duration, and create an object.",
    "code": "```python\nclass Firework:\n    def __init__(self, name, color, duration):\n        self.name = name\n        self.color = color\n        self.duration = duration\n\n# Create an object of Firework\nfirework = Firework(\"Sparkler\", \"Red\", 10)\n```"
  },
  {
    "task": "Create an instance of a class called ComicBook with properties for title, author, and issue number.",
    "code": "```python\nclass ComicBook:\n    def __init__(self, title, author, issue_number):\n        self.title = title\n        self.author = author\n        self.issue_number = issue_number\n\ncomic_book_instance = ComicBook(title=\"Example Title\", author=\"Example Author\", issue_number=1)\n```"
  },
  {
    "task": "Design a class for a Metropolis with attributes for name, population, and GDP, then create an instance.",
    "code": "```python\nclass Metropolis:\n    def __init__(self, name, population, gdp):\n        self.name = name\n        self.population = population\n        self.gdp = gdp\n\nmetropolis_instance = Metropolis(\"New York\", 8419000, 1480000)\n```"
  },
  {
    "task": "Instantiate an object of a class named Dragon with properties for name, element, and age.",
    "code": "```python\nclass Dragon:\n    def __init__(self, name, element, age):\n        self.name = name\n        self.element = element\n        self.age = age\n\n# Creating an object of the Dragon class\ndragon = Dragon(name=\"Smaug\", element=\"Fire\", age=300)\n```"
  },
  {
    "task": "Develop a class for a Novel with properties for title, author, and genre, then instantiate it.",
    "code": "```python\nclass Novel:\n    def __init__(self, title, author, genre):\n        self.title = title\n        self.author = author\n        self.genre = genre\n\n# Instantiate the class\nnovel_instance = Novel(\"1984\", \"George Orwell\", \"Dystopian\")\n```"
  },
  {
    "task": "Create an object of a class named Satellite with attributes for name, orbit, and mission.",
    "code": "```python\nclass Satellite:\n    def __init__(self, name, orbit, mission):\n        self.name = name\n        self.orbit = orbit\n        self.mission = mission\n\nsatellite = Satellite(name=\"Hubble\", orbit=\"Low Earth Orbit\", mission=\"Astronomy\")\n```"
  },
  {
    "task": "Define a class for a Castle with properties for name, location, and architectural style, then instantiate it.",
    "code": "```python\nclass Castle:\n    def __init__(self, name, location, architectural_style):\n        self.name = name\n        self.location = location\n        self.architectural_style = architectural_style\n\ncastle_instance = Castle(\"Windsor Castle\", \"Windsor, England\", \"Georgian\")\n```"
  },
  {
    "task": "Construct an object from a class named Jungle with attributes for name, area, and biodiversity.",
    "code": "```python\nclass Jungle:\n    def __init__(self, name, area, biodiversity):\n        self.name = name\n        self.area = area\n        self.biodiversity = biodiversity\n\njungle_object = Jungle(name=\"Amazon\", area=5500000, biodiversity=\"High\")\n```"
  },
  {
    "task": "Create an instance of a class called Dinosaur with properties for species, size, and diet.",
    "code": "```python\nclass Dinosaur:\n    def __init__(self, species, size, diet):\n        self.species = species\n        self.size = size\n        self.diet = diet\n\n# Create an instance of the Dinosaur class\ndino = Dinosaur(species='Tyrannosaurus Rex', size='Large', diet='Carnivore')\n```"
  },
  {
    "task": "Design a class for a Superhero with attributes for name, powers, and alias, then create an instance.",
    "code": "```python\nclass Superhero:\n    def __init__(self, name, powers, alias):\n        self.name = name\n        self.powers = powers\n        self.alias = alias\n\nsuperhero_instance = Superhero(\"Clark Kent\", [\"Super Strength\", \"Flight\", \"X-ray Vision\"], \"Superman\")\n```"
  }
]