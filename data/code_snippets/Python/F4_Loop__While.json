[
  {
    "task": "Create a program that continuously asks the user to enter a number until they input a negative number.",
    "code": "```python\nwhile True:\n    number = float(input(\"Enter a number: \"))\n    if number < 0:\n        break\n```"
  },
  {
    "task": "Write a function that doubles a number and repeats the process until the number is greater than 1000.",
    "code": "```python\ndef double_until_greater_than_1000(number):\n    while number <= 1000:\n        number *= 2\n    return number\n```"
  },
  {
    "task": "Develop a routine to keep printing 'Hello, World!' until a counter reaches 10.",
    "code": "```python\ncounter = 0\nwhile counter < 10:\n    print(\"Hello, World!\")\n    counter += 1\n```"
  },
  {
    "task": "Construct a loop that checks if a randomly generated number is even, repeating until an odd number is found.",
    "code": "```python\nimport random\n\nnumber = random.randint(1, 100)\nwhile number % 2 == 0:\n    number = random.randint(1, 100)\n```"
  },
  {
    "task": "Design a countdown timer that prints each second until it reaches zero.",
    "code": "```python\nimport time\n\ndef countdown_timer(seconds):\n    while seconds >= 0:\n        print(seconds)\n        time.sleep(1)\n        seconds -= 1\n\n# Example usage\ncountdown_timer(10)\n```"
  },
  {
    "task": "Implement a system where a user can keep adding items to a list until they type 'stop'.",
    "code": "```python\nitems = []\nwhile True:\n    item = input(\"Enter an item (or type 'stop' to finish): \")\n    if item.lower() == 'stop':\n        break\n    items.append(item)\n```"
  },
  {
    "task": "Write a script that simulates rolling a die and continues until a six is rolled.",
    "code": "```python\nimport random\n\nroll = 0\nwhile roll != 6:\n    roll = random.randint(1, 6)\n    print(f\"Rolled: {roll}\")\n```"
  },
  {
    "task": "Create a program that asks for a password and keeps prompting until the correct password is entered.",
    "code": "```python\ncorrect_password = \"secret123\"\npassword = \"\"\n\nwhile password != correct_password:\n    password = input(\"Enter the password: \")\n```"
  },
  {
    "task": "Design a loop that calculates the sum of entered numbers until the user enters zero.",
    "code": "```python\ntotal_sum = 0\nnumber = int(input(\"Enter a number (0 to stop): \"))\n\nwhile number != 0:\n    total_sum += number\n    number = int(input(\"Enter a number (0 to stop): \"))\n\nprint(\"The total sum is:\", total_sum)\n```"
  },
  {
    "task": "Implement a feature that prints Fibonacci numbers until a number exceeds 100.",
    "code": "```python\na, b = 0, 1\nwhile a <= 100:\n    print(a)\n    a, b = b, a + b\n```"
  },
  {
    "task": "Develop a loop that keeps halving a number until it becomes less than one.",
    "code": "```python\nnumber = 10  # Example starting number\nwhile number >= 1:\n    number /= 2\n```"
  },
  {
    "task": "Write a program that asks for names and keeps storing them until the user enters 'done'.",
    "code": "```python\nnames = []\nwhile True:\n    name = input(\"Enter a name (or 'done' to finish): \")\n    if name.lower() == 'done':\n        break\n    names.append(name)\n```"
  },
  {
    "task": "Create a process that keeps flipping a coin, recording results until there have been five heads.",
    "code": "```python\nimport random\n\nheads_count = 0\nresults = []\n\nwhile heads_count < 5:\n    flip = random.choice(['heads', 'tails'])\n    results.append(flip)\n    if flip == 'heads':\n        heads_count += 1\n```"
  },
  {
    "task": "Implement a countdown that decreases by two each time, starting from 20, until it reaches zero.",
    "code": "```python\ncount = 20\nwhile count >= 0:\n    print(count)\n    count -= 2\n```"
  },
  {
    "task": "Design a solution that repeatedly asks for user input and repeats it back until they type 'exit'.",
    "code": "```python\nwhile True:\n    user_input = input(\"Enter something: \")\n    if user_input.lower() == 'exit':\n        break\n    print(user_input)\n```"
  },
  {
    "task": "Develop a loop to simulate a bank account balance, repeatedly deducting a fee until the balance is below zero.",
    "code": "```python\nbalance = 100  # Example initial balance\nfee = 10       # Example fee amount\n\nwhile balance >= 0:\n    balance -= fee\n```"
  },
  {
    "task": "Create a sequence generator that multiplies a number by three each time until it reaches or exceeds 100.",
    "code": "```python\ndef sequence_generator(start):\n    while start < 100:\n        print(start)\n        start *= 3\n\nsequence_generator(1)\n```"
  },
  {
    "task": "Write a program that keeps generating random numbers between 1 and 10 until it gets a five.",
    "code": "```python\nimport random\n\nnumber = 0\nwhile number != 5:\n    number = random.randint(1, 10)\n```"
  },
  {
    "task": "Implement a system to keep checking the temperature and only stop when it falls below freezing.",
    "code": "```python\ntemperature = 35  # Example starting temperature\n\nwhile temperature >= 32:\n    # Simulate checking the temperature\n    temperature -= 1  # Simulate temperature drop\n\nprint(\"Temperature has fallen below freezing.\")\n```"
  },
  {
    "task": "Construct a quiz game that continues asking questions until the player answers incorrectly.",
    "code": "```python\nquestions_answers = {\n    \"What is the capital of France?\": \"Paris\",\n    \"What is 2 + 2?\": \"4\",\n    \"What is the color of the sky?\": \"blue\"\n}\n\ndef quiz_game():\n    questions = list(questions_answers.items())\n    index = 0\n    while index < len(questions):\n        question, correct_answer = questions[index]\n        player_answer = input(question + \" \")\n        if player_answer.lower() != correct_answer.lower():\n            print(\"Incorrect! Game Over.\")\n            break\n        index += 1\n    else:\n        print(\"Congratulations! You answered all questions correctly.\")\n\nquiz_game()\n```"
  },
  {
    "task": "Write a function that calculates factorials of a number, repeating the process for numbers 1 through 5.",
    "code": "```python\ndef calculate_factorials():\n    number = 1\n    while number <= 5:\n        factorial = 1\n        i = 1\n        while i <= number:\n            factorial *= i\n            i += 1\n        print(f\"Factorial of {number} is {factorial}\")\n        number += 1\n\ncalculate_factorials()\n```"
  },
  {
    "task": "Create a loop that prints all even numbers between 1 and 50.",
    "code": "```python\nnum = 2\nwhile num <= 50:\n    print(num)\n    num += 2\n```"
  },
  {
    "task": "Design a program that continuously asks for user input until a palindrome is entered.",
    "code": "```python\nwhile True:\n    user_input = input(\"Enter a string: \")\n    if user_input == user_input[::-1]:\n        break\n```"
  },
  {
    "task": "Implement a countdown that decreases by one each second, starting from 100.",
    "code": "```python\nimport time\n\ncount = 100\nwhile count > 0:\n    print(count)\n    count -= 1\n    time.sleep(1)\n```"
  },
  {
    "task": "Write a script that repeatedly asks for a number and adds it to a total until the total exceeds 500.",
    "code": "```python\ntotal = 0\nwhile total <= 500:\n    number = int(input(\"Enter a number: \"))\n    total += number\n```"
  },
  {
    "task": "Create a loop that generates random letters until the letter 'Z' appears.",
    "code": "```python\nimport random\nimport string\n\nwhile True:\n    letter = random.choice(string.ascii_uppercase)\n    print(letter)\n    if letter == 'Z':\n        break\n```"
  },
  {
    "task": "Write a process that continues prompting for two numbers and prints their sum if it's even.",
    "code": "```python\nwhile True:\n    num1 = int(input(\"Enter first number: \"))\n    num2 = int(input(\"Enter second number: \"))\n    total = num1 + num2\n    if total % 2 == 0:\n        print(f\"The sum {total} is even.\")\n```"
  },
  {
    "task": "Develop a loop that simulates a traffic light sequence until a manual stop command is received.",
    "code": "```python\ndef traffic_light_simulation():\n    lights = ['Red', 'Green', 'Yellow']\n    index = 0\n    user_input = ''\n    \n    while user_input.lower() != 'stop':\n        print(f\"Light is {lights[index]}\")\n        index = (index + 1) % len(lights)\n        user_input = input(\"Type 'stop' to end the simulation or press Enter to continue: \")\n\ntraffic_light_simulation()\n```"
  },
  {
    "task": "Implement a feature that keeps printing numbers in reverse order starting from 10.",
    "code": "```python\nnumber = 10\nwhile number > 0:\n    print(number)\n    number -= 1\n```"
  },
  {
    "task": "Create a program that rolls two dice and continues until the sum is exactly seven.",
    "code": "```python\nimport random\n\ndef roll_dice():\n    return random.randint(1, 6), random.randint(1, 6)\n\nwhile True:\n    die1, die2 = roll_dice()\n    if die1 + die2 == 7:\n        break\n```"
  },
  {
    "task": "Design a loop that keeps asking for ages and prints the average once a negative age is entered.",
    "code": "```python\nages = []\nwhile True:\n    age = int(input(\"Enter age: \"))\n    if age < 0:\n        break\n    ages.append(age)\n\nif ages:\n    average_age = sum(ages) / len(ages)\n    print(\"Average age:\", average_age)\nelse:\n    print(\"No valid ages entered.\")\n```"
  },
  {
    "task": "Write a routine that squares numbers starting from 1 until the square is greater than 500.",
    "code": "```python\nn = 1\nwhile n ** 2 <= 500:\n    n += 1\n```"
  },
  {
    "task": "Implement a system to ask for a string and append it to a file until 'end' is typed.",
    "code": "```python\nwith open('output.txt', 'a') as file:\n    while True:\n        user_input = input(\"Enter a string (type 'end' to finish): \")\n        if user_input == 'end':\n            break\n        file.write(user_input + '\\n')\n```"
  },
  {
    "task": "Create a script that checks if a number is prime, repeating for each number entered by the user.",
    "code": "```python\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\nwhile True:\n    try:\n        num = int(input(\"Enter a number to check if it is prime (or a non-numeric value to exit): \"))\n        if is_prime(num):\n            print(f\"{num} is a prime number.\")\n        else:\n            print(f\"{num} is not a prime number.\")\n    except ValueError:\n        print(\"Exiting the program.\")\n        break\n```"
  },
  {
    "task": "Develop a countdown that prints numbers starting from 50 down to 1.",
    "code": "```python\nnumber = 50\nwhile number > 0:\n    print(number)\n    number -= 1\n```"
  },
  {
    "task": "Write a program that keeps doubling the value of a variable until it exceeds 200.",
    "code": "```python\nvalue = 1\nwhile value <= 200:\n    value *= 2\n```"
  },
  {
    "task": "Design a loop that keeps generating a random string of letters until a specific word is formed.",
    "code": "```python\nimport random\nimport string\n\ntarget_word = \"hello\"\ngenerated_word = \"\"\n\nwhile generated_word != target_word:\n    generated_word = ''.join(random.choice(string.ascii_lowercase) for _ in range(len(target_word)))\n\nprint(\"Generated word:\", generated_word)\n```"
  },
  {
    "task": "Implement a system that continuously fetches data from a sensor until a threshold is crossed.",
    "code": "```python\ndef fetch_data_from_sensor():\n    # Simulate fetching data from a sensor\n    import random\n    return random.uniform(0, 100)\n\nthreshold = 50.0\ndata = 0.0\n\nwhile data <= threshold:\n    data = fetch_data_from_sensor()\n    print(f\"Fetched data: {data}\")\n```"
  },
  {
    "task": "Create a game where a player guesses a number, and the game continues until the player guesses correctly.",
    "code": "```python\nimport random\n\ndef guessing_game():\n    number_to_guess = random.randint(1, 100)\n    player_guess = None\n\n    while player_guess != number_to_guess:\n        player_guess = int(input(\"Guess a number between 1 and 100: \"))\n\n    print(\"Congratulations! You guessed the correct number.\")\n\nguessing_game()\n```"
  },
  {
    "task": "Write a loop that continues to add random numbers to a list until the list has 10 even numbers.",
    "code": "```python\nimport random\n\neven_numbers = []\n\nwhile len(even_numbers) < 10:\n    num = random.randint(1, 100)\n    if num % 2 == 0:\n        even_numbers.append(num)\n```"
  },
  {
    "task": "Design a routine that keeps removing elements from a list until it is empty.",
    "code": "```python\ndef clear_list(lst):\n    while lst:\n        lst.pop()\n\n# Example usage:\nmy_list = [1, 2, 3, 4, 5]\nclear_list(my_list)\nprint(my_list)  # Output should be []\n```"
  },
  {
    "task": "Implement a sequence that prints the alphabet repeatedly until interrupted by the user.",
    "code": "```python\nimport string\n\ntry:\n    while True:\n        for letter in string.ascii_lowercase:\n            print(letter, end=' ')\nexcept KeyboardInterrupt:\n    pass\n```"
  },
  {
    "task": "Create a program that continuously checks for updates and stops once an update is available.",
    "code": "```python\nupdate_available = False\n\nwhile not update_available:\n    # Simulate checking for updates\n    # This could be a call to an external API or some other logic\n    # Here we'll just set update_available to True for demonstration\n    update_available = True\n\nprint(\"Update is now available.\")\n```"
  },
  {
    "task": "Write a function that keeps dividing a number by two until it results in a fractional value.",
    "code": "```python\ndef divide_until_fractional(number):\n    while number % 2 == 0:\n        number /= 2\n    return number\n```"
  },
  {
    "task": "Develop a loop that keeps asking for student's grades and calculates the average until a grade of -1 is entered.",
    "code": "```python\ntotal = 0\ncount = 0\n\nwhile True:\n    grade = float(input(\"Enter student's grade (-1 to finish): \"))\n    if grade == -1:\n        break\n    total += grade\n    count += 1\n\nif count > 0:\n    average = total / count\n    print(f\"The average grade is: {average}\")\nelse:\n    print(\"No grades were entered.\")\n```"
  },
  {
    "task": "Design a feature that continuously monitors a file for changes and stops when no changes are detected for a minute.",
    "code": "```python\nimport os\nimport time\n\ndef monitor_file(file_path):\n    last_modified_time = os.path.getmtime(file_path)\n    no_change_duration = 0\n    change_detected = False\n\n    while True:\n        current_modified_time = os.path.getmtime(file_path)\n        if current_modified_time != last_modified_time:\n            last_modified_time = current_modified_time\n            no_change_duration = 0\n            change_detected = True\n        else:\n            no_change_duration += 1\n\n        if no_change_duration >= 60:  # no change detected for a minute\n            if not change_detected:\n                break\n            no_change_duration = 0\n            change_detected = False\n\n        time.sleep(1)  # check every second\n\n# Example usage\n# monitor_file('path/to/your/file.txt')\n```"
  },
  {
    "task": "Implement a process where a motor runs until a certain distance is reached.",
    "code": "```python\nclass Motor:\n    def __init__(self):\n        self.distance = 0\n\n    def run(self):\n        print(\"Motor is running.\")\n\n    def stop(self):\n        print(\"Motor has stopped.\")\n\n    def update_distance(self, increment):\n        self.distance += increment\n\ndef run_motor_until_distance(target_distance, increment):\n    motor = Motor()\n    while motor.distance < target_distance:\n        motor.run()\n        motor.update_distance(increment)\n    motor.stop()\n\nrun_motor_until_distance(100, 5)\n```"
  },
  {
    "task": "Create a script that keeps generating random numbers and stops when it generates a prime number.",
    "code": "```python\nimport random\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\nwhile True:\n    num = random.randint(1, 100)\n    if is_prime(num):\n        break\n```"
  },
  {
    "task": "Write a program that asks for the user's favorite color and keeps asking until they say 'blue'.",
    "code": "```python\nfavorite_color = \"\"\nwhile favorite_color.lower() != \"blue\":\n    favorite_color = input(\"What is your favorite color? \")\n```"
  },
  {
    "task": "Develop a loop that continuously prints the time every second until a key is pressed.",
    "code": "```python\nimport time\nimport threading\n\ndef wait_for_keypress():\n    input(\"Press Enter to stop...\\n\")\n\nkey_pressed = False\nthread = threading.Thread(target=wait_for_keypress)\nthread.start()\n\nwhile not key_pressed:\n    print(time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime()))\n    time.sleep(1)\n    key_pressed = not thread.is_alive()\n```"
  },
  {
    "task": "Create a system to keep downloading data from a server until the connection is lost.",
    "code": "```python\nimport random\n\ndef download_data():\n    # Simulate a data download process\n    return random.choice([True, False])  # True for success, False for connection lost\n\nconnection_active = True\n\nwhile connection_active:\n    connection_active = download_data()\n```"
  },
  {
    "task": "Write a process to keep a light on until the ambient light level is sufficient.",
    "code": "```python\nambient_light_level = 0\nsufficient_light_level = 10\n\nwhile ambient_light_level < sufficient_light_level:\n    # Code to turn the light on\n    print(\"Light is ON\")\n    # Simulate change in ambient light level\n    ambient_light_level += 1\n\n# Code to turn the light off\nprint(\"Light is OFF\")\n```"
  },
  {
    "task": "Implement a feature that continuously plays a sound until the user presses a button.",
    "code": "```python\nimport pygame\n\n# Initialize pygame mixer\npygame.mixer.init()\n\n# Load sound\nsound = pygame.mixer.Sound('soundfile.wav')\n\n# Function to check if a button is pressed\ndef is_button_pressed():\n    # Placeholder for actual button press check\n    return False\n\n# Play sound in a loop until button is pressed\nwhile not is_button_pressed():\n    if not pygame.mixer.get_busy():\n        sound.play()\n\npygame.mixer.quit()\n```"
  },
  {
    "task": "Design a program that keeps multiplying a matrix by itself until its determinant is greater than 1000.",
    "code": "```python\nimport numpy as np\n\nmatrix = np.array([[1, 2], [3, 4]])  # Example initial matrix\n\nwhile np.linalg.det(matrix) <= 1000:\n    matrix = np.matmul(matrix, matrix)\n```"
  },
  {
    "task": "Create a script that keeps prompting the user to guess a word until they get it right.",
    "code": "```python\nsecret_word = \"python\"\nguess = \"\"\n\nwhile guess != secret_word:\n    guess = input(\"Guess the word: \")\n\nprint(\"Congratulations! You guessed the word.\")\n```"
  },
  {
    "task": "Write a loop that simulates a car's fuel consumption and stops when the tank is empty.",
    "code": "```python\nfuel_level = 10  # starting fuel level in liters\nconsumption_rate = 1  # liters consumed per iteration\n\nwhile fuel_level > 0:\n    print(f\"Fuel level: {fuel_level} liters\")\n    fuel_level -= consumption_rate\n\nprint(\"The tank is empty.\")\n```"
  },
  {
    "task": "Develop a routine that keeps checking if a file exists and stops once it does.",
    "code": "```python\nimport os\n\nfile_path = 'your_file.txt'\n\nwhile not os.path.exists(file_path):\n    pass\n```"
  },
  {
    "task": "Implement a feature that continuously calculates the square root of a number until it's less than 0.1.",
    "code": "```python\nimport math\n\nnumber = float(input(\"Enter a number: \"))\n\nwhile number >= 0.1:\n    number = math.sqrt(number)\n    print(number)\n```"
  },
  {
    "task": "Create a system that prints 'Processing...' every second until a task is complete.",
    "code": "```python\nimport time\n\ntask_complete = False\n\nwhile not task_complete:\n    print(\"Processing...\")\n    time.sleep(1)\n    # Here you would check if the task is complete\n    # For demonstration, let's assume the task completes after some condition\n    # task_complete = check_if_task_complete() \n```"
  },
  {
    "task": "Write a loop that repeatedly checks the status of a process until it reports 'complete'.",
    "code": "```python\nstatus = \"incomplete\"\n\nwhile status != \"complete\":\n    # Simulate checking the status of a process\n    # For illustration, we'll just change the status to 'complete'\n    # In a real scenario, you would update the status based on actual process feedback\n    status = input(\"Enter the current status of the process: \")\n```"
  },
  {
    "task": "Design a routine to keep pinging a server and alert when the connection is lost.",
    "code": "```python\nimport time\nimport requests\n\ndef ping_server(server_url, check_interval=5):\n    while True:\n        try:\n            response = requests.get(server_url)\n            if response.status_code != 200:\n                print(\"Alert: Connection lost!\")\n        except requests.RequestException:\n            print(\"Alert: Connection lost!\")\n        time.sleep(check_interval)\n\nping_server(\"http://example.com\")\n```"
  },
  {
    "task": "Implement a loop that counts down from 100 by fives until it reaches zero.",
    "code": "```python\ncount = 100\nwhile count >= 0:\n    print(count)\n    count -= 5\n```"
  },
  {
    "task": "Create a script that keeps track of inventory items being added or removed until an end signal is given.",
    "code": "```python\ninventory = {}\n\nwhile True:\n    action = input(\"Enter 'add', 'remove', or 'end': \").strip().lower()\n    \n    if action == 'end':\n        break\n    \n    item = input(\"Enter item name: \").strip()\n    \n    if action == 'add':\n        quantity = int(input(\"Enter quantity to add: \"))\n        if item in inventory:\n            inventory[item] += quantity\n        else:\n            inventory[item] = quantity\n    \n    elif action == 'remove':\n        quantity = int(input(\"Enter quantity to remove: \"))\n        if item in inventory:\n            inventory[item] = max(0, inventory[item] - quantity)\n            if inventory[item] == 0:\n                del inventory[item]\n    \n    print(\"Current inventory:\", inventory)\n```"
  },
  {
    "task": "Write a program that keeps calculating the power of two for numbers until a result is greater than 1000.",
    "code": "```python\nn = 0\nresult = 1\nwhile result <= 1000:\n    result = 2 ** n\n    n += 1\n```"
  },
  {
    "task": "Develop a sequence that keeps appending random numbers to an array until its length is 20.",
    "code": "```python\nimport random\n\nnumbers = []\nwhile len(numbers) < 20:\n    numbers.append(random.random())\n```"
  },
  {
    "task": "Implement a routine that continuously rotates an image until it matches a reference orientation.",
    "code": "```python\nfrom PIL import Image\n\ndef rotate_until_match(image_path, reference_path):\n    image = Image.open(image_path)\n    reference = Image.open(reference_path)\n    \n    while True:\n        if image.tobytes() == reference.tobytes():\n            break\n        image = image.rotate(90)\n\n    return image\n```"
  },
  {
    "task": "Design a loop that keeps printing random jokes until the user stops it.",
    "code": "```python\nimport random\n\njokes = [\n    \"Why don't scientists trust atoms? Because they make up everything!\",\n    \"Why did the chicken join a band? Because it had the drumsticks!\",\n    \"What do you call fake spaghetti? An impasta!\",\n    \"How do you organize a space party? You planet!\",\n    \"Why was the math book sad? Because it had too many problems!\"\n]\n\nprint(\"Press Enter to hear a joke or type 'stop' to end.\")\nwhile True:\n    user_input = input()\n    if user_input.lower() == 'stop':\n        break\n    print(random.choice(jokes))\n```"
  },
  {
    "task": "Create a program that accepts user feedback and continues until a positive feedback is received.",
    "code": "```python\nfeedback = \"\"\nwhile \"good\" not in feedback.lower() and \"great\" not in feedback.lower() and \"excellent\" not in feedback.lower():\n    feedback = input(\"Please provide your feedback: \")\nprint(\"Thank you for your positive feedback!\")\n```"
  },
  {
    "task": "Write a loop that repeatedly reads sensor data and stops when a stable reading is observed.",
    "code": "```python\nprevious_reading = None\nstable_reading = False\n\nwhile not stable_reading:\n    current_reading = read_sensor_data()  # Assume read_sensor_data() is defined elsewhere\n    if current_reading == previous_reading:\n        stable_reading = True\n    else:\n        previous_reading = current_reading\n```"
  },
  {
    "task": "Develop a system that simulates a stopwatch, counting seconds until stopped manually.",
    "code": "```python\nimport time\n\ndef stopwatch():\n    seconds = 0\n    print(\"Stopwatch started. Press Ctrl+C to stop.\")\n    try:\n        while True:\n            print(f\"Time elapsed: {seconds} second(s)\", end='\\r')\n            time.sleep(1)\n            seconds += 1\n    except KeyboardInterrupt:\n        print(f\"\\nStopwatch stopped at: {seconds} second(s)\")\n\nstopwatch()\n```"
  },
  {
    "task": "Create a script that continues adding random integers to a sum until the sum exceeds 100.",
    "code": "```python\nimport random\n\ntotal_sum = 0\n\nwhile total_sum <= 100:\n    total_sum += random.randint(1, 10)\n```"
  },
  {
    "task": "Implement a process to track a moving object until it stops.",
    "code": "```python\ndef track_moving_object():\n    moving = True\n    position = 0  # Starting position of the object\n    speed = 5  # Example speed of the object\n\n    while moving:\n        position += speed\n        print(f\"Object at position: {position}\")\n\n        # Stop condition\n        if position >= 100:  # Assuming the object stops at position 100\n            moving = False\n\ntrack_moving_object()\n```"
  },
  {
    "task": "Design a routine to keep checking user login attempts until a successful login occurs.",
    "code": "```python\ncorrect_username = \"user\"\ncorrect_password = \"pass\"\n\nlogged_in = False\n\nwhile not logged_in:\n    username = input(\"Enter username: \")\n    password = input(\"Enter password: \")\n    \n    if username == correct_username and password == correct_password:\n        logged_in = True\n        print(\"Login successful!\")\n    else:\n        print(\"Login failed. Try again.\")\n```"
  },
  {
    "task": "Write a loop that repeatedly calculates the area of a circle for radii from 1 to 10.",
    "code": "```python\nimport math\n\nradius = 1\nwhile radius <= 10:\n    area = math.pi * (radius ** 2)\n    print(f\"Radius: {radius}, Area: {area}\")\n    radius += 1\n```"
  },
  {
    "task": "Create a program that continues flipping a card from a deck until an ace is drawn.",
    "code": "```python\nimport random\n\ndef draw_card():\n    ranks = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'Jack', 'Queen', 'King', 'Ace']\n    return random.choice(ranks)\n\ncard = ''\nwhile card != 'Ace':\n    card = draw_card()\n    print(f'Drew a {card}')\n```"
  },
  {
    "task": "Develop a loop that keeps asking for a word and stores it until a word with more than five letters is entered.",
    "code": "```python\nwords = []\nwhile True:\n    word = input(\"Enter a word: \")\n    words.append(word)\n    if len(word) > 5:\n        break\n```"
  },
  {
    "task": "Implement a feature that continuously calculates the exponential growth of a population until it doubles.",
    "code": "```python\ninitial_population = 1000\npopulation = initial_population\ngrowth_rate = 0.05\n\nwhile population < 2 * initial_population:\n    population += population * growth_rate\n```"
  },
  {
    "task": "Write a script that repeats a string a certain number of times until a limit is reached.",
    "code": "```python\ndef repeat_string_until_limit(string, repeat_count, limit):\n    result = \"\"\n    count = 0\n    while count < limit:\n        result += string\n        count += repeat_count\n    return result\n\n# Example usage:\nrepeated_string = repeat_string_until_limit(\"hello\", 1, 5)\nprint(repeated_string)\n```"
  },
  {
    "task": "Create a routine that keeps accessing an API endpoint until it returns a specific result.",
    "code": "```python\nimport requests\n\ntarget_result = \"desired_result\"\napi_url = \"https://api.example.com/endpoint\"\n\nwhile True:\n    response = requests.get(api_url)\n    if response.text == target_result:\n        break\n```"
  },
  {
    "task": "Design a loop that continues to fetch stock prices until a certain price threshold is crossed.",
    "code": "```python\nimport random\n\ndef fetch_stock_price():\n    # Simulate fetching a stock price between 10 and 200\n    return random.uniform(10, 200)\n\nprice_threshold = 150.0\ncurrent_price = 0.0\n\nwhile current_price <= price_threshold:\n    current_price = fetch_stock_price()\n    print(f\"Fetched stock price: {current_price:.2f}\")\n```"
  },
  {
    "task": "Implement a process that keeps monitoring CPU usage until it drops below 10%.",
    "code": "```python\nimport psutil\nimport time\n\ndef monitor_cpu_usage():\n    while True:\n        cpu_usage = psutil.cpu_percent(interval=1)\n        if cpu_usage < 10:\n            break\n        time.sleep(1)\n\nmonitor_cpu_usage()\n```"
  },
  {
    "task": "Write a program that asks for a series of numbers and prints the largest once a negative number is entered.",
    "code": "```python\nlargest = None\n\nwhile True:\n    num = float(input(\"Enter a number: \"))\n    if num < 0:\n        break\n    if largest is None or num > largest:\n        largest = num\n\nif largest is not None:\n    print(\"The largest number entered is:\", largest)\n```"
  },
  {
    "task": "Develop a system that keeps a heater on until the room reaches a desired temperature.",
    "code": "```python\ndesired_temperature = 22.0  # example desired temperature\ncurrent_temperature = 18.0  # example starting temperature\n\nwhile current_temperature < desired_temperature:\n    # Simulate the heater being on and increasing the temperature\n    current_temperature += 0.5  # example temperature increase\n\n# Heater turns off when the loop exits\n```"
  },
  {
    "task": "Create a loop that repeatedly checks if a door is open and alerts if it remains open for too long.",
    "code": "```python\nimport time\n\ndef is_door_open():\n    # Placeholder function to simulate door status\n    # Replace with actual logic to check door status\n    return True\n\ndef alert():\n    print(\"Alert: The door has been open for too long!\")\n\ndoor_open_duration = 0\nmax_open_duration = 10  # seconds\n\nwhile True:\n    if is_door_open():\n        door_open_duration += 1\n        if door_open_duration > max_open_duration:\n            alert()\n            break\n    else:\n        door_open_duration = 0\n    time.sleep(1)\n```"
  },
  {
    "task": "Implement a feature that keeps adding random characters to a string until its length is 8.",
    "code": "```python\nimport random\nimport string\n\nresult = \"\"\nwhile len(result) < 8:\n    result += random.choice(string.ascii_letters)\n```"
  },
  {
    "task": "Design a routine that simulates a race and continues until a participant crosses the finish line.",
    "code": "```python\nimport random\n\ndef simulate_race():\n    finish_line = 100\n    participants = {'Runner1': 0, 'Runner2': 0, 'Runner3': 0}\n\n    while True:\n        for participant in participants:\n            participants[participant] += random.randint(1, 10)\n            if participants[participant] >= finish_line:\n                print(f\"{participant} has crossed the finish line!\")\n                return\n\nsimulate_race()\n```"
  },
  {
    "task": "Write a script that keeps checking an email inbox until a specific email is received.",
    "code": "```python\nimport time\nimport imaplib\nimport email\n\ndef check_email():\n    mail = imaplib.IMAP4_SSL('imap.example.com')\n    mail.login('your_email@example.com', 'your_password')\n    mail.select('inbox')\n\n    while True:\n        result, data = mail.search(None, 'ALL')\n        email_ids = data[0].split()\n\n        for email_id in email_ids:\n            result, msg_data = mail.fetch(email_id, '(RFC822)')\n            msg = email.message_from_bytes(msg_data[0][1])\n\n            if 'Specific Subject' in msg['subject']:\n                print('Email found!')\n                mail.logout()\n                return\n\n        time.sleep(60)\n\ncheck_email()\n```"
  },
  {
    "task": "Create a loop that continues to play a video on repeat until the user interrupts.",
    "code": "```python\nimport time\n\ndef play_video():\n    print(\"Playing video...\")\n    time.sleep(2)  # Simulate video playing with a 2-second delay\n\ntry:\n    while True:\n        play_video()\nexcept KeyboardInterrupt:\n    print(\"Video interrupted by user.\")\n```"
  },
  {
    "task": "Develop a process that keeps scanning for Bluetooth devices until a specific device is found.",
    "code": "```python\nimport bluetooth\n\ntarget_name = \"Specific Device Name\"\ntarget_address = None\n\nwhile target_address is None:\n    nearby_devices = bluetooth.discover_devices(duration=8, lookup_names=True)\n    for addr, name in nearby_devices:\n        if name == target_name:\n            target_address = addr\n            break\n```"
  },
  {
    "task": "Implement a script that continuously captures images from a webcam until a motion is detected.",
    "code": "```python\nimport cv2\n\ndef detect_motion(frame1, frame2):\n    diff = cv2.absdiff(frame1, frame2)\n    gray = cv2.cvtColor(diff, cv2.COLOR_BGR2GRAY)\n    blur = cv2.GaussianBlur(gray, (5, 5), 0)\n    _, thresh = cv2.threshold(blur, 20, 255, cv2.THRESH_BINARY)\n    dilated = cv2.dilate(thresh, None, iterations=3)\n    contours, _ = cv2.findContours(dilated, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\n    return len(contours) > 0\n\ncap = cv2.VideoCapture(0)\n\nret, frame1 = cap.read()\nret, frame2 = cap.read()\n\nwhile True:\n    if detect_motion(frame1, frame2):\n        print(\"Motion detected!\")\n        break\n    frame1 = frame2\n    ret, frame2 = cap.read()\n    if not ret:\n        break\n\ncap.release()\ncv2.destroyAllWindows()\n```"
  },
  {
    "task": "Design a program that keeps playing a sound file until the user presses a mute button.",
    "code": "```python\nimport pygame\nimport sys\n\npygame.init()\npygame.mixer.init()\n\nsound = pygame.mixer.Sound('soundfile.wav')\nsound.play(-1)\n\nmute = False\n\nwhile not mute:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            mute = True\n        elif event.type == pygame.KEYDOWN:\n            if event.key == pygame.K_m:\n                mute = True\n\nsound.stop()\npygame.quit()\nsys.exit()\n```"
  },
  {
    "task": "Create a loop that repeatedly generates a random password until it meets certain security criteria.",
    "code": "```python\nimport random\nimport string\n\ndef meets_criteria(password):\n    # Example criteria: at least 8 characters, includes a number and a special character\n    if len(password) < 8:\n        return False\n    if not any(char.isdigit() for char in password):\n        return False\n    if not any(char in string.punctuation for char in password):\n        return False\n    return True\n\ndef generate_password():\n    characters = string.ascii_letters + string.digits + string.punctuation\n    return ''.join(random.choice(characters) for _ in range(12))\n\npassword = ''\nwhile not meets_criteria(password):\n    password = generate_password()\n\nprint(password)\n```"
  },
  {
    "task": "Write a process that keeps checking for file changes in a directory and logs them until stopped.",
    "code": "```python\nimport os\nimport time\nimport logging\n\nlogging.basicConfig(filename='file_changes.log', level=logging.INFO, format='%(asctime)s - %(message)s')\n\ndef monitor_directory(path):\n    previous_files = set(os.listdir(path))\n    while True:\n        time.sleep(1)\n        current_files = set(os.listdir(path))\n        added_files = current_files - previous_files\n        removed_files = previous_files - current_files\n\n        for file in added_files:\n            logging.info(f\"File added: {file}\")\n        \n        for file in removed_files:\n            logging.info(f\"File removed: {file}\")\n\n        previous_files = current_files\n\nmonitor_directory('your_directory_path')\n```"
  }
]