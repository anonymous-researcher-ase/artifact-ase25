[
  {
    "task": "Create a base class for a vehicle with methods for speed and fuel efficiency, then derive a car class that overrides these methods to provide specific implementations.",
    "code": "```python\nclass Vehicle:\n    def speed(self):\n        raise NotImplementedError(\"Subclass must implement abstract method\")\n\n    def fuel_efficiency(self):\n        raise NotImplementedError(\"Subclass must implement abstract method\")\n\nclass Car(Vehicle):\n    def speed(self):\n        return \"Car speed: 120 km/h\"\n\n    def fuel_efficiency(self):\n        return \"Car fuel efficiency: 15 km/l\"\n\n# Example Usage\ncar = Car()\nprint(car.speed())\nprint(car.fuel_efficiency())\n```"
  },
  {
    "task": "Design a base class for a multimedia file with properties like duration and format, then extend it with a video class that includes resolution and frame rate.",
    "code": "```python\nclass MultimediaFile:\n    def __init__(self, duration, file_format):\n        self.duration = duration\n        self.file_format = file_format\n\nclass Video(MultimediaFile):\n    def __init__(self, duration, file_format, resolution, frame_rate):\n        super().__init__(duration, file_format)\n        self.resolution = resolution\n        self.frame_rate = frame_rate\n```"
  },
  {
    "task": "Develop a superclass for bank accounts with methods for deposit and withdrawal, then create a savings account subclass that overrides the withdrawal method to incorporate interest deductions.",
    "code": "```python\nclass BankAccount:\n    def __init__(self, balance=0):\n        self.balance = balance\n\n    def deposit(self, amount):\n        if amount > 0:\n            self.balance += amount\n\n    def withdraw(self, amount):\n        if 0 < amount <= self.balance:\n            self.balance -= amount\n\n\nclass SavingsAccount(BankAccount):\n    def __init__(self, balance=0, interest_rate=0):\n        super().__init__(balance)\n        self.interest_rate = interest_rate\n\n    def withdraw(self, amount):\n        interest_deduction = amount * self.interest_rate\n        total_amount = amount + interest_deduction\n        if 0 < total_amount <= self.balance:\n            self.balance -= total_amount\n```"
  },
  {
    "task": "Implement a base class for a geometric shape with methods to calculate area and perimeter, then create a rectangle subclass that provides specific calculations for these methods.",
    "code": "```python\nclass GeometricShape:\n    def area(self):\n        raise NotImplementedError(\"Subclasses should implement this method\")\n\n    def perimeter(self):\n        raise NotImplementedError(\"Subclasses should implement this method\")\n\nclass Rectangle(GeometricShape):\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n\n    def area(self):\n        return self.width * self.height\n\n    def perimeter(self):\n        return 2 * (self.width + self.height)\n```"
  },
  {
    "task": "Construct a parent class for employees with a method to calculate salary, then derive a manager class that overrides this method to include bonuses.",
    "code": "```python\nclass Employee:\n    def __init__(self, name, base_salary):\n        self.name = name\n        self.base_salary = base_salary\n\n    def calculate_salary(self):\n        return self.base_salary\n\nclass Manager(Employee):\n    def __init__(self, name, base_salary, bonus):\n        super().__init__(name, base_salary)\n        self.bonus = bonus\n\n    def calculate_salary(self):\n        return self.base_salary + self.bonus\n```"
  },
  {
    "task": "Set up a base class for a library item with properties like title and author, and extend it with a book subclass that adds a number of pages property.",
    "code": "```python\nclass LibraryItem:\n    def __init__(self, title, author):\n        self.title = title\n        self.author = author\n\nclass Book(LibraryItem):\n    def __init__(self, title, author, number_of_pages):\n        super().__init__(title, author)\n        self.number_of_pages = number_of_pages\n```"
  },
  {
    "task": "Create a foundation class for an electronic device with a method to turn on and off, and derive a smartphone class that overrides the turn on method to require a passcode.",
    "code": "```python\nclass ElectronicDevice:\n    def __init__(self):\n        self.is_on = False\n\n    def turn_on(self):\n        self.is_on = True\n        print(\"Device is now on.\")\n\n    def turn_off(self):\n        self.is_on = False\n        print(\"Device is now off.\")\n\nclass Smartphone(ElectronicDevice):\n    def turn_on(self, passcode):\n        if passcode == \"1234\":\n            self.is_on = True\n            print(\"Smartphone is now on.\")\n        else:\n            print(\"Incorrect passcode. Smartphone remains off.\")\n```"
  },
  {
    "task": "Design a base class for an animal with a method to make a sound, then create a dog subclass that overrides this method to bark.",
    "code": "```python\nclass Animal:\n    def make_sound(self):\n        pass\n\nclass Dog(Animal):\n    def make_sound(self):\n        return \"Bark\"\n\n# Example usage:\n# dog = Dog()\n# print(dog.make_sound())  # Output: Bark\n```"
  },
  {
    "task": "Develop a superclass for meals with a method to calculate calories, then create a dessert subclass that overrides it to add extra sugar calories.",
    "code": "```python\nclass Meal:\n    def __init__(self, protein, carbs, fat):\n        self.protein = protein\n        self.carbs = carbs\n        self.fat = fat\n\n    def calculate_calories(self):\n        return (self.protein * 4) + (self.carbs * 4) + (self.fat * 9)\n\nclass Dessert(Meal):\n    def __init__(self, protein, carbs, fat, sugar):\n        super().__init__(protein, carbs, fat)\n        self.sugar = sugar\n\n    def calculate_calories(self):\n        base_calories = super().calculate_calories()\n        sugar_calories = self.sugar * 4\n        return base_calories + sugar_calories\n```"
  },
  {
    "task": "Implement a base class for a transportation mode with a method to calculate travel time, then extend it with a plane subclass that overrides the method to calculate based on speed.",
    "code": "```python\nclass TransportationMode:\n    def calculate_travel_time(self, distance):\n        raise NotImplementedError(\"This method should be overridden in subclasses\")\n\nclass Plane(TransportationMode):\n    def __init__(self, speed):\n        self.speed = speed\n\n    def calculate_travel_time(self, distance):\n        if self.speed <= 0:\n            raise ValueError(\"Speed must be greater than zero\")\n        return distance / self.speed\n```"
  },
  {
    "task": "Construct a parent class for a musical instrument with a method to play sound, then derive a piano class that overrides the method to play specific notes.",
    "code": "```python\nclass MusicalInstrument:\n    def play_sound(self):\n        return \"Playing sound from a musical instrument.\"\n\nclass Piano(MusicalInstrument):\n    def play_sound(self):\n        return \"Playing specific notes on the piano.\"\n\n# Example usage\ninstrument = MusicalInstrument()\npiano = Piano()\n\nprint(instrument.play_sound())  # Output: Playing sound from a musical instrument.\nprint(piano.play_sound())       # Output: Playing specific notes on the piano.\n```"
  },
  {
    "task": "Set up a base class for a user account with a method to reset password, and extend it with an admin account subclass that overrides it to include security questions.",
    "code": "```python\nclass UserAccount:\n    def __init__(self, username, password):\n        self.username = username\n        self.password = password\n\n    def reset_password(self, new_password):\n        self.password = new_password\n        return \"Password reset successfully.\"\n\nclass AdminAccount(UserAccount):\n    def __init__(self, username, password, security_question, security_answer):\n        super().__init__(username, password)\n        self.security_question = security_question\n        self.security_answer = security_answer\n\n    def reset_password(self, new_password, security_answer):\n        if security_answer == self.security_answer:\n            self.password = new_password\n            return \"Password reset successfully with security question.\"\n        else:\n            return \"Security answer is incorrect. Password reset failed.\"\n```"
  },
  {
    "task": "Create a foundational class for a beverage with properties like volume and temperature, and derive a coffee class that overrides the temperature property to be hot.",
    "code": "```python\nclass Beverage:\n    def __init__(self, volume, temperature):\n        self.volume = volume\n        self.temperature = temperature\n\nclass Coffee(Beverage):\n    def __init__(self, volume):\n        super().__init__(volume, temperature=\"hot\")\n```"
  },
  {
    "task": "Design a base class for a service appointment with a method to schedule time, then create a doctor appointment subclass that overrides this method to include consultation duration.",
    "code": "```python\nclass ServiceAppointment:\n    def schedule_time(self, time):\n        return f\"Appointment scheduled at {time}\"\n\nclass DoctorAppointment(ServiceAppointment):\n    def schedule_time(self, time, duration):\n        return f\"Doctor appointment scheduled at {time} for {duration} minutes\"\n\n# Example usage\nbase_appointment = ServiceAppointment()\nprint(base_appointment.schedule_time(\"10:00 AM\"))\n\ndoctor_appointment = DoctorAppointment()\nprint(doctor_appointment.schedule_time(\"11:00 AM\", 30))\n```"
  },
  {
    "task": "Develop a superclass for electronic gadgets with a method to calculate battery life, then extend it with a laptop class that overrides this method to consider usage patterns.",
    "code": "```python\nclass ElectronicGadget:\n    def calculate_battery_life(self, battery_capacity, power_consumption):\n        return battery_capacity / power_consumption\n\nclass Laptop(ElectronicGadget):\n    def calculate_battery_life(self, battery_capacity, power_consumption, usage_pattern_factor):\n        return (battery_capacity / power_consumption) * usage_pattern_factor\n```"
  },
  {
    "task": "Implement a base class for a website component with a method to render content, then create a blog post subclass that overrides this method to include author information.",
    "code": "```python\nclass WebsiteComponent:\n    def render_content(self):\n        return \"Rendering website component content.\"\n\nclass BlogPost(WebsiteComponent):\n    def __init__(self, author):\n        self.author = author\n\n    def render_content(self):\n        return f\"Rendering blog post content by {self.author}.\"\n```"
  },
  {
    "task": "Construct a parent class for a recipe with methods for ingredients and instructions, then derive a cake recipe class that overrides these methods to add baking steps.",
    "code": "```python\nclass Recipe:\n    def ingredients(self):\n        return \"Ingredients:\"\n\n    def instructions(self):\n        return \"Instructions:\"\n\nclass CakeRecipe(Recipe):\n    def ingredients(self):\n        return super().ingredients() + \" Flour, Sugar, Eggs, Butter\"\n\n    def instructions(self):\n        return super().instructions() + \" Mix ingredients, bake at 350 degrees for 30 minutes\"\n```"
  },
  {
    "task": "Set up a base class for a plant with methods for sunlight and water needs, and extend it with a cactus subclass that overrides these methods to require less water.",
    "code": "```python\nclass Plant:\n    def sunlight_needs(self):\n        return \"Needs plenty of sunlight.\"\n\n    def water_needs(self):\n        return \"Needs regular watering.\"\n\nclass Cactus(Plant):\n    def water_needs(self):\n        return \"Needs minimal watering.\"\n```"
  },
  {
    "task": "Create a foundational class for a building with properties like height and material, and derive a skyscraper class that overrides the height property to be significantly taller.",
    "code": "```python\nclass Building:\n    def __init__(self, height, material):\n        self.height = height\n        self.material = material\n\nclass Skyscraper(Building):\n    def __init__(self, material):\n        super().__init__(height=300, material=material)\n\n# Example usage\nbuilding = Building(10, 'brick')\nskyscraper = Skyscraper('steel')\n\nprint(building.height)  # Outputs: 10\nprint(skyscraper.height)  # Outputs: 300\n```"
  },
  {
    "task": "Design a base class for a payment method with a method to process transactions, then create a credit card subclass that overrides this method to include credit limits.",
    "code": "```python\nclass PaymentMethod:\n    def process_transaction(self, amount):\n        print(f\"Processing transaction for {amount}\")\n\nclass CreditCard(PaymentMethod):\n    def __init__(self, credit_limit):\n        self.credit_limit = credit_limit\n\n    def process_transaction(self, amount):\n        if amount <= self.credit_limit:\n            print(f\"Processing credit card transaction for {amount}\")\n            self.credit_limit -= amount\n        else:\n            print(\"Transaction declined: amount exceeds credit limit\")\n```"
  },
  {
    "task": "Develop a superclass for a computer program with methods for input and output, then extend it with a game subclass that overrides these methods to include player interactions.",
    "code": "```python\nclass ComputerProgram:\n    def input_data(self):\n        return \"Input data received by ComputerProgram.\"\n\n    def output_data(self):\n        return \"Output data generated by ComputerProgram.\"\n\nclass Game(ComputerProgram):\n    def input_data(self):\n        return \"Player input received by Game.\"\n\n    def output_data(self):\n        return \"Player output generated by Game.\"\n\n# Example usage\ngame = Game()\nprint(game.input_data())\nprint(game.output_data())\n```"
  },
  {
    "task": "Implement a base class for a dining establishment with a method to calculate wait time, then create a fast food subclass that overrides this method to be shorter.",
    "code": "```python\nclass DiningEstablishment:\n    def __init__(self, name, avg_wait_time):\n        self.name = name\n        self.avg_wait_time = avg_wait_time\n\n    def calculate_wait_time(self, customers):\n        return self.avg_wait_time * customers\n\nclass FastFood(DiningEstablishment):\n    def calculate_wait_time(self, customers):\n        return (self.avg_wait_time * customers) * 0.5\n\n# Example usage:\n# restaurant = DiningEstablishment(\"Gourmet Place\", 10)\n# fast_food = FastFood(\"Quick Bites\", 10)\n# print(restaurant.calculate_wait_time(3))  # Expected: 30\n# print(fast_food.calculate_wait_time(3))   # Expected: 15\n```"
  },
  {
    "task": "Construct a parent class for a social media profile with methods for posting and liking, then derive a business profile class that overrides these methods to include promotions.",
    "code": "```python\nclass SocialMediaProfile:\n    def __init__(self, username):\n        self.username = username\n        self.posts = []\n        self.likes = 0\n\n    def post(self, content):\n        self.posts.append(content)\n        print(f\"{self.username} posted: {content}\")\n\n    def like(self):\n        self.likes += 1\n        print(f\"{self.username} received a like. Total likes: {self.likes}\")\n\nclass BusinessProfile(SocialMediaProfile):\n    def __init__(self, username, business_name):\n        super().__init__(username)\n        self.business_name = business_name\n\n    def post(self, content):\n        super().post(content)\n        print(f\"Promotion included in post by {self.business_name}.\")\n\n    def like(self):\n        super().like()\n        print(f\"Promotion awareness increased for {self.business_name}.\")\n```"
  },
  {
    "task": "Set up a base class for an educational course with methods for syllabus and grading, and extend it with an online course subclass that overrides these methods for remote learning.",
    "code": "```python\nclass EducationalCourse:\n    def syllabus(self):\n        return \"General syllabus for the course.\"\n\n    def grading(self):\n        return \"Standard grading system.\"\n\nclass OnlineCourse(EducationalCourse):\n    def syllabus(self):\n        return \"Syllabus adapted for online learning.\"\n\n    def grading(self):\n        return \"Grading system with online participation.\"\n```"
  },
  {
    "task": "Create a foundational class for a sports team with properties like team name and coach, and derive a football team class that overrides the coach property with a specific person.",
    "code": "```python\nclass SportsTeam:\n    def __init__(self, team_name, coach):\n        self.team_name = team_name\n        self.coach = coach\n\nclass FootballTeam(SportsTeam):\n    def __init__(self, team_name, coach='Specific Person'):\n        super().__init__(team_name, coach)\n\n# Example usage\nfootball_team = FootballTeam('Eagles')\nprint(football_team.team_name)  # Eagles\nprint(football_team.coach)      # Specific Person\n```"
  },
  {
    "task": "Design a base class for a document with methods for printing and saving, then create a PDF document subclass that overrides these methods to include encryption.",
    "code": "```python\nclass Document:\n    def print_document(self):\n        print(\"Printing document...\")\n\n    def save_document(self):\n        print(\"Saving document...\")\n\nclass PDFDocument(Document):\n    def print_document(self):\n        print(\"Printing encrypted PDF document...\")\n\n    def save_document(self):\n        print(\"Saving encrypted PDF document...\")\n\n# Example usage\npdf = PDFDocument()\npdf.print_document()\npdf.save_document()\n```"
  },
  {
    "task": "Develop a superclass for a retail product with methods for pricing and discount, then extend it with an electronics product class that overrides the discount method to offer more.",
    "code": "```python\nclass RetailProduct:\n    def __init__(self, name, price):\n        self.name = name\n        self.price = price\n\n    def get_pricing(self):\n        return self.price\n\n    def get_discount(self):\n        return 0\n\n    def final_price(self):\n        return self.price - self.get_discount()\n\n\nclass ElectronicsProduct(RetailProduct):\n    def get_discount(self):\n        return self.price * 0.1  # 10% discount for electronics\n\n\n# Example Usage\nproduct = RetailProduct(\"Generic Product\", 100)\nprint(product.final_price())  # Output: 100\n\nelectronic = ElectronicsProduct(\"Smartphone\", 1000)\nprint(electronic.final_price())  # Output: 900\n```"
  },
  {
    "task": "Implement a base class for a subscription service with a method to renew membership, then create a monthly subscription subclass that overrides this method for automatic renewal.",
    "code": "```python\nclass SubscriptionService:\n    def renew_membership(self):\n        print(\"Membership renewed manually.\")\n\nclass MonthlySubscription(SubscriptionService):\n    def renew_membership(self):\n        print(\"Membership renewed automatically for the month.\")\n\n# Example usage:\nbase_subscription = SubscriptionService()\nbase_subscription.renew_membership()\n\nmonthly_subscription = MonthlySubscription()\nmonthly_subscription.renew_membership()\n```"
  },
  {
    "task": "Construct a parent class for a language translator with a method to translate text, then derive a French translator class that overrides this method for French language specifics.",
    "code": "```python\nclass LanguageTranslator:\n    def translate(self, text):\n        return \"Translation not implemented.\"\n\nclass FrenchTranslator(LanguageTranslator):\n    def translate(self, text):\n        # Placeholder for French translation logic\n        return \"Traduction fran\u00e7aise pour: \" + text\n```"
  },
  {
    "task": "Set up a base class for a customer order with methods for placing and tracking, and extend it with a food order subclass that overrides tracking for delivery status.",
    "code": "```python\nclass CustomerOrder:\n    def __init__(self, order_id):\n        self.order_id = order_id\n\n    def place_order(self):\n        return f\"Order {self.order_id} has been placed.\"\n\n    def track_order(self):\n        return f\"Tracking info for order {self.order_id}.\"\n\nclass FoodOrder(CustomerOrder):\n    def track_order(self):\n        return f\"Delivery status for food order {self.order_id}.\"\n```"
  },
  {
    "task": "Create a foundational class for an artwork with properties like artist and medium, and derive a painting class that overrides the medium property to be 'canvas'.",
    "code": "```python\nclass Artwork:\n    def __init__(self, artist, medium):\n        self.artist = artist\n        self.medium = medium\n\nclass Painting(Artwork):\n    def __init__(self, artist):\n        super().__init__(artist, 'canvas')\n```"
  },
  {
    "task": "Design a base class for a computer network with methods for connectivity and bandwidth, then create a wireless network subclass that overrides these methods for signal strength.",
    "code": "```python\nclass ComputerNetwork:\n    def connectivity(self):\n        return \"Checking connectivity in the computer network.\"\n\n    def bandwidth(self):\n        return \"Checking bandwidth in the computer network.\"\n\nclass WirelessNetwork(ComputerNetwork):\n    def connectivity(self):\n        return \"Checking wireless network connectivity based on signal strength.\"\n\n    def bandwidth(self):\n        return \"Checking wireless network bandwidth based on signal strength.\"\n\n# Example usage:\nnetwork = ComputerNetwork()\nprint(network.connectivity())\nprint(network.bandwidth())\n\nwireless_network = WirelessNetwork()\nprint(wireless_network.connectivity())\nprint(wireless_network.bandwidth())\n```"
  },
  {
    "task": "Develop a superclass for a messaging app with methods for sending and receiving messages, then extend it with a secure messaging subclass that overrides these methods for encryption.",
    "code": "```python\nclass MessagingApp:\n    def send_message(self, message):\n        print(f\"Sending message: {message}\")\n\n    def receive_message(self):\n        print(\"Receiving message\")\n\nclass SecureMessagingApp(MessagingApp):\n    def send_message(self, message):\n        encrypted_message = self.encrypt(message)\n        print(f\"Sending encrypted message: {encrypted_message}\")\n\n    def receive_message(self):\n        print(\"Receiving encrypted message\")\n        message = self.decrypt(\"encrypted message\")\n        print(f\"Decrypted message: {message}\")\n\n    def encrypt(self, message):\n        # Simulate encryption (placeholder)\n        return f\"encrypted({message})\"\n\n    def decrypt(self, encrypted_message):\n        # Simulate decryption (placeholder)\n        return encrypted_message.replace(\"encrypted(\", \"\").replace(\")\", \"\")\n```"
  },
  {
    "task": "Implement a base class for a travel itinerary with methods for destinations and activities, then create a vacation itinerary subclass that overrides these methods for leisure activities.",
    "code": "```python\nclass TravelItinerary:\n    def get_destinations(self):\n        return [\"Destination A\", \"Destination B\"]\n\n    def get_activities(self):\n        return [\"Activity 1\", \"Activity 2\"]\n\nclass VacationItinerary(TravelItinerary):\n    def get_destinations(self):\n        return [\"Beach Resort\", \"Mountain Cabin\"]\n\n    def get_activities(self):\n        return [\"Sunbathing\", \"Hiking\"]\n```"
  },
  {
    "task": "Construct a parent class for a healthcare record with methods for patient data and treatment history, then derive a pediatric record class that overrides these methods for child-specific data.",
    "code": "```python\nclass HealthcareRecord:\n    def __init__(self, patient_name, age):\n        self.patient_name = patient_name\n        self.age = age\n\n    def patient_data(self):\n        return f\"Patient Name: {self.patient_name}, Age: {self.age}\"\n\n    def treatment_history(self):\n        return \"General treatment history.\"\n\nclass PediatricRecord(HealthcareRecord):\n    def __init__(self, patient_name, age, guardian_name):\n        super().__init__(patient_name, age)\n        self.guardian_name = guardian_name\n\n    def patient_data(self):\n        return f\"Patient Name: {self.patient_name}, Age: {self.age}, Guardian Name: {self.guardian_name}\"\n\n    def treatment_history(self):\n        return \"Pediatric treatment history specific to child.\"\n```"
  },
  {
    "task": "Set up a base class for a culinary dish with methods for preparation and serving, and extend it with an appetizer subclass that overrides these methods for smaller portions.",
    "code": "```python\nclass CulinaryDish:\n    def prepare(self):\n        return \"Preparing the dish\"\n\n    def serve(self):\n        return \"Serving the dish\"\n\nclass Appetizer(CulinaryDish):\n    def prepare(self):\n        return \"Preparing a smaller portion of the dish\"\n\n    def serve(self):\n        return \"Serving a smaller portion of the dish\"\n```"
  },
  {
    "task": "Create a foundational class for a book collection with properties like genre and author, and derive a mystery collection class that overrides the genre property to be 'mystery'.",
    "code": "```python\nclass BookCollection:\n    def __init__(self, genre, author):\n        self.genre = genre\n        self.author = author\n\nclass MysteryCollection(BookCollection):\n    def __init__(self, author):\n        super().__init__('mystery', author)\n```"
  },
  {
    "task": "Design a base class for a file storage system with methods for saving and deleting files, then create a cloud storage subclass that overrides these methods for remote access.",
    "code": "```python\nclass FileStorageSystem:\n    def save_file(self, filename, content):\n        print(f\"Saving {filename} locally.\")\n\n    def delete_file(self, filename):\n        print(f\"Deleting {filename} locally.\")\n\nclass CloudStorage(FileStorageSystem):\n    def save_file(self, filename, content):\n        print(f\"Saving {filename} to the cloud.\")\n\n    def delete_file(self, filename):\n        print(f\"Deleting {filename} from the cloud.\")\n```"
  },
  {
    "task": "Develop a superclass for a seasonal sale event with methods for discounts and promotions, then extend it with a summer sale subclass that overrides these methods for summer items.",
    "code": "```python\nclass SeasonalSale:\n    def discount(self):\n        return \"Standard discount applied.\"\n\n    def promotion(self):\n        return \"Standard promotion applied.\"\n\nclass SummerSale(SeasonalSale):\n    def discount(self):\n        return \"Summer discount applied.\"\n\n    def promotion(self):\n        return \"Summer promotion applied.\"\n```"
  },
  {
    "task": "Implement a base class for a personal budget with methods for income and expenses, then create a student budget subclass that overrides these methods for tuition and fees.",
    "code": "```python\nclass PersonalBudget:\n    def __init__(self):\n        self.total_income = 0\n        self.total_expenses = 0\n\n    def add_income(self, amount):\n        self.total_income += amount\n\n    def add_expense(self, amount):\n        self.total_expenses += amount\n\n    def get_balance(self):\n        return self.total_income - self.total_expenses\n\nclass StudentBudget(PersonalBudget):\n    def __init__(self):\n        super().__init__()\n        self.tuition_fees = 0\n\n    def add_income(self, amount):\n        # Assuming student income might have different sources like scholarships\n        self.total_income += amount\n\n    def add_expense(self, amount):\n        # Additional expenses could include tuition and fees\n        self.total_expenses += amount\n\n    def add_tuition_fee(self, amount):\n        self.tuition_fees += amount\n        self.add_expense(amount)\n```"
  },
  {
    "task": "Construct a parent class for a fitness routine with methods for exercises and duration, then derive a yoga routine class that overrides these methods for flexibility exercises.",
    "code": "```python\nclass FitnessRoutine:\n    def exercises(self):\n        return \"General exercises\"\n\n    def duration(self):\n        return \"30 minutes\"\n\nclass YogaRoutine(FitnessRoutine):\n    def exercises(self):\n        return \"Flexibility exercises\"\n\n    def duration(self):\n        return \"60 minutes\"\n\n# Example usage:\n# yoga = YogaRoutine()\n# print(yoga.exercises())  # Output: Flexibility exercises\n# print(yoga.duration())   # Output: 60 minutes\n```"
  },
  {
    "task": "Set up a base class for a transportation ticket with methods for pricing and validity, and extend it with an airline ticket subclass that overrides these methods for baggage allowance.",
    "code": "```python\nclass TransportationTicket:\n    def __init__(self, price, validity):\n        self.price = price\n        self.validity = validity\n\n    def get_pricing(self):\n        return self.price\n\n    def get_validity(self):\n        return self.validity\n\nclass AirlineTicket(TransportationTicket):\n    def __init__(self, price, validity, baggage_allowance):\n        super().__init__(price, validity)\n        self.baggage_allowance = baggage_allowance\n\n    def get_pricing(self):\n        return self.price + self.baggage_allowance * 10\n\n    def get_validity(self):\n        return f\"{self.validity} with baggage allowance of {self.baggage_allowance}kg\"\n```"
  },
  {
    "task": "Create a foundational class for a digital photo album with properties like album name and date, and derive a vacation album class that overrides the date property to be specific.",
    "code": "```python\nfrom datetime import date\n\nclass DigitalPhotoAlbum:\n    def __init__(self, album_name, album_date):\n        self.album_name = album_name\n        self.album_date = album_date\n\nclass VacationAlbum(DigitalPhotoAlbum):\n    def __init__(self, album_name, vacation_date):\n        super().__init__(album_name, vacation_date)\n\n    @property\n    def album_date(self):\n        return f\"Vacation Date: {self._album_date}\"\n\n    @album_date.setter\n    def album_date(self, value):\n        self._album_date = value\n\n# Example usage\nvacation_album = VacationAlbum(\"Summer Getaway\", date(2023, 6, 15))\nprint(vacation_album.album_name)\nprint(vacation_album.album_date)\n```"
  },
  {
    "task": "Design a base class for a home appliance with methods for power usage and warranty, then create a refrigerator subclass that overrides these methods for energy efficiency.",
    "code": "```python\nclass HomeAppliance:\n    def power_usage(self):\n        return \"Power usage details not specified.\"\n\n    def warranty(self):\n        return \"Warranty details not specified.\"\n\nclass Refrigerator(HomeAppliance):\n    def power_usage(self):\n        return \"This refrigerator uses energy-efficient technology.\"\n\n    def warranty(self):\n        return \"This refrigerator comes with a 5-year warranty.\"\n```"
  },
  {
    "task": "Develop a superclass for a software update with methods for versioning and patch notes, then extend it with a security update subclass that overrides these methods for vulnerabilities.",
    "code": "```python\nclass SoftwareUpdate:\n    def __init__(self, version, patch_notes):\n        self.version = version\n        self.patch_notes = patch_notes\n\n    def get_version(self):\n        return f\"Version: {self.version}\"\n\n    def get_patch_notes(self):\n        return f\"Patch Notes: {self.patch_notes}\"\n\nclass SecurityUpdate(SoftwareUpdate):\n    def __init__(self, version, vulnerabilities):\n        super().__init__(version, \"Security Update\")\n        self.vulnerabilities = vulnerabilities\n\n    def get_version(self):\n        return f\"Security Update Version: {self.version}\"\n\n    def get_patch_notes(self):\n        return f\"Vulnerabilities Addressed: {self.vulnerabilities}\"\n```"
  },
  {
    "task": "Implement a base class for a musical performance with methods for rehearsal and execution, then create a concert performance subclass that overrides these methods for live audience.",
    "code": "```python\nclass MusicalPerformance:\n    def rehearsal(self):\n        return \"Rehearsing the performance.\"\n\n    def execution(self):\n        return \"Executing the performance.\"\n\nclass ConcertPerformance(MusicalPerformance):\n    def rehearsal(self):\n        return \"Rehearsing the concert for a live audience.\"\n\n    def execution(self):\n        return \"Executing the concert for a live audience.\"\n```"
  },
  {
    "task": "Construct a parent class for an academic degree with methods for course requirements and credits, then derive a master's degree class that overrides these methods for advanced studies.",
    "code": "```python\nclass AcademicDegree:\n    def course_requirements(self):\n        return \"General course requirements for the degree.\"\n\n    def credits(self):\n        return \"General credit requirements for the degree.\"\n\nclass MastersDegree(AcademicDegree):\n    def course_requirements(self):\n        return \"Advanced course requirements for the master's degree.\"\n\n    def credits(self):\n        return \"Advanced credit requirements for the master's degree.\"\n```"
  },
  {
    "task": "Set up a base class for a weather forecast with methods for temperature and conditions, and extend it with a winter forecast subclass that overrides these methods for snow conditions.",
    "code": "```python\nclass WeatherForecast:\n    def get_temperature(self):\n        return \"Temperature data not available\"\n\n    def get_conditions(self):\n        return \"Weather conditions not available\"\n\nclass WinterForecast(WeatherForecast):\n    def get_temperature(self):\n        return \"Below freezing\"\n\n    def get_conditions(self):\n        return \"Snowy conditions expected\"\n```"
  },
  {
    "task": "Create a foundational class for a personal diary with properties like date and entries, and derive a travel diary class that overrides the date property with travel dates.",
    "code": "```python\nfrom datetime import date\n\nclass PersonalDiary:\n    def __init__(self, diary_date, entries):\n        self.date = diary_date\n        self.entries = entries\n\nclass TravelDiary(PersonalDiary):\n    def __init__(self, travel_date, entries):\n        super().__init__(travel_date, entries)\n        self.date = travel_date\n\n# Example usage\npersonal = PersonalDiary(date.today(), [\"Entry 1\", \"Entry 2\"])\ntravel = TravelDiary(\"2023-10-01\", [\"Visited Rome\", \"Took photos\"])\n```"
  },
  {
    "task": "Design a base class for a pet with methods for feeding and grooming, then create a cat subclass that overrides these methods with specific food preferences.",
    "code": "```python\nclass Pet:\n    def feed(self):\n        print(\"Feeding the pet\")\n\n    def groom(self):\n        print(\"Grooming the pet\")\n\nclass Cat(Pet):\n    def feed(self):\n        print(\"Feeding the cat with fish\")\n\n    def groom(self):\n        print(\"Grooming the cat with a brush\")\n```"
  },
  {
    "task": "Develop a superclass for a software library with methods for installation and updates, then extend it with a graphics library subclass that overrides these methods for rendering capabilities.",
    "code": "```python\nclass SoftwareLibrary:\n    def install(self):\n        print(\"Installing software library.\")\n\n    def update(self):\n        print(\"Updating software library.\")\n\nclass GraphicsLibrary(SoftwareLibrary):\n    def install(self):\n        print(\"Installing graphics library with rendering capabilities.\")\n\n    def update(self):\n        print(\"Updating graphics library with rendering capabilities.\")\n```"
  },
  {
    "task": "Implement a base class for a political campaign with methods for fundraising and events, then create a presidential campaign subclass that overrides these methods for national scale.",
    "code": "```python\nclass PoliticalCampaign:\n    def __init__(self, candidate_name):\n        self.candidate_name = candidate_name\n\n    def fundraising(self):\n        print(f\"{self.candidate_name} is holding a local fundraising event.\")\n\n    def events(self):\n        print(f\"{self.candidate_name} is attending a community event.\")\n\nclass PresidentialCampaign(PoliticalCampaign):\n    def fundraising(self):\n        print(f\"{self.candidate_name} is holding a national fundraising event.\")\n\n    def events(self):\n        print(f\"{self.candidate_name} is attending a national rally.\")\n\n# Example usage:\n# campaign = PresidentialCampaign(\"John Doe\")\n# campaign.fundraising()\n# campaign.events()\n```"
  },
  {
    "task": "Construct a parent class for an automotive part with methods for durability and replacement, then derive an engine part class that overrides these methods for performance.",
    "code": "```python\nclass AutomotivePart:\n    def durability(self):\n        return \"Standard durability\"\n\n    def replacement(self):\n        return \"Standard replacement procedure\"\n\nclass EnginePart(AutomotivePart):\n    def durability(self):\n        return \"Enhanced durability for performance\"\n\n    def replacement(self):\n        return \"Specialized engine replacement procedure\"\n```"
  },
  {
    "task": "Set up a base class for an online tutorial with methods for lessons and quizzes, and extend it with a coding tutorial subclass that overrides these methods for interactive exercises.",
    "code": "```python\nclass OnlineTutorial:\n    def lessons(self):\n        return \"This is a lesson from the base tutorial.\"\n\n    def quizzes(self):\n        return \"This is a quiz from the base tutorial.\"\n\nclass CodingTutorial(OnlineTutorial):\n    def lessons(self):\n        return \"This is an interactive coding lesson.\"\n\n    def quizzes(self):\n        return \"This is an interactive coding quiz.\"\n\n# Example usage\nbase_tutorial = OnlineTutorial()\ncoding_tutorial = CodingTutorial()\n\nprint(base_tutorial.lessons())\nprint(base_tutorial.quizzes())\n\nprint(coding_tutorial.lessons())\nprint(coding_tutorial.quizzes())\n```"
  },
  {
    "task": "Create a foundational class for a personal collection with properties like item type and value, and derive a stamp collection class that overrides the item type property to be 'stamps'.",
    "code": "```python\nclass Collection:\n    def __init__(self, item_type, value):\n        self.item_type = item_type\n        self.value = value\n\nclass StampCollection(Collection):\n    def __init__(self, value):\n        super().__init__('stamps', value)\n```"
  },
  {
    "task": "Design a base class for a video game character with methods for health and abilities, then create a warrior character subclass that overrides these methods for strength.",
    "code": "```python\nclass GameCharacter:\n    def __init__(self, name):\n        self.name = name\n        self.health = 100\n    \n    def get_health(self):\n        return self.health\n    \n    def abilities(self):\n        return \"Basic Abilities\"\n\nclass Warrior(GameCharacter):\n    def __init__(self, name):\n        super().__init__(name)\n        self.strength = 150\n    \n    def get_health(self):\n        return self.health + 50\n    \n    def abilities(self):\n        return \"Warrior Abilities: High Strength\"\n\n# Example usage:\n# character = Warrior(\"Thor\")\n# print(character.get_health())\n# print(character.abilities())\n```"
  },
  {
    "task": "Develop a superclass for an event planner with methods for scheduling and budgeting, then extend it with a wedding planner subclass that overrides these methods for ceremony details.",
    "code": "```python\nclass EventPlanner:\n    def schedule(self, date, time):\n        return f\"Event scheduled on {date} at {time}.\"\n\n    def budget(self, amount):\n        return f\"Event budget set to ${amount}.\"\n\nclass WeddingPlanner(EventPlanner):\n    def schedule(self, date, time, ceremony_type):\n        return f\"Wedding {ceremony_type} ceremony scheduled on {date} at {time}.\"\n\n    def budget(self, amount, ceremony_details):\n        return f\"Wedding budget set to ${amount} with ceremony details: {ceremony_details}.\"\n\n# Example usage\nevent = EventPlanner()\nprint(event.schedule(\"2023-05-21\", \"15:00\"))\nprint(event.budget(5000))\n\nwedding = WeddingPlanner()\nprint(wedding.schedule(\"2023-06-15\", \"16:00\", \"traditional\"))\nprint(wedding.budget(10000, \"Includes venue, catering, and decorations\"))\n```"
  },
  {
    "task": "Implement a base class for a software feature with methods for functionality and user feedback, then create a beta feature subclass that overrides these methods for testing.",
    "code": "```python\nclass Feature:\n    def functionality(self):\n        return \"Standard feature functionality.\"\n\n    def user_feedback(self):\n        return \"Standard user feedback.\"\n\nclass BetaFeature(Feature):\n    def functionality(self):\n        return \"Beta feature functionality for testing.\"\n\n    def user_feedback(self):\n        return \"Beta user feedback for testing.\"\n```"
  },
  {
    "task": "Construct a parent class for a gardening tool with methods for usage and maintenance, then derive a lawn mower class that overrides these methods for grass cutting.",
    "code": "```python\nclass GardeningTool:\n    def usage(self):\n        return \"Use the tool for general gardening tasks.\"\n\n    def maintenance(self):\n        return \"Maintain the tool regularly.\"\n\nclass LawnMower(GardeningTool):\n    def usage(self):\n        return \"Use the lawn mower for cutting grass.\"\n\n    def maintenance(self):\n        return \"Sharpen the blades and check the oil regularly for maintenance.\"\n```"
  },
  {
    "task": "Set up a base class for a household chore with methods for time and effort, and extend it with a cleaning chore subclass that overrides these methods for dirt removal.",
    "code": "```python\nclass HouseholdChore:\n    def time(self):\n        return \"Time needed for the chore\"\n\n    def effort(self):\n        return \"Effort needed for the chore\"\n\nclass CleaningChore(HouseholdChore):\n    def time(self):\n        return \"Time needed for cleaning\"\n\n    def effort(self):\n        return \"Effort needed for dirt removal\"\n```"
  },
  {
    "task": "Create a foundational class for a personal project with properties like name and deadline, and derive a coding project class that overrides the deadline property for milestones.",
    "code": "```python\nclass Project:\n    def __init__(self, name, deadline):\n        self.name = name\n        self.deadline = deadline\n\nclass CodingProject(Project):\n    def __init__(self, name, deadline, milestones):\n        super().__init__(name, deadline)\n        self.milestones = milestones\n\n    @property\n    def deadline(self):\n        return self.milestones\n\n    @deadline.setter\n    def deadline(self, milestones):\n        self.milestones = milestones\n```"
  },
  {
    "task": "Design a base class for a holiday celebration with methods for traditions and activities, then create a Christmas celebration subclass that overrides these methods for gift exchange.",
    "code": "```python\nclass HolidayCelebration:\n    def traditions(self):\n        return \"General holiday traditions.\"\n\n    def activities(self):\n        return \"General holiday activities.\"\n\nclass ChristmasCelebration(HolidayCelebration):\n    def traditions(self):\n        return \"Christmas traditions include decorating a tree and singing carols.\"\n\n    def activities(self):\n        return \"Christmas activities include gift exchange and family dinner.\"\n\n# Example usage\nholiday = HolidayCelebration()\nchristmas = ChristmasCelebration()\nprint(holiday.traditions())  # Output: General holiday traditions.\nprint(holiday.activities())  # Output: General holiday activities.\nprint(christmas.traditions())  # Output: Christmas traditions include decorating a tree and singing carols.\nprint(christmas.activities())  # Output: Christmas activities include gift exchange and family dinner.\n```"
  },
  {
    "task": "Develop a superclass for a customer feedback system with methods for collecting and analyzing, then extend it with a product feedback subclass that overrides these methods for reviews.",
    "code": "```python\nclass CustomerFeedback:\n    def collect_feedback(self, feedback):\n        # Collect general feedback\n        self.feedback = feedback\n\n    def analyze_feedback(self):\n        # Analyze general feedback\n        return f\"Analyzing general feedback: {self.feedback}\"\n\nclass ProductFeedback(CustomerFeedback):\n    def collect_feedback(self, feedback):\n        # Collect product-specific feedback\n        self.feedback = feedback\n\n    def analyze_feedback(self):\n        # Analyze product-specific feedback\n        return f\"Analyzing product feedback: {self.feedback}\"\n```"
  },
  {
    "task": "Implement a base class for a civic service with methods for public engagement and policy, then create a community service subclass that overrides these methods for local impact.",
    "code": "```python\nclass CivicService:\n    def public_engagement(self):\n        return \"Engaging with the public on a national level.\"\n\n    def policy(self):\n        return \"Implementing national policies.\"\n\nclass CommunityService(CivicService):\n    def public_engagement(self):\n        return \"Engaging with the public on a local level.\"\n\n    def policy(self):\n        return \"Implementing local policies.\"\n```"
  },
  {
    "task": "Construct a parent class for a culinary ingredient with methods for flavor and preparation, then derive a spice ingredient class that overrides these methods for seasoning.",
    "code": "```python\nclass CulinaryIngredient:\n    def flavor(self):\n        return \"Generic flavor\"\n\n    def preparation(self):\n        return \"Generic preparation\"\n\nclass SpiceIngredient(CulinaryIngredient):\n    def flavor(self):\n        return \"Spicy flavor\"\n\n    def preparation(self):\n        return \"Grind or crush for seasoning\"\n```"
  },
  {
    "task": "Set up a base class for a scientific experiment with methods for hypothesis and testing, and extend it with a chemistry experiment subclass that overrides these methods for reactions.",
    "code": "```python\nclass ScientificExperiment:\n    def hypothesis(self):\n        return \"Formulating a general hypothesis for the experiment.\"\n    \n    def testing(self):\n        return \"Conducting general experiment tests.\"\n\nclass ChemistryExperiment(ScientificExperiment):\n    def hypothesis(self):\n        return \"Formulating a hypothesis specific to chemical reactions.\"\n    \n    def testing(self):\n        return \"Conducting tests and observations for chemical reactions.\"\n```"
  },
  {
    "task": "Create a foundational class for an inventory system with properties like item ID and quantity, and derive a warehouse inventory class that overrides the quantity property for bulk storage.",
    "code": "```python\nclass InventoryItem:\n    def __init__(self, item_id, quantity):\n        self.item_id = item_id\n        self.quantity = quantity\n\nclass WarehouseInventoryItem(InventoryItem):\n    def __init__(self, item_id, bulk_quantity):\n        super().__init__(item_id, bulk_quantity * 100)\n```"
  },
  {
    "task": "Design a base class for a travel agency with methods for itinerary and bookings, then create a luxury travel subclass that overrides these methods for premium services.",
    "code": "```python\nclass TravelAgency:\n    def itinerary(self):\n        return \"Standard itinerary\"\n\n    def bookings(self):\n        return \"Standard booking\"\n\nclass LuxuryTravel(TravelAgency):\n    def itinerary(self):\n        return \"Luxury itinerary with premium experiences\"\n\n    def bookings(self):\n        return \"Luxury booking with premium accommodations\"\n```"
  },
  {
    "task": "Develop a superclass for an educational tool with methods for teaching and assessment, then extend it with a math tool subclass that overrides these methods for problem-solving.",
    "code": "```python\nclass EducationalTool:\n    def teach(self):\n        return \"Teaching generic concepts.\"\n\n    def assess(self):\n        return \"Assessing general knowledge.\"\n\n\nclass MathTool(EducationalTool):\n    def teach(self):\n        return \"Teaching mathematical concepts.\"\n\n    def assess(self):\n        return \"Assessing problem-solving skills.\"\n\n\n# Example usage:\nedu_tool = EducationalTool()\nmath_tool = MathTool()\n\nprint(edu_tool.teach())  # Output: Teaching generic concepts.\nprint(edu_tool.assess())  # Output: Assessing general knowledge.\n\nprint(math_tool.teach())  # Output: Teaching mathematical concepts.\nprint(math_tool.assess())  # Output: Assessing problem-solving skills.\n```"
  },
  {
    "task": "Implement a base class for a community project with methods for planning and execution, then create a park renovation subclass that overrides these methods for landscaping.",
    "code": "```python\nclass CommunityProject:\n    def plan(self):\n        print(\"Planning community project...\")\n\n    def execute(self):\n        print(\"Executing community project...\")\n\nclass ParkRenovation(CommunityProject):\n    def plan(self):\n        print(\"Planning park renovation with landscaping...\")\n\n    def execute(self):\n        print(\"Executing park renovation with landscaping...\")\n\n# Example usage:\n# project = ParkRenovation()\n# project.plan()\n# project.execute()\n```"
  },
  {
    "task": "Construct a parent class for a digital marketing strategy with methods for targeting and engagement, then derive a social media strategy class that overrides these methods for platforms.",
    "code": "```python\nclass DigitalMarketingStrategy:\n    def targeting(self):\n        print(\"General targeting strategy.\")\n\n    def engagement(self):\n        print(\"General engagement strategy.\")\n\nclass SocialMediaStrategy(DigitalMarketingStrategy):\n    def targeting(self):\n        print(\"Social media specific targeting strategy.\")\n\n    def engagement(self):\n        print(\"Social media specific engagement strategy.\")\n\n# Example usage\ngeneral_strategy = DigitalMarketingStrategy()\ngeneral_strategy.targeting()\ngeneral_strategy.engagement()\n\nsocial_media_strategy = SocialMediaStrategy()\nsocial_media_strategy.targeting()\nsocial_media_strategy.engagement()\n```"
  },
  {
    "task": "Set up a base class for a scientific publication with methods for research and review, and extend it with a journal article subclass that overrides these methods for peer review.",
    "code": "```python\nclass ScientificPublication:\n    def research(self):\n        return \"Conducting standard research...\"\n\n    def review(self):\n        return \"Standard review process...\"\n\nclass JournalArticle(ScientificPublication):\n    def research(self):\n        return \"Conducting advanced research for journal article...\"\n\n    def review(self):\n        return \"Peer review process for journal article...\"\n```"
  },
  {
    "task": "Create a foundational class for a software module with properties like name and dependencies, and derive a user interface module class that overrides the dependencies property for UI libraries.",
    "code": "```python\nclass SoftwareModule:\n    def __init__(self, name, dependencies):\n        self.name = name\n        self.dependencies = dependencies\n\nclass UIModule(SoftwareModule):\n    def __init__(self, name, dependencies=None):\n        if dependencies is None:\n            dependencies = ['UI Library']\n        super().__init__(name, dependencies)\n\n# Example usage\nbase_module = SoftwareModule(\"BaseModule\", [\"BaseLibrary\"])\nui_module = UIModule(\"UIModule\")\n```"
  },
  {
    "task": "Design a base class for a fashion line with methods for design and production, then create a summer collection subclass that overrides these methods for seasonal trends.",
    "code": "```python\nclass FashionLine:\n    def design(self):\n        return \"Designing a general fashion line.\"\n\n    def production(self):\n        return \"Producing a general fashion line.\"\n\nclass SummerCollection(FashionLine):\n    def design(self):\n        return \"Designing a summer collection with seasonal trends.\"\n\n    def production(self):\n        return \"Producing a summer collection focusing on lightweight materials.\"\n```"
  },
  {
    "task": "Develop a superclass for a family tree with methods for ancestry and descendants, then extend it with a royal lineage subclass that overrides these methods for historical accuracy.",
    "code": "```python\nclass FamilyTree:\n    def __init__(self, name):\n        self.name = name\n        self.parents = []\n        self.children = []\n\n    def add_parent(self, parent):\n        self.parents.append(parent)\n\n    def add_child(self, child):\n        self.children.append(child)\n\n    def ancestry(self):\n        ancestors = []\n        for parent in self.parents:\n            ancestors.append(parent.name)\n            ancestors.extend(parent.ancestry())\n        return ancestors\n\n    def descendants(self):\n        descendants = []\n        for child in self.children:\n            descendants.append(child.name)\n            descendants.extend(child.descendants())\n        return descendants\n\nclass RoyalLineage(FamilyTree):\n    def ancestry(self):\n        # Assume historical records provide a different method to track ancestry\n        return [\"Historical Ancestry Record: \" + self.name]\n\n    def descendants(self):\n        # Assume historical records provide a different method to track descendants\n        return [\"Historical Descendants Record: \" + self.name]\n```"
  },
  {
    "task": "Implement a base class for a musical score with methods for composition and arrangement, then create a symphony subclass that overrides these methods for orchestration.",
    "code": "```python\nclass MusicalScore:\n    def composition(self):\n        return \"Composing a generic musical piece.\"\n\n    def arrangement(self):\n        return \"Arranging the composition.\"\n\nclass Symphony(MusicalScore):\n    def composition(self):\n        return \"Composing a symphony.\"\n\n    def arrangement(self):\n        return \"Orchestrating the symphony.\"\n```"
  },
  {
    "task": "Construct a parent class for a historical record with methods for events and dates, then derive a war history class that overrides these methods for battles.",
    "code": "```python\nclass HistoricalRecord:\n    def get_event(self):\n        return \"General historical event\"\n\n    def get_date(self):\n        return \"General date\"\n\nclass WarHistory(HistoricalRecord):\n    def get_event(self):\n        return \"Battle event\"\n\n    def get_date(self):\n        return \"Battle date\"\n```"
  },
  {
    "task": "Set up a base class for a pet adoption service with methods for application and approval, and extend it with a dog adoption subclass that overrides these methods for breed compatibility.",
    "code": "```python\nclass PetAdoptionService:\n    def apply_for_adoption(self, applicant_info):\n        return f\"Application submitted for {applicant_info}\"\n\n    def approve_application(self, applicant_info):\n        return f\"Application approved for {applicant_info}\"\n\nclass DogAdoptionService(PetAdoptionService):\n    def apply_for_adoption(self, applicant_info):\n        return f\"Dog adoption application submitted for {applicant_info}\"\n\n    def approve_application(self, applicant_info, breed_compatibility):\n        if breed_compatibility:\n            return f\"Dog adoption application approved for {applicant_info}\"\n        else:\n            return f\"Dog adoption application denied for {applicant_info} due to breed incompatibility\"\n```"
  },
  {
    "task": "Create a foundational class for a financial report with properties like fiscal year and summary, and derive an annual report class that overrides the fiscal year property for yearly data.",
    "code": "```python\nclass FinancialReport:\n    def __init__(self, fiscal_year, summary):\n        self.fiscal_year = fiscal_year\n        self.summary = summary\n\nclass AnnualReport(FinancialReport):\n    def __init__(self, fiscal_year, summary):\n        super().__init__(fiscal_year, summary)\n\n    @property\n    def fiscal_year(self):\n        return self._fiscal_year\n\n    @fiscal_year.setter\n    def fiscal_year(self, value):\n        self._fiscal_year = f\"Yearly Data: {value}\"\n```"
  },
  {
    "task": "Design a base class for a movie franchise with methods for casting and production, then create a sequel subclass that overrides these methods for continuity.",
    "code": "```python\nclass MovieFranchise:\n    def casting(self):\n        return \"Original Cast\"\n\n    def production(self):\n        return \"Original Production Team\"\n\nclass MovieSequel(MovieFranchise):\n    def casting(self):\n        return \"Sequel Cast\"\n\n    def production(self):\n        return \"Sequel Production Team\"\n```"
  },
  {
    "task": "Develop a superclass for a real estate listing with methods for pricing and description, then extend it with a luxury listing subclass that overrides these methods for high-end features.",
    "code": "```python\nclass RealEstateListing:\n    def __init__(self, location, price, description):\n        self.location = location\n        self.price = price\n        self.description = description\n\n    def get_pricing(self):\n        return f\"Price: {self.price} in {self.location}\"\n\n    def get_description(self):\n        return f\"Description: {self.description}\"\n\nclass LuxuryListing(RealEstateListing):\n    def __init__(self, location, price, description, amenities):\n        super().__init__(location, price, description)\n        self.amenities = amenities\n\n    def get_pricing(self):\n        return f\"Luxury Price: {self.price * 1.5} in {self.location}\"\n\n    def get_description(self):\n        return f\"Luxury Description: {self.description} with amenities: {', '.join(self.amenities)}\"\n```"
  },
  {
    "task": "Implement a base class for a mobile app with methods for user interface and performance, then create a gaming app subclass that overrides these methods for graphics and speed.",
    "code": "```python\nclass MobileApp:\n    def user_interface(self):\n        print(\"Default mobile app user interface.\")\n\n    def performance(self):\n        print(\"Default mobile app performance.\")\n\nclass GamingApp(MobileApp):\n    def user_interface(self):\n        print(\"Enhanced gaming app graphics interface.\")\n\n    def performance(self):\n        print(\"Optimized gaming app speed.\")\n```"
  },
  {
    "task": "Construct a parent class for a corporate policy with methods for compliance and enforcement, then derive an HR policy class that overrides these methods for employee relations.",
    "code": "```python\nclass CorporatePolicy:\n    def compliance(self):\n        return \"Corporate compliance guidelines\"\n\n    def enforcement(self):\n        return \"Corporate enforcement procedures\"\n\nclass HRPolicy(CorporatePolicy):\n    def compliance(self):\n        return \"HR compliance guidelines for employee relations\"\n\n    def enforcement(self):\n        return \"HR enforcement procedures for employee relations\"\n```"
  },
  {
    "task": "Set up a base class for a scientific calculator with methods for basic operations and advanced functions, and extend it with a graphing calculator subclass that overrides these methods for plotting.",
    "code": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nclass ScientificCalculator:\n    def add(self, a, b):\n        return a + b\n\n    def subtract(self, a, b):\n        return a - b\n\n    def multiply(self, a, b):\n        return a * b\n\n    def divide(self, a, b):\n        if b != 0:\n            return a / b\n        else:\n            raise ValueError(\"Cannot divide by zero\")\n\n    def power(self, a, b):\n        return a ** b\n\n    def square_root(self, a):\n        if a >= 0:\n            return a ** 0.5\n        else:\n            raise ValueError(\"Cannot take square root of negative number\")\n\nclass GraphingCalculator(ScientificCalculator):\n    def plot_add(self, a, b):\n        x = np.array([a, b])\n        y = self.add(a, b) * np.ones_like(x)\n        plt.plot(x, y, label=f\"{a} + {b}\")\n        plt.legend()\n        plt.show()\n\n    def plot_subtract(self, a, b):\n        x = np.array([a, b])\n        y = self.subtract(a, b) * np.ones_like(x)\n        plt.plot(x, y, label=f\"{a} - {b}\")\n        plt.legend()\n        plt.show()\n\n    def plot_multiply(self, a, b):\n        x = np.array([a, b])\n        y = self.multiply(a, b) * np.ones_like(x)\n        plt.plot(x, y, label=f\"{a} * {b}\")\n        plt.legend()\n        plt.show()\n\n    def plot_divide(self, a, b):\n        if b != 0:\n            x = np.array([a, b])\n            y = self.divide(a, b) * np.ones_like(x)\n            plt.plot(x, y, label=f\"{a} / {b}\")\n            plt.legend()\n            plt.show()\n        else:\n            raise ValueError(\"Cannot divide by zero\")\n\n    def plot_power(self, a, b):\n        x = np.linspace(0, a, 100)\n        y = x ** b\n        plt.plot(x, y, label=f\"{a}^{b}\")\n        plt.legend()\n        plt.show()\n\n    def plot_square_root(self, a):\n        if a >= 0:\n            x = np.linspace(0, a, 100)\n            y = np.sqrt(x)\n            plt.plot(x, y, label=f\"sqrt({a})\")\n            plt.legend()\n            plt.show()\n        else:\n            raise ValueError(\"Cannot take square root of negative number\")\n```"
  },
  {
    "task": "Create a foundational class for a children's book with properties like age group and illustrations, and derive a picture book class that overrides the illustrations property to be more prominent.",
    "code": "```python\nclass ChildrensBook:\n    def __init__(self, title, author, age_group, illustrations):\n        self.title = title\n        self.author = author\n        self.age_group = age_group\n        self.illustrations = illustrations\n\nclass PictureBook(ChildrensBook):\n    def __init__(self, title, author, age_group):\n        super().__init__(title, author, age_group, illustrations=\"Prominent illustrations\")\n```"
  },
  {
    "task": "Design a base class for a cooking class with methods for ingredients and techniques, then create a baking class subclass that overrides these methods for dough preparation.",
    "code": "```python\nclass CookingClass:\n    def get_ingredients(self):\n        return \"Generic Ingredients\"\n\n    def techniques(self):\n        return \"Generic Techniques\"\n\nclass BakingClass(CookingClass):\n    def get_ingredients(self):\n        return \"Flour, Water, Yeast, Salt\"\n\n    def techniques(self):\n        return \"Kneading, Proofing, Baking\"\n\n# Example usage\nbaking_class = BakingClass()\nprint(baking_class.get_ingredients())\nprint(baking_class.techniques())\n```"
  },
  {
    "task": "Develop a superclass for a public transportation system with methods for routes and schedules, then extend it with a metro system subclass that overrides these methods for urban areas.",
    "code": "```python\nclass PublicTransportationSystem:\n    def routes(self):\n        return \"General routes for public transportation.\"\n\n    def schedules(self):\n        return \"General schedules for public transportation.\"\n\nclass MetroSystem(PublicTransportationSystem):\n    def routes(self):\n        return \"Urban metro routes.\"\n\n    def schedules(self):\n        return \"Urban metro schedules.\"\n\n# Example usage\nmetro = MetroSystem()\nprint(metro.routes())    # Output: Urban metro routes.\nprint(metro.schedules()) # Output: Urban metro schedules.\n```"
  },
  {
    "task": "Implement a base class for a music store inventory with methods for stock and sales, then create a vinyl record subclass that overrides these methods for collectible items.",
    "code": "```python\nclass MusicStoreInventory:\n    def __init__(self, name, stock):\n        self.name = name\n        self.stock = stock\n\n    def add_stock(self, quantity):\n        self.stock += quantity\n\n    def sell(self, quantity):\n        if quantity <= self.stock:\n            self.stock -= quantity\n            return True\n        return False\n\nclass VinylRecord(MusicStoreInventory):\n    def __init__(self, name, stock, collectible_value):\n        super().__init__(name, stock)\n        self.collectible_value = collectible_value\n\n    def add_stock(self, quantity):\n        self.stock += quantity * 2  # Assume collectible items increase stock differently\n\n    def sell(self, quantity):\n        if quantity <= self.stock:\n            self.stock -= quantity\n            self.collectible_value += 10 * quantity  # Increase collectible value on sale\n            return True\n        return False\n```"
  },
  {
    "task": "Construct a parent class for a legal contract with methods for terms and conditions, then derive a rental agreement class that overrides these methods for tenant rights.",
    "code": "```python\nclass LegalContract:\n    def terms(self):\n        return \"General terms of the contract.\"\n\n    def conditions(self):\n        return \"General conditions of the contract.\"\n\nclass RentalAgreement(LegalContract):\n    def terms(self):\n        return \"Specific terms for rental agreement.\"\n\n    def conditions(self):\n        return \"Specific conditions for rental agreement, including tenant rights.\"\n```"
  },
  {
    "task": "Set up a base class for a journalism piece with methods for reporting and editing, and extend it with an investigative article subclass that overrides these methods for in-depth analysis.",
    "code": "```python\nclass JournalismPiece:\n    def report(self):\n        return \"Reporting news.\"\n\n    def edit(self):\n        return \"Editing the piece.\"\n\nclass InvestigativeArticle(JournalismPiece):\n    def report(self):\n        return \"In-depth reporting of the issue.\"\n\n    def edit(self):\n        return \"Thorough editing for accuracy and detail.\"\n```"
  },
  {
    "task": "Create a foundational class for a wildlife reserve with properties like area and species, and derive a bird sanctuary class that overrides the species property for avians.",
    "code": "```python\nclass WildlifeReserve:\n    def __init__(self, area, species):\n        self.area = area\n        self.species = species\n\nclass BirdSanctuary(WildlifeReserve):\n    def __init__(self, area, bird_species):\n        super().__init__(area, bird_species)\n```"
  },
  {
    "task": "Design a base class for a subscription box service with methods for curation and delivery, then create a gourmet food box subclass that overrides these methods for artisanal products.",
    "code": "```python\nclass SubscriptionBox:\n    def curation(self):\n        return \"Curating standard items for the subscription box.\"\n\n    def delivery(self):\n        return \"Delivering the subscription box.\"\n\nclass GourmetFoodBox(SubscriptionBox):\n    def curation(self):\n        return \"Curating artisanal gourmet products for the food box.\"\n\n    def delivery(self):\n        return \"Delivering the gourmet food box with care.\"\n```"
  },
  {
    "task": "Develop a superclass for a fitness app with methods for tracking and motivation, then extend it with a running app subclass that overrides these methods for pace and distance.",
    "code": "```python\nclass FitnessApp:\n    def track(self):\n        return \"Tracking fitness activities.\"\n\n    def motivate(self):\n        return \"Stay motivated and keep going!\"\n\nclass RunningApp(FitnessApp):\n    def track(self):\n        return \"Tracking running pace and distance.\"\n\n    def motivate(self):\n        return \"Push your limits and run faster!\"\n```"
  },
  {
    "task": "Implement a base class for a digital portfolio with methods for showcasing and updating, then create an artist portfolio subclass that overrides these methods for galleries.",
    "code": "```python\nclass DigitalPortfolio:\n    def showcase(self):\n        return \"Displaying digital portfolio items.\"\n\n    def update(self):\n        return \"Updating digital portfolio items.\"\n\nclass ArtistPortfolio(DigitalPortfolio):\n    def showcase(self):\n        return \"Displaying artist gallery items.\"\n\n    def update(self):\n        return \"Updating artist gallery items.\"\n```"
  },
  {
    "task": "Construct a parent class for a gaming console with methods for performance and compatibility, then derive a next-gen console class that overrides these methods for new features.",
    "code": "```python\nclass GamingConsole:\n    def performance(self):\n        return \"Standard Performance\"\n\n    def compatibility(self):\n        return \"Compatible with current-gen games\"\n\nclass NextGenConsole(GamingConsole):\n    def performance(self):\n        return \"Enhanced Performance with ray tracing\"\n\n    def compatibility(self):\n        return \"Compatible with next-gen and current-gen games\"\n```"
  },
  {
    "task": "Set up a base class for a cultural festival with methods for events and participation, and extend it with a music festival subclass that overrides these methods for performances.",
    "code": "```python\nclass CulturalFestival:\n    def events(self):\n        return \"List of cultural events.\"\n\n    def participation(self):\n        return \"General participation guidelines.\"\n\nclass MusicFestival(CulturalFestival):\n    def events(self):\n        return \"List of music performances.\"\n\n    def participation(self):\n        return \"Music festival participation guidelines.\"\n```"
  }
]