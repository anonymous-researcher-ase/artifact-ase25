[
  {
    "task": "Create a list of the first ten positive integers and calculate their sum.",
    "code": "```python\nnumbers = list(range(1, 11))\ntotal_sum = sum(numbers)\n```"
  },
  {
    "task": "Write a program to reverse the order of elements in a given list.",
    "code": "```python\ndef reverse_list(lst):\n    return lst[::-1]\n\n# Example usage:\nmy_list = [1, 2, 3, 4, 5]\nreversed_list = reverse_list(my_list)\nprint(reversed_list)\n```"
  },
  {
    "task": "Implement a function that takes a list and returns the list with duplicates removed.",
    "code": "```python\ndef remove_duplicates(input_list):\n    return list(dict.fromkeys(input_list))\n```"
  },
  {
    "task": "Create a list of names and sort them in alphabetical order.",
    "code": "```python\nnames = [\"Alice\", \"Bob\", \"Charlie\", \"David\"]\nnames.sort()\n```"
  },
  {
    "task": "Write a function that appends a new element to an existing list.",
    "code": "```python\ndef append_to_list(existing_list, new_element):\n    existing_list.append(new_element)\n    return existing_list\n```"
  },
  {
    "task": "Generate a list of the first 20 even numbers.",
    "code": "```python\neven_numbers = [x * 2 for x in range(1, 21)]\n```"
  },
  {
    "task": "Create a nested list (a list of lists) and access an element from the inner list.",
    "code": "```python\nnested_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nelement = nested_list[1][2]\n```"
  },
  {
    "task": "Write a program that finds the maximum value in a list of integers.",
    "code": "```python\ndef find_max_value(numbers):\n    return max(numbers)\n\n# Example usage\nnumbers = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]\nmax_value = find_max_value(numbers)\nprint(max_value)\n```"
  },
  {
    "task": "Implement a function to merge two lists into a single list without duplicates.",
    "code": "```python\ndef merge_lists(list1, list2):\n    return list(set(list1) | set(list2))\n```"
  },
  {
    "task": "Create a list from user input, then display the list in reverse order.",
    "code": "```python\nuser_input = input(\"Enter elements separated by space: \")\nelements = user_input.split()\nelements.reverse()\nprint(elements)\n```"
  },
  {
    "task": "Write a function that takes a list and returns a new list containing only the even numbers.",
    "code": "```python\ndef filter_even_numbers(numbers):\n    return [num for num in numbers if num % 2 == 0]\n```"
  },
  {
    "task": "Generate a list of squares for the numbers 1 through 10.",
    "code": "```python\nsquares = [i**2 for i in range(1, 11)]\n```"
  },
  {
    "task": "Create a list of floating-point numbers and find their average.",
    "code": "```python\nnumbers = [3.5, 7.2, 5.8, 6.1]\naverage = sum(numbers) / len(numbers)\nprint(average)\n```"
  },
  {
    "task": "Implement a program to rotate the elements of a list to the right by a given number of steps.",
    "code": "```python\ndef rotate_list(lst, steps):\n    if len(lst) == 0:\n        return lst\n    steps = steps % len(lst)\n    return lst[-steps:] + lst[:-steps]\n\n# Example usage:\nmy_list = [1, 2, 3, 4, 5]\nsteps = 2\nrotated_list = rotate_list(my_list, steps)\nprint(rotated_list)  # Output: [4, 5, 1, 2, 3]\n```"
  },
  {
    "task": "Write a function that checks if a list is a palindrome (reads the same forwards and backwards).",
    "code": "```python\ndef is_palindrome(lst):\n    return lst == lst[::-1]\n```"
  },
  {
    "task": "Create a list of random integers and count how many are greater than 50.",
    "code": "```python\nimport random\n\nrandom_integers = [random.randint(1, 100) for _ in range(10)]\ncount_greater_than_50 = len([num for num in random_integers if num > 50])\n```"
  },
  {
    "task": "Write a program that removes the first occurrence of a specified element from a list.",
    "code": "```python\ndef remove_first_occurrence(lst, element):\n    if element in lst:\n        lst.remove(element)\n    return lst\n\n# Example usage\nmy_list = [1, 2, 3, 4, 2, 5]\nelement_to_remove = 2\nresult = remove_first_occurrence(my_list, element_to_remove)\nprint(result)\n```"
  },
  {
    "task": "Implement a function that takes two lists and returns a list containing their intersection.",
    "code": "```python\ndef intersection_of_lists(list1, list2):\n    return [item for item in list1 if item in list2]\n\n# Example usage:\n# list1 = [1, 2, 3, 4]\n# list2 = [3, 4, 5, 6]\n# print(intersection_of_lists(list1, list2))  # Output: [3, 4]\n```"
  },
  {
    "task": "Create a list of prime numbers less than 100.",
    "code": "```python\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\nprimes = [n for n in range(2, 100) if is_prime(n)]\n```"
  },
  {
    "task": "Write a function to split a list into two lists: one with even numbers and one with odd numbers.",
    "code": "```python\ndef split_even_odd(numbers):\n    even_numbers = [num for num in numbers if num % 2 == 0]\n    odd_numbers = [num for num in numbers if num % 2 != 0]\n    return even_numbers, odd_numbers\n```"
  },
  {
    "task": "Create a list of strings and convert all the strings to uppercase.",
    "code": "```python\nstrings = [\"apple\", \"banana\", \"cherry\"]\nuppercase_strings = [s.upper() for s in strings]\n```"
  },
  {
    "task": "Implement a program that removes all elements from a list that are less than a specified value.",
    "code": "```python\ndef remove_elements_less_than(lst, threshold):\n    return [x for x in lst if x >= threshold]\n\n# Example usage\nexample_list = [3, 10, 6, 1, 15, 7]\nthreshold_value = 5\nresult = remove_elements_less_than(example_list, threshold_value)\nprint(result)\n```"
  },
  {
    "task": "Write a function that takes a list and returns a new list with elements in random order.",
    "code": "```python\nimport random\n\ndef shuffle_list(input_list):\n    new_list = input_list[:]\n    random.shuffle(new_list)\n    return new_list\n```"
  },
  {
    "task": "Create a list of tuples where each tuple contains a number and its square.",
    "code": "```python\nnumbers = [1, 2, 3, 4, 5]\nsquared_tuples = [(num, num ** 2) for num in numbers]\n```"
  },
  {
    "task": "Write a program to multiply all elements in a list by a given factor.",
    "code": "```python\ndef multiply_elements(input_list, factor):\n    return [element * factor for element in input_list]\n\n# Example usage:\nnumbers = [1, 2, 3, 4, 5]\nfactor = 3\nresult = multiply_elements(numbers, factor)\nprint(result)\n```"
  },
  {
    "task": "Implement a function that flattens a nested list.",
    "code": "```python\ndef flatten(nested_list):\n    flat_list = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flat_list.extend(flatten(item))\n        else:\n            flat_list.append(item)\n    return flat_list\n```"
  },
  {
    "task": "Create a list of dates and sort them chronologically.",
    "code": "```python\nfrom datetime import datetime\n\ndates = [\n    \"2023-10-12\",\n    \"2022-05-01\",\n    \"2023-01-15\",\n    \"2021-07-23\"\n]\n\ndates = [datetime.strptime(date, \"%Y-%m-%d\") for date in dates]\ndates.sort()\n\nsorted_dates = [date.strftime(\"%Y-%m-%d\") for date in dates]\n```"
  },
  {
    "task": "Write a function that finds the index of the first occurrence of a given element in a list.",
    "code": "```python\ndef find_first_occurrence(lst, element):\n    try:\n        return lst.index(element)\n    except ValueError:\n        return -1\n```"
  },
  {
    "task": "Generate a list of Fibonacci numbers up to a specified limit.",
    "code": "```python\ndef fibonacci_up_to(limit):\n    fib_list = [0, 1]\n    while True:\n        next_fib = fib_list[-1] + fib_list[-2]\n        if next_fib > limit:\n            break\n        fib_list.append(next_fib)\n    return fib_list\n\nlimit = 100  # Example limit\nfibonacci_numbers = fibonacci_up_to(limit)\nprint(fibonacci_numbers)\n```"
  },
  {
    "task": "Create a list of booleans and determine if all are True.",
    "code": "```python\nboolean_list = [True, True, True, False]\nall_true = all(boolean_list)\n```"
  },
  {
    "task": "Write a program to concatenate two lists.",
    "code": "```python\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]\n\nconcatenated_list = list1 + list2\nprint(concatenated_list)\n```"
  },
  {
    "task": "Implement a function that returns the length of a list without using built-in functions.",
    "code": "```python\ndef list_length(lst):\n    length = 0\n    for _ in lst:\n        length += 1\n    return length\n```"
  },
  {
    "task": "Create a list of words and find the longest word.",
    "code": "```python\nwords = [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]\nlongest_word = max(words, key=len)\n```"
  },
  {
    "task": "Write a function that takes a list and a predicate function, returning a list of elements that satisfy the predicate.",
    "code": "```python\ndef filter_list(lst, predicate):\n    return [element for element in lst if predicate(element)]\n```"
  },
  {
    "task": "Generate a list of strings and filter out those with less than 5 characters.",
    "code": "```python\nstrings = [\"apple\", \"bat\", \"banana\", \"cat\", \"elephant\", \"dog\", \"kiwi\"]\nfiltered_strings = [s for s in strings if len(s) >= 5]\n```"
  },
  {
    "task": "Create a list of mixed data types and separate them into lists by type.",
    "code": "```python\nmixed_list = [1, \"hello\", 3.14, True, 42, \"Python\", False, 7.9]\n\nintegers = [item for item in mixed_list if isinstance(item, int)]\nstrings = [item for item in mixed_list if isinstance(item, str)]\nfloats = [item for item in mixed_list if isinstance(item, float)]\nbooleans = [item for item in mixed_list if isinstance(item, bool)]\n\nprint(\"Integers:\", integers)\nprint(\"Strings:\", strings)\nprint(\"Floats:\", floats)\nprint(\"Booleans:\", booleans)\n```"
  },
  {
    "task": "Write a program to find the common elements between two lists.",
    "code": "```python\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [4, 5, 6, 7, 8]\n\ncommon_elements = list(set(list1) & set(list2))\nprint(common_elements)\n```"
  },
  {
    "task": "Implement a function to rotate the elements of a list to the left by a given number of steps.",
    "code": "```python\ndef rotate_left(lst, steps):\n    steps = steps % len(lst)  # handle steps greater than list size\n    return lst[steps:] + lst[:steps]\n```"
  },
  {
    "task": "Create a list of numbers and find the product of all the elements.",
    "code": "```python\nnumbers = [2, 3, 5, 7, 11]\nproduct = 1\nfor number in numbers:\n    product *= number\n```"
  },
  {
    "task": "Write a function that removes all occurrences of a specified element from a list.",
    "code": "```python\ndef remove_all_occurrences(lst, element):\n    return [x for x in lst if x != element]\n```"
  },
  {
    "task": "Generate a list of random numbers and find the median value.",
    "code": "```python\nimport random\n\n# Generate a list of random numbers\nrandom_numbers = [random.randint(1, 100) for _ in range(10)]\n\n# Sort the list\nsorted_numbers = sorted(random_numbers)\n\n# Find the median\nn = len(sorted_numbers)\nif n % 2 == 1:\n    median = sorted_numbers[n // 2]\nelse:\n    median = (sorted_numbers[n // 2 - 1] + sorted_numbers[n // 2]) / 2\n\nprint(\"Random Numbers:\", random_numbers)\nprint(\"Median:\", median)\n```"
  },
  {
    "task": "Create a list of dictionaries and sort them by a specific key.",
    "code": "```python\ndata = [\n    {'name': 'John', 'age': 25},\n    {'name': 'Alice', 'age': 30},\n    {'name': 'Bob', 'age': 20}\n]\n\nsorted_data = sorted(data, key=lambda x: x['age'])\n```"
  },
  {
    "task": "Write a program to split a list into chunks of a specified size.",
    "code": "```python\ndef split_list_into_chunks(lst, chunk_size):\n    return [lst[i:i + chunk_size] for i in range(0, len(lst), chunk_size)]\n\n# Example usage:\nexample_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nchunk_size = 3\nchunks = split_list_into_chunks(example_list, chunk_size)\nprint(chunks)\n```"
  },
  {
    "task": "Implement a function that takes a list and returns a dictionary with the frequency of each element.",
    "code": "```python\ndef frequency_counter(lst):\n    freq_dict = {}\n    for item in lst:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\n```"
  },
  {
    "task": "Create a list of integers and replace all negative numbers with zero.",
    "code": "```python\nnumbers = [3, -1, 4, -5, 2]\nnumbers = [0 if num < 0 else num for num in numbers]\n```"
  },
  {
    "task": "Write a function that returns the first n elements of a list.",
    "code": "```python\ndef first_n_elements(lst, n):\n    return lst[:n]\n```"
  },
  {
    "task": "Generate a list of strings and join them into a single string with spaces.",
    "code": "```python\nstrings = [\"This\", \"is\", \"a\", \"list\", \"of\", \"strings\"]\nresult = \" \".join(strings)\n```"
  },
  {
    "task": "Create a list of lists and find the sum of each inner list.",
    "code": "```python\nlist_of_lists = [\n    [1, 2, 3],\n    [4, 5],\n    [6, 7, 8, 9]\n]\n\nsums = [sum(inner_list) for inner_list in list_of_lists]\nprint(sums)\n```"
  },
  {
    "task": "Write a function that finds the second largest number in a list.",
    "code": "```python\ndef find_second_largest(numbers):\n    if len(numbers) < 2:\n        return None\n    first, second = float('-inf'), float('-inf')\n    for number in numbers:\n        if number > first:\n            first, second = number, first\n        elif first > number > second:\n            second = number\n    return second if second != float('-inf') else None\n```"
  },
  {
    "task": "Generate a list of numbers and remove the duplicates while maintaining order.",
    "code": "```python\ndef remove_duplicates(numbers):\n    seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    return result\n\nnumbers = [1, 2, 3, 2, 4, 1, 5, 6, 3, 7]\nunique_numbers = remove_duplicates(numbers)\n```"
  },
  {
    "task": "Create a list of integers and partition it into two lists: one with numbers above the average and one below.",
    "code": "```python\nnumbers = [10, 20, 30, 40, 50]\naverage = sum(numbers) / len(numbers)\nabove_average = [num for num in numbers if num > average]\nbelow_average = [num for num in numbers if num < average]\n```"
  },
  {
    "task": "Write a program to find the longest increasing subsequence in a list of numbers.",
    "code": "```python\ndef longest_increasing_subsequence(nums):\n    if not nums:\n        return []\n\n    n = len(nums)\n    dp = [1] * n\n    prev = [-1] * n\n\n    for i in range(n):\n        for j in range(i):\n            if nums[i] > nums[j] and dp[i] < dp[j] + 1:\n                dp[i] = dp[j] + 1\n                prev[i] = j\n\n    max_index = max(range(n), key=lambda i: dp[i])\n    lis = []\n    while max_index != -1:\n        lis.append(nums[max_index])\n        max_index = prev[max_index]\n\n    return lis[::-1]\n\n# Example usage:\nnumbers = [10, 9, 2, 5, 3, 7, 101, 18]\nprint(longest_increasing_subsequence(numbers))\n```"
  },
  {
    "task": "Implement a function to zip two lists into a single list of tuples.",
    "code": "```python\ndef zip_lists(list1, list2):\n    return list(zip(list1, list2))\n```"
  },
  {
    "task": "Create a list of characters and count the vowels.",
    "code": "```python\ncharacters = ['a', 'b', 'c', 'e', 'i', 'o', 'u', 'x', 'y', 'z']\nvowels = {'a', 'e', 'i', 'o', 'u'}\nvowel_count = sum(1 for char in characters if char in vowels)\nprint(vowel_count)\n```"
  },
  {
    "task": "Write a function that returns the last n elements of a list.",
    "code": "```python\ndef last_n_elements(lst, n):\n    return lst[-n:]\n```"
  },
  {
    "task": "Generate a list of numbers and split it into two lists: one with positive numbers and one with negative numbers.",
    "code": "```python\nnumbers = [3, -1, 5, -9, 0, 7, -4, 8, -2]\npositive_numbers = [num for num in numbers if num > 0]\nnegative_numbers = [num for num in numbers if num < 0]\n```"
  },
  {
    "task": "Create a list of random integers and find the mode.",
    "code": "```python\nimport random\nfrom collections import Counter\n\nrandom_integers = [random.randint(1, 100) for _ in range(100)]\nfrequency = Counter(random_integers)\nmode = frequency.most_common(1)[0][0]\nprint(\"Mode:\", mode)\n```"
  },
  {
    "task": "Write a program to find the shortest path in a grid using a list to represent the path.",
    "code": "```python\nfrom collections import deque\n\ndef shortest_path(grid):\n    if not grid or not grid[0]:\n        return []\n\n    rows, cols = len(grid), len(grid[0])\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    start, end = (0, 0), (rows - 1, cols - 1)\n    queue = deque([(start, [start])])\n    visited = set([start])\n\n    while queue:\n        (x, y), path = queue.popleft()\n        if (x, y) == end:\n            return path\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < rows and 0 <= ny < cols and grid[nx][ny] == 0 and (nx, ny) not in visited:\n                visited.add((nx, ny))\n                queue.append(((nx, ny), path + [(nx, ny)]))\n\n    return []\n\n# Example usage:\ngrid = [\n    [0, 1, 0, 0, 0],\n    [0, 1, 0, 1, 0],\n    [0, 0, 0, 1, 0],\n    [0, 1, 1, 1, 0],\n    [0, 0, 0, 0, 0]\n]\n\nprint(shortest_path(grid))\n```"
  },
  {
    "task": "Implement a function that takes a list and returns a list with elements doubled.",
    "code": "```python\ndef double_elements(input_list):\n    return [element * 2 for element in input_list]\n```"
  },
  {
    "task": "Create a list of integers and sort them in descending order.",
    "code": "```python\nnumbers = [4, 1, 7, 3, 9, 5]\nnumbers.sort(reverse=True)\n```"
  },
  {
    "task": "Write a function that takes a list of intervals and merges overlapping intervals.",
    "code": "```python\ndef merge_intervals(intervals):\n    if not intervals:\n        return []\n    \n    # Sort intervals based on the starting value\n    intervals.sort(key=lambda x: x[0])\n    \n    merged = [intervals[0]]\n    for current in intervals[1:]:\n        last = merged[-1]\n        if current[0] <= last[1]:  # Overlapping intervals\n            merged[-1] = [last[0], max(last[1], current[1])]\n        else:\n            merged.append(current)\n    \n    return merged\n```"
  },
  {
    "task": "Generate a list of random numbers and find the range (difference between max and min).",
    "code": "```python\nimport random\n\nrandom_numbers = [random.randint(1, 100) for _ in range(10)]\nrange_of_numbers = max(random_numbers) - min(random_numbers)\n```"
  },
  {
    "task": "Create a list of strings and remove any that are palindromes.",
    "code": "```python\ndef is_palindrome(s):\n    return s == s[::-1]\n\nstrings = [\"level\", \"world\", \"radar\", \"python\", \"deified\", \"example\"]\nnon_palindromes = [s for s in strings if not is_palindrome(s)]\n```"
  },
  {
    "task": "Write a program to cyclically permute the elements of a list.",
    "code": "```python\ndef cyclic_permute(lst):\n    if lst:\n        lst.insert(0, lst.pop())\n\n# Example usage\nexample_list = [1, 2, 3, 4, 5]\ncyclic_permute(example_list)\nprint(example_list)  # Output: [5, 1, 2, 3, 4]\n```"
  },
  {
    "task": "Implement a function to create a list of cumulative sums from a list of numbers.",
    "code": "```python\ndef cumulative_sums(numbers):\n    cumulative_list = []\n    total = 0\n    for num in numbers:\n        total += num\n        cumulative_list.append(total)\n    return cumulative_list\n```"
  },
  {
    "task": "Create a list of numbers and shift all zeros to the end.",
    "code": "```python\nnumbers = [0, 1, 2, 0, 3, 0, 4, 5]\nshifted_numbers = [num for num in numbers if num != 0] + [0] * numbers.count(0)\nprint(shifted_numbers)\n```"
  },
  {
    "task": "Write a program to simulate a queue using a list.",
    "code": "```python\nclass Queue:\n    def __init__(self):\n        self.items = []\n\n    def enqueue(self, item):\n        self.items.append(item)\n\n    def dequeue(self):\n        if not self.is_empty():\n            return self.items.pop(0)\n        return None\n\n    def is_empty(self):\n        return len(self.items) == 0\n\n    def size(self):\n        return len(self.items)\n\n# Example usage:\nqueue = Queue()\nqueue.enqueue(1)\nqueue.enqueue(2)\nqueue.enqueue(3)\nprint(queue.dequeue())  # Output: 1\nprint(queue.size())     # Output: 2\n```"
  },
  {
    "task": "Generate a list of numbers and identify all prime numbers.",
    "code": "```python\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\nnumbers = list(range(2, 101))\nprimes = [num for num in numbers if is_prime(num)]\nprint(primes)\n```"
  },
  {
    "task": "Create a list of strings and group them by their starting letter.",
    "code": "```python\nfrom collections import defaultdict\n\nstrings = [\"apple\", \"banana\", \"apricot\", \"blueberry\", \"avocado\", \"blackberry\"]\ngrouped_by_starting_letter = defaultdict(list)\n\nfor string in strings:\n    starting_letter = string[0]\n    grouped_by_starting_letter[starting_letter].append(string)\n\ngrouped_by_starting_letter = dict(grouped_by_starting_letter)\n```"
  },
  {
    "task": "Write a function that takes a list and returns a new list with all elements squared.",
    "code": "```python\ndef square_elements(lst):\n    return [x ** 2 for x in lst]\n```"
  },
  {
    "task": "Generate a list of timestamps and find the time difference between consecutive elements.",
    "code": "```python\nfrom datetime import datetime, timedelta\n\n# Generate a list of timestamps\ntimestamps = [datetime.now() - timedelta(minutes=5*i) for i in range(10)]\n\n# Find the time difference between consecutive elements\ntime_differences = [(timestamps[i] - timestamps[i-1]).total_seconds() for i in range(1, len(timestamps))]\n\nprint(time_differences)\n```"
  },
  {
    "task": "Create a list of numbers and rotate it such that the smallest number is first.",
    "code": "```python\nnumbers = [4, 1, 3, 2, 5]\nmin_index = numbers.index(min(numbers))\nrotated_list = numbers[min_index:] + numbers[:min_index]\nprint(rotated_list)\n```"
  },
  {
    "task": "Write a program to find all unique pairs in a list that sum up to a specific target.",
    "code": "```python\ndef find_unique_pairs(nums, target):\n    nums.sort()\n    pairs = []\n    seen = set()\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in seen:\n            pairs.append((complement, num))\n        seen.add(num)\n    return pairs\n\n# Example usage:\nnums = [2, 4, 3, 5, 7, 8, 1, -1]\ntarget = 6\nunique_pairs = find_unique_pairs(nums, target)\nprint(unique_pairs)\n```"
  },
  {
    "task": "Implement a function that returns true if a list contains a cycle.",
    "code": "```python\ndef contains_cycle(lst):\n    slow, fast = 0, 0\n    while fast < len(lst) and fast + 1 < len(lst):\n        slow += 1\n        fast += 2\n        if lst[slow] == lst[fast]:\n            return True\n    return False\n```"
  },
  {
    "task": "Create a list of numbers and find the contiguous subarray with the maximum sum.",
    "code": "```python\ndef max_subarray_sum(nums):\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for num in nums:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum\n\nnumbers = [1, -3, 2, 1, -1, 3, -2, 3]\nresult = max_subarray_sum(numbers)\nprint(result)\n```"
  },
  {
    "task": "Write a function that takes a list and a number, and finds two numbers in the list that sum to the given number.",
    "code": "```python\ndef find_two_sum(nums, target):\n    seen = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in seen:\n            return [complement, num]\n        seen[num] = i\n    return None\n```"
  },
  {
    "task": "Generate a list of even numbers and filter out those that are greater than a specific value.",
    "code": "```python\ndef generate_and_filter_evens(limit, filter_value):\n    evens = [x for x in range(2, limit + 1, 2)]\n    filtered_evens = [x for x in evens if x <= filter_value]\n    return filtered_evens\n\n# Example usage:\nlimit = 20\nfilter_value = 10\nresult = generate_and_filter_evens(limit, filter_value)\nprint(result)\n```"
  },
  {
    "task": "Create a list of characters and reverse the vowels only.",
    "code": "```python\ndef reverse_vowels(s):\n    vowels = 'aeiouAEIOU'\n    chars = list(s)\n    i, j = 0, len(chars) - 1\n    while i < j:\n        if chars[i] not in vowels:\n            i += 1\n        elif chars[j] not in vowels:\n            j -= 1\n        else:\n            chars[i], chars[j] = chars[j], chars[i]\n            i += 1\n            j -= 1\n    return ''.join(chars)\n\n# Example usage\ns = \"hello world\"\nreversed_vowels = reverse_vowels(s)\nprint(reversed_vowels)\n```"
  },
  {
    "task": "Write a program to find all permutations of a list of elements.",
    "code": "```python\nfrom itertools import permutations\n\ndef find_permutations(elements):\n    return list(permutations(elements))\n\n# Example usage:\nelements = [1, 2, 3]\nall_permutations = find_permutations(elements)\nprint(all_permutations)\n```"
  },
  {
    "task": "Implement a function that takes a list and returns the most frequently occurring element.",
    "code": "```python\nfrom collections import Counter\n\ndef most_frequent_element(lst):\n    if not lst:\n        return None\n    return Counter(lst).most_common(1)[0][0]\n```"
  },
  {
    "task": "Create a list of numbers and calculate the variance.",
    "code": "```python\nnumbers = [10, 20, 30, 40, 50]\n\nmean = sum(numbers) / len(numbers)\n\nvariance = sum((x - mean) ** 2 for x in numbers) / len(numbers)\n\nprint(variance)\n```"
  },
  {
    "task": "Write a function to concatenate a list of lists into a single list.",
    "code": "```python\ndef concatenate_lists(list_of_lists):\n    result = []\n    for sublist in list_of_lists:\n        result.extend(sublist)\n    return result\n```"
  },
  {
    "task": "Generate a list of numbers and replace each element with the product of all other elements.",
    "code": "```python\ndef product_of_others(lst):\n    if not lst:\n        return []\n    total_product = 1\n    zero_count = lst.count(0)\n    \n    if zero_count > 1:\n        return [0] * len(lst)\n    \n    for num in lst:\n        if num != 0:\n            total_product *= num\n    \n    result = []\n    for num in lst:\n        if zero_count == 1:\n            result.append(0 if num != 0 else total_product)\n        else:\n            result.append(total_product // num)\n    \n    return result\n\n# Example usage:\nnumbers = [1, 2, 3, 4]\nprint(product_of_others(numbers))\n```"
  },
  {
    "task": "Create a list of strings and find the common prefix.",
    "code": "```python\ndef common_prefix(strings):\n    if not strings:\n        return \"\"\n    \n    prefix = strings[0]\n    for string in strings[1:]:\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]\n            if not prefix:\n                return \"\"\n    return prefix\n\nstrings = [\"flower\", \"flow\", \"flight\"]\nresult = common_prefix(strings)\nprint(result)\n```"
  },
  {
    "task": "Write a program to partition a list into two lists based on a predicate function.",
    "code": "```python\ndef partition(lst, predicate):\n    true_list = [x for x in lst if predicate(x)]\n    false_list = [x for x in lst if not predicate(x)]\n    return true_list, false_list\n\n# Example usage:\n# lst = [1, 2, 3, 4, 5]\n# predicate = lambda x: x % 2 == 0\n# true_list, false_list = partition(lst, predicate)\n```"
  },
  {
    "task": "Implement a function to find the kth smallest element in a list.",
    "code": "```python\ndef kth_smallest_element(lst, k):\n    sorted_list = sorted(lst)\n    return sorted_list[k-1]\n```"
  },
  {
    "task": "Create a list of integers and find the length of the longest contiguous sequence.",
    "code": "```python\ndef longest_contiguous_sequence(nums):\n    if not nums:\n        return 0\n    \n    longest = 1\n    current_length = 1\n    \n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1] + 1:\n            current_length += 1\n        else:\n            longest = max(longest, current_length)\n            current_length = 1\n    \n    return max(longest, current_length)\n\n# Example usage\nnums = [1, 2, 3, 1, 2, 3, 4, 5, 1]\nprint(longest_contiguous_sequence(nums))\n```"
  },
  {
    "task": "Write a function that rotates elements in a list while maintaining the relative order of non-rotated elements.",
    "code": "```python\ndef rotate_list(lst, k):\n    if not lst:\n        return lst\n    k = k % len(lst)\n    return lst[-k:] + lst[:-k]\n```"
  },
  {
    "task": "Generate a list of random numbers and sort them while maintaining the original index positions.",
    "code": "```python\nimport random\n\n# Generate a list of random numbers\nrandom_numbers = [random.randint(0, 100) for _ in range(10)]\n\n# Sort the list while maintaining the original index positions\nsorted_numbers_with_indices = sorted(enumerate(random_numbers), key=lambda x: x[1])\n\n# Extract sorted numbers maintaining original indices\nsorted_numbers = [num for index, num in sorted_numbers_with_indices]\noriginal_indices = [index for index, num in sorted_numbers_with_indices]\n\n# Output results\nsorted_numbers, original_indices\n```"
  },
  {
    "task": "Create a list of numbers and find all subsets that sum up to a specific target.",
    "code": "```python\nfrom itertools import chain, combinations\n\ndef find_subsets_that_sum_to_target(numbers, target):\n    def all_subsets(lst):\n        return chain.from_iterable(combinations(lst, r) for r in range(len(lst) + 1))\n    \n    result = [subset for subset in all_subsets(numbers) if sum(subset) == target]\n    return result\n\nnumbers = [1, 2, 3, 4, 5]\ntarget = 5\nsubsets = find_subsets_that_sum_to_target(numbers, target)\nprint(subsets)\n```"
  },
  {
    "task": "Write a program to simulate a stack using a list.",
    "code": "```python\nclass Stack:\n    def __init__(self):\n        self.stack = []\n    \n    def push(self, item):\n        self.stack.append(item)\n    \n    def pop(self):\n        if not self.is_empty():\n            return self.stack.pop()\n        return None\n    \n    def peek(self):\n        if not self.is_empty():\n            return self.stack[-1]\n        return None\n    \n    def is_empty(self):\n        return len(self.stack) == 0\n    \n    def size(self):\n        return len(self.stack)\n\n# Example usage\nstack = Stack()\nstack.push(1)\nstack.push(2)\nstack.push(3)\nprint(stack.pop())   # 3\nprint(stack.peek())  # 2\nprint(stack.is_empty())  # False\nprint(stack.size())  # 2\n```"
  }
]