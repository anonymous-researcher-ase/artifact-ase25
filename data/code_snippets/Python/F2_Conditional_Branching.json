[
  {
    "task": "Write a program that checks if a number is even or odd and outputs the result.",
    "code": "```python\ndef check_even_odd(number):\n    if number % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\n# Example usage\nnumber = 5\nresult = check_even_odd(number)\nprint(f\"The number {number} is {result}.\")\n```"
  },
  {
    "task": "Create a function that determines if a given year is a leap year.",
    "code": "```python\ndef is_leap_year(year):\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\n```"
  },
  {
    "task": "Develop a script that categorizes an input number as positive, negative, or zero.",
    "code": "```python\ndef categorize_number(num):\n    if num > 0:\n        return \"positive\"\n    elif num < 0:\n        return \"negative\"\n    else:\n        return \"zero\"\n\n# Example usage\nnumber = float(input(\"Enter a number: \"))\ncategory = categorize_number(number)\nprint(f\"The number is {category}.\")\n```"
  },
  {
    "task": "Implement a system that grants access only if a correct password and username are provided.",
    "code": "```python\ndef access_system(username, password):\n    correct_username = \"admin\"\n    correct_password = \"1234\"\n\n    if username == correct_username and password == correct_password:\n        return \"Access Granted\"\n    else:\n        return \"Access Denied\"\n\n# Example usage\nuser_input_username = input(\"Enter username: \")\nuser_input_password = input(\"Enter password: \")\n\nprint(access_system(user_input_username, user_input_password))\n```"
  },
  {
    "task": "Design a program that outputs 'Fizz' for numbers divisible by 3, 'Buzz' for numbers divisible by 5, and 'FizzBuzz' for numbers divisible by both.",
    "code": "```python\ndef fizz_buzz(n):\n    for i in range(1, n + 1):\n        if i % 3 == 0 and i % 5 == 0:\n            print(\"FizzBuzz\")\n        elif i % 3 == 0:\n            print(\"Fizz\")\n        elif i % 5 == 0:\n            print(\"Buzz\")\n        else:\n            print(i)\n\nfizz_buzz(100)\n```"
  },
  {
    "task": "Write a function to determine if a character is a vowel or a consonant.",
    "code": "```python\ndef check_character_type(char):\n    if char.lower() in 'aeiou':\n        return 'vowel'\n    elif char.isalpha():\n        return 'consonant'\n    else:\n        return 'not a letter'\n```"
  },
  {
    "task": "Create a program that assigns letter grades based on numerical scores.",
    "code": "```python\ndef assign_letter_grade(score):\n    if score >= 90:\n        return 'A'\n    elif score >= 80:\n        return 'B'\n    elif score >= 70:\n        return 'C'\n    elif score >= 60:\n        return 'D'\n    else:\n        return 'F'\n\n# Example usage:\nscore = 85\ngrade = assign_letter_grade(score)\nprint(f'The grade for a score of {score} is {grade}.')\n```"
  },
  {
    "task": "Develop a routine that suggests clothing based on the current temperature.",
    "code": "```python\ndef suggest_clothing(temperature):\n    if temperature < 0:\n        return \"Wear a heavy coat, gloves, and a hat.\"\n    elif 0 <= temperature < 10:\n        return \"Wear a coat and a sweater.\"\n    elif 10 <= temperature < 20:\n        return \"Wear a sweater or light jacket.\"\n    elif 20 <= temperature < 30:\n        return \"Wear a t-shirt and jeans.\"\n    else:\n        return \"Wear shorts and a t-shirt.\"\n\n# Example usage\ncurrent_temperature = 15\nclothing_suggestion = suggest_clothing(current_temperature)\nprint(clothing_suggestion)\n```"
  },
  {
    "task": "Implement a system that checks if a user is an adult or a minor based on their age.",
    "code": "```python\ndef check_age(age):\n    if age >= 18:\n        return \"Adult\"\n    else:\n        return \"Minor\"\n\n# Example usage\nage = 20\nstatus = check_age(age)\nprint(f\"The user is an {status}.\")\n```"
  },
  {
    "task": "Design a program that validates if a triangle can exist based on its side lengths.",
    "code": "```python\ndef is_valid_triangle(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False\n\n# Example usage\nside1 = 3\nside2 = 4\nside3 = 5\nprint(is_valid_triangle(side1, side2, side3))\n```"
  },
  {
    "task": "Write a function that determines the largest of three input numbers.",
    "code": "```python\ndef largest_of_three(a, b, c):\n    if a > b and a > c:\n        return a\n    elif b > a and b > c:\n        return b\n    else:\n        return c\n```"
  },
  {
    "task": "Create a program that checks if a string is a palindrome.",
    "code": "```python\ndef is_palindrome(s):\n    s = s.lower().replace(\" \", \"\")\n    if s == s[::-1]:\n        return True\n    else:\n        return False\n\n# Example usage:\nstring = \"A man a plan a canal Panama\"\nprint(is_palindrome(string))\n```"
  },
  {
    "task": "Develop a routine that calculates the total cost with a discount applied if applicable.",
    "code": "```python\ndef calculate_total_cost(original_cost, discount_threshold, discount_rate):\n    if original_cost > discount_threshold:\n        discount = original_cost * discount_rate\n    else:\n        discount = 0\n    total_cost = original_cost - discount\n    return total_cost\n\n# Example usage\noriginal_cost = 150\ndiscount_threshold = 100\ndiscount_rate = 0.1\ntotal_cost = calculate_total_cost(original_cost, discount_threshold, discount_rate)\nprint(f\"Total cost: {total_cost}\")\n```"
  },
  {
    "task": "Implement a system that checks if a person is eligible to vote based on age and citizenship.",
    "code": "```python\ndef is_eligible_to_vote(age, is_citizen):\n    if age >= 18 and is_citizen:\n        return \"Eligible to vote\"\n    else:\n        return \"Not eligible to vote\"\n\n# Example usage\nage = 20\nis_citizen = True\nresult = is_eligible_to_vote(age, is_citizen)\nprint(result)\n```"
  },
  {
    "task": "Design a function that returns the day of the week given a number from 1 to 7.",
    "code": "```python\ndef get_day_of_week(number):\n    if number == 1:\n        return \"Monday\"\n    elif number == 2:\n        return \"Tuesday\"\n    elif number == 3:\n        return \"Wednesday\"\n    elif number == 4:\n        return \"Thursday\"\n    elif number == 5:\n        return \"Friday\"\n    elif number == 6:\n        return \"Saturday\"\n    elif number == 7:\n        return \"Sunday\"\n    else:\n        return \"Invalid number\"\n\n# Example usage:\n# print(get_day_of_week(1))  # Output: \"Monday\"\n# print(get_day_of_week(8))  # Output: \"Invalid number\"\n```"
  },
  {
    "task": "Write a program that determines if a word is found within a given sentence.",
    "code": "```python\ndef word_in_sentence(word, sentence):\n    if word in sentence:\n        return True\n    else:\n        return False\n\n# Example usage\nword = \"hello\"\nsentence = \"hello world\"\nprint(word_in_sentence(word, sentence))\n```"
  },
  {
    "task": "Create a script that checks if a number is within a specified range.",
    "code": "```python\ndef is_within_range(number, lower_bound, upper_bound):\n    if lower_bound <= number <= upper_bound:\n        return True\n    else:\n        return False\n\n# Example usage:\nnumber = 10\nlower_bound = 5\nupper_bound = 15\nresult = is_within_range(number, lower_bound, upper_bound)\nprint(\"Within range:\", result)\n```"
  },
  {
    "task": "Develop a routine to decide if a user input is a valid email address.",
    "code": "```python\nimport re\n\ndef is_valid_email(email):\n    pattern = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$'\n    return re.match(pattern, email) is not None\n\nemail = input(\"Enter your email: \")\n\nif is_valid_email(email):\n    print(\"Valid email address.\")\nelse:\n    print(\"Invalid email address.\")\n```"
  },
  {
    "task": "Implement a program that categorizes a number as small, medium, or large.",
    "code": "```python\ndef categorize_number(num):\n    if num < 10:\n        return \"small\"\n    elif num < 100:\n        return \"medium\"\n    else:\n        return \"large\"\n\n# Example usage:\nnumber = 25\ncategory = categorize_number(number)\nprint(f\"The number {number} is categorized as {category}.\")\n```"
  },
  {
    "task": "Design a function that outputs the season based on the month provided.",
    "code": "```python\ndef get_season(month):\n    if month in ['December', 'January', 'February']:\n        return 'Winter'\n    elif month in ['March', 'April', 'May']:\n        return 'Spring'\n    elif month in ['June', 'July', 'August']:\n        return 'Summer'\n    elif month in ['September', 'October', 'November']:\n        return 'Autumn'\n    else:\n        return 'Invalid month'\n```"
  },
  {
    "task": "Write a program that checks if a string contains only alphabetic characters.",
    "code": "```python\ndef is_alpha(s):\n    if s.isalpha():\n        return True\n    else:\n        return False\n\n# Example usage\nstring = \"HelloWorld\"\nprint(is_alpha(string))  # True\n\nstring = \"Hello123\"\nprint(is_alpha(string))  # False\n```"
  },
  {
    "task": "Create a routine that decides the type of triangle based on its angles.",
    "code": "```python\ndef triangle_type(angle1, angle2, angle3):\n    if angle1 + angle2 + angle3 != 180:\n        return \"Not a triangle\"\n    if angle1 == 90 or angle2 == 90 or angle3 == 90:\n        return \"Right triangle\"\n    if angle1 > 90 or angle2 > 90 or angle3 > 90:\n        return \"Obtuse triangle\"\n    return \"Acute triangle\"\n\n# Example usage:\nprint(triangle_type(60, 60, 60))  # Acute triangle\nprint(triangle_type(90, 45, 45))  # Right triangle\nprint(triangle_type(120, 30, 30)) # Obtuse triangle\nprint(triangle_type(100, 40, 40)) # Not a triangle\n```"
  },
  {
    "task": "Develop a program that suggests a meal based on the time of day.",
    "code": "```python\ndef suggest_meal(time_of_day):\n    if 5 <= time_of_day < 11:\n        return \"Breakfast\"\n    elif 11 <= time_of_day < 16:\n        return \"Lunch\"\n    elif 16 <= time_of_day < 21:\n        return \"Dinner\"\n    else:\n        return \"Snack\"\n\n# Example usage:\ncurrent_time = 14  # 2 PM\nmeal_suggestion = suggest_meal(current_time)\nprint(meal_suggestion)\n```"
  },
  {
    "task": "Implement a function that determines if a point lies within a circle given its radius.",
    "code": "```python\ndef is_point_in_circle(x, y, circle_radius):\n    return x**2 + y**2 <= circle_radius**2\n```"
  },
  {
    "task": "Design a script that calculates overtime pay based on hours worked.",
    "code": "```python\ndef calculate_overtime_pay(hours_worked, hourly_rate, overtime_rate_multiplier=1.5):\n    regular_hours = 40\n    if hours_worked > regular_hours:\n        overtime_hours = hours_worked - regular_hours\n        overtime_pay = overtime_hours * hourly_rate * overtime_rate_multiplier\n        regular_pay = regular_hours * hourly_rate\n        total_pay = regular_pay + overtime_pay\n    else:\n        total_pay = hours_worked * hourly_rate\n    return total_pay\n\n# Example usage\nhours = 45\nrate = 20\npay = calculate_overtime_pay(hours, rate)\nprint(f'Total pay for {hours} hours is: ${pay:.2f}')\n```"
  },
  {
    "task": "Write a program that checks if two strings are anagrams of each other.",
    "code": "```python\ndef are_anagrams(str1, str2):\n    if sorted(str1) == sorted(str2):\n        return True\n    else:\n        return False\n\n# Example usage\nstring1 = \"listen\"\nstring2 = \"silent\"\nprint(are_anagrams(string1, string2))\n```"
  },
  {
    "task": "Create a function that classifies numbers as prime or composite.",
    "code": "```python\ndef classify_number(n):\n    if n <= 1:\n        return \"Neither prime nor composite\"\n    if n <= 3:\n        return \"Prime\"\n    if n % 2 == 0 or n % 3 == 0:\n        return \"Composite\"\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return \"Composite\"\n        i += 6\n    return \"Prime\"\n```"
  },
  {
    "task": "Develop a routine to determine if a number is a power of two.",
    "code": "```python\ndef is_power_of_two(n):\n    if n > 0 and (n & (n - 1)) == 0:\n        return True\n    return False\n```"
  },
  {
    "task": "Implement a program that checks if a list is sorted in ascending order.",
    "code": "```python\ndef is_sorted_ascending(lst):\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True\n```"
  },
  {
    "task": "Design a function that suggests a sport based on the weather conditions.",
    "code": "```python\ndef suggest_sport(weather):\n    if weather == \"sunny\":\n        return \"Tennis\"\n    elif weather == \"rainy\":\n        return \"Swimming\"\n    elif weather == \"snowy\":\n        return \"Skiing\"\n    elif weather == \"windy\":\n        return \"Sailing\"\n    elif weather == \"cloudy\":\n        return \"Running\"\n    else:\n        return \"Indoor Gym\"\n\n# Example usage:\n# sport = suggest_sport(\"sunny\")\n# print(sport)  # Output: Tennis\n```"
  },
  {
    "task": "Write a program that determines if an entered date is valid.",
    "code": "```python\ndef is_leap_year(year):\n    return (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0)\n\ndef is_valid_date(day, month, year):\n    if year < 1 or month < 1 or month > 12 or day < 1:\n        return False\n    \n    if month in {1, 3, 5, 7, 8, 10, 12}:\n        return day <= 31\n    elif month in {4, 6, 9, 11}:\n        return day <= 30\n    elif month == 2:\n        if is_leap_year(year):\n            return day <= 29\n        else:\n            return day <= 28\n    return False\n\ndate_input = input(\"Enter a date (dd-mm-yyyy): \")\ntry:\n    day, month, year = map(int, date_input.split('-'))\n    if is_valid_date(day, month, year):\n        print(\"The date is valid.\")\n    else:\n        print(\"The date is invalid.\")\nexcept ValueError:\n    print(\"The date format is incorrect.\")\n```"
  },
  {
    "task": "Create a script to decide which of two products to buy based on price and reviews.",
    "code": "```python\ndef choose_product(price1, reviews1, price2, reviews2):\n    if price1 < price2:\n        return \"Product 1\"\n    elif price2 < price1:\n        return \"Product 2\"\n    else:\n        if reviews1 > reviews2:\n            return \"Product 1\"\n        elif reviews2 > reviews1:\n            return \"Product 2\"\n        else:\n            return \"Either Product\"\n\n# Example usage\nproduct_choice = choose_product(100, 4.5, 100, 4.7)\nprint(product_choice)\n```"
  },
  {
    "task": "Develop a function that categorizes a person\u2019s BMI as underweight, normal, overweight, or obese.",
    "code": "```python\ndef categorize_bmi(bmi):\n    if bmi < 18.5:\n        return 'underweight'\n    elif 18.5 <= bmi < 24.9:\n        return 'normal'\n    elif 24.9 <= bmi < 29.9:\n        return 'overweight'\n    else:\n        return 'obese'\n```"
  },
  {
    "task": "Implement a program that checks if a credit card number is valid using the Luhn algorithm.",
    "code": "```python\ndef luhn_check(card_number):\n    def digits_of(n):\n        return [int(d) for d in str(n)]\n    \n    digits = digits_of(card_number)\n    odd_digits = digits[-1::-2]\n    even_digits = digits[-2::-2]\n    checksum = sum(odd_digits)\n    \n    for d in even_digits:\n        checksum += sum(digits_of(d * 2))\n    \n    return checksum % 10 == 0\n\n# Example usage\ncard_number = \"4532015112830366\"\nprint(luhn_check(card_number))  # Output: True or False based on validity\n```"
  },
  {
    "task": "Design a routine that outputs a greeting based on the current time of day.",
    "code": "```python\nfrom datetime import datetime\n\ndef greet_based_on_time():\n    current_hour = datetime.now().hour\n    if 5 <= current_hour < 12:\n        greeting = \"Good morning!\"\n    elif 12 <= current_hour < 18:\n        greeting = \"Good afternoon!\"\n    elif 18 <= current_hour < 22:\n        greeting = \"Good evening!\"\n    else:\n        greeting = \"Good night!\"\n    return greeting\n\nprint(greet_based_on_time())\n```"
  },
  {
    "task": "Write a program that determines if a given word can be formed with a set of letters.",
    "code": "```python\ndef can_form_word(word, letters):\n    letters_dict = {}\n    for letter in letters:\n        if letter in letters_dict:\n            letters_dict[letter] += 1\n        else:\n            letters_dict[letter] = 1\n\n    for char in word:\n        if char in letters_dict and letters_dict[char] > 0:\n            letters_dict[char] -= 1\n        else:\n            return False\n    return True\n\n# Example usage:\nword = \"apple\"\nletters = \"aelpp\"\nprint(can_form_word(word, letters))  # Output: True or False\n```"
  },
  {
    "task": "Create a function that outputs the appropriate greeting based on the day of the week.",
    "code": "```python\ndef greet(day):\n    if day.lower() == \"monday\":\n        return \"Start of the week! Have a great Monday!\"\n    elif day.lower() == \"tuesday\":\n        return \"Keep going! Happy Tuesday!\"\n    elif day.lower() == \"wednesday\":\n        return \"Halfway there! Enjoy your Wednesday!\"\n    elif day.lower() == \"thursday\":\n        return \"Almost the weekend! Happy Thursday!\"\n    elif day.lower() == \"friday\":\n        return \"It's Friday! The weekend is near!\"\n    elif day.lower() == \"saturday\":\n        return \"It's the weekend! Enjoy your Saturday!\"\n    elif day.lower() == \"sunday\":\n        return \"Relax and recharge! Happy Sunday!\"\n    else:\n        return \"Invalid day!\"\n\n# Example usage:\n# print(greet(\"Monday\"))\n```"
  },
  {
    "task": "Develop a system to determine if a person qualifies for a senior citizen discount.",
    "code": "```python\ndef qualifies_for_senior_discount(age, is_member):\n    if age >= 65:\n        return True\n    elif is_member:\n        return True\n    else:\n        return False\n\n# Example usage\nage = 70\nis_member = False\nprint(qualifies_for_senior_discount(age, is_member))\n```"
  },
  {
    "task": "Implement a function that checks if a number is a perfect square.",
    "code": "```python\ndef is_perfect_square(n):\n    if n < 0:\n        return False\n    root = int(n ** 0.5)\n    return root * root == n\n```"
  },
  {
    "task": "Design a program that outputs the correct shipping cost based on weight and distance.",
    "code": "```python\ndef calculate_shipping_cost(weight, distance):\n    if weight <= 5:\n        if distance <= 100:\n            return 5.0\n        elif distance <= 500:\n            return 10.0\n        else:\n            return 15.0\n    elif weight <= 20:\n        if distance <= 100:\n            return 10.0\n        elif distance <= 500:\n            return 20.0\n        else:\n            return 30.0\n    else:\n        if distance <= 100:\n            return 20.0\n        elif distance <= 500:\n            return 40.0\n        else:\n            return 60.0\n\n# Example usage:\nweight = 10  # in kilograms\ndistance = 150  # in kilometers\nshipping_cost = calculate_shipping_cost(weight, distance)\nprint(f\"The shipping cost is: ${shipping_cost}\")\n```"
  },
  {
    "task": "Write a routine that chooses the correct pronoun based on gender input.",
    "code": "```python\ndef choose_pronoun(gender):\n    if gender.lower() == 'male':\n        return 'he'\n    elif gender.lower() == 'female':\n        return 'she'\n    else:\n        return 'they'\n```"
  },
  {
    "task": "Create a program that checks if a user input is a palindrome number.",
    "code": "```python\ndef is_palindrome_number(num):\n    return str(num) == str(num)[::-1]\n\nuser_input = input(\"Enter a number: \")\n\ntry:\n    number = int(user_input)\n    if is_palindrome_number(number):\n        print(\"The number is a palindrome.\")\n    else:\n        print(\"The number is not a palindrome.\")\nexcept ValueError:\n    print(\"Invalid input. Please enter a valid integer.\")\n```"
  },
  {
    "task": "Develop a script to decide if a number is a perfect number.",
    "code": "```python\ndef is_perfect_number(number):\n    if number < 2:\n        return False\n    divisors_sum = 1\n    for i in range(2, int(number ** 0.5) + 1):\n        if number % i == 0:\n            divisors_sum += i\n            if i != number // i:\n                divisors_sum += number // i\n    return divisors_sum == number\n\nnumber = int(input(\"Enter a number: \"))\nif is_perfect_number(number):\n    print(f\"{number} is a perfect number.\")\nelse:\n    print(f\"{number} is not a perfect number.\")\n```"
  },
  {
    "task": "Implement a system that determines the winner in a rock-paper-scissors game.",
    "code": "```python\ndef determine_winner(player1_choice, player2_choice):\n    if player1_choice == player2_choice:\n        return \"Tie\"\n    elif (player1_choice == \"rock\" and player2_choice == \"scissors\") or \\\n         (player1_choice == \"scissors\" and player2_choice == \"paper\") or \\\n         (player1_choice == \"paper\" and player2_choice == \"rock\"):\n        return \"Player 1 wins\"\n    else:\n        return \"Player 2 wins\"\n```"
  },
  {
    "task": "Design a function that suggests a movie genre based on user mood.",
    "code": "```python\ndef suggest_genre(mood):\n    if mood.lower() == 'happy':\n        return 'Comedy'\n    elif mood.lower() == 'sad':\n        return 'Drama'\n    elif mood.lower() == 'adventurous':\n        return 'Action'\n    elif mood.lower() == 'romantic':\n        return 'Romance'\n    elif mood.lower() == 'scared':\n        return 'Horror'\n    else:\n        return 'Documentary'\n\n# Example usage:\n# user_mood = input(\"How are you feeling? \")\n# print(suggest_genre(user_mood))\n```"
  },
  {
    "task": "Write a program that checks if a file extension is valid for an image file.",
    "code": "```python\ndef is_valid_image_extension(filename):\n    valid_extensions = {'.jpg', '.jpeg', '.png', '.gif', '.bmp', '.tiff'}\n    _, extension = os.path.splitext(filename)\n    return extension.lower() in valid_extensions\n\nimport os\n\nfilename = \"example.png\"\nif is_valid_image_extension(filename):\n    print(\"Valid image file extension.\")\nelse:\n    print(\"Invalid image file extension.\")\n```"
  },
  {
    "task": "Create a routine that decides the appropriate currency symbol based on country.",
    "code": "```python\ndef get_currency_symbol(country):\n    if country == \"United States\":\n        return \"$\"\n    elif country == \"United Kingdom\":\n        return \"\u00a3\"\n    elif country == \"Japan\":\n        return \"\u00a5\"\n    elif country == \"Eurozone\":\n        return \"\u20ac\"\n    elif country == \"India\":\n        return \"\u20b9\"\n    else:\n        return \"Currency symbol not available\"\n\n# Example usage\ncountry = \"Japan\"\ncurrency_symbol = get_currency_symbol(country)\nprint(f\"The currency symbol for {country} is {currency_symbol}.\")\n```"
  },
  {
    "task": "Develop a function that determines if a string is a valid palindrome ignoring spaces and punctuation.",
    "code": "```python\nimport string\n\ndef is_valid_palindrome(s):\n    filtered_chars = ''.join(c.lower() for c in s if c.isalnum())\n    return filtered_chars == filtered_chars[::-1]\n```"
  },
  {
    "task": "Implement a program that checks if a number is in the Fibonacci sequence.",
    "code": "```python\ndef is_fibonacci(n):\n    if n < 0:\n        return False\n    \n    a, b = 0, 1\n    while a < n:\n        a, b = b, a + b\n    \n    return a == n\n\n# Example usage\nnumber = 21  # Replace with any number to check\nprint(is_fibonacci(number))\n```"
  },
  {
    "task": "Design a script to calculate the correct tip based on service quality rating.",
    "code": "```python\ndef calculate_tip(bill_amount, service_quality):\n    if service_quality == 'excellent':\n        tip_percentage = 0.20\n    elif service_quality == 'good':\n        tip_percentage = 0.15\n    elif service_quality == 'average':\n        tip_percentage = 0.10\n    elif service_quality == 'poor':\n        tip_percentage = 0.05\n    else:\n        tip_percentage = 0.0\n        \n    tip = bill_amount * tip_percentage\n    return tip\n\n# Example usage:\nbill = 100.00\nquality = 'good'\ntip = calculate_tip(bill, quality)\nprint(f\"Tip for {quality} service on a ${bill} bill is: ${tip:.2f}\")\n```"
  },
  {
    "task": "Write a function that determines if a year is a century year.",
    "code": "```python\ndef is_century_year(year):\n    if year % 100 == 0:\n        return True\n    else:\n        return False\n```"
  },
  {
    "task": "Create a program that checks if a date falls on a weekend.",
    "code": "```python\nfrom datetime import datetime\n\ndef is_weekend(date_str):\n    date_obj = datetime.strptime(date_str, '%Y-%m-%d')\n    return date_obj.weekday() >= 5\n\ndate_input = \"2023-10-14\"  # Example date\nif is_weekend(date_input):\n    print(\"The date falls on a weekend.\")\nelse:\n    print(\"The date does not fall on a weekend.\")\n```"
  },
  {
    "task": "Develop a routine that suggests a book based on genre preference.",
    "code": "```python\ndef suggest_book(genre):\n    if genre == \"Science Fiction\":\n        return \"Dune by Frank Herbert\"\n    elif genre == \"Fantasy\":\n        return \"The Hobbit by J.R.R. Tolkien\"\n    elif genre == \"Mystery\":\n        return \"The Da Vinci Code by Dan Brown\"\n    elif genre == \"Romance\":\n        return \"Pride and Prejudice by Jane Austen\"\n    elif genre == \"Horror\":\n        return \"It by Stephen King\"\n    elif genre == \"Non-Fiction\":\n        return \"Sapiens: A Brief History of Humankind by Yuval Noah Harari\"\n    else:\n        return \"Genre not recognized. Please choose a different genre.\"\n\n# Example usage\nuser_genre = \"Fantasy\"\nbook_suggestion = suggest_book(user_genre)\nprint(book_suggestion)\n```"
  },
  {
    "task": "Implement a system that determines if a student passes or fails based on their grades.",
    "code": "```python\ndef determine_pass_or_fail(grade):\n    if grade >= 50:\n        return \"Pass\"\n    else:\n        return \"Fail\"\n\n# Example usage\ngrade = 75\nresult = determine_pass_or_fail(grade)\nprint(f\"The student has {result}.\")\n```"
  },
  {
    "task": "Design a function to validate if a string is a valid URL.",
    "code": "```python\nimport re\n\ndef is_valid_url(url):\n    pattern = re.compile(\n        r'^(?:http|ftp)s?://'  # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'  # domain...\n        r'localhost|'  # localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|'  # ...or ipv4\n        r'\\[?[A-F0-9]*:[A-F0-9:]+\\]?)'  # ...or ipv6\n        r'(?::\\d+)?'  # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    \n    return re.match(pattern, url) is not None\n```"
  },
  {
    "task": "Write a program that checks if a point is inside a rectangle given its coordinates.",
    "code": "```python\ndef is_point_inside_rectangle(px, py, rx1, ry1, rx2, ry2):\n    if rx1 < rx2 and ry1 < ry2:\n        if rx1 <= px <= rx2 and ry1 <= py <= ry2:\n            return True\n    elif rx1 > rx2 and ry1 < ry2:\n        if rx2 <= px <= rx1 and ry1 <= py <= ry2:\n            return True\n    elif rx1 < rx2 and ry1 > ry2:\n        if rx1 <= px <= rx2 and ry2 <= py <= ry1:\n            return True\n    elif rx1 > rx2 and ry1 > ry2:\n        if rx2 <= px <= rx1 and ry2 <= py <= ry1:\n            return True\n    return False\n```"
  },
  {
    "task": "Create a script to determine if a word can be constructed from a given set of letters.",
    "code": "```python\ndef can_construct_word(word, letters):\n    available_letters = {}\n    \n    for letter in letters:\n        if letter in available_letters:\n            available_letters[letter] += 1\n        else:\n            available_letters[letter] = 1\n    \n    for letter in word:\n        if letter not in available_letters or available_letters[letter] == 0:\n            return False\n        available_letters[letter] -= 1\n    \n    return True\n\n# Example usage\nword = \"hello\"\nletters = \"loehlx\"\nprint(can_construct_word(word, letters))  # Output: True\n```"
  },
  {
    "task": "Develop a routine that calculates insurance premiums based on age and driving record.",
    "code": "```python\ndef calculate_insurance_premium(age, driving_record):\n    if age < 18:\n        return \"Not eligible for insurance\"\n    elif age < 25:\n        if driving_record == \"clean\":\n            return 150\n        elif driving_record == \"minor violation\":\n            return 200\n        else:\n            return 300\n    elif age < 65:\n        if driving_record == \"clean\":\n            return 100\n        elif driving_record == \"minor violation\":\n            return 150\n        else:\n            return 250\n    else:\n        if driving_record == \"clean\":\n            return 120\n        elif driving_record == \"minor violation\":\n            return 180\n        else:\n            return 300\n```"
  },
  {
    "task": "Implement a program that checks for palindrome sentences.",
    "code": "```python\ndef is_palindrome(sentence):\n    cleaned = ''.join(char.lower() for char in sentence if char.isalnum())\n    return cleaned == cleaned[::-1]\n\nsentence = input(\"Enter a sentence: \")\nif is_palindrome(sentence):\n    print(\"The sentence is a palindrome.\")\nelse:\n    print(\"The sentence is not a palindrome.\")\n```"
  },
  {
    "task": "Design a function to evaluate if a string contains balanced parentheses.",
    "code": "```python\ndef is_balanced_parentheses(s):\n    balance = 0\n    for char in s:\n        if char == '(':\n            balance += 1\n        elif char == ')':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0\n```"
  },
  {
    "task": "Write a program that suggests a pet based on living conditions and preferences.",
    "code": "```python\ndef suggest_pet(living_space, activity_level, allergies):\n    if living_space == 'small' and activity_level == 'low' and allergies:\n        return \"Fish\"\n    elif living_space == 'small' and activity_level == 'low':\n        return \"Cat\"\n    elif living_space == 'small' and activity_level == 'high':\n        return \"Small Dog\"\n    elif living_space == 'large' and activity_level == 'low' and allergies:\n        return \"Turtle\"\n    elif living_space == 'large' and activity_level == 'low':\n        return \"Cat\"\n    elif living_space == 'large' and activity_level == 'high':\n        return \"Large Dog\"\n    elif living_space == 'medium' and activity_level == 'low' and allergies:\n        return \"Bird\"\n    elif living_space == 'medium' and activity_level == 'low':\n        return \"Rabbit\"\n    elif living_space == 'medium' and activity_level == 'high':\n        return \"Medium Dog\"\n    else:\n        return \"No suitable pet found\"\n\n# Example usage:\nliving_space = input(\"Enter your living space (small/medium/large): \").strip().lower()\nactivity_level = input(\"Enter your activity level (low/high): \").strip().lower()\nallergies = input(\"Do you have allergies? (yes/no): \").strip().lower() == 'yes'\n\npet_suggestion = suggest_pet(living_space, activity_level, allergies)\nprint(f\"Suggested pet: {pet_suggestion}\")\n```"
  },
  {
    "task": "Create a routine that determines if a phone number is valid based on format.",
    "code": "```python\ndef is_valid_phone_number(phone_number):\n    if len(phone_number) != 12:\n        return False\n    if phone_number[3] != '-' or phone_number[7] != '-':\n        return False\n    if not (phone_number[:3].isdigit() and phone_number[4:7].isdigit() and phone_number[8:].isdigit()):\n        return False\n    return True\n```"
  },
  {
    "task": "Develop a function that checks if two rectangles overlap.",
    "code": "```python\ndef rectangles_overlap(rect1, rect2):\n    x1, y1, x2, y2 = rect1\n    x3, y3, x4, y4 = rect2\n    \n    if x1 >= x4 or x3 >= x2:\n        return False\n    if y1 >= y4 or y3 >= y2:\n        return False\n    return True\n```"
  },
  {
    "task": "Implement a program that chooses a beverage based on user input time.",
    "code": "```python\ndef choose_beverage(hour):\n    if 6 <= hour < 12:\n        return \"Coffee\"\n    elif 12 <= hour < 17:\n        return \"Tea\"\n    elif 17 <= hour < 21:\n        return \"Juice\"\n    elif (21 <= hour <= 23) or (0 <= hour < 6):\n        return \"Water\"\n    else:\n        return \"Invalid time\"\n\ntry:\n    user_input = int(input(\"Enter the current hour (0-23): \"))\n    beverage = choose_beverage(user_input)\n    print(f\"Beverage suggestion: {beverage}\")\nexcept ValueError:\n    print(\"Please enter a valid integer for the hour.\")\n```"
  },
  {
    "task": "Design a script to determine if a URL is secure (HTTPS).",
    "code": "```python\ndef is_secure_url(url):\n    if url.startswith(\"https://\"):\n        return True\n    else:\n        return False\n\n# Example usage:\nurl = \"https://example.com\"\nprint(is_secure_url(url))  # Output: True\n```"
  },
  {
    "task": "Write a function that outputs different messages based on the input number's divisibility.",
    "code": "```python\ndef check_divisibility(number):\n    if number % 15 == 0:\n        return \"Divisible by 15\"\n    elif number % 5 == 0:\n        return \"Divisible by 5\"\n    elif number % 3 == 0:\n        return \"Divisible by 3\"\n    else:\n        return \"Not divisible by 3, 5, or 15\"\n\n# Example usage:\n# print(check_divisibility(30))  # Outputs: Divisible by 15\n# print(check_divisibility(10))  # Outputs: Divisible by 5\n# print(check_divisibility(9))   # Outputs: Divisible by 3\n# print(check_divisibility(7))   # Outputs: Not divisible by 3, 5, or 15\n```"
  },
  {
    "task": "Create a program to decide if a person should bring an umbrella based on the weather forecast.",
    "code": "```python\ndef should_bring_umbrella(weather_forecast):\n    if weather_forecast.lower() in ['rain', 'storm', 'showers']:\n        return \"Yes, you should bring an umbrella.\"\n    else:\n        return \"No, you don't need an umbrella.\"\n\n# Example usage:\nweather = \"Rain\"\nprint(should_bring_umbrella(weather))\n```"
  },
  {
    "task": "Develop a routine that checks if a chess move is valid.",
    "code": "```python\ndef is_valid_chess_move(start, end, piece, board):\n    def is_valid_position(pos):\n        return 0 <= pos[0] < 8 and 0 <= pos[1] < 8\n\n    if not (is_valid_position(start) and is_valid_position(end)):\n        return False\n\n    x1, y1 = start\n    x2, y2 = end\n    dx, dy = x2 - x1, y2 - y1\n\n    if piece == 'pawn':\n        if board[x1][y1] == 'P':\n            if x1 == 1:\n                return (dx == 1 or (dx == 2 and x2 == 3)) and dy == 0 and board[x2][y2] == '.'\n            return dx == 1 and dy == 0 and board[x2][y2] == '.'\n        elif board[x1][y1] == 'p':\n            if x1 == 6:\n                return (dx == -1 or (dx == -2 and x2 == 4)) and dy == 0 and board[x2][y2] == '.'\n            return dx == -1 and dy == 0 and board[x2][y2] == '.'\n\n    elif piece == 'rook':\n        if dx != 0 and dy != 0:\n            return False\n        step_x = 1 if dx > 0 else -1 if dx < 0 else 0\n        step_y = 1 if dy > 0 else -1 if dy < 0 else 0\n        x, y = x1 + step_x, y1 + step_y\n        while x != x2 or y != y2:\n            if board[x][y] != '.':\n                return False\n            x += step_x\n            y += step_y\n        return True\n\n    elif piece == 'knight':\n        return (abs(dx), abs(dy)) in [(2, 1), (1, 2)]\n\n    elif piece == 'bishop':\n        if abs(dx) != abs(dy):\n            return False\n        step_x = 1 if dx > 0 else -1\n        step_y = 1 if dy > 0 else -1\n        x, y = x1 + step_x, y1 + step_y\n        while x != x2 or y != y2:\n            if board[x][y] != '.':\n                return False\n            x += step_x\n            y += step_y\n        return True\n\n    elif piece == 'queen':\n        if dx == 0 or dy == 0 or abs(dx) == abs(dy):\n            step_x = 1 if dx > 0 else -1 if dx < 0 else 0\n            step_y = 1 if dy > 0 else -1 if dy < 0 else 0\n            x, y = x1 + step_x, y1 + step_y\n            while x != x2 or y != y2:\n                if board[x][y] != '.':\n                    return False\n                x += step_x\n                y += step_y\n            return True\n        return False\n\n    elif piece == 'king':\n        return abs(dx) <= 1 and abs(dy) <= 1\n\n    return False\n```"
  },
  {
    "task": "Implement a program that outputs the number of days in a given month.",
    "code": "```python\ndef days_in_month(month):\n    if month in ['January', 'March', 'May', 'July', 'August', 'October', 'December']:\n        return 31\n    elif month in ['April', 'June', 'September', 'November']:\n        return 30\n    elif month == 'February':\n        return 28\n    else:\n        return \"Invalid month\"\n\n# Example usage\nmonth = input(\"Enter the name of the month: \")\nprint(f\"The number of days in {month} is {days_in_month(month)}.\")\n```"
  },
  {
    "task": "Design a function that validates if a string is a valid hexadecimal number.",
    "code": "```python\ndef is_valid_hexadecimal(s):\n    if len(s) < 1:\n        return False\n    if s.startswith('0x') or s.startswith('0X'):\n        s = s[2:]\n    for char in s:\n        if not ('0' <= char <= '9' or 'a' <= char <= 'f' or 'A' <= char <= 'F'):\n            return False\n    return True\n```"
  },
  {
    "task": "Write a script that checks if a word is present in a list of predefined words.",
    "code": "```python\npredefined_words = ['apple', 'banana', 'cherry', 'date', 'fig']\n\nword_to_check = 'banana'\n\nif word_to_check in predefined_words:\n    print(f\"The word '{word_to_check}' is present in the list.\")\nelse:\n    print(f\"The word '{word_to_check}' is not present in the list.\")\n```"
  },
  {
    "task": "Create a routine to decide the correct tax bracket for a given income.",
    "code": "```python\ndef determine_tax_bracket(income):\n    if income <= 9875:\n        return \"10%\"\n    elif income <= 40125:\n        return \"12%\"\n    elif income <= 85525:\n        return \"22%\"\n    elif income <= 163300:\n        return \"24%\"\n    elif income <= 207350:\n        return \"32%\"\n    elif income <= 518400:\n        return \"35%\"\n    else:\n        return \"37%\"\n\n# Example usage:\nincome = 50000\ntax_bracket = determine_tax_bracket(income)\nprint(f\"The tax bracket for an income of ${income} is {tax_bracket}.\")\n```"
  },
  {
    "task": "Develop a function that determines if a point is within a triangle.",
    "code": "```python\ndef is_point_in_triangle(px, py, ax, ay, bx, by, cx, cy):\n    def sign(x1, y1, x2, y2, x3, y3):\n        return (x1 - x3) * (y2 - y3) - (x2 - x3) * (y1 - y3)\n\n    b1 = sign(px, py, ax, ay, bx, by) < 0.0\n    b2 = sign(px, py, bx, by, cx, cy) < 0.0\n    b3 = sign(px, py, cx, cy, ax, ay) < 0.0\n\n    return (b1 == b2) and (b2 == b3)\n```"
  },
  {
    "task": "Implement a program that checks if a given string is a valid binary number.",
    "code": "```python\ndef is_valid_binary(s):\n    if all(c in '01' for c in s):\n        return True\n    else:\n        return False\n\n# Example usage\nprint(is_valid_binary(\"101010\"))  # Should return True\nprint(is_valid_binary(\"102010\"))  # Should return False\n```"
  },
  {
    "task": "Design a system to evaluate the risk level of an investment based on criteria.",
    "code": "```python\ndef evaluate_investment_risk(amount, duration, market_conditions):\n    if amount < 1000:\n        if duration < 1:\n            if market_conditions == 'stable':\n                return 'Low Risk'\n            else:\n                return 'Medium Risk'\n        else:\n            if market_conditions == 'stable':\n                return 'Medium Risk'\n            else:\n                return 'High Risk'\n    else:\n        if duration < 1:\n            if market_conditions == 'stable':\n                return 'Medium Risk'\n            else:\n                return 'High Risk'\n        else:\n            if market_conditions == 'stable':\n                return 'High Risk'\n            else:\n                return 'Very High Risk'\n\n# Example usage\nrisk_level = evaluate_investment_risk(500, 0.5, 'volatile')\nprint(risk_level)\n```"
  },
  {
    "task": "Write a program that suggests a vacation destination based on budget and preferences.",
    "code": "```python\ndef suggest_vacation(budget, preference):\n    if budget < 500:\n        if preference == 'beach':\n            return 'Local Beach'\n        elif preference == 'mountain':\n            return 'Nearby Hiking Trail'\n        else:\n            return 'Staycation'\n    elif 500 <= budget < 2000:\n        if preference == 'beach':\n            return 'Florida'\n        elif preference == 'mountain':\n            return 'Rocky Mountains'\n        else:\n            return 'City Tour'\n    else:\n        if preference == 'beach':\n            return 'Maldives'\n        elif preference == 'mountain':\n            return 'Swiss Alps'\n        else:\n            return 'European Tour'\n\n# Example usage\nbudget = 1500\npreference = 'beach'\ndestination = suggest_vacation(budget, preference)\nprint(f\"Suggested vacation destination: {destination}\")\n```"
  },
  {
    "task": "Create a routine that checks if a username is already taken in a database.",
    "code": "```python\ndef is_username_taken(username, database):\n    if username in database:\n        return True\n    else:\n        return False\n\n# Example usage:\ndatabase = ['alice', 'bob', 'charlie']\nusername_to_check = 'bob'\nprint(is_username_taken(username_to_check, database))  # Output: True\n```"
  },
  {
    "task": "Develop a function that determines if a string is a valid IPv4 address.",
    "code": "```python\ndef is_valid_ipv4_address(ip):\n    parts = ip.split('.')\n    if len(parts) != 4:\n        return False\n    for part in parts:\n        if not part.isdigit():\n            return False\n        num = int(part)\n        if num < 0 or num > 255:\n            return False\n    return True\n```"
  },
  {
    "task": "Implement a program to decide which transportation method is quickest based on distance.",
    "code": "```python\ndef quickest_transportation(distance):\n    if distance < 1:\n        return \"Walking is quickest\"\n    elif distance < 5:\n        return \"Bicycling is quickest\"\n    elif distance < 20:\n        return \"Driving is quickest\"\n    else:\n        return \"Flying is quickest\"\n\n# Example usage:\ndistance = 10\nprint(quickest_transportation(distance))\n```"
  },
  {
    "task": "Design a script to validate if a number is a prime number.",
    "code": "```python\ndef is_prime(number):\n    if number <= 1:\n        return False\n    if number <= 3:\n        return True\n    if number % 2 == 0 or number % 3 == 0:\n        return False\n    i = 5\n    while i * i <= number:\n        if number % i == 0 or number % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\n# Example usage:\nnum = 29\nprint(f\"{num} is a prime number: {is_prime(num)}\")\n```"
  },
  {
    "task": "Write a function that checks if a number is divisible by another number without remainder.",
    "code": "```python\ndef is_divisible(num, divisor):\n    if divisor == 0:\n        return False\n    return num % divisor == 0\n```"
  },
  {
    "task": "Create a program that determines the type of a quadrilateral based on side lengths.",
    "code": "```python\ndef determine_quadrilateral_type(a, b, c, d):\n    if a == b == c == d:\n        return \"Square\"\n    elif a == c and b == d:\n        return \"Rectangle\"\n    elif a == b or b == c or c == d or a == d:\n        return \"Rhombus\"\n    else:\n        return \"Irregular Quadrilateral\"\n\n# Example usage\nsides = (5, 5, 5, 5)\nquadrilateral_type = determine_quadrilateral_type(*sides)\nprint(f\"The quadrilateral is a {quadrilateral_type}.\")\n```"
  },
  {
    "task": "Develop a routine to check if a sentence contains all letters of the alphabet.",
    "code": "```python\ndef contains_all_letters(sentence):\n    alphabet = set('abcdefghijklmnopqrstuvwxyz')\n    sentence_letters = set(sentence.lower())\n    return alphabet <= sentence_letters\n\n# Example usage\nsentence = \"The quick brown fox jumps over the lazy dog\"\nprint(contains_all_letters(sentence))  # Output: True\n```"
  },
  {
    "task": "Implement a program that outputs the appropriate error message based on an error code.",
    "code": "```python\ndef get_error_message(error_code):\n    if error_code == 404:\n        return \"Error 404: Not Found\"\n    elif error_code == 500:\n        return \"Error 500: Internal Server Error\"\n    elif error_code == 401:\n        return \"Error 401: Unauthorized\"\n    elif error_code == 403:\n        return \"Error 403: Forbidden\"\n    else:\n        return \"Unknown error code\"\n\n# Example usage:\nerror_code = 404\nprint(get_error_message(error_code))\n```"
  },
  {
    "task": "Design a function that categorizes a movie rating as G, PG, PG-13, or R.",
    "code": "```python\ndef categorize_movie_rating(rating):\n    if rating >= 0 and rating <= 5:\n        return 'G'\n    elif rating > 5 and rating <= 10:\n        return 'PG'\n    elif rating > 10 and rating <= 15:\n        return 'PG-13'\n    elif rating > 15 and rating <= 20:\n        return 'R'\n    else:\n        return 'Invalid rating'\n```"
  },
  {
    "task": "Write a script to check if a string is a valid Roman numeral.",
    "code": "```python\ndef is_valid_roman_numeral(s):\n    valid_roman_numerals = {\n        'I': 1, 'V': 5, 'X': 10, 'L': 50,\n        'C': 100, 'D': 500, 'M': 1000\n    }\n    i = 0\n    length = len(s)\n    while i < length:\n        if s[i] not in valid_roman_numerals:\n            return False\n        if (i + 1 < length and\n            valid_roman_numerals[s[i]] < valid_roman_numerals[s[i + 1]]):\n            if s[i] in {'I', 'X', 'C'}:\n                if s[i] == 'I' and s[i + 1] in {'V', 'X'}:\n                    i += 2\n                elif s[i] == 'X' and s[i + 1] in {'L', 'C'}:\n                    i += 2\n                elif s[i] == 'C' and s[i + 1] in {'D', 'M'}:\n                    i += 2\n                else:\n                    return False\n            else:\n                return False\n        else:\n            i += 1\n    return True\n\n# Example usage:\n# print(is_valid_roman_numeral(\"MCMXCIV\"))  # True\n# print(is_valid_roman_numeral(\"MCMXCIIII\")) # False\n```"
  },
  {
    "task": "Create a routine that decides if a person can retire based on age and years worked.",
    "code": "```python\ndef can_retire(age, years_worked):\n    if age >= 65 and years_worked >= 30:\n        return True\n    elif age >= 67:\n        return True\n    elif years_worked >= 35:\n        return True\n    else:\n        return False\n```"
  },
  {
    "task": "Develop a function that outputs a different emoji based on user mood input.",
    "code": "```python\ndef mood_to_emoji(mood):\n    if mood == \"happy\":\n        return \"\ud83d\ude0a\"\n    elif mood == \"sad\":\n        return \"\ud83d\ude22\"\n    elif mood == \"angry\":\n        return \"\ud83d\ude20\"\n    elif mood == \"excited\":\n        return \"\ud83d\ude06\"\n    elif mood == \"bored\":\n        return \"\ud83d\ude10\"\n    else:\n        return \"\ud83e\udd14\"\n\n# Example usage\nprint(mood_to_emoji(\"happy\"))\nprint(mood_to_emoji(\"sad\"))\nprint(mood_to_emoji(\"angry\"))\nprint(mood_to_emoji(\"excited\"))\nprint(mood_to_emoji(\"bored\"))\nprint(mood_to_emoji(\"confused\"))\n```"
  },
  {
    "task": "Implement a program that checks if a password meets security requirements.",
    "code": "```python\ndef is_secure_password(password):\n    if len(password) < 8:\n        return False\n    if not any(char.isdigit() for char in password):\n        return False\n    if not any(char.islower() for char in password):\n        return False\n    if not any(char.isupper() for char in password):\n        return False\n    if not any(char in \"!@#$%^&*()-_+=\" for char in password):\n        return False\n    return True\n\n# Example usage:\npassword = \"P@ssw0rd!\"\nprint(is_secure_password(password))\n```"
  },
  {
    "task": "Design a script to determine if a number is a palindrome when reversed.",
    "code": "```python\ndef is_palindrome(number):\n    original_str = str(number)\n    reversed_str = original_str[::-1]\n    return original_str == reversed_str\n\n# Example usage\nnumber = 12321\nprint(is_palindrome(number))  # Output: True\n```"
  },
  {
    "task": "Write a function that evaluates if a given day is a holiday.",
    "code": "```python\ndef is_holiday(day):\n    holidays = {\"New Year's Day\", \"Christmas\", \"Independence Day\"}\n    return day in holidays\n```"
  },
  {
    "task": "Create a program to decide if a library book is overdue based on the due date.",
    "code": "```python\nfrom datetime import datetime\n\ndef is_book_overdue(due_date_str):\n    current_date = datetime.now().date()\n    due_date = datetime.strptime(due_date_str, \"%Y-%m-%d\").date()\n    if current_date > due_date:\n        return \"The book is overdue.\"\n    else:\n        return \"The book is not overdue.\"\n\n# Example usage\ndue_date_input = \"2023-10-01\"\nprint(is_book_overdue(due_date_input))\n```"
  },
  {
    "task": "Develop a routine that checks if a given year is part of a leap century.",
    "code": "```python\ndef is_leap_century(year):\n    if year % 100 == 0 and year % 400 == 0:\n        return True\n    return False\n\n# Example usage:\nyear = 2000\nprint(f\"The year {year} is a leap century: {is_leap_century(year)}\")\n```"
  },
  {
    "task": "Implement a system to determine the correct category for a product based on user input.",
    "code": "```python\ndef categorize_product(product_type):\n    if product_type == 'Electronics':\n        category = 'Tech'\n    elif product_type == 'Clothing':\n        category = 'Apparel'\n    elif product_type == 'Food':\n        category = 'Groceries'\n    elif product_type == 'Furniture':\n        category = 'Home'\n    else:\n        category = 'Miscellaneous'\n    return category\n\nuser_input = input(\"Enter the product type: \")\ncategory = categorize_product(user_input)\nprint(f\"The product category is: {category}\")\n```"
  }
]