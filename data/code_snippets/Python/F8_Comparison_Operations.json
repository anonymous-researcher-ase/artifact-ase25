[
  {
    "task": "Write a function that checks if two strings are equal, ignoring case sensitivity.",
    "code": "```python\ndef are_strings_equal_ignore_case(str1, str2):\n    return str1.lower() == str2.lower()\n```"
  },
  {
    "task": "Create a program that determines if a number is greater than 10.",
    "code": "```python\ndef is_greater_than_ten(number):\n    return number > 10\n\n# Example usage\nnumber = 15\nresult = is_greater_than_ten(number)\nprint(f\"The number {number} is greater than 10: {result}\")\n```"
  },
  {
    "task": "Implement a feature that compares the current date to a given date and returns if it is in the future.",
    "code": "```python\nfrom datetime import datetime\n\ndef is_future_date(given_date):\n    current_date = datetime.now().date()\n    return given_date > current_date\n```"
  },
  {
    "task": "Design a system that checks if a user's age is less than 18 and restricts access if true.",
    "code": "```python\ndef check_access(age):\n    if age < 18:\n        return \"Access Restricted\"\n    else:\n        return \"Access Granted\"\n\n# Example usage:\nuser_age = 17\nresult = check_access(user_age)\nprint(result)\n```"
  },
  {
    "task": "Build an algorithm that finds the maximum of three given integers.",
    "code": "```python\ndef find_max_of_three(a, b, c):\n    max_val = a\n    if b > max_val:\n        max_val = b\n    if c > max_val:\n        max_val = c\n    return max_val\n```"
  },
  {
    "task": "Write a function that verifies if two arrays contain the same elements in the same order.",
    "code": "```python\ndef arrays_equal(arr1, arr2):\n    return arr1 == arr2\n```"
  },
  {
    "task": "Create a script that checks if a product's price is within a specified range.",
    "code": "```python\ndef is_price_within_range(price, min_price, max_price):\n    return min_price <= price <= max_price\n\n# Example usage\nprice = 50\nmin_price = 30\nmax_price = 100\nis_within_range = is_price_within_range(price, min_price, max_price)\nprint(f\"The price is within range: {is_within_range}\")\n```"
  },
  {
    "task": "Develop a tool that compares two versions of a software application and determines which is newer.",
    "code": "```python\ndef compare_versions(version1, version2):\n    parts1 = list(map(int, version1.split(\".\")))\n    parts2 = list(map(int, version2.split(\".\")))\n    for v1, v2 in zip(parts1, parts2):\n        if v1 > v2:\n            return version1\n        elif v1 < v2:\n            return version2\n    if len(parts1) > len(parts2):\n        return version1\n    elif len(parts1) < len(parts2):\n        return version2\n    return \"Versions are equal\"\n\n# Example usage:\nversion1 = \"1.2.3\"\nversion2 = \"1.2.4\"\nnewer_version = compare_versions(version1, version2)\nprint(f\"The newer version is: {newer_version}\")\n```"
  },
  {
    "task": "Implement a test to see if a given year is a leap year.",
    "code": "```python\ndef is_leap_year(year):\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\n\n# Example usage:\nyear = 2024\nprint(f\"{year} is a leap year: {is_leap_year(year)}\")\n```"
  },
  {
    "task": "Design a feature that tells if a student\u2019s grade is passing or failing based on a threshold.",
    "code": "```python\ndef is_passing_grade(grade, threshold=60):\n    return grade >= threshold\n\n# Example usage:\ngrade = 75\nthreshold = 60\nresult = \"Passing\" if is_passing_grade(grade, threshold) else \"Failing\"\nprint(result)\n```"
  },
  {
    "task": "Write a function to compare two file sizes and return the larger one.",
    "code": "```python\nimport os\n\ndef larger_file_size(file1, file2):\n    size1 = os.path.getsize(file1)\n    size2 = os.path.getsize(file2)\n    return file1 if size1 > size2 else file2\n\n# Example usage:\n# larger = larger_file_size('file1.txt', 'file2.txt')\n```"
  },
  {
    "task": "Build a program that checks if the temperature is below freezing point.",
    "code": "```python\ndef is_below_freezing(temperature):\n    freezing_point = 0  # in Celsius\n    return temperature < freezing_point\n\n# Example usage\ntemperature = -5\nprint(is_below_freezing(temperature))  # True\n```"
  },
  {
    "task": "Create a logic that determines if a number is within the Fibonacci sequence.",
    "code": "```python\ndef is_fibonacci_number(n):\n    if n < 0:\n        return False\n    a, b = 0, 1\n    while a < n:\n        a, b = b, a + b\n    return a == n\n\n# Example usage:\n# print(is_fibonacci_number(13))  # True\n# print(is_fibonacci_number(14))  # False\n```"
  },
  {
    "task": "Develop a function that checks if a given word is a palindrome.",
    "code": "```python\ndef is_palindrome(word):\n    return word == word[::-1]\n```"
  },
  {
    "task": "Write a script to see if a password meets a minimum length requirement.",
    "code": "```python\npassword = input(\"Enter your password: \")\nmin_length = 8\n\nif len(password) >= min_length:\n    print(\"Password is long enough.\")\nelse:\n    print(\"Password is too short.\")\n```"
  },
  {
    "task": "Implement a system that decides if a point is inside a circle based on its coordinates.",
    "code": "```python\ndef is_point_inside_circle(x, y, circle_center_x, circle_center_y, radius):\n    return (x - circle_center_x) ** 2 + (y - circle_center_y) ** 2 < radius ** 2\n\n# Example usage:\n# print(is_point_inside_circle(1, 1, 0, 0, 2))  # Should return True\n```"
  },
  {
    "task": "Design a program that checks if a shopping cart total exceeds a certain budget.",
    "code": "```python\ndef is_over_budget(cart_total, budget):\n    return cart_total > budget\n\n# Example usage:\ncart_total = 120.50\nbudget = 100.00\nprint(is_over_budget(cart_total, budget))  # Output: True if over budget, otherwise False\n```"
  },
  {
    "task": "Create a function that compares two players' scores and returns the winner.",
    "code": "```python\ndef find_winner(score1, score2):\n    if score1 > score2:\n        return \"Player 1 is the winner\"\n    elif score2 > score1:\n        return \"Player 2 is the winner\"\n    else:\n        return \"It's a tie\"\n```"
  },
  {
    "task": "Write a program to determine if one string is a substring of another.",
    "code": "```python\ndef is_substring(s1, s2):\n    return s1 in s2\n\n# Example usage:\nresult = is_substring(\"test\", \"this is a test string\")\nprint(result)\n```"
  },
  {
    "task": "Build a utility that checks if a number is a prime number.",
    "code": "```python\ndef is_prime(number):\n    if number <= 1:\n        return False\n    if number <= 3:\n        return True\n    if number % 2 == 0 or number % 3 == 0:\n        return False\n    i = 5\n    while i * i <= number:\n        if number % i == 0 or number % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n```"
  },
  {
    "task": "Write a function that checks if a given number is a perfect square.",
    "code": "```python\ndef is_perfect_square(n):\n    if n < 0:\n        return False\n    root = int(n ** 0.5)\n    return root * root == n\n```"
  },
  {
    "task": "Create a system that determines if a person is eligible for a senior citizen discount based on their age.",
    "code": "```python\ndef is_senior_citizen(age):\n    return age >= 65\n\n# Example usage:\nage_of_person = 70\nif is_senior_citizen(age_of_person):\n    print(\"Eligible for senior citizen discount.\")\nelse:\n    print(\"Not eligible for senior citizen discount.\")\n```"
  },
  {
    "task": "Develop a feature to check if a date falls on a weekend.",
    "code": "```python\nimport datetime\n\ndef is_weekend(date):\n    return date.weekday() >= 5\n\n# Example usage\ndate = datetime.date(2023, 10, 21)  # This is a Saturday\nprint(is_weekend(date))  # Output: True\n```"
  },
  {
    "task": "Design a program that sees if a given email address is in the correct format.",
    "code": "```python\nimport re\n\ndef is_valid_email(email):\n    pattern = r'^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$'\n    return bool(re.match(pattern, email))\n\n# Example usage\nemail = \"example@example.com\"\nprint(is_valid_email(email))\n```"
  },
  {
    "task": "Implement a test to check if a rectangle's area is larger than a triangle's area.",
    "code": "```python\ndef is_rectangle_area_larger(rectangle_width, rectangle_height, triangle_base, triangle_height):\n    rectangle_area = rectangle_width * rectangle_height\n    triangle_area = 0.5 * triangle_base * triangle_height\n    return rectangle_area > triangle_area\n```"
  },
  {
    "task": "Write a function that verifies if two rectangles overlap each other.",
    "code": "```python\ndef do_rectangles_overlap(rect1, rect2):\n    x1, y1, x2, y2 = rect1\n    a1, b1, a2, b2 = rect2\n\n    if x1 >= a2 or a1 >= x2:\n        return False\n    if y1 >= b2 or b1 >= y2:\n        return False\n    return True\n```"
  },
  {
    "task": "Create a script to compare two strings lexicographically.",
    "code": "```python\ndef compare_strings(string1, string2):\n    if string1 < string2:\n        return f'\"{string1}\" is less than \"{string2}\".'\n    elif string1 > string2:\n        return f'\"{string1}\" is greater than \"{string2}\".'\n    else:\n        return f'\"{string1}\" is equal to \"{string2}\".'\n\n# Example usage\nstring1 = \"apple\"\nstring2 = \"banana\"\nresult = compare_strings(string1, string2)\nprint(result)\n```"
  },
  {
    "task": "Build a program that checks if a list of numbers is in ascending order.",
    "code": "```python\ndef is_ascending(numbers):\n    return all(numbers[i] <= numbers[i + 1] for i in range(len(numbers) - 1))\n\n# Example usage:\nnumbers = [1, 2, 3, 4, 5]\nprint(is_ascending(numbers))  # Output: True\n\nnumbers = [1, 3, 2, 4, 5]\nprint(is_ascending(numbers))  # Output: False\n```"
  },
  {
    "task": "Design a system to compare the heights of two buildings.",
    "code": "```python\ndef compare_building_heights(height1, height2):\n    if height1 > height2:\n        return \"Building 1 is taller than Building 2.\"\n    elif height1 < height2:\n        return \"Building 2 is taller than Building 1.\"\n    else:\n        return \"Both buildings have the same height.\"\n\n# Example usage\nheight_of_building1 = 150\nheight_of_building2 = 120\nresult = compare_building_heights(height_of_building1, height_of_building2)\nprint(result)\n```"
  },
  {
    "task": "Write a feature that determines if a given time is before noon.",
    "code": "```python\nfrom datetime import datetime\n\ndef is_before_noon(time_str):\n    time_obj = datetime.strptime(time_str, '%H:%M')\n    noon_time = datetime.strptime('12:00', '%H:%M')\n    return time_obj < noon_time\n```"
  },
  {
    "task": "Implement a function to check if a given number is a power of two.",
    "code": "```python\ndef is_power_of_two(n):\n    if n <= 0:\n        return False\n    return (n & (n - 1)) == 0\n```"
  },
  {
    "task": "Create a program that determines if a word is longer than another word.",
    "code": "```python\ndef is_longer(word1, word2):\n    return len(word1) > len(word2)\n\n# Example usage\nword1 = \"elephant\"\nword2 = \"cat\"\nresult = is_longer(word1, word2)\nprint(f\"Is '{word1}' longer than '{word2}'? {result}\")\n```"
  },
  {
    "task": "Develop a function to compare the lengths of two lists and return the longer one.",
    "code": "```python\ndef longer_list(list1, list2):\n    if len(list1) > len(list2):\n        return list1\n    else:\n        return list2\n```"
  },
  {
    "task": "Write a script to see if a user's input matches a pre-defined secret code.",
    "code": "```python\nsecret_code = \"OpenSesame\"\nuser_input = input(\"Enter the secret code: \")\n\nif user_input == secret_code:\n    print(\"Access granted.\")\nelse:\n    print(\"Access denied.\")\n```"
  },
  {
    "task": "Build a utility that checks if a given year is in the 21st century.",
    "code": "```python\ndef is_21st_century(year):\n    return 2001 <= year <= 2100\n\n# Example usage:\nyear = 2023\nprint(is_21st_century(year))  # Output: True\n```"
  },
  {
    "task": "Create a logic that determines if a book's publication year is after 2000.",
    "code": "```python\npublication_year = 2005\nis_after_2000 = publication_year > 2000\n```"
  },
  {
    "task": "Design a feature to see if a number is divisible by both 3 and 5.",
    "code": "```python\ndef is_divisible_by_3_and_5(number):\n    return number % 3 == 0 and number % 5 == 0\n\n# Example usage\nnumber = 15\nprint(is_divisible_by_3_and_5(number))  # True\n```"
  },
  {
    "task": "Implement a system that checks if a student's GPA is above a certain threshold.",
    "code": "```python\ndef is_gpa_above_threshold(gpa, threshold):\n    return gpa > threshold\n\n# Example usage:\nstudent_gpa = 3.5\nthreshold = 3.0\nresult = is_gpa_above_threshold(student_gpa, threshold)\nprint(\"GPA is above threshold:\", result)\n```"
  },
  {
    "task": "Write a function to determine if a given angle is acute, right, or obtuse.",
    "code": "```python\ndef classify_angle(angle):\n    if angle < 90:\n        return \"acute\"\n    elif angle == 90:\n        return \"right\"\n    elif angle > 90:\n        return \"obtuse\"\n```"
  },
  {
    "task": "Develop a program that compares the lengths of two strings and returns the shorter one.",
    "code": "```python\ndef get_shorter_string(s1, s2):\n    return s1 if len(s1) < len(s2) else s2\n\n# Example usage\nstring1 = \"apple\"\nstring2 = \"banana\"\nshorter_string = get_shorter_string(string1, string2)\nprint(shorter_string)\n```"
  },
  {
    "task": "Create a script to verify if a username is unique within a list.",
    "code": "```python\ndef is_unique_username(username, username_list):\n    return username not in username_list\n\n# Example usage\nusernames = [\"alice\", \"bob\", \"charlie\"]\nnew_username = \"dave\"\nprint(is_unique_username(new_username, usernames))  # True or False\n```"
  },
  {
    "task": "Build a tool that checks if a job applicant meets all the listed qualifications.",
    "code": "```python\ndef applicant_qualifications_meet(requirements, applicant):\n    for key, value in requirements.items():\n        if key not in applicant or applicant[key] < value:\n            return False\n    return True\n\n# Example usage:\nrequirements = {\n    \"years_of_experience\": 3,\n    \"required_degree\": \"Bachelor\",\n    \"min_age\": 21\n}\n\napplicant = {\n    \"years_of_experience\": 4,\n    \"required_degree\": \"Bachelor\",\n    \"min_age\": 25\n}\n\nprint(applicant_qualifications_meet(requirements, applicant))\n```"
  },
  {
    "task": "Write a feature to see if a vehicle's speed exceeds the speed limit.",
    "code": "```python\ndef is_speeding(vehicle_speed, speed_limit):\n    return vehicle_speed > speed_limit\n```"
  },
  {
    "task": "Design a system that determines whether a given point is above or below the x-axis.",
    "code": "```python\ndef point_position(x, y):\n    if y > 0:\n        return \"Above the x-axis\"\n    elif y < 0:\n        return \"Below the x-axis\"\n    else:\n        return \"On the x-axis\"\n\n# Example usage:\nx, y = 3, -4\nresult = point_position(x, y)\nprint(result)\n```"
  },
  {
    "task": "Create a function that checks if a given word appears in a sentence.",
    "code": "```python\ndef word_in_sentence(word, sentence):\n    return word in sentence\n```"
  },
  {
    "task": "Implement a program that identifies whether a given number is negative or positive.",
    "code": "```python\ndef identify_number(num):\n    if num > 0:\n        return \"Positive\"\n    elif num < 0:\n        return \"Negative\"\n    else:\n        return \"Zero\"\n\n# Example usage\nnumber = float(input(\"Enter a number: \"))\nresult = identify_number(number)\nprint(f\"The number is {result}.\")\n```"
  },
  {
    "task": "Write a script to see if the sum of two numbers is greater than 100.",
    "code": "```python\ndef is_sum_greater_than_100(num1, num2):\n    return num1 + num2 > 100\n\n# Example usage:\nresult = is_sum_greater_than_100(50, 60)\nprint(result)\n```"
  },
  {
    "task": "Build a utility that checks if a file exists in a specified directory.",
    "code": "```python\nimport os\n\ndef file_exists(directory, filename):\n    return os.path.exists(os.path.join(directory, filename))\n```"
  },
  {
    "task": "Develop a system to compare the weights of two different objects.",
    "code": "```python\ndef compare_weights(weight1, weight2):\n    if weight1 > weight2:\n        return \"Object 1 is heavier than Object 2.\"\n    elif weight1 < weight2:\n        return \"Object 2 is heavier than Object 1.\"\n    else:\n        return \"Both objects weigh the same.\"\n\n# Example usage\nweight1 = 5.5\nweight2 = 7.2\nresult = compare_weights(weight1, weight2)\nprint(result)\n```"
  },
  {
    "task": "Create a logic to determine if a number falls within a defined range.",
    "code": "```python\ndef is_within_range(number, lower_bound, upper_bound):\n    return lower_bound <= number <= upper_bound\n```"
  },
  {
    "task": "Design a program that checks if an employee worked overtime based on hours worked.",
    "code": "```python\ndef check_overtime(hours_worked, standard_hours=40):\n    return hours_worked > standard_hours\n\n# Example usage:\nhours_worked = 45\novertime = check_overtime(hours_worked)\nprint(\"Overtime:\", overtime)\n```"
  },
  {
    "task": "Write a function to compare two dates and determine which is earlier.",
    "code": "```python\nfrom datetime import datetime\n\ndef compare_dates(date1_str, date2_str):\n    date_format = \"%Y-%m-%d\"\n    date1 = datetime.strptime(date1_str, date_format)\n    date2 = datetime.strptime(date2_str, date_format)\n    if date1 < date2:\n        return f\"{date1_str} is earlier than {date2_str}\"\n    elif date1 > date2:\n        return f\"{date2_str} is earlier than {date1_str}\"\n    else:\n        return \"Both dates are the same\"\n```"
  },
  {
    "task": "Create a script that verifies if a given word starts with a vowel.",
    "code": "```python\ndef starts_with_vowel(word):\n    return word[0].lower() in 'aeiou'\n\nword = input(\"Enter a word: \")\nif starts_with_vowel(word):\n    print(\"The word starts with a vowel.\")\nelse:\n    print(\"The word does not start with a vowel.\")\n```"
  },
  {
    "task": "Build a utility that checks if a number is even or odd.",
    "code": "```python\ndef is_even(number):\n    return number % 2 == 0\n\ndef is_odd(number):\n    return number % 2 != 0\n```"
  },
  {
    "task": "Implement a system that determines if a string contains only numeric characters.",
    "code": "```python\ndef is_numeric_string(s):\n    return s.isdigit()\n\n# Example Usage\nprint(is_numeric_string(\"12345\"))  # True\nprint(is_numeric_string(\"123a5\"))  # False\n```"
  },
  {
    "task": "Write a function to see if a given character is a vowel or consonant.",
    "code": "```python\ndef is_vowel_or_consonant(char):\n    vowels = \"aeiouAEIOU\"\n    if char in vowels:\n        return \"vowel\"\n    elif char.isalpha():\n        return \"consonant\"\n    else:\n        return \"not a letter\"\n```"
  },
  {
    "task": "Create a program that checks if a point lies within a specified rectangle.",
    "code": "```python\ndef is_point_in_rectangle(px, py, rx1, ry1, rx2, ry2):\n    return rx1 <= px <= rx2 and ry1 <= py <= ry2\n\n# Example usage:\npx, py = 3, 4  # Point coordinates\nrx1, ry1, rx2, ry2 = 1, 1, 5, 5  # Rectangle corners\nresult = is_point_in_rectangle(px, py, rx1, ry1, rx2, ry2)\nprint(result)  # Outputs: True\n```"
  },
  {
    "task": "Develop a feature to compare two lists and return the common elements.",
    "code": "```python\ndef common_elements(list1, list2):\n    return [element for element in list1 if element in list2]\n\n# Example usage:\n# list1 = [1, 2, 3, 4]\n# list2 = [3, 4, 5, 6]\n# print(common_elements(list1, list2))  # Output: [3, 4]\n```"
  },
  {
    "task": "Design a function that determines if a text contains any uppercase letters.",
    "code": "```python\ndef contains_uppercase(text):\n    return any(char.isupper() for char in text)\n```"
  },
  {
    "task": "Implement a script to check if a given sentence is a question.",
    "code": "```python\ndef is_question(sentence):\n    return sentence.strip().endswith('?')\n\n# Example usage:\nsentence = \"Is this a question?\"\nprint(is_question(sentence))  # Output: True\n```"
  },
  {
    "task": "Write a program to determine if a temperature is measured in Celsius or Fahrenheit.",
    "code": "```python\ndef determine_temperature_scale(temperature):\n    if temperature < -273.15:\n        return \"Invalid temperature\"\n    elif temperature < -40:\n        return \"Likely Fahrenheit\"\n    elif temperature < 0:\n        return \"Could be either\"\n    elif temperature <= 100:\n        return \"Likely Celsius\"\n    else:\n        return \"Likely Fahrenheit\"\n\n# Example usage\ntemp = 75\nscale = determine_temperature_scale(temp)\nprint(f\"The temperature {temp} is {scale}.\")\n```"
  },
  {
    "task": "Create a system that verifies if a student is enrolled in a particular course.",
    "code": "```python\ndef is_student_enrolled(student_name, course_name, enrollment_data):\n    if student_name in enrollment_data and course_name in enrollment_data[student_name]:\n        return True\n    return False\n\n# Example usage:\nenrollment_data = {\n    \"Alice\": [\"Math\", \"Science\"],\n    \"Bob\": [\"History\", \"Art\"],\n    \"Charlie\": [\"Math\", \"History\", \"Art\"]\n}\n\nstudent_name = \"Alice\"\ncourse_name = \"Math\"\nprint(is_student_enrolled(student_name, course_name, enrollment_data))  # Output: True\n```"
  },
  {
    "task": "Build a utility to check if a given string is a valid hexadecimal number.",
    "code": "```python\ndef is_valid_hex(s):\n    if not s:\n        return False\n    return all(c in '0123456789abcdefABCDEF' for c in s)\n\n# Example usage:\n# print(is_valid_hex('1A3F'))  # True\n# print(is_valid_hex('GHI'))   # False\n```"
  },
  {
    "task": "Write a function to see if two circles intersect based on their radii and center points.",
    "code": "```python\ndef circles_intersect(x1, y1, r1, x2, y2, r2):\n    distance_squared = (x2 - x1) ** 2 + (y2 - y1) ** 2\n    radius_sum_squared = (r1 + r2) ** 2\n    return distance_squared <= radius_sum_squared\n```"
  },
  {
    "task": "Develop a program that checks if a given number is within 10% of another number.",
    "code": "```python\ndef is_within_10_percent(num1, num2):\n    return abs(num1 - num2) <= 0.1 * num2\n\n# Example usage\nnumber1 = 105\nnumber2 = 100\nresult = is_within_10_percent(number1, number2)\nprint(result)\n```"
  },
  {
    "task": "Create a feature to determine if a character is alphanumeric.",
    "code": "```python\ndef is_alphanumeric(char):\n    return char.isalnum()\n```"
  },
  {
    "task": "Implement a system to compare the profit margins of two products.",
    "code": "```python\ndef compare_profit_margins(cost_price1, selling_price1, cost_price2, selling_price2):\n    profit_margin1 = (selling_price1 - cost_price1) / selling_price1\n    profit_margin2 = (selling_price2 - cost_price2) / selling_price2\n\n    if profit_margin1 > profit_margin2:\n        return \"Product 1 has a higher profit margin.\"\n    elif profit_margin1 < profit_margin2:\n        return \"Product 2 has a higher profit margin.\"\n    else:\n        return \"Both products have the same profit margin.\"\n\n# Example usage:\nresult = compare_profit_margins(50, 100, 30, 90)\nprint(result)\n```"
  },
  {
    "task": "Design a script to check if a given string contains any special characters.",
    "code": "```python\nimport re\n\ndef contains_special_characters(s):\n    return bool(re.search(r'[^a-zA-Z0-9]', s))\n\n# Example usage:\ninput_string = \"Hello@World!\"\nprint(contains_special_characters(input_string))  # Output: True\n```"
  },
  {
    "task": "Write a function to verify if a number is a multiple of another number.",
    "code": "```python\ndef is_multiple(num1, num2):\n    return num1 % num2 == 0\n```"
  },
  {
    "task": "Create a program that checks if a date is a holiday based on a list of holidays.",
    "code": "```python\nfrom datetime import datetime\n\ndef is_holiday(date_to_check, holidays):\n    return date_to_check in holidays\n\nholidays = [\n    datetime(2023, 12, 25),\n    datetime(2023, 1, 1),\n    datetime(2023, 11, 23)\n]\n\ndate_to_check = datetime(2023, 12, 25)\nprint(is_holiday(date_to_check, holidays))\n```"
  },
  {
    "task": "Build a utility to compare two text files and highlight the differences.",
    "code": "```python\ndef compare_files(file1_path, file2_path):\n    with open(file1_path, 'r') as file1, open(file2_path, 'r') as file2:\n        file1_lines = file1.readlines()\n        file2_lines = file2.readlines()\n    \n    max_lines = max(len(file1_lines), len(file2_lines))\n    \n    for i in range(max_lines):\n        line1 = file1_lines[i].strip() if i < len(file1_lines) else ''\n        line2 = file2_lines[i].strip() if i < len(file2_lines) else ''\n        \n        if line1 != line2:\n            print(f\"Line {i+1} differs:\")\n            print(f\"File1: {line1}\")\n            print(f\"File2: {line2}\")\n            print()\n\n# Example usage:\n# compare_files('file1.txt', 'file2.txt')\n```"
  },
  {
    "task": "Develop a function to determine if a given password is strong based on length and character diversity.",
    "code": "```python\ndef is_strong_password(password):\n    if len(password) < 8:\n        return False\n    \n    has_upper = False\n    has_lower = False\n    has_digit = False\n    has_special = False\n\n    for char in password:\n        if char.isupper():\n            has_upper = True\n        elif char.islower():\n            has_lower = True\n        elif char.isdigit():\n            has_digit = True\n        elif not char.isalnum():\n            has_special = True\n    \n    return has_upper and has_lower and has_digit and has_special\n```"
  },
  {
    "task": "Write a script to see if a number is within a specified distance from zero.",
    "code": "```python\ndef is_within_distance_from_zero(number, distance):\n    return -distance <= number <= distance\n\n# Example usage:\nnumber = 5\ndistance = 10\nresult = is_within_distance_from_zero(number, distance)\nprint(result)\n```"
  },
  {
    "task": "Create a system to check if a book title is available in a library database.",
    "code": "```python\ndef is_book_available(book_title, library_database):\n    return book_title in library_database\n\n# Example usage\nlibrary_database = {\"The Great Gatsby\", \"1984\", \"To Kill a Mockingbird\"}\nbook_title = \"1984\"\nprint(is_book_available(book_title, library_database))  # Outputs: True\n```"
  },
  {
    "task": "Implement a feature that determines if a user has administrator privileges.",
    "code": "```python\ndef has_admin_privileges(user):\n    return user.get('role') == 'admin'\n\n# Example usage\nuser = {'username': 'john_doe', 'role': 'admin'}\nprint(has_admin_privileges(user))  # Output: True\n```"
  },
  {
    "task": "Design a function to compare the brightness of two colors.",
    "code": "```python\ndef compare_brightness(color1, color2):\n    def brightness(color):\n        return 0.299 * color[0] + 0.587 * color[1] + 0.114 * color[2]\n    \n    brightness1 = brightness(color1)\n    brightness2 = brightness(color2)\n    \n    if brightness1 > brightness2:\n        return \"Color1 is brighter\"\n    elif brightness1 < brightness2:\n        return \"Color2 is brighter\"\n    else:\n        return \"Both colors have the same brightness\"\n```"
  },
  {
    "task": "Write a program to verify if a number is a valid credit card number using the Luhn algorithm.",
    "code": "```python\ndef luhn_check(card_number):\n    def digits_of(n):\n        return [int(d) for d in str(n)]\n    \n    digits = digits_of(card_number)\n    odd_digits = digits[-1::-2]\n    even_digits = digits[-2::-2]\n    checksum = sum(odd_digits)\n    \n    for d in even_digits:\n        checksum += sum(digits_of(d * 2))\n    \n    return checksum % 10 == 0\n\n# Example usage:\ncard_number = 1234567812345670\nis_valid = luhn_check(card_number)\nprint(is_valid)\n```"
  },
  {
    "task": "Create a script to determine if a given string is a valid IP address.",
    "code": "```python\nimport re\n\ndef is_valid_ip(ip):\n    pattern = re.compile(r'^(\\d{1,3}\\.){3}\\d{1,3}$')\n    if pattern.match(ip):\n        parts = ip.split('.')\n        return all(0 <= int(part) <= 255 for part in parts)\n    return False\n\n# Example usage\nip_address = \"192.168.1.1\"\nprint(is_valid_ip(ip_address))\n```"
  },
  {
    "task": "Build a utility that checks if a number is part of an arithmetic sequence.",
    "code": "```python\ndef is_in_arithmetic_sequence(num, start, difference, length):\n    for i in range(length):\n        if start + i * difference == num:\n            return True\n    return False\n```"
  },
  {
    "task": "Develop a feature to compare the efficiency of two algorithms based on time complexity.",
    "code": "```python\ndef compare_algorithms_time_complexity(algorithm1, algorithm2, n):\n    import time\n\n    def time_algorithm(algorithm, n):\n        start_time = time.perf_counter()\n        algorithm(n)\n        end_time = time.perf_counter()\n        return end_time - start_time\n    \n    time1 = time_algorithm(algorithm1, n)\n    time2 = time_algorithm(algorithm2, n)\n\n    if time1 < time2:\n        return \"Algorithm 1 is more efficient\"\n    elif time1 > time2:\n        return \"Algorithm 2 is more efficient\"\n    else:\n        return \"Both algorithms have similar efficiency\"\n```"
  },
  {
    "task": "Write a function to see if a given date falls in a leap year.",
    "code": "```python\ndef is_leap_year(year):\n    return (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0)\n\ndef is_date_in_leap_year(year, month, day):\n    return is_leap_year(year)\n```"
  },
  {
    "task": "Create a program that determines if a user's subscription is active based on the current date.",
    "code": "```python\nfrom datetime import datetime\n\ndef is_subscription_active(expiration_date):\n    current_date = datetime.now().date()\n    return current_date < expiration_date\n\n# Example usage\nexpiration_date = datetime(2023, 12, 31).date()\nprint(is_subscription_active(expiration_date))\n```"
  },
  {
    "task": "Design a tool to check if a user\u2019s input is a palindrome phrase, ignoring spaces and punctuation.",
    "code": "```python\nimport string\n\ndef is_palindrome(phrase):\n    cleaned_phrase = ''.join(char.lower() for char in phrase if char.isalnum())\n    return cleaned_phrase == cleaned_phrase[::-1]\n\nuser_input = input(\"Enter a phrase: \")\nif is_palindrome(user_input):\n    print(\"The phrase is a palindrome.\")\nelse:\n    print(\"The phrase is not a palindrome.\")\n```"
  },
  {
    "task": "Implement a system to verify if a given number is part of the Fibonacci sequence.",
    "code": "```python\ndef is_fibonacci_number(n):\n    def is_perfect_square(x):\n        s = int(x**0.5)\n        return s * s == x\n\n    return is_perfect_square(5 * n * n + 4) or is_perfect_square(5 * n * n - 4)\n\n# Example usage:\nnumber = 21\nprint(is_fibonacci_number(number))  # Output: True\n```"
  },
  {
    "task": "Write a program to compare the elevation of two geographic locations.",
    "code": "```python\ndef compare_elevation(elevation1, elevation2):\n    if elevation1 > elevation2:\n        return \"Location 1 is higher than Location 2.\"\n    elif elevation1 < elevation2:\n        return \"Location 2 is higher than Location 1.\"\n    else:\n        return \"Both locations have the same elevation.\"\n\n# Example usage:\nelevation1 = 1500  # Elevation of location 1 in meters\nelevation2 = 1200  # Elevation of location 2 in meters\n\nresult = compare_elevation(elevation1, elevation2)\nprint(result)\n```"
  },
  {
    "task": "Create a function to determine if a given string is a valid JSON format.",
    "code": "```python\nimport json\n\ndef is_valid_json(input_string):\n    try:\n        json.loads(input_string)\n        return True\n    except json.JSONDecodeError:\n        return False\n```"
  },
  {
    "task": "Build a utility that checks if a number is a factorial of any integer.",
    "code": "```python\ndef is_factorial(num):\n    if num < 0:\n        return False\n    factorial = 1\n    i = 1\n    while factorial < num:\n        i += 1\n        factorial *= i\n    return factorial == num\n\n# Example usage\nnumber = 120\nprint(is_factorial(number))  # Output: True, since 120 is 5!\n```"
  },
  {
    "task": "Develop a feature to compare the widths of two ribbons and return the wider one.",
    "code": "```python\ndef wider_ribbon(width1, width2):\n    return width1 if width1 > width2 else width2\n```"
  },
  {
    "task": "Write a script to see if a word is present in a list of banned words.",
    "code": "```python\ndef is_word_banned(word, banned_words):\n    return word in banned_words\n\nbanned_words = ['spam', 'scam', 'fraud']\nword = 'spam'\nprint(is_word_banned(word, banned_words))\n```"
  },
  {
    "task": "Design a system to determine if a patient's temperature is in the normal range.",
    "code": "```python\ndef is_temperature_normal(temperature: float) -> bool:\n    normal_min = 36.1\n    normal_max = 37.2\n    return normal_min <= temperature <= normal_max\n\n# Example usage\npatient_temperature = 36.5\nprint(is_temperature_normal(patient_temperature))\n```"
  },
  {
    "task": "Create a program that checks if a given time is during business hours.",
    "code": "```python\ndef is_business_hours(hour, minute):\n    start_hour, end_hour = 9, 17\n    if start_hour <= hour < end_hour:\n        return True\n    return False\n\nhour = 15  # Example hour\nminute = 30  # Example minute\nprint(is_business_hours(hour, minute))\n```"
  },
  {
    "task": "Implement a function to see if a number is a triangular number.",
    "code": "```python\ndef is_triangular_number(num):\n    if num < 0:\n        return False\n    n = 0\n    sum_ = 0\n    while sum_ < num:\n        n += 1\n        sum_ = n * (n + 1) // 2\n    return sum_ == num\n```"
  },
  {
    "task": "Write a feature to compare the number of vowels in two given strings.",
    "code": "```python\ndef count_vowels(s):\n    return sum(1 for char in s if char.lower() in 'aeiou')\n\ndef compare_vowel_count(str1, str2):\n    vowels_str1 = count_vowels(str1)\n    vowels_str2 = count_vowels(str2)\n    if vowels_str1 > vowels_str2:\n        return \"The first string has more vowels.\"\n    elif vowels_str1 < vowels_str2:\n        return \"The second string has more vowels.\"\n    else:\n        return \"Both strings have the same number of vowels.\"\n\n# Example usage:\n# result = compare_vowel_count(\"hello\", \"world\")\n# print(result)  # \"The first string has more vowels.\"\n```"
  }
]