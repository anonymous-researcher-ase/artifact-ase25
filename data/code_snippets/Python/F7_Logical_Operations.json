[
  {
    "task": "Create a function that takes two boolean inputs and returns true if both are true using logical AND.",
    "code": "```python\ndef both_true(a: bool, b: bool) -> bool:\n    return a and b\n```"
  },
  {
    "task": "Write a script to check if either of two given conditions are met using logical OR.",
    "code": "```python\ncondition1 = True  # Example condition 1\ncondition2 = False  # Example condition 2\n\nif condition1 or condition2:\n    print(\"At least one condition is met.\")\nelse:\n    print(\"Neither condition is met.\")\n```"
  },
  {
    "task": "Develop a program that negates a boolean variable using logical NOT.",
    "code": "```python\nboolean_variable = True\nnegated_variable = not boolean_variable\n```"
  },
  {
    "task": "Implement a feature that determines if a number is within a specific range using logical operators.",
    "code": "```python\ndef is_within_range(number, lower_bound, upper_bound):\n    return lower_bound <= number <= upper_bound\n```"
  },
  {
    "task": "Design a system that checks if a user has both read and write permissions using logical AND.",
    "code": "```python\ndef has_read_and_write_permissions(user_permissions):\n    return 'read' in user_permissions and 'write' in user_permissions\n\n# Example usage:\nuser_permissions = ['read', 'write', 'execute']\nresult = has_read_and_write_permissions(user_permissions)\nprint(result)  # Output: True\n```"
  },
  {
    "task": "Write a function to verify if a string is neither empty nor null using logical NOT.",
    "code": "```python\ndef is_not_empty_or_null(s):\n    return not (s is None or s == \"\")\n```"
  },
  {
    "task": "Create a conditional statement that executes a block of code if either of two expressions are true using logical OR.",
    "code": "```python\nexpression1 = True  # Example expression, can be any boolean condition\nexpression2 = False # Example expression, can be any boolean condition\n\nif expression1 or expression2:\n    # Block of code to execute if either expression1 or expression2 is true\n    print(\"At least one expression is true\")\n```"
  },
  {
    "task": "Build a program that inverts the truth value of a given condition using logical NOT.",
    "code": "```python\ndef invert_truth(value):\n    return not value\n\n# Example usage:\ncondition = True\ninverted_condition = invert_truth(condition)\nprint(inverted_condition)\n```"
  },
  {
    "task": "Compose a function to return true if a list is not empty using logical NOT.",
    "code": "```python\ndef is_list_not_empty(lst):\n    return not not lst\n```"
  },
  {
    "task": "Develop a filter that selects items from a collection only if they meet multiple criteria using logical AND.",
    "code": "```python\ndef filter_items(collection, criteria):\n    return [item for item in collection if all(condition(item) for condition in criteria)]\n\n# Example usage\ncollection = [1, 2, 3, 4, 5]\ncriteria = [\n    lambda x: x > 1,\n    lambda x: x < 5\n]\n\nfiltered_items = filter_items(collection, criteria)\nprint(filtered_items)  # Output: [2, 3, 4]\n```"
  },
  {
    "task": "Write a script that checks if a value is outside a given range using logical OR.",
    "code": "```python\ndef is_outside_range(value, lower_bound, upper_bound):\n    return value < lower_bound or value > upper_bound\n\n# Example usage\nvalue = 15\nlower_bound = 10\nupper_bound = 20\nresult = is_outside_range(value, lower_bound, upper_bound)\nprint(f\"Is the value {value} outside the range {lower_bound} to {upper_bound}? {result}\")\n```"
  },
  {
    "task": "Create a small program to toggle a boolean flag using logical NOT.",
    "code": "```python\nflag = False\nprint(f\"Initial flag state: {flag}\")\n\n# Toggle the flag\nflag = not flag\nprint(f\"Toggled flag state: {flag}\")\n\n# Toggle again\nflag = not flag\nprint(f\"Toggled flag state again: {flag}\")\n```"
  },
  {
    "task": "Implement a feature that evaluates if a username is both unique and valid using logical AND.",
    "code": "```python\ndef is_unique_username(username, existing_usernames):\n    return username not in existing_usernames\n\ndef is_valid_username(username):\n    return username.isalnum() and len(username) >= 5\n\ndef is_valid_and_unique_username(username, existing_usernames):\n    return is_unique_username(username, existing_usernames) and is_valid_username(username)\n\n# Example usage\nexisting_usernames = {\"user1\", \"user2\", \"user3\"}\nusername_to_check = \"user4\"\n\nresult = is_valid_and_unique_username(username_to_check, existing_usernames)\nprint(result)\n```"
  },
  {
    "task": "Design a conditional to perform an action if neither of two flags are set using logical NOT.",
    "code": "```python\nflag1 = False\nflag2 = False\n\nif not (flag1 or flag2):\n    # Perform the action\n    action = \"Action performed\"\n```"
  },
  {
    "task": "Write a function that returns true if at least one of multiple boolean inputs is true using logical OR.",
    "code": "```python\ndef at_least_one_true(*args):\n    return any(args)\n```"
  },
  {
    "task": "Create a loop that continues executing as long as two conditions are both false using logical NOT and AND.",
    "code": "```python\ncondition1 = False\ncondition2 = False\n\nwhile not condition1 and not condition2:\n    # Your code here\n    # Update condition1 and condition2 as needed to eventually break the loop\n    pass  # Placeholder for the loop body\n```"
  },
  {
    "task": "Develop a sequence that checks if a character is either a vowel or a consonant using logical OR.",
    "code": "```python\ndef check_character(char):\n    vowels = 'aeiouAEIOU'\n    if char in vowels:\n        return \"Vowel\"\n    elif char.isalpha():\n        return \"Consonant\"\n    else:\n        return \"Not a letter\"\n\n# Example usage\ncharacter = 'a'\nresult = check_character(character)\nprint(f\"The character '{character}' is a {result}.\")\n```"
  },
  {
    "task": "Implement a validation that ensures a password is both of minimum length and contains numbers using logical AND.",
    "code": "```python\ndef is_valid_password(password):\n    return len(password) >= 8 and any(char.isdigit() for char in password)\n\n# Example usage:\npassword = \"Example123\"\nprint(is_valid_password(password))  # Returns: True or False\n```"
  },
  {
    "task": "Compose a test to determine if a point is not within a circle using logical NOT.",
    "code": "```python\ndef is_point_outside_circle(x, y, circle_x, circle_y, radius):\n    return not ((x - circle_x) ** 2 + (y - circle_y) ** 2 <= radius ** 2)\n\n# Example usage:\nx, y = 5, 5\ncircle_x, circle_y, radius = 0, 0, 3\nresult = is_point_outside_circle(x, y, circle_x, circle_y, radius)\nprint(result)  # Output will be True if the point is outside the circle\n```"
  },
  {
    "task": "Write a function to decide if a user is either an admin or an editor using logical OR.",
    "code": "```python\ndef is_admin_or_editor(user_role):\n    return user_role == 'admin' or user_role == 'editor'\n```"
  },
  {
    "task": "Create a conditional statement to trigger an alert if two sensors both detect motion using logical AND.",
    "code": "```python\nsensor1_detects_motion = True  # Example sensor status\nsensor2_detects_motion = True  # Example sensor status\n\nif sensor1_detects_motion and sensor2_detects_motion:\n    alert = \"Motion detected by both sensors!\"\n    print(alert)\n```"
  },
  {
    "task": "Design a program to validate an email format and ensure it contains a domain using logical AND.",
    "code": "```python\ndef validate_email(email):\n    if \"@\" in email and \".\" in email.split('@')[-1]:\n        return True\n    return False\n\n# Example usage:\nemail = \"example@domain.com\"\nprint(validate_email(email))\n```"
  },
  {
    "task": "Develop a method to confirm that a transaction is neither fraudulent nor unauthorized using logical NOT.",
    "code": "```python\ndef is_transaction_valid(is_fraudulent, is_unauthorized):\n    return not is_fraudulent and not is_unauthorized\n\n# Example usage:\n# is_transaction_valid(False, False) should return True\n# is_transaction_valid(True, False) should return False\n# is_transaction_valid(False, True) should return False\n# is_transaction_valid(True, True) should return False\n```"
  },
  {
    "task": "Write a function that outputs true if a file is either missing or empty using logical OR.",
    "code": "```python\nimport os\n\ndef is_file_missing_or_empty(file_path):\n    return not os.path.exists(file_path) or os.path.getsize(file_path) == 0\n```"
  },
  {
    "task": "Implement a system to check if a student's grade is neither failing nor incomplete using logical NOT.",
    "code": "```python\ndef check_grade(grade):\n    failing_grades = ['F', 'I']  # F for fail, I for incomplete\n    return not (grade in failing_grades)\n\n# Example usage\ngrade_status = check_grade('B')\nprint(\"Grade is neither failing nor incomplete:\", grade_status)\n```"
  },
  {
    "task": "Create a script that executes a command if a file is both readable and writable using logical AND.",
    "code": "```python\nimport os\n\nfile_path = 'example.txt'\n\nif os.access(file_path, os.R_OK) and os.access(file_path, os.W_OK):\n    print(\"File is both readable and writable.\")\n```"
  },
  {
    "task": "Compose a function to determine if a temperature is not within a safe operating range using logical NOT.",
    "code": "```python\ndef is_temperature_unsafe(temperature, min_safe, max_safe):\n    return not (min_safe <= temperature <= max_safe)\n```"
  },
  {
    "task": "Design a check to see if a car is either out of fuel or needs maintenance using logical OR.",
    "code": "```python\ndef check_car_status(out_of_fuel, needs_maintenance):\n    return out_of_fuel or needs_maintenance\n\n# Example usage:\nout_of_fuel = True\nneeds_maintenance = False\nstatus = check_car_status(out_of_fuel, needs_maintenance)\nprint(\"Car needs attention:\", status)\n```"
  },
  {
    "task": "Develop a routine that ensures a network connection is both stable and secure using logical AND.",
    "code": "```python\ndef is_connection_stable():\n    # Placeholder for actual stability check\n    return True\n\ndef is_connection_secure():\n    # Placeholder for actual security check\n    return True\n\ndef is_connection_stable_and_secure():\n    return is_connection_stable() and is_connection_secure()\n\n# Example usage:\nconnection_status = is_connection_stable_and_secure()\nprint(\"Connection is stable and secure:\", connection_status)\n```"
  },
  {
    "task": "Write a conditional to print a message if a user is not logged in using logical NOT.",
    "code": "```python\nis_logged_in = False\n\nif not is_logged_in:\n    print(\"User is not logged in.\")\n```"
  },
  {
    "task": "Create a function that checks if a number is both even and positive using logical AND.",
    "code": "```python\ndef is_even_and_positive(number):\n    return number > 0 and number % 2 == 0\n```"
  },
  {
    "task": "Implement a feature that turns off a device if neither of two switches are on using logical NOT.",
    "code": "```python\ndef should_turn_off_device(switch1: bool, switch2: bool) -> bool:\n    return not (switch1 or switch2)\n\n# Example usage\nswitch1 = False\nswitch2 = False\ndevice_off = should_turn_off_device(switch1, switch2)\nprint(\"Turn off device:\", device_off)\n```"
  },
  {
    "task": "Compose a script to alert if a server is either down or running slow using logical OR.",
    "code": "```python\ndef check_server_status(is_down, is_slow):\n    if is_down or is_slow:\n        return \"Alert: Server is either down or running slow.\"\n    return \"Server is operating normally.\"\n\n# Example usage:\nserver_down = True\nserver_slow = False\nprint(check_server_status(server_down, server_slow))\n```"
  },
  {
    "task": "Design a validation method to ensure a form field is not empty using logical NOT.",
    "code": "```python\ndef is_field_not_empty(field_value):\n    return not not field_value\n```"
  },
  {
    "task": "Write a program to determine if two strings are both non-empty using logical AND.",
    "code": "```python\ndef are_both_non_empty(string1, string2):\n    return bool(string1) and bool(string2)\n\n# Example usage\nstring1 = \"Hello\"\nstring2 = \"World\"\nresult = are_both_non_empty(string1, string2)\nprint(result)\n```"
  },
  {
    "task": "Create a function that checks if a number is either prime or a perfect square using logical OR.",
    "code": "```python\nimport math\n\ndef is_prime_or_perfect_square(n):\n    if n < 2:\n        return False\n\n    # Check if n is a perfect square\n    if int(math.sqrt(n)) ** 2 == n:\n        return True\n\n    # Check if n is prime\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n# Example usage:\n# result = is_prime_or_perfect_square(4)  # True because 4 is a perfect square\n# result = is_prime_or_perfect_square(5)  # True because 5 is a prime number\n```"
  },
  {
    "task": "Develop a script to ensure a user is either an adult or has parental consent using logical OR.",
    "code": "```python\ndef can_access_content(is_adult, has_parental_consent):\n    return is_adult or has_parental_consent\n\n# Example usage:\nuser_is_adult = False\nuser_has_parental_consent = True\n\naccess_granted = can_access_content(user_is_adult, user_has_parental_consent)\nprint(\"Access Granted:\", access_granted)\n```"
  },
  {
    "task": "Implement a condition to execute a task if a variable is neither zero nor negative using logical NOT.",
    "code": "```python\nvalue = 10  # Example value\n\nif not (value <= 0):\n    # Task to execute if value is neither zero nor negative\n    print(\"Value is positive.\")\n```"
  },
  {
    "task": "Compose a method to verify if a system is both up-to-date and functioning using logical AND.",
    "code": "```python\ndef is_system_operational(is_up_to_date, is_functioning):\n    return is_up_to_date and is_functioning\n```"
  },
  {
    "task": "Write a function that returns true if a list contains neither duplicates nor null values using logical NOT.",
    "code": "```python\ndef has_no_duplicates_and_no_nulls(lst):\n    return not (len(lst) != len(set(lst)) or any(x is None for x in lst))\n```"
  },
  {
    "task": "Create a script to perform an action if a temperature is either too high or too low using logical OR.",
    "code": "```python\ntemperature = 75  # Example temperature value\n\n# Define temperature thresholds\nhigh_threshold = 90\nlow_threshold = 60\n\n# Perform an action based on temperature using logical OR\nif temperature > high_threshold or temperature < low_threshold:\n    print(\"Temperature is out of the acceptable range.\")\n```"
  },
  {
    "task": "Design a feature to toggle an option if a setting is not enabled using logical NOT.",
    "code": "```python\ndef toggle_option(setting_enabled, option_status):\n    if not setting_enabled:\n        option_status = not option_status\n    return option_status\n\n# Example usage:\nsetting_enabled = False\noption_status = False\noption_status = toggle_option(setting_enabled, option_status)\nprint(option_status)  # Output: True\n```"
  },
  {
    "task": "Develop a check to ensure a username is both available and meets length requirements using logical AND.",
    "code": "```python\ndef is_username_valid(username, existing_usernames, min_length, max_length):\n    is_available = username not in existing_usernames\n    meets_length_requirements = min_length <= len(username) <= max_length\n    return is_available and meets_length_requirements\n\n# Example usage\nexisting_usernames = {'user1', 'admin', 'guest'}\nmin_length = 5\nmax_length = 15\n\nusername = \"newuser\"\nis_valid = is_username_valid(username, existing_usernames, min_length, max_length)\nprint(\"Username is valid:\", is_valid)\n```"
  },
  {
    "task": "Implement a function that returns true if a number is neither too large nor too small using logical NOT.",
    "code": "```python\ndef is_neither_too_large_nor_too_small(number, lower_bound, upper_bound):\n    return not (number <= lower_bound or number >= upper_bound)\n```"
  },
  {
    "task": "Write a conditional to print a warning if a disk is either full or nearly full using logical OR.",
    "code": "```python\ndisk_full = False\ndisk_nearly_full = True\n\nif disk_full or disk_nearly_full:\n    print(\"Warning: Disk is full or nearly full.\")\n```"
  },
  {
    "task": "Create a routine to validate that two dates are both within a valid range using logical AND.",
    "code": "```python\nfrom datetime import datetime\n\ndef are_dates_within_range(date1_str, date2_str, start_date_str, end_date_str):\n    date_format = \"%Y-%m-%d\"\n    \n    date1 = datetime.strptime(date1_str, date_format)\n    date2 = datetime.strptime(date2_str, date_format)\n    start_date = datetime.strptime(start_date_str, date_format)\n    end_date = datetime.strptime(end_date_str, date_format)\n    \n    return start_date <= date1 <= end_date and start_date <= date2 <= end_date\n\n# Example usage\ndate1 = \"2023-05-10\"\ndate2 = \"2023-07-15\"\nstart_date = \"2023-01-01\"\nend_date = \"2023-12-31\"\n\nprint(are_dates_within_range(date1, date2, start_date, end_date))\n```"
  },
  {
    "task": "Compose a function to decide if a person is either a minor or a senior using logical OR.",
    "code": "```python\ndef is_minor_or_senior(age):\n    return age < 18 or age >= 65\n```"
  },
  {
    "task": "Design a script to execute a task if a condition is not met using logical NOT.",
    "code": "```python\ndef execute_task_if_condition_not_met(condition):\n    if not condition:\n        print(\"Executing task because condition is not met.\")\n\n# Example usage\ncondition = False\nexecute_task_if_condition_not_met(condition)\n```"
  },
  {
    "task": "Develop a program to verify if a process is neither running nor scheduled using logical NOT.",
    "code": "```python\nprocess_running = False\nprocess_scheduled = False\n\nif not process_running and not process_scheduled:\n    print(\"The process is neither running nor scheduled.\")\nelse:\n    print(\"The process is either running or scheduled.\")\n```"
  },
  {
    "task": "Implement a feature that confirms a file is both accessible and not locked using logical AND.",
    "code": "```python\nimport os\n\ndef is_file_accessible_and_not_locked(file_path):\n    return os.access(file_path, os.R_OK) and not os.access(file_path, os.W_OK)\n\n# Example usage\nfile_path = 'example.txt'\nif is_file_accessible_and_not_locked(file_path):\n    print(f\"{file_path} is accessible and not locked.\")\nelse:\n    print(f\"{file_path} is either not accessible or locked.\")\n```"
  },
  {
    "task": "Write a script to check if a device is either offline or in maintenance mode using logical OR.",
    "code": "```python\ndevice_status = {\n    'online': False,\n    'maintenance_mode': True\n}\n\nis_offline_or_in_maintenance = not device_status['online'] or device_status['maintenance_mode']\n\nprint(\"Device is offline or in maintenance mode:\", is_offline_or_in_maintenance)\n```"
  },
  {
    "task": "Create a function to ensure a password is both complex and unique using logical AND.",
    "code": "```python\ndef is_password_valid(password, existing_passwords):\n    has_upper = any(char.isupper() for char in password)\n    has_lower = any(char.islower() for char in password)\n    has_digit = any(char.isdigit() for char in password)\n    is_unique = password not in existing_passwords\n    \n    return has_upper and has_lower and has_digit and is_unique\n\n# Example usage\nexisting_passwords = ['Password123', 'Complex!456']\nprint(is_password_valid('NewPassword1', existing_passwords))  # True\nprint(is_password_valid('password', existing_passwords))      # False\n```"
  },
  {
    "task": "Design a validation that ensures a value is not negative using logical NOT.",
    "code": "```python\ndef is_not_negative(value):\n    return not (value < 0)\n\n# Example usage:\nvalue = -5\nif is_not_negative(value):\n    print(\"Value is not negative.\")\nelse:\n    print(\"Value is negative.\")\n```"
  },
  {
    "task": "Develop a check to see if a user has either exceeded their quota or is nearing it using logical OR.",
    "code": "```python\ndef check_quota_exceeded_or_nearing(usage, quota, nearing_threshold):\n    return usage > quota or usage >= nearing_threshold\n\n# Example usage:\nuser_usage = 90\nuser_quota = 100\nnearing_quota_threshold = 80\n\nresult = check_quota_exceeded_or_nearing(user_usage, user_quota, nearing_quota_threshold)\nprint(result)  # Output: True\n```"
  },
  {
    "task": "Implement a routine to confirm that a user is both authenticated and authorized using logical AND.",
    "code": "```python\ndef is_authenticated(user):\n    # Placeholder function to check if the user is authenticated\n    return user.get('authenticated', False)\n\ndef is_authorized(user):\n    # Placeholder function to check if the user is authorized\n    return user.get('authorized', False)\n\ndef is_user_valid(user):\n    return is_authenticated(user) and is_authorized(user)\n\n# Example usage\nuser = {'authenticated': True, 'authorized': True}\nprint(is_user_valid(user))  # Output: True\n```"
  },
  {
    "task": "Compose a function to determine if a light is either on or blinking using logical OR.",
    "code": "```python\ndef is_light_on_or_blinking(is_on, is_blinking):\n    return is_on or is_blinking\n```"
  },
  {
    "task": "Write a script that executes a command if a network connection is neither weak nor unstable using logical NOT.",
    "code": "```python\ndef check_connection(stability, strength):\n    if not (stability == 'unstable' or strength == 'weak'):\n        execute_command()\n\ndef execute_command():\n    print(\"Executing command due to stable and strong network connection.\")\n\n# Example usage:\nstability = 'stable'\nstrength = 'strong'\ncheck_connection(stability, strength)\n```"
  },
  {
    "task": "Create a program to verify that a sensor is both calibrated and active using logical AND.",
    "code": "```python\ndef is_sensor_operational(calibrated, active):\n    return calibrated and active\n\n# Example usage:\ncalibrated = True\nactive = True\nprint(is_sensor_operational(calibrated, active))\n```"
  },
  {
    "task": "Design a feature to alert if a process is either overdue or incomplete using logical OR.",
    "code": "```python\ndef alert_process_status(is_overdue, is_incomplete):\n    if is_overdue or is_incomplete:\n        return \"Alert: The process is either overdue or incomplete.\"\n    return \"The process is on track.\"\n\n# Example usage:\nprocess_overdue = True\nprocess_incomplete = False\n\nalert_message = alert_process_status(process_overdue, process_incomplete)\nprint(alert_message)\n```"
  },
  {
    "task": "Develop a script to check if a person is neither a guest nor a temporary user using logical NOT.",
    "code": "```python\ndef is_neither_guest_nor_temporary(user_status):\n    return not (user_status == 'guest' or user_status == 'temporary')\n\n# Example usage:\nuser_status = 'regular'\nprint(is_neither_guest_nor_temporary(user_status))\n```"
  },
  {
    "task": "Implement a function to toggle a light if a switch is not pressed using logical NOT.",
    "code": "```python\ndef toggle_light(is_switch_pressed, is_light_on):\n    if not is_switch_pressed:\n        return not is_light_on\n    return is_light_on\n```"
  },
  {
    "task": "Write a conditional to trigger an event if a file is either corrupted or missing using logical OR.",
    "code": "```python\nimport os\n\ndef is_file_corrupted(file_path):\n    # Dummy implementation for the sake of example\n    return False\n\ndef trigger_event():\n    print(\"Event triggered: File is either corrupted or missing.\")\n\nfile_path = 'example.txt'\nif is_file_corrupted(file_path) or not os.path.exists(file_path):\n    trigger_event()\n```"
  },
  {
    "task": "Create a routine that verifies if a vehicle is both insured and registered using logical AND.",
    "code": "```python\ndef is_vehicle_insured_and_registered(is_insured, is_registered):\n    return is_insured and is_registered\n```"
  },
  {
    "task": "Compose a method to check if an account is either overdrawn or flagged using logical OR.",
    "code": "```python\ndef is_account_issue(overdrawn, flagged):\n    return overdrawn or flagged\n```"
  },
  {
    "task": "Design a program to ensure an application is both installed and updated using logical AND.",
    "code": "```python\ndef is_application_ready(installed, updated):\n    return installed and updated\n\n# Example usage:\ninstalled = True\nupdated = True\napplication_ready = is_application_ready(installed, updated)\nprint(\"Application is ready:\", application_ready)\n```"
  },
  {
    "task": "Develop a function that returns true if a number is neither divisible by 3 nor 5 using logical NOT.",
    "code": "```python\ndef is_neither_divisible_by_3_nor_5(number):\n    return not (number % 3 == 0 or number % 5 == 0)\n```"
  },
  {
    "task": "Implement a script that alerts if a device is either overheating or underperforming using logical OR.",
    "code": "```python\ndef check_device_status(temperature, performance):\n    overheating_threshold = 75\n    underperforming_threshold = 40\n\n    if temperature > overheating_threshold or performance < underperforming_threshold:\n        return \"Alert: Device is either overheating or underperforming.\"\n    else:\n        return \"Device is functioning normally.\"\n        \ntemperature = 80  # Example temperature\nperformance = 35  # Example performance score\n\nalert_message = check_device_status(temperature, performance)\nprint(alert_message)\n```"
  },
  {
    "task": "Write a function to validate that a directory is both writable and not full using logical AND.",
    "code": "```python\nimport os\n\ndef is_directory_writable_and_not_full(path):\n    return os.access(path, os.W_OK) and os.statvfs(path).f_bavail > 0\n```"
  },
  {
    "task": "Create a conditional statement that executes if a button is not clicked using logical NOT.",
    "code": "```python\nbutton_clicked = False\n\nif not button_clicked:\n    # Execute the desired code here\n    pass\n```"
  },
  {
    "task": "Design a check to ensure a transaction is both verified and complete using logical AND.",
    "code": "```python\ndef is_transaction_valid(verified, complete):\n    return verified and complete\n\n# Example usage:\ntransaction_verified = True\ntransaction_complete = True\n\nis_valid = is_transaction_valid(transaction_verified, transaction_complete)\nprint(\"Transaction is valid:\", is_valid)\n```"
  },
  {
    "task": "Develop a routine to determine if a string is either uppercase or lowercase using logical OR.",
    "code": "```python\ndef is_upper_or_lower(s):\n    return s.isupper() or s.islower()\n\n# Example usage:\n# result = is_upper_or_lower(\"HELLO\")  # True\n# result = is_upper_or_lower(\"hello\")  # True\n# result = is_upper_or_lower(\"Hello\")  # False\n```"
  },
  {
    "task": "Implement a feature to execute a task if a variable is neither null nor undefined using logical NOT.",
    "code": "```python\ndef execute_task_if_not_none(value):\n    if value is not None:\n        # Execute the task\n        print(\"Executing task...\")\n\n# Example usage\nsome_value = \"Hello\"\nexecute_task_if_not_none(some_value)\n```"
  },
  {
    "task": "Compose a function to return true if a date is either today or tomorrow using logical OR.",
    "code": "```python\nfrom datetime import date, timedelta\n\ndef is_today_or_tomorrow(input_date):\n    today = date.today()\n    tomorrow = today + timedelta(days=1)\n    return input_date == today or input_date == tomorrow\n```"
  },
  {
    "task": "Write a script to confirm that a system is both running and not in maintenance mode using logical AND.",
    "code": "```python\nsystem_running = True\nin_maintenance_mode = False\n\nif system_running and not in_maintenance_mode:\n    print(\"System is running and not in maintenance mode.\")\nelse:\n    print(\"System is either not running or in maintenance mode.\")\n```"
  },
  {
    "task": "Create a program to verify if a text field is neither empty nor exceeds character limit using logical NOT.",
    "code": "```python\ndef verify_text_field(text, char_limit):\n    return not (text == \"\" or len(text) > char_limit)\n\n# Example usage\ntext = \"Example text\"\nchar_limit = 20\nresult = verify_text_field(text, char_limit)\nprint(result)\n```"
  },
  {
    "task": "Design a feature that checks if a user has either admin privileges or editor rights using logical OR.",
    "code": "```python\ndef has_access(is_admin, is_editor):\n    return is_admin or is_editor\n\n# Example usage\nuser_is_admin = True\nuser_is_editor = False\n\nif has_access(user_is_admin, user_is_editor):\n    print(\"User has access.\")\nelse:\n    print(\"User does not have access.\")\n```"
  },
  {
    "task": "Develop a script to ensure a file is both present and not empty using logical AND.",
    "code": "```python\nimport os\n\ndef is_file_present_and_not_empty(file_path):\n    return os.path.isfile(file_path) and os.path.getsize(file_path) > 0\n\nfile_path = 'example.txt'\nif is_file_present_and_not_empty(file_path):\n    print(\"The file is present and not empty.\")\nelse:\n    print(\"The file is either missing or empty.\")\n```"
  },
  {
    "task": "Implement a condition to execute a command if a setting is not active using logical NOT.",
    "code": "```python\nsetting_active = False\n\nif not setting_active:\n    print(\"Executing command because the setting is not active.\")\n```"
  },
  {
    "task": "Compose a method to decide if a person is either eligible or exempt using logical OR.",
    "code": "```python\ndef is_eligible_or_exempt(age, is_student, is_veteran):\n    eligible = age >= 18\n    exempt = is_student or is_veteran\n    return eligible or exempt\n```"
  },
  {
    "task": "Write a function that returns true if a number is both greater than zero and less than ten using logical AND.",
    "code": "```python\ndef is_between_zero_and_ten(num):\n    return num > 0 and num < 10\n```"
  },
  {
    "task": "Create a loop to continue as long as a condition is either true or false using logical OR.",
    "code": "```python\ncondition1 = True\ncondition2 = False\n\nwhile condition1 or condition2:\n    # Perform some actions\n    # For demonstration, we'll toggle the conditions to eventually break the loop\n    condition1 = not condition1\n    condition2 = not condition2\n```"
  },
  {
    "task": "Design a program to verify if an account is neither inactive nor suspended using logical NOT.",
    "code": "```python\ndef is_account_active(account_status):\n    inactive = account_status == \"inactive\"\n    suspended = account_status == \"suspended\"\n    return not (inactive or suspended)\n\n# Example usage:\naccount_status = \"active\"\nprint(is_account_active(account_status))  # Output: True\n```"
  },
  {
    "task": "Develop a feature to confirm that a document is both signed and verified using logical AND.",
    "code": "```python\ndef is_document_signed_and_verified(signed: bool, verified: bool) -> bool:\n    return signed and verified\n\n# Example usage\ndocument_status = is_document_signed_and_verified(signed=True, verified=True)\nprint(document_status)  # Output: True\n```"
  },
  {
    "task": "Implement a script to alert if a network is either congested or down using logical OR.",
    "code": "```python\ndef check_network_status(is_congested, is_down):\n    if is_congested or is_down:\n        print(\"Alert: Network is either congested or down.\")\n    else:\n        print(\"Network is operating normally.\")\n\n# Example usage\nnetwork_congested = True\nnetwork_down = False\n\ncheck_network_status(network_congested, network_down)\n```"
  },
  {
    "task": "Write a function to ensure a list is both sorted and unique using logical AND.",
    "code": "```python\ndef sorted_and_unique(lst):\n    return sorted(set(lst)) and list(set(lst))\n\n# Example usage\nexample_list = [4, 1, 3, 2, 2, 4]\nresult = sorted_and_unique(example_list)\nprint(result)\n```"
  },
  {
    "task": "Create a conditional statement to execute if a task is not completed using logical NOT.",
    "code": "```python\ntask_completed = False\n\nif not task_completed:\n    # Code to execute if the task is not completed\n    print(\"Task is not completed.\")\n```"
  },
  {
    "task": "Design a check to determine if a component is either faulty or missing using logical OR.",
    "code": "```python\ndef check_component_status(is_faulty, is_missing):\n    return is_faulty or is_missing\n\n# Example usage:\nfaulty = True\nmissing = False\nstatus = check_component_status(faulty, missing)\nprint(\"Component is faulty or missing:\", status)\n```"
  },
  {
    "task": "Develop a routine to verify if a user is both online and available using logical AND.",
    "code": "```python\ndef is_user_online_and_available(user_status):\n    return user_status['online'] and user_status['available']\n\n# Example usage:\nuser_status = {'online': True, 'available': True}\nprint(is_user_online_and_available(user_status))\n```"
  },
  {
    "task": "Implement a feature to toggle an alert if a condition is not satisfied using logical NOT.",
    "code": "```python\ndef toggle_alert(condition):\n    alert = False\n    if not condition:\n        alert = True\n    return alert\n\n# Example usage:\ncondition = False\nalert_status = toggle_alert(condition)\nprint(\"Alert Status:\", alert_status)\n```"
  },
  {
    "task": "Compose a function to return true if a transaction is either pending or failed using logical OR.",
    "code": "```python\ndef is_transaction_pending_or_failed(status):\n    return status == \"pending\" or status == \"failed\"\n```"
  },
  {
    "task": "Write a script to ensure a configuration is both correct and active using logical AND.",
    "code": "```python\ndef is_configuration_valid(configuration):\n    # Example function to check if the configuration is correct\n    return configuration.get('is_correct', False)\n\ndef is_configuration_active(configuration):\n    # Example function to check if the configuration is active\n    return configuration.get('is_active', False)\n\ndef check_configuration(configuration):\n    if is_configuration_valid(configuration) and is_configuration_active(configuration):\n        return \"Configuration is both correct and active.\"\n    else:\n        return \"Configuration is either incorrect or inactive.\"\n\n# Example usage:\nconfig = {\n    'is_correct': True,\n    'is_active': True\n}\n\nresult = check_configuration(config)\nprint(result)\n```"
  }
]