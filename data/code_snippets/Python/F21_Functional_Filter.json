[
  {
    "task": "Filter out all even numbers from a list of integers.",
    "code": "```python\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nfiltered_numbers = list(filter(lambda x: x % 2 != 0, numbers))\n```"
  },
  {
    "task": "Select all words from a list that start with the letter 'a'.",
    "code": "```python\nwords = ['apple', 'banana', 'avocado', 'grape', 'apricot']\nfiltered_words = list(filter(lambda word: word.startswith('a'), words))\n```"
  },
  {
    "task": "Find all positive numbers in a collection of integers.",
    "code": "```python\nnumbers = [-10, 15, 0, -3, 12, 9, -1]\npositive_numbers = list(filter(lambda x: x > 0, numbers))\n```"
  },
  {
    "task": "Extract all employees who are older than 30 from an employee directory.",
    "code": "```python\nemployees = [\n    {\"name\": \"Alice\", \"age\": 28},\n    {\"name\": \"Bob\", \"age\": 35},\n    {\"name\": \"Charlie\", \"age\": 31},\n    {\"name\": \"David\", \"age\": 27}\n]\n\nolder_than_30 = list(filter(lambda employee: employee[\"age\"] > 30, employees))\n```"
  },
  {
    "task": "List all cities with a population greater than one million from a dataset.",
    "code": "```python\ncities = [\n    {\"name\": \"New York\", \"population\": 8419000},\n    {\"name\": \"Los Angeles\", \"population\": 3980000},\n    {\"name\": \"Chicago\", \"population\": 2700000},\n    {\"name\": \"Houston\", \"population\": 2320000},\n    {\"name\": \"Phoenix\", \"population\": 1690000},\n    {\"name\": \"Philadelphia\", \"population\": 1580000},\n    {\"name\": \"San Antonio\", \"population\": 1540000},\n    {\"name\": \"San Diego\", \"population\": 1420000},\n    {\"name\": \"Dallas\", \"population\": 1340000},\n    {\"name\": \"San Jose\", \"population\": 1020000},\n    {\"name\": \"Austin\", \"population\": 961000},\n]\n\nlarge_cities = list(filter(lambda city: city[\"population\"] > 1000000, cities))\nprint([city[\"name\"] for city in large_cities])\n```"
  },
  {
    "task": "Filter out products that are out of stock from a product list.",
    "code": "```python\nproducts = [\n    {\"name\": \"Laptop\", \"stock\": 10},\n    {\"name\": \"Smartphone\", \"stock\": 0},\n    {\"name\": \"Tablet\", \"stock\": 5},\n    {\"name\": \"Headphones\", \"stock\": 0}\n]\n\nin_stock_products = list(filter(lambda product: product['stock'] > 0, products))\n```"
  },
  {
    "task": "Select all students who have passed with a grade above 70 from a list of student scores.",
    "code": "```python\nstudents_scores = [\n    {\"name\": \"Alice\", \"grade\": 85},\n    {\"name\": \"Bob\", \"grade\": 67},\n    {\"name\": \"Charlie\", \"grade\": 92},\n    {\"name\": \"David\", \"grade\": 74},\n    {\"name\": \"Eve\", \"grade\": 69}\n]\n\npassed_students = list(filter(lambda student: student[\"grade\"] > 70, students_scores))\n```"
  },
  {
    "task": "Identify all strings in an array that contain the substring 'cat'.",
    "code": "```python\nstrings = [\"catapult\", \"scatter\", \"dog\", \"concatenate\", \"catalog\", \"apple\"]\nfiltered_strings = list(filter(lambda s: 'cat' in s, strings))\n```"
  },
  {
    "task": "Extract all transactions above $1000 from a financial record.",
    "code": "```python\nfinancial_record = [\n    {\"id\": 1, \"amount\": 950},\n    {\"id\": 2, \"amount\": 1500},\n    {\"id\": 3, \"amount\": 2500},\n    {\"id\": 4, \"amount\": 500},\n    {\"id\": 5, \"amount\": 1200}\n]\n\ntransactions_above_1000 = list(filter(lambda transaction: transaction[\"amount\"] > 1000, financial_record))\n```"
  },
  {
    "task": "Filter out all non-prime numbers from a list of numbers.",
    "code": "```python\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef filter_primes(numbers):\n    return list(filter(is_prime, numbers))\n\n# Example usage:\nnumbers = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nprime_numbers = filter_primes(numbers)\n```"
  },
  {
    "task": "Select all books with more than 300 pages from a library catalog.",
    "code": "```python\nlibrary_catalog = [\n    {\"title\": \"Book One\", \"pages\": 250},\n    {\"title\": \"Book Two\", \"pages\": 350},\n    {\"title\": \"Book Three\", \"pages\": 400},\n    {\"title\": \"Book Four\", \"pages\": 150}\n]\n\nbooks_with_more_than_300_pages = list(filter(lambda book: book['pages'] > 300, library_catalog))\n```"
  },
  {
    "task": "Identify all users who have logged in within the past week from a user database.",
    "code": "```python\nfrom datetime import datetime, timedelta\n\n# Example user database with login timestamps\nuser_database = [\n    {'username': 'user1', 'last_login': datetime(2023, 10, 1)},\n    {'username': 'user2', 'last_login': datetime(2023, 9, 25)},\n    {'username': 'user3', 'last_login': datetime(2023, 10, 5)},\n    {'username': 'user4', 'last_login': datetime(2023, 9, 28)},\n    {'username': 'user5', 'last_login': datetime(2023, 10, 2)},\n]\n\ndef logged_in_within_past_week(user):\n    return user['last_login'] >= datetime.now() - timedelta(days=7)\n\nusers_logged_in_past_week = list(filter(logged_in_within_past_week, user_database))\n```"
  },
  {
    "task": "Extract all URLs that contain 'https' from a list of web addresses.",
    "code": "```python\nweb_addresses = [\n    \"http://example.com\",\n    \"https://secure.com\",\n    \"ftp://fileserver.com\",\n    \"https://anothersecure.com\"\n]\n\nhttps_urls = list(filter(lambda url: url.startswith('https://'), web_addresses))\n```"
  },
  {
    "task": "Find all movies released after the year 2000 from a movie database.",
    "code": "```python\nmovies = [\n    {\"title\": \"The Matrix\", \"year\": 1999},\n    {\"title\": \"Gladiator\", \"year\": 2000},\n    {\"title\": \"Inception\", \"year\": 2010},\n    {\"title\": \"Interstellar\", \"year\": 2014},\n    {\"title\": \"The Dark Knight\", \"year\": 2008},\n]\n\nmovies_after_2000 = list(filter(lambda movie: movie[\"year\"] > 2000, movies))\n```"
  },
  {
    "task": "Select all tasks with a priority level of 'high' from a task management system.",
    "code": "```python\ntasks = [\n    {'id': 1, 'description': 'Task 1', 'priority': 'high'},\n    {'id': 2, 'description': 'Task 2', 'priority': 'medium'},\n    {'id': 3, 'description': 'Task 3', 'priority': 'low'},\n    {'id': 4, 'description': 'Task 4', 'priority': 'high'}\n]\n\nhigh_priority_tasks = list(filter(lambda task: task['priority'] == 'high', tasks))\n```"
  },
  {
    "task": "Filter out all words longer than five characters from a text document.",
    "code": "```python\ndef filter_long_words(text):\n    return ' '.join(filter(lambda word: len(word) <= 5, text.split()))\n\n# Example usage\nwith open('document.txt', 'r') as file:\n    content = file.read()\n\nfiltered_content = filter_long_words(content)\n\nwith open('filtered_document.txt', 'w') as file:\n    file.write(filtered_content)\n```"
  },
  {
    "task": "Extract all odd numbers from a sequence of integers.",
    "code": "```python\ndef extract_odd_numbers(sequence):\n    return list(filter(lambda x: x % 2 != 0, sequence))\n```"
  },
  {
    "task": "Select all files larger than 10MB from a list of files.",
    "code": "```python\nfiles = [\n    {\"name\": \"file1.txt\", \"size\": 5000000},\n    {\"name\": \"file2.txt\", \"size\": 15000000},\n    {\"name\": \"file3.txt\", \"size\": 25000000},\n    {\"name\": \"file4.txt\", \"size\": 8000000},\n]\n\nlarge_files = list(filter(lambda f: f[\"size\"] > 10 * 1024 * 1024, files))\n```"
  },
  {
    "task": "Identify all events occurring on weekends from an event schedule.",
    "code": "```python\nfrom datetime import datetime\n\ndef is_weekend(date_str):\n    date_obj = datetime.strptime(date_str, '%Y-%m-%d')\n    return date_obj.weekday() >= 5\n\ndef filter_weekend_events(event_schedule):\n    return list(filter(lambda event: is_weekend(event['date']), event_schedule))\n\n# Example usage:\nevent_schedule = [\n    {'name': 'Event 1', 'date': '2023-10-14'},\n    {'name': 'Event 2', 'date': '2023-10-15'},\n    {'name': 'Event 3', 'date': '2023-10-16'},\n]\n\nweekend_events = filter_weekend_events(event_schedule)\nprint(weekend_events)\n```"
  },
  {
    "task": "Find all emails from a specific domain in an email list.",
    "code": "```python\ndef filter_emails_by_domain(email_list, domain):\n    return list(filter(lambda email: email.endswith(f\"@{domain}\"), email_list))\n\n# Example usage:\nemails = [\"user1@example.com\", \"user2@test.com\", \"user3@example.com\", \"user4@test.com\"]\nfiltered_emails = filter_emails_by_domain(emails, \"example.com\")\nprint(filtered_emails)\n```"
  },
  {
    "task": "Filter out all people not living in a specific city from a contact list.",
    "code": "```python\ndef filter_by_city(contacts, city):\n    return list(filter(lambda person: person.get('city') == city, contacts))\n\n# Example usage:\ncontacts = [\n    {'name': 'Alice', 'city': 'New York'},\n    {'name': 'Bob', 'city': 'Los Angeles'},\n    {'name': 'Charlie', 'city': 'New York'}\n]\n\nfiltered_contacts = filter_by_city(contacts, 'New York')\nprint(filtered_contacts)\n```"
  },
  {
    "task": "Select all rectangles with an area greater than 50 from a list of rectangles.",
    "code": "```python\nrectangles = [{'width': 5, 'height': 10}, {'width': 7, 'height': 8}, {'width': 10, 'height': 3}, {'width': 6, 'height': 9}]\n\n# Functional filter to select rectangles with area greater than 50\nfiltered_rectangles = list(filter(lambda r: r['width'] * r['height'] > 50, rectangles))\n\nprint(filtered_rectangles)\n```"
  },
  {
    "task": "Extract all elements that are not null from a collection.",
    "code": "```python\ndef filter_non_null(collection):\n    return list(filter(lambda x: x is not None, collection))\n```"
  },
  {
    "task": "Identify all registered voters over the age of 18 from a voter registration list.",
    "code": "```python\nvoter_registration_list = [\n    {\"name\": \"Alice\", \"age\": 17},\n    {\"name\": \"Bob\", \"age\": 23},\n    {\"name\": \"Charlie\", \"age\": 19},\n    {\"name\": \"David\", \"age\": 16},\n    {\"name\": \"Eve\", \"age\": 30}\n]\n\nregistered_voters_over_18 = list(filter(lambda voter: voter['age'] > 18, voter_registration_list))\n```"
  },
  {
    "task": "Select all cars manufactured after 2015 from a vehicle registry.",
    "code": "```python\nvehicles = [\n    {'make': 'Toyota', 'model': 'Camry', 'year': 2017},\n    {'make': 'Ford', 'model': 'Mustang', 'year': 2015},\n    {'make': 'Tesla', 'model': 'Model S', 'year': 2018},\n    {'make': 'Chevrolet', 'model': 'Impala', 'year': 2014}\n]\n\ncars_after_2015 = list(filter(lambda car: car['year'] > 2015, vehicles))\n```"
  },
  {
    "task": "Filter out all negative numbers from a dataset of integers.",
    "code": "```python\ndef filter_negatives(data):\n    return list(filter(lambda x: x >= 0, data))\n\n# Example usage:\ndataset = [4, -3, 2, -1, 0, 5, -6]\nfiltered_data = filter_negatives(dataset)\nprint(filtered_data)\n```"
  },
  {
    "task": "Extract all characters from a string that are uppercase.",
    "code": "```python\ndef extract_uppercase(s):\n    return ''.join(filter(str.isupper, s))\n\n# Example usage:\n# result = extract_uppercase(\"Hello World!\")\n# print(result)  # Output: \"HW\"\n```"
  },
  {
    "task": "Identify all projects with a deadline within the next month from a project database.",
    "code": "```python\nfrom datetime import datetime, timedelta\n\n# Example project database\nprojects = [\n    {'name': 'Project A', 'deadline': datetime(2023, 11, 15)},\n    {'name': 'Project B', 'deadline': datetime(2023, 12, 5)},\n    {'name': 'Project C', 'deadline': datetime(2023, 10, 30)},\n    {'name': 'Project D', 'deadline': datetime(2023, 12, 10)}\n]\n\ntoday = datetime.today()\nnext_month = today + timedelta(days=30)\n\nfiltered_projects = list(filter(lambda p: today <= p['deadline'] <= next_month, projects))\n\nprint(filtered_projects)\n```"
  },
  {
    "task": "Select all athletes with a score higher than 90 from a competition result list.",
    "code": "```python\nathletes = [\n    {\"name\": \"Athlete1\", \"score\": 91},\n    {\"name\": \"Athlete2\", \"score\": 85},\n    {\"name\": \"Athlete3\", \"score\": 95},\n    {\"name\": \"Athlete4\", \"score\": 88}\n]\n\nhigh_scorers = list(filter(lambda athlete: athlete['score'] > 90, athletes))\n```"
  },
  {
    "task": "Filter out all strings that do not contain vowels from a list of words.",
    "code": "```python\ndef contains_vowels(word):\n    return any(c in 'aeiouAEIOU' for c in word)\n\nwords = [\"example\", \"sky\", \"hello\", \"world\", \"try\", \"fly\"]\nfiltered_words = list(filter(contains_vowels, words))\n```"
  },
  {
    "task": "Extract all dates that fall on a weekday from a calendar.",
    "code": "```python\nfrom datetime import datetime, timedelta\n\ndef get_weekdays(dates):\n    return list(filter(lambda date: date.weekday() < 5, dates))\n\n# Example usage:\ncalendar_dates = [datetime(2023, 10, 1) + timedelta(days=i) for i in range(31)]\nweekdays = get_weekdays(calendar_dates)\nprint(weekdays)\n```"
  },
  {
    "task": "Find all software versions that are stable releases from a list of software versions.",
    "code": "```python\nsoftware_versions = [\"1.0.0-alpha\", \"1.0.0\", \"1.0.1-beta\", \"1.1.0\", \"1.2.0-rc\", \"2.0.0\", \"2.1.0-alpha\"]\n\nstable_releases = list(filter(lambda version: '-' not in version, software_versions))\nprint(stable_releases)\n```"
  },
  {
    "task": "Select all temperatures above freezing from a weather report.",
    "code": "```python\nweather_report = [32, 45, 28, 50, 31, 40]\nabove_freezing = list(filter(lambda temp: temp > 32, weather_report))\n```"
  },
  {
    "task": "Identify all countries with a GDP per capita above $40,000 from a country dataset.",
    "code": "```python\ncountries = [\n    {\"name\": \"CountryA\", \"gdp_per_capita\": 45000},\n    {\"name\": \"CountryB\", \"gdp_per_capita\": 35000},\n    {\"name\": \"CountryC\", \"gdp_per_capita\": 55000},\n    {\"name\": \"CountryD\", \"gdp_per_capita\": 42000}\n]\n\nresult = list(filter(lambda country: country[\"gdp_per_capita\"] > 40000, countries))\n```"
  },
  {
    "task": "Filter out all names shorter than four letters from a roster.",
    "code": "```python\nroster = [\"Alice\", \"Bob\", \"Eve\", \"John\", \"Mike\", \"Tom\"]\nfiltered_roster = list(filter(lambda name: len(name) >= 4, roster))\n```"
  },
  {
    "task": "Extract all numbers divisible by five from a sequence.",
    "code": "```python\ndef extract_divisible_by_five(sequence):\n    return list(filter(lambda x: x % 5 == 0, sequence))\n\n# Example usage\nsequence = [10, 22, 35, 47, 55, 60]\nresult = extract_divisible_by_five(sequence)\nprint(result)\n```"
  },
  {
    "task": "Select all movies with a rating above 4 stars from a film review site.",
    "code": "```python\nmovies = [\n    {'title': 'Inception', 'rating': 4.8},\n    {'title': 'The Room', 'rating': 3.7},\n    {'title': 'Interstellar', 'rating': 4.6},\n    {'title': 'Cats', 'rating': 2.8},\n    {'title': 'The Shawshank Redemption', 'rating': 4.9}\n]\n\nhigh_rated_movies = list(filter(lambda movie: movie['rating'] > 4, movies))\nprint(high_rated_movies)\n```"
  },
  {
    "task": "Find all jobs with a salary above $50,000 from a job listing.",
    "code": "```python\njob_listings = [\n    {'title': 'Software Engineer', 'salary': 75000},\n    {'title': 'Data Scientist', 'salary': 68000},\n    {'title': 'Teacher', 'salary': 45000},\n    {'title': 'Graphic Designer', 'salary': 52000},\n    {'title': 'CEO', 'salary': 150000}\n]\n\nhigh_salary_jobs = list(filter(lambda job: job['salary'] > 50000, job_listings))\n```"
  },
  {
    "task": "Filter out all entries without an email address from a contact form submission list.",
    "code": "```python\ndef filter_contacts_with_email(contacts):\n    return list(filter(lambda contact: 'email' in contact and contact['email'], contacts))\n\n# Example usage:\ncontacts = [\n    {'name': 'John Doe', 'email': 'john@example.com'},\n    {'name': 'Jane Smith'},\n    {'name': 'Emily Jones', 'email': 'emily@example.com'},\n    {'name': 'Michael Brown'}\n]\n\nfiltered_contacts = filter_contacts_with_email(contacts)\nprint(filtered_contacts)\n```"
  },
  {
    "task": "Identify all animals weighing more than 50kg from a zoo inventory.",
    "code": "```python\nzoo_inventory = [\n    {\"name\": \"Elephant\", \"weight\": 5000},\n    {\"name\": \"Lion\", \"weight\": 250},\n    {\"name\": \"Giraffe\", \"weight\": 800},\n    {\"name\": \"Monkey\", \"weight\": 40},\n    {\"name\": \"Penguin\", \"weight\": 30}\n]\n\nheavy_animals = list(filter(lambda animal: animal[\"weight\"] > 50, zoo_inventory))\n```"
  },
  {
    "task": "Select all songs with a duration longer than three minutes from a playlist.",
    "code": "```python\nplaylist = [\n    {'title': 'Song 1', 'duration': 240},\n    {'title': 'Song 2', 'duration': 180},\n    {'title': 'Song 3', 'duration': 215},\n    {'title': 'Song 4', 'duration': 305},\n]\n\nlong_songs = list(filter(lambda song: song['duration'] > 180, playlist))\n```"
  },
  {
    "task": "Extract all accounts with a balance below zero from a bank statement.",
    "code": "```python\ndef extract_negative_balances(accounts):\n    return list(filter(lambda account: account['balance'] < 0, accounts))\n```"
  },
  {
    "task": "Filter out all non-alphabetic characters from a string of text.",
    "code": "```python\ndef filter_non_alphabetic(text):\n    return ''.join(filter(str.isalpha, text))\n```"
  },
  {
    "task": "Select all participants who scored above average in a competition.",
    "code": "```python\ndef filter_above_average(participants):\n    scores = [participant['score'] for participant in participants]\n    average_score = sum(scores) / len(scores)\n    return list(filter(lambda p: p['score'] > average_score, participants))\n\n# Example usage:\nparticipants = [\n    {'name': 'Alice', 'score': 85},\n    {'name': 'Bob', 'score': 75},\n    {'name': 'Charlie', 'score': 95},\n    {'name': 'David', 'score': 70}\n]\n\nabove_average_participants = filter_above_average(participants)\n```"
  },
  {
    "task": "Find all houses priced under $300,000 from a real estate database.",
    "code": "```python\nreal_estate_database = [\n    {'id': 1, 'price': 250000},\n    {'id': 2, 'price': 350000},\n    {'id': 3, 'price': 275000},\n    {'id': 4, 'price': 500000},\n    {'id': 5, 'price': 295000},\n]\n\nhouses_under_300k = list(filter(lambda house: house['price'] < 300000, real_estate_database))\n```"
  },
  {
    "task": "Identify all plants that bloom in spring from a botanical catalog.",
    "code": "```python\nbotanical_catalog = [\n    {'name': 'Rose', 'bloom_season': 'spring'},\n    {'name': 'Tulip', 'bloom_season': 'spring'},\n    {'name': 'Sunflower', 'bloom_season': 'summer'},\n    {'name': 'Daffodil', 'bloom_season': 'spring'},\n    {'name': 'Marigold', 'bloom_season': 'summer'}\n]\n\nspring_blooming_plants = list(filter(lambda plant: plant['bloom_season'] == 'spring', botanical_catalog))\n\nprint(spring_blooming_plants)\n```"
  },
  {
    "task": "Extract all passwords that are longer than eight characters from a user database.",
    "code": "```python\nuser_database = [\n    {'username': 'user1', 'password': 'short'},\n    {'username': 'user2', 'password': 'averylongpassword'},\n    {'username': 'user3', 'password': 'medium123'},\n    {'username': 'user4', 'password': 'longenoughpassword'},\n]\n\nfiltered_passwords = list(filter(lambda pwd: len(pwd) > 8, \n                                 (user['password'] for user in user_database)))\n\nprint(filtered_passwords)\n```"
  },
  {
    "task": "Filter out all projects that are not yet started from a project management tool.",
    "code": "```python\nprojects = [\n    {'name': 'Project 1', 'status': 'completed'},\n    {'name': 'Project 2', 'status': 'not started'},\n    {'name': 'Project 3', 'status': 'in progress'},\n    {'name': 'Project 4', 'status': 'not started'}\n]\n\nstarted_projects = list(filter(lambda project: project['status'] != 'not started', projects))\n```"
  },
  {
    "task": "Select all days with temperatures exceeding 25\u00b0C from a climate report.",
    "code": "```python\ntemperatures = [20, 28, 22, 30, 25, 27, 18, 29, 24, 26]\nhot_days = list(filter(lambda temp: temp > 25, temperatures))\n```"
  },
  {
    "task": "Find all recipes that are vegetarian from a cookbook.",
    "code": "```python\ndef is_vegetarian(recipe):\n    non_vegetarian_ingredients = {'chicken', 'beef', 'pork', 'fish', 'seafood', 'lamb', 'bacon', 'ham'}\n    return all(ingredient not in non_vegetarian_ingredients for ingredient in recipe['ingredients'])\n\ndef filter_vegetarian_recipes(cookbook):\n    return list(filter(is_vegetarian, cookbook))\n\n# Example usage:\ncookbook = [\n    {'name': 'Veggie Pasta', 'ingredients': ['pasta', 'tomato', 'basil', 'olive oil']},\n    {'name': 'Chicken Curry', 'ingredients': ['chicken', 'curry powder', 'coconut milk']},\n    {'name': 'Caprese Salad', 'ingredients': ['tomato', 'mozzarella', 'basil']},\n]\n\nvegetarian_recipes = filter_vegetarian_recipes(cookbook)\nprint(vegetarian_recipes)\n```"
  },
  {
    "task": "Identify all articles that mention a specific keyword from a news feed.",
    "code": "```python\ndef filter_articles_by_keyword(articles, keyword):\n    return list(filter(lambda article: keyword.lower() in article.lower(), articles))\n\n# Example usage\nnews_feed = [\n    \"Global markets rally on economic recovery hopes\",\n    \"Tech companies announce major breakthroughs\",\n    \"Sports update: Local team wins championship\",\n    \"Economic growth exceeds expectations\"\n]\n\nkeyword = \"economic\"\nfiltered_articles = filter_articles_by_keyword(news_feed, keyword)\nprint(filtered_articles)\n```"
  },
  {
    "task": "Extract all files with the '.jpg' extension from a directory.",
    "code": "```python\nimport os\n\ndef extract_jpg_files(directory):\n    return list(filter(lambda f: f.endswith('.jpg'), os.listdir(directory)))\n\n# Example usage\n# jpg_files = extract_jpg_files('/path/to/directory')\n```"
  },
  {
    "task": "Filter out all transactions that are not categorized from a financial statement.",
    "code": "```python\ndef filter_uncategorized_transactions(transactions):\n    return list(filter(lambda transaction: 'category' in transaction and transaction['category'], transactions))\n\n# Example usage:\ntransactions = [\n    {'amount': 100, 'category': 'Food'},\n    {'amount': 200},\n    {'amount': 50, 'category': 'Transport'},\n    {'amount': 75, 'category': None}\n]\n\nfiltered_transactions = filter_uncategorized_transactions(transactions)\nprint(filtered_transactions)\n```"
  },
  {
    "task": "Select all paintings created before 1900 from an art gallery collection.",
    "code": "```python\nart_gallery = [\n    {\"title\": \"Mona Lisa\", \"year\": 1503},\n    {\"title\": \"Starry Night\", \"year\": 1889},\n    {\"title\": \"The Persistence of Memory\", \"year\": 1931},\n    {\"title\": \"The Scream\", \"year\": 1893},\n    {\"title\": \"Girl with a Pearl Earring\", \"year\": 1665}\n]\n\npaintings_before_1900 = list(filter(lambda painting: painting['year'] < 1900, art_gallery))\n```"
  },
  {
    "task": "Find all students with perfect attendance from a school record.",
    "code": "```python\nstudents = [\n    {\"name\": \"Alice\", \"attendance\": 100},\n    {\"name\": \"Bob\", \"attendance\": 95},\n    {\"name\": \"Charlie\", \"attendance\": 100},\n    {\"name\": \"David\", \"attendance\": 85}\n]\n\nperfect_attendance = filter(lambda student: student[\"attendance\"] == 100, students)\nperfect_students = list(perfect_attendance)\nprint(perfect_students)\n```"
  },
  {
    "task": "Identify all messages sent by a specific user from a chat application.",
    "code": "```python\ndef filter_messages_by_user(messages, user_id):\n    return list(filter(lambda message: message['user_id'] == user_id, messages))\n\n# Example usage\nmessages = [\n    {'user_id': 1, 'text': 'Hello!'},\n    {'user_id': 2, 'text': 'Hi there!'},\n    {'user_id': 1, 'text': 'How are you?'},\n]\n\nuser_messages = filter_messages_by_user(messages, 1)\nprint(user_messages)\n```"
  },
  {
    "task": "Extract all elements greater than 100 from an array of numbers.",
    "code": "```python\nnumbers = [150, 85, 200, 45, 120, 90, 175]\nfiltered_numbers = list(filter(lambda x: x > 100, numbers))\n```"
  },
  {
    "task": "Filter out all words that do not end in 'ed' from a paragraph.",
    "code": "```python\ndef filter_words(paragraph):\n    return list(filter(lambda word: word.endswith('ed'), paragraph.split()))\n\n# Example usage:\nparagraph = \"The boy walked to the market and greeted his friends who waited outside.\"\nfiltered_words = filter_words(paragraph)\nprint(filtered_words)\n```"
  },
  {
    "task": "Select all flights departing before noon from a flight schedule.",
    "code": "```python\nfrom datetime import datetime\n\ndef flights_departing_before_noon(flight_schedule):\n    return list(filter(lambda flight: datetime.strptime(flight['departure_time'], '%H:%M').hour < 12, flight_schedule))\n\n# Example flight schedule\nflight_schedule = [\n    {'flight_number': 'AA123', 'departure_time': '11:45'},\n    {'flight_number': 'UA456', 'departure_time': '12:30'},\n    {'flight_number': 'DL789', 'departure_time': '09:15'}\n]\n\n# Select flights departing before noon\nmorning_flights = flights_departing_before_noon(flight_schedule)\n```"
  },
  {
    "task": "Find all products priced above $20 from an online store inventory.",
    "code": "```python\ninventory = [\n    {'name': 'Product 1', 'price': 19.99},\n    {'name': 'Product 2', 'price': 25.00},\n    {'name': 'Product 3', 'price': 20.00},\n    {'name': 'Product 4', 'price': 30.50},\n]\n\nfiltered_products = list(filter(lambda product: product['price'] > 20, inventory))\n```"
  },
  {
    "task": "Identify all sessions longer than one hour from a webinar series.",
    "code": "```python\nsessions = [\n    {\"title\": \"Session 1\", \"duration\": 30},\n    {\"title\": \"Session 2\", \"duration\": 75},\n    {\"title\": \"Session 3\", \"duration\": 45},\n    {\"title\": \"Session 4\", \"duration\": 120},\n    {\"title\": \"Session 5\", \"duration\": 60}\n]\n\nlong_sessions = list(filter(lambda session: session['duration'] > 60, sessions))\n```"
  },
  {
    "task": "Extract all images with a resolution higher than 1080p from a photo library.",
    "code": "```python\nfrom typing import List\n\nclass Image:\n    def __init__(self, width: int, height: int):\n        self.width = width\n        self.height = height\n\ndef is_higher_than_1080p(image: Image) -> bool:\n    return image.width > 1920 and image.height > 1080\n\ndef extract_high_resolution_images(photo_library: List[Image]) -> List[Image]:\n    return list(filter(is_higher_than_1080p, photo_library))\n```"
  },
  {
    "task": "Filter out all responses that are not 'yes' or 'no' from a survey result.",
    "code": "```python\nresponses = [\"yes\", \"no\", \"maybe\", \"yes\", \"no\", \"unknown\", \"yes\"]\n\nfiltered_responses = list(filter(lambda response: response in {\"yes\", \"no\"}, responses))\n```"
  },
  {
    "task": "Select all tweets with more than 100 likes from a Twitter feed.",
    "code": "```python\ntweets = [\n    {\"text\": \"First tweet\", \"likes\": 150},\n    {\"text\": \"Second tweet\", \"likes\": 90},\n    {\"text\": \"Third tweet\", \"likes\": 200},\n    # more tweets...\n]\n\npopular_tweets = list(filter(lambda tweet: tweet['likes'] > 100, tweets))\n```"
  },
  {
    "task": "Find all links that are broken from a webpage.",
    "code": "```python\nimport requests\nfrom bs4 import BeautifulSoup\nfrom urllib.parse import urljoin\n\ndef is_broken_link(url):\n    try:\n        response = requests.head(url, allow_redirects=True, timeout=5)\n        return response.status_code >= 400\n    except requests.RequestException:\n        return True\n\ndef find_broken_links(webpage_url):\n    response = requests.get(webpage_url)\n    soup = BeautifulSoup(response.content, 'html.parser')\n    links = [a.get('href') for a in soup.find_all('a', href=True)]\n    absolute_links = [urljoin(webpage_url, link) for link in links]\n    broken_links = filter(is_broken_link, absolute_links)\n    return list(broken_links)\n\n# Example usage:\n# broken_links = find_broken_links(\"http://example.com\")\n# print(broken_links)\n```"
  },
  {
    "task": "Identify all machines that are currently offline from a network monitoring tool.",
    "code": "```python\nmachines = [\n    {\"name\": \"Machine1\", \"status\": \"online\"},\n    {\"name\": \"Machine2\", \"status\": \"offline\"},\n    {\"name\": \"Machine3\", \"status\": \"offline\"},\n    {\"name\": \"Machine4\", \"status\": \"online\"},\n]\n\noffline_machines = list(filter(lambda machine: machine[\"status\"] == \"offline\", machines))\n```"
  },
  {
    "task": "Extract all invoices with a due date in the current month from an accounting system.",
    "code": "```python\nfrom datetime import datetime\n\ndef filter_invoices_current_month(invoices):\n    current_month = datetime.now().month\n    current_year = datetime.now().year\n    return list(filter(lambda invoice: invoice['due_date'].month == current_month and invoice['due_date'].year == current_year, invoices))\n\n# Example usage (assuming invoices is a list of dictionaries with a 'due_date' key):\n# invoices = [\n#     {'id': 1, 'due_date': datetime(2023, 10, 15)},\n#     {'id': 2, 'due_date': datetime(2023, 11, 20)},\n#     {'id': 3, 'due_date': datetime(2023, 10, 22)},\n# ]\n# current_month_invoices = filter_invoices_current_month(invoices)\n```"
  },
  {
    "task": "Filter out all lines in a file that start with a '#' from a configuration file.",
    "code": "```python\ndef filter_comments(file_path):\n    with open(file_path, 'r') as file:\n        lines = file.readlines()\n    return list(filter(lambda line: not line.lstrip().startswith('#'), lines))\n\n# Example usage:\n# filtered_lines = filter_comments('config.txt')\n```"
  },
  {
    "task": "Select all posts with a comment count higher than 50 from a blog.",
    "code": "```python\nposts = [\n    {\"id\": 1, \"title\": \"Post 1\", \"comments\": 34},\n    {\"id\": 2, \"title\": \"Post 2\", \"comments\": 67},\n    {\"id\": 3, \"title\": \"Post 3\", \"comments\": 89},\n    {\"id\": 4, \"title\": \"Post 4\", \"comments\": 10},\n    {\"id\": 5, \"title\": \"Post 5\", \"comments\": 123},\n]\n\nfiltered_posts = list(filter(lambda post: post['comments'] > 50, posts))\n```"
  },
  {
    "task": "Find all offers that expire within the next week from a promotional database.",
    "code": "```python\nfrom datetime import datetime, timedelta\n\noffers = [\n    {\"id\": 1, \"name\": \"10% Off\", \"expiry_date\": \"2023-10-20\"},\n    {\"id\": 2, \"name\": \"20% Off\", \"expiry_date\": \"2023-10-15\"},\n    {\"id\": 3, \"name\": \"30% Off\", \"expiry_date\": \"2023-10-18\"},\n]\n\ntoday = datetime.now().date()\nnext_week = today + timedelta(weeks=1)\n\nexpiring_soon = list(filter(lambda offer: today <= datetime.strptime(offer[\"expiry_date\"], \"%Y-%m-%d\").date() <= next_week, offers))\n\nprint(expiring_soon)\n```"
  },
  {
    "task": "Identify all items that are on sale from a shopping catalog.",
    "code": "```python\ndef filter_on_sale_items(catalog):\n    return list(filter(lambda item: item.get('on_sale', False), catalog))\n\n# Example usage\ncatalog = [\n    {'name': 'T-shirt', 'price': 19.99, 'on_sale': True},\n    {'name': 'Jeans', 'price': 49.99, 'on_sale': False},\n    {'name': 'Sneakers', 'price': 79.99, 'on_sale': True},\n    {'name': 'Hat', 'price': 15.99, 'on_sale': False}\n]\n\non_sale_items = filter_on_sale_items(catalog)\nprint(on_sale_items)\n```"
  },
  {
    "task": "Extract all notes that mention 'urgent' from a meeting record.",
    "code": "```python\ndef extract_urgent_notes(meeting_record):\n    return list(filter(lambda note: 'urgent' in note.lower(), meeting_record))\n\n# Example usage:\nmeeting_record = [\n    \"Discuss project timeline\",\n    \"Urgent: Update team on new policy\",\n    \"Review budget allocation\",\n    \"urgent: Prepare for client meeting\"\n]\n\nurgent_notes = extract_urgent_notes(meeting_record)\nprint(urgent_notes)\n```"
  },
  {
    "task": "Filter out all numbers that do not have a remainder when divided by two from a list.",
    "code": "```python\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nfiltered_numbers = list(filter(lambda x: x % 2 != 0, numbers))\nprint(filtered_numbers)\n```"
  },
  {
    "task": "Select all concerts happening in the summer from an event calendar.",
    "code": "```python\nfrom datetime import datetime\n\ndef is_summer_event(event):\n    start_summer = datetime.strptime(\"06-21\", \"%m-%d\").date()\n    end_summer = datetime.strptime(\"09-23\", \"%m-%d\").date()\n    event_date = datetime.strptime(event['date'], \"%m-%d\").date()\n    return start_summer <= event_date <= end_summer\n\ndef filter_summer_concerts(events):\n    return list(filter(is_summer_event, events))\n\n# Example usage:\nevent_calendar = [\n    {'name': 'Concert A', 'date': '06-25'},\n    {'name': 'Concert B', 'date': '07-10'},\n    {'name': 'Concert C', 'date': '10-05'},\n    {'name': 'Concert D', 'date': '08-15'},\n]\n\nsummer_concerts = filter_summer_concerts(event_calendar)\nprint(summer_concerts)\n```"
  },
  {
    "task": "Find all users with more than 1000 followers from a social media platform.",
    "code": "```python\nusers = [\n    {\"name\": \"Alice\", \"followers\": 1500},\n    {\"name\": \"Bob\", \"followers\": 800},\n    {\"name\": \"Charlie\", \"followers\": 1200},\n    {\"name\": \"David\", \"followers\": 500},\n]\n\nfiltered_users = filter(lambda user: user['followers'] > 1000, users)\nresult = list(filtered_users)\n```"
  },
  {
    "task": "Identify all stocks with a growth rate above 10% from a financial portfolio.",
    "code": "```python\nportfolio = [\n    {'stock': 'AAPL', 'growth_rate': 15},\n    {'stock': 'GOOGL', 'growth_rate': 7},\n    {'stock': 'MSFT', 'growth_rate': 12},\n    {'stock': 'AMZN', 'growth_rate': 9},\n    {'stock': 'TSLA', 'growth_rate': 20}\n]\n\nhigh_growth_stocks = list(filter(lambda stock: stock['growth_rate'] > 10, portfolio))\n```"
  },
  {
    "task": "Extract all reviews that have a five-star rating from a product review site.",
    "code": "```python\nreviews = [\n    {\"review\": \"Excellent product!\", \"rating\": 5},\n    {\"review\": \"Not bad\", \"rating\": 3},\n    {\"review\": \"I love it!\", \"rating\": 5},\n    {\"review\": \"Could be better\", \"rating\": 2},\n]\n\nfive_star_reviews = list(filter(lambda review: review['rating'] == 5, reviews))\n```"
  },
  {
    "task": "Filter out all emails that are not flagged from an inbox.",
    "code": "```python\ndef filter_flagged_emails(inbox):\n    return list(filter(lambda email: email.get('flagged', False), inbox))\n```"
  },
  {
    "task": "Select all entries with a timestamp from the past 24 hours from a log file.",
    "code": "```python\nfrom datetime import datetime, timedelta\n\ndef filter_recent_entries(log_entries):\n    cutoff_time = datetime.now() - timedelta(days=1)\n    return list(filter(lambda entry: datetime.fromisoformat(entry['timestamp']) > cutoff_time, log_entries))\n```"
  },
  {
    "task": "Find all books by a specific author from a library database.",
    "code": "```python\ndef filter_books_by_author(library, author):\n    return list(filter(lambda book: book['author'] == author, library))\n\nlibrary = [\n    {'title': 'Book One', 'author': 'Author A'},\n    {'title': 'Book Two', 'author': 'Author B'},\n    {'title': 'Book Three', 'author': 'Author A'},\n    {'title': 'Book Four', 'author': 'Author C'}\n]\n\nauthor_to_find = 'Author A'\nbooks_by_author = filter_books_by_author(library, author_to_find)\n```"
  },
  {
    "task": "Identify all donations above $500 from a charity fundraiser report.",
    "code": "```python\ndonations = [100, 750, 250, 600, 450, 1200, 300]\n\ndef is_above_500(donation):\n    return donation > 500\n\nfiltered_donations = list(filter(is_above_500, donations))\nprint(filtered_donations)\n```"
  },
  {
    "task": "Extract all assignments due in the next week from a course syllabus.",
    "code": "```python\nfrom datetime import datetime, timedelta\n\ndef filter_assignments_due_next_week(assignments):\n    today = datetime.now()\n    next_week = today + timedelta(weeks=1)\n\n    return list(filter(lambda assignment: today <= assignment['due_date'] < next_week, assignments))\n\n# Example usage:\nassignments = [\n    {'title': 'Assignment 1', 'due_date': datetime(2023, 10, 6)},\n    {'title': 'Assignment 2', 'due_date': datetime(2023, 10, 10)},\n    {'title': 'Assignment 3', 'due_date': datetime(2023, 10, 15)},\n]\n\nassignments_due_next_week = filter_assignments_due_next_week(assignments)\nprint(assignments_due_next_week)\n```"
  },
  {
    "task": "Filter out all movies that are not in English from a streaming service.",
    "code": "```python\nmovies = [\n    {\"title\": \"Inception\", \"language\": \"English\"},\n    {\"title\": \"Am\u00e9lie\", \"language\": \"French\"},\n    {\"title\": \"Parasite\", \"language\": \"Korean\"},\n    {\"title\": \"The Dark Knight\", \"language\": \"English\"},\n    {\"title\": \"Spirited Away\", \"language\": \"Japanese\"}\n]\n\nenglish_movies = list(filter(lambda movie: movie['language'] == 'English', movies))\nprint(english_movies)\n```"
  },
  {
    "task": "Select all landmarks located in Europe from a travel guide.",
    "code": "```python\nlandmarks = [\n    {\"name\": \"Eiffel Tower\", \"location\": \"France\"},\n    {\"name\": \"Statue of Liberty\", \"location\": \"USA\"},\n    {\"name\": \"Colosseum\", \"location\": \"Italy\"},\n    {\"name\": \"Big Ben\", \"location\": \"UK\"},\n]\n\neuropean_countries = {\"France\", \"Italy\", \"UK\", \"Germany\", \"Spain\"}\n\neuropean_landmarks = list(filter(lambda landmark: landmark[\"location\"] in european_countries, landmarks))\n\nprint(european_landmarks)\n```"
  },
  {
    "task": "Find all contracts that are set to renew next month from a contract management system.",
    "code": "```python\nfrom datetime import datetime, timedelta\n\n# Sample data representing contracts\ncontracts = [\n    {'id': 1, 'renewal_date': datetime(2023, 11, 15)},\n    {'id': 2, 'renewal_date': datetime(2023, 12, 5)},\n    {'id': 3, 'renewal_date': datetime(2024, 1, 15)},\n    {'id': 4, 'renewal_date': datetime(2023, 12, 20)}\n]\n\n# Function to find contracts renewing next month\ndef find_contracts_renewing_next_month(contracts):\n    today = datetime.today()\n    next_month = today.replace(day=1) + timedelta(days=32)\n    next_month_start = next_month.replace(day=1)\n    next_month_end = next_month_start.replace(day=1) + timedelta(days=32)\n    next_month_end = next_month_end.replace(day=1)\n\n    return list(filter(lambda contract: next_month_start <= contract['renewal_date'] < next_month_end, contracts))\n\n# Get contracts that renew next month\ncontracts_renewing_next_month = find_contracts_renewing_next_month(contracts)\nprint(contracts_renewing_next_month)\n```"
  },
  {
    "task": "Identify all volunteer hours logged in the past year from a non-profit organization database.",
    "code": "```python\nfrom datetime import datetime, timedelta\n\n# Sample data representing volunteer logs\nvolunteer_logs = [\n    {'name': 'Alice', 'hours': 5, 'date': '2022-11-10'},\n    {'name': 'Bob', 'hours': 3, 'date': '2023-04-15'},\n    {'name': 'Charlie', 'hours': 4, 'date': '2021-12-20'},\n    {'name': 'David', 'hours': 2, 'date': '2023-07-25'},\n]\n\n# Function to filter volunteer hours logged in the past year\ndef filter_volunteer_hours(logs):\n    one_year_ago = datetime.now() - timedelta(days=365)\n    return list(filter(lambda log: datetime.strptime(log['date'], '%Y-%m-%d') >= one_year_ago, logs))\n\n# Get filtered volunteer hours\nfiltered_hours = filter_volunteer_hours(volunteer_logs)\nprint(filtered_hours)\n```"
  },
  {
    "task": "Extract all elements that are not strings from a mixed-type list.",
    "code": "```python\ndef filter_non_strings(mixed_list):\n    return list(filter(lambda x: not isinstance(x, str), mixed_list))\n\n# Example usage:\nmixed_list = [1, 'apple', 3.14, 'banana', 42, None, 'cherry']\nresult = filter_non_strings(mixed_list)\nprint(result)\n```"
  },
  {
    "task": "Filter out all orders that are not yet shipped from an e-commerce system.",
    "code": "```python\norders = [\n    {\"id\": 1, \"status\": \"shipped\"},\n    {\"id\": 2, \"status\": \"pending\"},\n    {\"id\": 3, \"status\": \"shipped\"},\n    {\"id\": 4, \"status\": \"processing\"},\n    {\"id\": 5, \"status\": \"shipped\"}\n]\n\nshipped_orders = list(filter(lambda order: order[\"status\"] == \"shipped\", orders))\n```"
  },
  {
    "task": "Select all emails sent from a specific address in an email server.",
    "code": "```python\ndef filter_emails_by_sender(emails, sender_address):\n    return list(filter(lambda email: email['from'] == sender_address, emails))\n```"
  },
  {
    "task": "Find all passwords with at least one special character from a security database.",
    "code": "```python\nimport re\n\ndef filter_passwords_with_special_chars(passwords):\n    return list(filter(lambda pwd: re.search(r'[!@#$%^&*(),.?\":{}|<>]', pwd), passwords))\n\n# Example usage\npasswords = [\n    \"password123\",\n    \"admin!123\",\n    \"letmein\",\n    \"p@ssw0rd\"\n]\n\nfiltered_passwords = filter_passwords_with_special_chars(passwords)\nprint(filtered_passwords)\n```"
  },
  {
    "task": "Identify all courses with a prerequisite from a university catalog.",
    "code": "```python\ndef courses_with_prerequisites(courses):\n    return list(filter(lambda course: 'prerequisite' in course and course['prerequisite'], courses))\n\n# Example usage\nuniversity_catalog = [\n    {'name': 'Calculus', 'prerequisite': 'Precalculus'},\n    {'name': 'Linear Algebra', 'prerequisite': None},\n    {'name': 'Chemistry', 'prerequisite': 'Basic Chemistry'},\n    {'name': 'Biology', 'prerequisite': ''},\n    {'name': 'Physics', 'prerequisite': 'General Physics'}\n]\n\ncourses_with_prereqs = courses_with_prerequisites(university_catalog)\nprint(courses_with_prereqs)\n```"
  },
  {
    "task": "Extract all genes associated with a specific trait from a genetic database.",
    "code": "```python\ndef extract_genes(genetic_database, trait):\n    return list(filter(lambda gene: trait in gene['traits'], genetic_database))\n\n# Example usage:\n# genetic_database = [\n#     {'name': 'GeneA', 'traits': ['Trait1', 'Trait2']},\n#     {'name': 'GeneB', 'traits': ['Trait3', 'Trait2']},\n#     {'name': 'GeneC', 'traits': ['Trait1']}\n# ]\n# trait = 'Trait1'\n# associated_genes = extract_genes(genetic_database, trait)\n# print(associated_genes)\n```"
  },
  {
    "task": "Filter out all investments with a risk level below medium from a portfolio.",
    "code": "```python\nportfolio = [\n    {'name': 'Investment A', 'risk': 'high'},\n    {'name': 'Investment B', 'risk': 'low'},\n    {'name': 'Investment C', 'risk': 'medium'},\n    {'name': 'Investment D', 'risk': 'medium'},\n    {'name': 'Investment E', 'risk': 'low'},\n    {'name': 'Investment F', 'risk': 'high'}\n]\n\nfiltered_portfolio = list(filter(lambda investment: investment['risk'] in ['medium', 'high'], portfolio))\n```"
  },
  {
    "task": "Select all calls longer than five minutes from a call log.",
    "code": "```python\ncall_log = [\n    {'number': '123-456-7890', 'duration_minutes': 4},\n    {'number': '098-765-4321', 'duration_minutes': 6},\n    {'number': '555-555-5555', 'duration_minutes': 10},\n    {'number': '111-222-3333', 'duration_minutes': 2},\n]\n\nlong_calls = list(filter(lambda call: call['duration_minutes'] > 5, call_log))\n```"
  }
]