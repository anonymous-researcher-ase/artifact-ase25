[
  {
    "task": "Create a set to store unique usernames and demonstrate adding new ones.",
    "code": "```python\nusernames = set()\n\n# Adding new usernames\nusernames.add(\"alice\")\nusernames.add(\"bob\")\nusernames.add(\"charlie\")\n\n# Attempt to add duplicate\nusernames.add(\"alice\")\n\n# Output the set of usernames\nprint(usernames)\n```"
  },
  {
    "task": "Write a function that returns the union of two sets of integers.",
    "code": "```python\ndef union_of_sets(set1, set2):\n    return set1.union(set2)\n```"
  },
  {
    "task": "Given two sets of strings, find their intersection.",
    "code": "```python\nset1 = {\"apple\", \"banana\", \"cherry\"}\nset2 = {\"banana\", \"kiwi\", \"apple\"}\n\nintersection = set1 & set2\nprint(intersection)\n```"
  },
  {
    "task": "Implement a set to track visited web pages and check if a page has been visited.",
    "code": "```python\nclass WebPageTracker:\n    def __init__(self):\n        self.visited_pages = set()\n\n    def visit_page(self, page):\n        self.visited_pages.add(page)\n\n    def has_visited(self, page):\n        return page in self.visited_pages\n\n# Example usage\ntracker = WebPageTracker()\ntracker.visit_page(\"example.com\")\nprint(tracker.has_visited(\"example.com\"))  # Output: True\nprint(tracker.has_visited(\"another.com\"))  # Output: False\n```"
  },
  {
    "task": "Create a set from a list of numbers and remove duplicates.",
    "code": "```python\nnumbers = [1, 2, 2, 3, 4, 4, 5]\nunique_numbers = set(numbers)\n```"
  },
  {
    "task": "Check if a set is a subset of another set.",
    "code": "```python\ndef is_subset(set_a, set_b):\n    return set_a.issubset(set_b)\n\n# Example usage:\nset1 = {1, 2, 3}\nset2 = {1, 2, 3, 4, 5}\nresult = is_subset(set1, set2)\nprint(result)\n```"
  },
  {
    "task": "Demonstrate adding and removing elements from a set of book titles.",
    "code": "```python\n# Initialize a set of book titles\nbook_titles = {\"The Great Gatsby\", \"1984\", \"To Kill a Mockingbird\"}\n\n# Add a new book title to the set\nbook_titles.add(\"Pride and Prejudice\")\n\n# Remove a book title from the set\nbook_titles.discard(\"1984\")\n\n# Output the final set of book titles\nprint(book_titles)\n```"
  },
  {
    "task": "Create a set and show how to clear all its elements.",
    "code": "```python\n# Create a set with some elements\nmy_set = {1, 2, 3, 4, 5}\n\n# Clear all elements from the set\nmy_set.clear()\n```"
  },
  {
    "task": "Write a program to find the difference between two sets of employee IDs.",
    "code": "```python\nemployee_ids_set1 = {101, 102, 103, 104}\nemployee_ids_set2 = {103, 104, 105, 106}\n\ndifference = employee_ids_set1.difference(employee_ids_set2)\nprint(difference)\n```"
  },
  {
    "task": "Implement a set to store unique email addresses and check membership.",
    "code": "```python\nemail_addresses = set()\n\ndef add_email(email):\n    email_addresses.add(email)\n\ndef is_email_present(email):\n    return email in email_addresses\n```"
  },
  {
    "task": "Use a set to determine if two lists have any common elements.",
    "code": "```python\ndef have_common_elements(list1, list2):\n    return not set(list1).isdisjoint(set(list2))\n\n# Example usage\nlist_a = [1, 2, 3, 4]\nlist_b = [4, 5, 6]\nprint(have_common_elements(list_a, list_b))  # Output: True\n```"
  },
  {
    "task": "Create a set to represent a group of students and update it with new entries.",
    "code": "```python\nstudents = {\"Alice\", \"Bob\", \"Charlie\"}\nnew_entries = {\"David\", \"Eve\"}\nstudents.update(new_entries)\n```"
  },
  {
    "task": "Write a function to find symmetric difference between two sets of colors.",
    "code": "```python\ndef symmetric_difference(set1, set2):\n    return set1.symmetric_difference(set2)\n\n# Example usage\ncolors1 = {'red', 'blue', 'green'}\ncolors2 = {'blue', 'yellow', 'green'}\nresult = symmetric_difference(colors1, colors2)\nprint(result)\n```"
  },
  {
    "task": "Implement a set to store unique product codes and demonstrate iteration over it.",
    "code": "```python\n# Initialize a set to store unique product codes\nproduct_codes = {\"P123\", \"P456\", \"P789\", \"P101\", \"P112\"}\n\n# Add more product codes to the set\nproduct_codes.add(\"P999\")\nproduct_codes.add(\"P123\")  # This will not add a duplicate\n\n# Iterate over the set and print each product code\nfor code in product_codes:\n    print(code)\n```"
  },
  {
    "task": "Create a set and demonstrate the use of the `discard` method.",
    "code": "```python\n# Create a set\nmy_set = {1, 2, 3, 4, 5}\n\n# Use the discard method\nmy_set.discard(3)\n\n# Output the modified set\nprint(my_set)\n```"
  },
  {
    "task": "Given a list of numbers, create a set and check if a specific number is present.",
    "code": "```python\nnumbers = [1, 2, 3, 4, 5]\nspecific_number = 3\n\nnumber_set = set(numbers)\nis_present = specific_number in number_set\n```"
  },
  {
    "task": "Use a set to find all unique words in a sentence.",
    "code": "```python\nsentence = \"the quick brown fox jumps over the lazy dog\"\nunique_words = set(sentence.split())\nprint(unique_words)\n```"
  },
  {
    "task": "Create a set from a sequence of characters and demonstrate set operations.",
    "code": "```python\n# Creating a set from a sequence of characters\nchar_sequence = \"abracadabra\"\nchar_set = set(char_sequence)\n\n# Demonstrating set operations\nchar_set.add('z')  # Adding an element\nchar_set.remove('a')  # Removing an element\nanother_set = set(\"alchemy\")\n\n# Union of two sets\nunion_set = char_set.union(another_set)\n\n# Intersection of two sets\nintersection_set = char_set.intersection(another_set)\n\n# Difference of two sets\ndifference_set = char_set.difference(another_set)\n\n# Symmetric difference of two sets\nsymmetric_difference_set = char_set.symmetric_difference(another_set)\n\n# Printing the results\nprint(\"Original Set:\", char_set)\nprint(\"Union:\", union_set)\nprint(\"Intersection:\", intersection_set)\nprint(\"Difference:\", difference_set)\nprint(\"Symmetric Difference:\", symmetric_difference_set)\n```"
  },
  {
    "task": "Write a function to merge two sets and return the result.",
    "code": "```python\ndef merge_sets(set1, set2):\n    return set1.union(set2)\n```"
  },
  {
    "task": "Implement a set to hold unique IP addresses and demonstrate basic operations.",
    "code": "```python\n# Create a set to hold unique IP addresses\nip_addresses = set()\n\n# Add IP addresses to the set\nip_addresses.add(\"192.168.1.1\")\nip_addresses.add(\"192.168.1.2\")\nip_addresses.add(\"10.0.0.1\")\n\n# Attempt to add a duplicate IP address\nip_addresses.add(\"192.168.1.1\")\n\n# Remove an IP address\nip_addresses.discard(\"10.0.0.1\")\n\n# Check if an IP address is in the set\ncontains_ip = \"192.168.1.2\" in ip_addresses\n\n# Iterate over the set\nfor ip in ip_addresses:\n    print(ip)\n\n# Print the result of the containment check\nprint(contains_ip)\n```"
  },
  {
    "task": "Create a set and demonstrate how to find the size of the set.",
    "code": "```python\nmy_set = {1, 2, 3, 4, 5}\nset_size = len(my_set)\nprint(set_size)\n```"
  },
  {
    "task": "Write a program to check if two sets of dates are disjoint.",
    "code": "```python\ndef are_sets_disjoint(set1, set2):\n    return set1.isdisjoint(set2)\n\ndates_set1 = {\"2023-10-01\", \"2023-10-02\", \"2023-10-03\"}\ndates_set2 = {\"2023-10-04\", \"2023-10-05\", \"2023-10-06\"}\n\nresult = are_sets_disjoint(dates_set1, dates_set2)\nprint(result)\n```"
  },
  {
    "task": "Create a set to manage a collection of tags and demonstrate addition and removal.",
    "code": "```python\n# Create a set to manage a collection of tags\ntags = set()\n\n# Demonstrate addition\ntags.add('python')\ntags.add('coding')\ntags.add('development')\n\n# Demonstrate removal\ntags.discard('coding')\n\n# Output the final set\nprint(tags)\n```"
  },
  {
    "task": "Implement a set to track unique inventory items in a store.",
    "code": "```python\nclass Inventory:\n    def __init__(self):\n        self.items = set()\n\n    def add_item(self, item):\n        self.items.add(item)\n\n    def remove_item(self, item):\n        self.items.discard(item)\n\n    def has_item(self, item):\n        return item in self.items\n\n    def get_all_items(self):\n        return self.items\n\n# Example usage:\ninventory = Inventory()\ninventory.add_item(\"apple\")\ninventory.add_item(\"banana\")\ninventory.remove_item(\"apple\")\nprint(inventory.has_item(\"banana\"))\nprint(inventory.get_all_items())\n```"
  },
  {
    "task": "Create a set of numbers and demonstrate conversion to a list.",
    "code": "```python\nnumbers_set = {1, 2, 3, 4, 5}\nnumbers_list = list(numbers_set)\n```"
  },
  {
    "task": "Write a function that returns all elements present in either of two sets but not both.",
    "code": "```python\ndef symmetric_difference(set1, set2):\n    return set1.symmetric_difference(set2)\n```"
  },
  {
    "task": "Use a set to manage a collection of unique transaction IDs.",
    "code": "```python\ntransaction_ids = set()\n\n# Example of adding transaction IDs\ntransaction_ids.add('TXN001')\ntransaction_ids.add('TXN002')\ntransaction_ids.add('TXN003')\n\n# Example of ensuring uniqueness\ntransaction_ids.add('TXN001')  # This will not add a duplicate\n\n# Example of removing a transaction ID\ntransaction_ids.discard('TXN002')\n\n# Example access\nfor txn_id in transaction_ids:\n    print(txn_id)\n```"
  },
  {
    "task": "Create a set of integers and demonstrate the `pop` operation.",
    "code": "```python\n# Create a set of integers\ninteger_set = {1, 2, 3, 4, 5}\n\n# Demonstrate the `pop` operation\npopped_element = integer_set.pop()\n\n# Output the popped element and the remaining set\nprint(\"Popped element:\", popped_element)\nprint(\"Remaining set:\", integer_set)\n```"
  },
  {
    "task": "Write a program to find the maximum element in a set of floating-point numbers.",
    "code": "```python\ndef find_max_in_set(float_set):\n    return max(float_set)\n\n# Example usage\nfloat_numbers = {3.5, 7.2, 1.8, 9.4, 5.6}\nmax_value = find_max_in_set(float_numbers)\nprint(max_value)\n```"
  },
  {
    "task": "Create a set and demonstrate the use of the `update` method with another set.",
    "code": "```python\nset1 = {1, 2, 3}\nset2 = {3, 4, 5}\n\nset1.update(set2)\nprint(set1)\n```"
  },
  {
    "task": "Implement a set to keep track of unique file extensions in a directory.",
    "code": "```python\nimport os\n\ndef unique_file_extensions(directory):\n    extensions = set()\n    for filename in os.listdir(directory):\n        _, ext = os.path.splitext(filename)\n        if ext:\n            extensions.add(ext)\n    return extensions\n\n# Example usage\ndirectory_path = '/path/to/directory'\nunique_extensions = unique_file_extensions(directory_path)\nprint(unique_extensions)\n```"
  },
  {
    "task": "Create a set of strings and demonstrate how to iterate over it in reverse order.",
    "code": "```python\n# Create a set of strings\nstring_set = {\"apple\", \"banana\", \"cherry\"}\n\n# Iterate over the set in reverse order\nfor item in sorted(string_set, reverse=True):\n    print(item)\n```"
  },
  {
    "task": "Write a function to check if a set is empty.",
    "code": "```python\ndef is_set_empty(s):\n    return len(s) == 0\n```"
  },
  {
    "task": "Use a set to filter out duplicate entries from a list of participants.",
    "code": "```python\nparticipants = [\"Alice\", \"Bob\", \"Alice\", \"Charlie\", \"Bob\", \"David\"]\nunique_participants = list(set(participants))\n```"
  },
  {
    "task": "Create a set of tuples and demonstrate basic set operations.",
    "code": "```python\n# Create a set of tuples\ntuple_set = {(1, 2), (3, 4), (5, 6)}\n\n# Add a new tuple to the set\ntuple_set.add((7, 8))\n\n# Remove a tuple from the set\ntuple_set.discard((3, 4))\n\n# Check if a tuple is in the set\nis_in_set = (1, 2) in tuple_set\n\n# Find the length of the set\nset_length = len(tuple_set)\n\n# Iterate over the set and print each tuple\nfor item in tuple_set:\n    print(item)\n\n# Print the final set, check, and length\nprint(\"Final set:\", tuple_set)\nprint(\"Is (1, 2) in set:\", is_in_set)\nprint(\"Length of set:\", set_length)\n```"
  },
  {
    "task": "Write a program to find the common elements between two sets of country names.",
    "code": "```python\nset1 = {\"USA\", \"Canada\", \"Mexico\", \"France\"}\nset2 = {\"Germany\", \"France\", \"Italy\", \"Canada\"}\n\ncommon_elements = set1.intersection(set2)\nprint(common_elements)\n```"
  },
  {
    "task": "Create a set of characters and demonstrate the use of the `issubset` method.",
    "code": "```python\nset_a = {'a', 'b', 'c'}\nset_b = {'a', 'b', 'c', 'd', 'e'}\n\nis_subset = set_a.issubset(set_b)\nprint(is_subset)\n```"
  },
  {
    "task": "Implement a set to manage a collection of unique hashtags from social media posts.",
    "code": "```python\nclass HashtagManager:\n    def __init__(self):\n        self.hashtags = set()\n\n    def add_hashtag(self, hashtag):\n        self.hashtags.add(hashtag)\n\n    def remove_hashtag(self, hashtag):\n        self.hashtags.discard(hashtag)\n\n    def get_all_hashtags(self):\n        return self.hashtags\n\n# Example usage:\nmanager = HashtagManager()\nmanager.add_hashtag(\"#python\")\nmanager.add_hashtag(\"#coding\")\nmanager.add_hashtag(\"#python\")  # Duplicate, won't be added\nprint(manager.get_all_hashtags())\nmanager.remove_hashtag(\"#coding\")\nprint(manager.get_all_hashtags())\n```"
  },
  {
    "task": "Create a set and demonstrate how to copy it to another set.",
    "code": "```python\noriginal_set = {1, 2, 3, 4, 5}\ncopied_set = original_set.copy()\n```"
  },
  {
    "task": "Write a function that accepts two sets and returns a new set with elements found in both.",
    "code": "```python\ndef intersection_of_sets(set1, set2):\n    return set1 & set2\n```"
  },
  {
    "task": "Use a set to determine the unique items purchased in a day.",
    "code": "```python\npurchased_items = [\"apple\", \"banana\", \"orange\", \"apple\", \"banana\", \"kiwi\"]\nunique_items = set(purchased_items)\nprint(unique_items)\n```"
  },
  {
    "task": "Create a set of student IDs and demonstrate set comprehension to filter IDs.",
    "code": "```python\nstudent_ids = {101, 102, 103, 104, 105}\nfiltered_ids = {student_id for student_id in student_ids if student_id > 102}\nprint(filtered_ids)\n```"
  },
  {
    "task": "Write a program to check if a set of strings is a superset of another set.",
    "code": "```python\ndef is_superset(set1, set2):\n    return set1.issuperset(set2)\n\n# Example usage\nset_a = {\"apple\", \"banana\", \"cherry\"}\nset_b = {\"banana\", \"cherry\"}\nresult = is_superset(set_a, set_b)\nprint(result)\n```"
  },
  {
    "task": "Create a set of unique words from a text file.",
    "code": "```python\ndef unique_words_from_file(filename):\n    with open(filename, 'r') as file:\n        text = file.read()\n    words = text.split()\n    unique_words = set(words)\n    return unique_words\n```"
  },
  {
    "task": "Implement a set to store unique project identifiers and demonstrate membership testing.",
    "code": "```python\n# Create a set to store unique project identifiers\nproject_ids = set()\n\n# Add project identifiers to the set\nproject_ids.add(\"proj_001\")\nproject_ids.add(\"proj_002\")\nproject_ids.add(\"proj_003\")\n\n# Demonstrate membership testing\nprint(\"proj_001\" in project_ids)  # Should output: True\nprint(\"proj_004\" in project_ids)  # Should output: False\n```"
  },
  {
    "task": "Create a set and demonstrate the `symmetric_difference_update` method.",
    "code": "```python\nset1 = {1, 2, 3, 4}\nset2 = {3, 4, 5, 6}\n\nset1.symmetric_difference_update(set2)\n\nprint(set1)\n```"
  },
  {
    "task": "Write a function to remove all elements from a set that are also in another set.",
    "code": "```python\ndef remove_elements(set1, set2):\n    return set1 - set2\n```"
  },
  {
    "task": "Use a set to keep track of unique error codes from server logs.",
    "code": "```python\ndef unique_error_codes(logs):\n    error_codes = set()\n    for log in logs:\n        if \"ERROR\" in log:\n            error_code = log.split()[1]\n            error_codes.add(error_code)\n    return error_codes\n\n# Example usage\nlogs = [\n    \"INFO 1234 Operation completed\",\n    \"ERROR 1001 Resource not found\",\n    \"ERROR 1002 Invalid input\",\n    \"ERROR 1001 Resource not found\",  # Duplicate error code\n    \"INFO 1235 Operation completed\",\n    \"ERROR 1003 Timeout\",\n]\n\nunique_errors = unique_error_codes(logs)\nprint(unique_errors)\n```"
  },
  {
    "task": "Create a set and demonstrate how to find all unique pairs of elements.",
    "code": "```python\ndef unique_pairs(elements):\n    unique_pairs_set = set()\n    elements_set = set(elements)\n    for elem1 in elements_set:\n        for elem2 in elements_set:\n            if elem1 != elem2:\n                pair = tuple(sorted((elem1, elem2)))\n                unique_pairs_set.add(pair)\n    return unique_pairs_set\n\nelements = [1, 2, 3, 4]\nunique_pairs = unique_pairs(elements)\nprint(unique_pairs)\n```"
  },
  {
    "task": "Write a program to find the smallest element in a set of integers.",
    "code": "```python\ndef find_smallest_element(integer_set):\n    return min(integer_set)\n\ninteger_set = {5, 3, 9, 1, 4}\nsmallest_element = find_smallest_element(integer_set)\nprint(smallest_element)\n```"
  },
  {
    "task": "Create a set and demonstrate the `add` method with multiple elements.",
    "code": "```python\n# Create a set\nmy_set = set()\n\n# Add multiple elements using the add method\nmy_set.add('apple')\nmy_set.add('banana')\nmy_set.add('cherry')\n\n# Print the set to show the elements\nprint(my_set)\n```"
  },
  {
    "task": "Implement a set to manage a collection of unique author names.",
    "code": "```python\nclass AuthorCollection:\n    def __init__(self):\n        self.authors = set()\n\n    def add_author(self, name):\n        self.authors.add(name)\n\n    def remove_author(self, name):\n        self.authors.discard(name)\n\n    def has_author(self, name):\n        return name in self.authors\n\n    def get_all_authors(self):\n        return self.authors\n```"
  },
  {
    "task": "Create a set of integers and demonstrate converting it to a sorted list.",
    "code": "```python\ninteger_set = {5, 3, 9, 1, 4}\nsorted_list = sorted(integer_set)\n```"
  },
  {
    "task": "Write a function that returns the union of multiple sets.",
    "code": "```python\ndef union_of_sets(*sets):\n    return set().union(*sets)\n```"
  },
  {
    "task": "Use a set to identify unique characters in a string.",
    "code": "```python\ndef unique_characters(s):\n    return set(s)\n\n# Example usage\nstring = \"hello world\"\nunique_chars = unique_characters(string)\nprint(unique_chars)\n```"
  },
  {
    "task": "Create a set of prime numbers and demonstrate basic set operations.",
    "code": "```python\n# Create a set of prime numbers\nprime_numbers = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29}\n\n# Demonstrate basic set operations\n\n# Add an element\nprime_numbers.add(31)\n\n# Remove an element\nprime_numbers.discard(29)\n\n# Check membership\nis_seven_prime = 7 in prime_numbers\n\n# Union with another set\nother_primes = {37, 41, 43}\nall_primes = prime_numbers.union(other_primes)\n\n# Intersection with another set\ncommon_primes = prime_numbers.intersection({5, 7, 11, 37})\n\n# Difference with another set\nunique_primes = prime_numbers.difference({5, 7, 11})\n\n# Print results\nprint(\"Prime Numbers Set:\", prime_numbers)\nprint(\"Is 7 a prime number?\", is_seven_prime)\nprint(\"Union with other primes:\", all_primes)\nprint(\"Intersection with {5, 7, 11, 37}:\", common_primes)\nprint(\"Difference with {5, 7, 11}:\", unique_primes)\n```"
  },
  {
    "task": "Create a set and demonstrate how to check for non-membership.",
    "code": "```python\nmy_set = {1, 2, 3, 4, 5}\nelement = 6\nis_not_member = element not in my_set\nprint(is_not_member)\n```"
  },
  {
    "task": "Write a program to find the largest element in a set of numbers.",
    "code": "```python\nnumbers = {3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5}\nlargest_number = max(numbers)\nprint(largest_number)\n```"
  },
  {
    "task": "Create a set of unique movie titles and demonstrate membership testing.",
    "code": "```python\n# Create a set of unique movie titles\nmovie_titles = {\"Inception\", \"The Matrix\", \"Interstellar\", \"The Godfather\"}\n\n# Demonstrate membership testing\nis_inception_in_set = \"Inception\" in movie_titles\nis_titanic_in_set = \"Titanic\" in movie_titles\n\nprint(\"Is 'Inception' in set?\", is_inception_in_set)\nprint(\"Is 'Titanic' in set?\", is_titanic_in_set)\n```"
  },
  {
    "task": "Implement a set to store unique keys from a dictionary.",
    "code": "```python\ndictionary = {'a': 1, 'b': 2, 'c': 3, 'd': 4}\nunique_keys = set(dictionary.keys())\n```"
  },
  {
    "task": "Create a set and demonstrate the `difference_update` method.",
    "code": "```python\nset1 = {1, 2, 3, 4, 5}\nset2 = {4, 5, 6, 7}\n\nset1.difference_update(set2)\n\nprint(set1)\n```"
  },
  {
    "task": "Write a function to merge multiple sets into a single set.",
    "code": "```python\ndef merge_sets(*sets):\n    merged_set = set()\n    for s in sets:\n        merged_set.update(s)\n    return merged_set\n```"
  },
  {
    "task": "Use a set to filter out duplicate letters from a word.",
    "code": "```python\nword = \"example\"\nunique_letters = set(word)\n```"
  },
  {
    "task": "Create a set and demonstrate the use of the `isdisjoint` method.",
    "code": "```python\nset_a = {1, 2, 3}\nset_b = {4, 5, 6}\nset_c = {2, 5, 7}\n\nresult1 = set_a.isdisjoint(set_b)\nresult2 = set_a.isdisjoint(set_c)\n\nprint(result1)  # True, because set_a and set_b have no elements in common\nprint(result2)  # False, because set_a and set_c have the element 2 in common\n```"
  },
  {
    "task": "Write a program to find all elements that are only in one of two sets.",
    "code": "```python\nset1 = {1, 2, 3, 4}\nset2 = {3, 4, 5, 6}\n\nunique_elements = set1.symmetric_difference(set2)\nprint(unique_elements)\n```"
  },
  {
    "task": "Create a set of unique book authors and demonstrate basic set operations.",
    "code": "```python\n# Create a set of unique book authors\nauthors = {\"J.K. Rowling\", \"George Orwell\", \"J.R.R. Tolkien\", \"Agatha Christie\"}\n\n# Add a new author to the set\nauthors.add(\"Stephen King\")\n\n# Remove an author from the set\nauthors.remove(\"George Orwell\")\n\n# Check if an author is in the set\nis_in_set = \"J.K. Rowling\" in authors\n\n# Get the number of authors in the set\nnumber_of_authors = len(authors)\n\n# Iterate over authors in the set\nfor author in authors:\n    print(author)\n\n# Create another set of authors\nmore_authors = {\"Isaac Asimov\", \"Arthur Conan Doyle\", \"Agatha Christie\"}\n\n# Perform set union operation\nall_authors = authors.union(more_authors)\n\n# Perform set intersection operation\ncommon_authors = authors.intersection(more_authors)\n\n# Perform set difference operation\nunique_authors = authors.difference(more_authors)\n```"
  },
  {
    "task": "Implement a set to store unique phone numbers and check for duplicates.",
    "code": "```python\nphone_numbers = set()\n\ndef add_phone_number(number):\n    if number in phone_numbers:\n        return False  # Duplicate found\n    phone_numbers.add(number)\n    return True  # Successfully added\n\n# Example usage\nadd_phone_number(\"123-456-7890\")\nadd_phone_number(\"098-765-4321\")\nduplicate_check = add_phone_number(\"123-456-7890\")  # This will return False\n```"
  },
  {
    "task": "Create a set of floating-point numbers and demonstrate rounding each element.",
    "code": "```python\nnumbers = {3.14159, 2.71828, 1.61803, 0.57721}\nrounded_numbers = {round(num, 2) for num in numbers}\nprint(rounded_numbers)\n```"
  },
  {
    "task": "Write a function that returns a set of all vowels present in a given sentence.",
    "code": "```python\ndef find_vowels(sentence):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    return set(c for c in sentence.lower() if c in vowels)\n```"
  },
  {
    "task": "Use a set to track unique session IDs for a web application.",
    "code": "```python\nclass SessionTracker:\n    def __init__(self):\n        self.session_ids = set()\n\n    def add_session(self, session_id):\n        self.session_ids.add(session_id)\n\n    def remove_session(self, session_id):\n        self.session_ids.discard(session_id)\n\n    def is_session_active(self, session_id):\n        return session_id in self.session_ids\n\n    def get_all_sessions(self):\n        return self.session_ids\n```"
  },
  {
    "task": "Create a set of unique city names and demonstrate set operations with it.",
    "code": "```python\n# Create a set of unique city names\ncities = {\"New York\", \"Los Angeles\", \"Chicago\", \"Houston\", \"Phoenix\"}\n\n# Add a new city to the set\ncities.add(\"San Francisco\")\n\n# Remove a city from the set\ncities.discard(\"Chicago\")\n\n# Check if a city is in the set\nis_in_set = \"Houston\" in cities\n\n# Get the number of unique cities\nnum_cities = len(cities)\n\n# Create another set of cities\nmore_cities = {\"Seattle\", \"Miami\", \"New York\", \"Denver\"}\n\n# Union of two sets\nunion_cities = cities.union(more_cities)\n\n# Intersection of two sets\nintersection_cities = cities.intersection(more_cities)\n\n# Difference between two sets\ndifference_cities = cities.difference(more_cities)\n\n# Symmetric difference between two sets\nsymmetric_difference_cities = cities.symmetric_difference(more_cities)\n```"
  },
  {
    "task": "Write a program to find the common elements in three sets.",
    "code": "```python\nset1 = {1, 2, 3, 4, 5}\nset2 = {3, 4, 5, 6, 7}\nset3 = {5, 6, 7, 8, 9}\n\ncommon_elements = set1.intersection(set2, set3)\nprint(common_elements)\n```"
  },
  {
    "task": "Create a set and demonstrate how to remove an element by its value.",
    "code": "```python\nmy_set = {1, 2, 3, 4, 5}\nmy_set.discard(3)\n```"
  },
  {
    "task": "Implement a set to store a collection of unique ISBN numbers.",
    "code": "```python\nisbn_set = set()\n\n# Example usage: Adding ISBN numbers to the set\nisbn_set.add(\"978-3-16-148410-0\")\nisbn_set.add(\"978-1-234-56789-7\")\nisbn_set.add(\"978-3-16-148410-0\")  # Duplicate, will not be added again\n\n# To display the unique ISBNs\nprint(isbn_set)\n```"
  },
  {
    "task": "Create a set and demonstrate the `intersection_update` method.",
    "code": "```python\nset1 = {1, 2, 3, 4, 5}\nset2 = {3, 4, 5, 6, 7}\n\nset1.intersection_update(set2)\n\nprint(set1)\n```"
  },
  {
    "task": "Write a function to generate a set of all unique elements in a list.",
    "code": "```python\ndef unique_elements(lst):\n    return set(lst)\n```"
  },
  {
    "task": "Use a set to determine the unique characters in two strings.",
    "code": "```python\nstring1 = \"example1\"\nstring2 = \"example2\"\n\nunique_chars = set(string1) | set(string2)\n```"
  },
  {
    "task": "Create a set of unique animal names and demonstrate the `discard` method.",
    "code": "```python\n# Create a set of unique animal names\nanimal_names = {\"lion\", \"tiger\", \"bear\", \"wolf\", \"elephant\"}\n\n# Demonstrate the discard method\nanimal_names.discard(\"tiger\")\n```"
  },
  {
    "task": "Write a program to find all elements present in the first set but not in the second.",
    "code": "```python\ndef difference_of_sets(set1, set2):\n    return set1 - set2\n\n# Example usage:\nset1 = {1, 2, 3, 4, 5}\nset2 = {4, 5, 6, 7, 8}\nresult = difference_of_sets(set1, set2)\nprint(result)\n```"
  },
  {
    "task": "Create a set of integers and demonstrate using it to eliminate duplicates from a list.",
    "code": "```python\nnumbers = [1, 2, 3, 2, 4, 5, 3, 6, 7, 5]\nunique_numbers = set(numbers)\nprint(unique_numbers)\n```"
  },
  {
    "task": "Implement a set to manage a collection of unique car models.",
    "code": "```python\nclass CarModels:\n    def __init__(self):\n        self.models = set()\n    \n    def add_model(self, model):\n        self.models.add(model)\n    \n    def remove_model(self, model):\n        self.models.discard(model)\n    \n    def has_model(self, model):\n        return model in self.models\n    \n    def get_all_models(self):\n        return self.models\n```"
  },
  {
    "task": "Create a set and demonstrate the use of the `clear` method.",
    "code": "```python\nmy_set = {1, 2, 3, 4, 5}\nmy_set.clear()\n```"
  },
  {
    "task": "Write a function that finds the intersection of multiple sets.",
    "code": "```python\ndef find_intersection(*sets):\n    if not sets:\n        return set()\n    intersection_set = sets[0]\n    for s in sets[1:]:\n        intersection_set &= s\n    return intersection_set\n```"
  },
  {
    "task": "Use a set to identify unique words in a paragraph.",
    "code": "```python\nparagraph = \"This is a sample paragraph with several words. This paragraph is meant to test the use of sets.\"\n\nwords = paragraph.split()\nunique_words = set(words)\n\nprint(unique_words)\n```"
  },
  {
    "task": "Create a set of unique country codes and demonstrate membership testing.",
    "code": "```python\ncountry_codes = {'US', 'GB', 'FR', 'DE', 'IN', 'CN', 'JP'}\n\n# Demonstration of membership testing\nprint('US' in country_codes)  # True\nprint('BR' in country_codes)  # False\n```"
  },
  {
    "task": "Write a program to find the union of two sets and return it as a list.",
    "code": "```python\ndef union_of_sets(set1, set2):\n    return list(set1.union(set2))\n\n# Example usage:\nset_a = {1, 2, 3}\nset_b = {3, 4, 5}\nresult = union_of_sets(set_a, set_b)\nprint(result)\n```"
  },
  {
    "task": "Create a set and demonstrate using it to check if all elements of another set are present.",
    "code": "```python\nset_a = {1, 2, 3, 4, 5}\nset_b = {2, 3, 4}\n\nis_subset = set_b.issubset(set_a)\nprint(is_subset)\n```"
  },
  {
    "task": "Implement a set to store unique coupon codes and demonstrate adding new codes.",
    "code": "```python\n# Initialize a set to store unique coupon codes\ncoupon_codes = set()\n\n# Add new coupon codes to the set\ncoupon_codes.add(\"SAVE10\")\ncoupon_codes.add(\"WELCOME20\")\ncoupon_codes.add(\"FREEDELIVERY\")\ncoupon_codes.add(\"SUMMER15\")\ncoupon_codes.add(\"SAVE10\")  # Attempt to add a duplicate code\n\n# Print the set of coupon codes to demonstrate uniqueness\nprint(coupon_codes)\n```"
  },
  {
    "task": "Create a set and demonstrate the `copy` method.",
    "code": "```python\noriginal_set = {1, 2, 3, 4, 5}\ncopied_set = original_set.copy()\nprint(copied_set)\n```"
  },
  {
    "task": "Write a function to remove duplicates from a list using a set.",
    "code": "```python\ndef remove_duplicates(lst):\n    return list(set(lst))\n```"
  },
  {
    "task": "Use a set to identify unique numbers in a sequence.",
    "code": "```python\ndef unique_numbers(sequence):\n    return set(sequence)\n\nsequence = [1, 2, 3, 2, 4, 5, 1, 6, 7, 5]\nunique_set = unique_numbers(sequence)\nprint(unique_set)\n```"
  },
  {
    "task": "Create a set of unique fruit names and demonstrate set operations with it.",
    "code": "```python\n# Create a set of unique fruit names\nfruits = {\"apple\", \"banana\", \"orange\", \"mango\", \"grape\"}\n\n# Adding a new fruit\nfruits.add(\"kiwi\")\n\n# Removing a fruit\nfruits.remove(\"banana\")\n\n# Checking membership\nis_apple_present = \"apple\" in fruits\n\n# Set union\nother_fruits = {\"pineapple\", \"banana\", \"apple\"}\nall_fruits = fruits.union(other_fruits)\n\n# Set intersection\ncommon_fruits = fruits.intersection(other_fruits)\n\n# Set difference\nunique_fruits = fruits.difference(other_fruits)\n\n# Set symmetric difference\nsymmetric_difference_fruits = fruits.symmetric_difference(other_fruits)\n\n# Convert set to list for demonstration purposes\nfruits_list = list(fruits)\n\n# Output the results\nprint(\"Fruits set:\", fruits)\nprint(\"Is apple present:\", is_apple_present)\nprint(\"All fruits (union):\", all_fruits)\nprint(\"Common fruits (intersection):\", common_fruits)\nprint(\"Unique fruits (difference):\", unique_fruits)\nprint(\"Symmetric difference fruits:\", symmetric_difference_fruits)\nprint(\"Fruits list:\", fruits_list)\n```"
  }
]