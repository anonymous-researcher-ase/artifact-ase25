[
  {
    "task": "Create a new instance of a class that represents a book, with properties for title, author, and ISBN number.",
    "code": "```cpp\n#include <string>\n\nclass Book {\npublic:\n    std::string title;\n    std::string author;\n    std::string isbn;\n    \n    Book(const std::string& title, const std::string& author, const std::string& isbn)\n        : title(title), author(author), isbn(isbn) {}\n};\n\nint main() {\n    Book myBook(\"The Great Gatsby\", \"F. Scott Fitzgerald\", \"978-0743273565\");\n    return 0;\n}\n```"
  },
  {
    "task": "Instantiate an object of a class named Car, and set its make, model, and year attributes.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass Car {\npublic:\n    std::string make;\n    std::string model;\n    int year;\n};\n\nint main() {\n    Car myCar;\n    myCar.make = \"Toyota\";\n    myCar.model = \"Corolla\";\n    myCar.year = 2021;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a class to represent a rectangle, then create an object with specific width and height.",
    "code": "```cpp\n#include <iostream>\n\nclass Rectangle {\npublic:\n    Rectangle(double width, double height) : width(width), height(height) {}\n\n    double getWidth() const {\n        return width;\n    }\n\n    double getHeight() const {\n        return height;\n    }\n\nprivate:\n    double width;\n    double height;\n};\n\nint main() {\n    Rectangle rect(5.0, 10.0);\n    std::cout << \"Width: \" << rect.getWidth() << \", Height: \" << rect.getHeight() << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Construct an object of a class Person, initializing it with a name and age.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass Person {\npublic:\n    std::string name;\n    int age;\n\n    Person(std::string n, int a) : name(n), age(a) {}\n};\n\nint main() {\n    Person person(\"John Doe\", 30);\n    \n    std::cout << \"Name: \" << person.name << \", Age: \" << person.age << std::endl;\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Create a new object from a class called Circle, initializing it with a radius value.",
    "code": "```cpp\n#include <iostream>\n\nclass Circle {\npublic:\n    Circle(double r) : radius(r) {}\n    double getRadius() const { return radius; }\nprivate:\n    double radius;\n};\n\nint main() {\n    Circle myCircle(5.0);\n    std::cout << \"Circle created with radius: \" << myCircle.getRadius() << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Instantiate a class named Student with properties for name, student ID, and GPA.",
    "code": "```cpp\n#include <string>\n\nclass Student {\npublic:\n    std::string name;\n    int studentID;\n    double gpa;\n\n    Student(const std::string &name, int studentID, double gpa)\n        : name(name), studentID(studentID), gpa(gpa) {}\n};\n\nint main() {\n    Student student(\"John Doe\", 123456, 3.75);\n    return 0;\n}\n```"
  },
  {
    "task": "Design a class for a smartphone, then create an instance with specific brand, model, and storage capacity.",
    "code": "```cpp\n#include <string>\n\nclass Smartphone {\npublic:\n    Smartphone(const std::string& brand, const std::string& model, int storage)\n        : brand_(brand), model_(model), storage_(storage) {}\n\nprivate:\n    std::string brand_;\n    std::string model_;\n    int storage_;\n};\n\nint main() {\n    Smartphone myPhone(\"Apple\", \"iPhone 13\", 128);\n    return 0;\n}\n```"
  },
  {
    "task": "Create an object of a class named BankAccount, initializing it with an account number and balance.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass BankAccount {\npublic:\n    std::string accountNumber;\n    double balance;\n\n    BankAccount(const std::string& accNumber, double bal) : accountNumber(accNumber), balance(bal) {}\n};\n\nint main() {\n    BankAccount myAccount(\"123456789\", 1000.0);\n    return 0;\n}\n```"
  },
  {
    "task": "Write a class for a movie, then instantiate it with a title, director, and release year.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass Movie {\npublic:\n    std::string title;\n    std::string director;\n    int releaseYear;\n\n    Movie(const std::string &t, const std::string &d, int y) \n        : title(t), director(d), releaseYear(y) {}\n};\n\nint main() {\n    Movie myMovie(\"Inception\", \"Christopher Nolan\", 2010);\n\n    std::cout << \"Title: \" << myMovie.title << std::endl;\n    std::cout << \"Director: \" << myMovie.director << std::endl;\n    std::cout << \"Release Year: \" << myMovie.releaseYear << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Define a class representing a point in 2D space and create an object with x and y coordinates.",
    "code": "```cpp\n#include <iostream>\n\nclass Point {\npublic:\n    int x;\n    int y;\n\n    Point(int xCoord, int yCoord) : x(xCoord), y(yCoord) {}\n};\n\nint main() {\n    Point p(5, 10);\n    std::cout << \"Point coordinates: (\" << p.x << \", \" << p.y << \")\" << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Create an instance of a class called Computer with attributes for CPU, RAM, and storage.",
    "code": "```cpp\n#include <string>\n\nclass Computer {\npublic:\n    std::string CPU;\n    int RAM;\n    int storage;\n\n    Computer(const std::string& cpu, int ram, int stor)\n        : CPU(cpu), RAM(ram), storage(stor) {}\n};\n\nint main() {\n    Computer myComputer(\"Intel i7\", 16, 512);\n    return 0;\n}\n```"
  },
  {
    "task": "Design a class for a Song with properties for title, artist, and duration, and instantiate it.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass Song {\npublic:\n    std::string title;\n    std::string artist;\n    int duration; // in seconds\n\n    Song(const std::string& t, const std::string& a, int d)\n        : title(t), artist(a), duration(d) {}\n};\n\nint main() {\n    Song mySong(\"Imagine\", \"John Lennon\", 183);\n    std::cout << \"Title: \" << mySong.title << \", Artist: \" << mySong.artist << \", Duration: \" << mySong.duration << \" seconds\" << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Create a new instance of a class named Pet, initializing it with type, breed, and age.",
    "code": "```cpp\n#include <string>\n\nclass Pet {\npublic:\n    std::string type;\n    std::string breed;\n    int age;\n\n    Pet(const std::string& t, const std::string& b, int a) : type(t), breed(b), age(a) {}\n};\n\nint main() {\n    Pet myPet(\"Dog\", \"Labrador\", 5);\n    return 0;\n}\n```"
  },
  {
    "task": "Instantiate an object of a class named House with attributes for address, number of bedrooms, and price.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass House {\npublic:\n    std::string address;\n    int numberOfBedrooms;\n    double price;\n\n    House(std::string addr, int bedrooms, double prc) \n        : address(addr), numberOfBedrooms(bedrooms), price(prc) {}\n};\n\nint main() {\n    House myHouse(\"123 Main St\", 3, 250000.0);\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a class for a Camera, then create an object with resolution and zoom level attributes.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass Camera {\npublic:\n    int resolution;\n    double zoomLevel;\n\n    Camera(int res, double zoom) : resolution(res), zoomLevel(zoom) {}\n};\n\nint main() {\n    Camera myCamera(1080, 4.0);\n\n    std::cout << \"Camera Resolution: \" << myCamera.resolution << \"p\\n\";\n    std::cout << \"Camera Zoom Level: \" << myCamera.zoomLevel << \"x\\n\";\n\n    return 0;\n}\n```"
  },
  {
    "task": "Construct an object from a class named Bicycle with properties for brand, type, and gear count.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass Bicycle {\npublic:\n    std::string brand;\n    std::string type;\n    int gearCount;\n\n    Bicycle(const std::string& brand, const std::string& type, int gearCount)\n        : brand(brand), type(type), gearCount(gearCount) {}\n};\n\nint main() {\n    Bicycle myBike(\"Trek\", \"Mountain\", 21);\n\n    std::cout << \"Brand: \" << myBike.brand << std::endl;\n    std::cout << \"Type: \" << myBike.type << std::endl;\n    std::cout << \"Gear Count: \" << myBike.gearCount << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a class for a book author with name and nationality, then instantiate it.",
    "code": "```cpp\n#include <string>\n#include <iostream>\n\nclass Author {\npublic:\n    Author(const std::string& name, const std::string& nationality)\n        : name(name), nationality(nationality) {}\n\n    void display() const {\n        std::cout << \"Author: \" << name << \", Nationality: \" << nationality << std::endl;\n    }\n\nprivate:\n    std::string name;\n    std::string nationality;\n};\n\nint main() {\n    Author author(\"Jane Doe\", \"American\");\n    author.display();\n    return 0;\n}\n```"
  },
  {
    "task": "Define a class representing a video game with attributes for title, genre, and platform, and create an object.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass VideoGame {\npublic:\n    std::string title;\n    std::string genre;\n    std::string platform;\n\n    VideoGame(const std::string& t, const std::string& g, const std::string& p)\n        : title(t), genre(g), platform(p) {}\n};\n\nint main() {\n    VideoGame game(\"Example Title\", \"Action\", \"PC\");\n    return 0;\n}\n```"
  },
  {
    "task": "Instantiate a class named Plane with properties for airline, model, and capacity.",
    "code": "```cpp\n#include <string>\n\nclass Plane {\npublic:\n    std::string airline;\n    std::string model;\n    int capacity;\n\n    Plane(const std::string& airline, const std::string& model, int capacity)\n        : airline(airline), model(model), capacity(capacity) {}\n};\n\nint main() {\n    Plane plane(\"AirlineName\", \"ModelX\", 180);\n    return 0;\n}\n```"
  },
  {
    "task": "Create a new object of a class called Lamp, initializing it with color and brightness level.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass Lamp {\npublic:\n    Lamp(const std::string& color, int brightness) \n        : color_(color), brightness_(brightness) {}\n\n    void display() const {\n        std::cout << \"Lamp color: \" << color_ << \", Brightness level: \" << brightness_ << std::endl;\n    }\n\nprivate:\n    std::string color_;\n    int brightness_;\n};\n\nint main() {\n    Lamp myLamp(\"Blue\", 75);\n    myLamp.display();\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a class for a TV show with properties for title, season, and episode count, then instantiate it.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass TVShow {\npublic:\n    std::string title;\n    int season;\n    int episodeCount;\n\n    TVShow(const std::string &t, int s, int e)\n        : title(t), season(s), episodeCount(e) {}\n};\n\nint main() {\n    TVShow myShow(\"Example Show\", 1, 10);\n\n    std::cout << \"Title: \" << myShow.title << std::endl;\n    std::cout << \"Season: \" << myShow.season << std::endl;\n    std::cout << \"Episode Count: \" << myShow.episodeCount << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Instantiate an object of a class named Garden with attributes for size and number of plants.",
    "code": "```cpp\nclass Garden {\npublic:\n    int size;\n    int numberOfPlants;\n\n    Garden(int s, int n) : size(s), numberOfPlants(n) {}\n};\n\nint main() {\n    Garden myGarden(100, 25);\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a class for a Train, then create an object with properties for type and number of carriages.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass Train {\npublic:\n    Train(const std::string& type, int numberOfCarriages)\n        : type(type), numberOfCarriages(numberOfCarriages) {}\n\n    std::string getType() const { return type; }\n    int getNumberOfCarriages() const { return numberOfCarriages; }\n\nprivate:\n    std::string type;\n    int numberOfCarriages;\n};\n\nint main() {\n    Train myTrain(\"Freight\", 20);\n    std::cout << \"Train Type: \" << myTrain.getType() \n              << \", Number of Carriages: \" << myTrain.getNumberOfCarriages() << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Define a class representing a planet with attributes for name, size, and distance from the sun, and create an object.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass Planet {\npublic:\n    std::string name;\n    double size;\n    double distanceFromSun;\n\n    Planet(const std::string& name, double size, double distanceFromSun)\n        : name(name), size(size), distanceFromSun(distanceFromSun) {}\n};\n\nint main() {\n    Planet earth(\"Earth\", 12742, 149.6);\n    std::cout << \"Planet: \" << earth.name << \", Size: \" << earth.size << \" km, Distance from Sun: \" << earth.distanceFromSun << \" million km\" << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Create an instance of a class named Fridge with properties for brand and capacity.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass Fridge {\npublic:\n    std::string brand;\n    int capacity;\n\n    Fridge(const std::string& b, int c) : brand(b), capacity(c) {}\n};\n\nint main() {\n    Fridge myFridge(\"Samsung\", 300);\n    return 0;\n}\n```"
  },
  {
    "task": "Design a class for a Restaurant with attributes for name, cuisine type, and location, then create an instance.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass Restaurant {\npublic:\n    std::string name;\n    std::string cuisineType;\n    std::string location;\n\n    Restaurant(const std::string& n, const std::string& c, const std::string& l)\n        : name(n), cuisineType(c), location(l) {}\n};\n\nint main() {\n    Restaurant myRestaurant(\"Gourmet Haven\", \"French\", \"Paris\");\n    return 0;\n}\n```"
  },
  {
    "task": "Create a new object from a class named Bookstore, initializing it with name and number of books.",
    "code": "```cpp\n#include <string>\n\nclass Bookstore {\npublic:\n    std::string name;\n    int numberOfBooks;\n\n    Bookstore(const std::string& storeName, int numBooks)\n        : name(storeName), numberOfBooks(numBooks) {}\n};\n\nint main() {\n    Bookstore myStore(\"Book Haven\", 1000);\n    return 0;\n}\n```"
  },
  {
    "task": "Instantiate a class named Library with properties for total books and number of members.",
    "code": "```cpp\n#include <iostream>\n\nclass Library {\npublic:\n    int totalBooks;\n    int numberOfMembers;\n\n    Library(int books, int members)\n        : totalBooks(books), numberOfMembers(members) {}\n};\n\nint main() {\n    Library myLibrary(1000, 300);\n    std::cout << \"Total Books: \" << myLibrary.totalBooks << std::endl;\n    std::cout << \"Number of Members: \" << myLibrary.numberOfMembers << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Write a class for a Beverage with properties for name, type, and volume, and instantiate it.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass Beverage {\npublic:\n    std::string name;\n    std::string type;\n    double volume;\n\n    Beverage(const std::string& name, const std::string& type, double volume)\n        : name(name), type(type), volume(volume) {}\n};\n\nint main() {\n    Beverage beverage(\"Cola\", \"Soda\", 350.0);\n    std::cout << \"Name: \" << beverage.name << \"\\n\";\n    std::cout << \"Type: \" << beverage.type << \"\\n\";\n    std::cout << \"Volume: \" << beverage.volume << \" ml\\n\";\n    return 0;\n}\n```"
  },
  {
    "task": "Create an object of a class named User with attributes for username, email, and password.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass User {\npublic:\n    std::string username;\n    std::string email;\n    std::string password;\n\n    User(const std::string &uname, const std::string &mail, const std::string &pass)\n        : username(uname), email(mail), password(pass) {}\n};\n\nint main() {\n    User user(\"exampleUser\", \"user@example.com\", \"securePassword123\");\n    return 0;\n}\n```"
  },
  {
    "task": "Define a class for a Laptop with properties for brand, processor, and RAM, then instantiate it.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass Laptop {\npublic:\n    std::string brand;\n    std::string processor;\n    int ram;\n\n    Laptop(const std::string& brand, const std::string& processor, int ram)\n        : brand(brand), processor(processor), ram(ram) {}\n};\n\nint main() {\n    Laptop myLaptop(\"Dell\", \"Intel i7\", 16);\n    std::cout << \"Brand: \" << myLaptop.brand << \"\\nProcessor: \" << myLaptop.processor << \"\\nRAM: \" << myLaptop.ram << \"GB\" << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Construct an object from a class named Mountain with attributes for name and elevation.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass Mountain {\npublic:\n    std::string name;\n    double elevation;\n\n    Mountain(const std::string& name, double elevation)\n        : name(name), elevation(elevation) {}\n};\n\nint main() {\n    Mountain everest(\"Everest\", 8848.86);\n    std::cout << \"Mountain: \" << everest.name << \", Elevation: \" << everest.elevation << \" meters\" << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Create an instance of a class called Weather with properties for temperature, humidity, and condition.",
    "code": "```cpp\n#include <string>\n\nclass Weather {\npublic:\n    int temperature;\n    int humidity;\n    std::string condition;\n\n    Weather(int temp, int hum, const std::string& cond)\n        : temperature(temp), humidity(hum), condition(cond) {}\n};\n\nint main() {\n    Weather todayWeather(30, 60, \"Sunny\");\n    return 0;\n}\n```"
  },
  {
    "task": "Design a class for a Classroom with attributes for room number and capacity, then create an instance.",
    "code": "```cpp\n#include <iostream>\n\nclass Classroom {\npublic:\n    int roomNumber;\n    int capacity;\n\n    Classroom(int roomNum, int cap) : roomNumber(roomNum), capacity(cap) {}\n};\n\nint main() {\n    Classroom myClassroom(101, 30);\n    return 0;\n}\n```"
  },
  {
    "task": "Instantiate an object of a class named Zoo with properties for name and number of animals.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass Zoo {\npublic:\n    std::string name;\n    int numberOfAnimals;\n\n    Zoo(const std::string& zooName, int numAnimals)\n        : name(zooName), numberOfAnimals(numAnimals) {}\n};\n\nint main() {\n    Zoo myZoo(\"Wildlife Park\", 150);\n\n    std::cout << \"Zoo Name: \" << myZoo.name << std::endl;\n    std::cout << \"Number of Animals: \" << myZoo.numberOfAnimals << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a class for an Album with properties for name, artist, and release date, then instantiate it.",
    "code": "```cpp\n#include <string>\n\nclass Album {\npublic:\n    std::string name;\n    std::string artist;\n    std::string releaseDate;\n\n    Album(const std::string& n, const std::string& a, const std::string& r)\n        : name(n), artist(a), releaseDate(r) {}\n};\n\nint main() {\n    Album myAlbum(\"Thriller\", \"Michael Jackson\", \"1982-11-30\");\n    return 0;\n}\n```"
  },
  {
    "task": "Create a new object from a class named Hotel, initializing it with name, location, and star rating.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass Hotel {\npublic:\n    std::string name;\n    std::string location;\n    int starRating;\n\n    Hotel(const std::string& n, const std::string& loc, int stars)\n        : name(n), location(loc), starRating(stars) {}\n};\n\nint main() {\n    Hotel myHotel(\"Grand Plaza\", \"New York\", 5);\n    return 0;\n}\n```"
  },
  {
    "task": "Write a class for a Recipe with properties for name, ingredients, and cooking time, and instantiate it.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n\nclass Recipe {\npublic:\n    std::string name;\n    std::vector<std::string> ingredients;\n    int cookingTime;\n\n    Recipe(const std::string& name, const std::vector<std::string>& ingredients, int cookingTime)\n        : name(name), ingredients(ingredients), cookingTime(cookingTime) {}\n};\n\nint main() {\n    std::vector<std::string> ingredients = {\"flour\", \"sugar\", \"eggs\"};\n    Recipe myRecipe(\"Cake\", ingredients, 45);\n\n    std::cout << \"Recipe: \" << myRecipe.name << \"\\n\";\n    std::cout << \"Cooking time: \" << myRecipe.cookingTime << \" minutes\\n\";\n    std::cout << \"Ingredients: \";\n    for (const auto& ingredient : myRecipe.ingredients) {\n        std::cout << ingredient << \" \";\n    }\n    std::cout << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Define a class representing a Conference with attributes for name, date, and number of attendees, and create an object.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass Conference {\npublic:\n    std::string name;\n    std::string date;\n    int numberOfAttendees;\n\n    Conference(const std::string& n, const std::string& d, int num)\n        : name(n), date(d), numberOfAttendees(num) {}\n};\n\nint main() {\n    Conference conf(\"Tech Summit\", \"2023-11-15\", 500);\n    return 0;\n}\n```"
  },
  {
    "task": "Create an instance of a class called Park with properties for name, location, and area.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass Park {\npublic:\n    std::string name;\n    std::string location;\n    double area;\n\n    Park(const std::string& name, const std::string& location, double area)\n        : name(name), location(location), area(area) {}\n};\n\nint main() {\n    Park centralPark(\"Central Park\", \"New York\", 843.0);\n    return 0;\n}\n```"
  },
  {
    "task": "Design a class for a Bicycle with attributes for brand, type, and wheel size, then create an instance.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass Bicycle {\npublic:\n    std::string brand;\n    std::string type;\n    int wheelSize;\n\n    Bicycle(const std::string& b, const std::string& t, int w)\n        : brand(b), type(t), wheelSize(w) {}\n};\n\nint main() {\n    Bicycle myBike(\"Giant\", \"Mountain\", 26);\n    return 0;\n}\n```"
  },
  {
    "task": "Instantiate an object of a class named Festival with properties for name, location, and duration.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass Festival {\npublic:\n    std::string name;\n    std::string location;\n    int duration;\n\n    Festival(const std::string& n, const std::string& loc, int dur)\n        : name(n), location(loc), duration(dur) {}\n};\n\nint main() {\n    Festival myFestival(\"Music Fest\", \"New York\", 3);\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a class for a Ship with properties for name, capacity, and type, then instantiate it.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass Ship {\npublic:\n    std::string name;\n    int capacity;\n    std::string type;\n\n    Ship(const std::string& name, int capacity, const std::string& type)\n        : name(name), capacity(capacity), type(type) {}\n};\n\nint main() {\n    Ship myShip(\"Titanic\", 3000, \"Cruise\");\n    std::cout << \"Ship Name: \" << myShip.name << std::endl;\n    std::cout << \"Ship Capacity: \" << myShip.capacity << std::endl;\n    std::cout << \"Ship Type: \" << myShip.type << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Create an object of a class named Currency with attributes for name, symbol, and exchange rate.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass Currency {\npublic:\n    std::string name;\n    std::string symbol;\n    double exchangeRate;\n\n    Currency(std::string name, std::string symbol, double exchangeRate)\n        : name(name), symbol(symbol), exchangeRate(exchangeRate) {}\n};\n\nint main() {\n    Currency usd(\"US Dollar\", \"$\", 1.0);\n    return 0;\n}\n```"
  },
  {
    "task": "Define a class for a Gadget with properties for name, brand, and functionality, then instantiate it.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass Gadget {\npublic:\n    std::string name;\n    std::string brand;\n    std::string functionality;\n    \n    Gadget(const std::string& n, const std::string& b, const std::string& f)\n        : name(n), brand(b), functionality(f) {}\n};\n\nint main() {\n    Gadget myGadget(\"Smartphone\", \"TechBrand\", \"Communication\");\n    \n    std::cout << \"Gadget Name: \" << myGadget.name << \"\\n\";\n    std::cout << \"Brand: \" << myGadget.brand << \"\\n\";\n    std::cout << \"Functionality: \" << myGadget.functionality << \"\\n\";\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Construct an object from a class named Bridge with attributes for name, length, and location.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass Bridge {\npublic:\n    std::string name;\n    double length;\n    std::string location;\n\n    Bridge(const std::string& name, double length, const std::string& location)\n        : name(name), length(length), location(location) {}\n};\n\nint main() {\n    Bridge myBridge(\"Golden Gate\", 2737.4, \"San Francisco\");\n    std::cout << \"Bridge Name: \" << myBridge.name << std::endl;\n    std::cout << \"Bridge Length: \" << myBridge.length << \" meters\" << std::endl;\n    std::cout << \"Bridge Location: \" << myBridge.location << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create an instance of a class called Forest with properties for name, area, and tree species.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass Forest {\npublic:\n    std::string name;\n    double area;\n    std::string treeSpecies;\n\n    Forest(const std::string& forestName, double forestArea, const std::string& species)\n        : name(forestName), area(forestArea), treeSpecies(species) {}\n};\n\nint main() {\n    Forest myForest(\"Amazon\", 5500.75, \"Mahogany\");\n    std::cout << \"Forest Name: \" << myForest.name << std::endl;\n    std::cout << \"Area: \" << myForest.area << std::endl;\n    std::cout << \"Tree Species: \" << myForest.treeSpecies << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Design a class for a Sculpture with attributes for title, artist, and material, then create an instance.",
    "code": "```cpp\n#include <string>\n\nclass Sculpture {\npublic:\n    Sculpture(const std::string& title, const std::string& artist, const std::string& material)\n        : title(title), artist(artist), material(material) {}\n\nprivate:\n    std::string title;\n    std::string artist;\n    std::string material;\n};\n\nint main() {\n    Sculpture mySculpture(\"The Thinker\", \"Auguste Rodin\", \"Bronze\");\n    return 0;\n}\n```"
  },
  {
    "task": "Instantiate an object of a class named Aquarium with properties for name and number of tanks.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass Aquarium {\npublic:\n    std::string name;\n    int numberOfTanks;\n\n    Aquarium(const std::string& name, int numberOfTanks) \n        : name(name), numberOfTanks(numberOfTanks) {}\n};\n\nint main() {\n    Aquarium myAquarium(\"Ocean World\", 5);\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a class for a Play with properties for title, playwright, and genre, then instantiate it.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass Play {\npublic:\n    std::string title;\n    std::string playwright;\n    std::string genre;\n\n    Play(const std::string& t, const std::string& p, const std::string& g)\n        : title(t), playwright(p), genre(g) {}\n};\n\nint main() {\n    Play myPlay(\"Hamlet\", \"William Shakespeare\", \"Tragedy\");\n    std::cout << \"Title: \" << myPlay.title << \"\\n\";\n    std::cout << \"Playwright: \" << myPlay.playwright << \"\\n\";\n    std::cout << \"Genre: \" << myPlay.genre << \"\\n\";\n    return 0;\n}\n```"
  },
  {
    "task": "Create a new object from a class named Telescope, initializing it with type and focal length.",
    "code": "```cpp\n#include <string>\n\nclass Telescope {\npublic:\n    Telescope(const std::string& type, double focalLength)\n        : type(type), focalLength(focalLength) {}\n\nprivate:\n    std::string type;\n    double focalLength;\n};\n\nint main() {\n    Telescope myTelescope(\"Refractor\", 1200.0);\n    return 0;\n}\n```"
  },
  {
    "task": "Write a class for a Monument with properties for name, location, and year built, and instantiate it.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass Monument {\npublic:\n    std::string name;\n    std::string location;\n    int yearBuilt;\n\n    Monument(std::string n, std::string loc, int year) : name(n), location(loc), yearBuilt(year) {}\n};\n\nint main() {\n    Monument monument(\"Statue of Liberty\", \"New York\", 1886);\n    std::cout << \"Monument: \" << monument.name << \", Location: \" << monument.location << \", Year Built: \" << monument.yearBuilt << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Define a class representing a Star with attributes for name, size, and distance from Earth, and create an object.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass Star {\npublic:\n    std::string name;\n    double size;\n    double distanceFromEarth;\n\n    Star(const std::string& name, double size, double distanceFromEarth)\n        : name(name), size(size), distanceFromEarth(distanceFromEarth) {}\n};\n\nint main() {\n    Star sirius(\"Sirius\", 1.71, 8.6);\n    return 0;\n}\n```"
  },
  {
    "task": "Create an instance of a class called Festival with properties for name, location, and number of events.",
    "code": "```cpp\n#include <string>\n\nclass Festival {\npublic:\n    std::string name;\n    std::string location;\n    int numberOfEvents;\n\n    Festival(const std::string& name, const std::string& location, int numberOfEvents)\n        : name(name), location(location), numberOfEvents(numberOfEvents) {}\n};\n\nint main() {\n    Festival festival(\"Music Fest\", \"New York\", 10);\n    return 0;\n}\n```"
  },
  {
    "task": "Design a class for a Clock with attributes for brand, type, and display, then create an instance.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass Clock {\npublic:\n    std::string brand;\n    std::string type;\n    std::string display;\n\n    Clock(const std::string& brand, const std::string& type, const std::string& display)\n        : brand(brand), type(type), display(display) {}\n};\n\nint main() {\n    Clock myClock(\"Seiko\", \"Analog\", \"12-hour\");\n    std::cout << \"Brand: \" << myClock.brand << \", Type: \" << myClock.type << \", Display: \" << myClock.display << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Instantiate an object of a class named Stadium with properties for name, capacity, and location.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass Stadium {\npublic:\n    std::string name;\n    int capacity;\n    std::string location;\n\n    Stadium(const std::string& n, int c, const std::string& l)\n        : name(n), capacity(c), location(l) {}\n};\n\nint main() {\n    Stadium stadium(\"National Arena\", 50000, \"Capital City\");\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a class for a Potion with properties for name, effect, and duration, then instantiate it.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass Potion {\npublic:\n    std::string name;\n    std::string effect;\n    int duration;\n\n    Potion(const std::string& name, const std::string& effect, int duration)\n        : name(name), effect(effect), duration(duration) {}\n};\n\nint main() {\n    Potion potion(\"Healing Potion\", \"Restores Health\", 5);\n    std::cout << \"Potion Name: \" << potion.name << std::endl;\n    std::cout << \"Effect: \" << potion.effect << std::endl;\n    std::cout << \"Duration: \" << potion.duration << \" minutes\" << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Create an object of a class named Planet with attributes for name, mass, and orbital period.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass Planet {\npublic:\n    std::string name;\n    double mass;\n    double orbitalPeriod;\n\n    Planet(const std::string& n, double m, double o)\n        : name(n), mass(m), orbitalPeriod(o) {}\n};\n\nint main() {\n    Planet earth(\"Earth\", 5.972e24, 365.25);\n    std::cout << \"Planet: \" << earth.name << \", Mass: \" << earth.mass << \", Orbital Period: \" << earth.orbitalPeriod << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Define a class for a Lighthouse with properties for name, height, and light range, then instantiate it.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass Lighthouse {\npublic:\n    std::string name;\n    double height;\n    double lightRange;\n\n    Lighthouse(const std::string& name, double height, double lightRange)\n        : name(name), height(height), lightRange(lightRange) {}\n};\n\nint main() {\n    Lighthouse lighthouse(\"Seaside Beacon\", 30.5, 15.0);\n    return 0;\n}\n```"
  },
  {
    "task": "Construct an object from a class named Volcano with attributes for name, height, and eruption history.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n\nclass Volcano {\npublic:\n    Volcano(const std::string& name, double height, const std::vector<std::string>& eruptionHistory)\n        : name(name), height(height), eruptionHistory(eruptionHistory) {}\n\nprivate:\n    std::string name;\n    double height;\n    std::vector<std::string> eruptionHistory;\n};\n\nint main() {\n    std::vector<std::string> history = {\"1991\", \"2006\", \"2015\"};\n    Volcano myVolcano(\"Mount St. Helens\", 2549.0, history);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create an instance of a class called Sculpture with properties for title, artist, and year created.",
    "code": "```cpp\n#include <string>\n\nclass Sculpture {\npublic:\n    std::string title;\n    std::string artist;\n    int yearCreated;\n\n    Sculpture(const std::string& t, const std::string& a, int y)\n        : title(t), artist(a), yearCreated(y) {}\n};\n\nint main() {\n    Sculpture mySculpture(\"The Thinker\", \"Auguste Rodin\", 1902);\n    return 0;\n}\n```"
  },
  {
    "task": "Design a class for a Ship with attributes for name, type, and displacement, then create an instance.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass Ship {\npublic:\n    std::string name;\n    std::string type;\n    double displacement;\n\n    Ship(const std::string& n, const std::string& t, double d)\n        : name(n), type(t), displacement(d) {}\n};\n\nint main() {\n    Ship myShip(\"Titanic\", \"Cruise\", 52310.0);\n    return 0;\n}\n```"
  },
  {
    "task": "Instantiate an object of a class named Opera with properties for title, composer, and act count.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass Opera {\npublic:\n    std::string title;\n    std::string composer;\n    int actCount;\n\n    Opera(const std::string& t, const std::string& c, int a)\n        : title(t), composer(c), actCount(a) {}\n};\n\nint main() {\n    Opera myOpera(\"La Traviata\", \"Giuseppe Verdi\", 3);\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a class for a Waterfall with properties for name, height, and flow rate, then instantiate it.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass Waterfall {\npublic:\n    std::string name;\n    double height;\n    double flowRate;\n\n    Waterfall(std::string n, double h, double f) : name(n), height(h), flowRate(f) {}\n};\n\nint main() {\n    Waterfall waterfall(\"Niagara\", 51.0, 2800.0);\n    return 0;\n}\n```"
  },
  {
    "task": "Create a new object from a class named Castle, initializing it with name, location, and year built.",
    "code": "```cpp\n#include <string>\n\nclass Castle {\npublic:\n    std::string name;\n    std::string location;\n    int yearBuilt;\n\n    Castle(const std::string& name, const std::string& location, int yearBuilt)\n        : name(name), location(location), yearBuilt(yearBuilt) {}\n};\n\nint main() {\n    Castle myCastle(\"Winterfell\", \"The North\", 998);\n    return 0;\n}\n```"
  },
  {
    "task": "Write a class for a Cat with properties for name, breed, and color, and instantiate it.",
    "code": "```cpp\n#include <string>\n\nclass Cat {\npublic:\n    std::string name;\n    std::string breed;\n    std::string color;\n\n    Cat(const std::string& name, const std::string& breed, const std::string& color)\n        : name(name), breed(breed), color(color) {}\n};\n\nint main() {\n    Cat myCat(\"Whiskers\", \"Siamese\", \"Brown\");\n    return 0;\n}\n```"
  },
  {
    "task": "Define a class representing a Spaceship with attributes for name, speed, and crew capacity, and create an object.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass Spaceship {\npublic:\n    std::string name;\n    double speed;\n    int crewCapacity;\n\n    Spaceship(const std::string& n, double s, int c)\n        : name(n), speed(s), crewCapacity(c) {}\n};\n\nint main() {\n    Spaceship spaceship(\"Apollo\", 25000.0, 5);\n    return 0;\n}\n```"
  },
  {
    "task": "Create an instance of a class called Robot with properties for name, model, and function.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass Robot {\npublic:\n    std::string name;\n    std::string model;\n    std::string function;\n\n    Robot(const std::string& n, const std::string& m, const std::string& f)\n        : name(n), model(m), function(f) {}\n};\n\nint main() {\n    Robot myRobot(\"Robo1\", \"XJ-9\", \"Assistance\");\n    return 0;\n}\n```"
  },
  {
    "task": "Design a class for a Computer Program with attributes for name, language, and lines of code, then create an instance.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass ComputerProgram {\npublic:\n    std::string name;\n    std::string language;\n    int linesOfCode;\n\n    ComputerProgram(std::string n, std::string lang, int loc)\n        : name(n), language(lang), linesOfCode(loc) {}\n};\n\nint main() {\n    ComputerProgram program(\"Example Program\", \"C++\", 1000);\n    return 0;\n}\n```"
  },
  {
    "task": "Instantiate an object of a class named Mountain with properties for name, range, and prominence.",
    "code": "```cpp\n#include <string>\n\nclass Mountain {\npublic:\n    std::string name;\n    std::string range;\n    double prominence;\n\n    Mountain(const std::string& name, const std::string& range, double prominence)\n        : name(name), range(range), prominence(prominence) {}\n};\n\nint main() {\n    Mountain everest(\"Everest\", \"Himalayas\", 8848.86);\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a class for a Painting with properties for title, artist, and dimensions, then instantiate it.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass Painting {\npublic:\n    std::string title;\n    std::string artist;\n    std::string dimensions;\n\n    Painting(const std::string& t, const std::string& a, const std::string& d)\n        : title(t), artist(a), dimensions(d) {}\n};\n\nint main() {\n    Painting myPainting(\"Starry Night\", \"Vincent van Gogh\", \"24x36 inches\");\n    return 0;\n}\n```"
  },
  {
    "task": "Create an object of a class named Symphony with attributes for title, composer, and movement count.",
    "code": "```cpp\n#include <string>\n\nclass Symphony {\npublic:\n    Symphony(const std::string& title, const std::string& composer, int movementCount) \n        : title(title), composer(composer), movementCount(movementCount) {}\n\nprivate:\n    std::string title;\n    std::string composer;\n    int movementCount;\n};\n\nint main() {\n    Symphony symphony(\"Symphony No. 9\", \"Ludwig van Beethoven\", 4);\n    return 0;\n}\n```"
  },
  {
    "task": "Define a class for a Dinosaur with properties for name, period, and diet, then instantiate it.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass Dinosaur {\npublic:\n    std::string name;\n    std::string period;\n    std::string diet;\n\n    Dinosaur(const std::string& n, const std::string& p, const std::string& d)\n        : name(n), period(p), diet(d) {}\n};\n\nint main() {\n    Dinosaur dino(\"Tyrannosaurus Rex\", \"Cretaceous\", \"Carnivore\");\n\n    std::cout << \"Dinosaur Name: \" << dino.name << std::endl;\n    std::cout << \"Period: \" << dino.period << std::endl;\n    std::cout << \"Diet: \" << dino.diet << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Construct an object from a class named River with attributes for name, length, and basin size.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass River {\npublic:\n    std::string name;\n    double length;\n    double basinSize;\n\n    River(const std::string& n, double l, double b)\n        : name(n), length(l), basinSize(b) {}\n};\n\nint main() {\n    River nile(\"Nile\", 6650, 3340000);\n    std::cout << \"River Name: \" << nile.name << std::endl;\n    std::cout << \"Length: \" << nile.length << \" km\" << std::endl;\n    std::cout << \"Basin Size: \" << nile.basinSize << \" sq km\" << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Create an instance of a class called Instrument with properties for name, type, and material.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass Instrument {\npublic:\n    std::string name;\n    std::string type;\n    std::string material;\n\n    Instrument(const std::string& name, const std::string& type, const std::string& material)\n        : name(name), type(type), material(material) {}\n};\n\nint main() {\n    Instrument instrument(\"Guitar\", \"String\", \"Wood\");\n    return 0;\n}\n```"
  },
  {
    "task": "Design a class for a Planetarium with attributes for name, location, and dome size, then create an instance.",
    "code": "```cpp\n#include <string>\n\nclass Planetarium {\npublic:\n    std::string name;\n    std::string location;\n    double domeSize;\n\n    Planetarium(const std::string& n, const std::string& loc, double size)\n        : name(n), location(loc), domeSize(size) {}\n};\n\nint main() {\n    Planetarium myPlanetarium(\"Cosmic View\", \"New York\", 25.5);\n    return 0;\n}\n```"
  },
  {
    "task": "Instantiate an object of a class named Island with properties for name, area, and population.",
    "code": "```cpp\n#include <string>\n\nclass Island {\npublic:\n    std::string name;\n    double area;\n    int population;\n\n    Island(const std::string& n, double a, int p) : name(n), area(a), population(p) {}\n};\n\nint main() {\n    Island myIsland(\"Paradise\", 123.45, 1000);\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a class for a Space Station with properties for name, crew size, and modules, then instantiate it.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n\nclass SpaceStation {\nprivate:\n    std::string name;\n    int crewSize;\n    std::vector<std::string> modules;\n\npublic:\n    SpaceStation(const std::string &name, int crewSize, const std::vector<std::string> &modules)\n        : name(name), crewSize(crewSize), modules(modules) {}\n\n    void displayInfo() {\n        std::cout << \"Space Station Name: \" << name << std::endl;\n        std::cout << \"Crew Size: \" << crewSize << std::endl;\n        std::cout << \"Modules: \";\n        for (const auto &module : modules) {\n            std::cout << module << \" \";\n        }\n        std::cout << std::endl;\n    }\n};\n\nint main() {\n    std::vector<std::string> modules = {\"Habitation\", \"Laboratory\", \"Control\"};\n    SpaceStation station(\"International Space Station\", 6, modules);\n    station.displayInfo();\n    return 0;\n}\n```"
  },
  {
    "task": "Create a new object from a class named Dinosaur, initializing it with species and period.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass Dinosaur {\npublic:\n    std::string species;\n    std::string period;\n\n    Dinosaur(const std::string& species, const std::string& period) \n        : species(species), period(period) {}\n};\n\nint main() {\n    Dinosaur dino(\"Tyrannosaurus Rex\", \"Cretaceous\");\n    std::cout << \"Species: \" << dino.species << \", Period: \" << dino.period << std::endl;\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Write a class for a Tree with properties for species, height, and age, and instantiate it.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass Tree {\npublic:\n    std::string species;\n    double height;\n    int age;\n\n    Tree(const std::string& species, double height, int age)\n        : species(species), height(height), age(age) {}\n};\n\nint main() {\n    Tree oak(\"Oak\", 20.5, 100);\n    std::cout << \"Species: \" << oak.species << \"\\n\";\n    std::cout << \"Height: \" << oak.height << \"\\n\";\n    std::cout << \"Age: \" << oak.age << \"\\n\";\n    return 0;\n}\n```"
  },
  {
    "task": "Define a class representing a Firework with attributes for name, color, and duration, and create an object.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass Firework {\npublic:\n    std::string name;\n    std::string color;\n    int duration;\n\n    Firework(std::string n, std::string c, int d) : name(n), color(c), duration(d) {}\n};\n\nint main() {\n    Firework myFirework(\"Sparkler\", \"Red\", 5);\n    return 0;\n}\n```"
  },
  {
    "task": "Create an instance of a class called ComicBook with properties for title, author, and issue number.",
    "code": "```cpp\n#include <string>\n\nclass ComicBook {\npublic:\n    std::string title;\n    std::string author;\n    int issueNumber;\n\n    ComicBook(const std::string& t, const std::string& a, int i) \n        : title(t), author(a), issueNumber(i) {}\n};\n\nint main() {\n    ComicBook myComic(\"The Amazing Spider-Man\", \"Stan Lee\", 1);\n    return 0;\n}\n```"
  },
  {
    "task": "Design a class for a Metropolis with attributes for name, population, and GDP, then create an instance.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass Metropolis {\npublic:\n    std::string name;\n    int population;\n    double GDP;\n\n    Metropolis(const std::string& name, int population, double GDP)\n        : name(name), population(population), GDP(GDP) {}\n};\n\nint main() {\n    Metropolis city(\"Example City\", 5000000, 250000000000.0);\n    return 0;\n}\n```"
  },
  {
    "task": "Instantiate an object of a class named Dragon with properties for name, element, and age.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass Dragon {\npublic:\n    std::string name;\n    std::string element;\n    int age;\n\n    Dragon(const std::string& name, const std::string& element, int age)\n        : name(name), element(element), age(age) {}\n};\n\nint main() {\n    Dragon myDragon(\"Smaug\", \"Fire\", 300);\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a class for a Novel with properties for title, author, and genre, then instantiate it.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass Novel {\npublic:\n    std::string title;\n    std::string author;\n    std::string genre;\n\n    Novel(const std::string &t, const std::string &a, const std::string &g)\n        : title(t), author(a), genre(g) {}\n};\n\nint main() {\n    Novel myNovel(\"1984\", \"George Orwell\", \"Dystopian\");\n    std::cout << \"Title: \" << myNovel.title << std::endl;\n    std::cout << \"Author: \" << myNovel.author << std::endl;\n    std::cout << \"Genre: \" << myNovel.genre << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Create an object of a class named Satellite with attributes for name, orbit, and mission.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass Satellite {\npublic:\n    std::string name;\n    std::string orbit;\n    std::string mission;\n\n    Satellite(const std::string& nm, const std::string& orb, const std::string& mis)\n        : name(nm), orbit(orb), mission(mis) {}\n};\n\nint main() {\n    Satellite satellite(\"Hubble\", \"Low Earth Orbit\", \"Astronomy\");\n    std::cout << \"Satellite Name: \" << satellite.name << std::endl;\n    std::cout << \"Orbit: \" << satellite.orbit << std::endl;\n    std::cout << \"Mission: \" << satellite.mission << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Define a class for a Castle with properties for name, location, and architectural style, then instantiate it.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass Castle {\npublic:\n    std::string name;\n    std::string location;\n    std::string architecturalStyle;\n\n    Castle(const std::string& n, const std::string& loc, const std::string& style)\n        : name(n), location(loc), architecturalStyle(style) {}\n};\n\nint main() {\n    Castle myCastle(\"Windsor Castle\", \"Windsor, England\", \"Gothic\");\n    std::cout << \"Castle Name: \" << myCastle.name << \"\\n\";\n    std::cout << \"Location: \" << myCastle.location << \"\\n\";\n    std::cout << \"Architectural Style: \" << myCastle.architecturalStyle << \"\\n\";\n    return 0;\n}\n```"
  },
  {
    "task": "Construct an object from a class named Jungle with attributes for name, area, and biodiversity.",
    "code": "```cpp\n#include <string>\n\nclass Jungle {\npublic:\n    std::string name;\n    double area;\n    double biodiversity;\n\n    Jungle(const std::string& name, double area, double biodiversity)\n        : name(name), area(area), biodiversity(biodiversity) {}\n};\n\nint main() {\n    Jungle amazon(\"Amazon\", 5500000, 9.2);\n    return 0;\n}\n```"
  },
  {
    "task": "Create an instance of a class called Dinosaur with properties for species, size, and diet.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass Dinosaur {\npublic:\n    std::string species;\n    std::string size;\n    std::string diet;\n\n    Dinosaur(std::string species, std::string size, std::string diet)\n        : species(species), size(size), diet(diet) {}\n};\n\nint main() {\n    Dinosaur dino(\"Tyrannosaurus\", \"Large\", \"Carnivore\");\n    std::cout << \"Species: \" << dino.species << \", Size: \" << dino.size << \", Diet: \" << dino.diet << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Design a class for a Superhero with attributes for name, powers, and alias, then create an instance.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass Superhero {\npublic:\n    std::string name;\n    std::string powers;\n    std::string alias;\n\n    Superhero(const std::string &n, const std::string &p, const std::string &a)\n        : name(n), powers(p), alias(a) {}\n};\n\nint main() {\n    Superhero hero(\"Clark Kent\", \"Super Strength, Flight, X-Ray Vision\", \"Superman\");\n    std::cout << \"Name: \" << hero.name << \"\\n\";\n    std::cout << \"Powers: \" << hero.powers << \"\\n\";\n    std::cout << \"Alias: \" << hero.alias << \"\\n\";\n    return 0;\n}\n```"
  }
]