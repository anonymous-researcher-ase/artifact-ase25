[
  {
    "task": "Create a list of the first ten positive integers and calculate their sum.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <numeric>\n\nint main() {\n    std::vector<int> numbers;\n    for (int i = 1; i <= 10; ++i) {\n        numbers.push_back(i);\n    }\n    \n    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);\n    \n    std::cout << \"Sum: \" << sum << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program to reverse the order of elements in a given list.",
    "code": "```cpp\n#include <iostream>\n#include <list>\n#include <algorithm>\n\nint main() {\n    std::list<int> myList = {1, 2, 3, 4, 5};\n\n    myList.reverse();\n\n    for (int element : myList) {\n        std::cout << element << \" \";\n    }\n\n    std::cout << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function that takes a list and returns the list with duplicates removed.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <unordered_set>\n\nstd::vector<int> removeDuplicates(const std::vector<int>& inputList) {\n    std::unordered_set<int> seen;\n    std::vector<int> result;\n    for (int num : inputList) {\n        if (seen.find(num) == seen.end()) {\n            seen.insert(num);\n            result.push_back(num);\n        }\n    }\n    return result;\n}\n\nint main() {\n    std::vector<int> list = {1, 2, 2, 3, 4, 4, 5};\n    std::vector<int> noDuplicates = removeDuplicates(list);\n    for (int num : noDuplicates) {\n        std::cout << num << \" \";\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Create a list of names and sort them in alphabetical order.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nint main() {\n    std::vector<std::string> names = {\"Alice\", \"Bob\", \"Charlie\", \"David\"};\n\n    std::sort(names.begin(), names.end());\n\n    for (const auto& name : names) {\n        std::cout << name << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that appends a new element to an existing list.",
    "code": "```cpp\n#include <iostream>\n#include <list>\n\nvoid appendToList(std::list<int>& lst, int element) {\n    lst.push_back(element);\n}\n\nint main() {\n    std::list<int> myList = {1, 2, 3};\n    appendToList(myList, 4);\n\n    for (int num : myList) {\n        std::cout << num << \" \";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Generate a list of the first 20 even numbers.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<int> evenNumbers;\n    for (int i = 1; i <= 20; ++i) {\n        evenNumbers.push_back(i * 2);\n    }\n    for (int num : evenNumbers) {\n        std::cout << num << \" \";\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Create a nested list (a list of lists) and access an element from the inner list.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<std::vector<int>> nestedList = {\n        {1, 2, 3},\n        {4, 5, 6},\n        {7, 8, 9}\n    };\n    \n    int element = nestedList[1][2];\n    std::cout << \"The accessed element is: \" << element << std::endl;\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Write a program that finds the maximum value in a list of integers.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nint main() {\n    std::vector<int> numbers = {3, 10, 5, 7, 20, 15};\n    int max_value = *std::max_element(numbers.begin(), numbers.end());\n    std::cout << \"The maximum value is: \" << max_value << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function to merge two lists into a single list without duplicates.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <set>\n\nstd::vector<int> mergeWithoutDuplicates(const std::vector<int>& list1, const std::vector<int>& list2) {\n    std::set<int> uniqueElements;\n    uniqueElements.insert(list1.begin(), list1.end());\n    uniqueElements.insert(list2.begin(), list2.end());\n    \n    return std::vector<int>(uniqueElements.begin(), uniqueElements.end());\n}\n\nint main() {\n    std::vector<int> list1 = {1, 2, 3, 4};\n    std::vector<int> list2 = {3, 4, 5, 6};\n    \n    std::vector<int> mergedList = mergeWithoutDuplicates(list1, list2);\n    \n    for (int num : mergedList) {\n        std::cout << num << \" \";\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Create a list from user input, then display the list in reverse order.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nint main() {\n    std::vector<int> list;\n    int n, value;\n\n    std::cout << \"Enter the number of elements: \";\n    std::cin >> n;\n\n    std::cout << \"Enter \" << n << \" integers:\\n\";\n    for (int i = 0; i < n; ++i) {\n        std::cin >> value;\n        list.push_back(value);\n    }\n\n    std::reverse(list.begin(), list.end());\n\n    std::cout << \"List in reverse order:\\n\";\n    for (int i = 0; i < n; ++i) {\n        std::cout << list[i] << \" \";\n    }\n    std::cout << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that takes a list and returns a new list containing only the even numbers.",
    "code": "```cpp\n#include <vector>\n\nstd::vector<int> filterEvenNumbers(const std::vector<int>& numbers) {\n    std::vector<int> evenNumbers;\n    for (int num : numbers) {\n        if (num % 2 == 0) {\n            evenNumbers.push_back(num);\n        }\n    }\n    return evenNumbers;\n}\n```"
  },
  {
    "task": "Generate a list of squares for the numbers 1 through 10.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<int> squares;\n    for (int i = 1; i <= 10; ++i) {\n        squares.push_back(i * i);\n    }\n\n    for (int square : squares) {\n        std::cout << square << \" \";\n    }\n    std::cout << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a list of floating-point numbers and find their average.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<float> numbers = {1.2, 2.3, 3.4, 4.5, 5.6};\n    float sum = 0.0;\n\n    for (float num : numbers) {\n        sum += num;\n    }\n\n    float average = sum / numbers.size();\n    std::cout << \"Average: \" << average << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a program to rotate the elements of a list to the right by a given number of steps.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nvoid rotateRight(std::vector<int>& nums, int steps) {\n    int n = nums.size();\n    steps = steps % n;\n    std::vector<int> rotated(n);\n\n    for (int i = 0; i < n; ++i) {\n        rotated[(i + steps) % n] = nums[i];\n    }\n\n    nums = rotated;\n}\n\nint main() {\n    std::vector<int> nums = {1, 2, 3, 4, 5};\n    int steps = 2;\n\n    rotateRight(nums, steps);\n\n    for (int num : nums) {\n        std::cout << num << \" \";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that checks if a list is a palindrome (reads the same forwards and backwards).",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nbool isPalindrome(const std::vector<int>& list) {\n    int left = 0;\n    int right = list.size() - 1;\n    while (left < right) {\n        if (list[left] != list[right]) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    return true;\n}\n\nint main() {\n    std::vector<int> list = {1, 2, 3, 2, 1};\n    if (isPalindrome(list)) {\n        std::cout << \"The list is a palindrome.\" << std::endl;\n    } else {\n        std::cout << \"The list is not a palindrome.\" << std::endl;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Create a list of random integers and count how many are greater than 50.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <ctime>\n#include <cstdlib>\n\nint main() {\n    std::srand(std::time(0)); // seed for random number generation\n    std::vector<int> randomNumbers;\n    for (int i = 0; i < 10; ++i) {\n        randomNumbers.push_back(std::rand() % 100); // random integers between 0 and 99\n    }\n\n    int count = 0;\n    for (int num : randomNumbers) {\n        if (num > 50) {\n            ++count;\n        }\n    }\n\n    std::cout << \"Number of integers greater than 50: \" << count << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program that removes the first occurrence of a specified element from a list.",
    "code": "```cpp\n#include <iostream>\n#include <list>\n\nint main() {\n    std::list<int> myList = {1, 2, 3, 4, 5, 3, 6};\n    int elementToRemove = 3;\n\n    for (auto it = myList.begin(); it != myList.end(); ++it) {\n        if (*it == elementToRemove) {\n            myList.erase(it);\n            break;\n        }\n    }\n\n    for (int elem : myList) {\n        std::cout << elem << \" \";\n    }\n    std::cout << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function that takes two lists and returns a list containing their intersection.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nstd::vector<int> intersection(const std::vector<int>& list1, const std::vector<int>& list2) {\n    std::vector<int> result;\n    for (const auto& elem : list1) {\n        if (std::find(list2.begin(), list2.end(), elem) != list2.end()) {\n            if (std::find(result.begin(), result.end(), elem) == result.end()) {\n                result.push_back(elem);\n            }\n        }\n    }\n    return result;\n}\n\nint main() {\n    std::vector<int> list1 = {1, 2, 3, 4, 5};\n    std::vector<int> list2 = {3, 4, 5, 6, 7};\n    std::vector<int> result = intersection(list1, list2);\n    \n    for (int num : result) {\n        std::cout << num << \" \";\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Create a list of prime numbers less than 100.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nbool isPrime(int num) {\n    if (num <= 1) return false;\n    if (num <= 3) return true;\n    if (num % 2 == 0 || num % 3 == 0) return false;\n    for (int i = 5; i * i <= num; i += 6) {\n        if (num % i == 0 || num % (i + 2) == 0) return false;\n    }\n    return true;\n}\n\nint main() {\n    std::vector<int> primes;\n    for (int i = 2; i < 100; ++i) {\n        if (isPrime(i)) {\n            primes.push_back(i);\n        }\n    }\n\n    for (int prime : primes) {\n        std::cout << prime << \" \";\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function to split a list into two lists: one with even numbers and one with odd numbers.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nvoid splitEvenOdd(const std::vector<int>& inputList, std::vector<int>& evenList, std::vector<int>& oddList) {\n    for (int num : inputList) {\n        if (num % 2 == 0) {\n            evenList.push_back(num);\n        } else {\n            oddList.push_back(num);\n        }\n    }\n}\n\nint main() {\n    std::vector<int> inputList = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n    std::vector<int> evenList, oddList;\n\n    splitEvenOdd(inputList, evenList, oddList);\n\n    std::cout << \"Even numbers: \";\n    for (int num : evenList) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n\n    std::cout << \"Odd numbers: \";\n    for (int num : oddList) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a list of strings and convert all the strings to uppercase.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nint main() {\n    std::vector<std::string> strings = {\"hello\", \"world\", \"example\"};\n    \n    for (auto& str : strings) {\n        std::transform(str.begin(), str.end(), str.begin(), ::toupper);\n    }\n    \n    for (const auto& str : strings) {\n        std::cout << str << std::endl;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Implement a program that removes all elements from a list that are less than a specified value.",
    "code": "```cpp\n#include <iostream>\n#include <list>\n#include <algorithm>\n\nint main() {\n    std::list<int> numbers = {10, 5, 8, 3, 15, 2};\n    int threshold = 6;\n\n    numbers.remove_if([threshold](int n) { return n < threshold; });\n\n    for (int number : numbers) {\n        std::cout << number << \" \";\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that takes a list and returns a new list with elements in random order.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <random>\n\nstd::vector<int> shuffleList(const std::vector<int>& inputList) {\n    std::vector<int> shuffledList = inputList;\n    std::random_device rd;\n    std::mt19937 g(rd());\n    std::shuffle(shuffledList.begin(), shuffledList.end(), g);\n    return shuffledList;\n}\n\nint main() {\n    std::vector<int> myList = {1, 2, 3, 4, 5};\n    std::vector<int> shuffled = shuffleList(myList);\n    for (int num : shuffled) {\n        std::cout << num << \" \";\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Create a list of tuples where each tuple contains a number and its square.",
    "code": "```cpp\n#include <iostream>\n#include <list>\n#include <utility>\n\nint main() {\n    std::list<std::pair<int, int>> numSquares;\n\n    for (int i = 1; i <= 10; ++i) {\n        numSquares.emplace_back(i, i * i);\n    }\n\n    for (const auto& [num, square] : numSquares) {\n        std::cout << \"Number: \" << num << \", Square: \" << square << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program to multiply all elements in a list by a given factor.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<int> numbers = {1, 2, 3, 4, 5}; // Example list\n    int factor = 3; // Example factor\n\n    for (int& number : numbers) {\n        number *= factor;\n    }\n\n    for (const int& number : numbers) {\n        std::cout << number << \" \";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function that flattens a nested list.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nstd::vector<int> flatten(const std::vector<std::vector<int>>& nestedList) {\n    std::vector<int> flatList;\n    for (const auto& sublist : nestedList) {\n        flatList.insert(flatList.end(), sublist.begin(), sublist.end());\n    }\n    return flatList;\n}\n\nint main() {\n    std::vector<std::vector<int>> nestedList = {{1, 2}, {3, 4, 5}, {6}};\n    std::vector<int> flatList = flatten(nestedList);\n    \n    for (int num : flatList) {\n        std::cout << num << \" \";\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Create a list of dates and sort them chronologically.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <string>\n#include <sstream>\n#include <iomanip>\n\nstruct Date {\n    int year, month, day;\n\n    bool operator<(const Date& other) const {\n        if (year != other.year) return year < other.year;\n        if (month != other.month) return month < other.month;\n        return day < other.day;\n    }\n};\n\nstd::ostream& operator<<(std::ostream& os, const Date& date) {\n    os << std::setw(4) << date.year << \"-\"\n       << std::setw(2) << std::setfill('0') << date.month << \"-\"\n       << std::setw(2) << std::setfill('0') << date.day;\n    return os;\n}\n\nDate parseDate(const std::string& dateStr) {\n    std::istringstream stream(dateStr);\n    Date date;\n    char dash;\n    stream >> date.year >> dash >> date.month >> dash >> date.day;\n    return date;\n}\n\nint main() {\n    std::vector<Date> dates = {\n        parseDate(\"2023-10-05\"),\n        parseDate(\"2022-01-15\"),\n        parseDate(\"2023-04-25\"),\n        parseDate(\"2021-12-01\")\n    };\n\n    std::sort(dates.begin(), dates.end());\n\n    for (const Date& date : dates) {\n        std::cout << date << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that finds the index of the first occurrence of a given element in a list.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nint findFirstOccurrence(const std::vector<int>& list, int element) {\n    for (size_t i = 0; i < list.size(); ++i) {\n        if (list[i] == element) {\n            return i;\n        }\n    }\n    return -1;\n}\n\nint main() {\n    std::vector<int> myList = {1, 2, 3, 4, 5, 3};\n    int element = 3;\n    int index = findFirstOccurrence(myList, element);\n\n    std::cout << \"The first occurrence of \" << element << \" is at index: \" << index << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Generate a list of Fibonacci numbers up to a specified limit.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nstd::vector<int> generateFibonacci(int limit) {\n    std::vector<int> fibonacciList;\n    if (limit < 0) return fibonacciList;\n    \n    int a = 0, b = 1;\n    fibonacciList.push_back(a);\n    if (limit == 0) return fibonacciList;\n    \n    while (b <= limit) {\n        fibonacciList.push_back(b);\n        int next = a + b;\n        a = b;\n        b = next;\n    }\n    \n    return fibonacciList;\n}\n\nint main() {\n    int limit;\n    std::cout << \"Enter the limit: \";\n    std::cin >> limit;\n    \n    std::vector<int> fibonacciList = generateFibonacci(limit);\n    std::cout << \"Fibonacci numbers up to \" << limit << \" are: \";\n    for (int num : fibonacciList) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Create a list of booleans and determine if all are True.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nint main() {\n    std::vector<bool> boolList = {true, true, false, true};\n    bool allTrue = std::all_of(boolList.begin(), boolList.end(), [](bool b) { return b; });\n\n    if (allTrue) {\n        std::cout << \"All are True\" << std::endl;\n    } else {\n        std::cout << \"Not all are True\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program to concatenate two lists.",
    "code": "```cpp\n#include <iostream>\n#include <list>\n\nint main() {\n    std::list<int> list1 = {1, 2, 3, 4, 5};\n    std::list<int> list2 = {6, 7, 8, 9, 10};\n\n    list1.insert(list1.end(), list2.begin(), list2.end());\n\n    for (int n : list1) {\n        std::cout << n << \" \";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function that returns the length of a list without using built-in functions.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nint listLength(const std::vector<int>& list) {\n    int length = 0;\n    for (auto it = list.begin(); it != list.end(); ++it) {\n        ++length;\n    }\n    return length;\n}\n\nint main() {\n    std::vector<int> myList = {1, 2, 3, 4, 5};\n    std::cout << \"Length of the list: \" << listLength(myList) << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Create a list of words and find the longest word.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n\nint main() {\n    std::vector<std::string> words = {\"apple\", \"banana\", \"strawberry\", \"orange\", \"kiwi\"};\n    std::string longestWord = \"\";\n\n    for (const auto& word : words) {\n        if (word.length() > longestWord.length()) {\n            longestWord = word;\n        }\n    }\n\n    std::cout << \"The longest word is: \" << longestWord << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that takes a list and a predicate function, returning a list of elements that satisfy the predicate.",
    "code": "```cpp\n#include <vector>\n#include <functional>\n\nstd::vector<int> filterList(const std::vector<int>& list, std::function<bool(int)> predicate) {\n    std::vector<int> result;\n    for (int elem : list) {\n        if (predicate(elem)) {\n            result.push_back(elem);\n        }\n    }\n    return result;\n}\n```"
  },
  {
    "task": "Generate a list of strings and filter out those with less than 5 characters.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n\nint main() {\n    std::vector<std::string> strings = {\"apple\", \"banana\", \"kiwi\", \"pear\", \"peach\"};\n    std::vector<std::string> filteredStrings;\n\n    for (const auto& str : strings) {\n        if (str.length() >= 5) {\n            filteredStrings.push_back(str);\n        }\n    }\n\n    for (const auto& str : filteredStrings) {\n        std::cout << str << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a list of mixed data types and separate them into lists by type.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n\nint main() {\n    // Mixed data list\n    std::vector<std::pair<std::string, std::string>> mixedData = {\n        {\"int\", \"42\"}, {\"double\", \"3.14\"}, {\"string\", \"hello\"}, {\"int\", \"7\"},\n        {\"string\", \"world\"}, {\"double\", \"2.71\"}\n    };\n\n    // Separate lists by type\n    std::vector<int> intList;\n    std::vector<double> doubleList;\n    std::vector<std::string> stringList;\n\n    for (const auto& item : mixedData) {\n        if (item.first == \"int\") {\n            intList.push_back(std::stoi(item.second));\n        } else if (item.first == \"double\") {\n            doubleList.push_back(std::stod(item.second));\n        } else if (item.first == \"string\") {\n            stringList.push_back(item.second);\n        }\n    }\n\n    // Output the separated lists\n    std::cout << \"Int list: \";\n    for (int i : intList) {\n        std::cout << i << \" \";\n    }\n    std::cout << std::endl;\n\n    std::cout << \"Double list: \";\n    for (double d : doubleList) {\n        std::cout << d << \" \";\n    }\n    std::cout << std::endl;\n\n    std::cout << \"String list: \";\n    for (const std::string& s : stringList) {\n        std::cout << s << \" \";\n    }\n    std::cout << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program to find the common elements between two lists.",
    "code": "```cpp\n#include <iostream>\n#include <list>\n#include <algorithm>\n\nint main() {\n    std::list<int> list1 = {1, 2, 3, 4, 5};\n    std::list<int> list2 = {4, 5, 6, 7, 8};\n\n    std::list<int> common_elements;\n\n    for (auto &elem1 : list1) {\n        if (std::find(list2.begin(), list2.end(), elem1) != list2.end()) {\n            common_elements.push_back(elem1);\n        }\n    }\n\n    for (auto &elem : common_elements) {\n        std::cout << elem << \" \";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function to rotate the elements of a list to the left by a given number of steps.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nstd::vector<int> rotateLeft(const std::vector<int>& nums, int steps) {\n    int n = nums.size();\n    if (n == 0) return nums;\n    steps %= n;\n    std::vector<int> rotated(nums.begin() + steps, nums.end());\n    rotated.insert(rotated.end(), nums.begin(), nums.begin() + steps);\n    return rotated;\n}\n\nint main() {\n    std::vector<int> nums = {1, 2, 3, 4, 5};\n    int steps = 2;\n    std::vector<int> result = rotateLeft(nums, steps);\n    for (int num : result) {\n        std::cout << num << \" \";\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Create a list of numbers and find the product of all the elements.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<int> numbers = {1, 2, 3, 4, 5};\n    int product = 1;\n    \n    for (int num : numbers) {\n        product *= num;\n    }\n    \n    std::cout << \"Product of all elements: \" << product << std::endl;\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that removes all occurrences of a specified element from a list.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nvoid removeElement(std::vector<int>& list, int element) {\n    list.erase(std::remove(list.begin(), list.end(), element), list.end());\n}\n\nint main() {\n    std::vector<int> numbers = {1, 2, 3, 4, 2, 5, 2, 6};\n    int elementToRemove = 2;\n    \n    removeElement(numbers, elementToRemove);\n    \n    for (int num : numbers) {\n        std::cout << num << \" \";\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Generate a list of random numbers and find the median value.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cstdlib>\n#include <ctime>\n\nint main() {\n    std::srand(std::time(0));\n    std::vector<int> numbers;\n\n    // Generate a list of random numbers\n    for(int i = 0; i < 10; ++i) {\n        numbers.push_back(std::rand() % 100); // Random numbers between 0 and 99\n    }\n\n    // Sort the list to find the median\n    std::sort(numbers.begin(), numbers.end());\n\n    // Calculate the median\n    double median;\n    size_t size = numbers.size();\n    if (size % 2 == 0) {\n        median = (numbers[size / 2 - 1] + numbers[size / 2]) / 2.0;\n    } else {\n        median = numbers[size / 2];\n    }\n\n    // Output the median\n    std::cout << \"Median: \" << median << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a list of dictionaries and sort them by a specific key.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <map>\n#include <algorithm>\n\nint main() {\n    // Create a list of dictionaries (vector of maps)\n    std::vector<std::map<std::string, int>> listOfDicts = {\n        {{\"key1\", 5}, {\"key2\", 10}}, \n        {{\"key1\", 3}, {\"key2\", 7}}, \n        {{\"key1\", 8}, {\"key2\", 6}}\n    };\n\n    // Sort the list of dictionaries by a specific key (\"key1\")\n    std::sort(listOfDicts.begin(), listOfDicts.end(), [](const std::map<std::string, int> &a, const std::map<std::string, int> &b) {\n        return a.at(\"key1\") < b.at(\"key1\");\n    });\n\n    // Output the sorted list\n    for (const auto &dict : listOfDicts) {\n        std::cout << \"{\";\n        for (const auto &pair : dict) {\n            std::cout << pair.first << \": \" << pair.second << \", \";\n        }\n        std::cout << \"}\\n\";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program to split a list into chunks of a specified size.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nstd::vector<std::vector<int>> splitIntoChunks(const std::vector<int>& list, int chunkSize) {\n    std::vector<std::vector<int>> chunks;\n    for (size_t i = 0; i < list.size(); i += chunkSize) {\n        std::vector<int> chunk(list.begin() + i, list.begin() + std::min(list.size(), i + chunkSize));\n        chunks.push_back(chunk);\n    }\n    return chunks;\n}\n\nint main() {\n    std::vector<int> list = {1, 2, 3, 4, 5, 6, 7, 8, 9};\n    int chunkSize = 3;\n    std::vector<std::vector<int>> chunks = splitIntoChunks(list, chunkSize);\n\n    for (const auto& chunk : chunks) {\n        for (int num : chunk) {\n            std::cout << num << ' ';\n        }\n        std::cout << '\\n';\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function that takes a list and returns a dictionary with the frequency of each element.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <unordered_map>\n\nstd::unordered_map<int, int> frequencyCount(const std::vector<int>& list) {\n    std::unordered_map<int, int> frequency;\n    for (int num : list) {\n        frequency[num]++;\n    }\n    return frequency;\n}\n\nint main() {\n    std::vector<int> list = {1, 2, 2, 3, 3, 3, 4};\n    std::unordered_map<int, int> result = frequencyCount(list);\n\n    for (const auto& pair : result) {\n        std::cout << pair.first << \": \" << pair.second << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a list of integers and replace all negative numbers with zero.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<int> numbers = {1, -2, 3, -4, 5};\n\n    for (auto& num : numbers) {\n        if (num < 0) {\n            num = 0;\n        }\n    }\n\n    for (const auto& num : numbers) {\n        std::cout << num << \" \";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that returns the first n elements of a list.",
    "code": "```cpp\n#include <vector>\n\nstd::vector<int> getFirstNElements(const std::vector<int>& list, int n) {\n    if (n > list.size()) {\n        n = list.size();\n    }\n    return std::vector<int>(list.begin(), list.begin() + n);\n}\n```"
  },
  {
    "task": "Generate a list of strings and join them into a single string with spaces.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\n\nint main() {\n    std::vector<std::string> stringList = {\"This\", \"is\", \"a\", \"list\", \"of\", \"strings\"};\n    std::ostringstream joinedString;\n    \n    for (size_t i = 0; i < stringList.size(); ++i) {\n        if (i != 0) {\n            joinedString << \" \";\n        }\n        joinedString << stringList[i];\n    }\n\n    std::cout << joinedString.str() << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a list of lists and find the sum of each inner list.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<std::vector<int>> listOfLists = {\n        {1, 2, 3},\n        {4, 5, 6},\n        {7, 8, 9}\n    };\n\n    for (const auto& innerList : listOfLists) {\n        int sum = 0;\n        for (int num : innerList) {\n            sum += num;\n        }\n        std::cout << \"Sum of inner list: \" << sum << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that finds the second largest number in a list.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <limits>\n\nint findSecondLargest(const std::vector<int>& nums) {\n    if (nums.size() < 2) return std::numeric_limits<int>::min();\n    \n    int first = std::numeric_limits<int>::min();\n    int second = std::numeric_limits<int>::min();\n\n    for (int num : nums) {\n        if (num > first) {\n            second = first;\n            first = num;\n        } else if (num > second && num < first) {\n            second = num;\n        }\n    }\n    return second;\n}\n\nint main() {\n    std::vector<int> nums = {4, 1, 3, 2, 5};\n    int result = findSecondLargest(nums);\n    std::cout << \"The second largest number is: \" << result << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Generate a list of numbers and remove the duplicates while maintaining order.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <unordered_set>\n\nstd::vector<int> removeDuplicates(const std::vector<int>& nums) {\n    std::vector<int> result;\n    std::unordered_set<int> seen;\n\n    for (int num : nums) {\n        if (seen.find(num) == seen.end()) {\n            result.push_back(num);\n            seen.insert(num);\n        }\n    }\n\n    return result;\n}\n\nint main() {\n    std::vector<int> nums = {1, 2, 2, 3, 4, 4, 5};\n    std::vector<int> uniqueNums = removeDuplicates(nums);\n\n    for (int num : uniqueNums) {\n        std::cout << num << \" \";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a list of integers and partition it into two lists: one with numbers above the average and one below.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <numeric>\n\nint main() {\n    std::vector<int> numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n    double average = std::accumulate(numbers.begin(), numbers.end(), 0.0) / numbers.size();\n\n    std::vector<int> aboveAverage;\n    std::vector<int> belowAverage;\n\n    for (int num : numbers) {\n        if (num > average) {\n            aboveAverage.push_back(num);\n        } else {\n            belowAverage.push_back(num);\n        }\n    }\n\n    std::cout << \"Above Average: \";\n    for (int num : aboveAverage) {\n        std::cout << num << \" \";\n    }\n    std::cout << \"\\nBelow Average: \";\n    for (int num : belowAverage) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program to find the longest increasing subsequence in a list of numbers.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nint lengthOfLIS(const std::vector<int>& nums) {\n    std::vector<int> dp;\n    for (const auto& num : nums) {\n        auto it = std::lower_bound(dp.begin(), dp.end(), num);\n        if (it == dp.end()) {\n            dp.push_back(num);\n        } else {\n            *it = num;\n        }\n    }\n    return dp.size();\n}\n\nint main() {\n    std::vector<int> nums = {10, 9, 2, 5, 3, 7, 101, 18};\n    int lis_length = lengthOfLIS(nums);\n    std::cout << \"Length of Longest Increasing Subsequence: \" << lis_length << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function to zip two lists into a single list of tuples.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <tuple>\n\nstd::vector<std::tuple<int, int>> zip(const std::vector<int>& list1, const std::vector<int>& list2) {\n    std::vector<std::tuple<int, int>> zippedList;\n    size_t minLength = std::min(list1.size(), list2.size());\n    for (size_t i = 0; i < minLength; ++i) {\n        zippedList.emplace_back(list1[i], list2[i]);\n    }\n    return zippedList;\n}\n\nint main() {\n    std::vector<int> list1 = {1, 2, 3};\n    std::vector<int> list2 = {4, 5, 6};\n    std::vector<std::tuple<int, int>> result = zip(list1, list2);\n\n    for (const auto& pair : result) {\n        std::cout << \"(\" << std::get<0>(pair) << \", \" << std::get<1>(pair) << \") \";\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Create a list of characters and count the vowels.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<char> charList = {'a', 'b', 'c', 'e', 'i', 'o', 'u', 'x', 'y', 'z'};\n    int vowelCount = 0;\n    std::vector<char> vowels = {'a', 'e', 'i', 'o', 'u'};\n\n    for (char c : charList) {\n        if (std::find(vowels.begin(), vowels.end(), c) != vowels.end()) {\n            vowelCount++;\n        }\n    }\n\n    std::cout << \"Number of vowels: \" << vowelCount << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that returns the last n elements of a list.",
    "code": "```cpp\n#include <vector>\n\nstd::vector<int> lastNElements(const std::vector<int>& list, int n) {\n    if (n <= 0 || n > list.size()) {\n        return {};\n    }\n    return std::vector<int>(list.end() - n, list.end());\n}\n```"
  },
  {
    "task": "Generate a list of numbers and split it into two lists: one with positive numbers and one with negative numbers.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<int> numbers = {4, -1, 7, -3, 0, 5, -8, 2};\n    std::vector<int> positiveNumbers;\n    std::vector<int> negativeNumbers;\n\n    for (int number : numbers) {\n        if (number > 0) {\n            positiveNumbers.push_back(number);\n        } else if (number < 0) {\n            negativeNumbers.push_back(number);\n        }\n    }\n\n    std::cout << \"Positive numbers: \";\n    for (int num : positiveNumbers) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n\n    std::cout << \"Negative numbers: \";\n    for (int num : negativeNumbers) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a list of random integers and find the mode.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <unordered_map>\n#include <cstdlib>\n#include <ctime>\n\nint main() {\n    std::srand(std::time(0));\n\n    std::vector<int> numbers(100);\n    for (int &num : numbers) {\n        num = std::rand() % 100; // Random numbers between 0 and 99\n    }\n\n    std::unordered_map<int, int> frequency;\n    for (int num : numbers) {\n        ++frequency[num];\n    }\n\n    int mode = numbers[0];\n    int max_count = 0;\n    for (const auto &pair : frequency) {\n        if (pair.second > max_count) {\n            max_count = pair.second;\n            mode = pair.first;\n        }\n    }\n\n    std::cout << \"Mode: \" << mode << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program to find the shortest path in a grid using a list to represent the path.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <queue>\n#include <list>\n\nusing namespace std;\n\nstruct Point {\n    int x, y;\n    Point(int _x, int _y) : x(_x), y(_y) {}\n};\n\nbool isValid(int x, int y, int rows, int cols, vector<vector<bool>> &visited) {\n    return (x >= 0 && x < rows && y >= 0 && y < cols && !visited[x][y]);\n}\n\nlist<Point> findShortestPath(vector<vector<int>> &grid, Point start, Point end) {\n    int rows = grid.size();\n    int cols = grid[0].size();\n    vector<vector<bool>> visited(rows, vector<bool>(cols, false));\n    vector<vector<Point>> parent(rows, vector<Point>(cols, Point(-1, -1)));\n    \n    int dx[] = {-1, 1, 0, 0};\n    int dy[] = {0, 0, -1, 1};\n    \n    queue<Point> q;\n    q.push(start);\n    visited[start.x][start.y] = true;\n    \n    while (!q.empty()) {\n        Point curr = q.front();\n        q.pop();\n        \n        if (curr.x == end.x && curr.y == end.y) {\n            list<Point> path;\n            for (Point at = end; at.x != -1; at = parent[at.x][at.y]) {\n                path.push_front(at);\n            }\n            return path;\n        }\n        \n        for (int i = 0; i < 4; i++) {\n            int newX = curr.x + dx[i];\n            int newY = curr.y + dy[i];\n            \n            if (isValid(newX, newY, rows, cols, visited) && grid[newX][newY] == 0) {\n                visited[newX][newY] = true;\n                parent[newX][newY] = curr;\n                q.push(Point(newX, newY));\n            }\n        }\n    }\n    return list<Point>();\n}\n\nint main() {\n    vector<vector<int>> grid = {\n        {0, 0, 0, 0},\n        {1, 1, 0, 1},\n        {0, 0, 0, 0},\n        {0, 1, 1, 0},\n        {0, 0, 0, 0}\n    };\n    \n    Point start(0, 0);\n    Point end(4, 3);\n    \n    list<Point> path = findShortestPath(grid, start, end);\n    \n    if (!path.empty()) {\n        for (const Point &p : path) {\n            cout << \"(\" << p.x << \", \" << p.y << \") \";\n        }\n        cout << endl;\n    } else {\n        cout << \"No path found\" << endl;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function that takes a list and returns a list with elements doubled.",
    "code": "```cpp\n#include <vector>\n\nstd::vector<int> doubleElements(const std::vector<int>& inputList) {\n    std::vector<int> result;\n    for (int num : inputList) {\n        result.push_back(num * 2);\n    }\n    return result;\n}\n```"
  },
  {
    "task": "Create a list of integers and sort them in descending order.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nint main() {\n    std::vector<int> list = {5, 2, 9, 1, 5, 6};\n    std::sort(list.begin(), list.end(), std::greater<int>());\n    \n    for (int num : list) {\n        std::cout << num << \" \";\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that takes a list of intervals and merges overlapping intervals.",
    "code": "```cpp\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvector<pair<int, int>> mergeIntervals(vector<pair<int, int>>& intervals) {\n    if (intervals.empty()) return {};\n\n    sort(intervals.begin(), intervals.end());\n    vector<pair<int, int>> merged;\n    merged.push_back(intervals[0]);\n\n    for (const auto& interval : intervals) {\n        if (merged.back().second >= interval.first) {\n            merged.back().second = max(merged.back().second, interval.second);\n        } else {\n            merged.push_back(interval);\n        }\n    }\n\n    return merged;\n}\n```"
  },
  {
    "task": "Generate a list of random numbers and find the range (difference between max and min).",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <cstdlib>\n#include <ctime>\n#include <algorithm>\n\nint main() {\n    std::srand(static_cast<unsigned int>(std::time(0)));\n    std::vector<int> numbers;\n    for (int i = 0; i < 10; ++i) {\n        numbers.push_back(std::rand() % 100);\n    }\n\n    auto min_max = std::minmax_element(numbers.begin(), numbers.end());\n    int range = *min_max.second - *min_max.first;\n\n    std::cout << \"Range: \" << range << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Create a list of strings and remove any that are palindromes.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nbool isPalindrome(const std::string& str) {\n    return std::equal(str.begin(), str.begin() + str.size() / 2, str.rbegin());\n}\n\nint main() {\n    std::vector<std::string> strings = {\"level\", \"world\", \"radar\", \"hello\", \"deified\"};\n    \n    strings.erase(std::remove_if(strings.begin(), strings.end(), isPalindrome), strings.end());\n    \n    for (const auto& str : strings) {\n        std::cout << str << std::endl;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Write a program to cyclically permute the elements of a list.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nvoid cyclicallyPermute(std::vector<int>& list) {\n    if (list.empty()) return;\n    int temp = list.back();\n    for (int i = list.size() - 1; i > 0; --i) {\n        list[i] = list[i - 1];\n    }\n    list[0] = temp;\n}\n\nint main() {\n    std::vector<int> list = {1, 2, 3, 4, 5};\n    cyclicallyPermute(list);\n    \n    for (int num : list) {\n        std::cout << num << \" \";\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function to create a list of cumulative sums from a list of numbers.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nstd::vector<int> cumulativeSums(const std::vector<int>& numbers) {\n    std::vector<int> result;\n    int sum = 0;\n    for (const int& num : numbers) {\n        sum += num;\n        result.push_back(sum);\n    }\n    return result;\n}\n\nint main() {\n    std::vector<int> numbers = {1, 2, 3, 4, 5};\n    std::vector<int> result = cumulativeSums(numbers);\n\n    for (const int& num : result) {\n        std::cout << num << \" \";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a list of numbers and shift all zeros to the end.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<int> numbers = {0, 1, 0, 3, 12};\n    int n = numbers.size();\n    int lastNonZeroFoundAt = 0;\n\n    for (int i = 0; i < n; ++i) {\n        if (numbers[i] != 0) {\n            numbers[lastNonZeroFoundAt++] = numbers[i];\n        }\n    }\n\n    for (int i = lastNonZeroFoundAt; i < n; ++i) {\n        numbers[i] = 0;\n    }\n\n    for (int num : numbers) {\n        std::cout << num << \" \";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program to simulate a queue using a list.",
    "code": "```cpp\n#include <iostream>\n#include <list>\n\nint main() {\n    std::list<int> queue;\n    \n    // Enqueue elements\n    queue.push_back(10);\n    queue.push_back(20);\n    queue.push_back(30);\n\n    // Display the queue\n    std::cout << \"Queue: \";\n    for(int num : queue) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n    \n    // Dequeue elements\n    if (!queue.empty()) {\n        queue.pop_front();\n    }\n\n    // Display the queue after dequeue operation\n    std::cout << \"Queue after dequeue: \";\n    for(int num : queue) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Generate a list of numbers and identify all prime numbers.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <cmath>\n\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (int i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) return false;\n    }\n    return true;\n}\n\nint main() {\n    std::vector<int> numbers;\n    std::vector<int> primes;\n    \n    for (int i = 1; i <= 100; ++i) {\n        numbers.push_back(i);\n    }\n    \n    for (int num : numbers) {\n        if (isPrime(num)) {\n            primes.push_back(num);\n        }\n    }\n\n    std::cout << \"Prime numbers: \";\n    for (int prime : primes) {\n        std::cout << prime << \" \";\n    }\n    std::cout << std::endl;\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Create a list of strings and group them by their starting letter.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <map>\n#include <string>\n\nint main() {\n    std::vector<std::string> words = {\"apple\", \"apricot\", \"banana\", \"blueberry\", \"cherry\", \"cantaloupe\"};\n    std::map<char, std::vector<std::string>> groupedWords;\n\n    for (const auto& word : words) {\n        char startingLetter = word[0];\n        groupedWords[startingLetter].push_back(word);\n    }\n\n    for (const auto& pair : groupedWords) {\n        std::cout << pair.first << \": \";\n        for (const auto& word : pair.second) {\n            std::cout << word << \" \";\n        }\n        std::cout << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that takes a list and returns a new list with all elements squared.",
    "code": "```cpp\n#include <vector>\n\nstd::vector<int> squareList(const std::vector<int>& inputList) {\n    std::vector<int> squaredList;\n    for (int num : inputList) {\n        squaredList.push_back(num * num);\n    }\n    return squaredList;\n}\n```"
  },
  {
    "task": "Generate a list of timestamps and find the time difference between consecutive elements.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <chrono>\n\nint main() {\n    // Generate a list of timestamps\n    std::vector<std::chrono::system_clock::time_point> timestamps;\n    for (int i = 0; i < 5; ++i) {\n        timestamps.push_back(std::chrono::system_clock::now());\n        std::this_thread::sleep_for(std::chrono::seconds(1)); // Simulate time passing\n    }\n\n    // Find time difference between consecutive elements\n    for (size_t i = 1; i < timestamps.size(); ++i) {\n        auto duration = std::chrono::duration_cast<std::chrono::seconds>(timestamps[i] - timestamps[i - 1]);\n        std::cout << \"Difference between element \" << i << \" and \" << i - 1 << \": \" \n                  << duration.count() << \" seconds\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a list of numbers and rotate it such that the smallest number is first.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nint main() {\n    std::vector<int> numbers = {4, 2, 5, 1, 3};\n    auto it = std::min_element(numbers.begin(), numbers.end());\n    std::rotate(numbers.begin(), it, numbers.end());\n\n    for (int num : numbers) {\n        std::cout << num << \" \";\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program to find all unique pairs in a list that sum up to a specific target.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <unordered_set>\n#include <set>\n\nint main() {\n    std::vector<int> nums = {2, 4, 3, 5, 7, -1, 0, 1};\n    int target = 6;\n    std::set<std::pair<int, int>> uniquePairs;\n    std::unordered_set<int> seen;\n\n    for (int num : nums) {\n        int complement = target - num;\n        if (seen.find(complement) != seen.end()) {\n            int lower = std::min(num, complement);\n            int higher = std::max(num, complement);\n            uniquePairs.insert({lower, higher});\n        }\n        seen.insert(num);\n    }\n\n    for (const auto& pair : uniquePairs) {\n        std::cout << \"(\" << pair.first << \", \" << pair.second << \")\\n\";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function that returns true if a list contains a cycle.",
    "code": "```cpp\n#include <vector>\n\nbool hasCycle(const std::vector<int>& list) {\n    if (list.empty()) return false;\n    int slow = 0, fast = 0;\n    while (true) {\n        slow++;\n        fast += 2;\n        if (fast >= list.size() || slow >= list.size()) return false;\n        if (list[slow] == list[fast]) return true;\n    }\n}\n```"
  },
  {
    "task": "Create a list of numbers and find the contiguous subarray with the maximum sum.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nint maxSubArray(const std::vector<int>& nums) {\n    int maxSum = nums[0];\n    int currentSum = nums[0];\n    for (size_t i = 1; i < nums.size(); ++i) {\n        currentSum = std::max(nums[i], currentSum + nums[i]);\n        maxSum = std::max(maxSum, currentSum);\n    }\n    return maxSum;\n}\n\nint main() {\n    std::vector<int> numbers = {-2, 1, -3, 4, -1, 2, 1, -5, 4};\n    int result = maxSubArray(numbers);\n    std::cout << \"Maximum subarray sum is \" << result << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that takes a list and a number, and finds two numbers in the list that sum to the given number.",
    "code": "```cpp\n#include <vector>\n#include <unordered_map>\n#include <utility>\n\nstd::pair<int, int> findTwoSum(const std::vector<int>& nums, int target) {\n    std::unordered_map<int, int> num_map;\n    for (int i = 0; i < nums.size(); ++i) {\n        int complement = target - nums[i];\n        if (num_map.find(complement) != num_map.end()) {\n            return std::make_pair(nums[num_map[complement]], nums[i]);\n        }\n        num_map[nums[i]] = i;\n    }\n    return std::make_pair(-1, -1); // Return a pair of -1 if no solution is found\n}\n```"
  },
  {
    "task": "Generate a list of even numbers and filter out those that are greater than a specific value.",
    "code": "```cpp\n#include <iostream>\n#include <list>\n#include <algorithm>\n\nint main() {\n    std::list<int> numbers;\n    const int maxValue = 10; // specific value to filter out numbers greater than this\n\n    // Generate list of even numbers\n    for (int i = 0; i <= 20; i += 2) {\n        numbers.push_back(i);\n    }\n\n    // Filter out numbers greater than maxValue\n    numbers.remove_if([maxValue](int n) { return n > maxValue; });\n\n    // Output the filtered list\n    for (int n : numbers) {\n        std::cout << n << \" \";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a list of characters and reverse the vowels only.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nbool isVowel(char c) {\n    char lower = std::tolower(c);\n    return lower == 'a' || lower == 'e' || lower == 'i' || lower == 'o' || lower == 'u';\n}\n\nvoid reverseVowels(std::vector<char>& chars) {\n    std::vector<int> vowelIndices;\n    for (int i = 0; i < chars.size(); ++i) {\n        if (isVowel(chars[i])) {\n            vowelIndices.push_back(i);\n        }\n    }\n    int left = 0, right = vowelIndices.size() - 1;\n    while (left < right) {\n        std::swap(chars[vowelIndices[left]], chars[vowelIndices[right]]);\n        ++left;\n        --right;\n    }\n}\n\nint main() {\n    std::vector<char> chars = {'h', 'e', 'l', 'l', 'o', ' ', 'w', 'o', 'r', 'l', 'd'};\n    reverseVowels(chars);\n    for (char c : chars) {\n        std::cout << c;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program to find all permutations of a list of elements.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nvoid printPermutations(std::vector<int> &nums) {\n    do {\n        for (int num : nums) {\n            std::cout << num << \" \";\n        }\n        std::cout << std::endl;\n    } while (std::next_permutation(nums.begin(), nums.end()));\n}\n\nint main() {\n    std::vector<int> elements = {1, 2, 3};\n    std::sort(elements.begin(), elements.end());\n    printPermutations(elements);\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function that takes a list and returns the most frequently occurring element.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <unordered_map>\n\nint mostFrequentElement(const std::vector<int>& nums) {\n    std::unordered_map<int, int> frequency;\n    for (int num : nums) {\n        frequency[num]++;\n    }\n    int maxCount = 0;\n    int mostFrequent = nums[0];\n    for (const auto& pair : frequency) {\n        if (pair.second > maxCount) {\n            maxCount = pair.second;\n            mostFrequent = pair.first;\n        }\n    }\n    return mostFrequent;\n}\n\nint main() {\n    std::vector<int> nums = {1, 3, 2, 3, 4, 3, 2, 1, 3};\n    std::cout << \"Most frequent element: \" << mostFrequentElement(nums) << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Create a list of numbers and calculate the variance.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <numeric>\n#include <cmath>\n\nint main() {\n    std::vector<double> numbers = {1.0, 2.0, 3.0, 4.0, 5.0};\n    \n    double sum = std::accumulate(numbers.begin(), numbers.end(), 0.0);\n    double mean = sum / numbers.size();\n    \n    double variance = 0.0;\n    for(double num : numbers) {\n        variance += (num - mean) * (num - mean);\n    }\n    variance /= numbers.size();\n    \n    std::cout << \"Variance: \" << variance << std::endl;\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Write a function to concatenate a list of lists into a single list.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nstd::vector<int> concatenateLists(const std::vector<std::vector<int>>& listOfLists) {\n    std::vector<int> result;\n    for (const auto& lst : listOfLists) {\n        result.insert(result.end(), lst.begin(), lst.end());\n    }\n    return result;\n}\n\nint main() {\n    std::vector<std::vector<int>> listOfLists = {{1, 2, 3}, {4, 5}, {6, 7, 8, 9}};\n    std::vector<int> concatenatedList = concatenateLists(listOfLists);\n    \n    for (int num : concatenatedList) {\n        std::cout << num << \" \";\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Generate a list of numbers and replace each element with the product of all other elements.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<int> numbers = {1, 2, 3, 4, 5};\n    int n = numbers.size();\n    std::vector<int> result(n, 1);\n    \n    int leftProduct = 1;\n    for (int i = 0; i < n; ++i) {\n        result[i] = leftProduct;\n        leftProduct *= numbers[i];\n    }\n    \n    int rightProduct = 1;\n    for (int i = n - 1; i >= 0; --i) {\n        result[i] *= rightProduct;\n        rightProduct *= numbers[i];\n    }\n    \n    for (int i = 0; i < n; ++i) {\n        std::cout << result[i] << \" \";\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Create a list of strings and find the common prefix.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string findCommonPrefix(const std::vector<std::string>& strings) {\n    if (strings.empty()) return \"\";\n\n    std::string prefix = strings[0];\n    for (size_t i = 1; i < strings.size(); ++i) {\n        while (strings[i].find(prefix) != 0) {\n            prefix = prefix.substr(0, prefix.length() - 1);\n            if (prefix.empty()) return \"\";\n        }\n    }\n    return prefix;\n}\n\nint main() {\n    std::vector<std::string> strings = {\"flower\", \"flow\", \"flight\"};\n    std::string commonPrefix = findCommonPrefix(strings);\n    std::cout << \"Common prefix: \" << commonPrefix << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program to partition a list into two lists based on a predicate function.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nbool predicate(int value) {\n    return value % 2 == 0; // Example predicate: true if value is even\n}\n\nint main() {\n    std::vector<int> originalList = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n    std::vector<int> list1, list2;\n\n    for (int value : originalList) {\n        if (predicate(value)) {\n            list1.push_back(value);\n        } else {\n            list2.push_back(value);\n        }\n    }\n\n    std::cout << \"List 1: \";\n    for (int value : list1) {\n        std::cout << value << \" \";\n    }\n    std::cout << \"\\nList 2: \";\n    for (int value : list2) {\n        std::cout << value << \" \";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function to find the kth smallest element in a list.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nint findKthSmallest(std::vector<int>& nums, int k) {\n    std::sort(nums.begin(), nums.end());\n    return nums[k - 1];\n}\n\nint main() {\n    std::vector<int> nums = {3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5};\n    int k = 3;\n    int kthSmallest = findKthSmallest(nums, k);\n    std::cout << \"The \" << k << \"th smallest element is \" << kthSmallest << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Create a list of integers and find the length of the longest contiguous sequence.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nint longestContiguousSequence(const std::vector<int>& nums) {\n    if (nums.empty()) return 0;\n    \n    int maxLength = 1, currentLength = 1;\n    for (size_t i = 1; i < nums.size(); ++i) {\n        if (nums[i] == nums[i - 1] + 1) {\n            ++currentLength;\n        } else {\n            currentLength = 1;\n        }\n        maxLength = std::max(maxLength, currentLength);\n    }\n    return maxLength;\n}\n\nint main() {\n    std::vector<int> numbers = {1, 2, 2, 3, 4, 5, 7, 8, 9, 10};\n    std::cout << \"Length of the longest contiguous sequence: \" \n              << longestContiguousSequence(numbers) << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that rotates elements in a list while maintaining the relative order of non-rotated elements.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nstd::vector<int> rotateList(const std::vector<int>& input, int k) {\n    if (input.empty()) return input;\n    int n = input.size();\n    k = k % n; // Handle rotations greater than the length of the list\n    std::vector<int> result(n);\n    for (int i = 0; i < n; ++i) {\n        result[(i + k) % n] = input[i];\n    }\n    return result;\n}\n\nint main() {\n    std::vector<int> list = {1, 2, 3, 4, 5};\n    int k = 2; // Number of positions to rotate\n    std::vector<int> rotatedList = rotateList(list, k);\n    for (int val : rotatedList) {\n        std::cout << val << \" \";\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Generate a list of random numbers and sort them while maintaining the original index positions.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cstdlib>\n#include <ctime>\n\nint main() {\n    std::srand(std::time(nullptr)); // Use current time as seed for random generator\n\n    std::vector<std::pair<int, int>> numbers;\n    const int list_size = 10;\n    \n    // Generate random numbers and store them with their original indices\n    for (int i = 0; i < list_size; ++i) {\n        numbers.push_back({std::rand() % 100, i});\n    }\n\n    // Sort the numbers based on the values\n    std::sort(numbers.begin(), numbers.end(), [](const std::pair<int, int>& a, const std::pair<int, int>& b) {\n        return a.first < b.first;\n    });\n\n    // Output the sorted numbers with their original indices\n    for (const auto& num : numbers) {\n        std::cout << \"Value: \" << num.first << \", Original Index: \" << num.second << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a list of numbers and find all subsets that sum up to a specific target.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nvoid findSubsets(std::vector<int>& nums, std::vector<int>& current, int index, int target, std::vector<std::vector<int>>& result) {\n    if (target == 0) {\n        result.push_back(current);\n        return;\n    }\n    if (index >= nums.size() || target < 0) {\n        return;\n    }\n    \n    // Include the current number\n    current.push_back(nums[index]);\n    findSubsets(nums, current, index + 1, target - nums[index], result);\n    \n    // Exclude the current number\n    current.pop_back();\n    findSubsets(nums, current, index + 1, target, result);\n}\n\nstd::vector<std::vector<int>> subsetsThatSumToTarget(std::vector<int>& nums, int target) {\n    std::vector<std::vector<int>> result;\n    std::vector<int> current;\n    findSubsets(nums, current, 0, target, result);\n    return result;\n}\n\nint main() {\n    std::vector<int> nums = {1, 2, 3, 4, 5};\n    int target = 5;\n    std::vector<std::vector<int>> result = subsetsThatSumToTarget(nums, target);\n    \n    for (const auto& subset : result) {\n        for (int num : subset) {\n            std::cout << num << \" \";\n        }\n        std::cout << std::endl;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Write a program to simulate a stack using a list.",
    "code": "```cpp\n#include <iostream>\n#include <list>\n\nint main() {\n    std::list<int> stack;\n\n    // Push elements onto the stack\n    stack.push_back(10);\n    stack.push_back(20);\n    stack.push_back(30);\n\n    // Pop elements from the stack\n    while (!stack.empty()) {\n        std::cout << \"Top element: \" << stack.back() << std::endl;\n        stack.pop_back();\n    }\n\n    return 0;\n}\n```"
  }
]