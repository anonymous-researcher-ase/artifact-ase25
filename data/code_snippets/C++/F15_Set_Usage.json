[
  {
    "task": "Create a set to store unique usernames and demonstrate adding new ones.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n#include <string>\n\nint main() {\n    std::set<std::string> usernames;\n\n    // Adding new usernames\n    usernames.insert(\"user1\");\n    usernames.insert(\"user2\");\n    usernames.insert(\"user3\");\n\n    // Attempting to add duplicates\n    usernames.insert(\"user1\");\n    usernames.insert(\"user2\");\n\n    // Printing the usernames\n    for(const auto& username : usernames) {\n        std::cout << username << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that returns the union of two sets of integers.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n\nstd::set<int> unionOfSets(const std::set<int>& set1, const std::set<int>& set2) {\n    std::set<int> resultSet = set1;\n    resultSet.insert(set2.begin(), set2.end());\n    return resultSet;\n}\n```"
  },
  {
    "task": "Given two sets of strings, find their intersection.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n#include <string>\n\nint main() {\n    std::set<std::string> set1 = {\"apple\", \"banana\", \"cherry\"};\n    std::set<std::string> set2 = {\"banana\", \"cherry\", \"date\"};\n\n    std::set<std::string> intersection;\n    for (const auto& item : set1) {\n        if (set2.find(item) != set2.end()) {\n            intersection.insert(item);\n        }\n    }\n\n    for (const auto& item : intersection) {\n        std::cout << item << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a set to track visited web pages and check if a page has been visited.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n#include <string>\n\nint main() {\n    std::set<std::string> visitedPages;\n    \n    // Example: Adding some pages to the set\n    visitedPages.insert(\"https://example.com\");\n    visitedPages.insert(\"https://openai.com\");\n    \n    // Check if a page has been visited\n    std::string pageToCheck = \"https://example.com\";\n    if (visitedPages.find(pageToCheck) != visitedPages.end()) {\n        std::cout << pageToCheck << \" has been visited.\" << std::endl;\n    } else {\n        std::cout << pageToCheck << \" has not been visited.\" << std::endl;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Create a set from a list of numbers and remove duplicates.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n#include <vector>\n\nint main() {\n    std::vector<int> numbers = {1, 2, 3, 2, 4, 1, 5};\n    std::set<int> uniqueNumbers(numbers.begin(), numbers.end());\n\n    for (const int& num : uniqueNumbers) {\n        std::cout << num << \" \";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Check if a set is a subset of another set.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n\nbool isSubset(const std::set<int>& setA, const std::set<int>& setB) {\n    for (const int& elem : setA) {\n        if (setB.find(elem) == setB.end()) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint main() {\n    std::set<int> setA = {1, 2, 3};\n    std::set<int> setB = {1, 2, 3, 4, 5};\n\n    if (isSubset(setA, setB)) {\n        std::cout << \"Set A is a subset of Set B\" << std::endl;\n    } else {\n        std::cout << \"Set A is not a subset of Set B\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Demonstrate adding and removing elements from a set of book titles.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n#include <string>\n\nint main() {\n    std::set<std::string> bookTitles;\n\n    // Adding elements\n    bookTitles.insert(\"To Kill a Mockingbird\");\n    bookTitles.insert(\"1984\");\n    bookTitles.insert(\"The Great Gatsby\");\n    bookTitles.insert(\"The Catcher in the Rye\");\n\n    // Removing an element\n    bookTitles.erase(\"1984\");\n\n    // Display the elements\n    for (const auto& title : bookTitles) {\n        std::cout << title << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a set and show how to clear all its elements.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n\nint main() {\n    std::set<int> mySet = {1, 2, 3, 4, 5};\n    \n    // Clear all elements from the set\n    mySet.clear();\n    \n    // Check if the set is empty\n    if (mySet.empty()) {\n        std::cout << \"The set is empty.\" << std::endl;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Write a program to find the difference between two sets of employee IDs.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n\nint main() {\n    std::set<int> set1 = {101, 102, 103, 104, 105};\n    std::set<int> set2 = {104, 105, 106, 107, 108};\n\n    std::set<int> difference;\n\n    for (int id : set1) {\n        if (set2.find(id) == set2.end()) {\n            difference.insert(id);\n        }\n    }\n\n    std::cout << \"Difference between set1 and set2: \";\n    for (int id : difference) {\n        std::cout << id << \" \";\n    }\n    std::cout << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a set to store unique email addresses and check membership.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n#include <string>\n\nint main() {\n    std::set<std::string> emailSet;\n\n    // Example emails\n    emailSet.insert(\"example1@example.com\");\n    emailSet.insert(\"example2@example.com\");\n    emailSet.insert(\"example3@example.com\");\n\n    // Check membership\n    std::string emailToCheck = \"example2@example.com\";\n    if (emailSet.find(emailToCheck) != emailSet.end()) {\n        std::cout << emailToCheck << \" is in the set.\" << std::endl;\n    } else {\n        std::cout << emailToCheck << \" is not in the set.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Use a set to determine if two lists have any common elements.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n#include <vector>\n\nbool haveCommonElements(const std::vector<int>& list1, const std::vector<int>& list2) {\n    std::set<int> elementsSet(list1.begin(), list1.end());\n    for (const int& item : list2) {\n        if (elementsSet.find(item) != elementsSet.end()) {\n            return true;\n        }\n    }\n    return false;\n}\n\nint main() {\n    std::vector<int> list1 = {1, 2, 3, 4, 5};\n    std::vector<int> list2 = {6, 7, 8, 9, 5};\n    \n    if (haveCommonElements(list1, list2)) {\n        std::cout << \"The lists have common elements.\" << std::endl;\n    } else {\n        std::cout << \"The lists do not have common elements.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a set to represent a group of students and update it with new entries.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n#include <string>\n\nint main() {\n    std::set<std::string> students;\n\n    // Adding initial students\n    students.insert(\"Alice\");\n    students.insert(\"Bob\");\n    students.insert(\"Charlie\");\n\n    // Update with new entries\n    students.insert(\"David\");\n    students.insert(\"Eve\");\n\n    // Display all students\n    for (const auto& student : students) {\n        std::cout << student << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function to find symmetric difference between two sets of colors.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n#include <string>\n#include <algorithm>\n\nstd::set<std::string> symmetricDifference(const std::set<std::string>& set1, const std::set<std::string>& set2) {\n    std::set<std::string> result;\n    std::set_symmetric_difference(set1.begin(), set1.end(), set2.begin(), set2.end(), std::inserter(result, result.begin()));\n    return result;\n}\n\nint main() {\n    std::set<std::string> colors1 = {\"red\", \"green\", \"blue\"};\n    std::set<std::string> colors2 = {\"green\", \"yellow\", \"blue\", \"black\"};\n    \n    std::set<std::string> diff = symmetricDifference(colors1, colors2);\n    \n    for (const auto& color : diff) {\n        std::cout << color << \" \";\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Implement a set to store unique product codes and demonstrate iteration over it.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n\nint main() {\n    std::set<std::string> productCodes;\n\n    // Adding product codes to the set\n    productCodes.insert(\"P001\");\n    productCodes.insert(\"P002\");\n    productCodes.insert(\"P003\");\n    productCodes.insert(\"P002\"); // Duplicate entry, will not be added\n\n    // Iterating over the set\n    for (const auto& code : productCodes) {\n        std::cout << code << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a set and demonstrate the use of the `discard` method.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n\nint main() {\n    std::set<int> mySet = {1, 2, 3, 4, 5};\n\n    // Discard element '3' if it exists\n    mySet.erase(3);\n\n    // Display elements in the set\n    for (const int &element : mySet) {\n        std::cout << element << \" \";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Given a list of numbers, create a set and check if a specific number is present.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n#include <vector>\n\nint main() {\n    std::vector<int> numbers = {1, 2, 3, 4, 5};\n    std::set<int> numberSet(numbers.begin(), numbers.end());\n\n    int specificNumber = 3;\n    if (numberSet.find(specificNumber) != numberSet.end()) {\n        std::cout << \"Number is present in the set.\" << std::endl;\n    } else {\n        std::cout << \"Number is not present in the set.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Use a set to find all unique words in a sentence.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n#include <sstream>\n\nint main() {\n    std::string sentence = \"This is a test sentence with some duplicate words test words\";\n    std::set<std::string> uniqueWords;\n    std::istringstream stream(sentence);\n    std::string word;\n\n    while (stream >> word) {\n        uniqueWords.insert(word);\n    }\n\n    for (const auto& w : uniqueWords) {\n        std::cout << w << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a set from a sequence of characters and demonstrate set operations.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n\nint main() {\n    std::set<char> charSet = {'a', 'b', 'c', 'd', 'e'};\n\n    // Insert elements into the set\n    charSet.insert('f');\n    charSet.insert('g');\n\n    // Iterate and print the set elements\n    std::cout << \"Elements in the set: \";\n    for (char c : charSet) {\n        std::cout << c << ' ';\n    }\n    std::cout << std::endl;\n\n    // Check if an element is in the set\n    char checkChar = 'c';\n    if (charSet.find(checkChar) != charSet.end()) {\n        std::cout << checkChar << \" is in the set.\" << std::endl;\n    } else {\n        std::cout << checkChar << \" is not in the set.\" << std::endl;\n    }\n\n    // Remove an element from the set\n    charSet.erase('a');\n\n    // Print the set after removal\n    std::cout << \"Elements in the set after removal: \";\n    for (char c : charSet) {\n        std::cout << c << ' ';\n    }\n    std::cout << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function to merge two sets and return the result.",
    "code": "```cpp\n#include <set>\n\nstd::set<int> mergeSets(const std::set<int>& set1, const std::set<int>& set2) {\n    std::set<int> result(set1);\n    result.insert(set2.begin(), set2.end());\n    return result;\n}\n```"
  },
  {
    "task": "Implement a set to hold unique IP addresses and demonstrate basic operations.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n#include <string>\n\nint main() {\n    std::set<std::string> ipAddresses;\n\n    // Insert some IP addresses\n    ipAddresses.insert(\"192.168.1.1\");\n    ipAddresses.insert(\"10.0.0.1\");\n    ipAddresses.insert(\"172.16.0.1\");\n\n    // Attempt to insert a duplicate\n    ipAddresses.insert(\"192.168.1.1\");\n\n    // Display the IP addresses\n    std::cout << \"Unique IP addresses:\" << std::endl;\n    for (const auto& ip : ipAddresses) {\n        std::cout << ip << std::endl;\n    }\n\n    // Check for existence of an IP address\n    std::string ipToFind = \"10.0.0.1\";\n    if (ipAddresses.find(ipToFind) != ipAddresses.end()) {\n        std::cout << ipToFind << \" is in the set.\" << std::endl;\n    } else {\n        std::cout << ipToFind << \" is not in the set.\" << std::endl;\n    }\n\n    // Remove an IP address\n    ipAddresses.erase(\"172.16.0.1\");\n\n    // Display the IP addresses after removal\n    std::cout << \"IP addresses after removal:\" << std::endl;\n    for (const auto& ip : ipAddresses) {\n        std::cout << ip << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a set and demonstrate how to find the size of the set.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n\nint main() {\n    std::set<int> mySet = {1, 2, 3, 4, 5};\n    std::cout << \"Size of the set: \" << mySet.size() << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program to check if two sets of dates are disjoint.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n#include <string>\n\nint main() {\n    std::set<std::string> set1 = {\"2023-10-01\", \"2023-10-02\", \"2023-10-03\"};\n    std::set<std::string> set2 = {\"2023-10-04\", \"2023-10-05\", \"2023-10-06\"};\n\n    bool disjoint = true;\n    for (const auto& date : set1) {\n        if (set2.find(date) != set2.end()) {\n            disjoint = false;\n            break;\n        }\n    }\n\n    if (disjoint) {\n        std::cout << \"The sets are disjoint.\" << std::endl;\n    } else {\n        std::cout << \"The sets are not disjoint.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a set to manage a collection of tags and demonstrate addition and removal.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n#include <string>\n\nint main() {\n    std::set<std::string> tags;\n\n    // Adding tags\n    tags.insert(\"C++\");\n    tags.insert(\"Programming\");\n    tags.insert(\"Coding\");\n\n    // Display all tags\n    std::cout << \"Tags after addition: \";\n    for (const auto& tag : tags) {\n        std::cout << tag << \" \";\n    }\n    std::cout << std::endl;\n\n    // Removing a tag\n    tags.erase(\"Coding\");\n\n    // Display all tags after removal\n    std::cout << \"Tags after removal: \";\n    for (const auto& tag : tags) {\n        std::cout << tag << \" \";\n    }\n    std::cout << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a set to track unique inventory items in a store.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n#include <string>\n\nint main() {\n    std::set<std::string> inventory;\n\n    // Adding items to the inventory set\n    inventory.insert(\"Apple\");\n    inventory.insert(\"Banana\");\n    inventory.insert(\"Orange\");\n    inventory.insert(\"Apple\"); // Duplicate, won't be added\n\n    // Displaying the inventory items\n    std::cout << \"Inventory items: \" << std::endl;\n    for (const auto& item : inventory) {\n        std::cout << item << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a set of numbers and demonstrate conversion to a list.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n#include <list>\n\nint main() {\n    std::set<int> numberSet = {1, 2, 3, 4, 5};\n\n    std::list<int> numberList(numberSet.begin(), numberSet.end());\n\n    for (int num : numberList) {\n        std::cout << num << \" \";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that returns all elements present in either of two sets but not both.",
    "code": "```cpp\n#include <set>\n#include <vector>\n\nstd::vector<int> symmetricDifference(const std::set<int>& set1, const std::set<int>& set2) {\n    std::vector<int> result;\n    for (const int& elem : set1) {\n        if (set2.find(elem) == set2.end()) {\n            result.push_back(elem);\n        }\n    }\n    for (const int& elem : set2) {\n        if (set1.find(elem) == set1.end()) {\n            result.push_back(elem);\n        }\n    }\n    return result;\n}\n```"
  },
  {
    "task": "Use a set to manage a collection of unique transaction IDs.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n#include <string>\n\nint main() {\n    std::set<std::string> transactionIDs;\n    \n    // Example of adding transaction IDs\n    transactionIDs.insert(\"TXN12345\");\n    transactionIDs.insert(\"TXN67890\");\n    transactionIDs.insert(\"TXN54321\");\n    transactionIDs.insert(\"TXN67890\"); // This duplicate won't be added\n\n    // Example of checking for a specific transaction ID\n    std::string targetID = \"TXN12345\";\n    if (transactionIDs.find(targetID) != transactionIDs.end()) {\n        std::cout << targetID << \" exists in the collection.\" << std::endl;\n    } else {\n        std::cout << targetID << \" does not exist in the collection.\" << std::endl;\n    }\n\n    // Example of iterating over the transaction IDs\n    std::cout << \"All unique transaction IDs:\" << std::endl;\n    for (const auto& id : transactionIDs) {\n        std::cout << id << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a set of integers and demonstrate the `pop` operation.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n\nint main() {\n    std::set<int> mySet = {1, 2, 3, 4, 5};\n\n    if (!mySet.empty()) {\n        auto it = mySet.begin(); // Get an iterator to the first element\n        std::cout << \"Popped element: \" << *it << std::endl;\n        mySet.erase(it);\n    } else {\n        std::cout << \"Set is empty, nothing to pop.\" << std::endl;\n    }\n\n    std::cout << \"Remaining elements in the set: \";\n    for (const int &elem : mySet) {\n        std::cout << elem << \" \";\n    }\n    std::cout << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program to find the maximum element in a set of floating-point numbers.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n\nint main() {\n    std::set<float> numbers = {3.5, 7.2, 1.8, 9.4, 6.3};\n    if (!numbers.empty()) {\n        auto maxElement = *numbers.rbegin();\n        std::cout << \"Maximum element: \" << maxElement << std::endl;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Create a set and demonstrate the use of the `update` method with another set.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n\nint main() {\n    std::set<int> set1 = {1, 2, 3};\n    std::set<int> set2 = {3, 4, 5};\n\n    // \"Update\" set1 with elements from set2\n    set1.insert(set2.begin(), set2.end());\n\n    for (int elem : set1) {\n        std::cout << elem << \" \";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a set to keep track of unique file extensions in a directory.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n#include <string>\n#include <filesystem>\n\nint main() {\n    std::set<std::string> uniqueExtensions;\n    std::string directoryPath = \"./\"; // Change to your directory path\n    \n    for (const auto& entry : std::filesystem::directory_iterator(directoryPath)) {\n        if (entry.is_regular_file()) {\n            uniqueExtensions.insert(entry.path().extension().string());\n        }\n    }\n\n    for (const auto& ext : uniqueExtensions) {\n        std::cout << ext << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a set of strings and demonstrate how to iterate over it in reverse order.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n#include <string>\n\nint main() {\n    std::set<std::string> mySet = {\"apple\", \"banana\", \"cherry\"};\n\n    for (auto it = mySet.rbegin(); it != mySet.rend(); ++it) {\n        std::cout << *it << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function to check if a set is empty.",
    "code": "```cpp\n#include <set>\n\nbool isSetEmpty(const std::set<int>& mySet) {\n    return mySet.empty();\n}\n```"
  },
  {
    "task": "Use a set to filter out duplicate entries from a list of participants.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n#include <vector>\n#include <string>\n\nint main() {\n    std::vector<std::string> participants = {\"Alice\", \"Bob\", \"Alice\", \"Charlie\", \"Bob\", \"Dave\"};\n    std::set<std::string> uniqueParticipants(participants.begin(), participants.end());\n\n    for (const auto& participant : uniqueParticipants) {\n        std::cout << participant << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a set of tuples and demonstrate basic set operations.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n#include <tuple>\n\nint main() {\n    // Create a set of tuples\n    std::set<std::tuple<int, char, std::string>> mySet;\n\n    // Add tuples to the set\n    mySet.emplace(1, 'a', \"apple\");\n    mySet.emplace(2, 'b', \"banana\");\n    mySet.emplace(3, 'c', \"cherry\");\n\n    // Attempt to add a duplicate tuple\n    mySet.emplace(2, 'b', \"banana\");\n\n    // Access and print all elements of the set\n    for (const auto& elem : mySet) {\n        int num;\n        char letter;\n        std::string word;\n        std::tie(num, letter, word) = elem;\n        std::cout << \"(\" << num << \", \" << letter << \", \" << word << \")\" << std::endl;\n    }\n\n    // Find a particular tuple in the set\n    auto search = mySet.find(std::make_tuple(2, 'b', \"banana\"));\n    if (search != mySet.end()) {\n        std::cout << \"Tuple (2, 'b', \\\"banana\\\") found in the set.\" << std::endl;\n    } else {\n        std::cout << \"Tuple not found.\" << std::endl;\n    }\n\n    // Remove a tuple from the set\n    mySet.erase(std::make_tuple(1, 'a', \"apple\"));\n\n    // Print the set after removal\n    std::cout << \"Set after removal:\" << std::endl;\n    for (const auto& elem : mySet) {\n        int num;\n        char letter;\n        std::string word;\n        std::tie(num, letter, word) = elem;\n        std::cout << \"(\" << num << \", \" << letter << \", \" << word << \")\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program to find the common elements between two sets of country names.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n#include <string>\n\nint main() {\n    std::set<std::string> set1 = {\"USA\", \"Canada\", \"Mexico\", \"France\"};\n    std::set<std::string> set2 = {\"Germany\", \"France\", \"Mexico\", \"Italy\"};\n\n    std::set<std::string> commonElements;\n    for (const auto& country : set1) {\n        if (set2.find(country) != set2.end()) {\n            commonElements.insert(country);\n        }\n    }\n\n    std::cout << \"Common elements between the two sets are:\\n\";\n    for (const auto& country : commonElements) {\n        std::cout << country << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a set of characters and demonstrate the use of the `issubset` method.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n#include <algorithm>\n\nbool isSubset(const std::set<char>& set1, const std::set<char>& set2) {\n    return std::all_of(set1.begin(), set1.end(), [&](char c) { return set2.count(c) > 0; });\n}\n\nint main() {\n    std::set<char> setA = {'a', 'b', 'c'};\n    std::set<char> setB = {'a', 'b', 'c', 'd', 'e'};\n\n    if (isSubset(setA, setB)) {\n        std::cout << \"setA is a subset of setB\" << std::endl;\n    } else {\n        std::cout << \"setA is not a subset of setB\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a set to manage a collection of unique hashtags from social media posts.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n#include <string>\n\nint main() {\n    std::set<std::string> hashtags;\n    \n    // Example: Adding hashtags\n    hashtags.insert(\"#coding\");\n    hashtags.insert(\"#cplusplus\");\n    hashtags.insert(\"#programming\");\n    hashtags.insert(\"#coding\"); // Duplicate, won't be added\n    \n    // Display all unique hashtags\n    for (const auto& hashtag : hashtags) {\n        std::cout << hashtag << std::endl;\n    }\n   \n    return 0;\n}\n```"
  },
  {
    "task": "Create a set and demonstrate how to copy it to another set.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n\nint main() {\n    // Create a set\n    std::set<int> originalSet = {1, 2, 3, 4, 5};\n\n    // Copy the set to another set\n    std::set<int> copiedSet(originalSet);\n\n    // Output the copied set\n    for (const int &element : copiedSet) {\n        std::cout << element << \" \";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that accepts two sets and returns a new set with elements found in both.",
    "code": "```cpp\n#include <set>\n\nstd::set<int> intersection(const std::set<int>& set1, const std::set<int>& set2) {\n    std::set<int> result;\n    for (const auto& element : set1) {\n        if (set2.find(element) != set2.end()) {\n            result.insert(element);\n        }\n    }\n    return result;\n}\n```"
  },
  {
    "task": "Use a set to determine the unique items purchased in a day.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n#include <string>\n\nint main() {\n    std::set<std::string> uniqueItems;\n    std::string item;\n    \n    std::cout << \"Enter items purchased (type 'done' to finish):\" << std::endl;\n    while (true) {\n        std::getline(std::cin, item);\n        if (item == \"done\") break;\n        uniqueItems.insert(item);\n    }\n    \n    std::cout << \"Unique items purchased:\" << std::endl;\n    for (const auto& it : uniqueItems) {\n        std::cout << it << std::endl;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Create a set of student IDs and demonstrate set comprehension to filter IDs.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n#include <algorithm>\n\nint main() {\n    std::set<int> studentIDs = {101, 102, 103, 104, 105, 106, 107, 108, 109, 110};\n\n    std::set<int> filteredIDs;\n    for (int id : studentIDs) {\n        if (id % 2 == 0) { // Example filter: IDs that are even\n            filteredIDs.insert(id);\n        }\n    }\n\n    std::cout << \"Filtered Student IDs: \";\n    for (int id : filteredIDs) {\n        std::cout << id << \" \";\n    }\n    std::cout << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program to check if a set of strings is a superset of another set.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n#include <string>\n\nbool isSuperset(const std::set<std::string>& superset, const std::set<std::string>& subset) {\n    for (const auto& element : subset) {\n        if (superset.find(element) == superset.end()) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint main() {\n    std::set<std::string> setA = {\"apple\", \"banana\", \"cherry\"};\n    std::set<std::string> setB = {\"banana\", \"apple\"};\n\n    if (isSuperset(setA, setB)) {\n        std::cout << \"Set A is a superset of Set B\" << std::endl;\n    } else {\n        std::cout << \"Set A is not a superset of Set B\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a set of unique words from a text file.",
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <set>\n#include <string>\n\nint main() {\n    std::ifstream file(\"textfile.txt\");\n    std::set<std::string> uniqueWords;\n    std::string word;\n\n    while (file >> word) {\n        uniqueWords.insert(word);\n    }\n\n    file.close();\n\n    for (const auto& w : uniqueWords) {\n        std::cout << w << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a set to store unique project identifiers and demonstrate membership testing.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n\nint main() {\n    std::set<int> projectIds;\n\n    // Adding some project identifiers to the set\n    projectIds.insert(101);\n    projectIds.insert(202);\n    projectIds.insert(303);\n    projectIds.insert(404);\n\n    // Attempting to add a duplicate\n    projectIds.insert(101);\n\n    // Check membership\n    int idToCheck = 202;\n    if (projectIds.find(idToCheck) != projectIds.end()) {\n        std::cout << \"Project ID \" << idToCheck << \" is in the set.\" << std::endl;\n    } else {\n        std::cout << \"Project ID \" << idToCheck << \" is not in the set.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a set and demonstrate the `symmetric_difference_update` method.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n#include <algorithm>\n\nint main() {\n    std::set<int> set1 = {1, 2, 3, 4, 5};\n    std::set<int> set2 = {4, 5, 6, 7, 8};\n    std::set<int> symmetricDifference;\n\n    std::set_symmetric_difference(set1.begin(), set1.end(),\n                                  set2.begin(), set2.end(),\n                                  std::inserter(symmetricDifference, symmetricDifference.begin()));\n    \n    set1 = symmetricDifference;\n\n    for (int element : set1) {\n        std::cout << element << \" \";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function to remove all elements from a set that are also in another set.",
    "code": "```cpp\n#include <set>\n\nstd::set<int> removeElements(std::set<int>& set1, const std::set<int>& set2) {\n    for (auto it = set2.begin(); it != set2.end(); ++it) {\n        set1.erase(*it);\n    }\n    return set1;\n}\n```"
  },
  {
    "task": "Use a set to keep track of unique error codes from server logs.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n#include <string>\n\nint main() {\n    std::set<int> errorCodes;\n\n    // Simulating adding error codes from server logs\n    errorCodes.insert(404);\n    errorCodes.insert(500);\n    errorCodes.insert(403);\n    errorCodes.insert(404); // Duplicate, won't be added again\n\n    // Output the unique error codes\n    for (const int& code : errorCodes) {\n        std::cout << \"Error Code: \" << code << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a set and demonstrate how to find all unique pairs of elements.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n#include <vector>\n\nint main() {\n    std::set<int> mySet = {1, 2, 3, 4};\n    std::vector<std::pair<int, int>> uniquePairs;\n\n    for (auto it1 = mySet.begin(); it1 != mySet.end(); ++it1) {\n        for (auto it2 = std::next(it1); it2 != mySet.end(); ++it2) {\n            uniquePairs.push_back(std::make_pair(*it1, *it2));\n        }\n    }\n\n    for (const auto& pair : uniquePairs) {\n        std::cout << \"(\" << pair.first << \", \" << pair.second << \")\\n\";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program to find the smallest element in a set of integers.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n\nint main() {\n    std::set<int> numbers = {5, 3, 9, 1, 6};\n    if (!numbers.empty()) {\n        std::cout << \"The smallest element is: \" << *numbers.begin() << std::endl;\n    } else {\n        std::cout << \"The set is empty.\" << std::endl;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Create a set and demonstrate the `add` method with multiple elements.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n\nint main() {\n    std::set<int> mySet;\n\n    mySet.insert(1);\n    mySet.insert(2);\n    mySet.insert(3);\n\n    for (const int &element : mySet) {\n        std::cout << element << \" \";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a set to manage a collection of unique author names.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n#include <string>\n\nint main() {\n    std::set<std::string> authorSet;\n\n    // Add authors\n    authorSet.insert(\"George Orwell\");\n    authorSet.insert(\"Virginia Woolf\");\n    authorSet.insert(\"J.K. Rowling\");\n    authorSet.insert(\"George Orwell\"); // Duplicate, won't be added\n\n    // Display authors\n    for (const auto& author : authorSet) {\n        std::cout << author << std::endl;\n    }\n\n    // Check if an author exists\n    std::string searchAuthor = \"J.K. Rowling\";\n    if (authorSet.find(searchAuthor) != authorSet.end()) {\n        std::cout << searchAuthor << \" is in the set.\" << std::endl;\n    } else {\n        std::cout << searchAuthor << \" is not in the set.\" << std::endl;\n    }\n\n    // Remove an author\n    authorSet.erase(\"Virginia Woolf\");\n\n    // Display authors after removal\n    for (const auto& author : authorSet) {\n        std::cout << author << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a set of integers and demonstrate converting it to a sorted list.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n#include <vector>\n#include <algorithm>\n\nint main() {\n    std::set<int> intSet = {5, 3, 9, 1, 4};\n    \n    std::vector<int> sortedList(intSet.begin(), intSet.end());\n    std::sort(sortedList.begin(), sortedList.end());\n    \n    for (int num : sortedList) {\n        std::cout << num << \" \";\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that returns the union of multiple sets.",
    "code": "```cpp\n#include <set>\n#include <vector>\n\nstd::set<int> unionOfSets(const std::vector<std::set<int>>& sets) {\n    std::set<int> result;\n    for (const auto& s : sets) {\n        result.insert(s.begin(), s.end());\n    }\n    return result;\n}\n```"
  },
  {
    "task": "Use a set to identify unique characters in a string.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n#include <string>\n\nint main() {\n    std::string input = \"example string\";\n    std::set<char> uniqueChars(input.begin(), input.end());\n\n    for (char c : uniqueChars) {\n        std::cout << c << \" \";\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Create a set of prime numbers and demonstrate basic set operations.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n\nbool isPrime(int num) {\n    if (num <= 1) return false;\n    if (num <= 3) return true;\n    if (num % 2 == 0 || num % 3 == 0) return false;\n    for (int i = 5; i * i <= num; i += 6) {\n        if (num % i == 0 || num % (i + 2) == 0) return false;\n    }\n    return true;\n}\n\nint main() {\n    std::set<int> primeSet;\n    \n    for (int i = 2; i < 50; ++i) {\n        if (isPrime(i)) {\n            primeSet.insert(i);\n        }\n    }\n\n    std::set<int> anotherSet = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47};\n    \n    std::cout << \"Prime numbers in the set: \";\n    for (const auto& num : primeSet) {\n        std::cout << num << \" \";\n    }\n    std::cout << \"\\n\";\n\n    std::cout << \"Set contains 11: \" << (primeSet.count(11) ? \"Yes\" : \"No\") << \"\\n\";\n    std::cout << \"Set contains 50: \" << (primeSet.count(50) ? \"Yes\" : \"No\") << \"\\n\";\n\n    std::cout << \"Union of two sets: \";\n    std::set<int> unionSet = primeSet;\n    unionSet.insert(anotherSet.begin(), anotherSet.end());\n    for (const auto& num : unionSet) {\n        std::cout << num << \" \";\n    }\n    std::cout << \"\\n\";\n\n    std::cout << \"Intersection of two sets: \";\n    std::set<int> intersectionSet;\n    for (const auto& num : anotherSet) {\n        if (primeSet.count(num)) {\n            intersectionSet.insert(num);\n        }\n    }\n    for (const auto& num : intersectionSet) {\n        std::cout << num << \" \";\n    }\n    std::cout << \"\\n\";\n\n    std::cout << \"Difference between primeSet and anotherSet: \";\n    std::set<int> differenceSet;\n    for (const auto& num : primeSet) {\n        if (!anotherSet.count(num)) {\n            differenceSet.insert(num);\n        }\n    }\n    for (const auto& num : differenceSet) {\n        std::cout << num << \" \";\n    }\n    std::cout << \"\\n\";\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a set and demonstrate how to check for non-membership.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n\nint main() {\n    std::set<int> mySet = {1, 2, 3, 4, 5};\n    int valueToCheck = 6;\n\n    if (mySet.find(valueToCheck) == mySet.end()) {\n        std::cout << valueToCheck << \" is not in the set.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program to find the largest element in a set of numbers.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n\nint main() {\n    std::set<int> numbers = {10, 20, 5, 15, 30};\n    if (!numbers.empty()) {\n        int largest = *numbers.rbegin();\n        std::cout << \"Largest element: \" << largest << std::endl;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Create a set of unique movie titles and demonstrate membership testing.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n#include <string>\n\nint main() {\n    std::set<std::string> movieTitles;\n\n    // Adding some movie titles to the set\n    movieTitles.insert(\"Inception\");\n    movieTitles.insert(\"The Matrix\");\n    movieTitles.insert(\"Interstellar\");\n    movieTitles.insert(\"The Matrix\"); // Duplicate entry, will not be added\n\n    // Testing membership\n    std::string movieToCheck = \"Inception\";\n    if (movieTitles.find(movieToCheck) != movieTitles.end()) {\n        std::cout << movieToCheck << \" is in the set.\" << std::endl;\n    } else {\n        std::cout << movieToCheck << \" is not in the set.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a set to store unique keys from a dictionary.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n#include <map>\n\nint main() {\n    std::map<std::string, int> dictionary = {\n        {\"apple\", 1},\n        {\"banana\", 2},\n        {\"orange\", 3},\n        {\"apple\", 4}\n    };\n\n    std::set<std::string> uniqueKeys;\n\n    for (const auto& pair : dictionary) {\n        uniqueKeys.insert(pair.first);\n    }\n\n    for (const auto& key : uniqueKeys) {\n        std::cout << key << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a set and demonstrate the `difference_update` method.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n\nint main() {\n    std::set<int> set1 = {1, 2, 3, 4, 5};\n    std::set<int> set2 = {4, 5, 6, 7};\n\n    // Difference update equivalent\n    for (auto it = set2.begin(); it != set2.end(); ++it) {\n        set1.erase(*it);\n    }\n\n    for (const auto& elem : set1) {\n        std::cout << elem << \" \";\n    }\n    std::cout << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function to merge multiple sets into a single set.",
    "code": "```cpp\n#include <set>\n#include <initializer_list>\n\nstd::set<int> mergeSets(const std::initializer_list<std::set<int>>& sets) {\n    std::set<int> result;\n    for (const auto& s : sets) {\n        result.insert(s.begin(), s.end());\n    }\n    return result;\n}\n```"
  },
  {
    "task": "Use a set to filter out duplicate letters from a word.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n#include <string>\n\nint main() {\n    std::string word = \"example\";\n    std::set<char> uniqueLetters;\n\n    for (char letter : word) {\n        uniqueLetters.insert(letter);\n    }\n\n    for (char letter : uniqueLetters) {\n        std::cout << letter;\n    }\n    \n    std::cout << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Create a set and demonstrate the use of the `isdisjoint` method.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n\nint main() {\n    std::set<int> set1 = {1, 2, 3, 4, 5};\n    std::set<int> set2 = {6, 7, 8, 9, 10};\n    std::set<int> set3 = {3, 6, 9};\n\n    // Check if set1 and set2 are disjoint\n    bool disjoint1 = true;\n    for (int num : set1) {\n        if (set2.find(num) != set2.end()) {\n            disjoint1 = false;\n            break;\n        }\n    }\n    std::cout << \"set1 and set2 are disjoint: \" << (disjoint1 ? \"true\" : \"false\") << std::endl;\n\n    // Check if set1 and set3 are disjoint\n    bool disjoint2 = true;\n    for (int num : set1) {\n        if (set3.find(num) != set3.end()) {\n            disjoint2 = false;\n            break;\n        }\n    }\n    std::cout << \"set1 and set3 are disjoint: \" << (disjoint2 ? \"true\" : \"false\") << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program to find all elements that are only in one of two sets.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n#include <algorithm>\n\nint main() {\n    std::set<int> set1 = {1, 2, 3, 4, 5};\n    std::set<int> set2 = {4, 5, 6, 7, 8};\n    std::set<int> result;\n\n    std::set_difference(set1.begin(), set1.end(), set2.begin(), set2.end(), \n                        std::inserter(result, result.end()));\n    std::set_difference(set2.begin(), set2.end(), set1.begin(), set1.end(), \n                        std::inserter(result, result.end()));\n\n    for (int num : result) {\n        std::cout << num << \" \";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a set of unique book authors and demonstrate basic set operations.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n#include <string>\n\nint main() {\n    std::set<std::string> authors;\n\n    // Adding authors to the set\n    authors.insert(\"J.K. Rowling\");\n    authors.insert(\"George R.R. Martin\");\n    authors.insert(\"J.R.R. Tolkien\");\n    authors.insert(\"Agatha Christie\");\n    authors.insert(\"Isaac Asimov\");\n\n    // Attempting to add a duplicate author\n    authors.insert(\"J.K. Rowling\");\n\n    // Display all authors\n    std::cout << \"Authors in the set:\" << std::endl;\n    for (const auto& author : authors) {\n        std::cout << author << std::endl;\n    }\n\n    // Check if a specific author is in the set\n    std::string searchAuthor = \"George R.R. Martin\";\n    if (authors.find(searchAuthor) != authors.end()) {\n        std::cout << searchAuthor << \" is in the set.\" << std::endl;\n    } else {\n        std::cout << searchAuthor << \" is not in the set.\" << std::endl;\n    }\n\n    // Remove an author from the set\n    authors.erase(\"Isaac Asimov\");\n\n    // Display all authors after removal\n    std::cout << \"Authors in the set after removal:\" << std::endl;\n    for (const auto& author : authors) {\n        std::cout << author << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a set to store unique phone numbers and check for duplicates.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n#include <string>\n\nint main() {\n    std::set<std::string> phoneNumbers;\n    std::string input;\n    \n    while (true) {\n        std::cout << \"Enter a phone number (or 'exit' to stop): \";\n        std::cin >> input;\n        \n        if (input == \"exit\") {\n            break;\n        }\n        \n        if (phoneNumbers.find(input) != phoneNumbers.end()) {\n            std::cout << \"Duplicate phone number detected: \" << input << std::endl;\n        } else {\n            phoneNumbers.insert(input);\n            std::cout << \"Phone number added: \" << input << std::endl;\n        }\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Create a set of floating-point numbers and demonstrate rounding each element.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n#include <cmath>\n\nint main() {\n    std::set<double> floatSet = {1.2, 3.5, 4.7, 5.9, 6.3};\n\n    for (double num : floatSet) {\n        std::cout << std::round(num) << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that returns a set of all vowels present in a given sentence.",
    "code": "```cpp\n#include <set>\n#include <string>\n#include <cctype>\n\nstd::set<char> findVowelsInSentence(const std::string& sentence) {\n    std::set<char> vowels;\n    std::string vowelChars = \"aeiouAEIOU\";\n    for (char ch : sentence) {\n        if (vowelChars.find(ch) != std::string::npos) {\n            vowels.insert(std::tolower(ch));\n        }\n    }\n    return vowels;\n}\n```"
  },
  {
    "task": "Use a set to track unique session IDs for a web application.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n#include <string>\n\nint main() {\n    std::set<std::string> sessionIDs;\n\n    // Example session IDs\n    sessionIDs.insert(\"session1\");\n    sessionIDs.insert(\"session2\");\n    sessionIDs.insert(\"session3\");\n\n    // Attempt to insert duplicate\n    sessionIDs.insert(\"session2\");\n\n    // Display unique session IDs\n    for (const auto& id : sessionIDs) {\n        std::cout << id << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a set of unique city names and demonstrate set operations with it.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n#include <string>\n\nint main() {\n    std::set<std::string> cities;\n\n    // Adding city names to the set\n    cities.insert(\"New York\");\n    cities.insert(\"Los Angeles\");\n    cities.insert(\"Chicago\");\n    cities.insert(\"Houston\");\n    cities.insert(\"Phoenix\");\n\n    // Attempting to add a duplicate city\n    cities.insert(\"New York\");\n\n    // Display cities\n    std::cout << \"Cities in the set:\" << std::endl;\n    for (const auto& city : cities) {\n        std::cout << city << std::endl;\n    }\n\n    // Demonstrate set operations\n    std::string cityToFind = \"Chicago\";\n    if (cities.find(cityToFind) != cities.end()) {\n        std::cout << cityToFind << \" is in the set.\" << std::endl;\n    } else {\n        std::cout << cityToFind << \" is not in the set.\" << std::endl;\n    }\n\n    std::string cityToErase = \"Houston\";\n    cities.erase(cityToErase);\n    std::cout << cityToErase << \" has been removed from the set.\" << std::endl;\n\n    // Display cities after removal\n    std::cout << \"Cities in the set after removal:\" << std::endl;\n    for (const auto& city : cities) {\n        std::cout << city << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program to find the common elements in three sets.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n#include <iterator>\n\nint main() {\n    std::set<int> set1 = {1, 2, 3, 4, 5};\n    std::set<int> set2 = {3, 4, 5, 6, 7};\n    std::set<int> set3 = {5, 6, 7, 8, 9};\n\n    std::set<int> intersection;\n    std::set<int> tempIntersection;\n\n    for (int element : set1) {\n        if (set2.find(element) != set2.end()) {\n            tempIntersection.insert(element);\n        }\n    }\n\n    for (int element : tempIntersection) {\n        if (set3.find(element) != set3.end()) {\n            intersection.insert(element);\n        }\n    }\n\n    std::cout << \"Common elements in all three sets: \";\n    for (int element : intersection) {\n        std::cout << element << \" \";\n    }\n    std::cout << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a set and demonstrate how to remove an element by its value.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n\nint main() {\n    std::set<int> mySet = {1, 2, 3, 4, 5};\n    \n    // Remove element with value 3\n    mySet.erase(3);\n    \n    // Output the set to demonstrate removal\n    for (int elem : mySet) {\n        std::cout << elem << \" \";\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Implement a set to store a collection of unique ISBN numbers.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n#include <string>\n\nint main() {\n    std::set<std::string> isbnSet;\n\n    // Example usage: adding ISBN numbers\n    isbnSet.insert(\"978-3-16-148410-0\");\n    isbnSet.insert(\"978-1-4028-9462-6\");\n    isbnSet.insert(\"978-0-262-13472-9\");\n\n    // Attempt to add a duplicate ISBN\n    isbnSet.insert(\"978-3-16-148410-0\");\n\n    // Output the ISBNs in the set\n    for (const auto& isbn : isbnSet) {\n        std::cout << isbn << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a set and demonstrate the `intersection_update` method.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n\nint main() {\n    std::set<int> set1 = {1, 2, 3, 4, 5};\n    std::set<int> set2 = {3, 4, 5, 6, 7};\n\n    for (auto it = set1.begin(); it != set1.end();) {\n        if (set2.find(*it) == set2.end()) {\n            it = set1.erase(it);\n        } else {\n            ++it;\n        }\n    }\n\n    for (const int &element : set1) {\n        std::cout << element << \" \";\n    }\n    std::cout << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function to generate a set of all unique elements in a list.",
    "code": "```cpp\n#include <vector>\n#include <set>\n\nstd::set<int> uniqueElements(const std::vector<int>& list) {\n    return std::set<int>(list.begin(), list.end());\n}\n```"
  },
  {
    "task": "Use a set to determine the unique characters in two strings.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n#include <string>\n\nint main() {\n    std::string str1 = \"example1\";\n    std::string str2 = \"example2\";\n    \n    std::set<char> uniqueChars;\n\n    for (char c : str1) {\n        uniqueChars.insert(c);\n    }\n    for (char c : str2) {\n        uniqueChars.insert(c);\n    }\n\n    for (char c : uniqueChars) {\n        std::cout << c << \" \";\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Create a set of unique animal names and demonstrate the `discard` method.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n#include <string>\n\nint main() {\n    std::set<std::string> animals = {\"dog\", \"cat\", \"elephant\", \"giraffe\"};\n\n    // Attempt to remove an element\n    auto it = animals.find(\"cat\");\n    if (it != animals.end()) {\n        animals.erase(it);\n    }\n\n    // Print the contents of the set\n    for (const auto& animal : animals) {\n        std::cout << animal << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program to find all elements present in the first set but not in the second.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n\nint main() {\n    std::set<int> set1 = {1, 2, 3, 4, 5};\n    std::set<int> set2 = {4, 5, 6, 7, 8};\n    std::set<int> difference;\n\n    for (int element : set1) {\n        if (set2.find(element) == set2.end()) {\n            difference.insert(element);\n        }\n    }\n\n    std::cout << \"Elements in set1 but not in set2: \";\n    for (int element : difference) {\n        std::cout << element << \" \";\n    }\n    std::cout << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a set of integers and demonstrate using it to eliminate duplicates from a list.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n#include <vector>\n\nint main() {\n    std::vector<int> numbers = {1, 2, 3, 2, 4, 5, 3, 6};\n    std::set<int> uniqueNumbers(numbers.begin(), numbers.end());\n\n    for (int num : uniqueNumbers) {\n        std::cout << num << \" \";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a set to manage a collection of unique car models.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n#include <string>\n\nint main() {\n    std::set<std::string> carModels;\n\n    // Adding car models to the set\n    carModels.insert(\"Toyota Corolla\");\n    carModels.insert(\"Honda Civic\");\n    carModels.insert(\"Ford Focus\");\n    carModels.insert(\"Tesla Model S\");\n\n    // Attempting to add a duplicate model\n    carModels.insert(\"Toyota Corolla\");\n\n    // Displaying the car models\n    std::cout << \"Unique Car Models:\" << std::endl;\n    for (const auto& model : carModels) {\n        std::cout << model << std::endl;\n    }\n\n    // Check if a specific model is present\n    if (carModels.find(\"Toyota Corolla\") != carModels.end()) {\n        std::cout << \"Toyota Corolla is in the set.\" << std::endl;\n    } else {\n        std::cout << \"Toyota Corolla is not in the set.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a set and demonstrate the use of the `clear` method.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n\nint main() {\n    std::set<int> mySet;\n\n    // Insert some elements\n    mySet.insert(10);\n    mySet.insert(20);\n    mySet.insert(30);\n\n    // Clear the set\n    mySet.clear();\n\n    // Output the size of the set after clearing\n    std::cout << \"Size of the set after clear: \" << mySet.size() << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that finds the intersection of multiple sets.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n#include <vector>\n\nstd::set<int> intersectMultipleSets(const std::vector<std::set<int>>& sets) {\n    if (sets.empty()) return {};\n\n    std::set<int> intersection = sets[0];\n    for (size_t i = 1; i < sets.size(); ++i) {\n        std::set<int> temp;\n        for (int elem : intersection) {\n            if (sets[i].count(elem)) {\n                temp.insert(elem);\n            }\n        }\n        intersection = std::move(temp);\n    }\n    return intersection;\n}\n\nint main() {\n    std::set<int> set1 = {1, 2, 3, 4};\n    std::set<int> set2 = {2, 3, 5, 6};\n    std::set<int> set3 = {2, 3, 7, 8};\n    std::vector<std::set<int>> sets = {set1, set2, set3};\n\n    std::set<int> result = intersectMultipleSets(sets);\n\n    for (int elem : result) {\n        std::cout << elem << \" \";\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Use a set to identify unique words in a paragraph.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n#include <sstream>\n\nint main() {\n    std::string paragraph = \"This is a sample paragraph with some sample words. This paragraph is meant to test unique word identification.\";\n    std::set<std::string> uniqueWords;\n    std::istringstream stream(paragraph);\n    std::string word;\n\n    while (stream >> word) {\n        uniqueWords.insert(word);\n    }\n\n    for (const auto &w : uniqueWords) {\n        std::cout << w << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a set of unique country codes and demonstrate membership testing.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n#include <string>\n\nint main() {\n    std::set<std::string> countryCodes = {\"US\", \"CA\", \"MX\", \"FR\", \"DE\"};\n\n    std::string codeToCheck = \"CA\";\n    \n    if (countryCodes.find(codeToCheck) != countryCodes.end()) {\n        std::cout << codeToCheck << \" is in the set.\" << std::endl;\n    } else {\n        std::cout << codeToCheck << \" is not in the set.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program to find the union of two sets and return it as a list.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n#include <vector>\n#include <algorithm>\n\nstd::vector<int> unionOfSets(const std::set<int>& set1, const std::set<int>& set2) {\n    std::set<int> unionSet(set1);\n    unionSet.insert(set2.begin(), set2.end());\n    return std::vector<int>(unionSet.begin(), unionSet.end());\n}\n\nint main() {\n    std::set<int> set1 = {1, 2, 3, 4};\n    std::set<int> set2 = {3, 4, 5, 6};\n\n    std::vector<int> unionResult = unionOfSets(set1, set2);\n\n    for (int num : unionResult) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a set and demonstrate using it to check if all elements of another set are present.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n\nint main() {\n    std::set<int> setA = {1, 2, 3, 4, 5};\n    std::set<int> setB = {2, 3, 5};\n\n    bool allPresent = true;\n    for (int element : setB) {\n        if (setA.find(element) == setA.end()) {\n            allPresent = false;\n            break;\n        }\n    }\n\n    if (allPresent) {\n        std::cout << \"All elements of setB are present in setA.\" << std::endl;\n    } else {\n        std::cout << \"Not all elements of setB are present in setA.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a set to store unique coupon codes and demonstrate adding new codes.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n#include <string>\n\nint main() {\n    std::set<std::string> couponCodes;\n    \n    // Adding new coupon codes\n    couponCodes.insert(\"SAVE10\");\n    couponCodes.insert(\"FREEDELIVERY\");\n    couponCodes.insert(\"WELCOME2023\");\n\n    // Attempting to add a duplicate code\n    couponCodes.insert(\"SAVE10\");\n\n    // Display the unique coupon codes\n    std::cout << \"Unique Coupon Codes:\" << std::endl;\n    for (const auto& code : couponCodes) {\n        std::cout << code << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a set and demonstrate the `copy` method.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n#include <algorithm>\n#include <iterator>\n\nint main() {\n    std::set<int> originalSet = {1, 2, 3, 4, 5};\n    std::set<int> copiedSet;\n\n    std::copy(originalSet.begin(), originalSet.end(), std::inserter(copiedSet, copiedSet.begin()));\n\n    for(const int& element : copiedSet) {\n        std::cout << element << \" \";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function to remove duplicates from a list using a set.",
    "code": "```cpp\n#include <vector>\n#include <set>\n\nstd::vector<int> removeDuplicates(const std::vector<int>& inputList) {\n    std::set<int> uniqueElements(inputList.begin(), inputList.end());\n    return std::vector<int>(uniqueElements.begin(), uniqueElements.end());\n}\n```"
  },
  {
    "task": "Use a set to identify unique numbers in a sequence.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n#include <vector>\n\nint main() {\n    std::vector<int> numbers = {1, 2, 2, 3, 4, 4, 5};\n    std::set<int> uniqueNumbers(numbers.begin(), numbers.end());\n\n    for (int num : uniqueNumbers) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a set of unique fruit names and demonstrate set operations with it.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n#include <string>\n\nint main() {\n    std::set<std::string> fruits = {\"apple\", \"banana\", \"cherry\", \"date\"};\n\n    // Insert a new fruit\n    fruits.insert(\"elderberry\");\n\n    // Try to insert a duplicate fruit\n    fruits.insert(\"apple\");\n\n    // Remove a fruit\n    fruits.erase(\"banana\");\n\n    // Check if a fruit is in the set\n    if (fruits.find(\"cherry\") != fruits.end()) {\n        std::cout << \"Cherry is in the set.\" << std::endl;\n    } else {\n        std::cout << \"Cherry is not in the set.\" << std::endl;\n    }\n\n    // Display all fruits\n    std::cout << \"Fruits in the set:\" << std::endl;\n    for (const auto &fruit : fruits) {\n        std::cout << fruit << std::endl;\n    }\n\n    return 0;\n}\n```"
  }
]