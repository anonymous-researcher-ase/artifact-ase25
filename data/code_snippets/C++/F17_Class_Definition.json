[
  {
    "task": "Define a class representing a book with attributes for title, author, and number of pages, and a method to display the book's information.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass Book {\nprivate:\n    std::string title;\n    std::string author;\n    int numberOfPages;\n\npublic:\n    Book(const std::string &title, const std::string &author, int numberOfPages)\n        : title(title), author(author), numberOfPages(numberOfPages) {}\n\n    void displayInfo() const {\n        std::cout << \"Title: \" << title << std::endl;\n        std::cout << \"Author: \" << author << std::endl;\n        std::cout << \"Number of Pages: \" << numberOfPages << std::endl;\n    }\n};\n\nint main() {\n    Book book(\"The Great Gatsby\", \"F. Scott Fitzgerald\", 180);\n    book.displayInfo();\n    return 0;\n}\n```"
  },
  {
    "task": "Create a class for a bank account that includes attributes for account number, balance, and a method to deposit funds.",
    "code": "```cpp\n#include <iostream>\n\nclass BankAccount {\nprivate:\n    int accountNumber;\n    double balance;\n\npublic:\n    BankAccount(int accNum, double initialBalance) : accountNumber(accNum), balance(initialBalance) {}\n\n    void deposit(double amount) {\n        balance += amount;\n    }\n\n    int getAccountNumber() const {\n        return accountNumber;\n    }\n\n    double getBalance() const {\n        return balance;\n    }\n};\n\nint main() {\n    BankAccount account(123456, 1000.0);\n    account.deposit(500.0);\n    std::cout << \"Account Number: \" << account.getAccountNumber() << std::endl;\n    std::cout << \"Balance: \" << account.getBalance() << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Design a class for a vehicle with properties for make, model, and year, and a method to start the engine.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass Vehicle {\nprivate:\n    std::string make;\n    std::string model;\n    int year;\n\npublic:\n    Vehicle(const std::string &make, const std::string &model, int year)\n        : make(make), model(model), year(year) {}\n\n    void startEngine() {\n        std::cout << \"Engine started for \" << make << \" \" << model << \", \" << year << \".\" << std::endl;\n    }\n};\n\nint main() {\n    Vehicle car(\"Toyota\", \"Corolla\", 2020);\n    car.startEngine();\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a class that models a student with attributes for name, ID, and grades, and a method to calculate the GPA.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n\nclass Student {\nprivate:\n    std::string name;\n    int id;\n    std::vector<double> grades;\n\npublic:\n    Student(const std::string& name, int id, const std::vector<double>& grades)\n        : name(name), id(id), grades(grades) {}\n\n    double calculateGPA() const {\n        if (grades.empty()) return 0.0;\n        double sum = 0.0;\n        for (double grade : grades) {\n            sum += grade;\n        }\n        return sum / grades.size();\n    }\n\n    // Optional: Accessor methods\n    const std::string& getName() const { return name; }\n    int getId() const { return id; }\n    const std::vector<double>& getGrades() const { return grades; }\n};\n\nint main() {\n    std::vector<double> grades = {3.5, 4.0, 2.8, 3.7};\n    Student student(\"John Doe\", 12345, grades);\n    std::cout << \"GPA: \" << student.calculateGPA() << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Construct a class for a rectangle that has attributes for width and height, and methods to calculate area and perimeter.",
    "code": "```cpp\n#include <iostream>\n\nclass Rectangle {\nprivate:\n    double width;\n    double height;\n\npublic:\n    Rectangle(double w, double h) : width(w), height(h) {}\n\n    double calculateArea() const {\n        return width * height;\n    }\n\n    double calculatePerimeter() const {\n        return 2 * (width + height);\n    }\n};\n\nint main() {\n    Rectangle rect(5.0, 3.0);\n    std::cout << \"Area: \" << rect.calculateArea() << std::endl;\n    std::cout << \"Perimeter: \" << rect.calculatePerimeter() << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Formulate a class for a smartphone with properties for brand, model, and battery life, and a method to make a call.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass Smartphone {\nprivate:\n    std::string brand;\n    std::string model;\n    int batteryLife; // in percentage\n\npublic:\n    // Constructor\n    Smartphone(const std::string& brand, const std::string& model, int batteryLife)\n        : brand(brand), model(model), batteryLife(batteryLife) {}\n\n    // Method to make a call\n    void makeCall(const std::string& number) {\n        if (batteryLife > 0) {\n            std::cout << \"Calling \" << number << \" from \" << brand << \" \" << model << std::endl;\n            batteryLife -= 5; // Assume each call drains 5% battery\n        } else {\n            std::cout << \"Battery is too low to make a call.\" << std::endl;\n        }\n    }\n\n    // Accessor methods\n    std::string getBrand() const { return brand; }\n    std::string getModel() const { return model; }\n    int getBatteryLife() const { return batteryLife; }\n};\n\nint main() {\n    Smartphone phone(\"Apple\", \"iPhone 13\", 100);\n    phone.makeCall(\"123-456-7890\");\n    return 0;\n}\n```"
  },
  {
    "task": "Build a class representing a movie with attributes for title, director, and duration, and a method to play the movie.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass Movie {\nprivate:\n    std::string title;\n    std::string director;\n    int duration; // in minutes\n\npublic:\n    Movie(std::string t, std::string d, int dur) : title(t), director(d), duration(dur) {}\n\n    void play() {\n        std::cout << \"Playing movie: \" << title << \" directed by \" << director << \", Duration: \" << duration << \" minutes.\" << std::endl;\n    }\n};\n\nint main() {\n    Movie myMovie(\"Inception\", \"Christopher Nolan\", 148);\n    myMovie.play();\n    return 0;\n}\n```"
  },
  {
    "task": "Create a class for an employee with attributes for name, position, and salary, and a method to display their profile.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass Employee {\nprivate:\n    std::string name;\n    std::string position;\n    double salary;\n\npublic:\n    Employee(const std::string& empName, const std::string& empPosition, double empSalary)\n        : name(empName), position(empPosition), salary(empSalary) {}\n\n    void displayProfile() const {\n        std::cout << \"Name: \" << name << std::endl;\n        std::cout << \"Position: \" << position << std::endl;\n        std::cout << \"Salary: $\" << salary << std::endl;\n    }\n};\n\nint main() {\n    Employee emp(\"John Doe\", \"Software Developer\", 75000);\n    emp.displayProfile();\n    return 0;\n}\n```"
  },
  {
    "task": "Design a class for a library that includes attributes for name, location, and books available, and a method to add a new book.",
    "code": "```cpp\n#include <string>\n#include <vector>\n\nclass Library {\nprivate:\n    std::string name;\n    std::string location;\n    std::vector<std::string> booksAvailable;\n\npublic:\n    Library(const std::string& libName, const std::string& libLocation)\n        : name(libName), location(libLocation) {}\n\n    void addBook(const std::string& newBook) {\n        booksAvailable.push_back(newBook);\n    }\n};\n```"
  },
  {
    "task": "Develop a class for a shopping cart with properties for items and total cost, and methods to add and remove items.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n\nclass ShoppingCart {\nprivate:\n    std::vector<std::string> items;\n    double totalCost;\n\npublic:\n    ShoppingCart() : totalCost(0.0) {}\n\n    void addItem(const std::string& item, double price) {\n        items.push_back(item);\n        totalCost += price;\n    }\n\n    void removeItem(const std::string& item, double price) {\n        auto it = std::find(items.begin(), items.end(), item);\n        if (it != items.end()) {\n            items.erase(it);\n            totalCost -= price;\n        }\n    }\n\n    double getTotalCost() const {\n        return totalCost;\n    }\n\n    void displayItems() const {\n        std::cout << \"Items in cart:\\n\";\n        for (const auto& item : items) {\n            std::cout << \"- \" << item << \"\\n\";\n        }\n    }\n};\n```"
  },
  {
    "task": "Implement a class for a thermostat with attributes for current temperature and desired temperature, and a method to adjust the temperature.",
    "code": "```cpp\nclass Thermostat {\nprivate:\n    double currentTemperature;\n    double desiredTemperature;\n\npublic:\n    Thermostat(double currentTemp, double desiredTemp)\n        : currentTemperature(currentTemp), desiredTemperature(desiredTemp) {}\n\n    double getCurrentTemperature() const {\n        return currentTemperature;\n    }\n\n    void setCurrentTemperature(double temp) {\n        currentTemperature = temp;\n    }\n\n    double getDesiredTemperature() const {\n        return desiredTemperature;\n    }\n\n    void setDesiredTemperature(double temp) {\n        desiredTemperature = temp;\n    }\n\n    void adjustTemperature() {\n        if (currentTemperature < desiredTemperature) {\n            currentTemperature += 1.0;\n        } else if (currentTemperature > desiredTemperature) {\n            currentTemperature -= 1.0;\n        }\n    }\n};\n```"
  },
  {
    "task": "Formulate a class for a person with attributes for first name, last name, and age, and a method to return the full name.",
    "code": "```cpp\n#include <string>\n\nclass Person {\nprivate:\n    std::string firstName;\n    std::string lastName;\n    int age;\n\npublic:\n    Person(const std::string& first, const std::string& last, int personAge)\n        : firstName(first), lastName(last), age(personAge) {}\n\n    std::string getFullName() const {\n        return firstName + \" \" + lastName;\n    }\n};\n```"
  },
  {
    "task": "Construct a class for a game character with properties for health, strength, and inventory, and a method to attack.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n\nclass GameCharacter {\nprivate:\n    int health;\n    int strength;\n    std::vector<std::string> inventory;\n\npublic:\n    GameCharacter(int h, int s, const std::vector<std::string>& inv)\n        : health(h), strength(s), inventory(inv) {}\n\n    void attack(GameCharacter& target) {\n        target.health -= this->strength;\n        std::cout << \"Attacked! Target's health is now \" << target.health << std::endl;\n    }\n\n    int getHealth() const {\n        return health;\n    }\n\n    int getStrength() const {\n        return strength;\n    }\n\n    const std::vector<std::string>& getInventory() const {\n        return inventory;\n    }\n};\n\nint main() {\n    GameCharacter hero(100, 10, {\"Sword\", \"Shield\"});\n    GameCharacter enemy(50, 5, {\"Dagger\"});\n\n    hero.attack(enemy);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a class for a calendar event with attributes for title, date, and location, and a method to reschedule the event.",
    "code": "```cpp\n#include <string>\n\nclass CalendarEvent {\nprivate:\n    std::string title;\n    std::string date;\n    std::string location;\n\npublic:\n    CalendarEvent(const std::string& t, const std::string& d, const std::string& l)\n        : title(t), date(d), location(l) {}\n\n    void reschedule(const std::string& newDate) {\n        date = newDate;\n    }\n\n    std::string getTitle() const {\n        return title;\n    }\n\n    std::string getDate() const {\n        return date;\n    }\n\n    std::string getLocation() const {\n        return location;\n    }\n};\n```"
  },
  {
    "task": "Design a class representing a song with properties for title, artist, and duration, and a method to play the song.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass Song {\nprivate:\n    std::string title;\n    std::string artist;\n    int duration; // duration in seconds\n\npublic:\n    Song(const std::string& title, const std::string& artist, int duration)\n        : title(title), artist(artist), duration(duration) {}\n\n    void play() const {\n        std::cout << \"Playing: \" << title << \" by \" << artist\n                  << \" [\" << duration << \" seconds]\" << std::endl;\n    }\n};\n\nint main() {\n    Song song(\"Imagine\", \"John Lennon\", 183);\n    song.play();\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a class for an order in an e-commerce system with attributes for order ID, customer, and items, and a method to calculate total price.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n\nclass Item {\npublic:\n    std::string name;\n    double price;\n\n    Item(const std::string &name, double price) : name(name), price(price) {}\n};\n\nclass Order {\nprivate:\n    int orderID;\n    std::string customer;\n    std::vector<Item> items;\n\npublic:\n    Order(int orderID, const std::string &customer, const std::vector<Item> &items)\n        : orderID(orderID), customer(customer), items(items) {}\n\n    double calculateTotalPrice() const {\n        double total = 0.0;\n        for (const auto &item : items) {\n            total += item.price;\n        }\n        return total;\n    }\n\n    int getOrderID() const {\n        return orderID;\n    }\n\n    std::string getCustomer() const {\n        return customer;\n    }\n\n    std::vector<Item> getItems() const {\n        return items;\n    }\n};\n\nint main() {\n    std::vector<Item> items = {Item(\"Laptop\", 999.99), Item(\"Mouse\", 49.99)};\n    Order order(1, \"John Doe\", items);\n    std::cout << \"Total Price: $\" << order.calculateTotalPrice() << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Build a class for a social media post with attributes for content, author, and timestamp, and a method to like the post.",
    "code": "```cpp\n#include <string>\n#include <ctime>\n\nclass SocialMediaPost {\nprivate:\n    std::string content;\n    std::string author;\n    std::time_t timestamp;\n    int likes;\n\npublic:\n    SocialMediaPost(const std::string& content, const std::string& author, std::time_t timestamp)\n        : content(content), author(author), timestamp(timestamp), likes(0) {}\n\n    void likePost() {\n        ++likes;\n    }\n    \n    // Optionally, you might want to add getters for the attributes\n    std::string getContent() const {\n        return content;\n    }\n    \n    std::string getAuthor() const {\n        return author;\n    }\n    \n    std::time_t getTimestamp() const {\n        return timestamp;\n    }\n    \n    int getLikes() const {\n        return likes;\n    }\n};\n```"
  },
  {
    "task": "Create a class for a computer with properties for processor, RAM, and storage, and a method to display system specifications.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass Computer {\nprivate:\n    std::string processor;\n    int ram; // in GB\n    int storage; // in GB\n\npublic:\n    // Constructor\n    Computer(const std::string& proc, int r, int stor)\n        : processor(proc), ram(r), storage(stor) {}\n\n    // Method to display system specifications\n    void displaySpecifications() const {\n        std::cout << \"Processor: \" << processor << std::endl;\n        std::cout << \"RAM: \" << ram << \" GB\" << std::endl;\n        std::cout << \"Storage: \" << storage << \" GB\" << std::endl;\n    }\n};\n\nint main() {\n    Computer myComputer(\"Intel i7\", 16, 512);\n    myComputer.displaySpecifications();\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a class for a restaurant menu item with attributes for name, price, and description, and a method to update the price.",
    "code": "```cpp\n#include <string>\n\nclass MenuItem {\nprivate:\n    std::string name;\n    double price;\n    std::string description;\n\npublic:\n    MenuItem(const std::string& itemName, double itemPrice, const std::string& itemDescription)\n        : name(itemName), price(itemPrice), description(itemDescription) {}\n\n    void updatePrice(double newPrice) {\n        price = newPrice;\n    }\n\n    std::string getName() const {\n        return name;\n    }\n\n    double getPrice() const {\n        return price;\n    }\n\n    std::string getDescription() const {\n        return description;\n    }\n};\n```"
  },
  {
    "task": "Design a class for a package delivery with attributes for tracking number, destination, and status, and a method to update the status.",
    "code": "```cpp\n#include <string>\n\nclass PackageDelivery {\nprivate:\n    std::string trackingNumber;\n    std::string destination;\n    std::string status;\n\npublic:\n    PackageDelivery(const std::string& trackNum, const std::string& dest, const std::string& stat)\n        : trackingNumber(trackNum), destination(dest), status(stat) {}\n\n    void updateStatus(const std::string& newStatus) {\n        status = newStatus;\n    }\n\n    std::string getTrackingNumber() const {\n        return trackingNumber;\n    }\n\n    std::string getDestination() const {\n        return destination;\n    }\n\n    std::string getStatus() const {\n        return status;\n    }\n};\n```"
  },
  {
    "task": "Construct a class representing a pet with attributes for species, age, and name, and a method to display its details.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass Pet {\nprivate:\n    std::string species;\n    int age;\n    std::string name;\n\npublic:\n    Pet(const std::string& species, int age, const std::string& name)\n        : species(species), age(age), name(name) {}\n\n    void displayDetails() const {\n        std::cout << \"Species: \" << species << \", Age: \" << age << \", Name: \" << name << std::endl;\n    }\n};\n\nint main() {\n    Pet myPet(\"Dog\", 5, \"Buddy\");\n    myPet.displayDetails();\n    return 0;\n}\n```"
  },
  {
    "task": "Formulate a class for a product in a store with properties for SKU, name, and price, and a method to apply a discount.",
    "code": "```cpp\n#include <string>\n\nclass Product {\nprivate:\n    std::string SKU;\n    std::string name;\n    double price;\n\npublic:\n    // Constructor\n    Product(const std::string& sku, const std::string& pname, double pprice)\n        : SKU(sku), name(pname), price(pprice) {}\n\n    // Method to apply a discount\n    void applyDiscount(double discount) {\n        if (discount > 0 && discount < 1) {\n            price -= price * discount;\n        }\n    }\n\n    // Getters\n    std::string getSKU() const { return SKU; }\n    std::string getName() const { return name; }\n    double getPrice() const { return price; }\n};\n```"
  },
  {
    "task": "Develop a class for a university course with attributes for course code, title, and credits, and a method to enroll a student.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n\nclass UniversityCourse {\nprivate:\n    std::string courseCode;\n    std::string title;\n    int credits;\n    std::vector<std::string> enrolledStudents;\n\npublic:\n    UniversityCourse(const std::string &code, const std::string &title, int credits)\n        : courseCode(code), title(title), credits(credits) {}\n\n    void enrollStudent(const std::string &studentName) {\n        enrolledStudents.push_back(studentName);\n        std::cout << \"Student \" << studentName << \" enrolled in \" << title << std::endl;\n    }\n\n    std::string getCourseCode() const {\n        return courseCode;\n    }\n\n    std::string getTitle() const {\n        return title;\n    }\n\n    int getCredits() const {\n        return credits;\n    }\n};\n```"
  },
  {
    "task": "Create a class for a smart light bulb with attributes for color, brightness, and state (on/off), and a method to change the color.",
    "code": "```cpp\n#include <string>\n\nclass SmartLightBulb {\nprivate:\n    std::string color;\n    int brightness;\n    bool isOn;\n\npublic:\n    SmartLightBulb(std::string initialColor, int initialBrightness, bool initialState)\n        : color(initialColor), brightness(initialBrightness), isOn(initialState) {}\n\n    void changeColor(const std::string& newColor) {\n        color = newColor;\n    }\n\n    // Additional methods to access attributes can be added as needed\n};\n```"
  },
  {
    "task": "Design a class for a blog post with properties for title, content, and date published, and a method to edit the content.",
    "code": "```cpp\n#include <string>\n\nclass BlogPost {\nprivate:\n    std::string title;\n    std::string content;\n    std::string datePublished;\n\npublic:\n    BlogPost(const std::string& title, const std::string& content, const std::string& datePublished)\n        : title(title), content(content), datePublished(datePublished) {}\n\n    void editContent(const std::string& newContent) {\n        content = newContent;\n    }\n\n    std::string getTitle() const {\n        return title;\n    }\n\n    std::string getContent() const {\n        return content;\n    }\n\n    std::string getDatePublished() const {\n        return datePublished;\n    }\n};\n```"
  },
  {
    "task": "Build a class for a bank transaction with attributes for transaction ID, amount, and type, and a method to reverse the transaction.",
    "code": "```cpp\n#include <string>\n\nclass BankTransaction {\nprivate:\n    int transactionID;\n    double amount;\n    std::string type;\n\npublic:\n    BankTransaction(int id, double amt, const std::string& t)\n        : transactionID(id), amount(amt), type(t) {}\n\n    void reverseTransaction() {\n        amount = -amount;\n        type = (type == \"Credit\") ? \"Debit\" : \"Credit\";\n    }\n\n    int getTransactionID() const {\n        return transactionID;\n    }\n\n    double getAmount() const {\n        return amount;\n    }\n\n    std::string getType() const {\n        return type;\n    }\n};\n```"
  },
  {
    "task": "Implement a class for a city with properties for name, population, and area, and a method to calculate population density.",
    "code": "```cpp\n#include <string>\n\nclass City {\nprivate:\n    std::string name;\n    int population;\n    double area;\n\npublic:\n    City(const std::string& cityName, int cityPopulation, double cityArea)\n        : name(cityName), population(cityPopulation), area(cityArea) {}\n\n    double calculatePopulationDensity() const {\n        return population / area;\n    }\n};\n```"
  },
  {
    "task": "Construct a class for a library member with attributes for member ID, name, and borrowed books, and a method to borrow a book.",
    "code": "```cpp\n#include <string>\n#include <vector>\n\nclass LibraryMember {\nprivate:\n    int memberID;\n    std::string name;\n    std::vector<std::string> borrowedBooks;\n\npublic:\n    LibraryMember(int id, const std::string& memberName) : memberID(id), name(memberName) {}\n\n    void borrowBook(const std::string& bookTitle) {\n        borrowedBooks.push_back(bookTitle);\n    }\n\n    int getMemberID() const {\n        return memberID;\n    }\n\n    std::string getName() const {\n        return name;\n    }\n\n    std::vector<std::string> getBorrowedBooks() const {\n        return borrowedBooks;\n    }\n};\n```"
  },
  {
    "task": "Create a class for a flight reservation with attributes for flight number, passenger name, and seat number, and a method to change the seat.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass FlightReservation {\nprivate:\n    std::string flightNumber;\n    std::string passengerName;\n    std::string seatNumber;\n\npublic:\n    // Constructor\n    FlightReservation(const std::string& flightNum, const std::string& passenger, const std::string& seat)\n        : flightNumber(flightNum), passengerName(passenger), seatNumber(seat) {}\n\n    // Method to change the seat number\n    void changeSeat(const std::string& newSeat) {\n        seatNumber = newSeat;\n    }\n\n    // Getters for demonstration purposes\n    std::string getFlightNumber() const { return flightNumber; }\n    std::string getPassengerName() const { return passengerName; }\n    std::string getSeatNumber() const { return seatNumber; }\n};\n\nint main() {\n    FlightReservation reservation(\"AB123\", \"John Doe\", \"12A\");\n    std::cout << \"Flight Number: \" << reservation.getFlightNumber() << std::endl;\n    std::cout << \"Passenger Name: \" << reservation.getPassengerName() << std::endl;\n    std::cout << \"Seat Number: \" << reservation.getSeatNumber() << std::endl;\n\n    // Change seat\n    reservation.changeSeat(\"14B\");\n    std::cout << \"New Seat Number: \" << reservation.getSeatNumber() << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a class for a digital photo album with properties for album name, photos, and a method to add a new photo.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n\nclass DigitalPhotoAlbum {\nprivate:\n    std::string albumName;\n    std::vector<std::string> photos;\n\npublic:\n    DigitalPhotoAlbum(const std::string &name) : albumName(name) {}\n\n    void addPhoto(const std::string &photo) {\n        photos.push_back(photo);\n    }\n\n    void displayAlbum() const {\n        std::cout << \"Album: \" << albumName << std::endl;\n        for (const auto &photo : photos) {\n            std::cout << photo << std::endl;\n        }\n    }\n};\n\nint main() {\n    DigitalPhotoAlbum album(\"My Vacation Photos\");\n    album.addPhoto(\"beach.png\");\n    album.addPhoto(\"mountain.png\");\n    album.displayAlbum();\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a class for a task in a to-do list with attributes for description, deadline, and status, and a method to mark it as complete.",
    "code": "```cpp\n#include <string>\n\nclass Task {\nprivate:\n    std::string description;\n    std::string deadline;\n    bool status;\n\npublic:\n    Task(const std::string& desc, const std::string& dl) \n        : description(desc), deadline(dl), status(false) {}\n\n    void markAsComplete() {\n        status = true;\n    }\n\n    std::string getDescription() const {\n        return description;\n    }\n\n    std::string getDeadline() const {\n        return deadline;\n    }\n\n    bool isComplete() const {\n        return status;\n    }\n};\n```"
  },
  {
    "task": "Formulate a class for a conference speaker with attributes for name, topic, and time slot, and a method to update the time slot.",
    "code": "```cpp\n#include <string>\n\nclass ConferenceSpeaker {\nprivate:\n    std::string name;\n    std::string topic;\n    std::string timeSlot;\n\npublic:\n    ConferenceSpeaker(const std::string& name, const std::string& topic, const std::string& timeSlot)\n        : name(name), topic(topic), timeSlot(timeSlot) {}\n\n    void updateTimeSlot(const std::string& newTimeSlot) {\n        timeSlot = newTimeSlot;\n    }\n\n    const std::string& getName() const { return name; }\n    const std::string& getTopic() const { return topic; }\n    const std::string& getTimeSlot() const { return timeSlot; }\n};\n```"
  },
  {
    "task": "Construct a class for a real estate property with attributes for address, price, and square footage, and a method to change the price.",
    "code": "```cpp\n#include <string>\n\nclass RealEstateProperty {\nprivate:\n    std::string address;\n    double price;\n    double squareFootage;\n\npublic:\n    RealEstateProperty(const std::string& addr, double p, double sqft)\n        : address(addr), price(p), squareFootage(sqft) {}\n\n    void changePrice(double newPrice) {\n        price = newPrice;\n    }\n};\n```"
  },
  {
    "task": "Create a class for a weather forecast with properties for temperature, humidity, and condition, and a method to update the forecast.",
    "code": "```cpp\n#include <string>\n\nclass WeatherForecast {\nprivate:\n    double temperature;\n    double humidity;\n    std::string condition;\n\npublic:\n    WeatherForecast(double temp, double hum, const std::string& cond)\n        : temperature(temp), humidity(hum), condition(cond) {}\n\n    void updateForecast(double temp, double hum, const std::string& cond) {\n        temperature = temp;\n        humidity = hum;\n        condition = cond;\n    }\n\n    double getTemperature() const { return temperature; }\n    double getHumidity() const { return humidity; }\n    std::string getCondition() const { return condition; }\n};\n```"
  },
  {
    "task": "Build a class for a musical instrument with attributes for type, brand, and model, and a method to play a note.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass MusicalInstrument {\nprivate:\n    std::string type;\n    std::string brand;\n    std::string model;\n\npublic:\n    MusicalInstrument(const std::string& type, const std::string& brand, const std::string& model)\n        : type(type), brand(brand), model(model) {}\n\n    void playNote(const std::string& note) const {\n        std::cout << \"Playing note \" << note << \" on \" << brand << \" \" << model << \" \" << type << \".\" << std::endl;\n    }\n\n    // Getters for the attributes\n    std::string getType() const { return type; }\n    std::string getBrand() const { return brand; }\n    std::string getModel() const { return model; }\n};\n\nint main() {\n    MusicalInstrument guitar(\"Guitar\", \"Fender\", \"Stratocaster\");\n    guitar.playNote(\"C#\");\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a class for a sports team with attributes for team name, players, and coach, and a method to add a new player.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n\nclass SportsTeam {\nprivate:\n    std::string teamName;\n    std::vector<std::string> players;\n    std::string coach;\n\npublic:\n    SportsTeam(const std::string& name, const std::string& coachName) \n        : teamName(name), coach(coachName) {}\n\n    void addPlayer(const std::string& playerName) {\n        players.push_back(playerName);\n    }\n\n    void displayTeam() const {\n        std::cout << \"Team Name: \" << teamName << \"\\n\";\n        std::cout << \"Coach: \" << coach << \"\\n\";\n        std::cout << \"Players: \";\n        for (const auto& player : players) {\n            std::cout << player << \" \";\n        }\n        std::cout << \"\\n\";\n    }\n};\n```"
  },
  {
    "task": "Implement a class for a podcast episode with attributes for title, duration, and host, and a method to play the episode.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass PodcastEpisode {\nprivate:\n    std::string title;\n    int duration; // in minutes\n    std::string host;\n\npublic:\n    PodcastEpisode(const std::string& t, int d, const std::string& h)\n        : title(t), duration(d), host(h) {}\n\n    void play() const {\n        std::cout << \"Now playing: \" << title << \" hosted by \" << host \n                  << \". Duration: \" << duration << \" minutes.\" << std::endl;\n    }\n};\n\nint main() {\n    PodcastEpisode episode(\"The Tech Talk\", 45, \"Jane Doe\");\n    episode.play();\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a class for a space mission with properties for mission name, crew, and launch date, and a method to launch the mission.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass SpaceMission {\nprivate:\n    std::string missionName;\n    int crew;\n    std::string launchDate;\n\npublic:\n    SpaceMission(const std::string& name, int crewCount, const std::string& date)\n        : missionName(name), crew(crewCount), launchDate(date) {}\n\n    void launchMission() {\n        std::cout << \"Launching mission: \" << missionName << std::endl;\n        std::cout << \"Crew size: \" << crew << std::endl;\n        std::cout << \"Launch date: \" << launchDate << std::endl;\n    }\n};\n\nint main() {\n    SpaceMission mission(\"Apollo 11\", 3, \"1969-07-16\");\n    mission.launchMission();\n    return 0;\n}\n```"
  },
  {
    "task": "Create a class for a virtual assistant with attributes for name, language, and skills, and a method to add a new skill.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n\nclass VirtualAssistant {\nprivate:\n    std::string name;\n    std::string language;\n    std::vector<std::string> skills;\n\npublic:\n    VirtualAssistant(const std::string& assistantName, const std::string& assistantLanguage)\n        : name(assistantName), language(assistantLanguage) {}\n\n    void addSkill(const std::string& skill) {\n        skills.push_back(skill);\n    }\n};\n\nint main() {\n    VirtualAssistant assistant(\"Alexa\", \"English\");\n    assistant.addSkill(\"Weather Forecasting\");\n    return 0;\n}\n```"
  },
  {
    "task": "Formulate a class for a news article with attributes for headline, content, and author, and a method to publish the article.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass NewsArticle {\nprivate:\n    std::string headline;\n    std::string content;\n    std::string author;\n\npublic:\n    NewsArticle(const std::string& h, const std::string& c, const std::string& a)\n        : headline(h), content(c), author(a) {}\n\n    void publish() const {\n        std::cout << \"Headline: \" << headline << std::endl;\n        std::cout << \"Content: \" << content << std::endl;\n        std::cout << \"Author: \" << author << std::endl;\n    }\n};\n\nint main() {\n    NewsArticle article(\"Breaking News\", \"Details of the news content.\", \"John Doe\");\n    article.publish();\n    return 0;\n}\n```"
  },
  {
    "task": "Construct a class for a hiking trail with attributes for trail name, length, and difficulty, and a method to update the difficulty.",
    "code": "```cpp\n#include <string>\n\nclass HikingTrail {\nprivate:\n    std::string trailName;\n    double length;\n    std::string difficulty;\n\npublic:\n    HikingTrail(const std::string& name, double len, const std::string& diff)\n        : trailName(name), length(len), difficulty(diff) {}\n\n    void updateDifficulty(const std::string& newDifficulty) {\n        difficulty = newDifficulty;\n    }\n\n    // Accessor methods (optional)\n    std::string getTrailName() const { return trailName; }\n    double getLength() const { return length; }\n    std::string getDifficulty() const { return difficulty; }\n};\n```"
  },
  {
    "task": "Design a class for a subscription service with properties for service name, subscriber count, and subscription fee, and a method to update the fee.",
    "code": "```cpp\n#include <string>\n\nclass SubscriptionService {\nprivate:\n    std::string serviceName;\n    int subscriberCount;\n    double subscriptionFee;\n\npublic:\n    SubscriptionService(const std::string &name, int count, double fee)\n        : serviceName(name), subscriberCount(count), subscriptionFee(fee) {}\n\n    void updateSubscriptionFee(double newFee) {\n        subscriptionFee = newFee;\n    }\n\n    // Accessors\n    std::string getServiceName() const { return serviceName; }\n    int getSubscriberCount() const { return subscriberCount; }\n    double getSubscriptionFee() const { return subscriptionFee; }\n};\n```"
  },
  {
    "task": "Build a class for a digital wallet with attributes for balance, transaction history, and a method to add funds.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n\nclass DigitalWallet {\nprivate:\n    double balance;\n    std::vector<std::string> transactionHistory;\n\npublic:\n    DigitalWallet() : balance(0.0) {}\n\n    void addFunds(double amount) {\n        if (amount > 0) {\n            balance += amount;\n            transactionHistory.push_back(\"Added funds: \" + std::to_string(amount));\n        }\n    }\n\n    double getBalance() const {\n        return balance;\n    }\n\n    const std::vector<std::string>& getTransactionHistory() const {\n        return transactionHistory;\n    }\n};\n\nint main() {\n    DigitalWallet wallet;\n    wallet.addFunds(100.0);\n\n    std::cout << \"Balance: \" << wallet.getBalance() << std::endl;\n    for (const auto& transaction : wallet.getTransactionHistory()) {\n        std::cout << transaction << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a class for a cooking recipe with attributes for name, ingredients, and instructions, and a method to update the instructions.",
    "code": "```cpp\n#include <string>\n#include <vector>\n\nclass Recipe {\nprivate:\n    std::string name;\n    std::vector<std::string> ingredients;\n    std::string instructions;\n\npublic:\n    Recipe(const std::string& recipeName, const std::vector<std::string>& recipeIngredients, const std::string& recipeInstructions)\n        : name(recipeName), ingredients(recipeIngredients), instructions(recipeInstructions) {}\n\n    void updateInstructions(const std::string& newInstructions) {\n        instructions = newInstructions;\n    }\n\n    std::string getName() const {\n        return name;\n    }\n\n    std::vector<std::string> getIngredients() const {\n        return ingredients;\n    }\n\n    std::string getInstructions() const {\n        return instructions;\n    }\n};\n```"
  },
  {
    "task": "Develop a class for a time zone with properties for zone name, offset, and a method to convert time from another time zone.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass TimeZone {\nprivate:\n    std::string zoneName;\n    int offset; // Offset in hours from UTC\n\npublic:\n    // Constructor\n    TimeZone(const std::string& name, int off) : zoneName(name), offset(off) {}\n\n    // Method to convert time from another time zone\n    int convertTime(int hour, const TimeZone& otherZone) const {\n        int convertedHour = hour + (offset - otherZone.offset);\n        \n        // Adjusting for 24-hour wrap-around\n        if (convertedHour < 0) {\n            convertedHour += 24;\n        } else if (convertedHour >= 24) {\n            convertedHour -= 24;\n        }\n        \n        return convertedHour;\n    }\n\n    // Getter for zone name\n    std::string getZoneName() const {\n        return zoneName;\n    }\n\n    // Getter for offset\n    int getOffset() const {\n        return offset;\n    }\n};\n\nint main() {\n    TimeZone tz1(\"UTC\", 0);\n    TimeZone tz2(\"EST\", -5);\n\n    int estTime = 10; // 10 AM in EST\n    int utcTime = tz1.convertTime(estTime, tz2);\n\n    std::cout << \"The time in \" << tz1.getZoneName() << \" is \" << utcTime << \":00 when it's \" << estTime << \":00 in \" << tz2.getZoneName() << \".\" << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a class for a camera with attributes for resolution, brand, and model, and a method to take a picture.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass Camera {\nprivate:\n    std::string resolution;\n    std::string brand;\n    std::string model;\n\npublic:\n    Camera(const std::string& res, const std::string& br, const std::string& mod)\n        : resolution(res), brand(br), model(mod) {}\n\n    void takePicture() {\n        std::cout << \"Taking a picture with \" << brand << \" \" << model\n                  << \" at \" << resolution << \" resolution.\" << std::endl;\n    }\n};\n\nint main() {\n    Camera myCamera(\"12MP\", \"Canon\", \"EOS 5D\");\n    myCamera.takePicture();\n    return 0;\n}\n```"
  },
  {
    "task": "Design a class for a gaming console with properties for brand, model, and storage capacity, and a method to install a game.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass GamingConsole {\nprivate:\n    std::string brand;\n    std::string model;\n    int storageCapacity; // in GB\n\npublic:\n    GamingConsole(const std::string& brand, const std::string& model, int storageCapacity)\n        : brand(brand), model(model), storageCapacity(storageCapacity) {}\n\n    void installGame(const std::string& gameName) {\n        std::cout << \"Installing game: \" << gameName << \" on \" << brand << \" \" << model << std::endl;\n    }\n\n    // Optional: Add getters for properties\n    std::string getBrand() const { return brand; }\n    std::string getModel() const { return model; }\n    int getStorageCapacity() const { return storageCapacity; }\n};\n\nint main() {\n    GamingConsole console(\"BrandX\", \"ModelY\", 512);\n    console.installGame(\"Awesome Game\");\n\n    return 0;\n}\n```"
  },
  {
    "task": "Formulate a class for a museum exhibit with attributes for exhibit name, artist, and year, and a method to update the year.",
    "code": "```cpp\n#include <string>\n\nclass MuseumExhibit {\nprivate:\n    std::string exhibitName;\n    std::string artist;\n    int year;\n\npublic:\n    MuseumExhibit(const std::string& name, const std::string& artistName, int exhibitYear)\n        : exhibitName(name), artist(artistName), year(exhibitYear) {}\n\n    void updateYear(int newYear) {\n        year = newYear;\n    }\n\n    std::string getExhibitName() const {\n        return exhibitName;\n    }\n\n    std::string getArtist() const {\n        return artist;\n    }\n\n    int getYear() const {\n        return year;\n    }\n};\n```"
  },
  {
    "task": "Construct a class for a fitness tracker with attributes for steps, calories burned, and heart rate, and a method to add steps.",
    "code": "```cpp\nclass FitnessTracker {\nprivate:\n    int steps;\n    int caloriesBurned;\n    int heartRate;\n\npublic:\n    FitnessTracker() : steps(0), caloriesBurned(0), heartRate(0) {}\n\n    void addSteps(int stepCount) {\n        steps += stepCount;\n    }\n\n    int getSteps() const {\n        return steps;\n    }\n\n    int getCaloriesBurned() const {\n        return caloriesBurned;\n    }\n\n    int getHeartRate() const {\n        return heartRate;\n    }\n\n    void setCaloriesBurned(int calories) {\n        caloriesBurned = calories;\n    }\n\n    void setHeartRate(int rate) {\n        heartRate = rate;\n    }\n};\n```"
  },
  {
    "task": "Build a class for an aquarium with properties for tank size, fish species, and water temperature, and a method to add a new fish.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n\nclass Aquarium {\nprivate:\n    double tankSize; // in liters\n    std::vector<std::string> fishSpecies;\n    double waterTemperature; // in Celsius\n\npublic:\n    Aquarium(double size, double temperature)\n        : tankSize(size), waterTemperature(temperature) {}\n\n    void addFish(const std::string& species) {\n        fishSpecies.push_back(species);\n    }\n\n    void displayInfo() const {\n        std::cout << \"Tank Size: \" << tankSize << \" liters\\n\";\n        std::cout << \"Water Temperature: \" << waterTemperature << \" \u00b0C\\n\";\n        std::cout << \"Fish Species: \";\n        for (const auto& species : fishSpecies) {\n            std::cout << species << \" \";\n        }\n        std::cout << std::endl;\n    }\n};\n\nint main() {\n    Aquarium myAquarium(100.0, 25.0);\n    myAquarium.addFish(\"Goldfish\");\n    myAquarium.addFish(\"Guppy\");\n    myAquarium.displayInfo();\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a class for a chat message with attributes for sender, content, and timestamp, and a method to edit the content.",
    "code": "```cpp\n#include <string>\n\nclass ChatMessage {\nprivate:\n    std::string sender;\n    std::string content;\n    std::string timestamp;\n\npublic:\n    ChatMessage(const std::string& sender, const std::string& content, const std::string& timestamp)\n        : sender(sender), content(content), timestamp(timestamp) {}\n\n    void editContent(const std::string& newContent) {\n        content = newContent;\n    }\n\n    std::string getSender() const {\n        return sender;\n    }\n\n    std::string getContent() const {\n        return content;\n    }\n\n    std::string getTimestamp() const {\n        return timestamp;\n    }\n};\n```"
  },
  {
    "task": "Design a class for a vending machine with properties for items available, prices, and a method to dispense an item.",
    "code": "```cpp\n#include <iostream>\n#include <unordered_map>\n#include <string>\n\nclass VendingMachine {\nprivate:\n    std::unordered_map<std::string, double> items;\n\npublic:\n    VendingMachine() {\n        // Initialize with some items and prices\n        items[\"Soda\"] = 1.25;\n        items[\"Chips\"] = 0.75;\n        items[\"Candy\"] = 0.50;\n    }\n\n    void dispenseItem(const std::string& itemName) {\n        auto it = items.find(itemName);\n        if (it != items.end()) {\n            std::cout << \"Dispensing \" << itemName << \" for $\" << it->second << std::endl;\n        } else {\n            std::cout << \"Item not available.\" << std::endl;\n        }\n    }\n};\n\nint main() {\n    VendingMachine vm;\n    vm.dispenseItem(\"Soda\");\n    vm.dispenseItem(\"Chips\");\n    vm.dispenseItem(\"Water\");\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a class for a digital clock with attributes for current time, time zone, and a method to set an alarm.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass DigitalClock {\nprivate:\n    std::string currentTime;\n    std::string timeZone;\n    std::string alarmTime;\n\npublic:\n    DigitalClock(const std::string& time, const std::string& zone)\n        : currentTime(time), timeZone(zone) {}\n\n    void setAlarm(const std::string& alarm) {\n        alarmTime = alarm;\n    }\n\n    std::string getCurrentTime() const {\n        return currentTime;\n    }\n\n    std::string getTimeZone() const {\n        return timeZone;\n    }\n\n    std::string getAlarmTime() const {\n        return alarmTime;\n    }\n};\n\nint main() {\n    DigitalClock clock(\"12:00\", \"EST\");\n    clock.setAlarm(\"06:30\");\n\n    std::cout << \"Current Time: \" << clock.getCurrentTime() << std::endl;\n    std::cout << \"Time Zone: \" << clock.getTimeZone() << std::endl;\n    std::cout << \"Alarm Time: \" << clock.getAlarmTime() << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a class for a historical figure with attributes for name, birthdate, and achievements, and a method to add an achievement.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n\nclass HistoricalFigure {\nprivate:\n    std::string name;\n    std::string birthdate;\n    std::vector<std::string> achievements;\n\npublic:\n    HistoricalFigure(const std::string &name, const std::string &birthdate)\n        : name(name), birthdate(birthdate) {}\n\n    void addAchievement(const std::string &achievement) {\n        achievements.push_back(achievement);\n    }\n\n    void displayInformation() const {\n        std::cout << \"Name: \" << name << std::endl;\n        std::cout << \"Birthdate: \" << birthdate << std::endl;\n        std::cout << \"Achievements: \" << std::endl;\n        for (const auto &achievement : achievements) {\n            std::cout << \"- \" << achievement << std::endl;\n        }\n    }\n};\n\nint main() {\n    HistoricalFigure figure(\"Ada Lovelace\", \"10 December 1815\");\n    figure.addAchievement(\"First computer programmer\");\n    figure.addAchievement(\"Pioneer of computer science\");\n    figure.displayInformation();\n\n    return 0;\n}\n```"
  },
  {
    "task": "Formulate a class for a travel itinerary with attributes for destinations, travel dates, and activities, and a method to add a destination.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n\nclass TravelItinerary {\nprivate:\n    std::vector<std::string> destinations;\n    std::vector<std::string> travelDates;\n    std::vector<std::string> activities;\n\npublic:\n    void addDestination(const std::string& destination) {\n        destinations.push_back(destination);\n    }\n\n    // Additional methods to manage travel dates and activities can be added here\n};\n\nint main() {\n    TravelItinerary itinerary;\n    itinerary.addDestination(\"Paris\");\n    // Further operations can be done here\n\n    return 0;\n}\n```"
  },
  {
    "task": "Construct a class for a fashion brand with properties for brand name, founder, and product lines, and a method to launch a new product line.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n\nclass FashionBrand {\nprivate:\n    std::string brandName;\n    std::string founder;\n    std::vector<std::string> productLines;\n\npublic:\n    FashionBrand(const std::string& name, const std::string& founderName)\n        : brandName(name), founder(founderName) {}\n\n    void launchProductLine(const std::string& newProductLine) {\n        productLines.push_back(newProductLine);\n        std::cout << \"Launched new product line: \" << newProductLine << std::endl;\n    }\n\n    std::string getBrandName() const {\n        return brandName;\n    }\n\n    std::string getFounder() const {\n        return founder;\n    }\n\n    const std::vector<std::string>& getProductLines() const {\n        return productLines;\n    }\n};\n```"
  },
  {
    "task": "Create a class for a video game with attributes for title, genre, and rating, and a method to update the rating.",
    "code": "```cpp\n#include <string>\n\nclass VideoGame {\nprivate:\n    std::string title;\n    std::string genre;\n    double rating;\n\npublic:\n    VideoGame(const std::string& t, const std::string& g, double r)\n        : title(t), genre(g), rating(r) {}\n\n    void updateRating(double newRating) {\n        rating = newRating;\n    }\n\n    // Accessor methods can be added if needed\n    std::string getTitle() const { return title; }\n    std::string getGenre() const { return genre; }\n    double getRating() const { return rating; }\n};\n```"
  },
  {
    "task": "Build a class for a scientific experiment with attributes for experiment name, hypothesis, and results, and a method to record results.",
    "code": "```cpp\n#include <string>\n\nclass ScientificExperiment {\nprivate:\n    std::string experimentName;\n    std::string hypothesis;\n    std::string results;\n\npublic:\n    ScientificExperiment(const std::string& name, const std::string& hypo)\n        : experimentName(name), hypothesis(hypo), results(\"\") {}\n\n    void recordResults(const std::string& newResults) {\n        results = newResults;\n    }\n\n    std::string getExperimentName() const {\n        return experimentName;\n    }\n\n    std::string getHypothesis() const {\n        return hypothesis;\n    }\n\n    std::string getResults() const {\n        return results;\n    }\n};\n```"
  },
  {
    "task": "Design a class for a gourmet dish with properties for dish name, ingredients, and cooking time, and a method to change cooking time.",
    "code": "```cpp\n#include <string>\n#include <vector>\n\nclass GourmetDish {\nprivate:\n    std::string dishName;\n    std::vector<std::string> ingredients;\n    int cookingTime; // in minutes\n\npublic:\n    GourmetDish(const std::string& name, const std::vector<std::string>& ingr, int time)\n        : dishName(name), ingredients(ingr), cookingTime(time) {}\n\n    void changeCookingTime(int newTime) {\n        cookingTime = newTime;\n    }\n\n    // Additional methods to access the properties can be added here\n};\n```"
  },
  {
    "task": "Implement a class for a political office with attributes for office title, holder, and term length, and a method to change the holder.",
    "code": "```cpp\n#include <string>\n\nclass PoliticalOffice {\nprivate:\n    std::string officeTitle;\n    std::string holder;\n    int termLength;\n\npublic:\n    PoliticalOffice(const std::string &title, const std::string &holderName, int length)\n        : officeTitle(title), holder(holderName), termLength(length) {}\n\n    void changeHolder(const std::string &newHolder) {\n        holder = newHolder;\n    }\n\n    std::string getOfficeTitle() const {\n        return officeTitle;\n    }\n\n    std::string getHolder() const {\n        return holder;\n    }\n\n    int getTermLength() const {\n        return termLength;\n    }\n};\n```"
  },
  {
    "task": "Develop a class for an astronomical object with properties for name, type, and distance from Earth, and a method to update the distance.",
    "code": "```cpp\n#include <string>\n\nclass AstronomicalObject {\nprivate:\n    std::string name;\n    std::string type;\n    double distanceFromEarth;\n\npublic:\n    AstronomicalObject(const std::string& objName, const std::string& objType, double distance)\n        : name(objName), type(objType), distanceFromEarth(distance) {}\n\n    void updateDistance(double newDistance) {\n        distanceFromEarth = newDistance;\n    }\n\n    std::string getName() const {\n        return name;\n    }\n\n    std::string getType() const {\n        return type;\n    }\n\n    double getDistanceFromEarth() const {\n        return distanceFromEarth;\n    }\n};\n```"
  },
  {
    "task": "Formulate a class for a public transportation route with attributes for route number, stops, and schedule, and a method to add a stop.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n\nclass PublicTransportRoute {\npublic:\n    PublicTransportRoute(int routeNumber, const std::vector<std::string>& stops, const std::string& schedule)\n        : routeNumber(routeNumber), stops(stops), schedule(schedule) {}\n\n    void addStop(const std::string& stop) {\n        stops.push_back(stop);\n    }\n\n    int getRouteNumber() const {\n        return routeNumber;\n    }\n\n    std::vector<std::string> getStops() const {\n        return stops;\n    }\n\n    std::string getSchedule() const {\n        return schedule;\n    }\n\nprivate:\n    int routeNumber;\n    std::vector<std::string> stops;\n    std::string schedule;\n};\n\nint main() {\n    std::vector<std::string> initialStops = {\"Stop1\", \"Stop2\", \"Stop3\"};\n    PublicTransportRoute route(101, initialStops, \"08:00-22:00\");\n    route.addStop(\"Stop4\");\n\n    std::cout << \"Route Number: \" << route.getRouteNumber() << std::endl;\n    std::cout << \"Schedule: \" << route.getSchedule() << std::endl;\n\n    std::cout << \"Stops: \";\n    for (const auto& stop : route.getStops()) {\n        std::cout << stop << \" \";\n    }\n    std::cout << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Construct a class for a board game with properties for game name, player count, and rules, and a method to change the rules.",
    "code": "```cpp\n#include <string>\n\nclass BoardGame {\nprivate:\n    std::string gameName;\n    int playerCount;\n    std::string rules;\n\npublic:\n    BoardGame(const std::string& name, int count, const std::string& gameRules)\n        : gameName(name), playerCount(count), rules(gameRules) {}\n\n    void changeRules(const std::string& newRules) {\n        rules = newRules;\n    }\n\n    std::string getGameName() const {\n        return gameName;\n    }\n\n    int getPlayerCount() const {\n        return playerCount;\n    }\n\n    std::string getRules() const {\n        return rules;\n    }\n};\n```"
  },
  {
    "task": "Create a class for a customer loyalty program with attributes for program name, points, and rewards, and a method to redeem points.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass CustomerLoyaltyProgram {\nprivate:\n    std::string programName;\n    int points;\n    std::string rewards;\n\npublic:\n    CustomerLoyaltyProgram(const std::string& name, int pts, const std::string& rwd)\n        : programName(name), points(pts), rewards(rwd) {}\n\n    void redeemPoints(int pts) {\n        if (pts <= points) {\n            points -= pts;\n            std::cout << \"Redeemed \" << pts << \" points. Remaining points: \" << points << std::endl;\n        } else {\n            std::cout << \"Not enough points to redeem.\" << std::endl;\n        }\n    }\n\n    std::string getProgramName() const { return programName; }\n    int getPoints() const { return points; }\n    std::string getRewards() const { return rewards; }\n};\n\nint main() {\n    CustomerLoyaltyProgram customer(\"SuperSaver\", 100, \"Free Coffee\");\n    customer.redeemPoints(50);\n    return 0;\n}\n```"
  },
  {
    "task": "Design a class for an art gallery with properties for gallery name, location, and exhibitions, and a method to add a new exhibition.",
    "code": "```cpp\n#include <string>\n#include <vector>\n\nclass ArtGallery {\nprivate:\n    std::string galleryName;\n    std::string location;\n    std::vector<std::string> exhibitions;\n\npublic:\n    ArtGallery(const std::string& name, const std::string& loc)\n        : galleryName(name), location(loc) {}\n\n    void addExhibition(const std::string& exhibition) {\n        exhibitions.push_back(exhibition);\n    }\n\n    // Optional getters for properties\n    std::string getGalleryName() const {\n        return galleryName;\n    }\n\n    std::string getLocation() const {\n        return location;\n    }\n\n    std::vector<std::string> getExhibitions() const {\n        return exhibitions;\n    }\n};\n```"
  },
  {
    "task": "Build a class for a personal blog with attributes for blog name, posts, and a method to add a new post.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n\nclass PersonalBlog {\nprivate:\n    std::string blogName;\n    std::vector<std::string> posts;\n\npublic:\n    PersonalBlog(const std::string& name) : blogName(name) {}\n\n    void addPost(const std::string& post) {\n        posts.push_back(post);\n    }\n\n    void displayPosts() const {\n        std::cout << \"Blog: \" << blogName << std::endl;\n        for (const auto& post : posts) {\n            std::cout << \"- \" << post << std::endl;\n        }\n    }\n};\n\nint main() {\n    PersonalBlog myBlog(\"My Personal Blog\");\n    myBlog.addPost(\"First post\");\n    myBlog.addPost(\"Another post\");\n    myBlog.displayPosts();\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a class for a mobile application with properties for app name, version, and developer, and a method to update the version.",
    "code": "```cpp\n#include <string>\n\nclass MobileApp {\nprivate:\n    std::string appName;\n    std::string version;\n    std::string developer;\n\npublic:\n    MobileApp(const std::string &appName, const std::string &version, const std::string &developer)\n        : appName(appName), version(version), developer(developer) {}\n\n    void updateVersion(const std::string &newVersion) {\n        version = newVersion;\n    }\n\n    std::string getAppName() const {\n        return appName;\n    }\n\n    std::string getVersion() const {\n        return version;\n    }\n\n    std::string getDeveloper() const {\n        return developer;\n    }\n};\n```"
  },
  {
    "task": "Develop a class for a language translator with attributes for source language, target language, and translation method, and a method to translate a text.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass LanguageTranslator {\nprivate:\n    std::string sourceLanguage;\n    std::string targetLanguage;\n    std::string translationMethod;\n\npublic:\n    LanguageTranslator(const std::string &source, const std::string &target, const std::string &method)\n        : sourceLanguage(source), targetLanguage(target), translationMethod(method) {}\n\n    std::string translate(const std::string &text) {\n        // Placeholder for translation logic\n        return \"Translated text from \" + sourceLanguage + \" to \" + targetLanguage;\n    }\n\n    const std::string &getSourceLanguage() const {\n        return sourceLanguage;\n    }\n\n    const std::string &getTargetLanguage() const {\n        return targetLanguage;\n    }\n\n    const std::string &getTranslationMethod() const {\n        return translationMethod;\n    }\n};\n\nint main() {\n    LanguageTranslator translator(\"English\", \"Spanish\", \"Neural Network\");\n    std::string text = \"Hello, world!\";\n    std::cout << translator.translate(text) << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Formulate a class for a culinary school with properties for school name, courses offered, and a method to add a new course.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n\nclass CulinarySchool {\nprivate:\n    std::string schoolName;\n    std::vector<std::string> coursesOffered;\n\npublic:\n    CulinarySchool(const std::string &name) : schoolName(name) {}\n\n    void addCourse(const std::string &course) {\n        coursesOffered.push_back(course);\n    }\n\n    void displayCourses() const {\n        std::cout << \"Courses offered by \" << schoolName << \":\\n\";\n        for (const auto &course : coursesOffered) {\n            std::cout << \"- \" << course << \"\\n\";\n        }\n    }\n};\n\nint main() {\n    CulinarySchool school(\"Gourmet Academy\");\n    school.addCourse(\"Italian Cooking\");\n    school.addCourse(\"French Pastry\");\n    school.displayCourses();\n    return 0;\n}\n```"
  },
  {
    "task": "Construct a class for a musical band with attributes for band name, members, and genre, and a method to add a new member.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n\nclass Band {\nprivate:\n    std::string bandName;\n    std::vector<std::string> members;\n    std::string genre;\n\npublic:\n    Band(const std::string& name, const std::string& genreType) \n        : bandName(name), genre(genreType) {}\n\n    void addMember(const std::string& member) {\n        members.push_back(member);\n    }\n\n    void displayInfo() const {\n        std::cout << \"Band Name: \" << bandName << \"\\nGenre: \" << genre << \"\\nMembers:\\n\";\n        for (const auto& member : members) {\n            std::cout << \"- \" << member << \"\\n\";\n        }\n    }\n};\n\nint main() {\n    Band myBand(\"The Rockers\", \"Rock\");\n    myBand.addMember(\"Alice\");\n    myBand.addMember(\"Bob\");\n    myBand.displayInfo();\n    return 0;\n}\n```"
  },
  {
    "task": "Create a class for a television series with properties for series title, episodes, and network, and a method to add a new episode.",
    "code": "```cpp\n#include <string>\n#include <vector>\n\nclass TelevisionSeries {\nprivate:\n    std::string seriesTitle;\n    std::vector<std::string> episodes;\n    std::string network;\n\npublic:\n    // Constructor\n    TelevisionSeries(const std::string& title, const std::string& networkName)\n        : seriesTitle(title), network(networkName) {}\n\n    // Method to add a new episode\n    void addEpisode(const std::string& episodeTitle) {\n        episodes.push_back(episodeTitle);\n    }\n\n    // Getters for properties\n    std::string getSeriesTitle() const {\n        return seriesTitle;\n    }\n\n    std::vector<std::string> getEpisodes() const {\n        return episodes;\n    }\n\n    std::string getNetwork() const {\n        return network;\n    }\n};\n```"
  },
  {
    "task": "Design a class for a wildlife reserve with attributes for reserve name, species protected, and area size, and a method to expand the area.",
    "code": "```cpp\n#include <string>\n\nclass WildlifeReserve {\nprivate:\n    std::string reserveName;\n    std::string speciesProtected;\n    double areaSize;\n\npublic:\n    WildlifeReserve(const std::string& name, const std::string& species, double area)\n        : reserveName(name), speciesProtected(species), areaSize(area) {}\n\n    void expandArea(double additionalArea) {\n        areaSize += additionalArea;\n    }\n\n    std::string getReserveName() const {\n        return reserveName;\n    }\n\n    std::string getSpeciesProtected() const {\n        return speciesProtected;\n    }\n\n    double getAreaSize() const {\n        return areaSize;\n    }\n};\n```"
  },
  {
    "task": "Build a class for a luxury car with properties for brand, model, and price, and a method to update the price.",
    "code": "```cpp\n#include <string>\n\nclass LuxuryCar {\nprivate:\n    std::string brand;\n    std::string model;\n    double price;\n\npublic:\n    LuxuryCar(const std::string& brand, const std::string& model, double price)\n        : brand(brand), model(model), price(price) {}\n\n    void updatePrice(double newPrice) {\n        price = newPrice;\n    }\n\n    std::string getBrand() const {\n        return brand;\n    }\n\n    std::string getModel() const {\n        return model;\n    }\n\n    double getPrice() const {\n        return price;\n    }\n};\n```"
  },
  {
    "task": "Implement a class for a scientific journal with attributes for journal name, articles, and impact factor, and a method to add a new article.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n\nclass ScientificJournal {\nprivate:\n    std::string journalName;\n    std::vector<std::string> articles;\n    double impactFactor;\n\npublic:\n    ScientificJournal(const std::string& name, double factor)\n        : journalName(name), impactFactor(factor) {}\n\n    void addArticle(const std::string& article) {\n        articles.push_back(article);\n    }\n\n    // Additional methods can be added here\n};\n\nint main() {\n    ScientificJournal journal(\"Nature\", 42.7);\n    journal.addArticle(\"Quantum Entanglement and Information Theory\");\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a class for a historical monument with properties for monument name, location, and year established, and a method to update the location.",
    "code": "```cpp\n#include <string>\n\nclass HistoricalMonument {\nprivate:\n    std::string monumentName;\n    std::string location;\n    int yearEstablished;\n\npublic:\n    HistoricalMonument(const std::string& name, const std::string& loc, int year)\n        : monumentName(name), location(loc), yearEstablished(year) {}\n\n    void updateLocation(const std::string& newLocation) {\n        location = newLocation;\n    }\n\n    std::string getMonumentName() const {\n        return monumentName;\n    }\n\n    std::string getLocation() const {\n        return location;\n    }\n\n    int getYearEstablished() const {\n        return yearEstablished;\n    }\n};\n```"
  },
  {
    "task": "Formulate a class for an educational course with attributes for course title, instructor, and syllabus, and a method to update the syllabus.",
    "code": "```cpp\n#include <string>\n\nclass EducationalCourse {\nprivate:\n    std::string courseTitle;\n    std::string instructor;\n    std::string syllabus;\n\npublic:\n    EducationalCourse(const std::string& title, const std::string& instr, const std::string& syll)\n        : courseTitle(title), instructor(instr), syllabus(syll) {}\n\n    void updateSyllabus(const std::string& newSyllabus) {\n        syllabus = newSyllabus;\n    }\n\n    std::string getCourseTitle() const { return courseTitle; }\n    std::string getInstructor() const { return instructor; }\n    std::string getSyllabus() const { return syllabus; }\n};\n```"
  },
  {
    "task": "Construct a class for a city park with properties for park name, facilities, and opening hours, and a method to add a new facility.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n\nclass CityPark {\nprivate:\n    std::string parkName;\n    std::vector<std::string> facilities;\n    std::string openingHours;\n\npublic:\n    CityPark(const std::string& name, const std::string& hours)\n        : parkName(name), openingHours(hours) {}\n\n    void addFacility(const std::string& facility) {\n        facilities.push_back(facility);\n    }\n\n    void displayFacilities() const {\n        std::cout << \"Facilities in \" << parkName << \":\\n\";\n        for (const auto& facility : facilities) {\n            std::cout << \"- \" << facility << \"\\n\";\n        }\n    }\n\n    std::string getOpeningHours() const {\n        return openingHours;\n    }\n};\n\nint main() {\n    CityPark park(\"Central Park\", \"6 AM - 10 PM\");\n    park.addFacility(\"Playground\");\n    park.addFacility(\"Basketball Court\");\n    park.displayFacilities();\n    std::cout << \"Opening Hours: \" << park.getOpeningHours() << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Create a class for a fitness class with attributes for class name, instructor, and schedule, and a method to update the schedule.",
    "code": "```cpp\n#include <string>\n\nclass FitnessClass {\nprivate:\n    std::string className;\n    std::string instructor;\n    std::string schedule;\n\npublic:\n    FitnessClass(const std::string& name, const std::string& instr, const std::string& sched)\n        : className(name), instructor(instr), schedule(sched) {}\n\n    void updateSchedule(const std::string& newSchedule) {\n        schedule = newSchedule;\n    }\n\n    std::string getClassName() const {\n        return className;\n    }\n\n    std::string getInstructor() const {\n        return instructor;\n    }\n\n    std::string getSchedule() const {\n        return schedule;\n    }\n};\n```"
  },
  {
    "task": "Design a class for a virtual reality game with properties for game name, platform, and VR compatibility, and a method to change the platform.",
    "code": "```cpp\n#include <string>\n\nclass VRGame {\nprivate:\n    std::string gameName;\n    std::string platform;\n    bool vrCompatibility;\n\npublic:\n    VRGame(const std::string &name, const std::string &plat, bool vrCompat)\n        : gameName(name), platform(plat), vrCompatibility(vrCompat) {}\n\n    void changePlatform(const std::string &newPlatform) {\n        platform = newPlatform;\n    }\n\n    std::string getGameName() const {\n        return gameName;\n    }\n\n    std::string getPlatform() const {\n        return platform;\n    }\n\n    bool isVRCompatible() const {\n        return vrCompatibility;\n    }\n};\n```"
  },
  {
    "task": "Build a class for a mountain range with attributes for range name, highest peak, and countries covered, and a method to add a new peak.",
    "code": "```cpp\n#include <string>\n#include <vector>\n\nclass MountainRange {\npublic:\n    MountainRange(const std::string& rangeName, const std::string& highestPeak, const std::vector<std::string>& countries)\n        : rangeName(rangeName), highestPeak(highestPeak), countries(countries) {}\n\n    void addPeak(const std::string& newPeak) {\n        peaks.push_back(newPeak);\n    }\n\nprivate:\n    std::string rangeName;\n    std::string highestPeak;\n    std::vector<std::string> countries;\n    std::vector<std::string> peaks;\n};\n```"
  },
  {
    "task": "Implement a class for a documentary film with properties for title, director, and subject, and a method to update the subject.",
    "code": "```cpp\n#include <string>\n\nclass DocumentaryFilm {\nprivate:\n    std::string title;\n    std::string director;\n    std::string subject;\n\npublic:\n    DocumentaryFilm(const std::string& t, const std::string& d, const std::string& s)\n        : title(t), director(d), subject(s) {}\n\n    void updateSubject(const std::string& newSubject) {\n        subject = newSubject;\n    }\n\n    std::string getTitle() const {\n        return title;\n    }\n\n    std::string getDirector() const {\n        return director;\n    }\n\n    std::string getSubject() const {\n        return subject;\n    }\n};\n```"
  },
  {
    "task": "Develop a class for a classical music composition with attributes for composition name, composer, and duration, and a method to change the duration.",
    "code": "```cpp\n#include <string>\n\nclass ClassicalComposition {\nprivate:\n    std::string compositionName;\n    std::string composer;\n    double duration; // duration in minutes\n\npublic:\n    ClassicalComposition(const std::string& name, const std::string& comp, double dur)\n        : compositionName(name), composer(comp), duration(dur) {}\n\n    void setDuration(double newDuration) {\n        duration = newDuration;\n    }\n\n    std::string getCompositionName() const {\n        return compositionName;\n    }\n\n    std::string getComposer() const {\n        return composer;\n    }\n\n    double getDuration() const {\n        return duration;\n    }\n};\n```"
  },
  {
    "task": "Formulate a class for a public library with properties for library name, books available, and membership, and a method to add a new book.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n\nclass Library {\npublic:\n    std::string libraryName;\n    std::vector<std::string> booksAvailable;\n    int membership;\n\n    Library(const std::string& name, int mem) : libraryName(name), membership(mem) {}\n\n    void addBook(const std::string& book) {\n        booksAvailable.push_back(book);\n    }\n};\n\nint main() {\n    Library myLibrary(\"City Library\", 1000);\n    myLibrary.addBook(\"The Great Gatsby\");\n    std::cout << \"Library: \" << myLibrary.libraryName << \"\\n\";\n    std::cout << \"Number of books: \" << myLibrary.booksAvailable.size() << \"\\n\";\n    return 0;\n}\n```"
  },
  {
    "task": "Construct a class for a tech startup with attributes for startup name, founder, and funding, and a method to raise additional funding.",
    "code": "```cpp\n#include <string>\n\nclass TechStartup {\nprivate:\n    std::string startupName;\n    std::string founder;\n    double funding;\n\npublic:\n    TechStartup(const std::string& name, const std::string& founderName, double initialFunding)\n        : startupName(name), founder(founderName), funding(initialFunding) {}\n\n    void raiseFunding(double additionalFunding) {\n        funding += additionalFunding;\n    }\n\n    std::string getStartupName() const {\n        return startupName;\n    }\n\n    std::string getFounder() const {\n        return founder;\n    }\n\n    double getFunding() const {\n        return funding;\n    }\n};\n```"
  }
]