[
  {
    "task": "Write a function that takes two numbers and returns their sum.",
    "code": "```cpp\n#include <iostream>\n\nint sum(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int number1 = 5;\n    int number2 = 10;\n    std::cout << \"The sum is: \" << sum(number1, number2) << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Create a program that calculates the difference between two given integers.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    int a, b;\n    std::cout << \"Enter two integers: \";\n    std::cin >> a >> b;\n    int difference = a - b;\n    std::cout << \"The difference is: \" << difference << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Design a function to multiply two floating-point numbers and return the result.",
    "code": "```cpp\n#include <iostream>\n\ndouble multiply(double a, double b) {\n    return a * b;\n}\n\nint main() {\n    double num1 = 5.5;\n    double num2 = 3.2;\n    double result = multiply(num1, num2);\n    std::cout << \"The result is: \" << result << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function that divides two numbers and handles division by zero exceptions.",
    "code": "```cpp\n#include <iostream>\n#include <stdexcept>\n\ndouble divide(double numerator, double denominator) {\n    if (denominator == 0) {\n        throw std::invalid_argument(\"Division by zero is not allowed.\");\n    }\n    return numerator / denominator;\n}\n\nint main() {\n    try {\n        double result = divide(10.0, 0.0);\n        std::cout << \"Result: \" << result << std::endl;\n    } catch (const std::invalid_argument& e) {\n        std::cerr << \"Error: \" << e.what() << std::endl;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Build a calculator that can perform addition, subtraction, multiplication, and division on user-provided inputs.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    double num1, num2;\n    char operation;\n    \n    std::cout << \"Enter first number: \";\n    std::cin >> num1;\n    std::cout << \"Enter an operator (+, -, *, /): \";\n    std::cin >> operation;\n    std::cout << \"Enter second number: \";\n    std::cin >> num2;\n\n    switch (operation) {\n        case '+':\n            std::cout << \"Result: \" << num1 + num2 << std::endl;\n            break;\n        case '-':\n            std::cout << \"Result: \" << num1 - num2 << std::endl;\n            break;\n        case '*':\n            std::cout << \"Result: \" << num1 * num2 << std::endl;\n            break;\n        case '/':\n            if (num2 != 0)\n                std::cout << \"Result: \" << num1 / num2 << std::endl;\n            else\n                std::cout << \"Error: Division by zero\" << std::endl;\n            break;\n        default:\n            std::cout << \"Error: Invalid operator\" << std::endl;\n            break;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a script to compute the average of a list of numbers using arithmetic operations.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<double> numbers = {10.5, 20.3, 30.7, 40.2, 50.1};\n    double sum = 0.0;\n    \n    for(double num : numbers) {\n        sum += num;\n    }\n\n    double average = sum / numbers.size();\n    std::cout << \"Average: \" << average << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a function that returns the remainder of the division of two integers.",
    "code": "```cpp\n#include <iostream>\n\nint getRemainder(int a, int b) {\n    return a % b;\n}\n\nint main() {\n    int num1 = 10;\n    int num2 = 3;\n    std::cout << \"Remainder: \" << getRemainder(num1, num2) << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a function that can add a variable number of arguments and return the total.",
    "code": "```cpp\n#include <cstdarg>\n\nint addNumbers(int count, ...) {\n    va_list args;\n    va_start(args, count);\n    int total = 0;\n    for (int i = 0; i < count; ++i) {\n        total += va_arg(args, int);\n    }\n    va_end(args);\n    return total;\n}\n```"
  },
  {
    "task": "Write a program that subtracts a series of numbers from an initial value.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nint main() {\n    double initial_value;\n    std::cout << \"Enter the initial value: \";\n    std::cin >> initial_value;\n\n    int count;\n    std::cout << \"Enter the number of values to subtract: \";\n    std::cin >> count;\n\n    std::vector<double> numbers(count);\n    std::cout << \"Enter the numbers to subtract: \";\n    for (int i = 0; i < count; ++i) {\n        std::cin >> numbers[i];\n    }\n\n    double result = initial_value;\n    for (double num : numbers) {\n        result -= num;\n    }\n\n    std::cout << \"Result after subtraction: \" << result << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function that multiplies all elements in an array and returns the product.",
    "code": "```cpp\n#include <vector>\n\nint multiplyArrayElements(const std::vector<int>& arr) {\n    int product = 1;\n    for (int num : arr) {\n        product *= num;\n    }\n    return product;\n}\n```"
  },
  {
    "task": "Design a program that divides a number by another and rounds the result to two decimal places.",
    "code": "```cpp\n#include <iostream>\n#include <iomanip>\n\nint main() {\n    double numerator, denominator, result;\n\n    std::cout << \"Enter numerator: \";\n    std::cin >> numerator;\n    std::cout << \"Enter denominator: \";\n    std::cin >> denominator;\n\n    if (denominator != 0) {\n        result = numerator / denominator;\n        std::cout << \"Result: \" << std::fixed << std::setprecision(2) << result << std::endl;\n    } else {\n        std::cout << \"Error: Division by zero is not allowed.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a function that performs arithmetic operations on complex numbers.",
    "code": "```cpp\n#include <iostream>\n\nclass Complex {\npublic:\n    double real, imag;\n\n    Complex(double r = 0, double i = 0) : real(r), imag(i) {}\n\n    Complex operator+(const Complex& other) const {\n        return Complex(real + other.real, imag + other.imag);\n    }\n\n    Complex operator-(const Complex& other) const {\n        return Complex(real - other.real, imag - other.imag);\n    }\n\n    Complex operator*(const Complex& other) const {\n        return Complex(real * other.real - imag * other.imag, real * other.imag + imag * other.real);\n    }\n\n    Complex operator/(const Complex& other) const {\n        double denominator = other.real * other.real + other.imag * other.imag;\n        return Complex((real * other.real + imag * other.imag) / denominator, \n                       (imag * other.real - real * other.imag) / denominator);\n    }\n};\n\nint main() {\n    Complex c1(4, 5);\n    Complex c2(2, 3);\n\n    Complex sum = c1 + c2;\n    Complex difference = c1 - c2;\n    Complex product = c1 * c2;\n    Complex quotient = c1 / c2;\n\n    std::cout << \"Sum: \" << sum.real << \" + \" << sum.imag << \"i\\n\";\n    std::cout << \"Difference: \" << difference.real << \" + \" << difference.imag << \"i\\n\";\n    std::cout << \"Product: \" << product.real << \" + \" << product.imag << \"i\\n\";\n    std::cout << \"Quotient: \" << quotient.real << \" + \" << quotient.imag << \"i\\n\";\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function to calculate the area of a rectangle given its length and width using multiplication.",
    "code": "```cpp\n#include <iostream>\n\ndouble calculateRectangleArea(double length, double width) {\n    return length * width;\n}\n\nint main() {\n    double length = 5.0;\n    double width = 3.0;\n    double area = calculateRectangleArea(length, width);\n    std::cout << \"Area of the rectangle: \" << area << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Build a program that converts a price in dollars to another currency using multiplication with exchange rates.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    double dollars, exchangeRate, convertedAmount;\n\n    std::cout << \"Enter the amount in dollars: \";\n    std::cin >> dollars;\n\n    std::cout << \"Enter the exchange rate: \";\n    std::cin >> exchangeRate;\n\n    convertedAmount = dollars * exchangeRate;\n\n    std::cout << \"Converted amount: \" << convertedAmount << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function that checks if a number is divisible by another and returns a boolean.",
    "code": "```cpp\n#include <iostream>\n\nbool isDivisible(int numerator, int denominator) {\n    if (denominator == 0) {\n        return false; // avoid division by zero\n    }\n    return numerator % denominator == 0;\n}\n\nint main() {\n    std::cout << isDivisible(10, 2) << std::endl; // Outputs 1 (true)\n    std::cout << isDivisible(10, 3) << std::endl; // Outputs 0 (false)\n    return 0;\n}\n```"
  },
  {
    "task": "Write a script to sum the digits of an integer using arithmetic operations.",
    "code": "```cpp\n#include <iostream>\n\nint sumOfDigits(int number) {\n    int sum = 0;\n    while (number != 0) {\n        sum += number % 10;\n        number /= 10;\n    }\n    return sum;\n}\n\nint main() {\n    int number;\n    std::cout << \"Enter an integer: \";\n    std::cin >> number;\n    std::cout << \"Sum of digits: \" << sumOfDigits(number) << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a function that applies a discount percentage to a price using subtraction and multiplication.",
    "code": "```cpp\n#include <iostream>\n\ndouble applyDiscount(double price, double discountPercentage) {\n    double discount = price * (discountPercentage / 100.0);\n    double discountedPrice = price - discount;\n    return discountedPrice;\n}\n\nint main() {\n    double price = 100.0;\n    double discountPercentage = 15.0;\n    double finalPrice = applyDiscount(price, discountPercentage);\n    std::cout << \"Final Price: \" << finalPrice << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Create a program to calculate the yearly salary given an hourly wage and hours worked per week.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    double hourlyWage, hoursPerWeek;\n    \n    std::cout << \"Enter hourly wage: \";\n    std::cin >> hourlyWage;\n\n    std::cout << \"Enter hours worked per week: \";\n    std::cin >> hoursPerWeek;\n\n    double weeklySalary = hourlyWage * hoursPerWeek;\n    double yearlySalary = weeklySalary * 52;\n\n    std::cout << \"Yearly Salary: $\" << yearlySalary << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a function that calculates the compound interest over a given period using arithmetic operations.",
    "code": "```cpp\n#include <iostream>\n#include <cmath>\n\ndouble calculateCompoundInterest(double principal, double rate, int timesCompounded, int years) {\n    return principal * std::pow((1 + rate / timesCompounded), timesCompounded * years);\n}\n\nint main() {\n    double principal = 1000.0; // Initial amount\n    double rate = 0.05; // Interest rate\n    int timesCompounded = 4; // Quarterly\n    int years = 10; // Period of time\n\n    double compoundInterest = calculateCompoundInterest(principal, rate, timesCompounded, years);\n    std::cout << \"Compound Interest: \" << compoundInterest << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program that scales a 2D point by a given factor using multiplication.",
    "code": "```cpp\n#include <iostream>\n\nstruct Point {\n    double x, y;\n    \n    Point(double xVal, double yVal) : x(xVal), y(yVal) {}\n    \n    void scale(double factor) {\n        x *= factor;\n        y *= factor;\n    }\n    \n    void print() const {\n        std::cout << \"Point(\" << x << \", \" << y << \")\" << std::endl;\n    }\n};\n\nint main() {\n    Point p(3.0, 4.0);\n    double scaleFactor = 2.5;\n    \n    std::cout << \"Original \";\n    p.print();\n    \n    p.scale(scaleFactor);\n    \n    std::cout << \"Scaled \";\n    p.print();\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function that calculates the perimeter of a triangle given its side lengths.",
    "code": "```cpp\n#include <iostream>\n\ndouble calculatePerimeter(double side1, double side2, double side3) {\n    return side1 + side2 + side3;\n}\n\nint main() {\n    double a, b, c;\n    std::cout << \"Enter the lengths of the three sides of the triangle: \";\n    std::cin >> a >> b >> c;\n    double perimeter = calculatePerimeter(a, b, c);\n    std::cout << \"The perimeter of the triangle is: \" << perimeter << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Create a function to determine if three sides can form a right triangle using the Pythagorean theorem.",
    "code": "```cpp\n#include <algorithm>\n\nbool isRightTriangle(int a, int b, int c) {\n    int sides[3] = {a, b, c};\n    std::sort(sides, sides + 3);\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n}\n```"
  },
  {
    "task": "Write a script that calculates the total cost of items in a shopping cart using addition.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nint main() {\n    // Example prices of items in the shopping cart\n    std::vector<double> prices = {12.99, 23.75, 9.50, 5.25, 15.00};\n    double totalCost = 0.0;\n\n    for (double price : prices) {\n        totalCost += price;\n    }\n\n    std::cout << \"Total cost of items in the shopping cart: $\" << totalCost << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a function that returns the quotient and remainder of a division operation.",
    "code": "```cpp\n#include <utility>\n\nstd::pair<int, int> divide(int dividend, int divisor) {\n    int quotient = dividend / divisor;\n    int remainder = dividend % divisor;\n    return std::make_pair(quotient, remainder);\n}\n```"
  },
  {
    "task": "Build a program that simulates a basic checkout system using arithmetic operations for totals and discounts.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<double> prices = {19.99, 5.49, 3.99, 12.99};\n    double discountRate = 0.10; // 10% discount\n    double subtotal = 0.0;\n\n    for (double price : prices) {\n        subtotal += price;\n    }\n\n    double discount = subtotal * discountRate;\n    double total = subtotal - discount;\n\n    std::cout << \"Subtotal: $\" << subtotal << std::endl;\n    std::cout << \"Discount: $\" << discount << std::endl;\n    std::cout << \"Total: $\" << total << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function to calculate the distance between two points on a plane using subtraction and square roots.",
    "code": "```cpp\n#include <cmath>\n\ndouble calculateDistance(double x1, double y1, double x2, double y2) {\n    double dx = x2 - x1;\n    double dy = y2 - y1;\n    return std::sqrt(dx * dx + dy * dy);\n}\n```"
  },
  {
    "task": "Write a function that calculates the speed of a vehicle given distance and time using division.",
    "code": "```cpp\n#include <iostream>\n\ndouble calculateSpeed(double distance, double time) {\n    return distance / time;\n}\n\nint main() {\n    double distance = 150.0; // Example distance in kilometers\n    double time = 2.0; // Example time in hours\n\n    double speed = calculateSpeed(distance, time);\n    std::cout << \"Speed: \" << speed << \" km/h\" << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a program to compute the total minutes in a given number of hours using multiplication.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    int hours;\n    std::cout << \"Enter number of hours: \";\n    std::cin >> hours;\n\n    int totalMinutes = hours * 60;\n    std::cout << \"Total minutes: \" << totalMinutes << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a function that determines the number of dozens of eggs from a given total number of eggs.",
    "code": "```cpp\n#include <iostream>\n\nint calculateDozens(int totalEggs) {\n    return totalEggs / 12;\n}\n\nint main() {\n    int totalEggs = 28;\n    std::cout << \"Number of dozens: \" << calculateDozens(totalEggs) << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Write a script to find the greatest common divisor of two numbers using arithmetic operations.",
    "code": "```cpp\n#include <iostream>\n\nint gcd(int a, int b) {\n    while (b != 0) {\n        int temp = a % b;\n        a = b;\n        b = temp;\n    }\n    return a;\n}\n\nint main() {\n    int num1, num2;\n    std::cout << \"Enter two numbers: \";\n    std::cin >> num1 >> num2;\n    \n    int result = gcd(num1, num2);\n    std::cout << \"The greatest common divisor is: \" << result << std::endl;\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Develop a program that calculates the total weight of multiple items using addition.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<double> weights = {2.5, 3.0, 4.75, 1.25}; // Example weights\n    double totalWeight = 0.0;\n\n    for(double weight : weights) {\n        totalWeight += weight;\n    }\n\n    std::cout << \"Total Weight: \" << totalWeight << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function to convert a temperature from Celsius to Fahrenheit using multiplication and addition.",
    "code": "```cpp\n#include <iostream>\n\ndouble celsiusToFahrenheit(double celsius) {\n    return (celsius * 9.0 / 5.0) + 32.0;\n}\n\nint main() {\n    double celsius = 25.0; // Example input\n    double fahrenheit = celsiusToFahrenheit(celsius);\n    std::cout << \"Celsius: \" << celsius << \" -> Fahrenheit: \" << fahrenheit << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Create a program that determines the age difference between two people given their birth years.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    int birthYear1, birthYear2;\n    \n    std::cout << \"Enter the birth year of person 1: \";\n    std::cin >> birthYear1;\n    \n    std::cout << \"Enter the birth year of person 2: \";\n    std::cin >> birthYear2;\n    \n    int ageDifference = std::abs(birthYear1 - birthYear2);\n    \n    std::cout << \"The age difference is: \" << ageDifference << \" years.\" << std::endl;\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Write a function to calculate the final price after applying tax and discount using addition and subtraction.",
    "code": "```cpp\n#include <iostream>\n\ndouble calculateFinalPrice(double initialPrice, double taxRate, double discountRate) {\n    double taxAmount = initialPrice * taxRate;\n    double discountAmount = initialPrice * discountRate;\n    double finalPrice = initialPrice + taxAmount - discountAmount;\n    return finalPrice;\n}\n\nint main() {\n    double initialPrice = 100.0;\n    double taxRate = 0.2; // 20% tax\n    double discountRate = 0.1; // 10% discount\n    double finalPrice = calculateFinalPrice(initialPrice, taxRate, discountRate);\n    std::cout << \"Final Price: $\" << finalPrice << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Design a program to compute the net profit given total revenue and expenses.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    double totalRevenue, expenses, netProfit;\n\n    std::cout << \"Enter total revenue: \";\n    std::cin >> totalRevenue;\n\n    std::cout << \"Enter expenses: \";\n    std::cin >> expenses;\n\n    netProfit = totalRevenue - expenses;\n\n    std::cout << \"Net Profit: \" << netProfit << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a function to calculate the BMI given weight and height using division and multiplication.",
    "code": "```cpp\n#include <iostream>\n\ndouble calculateBMI(double weight, double height) {\n    return weight / (height * height);\n}\n\nint main() {\n    double weight, height;\n    std::cout << \"Enter weight in kilograms: \";\n    std::cin >> weight;\n    std::cout << \"Enter height in meters: \";\n    std::cin >> height;\n    \n    double bmi = calculateBMI(weight, height);\n    std::cout << \"Your BMI is: \" << bmi << std::endl;\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Create a function that calculates the midpoint between two numbers using addition and division.",
    "code": "```cpp\n#include <iostream>\n\ndouble calculateMidpoint(double num1, double num2) {\n    return (num1 + num2) / 2.0;\n}\n\nint main() {\n    double num1 = 5.0;\n    double num2 = 10.0;\n    double midpoint = calculateMidpoint(num1, num2);\n    std::cout << \"The midpoint is: \" << midpoint << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program that outputs the result of dividing a number by another with remainder.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    int numerator = 17;\n    int denominator = 5;\n\n    int quotient = numerator / denominator;\n    int remainder = numerator % denominator;\n\n    std::cout << \"Quotient: \" << quotient << std::endl;\n    std::cout << \"Remainder: \" << remainder << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function to calculate the factorial of a number using multiplication.",
    "code": "```cpp\n#include <iostream>\n\nunsigned long long factorial(int n) {\n    unsigned long long result = 1;\n    for (int i = 2; i <= n; ++i) {\n        result *= i;\n    }\n    return result;\n}\n\nint main() {\n    int number = 5; // Example number\n    std::cout << \"Factorial of \" << number << \" is \" << factorial(number) << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Build a script to find the average of three numbers using addition and division.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    double num1 = 10.0;\n    double num2 = 20.0;\n    double num3 = 30.0;\n\n    double sum = num1 + num2 + num3;\n    double average = sum / 3.0;\n\n    std::cout << \"The average is: \" << average << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a program that simulates a simple bank account using arithmetic operations for deposits and withdrawals.",
    "code": "```cpp\n#include <iostream>\n\nclass BankAccount {\nprivate:\n    double balance;\n\npublic:\n    BankAccount(double initial_balance) : balance(initial_balance) {}\n\n    void deposit(double amount) {\n        if (amount > 0) {\n            balance += amount;\n        }\n    }\n\n    void withdraw(double amount) {\n        if (amount > 0 && amount <= balance) {\n            balance -= amount;\n        }\n    }\n\n    double getBalance() const {\n        return balance;\n    }\n};\n\nint main() {\n    BankAccount account(100.0);\n\n    account.deposit(50.0);\n    std::cout << \"Balance after deposit: \" << account.getBalance() << std::endl;\n\n    account.withdraw(30.0);\n    std::cout << \"Balance after withdrawal: \" << account.getBalance() << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that computes the cost per item given a total cost and quantity using division.",
    "code": "```cpp\n#include <iostream>\n\ndouble computeCostPerItem(double totalCost, int quantity) {\n    return totalCost / quantity;\n}\n\nint main() {\n    double totalCost = 100.0;\n    int quantity = 5;\n    double costPerItem = computeCostPerItem(totalCost, quantity);\n    std::cout << \"Cost per item: \" << costPerItem << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Design a program that calculates the time required to travel a distance at a given speed.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    double distance, speed, time;\n    \n    std::cout << \"Enter the distance (in kilometers): \";\n    std::cin >> distance;\n    \n    std::cout << \"Enter the speed (in kilometers per hour): \";\n    std::cin >> speed;\n    \n    if (speed != 0) {\n        time = distance / speed;\n        std::cout << \"Time required to travel the distance: \" << time << \" hours\" << std::endl;\n    } else {\n        std::cout << \"Speed cannot be zero.\" << std::endl;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Develop a function that returns the absolute difference between two numbers.",
    "code": "```cpp\n#include <cmath>\n\ndouble absoluteDifference(double num1, double num2) {\n    return std::abs(num1 - num2);\n}\n```"
  },
  {
    "task": "Implement a program to compute the geometric mean of a set of numbers using multiplication and roots.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <cmath>\n\ndouble geometricMean(const std::vector<double>& numbers) {\n    double product = 1.0;\n    for (double num : numbers) {\n        product *= num;\n    }\n    return pow(product, 1.0 / numbers.size());\n}\n\nint main() {\n    std::vector<double> numbers = {1.0, 2.0, 3.0, 4.0}; // Example numbers\n    double result = geometricMean(numbers);\n    std::cout << \"Geometric Mean: \" << result << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function to calculate the total interest paid on a loan using arithmetic operations.",
    "code": "```cpp\n#include <iostream>\n\ndouble calculateTotalInterest(double principal, double annualRate, int years) {\n    double totalAmount = principal * (1 + annualRate * years);\n    double totalInterest = totalAmount - principal;\n    return totalInterest;\n}\n\nint main() {\n    double principal = 10000.0; // Example principal amount\n    double annualRate = 0.05;   // Example annual interest rate (5%)\n    int years = 5;              // Example loan term in years\n\n    double totalInterest = calculateTotalInterest(principal, annualRate, years);\n    std::cout << \"Total interest paid: $\" << totalInterest << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a program that calculates the sum of even numbers within a specified range.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    int start, end, sum = 0;\n\n    std::cout << \"Enter the start of the range: \";\n    std::cin >> start;\n    std::cout << \"Enter the end of the range: \";\n    std::cin >> end;\n\n    for (int i = start; i <= end; ++i) {\n        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n\n    std::cout << \"The sum of even numbers in the range is: \" << sum << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a script to determine the final balance in a savings account after regular deposits and withdrawals.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    double initialBalance = 1000.0; // Example initial balance\n    double deposits[] = {200.0, 150.0, 300.0}; // Example deposits\n    double withdrawals[] = {50.0, 100.0}; // Example withdrawals\n\n    // Calculate total deposits\n    double totalDeposits = 0.0;\n    for(double deposit : deposits) {\n        totalDeposits += deposit;\n    }\n\n    // Calculate total withdrawals\n    double totalWithdrawals = 0.0;\n    for(double withdrawal : withdrawals) {\n        totalWithdrawals += withdrawal;\n    }\n\n    // Calculate final balance\n    double finalBalance = initialBalance + totalDeposits - totalWithdrawals;\n\n    std::cout << \"Final balance: $\" << finalBalance << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a function to compute the surface area of a cylinder given its radius and height.",
    "code": "```cpp\n#include <iostream>\n#include <cmath>\n\ndouble surfaceAreaOfCylinder(double radius, double height) {\n    const double pi = 3.141592653589793;\n    return 2 * pi * radius * (radius + height);\n}\n\nint main() {\n    double radius, height;\n    std::cout << \"Enter the radius of the cylinder: \";\n    std::cin >> radius;\n    std::cout << \"Enter the height of the cylinder: \";\n    std::cin >> height;\n    \n    double surfaceArea = surfaceAreaOfCylinder(radius, height);\n    std::cout << \"The surface area of the cylinder is: \" << surfaceArea << std::endl;\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Write a program that outputs the result of an arithmetic sequence given the first term and common difference.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    int first_term, common_difference, terms_count;\n    \n    std::cout << \"Enter the first term: \";\n    std::cin >> first_term;\n    \n    std::cout << \"Enter the common difference: \";\n    std::cin >> common_difference;\n    \n    std::cout << \"Enter the number of terms: \";\n    std::cin >> terms_count;\n    \n    for (int i = 0; i < terms_count; ++i) {\n        int term = first_term + i * common_difference;\n        std::cout << \"Term \" << (i + 1) << \": \" << term << std::endl;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function that finds the average speed for a trip given total distance and time.",
    "code": "```cpp\n#include <iostream>\n\ndouble averageSpeed(double distance, double time) {\n    return distance / time;\n}\n\nint main() {\n    double distance = 150.0; // example distance in kilometers\n    double time = 2.5;       // example time in hours\n\n    double avgSpeed = averageSpeed(distance, time);\n    std::cout << \"Average speed: \" << avgSpeed << \" km/h\" << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a function to calculate the total cost of a road trip given fuel cost per mile and distance.",
    "code": "```cpp\n#include <iostream>\n\ndouble calculateTotalCost(double fuelCostPerMile, double distance) {\n    return fuelCostPerMile * distance;\n}\n\nint main() {\n    double fuelCostPerMile = 0.15; // Example value in dollars\n    double distance = 300; // Example value in miles\n\n    double totalCost = calculateTotalCost(fuelCostPerMile, distance);\n    std::cout << \"Total cost of the road trip: $\" << totalCost << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a script that determines the number of tiles required to cover a floor area using arithmetic operations.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    double floorLength, floorWidth, tileLength, tileWidth;\n    std::cout << \"Enter floor length: \";\n    std::cin >> floorLength;\n    std::cout << \"Enter floor width: \";\n    std::cin >> floorWidth;\n    std::cout << \"Enter tile length: \";\n    std::cin >> tileLength;\n    std::cout << \"Enter tile width: \";\n    std::cin >> tileWidth;\n\n    double floorArea = floorLength * floorWidth;\n    double tileArea = tileLength * tileWidth;\n    int numberOfTiles = static_cast<int>(std::ceil(floorArea / tileArea));\n\n    std::cout << \"Number of tiles required: \" << numberOfTiles << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a program to calculate the amount of paint needed to cover a wall given its area.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    double wallArea, paintCoverage, paintNeeded;\n    \n    std::cout << \"Enter the area of the wall in square meters: \";\n    std::cin >> wallArea;\n    \n    std::cout << \"Enter the coverage of the paint in square meters per liter: \";\n    std::cin >> paintCoverage;\n    \n    paintNeeded = wallArea / paintCoverage;\n    \n    std::cout << \"You will need \" << paintNeeded << \" liters of paint to cover the wall.\" << std::endl;\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Build a function that calculates the price per unit weight given total price and weight.",
    "code": "```cpp\n#include <iostream>\n\ndouble calculatePricePerUnitWeight(double totalPrice, double weight) {\n    return totalPrice / weight;\n}\n\nint main() {\n    double totalPrice = 100.0; // Example total price\n    double weight = 5.0;       // Example weight\n\n    double pricePerUnitWeight = calculatePricePerUnitWeight(totalPrice, weight);\n    std::cout << \"Price per unit weight: \" << pricePerUnitWeight << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a program that computes the volume of a rectangular prism given its dimensions.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    double length, width, height;\n    \n    std::cout << \"Enter the length of the rectangular prism: \";\n    std::cin >> length;\n    \n    std::cout << \"Enter the width of the rectangular prism: \";\n    std::cin >> width;\n    \n    std::cout << \"Enter the height of the rectangular prism: \";\n    std::cin >> height;\n    \n    double volume = length * width * height;\n    \n    std::cout << \"The volume of the rectangular prism is: \" << volume << std::endl;\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Write a function to find the percentage increase or decrease between two numbers.",
    "code": "```cpp\n#include <iostream>\n\ndouble percentageChange(double oldNumber, double newNumber) {\n    return ((newNumber - oldNumber) / oldNumber) * 100.0;\n}\n\nint main() {\n    double oldValue = 50.0;\n    double newValue = 75.0;\n    double change = percentageChange(oldValue, newValue);\n    std::cout << \"Percentage change: \" << change << \"%\" << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Create a program to determine the number of complete weeks within a specified number of days.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    int totalDays;\n    std::cout << \"Enter the number of days: \";\n    std::cin >> totalDays;\n\n    int completeWeeks = totalDays / 7;\n    \n    std::cout << \"Number of complete weeks: \" << completeWeeks << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a function that calculates the break-even point for a business using cost and revenue data.",
    "code": "```cpp\n#include <iostream>\n\ndouble calculateBreakEvenPoint(double fixedCosts, double variableCostPerUnit, double pricePerUnit) {\n    if (pricePerUnit <= variableCostPerUnit) {\n        return -1; // No break-even point if price per unit is less than or equal to variable cost per unit\n    }\n    return fixedCosts / (pricePerUnit - variableCostPerUnit);\n}\n\nint main() {\n    double fixedCosts = 10000.0;\n    double variableCostPerUnit = 50.0;\n    double pricePerUnit = 75.0;\n\n    double breakEvenPoint = calculateBreakEvenPoint(fixedCosts, variableCostPerUnit, pricePerUnit);\n\n    if (breakEvenPoint == -1) {\n        std::cout << \"No break-even point.\" << std::endl;\n    } else {\n        std::cout << \"Break-even point (units): \" << breakEvenPoint << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a program that converts a total number of seconds into hours, minutes, and seconds.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    int totalSeconds;\n    std::cout << \"Enter total seconds: \";\n    std::cin >> totalSeconds;\n\n    int hours = totalSeconds / 3600;\n    int remainingSeconds = totalSeconds % 3600;\n    int minutes = remainingSeconds / 60;\n    int seconds = remainingSeconds % 60;\n\n    std::cout << \"Hours: \" << hours << \", Minutes: \" << minutes << \", Seconds: \" << seconds << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that calculates the depreciation of an asset over time using arithmetic operations.",
    "code": "```cpp\n#include <iostream>\n\ndouble calculateDepreciation(double initialValue, double salvageValue, int usefulLife) {\n    if (usefulLife <= 0) return 0.0;\n    return (initialValue - salvageValue) / usefulLife;\n}\n\nint main() {\n    double initialValue = 10000.0; // Example initial value\n    double salvageValue = 2000.0;  // Example salvage value\n    int usefulLife = 5;            // Example useful life in years\n\n    double depreciation = calculateDepreciation(initialValue, salvageValue, usefulLife);\n    std::cout << \"Annual Depreciation: \" << depreciation << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a program that computes the final exam grade needed to achieve a target course average.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    double currentAverage, targetAverage, finalExamWeight, finalExamGradeNeeded;\n\n    std::cout << \"Enter your current average: \";\n    std::cin >> currentAverage;\n\n    std::cout << \"Enter your target course average: \";\n    std::cin >> targetAverage;\n\n    std::cout << \"Enter the weight of the final exam (as a percentage): \";\n    std::cin >> finalExamWeight;\n\n    finalExamWeight /= 100.0;\n\n    finalExamGradeNeeded = (targetAverage - (currentAverage * (1 - finalExamWeight))) / finalExamWeight;\n\n    std::cout << \"You need a final exam grade of: \" << finalExamGradeNeeded << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function to calculate the total cost of groceries given prices and quantities of items.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\ndouble calculateTotalCost(const std::vector<double>& prices, const std::vector<int>& quantities) {\n    double totalCost = 0.0;\n    for (size_t i = 0; i < prices.size(); ++i) {\n        totalCost += prices[i] * quantities[i];\n    }\n    return totalCost;\n}\n\nint main() {\n    std::vector<double> prices = {2.99, 1.49, 3.99, 0.99};\n    std::vector<int> quantities = {3, 2, 1, 5};\n    \n    double totalCost = calculateTotalCost(prices, quantities);\n    std::cout << \"Total cost of groceries: $\" << totalCost << std::endl;\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Write a script that determines the number of years required to double an investment using a fixed interest rate.",
    "code": "```cpp\n#include <iostream>\n#include <cmath>\n\nint main() {\n    double principal, rate;\n    std::cout << \"Enter the initial investment amount: \";\n    std::cin >> principal;\n    std::cout << \"Enter the annual interest rate (in percentage): \";\n    std::cin >> rate;\n\n    rate /= 100; // Convert percentage to a decimal\n    double target = principal * 2;\n    int years = 0;\n\n    while (principal < target) {\n        principal += principal * rate;\n        years++;\n    }\n\n    std::cout << \"It will take \" << years << \" years to double the investment.\" << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a function that computes the harmonic mean of a set of numbers using division and addition.",
    "code": "```cpp\n#include <vector>\n\ndouble harmonicMean(const std::vector<double>& numbers) {\n    if (numbers.empty()) return 0.0;\n    \n    double sum = 0.0;\n    for (double num : numbers) {\n        if (num != 0) {\n            sum += 1.0 / num;\n        }\n    }\n    \n    return numbers.size() / sum;\n}\n```"
  },
  {
    "task": "Create a program to find the sum of the squares of numbers in a given range.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    int start, end;\n    std::cout << \"Enter the start of the range: \";\n    std::cin >> start;\n    std::cout << \"Enter the end of the range: \";\n    std::cin >> end;\n\n    int sumOfSquares = 0;\n    for (int i = start; i <= end; ++i) {\n        sumOfSquares += i * i;\n    }\n\n    std::cout << \"The sum of the squares is: \" << sumOfSquares << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Design a function that calculates the energy consumption of an appliance given power and usage time.",
    "code": "```cpp\n#include <iostream>\n\ndouble calculateEnergyConsumption(double power, double usageTime) {\n    return power * usageTime;\n}\n\nint main() {\n    double power = 1500.0; // in watts\n    double usageTime = 2.0; // in hours\n\n    double energyConsumption = calculateEnergyConsumption(power, usageTime);\n    std::cout << \"Energy Consumption: \" << energyConsumption << \" Wh\" << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program that simulates a simple stock portfolio using arithmetic operations for buying and selling.",
    "code": "```cpp\n#include <iostream>\nusing namespace std;\n\nint main() {\n    double cash = 10000.0; // Initial cash in dollars\n    double stockPrice = 50.0; // Price per stock in dollars\n    int stocksOwned = 0; // Number of stocks owned\n\n    // Buying stocks\n    int stocksToBuy = 50;\n    double cost = stocksToBuy * stockPrice;\n    if (cash >= cost) {\n        cash -= cost;\n        stocksOwned += stocksToBuy;\n    }\n\n    // Selling stocks\n    int stocksToSell = 20;\n    if (stocksOwned >= stocksToSell) {\n        double revenue = stocksToSell * stockPrice;\n        cash += revenue;\n        stocksOwned -= stocksToSell;\n    }\n\n    cout << \"Cash remaining: $\" << cash << endl;\n    cout << \"Stocks owned: \" << stocksOwned << endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function to calculate the gravitational force between two masses using multiplication and division.",
    "code": "```cpp\n#include <iostream>\n\ndouble calculateGravitationalForce(double mass1, double mass2, double distance) {\n    const double G = 6.67430e-11; // Gravitational constant in m^3 kg^-1 s^-2\n    return (G * mass1 * mass2) / (distance * distance);\n}\n\nint main() {\n    double mass1 = 5.972e24; // Example mass1 in kilograms (Earth mass)\n    double mass2 = 7.348e22; // Example mass2 in kilograms (Moon mass)\n    double distance = 3.844e8; // Example distance in meters (Earth-Moon distance)\n\n    double force = calculateGravitationalForce(mass1, mass2, distance);\n    std::cout << \"Gravitational Force: \" << force << \" N\" << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a function that determines the price per square foot of a piece of real estate.",
    "code": "```cpp\n#include <iostream>\n\ndouble calculatePricePerSquareFoot(double totalPrice, double totalArea) {\n    if (totalArea == 0) {\n        throw std::invalid_argument(\"Area must be non-zero\");\n    }\n    return totalPrice / totalArea;\n}\n\nint main() {\n    double totalPrice = 500000.0;\n    double totalArea = 2500.0;\n    try {\n        double pricePerSquareFoot = calculatePricePerSquareFoot(totalPrice, totalArea);\n        std::cout << \"Price per square foot: $\" << pricePerSquareFoot << std::endl;\n    } catch (const std::exception &e) {\n        std::cerr << \"Error: \" << e.what() << std::endl;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Write a script to compute the total interest earned on a savings account with monthly compounding.",
    "code": "```cpp\n#include <iostream>\n#include <cmath>\n\nint main() {\n    double principal = 1000.0; // Initial amount\n    double annualRate = 5.0;   // Annual interest rate in percentage\n    int years = 5;             // Number of years\n\n    double monthlyRate = annualRate / 12 / 100;\n    int months = years * 12;\n\n    double totalAmount = principal * std::pow(1 + monthlyRate, months);\n    double interestEarned = totalAmount - principal;\n\n    std::cout << \"Total interest earned: \" << interestEarned << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a program that calculates the calories burned during exercise given MET value and duration.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    double metValue;\n    double duration; // Duration in hours\n    double weight; // Weight in kilograms\n    double caloriesBurned;\n\n    std::cout << \"Enter MET value: \";\n    std::cin >> metValue;\n\n    std::cout << \"Enter duration of exercise (in hours): \";\n    std::cin >> duration;\n\n    std::cout << \"Enter your weight (in kg): \";\n    std::cin >> weight;\n\n    caloriesBurned = metValue * weight * duration;\n    \n    std::cout << \"Calories burned: \" << caloriesBurned << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Build a function that converts a speed from miles per hour to kilometers per hour using multiplication.",
    "code": "```cpp\n#include <iostream>\n\ndouble convertMphToKph(double mph) {\n    const double conversionFactor = 1.60934;\n    return mph * conversionFactor;\n}\n\nint main() {\n    double mph = 60.0;\n    double kph = convertMphToKph(mph);\n    std::cout << mph << \" miles per hour is \" << kph << \" kilometers per hour.\" << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a program to find the number of days between two dates using arithmetic operations.",
    "code": "```cpp\n#include <iostream>\n#include <ctime>\n\nint daysBetweenDates(int year1, int month1, int day1, int year2, int month2, int day2) {\n    std::tm date1 = {};\n    date1.tm_year = year1 - 1900;\n    date1.tm_mon = month1 - 1;\n    date1.tm_mday = day1;\n\n    std::tm date2 = {};\n    date2.tm_year = year2 - 1900;\n    date2.tm_mon = month2 - 1;\n    date2.tm_mday = day2;\n\n    std::time_t time1 = std::mktime(&date1);\n    std::time_t time2 = std::mktime(&date2);\n\n    double seconds = std::difftime(time2, time1);\n    return seconds / (60 * 60 * 24);\n}\n\nint main() {\n    int year1, month1, day1, year2, month2, day2;\n    std::cout << \"Enter the first date (YYYY MM DD): \";\n    std::cin >> year1 >> month1 >> day1;\n    std::cout << \"Enter the second date (YYYY MM DD): \";\n    std::cin >> year2 >> month2 >> day2;\n\n    int days = daysBetweenDates(year1, month1, day1, year2, month2, day2);\n    std::cout << \"Number of days between the dates: \" << days << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function to calculate the area of a circle given its radius.",
    "code": "```cpp\n#include <iostream>\n#include <cmath>\n\ndouble calculateAreaOfCircle(double radius) {\n    const double pi = 3.14159265358979323846;\n    return pi * radius * radius;\n}\n\nint main() {\n    double radius = 5.0; // Example radius\n    double area = calculateAreaOfCircle(radius);\n    std::cout << \"Area of the circle: \" << area << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Create a program that determines the total distance driven given trips with varying speeds and durations.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nstruct Trip {\n    double speed;    // speed in miles per hour\n    double duration; // duration in hours\n};\n\ndouble calculateTotalDistance(const std::vector<Trip>& trips) {\n    double totalDistance = 0.0;\n    for (const auto& trip : trips) {\n        totalDistance += trip.speed * trip.duration;\n    }\n    return totalDistance;\n}\n\nint main() {\n    std::vector<Trip> trips = {\n        {60.0, 2.0},   // 60 mph for 2 hours\n        {50.0, 1.5},   // 50 mph for 1.5 hours\n        {70.0, 1.0}    // 70 mph for 1 hour\n    };\n    \n    double totalDistance = calculateTotalDistance(trips);\n    std::cout << \"Total Distance Driven: \" << totalDistance << \" miles\" << std::endl;\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Design a function to compute the final price of an item after applying multiple discounts sequentially.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\ndouble computeFinalPrice(double initialPrice, const std::vector<double>& discounts) {\n    double finalPrice = initialPrice;\n    for (double discount : discounts) {\n        finalPrice -= finalPrice * (discount / 100.0);\n    }\n    return finalPrice;\n}\n\nint main() {\n    double initialPrice = 100.0; // Example initial price\n    std::vector<double> discounts = {10.0, 5.0}; // Example discounts in percentage\n\n    double finalPrice = computeFinalPrice(initialPrice, discounts);\n    std::cout << \"Final price: \" << finalPrice << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a script that calculates the number of bricks needed to build a wall given wall dimensions and brick size.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    double wallWidth, wallHeight, brickWidth, brickHeight;\n    \n    std::cout << \"Enter wall width: \";\n    std::cin >> wallWidth;\n    std::cout << \"Enter wall height: \";\n    std::cin >> wallHeight;\n    std::cout << \"Enter brick width: \";\n    std::cin >> brickWidth;\n    std::cout << \"Enter brick height: \";\n    std::cin >> brickHeight;\n\n    double wallArea = wallWidth * wallHeight;\n    double brickArea = brickWidth * brickHeight;\n    \n    int numberOfBricks = static_cast<int>(wallArea / brickArea);\n    \n    std::cout << \"Number of bricks needed: \" << numberOfBricks << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a program to determine the number of pizzas required for a party given the number of people and slices per pizza.",
    "code": "```cpp\n#include <iostream>\n#include <cmath>\n\nint main() {\n    int numPeople, slicesPerPizza, slicesPerPerson;\n    std::cout << \"Enter the number of people: \";\n    std::cin >> numPeople;\n    std::cout << \"Enter the number of slices each person will eat: \";\n    std::cin >> slicesPerPerson;\n    std::cout << \"Enter the number of slices per pizza: \";\n    std::cin >> slicesPerPizza;\n\n    int totalSlicesNeeded = numPeople * slicesPerPerson;\n    int pizzasRequired = std::ceil(static_cast<double>(totalSlicesNeeded) / slicesPerPizza);\n\n    std::cout << \"Number of pizzas required: \" << pizzasRequired << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function that calculates the total cost of a meal including tax and tip.",
    "code": "```cpp\n#include <iostream>\n\ndouble calculateTotalCost(double mealCost, double taxPercent, double tipPercent) {\n    double taxAmount = mealCost * (taxPercent / 100.0);\n    double tipAmount = mealCost * (tipPercent / 100.0);\n    return mealCost + taxAmount + tipAmount;\n}\n\nint main() {\n    double mealCost = 50.0;\n    double taxPercent = 10.0;\n    double tipPercent = 15.0;\n    \n    double totalCost = calculateTotalCost(mealCost, taxPercent, tipPercent);\n    std::cout << \"Total cost of the meal: $\" << totalCost << std::endl;\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Create a program to compute the average rainfall over a period using addition and division.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<double> rainfall = {1.2, 3.4, 2.8, 4.5, 3.9}; // Example data\n    double sum = 0.0;\n\n    for (double rain : rainfall) {\n        sum += rain;\n    }\n\n    double average = sum / rainfall.size();\n\n    std::cout << \"Average rainfall: \" << average << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that determines the number of batches needed to produce a specific quantity of a product.",
    "code": "```cpp\n#include <cmath>\n\nint calculateBatches(int totalQuantity, int batchSize) {\n    return std::ceil(static_cast<double>(totalQuantity) / batchSize);\n}\n```"
  },
  {
    "task": "Design a program to calculate the total energy consumption of a household given individual appliance usage.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nint main() {\n    int numAppliances;\n    std::cout << \"Enter the number of appliances: \";\n    std::cin >> numAppliances;\n\n    std::vector<double> energyUsage(numAppliances);\n    std::cout << \"Enter the energy usage (in kWh) for each appliance:\\n\";\n    for (int i = 0; i < numAppliances; ++i) {\n        std::cout << \"Appliance \" << i + 1 << \": \";\n        std::cin >> energyUsage[i];\n    }\n\n    double totalEnergyConsumption = 0.0;\n    for (const auto &usage : energyUsage) {\n        totalEnergyConsumption += usage;\n    }\n\n    std::cout << \"Total energy consumption: \" << totalEnergyConsumption << \" kWh\\n\";\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a function that computes the body surface area of a person using height and weight.",
    "code": "```cpp\n#include <iostream>\n#include <cmath>\n\ndouble computeBodySurfaceArea(double height, double weight) {\n    // Using the Mosteller formula for Body Surface Area\n    return std::sqrt((height * weight) / 3600.0);\n}\n\nint main() {\n    double height, weight;\n    \n    std::cout << \"Enter height in cm: \";\n    std::cin >> height;\n    \n    std::cout << \"Enter weight in kg: \";\n    std::cin >> weight;\n    \n    double bsa = computeBodySurfaceArea(height, weight);\n    std::cout << \"Body Surface Area: \" << bsa << \" m^2\" << std::endl;\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Build a script to calculate the monthly payment on a mortgage using principal, interest rate, and term.",
    "code": "```cpp\n#include <iostream>\n#include <cmath>\n\ndouble calculateMonthlyPayment(double principal, double annualInterestRate, int years) {\n    double monthlyInterestRate = annualInterestRate / 12 / 100;\n    int numberOfPayments = years * 12;\n    return (principal * monthlyInterestRate) / (1 - std::pow(1 + monthlyInterestRate, -numberOfPayments));\n}\n\nint main() {\n    double principal = 250000; // Example principal amount\n    double annualInterestRate = 4.5; // Example annual interest rate\n    int termInYears = 30; // Example term in years\n\n    double monthlyPayment = calculateMonthlyPayment(principal, annualInterestRate, termInYears);\n\n    std::cout << \"Monthly Payment: $\" << monthlyPayment << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function to find the volume of a cone given its height and radius.",
    "code": "```cpp\n#include <iostream>\n#include <cmath>\n\ndouble volumeOfCone(double height, double radius) {\n    const double pi = 3.14159265358979323846;\n    return (1.0 / 3.0) * pi * radius * radius * height;\n}\n\nint main() {\n    double height = 10.0;\n    double radius = 5.0;\n    double volume = volumeOfCone(height, radius);\n    std::cout << \"Volume of the cone: \" << volume << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program that estimates the cost of a trip using fuel efficiency and distance.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    double fuelEfficiency; // in miles per gallon\n    double distance;       // in miles\n    double fuelPrice;      // price per gallon\n\n    std::cout << \"Enter the fuel efficiency (miles per gallon): \";\n    std::cin >> fuelEfficiency;\n    \n    std::cout << \"Enter the distance of the trip (miles): \";\n    std::cin >> distance;\n    \n    std::cout << \"Enter the fuel price per gallon: \";\n    std::cin >> fuelPrice;\n\n    double gallonsNeeded = distance / fuelEfficiency;\n    double tripCost = gallonsNeeded * fuelPrice;\n    \n    std::cout << \"The estimated cost of the trip is: $\" << tripCost << std::endl;\n\n    return 0;\n}\n```"
  }
]