[
  {
    "task": "Create a function that calculates the sum of two numbers and returns the result.",
    "code": "```cpp\n#include <iostream>\n\nint sum(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int result = sum(3, 5);\n    std::cout << \"The sum is: \" << result << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Design a function that takes a string and returns its length.",
    "code": "```cpp\n#include <string>\n\nint getStringLength(const std::string& input) {\n    return input.length();\n}\n```"
  },
  {
    "task": "Write a function that checks if a number is prime and returns a boolean value.",
    "code": "```cpp\n#include <cmath>\n\nbool isPrime(int number) {\n    if (number <= 1) return false;\n    if (number <= 3) return true;\n    if (number % 2 == 0 || number % 3 == 0) return false;\n    for (int i = 5; i * i <= number; i += 6) {\n        if (number % i == 0 || number % (i + 2) == 0) return false;\n    }\n    return true;\n}\n```"
  },
  {
    "task": "Implement a function that returns the highest value in a list of integers.",
    "code": "```cpp\n#include <vector>\n#include <algorithm>\n\nint findMaxValue(const std::vector<int>& numbers) {\n    return *std::max_element(numbers.begin(), numbers.end());\n}\n```"
  },
  {
    "task": "Create a function that accepts a list of words and returns the longest word.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string longestWord(const std::vector<std::string>& words) {\n    std::string longest;\n    for (const auto& word : words) {\n        if (word.length() > longest.length()) {\n            longest = word;\n        }\n    }\n    return longest;\n}\n\nint main() {\n    std::vector<std::string> words = {\"apple\", \"banana\", \"cherry\", \"date\"};\n    std::cout << \"Longest word: \" << longestWord(words) << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that takes a temperature in Celsius and returns the equivalent in Fahrenheit.",
    "code": "```cpp\n#include <iostream>\n\ndouble celsiusToFahrenheit(double celsius) {\n    return celsius * 9.0 / 5.0 + 32.0;\n}\n\nint main() {\n    double celsius = 25.0;\n    double fahrenheit = celsiusToFahrenheit(celsius);\n    std::cout << \"Temperature in Fahrenheit: \" << fahrenheit << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a function that returns the factorial of a given number.",
    "code": "```cpp\n#include <iostream>\n\nint factorial(int n) {\n    if (n <= 1) return 1;\n    return n * factorial(n - 1);\n}\n\nint main() {\n    int number = 5; // Example input\n    std::cout << \"Factorial of \" << number << \" is \" << factorial(number) << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function that receives a date and returns the day of the week.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nstd::string dayOfWeek(int day, int month, int year) {\n    static const std::string days[] = {\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"};\n    if (month < 3) {\n        month += 12;\n        year -= 1;\n    }\n    int k = year % 100;\n    int j = year / 100;\n    int dayIndex = (day + 13 * (month + 1) / 5 + k + k / 4 + j / 4 + 5 * j) % 7;\n    return days[dayIndex];\n}\n\nint main() {\n    int day = 16, month = 10, year = 2023;\n    std::cout << \"The day of the week is: \" << dayOfWeek(day, month, year) << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that calculates the area of a circle given its radius and returns the value.",
    "code": "```cpp\n#include <iostream>\n#include <cmath>\n\ndouble calculateAreaOfCircle(double radius) {\n    return M_PI * radius * radius;\n}\n\nint main() {\n    double radius = 5.0;\n    double area = calculateAreaOfCircle(radius);\n    std::cout << \"Area of the circle: \" << area << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Create a function that converts a string to uppercase and returns the modified string.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n#include <algorithm>\n\nstd::string toUpperCase(const std::string& input) {\n    std::string result = input;\n    std::transform(result.begin(), result.end(), result.begin(), ::toupper);\n    return result;\n}\n\nint main() {\n    std::string text = \"Hello, World!\";\n    std::string upperText = toUpperCase(text);\n    std::cout << upperText << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Design a function that returns the reverse of a given list.",
    "code": "```cpp\n#include <vector>\n#include <algorithm>\n\nstd::vector<int> reverseList(const std::vector<int>& inputList) {\n    std::vector<int> reversedList = inputList;\n    std::reverse(reversedList.begin(), reversedList.end());\n    return reversedList;\n}\n```"
  },
  {
    "task": "Implement a function that accepts a string and returns a dictionary with character frequencies.",
    "code": "```cpp\n#include <iostream>\n#include <unordered_map>\n#include <string>\n\nstd::unordered_map<char, int> characterFrequencies(const std::string& input) {\n    std::unordered_map<char, int> frequencyMap;\n    for (char ch : input) {\n        frequencyMap[ch]++;\n    }\n    return frequencyMap;\n}\n\nint main() {\n    std::string input = \"example\";\n    std::unordered_map<char, int> frequencies = characterFrequencies(input);\n\n    for (const auto& pair : frequencies) {\n        std::cout << pair.first << \": \" << pair.second << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that returns the first non-repeating character in a string.",
    "code": "```cpp\n#include <unordered_map>\n#include <string>\n\nchar firstNonRepeatingCharacter(const std::string& str) {\n    std::unordered_map<char, int> charCount;\n    \n    for (char ch : str) {\n        charCount[ch]++;\n    }\n    \n    for (char ch : str) {\n        if (charCount[ch] == 1) {\n            return ch;\n        }\n    }\n    \n    return '\\0'; // Return null character if no non-repeating character is found\n}\n```"
  },
  {
    "task": "Create a function that takes a list of numbers and returns a new list with only even numbers.",
    "code": "```cpp\n#include <vector>\n\nstd::vector<int> filterEvenNumbers(const std::vector<int>& numbers) {\n    std::vector<int> evenNumbers;\n    for (int num : numbers) {\n        if (num % 2 == 0) {\n            evenNumbers.push_back(num);\n        }\n    }\n    return evenNumbers;\n}\n```"
  },
  {
    "task": "Develop a function that receives a sentence and returns the word count.",
    "code": "```cpp\n#include <iostream>\n#include <sstream>\n#include <string>\n\nint wordCount(const std::string& sentence) {\n    std::istringstream stream(sentence);\n    std::string word;\n    int count = 0;\n    while (stream >> word) {\n        ++count;\n    }\n    return count;\n}\n\nint main() {\n    std::string sentence = \"This is a sample sentence.\";\n    std::cout << \"Word count: \" << wordCount(sentence) << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function that returns the smallest element in an array.",
    "code": "```cpp\n#include <iostream>\n#include <climits>\n\nint findSmallestElement(int arr[], int size) {\n    int smallest = INT_MAX;\n    for (int i = 0; i < size; ++i) {\n        if (arr[i] < smallest) {\n            smallest = arr[i];\n        }\n    }\n    return smallest;\n}\n\nint main() {\n    int arr[] = {5, 3, 9, 1, 7};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    int smallest = findSmallestElement(arr, size);\n    std::cout << \"The smallest element is: \" << smallest << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that takes two strings and returns true if they are anagrams.",
    "code": "```cpp\n#include <string>\n#include <algorithm>\n\nbool areAnagrams(const std::string& str1, const std::string& str2) {\n    if (str1.length() != str2.length()) {\n        return false;\n    }\n    std::string sortedStr1 = str1;\n    std::string sortedStr2 = str2;\n    std::sort(sortedStr1.begin(), sortedStr1.end());\n    std::sort(sortedStr2.begin(), sortedStr2.end());\n    return sortedStr1 == sortedStr2;\n}\n```"
  },
  {
    "task": "Create a function that accepts an integer and returns a list of its divisors.",
    "code": "```cpp\n#include <vector>\n\nstd::vector<int> findDivisors(int num) {\n    std::vector<int> divisors;\n    for (int i = 1; i <= num; ++i) {\n        if (num % i == 0) {\n            divisors.push_back(i);\n        }\n    }\n    return divisors;\n}\n```"
  },
  {
    "task": "Design a function that returns the square root of a given number.",
    "code": "```cpp\n#include <iostream>\n#include <cmath>\n\ndouble squareRoot(double number) {\n    return std::sqrt(number);\n}\n\nint main() {\n    double num = 16.0;\n    std::cout << \"The square root of \" << num << \" is \" << squareRoot(num) << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function that accepts a list and returns it sorted in ascending order.",
    "code": "```cpp\n#include <vector>\n#include <algorithm>\n\nstd::vector<int> sortList(const std::vector<int>& list) {\n    std::vector<int> sortedList = list;\n    std::sort(sortedList.begin(), sortedList.end());\n    return sortedList;\n}\n```"
  },
  {
    "task": "Write a function that checks whether a given year is a leap year and returns a boolean.",
    "code": "```cpp\nbool isLeapYear(int year) {\n    return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);\n}\n```"
  },
  {
    "task": "Create a function that receives a list of numbers and returns their average.",
    "code": "```cpp\n#include <vector>\n\ndouble calculateAverage(const std::vector<double>& numbers) {\n    if (numbers.empty()) return 0.0;\n    double sum = 0.0;\n    for (double number : numbers) {\n        sum += number;\n    }\n    return sum / numbers.size();\n}\n```"
  },
  {
    "task": "Develop a function that returns the nth Fibonacci number.",
    "code": "```cpp\n#include <iostream>\n\nint fibonacci(int n) {\n    if (n <= 1) return n;\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\nint main() {\n    int n = 10; // Example input\n    std::cout << \"The \" << n << \"th Fibonacci number is: \" << fibonacci(n) << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function that accepts a string and returns it with vowels removed.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nstd::string removeVowels(const std::string& input) {\n    std::string result;\n    for (char c : input) {\n        if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' &&\n            c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U') {\n            result += c;\n        }\n    }\n    return result;\n}\n\nint main() {\n    std::string test = \"Hello World\";\n    std::cout << removeVowels(test) << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that takes two dates and returns the number of days between them.",
    "code": "```cpp\n#include <iostream>\n#include <ctime>\n\nint daysBetweenDates(const std::tm& start, const std::tm& end) {\n    std::time_t start_time = std::mktime(const_cast<std::tm*>(&start));\n    std::time_t end_time = std::mktime(const_cast<std::tm*>(&end));\n    double difference = std::difftime(end_time, start_time);\n    return difference / (60 * 60 * 24);\n}\n\nint main() {\n    std::tm date1 = {};\n    date1.tm_year = 2023 - 1900;  // Year since 1900\n    date1.tm_mon = 9;             // 0-based month (October)\n    date1.tm_mday = 1;            // 1-based day\n\n    std::tm date2 = {};\n    date2.tm_year = 2023 - 1900;\n    date2.tm_mon = 9;\n    date2.tm_mday = 15;\n\n    int days = daysBetweenDates(date1, date2);\n    std::cout << \"Days between: \" << days << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a function that returns the last element of a list.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nint getLastElement(const std::vector<int>& list) {\n    if (!list.empty()) {\n        return list.back();\n    }\n    throw std::runtime_error(\"List is empty\");\n}\n\nint main() {\n    std::vector<int> numbers = {1, 2, 3, 4, 5};\n    try {\n        int lastElement = getLastElement(numbers);\n        std::cout << \"The last element is: \" << lastElement << std::endl;\n    } catch (const std::runtime_error& e) {\n        std::cerr << e.what() << std::endl;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Design a function that calculates the GCD of two numbers and returns it.",
    "code": "```cpp\n#include <iostream>\n\nint gcd(int a, int b) {\n    while (b != 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n\nint main() {\n    int num1 = 48, num2 = 18;\n    std::cout << \"GCD of \" << num1 << \" and \" << num2 << \" is \" << gcd(num1, num2) << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function that takes a list and returns a tuple with the min and max values.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <tuple>\n#include <limits>\n\nstd::tuple<int, int> findMinAndMax(const std::vector<int>& list) {\n    if (list.empty()) {\n        return std::make_tuple(0, 0); // Default values for empty list\n    }\n\n    int minVal = std::numeric_limits<int>::max();\n    int maxVal = std::numeric_limits<int>::min();\n\n    for (int num : list) {\n        if (num < minVal) minVal = num;\n        if (num > maxVal) maxVal = num;\n    }\n\n    return std::make_tuple(minVal, maxVal);\n}\n\nint main() {\n    std::vector<int> list = {3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5};\n    auto [minVal, maxVal] = findMinAndMax(list);\n    std::cout << \"Min: \" << minVal << \", Max: \" << maxVal << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that converts a binary string to its decimal representation and returns it.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n#include <cmath>\n\nint binaryToDecimal(const std::string& binaryString) {\n    int decimalValue = 0;\n    int length = binaryString.length();\n    for (int i = 0; i < length; ++i) {\n        if (binaryString[length - i - 1] == '1') {\n            decimalValue += std::pow(2, i);\n        }\n    }\n    return decimalValue;\n}\n\nint main() {\n    std::string binaryString = \"1011\";\n    int decimalValue = binaryToDecimal(binaryString);\n    std::cout << \"Decimal value: \" << decimalValue << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Create a function that accepts a dictionary and returns a list of its keys.",
    "code": "```cpp\n#include <iostream>\n#include <unordered_map>\n#include <vector>\n\nstd::vector<std::string> getKeys(const std::unordered_map<std::string, int>& dict) {\n    std::vector<std::string> keys;\n    for (const auto& pair : dict) {\n        keys.push_back(pair.first);\n    }\n    return keys;\n}\n\nint main() {\n    std::unordered_map<std::string, int> myDict = {{\"apple\", 1}, {\"banana\", 2}, {\"cherry\", 3}};\n    std::vector<std::string> keys = getKeys(myDict);\n\n    for (const std::string& key : keys) {\n        std::cout << key << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a function that returns the concatenation of two strings.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nstd::string concatenateStrings(const std::string& str1, const std::string& str2) {\n    return str1 + str2;\n}\n\nint main() {\n    std::string result = concatenateStrings(\"Hello, \", \"World!\");\n    std::cout << result << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function that receives a list and returns a new list with duplicates removed.",
    "code": "```cpp\n#include <vector>\n#include <unordered_set>\n\nstd::vector<int> removeDuplicates(const std::vector<int>& inputList) {\n    std::unordered_set<int> seen;\n    std::vector<int> result;\n    for (const int& item : inputList) {\n        if (seen.find(item) == seen.end()) {\n            seen.insert(item);\n            result.push_back(item);\n        }\n    }\n    return result;\n}\n```"
  },
  {
    "task": "Write a function that returns the intersection of two lists.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nstd::vector<int> intersection(const std::vector<int>& list1, const std::vector<int>& list2) {\n    std::vector<int> result;\n    for (int num : list1) {\n        if (std::find(list2.begin(), list2.end(), num) != list2.end()) {\n            if (std::find(result.begin(), result.end(), num) == result.end()) {\n                result.push_back(num);\n            }\n        }\n    }\n    return result;\n}\n\nint main() {\n    std::vector<int> list1 = {1, 2, 3, 4, 5};\n    std::vector<int> list2 = {3, 4, 5, 6, 7};\n    std::vector<int> result = intersection(list1, list2);\n    \n    for (int num : result) {\n        std::cout << num << \" \";\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Create a function that takes an integer and returns whether it is even or odd as a string.",
    "code": "```cpp\n#include <string>\n\nstd::string isEvenOrOdd(int number) {\n    return (number % 2 == 0) ? \"even\" : \"odd\";\n}\n```"
  },
  {
    "task": "Design a function that returns the number of vowels in a given string.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nint countVowels(const std::string& str) {\n    int count = 0;\n    for (char ch : str) {\n        if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u' ||\n            ch == 'A' || ch == 'E' || ch == 'I' || ch == 'O' || ch == 'U') {\n            ++count;\n        }\n    }\n    return count;\n}\n\nint main() {\n    std::string input = \"Hello World\";\n    std::cout << \"Number of vowels: \" << countVowels(input) << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function that counts the occurrences of a substring within a string and returns it.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nint countSubstringOccurrences(const std::string& str, const std::string& sub) {\n    if (sub.empty()) return 0;\n    int count = 0;\n    for (size_t offset = str.find(sub); offset != std::string::npos; \n         offset = str.find(sub, offset + sub.length())) {\n        ++count;\n    }\n    return count;\n}\n\nint main() {\n    std::string str = \"hello world, world!\";\n    std::string sub = \"world\";\n    int occurrences = countSubstringOccurrences(str, sub);\n    std::cout << \"Occurrences: \" << occurrences << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that accepts a list of numbers and returns them sorted in descending order.",
    "code": "```cpp\n#include <vector>\n#include <algorithm>\n\nstd::vector<int> sortDescending(const std::vector<int>& numbers) {\n    std::vector<int> sortedNumbers = numbers;\n    std::sort(sortedNumbers.begin(), sortedNumbers.end(), std::greater<int>());\n    return sortedNumbers;\n}\n```"
  },
  {
    "task": "Create a function that returns the median of a list of numbers.",
    "code": "```cpp\n#include <vector>\n#include <algorithm>\n\ndouble findMedian(std::vector<double> numbers) {\n    std::sort(numbers.begin(), numbers.end());\n    size_t size = numbers.size();\n    if (size % 2 == 0) {\n        return (numbers[size / 2 - 1] + numbers[size / 2]) / 2.0;\n    } else {\n        return numbers[size / 2];\n    }\n}\n```"
  },
  {
    "task": "Develop a function that receives a sentence and returns it with words in reverse order.",
    "code": "```cpp\n#include <iostream>\n#include <sstream>\n#include <vector>\n\nstd::string reverseWords(const std::string &sentence) {\n    std::istringstream stream(sentence);\n    std::vector<std::string> words;\n    std::string word;\n    while (stream >> word) {\n        words.push_back(word);\n    }\n    std::reverse(words.begin(), words.end());\n    std::ostringstream result;\n    for (size_t i = 0; i < words.size(); ++i) {\n        result << words[i];\n        if (i < words.size() - 1) {\n            result << \" \";\n        }\n    }\n    return result.str();\n}\n\nint main() {\n    std::string sentence = \"Develop a function that receives a sentence\";\n    std::string reversed = reverseWords(sentence);\n    std::cout << reversed << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function that returns the sum of all elements in a matrix.",
    "code": "```cpp\n#include <vector>\n\nint sumMatrix(const std::vector<std::vector<int>>& matrix) {\n    int sum = 0;\n    for (const auto& row : matrix) {\n        for (int element : row) {\n            sum += element;\n        }\n    }\n    return sum;\n}\n```"
  },
  {
    "task": "Write a function that accepts a string and returns true if it is a palindrome.",
    "code": "```cpp\n#include <string>\n\nbool isPalindrome(const std::string& str) {\n    int left = 0;\n    int right = str.length() - 1;\n    while (left < right) {\n        if (str[left] != str[right]) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    return true;\n}\n```"
  },
  {
    "task": "Create a function that takes a number and returns its binary representation as a string.",
    "code": "```cpp\n#include <string>\n\nstd::string toBinary(int number) {\n    if (number == 0) return \"0\";\n    std::string binary;\n    while (number > 0) {\n        binary = (number % 2 == 0 ? \"0\" : \"1\") + binary;\n        number /= 2;\n    }\n    return binary;\n}\n```"
  },
  {
    "task": "Design a function that returns the number of words in a paragraph.",
    "code": "```cpp\n#include <iostream>\n#include <sstream>\n#include <string>\n\nint countWords(const std::string &paragraph) {\n    std::istringstream iss(paragraph);\n    std::string word;\n    int count = 0;\n    while (iss >> word) {\n        ++count;\n    }\n    return count;\n}\n\nint main() {\n    std::string paragraph = \"This is a sample paragraph containing a number of words.\";\n    int wordCount = countWords(paragraph);\n    std::cout << \"Number of words: \" << wordCount << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function that accepts a list and returns the index of its maximum element.",
    "code": "```cpp\n#include <vector>\n#include <stdexcept>\n\nint indexOfMaxElement(const std::vector<int>& list) {\n    if (list.empty()) {\n        throw std::invalid_argument(\"List cannot be empty\");\n    }\n    int maxIndex = 0;\n    for (std::size_t i = 1; i < list.size(); ++i) {\n        if (list[i] > list[maxIndex]) {\n            maxIndex = i;\n        }\n    }\n    return maxIndex;\n}\n```"
  },
  {
    "task": "Write a function that takes a list of grades and returns the highest grade.",
    "code": "```cpp\n#include <vector>\n#include <algorithm>\n\nint highestGrade(const std::vector<int>& grades) {\n    return *std::max_element(grades.begin(), grades.end());\n}\n```"
  },
  {
    "task": "Create a function that returns the product of all positive integers up to a given number.",
    "code": "```cpp\n#include <iostream>\n\nint productUpTo(int n) {\n    if (n <= 0) return 0;\n    int product = 1;\n    for (int i = 1; i <= n; ++i) {\n        product *= i;\n    }\n    return product;\n}\n\nint main() {\n    int number = 5; // Example usage\n    std::cout << \"Product up to \" << number << \" is \" << productUpTo(number) << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a function that receives a string and returns a new string with spaces replaced by hyphens.",
    "code": "```cpp\n#include <string>\n\nstd::string replaceSpacesWithHyphens(const std::string& input) {\n    std::string result = input;\n    for (char& c : result) {\n        if (c == ' ') {\n            c = '-';\n        }\n    }\n    return result;\n}\n```"
  },
  {
    "task": "Implement a function that takes a list of integers and returns their sum.",
    "code": "```cpp\n#include <vector>\n\nint sumOfIntegers(const std::vector<int>& numbers) {\n    int sum = 0;\n    for (int number : numbers) {\n        sum += number;\n    }\n    return sum;\n}\n```"
  },
  {
    "task": "Write a function that checks if a string is a valid email address and returns a boolean.",
    "code": "```cpp\n#include <regex>\n#include <string>\n\nbool isValidEmail(const std::string& email) {\n    const std::regex pattern(R\"((\\w+)(\\.\\w+)*@(\\w+)(\\.\\w+)+)\");\n    return std::regex_match(email, pattern);\n}\n```"
  },
  {
    "task": "Create a function that returns the decimal equivalent of a hexadecimal string.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n#include <sstream>\n\nint hexToDecimal(const std::string& hexStr) {\n    int decimalValue;\n    std::stringstream ss;\n    ss << std::hex << hexStr;\n    ss >> decimalValue;\n    return decimalValue;\n}\n\nint main() {\n    std::string hexStr = \"1A3F\";\n    int decimalValue = hexToDecimal(hexStr);\n    std::cout << \"Decimal equivalent: \" << decimalValue << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Design a function that calculates and returns the body mass index based on height and weight.",
    "code": "```cpp\n#include <iostream>\n\ndouble calculateBMI(double weight, double height) {\n    return weight / (height * height);\n}\n\nint main() {\n    double weight = 70.0; // example weight in kilograms\n    double height = 1.75; // example height in meters\n    double bmi = calculateBMI(weight, height);\n    std::cout << \"BMI: \" << bmi << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function that returns the initials of a person's name given a full name.",
    "code": "```cpp\n#include <iostream>\n#include <sstream>\n#include <string>\n\nstd::string getInitials(const std::string& fullName) {\n    std::istringstream iss(fullName);\n    std::string word;\n    std::string initials;\n    \n    while (iss >> word) {\n        if (!word.empty()) {\n            initials += word[0];\n        }\n    }\n    \n    return initials;\n}\n\nint main() {\n    std::string name = \"John Fitzgerald Kennedy\";\n    std::cout << getInitials(name) << std::endl; // Output: JFK\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that accepts a list of names and returns them sorted alphabetically.",
    "code": "```cpp\n#include <vector>\n#include <string>\n#include <algorithm>\n\nstd::vector<std::string> sortNames(const std::vector<std::string>& names) {\n    std::vector<std::string> sortedNames = names;\n    std::sort(sortedNames.begin(), sortedNames.end());\n    return sortedNames;\n}\n```"
  },
  {
    "task": "Create a function that takes a list of integers and returns a list of their squares.",
    "code": "```cpp\n#include <vector>\n\nstd::vector<int> squareList(const std::vector<int>& nums) {\n    std::vector<int> squares;\n    for (int num : nums) {\n        squares.push_back(num * num);\n    }\n    return squares;\n}\n```"
  },
  {
    "task": "Develop a function that returns the common elements between two sets.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n#include <vector>\n\nstd::set<int> commonElements(const std::set<int>& set1, const std::set<int>& set2) {\n    std::set<int> common;\n    for (const int& element : set1) {\n        if (set2.find(element) != set2.end()) {\n            common.insert(element);\n        }\n    }\n    return common;\n}\n\nint main() {\n    std::set<int> set1 = {1, 2, 3, 4, 5};\n    std::set<int> set2 = {4, 5, 6, 7, 8};\n\n    std::set<int> result = commonElements(set1, set2);\n\n    for (const int& element : result) {\n        std::cout << element << \" \";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function that receives a list of strings and returns the shortest string.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string findShortestString(const std::vector<std::string>& strings) {\n    if (strings.empty()) return \"\";\n    std::string shortest = strings[0];\n    for (const auto& str : strings) {\n        if (str.length() < shortest.length()) {\n            shortest = str;\n        }\n    }\n    return shortest;\n}\n\nint main() {\n    std::vector<std::string> strings = {\"apple\", \"banana\", \"pear\", \"kiwi\"};\n    std::cout << \"The shortest string is: \" << findShortestString(strings) << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that returns the sum of digits of a given integer.",
    "code": "```cpp\n#include <iostream>\n\nint sumOfDigits(int n) {\n    int sum = 0;\n    while (n != 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum;\n}\n\nint main() {\n    int number = 12345;\n    std::cout << \"Sum of digits: \" << sumOfDigits(number) << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Create a function that takes a matrix and returns its transpose.",
    "code": "```cpp\n#include <vector>\n\nstd::vector<std::vector<int>> transposeMatrix(const std::vector<std::vector<int>>& matrix) {\n    if (matrix.empty() || matrix[0].empty()) return {};\n\n    size_t rows = matrix.size();\n    size_t cols = matrix[0].size();\n    std::vector<std::vector<int>> transposed(cols, std::vector<int>(rows));\n\n    for (size_t i = 0; i < rows; ++i) {\n        for (size_t j = 0; j < cols; ++j) {\n            transposed[j][i] = matrix[i][j];\n        }\n    }\n    return transposed;\n}\n```"
  },
  {
    "task": "Design a function that returns the percentage of uppercase letters in a string.",
    "code": "```cpp\n#include <iostream>\n#include <cctype>\n\ndouble percentageOfUppercase(const std::string& str) {\n    if (str.empty()) return 0.0;\n    \n    int upperCount = 0;\n    for (char c : str) {\n        if (std::isupper(c)) {\n            ++upperCount;\n        }\n    }\n    return (static_cast<double>(upperCount) / str.length()) * 100.0;\n}\n\nint main() {\n    std::string input = \"Hello World!\";\n    std::cout << \"Percentage of uppercase letters: \" << percentageOfUppercase(input) << \"%\" << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function that accepts a string and returns it with each word capitalized.",
    "code": "```cpp\n#include <iostream>\n#include <sstream>\n#include <string>\n#include <cctype>\n\nstd::string capitalizeWords(const std::string& input) {\n    std::istringstream stream(input);\n    std::string word, result;\n    while (stream >> word) {\n        if (!word.empty() && std::islower(word[0])) {\n            word[0] = std::toupper(word[0]);\n        }\n        result += word + \" \";\n    }\n    if (!result.empty() && result.back() == ' ') {\n        result.pop_back();\n    }\n    return result;\n}\n\nint main() {\n    std::string text = \"hello world from cplusplus\";\n    std::string capitalized = capitalizeWords(text);\n    std::cout << capitalized << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that takes a list and returns the difference between the max and min values.",
    "code": "```cpp\n#include <vector>\n#include <algorithm>\n\nint maxMinDifference(const std::vector<int>& list) {\n    if (list.empty()) return 0;\n    int maxVal = *std::max_element(list.begin(), list.end());\n    int minVal = *std::min_element(list.begin(), list.end());\n    return maxVal - minVal;\n}\n```"
  },
  {
    "task": "Create a function that returns a list containing the first n prime numbers.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nbool isPrime(int num) {\n    if (num <= 1) return false;\n    if (num <= 3) return true;\n    if (num % 2 == 0 || num % 3 == 0) return false;\n    for (int i = 5; i * i <= num; i += 6) {\n        if (num % i == 0 || num % (i + 2) == 0) return false;\n    }\n    return true;\n}\n\nstd::vector<int> firstNPrimes(int n) {\n    std::vector<int> primes;\n    int num = 2;\n    while (primes.size() < n) {\n        if (isPrime(num)) {\n            primes.push_back(num);\n        }\n        num++;\n    }\n    return primes;\n}\n\nint main() {\n    int n = 10; // Example: Get the first 10 prime numbers\n    std::vector<int> primes = firstNPrimes(n);\n    for (int prime : primes) {\n        std::cout << prime << \" \";\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a function that receives a dictionary and returns a new dictionary with keys and values swapped.",
    "code": "```cpp\n#include <iostream>\n#include <map>\n\nstd::map<int, std::string> swapDictionary(const std::map<std::string, int>& inputDict) {\n    std::map<int, std::string> swappedDict;\n    for (const auto& pair : inputDict) {\n        swappedDict[pair.second] = pair.first;\n    }\n    return swappedDict;\n}\n\nint main() {\n    std::map<std::string, int> originalDict = {{\"one\", 1}, {\"two\", 2}, {\"three\", 3}};\n    std::map<int, std::string> swappedDict = swapDictionary(originalDict);\n    for (const auto& pair : swappedDict) {\n        std::cout << pair.first << \": \" << pair.second << std::endl;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function that accepts a string and returns the frequency of each word.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n#include <map>\n#include <sstream>\n\nstd::map<std::string, int> wordFrequency(const std::string &text) {\n    std::map<std::string, int> frequency;\n    std::istringstream stream(text);\n    std::string word;\n    while (stream >> word) {\n        ++frequency[word];\n    }\n    return frequency;\n}\n```"
  },
  {
    "task": "Write a function that takes two numbers and returns their greatest common divisor.",
    "code": "```cpp\n#include <iostream>\n\nint gcd(int a, int b) {\n    while (b != 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n\nint main() {\n    int num1 = 48;\n    int num2 = 18;\n    std::cout << \"GCD of \" << num1 << \" and \" << num2 << \" is: \" << gcd(num1, num2) << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Create a function that returns the number of consonants in a given string.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n#include <cctype>\n\nbool isConsonant(char ch) {\n    ch = std::tolower(ch);\n    return std::isalpha(ch) && !(ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u');\n}\n\nint countConsonants(const std::string& str) {\n    int count = 0;\n    for (char ch : str) {\n        if (isConsonant(ch)) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    std::string input = \"example string\"; // Example input\n    std::cout << \"Number of consonants: \" << countConsonants(input) << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Design a function that checks if a number is a perfect square and returns a boolean.",
    "code": "```cpp\n#include <cmath>\n\nbool isPerfectSquare(int num) {\n    if (num < 0) return false;\n    int root = static_cast<int>(sqrt(num));\n    return root * root == num;\n}\n```"
  },
  {
    "task": "Implement a function that takes a list of numbers and returns the mode.",
    "code": "```cpp\n#include <vector>\n#include <unordered_map>\n\nint findMode(const std::vector<int>& numbers) {\n    std::unordered_map<int, int> frequency;\n    for (int number : numbers) {\n        frequency[number]++;\n    }\n\n    int mode = numbers[0];\n    int maxCount = 0;\n    for (const auto& pair : frequency) {\n        if (pair.second > maxCount) {\n            maxCount = pair.second;\n            mode = pair.first;\n        }\n    }\n    \n    return mode;\n}\n```"
  },
  {
    "task": "Write a function that accepts a string and returns a new string with characters in reverse order.",
    "code": "```cpp\n#include <string>\n\nstd::string reverseString(const std::string& str) {\n    return std::string(str.rbegin(), str.rend());\n}\n```"
  },
  {
    "task": "Create a function that returns the sum of all even numbers in a list.",
    "code": "```cpp\n#include <vector>\n\nint sumOfEvenNumbers(const std::vector<int>& numbers) {\n    int sum = 0;\n    for (int number : numbers) {\n        if (number % 2 == 0) {\n            sum += number;\n        }\n    }\n    return sum;\n}\n```"
  },
  {
    "task": "Develop a function that receives two lists and returns their union.",
    "code": "```cpp\n#include <vector>\n#include <algorithm>\n\nstd::vector<int> unionOfLists(const std::vector<int>& list1, const std::vector<int>& list2) {\n    std::vector<int> result = list1;\n    for (int element : list2) {\n        if (std::find(result.begin(), result.end(), element) == result.end()) {\n            result.push_back(element);\n        }\n    }\n    return result;\n}\n```"
  },
  {
    "task": "Implement a function that takes a string and returns the number of unique characters.",
    "code": "```cpp\n#include <iostream>\n#include <unordered_set>\n#include <string>\n\nint countUniqueCharacters(const std::string& input) {\n    std::unordered_set<char> uniqueChars(input.begin(), input.end());\n    return uniqueChars.size();\n}\n\nint main() {\n    std::string input = \"example\";\n    std::cout << \"Number of unique characters: \" << countUniqueCharacters(input) << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that returns the cube of a given number.",
    "code": "```cpp\n#include <iostream>\n\ndouble cube(double number) {\n    return number * number * number;\n}\n\nint main() {\n    double num = 3.0;\n    std::cout << \"Cube of \" << num << \" is \" << cube(num) << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Create a function that calculates the power of a number given a base and exponent and returns the result.",
    "code": "```cpp\n#include <iostream>\n\ndouble power(double base, int exponent) {\n    double result = 1.0;\n    for(int i = 0; i < exponent; ++i) {\n        result *= base;\n    }\n    return result;\n}\n\nint main() {\n    double base = 2.0;\n    int exponent = 3;\n    double result = power(base, exponent);\n    std::cout << \"Result: \" << result << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Design a function that accepts a URL and returns its domain name.",
    "code": "```cpp\n#include <string>\n\nstd::string getDomainName(const std::string& url) {\n    size_t protocolEnd = url.find(\"://\");\n    size_t start = (protocolEnd == std::string::npos) ? 0 : protocolEnd + 3;\n    size_t end = url.find('/', start);\n    end = (end == std::string::npos) ? url.length() : end;\n    return url.substr(start, end - start);\n}\n```"
  },
  {
    "task": "Implement a function that takes a sentence and returns it with each letter shifted by one in the alphabet.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nstd::string shiftSentence(const std::string &sentence) {\n    std::string shiftedSentence;\n    for (char c : sentence) {\n        if (isalpha(c)) {\n            char base = islower(c) ? 'a' : 'A';\n            c = (c - base + 1) % 26 + base;\n        }\n        shiftedSentence += c;\n    }\n    return shiftedSentence;\n}\n\nint main() {\n    std::string sentence = \"Hello World!\";\n    std::string result = shiftSentence(sentence);\n    std::cout << result << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that checks if a list is sorted and returns a boolean.",
    "code": "```cpp\n#include <vector>\n\nbool isSorted(const std::vector<int>& list) {\n    for (size_t i = 1; i < list.size(); ++i) {\n        if (list[i] < list[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n```"
  },
  {
    "task": "Create a function that returns the longest increasing subsequence in a list of numbers.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nstd::vector<int> longestIncreasingSubsequence(const std::vector<int>& nums) {\n    if (nums.empty()) return {};\n    \n    std::vector<int> dp(nums.size(), 1);\n    std::vector<int> prev(nums.size(), -1);\n    \n    int maxLength = 1, maxIndex = 0;\n    \n    for (size_t i = 1; i < nums.size(); ++i) {\n        for (size_t j = 0; j < i; ++j) {\n            if (nums[i] > nums[j] && dp[i] < dp[j] + 1) {\n                dp[i] = dp[j] + 1;\n                prev[i] = j;\n            }\n        }\n        if (dp[i] > maxLength) {\n            maxLength = dp[i];\n            maxIndex = i;\n        }\n    }\n    \n    std::vector<int> lis;\n    for (int i = maxIndex; i >= 0; i = prev[i]) {\n        lis.push_back(nums[i]);\n        if (prev[i] == -1) break;\n    }\n    std::reverse(lis.begin(), lis.end());\n    \n    return lis;\n}\n\nint main() {\n    std::vector<int> nums = {10, 9, 2, 5, 3, 7, 101, 18};\n    std::vector<int> result = longestIncreasingSubsequence(nums);\n    \n    for (int num : result) {\n        std::cout << num << \" \";\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Develop a function that calculates and returns the compound interest for given principal, rate, and time.",
    "code": "```cpp\n#include <cmath>\n\ndouble calculateCompoundInterest(double principal, double rate, double time) {\n    return principal * pow((1 + rate / 100), time) - principal;\n}\n\nint main() {\n    double principal = 1000.0; // Example principal\n    double rate = 5.0;         // Example rate\n    double time = 2.0;         // Example time\n\n    double interest = calculateCompoundInterest(principal, rate, time);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function that accepts two strings and returns their longest common substring.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n\nstd::string longestCommonSubstring(const std::string &s1, const std::string &s2) {\n    int m = s1.length();\n    int n = s2.length();\n    int maxLen = 0;\n    int endIndex = 0;\n    std::vector<std::vector<int>> dp(m + 1, std::vector<int>(n + 1, 0));\n\n    for (int i = 1; i <= m; ++i) {\n        for (int j = 1; j <= n; ++j) {\n            if (s1[i - 1] == s2[j - 1]) {\n                dp[i][j] = dp[i - 1][j - 1] + 1;\n                if (dp[i][j] > maxLen) {\n                    maxLen = dp[i][j];\n                    endIndex = i;\n                }\n            }\n        }\n    }\n    return s1.substr(endIndex - maxLen, maxLen);\n}\n\nint main() {\n    std::string str1 = \"abcde\";\n    std::string str2 = \"abfde\";\n    std::cout << \"Longest Common Substring: \" << longestCommonSubstring(str1, str2) << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that takes a number and returns true if it is a palindrome.",
    "code": "```cpp\n#include <iostream>\n\nbool isPalindrome(int number) {\n    int original = number;\n    int reversed = 0;\n    \n    while (number > 0) {\n        int digit = number % 10;\n        reversed = reversed * 10 + digit;\n        number /= 10;\n    }\n    \n    return original == reversed;\n}\n\nint main() {\n    int num = 121;\n    if (isPalindrome(num)) {\n        std::cout << num << \" is a palindrome.\" << std::endl;\n    } else {\n        std::cout << num << \" is not a palindrome.\" << std::endl;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Create a function that returns the average length of words in a given sentence.",
    "code": "```cpp\n#include <iostream>\n#include <sstream>\n#include <string>\n\ndouble averageWordLength(const std::string& sentence) {\n    std::istringstream stream(sentence);\n    std::string word;\n    int wordCount = 0;\n    int totalLength = 0;\n\n    while (stream >> word) {\n        totalLength += word.length();\n        ++wordCount;\n    }\n\n    return wordCount == 0 ? 0.0 : static_cast<double>(totalLength) / wordCount;\n}\n\nint main() {\n    std::string sentence = \"Sample sentence for testing\";\n    std::cout << \"Average word length: \" << averageWordLength(sentence) << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Design a function that checks if a string contains only digits and returns a boolean.",
    "code": "```cpp\n#include <string>\n#include <cctype>\n\nbool isStringOnlyDigits(const std::string& str) {\n    for (char ch : str) {\n        if (!std::isdigit(static_cast<unsigned char>(ch))) {\n            return false;\n        }\n    }\n    return true;\n}\n```"
  },
  {
    "task": "Implement a function that receives a list of tuples and returns a list of the first elements.",
    "code": "```cpp\n#include <vector>\n#include <tuple>\n\nstd::vector<int> getFirstElements(const std::vector<std::tuple<int, int>>& tuples) {\n    std::vector<int> result;\n    for (const auto& tup : tuples) {\n        result.push_back(std::get<0>(tup));\n    }\n    return result;\n}\n```"
  },
  {
    "task": "Write a function that takes a year and returns the Chinese zodiac sign for that year.",
    "code": "```cpp\n#include <string>\n\nstd::string getChineseZodiac(int year) {\n    const std::string zodiacSigns[] = {\n        \"Monkey\", \"Rooster\", \"Dog\", \"Pig\", \"Rat\", \"Ox\", \"Tiger\", \n        \"Rabbit\", \"Dragon\", \"Snake\", \"Horse\", \"Goat\"\n    };\n    return zodiacSigns[year % 12];\n}\n```"
  },
  {
    "task": "Create a function that returns the number of trailing zeros in a factorial of a given number.",
    "code": "```cpp\n#include <iostream>\n\nint trailingZerosInFactorial(int n) {\n    int count = 0;\n    for (int i = 5; n / i >= 1; i *= 5) {\n        count += n / i;\n    }\n    return count;\n}\n\nint main() {\n    int number;\n    std::cout << \"Enter a number: \";\n    std::cin >> number;\n    std::cout << \"Trailing zeros in factorial: \" << trailingZerosInFactorial(number) << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a function that accepts a list and returns a new list with elements multiplied by their index.",
    "code": "```cpp\n#include <vector>\n\nstd::vector<int> multiplyByIndex(const std::vector<int>& inputList) {\n    std::vector<int> result;\n    for (size_t i = 0; i < inputList.size(); ++i) {\n        result.push_back(inputList[i] * static_cast<int>(i));\n    }\n    return result;\n}\n```"
  },
  {
    "task": "Implement a function that receives a string and returns a dictionary of word lengths.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <sstream>\n\nstd::unordered_map<std::string, int> getWordLengths(const std::string& input) {\n    std::unordered_map<std::string, int> wordLengths;\n    std::istringstream stream(input);\n    std::string word;\n    while (stream >> word) {\n        wordLengths[word] = word.length();\n    }\n    return wordLengths;\n}\n\nint main() {\n    std::string input = \"Implement a function that receives a string\";\n    std::unordered_map<std::string, int> result = getWordLengths(input);\n    for (const auto& pair : result) {\n        std::cout << pair.first << \": \" << pair.second << std::endl;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that takes a list of integers and returns a list of numbers that are divisible by 3.",
    "code": "```cpp\n#include <vector>\n\nstd::vector<int> getNumbersDivisibleByThree(const std::vector<int>& numbers) {\n    std::vector<int> result;\n    for (int number : numbers) {\n        if (number % 3 == 0) {\n            result.push_back(number);\n        }\n    }\n    return result;\n}\n```"
  },
  {
    "task": "Create a function that returns the result of a quadratic equation given its coefficients.",
    "code": "```cpp\n#include <iostream>\n#include <cmath>\n#include <tuple>\n\nstd::tuple<double, double> quadraticEquation(double a, double b, double c) {\n    double discriminant = b * b - 4 * a * c;\n    if (discriminant < 0) {\n        throw std::invalid_argument(\"No real roots\");\n    }\n    double sqrtDiscriminant = std::sqrt(discriminant);\n    double root1 = (-b + sqrtDiscriminant) / (2 * a);\n    double root2 = (-b - sqrtDiscriminant) / (2 * a);\n    return std::make_tuple(root1, root2);\n}\n\nint main() {\n    double a = 1.0, b = -3.0, c = 2.0;\n    try {\n        auto [root1, root2] = quadraticEquation(a, b, c);\n        std::cout << \"Root 1: \" << root1 << \"\\n\";\n        std::cout << \"Root 2: \" << root2 << \"\\n\";\n    } catch (const std::invalid_argument& e) {\n        std::cout << e.what() << \"\\n\";\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Design a function that checks if two lists have any elements in common and returns a boolean.",
    "code": "```cpp\n#include <vector>\n#include <unordered_set>\n\nbool haveCommonElements(const std::vector<int>& list1, const std::vector<int>& list2) {\n    std::unordered_set<int> elements(list1.begin(), list1.end());\n    for (const int& element : list2) {\n        if (elements.find(element) != elements.end()) {\n            return true;\n        }\n    }\n    return false;\n}\n```"
  },
  {
    "task": "Implement a function that accepts a list and returns the sum of its elements using recursion.",
    "code": "```cpp\n#include <vector>\n\nint sumRecursive(const std::vector<int>& list, int index) {\n    if (index == list.size()) {\n        return 0;\n    }\n    return list[index] + sumRecursive(list, index + 1);\n}\n\nint sumOfElements(const std::vector<int>& list) {\n    return sumRecursive(list, 0);\n}\n```"
  },
  {
    "task": "Write a function that takes a list of numbers and returns the variance.",
    "code": "```cpp\n#include <vector>\n#include <numeric>\n#include <cmath>\n\ndouble calculateVariance(const std::vector<double>& numbers) {\n    if (numbers.empty()) return 0.0;\n    \n    double mean = std::accumulate(numbers.begin(), numbers.end(), 0.0) / numbers.size();\n    double variance = 0.0;\n    \n    for (double num : numbers) {\n        variance += (num - mean) * (num - mean);\n    }\n    \n    return variance / numbers.size();\n}\n```"
  },
  {
    "task": "Create a function that returns the ASCII value of a given character.",
    "code": "```cpp\n#include <iostream>\n\nint getAsciiValue(char character) {\n    return static_cast<int>(character);\n}\n\nint main() {\n    char ch = 'A';\n    std::cout << \"The ASCII value of \" << ch << \" is \" << getAsciiValue(ch) << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a function that takes a number and returns the number of bits required for its binary representation.",
    "code": "```cpp\n#include <iostream>\n\nint countBits(int number) {\n    if (number == 0) return 1;\n    int bits = 0;\n    while (number != 0) {\n        bits++;\n        number >>= 1;\n    }\n    return bits;\n}\n\nint main() {\n    int number = 23; // Example number\n    std::cout << \"Number of bits: \" << countBits(number) << std::endl;\n    return 0;\n}\n```"
  }
]