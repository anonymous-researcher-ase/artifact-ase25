[
  {
    "task": "Write a program that prints numbers from 1 to 10 using a for loop.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    for (int i = 1; i <= 10; ++i) {\n        std::cout << i << std::endl;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Create a loop that iterates over an array of names and prints each name.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nint main() {\n    std::string names[] = {\"Alice\", \"Bob\", \"Charlie\", \"Dave\"};\n\n    for (int i = 0; i < 4; ++i) {\n        std::cout << names[i] << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a for loop to calculate the factorial of a given number.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    int number;\n    unsigned long long factorial = 1;\n    \n    std::cout << \"Enter a positive integer: \";\n    std::cin >> number;\n\n    for(int i = 1; i <= number; ++i) {\n        factorial *= i;\n    }\n    \n    std::cout << \"Factorial of \" << number << \" = \" << factorial << std::endl;\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Implement a program that uses a for loop to sum all even numbers between 1 and 100.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    int sum = 0;\n    for (int i = 2; i <= 100; i += 2) {\n        sum += i;\n    }\n    std::cout << \"Sum of even numbers between 1 and 100 is: \" << sum << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Use a for loop to generate and print the Fibonacci sequence up to 20 terms.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    int n = 20;\n    long long first = 0, second = 1;\n\n    for (int i = 0; i < n; ++i) {\n        std::cout << first << \" \";\n        long long next = first + second;\n        first = second;\n        second = next;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Construct a for loop that prints the multiplication table for a given number.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    int number = 5; // Example number for which the multiplication table is printed\n    for (int i = 1; i <= 10; ++i) {\n        std::cout << number << \" * \" << i << \" = \" << number * i << std::endl;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Write code to iterate through a list of student grades and print only those above a certain threshold.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<int> grades = {85, 92, 78, 88, 69, 95, 77};\n    int threshold = 80;\n\n    for (int grade : grades) {\n        if (grade > threshold) {\n            std::cout << grade << std::endl;\n        }\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a for loop that appends the square of numbers 1 to 10 to a list.",
    "code": "```cpp\n#include <vector>\n\nint main() {\n    std::vector<int> squares;\n    for (int i = 1; i <= 10; ++i) {\n        squares.push_back(i * i);\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a for loop that reverses a given string.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nint main() {\n    std::string str = \"Hello, World!\";\n    std::string reversedStr = \"\";\n\n    for (int i = str.length() - 1; i >= 0; --i) {\n        reversedStr += str[i];\n    }\n\n    std::cout << \"Reversed string: \" << reversedStr << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Build a program that uses a for loop to print all elements in a 2D matrix.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<std::vector<int>> matrix = {\n        {1, 2, 3},\n        {4, 5, 6},\n        {7, 8, 9}\n    };\n\n    for (size_t i = 0; i < matrix.size(); ++i) {\n        for (size_t j = 0; j < matrix[i].size(); ++j) {\n            std::cout << matrix[i][j] << \" \";\n        }\n        std::cout << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Use a for loop to find the maximum value in an array of integers.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <limits>\n\nint main() {\n    std::vector<int> arr = {3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5};\n    int max_value = std::numeric_limits<int>::min();\n\n    for (int i = 0; i < arr.size(); ++i) {\n        if (arr[i] > max_value) {\n            max_value = arr[i];\n        }\n    }\n\n    std::cout << \"Maximum value: \" << max_value << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program that uses a for loop to print the characters of a string, one per line.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nint main() {\n    std::string str = \"Example String\";\n    for (size_t i = 0; i < str.length(); ++i) {\n        std::cout << str[i] << std::endl;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Create a for loop that counts the number of vowels in a given sentence.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nint main() {\n    std::string sentence = \"This is a sample sentence.\";\n    int vowelCount = 0;\n    std::string vowels = \"aeiouAEIOU\";\n\n    for (size_t i = 0; i < sentence.length(); ++i) {\n        if (vowels.find(sentence[i]) != std::string::npos) {\n            ++vowelCount;\n        }\n    }\n\n    std::cout << \"Number of vowels: \" << vowelCount << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a for loop to check if a number is prime by testing divisibility.",
    "code": "```cpp\n#include <iostream>\n\nbool isPrime(int number) {\n    if (number <= 1) return false;\n    for (int i = 2; i * i <= number; ++i) {\n        if (number % i == 0) return false;\n    }\n    return true;\n}\n\nint main() {\n    int num;\n    std::cout << \"Enter a number: \";\n    std::cin >> num;\n\n    if (isPrime(num)) {\n        std::cout << num << \" is a prime number.\" << std::endl;\n    } else {\n        std::cout << num << \" is not a prime number.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a for loop that prints a pyramid pattern of asterisks with a given height.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    int height;\n    std::cout << \"Enter the height of the pyramid: \";\n    std::cin >> height;\n\n    for (int i = 1; i <= height; ++i) {\n        for (int j = 1; j <= height - i; ++j) {\n            std::cout << \" \";\n        }\n        for (int k = 1; k <= (2 * i - 1); ++k) {\n            std::cout << \"*\";\n        }\n        std::cout << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program that uses a for loop to calculate the sum of digits of a number.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    int number, sum = 0;\n    std::cout << \"Enter a number: \";\n    std::cin >> number;\n    \n    for (; number > 0; number /= 10) {\n        sum += number % 10;\n    }\n    \n    std::cout << \"Sum of digits: \" << sum << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Construct a for loop to flatten a list of lists into a single list.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<std::vector<int>> listOfLists = {{1, 2, 3}, {4, 5}, {6, 7, 8, 9}};\n    std::vector<int> flattenedList;\n\n    for (const auto& sublist : listOfLists) {\n        for (int item : sublist) {\n            flattenedList.push_back(item);\n        }\n    }\n\n    for (int item : flattenedList) {\n        std::cout << item << \" \";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Use a for loop to generate a list of random numbers and print them.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <cstdlib>\n#include <ctime>\n\nint main() {\n    std::srand(std::time(0)); // Seed the random number generator\n    std::vector<int> randomNumbers;\n    \n    for (int i = 0; i < 10; ++i) { // Change 10 to the desired number of random numbers\n        int randomNumber = std::rand();\n        randomNumbers.push_back(randomNumber);\n    }\n    \n    for (int num : randomNumbers) {\n        std::cout << num << std::endl;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Create a for loop that iterates through a dictionary and prints its keys and values.",
    "code": "```cpp\n#include <iostream>\n#include <map>\n\nint main() {\n    std::map<std::string, int> myMap = {{\"apple\", 1}, {\"banana\", 2}, {\"cherry\", 3}};\n    \n    for (const auto& pair : myMap) {\n        std::cout << pair.first << \": \" << pair.second << std::endl;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Develop a for loop that counts down from 10 to 1 and prints each number.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    for (int i = 10; i >= 1; --i) {\n        std::cout << i << std::endl;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Write code to multiply each element in an array by 2 using a for loop.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<int> array = {1, 2, 3, 4, 5};\n\n    for (int i = 0; i < array.size(); ++i) {\n        array[i] *= 2;\n    }\n\n    for (int i = 0; i < array.size(); ++i) {\n        std::cout << array[i] << \" \";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a for loop that calculates the average of numbers in a list.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<int> numbers = {10, 20, 30, 40, 50}; // Example list of numbers\n    int sum = 0;\n    \n    for (int i = 0; i < numbers.size(); ++i) {\n        sum += numbers[i];\n    }\n    \n    double average = static_cast<double>(sum) / numbers.size();\n    \n    std::cout << \"Average: \" << average << std::endl;\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Implement a for loop to find duplicate elements in an array.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <unordered_set>\n\nint main() {\n    std::vector<int> array = {1, 2, 3, 4, 5, 3, 2, 6};\n    std::unordered_set<int> elements;\n    std::unordered_set<int> duplicates;\n\n    for (int i = 0; i < array.size(); ++i) {\n        if (elements.find(array[i]) != elements.end()) {\n            duplicates.insert(array[i]);\n        } else {\n            elements.insert(array[i]);\n        }\n    }\n\n    std::cout << \"Duplicate elements are: \";\n    for (int num : duplicates) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a for loop that removes all occurrences of a specific element from a list.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<int> list = {1, 2, 3, 4, 2, 5, 2};\n    int elementToRemove = 2;\n    std::vector<int> result;\n\n    for (int i = 0; i < list.size(); ++i) {\n        if (list[i] != elementToRemove) {\n            result.push_back(list[i]);\n        }\n    }\n\n    for (int i = 0; i < result.size(); ++i) {\n        std::cout << result[i] << \" \";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Use a for loop to simulate rolling a dice 100 times and count the occurrences of each face.",
    "code": "```cpp\n#include <iostream>\n#include <cstdlib>\n#include <ctime>\n\nint main() {\n    const int rolls = 100;\n    const int faces = 6;\n    int counts[faces] = {0};\n    \n    std::srand(std::time(0));\n\n    for (int i = 0; i < rolls; ++i) {\n        int roll = std::rand() % faces + 1;\n        counts[roll - 1]++;\n    }\n\n    for (int i = 0; i < faces; ++i) {\n        std::cout << \"Face \" << (i + 1) << \": \" << counts[i] << \" times\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a for loop that prints all the prime numbers between 1 and 50.",
    "code": "```cpp\n#include <iostream>\n\nbool isPrime(int num) {\n    if (num <= 1) return false;\n    for (int i = 2; i * i <= num; ++i) {\n        if (num % i == 0) return false;\n    }\n    return true;\n}\n\nint main() {\n    for (int i = 1; i <= 50; ++i) {\n        if (isPrime(i)) {\n            std::cout << i << \" \";\n        }\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a for loop that extracts all the uppercase letters from a string.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nint main() {\n    std::string input = \"ExampleStringWithUPPERCASE\";\n    std::string uppercaseLetters;\n    \n    for (char c : input) {\n        if (std::isupper(c)) {\n            uppercaseLetters += c;\n        }\n    }\n    \n    std::cout << \"Uppercase letters: \" << uppercaseLetters << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Create a for loop that checks if a list is sorted in ascending order.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nbool isSortedAscending(const std::vector<int>& list) {\n    for (size_t i = 0; i < list.size() - 1; ++i) {\n        if (list[i] > list[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint main() {\n    std::vector<int> list = {1, 2, 3, 4, 5};\n    if (isSortedAscending(list)) {\n        std::cout << \"The list is sorted in ascending order.\" << std::endl;\n    } else {\n        std::cout << \"The list is not sorted in ascending order.\" << std::endl;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a for loop to generate a list of the first 10 square numbers.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<int> squares;\n    for (int i = 1; i <= 10; ++i) {\n        squares.push_back(i * i);\n    }\n\n    for (int square : squares) {\n        std::cout << square << \" \";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write code to print all the elements of a list that are greater than a given number using a for loop.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<int> list = {1, 5, 8, 10, 3, 7};\n    int number = 5;\n\n    for (size_t i = 0; i < list.size(); ++i) {\n        if (list[i] > number) {\n            std::cout << list[i] << std::endl;\n        }\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Construct a for loop that finds the smallest number in an array.",
    "code": "```cpp\n#include <iostream>\n#include <climits>\n\nint main() {\n    int arr[] = {34, -50, 23, 0, 12, 99, -100, 25};\n    int n = sizeof(arr) / sizeof(arr[0]);\n\n    int smallest = INT_MAX;\n    for (int i = 0; i < n; ++i) {\n        if (arr[i] < smallest) {\n            smallest = arr[i];\n        }\n    }\n\n    std::cout << \"The smallest number is: \" << smallest << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a for loop that prints the first N lines of Pascal's Triangle.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nint main() {\n    int N;\n    std::cout << \"Enter the number of lines of Pascal's Triangle: \";\n    std::cin >> N;\n\n    std::vector<std::vector<int>> pascal(N);\n\n    for (int i = 0; i < N; ++i) {\n        pascal[i].resize(i + 1);\n        pascal[i][0] = pascal[i][i] = 1;\n        \n        for (int j = 1; j < i; ++j) {\n            pascal[i][j] = pascal[i - 1][j - 1] + pascal[i - 1][j];\n        }\n\n        for (int j = 0; j <= i; ++j) {\n            std::cout << pascal[i][j] << \" \";\n        }\n        std::cout << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a for loop that calculates the product of all elements in a list.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<int> numbers = {1, 2, 3, 4, 5}; // Example list\n    int product = 1;\n    \n    for (int i = 0; i < numbers.size(); ++i) {\n        product *= numbers[i];\n    }\n    \n    std::cout << \"Product of all elements: \" << product << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Use a for loop to print numbers from 1 to 100, but replace multiples of 3 with 'Fizz'.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    for (int i = 1; i <= 100; ++i) {\n        if (i % 3 == 0) {\n            std::cout << \"Fizz\\n\";\n        } else {\n            std::cout << i << '\\n';\n        }\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Write a for loop that iterates over a string and counts the number of words.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nint main() {\n    std::string text = \"This is a sample string with several words.\";\n    int wordCount = 0;\n    bool inWord = false;\n\n    for (size_t i = 0; i < text.length(); ++i) {\n        if (std::isspace(text[i])) {\n            inWord = false;\n        } else {\n            if (!inWord) {\n                ++wordCount;\n                inWord = true;\n            }\n        }\n    }\n\n    std::cout << \"Number of words: \" << wordCount << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Design a for loop that prints numbers from 1 to 50, but skips numbers divisible by 5.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    for (int i = 1; i <= 50; ++i) {\n        if (i % 5 == 0) continue;\n        std::cout << i << std::endl;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a for loop that prints a checkerboard pattern of asterisks.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    int size = 8; // Size of the checkerboard\n    for (int i = 0; i < size; ++i) {\n        for (int j = 0; j < size; ++j) {\n            if ((i + j) % 2 == 0) {\n                std::cout << '*';\n            } else {\n                std::cout << ' ';\n            }\n        }\n        std::cout << '\\n';\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Create a for loop that finds the index of a target value in a list.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nint findIndex(const std::vector<int>& list, int target) {\n    for (int i = 0; i < list.size(); ++i) {\n        if (list[i] == target) {\n            return i;\n        }\n    }\n    return -1;\n}\n\nint main() {\n    std::vector<int> list = {10, 20, 30, 40, 50};\n    int target = 30;\n    int index = findIndex(list, target);\n    \n    std::cout << \"Index of target value: \" << index << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Use a for loop to concatenate a list of strings into a single string.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n\nint main() {\n    std::vector<std::string> stringList = {\"Hello\", \" \", \"World\", \"!\"};\n    std::string concatenatedString;\n\n    for (size_t i = 0; i < stringList.size(); ++i) {\n        concatenatedString += stringList[i];\n    }\n\n    std::cout << concatenatedString << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a for loop that rotates a list to the right by a given number of positions.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nvoid rotateRight(std::vector<int>& nums, int k) {\n    int n = nums.size();\n    k = k % n;\n    std::vector<int> rotated(n);\n    \n    for (int i = 0; i < n; ++i) {\n        rotated[(i + k) % n] = nums[i];\n    }\n    \n    nums = rotated;\n}\n\nint main() {\n    std::vector<int> nums = {1, 2, 3, 4, 5};\n    int k = 2;\n\n    rotateRight(nums, k);\n\n    for (int num : nums) {\n        std::cout << num << \" \";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write code that uses a for loop to insert an element into a sorted list while maintaining order.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nvoid insertInOrder(std::vector<int>& sortedList, int element) {\n    bool inserted = false;\n    for (auto it = sortedList.begin(); it != sortedList.end(); ++it) {\n        if (*it > element) {\n            sortedList.insert(it, element);\n            inserted = true;\n            break;\n        }\n    }\n    if (!inserted) {\n        sortedList.push_back(element);\n    }\n}\n\nint main() {\n    std::vector<int> sortedList = {1, 3, 5, 7, 9};\n    int element = 6;\n    \n    insertInOrder(sortedList, element);\n    \n    for (int num : sortedList) {\n        std::cout << num << \" \";\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Implement a for loop that counts the frequency of each character in a string.",
    "code": "```cpp\n#include <iostream>\n#include <unordered_map>\n#include <string>\n\nint main() {\n    std::string input = \"example string\";\n    std::unordered_map<char, int> frequency;\n\n    for (char c : input) {\n        frequency[c]++;\n    }\n\n    for (const auto& pair : frequency) {\n        std::cout << pair.first << \": \" << pair.second << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a for loop that prints all subsets of a given set.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nvoid printSubsets(const std::vector<int>& set) {\n    int n = set.size();\n    int subsetCount = 1 << n; // 2^n subsets\n\n    for (int i = 0; i < subsetCount; ++i) {\n        std::cout << \"{ \";\n        for (int j = 0; j < n; ++j) {\n            if (i & (1 << j)) {\n                std::cout << set[j] << \" \";\n            }\n        }\n        std::cout << \"}\" << std::endl;\n    }\n}\n\nint main() {\n    std::vector<int> set = {1, 2, 3};\n    printSubsets(set);\n    return 0;\n}\n```"
  },
  {
    "task": "Design a for loop to generate all permutations of a string.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n#include <algorithm>\n\nint main() {\n    std::string str = \"abc\";\n    std::sort(str.begin(), str.end());\n    do {\n        std::cout << str << std::endl;\n    } while (std::next_permutation(str.begin(), str.end()));\n    return 0;\n}\n```"
  },
  {
    "task": "Write a for loop that sorts an array in descending order.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<int> array = {5, 2, 9, 1, 5, 6};\n    int n = array.size();\n\n    for (int i = 0; i < n - 1; ++i) {\n        for (int j = 0; j < n - i - 1; ++j) {\n            if (array[j] < array[j + 1]) {\n                std::swap(array[j], array[j + 1]);\n            }\n        }\n    }\n\n    for (int i = 0; i < n; ++i) {\n        std::cout << array[i] << \" \";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Use a for loop to generate a sequence of random characters and print them.",
    "code": "```cpp\n#include <iostream>\n#include <cstdlib>\n#include <ctime>\n\nint main() {\n    std::srand(std::time(0)); // Seed random number generator\n\n    for (int i = 0; i < 10; ++i) { // Generate 10 random characters\n        char randomChar = 'A' + std::rand() % 26; // Random character from A to Z\n        std::cout << randomChar;\n    }\n    std::cout << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Construct a for loop that finds the common elements between two lists.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <unordered_set>\n\nint main() {\n    std::vector<int> list1 = {1, 2, 3, 4, 5};\n    std::vector<int> list2 = {4, 5, 6, 7, 8};\n    std::unordered_set<int> commonElements;\n\n    for (int i = 0; i < list1.size(); ++i) {\n        for (int j = 0; j < list2.size(); ++j) {\n            if (list1[i] == list2[j]) {\n                commonElements.insert(list1[i]);\n                break;\n            }\n        }\n    }\n\n    std::cout << \"Common elements: \";\n    for (const int &element : commonElements) {\n        std::cout << element << \" \";\n    }\n    std::cout << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a for loop to calculate and print the cumulative sum of a list.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<int> numbers = {1, 2, 3, 4, 5}; // Example list\n    int cumulativeSum = 0;\n    \n    for (int i = 0; i < numbers.size(); ++i) {\n        cumulativeSum += numbers[i];\n        std::cout << \"Cumulative sum after element \" << i+1 << \": \" << cumulativeSum << std::endl;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Create a for loop that prints a diamond pattern using asterisks.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    int n = 5; // Number of rows in the upper half of the diamond\n\n    // Upper half of the diamond\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < n - i - 1; ++j) {\n            std::cout << \" \";\n        }\n        for (int j = 0; j < 2 * i + 1; ++j) {\n            std::cout << \"*\";\n        }\n        std::cout << std::endl;\n    }\n\n    // Lower half of the diamond\n    for (int i = n - 2; i >= 0; --i) {\n        for (int j = 0; j < n - i - 1; ++j) {\n            std::cout << \" \";\n        }\n        for (int j = 0; j < 2 * i + 1; ++j) {\n            std::cout << \"*\";\n        }\n        std::cout << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a for loop that simulates a countdown timer from a specified number of seconds.",
    "code": "```cpp\n#include <iostream>\n#include <thread>\n#include <chrono>\n\nint main() {\n    int countdown = 10; // You can set the desired countdown time in seconds\n    for (int i = countdown; i > 0; --i) {\n        std::cout << \"Time left: \" << i << \" seconds\" << std::endl;\n        std::this_thread::sleep_for(std::chrono::seconds(1));\n    }\n    std::cout << \"Countdown finished!\" << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Use a for loop to print the transpose of a matrix.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<std::vector<int>> matrix = {\n        {1, 2, 3},\n        {4, 5, 6},\n        {7, 8, 9}\n    };\n\n    int rows = matrix.size();\n    int cols = matrix[0].size();\n\n    for (int i = 0; i < cols; ++i) {\n        for (int j = 0; j < rows; ++j) {\n            std::cout << matrix[j][i] << \" \";\n        }\n        std::cout << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a for loop that reverses the order of words in a sentence.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n#include <sstream>\n\nint main() {\n    std::string sentence = \"Implement a for loop that reverses the order of words in a sentence\";\n    std::vector<std::string> words;\n    std::stringstream ss(sentence);\n    std::string word;\n\n    while (ss >> word) {\n        words.push_back(word);\n    }\n\n    for (int i = words.size() - 1; i >= 0; --i) {\n        std::cout << words[i];\n        if (i != 0) std::cout << \" \";\n    }\n\n    std::cout << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Create a for loop that deletes elements from a list that are less than a given value.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<int> numbers = {5, 3, 8, 1, 9, 2, 10, 4};\n    int threshold = 5;\n\n    for (auto it = numbers.begin(); it != numbers.end(); ) {\n        if (*it < threshold) {\n            it = numbers.erase(it);\n        } else {\n            ++it;\n        }\n    }\n\n    for (int number : numbers) {\n        std::cout << number << \" \";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a for loop to merge two sorted lists into a single sorted list.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nstd::vector<int> mergeSortedLists(const std::vector<int>& list1, const std::vector<int>& list2) {\n    std::vector<int> mergedList;\n    int i = 0, j = 0;\n\n    for (; i < list1.size() && j < list2.size();) {\n        if (list1[i] < list2[j]) {\n            mergedList.push_back(list1[i]);\n            i++;\n        } else {\n            mergedList.push_back(list2[j]);\n            j++;\n        }\n    }\n\n    for (; i < list1.size(); i++) {\n        mergedList.push_back(list1[i]);\n    }\n\n    for (; j < list2.size(); j++) {\n        mergedList.push_back(list2[j]);\n    }\n\n    return mergedList;\n}\n\nint main() {\n    std::vector<int> list1 = {1, 3, 5, 7};\n    std::vector<int> list2 = {2, 4, 6, 8};\n    std::vector<int> result = mergeSortedLists(list1, list2);\n\n    for (int num : result) {\n        std::cout << num << \" \";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a for loop that calculates the power of a number using repeated multiplication.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    int base = 2; // Example base\n    int exponent = 5; // Example exponent\n    int result = 1;\n\n    for (int i = 0; i < exponent; ++i) {\n        result *= base;\n    }\n\n    std::cout << base << \"^\" << exponent << \" = \" << result << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Use a for loop to find the longest word in a list of words.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n\nint main() {\n    std::vector<std::string> words = {\"apple\", \"banana\", \"grapefruit\", \"kiwi\", \"strawberry\"};\n    std::string longestWord = \"\";\n    \n    for (const auto& word : words) {\n        if (word.length() > longestWord.length()) {\n            longestWord = word;\n        }\n    }\n    \n    std::cout << \"The longest word is: \" << longestWord << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a for loop that sorts a list of tuples based on the second element.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nint main() {\n    std::vector<std::pair<int, int>> tuples = {{3, 2}, {1, 5}, {4, 1}, {2, 4}};\n    \n    for (size_t i = 0; i < tuples.size(); ++i) {\n        for (size_t j = i + 1; j < tuples.size(); ++j) {\n            if (tuples[i].second > tuples[j].second) {\n                std::swap(tuples[i], tuples[j]);\n            }\n        }\n    }\n    \n    for (const auto &p : tuples) {\n        std::cout << \"(\" << p.first << \", \" << p.second << \") \";\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Create a for loop that replicates each character in a string a given number of times.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nstd::string replicateCharacters(const std::string& input, int times) {\n    std::string result;\n    for (char ch : input) {\n        for (int i = 0; i < times; ++i) {\n            result += ch;\n        }\n    }\n    return result;\n}\n\nint main() {\n    std::string str = \"Hello\";\n    int times = 3;\n    std::string replicated = replicateCharacters(str, times);\n    std::cout << replicated << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Construct a for loop that replaces spaces in a string with hyphens.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nint main() {\n    std::string text = \"Replace spaces with hyphens\";\n    \n    for (size_t i = 0; i < text.length(); ++i) {\n        if (text[i] == ' ') {\n            text[i] = '-';\n        }\n    }\n\n    std::cout << text << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Design a for loop to find the intersection of two sets.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n\nint main() {\n    std::set<int> set1 = {1, 2, 3, 4, 5};\n    std::set<int> set2 = {3, 4, 5, 6, 7};\n    std::set<int> intersection;\n\n    for (int num : set1) {\n        if (set2.find(num) != set2.end()) {\n            intersection.insert(num);\n        }\n    }\n\n    std::cout << \"Intersection: \";\n    for (int num : intersection) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a for loop that generates a list of prime numbers up to a given number.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <cmath>\n\nbool isPrime(int num) {\n    if (num <= 1) return false;\n    if (num <= 3) return true;\n    if (num % 2 == 0 || num % 3 == 0) return false;\n    for (int i = 5; i * i <= num; i += 6) {\n        if (num % i == 0 || num % (i + 2) == 0) return false;\n    }\n    return true;\n}\n\nstd::vector<int> generatePrimes(int max) {\n    std::vector<int> primes;\n    for (int i = 2; i <= max; ++i) {\n        if (isPrime(i)) {\n            primes.push_back(i);\n        }\n    }\n    return primes;\n}\n\nint main() {\n    int maxNumber;\n    std::cout << \"Enter a number: \";\n    std::cin >> maxNumber;\n\n    std::vector<int> primes = generatePrimes(maxNumber);\n    std::cout << \"Prime numbers up to \" << maxNumber << \": \";\n    for (int prime : primes) {\n        std::cout << prime << \" \";\n    }\n    std::cout << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Use a for loop to implement a simple text-based progress bar.",
    "code": "```cpp\n#include <iostream>\n#include <unistd.h> // For sleep function\n\nint main() {\n    const int total = 50;\n    \n    std::cout << \"Progress: [\";\n    for (int i = 0; i < total; ++i) {\n        std::cout << \"#\";\n        std::cout.flush();\n        sleep(1); // Simulate work being done\n    }\n    std::cout << \"] Done!\\n\";\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Implement a for loop that finds and prints all palindromic numbers between 10 and 200.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nbool isPalindrome(int number) {\n    std::string str = std::to_string(number);\n    for (int i = 0; i < str.size() / 2; ++i) {\n        if (str[i] != str[str.size() - 1 - i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint main() {\n    for (int i = 10; i <= 200; ++i) {\n        if (isPalindrome(i)) {\n            std::cout << i << std::endl;\n        }\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Create a for loop that multiplies corresponding elements of two lists and stores the result.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<int> list1 = {1, 2, 3, 4, 5};\n    std::vector<int> list2 = {6, 7, 8, 9, 10};\n    std::vector<int> result(list1.size());\n\n    for (size_t i = 0; i < list1.size(); ++i) {\n        result[i] = list1[i] * list2[i];\n    }\n\n    for (size_t i = 0; i < result.size(); ++i) {\n        std::cout << result[i] << \" \";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a for loop that finds the difference between the largest and smallest numbers in a list.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <limits>\n\nint main() {\n    std::vector<int> numbers = {10, 20, 5, 30, 15}; // Example list\n    int maxNum = std::numeric_limits<int>::min();\n    int minNum = std::numeric_limits<int>::max();\n\n    for (int num : numbers) {\n        if (num > maxNum) {\n            maxNum = num;\n        }\n        if (num < minNum) {\n            minNum = num;\n        }\n    }\n\n    int difference = maxNum - minNum;\n    std::cout << \"Difference between largest and smallest: \" << difference << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a for loop that prints numbers from 1 to 100, replacing multiples of 5 with 'Buzz'.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    for (int i = 1; i <= 100; ++i) {\n        if (i % 5 == 0) {\n            std::cout << \"Buzz\" << std::endl;\n        } else {\n            std::cout << i << std::endl;\n        }\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Use a for loop to convert a list of integers into their binary representation.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <bitset>\n\nint main() {\n    std::vector<int> integers = {1, 2, 3, 4, 5};\n    std::vector<std::string> binaryRepresentations;\n\n    for (int num : integers) {\n        binaryRepresentations.push_back(std::bitset<8>(num).to_string());\n    }\n    \n    for (const std::string& bin : binaryRepresentations) {\n        std::cout << bin << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a for loop that fills a 2D array with consecutive numbers in a spiral pattern.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nvoid fillSpiral(int n, std::vector<std::vector<int>>& matrix) {\n    int num = 1;\n    int top = 0, bottom = n - 1, left = 0, right = n - 1;\n\n    while (top <= bottom && left <= right) {\n        for (int i = left; i <= right; ++i) {\n            matrix[top][i] = num++;\n        }\n        ++top;\n        for (int i = top; i <= bottom; ++i) {\n            matrix[i][right] = num++;\n        }\n        --right;\n        if (top <= bottom) {\n            for (int i = right; i >= left; --i) {\n                matrix[bottom][i] = num++;\n            }\n            --bottom;\n        }\n        if (left <= right) {\n            for (int i = bottom; i >= top; --i) {\n                matrix[i][left] = num++;\n            }\n            ++left;\n        }\n    }\n}\n\nint main() {\n    int n = 5; // Example size of the 2D array\n    std::vector<std::vector<int>> matrix(n, std::vector<int>(n));\n    \n    fillSpiral(n, matrix);\n\n    for (const auto& row : matrix) {\n        for (int val : row) {\n            std::cout << val << \" \";\n        }\n        std::cout << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a for loop that iterates over a list and removes duplicates.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <set>\n\nint main() {\n    std::vector<int> numbers = {1, 2, 2, 3, 4, 4, 5};\n    std::vector<int> uniqueNumbers;\n    std::set<int> seen;\n\n    for (int number : numbers) {\n        if (seen.find(number) == seen.end()) {\n            uniqueNumbers.push_back(number);\n            seen.insert(number);\n        }\n    }\n\n    for (int number : uniqueNumbers) {\n        std::cout << number << \" \";\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a for loop to calculate the dot product of two vectors.",
    "code": "```cpp\n#include <vector>\n#include <iostream>\n\nint main() {\n    std::vector<int> vector1 = {1, 2, 3};\n    std::vector<int> vector2 = {4, 5, 6};\n    int dotProduct = 0;\n    \n    for (size_t i = 0; i < vector1.size(); ++i) {\n        dotProduct += vector1[i] * vector2[i];\n    }\n    \n    std::cout << \"Dot Product: \" << dotProduct << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Write a for loop that prints a sequence of numbers in reverse order.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    for (int i = 10; i > 0; --i) {\n        std::cout << i << std::endl;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a for loop that computes the greatest common divisor (GCD) of two numbers.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    int a, b;\n    std::cout << \"Enter two numbers: \";\n    std::cin >> a >> b;\n\n    int gcd = 1;\n    for (int i = 1; i <= std::min(a, b); ++i) {\n        if (a % i == 0 && b % i == 0) {\n            gcd = i;\n        }\n    }\n\n    std::cout << \"GCD: \" << gcd << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Construct a for loop that prints a square pattern of numbers with a given side length.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    int sideLength = 5; // Example side length, can be modified as needed\n    for (int i = 0; i < sideLength; ++i) {\n        for (int j = 0; j < sideLength; ++j) {\n            std::cout << j + 1 << ' ';\n        }\n        std::cout << std::endl;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Create a for loop that shifts all elements of a list to the left by one position.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<int> list = {1, 2, 3, 4, 5};\n    int size = list.size();\n    \n    if (size > 1) {\n        int firstElement = list[0];\n        \n        for (int i = 0; i < size - 1; ++i) {\n            list[i] = list[i + 1];\n        }\n        \n        list[size - 1] = firstElement;\n    }\n    \n    for (int elem : list) {\n        std::cout << elem << \" \";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Use a for loop to print the first 20 triangular numbers.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    for (int n = 1; n <= 20; ++n) {\n        int triangularNumber = n * (n + 1) / 2;\n        std::cout << triangularNumber << std::endl;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Write a for loop that finds the first repeating character in a string.",
    "code": "```cpp\n#include <iostream>\n#include <unordered_set>\n#include <string>\n\nchar findFirstRepeatingCharacter(const std::string& str) {\n    std::unordered_set<char> seen;\n    for (char ch : str) {\n        if (seen.find(ch) != seen.end()) {\n            return ch;\n        }\n        seen.insert(ch);\n    }\n    return '\\0'; // Return null character if no repeating character is found\n}\n\nint main() {\n    std::string input = \"example\";\n    char result = findFirstRepeatingCharacter(input);\n    if (result != '\\0') {\n        std::cout << \"First repeating character: \" << result << std::endl;\n    } else {\n        std::cout << \"No repeating character found.\" << std::endl;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Design a for loop that transforms a list of temperatures from Celsius to Fahrenheit.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<double> celsiusTemperatures = {0.0, 20.0, 37.0, 100.0};\n    std::vector<double> fahrenheitTemperatures;\n\n    for (size_t i = 0; i < celsiusTemperatures.size(); ++i) {\n        double fahrenheit = (celsiusTemperatures[i] * 9.0 / 5.0) + 32.0;\n        fahrenheitTemperatures.push_back(fahrenheit);\n    }\n\n    for (const auto &temp : fahrenheitTemperatures) {\n        std::cout << temp << \" \";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a for loop to determine if a string is an isogram.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n#include <unordered_set>\n\nbool isIsogram(const std::string& str) {\n    std::unordered_set<char> charSet;\n    for (char c : str) {\n        c = tolower(c);\n        if (charSet.find(c) != charSet.end()) {\n            return false;\n        }\n        charSet.insert(c);\n    }\n    return true;\n}\n\nint main() {\n    std::string input = \"example\";\n    if (isIsogram(input)) {\n        std::cout << \"The string is an isogram.\\n\";\n    } else {\n        std::cout << \"The string is not an isogram.\\n\";\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Use a for loop to create a histogram from a list of integers.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<int> numbers = {2, 5, 7, 3, 6}; // Example list of integers\n\n    for (int i = 0; i < numbers.size(); i++) {\n        for (int j = 0; j < numbers[i]; j++) {\n            std::cout << \"*\";\n        }\n        std::cout << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a for loop that prints the indexes of all occurrences of a particular element in a list.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<int> list = {1, 2, 3, 2, 4, 2, 5};\n    int elementToFind = 2;\n\n    for (size_t i = 0; i < list.size(); ++i) {\n        if (list[i] == elementToFind) {\n            std::cout << i << std::endl;\n        }\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a for loop that checks if a given string is a palindrome.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nbool isPalindrome(const std::string& str) {\n    int n = str.length();\n    for (int i = 0; i < n / 2; ++i) {\n        if (str[i] != str[n - i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint main() {\n    std::string input = \"radar\";\n    if (isPalindrome(input)) {\n        std::cout << input << \" is a palindrome.\" << std::endl;\n    } else {\n        std::cout << input << \" is not a palindrome.\" << std::endl;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a for loop to simulate the behavior of a simple finite state machine.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nint main() {\n    enum State { START, STATE1, STATE2, END };\n    State currentState = START;\n    \n    std::string input = \"abab\";\n    bool acceptance = false;\n    \n    for (char symbol : input) {\n        switch (currentState) {\n            case START:\n                if (symbol == 'a') {\n                    currentState = STATE1;\n                }\n                break;\n            case STATE1:\n                if (symbol == 'b') {\n                    currentState = STATE2;\n                }\n                break;\n            case STATE2:\n                if (symbol == 'a') {\n                    currentState = STATE1;\n                } else if (symbol == 'b') {\n                    currentState = END;\n                }\n                break;\n            case END:\n                break;\n        }\n    }\n    \n    if (currentState == END) {\n        acceptance = true;\n    }\n    \n    std::cout << \"The input string is \" << (acceptance ? \"accepted.\" : \"rejected.\") << std::endl;\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Design a for loop that finds the sum of all odd numbers in a list.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<int> numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}; // Example list\n    int sumOfOdds = 0;\n    \n    for (int num : numbers) {\n        if (num % 2 != 0) {\n            sumOfOdds += num;\n        }\n    }\n\n    std::cout << \"Sum of odd numbers: \" << sumOfOdds << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Use a for loop to count how many words start with a vowel in a given sentence.",
    "code": "```cpp\n#include <iostream>\n#include <sstream>\n#include <string>\n\nbool startsWithVowel(const std::string& word) {\n    if (word.empty()) return false;\n    char firstChar = tolower(word[0]);\n    return firstChar == 'a' || firstChar == 'e' || firstChar == 'i' || firstChar == 'o' || firstChar == 'u';\n}\n\nint main() {\n    std::string sentence = \"Example input sentence with some words\";\n    std::stringstream ss(sentence);\n    std::string word;\n    int vowelCount = 0;\n\n    for (; ss >> word;) {\n        if (startsWithVowel(word)) {\n            ++vowelCount;\n        }\n    }\n\n    std::cout << \"Number of words starting with a vowel: \" << vowelCount << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a for loop that sorts a list of strings by their length.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nint main() {\n    std::vector<std::string> strings = {\"apple\", \"banana\", \"kiwi\", \"strawberry\", \"grape\"};\n\n    for (size_t i = 0; i < strings.size(); ++i) {\n        for (size_t j = i + 1; j < strings.size(); ++j) {\n            if (strings[i].length() > strings[j].length()) {\n                std::swap(strings[i], strings[j]);\n            }\n        }\n    }\n\n    for (const auto& str : strings) {\n        std::cout << str << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a for loop that prints the factorial of numbers from 1 to 10.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    for (int i = 1; i <= 10; ++i) {\n        int factorial = 1;\n        for (int j = 1; j <= i; ++j) {\n            factorial *= j;\n        }\n        std::cout << \"Factorial of \" << i << \" is \" << factorial << std::endl;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Create a for loop that replaces all instances of a substring in a string with another substring.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nint main() {\n    std::string str = \"hello world, hello universe\";\n    std::string toReplace = \"hello\";\n    std::string replacement = \"hi\";\n\n    for (size_t pos = 0; (pos = str.find(toReplace, pos)) != std::string::npos; pos += replacement.length()) {\n        str.replace(pos, toReplace.length(), replacement);\n    }\n\n    std::cout << str << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a for loop that squares each element in a list of numbers.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<int> numbers = {1, 2, 3, 4, 5};\n    \n    for (int i = 0; i < numbers.size(); ++i) {\n        numbers[i] = numbers[i] * numbers[i];\n    }\n    \n    for (int num : numbers) {\n        std::cout << num << \" \";\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Use a for loop to reverse the order of elements in an array.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<int> arr = {1, 2, 3, 4, 5};\n    int n = arr.size();\n    \n    for (int i = 0; i < n / 2; ++i) {\n        int temp = arr[i];\n        arr[i] = arr[n - i - 1];\n        arr[n - i - 1] = temp;\n    }\n    \n    for (int num : arr) {\n        std::cout << num << \" \";\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Implement a for loop that tests if two strings are anagrams of each other.",
    "code": "```cpp\n#include <iostream>\n#include <algorithm>\n#include <string>\n\nbool areAnagrams(const std::string& str1, const std::string& str2) {\n    if (str1.length() != str2.length()) return false;\n\n    std::string sortedStr1 = str1;\n    std::string sortedStr2 = str2;\n\n    for (size_t i = 0; i < sortedStr1.length(); ++i) {\n        sortedStr1[i] = std::tolower(sortedStr1[i]);\n        sortedStr2[i] = std::tolower(sortedStr2[i]);\n    }\n\n    std::sort(sortedStr1.begin(), sortedStr1.end());\n    std::sort(sortedStr2.begin(), sortedStr2.end());\n\n    for (size_t i = 0; i < sortedStr1.length(); ++i) {\n        if (sortedStr1[i] != sortedStr2[i]) return false;\n    }\n\n    return true;\n}\n\nint main() {\n    std::string str1 = \"listen\";\n    std::string str2 = \"silent\";\n\n    if (areAnagrams(str1, str2)) {\n        std::cout << \"The strings are anagrams.\" << std::endl;\n    } else {\n        std::cout << \"The strings are not anagrams.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a for loop to find and print all Armstrong numbers between 100 and 999.",
    "code": "```cpp\n#include <iostream>\n#include <cmath>\n\nint main() {\n    for (int num = 100; num <= 999; ++num) {\n        int sum = 0;\n        int temp = num;\n        while (temp > 0) {\n            int digit = temp % 10;\n            sum += std::pow(digit, 3);\n            temp /= 10;\n        }\n        if (sum == num) {\n            std::cout << num << std::endl;\n        }\n    }\n    return 0;\n}\n```"
  }
]