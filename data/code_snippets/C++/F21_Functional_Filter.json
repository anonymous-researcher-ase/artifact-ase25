[
  {
    "task": "Filter out all even numbers from a list of integers.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nstd::vector<int> filterOdd(const std::vector<int>& numbers) {\n    std::vector<int> result;\n    std::copy_if(numbers.begin(), numbers.end(), std::back_inserter(result),\n                 [](int number) { return number % 2 != 0; });\n    return result;\n}\n\nint main() {\n    std::vector<int> numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n    std::vector<int> oddNumbers = filterOdd(numbers);\n    \n    for (int number : oddNumbers) {\n        std::cout << number << \" \";\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Select all words from a list that start with the letter 'a'.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nstd::vector<std::string> filterWordsStartingWithA(const std::vector<std::string>& words) {\n    std::vector<std::string> result;\n    std::copy_if(words.begin(), words.end(), std::back_inserter(result),\n                 [](const std::string& word) { return !word.empty() && word[0] == 'a'; });\n    return result;\n}\n\nint main() {\n    std::vector<std::string> words = {\"apple\", \"banana\", \"avocado\", \"grape\", \"apricot\"};\n    std::vector<std::string> filteredWords = filterWordsStartingWithA(words);\n    \n    for (const auto& word : filteredWords) {\n        std::cout << word << std::endl;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Find all positive numbers in a collection of integers.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nint main() {\n    std::vector<int> numbers = {-10, 15, -20, 30, 5, -1, 0, 22};\n    std::vector<int> positives;\n\n    std::copy_if(numbers.begin(), numbers.end(), std::back_inserter(positives),\n                 [](int x) { return x > 0; });\n\n    for (int num : positives) {\n        std::cout << num << \" \";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Extract all employees who are older than 30 from an employee directory.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <functional>\n\nstruct Employee {\n    std::string name;\n    int age;\n};\n\nint main() {\n    std::vector<Employee> employees = {\n        {\"Alice\", 28},\n        {\"Bob\", 35},\n        {\"Charlie\", 32},\n        {\"David\", 29},\n        {\"Eve\", 45}\n    };\n\n    std::vector<Employee> filteredEmployees;\n    std::copy_if(employees.begin(), employees.end(), std::back_inserter(filteredEmployees), \n                 [](const Employee& e) { return e.age > 30; });\n\n    for (const auto& employee : filteredEmployees) {\n        std::cout << employee.name << \" is \" << employee.age << \" years old.\\n\";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "List all cities with a population greater than one million from a dataset.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nstruct City {\n    std::string name;\n    int population;\n};\n\nint main() {\n    std::vector<City> cities = {\n        {\"New York\", 8400000},\n        {\"Los Angeles\", 3900000},\n        {\"Chicago\", 2700000},\n        {\"Houston\", 2300000},\n        {\"Phoenix\", 1600000},\n        {\"Philadelphia\", 1600000},\n        {\"San Antonio\", 1500000},\n        {\"San Diego\", 1400000},\n        {\"Dallas\", 1300000},\n        {\"San Jose\", 1000000},\n        {\"Austin\", 950000}\n    };\n\n    std::vector<City> largeCities;\n    std::copy_if(cities.begin(), cities.end(), std::back_inserter(largeCities),\n                 [](const City& city) { return city.population > 1000000; });\n\n    for (const auto& city : largeCities) {\n        std::cout << city.name << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Filter out products that are out of stock from a product list.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nstruct Product {\n    std::string name;\n    int stock;\n};\n\nstd::vector<Product> filterInStock(const std::vector<Product>& products) {\n    std::vector<Product> inStockProducts;\n    std::copy_if(products.begin(), products.end(), std::back_inserter(inStockProducts), [](const Product& p) {\n        return p.stock > 0;\n    });\n    return inStockProducts;\n}\n\nint main() {\n    std::vector<Product> products = {\n        {\"Product A\", 10},\n        {\"Product B\", 0},\n        {\"Product C\", 5},\n        {\"Product D\", 0},\n        {\"Product E\", 8}\n    };\n\n    std::vector<Product> inStockProducts = filterInStock(products);\n\n    for (const auto& product : inStockProducts) {\n        std::cout << \"Product Name: \" << product.name << \", Stock: \" << product.stock << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Select all students who have passed with a grade above 70 from a list of student scores.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nstruct Student {\n    std::string name;\n    int score;\n};\n\nstd::vector<Student> filterPassedStudents(const std::vector<Student>& students) {\n    std::vector<Student> passedStudents;\n    std::copy_if(students.begin(), students.end(), std::back_inserter(passedStudents), [](const Student& s) {\n        return s.score > 70;\n    });\n    return passedStudents;\n}\n\nint main() {\n    std::vector<Student> students = {\n        {\"Alice\", 85}, {\"Bob\", 65}, {\"Charlie\", 75}, {\"David\", 70}, {\"Eve\", 90}\n    };\n    \n    std::vector<Student> passedStudents = filterPassedStudents(students);\n    \n    for (const auto& student : passedStudents) {\n        std::cout << student.name << \" passed with score: \" << student.score << std::endl;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Identify all strings in an array that contain the substring 'cat'.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nint main() {\n    std::vector<std::string> strings = {\"concatenate\", \"dog\", \"caterpillar\", \"scatter\", \"cake\"};\n    std::vector<std::string> result;\n\n    std::copy_if(strings.begin(), strings.end(), std::back_inserter(result),\n                 [](const std::string& s) { return s.find(\"cat\") != std::string::npos; });\n\n    for (const auto& str : result) {\n        std::cout << str << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Extract all transactions above $1000 from a financial record.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nstruct Transaction {\n    double amount;\n    std::string description;\n};\n\nstd::vector<Transaction> filterTransactionsAbove1000(const std::vector<Transaction>& transactions) {\n    std::vector<Transaction> result;\n    std::copy_if(transactions.begin(), transactions.end(), std::back_inserter(result),\n                 [](const Transaction& t) { return t.amount > 1000; });\n    return result;\n}\n\nint main() {\n    std::vector<Transaction> transactions = {\n        {1500.0, \"Salary\"},\n        {250.0, \"Groceries\"},\n        {2000.0, \"Freelance work\"},\n        {750.0, \"Rent\"},\n        {1200.0, \"Bonus\"}\n    };\n\n    std::vector<Transaction> filteredTransactions = filterTransactionsAbove1000(transactions);\n\n    for (const auto& t : filteredTransactions) {\n        std::cout << \"Amount: $\" << t.amount << \", Description: \" << t.description << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Filter out all non-prime numbers from a list of numbers.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n\nbool isPrime(int num) {\n    if (num <= 1) return false;\n    if (num == 2) return true;\n    if (num % 2 == 0) return false;\n    for (int i = 3; i <= std::sqrt(num); i += 2) {\n        if (num % i == 0) return false;\n    }\n    return true;\n}\n\nstd::vector<int> filterPrimes(const std::vector<int>& numbers) {\n    std::vector<int> primes;\n    std::copy_if(numbers.begin(), numbers.end(), std::back_inserter(primes), isPrime);\n    return primes;\n}\n\nint main() {\n    std::vector<int> numbers = {10, 15, 3, 7, 9, 2, 11, 1, 16};\n    std::vector<int> primes = filterPrimes(numbers);\n    for (int prime : primes) {\n        std::cout << prime << \" \";\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Select all books with more than 300 pages from a library catalog.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <string>\n\nstruct Book {\n    std::string title;\n    int pages;\n};\n\nstd::vector<Book> filterBooks(const std::vector<Book>& catalog) {\n    std::vector<Book> result;\n    std::copy_if(catalog.begin(), catalog.end(), std::back_inserter(result),\n                 [](const Book& book) { return book.pages > 300; });\n    return result;\n}\n\nint main() {\n    std::vector<Book> catalog = {\n        {\"Book One\", 150},\n        {\"Book Two\", 350},\n        {\"Book Three\", 500},\n        {\"Book Four\", 275}\n    };\n\n    std::vector<Book> filtered = filterBooks(catalog);\n\n    for (const auto& book : filtered) {\n        std::cout << book.title << \" with \" << book.pages << \" pages\\n\";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Identify all users who have logged in within the past week from a user database.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <chrono>\n\n// User structure\nstruct User {\n    std::string name;\n    std::chrono::system_clock::time_point lastLogin;\n};\n\n// Function to filter users based on last login\nstd::vector<User> filterRecentLogins(const std::vector<User>& users) {\n    auto oneWeekAgo = std::chrono::system_clock::now() - std::chrono::hours(24 * 7);\n    std::vector<User> recentUsers;\n\n    std::copy_if(users.begin(), users.end(), std::back_inserter(recentUsers),\n                 [oneWeekAgo](const User& user) {\n                     return user.lastLogin >= oneWeekAgo;\n                 });\n\n    return recentUsers;\n}\n\nint main() {\n    // Example user database\n    std::vector<User> users = {\n        {\"Alice\", std::chrono::system_clock::now() - std::chrono::hours(24 * 3)}, // 3 days ago\n        {\"Bob\", std::chrono::system_clock::now() - std::chrono::hours(24 * 8)},   // 8 days ago\n        {\"Charlie\", std::chrono::system_clock::now() - std::chrono::hours(24 * 5)} // 5 days ago\n    };\n\n    // Get users who have logged in within the past week\n    std::vector<User> recentUsers = filterRecentLogins(users);\n\n    // Output recent users\n    for (const auto& user : recentUsers) {\n        std::cout << user.name << \" has logged in within the past week.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Extract all URLs that contain 'https' from a list of web addresses.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nint main() {\n    std::vector<std::string> webAddresses = {\n        \"http://example.com\",\n        \"https://secure.com\",\n        \"https://anothersecure.com\",\n        \"http://notsecure.com\"\n    };\n\n    std::vector<std::string> httpsUrls;\n    std::copy_if(webAddresses.begin(), webAddresses.end(), std::back_inserter(httpsUrls),\n                 [](const std::string& url) {\n                     return url.find(\"https\") != std::string::npos;\n                 });\n\n    for (const auto& url : httpsUrls) {\n        std::cout << url << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Find all movies released after the year 2000 from a movie database.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nstruct Movie {\n    std::string title;\n    int releaseYear;\n};\n\nint main() {\n    std::vector<Movie> movies = {\n        {\"Movie A\", 1995},\n        {\"Movie B\", 2005},\n        {\"Movie C\", 2010},\n        {\"Movie D\", 1999},\n        {\"Movie E\", 2020}\n    };\n\n    std::vector<Movie> filteredMovies;\n\n    std::copy_if(movies.begin(), movies.end(), std::back_inserter(filteredMovies),\n                 [](const Movie& movie) { return movie.releaseYear > 2000; });\n    \n    for (const auto& movie : filteredMovies) {\n        std::cout << movie.title << \" (\" << movie.releaseYear << \")\\n\";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Select all tasks with a priority level of 'high' from a task management system.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <string>\n\nstruct Task {\n    std::string name;\n    std::string priority;\n};\n\nstd::vector<Task> filterHighPriorityTasks(const std::vector<Task>& tasks) {\n    std::vector<Task> highPriorityTasks;\n    std::copy_if(tasks.begin(), tasks.end(), std::back_inserter(highPriorityTasks),\n                 [](const Task& task) { return task.priority == \"high\"; });\n    return highPriorityTasks;\n}\n\nint main() {\n    std::vector<Task> tasks = {\n        {\"Task 1\", \"low\"},\n        {\"Task 2\", \"high\"},\n        {\"Task 3\", \"medium\"},\n        {\"Task 4\", \"high\"}\n    };\n\n    std::vector<Task> highPriorityTasks = filterHighPriorityTasks(tasks);\n\n    for (const auto& task : highPriorityTasks) {\n        std::cout << \"High priority task: \" << task.name << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Filter out all words longer than five characters from a text document.",
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <sstream>\n#include <vector>\n#include <algorithm>\n\nstd::vector<std::string> filterWords(const std::vector<std::string>& words) {\n    std::vector<std::string> filteredWords;\n    std::copy_if(words.begin(), words.end(), std::back_inserter(filteredWords), [](const std::string& word) {\n        return word.length() <= 5;\n    });\n    return filteredWords;\n}\n\nint main() {\n    std::ifstream inputFile(\"text.txt\");\n    std::ofstream outputFile(\"filtered_text.txt\");\n    std::string line, word;\n    std::vector<std::string> words, filteredWords;\n\n    while (std::getline(inputFile, line)) {\n        std::istringstream lineStream(line);\n        while (lineStream >> word) {\n            words.push_back(word);\n        }\n    }\n    \n    filteredWords = filterWords(words);\n    \n    for (const auto& filteredWord : filteredWords) {\n        outputFile << filteredWord << \" \";\n    }\n\n    inputFile.close();\n    outputFile.close();\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Extract all odd numbers from a sequence of integers.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nstd::vector<int> filterOddNumbers(const std::vector<int>& numbers) {\n    std::vector<int> oddNumbers;\n    std::copy_if(numbers.begin(), numbers.end(), std::back_inserter(oddNumbers),\n                 [](int num) { return num % 2 != 0; });\n    return oddNumbers;\n}\n\nint main() {\n    std::vector<int> numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n    std::vector<int> oddNumbers = filterOddNumbers(numbers);\n\n    for (int num : oddNumbers) {\n        std::cout << num << \" \";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Select all files larger than 10MB from a list of files.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nstruct File {\n    std::string name;\n    double sizeMB; // Size in megabytes\n};\n\nstd::vector<File> filterFilesLargerThan10MB(const std::vector<File>& files) {\n    std::vector<File> largeFiles;\n    std::copy_if(files.begin(), files.end(), std::back_inserter(largeFiles),\n                 [](const File& file) { return file.sizeMB > 10.0; });\n    return largeFiles;\n}\n\nint main() {\n    std::vector<File> files = {\n        {\"file1.txt\", 5.0},\n        {\"file2.txt\", 15.0},\n        {\"file3.txt\", 10.5},\n        {\"file4.txt\", 9.0}\n    };\n\n    std::vector<File> largeFiles = filterFilesLargerThan10MB(files);\n\n    for (const auto& file : largeFiles) {\n        std::cout << file.name << \" (\" << file.sizeMB << \" MB)\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Identify all events occurring on weekends from an event schedule.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <ctime>\n#include <algorithm>\n\nstruct Event {\n    std::string name;\n    std::tm date;\n};\n\nbool isWeekend(const std::tm& date) {\n    int wday = date.tm_wday;\n    return wday == 0 || wday == 6;\n}\n\nstd::vector<Event> filterWeekendEvents(const std::vector<Event>& events) {\n    std::vector<Event> weekendEvents;\n    std::copy_if(events.begin(), events.end(), std::back_inserter(weekendEvents), [](const Event& event) {\n        return isWeekend(event.date);\n    });\n    return weekendEvents;\n}\n\nint main() {\n    std::vector<Event> schedule = {\n        {\"Event1\", {0, 0, 0, 1, 0, 122, 3}}, // 1 Jan 2022, Saturday\n        {\"Event2\", {0, 0, 0, 3, 0, 122, 5}}, // 3 Jan 2022, Monday\n        {\"Event3\", {0, 0, 0, 8, 0, 122, 5}}, // 8 Jan 2022, Saturday\n    };\n\n    std::vector<Event> weekendEvents = filterWeekendEvents(schedule);\n\n    for (const auto& event : weekendEvents) {\n        std::cout << \"Event: \" << event.name << \" on \" << (event.date.tm_mday) << \"/\" << (event.date.tm_mon + 1) << \"/\" << (event.date.tm_year + 1900) << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Find all emails from a specific domain in an email list.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nstd::vector<std::string> filterEmailsByDomain(const std::vector<std::string>& emails, const std::string& domain) {\n    std::vector<std::string> filteredEmails;\n    std::copy_if(emails.begin(), emails.end(), std::back_inserter(filteredEmails),\n                 [&domain](const std::string& email) {\n                     return email.substr(email.find('@') + 1) == domain;\n                 });\n    return filteredEmails;\n}\n\nint main() {\n    std::vector<std::string> emails = {\n        \"user1@example.com\",\n        \"user2@test.com\",\n        \"user3@example.com\",\n        \"user4@example.org\"\n    };\n    std::string domain = \"example.com\";\n    std::vector<std::string> filteredEmails = filterEmailsByDomain(emails, domain);\n    \n    for (const std::string& email : filteredEmails) {\n        std::cout << email << std::endl;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Filter out all people not living in a specific city from a contact list.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nstruct Person {\n    std::string name;\n    std::string city;\n};\n\nstd::vector<Person> filterByCity(const std::vector<Person>& contacts, const std::string& targetCity) {\n    std::vector<Person> filteredContacts;\n    std::copy_if(contacts.begin(), contacts.end(), std::back_inserter(filteredContacts),\n                 [&](const Person& person) { return person.city == targetCity; });\n    return filteredContacts;\n}\n\nint main() {\n    std::vector<Person> contacts = {\n        {\"Alice\", \"New York\"},\n        {\"Bob\", \"Los Angeles\"},\n        {\"Charlie\", \"New York\"},\n        {\"Dave\", \"Chicago\"}\n    };\n\n    std::string targetCity = \"New York\";\n    std::vector<Person> filteredContacts = filterByCity(contacts, targetCity);\n\n    for (const auto& person : filteredContacts) {\n        std::cout << person.name << \" from \" << person.city << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Select all rectangles with an area greater than 50 from a list of rectangles.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nstruct Rectangle {\n    double width;\n    double height;\n\n    double area() const {\n        return width * height;\n    }\n};\n\nstd::vector<Rectangle> filterRectangles(const std::vector<Rectangle>& rectangles) {\n    std::vector<Rectangle> result;\n    std::copy_if(rectangles.begin(), rectangles.end(), std::back_inserter(result), [](const Rectangle& rect) {\n        return rect.area() > 50;\n    });\n    return result;\n}\n\nint main() {\n    std::vector<Rectangle> rectangles = {\n        {5, 11}, {6, 7}, {10, 5}, {3, 4}, {9, 6}\n    };\n\n    std::vector<Rectangle> filteredRectangles = filterRectangles(rectangles);\n\n    for (const auto& rect : filteredRectangles) {\n        std::cout << \"Rectangle: \" << rect.width << \" x \" << rect.height << \" with area \" << rect.area() << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Extract all elements that are not null from a collection.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <iterator>\n\nstd::vector<int*> filterNonNull(const std::vector<int*>& collection) {\n    std::vector<int*> result;\n    std::copy_if(collection.begin(), collection.end(), std::back_inserter(result),\n                 [](int* ptr) { return ptr != nullptr; });\n    return result;\n}\n\nint main() {\n    std::vector<int*> collection = { new int(1), nullptr, new int(2), nullptr, new int(3) };\n    std::vector<int*> filtered = filterNonNull(collection);\n    \n    for (int* ptr : filtered) {\n        if (ptr != nullptr) {\n            std::cout << *ptr << \" \";\n        }\n    }\n    std::cout << std::endl;\n    \n    for (int* ptr : collection) {\n        delete ptr;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Identify all registered voters over the age of 18 from a voter registration list.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nstruct Voter {\n    std::string name;\n    int age;\n};\n\nstd::vector<Voter> filterVoters(const std::vector<Voter>& voters) {\n    std::vector<Voter> result;\n    std::copy_if(voters.begin(), voters.end(), std::back_inserter(result), [](const Voter& v) {\n        return v.age > 18;\n    });\n    return result;\n}\n\nint main() {\n    std::vector<Voter> voters = {\n        {\"Alice\", 20},\n        {\"Bob\", 17},\n        {\"Charlie\", 22},\n        {\"David\", 16}\n    };\n\n    std::vector<Voter> eligibleVoters = filterVoters(voters);\n\n    for (const auto& voter : eligibleVoters) {\n        std::cout << voter.name << \" is eligible to vote.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Select all cars manufactured after 2015 from a vehicle registry.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nstruct Car {\n    std::string model;\n    int year;\n};\n\nint main() {\n    std::vector<Car> vehicleRegistry = {\n        {\"Toyota Camry\", 2014},\n        {\"Ford Mustang\", 2016},\n        {\"Honda Accord\", 2018},\n        {\"Chevrolet Malibu\", 2015}\n    };\n\n    std::vector<Car> filteredCars;\n    std::copy_if(vehicleRegistry.begin(), vehicleRegistry.end(), std::back_inserter(filteredCars),\n                 [](const Car& car) { return car.year > 2015; });\n\n    for (const auto& car : filteredCars) {\n        std::cout << car.model << \" \" << car.year << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Filter out all negative numbers from a dataset of integers.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nstd::vector<int> filterNegatives(const std::vector<int>& data) {\n    std::vector<int> result;\n    std::copy_if(data.begin(), data.end(), std::back_inserter(result), [](int x) { return x >= 0; });\n    return result;\n}\n\nint main() {\n    std::vector<int> data = { -10, 15, -3, 42, 0, -8, 7 };\n    std::vector<int> filteredData = filterNegatives(data);\n\n    for (int num : filteredData) {\n        std::cout << num << \" \";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Extract all characters from a string that are uppercase.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n#include <algorithm>\n\nint main() {\n    std::string input = \"YourInputStringHere\";\n    std::string result;\n    \n    std::copy_if(input.begin(), input.end(), std::back_inserter(result), [](char c) {\n        return std::isupper(c);\n    });\n\n    std::cout << result << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Identify all projects with a deadline within the next month from a project database.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <chrono>\n#include <ctime>\n#include <algorithm>\n\nstruct Project {\n    std::string name;\n    std::chrono::system_clock::time_point deadline;\n};\n\nstd::vector<Project> filterProjectsByDeadline(const std::vector<Project>& projects) {\n    std::vector<Project> filteredProjects;\n    auto now = std::chrono::system_clock::now();\n    auto nextMonth = now + std::chrono::hours(24 * 30);\n\n    std::copy_if(projects.begin(), projects.end(), std::back_inserter(filteredProjects),\n        [now, nextMonth](const Project& project) {\n            return project.deadline > now && project.deadline <= nextMonth;\n        });\n\n    return filteredProjects;\n}\n\nint main() {\n    std::vector<Project> projects = {\n        { \"Project A\", std::chrono::system_clock::now() + std::chrono::hours(24 * 15) },\n        { \"Project B\", std::chrono::system_clock::now() + std::chrono::hours(24 * 40) },\n        { \"Project C\", std::chrono::system_clock::now() + std::chrono::hours(24 * 10) }\n    };\n\n    auto filteredProjects = filterProjectsByDeadline(projects);\n\n    for (const auto& project : filteredProjects) {\n        std::time_t deadline = std::chrono::system_clock::to_time_t(project.deadline);\n        std::cout << \"Project: \" << project.name << \", Deadline: \" << std::ctime(&deadline);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Select all athletes with a score higher than 90 from a competition result list.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nstruct Athlete {\n    std::string name;\n    int score;\n};\n\nstd::vector<Athlete> filterAthletes(const std::vector<Athlete>& athletes) {\n    std::vector<Athlete> filteredAthletes;\n    std::copy_if(athletes.begin(), athletes.end(), std::back_inserter(filteredAthletes),\n                 [](const Athlete& athlete) { return athlete.score > 90; });\n    return filteredAthletes;\n}\n\nint main() {\n    std::vector<Athlete> athletes = {\n        {\"John\", 85},\n        {\"Alice\", 92},\n        {\"Bob\", 88},\n        {\"Eve\", 95}\n    };\n    \n    std::vector<Athlete> topAthletes = filterAthletes(athletes);\n    \n    for (const auto& athlete : topAthletes) {\n        std::cout << athlete.name << \" with score \" << athlete.score << std::endl;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Filter out all strings that do not contain vowels from a list of words.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cctype>\n\nbool containsVowel(const std::string& word) {\n    for (char ch : word) {\n        char lower = std::tolower(ch);\n        if (lower == 'a' || lower == 'e' || lower == 'i' || lower == 'o' || lower == 'u') {\n            return true;\n        }\n    }\n    return false;\n}\n\nstd::vector<std::string> filterWordsWithVowels(const std::vector<std::string>& words) {\n    std::vector<std::string> result;\n    std::copy_if(words.begin(), words.end(), std::back_inserter(result), containsVowel);\n    return result;\n}\n\nint main() {\n    std::vector<std::string> words = {\"sky\", \"apple\", \"try\", \"orange\", \"fly\", \"umbrella\"};\n    std::vector<std::string> filteredWords = filterWordsWithVowels(words);\n\n    for (const std::string& word : filteredWords) {\n        std::cout << word << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Extract all dates that fall on a weekday from a calendar.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <ctime>\n#include <algorithm>\n\nint main() {\n    std::vector<std::tm> calendar = {\n        {0, 0, 0, 15, 9, 123}, // Example: 15 Oct 2023\n        {0, 0, 0, 16, 9, 123}, // Example: 16 Oct 2023\n        {0, 0, 0, 17, 9, 123}, // Example: 17 Oct 2023\n        // Add more dates...\n    };\n\n    std::vector<std::tm> weekdays;\n    \n    std::copy_if(calendar.begin(), calendar.end(), std::back_inserter(weekdays), [](const std::tm& date) {\n        std::tm copy = date;\n        std::mktime(&copy); // Normalize the date\n        return copy.tm_wday != 0 && copy.tm_wday != 6; // Exclude Sunday (0) and Saturday (6)\n    });\n\n    for (const auto& date : weekdays) {\n        std::cout << (date.tm_year + 1900) << \"-\" \n                  << (date.tm_mon + 1) << \"-\" \n                  << date.tm_mday << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Find all software versions that are stable releases from a list of software versions.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nstd::vector<std::string> filterStableReleases(const std::vector<std::string>& versions) {\n    std::vector<std::string> stableReleases;\n    std::copy_if(versions.begin(), versions.end(), std::back_inserter(stableReleases),\n                 [](const std::string& version) {\n                     return std::none_of(version.begin(), version.end(), ::isalpha);\n                 });\n    return stableReleases;\n}\n\nint main() {\n    std::vector<std::string> versions = {\"1.0.0\", \"1.0.0-alpha\", \"2.0.0\", \"2.0.0-beta\", \"3.0.0\"};\n    std::vector<std::string> stableVersions = filterStableReleases(versions);\n\n    for (const auto& version : stableVersions) {\n        std::cout << version << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Select all temperatures above freezing from a weather report.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nint main() {\n    std::vector<int> temperatures = {30, 35, 28, 40, 32, 25, 37};\n    std::vector<int> aboveFreezing;\n\n    std::copy_if(temperatures.begin(), temperatures.end(), std::back_inserter(aboveFreezing),\n                 [](int temp) { return temp > 32; });\n\n    for (int temp : aboveFreezing) {\n        std::cout << temp << \" \";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Identify all countries with a GDP per capita above $40,000 from a country dataset.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nstruct Country {\n    std::string name;\n    double gdp_per_capita;\n};\n\nint main() {\n    std::vector<Country> countries = {\n        {\"CountryA\", 35000},\n        {\"CountryB\", 45000},\n        {\"CountryC\", 42000},\n        {\"CountryD\", 39000},\n        {\"CountryE\", 50000}\n    };\n\n    std::vector<Country> result;\n\n    std::copy_if(countries.begin(), countries.end(), std::back_inserter(result), [](const Country& country) {\n        return country.gdp_per_capita > 40000;\n    });\n\n    for (const auto& country : result) {\n        std::cout << country.name << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Filter out all names shorter than four letters from a roster.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nstd::vector<std::string> filterNames(const std::vector<std::string>& roster) {\n    std::vector<std::string> filteredRoster;\n    std::copy_if(roster.begin(), roster.end(), std::back_inserter(filteredRoster),\n                 [](const std::string& name) { return name.length() >= 4; });\n    return filteredRoster;\n}\n\nint main() {\n    std::vector<std::string> roster = {\"Joe\", \"Anna\", \"Tom\", \"Chris\", \"Liz\"};\n    std::vector<std::string> filteredRoster = filterNames(roster);\n\n    for (const auto& name : filteredRoster) {\n        std::cout << name << \" \";\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Extract all numbers divisible by five from a sequence.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <iterator>\n\nstd::vector<int> filterDivisibleByFive(const std::vector<int>& numbers) {\n    std::vector<int> result;\n    std::copy_if(numbers.begin(), numbers.end(), std::back_inserter(result),\n                 [](int number) { return number % 5 == 0; });\n    return result;\n}\n\nint main() {\n    std::vector<int> sequence = {10, 23, 35, 47, 50, 62, 75};\n    std::vector<int> filteredNumbers = filterDivisibleByFive(sequence);\n    \n    for (int number : filteredNumbers) {\n        std::cout << number << \" \";\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Select all movies with a rating above 4 stars from a film review site.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nstruct Movie {\n    std::string title;\n    double rating;\n};\n\nstd::vector<Movie> filterMovies(const std::vector<Movie>& movies) {\n    std::vector<Movie> filteredMovies;\n    std::copy_if(movies.begin(), movies.end(), std::back_inserter(filteredMovies),\n                 [](const Movie& movie) { return movie.rating > 4.0; });\n    return filteredMovies;\n}\n\nint main() {\n    std::vector<Movie> movies = {\n        {\"Movie 1\", 3.5},\n        {\"Movie 2\", 4.5},\n        {\"Movie 3\", 5.0},\n        {\"Movie 4\", 4.0}\n    };\n\n    std::vector<Movie> highRatedMovies = filterMovies(movies);\n\n    for (const auto& movie : highRatedMovies) {\n        std::cout << \"Title: \" << movie.title << \", Rating: \" << movie.rating << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Find all jobs with a salary above $50,000 from a job listing.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nstruct Job {\n    std::string title;\n    double salary;\n};\n\nstd::vector<Job> filterJobsBySalary(const std::vector<Job>& jobs, double minSalary) {\n    std::vector<Job> filteredJobs;\n    std::copy_if(jobs.begin(), jobs.end(), std::back_inserter(filteredJobs),\n                 [minSalary](const Job& job) { return job.salary > minSalary; });\n    return filteredJobs;\n}\n\nint main() {\n    std::vector<Job> jobListings = {\n        {\"Software Engineer\", 90000.0},\n        {\"Data Scientist\", 120000.0},\n        {\"Teacher\", 45000.0},\n        {\"Nurse\", 55000.0}\n    };\n\n    double salaryThreshold = 50000.0;\n    std::vector<Job> highSalaryJobs = filterJobsBySalary(jobListings, salaryThreshold);\n\n    for (const auto& job : highSalaryJobs) {\n        std::cout << \"Job Title: \" << job.title << \", Salary: \" << job.salary << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Filter out all entries without an email address from a contact form submission list.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nstruct Contact {\n    std::string name;\n    std::string email;\n};\n\nstd::vector<Contact> filterContactsWithEmail(const std::vector<Contact>& contacts) {\n    std::vector<Contact> filteredContacts;\n    std::copy_if(contacts.begin(), contacts.end(), std::back_inserter(filteredContacts),\n                 [](const Contact& contact) { return !contact.email.empty(); });\n    return filteredContacts;\n}\n\nint main() {\n    std::vector<Contact> contacts = {\n        {\"Alice Smith\", \"alice@example.com\"},\n        {\"Bob Jones\", \"\"},\n        {\"Charlie Brown\", \"charlie@example.com\"},\n        {\"Dana White\", \"\"}\n    };\n    \n    std::vector<Contact> filtered = filterContactsWithEmail(contacts);\n    \n    for (const auto& contact : filtered) {\n        std::cout << contact.name << \": \" << contact.email << '\\n';\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Identify all animals weighing more than 50kg from a zoo inventory.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nstruct Animal {\n    std::string name;\n    double weight;\n};\n\nint main() {\n    std::vector<Animal> zoo = {\n        {\"Elephant\", 5000.0},\n        {\"Giraffe\", 800.0},\n        {\"Lion\", 190.0},\n        {\"Monkey\", 35.0},\n        {\"Kangaroo\", 85.0}\n    };\n\n    std::vector<Animal> heavyAnimals;\n    std::copy_if(zoo.begin(), zoo.end(), std::back_inserter(heavyAnimals), [](const Animal& animal) {\n        return animal.weight > 50.0;\n    });\n\n    for (const auto& animal : heavyAnimals) {\n        std::cout << animal.name << \" weighs \" << animal.weight << \" kg.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Select all songs with a duration longer than three minutes from a playlist.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nstruct Song {\n    std::string title;\n    int duration; // Duration in seconds\n};\n\nstd::vector<Song> filterSongs(const std::vector<Song>& playlist) {\n    std::vector<Song> filtered;\n    std::copy_if(playlist.begin(), playlist.end(), std::back_inserter(filtered), [](const Song& song) {\n        return song.duration > 180;\n    });\n    return filtered;\n}\n\nint main() {\n    std::vector<Song> playlist = {\n        {\"Song One\", 200},\n        {\"Song Two\", 180},\n        {\"Song Three\", 240},\n        {\"Song Four\", 150}\n    };\n    \n    std::vector<Song> longSongs = filterSongs(playlist);\n    \n    for (const auto& song : longSongs) {\n        std::cout << song.title << \" (\" << song.duration << \"s)\" << std::endl;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Extract all accounts with a balance below zero from a bank statement.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nstruct Account {\n    std::string name;\n    double balance;\n};\n\nstd::vector<Account> filterNegativeBalances(const std::vector<Account>& accounts) {\n    std::vector<Account> negativeBalanceAccounts;\n    std::copy_if(accounts.begin(), accounts.end(), std::back_inserter(negativeBalanceAccounts),\n                 [](const Account& account) { return account.balance < 0; });\n    return negativeBalanceAccounts;\n}\n\nint main() {\n    std::vector<Account> bankStatement = {\n        {\"Alice\", 150.0},\n        {\"Bob\", -50.0},\n        {\"Charlie\", 0.0},\n        {\"David\", -200.0}\n    };\n\n    std::vector<Account> negativeAccounts = filterNegativeBalances(bankStatement);\n\n    for (const auto& account : negativeAccounts) {\n        std::cout << \"Account: \" << account.name << \", Balance: \" << account.balance << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Filter out all non-alphabetic characters from a string of text.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n#include <algorithm>\n\nint main() {\n    std::string text = \"Your input string here!\";\n    std::string filtered;\n    std::copy_if(text.begin(), text.end(), std::back_inserter(filtered), [](char c) {\n        return std::isalpha(c);\n    });\n    std::cout << filtered << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Select all participants who scored above average in a competition.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <numeric>\n#include <algorithm>\n\nstd::vector<int> filterAboveAverage(const std::vector<int>& scores) {\n    double average = std::accumulate(scores.begin(), scores.end(), 0.0) / scores.size();\n    std::vector<int> aboveAverageScores;\n\n    std::copy_if(scores.begin(), scores.end(), std::back_inserter(aboveAverageScores),\n                 [average](int score) { return score > average; });\n\n    return aboveAverageScores;\n}\n\nint main() {\n    std::vector<int> scores = {85, 90, 78, 88, 76, 95, 89};\n    std::vector<int> result = filterAboveAverage(scores);\n\n    for (int score : result) {\n        std::cout << score << \" \";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Find all houses priced under $300,000 from a real estate database.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nstruct House {\n    std::string address;\n    double price;\n};\n\nstd::vector<House> filterAffordableHouses(const std::vector<House>& houses, double maxPrice) {\n    std::vector<House> affordableHouses;\n    std::copy_if(houses.begin(), houses.end(), std::back_inserter(affordableHouses),\n                 [maxPrice](const House& house) { return house.price < maxPrice; });\n    return affordableHouses;\n}\n\nint main() {\n    std::vector<House> houses = {\n        {\"123 Maple St\", 250000},\n        {\"456 Oak St\", 305000},\n        {\"789 Pine St\", 275000},\n        {\"101 Elm St\", 325000}\n    };\n\n    double maxPrice = 300000;\n    std::vector<House> affordableHouses = filterAffordableHouses(houses, maxPrice);\n\n    for (const auto& house : affordableHouses) {\n        std::cout << house.address << \" - $\" << house.price << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Identify all plants that bloom in spring from a botanical catalog.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nstruct Plant {\n    std::string name;\n    std::string bloomingSeason;\n};\n\nstd::vector<Plant> filterPlantsByBloomingSeason(const std::vector<Plant>& catalog, const std::string& season) {\n    std::vector<Plant> filteredPlants;\n    std::copy_if(catalog.begin(), catalog.end(), std::back_inserter(filteredPlants),\n                 [&season](const Plant& plant) { return plant.bloomingSeason == season; });\n    return filteredPlants;\n}\n\nint main() {\n    std::vector<Plant> catalog = {\n        {\"Rose\", \"spring\"},\n        {\"Tulip\", \"spring\"},\n        {\"Sunflower\", \"summer\"},\n        {\"Daffodil\", \"spring\"},\n        {\"Chrysanthemum\", \"fall\"}\n    };\n\n    std::vector<Plant> springBloomingPlants = filterPlantsByBloomingSeason(catalog, \"spring\");\n\n    for (const auto& plant : springBloomingPlants) {\n        std::cout << plant.name << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Extract all passwords that are longer than eight characters from a user database.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nstd::vector<std::string> filterPasswords(const std::vector<std::string>& passwords) {\n    std::vector<std::string> filtered;\n    std::copy_if(passwords.begin(), passwords.end(), std::back_inserter(filtered),\n                 [](const std::string& password) { return password.length() > 8; });\n    return filtered;\n}\n\nint main() {\n    std::vector<std::string> userDatabase = {\"password123\", \"abc\", \"longpassword\", \"secret\", \"verylongpassword\"};\n    std::vector<std::string> longPasswords = filterPasswords(userDatabase);\n\n    for (const auto& password : longPasswords) {\n        std::cout << password << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Filter out all projects that are not yet started from a project management tool.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nstruct Project {\n    std::string name;\n    bool started;\n};\n\nstd::vector<Project> filterStartedProjects(const std::vector<Project>& projects) {\n    std::vector<Project> startedProjects;\n    std::copy_if(projects.begin(), projects.end(), std::back_inserter(startedProjects),\n                 [](const Project& project) { return project.started; });\n    return startedProjects;\n}\n\nint main() {\n    std::vector<Project> projects = {\n        {\"Project A\", false},\n        {\"Project B\", true},\n        {\"Project C\", false},\n        {\"Project D\", true}\n    };\n\n    std::vector<Project> startedProjects = filterStartedProjects(projects);\n\n    for (const auto& project : startedProjects) {\n        std::cout << project.name << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Select all days with temperatures exceeding 25\u00b0C from a climate report.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nstruct Day {\n    std::string name;\n    double temperature;\n};\n\nint main() {\n    std::vector<Day> climateReport = {\n        {\"Monday\", 22.5},\n        {\"Tuesday\", 27.3},\n        {\"Wednesday\", 24.1},\n        {\"Thursday\", 26.6},\n        {\"Friday\", 30.2},\n        {\"Saturday\", 21.4},\n        {\"Sunday\", 28.0}\n    };\n\n    std::vector<Day> hotDays;\n    std::copy_if(climateReport.begin(), climateReport.end(), std::back_inserter(hotDays),\n                 [](const Day& d) { return d.temperature > 25.0; });\n\n    for (const auto& day : hotDays) {\n        std::cout << day.name << \": \" << day.temperature << \"\u00b0C\\n\";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Find all recipes that are vegetarian from a cookbook.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nstruct Recipe {\n    std::string name;\n    bool isVegetarian;\n};\n\nstd::vector<Recipe> filterVegetarianRecipes(const std::vector<Recipe>& cookbook) {\n    std::vector<Recipe> vegetarianRecipes;\n    std::copy_if(cookbook.begin(), cookbook.end(), std::back_inserter(vegetarianRecipes),\n                 [](const Recipe& recipe) { return recipe.isVegetarian; });\n    return vegetarianRecipes;\n}\n\nint main() {\n    std::vector<Recipe> cookbook = {\n        {\"Spaghetti\", false},\n        {\"Vegetable Stir Fry\", true},\n        {\"Chicken Curry\", false},\n        {\"Caprese Salad\", true}\n    };\n\n    std::vector<Recipe> vegetarianRecipes = filterVegetarianRecipes(cookbook);\n\n    for (const auto& recipe : vegetarianRecipes) {\n        std::cout << recipe.name << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Identify all articles that mention a specific keyword from a news feed.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nstd::vector<std::string> filterArticlesByKeyword(const std::vector<std::string>& articles, const std::string& keyword) {\n    std::vector<std::string> filteredArticles;\n    std::copy_if(articles.begin(), articles.end(), std::back_inserter(filteredArticles),\n                 [&keyword](const std::string& article) {\n                     return article.find(keyword) != std::string::npos;\n                 });\n    return filteredArticles;\n}\n\nint main() {\n    std::vector<std::string> newsFeed = {\n        \"Tech companies are booming in 2023.\",\n        \"The economy is facing challenges due to the pandemic.\",\n        \"Innovation in AI is transforming industries.\",\n        \"The pandemic has changed the way we work and live.\",\n        \"AI is the future of technology.\"\n    };\n    \n    std::string keyword = \"AI\";\n    std::vector<std::string> filteredNews = filterArticlesByKeyword(newsFeed, keyword);\n    \n    for (const auto& article : filteredNews) {\n        std::cout << article << std::endl;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Extract all files with the '.jpg' extension from a directory.",
    "code": "```cpp\n#include <iostream>\n#include <filesystem>\n#include <vector>\n\nstd::vector<std::filesystem::path> filterJpgFiles(const std::filesystem::path& directory) {\n    std::vector<std::filesystem::path> jpgFiles;\n    if (std::filesystem::exists(directory) && std::filesystem::is_directory(directory)) {\n        for (const auto& entry : std::filesystem::directory_iterator(directory)) {\n            if (entry.is_regular_file() && entry.path().extension() == \".jpg\") {\n                jpgFiles.push_back(entry.path());\n            }\n        }\n    }\n    return jpgFiles;\n}\n\nint main() {\n    std::filesystem::path directory = \"/path/to/directory\";\n    std::vector<std::filesystem::path> jpgFiles = filterJpgFiles(directory);\n    for (const auto& file : jpgFiles) {\n        std::cout << file << std::endl;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Filter out all transactions that are not categorized from a financial statement.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nstruct Transaction {\n    std::string category;\n    double amount;\n};\n\nstd::vector<Transaction> filterUncategorized(const std::vector<Transaction>& transactions) {\n    std::vector<Transaction> result;\n    std::copy_if(transactions.begin(), transactions.end(), std::back_inserter(result),\n                 [](const Transaction& t) { return !t.category.empty(); });\n    return result;\n}\n\nint main() {\n    std::vector<Transaction> transactions = {\n        {\"Groceries\", 150.0},\n        {\"\", 200.0},\n        {\"Utilities\", 100.0},\n        {\"\", 50.0}\n    };\n\n    std::vector<Transaction> filteredTransactions = filterUncategorized(transactions);\n\n    for (const auto& t : filteredTransactions) {\n        std::cout << \"Category: \" << t.category << \", Amount: \" << t.amount << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Select all paintings created before 1900 from an art gallery collection.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nstruct Painting {\n    std::string title;\n    int year;\n};\n\nstd::vector<Painting> filterPaintings(const std::vector<Painting>& paintings) {\n    std::vector<Painting> filtered;\n    std::copy_if(paintings.begin(), paintings.end(), std::back_inserter(filtered), [](const Painting& p) {\n        return p.year < 1900;\n    });\n    return filtered;\n}\n\nint main() {\n    std::vector<Painting> gallery = {\n        {\"Mona Lisa\", 1503},\n        {\"The Starry Night\", 1889},\n        {\"The Persistence of Memory\", 1931},\n        {\"Girl with a Pearl Earring\", 1665}\n    };\n\n    std::vector<Painting> oldPaintings = filterPaintings(gallery);\n\n    for(const auto& painting : oldPaintings) {\n        std::cout << painting.title << \" (\" << painting.year << \")\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Find all students with perfect attendance from a school record.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nstruct Student {\n    std::string name;\n    int attendance;\n};\n\nstd::vector<Student> filterPerfectAttendance(const std::vector<Student>& students) {\n    std::vector<Student> result;\n    std::copy_if(students.begin(), students.end(), std::back_inserter(result),\n                 [](const Student& s) { return s.attendance == 100; });\n    return result;\n}\n\nint main() {\n    std::vector<Student> schoolRecords = {\n        {\"Alice\", 100},\n        {\"Bob\", 90},\n        {\"Charlie\", 100},\n        {\"David\", 85}\n    };\n\n    std::vector<Student> perfectAttendanceStudents = filterPerfectAttendance(schoolRecords);\n\n    for (const auto& student : perfectAttendanceStudents) {\n        std::cout << student.name << \" has perfect attendance.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Identify all messages sent by a specific user from a chat application.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\n// Structure to represent a message\nstruct Message {\n    std::string user;\n    std::string text;\n};\n\n// Function to filter messages by a specific user\nstd::vector<Message> filterMessagesByUser(const std::vector<Message>& messages, const std::string& user) {\n    std::vector<Message> filteredMessages;\n    std::copy_if(messages.begin(), messages.end(), std::back_inserter(filteredMessages),\n                 [&user](const Message& message) { return message.user == user; });\n    return filteredMessages;\n}\n\nint main() {\n    // Sample messages\n    std::vector<Message> messages = {\n        {\"alice\", \"Hello!\"},\n        {\"bob\", \"Hi!\"},\n        {\"alice\", \"How are you?\"},\n        {\"charlie\", \"Good morning!\"},\n        {\"bob\", \"I'm fine, thanks!\"}\n    };\n\n    // User to filter messages by\n    std::string user = \"alice\";\n\n    // Get filtered messages\n    std::vector<Message> filteredMessages = filterMessagesByUser(messages, user);\n\n    // Output filtered messages\n    for (const auto& message : filteredMessages) {\n        std::cout << message.user << \": \" << message.text << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Extract all elements greater than 100 from an array of numbers.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nint main() {\n    std::vector<int> numbers = {50, 150, 200, 75, 120, 30, 180};\n    std::vector<int> filtered;\n\n    std::copy_if(numbers.begin(), numbers.end(), std::back_inserter(filtered), [](int n) { return n > 100; });\n\n    for (int num : filtered) {\n        std::cout << num << \" \";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Filter out all words that do not end in 'ed' from a paragraph.",
    "code": "```cpp\n#include <iostream>\n#include <sstream>\n#include <vector>\n#include <algorithm>\n\nstd::vector<std::string> filterWordsEndingWithEd(const std::string &paragraph) {\n    std::istringstream stream(paragraph);\n    std::vector<std::string> words;\n    std::string word;\n    \n    while (stream >> word) {\n        if (word.size() >= 2 && word.substr(word.size() - 2) == \"ed\") {\n            words.push_back(word);\n        }\n    }\n    \n    return words;\n}\n\nint main() {\n    std::string paragraph = \"The cat jumped and landed. It was excited and thrilled.\";\n    std::vector<std::string> filteredWords = filterWordsEndingWithEd(paragraph);\n    \n    for (const auto &word : filteredWords) {\n        std::cout << word << \" \";\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Select all flights departing before noon from a flight schedule.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nstruct Flight {\n    std::string destination;\n    int departureHour;\n};\n\nstd::vector<Flight> filterFlightsBeforeNoon(const std::vector<Flight>& flights) {\n    std::vector<Flight> result;\n    std::copy_if(flights.begin(), flights.end(), std::back_inserter(result),\n                 [](const Flight& flight) { return flight.departureHour < 12; });\n    return result;\n}\n\nint main() {\n    std::vector<Flight> flights = {\n        {\"New York\", 9},\n        {\"Los Angeles\", 14},\n        {\"Chicago\", 11},\n        {\"Houston\", 13},\n        {\"Phoenix\", 8}\n    };\n\n    std::vector<Flight> morningFlights = filterFlightsBeforeNoon(flights);\n\n    for (const auto& flight : morningFlights) {\n        std::cout << \"Flight to \" << flight.destination << \" at \" << flight.departureHour << \":00\\n\";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Find all products priced above $20 from an online store inventory.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nstruct Product {\n    std::string name;\n    double price;\n};\n\nint main() {\n    std::vector<Product> inventory = {\n        {\"Product1\", 15.99},\n        {\"Product2\", 21.50},\n        {\"Product3\", 45.00},\n        {\"Product4\", 19.99},\n        {\"Product5\", 22.75}\n    };\n\n    std::vector<Product> filteredProducts;\n    std::copy_if(inventory.begin(), inventory.end(), std::back_inserter(filteredProducts),\n                 [](const Product& p) { return p.price > 20.0; });\n\n    for (const auto& product : filteredProducts) {\n        std::cout << \"Product: \" << product.name << \", Price: $\" << product.price << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Identify all sessions longer than one hour from a webinar series.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nstruct Session {\n    std::string title;\n    int duration_minutes;\n};\n\nstd::vector<Session> filterLongSessions(const std::vector<Session>& sessions) {\n    std::vector<Session> longSessions;\n    std::copy_if(sessions.begin(), sessions.end(), std::back_inserter(longSessions),\n                 [](const Session& s) { return s.duration_minutes > 60; });\n    return longSessions;\n}\n\nint main() {\n    std::vector<Session> sessions = {\n        {\"Session 1\", 45},\n        {\"Session 2\", 120},\n        {\"Session 3\", 90},\n        {\"Session 4\", 30}\n    };\n\n    std::vector<Session> longSessions = filterLongSessions(sessions);\n\n    for (const auto& session : longSessions) {\n        std::cout << session.title << \": \" << session.duration_minutes << \" minutes\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Extract all images with a resolution higher than 1080p from a photo library.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n\nstruct Image {\n    std::string name;\n    int width;\n    int height;\n};\n\nstd::vector<Image> filterHighResolutionImages(const std::vector<Image> &library) {\n    std::vector<Image> highResImages;\n    for (const auto &img : library) {\n        if (img.width > 1920 || img.height > 1080) {\n            highResImages.push_back(img);\n        }\n    }\n    return highResImages;\n}\n\nint main() {\n    std::vector<Image> photoLibrary = {\n        {\"image1.jpg\", 1920, 1080},\n        {\"image2.jpg\", 2560, 1440},\n        {\"image3.jpg\", 1280, 720},\n        {\"image4.jpg\", 3840, 2160}\n    };\n\n    std::vector<Image> highResImages = filterHighResolutionImages(photoLibrary);\n\n    for (const auto &img : highResImages) {\n        std::cout << img.name << \" (\" << img.width << \"x\" << img.height << \")\\n\";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Filter out all responses that are not 'yes' or 'no' from a survey result.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nstd::vector<std::string> filterResponses(const std::vector<std::string>& responses) {\n    std::vector<std::string> filtered;\n    std::copy_if(responses.begin(), responses.end(), std::back_inserter(filtered),\n                 [](const std::string& response) {\n                     return response == \"yes\" || response == \"no\";\n                 });\n    return filtered;\n}\n\nint main() {\n    std::vector<std::string> surveyResults = {\"yes\", \"maybe\", \"no\", \"yes\", \"unknown\", \"no\"};\n    std::vector<std::string> filteredResults = filterResponses(surveyResults);\n\n    for (const auto& response : filteredResults) {\n        std::cout << response << \" \";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Select all tweets with more than 100 likes from a Twitter feed.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nstruct Tweet {\n    std::string text;\n    int likes;\n};\n\nstd::vector<Tweet> filterTweetsWithMoreThan100Likes(const std::vector<Tweet>& tweets) {\n    std::vector<Tweet> filteredTweets;\n    std::copy_if(tweets.begin(), tweets.end(), std::back_inserter(filteredTweets),\n                 [](const Tweet& tweet) { return tweet.likes > 100; });\n    return filteredTweets;\n}\n\nint main() {\n    std::vector<Tweet> twitterFeed = {\n        {\"Hello World!\", 50},\n        {\"Amazing news!\", 150},\n        {\"Check this out!\", 200},\n        {\"Just a random thought.\", 90}\n    };\n    std::vector<Tweet> popularTweets = filterTweetsWithMoreThan100Likes(twitterFeed);\n    for (const auto& tweet : popularTweets) {\n        std::cout << tweet.text << \" (\" << tweet.likes << \" likes)\" << std::endl;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Find all links that are broken from a webpage.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <regex>\n#include <curl/curl.h>\n\n// Callback function for handling data received by libcurl\nsize_t WriteCallback(void* contents, size_t size, size_t nmemb, std::string* s) {\n    size_t totalSize = size * nmemb;\n    s->append((char*)contents, totalSize);\n    return totalSize;\n}\n\n// Function to fetch webpage content\nstd::string fetchWebpage(const std::string& url) {\n    CURL* curl;\n    CURLcode res;\n    std::string webpageContent;\n\n    curl_global_init(CURL_GLOBAL_DEFAULT);\n    curl = curl_easy_init();\n    if(curl) {\n        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, WriteCallback);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &webpageContent);\n        res = curl_easy_perform(curl);\n        curl_easy_cleanup(curl);\n    }\n    curl_global_cleanup();\n    return webpageContent;\n}\n\n// Function to extract all links from webpage content\nstd::vector<std::string> extractLinks(const std::string& webpageContent) {\n    std::vector<std::string> links;\n    std::regex urlRegex(R\"((http|https)://[^\\s\\\"\\'<>]+)\");\n    std::sregex_iterator it(webpageContent.begin(), webpageContent.end(), urlRegex);\n    std::sregex_iterator end;\n    while (it != end) {\n        links.push_back(it->str());\n        ++it;\n    }\n    return links;\n}\n\n// Function to check if a link is broken\nbool isLinkBroken(const std::string& url) {\n    CURL* curl;\n    CURLcode res;\n    long response_code = 0;\n\n    curl = curl_easy_init();\n    if(curl) {\n        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n        curl_easy_setopt(curl, CURLOPT_NOBODY, 1L);\n        curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n        res = curl_easy_perform(curl);\n        if(res == CURLE_OK) {\n            curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &response_code);\n        }\n        curl_easy_cleanup(curl);\n    }\n    return response_code >= 400;\n}\n\n// Function to filter broken links using functional-style\nstd::vector<std::string> filterBrokenLinks(const std::vector<std::string>& links) {\n    std::vector<std::string> brokenLinks;\n    std::copy_if(links.begin(), links.end(), std::back_inserter(brokenLinks), isLinkBroken);\n    return brokenLinks;\n}\n\nint main() {\n    std::string url = \"http://example.com\";\n    std::string content = fetchWebpage(url);\n    std::vector<std::string> links = extractLinks(content);\n    std::vector<std::string> brokenLinks = filterBrokenLinks(links);\n\n    std::cout << \"Broken links found:\\n\";\n    for(const std::string& link : brokenLinks) {\n        std::cout << link << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Identify all machines that are currently offline from a network monitoring tool.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nstruct Machine {\n    std::string name;\n    bool isOnline;\n};\n\nstd::vector<Machine> filterOfflineMachines(const std::vector<Machine>& machines) {\n    std::vector<Machine> offlineMachines;\n    std::copy_if(machines.begin(), machines.end(), std::back_inserter(offlineMachines),\n        [](const Machine& machine) {\n            return !machine.isOnline;\n        });\n    return offlineMachines;\n}\n\nint main() {\n    std::vector<Machine> machines = {\n        {\"MachineA\", true},\n        {\"MachineB\", false},\n        {\"MachineC\", true},\n        {\"MachineD\", false}\n    };\n\n    std::vector<Machine> offlineMachines = filterOfflineMachines(machines);\n\n    for (const auto& machine : offlineMachines) {\n        std::cout << \"Offline Machine: \" << machine.name << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Extract all invoices with a due date in the current month from an accounting system.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <ctime>\n\nstruct Invoice {\n    int id;\n    std::tm dueDate;\n};\n\nstd::vector<Invoice> filterInvoicesByCurrentMonth(const std::vector<Invoice>& invoices) {\n    std::vector<Invoice> filteredInvoices;\n    std::time_t t = std::time(nullptr);\n    std::tm currentDate = *std::localtime(&t);\n    \n    std::copy_if(invoices.begin(), invoices.end(), std::back_inserter(filteredInvoices),\n        [&currentDate](const Invoice& invoice) {\n            return invoice.dueDate.tm_year == currentDate.tm_year &&\n                   invoice.dueDate.tm_mon == currentDate.tm_mon;\n        });\n    \n    return filteredInvoices;\n}\n\nint main() {\n    std::vector<Invoice> invoices = {\n        {1, {0, 0, 0, 15, 10, 2023 - 1900}},  // November 15, 2023\n        {2, {0, 0, 0, 22, 10, 2023 - 1900}},  // November 22, 2023\n        {3, {0, 0, 0, 5, 11, 2023 - 1900}},   // December 5, 2023\n    };\n    \n    std::vector<Invoice> currentMonthInvoices = filterInvoicesByCurrentMonth(invoices);\n    \n    for (const auto& invoice : currentMonthInvoices) {\n        std::cout << \"Invoice ID: \" << invoice.id << \" Due Date: \"\n                  << (invoice.dueDate.tm_mon + 1) << \"/\"\n                  << invoice.dueDate.tm_mday << \"/\"\n                  << (invoice.dueDate.tm_year + 1900) << std::endl;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Filter out all lines in a file that start with a '#' from a configuration file.",
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n#include <algorithm>\n\nint main() {\n    std::ifstream inputFile(\"config.txt\");\n    std::ofstream outputFile(\"filtered_config.txt\");\n\n    if (!inputFile.is_open() || !outputFile.is_open()) {\n        std::cerr << \"Error opening files!\" << std::endl;\n        return 1;\n    }\n\n    std::string line;\n    std::for_each(std::istream_iterator<std::string>(inputFile),\n                  std::istream_iterator<std::string>(),\n                  [&](const std::string& line) {\n                      if (!line.empty() && line[0] != '#') {\n                          outputFile << line << std::endl;\n                      }\n                  });\n\n    inputFile.close();\n    outputFile.close();\n    return 0;\n}\n```"
  },
  {
    "task": "Select all posts with a comment count higher than 50 from a blog.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nstruct Post {\n    std::string title;\n    int comment_count;\n};\n\nstd::vector<Post> filterPosts(const std::vector<Post>& posts) {\n    std::vector<Post> filteredPosts;\n    std::copy_if(posts.begin(), posts.end(), std::back_inserter(filteredPosts),\n                 [](const Post& post) { return post.comment_count > 50; });\n    return filteredPosts;\n}\n\nint main() {\n    std::vector<Post> blogPosts = {\n        {\"Post 1\", 30},\n        {\"Post 2\", 60},\n        {\"Post 3\", 10},\n        {\"Post 4\", 80}\n    };\n\n    std::vector<Post> selectedPosts = filterPosts(blogPosts);\n\n    for (const auto& post : selectedPosts) {\n        std::cout << \"Title: \" << post.title << \", Comments: \" << post.comment_count << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Find all offers that expire within the next week from a promotional database.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <chrono>\n\nstruct Offer {\n    std::string name;\n    std::chrono::system_clock::time_point expirationDate;\n};\n\nstd::vector<Offer> filterOffersExpiringSoon(const std::vector<Offer>& offers) {\n    auto now = std::chrono::system_clock::now();\n    auto oneWeekLater = now + std::chrono::hours(24 * 7);\n    std::vector<Offer> result;\n    \n    std::copy_if(offers.begin(), offers.end(), std::back_inserter(result),\n                 [now, oneWeekLater](const Offer& offer) {\n                     return offer.expirationDate > now && offer.expirationDate <= oneWeekLater;\n                 });\n    \n    return result;\n}\n\nint main() {\n    std::vector<Offer> promotionalDatabase = {\n        {\"Offer1\", std::chrono::system_clock::now() + std::chrono::hours(24 * 2)},\n        {\"Offer2\", std::chrono::system_clock::now() + std::chrono::hours(24 * 10)},\n        {\"Offer3\", std::chrono::system_clock::now() + std::chrono::hours(24 * 5)}\n    };\n    \n    std::vector<Offer> expiringOffers = filterOffersExpiringSoon(promotionalDatabase);\n    \n    for (const auto& offer : expiringOffers) {\n        std::cout << \"Offer expiring soon: \" << offer.name << std::endl;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Identify all items that are on sale from a shopping catalog.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nstruct Item {\n    std::string name;\n    bool onSale;\n};\n\nstd::vector<Item> filterOnSale(const std::vector<Item>& catalog) {\n    std::vector<Item> saleItems;\n    std::copy_if(catalog.begin(), catalog.end(), std::back_inserter(saleItems),\n                 [](const Item& item) { return item.onSale; });\n    return saleItems;\n}\n\nint main() {\n    std::vector<Item> catalog = {\n        {\"Book\", true}, {\"Laptop\", false}, {\"Pen\", true}, {\"Notebook\", false}\n    };\n\n    std::vector<Item> saleItems = filterOnSale(catalog);\n\n    for (const auto& item : saleItems) {\n        std::cout << item.name << \" is on sale.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Extract all notes that mention 'urgent' from a meeting record.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nstd::vector<std::string> filterUrgentNotes(const std::vector<std::string>& notes) {\n    std::vector<std::string> urgentNotes;\n    std::copy_if(notes.begin(), notes.end(), std::back_inserter(urgentNotes),\n                 [](const std::string& note) {\n                     return note.find(\"urgent\") != std::string::npos;\n                 });\n    return urgentNotes;\n}\n\nint main() {\n    std::vector<std::string> meetingNotes = {\n        \"Discuss project timeline\",\n        \"urgent: finalize budget\",\n        \"Review team performance\",\n        \"urgent: client feedback\"\n    };\n\n    std::vector<std::string> urgentNotes = filterUrgentNotes(meetingNotes);\n\n    for (const auto& note : urgentNotes) {\n        std::cout << note << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Filter out all numbers that do not have a remainder when divided by two from a list.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nstd::vector<int> filterOddNumbers(const std::vector<int>& numbers) {\n    std::vector<int> result;\n    std::copy_if(numbers.begin(), numbers.end(), std::back_inserter(result),\n                 [](int n) { return n % 2 != 0; });\n    return result;\n}\n\nint main() {\n    std::vector<int> numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n    std::vector<int> filteredNumbers = filterOddNumbers(numbers);\n\n    for (int n : filteredNumbers) {\n        std::cout << n << \" \";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Select all concerts happening in the summer from an event calendar.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nstruct Event {\n    std::string name;\n    std::string date; // Format: \"YYYY-MM-DD\"\n};\n\nbool isSummerEvent(const Event& event) {\n    int month = std::stoi(event.date.substr(5, 2));\n    return month >= 6 && month <= 8;\n}\n\nint main() {\n    std::vector<Event> eventCalendar = {\n        {\"Spring Festival\", \"2023-04-21\"},\n        {\"Summer Jam\", \"2023-06-15\"},\n        {\"Rock Concert\", \"2023-07-22\"},\n        {\"Autumn Ball\", \"2023-09-10\"}\n    };\n\n    std::vector<Event> summerConcerts;\n    std::copy_if(eventCalendar.begin(), eventCalendar.end(), std::back_inserter(summerConcerts), isSummerEvent);\n\n    for (const auto& concert : summerConcerts) {\n        std::cout << concert.name << \" on \" << concert.date << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Find all users with more than 1000 followers from a social media platform.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nstruct User {\n    std::string name;\n    int followers;\n};\n\nstd::vector<User> filterUsers(const std::vector<User>& users) {\n    std::vector<User> result;\n    std::copy_if(users.begin(), users.end(), std::back_inserter(result), [](const User& user) {\n        return user.followers > 1000;\n    });\n    return result;\n}\n\nint main() {\n    std::vector<User> users = {\n        {\"Alice\", 500},\n        {\"Bob\", 1500},\n        {\"Charlie\", 2000},\n        {\"David\", 800}\n    };\n\n    std::vector<User> filteredUsers = filterUsers(users);\n\n    for (const User& user : filteredUsers) {\n        std::cout << user.name << \" has \" << user.followers << \" followers.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Identify all stocks with a growth rate above 10% from a financial portfolio.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nstruct Stock {\n    std::string name;\n    double growthRate;\n};\n\nstd::vector<Stock> getHighGrowthStocks(const std::vector<Stock>& portfolio) {\n    std::vector<Stock> highGrowthStocks;\n    std::copy_if(portfolio.begin(), portfolio.end(), std::back_inserter(highGrowthStocks),\n                 [](const Stock& stock) { return stock.growthRate > 10.0; });\n    return highGrowthStocks;\n}\n\nint main() {\n    std::vector<Stock> portfolio = {\n        {\"StockA\", 15.0},\n        {\"StockB\", 8.5},\n        {\"StockC\", 12.3},\n        {\"StockD\", 9.9}\n    };\n\n    std::vector<Stock> highGrowthStocks = getHighGrowthStocks(portfolio);\n\n    for (const auto& stock : highGrowthStocks) {\n        std::cout << stock.name << \" with growth rate: \" << stock.growthRate << \"%\\n\";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Extract all reviews that have a five-star rating from a product review site.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nstruct Review {\n    std::string content;\n    int rating;\n};\n\nstd::vector<Review> filterFiveStarReviews(const std::vector<Review>& reviews) {\n    std::vector<Review> fiveStarReviews;\n    std::copy_if(reviews.begin(), reviews.end(), std::back_inserter(fiveStarReviews), \n                 [](const Review& review) { return review.rating == 5; });\n    return fiveStarReviews;\n}\n\nint main() {\n    std::vector<Review> reviews = {\n        {\"Great product!\", 5},\n        {\"Not bad\", 3},\n        {\"Excellent!\", 5},\n        {\"Could be better\", 4}\n    };\n\n    std::vector<Review> fiveStarReviews = filterFiveStarReviews(reviews);\n\n    for (const auto& review : fiveStarReviews) {\n        std::cout << review.content << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Filter out all emails that are not flagged from an inbox.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nstruct Email {\n    std::string sender;\n    std::string subject;\n    bool flagged;\n};\n\nstd::vector<Email> filterFlaggedEmails(const std::vector<Email>& inbox) {\n    std::vector<Email> flaggedEmails;\n    std::copy_if(inbox.begin(), inbox.end(), std::back_inserter(flaggedEmails),\n                 [](const Email& email) { return email.flagged; });\n    return flaggedEmails;\n}\n\nint main() {\n    std::vector<Email> inbox = {\n        {\"alice@example.com\", \"Meeting Schedule\", false},\n        {\"bob@example.com\", \"Project Update\", true},\n        {\"carol@example.com\", \"Invoice\", false},\n        {\"dave@example.com\", \"Flagged Message\", true}\n    };\n\n    std::vector<Email> flaggedEmails = filterFlaggedEmails(inbox);\n\n    for (const auto& email : flaggedEmails) {\n        std::cout << \"Sender: \" << email.sender << \", Subject: \" << email.subject << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Select all entries with a timestamp from the past 24 hours from a log file.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <ctime>\n#include <algorithm>\n\nstruct LogEntry {\n    std::time_t timestamp;\n    std::string message;\n};\n\nstd::vector<LogEntry> filterRecentEntries(const std::vector<LogEntry>& entries) {\n    auto now = std::time(nullptr);\n    auto twentyFourHoursAgo = now - 24 * 60 * 60;\n    std::vector<LogEntry> recentEntries;\n\n    std::copy_if(entries.begin(), entries.end(), std::back_inserter(recentEntries), \n                 [twentyFourHoursAgo](const LogEntry& entry) {\n                     return entry.timestamp >= twentyFourHoursAgo;\n                 });\n\n    return recentEntries;\n}\n\nint main() {\n    std::vector<LogEntry> logEntries = {\n        {std::time(nullptr) - 10000, \"Log entry 1\"},\n        {std::time(nullptr) - 90000, \"Log entry 2\"},\n        {std::time(nullptr), \"Log entry 3\"},\n    };\n\n    std::vector<LogEntry> recentEntries = filterRecentEntries(logEntries);\n\n    for (const auto& entry : recentEntries) {\n        std::cout << \"Timestamp: \" << entry.timestamp << \", Message: \" << entry.message << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Find all books by a specific author from a library database.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nstruct Book {\n    std::string title;\n    std::string author;\n};\n\nstd::vector<Book> filterBooksByAuthor(const std::vector<Book>& books, const std::string& targetAuthor) {\n    std::vector<Book> filteredBooks;\n    std::copy_if(books.begin(), books.end(), std::back_inserter(filteredBooks), \n                 [&targetAuthor](const Book& book) { return book.author == targetAuthor; });\n    return filteredBooks;\n}\n\nint main() {\n    std::vector<Book> library = {\n        {\"The Great Gatsby\", \"F. Scott Fitzgerald\"},\n        {\"1984\", \"George Orwell\"},\n        {\"To Kill a Mockingbird\", \"Harper Lee\"},\n        {\"Animal Farm\", \"George Orwell\"}\n    };\n\n    std::string authorToFind = \"George Orwell\";\n    std::vector<Book> booksByAuthor = filterBooksByAuthor(library, authorToFind);\n\n    for (const auto& book : booksByAuthor) {\n        std::cout << book.title << \" by \" << book.author << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Identify all donations above $500 from a charity fundraiser report.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nint main() {\n    std::vector<double> donations = {150.0, 700.0, 300.0, 850.0, 500.0, 1000.0};\n    std::vector<double> filteredDonations;\n\n    std::copy_if(donations.begin(), donations.end(), std::back_inserter(filteredDonations), [](double donation) {\n        return donation > 500.0;\n    });\n\n    for (double donation : filteredDonations) {\n        std::cout << donation << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Extract all assignments due in the next week from a course syllabus.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <ctime>\n\nstruct Assignment {\n    std::string title;\n    std::time_t dueDate;\n};\n\nstd::vector<Assignment> filterAssignmentsDueNextWeek(const std::vector<Assignment>& assignments) {\n    std::vector<Assignment> dueNextWeek;\n    std::time_t now = std::time(nullptr);\n    std::tm* now_tm = std::localtime(&now);\n    \n    now_tm->tm_mday += 7; // Add 7 days to the current time\n    std::time_t nextWeek = std::mktime(now_tm);\n\n    for (const auto& assignment : assignments) {\n        if (assignment.dueDate > now && assignment.dueDate <= nextWeek) {\n            dueNextWeek.push_back(assignment);\n        }\n    }\n    \n    return dueNextWeek;\n}\n\nint main() {\n    // Example usage\n    std::vector<Assignment> syllabus = {\n        {\"Assignment 1\", std::time(nullptr) + 86400 * 3},\n        {\"Assignment 2\", std::time(nullptr) + 86400 * 10},\n        {\"Assignment 3\", std::time(nullptr) + 86400 * 5}\n    };\n    \n    std::vector<Assignment> dueNextWeek = filterAssignmentsDueNextWeek(syllabus);\n    \n    for (const auto& assignment : dueNextWeek) {\n        std::cout << \"Due Next Week: \" << assignment.title << std::endl;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Filter out all movies that are not in English from a streaming service.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nstruct Movie {\n    std::string title;\n    std::string language;\n};\n\nint main() {\n    std::vector<Movie> movies = {\n        {\"Inception\", \"English\"},\n        {\"Am\u00e9lie\", \"French\"},\n        {\"Parasite\", \"Korean\"},\n        {\"The Dark Knight\", \"English\"},\n        {\"Spirited Away\", \"Japanese\"}\n    };\n\n    std::vector<Movie> englishMovies;\n    std::copy_if(movies.begin(), movies.end(), std::back_inserter(englishMovies),\n                 [](const Movie& movie) { return movie.language == \"English\"; });\n\n    for (const auto& movie : englishMovies) {\n        std::cout << movie.title << \" (\" << movie.language << \")\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Select all landmarks located in Europe from a travel guide.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nstruct Landmark {\n    std::string name;\n    std::string location;\n};\n\nstd::vector<Landmark> filterLandmarksInEurope(const std::vector<Landmark>& landmarks) {\n    std::vector<Landmark> europeanLandmarks;\n    std::copy_if(landmarks.begin(), landmarks.end(), std::back_inserter(europeanLandmarks),\n                 [](const Landmark& landmark) { return landmark.location == \"Europe\"; });\n    return europeanLandmarks;\n}\n\nint main() {\n    std::vector<Landmark> landmarks = {\n        {\"Eiffel Tower\", \"Europe\"},\n        {\"Statue of Liberty\", \"North America\"},\n        {\"Colosseum\", \"Europe\"},\n        {\"Great Wall of China\", \"Asia\"}\n    };\n\n    std::vector<Landmark> europeanLandmarks = filterLandmarksInEurope(landmarks);\n\n    for (const auto& landmark : europeanLandmarks) {\n        std::cout << landmark.name << \" located in \" << landmark.location << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Find all contracts that are set to renew next month from a contract management system.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <chrono>\n\nstruct Contract {\n    int id;\n    std::chrono::year_month renewDate;\n};\n\nstd::vector<Contract> filterContractsToRenewNextMonth(const std::vector<Contract>& contracts) {\n    auto now = std::chrono::year_month{std::chrono::year_month_day{std::chrono::system_clock::now()}};\n    auto nextMonth = now + std::chrono::months{1};\n\n    std::vector<Contract> filteredContracts;\n    std::copy_if(contracts.begin(), contracts.end(), std::back_inserter(filteredContracts), [nextMonth](const Contract& c) {\n        return c.renewDate == nextMonth;\n    });\n\n    return filteredContracts;\n}\n\nint main() {\n    std::vector<Contract> contracts = {\n        {1, std::chrono::year{2023}/std::chrono::February},\n        {2, std::chrono::year{2023}/std::chrono::March},\n        {3, std::chrono::year{2023}/std::chrono::April}\n    };\n\n    auto contractsToRenew = filterContractsToRenewNextMonth(contracts);\n\n    for (const auto& contract : contractsToRenew) {\n        std::cout << \"Contract ID set to renew next month: \" << contract.id << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Identify all volunteer hours logged in the past year from a non-profit organization database.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <ctime>\n\nstruct VolunteerLog {\n    std::string volunteerName;\n    std::time_t logDate;\n    int hours;\n};\n\nstd::vector<VolunteerLog> filterLogsPastYear(const std::vector<VolunteerLog>& logs) {\n    std::vector<VolunteerLog> result;\n    std::time_t now = std::time(nullptr);\n    std::tm* timeInfo = std::localtime(&now);\n    timeInfo->tm_year -= 1;\n    std::time_t oneYearAgo = std::mktime(timeInfo);\n\n    std::copy_if(logs.begin(), logs.end(), std::back_inserter(result),\n                 [oneYearAgo](const VolunteerLog& log) {\n                     return log.logDate >= oneYearAgo;\n                 });\n\n    return result;\n}\n\nint main() {\n    std::vector<VolunteerLog> logs = {\n        {\"Alice\", 1672531199, 5}, // Example log\n        {\"Bob\", 1704067199, 3}    // Example log\n    };\n\n    std::vector<VolunteerLog> pastYearLogs = filterLogsPastYear(logs);\n\n    for (const auto& log : pastYearLogs) {\n        std::cout << \"Volunteer: \" << log.volunteerName\n                  << \", Date: \" << std::ctime(&log.logDate)\n                  << \", Hours: \" << log.hours << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Extract all elements that are not strings from a mixed-type list.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <variant>\n#include <string>\n#include <algorithm>\n\nint main() {\n    std::vector<std::variant<int, double, std::string>> mixedList = {1, 2.5, \"hello\", 3, \"world\", 4.1};\n    std::vector<std::variant<int, double>> filteredList;\n\n    std::copy_if(mixedList.begin(), mixedList.end(), std::back_inserter(filteredList),\n        [](const auto& element) {\n            return !std::holds_alternative<std::string>(element);\n        });\n\n    for (const auto& element : filteredList) {\n        std::visit([](const auto& val) { std::cout << val << \" \"; }, element);\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Filter out all orders that are not yet shipped from an e-commerce system.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nstruct Order {\n    int id;\n    bool isShipped;\n};\n\nstd::vector<Order> filterShippedOrders(const std::vector<Order>& orders) {\n    std::vector<Order> shippedOrders;\n    std::copy_if(orders.begin(), orders.end(), std::back_inserter(shippedOrders),\n                 [](const Order& order) { return order.isShipped; });\n    return shippedOrders;\n}\n\nint main() {\n    std::vector<Order> orders = {\n        {1, false},\n        {2, true},\n        {3, false},\n        {4, true}\n    };\n\n    std::vector<Order> shippedOrders = filterShippedOrders(orders);\n\n    for (const auto& order : shippedOrders) {\n        std::cout << \"Order ID: \" << order.id << \" is shipped.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Select all emails sent from a specific address in an email server.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nstruct Email {\n    std::string sender;\n    std::string recipient;\n    std::string subject;\n    std::string body;\n};\n\nstd::vector<Email> filterEmailsBySender(const std::vector<Email>& emails, const std::string& senderAddress) {\n    std::vector<Email> filteredEmails;\n    std::copy_if(emails.begin(), emails.end(), std::back_inserter(filteredEmails),\n                 [&senderAddress](const Email& email) { return email.sender == senderAddress; });\n    return filteredEmails;\n}\n\nint main() {\n    std::vector<Email> emails = {\n        {\"sender@example.com\", \"recipient1@example.com\", \"Subject 1\", \"Body 1\"},\n        {\"sender@example.com\", \"recipient2@example.com\", \"Subject 2\", \"Body 2\"},\n        {\"other@example.com\", \"recipient3@example.com\", \"Subject 3\", \"Body 3\"}\n    };\n\n    std::string targetSender = \"sender@example.com\";\n    std::vector<Email> result = filterEmailsBySender(emails, targetSender);\n\n    for (const auto& email : result) {\n        std::cout << \"Sender: \" << email.sender << \", Recipient: \" << email.recipient\n                  << \", Subject: \" << email.subject << \", Body: \" << email.body << \"\\n\";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Find all passwords with at least one special character from a security database.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nbool containsSpecialCharacter(const std::string& password) {\n    return std::any_of(password.begin(), password.end(), [](char c) {\n        return std::ispunct(c);\n    });\n}\n\nstd::vector<std::string> filterPasswords(const std::vector<std::string>& passwords) {\n    std::vector<std::string> result;\n    std::copy_if(passwords.begin(), passwords.end(), std::back_inserter(result), containsSpecialCharacter);\n    return result;\n}\n\nint main() {\n    std::vector<std::string> passwords = {\"password123\", \"pass@word\", \"hello!\", \"secure#123\", \"plainpass\"};\n    std::vector<std::string> filteredPasswords = filterPasswords(passwords);\n\n    for (const auto& password : filteredPasswords) {\n        std::cout << password << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Identify all courses with a prerequisite from a university catalog.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nstruct Course {\n    std::string name;\n    std::string prerequisite;\n};\n\nstd::vector<Course> filterCoursesWithPrerequisite(const std::vector<Course>& catalog) {\n    std::vector<Course> filteredCourses;\n    std::copy_if(catalog.begin(), catalog.end(), std::back_inserter(filteredCourses),\n                 [](const Course& course) { return !course.prerequisite.empty(); });\n    return filteredCourses;\n}\n\nint main() {\n    std::vector<Course> catalog = {\n        {\"Math 101\", \"\"},\n        {\"Physics 201\", \"Math 101\"},\n        {\"Chemistry 101\", \"\"},\n        {\"Biology 202\", \"Biology 101\"},\n        {\"Computer Science 101\", \"\"}\n    };\n\n    auto coursesWithPrerequisite = filterCoursesWithPrerequisite(catalog);\n\n    for (const auto& course : coursesWithPrerequisite) {\n        std::cout << course.name << \" with prerequisite: \" << course.prerequisite << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Extract all genes associated with a specific trait from a genetic database.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nstruct Gene {\n    std::string name;\n    std::string associatedTrait;\n};\n\nstd::vector<Gene> filterGenesByTrait(const std::vector<Gene>& database, const std::string& trait) {\n    std::vector<Gene> result;\n    std::copy_if(database.begin(), database.end(), std::back_inserter(result),\n                 [&trait](const Gene& gene) { return gene.associatedTrait == trait; });\n    return result;\n}\n\nint main() {\n    std::vector<Gene> geneticDatabase = {\n        {\"GeneA\", \"TraitX\"},\n        {\"GeneB\", \"TraitY\"},\n        {\"GeneC\", \"TraitX\"},\n        {\"GeneD\", \"TraitZ\"}\n    };\n\n    std::string specificTrait = \"TraitX\";\n    std::vector<Gene> filteredGenes = filterGenesByTrait(geneticDatabase, specificTrait);\n\n    for (const auto& gene : filteredGenes) {\n        std::cout << \"Gene: \" << gene.name << \", Trait: \" << gene.associatedTrait << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Filter out all investments with a risk level below medium from a portfolio.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nenum class RiskLevel {\n    Low,\n    Medium,\n    High\n};\n\nstruct Investment {\n    std::string name;\n    RiskLevel risk;\n};\n\nstd::vector<Investment> filterMediumAndHighRisk(const std::vector<Investment>& portfolio) {\n    std::vector<Investment> filteredPortfolio;\n    std::copy_if(portfolio.begin(), portfolio.end(), std::back_inserter(filteredPortfolio),\n                 [](const Investment& inv) { return inv.risk >= RiskLevel::Medium; });\n    return filteredPortfolio;\n}\n\nint main() {\n    std::vector<Investment> portfolio = {\n        {\"InvestmentA\", RiskLevel::Low},\n        {\"InvestmentB\", RiskLevel::Medium},\n        {\"InvestmentC\", RiskLevel::High}\n    };\n    \n    std::vector<Investment> filteredPortfolio = filterMediumAndHighRisk(portfolio);\n\n    for (const auto& inv : filteredPortfolio) {\n        std::cout << inv.name << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Select all calls longer than five minutes from a call log.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nstruct Call {\n    std::string caller;\n    int duration; // Duration in minutes\n};\n\nstd::vector<Call> filterLongCalls(const std::vector<Call>& callLog) {\n    std::vector<Call> longCalls;\n    std::copy_if(callLog.begin(), callLog.end(), std::back_inserter(longCalls),\n        [](const Call& call) { return call.duration > 5; });\n    return longCalls;\n}\n\nint main() {\n    std::vector<Call> callLog = {\n        {\"Alice\", 3},\n        {\"Bob\", 10},\n        {\"Charlie\", 7},\n        {\"David\", 4}\n    };\n\n    std::vector<Call> longCalls = filterLongCalls(callLog);\n\n    for (const Call& call : longCalls) {\n        std::cout << \"Caller: \" << call.caller << \", Duration: \" << call.duration << \" minutes\\n\";\n    }\n\n    return 0;\n}\n```"
  }
]