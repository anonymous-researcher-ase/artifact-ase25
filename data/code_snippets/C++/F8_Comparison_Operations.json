[
  {
    "task": "Write a function that checks if two strings are equal, ignoring case sensitivity.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n#include <algorithm>\n\nbool areStringsEqualIgnoreCase(const std::string& str1, const std::string& str2) {\n    if (str1.size() != str2.size()) return false;\n    for (size_t i = 0; i < str1.size(); ++i) {\n        if (tolower(str1[i]) != tolower(str2[i])) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint main() {\n    std::string s1 = \"Hello\";\n    std::string s2 = \"hello\";\n    std::cout << (areStringsEqualIgnoreCase(s1, s2) ? \"Equal\" : \"Not Equal\") << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Create a program that determines if a number is greater than 10.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    int number;\n    std::cout << \"Enter a number: \";\n    std::cin >> number;\n\n    if (number > 10) {\n        std::cout << \"The number is greater than 10.\" << std::endl;\n    } else {\n        std::cout << \"The number is not greater than 10.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a feature that compares the current date to a given date and returns if it is in the future.",
    "code": "```cpp\n#include <iostream>\n#include <ctime>\n\nbool isFutureDate(int year, int month, int day) {\n    std::time_t t = std::time(nullptr);\n    std::tm* now = std::localtime(&t);\n\n    if (year > (now->tm_year + 1900)) return true;\n    if (year == (now->tm_year + 1900) && month > (now->tm_mon + 1)) return true;\n    if (year == (now->tm_year + 1900) && month == (now->tm_mon + 1) && day > now->tm_mday) return true;\n    \n    return false;\n}\n\nint main() {\n    int year, month, day;\n    std::cout << \"Enter year, month, and day: \";\n    std::cin >> year >> month >> day;\n\n    if (isFutureDate(year, month, day)) {\n        std::cout << \"The given date is in the future.\" << std::endl;\n    } else {\n        std::cout << \"The given date is not in the future.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a system that checks if a user's age is less than 18 and restricts access if true.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    int age;\n    std::cout << \"Enter your age: \";\n    std::cin >> age;\n\n    if (age < 18) {\n        std::cout << \"Access restricted.\" << std::endl;\n    } else {\n        std::cout << \"Access granted.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Build an algorithm that finds the maximum of three given integers.",
    "code": "```cpp\n#include <iostream>\n\nint findMaxOfThree(int a, int b, int c) {\n    int max = a;\n    if (b > max) {\n        max = b;\n    }\n    if (c > max) {\n        max = c;\n    }\n    return max;\n}\n\nint main() {\n    int a = 5, b = 10, c = 3;\n    std::cout << \"The maximum of \" << a << \", \" << b << \", and \" << c << \" is: \" << findMaxOfThree(a, b, c) << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that verifies if two arrays contain the same elements in the same order.",
    "code": "```cpp\n#include <vector>\n\nbool areArraysEqual(const std::vector<int>& arr1, const std::vector<int>& arr2) {\n    if (arr1.size() != arr2.size()) return false;\n    for (size_t i = 0; i < arr1.size(); ++i) {\n        if (arr1[i] != arr2[i]) return false;\n    }\n    return true;\n}\n```"
  },
  {
    "task": "Create a script that checks if a product's price is within a specified range.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    double price = 50.0; // Example price\n    double minPrice = 30.0; // Minimum price in the range\n    double maxPrice = 60.0; // Maximum price in the range\n\n    if (price >= minPrice && price <= maxPrice) {\n        std::cout << \"The product's price is within the specified range.\" << std::endl;\n    } else {\n        std::cout << \"The product's price is outside the specified range.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a tool that compares two versions of a software application and determines which is newer.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <sstream>\n\nstd::vector<int> parseVersion(const std::string& version) {\n    std::vector<int> nums;\n    std::stringstream ss(version);\n    std::string num;\n    while (std::getline(ss, num, '.')) {\n        nums.push_back(std::stoi(num));\n    }\n    return nums;\n}\n\nint compareVersions(const std::string& version1, const std::string& version2) {\n    std::vector<int> v1 = parseVersion(version1);\n    std::vector<int> v2 = parseVersion(version2);\n\n    size_t maxLength = std::max(v1.size(), v2.size());\n    v1.resize(maxLength, 0);\n    v2.resize(maxLength, 0);\n\n    for (size_t i = 0; i < maxLength; ++i) {\n        if (v1[i] > v2[i]) return 1;\n        if (v1[i] < v2[i]) return -1;\n    }\n    return 0;\n}\n\nint main() {\n    std::string version1, version2;\n    std::cout << \"Enter first version: \";\n    std::cin >> version1;\n    std::cout << \"Enter second version: \";\n    std::cin >> version2;\n\n    int result = compareVersions(version1, version2);\n    if (result == 1) {\n        std::cout << \"First version is newer.\\n\";\n    } else if (result == -1) {\n        std::cout << \"Second version is newer.\\n\";\n    } else {\n        std::cout << \"Both versions are the same.\\n\";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a test to see if a given year is a leap year.",
    "code": "```cpp\n#include <iostream>\n\nbool isLeapYear(int year) {\n    if (year % 4 == 0) {\n        if (year % 100 == 0) {\n            if (year % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n\n    if (isLeapYear(year)) {\n        std::cout << year << \" is a leap year.\" << std::endl;\n    } else {\n        std::cout << year << \" is not a leap year.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a feature that tells if a student\u2019s grade is passing or failing based on a threshold.",
    "code": "```cpp\n#include <iostream>\n\nbool isPassingGrade(double grade, double threshold) {\n    return grade >= threshold;\n}\n\nint main() {\n    double studentGrade = 75.0;\n    double passingThreshold = 60.0;\n\n    if (isPassingGrade(studentGrade, passingThreshold)) {\n        std::cout << \"The student's grade is passing.\" << std::endl;\n    } else {\n        std::cout << \"The student's grade is failing.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function to compare two file sizes and return the larger one.",
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n\nstd::streamsize getFileSize(const std::string &fileName) {\n    std::ifstream file(fileName, std::ios::binary | std::ios::ate);\n    return file.tellg();\n}\n\nstd::string compareFileSizes(const std::string &file1, const std::string &file2) {\n    std::streamsize size1 = getFileSize(file1);\n    std::streamsize size2 = getFileSize(file2);\n    \n    if (size1 > size2) {\n        return file1;\n    } else {\n        return file2;\n    }\n}\n\nint main() {\n    std::string file1 = \"file1.txt\";\n    std::string file2 = \"file2.txt\";\n    \n    std::string largerFile = compareFileSizes(file1, file2);\n    std::cout << \"The larger file is: \" << largerFile << std::endl;\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Build a program that checks if the temperature is below freezing point.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    double temperature;\n    \n    std::cout << \"Enter the temperature: \";\n    std::cin >> temperature;\n\n    if (temperature < 0.0) {\n        std::cout << \"The temperature is below freezing point.\" << std::endl;\n    } else {\n        std::cout << \"The temperature is above freezing point.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a logic that determines if a number is within the Fibonacci sequence.",
    "code": "```cpp\n#include <iostream>\n\nbool isFibonacci(int n) {\n    if (n < 0) return false;\n    int a = 0, b = 1;\n    while (b < n) {\n        int temp = b;\n        b = a + b;\n        a = temp;\n    }\n    return b == n || n == 0;\n}\n\nint main() {\n    int number;\n    std::cout << \"Enter a number: \";\n    std::cin >> number;\n\n    if (isFibonacci(number)) {\n        std::cout << number << \" is in the Fibonacci sequence.\\n\";\n    } else {\n        std::cout << number << \" is not in the Fibonacci sequence.\\n\";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a function that checks if a given word is a palindrome.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nbool isPalindrome(const std::string& word) {\n    int left = 0;\n    int right = word.length() - 1;\n    while (left < right) {\n        if (word[left] != word[right]) {\n            return false;\n        }\n        ++left;\n        --right;\n    }\n    return true;\n}\n\nint main() {\n    std::string testWord = \"radar\";\n    if (isPalindrome(testWord)) {\n        std::cout << testWord << \" is a palindrome.\" << std::endl;\n    } else {\n        std::cout << testWord << \" is not a palindrome.\" << std::endl;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Write a script to see if a password meets a minimum length requirement.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nbool isPasswordValid(const std::string& password, size_t minLength) {\n    return password.length() >= minLength;\n}\n\nint main() {\n    std::string password;\n    size_t minLength = 8;\n\n    std::cout << \"Enter your password: \";\n    std::cin >> password;\n\n    if (isPasswordValid(password, minLength)) {\n        std::cout << \"Password is valid.\\n\";\n    } else {\n        std::cout << \"Password is too short.\\n\";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a system that decides if a point is inside a circle based on its coordinates.",
    "code": "```cpp\n#include <iostream>\n\nbool isPointInsideCircle(double x, double y, double circleX, double circleY, double radius) {\n    double dx = x - circleX;\n    double dy = y - circleY;\n    return (dx * dx + dy * dy) <= (radius * radius);\n}\n\nint main() {\n    double pointX = 3.0;\n    double pointY = 4.0;\n    double circleX = 0.0;\n    double circleY = 0.0;\n    double radius = 5.0;\n\n    if (isPointInsideCircle(pointX, pointY, circleX, circleY, radius)) {\n        std::cout << \"The point is inside the circle.\" << std::endl;\n    } else {\n        std::cout << \"The point is outside the circle.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a program that checks if a shopping cart total exceeds a certain budget.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    double shoppingCartTotal;\n    double budget;\n\n    std::cout << \"Enter the shopping cart total: \";\n    std::cin >> shoppingCartTotal;\n    std::cout << \"Enter your budget: \";\n    std::cin >> budget;\n\n    if (shoppingCartTotal > budget) {\n        std::cout << \"The shopping cart total exceeds the budget.\" << std::endl;\n    } else {\n        std::cout << \"The shopping cart total is within the budget.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a function that compares two players' scores and returns the winner.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nstd::string determineWinner(int score1, int score2) {\n    if (score1 > score2) {\n        return \"Player 1 wins\";\n    } else if (score1 < score2) {\n        return \"Player 2 wins\";\n    } else {\n        return \"It's a tie\";\n    }\n}\n\nint main() {\n    int player1Score = 50;\n    int player2Score = 75;\n\n    std::string result = determineWinner(player1Score, player2Score);\n    std::cout << result << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program to determine if one string is a substring of another.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nint main() {\n    std::string str1, str2;\n    std::cout << \"Enter the main string: \";\n    std::getline(std::cin, str1);\n    std::cout << \"Enter the substring to find: \";\n    std::getline(std::cin, str2);\n\n    if (str1.find(str2) != std::string::npos) {\n        std::cout << \"The string is a substring.\" << std::endl;\n    } else {\n        std::cout << \"The string is not a substring.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Build a utility that checks if a number is a prime number.",
    "code": "```cpp\n#include <iostream>\n\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (int i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) return false;\n    }\n    return true;\n}\n\nint main() {\n    int number;\n    std::cout << \"Enter a number: \";\n    std::cin >> number;\n    if (isPrime(number)) {\n        std::cout << number << \" is a prime number.\" << std::endl;\n    } else {\n        std::cout << number << \" is not a prime number.\" << std::endl;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that checks if a given number is a perfect square.",
    "code": "```cpp\n#include <cmath>\n\nbool isPerfectSquare(int num) {\n    int root = static_cast<int>(std::sqrt(num));\n    return root * root == num;\n}\n```"
  },
  {
    "task": "Create a system that determines if a person is eligible for a senior citizen discount based on their age.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    int age;\n    std::cout << \"Enter your age: \";\n    std::cin >> age;\n\n    if (age >= 65) {\n        std::cout << \"Eligible for senior citizen discount.\" << std::endl;\n    } else {\n        std::cout << \"Not eligible for senior citizen discount.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a feature to check if a date falls on a weekend.",
    "code": "```cpp\n#include <iostream>\n#include <ctime>\n\nbool isWeekend(int day, int month, int year) {\n    std::tm time_in = {0, 0, 0, day, month - 1, year - 1900};\n    std::time_t time_temp = std::mktime(&time_in);\n    \n    const std::tm *time_out = std::localtime(&time_temp);\n    int wday = time_out->tm_wday;\n    \n    return (wday == 0 || wday == 6);\n}\n\nint main() {\n    int day = 7;\n    int month = 10;\n    int year = 2023;\n\n    if (isWeekend(day, month, year)) {\n        std::cout << \"The date falls on a weekend.\" << std::endl;\n    } else {\n        std::cout << \"The date does not fall on a weekend.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a program that sees if a given email address is in the correct format.",
    "code": "```cpp\n#include <iostream>\n#include <regex>\n\nbool isValidEmail(const std::string& email) {\n    const std::regex pattern(R\"((\\w+)(\\.\\w+)*@(\\w+)(\\.\\w+)+)\");\n    return std::regex_match(email, pattern);\n}\n\nint main() {\n    std::string email;\n    std::cout << \"Enter an email address: \";\n    std::cin >> email;\n\n    if (isValidEmail(email)) {\n        std::cout << \"The email address is in the correct format.\" << std::endl;\n    } else {\n        std::cout << \"The email address is not in the correct format.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a test to check if a rectangle's area is larger than a triangle's area.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    double rectangleLength = 5.0;\n    double rectangleWidth = 3.0;\n    double triangleBase = 6.0;\n    double triangleHeight = 4.0;\n\n    double rectangleArea = rectangleLength * rectangleWidth;\n    double triangleArea = 0.5 * triangleBase * triangleHeight;\n\n    if (rectangleArea > triangleArea) {\n        std::cout << \"Rectangle's area is larger than triangle's area.\" << std::endl;\n    } else {\n        std::cout << \"Rectangle's area is not larger than triangle's area.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that verifies if two rectangles overlap each other.",
    "code": "```cpp\n#include <iostream>\n\nstruct Rectangle {\n    int x, y, width, height;\n};\n\nbool doRectanglesOverlap(const Rectangle& rect1, const Rectangle& rect2) {\n    return !(rect1.x + rect1.width <= rect2.x ||\n             rect2.x + rect2.width <= rect1.x ||\n             rect1.y + rect1.height <= rect2.y ||\n             rect2.y + rect2.height <= rect1.y);\n}\n\nint main() {\n    Rectangle rect1 = {0, 0, 4, 4};\n    Rectangle rect2 = {2, 2, 4, 4};\n    \n    if (doRectanglesOverlap(rect1, rect2)) {\n        std::cout << \"Rectangles overlap\" << std::endl;\n    } else {\n        std::cout << \"Rectangles do not overlap\" << std::endl;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Create a script to compare two strings lexicographically.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nint main() {\n    std::string str1 = \"apple\";\n    std::string str2 = \"banana\";\n\n    if (str1 < str2) {\n        std::cout << str1 << \" is lexicographically less than \" << str2 << std::endl;\n    } else if (str1 > str2) {\n        std::cout << str1 << \" is lexicographically greater than \" << str2 << std::endl;\n    } else {\n        std::cout << str1 << \" is equal to \" << str2 << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Build a program that checks if a list of numbers is in ascending order.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nbool isAscending(const std::vector<int>& numbers) {\n    for (size_t i = 1; i < numbers.size(); ++i) {\n        if (numbers[i] < numbers[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint main() {\n    std::vector<int> numbers = {1, 2, 3, 4, 5}; // Example list of numbers\n    if (isAscending(numbers)) {\n        std::cout << \"The list is in ascending order.\" << std::endl;\n    } else {\n        std::cout << \"The list is not in ascending order.\" << std::endl;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Design a system to compare the heights of two buildings.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass Building {\npublic:\n    Building(const std::string& name, double height) : name(name), height(height) {}\n\n    const std::string& getName() const {\n        return name;\n    }\n\n    double getHeight() const {\n        return height;\n    }\n\n    bool operator>(const Building& other) const {\n        return height > other.height;\n    }\n\n    bool operator<(const Building& other) const {\n        return height < other.height;\n    }\n\n    bool operator==(const Building& other) const {\n        return height == other.height;\n    }\n\nprivate:\n    std::string name;\n    double height;\n};\n\nint main() {\n    Building building1(\"Building A\", 150.0);\n    Building building2(\"Building B\", 200.0);\n\n    if (building1 > building2) {\n        std::cout << building1.getName() << \" is taller than \" << building2.getName() << \".\\n\";\n    } else if (building1 < building2) {\n        std::cout << building1.getName() << \" is shorter than \" << building2.getName() << \".\\n\";\n    } else {\n        std::cout << building1.getName() << \" and \" << building2.getName() << \" are of the same height.\\n\";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a feature that determines if a given time is before noon.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nbool isBeforeNoon(const std::string& time) {\n    // Assume time is in the format \"HH:MM\" and 24-hour format\n    int hour = std::stoi(time.substr(0, 2));\n    return hour < 12;\n}\n\nint main() {\n    std::string time = \"09:30\"; // Example time input\n    if (isBeforeNoon(time)) {\n        std::cout << \"The time is before noon.\" << std::endl;\n    } else {\n        std::cout << \"The time is not before noon.\" << std::endl;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function to check if a given number is a power of two.",
    "code": "```cpp\n#include <iostream>\n\nbool isPowerOfTwo(int n) {\n    if (n <= 0) return false;\n    return (n & (n - 1)) == 0;\n}\n\nint main() {\n    int num = 16; // Example number\n    if (isPowerOfTwo(num)) {\n        std::cout << num << \" is a power of two.\" << std::endl;\n    } else {\n        std::cout << num << \" is not a power of two.\" << std::endl;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Create a program that determines if a word is longer than another word.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nint main() {\n    std::string word1, word2;\n    std::cout << \"Enter the first word: \";\n    std::cin >> word1;\n    std::cout << \"Enter the second word: \";\n    std::cin >> word2;\n\n    if (word1.length() > word2.length()) {\n        std::cout << \"The first word is longer than the second word.\" << std::endl;\n    } else if (word1.length() < word2.length()) {\n        std::cout << \"The second word is longer than the first word.\" << std::endl;\n    } else {\n        std::cout << \"Both words are of equal length.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a function to compare the lengths of two lists and return the longer one.",
    "code": "```cpp\n#include <vector>\n\nstd::vector<int> compareAndReturnLonger(const std::vector<int>& list1, const std::vector<int>& list2) {\n    if (list1.size() > list2.size()) {\n        return list1;\n    } else {\n        return list2;\n    }\n}\n```"
  },
  {
    "task": "Write a script to see if a user's input matches a pre-defined secret code.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nint main() {\n    const std::string secretCode = \"OpenSesame\";\n    std::string userInput;\n    \n    std::cout << \"Enter the secret code: \";\n    std::getline(std::cin, userInput);\n    \n    if (userInput == secretCode) {\n        std::cout << \"Access granted.\" << std::endl;\n    } else {\n        std::cout << \"Access denied.\" << std::endl;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Build a utility that checks if a given year is in the 21st century.",
    "code": "```cpp\n#include <iostream>\n\nbool is21stCentury(int year) {\n    return year >= 2001 && year <= 2100;\n}\n\nint main() {\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n\n    if (is21stCentury(year)) {\n        std::cout << year << \" is in the 21st century.\" << std::endl;\n    } else {\n        std::cout << year << \" is not in the 21st century.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a logic that determines if a book's publication year is after 2000.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    int publicationYear;\n    std::cout << \"Enter the publication year of the book: \";\n    std::cin >> publicationYear;\n\n    if (publicationYear > 2000) {\n        std::cout << \"The book was published after the year 2000.\" << std::endl;\n    } else {\n        std::cout << \"The book was not published after the year 2000.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a feature to see if a number is divisible by both 3 and 5.",
    "code": "```cpp\n#include <iostream>\n\nbool isDivisibleBy3And5(int number) {\n    return (number % 3 == 0) && (number % 5 == 0);\n}\n\nint main() {\n    int number;\n    std::cout << \"Enter a number: \";\n    std::cin >> number;\n\n    if (isDivisibleBy3And5(number)) {\n        std::cout << number << \" is divisible by both 3 and 5.\" << std::endl;\n    } else {\n        std::cout << number << \" is not divisible by both 3 and 5.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a system that checks if a student's GPA is above a certain threshold.",
    "code": "```cpp\n#include <iostream>\n\nbool isGpaAboveThreshold(double gpa, double threshold) {\n    return gpa > threshold;\n}\n\nint main() {\n    double studentGpa = 3.5;\n    double threshold = 3.0;\n\n    if (isGpaAboveThreshold(studentGpa, threshold)) {\n        std::cout << \"GPA is above the threshold.\" << std::endl;\n    } else {\n        std::cout << \"GPA is not above the threshold.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function to determine if a given angle is acute, right, or obtuse.",
    "code": "```cpp\n#include <iostream>\n\nstd::string classifyAngle(int angle) {\n    if (angle < 90) {\n        return \"Acute\";\n    } else if (angle == 90) {\n        return \"Right\";\n    } else if (angle > 90 && angle < 180) {\n        return \"Obtuse\";\n    } else {\n        return \"Invalid\";\n    }\n}\n\nint main() {\n    int angle;\n    std::cout << \"Enter an angle: \";\n    std::cin >> angle;\n    std::cout << \"The angle is: \" << classifyAngle(angle) << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a program that compares the lengths of two strings and returns the shorter one.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nstd::string getShorterString(const std::string& str1, const std::string& str2) {\n    return str1.length() < str2.length() ? str1 : str2;\n}\n\nint main() {\n    std::string string1, string2;\n    \n    std::cout << \"Enter the first string: \";\n    std::getline(std::cin, string1);\n\n    std::cout << \"Enter the second string: \";\n    std::getline(std::cin, string2);\n\n    std::string shorterString = getShorterString(string1, string2);\n    std::cout << \"The shorter string is: \" << shorterString << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a script to verify if a username is unique within a list.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n\nbool isUsernameUnique(const std::vector<std::string>& usernames, const std::string& username) {\n    for (const auto& existingUsername : usernames) {\n        if (existingUsername == username) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint main() {\n    std::vector<std::string> usernames = {\"alice\", \"bob\", \"charlie\"};\n    std::string usernameToCheck = \"dave\";\n\n    if (isUsernameUnique(usernames, usernameToCheck)) {\n        std::cout << \"Username is unique.\" << std::endl;\n    } else {\n        std::cout << \"Username is not unique.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Build a tool that checks if a job applicant meets all the listed qualifications.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nstruct Applicant {\n    int age;\n    std::string degree;\n    int yearsOfExperience;\n    bool hasCertification;\n};\n\nbool checkQualifications(const Applicant& applicant) {\n    int requiredAge = 18;\n    std::string requiredDegree = \"Bachelor's\";\n    int requiredExperience = 3;\n    bool certificationRequired = true;\n\n    return (applicant.age >= requiredAge) &&\n           (applicant.degree == requiredDegree) &&\n           (applicant.yearsOfExperience >= requiredExperience) &&\n           (applicant.hasCertification == certificationRequired);\n}\n\nint main() {\n    Applicant applicant1 = {25, \"Bachelor's\", 4, true};\n    \n    if (checkQualifications(applicant1)) {\n        std::cout << \"Applicant meets all the qualifications.\" << std::endl;\n    } else {\n        std::cout << \"Applicant does not meet all the qualifications.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a feature to see if a vehicle's speed exceeds the speed limit.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    double vehicleSpeed;\n    double speedLimit;\n\n    std::cout << \"Enter vehicle speed: \";\n    std::cin >> vehicleSpeed;\n    std::cout << \"Enter speed limit: \";\n    std::cin >> speedLimit;\n\n    if (vehicleSpeed > speedLimit) {\n        std::cout << \"The vehicle's speed exceeds the speed limit.\" << std::endl;\n    } else {\n        std::cout << \"The vehicle's speed does not exceed the speed limit.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a system that determines whether a given point is above or below the x-axis.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    double y;\n    std::cout << \"Enter the y-coordinate of the point: \";\n    std::cin >> y;\n\n    if (y > 0) {\n        std::cout << \"The point is above the x-axis.\" << std::endl;\n    } else if (y < 0) {\n        std::cout << \"The point is below the x-axis.\" << std::endl;\n    } else {\n        std::cout << \"The point is on the x-axis.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a function that checks if a given word appears in a sentence.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nbool wordInSentence(const std::string& word, const std::string& sentence) {\n    return sentence.find(word) != std::string::npos;\n}\n\nint main() {\n    std::string sentence = \"The quick brown fox jumps over the lazy dog\";\n    std::string word = \"fox\";\n    \n    if (wordInSentence(word, sentence)) {\n        std::cout << \"The word '\" << word << \"' is in the sentence.\" << std::endl;\n    } else {\n        std::cout << \"The word '\" << word << \"' is not in the sentence.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a program that identifies whether a given number is negative or positive.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    int number;\n    std::cout << \"Enter a number: \";\n    std::cin >> number;\n\n    if (number > 0) {\n        std::cout << \"The number is positive.\" << std::endl;\n    } else if (number < 0) {\n        std::cout << \"The number is negative.\" << std::endl;\n    } else {\n        std::cout << \"The number is zero.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a script to see if the sum of two numbers is greater than 100.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    int num1, num2;\n    std::cout << \"Enter two numbers: \";\n    std::cin >> num1 >> num2;\n    \n    if (num1 + num2 > 100) {\n        std::cout << \"The sum is greater than 100.\" << std::endl;\n    } else {\n        std::cout << \"The sum is not greater than 100.\" << std::endl;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Build a utility that checks if a file exists in a specified directory.",
    "code": "```cpp\n#include <iostream>\n#include <filesystem>\n\nbool fileExists(const std::string& directory, const std::string& filename) {\n    std::filesystem::path filePath = std::filesystem::path(directory) / filename;\n    return std::filesystem::exists(filePath);\n}\n\nint main() {\n    std::string directory = \"/path/to/directory\";\n    std::string filename = \"file.txt\";\n\n    if (fileExists(directory, filename)) {\n        std::cout << \"File exists.\\n\";\n    } else {\n        std::cout << \"File does not exist.\\n\";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a system to compare the weights of two different objects.",
    "code": "```cpp\n#include <iostream>\n\nclass Object {\npublic:\n    explicit Object(double weight) : weight(weight) {}\n\n    double getWeight() const {\n        return weight;\n    }\n\nprivate:\n    double weight;\n};\n\nint main() {\n    Object object1(10.5);\n    Object object2(15.3);\n\n    if (object1.getWeight() > object2.getWeight()) {\n        std::cout << \"Object 1 is heavier than Object 2.\" << std::endl;\n    } else if (object1.getWeight() < object2.getWeight()) {\n        std::cout << \"Object 2 is heavier than Object 1.\" << std::endl;\n    } else {\n        std::cout << \"Both objects have the same weight.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a logic to determine if a number falls within a defined range.",
    "code": "```cpp\n#include <iostream>\n\nbool isWithinRange(int number, int lowerBound, int upperBound) {\n    return number >= lowerBound && number <= upperBound;\n}\n\nint main() {\n    int number = 15;\n    int lowerBound = 10;\n    int upperBound = 20;\n\n    if (isWithinRange(number, lowerBound, upperBound)) {\n        std::cout << \"The number is within the range.\" << std::endl;\n    } else {\n        std::cout << \"The number is outside the range.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a program that checks if an employee worked overtime based on hours worked.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    int hoursWorked;\n    std::cout << \"Enter hours worked: \";\n    std::cin >> hoursWorked;\n\n    if (hoursWorked > 40) {\n        std::cout << \"The employee worked overtime.\" << std::endl;\n    } else {\n        std::cout << \"The employee did not work overtime.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function to compare two dates and determine which is earlier.",
    "code": "```cpp\n#include <iostream>\n\nstruct Date {\n    int day;\n    int month;\n    int year;\n};\n\nenum ComparisonResult {\n    EARLIER,\n    LATER,\n    EQUAL\n};\n\nComparisonResult compareDates(const Date& date1, const Date& date2) {\n    if (date1.year < date2.year) {\n        return EARLIER;\n    } else if (date1.year > date2.year) {\n        return LATER;\n    } else {\n        if (date1.month < date2.month) {\n            return EARLIER;\n        } else if (date1.month > date2.month) {\n            return LATER;\n        } else {\n            if (date1.day < date2.day) {\n                return EARLIER;\n            } else if (date1.day > date2.day) {\n                return LATER;\n            } else {\n                return EQUAL;\n            }\n        }\n    }\n}\n\nint main() {\n    Date date1 = {15, 5, 2022};\n    Date date2 = {16, 5, 2022};\n    \n    ComparisonResult result = compareDates(date1, date2);\n    \n    if (result == EARLIER) {\n        std::cout << \"Date1 is earlier than Date2.\" << std::endl;\n    } else if (result == LATER) {\n        std::cout << \"Date1 is later than Date2.\" << std::endl;\n    } else {\n        std::cout << \"Date1 is equal to Date2.\" << std::endl;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Create a script that verifies if a given word starts with a vowel.",
    "code": "```cpp\n#include <iostream>\n#include <cctype>\n\nbool startsWithVowel(const std::string& word) {\n    if (word.empty()) return false;\n    char firstChar = std::tolower(word[0]);\n    return firstChar == 'a' || firstChar == 'e' || firstChar == 'i' || firstChar == 'o' || firstChar == 'u';\n}\n\nint main() {\n    std::string word;\n    std::cout << \"Enter a word: \";\n    std::cin >> word;\n    \n    if (startsWithVowel(word)) {\n        std::cout << \"The word starts with a vowel.\" << std::endl;\n    } else {\n        std::cout << \"The word does not start with a vowel.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Build a utility that checks if a number is even or odd.",
    "code": "```cpp\n#include <iostream>\n\nbool isEven(int number) {\n    return number % 2 == 0;\n}\n\nint main() {\n    int number;\n    std::cout << \"Enter a number: \";\n    std::cin >> number;\n    \n    if (isEven(number)) {\n        std::cout << number << \" is even.\" << std::endl;\n    } else {\n        std::cout << number << \" is odd.\" << std::endl;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Implement a system that determines if a string contains only numeric characters.",
    "code": "```cpp\n#include <iostream>\n#include <cctype>\n\nbool isNumeric(const std::string& str) {\n    for (char c : str) {\n        if (!std::isdigit(c)) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint main() {\n    std::string input;\n    std::cout << \"Enter a string: \";\n    std::cin >> input;\n\n    if (isNumeric(input)) {\n        std::cout << \"The string contains only numeric characters.\" << std::endl;\n    } else {\n        std::cout << \"The string contains non-numeric characters.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function to see if a given character is a vowel or consonant.",
    "code": "```cpp\n#include <iostream>\n\nbool isVowel(char c) {\n    c = tolower(c);\n    return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';\n}\n\nstd::string vowelOrConsonant(char c) {\n    if (!isalpha(c)) {\n        return \"Invalid input\";\n    }\n    return isVowel(c) ? \"Vowel\" : \"Consonant\";\n}\n\nint main() {\n    char c;\n    std::cout << \"Enter a character: \";\n    std::cin >> c;\n    std::cout << vowelOrConsonant(c) << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Create a program that checks if a point lies within a specified rectangle.",
    "code": "```cpp\n#include <iostream>\n\nstruct Point {\n    double x, y;\n};\n\nstruct Rectangle {\n    Point topLeft;\n    double width, height;\n};\n\nbool isPointInsideRectangle(const Point& p, const Rectangle& rect) {\n    double rectRight = rect.topLeft.x + rect.width;\n    double rectBottom = rect.topLeft.y - rect.height;\n    \n    return (p.x >= rect.topLeft.x && p.x <= rectRight &&\n            p.y <= rect.topLeft.y && p.y >= rectBottom);\n}\n\nint main() {\n    Point p = {5.0, 5.0};\n    Rectangle rect = {{2.0, 8.0}, 5.0, 5.0};\n\n    if (isPointInsideRectangle(p, rect)) {\n        std::cout << \"The point is inside the rectangle.\" << std::endl;\n    } else {\n        std::cout << \"The point is outside the rectangle.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a feature to compare two lists and return the common elements.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nstd::vector<int> findCommonElements(const std::vector<int>& list1, const std::vector<int>& list2) {\n    std::vector<int> commonElements;\n    for (int element : list1) {\n        if (std::find(list2.begin(), list2.end(), element) != list2.end()) {\n            if (std::find(commonElements.begin(), commonElements.end(), element) == commonElements.end()) {\n                commonElements.push_back(element);\n            }\n        }\n    }\n    return commonElements;\n}\n\nint main() {\n    std::vector<int> list1 = {1, 2, 3, 4, 5};\n    std::vector<int> list2 = {3, 4, 5, 6, 7};\n    std::vector<int> common = findCommonElements(list1, list2);\n\n    std::cout << \"Common elements: \";\n    for (int element : common) {\n        std::cout << element << \" \";\n    }\n    std::cout << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a function that determines if a text contains any uppercase letters.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nbool containsUppercase(const std::string& text) {\n    for (char c : text) {\n        if (c >= 'A' && c <= 'Z') {\n            return true;\n        }\n    }\n    return false;\n}\n\nint main() {\n    std::string testString = \"Hello World\";\n    if (containsUppercase(testString)) {\n        std::cout << \"The text contains uppercase letters.\" << std::endl;\n    } else {\n        std::cout << \"The text does not contain uppercase letters.\" << std::endl;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a script to check if a given sentence is a question.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nbool isQuestion(const std::string& sentence) {\n    return !sentence.empty() && sentence.back() == '?';\n}\n\nint main() {\n    std::string sentence;\n    std::cout << \"Enter a sentence: \";\n    std::getline(std::cin, sentence);\n\n    if (isQuestion(sentence)) {\n        std::cout << \"The sentence is a question.\" << std::endl;\n    } else {\n        std::cout << \"The sentence is not a question.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program to determine if a temperature is measured in Celsius or Fahrenheit.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nint main() {\n    std::string input;\n    std::cout << \"Enter the temperature followed by C or F (e.g., 30C or 86F): \";\n    std::cin >> input;\n    \n    if (!input.empty() && (input.back() == 'C' || input.back() == 'F')) {\n        if (input.back() == 'C') {\n            std::cout << \"The temperature is measured in Celsius.\" << std::endl;\n        } else {\n            std::cout << \"The temperature is measured in Fahrenheit.\" << std::endl;\n        }\n    } else {\n        std::cout << \"Invalid input.\" << std::endl;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Create a system that verifies if a student is enrolled in a particular course.",
    "code": "```cpp\n#include <iostream>\n#include <unordered_map>\n#include <vector>\n#include <string>\n\nbool isStudentEnrolled(const std::unordered_map<std::string, std::vector<std::string>>& enrollmentData, const std::string& student, const std::string& course) {\n    auto it = enrollmentData.find(student);\n    if (it != enrollmentData.end()) {\n        for (const auto& enrolledCourse : it->second) {\n            if (enrolledCourse == course) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nint main() {\n    std::unordered_map<std::string, std::vector<std::string>> enrollmentData = {\n        {\"Alice\", {\"Math\", \"Science\"}},\n        {\"Bob\", {\"History\", \"Art\"}},\n        {\"Charlie\", {\"Math\", \"History\"}}\n    };\n\n    std::string student = \"Alice\";\n    std::string course = \"Science\";\n\n    if (isStudentEnrolled(enrollmentData, student, course)) {\n        std::cout << student << \" is enrolled in \" << course << \".\" << std::endl;\n    } else {\n        std::cout << student << \" is not enrolled in \" << course << \".\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Build a utility to check if a given string is a valid hexadecimal number.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nbool isValidHexadecimal(const std::string& str) {\n    if (str.empty()) return false;\n    for (char ch : str) {\n        if (!((ch >= '0' && ch <= '9') || \n              (ch >= 'a' && ch <= 'f') || \n              (ch >= 'A' && ch <= 'F'))) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint main() {\n    std::string input;\n    std::cout << \"Enter a string: \";\n    std::cin >> input;\n\n    if (isValidHexadecimal(input)) {\n        std::cout << \"The string is a valid hexadecimal number.\\n\";\n    } else {\n        std::cout << \"The string is not a valid hexadecimal number.\\n\";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function to see if two circles intersect based on their radii and center points.",
    "code": "```cpp\n#include <cmath>\n\nstruct Point {\n    double x, y;\n};\n\nbool doCirclesIntersect(Point center1, double radius1, Point center2, double radius2) {\n    double dx = center2.x - center1.x;\n    double dy = center2.y - center1.y;\n    double distanceSquared = dx * dx + dy * dy;\n    double radiusSum = radius1 + radius2;\n    return distanceSquared <= radiusSum * radiusSum;\n}\n```"
  },
  {
    "task": "Develop a program that checks if a given number is within 10% of another number.",
    "code": "```cpp\n#include <iostream>\n#include <cmath>\n\nbool isWithinTenPercent(double num1, double num2) {\n    double lowerBound = num1 * 0.9;\n    double upperBound = num1 * 1.1;\n    return num2 >= lowerBound && num2 <= upperBound;\n}\n\nint main() {\n    double number1, number2;\n    std::cout << \"Enter two numbers: \";\n    std::cin >> number1 >> number2;\n\n    if (isWithinTenPercent(number1, number2)) {\n        std::cout << number2 << \" is within 10% of \" << number1 << std::endl;\n    } else {\n        std::cout << number2 << \" is not within 10% of \" << number1 << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a feature to determine if a character is alphanumeric.",
    "code": "```cpp\n#include <iostream>\n#include <cctype>\n\nbool isAlphanumeric(char c) {\n    return std::isalnum(c);\n}\n\nint main() {\n    char ch;\n    std::cout << \"Enter a character: \";\n    std::cin >> ch;\n    \n    if (isAlphanumeric(ch)) {\n        std::cout << ch << \" is alphanumeric.\" << std::endl;\n    } else {\n        std::cout << ch << \" is not alphanumeric.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a system to compare the profit margins of two products.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    double product1Revenue, product1Cost, product2Revenue, product2Cost;\n    \n    std::cout << \"Enter revenue and cost for product 1: \";\n    std::cin >> product1Revenue >> product1Cost;\n    \n    std::cout << \"Enter revenue and cost for product 2: \";\n    std::cin >> product2Revenue >> product2Cost;\n    \n    double product1ProfitMargin = (product1Revenue - product1Cost) / product1Revenue;\n    double product2ProfitMargin = (product2Revenue - product2Cost) / product2Revenue;\n    \n    if (product1ProfitMargin > product2ProfitMargin) {\n        std::cout << \"Product 1 has a higher profit margin.\\n\";\n    } else if (product1ProfitMargin < product2ProfitMargin) {\n        std::cout << \"Product 2 has a higher profit margin.\\n\";\n    } else {\n        std::cout << \"Both products have the same profit margin.\\n\";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a script to check if a given string contains any special characters.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n#include <cctype>\n\nbool containsSpecialCharacters(const std::string& str) {\n    for (char ch : str) {\n        if (!std::isalnum(ch)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nint main() {\n    std::string input;\n    std::cout << \"Enter a string: \";\n    std::getline(std::cin, input);\n\n    if (containsSpecialCharacters(input)) {\n        std::cout << \"The string contains special characters.\" << std::endl;\n    } else {\n        std::cout << \"The string does not contain any special characters.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function to verify if a number is a multiple of another number.",
    "code": "```cpp\n#include <iostream>\n\nbool isMultiple(int a, int b) {\n    return b != 0 && a % b == 0;\n}\n\nint main() {\n    int num1 = 10;\n    int num2 = 5;\n    \n    if (isMultiple(num1, num2)) {\n        std::cout << num1 << \" is a multiple of \" << num2 << std::endl;\n    } else {\n        std::cout << num1 << \" is not a multiple of \" << num2 << std::endl;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Create a program that checks if a date is a holiday based on a list of holidays.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n\nbool isHoliday(const std::string& date, const std::vector<std::string>& holidays) {\n    for (const auto& holiday : holidays) {\n        if (date == holiday) {\n            return true;\n        }\n    }\n    return false;\n}\n\nint main() {\n    std::vector<std::string> holidays = {\n        \"2023-01-01\", // New Year's Day\n        \"2023-12-25\", // Christmas\n        // Add more holidays as needed\n    };\n\n    std::string dateToCheck;\n    std::cout << \"Enter a date (YYYY-MM-DD): \";\n    std::cin >> dateToCheck;\n\n    if (isHoliday(dateToCheck, holidays)) {\n        std::cout << dateToCheck << \" is a holiday.\" << std::endl;\n    } else {\n        std::cout << dateToCheck << \" is not a holiday.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Build a utility to compare two text files and highlight the differences.",
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid compareFiles(const std::string& file1, const std::string& file2) {\n    std::ifstream inFile1(file1);\n    std::ifstream inFile2(file2);\n\n    if (!inFile1.is_open() || !inFile2.is_open()) {\n        std::cerr << \"Unable to open one of the files.\" << std::endl;\n        return;\n    }\n\n    std::string line1, line2;\n    int lineNumber = 1;\n    bool differencesFound = false;\n\n    while (std::getline(inFile1, line1) && std::getline(inFile2, line2)) {\n        if (line1 != line2) {\n            std::cout << \"Difference at line \" << lineNumber << \":\\n\";\n            std::cout << \"File1: \" << line1 << \"\\n\";\n            std::cout << \"File2: \" << line2 << \"\\n\";\n            differencesFound = true;\n        }\n        lineNumber++;\n    }\n\n    // Check for extra lines in either file\n    while (std::getline(inFile1, line1)) {\n        std::cout << \"Extra line in File1 at line \" << lineNumber << \": \" << line1 << \"\\n\";\n        differencesFound = true;\n        lineNumber++;\n    }\n\n    while (std::getline(inFile2, line2)) {\n        std::cout << \"Extra line in File2 at line \" << lineNumber << \": \" << line2 << \"\\n\";\n        differencesFound = true;\n        lineNumber++;\n    }\n\n    if (!differencesFound) {\n        std::cout << \"The files are identical.\" << std::endl;\n    }\n\n    inFile1.close();\n    inFile2.close();\n}\n\nint main() {\n    std::string file1 = \"file1.txt\";\n    std::string file2 = \"file2.txt\";\n\n    compareFiles(file1, file2);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a function to determine if a given password is strong based on length and character diversity.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n#include <cctype>\n\nbool isStrongPassword(const std::string& password) {\n    if (password.length() < 8) return false;\n\n    bool hasLower = false;\n    bool hasUpper = false;\n    bool hasDigit = false;\n    bool hasSpecial = false;\n\n    for (char ch : password) {\n        if (std::islower(ch)) hasLower = true;\n        else if (std::isupper(ch)) hasUpper = true;\n        else if (std::isdigit(ch)) hasDigit = true;\n        else hasSpecial = true;\n        \n        if (hasLower && hasUpper && hasDigit && hasSpecial) return true;\n    }\n    \n    return false;\n}\n\nint main() {\n    std::string password;\n    std::cout << \"Enter password: \";\n    std::cin >> password;\n\n    if (isStrongPassword(password)) {\n        std::cout << \"The password is strong.\" << std::endl;\n    } else {\n        std::cout << \"The password is weak.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a script to see if a number is within a specified distance from zero.",
    "code": "```cpp\n#include <iostream>\n#include <cmath>\n\nint main() {\n    double number, distance;\n    \n    std::cout << \"Enter a number: \";\n    std::cin >> number;\n    \n    std::cout << \"Enter the distance: \";\n    std::cin >> distance;\n    \n    if (std::fabs(number) <= distance) {\n        std::cout << \"The number is within the specified distance from zero.\" << std::endl;\n    } else {\n        std::cout << \"The number is not within the specified distance from zero.\" << std::endl;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Create a system to check if a book title is available in a library database.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n\nbool isBookAvailable(const std::vector<std::string>& libraryDatabase, const std::string& bookTitle) {\n    for (const auto& title : libraryDatabase) {\n        if (title == bookTitle) {\n            return true;\n        }\n    }\n    return false;\n}\n\nint main() {\n    std::vector<std::string> libraryDatabase = {\"The Great Gatsby\", \"1984\", \"To Kill a Mockingbird\", \"Moby Dick\", \"War and Peace\"};\n    std::string bookTitle;\n\n    std::cout << \"Enter the book title you are looking for: \";\n    std::getline(std::cin, bookTitle);\n\n    if (isBookAvailable(libraryDatabase, bookTitle)) {\n        std::cout << \"The book \\\"\" << bookTitle << \"\\\" is available in the library.\" << std::endl;\n    } else {\n        std::cout << \"The book \\\"\" << bookTitle << \"\\\" is not available in the library.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a feature that determines if a user has administrator privileges.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nbool isAdmin(const std::string& userRole) {\n    return userRole == \"admin\";\n}\n\nint main() {\n    std::string userRole;\n    std::cout << \"Enter user role: \";\n    std::cin >> userRole;\n\n    if (isAdmin(userRole)) {\n        std::cout << \"User has administrator privileges.\" << std::endl;\n    } else {\n        std::cout << \"User does not have administrator privileges.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a function to compare the brightness of two colors.",
    "code": "```cpp\n#include <iostream>\n\nstruct Color {\n    int red;\n    int green;\n    int blue;\n};\n\ndouble calculateBrightness(const Color& color) {\n    return 0.299 * color.red + 0.587 * color.green + 0.114 * color.blue;\n}\n\nstd::string compareBrightness(const Color& color1, const Color& color2) {\n    double brightness1 = calculateBrightness(color1);\n    double brightness2 = calculateBrightness(color2);\n    \n    if (brightness1 > brightness2) {\n        return \"Color 1 is brighter than Color 2.\";\n    } else if (brightness1 < brightness2) {\n        return \"Color 2 is brighter than Color 1.\";\n    } else {\n        return \"Both colors have the same brightness.\";\n    }\n}\n\nint main() {\n    Color color1 = {255, 0, 0};\n    Color color2 = {0, 255, 0};\n    \n    std::cout << compareBrightness(color1, color2) << std::endl;\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Write a program to verify if a number is a valid credit card number using the Luhn algorithm.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nbool isValidCreditCardNumber(const std::string& cardNumber) {\n    int nDigits = cardNumber.length();\n    int sum = 0;\n    bool isSecond = false;\n\n    for (int i = nDigits - 1; i >= 0; i--) {\n        int d = cardNumber[i] - '0';\n\n        if (isSecond) {\n            d *= 2;\n        }\n\n        sum += d / 10;\n        sum += d % 10;\n\n        isSecond = !isSecond;\n    }\n    return (sum % 10 == 0);\n}\n\nint main() {\n    std::string cardNumber;\n    std::cout << \"Enter credit card number: \";\n    std::cin >> cardNumber;\n    \n    if (isValidCreditCardNumber(cardNumber)) {\n        std::cout << \"The credit card number is valid.\" << std::endl;\n    } else {\n        std::cout << \"The credit card number is invalid.\" << std::endl;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Create a script to determine if a given string is a valid IP address.",
    "code": "```cpp\n#include <iostream>\n#include <sstream>\n#include <vector>\n\nbool isValidIpAddress(const std::string& ip) {\n    std::istringstream ss(ip);\n    std::string segment;\n    std::vector<std::string> segments;\n    \n    // Split the string by '.' and store each segment\n    while (std::getline(ss, segment, '.')) {\n        segments.push_back(segment);\n    }\n    \n    // IP address must have exactly 4 segments\n    if (segments.size() != 4) {\n        return false;\n    }\n    \n    for (const std::string& seg : segments) {\n        // Each segment must be a number between 0 and 255\n        if (seg.empty() || seg.size() > 3) {\n            return false;\n        }\n\n        for (char ch : seg) {\n            if (!std::isdigit(ch)) {\n                return false;\n            }\n        }\n        \n        int num = std::stoi(seg);\n        if (num < 0 || num > 255) {\n            return false;\n        }\n\n        // Leading zeroes are not allowed unless the number is zero\n        if (seg.size() > 1 && seg[0] == '0') {\n            return false;\n        }\n    }\n    \n    return true;\n}\n\nint main() {\n    std::string ip;\n    std::cout << \"Enter an IP address: \";\n    std::cin >> ip;\n\n    if (isValidIpAddress(ip)) {\n        std::cout << ip << \" is a valid IP address.\\n\";\n    } else {\n        std::cout << ip << \" is not a valid IP address.\\n\";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Build a utility that checks if a number is part of an arithmetic sequence.",
    "code": "```cpp\n#include <iostream>\n\nbool isPartOfArithmeticSequence(int number, int first_term, int common_difference) {\n    if (common_difference == 0) {\n        return number == first_term;\n    }\n    int n = (number - first_term) / common_difference;\n    return (number == first_term + n * common_difference) && (n >= 0);\n}\n\nint main() {\n    int number = 15;\n    int first_term = 5;\n    int common_difference = 5;\n\n    if (isPartOfArithmeticSequence(number, first_term, common_difference)) {\n        std::cout << number << \" is part of the arithmetic sequence.\\n\";\n    } else {\n        std::cout << number << \" is not part of the arithmetic sequence.\\n\";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a feature to compare the efficiency of two algorithms based on time complexity.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nstd::string compareTimeComplexity(const std::string& algorithm1, const std::string& algorithm2) {\n    if (algorithm1 == algorithm2) {\n        return \"Both algorithms have the same time complexity.\";\n    } else if (algorithm1 == \"O(1)\" || (algorithm1 == \"O(log n)\" && algorithm2 != \"O(1)\") || \n               (algorithm1 == \"O(n)\" && algorithm2 != \"O(1)\" && algorithm2 != \"O(log n)\") ||\n               (algorithm1 == \"O(n log n)\" && (algorithm2 == \"O(n^2)\" || algorithm2 == \"O(n^3)\")) ||\n               (algorithm1 == \"O(n^2)\" && algorithm2 == \"O(n^3)\")) {\n        return \"Algorithm 1 is more efficient.\";\n    } else {\n        return \"Algorithm 2 is more efficient.\";\n    }\n}\n\nint main() {\n    std::string algorithm1, algorithm2;\n    \n    std::cout << \"Enter time complexity of algorithm 1: \";\n    std::cin >> algorithm1;\n    std::cout << \"Enter time complexity of algorithm 2: \";\n    std::cin >> algorithm2;\n    \n    std::cout << compareTimeComplexity(algorithm1, algorithm2) << std::endl;\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Write a function to see if a given date falls in a leap year.",
    "code": "```cpp\n#include <iostream>\n\nbool isLeapYear(int year) {\n    if (year % 4 == 0) {\n        if (year % 100 == 0) {\n            return year % 400 == 0;\n        }\n        return true;\n    }\n    return false;\n}\n\nbool isDateInLeapYear(int day, int month, int year) {\n    return isLeapYear(year);\n}\n\nint main() {\n    int day = 29, month = 2, year = 2024;\n    if (isDateInLeapYear(day, month, year)) {\n        std::cout << \"The date falls in a leap year.\" << std::endl;\n    } else {\n        std::cout << \"The date does not fall in a leap year.\" << std::endl;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Create a program that determines if a user's subscription is active based on the current date.",
    "code": "```cpp\n#include <iostream>\n#include <ctime>\n#include <string>\n\nbool isSubscriptionActive(const std::string& expirationDateStr) {\n    std::tm expirationDate = {};\n    std::istringstream ss(expirationDateStr);\n    ss >> std::get_time(&expirationDate, \"%Y-%m-%d\");\n    \n    std::time_t currentTime = std::time(nullptr);\n    std::tm* currentDate = std::localtime(&currentTime);\n\n    return std::mktime(&expirationDate) >= std::mktime(currentDate);\n}\n\nint main() {\n    std::string expirationDate;\n    std::cout << \"Enter subscription expiration date (YYYY-MM-DD): \";\n    std::cin >> expirationDate;\n\n    if (isSubscriptionActive(expirationDate)) {\n        std::cout << \"Subscription is active.\" << std::endl;\n    } else {\n        std::cout << \"Subscription has expired.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a tool to check if a user\u2019s input is a palindrome phrase, ignoring spaces and punctuation.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n#include <cctype>\n\nbool isPalindrome(const std::string& str) {\n    std::string cleaned;\n    for (char c : str) {\n        if (std::isalnum(c)) {\n            cleaned += std::tolower(c);\n        }\n    }\n    int left = 0, right = cleaned.size() - 1;\n    while (left < right) {\n        if (cleaned[left] != cleaned[right]) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    return true;\n}\n\nint main() {\n    std::string input;\n    std::cout << \"Enter a phrase: \";\n    std::getline(std::cin, input);\n    \n    if (isPalindrome(input)) {\n        std::cout << \"The input is a palindrome.\" << std::endl;\n    } else {\n        std::cout << \"The input is not a palindrome.\" << std::endl;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Implement a system to verify if a given number is part of the Fibonacci sequence.",
    "code": "```cpp\n#include <iostream>\n\nbool isFibonacci(int n) {\n    if (n < 0) return false;\n    int a = 0, b = 1;\n    while (b < n) {\n        int temp = b;\n        b = a + b;\n        a = temp;\n    }\n    return b == n || a == n;\n}\n\nint main() {\n    int number;\n    std::cout << \"Enter a number: \";\n    std::cin >> number;\n    if (isFibonacci(number)) {\n        std::cout << number << \" is a Fibonacci number.\\n\";\n    } else {\n        std::cout << number << \" is not a Fibonacci number.\\n\";\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program to compare the elevation of two geographic locations.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    double elevation1, elevation2;\n    \n    std::cout << \"Enter the elevation of the first location: \";\n    std::cin >> elevation1;\n    \n    std::cout << \"Enter the elevation of the second location: \";\n    std::cin >> elevation2;\n    \n    if (elevation1 > elevation2) {\n        std::cout << \"The first location is higher than the second location.\" << std::endl;\n    } else if (elevation1 < elevation2) {\n        std::cout << \"The second location is higher than the first location.\" << std::endl;\n    } else {\n        std::cout << \"Both locations are at the same elevation.\" << std::endl;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Create a function to determine if a given string is a valid JSON format.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n#include <stack>\n\nbool isValidJSON(const std::string& str) {\n    std::stack<char> brackets;\n    bool inQuotes = false;\n\n    for (size_t i = 0; i < str.size(); ++i) {\n        char c = str[i];\n\n        if (c == '\\\"') {\n            inQuotes = !inQuotes;\n        }\n\n        if (!inQuotes) {\n            if (c == '{' || c == '[') {\n                brackets.push(c);\n            } else if (c == '}' || c == ']') {\n                if (brackets.empty()) {\n                    return false;\n                }\n                char openBracket = brackets.top();\n                brackets.pop();\n                if ((c == '}' && openBracket != '{') || (c == ']' && openBracket != '[')) {\n                    return false;\n                }\n            }\n        }\n    }\n    \n    return brackets.empty() && !inQuotes;\n}\n\nint main() {\n    std::string jsonStr = \"{\\\"key\\\": [\\\"value1\\\", \\\"value2\\\"]}\";\n    if (isValidJSON(jsonStr)) {\n        std::cout << \"Valid JSON\" << std::endl;\n    } else {\n        std::cout << \"Invalid JSON\" << std::endl;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Build a utility that checks if a number is a factorial of any integer.",
    "code": "```cpp\n#include <iostream>\n\nbool isFactorial(int num) {\n    if (num < 0) return false;\n    int fact = 1;\n    for (int i = 1; fact <= num; ++i) {\n        if (fact == num) return true;\n        fact *= i;\n    }\n    return false;\n}\n\nint main() {\n    int number;\n    std::cout << \"Enter a number: \";\n    std::cin >> number;\n    \n    if (isFactorial(number)) {\n        std::cout << number << \" is a factorial of an integer.\\n\";\n    } else {\n        std::cout << number << \" is not a factorial of any integer.\\n\";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a feature to compare the widths of two ribbons and return the wider one.",
    "code": "```cpp\n#include <iostream>\n\ndouble widerRibbon(double width1, double width2) {\n    return (width1 > width2) ? width1 : width2;\n}\n\nint main() {\n    double ribbon1 = 5.0;\n    double ribbon2 = 3.5;\n    \n    std::cout << \"The wider ribbon has a width of: \" << widerRibbon(ribbon1, ribbon2) << std::endl;\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Write a script to see if a word is present in a list of banned words.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n\nbool isBanned(const std::string& word, const std::vector<std::string>& bannedWords) {\n    for (const auto& bannedWord : bannedWords) {\n        if (word == bannedWord) {\n            return true;\n        }\n    }\n    return false;\n}\n\nint main() {\n    std::vector<std::string> bannedWords = {\"example\", \"banned\", \"prohibited\"};\n    std::string wordToCheck = \"example\";\n\n    if (isBanned(wordToCheck, bannedWords)) {\n        std::cout << \"The word is banned.\" << std::endl;\n    } else {\n        std::cout << \"The word is not banned.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a system to determine if a patient's temperature is in the normal range.",
    "code": "```cpp\n#include <iostream>\n\nbool isTemperatureNormal(double temperature) {\n    const double lowerBound = 36.1;\n    const double upperBound = 37.2;\n    return temperature >= lowerBound && temperature <= upperBound;\n}\n\nint main() {\n    double patientTemperature;\n    std::cout << \"Enter patient's temperature: \";\n    std::cin >> patientTemperature;\n\n    if (isTemperatureNormal(patientTemperature)) {\n        std::cout << \"The patient's temperature is normal.\" << std::endl;\n    } else {\n        std::cout << \"The patient's temperature is not normal.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a program that checks if a given time is during business hours.",
    "code": "```cpp\n#include <iostream>\n\nbool isDuringBusinessHours(int hour) {\n    // Assuming business hours are from 9 AM to 5 PM\n    return hour >= 9 && hour < 17;\n}\n\nint main() {\n    int hour;\n    std::cout << \"Enter the hour (0-23): \";\n    std::cin >> hour;\n\n    if (hour < 0 || hour > 23) {\n        std::cout << \"Invalid hour. Please enter a value between 0 and 23.\" << std::endl;\n    } else {\n        if (isDuringBusinessHours(hour)) {\n            std::cout << \"The time is during business hours.\" << std::endl;\n        } else {\n            std::cout << \"The time is outside business hours.\" << std::endl;\n        }\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function to see if a number is a triangular number.",
    "code": "```cpp\n#include <iostream>\n#include <cmath>\n\nbool isTriangularNumber(int num) {\n    if (num < 0) return false;\n    int n = static_cast<int>(sqrt(2 * num));\n    return (n * (n + 1)) / 2 == num;\n}\n\nint main() {\n    int num = 10; // Example number\n    if (isTriangularNumber(num)) {\n        std::cout << num << \" is a triangular number.\" << std::endl;\n    } else {\n        std::cout << num << \" is not a triangular number.\" << std::endl;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Write a feature to compare the number of vowels in two given strings.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n#include <cctype>\n\nint countVowels(const std::string& str) {\n    int count = 0;\n    for (char ch : str) {\n        ch = std::tolower(ch);\n        if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') {\n            ++count;\n        }\n    }\n    return count;\n}\n\nint main() {\n    std::string str1, str2;\n    std::cout << \"Enter first string: \";\n    std::getline(std::cin, str1);\n    std::cout << \"Enter second string: \";\n    std::getline(std::cin, str2);\n\n    int vowels1 = countVowels(str1);\n    int vowels2 = countVowels(str2);\n\n    if (vowels1 > vowels2) {\n        std::cout << \"The first string has more vowels.\\n\";\n    } else if (vowels1 < vowels2) {\n        std::cout << \"The second string has more vowels.\\n\";\n    } else {\n        std::cout << \"Both strings have the same number of vowels.\\n\";\n    }\n\n    return 0;\n}\n```"
  }
]