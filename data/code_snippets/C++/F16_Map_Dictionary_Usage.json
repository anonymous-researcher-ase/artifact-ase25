[
  {
    "task": "Create a map to store student names as keys and their grades as values, then calculate the average grade.",
    "code": "```cpp\n#include <iostream>\n#include <map>\n#include <string>\n\nint main() {\n    std::map<std::string, double> studentGrades;\n    studentGrades[\"Alice\"] = 85.5;\n    studentGrades[\"Bob\"] = 90.0;\n    studentGrades[\"Charlie\"] = 78.5;\n    studentGrades[\"Diana\"] = 92.0;\n\n    double total = 0.0;\n    for (const auto& pair : studentGrades) {\n        total += pair.second;\n    }\n\n    double average = total / studentGrades.size();\n    std::cout << \"Average grade: \" << average << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a function that takes a dictionary of product names and prices, and returns the total cost of all products.",
    "code": "```cpp\n#include <iostream>\n#include <map>\n#include <string>\n\ndouble totalCost(const std::map<std::string, double>& products) {\n    double total = 0.0;\n    for (const auto& product : products) {\n        total += product.second;\n    }\n    return total;\n}\n\nint main() {\n    std::map<std::string, double> products = {\n        {\"ProductA\", 29.99},\n        {\"ProductB\", 49.99},\n        {\"ProductC\", 19.99}\n    };\n\n    double total = totalCost(products);\n    std::cout << \"Total cost: $\" << total << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a program that counts the frequency of each word in a given text using a dictionary.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n#include <map>\n#include <sstream>\n\nint main() {\n    std::string text = \"example text with some example words and some repeated words\";\n    std::map<std::string, int> wordCount;\n    std::istringstream stream(text);\n    std::string word;\n    \n    while (stream >> word) {\n        ++wordCount[word];\n    }\n    \n    for (const auto &pair : wordCount) {\n        std::cout << pair.first << \": \" << pair.second << std::endl;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that takes a dictionary of employee IDs and their work hours, and returns the ID of the employee with the most hours.",
    "code": "```cpp\n#include <iostream>\n#include <unordered_map>\n#include <string>\n\nstd::string findEmployeeWithMostHours(const std::unordered_map<std::string, int>& employeeHours) {\n    std::string maxEmployeeId;\n    int maxHours = 0;\n    \n    for (const auto& entry : employeeHours) {\n        if (entry.second > maxHours) {\n            maxEmployeeId = entry.first;\n            maxHours = entry.second;\n        }\n    }\n    \n    return maxEmployeeId;\n}\n\nint main() {\n    std::unordered_map<std::string, int> employeeHours = {\n        {\"emp1\", 40},\n        {\"emp2\", 35},\n        {\"emp3\", 50},\n        {\"emp4\", 45}\n    };\n    \n    std::string maxEmployeeId = findEmployeeWithMostHours(employeeHours);\n    std::cout << \"Employee with most hours: \" << maxEmployeeId << std::endl;\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Design a system that uses a map to store users' login attempts and timestamps, then locks the account after three failed attempts.",
    "code": "```cpp\n#include <iostream>\n#include <map>\n#include <vector>\n#include <ctime>\n\nclass LoginSystem {\nprivate:\n    struct LoginInfo {\n        int failedAttempts;\n        std::vector<std::time_t> timestamps;\n    };\n\n    std::map<std::string, LoginInfo> userLoginData;\n\npublic:\n    void recordLoginAttempt(const std::string& username, bool success) {\n        std::time_t now = std::time(nullptr);\n        if (userLoginData.find(username) == userLoginData.end()) {\n            userLoginData[username] = {0, {}};\n        }\n\n        if (!success) {\n            userLoginData[username].failedAttempts++;\n            userLoginData[username].timestamps.push_back(now);\n            if (userLoginData[username].failedAttempts >= 3) {\n                lockAccount(username);\n            }\n        } else {\n            userLoginData[username].failedAttempts = 0;\n            userLoginData[username].timestamps.clear();\n        }\n    }\n\n    bool isAccountLocked(const std::string& username) {\n        return userLoginData[username].failedAttempts >= 3;\n    }\n\n    void lockAccount(const std::string& username) {\n        std::cout << \"Account for user \" << username << \" is now locked due to multiple failed login attempts.\\n\";\n    }\n};\n\nint main() {\n    LoginSystem loginSystem;\n\n    loginSystem.recordLoginAttempt(\"user1\", false);\n    loginSystem.recordLoginAttempt(\"user1\", false);\n    loginSystem.recordLoginAttempt(\"user1\", false); // This should lock the account\n\n    if (loginSystem.isAccountLocked(\"user1\")) {\n        std::cout << \"Account user1 is locked.\\n\";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a dictionary to represent a phonebook, allowing users to add, remove, and look up contacts by name.",
    "code": "```cpp\n#include <iostream>\n#include <unordered_map>\n#include <string>\n\nint main() {\n    std::unordered_map<std::string, std::string> phonebook;\n    int choice;\n    std::string name, number;\n\n    while (true) {\n        std::cout << \"Phonebook Menu:\\n\";\n        std::cout << \"1. Add Contact\\n\";\n        std::cout << \"2. Remove Contact\\n\";\n        std::cout << \"3. Look Up Contact\\n\";\n        std::cout << \"4. Exit\\n\";\n        std::cout << \"Enter your choice: \";\n        std::cin >> choice;\n\n        switch (choice) {\n            case 1:\n                std::cout << \"Enter name: \";\n                std::cin >> name;\n                std::cout << \"Enter number: \";\n                std::cin >> number;\n                phonebook[name] = number;\n                std::cout << \"Contact added.\\n\";\n                break;\n\n            case 2:\n                std::cout << \"Enter name to remove: \";\n                std::cin >> name;\n                if (phonebook.erase(name)) {\n                    std::cout << \"Contact removed.\\n\";\n                } else {\n                    std::cout << \"Contact not found.\\n\";\n                }\n                break;\n\n            case 3:\n                std::cout << \"Enter name to look up: \";\n                std::cin >> name;\n                if (phonebook.find(name) != phonebook.end()) {\n                    std::cout << \"Number: \" << phonebook[name] << \"\\n\";\n                } else {\n                    std::cout << \"Contact not found.\\n\";\n                }\n                break;\n\n            case 4:\n                return 0;\n\n            default:\n                std::cout << \"Invalid choice. Please try again.\\n\";\n        }\n    }\n}\n```"
  },
  {
    "task": "Build a map that associates city names with their population, then find the city with the highest population.",
    "code": "```cpp\n#include <iostream>\n#include <map>\n#include <string>\n\nint main() {\n    std::map<std::string, int> city_population = {\n        {\"New York\", 8419000},\n        {\"Los Angeles\", 3980000},\n        {\"Chicago\", 2716000},\n        {\"Houston\", 2328000},\n        {\"Phoenix\", 1690000}\n    };\n\n    std::string largest_city;\n    int max_population = 0;\n\n    for (const auto& city : city_population) {\n        if (city.second > max_population) {\n            max_population = city.second;\n            largest_city = city.first;\n        }\n    }\n\n    std::cout << \"The city with the highest population is \" << largest_city \n              << \" with a population of \" << max_population << \".\" << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program that translates English words to another language using a provided dictionary, and translates a given sentence.",
    "code": "```cpp\n#include <iostream>\n#include <map>\n#include <sstream>\n#include <string>\n\nint main() {\n    std::map<std::string, std::string> dictionary = {\n        {\"hello\", \"hola\"},\n        {\"world\", \"mundo\"},\n        {\"good\", \"bueno\"},\n        {\"morning\", \"ma\u00f1ana\"}\n    };\n    \n    std::string sentence = \"hello world good morning\";\n    std::istringstream iss(sentence);\n    std::ostringstream oss;\n    std::string word;\n    \n    while (iss >> word) {\n        if (dictionary.find(word) != dictionary.end()) {\n            oss << dictionary[word] << \" \";\n        } else {\n            oss << word << \" \";\n        }\n    }\n    \n    std::cout << oss.str() << std::endl;\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Construct a dictionary to map book titles to their authors, and implement a search function to find all books by a given author.",
    "code": "```cpp\n#include <iostream>\n#include <map>\n#include <vector>\n#include <string>\n\nclass BookLibrary {\nprivate:\n    std::map<std::string, std::string> bookToAuthor;\n\npublic:\n    void addBook(const std::string& title, const std::string& author) {\n        bookToAuthor[title] = author;\n    }\n\n    std::vector<std::string> findBooksByAuthor(const std::string& author) {\n        std::vector<std::string> books;\n        for (const auto& entry : bookToAuthor) {\n            if (entry.second == author) {\n                books.push_back(entry.first);\n            }\n        }\n        return books;\n    }\n};\n\nint main() {\n    BookLibrary library;\n    library.addBook(\"1984\", \"George Orwell\");\n    library.addBook(\"Animal Farm\", \"George Orwell\");\n    library.addBook(\"Brave New World\", \"Aldous Huxley\");\n\n    std::vector<std::string> orwellBooks = library.findBooksByAuthor(\"George Orwell\");\n    for (const std::string& book : orwellBooks) {\n        std::cout << book << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a map to store product IDs and their stock levels, then implement a function to update stock levels after a sale.",
    "code": "```cpp\n#include <iostream>\n#include <map>\n\nclass Inventory {\npublic:\n    void updateStock(int productId, int soldQuantity) {\n        if (stockLevels.find(productId) != stockLevels.end()) {\n            stockLevels[productId] -= soldQuantity;\n        } else {\n            std::cout << \"Product ID not found.\" << std::endl;\n        }\n    }\n\n    void addProduct(int productId, int quantity) {\n        stockLevels[productId] = quantity;\n    }\n\n    void printStock() {\n        for (const auto& pair : stockLevels) {\n            std::cout << \"Product ID: \" << pair.first << \", Stock Level: \" << pair.second << std::endl;\n        }\n    }\n\nprivate:\n    std::map<int, int> stockLevels;\n};\n\nint main() {\n    Inventory inventory;\n    inventory.addProduct(101, 50);\n    inventory.addProduct(102, 75);\n\n    std::cout << \"Initial stock levels:\" << std::endl;\n    inventory.printStock();\n\n    inventory.updateStock(101, 5);\n\n    std::cout << \"Stock levels after sale:\" << std::endl;\n    inventory.printStock();\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a script that uses a dictionary to convert country codes to country names and prints the full name for a given code.",
    "code": "```cpp\n#include <iostream>\n#include <unordered_map>\n#include <string>\n\nint main() {\n    std::unordered_map<std::string, std::string> countryCodes = {\n        {\"US\", \"United States\"},\n        {\"CA\", \"Canada\"},\n        {\"MX\", \"Mexico\"},\n        {\"FR\", \"France\"},\n        {\"DE\", \"Germany\"}\n    };\n\n    std::string code;\n    std::cout << \"Enter country code: \";\n    std::cin >> code;\n\n    auto it = countryCodes.find(code);\n    if (it != countryCodes.end()) {\n        std::cout << \"Country name: \" << it->second << std::endl;\n    } else {\n        std::cout << \"Country code not found.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a program that stores student IDs and names in a dictionary, and allows retrieval of names by ID.",
    "code": "```cpp\n#include <iostream>\n#include <unordered_map>\n#include <string>\n\nint main() {\n    std::unordered_map<int, std::string> studentMap;\n\n    // Adding students to the map\n    studentMap[101] = \"Alice\";\n    studentMap[102] = \"Bob\";\n    studentMap[103] = \"Charlie\";\n\n    // Retrieve a name by ID\n    int id;\n    std::cout << \"Enter student ID: \";\n    std::cin >> id;\n\n    auto it = studentMap.find(id);\n    if (it != studentMap.end()) {\n        std::cout << \"Student Name: \" << it->second << std::endl;\n    } else {\n        std::cout << \"Student ID not found.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a dictionary to store configuration settings for a software application, allowing updates and retrieval of settings.",
    "code": "```cpp\n#include <iostream>\n#include <unordered_map>\n#include <string>\n\nclass Configuration {\npublic:\n    void setSetting(const std::string& key, const std::string& value) {\n        settings[key] = value;\n    }\n\n    std::string getSetting(const std::string& key) const {\n        auto it = settings.find(key);\n        if (it != settings.end()) {\n            return it->second;\n        }\n        return \"Setting not found\";\n    }\n\nprivate:\n    std::unordered_map<std::string, std::string> settings;\n};\n\nint main() {\n    Configuration config;\n    config.setSetting(\"theme\", \"dark\");\n    config.setSetting(\"language\", \"en\");\n\n    std::cout << \"Theme: \" << config.getSetting(\"theme\") << std::endl;\n    std::cout << \"Language: \" << config.getSetting(\"language\") << std::endl;\n    std::cout << \"Font: \" << config.getSetting(\"font\") << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a map that stores words as keys and their definitions as values, and write a function to display all words starting with a given letter.",
    "code": "```cpp\n#include <iostream>\n#include <map>\n#include <string>\n\nvoid displayWordsWithLetter(const std::map<std::string, std::string>& dictionary, char letter) {\n    for (const auto& pair : dictionary) {\n        if (!pair.first.empty() && pair.first[0] == letter) {\n            std::cout << pair.first << \": \" << pair.second << std::endl;\n        }\n    }\n}\n\nint main() {\n    std::map<std::string, std::string> dictionary;\n    dictionary[\"apple\"] = \"A fruit that is red, green, or yellow.\";\n    dictionary[\"banana\"] = \"A long, yellow fruit.\";\n    dictionary[\"cherry\"] = \"A small, round, red fruit.\";\n    dictionary[\"apricot\"] = \"A small, orange fruit.\";\n    \n    char letter = 'a';\n    displayWordsWithLetter(dictionary, letter);\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Write a program that uses a dictionary to store usernames and passwords, and verifies login attempts.",
    "code": "```cpp\n#include <iostream>\n#include <unordered_map>\n#include <string>\n\nint main() {\n    std::unordered_map<std::string, std::string> users;\n    users[\"alice\"] = \"password123\";\n    users[\"bob\"] = \"qwerty\";\n    users[\"charlie\"] = \"letmein\";\n\n    std::string username, password;\n    std::cout << \"Enter username: \";\n    std::cin >> username;\n    std::cout << \"Enter password: \";\n    std::cin >> password;\n\n    auto it = users.find(username);\n    if (it != users.end() && it->second == password) {\n        std::cout << \"Login successful!\" << std::endl;\n    } else {\n        std::cout << \"Invalid username or password.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a map to track the number of times each item is purchased in a store, then find the most popular item.",
    "code": "```cpp\n#include <iostream>\n#include <map>\n#include <string>\n\nint main() {\n    std::map<std::string, int> purchaseCount;\n\n    // Sample data: items purchased\n    purchaseCount[\"apple\"] = 4;\n    purchaseCount[\"banana\"] = 2;\n    purchaseCount[\"orange\"] = 5;\n    purchaseCount[\"grape\"] = 3;\n\n    std::string mostPopularItem;\n    int maxCount = 0;\n\n    for (const auto& item : purchaseCount) {\n        if (item.second > maxCount) {\n            maxCount = item.second;\n            mostPopularItem = item.first;\n        }\n    }\n\n    std::cout << \"Most popular item: \" << mostPopularItem << \" with \" << maxCount << \" purchases.\" << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Build a dictionary that associates file extensions with their corresponding application types and uses it to determine how to open a given file.",
    "code": "```cpp\n#include <iostream>\n#include <unordered_map>\n#include <string>\n\nint main() {\n    std::unordered_map<std::string, std::string> fileAssociations = {\n        {\".txt\", \"Text Editor\"},\n        {\".jpg\", \"Image Viewer\"},\n        {\".mp3\", \"Music Player\"},\n        {\".mp4\", \"Video Player\"},\n        {\".pdf\", \"PDF Reader\"}\n    };\n\n    std::string fileName = \"example.mp4\";\n    std::string extension = fileName.substr(fileName.find_last_of('.'));\n\n    if (fileAssociations.find(extension) != fileAssociations.end()) {\n        std::cout << \"Open with: \" << fileAssociations[extension] << std::endl;\n    } else {\n        std::cout << \"No associated application found for: \" << extension << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a program that uses a map to store menu items and their prices, and allows customers to calculate their total bill.",
    "code": "```cpp\n#include <iostream>\n#include <map>\n#include <string>\n\nint main() {\n    std::map<std::string, double> menu = {\n        {\"Burger\", 5.99},\n        {\"Fries\", 2.99},\n        {\"Soda\", 1.49},\n        {\"Salad\", 4.49}\n    };\n    \n    std::string item;\n    double totalBill = 0.0;\n    std::cout << \"Enter menu items (type 'done' to finish): \" << std::endl;\n    \n    while (true) {\n        std::cout << \"Item: \";\n        std::cin >> item;\n        if (item == \"done\") {\n            break;\n        }\n        if (menu.find(item) != menu.end()) {\n            totalBill += menu[item];\n        } else {\n            std::cout << \"Item not found on menu.\" << std::endl;\n        }\n    }\n    \n    std::cout << \"Total Bill: $\" << totalBill << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a dictionary to track the inventory of a warehouse, allowing additions, removals, and inventory checks.",
    "code": "```cpp\n#include <iostream>\n#include <unordered_map>\n#include <string>\n\nclass WarehouseInventory {\npublic:\n    void addItem(const std::string& item, int quantity) {\n        inventory[item] += quantity;\n    }\n\n    void removeItem(const std::string& item, int quantity) {\n        if (inventory.find(item) != inventory.end()) {\n            if (inventory[item] <= quantity) {\n                inventory.erase(item);\n            } else {\n                inventory[item] -= quantity;\n            }\n        }\n    }\n\n    int checkInventory(const std::string& item) const {\n        if (inventory.find(item) != inventory.end()) {\n            return inventory.at(item);\n        }\n        return 0;\n    }\n\nprivate:\n    std::unordered_map<std::string, int> inventory;\n};\n\nint main() {\n    WarehouseInventory warehouse;\n    warehouse.addItem(\"Widget\", 10);\n    warehouse.addItem(\"Gadget\", 5);\n    warehouse.removeItem(\"Widget\", 3);\n    std::cout << \"Widget inventory: \" << warehouse.checkInventory(\"Widget\") << std::endl;\n    std::cout << \"Gadget inventory: \" << warehouse.checkInventory(\"Gadget\") << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that uses a map to convert Roman numerals to integers.",
    "code": "```cpp\n#include <iostream>\n#include <unordered_map>\n#include <string>\n\nint romanToInt(const std::string &s) {\n    std::unordered_map<char, int> romanMap = {\n        {'I', 1}, {'V', 5}, {'X', 10}, {'L', 50},\n        {'C', 100}, {'D', 500}, {'M', 1000}\n    };\n    \n    int total = 0;\n    int prevValue = 0;\n    \n    for (char ch : s) {\n        int currentValue = romanMap[ch];\n        total += currentValue;\n        if (currentValue > prevValue) {\n            total -= 2 * prevValue;\n        }\n        prevValue = currentValue;\n    }\n    \n    return total;\n}\n\nint main() {\n    std::string roman = \"MCMXCIV\";\n    std::cout << \"The integer value of \" << roman << \" is \" << romanToInt(roman) << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a program that uses a dictionary to track the number of occurrences of each letter in a string.",
    "code": "```cpp\n#include <iostream>\n#include <map>\n#include <string>\n\nint main() {\n    std::string input = \"example string\";\n    std::map<char, int> letterCount;\n\n    for (char c : input) {\n        if (isalpha(c)) {\n            letterCount[c]++;\n        }\n    }\n\n    for (const auto& pair : letterCount) {\n        std::cout << pair.first << \": \" << pair.second << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a map to store team names and their scores, then determine the team with the highest score.",
    "code": "```cpp\n#include <iostream>\n#include <map>\n#include <string>\n\nint main() {\n    std::map<std::string, int> teamScores;\n    teamScores[\"TeamA\"] = 85;\n    teamScores[\"TeamB\"] = 92;\n    teamScores[\"TeamC\"] = 78;\n    teamScores[\"TeamD\"] = 90;\n\n    std::string bestTeam;\n    int highestScore = -1;\n\n    for (const auto& team : teamScores) {\n        if (team.second > highestScore) {\n            highestScore = team.second;\n            bestTeam = team.first;\n        }\n    }\n\n    std::cout << \"The team with the highest score is \" << bestTeam << \" with a score of \" << highestScore << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that takes a dictionary of item weights and calculates the total weight of all items.",
    "code": "```cpp\n#include <iostream>\n#include <unordered_map>\n\ndouble calculateTotalWeight(const std::unordered_map<std::string, double>& itemWeights) {\n    double totalWeight = 0;\n    for (const auto& item : itemWeights) {\n        totalWeight += item.second;\n    }\n    return totalWeight;\n}\n\nint main() {\n    std::unordered_map<std::string, double> itemWeights = {\n        {\"apple\", 1.2},\n        {\"banana\", 1.1},\n        {\"orange\", 1.3}\n    };\n    \n    double totalWeight = calculateTotalWeight(itemWeights);\n    std::cout << \"Total weight: \" << totalWeight << std::endl;\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Implement a map to store website URLs and their respective visit counts, then find the most visited website.",
    "code": "```cpp\n#include <iostream>\n#include <map>\n#include <string>\n\nint main() {\n    std::map<std::string, int> visitCount;\n    \n    // Example data\n    visitCount[\"https://www.example.com\"] = 150;\n    visitCount[\"https://www.anotherexample.com\"] = 300;\n    visitCount[\"https://www.yetanotherexample.com\"] = 200;\n\n    std::string mostVisited;\n    int maxVisits = 0;\n\n    for (const auto& entry : visitCount) {\n        if (entry.second > maxVisits) {\n            maxVisits = entry.second;\n            mostVisited = entry.first;\n        }\n    }\n\n    if (!mostVisited.empty()) {\n        std::cout << \"Most visited website: \" << mostVisited << \" with \" << maxVisits << \" visits.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a script that uses a dictionary to map error codes to error messages, and prints the message for a given code.",
    "code": "```cpp\n#include <iostream>\n#include <unordered_map>\n#include <string>\n\nint main() {\n    std::unordered_map<int, std::string> errorMap;\n    errorMap[404] = \"Not Found\";\n    errorMap[500] = \"Internal Server Error\";\n    errorMap[403] = \"Forbidden\";\n    errorMap[401] = \"Unauthorized\";\n\n    int errorCode = 404; // Example error code\n\n    if (errorMap.find(errorCode) != errorMap.end()) {\n        std::cout << \"Error \" << errorCode << \": \" << errorMap[errorCode] << std::endl;\n    } else {\n        std::cout << \"Unknown error code.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a dictionary to store contact information with names as keys and phone numbers as values, allowing updates and lookups.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n#include <unordered_map>\n\nint main() {\n    std::unordered_map<std::string, std::string> contacts;\n\n    // Add or update contacts\n    contacts[\"John Doe\"] = \"555-1234\";\n    contacts[\"Jane Smith\"] = \"555-5678\";\n\n    // Update a contact\n    contacts[\"John Doe\"] = \"555-4321\";\n\n    // Lookup a contact\n    std::string name = \"John Doe\";\n    if (contacts.find(name) != contacts.end()) {\n        std::cout << name << \": \" << contacts[name] << std::endl;\n    } else {\n        std::cout << name << \" not found.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program that uses a map to assign tasks to employees based on their skill levels.",
    "code": "```cpp\n#include <iostream>\n#include <map>\n#include <string>\n\nint main() {\n    std::map<std::string, std::string> taskAssignment;\n\n    taskAssignment[\"Alice\"] = \"Senior Developer\";\n    taskAssignment[\"Bob\"] = \"Junior Developer\";\n    taskAssignment[\"Charlie\"] = \"Intern\";\n\n    for (const auto& pair : taskAssignment) {\n        std::cout << pair.first << \" is assigned the role of \" << pair.second << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a dictionary that maps airport codes to their respective city names, and allows retrieval of city names by code.",
    "code": "```cpp\n#include <iostream>\n#include <unordered_map>\n#include <string>\n\nint main() {\n    std::unordered_map<std::string, std::string> airportMap;\n    \n    // Adding some example airport codes and city names\n    airportMap[\"JFK\"] = \"New York\";\n    airportMap[\"LAX\"] = \"Los Angeles\";\n    airportMap[\"ORD\"] = \"Chicago\";\n    airportMap[\"ATL\"] = \"Atlanta\";\n    airportMap[\"DFW\"] = \"Dallas\";\n\n    // Retrieve city name by airport code\n    std::string code = \"LAX\";\n    if (airportMap.find(code) != airportMap.end()) {\n        std::cout << \"The city for airport code \" << code << \" is \" << airportMap[code] << std::endl;\n    } else {\n        std::cout << \"Airport code not found\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Build a map to store movie titles and their release years, then find all movies released in a given decade.",
    "code": "```cpp\n#include <iostream>\n#include <map>\n#include <vector>\n#include <string>\n\nint main() {\n    std::map<std::string, int> movies = {\n        {\"The Shawshank Redemption\", 1994},\n        {\"Pulp Fiction\", 1994},\n        {\"The Dark Knight\", 2008},\n        {\"Forrest Gump\", 1994},\n        {\"Inception\", 2010},\n        {\"The Matrix\", 1999},\n        {\"Gladiator\", 2000},\n        {\"Titanic\", 1997},\n        {\"The Godfather\", 1972},\n        {\"The Lord of the Rings: The Return of the King\", 2003}\n    };\n\n    int decade;\n    std::cout << \"Enter the decade (e.g., 1990 for the 1990s): \";\n    std::cin >> decade;\n\n    std::vector<std::string> movies_in_decade;\n    for (const auto& movie : movies) {\n        if (movie.second / 10 * 10 == decade) {\n            movies_in_decade.push_back(movie.first);\n        }\n    }\n\n    std::cout << \"Movies released in the \" << decade << \"s:\\n\";\n    for (const auto& title : movies_in_decade) {\n        std::cout << title << \"\\n\";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that uses a dictionary to group students by their grades.",
    "code": "```cpp\n#include <iostream>\n#include <map>\n#include <vector>\n#include <string>\n\nstd::map<char, std::vector<std::string>> groupStudentsByGrades(const std::vector<std::pair<std::string, char>>& students) {\n    std::map<char, std::vector<std::string>> gradeMap;\n    \n    for (const auto& student : students) {\n        gradeMap[student.second].push_back(student.first);\n    }\n    \n    return gradeMap;\n}\n\nint main() {\n    std::vector<std::pair<std::string, char>> students = {\n        {\"Alice\", 'A'}, {\"Bob\", 'B'}, {\"Charlie\", 'A'}, {\"David\", 'C'}, {\"Eve\", 'B'}\n    };\n    \n    std::map<char, std::vector<std::string>> groupedStudents = groupStudentsByGrades(students);\n    \n    for (const auto& [grade, names] : groupedStudents) {\n        std::cout << \"Grade \" << grade << \": \";\n        for (const auto& name : names) {\n            std::cout << name << \" \";\n        }\n        std::cout << std::endl;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Create a dictionary to store the number of visitors to different sections of a website, and determine the most visited section.",
    "code": "```cpp\n#include <iostream>\n#include <map>\n#include <string>\n\nint main() {\n    std::map<std::string, int> visitorCount;\n    visitorCount[\"Home\"] = 150;\n    visitorCount[\"About\"] = 45;\n    visitorCount[\"Contact\"] = 30;\n    visitorCount[\"Blog\"] = 120;\n    visitorCount[\"Shop\"] = 200;\n\n    std::string mostVisitedSection;\n    int maxVisitors = 0;\n\n    for (const auto& section : visitorCount) {\n        if (section.second > maxVisitors) {\n            maxVisitors = section.second;\n            mostVisitedSection = section.first;\n        }\n    }\n\n    std::cout << \"The most visited section is: \" << mostVisitedSection << \" with \" << maxVisitors << \" visitors.\" << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a program that uses a map to assign project deadlines to team members, allowing for deadline extensions.",
    "code": "```cpp\n#include <iostream>\n#include <map>\n#include <string>\n\nint main() {\n    std::map<std::string, std::string> projectDeadlines;\n\n    // Assign initial deadlines\n    projectDeadlines[\"Alice\"] = \"2023-12-01\";\n    projectDeadlines[\"Bob\"] = \"2023-12-05\";\n    projectDeadlines[\"Charlie\"] = \"2023-12-10\";\n\n    // Output initial deadlines\n    std::cout << \"Initial deadlines:\\n\";\n    for (const auto& entry : projectDeadlines) {\n        std::cout << entry.first << \": \" << entry.second << \"\\n\";\n    }\n\n    // Extend a deadline\n    projectDeadlines[\"Alice\"] = \"2023-12-15\";\n\n    // Output updated deadlines\n    std::cout << \"\\nUpdated deadlines:\\n\";\n    for (const auto& entry : projectDeadlines) {\n        std::cout << entry.first << \": \" << entry.second << \"\\n\";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a dictionary that keeps track of borrowed books in a library, allowing users to check available books.",
    "code": "```cpp\n#include <iostream>\n#include <unordered_map>\n#include <string>\n\nclass Library {\nprivate:\n    std::unordered_map<std::string, bool> books;\n\npublic:\n    void addBook(const std::string& title) {\n        books[title] = true; // true indicates the book is available\n    }\n\n    void borrowBook(const std::string& title) {\n        if (books.find(title) != books.end() && books[title]) {\n            books[title] = false; // false indicates the book is borrowed\n            std::cout << \"You borrowed \\\"\" << title << \"\\\".\\n\";\n        } else {\n            std::cout << \"\\\"\" << title << \"\\\" is not available.\\n\";\n        }\n    }\n\n    void returnBook(const std::string& title) {\n        if (books.find(title) != books.end()) {\n            books[title] = true;\n            std::cout << \"You returned \\\"\" << title << \"\\\".\\n\";\n        } else {\n            std::cout << \"\\\"\" << title << \"\\\" is not in our library.\\n\";\n        }\n    }\n\n    void checkAvailability(const std::string& title) const {\n        auto it = books.find(title);\n        if (it != books.end() && it->second) {\n            std::cout << \"\\\"\" << title << \"\\\" is available.\\n\";\n        } else {\n            std::cout << \"\\\"\" << title << \"\\\" is not available.\\n\";\n        }\n    }\n};\n\nint main() {\n    Library library;\n    library.addBook(\"The Great Gatsby\");\n    library.addBook(\"1984\");\n    \n    library.checkAvailability(\"The Great Gatsby\");\n    library.borrowBook(\"The Great Gatsby\");\n    library.checkAvailability(\"The Great Gatsby\");\n    library.returnBook(\"The Great Gatsby\");\n    library.checkAvailability(\"The Great Gatsby\");\n    \n    library.borrowBook(\"Moby Dick\");\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Create a map to store the names of planets and their distances from the sun, then find the closest planet to Earth.",
    "code": "```cpp\n#include <iostream>\n#include <map>\n#include <string>\n#include <limits>\n\nint main() {\n    std::map<std::string, double> planetDistances;\n    \n    planetDistances[\"Mercury\"] = 77.3;\n    planetDistances[\"Venus\"] = 41.4;\n    planetDistances[\"Earth\"] = 0.0;\n    planetDistances[\"Mars\"] = 78.3;\n    planetDistances[\"Jupiter\"] = 628.7;\n    planetDistances[\"Saturn\"] = 1275.0;\n    planetDistances[\"Uranus\"] = 2721.0;\n    planetDistances[\"Neptune\"] = 4347.0;\n\n    std::string closestPlanet;\n    double minDistance = std::numeric_limits<double>::max();\n\n    for (const auto& [planet, distance] : planetDistances) {\n        if (planet != \"Earth\" && distance < minDistance) {\n            minDistance = distance;\n            closestPlanet = planet;\n        }\n    }\n\n    std::cout << \"The closest planet to Earth is \" << closestPlanet << \" with a distance of \" << minDistance << \" million km.\" << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a script that uses a dictionary to translate Morse code into plain text.",
    "code": "```cpp\n#include <iostream>\n#include <unordered_map>\n#include <sstream>\n\nstd::string morseToText(const std::string &morse) {\n    std::unordered_map<std::string, char> morseDictionary = {\n        {\".-\", 'A'}, {\"-...\", 'B'}, {\"-.-.\", 'C'}, {\"-..\", 'D'}, {\".\", 'E'},\n        {\"..-.\", 'F'}, {\"--.\", 'G'}, {\"....\", 'H'}, {\"..\", 'I'}, {\".---\", 'J'},\n        {\"-.-\", 'K'}, {\".-..\", 'L'}, {\"--\", 'M'}, {\"-.\", 'N'}, {\"---\", 'O'},\n        {\".--.\", 'P'}, {\"--.-\", 'Q'}, {\".-.\", 'R'}, {\"...\", 'S'}, {\"-\", 'T'},\n        {\"..-\", 'U'}, {\"...-\", 'V'}, {\".--\", 'W'}, {\"-..-\", 'X'}, {\"-.--\", 'Y'},\n        {\"--..\", 'Z'}, {\"-----\", '0'}, {\".----\", '1'}, {\"..---\", '2'}, {\"...--\", '3'},\n        {\"....-\", '4'}, {\".....\", '5'}, {\"-....\", '6'}, {\"--...\", '7'}, {\"---..\", '8'},\n        {\"----.\", '9'}\n    };\n\n    std::istringstream stream(morse);\n    std::string token;\n    std::string result;\n\n    while (std::getline(stream, token, ' ')) {\n        if (morseDictionary.find(token) != morseDictionary.end()) {\n            result += morseDictionary[token];\n        } else if (token.empty()) {\n            result += ' ';\n        }\n    }\n    return result;\n}\n\nint main() {\n    std::string morseInput = \"... --- ...\";\n    std::cout << morseToText(morseInput) << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a program that uses a map to store vehicle registration numbers and their corresponding owner's name.",
    "code": "```cpp\n#include <iostream>\n#include <map>\n#include <string>\n\nint main() {\n    std::map<std::string, std::string> vehicleRegistry;\n\n    // Adding entries to the map\n    vehicleRegistry[\"ABC123\"] = \"John Doe\";\n    vehicleRegistry[\"XYZ789\"] = \"Jane Smith\";\n    vehicleRegistry[\"LMN456\"] = \"Alice Johnson\";\n\n    // Accessing and printing the entries\n    for (const auto& entry : vehicleRegistry) {\n        std::cout << \"Registration Number: \" << entry.first \n                  << \", Owner: \" << entry.second << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a dictionary that maps sports teams to their win-loss records, and find the team with the best record.",
    "code": "```cpp\n#include <iostream>\n#include <map>\n#include <string>\n\nint main() {\n    std::map<std::string, std::pair<int, int>> teamRecords;\n    teamRecords[\"TeamA\"] = {10, 2};\n    teamRecords[\"TeamB\"] = {8, 4};\n    teamRecords[\"TeamC\"] = {12, 3};\n    teamRecords[\"TeamD\"] = {9, 5};\n\n    std::string bestTeam;\n    double bestRatio = 0.0;\n\n    for (const auto& team : teamRecords) {\n        double winRatio = static_cast<double>(team.second.first) / \n                          (team.second.first + team.second.second);\n        if (winRatio > bestRatio) {\n            bestRatio = winRatio;\n            bestTeam = team.first;\n        }\n    }\n\n    std::cout << \"Team with the best record: \" << bestTeam << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that uses a map to convert currency codes to full currency names.",
    "code": "```cpp\n#include <iostream>\n#include <unordered_map>\n#include <string>\n\nstd::string getCurrencyName(const std::string& currencyCode) {\n    std::unordered_map<std::string, std::string> currencyMap = {\n        {\"USD\", \"United States Dollar\"},\n        {\"EUR\", \"Euro\"},\n        {\"JPY\", \"Japanese Yen\"},\n        {\"GBP\", \"British Pound\"},\n        {\"AUD\", \"Australian Dollar\"}\n        // Add more currency codes and names as needed\n    };\n\n    auto it = currencyMap.find(currencyCode);\n    if (it != currencyMap.end()) {\n        return it->second;\n    } else {\n        return \"Currency code not found\";\n    }\n}\n\nint main() {\n    std::string code = \"EUR\";\n    std::cout << \"The currency name for \" << code << \" is \" << getCurrencyName(code) << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Build a dictionary to store student names and their attendance counts, and determine the student with the highest attendance.",
    "code": "```cpp\n#include <iostream>\n#include <map>\n#include <string>\n\nint main() {\n    std::map<std::string, int> attendance;\n    \n    // Sample data\n    attendance[\"Alice\"] = 5;\n    attendance[\"Bob\"] = 8;\n    attendance[\"Charlie\"] = 7;\n    attendance[\"Diana\"] = 10;\n    \n    std::string topStudent;\n    int maxAttendance = 0;\n    \n    for (const auto& entry : attendance) {\n        if (entry.second > maxAttendance) {\n            maxAttendance = entry.second;\n            topStudent = entry.first;\n        }\n    }\n    \n    std::cout << \"Student with highest attendance: \" << topStudent << \" (\" << maxAttendance << \" days)\" << std::endl;\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Implement a map to store the names of countries and their capitals, allowing lookups by country name.",
    "code": "```cpp\n#include <iostream>\n#include <map>\n#include <string>\n\nint main() {\n    std::map<std::string, std::string> countryCapitals;\n\n    // Adding countries and their capitals\n    countryCapitals[\"France\"] = \"Paris\";\n    countryCapitals[\"Germany\"] = \"Berlin\";\n    countryCapitals[\"Italy\"] = \"Rome\";\n    countryCapitals[\"Spain\"] = \"Madrid\";\n    countryCapitals[\"United Kingdom\"] = \"London\";\n\n    // Example lookup\n    std::string country = \"Italy\";\n    if (countryCapitals.find(country) != countryCapitals.end()) {\n        std::cout << \"The capital of \" << country << \" is \" << countryCapitals[country] << \".\" << std::endl;\n    } else {\n        std::cout << \"Country not found.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a program that uses a dictionary to keep track of recipe ingredients and their quantities.",
    "code": "```cpp\n#include <iostream>\n#include <map>\n#include <string>\n\nint main() {\n    // Create a map to store ingredients and their quantities\n    std::map<std::string, double> ingredients;\n\n    // Add some ingredients and their quantities\n    ingredients[\"Flour\"] = 2.5; // cups\n    ingredients[\"Sugar\"] = 1.5; // cups\n    ingredients[\"Eggs\"] = 3; // count\n    ingredients[\"Butter\"] = 1; // cup\n\n    // Output the ingredients and their quantities\n    for (const auto &ingredient : ingredients) {\n        std::cout << ingredient.first << \": \" << ingredient.second << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a system that uses a map to associate social media usernames with user profiles.",
    "code": "```cpp\n#include <iostream>\n#include <map>\n#include <string>\n\nstruct UserProfile {\n    std::string name;\n    std::string email;\n    int age;\n    // Additional fields can be added as needed\n};\n\nint main() {\n    std::map<std::string, UserProfile> userProfiles;\n\n    // Example of adding user profiles\n    userProfiles[\"john_doe\"] = {\"John Doe\", \"john@example.com\", 30};\n    userProfiles[\"jane_smith\"] = {\"Jane Smith\", \"jane@example.com\", 25};\n\n    // Example of accessing a user profile\n    std::string username = \"john_doe\";\n    if (userProfiles.find(username) != userProfiles.end()) {\n        UserProfile profile = userProfiles[username];\n        std::cout << \"Name: \" << profile.name << std::endl;\n        std::cout << \"Email: \" << profile.email << std::endl;\n        std::cout << \"Age: \" << profile.age << std::endl;\n    } else {\n        std::cout << \"User not found.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that takes a dictionary of product categories and lists all products in a given category.",
    "code": "```cpp\n#include <iostream>\n#include <unordered_map>\n#include <vector>\n#include <string>\n\nvoid listProductsInCategory(const std::unordered_map<std::string, std::vector<std::string>>& productCategories, const std::string& category) {\n    auto it = productCategories.find(category);\n    if (it != productCategories.end()) {\n        for (const auto& product : it->second) {\n            std::cout << product << std::endl;\n        }\n    } else {\n        std::cout << \"Category not found.\" << std::endl;\n    }\n}\n\nint main() {\n    std::unordered_map<std::string, std::vector<std::string>> productCategories = {\n        {\"Electronics\", {\"TV\", \"Smartphone\", \"Laptop\"}},\n        {\"Groceries\", {\"Apple\", \"Banana\", \"Carrot\"}},\n        {\"Clothing\", {\"T-shirt\", \"Jeans\", \"Jacket\"}}\n    };\n\n    listProductsInCategory(productCategories, \"Electronics\");\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a dictionary to store shopping list items and their quantities, and implement a function to update quantities.",
    "code": "```cpp\n#include <iostream>\n#include <map>\n#include <string>\n\nvoid updateQuantity(std::map<std::string, int>& shoppingList, const std::string& item, int quantity) {\n    shoppingList[item] = quantity;\n}\n\nint main() {\n    std::map<std::string, int> shoppingList;\n    \n    // Example usage\n    shoppingList[\"Apples\"] = 5;\n    shoppingList[\"Bananas\"] = 3;\n    \n    updateQuantity(shoppingList, \"Apples\", 10);\n    updateQuantity(shoppingList, \"Oranges\", 4);\n    \n    for (const auto& pair : shoppingList) {\n        std::cout << pair.first << \": \" << pair.second << std::endl;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Build a program that uses a map to store historical events and their dates, and finds events that occurred in a given year.",
    "code": "```cpp\n#include <iostream>\n#include <map>\n#include <vector>\n#include <string>\n\nint main() {\n    std::map<int, std::vector<std::string>> historicalEvents;\n    \n    // Adding some historical events and their dates\n    historicalEvents[1969].push_back(\"First Moon Landing\");\n    historicalEvents[1989].push_back(\"Fall of the Berlin Wall\");\n    historicalEvents[2001].push_back(\"September 11 Attacks\");\n    historicalEvents[1945].push_back(\"End of World War II\");\n\n    int queryYear;\n    std::cout << \"Enter the year to find events: \";\n    std::cin >> queryYear;\n\n    if (historicalEvents.find(queryYear) != historicalEvents.end()) {\n        std::cout << \"Events in \" << queryYear << \":\\n\";\n        for (const auto& event : historicalEvents[queryYear]) {\n            std::cout << \"- \" << event << \"\\n\";\n        }\n    } else {\n        std::cout << \"No events found for the year \" << queryYear << \".\\n\";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a dictionary to manage user roles and permissions within an application.",
    "code": "```cpp\n#include <iostream>\n#include <map>\n#include <set>\n#include <string>\n\nint main() {\n    std::map<std::string, std::set<std::string>> userRoles;\n\n    // Example of adding roles and permissions\n    userRoles[\"admin\"] = {\"read\", \"write\", \"delete\"};\n    userRoles[\"editor\"] = {\"read\", \"write\"};\n    userRoles[\"viewer\"] = {\"read\"};\n\n    // Example of accessing and printing roles and permissions\n    for (const auto& role : userRoles) {\n        std::cout << \"Role: \" << role.first << \"\\nPermissions: \";\n        for (const auto& permission : role.second) {\n            std::cout << permission << \" \";\n        }\n        std::cout << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a script that uses a map to convert numeric grades to letter grades.",
    "code": "```cpp\n#include <iostream>\n#include <map>\n\nchar getLetterGrade(int numericGrade) {\n    std::map<int, char> gradeMap = {\n        {90, 'A'}, {80, 'B'}, {70, 'C'}, {60, 'D'}, {0, 'F'}\n    };\n\n    for (auto it = gradeMap.rbegin(); it != gradeMap.rend(); ++it) {\n        if (numericGrade >= it->first) {\n            return it->second;\n        }\n    }\n    return 'F'; // Default case, although it should not be reached\n}\n\nint main() {\n    int numericGrade;\n    std::cout << \"Enter numeric grade: \";\n    std::cin >> numericGrade;\n\n    char letterGrade = getLetterGrade(numericGrade);\n    std::cout << \"The letter grade is: \" << letterGrade << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a dictionary that maps holiday names to their corresponding dates, and allows lookup by holiday name.",
    "code": "```cpp\n#include <iostream>\n#include <map>\n#include <string>\n\nint main() {\n    std::map<std::string, std::string> holidays;\n    \n    // Adding some holidays to the map\n    holidays[\"New Year's Day\"] = \"January 1\";\n    holidays[\"Independence Day\"] = \"July 4\";\n    holidays[\"Christmas Day\"] = \"December 25\";\n    \n    // Lookup by holiday name\n    std::string holidayName;\n    std::cout << \"Enter holiday name: \";\n    std::getline(std::cin, holidayName);\n    \n    auto it = holidays.find(holidayName);\n    if (it != holidays.end()) {\n        std::cout << holidayName << \" is on \" << it->second << std::endl;\n    } else {\n        std::cout << \"Holiday not found.\" << std::endl;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Design a system that uses a map to track the status of online orders, allowing updates to order status.",
    "code": "```cpp\n#include <iostream>\n#include <map>\n#include <string>\n\nint main() {\n    std::map<int, std::string> orderStatus;\n\n    // Adding some orders with initial status\n    orderStatus[101] = \"Processing\";\n    orderStatus[102] = \"Shipped\";\n    orderStatus[103] = \"Delivered\";\n\n    // Update status of an order\n    orderStatus[101] = \"Shipped\";\n\n    // Display the status of all orders\n    for (const auto& order : orderStatus) {\n        std::cout << \"Order ID: \" << order.first << \", Status: \" << order.second << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a program that uses a dictionary to associate food items with their nutritional information.",
    "code": "```cpp\n#include <iostream>\n#include <unordered_map>\n#include <string>\n\nint main() {\n    std::unordered_map<std::string, std::unordered_map<std::string, double>> foodNutrition;\n\n    foodNutrition[\"Apple\"] = {{\"Calories\", 52}, {\"Carbs\", 14}, {\"Fiber\", 2.4}};\n    foodNutrition[\"Banana\"] = {{\"Calories\", 89}, {\"Carbs\", 23}, {\"Fiber\", 2.6}};\n    foodNutrition[\"Broccoli\"] = {{\"Calories\", 55}, {\"Carbs\", 11}, {\"Fiber\", 3.7}};\n\n    for (const auto& food : foodNutrition) {\n        std::cout << \"Nutritional information for \" << food.first << \":\\n\";\n        for (const auto& nutrient : food.second) {\n            std::cout << \"  \" << nutrient.first << \": \" << nutrient.second << \"\\n\";\n        }\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a map to store book genres and lists of book titles, allowing retrieval of all books in a given genre.",
    "code": "```cpp\n#include <iostream>\n#include <map>\n#include <vector>\n#include <string>\n\nint main() {\n    std::map<std::string, std::vector<std::string>> booksByGenre;\n\n    // Example data\n    booksByGenre[\"Science Fiction\"] = {\"Dune\", \"Neuromancer\", \"Snow Crash\"};\n    booksByGenre[\"Fantasy\"] = {\"The Hobbit\", \"Harry Potter\", \"The Name of the Wind\"};\n    booksByGenre[\"Mystery\"] = {\"The Da Vinci Code\", \"Gone Girl\", \"Sherlock Holmes\"};\n\n    // Retrieve books in a given genre\n    std::string genre = \"Fantasy\";\n    if (booksByGenre.find(genre) != booksByGenre.end()) {\n        std::cout << \"Books in the \" << genre << \" genre:\" << std::endl;\n        for (const auto& title : booksByGenre[genre]) {\n            std::cout << \"- \" << title << std::endl;\n        }\n    } else {\n        std::cout << \"No books found in the \" << genre << \" genre.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that uses a dictionary to convert state abbreviations to full state names.",
    "code": "```cpp\n#include <iostream>\n#include <unordered_map>\n#include <string>\n\nstd::string getStateFullName(const std::string& abbreviation) {\n    std::unordered_map<std::string, std::string> stateMap = {\n        {\"AL\", \"Alabama\"},\n        {\"AK\", \"Alaska\"},\n        {\"AZ\", \"Arizona\"},\n        {\"AR\", \"Arkansas\"},\n        {\"CA\", \"California\"},\n        {\"CO\", \"Colorado\"},\n        {\"CT\", \"Connecticut\"},\n        {\"DE\", \"Delaware\"},\n        {\"FL\", \"Florida\"},\n        {\"GA\", \"Georgia\"},\n        {\"HI\", \"Hawaii\"},\n        {\"ID\", \"Idaho\"},\n        {\"IL\", \"Illinois\"},\n        {\"IN\", \"Indiana\"},\n        {\"IA\", \"Iowa\"},\n        {\"KS\", \"Kansas\"},\n        {\"KY\", \"Kentucky\"},\n        {\"LA\", \"Louisiana\"},\n        {\"ME\", \"Maine\"},\n        {\"MD\", \"Maryland\"},\n        {\"MA\", \"Massachusetts\"},\n        {\"MI\", \"Michigan\"},\n        {\"MN\", \"Minnesota\"},\n        {\"MS\", \"Mississippi\"},\n        {\"MO\", \"Missouri\"},\n        {\"MT\", \"Montana\"},\n        {\"NE\", \"Nebraska\"},\n        {\"NV\", \"Nevada\"},\n        {\"NH\", \"New Hampshire\"},\n        {\"NJ\", \"New Jersey\"},\n        {\"NM\", \"New Mexico\"},\n        {\"NY\", \"New York\"},\n        {\"NC\", \"North Carolina\"},\n        {\"ND\", \"North Dakota\"},\n        {\"OH\", \"Ohio\"},\n        {\"OK\", \"Oklahoma\"},\n        {\"OR\", \"Oregon\"},\n        {\"PA\", \"Pennsylvania\"},\n        {\"RI\", \"Rhode Island\"},\n        {\"SC\", \"South Carolina\"},\n        {\"SD\", \"South Dakota\"},\n        {\"TN\", \"Tennessee\"},\n        {\"TX\", \"Texas\"},\n        {\"UT\", \"Utah\"},\n        {\"VT\", \"Vermont\"},\n        {\"VA\", \"Virginia\"},\n        {\"WA\", \"Washington\"},\n        {\"WV\", \"West Virginia\"},\n        {\"WI\", \"Wisconsin\"},\n        {\"WY\", \"Wyoming\"}\n    };\n\n    auto it = stateMap.find(abbreviation);\n    if (it != stateMap.end()) {\n        return it->second;\n    } else {\n        return \"Unknown abbreviation\";\n    }\n}\n\nint main() {\n    std::string abbreviation;\n    std::cout << \"Enter state abbreviation: \";\n    std::cin >> abbreviation;\n    std::cout << \"Full state name: \" << getStateFullName(abbreviation) << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Build a dictionary to store customer names and their order histories.",
    "code": "```cpp\n#include <iostream>\n#include <map>\n#include <vector>\n#include <string>\n\nint main() {\n    std::map<std::string, std::vector<std::string>> customerOrders;\n\n    customerOrders[\"Alice\"] = {\"Order1\", \"Order2\"};\n    customerOrders[\"Bob\"] = {\"Order3\"};\n\n    customerOrders[\"Alice\"].push_back(\"Order4\");\n    customerOrders[\"Bob\"].push_back(\"Order5\");\n\n    for (const auto &customer : customerOrders) {\n        std::cout << customer.first << \"'s Orders: \";\n        for (const auto &order : customer.second) {\n            std::cout << order << \" \";\n        }\n        std::cout << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a map to manage parking lot spaces, tracking which spaces are occupied.",
    "code": "```cpp\n#include <iostream>\n#include <map>\n#include <string>\n\nint main() {\n    std::map<int, std::string> parkingLot;\n\n    // Example usage\n    parkingLot[1] = \"CarA\";\n    parkingLot[2] = \"CarB\";\n    parkingLot[3] = \"CarC\";\n\n    // Check if a space is occupied\n    int space = 2;\n    if (parkingLot.find(space) != parkingLot.end()) {\n        std::cout << \"Space \" << space << \" is occupied by \" << parkingLot[space] << \".\\n\";\n    } else {\n        std::cout << \"Space \" << space << \" is free.\\n\";\n    }\n\n    // Vacate a space\n    parkingLot.erase(2);\n\n    // Check again if the space is occupied\n    if (parkingLot.find(space) != parkingLot.end()) {\n        std::cout << \"Space \" << space << \" is occupied by \" << parkingLot[space] << \".\\n\";\n    } else {\n        std::cout << \"Space \" << space << \" is free.\\n\";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a program that uses a dictionary to track the scores of players in a game.",
    "code": "```cpp\n#include <iostream>\n#include <map>\n#include <string>\n\nint main() {\n    std::map<std::string, int> playerScores;\n    \n    // Add players and their scores\n    playerScores[\"Alice\"] = 10;\n    playerScores[\"Bob\"] = 15;\n    playerScores[\"Charlie\"] = 20;\n    \n    // Update score for a player\n    playerScores[\"Alice\"] += 5;\n    \n    // Print all players and their scores\n    for (const auto& player : playerScores) {\n        std::cout << player.first << \": \" << player.second << std::endl;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Design a dictionary to store scientific terms and their definitions, allowing users to look up definitions.",
    "code": "```cpp\n#include <iostream>\n#include <unordered_map>\n#include <string>\n\nint main() {\n    std::unordered_map<std::string, std::string> scientificTerms;\n\n    // Adding some scientific terms and their definitions\n    scientificTerms[\"Gravity\"] = \"The force that attracts a body towards the center of the earth.\";\n    scientificTerms[\"Photosynthesis\"] = \"The process by which green plants use sunlight to synthesize foods.\";\n    scientificTerms[\"Atom\"] = \"The basic unit of a chemical element.\";\n    \n    std::string term;\n    std::cout << \"Enter a scientific term to look up: \";\n    std::getline(std::cin, term);\n\n    auto it = scientificTerms.find(term);\n    if (it != scientificTerms.end()) {\n        std::cout << \"Definition: \" << it->second << std::endl;\n    } else {\n        std::cout << \"Term not found in the dictionary.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that uses a map to convert temperature scales (e.g., Celsius to Fahrenheit).",
    "code": "```cpp\n#include <iostream>\n#include <map>\n#include <string>\n\ndouble convertTemperature(const std::string& scaleFrom, const std::string& scaleTo, double value) {\n    std::map<std::pair<std::string, std::string>, double(*)(double)> conversionMap;\n    \n    conversionMap[{ \"Celsius\", \"Fahrenheit\" }] = [](double c) { return c * 9/5 + 32; };\n    conversionMap[{ \"Fahrenheit\", \"Celsius\" }] = [](double f) { return (f - 32) * 5/9; };\n    conversionMap[{ \"Celsius\", \"Kelvin\" }] = [](double c) { return c + 273.15; };\n    conversionMap[{ \"Kelvin\", \"Celsius\" }] = [](double k) { return k - 273.15; };\n    conversionMap[{ \"Fahrenheit\", \"Kelvin\" }] = [](double f) { return (f - 32) * 5/9 + 273.15; };\n    conversionMap[{ \"Kelvin\", \"Fahrenheit\" }] = [](double k) { return (k - 273.15) * 9/5 + 32; };\n\n    auto key = std::make_pair(scaleFrom, scaleTo);\n    if (conversionMap.find(key) != conversionMap.end()) {\n        return conversionMap[key](value);\n    }\n\n    throw std::invalid_argument(\"Conversion not supported\");\n}\n\nint main() {\n    try {\n        double celsius = 25.0;\n        double fahrenheit = convertTemperature(\"Celsius\", \"Fahrenheit\", celsius);\n        std::cout << celsius << \" Celsius is \" << fahrenheit << \" Fahrenheit\" << std::endl;\n    } catch (const std::invalid_argument& e) {\n        std::cerr << e.what() << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a dictionary to store employee names and their respective departments.",
    "code": "```cpp\n#include <iostream>\n#include <map>\n#include <string>\n\nint main() {\n    std::map<std::string, std::string> employeeDepartment;\n\n    // Example entries\n    employeeDepartment[\"Alice\"] = \"HR\";\n    employeeDepartment[\"Bob\"] = \"Engineering\";\n    employeeDepartment[\"Charlie\"] = \"Marketing\";\n\n    // Example usage\n    for (const auto& entry : employeeDepartment) {\n        std::cout << \"Employee: \" << entry.first << \", Department: \" << entry.second << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Build a program that uses a map to store tourist attractions and their locations.",
    "code": "```cpp\n#include <iostream>\n#include <map>\n#include <string>\n\nint main() {\n    std::map<std::string, std::string> touristAttractions;\n\n    // Adding some tourist attractions and their locations\n    touristAttractions[\"Eiffel Tower\"] = \"Paris, France\";\n    touristAttractions[\"Statue of Liberty\"] = \"New York, USA\";\n    touristAttractions[\"Great Wall\"] = \"China\";\n    touristAttractions[\"Taj Mahal\"] = \"Agra, India\";\n    touristAttractions[\"Colosseum\"] = \"Rome, Italy\";\n\n    // Iterating through the map and printing the attractions and their locations\n    for (const auto &attraction : touristAttractions) {\n        std::cout << attraction.first << \" is located in \" << attraction.second << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a dictionary to manage a collection of music albums, allowing additions and removals.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n#include <unordered_map>\n\nclass MusicCollection {\npublic:\n    void addAlbum(const std::string& title, const std::string& artist) {\n        albums[title] = artist;\n    }\n\n    void removeAlbum(const std::string& title) {\n        albums.erase(title);\n    }\n\n    void printCollection() const {\n        for (const auto& album : albums) {\n            std::cout << \"Title: \" << album.first << \", Artist: \" << album.second << std::endl;\n        }\n    }\n\nprivate:\n    std::unordered_map<std::string, std::string> albums;\n};\n\nint main() {\n    MusicCollection collection;\n    collection.addAlbum(\"The Dark Side of the Moon\", \"Pink Floyd\");\n    collection.addAlbum(\"Thriller\", \"Michael Jackson\");\n\n    std::cout << \"Current collection:\" << std::endl;\n    collection.printCollection();\n\n    collection.removeAlbum(\"Thriller\");\n\n    std::cout << \"After removal:\" << std::endl;\n    collection.printCollection();\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a script that uses a map to track the inventory of a small retail store.",
    "code": "```cpp\n#include <iostream>\n#include <map>\n#include <string>\n\nint main() {\n    std::map<std::string, int> inventory;\n\n    // Adding items to the inventory\n    inventory[\"Apples\"] = 50;\n    inventory[\"Bananas\"] = 30;\n    inventory[\"Oranges\"] = 20;\n\n    // Modifying inventory\n    inventory[\"Apples\"] += 10; // Received 10 more apples\n    inventory[\"Bananas\"] -= 5; // Sold 5 bananas\n\n    // Displaying inventory\n    std::cout << \"Inventory:\\n\";\n    for (const auto& item : inventory) {\n        std::cout << item.first << \": \" << item.second << \"\\n\";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a dictionary to store the names of rivers and their lengths, allowing length lookups by river name.",
    "code": "```cpp\n#include <iostream>\n#include <unordered_map>\n#include <string>\n\nint main() {\n    std::unordered_map<std::string, int> riverLengths;\n    \n    // Adding some rivers and their lengths\n    riverLengths[\"Nile\"] = 6650;\n    riverLengths[\"Amazon\"] = 6400;\n    riverLengths[\"Yangtze\"] = 6300;\n    riverLengths[\"Mississippi\"] = 6275;\n    \n    // Example of looking up the length of a river\n    std::string riverName = \"Amazon\";\n    if (riverLengths.find(riverName) != riverLengths.end()) {\n        std::cout << \"The length of the \" << riverName << \" is \" << riverLengths[riverName] << \" km.\" << std::endl;\n    } else {\n        std::cout << \"River not found.\" << std::endl;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Design a system that uses a map to track the availability of conference rooms in an office building.",
    "code": "```cpp\n#include <iostream>\n#include <map>\n#include <string>\n\nint main() {\n    std::map<std::string, bool> conferenceRooms;\n    \n    // Initialize conference rooms with availability status\n    conferenceRooms[\"Room A\"] = true; // true indicates available\n    conferenceRooms[\"Room B\"] = false;\n    conferenceRooms[\"Room C\"] = true;\n\n    // Function to check availability\n    auto checkAvailability = [&](const std::string& roomName) {\n        if (conferenceRooms.find(roomName) != conferenceRooms.end()) {\n            return conferenceRooms[roomName];\n        } else {\n            std::cerr << \"Room not found\" << std::endl;\n            return false;\n        }\n    };\n\n    // Function to book a room\n    auto bookRoom = [&](const std::string& roomName) {\n        if (conferenceRooms.find(roomName) != conferenceRooms.end()) {\n            if (conferenceRooms[roomName]) {\n                conferenceRooms[roomName] = false;\n                std::cout << roomName << \" booked successfully.\" << std::endl;\n            } else {\n                std::cout << roomName << \" is already booked.\" << std::endl;\n            }\n        } else {\n            std::cerr << \"Room not found\" << std::endl;\n        }\n    };\n\n    // Function to release a room\n    auto releaseRoom = [&](const std::string& roomName) {\n        if (conferenceRooms.find(roomName) != conferenceRooms.end()) {\n            if (!conferenceRooms[roomName]) {\n                conferenceRooms[roomName] = true;\n                std::cout << roomName << \" released successfully.\" << std::endl;\n            } else {\n                std::cout << roomName << \" is already available.\" << std::endl;\n            }\n        } else {\n            std::cerr << \"Room not found\" << std::endl;\n        }\n    };\n\n    // Example usage\n    bookRoom(\"Room A\");\n    releaseRoom(\"Room B\");\n    bookRoom(\"Room C\");\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a program that uses a dictionary to associate animal species with their habitats.",
    "code": "```cpp\n#include <iostream>\n#include <unordered_map>\n#include <string>\n\nint main() {\n    std::unordered_map<std::string, std::string> animalHabitats;\n\n    animalHabitats[\"Lion\"] = \"Savanna\";\n    animalHabitats[\"Penguin\"] = \"Antarctica\";\n    animalHabitats[\"Panda\"] = \"Temperate Forest\";\n    animalHabitats[\"Kangaroo\"] = \"Grassland\";\n    animalHabitats[\"Polar Bear\"] = \"Arctic\";\n\n    for (const auto& pair : animalHabitats) {\n        std::cout << pair.first << \" lives in the \" << pair.second << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a map to store the names of mountains and their elevations, then find the tallest mountain.",
    "code": "```cpp\n#include <iostream>\n#include <map>\n#include <string>\n\nint main() {\n    std::map<std::string, int> mountains;\n    mountains[\"Everest\"] = 8848;\n    mountains[\"K2\"] = 8611;\n    mountains[\"Kangchenjunga\"] = 8586;\n    mountains[\"Lhotse\"] = 8516;\n    mountains[\"Makalu\"] = 8485;\n\n    std::string tallestMountain;\n    int maxElevation = 0;\n\n    for (const auto& mountain : mountains) {\n        if (mountain.second > maxElevation) {\n            maxElevation = mountain.second;\n            tallestMountain = mountain.first;\n        }\n    }\n\n    std::cout << \"The tallest mountain is \" << tallestMountain \n              << \" with an elevation of \" << maxElevation << \" meters.\" << std::endl;\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that uses a dictionary to convert time zones to their respective UTC offsets.",
    "code": "```cpp\n#include <iostream>\n#include <unordered_map>\n#include <string>\n\nstd::string getUTCOffset(const std::string& timeZone) {\n    std::unordered_map<std::string, std::string> timeZoneOffsets = {\n        {\"PST\", \"-08:00\"},\n        {\"MST\", \"-07:00\"},\n        {\"CST\", \"-06:00\"},\n        {\"EST\", \"-05:00\"},\n        {\"GMT\", \"+00:00\"},\n        {\"CET\", \"+01:00\"},\n        {\"EET\", \"+02:00\"},\n        {\"IST\", \"+05:30\"},\n        {\"CST China\", \"+08:00\"},\n        {\"JST\", \"+09:00\"},\n        {\"AEST\", \"+10:00\"}\n    };\n    \n    auto it = timeZoneOffsets.find(timeZone);\n    if (it != timeZoneOffsets.end()) {\n        return it->second;\n    } else {\n        return \"Invalid time zone\";\n    }\n}\n\nint main() {\n    std::string timeZone = \"EST\";\n    std::cout << \"UTC Offset for \" << timeZone << \" is \" << getUTCOffset(timeZone) << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Build a dictionary to store the names of programming languages and their creators.",
    "code": "```cpp\n#include <iostream>\n#include <map>\n#include <string>\n\nint main() {\n    std::map<std::string, std::string> languageCreators;\n\n    languageCreators[\"C++\"] = \"Bjarne Stroustrup\";\n    languageCreators[\"Python\"] = \"Guido van Rossum\";\n    languageCreators[\"Java\"] = \"James Gosling\";\n    languageCreators[\"Ruby\"] = \"Yukihiro Matsumoto\";\n    languageCreators[\"JavaScript\"] = \"Brendan Eich\";\n\n    for (const auto& pair : languageCreators) {\n        std::cout << \"Language: \" << pair.first << \", Creator: \" << pair.second << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a map to manage a list of subscribers to a newsletter, allowing subscriptions and cancellations.",
    "code": "```cpp\n#include <iostream>\n#include <map>\n#include <string>\n\nint main() {\n    std::map<std::string, bool> subscribers;\n    std::string command;\n    std::string email;\n\n    while (true) {\n        std::cout << \"Enter command (subscribe, cancel, list, exit): \";\n        std::cin >> command;\n\n        if (command == \"subscribe\") {\n            std::cout << \"Enter email to subscribe: \";\n            std::cin >> email;\n            subscribers[email] = true;\n            std::cout << email << \" subscribed.\\n\";\n        } else if (command == \"cancel\") {\n            std::cout << \"Enter email to cancel: \";\n            std::cin >> email;\n            auto it = subscribers.find(email);\n            if (it != subscribers.end()) {\n                subscribers.erase(it);\n                std::cout << email << \" canceled.\\n\";\n            } else {\n                std::cout << email << \" not found.\\n\";\n            }\n        } else if (command == \"list\") {\n            std::cout << \"Subscribers list:\\n\";\n            for (const auto& subscriber : subscribers) {\n                std::cout << subscriber.first << \"\\n\";\n            }\n        } else if (command == \"exit\") {\n            break;\n        } else {\n            std::cout << \"Invalid command.\\n\";\n        }\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a program that uses a dictionary to track the number of likes for social media posts.",
    "code": "```cpp\n#include <iostream>\n#include <map>\n#include <string>\n\nint main() {\n    std::map<std::string, int> likes;\n\n    // Example posts\n    likes[\"Post1\"] = 0;\n    likes[\"Post2\"] = 0;\n    likes[\"Post3\"] = 0;\n\n    // Simulate liking posts\n    likes[\"Post1\"] += 1;\n    likes[\"Post2\"] += 2;\n    likes[\"Post3\"] += 3;\n    likes[\"Post1\"] += 2;\n\n    // Output the number of likes for each post\n    for (const auto& post : likes) {\n        std::cout << post.first << \" has \" << post.second << \" likes.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a dictionary to store the names of elements and their atomic numbers, allowing lookups by element name.",
    "code": "```cpp\n#include <iostream>\n#include <map>\n#include <string>\n\nint main() {\n    std::map<std::string, int> elementDictionary;\n    \n    // Adding elements and their atomic numbers\n    elementDictionary[\"Hydrogen\"] = 1;\n    elementDictionary[\"Helium\"] = 2;\n    elementDictionary[\"Lithium\"] = 3;\n    elementDictionary[\"Beryllium\"] = 4;\n    elementDictionary[\"Boron\"] = 5;\n    \n    // Example lookup\n    std::string elementName = \"Helium\";\n    if (elementDictionary.find(elementName) != elementDictionary.end()) {\n        std::cout << \"The atomic number of \" << elementName << \" is \" \n                  << elementDictionary[elementName] << \".\" << std::endl;\n    } else {\n        std::cout << elementName << \" is not in the dictionary.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that uses a map to group movies by their directors.",
    "code": "```cpp\n#include <iostream>\n#include <map>\n#include <vector>\n#include <string>\n\nstd::map<std::string, std::vector<std::string>> groupMoviesByDirector(const std::vector<std::pair<std::string, std::string>>& movies) {\n    std::map<std::string, std::vector<std::string>> directorsMap;\n    for (const auto& movie : movies) {\n        const std::string& director = movie.first;\n        const std::string& movieTitle = movie.second;\n        directorsMap[director].push_back(movieTitle);\n    }\n    return directorsMap;\n}\n\nint main() {\n    std::vector<std::pair<std::string, std::string>> movies = {\n        {\"Christopher Nolan\", \"Inception\"},\n        {\"Christopher Nolan\", \"Interstellar\"},\n        {\"Quentin Tarantino\", \"Pulp Fiction\"},\n        {\"Quentin Tarantino\", \"Kill Bill\"},\n        {\"Steven Spielberg\", \"Jurassic Park\"}\n    };\n\n    std::map<std::string, std::vector<std::string>> directorsMap = groupMoviesByDirector(movies);\n\n    for (const auto& entry : directorsMap) {\n        std::cout << entry.first << \": \";\n        for (const auto& title : entry.second) {\n            std::cout << title << \", \";\n        }\n        std::cout << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a dictionary to store the names of historical figures and their birth years.",
    "code": "```cpp\n#include <iostream>\n#include <map>\n#include <string>\n\nint main() {\n    std::map<std::string, int> historicalFigures;\n    \n    historicalFigures[\"Albert Einstein\"] = 1879;\n    historicalFigures[\"Isaac Newton\"] = 1643;\n    historicalFigures[\"Marie Curie\"] = 1867;\n    historicalFigures[\"Leonardo da Vinci\"] = 1452;\n    historicalFigures[\"Galileo Galilei\"] = 1564;\n\n    for (const auto& figure : historicalFigures) {\n        std::cout << figure.first << \" was born in \" << figure.second << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Build a program that uses a map to store the names of planets and their diameters.",
    "code": "```cpp\n#include <iostream>\n#include <map>\n#include <string>\n\nint main() {\n    std::map<std::string, double> planets;\n\n    planets[\"Mercury\"] = 4879.4;\n    planets[\"Venus\"] = 12104;\n    planets[\"Earth\"] = 12742;\n    planets[\"Mars\"] = 6779;\n    planets[\"Jupiter\"] = 139820;\n    planets[\"Saturn\"] = 116460;\n    planets[\"Uranus\"] = 50724;\n    planets[\"Neptune\"] = 49244;\n\n    for (const auto& planet : planets) {\n        std::cout << \"The diameter of \" << planet.first << \" is \" << planet.second << \" km.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a dictionary to track the ratings of restaurants, allowing updates to ratings.",
    "code": "```cpp\n#include <iostream>\n#include <map>\n#include <string>\n\nint main() {\n    std::map<std::string, double> restaurantRatings;\n\n    // Adding or updating ratings\n    restaurantRatings[\"Pizza Place\"] = 4.5;\n    restaurantRatings[\"Burger Joint\"] = 3.8;\n    restaurantRatings[\"Sushi Spot\"] = 4.7;\n\n    // Update a rating\n    restaurantRatings[\"Burger Joint\"] = 4.1;\n\n    // Display the ratings\n    for (const auto& pair : restaurantRatings) {\n        std::cout << pair.first << \": \" << pair.second << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a script that uses a map to translate binary numbers to decimal.",
    "code": "```cpp\n#include <iostream>\n#include <map>\n#include <string>\n\n// Function to convert binary string to decimal\nint binaryToDecimal(const std::string &binary) {\n    int decimal = 0;\n    int base = 1;\n    for (int i = binary.length() - 1; i >= 0; --i) {\n        if (binary[i] == '1') {\n            decimal += base;\n        }\n        base *= 2;\n    }\n    return decimal;\n}\n\nint main() {\n    std::map<std::string, int> binaryToDecimalMap;\n\n    // Example binary numbers\n    std::string binaries[] = {\"101\", \"110\", \"111\", \"1001\", \"1010\"};\n\n    // Populate the map with binary to decimal conversions\n    for (const auto &binary : binaries) {\n        binaryToDecimalMap[binary] = binaryToDecimal(binary);\n    }\n\n    // Output the map\n    for (const auto &pair : binaryToDecimalMap) {\n        std::cout << \"Binary: \" << pair.first << \" -> Decimal: \" << pair.second << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a dictionary to store the names of artists and their famous works.",
    "code": "```cpp\n#include <iostream>\n#include <map>\n#include <string>\n\nint main() {\n    std::map<std::string, std::string> artistWorks;\n\n    artistWorks[\"Leonardo da Vinci\"] = \"Mona Lisa\";\n    artistWorks[\"Vincent van Gogh\"] = \"Starry Night\";\n    artistWorks[\"Pablo Picasso\"] = \"Guernica\";\n    artistWorks[\"Claude Monet\"] = \"Water Lilies\";\n\n    for (const auto& pair : artistWorks) {\n        std::cout << pair.first << \": \" << pair.second << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a system that uses a map to track the maintenance schedules of vehicles.",
    "code": "```cpp\n#include <iostream>\n#include <map>\n#include <string>\n\nint main() {\n    std::map<std::string, std::string> maintenanceSchedule;\n\n    // Adding vehicles and their maintenance schedules\n    maintenanceSchedule[\"Car1\"] = \"2023-12-01\";\n    maintenanceSchedule[\"Car2\"] = \"2024-01-15\";\n    maintenanceSchedule[\"Truck1\"] = \"2023-11-20\";\n\n    // Accessing and printing the maintenance schedule\n    for(const auto& vehicle : maintenanceSchedule) {\n        std::cout << \"Vehicle: \" << vehicle.first << \", Next Maintenance: \" << vehicle.second << std::endl;\n    }\n\n    // Update a maintenance schedule\n    maintenanceSchedule[\"Car1\"] = \"2023-12-15\";\n\n    // Remove a vehicle from the schedule\n    maintenanceSchedule.erase(\"Truck1\");\n\n    // Final state of the maintenance schedule\n    std::cout << \"\\nUpdated Maintenance Schedule:\" << std::endl;\n    for(const auto& vehicle : maintenanceSchedule) {\n        std::cout << \"Vehicle: \" << vehicle.first << \", Next Maintenance: \" << vehicle.second << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a program that uses a dictionary to associate languages with their number of speakers worldwide.",
    "code": "```cpp\n#include <iostream>\n#include <unordered_map>\n#include <string>\n\nint main() {\n    std::unordered_map<std::string, long long> languageSpeakers;\n    \n    languageSpeakers[\"English\"] = 1500000000;\n    languageSpeakers[\"Mandarin\"] = 1117000000;\n    languageSpeakers[\"Hindi\"] = 615000000;\n    languageSpeakers[\"Spanish\"] = 534000000;\n    languageSpeakers[\"French\"] = 280000000;\n    \n    for (const auto& pair : languageSpeakers) {\n        std::cout << pair.first << \" has \" << pair.second << \" speakers worldwide.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a map to store the names of cities and their average annual temperatures.",
    "code": "```cpp\n#include <iostream>\n#include <map>\n#include <string>\n\nint main() {\n    std::map<std::string, double> cityTemperatures;\n\n    cityTemperatures[\"New York\"] = 12.4;\n    cityTemperatures[\"Los Angeles\"] = 18.7;\n    cityTemperatures[\"Chicago\"] = 10.2;\n    cityTemperatures[\"Houston\"] = 20.8;\n    cityTemperatures[\"Phoenix\"] = 22.3;\n\n    for (const auto& city : cityTemperatures) {\n        std::cout << \"City: \" << city.first << \", Average Temperature: \" << city.second << \"\u00b0C\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that uses a dictionary to convert metric units to imperial units.",
    "code": "```cpp\n#include <iostream>\n#include <unordered_map>\n#include <string>\n\ndouble convertMetricToImperial(const std::string& metricUnit, double value) {\n    std::unordered_map<std::string, double> conversionMap = {\n        {\"meters\", 3.28084},  // meters to feet\n        {\"kilograms\", 2.20462},  // kilograms to pounds\n        {\"liters\", 0.264172},  // liters to gallons\n        {\"centimeters\", 0.393701},  // centimeters to inches\n        {\"grams\", 0.035274}  // grams to ounces\n    };\n\n    auto it = conversionMap.find(metricUnit);\n    if (it != conversionMap.end()) {\n        return value * it->second;\n    } else {\n        std::cerr << \"Unknown metric unit.\" << std::endl;\n        return 0.0;\n    }\n}\n\nint main() {\n    double valueInFeet = convertMetricToImperial(\"meters\", 10.0);\n    std::cout << \"10 meters in feet: \" << valueInFeet << std::endl;\n\n    double valueInPounds = convertMetricToImperial(\"kilograms\", 5.0);\n    std::cout << \"5 kilograms in pounds: \" << valueInPounds << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Build a dictionary to store the names of sports and their respective world records.",
    "code": "```cpp\n#include <iostream>\n#include <map>\n#include <string>\n\nint main() {\n    std::map<std::string, std::string> sportsRecords;\n    \n    sportsRecords[\"100m Sprint\"] = \"9.58s\";\n    sportsRecords[\"Long Jump\"] = \"8.95m\";\n    sportsRecords[\"High Jump\"] = \"2.45m\";\n    sportsRecords[\"Marathon\"] = \"2:01:39\";\n    \n    for (const auto &entry : sportsRecords) {\n        std::cout << \"Sport: \" << entry.first << \", World Record: \" << entry.second << std::endl;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Implement a map to manage a list of favorite movies, allowing additions and deletions.",
    "code": "```cpp\n#include <iostream>\n#include <map>\n#include <string>\n\nint main() {\n    std::map<int, std::string> favoriteMovies;\n\n    // Add movies\n    favoriteMovies[1] = \"Inception\";\n    favoriteMovies[2] = \"The Matrix\";\n    favoriteMovies[3] = \"Interstellar\";\n\n    // Delete a movie\n    favoriteMovies.erase(2);\n\n    // Display movies\n    for (const auto& movie : favoriteMovies) {\n        std::cout << \"Rank: \" << movie.first << \", Movie: \" << movie.second << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a program that uses a dictionary to track the distances between pairs of cities.",
    "code": "```cpp\n#include <iostream>\n#include <map>\n#include <string>\n\nint main() {\n    std::map<std::pair<std::string, std::string>, double> cityDistances;\n\n    // Example entries\n    cityDistances[{\"New York\", \"Los Angeles\"}] = 2451.0;\n    cityDistances[{\"New York\", \"Chicago\"}] = 790.0;\n    cityDistances[{\"Chicago\", \"Los Angeles\"}] = 2015.0;\n\n    // Access and print distances\n    for (const auto &entry : cityDistances) {\n        std::cout << \"Distance from \" << entry.first.first << \" to \"\n                  << entry.first.second << \" is \" << entry.second << \" miles.\\n\";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a dictionary to store the names of planets and their orbital periods.",
    "code": "```cpp\n#include <iostream>\n#include <map>\n#include <string>\n\nint main() {\n    std::map<std::string, double> planetOrbitalPeriods;\n\n    planetOrbitalPeriods[\"Mercury\"] = 88.0;\n    planetOrbitalPeriods[\"Venus\"] = 224.7;\n    planetOrbitalPeriods[\"Earth\"] = 365.2;\n    planetOrbitalPeriods[\"Mars\"] = 687.0;\n    planetOrbitalPeriods[\"Jupiter\"] = 4331.0;\n    planetOrbitalPeriods[\"Saturn\"] = 10747.0;\n    planetOrbitalPeriods[\"Uranus\"] = 30589.0;\n    planetOrbitalPeriods[\"Neptune\"] = 59800.0;\n\n    for (const auto& planet : planetOrbitalPeriods) {\n        std::cout << \"Planet: \" << planet.first << \", Orbital Period: \" << planet.second << \" days\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that uses a map to convert HTML color codes to their respective color names.",
    "code": "```cpp\n#include <iostream>\n#include <unordered_map>\n#include <string>\n\nstd::string getColorNameFromCode(const std::string& colorCode) {\n    std::unordered_map<std::string, std::string> colorMap = {\n        {\"#FFFFFF\", \"White\"},\n        {\"#000000\", \"Black\"},\n        {\"#FF0000\", \"Red\"},\n        {\"#00FF00\", \"Lime\"},\n        {\"#0000FF\", \"Blue\"},\n        {\"#FFFF00\", \"Yellow\"},\n        {\"#00FFFF\", \"Cyan\"},\n        {\"#FF00FF\", \"Magenta\"},\n        {\"#C0C0C0\", \"Silver\"},\n        {\"#808080\", \"Gray\"},\n        {\"#800000\", \"Maroon\"},\n        {\"#808000\", \"Olive\"},\n        {\"#008000\", \"Green\"},\n        {\"#800080\", \"Purple\"},\n        {\"#008080\", \"Teal\"},\n        {\"#000080\", \"Navy\"}\n    };\n\n    auto it = colorMap.find(colorCode);\n    if (it != colorMap.end()) {\n        return it->second;\n    } else {\n        return \"Unknown\";\n    }\n}\n\nint main() {\n    std::string colorCode = \"#FF0000\";\n    std::string colorName = getColorNameFromCode(colorCode);\n    std::cout << \"The color name for \" << colorCode << \" is \" << colorName << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Create a dictionary to store the names of composers and their famous compositions.",
    "code": "```cpp\n#include <iostream>\n#include <map>\n#include <string>\n\nint main() {\n    std::map<std::string, std::string> composers;\n\n    composers[\"Ludwig van Beethoven\"] = \"Symphony No. 9\";\n    composers[\"Wolfgang Amadeus Mozart\"] = \"Requiem\";\n    composers[\"Johann Sebastian Bach\"] = \"Toccata and Fugue in D minor\";\n    composers[\"Fr\u00e9d\u00e9ric Chopin\"] = \"Nocturne in E-flat major, Op. 9, No. 2\";\n    composers[\"Pyotr Ilyich Tchaikovsky\"] = \"Swan Lake\";\n\n    for (const auto& pair : composers) {\n        std::cout << pair.first << \": \" << pair.second << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Build a program that uses a map to store the names of bridges and their lengths.",
    "code": "```cpp\n#include <iostream>\n#include <map>\n#include <string>\n\nint main() {\n    std::map<std::string, double> bridges;\n\n    // Adding bridges and their lengths\n    bridges[\"Golden Gate Bridge\"] = 2737.4;\n    bridges[\"Brooklyn Bridge\"] = 1825.0;\n    bridges[\"Tower Bridge\"] = 244.0;\n    bridges[\"Sydney Harbour Bridge\"] = 1149.0;\n\n    // Output the bridges and their lengths\n    for (const auto& bridge : bridges) {\n        std::cout << \"Bridge: \" << bridge.first << \", Length: \" << bridge.second << \" meters\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a dictionary to manage a list of personal goals, allowing updates to goals.",
    "code": "```cpp\n#include <iostream>\n#include <unordered_map>\n#include <string>\n\nint main() {\n    std::unordered_map<std::string, std::string> personalGoals;\n    \n    // Add some initial goals\n    personalGoals[\"Health\"] = \"Run a marathon\";\n    personalGoals[\"Career\"] = \"Get a promotion\";\n    personalGoals[\"Education\"] = \"Learn a new language\";\n    \n    // Update a goal\n    personalGoals[\"Health\"] = \"Join a gym\";\n\n    // Print all goals\n    for (const auto& goal : personalGoals) {\n        std::cout << goal.first << \": \" << goal.second << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a script that uses a map to convert hexadecimal numbers to binary.",
    "code": "```cpp\n#include <iostream>\n#include <unordered_map>\n#include <string>\n\nint main() {\n    std::unordered_map<char, std::string> hexToBinary = {\n        {'0', \"0000\"}, {'1', \"0001\"}, {'2', \"0010\"}, {'3', \"0011\"},\n        {'4', \"0100\"}, {'5', \"0101\"}, {'6', \"0110\"}, {'7', \"0111\"},\n        {'8', \"1000\"}, {'9', \"1001\"}, {'A', \"1010\"}, {'B', \"1011\"},\n        {'C', \"1100\"}, {'D', \"1101\"}, {'E', \"1110\"}, {'F', \"1111\"}\n    };\n\n    std::string hexNumber = \"1A3F\";\n    std::string binaryResult;\n\n    for (char hexDigit : hexNumber) {\n        binaryResult += hexToBinary[hexDigit];\n    }\n\n    std::cout << \"Hexadecimal: \" << hexNumber << \" -> Binary: \" << binaryResult << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a dictionary to store the names of trees and their average heights.",
    "code": "```cpp\n#include <iostream>\n#include <map>\n#include <string>\n\nint main() {\n    std::map<std::string, double> treeHeights;\n    \n    // Add entries to the dictionary\n    treeHeights[\"Oak\"] = 70.0;\n    treeHeights[\"Pine\"] = 80.0;\n    treeHeights[\"Birch\"] = 50.0;\n    treeHeights[\"Maple\"] = 60.0;\n\n    // Example of accessing a value\n    std::cout << \"The average height of an Oak is \" << treeHeights[\"Oak\"] << \" feet.\" << std::endl;\n\n    return 0;\n}\n```"
  }
]