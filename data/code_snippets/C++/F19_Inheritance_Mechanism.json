[
  {
    "task": "Create a base class for a vehicle with methods for speed and fuel efficiency, then derive a car class that overrides these methods to provide specific implementations.",
    "code": "```cpp\n#include <iostream>\n\nclass Vehicle {\npublic:\n    virtual void speed() const {\n        std::cout << \"Vehicle speed is not specified.\" << std::endl;\n    }\n\n    virtual void fuelEfficiency() const {\n        std::cout << \"Vehicle fuel efficiency is not specified.\" << std::endl;\n    }\n};\n\nclass Car : public Vehicle {\npublic:\n    void speed() const override {\n        std::cout << \"Car speed is 120 km/h.\" << std::endl;\n    }\n\n    void fuelEfficiency() const override {\n        std::cout << \"Car fuel efficiency is 15 km/l.\" << std::endl;\n    }\n};\n\nint main() {\n    Vehicle *v = new Car();\n    v->speed();\n    v->fuelEfficiency();\n    delete v;\n    return 0;\n}\n```"
  },
  {
    "task": "Design a base class for a multimedia file with properties like duration and format, then extend it with a video class that includes resolution and frame rate.",
    "code": "```cpp\n#include <string>\n\nclass MultimediaFile {\nprotected:\n    double duration;\n    std::string format;\n\npublic:\n    MultimediaFile(double dur, const std::string& fmt) : duration(dur), format(fmt) {}\n\n    double getDuration() const {\n        return duration;\n    }\n\n    std::string getFormat() const {\n        return format;\n    }\n};\n\nclass VideoFile : public MultimediaFile {\nprivate:\n    int resolutionWidth;\n    int resolutionHeight;\n    double frameRate;\n\npublic:\n    VideoFile(double dur, const std::string& fmt, int resW, int resH, double fr)\n        : MultimediaFile(dur, fmt), resolutionWidth(resW), resolutionHeight(resH), frameRate(fr) {}\n\n    int getResolutionWidth() const {\n        return resolutionWidth;\n    }\n\n    int getResolutionHeight() const {\n        return resolutionHeight;\n    }\n\n    double getFrameRate() const {\n        return frameRate;\n    }\n};\n```"
  },
  {
    "task": "Develop a superclass for bank accounts with methods for deposit and withdrawal, then create a savings account subclass that overrides the withdrawal method to incorporate interest deductions.",
    "code": "```cpp\n#include <iostream>\n\nclass BankAccount {\nprotected:\n    double balance;\npublic:\n    BankAccount(double initial_balance) : balance(initial_balance) {}\n\n    void deposit(double amount) {\n        balance += amount;\n    }\n\n    virtual void withdraw(double amount) {\n        if (amount <= balance) {\n            balance -= amount;\n        } else {\n            std::cout << \"Insufficient funds\\n\";\n        }\n    }\n\n    double getBalance() const {\n        return balance;\n    }\n};\n\nclass SavingsAccount : public BankAccount {\nprivate:\n    double interestRate;\npublic:\n    SavingsAccount(double initial_balance, double rate) \n        : BankAccount(initial_balance), interestRate(rate) {}\n\n    void withdraw(double amount) override {\n        double deduction = amount * interestRate;\n        double totalAmount = amount + deduction;\n        if (totalAmount <= balance) {\n            balance -= totalAmount;\n        } else {\n            std::cout << \"Insufficient funds, including interest deduction\\n\";\n        }\n    }\n};\n\nint main() {\n    SavingsAccount sa(1000, 0.02);\n    sa.deposit(200);\n    std::cout << \"Balance after deposit: \" << sa.getBalance() << \"\\n\";\n    sa.withdraw(100);\n    std::cout << \"Balance after withdrawal: \" << sa.getBalance() << \"\\n\";\n    sa.withdraw(1200);\n    std::cout << \"Balance after withdrawal attempt: \" << sa.getBalance() << \"\\n\";\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a base class for a geometric shape with methods to calculate area and perimeter, then create a rectangle subclass that provides specific calculations for these methods.",
    "code": "```cpp\n#include <iostream>\n\nclass Shape {\npublic:\n    virtual double area() const = 0;\n    virtual double perimeter() const = 0;\n};\n\nclass Rectangle : public Shape {\nprivate:\n    double width;\n    double height;\npublic:\n    Rectangle(double w, double h) : width(w), height(h) {}\n\n    double area() const override {\n        return width * height;\n    }\n\n    double perimeter() const override {\n        return 2 * (width + height);\n    }\n};\n\nint main() {\n    Rectangle rect(5.0, 3.0);\n    std::cout << \"Area: \" << rect.area() << std::endl;\n    std::cout << \"Perimeter: \" << rect.perimeter() << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Construct a parent class for employees with a method to calculate salary, then derive a manager class that overrides this method to include bonuses.",
    "code": "```cpp\n#include <iostream>\n\nclass Employee {\npublic:\n    virtual double calculateSalary(double baseSalary) {\n        return baseSalary;\n    }\n};\n\nclass Manager : public Employee {\npublic:\n    double calculateSalary(double baseSalary) override {\n        double bonus = 1000.0; // Example bonus amount\n        return baseSalary + bonus;\n    }\n};\n\nint main() {\n    Employee employee;\n    Manager manager;\n    \n    double employeeSalary = employee.calculateSalary(5000.0);\n    double managerSalary = manager.calculateSalary(5000.0);\n    \n    std::cout << \"Employee Salary: \" << employeeSalary << std::endl;\n    std::cout << \"Manager Salary: \" << managerSalary << std::endl;\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Set up a base class for a library item with properties like title and author, and extend it with a book subclass that adds a number of pages property.",
    "code": "```cpp\n#include <string>\n\nclass LibraryItem {\nprotected:\n    std::string title;\n    std::string author;\n\npublic:\n    LibraryItem(const std::string& t, const std::string& a)\n        : title(t), author(a) {}\n    \n    std::string getTitle() const { return title; }\n    std::string getAuthor() const { return author; }\n};\n\nclass Book : public LibraryItem {\nprivate:\n    int numberOfPages;\n\npublic:\n    Book(const std::string& t, const std::string& a, int pages)\n        : LibraryItem(t, a), numberOfPages(pages) {}\n    \n    int getNumberOfPages() const { return numberOfPages; }\n};\n```"
  },
  {
    "task": "Create a foundation class for an electronic device with a method to turn on and off, and derive a smartphone class that overrides the turn on method to require a passcode.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass ElectronicDevice {\npublic:\n    virtual void turnOn() {\n        std::cout << \"Device is turned on.\" << std::endl;\n    }\n\n    void turnOff() {\n        std::cout << \"Device is turned off.\" << std::endl;\n    }\n};\n\nclass Smartphone : public ElectronicDevice {\npublic:\n    void turnOn() override {\n        std::string passcode;\n        std::cout << \"Enter passcode to turn on: \";\n        std::cin >> passcode;\n        if (passcode == \"1234\") {\n            std::cout << \"Smartphone is turned on.\" << std::endl;\n        } else {\n            std::cout << \"Incorrect passcode. Smartphone stays off.\" << std::endl;\n        }\n    }\n};\n\nint main() {\n    ElectronicDevice device;\n    Smartphone phone;\n\n    device.turnOn();\n    device.turnOff();\n\n    phone.turnOn();\n    phone.turnOff();\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a base class for an animal with a method to make a sound, then create a dog subclass that overrides this method to bark.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass Animal {\npublic:\n    virtual void makeSound() const {\n        std::cout << \"Animal sound\" << std::endl;\n    }\n};\n\nclass Dog : public Animal {\npublic:\n    void makeSound() const override {\n        std::cout << \"Bark\" << std::endl;\n    }\n};\n\nint main() {\n    Animal* animal = new Animal();\n    Animal* dog = new Dog();\n\n    animal->makeSound();\n    dog->makeSound();\n\n    delete animal;\n    delete dog;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a superclass for meals with a method to calculate calories, then create a dessert subclass that overrides it to add extra sugar calories.",
    "code": "```cpp\n#include <iostream>\n\nclass Meal {\npublic:\n    virtual int calculateCalories() const {\n        return 200; // Base calories for a meal\n    }\n};\n\nclass Dessert : public Meal {\npublic:\n    int calculateCalories() const override {\n        int baseCalories = Meal::calculateCalories();\n        int sugarCalories = 50; // Additional calories from sugar\n        return baseCalories + sugarCalories;\n    }\n};\n\nint main() {\n    Meal meal;\n    Dessert dessert;\n    \n    std::cout << \"Meal calories: \" << meal.calculateCalories() << std::endl;\n    std::cout << \"Dessert calories: \" << dessert.calculateCalories() << std::endl;\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Implement a base class for a transportation mode with a method to calculate travel time, then extend it with a plane subclass that overrides the method to calculate based on speed.",
    "code": "```cpp\n#include <iostream>\n\nclass TransportationMode {\npublic:\n    virtual double calculateTravelTime(double distance) {\n        // Default implementation: assumes constant speed of 50 km/h\n        return distance / 50.0;\n    }\n};\n\nclass Plane : public TransportationMode {\npublic:\n    double calculateTravelTime(double distance) override {\n        // Plane speed is assumed to be 900 km/h\n        return distance / 900.0;\n    }\n};\n\nint main() {\n    TransportationMode* transport = new TransportationMode();\n    Plane* plane = new Plane();\n\n    double distance = 450.0;\n\n    std::cout << \"Travel time by transport: \" << transport->calculateTravelTime(distance) << \" hours\" << std::endl;\n    std::cout << \"Travel time by plane: \" << plane->calculateTravelTime(distance) << \" hours\" << std::endl;\n\n    delete transport;\n    delete plane;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Construct a parent class for a musical instrument with a method to play sound, then derive a piano class that overrides the method to play specific notes.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass MusicalInstrument {\npublic:\n    virtual void playSound() const {\n        std::cout << \"Playing instrument sound.\" << std::endl;\n    }\n};\n\nclass Piano : public MusicalInstrument {\npublic:\n    void playSound() const override {\n        std::cout << \"Playing piano notes: C D E F G A B\" << std::endl;\n    }\n};\n\nint main() {\n    MusicalInstrument instrument;\n    Piano piano;\n\n    instrument.playSound();\n    piano.playSound();\n\n    return 0;\n}\n```"
  },
  {
    "task": "Set up a base class for a user account with a method to reset password, and extend it with an admin account subclass that overrides it to include security questions.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass UserAccount {\npublic:\n    virtual void resetPassword() {\n        std::cout << \"Password reset via email.\" << std::endl;\n    }\n};\n\nclass AdminAccount : public UserAccount {\npublic:\n    void resetPassword() override {\n        std::cout << \"Password reset via security questions.\" << std::endl;\n    }\n};\n\nint main() {\n    UserAccount user;\n    AdminAccount admin;\n\n    user.resetPassword();\n    admin.resetPassword();\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a foundational class for a beverage with properties like volume and temperature, and derive a coffee class that overrides the temperature property to be hot.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass Beverage {\nprotected:\n    double volume;\n    std::string temperature;\n\npublic:\n    Beverage(double vol, std::string temp) : volume(vol), temperature(temp) {}\n\n    virtual std::string getTemperature() const {\n        return temperature;\n    }\n\n    double getVolume() const {\n        return volume;\n    }\n};\n\nclass Coffee : public Beverage {\npublic:\n    Coffee(double vol) : Beverage(vol, \"hot\") {}\n\n    std::string getTemperature() const override {\n        return \"hot\";\n    }\n};\n\nint main() {\n    Beverage beverage(250, \"cold\");\n    Coffee coffee(300);\n\n    std::cout << \"Beverage is \" << beverage.getTemperature() << \" and has volume of \" << beverage.getVolume() << \" ml.\\n\";\n    std::cout << \"Coffee is \" << coffee.getTemperature() << \" and has volume of \" << coffee.getVolume() << \" ml.\\n\";\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a base class for a service appointment with a method to schedule time, then create a doctor appointment subclass that overrides this method to include consultation duration.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass ServiceAppointment {\npublic:\n    virtual void scheduleTime(const std::string& time) {\n        std::cout << \"Scheduled appointment at: \" << time << std::endl;\n    }\n};\n\nclass DoctorAppointment : public ServiceAppointment {\npublic:\n    void scheduleTime(const std::string& time, int duration) override {\n        std::cout << \"Scheduled doctor appointment at: \" << time \n                  << \" for \" << duration << \" minutes.\" << std::endl;\n    }\n};\n\nint main() {\n    ServiceAppointment serviceAppt;\n    serviceAppt.scheduleTime(\"10:00 AM\");\n\n    DoctorAppointment doctorAppt;\n    doctorAppt.scheduleTime(\"11:00 AM\", 30);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a superclass for electronic gadgets with a method to calculate battery life, then extend it with a laptop class that overrides this method to consider usage patterns.",
    "code": "```cpp\n#include <iostream>\n\nclass ElectronicGadget {\npublic:\n    virtual double calculateBatteryLife(double batteryCapacity) {\n        // Basic calculation for battery life\n        return batteryCapacity / 10.0; // Placeholder value\n    }\n};\n\nclass Laptop : public ElectronicGadget {\npublic:\n    double calculateBatteryLife(double batteryCapacity) override {\n        // More complex calculation considering usage patterns\n        double usagePatternFactor = 1.5; // Placeholder value\n        return (batteryCapacity / 10.0) / usagePatternFactor;\n    }\n};\n\nint main() {\n    ElectronicGadget gadget;\n    Laptop laptop;\n\n    double gadgetBatteryLife = gadget.calculateBatteryLife(50.0);\n    double laptopBatteryLife = laptop.calculateBatteryLife(50.0);\n\n    std::cout << \"Gadget Battery Life: \" << gadgetBatteryLife << \" hours\" << std::endl;\n    std::cout << \"Laptop Battery Life: \" << laptopBatteryLife << \" hours\" << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a base class for a website component with a method to render content, then create a blog post subclass that overrides this method to include author information.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass WebsiteComponent {\npublic:\n    virtual void renderContent() {\n        std::cout << \"Rendering website component content.\" << std::endl;\n    }\n};\n\nclass BlogPost : public WebsiteComponent {\nprivate:\n    std::string author;\npublic:\n    BlogPost(const std::string& authorName) : author(authorName) {}\n\n    void renderContent() override {\n        std::cout << \"Rendering blog post content by \" << author << \".\" << std::endl;\n    }\n};\n\nint main() {\n    WebsiteComponent component;\n    component.renderContent();\n\n    BlogPost post(\"John Doe\");\n    post.renderContent();\n\n    return 0;\n}\n```"
  },
  {
    "task": "Construct a parent class for a recipe with methods for ingredients and instructions, then derive a cake recipe class that overrides these methods to add baking steps.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n\nclass Recipe {\npublic:\n    virtual void ingredients() {\n        std::cout << \"List of ingredients:\\n\";\n    }\n    \n    virtual void instructions() {\n        std::cout << \"General instructions:\\n\";\n    }\n};\n\nclass CakeRecipe : public Recipe {\npublic:\n    void ingredients() override {\n        std::cout << \"Ingredients for cake:\\n\";\n        std::cout << \"- 2 cups flour\\n\";\n        std::cout << \"- 1 cup sugar\\n\";\n        std::cout << \"- 1/2 cup butter\\n\";\n        std::cout << \"- 3 eggs\\n\";\n    }\n    \n    void instructions() override {\n        std::cout << \"Cake baking instructions:\\n\";\n        std::cout << \"1. Preheat oven to 350 degrees F (175 degrees C).\\n\";\n        std::cout << \"2. Mix all ingredients until smooth.\\n\";\n        std::cout << \"3. Pour batter into a greased pan.\\n\";\n        std::cout << \"4. Bake for 30 minutes.\\n\";\n    }\n};\n\nint main() {\n    CakeRecipe cake;\n    cake.ingredients();\n    cake.instructions();\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Set up a base class for a plant with methods for sunlight and water needs, and extend it with a cactus subclass that overrides these methods to require less water.",
    "code": "```cpp\n#include <iostream>\n\nclass Plant {\npublic:\n    virtual void sunlightNeeds() {\n        std::cout << \"Needs moderate sunlight.\" << std::endl;\n    }\n\n    virtual void waterNeeds() {\n        std::cout << \"Needs regular watering.\" << std::endl;\n    }\n};\n\nclass Cactus : public Plant {\npublic:\n    void sunlightNeeds() override {\n        std::cout << \"Needs plenty of sunlight.\" << std::endl;\n    }\n\n    void waterNeeds() override {\n        std::cout << \"Needs minimal watering.\" << std::endl;\n    }\n};\n\nint main() {\n    Plant plant;\n    Cactus cactus;\n\n    plant.sunlightNeeds();\n    plant.waterNeeds();\n\n    cactus.sunlightNeeds();\n    cactus.waterNeeds();\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a foundational class for a building with properties like height and material, and derive a skyscraper class that overrides the height property to be significantly taller.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass Building {\nprotected:\n    double height;\n    std::string material;\n\npublic:\n    Building(double h, const std::string& m) : height(h), material(m) {}\n\n    virtual double getHeight() const {\n        return height;\n    }\n\n    virtual std::string getMaterial() const {\n        return material;\n    }\n};\n\nclass Skyscraper : public Building {\npublic:\n    Skyscraper(double h, const std::string& m) : Building(h, m) {}\n\n    double getHeight() const override {\n        return height * 10; // Assume skyscrapers are 10 times taller\n    }\n};\n\nint main() {\n    Building building(50, \"Concrete\");\n    Skyscraper skyscraper(50, \"Steel\");\n\n    std::cout << \"Building height: \" << building.getHeight() << \" meters\" << std::endl;\n    std::cout << \"Skyscraper height: \" << skyscraper.getHeight() << \" meters\" << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a base class for a payment method with a method to process transactions, then create a credit card subclass that overrides this method to include credit limits.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass PaymentMethod {\npublic:\n    virtual void processTransaction(double amount) {\n        std::cout << \"Processing transaction of amount: $\" << amount << std::endl;\n    }\n};\n\nclass CreditCard : public PaymentMethod {\nprivate:\n    double creditLimit;\n    double currentDebt;\n\npublic:\n    CreditCard(double limit) : creditLimit(limit), currentDebt(0) {}\n\n    void processTransaction(double amount) override {\n        if (currentDebt + amount <= creditLimit) {\n            currentDebt += amount;\n            std::cout << \"Credit card transaction approved for amount: $\" << amount << std::endl;\n        } else {\n            std::cout << \"Credit card transaction denied. Exceeds credit limit.\" << std::endl;\n        }\n    }\n};\n\nint main() {\n    PaymentMethod* payment = new PaymentMethod();\n    payment->processTransaction(100.0);\n\n    CreditCard* creditCard = new CreditCard(500.0);\n    creditCard->processTransaction(300.0);\n    creditCard->processTransaction(250.0);\n\n    delete payment;\n    delete creditCard;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a superclass for a computer program with methods for input and output, then extend it with a game subclass that overrides these methods to include player interactions.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass Program {\npublic:\n    virtual void input() {\n        std::cout << \"Program input.\" << std::endl;\n    }\n\n    virtual void output() {\n        std::cout << \"Program output.\" << std::endl;\n    }\n};\n\nclass Game : public Program {\npublic:\n    void input() override {\n        std::cout << \"Player input.\" << std::endl;\n    }\n\n    void output() override {\n        std::cout << \"Game output.\" << std::endl;\n    }\n};\n\nint main() {\n    Program* program = new Program();\n    Program* game = new Game();\n\n    program->input();\n    program->output();\n\n    game->input();\n    game->output();\n\n    delete program;\n    delete game;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a base class for a dining establishment with a method to calculate wait time, then create a fast food subclass that overrides this method to be shorter.",
    "code": "```cpp\n#include <iostream>\n\nclass DiningEstablishment {\npublic:\n    virtual int calculateWaitTime() {\n        return 30; // Default wait time in minutes\n    }\n};\n\nclass FastFood : public DiningEstablishment {\npublic:\n    int calculateWaitTime() override {\n        return 10; // Reduced wait time for fast food in minutes\n    }\n};\n\nint main() {\n    DiningEstablishment* restaurant = new DiningEstablishment();\n    FastFood* fastFoodPlace = new FastFood();\n\n    std::cout << \"Dining Establishment Wait Time: \" << restaurant->calculateWaitTime() << \" minutes\\n\";\n    std::cout << \"Fast Food Wait Time: \" << fastFoodPlace->calculateWaitTime() << \" minutes\\n\";\n\n    delete restaurant;\n    delete fastFoodPlace;\n    return 0;\n}\n```"
  },
  {
    "task": "Construct a parent class for a social media profile with methods for posting and liking, then derive a business profile class that overrides these methods to include promotions.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass SocialMediaProfile {\npublic:\n    virtual void post(const std::string& content) {\n        std::cout << \"Posting: \" << content << std::endl;\n    }\n    \n    virtual void like(const std::string& content) {\n        std::cout << \"Liking: \" << content << std::endl;\n    }\n};\n\nclass BusinessProfile : public SocialMediaProfile {\npublic:\n    void post(const std::string& content) override {\n        std::cout << \"Business Posting: \" << content << \" [with promotions]\" << std::endl;\n    }\n    \n    void like(const std::string& content) override {\n        std::cout << \"Business Liking: \" << content << \" [promotions considered]\" << std::endl;\n    }\n};\n\nint main() {\n    SocialMediaProfile userProfile;\n    BusinessProfile businessProfile;\n    \n    userProfile.post(\"Hello World!\");\n    userProfile.like(\"Cool Post!\");\n\n    businessProfile.post(\"Check our new product!\");\n    businessProfile.like(\"Amazing Offer!\");\n\n    return 0;\n}\n```"
  },
  {
    "task": "Set up a base class for an educational course with methods for syllabus and grading, and extend it with an online course subclass that overrides these methods for remote learning.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass Course {\npublic:\n    virtual std::string syllabus() const {\n        return \"Standard course syllabus\";\n    }\n    \n    virtual std::string grading() const {\n        return \"Standard course grading\";\n    }\n};\n\nclass OnlineCourse : public Course {\npublic:\n    std::string syllabus() const override {\n        return \"Online course syllabus with virtual materials\";\n    }\n    \n    std::string grading() const override {\n        return \"Online course grading with digital submissions\";\n    }\n};\n\nint main() {\n    Course regularCourse;\n    OnlineCourse onlineCourse;\n\n    std::cout << \"Regular Course Syllabus: \" << regularCourse.syllabus() << std::endl;\n    std::cout << \"Regular Course Grading: \" << regularCourse.grading() << std::endl;\n\n    std::cout << \"Online Course Syllabus: \" << onlineCourse.syllabus() << std::endl;\n    std::cout << \"Online Course Grading: \" << onlineCourse.grading() << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a foundational class for a sports team with properties like team name and coach, and derive a football team class that overrides the coach property with a specific person.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass SportsTeam {\nprotected:\n    std::string teamName;\n    std::string coach;\n\npublic:\n    SportsTeam(const std::string& name, const std::string& coachName)\n        : teamName(name), coach(coachName) {}\n\n    virtual std::string getCoach() const {\n        return coach;\n    }\n\n    std::string getTeamName() const {\n        return teamName;\n    }\n};\n\nclass FootballTeam : public SportsTeam {\npublic:\n    FootballTeam(const std::string& name, const std::string& specificCoach)\n        : SportsTeam(name, specificCoach) {}\n\n    std::string getCoach() const override {\n        return \"Specific Coach: \" + coach;\n    }\n};\n\nint main() {\n    FootballTeam myFootballTeam(\"Wild Tigers\", \"John Doe\");\n    std::cout << \"Team: \" << myFootballTeam.getTeamName() << std::endl;\n    std::cout << \"Coach: \" << myFootballTeam.getCoach() << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Design a base class for a document with methods for printing and saving, then create a PDF document subclass that overrides these methods to include encryption.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass Document {\npublic:\n    virtual void print() {\n        std::cout << \"Printing document...\" << std::endl;\n    }\n\n    virtual void save() {\n        std::cout << \"Saving document...\" << std::endl;\n    }\n\n    virtual ~Document() {}\n};\n\nclass PDFDocument : public Document {\npublic:\n    void print() override {\n        std::cout << \"Printing PDF document with encryption...\" << std::endl;\n    }\n\n    void save() override {\n        std::cout << \"Saving PDF document with encryption...\" << std::endl;\n    }\n};\n\nint main() {\n    Document* doc = new PDFDocument();\n    doc->print();\n    doc->save();\n    delete doc;\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a superclass for a retail product with methods for pricing and discount, then extend it with an electronics product class that overrides the discount method to offer more.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass Product {\nprotected:\n    std::string name;\n    double price;\n\npublic:\n    Product(const std::string& n, double p) : name(n), price(p) {}\n\n    virtual double getPrice() const {\n        return price;\n    }\n\n    virtual double getDiscountPrice() const {\n        return price;\n    }\n};\n\nclass Electronics : public Product {\npublic:\n    Electronics(const std::string& n, double p) : Product(n, p) {}\n\n    double getDiscountPrice() const override {\n        return price * 0.9; // 10% discount for electronics\n    }\n};\n\nint main() {\n    Product genericProduct(\"Generic Product\", 100.0);\n    Electronics laptop(\"Laptop\", 1000.0);\n\n    std::cout << \"Generic Product Price: \" << genericProduct.getPrice() << std::endl;\n    std::cout << \"Generic Product Discount Price: \" << genericProduct.getDiscountPrice() << std::endl;\n    std::cout << \"Laptop Price: \" << laptop.getPrice() << std::endl;\n    std::cout << \"Laptop Discount Price: \" << laptop.getDiscountPrice() << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a base class for a subscription service with a method to renew membership, then create a monthly subscription subclass that overrides this method for automatic renewal.",
    "code": "```cpp\n#include <iostream>\n\nclass SubscriptionService {\npublic:\n    virtual void renewMembership() {\n        std::cout << \"Renewing membership manually.\" << std::endl;\n    }\n};\n\nclass MonthlySubscription : public SubscriptionService {\npublic:\n    void renewMembership() override {\n        std::cout << \"Automatic monthly subscription renewal.\" << std::endl;\n    }\n};\n\nint main() {\n    SubscriptionService* service = new SubscriptionService();\n    service->renewMembership();\n\n    SubscriptionService* monthlyService = new MonthlySubscription();\n    monthlyService->renewMembership();\n\n    delete service;\n    delete monthlyService;\n    return 0;\n}\n```"
  },
  {
    "task": "Construct a parent class for a language translator with a method to translate text, then derive a French translator class that overrides this method for French language specifics.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass LanguageTranslator {\npublic:\n    virtual std::string translate(const std::string& text) {\n        return \"Translation not available\";\n    }\n};\n\nclass FrenchTranslator : public LanguageTranslator {\npublic:\n    std::string translate(const std::string& text) override {\n        // Example French translation logic\n        if (text == \"Hello\") {\n            return \"Bonjour\";\n        }\n        return \"Translation to French not available\";\n    }\n};\n\nint main() {\n    LanguageTranslator* translator = new FrenchTranslator();\n    std::cout << translator->translate(\"Hello\") << std::endl;\n    delete translator;\n    return 0;\n}\n```"
  },
  {
    "task": "Set up a base class for a customer order with methods for placing and tracking, and extend it with a food order subclass that overrides tracking for delivery status.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass CustomerOrder {\npublic:\n    virtual void placeOrder(const std::string& item) {\n        std::cout << \"Order placed for: \" << item << std::endl;\n    }\n\n    virtual void trackOrder() {\n        std::cout << \"Tracking order: In process\" << std::endl;\n    }\n};\n\nclass FoodOrder : public CustomerOrder {\npublic:\n    void trackOrder() override {\n        std::cout << \"Tracking food order: Out for delivery\" << std::endl;\n    }\n};\n\nint main() {\n    CustomerOrder order;\n    order.placeOrder(\"Generic Item\");\n    order.trackOrder();\n\n    FoodOrder foodOrder;\n    foodOrder.placeOrder(\"Pizza\");\n    foodOrder.trackOrder();\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a foundational class for an artwork with properties like artist and medium, and derive a painting class that overrides the medium property to be 'canvas'.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass Artwork {\npublic:\n    std::string artist;\n    std::string medium;\n\n    Artwork(const std::string& a, const std::string& m) : artist(a), medium(m) {}\n};\n\nclass Painting : public Artwork {\npublic:\n    Painting(const std::string& a) : Artwork(a, \"canvas\") {}\n};\n\nint main() {\n    Painting painting(\"Vincent van Gogh\");\n    std::cout << \"Artist: \" << painting.artist << \", Medium: \" << painting.medium << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Design a base class for a computer network with methods for connectivity and bandwidth, then create a wireless network subclass that overrides these methods for signal strength.",
    "code": "```cpp\n#include <iostream>\n\nclass ComputerNetwork {\npublic:\n    virtual void connectivity() {\n        std::cout << \"Standard connectivity\" << std::endl;\n    }\n\n    virtual void bandwidth() {\n        std::cout << \"Standard bandwidth\" << std::endl;\n    }\n};\n\nclass WirelessNetwork : public ComputerNetwork {\npublic:\n    void connectivity() override {\n        std::cout << \"Wireless connectivity based on signal strength\" << std::endl;\n    }\n\n    void bandwidth() override {\n        std::cout << \"Bandwidth determined by signal strength\" << std::endl;\n    }\n};\n\nint main() {\n    ComputerNetwork cn;\n    WirelessNetwork wn;\n    \n    cn.connectivity();\n    cn.bandwidth();\n    \n    wn.connectivity();\n    wn.bandwidth();\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Develop a superclass for a messaging app with methods for sending and receiving messages, then extend it with a secure messaging subclass that overrides these methods for encryption.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass MessagingApp {\npublic:\n    virtual void sendMessage(const std::string& message) {\n        std::cout << \"Sending message: \" << message << std::endl;\n    }\n\n    virtual std::string receiveMessage() {\n        return \"Receiving message\";\n    }\n};\n\nclass SecureMessagingApp : public MessagingApp {\npublic:\n    void sendMessage(const std::string& message) override {\n        std::string encryptedMessage = encrypt(message);\n        std::cout << \"Sending encrypted message: \" << encryptedMessage << std::endl;\n    }\n\n    std::string receiveMessage() override {\n        std::string encryptedMessage = \"Encrypted message\";\n        return decrypt(encryptedMessage);\n    }\n\nprivate:\n    std::string encrypt(const std::string& message) {\n        return \"Encrypted(\" + message + \")\";\n    }\n\n    std::string decrypt(const std::string& encryptedMessage) {\n        return \"Decrypted(\" + encryptedMessage + \")\";\n    }\n};\n\nint main() {\n    SecureMessagingApp secureApp;\n    secureApp.sendMessage(\"Hello, World!\");\n    std::cout << secureApp.receiveMessage() << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a base class for a travel itinerary with methods for destinations and activities, then create a vacation itinerary subclass that overrides these methods for leisure activities.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n\nclass TravelItinerary {\npublic:\n    virtual void addDestination(const std::string& destination) {\n        destinations.push_back(destination);\n    }\n    \n    virtual void addActivity(const std::string& activity) {\n        activities.push_back(activity);\n    }\n    \n    void showItinerary() const {\n        std::cout << \"Destinations:\\n\";\n        for (const auto& d : destinations) {\n            std::cout << \"- \" << d << \"\\n\";\n        }\n        \n        std::cout << \"Activities:\\n\";\n        for (const auto& a : activities) {\n            std::cout << \"- \" << a << \"\\n\";\n        }\n    }\n\nprotected:\n    std::vector<std::string> destinations;\n    std::vector<std::string> activities;\n};\n\nclass VacationItinerary : public TravelItinerary {\npublic:\n    void addDestination(const std::string& destination) override {\n        destinations.push_back(\"Leisure at \" + destination);\n    }\n    \n    void addActivity(const std::string& activity) override {\n        activities.push_back(\"Relaxing \" + activity);\n    }\n};\n\nint main() {\n    TravelItinerary businessTrip;\n    businessTrip.addDestination(\"New York\");\n    businessTrip.addActivity(\"Conference\");\n    \n    VacationItinerary holiday;\n    holiday.addDestination(\"Hawaii\");\n    holiday.addActivity(\"Beach\");\n\n    std::cout << \"Business Trip Itinerary:\\n\";\n    businessTrip.showItinerary();\n    \n    std::cout << \"\\nVacation Itinerary:\\n\";\n    holiday.showItinerary();\n\n    return 0;\n}\n```"
  },
  {
    "task": "Construct a parent class for a healthcare record with methods for patient data and treatment history, then derive a pediatric record class that overrides these methods for child-specific data.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass HealthcareRecord {\npublic:\n    virtual void patientData() {\n        std::cout << \"Patient name: John Doe\" << std::endl;\n        std::cout << \"Age: 45\" << std::endl;\n    }\n\n    virtual void treatmentHistory() {\n        std::cout << \"Treatment history: General check-up, Blood tests\" << std::endl;\n    }\n};\n\nclass PediatricRecord : public HealthcareRecord {\npublic:\n    void patientData() override {\n        std::cout << \"Patient name: Jane Doe\" << std::endl;\n        std::cout << \"Age: 10\" << std::endl;\n    }\n\n    void treatmentHistory() override {\n        std::cout << \"Treatment history: Vaccination, Annual pediatric check-up\" << std::endl;\n    }\n};\n\nint main() {\n    HealthcareRecord* record = new PediatricRecord();\n    record->patientData();\n    record->treatmentHistory();\n\n    delete record;\n    return 0;\n}\n```"
  },
  {
    "task": "Set up a base class for a culinary dish with methods for preparation and serving, and extend it with an appetizer subclass that overrides these methods for smaller portions.",
    "code": "```cpp\n#include <iostream>\n\nclass CulinaryDish {\npublic:\n    virtual void prepare() {\n        std::cout << \"Preparing the main dish.\" << std::endl;\n    }\n\n    virtual void serve() {\n        std::cout << \"Serving the main dish.\" << std::endl;\n    }\n};\n\nclass Appetizer : public CulinaryDish {\npublic:\n    void prepare() override {\n        std::cout << \"Preparing the appetizer in smaller portion.\" << std::endl;\n    }\n\n    void serve() override {\n        std::cout << \"Serving the appetizer in smaller portion.\" << std::endl;\n    }\n};\n\nint main() {\n    CulinaryDish mainDish;\n    Appetizer appetizerDish;\n\n    mainDish.prepare();\n    mainDish.serve();\n\n    appetizerDish.prepare();\n    appetizerDish.serve();\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a foundational class for a book collection with properties like genre and author, and derive a mystery collection class that overrides the genre property to be 'mystery'.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass BookCollection {\nprotected:\n    std::string genre;\n    std::string author;\npublic:\n    BookCollection(const std::string& gen, const std::string& auth)\n        : genre(gen), author(auth) {}\n\n    virtual void display() const {\n        std::cout << \"Genre: \" << genre << \", Author: \" << author << std::endl;\n    }\n};\n\nclass MysteryCollection : public BookCollection {\npublic:\n    MysteryCollection(const std::string& auth)\n        : BookCollection(\"mystery\", auth) {}\n\n    void display() const override {\n        std::cout << \"Genre: \" << genre << \", Author: \" << author << std::endl;\n    }\n};\n\nint main() {\n    BookCollection book(\"fiction\", \"Jane Doe\");\n    book.display();\n\n    MysteryCollection mystery(\"Agatha Christie\");\n    mystery.display();\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a base class for a file storage system with methods for saving and deleting files, then create a cloud storage subclass that overrides these methods for remote access.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\n// Base class for file storage\nclass FileStorage {\npublic:\n    virtual void saveFile(const std::string& filename) {\n        std::cout << \"Saving file: \" << filename << \" to local storage.\" << std::endl;\n    }\n\n    virtual void deleteFile(const std::string& filename) {\n        std::cout << \"Deleting file: \" << filename << \" from local storage.\" << std::endl;\n    }\n};\n\n// Subclass for cloud storage\nclass CloudStorage : public FileStorage {\npublic:\n    void saveFile(const std::string& filename) override {\n        std::cout << \"Saving file: \" << filename << \" to cloud storage.\" << std::endl;\n    }\n\n    void deleteFile(const std::string& filename) override {\n        std::cout << \"Deleting file: \" << filename << \" from cloud storage.\" << std::endl;\n    }\n};\n\nint main() {\n    FileStorage localStorage;\n    CloudStorage cloudStorage;\n\n    localStorage.saveFile(\"example.txt\");\n    localStorage.deleteFile(\"example.txt\");\n\n    cloudStorage.saveFile(\"example.txt\");\n    cloudStorage.deleteFile(\"example.txt\");\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a superclass for a seasonal sale event with methods for discounts and promotions, then extend it with a summer sale subclass that overrides these methods for summer items.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass SeasonalSale {\npublic:\n    virtual double applyDiscount(double originalPrice) {\n        return originalPrice * 0.9; // Default 10% discount\n    }\n\n    virtual std::string promotion() {\n        return \"Standard promotion: Buy one get one 50% off.\";\n    }\n};\n\nclass SummerSale : public SeasonalSale {\npublic:\n    double applyDiscount(double originalPrice) override {\n        return originalPrice * 0.8; // Summer sale 20% discount\n    }\n\n    std::string promotion() override {\n        return \"Summer promotion: Free beach towel with purchase over $50.\";\n    }\n};\n\nint main() {\n    SeasonalSale generalSale;\n    SummerSale summerSale;\n\n    double originalPrice = 100.0;\n\n    std::cout << \"General sale price: \" << generalSale.applyDiscount(originalPrice) << std::endl;\n    std::cout << \"General promotion: \" << generalSale.promotion() << std::endl;\n\n    std::cout << \"Summer sale price: \" << summerSale.applyDiscount(originalPrice) << std::endl;\n    std::cout << \"Summer promotion: \" << summerSale.promotion() << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a base class for a personal budget with methods for income and expenses, then create a student budget subclass that overrides these methods for tuition and fees.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass PersonalBudget {\npublic:\n    virtual void addIncome(double amount) {\n        std::cout << \"Adding income: $\" << amount << std::endl;\n    }\n\n    virtual void addExpense(double amount) {\n        std::cout << \"Adding expense: $\" << amount << std::endl;\n    }\n};\n\nclass StudentBudget : public PersonalBudget {\npublic:\n    void addIncome(double amount) override {\n        std::cout << \"Adding student income: $\" << amount << std::endl;\n    }\n\n    void addExpense(double amount) override {\n        std::cout << \"Adding student expense (tuition/fees): $\" << amount << std::endl;\n    }\n};\n\nint main() {\n    PersonalBudget personalBudget;\n    StudentBudget studentBudget;\n\n    personalBudget.addIncome(1000);\n    personalBudget.addExpense(200);\n\n    studentBudget.addIncome(500);\n    studentBudget.addExpense(300);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Construct a parent class for a fitness routine with methods for exercises and duration, then derive a yoga routine class that overrides these methods for flexibility exercises.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass FitnessRoutine {\npublic:\n    virtual void exercises() const {\n        std::cout << \"General fitness exercises.\" << std::endl;\n    }\n\n    virtual void duration() const {\n        std::cout << \"General duration.\" << std::endl;\n    }\n};\n\nclass YogaRoutine : public FitnessRoutine {\npublic:\n    void exercises() const override {\n        std::cout << \"Flexibility exercises for yoga.\" << std::endl;\n    }\n\n    void duration() const override {\n        std::cout << \"Duration specific to yoga routine.\" << std::endl;\n    }\n};\n\nint main() {\n    FitnessRoutine* routine = new YogaRoutine();\n    routine->exercises();\n    routine->duration();\n    delete routine;\n    return 0;\n}\n```"
  },
  {
    "task": "Set up a base class for a transportation ticket with methods for pricing and validity, and extend it with an airline ticket subclass that overrides these methods for baggage allowance.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass TransportationTicket {\npublic:\n    virtual double getPrice() const {\n        return 50.0; // Base price\n    }\n\n    virtual std::string checkValidity() const {\n        return \"Valid for one day\";\n    }\n};\n\nclass AirlineTicket : public TransportationTicket {\npublic:\n    double getPrice() const override {\n        return 150.0; // Overridden price for airline ticket\n    }\n\n    std::string checkValidity() const override {\n        return \"Valid for one year\";\n    }\n\n    std::string getBaggageAllowance() const {\n        return \"20kg baggage allowance\";\n    }\n};\n\nint main() {\n    TransportationTicket baseTicket;\n    AirlineTicket airlineTicket;\n\n    std::cout << \"Base Ticket Price: \" << baseTicket.getPrice() << std::endl;\n    std::cout << \"Base Ticket Validity: \" << baseTicket.checkValidity() << std::endl;\n\n    std::cout << \"Airline Ticket Price: \" << airlineTicket.getPrice() << std::endl;\n    std::cout << \"Airline Ticket Validity: \" << airlineTicket.checkValidity() << std::endl;\n    std::cout << \"Airline Ticket Baggage Allowance: \" << airlineTicket.getBaggageAllowance() << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a foundational class for a digital photo album with properties like album name and date, and derive a vacation album class that overrides the date property to be specific.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass DigitalPhotoAlbum {\nprotected:\n    std::string albumName;\n    std::string date;\n\npublic:\n    DigitalPhotoAlbum(const std::string& name, const std::string& date)\n        : albumName(name), date(date) {}\n\n    virtual std::string getAlbumName() const {\n        return albumName;\n    }\n\n    virtual std::string getDate() const {\n        return date;\n    }\n};\n\nclass VacationAlbum : public DigitalPhotoAlbum {\npublic:\n    VacationAlbum(const std::string& name, const std::string& vacationDate)\n        : DigitalPhotoAlbum(name, vacationDate) {}\n\n    std::string getDate() const override {\n        return \"Vacation Date: \" + date;\n    }\n};\n\nint main() {\n    DigitalPhotoAlbum album(\"Family Album\", \"2023-10-01\");\n    VacationAlbum vacation(\"Beach Trip\", \"2023-08-15\");\n\n    std::cout << album.getAlbumName() << \" - \" << album.getDate() << std::endl;\n    std::cout << vacation.getAlbumName() << \" - \" << vacation.getDate() << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a base class for a home appliance with methods for power usage and warranty, then create a refrigerator subclass that overrides these methods for energy efficiency.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass HomeAppliance {\npublic:\n    virtual double powerUsage() const {\n        return 1000.0; // Default power usage in watts\n    }\n\n    virtual std::string warranty() const {\n        return \"1 year warranty\";\n    }\n\n    virtual ~HomeAppliance() = default;\n};\n\nclass Refrigerator : public HomeAppliance {\npublic:\n    double powerUsage() const override {\n        return 800.0; // Energy efficient power usage in watts\n    }\n\n    std::string warranty() const override {\n        return \"2 years warranty\";\n    }\n};\n\nint main() {\n    HomeAppliance* appliance = new Refrigerator();\n    std::cout << \"Power Usage: \" << appliance->powerUsage() << \" watts\" << std::endl;\n    std::cout << \"Warranty: \" << appliance->warranty() << std::endl;\n    delete appliance;\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a superclass for a software update with methods for versioning and patch notes, then extend it with a security update subclass that overrides these methods for vulnerabilities.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass SoftwareUpdate {\npublic:\n    virtual void versioning() const {\n        std::cout << \"Software version: 1.0.0\" << std::endl;\n    }\n\n    virtual void patchNotes() const {\n        std::cout << \"General improvements and bug fixes.\" << std::endl;\n    }\n\n    virtual ~SoftwareUpdate() {}\n};\n\nclass SecurityUpdate : public SoftwareUpdate {\npublic:\n    void versioning() const override {\n        std::cout << \"Security update version: 1.0.1\" << std::endl;\n    }\n\n    void patchNotes() const override {\n        std::cout << \"Security vulnerability fixes applied.\" << std::endl;\n    }\n};\n\nint main() {\n    SoftwareUpdate* update1 = new SoftwareUpdate();\n    SoftwareUpdate* update2 = new SecurityUpdate();\n\n    update1->versioning();\n    update1->patchNotes();\n\n    update2->versioning();\n    update2->patchNotes();\n\n    delete update1;\n    delete update2;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a base class for a musical performance with methods for rehearsal and execution, then create a concert performance subclass that overrides these methods for live audience.",
    "code": "```cpp\n#include <iostream>\n\nclass MusicalPerformance {\npublic:\n    virtual void rehearsal() {\n        std::cout << \"Rehearsing the performance.\" << std::endl;\n    }\n\n    virtual void execute() {\n        std::cout << \"Executing the performance.\" << std::endl;\n    }\n\n    virtual ~MusicalPerformance() {}\n};\n\nclass ConcertPerformance : public MusicalPerformance {\npublic:\n    void rehearsal() override {\n        std::cout << \"Rehearsing the concert for a live audience.\" << std::endl;\n    }\n\n    void execute() override {\n        std::cout << \"Performing the concert live.\" << std::endl;\n    }\n};\n\nint main() {\n    MusicalPerformance* performance = new ConcertPerformance();\n    performance->rehearsal();\n    performance->execute();\n    delete performance;\n    return 0;\n}\n```"
  },
  {
    "task": "Construct a parent class for an academic degree with methods for course requirements and credits, then derive a master's degree class that overrides these methods for advanced studies.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass AcademicDegree {\npublic:\n    virtual std::string courseRequirements() const {\n        return \"Undergraduate course requirements.\";\n    }\n\n    virtual int credits() const {\n        return 120;\n    }\n};\n\nclass MastersDegree : public AcademicDegree {\npublic:\n    std::string courseRequirements() const override {\n        return \"Advanced course requirements for a master's degree.\";\n    }\n\n    int credits() const override {\n        return 60;\n    }\n};\n\nint main() {\n    AcademicDegree undergrad;\n    MastersDegree masters;\n\n    std::cout << \"Undergraduate Course Requirements: \" << undergrad.courseRequirements() << std::endl;\n    std::cout << \"Undergraduate Credits: \" << undergrad.credits() << std::endl;\n\n    std::cout << \"Master's Course Requirements: \" << masters.courseRequirements() << std::endl;\n    std::cout << \"Master's Credits: \" << masters.credits() << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Set up a base class for a weather forecast with methods for temperature and conditions, and extend it with a winter forecast subclass that overrides these methods for snow conditions.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass WeatherForecast {\npublic:\n    virtual std::string getTemperature() const {\n        return \"Regular temperature forecast.\";\n    }\n    \n    virtual std::string getConditions() const {\n        return \"Regular weather conditions.\";\n    }\n};\n\nclass WinterForecast : public WeatherForecast {\npublic:\n    std::string getTemperature() const override {\n        return \"Cold temperature forecast.\";\n    }\n    \n    std::string getConditions() const override {\n        return \"Snowy weather conditions.\";\n    }\n};\n\nint main() {\n    WeatherForecast* forecast = new WeatherForecast();\n    std::cout << forecast->getTemperature() << std::endl;\n    std::cout << forecast->getConditions() << std::endl;\n    \n    WeatherForecast* winterForecast = new WinterForecast();\n    std::cout << winterForecast->getTemperature() << std::endl;\n    std::cout << winterForecast->getConditions() << std::endl;\n    \n    delete forecast;\n    delete winterForecast;\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Create a foundational class for a personal diary with properties like date and entries, and derive a travel diary class that overrides the date property with travel dates.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass PersonalDiary {\nprotected:\n    std::string date;\n    std::string entries;\n\npublic:\n    PersonalDiary(const std::string& date, const std::string& entries)\n        : date(date), entries(entries) {}\n\n    virtual void display() const {\n        std::cout << \"Date: \" << date << \"\\nEntries: \" << entries << std::endl;\n    }\n};\n\nclass TravelDiary : public PersonalDiary {\nprivate:\n    std::string travelDate;\n\npublic:\n    TravelDiary(const std::string& travelDate, const std::string& entries)\n        : PersonalDiary(\"\", entries), travelDate(travelDate) {}\n\n    void display() const override {\n        std::cout << \"Travel Date: \" << travelDate << \"\\nEntries: \" << entries << std::endl;\n    }\n};\n\nint main() {\n    PersonalDiary pd(\"2023-10-15\", \"Attended a coding workshop.\");\n    TravelDiary td(\"2023-12-01\", \"Visited Paris.\");\n\n    pd.display();\n    td.display();\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a base class for a pet with methods for feeding and grooming, then create a cat subclass that overrides these methods with specific food preferences.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass Pet {\npublic:\n    virtual void feed() {\n        std::cout << \"Feeding the pet.\" << std::endl;\n    }\n\n    virtual void groom() {\n        std::cout << \"Grooming the pet.\" << std::endl;\n    }\n};\n\nclass Cat : public Pet {\npublic:\n    void feed() override {\n        std::cout << \"Feeding the cat with fish.\" << std::endl;\n    }\n\n    void groom() override {\n        std::cout << \"Brushing the cat's fur.\" << std::endl;\n    }\n};\n\nint main() {\n    Pet* myPet = new Cat();\n    myPet->feed();\n    myPet->groom();\n    delete myPet;\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a superclass for a software library with methods for installation and updates, then extend it with a graphics library subclass that overrides these methods for rendering capabilities.",
    "code": "```cpp\n#include <iostream>\n\nclass SoftwareLibrary {\npublic:\n    virtual void install() {\n        std::cout << \"Installing software library...\" << std::endl;\n    }\n\n    virtual void update() {\n        std::cout << \"Updating software library...\" << std::endl;\n    }\n\n    virtual ~SoftwareLibrary() {}\n};\n\nclass GraphicsLibrary : public SoftwareLibrary {\npublic:\n    void install() override {\n        std::cout << \"Installing graphics library with rendering capabilities...\" << std::endl;\n    }\n\n    void update() override {\n        std::cout << \"Updating graphics library rendering capabilities...\" << std::endl;\n    }\n};\n\nint main() {\n    SoftwareLibrary* lib = new GraphicsLibrary();\n    lib->install();\n    lib->update();\n    delete lib;\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a base class for a political campaign with methods for fundraising and events, then create a presidential campaign subclass that overrides these methods for national scale.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass PoliticalCampaign {\npublic:\n    virtual void fundraise() const {\n        std::cout << \"Fundraising at a local level.\\n\";\n    }\n\n    virtual void organizeEvent() const {\n        std::cout << \"Organizing a local campaign event.\\n\";\n    }\n\n    virtual ~PoliticalCampaign() = default;\n};\n\nclass PresidentialCampaign : public PoliticalCampaign {\npublic:\n    void fundraise() const override {\n        std::cout << \"Fundraising at a national level.\\n\";\n    }\n\n    void organizeEvent() const override {\n        std::cout << \"Organizing a national campaign event.\\n\";\n    }\n};\n\nint main() {\n    PoliticalCampaign localCampaign;\n    PresidentialCampaign nationalCampaign;\n\n    localCampaign.fundraise();\n    localCampaign.organizeEvent();\n\n    nationalCampaign.fundraise();\n    nationalCampaign.organizeEvent();\n\n    return 0;\n}\n```"
  },
  {
    "task": "Construct a parent class for an automotive part with methods for durability and replacement, then derive an engine part class that overrides these methods for performance.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass AutomotivePart {\npublic:\n    virtual std::string durability() {\n        return \"Standard durability\";\n    }\n\n    virtual std::string replacement() {\n        return \"Standard replacement process\";\n    }\n};\n\nclass EnginePart : public AutomotivePart {\npublic:\n    std::string durability() override {\n        return \"Enhanced durability for high performance\";\n    }\n\n    std::string replacement() override {\n        return \"Specialized replacement process for engine parts\";\n    }\n};\n\nint main() {\n    AutomotivePart part;\n    EnginePart enginePart;\n\n    std::cout << \"Automotive Part Durability: \" << part.durability() << std::endl;\n    std::cout << \"Automotive Part Replacement: \" << part.replacement() << std::endl;\n    std::cout << \"Engine Part Durability: \" << enginePart.durability() << std::endl;\n    std::cout << \"Engine Part Replacement: \" << enginePart.replacement() << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Set up a base class for an online tutorial with methods for lessons and quizzes, and extend it with a coding tutorial subclass that overrides these methods for interactive exercises.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass OnlineTutorial {\npublic:\n    virtual void lesson() {\n        std::cout << \"This is a general lesson.\" << std::endl;\n    }\n\n    virtual void quiz() {\n        std::cout << \"This is a general quiz.\" << std::endl;\n    }\n};\n\nclass CodingTutorial : public OnlineTutorial {\npublic:\n    void lesson() override {\n        std::cout << \"This is an interactive coding lesson.\" << std::endl;\n    }\n\n    void quiz() override {\n        std::cout << \"This is an interactive coding quiz.\" << std::endl;\n    }\n};\n\nint main() {\n    OnlineTutorial* tutorial = new CodingTutorial();\n    tutorial->lesson();\n    tutorial->quiz();\n    delete tutorial;\n    return 0;\n}\n```"
  },
  {
    "task": "Create a foundational class for a personal collection with properties like item type and value, and derive a stamp collection class that overrides the item type property to be 'stamps'.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass PersonalCollection {\nprotected:\n    std::string itemType;\n    double value;\n\npublic:\n    PersonalCollection(const std::string& type, double val) : itemType(type), value(val) {}\n\n    virtual std::string getItemType() const {\n        return itemType;\n    }\n\n    double getValue() const {\n        return value;\n    }\n};\n\nclass StampCollection : public PersonalCollection {\npublic:\n    StampCollection(double val) : PersonalCollection(\"stamps\", val) {}\n\n    std::string getItemType() const override {\n        return \"stamps\";\n    }\n};\n\nint main() {\n    PersonalCollection item(\"generic\", 100.0);\n    StampCollection stamps(200.0);\n\n    std::cout << \"Item type: \" << item.getItemType() << \", Value: \" << item.getValue() << std::endl;\n    std::cout << \"Item type: \" << stamps.getItemType() << \", Value: \" << stamps.getValue() << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a base class for a video game character with methods for health and abilities, then create a warrior character subclass that overrides these methods for strength.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass GameCharacter {\npublic:\n    virtual int getHealth() const {\n        return 100;\n    }\n\n    virtual std::string getAbilities() const {\n        return \"Basic abilities\";\n    }\n};\n\nclass Warrior : public GameCharacter {\npublic:\n    int getHealth() const override {\n        return 150; // Warrior has more health\n    }\n\n    std::string getAbilities() const override {\n        return \"Strength and combat skills\"; // Warrior specific abilities\n    }\n};\n\nint main() {\n    GameCharacter* character = new GameCharacter();\n    Warrior* warrior = new Warrior();\n\n    std::cout << \"GameCharacter Health: \" << character->getHealth() << std::endl;\n    std::cout << \"GameCharacter Abilities: \" << character->getAbilities() << std::endl;\n\n    std::cout << \"Warrior Health: \" << warrior->getHealth() << std::endl;\n    std::cout << \"Warrior Abilities: \" << warrior->getAbilities() << std::endl;\n\n    delete character;\n    delete warrior;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a superclass for an event planner with methods for scheduling and budgeting, then extend it with a wedding planner subclass that overrides these methods for ceremony details.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass EventPlanner {\npublic:\n    virtual void scheduleEvent(const std::string& date, const std::string& time) {\n        std::cout << \"Event scheduled on \" << date << \" at \" << time << \".\" << std::endl;\n    }\n\n    virtual void setBudget(double amount) {\n        std::cout << \"Event budget set to $\" << amount << \".\" << std::endl;\n    }\n};\n\nclass WeddingPlanner : public EventPlanner {\npublic:\n    void scheduleEvent(const std::string& date, const std::string& time) override {\n        std::cout << \"Wedding ceremony scheduled on \" << date << \" at \" << time << \".\" << std::endl;\n    }\n\n    void setBudget(double amount) override {\n        std::cout << \"Wedding budget set to $\" << amount << \", including ceremony details.\" << std::endl;\n    }\n};\n\nint main() {\n    EventPlanner eventPlanner;\n    WeddingPlanner weddingPlanner;\n\n    eventPlanner.scheduleEvent(\"12/12/2023\", \"5:00 PM\");\n    eventPlanner.setBudget(5000);\n\n    weddingPlanner.scheduleEvent(\"06/06/2024\", \"3:00 PM\");\n    weddingPlanner.setBudget(15000);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a base class for a software feature with methods for functionality and user feedback, then create a beta feature subclass that overrides these methods for testing.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass SoftwareFeature {\npublic:\n    virtual void functionality() {\n        std::cout << \"Base feature functionality.\" << std::endl;\n    }\n    \n    virtual void userFeedback() {\n        std::cout << \"Base feature user feedback.\" << std::endl;\n    }\n};\n\nclass BetaFeature : public SoftwareFeature {\npublic:\n    void functionality() override {\n        std::cout << \"Beta feature functionality for testing.\" << std::endl;\n    }\n    \n    void userFeedback() override {\n        std::cout << \"Beta feature user feedback for testing.\" << std::endl;\n    }\n};\n\nint main() {\n    SoftwareFeature* feature = new SoftwareFeature();\n    SoftwareFeature* betaFeature = new BetaFeature();\n    \n    feature->functionality();\n    feature->userFeedback();\n    \n    betaFeature->functionality();\n    betaFeature->userFeedback();\n    \n    delete feature;\n    delete betaFeature;\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Construct a parent class for a gardening tool with methods for usage and maintenance, then derive a lawn mower class that overrides these methods for grass cutting.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass GardeningTool {\npublic:\n    virtual void usage() {\n        std::cout << \"Using the gardening tool.\" << std::endl;\n    }\n\n    virtual void maintenance() {\n        std::cout << \"Maintaining the gardening tool.\" << std::endl;\n    }\n};\n\nclass LawnMower : public GardeningTool {\npublic:\n    void usage() override {\n        std::cout << \"Using the lawn mower to cut grass.\" << std::endl;\n    }\n\n    void maintenance() override {\n        std::cout << \"Performing maintenance on the lawn mower.\" << std::endl;\n    }\n};\n\nint main() {\n    GardeningTool tool;\n    LawnMower mower;\n\n    tool.usage();\n    tool.maintenance();\n\n    mower.usage();\n    mower.maintenance();\n\n    return 0;\n}\n```"
  },
  {
    "task": "Set up a base class for a household chore with methods for time and effort, and extend it with a cleaning chore subclass that overrides these methods for dirt removal.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass HouseholdChore {\npublic:\n    virtual std::string time() const {\n        return \"Generic time for household chore.\";\n    }\n\n    virtual std::string effort() const {\n        return \"Generic effort for household chore.\";\n    }\n\n    virtual ~HouseholdChore() {}\n};\n\nclass CleaningChore : public HouseholdChore {\npublic:\n    std::string time() const override {\n        return \"Specific time for cleaning chore.\";\n    }\n\n    std::string effort() const override {\n        return \"Specific effort for cleaning chore.\";\n    }\n};\n\nint main() {\n    HouseholdChore* chore = new CleaningChore();\n    std::cout << chore->time() << std::endl;\n    std::cout << chore->effort() << std::endl;\n    delete chore;\n    return 0;\n}\n```"
  },
  {
    "task": "Create a foundational class for a personal project with properties like name and deadline, and derive a coding project class that overrides the deadline property for milestones.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass PersonalProject {\nprotected:\n    std::string name;\n    std::string deadline;\n\npublic:\n    PersonalProject(const std::string& projName, const std::string& projDeadline)\n        : name(projName), deadline(projDeadline) {}\n\n    virtual std::string getDeadline() const {\n        return deadline;\n    }\n\n    virtual void displayInfo() const {\n        std::cout << \"Project Name: \" << name << \"\\n\";\n        std::cout << \"Deadline: \" << getDeadline() << \"\\n\";\n    }\n};\n\nclass CodingProject : public PersonalProject {\nprivate:\n    std::string milestoneDeadline;\n\npublic:\n    CodingProject(const std::string& projName, const std::string& projDeadline, const std::string& milestone)\n        : PersonalProject(projName, projDeadline), milestoneDeadline(milestone) {}\n\n    std::string getDeadline() const override {\n        return milestoneDeadline;\n    }\n\n    void displayInfo() const override {\n        std::cout << \"Coding Project Name: \" << name << \"\\n\";\n        std::cout << \"Milestone Deadline: \" << getDeadline() << \"\\n\";\n    }\n};\n\nint main() {\n    PersonalProject personal(\"Personal Project\", \"2023-12-31\");\n    personal.displayInfo();\n\n    CodingProject coding(\"Coding Project\", \"2023-12-31\", \"2023-11-30\");\n    coding.displayInfo();\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a base class for a holiday celebration with methods for traditions and activities, then create a Christmas celebration subclass that overrides these methods for gift exchange.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass HolidayCelebration {\npublic:\n    virtual void traditions() {\n        std::cout << \"General holiday traditions.\" << std::endl;\n    }\n\n    virtual void activities() {\n        std::cout << \"General holiday activities.\" << std::endl;\n    }\n\n    virtual ~HolidayCelebration() {}\n};\n\nclass ChristmasCelebration : public HolidayCelebration {\npublic:\n    void traditions() override {\n        std::cout << \"Christmas traditions: Decorating the tree, singing carols.\" << std::endl;\n    }\n\n    void activities() override {\n        std::cout << \"Christmas activities: Gift exchange.\" << std::endl;\n    }\n};\n\nint main() {\n    HolidayCelebration* celebration = new ChristmasCelebration();\n    celebration->traditions();\n    celebration->activities();\n    delete celebration;\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a superclass for a customer feedback system with methods for collecting and analyzing, then extend it with a product feedback subclass that overrides these methods for reviews.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass FeedbackSystem {\npublic:\n    virtual void collectFeedback(const std::string &feedback) {\n        std::cout << \"Collecting feedback: \" << feedback << std::endl;\n    }\n\n    virtual void analyzeFeedback() {\n        std::cout << \"Analyzing general feedback.\" << std::endl;\n    }\n};\n\nclass ProductFeedback : public FeedbackSystem {\npublic:\n    void collectFeedback(const std::string &review) override {\n        std::cout << \"Collecting product review: \" << review << std::endl;\n    }\n\n    void analyzeFeedback() override {\n        std::cout << \"Analyzing product reviews.\" << std::endl;\n    }\n};\n\nint main() {\n    FeedbackSystem *generalFeedback = new FeedbackSystem();\n    generalFeedback->collectFeedback(\"This is a general feedback.\");\n    generalFeedback->analyzeFeedback();\n\n    FeedbackSystem *productReview = new ProductFeedback();\n    productReview->collectFeedback(\"This product is excellent.\");\n    productReview->analyzeFeedback();\n\n    delete generalFeedback;\n    delete productReview;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a base class for a civic service with methods for public engagement and policy, then create a community service subclass that overrides these methods for local impact.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass CivicService {\npublic:\n    virtual void publicEngagement() const {\n        std::cout << \"Engaging with the public at a national level.\" << std::endl;\n    }\n\n    virtual void policy() const {\n        std::cout << \"Implementing policies for civic improvement.\" << std::endl;\n    }\n};\n\nclass CommunityService : public CivicService {\npublic:\n    void publicEngagement() const override {\n        std::cout << \"Engaging with the community at a local level.\" << std::endl;\n    }\n\n    void policy() const override {\n        std::cout << \"Implementing policies for local community development.\" << std::endl;\n    }\n};\n\nint main() {\n    CivicService* nationalService = new CivicService();\n    CivicService* localService = new CommunityService();\n\n    nationalService->publicEngagement();\n    nationalService->policy();\n\n    localService->publicEngagement();\n    localService->policy();\n\n    delete nationalService;\n    delete localService;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Construct a parent class for a culinary ingredient with methods for flavor and preparation, then derive a spice ingredient class that overrides these methods for seasoning.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass Ingredient {\npublic:\n    virtual std::string flavor() const {\n        return \"Generic flavor\";\n    }\n\n    virtual std::string preparation() const {\n        return \"Generic preparation\";\n    }\n};\n\nclass Spice : public Ingredient {\npublic:\n    std::string flavor() const override {\n        return \"Spicy flavor\";\n    }\n\n    std::string preparation() const override {\n        return \"Grind into powder\";\n    }\n};\n\nint main() {\n    Ingredient genericIngredient;\n    Spice spice;\n\n    std::cout << \"Generic Ingredient Flavor: \" << genericIngredient.flavor() << std::endl;\n    std::cout << \"Generic Ingredient Preparation: \" << genericIngredient.preparation() << std::endl;\n    std::cout << \"Spice Flavor: \" << spice.flavor() << std::endl;\n    std::cout << \"Spice Preparation: \" << spice.preparation() << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Set up a base class for a scientific experiment with methods for hypothesis and testing, and extend it with a chemistry experiment subclass that overrides these methods for reactions.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass ScientificExperiment {\npublic:\n    virtual void hypothesis() {\n        std::cout << \"Formulating a general scientific hypothesis.\" << std::endl;\n    }\n\n    virtual void testing() {\n        std::cout << \"Conducting a general scientific test.\" << std::endl;\n    }\n};\n\nclass ChemistryExperiment : public ScientificExperiment {\npublic:\n    void hypothesis() override {\n        std::cout << \"Formulating a chemistry-specific hypothesis about reactions.\" << std::endl;\n    }\n\n    void testing() override {\n        std::cout << \"Conducting a chemistry-specific test on reactions.\" << std::endl;\n    }\n};\n\nint main() {\n    ScientificExperiment* experiment = new ChemistryExperiment();\n    experiment->hypothesis();\n    experiment->testing();\n    delete experiment;\n    return 0;\n}\n```"
  },
  {
    "task": "Create a foundational class for an inventory system with properties like item ID and quantity, and derive a warehouse inventory class that overrides the quantity property for bulk storage.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass InventoryItem {\npublic:\n    InventoryItem(int id, int qty) : itemID(id), quantity(qty) {}\n    int getItemID() const { return itemID; }\n    virtual int getQuantity() const { return quantity; }\n\nprotected:\n    int itemID;\n    int quantity;\n};\n\nclass WarehouseInventory : public InventoryItem {\npublic:\n    WarehouseInventory(int id, int bulkQty) : InventoryItem(id, 0), bulkQuantity(bulkQty) {}\n    int getQuantity() const override { return bulkQuantity; }\n\nprivate:\n    int bulkQuantity;\n};\n\nint main() {\n    InventoryItem basicItem(101, 50);\n    WarehouseInventory bulkItem(102, 1000);\n\n    std::cout << \"Basic Item ID: \" << basicItem.getItemID() << \", Quantity: \" << basicItem.getQuantity() << std::endl;\n    std::cout << \"Bulk Item ID: \" << bulkItem.getItemID() << \", Quantity: \" << bulkItem.getQuantity() << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a base class for a travel agency with methods for itinerary and bookings, then create a luxury travel subclass that overrides these methods for premium services.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass TravelAgency {\npublic:\n    virtual void itinerary() {\n        std::cout << \"Standard itinerary provided.\\n\";\n    }\n\n    virtual void bookings() {\n        std::cout << \"Standard bookings processed.\\n\";\n    }\n\n    virtual ~TravelAgency() {}\n};\n\nclass LuxuryTravel : public TravelAgency {\npublic:\n    void itinerary() override {\n        std::cout << \"Luxury itinerary with premium features provided.\\n\";\n    }\n\n    void bookings() override {\n        std::cout << \"Luxury bookings with premium services processed.\\n\";\n    }\n};\n\nint main() {\n    TravelAgency* standardTravel = new TravelAgency();\n    TravelAgency* luxuryTravel = new LuxuryTravel();\n\n    standardTravel->itinerary();\n    standardTravel->bookings();\n\n    luxuryTravel->itinerary();\n    luxuryTravel->bookings();\n\n    delete standardTravel;\n    delete luxuryTravel;\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Develop a superclass for an educational tool with methods for teaching and assessment, then extend it with a math tool subclass that overrides these methods for problem-solving.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\n// Superclass\nclass EducationalTool {\npublic:\n    virtual void teach() {\n        std::cout << \"Teaching a general concept.\" << std::endl;\n    }\n\n    virtual void assess() {\n        std::cout << \"Assessing general knowledge.\" << std::endl;\n    }\n\n    virtual ~EducationalTool() {}\n};\n\n// Subclass\nclass MathTool : public EducationalTool {\npublic:\n    void teach() override {\n        std::cout << \"Teaching a math concept.\" << std::endl;\n    }\n\n    void assess() override {\n        std::cout << \"Assessing math problem-solving skills.\" << std::endl;\n    }\n};\n\nint main() {\n    EducationalTool* tool = new MathTool();\n    tool->teach();\n    tool->assess();\n    delete tool;\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a base class for a community project with methods for planning and execution, then create a park renovation subclass that overrides these methods for landscaping.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass CommunityProject {\npublic:\n    virtual void plan() {\n        std::cout << \"Planning the community project.\" << std::endl;\n    }\n\n    virtual void execute() {\n        std::cout << \"Executing the community project.\" << std::endl;\n    }\n};\n\nclass ParkRenovation : public CommunityProject {\npublic:\n    void plan() override {\n        std::cout << \"Planning the park renovation with landscaping details.\" << std::endl;\n    }\n\n    void execute() override {\n        std::cout << \"Executing the park renovation with landscaping tasks.\" << std::endl;\n    }\n};\n\nint main() {\n    CommunityProject* project = new ParkRenovation();\n    project->plan();\n    project->execute();\n    delete project;\n    return 0;\n}\n```"
  },
  {
    "task": "Construct a parent class for a digital marketing strategy with methods for targeting and engagement, then derive a social media strategy class that overrides these methods for platforms.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass DigitalMarketingStrategy {\npublic:\n    virtual void targeting() {\n        std::cout << \"General targeting strategy.\\n\";\n    }\n\n    virtual void engagement() {\n        std::cout << \"General engagement strategy.\\n\";\n    }\n};\n\nclass SocialMediaStrategy : public DigitalMarketingStrategy {\npublic:\n    void targeting() override {\n        std::cout << \"Targeting strategy for social media platforms.\\n\";\n    }\n\n    void engagement() override {\n        std::cout << \"Engagement strategy for social media platforms.\\n\";\n    }\n};\n\nint main() {\n    DigitalMarketingStrategy* strategy = new DigitalMarketingStrategy();\n    strategy->targeting();\n    strategy->engagement();\n\n    SocialMediaStrategy* socialStrategy = new SocialMediaStrategy();\n    socialStrategy->targeting();\n    socialStrategy->engagement();\n\n    delete strategy;\n    delete socialStrategy;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Set up a base class for a scientific publication with methods for research and review, and extend it with a journal article subclass that overrides these methods for peer review.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass ScientificPublication {\npublic:\n    virtual void research() {\n        std::cout << \"Conducting general research for publication.\" << std::endl;\n    }\n    \n    virtual void review() {\n        std::cout << \"Reviewing the publication.\" << std::endl;\n    }\n    \n    virtual ~ScientificPublication() = default;\n};\n\nclass JournalArticle : public ScientificPublication {\npublic:\n    void research() override {\n        std::cout << \"Conducting research for journal article.\" << std::endl;\n    }\n    \n    void review() override {\n        std::cout << \"Peer reviewing the journal article.\" << std::endl;\n    }\n};\n\nint main() {\n    ScientificPublication* publication = new JournalArticle();\n    publication->research();\n    publication->review();\n    delete publication;\n    return 0;\n}\n```"
  },
  {
    "task": "Create a foundational class for a software module with properties like name and dependencies, and derive a user interface module class that overrides the dependencies property for UI libraries.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n\nclass SoftwareModule {\nprotected:\n    std::string name;\n    std::vector<std::string> dependencies;\n\npublic:\n    SoftwareModule(const std::string& moduleName, const std::vector<std::string>& moduleDependencies)\n        : name(moduleName), dependencies(moduleDependencies) {}\n\n    virtual void displayDependencies() const {\n        std::cout << \"Dependencies for \" << name << \": \";\n        for (const auto& dependency : dependencies) {\n            std::cout << dependency << \" \";\n        }\n        std::cout << std::endl;\n    }\n};\n\nclass UIModule : public SoftwareModule {\npublic:\n    UIModule(const std::string& moduleName)\n        : SoftwareModule(moduleName, {\"UI_Library1\", \"UI_Library2\", \"UI_Library3\"}) {}\n\n    void displayDependencies() const override {\n        std::cout << \"UI Dependencies for \" << name << \": \";\n        for (const auto& dependency : dependencies) {\n            std::cout << dependency << \" \";\n        }\n        std::cout << std::endl;\n    }\n};\n\nint main() {\n    SoftwareModule coreModule(\"CoreModule\", {\"CoreLib1\", \"CoreLib2\"});\n    UIModule uiModule(\"UserInterfaceModule\");\n\n    coreModule.displayDependencies();\n    uiModule.displayDependencies();\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a base class for a fashion line with methods for design and production, then create a summer collection subclass that overrides these methods for seasonal trends.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass FashionLine {\npublic:\n    virtual void design() {\n        std::cout << \"Designing general fashion line.\" << std::endl;\n    }\n    \n    virtual void production() {\n        std::cout << \"Producing general fashion line.\" << std::endl;\n    }\n};\n\nclass SummerCollection : public FashionLine {\npublic:\n    void design() override {\n        std::cout << \"Designing summer collection with seasonal trends.\" << std::endl;\n    }\n    \n    void production() override {\n        std::cout << \"Producing summer collection with seasonal materials.\" << std::endl;\n    }\n};\n\nint main() {\n    FashionLine* baseCollection = new FashionLine();\n    FashionLine* summerCollection = new SummerCollection();\n    \n    baseCollection->design();\n    baseCollection->production();\n    \n    summerCollection->design();\n    summerCollection->production();\n    \n    delete baseCollection;\n    delete summerCollection;\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Develop a superclass for a family tree with methods for ancestry and descendants, then extend it with a royal lineage subclass that overrides these methods for historical accuracy.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n\nclass FamilyTree {\npublic:\n    virtual void printAncestry() {\n        std::cout << \"Generic ancestry information.\" << std::endl;\n    }\n\n    virtual void printDescendants() {\n        std::cout << \"Generic descendants information.\" << std::endl;\n    }\n};\n\nclass RoyalLineage : public FamilyTree {\npublic:\n    void printAncestry() override {\n        std::cout << \"Historical royal ancestry information.\" << std::endl;\n    }\n\n    void printDescendants() override {\n        std::cout << \"Historical royal descendants information.\" << std::endl;\n    }\n};\n\nint main() {\n    FamilyTree* familyTree = new FamilyTree();\n    FamilyTree* royalLineage = new RoyalLineage();\n    \n    familyTree->printAncestry();\n    familyTree->printDescendants();\n    \n    royalLineage->printAncestry();\n    royalLineage->printDescendants();\n    \n    delete familyTree;\n    delete royalLineage;\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Implement a base class for a musical score with methods for composition and arrangement, then create a symphony subclass that overrides these methods for orchestration.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass MusicalScore {\npublic:\n    virtual void composition() {\n        std::cout << \"Composing a musical piece.\" << std::endl;\n    }\n    \n    virtual void arrangement() {\n        std::cout << \"Arranging the musical piece.\" << std::endl;\n    }\n};\n\nclass Symphony : public MusicalScore {\npublic:\n    void composition() override {\n        std::cout << \"Composing a symphony.\" << std::endl;\n    }\n    \n    void arrangement() override {\n        std::cout << \"Orchestrating the symphony.\" << std::endl;\n    }\n};\n\nint main() {\n    MusicalScore* score = new Symphony();\n    score->composition();\n    score->arrangement();\n    delete score;\n    return 0;\n}\n```"
  },
  {
    "task": "Construct a parent class for a historical record with methods for events and dates, then derive a war history class that overrides these methods for battles.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass HistoricalRecord {\npublic:\n    virtual void event() {\n        std::cout << \"General Historical Event\\n\";\n    }\n\n    virtual void date() {\n        std::cout << \"Unknown Date\\n\";\n    }\n};\n\nclass WarHistory : public HistoricalRecord {\npublic:\n    void event() override {\n        std::cout << \"Battle Event\\n\";\n    }\n\n    void date() override {\n        std::cout << \"Battle Date\\n\";\n    }\n};\n\nint main() {\n    HistoricalRecord* record = new HistoricalRecord();\n    WarHistory* battle = new WarHistory();\n\n    record->event();\n    record->date();\n\n    battle->event();\n    battle->date();\n\n    delete record;\n    delete battle;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Set up a base class for a pet adoption service with methods for application and approval, and extend it with a dog adoption subclass that overrides these methods for breed compatibility.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass PetAdoptionService {\npublic:\n    virtual void apply(const std::string& applicant) {\n        std::cout << \"Application received from: \" << applicant << std::endl;\n    }\n\n    virtual bool approve(const std::string& applicant) {\n        std::cout << \"Application from \" << applicant << \" is under review.\" << std::endl;\n        return true;\n    }\n};\n\nclass DogAdoptionService : public PetAdoptionService {\npublic:\n    void apply(const std::string& applicant) override {\n        std::cout << \"Dog adoption application received from: \" << applicant << std::endl;\n    }\n\n    bool approve(const std::string& applicant) override {\n        std::cout << \"Checking breed compatibility for: \" << applicant << std::endl;\n        // Assume some breed compatibility logic here\n        bool compatible = true;  // Simulated logic\n        if (compatible) {\n            std::cout << \"Application from \" << applicant << \" is approved.\" << std::endl;\n            return true;\n        } else {\n            std::cout << \"Application from \" << applicant << \" is not approved due to breed incompatibility.\" << std::endl;\n            return false;\n        }\n    }\n};\n\nint main() {\n    PetAdoptionService* service = new DogAdoptionService();\n    service->apply(\"John Doe\");\n    service->approve(\"John Doe\");\n\n    delete service;\n    return 0;\n}\n```"
  },
  {
    "task": "Create a foundational class for a financial report with properties like fiscal year and summary, and derive an annual report class that overrides the fiscal year property for yearly data.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass FinancialReport {\nprotected:\n    std::string fiscalYear;\n    std::string summary;\n\npublic:\n    FinancialReport(const std::string& year, const std::string& sum)\n        : fiscalYear(year), summary(sum) {}\n\n    virtual void displayReport() const {\n        std::cout << \"Fiscal Year: \" << fiscalYear << \"\\n\";\n        std::cout << \"Summary: \" << summary << \"\\n\";\n    }\n};\n\nclass AnnualReport : public FinancialReport {\npublic:\n    AnnualReport(const std::string& year, const std::string& sum)\n        : FinancialReport(year, sum) {}\n\n    void displayReport() const override {\n        std::cout << \"Annual Report for Fiscal Year: \" << fiscalYear << \"\\n\";\n        std::cout << \"Summary: \" << summary << \"\\n\";\n    }\n};\n\nint main() {\n    FinancialReport report(\"2023\", \"General financial overview.\");\n    report.displayReport();\n\n    AnnualReport annualReport(\"2023\", \"Detailed annual financial data.\");\n    annualReport.displayReport();\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a base class for a movie franchise with methods for casting and production, then create a sequel subclass that overrides these methods for continuity.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass MovieFranchise {\npublic:\n    virtual void casting() const {\n        std::cout << \"Casting actors for the movie franchise.\" << std::endl;\n    }\n\n    virtual void production() const {\n        std::cout << \"Producing the movie franchise.\" << std::endl;\n    }\n};\n\nclass Sequel : public MovieFranchise {\npublic:\n    void casting() const override {\n        std::cout << \"Casting actors for the sequel, ensuring continuity.\" << std::endl;\n    }\n\n    void production() const override {\n        std::cout << \"Producing the sequel with continuity in mind.\" << std::endl;\n    }\n};\n\nint main() {\n    MovieFranchise original;\n    Sequel sequel;\n\n    original.casting();\n    original.production();\n\n    sequel.casting();\n    sequel.production();\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a superclass for a real estate listing with methods for pricing and description, then extend it with a luxury listing subclass that overrides these methods for high-end features.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass RealEstateListing {\npublic:\n    virtual double getPrice() const {\n        return 100000.0; // Base price\n    }\n\n    virtual std::string getDescription() const {\n        return \"Standard real estate listing.\";\n    }\n};\n\nclass LuxuryListing : public RealEstateListing {\npublic:\n    double getPrice() const override {\n        return 5000000.0; // Luxury price\n    }\n\n    std::string getDescription() const override {\n        return \"Luxury real estate listing with high-end features.\";\n    }\n};\n\nint main() {\n    RealEstateListing standardListing;\n    LuxuryListing luxuryListing;\n\n    std::cout << \"Standard Listing Price: $\" << standardListing.getPrice() << std::endl;\n    std::cout << \"Standard Listing Description: \" << standardListing.getDescription() << std::endl;\n\n    std::cout << \"Luxury Listing Price: $\" << luxuryListing.getPrice() << std::endl;\n    std::cout << \"Luxury Listing Description: \" << luxuryListing.getDescription() << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a base class for a mobile app with methods for user interface and performance, then create a gaming app subclass that overrides these methods for graphics and speed.",
    "code": "```cpp\n#include <iostream>\n\nclass MobileApp {\npublic:\n    virtual void userInterface() {\n        std::cout << \"Standard mobile app interface\" << std::endl;\n    }\n\n    virtual void performance() {\n        std::cout << \"Standard mobile app performance\" << std::endl;\n    }\n};\n\nclass GamingApp : public MobileApp {\npublic:\n    void userInterface() override {\n        std::cout << \"Enhanced gaming graphics interface\" << std::endl;\n    }\n\n    void performance() override {\n        std::cout << \"Optimized gaming speed performance\" << std::endl;\n    }\n};\n\nint main() {\n    MobileApp* app = new MobileApp();\n    app->userInterface();\n    app->performance();\n\n    MobileApp* gameApp = new GamingApp();\n    gameApp->userInterface();\n    gameApp->performance();\n\n    delete app;\n    delete gameApp;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Construct a parent class for a corporate policy with methods for compliance and enforcement, then derive an HR policy class that overrides these methods for employee relations.",
    "code": "```cpp\n#include <iostream>\n\nclass CorporatePolicy {\npublic:\n    virtual void compliance() {\n        std::cout << \"Corporate compliance guidelines.\" << std::endl;\n    }\n\n    virtual void enforcement() {\n        std::cout << \"Corporate enforcement procedures.\" << std::endl;\n    }\n};\n\nclass HRPolicy : public CorporatePolicy {\npublic:\n    void compliance() override {\n        std::cout << \"HR compliance guidelines for employee relations.\" << std::endl;\n    }\n\n    void enforcement() override {\n        std::cout << \"HR enforcement procedures for employee relations.\" << std::endl;\n    }\n};\n\nint main() {\n    CorporatePolicy *policy = new HRPolicy();\n    policy->compliance();\n    policy->enforcement();\n    delete policy;\n    return 0;\n}\n```"
  },
  {
    "task": "Set up a base class for a scientific calculator with methods for basic operations and advanced functions, and extend it with a graphing calculator subclass that overrides these methods for plotting.",
    "code": "```cpp\n#include <iostream>\n#include <cmath>\n\nclass ScientificCalculator {\npublic:\n    virtual double add(double a, double b) {\n        return a + b;\n    }\n\n    virtual double subtract(double a, double b) {\n        return a - b;\n    }\n\n    virtual double multiply(double a, double b) {\n        return a * b;\n    }\n\n    virtual double divide(double a, double b) {\n        if (b != 0) {\n            return a / b;\n        } else {\n            std::cerr << \"Division by zero!\" << std::endl;\n            return NAN;\n        }\n    }\n\n    virtual double power(double base, double exponent) {\n        return std::pow(base, exponent);\n    }\n\n    virtual double squareRoot(double value) {\n        if (value >= 0) {\n            return std::sqrt(value);\n        } else {\n            std::cerr << \"Square root of negative number!\" << std::endl;\n            return NAN;\n        }\n    }\n};\n\nclass GraphingCalculator : public ScientificCalculator {\npublic:\n    virtual double add(double a, double b) override {\n        std::cout << \"Graphing add operation\" << std::endl;\n        return a + b;\n    }\n\n    virtual double subtract(double a, double b) override {\n        std::cout << \"Graphing subtract operation\" << std::endl;\n        return a - b;\n    }\n\n    virtual double multiply(double a, double b) override {\n        std::cout << \"Graphing multiply operation\" << std::endl;\n        return a * b;\n    }\n\n    virtual double divide(double a, double b) override {\n        std::cout << \"Graphing divide operation\" << std::endl;\n        return ScientificCalculator::divide(a, b);\n    }\n\n    virtual double power(double base, double exponent) override {\n        std::cout << \"Graphing power operation\" << std::endl;\n        return ScientificCalculator::power(base, exponent);\n    }\n\n    virtual double squareRoot(double value) override {\n        std::cout << \"Graphing square root operation\" << std::endl;\n        return ScientificCalculator::squareRoot(value);\n    }\n\n    void plotFunction(double (*func)(double), double start, double end, double step) {\n        std::cout << \"Plotting function from \" << start << \" to \" << end << \" with step \" << step << std::endl;\n        for (double x = start; x <= end; x += step) {\n            std::cout << \"x: \" << x << \", f(x): \" << func(x) << std::endl;\n        }\n    }\n};\n\ndouble sampleFunction(double x) {\n    return std::sin(x);\n}\n\nint main() {\n    GraphingCalculator gc;\n    gc.plotFunction(sampleFunction, 0, 2 * M_PI, 0.1);\n    return 0;\n}\n```"
  },
  {
    "task": "Create a foundational class for a children's book with properties like age group and illustrations, and derive a picture book class that overrides the illustrations property to be more prominent.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass ChildrensBook {\nprotected:\n    std::string ageGroup;\n    std::string illustrations;\n\npublic:\n    ChildrensBook(const std::string& age, const std::string& illus)\n        : ageGroup(age), illustrations(illus) {}\n\n    virtual void displayInfo() const {\n        std::cout << \"Age Group: \" << ageGroup << \"\\n\";\n        std::cout << \"Illustrations: \" << illustrations << \"\\n\";\n    }\n};\n\nclass PictureBook : public ChildrensBook {\npublic:\n    PictureBook(const std::string& age, const std::string& illus)\n        : ChildrensBook(age, illus) {}\n\n    void displayInfo() const override {\n        std::cout << \"Age Group: \" << ageGroup << \"\\n\";\n        std::cout << \"Illustrations (Prominent): \" << illustrations << \"\\n\";\n    }\n};\n\nint main() {\n    ChildrensBook book(\"5-7 years\", \"Basic illustrations\");\n    PictureBook picBook(\"3-5 years\", \"Vivid illustrations\");\n\n    book.displayInfo();\n    std::cout << \"\\n\";\n    picBook.displayInfo();\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a base class for a cooking class with methods for ingredients and techniques, then create a baking class subclass that overrides these methods for dough preparation.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass CookingClass {\npublic:\n    virtual void ingredients() const {\n        std::cout << \"Generic ingredients for cooking.\\n\";\n    }\n\n    virtual void techniques() const {\n        std::cout << \"Generic cooking techniques.\\n\";\n    }\n};\n\nclass BakingClass : public CookingClass {\npublic:\n    void ingredients() const override {\n        std::cout << \"Flour, sugar, eggs, and butter for baking.\\n\";\n    }\n\n    void techniques() const override {\n        std::cout << \"Kneading dough, proofing, and baking.\\n\";\n    }\n};\n\nint main() {\n    CookingClass* cooking = new CookingClass();\n    CookingClass* baking = new BakingClass();\n\n    cooking->ingredients();\n    cooking->techniques();\n\n    baking->ingredients();\n    baking->techniques();\n\n    delete cooking;\n    delete baking;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a superclass for a public transportation system with methods for routes and schedules, then extend it with a metro system subclass that overrides these methods for urban areas.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass PublicTransportationSystem {\npublic:\n    virtual std::string getRoutes() const {\n        return \"General transportation routes.\";\n    }\n\n    virtual std::string getSchedules() const {\n        return \"General transportation schedules.\";\n    }\n};\n\nclass MetroSystem : public PublicTransportationSystem {\npublic:\n    std::string getRoutes() const override {\n        return \"Urban metro routes.\";\n    }\n\n    std::string getSchedules() const override {\n        return \"Urban metro schedules.\";\n    }\n};\n\nint main() {\n    PublicTransportationSystem* system = new PublicTransportationSystem();\n    MetroSystem* metro = new MetroSystem();\n\n    std::cout << \"Public Transportation System Routes: \" << system->getRoutes() << std::endl;\n    std::cout << \"Public Transportation System Schedules: \" << system->getSchedules() << std::endl;\n\n    std::cout << \"Metro System Routes: \" << metro->getRoutes() << std::endl;\n    std::cout << \"Metro System Schedules: \" << metro->getSchedules() << std::endl;\n\n    delete system;\n    delete metro;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a base class for a music store inventory with methods for stock and sales, then create a vinyl record subclass that overrides these methods for collectible items.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass MusicStoreInventory {\npublic:\n    virtual void stock(int quantity) {\n        std::cout << \"Stocking \" << quantity << \" items in general inventory.\" << std::endl;\n    }\n    \n    virtual void sell(int quantity) {\n        std::cout << \"Selling \" << quantity << \" items from general inventory.\" << std::endl;\n    }\n};\n\nclass VinylRecord : public MusicStoreInventory {\npublic:\n    void stock(int quantity) override {\n        std::cout << \"Stocking \" << quantity << \" collectible vinyl records.\" << std::endl;\n    }\n    \n    void sell(int quantity) override {\n        std::cout << \"Selling \" << quantity << \" collectible vinyl records.\" << std::endl;\n    }\n};\n\nint main() {\n    MusicStoreInventory *generalInventory = new MusicStoreInventory();\n    VinylRecord *vinylInventory = new VinylRecord();\n    \n    generalInventory->stock(10);\n    generalInventory->sell(5);\n    \n    vinylInventory->stock(20);\n    vinylInventory->sell(10);\n    \n    delete generalInventory;\n    delete vinylInventory;\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Construct a parent class for a legal contract with methods for terms and conditions, then derive a rental agreement class that overrides these methods for tenant rights.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass LegalContract {\npublic:\n    virtual std::string terms() const {\n        return \"General terms and conditions of the legal contract.\";\n    }\n\n    virtual std::string conditions() const {\n        return \"General conditions of the legal contract.\";\n    }\n};\n\nclass RentalAgreement : public LegalContract {\npublic:\n    std::string terms() const override {\n        return \"Terms specific to rental agreement regarding tenant rights.\";\n    }\n\n    std::string conditions() const override {\n        return \"Conditions specific to rental agreement regarding tenant rights.\";\n    }\n};\n\nint main() {\n    LegalContract contract;\n    RentalAgreement rental;\n\n    std::cout << \"LegalContract terms: \" << contract.terms() << std::endl;\n    std::cout << \"LegalContract conditions: \" << contract.conditions() << std::endl;\n\n    std::cout << \"RentalAgreement terms: \" << rental.terms() << std::endl;\n    std::cout << \"RentalAgreement conditions: \" << rental.conditions() << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Set up a base class for a journalism piece with methods for reporting and editing, and extend it with an investigative article subclass that overrides these methods for in-depth analysis.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass JournalismPiece {\npublic:\n    virtual void report() {\n        std::cout << \"Reporting a general journalism piece.\" << std::endl;\n    }\n    \n    virtual void edit() {\n        std::cout << \"Editing the general journalism piece.\" << std::endl;\n    }\n};\n\nclass InvestigativeArticle : public JournalismPiece {\npublic:\n    void report() override {\n        std::cout << \"Reporting an investigative article with in-depth analysis.\" << std::endl;\n    }\n    \n    void edit() override {\n        std::cout << \"Editing the investigative article with detailed scrutiny.\" << std::endl;\n    }\n};\n\nint main() {\n    JournalismPiece general;\n    InvestigativeArticle investigative;\n    \n    JournalismPiece* piece1 = &general;\n    JournalismPiece* piece2 = &investigative;\n    \n    piece1->report();\n    piece1->edit();\n    \n    piece2->report();\n    piece2->edit();\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Create a foundational class for a wildlife reserve with properties like area and species, and derive a bird sanctuary class that overrides the species property for avians.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass WildlifeReserve {\nprotected:\n    double area;\n    std::string species;\n\npublic:\n    WildlifeReserve(double a, const std::string& s) : area(a), species(s) {}\n\n    virtual std::string getSpecies() const {\n        return species;\n    }\n\n    double getArea() const {\n        return area;\n    }\n};\n\nclass BirdSanctuary : public WildlifeReserve {\npublic:\n    BirdSanctuary(double a) : WildlifeReserve(a, \"Avians\") {}\n\n    std::string getSpecies() const override {\n        return species;\n    }\n};\n\nint main() {\n    WildlifeReserve reserve(1500.0, \"Various\");\n    BirdSanctuary sanctuary(500.0);\n\n    std::cout << \"Wildlife Reserve Species: \" << reserve.getSpecies() << std::endl;\n    std::cout << \"Bird Sanctuary Species: \" << sanctuary.getSpecies() << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a base class for a subscription box service with methods for curation and delivery, then create a gourmet food box subclass that overrides these methods for artisanal products.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass SubscriptionBox {\npublic:\n    virtual void curate() {\n        std::cout << \"Curating a variety of items for the box.\" << std::endl;\n    }\n\n    virtual void deliver() {\n        std::cout << \"Delivering the subscription box.\" << std::endl;\n    }\n\n    virtual ~SubscriptionBox() = default;\n};\n\nclass GourmetFoodBox : public SubscriptionBox {\npublic:\n    void curate() override {\n        std::cout << \"Curating artisanal gourmet food products.\" << std::endl;\n    }\n\n    void deliver() override {\n        std::cout << \"Delivering the gourmet food box with care.\" << std::endl;\n    }\n};\n\nint main() {\n    SubscriptionBox* box = new GourmetFoodBox();\n    box->curate();\n    box->deliver();\n    delete box;\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a superclass for a fitness app with methods for tracking and motivation, then extend it with a running app subclass that overrides these methods for pace and distance.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass FitnessApp {\npublic:\n    virtual void track() const {\n        std::cout << \"Tracking general fitness activities.\" << std::endl;\n    }\n    \n    virtual void motivate() const {\n        std::cout << \"Stay motivated! Keep pushing your limits!\" << std::endl;\n    }\n    \n    virtual ~FitnessApp() {}\n};\n\nclass RunningApp : public FitnessApp {\npublic:\n    void track() const override {\n        std::cout << \"Tracking running pace and distance.\" << std::endl;\n    }\n    \n    void motivate() const override {\n        std::cout << \"Keep running! Aim for a new personal best!\" << std::endl;\n    }\n};\n\nint main() {\n    FitnessApp* app = new FitnessApp();\n    app->track();\n    app->motivate();\n    \n    FitnessApp* runningApp = new RunningApp();\n    runningApp->track();\n    runningApp->motivate();\n\n    delete app;\n    delete runningApp;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a base class for a digital portfolio with methods for showcasing and updating, then create an artist portfolio subclass that overrides these methods for galleries.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass DigitalPortfolio {\npublic:\n    virtual void showcase() {\n        std::cout << \"Showcasing digital portfolio.\" << std::endl;\n    }\n\n    virtual void update() {\n        std::cout << \"Updating digital portfolio.\" << std::endl;\n    }\n\n    virtual ~DigitalPortfolio() {}\n};\n\nclass ArtistPortfolio : public DigitalPortfolio {\npublic:\n    void showcase() override {\n        std::cout << \"Showcasing artist portfolio in a gallery.\" << std::endl;\n    }\n\n    void update() override {\n        std::cout << \"Updating artist portfolio with new artwork.\" << std::endl;\n    }\n};\n\nint main() {\n    DigitalPortfolio* portfolio = new ArtistPortfolio();\n    portfolio->showcase();\n    portfolio->update();\n    delete portfolio;\n    return 0;\n}\n```"
  },
  {
    "task": "Construct a parent class for a gaming console with methods for performance and compatibility, then derive a next-gen console class that overrides these methods for new features.",
    "code": "```cpp\n#include <iostream>\n\nclass GamingConsole {\npublic:\n    virtual void performance() const {\n        std::cout << \"Standard performance for gaming console.\" << std::endl;\n    }\n\n    virtual void compatibility() const {\n        std::cout << \"Compatible with standard games.\" << std::endl;\n    }\n\n    virtual ~GamingConsole() {}\n};\n\nclass NextGenConsole : public GamingConsole {\npublic:\n    void performance() const override {\n        std::cout << \"Enhanced performance for next-gen gaming console.\" << std::endl;\n    }\n\n    void compatibility() const override {\n        std::cout << \"Compatible with next-gen and standard games.\" << std::endl;\n    }\n};\n\nint main() {\n    GamingConsole* console = new NextGenConsole();\n    console->performance();\n    console->compatibility();\n    delete console;\n    return 0;\n}\n```"
  },
  {
    "task": "Set up a base class for a cultural festival with methods for events and participation, and extend it with a music festival subclass that overrides these methods for performances.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nclass CulturalFestival {\npublic:\n    virtual void events() {\n        std::cout << \"Cultural Festival: Various cultural events are held.\" << std::endl;\n    }\n\n    virtual void participation() {\n        std::cout << \"Cultural Festival: Participants can register for cultural activities.\" << std::endl;\n    }\n};\n\nclass MusicFestival : public CulturalFestival {\npublic:\n    void events() override {\n        std::cout << \"Music Festival: Live music performances are scheduled.\" << std::endl;\n    }\n\n    void participation() override {\n        std::cout << \"Music Festival: Musicians can register to perform.\" << std::endl;\n    }\n};\n\nint main() {\n    CulturalFestival cf;\n    MusicFestival mf;\n\n    cf.events();\n    cf.participation();\n\n    mf.events();\n    mf.participation();\n\n    return 0;\n}\n```"
  }
]