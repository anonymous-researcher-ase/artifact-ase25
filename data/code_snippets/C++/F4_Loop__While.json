[
  {
    "task": "Create a program that continuously asks the user to enter a number until they input a negative number.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    int number = 0;\n    while (number >= 0) {\n        std::cout << \"Enter a number: \";\n        std::cin >> number;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that doubles a number and repeats the process until the number is greater than 1000.",
    "code": "```cpp\n#include <iostream>\n\nvoid doubleUntilGreaterThan1000(int num) {\n    while (num <= 1000) {\n        num *= 2;\n    }\n    std::cout << num << std::endl;\n}\n\nint main() {\n    int number = 10; // Example starting number\n    doubleUntilGreaterThan1000(number);\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a routine to keep printing 'Hello, World!' until a counter reaches 10.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    int counter = 0;\n    while (counter < 10) {\n        std::cout << \"Hello, World!\" << std::endl;\n        counter++;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Construct a loop that checks if a randomly generated number is even, repeating until an odd number is found.",
    "code": "```cpp\n#include <iostream>\n#include <cstdlib>\n#include <ctime>\n\nint main() {\n    std::srand(std::time(0));\n    int num;\n    \n    while (true) {\n        num = std::rand();\n        if (num % 2 != 0) {\n            break;\n        }\n    }\n\n    std::cout << \"Found an odd number: \" << num << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Design a countdown timer that prints each second until it reaches zero.",
    "code": "```cpp\n#include <iostream>\n#include <thread>\n#include <chrono>\n\nint main() {\n    int countdown = 10; // Set the starting time for the countdown\n\n    while (countdown >= 0) {\n        std::cout << countdown << std::endl;\n        std::this_thread::sleep_for(std::chrono::seconds(1));\n        countdown--;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a system where a user can keep adding items to a list until they type 'stop'.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n\nint main() {\n    std::vector<std::string> items;\n    std::string input;\n\n    std::cout << \"Enter items to add to the list (type 'stop' to finish):\" << std::endl;\n    while (true) {\n        std::getline(std::cin, input);\n        if (input == \"stop\") {\n            break;\n        }\n        items.push_back(input);\n    }\n\n    std::cout << \"Items in the list:\" << std::endl;\n    for (const auto& item : items) {\n        std::cout << item << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a script that simulates rolling a die and continues until a six is rolled.",
    "code": "```cpp\n#include <iostream>\n#include <cstdlib>\n#include <ctime>\n\nint main() {\n    std::srand(std::time(nullptr)); // Seed the random number generator\n    int roll = 0;\n    \n    while (roll != 6) {\n        roll = std::rand() % 6 + 1; // Roll a die\n        std::cout << \"Rolled: \" << roll << std::endl;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Create a program that asks for a password and keeps prompting until the correct password is entered.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nint main() {\n    std::string correctPassword = \"password123\";\n    std::string inputPassword;\n\n    while (true) {\n        std::cout << \"Enter password: \";\n        std::cin >> inputPassword;\n\n        if (inputPassword == correctPassword) {\n            std::cout << \"Password accepted.\" << std::endl;\n            break;\n        } else {\n            std::cout << \"Incorrect password. Try again.\" << std::endl;\n        }\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a loop that calculates the sum of entered numbers until the user enters zero.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    int number, sum = 0;\n    std::cout << \"Enter numbers (0 to stop): \" << std::endl;\n    \n    std::cin >> number;\n    while (number != 0) {\n        sum += number;\n        std::cin >> number;\n    }\n\n    std::cout << \"Sum: \" << sum << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a feature that prints Fibonacci numbers until a number exceeds 100.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    int a = 0, b = 1;\n    \n    while (a <= 100) {\n        std::cout << a << std::endl;\n        int next = a + b;\n        a = b;\n        b = next;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Develop a loop that keeps halving a number until it becomes less than one.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    double number = 100.0; // Example starting number\n    while (number >= 1.0) {\n        number /= 2.0;\n    }\n    std::cout << \"Final number: \" << number << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program that asks for names and keeps storing them until the user enters 'done'.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nint main() {\n    std::string name;\n    std::cout << \"Enter names (type 'done' to finish):\" << std::endl;\n    while (true) {\n        std::getline(std::cin, name);\n        if (name == \"done\") {\n            break;\n        }\n        // Store the name or process it as needed\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Create a process that keeps flipping a coin, recording results until there have been five heads.",
    "code": "```cpp\n#include <iostream>\n#include <cstdlib>\n#include <ctime>\n\nint main() {\n    std::srand(static_cast<unsigned int>(std::time(nullptr)));\n    int headsCount = 0;\n\n    while (headsCount < 5) {\n        int flip = std::rand() % 2; // 0 for tails, 1 for heads\n        if (flip == 1) {\n            headsCount++;\n            std::cout << \"Heads\" << std::endl;\n        } else {\n            std::cout << \"Tails\" << std::endl;\n        }\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a countdown that decreases by two each time, starting from 20, until it reaches zero.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    int count = 20;\n    while (count > 0) {\n        std::cout << count << std::endl;\n        count -= 2;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Design a solution that repeatedly asks for user input and repeats it back until they type 'exit'.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nint main() {\n    std::string input;\n    while (true) {\n        std::cout << \"Enter something (type 'exit' to quit): \";\n        std::getline(std::cin, input);\n        if (input == \"exit\") {\n            break;\n        }\n        std::cout << \"You entered: \" << input << std::endl;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a loop to simulate a bank account balance, repeatedly deducting a fee until the balance is below zero.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    double balance = 100.0; // Initial balance\n    double fee = 10.0; // Fee to be deducted\n\n    while (balance >= 0) {\n        balance -= fee;\n    }\n\n    std::cout << \"Final balance: \" << balance << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Create a sequence generator that multiplies a number by three each time until it reaches or exceeds 100.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    int number = 1; // starting number\n    while (number < 100) {\n        std::cout << number << \" \";\n        number *= 3;\n    }\n    std::cout << number << std::endl; // print the final number if it reaches or exceeds 100\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program that keeps generating random numbers between 1 and 10 until it gets a five.",
    "code": "```cpp\n#include <iostream>\n#include <cstdlib>\n#include <ctime>\n\nint main() {\n    std::srand(std::time(nullptr)); // Seed the random number generator\n    int number = 0;\n    \n    while (number != 5) {\n        number = std::rand() % 10 + 1;\n        std::cout << \"Generated: \" << number << std::endl;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Implement a system to keep checking the temperature and only stop when it falls below freezing.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    double temperature;\n\n    std::cout << \"Enter the temperature: \";\n    std::cin >> temperature;\n\n    while (temperature >= 0) {\n        std::cout << \"Temperature is above freezing. Checking again...\\n\";\n        std::cout << \"Enter the temperature: \";\n        std::cin >> temperature;\n    }\n\n    std::cout << \"Temperature is below freezing. Stopping check.\\n\";\n\n    return 0;\n}\n```"
  },
  {
    "task": "Construct a quiz game that continues asking questions until the player answers incorrectly.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nint main() {\n    std::string question = \"What is the capital of France?\";\n    std::string correctAnswer = \"Paris\";\n    std::string playerAnswer;\n\n    while (true) {\n        std::cout << question << std::endl;\n        std::getline(std::cin, playerAnswer);\n\n        if (playerAnswer != correctAnswer) {\n            std::cout << \"Incorrect answer. Game over!\" << std::endl;\n            break;\n        } else {\n            std::cout << \"Correct! Next question...\" << std::endl;\n        }\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that calculates factorials of a number, repeating the process for numbers 1 through 5.",
    "code": "```cpp\n#include <iostream>\n\nint factorial(int n) {\n    int result = 1;\n    while (n > 1) {\n        result *= n;\n        n--;\n    }\n    return result;\n}\n\nint main() {\n    int number = 1;\n    while (number <= 5) {\n        std::cout << \"Factorial of \" << number << \" is \" << factorial(number) << std::endl;\n        number++;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Create a loop that prints all even numbers between 1 and 50.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    int number = 2;\n    while (number <= 50) {\n        std::cout << number << std::endl;\n        number += 2;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Design a program that continuously asks for user input until a palindrome is entered.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n#include <algorithm>\n\nbool isPalindrome(const std::string& str) {\n    std::string reversedStr = str;\n    std::reverse(reversedStr.begin(), reversedStr.end());\n    return str == reversedStr;\n}\n\nint main() {\n    std::string input;\n    while (true) {\n        std::cout << \"Enter a string: \";\n        std::getline(std::cin, input);\n        if (isPalindrome(input)) {\n            break;\n        }\n    }\n    std::cout << \"Palindrome entered: \" << input << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a countdown that decreases by one each second, starting from 100.",
    "code": "```cpp\n#include <iostream>\n#include <thread>\n#include <chrono>\n\nint main() {\n    int count = 100;\n    while (count > 0) {\n        std::cout << count << std::endl;\n        std::this_thread::sleep_for(std::chrono::seconds(1));\n        --count;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Write a script that repeatedly asks for a number and adds it to a total until the total exceeds 500.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    int total = 0;\n    int number;\n\n    while (total <= 500) {\n        std::cout << \"Enter a number: \";\n        std::cin >> number;\n        total += number;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a loop that generates random letters until the letter 'Z' appears.",
    "code": "```cpp\n#include <iostream>\n#include <cstdlib>\n#include <ctime>\n\nint main() {\n    std::srand(std::time(nullptr));\n    char letter;\n\n    do {\n        letter = 'A' + std::rand() % 26;\n        std::cout << letter << std::endl;\n    } while (letter != 'Z');\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a process that continues prompting for two numbers and prints their sum if it's even.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    int num1, num2;\n    while (true) {\n        std::cout << \"Enter two numbers: \";\n        std::cin >> num1 >> num2;\n        int sum = num1 + num2;\n        if (sum % 2 == 0) {\n            std::cout << \"The sum is even: \" << sum << std::endl;\n        }\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a loop that simulates a traffic light sequence until a manual stop command is received.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nint main() {\n    std::string command;\n    bool stop = false;\n    \n    while (!stop) {\n        std::cout << \"Traffic Light: Green\" << std::endl;\n        std::cout << \"Enter 'stop' to end or press Enter to continue: \";\n        std::getline(std::cin, command);\n        if (command == \"stop\") break;\n\n        std::cout << \"Traffic Light: Yellow\" << std::endl;\n        std::cout << \"Enter 'stop' to end or press Enter to continue: \";\n        std::getline(std::cin, command);\n        if (command == \"stop\") break;\n\n        std::cout << \"Traffic Light: Red\" << std::endl;\n        std::cout << \"Enter 'stop' to end or press Enter to continue: \";\n        std::getline(std::cin, command);\n        if (command == \"stop\") break;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a feature that keeps printing numbers in reverse order starting from 10.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    int number = 10;\n    while (number > 0) {\n        std::cout << number << std::endl;\n        number--;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Create a program that rolls two dice and continues until the sum is exactly seven.",
    "code": "```cpp\n#include <iostream>\n#include <cstdlib>\n#include <ctime>\n\nint main() {\n    std::srand(std::time(0));\n    int die1, die2, sum;\n    \n    do {\n        die1 = std::rand() % 6 + 1;\n        die2 = std::rand() % 6 + 1;\n        sum = die1 + die2;\n    } while (sum != 7);\n    \n    std::cout << \"Rolled a sum of 7!\" << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Design a loop that keeps asking for ages and prints the average once a negative age is entered.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    int age;\n    int count = 0;\n    double sum = 0.0;\n\n    std::cout << \"Enter ages (negative age to stop): \" << std::endl;\n    std::cin >> age;\n\n    while (age >= 0) {\n        sum += age;\n        count++;\n        std::cin >> age;\n    }\n\n    if (count > 0) {\n        double average = sum / count;\n        std::cout << \"Average age: \" << average << std::endl;\n    } else {\n        std::cout << \"No valid ages entered.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a routine that squares numbers starting from 1 until the square is greater than 500.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    int num = 1;\n    while (num * num <= 500) {\n        std::cout << num * num << std::endl;\n        ++num;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a system to ask for a string and append it to a file until 'end' is typed.",
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nint main() {\n    std::ofstream file(\"output.txt\", std::ios::app);\n    std::string input;\n    \n    while (true) {\n        std::cout << \"Enter a string (type 'end' to stop): \";\n        std::getline(std::cin, input);\n        \n        if (input == \"end\") {\n            break;\n        }\n        \n        file << input << std::endl;\n    }\n    \n    file.close();\n    return 0;\n}\n```"
  },
  {
    "task": "Create a script that checks if a number is prime, repeating for each number entered by the user.",
    "code": "```cpp\n#include <iostream>\nusing namespace std;\n\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (int i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) return false;\n    }\n    return true;\n}\n\nint main() {\n    int number;\n    while (true) {\n        cout << \"Enter a number (or a non-number to exit): \";\n        if (!(cin >> number)) break;\n        if (isPrime(number)) {\n            cout << number << \" is a prime number.\" << endl;\n        } else {\n            cout << number << \" is not a prime number.\" << endl;\n        }\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a countdown that prints numbers starting from 50 down to 1.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    int number = 50;\n\n    while (number > 0) {\n        std::cout << number << std::endl;\n        number--;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program that keeps doubling the value of a variable until it exceeds 200.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    int value = 1;\n    \n    while (value <= 200) {\n        value *= 2;\n    }\n    \n    std::cout << \"Final value: \" << value << std::endl;\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Design a loop that keeps generating a random string of letters until a specific word is formed.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n#include <cstdlib>\n#include <ctime>\n\nstd::string generateRandomString(int length) {\n    const std::string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    std::string result;\n    for (int i = 0; i < length; ++i) {\n        result += alphabet[rand() % alphabet.size()];\n    }\n    return result;\n}\n\nint main() {\n    srand(static_cast<unsigned int>(time(0)));\n    const std::string targetWord = \"hello\";\n    std::string randomString;\n    \n    while (randomString != targetWord) {\n        randomString = generateRandomString(targetWord.size());\n        std::cout << \"Generated: \" << randomString << std::endl;\n    }\n    \n    std::cout << \"Target word formed: \" << randomString << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a system that continuously fetches data from a sensor until a threshold is crossed.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    double sensorData;\n    const double threshold = 100.0;\n\n    // Simulated sensor data fetching\n    while (true) {\n        // Replace the following line with actual sensor data fetching logic\n        sensorData = static_cast<double>(rand() % 200); // Simulating sensor data\n\n        std::cout << \"Sensor Data: \" << sensorData << std::endl;\n\n        if (sensorData > threshold) {\n            std::cout << \"Threshold crossed. Stopping data fetch.\" << std::endl;\n            break;\n        }\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a game where a player guesses a number, and the game continues until the player guesses correctly.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    int secretNumber = 7; // Example secret number\n    int guess = 0;\n\n    std::cout << \"Guess the number: \";\n    std::cin >> guess;\n\n    while (guess != secretNumber) {\n        std::cout << \"Wrong guess, try again: \";\n        std::cin >> guess;\n    }\n\n    std::cout << \"Congratulations! You've guessed the right number.\" << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Write a loop that continues to add random numbers to a list until the list has 10 even numbers.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <cstdlib>\n#include <ctime>\n\nint main() {\n    std::srand(std::time(0));\n    std::vector<int> evenNumbers;\n\n    while (evenNumbers.size() < 10) {\n        int num = std::rand();\n        if (num % 2 == 0) {\n            evenNumbers.push_back(num);\n        }\n    }\n\n    for (int number : evenNumbers) {\n        std::cout << number << \" \";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a routine that keeps removing elements from a list until it is empty.",
    "code": "```cpp\n#include <iostream>\n#include <list>\n\nint main() {\n    std::list<int> myList = {1, 2, 3, 4, 5};\n\n    while (!myList.empty()) {\n        myList.pop_front();\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a sequence that prints the alphabet repeatedly until interrupted by the user.",
    "code": "```cpp\n#include <iostream>\n#include <csignal>\n\nbool keepRunning = true;\n\nvoid signalHandler(int signum) {\n    keepRunning = false;\n}\n\nint main() {\n    std::signal(SIGINT, signalHandler);\n    while (keepRunning) {\n        for (char c = 'A'; c <= 'Z'; ++c) {\n            std::cout << c;\n        }\n        std::cout << std::endl;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Create a program that continuously checks for updates and stops once an update is available.",
    "code": "```cpp\n#include <iostream>\n#include <cstdlib>\n#include <ctime>\n\nbool checkForUpdate() {\n    // Simulate an update check: Return true randomly\n    return std::rand() % 10 == 0;\n}\n\nint main() {\n    std::srand(static_cast<unsigned int>(std::time(nullptr)));\n    bool updateAvailable = false;\n\n    while (!updateAvailable) {\n        updateAvailable = checkForUpdate();\n    }\n\n    std::cout << \"Update is available!\" << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that keeps dividing a number by two until it results in a fractional value.",
    "code": "```cpp\n#include <iostream>\n\nvoid divideUntilFractional(double number) {\n    while (number == static_cast<int>(number)) {\n        number /= 2;\n    }\n    std::cout << \"Resulting fractional value: \" << number << std::endl;\n}\n\nint main() {\n    double number = 64; // Example number\n    divideUntilFractional(number);\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a loop that keeps asking for student's grades and calculates the average until a grade of -1 is entered.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    double sum = 0.0;\n    int count = 0;\n    double grade = 0.0;\n\n    while (true) {\n        std::cout << \"Enter a grade (-1 to finish): \";\n        std::cin >> grade;\n        \n        if (grade == -1) {\n            break;\n        }\n        \n        sum += grade;\n        count++;\n    }\n\n    if (count > 0) {\n        double average = sum / count;\n        std::cout << \"Average grade: \" << average << std::endl;\n    } else {\n        std::cout << \"No grades entered.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a feature that continuously monitors a file for changes and stops when no changes are detected for a minute.",
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <chrono>\n#include <thread>\n#include <filesystem>\n\nnamespace fs = std::filesystem;\n\nbool file_changed(const std::string& filename, std::time_t& last_write_time) {\n    auto current_write_time = fs::last_write_time(filename);\n    if (current_write_time != last_write_time) {\n        last_write_time = current_write_time;\n        return true;\n    }\n    return false;\n}\n\nint main() {\n    std::string filename = \"your_file.txt\";\n    std::time_t last_write_time = fs::last_write_time(filename);\n    auto last_change_time = std::chrono::steady_clock::now();\n    bool changed = true;\n\n    while (changed || std::chrono::steady_clock::now() - last_change_time < std::chrono::minutes(1)) {\n        if (file_changed(filename, last_write_time)) {\n            last_change_time = std::chrono::steady_clock::now();\n            changed = true;\n        } else {\n            changed = false;\n        }\n        std::this_thread::sleep_for(std::chrono::seconds(1));\n    }\n\n    std::cout << \"No changes detected for a minute, stopping the monitor.\" << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a process where a motor runs until a certain distance is reached.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    double distanceCovered = 0.0;\n    double targetDistance = 100.0; // Example target distance\n\n    while (distanceCovered < targetDistance) {\n        // Simulate the motor running and increasing the distance\n        double speed = 10.0; // Example speed\n        distanceCovered += speed;\n\n        // Output current status\n        std::cout << \"Distance covered: \" << distanceCovered << \" units\" << std::endl;\n    }\n\n    std::cout << \"Target distance reached.\" << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a script that keeps generating random numbers and stops when it generates a prime number.",
    "code": "```cpp\n#include <iostream>\n#include <cstdlib>\n#include <ctime>\n\nbool isPrime(int num) {\n    if (num <= 1) return false;\n    if (num <= 3) return true;\n    if (num % 2 == 0 || num % 3 == 0) return false;\n    for (int i = 5; i * i <= num; i += 6) {\n        if (num % i == 0 || num % (i + 2) == 0) return false;\n    }\n    return true;\n}\n\nint main() {\n    std::srand(std::time(0));\n    int number;\n    \n    while (true) {\n        number = std::rand();\n        if (isPrime(number)) {\n            std::cout << \"Prime number found: \" << number << std::endl;\n            break;\n        }\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Write a program that asks for the user's favorite color and keeps asking until they say 'blue'.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nint main() {\n    std::string color;\n    while (true) {\n        std::cout << \"Enter your favorite color: \";\n        std::getline(std::cin, color);\n        if (color == \"blue\") {\n            break;\n        }\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a loop that continuously prints the time every second until a key is pressed.",
    "code": "```cpp\n#include <iostream>\n#include <ctime>\n#include <conio.h>\n#include <thread>\n#include <chrono>\n\nint main() {\n    while (!_kbhit()) {\n        std::time_t now = std::time(nullptr);\n        std::cout << std::ctime(&now);\n        std::this_thread::sleep_for(std::chrono::seconds(1));\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Create a system to keep downloading data from a server until the connection is lost.",
    "code": "```cpp\n#include <iostream>\n\nbool downloadData() {\n    // Simulated download function\n    // Return false to simulate lost connection\n    return true; \n}\n\nint main() {\n    bool connection = true;\n\n    while (connection) {\n        connection = downloadData();\n        if (!connection) {\n            std::cout << \"Connection lost. Stopping download.\" << std::endl;\n        }\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a process to keep a light on until the ambient light level is sufficient.",
    "code": "```cpp\n#include <iostream>\n\nbool isAmbientLightSufficient() {\n    // Placeholder function: replace with actual sensor reading logic\n    int ambientLightLevel;\n    std::cout << \"Enter current ambient light level (0-100): \";\n    std::cin >> ambientLightLevel;\n    return ambientLightLevel >= 70; // Example threshold\n}\n\nvoid processLightControl() {\n    bool lightIsOn = true;\n\n    while (lightIsOn) {\n        if (isAmbientLightSufficient()) {\n            lightIsOn = false;\n            std::cout << \"Ambient light is sufficient. Turning off the light.\\n\";\n        } else {\n            std::cout << \"Ambient light is insufficient. Keeping the light on.\\n\";\n        }\n    }\n}\n\nint main() {\n    processLightControl();\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a feature that continuously plays a sound until the user presses a button.",
    "code": "```cpp\n#include <iostream>\n#include <thread>\n#include <chrono>\n#include <atomic>\n\nstd::atomic<bool> keepPlaying(true);\n\nvoid playSound() {\n    while (keepPlaying) {\n        std::cout << \"Playing sound...\" << std::endl;\n        std::this_thread::sleep_for(std::chrono::seconds(1));\n    }\n}\n\nvoid checkForButtonPress() {\n    std::string input;\n    std::cout << \"Press Enter to stop the sound...\" << std::endl;\n    std::getline(std::cin, input);\n    keepPlaying = false;\n}\n\nint main() {\n    std::thread soundThread(playSound);\n    std::thread buttonThread(checkForButtonPress);\n\n    buttonThread.join();\n    soundThread.join();\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a program that keeps multiplying a matrix by itself until its determinant is greater than 1000.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <cmath>\n\nusing namespace std;\n\ntypedef vector<vector<double>> Matrix;\n\nMatrix multiplyMatrices(const Matrix &a, const Matrix &b) {\n    int n = a.size();\n    Matrix result(n, vector<double>(n, 0.0));\n\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < n; ++j) {\n            for (int k = 0; k < n; ++k) {\n                result[i][j] += a[i][k] * b[k][j];\n            }\n        }\n    }\n    return result;\n}\n\ndouble determinant(const Matrix &matrix, int n) {\n    if (n == 1) return matrix[0][0];\n    if (n == 2) return matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0];\n\n    double det = 0.0;\n    for (int p = 0; p < n; ++p) {\n        Matrix subMatrix(n - 1, vector<double>(n - 1));\n        for (int i = 1; i < n; ++i) {\n            int sub_j = 0;\n            for (int j = 0; j < n; ++j) {\n                if (j == p) continue;\n                subMatrix[i - 1][sub_j++] = matrix[i][j];\n            }\n        }\n        det += pow(-1, p) * matrix[0][p] * determinant(subMatrix, n - 1);\n    }\n    return det;\n}\n\nint main() {\n    Matrix matrix = {{2, 1}, {1, 2}};\n\n    while (determinant(matrix, matrix.size()) <= 1000) {\n        matrix = multiplyMatrices(matrix, matrix);\n    }\n\n    cout << \"Determinant: \" << determinant(matrix, matrix.size()) << endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Create a script that keeps prompting the user to guess a word until they get it right.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nint main() {\n    std::string secretWord = \"secret\";\n    std::string guess;\n\n    while (true) {\n        std::cout << \"Guess the word: \";\n        std::cin >> guess;\n\n        if (guess == secretWord) {\n            std::cout << \"Correct! You've guessed the word.\" << std::endl;\n            break;\n        } else {\n            std::cout << \"Wrong guess. Try again.\" << std::endl;\n        }\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a loop that simulates a car's fuel consumption and stops when the tank is empty.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    double fuel = 50.0; // initial amount of fuel in liters\n    double consumptionRate = 5.0; // fuel consumption rate in liters per hour\n\n    while (fuel > 0) {\n        std::cout << \"Fuel level: \" << fuel << \" liters\\n\";\n        // Simulate fuel consumption\n        fuel -= consumptionRate;\n\n        // Simulate time passing\n        // std::this_thread::sleep_for(std::chrono::hours(1)); // Uncomment if you want to simulate real time\n    }\n\n    std::cout << \"The tank is empty.\\n\";\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a routine that keeps checking if a file exists and stops once it does.",
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n\nbool fileExists(const std::string& filename) {\n    std::ifstream file(filename);\n    return file.good();\n}\n\nint main() {\n    std::string filename = \"example.txt\";\n    while (!fileExists(filename)) {\n        // Continue checking until the file exists\n    }\n    std::cout << \"File \" << filename << \" found!\" << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a feature that continuously calculates the square root of a number until it's less than 0.1.",
    "code": "```cpp\n#include <iostream>\n#include <cmath>\n\nint main() {\n    double number;\n\n    std::cout << \"Enter a number: \";\n    std::cin >> number;\n\n    while (number >= 0.1) {\n        number = std::sqrt(number);\n        std::cout << \"Current square root: \" << number << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a system that prints 'Processing...' every second until a task is complete.",
    "code": "```cpp\n#include <iostream>\n#include <chrono>\n#include <thread>\n\nbool isTaskComplete() {\n    // Placeholder for actual task completion logic\n    return false;\n}\n\nint main() {\n    while (!isTaskComplete()) {\n        std::cout << \"Processing...\" << std::endl;\n        std::this_thread::sleep_for(std::chrono::seconds(1));\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Write a loop that repeatedly checks the status of a process until it reports 'complete'.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\n// Function simulating the check of process status\nstd::string checkProcessStatus() {\n    // This function should return \"complete\" when the process is done\n    // For demonstration purposes, let's assume it returns \"in progress\" a few times\n    static int count = 0;\n    if (count < 5) {\n        count++;\n        return \"in progress\";\n    }\n    return \"complete\";\n}\n\nint main() {\n    std::string status;\n    \n    while (true) {\n        status = checkProcessStatus();\n        if (status == \"complete\") {\n            break;\n        }\n    }\n\n    std::cout << \"Process is complete.\" << std::endl;\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Design a routine to keep pinging a server and alert when the connection is lost.",
    "code": "```cpp\n#include <iostream>\n#include <thread>\n#include <chrono>\n\nbool pingServer() {\n    // Simulate a server ping\n    // Return true if the server is reachable, false otherwise\n    return true; // Placeholder for actual ping implementation\n}\n\nvoid alertConnectionLost() {\n    std::cout << \"Connection to server lost!\" << std::endl;\n}\n\nint main() {\n    while (true) {\n        if (!pingServer()) {\n            alertConnectionLost();\n            break;\n        }\n        std::this_thread::sleep_for(std::chrono::seconds(1)); // Wait for 1 second before next ping\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a loop that counts down from 100 by fives until it reaches zero.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    int count = 100;\n    while (count >= 0) {\n        std::cout << count << std::endl;\n        count -= 5;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Create a script that keeps track of inventory items being added or removed until an end signal is given.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nint main() {\n    int inventory = 0;\n    std::string command;\n    \n    std::cout << \"Enter 'add' to add an item, 'remove' to remove an item, or 'end' to finish.\" << std::endl;\n\n    while (true) {\n        std::cout << \"Command: \";\n        std::cin >> command;\n        \n        if (command == \"end\") {\n            break;\n        } else if (command == \"add\") {\n            inventory++;\n            std::cout << \"Item added. Inventory: \" << inventory << std::endl;\n        } else if (command == \"remove\") {\n            if (inventory > 0) {\n                inventory--;\n                std::cout << \"Item removed. Inventory: \" << inventory << std::endl;\n            } else {\n                std::cout << \"No items to remove. Inventory: \" << inventory << std::endl;\n            }\n        } else {\n            std::cout << \"Unknown command.\" << std::endl;\n        }\n    }\n    \n    std::cout << \"Final Inventory: \" << inventory << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program that keeps calculating the power of two for numbers until a result is greater than 1000.",
    "code": "```cpp\n#include <iostream>\n#include <cmath>\n\nint main() {\n    int number = 0;\n    double result = 0;\n\n    while (result <= 1000) {\n        result = pow(2, number);\n        std::cout << \"2^\" << number << \" = \" << result << std::endl;\n        number++;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a sequence that keeps appending random numbers to an array until its length is 20.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <cstdlib>\n#include <ctime>\n\nint main() {\n    std::srand(std::time(0));\n    std::vector<int> numbers;\n    \n    while (numbers.size() < 20) {\n        int random_number = std::rand();\n        numbers.push_back(random_number);\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Implement a routine that continuously rotates an image until it matches a reference orientation.",
    "code": "```cpp\n#include <iostream>\n\nbool isCorrectOrientation(const int* image, const int* reference, int size) {\n    for (int i = 0; i < size; ++i) {\n        if (image[i] != reference[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nvoid rotateImage(int* image, int size) {\n    int first = image[0];\n    for (int i = 0; i < size - 1; ++i) {\n        image[i] = image[i + 1];\n    }\n    image[size - 1] = first;\n}\n\nint main() {\n    const int size = 4;\n    int image[size] = {1, 2, 3, 4}; // Example image\n    int reference[size] = {3, 4, 1, 2}; // Example reference orientation\n\n    while (!isCorrectOrientation(image, reference, size)) {\n        rotateImage(image, size);\n    }\n\n    std::cout << \"Image matched the reference orientation.\" << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Design a loop that keeps printing random jokes until the user stops it.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n#include <cstdlib>\n#include <ctime>\n\nint main() {\n    std::vector<std::string> jokes = {\n        \"Why don't scientists trust atoms? Because they make up everything!\",\n        \"What do you get when you cross a snowman and a vampire? Frostbite!\",\n        \"Why couldn't the bicycle stand up by itself? It was two tired!\",\n        \"What do you call fake spaghetti? An impasta!\",\n        \"Why was the math book sad? Because it had too many problems!\"\n    };\n    \n    std::srand(std::time(nullptr)); // Seed for random number generation\n    std::string userInput;\n\n    while (true) {\n        int randomIndex = std::rand() % jokes.size();\n        std::cout << jokes[randomIndex] << std::endl;\n        \n        std::cout << \"Do you want another joke? (yes/no): \";\n        std::getline(std::cin, userInput);\n        \n        if (userInput != \"yes\") {\n            break;\n        }\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Create a program that accepts user feedback and continues until a positive feedback is received.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nint main() {\n    std::string feedback;\n    bool positiveFeedback = false;\n\n    while (!positiveFeedback) {\n        std::cout << \"Please enter your feedback: \";\n        std::getline(std::cin, feedback);\n\n        if (feedback == \"good\" || feedback == \"great\" || feedback == \"excellent\") {\n            positiveFeedback = true;\n        } else {\n            std::cout << \"Feedback not positive. Please try again.\\n\";\n        }\n    }\n\n    std::cout << \"Thank you for your positive feedback!\\n\";\n    return 0;\n}\n```"
  },
  {
    "task": "Write a loop that repeatedly reads sensor data and stops when a stable reading is observed.",
    "code": "```cpp\n#include <iostream>\n#include <cmath>\n\nbool isStable(double current, double previous) {\n    return std::fabs(current - previous) < 0.01;\n}\n\nint main() {\n    double previousReading = 0.0, currentReading = 0.0;\n    bool firstReading = true;\n    \n    while (true) {\n        std::cout << \"Enter sensor data: \";\n        std::cin >> currentReading;\n        \n        if (!firstReading && isStable(currentReading, previousReading)) {\n            break;\n        }\n        \n        previousReading = currentReading;\n        firstReading = false;\n    }\n\n    std::cout << \"Stable reading observed: \" << currentReading << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a system that simulates a stopwatch, counting seconds until stopped manually.",
    "code": "```cpp\n#include <iostream>\n#include <thread>\n#include <chrono>\n#include <atomic>\n\nint main() {\n    std::atomic<bool> running(true);\n    int seconds = 0;\n\n    std::thread inputThread([&running]() {\n        std::cin.get();\n        running = false;\n    });\n\n    while (running) {\n        std::this_thread::sleep_for(std::chrono::seconds(1));\n        seconds++;\n        std::cout << \"Elapsed time: \" << seconds << \" seconds\" << std::endl;\n    }\n\n    inputThread.join();\n    std::cout << \"Stopwatch stopped at: \" << seconds << \" seconds\" << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a script that continues adding random integers to a sum until the sum exceeds 100.",
    "code": "```cpp\n#include <iostream>\n#include <cstdlib>\n#include <ctime>\n\nint main() {\n    std::srand(std::time(0));\n    int sum = 0;\n\n    while (sum <= 100) {\n        int randomInt = std::rand() % 100 + 1;\n        sum += randomInt;\n    }\n\n    std::cout << \"Final sum: \" << sum << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a process to track a moving object until it stops.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    bool isMoving = true;\n    double position = 0.0;\n    double velocity;\n\n    std::cout << \"Enter initial velocity of the object: \";\n    std::cin >> velocity;\n\n    while (isMoving) {\n        position += velocity;\n        std::cout << \"Current position: \" << position << std::endl;\n\n        std::cout << \"Enter new velocity (0 to stop): \";\n        std::cin >> velocity;\n\n        if (velocity == 0) {\n            isMoving = false;\n        }\n    }\n\n    std::cout << \"Object has stopped.\" << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Design a routine to keep checking user login attempts until a successful login occurs.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nbool checkLogin(const std::string& username, const std::string& password) {\n    // Placeholder for actual authentication logic\n    return username == \"user\" && password == \"password\";\n}\n\nint main() {\n    std::string username, password;\n    bool loginSuccess = false;\n\n    while (!loginSuccess) {\n        std::cout << \"Enter username: \";\n        std::cin >> username;\n        std::cout << \"Enter password: \";\n        std::cin >> password;\n        \n        loginSuccess = checkLogin(username, password);\n        \n        if (!loginSuccess) {\n            std::cout << \"Invalid login, please try again.\" << std::endl;\n        }\n    }\n\n    std::cout << \"Login successful!\" << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Write a loop that repeatedly calculates the area of a circle for radii from 1 to 10.",
    "code": "```cpp\n#include <iostream>\n#include <cmath>\n\nint main() {\n    const double pi = 3.141592653589793;\n    int radius = 1;\n    \n    while (radius <= 10) {\n        double area = pi * radius * radius;\n        std::cout << \"Radius: \" << radius << \", Area: \" << area << std::endl;\n        radius++;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Create a program that continues flipping a card from a deck until an ace is drawn.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <cstdlib>\n#include <ctime>\n\nint main() {\n    std::srand(std::time(0));\n    \n    std::vector<std::string> deck = {\n        \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"\n    };\n\n    std::string card;\n    while (card != \"A\") {\n        int index = std::rand() % deck.size();\n        card = deck[index];\n        std::cout << \"Flipped card: \" << card << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a loop that keeps asking for a word and stores it until a word with more than five letters is entered.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n\nint main() {\n    std::vector<std::string> words;\n    std::string word;\n    \n    while (true) {\n        std::cout << \"Enter a word: \";\n        std::cin >> word;\n        words.push_back(word);\n        if (word.length() > 5) {\n            break;\n        }\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Implement a feature that continuously calculates the exponential growth of a population until it doubles.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    double population = 100.0;\n    double growthRate = 0.05; // 5% growth rate\n    double targetPopulation = 2 * population;\n    \n    while (population < targetPopulation) {\n        population += population * growthRate;\n    }\n\n    std::cout << \"Population has doubled to: \" << population << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Write a script that repeats a string a certain number of times until a limit is reached.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nint main() {\n    std::string str = \"Hello, World!\";\n    int repeatLimit = 5;\n    int count = 0;\n    \n    while (count < repeatLimit) {\n        std::cout << str << std::endl;\n        count++;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Create a routine that keeps accessing an API endpoint until it returns a specific result.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\n// Mock function to simulate API call\nstd::string callApi() {\n    // Simulate different responses\n    static int callCount = 0;\n    callCount++;\n    if (callCount < 5) {\n        return \"not yet\";\n    }\n    return \"specific result\";\n}\n\nint main() {\n    std::string result;\n    while (true) {\n        result = callApi();\n        if (result == \"specific result\") {\n            break;\n        }\n    }\n    std::cout << \"Received specific result from API.\" << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Design a loop that continues to fetch stock prices until a certain price threshold is crossed.",
    "code": "```cpp\n#include <iostream>\n\ndouble fetchStockPrice() {\n    // Dummy function to simulate fetching stock price\n    return static_cast<double>(rand() % 100 + 1);\n}\n\nint main() {\n    const double priceThreshold = 50.0;\n    double currentPrice = 0.0;\n\n    while (currentPrice <= priceThreshold) {\n        currentPrice = fetchStockPrice();\n        std::cout << \"Current Stock Price: \" << currentPrice << std::endl;\n    }\n\n    std::cout << \"Price threshold crossed.\" << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a process that keeps monitoring CPU usage until it drops below 10%.",
    "code": "```cpp\n#include <iostream>\n#include <thread>\n#include <chrono>\n\ndouble getCPUUsage() {\n    // This function should return the current CPU usage percentage\n    // Placeholder implementation:\n    return 5.0 + static_cast<double>(rand() % 10);\n}\n\nint main() {\n    double cpuUsage = getCPUUsage();\n\n    while (cpuUsage >= 10.0) {\n        std::cout << \"Current CPU Usage: \" << cpuUsage << \"%\" << std::endl;\n        std::this_thread::sleep_for(std::chrono::seconds(1));\n        cpuUsage = getCPUUsage();\n    }\n\n    std::cout << \"CPU usage dropped below 10%. Current usage: \" << cpuUsage << \"%\" << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program that asks for a series of numbers and prints the largest once a negative number is entered.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    int number, largest = 0;\n    std::cout << \"Enter numbers (negative number to end): \";\n    while (true) {\n        std::cin >> number;\n        if (number < 0) {\n            break;\n        }\n        if (number > largest) {\n            largest = number;\n        }\n    }\n    std::cout << \"The largest number entered was: \" << largest << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a system that keeps a heater on until the room reaches a desired temperature.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    double currentTemperature;\n    const double desiredTemperature = 22.0; // Desired temperature in Celsius\n\n    std::cout << \"Enter the current temperature: \";\n    std::cin >> currentTemperature;\n\n    while (currentTemperature < desiredTemperature) {\n        std::cout << \"Heater is on. Current temperature: \" << currentTemperature << \"\u00b0C\\n\";\n        // Simulate the temperature increase\n        currentTemperature += 0.5; // Increment by 0.5 for simulation\n    }\n\n    std::cout << \"Desired temperature reached. Heater is off.\\n\";\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a loop that repeatedly checks if a door is open and alerts if it remains open for too long.",
    "code": "```cpp\n#include <iostream>\n#include <chrono>\n#include <thread>\n\nbool isDoorOpen() {\n    // Placeholder function to simulate door status\n    // Replace with actual logic to check door status\n    return true;\n}\n\nint main() {\n    int openTime = 0;\n    const int alertThreshold = 5; // time in seconds before alert\n\n    while (true) {\n        if (isDoorOpen()) {\n            openTime++;\n            if (openTime >= alertThreshold) {\n                std::cout << \"Alert: The door has been open for too long!\" << std::endl;\n                break;\n            }\n        } else {\n            openTime = 0;\n        }\n        std::this_thread::sleep_for(std::chrono::seconds(1));\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a feature that keeps adding random characters to a string until its length is 8.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n#include <cstdlib>\n#include <ctime>\n\nint main() {\n    std::srand(static_cast<unsigned int>(std::time(nullptr)));\n    std::string result;\n\n    while (result.length() < 8) {\n        char randomChar = 'a' + std::rand() % 26; // Random lowercase letter\n        result += randomChar;\n    }\n\n    std::cout << \"Random string: \" << result << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Design a routine that simulates a race and continues until a participant crosses the finish line.",
    "code": "```cpp\n#include <iostream>\n#include <cstdlib>\n#include <ctime>\n\nint main() {\n    std::srand(std::time(0));\n    const int finishLine = 100;\n    int participantPosition = 0;\n\n    while (participantPosition < finishLine) {\n        participantPosition += std::rand() % 10 + 1;\n        std::cout << \"Participant is at position: \" << participantPosition << std::endl;\n    }\n\n    std::cout << \"Participant has crossed the finish line!\" << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Write a script that keeps checking an email inbox until a specific email is received.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\n// Dummy function to simulate checking for a new email\nbool checkForEmail(const std::string& targetEmail) {\n    // Simulate checking inbox for the target email\n    std::string receivedEmail = \"example@example.com\"; // This would be replaced by actual email checking logic\n    return receivedEmail == targetEmail;\n}\n\nint main() {\n    std::string targetEmail = \"specific@example.com\";\n    bool emailReceived = false;\n\n    while (!emailReceived) {\n        emailReceived = checkForEmail(targetEmail);\n    }\n\n    std::cout << \"Specific email received.\" << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Create a loop that continues to play a video on repeat until the user interrupts.",
    "code": "```cpp\n#include <iostream>\n\nbool userInterrupt() {\n    // Simulate a user interrupt check\n    char input;\n    std::cout << \"Press 'q' to quit or any other key to continue playing video: \";\n    std::cin >> input;\n    return input == 'q';\n}\n\nvoid playVideo() {\n    std::cout << \"Playing video...\" << std::endl;\n    // Simulate video playing time\n    std::this_thread::sleep_for(std::chrono::seconds(2));\n}\n\nint main() {\n    while (true) {\n        playVideo();\n        if (userInterrupt()) {\n            break;\n        }\n    }\n    std::cout << \"Video playback stopped by user.\" << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a process that keeps scanning for Bluetooth devices until a specific device is found.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n\n// Mock function to simulate scanning for Bluetooth devices\nstd::vector<std::string> scanForBluetoothDevices() {\n    // This is a placeholder for the actual Bluetooth scanning logic\n    return {\"Device_A\", \"Device_B\", \"Specific_Device\", \"Device_D\"};\n}\n\nint main() {\n    std::string targetDevice = \"Specific_Device\";\n    bool deviceFound = false;\n\n    while (!deviceFound) {\n        std::vector<std::string> availableDevices = scanForBluetoothDevices();\n        \n        for (const auto& device : availableDevices) {\n            if (device == targetDevice) {\n                deviceFound = true;\n                break;\n            }\n        }\n    }\n\n    std::cout << \"Target device found: \" << targetDevice << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a script that continuously captures images from a webcam until a motion is detected.",
    "code": "```cpp\n#include <opencv2/opencv.hpp>\n#include <iostream>\n\nint main() {\n    cv::VideoCapture cap(0);\n    if (!cap.isOpened()) {\n        std::cerr << \"Error: Could not open webcam\" << std::endl;\n        return -1;\n    }\n\n    cv::Mat frame, prevFrame, diffFrame;\n    bool motionDetected = false;\n    int threshold = 30; // Motion detection threshold\n\n    while (!motionDetected) {\n        cap >> frame;\n        if (frame.empty()) {\n            std::cerr << \"Error: Could not capture frame\" << std::endl;\n            break;\n        }\n\n        if (!prevFrame.empty()) {\n            cv::absdiff(frame, prevFrame, diffFrame);\n            cv::cvtColor(diffFrame, diffFrame, cv::COLOR_BGR2GRAY);\n            cv::threshold(diffFrame, diffFrame, threshold, 255, cv::THRESH_BINARY);\n\n            if (cv::countNonZero(diffFrame) > 0) {\n                motionDetected = true;\n            }\n        }\n\n        frame.copyTo(prevFrame);\n    }\n\n    cap.release();\n    return 0;\n}\n```"
  },
  {
    "task": "Design a program that keeps playing a sound file until the user presses a mute button.",
    "code": "```cpp\n#include <iostream>\n\nbool isMuteButtonPressed() {\n    // Placeholder for actual implementation.\n    // This function should return true if the mute button is pressed.\n    return false;\n}\n\nvoid playSound() {\n    // Placeholder for actual implementation.\n    // This function should play the sound file.\n    std::cout << \"Playing sound...\" << std::endl;\n}\n\nint main() {\n    while (!isMuteButtonPressed()) {\n        playSound();\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Create a loop that repeatedly generates a random password until it meets certain security criteria.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n#include <cstdlib>\n#include <ctime>\n#include <cctype>\n\nbool isSecurePassword(const std::string& password) {\n    bool hasUpper = false, hasLower = false, hasDigit = false;\n    for (char ch : password) {\n        if (std::isupper(ch)) hasUpper = true;\n        if (std::islower(ch)) hasLower = true;\n        if (std::isdigit(ch)) hasDigit = true;\n    }\n    return hasUpper && hasLower && hasDigit && password.length() >= 8;\n}\n\nstd::string generateRandomPassword(int length) {\n    const char charset[] = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n    std::string result;\n    for (int i = 0; i < length; ++i) {\n        result += charset[rand() % (sizeof(charset) - 1)];\n    }\n    return result;\n}\n\nint main() {\n    std::srand(std::time(0));\n    std::string password;\n    while (true) {\n        password = generateRandomPassword(12);\n        if (isSecurePassword(password)) {\n            break;\n        }\n    }\n    std::cout << \"Generated secure password: \" << password << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Write a process that keeps checking for file changes in a directory and logs them until stopped.",
    "code": "```cpp\n#include <iostream>\n#include <filesystem>\n#include <unordered_map>\n#include <chrono>\n#include <thread>\n\nnamespace fs = std::filesystem;\n\nint main() {\n    std::string directoryPath = \"./\"; // Specify the directory path\n    std::unordered_map<std::string, std::filesystem::file_time_type> filesLastWriteTime;\n    \n    // Initialize last write times\n    for (const auto& entry : fs::directory_iterator(directoryPath)) {\n        filesLastWriteTime[entry.path().string()] = fs::last_write_time(entry);\n    }\n\n    while (true) {\n        for (const auto& entry : fs::directory_iterator(directoryPath)) {\n            auto currentFileLastWriteTime = fs::last_write_time(entry);\n\n            if (filesLastWriteTime.find(entry.path().string()) == filesLastWriteTime.end()) {\n                std::cout << \"New file detected: \" << entry.path().string() << std::endl;\n                filesLastWriteTime[entry.path().string()] = currentFileLastWriteTime;\n            } else if (filesLastWriteTime[entry.path().string()] != currentFileLastWriteTime) {\n                std::cout << \"File changed: \" << entry.path().string() << std::endl;\n                filesLastWriteTime[entry.path().string()] = currentFileLastWriteTime;\n            }\n        }\n\n        // Sleep for a while to avoid busy waiting\n        std::this_thread::sleep_for(std::chrono::seconds(2));\n    }\n\n    return 0;\n}\n```"
  }
]