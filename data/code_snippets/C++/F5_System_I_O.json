[
  {
    "task": "Write a program that reads a user's name and age from the input, then prints a greeting message using both values.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nint main() {\n    std::string name;\n    int age;\n\n    std::cout << \"Enter your name: \";\n    std::getline(std::cin, name);\n    \n    std::cout << \"Enter your age: \";\n    std::cin >> age;\n\n    std::cout << \"Hello \" << name << \"! You are \" << age << \" years old.\" << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a script that continuously reads numbers from the input and prints their running total until a negative number is entered.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    double number, total = 0;\n    while (true) {\n        std::cin >> number;\n        if (number < 0) {\n            break;\n        }\n        total += number;\n        std::cout << \"Running total: \" << total << std::endl;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Design a program that asks the user for a sentence and outputs the number of words it contains.",
    "code": "```cpp\n#include <iostream>\n#include <sstream>\n#include <string>\n\nint main() {\n    std::string sentence;\n    std::cout << \"Enter a sentence: \";\n    std::getline(std::cin, sentence);\n\n    std::istringstream stream(sentence);\n    std::string word;\n    int wordCount = 0;\n    while (stream >> word) {\n        ++wordCount;\n    }\n\n    std::cout << \"Number of words: \" << wordCount << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Build a command-line tool that reads a list of integers and outputs them in sorted order.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nint main() {\n    std::vector<int> numbers;\n    int number;\n    \n    std::cout << \"Enter integers (end input with non-integer): \" << std::endl;\n    while (std::cin >> number) {\n        numbers.push_back(number);\n    }\n    \n    std::sort(numbers.begin(), numbers.end());\n    \n    std::cout << \"Sorted numbers: \";\n    for (int num : numbers) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Develop a program that reads a file name from the input, then prints the number of lines in that file.",
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nint main() {\n    std::string filename;\n    std::cout << \"Enter the file name: \";\n    std::cin >> filename;\n\n    std::ifstream file(filename);\n    if (!file) {\n        std::cerr << \"Unable to open file.\" << std::endl;\n        return 1;\n    }\n\n    int lineCount = 0;\n    std::string line;\n    while (std::getline(file, line)) {\n        ++lineCount;\n    }\n    \n    file.close();\n    std::cout << \"Number of lines: \" << lineCount << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a calculator that reads two numbers and an operator (+, -, *, /) from the input and prints the result.",
    "code": "```cpp\n#include <iostream>\nusing namespace std;\n\nint main() {\n    double num1, num2, result;\n    char op;\n    cout << \"Enter first number: \";\n    cin >> num1;\n    cout << \"Enter an operator (+, -, *, /): \";\n    cin >> op;\n    cout << \"Enter second number: \";\n    cin >> num2;\n    \n    switch(op) {\n        case '+':\n            result = num1 + num2;\n            break;\n        case '-':\n            result = num1 - num2;\n            break;\n        case '*':\n            result = num1 * num2;\n            break;\n        case '/':\n            result = num1 / num2;\n            break;\n        default:\n            cout << \"Invalid operator\" << endl;\n            return 1;\n    }\n\n    cout << \"Result: \" << result << endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Write a script that reads a user's full name and prints it in reverse order.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n#include <algorithm>\n\nint main() {\n    std::string fullName;\n    std::cout << \"Enter your full name: \";\n    std::getline(std::cin, fullName);\n    \n    std::reverse(fullName.begin(), fullName.end());\n    std::cout << \"Reversed name: \" << fullName << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a program that asks for a word and checks if it is a palindrome, printing the appropriate message.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n#include <algorithm>\n\nint main() {\n    std::string word;\n    std::cout << \"Enter a word: \";\n    std::cin >> word;\n\n    std::string reversedWord = word;\n    std::reverse(reversedWord.begin(), reversedWord.end());\n\n    if (word == reversedWord) {\n        std::cout << \"The word is a palindrome.\" << std::endl;\n    } else {\n        std::cout << \"The word is not a palindrome.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a tool that reads multiple lines of text and outputs the longest line.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nint main() {\n    std::string line, longestLine;\n    while (std::getline(std::cin, line)) {\n        if (line.length() > longestLine.length()) {\n            longestLine = line;\n        }\n    }\n    std::cout << longestLine << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Design a script that reads a number 'n' and prints the first 'n' Fibonacci numbers.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nint main() {\n    int n;\n    std::cout << \"Enter the number of Fibonacci numbers to print: \";\n    std::cin >> n;\n\n    std::vector<int> fib(n);\n    if (n > 0) fib[0] = 0;\n    if (n > 1) fib[1] = 1;\n\n    for (int i = 2; i < n; ++i) {\n        fib[i] = fib[i - 1] + fib[i - 2];\n    }\n\n    for (int i = 0; i < n; ++i) {\n        std::cout << fib[i] << \" \";\n    }\n    std::cout << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program that takes a list of numbers from the input and prints only the even ones.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<int> numbers;\n    int num;\n    \n    while (std::cin >> num) {\n        numbers.push_back(num);\n    }\n    \n    for (int n : numbers) {\n        if (n % 2 == 0) {\n            std::cout << n << std::endl;\n        }\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Create a script that reads a date (day, month, year) and prints the day of the week for that date.",
    "code": "```cpp\n#include <iostream>\n#include <ctime>\n\nint main() {\n    int day, month, year;\n    std::cout << \"Enter day: \";\n    std::cin >> day;\n    std::cout << \"Enter month: \";\n    std::cin >> month;\n    std::cout << \"Enter year: \";\n    std::cin >> year;\n\n    std::tm time_in = { 0, 0, 0, day, month - 1, year - 1900 };\n    std::time_t time_temp = std::mktime(&time_in);\n\n    const std::tm *time_out = std::localtime(&time_temp);\n    const char *days_of_week[] = { \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\" };\n\n    std::cout << \"Day of the week: \" << days_of_week[time_out->tm_wday] << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a program that reads a paragraph and counts the frequency of each letter in the text.",
    "code": "```cpp\n#include <iostream>\n#include <map>\n#include <cctype>\n\nint main() {\n    std::string paragraph;\n    std::cout << \"Enter a paragraph: \";\n    std::getline(std::cin, paragraph);\n\n    std::map<char, int> letterFrequency;\n    for (char ch : paragraph) {\n        if (std::isalpha(ch)) {\n            ch = std::tolower(ch);\n            letterFrequency[ch]++;\n        }\n    }\n\n    std::cout << \"Letter frequencies:\\n\";\n    for (const auto &pair : letterFrequency) {\n        std::cout << pair.first << \": \" << pair.second << '\\n';\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Build a tool that reads a text and a word, then prints the number of times the word appears in the text.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n#include <sstream>\n\nint main() {\n    std::string text, word, inputWord;\n    int count = 0;\n\n    std::cout << \"Enter text: \";\n    std::getline(std::cin, text);\n    std::cout << \"Enter word: \";\n    std::cin >> word;\n\n    std::istringstream stream(text);\n    while (stream >> inputWord) {\n        if (inputWord == word) {\n            count++;\n        }\n    }\n\n    std::cout << \"The word \\\"\" << word << \"\\\" appears \" << count << \" times in the text.\" << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a script that reads a temperature in Celsius and converts it to Fahrenheit, printing the result.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    double celsius, fahrenheit;\n    std::cout << \"Enter temperature in Celsius: \";\n    std::cin >> celsius;\n    fahrenheit = (celsius * 9/5) + 32;\n    std::cout << \"Temperature in Fahrenheit: \" << fahrenheit << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program that continuously reads input until the word 'exit' is entered, then prints all entered inputs.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n\nint main() {\n    std::vector<std::string> inputs;\n    std::string input;\n    \n    while (true) {\n        std::getline(std::cin, input);\n        if (input == \"exit\") break;\n        inputs.push_back(input);\n    }\n    \n    for (const auto& str : inputs) {\n        std::cout << str << std::endl;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Create a tool that prompts for a filename, reads the file, and prints its content in uppercase.",
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n#include <cctype>\n\nint main() {\n    std::string filename;\n    std::cout << \"Enter the filename: \";\n    std::getline(std::cin, filename);\n\n    std::ifstream file(filename);\n    if (!file.is_open()) {\n        std::cerr << \"Could not open the file.\" << std::endl;\n        return 1;\n    }\n\n    std::string line;\n    while (std::getline(file, line)) {\n        for (char &c : line) {\n            c = std::toupper(c);\n        }\n        std::cout << line << std::endl;\n    }\n\n    file.close();\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a program that reads a series of email addresses and prints the unique domain names.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n#include <string>\n\nint main() {\n    std::set<std::string> domains;\n    std::string email;\n\n    while (std::getline(std::cin, email) && !email.empty()) {\n        size_t atPos = email.find('@');\n        if (atPos != std::string::npos) {\n            std::string domain = email.substr(atPos + 1);\n            domains.insert(domain);\n        }\n    }\n\n    for (const auto& domain : domains) {\n        std::cout << domain << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a script that reads a string and prints whether it contains all the letters of the alphabet.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n#include <unordered_set>\n\nbool containsAllLetters(const std::string &input) {\n    std::unordered_set<char> letters;\n    for (char ch : input) {\n        if (std::isalpha(ch)) {\n            letters.insert(std::tolower(ch));\n        }\n    }\n    return letters.size() == 26;\n}\n\nint main() {\n    std::string input;\n    std::getline(std::cin, input);\n    if (containsAllLetters(input)) {\n        std::cout << \"Contains all letters of the alphabet\" << std::endl;\n    } else {\n        std::cout << \"Does not contain all letters of the alphabet\" << std::endl;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program that reads a number and prints its factorial.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    int n;\n    std::cout << \"Enter a number: \";\n    std::cin >> n;\n\n    unsigned long long factorial = 1;\n    for (int i = 1; i <= n; ++i) {\n        factorial *= i;\n    }\n\n    std::cout << \"Factorial of \" << n << \" is \" << factorial << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Create a tool that reads a list of names and prints them in alphabetical order.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nint main() {\n    std::vector<std::string> names;\n    std::string name;\n    \n    std::cout << \"Enter names (type 'done' to finish):\" << std::endl;\n    while (true) {\n        std::getline(std::cin, name);\n        if (name == \"done\") break;\n        names.push_back(name);\n    }\n    \n    std::sort(names.begin(), names.end());\n    \n    std::cout << \"Names in alphabetical order:\" << std::endl;\n    for (const auto& n : names) {\n        std::cout << n << std::endl;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Develop a program that asks for a sentence and prints each word on a new line.",
    "code": "```cpp\n#include <iostream>\n#include <sstream>\n#include <string>\n\nint main() {\n    std::string sentence;\n    std::cout << \"Enter a sentence: \";\n    std::getline(std::cin, sentence);\n\n    std::istringstream iss(sentence);\n    std::string word;\n    while (iss >> word) {\n        std::cout << word << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Build a script that reads a time in 12-hour format and converts it to 24-hour format.",
    "code": "```cpp\n#include <iostream>\n#include <iomanip>\n#include <sstream>\n\nint main() {\n    std::string time12;\n    std::cout << \"Enter time in 12-hour format (hh:mm AM/PM): \";\n    std::cin >> time12;\n    \n    std::istringstream iss(time12);\n    std::string timePart;\n    std::string period;\n    getline(iss, timePart, ' ');\n    getline(iss, period);\n\n    std::istringstream timeStream(timePart);\n    int hour, minute;\n    char colon;\n    timeStream >> hour >> colon >> minute;\n\n    if (period == \"PM\" && hour != 12) {\n        hour += 12;\n    } else if (period == \"AM\" && hour == 12) {\n        hour = 0;\n    }\n\n    std::cout << \"24-hour format: \"\n              << std::setw(2) << std::setfill('0') << hour << \":\"\n              << std::setw(2) << std::setfill('0') << minute << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a program that reads two strings and checks if they are anagrams, printing the result.",
    "code": "```cpp\n#include <iostream>\n#include <algorithm>\n#include <string>\n\nint main() {\n    std::string str1, str2;\n    std::cout << \"Enter the first string: \";\n    std::cin >> str1;\n    std::cout << \"Enter the second string: \";\n    std::cin >> str2;\n\n    std::sort(str1.begin(), str1.end());\n    std::sort(str2.begin(), str2.end());\n\n    if (str1 == str2) {\n        std::cout << \"The strings are anagrams.\" << std::endl;\n    } else {\n        std::cout << \"The strings are not anagrams.\" << std::endl;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Write a tool that reads a paragraph and prints the first and last sentence.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n#include <sstream>\n\nint main() {\n    std::string paragraph, sentence, firstSentence, lastSentence;\n    \n    std::cout << \"Enter a paragraph: \";\n    std::getline(std::cin, paragraph);\n    \n    std::stringstream ss(paragraph);\n    bool first = true;\n    \n    while (std::getline(ss, sentence, '.')) {\n        if (!sentence.empty()) {\n            if (first) {\n                firstSentence = sentence;\n                first = false;\n            }\n            lastSentence = sentence;\n        }\n    }\n    \n    std::cout << \"First sentence: \" << firstSentence << \".\" << std::endl;\n    std::cout << \"Last sentence: \" << lastSentence << \".\" << std::endl;\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Create a program that reads a binary number and converts it to decimal.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n#include <cmath>\n\nint main() {\n    std::string binary;\n    std::cout << \"Enter a binary number: \";\n    std::cin >> binary;\n\n    int decimal = 0;\n    int length = binary.length();\n    for (int i = 0; i < length; ++i) {\n        if (binary[length - i - 1] == '1') {\n            decimal += std::pow(2, i);\n        }\n    }\n\n    std::cout << \"Decimal: \" << decimal << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a script that reads a series of scores and prints the average score.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<double> scores;\n    double score;\n    std::cout << \"Enter scores (negative number to end input): \";\n    \n    while (std::cin >> score && score >= 0) {\n        scores.push_back(score);\n    }\n    \n    double sum = 0.0;\n    for (double s : scores) {\n        sum += s;\n    }\n    \n    if (!scores.empty()) {\n        double average = sum / scores.size();\n        std::cout << \"Average score: \" << average << std::endl;\n    } else {\n        std::cout << \"No scores entered.\" << std::endl;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Design a program that reads a list of integers and prints the prime numbers.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <cmath>\n\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (int i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) return false;\n    }\n    return true;\n}\n\nint main() {\n    std::vector<int> numbers;\n    int num;\n    \n    while (std::cin >> num) {\n        numbers.push_back(num);\n    }\n    \n    for (int n : numbers) {\n        if (isPrime(n)) {\n            std::cout << n << \" \";\n        }\n    }\n    \n    std::cout << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Write a script that reads a word and prints its Pig Latin translation.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nstd::string toPigLatin(const std::string &word) {\n    if (word.empty()) return \"\";\n    char firstLetter = word[0];\n    std::string restOfWord = word.substr(1);\n    return restOfWord + firstLetter + \"ay\";\n}\n\nint main() {\n    std::string word;\n    std::cout << \"Enter a word: \";\n    std::cin >> word;\n    std::string pigLatinWord = toPigLatin(word);\n    std::cout << \"Pig Latin: \" << pigLatinWord << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Create a tool that reads a matrix of numbers and prints its transpose.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nint main() {\n    int rows, cols;\n    std::cin >> rows >> cols;\n    std::vector<std::vector<int>> matrix(rows, std::vector<int>(cols));\n    \n    for (int i = 0; i < rows; ++i) {\n        for (int j = 0; j < cols; ++j) {\n            std::cin >> matrix[i][j];\n        }\n    }\n    \n    for (int j = 0; j < cols; ++j) {\n        for (int i = 0; i < rows; ++i) {\n            std::cout << matrix[i][j] << \" \";\n        }\n        std::cout << std::endl;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Implement a program that reads a URL and prints the domain name.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nint main() {\n    std::string url;\n    std::cout << \"Enter URL: \";\n    std::getline(std::cin, url);\n\n    std::string domain;\n    size_t start = url.find(\"//\");\n    if (start != std::string::npos) {\n        start += 2; // Skip \"//\"\n    } else {\n        start = 0; // No protocol specified\n    }\n\n    size_t end = url.find('/', start);\n    if (end == std::string::npos) {\n        domain = url.substr(start);\n    } else {\n        domain = url.substr(start, end - start);\n    }\n\n    std::cout << \"Domain name: \" << domain << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a script that reads a number and prints its multiplication table up to 12.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    int number;\n    std::cout << \"Enter a number: \";\n    std::cin >> number;\n    \n    for(int i = 1; i <= 12; ++i) {\n        std::cout << number << \" * \" << i << \" = \" << number * i << std::endl;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Develop a program that reads a list of dates and prints them in order of occurrence.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nstruct Date {\n    int year, month, day;\n\n    bool operator<(const Date& other) const {\n        if (year != other.year) return year < other.year;\n        if (month != other.month) return month < other.month;\n        return day < other.day;\n    }\n};\n\nint main() {\n    std::vector<Date> dates;\n    std::string input;\n    std::cout << \"Enter dates in YYYY-MM-DD format, one per line (empty line to end):\\n\";\n    \n    while (true) {\n        std::getline(std::cin, input);\n        if (input.empty()) break;\n        \n        int year = std::stoi(input.substr(0, 4));\n        int month = std::stoi(input.substr(5, 2));\n        int day = std::stoi(input.substr(8, 2));\n        \n        dates.push_back({year, month, day});\n    }\n\n    std::sort(dates.begin(), dates.end());\n\n    std::cout << \"Dates in order of occurrence:\\n\";\n    for (const auto& date : dates) {\n        std::cout << date.year << \"-\"\n                  << (date.month < 10 ? \"0\" : \"\") << date.month << \"-\"\n                  << (date.day < 10 ? \"0\" : \"\") << date.day << \"\\n\";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a tool that reads a text and prints it with each sentence capitalized.",
    "code": "```cpp\n#include <iostream>\n#include <sstream>\n#include <cctype>\n\nstd::string capitalizeSentences(const std::string& text) {\n    std::stringstream ss(text);\n    std::string result;\n    char ch;\n    bool capitalize = true;\n\n    while (ss.get(ch)) {\n        if (capitalize && std::isalpha(ch)) {\n            result += std::toupper(ch);\n            capitalize = false;\n        } else {\n            result += ch;\n        }\n        if (ch == '.' || ch == '?' || ch == '!') {\n            capitalize = true;\n        }\n    }\n    return result;\n}\n\nint main() {\n    std::string inputText;\n    std::cout << \"Enter text: \";\n    std::getline(std::cin, inputText);\n\n    std::string outputText = capitalizeSentences(inputText);\n    std::cout << \"Capitalized text: \" << outputText << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a program that reads a list of words and prints them in reverse alphabetical order.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nint main() {\n    std::vector<std::string> words;\n    std::string word;\n    \n    while (std::cin >> word) {\n        words.push_back(word);\n    }\n    \n    std::sort(words.rbegin(), words.rend());\n    \n    for (const auto& w : words) {\n        std::cout << w << std::endl;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Write a script that asks for two times and prints the difference in minutes.",
    "code": "```cpp\n#include <iostream>\n#include <iomanip>\n#include <cmath>\n\nint main() {\n    int hours1, minutes1, hours2, minutes2;\n    char colon;\n\n    std::cout << \"Enter first time (HH:MM): \";\n    std::cin >> hours1 >> colon >> minutes1;\n\n    std::cout << \"Enter second time (HH:MM): \";\n    std::cin >> hours2 >> colon >> minutes2;\n\n    int totalMinutes1 = hours1 * 60 + minutes1;\n    int totalMinutes2 = hours2 * 60 + minutes2;\n\n    int difference = std::abs(totalMinutes1 - totalMinutes2);\n\n    std::cout << \"Difference: \" << difference << \" minutes\" << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Build a program that reads a text and prints the number of vowels and consonants.",
    "code": "```cpp\n#include <iostream>\n#include <cctype>\n\nint main() {\n    std::string text;\n    std::cout << \"Enter a text: \";\n    std::getline(std::cin, text);\n\n    int vowels = 0, consonants = 0;\n    for (char c : text) {\n        if (std::isalpha(c)) {\n            char lower = std::tolower(c);\n            if (lower == 'a' || lower == 'e' || lower == 'i' || lower == 'o' || lower == 'u') {\n                vowels++;\n            } else {\n                consonants++;\n            }\n        }\n    }\n\n    std::cout << \"Vowels: \" << vowels << std::endl;\n    std::cout << \"Consonants: \" << consonants << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a tool that reads a JSON object from input and prints its keys.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n#include <nlohmann/json.hpp>\n\nint main() {\n    std::string input;\n    std::getline(std::cin, input);\n\n    auto jsonObject = nlohmann::json::parse(input);\n\n    for (auto& el : jsonObject.items()) {\n        std::cout << el.key() << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program that reads a CSV file from input and prints each row as a dictionary.",
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <sstream>\n#include <vector>\n#include <unordered_map>\n\nint main() {\n    std::string line, header;\n    if (!std::getline(std::cin, header)) {\n        std::cerr << \"Error reading header\" << std::endl;\n        return 1;\n    }\n\n    std::vector<std::string> column_names;\n    std::stringstream header_stream(header);\n    std::string column;\n    while (std::getline(header_stream, column, ',')) {\n        column_names.push_back(column);\n    }\n\n    while (std::getline(std::cin, line)) {\n        std::stringstream line_stream(line);\n        std::unordered_map<std::string, std::string> row_dict;\n        std::string value;\n        for (size_t i = 0; i < column_names.size(); ++i) {\n            if (!std::getline(line_stream, value, ',')) break;\n            row_dict[column_names[i]] = value;\n        }\n\n        std::cout << \"{\";\n        bool first = true;\n        for (const auto& [key, val] : row_dict) {\n            if (!first) std::cout << \", \";\n            std::cout << \"\\\"\" << key << \"\\\": \\\"\" << val << \"\\\"\";\n            first = false;\n        }\n        std::cout << \"}\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a script that reads a sentence and prints it with the words in reverse order.",
    "code": "```cpp\n#include <iostream>\n#include <sstream>\n#include <vector>\n#include <algorithm>\n\nint main() {\n    std::string sentence;\n    std::cout << \"Enter a sentence: \";\n    std::getline(std::cin, sentence);\n\n    std::istringstream iss(sentence);\n    std::vector<std::string> words;\n    std::string word;\n    while (iss >> word) {\n        words.push_back(word);\n    }\n\n    std::reverse(words.begin(), words.end());\n\n    for (size_t i = 0; i < words.size(); ++i) {\n        std::cout << words[i];\n        if (i < words.size() - 1) {\n            std::cout << \" \";\n        }\n    }\n    std::cout << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a tool that reads a list of numbers and prints their median.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nint main() {\n    std::vector<double> numbers;\n    double number;\n    \n    std::cout << \"Enter numbers (type any non-numeric value to stop): \";\n    while (std::cin >> number) {\n        numbers.push_back(number);\n    }\n    \n    if (numbers.empty()) {\n        std::cout << \"No numbers were entered.\" << std::endl;\n        return 0;\n    }\n    \n    std::sort(numbers.begin(), numbers.end());\n    double median;\n    size_t size = numbers.size();\n    \n    if (size % 2 == 0) {\n        median = (numbers[size / 2 - 1] + numbers[size / 2]) / 2;\n    } else {\n        median = numbers[size / 2];\n    }\n    \n    std::cout << \"Median: \" << median << std::endl;\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Design a program that reads a sequence of characters and prints the first non-repeated character.",
    "code": "```cpp\n#include <iostream>\n#include <unordered_map>\n#include <string>\n\nint main() {\n    std::string input;\n    std::cout << \"Enter a sequence of characters: \";\n    std::getline(std::cin, input);\n\n    std::unordered_map<char, int> char_count;\n    for (char ch : input) {\n        char_count[ch]++;\n    }\n\n    for (char ch : input) {\n        if (char_count[ch] == 1) {\n            std::cout << \"First non-repeated character: \" << ch << std::endl;\n            return 0;\n        }\n    }\n\n    std::cout << \"No non-repeated character found.\" << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Write a script that reads a list of tuples and prints them sorted by the second element.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <tuple>\n#include <algorithm>\n\nint main() {\n    std::vector<std::tuple<int, int>> tuples;\n    int n, a, b;\n    \n    std::cout << \"Enter number of tuples: \";\n    std::cin >> n;\n    \n    std::cout << \"Enter the tuples (a b): \" << std::endl;\n    for (int i = 0; i < n; ++i) {\n        std::cin >> a >> b;\n        tuples.emplace_back(a, b);\n    }\n    \n    std::sort(tuples.begin(), tuples.end(), [](const auto& t1, const auto& t2) {\n        return std::get<1>(t1) < std::get<1>(t2);\n    });\n    \n    std::cout << \"Sorted tuples: \" << std::endl;\n    for (const auto& t : tuples) {\n        std::cout << \"(\" << std::get<0>(t) << \", \" << std::get<1>(t) << \")\" << std::endl;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Create a program that reads a list of cities and prints them grouped by their starting letter.",
    "code": "```cpp\n#include <iostream>\n#include <map>\n#include <vector>\n#include <string>\n\nint main() {\n    std::map<char, std::vector<std::string>> citiesByLetter;\n    std::string city;\n    \n    std::cout << \"Enter the cities (type 'end' to finish):\" << std::endl;\n    while (true) {\n        std::getline(std::cin, city);\n        if (city == \"end\") break;\n        if (!city.empty()) {\n            char startingLetter = std::tolower(city[0]);\n            citiesByLetter[startingLetter].push_back(city);\n        }\n    }\n    \n    for (const auto &entry : citiesByLetter) {\n        std::cout << entry.first << ':' << std::endl;\n        for (const auto &c : entry.second) {\n            std::cout << \"  \" << c << std::endl;\n        }\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Build a tool that reads a text and prints the longest word.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n#include <sstream>\n\nint main() {\n    std::string text;\n    std::cout << \"Enter text: \";\n    std::getline(std::cin, text);\n\n    std::istringstream stream(text);\n    std::string word, longestWord;\n    while (stream >> word) {\n        if (word.length() > longestWord.length()) {\n            longestWord = word;\n        }\n    }\n\n    std::cout << \"Longest word: \" << longestWord << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a program that reads a string and prints the number of unique characters.",
    "code": "```cpp\n#include <iostream>\n#include <unordered_set>\n\nint main() {\n    std::string input;\n    std::getline(std::cin, input);\n    std::unordered_set<char> unique_chars(input.begin(), input.end());\n    std::cout << unique_chars.size() << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Write a script that reads two strings and prints the longest common substring.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n\nstd::string longestCommonSubstring(const std::string& str1, const std::string& str2) {\n    int len1 = str1.length();\n    int len2 = str2.length();\n    int maxLen = 0;\n    int endIdx = 0;\n\n    std::vector<std::vector<int>> dp(len1 + 1, std::vector<int>(len2 + 1, 0));\n\n    for (int i = 1; i <= len1; ++i) {\n        for (int j = 1; j <= len2; ++j) {\n            if (str1[i - 1] == str2[j - 1]) {\n                dp[i][j] = dp[i - 1][j - 1] + 1;\n                if (dp[i][j] > maxLen) {\n                    maxLen = dp[i][j];\n                    endIdx = i;\n                }\n            }\n        }\n    }\n\n    return str1.substr(endIdx - maxLen, maxLen);\n}\n\nint main() {\n    std::string str1, str2;\n    std::cin >> str1 >> str2;\n    std::string result = longestCommonSubstring(str1, str2);\n    std::cout << result << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a program that reads a chessboard position and prints all possible moves for a knight.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n\nstd::vector<std::pair<int, int>> knightMoves = {\n    {2, 1}, {1, 2}, {-1, 2}, {-2, 1},\n    {-2, -1}, {-1, -2}, {1, -2}, {2, -1}\n};\n\nbool isValidMove(int x, int y) {\n    return (x >= 0 && x < 8 && y >= 0 && y < 8);\n}\n\nstd::vector<std::string> getKnightMoves(const std::string& position) {\n    std::vector<std::string> moves;\n    int x = position[0] - 'a';\n    int y = position[1] - '1';\n    \n    for (const auto& move : knightMoves) {\n        int newX = x + move.first;\n        int newY = y + move.second;\n        if (isValidMove(newX, newY)) {\n            std::string newPosition;\n            newPosition += (newX + 'a');\n            newPosition += (newY + '1');\n            moves.push_back(newPosition);\n        }\n    }\n    \n    return moves;\n}\n\nint main() {\n    std::string position;\n    std::cout << \"Enter knight position (e.g., e4): \";\n    std::cin >> position;\n    \n    std::vector<std::string> moves = getKnightMoves(position);\n    \n    std::cout << \"Possible moves for knight at \" << position << \":\\n\";\n    for (const auto& move : moves) {\n        std::cout << move << \" \";\n    }\n    std::cout << std::endl;\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Create a tool that reads a list of numbers and prints the mode.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <map>\n#include <algorithm>\n\nint main() {\n    std::vector<int> numbers;\n    std::map<int, int> frequency;\n    int num;\n\n    std::cout << \"Enter numbers (end input with a non-numeric value):\" << std::endl;\n    while (std::cin >> num) {\n        numbers.push_back(num);\n        frequency[num]++;\n    }\n\n    int mode = numbers[0];\n    int max_count = 0;\n    for (const auto &pair : frequency) {\n        if (pair.second > max_count) {\n            max_count = pair.second;\n            mode = pair.first;\n        }\n    }\n\n    std::cout << \"Mode: \" << mode << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Design a program that reads a list of file paths and prints the largest file.",
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n#include <vector>\n#include <sys/stat.h>\n\nlong getFileSize(const std::string& filePath) {\n    struct stat statBuf;\n    if (stat(filePath.c_str(), &statBuf) == 0) {\n        return statBuf.st_size;\n    }\n    return -1;\n}\n\nint main() {\n    std::vector<std::string> filePaths;\n    std::string path;\n    while (std::getline(std::cin, path)) {\n        if (path.empty()) {\n            break;\n        }\n        filePaths.push_back(path);\n    }\n\n    std::string largestFile;\n    long largestSize = -1;\n\n    for (const auto& filePath : filePaths) {\n        long fileSize = getFileSize(filePath);\n        if (fileSize > largestSize) {\n            largestSize = fileSize;\n            largestFile = filePath;\n        }\n    }\n\n    if (!largestFile.empty()) {\n        std::cout << \"Largest file: \" << largestFile << \" (\" << largestSize << \" bytes)\" << std::endl;\n    } else {\n        std::cout << \"No valid files found.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a script that reads a list of prices and prints the total cost with tax.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<double> prices;\n    double price, total = 0.0, taxRate = 0.1; // Assuming a tax rate of 10%\n    \n    std::cout << \"Enter prices (enter a negative number to end):\" << std::endl;\n    while (std::cin >> price && price >= 0) {\n        prices.push_back(price);\n    }\n    \n    for (double p : prices) {\n        total += p;\n    }\n    \n    total += total * taxRate;\n    \n    std::cout << \"Total cost with tax: \" << total << std::endl;\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Build a program that reads a list of temperatures and prints them in Fahrenheit.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<double> temperatures;\n    double temp;\n    std::cout << \"Enter temperatures in Celsius (enter 'q' to quit):\" << std::endl;\n    \n    while (std::cin >> temp) {\n        temperatures.push_back(temp);\n    }\n    \n    std::cout << \"Temperatures in Fahrenheit:\" << std::endl;\n    for (double celsius : temperatures) {\n        double fahrenheit = celsius * 9 / 5 + 32;\n        std::cout << fahrenheit << std::endl;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Implement a tool that reads a list of book titles and prints them sorted by length.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nint main() {\n    std::vector<std::string> books;\n    std::string title;\n    \n    std::cout << \"Enter book titles (press Ctrl+D to end input):\" << std::endl;\n    while (std::getline(std::cin, title)) {\n        books.push_back(title);\n    }\n    \n    std::sort(books.begin(), books.end(), [](const std::string &a, const std::string &b) {\n        return a.length() < b.length();\n    });\n    \n    std::cout << \"Sorted book titles by length:\" << std::endl;\n    for (const auto &book : books) {\n        std::cout << book << std::endl;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Write a program that reads a directory path and prints all file names.",
    "code": "```cpp\n#include <iostream>\n#include <filesystem>\n\nint main() {\n    std::string path;\n    std::cout << \"Enter directory path: \";\n    std::getline(std::cin, path);\n\n    for (const auto& entry : std::filesystem::directory_iterator(path)) {\n        std::cout << entry.path().filename().string() << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a script that reads a list of URLs and prints those with a secure connection.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n\nint main() {\n    std::vector<std::string> urls;\n    std::string url;\n    \n    while (std::getline(std::cin, url)) {\n        urls.push_back(url);\n    }\n\n    for (const auto& u : urls) {\n        if (u.rfind(\"https://\", 0) == 0) {\n            std::cout << u << std::endl;\n        }\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a tool that reads a sequence of numbers and prints if it is strictly increasing.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<int> numbers;\n    int num;\n    while (std::cin >> num) {\n        numbers.push_back(num);\n    }\n    bool isStrictlyIncreasing = true;\n    for (size_t i = 1; i < numbers.size(); ++i) {\n        if (numbers[i] <= numbers[i - 1]) {\n            isStrictlyIncreasing = false;\n            break;\n        }\n    }\n    if (isStrictlyIncreasing) {\n        std::cout << \"The sequence is strictly increasing.\" << std::endl;\n    } else {\n        std::cout << \"The sequence is not strictly increasing.\" << std::endl;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Design a program that reads a list of products and prints them grouped by category.",
    "code": "```cpp\n#include <iostream>\n#include <map>\n#include <vector>\n#include <string>\n\nint main() {\n    std::map<std::string, std::vector<std::string>> productsByCategory;\n    std::string category, product;\n    \n    std::cout << \"Enter products (category product), type 'end' to finish:\\n\";\n    \n    while (true) {\n        std::cin >> category;\n        if (category == \"end\") break;\n        std::cin >> product;\n        productsByCategory[category].push_back(product);\n    }\n    \n    std::cout << \"\\nProducts grouped by category:\\n\";\n    for (const auto& entry : productsByCategory) {\n        std::cout << entry.first << \":\\n\";\n        for (const auto& prod : entry.second) {\n            std::cout << \"  - \" << prod << \"\\n\";\n        }\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Write a script that reads a sentence and prints it with alternating word capitalization.",
    "code": "```cpp\n#include <iostream>\n#include <sstream>\n#include <string>\n#include <cctype>\n\nstd::string alternateCapitalization(const std::string &sentence) {\n    std::stringstream ss(sentence);\n    std::string word;\n    std::string result;\n    bool capitalize = true;\n\n    while (ss >> word) {\n        if (capitalize) {\n            for (auto &ch : word) {\n                ch = std::toupper(ch);\n            }\n        } else {\n            for (auto &ch : word) {\n                ch = std::tolower(ch);\n            }\n        }\n        capitalize = !capitalize;\n        result += word + \" \";\n    }\n\n    if (!result.empty()) {\n        result.pop_back(); // Remove trailing space\n    }\n\n    return result;\n}\n\nint main() {\n    std::string input;\n    std::cout << \"Enter a sentence: \";\n    std::getline(std::cin, input);\n\n    std::string output = alternateCapitalization(input);\n    std::cout << output << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a program that reads a list of grades and prints the highest and lowest grade.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <limits>\n\nint main() {\n    std::vector<int> grades;\n    int grade;\n    \n    std::cout << \"Enter grades (enter a negative number to stop): \" << std::endl;\n    while (true) {\n        std::cin >> grade;\n        if (grade < 0) break;\n        grades.push_back(grade);\n    }\n    \n    if (grades.empty()) {\n        std::cout << \"No grades entered.\" << std::endl;\n        return 0;\n    }\n    \n    int highest = std::numeric_limits<int>::min();\n    int lowest = std::numeric_limits<int>::max();\n    \n    for (int g : grades) {\n        if (g > highest) highest = g;\n        if (g < lowest) lowest = g;\n    }\n    \n    std::cout << \"Highest grade: \" << highest << std::endl;\n    std::cout << \"Lowest grade: \" << lowest << std::endl;\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Build a tool that reads a text and prints the number of sentences.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nint countSentences(const std::string &text) {\n    int count = 0;\n    for (char ch : text) {\n        if (ch == '.' || ch == '?' || ch == '!') {\n            ++count;\n        }\n    }\n    return count;\n}\n\nint main() {\n    std::string text;\n    std::cout << \"Enter text: \";\n    std::getline(std::cin, text);\n    int sentenceCount = countSentences(text);\n    std::cout << \"Number of sentences: \" << sentenceCount << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a program that reads a list of integers and prints the sum of all odd numbers.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<int> numbers;\n    int n;\n    while (std::cin >> n) {\n        numbers.push_back(n);\n    }\n    int sum = 0;\n    for (int number : numbers) {\n        if (number % 2 != 0) {\n            sum += number;\n        }\n    }\n    std::cout << sum << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Write a script that reads a text and prints the shortest sentence.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n#include <sstream>\n#include <limits>\n\nint main() {\n    std::string input;\n    std::cout << \"Enter text: \";\n    std::getline(std::cin, input);\n\n    std::stringstream ss(input);\n    std::string sentence, shortestSentence;\n    size_t minLength = std::numeric_limits<size_t>::max();\n\n    while (std::getline(ss, sentence, '.')) {\n        size_t length = sentence.length();\n        if (length > 0 && length < minLength) {\n            minLength = length;\n            shortestSentence = sentence;\n        }\n    }\n\n    if (!shortestSentence.empty()) {\n        std::cout << \"Shortest sentence: \" << shortestSentence << \".\" << std::endl;\n    } else {\n        std::cout << \"No sentence found.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a program that reads a list of dictionaries and prints them sorted by a specific key.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <map>\n#include <algorithm>\n\nint main() {\n    int n;\n    std::cout << \"Enter the number of dictionaries: \";\n    std::cin >> n;\n\n    std::vector<std::map<std::string, std::string>> dictionaries(n);\n    std::string key, value;\n    \n    for (int i = 0; i < n; ++i) {\n        int m;\n        std::cout << \"Enter the number of key-value pairs for dictionary \" << i + 1 << \": \";\n        std::cin >> m;\n        for (int j = 0; j < m; ++j) {\n            std::cout << \"Enter key: \";\n            std::cin >> key;\n            std::cout << \"Enter value: \";\n            std::cin >> value;\n            dictionaries[i][key] = value;\n        }\n    }\n\n    std::string sortKey;\n    std::cout << \"Enter the key to sort by: \";\n    std::cin >> sortKey;\n\n    std::sort(dictionaries.begin(), dictionaries.end(), [&sortKey](const auto& a, const auto& b) {\n        auto itA = a.find(sortKey);\n        auto itB = b.find(sortKey);\n        std::string valA = itA != a.end() ? itA->second : \"\";\n        std::string valB = itB != b.end() ? itB->second : \"\";\n        return valA < valB;\n    });\n\n    std::cout << \"Sorted dictionaries:\\n\";\n    for (const auto& dict : dictionaries) {\n        std::cout << \"{ \";\n        for (const auto& [k, v] : dict) {\n            std::cout << k << \": \" << v << \" \";\n        }\n        std::cout << \"}\\n\";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a tool that reads a sequence of strings and prints the common prefix.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string commonPrefix(const std::vector<std::string>& strings) {\n    if (strings.empty()) return \"\";\n\n    std::string prefix = strings[0];\n    for (size_t i = 1; i < strings.size(); ++i) {\n        size_t j = 0;\n        while (j < prefix.length() && j < strings[i].length() && prefix[j] == strings[i][j]) {\n            ++j;\n        }\n        prefix = prefix.substr(0, j);\n        if (prefix.empty()) break;\n    }\n    return prefix;\n}\n\nint main() {\n    std::vector<std::string> strings;\n    std::string input;\n    \n    std::cout << \"Enter strings (end with CTRL+D):\" << std::endl;\n    while (std::cin >> input) {\n        strings.push_back(input);\n    }\n    \n    std::string result = commonPrefix(strings);\n    std::cout << \"Common prefix: \" << result << std::endl;\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Design a program that reads a number and prints all of its divisors.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    int number;\n    std::cout << \"Enter a number: \";\n    std::cin >> number;\n\n    std::cout << \"Divisors of \" << number << \" are: \";\n    for (int i = 1; i <= number; ++i) {\n        if (number % i == 0) {\n            std::cout << i << \" \";\n        }\n    }\n    std::cout << std::endl;\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Write a script that reads a text and prints each word with its length.",
    "code": "```cpp\n#include <iostream>\n#include <sstream>\n\nint main() {\n    std::string line, word;\n    std::getline(std::cin, line);\n    std::istringstream stream(line);\n    while (stream >> word) {\n        std::cout << word << \": \" << word.length() << std::endl;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Build a program that reads a list of colors and prints them in a rainbow order.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <map>\n\nint main() {\n    std::vector<std::string> colors;\n    std::string color;\n    \n    std::cout << \"Enter colors (type 'done' to finish):\" << std::endl;\n    while (std::cin >> color && color != \"done\") {\n        colors.push_back(color);\n    }\n    \n    std::map<std::string, int> rainbow_order = {\n        {\"red\", 1}, {\"orange\", 2}, {\"yellow\", 3}, {\"green\", 4},\n        {\"blue\", 5}, {\"indigo\", 6}, {\"violet\", 7}\n    };\n    \n    std::sort(colors.begin(), colors.end(), [&rainbow_order](const std::string &a, const std::string &b) {\n        return rainbow_order[a] < rainbow_order[b];\n    });\n    \n    std::cout << \"Colors in rainbow order:\" << std::endl;\n    for (const auto &c : colors) {\n        std::cout << c << std::endl;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Implement a tool that reads a list of names and prints them with their initials.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n#include <sstream>\n\nint main() {\n    std::string line;\n    std::cout << \"Enter names separated by new lines (end with EOF):\" << std::endl;\n    while (std::getline(std::cin, line)) {\n        std::stringstream ss(line);\n        std::string name;\n        while (ss >> name) {\n            std::cout << name[0] << \". \";\n        }\n        std::cout << std::endl;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program that reads a series of coordinates and prints the center point.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<std::pair<double, double>> coordinates;\n    double x, y;\n    \n    while (std::cin >> x >> y) {\n        coordinates.emplace_back(x, y);\n    }\n    \n    double sumX = 0.0, sumY = 0.0;\n    for (const auto& coord : coordinates) {\n        sumX += coord.first;\n        sumY += coord.second;\n    }\n    \n    if (!coordinates.empty()) {\n        double centerX = sumX / coordinates.size();\n        double centerY = sumY / coordinates.size();\n        std::cout << \"Center point: (\" << centerX << \", \" << centerY << \")\" << std::endl;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Create a script that reads a sentence and prints it with each vowel replaced by its uppercase form.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nint main() {\n    std::string sentence;\n    std::getline(std::cin, sentence);\n\n    for (char &c : sentence) {\n        switch (c) {\n            case 'a': c = 'A'; break;\n            case 'e': c = 'E'; break;\n            case 'i': c = 'I'; break;\n            case 'o': c = 'O'; break;\n            case 'u': c = 'U'; break;\n        }\n    }\n\n    std::cout << sentence << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a tool that reads a mathematical expression and evaluates its result.",
    "code": "```cpp\n#include <iostream>\n#include <sstream>\n#include <string>\n#include <stack>\n#include <cctype>\n\nint precedence(char op) {\n    if(op == '+'||op == '-') return 1;\n    if(op == '*'||op == '/') return 2;\n    return 0;\n}\n\nint applyOp(int a, int b, char op) {\n    switch(op) {\n        case '+': return a + b;\n        case '-': return a - b;\n        case '*': return a * b;\n        case '/': return a / b;\n    }\n    return 0;\n}\n\nint evaluate(const std::string& expression) {\n    std::stack<int> values;\n    std::stack<char> ops;\n    for(size_t i = 0; i < expression.length(); i++) {\n        if(isspace(expression[i])) continue;\n        if(isdigit(expression[i])) {\n            int val = 0;\n            while(i < expression.length() && isdigit(expression[i])) {\n                val = (val * 10) + (expression[i] - '0');\n                i++;\n            }\n            values.push(val);\n            i--;\n        }\n        else if(expression[i] == '(') {\n            ops.push(expression[i]);\n        }\n        else if(expression[i] == ')') {\n            while(!ops.empty() && ops.top() != '(') {\n                int val2 = values.top();\n                values.pop();\n                int val1 = values.top();\n                values.pop();\n                char op = ops.top();\n                ops.pop();\n                values.push(applyOp(val1, val2, op));\n            }\n            ops.pop();\n        }\n        else {\n            while(!ops.empty() && precedence(ops.top()) >= precedence(expression[i])) {\n                int val2 = values.top();\n                values.pop();\n                int val1 = values.top();\n                values.pop();\n                char op = ops.top();\n                ops.pop();\n                values.push(applyOp(val1, val2, op));\n            }\n            ops.push(expression[i]);\n        }\n    }\n    while(!ops.empty()) {\n        int val2 = values.top();\n        values.pop();\n        int val1 = values.top();\n        values.pop();\n        char op = ops.top();\n        ops.pop();\n        values.push(applyOp(val1, val2, op));\n    }\n    return values.top();\n}\n\nint main() {\n    std::string expression;\n    std::cout << \"Enter a mathematical expression: \";\n    std::getline(std::cin, expression);\n    int result = evaluate(expression);\n    std::cout << \"Result: \" << result << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Design a program that reads a text and prints the first three words.",
    "code": "```cpp\n#include <iostream>\n#include <sstream>\n#include <string>\n\nint main() {\n    std::string input;\n    std::getline(std::cin, input);\n\n    std::istringstream stream(input);\n    std::string word;\n    int count = 0;\n\n    while (stream >> word && count < 3) {\n        std::cout << word << (count < 2 ? \" \" : \"\\n\");\n        count++;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a script that reads a list of numbers and prints them without duplicates.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n#include <vector>\n\nint main() {\n    std::vector<int> numbers;\n    int num;\n    \n    std::cout << \"Enter numbers (end input with a non-numeric character): \";\n    while (std::cin >> num) {\n        numbers.push_back(num);\n    }\n    \n    std::set<int> unique_numbers(numbers.begin(), numbers.end());\n    \n    std::cout << \"Numbers without duplicates: \";\n    for (const int &n : unique_numbers) {\n        std::cout << n << \" \";\n    }\n    \n    std::cout << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Create a program that reads a string and prints it with spaces between each character.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nint main() {\n    std::string input;\n    std::getline(std::cin, input);\n    \n    for (size_t i = 0; i < input.length(); ++i) {\n        std::cout << input[i];\n        if (i != input.length() - 1) {\n            std::cout << ' ';\n        }\n    }\n    \n    std::cout << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Build a tool that reads a list of events with dates and prints them by chronological order.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <sstream>\n\nstruct Event {\n    std::string date;\n    std::string description;\n};\n\nbool compareEvents(const Event& a, const Event& b) {\n    return a.date < b.date;\n}\n\nint main() {\n    std::vector<Event> events;\n    std::string input;\n    std::cout << \"Enter events (date description), end input with EOF:\" << std::endl;\n\n    while (std::getline(std::cin, input)) {\n        std::istringstream iss(input);\n        Event event;\n        iss >> event.date;\n        std::getline(iss, event.description);\n        events.push_back(event);\n    }\n\n    std::sort(events.begin(), events.end(), compareEvents);\n\n    std::cout << \"Events in chronological order:\" << std::endl;\n    for (const auto& event : events) {\n        std::cout << event.date << \" \" << event.description << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a program that reads a list of fractions and prints their sum as a reduced fraction.",
    "code": "```cpp\n#include <iostream>\n#include <numeric>\n#include <vector>\n\nusing namespace std;\n\n// Function to compute gcd\nint gcd(int a, int b) {\n    return b == 0 ? a : gcd(b, a % b);\n}\n\n// Function to reduce a fraction\npair<int, int> reduce(int num, int denom) {\n    int g = gcd(num, denom);\n    return {num / g, denom / g};\n}\n\nint main() {\n    int n;\n    cout << \"Enter the number of fractions: \";\n    cin >> n;\n\n    vector<pair<int, int>> fractions(n);\n    cout << \"Enter the fractions as pairs of integers (numerator denominator):\" << endl;\n    for (int i = 0; i < n; ++i) {\n        cin >> fractions[i].first >> fractions[i].second;\n    }\n\n    // Sum the fractions\n    int num = 0, denom = 1;\n    for (const auto& frac : fractions) {\n        num = num * frac.second + frac.first * denom;\n        denom *= frac.second;\n    }\n\n    // Reduce and print the result\n    auto result = reduce(num, denom);\n    cout << \"Sum as a reduced fraction: \" << result.first << \"/\" << result.second << endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a script that reads a text and prints it with each consonant doubled.",
    "code": "```cpp\n#include <iostream>\n#include <cctype>\n#include <string>\n\nint main() {\n    std::string input;\n    std::getline(std::cin, input);\n    std::string output;\n    \n    for (char c : input) {\n        output += c;\n        if (std::isalpha(c) && !std::strchr(\"aeiouAEIOU\", c)) {\n            output += c;\n        }\n    }\n    \n    std::cout << output << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a program that reads a number and prints its representation in Roman numerals.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nstd::string intToRoman(int num) {\n    std::string roman;\n    std::pair<int, std::string> values[] = {\n        {1000, \"M\"}, {900, \"CM\"}, {500, \"D\"}, {400, \"CD\"},\n        {100, \"C\"}, {90, \"XC\"}, {50, \"L\"}, {40, \"XL\"},\n        {10, \"X\"}, {9, \"IX\"}, {5, \"V\"}, {4, \"IV\"},\n        {1, \"I\"}\n    };\n    for (const auto &val : values) {\n        while (num >= val.first) {\n            roman += val.second;\n            num -= val.first;\n        }\n    }\n    return roman;\n}\n\nint main() {\n    int number;\n    std::cout << \"Enter a number: \";\n    std::cin >> number;\n    std::cout << \"Roman numeral: \" << intToRoman(number) << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Create a tool that reads a list of words and prints them with each letter in reverse order.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n#include <algorithm>\n\nint main() {\n    std::string word;\n    while (std::cin >> word) {\n        std::reverse(word.begin(), word.end());\n        std::cout << word << std::endl;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Design a program that reads a set of points and prints the one closest to the origin.",
    "code": "```cpp\n#include <iostream>\n#include <cmath>\n#include <limits>\n\nstruct Point {\n    double x, y;\n};\n\ndouble distanceFromOrigin(const Point& p) {\n    return std::sqrt(p.x * p.x + p.y * p.y);\n}\n\nint main() {\n    int n;\n    std::cout << \"Enter the number of points: \";\n    std::cin >> n;\n\n    Point closestPoint;\n    double minDistance = std::numeric_limits<double>::max();\n\n    for(int i = 0; i < n; ++i) {\n        Point p;\n        std::cout << \"Enter coordinates for point \" << i + 1 << \" (x y): \";\n        std::cin >> p.x >> p.y;\n        double dist = distanceFromOrigin(p);\n        if(dist < minDistance) {\n            minDistance = dist;\n            closestPoint = p;\n        }\n    }\n\n    std::cout << \"The point closest to the origin is: (\" << closestPoint.x << \", \" << closestPoint.y << \")\\n\";\n    return 0;\n}\n```"
  },
  {
    "task": "Write a script that reads a text and prints the frequency of each word.",
    "code": "```cpp\n#include <iostream>\n#include <sstream>\n#include <map>\n#include <string>\n\nint main() {\n    std::string input;\n    std::map<std::string, int> wordCount;\n\n    std::cout << \"Enter text: \";\n    std::getline(std::cin, input);\n\n    std::istringstream stream(input);\n    std::string word;\n    while (stream >> word) {\n        ++wordCount[word];\n    }\n\n    for (const auto& pair : wordCount) {\n        std::cout << pair.first << \": \" << pair.second << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Build a program that reads a list of integers and prints the second smallest.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <limits>\n\nint main() {\n    std::vector<int> numbers;\n    int num;\n    while (std::cin >> num) {\n        numbers.push_back(num);\n    }\n    if (numbers.size() < 2) {\n        std::cout << \"Not enough numbers\" << std::endl;\n        return 1;\n    }\n    std::sort(numbers.begin(), numbers.end());\n    auto it = std::unique(numbers.begin(), numbers.end());\n    numbers.resize(std::distance(numbers.begin(), it));\n    if (numbers.size() < 2) {\n        std::cout << \"No second smallest\" << std::endl;\n        return 1;\n    }\n    std::cout << numbers[1] << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a tool that reads a string and prints all its substrings.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nint main() {\n    std::string input;\n    std::cout << \"Enter a string: \";\n    std::getline(std::cin, input);\n\n    for (size_t i = 0; i < input.length(); ++i) {\n        for (size_t j = 1; j <= input.length() - i; ++j) {\n            std::cout << input.substr(i, j) << std::endl;\n        }\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program that reads a number and generates a random number up to that number.",
    "code": "```cpp\n#include <iostream>\n#include <cstdlib>\n#include <ctime>\n\nint main() {\n    int maxNumber;\n    std::cout << \"Enter a number: \";\n    std::cin >> maxNumber;\n\n    std::srand(std::time(0));\n    int randomNumber = std::rand() % (maxNumber + 1);\n\n    std::cout << \"Random number: \" << randomNumber << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Create a script that reads a sentence and prints it with each word reversed.",
    "code": "```cpp\n#include <iostream>\n#include <sstream>\n#include <algorithm>\n\nint main() {\n    std::string sentence, word;\n    std::getline(std::cin, sentence);\n    std::istringstream iss(sentence);\n    bool first = true;\n    while (iss >> word) {\n        if (!first) {\n            std::cout << \" \";\n        }\n        std::reverse(word.begin(), word.end());\n        std::cout << word;\n        first = false;\n    }\n    std::cout << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a tool that reads a text and prints it with each sentence on a new line.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n#include <sstream>\n\nint main() {\n    std::string text;\n    std::cout << \"Enter text: \";\n    std::getline(std::cin, text);\n\n    std::istringstream stream(text);\n    std::string sentence;\n\n    while (std::getline(stream, sentence, '.')) {\n        if (!sentence.empty()) {\n            std::cout << sentence << '.' << std::endl;\n        }\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a program that reads a list of numbers and prints the product of all negative numbers.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<int> numbers;\n    int n, input;\n    std::cout << \"Enter the number of elements: \";\n    std::cin >> n;\n    std::cout << \"Enter the numbers: \";\n    for (int i = 0; i < n; ++i) {\n        std::cin >> input;\n        numbers.push_back(input);\n    }\n\n    int product = 1;\n    bool hasNegative = false;\n    for (int num : numbers) {\n        if (num < 0) {\n            product *= num;\n            hasNegative = true;\n        }\n    }\n\n    if (hasNegative) {\n        std::cout << \"Product of negative numbers: \" << product << std::endl;\n    } else {\n        std::cout << \"No negative numbers in the list.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a script that reads a dictionary and prints the keys and values in sorted order.",
    "code": "```cpp\n#include <iostream>\n#include <map>\n#include <string>\n\nint main() {\n    std::map<std::string, std::string> dictionary;\n    std::string key, value;\n    \n    std::cout << \"Enter key-value pairs (type 'end' as key to stop):\\n\";\n    while (true) {\n        std::cout << \"Key: \";\n        std::cin >> key;\n        if (key == \"end\") break;\n        std::cout << \"Value: \";\n        std::cin >> value;\n        dictionary[key] = value;\n    }\n    \n    std::cout << \"\\nSorted key-value pairs:\\n\";\n    for (const auto& pair : dictionary) {\n        std::cout << pair.first << \": \" << pair.second << '\\n';\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Create a program that reads a text and prints the number of unique words.",
    "code": "```cpp\n#include <iostream>\n#include <set>\n#include <sstream>\n#include <string>\n\nint main() {\n    std::string text;\n    std::getline(std::cin, text);\n    std::istringstream stream(text);\n    std::set<std::string> uniqueWords;\n    std::string word;\n    while (stream >> word) {\n        uniqueWords.insert(word);\n    }\n    std::cout << uniqueWords.size() << std::endl;\n    return 0;\n}\n```"
  }
]