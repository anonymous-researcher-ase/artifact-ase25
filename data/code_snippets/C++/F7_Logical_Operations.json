[
  {
    "task": "Create a function that takes two boolean inputs and returns true if both are true using logical AND.",
    "code": "```cpp\nbool logicalAnd(bool a, bool b) {\n    return a && b;\n}\n```"
  },
  {
    "task": "Write a script to check if either of two given conditions are met using logical OR.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    bool condition1 = true; // Example condition\n    bool condition2 = false; // Example condition\n\n    if (condition1 || condition2) {\n        std::cout << \"At least one condition is met.\" << std::endl;\n    } else {\n        std::cout << \"No conditions are met.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a program that negates a boolean variable using logical NOT.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    bool myBool = true;\n    myBool = !myBool;\n    std::cout << std::boolalpha << myBool << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a feature that determines if a number is within a specific range using logical operators.",
    "code": "```cpp\n#include <iostream>\n\nbool isWithinRange(int number, int lower, int upper) {\n    return number >= lower && number <= upper;\n}\n\nint main() {\n    int number = 10;\n    int lowerBound = 5;\n    int upperBound = 15;\n\n    if (isWithinRange(number, lowerBound, upperBound)) {\n        std::cout << \"The number is within the range.\" << std::endl;\n    } else {\n        std::cout << \"The number is outside the range.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a system that checks if a user has both read and write permissions using logical AND.",
    "code": "```cpp\n#include <iostream>\n\nbool hasReadPermission = true;\nbool hasWritePermission = true;\n\nbool hasReadAndWritePermissions() {\n    return hasReadPermission && hasWritePermission;\n}\n\nint main() {\n    if (hasReadAndWritePermissions()) {\n        std::cout << \"User has both read and write permissions.\" << std::endl;\n    } else {\n        std::cout << \"User does not have both read and write permissions.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function to verify if a string is neither empty nor null using logical NOT.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nbool isStringValid(const std::string* str) {\n    return !(str == nullptr || str->empty());\n}\n\nint main() {\n    std::string test1 = \"Hello\";\n    std::string test2 = \"\";\n    std::string* test3 = nullptr;\n\n    std::cout << std::boolalpha;\n    std::cout << \"Test1 is valid: \" << isStringValid(&test1) << std::endl;\n    std::cout << \"Test2 is valid: \" << isStringValid(&test2) << std::endl;\n    std::cout << \"Test3 is valid: \" << isStringValid(test3) << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a conditional statement that executes a block of code if either of two expressions are true using logical OR.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    bool expression1 = true; // Example expression\n    bool expression2 = false; // Example expression\n\n    if (expression1 || expression2) {\n        std::cout << \"At least one expression is true.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Build a program that inverts the truth value of a given condition using logical NOT.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    bool condition = true; // Example condition\n    bool invertedCondition = !condition; // Invert the truth value using logical NOT\n\n    std::cout << \"Original condition: \" << std::boolalpha << condition << std::endl;\n    std::cout << \"Inverted condition: \" << invertedCondition << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Compose a function to return true if a list is not empty using logical NOT.",
    "code": "```cpp\n#include <vector>\n\nbool isNotEmpty(const std::vector<int>& list) {\n    return !list.empty();\n}\n```"
  },
  {
    "task": "Develop a filter that selects items from a collection only if they meet multiple criteria using logical AND.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nstruct Item {\n    int attribute1;\n    int attribute2;\n    // Add more attributes as needed\n};\n\nstd::vector<Item> filterItems(const std::vector<Item>& items) {\n    std::vector<Item> filteredItems;\n    for (const auto& item : items) {\n        if (item.attribute1 > 10 && item.attribute2 < 20) { // Logical AND condition\n            filteredItems.push_back(item);\n        }\n    }\n    return filteredItems;\n}\n\nint main() {\n    std::vector<Item> items = {\n        {12, 15},\n        {8, 25},\n        {15, 10},\n        {5, 18}\n    };\n    \n    std::vector<Item> result = filterItems(items);\n    \n    for (const auto& item : result) {\n        std::cout << \"Item with attribute1: \" << item.attribute1 \n                  << \", attribute2: \" << item.attribute2 << std::endl;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Write a script that checks if a value is outside a given range using logical OR.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    int value = 5;\n    int lowerBound = 10;\n    int upperBound = 20;\n\n    if (value < lowerBound || value > upperBound) {\n        std::cout << \"The value is outside the range.\" << std::endl;\n    } else {\n        std::cout << \"The value is within the range.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a small program to toggle a boolean flag using logical NOT.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    bool flag = true;\n    std::cout << \"Initial flag: \" << flag << std::endl;\n\n    // Toggle the flag\n    flag = !flag;\n    std::cout << \"Toggled flag: \" << flag << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a feature that evaluates if a username is both unique and valid using logical AND.",
    "code": "```cpp\n#include <iostream>\n#include <unordered_set>\n\nbool isValidUsername(const std::string& username) {\n    // Add logic to check if the username is valid (e.g., length, characters)\n    return !username.empty(); // Example validity check\n}\n\nbool isUniqueUsername(const std::string& username, const std::unordered_set<std::string>& existingUsernames) {\n    return existingUsernames.find(username) == existingUsernames.end();\n}\n\nbool isUniqueAndValidUsername(const std::string& username, const std::unordered_set<std::string>& existingUsernames) {\n    return isValidUsername(username) && isUniqueUsername(username, existingUsernames);\n}\n\nint main() {\n    std::unordered_set<std::string> existingUsernames = {\"user1\", \"user2\", \"user3\"};\n    std::string usernameToCheck = \"user4\";\n\n    if (isUniqueAndValidUsername(usernameToCheck, existingUsernames)) {\n        std::cout << \"The username is both unique and valid.\" << std::endl;\n    } else {\n        std::cout << \"The username is not unique or not valid.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a conditional to perform an action if neither of two flags are set using logical NOT.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    bool flag1 = false;\n    bool flag2 = false;\n\n    if (!flag1 && !flag2) {\n        std::cout << \"Neither flag1 nor flag2 is set.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that returns true if at least one of multiple boolean inputs is true using logical OR.",
    "code": "```cpp\n#include <initializer_list>\n\nbool atLeastOneTrue(std::initializer_list<bool> bools) {\n    for (bool b : bools) {\n        if (b) {\n            return true;\n        }\n    }\n    return false;\n}\n```"
  },
  {
    "task": "Create a loop that continues executing as long as two conditions are both false using logical NOT and AND.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    bool condition1 = false;\n    bool condition2 = false;\n\n    while (!(condition1 && condition2)) {\n        std::cout << \"Loop is executing...\" << std::endl;\n\n        // For demonstration, let's change the conditions after some iterations\n        // This is just to prevent an infinite loop in this example\n        static int counter = 0;\n        counter++;\n        if (counter == 3) condition1 = true;\n        if (counter == 5) condition2 = true;\n    }\n\n    std::cout << \"Loop has ended.\" << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a sequence that checks if a character is either a vowel or a consonant using logical OR.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    char character;\n    std::cout << \"Enter a character: \";\n    std::cin >> character;\n\n    if ((character == 'a' || character == 'e' || character == 'i' || character == 'o' || character == 'u' ||\n         character == 'A' || character == 'E' || character == 'I' || character == 'O' || character == 'U')) {\n        std::cout << character << \" is a vowel.\" << std::endl;\n    } else if ((character >= 'b' && character <= 'z') || (character >= 'B' && character <= 'Z')) {\n        std::cout << character << \" is a consonant.\" << std::endl;\n    } else {\n        std::cout << character << \" is not a valid alphabet character.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a validation that ensures a password is both of minimum length and contains numbers using logical AND.",
    "code": "```cpp\n#include <iostream>\n#include <cctype>\n\nbool isValidPassword(const std::string& password, int minLength) {\n    if (password.length() < minLength) {\n        return false;\n    }\n    bool hasNumber = false;\n    for (char ch : password) {\n        if (std::isdigit(ch)) {\n            hasNumber = true;\n            break;\n        }\n    }\n    return hasNumber;\n}\n\nint main() {\n    std::string password;\n    std::cout << \"Enter password: \";\n    std::cin >> password;\n\n    int minLength = 8;\n    if (isValidPassword(password, minLength)) {\n        std::cout << \"Password is valid.\" << std::endl;\n    } else {\n        std::cout << \"Password is invalid.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Compose a test to determine if a point is not within a circle using logical NOT.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    double x, y;\n    double centerX = 0.0, centerY = 0.0, radius = 5.0;\n\n    std::cout << \"Enter the x and y coordinates of the point: \";\n    std::cin >> x >> y;\n\n    double dx = x - centerX;\n    double dy = y - centerY;\n    double distanceSquared = dx * dx + dy * dy;\n    double radiusSquared = radius * radius;\n\n    if (!(distanceSquared < radiusSquared)) {\n        std::cout << \"The point is not within the circle.\" << std::endl;\n    } else {\n        std::cout << \"The point is within the circle.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function to decide if a user is either an admin or an editor using logical OR.",
    "code": "```cpp\n#include <string>\n\nbool isAdminOrEditor(const std::string& role) {\n    return (role == \"admin\" || role == \"editor\");\n}\n\nint main() {\n    // Example usage\n    std::string userRole1 = \"admin\";\n    std::string userRole2 = \"editor\";\n    std::string userRole3 = \"viewer\";\n    \n    bool result1 = isAdminOrEditor(userRole1); // true\n    bool result2 = isAdminOrEditor(userRole2); // true\n    bool result3 = isAdminOrEditor(userRole3); // false\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Create a conditional statement to trigger an alert if two sensors both detect motion using logical AND.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    bool sensor1 = true; // Assume sensor1 detects motion\n    bool sensor2 = true; // Assume sensor2 detects motion\n\n    if (sensor1 && sensor2) {\n        std::cout << \"Alert: Both sensors detect motion!\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a program to validate an email format and ensure it contains a domain using logical AND.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nbool isValidEmail(const std::string& email) {\n    size_t atPosition = email.find('@');\n    size_t dotPosition = email.find('.', atPosition);\n\n    // Check if '@' exists and is followed by a '.'\n    return (atPosition != std::string::npos) && (dotPosition != std::string::npos) && (dotPosition > atPosition);\n}\n\nint main() {\n    std::string email;\n    std::cout << \"Enter an email: \";\n    std::getline(std::cin, email);\n\n    if (isValidEmail(email)) {\n        std::cout << \"Valid email format.\" << std::endl;\n    } else {\n        std::cout << \"Invalid email format.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a method to confirm that a transaction is neither fraudulent nor unauthorized using logical NOT.",
    "code": "```cpp\n#include <iostream>\n\nbool isFraudulentTransaction() {\n    // Placeholder for fraudulent transaction check\n    return false;\n}\n\nbool isUnauthorizedTransaction() {\n    // Placeholder for unauthorized transaction check\n    return false;\n}\n\nbool isValidTransaction() {\n    return !isFraudulentTransaction() && !isUnauthorizedTransaction();\n}\n\nint main() {\n    if (isValidTransaction()) {\n        std::cout << \"Transaction is valid.\" << std::endl;\n    } else {\n        std::cout << \"Transaction is invalid.\" << std::endl;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that outputs true if a file is either missing or empty using logical OR.",
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n\nbool isFileMissingOrEmpty(const std::string& fileName) {\n    std::ifstream file(fileName);\n    return !file || file.peek() == std::ifstream::traits_type::eof();\n}\n\nint main() {\n    std::string fileName = \"example.txt\";\n    if (isFileMissingOrEmpty(fileName)) {\n        std::cout << \"True\" << std::endl;\n    } else {\n        std::cout << \"False\" << std::endl;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a system to check if a student's grade is neither failing nor incomplete using logical NOT.",
    "code": "```cpp\n#include <iostream>\n\nbool isPassingGrade(char grade) {\n    return !(grade == 'F' || grade == 'I');\n}\n\nint main() {\n    char grade;\n    std::cout << \"Enter the student's grade (A, B, C, D, F, I): \";\n    std::cin >> grade;\n\n    if (isPassingGrade(grade)) {\n        std::cout << \"The student's grade is passing and complete.\" << std::endl;\n    } else {\n        std::cout << \"The student's grade is either failing or incomplete.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a script that executes a command if a file is both readable and writable using logical AND.",
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n\nint main() {\n    const std::string filename = \"example.txt\";\n    std::ifstream file(filename);\n\n    // Check if the file is readable\n    bool isReadable = file.good();\n    file.close();\n\n    // Check if the file is writable\n    std::ofstream fileOut(filename, std::ios::app);\n    bool isWritable = fileOut.good();\n    fileOut.close();\n\n    // Execute the command if the file is both readable and writable\n    if (isReadable && isWritable) {\n        std::cout << \"File is both readable and writable.\" << std::endl;\n        // Execute some command here\n    } else {\n        std::cout << \"File is not both readable and writable.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Compose a function to determine if a temperature is not within a safe operating range using logical NOT.",
    "code": "```cpp\n#include <iostream>\n\nbool isTemperatureUnsafe(int temperature) {\n    const int lowerLimit = 10;  // Define the safe lower limit\n    const int upperLimit = 30;  // Define the safe upper limit\n    return !(temperature >= lowerLimit && temperature <= upperLimit);\n}\n\nint main() {\n    int temperature = 25;  // Example temperature\n    if (isTemperatureUnsafe(temperature)) {\n        std::cout << \"Temperature is not within the safe range.\" << std::endl;\n    } else {\n        std::cout << \"Temperature is within the safe range.\" << std::endl;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Design a check to see if a car is either out of fuel or needs maintenance using logical OR.",
    "code": "```cpp\n#include <iostream>\n\nbool isOutOfFuel(bool fuelLevelLow) {\n    return fuelLevelLow;\n}\n\nbool needsMaintenance(bool maintenanceRequired) {\n    return maintenanceRequired;\n}\n\nbool checkCarStatus(bool fuelLevelLow, bool maintenanceRequired) {\n    return isOutOfFuel(fuelLevelLow) || needsMaintenance(maintenanceRequired);\n}\n\nint main() {\n    bool fuelLevelLow = true; // Example value\n    bool maintenanceRequired = false; // Example value\n\n    if (checkCarStatus(fuelLevelLow, maintenanceRequired)) {\n        std::cout << \"The car is either out of fuel or needs maintenance.\" << std::endl;\n    } else {\n        std::cout << \"The car is fine.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a routine that ensures a network connection is both stable and secure using logical AND.",
    "code": "```cpp\n#include <iostream>\n\nbool isConnectionStable() {\n    // Placeholder for actual stability check logic\n    return true; // Assume it's stable for demonstration\n}\n\nbool isConnectionSecure() {\n    // Placeholder for actual security check logic\n    return true; // Assume it's secure for demonstration\n}\n\nbool isConnectionStableAndSecure() {\n    return isConnectionStable() && isConnectionSecure();\n}\n\nint main() {\n    if (isConnectionStableAndSecure()) {\n        std::cout << \"The network connection is stable and secure.\" << std::endl;\n    } else {\n        std::cout << \"The network connection is not stable or not secure.\" << std::endl;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Write a conditional to print a message if a user is not logged in using logical NOT.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    bool isLoggedIn = false;\n\n    if (!isLoggedIn) {\n        std::cout << \"User is not logged in.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a function that checks if a number is both even and positive using logical AND.",
    "code": "```cpp\n#include <iostream>\n\nbool isEvenAndPositive(int number) {\n    return (number > 0) && (number % 2 == 0);\n}\n\nint main() {\n    int num = 4;\n    if (isEvenAndPositive(num)) {\n        std::cout << num << \" is both even and positive.\" << std::endl;\n    } else {\n        std::cout << num << \" is not both even and positive.\" << std::endl;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a feature that turns off a device if neither of two switches are on using logical NOT.",
    "code": "```cpp\n#include <iostream>\n\nbool isDeviceOn(bool switch1, bool switch2) {\n    // Turn off the device if neither of the switches are on\n    return !(switch1 || switch2);\n}\n\nint main() {\n    bool switch1 = false;\n    bool switch2 = false;\n\n    bool deviceStatus = isDeviceOn(switch1, switch2);\n    \n    std::cout << \"Device is \" << (deviceStatus ? \"Off\" : \"On\") << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Compose a script to alert if a server is either down or running slow using logical OR.",
    "code": "```cpp\n#include <iostream>\n\nbool isServerDown() {\n    // Placeholder function to check if the server is down\n    // In an actual implementation, this function would contain logic to check server status\n    return false; // Example return value\n}\n\nbool isServerSlow() {\n    // Placeholder function to check if the server is running slow\n    // In an actual implementation, this function would contain logic to check server performance\n    return true; // Example return value\n}\n\nint main() {\n    if (isServerDown() || isServerSlow()) {\n        std::cout << \"Alert: The server is either down or running slow.\" << std::endl;\n    } else {\n        std::cout << \"The server is running normally.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a validation method to ensure a form field is not empty using logical NOT.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nbool isFieldNotEmpty(const std::string& field) {\n    return !field.empty();\n}\n\nint main() {\n    std::string input;\n    std::cout << \"Enter a value: \";\n    std::getline(std::cin, input);\n\n    if (isFieldNotEmpty(input)) {\n        std::cout << \"The field is not empty.\" << std::endl;\n    } else {\n        std::cout << \"The field is empty.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program to determine if two strings are both non-empty using logical AND.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nint main() {\n    std::string str1 = \"Hello\";\n    std::string str2 = \"World\";\n\n    if (!str1.empty() && !str2.empty()) {\n        std::cout << \"Both strings are non-empty.\" << std::endl;\n    } else {\n        std::cout << \"At least one of the strings is empty.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a function that checks if a number is either prime or a perfect square using logical OR.",
    "code": "```cpp\n#include <cmath>\n\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (int i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) return false;\n    }\n    return true;\n}\n\nbool isPerfectSquare(int n) {\n    int root = static_cast<int>(std::sqrt(n));\n    return root * root == n;\n}\n\nbool isPrimeOrPerfectSquare(int n) {\n    return isPrime(n) || isPerfectSquare(n);\n}\n```"
  },
  {
    "task": "Develop a script to ensure a user is either an adult or has parental consent using logical OR.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    bool isAdult;\n    bool hasParentalConsent;\n\n    std::cout << \"Are you an adult? (1 for yes, 0 for no): \";\n    std::cin >> isAdult;\n    \n    if (!isAdult) {\n        std::cout << \"Do you have parental consent? (1 for yes, 0 for no): \";\n        std::cin >> hasParentalConsent;\n    }\n\n    if (isAdult || hasParentalConsent) {\n        std::cout << \"Access granted.\" << std::endl;\n    } else {\n        std::cout << \"Access denied.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a condition to execute a task if a variable is neither zero nor negative using logical NOT.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    int variable = 5; // Example value\n\n    if (!(variable <= 0)) {\n        std::cout << \"Variable is positive and non-zero.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Compose a method to verify if a system is both up-to-date and functioning using logical AND.",
    "code": "```cpp\n#include <iostream>\n\nclass SystemStatusChecker {\npublic:\n    bool isSystemUpToDate() {\n        // Placeholder for actual up-to-date check\n        return true;\n    }\n\n    bool isSystemFunctioning() {\n        // Placeholder for actual functioning check\n        return true;\n    }\n\n    bool isSystemUpToDateAndFunctioning() {\n        return isSystemUpToDate() && isSystemFunctioning();\n    }\n};\n\nint main() {\n    SystemStatusChecker checker;\n    if (checker.isSystemUpToDateAndFunctioning()) {\n        std::cout << \"The system is both up-to-date and functioning.\" << std::endl;\n    } else {\n        std::cout << \"The system is not up-to-date or not functioning.\" << std::endl;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that returns true if a list contains neither duplicates nor null values using logical NOT.",
    "code": "```cpp\n#include <vector>\n#include <unordered_set>\n\nbool noDuplicatesOrNulls(const std::vector<int*>& list) {\n    std::unordered_set<int*> seen;\n    for (int* value : list) {\n        if (!value || !seen.insert(value).second) {\n            return false;\n        }\n    }\n    return true;\n}\n```"
  },
  {
    "task": "Create a script to perform an action if a temperature is either too high or too low using logical OR.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    int temperature = 45; // Example temperature\n    int lowThreshold = 10;\n    int highThreshold = 30;\n\n    if (temperature < lowThreshold || temperature > highThreshold) {\n        std::cout << \"Warning: Temperature is out of range!\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a feature to toggle an option if a setting is not enabled using logical NOT.",
    "code": "```cpp\n#include <iostream>\n\nclass FeatureToggle {\npublic:\n    FeatureToggle() : optionEnabled(false), settingEnabled(false) {}\n\n    void toggleOption() {\n        if (!settingEnabled) {\n            optionEnabled = !optionEnabled;\n        }\n    }\n\n    void setSettingEnabled(bool isEnabled) {\n        settingEnabled = isEnabled;\n    }\n\n    bool isOptionEnabled() const {\n        return optionEnabled;\n    }\n\nprivate:\n    bool optionEnabled;\n    bool settingEnabled;\n};\n\nint main() {\n    FeatureToggle feature;\n    feature.setSettingEnabled(false);\n    feature.toggleOption();\n    std::cout << \"Option enabled: \" << std::boolalpha << feature.isOptionEnabled() << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a check to ensure a username is both available and meets length requirements using logical AND.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n#include <unordered_set>\n\nbool isUsernameValid(const std::string& username, const std::unordered_set<std::string>& takenUsernames, int minLength, int maxLength) {\n    return (takenUsernames.find(username) == takenUsernames.end()) && \n           (username.length() >= minLength && username.length() <= maxLength);\n}\n\nint main() {\n    std::unordered_set<std::string> takenUsernames = {\"user1\", \"admin\", \"guest\"};\n    std::string username;\n    int minLength = 5;\n    int maxLength = 15;\n\n    std::cout << \"Enter a username: \";\n    std::cin >> username;\n\n    if (isUsernameValid(username, takenUsernames, minLength, maxLength)) {\n        std::cout << \"Username is available and meets length requirements.\" << std::endl;\n    } else {\n        std::cout << \"Username is either taken or does not meet length requirements.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function that returns true if a number is neither too large nor too small using logical NOT.",
    "code": "```cpp\n#include <iostream>\n\nbool isNeitherTooLargeNorTooSmall(int number) {\n    return !(number > 100 || number < 10);\n}\n\nint main() {\n    std::cout << std::boolalpha; // To print 'true' or 'false' instead of 1 or 0\n    std::cout << isNeitherTooLargeNorTooSmall(50) << std::endl; // true\n    std::cout << isNeitherTooLargeNorTooSmall(5) << std::endl;  // false\n    std::cout << isNeitherTooLargeNorTooSmall(150) << std::endl; // false\n    return 0;\n}\n```"
  },
  {
    "task": "Write a conditional to print a warning if a disk is either full or nearly full using logical OR.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    bool isFull = true;      // Example condition for disk being full\n    bool isNearlyFull = true; // Example condition for disk being nearly full\n\n    if (isFull || isNearlyFull) {\n        std::cout << \"Warning: Disk is full or nearly full.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a routine to validate that two dates are both within a valid range using logical AND.",
    "code": "```cpp\n#include <iostream>\n\nbool isValidDate(int day, int month, int year) {\n    if (year < 1900 || year > 2100) return false;\n    if (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31) return false;\n    \n    // Check months with only 30 days\n    if ((month == 4 || month == 6 || month == 9 || month == 11) && day > 30) return false;\n    \n    // Check February for leap and non-leap years\n    if (month == 2) {\n        bool isLeapYear = (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);\n        if (isLeapYear && day > 29) return false;\n        if (!isLeapYear && day > 28) return false;\n    }\n    \n    return true;\n}\n\nbool areBothDatesValid(int day1, int month1, int year1, int day2, int month2, int year2) {\n    return isValidDate(day1, month1, year1) && isValidDate(day2, month2, year2);\n}\n\nint main() {\n    int day1 = 15, month1 = 8, year1 = 2021;\n    int day2 = 29, month2 = 2, year2 = 2024;\n    \n    if (areBothDatesValid(day1, month1, year1, day2, month2, year2)) {\n        std::cout << \"Both dates are valid.\" << std::endl;\n    } else {\n        std::cout << \"One or both dates are invalid.\" << std::endl;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Compose a function to decide if a person is either a minor or a senior using logical OR.",
    "code": "```cpp\n#include <iostream>\n\nbool isMinorOrSenior(int age) {\n    return (age < 18) || (age >= 65);\n}\n\nint main() {\n    int age;\n    std::cout << \"Enter age: \";\n    std::cin >> age;\n\n    if (isMinorOrSenior(age)) {\n        std::cout << \"The person is either a minor or a senior.\" << std::endl;\n    } else {\n        std::cout << \"The person is neither a minor nor a senior.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a script to execute a task if a condition is not met using logical NOT.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    bool conditionMet = false;\n\n    if (!conditionMet) {\n        std::cout << \"Condition not met, executing the task.\" << std::endl;\n        // Execute the task\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a program to verify if a process is neither running nor scheduled using logical NOT.",
    "code": "```cpp\n#include <iostream>\n\nbool isRunning = false;\nbool isScheduled = false;\n\nint main() {\n    if (!isRunning && !isScheduled) {\n        std::cout << \"The process is neither running nor scheduled.\" << std::endl;\n    } else {\n        std::cout << \"The process is either running or scheduled.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a feature that confirms a file is both accessible and not locked using logical AND.",
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <sys/stat.h>\n\nbool isFileAccessibleAndNotLocked(const std::string& filePath) {\n    struct stat buffer;\n    bool fileExists = (stat(filePath.c_str(), &buffer) == 0);\n    bool isReadable = std::ifstream(filePath).good();\n    bool isWritable = (access(filePath.c_str(), W_OK) == 0);\n\n    return fileExists && isReadable && isWritable;\n}\n\nint main() {\n    std::string filePath = \"example.txt\";\n    if (isFileAccessibleAndNotLocked(filePath)) {\n        std::cout << \"File is accessible and not locked.\" << std::endl;\n    } else {\n        std::cout << \"File is not accessible or it is locked.\" << std::endl;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Write a script to check if a device is either offline or in maintenance mode using logical OR.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    bool isOffline = true; // Example status\n    bool isInMaintenance = false; // Example status\n\n    if (isOffline || isInMaintenance) {\n        std::cout << \"The device is either offline or in maintenance mode.\" << std::endl;\n    } else {\n        std::cout << \"The device is online and not in maintenance mode.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a function to ensure a password is both complex and unique using logical AND.",
    "code": "```cpp\n#include <iostream>\n#include <unordered_set>\n#include <string>\n\nstd::unordered_set<std::string> usedPasswords;\n\nbool isComplex(const std::string& password) {\n    bool hasUpper = false, hasLower = false, hasDigit = false, hasSpecial = false;\n    for (char ch : password) {\n        if (isupper(ch)) hasUpper = true;\n        if (islower(ch)) hasLower = true;\n        if (isdigit(ch)) hasDigit = true;\n        if (ispunct(ch)) hasSpecial = true;\n    }\n    return hasUpper && hasLower && hasDigit && hasSpecial;\n}\n\nbool isUnique(const std::string& password) {\n    return usedPasswords.find(password) == usedPasswords.end();\n}\n\nbool isPasswordValid(const std::string& password) {\n    return isComplex(password) && isUnique(password);\n}\n\nvoid addPassword(const std::string& password) {\n    if (isPasswordValid(password)) {\n        usedPasswords.insert(password);\n        std::cout << \"Password is valid and added.\\n\";\n    } else {\n        std::cout << \"Password is invalid or not unique.\\n\";\n    }\n}\n\nint main() {\n    addPassword(\"Abc123!@#\");\n    addPassword(\"Abc123!@#\"); // Duplicate\n    addPassword(\"abc123\");    // Not complex\n    return 0;\n}\n```"
  },
  {
    "task": "Design a validation that ensures a value is not negative using logical NOT.",
    "code": "```cpp\n#include <iostream>\n\nbool isNonNegative(int value) {\n    return !(value < 0);\n}\n\nint main() {\n    int value = -5;\n    if (isNonNegative(value)) {\n        std::cout << \"The value is non-negative.\" << std::endl;\n    } else {\n        std::cout << \"The value is negative.\" << std::endl;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a check to see if a user has either exceeded their quota or is nearing it using logical OR.",
    "code": "```cpp\n#include <iostream>\n\nbool checkQuotaStatus(int usedQuota, int totalQuota, int nearingThreshold) {\n    return usedQuota >= totalQuota || usedQuota >= nearingThreshold;\n}\n\nint main() {\n    int usedQuota = 80;\n    int totalQuota = 100;\n    int nearingThreshold = 90;\n\n    if (checkQuotaStatus(usedQuota, totalQuota, nearingThreshold)) {\n        std::cout << \"User has either exceeded or is nearing their quota.\" << std::endl;\n    } else {\n        std::cout << \"User is within the safe quota limit.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a routine to confirm that a user is both authenticated and authorized using logical AND.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nbool isAuthenticated(const std::string& username, const std::string& password) {\n    // Dummy check for authentication\n    return username == \"user\" && password == \"pass\";\n}\n\nbool isAuthorized(const std::string& role) {\n    // Dummy check for authorization\n    return role == \"admin\";\n}\n\nbool isUserAuthenticatedAndAuthorized(const std::string& username, const std::string& password, const std::string& role) {\n    return isAuthenticated(username, password) && isAuthorized(role);\n}\n\nint main() {\n    std::string username = \"user\";\n    std::string password = \"pass\";\n    std::string role = \"admin\";\n\n    if (isUserAuthenticatedAndAuthorized(username, password, role)) {\n        std::cout << \"User is authenticated and authorized.\" << std::endl;\n    } else {\n        std::cout << \"User is not authenticated or not authorized.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Compose a function to determine if a light is either on or blinking using logical OR.",
    "code": "```cpp\n#include <iostream>\n\nbool isLightOnOrBlinking(bool isOn, bool isBlinking) {\n    return isOn || isBlinking;\n}\n\nint main() {\n    bool lightOn = true;\n    bool lightBlinking = false;\n\n    if (isLightOnOrBlinking(lightOn, lightBlinking)) {\n        std::cout << \"The light is either on or blinking.\" << std::endl;\n    } else {\n        std::cout << \"The light is off and not blinking.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a script that executes a command if a network connection is neither weak nor unstable using logical NOT.",
    "code": "```cpp\n#include <iostream>\n#include <cstdlib>\n\nbool isNetworkWeak() {\n    // Simulate a check for weak network\n    return false; // Example: network is not weak\n}\n\nbool isNetworkUnstable() {\n    // Simulate a check for unstable network\n    return false; // Example: network is not unstable\n}\n\nint main() {\n    if (!isNetworkWeak() && !isNetworkUnstable()) {\n        system(\"echo Network is strong and stable. Executing command...\");\n        // Here you would replace the echo command with the actual command you want to execute\n    } else {\n        std::cout << \"Network is either weak or unstable. Command not executed.\" << std::endl;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Create a program to verify that a sensor is both calibrated and active using logical AND.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    bool isCalibrated = true; // Example value; in a real scenario, this would be determined by the program\n    bool isActive = true;     // Example value; in a real scenario, this would be determined by the program\n\n    if (isCalibrated && isActive) {\n        std::cout << \"Sensor is calibrated and active.\" << std::endl;\n    } else {\n        std::cout << \"Sensor is not properly calibrated or active.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a feature to alert if a process is either overdue or incomplete using logical OR.",
    "code": "```cpp\n#include <iostream>\n\nbool isOverdue(bool overdue) {\n    return overdue;\n}\n\nbool isIncomplete(bool incomplete) {\n    return incomplete;\n}\n\nvoid checkProcessStatus(bool overdue, bool incomplete) {\n    if (isOverdue(overdue) || isIncomplete(incomplete)) {\n        std::cout << \"Alert: Process is either overdue or incomplete!\" << std::endl;\n    } else {\n        std::cout << \"Process is on track.\" << std::endl;\n    }\n}\n\nint main() {\n    bool overdue = true;      // Example value\n    bool incomplete = false;  // Example value\n\n    checkProcessStatus(overdue, incomplete);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a script to check if a person is neither a guest nor a temporary user using logical NOT.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nint main() {\n    std::string userType;\n    std::cout << \"Enter user type: \";\n    std::cin >> userType;\n\n    bool isGuest = userType == \"guest\";\n    bool isTemporary = userType == \"temporary\";\n\n    if (!(isGuest || isTemporary)) {\n        std::cout << \"The person is neither a guest nor a temporary user.\" << std::endl;\n    } else {\n        std::cout << \"The person is either a guest or a temporary user.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function to toggle a light if a switch is not pressed using logical NOT.",
    "code": "```cpp\n#include <iostream>\n\nbool toggleLight(bool isSwitchPressed, bool isLightOn) {\n    if (!isSwitchPressed) {\n        return !isLightOn;\n    }\n    return isLightOn;\n}\n\nint main() {\n    bool isSwitchPressed = false;\n    bool isLightOn = false;\n\n    isLightOn = toggleLight(isSwitchPressed, isLightOn);\n    std::cout << \"Light is \" << (isLightOn ? \"On\" : \"Off\") << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a conditional to trigger an event if a file is either corrupted or missing using logical OR.",
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n\nbool isFileCorrupted(const std::string& filename) {\n    // Dummy implementation for demonstration\n    return false;\n}\n\nint main() {\n    std::string filename = \"example.txt\";\n    std::ifstream file(filename);\n\n    if (!file || isFileCorrupted(filename)) {\n        std::cout << \"File is either missing or corrupted. Triggering event.\" << std::endl;\n    } else {\n        std::cout << \"File is present and not corrupted.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a routine that verifies if a vehicle is both insured and registered using logical AND.",
    "code": "```cpp\n#include <iostream>\n\nbool isVehicleInsuredAndRegistered(bool isInsured, bool isRegistered) {\n    return isInsured && isRegistered;\n}\n\nint main() {\n    bool insured = true;\n    bool registered = true;\n\n    if (isVehicleInsuredAndRegistered(insured, registered)) {\n        std::cout << \"The vehicle is both insured and registered.\" << std::endl;\n    } else {\n        std::cout << \"The vehicle is either not insured or not registered.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Compose a method to check if an account is either overdrawn or flagged using logical OR.",
    "code": "```cpp\n#include <iostream>\n\nclass Account {\npublic:\n    Account(bool isOverdrawn, bool isFlagged) \n        : overdrawn(isOverdrawn), flagged(isFlagged) {}\n\n    bool isOverdrawnOrFlagged() const {\n        return overdrawn || flagged;\n    }\n\nprivate:\n    bool overdrawn;\n    bool flagged;\n};\n\nint main() {\n    Account account1(true, false);\n    Account account2(false, false);\n\n    std::cout << \"Account 1: \" << (account1.isOverdrawnOrFlagged() ? \"Yes\" : \"No\") << std::endl;\n    std::cout << \"Account 2: \" << (account2.isOverdrawnOrFlagged() ? \"Yes\" : \"No\") << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a program to ensure an application is both installed and updated using logical AND.",
    "code": "```cpp\n#include <iostream>\n\nbool isInstalled() {\n    // Simulate checking if the application is installed\n    return true; // Assume the application is installed\n}\n\nbool isUpdated() {\n    // Simulate checking if the application is updated\n    return true; // Assume the application is updated\n}\n\nint main() {\n    if (isInstalled() && isUpdated()) {\n        std::cout << \"The application is both installed and updated.\" << std::endl;\n    } else {\n        std::cout << \"The application is either not installed or not updated.\" << std::endl;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a function that returns true if a number is neither divisible by 3 nor 5 using logical NOT.",
    "code": "```cpp\n#include <iostream>\n\nbool isNeitherDivisibleBy3Nor5(int number) {\n    return !(number % 3 == 0 || number % 5 == 0);\n}\n\nint main() {\n    int number = 14; // Example usage\n    if (isNeitherDivisibleBy3Nor5(number)) {\n        std::cout << \"The number is neither divisible by 3 nor 5.\" << std::endl;\n    } else {\n        std::cout << \"The number is divisible by 3 or 5.\" << std::endl;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a script that alerts if a device is either overheating or underperforming using logical OR.",
    "code": "```cpp\n#include <iostream>\n\nbool isOverheating(double temperature) {\n    const double maxTemperature = 75.0;  // Example threshold\n    return temperature > maxTemperature;\n}\n\nbool isUnderperforming(double performance) {\n    const double minPerformance = 50.0;  // Example threshold\n    return performance < minPerformance;\n}\n\nvoid alertDeviceStatus(double temperature, double performance) {\n    if (isOverheating(temperature) || isUnderperforming(performance)) {\n        std::cout << \"Alert: Device is either overheating or underperforming!\" << std::endl;\n    } else {\n        std::cout << \"Device is operating normally.\" << std::endl;\n    }\n}\n\nint main() {\n    double temperature = 80.0;   // Example temperature\n    double performance = 45.0;   // Example performance\n\n    alertDeviceStatus(temperature, performance);\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function to validate that a directory is both writable and not full using logical AND.",
    "code": "```cpp\n#include <sys/statvfs.h>\n#include <unistd.h>\n\nbool isDirectoryWritableAndNotFull(const std::string& path) {\n    struct statvfs buf;\n    \n    // Check if the directory is writable\n    bool isWritable = (access(path.c_str(), W_OK) == 0);\n    \n    // Check if the directory is not full\n    bool isNotFull = (statvfs(path.c_str(), &buf) == 0 && buf.f_bavail > 0);\n    \n    // Return true if both conditions are met\n    return isWritable && isNotFull;\n}\n```"
  },
  {
    "task": "Create a conditional statement that executes if a button is not clicked using logical NOT.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    bool buttonClicked = false;\n\n    if (!buttonClicked) {\n        std::cout << \"Button has not been clicked.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a check to ensure a transaction is both verified and complete using logical AND.",
    "code": "```cpp\n#include <iostream>\n\nbool isTransactionVerified(bool verified, bool complete) {\n    return verified && complete;\n}\n\nint main() {\n    bool verified = true; // Example value, assume this comes from some prior logic\n    bool complete = true; // Example value, assume this comes from some prior logic\n\n    if (isTransactionVerified(verified, complete)) {\n        std::cout << \"Transaction is verified and complete.\" << std::endl;\n    } else {\n        std::cout << \"Transaction is not fully verified or complete.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a routine to determine if a string is either uppercase or lowercase using logical OR.",
    "code": "```cpp\n#include <iostream>\n#include <cctype>\n\nbool isUppercaseOrLowercase(const std::string& str) {\n    bool isUppercase = true;\n    bool isLowercase = true;\n    \n    for (char ch : str) {\n        if (!std::isupper(ch)) {\n            isUppercase = false;\n        }\n        if (!std::islower(ch)) {\n            isLowercase = false;\n        }\n    }\n    return isUppercase || isLowercase;\n}\n\nint main() {\n    std::string input;\n    std::cout << \"Enter a string: \";\n    std::cin >> input;\n\n    if (isUppercaseOrLowercase(input)) {\n        std::cout << \"The string is either all uppercase or all lowercase.\" << std::endl;\n    } else {\n        std::cout << \"The string is neither all uppercase nor all lowercase.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a feature to execute a task if a variable is neither null nor undefined using logical NOT.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    int* ptr = nullptr; // Example variable\n\n    if (ptr != nullptr) {\n        // Execute task\n        std::cout << \"Variable is neither null nor undefined.\" << std::endl;\n    } else {\n        std::cout << \"Variable is null or undefined.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Compose a function to return true if a date is either today or tomorrow using logical OR.",
    "code": "```cpp\n#include <iostream>\n#include <ctime>\n\nbool isTodayOrTomorrow(int year, int month, int day) {\n    std::time_t t = std::time(nullptr);\n    std::tm* now = std::localtime(&t);\n    \n    bool isToday = (year == (now->tm_year + 1900) && month == (now->tm_mon + 1) && day == now->tm_mday);\n    \n    std::tm tomorrow = *now;\n    tomorrow.tm_mday += 1;\n    std::mktime(&tomorrow);  // Normalize the date\n    \n    bool isTomorrow = (year == (tomorrow.tm_year + 1900) && month == (tomorrow.tm_mon + 1) && day == tomorrow.tm_mday);\n    \n    return isToday || isTomorrow;\n}\n\nint main() {\n    int year, month, day;\n    std::cout << \"Enter year: \";\n    std::cin >> year;\n    std::cout << \"Enter month: \";\n    std::cin >> month;\n    std::cout << \"Enter day: \";\n    std::cin >> day;\n    \n    if (isTodayOrTomorrow(year, month, day)) {\n        std::cout << \"The date is today or tomorrow.\\n\";\n    } else {\n        std::cout << \"The date is neither today nor tomorrow.\\n\";\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Write a script to confirm that a system is both running and not in maintenance mode using logical AND.",
    "code": "```cpp\n#include <iostream>\n\nbool isSystemRunning() {\n    // Placeholder function to check if the system is running\n    return true; // Assume it returns true if the system is running\n}\n\nbool isInMaintenanceMode() {\n    // Placeholder function to check if the system is in maintenance mode\n    return false; // Assume it returns true if the system is in maintenance mode\n}\n\nint main() {\n    if (isSystemRunning() && !isInMaintenanceMode()) {\n        std::cout << \"The system is running and not in maintenance mode.\" << std::endl;\n    } else {\n        std::cout << \"The system is either not running or it is in maintenance mode.\" << std::endl;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Create a program to verify if a text field is neither empty nor exceeds character limit using logical NOT.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nbool isValidInput(const std::string &input, size_t maxLength) {\n    return !(input.empty() || input.size() > maxLength);\n}\n\nint main() {\n    std::string text;\n    size_t maxCharLimit = 100;\n\n    std::cout << \"Enter your text: \";\n    std::getline(std::cin, text);\n\n    if (isValidInput(text, maxCharLimit)) {\n        std::cout << \"Input is valid.\" << std::endl;\n    } else {\n        std::cout << \"Input is invalid.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a feature that checks if a user has either admin privileges or editor rights using logical OR.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nbool hasAccess(bool isAdmin, bool isEditor) {\n    return isAdmin || isEditor;\n}\n\nint main() {\n    bool isAdmin = false;\n    bool isEditor = true;\n\n    if (hasAccess(isAdmin, isEditor)) {\n        std::cout << \"User has access.\" << std::endl;\n    } else {\n        std::cout << \"User does not have access.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a script to ensure a file is both present and not empty using logical AND.",
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n\nbool isFilePresentAndNotEmpty(const std::string& filename) {\n    std::ifstream file(filename);\n    return file.good() && file.peek() != std::ifstream::traits_type::eof();\n}\n\nint main() {\n    std::string filename = \"example.txt\";\n    if (isFilePresentAndNotEmpty(filename)) {\n        std::cout << \"The file is present and not empty.\" << std::endl;\n    } else {\n        std::cout << \"The file is either not present or empty.\" << std::endl;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a condition to execute a command if a setting is not active using logical NOT.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    bool isSettingActive = false;\n\n    if (!isSettingActive) {\n        std::cout << \"The setting is not active. Executing command.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Compose a method to decide if a person is either eligible or exempt using logical OR.",
    "code": "```cpp\n#include <iostream>\n\nbool isEligibleOrExempt(bool isEligible, bool isExempt) {\n    return isEligible || isExempt;\n}\n\nint main() {\n    bool eligible = true;  // Example value\n    bool exempt = false;   // Example value\n\n    if (isEligibleOrExempt(eligible, exempt)) {\n        std::cout << \"The person is either eligible or exempt.\" << std::endl;\n    } else {\n        std::cout << \"The person is neither eligible nor exempt.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that returns true if a number is both greater than zero and less than ten using logical AND.",
    "code": "```cpp\n#include <iostream>\n\nbool isBetweenZeroAndTen(int number) {\n    return number > 0 && number < 10;\n}\n\nint main() {\n    int number = 5;\n    std::cout << std::boolalpha << isBetweenZeroAndTen(number) << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Create a loop to continue as long as a condition is either true or false using logical OR.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    bool condition1 = true; // Example condition\n    bool condition2 = false; // Example condition\n\n    while (condition1 || condition2) {\n        // Perform some operations\n        std::cout << \"Loop is running.\" << std::endl;\n\n        // Update conditions to eventually exit the loop\n        condition1 = false;\n        condition2 = false;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a program to verify if an account is neither inactive nor suspended using logical NOT.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    bool isInactive = false;\n    bool isSuspended = false;\n\n    if (!(isInactive || isSuspended)) {\n        std::cout << \"Account is active and not suspended.\" << std::endl;\n    } else {\n        std::cout << \"Account is either inactive or suspended.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a feature to confirm that a document is both signed and verified using logical AND.",
    "code": "```cpp\n#include <iostream>\n\nbool isDocumentSigned() {\n    // Replace with actual logic to determine if the document is signed\n    return true;\n}\n\nbool isDocumentVerified() {\n    // Replace with actual logic to determine if the document is verified\n    return true;\n}\n\nbool isDocumentSignedAndVerified() {\n    return isDocumentSigned() && isDocumentVerified();\n}\n\nint main() {\n    if (isDocumentSignedAndVerified()) {\n        std::cout << \"The document is signed and verified.\" << std::endl;\n    } else {\n        std::cout << \"The document is not fully validated.\" << std::endl;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a script to alert if a network is either congested or down using logical OR.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nbool isNetworkCongested() {\n    // Placeholder for actual congestion check\n    return true; // Assume network is congested for demonstration\n}\n\nbool isNetworkDown() {\n    // Placeholder for actual network status check\n    return false; // Assume network is up for demonstration\n}\n\nint main() {\n    if (isNetworkCongested() || isNetworkDown()) {\n        std::cout << \"Alert: Network is either congested or down!\" << std::endl;\n    } else {\n        std::cout << \"Network is operating normally.\" << std::endl;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function to ensure a list is both sorted and unique using logical AND.",
    "code": "```cpp\n#include <vector>\n#include <algorithm>\n#include <iterator>\n\nstd::vector<int> ensureSortedUnique(const std::vector<int>& input) {\n    std::vector<int> result = input;\n    std::sort(result.begin(), result.end());\n    auto last = std::unique(result.begin(), result.end());\n    result.erase(last, result.end());\n    return result;\n}\n```"
  },
  {
    "task": "Create a conditional statement to execute if a task is not completed using logical NOT.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    bool taskCompleted = false;\n\n    if (!taskCompleted) {\n        std::cout << \"The task is not completed.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a check to determine if a component is either faulty or missing using logical OR.",
    "code": "```cpp\n#include <iostream>\n\nbool isComponentFaulty(bool isFaulty, bool isMissing) {\n    return isFaulty || isMissing;\n}\n\nint main() {\n    bool faulty = true;   // Example value\n    bool missing = false; // Example value\n\n    if (isComponentFaulty(faulty, missing)) {\n        std::cout << \"Component is either faulty or missing.\" << std::endl;\n    } else {\n        std::cout << \"Component is present and not faulty.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a routine to verify if a user is both online and available using logical AND.",
    "code": "```cpp\n#include <iostream>\n\nbool isOnlineAndAvailable(bool isOnline, bool isAvailable) {\n    return isOnline && isAvailable;\n}\n\nint main() {\n    bool onlineStatus = true;  // Assume user is online\n    bool availabilityStatus = true;  // Assume user is available\n\n    if (isOnlineAndAvailable(onlineStatus, availabilityStatus)) {\n        std::cout << \"User is both online and available.\" << std::endl;\n    } else {\n        std::cout << \"User is not both online and available.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a feature to toggle an alert if a condition is not satisfied using logical NOT.",
    "code": "```cpp\n#include <iostream>\n\nbool checkCondition() {\n    // Placeholder for the actual condition logic\n    return false; // Example condition that is not satisfied\n}\n\nint main() {\n    bool alert = false;\n\n    if (!checkCondition()) {\n        alert = !alert; // Toggle the alert\n    }\n\n    if (alert) {\n        std::cout << \"Alert is ON.\" << std::endl;\n    } else {\n        std::cout << \"Alert is OFF.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Compose a function to return true if a transaction is either pending or failed using logical OR.",
    "code": "```cpp\n#include <string>\n\nbool isTransactionPendingOrFailed(const std::string& status) {\n    return (status == \"pending\" || status == \"failed\");\n}\n```"
  },
  {
    "task": "Write a script to ensure a configuration is both correct and active using logical AND.",
    "code": "```cpp\n#include <iostream>\n\nbool isConfigurationCorrect() {\n    // Placeholder for actual logic to check if configuration is correct\n    return true; // Assume configuration is correct for demonstration\n}\n\nbool isConfigurationActive() {\n    // Placeholder for actual logic to check if configuration is active\n    return true; // Assume configuration is active for demonstration\n}\n\nint main() {\n    if (isConfigurationCorrect() && isConfigurationActive()) {\n        std::cout << \"Configuration is both correct and active.\" << std::endl;\n    } else {\n        std::cout << \"Configuration is incorrect or inactive.\" << std::endl;\n    }\n    return 0;\n}\n```"
  }
]