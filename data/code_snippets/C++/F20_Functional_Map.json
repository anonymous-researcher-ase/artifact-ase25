[
  {
    "task": "Convert a list of temperatures from Celsius to Fahrenheit using a map function.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\ndouble celsiusToFahrenheit(double celsius) {\n    return (celsius * 9.0 / 5.0) + 32.0;\n}\n\nint main() {\n    std::vector<double> celsiusTemperatures = {0.0, 20.0, 37.0, 100.0};\n    std::vector<double> fahrenheitTemperatures(celsiusTemperatures.size());\n    \n    std::transform(celsiusTemperatures.begin(), celsiusTemperatures.end(), fahrenheitTemperatures.begin(), celsiusToFahrenheit);\n    \n    for (double temp : fahrenheitTemperatures) {\n        std::cout << temp << \" \";\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Use map to convert a list of lowercase words to uppercase.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nstd::vector<std::string> toUpperCase(const std::vector<std::string>& words) {\n    std::vector<std::string> upperWords(words.size());\n    std::transform(words.begin(), words.end(), upperWords.begin(), [](const std::string& word) {\n        std::string upperWord = word;\n        std::transform(upperWord.begin(), upperWord.end(), upperWord.begin(), ::toupper);\n        return upperWord;\n    });\n    return upperWords;\n}\n\nint main() {\n    std::vector<std::string> words = {\"hello\", \"world\", \"example\"};\n    std::vector<std::string> upperWords = toUpperCase(words);\n\n    for (const auto& word : upperWords) {\n        std::cout << word << \" \";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Apply map to add a prefix to each string in a list of filenames.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nint main() {\n    std::vector<std::string> filenames = {\"file1.txt\", \"file2.txt\", \"file3.txt\"};\n    std::string prefix = \"prefix_\";\n\n    std::transform(filenames.begin(), filenames.end(), filenames.begin(), \n                   [&prefix](const std::string& filename) { return prefix + filename; });\n\n    for (const auto& filename : filenames) {\n        std::cout << filename << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Transform a list of numbers by squaring each element with a map function.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <functional>\n\nint main() {\n    std::vector<int> numbers = {1, 2, 3, 4, 5};\n    std::vector<int> squaredNumbers;\n    std::transform(numbers.begin(), numbers.end(), std::back_inserter(squaredNumbers), [](int n) { return n * n; });\n    \n    for (int n : squaredNumbers) {\n        std::cout << n << \" \";\n    }\n    std::cout << std::endl;\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Convert a list of integers to their string representations using map.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nint main() {\n    std::vector<int> numbers = {1, 2, 3, 4, 5};\n    std::vector<std::string> stringNumbers;\n    \n    std::transform(numbers.begin(), numbers.end(), std::back_inserter(stringNumbers),\n                   [](int num) { return std::to_string(num); });\n    \n    for (const auto& str : stringNumbers) {\n        std::cout << str << \" \";\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Use map to compute the length of each string in a list of sentences.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nint main() {\n    std::vector<std::string> sentences = {\n        \"Hello world\",\n        \"Functional programming is powerful\",\n        \"C++ supports multiple paradigms\"\n    };\n\n    std::vector<size_t> lengths;\n    std::transform(sentences.begin(), sentences.end(), std::back_inserter(lengths),\n                   [](const std::string& s) { return s.length(); });\n\n    for (size_t length : lengths) {\n        std::cout << length << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Apply a discount to a list of prices using a map function.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nint main() {\n    std::vector<double> prices = {100.0, 200.0, 300.0, 400.0};\n    double discount = 0.10; // 10% discount\n\n    std::transform(prices.begin(), prices.end(), prices.begin(), [discount](double price) {\n        return price * (1 - discount);\n    });\n\n    for (double price : prices) {\n        std::cout << price << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Extract the first element from each tuple in a list of tuples with map.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <tuple>\n#include <algorithm>\n\nint main() {\n    std::vector<std::tuple<int, char>> tuples = {{1, 'a'}, {2, 'b'}, {3, 'c'}};\n    std::vector<int> firstElements;\n    \n    std::transform(tuples.begin(), tuples.end(), std::back_inserter(firstElements),\n                   [](const std::tuple<int, char>& t) { return std::get<0>(t); });\n\n    for (int elem : firstElements) {\n        std::cout << elem << \" \";\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Use map to round a list of floating-point numbers to two decimal places.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n\nstd::vector<double> roundToTwoDecimals(const std::vector<double>& numbers) {\n    std::vector<double> roundedNumbers(numbers.size());\n    std::transform(numbers.begin(), numbers.end(), roundedNumbers.begin(), [](double num) {\n        return std::round(num * 100) / 100;\n    });\n    return roundedNumbers;\n}\n\nint main() {\n    std::vector<double> numbers = {3.14159, 2.71828, 1.41421, 1.73205};\n    std::vector<double> roundedNumbers = roundToTwoDecimals(numbers);\n    \n    for (double num : roundedNumbers) {\n        std::cout << num << \" \";\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Capitalize the first letter of each word in a list of names using map.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nstd::string capitalizeFirstLetter(const std::string& name) {\n    if (name.empty()) return name;\n    std::string capitalized = name;\n    capitalized[0] = std::toupper(capitalized[0]);\n    return capitalized;\n}\n\nint main() {\n    std::vector<std::string> names = {\"alice\", \"bob\", \"charlie\"};\n    std::transform(names.begin(), names.end(), names.begin(), capitalizeFirstLetter);\n\n    for (const auto& name : names) {\n        std::cout << name << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Convert a list of JSON strings to corresponding dictionary objects with map.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <nlohmann/json.hpp> // Include the json library\n\nusing json = nlohmann::json;\n\nstd::vector<json> mapJsonStringsToObjects(const std::vector<std::string>& jsonStrings) {\n    std::vector<json> jsonObjects;\n    std::transform(jsonStrings.begin(), jsonStrings.end(), std::back_inserter(jsonObjects),\n                   [](const std::string& jsonString) {\n                       return json::parse(jsonString);\n                   });\n    return jsonObjects;\n}\n\nint main() {\n    std::vector<std::string> jsonStrings = {\"{\\\"key1\\\": \\\"value1\\\"}\", \"{\\\"key2\\\": \\\"value2\\\"}\"};\n    std::vector<json> jsonObjects = mapJsonStringsToObjects(jsonStrings);\n\n    for (const auto& jsonObj : jsonObjects) {\n        std::cout << jsonObj.dump() << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Use map to double the value of each number in a list.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nint main() {\n    std::vector<int> numbers = {1, 2, 3, 4, 5};\n    std::transform(numbers.begin(), numbers.end(), numbers.begin(), [](int x) { return x * 2; });\n\n    for (int num : numbers) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Transform a list of RGB tuples to hexadecimal color codes using map.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\n#include <iomanip>\n#include <algorithm>\n\nstd::string rgbToHex(const std::tuple<int, int, int>& rgb) {\n    std::ostringstream oss;\n    oss << \"#\" << std::hex << std::setw(2) << std::setfill('0') << std::get<0>(rgb)\n        << std::setw(2) << std::setfill('0') << std::get<1>(rgb)\n        << std::setw(2) << std::setfill('0') << std::get<2>(rgb);\n    return oss.str();\n}\n\nint main() {\n    std::vector<std::tuple<int, int, int>> rgbList = {\n        std::make_tuple(255, 99, 71),\n        std::make_tuple(144, 238, 144),\n        std::make_tuple(70, 130, 180)\n    };\n    \n    std::vector<std::string> hexList;\n    std::transform(rgbList.begin(), rgbList.end(), std::back_inserter(hexList), rgbToHex);\n\n    for (const auto& hex : hexList) {\n        std::cout << hex << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Use map to compute the factorial of each number in a list.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <functional>\n\nstd::vector<unsigned long long> computeFactorials(const std::vector<int>& numbers) {\n    std::vector<unsigned long long> results(numbers.size());\n    std::transform(numbers.begin(), numbers.end(), results.begin(), [](int n) {\n        unsigned long long factorial = 1;\n        for (int i = 2; i <= n; ++i) {\n            factorial *= i;\n        }\n        return factorial;\n    });\n    return results;\n}\n\nint main() {\n    std::vector<int> numbers = {1, 2, 3, 4, 5};\n    std::vector<unsigned long long> factorials = computeFactorials(numbers);\n\n    for (auto f : factorials) {\n        std::cout << f << \" \";\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Translate a list of English words to Spanish using a map function.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <unordered_map>\n#include <algorithm>\n\n// Function to map words to their Spanish translation\nstd::vector<std::string> translateToSpanish(const std::vector<std::string>& words) {\n    std::unordered_map<std::string, std::string> dictionary = {\n        {\"hello\", \"hola\"},\n        {\"world\", \"mundo\"},\n        {\"food\", \"comida\"},\n        {\"water\", \"agua\"},\n        {\"friend\", \"amigo\"}\n    };\n\n    std::vector<std::string> translatedWords;\n    std::transform(words.begin(), words.end(), std::back_inserter(translatedWords),\n                   [&dictionary](const std::string& word) {\n                       auto it = dictionary.find(word);\n                       return it != dictionary.end() ? it->second : word;\n                   });\n\n    return translatedWords;\n}\n\nint main() {\n    std::vector<std::string> englishWords = {\"hello\", \"world\", \"food\", \"friend\", \"unknown\"};\n    std::vector<std::string> spanishWords = translateToSpanish(englishWords);\n\n    for (const auto& word : spanishWords) {\n        std::cout << word << \" \";\n    }\n    std::cout << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Apply a map function to format a list of dates from one format to another.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\n#include <iomanip>\n#include <algorithm>\n\nstd::string formatDate(const std::string& date) {\n    std::istringstream ss(date);\n    std::tm tm = {};\n    ss >> std::get_time(&tm, \"%Y-%m-%d\");\n    std::ostringstream os;\n    os << std::put_time(&tm, \"%d/%m/%Y\");\n    return os.str();\n}\n\nint main() {\n    std::vector<std::string> dates = {\"2023-10-14\", \"2023-11-15\", \"2023-12-16\"};\n    std::vector<std::string> formattedDates;\n    \n    std::transform(dates.begin(), dates.end(), std::back_inserter(formattedDates), formatDate);\n    \n    for (const auto& date : formattedDates) {\n        std::cout << date << std::endl;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Use map to check if each number in a list is even, returning a list of booleans.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nstd::vector<bool> mapEvenCheck(const std::vector<int>& numbers) {\n    std::vector<bool> result(numbers.size());\n    std::transform(numbers.begin(), numbers.end(), result.begin(), [](int num) {\n        return num % 2 == 0;\n    });\n    return result;\n}\n\nint main() {\n    std::vector<int> numbers = {1, 2, 3, 4, 5, 6};\n    std::vector<bool> isEven = mapEvenCheck(numbers);\n\n    for (bool even : isEven) {\n        std::cout << std::boolalpha << even << \" \";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Convert a list of binary strings to decimal numbers using map.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nint binaryToDecimal(const std::string &binaryString) {\n    return std::stoi(binaryString, nullptr, 2);\n}\n\nint main() {\n    std::vector<std::string> binaryStrings = {\"1010\", \"1100\", \"1111\"};\n    std::vector<int> decimalNumbers(binaryStrings.size());\n\n    std::transform(binaryStrings.begin(), binaryStrings.end(), decimalNumbers.begin(), binaryToDecimal);\n\n    for (int number : decimalNumbers) {\n        std::cout << number << \" \";\n    }\n    std::cout << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Use map to append a domain name to a list of user names to create email addresses.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nstd::vector<std::string> appendDomain(const std::vector<std::string>& usernames, const std::string& domain) {\n    std::vector<std::string> emails;\n    std::transform(usernames.begin(), usernames.end(), std::back_inserter(emails), [&domain](const std::string& username) {\n        return username + \"@\" + domain;\n    });\n    return emails;\n}\n\nint main() {\n    std::vector<std::string> usernames = {\"alice\", \"bob\", \"charlie\"};\n    std::string domain = \"example.com\";\n    std::vector<std::string> emails = appendDomain(usernames, domain);\n\n    for (const auto& email : emails) {\n        std::cout << email << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Calculate the area of each circle in a list of radii using a map function.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n\nint main() {\n    std::vector<double> radii = {1.0, 2.0, 3.0, 4.0, 5.0};\n    std::vector<double> areas(radii.size());\n\n    std::transform(radii.begin(), radii.end(), areas.begin(), [](double r) {\n        return M_PI * r * r;\n    });\n\n    for (const auto& area : areas) {\n        std::cout << area << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Use map to strip whitespace from the start and end of each string in a list.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cctype>\n#include <functional>\n\nstd::string trim(const std::string& str) {\n    auto start = str.begin();\n    while (start != str.end() && std::isspace(*start)) {\n        start++;\n    }\n    \n    auto end = str.end();\n    do {\n        end--;\n    } while (std::distance(start, end) > 0 && std::isspace(*end));\n    \n    return std::string(start, end + 1);\n}\n\nint main() {\n    std::vector<std::string> strings = {\"  hello  \", \"  world\", \"C++  \"};\n    std::vector<std::string> trimmed(strings.size());\n\n    std::transform(strings.begin(), strings.end(), trimmed.begin(), trim);\n\n    for (const auto& s : trimmed) {\n        std::cout << '\"' << s << '\"' << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Apply map to replace spaces with underscores in a list of file paths.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nstd::string replaceSpaces(const std::string &path) {\n    std::string result = path;\n    std::replace(result.begin(), result.end(), ' ', '_');\n    return result;\n}\n\nint main() {\n    std::vector<std::string> filePaths = {\n        \"file one.txt\",\n        \"folder two/file two.txt\",\n        \"another folder/file three.txt\"\n    };\n\n    std::transform(filePaths.begin(), filePaths.end(), filePaths.begin(), replaceSpaces);\n\n    for (const auto &path : filePaths) {\n        std::cout << path << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Convert a list of mixed-case strings to title case using map.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nstd::string toTitleCase(const std::string &str) {\n    std::string result = str;\n    if (!result.empty()) {\n        result[0] = toupper(result[0]);\n        for (std::size_t i = 1; i < result.length(); ++i) {\n            result[i] = tolower(result[i]);\n        }\n    }\n    return result;\n}\n\nint main() {\n    std::vector<std::string> strings = {\"hello\", \"world\", \"tHis\", \"iS\", \"c++\"};\n    std::vector<std::string> titleCaseStrings(strings.size());\n\n    std::transform(strings.begin(), strings.end(), titleCaseStrings.begin(), toTitleCase);\n\n    for (const auto &str : titleCaseStrings) {\n        std::cout << str << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Use map to filter out only the digits from a list of mixed alphanumeric strings.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cctype>\n\nstd::vector<std::string> filterDigits(const std::vector<std::string>& input) {\n    std::vector<std::string> result;\n    for (const auto& str : input) {\n        std::string digits;\n        std::copy_if(str.begin(), str.end(), std::back_inserter(digits), ::isdigit);\n        result.push_back(digits);\n    }\n    return result;\n}\n\nint main() {\n    std::vector<std::string> mixedStrings = {\"abc123\", \"def456\", \"789ghi\"};\n    std::vector<std::string> digitsOnly = filterDigits(mixedStrings);\n\n    for (const auto& str : digitsOnly) {\n        std::cout << str << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Apply map to convert a list of Unix timestamps to readable date strings.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <ctime>\n#include <algorithm>\n\nstd::string timestampToDateString(time_t timestamp) {\n    char buffer[80];\n    struct tm * timeinfo = localtime(&timestamp);\n    strftime(buffer, sizeof(buffer), \"%Y-%m-%d %H:%M:%S\", timeinfo);\n    return std::string(buffer);\n}\n\nint main() {\n    std::vector<time_t> timestamps = {1609459200, 1612137600, 1614556800};\n    std::vector<std::string> dateStrings(timestamps.size());\n\n    std::transform(timestamps.begin(), timestamps.end(), dateStrings.begin(), timestampToDateString);\n\n    for (const auto & dateString : dateStrings) {\n        std::cout << dateString << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Transform a list of dictionary objects by extracting a specific key's value using map.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <map>\n#include <algorithm>\n\nint main() {\n    std::vector<std::map<std::string, std::string>> dictList = {\n        {{\"key1\", \"value1\"}, {\"key2\", \"value2\"}},\n        {{\"key1\", \"value3\"}, {\"key2\", \"value4\"}},\n        {{\"key1\", \"value5\"}, {\"key2\", \"value6\"}}\n    };\n\n    std::vector<std::string> extractedValues;\n    std::string keyToExtract = \"key1\";\n\n    std::transform(dictList.begin(), dictList.end(), std::back_inserter(extractedValues),\n                   [&keyToExtract](const std::map<std::string, std::string>& dict) {\n                       return dict.at(keyToExtract);\n                   });\n\n    for (const auto &value : extractedValues) {\n        std::cout << value << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Use map to compute the cube of each number in a list.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <iterator>\n\nint main() {\n    std::vector<int> numbers = {1, 2, 3, 4, 5};\n    std::vector<int> cubes(numbers.size());\n\n    std::transform(numbers.begin(), numbers.end(), cubes.begin(), [](int num) {\n        return num * num * num;\n    });\n\n    for (const auto& cube : cubes) {\n        std::cout << cube << \" \";\n    }\n    std::cout << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Translate a list of URLs to their respective domain names using a map function.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <iterator>\n#include <regex>\n\nstd::string extractDomain(const std::string& url) {\n    std::regex domain_regex(R\"(https?://([^/]+)/?)\");\n    std::smatch match;\n    if (std::regex_search(url, match, domain_regex) && match.size() > 1) {\n        return match.str(1);\n    }\n    return \"\";\n}\n\nint main() {\n    std::vector<std::string> urls = {\n        \"https://www.example.com/page1\",\n        \"http://another-example.org\",\n        \"https://subdomain.example.net/page2\"\n    };\n\n    std::vector<std::string> domains;\n    std::transform(urls.begin(), urls.end(), std::back_inserter(domains), extractDomain);\n\n    for (const auto& domain : domains) {\n        std::cout << domain << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Use map to generate HTML list items from a list of text strings.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <functional>\n\nstd::string createListItem(const std::string& text) {\n    return \"<li>\" + text + \"</li>\";\n}\n\nint main() {\n    std::vector<std::string> texts = {\"Item 1\", \"Item 2\", \"Item 3\"};\n    std::vector<std::string> htmlListItems(texts.size());\n\n    std::transform(texts.begin(), texts.end(), htmlListItems.begin(), createListItem);\n\n    for (const auto& item : htmlListItems) {\n        std::cout << item << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Convert a list of polar coordinates to Cartesian coordinates using map.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <cmath>\n#include <utility>\n#include <algorithm>\n\nstd::pair<double, double> polarToCartesian(const std::pair<double, double>& polar) {\n    double r = polar.first;\n    double theta = polar.second;\n    return {r * std::cos(theta), r * std::sin(theta)};\n}\n\nint main() {\n    std::vector<std::pair<double, double>> polarCoordinates = {{1, 0}, {1, M_PI/2}, {1, M_PI}, {1, 3*M_PI/2}};\n    std::vector<std::pair<double, double>> cartesianCoordinates;\n\n    std::transform(polarCoordinates.begin(), polarCoordinates.end(), std::back_inserter(cartesianCoordinates), polarToCartesian);\n\n    for (const auto& cartesian : cartesianCoordinates) {\n        std::cout << \"(\" << cartesian.first << \", \" << cartesian.second << \")\\n\";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Use map to decode a list of Base64 encoded strings.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <iterator>\n#include <cstdint>\n#include <sstream>\n#include <iomanip>\n#include <utility>\n\nstatic const std::string base64_chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\nstd::string base64_decode(const std::string &encoded_string) {\n    std::string decoded_string;\n    std::vector<int> char_map(256, -1);\n    for (int i = 0; i < 64; i++) {\n        char_map[base64_chars[i]] = i;\n    }\n\n    int val = 0, valb = -8;\n    for (unsigned char c : encoded_string) {\n        if (char_map[c] == -1) break;\n        val = (val << 6) + char_map[c];\n        valb += 6;\n        if (valb >= 0) {\n            decoded_string.push_back(char((val >> valb) & 0xFF));\n            valb -= 8;\n        }\n    }\n    return decoded_string;\n}\n\nint main() {\n    std::vector<std::string> encoded_strings = {\n        \"SGVsbG8gV29ybGQ=\", \"Q29kZSBFeGFtcGxl\", \"Q29tcHV0ZXI=\" \n    };\n\n    std::vector<std::string> decoded_strings;\n    std::transform(encoded_strings.begin(), encoded_strings.end(), std::back_inserter(decoded_strings), base64_decode);\n\n    for (const auto &str : decoded_strings) {\n        std::cout << str << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Convert a list of English sentences to Pig Latin using a map function.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <sstream>\n\nstd::string toPigLatin(const std::string& sentence) {\n    std::istringstream iss(sentence);\n    std::ostringstream oss;\n    std::string word;\n    while (iss >> word) {\n        if (std::isalpha(word[0])) {\n            char firstLetter = word[0];\n            word.erase(word.begin());\n            word += firstLetter;\n            word += \"ay\";\n        }\n        oss << word << \" \";\n    }\n    std::string result = oss.str();\n    if (!result.empty()) {\n        result.pop_back(); // Remove the trailing space\n    }\n    return result;\n}\n\nstd::vector<std::string> mapToPigLatin(const std::vector<std::string>& sentences) {\n    std::vector<std::string> pigLatinSentences;\n    std::transform(sentences.begin(), sentences.end(), std::back_inserter(pigLatinSentences), toPigLatin);\n    return pigLatinSentences;\n}\n\nint main() {\n    std::vector<std::string> sentences = {\n        \"hello world\",\n        \"this is a test\",\n        \"functional map in c plus plus\"\n    };\n\n    std::vector<std::string> pigLatinSentences = mapToPigLatin(sentences);\n\n    for (const auto& sentence : pigLatinSentences) {\n        std::cout << sentence << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Use map to anonymize a list of email addresses by masking them.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nstd::string maskEmail(const std::string& email) {\n    auto atPos = email.find('@');\n    if (atPos == std::string::npos) return email;\n    return email.substr(0, 1) + \"*****\" + email.substr(atPos - 1);\n}\n\nint main() {\n    std::vector<std::string> emails = {\n        \"example1@example.com\",\n        \"user2@domain.com\",\n        \"test3@test.com\"\n    };\n\n    std::vector<std::string> maskedEmails;\n    std::transform(emails.begin(), emails.end(), std::back_inserter(maskedEmails), maskEmail);\n\n    for (const auto& email : maskedEmails) {\n        std::cout << email << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Apply map to reverse each string in a list of words.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <string>\n\nstd::vector<std::string> reverseWords(const std::vector<std::string>& words) {\n    std::vector<std::string> reversedWords;\n    std::transform(words.begin(), words.end(), std::back_inserter(reversedWords), [](const std::string& word) {\n        std::string reversedWord(word.rbegin(), word.rend());\n        return reversedWord;\n    });\n    return reversedWords;\n}\n\nint main() {\n    std::vector<std::string> words = {\"hello\", \"world\", \"example\"};\n    std::vector<std::string> reversed = reverseWords(words);\n\n    for (const auto& word : reversed) {\n        std::cout << word << \" \";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Convert a list of hexadecimal color codes to RGB tuples using map.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\n#include <iomanip>\n#include <tuple>\n\nstd::tuple<int, int, int> hexToRGB(const std::string& hex) {\n    int r, g, b;\n    std::stringstream ss;\n    ss << std::hex << hex.substr(1);\n    ss >> std::setw(2) >> r >> std::setw(2) >> g >> std::setw(2) >> b;\n    return std::make_tuple(r, g, b);\n}\n\nint main() {\n    std::vector<std::string> hexColors = {\"#FF5733\", \"#33FF57\", \"#3357FF\"};\n    std::vector<std::tuple<int, int, int>> rgbColors;\n\n    std::transform(hexColors.begin(), hexColors.end(), std::back_inserter(rgbColors), hexToRGB);\n\n    for (const auto& color : rgbColors) {\n        std::cout << \"RGB(\" << std::get<0>(color) << \", \" << std::get<1>(color) << \", \" << std::get<2>(color) << \")\\n\";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Use map to increment each integer in a list by a constant value.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <functional>\n\nint main() {\n    std::vector<int> numbers = {1, 2, 3, 4, 5};\n    int increment_value = 1;\n    \n    std::transform(numbers.begin(), numbers.end(), numbers.begin(),\n                   std::bind(std::plus<int>(), std::placeholders::_1, increment_value));\n    \n    for (int number : numbers) {\n        std::cout << number << \" \";\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Calculate the square root of each number in a list using a map function.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <cmath>\n#include <algorithm>\n\nint main() {\n    std::vector<double> numbers = {1.0, 4.0, 9.0, 16.0, 25.0};\n    std::vector<double> results(numbers.size());\n\n    std::transform(numbers.begin(), numbers.end(), results.begin(), [](double num) {\n        return std::sqrt(num);\n    });\n\n    for (double result : results) {\n        std::cout << result << \" \";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Use map to convert a list of currency amounts from dollars to euros.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nint main() {\n    std::vector<double> dollars = {100.0, 250.5, 85.75, 300.0};\n    double exchangeRate = 0.85; // Example exchange rate from dollars to euros\n\n    std::vector<double> euros(dollars.size());\n    std::transform(dollars.begin(), dollars.end(), euros.begin(),\n                   [exchangeRate](double amount) { return amount * exchangeRate; });\n\n    for (double euro : euros) {\n        std::cout << euro << \" \";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Extract the domain from each email address in a list using map.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nstd::string extractDomain(const std::string& email) {\n    auto atPos = email.find('@');\n    if (atPos != std::string::npos) {\n        return email.substr(atPos + 1);\n    }\n    return \"\";\n}\n\nint main() {\n    std::vector<std::string> emails = {\"alice@example.com\", \"bob@test.org\", \"charlie@domain.net\"};\n    std::vector<std::string> domains(emails.size());\n\n    std::transform(emails.begin(), emails.end(), domains.begin(), extractDomain);\n\n    for (const auto& domain : domains) {\n        std::cout << domain << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Use map to serialize a list of objects into JSON strings.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\n#include <algorithm>\n#include <nlohmann/json.hpp> // Include the JSON library, requires nlohmann/json\n\n// Example object class\nclass MyObject {\npublic:\n    int id;\n    std::string name;\n\n    MyObject(int id, const std::string& name) : id(id), name(name) {}\n\n    // Convert object to JSON\n    nlohmann::json to_json() const {\n        nlohmann::json j;\n        j[\"id\"] = id;\n        j[\"name\"] = name;\n        return j;\n    }\n};\n\n// Function to serialize a list of objects into JSON strings\nstd::vector<std::string> serializeObjectsToJson(const std::vector<MyObject>& objects) {\n    std::vector<std::string> jsonStrings;\n    std::transform(objects.begin(), objects.end(), std::back_inserter(jsonStrings),\n                   [](const MyObject& obj) { return obj.to_json().dump(); });\n    return jsonStrings;\n}\n\nint main() {\n    std::vector<MyObject> objects = { MyObject(1, \"Alice\"), MyObject(2, \"Bob\") };\n    std::vector<std::string> jsonStrings = serializeObjectsToJson(objects);\n\n    for (const auto& jsonStr : jsonStrings) {\n        std::cout << jsonStr << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Transform a list of file sizes from bytes to kilobytes using map.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nint main() {\n    std::vector<int> fileSizesInBytes = {1024, 2048, 3072, 4096, 5120};\n    std::vector<double> fileSizesInKilobytes;\n\n    std::transform(fileSizesInBytes.begin(), fileSizesInBytes.end(), std::back_inserter(fileSizesInKilobytes),\n                   [](int sizeInBytes) { return sizeInBytes / 1024.0; });\n\n    for (double sizeInKb : fileSizesInKilobytes) {\n        std::cout << sizeInKb << \" KB\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Use map to append a suffix to each string in a list of identifiers.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nstd::vector<std::string> appendSuffix(const std::vector<std::string>& identifiers, const std::string& suffix) {\n    std::vector<std::string> result;\n    std::transform(identifiers.begin(), identifiers.end(), std::back_inserter(result),\n                   [&suffix](const std::string& id) { return id + suffix; });\n    return result;\n}\n\nint main() {\n    std::vector<std::string> identifiers = {\"id1\", \"id2\", \"id3\"};\n    std::string suffix = \"_suffix\";\n    std::vector<std::string> updatedIdentifiers = appendSuffix(identifiers, suffix);\n\n    for (const auto& id : updatedIdentifiers) {\n        std::cout << id << std::endl;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Apply map to convert measurements from inches to centimeters in a list.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <iterator>\n\ndouble inchesToCentimeters(double inches) {\n    return inches * 2.54;\n}\n\nint main() {\n    std::vector<double> inches = {1.0, 5.0, 10.0, 20.0};\n    std::vector<double> centimeters;\n    \n    std::transform(inches.begin(), inches.end(), std::back_inserter(centimeters), inchesToCentimeters);\n    \n    for (double cm : centimeters) {\n        std::cout << cm << \" \";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Use map to encrypt a list of plaintext messages using a simple cipher.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <functional>\n\nstd::string encrypt(const std::string& text, int shift) {\n    std::string result;\n    for (char c : text) {\n        if (std::isalpha(c)) {\n            char offset = std::isupper(c) ? 'A' : 'a';\n            c = (c - offset + shift) % 26 + offset;\n        }\n        result += c;\n    }\n    return result;\n}\n\nint main() {\n    std::vector<std::string> plaintexts = {\"HELLO\", \"WORLD\", \"TEST\"};\n    int shift = 3;\n\n    std::vector<std::string> encrypted;\n    std::transform(plaintexts.begin(), plaintexts.end(), std::back_inserter(encrypted), \n                   std::bind(encrypt, std::placeholders::_1, shift));\n\n    for (const auto& encryptedText : encrypted) {\n        std::cout << encryptedText << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Transform a list of date strings to day of the week names using a map function.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <ctime>\n#include <algorithm>\n\nstd::string getDayOfWeek(const std::string& dateStr) {\n    struct tm tm = {};\n    strptime(dateStr.c_str(), \"%Y-%m-%d\", &tm);\n    char buffer[10];\n    strftime(buffer, sizeof(buffer), \"%A\", &tm);\n    return std::string(buffer);\n}\n\nint main() {\n    std::vector<std::string> dateStrings = {\"2023-10-12\", \"2023-10-13\", \"2023-10-14\"};\n    std::vector<std::string> dayOfWeekNames;\n\n    std::transform(dateStrings.begin(), dateStrings.end(), std::back_inserter(dayOfWeekNames), getDayOfWeek);\n\n    for (const auto& day : dayOfWeekNames) {\n        std::cout << day << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Use map to derive the absolute value of each number in a list.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n\nint main() {\n    std::vector<int> numbers = {-5, -1, 2, -8, 3, -7};\n    std::vector<int> abs_values;\n\n    std::transform(numbers.begin(), numbers.end(), std::back_inserter(abs_values), [](int n) {\n        return std::abs(n);\n    });\n\n    for (int value : abs_values) {\n        std::cout << value << \" \";\n    }\n    std::cout << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Convert a list of lowercase hexadecimal strings to uppercase using map.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nint main() {\n    std::vector<std::string> hexStrings = {\"a1\", \"b2\", \"c3\", \"ff\"};\n    std::vector<std::string> upperHexStrings(hexStrings.size());\n\n    std::transform(hexStrings.begin(), hexStrings.end(), upperHexStrings.begin(),\n                   [](const std::string& hexStr) {\n                       std::string upperStr;\n                       std::transform(hexStr.begin(), hexStr.end(), std::back_inserter(upperStr), ::toupper);\n                       return upperStr;\n                   });\n\n    for (const auto& hexStr : upperHexStrings) {\n        std::cout << hexStr << \" \";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Use map to find the maximum value in a list of lists of numbers.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nint main() {\n    std::vector<std::vector<int>> listOfLists = {\n        {1, 2, 3},\n        {4, 5, 6},\n        {7, 8, 9}\n    };\n    \n    int maxVal = std::numeric_limits<int>::min();\n    for (const auto& list : listOfLists) {\n        int localMax = *std::max_element(list.begin(), list.end());\n        maxVal = std::max(maxVal, localMax);\n    }\n    \n    std::cout << \"Maximum value: \" << maxVal << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Apply map to extract the year from each date in a list of date objects.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nclass Date {\npublic:\n    int year, month, day;\n    Date(int y, int m, int d) : year(y), month(m), day(d) {}\n};\n\nstd::vector<int> extractYears(const std::vector<Date>& dates) {\n    std::vector<int> years;\n    std::transform(dates.begin(), dates.end(), std::back_inserter(years), [](const Date& date) {\n        return date.year;\n    });\n    return years;\n}\n\nint main() {\n    std::vector<Date> dates = { Date(2023, 10, 5), Date(2024, 1, 15), Date(2025, 6, 19) };\n    std::vector<int> years = extractYears(dates);\n\n    for (int year : years) {\n        std::cout << year << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Use map to prepend a country code to each phone number in a list.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nstd::vector<std::string> prependCountryCode(const std::vector<std::string>& phoneNumbers, const std::string& countryCode) {\n    std::vector<std::string> modifiedNumbers(phoneNumbers.size());\n    std::transform(phoneNumbers.begin(), phoneNumbers.end(), modifiedNumbers.begin(),\n                   [&countryCode](const std::string& number) { return countryCode + number; });\n    return modifiedNumbers;\n}\n\nint main() {\n    std::vector<std::string> phoneNumbers = {\"1234567890\", \"9876543210\", \"5551234567\"};\n    std::string countryCode = \"+1\";\n    \n    std::vector<std::string> updatedNumbers = prependCountryCode(phoneNumbers, countryCode);\n    \n    for (const auto& number : updatedNumbers) {\n        std::cout << number << std::endl;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Capitalize the last letter of each word in a list using a map function.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nstd::string capitalizeLastLetter(const std::string &word) {\n    if (word.empty()) return word;\n    std::string result = word;\n    result.back() = std::toupper(result.back());\n    return result;\n}\n\nstd::vector<std::string> mapFunction(const std::vector<std::string> &words, \n                                     std::string(*func)(const std::string&)) {\n    std::vector<std::string> capitalizedWords;\n    std::transform(words.begin(), words.end(), std::back_inserter(capitalizedWords), func);\n    return capitalizedWords;\n}\n\nint main() {\n    std::vector<std::string> words = {\"hello\", \"world\", \"example\"};\n    std::vector<std::string> result = mapFunction(words, capitalizeLastLetter);\n    \n    for (const auto &word : result) {\n        std::cout << word << \" \";\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Use map to transform a list of strings by removing all vowels.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nstd::string removeVowels(const std::string& str) {\n    std::string result;\n    for (char ch : str) {\n        if (ch != 'a' && ch != 'e' && ch != 'i' && ch != 'o' && ch != 'u' &&\n            ch != 'A' && ch != 'E' && ch != 'I' && ch != 'O' && ch != 'U') {\n            result += ch;\n        }\n    }\n    return result;\n}\n\nint main() {\n    std::vector<std::string> strings = {\"example\", \"transform\", \"vowels\", \"functional\", \"map\"};\n    std::vector<std::string> transformed(strings.size());\n\n    std::transform(strings.begin(), strings.end(), transformed.begin(), removeVowels);\n\n    for (const std::string& str : transformed) {\n        std::cout << str << \" \";\n    }\n    std::cout << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Convert a list of music notes to their corresponding frequencies using map.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <map>\n#include <string>\n#include <functional>\n#include <algorithm>\n\nint main() {\n    std::vector<std::string> notes = {\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\"};\n    std::map<std::string, double> noteFrequencies = {\n        {\"A\", 440.00},\n        {\"B\", 493.88},\n        {\"C\", 261.63},\n        {\"D\", 293.66},\n        {\"E\", 329.63},\n        {\"F\", 349.23},\n        {\"G\", 392.00}\n    };\n\n    std::vector<double> frequencies;\n    std::transform(notes.begin(), notes.end(), std::back_inserter(frequencies),\n                   [&](const std::string& note) { return noteFrequencies[note]; });\n\n    for (double frequency : frequencies) {\n        std::cout << frequency << \" \";\n    }\n    std::cout << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Use map to find the reciprocal of each number in a list.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <functional>\n#include <algorithm>\n\nint main() {\n    std::vector<double> numbers = {1.0, 2.0, 3.0, 4.0, 5.0};\n    std::vector<double> reciprocals(numbers.size());\n\n    std::transform(numbers.begin(), numbers.end(), reciprocals.begin(), [](double num) {\n        return 1.0 / num;\n    });\n\n    for (const auto& r : reciprocals) {\n        std::cout << r << \" \";\n    }\n    std::cout << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Transform a list of URLs to their shortened versions using a map function.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nstd::string shortenURL(const std::string& url) {\n    // Dummy shortening logic: return the first 10 characters\n    return url.substr(0, 10);\n}\n\nint main() {\n    std::vector<std::string> urls = {\n        \"https://www.example.com/first-url\",\n        \"https://www.example.com/second-url\",\n        \"https://www.example.com/third-url\"\n    };\n\n    std::vector<std::string> shortenedUrls;\n    std::transform(urls.begin(), urls.end(), std::back_inserter(shortenedUrls), shortenURL);\n\n    for (const auto& url : shortenedUrls) {\n        std::cout << url << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Use map to generate a list of initials from a list of full names.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nint main() {\n    std::vector<std::string> fullNames = {\"Alice Smith\", \"Bob Johnson\", \"Charlie Brown\"};\n    std::vector<std::string> initials;\n\n    std::transform(fullNames.begin(), fullNames.end(), std::back_inserter(initials),\n                   [](const std::string &name) {\n                       std::string initial;\n                       bool nextIsInitial = true;\n                       for (char ch : name) {\n                           if (nextIsInitial) {\n                               initial += ch;\n                               nextIsInitial = false;\n                           }\n                           if (ch == ' ') {\n                               nextIsInitial = true;\n                           }\n                       }\n                       return initial;\n                   });\n\n    for (const auto &initial : initials) {\n        std::cout << initial << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Convert a list of decimal numbers to their binary string representations using map.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nstd::string toBinary(int n) {\n    std::string binary;\n    while (n > 0) {\n        binary.insert(binary.begin(), (n % 2) + '0');\n        n /= 2;\n    }\n    return binary.empty() ? \"0\" : binary;\n}\n\nint main() {\n    std::vector<int> decimals = {5, 10, 15, 20};\n    std::vector<std::string> binaries(decimals.size());\n\n    std::transform(decimals.begin(), decimals.end(), binaries.begin(), toBinary);\n\n    for (const auto& binary : binaries) {\n        std::cout << binary << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Use map to adjust the brightness of each color in a list of RGB tuples.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <tuple>\n#include <algorithm>\n#include <functional>\n\nusing RGB = std::tuple<int, int, int>;\n\nstd::vector<RGB> adjustBrightness(const std::vector<RGB>& colors, double factor) {\n    auto adjust = [factor](const RGB& color) {\n        int r = std::get<0>(color);\n        int g = std::get<1>(color);\n        int b = std::get<2>(color);\n        return RGB(\n            std::min(255, static_cast<int>(r * factor)),\n            std::min(255, static_cast<int>(g * factor)),\n            std::min(255, static_cast<int>(b * factor))\n        );\n    };\n    \n    std::vector<RGB> adjustedColors;\n    std::transform(colors.begin(), colors.end(), std::back_inserter(adjustedColors), adjust);\n    return adjustedColors;\n}\n\nint main() {\n    std::vector<RGB> colors = { {100, 150, 200}, {50, 75, 100}, {200, 50, 25} };\n    double factor = 1.2;\n    std::vector<RGB> brightenedColors = adjustBrightness(colors, factor);\n    \n    for (const auto& color : brightenedColors) {\n        std::cout << \"(\" << std::get<0>(color) << \", \" << std::get<1>(color) << \", \" << std::get<2>(color) << \")\\n\";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Apply map to filter out only alphabetic characters from a list of strings.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cctype>\n\nstd::vector<std::string> filterAlphabetic(const std::vector<std::string>& strings) {\n    std::vector<std::string> result;\n    for (const auto& str : strings) {\n        std::string filtered;\n        std::copy_if(str.begin(), str.end(), std::back_inserter(filtered), [](char c) {\n            return std::isalpha(static_cast<unsigned char>(c));\n        });\n        result.push_back(filtered);\n    }\n    return result;\n}\n\nint main() {\n    std::vector<std::string> input = {\"h3ll0\", \"wor!ld\", \"123\", \"C++\"};\n    std::vector<std::string> output = filterAlphabetic(input);\n\n    for (const auto& str : output) {\n        std::cout << str << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Use map to compute the prime factorization of each number in a list.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <map>\n#include <cmath>\n\nstd::map<int, int> primeFactorization(int n) {\n    std::map<int, int> factors;\n    for (int i = 2; i <= std::sqrt(n); ++i) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n    }\n    if (n > 1) {\n        factors[n]++;\n    }\n    return factors;\n}\n\nstd::vector<std::map<int, int>> computeFactorizations(const std::vector<int>& numbers) {\n    std::vector<std::map<int, int>> factorizations;\n    for (int number : numbers) {\n        factorizations.push_back(primeFactorization(number));\n    }\n    return factorizations;\n}\n\nint main() {\n    std::vector<int> numbers = {30, 45, 60};\n    std::vector<std::map<int, int>> factorizations = computeFactorizations(numbers);\n\n    for (const auto& factors : factorizations) {\n        for (const auto& pair : factors) {\n            std::cout << pair.first << \"^\" << pair.second << \" \";\n        }\n        std::cout << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Calculate the exponential of each number in a list using a map function.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <cmath>\n#include <algorithm>\n\nint main() {\n    std::vector<double> numbers = {1.0, 2.0, 3.0, 4.0, 5.0};\n    std::vector<double> results(numbers.size());\n\n    std::transform(numbers.begin(), numbers.end(), results.begin(), [](double num) {\n        return std::exp(num);\n    });\n\n    for (double result : results) {\n        std::cout << result << \" \";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Use map to convert a list of text messages to morse code.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n#include <unordered_map>\n#include <algorithm>\n\nstd::string textToMorse(const std::string& text) {\n    std::unordered_map<char, std::string> morseMap = {\n        {'A', \".-\"}, {'B', \"-...\"}, {'C', \"-.-.\"}, {'D', \"-..\"}, {'E', \".\"},\n        {'F', \"..-.\"}, {'G', \"--.\"}, {'H', \"....\"}, {'I', \"..\"}, {'J', \".---\"},\n        {'K', \"-.-\"}, {'L', \".-..\"}, {'M', \"--\"}, {'N', \"-.\"}, {'O', \"---\"},\n        {'P', \".--.\"}, {'Q', \"--.-\"}, {'R', \".-.\"}, {'S', \"...\"}, {'T', \"-\"},\n        {'U', \"..-\"}, {'V', \"...-\"}, {'W', \".--\"}, {'X', \"-..-\"}, {'Y', \"-.--\"},\n        {'Z', \"--..\"}, {'0', \"-----\"}, {'1', \".----\"}, {'2', \"..---\"}, {'3', \"...--\"},\n        {'4', \"....-\"}, {'5', \".....\"}, {'6', \"-....\"}, {'7', \"--...\"}, {'8', \"---..\"},\n        {'9', \"----.\"}, {' ', \"/\"}\n    };\n    std::string result;\n    for (char c : text) {\n        char upperChar = std::toupper(c);\n        if (morseMap.find(upperChar) != morseMap.end()) {\n            result += morseMap[upperChar] + \" \";\n        }\n    }\n    return result;\n}\n\nint main() {\n    std::vector<std::string> messages = {\"Hello\", \"World\", \"SOS\"};\n    std::vector<std::string> morseMessages(messages.size());\n\n    std::transform(messages.begin(), messages.end(), morseMessages.begin(), textToMorse);\n\n    for (const auto& morse : morseMessages) {\n        std::cout << morse << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Transform a list of JSON objects to XML strings using a map function.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <nlohmann/json.hpp>\n#include <pugixml.hpp>\n\nstd::string jsonToXml(const nlohmann::json& j) {\n    pugi::xml_document doc;\n    auto root = doc.append_child(\"root\");\n    for (auto it = j.begin(); it != j.end(); ++it) {\n        auto child = root.append_child(it.key().c_str());\n        child.append_child(pugi::node_pcdata).set_value(it.value().dump().c_str());\n    }\n    std::ostringstream oss;\n    doc.save(oss, \"  \");\n    return oss.str();\n}\n\nint main() {\n    std::vector<nlohmann::json> jsonList = {\n        {{\"name\", \"John\"}, {\"age\", 30}},\n        {{\"name\", \"Jane\"}, {\"age\", 25}}\n    };\n    \n    std::vector<std::string> xmlStrings;\n    std::transform(jsonList.begin(), jsonList.end(), std::back_inserter(xmlStrings), jsonToXml);\n    \n    for (const auto& xml : xmlStrings) {\n        std::cout << xml << std::endl;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Use map to extract the extension from each filename in a list.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nstd::string getExtension(const std::string& filename) {\n    size_t pos = filename.rfind('.');\n    return (pos != std::string::npos) ? filename.substr(pos + 1) : \"\";\n}\n\nint main() {\n    std::vector<std::string> filenames = {\"file1.txt\", \"archive.tar.gz\", \"image.jpeg\", \"document.pdf\"};\n    std::vector<std::string> extensions;\n\n    std::transform(filenames.begin(), filenames.end(), std::back_inserter(extensions), getExtension);\n\n    for (const auto& ext : extensions) {\n        std::cout << ext << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Convert a list of temperatures from Fahrenheit to Kelvin using map.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <functional>\n\ndouble fahrenheitToKelvin(double f) {\n    return (f - 32) * 5.0 / 9.0 + 273.15;\n}\n\nint main() {\n    std::vector<double> fahrenheitTemps = {32, 68, 104, 212};\n    std::vector<double> kelvinTemps(fahrenheitTemps.size());\n    \n    std::transform(fahrenheitTemps.begin(), fahrenheitTemps.end(), kelvinTemps.begin(), fahrenheitToKelvin);\n    \n    for (double temp : kelvinTemps) {\n        std::cout << temp << \" \";\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Use map to calculate the perimeter of each rectangle in a list of dimensions.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <utility>\n\nint main() {\n    std::vector<std::pair<int, int>> dimensions = {{3, 4}, {5, 6}, {7, 8}};\n    std::vector<int> perimeters;\n\n    std::transform(dimensions.begin(), dimensions.end(), std::back_inserter(perimeters),\n                   [](const std::pair<int, int>& dim) {\n                       return 2 * (dim.first + dim.second);\n                   });\n\n    for (const auto& perimeter : perimeters) {\n        std::cout << perimeter << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Apply map to format a list of phone numbers into a standard format.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nstd::string formatPhoneNumber(const std::string &phone) {\n    std::string cleaned;\n    for (char c : phone) {\n        if (std::isdigit(c)) {\n            cleaned += c;\n        }\n    }\n    return \"(\" + cleaned.substr(0, 3) + \") \" + cleaned.substr(3, 3) + \"-\" + cleaned.substr(6);\n}\n\nint main() {\n    std::vector<std::string> phoneNumbers = {\n        \"1234567890\", \"9876543210\", \"5551234567\"\n    };\n    \n    std::vector<std::string> formattedNumbers;\n    std::transform(phoneNumbers.begin(), phoneNumbers.end(), std::back_inserter(formattedNumbers), formatPhoneNumber);\n    \n    for (const std::string &number : formattedNumbers) {\n        std::cout << number << std::endl;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Use map to generate a hashed version of passwords from a list.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <map>\n#include <functional>\n\nstd::map<std::string, std::size_t> hashPasswords(const std::vector<std::string>& passwords) {\n    std::map<std::string, std::size_t> hashedPasswords;\n    std::hash<std::string> hashFunction;\n    for (const auto& password : passwords) {\n        hashedPasswords[password] = hashFunction(password);\n    }\n    return hashedPasswords;\n}\n\nint main() {\n    std::vector<std::string> passwords = {\"password123\", \"helloWorld\", \"securePass\"};\n    auto hashed = hashPasswords(passwords);\n    for (const auto& entry : hashed) {\n        std::cout << \"Password: \" << entry.first << \", Hash: \" << entry.second << std::endl;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Convert a list of text paragraphs to a word count using map.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\n#include <algorithm>\n#include <iterator>\n\nstd::vector<int> countWords(const std::vector<std::string>& paragraphs) {\n    std::vector<int> wordCounts;\n    std::transform(paragraphs.begin(), paragraphs.end(), std::back_inserter(wordCounts), [](const std::string& paragraph) {\n        std::istringstream stream(paragraph);\n        return std::distance(std::istream_iterator<std::string>(stream), std::istream_iterator<std::string>());\n    });\n    return wordCounts;\n}\n\nint main() {\n    std::vector<std::string> paragraphs = {\n        \"This is the first paragraph.\",\n        \"Here is the second one.\",\n        \"And this is the third paragraph of text.\"\n    };\n\n    std::vector<int> wordCounts = countWords(paragraphs);\n\n    for (int count : wordCounts) {\n        std::cout << count << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Use map to remove punctuation from each string in a list of sentences.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cctype>\n\nstd::string removePunctuation(const std::string& str) {\n    std::string result;\n    std::copy_if(str.begin(), str.end(), std::back_inserter(result),\n                 [](unsigned char c) { return !std::ispunct(c); });\n    return result;\n}\n\nstd::vector<std::string> mapRemovePunctuation(const std::vector<std::string>& sentences) {\n    std::vector<std::string> result;\n    std::transform(sentences.begin(), sentences.end(), std::back_inserter(result), removePunctuation);\n    return result;\n}\n\nint main() {\n    std::vector<std::string> sentences = {\"Hello, world!\", \"This is a test.\", \"C++ is fun!\"};\n    std::vector<std::string> noPunctuation = mapRemovePunctuation(sentences);\n\n    for (const auto& sentence : noPunctuation) {\n        std::cout << sentence << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Transform a list of URLs to their base domain using a map function.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nstd::string getBaseDomain(const std::string& url) {\n    auto start = url.find(\"//\") + 2;\n    auto end = url.find('/', start);\n    return url.substr(start, end - start);\n}\n\nint main() {\n    std::vector<std::string> urls = {\n        \"https://www.example.com/path\",\n        \"http://subdomain.example.org/anotherpath\",\n        \"https://example.net\"\n    };\n\n    std::vector<std::string> baseDomains(urls.size());\n    std::transform(urls.begin(), urls.end(), baseDomains.begin(), getBaseDomain);\n\n    for (const auto& domain : baseDomains) {\n        std::cout << domain << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Use map to translate a list of expressions to their symbolic algebraic forms.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <map>\n\nstd::string symbolicAlgebraicForm(const std::string& expression) {\n    std::map<std::string, std::string> expressionMap = {\n        {\"x^2\", \"x squared\"},\n        {\"x+1\", \"x plus one\"},\n        {\"2*x\", \"two times x\"},\n        {\"x-1\", \"x minus one\"}\n    };\n    \n    auto it = expressionMap.find(expression);\n    if (it != expressionMap.end()) {\n        return it->second;\n    }\n    return \"unknown expression\";\n}\n\nint main() {\n    std::vector<std::string> expressions = {\"x^2\", \"x+1\", \"2*x\", \"x-1\", \"x^3\"};\n    std::vector<std::string> results;\n\n    for (const auto& expr : expressions) {\n        results.push_back(symbolicAlgebraicForm(expr));\n    }\n\n    for (const auto& result : results) {\n        std::cout << result << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Apply map to convert a list of ASCII codes to corresponding characters.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <iterator>\n\nint main() {\n    std::vector<int> ascii_codes = {65, 66, 67, 68, 69}; // Example ASCII codes\n    std::vector<char> characters;\n    \n    std::transform(ascii_codes.begin(), ascii_codes.end(), std::back_inserter(characters), [](int code) {\n        return static_cast<char>(code);\n    });\n    \n    for (char c : characters) {\n        std::cout << c << \" \";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Use map to transform a list of text strings to their lemmatized forms.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <map>\n\n// Dummy lemmatization function\nstd::string lemmatize(const std::string& word) {\n    // Implement actual lemmatization logic here\n    return word;  // Placeholder: returns the word unchanged\n}\n\nint main() {\n    std::vector<std::string> words = {\"running\", \"jumps\", \"easily\", \"faster\"};\n    std::map<std::string, std::string> lemmatizedWords;\n\n    std::transform(words.begin(), words.end(), std::inserter(lemmatizedWords, lemmatizedWords.end()),\n                   [](const std::string& word) {\n                       return std::make_pair(word, lemmatize(word));\n                   });\n\n    for (const auto& pair : lemmatizedWords) {\n        std::cout << pair.first << \" -> \" << pair.second << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Convert a list of HTML strings to plain text using map.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <regex>\n#include <algorithm>\n\n// Function to convert HTML to plain text\nstd::string htmlToPlainText(const std::string& html) {\n    std::regex tags(\"<[^>]*>\");\n    return std::regex_replace(html, tags, \"\");\n}\n\nint main() {\n    std::vector<std::string> htmlStrings = {\n        \"<p>Hello, <strong>World!</strong></p>\",\n        \"<div><span>Example <a href=\\\"#\\\">Link</a></span></div>\"\n    };\n\n    std::vector<std::string> plainTexts;\n    std::transform(htmlStrings.begin(), htmlStrings.end(), std::back_inserter(plainTexts), htmlToPlainText);\n\n    for (const auto& text : plainTexts) {\n        std::cout << text << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Use map to create a summary of each article in a list of texts.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nstd::string summarizeArticle(const std::string& text) {\n    // Placeholder for summary logic.\n    // Example: return the first 100 characters as a summary.\n    return text.substr(0, 100);\n}\n\nint main() {\n    std::vector<std::string> articles = {\n        \"Article 1: This is the content of the first article.\",\n        \"Article 2: Here is some content for the second article.\",\n        \"Article 3: This is another article with different content.\"\n    };\n\n    std::vector<std::string> summaries;\n    std::transform(articles.begin(), articles.end(), std::back_inserter(summaries), summarizeArticle);\n\n    for (const auto& summary : summaries) {\n        std::cout << summary << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Transform a list of paths to their absolute paths using a map function.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <filesystem>\n\nint main() {\n    std::vector<std::string> paths = {\"./file1.txt\", \"../file2.txt\", \"/file3.txt\"};\n    std::vector<std::filesystem::path> absolutePaths;\n\n    std::transform(paths.begin(), paths.end(), std::back_inserter(absolutePaths),\n        [](const std::string& path) { return std::filesystem::absolute(path); });\n\n    for (const auto& absPath : absolutePaths) {\n        std::cout << absPath << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Use map to generate QR codes from a list of URLs.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n#include <map>\n\n// Mock function to simulate QR code generation\nstd::string generateQRCode(const std::string& url) {\n    return \"QRCode(\" + url + \")\";\n}\n\nint main() {\n    std::vector<std::string> urls = {\n        \"https://example.com\",\n        \"https://openai.com\",\n        \"https://github.com\"\n    };\n\n    std::map<std::string, std::string> qrCodes;\n    \n    for (const auto& url : urls) {\n        qrCodes[url] = generateQRCode(url);\n    }\n\n    for (const auto& [url, qrCode] : qrCodes) {\n        std::cout << \"URL: \" << url << \" -> QR Code: \" << qrCode << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Convert a list of angles from degrees to radians using map.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <cmath>\n#include <algorithm>\n\nint main() {\n    std::vector<double> degrees = {0, 30, 45, 60, 90, 180, 270, 360};\n    std::vector<double> radians(degrees.size());\n\n    std::transform(degrees.begin(), degrees.end(), radians.begin(), [](double degree) {\n        return degree * M_PI / 180.0;\n    });\n\n    for(double radian : radians) {\n        std::cout << radian << \" \";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Use map to anonymize a list of IP addresses by masking parts of them.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nstd::string maskIP(const std::string& ip) {\n    std::string maskedIp = ip;\n    size_t pos = maskedIp.rfind('.');\n    if (pos != std::string::npos) {\n        maskedIp.replace(pos + 1, maskedIp.size() - pos - 1, \"xxx\");\n    }\n    return maskedIp;\n}\n\nint main() {\n    std::vector<std::string> ipAddresses = {\"192.168.1.10\", \"10.0.0.5\", \"172.16.254.1\"};\n    std::vector<std::string> maskedIps;\n    std::transform(ipAddresses.begin(), ipAddresses.end(), std::back_inserter(maskedIps), maskIP);\n\n    for (const auto& ip : maskedIps) {\n        std::cout << ip << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Transform a list of tuples by swapping their elements using a map function.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nint main() {\n    std::vector<std::pair<int, int>> tuples = {{1, 2}, {3, 4}, {5, 6}};\n    \n    std::vector<std::pair<int, int>> swappedTuples;\n    std::transform(tuples.begin(), tuples.end(), std::back_inserter(swappedTuples),\n                   [](const std::pair<int, int>& p) {\n                       return std::make_pair(p.second, p.first);\n                   });\n    \n    for (const auto& p : swappedTuples) {\n        std::cout << \"(\" << p.first << \", \" << p.second << \") \";\n    }\n    std::cout << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Use map to compute the greatest common divisor of pairs in a list of number pairs.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <numeric>\n\nint gcd(int a, int b) {\n    return std::gcd(a, b);\n}\n\nint main() {\n    std::vector<std::pair<int, int>> numberPairs = {{48, 18}, {56, 98}, {99, 27}};\n    std::vector<int> gcdResults;\n\n    std::transform(numberPairs.begin(), numberPairs.end(), std::back_inserter(gcdResults),\n                   [](const std::pair<int, int>& pair) { return gcd(pair.first, pair.second); });\n\n    for (int result : gcdResults) {\n        std::cout << result << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Convert a list of file paths to their directory names using map.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <filesystem>\n\nstd::string getDirectoryName(const std::string& filePath) {\n    return std::filesystem::path(filePath).parent_path().string();\n}\n\nint main() {\n    std::vector<std::string> filePaths = {\n        \"/home/user/docs/file1.txt\",\n        \"/home/user/images/photo.jpg\",\n        \"/var/logs/system.log\"\n    };\n\n    std::vector<std::string> directoryNames;\n    std::transform(filePaths.begin(), filePaths.end(), std::back_inserter(directoryNames), getDirectoryName);\n\n    for (const auto& dir : directoryNames) {\n        std::cout << dir << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Use map to replace each vowel in a list of strings with a specific character.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <unordered_map>\n#include <algorithm>\n\nstd::vector<std::string> replaceVowels(const std::vector<std::string>& strings, char replacement) {\n    std::unordered_map<char, char> vowelMap = {\n        {'a', replacement}, {'e', replacement}, {'i', replacement},\n        {'o', replacement}, {'u', replacement}, {'A', replacement},\n        {'E', replacement}, {'I', replacement}, {'O', replacement},\n        {'U', replacement}\n    };\n\n    std::vector<std::string> result = strings;\n    for (std::string& str : result) {\n        std::transform(str.begin(), str.end(), str.begin(), [&](char c) {\n            auto it = vowelMap.find(c);\n            return it != vowelMap.end() ? it->second : c;\n        });\n    }\n    return result;\n}\n\nint main() {\n    std::vector<std::string> strings = {\"hello\", \"world\", \"example\"};\n    char replacement = '*';\n    std::vector<std::string> replacedStrings = replaceVowels(strings, replacement);\n\n    for (const std::string& str : replacedStrings) {\n        std::cout << str << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Transform a list of integers to their hexadecimal representations using map.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <sstream>\n\nstd::string intToHex(int num) {\n    std::stringstream ss;\n    ss << std::hex << num;\n    return ss.str();\n}\n\nint main() {\n    std::vector<int> numbers = {15, 255, 4095};\n    std::vector<std::string> hexNumbers(numbers.size());\n\n    std::transform(numbers.begin(), numbers.end(), hexNumbers.begin(), intToHex);\n\n    for (const auto& hex : hexNumbers) {\n        std::cout << hex << \" \";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Use map to apply a transformation matrix to a list of 2D vectors.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <array>\n#include <algorithm>\n#include <iterator>\n\nusing Vector2D = std::array<double, 2>;\nusing Matrix2x2 = std::array<std::array<double, 2>, 2>;\n\nVector2D applyTransformation(const Matrix2x2& matrix, const Vector2D& vector) {\n    return {\n        matrix[0][0] * vector[0] + matrix[0][1] * vector[1],\n        matrix[1][0] * vector[0] + matrix[1][1] * vector[1]\n    };\n}\n\nint main() {\n    std::vector<Vector2D> vectors = {{1, 2}, {3, 4}, {5, 6}};\n    Matrix2x2 transformationMatrix = {{{1, 0}, {0, 1}}};\n\n    std::vector<Vector2D> transformedVectors;\n    std::transform(vectors.begin(), vectors.end(), std::back_inserter(transformedVectors),\n                   [&transformationMatrix](const Vector2D& vector) {\n                       return applyTransformation(transformationMatrix, vector);\n                   });\n\n    for (const auto& vec : transformedVectors) {\n        std::cout << \"(\" << vec[0] << \", \" << vec[1] << \")\\n\";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Convert a list of text strings to their phonetic alphabet equivalents using map.",
    "code": "```cpp\n#include <iostream>\n#include <map>\n#include <vector>\n#include <algorithm>\n\nstd::string toPhonetic(const std::string& text) {\n    std::map<char, std::string> phoneticMap = {\n        {'A', \"Alfa\"}, {'B', \"Bravo\"}, {'C', \"Charlie\"}, {'D', \"Delta\"},\n        {'E', \"Echo\"}, {'F', \"Foxtrot\"}, {'G', \"Golf\"}, {'H', \"Hotel\"},\n        {'I', \"India\"}, {'J', \"Juliett\"}, {'K', \"Kilo\"}, {'L', \"Lima\"},\n        {'M', \"Mike\"}, {'N', \"November\"}, {'O', \"Oscar\"}, {'P', \"Papa\"},\n        {'Q', \"Quebec\"}, {'R', \"Romeo\"}, {'S', \"Sierra\"}, {'T', \"Tango\"},\n        {'U', \"Uniform\"}, {'V', \"Victor\"}, {'W', \"Whiskey\"}, {'X', \"X-ray\"},\n        {'Y', \"Yankee\"}, {'Z', \"Zulu\"}\n    };\n    \n    std::string result;\n    for (char c : text) {\n        char upperC = toupper(c);\n        if (phoneticMap.find(upperC) != phoneticMap.end()) {\n            result += phoneticMap[upperC] + \" \";\n        }\n    }\n    return result;\n}\n\nstd::vector<std::string> mapToPhonetic(const std::vector<std::string>& texts) {\n    std::vector<std::string> phoneticResults;\n    std::transform(texts.begin(), texts.end(), std::back_inserter(phoneticResults), toPhonetic);\n    return phoneticResults;\n}\n\nint main() {\n    std::vector<std::string> texts = {\"hello\", \"world\"};\n    std::vector<std::string> phoneticTexts = mapToPhonetic(texts);\n    \n    for (const auto& text : phoneticTexts) {\n        std::cout << text << std::endl;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Use map to determine if each word in a list is a palindrome, returning booleans.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nstd::vector<bool> checkPalindromes(const std::vector<std::string>& words) {\n    std::vector<bool> results;\n    std::transform(words.begin(), words.end(), std::back_inserter(results), [](const std::string& word) {\n        return std::equal(word.begin(), word.end(), word.rbegin());\n    });\n    return results;\n}\n\nint main() {\n    std::vector<std::string> words = {\"radar\", \"hello\", \"level\", \"world\"};\n    std::vector<bool> palindromes = checkPalindromes(words);\n\n    for (bool isPalindrome : palindromes) {\n        std::cout << isPalindrome << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Transform a list of dictionaries by renaming a specified key using a map function.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <unordered_map>\n#include <string>\n#include <algorithm>\n\nstd::vector<std::unordered_map<std::string, std::string>> renameKey(\n    const std::vector<std::unordered_map<std::string, std::string>>& list,\n    const std::string& oldKey, const std::string& newKey) {\n    std::vector<std::unordered_map<std::string, std::string>> transformedList;\n    std::transform(list.begin(), list.end(), std::back_inserter(transformedList),\n                   [&oldKey, &newKey](const std::unordered_map<std::string, std::string>& map) {\n                       std::unordered_map<std::string, std::string> newMap;\n                       for (const auto& [key, value] : map) {\n                           if (key == oldKey) {\n                               newMap[newKey] = value;\n                           } else {\n                               newMap[key] = value;\n                           }\n                       }\n                       return newMap;\n                   });\n    return transformedList;\n}\n\nint main() {\n    std::vector<std::unordered_map<std::string, std::string>> list = {\n        {{\"name\", \"Alice\"}, {\"age\", \"30\"}},\n        {{\"name\", \"Bob\"}, {\"age\", \"25\"}},\n    };\n\n    auto result = renameKey(list, \"name\", \"first_name\");\n\n    for (const auto& map : result) {\n        for (const auto& [key, value] : map) {\n            std::cout << key << \": \" << value << \", \";\n        }\n        std::cout << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Use map to compute the logarithm of each number in a list.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <cmath>\n#include <algorithm>\n\nint main() {\n    std::vector<double> numbers = {1.0, 10.0, 100.0, 1000.0};\n    std::vector<double> logs(numbers.size());\n\n    std::transform(numbers.begin(), numbers.end(), logs.begin(), [](double num) {\n        return std::log(num);\n    });\n\n    for (double logValue : logs) {\n        std::cout << logValue << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Convert a list of image file paths to grayscale versions using map.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <opencv2/opencv.hpp>\n\nstd::string convertToGrayscale(const std::string& filePath) {\n    cv::Mat img = cv::imread(filePath);\n    if (img.empty()) {\n        throw std::runtime_error(\"Failed to open image: \" + filePath);\n    }\n    cv::Mat grayImg;\n    cv::cvtColor(img, grayImg, cv::COLOR_BGR2GRAY);\n    std::string grayPath = \"gray_\" + filePath;\n    cv::imwrite(grayPath, grayImg);\n    return grayPath;\n}\n\nint main() {\n    std::vector<std::string> imagePaths = {\"image1.jpg\", \"image2.jpg\", \"image3.jpg\"};\n    std::vector<std::string> grayImagePaths(imagePaths.size());\n\n    std::transform(imagePaths.begin(), imagePaths.end(), grayImagePaths.begin(), convertToGrayscale);\n\n    for (const auto& path : grayImagePaths) {\n        std::cout << \"Grayscale image saved at: \" << path << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Use map to flatten a list of lists of strings into a single list of strings.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <iterator>\n\nint main() {\n    std::vector<std::vector<std::string>> listOfLists = {\n        {\"hello\", \"world\"},\n        {\"foo\", \"bar\"},\n        {\"example\", \"strings\"}\n    };\n\n    std::vector<std::string> flattenedList;\n    \n    for (const auto& list : listOfLists) {\n        std::copy(list.begin(), list.end(), std::back_inserter(flattenedList));\n    }\n\n    for (const auto& str : flattenedList) {\n        std::cout << str << \" \";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Transform a list of temperature readings to temperature anomalies using a map function.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <iterator>\n\nint main() {\n    std::vector<double> temperatures = {30.5, 32.0, 31.5, 33.0, 34.5};\n    double average = std::accumulate(temperatures.begin(), temperatures.end(), 0.0) / temperatures.size();\n\n    std::vector<double> anomalies;\n    std::transform(temperatures.begin(), temperatures.end(), std::back_inserter(anomalies),\n                   [average](double temp) { return temp - average; });\n\n    for (double anomaly : anomalies) {\n        std::cout << anomaly << \" \";\n    }\n\n    return 0;\n}\n```"
  }
]