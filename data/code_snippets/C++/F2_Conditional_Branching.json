[
  {
    "task": "Write a program that checks if a number is even or odd and outputs the result.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    int number;\n    std::cout << \"Enter a number: \";\n    std::cin >> number;\n\n    if (number % 2 == 0) {\n        std::cout << \"The number is even.\" << std::endl;\n    } else {\n        std::cout << \"The number is odd.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a function that determines if a given year is a leap year.",
    "code": "```cpp\n#include <iostream>\n\nbool isLeapYear(int year) {\n    if (year % 4 == 0) {\n        if (year % 100 == 0) {\n            if (year % 400 == 0) {\n                return true;\n            }\n            return false;\n        }\n        return true;\n    }\n    return false;\n}\n\nint main() {\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n    if (isLeapYear(year)) {\n        std::cout << year << \" is a leap year.\" << std::endl;\n    } else {\n        std::cout << year << \" is not a leap year.\" << std::endl;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a script that categorizes an input number as positive, negative, or zero.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    int number;\n    std::cout << \"Enter a number: \";\n    std::cin >> number;\n    \n    if (number > 0) {\n        std::cout << \"The number is positive.\" << std::endl;\n    } else if (number < 0) {\n        std::cout << \"The number is negative.\" << std::endl;\n    } else {\n        std::cout << \"The number is zero.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a system that grants access only if a correct password and username are provided.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nint main() {\n    std::string correctUsername = \"admin\";\n    std::string correctPassword = \"password123\";\n    std::string inputUsername, inputPassword;\n\n    std::cout << \"Enter username: \";\n    std::cin >> inputUsername;\n    std::cout << \"Enter password: \";\n    std::cin >> inputPassword;\n\n    if (inputUsername == correctUsername && inputPassword == correctPassword) {\n        std::cout << \"Access granted.\" << std::endl;\n    } else {\n        std::cout << \"Access denied.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a program that outputs 'Fizz' for numbers divisible by 3, 'Buzz' for numbers divisible by 5, and 'FizzBuzz' for numbers divisible by both.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    for (int i = 1; i <= 100; ++i) {\n        if (i % 3 == 0 && i % 5 == 0) {\n            std::cout << \"FizzBuzz\" << std::endl;\n        } else if (i % 3 == 0) {\n            std::cout << \"Fizz\" << std::endl;\n        } else if (i % 5 == 0) {\n            std::cout << \"Buzz\" << std::endl;\n        } else {\n            std::cout << i << std::endl;\n        }\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function to determine if a character is a vowel or a consonant.",
    "code": "```cpp\n#include <iostream>\n\nbool isVowel(char ch) {\n    ch = tolower(ch);\n    if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    char ch;\n    std::cout << \"Enter a character: \";\n    std::cin >> ch;\n    if (isVowel(ch)) {\n        std::cout << ch << \" is a vowel.\" << std::endl;\n    } else {\n        std::cout << ch << \" is a consonant.\" << std::endl;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Create a program that assigns letter grades based on numerical scores.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    int score;\n    std::cout << \"Enter the numerical score: \";\n    std::cin >> score;\n\n    char grade;\n\n    if (score >= 90) {\n        grade = 'A';\n    } else if (score >= 80) {\n        grade = 'B';\n    } else if (score >= 70) {\n        grade = 'C';\n    } else if (score >= 60) {\n        grade = 'D';\n    } else {\n        grade = 'F';\n    }\n\n    std::cout << \"The letter grade is: \" << grade << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a routine that suggests clothing based on the current temperature.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nstd::string suggestClothing(int temperature) {\n    if (temperature < 0) {\n        return \"Wear a heavy coat, scarf, and gloves.\";\n    } else if (temperature < 10) {\n        return \"Wear a coat and a warm hat.\";\n    } else if (temperature < 20) {\n        return \"Wear a light jacket.\";\n    } else if (temperature < 30) {\n        return \"Wear a t-shirt and shorts.\";\n    } else {\n        return \"Wear light and breathable clothing.\";\n    }\n}\n\nint main() {\n    int currentTemperature;\n    std::cout << \"Enter the current temperature: \";\n    std::cin >> currentTemperature;\n    std::cout << suggestClothing(currentTemperature) << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a system that checks if a user is an adult or a minor based on their age.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    int age;\n    std::cout << \"Enter your age: \";\n    std::cin >> age;\n\n    if (age >= 18) {\n        std::cout << \"You are an adult.\" << std::endl;\n    } else {\n        std::cout << \"You are a minor.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a program that validates if a triangle can exist based on its side lengths.",
    "code": "```cpp\n#include <iostream>\nusing namespace std;\n\nint main() {\n    double a, b, c;\n    cout << \"Enter the lengths of the three sides of the triangle: \";\n    cin >> a >> b >> c;\n\n    if ((a + b > c) && (a + c > b) && (b + c > a)) {\n        cout << \"The triangle can exist.\" << endl;\n    } else {\n        cout << \"The triangle cannot exist.\" << endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that determines the largest of three input numbers.",
    "code": "```cpp\n#include <iostream>\n\nint largestOfThree(int a, int b, int c) {\n    if (a >= b && a >= c) {\n        return a;\n    } else if (b >= a && b >= c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\nint main() {\n    int num1 = 10, num2 = 20, num3 = 15;\n    std::cout << \"The largest number is: \" << largestOfThree(num1, num2, num3) << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Create a program that checks if a string is a palindrome.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nbool isPalindrome(const std::string& str) {\n    int left = 0;\n    int right = str.length() - 1;\n    while (left < right) {\n        if (str[left] != str[right]) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    return true;\n}\n\nint main() {\n    std::string input;\n    std::cout << \"Enter a string: \";\n    std::cin >> input;\n    \n    if (isPalindrome(input)) {\n        std::cout << \"The string is a palindrome.\" << std::endl;\n    } else {\n        std::cout << \"The string is not a palindrome.\" << std::endl;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Develop a routine that calculates the total cost with a discount applied if applicable.",
    "code": "```cpp\n#include <iostream>\n\ndouble calculateTotalCost(double originalCost, bool applyDiscount) {\n    const double discountRate = 0.10; // 10% discount\n    if (applyDiscount) {\n        return originalCost * (1 - discountRate);\n    } else {\n        return originalCost;\n    }\n}\n\nint main() {\n    double cost;\n    bool discount;\n    \n    std::cout << \"Enter the original cost: \";\n    std::cin >> cost;\n    \n    std::cout << \"Apply discount? (1 for Yes, 0 for No): \";\n    std::cin >> discount;\n    \n    double totalCost = calculateTotalCost(cost, discount);\n    std::cout << \"Total cost: \" << totalCost << std::endl;\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Implement a system that checks if a person is eligible to vote based on age and citizenship.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nint main() {\n    int age;\n    std::string citizenship;\n\n    std::cout << \"Enter age: \";\n    std::cin >> age;\n    std::cout << \"Enter citizenship: \";\n    std::cin >> citizenship;\n\n    if (age >= 18 && citizenship == \"yes\") {\n        std::cout << \"Eligible to vote.\" << std::endl;\n    } else {\n        std::cout << \"Not eligible to vote.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a function that returns the day of the week given a number from 1 to 7.",
    "code": "```cpp\n#include <string>\n\nstd::string getDayOfWeek(int dayNumber) {\n    if (dayNumber == 1) return \"Monday\";\n    else if (dayNumber == 2) return \"Tuesday\";\n    else if (dayNumber == 3) return \"Wednesday\";\n    else if (dayNumber == 4) return \"Thursday\";\n    else if (dayNumber == 5) return \"Friday\";\n    else if (dayNumber == 6) return \"Saturday\";\n    else if (dayNumber == 7) return \"Sunday\";\n    else return \"Invalid\";\n}\n```"
  },
  {
    "task": "Write a program that determines if a word is found within a given sentence.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nint main() {\n    std::string sentence, word;\n    std::cout << \"Enter a sentence: \";\n    std::getline(std::cin, sentence);\n    std::cout << \"Enter a word to find: \";\n    std::getline(std::cin, word);\n\n    if (sentence.find(word) != std::string::npos) {\n        std::cout << \"Word found in the sentence.\" << std::endl;\n    } else {\n        std::cout << \"Word not found in the sentence.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a script that checks if a number is within a specified range.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    int number, lowerBound, upperBound;\n\n    std::cout << \"Enter a number: \";\n    std::cin >> number;\n    std::cout << \"Enter the lower bound of the range: \";\n    std::cin >> lowerBound;\n    std::cout << \"Enter the upper bound of the range: \";\n    std::cin >> upperBound;\n\n    if (number >= lowerBound && number <= upperBound) {\n        std::cout << \"The number is within the range.\" << std::endl;\n    } else {\n        std::cout << \"The number is not within the range.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a routine to decide if a user input is a valid email address.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nbool isValidEmail(const std::string& email) {\n    size_t atPos = email.find('@');\n    size_t dotPos = email.find('.', atPos);\n\n    if (atPos == std::string::npos || dotPos == std::string::npos) {\n        return false;\n    }\n    if (atPos == 0 || dotPos == 0 || atPos == email.length() - 1 || dotPos == email.length() - 1) {\n        return false;\n    }\n    if (dotPos <= atPos + 1) {\n        return false;\n    }\n    return true;\n}\n\nint main() {\n    std::string email;\n    std::cout << \"Enter an email address: \";\n    std::cin >> email;\n\n    if (isValidEmail(email)) {\n        std::cout << \"Valid email address.\" << std::endl;\n    } else {\n        std::cout << \"Invalid email address.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a program that categorizes a number as small, medium, or large.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    int number;\n    std::cout << \"Enter a number: \";\n    std::cin >> number;\n\n    if (number < 10) {\n        std::cout << \"The number is small.\" << std::endl;\n    } else if (number >= 10 && number <= 100) {\n        std::cout << \"The number is medium.\" << std::endl;\n    } else {\n        std::cout << \"The number is large.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a function that outputs the season based on the month provided.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nstd::string getSeason(int month) {\n    if (month == 12 || month == 1 || month == 2) {\n        return \"Winter\";\n    } else if (month >= 3 && month <= 5) {\n        return \"Spring\";\n    } else if (month >= 6 && month <= 8) {\n        return \"Summer\";\n    } else if (month >= 9 && month <= 11) {\n        return \"Autumn\";\n    } else {\n        return \"Invalid month\";\n    }\n}\n\nint main() {\n    int month;\n    std::cout << \"Enter month as a number (1-12): \";\n    std::cin >> month;\n    std::cout << \"Season: \" << getSeason(month) << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program that checks if a string contains only alphabetic characters.",
    "code": "```cpp\n#include <iostream>\n#include <cctype>\n\nbool isAlphabetic(const std::string& str) {\n    for (char ch : str) {\n        if (!std::isalpha(static_cast<unsigned char>(ch))) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint main() {\n    std::string input;\n    std::cout << \"Enter a string: \";\n    std::cin >> input;\n    \n    if (isAlphabetic(input)) {\n        std::cout << \"The string contains only alphabetic characters.\" << std::endl;\n    } else {\n        std::cout << \"The string contains non-alphabetic characters.\" << std::endl;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Create a routine that decides the type of triangle based on its angles.",
    "code": "```cpp\n#include <iostream>\n\nstd::string triangleType(int angle1, int angle2, int angle3) {\n    if (angle1 + angle2 + angle3 != 180) {\n        return \"Not a triangle\";\n    }\n    if (angle1 <= 0 || angle2 <= 0 || angle3 <= 0) {\n        return \"Invalid angles\";\n    }\n    if (angle1 == 90 || angle2 == 90 || angle3 == 90) {\n        return \"Right triangle\";\n    }\n    if (angle1 < 90 && angle2 < 90 && angle3 < 90) {\n        return \"Acute triangle\";\n    }\n    if (angle1 > 90 || angle2 > 90 || angle3 > 90) {\n        return \"Obtuse triangle\";\n    }\n    return \"Unknown type\";\n}\n\nint main() {\n    int angle1, angle2, angle3;\n    std::cout << \"Enter three angles of the triangle: \";\n    std::cin >> angle1 >> angle2 >> angle3;\n    \n    std::cout << \"The triangle is: \" << triangleType(angle1, angle2, angle3) << std::endl;\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Develop a program that suggests a meal based on the time of day.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nstd::string suggestMeal(int hour) {\n    if (hour >= 5 && hour < 11) {\n        return \"Breakfast\";\n    } else if (hour >= 11 && hour < 17) {\n        return \"Lunch\";\n    } else if (hour >= 17 && hour < 21) {\n        return \"Dinner\";\n    } else {\n        return \"Snack\";\n    }\n}\n\nint main() {\n    int hour;\n    std::cout << \"Enter the current hour (0-23): \";\n    std::cin >> hour;\n\n    if (hour < 0 || hour > 23) {\n        std::cout << \"Invalid hour entered. Please enter a value between 0 and 23.\" << std::endl;\n    } else {\n        std::string meal = suggestMeal(hour);\n        std::cout << \"Suggested meal: \" << meal << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function that determines if a point lies within a circle given its radius.",
    "code": "```cpp\n#include <iostream>\n#include <cmath>\n\nbool isPointInCircle(double x, double y, double circleX, double circleY, double radius) {\n    double dx = x - circleX;\n    double dy = y - circleY;\n    double distanceSquared = dx * dx + dy * dy;\n    return distanceSquared <= radius * radius;\n}\n\nint main() {\n    double x = 1.0, y = 2.0;\n    double circleX = 0.0, circleY = 0.0, radius = 5.0;\n    \n    if (isPointInCircle(x, y, circleX, circleY, radius)) {\n        std::cout << \"Point lies within the circle.\" << std::endl;\n    } else {\n        std::cout << \"Point does not lie within the circle.\" << std::endl;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Design a script that calculates overtime pay based on hours worked.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    double hoursWorked, hourlyRate, overtimePay;\n    const double standardHours = 40.0;\n    const double overtimeRate = 1.5;\n\n    std::cout << \"Enter hours worked: \";\n    std::cin >> hoursWorked;\n    \n    std::cout << \"Enter hourly rate: \";\n    std::cin >> hourlyRate;\n\n    if (hoursWorked > standardHours) {\n        double overtimeHours = hoursWorked - standardHours;\n        overtimePay = overtimeHours * hourlyRate * overtimeRate;\n    } else {\n        overtimePay = 0.0;\n    }\n\n    std::cout << \"Overtime pay is: $\" << overtimePay << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program that checks if two strings are anagrams of each other.",
    "code": "```cpp\n#include <iostream>\n#include <algorithm>\n\nbool areAnagrams(const std::string& str1, const std::string& str2) {\n    if (str1.length() != str2.length()) return false;\n\n    std::string sortedStr1 = str1;\n    std::string sortedStr2 = str2;\n    std::sort(sortedStr1.begin(), sortedStr1.end());\n    std::sort(sortedStr2.begin(), sortedStr2.end());\n\n    return sortedStr1 == sortedStr2;\n}\n\nint main() {\n    std::string string1, string2;\n    std::cout << \"Enter first string: \";\n    std::cin >> string1;\n    std::cout << \"Enter second string: \";\n    std::cin >> string2;\n\n    if (areAnagrams(string1, string2)) {\n        std::cout << \"The strings are anagrams.\" << std::endl;\n    } else {\n        std::cout << \"The strings are not anagrams.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a function that classifies numbers as prime or composite.",
    "code": "```cpp\n#include <iostream>\n#include <cmath>\n\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (int i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) return false;\n    }\n    return true;\n}\n\nvoid classifyNumber(int n) {\n    if (isPrime(n)) {\n        std::cout << n << \" is a prime number.\" << std::endl;\n    } else {\n        std::cout << n << \" is a composite number.\" << std::endl;\n    }\n}\n\nint main() {\n    int num;\n    std::cout << \"Enter a number: \";\n    std::cin >> num;\n    classifyNumber(num);\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a routine to determine if a number is a power of two.",
    "code": "```cpp\n#include <iostream>\n\nbool isPowerOfTwo(int n) {\n    if (n <= 0) return false;\n    return (n & (n - 1)) == 0;\n}\n\nint main() {\n    int number;\n    std::cout << \"Enter a number: \";\n    std::cin >> number;\n\n    if (isPowerOfTwo(number)) {\n        std::cout << number << \" is a power of two.\" << std::endl;\n    } else {\n        std::cout << number << \" is not a power of two.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a program that checks if a list is sorted in ascending order.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n\nbool isSortedAscending(const std::vector<int>& list) {\n    for (size_t i = 1; i < list.size(); ++i) {\n        if (list[i - 1] > list[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint main() {\n    std::vector<int> list = {1, 2, 3, 4, 5}; // Example list\n    if (isSortedAscending(list)) {\n        std::cout << \"The list is sorted in ascending order.\" << std::endl;\n    } else {\n        std::cout << \"The list is not sorted in ascending order.\" << std::endl;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Design a function that suggests a sport based on the weather conditions.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nstd::string suggestSport(const std::string& weather) {\n    if (weather == \"sunny\") {\n        return \"Tennis\";\n    } else if (weather == \"rainy\") {\n        return \"Swimming\";\n    } else if (weather == \"windy\") {\n        return \"Sailing\";\n    } else if (weather == \"snowy\") {\n        return \"Skiing\";\n    } else {\n        return \"Indoor Gym\";\n    }\n}\n\nint main() {\n    std::string weather;\n    std::cout << \"Enter the current weather (sunny, rainy, windy, snowy): \";\n    std::cin >> weather;\n    std::cout << \"Suggested sport: \" << suggestSport(weather) << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program that determines if an entered date is valid.",
    "code": "```cpp\n#include <iostream>\n\nbool isLeapYear(int year) {\n    if (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0)) {\n        return true;\n    }\n    return false;\n}\n\nbool isValidDate(int day, int month, int year) {\n    if (year < 1 || month < 1 || month > 12 || day < 1) {\n        return false;\n    }\n    \n    int daysInMonth[] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n    \n    if (isLeapYear(year)) {\n        daysInMonth[2] = 29;\n    }\n    \n    if (day > daysInMonth[month]) {\n        return false;\n    }\n    \n    return true;\n}\n\nint main() {\n    int day, month, year;\n    \n    std::cout << \"Enter day: \";\n    std::cin >> day;\n    std::cout << \"Enter month: \";\n    std::cin >> month;\n    std::cout << \"Enter year: \";\n    std::cin >> year;\n    \n    if (isValidDate(day, month, year)) {\n        std::cout << \"The date is valid.\" << std::endl;\n    } else {\n        std::cout << \"The date is invalid.\" << std::endl;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Create a script to decide which of two products to buy based on price and reviews.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nint main() {\n    double price1, price2;\n    double reviews1, reviews2;\n    \n    std::cout << \"Enter price of product 1: \";\n    std::cin >> price1;\n    std::cout << \"Enter reviews of product 1: \";\n    std::cin >> reviews1;\n    \n    std::cout << \"Enter price of product 2: \";\n    std::cin >> price2;\n    std::cout << \"Enter reviews of product 2: \";\n    std::cin >> reviews2;\n    \n    if (price1 < price2 && reviews1 >= reviews2) {\n        std::cout << \"Buy product 1.\" << std::endl;\n    } else if (price2 < price1 && reviews2 >= reviews1) {\n        std::cout << \"Buy product 2.\" << std::endl;\n    } else if (reviews1 > reviews2) {\n        std::cout << \"Buy product 1.\" << std::endl;\n    } else if (reviews2 > reviews1) {\n        std::cout << \"Buy product 2.\" << std::endl;\n    } else {\n        std::cout << \"Both products are equal, consider other factors.\" << std::endl;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Develop a function that categorizes a person\u2019s BMI as underweight, normal, overweight, or obese.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nstd::string categorizeBMI(double bmi) {\n    if (bmi < 18.5) {\n        return \"Underweight\";\n    } else if (bmi < 24.9) {\n        return \"Normal\";\n    } else if (bmi < 29.9) {\n        return \"Overweight\";\n    } else {\n        return \"Obese\";\n    }\n}\n\nint main() {\n    double bmi;\n    std::cout << \"Enter BMI: \";\n    std::cin >> bmi;\n    std::string category = categorizeBMI(bmi);\n    std::cout << \"BMI Category: \" << category << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a program that checks if a credit card number is valid using the Luhn algorithm.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nbool isValidCreditCard(const std::string& cardNumber) {\n    int sum = 0;\n    bool alternate = false;\n    for (int i = cardNumber.length() - 1; i >= 0; --i) {\n        int n = cardNumber[i] - '0';\n        if (alternate) {\n            n *= 2;\n            if (n > 9) n -= 9;\n        }\n        sum += n;\n        alternate = !alternate;\n    }\n    return (sum % 10 == 0);\n}\n\nint main() {\n    std::string cardNumber;\n    std::cout << \"Enter credit card number: \";\n    std::cin >> cardNumber;\n\n    if (isValidCreditCard(cardNumber)) {\n        std::cout << \"Credit card number is valid.\" << std::endl;\n    } else {\n        std::cout << \"Credit card number is invalid.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a routine that outputs a greeting based on the current time of day.",
    "code": "```cpp\n#include <iostream>\n#include <ctime>\n\nvoid greetBasedOnTime() {\n    std::time_t currentTime = std::time(nullptr);\n    std::tm* localTime = std::localtime(&currentTime);\n\n    int hour = localTime->tm_hour;\n\n    if (hour < 12) {\n        std::cout << \"Good morning!\" << std::endl;\n    } else if (hour < 18) {\n        std::cout << \"Good afternoon!\" << std::endl;\n    } else {\n        std::cout << \"Good evening!\" << std::endl;\n    }\n}\n\nint main() {\n    greetBasedOnTime();\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program that determines if a given word can be formed with a set of letters.",
    "code": "```cpp\n#include <iostream>\n#include <unordered_map>\n#include <string>\n\nbool canFormWord(const std::string& word, const std::string& letters) {\n    std::unordered_map<char, int> letterCount;\n    for (char c : letters) {\n        ++letterCount[c];\n    }\n    for (char c : word) {\n        if (letterCount[c] > 0) {\n            --letterCount[c];\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\n\nint main() {\n    std::string word, letters;\n    std::cout << \"Enter the word: \";\n    std::cin >> word;\n    std::cout << \"Enter the set of letters: \";\n    std::cin >> letters;\n\n    if (canFormWord(word, letters)) {\n        std::cout << \"The word can be formed with the given letters.\\n\";\n    } else {\n        std::cout << \"The word cannot be formed with the given letters.\\n\";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a function that outputs the appropriate greeting based on the day of the week.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nstd::string getGreeting(const std::string& dayOfWeek) {\n    if (dayOfWeek == \"Monday\") {\n        return \"Start your week with a smile!\";\n    } else if (dayOfWeek == \"Tuesday\") {\n        return \"Keep going, it's only Tuesday!\";\n    } else if (dayOfWeek == \"Wednesday\") {\n        return \"Happy Hump Day!\";\n    } else if (dayOfWeek == \"Thursday\") {\n        return \"Almost there!\";\n    } else if (dayOfWeek == \"Friday\") {\n        return \"TGIF!\";\n    } else if (dayOfWeek == \"Saturday\") {\n        return \"Enjoy your weekend!\";\n    } else if (dayOfWeek == \"Sunday\") {\n        return \"Relax and recharge!\";\n    } else {\n        return \"Invalid day!\";\n    }\n}\n\nint main() {\n    std::string day;\n    std::cout << \"Enter the day of the week: \";\n    std::cin >> day;\n    std::cout << getGreeting(day) << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a system to determine if a person qualifies for a senior citizen discount.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    int age;\n    std::cout << \"Enter age: \";\n    std::cin >> age;\n\n    if (age >= 65) {\n        std::cout << \"Qualifies for senior citizen discount.\" << std::endl;\n    } else {\n        std::cout << \"Does not qualify for senior citizen discount.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a function that checks if a number is a perfect square.",
    "code": "```cpp\n#include <iostream>\n#include <cmath>\n\nbool isPerfectSquare(int num) {\n    if (num < 0) return false;\n    int root = static_cast<int>(std::sqrt(num));\n    return root * root == num;\n}\n\nint main() {\n    int number;\n    std::cout << \"Enter a number: \";\n    std::cin >> number;\n    if (isPerfectSquare(number)) {\n        std::cout << number << \" is a perfect square.\" << std::endl;\n    } else {\n        std::cout << number << \" is not a perfect square.\" << std::endl;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Design a program that outputs the correct shipping cost based on weight and distance.",
    "code": "```cpp\n#include <iostream>\nusing namespace std;\n\nint main() {\n    double weight, distance, cost;\n\n    cout << \"Enter the weight of the package: \";\n    cin >> weight;\n    cout << \"Enter the distance to be shipped: \";\n    cin >> distance;\n\n    if (weight <= 0 || distance <= 0) {\n        cout << \"Invalid input. Weight and distance must be positive numbers.\" << endl;\n    } else {\n        if (weight <= 5) {\n            if (distance <= 100) {\n                cost = 5.0;\n            } else if (distance <= 500) {\n                cost = 10.0;\n            } else {\n                cost = 15.0;\n            }\n        } else if (weight <= 20) {\n            if (distance <= 100) {\n                cost = 10.0;\n            } else if (distance <= 500) {\n                cost = 20.0;\n            } else {\n                cost = 30.0;\n            }\n        } else {\n            if (distance <= 100) {\n                cost = 20.0;\n            } else if (distance <= 500) {\n                cost = 40.0;\n            } else {\n                cost = 60.0;\n            }\n        }\n\n        cout << \"The shipping cost is: $\" << cost << endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a routine that chooses the correct pronoun based on gender input.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nstd::string getPronoun(const std::string& gender) {\n    if (gender == \"male\") {\n        return \"he\";\n    } else if (gender == \"female\") {\n        return \"she\";\n    } else if (gender == \"non-binary\") {\n        return \"they\";\n    } else {\n        return \"unknown\";\n    }\n}\n\nint main() {\n    std::string gender;\n    std::cout << \"Enter gender (male, female, non-binary): \";\n    std::cin >> gender;\n\n    std::string pronoun = getPronoun(gender);\n    std::cout << \"The pronoun is: \" << pronoun << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a program that checks if a user input is a palindrome number.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    int num, originalNum, remainder, reversedNum = 0;\n    std::cout << \"Enter an integer: \";\n    std::cin >> num;\n    \n    originalNum = num;\n\n    while (num != 0) {\n        remainder = num % 10;\n        reversedNum = reversedNum * 10 + remainder;\n        num /= 10;\n    }\n\n    if (originalNum == reversedNum) {\n        std::cout << \"The number is a palindrome.\" << std::endl;\n    } else {\n        std::cout << \"The number is not a palindrome.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a script to decide if a number is a perfect number.",
    "code": "```cpp\n#include <iostream>\n\nbool isPerfectNumber(int num) {\n    if (num <= 1) return false;\n    int sum = 1;\n    for (int i = 2; i * i <= num; ++i) {\n        if (num % i == 0) {\n            sum += i;\n            if (i != num / i) {\n                sum += num / i;\n            }\n        }\n    }\n    return sum == num;\n}\n\nint main() {\n    int number;\n    std::cout << \"Enter a number: \";\n    std::cin >> number;\n    \n    if (isPerfectNumber(number)) {\n        std::cout << number << \" is a perfect number.\" << std::endl;\n    } else {\n        std::cout << number << \" is not a perfect number.\" << std::endl;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Implement a system that determines the winner in a rock-paper-scissors game.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nstd::string determineWinner(const std::string& player1, const std::string& player2) {\n    if (player1 == player2) {\n        return \"Draw\";\n    } else if ((player1 == \"rock\" && player2 == \"scissors\") ||\n               (player1 == \"scissors\" && player2 == \"paper\") ||\n               (player1 == \"paper\" && player2 == \"rock\")) {\n        return \"Player 1 wins\";\n    } else {\n        return \"Player 2 wins\";\n    }\n}\n\nint main() {\n    std::string player1, player2;\n    std::cout << \"Player 1, enter rock, paper, or scissors: \";\n    std::cin >> player1;\n    std::cout << \"Player 2, enter rock, paper, or scissors: \";\n    std::cin >> player2;\n\n    std::string result = determineWinner(player1, player2);\n    std::cout << result << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a function that suggests a movie genre based on user mood.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nstd::string suggestGenre(const std::string& mood) {\n    if (mood == \"happy\") {\n        return \"Comedy\";\n    } else if (mood == \"sad\") {\n        return \"Drama\";\n    } else if (mood == \"adventurous\") {\n        return \"Action\";\n    } else if (mood == \"romantic\") {\n        return \"Romance\";\n    } else if (mood == \"scared\") {\n        return \"Horror\";\n    } else {\n        return \"Documentary\";\n    }\n}\n\nint main() {\n    std::string mood;\n    std::cout << \"Enter your mood: \";\n    std::cin >> mood;\n    \n    std::string genre = suggestGenre(mood);\n    std::cout << \"Suggested movie genre: \" << genre << std::endl;\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Write a program that checks if a file extension is valid for an image file.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n#include <algorithm>\n\nbool isValidImageExtension(const std::string& extension) {\n    std::string ext = extension;\n    std::transform(ext.begin(), ext.end(), ext.begin(), ::tolower);\n\n    if (ext == \".jpg\" || ext == \".jpeg\" || ext == \".png\" ||\n        ext == \".gif\" || ext == \".bmp\" || ext == \".tiff\") {\n        return true;\n    }\n    return false;\n}\n\nint main() {\n    std::string filename;\n    std::cout << \"Enter the filename: \";\n    std::cin >> filename;\n\n    size_t pos = filename.find_last_of('.');\n    if (pos == std::string::npos) {\n        std::cout << \"Invalid file extension.\" << std::endl;\n    } else {\n        std::string extension = filename.substr(pos);\n        if (isValidImageExtension(extension)) {\n            std::cout << \"Valid image file extension.\" << std::endl;\n        } else {\n            std::cout << \"Invalid file extension.\" << std::endl;\n        }\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a routine that decides the appropriate currency symbol based on country.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nstd::string getCurrencySymbol(const std::string& country) {\n    if (country == \"USA\" || country == \"United States\") {\n        return \"$\";\n    } else if (country == \"UK\" || country == \"United Kingdom\") {\n        return \"\u00a3\";\n    } else if (country == \"Japan\") {\n        return \"\u00a5\";\n    } else if (country == \"Eurozone\" || country == \"Germany\" || country == \"France\") {\n        return \"\u20ac\";\n    } else {\n        return \"Currency symbol not found\";\n    }\n}\n\nint main() {\n    std::string country;\n    std::cout << \"Enter a country: \";\n    std::cin >> country;\n    std::string symbol = getCurrencySymbol(country);\n    std::cout << \"The currency symbol for \" << country << \" is: \" << symbol << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a function that determines if a string is a valid palindrome ignoring spaces and punctuation.",
    "code": "```cpp\n#include <iostream>\n#include <cctype>\n#include <string>\n\nbool isPalindrome(const std::string &s) {\n    int left = 0, right = s.size() - 1;\n    while (left < right) {\n        while (left < right && !std::isalnum(s[left])) {\n            left++;\n        }\n        while (left < right && !std::isalnum(s[right])) {\n            right--;\n        }\n        if (std::tolower(s[left]) != std::tolower(s[right])) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    return true;\n}\n\nint main() {\n    std::string test = \"A man, a plan, a canal: Panama\";\n    if (isPalindrome(test)) {\n        std::cout << \"The string is a valid palindrome.\" << std::endl;\n    } else {\n        std::cout << \"The string is not a valid palindrome.\" << std::endl;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a program that checks if a number is in the Fibonacci sequence.",
    "code": "```cpp\n#include <iostream>\n\nbool isFibonacci(int n) {\n    if (n < 0) return false;\n    int a = 0, b = 1;\n    if (n == a || n == b) return true;\n    int c = a + b;\n    while (c <= n) {\n        if (c == n) return true;\n        a = b;\n        b = c;\n        c = a + b;\n    }\n    return false;\n}\n\nint main() {\n    int number;\n    std::cout << \"Enter a number: \";\n    std::cin >> number;\n    if (isFibonacci(number)) {\n        std::cout << number << \" is in the Fibonacci sequence.\\n\";\n    } else {\n        std::cout << number << \" is not in the Fibonacci sequence.\\n\";\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Design a script to calculate the correct tip based on service quality rating.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nint main() {\n    double billAmount;\n    std::string serviceQuality;\n    double tipPercentage;\n\n    std::cout << \"Enter the bill amount: \";\n    std::cin >> billAmount;\n\n    std::cout << \"Enter the service quality (excellent, good, average, poor): \";\n    std::cin >> serviceQuality;\n\n    if (serviceQuality == \"excellent\") {\n        tipPercentage = 0.20;\n    } else if (serviceQuality == \"good\") {\n        tipPercentage = 0.15;\n    } else if (serviceQuality == \"average\") {\n        tipPercentage = 0.10;\n    } else if (serviceQuality == \"poor\") {\n        tipPercentage = 0.05;\n    } else {\n        std::cout << \"Invalid service quality rating.\" << std::endl;\n        return 1;\n    }\n\n    double tipAmount = billAmount * tipPercentage;\n    std::cout << \"The tip amount is: $\" << tipAmount << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that determines if a year is a century year.",
    "code": "```cpp\n#include <iostream>\n\nbool isCenturyYear(int year) {\n    if (year % 100 == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year = 1900;\n    if (isCenturyYear(year)) {\n        std::cout << year << \" is a century year.\" << std::endl;\n    } else {\n        std::cout << year << \" is not a century year.\" << std::endl;\n    }\n    return 0;\n}\n```"
  },
  {
    "task": "Create a program that checks if a date falls on a weekend.",
    "code": "```cpp\n#include <iostream>\n\nbool isWeekend(int day, int month, int year) {\n    // Using Zeller's Congruence to calculate the day of the week\n    if (month < 3) {\n        month += 12;\n        year -= 1;\n    }\n    int k = year % 100;\n    int j = year / 100;\n    int h = (day + 13 * (month + 1) / 5 + k + k / 4 + j / 4 + 5 * j) % 7;\n    // 0 = Saturday, 1 = Sunday\n    return (h == 0 || h == 1);\n}\n\nint main() {\n    int day, month, year;\n    std::cout << \"Enter day: \";\n    std::cin >> day;\n    std::cout << \"Enter month: \";\n    std::cin >> month;\n    std::cout << \"Enter year: \";\n    std::cin >> year;\n    \n    if (isWeekend(day, month, year)) {\n        std::cout << \"The date falls on a weekend.\" << std::endl;\n    } else {\n        std::cout << \"The date does not fall on a weekend.\" << std::endl;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Develop a routine that suggests a book based on genre preference.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nvoid suggestBook(const std::string& genre) {\n    if (genre == \"science fiction\") {\n        std::cout << \"Suggested Book: 'Dune' by Frank Herbert\" << std::endl;\n    } else if (genre == \"fantasy\") {\n        std::cout << \"Suggested Book: 'The Hobbit' by J.R.R. Tolkien\" << std::endl;\n    } else if (genre == \"mystery\") {\n        std::cout << \"Suggested Book: 'The Girl with the Dragon Tattoo' by Stieg Larsson\" << std::endl;\n    } else if (genre == \"romance\") {\n        std::cout << \"Suggested Book: 'Pride and Prejudice' by Jane Austen\" << std::endl;\n    } else if (genre == \"horror\") {\n        std::cout << \"Suggested Book: 'The Shining' by Stephen King\" << std::endl;\n    } else {\n        std::cout << \"Sorry, no suggestions available for this genre.\" << std::endl;\n    }\n}\n\nint main() {\n    std::string genre;\n    std::cout << \"Enter your preferred genre: \";\n    std::getline(std::cin, genre);\n    suggestBook(genre);\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a system that determines if a student passes or fails based on their grades.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    double grade;\n    std::cout << \"Enter the student's grade: \";\n    std::cin >> grade;\n\n    if (grade >= 50.0) {\n        std::cout << \"The student passes.\" << std::endl;\n    } else {\n        std::cout << \"The student fails.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a function to validate if a string is a valid URL.",
    "code": "```cpp\n#include <iostream>\n#include <regex>\n\nbool isValidURL(const std::string& url) {\n    const std::regex urlPattern(R\"(^((http|https)://)?([a-zA-Z0-9.-]+)\\.([a-zA-Z]{2,})(:[0-9]{1,5})?(/.*)?$)\");\n    return std::regex_match(url, urlPattern);\n}\n\nint main() {\n    std::string testURL1 = \"https://www.example.com\";\n    std::string testURL2 = \"ftp://example.com\";\n\n    if (isValidURL(testURL1)) {\n        std::cout << testURL1 << \" is a valid URL.\" << std::endl;\n    } else {\n        std::cout << testURL1 << \" is not a valid URL.\" << std::endl;\n    }\n\n    if (isValidURL(testURL2)) {\n        std::cout << testURL2 << \" is a valid URL.\" << std::endl;\n    } else {\n        std::cout << testURL2 << \" is not a valid URL.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a program that checks if a point is inside a rectangle given its coordinates.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    double rectX1, rectY1, rectX2, rectY2;\n    double pointX, pointY;\n    \n    std::cout << \"Enter bottom-left and top-right coordinates of the rectangle: \";\n    std::cin >> rectX1 >> rectY1 >> rectX2 >> rectY2;\n\n    std::cout << \"Enter the point coordinates: \";\n    std::cin >> pointX >> pointY;\n\n    if (pointX >= rectX1 && pointX <= rectX2 && pointY >= rectY1 && pointY <= rectY2) {\n        std::cout << \"The point is inside the rectangle.\" << std::endl;\n    } else {\n        std::cout << \"The point is outside the rectangle.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a script to determine if a word can be constructed from a given set of letters.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n#include <unordered_map>\n\nbool canConstructWord(const std::string& word, const std::string& letters) {\n    std::unordered_map<char, int> letterCount;\n    \n    for (char letter : letters) {\n        letterCount[letter]++;\n    }\n    \n    for (char letter : word) {\n        if (letterCount[letter] > 0) {\n            letterCount[letter]--;\n        } else {\n            return false;\n        }\n    }\n    \n    return true;\n}\n\nint main() {\n    std::string word = \"example\";\n    std::string letters = \"aelpxme\";\n    \n    if (canConstructWord(word, letters)) {\n        std::cout << \"The word can be constructed from the given letters.\" << std::endl;\n    } else {\n        std::cout << \"The word cannot be constructed from the given letters.\" << std::endl;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Develop a routine that calculates insurance premiums based on age and driving record.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\ndouble calculateInsurancePremium(int age, const std::string& drivingRecord) {\n    double premium = 0.0;\n\n    if (age < 25) {\n        premium = 1500.0;\n    } else if (age >= 25 && age <= 60) {\n        premium = 1000.0;\n    } else {\n        premium = 1200.0;\n    }\n\n    if (drivingRecord == \"good\") {\n        premium *= 0.8;\n    } else if (drivingRecord == \"bad\") {\n        premium *= 1.2;\n    }\n\n    return premium;\n}\n\nint main() {\n    int age;\n    std::string drivingRecord;\n\n    std::cout << \"Enter age: \";\n    std::cin >> age;\n    std::cout << \"Enter driving record (good, average, bad): \";\n    std::cin >> drivingRecord;\n\n    double premium = calculateInsurancePremium(age, drivingRecord);\n    std::cout << \"The insurance premium is: $\" << premium << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a program that checks for palindrome sentences.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n#include <algorithm>\n#include <cctype>\n\nbool isPalindrome(const std::string& sentence) {\n    std::string filtered;\n    for (char ch : sentence) {\n        if (std::isalnum(ch)) {\n            filtered += std::tolower(ch);\n        }\n    }\n    std::string reversed = filtered;\n    std::reverse(reversed.begin(), reversed.end());\n    return filtered == reversed;\n}\n\nint main() {\n    std::string input;\n    std::cout << \"Enter a sentence: \";\n    std::getline(std::cin, input);\n\n    if (isPalindrome(input)) {\n        std::cout << \"The sentence is a palindrome.\" << std::endl;\n    } else {\n        std::cout << \"The sentence is not a palindrome.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a function to evaluate if a string contains balanced parentheses.",
    "code": "```cpp\n#include <stack>\n#include <string>\n\nbool isBalanced(const std::string& str) {\n    std::stack<char> s;\n    for (char ch : str) {\n        if (ch == '(') {\n            s.push(ch);\n        } else if (ch == ')') {\n            if (s.empty() || s.top() != '(') {\n                return false;\n            }\n            s.pop();\n        }\n    }\n    return s.empty();\n}\n```"
  },
  {
    "task": "Write a program that suggests a pet based on living conditions and preferences.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nint main() {\n    std::string livingCondition;\n    std::string preference;\n    \n    std::cout << \"Do you live in a house or an apartment? \";\n    std::cin >> livingCondition;\n    \n    std::cout << \"Do you prefer a low maintenance or high maintenance pet? \";\n    std::cin >> preference;\n    \n    if (livingCondition == \"house\") {\n        if (preference == \"low\") {\n            std::cout << \"You might like a fish.\" << std::endl;\n        } else if (preference == \"high\") {\n            std::cout << \"You might like a dog.\" << std::endl;\n        } else {\n            std::cout << \"Invalid preference input.\" << std::endl;\n        }\n    } else if (livingCondition == \"apartment\") {\n        if (preference == \"low\") {\n            std::cout << \"You might like a cat.\" << std::endl;\n        } else if (preference == \"high\") {\n            std::cout << \"You might like a bird.\" << std::endl;\n        } else {\n            std::cout << \"Invalid preference input.\" << std::endl;\n        }\n    } else {\n        std::cout << \"Invalid living condition input.\" << std::endl;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Create a routine that determines if a phone number is valid based on format.",
    "code": "```cpp\n#include <iostream>\n#include <regex>\n\nbool isValidPhoneNumber(const std::string& phoneNumber) {\n    std::regex pattern(R\"(^\\+?(\\d{1,3})?[-.\\s]?\\(?\\d{1,4}\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}$)\");\n    return std::regex_match(phoneNumber, pattern);\n}\n\nint main() {\n    std::string phoneNumber;\n    std::cout << \"Enter a phone number: \";\n    std::getline(std::cin, phoneNumber);\n\n    if (isValidPhoneNumber(phoneNumber)) {\n        std::cout << \"The phone number is valid.\" << std::endl;\n    } else {\n        std::cout << \"The phone number is invalid.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a function that checks if two rectangles overlap.",
    "code": "```cpp\n#include <iostream>\n\nstruct Rectangle {\n    int x, y, width, height;\n};\n\nbool doRectanglesOverlap(const Rectangle& rect1, const Rectangle& rect2) {\n    if (rect1.x + rect1.width <= rect2.x || rect2.x + rect2.width <= rect1.x) {\n        return false;\n    }\n    if (rect1.y + rect1.height <= rect2.y || rect2.y + rect2.height <= rect1.y) {\n        return false;\n    }\n    return true;\n}\n\nint main() {\n    Rectangle rect1 = {0, 0, 2, 2};\n    Rectangle rect2 = {1, 1, 2, 2};\n\n    if (doRectanglesOverlap(rect1, rect2)) {\n        std::cout << \"Rectangles overlap.\\n\";\n    } else {\n        std::cout << \"Rectangles do not overlap.\\n\";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a program that chooses a beverage based on user input time.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nint main() {\n    int hour;\n    std::cout << \"Enter the current hour (0-23): \";\n    std::cin >> hour;\n\n    std::string beverage;\n\n    if (hour >= 0 && hour < 12) {\n        beverage = \"Coffee\";\n    } else if (hour >= 12 && hour < 18) {\n        beverage = \"Tea\";\n    } else if (hour >= 18 && hour <= 23) {\n        beverage = \"Juice\";\n    } else {\n        std::cout << \"Invalid hour entered.\" << std::endl;\n        return 1;\n    }\n\n    std::cout << \"Recommended beverage: \" << beverage << std::endl;\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a script to determine if a URL is secure (HTTPS).",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nbool isSecureURL(const std::string& url) {\n    if (url.substr(0, 8) == \"https://\") {\n        return true;\n    }\n    return false;\n}\n\nint main() {\n    std::string url;\n    std::cout << \"Enter a URL: \";\n    std::cin >> url;\n\n    if (isSecureURL(url)) {\n        std::cout << \"The URL is secure (HTTPS).\" << std::endl;\n    } else {\n        std::cout << \"The URL is not secure.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that outputs different messages based on the input number's divisibility.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nstd::string checkDivisibility(int number) {\n    if (number % 15 == 0) {\n        return \"Divisible by both 3 and 5\";\n    } else if (number % 3 == 0) {\n        return \"Divisible by 3\";\n    } else if (number % 5 == 0) {\n        return \"Divisible by 5\";\n    } else {\n        return \"Not divisible by 3 or 5\";\n    }\n}\n\nint main() {\n    int number;\n    std::cout << \"Enter a number: \";\n    std::cin >> number;\n    std::cout << checkDivisibility(number) << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Create a program to decide if a person should bring an umbrella based on the weather forecast.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nint main() {\n    std::string weatherForecast;\n\n    std::cout << \"Enter the weather forecast (sunny, rainy, cloudy): \";\n    std::cin >> weatherForecast;\n\n    if (weatherForecast == \"rainy\") {\n        std::cout << \"You should bring an umbrella.\" << std::endl;\n    } else {\n        std::cout << \"You do not need to bring an umbrella.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a routine that checks if a chess move is valid.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n#include <cctype>\n\nbool isValidMove(std::string from, std::string to) {\n    if (from.size() != 2 || to.size() != 2)\n        return false;\n\n    char fromFile = from[0];\n    char fromRank = from[1];\n    char toFile = to[0];\n    char toRank = to[1];\n\n    if (!isalpha(fromFile) || !isdigit(fromRank) || !isalpha(toFile) || !isdigit(toRank))\n        return false;\n\n    fromFile = tolower(fromFile);\n    toFile = tolower(toFile);\n\n    if (fromFile < 'a' || fromFile > 'h' || fromRank < '1' || fromRank > '8' ||\n        toFile < 'a' || toFile > 'h' || toRank < '1' || toRank > '8')\n        return false;\n\n    // Example condition for a basic move, e.g., a single square move\n    int fileDiff = abs(toFile - fromFile);\n    int rankDiff = abs(toRank - fromRank);\n\n    if ((fileDiff <= 1 && rankDiff <= 1) && !(fileDiff == 0 && rankDiff == 0))\n        return true;\n\n    return false;\n}\n\nint main() {\n    std::string from, to;\n    std::cout << \"Enter move (e.g., e2 e4): \";\n    std::cin >> from >> to;\n\n    if (isValidMove(from, to)) {\n        std::cout << \"Valid move.\" << std::endl;\n    } else {\n        std::cout << \"Invalid move.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a program that outputs the number of days in a given month.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    int month;\n    std::cout << \"Enter month number (1-12): \";\n    std::cin >> month;\n    \n    int days;\n    if (month == 1 || month == 3 || month == 5 || month == 7 ||\n        month == 8 || month == 10 || month == 12) {\n        days = 31;\n    } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n        days = 30;\n    } else if (month == 2) {\n        days = 28;\n    } else {\n        std::cout << \"Invalid month number.\" << std::endl;\n        return 1;\n    }\n    \n    std::cout << \"Number of days: \" << days << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Design a function that validates if a string is a valid hexadecimal number.",
    "code": "```cpp\n#include <iostream>\n#include <cctype>\n\nbool isValidHex(const std::string& str) {\n    if (str.empty()) return false;\n    for (char c : str) {\n        if (!std::isxdigit(c)) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint main() {\n    std::string test1 = \"1A3F\";\n    std::string test2 = \"GHIJ\";\n    std::cout << isValidHex(test1) << std::endl; // Should output 1 (true)\n    std::cout << isValidHex(test2) << std::endl; // Should output 0 (false)\n    return 0;\n}\n```"
  },
  {
    "task": "Write a script that checks if a word is present in a list of predefined words.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n\nint main() {\n    std::vector<std::string> predefinedWords = {\"apple\", \"banana\", \"cherry\", \"date\", \"grape\"};\n    std::string wordToCheck;\n    \n    std::cout << \"Enter a word to check: \";\n    std::cin >> wordToCheck;\n\n    bool found = false;\n    for (const auto& word : predefinedWords) {\n        if (word == wordToCheck) {\n            found = true;\n            break;\n        }\n    }\n\n    if (found) {\n        std::cout << \"The word is present in the list.\" << std::endl;\n    } else {\n        std::cout << \"The word is not present in the list.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a routine to decide the correct tax bracket for a given income.",
    "code": "```cpp\n#include <iostream>\n\nstd::string getTaxBracket(double income) {\n    if (income <= 9875) {\n        return \"10%\";\n    } else if (income <= 40125) {\n        return \"12%\";\n    } else if (income <= 85525) {\n        return \"22%\";\n    } else if (income <= 163300) {\n        return \"24%\";\n    } else if (income <= 207350) {\n        return \"32%\";\n    } else if (income <= 518400) {\n        return \"35%\";\n    } else {\n        return \"37%\";\n    }\n}\n\nint main() {\n    double income;\n    std::cout << \"Enter your income: \";\n    std::cin >> income;\n    std::cout << \"Your tax bracket is: \" << getTaxBracket(income) << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a function that determines if a point is within a triangle.",
    "code": "```cpp\n#include <iostream>\n\nstruct Point {\n    double x, y;\n};\n\ndouble sign(Point p1, Point p2, Point p3) {\n    return (p1.x - p3.x) * (p2.y - p3.y) - (p2.x - p3.x) * (p1.y - p3.y);\n}\n\nbool isPointInTriangle(Point pt, Point v1, Point v2, Point v3) {\n    double d1, d2, d3;\n    bool has_neg, has_pos;\n\n    d1 = sign(pt, v1, v2);\n    d2 = sign(pt, v2, v3);\n    d3 = sign(pt, v3, v1);\n\n    has_neg = (d1 < 0) || (d2 < 0) || (d3 < 0);\n    has_pos = (d1 > 0) || (d2 > 0) || (d3 > 0);\n\n    return !(has_neg && has_pos);\n}\n\nint main() {\n    Point pt = {0.0, 0.0};\n    Point v1 = {0.0, 0.0};\n    Point v2 = {5.0, 0.0};\n    Point v3 = {0.0, 5.0};\n\n    if (isPointInTriangle(pt, v1, v2, v3)) {\n        std::cout << \"The point is inside the triangle.\" << std::endl;\n    } else {\n        std::cout << \"The point is outside the triangle.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a program that checks if a given string is a valid binary number.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nbool isValidBinary(const std::string& str) {\n    for (char c : str) {\n        if (c != '0' && c != '1') {\n            return false;\n        }\n    }\n    return true;\n}\n\nint main() {\n    std::string input;\n    std::cout << \"Enter a string: \";\n    std::cin >> input;\n\n    if (isValidBinary(input)) {\n        std::cout << \"The string is a valid binary number.\\n\";\n    } else {\n        std::cout << \"The string is not a valid binary number.\\n\";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a system to evaluate the risk level of an investment based on criteria.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nstd::string evaluateRiskLevel(double investmentAmount, double volatilityIndex, double marketTrend) {\n    if (investmentAmount > 1000000) {\n        if (volatilityIndex > 50.0) {\n            return \"High Risk\";\n        } else {\n            if (marketTrend > 0.5) {\n                return \"Medium Risk\";\n            } else {\n                return \"High Risk\";\n            }\n        }\n    } else {\n        if (volatilityIndex > 50.0) {\n            return \"Medium Risk\";\n        } else {\n            if (marketTrend > 0.5) {\n                return \"Low Risk\";\n            } else {\n                return \"Medium Risk\";\n            }\n        }\n    }\n}\n\nint main() {\n    double investmentAmount, volatilityIndex, marketTrend;\n    \n    std::cout << \"Enter investment amount: \";\n    std::cin >> investmentAmount;\n    std::cout << \"Enter volatility index: \";\n    std::cin >> volatilityIndex;\n    std::cout << \"Enter market trend: \";\n    std::cin >> marketTrend;\n    \n    std::string riskLevel = evaluateRiskLevel(investmentAmount, volatilityIndex, marketTrend);\n    std::cout << \"Risk Level: \" << riskLevel << std::endl;\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Write a program that suggests a vacation destination based on budget and preferences.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nint main() {\n    double budget;\n    std::string preference;\n\n    std::cout << \"Enter your budget: \";\n    std::cin >> budget;\n    std::cout << \"Do you prefer 'beach', 'mountains', or 'city'? \";\n    std::cin >> preference;\n\n    if (budget < 500) {\n        if (preference == \"beach\") {\n            std::cout << \"Suggested destination: Local beach\\n\";\n        } else if (preference == \"mountains\") {\n            std::cout << \"Suggested destination: Nearby mountains\\n\";\n        } else if (preference == \"city\") {\n            std::cout << \"Suggested destination: Explore your city\\n\";\n        } else {\n            std::cout << \"Invalid preference\\n\";\n        }\n    } else if (budget >= 500 && budget < 1000) {\n        if (preference == \"beach\") {\n            std::cout << \"Suggested destination: National beach resort\\n\";\n        } else if (preference == \"mountains\") {\n            std::cout << \"Suggested destination: National park\\n\";\n        } else if (preference == \"city\") {\n            std::cout << \"Suggested destination: Major city in your country\\n\";\n        } else {\n            std::cout << \"Invalid preference\\n\";\n        }\n    } else {\n        if (preference == \"beach\") {\n            std::cout << \"Suggested destination: International beach\\n\";\n        } else if (preference == \"mountains\") {\n            std::cout << \"Suggested destination: International mountain range\\n\";\n        } else if (preference == \"city\") {\n            std::cout << \"Suggested destination: International city\\n\";\n        } else {\n            std::cout << \"Invalid preference\\n\";\n        }\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Create a routine that checks if a username is already taken in a database.",
    "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n\nbool isUsernameTaken(const std::vector<std::string>& database, const std::string& username) {\n    for (const auto& user : database) {\n        if (user == username) {\n            return true;\n        }\n    }\n    return false;\n}\n\nint main() {\n    std::vector<std::string> database = {\"alice\", \"bob\", \"charlie\"};\n    std::string usernameToCheck = \"alice\";\n\n    if (isUsernameTaken(database, usernameToCheck)) {\n        std::cout << \"Username is already taken.\" << std::endl;\n    } else {\n        std::cout << \"Username is available.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a function that determines if a string is a valid IPv4 address.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n#include <sstream>\n\nbool isValidIPv4(const std::string& ip) {\n    std::istringstream ss(ip);\n    std::string segment;\n    int count = 0;\n    \n    while (std::getline(ss, segment, '.')) {\n        if (segment.empty() || segment.size() > 3) return false;\n        for (char c : segment) {\n            if (!isdigit(c)) return false;\n        }\n        int num = std::stoi(segment);\n        if (num < 0 || num > 255) return false;\n        if (segment[0] == '0' && segment.size() > 1) return false;\n        count++;\n    }\n    \n    return count == 4;\n}\n\nint main() {\n    std::string ip;\n    std::cout << \"Enter an IPv4 address: \";\n    std::cin >> ip;\n    \n    if (isValidIPv4(ip)) {\n        std::cout << \"Valid IPv4 address.\\n\";\n    } else {\n        std::cout << \"Invalid IPv4 address.\\n\";\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Implement a program to decide which transportation method is quickest based on distance.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    double distance;\n    std::cout << \"Enter the distance in kilometers: \";\n    std::cin >> distance;\n\n    if (distance < 1) {\n        std::cout << \"Walking is the quickest method for distances less than 1 km.\" << std::endl;\n    } else if (distance < 5) {\n        std::cout << \"Bicycling is the quickest method for distances less than 5 km.\" << std::endl;\n    } else if (distance < 20) {\n        std::cout << \"Driving a car is the quickest method for distances less than 20 km.\" << std::endl;\n    } else {\n        std::cout << \"Taking a train is the quickest method for distances 20 km or more.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a script to validate if a number is a prime number.",
    "code": "```cpp\n#include <iostream>\n\nbool isPrime(int num) {\n    if (num <= 1) return false;\n    if (num == 2) return true;\n    if (num % 2 == 0) return false;\n    for (int i = 3; i * i <= num; i += 2) {\n        if (num % i == 0) return false;\n    }\n    return true;\n}\n\nint main() {\n    int number;\n    std::cout << \"Enter a number: \";\n    std::cin >> number;\n\n    if (isPrime(number)) {\n        std::cout << number << \" is a prime number.\" << std::endl;\n    } else {\n        std::cout << number << \" is not a prime number.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that checks if a number is divisible by another number without remainder.",
    "code": "```cpp\n#include <iostream>\n\nbool isDivisible(int num, int divisor) {\n    if (divisor == 0) {\n        return false; // Avoid division by zero\n    }\n    return num % divisor == 0;\n}\n\nint main() {\n    int num = 10;\n    int divisor = 2;\n    \n    if (isDivisible(num, divisor)) {\n        std::cout << num << \" is divisible by \" << divisor << std::endl;\n    } else {\n        std::cout << num << \" is not divisible by \" << divisor << std::endl;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Create a program that determines the type of a quadrilateral based on side lengths.",
    "code": "```cpp\n#include <iostream>\n\nint main() {\n    double a, b, c, d;\n    std::cout << \"Enter the lengths of the four sides of the quadrilateral: \";\n    std::cin >> a >> b >> c >> d;\n\n    if (a == b && b == c && c == d) {\n        std::cout << \"The quadrilateral is a square or rhombus.\" << std::endl;\n    } else if (a == c && b == d) {\n        if (a == b) {\n            std::cout << \"The quadrilateral is a rectangle.\" << std::endl;\n        } else {\n            std::cout << \"The quadrilateral is a parallelogram.\" << std::endl;\n        }\n    } else {\n        std::cout << \"The quadrilateral is an irregular quadrilateral.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a routine to check if a sentence contains all letters of the alphabet.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n#include <unordered_set>\n#include <algorithm>\n\nbool containsAllLetters(const std::string& sentence) {\n    std::unordered_set<char> letters;\n    for (char ch : sentence) {\n        if (std::isalpha(ch)) {\n            letters.insert(std::tolower(ch));\n        }\n    }\n    return letters.size() == 26;\n}\n\nint main() {\n    std::string sentence;\n    std::cout << \"Enter a sentence: \";\n    std::getline(std::cin, sentence);\n\n    if (containsAllLetters(sentence)) {\n        std::cout << \"The sentence contains all letters of the alphabet.\\n\";\n    } else {\n        std::cout << \"The sentence does not contain all letters of the alphabet.\\n\";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a program that outputs the appropriate error message based on an error code.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nint main() {\n    int errorCode;\n    std::cout << \"Enter error code: \";\n    std::cin >> errorCode;\n    \n    std::string errorMessage;\n    \n    if (errorCode == 1) {\n        errorMessage = \"Error 1: Invalid input.\";\n    } else if (errorCode == 2) {\n        errorMessage = \"Error 2: Connection failed.\";\n    } else if (errorCode == 3) {\n        errorMessage = \"Error 3: File not found.\";\n    } else if (errorCode == 4) {\n        errorMessage = \"Error 4: Access denied.\";\n    } else {\n        errorMessage = \"Unknown error code.\";\n    }\n    \n    std::cout << errorMessage << std::endl;\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Design a function that categorizes a movie rating as G, PG, PG-13, or R.",
    "code": "```cpp\n#include <string>\n\nstd::string categorizeMovieRating(int rating) {\n    if (rating <= 5) {\n        return \"G\";\n    } else if (rating <= 10) {\n        return \"PG\";\n    } else if (rating <= 13) {\n        return \"PG-13\";\n    } else {\n        return \"R\";\n    }\n}\n```"
  },
  {
    "task": "Write a script to check if a string is a valid Roman numeral.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n#include <regex>\n\nbool isValidRomanNumeral(const std::string& s) {\n    std::regex romanPattern(\"^M{0,4}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})$\");\n    return std::regex_match(s, romanPattern);\n}\n\nint main() {\n    std::string input;\n    std::cout << \"Enter a string: \";\n    std::cin >> input;\n    \n    if (isValidRomanNumeral(input)) {\n        std::cout << \"The string is a valid Roman numeral.\" << std::endl;\n    } else {\n        std::cout << \"The string is not a valid Roman numeral.\" << std::endl;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Create a routine that decides if a person can retire based on age and years worked.",
    "code": "```cpp\n#include <iostream>\n\nbool canRetire(int age, int yearsWorked) {\n    if (age >= 65 || yearsWorked >= 30) {\n        return true;\n    }\n    return false;\n}\n\nint main() {\n    int age;\n    int yearsWorked;\n\n    std::cout << \"Enter age: \";\n    std::cin >> age;\n    std::cout << \"Enter years worked: \";\n    std::cin >> yearsWorked;\n\n    if (canRetire(age, yearsWorked)) {\n        std::cout << \"The person can retire.\" << std::endl;\n    } else {\n        std::cout << \"The person cannot retire yet.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a function that outputs a different emoji based on user mood input.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nstd::string getEmojiForMood(const std::string& mood) {\n    if (mood == \"happy\") {\n        return \"\ud83d\ude0a\";\n    } else if (mood == \"sad\") {\n        return \"\ud83d\ude22\";\n    } else if (mood == \"angry\") {\n        return \"\ud83d\ude20\";\n    } else if (mood == \"surprised\") {\n        return \"\ud83d\ude2e\";\n    } else {\n        return \"\ud83d\ude10\";\n    }\n}\n\nint main() {\n    std::string mood;\n    std::cout << \"Enter your mood: \";\n    std::cin >> mood;\n    std::cout << \"Emoji for your mood: \" << getEmojiForMood(mood) << std::endl;\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a program that checks if a password meets security requirements.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n#include <cctype>\n\nbool isPasswordSecure(const std::string& password) {\n    if (password.length() < 8) return false;\n\n    bool hasUpper = false, hasLower = false, hasDigit = false, hasSpecial = false;\n\n    for (char ch : password) {\n        if (isupper(ch)) hasUpper = true;\n        else if (islower(ch)) hasLower = true;\n        else if (isdigit(ch)) hasDigit = true;\n        else if (ispunct(ch)) hasSpecial = true;\n\n        if (hasUpper && hasLower && hasDigit && hasSpecial) return true;\n    }\n\n    return false;\n}\n\nint main() {\n    std::string password;\n    std::cout << \"Enter your password: \";\n    std::cin >> password;\n\n    if (isPasswordSecure(password)) {\n        std::cout << \"Password is secure.\" << std::endl;\n    } else {\n        std::cout << \"Password does not meet security requirements.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Design a script to determine if a number is a palindrome when reversed.",
    "code": "```cpp\n#include <iostream>\n\nbool isPalindrome(int number) {\n    int originalNumber = number;\n    int reversedNumber = 0;\n    \n    while (number > 0) {\n        int digit = number % 10;\n        reversedNumber = reversedNumber * 10 + digit;\n        number /= 10;\n    }\n    \n    return originalNumber == reversedNumber;\n}\n\nint main() {\n    int number;\n    std::cout << \"Enter a number: \";\n    std::cin >> number;\n    \n    if (isPalindrome(number)) {\n        std::cout << \"The number is a palindrome.\" << std::endl;\n    } else {\n        std::cout << \"The number is not a palindrome.\" << std::endl;\n    }\n    \n    return 0;\n}\n```"
  },
  {
    "task": "Write a function that evaluates if a given day is a holiday.",
    "code": "```cpp\n#include <string>\n\nbool isHoliday(const std::string &day) {\n    if (day == \"New Year's Day\" || \n        day == \"Christmas\" || \n        day == \"Independence Day\" || \n        day == \"Thanksgiving Day\") {\n        return true;\n    } else {\n        return false;\n    }\n}\n```"
  },
  {
    "task": "Create a program to decide if a library book is overdue based on the due date.",
    "code": "```cpp\n#include <iostream>\n#include <ctime>\n\nbool isOverdue(int dueYear, int dueMonth, int dueDay) {\n    std::time_t t = std::time(nullptr);\n    std::tm* now = std::localtime(&t);\n\n    if (dueYear < (now->tm_year + 1900)) {\n        return true;\n    } else if (dueYear == (now->tm_year + 1900)) {\n        if (dueMonth < (now->tm_mon + 1)) {\n            return true;\n        } else if (dueMonth == (now->tm_mon + 1)) {\n            if (dueDay < now->tm_mday) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nint main() {\n    int dueYear, dueMonth, dueDay;\n    std::cout << \"Enter the due date (year month day): \";\n    std::cin >> dueYear >> dueMonth >> dueDay;\n    \n    if (isOverdue(dueYear, dueMonth, dueDay)) {\n        std::cout << \"The book is overdue.\\n\";\n    } else {\n        std::cout << \"The book is not overdue.\\n\";\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Develop a routine that checks if a given year is part of a leap century.",
    "code": "```cpp\n#include <iostream>\n\nbool isLeapCentury(int year) {\n    if (year % 400 == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n\n    if (isLeapCentury(year)) {\n        std::cout << year << \" is part of a leap century.\" << std::endl;\n    } else {\n        std::cout << year << \" is not part of a leap century.\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  },
  {
    "task": "Implement a system to determine the correct category for a product based on user input.",
    "code": "```cpp\n#include <iostream>\n#include <string>\n\nint main() {\n    std::string category;\n    std::cout << \"Enter product type: \";\n    std::cin >> category;\n\n    if (category == \"Electronics\") {\n        std::cout << \"Category: Electronics\" << std::endl;\n    } else if (category == \"Clothing\") {\n        std::cout << \"Category: Clothing\" << std::endl;\n    } else if (category == \"Food\") {\n        std::cout << \"Category: Food\" << std::endl;\n    } else {\n        std::cout << \"Category: Unknown\" << std::endl;\n    }\n\n    return 0;\n}\n```"
  }
]