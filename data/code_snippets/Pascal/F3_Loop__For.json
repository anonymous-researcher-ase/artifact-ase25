[
  {
    "task": "Write a program that prints numbers from 1 to 10 using a for loop.",
    "code": "```pascal\nprogram PrintNumbers;\n\nvar\n  i: Integer;\n\nbegin\n  for i := 1 to 10 do\n    WriteLn(i);\nend.\n```"
  },
  {
    "task": "Create a loop that iterates over an array of names and prints each name.",
    "code": "```pascal\nprogram PrintNames;\n\nvar\n  names: array[1..5] of string;\n  i: integer;\n\nbegin\n  names[1] := 'Alice';\n  names[2] := 'Bob';\n  names[3] := 'Charlie';\n  names[4] := 'David';\n  names[5] := 'Eve';\n\n  for i := 1 to 5 do\n    writeln(names[i]);\nend.\n```"
  },
  {
    "task": "Design a for loop to calculate the factorial of a given number.",
    "code": "```pascal\nprogram FactorialCalculation;\n\nvar\n  number, i, factorial: Integer;\n\nbegin\n  Write('Enter a number: ');\n  ReadLn(number);\n  \n  factorial := 1;\n  \n  for i := 1 to number do\n    factorial := factorial * i;\n  \n  WriteLn('Factorial of ', number, ' is ', factorial);\nend.\n```"
  },
  {
    "task": "Implement a program that uses a for loop to sum all even numbers between 1 and 100.",
    "code": "```pascal\nprogram SumEvenNumbers;\n\nvar\n  sum, i: Integer;\n\nbegin\n  sum := 0;\n  \n  for i := 2 to 100 do\n    if i mod 2 = 0 then\n      sum := sum + i;\n      \n  WriteLn('Sum of even numbers between 1 and 100 is: ', sum);\nend.\n```"
  },
  {
    "task": "Use a for loop to generate and print the Fibonacci sequence up to 20 terms.",
    "code": "```pascal\nprogram FibonacciSequence;\n\nvar\n  i, n: integer;\n  a, b, c: longint;\n\nbegin\n  n := 20;\n  a := 0;\n  b := 1;\n  \n  for i := 1 to n do\n  begin\n    if i = 1 then\n      writeln(a)\n    else if i = 2 then\n      writeln(b)\n    else\n    begin\n      c := a + b;\n      writeln(c);\n      a := b;\n      b := c;\n    end;\n  end;\nend.\n```"
  },
  {
    "task": "Construct a for loop that prints the multiplication table for a given number.",
    "code": "```pascal\nprogram MultiplicationTable;\nvar\n  i, number: Integer;\nbegin\n  Write('Enter a number: ');\n  ReadLn(number);\n  for i := 1 to 10 do\n  begin\n    WriteLn(number, ' * ', i, ' = ', number * i);\n  end;\nend.\n```"
  },
  {
    "task": "Write code to iterate through a list of student grades and print only those above a certain threshold.",
    "code": "```pascal\nprogram GradesAboveThreshold;\n\nvar\n  Grades: array[1..5] of Integer = (75, 82, 90, 67, 88);\n  Threshold: Integer;\n  i: Integer;\n\nbegin\n  Threshold := 80;\n\n  for i := 1 to Length(Grades) do\n  begin\n    if Grades[i] > Threshold then\n      WriteLn(Grades[i]);\n  end;\nend.\n```"
  },
  {
    "task": "Create a for loop that appends the square of numbers 1 to 10 to a list.",
    "code": "```pascal\nprogram SquareNumbers;\n\nvar\n  numbers: array[1..10] of Integer;\n  i: Integer;\n\nbegin\n  for i := 1 to 10 do\n  begin\n    numbers[i] := i * i;\n  end;\nend.\n```"
  },
  {
    "task": "Develop a for loop that reverses a given string.",
    "code": "```pascal\nprogram ReverseString;\nvar\n  inputString, reversedString: string;\n  i: Integer;\nbegin\n  inputString := 'Hello, World!';\n  reversedString := '';\n  for i := Length(inputString) downto 1 do\n    reversedString := reversedString + inputString[i];\n  WriteLn('Reversed String: ', reversedString);\nend.\n```"
  },
  {
    "task": "Build a program that uses a for loop to print all elements in a 2D matrix.",
    "code": "```pascal\nprogram Print2DMatrix;\nvar\n  matrix: array[1..3, 1..3] of Integer;\n  i, j: Integer;\nbegin\n  { Initialize the matrix }\n  matrix[1, 1] := 1;\n  matrix[1, 2] := 2;\n  matrix[1, 3] := 3;\n  matrix[2, 1] := 4;\n  matrix[2, 2] := 5;\n  matrix[2, 3] := 6;\n  matrix[3, 1] := 7;\n  matrix[3, 2] := 8;\n  matrix[3, 3] := 9;\n\n  { Print the matrix }\n  for i := 1 to 3 do\n  begin\n    for j := 1 to 3 do\n    begin\n      Write(matrix[i, j]:4);\n    end;\n    Writeln;\n  end;\nend.\n```"
  },
  {
    "task": "Use a for loop to find the maximum value in an array of integers.",
    "code": "```pascal\nprogram FindMaxValue;\nvar\n  arr: array[1..10] of Integer = (3, 5, 7, 2, 8, 1, 4, 10, 6, 9);\n  i, maxValue: Integer;\nbegin\n  maxValue := arr[1];\n  for i := 2 to 10 do\n  begin\n    if arr[i] > maxValue then\n      maxValue := arr[i];\n  end;\n  WriteLn('The maximum value is: ', maxValue);\nend.\n```"
  },
  {
    "task": "Write a program that uses a for loop to print the characters of a string, one per line.",
    "code": "```pascal\nprogram PrintCharacters;\n\nvar\n  str: string;\n  i: Integer;\n\nbegin\n  str := 'YourStringHere';\n  \n  for i := 1 to Length(str) do\n    WriteLn(str[i]);\nend.\n```"
  },
  {
    "task": "Create a for loop that counts the number of vowels in a given sentence.",
    "code": "```pascal\nprogram CountVowels;\n\nvar\n  sentence: string;\n  vowels: set of char;\n  count, i: integer;\n\nbegin\n  sentence := 'Your example sentence here';\n  vowels := ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  count := 0;\n  \n  for i := 1 to length(sentence) do\n    if sentence[i] in vowels then\n      count := count + 1;\n\n  writeln('Number of vowels: ', count);\nend.\n```"
  },
  {
    "task": "Implement a for loop to check if a number is prime by testing divisibility.",
    "code": "```pascal\nprogram CheckPrime;\n\nvar\n  n, i: Integer;\n  isPrime: Boolean;\n\nbegin\n  Write('Enter a number: ');\n  ReadLn(n);\n\n  if n <= 1 then\n    isPrime := False\n  else\n    isPrime := True;\n\n  for i := 2 to n div 2 do\n  begin\n    if n mod i = 0 then\n    begin\n      isPrime := False;\n      Break;\n    end;\n  end;\n\n  if isPrime then\n    WriteLn(n, ' is a prime number.')\n  else\n    WriteLn(n, ' is not a prime number.');\nend.\n```"
  },
  {
    "task": "Design a for loop that prints a pyramid pattern of asterisks with a given height.",
    "code": "```pascal\nprogram PyramidPattern;\nvar\n  i, j, k, height: integer;\nbegin\n  write('Enter the height of the pyramid: ');\n  readln(height);\n\n  for i := 1 to height do\n  begin\n    for j := height downto i + 1 do\n      write(' ');\n    for k := 1 to (2 * i - 1) do\n      write('*');\n    writeln;\n  end;\nend.\n```"
  },
  {
    "task": "Write a program that uses a for loop to calculate the sum of digits of a number.",
    "code": "```pascal\nprogram SumOfDigits;\n\nvar\n  num, digit, sum, i: Integer;\n\nbegin\n  Write('Enter a number: ');\n  ReadLn(num);\n  \n  sum := 0;\n  while num > 0 do\n  begin\n    digit := num mod 10;\n    sum := sum + digit;\n    num := num div 10;\n  end;\n  \n  WriteLn('The sum of the digits is: ', sum);\nend.\n```"
  },
  {
    "task": "Construct a for loop to flatten a list of lists into a single list.",
    "code": "```pascal\nprogram FlattenList;\n\nuses\n  SysUtils;\n\nvar\n  lists: array[1..3] of array of Integer;\n  flattened: array of Integer;\n  i, j, totalLength, index: Integer;\n\nbegin\n  // Initialize the lists of lists\n  lists[1] := [1, 2, 3];\n  lists[2] := [4, 5];\n  lists[3] := [6, 7, 8, 9];\n\n  // Calculate the total length for the flattened list\n  totalLength := 0;\n  for i := 1 to Length(lists) do\n    totalLength := totalLength + Length(lists[i]);\n\n  // Initialize the flattened list with the total length\n  SetLength(flattened, totalLength);\n\n  // Flatten the list of lists\n  index := 0;\n  for i := 1 to Length(lists) do\n  begin\n    for j := 0 to High(lists[i]) do\n    begin\n      flattened[index] := lists[i][j];\n      Inc(index);\n    end;\n  end;\n\n  // Output the flattened list\n  for i := 0 to High(flattened) do\n    Write(flattened[i], ' ');\n\n  WriteLn;\nend.\n```"
  },
  {
    "task": "Use a for loop to generate a list of random numbers and print them.",
    "code": "```pascal\nprogram RandomNumbers;\n\nuses\n  SysUtils;\n\nvar\n  i, num: Integer;\n\nbegin\n  Randomize;\n  for i := 1 to 10 do\n  begin\n    num := Random(100);  // Random number from 0 to 99\n    WriteLn(num);\n  end;\nend.\n```"
  },
  {
    "task": "Create a for loop that iterates through a dictionary and prints its keys and values.",
    "code": "```pascal\nprogram IterateDictionary;\n\nuses SysUtils, Generics.Collections;\n\nvar\n  dict: TDictionary<String, String>;\n  key: String;\nbegin\n  dict := TDictionary<String, String>.Create;\n  try\n    dict.Add('key1', 'value1');\n    dict.Add('key2', 'value2');\n    dict.Add('key3', 'value3');\n\n    for key in dict.Keys do\n    begin\n      Writeln('Key: ', key, ' Value: ', dict[key]);\n    end;\n  finally\n    dict.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Develop a for loop that counts down from 10 to 1 and prints each number.",
    "code": "```pascal\nprogram Countdown;\nvar\n  i: Integer;\nbegin\n  for i := 10 downto 1 do\n    writeln(i);\nend.\n```"
  },
  {
    "task": "Write code to multiply each element in an array by 2 using a for loop.",
    "code": "```pascal\nprogram MultiplyArrayByTwo;\nvar\n  arr: array[1..5] of Integer;\n  i: Integer;\nbegin\n  arr[1] := 1;\n  arr[2] := 2;\n  arr[3] := 3;\n  arr[4] := 4;\n  arr[5] := 5;\n\n  for i := 1 to 5 do\n  begin\n    arr[i] := arr[i] * 2;\n  end;\nend.\n```"
  },
  {
    "task": "Create a for loop that calculates the average of numbers in a list.",
    "code": "```pascal\nprogram AverageOfNumbers;\n\nvar\n  numbers: array of Real;\n  sum, average: Real;\n  i, count: Integer;\n\nbegin\n  numbers := [10.0, 20.0, 30.0, 40.0, 50.0]; { Example list of numbers }\n  sum := 0.0;\n  count := Length(numbers);\n\n  for i := 0 to count - 1 do\n  begin\n    sum := sum + numbers[i];\n  end;\n\n  if count > 0 then\n    average := sum / count\n  else\n    average := 0;\n\n  WriteLn('Average: ', average:0:2);\nend.\n```"
  },
  {
    "task": "Implement a for loop to find duplicate elements in an array.",
    "code": "```pascal\nprogram FindDuplicates;\nvar\n  arr: array[1..10] of Integer = (2, 3, 5, 7, 2, 3, 9, 11, 5, 13);\n  i, j: Integer;\nbegin\n  for i := 1 to 9 do\n    for j := i + 1 to 10 do\n      if arr[i] = arr[j] then\n        WriteLn('Duplicate found: ', arr[i]);\nend.\n```"
  },
  {
    "task": "Design a for loop that removes all occurrences of a specific element from a list.",
    "code": "```pascal\nprogram RemoveElement;\n\nuses SysUtils;\n\nvar\n  originalList, newList: array of Integer;\n  i, valueToRemove, count: Integer;\n  \nbegin\n  originalList := [1, 2, 3, 4, 3, 5, 3, 6];\n  valueToRemove := 3;\n  count := 0;\n  \n  SetLength(newList, Length(originalList));\n  \n  for i := 0 to High(originalList) do\n  begin\n    if originalList[i] <> valueToRemove then\n    begin\n      newList[count] := originalList[i];\n      count := count + 1;\n    end;\n  end;\n  \n  SetLength(newList, count);\n  \n  for i := 0 to High(newList) do\n  begin\n    Write(newList[i], ' ');\n  end;\nend.\n```"
  },
  {
    "task": "Use a for loop to simulate rolling a dice 100 times and count the occurrences of each face.",
    "code": "```pascal\nprogram DiceRollSimulation;\n\nvar\n  i, roll: Integer;\n  faceCount: array[1..6] of Integer;\n\nbegin\n  // Initialize the face count array\n  for i := 1 to 6 do\n    faceCount[i] := 0;\n\n  // Simulate rolling a dice 100 times\n  Randomize;\n  for i := 1 to 100 do\n  begin\n    roll := Random(6) + 1;\n    faceCount[roll] := faceCount[roll] + 1;\n  end;\n\n  // Output the results\n  for i := 1 to 6 do\n    WriteLn('Face ', i, ': ', faceCount[i], ' times');\nend.\n```"
  },
  {
    "task": "Write a for loop that prints all the prime numbers between 1 and 50.",
    "code": "```pascal\nprogram PrimeNumbers;\n\nvar\n  i, j: Integer;\n  isPrime: Boolean;\n\nbegin\n  for i := 2 to 50 do\n  begin\n    isPrime := True;\n    for j := 2 to (i div 2) do\n    begin\n      if (i mod j = 0) then\n      begin\n        isPrime := False;\n        Break;\n      end;\n    end;\n    if isPrime then\n      WriteLn(i);\n  end;\nend.\n```"
  },
  {
    "task": "Develop a for loop that extracts all the uppercase letters from a string.",
    "code": "```pascal\nprogram ExtractUppercaseLetters;\nvar\n  inputString, uppercaseString: string;\n  i: Integer;\nbegin\n  inputString := 'YourSampleStringHere';\n  uppercaseString := '';\n  \n  for i := 1 to Length(inputString) do\n  begin\n    if (inputString[i] >= 'A') and (inputString[i] <= 'Z') then\n    begin\n      uppercaseString := uppercaseString + inputString[i];\n    end;\n  end;\n\n  WriteLn('Uppercase Letters: ', uppercaseString);\nend.\n```"
  },
  {
    "task": "Create a for loop that checks if a list is sorted in ascending order.",
    "code": "```pascal\nprogram CheckSorted;\n\nvar\n  numbers: array[1..5] of Integer = (1, 2, 3, 4, 5);\n  i: Integer;\n  isSorted: Boolean;\n  \nbegin\n  isSorted := True;\n  for i := 1 to High(numbers) - 1 do\n  begin\n    if numbers[i] > numbers[i + 1] then\n    begin\n      isSorted := False;\n      Break;\n    end;\n  end;\n  \n  if isSorted then\n    WriteLn('The list is sorted in ascending order.')\n  else\n    WriteLn('The list is not sorted in ascending order.');\nend.\n```"
  },
  {
    "task": "Implement a for loop to generate a list of the first 10 square numbers.",
    "code": "```pascal\nprogram SquareNumbers;\n\nvar\n  i: Integer;\n  squares: array[1..10] of Integer;\n\nbegin\n  for i := 1 to 10 do\n    squares[i] := i * i;\nend.\n```"
  },
  {
    "task": "Write code to print all the elements of a list that are greater than a given number using a for loop.",
    "code": "```pascal\nprogram PrintElementsGreaterThan;\n\nvar\n  numbers: array[1..5] of Integer = (10, 15, 7, 20, 5);\n  threshold, i: Integer;\n\nbegin\n  threshold := 10;\n  \n  for i := 1 to Length(numbers) do\n  begin\n    if numbers[i] > threshold then\n      WriteLn(numbers[i]);\n  end;\nend.\n```"
  },
  {
    "task": "Construct a for loop that finds the smallest number in an array.",
    "code": "```pascal\nprogram FindSmallestNumber;\n\nvar\n  numbers: array[1..10] of Integer;\n  i, smallest: Integer;\n\nbegin\n  numbers[1] := 34;\n  numbers[2] := 7;\n  numbers[3] := 23;\n  numbers[4] := 32;\n  numbers[5] := 5;\n  numbers[6] := 62;\n  numbers[7] := 14;\n  numbers[8] := 9;\n  numbers[9] := 71;\n  numbers[10] := 4;\n\n  smallest := numbers[1];\n  \n  for i := 2 to 10 do\n    if numbers[i] < smallest then\n      smallest := numbers[i];\n      \n  WriteLn('The smallest number is: ', smallest);\nend.\n```"
  },
  {
    "task": "Develop a for loop that prints the first N lines of Pascal's Triangle.",
    "code": "```pascal\nprogram PascalsTriangle;\n\nvar\n  i, j, n, c: Integer;\n\nbegin\n  n := 5; { You can change this value to print more lines of Pascal's Triangle }\n  \n  for i := 0 to n - 1 do\n  begin\n    c := 1;\n    for j := 0 to i do\n    begin\n      Write(c:4);\n      c := c * (i - j) div (j + 1);\n    end;\n    Writeln;\n  end;\nend.\n```"
  },
  {
    "task": "Create a for loop that calculates the product of all elements in a list.",
    "code": "```pascal\nprogram ProductOfElements;\n\nvar\n  numbers: array of Integer;\n  i, product: Integer;\nbegin\n  numbers := [1, 2, 3, 4, 5]; // Example list\n  product := 1;\n  \n  for i := 0 to High(numbers) do\n  begin\n    product := product * numbers[i];\n  end;\n  \n  WriteLn('Product of all elements: ', product);\nend.\n```"
  },
  {
    "task": "Use a for loop to print numbers from 1 to 100, but replace multiples of 3 with 'Fizz'.",
    "code": "```pascal\nprogram FizzBuzz;\n\nvar\n  i: Integer;\n\nbegin\n  for i := 1 to 100 do\n  begin\n    if i mod 3 = 0 then\n      WriteLn('Fizz')\n    else\n      WriteLn(i);\n  end;\nend.\n```"
  },
  {
    "task": "Write a for loop that iterates over a string and counts the number of words.",
    "code": "```pascal\nprogram CountWordsInString;\n\nuses SysUtils;\n\nvar\n  str: string;\n  i, wordCount: Integer;\n  inWord: Boolean;\nbegin\n  str := 'This is a sample string with several words';\n  wordCount := 0;\n  inWord := False;\n\n  for i := 1 to Length(str) do\n  begin\n    if str[i] in ['A'..'Z', 'a'..'z'] then\n    begin\n      if not inWord then\n      begin\n        inWord := True;\n        Inc(wordCount);\n      end;\n    end\n    else\n      inWord := False;\n  end;\n\n  WriteLn('Number of words: ', wordCount);\nend.\n```"
  },
  {
    "task": "Design a for loop that prints numbers from 1 to 50, but skips numbers divisible by 5.",
    "code": "```pascal\nprogram SkipMultiplesOfFive;\nvar\n  i: Integer;\nbegin\n  for i := 1 to 50 do\n  begin\n    if i mod 5 <> 0 then\n      WriteLn(i);\n  end;\nend.\n```"
  },
  {
    "task": "Implement a for loop that prints a checkerboard pattern of asterisks.",
    "code": "```pascal\nprogram CheckerboardPattern;\nvar\n  row, col: Integer;\nbegin\n  for row := 1 to 8 do\n  begin\n    for col := 1 to 8 do\n    begin\n      if (row + col) mod 2 = 0 then\n        Write('*')\n      else\n        Write(' ');\n    end;\n    Writeln;\n  end;\nend.\n```"
  },
  {
    "task": "Create a for loop that finds the index of a target value in a list.",
    "code": "```pascal\nprogram FindIndex;\n\nvar\n  numbers: array[1..10] of Integer = (5, 3, 8, 6, 2, 9, 1, 4, 7, 0);\n  target, i, index: Integer;\n  found: Boolean;\n\nbegin\n  target := 6;\n  found := False;\n  index := -1;\n\n  for i := 1 to 10 do\n  begin\n    if numbers[i] = target then\n    begin\n      index := i;\n      found := True;\n      Break;\n    end;\n  end;\n\n  if found then\n    WriteLn('Target found at index: ', index)\n  else\n    WriteLn('Target not found.');\nend.\n```"
  },
  {
    "task": "Use a for loop to concatenate a list of strings into a single string.",
    "code": "```pascal\nprogram ConcatenateStrings;\n\nvar\n  strings: array[1..5] of string;\n  result: string;\n  i: integer;\n\nbegin\n  strings[1] := 'Hello';\n  strings[2] := ' ';\n  strings[3] := 'World';\n  strings[4] := '!';\n  strings[5] := ' Goodbye.';\n  \n  result := '';\n  \n  for i := 1 to 5 do\n  begin\n    result := result + strings[i];\n  end;\n  \n  writeln(result);\nend.\n```"
  },
  {
    "task": "Develop a for loop that rotates a list to the right by a given number of positions.",
    "code": "```pascal\nprogram RotateList;\n\nuses SysUtils;\n\nprocedure RotateRight(var arr: array of Integer; positions: Integer);\nvar\n  i, n: Integer;\n  temp: array of Integer;\nbegin\n  n := Length(arr);\n  positions := positions mod n;\n  SetLength(temp, n);\n\n  for i := 0 to n - 1 do\n    temp[(i + positions) mod n] := arr[i];\n    \n  for i := 0 to n - 1 do\n    arr[i] := temp[i];\nend;\n\nvar\n  list: array of Integer;\n  i: Integer;\nbegin\n  list := [1, 2, 3, 4, 5];\n  RotateRight(list, 2);\n\n  for i := 0 to High(list) do\n    Write(list[i]:4);\n  Writeln;\nend.\n```"
  },
  {
    "task": "Write code that uses a for loop to insert an element into a sorted list while maintaining order.",
    "code": "```pascal\nprogram InsertIntoSortedList;\n\nvar\n  sortedList: array[1..100] of Integer;\n  i, j, n, elementToInsert: Integer;\n\nbegin\n  { Initialize the sorted list and number of elements }\n  n := 5;\n  sortedList[1] := 1;\n  sortedList[2] := 3;\n  sortedList[3] := 5;\n  sortedList[4] := 7;\n  sortedList[5] := 9;\n\n  { Element to insert }\n  elementToInsert := 6;\n\n  { Find the position to insert the element }\n  for i := 1 to n do\n  begin\n    if sortedList[i] > elementToInsert then\n    begin\n      { Shift elements to the right }\n      for j := n downto i do\n        sortedList[j + 1] := sortedList[j];\n\n      { Insert the element }\n      sortedList[i] := elementToInsert;\n      break;\n    end;\n  end;\n\n  { If the element is greater than all existing elements, append it }\n  if sortedList[n] < elementToInsert then\n    sortedList[n + 1] := elementToInsert;\n\n  { Increase the count of elements }\n  n := n + 1;\nend.\n```"
  },
  {
    "task": "Implement a for loop that counts the frequency of each character in a string.",
    "code": "```pascal\nprogram CountCharacterFrequency;\n\nvar\n  str: string;\n  freq: array[Char] of Integer;\n  i: Integer;\n  ch: Char;\n\nbegin\n  str := 'example string';  { Change this to your input string }\n  \n  { Initialize the frequency array }\n  for ch := Low(freq) to High(freq) do\n    freq[ch] := 0;\n\n  { Count the frequency of each character }\n  for i := 1 to Length(str) do\n    Inc(freq[str[i]]);\n\n  { Output the frequency of each character }\n  for ch := Low(freq) to High(freq) do\n    if freq[ch] > 0 then\n      Writeln(ch, ': ', freq[ch]);\nend.\n```"
  },
  {
    "task": "Create a for loop that prints all subsets of a given set.",
    "code": "```pascal\nprogram Subsets;\n\nuses\n  SysUtils;\n\nvar\n  setElements: array of string;\n  i, j, n: Integer;\n\nbegin\n  setElements := ['a', 'b', 'c'];\n  n := Length(setElements);\n  \n  for i := 0 to (1 shl n) - 1 do\n  begin\n    Write('{');\n    for j := 0 to n - 1 do\n    begin\n      if (i and (1 shl j)) <> 0 then\n        Write(setElements[j], ' ');\n    end;\n    WriteLn('}');\n  end;\nend.\n```"
  },
  {
    "task": "Design a for loop to generate all permutations of a string.",
    "code": "```pascal\nprogram Permutations;\n\nprocedure Swap(var a, b: Char);\nvar\n  temp: Char;\nbegin\n  temp := a;\n  a := b;\n  b := temp;\nend;\n\nprocedure Permute(s: string; l, r: Integer);\nvar\n  i: Integer;\nbegin\n  if l = r then\n    WriteLn(s)\n  else\n  begin\n    for i := l to r do\n    begin\n      Swap(s[l], s[i]);\n      Permute(s, l + 1, r);\n      Swap(s[l], s[i]);\n    end;\n  end;\nend;\n\nvar\n  str: string;\nbegin\n  str := 'abc';\n  Permute(str, 1, Length(str));\nend.\n```"
  },
  {
    "task": "Write a for loop that sorts an array in descending order.",
    "code": "```pascal\nprogram SortDescending;\n\nvar\n  arr: array[1..10] of integer;\n  i, j, temp: integer;\n\nbegin\n  // Example array initialization\n  arr[1] := 5;\n  arr[2] := 3;\n  arr[3] := 8;\n  arr[4] := 1;\n  arr[5] := 2;\n  arr[6] := 9;\n  arr[7] := 4;\n  arr[8] := 7;\n  arr[9] := 6;\n  arr[10] := 0;\n\n  // Sort array in descending order using a for loop\n  for i := 1 to 9 do\n    for j := i + 1 to 10 do\n      if arr[i] < arr[j] then\n      begin\n        temp := arr[i];\n        arr[i] := arr[j];\n        arr[j] := temp;\n      end;\nend.\n```"
  },
  {
    "task": "Use a for loop to generate a sequence of random characters and print them.",
    "code": "```pascal\nprogram RandomCharacterSequence;\n\nuses\n  SysUtils;\n\nvar\n  i: Integer;\n  randomChar: Char;\nbegin\n  Randomize;\n  for i := 1 to 10 do\n  begin\n    randomChar := Chr(Ord('A') + Random(26)); // Random character from 'A' to 'Z'\n    Write(randomChar);\n  end;\n  Writeln;\nend.\n```"
  },
  {
    "task": "Construct a for loop that finds the common elements between two lists.",
    "code": "```pascal\nprogram FindCommonElements;\n\nvar\n  list1: array[1..5] of Integer = (1, 2, 3, 4, 5);\n  list2: array[1..5] of Integer = (3, 4, 5, 6, 7);\n  i, j: Integer;\n\nbegin\n  for i := 1 to Length(list1) do\n    for j := 1 to Length(list2) do\n      if list1[i] = list2[j] then\n        WriteLn('Common element: ', list1[i]);\nend.\n```"
  },
  {
    "task": "Develop a for loop to calculate and print the cumulative sum of a list.",
    "code": "```pascal\nprogram CumulativeSum;\n\nvar\n  numbers: array[1..5] of Integer = (1, 2, 3, 4, 5);\n  cumulativeSum, i: Integer;\n\nbegin\n  cumulativeSum := 0;\n  for i := 1 to Length(numbers) do\n  begin\n    cumulativeSum := cumulativeSum + numbers[i];\n    WriteLn('Cumulative sum after element ', i, ': ', cumulativeSum);\n  end;\nend.\n```"
  },
  {
    "task": "Create a for loop that prints a diamond pattern using asterisks.",
    "code": "```pascal\nprogram DiamondPattern;\nuses crt;\n\nvar\n  i, j, n: Integer;\n\nbegin\n  n := 5; {Height of upper part of diamond}\n\n  {Upper Part}\n  for i := 1 to n do\n  begin\n    for j := i to n do\n      write(' ');\n    for j := 1 to (2 * i - 1) do\n      write('*');\n    writeln;\n  end;\n\n  {Lower Part}\n  for i := n-1 downto 1 do\n  begin\n    for j := n downto i do\n      write(' ');\n    for j := 1 to (2 * i - 1) do\n      write('*');\n    writeln;\n  end;\nend.\n```"
  },
  {
    "task": "Write a for loop that simulates a countdown timer from a specified number of seconds.",
    "code": "```pascal\nprogram CountdownTimer;\nvar\n  seconds, i: Integer;\nbegin\n  seconds := 10; // specify the starting number of seconds\n  for i := seconds downto 1 do\n  begin\n    writeln('Countdown: ', i, ' seconds');\n  end;\n  writeln('Countdown complete!');\nend.\n```"
  },
  {
    "task": "Use a for loop to print the transpose of a matrix.",
    "code": "```pascal\nprogram TransposeMatrix;\n\nconst\n  ROWS = 3;\n  COLS = 3;\n\nvar\n  matrix: array[1..ROWS, 1..COLS] of Integer;\n  i, j: Integer;\n\nbegin\n  { Initialize the matrix }\n  matrix[1, 1] := 1; matrix[1, 2] := 2; matrix[1, 3] := 3;\n  matrix[2, 1] := 4; matrix[2, 2] := 5; matrix[2, 3] := 6;\n  matrix[3, 1] := 7; matrix[3, 2] := 8; matrix[3, 3] := 9;\n\n  { Print the transpose of the matrix }\n  for i := 1 to COLS do\n  begin\n    for j := 1 to ROWS do\n    begin\n      Write(matrix[j, i]:4);\n    end;\n    Writeln;\n  end;\nend.\n```"
  },
  {
    "task": "Implement a for loop that reverses the order of words in a sentence.",
    "code": "```pascal\nprogram ReverseWords;\n\nvar\n  sentence, reversedSentence: string;\n  words: array of string;\n  i, wordCount: Integer;\n\nbegin\n  sentence := 'The quick brown fox';\n  words := sentence.Split([' ']);\n  wordCount := Length(words);\n  reversedSentence := '';\n  \n  for i := wordCount - 1 downto 0 do\n  begin\n    reversedSentence := reversedSentence + words[i];\n    if i > 0 then\n      reversedSentence := reversedSentence + ' ';\n  end;\n  \n  WriteLn(reversedSentence);\nend.\n```"
  },
  {
    "task": "Create a for loop that deletes elements from a list that are less than a given value.",
    "code": "```pascal\nprogram RemoveElements;\n\nvar\n  numbers: array of Integer;\n  filteredNumbers: array of Integer;\n  i, count, threshold: Integer;\n\nbegin\n  { Example list and threshold }\n  numbers := [5, 8, 2, 10, 3];\n  threshold := 5;\n  count := 0;\n  SetLength(filteredNumbers, Length(numbers));\n\n  { For loop to filter elements }\n  for i := 0 to High(numbers) do\n  begin\n    if numbers[i] >= threshold then\n    begin\n      filteredNumbers[count] := numbers[i];\n      Inc(count);\n    end;\n  end;\n\n  { Resize the array to the number of filtered elements }\n  SetLength(filteredNumbers, count);\n\n  { Print the filtered list }\n  for i := 0 to High(filteredNumbers) do\n    WriteLn(filteredNumbers[i]);\nend.\n```"
  },
  {
    "task": "Design a for loop to merge two sorted lists into a single sorted list.",
    "code": "```pascal\nprogram MergeSortedLists;\n\nvar\n  list1, list2, mergedList: array of Integer;\n  i, j, k, n, m: Integer;\n\nbegin\n  { Initialize the lists }\n  list1 := [1, 3, 5, 7];\n  list2 := [2, 4, 6, 8];\n  n := Length(list1);\n  m := Length(list2);\n  SetLength(mergedList, n + m);\n\n  i := 0;\n  j := 0;\n  k := 0;\n\n  { Merge the lists using a for loop }\n  for k := 0 to n + m - 1 do\n  begin\n    if (i < n) and ((j >= m) or (list1[i] <= list2[j])) then\n    begin\n      mergedList[k] := list1[i];\n      Inc(i);\n    end\n    else\n    begin\n      mergedList[k] := list2[j];\n      Inc(j);\n    end;\n  end;\n\n  { Output the merged list }\n  for k := 0 to n + m - 1 do\n    Write(mergedList[k], ' ');\n\nend.\n```"
  },
  {
    "task": "Write a for loop that calculates the power of a number using repeated multiplication.",
    "code": "```pascal\nprogram CalculatePower;\n\nvar\n  base, exponent, result, i: Integer;\n\nbegin\n  base := 2;      { Example base number }\n  exponent := 3;  { Example exponent }\n  result := 1;\n  \n  for i := 1 to exponent do\n    result := result * base;\n  \n  WriteLn('Result: ', result);\nend.\n```"
  },
  {
    "task": "Use a for loop to find the longest word in a list of words.",
    "code": "```pascal\nprogram FindLongestWord;\n\nvar\n  words: array of string;\n  i, maxLength, maxIndex: Integer;\nbegin\n  words := ['apple', 'banana', 'cherry', 'date'];\n  maxLength := 0;\n  maxIndex := 0;\n\n  for i := 0 to High(words) do\n  begin\n    if Length(words[i]) > maxLength then\n    begin\n      maxLength := Length(words[i]);\n      maxIndex := i;\n    end;\n  end;\n\n  WriteLn('The longest word is: ', words[maxIndex]);\nend.\n```"
  },
  {
    "task": "Develop a for loop that sorts a list of tuples based on the second element.",
    "code": "```pascal\nprogram SortTuples;\n\ntype\n  TTuple = record\n    First: Integer;\n    Second: Integer;\n  end;\n\nvar\n  Tuples: array[1..5] of TTuple;\n  i, j: Integer;\n  Temp: TTuple;\n\nbegin\n  { Example data }\n  Tuples[1].First := 1;  Tuples[1].Second := 5;\n  Tuples[2].First := 2;  Tuples[2].Second := 3;\n  Tuples[3].First := 3;  Tuples[3].Second := 1;\n  Tuples[4].First := 4;  Tuples[4].Second := 4;\n  Tuples[5].First := 5;  Tuples[5].Second := 2;\n\n  { Sort using a simple bubble sort }\n  for i := 1 to High(Tuples) - 1 do\n    for j := 1 to High(Tuples) - i do\n      if Tuples[j].Second > Tuples[j + 1].Second then\n      begin\n        Temp := Tuples[j];\n        Tuples[j] := Tuples[j + 1];\n        Tuples[j + 1] := Temp;\n      end;\n\n  { Output sorted tuples }\n  for i := 1 to High(Tuples) do\n    WriteLn('(', Tuples[i].First, ', ', Tuples[i].Second, ')');\nend.\n```"
  },
  {
    "task": "Create a for loop that replicates each character in a string a given number of times.",
    "code": "```pascal\nprogram ReplicateCharacters;\n\nvar\n  inputStr, outputStr: string;\n  i, j, repeatCount: Integer;\n\nbegin\n  inputStr := 'Example';\n  repeatCount := 3;\n  outputStr := '';\n  \n  for i := 1 to Length(inputStr) do\n  begin\n    for j := 1 to repeatCount do\n    begin\n      outputStr := outputStr + inputStr[i];\n    end;\n  end;\n  \n  WriteLn('Original String: ', inputStr);\n  WriteLn('Replicated String: ', outputStr);\nend.\n```"
  },
  {
    "task": "Construct a for loop that replaces spaces in a string with hyphens.",
    "code": "```pascal\nprogram ReplaceSpacesWithHyphens;\nvar\n  inputString: string;\n  i: Integer;\nbegin\n  inputString := 'Example string with spaces';\n  for i := 1 to Length(inputString) do\n  begin\n    if inputString[i] = ' ' then\n      inputString[i] := '-';\n  end;\n  WriteLn(inputString);\nend.\n```"
  },
  {
    "task": "Design a for loop to find the intersection of two sets.",
    "code": "```pascal\nprogram IntersectionOfSets;\nuses sysutils;\n\nvar\n  set1, set2, intersection: set of char;\n  ch: char;\n\nbegin\n  set1 := ['a', 'b', 'c', 'd', 'e'];\n  set2 := ['c', 'd', 'e', 'f', 'g'];\n  intersection := [];\n\n  for ch := Low(char) to High(char) do\n  begin\n    if (ch in set1) and (ch in set2) then\n      intersection := intersection + [ch];\n  end;\n\n  Write('Intersection of sets: ');\n  for ch in intersection do\n    Write(ch, ' ');\n  Writeln;\nend.\n```"
  },
  {
    "task": "Write a for loop that generates a list of prime numbers up to a given number.",
    "code": "```pascal\nprogram PrimeNumbers;\n\nvar\n  n, i, j: Integer;\n  isPrime: Boolean;\n\nbegin\n  Write('Enter a number: ');\n  ReadLn(n);\n\n  WriteLn('Prime numbers up to ', n, ':');\n  for i := 2 to n do\n  begin\n    isPrime := True;\n    for j := 2 to i - 1 do\n    begin\n      if (i mod j = 0) then\n      begin\n        isPrime := False;\n        Break;\n      end;\n    end;\n    if isPrime then\n      WriteLn(i);\n  end;\nend.\n```"
  },
  {
    "task": "Use a for loop to implement a simple text-based progress bar.",
    "code": "```pascal\nprogram ProgressBar;\n\nuses\n  crt;\n\nconst\n  MaxProgress = 20;\n\nvar\n  i: Integer;\n\nbegin\n  for i := 1 to MaxProgress do\n  begin\n    Write('[');\n    Write(StringOfChar('=', i));\n    Write(StringOfChar(' ', MaxProgress - i));\n    Write('] ', (i * 100) div MaxProgress, '%');\n    Delay(200);\n    Write(#13);\n  end;\n  WriteLn('Progress Complete!');\nend.\n```"
  },
  {
    "task": "Implement a for loop that finds and prints all palindromic numbers between 10 and 200.",
    "code": "```pascal\nprogram FindPalindromicNumbers;\n\nvar\n  num, reversed, temp, digit: Integer;\n\nfunction IsPalindrome(n: Integer): Boolean;\nbegin\n  temp := n;\n  reversed := 0;\n  while temp <> 0 do\n  begin\n    digit := temp mod 10;\n    reversed := reversed * 10 + digit;\n    temp := temp div 10;\n  end;\n  IsPalindrome := (n = reversed);\nend;\n\nbegin\n  for num := 10 to 200 do\n    if IsPalindrome(num) then\n      WriteLn(num);\nend.\n```"
  },
  {
    "task": "Create a for loop that multiplies corresponding elements of two lists and stores the result.",
    "code": "```pascal\nprogram MultiplyLists;\n\nvar\n  List1, List2, ResultList: array[1..5] of Integer;\n  i: Integer;\n\nbegin\n  { Initialize the lists }\n  List1[1] := 1; List1[2] := 2; List1[3] := 3; List1[4] := 4; List1[5] := 5;\n  List2[1] := 6; List2[2] := 7; List2[3] := 8; List2[4] := 9; List2[5] := 10;\n\n  { Multiply corresponding elements and store in ResultList }\n  for i := 1 to 5 do\n    ResultList[i] := List1[i] * List2[i];\nend.\n```"
  },
  {
    "task": "Develop a for loop that finds the difference between the largest and smallest numbers in a list.",
    "code": "```pascal\nprogram FindDifferenceBetweenLargestAndSmallest;\n\nvar\n  numbers: array[1..10] of Integer = (3, 7, 2, 9, 1, 5, 8, 4, 6, 10);\n  i, max, min, difference: Integer;\n\nbegin\n  max := numbers[1];\n  min := numbers[1];\n  \n  for i := 2 to Length(numbers) do\n  begin\n    if numbers[i] > max then\n      max := numbers[i];\n    if numbers[i] < min then\n      min := numbers[i];\n  end;\n  \n  difference := max - min;\n  WriteLn('Difference between largest and smallest number: ', difference);\nend.\n```"
  },
  {
    "task": "Write a for loop that prints numbers from 1 to 100, replacing multiples of 5 with 'Buzz'.",
    "code": "```pascal\nprogram BuzzForLoop;\nvar\n  i: Integer;\nbegin\n  for i := 1 to 100 do\n  begin\n    if i mod 5 = 0 then\n      WriteLn('Buzz')\n    else\n      WriteLn(i);\n  end;\nend.\n```"
  },
  {
    "task": "Use a for loop to convert a list of integers into their binary representation.",
    "code": "```pascal\nprogram ConvertToBinary;\n\nvar\n  numbers: array[1..5] of Integer = (10, 15, 23, 5, 31);\n  i: Integer;\n\nfunction IntToBinary(n: Integer): String;\nvar\n  result: String;\nbegin\n  result := '';\n  while n > 0 do\n  begin\n    result := Chr((n mod 2) + Ord('0')) + result;\n    n := n div 2;\n  end;\n  IntToBinary := result;\nend;\n\nbegin\n  for i := 1 to Length(numbers) do\n    Writeln('Integer: ', numbers[i], ' -> Binary: ', IntToBinary(numbers[i]));\nend.\n```"
  },
  {
    "task": "Design a for loop that fills a 2D array with consecutive numbers in a spiral pattern.",
    "code": "```pascal\nprogram SpiralFill;\nconst\n  N = 5; // Adjust the size of the 2D array here\nvar\n  arr: array[1..N, 1..N] of Integer;\n  num, i, j, layer: Integer;\nbegin\n  num := 1;\n  for layer := 0 to (N div 2) do\n  begin\n    for i := layer + 1 to N - layer do\n    begin\n      arr[layer + 1, i] := num;\n      num := num + 1;\n    end;\n\n    for i := layer + 2 to N - layer do\n    begin\n      arr[i, N - layer] := num;\n      num := num + 1;\n    end;\n    \n    for i := N - layer - 1 downto layer + 1 do\n    begin\n      arr[N - layer, i] := num;\n      num := num + 1;\n    end;\n    \n    for i := N - layer - 1 downto layer + 2 do\n    begin\n      arr[i, layer + 1] := num;\n      num := num + 1;\n    end;\n  end;\n\n  for i := 1 to N do\n  begin\n    for j := 1 to N do\n    begin\n      Write(arr[i, j]:4);\n    end;\n    Writeln;\n  end;\nend.\n```"
  },
  {
    "task": "Create a for loop that iterates over a list and removes duplicates.",
    "code": "```pascal\nprogram RemoveDuplicates;\n\nuses SysUtils;\n\nvar\n  i, j, n, uniqueCount: Integer;\n  item: String;\n  itemList, uniqueItems: array of String;\n  isDuplicate: Boolean;\n\nbegin\n  itemList := ['apple', 'banana', 'apple', 'orange', 'banana', 'grape'];\n  n := Length(itemList);\n  SetLength(uniqueItems, n);\n  uniqueCount := 0;\n\n  for i := 0 to n - 1 do\n  begin\n    item := itemList[i];\n    isDuplicate := False;\n\n    for j := 0 to uniqueCount - 1 do\n    begin\n      if uniqueItems[j] = item then\n      begin\n        isDuplicate := True;\n        Break;\n      end;\n    end;\n\n    if not isDuplicate then\n    begin\n      uniqueItems[uniqueCount] := item;\n      Inc(uniqueCount);\n    end;\n  end;\n\n  SetLength(uniqueItems, uniqueCount);\n\n  for i := 0 to uniqueCount - 1 do\n    WriteLn(uniqueItems[i]);\nend.\n```"
  },
  {
    "task": "Implement a for loop to calculate the dot product of two vectors.",
    "code": "```pascal\nprogram DotProduct;\n\nvar\n  vectorA, vectorB: array[1..100] of Integer;\n  i, n, dotProduct: Integer;\n\nbegin\n  { Initialize vectors and set the size }\n  n := 3; { Example size, modify as needed }\n  vectorA[1] := 1; vectorA[2] := 2; vectorA[3] := 3;\n  vectorB[1] := 4; vectorB[2] := 5; vectorB[3] := 6;\n\n  dotProduct := 0;\n  \n  for i := 1 to n do\n    dotProduct := dotProduct + vectorA[i] * vectorB[i];\n\n  WriteLn('Dot Product: ', dotProduct);\nend.\n```"
  },
  {
    "task": "Write a for loop that prints a sequence of numbers in reverse order.",
    "code": "```pascal\nprogram ReverseSequence;\n\nvar\n  i: Integer;\n\nbegin\n  for i := 10 downto 1 do\n    WriteLn(i);\nend.\n```"
  },
  {
    "task": "Develop a for loop that computes the greatest common divisor (GCD) of two numbers.",
    "code": "```pascal\nprogram GCDForLoop;\n\nvar\n  a, b, i, gcd: Integer;\n\nbegin\n  a := 48; { Example number }\n  b := 18; { Example number }\n  gcd := 1;\n\n  for i := 1 to a do\n  begin\n    if (a mod i = 0) and (b mod i = 0) then\n      gcd := i;\n  end;\n\n  WriteLn('GCD of ', a, ' and ', b, ' is: ', gcd);\nend.\n```"
  },
  {
    "task": "Construct a for loop that prints a square pattern of numbers with a given side length.",
    "code": "```pascal\nprogram SquarePattern;\n\nvar\n  i, j, sideLength: Integer;\n\nbegin\n  Write('Enter the side length of the square: ');\n  ReadLn(sideLength);\n\n  for i := 1 to sideLength do\n  begin\n    for j := 1 to sideLength do\n    begin\n      Write(j:3);\n    end;\n    WriteLn;\n  end;\nend.\n```"
  },
  {
    "task": "Create a for loop that shifts all elements of a list to the left by one position.",
    "code": "```pascal\nprogram ShiftLeft;\nvar\n  arr: array[1..10] of Integer;\n  i, temp: Integer;\nbegin\n  { Initialize the array with some values }\n  for i := 1 to 10 do\n    arr[i] := i;\n  \n  { Store the first element to shift the rest }\n  temp := arr[1];\n  \n  { Shift elements to the left }\n  for i := 1 to 9 do\n    arr[i] := arr[i + 1];\n  \n  { Put the first element to the end }\n  arr[10] := temp;\nend.\n```"
  },
  {
    "task": "Use a for loop to print the first 20 triangular numbers.",
    "code": "```pascal\nprogram TriangularNumbers;\n\nvar\n  i, triangular: Integer;\n\nbegin\n  for i := 1 to 20 do\n  begin\n    triangular := (i * (i + 1)) div 2;\n    WriteLn(triangular);\n  end;\nend.\n```"
  },
  {
    "task": "Write a for loop that finds the first repeating character in a string.",
    "code": "```pascal\nprogram FindFirstRepeatingCharacter;\nuses SysUtils;\n\nvar\n  str: string;\n  i, j: Integer;\n  found: Boolean;\n  ch: Char;\nbegin\n  str := 'example';  // You can change the input string as needed\n  found := False;\n\n  for i := 1 to Length(str) do\n  begin\n    for j := i + 1 to Length(str) do\n    begin\n      if str[i] = str[j] then\n      begin\n        ch := str[i];\n        found := True;\n        Break;\n      end;\n    end;\n    if found then\n      Break;\n  end;\n\n  if found then\n    WriteLn('First repeating character: ', ch)\n  else\n    WriteLn('No repeating character found.');\nend.\n```"
  },
  {
    "task": "Design a for loop that transforms a list of temperatures from Celsius to Fahrenheit.",
    "code": "```pascal\nprogram CelsiusToFahrenheit;\n\nvar\n  celsiusTemps: array[1..5] of real = (0, 10, 20, 30, 40);\n  fahrenheitTemps: array[1..5] of real;\n  i: integer;\n\nbegin\n  for i := 1 to 5 do\n  begin\n    fahrenheitTemps[i] := celsiusTemps[i] * 9 / 5 + 32;\n  end;\nend.\n```"
  },
  {
    "task": "Implement a for loop to determine if a string is an isogram.",
    "code": "```pascal\nprogram IsogramCheck;\n\nuses\n  SysUtils;\n\nfunction IsIsogram(s: string): Boolean;\nvar\n  i, j: Integer;\nbegin\n  s := LowerCase(s);\n  for i := 1 to Length(s) do\n    for j := i + 1 to Length(s) do\n      if s[i] = s[j] then\n      begin\n        Result := False;\n        Exit;\n      end;\n  Result := True;\nend;\n\nvar\n  testString: string;\nbegin\n  Write('Enter a string: ');\n  ReadLn(testString);\n  if IsIsogram(testString) then\n    WriteLn('The string is an isogram.')\n  else\n    WriteLn('The string is not an isogram.');\nend.\n```"
  },
  {
    "task": "Use a for loop to create a histogram from a list of integers.",
    "code": "```pascal\nprogram Histogram;\n\nuses SysUtils;\n\nvar\n  numbers: array of Integer;\n  i, j, maxVal: Integer;\n\nbegin\n  numbers := [3, 5, 2, 6, 4];\n  maxVal := 0;\n\n  for i := Low(numbers) to High(numbers) do\n    if numbers[i] > maxVal then\n      maxVal := numbers[i];\n\n  for i := 1 to maxVal do\n  begin\n    for j := Low(numbers) to High(numbers) do\n    begin\n      if numbers[j] >= i then\n        Write('*')\n      else\n        Write(' ');\n    end;\n    Writeln;\n  end;\nend.\n```"
  },
  {
    "task": "Create a for loop that prints the indexes of all occurrences of a particular element in a list.",
    "code": "```pascal\nprogram FindIndexes;\n\nvar\n  list: array[1..10] of Integer = (3, 5, 7, 5, 9, 5, 11, 13, 5, 15);\n  target, i: Integer;\n\nbegin\n  target := 5;\n  for i := Low(list) to High(list) do\n  begin\n    if list[i] = target then\n      WriteLn('Index: ', i);\n  end;\nend.\n```"
  },
  {
    "task": "Write a for loop that checks if a given string is a palindrome.",
    "code": "```pascal\nprogram CheckPalindrome;\nvar\n  str: string;\n  i, len: integer;\n  isPalindrome: boolean;\nbegin\n  str := 'radar'; { Example string to check }\n  len := Length(str);\n  isPalindrome := true;\n  \n  for i := 1 to len div 2 do\n  begin\n    if str[i] <> str[len - i + 1] then\n    begin\n      isPalindrome := false;\n      break;\n    end;\n  end;\n  \n  if isPalindrome then\n    writeln('The string is a palindrome.')\n  else\n    writeln('The string is not a palindrome.');\nend.\n```"
  },
  {
    "task": "Develop a for loop to simulate the behavior of a simple finite state machine.",
    "code": "```pascal\nprogram FiniteStateMachine;\nvar\n  state, i: Integer;\nbegin\n  state := 0;\n  for i := 1 to 10 do\n  begin\n    writeln('Current State: ', state);\n    case state of\n      0: state := 1;\n      1: state := 2;\n      2: state := 0;\n    end;\n  end;\nend.\n```"
  },
  {
    "task": "Design a for loop that finds the sum of all odd numbers in a list.",
    "code": "```pascal\nprogram SumOfOddNumbers;\nvar\n  numbers: array of Integer;\n  i, sum: Integer;\nbegin\n  numbers := [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]; { Example list of numbers }\n  sum := 0;\n  \n  for i := Low(numbers) to High(numbers) do\n    if numbers[i] mod 2 <> 0 then\n      sum := sum + numbers[i];\n  \n  WriteLn('Sum of odd numbers: ', sum);\nend.\n```"
  },
  {
    "task": "Use a for loop to count how many words start with a vowel in a given sentence.",
    "code": "```pascal\nprogram CountVowelStartingWords;\nuses SysUtils;\n\nfunction IsVowel(c: Char): Boolean;\nbegin\n  c := UpCase(c);\n  IsVowel := c in ['A', 'E', 'I', 'O', 'U'];\nend;\n\nfunction CountWordsStartingWithVowel(sentence: string): Integer;\nvar\n  i, wordCount: Integer;\n  words: TStringArray;\nbegin\n  wordCount := 0;\n  words := sentence.Split([' ']);\n  for i := Low(words) to High(words) do\n  begin\n    if (Length(words[i]) > 0) and IsVowel(words[i][1]) then\n      Inc(wordCount);\n  end;\n  CountWordsStartingWithVowel := wordCount;\nend;\n\nvar\n  sentence: string;\n  count: Integer;\nbegin\n  sentence := 'An example sentence with several words starting with vowels';\n  count := CountWordsStartingWithVowel(sentence);\n  WriteLn('Number of words starting with a vowel: ', count);\nend.\n```"
  },
  {
    "task": "Implement a for loop that sorts a list of strings by their length.",
    "code": "```pascal\nprogram SortStringsByLength;\n\nvar\n  strings: array of string;\n  i, j, n: Integer;\n  temp: string;\n\nbegin\n  strings := ['apple', 'banana', 'kiwi', 'grape', 'orange'];\n  n := Length(strings);\n\n  for i := 0 to n - 1 do\n  begin\n    for j := i + 1 to n - 1 do\n    begin\n      if Length(strings[i]) > Length(strings[j]) then\n      begin\n        temp := strings[i];\n        strings[i] := strings[j];\n        strings[j] := temp;\n      end;\n    end;\n  end;\n\n  for i := 0 to n - 1 do\n  begin\n    WriteLn(strings[i]);\n  end;\nend.\n```"
  },
  {
    "task": "Write a for loop that prints the factorial of numbers from 1 to 10.",
    "code": "```pascal\nprogram FactorialLoop;\n\nvar\n  i, j, factorial: Integer;\n\nbegin\n  for i := 1 to 10 do\n  begin\n    factorial := 1;\n    for j := 1 to i do\n    begin\n      factorial := factorial * j;\n    end;\n    WriteLn('Factorial of ', i, ' is: ', factorial);\n  end;\nend.\n```"
  },
  {
    "task": "Create a for loop that replaces all instances of a substring in a string with another substring.",
    "code": "```pascal\nprogram ReplaceSubstring;\n\nvar\n  original, substring, replacement, result: string;\n  i: Integer;\n\nbegin\n  original := 'This is a test string, this is only a test.';\n  substring := 'test';\n  replacement := 'sample';\n  result := original;\n\n  for i := 1 to Length(result) - Length(substring) + 1 do\n  begin\n    if Copy(result, i, Length(substring)) = substring then\n    begin\n      Delete(result, i, Length(substring));\n      Insert(replacement, result, i);\n      i := i + Length(replacement) - 1; // Adjust the index after replacement\n    end;\n  end;\n\n  writeln('Original String: ', original);\n  writeln('Modified String: ', result);\nend.\n```"
  },
  {
    "task": "Develop a for loop that squares each element in a list of numbers.",
    "code": "```pascal\nprogram SquareElements;\n\nvar\n  numbers: array[1..5] of Integer = (1, 2, 3, 4, 5);\n  i: Integer;\n\nbegin\n  for i := 1 to Length(numbers) do\n  begin\n    numbers[i] := numbers[i] * numbers[i];\n  end;\nend.\n```"
  },
  {
    "task": "Use a for loop to reverse the order of elements in an array.",
    "code": "```pascal\nprogram ReverseArray;\n\nvar\n  arr: array[1..5] of Integer = (1, 2, 3, 4, 5);\n  reversedArr: array[1..5] of Integer;\n  i, n: Integer;\n\nbegin\n  n := Length(arr);\n  for i := 1 to n do\n  begin\n    reversedArr[i] := arr[n - i + 1];\n  end;\n\n  { Output reversed array }\n  for i := 1 to n do\n  begin\n    WriteLn(reversedArr[i]);\n  end;\nend.\n```"
  },
  {
    "task": "Implement a for loop that tests if two strings are anagrams of each other.",
    "code": "```pascal\nprogram AnagramTest;\n\nuses\n  SysUtils;\n\nfunction AreAnagrams(str1, str2: string): Boolean;\nvar\n  charCount: array['a'..'z'] of Integer;\n  i: Integer;\nbegin\n  if Length(str1) <> Length(str2) then\n    Exit(False);\n\n  FillChar(charCount, SizeOf(charCount), 0);\n\n  for i := 1 to Length(str1) do\n  begin\n    Inc(charCount[LowerCase(str1[i])]);\n    Dec(charCount[LowerCase(str2[i])]);\n  end;\n\n  for i := Low(charCount) to High(charCount) do\n  begin\n    if charCount[chr(i)] <> 0 then\n      Exit(False);\n  end;\n\n  Result := True;\nend;\n\nvar\n  str1, str2: string;\nbegin\n  str1 := 'listen';\n  str2 := 'silent';\n  \n  if AreAnagrams(str1, str2) then\n    WriteLn('The strings are anagrams.')\n  else\n    WriteLn('The strings are not anagrams.');\nend.\n```"
  },
  {
    "task": "Design a for loop to find and print all Armstrong numbers between 100 and 999.",
    "code": "```pascal\nprogram FindArmstrongNumbers;\n\nvar\n  number, digit, sum, temp: integer;\n\nbegin\n  for number := 100 to 999 do\n  begin\n    temp := number;\n    sum := 0;\n    \n    while temp > 0 do\n    begin\n      digit := temp mod 10;\n      sum := sum + digit * digit * digit;\n      temp := temp div 10;\n    end;\n    \n    if sum = number then\n      writeln(number);\n  end;\nend.\n```"
  }
]