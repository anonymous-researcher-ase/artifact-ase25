[
  {
    "task": "Create a program that reads a CSV file using a library designed for parsing CSV data.",
    "code": "```pascal\nprogram ReadCSVFile;\n\nuses\n  SysUtils, Classes, fpCSV;\n\nvar\n  CSVFile: TextFile;\n  CSVReader: TCSVParser;\n  Line: TStringList;\n  FileName: string;\n  i: Integer;\nbegin\n  // Specify the CSV file name\n  FileName := 'data.csv';\n  AssignFile(CSVFile, FileName);\n  \n  try\n    // Open the CSV file\n    Reset(CSVFile);\n    \n    // Initialize CSV parser\n    CSVReader := TCSVParser.Create;\n    Line := TStringList.Create;\n    try\n      while not Eof(CSVFile) do\n      begin\n        // Read a line from the CSV file\n        Readln(CSVFile, CSVReader.Source);\n        \n        // Parse the line\n        CSVReader.Execute;\n        \n        // Iterate through fields and print them\n        for i := 0 to CSVReader.FieldCount - 1 do\n        begin\n          Line.Add(CSVReader.Fields[i]);\n        end;\n        \n        // Output the parsed line\n        Writeln(Line.CommaText);\n        \n        // Clear the line for the next iteration\n        Line.Clear;\n      end;\n    finally\n      // Cleanup\n      Line.Free;\n      CSVReader.Free;\n    end;\n    \n  finally\n    // Close the file\n    CloseFile(CSVFile);\n  end;\nend.\n```"
  },
  {
    "task": "Implement a function that generates a random number using a standard library for random number generation.",
    "code": "```pascal\nprogram RandomNumberGenerator;\n\nuses\n  SysUtils;\n\nfunction GenerateRandomNumber: Integer;\nbegin\n  Randomize;\n  GenerateRandomNumber := Random(100); // Generates a random number between 0 and 99\nend;\n\nvar\n  number: Integer;\nbegin\n  number := GenerateRandomNumber;\n  WriteLn('Random number: ', number);\nend.\n```"
  },
  {
    "task": "Use a third-party library to send an HTTP GET request to a public API and print the response.",
    "code": "```pascal\nprogram HttpGetRequest;\n\nuses\n  SysUtils,\n  fphttpclient;\n\nconst\n  URL = 'https://api.example.com/data';\n\nvar\n  Response: String;\n  \nbegin\n  try\n    Response := TFPHTTPClient.SimpleGet(URL);\n    WriteLn('Response from API: ', Response);\n  except\n    on E: Exception do\n      WriteLn('An error occurred: ', E.Message);\n  end;\nend.\n```"
  },
  {
    "task": "Write a script that extracts the text from a PDF file using a library for PDF manipulation.",
    "code": "```pascal\nprogram ExtractTextFromPDF;\n\nuses\n  SysUtils, Classes, PdfiumLib;\n\nvar\n  PdfDoc: TPdfDocument;\n  Text: string;\n\nfunction ExtractTextFromPage(Page: TPdfPage): string;\nvar\n  TextLength: Integer;\n  Buffer: PWideChar;\nbegin\n  TextLength := PdfiumLib.GetTextLength(Page);\n  GetMem(Buffer, (TextLength + 1) * SizeOf(WideChar));\n  try\n    PdfiumLib.GetText(Page, 0, TextLength, Buffer);\n    Result := WideCharToString(Buffer);\n  finally\n    FreeMem(Buffer);\n  end;\nend;\n\nbegin\n  PdfDoc := TPdfDocument.Create;\n  try\n    PdfDoc.LoadFromFile('example.pdf');\n    if PdfDoc.PageCount > 0 then\n      Text := ExtractTextFromPage(PdfDoc.Pages[0]);\n  finally\n    PdfDoc.Free;\n  end;\n  WriteLn(Text);\nend.\n```"
  },
  {
    "task": "Develop a tool that resizes images by integrating an image processing library.",
    "code": "```pascal\nprogram ImageResizer;\n\nuses\n  SysUtils, Graphics, Imaging, ImagingTypes;\n\nprocedure ResizeImage(const InputFile, OutputFile: string; NewWidth, NewHeight: Integer);\nvar\n  Image: TImageData;\n  ResizedImage: TImageData;\nbegin\n  InitImage(Image);\n  InitImage(ResizedImage);\n  try\n    if LoadImageFromFile(InputFile, Image) = False then\n      raise Exception.Create('Error loading image');\n\n    if NewWidth <= 0 then\n      NewWidth := Image.Width;\n\n    if NewHeight <= 0 then\n      NewHeight := Image.Height;\n\n    CreateImage(ResizedImage, NewWidth, NewHeight, Image.Format);\n    ResampleImage(Image, ResizedImage, rfLanczos3);\n\n    if SaveImageToFile(OutputFile, ResizedImage) = False then\n      raise Exception.Create('Error saving image');\n\n  finally\n    FreeImage(Image);\n    FreeImage(ResizedImage);\n  end;\nend;\n\nbegin\n  try\n    ResizeImage('input.jpg', 'output.jpg', 800, 600);\n    WriteLn('Image resized successfully.');\n  except\n    on E: Exception do\n      WriteLn('Error: ', E.Message);\n  end;\nend.\n```"
  },
  {
    "task": "Create a program that connects to a database using a library for database interaction.",
    "code": "```pascal\nprogram DatabaseConnectionExample;\n\nuses\n  SysUtils, \n  DB, \n  SQLDB, \n  PQConnection;  // Using PostgreSQL connection as an example\n\nvar\n  Conn: TPQConnection;\n  SQLTransaction: TSQLTransaction;\n  SQLQuery: TSQLQuery;\n\nbegin\n  Conn := TPQConnection.Create(nil);\n  SQLTransaction := TSQLTransaction.Create(nil);\n  SQLQuery := TSQLQuery.Create(nil);\n  try\n    Conn.HostName := 'localhost';\n    Conn.DatabaseName := 'exampledb';\n    Conn.UserName := 'user';\n    Conn.Password := 'password';\n    Conn.Transaction := SQLTransaction;\n\n    SQLTransaction.DataBase := Conn;\n    SQLQuery.DataBase := Conn;\n    \n    Conn.Open;\n    Writeln('Connection to database established successfully.');\n\n    // Example query execution\n    SQLQuery.SQL.Text := 'SELECT * FROM example_table';\n    SQLQuery.Open;\n    \n    while not SQLQuery.EOF do\n    begin\n      Writeln('Record: ', SQLQuery.Fields[0].AsString);\n      SQLQuery.Next;\n    end;\n    \n    SQLQuery.Close;\n    Conn.Close;\n  except\n    on E: Exception do\n      Writeln('Error: ', E.Message);\n  end;\n\n  SQLQuery.Free;\n  SQLTransaction.Free;\n  Conn.Free;\nend.\n```"
  },
  {
    "task": "Build an application that converts Markdown text to HTML using a Markdown parsing library.",
    "code": "```pascal\nprogram MarkdownToHTMLConverter;\n\nuses\n  SysUtils, MarkdownProcessor;  { Assume MarkdownProcessor is a library for Markdown parsing }\n\nvar\n  markdownText, htmlText: string;\n\nbegin\n  { Sample markdown text }\n  markdownText := '# Hello World' + sLineBreak +\n                  'This is a *markdown* text.';\n\n  { Convert markdown to HTML }\n  htmlText := MarkdownProcessor.MarkdownToHTML(markdownText);\n\n  { Output the converted HTML }\n  Writeln(htmlText);\nend.\n```"
  },
  {
    "task": "Use a library to transform XML data into JSON format for easier manipulation.",
    "code": "```pascal\nprogram XMLToJSONConverter;\n\nuses\n  SysUtils, Classes, XMLRead, XMLWrite, fpjson, jsonparser, xmlutils;\n\nfunction XMLToJSONObject(XMLData: TXMLDocument): TJSONObject;\nbegin\n  Result := TJSONObject.Create;\n  // Add your XML to JSON conversion logic here\n  // This is a placeholder as direct conversion logic would depend on the XML structure\nend;\n\nfunction ConvertXMLToJSON(const XMLContent: string): string;\nvar\n  XMLDocument: TXMLDocument;\n  JSONObject: TJSONObject;\nbegin\n  ReadXMLFile(XMLDocument, XMLContent);\n  try\n    JSONObject := XMLToJSONObject(XMLDocument);\n    try\n      Result := JSONObject.AsJSON;\n    finally\n      JSONObject.Free;\n    end;\n  finally\n    XMLDocument.Free;\n  end;\nend;\n\nvar\n  XMLString: string;\n  JSONString: string;\nbegin\n  XMLString := '<root><example>value</example></root>'; // Example XML content\n  JSONString := ConvertXMLToJSON(XMLString);\n  WriteLn('JSON Output: ', JSONString);\nend.\n```"
  },
  {
    "task": "Implement a feature that schedules tasks at regular intervals using a scheduler library.",
    "code": "```pascal\nprogram TaskScheduler;\n\nuses\n  SysUtils, Classes, DateUtils;\n\ntype\n  TTaskScheduler = class\n  private\n    FTimer: TTimer;\n    procedure OnTimer(Sender: TObject);\n  public\n    constructor Create(Interval: Integer);\n    destructor Destroy; override;\n  end;\n\nconstructor TTaskScheduler.Create(Interval: Integer);\nbegin\n  FTimer := TTimer.Create(nil);\n  FTimer.Interval := Interval;\n  FTimer.OnTimer := @OnTimer;\n  FTimer.Enabled := True;\nend;\n\ndestructor TTaskScheduler.Destroy;\nbegin\n  FTimer.Free;\n  inherited Destroy;\nend;\n\nprocedure TTaskScheduler.OnTimer(Sender: TObject);\nbegin\n  WriteLn('Task executed at ', DateTimeToStr(Now));\nend;\n\nvar\n  Scheduler: TTaskScheduler;\n\nbegin\n  Scheduler := TTaskScheduler.Create(1000); // Schedule task every 1000 milliseconds\n  try\n    ReadLn; // Wait for user input to terminate\n  finally\n    Scheduler.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Develop a chat application that utilizes a library for WebSocket communication.",
    "code": "```pascal\nprogram ChatApplication;\n\nuses\n  SysUtils, WebSockets;\n\nvar\n  wsClient: TWebSocketClient;\n  message: string;\n\nprocedure OnMessageReceived(Sender: TObject; const aData: string);\nbegin\n  Writeln('Message from server: ', aData);\nend;\n\nbegin\n  wsClient := TWebSocketClient.Create;\n  try\n    wsClient.OnMessage := @OnMessageReceived;\n    wsClient.Connect('ws://example.com');\n    Writeln('Connected to chat server.');\n\n    while True do\n    begin\n      Readln(message);\n      if message = 'exit' then\n        Break;\n      wsClient.Send(message);\n    end;\n\n    wsClient.Disconnect;\n    Writeln('Disconnected from chat server.');\n  finally\n    wsClient.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Create a game that uses a library to handle physics simulations for realistic movements.",
    "code": "```pascal\nprogram PhysicsGame;\n\nuses\n  SysUtils, // System Utilities\n  PhysicsLib; // Assume a physics library named 'PhysicsLib'\n\nvar\n  gameRunning: Boolean;\n  simulation: TPhysicsSimulation;\n\nprocedure InitializeGame;\nbegin\n  gameRunning := True;\n  simulation := TPhysicsSimulation.Create;\nend;\n\nprocedure UpdateGame;\nbegin\n  simulation.Update;\nend;\n\nprocedure RenderGame;\nbegin\n  simulation.Render;\nend;\n\nprocedure CleanupGame;\nbegin\n  simulation.Free;\nend;\n\nbegin\n  InitializeGame;\n  while gameRunning do\n  begin\n    UpdateGame;\n    RenderGame;\n    // Add game loop control logic here\n    // For instance, checking for exit condition\n  end;\n  CleanupGame;\nend.\n```"
  },
  {
    "task": "Write a function that hashes a string using a cryptographic hashing library.",
    "code": "```pascal\nprogram HashStringExample;\n\nuses\n  SysUtils,\n  DCPsha1;\n\nfunction HashString(const Input: string): string;\nvar\n  Hash: TDCP_sha1;\n  Digest: array[0..19] of Byte;\n  I: Integer;\nbegin\n  Hash := TDCP_sha1.Create(nil);\n  try\n    Hash.Init;\n    Hash.UpdateStr(Input);\n    Hash.Final(Digest);\n    Result := '';\n    for I := 0 to Length(Digest) - 1 do\n      Result := Result + IntToHex(Digest[I], 2);\n  finally\n    Hash.Free;\n  end;\nend;\n\nbegin\n  WriteLn(HashString('example'));\nend.\n```"
  },
  {
    "task": "Build a program that validates email addresses using a library for regular expression matching.",
    "code": "```pascal\nprogram EmailValidator;\n\nuses\n  SysUtils,\n  RegExpr;\n\nfunction IsValidEmail(const Email: string): Boolean;\nvar\n  Regex: TRegExpr;\nbegin\n  Regex := TRegExpr.Create;\n  try\n    Regex.Expression := '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$';\n    Result := Regex.Exec(Email);\n  finally\n    Regex.Free;\n  end;\nend;\n\nvar\n  Email: string;\nbegin\n  Write('Enter an email address to validate: ');\n  ReadLn(Email);\n  if IsValidEmail(Email) then\n    WriteLn('The email address is valid.')\n  else\n    WriteLn('The email address is invalid.');\nend.\n```"
  },
  {
    "task": "Implement a feature that reads and writes Excel files using a library tailored for Excel file manipulation.",
    "code": "```pascal\nprogram ExcelFileManipulation;\n\nuses\n  SysUtils, Classes, xlsreader, xlswriter;\n\nprocedure ReadExcelFile(const FileName: string);\nvar\n  ExcelReader: TXLSReader;\n  Sheet: TXLSSheet;\n  Row, Col: Integer;\nbegin\n  ExcelReader := TXLSReader.Create;\n  try\n    ExcelReader.Filename := FileName;\n    ExcelReader.Open;\n    Sheet := ExcelReader[0]; // Assuming we read the first sheet\n    for Row := 0 to Sheet.RowCount - 1 do\n    begin\n      for Col := 0 to Sheet.ColCount - 1 do\n      begin\n        WriteLn('Cell[', Row, ',', Col, ']: ', Sheet.Cells[Row, Col].AsString);\n      end;\n    end;\n  finally\n    ExcelReader.Free;\n  end;\nend;\n\nprocedure WriteExcelFile(const FileName: string);\nvar\n  ExcelWriter: TXLSWriter;\n  Sheet: TXLSSheet;\nbegin\n  ExcelWriter := TXLSWriter.Create;\n  try\n    ExcelWriter.Filename := FileName;\n    Sheet := ExcelWriter.AddSheet('Sheet1');\n    Sheet.Cells[0, 0].AsString := 'Hello';\n    Sheet.Cells[0, 1].AsString := 'World';\n    ExcelWriter.Save;\n  finally\n    ExcelWriter.Free;\n  end;\nend;\n\nbegin\n  WriteLn('Reading Excel File:');\n  ReadExcelFile('input.xlsx');\n\n  WriteLn('Writing Excel File:');\n  WriteExcelFile('output.xlsx');\nend.\n```"
  },
  {
    "task": "Use a library to translate text from one language to another in your application.",
    "code": "```pascal\nprogram TranslateTextApp;\n\nuses\n  SysUtils,\n  fphttpclient,\n  fpjson,\n  jsonparser;\n\nfunction TranslateText(const SourceLang, TargetLang, Text: string): string;\nvar\n  HttpClient: TFPHTTPClient;\n  Response: string;\n  Json: TJSONData;\n  TranslatedText: string;\nbegin\n  HttpClient := TFPHTTPClient.Create(nil);\n  try\n    Response := HttpClient.SimpleGet(\n      Format('https://api.example.com/translate?sl=%s&tl=%s&q=%s', \n      [SourceLang, TargetLang, URLEncode(Text)]));\n    \n    Json := GetJSON(Response);\n    try\n      TranslatedText := Json.FindPath('data.translations[0].translatedText').AsString;\n    finally\n      Json.Free;\n    end;\n    \n    Result := TranslatedText;\n  finally\n    HttpClient.Free;\n  end;\nend;\n\nvar\n  SourceLanguage, TargetLanguage, Text, TranslatedText: string;\nbegin\n  SourceLanguage := 'en';\n  TargetLanguage := 'es';\n  Text := 'Hello, world!';\n  \n  TranslatedText := TranslateText(SourceLanguage, TargetLanguage, Text);\n  WriteLn('Translated Text: ', TranslatedText);\nend.\n```"
  },
  {
    "task": "Create a script that generates QR codes using a library for QR code creation.",
    "code": "```pascal\nprogram GenerateQRCode;\n\nuses\n  SysUtils, Classes, Graphics, qrCodeLib; // Assume qrCodeLib is the library for QR code generation\n\nvar\n  QRCode: TQRCode;\n  Bitmap: TBitmap;\n  Data: string;\n  Filename: string;\nbegin\n  // Initialize QR code object\n  QRCode := TQRCode.Create;\n\n  try\n    // Set the data for the QR code\n    Data := 'https://example.com';\n    QRCode.Data := Data;\n\n    // Generate the QR code\n    QRCode.Generate;\n\n    // Create a bitmap to store the QR code image\n    Bitmap := TBitmap.Create;\n    try\n      // Render the QR code to the bitmap\n      QRCode.Render(Bitmap);\n\n      // Save the bitmap as an image file\n      Filename := 'QRCode.bmp';\n      Bitmap.SaveToFile(Filename);\n\n      // Output the filename\n      Writeln('QR code generated and saved to ', Filename);\n    finally\n      Bitmap.Free;\n    end;\n  finally\n    QRCode.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Build an app that plays audio files using a library for audio processing.",
    "code": "```pascal\nprogram AudioPlayerApp;\n\nuses\n  SysUtils, MMSystem;\n\nprocedure PlayAudioFile(const FileName: string);\nbegin\n  if not FileExists(FileName) then\n  begin\n    WriteLn('File not found: ', FileName);\n    Exit;\n  end;\n\n  sndPlaySound(PChar(FileName), SND_ASYNC or SND_NODEFAULT);\nend;\n\nvar\n  AudioFileName: string;\nbegin\n  Write('Enter the audio file name to play: ');\n  ReadLn(AudioFileName);\n  PlayAudioFile(AudioFileName);\nend.\n```"
  },
  {
    "task": "Develop a tool that scrapes web pages for specific data using a web scraping library.",
    "code": "```pascal\nprogram WebScraper;\n\nuses\n  SysUtils, Classes, fphttpclient, fpjson, jsonparser;\n\nvar\n  url, htmlContent: string;\n  httpClient: TFPHTTPClient;\n\nfunction ExtractDataFromHTML(html: string): string;\nbegin\n  // Placeholder for data extraction logic\n  // This should include parsing the HTML and extracting specific data\n  Result := 'Extracted Data';\nend;\n\nbegin\n  httpClient := TFPHTTPClient.Create(nil);\n  try\n    url := 'http://example.com';\n    htmlContent := httpClient.Get(url);\n    WriteLn('Data: ', ExtractDataFromHTML(htmlContent));\n  finally\n    httpClient.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Implement a service that sends emails using a library that facilitates SMTP communication.",
    "code": "```pascal\nprogram EmailService;\n\nuses\n  SysUtils, smtpsend, synautil;\n\nprocedure SendEmail(const ToAddress, Subject, Body: string);\nvar\n  SMTP: TSMTPSend;\nbegin\n  SMTP := TSMTPSend.Create;\n  try\n    SMTP.TargetHost := 'smtp.example.com'; // Specify your SMTP server\n    SMTP.TargetPort := '25'; // Specify your SMTP server port\n    SMTP.Username := 'your_username'; // Specify your username\n    SMTP.Password := 'your_password'; // Specify your password\n\n    if SMTP.Login then\n    begin\n      SMTP.MailFrom('from@example.com', Length('from@example.com'));\n      SMTP.MailTo(ToAddress);\n      SMTP.MailData.Clear;\n      SMTP.MailData.Add('From: from@example.com');\n      SMTP.MailData.Add('To: ' + ToAddress);\n      SMTP.MailData.Add('Subject: ' + Subject);\n      SMTP.MailData.Add('');\n      SMTP.MailData.Add(Body);\n      if SMTP.SendMail then\n        Writeln('Email sent successfully')\n      else\n        Writeln('Failed to send email');\n      SMTP.Logout;\n    end\n    else\n      Writeln('Failed to login to SMTP server');\n  finally\n    SMTP.Free;\n  end;\nend;\n\nbegin\n  SendEmail('to@example.com', 'Test Subject', 'This is the body of the email.');\nend.\n```"
  },
  {
    "task": "Create a program that visualizes data in charts using a charting library.",
    "code": "```pascal\nprogram ChartVisualization;\n\nuses\n  SysUtils,\n  TAGraph, TASeries, Forms, Controls, Graphics, Dialogs;\n\nvar\n  Chart: TChart;\n  Series: TLineSeries;\n\nbegin\n  Application.Initialize;\n  Application.CreateForm(TForm, Application);\n  Application.MainForm.Width := 600;\n  Application.MainForm.Height := 400;\n\n  Chart := TChart.Create(Application.MainForm);\n  Chart.Parent := Application.MainForm;\n  Chart.Align := alClient;\n  \n  Series := TLineSeries.Create(Chart);\n  Chart.AddSeries(Series);\n\n  Series.AddXY(1, 5);\n  Series.AddXY(2, 10);\n  Series.AddXY(3, 15);\n  Series.AddXY(4, 20);\n  Series.AddXY(5, 25);\n\n  Application.Run;\nend.\n```"
  },
  {
    "task": "Write a script that compresses files into a zip archive using a standard library.",
    "code": "```pascal\nprogram ZipFiles;\n\nuses\n  SysUtils, Classes, Zipper;\n\nprocedure CompressFiles(const Files: array of string; const ArchiveName: string);\nvar\n  Zipper: TZipper;\n  I: Integer;\nbegin\n  Zipper := TZipper.Create;\n  try\n    Zipper.FileName := ArchiveName;\n    for I := Low(Files) to High(Files) do\n      Zipper.Entries.AddFileEntry(Files[I]);\n    Zipper.ZipAllFiles;\n  finally\n    Zipper.Free;\n  end;\nend;\n\nvar\n  FilesToCompress: array of string;\nbegin\n  SetLength(FilesToCompress, 2);\n  FilesToCompress[0] := 'file1.txt';\n  FilesToCompress[1] := 'file2.txt';\n  CompressFiles(FilesToCompress, 'archive.zip');\nend.\n```"
  },
  {
    "task": "Use a library to parse command-line arguments in your application.",
    "code": "```pascal\nprogram CommandLineParserExample;\n\nuses\n  SysUtils, Classes, GetOpt;\n\nvar\n  Options: TStrings;\n  Option: String;\n  Value: String;\n  i: Integer;\n\nbegin\n  Options := TStringList.Create;\n  try\n    // Define command-line options\n    Options.Add('help:h');\n    Options.Add('version:v');\n    Options.Add('output:o:');\n\n    // Parse command-line arguments\n    for i := 1 to ParamCount do\n    begin\n      if GetOpt(ParamStr(i), Options, Option, Value) then\n      begin\n        if (Option = 'help') or (Option = 'h') then\n          Writeln('Usage: CommandLineParserExample [options]')\n        else if (Option = 'version') or (Option = 'v') then\n          Writeln('Version 1.0')\n        else if (Option = 'output') or (Option = 'o') then\n          Writeln('Output file: ', Value)\n        else\n          Writeln('Unknown option: ', Option);\n      end;\n    end;\n  finally\n    Options.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Build a weather application that displays data from a weather API using a library for JSON parsing.",
    "code": "```pascal\nprogram WeatherApp;\n\nuses\n  SysUtils, fphttpclient, fpjson, jsonparser;\n\nconst\n  API_URL = 'http://api.weatherapi.com/v1/current.json?key=YOUR_API_KEY&q=London';\n\nvar\n  HttpClient: TFPHTTPClient;\n  Response: String;\n  JSONData: TJSONData;\n  WeatherObject: TJSONObject;\n\nbegin\n  HttpClient := TFPHTTPClient.Create(nil);\n  try\n    Response := HttpClient.Get(API_URL);\n    JSONData := GetJSON(Response);\n    WeatherObject := TJSONObject(JSONData);\n\n    writeln('Location: ', WeatherObject.GetPath('location.name').AsString);\n    writeln('Region: ', WeatherObject.GetPath('location.region').AsString);\n    writeln('Country: ', WeatherObject.GetPath('location.country').AsString);\n    writeln('Temperature (C): ', WeatherObject.GetPath('current.temp_c').AsFloat:0:2);\n    writeln('Condition: ', WeatherObject.GetPath('current.condition.text').AsString);\n  finally\n    HttpClient.Free;\n    JSONData.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Create a video player application using a library that handles video playback.",
    "code": "```pascal\nprogram VideoPlayerApp;\n\nuses\n  SysUtils,\n  VideoLibrary;  { Assume VideoLibrary is a library that handles video playback }\n\nvar\n  videoPlayer: TVideoPlayer;\n\nbegin\n  try\n    videoPlayer := TVideoPlayer.Create;\n    try\n      videoPlayer.LoadFile('example.mp4');\n      videoPlayer.Play;\n    finally\n      videoPlayer.Free;\n    end;\n  except\n    on E: Exception do\n      Writeln('An error occurred: ', E.Message);\n  end;\nend.\n```"
  },
  {
    "task": "Develop a system that logs application events using a logging library for better traceability.",
    "code": "```pascal\nprogram EventLogger;\n\nuses\n  SysUtils, Classes;\n\ntype\n  TEventLogger = class\n  private\n    FLogFileName: string;\n    FLogFile: TextFile;\n  public\n    constructor Create(const LogFileName: string);\n    destructor Destroy; override;\n    procedure LogEvent(const EventMsg: string);\n  end;\n\nconstructor TEventLogger.Create(const LogFileName: string);\nbegin\n  FLogFileName := LogFileName;\n  AssignFile(FLogFile, FLogFileName);\n  if not FileExists(FLogFileName) then\n    Rewrite(FLogFile)\n  else\n    Append(FLogFile);\nend;\n\ndestructor TEventLogger.Destroy;\nbegin\n  CloseFile(FLogFile);\n  inherited Destroy;\nend;\n\nprocedure TEventLogger.LogEvent(const EventMsg: string);\nbegin\n  WriteLn(FLogFile, FormatDateTime('yyyy-mm-dd hh:nn:ss', Now) + ' - ' + EventMsg);\n  Flush(FLogFile);\nend;\n\nvar\n  Logger: TEventLogger;\n\nbegin\n  Logger := TEventLogger.Create('application.log');\n  try\n    Logger.LogEvent('Application started');\n    // Simulate other events\n    Logger.LogEvent('User logged in');\n    Logger.LogEvent('Data updated');\n    Logger.LogEvent('Application closed');\n  finally\n    Logger.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Implement a feature that encrypts and decrypts data using a library for encryption.",
    "code": "```pascal\nprogram EncryptionDemo;\n\nuses\n  SysUtils, DCPrijndael, DCPsha256;\n\nprocedure EncryptDecryptDemo;\nvar\n  Cipher: TDCP_rijndael;\n  Key: array[0..31] of Byte;\n  Data: string;\n  EncryptedData, DecryptedData: string;\nbegin\n  // Sample data\n  Data := 'Hello, Pascal!';\n  \n  // Initialize key (must be 256 bits for AES-256)\n  FillChar(Key, SizeOf(Key), 0);\n  Move(SHA256String('password'), Key, SizeOf(Key));\n  \n  // Create cipher instance\n  Cipher := TDCP_rijndael.Create(nil);\n  try\n    Cipher.Init(Key, 256, nil); // Initialize cipher with key and bit length\n    \n    // Encrypt data\n    EncryptedData := Cipher.EncryptString(Data);\n    \n    // Decrypt data\n    DecryptedData := Cipher.DecryptString(EncryptedData);\n    \n    // Output results\n    Writeln('Original data: ', Data);\n    Writeln('Encrypted data: ', EncryptedData);\n    Writeln('Decrypted data: ', DecryptedData);\n  finally\n    Cipher.Free;\n  end;\nend;\n\nbegin\n  EncryptDecryptDemo;\nend.\n```"
  },
  {
    "task": "Write a program that fetches and displays cryptocurrency prices using a third-party library for API interaction.",
    "code": "```pascal\nprogram CryptoPrices;\n\nuses\n  SysUtils, fpHTTPClient, fpjson, jsonparser;\n\nfunction GetCryptoPrice(const CryptoSymbol: string): Double;\nvar\n  Client: TFPHTTPClient;\n  Response: String;\n  JSONData: TJSONData;\nbegin\n  Client := TFPHTTPClient.Create(nil);\n  try\n    Response := Client.Get('https://api.coingecko.com/api/v3/simple/price?ids=' + CryptoSymbol + '&vs_currencies=usd');\n    JSONData := GetJSON(Response);\n    Result := JSONData.FindPath(CryptoSymbol + '.usd').AsFloat;\n  finally\n    Client.Free;\n  end;\nend;\n\nvar\n  BitcoinPrice: Double;\n  EthereumPrice: Double;\nbegin\n  try\n    BitcoinPrice := GetCryptoPrice('bitcoin');\n    EthereumPrice := GetCryptoPrice('ethereum');\n    WriteLn('Bitcoin Price: $', BitcoinPrice:0:2);\n    WriteLn('Ethereum Price: $', EthereumPrice:0:2);\n  except\n    on E: Exception do\n      WriteLn('Error fetching prices: ', E.Message);\n  end;\nend.\n```"
  },
  {
    "task": "Use a library to implement OAuth authentication for secure user login in your application.",
    "code": "```pascal\nprogram OAuthAuthentication;\n\nuses\n  SysUtils,\n  fphttpclient,\n  fpjson,\n  jsonparser;\n\nfunction GetAccessToken(clientID, clientSecret, authCode, redirectURI: string): string;\nvar\n  httpClient: TFPHTTPClient;\n  response: string;\nbegin\n  httpClient := TFPHTTPClient.Create(nil);\n  try\n    httpClient.AddHeader('Content-Type', 'application/x-www-form-urlencoded');\n    response := httpClient.FormPost('https://oauth2.example.com/token', [\n      'client_id', clientID,\n      'client_secret', clientSecret,\n      'code', authCode,\n      'redirect_uri', redirectURI,\n      'grant_type', 'authorization_code'\n    ]);\n    with TJSONParser.Create(response) do\n    try\n      Result := TJSONObject(Parse).Get('access_token', '');\n    finally\n      Free;\n    end;\n  finally\n    httpClient.Free;\n  end;\nend;\n\nbegin\n  Writeln('Access Token: ', GetAccessToken('your_client_id', 'your_client_secret', 'auth_code', 'http://localhost/callback'));\nend.\n```"
  },
  {
    "task": "Build a calculator that evaluates mathematical expressions using a math parsing library.",
    "code": "```pascal\nprogram Calculator;\n\nuses\n  SysUtils, Math, fpexprpars;\n\nvar\n  Parser: TFPExpressionParser;\n  Expression: String;\n  Result: Double;\n\nbegin\n  Parser := TFPExpressionParser.Create(nil);\n  try\n    Write('Enter a mathematical expression: ');\n    ReadLn(Expression);\n    Parser.BuiltIns := [bcMath];\n    Parser.Expression := Expression;\n    Result := ArgToFloat(Parser.Evaluate);\n    WriteLn('Result: ', Result:0:2);\n  except\n    on E: Exception do\n      WriteLn('Error: ', E.Message);\n  end;\n  Parser.Free;\nend.\n```"
  },
  {
    "task": "Create a chatbot that integrates a natural language processing library for understanding user input.",
    "code": "```pascal\nprogram Chatbot;\n\nuses\n  SysUtils, NLP_Library; {Assuming NLP_Library is a hypothetical natural language processing library}\n\nvar\n  userInput, botResponse: string;\n  nlpEngine: TNLPProcessor;\n\nbegin\n  nlpEngine := TNLPProcessor.Create;\n  try\n    writeln('Welcome to the Chatbot. Type \"exit\" to quit.');\n    repeat\n      write('You: ');\n      readln(userInput);\n      if userInput <> 'exit' then\n      begin\n        botResponse := nlpEngine.ProcessInput(userInput);\n        writeln('Bot: ', botResponse);\n      end;\n    until userInput = 'exit';\n  finally\n    nlpEngine.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Develop a tool that detects faces in images using a computer vision library.",
    "code": "```pascal\nprogram FaceDetectionTool;\n\nuses\n  SysUtils, \n  Classes,\n  cvcore, // Assume cvcore is the computer vision library\n  cvimgproc, \n  cvobjdetect;\n\nvar\n  Capture: TcvCapture;\n  Frame: PIplImage;\n  FaceCascade: TCvHaarClassifierCascade;\n  Storage: TCvMemStorage;\n  Faces: TCvSeq;\n  i: Integer;\n\nbegin\n  // Load the Haar Cascade for face detection\n  FaceCascade := cvLoadHaarClassifierCascade('haarcascade_frontalface_default.xml', cvSize(1, 1));\n  Storage := cvCreateMemStorage(0);\n\n  // Initialize capture from a video or camera\n  Capture := cvCreateCameraCapture(0);\n  if Capture = nil then\n  begin\n    WriteLn('Error: Camera not found.');\n    Exit;\n  end;\n\n  // Main loop\n  while True do\n  begin\n    // Capture a frame from the camera\n    Frame := cvQueryFrame(Capture);\n    if Frame = nil then\n      Break;\n\n    // Detect faces in the frame\n    Faces := cvHaarDetectObjects(Frame, FaceCascade, Storage, 1.1, 3, 0, cvSize(30, 30), cvSize(0, 0));\n\n    // Draw rectangles around detected faces\n    for i := 0 to Faces^.total - 1 do\n    begin\n      var FaceRect: PCvRect;\n      FaceRect := cvGetSeqElem(Faces, i);\n      cvRectangle(Frame, \n                  cvPoint(FaceRect^.x, FaceRect^.y),\n                  cvPoint(FaceRect^.x + FaceRect^.width, FaceRect^.y + FaceRect^.height),\n                  cvScalar(255, 0, 0, 0), 2, 8, 0);\n    end;\n\n    // Show the frame\n    cvShowImage('Face Detection', Frame);\n\n    // Break the loop on key press\n    if cvWaitKey(10) >= 0 then\n      Break;\n  end;\n\n  // Release resources\n  cvReleaseCapture(Capture);\n  cvDestroyWindow('Face Detection');\n  cvReleaseMemStorage(Storage);\nend.\n```"
  },
  {
    "task": "Implement a program that converts date and time across different time zones using a library for date manipulation.",
    "code": "```pascal\nprogram TimeZoneConversion;\n\nuses\n  SysUtils, DateUtils;\n\nvar\n  OriginalDateTime: TDateTime;\n  ConvertedDateTime: TDateTime;\n  SourceTimeZone, TargetTimeZone: TTimeZoneInformation;\n  TargetTimeZoneName: string;\n\nbegin\n  { Set original date and time }\n  OriginalDateTime := EncodeDateTime(2023, 10, 25, 14, 30, 0, 0);\n\n  { Get source time zone information (local time zone) }\n  GetTimeZoneInformation(SourceTimeZone);\n\n  { Define target time zone name, e.g., 'Eastern Standard Time' }\n  TargetTimeZoneName := 'Eastern Standard Time';\n\n  { Retrieve target time zone information }\n  if not TTimeZone.Local.GetTimeZoneInformationForYear(YearOf(OriginalDateTime), TargetTimeZone, TargetTimeZoneName) then\n  begin\n    Writeln('Could not retrieve target time zone information.');\n    Exit;\n  end;\n\n  { Convert the original date and time to the target time zone }\n  ConvertedDateTime := TTimeZone.Local.ToUniversalTime(OriginalDateTime);\n  ConvertedDateTime := TTimeZone.Local.ToLocalTime(ConvertedDateTime);\n\n  { Output the results }\n  Writeln('Original Date and Time: ', DateTimeToStr(OriginalDateTime));\n  Writeln('Converted Date and Time: ', DateTimeToStr(ConvertedDateTime));\nend.\n```"
  },
  {
    "task": "Write a utility that uploads files to a cloud storage service using a library that interfaces with the service's API.",
    "code": "```pascal\nprogram UploadToCloud;\n\nuses\n  SysUtils, Classes, CloudAPI; // Assuming CloudAPI is the library for cloud service interaction\n\nprocedure UploadFileToCloud(const FileName: string);\nvar\n  CloudService: TCloudService;\n  FileStream: TFileStream;\nbegin\n  CloudService := TCloudService.Create;\n  try\n    FileStream := TFileStream.Create(FileName, fmOpenRead);\n    try\n      CloudService.UploadFile(FileName, FileStream);\n      WriteLn('File uploaded successfully: ', FileName);\n    finally\n      FileStream.Free;\n    end;\n  finally\n    CloudService.Free;\n  end;\nend;\n\nvar\n  FileName: string;\nbegin\n  Write('Enter the file name to upload: ');\n  ReadLn(FileName);\n  UploadFileToCloud(FileName);\nend.\n```"
  },
  {
    "task": "Create a real-time chat system using a library that supports asynchronous communication.",
    "code": "```pascal\nprogram RealTimeChat;\n\n{$APPTYPE CONSOLE}\n\nuses\n  SysUtils,\n  Classes,\n  Generics.Collections,\n  AsyncTcpClient;\n\ntype\n  TChatClient = class\n  private\n    FClient: TAsyncTcpClient;\n    FMessages: TThreadList<string>;\n    procedure OnReceiveData(Sender: TObject; const Data: string);\n  public\n    constructor Create(const Host: string; Port: Integer);\n    destructor Destroy; override;\n    procedure SendMessage(const Msg: string);\n    procedure DisplayMessages;\n  end;\n\nconstructor TChatClient.Create(const Host: string; Port: Integer);\nbegin\n  FMessages := TThreadList<string>.Create;\n  FClient := TAsyncTcpClient.Create(Host, Port);\n  FClient.OnDataReceived := OnReceiveData;\n  FClient.Connect;\nend;\n\ndestructor TChatClient.Destroy;\nbegin\n  FClient.Free;\n  FMessages.Free;\n  inherited;\nend;\n\nprocedure TChatClient.OnReceiveData(Sender: TObject; const Data: string);\nbegin\n  FMessages.Add(Data);\nend;\n\nprocedure TChatClient.SendMessage(const Msg: string);\nbegin\n  FClient.SendData(Msg);\nend;\n\nprocedure TChatClient.DisplayMessages;\nvar\n  MsgList: TList<string>;\n  Msg: string;\nbegin\n  MsgList := FMessages.LockList;\n  try\n    for Msg in MsgList do\n      Writeln(Msg);\n    MsgList.Clear;\n  finally\n    FMessages.UnlockList;\n  end;\nend;\n\nvar\n  ChatClient: TChatClient;\n  Input: string;\nbegin\n  ChatClient := TChatClient.Create('chatserver.example.com', 12345);\n  try\n    Writeln('Enter your messages. Type \"exit\" to quit.');\n    repeat\n      Readln(Input);\n      if Input <> 'exit' then\n      begin\n        ChatClient.SendMessage(Input);\n        ChatClient.DisplayMessages;\n      end;\n    until Input = 'exit';\n  finally\n    ChatClient.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Use a library to generate and manipulate UUIDs for unique identification in your application.",
    "code": "```pascal\nprogram UUIDExample;\n\nuses\n  SysUtils, Classes, IdGlobal, IdHash, IdHashMessageDigest;\n\nfunction GenerateUUID: string;\nvar\n  GUID: TGUID;\nbegin\n  CreateGUID(GUID);\n  Result := GUIDToString(GUID);\nend;\n\nfunction MD5Hash(const Value: string): string;\nvar\n  Hash: TIdHashMessageDigest5;\nbegin\n  Hash := TIdHashMessageDigest5.Create;\n  try\n    Result := Hash.HashStringAsHex(Value, IndyTextEncoding_UTF8);\n  finally\n    Hash.Free;\n  end;\nend;\n\nvar\n  UUID, HashedUUID: string;\nbegin\n  UUID := GenerateUUID;\n  Writeln('Generated UUID: ', UUID);\n\n  HashedUUID := MD5Hash(UUID);\n  Writeln('MD5 Hash of UUID: ', HashedUUID);\nend.\n```"
  },
  {
    "task": "Build a desktop application that uses a library for creating graphical user interfaces.",
    "code": "```pascal\nprogram DesktopApp;\n\nuses\n  Forms,\n  MainUnit in 'MainUnit.pas' {MainForm};\n\n{$R *.res}\n\nbegin\n  Application.Initialize;\n  Application.CreateForm(TMainForm, MainForm);\n  Application.Run;\nend.\n```\n\n```pascal\nunit MainUnit;\n\ninterface\n\nuses\n  Classes, Controls, Forms, StdCtrls;\n\ntype\n  TMainForm = class(TForm)\n    Button1: TButton;\n    procedure Button1Click(Sender: TObject);\n  end;\n\nvar\n  MainForm: TMainForm;\n\nimplementation\n\n{$R *.dfm}\n\nprocedure TMainForm.Button1Click(Sender: TObject);\nbegin\n  ShowMessage('Hello, World!');\nend;\n\nend.\n```\n\n```dfm\nobject MainForm: TMainForm\n  Left = 0\n  Top = 0\n  Caption = 'Desktop App'\n  ClientHeight = 300\n  ClientWidth = 400\n  Color = clBtnFace\n  Font.Charset = DEFAULT_CHARSET\n  Font.Color = clWindowText\n  Font.Height = -11\n  Font.Name = 'Tahoma'\n  Font.Style = []\n  OldCreateOrder = False\n  PixelsPerInch = 96\n  TextHeight = 13\n  object Button1: TButton\n    Left = 160\n    Top = 120\n    Width = 75\n    Height = 25\n    Caption = 'Click Me'\n    TabOrder = 0\n    OnClick = Button1Click\n  end\nend\n```"
  },
  {
    "task": "Develop an algorithm that finds the shortest path in a graph using a library that provides graph algorithms.",
    "code": "```pascal\nprogram ShortestPathGraph;\n\nuses\n  GraphLib; {Assuming GraphLib is the library that provides graph algorithms}\n\nvar\n  graph: TGraph;\n  source, destination: Integer;\n  shortestPath: TPath;\n\nbegin\n  { Initialize the graph, source, and destination }\n  graph := GraphLib.CreateGraph;\n  source := 0; { Example source node }\n  destination := 5; { Example destination node }\n  \n  { Find the shortest path using the library's functionality }\n  shortestPath := GraphLib.FindShortestPath(graph, source, destination);\n  \n  { Output the shortest path }\n  GraphLib.PrintPath(shortestPath);\nend.\n```"
  },
  {
    "task": "Create a digital clock application that uses a library for handling time events.",
    "code": "```pascal\nprogram DigitalClockApp;\n\nuses\n  SysUtils, DateUtils, Crt;\n\nprocedure DisplayTime;\nbegin\n  while not KeyPressed do\n  begin\n    ClrScr;\n    WriteLn(FormatDateTime('hh:nn:ss', Now));\n    Sleep(1000);\n  end;\nend;\n\nbegin\n  DisplayTime;\nend.\n```"
  },
  {
    "task": "Write a program that uses a library to convert between different units of measurement.",
    "code": "```pascal\nprogram UnitConversion;\n\nuses\n  SysUtils, Math;\n\nfunction InchesToCentimeters(inches: Double): Double;\nbegin\n  Result := inches * 2.54;\nend;\n\nfunction CentimetersToInches(cm: Double): Double;\nbegin\n  Result := cm / 2.54;\nend;\n\nvar\n  inches, centimeters: Double;\nbegin\n  Write('Enter the value in inches: ');\n  ReadLn(inches);\n  centimeters := InchesToCentimeters(inches);\n  WriteLn(Format('%.2f inches is equal to %.2f centimeters', [inches, centimeters]));\n\n  Write('Enter the value in centimeters: ');\n  ReadLn(centimeters);\n  inches := CentimetersToInches(centimeters);\n  WriteLn(Format('%.2f centimeters is equal to %.2f inches', [centimeters, inches]));\nend.\n```"
  },
  {
    "task": "Use a library to implement a caching mechanism for improving application performance.",
    "code": "```pascal\nprogram CachingExample;\n\nuses\n  SysUtils, Generics.Collections;\n\ntype\n  TCache<K, V> = class\n  private\n    FCache: TDictionary<K, V>;\n  public\n    constructor Create;\n    destructor Destroy; override;\n    procedure AddItem(const Key: K; const Value: V);\n    function GetItem(const Key: K; out Value: V): Boolean;\n  end;\n\nconstructor TCache<K, V>.Create;\nbegin\n  FCache := TDictionary<K, V>.Create;\nend;\n\ndestructor TCache<K, V>.Destroy;\nbegin\n  FCache.Free;\n  inherited;\nend;\n\nprocedure TCache<K, V>.AddItem(const Key: K; const Value: V);\nbegin\n  FCache.AddOrSetValue(Key, Value);\nend;\n\nfunction TCache<K, V>.GetItem(const Key: K; out Value: V): Boolean;\nbegin\n  Result := FCache.TryGetValue(Key, Value);\nend;\n\nvar\n  Cache: TCache<Integer, String>;\n  CachedValue: String;\nbegin\n  Cache := TCache<Integer, String>.Create;\n  try\n    Cache.AddItem(1, 'Hello');\n    Cache.AddItem(2, 'World');\n    \n    if Cache.GetItem(1, CachedValue) then\n      WriteLn('Cached Value for Key 1: ', CachedValue)\n    else\n      WriteLn('Value not found in cache for Key 1');\n\n    if Cache.GetItem(3, CachedValue) then\n      WriteLn('Cached Value for Key 3: ', CachedValue)\n    else\n      WriteLn('Value not found in cache for Key 3');\n  finally\n    Cache.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Build an e-commerce platform that integrates a payment processing library for handling transactions.",
    "code": "```pascal\nprogram ECommercePlatform;\n\nuses\n  SysUtils, PaymentProcessorLib; {Assumed external payment processing library}\n\ntype\n  TProduct = record\n    ID: Integer;\n    Name: String;\n    Price: Double;\n  end;\n\n  TCart = record\n    Products: array of TProduct;\n    Total: Double;\n  end;\n\nvar\n  Cart: TCart;\n\nprocedure AddProductToCart(var Cart: TCart; Product: TProduct);\nbegin\n  SetLength(Cart.Products, Length(Cart.Products) + 1);\n  Cart.Products[High(Cart.Products)] := Product;\n  Cart.Total := Cart.Total + Product.Price;\nend;\n\nprocedure Checkout(var Cart: TCart);\nvar\n  TransactionID: String;\nbegin\n  if ProcessPayment(Cart.Total, TransactionID) then\n    Writeln('Payment successful. Transaction ID: ', TransactionID)\n  else\n    Writeln('Payment failed. Please try again.');\nend;\n\nvar\n  Product1, Product2: TProduct;\nbegin\n  Product1.ID := 1;\n  Product1.Name := 'Laptop';\n  Product1.Price := 999.99;\n\n  Product2.ID := 2;\n  Product2.Name := 'Smartphone';\n  Product2.Price := 499.99;\n\n  AddProductToCart(Cart, Product1);\n  AddProductToCart(Cart, Product2);\n\n  Writeln('Total amount: $', Cart.Total:0:2);\n  Checkout(Cart);\nend.\n```"
  },
  {
    "task": "Create a to-do list application that stores data locally using a library for file management.",
    "code": "```pascal\nprogram ToDoListApp;\n\nuses\n  SysUtils, Classes;\n\ntype\n  TToDoList = class\n  private\n    FItems: TStringList;\n    FFileName: string;\n  public\n    constructor Create(const AFileName: string);\n    destructor Destroy; override;\n    procedure AddItem(const Item: string);\n    procedure RemoveItem(Index: Integer);\n    procedure LoadFromFile;\n    procedure SaveToFile;\n    procedure ListItems;\n  end;\n\nconstructor TToDoList.Create(const AFileName: string);\nbegin\n  FItems := TStringList.Create;\n  FFileName := AFileName;\n  if FileExists(FFileName) then\n    LoadFromFile;\nend;\n\ndestructor TToDoList.Destroy;\nbegin\n  SaveToFile;\n  FItems.Free;\n  inherited Destroy;\nend;\n\nprocedure TToDoList.AddItem(const Item: string);\nbegin\n  FItems.Add(Item);\nend;\n\nprocedure TToDoList.RemoveItem(Index: Integer);\nbegin\n  if (Index >= 0) and (Index < FItems.Count) then\n    FItems.Delete(Index);\nend;\n\nprocedure TToDoList.LoadFromFile;\nbegin\n  FItems.LoadFromFile(FFileName);\nend;\n\nprocedure TToDoList.SaveToFile;\nbegin\n  FItems.SaveToFile(FFileName);\nend;\n\nprocedure TToDoList.ListItems;\nvar\n  i: Integer;\nbegin\n  for i := 0 to FItems.Count - 1 do\n    WriteLn(i + 1, ': ', FItems[i]);\nend;\n\nvar\n  ToDoList: TToDoList;\n  Command: string;\n  Item: string;\n  Index: Integer;\n\nbegin\n  ToDoList := TToDoList.Create('todolist.txt');\n  try\n    repeat\n      WriteLn('Enter a command (add, remove, list, exit): ');\n      ReadLn(Command);\n      if Command = 'add' then\n      begin\n        Write('Enter item to add: ');\n        ReadLn(Item);\n        ToDoList.AddItem(Item);\n      end\n      else if Command = 'remove' then\n      begin\n        Write('Enter item number to remove: ');\n        ReadLn(Index);\n        ToDoList.RemoveItem(Index - 1);\n      end\n      else if Command = 'list' then\n        ToDoList.ListItems;\n    until Command = 'exit';\n  finally\n    ToDoList.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Develop a system that monitors server health using a library that provides network utilities.",
    "code": "```pascal\nprogram ServerHealthMonitor;\n\nuses\n  SysUtils, NetworkUtils;  // Assuming NetworkUtils is a library that provides network utilities\n\nprocedure MonitorServerHealth;\nvar\n  serverIP: string;\n  serverStatus: string;\nbegin\n  serverIP := '192.168.1.1'; // replace with actual server IP\n  serverStatus := NetworkUtils.CheckServerStatus(serverIP);\n  if serverStatus = 'Online' then\n    WriteLn('Server is healthy.')\n  else\n    WriteLn('Server is down or unreachable.');\nend;\n\nbegin\n  try\n    MonitorServerHealth;\n  except\n    on E: Exception do\n      WriteLn('An error occurred: ', E.Message);\n  end;\nend.\n```"
  },
  {
    "task": "Implement a program that detects language from a given text using a language detection library.",
    "code": "```pascal\nprogram LanguageDetection;\n\nuses\n  SysUtils, LanguageDetect; // Assuming LanguageDetect is a library for language detection\n\nvar\n  detector: TLanguageDetector;\n  detectedLanguage: string;\n  text: string;\n\nbegin\n  text := 'Bonjour, comment \u00e7a va?'; // Example text\n  detector := TLanguageDetector.Create;\n  try\n    detectedLanguage := detector.DetectLanguage(text);\n    WriteLn('Detected language: ', detectedLanguage);\n  finally\n    detector.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Write a script that sends notifications to a mobile device using a push notification library.",
    "code": "```pascal\nprogram PushNotification;\n\nuses\n  SysUtils, PushNotificationLib;\n\nvar\n  Notification: TPushNotification;\n\nbegin\n  try\n    Notification := TPushNotification.Create;\n    try\n      Notification.DeviceToken := 'your_device_token';\n      Notification.Message := 'Hello, this is a test notification!';\n      Notification.Send;\n      WriteLn('Notification sent successfully!');\n    finally\n      Notification.Free;\n    end;\n  except\n    on E: Exception do\n      WriteLn('Error sending notification: ', E.Message);\n  end;\nend.\n```"
  },
  {
    "task": "Use a library to generate reports in PDF format from application data.",
    "code": "```pascal\nprogram GeneratePDFReport;\n\nuses\n  SysUtils, fpReport, fpPDF;\n\nprocedure CreatePDFReport;\nvar\n  Report: TFPReport;\n  PDFExport: TFPReportPDFExport;\nbegin\n  Report := TFPReport.Create(nil);\n  try\n    PDFExport := TFPReportPDFExport.Create(nil);\n    try\n      Report.AddReportData('Title', 'Sample Report');\n      Report.AddReportData('Content', 'This is a sample report content.');\n\n      Report.LoadFromFile('report_template.lrf');\n      PDFExport.FileName := 'report_output.pdf';\n      Report.ExportTo(PDFExport);\n    finally\n      PDFExport.Free;\n    end;\n  finally\n    Report.Free;\n  end;\nend;\n\nbegin\n  try\n    CreatePDFReport;\n    WriteLn('PDF Report generated successfully.');\n  except\n    on E: Exception do\n      WriteLn('An error occurred: ', E.Message);\n  end;\nend.\n```"
  },
  {
    "task": "Build a program that performs statistical analysis on datasets using a statistical computing library.",
    "code": "```pascal\nprogram StatisticalAnalysis;\n\nuses\n  SysUtils, Math, StatLib; // Assuming StatLib is a hypothetical statistical computing library\n\nvar\n  Data: array of Double;\n  Mean, StdDev: Double;\n  i, Count: Integer;\n\nbegin\n  // Initialize dataset\n  Count := 10;\n  SetLength(Data, Count);\n  for i := 0 to Count - 1 do\n    Data[i] := Random * 100; // Fill with random data for demonstration\n\n  // Perform statistical analysis using the library\n  Mean := StatLib.CalculateMean(Data);\n  StdDev := StatLib.CalculateStandardDeviation(Data);\n\n  // Output results\n  WriteLn('Statistical Analysis Results:');\n  WriteLn('Mean: ', Mean:0:2);\n  WriteLn('Standard Deviation: ', StdDev:0:2);\nend.\n```"
  },
  {
    "task": "Create an image gallery application that uses a library for image caching and lazy loading.",
    "code": "```pascal\nprogram ImageGalleryApp;\n\nuses\n  SysUtils, Forms, Controls, Graphics, Dialogs, ExtCtrls, CacheUnit, LazyLoadUnit;\n\ntype\n  TImageGalleryForm = class(TForm)\n  private\n    ImagePanel: TPanel;\n    Cache: TImageCache;\n    procedure LoadImages;\n    procedure OnImageClick(Sender: TObject);\n  public\n    constructor Create(AOwner: TComponent); override;\n  end;\n\nconstructor TImageGalleryForm.Create(AOwner: TComponent);\nbegin\n  inherited Create(AOwner);\n  ImagePanel := TPanel.Create(Self);\n  ImagePanel.Parent := Self;\n  ImagePanel.Align := alClient;\n\n  Cache := TImageCache.Create;\n\n  LoadImages;\nend;\n\nprocedure TImageGalleryForm.LoadImages;\nvar\n  ImageFile: string;\n  Image: TImage;\nbegin\n  for ImageFile in TDirectory.GetFiles('path/to/images') do\n  begin\n    Image := TLazyLoadImage.Create(ImagePanel, Cache);\n    Image.Parent := ImagePanel;\n    Image.Picture.LoadFromFile(ImageFile);\n    Image.OnClick := @OnImageClick;\n  end;\nend;\n\nprocedure TImageGalleryForm.OnImageClick(Sender: TObject);\nbegin\n  ShowMessage('Image clicked: ' + (Sender as TImage).Hint);\nend;\n\nvar\n  ImageGalleryForm: TImageGalleryForm;\n\nbegin\n  Application.Initialize;\n  Application.CreateForm(TImageGalleryForm, ImageGalleryForm);\n  Application.Run;\nend.\n```"
  },
  {
    "task": "Develop a machine learning model that predicts outcomes using a machine learning library.",
    "code": "```pascal\nprogram MLModelPrediction;\n\nuses\n  SysUtils, Math, FGL, FPML;\n\nvar\n  model: TMLModel;\n  inputData: array of Double;\n  prediction: Double;\n\nbegin\n  // Initialize the machine learning model\n  model := TMLModel.Create;\n  try\n    // Load pre-trained model from file\n    model.LoadFromFile('model.dat');\n    \n    // Prepare input data for prediction\n    SetLength(inputData, 3); // Example input size\n    inputData[0] := 1.5;\n    inputData[1] := 2.3;\n    inputData[2] := 3.8;\n    \n    // Perform prediction\n    prediction := model.Predict(inputData);\n    \n    // Output the prediction\n    WriteLn('Predicted outcome: ', prediction:0:2);\n  finally\n    model.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Implement a feature that automatically formats code according to style guidelines using a code formatter library.",
    "code": "```pascal\nprogram CodeFormatter;\n\nuses\n  SysUtils, CodeFormatterLibrary;\n\nvar\n  inputCode, formattedCode: string;\n\nbegin\n  // Read the code from input\n  Write('Enter the code to format: ');\n  ReadLn(inputCode);\n\n  // Format the code using the library\n  formattedCode := CodeFormatterLibrary.FormatCode(inputCode);\n\n  // Output the formatted code\n  WriteLn('Formatted Code:');\n  WriteLn(formattedCode);\nend.\n```"
  },
  {
    "task": "Write a program that generates barcodes using a library for barcode generation.",
    "code": "```pascal\nprogram GenerateBarcode;\n\nuses\n  SysUtils, barcodegen;  // Ensure that 'barcodegen' is a valid Pascal library for barcode generation\n\nvar\n  barcode: TBarcode;\n\nbegin\n  { Initialize the barcode object }\n  barcode := TBarcode.Create;\n\n  try\n    { Set the barcode type, e.g., Code128, EAN13, etc. }\n    barcode.BarcodeType := bcCode128;\n    \n    { Set the data for the barcode }\n    barcode.Data := '123456789012';\n    \n    { Generate and save the barcode as an image file }\n    barcode.SaveToFile('barcode.png');\n  finally\n    barcode.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Use a library to create interactive maps for displaying geographical data in your application.",
    "code": "```pascal\nprogram InteractiveMapApp;\n\nuses\n  SysUtils, Interfaces, Forms, LeafletMap, // Assuming LeafletMap is a hypothetical Pascal library for maps\n  MainFormUnit;\n\n{$R *.res}\n\nbegin\n  Application.Initialize;\n  Application.CreateForm(TMainForm, MainForm);\n  MainForm.CreateInteractiveMap; // A method to set up and display the map\n  Application.Run;\nend.\n```"
  },
  {
    "task": "Build a simulation that models fluid dynamics using a library for physics simulations.",
    "code": "```pascal\nprogram FluidDynamicsSimulation;\n\nuses\n  SysUtils,\n  SomePhysicsLibrary;  { Assuming SomePhysicsLibrary provides necessary functions for physics simulations }\n\nvar\n  simulation: TPhysicsSimulation;\n  fluid: TFluidObject;\n  timeStep: Double;\n  duration: Double;\n  currentTime: Double;\n\nbegin\n  { Initialize the simulation }\n  simulation := TPhysicsSimulation.Create;\n  try\n    fluid := TFluidObject.Create;\n    \n    { Add the fluid object to the simulation }\n    simulation.AddObject(fluid);\n\n    timeStep := 0.01;  { Set the time step for the simulation }\n    duration := 10.0;  { Total duration of the simulation }\n    currentTime := 0.0;\n\n    { Run the simulation loop }\n    while currentTime < duration do\n    begin\n      simulation.Step(timeStep);\n      currentTime := currentTime + timeStep;\n\n      { Optionally, output the state of the fluid for each step, if needed }\n      Writeln('Time: ', FormatFloat('0.00', currentTime), \n              ' Fluid State: ', fluid.GetState);\n    end;\n  finally\n    fluid.Free;\n    simulation.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Create a program that reads barcodes from images using a library for barcode scanning.",
    "code": "```pascal\nprogram BarcodeScanner;\n\nuses\n  SysUtils, Classes, Graphics, ZXing.ScanManager, ZXing.BarcodeFormat, ZXing.ReadResult, Vcl.Imaging.jpeg;\n\nvar\n  ScanManager: TScanManager;\n  Image: TBitmap;\n  BarcodeResult: TReadResult;\n  JPEGImage: TJPEGImage;\n  Filename: string;\n\nbegin\n  try\n    // Initialize the ZXing barcode scanning library\n    ScanManager := TScanManager.Create(TBarcodeFormat.Auto, nil);\n\n    // Load the image file\n    Filename := 'barcode.jpg';\n    JPEGImage := TJPEGImage.Create;\n    try\n      JPEGImage.LoadFromFile(Filename);\n      Image := TBitmap.Create;\n      try\n        Image.Assign(JPEGImage);\n\n        // Perform barcode scanning\n        BarcodeResult := ScanManager.Scan(Image);\n\n        if BarcodeResult <> nil then\n        begin\n          Writeln('Barcode format: ', GetEnumName(TypeInfo(TBarcodeFormat), Integer(BarcodeResult.BarcodeFormat)));\n          Writeln('Barcode text: ', BarcodeResult.Text);\n        end\n        else\n          Writeln('No barcode detected.');\n      finally\n        Image.Free;\n      end;\n    finally\n      JPEGImage.Free;\n    end;\n\n  except\n    on E: Exception do\n      Writeln('Error: ', E.ClassName, ' - ', E.Message);\n  end;\nend.\n```"
  },
  {
    "task": "Develop a feature that performs spell checking using a library for text processing.",
    "code": "```pascal\nprogram SpellCheckExample;\n\nuses\n  SysUtils, Classes, Hunspell;\n\nvar\n  HunspellInstance: THunspell;\n  WordList: TStringList;\n  i: Integer;\n  WordToCheck: string;\n\nbegin\n  HunspellInstance := THunspell.Create('path_to_aff_file.aff', 'path_to_dic_file.dic');\n  WordList := TStringList.Create;\n\n  try\n    WordList.Add('example');\n    WordList.Add('spellng'); // intentional typo\n    WordList.Add('check');\n\n    for i := 0 to WordList.Count - 1 do\n    begin\n      WordToCheck := WordList[i];\n      if HunspellInstance.Spell(WordToCheck) then\n        Writeln(WordToCheck, ' is spelled correctly.')\n      else\n        Writeln(WordToCheck, ' is misspelled.');\n    end;\n\n  finally\n    HunspellInstance.Free;\n    WordList.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Implement a service that aggregates news articles from various sources using a library for web content aggregation.",
    "code": "```pascal\nprogram NewsAggregator;\n\nuses\n  SysUtils, Classes, fphttpclient, fpjson, jsonparser;\n\ntype\n  TNewsAggregator = class\n  private\n    FUrls: TStringList;\n    FArticles: TStringList;\n  public\n    constructor Create;\n    destructor Destroy; override;\n    procedure AddSource(const AUrl: string);\n    procedure FetchArticles;\n    procedure DisplayArticles;\n  end;\n\nconstructor TNewsAggregator.Create;\nbegin\n  FUrls := TStringList.Create;\n  FArticles := TStringList.Create;\nend;\n\ndestructor TNewsAggregator.Destroy;\nbegin\n  FUrls.Free;\n  FArticles.Free;\n  inherited Destroy;\nend;\n\nprocedure TNewsAggregator.AddSource(const AUrl: string);\nbegin\n  FUrls.Add(AUrl);\nend;\n\nprocedure TNewsAggregator.FetchArticles;\nvar\n  i: Integer;\n  httpClient: TFPHTTPClient;\n  jsonData: TJSONData;\n  article: string;\nbegin\n  httpClient := TFPHTTPClient.Create(nil);\n  try\n    for i := 0 to FUrls.Count - 1 do\n    begin\n      try\n        article := httpClient.Get(FUrls[i]);\n        jsonData := GetJSON(article);\n        try\n          FArticles.Add(jsonData.AsJSON);\n        finally\n          jsonData.Free;\n        end;\n      except\n        on E: Exception do\n          WriteLn('Error fetching from ', FUrls[i], ': ', E.Message);\n      end;\n    end;\n  finally\n    httpClient.Free;\n  end;\nend;\n\nprocedure TNewsAggregator.DisplayArticles;\nvar\n  i: Integer;\nbegin\n  for i := 0 to FArticles.Count - 1 do\n  begin\n    WriteLn('Article ', i+1, ': ', FArticles[i]);\n  end;\nend;\n\nvar\n  aggregator: TNewsAggregator;\n\nbegin\n  aggregator := TNewsAggregator.Create;\n  try\n    aggregator.AddSource('http://example.com/news1.json');\n    aggregator.AddSource('http://example.com/news2.json');\n    aggregator.FetchArticles;\n    aggregator.DisplayArticles;\n  finally\n    aggregator.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Write a script that converts spoken language to text using a speech recognition library.",
    "code": "```pascal\nprogram SpeechToText;\n\nuses\n  SysUtils, SpeechRecognitionLibrary;\n\nvar\n  recognizer: TSpeechRecognizer;\n  recognizedText: string;\n\nbegin\n  recognizer := TSpeechRecognizer.Create;\n  try\n    WriteLn('Listening...');\n    recognizedText := recognizer.RecognizeSpeech;\n    WriteLn('Recognized Text: ', recognizedText);\n  finally\n    recognizer.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Use a library to implement a feature that tracks user behavior in a web application.",
    "code": "```pascal\nprogram UserBehaviorTracking;\n\nuses\n  SysUtils, fpjson, jsonparser;\n\ntype\n  TUserAction = record\n    UserID: Integer;\n    Action: String;\n    Timestamp: TDateTime;\n  end;\n\nvar\n  UserActions: array of TUserAction;\n  ActionFile: TextFile;\n  JsonObject: TJSONObject;\n  JsonString: String;\n  i: Integer;\n\nprocedure LogUserAction(UserID: Integer; Action: String);\nvar\n  UserAction: TUserAction;\nbegin\n  UserAction.UserID := UserID;\n  UserAction.Action := Action;\n  UserAction.Timestamp := Now;\n  SetLength(UserActions, Length(UserActions) + 1);\n  UserActions[High(UserActions)] := UserAction;\nend;\n\nprocedure SaveUserActionsToJson;\nbegin\n  JsonObject := TJSONObject.Create;\n  try\n    for i := 0 to High(UserActions) do\n    begin\n      JsonObject.Add('UserID', UserActions[i].UserID);\n      JsonObject.Add('Action', UserActions[i].Action);\n      JsonObject.Add('Timestamp', DateTimeToStr(UserActions[i].Timestamp));\n    end;\n    JsonString := JsonObject.AsJSON;\n    AssignFile(ActionFile, 'user_actions.json');\n    Rewrite(ActionFile);\n    try\n      WriteLn(ActionFile, JsonString);\n    finally\n      CloseFile(ActionFile);\n    end;\n  finally\n    JsonObject.Free;\n  end;\nend;\n\nbegin\n  LogUserAction(1, 'Login');\n  LogUserAction(2, 'Logout');\n  SaveUserActionsToJson;\nend.\n```"
  },
  {
    "task": "Build a program that analyzes sentiment in social media posts using a sentiment analysis library.",
    "code": "```pascal\nprogram SentimentAnalysis;\n\nuses\n  SysUtils,\n  SentimentAnalyzer;  // Assuming SentimentAnalyzer is the library for sentiment analysis\n\nvar\n  post: string;\n  sentimentScore: Double;\n  sentimentResult: string;\n\nbegin\n  // Example social media post\n  post := 'I love programming in Pascal!';\n\n  // Analyze the sentiment of the post\n  sentimentScore := SentimentAnalyzer.AnalyzeSentiment(post);\n\n  // Determine sentiment result\n  if sentimentScore > 0 then\n    sentimentResult := 'Positive'\n  else if sentimentScore < 0 then\n    sentimentResult := 'Negative'\n  else\n    sentimentResult := 'Neutral';\n\n  // Output the sentiment result\n  Writeln('The sentiment of the post is: ', sentimentResult);\nend.\n```"
  },
  {
    "task": "Create a utility that detects plagiarism in text using a library for text comparison.",
    "code": "```pascal\nprogram PlagiarismDetector;\n\nuses\n  StrUtils; // Using StrUtils as an example for text comparison\n\nfunction DetectPlagiarism(text1, text2: string): Boolean;\nvar\n  similarity: Integer;\nbegin\n  // Example comparison using similar text function\n  similarity := CompareText(text1, text2);\n\n  // Assume texts are plagiarized if they are identical\n  DetectPlagiarism := similarity = 0;\nend;\n\nvar\n  textA, textB: string;\n  isPlagiarized: Boolean;\nbegin\n  // Example texts to compare\n  textA := 'This is an example text.';\n  textB := 'This is an example text.';\n\n  // Detect plagiarism\n  isPlagiarized := DetectPlagiarism(textA, textB);\n\n  if isPlagiarized then\n    Writeln('Plagiarism detected!')\n  else\n    Writeln('No plagiarism detected.');\nend.\n```"
  },
  {
    "task": "Develop a program that predicts weather trends using a library for time series forecasting.",
    "code": "```pascal\nprogram WeatherTrendPrediction;\n\nuses\n  SysUtils, Classes, TimeSeriesForecastingLib;\n\nvar\n  WeatherData: TTimeSeriesData;\n  Forecast: TForecastResult;\n\nbegin\n  WeatherData := TTimeSeriesData.Create;\n  try\n    WeatherData.LoadFromFile('weather_data.csv');\n    Forecast := TTimeSeriesForecastingLib.Predict(WeatherData);\n    try\n      WriteLn('Weather trend prediction: ');\n      WriteLn(Forecast.ToString);\n    finally\n      Forecast.Free;\n    end;\n  finally\n    WeatherData.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Implement a feature that performs facial recognition using a library specialized for biometric analysis.",
    "code": "```pascal\nprogram FacialRecognitionDemo;\n\nuses\n  sysutils,\n  BiometricLibrary;  { Assuming BiometricLibrary is the library for biometric analysis }\n\nprocedure PerformFacialRecognition;\nvar\n  imageFile: string;\n  recognitionResult: boolean;\nbegin\n  imageFile := 'path_to_image.jpg';\n  \n  { Initialize the biometric system }\n  if not InitBiometricSystem then\n  begin\n    writeln('Failed to initialize biometric system.');\n    exit;\n  end;\n\n  { Perform facial recognition }\n  recognitionResult := RecognizeFace(imageFile);\n  \n  { Output the result }\n  if recognitionResult then\n    writeln('Face recognized successfully.')\n  else\n    writeln('Face recognition failed.');\n\n  { Finalize the biometric system }\n  FinalizeBiometricSystem;\nend;\n\nbegin\n  PerformFacialRecognition;\nend.\n```"
  },
  {
    "task": "Write a program that interacts with blockchain networks using a library for blockchain communication.",
    "code": "```pascal\nprogram BlockchainIntegration;\n\nuses\n  BlockchainLib; // Assume BlockchainLib is a library for blockchain communication\n\nvar\n  blockchain: TBlockchain;\n  networkInfo: string;\n\nbegin\n  // Initialize the blockchain object\n  blockchain := TBlockchain.Create;\n\n  // Connect to the blockchain network\n  if blockchain.Connect('https://example-blockchain-network.com') then\n  begin\n    // Retrieve network information\n    networkInfo := blockchain.GetNetworkInfo;\n    writeln('Connected to blockchain network: ', networkInfo);\n  end\n  else\n    writeln('Failed to connect to blockchain network.');\n\n  // Clean up\n  blockchain.Free;\nend.\n```"
  },
  {
    "task": "Use a library to perform image recognition tasks in your application.",
    "code": "```pascal\nprogram ImageRecognition;\n\nuses\n  SysUtils, Classes, SomeImageLibrary; // Replace SomeImageLibrary with an actual image recognition library\n\nvar\n  ImageFile: string;\n  RecognitionResult: string;\n\nbegin\n  // Initialize the library (depends on the specific library used)\n  InitializeImageRecognitionLibrary;\n  \n  // Load the image file\n  ImageFile := 'example.jpg';\n  \n  // Perform image recognition\n  RecognitionResult := RecognizeImage(ImageFile);\n  \n  // Output the result\n  WriteLn('Recognition Result: ', RecognitionResult);\n  \n  // Finalize the library (if needed)\n  FinalizeImageRecognitionLibrary;\nend.\n```"
  },
  {
    "task": "Build a program that converts audio files from one format to another using an audio conversion library.",
    "code": "```pascal\nprogram AudioConverter;\n\nuses\n  Classes, SysUtils, AudioConversionLibrary;  {Assuming a hypothetical library}\n\nvar\n  SourceFile, TargetFile: string;\n  Converter: TAudioConverter;  {Assuming TAudioConverter is a class from the library}\n\nbegin\n  { Set up file paths }\n  SourceFile := 'input.wav';\n  TargetFile := 'output.mp3';\n\n  { Initialize the converter }\n  Converter := TAudioConverter.Create;\n  try\n    Converter.LoadFromFile(SourceFile);\n    Converter.SaveToFile(TargetFile, afMP3);  {Assuming afMP3 is a format constant from the library}\n  finally\n    Converter.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Create a web application that uses a library for rendering 3D graphics.",
    "code": "```pascal\nprogram Web3DApp;\n\nuses\n  SysUtils, Classes, CastleWindow, CastleScene, CastleViewport, CastleControls;\n\nvar\n  Window: TCastleWindowBase;\n  Viewport: TCastleViewport;\n  Scene: TCastleScene;\n\nbegin\n  Window := TCastleWindowBase.Create(nil);\n  try\n    Window.Open;\n\n    Viewport := TCastleViewport.Create(Window);\n    Viewport.FullSize := True;\n    Window.Controls.InsertFront(Viewport);\n\n    Scene := TCastleScene.Create(Window);\n    Scene.Load('castle-data:/example.x3d');\n    Viewport.Items.Add(Scene);\n\n    Application.Run;\n  finally\n    FreeAndNil(Window);\n  end;\nend.\n```"
  },
  {
    "task": "Develop a feature that performs currency conversion using a library for financial calculations.",
    "code": "```pascal\nprogram CurrencyConversion;\n\nuses\n  SysUtils, Math;\n\ntype\n  TCurrencyConverter = class\n  public\n    function ConvertAmount(Amount: Double; FromRate, ToRate: Double): Double;\n  end;\n\nfunction TCurrencyConverter.ConvertAmount(Amount: Double; FromRate, ToRate: Double): Double;\nbegin\n  Result := (Amount / FromRate) * ToRate;\nend;\n\nvar\n  Converter: TCurrencyConverter;\n  Amount, FromRate, ToRate, ConvertedAmount: Double;\nbegin\n  Converter := TCurrencyConverter.Create;\n  try\n    Amount := 100.0; // Example amount\n    FromRate := 1.1; // Example exchange rate for the original currency\n    ToRate := 1.2;   // Example exchange rate for the target currency\n\n    ConvertedAmount := Converter.ConvertAmount(Amount, FromRate, ToRate);\n    \n    WriteLn('Converted Amount: ', FormatFloat('0.00', ConvertedAmount));\n  finally\n    Converter.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Implement a program that manages user sessions using a library for session handling.",
    "code": "```pascal\nprogram UserSessionManagement;\n\nuses\n  SysUtils, SessionLibrary;  { Hypothetical session handling library }\n\nvar\n  session: TSession;\n\nbegin\n  session := TSession.Create;\n  try\n    session.Start;\n    Writeln('Session started for user.');\n\n    // Simulate session operations\n    session.SetData('username', 'exampleUser');\n    Writeln('Username set to: ', session.GetData('username'));\n\n    session.EndSession;\n    Writeln('Session ended for user.');\n  finally\n    session.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Write a script that automates browser actions using a browser automation library.",
    "code": "```pascal\nprogram BrowserAutomation;\n\nuses\n  SysUtils,\n  Selenium2WebDriver;\n\nvar\n  Driver: IWebDriver;\n  Element: IWebElement;\n\nbegin\n  // Initialize the WebDriver for a browser (e.g., Chrome)\n  Driver := TWebDriver.Create('localhost', 9515);\n\n  try\n    // Go to a webpage\n    Driver.Navigate.ToUrl('http://example.com');\n\n    // Find an element by its name\n    Element := Driver.FindElement(By.Name('q'));\n\n    // Type text into the element\n    Element.SendKeys('Pascal programming');\n\n    // Submit the form\n    Element.Submit;\n\n    // Wait for a few seconds\n    Sleep(3000);\n  finally\n    // Quit the browser session\n    Driver.Quit;\n  end;\nend.\n```"
  },
  {
    "task": "Use a library to implement data serialization and deserialization in your application.",
    "code": "```pascal\nprogram SerializationExample;\n\nuses\n  SysUtils, Classes, fpjson, jsonparser;\n\nfunction SerializeData(AName: string; AValue: Integer): string;\nvar\n  JSONObject: TJSONObject;\nbegin\n  JSONObject := TJSONObject.Create;\n  try\n    JSONObject.Add('name', AName);\n    JSONObject.Add('value', AValue);\n    Result := JSONObject.AsJSON;\n  finally\n    JSONObject.Free;\n  end;\nend;\n\nprocedure DeserializeData(const ASerializedData: string; out AName: string; out AValue: Integer);\nvar\n  JSONObject: TJSONObject;\nbegin\n  JSONObject := TJSONObject(GetJSON(ASerializedData));\n  try\n    AName := JSONObject.Get('name', '');\n    AValue := JSONObject.Get('value', 0);\n  finally\n    JSONObject.Free;\n  end;\nend;\n\nvar\n  SerializedData: string;\n  Name: string;\n  Value: Integer;\nbegin\n  // Serialize data\n  SerializedData := SerializeData('SampleName', 123);\n\n  // Deserialize data\n  DeserializeData(SerializedData, Name, Value);\n\n  // Output the results\n  WriteLn('Deserialized Name: ', Name);\n  WriteLn('Deserialized Value: ', Value);\nend.\n```"
  },
  {
    "task": "Build an application that generates interactive reports using a library for data visualization.",
    "code": "```pascal\nprogram InteractiveReportGenerator;\n\nuses\n  SysUtils, Graphics, Forms, Controls, Dialogs, StdCtrls, ExtCtrls, DataVizLibrary;\n\nvar\n  Form: TForm;\n  Chart: TDataVizChart;\n  Button: TButton;\n\nprocedure GenerateReport;\nbegin\n  Chart := TDataVizChart.Create(Form);\n  try\n    Chart.Parent := Form;\n    Chart.Align := alClient;\n    Chart.Title := 'Interactive Report';\n    Chart.AddSeries('Sales', [100, 200, 150, 300, 250]);\n    Chart.AddSeries('Expenses', [80, 180, 120, 280, 200]);\n  except\n    on E: Exception do\n      ShowMessage('Error generating report: ' + E.Message);\n  end;\nend;\n\nprocedure OnButtonClick(Sender: TObject);\nbegin\n  GenerateReport;\nend;\n\nbegin\n  Application.Initialize;\n  Form := TForm.Create(nil);\n  try\n    Form.Width := 800;\n    Form.Height := 600;\n    Form.Caption := 'Interactive Report Generator';\n\n    Button := TButton.Create(Form);\n    Button.Parent := Form;\n    Button.Caption := 'Generate Report';\n    Button.Top := 10;\n    Button.Left := 10;\n    Button.OnClick := @OnButtonClick;\n\n    Application.Run;\n  finally\n    Form.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Create a system that backs up and restores data using a library for file system operations.",
    "code": "```pascal\nprogram BackupRestoreSystem;\n\nuses\n  SysUtils, Classes;\n\nprocedure BackupFile(const SourceFileName, BackupFileName: string);\nvar\n  SourceFile, BackupFile: TFileStream;\nbegin\n  SourceFile := TFileStream.Create(SourceFileName, fmOpenRead);\n  try\n    BackupFile := TFileStream.Create(BackupFileName, fmCreate);\n    try\n      BackupFile.CopyFrom(SourceFile, SourceFile.Size);\n    finally\n      BackupFile.Free;\n    end;\n  finally\n    SourceFile.Free;\n  end;\nend;\n\nprocedure RestoreFile(const BackupFileName, RestoreFileName: string);\nvar\n  BackupFile, RestoreFile: TFileStream;\nbegin\n  BackupFile := TFileStream.Create(BackupFileName, fmOpenRead);\n  try\n    RestoreFile := TFileStream.Create(RestoreFileName, fmCreate);\n    try\n      RestoreFile.CopyFrom(BackupFile, BackupFile.Size);\n    finally\n      RestoreFile.Free;\n    end;\n  finally\n    BackupFile.Free;\n  end;\nend;\n\nvar\n  Source, Backup, Restore: string;\nbegin\n  Source := 'data.txt';\n  Backup := 'backup.txt';\n  Restore := 'restored_data.txt';\n\n  BackupFile(Source, Backup);\n  RestoreFile(Backup, Restore);\nend.\n```"
  },
  {
    "task": "Develop a feature that performs real-time language translation using a translation library.",
    "code": "```pascal\nprogram RealTimeTranslation;\n\nuses\n  SysUtils, Dialogs, HTTPNetClient; // Assume HTTPNetClient is a fictional library for HTTP requests\n\nfunction TranslateText(const SourceLang, TargetLang, Text: string): string;\nvar\n  Client: THTTPClient;\n  Response: IHTTPResponse;\n  URL: string;\nbegin\n  URL := Format('https://api.translation.service/translate?source=%s&target=%s&text=%s',\n                [SourceLang, TargetLang, TNetEncoding.URL.Encode(Text)]);\n  Client := THTTPClient.Create;\n  try\n    Response := Client.Get(URL);\n    if Response.StatusCode = 200 then\n      Result := Response.ContentAsString\n    else\n      Result := 'Error: ' + Response.StatusText;\n  finally\n    Client.Free;\n  end;\nend;\n\nvar\n  SourceLang, TargetLang, Text, TranslatedText: string;\nbegin\n  SourceLang := 'en'; // Example: English\n  TargetLang := 'es'; // Example: Spanish\n  Text := 'Hello, how are you?'; // Example text\n\n  TranslatedText := TranslateText(SourceLang, TargetLang, Text);\n\n  ShowMessage('Translated Text: ' + TranslatedText);\nend.\n```"
  },
  {
    "task": "Implement a program that tracks stock market prices using a library for financial data retrieval.",
    "code": "```pascal\nprogram StockMarketTracker;\n\nuses\n  SysUtils, FinancialDataLibrary;  { Assume FinancialDataLibrary is a fictitious library for financial data retrieval }\n\nvar\n  StockSymbol: string;\n  CurrentPrice: Real;\n\nbegin\n  Write('Enter the stock symbol: ');\n  ReadLn(StockSymbol);\n\n  { Initialize the library }\n  if not InitializeFinancialDataLibrary then\n  begin\n    WriteLn('Failed to initialize the financial data library.');\n    Exit;\n  end;\n  \n  { Retrieve the current price of the stock }\n  CurrentPrice := GetStockPrice(StockSymbol);\n\n  if CurrentPrice < 0 then\n    WriteLn('Error retrieving stock price for ', StockSymbol)\n  else\n    WriteLn('The current price of ', StockSymbol, ' is: ', CurrentPrice:0:2);\n\n  { Finalize the library }\n  FinalizeFinancialDataLibrary;\nend.\n```"
  },
  {
    "task": "Write a script that generates and validates JSON Web Tokens using a library for JWT handling.",
    "code": "```pascal\nprogram JWTExample;\n\nuses\n  SysUtils, fpjson, jsonparser, jwt;\n\nvar\n  Token: string;\n  Payload: TJSONObject;\n  Secret: string;\n  JWT: TJWT;\n  IsValid: Boolean;\n\nbegin\n  // Define the secret key\n  Secret := 'your-256-bit-secret';\n\n  // Create a payload\n  Payload := TJSONObject.Create;\n  try\n    Payload.Add('sub', '1234567890');\n    Payload.Add('name', 'John Doe');\n    Payload.Add('admin', True);\n\n    // Create and sign the JWT\n    JWT := TJWT.Create(Secret);\n    try\n      Token := JWT.Sign(Payload);\n      WriteLn('Generated Token: ', Token);\n\n      // Validate the JWT\n      IsValid := JWT.Verify(Token);\n      WriteLn('Is the Token valid? ', IsValid);\n\n    finally\n      JWT.Free;\n    end;\n\n  finally\n    Payload.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Use a library to build a feature that synchronizes data across multiple devices.",
    "code": "```pascal\nprogram DataSync;\n\nuses\n  SysUtils, Classes, SyncLib;  // Assuming 'SyncLib' is a theoretical library for synchronization\n\nvar\n  syncManager: TSyncManager;\n  data: TStringList;\n\nprocedure InitializeSync;\nbegin\n  syncManager := TSyncManager.Create;\n  syncManager.SetupDevice('DeviceID1');\n  syncManager.SetupDevice('DeviceID2');\nend;\n\nprocedure SyncDataAcrossDevices;\nbegin\n  data := TStringList.Create;\n  try\n    // Load or modify data here\n    data.Add('Sample data to synchronize');\n    \n    // Synchronize data\n    syncManager.SyncData(data);\n  finally\n    data.Free;\n  end;\nend;\n\nbegin\n  InitializeSync;\n  SyncDataAcrossDevices;\n  syncManager.Free;\nend.\n```"
  },
  {
    "task": "Build a program that implements pattern recognition using a library for machine learning.",
    "code": "```pascal\nprogram PatternRecognition;\n\nuses\n  SysUtils, Math, MLPackage;  { Assume MLPackage is a theoretical machine learning library }\n\nvar\n  model: TMLModel;\n  inputData: TDataSet;\n  result: TMLResult;\n\nbegin\n  { Initialize the machine learning model }\n  model := TMLModel.Create;\n  try\n    { Load or prepare your dataset }\n    inputData := LoadData('dataset.csv');\n\n    { Train the model with the dataset }\n    model.Train(inputData);\n\n    { Use the model to recognize patterns }\n    result := model.RecognizePatterns(inputData);\n\n    { Output the result }\n    WriteLn('Pattern recognition result: ', result.ToString);\n  finally\n    model.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Create an email client that uses a library for IMAP and POP3 communication.",
    "code": "```pascal\nprogram EmailClient;\n\nuses\n  SysUtils, Classes, IMAPLib, POP3Lib;\n\nvar\n  IMAPClient: TIMAPClient;\n  POP3Client: TPOP3Client;\n  Messages: TStringList;\n  Msg: string;\nbegin\n  // Initialize the IMAP client\n  IMAPClient := TIMAPClient.Create;\n  try\n    IMAPClient.Host := 'imap.example.com';\n    IMAPClient.Username := 'user@example.com';\n    IMAPClient.Password := 'password';\n    IMAPClient.Connect;\n    Messages := IMAPClient.FetchMessages;\n    for Msg in Messages do\n      WriteLn(Msg);\n  finally\n    IMAPClient.Free;\n  end;\n\n  // Initialize the POP3 client\n  POP3Client := TPOP3Client.Create;\n  try\n    POP3Client.Host := 'pop3.example.com';\n    POP3Client.Username := 'user@example.com';\n    POP3Client.Password := 'password';\n    POP3Client.Connect;\n    Messages := POP3Client.FetchMessages;\n    for Msg in Messages do\n      WriteLn(Msg);\n  finally\n    POP3Client.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Develop a feature that analyzes network traffic using a library for network monitoring.",
    "code": "```pascal\nprogram NetworkTrafficAnalyzer;\n\nuses\n  SysUtils, Classes, NetworkMonitorLib;\n\nvar\n  NetworkMonitor: TNetworkMonitor;\n  TrafficData: TStringList;\n  PacketInfo: TPacketInfo;\n\nbegin\n  NetworkMonitor := TNetworkMonitor.Create;\n  TrafficData := TStringList.Create;\n  try\n    NetworkMonitor.StartMonitoring;\n\n    while NetworkMonitor.IsMonitoring do\n    begin\n      PacketInfo := NetworkMonitor.GetNextPacket;\n      if PacketInfo <> nil then\n      begin\n        TrafficData.Add(Format('Source: %s, Destination: %s, Protocol: %s, Size: %d',\n          [PacketInfo.SourceIP, PacketInfo.DestinationIP, PacketInfo.Protocol, PacketInfo.Size]));\n      end;\n    end;\n\n    TrafficData.SaveToFile('TrafficAnalysis.txt');\n  finally\n    NetworkMonitor.StopMonitoring;\n    TrafficData.Free;\n    NetworkMonitor.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Implement a program that manages user authentication and authorization using a security library.",
    "code": "```pascal\nprogram UserAuth;\n\nuses\n  SysUtils, SecurityLib;\n\nvar\n  username, password: string;\n  isAuthenticated, isAuthorized: Boolean;\n\nbegin\n  Write('Enter username: ');\n  ReadLn(username);\n  \n  Write('Enter password: ');\n  ReadLn(password);\n  \n  isAuthenticated := AuthenticateUser(username, password);\n  \n  if isAuthenticated then\n  begin\n    isAuthorized := AuthorizeUser(username);\n    \n    if isAuthorized then\n      WriteLn('User is authenticated and authorized.')\n    else\n      WriteLn('User is authenticated but not authorized.');\n  end\n  else\n    WriteLn('Authentication failed.');\nend.\n```"
  },
  {
    "task": "Write a script that generates word clouds from text data using a library for text visualization.",
    "code": "```pascal\nprogram WordCloudGenerator;\n\nuses\n  SysUtils, Classes, WordCloud;\n\nvar\n  InputText: TStringList;\n  WordCloud: TWordCloud;\nbegin\n  InputText := TStringList.Create;\n  try\n    // Load text data\n    InputText.LoadFromFile('input.txt');\n    \n    // Create and configure the WordCloud object\n    WordCloud := TWordCloud.Create;\n    try\n      WordCloud.AddWords(InputText.Text);\n      \n      // Customize word cloud appearance if needed\n      WordCloud.SetOutputSize(800, 600);\n      \n      // Generate and save the word cloud\n      WordCloud.Generate;\n      WordCloud.SaveToFile('wordcloud.png');\n    finally\n      WordCloud.Free;\n    end;\n  finally\n    InputText.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Use a library to create a feature that schedules and sends automated emails.",
    "code": "```pascal\nprogram EmailScheduler;\n\nuses\n  SysUtils, Classes, DateUtils, SMTP;\n\nprocedure SendEmail(const Recipient, Subject, Body: string);\nvar\n  Mail: TSMTPSend;\nbegin\n  Mail := TSMTPSend.Create;\n  try\n    Mail.Username := 'your_email@example.com';\n    Mail.Password := 'your_password';\n    Mail.Host := 'smtp.example.com';\n    Mail.Port := '587';\n    Mail.FromName := 'Your Name';\n    Mail.FromAddress := 'your_email@example.com';\n    Mail.Subject := Subject;\n    Mail.AddTo(Recipient);\n    Mail.AddData(Body);\n    if Mail.Send then\n      Writeln('Email sent successfully')\n    else\n      Writeln('Failed to send email');\n  finally\n    Mail.Free;\n  end;\nend;\n\nprocedure ScheduleEmail;\nvar\n  ScheduleTime: TDateTime;\nbegin\n  ScheduleTime := Now + EncodeTime(0, 1, 0, 0); // Schedule for 1 minute later\n  while Now < ScheduleTime do;\n  SendEmail('recipient@example.com', 'Scheduled Email', 'This is an automated email.');\nend;\n\nbegin\n  ScheduleEmail;\nend.\n```"
  },
  {
    "task": "Build a mobile application that accesses device sensors using a library for hardware interaction.",
    "code": "```pascal\nprogram SensorApp;\n\nuses\n  SysUtils,\n  SensorLibrary;  // Hypothetical library for sensor access\n\nvar\n  sensorData: Double;\n\nbegin\n  try\n    // Initialize the sensor library\n    InitSensorLibrary;\n\n    // Access a specific sensor, e.g., accelerometer\n    sensorData := GetSensorData('Accelerometer');\n\n    // Output the sensor data\n    WriteLn('Accelerometer Sensor Data: ', sensorData:0:2);\n\n  except\n    on E: Exception do\n      WriteLn('An error occurred: ', E.Message);\n  end;\nend.\n```"
  },
  {
    "task": "Create a system that audits and logs file system changes using a library for filesystem monitoring.",
    "code": "```pascal\nprogram FileSystemAudit;\n\nuses\n  SysUtils,\n  Classes,\n  FileCtrl,\n  Windows,\n  JvChangeNotify;\n\nvar\n  ChangeNotify: TJvChangeNotify;\n  LogFile: TextFile;\n\nprocedure LogChange(Sender: TObject);\nvar\n  I: Integer;\n  ChangeRec: TJvChangeItem;\nbegin\n  AssignFile(LogFile, 'FileSystemLog.txt');\n  if FileExists('FileSystemLog.txt') then\n    Append(LogFile)\n  else\n    Rewrite(LogFile);\n\n  for I := 0 to ChangeNotify.Notifications.Count - 1 do\n  begin\n    ChangeRec := ChangeNotify.Notifications.Items[I];\n    Writeln(LogFile, Format('Change detected: %s in %s', [ChangeRec.ActionAsString, ChangeRec.FileName]));\n  end;\n\n  CloseFile(LogFile);\nend;\n\nbegin\n  ChangeNotify := TJvChangeNotify.Create(nil);\n  try\n    ChangeNotify.Directory := 'C:\\PathToMonitor';\n    ChangeNotify.NotifyOptions := [noFileNameChange, noDirNameChange, noLastWrite];\n    ChangeNotify.OnChange := LogChange;\n    ChangeNotify.Active := True;\n    WriteLn('Monitoring started. Press Enter to stop.');\n    ReadLn;\n  finally\n    ChangeNotify.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Develop a feature that visualizes geospatial data using a library for geographic information systems.",
    "code": "```pascal\nprogram GeospatialVisualization;\n\nuses\n  SysUtils, Classes, Graphics, Forms, Controls, Dialogs,\n  ExtCtrls, GISLibrary; // Assuming GISLibrary is a placeholder for an actual GIS library\n\ntype\n  TForm1 = class(TForm)\n    Panel1: TPanel;\n    procedure FormCreate(Sender: TObject);\n  private\n    { Private declarations }\n    GISMap: TGISMap; // Assuming TGISMap is a class provided by the GIS library\n  public\n    { Public declarations }\n  end;\n\nvar\n  Form1: TForm1;\n\nimplementation\n\n{$R *.dfm}\n\nprocedure TForm1.FormCreate(Sender: TObject);\nbegin\n  GISMap := TGISMap.Create(Panel1);\n  GISMap.Align := alClient;\n  GISMap.LoadData('geospatial_data_file'); // Load geospatial data\n  GISMap.Render; // Render the map visualization\nend;\n\nbegin\n  Application.Initialize;\n  Application.CreateForm(TForm1, Form1);\n  Application.Run;\nend.\n```"
  },
  {
    "task": "Implement a program that performs clustering analysis using a library for statistical computing.",
    "code": "```pascal\nprogram ClusteringAnalysis;\n\nuses\n  SysUtils, Math, uPSI_StatLib;  // Assuming uPSI_StatLib is a library for statistical computing\n\nvar\n  Data: array of array of Double;\n  Clusters: array of Integer;\n  i, j, NumDataPoints, NumFeatures, NumClusters: Integer;\n\nbegin\n  // Example data initialization (you should replace this with actual data input)\n  NumDataPoints := 10;\n  NumFeatures := 2;\n  NumClusters := 3;\n  SetLength(Data, NumDataPoints, NumFeatures);\n  SetLength(Clusters, NumDataPoints);\n  \n  // Fill Data with hypothetical values\n  for i := 0 to NumDataPoints - 1 do\n    for j := 0 to NumFeatures - 1 do\n      Data[i, j] := Random;\n\n  // Perform clustering analysis using the library function\n  StatLib_ClusterAnalysis(Data, NumDataPoints, NumFeatures, NumClusters, Clusters);\n\n  // Output the clustering result\n  for i := 0 to NumDataPoints - 1 do\n    WriteLn('Data point ', i, ' is in cluster ', Clusters[i]);\nend.\n```"
  },
  {
    "task": "Write a script that monitors and analyzes CPU and memory usage using a library for system diagnostics.",
    "code": "```pascal\nprogram MonitorSystemUsage;\n\nuses\n  SysUtils, Classes, Diagnostics;\n\nvar\n  CPUUsage, MemoryUsage: Double;\n  DI: TDiagnosticsInformation;\n\nbegin\n  DI := TDiagnosticsInformation.Create;\n  try\n    while True do\n    begin\n      CPUUsage := DI.CPUUsage;\n      MemoryUsage := DI.MemoryUsage;\n      \n      WriteLn('CPU Usage: ', CPUUsage:0:2, '%');\n      WriteLn('Memory Usage: ', MemoryUsage:0:2, ' MB');\n      \n      Sleep(1000); // Wait for 1 second\n    end;\n  finally\n    DI.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Use a library to implement a feature that provides voice commands in your application.",
    "code": "```pascal\nprogram VoiceCommandApp;\n\nuses\n  SysUtils, SpeechRecognitionLibrary;\n\nprocedure OnVoiceCommandRecognized(command: string);\nbegin\n  Writeln('Voice Command Recognized: ', command);\n  // Process the command here\nend;\n\nvar\n  recognizer: TSpeechRecognizer;\n\nbegin\n  recognizer := TSpeechRecognizer.Create;\n  try\n    recognizer.OnCommandRecognized := @OnVoiceCommandRecognized;\n    recognizer.StartListening;\n    Writeln('Listening for voice commands...');\n    Readln; // Keep the application running\n  finally\n    recognizer.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Build a tool that converts video files to different resolutions using a video processing library.",
    "code": "```pascal\nprogram VideoConverter;\n\nuses\n  SysUtils, Classes, FFmpeg;\n\nprocedure ConvertVideoResolution(const InputFile, OutputFile: string; const Width, Height: Integer);\nvar\n  FFmpegProcess: TProcess;\nbegin\n  FFmpegProcess := TProcess.Create(nil);\n  try\n    FFmpegProcess.Executable := 'ffmpeg';\n    FFmpegProcess.Parameters.Add('-i');\n    FFmpegProcess.Parameters.Add(InputFile);\n    FFmpegProcess.Parameters.Add('-vf');\n    FFmpegProcess.Parameters.Add(Format('scale=%d:%d', [Width, Height]));\n    FFmpegProcess.Parameters.Add(OutputFile);\n    FFmpegProcess.Options := FFmpegProcess.Options + [poWaitOnExit];\n    FFmpegProcess.Execute;\n  finally\n    FFmpegProcess.Free;\n  end;\nend;\n\nvar\n  InputFile, OutputFile: string;\n  Width, Height: Integer;\nbegin\n  WriteLn('Enter the input video file:');\n  ReadLn(InputFile);\n  WriteLn('Enter the output video file:');\n  ReadLn(OutputFile);\n  WriteLn('Enter the desired width:');\n  ReadLn(Width);\n  WriteLn('Enter the desired height:');\n  ReadLn(Height);\n  ConvertVideoResolution(InputFile, OutputFile, Width, Height);\n  WriteLn('Video conversion complete.');\nend.\n```"
  },
  {
    "task": "Create a program that detects and classifies objects in images using a library for image recognition.",
    "code": "```pascal\nprogram ObjectDetection;\n\nuses\n  SysUtils,\n  Classes,\n  ImageRecognitionLibrary;  { Hypothetical library for image recognition }\n\nvar\n  ImagePath: string;\n  Recognizer: TImageRecognizer;\n  Objects: TObjectList;\n  I: Integer;\n  DetectedObject: TObject;\n\nbegin\n  ImagePath := 'input.jpg';  { Path to the image file }\n  Recognizer := TImageRecognizer.Create;\n  try\n    Objects := Recognizer.DetectAndClassify(ImagePath);\n    try\n      for I := 0 to Objects.Count - 1 do\n      begin\n        DetectedObject := Objects[I];\n        Writeln('Detected Object: ', DetectedObject.ClassName);\n      end;\n    finally\n      Objects.Free;\n    end;\n  finally\n    Recognizer.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Develop a feature that generates synthetic test data using a data generation library.",
    "code": "```pascal\nprogram SyntheticDataGeneration;\n\nuses\n  SysUtils,\n  Math;\n\ntype\n  TDataGenerator = class\n  private\n    FSeed: Integer;\n  public\n    constructor Create(seed: Integer);\n    function GenerateRandomNumber(min, max: Integer): Integer;\n    function GenerateRandomString(length: Integer): string;\n  end;\n\nconstructor TDataGenerator.Create(seed: Integer);\nbegin\n  FSeed := seed;\n  RandSeed := FSeed;\nend;\n\nfunction TDataGenerator.GenerateRandomNumber(min, max: Integer): Integer;\nbegin\n  Result := RandomRange(min, max + 1);\nend;\n\nfunction TDataGenerator.GenerateRandomString(length: Integer): string;\nconst\n  Characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\nvar\n  i: Integer;\nbegin\n  Result := '';\n  for i := 1 to length do\n    Result := Result + Characters[RandomRange(1, Length(Characters) + 1)];\nend;\n\nvar\n  DataGen: TDataGenerator;\nbegin\n  DataGen := TDataGenerator.Create(42);\n  WriteLn('Random Number: ', DataGen.GenerateRandomNumber(1, 100));\n  WriteLn('Random String: ', DataGen.GenerateRandomString(10));\n  DataGen.Free;\nend.\n```"
  },
  {
    "task": "Implement a script that interacts with IoT devices using a library for IoT communication.",
    "code": "```pascal\nprogram IoTDeviceInteraction;\n\nuses\n  SysUtils, IoTLibrary; { Assuming IoTLibrary is a library for IoT communication }\n\nprocedure ConnectAndInteractWithDevice(DeviceID: String);\nvar\n  IoTDevice: TIoTDevice;\nbegin\n  IoTDevice := TIoTDevice.Create(DeviceID);\n  try\n    if IoTDevice.Connect then\n    begin\n      WriteLn('Connected to device: ', DeviceID);\n      IoTDevice.SendCommand('TURN_ON');\n      WriteLn('Command sent: TURN_ON');\n      IoTDevice.Disconnect;\n      WriteLn('Disconnected from device: ', DeviceID);\n    end\n    else\n      WriteLn('Failed to connect to device: ', DeviceID);\n  finally\n    IoTDevice.Free;\n  end;\nend;\n\nbegin\n  ConnectAndInteractWithDevice('Device123');\nend.\n```"
  },
  {
    "task": "Write a program that compresses and decompresses data using a data compression library.",
    "code": "```pascal\nprogram CompressionExample;\n\nuses\n  SysUtils, ZLib;\n\nprocedure CompressData(const InData: TBytes; out OutData: TBytes);\nvar\n  InStream, OutStream: TMemoryStream;\n  ZStream: TCompressionStream;\nbegin\n  InStream := TMemoryStream.Create;\n  OutStream := TMemoryStream.Create;\n  try\n    InStream.WriteBuffer(Pointer(InData)^, Length(InData));\n    InStream.Position := 0;\n    ZStream := TCompressionStream.Create(clDefault, OutStream);\n    try\n      ZStream.CopyFrom(InStream, InStream.Size);\n    finally\n      ZStream.Free;\n    end;\n    SetLength(OutData, OutStream.Size);\n    OutStream.Position := 0;\n    OutStream.ReadBuffer(Pointer(OutData)^, OutStream.Size);\n  finally\n    InStream.Free;\n    OutStream.Free;\n  end;\nend;\n\nprocedure DecompressData(const InData: TBytes; out OutData: TBytes);\nvar\n  InStream, OutStream: TMemoryStream;\n  ZStream: TDecompressionStream;\nbegin\n  InStream := TMemoryStream.Create;\n  OutStream := TMemoryStream.Create;\n  try\n    InStream.WriteBuffer(Pointer(InData)^, Length(InData));\n    InStream.Position := 0;\n    ZStream := TDecompressionStream.Create(InStream);\n    try\n      OutStream.CopyFrom(ZStream, ZStream.Size);\n    finally\n      ZStream.Free;\n    end;\n    SetLength(OutData, OutStream.Size);\n    OutStream.Position := 0;\n    OutStream.ReadBuffer(Pointer(OutData)^, OutStream.Size);\n  finally\n    InStream.Free;\n    OutStream.Free;\n  end;\nend;\n\nvar\n  OriginalData, CompressedData, DecompressedData: TBytes;\nbegin\n  OriginalData := TEncoding.UTF8.GetBytes('Example data to compress and decompress.');\n  CompressData(OriginalData, CompressedData);\n  DecompressData(CompressedData, DecompressedData);\n  WriteLn('Original: ', TEncoding.UTF8.GetString(OriginalData));\n  WriteLn('Decompressed: ', TEncoding.UTF8.GetString(DecompressedData));\nend.\n```"
  },
  {
    "task": "Use a library to implement a feature that generates dynamic web content from templates.",
    "code": "```pascal\nprogram DynamicWebContent;\n\nuses\n  SysUtils, fpTemplate;\n\nprocedure GenerateContent;\nvar\n  Template: TFPTemplate;\n  Content: string;\nbegin\n  Template := TFPTemplate.Create;\n  try\n    Template.LoadFromFile('template.html');\n    Template.SetVariable('title', 'Dynamic Page');\n    Template.SetVariable('content', 'This is dynamic content generated from a template.');\n    Content := Template.GetContent;\n    WriteLn(Content);\n  finally\n    Template.Free;\n  end;\nend;\n\nbegin\n  GenerateContent;\nend.\n```"
  },
  {
    "task": "Build an application that integrates with social media platforms using a library for API communication.",
    "code": "```pascal\nprogram SocialMediaIntegration;\n\nuses\n  SysUtils,\n  fphttpclient,  // FPC package for HTTP requests\n  fpjson,\n  jsonparser;\n\nconst\n  API_ENDPOINT = 'https://api.socialmedia.com/v1/posts';\n  ACCESS_TOKEN = 'your_access_token_here';\n\nvar\n  HttpClient: TFPHTTPClient;\n  Response: String;\n  JsonData: TJSONData;\n\nbegin\n  HttpClient := TFPHTTPClient.Create(nil);\n  try\n    HttpClient.AddHeader('Authorization', 'Bearer ' + ACCESS_TOKEN);\n    Response := HttpClient.Get(API_ENDPOINT);\n\n    JsonData := GetJSON(Response);\n    writeln('Response from API: ', JsonData.FormatJSON);\n    JsonData.Free;\n  finally\n    HttpClient.Free;\n  end;\nend.\n```"
  }
]