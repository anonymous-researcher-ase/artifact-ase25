[
  {
    "task": "Write a function that takes two numbers and returns their sum.",
    "code": "```pascal\nprogram SumFunction;\n\nfunction AddNumbers(a, b: Integer): Integer;\nbegin\n  AddNumbers := a + b;\nend;\n\nvar\n  num1, num2, result: Integer;\nbegin\n  num1 := 5;\n  num2 := 10;\n  result := AddNumbers(num1, num2);\n  WriteLn('The sum is: ', result);\nend.\n```"
  },
  {
    "task": "Create a program that calculates the difference between two given integers.",
    "code": "```pascal\nprogram DifferenceCalculator;\nvar\n  num1, num2, difference: Integer;\nbegin\n  Write('Enter first integer: ');\n  ReadLn(num1);\n  Write('Enter second integer: ');\n  ReadLn(num2);\n  difference := num1 - num2;\n  WriteLn('The difference is: ', difference);\nend.\n```"
  },
  {
    "task": "Design a function to multiply two floating-point numbers and return the result.",
    "code": "```pascal\nfunction Multiply(a, b: Real): Real;\nbegin\n  Multiply := a * b;\nend;\n```"
  },
  {
    "task": "Implement a function that divides two numbers and handles division by zero exceptions.",
    "code": "```pascal\nprogram DivisionHandling;\n\nfunction SafeDivide(num1, num2: Real): Real;\nbegin\n  if num2 = 0 then\n  begin\n    writeln('Error: Division by zero');\n    SafeDivide := 0; // Return a default value or raise an exception\n  end\n  else\n    SafeDivide := num1 / num2;\nend;\n\nvar\n  a, b, result: Real;\n\nbegin\n  a := 10.0;\n  b := 2.0;\n  result := SafeDivide(a, b);\n  writeln('Result: ', result:0:2);\n\n  b := 0.0;\n  result := SafeDivide(a, b);\nend.\n```"
  },
  {
    "task": "Build a calculator that can perform addition, subtraction, multiplication, and division on user-provided inputs.",
    "code": "```pascal\nprogram Calculator;\n\nvar\n  num1, num2, result: Real;\n  operation: Char;\n\nbegin\n  Write('Enter first number: ');\n  ReadLn(num1);\n  Write('Enter an operation (+, -, *, /): ');\n  ReadLn(operation);\n  Write('Enter second number: ');\n  ReadLn(num2);\n  \n  case operation of\n    '+': result := num1 + num2;\n    '-': result := num1 - num2;\n    '*': result := num1 * num2;\n    '/': \n      if num2 <> 0 then\n        result := num1 / num2\n      else\n      begin\n        WriteLn('Error: Division by zero');\n        Exit;\n      end;\n  else\n    begin\n      WriteLn('Error: Invalid operation');\n      Exit;\n    end;\n  end;\n  \n  WriteLn('Result: ', result:0:2);\nend.\n```"
  },
  {
    "task": "Write a script to compute the average of a list of numbers using arithmetic operations.",
    "code": "```pascal\nprogram AverageCalculator;\nvar\n  numbers: array[1..5] of Real;\n  sum, average: Real;\n  i, count: Integer;\nbegin\n  numbers[1] := 10.0;\n  numbers[2] := 20.0;\n  numbers[3] := 30.0;\n  numbers[4] := 40.0;\n  numbers[5] := 50.0;\n  count := 5;\n  sum := 0.0;\n\n  for i := 1 to count do\n    sum := sum + numbers[i];\n\n  average := sum / count;\n\n  WriteLn('The average is: ', average:0:2);\nend.\n```"
  },
  {
    "task": "Create a function that returns the remainder of the division of two integers.",
    "code": "```pascal\nprogram RemainderFunction;\n\nfunction Remainder(a, b: Integer): Integer;\nbegin\n  Remainder := a mod b;\nend;\n\nvar\n  x, y, result: Integer;\n\nbegin\n  x := 10;\n  y := 3;\n  result := Remainder(x, y);\n  WriteLn('Remainder of ', x, ' divided by ', y, ' is: ', result);\nend.\n```"
  },
  {
    "task": "Develop a function that can add a variable number of arguments and return the total.",
    "code": "```pascal\nprogram VariableAddition;\n\nuses\n  SysUtils;\n\nfunction SumNumbers(args: array of Double): Double;\nvar\n  i: Integer;\n  total: Double;\nbegin\n  total := 0.0;\n  for i := Low(args) to High(args) do\n    total := total + args[i];\n  Result := total;\nend;\n\nvar\n  total: Double;\nbegin\n  total := SumNumbers([1.5, 2.5, 3.0, 4.5]);\n  WriteLn('Total: ', total:0:2);\nend.\n```"
  },
  {
    "task": "Write a program that subtracts a series of numbers from an initial value.",
    "code": "```pascal\nprogram SubtractSeries;\n\nvar\n  initialValue, number: Integer;\n  count, i: Integer;\n\nbegin\n  Write('Enter initial value: ');\n  ReadLn(initialValue);\n  \n  Write('Enter the count of numbers to subtract: ');\n  ReadLn(count);\n\n  for i := 1 to count do\n  begin\n    Write('Enter number ', i, ': ');\n    ReadLn(number);\n    initialValue := initialValue - number;\n  end;\n\n  WriteLn('Result after subtraction: ', initialValue);\nend.\n```"
  },
  {
    "task": "Implement a function that multiplies all elements in an array and returns the product.",
    "code": "```pascal\nprogram ArrayProduct;\n\nfunction MultiplyArrayElements(arr: array of Integer): Integer;\nvar\n  i, product: Integer;\nbegin\n  product := 1;\n  for i := Low(arr) to High(arr) do\n    product := product * arr[i];\n  MultiplyArrayElements := product;\nend;\n\nvar\n  myArray: array[1..5] of Integer = (2, 3, 4, 5, 6);\n  result: Integer;\n\nbegin\n  result := MultiplyArrayElements(myArray);\n  WriteLn('The product of the array elements is: ', result);\nend.\n```"
  },
  {
    "task": "Design a program that divides a number by another and rounds the result to two decimal places.",
    "code": "```pascal\nprogram DivideAndRound;\n\nvar\n  num1, num2, result: real;\n\nbegin\n  writeln('Enter the first number:');\n  readln(num1);\n  writeln('Enter the second number:');\n  readln(num2);\n  \n  if num2 <> 0 then\n  begin\n    result := num1 / num2;\n    writeln('Result: ', result:0:2);\n  end\n  else\n    writeln('Error: Division by zero is not allowed.');\nend.\n```"
  },
  {
    "task": "Create a function that performs arithmetic operations on complex numbers.",
    "code": "```pascal\nprogram ComplexArithmetic;\n\ntype\n  Complex = record\n    real: Real;\n    imag: Real;\n  end;\n\nfunction AddComplex(c1, c2: Complex): Complex;\nbegin\n  AddComplex.real := c1.real + c2.real;\n  AddComplex.imag := c1.imag + c2.imag;\nend;\n\nfunction SubtractComplex(c1, c2: Complex): Complex;\nbegin\n  SubtractComplex.real := c1.real - c2.real;\n  SubtractComplex.imag := c1.imag - c2.imag;\nend;\n\nfunction MultiplyComplex(c1, c2: Complex): Complex;\nbegin\n  MultiplyComplex.real := c1.real * c2.real - c1.imag * c2.imag;\n  MultiplyComplex.imag := c1.real * c2.imag + c1.imag * c2.real;\nend;\n\nfunction DivideComplex(c1, c2: Complex): Complex;\nvar\n  denom: Real;\nbegin\n  denom := c2.real * c2.real + c2.imag * c2.imag;\n  DivideComplex.real := (c1.real * c2.real + c1.imag * c2.imag) / denom;\n  DivideComplex.imag := (c1.imag * c2.real - c1.real * c2.imag) / denom;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Write a function to calculate the area of a rectangle given its length and width using multiplication.",
    "code": "```pascal\nprogram RectangleArea;\n\nfunction CalculateArea(length, width: Real): Real;\nbegin\n    CalculateArea := length * width;\nend;\n\nvar\n    length, width, area: Real;\nbegin\n    length := 5.0;  { Example length }\n    width := 3.0;   { Example width }\n    area := CalculateArea(length, width);\n    writeln('Area of the rectangle is: ', area:0:2);\nend.\n```"
  },
  {
    "task": "Build a program that converts a price in dollars to another currency using multiplication with exchange rates.",
    "code": "```pascal\nprogram CurrencyConverter;\n\nvar\n  dollars, exchangeRate, convertedAmount: Real;\n\nbegin\n  Write('Enter the amount in dollars: ');\n  ReadLn(dollars);\n  \n  Write('Enter the exchange rate: ');\n  ReadLn(exchangeRate);\n  \n  convertedAmount := dollars * exchangeRate;\n  \n  WriteLn('The converted amount is: ', convertedAmount:0:2);\nend.\n```"
  },
  {
    "task": "Implement a function that checks if a number is divisible by another and returns a boolean.",
    "code": "```pascal\nprogram DivisibilityCheck;\n\nfunction IsDivisible(a, b: Integer): Boolean;\nbegin\n    if b = 0 then\n        IsDivisible := False\n    else\n        IsDivisible := (a mod b = 0);\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Write a script to sum the digits of an integer using arithmetic operations.",
    "code": "```pascal\nprogram SumOfDigits;\n\nvar\n  num, sum, digit: Integer;\n\nbegin\n  writeln('Enter an integer: ');\n  readln(num);\n\n  sum := 0;\n  while num <> 0 do\n  begin\n    digit := num mod 10;\n    sum := sum + digit;\n    num := num div 10;\n  end;\n\n  writeln('Sum of the digits: ', sum);\nend.\n```"
  },
  {
    "task": "Develop a function that applies a discount percentage to a price using subtraction and multiplication.",
    "code": "```pascal\nprogram DiscountCalculator;\n\nfunction ApplyDiscount(price: Real; discountPercent: Real): Real;\nbegin\n  ApplyDiscount := price - (price * discountPercent / 100);\nend;\n\nvar\n  originalPrice, discountPercent, finalPrice: Real;\nbegin\n  originalPrice := 100.0; // example value\n  discountPercent := 15.0; // example value\n  finalPrice := ApplyDiscount(originalPrice, discountPercent);\n  Writeln('Final price after discount: ', finalPrice:0:2);\nend.\n```"
  },
  {
    "task": "Create a program to calculate the yearly salary given an hourly wage and hours worked per week.",
    "code": "```pascal\nprogram YearlySalaryCalculator;\n\nvar\n  hourlyWage, hoursPerWeek, yearlySalary: Real;\n  weeksPerYear: Integer;\n\nbegin\n  weeksPerYear := 52;\n\n  Write('Enter hourly wage: ');\n  ReadLn(hourlyWage);\n\n  Write('Enter hours worked per week: ');\n  ReadLn(hoursPerWeek);\n\n  yearlySalary := hourlyWage * hoursPerWeek * weeksPerYear;\n\n  WriteLn('The yearly salary is: ', yearlySalary:0:2);\nend.\n```"
  },
  {
    "task": "Design a function that calculates the compound interest over a given period using arithmetic operations.",
    "code": "```pascal\nprogram CompoundInterestCalculator;\n\nfunction CalculateCompoundInterest(principal: Real; rate: Real; time: Integer; n: Integer): Real;\nvar\n  amount: Real;\nbegin\n  amount := principal * Power((1 + rate / n), n * time);\n  CalculateCompoundInterest := amount;\nend;\n\nvar\n  principal, rate, compoundInterest: Real;\n  time, n: Integer;\nbegin\n  principal := 1000.0;  // Example principal amount\n  rate := 0.05;         // Example interest rate (5%)\n  time := 10;           // Example time period (10 years)\n  n := 4;               // Example number of times interest is compounded per year (quarterly)\n\n  compoundInterest := CalculateCompoundInterest(principal, rate, time, n);\n  WriteLn('Compound Interest: ', compoundInterest:0:2);\nend.\n```"
  },
  {
    "task": "Write a program that scales a 2D point by a given factor using multiplication.",
    "code": "```pascal\nprogram ScalePoint;\n\nvar\n  x, y, factor: Real;\n  scaledX, scaledY: Real;\n\nbegin\n  { Initialize point coordinates and scaling factor }\n  x := 3.0;\n  y := 4.0;\n  factor := 2.5;\n\n  { Scale the point }\n  scaledX := x * factor;\n  scaledY := y * factor;\n\n  { Output the scaled point }\n  writeln('Scaled X: ', scaledX:0:2);\n  writeln('Scaled Y: ', scaledY:0:2);\nend.\n```"
  },
  {
    "task": "Implement a function that calculates the perimeter of a triangle given its side lengths.",
    "code": "```pascal\nprogram TrianglePerimeter;\n\nfunction CalculatePerimeter(a, b, c: Real): Real;\nbegin\n    CalculatePerimeter := a + b + c;\nend;\n\nvar\n    side1, side2, side3, perimeter: Real;\nbegin\n    side1 := 3.0;\n    side2 := 4.0;\n    side3 := 5.0;\n    \n    perimeter := CalculatePerimeter(side1, side2, side3);\n    \n    WriteLn('Perimeter of the triangle: ', perimeter:0:2);\nend.\n```"
  },
  {
    "task": "Create a function to determine if three sides can form a right triangle using the Pythagorean theorem.",
    "code": "```pascal\nprogram RightTriangleChecker;\n\nfunction IsRightTriangle(a, b, c: Real): Boolean;\nvar\n  x, y, z: Real;\nbegin\n  if (a <= 0) or (b <= 0) or (c <= 0) then\n  begin\n    IsRightTriangle := False;\n    Exit;\n  end;\n\n  if (a >= b) and (a >= c) then\n  begin\n    x := a;\n    y := b;\n    z := c;\n  end\n  else if (b >= a) and (b >= c) then\n  begin\n    x := b;\n    y := a;\n    z := c;\n  end\n  else\n  begin\n    x := c;\n    y := a;\n    z := b;\n  end;\n\n  IsRightTriangle := (x*x) = (y*y) + (z*z);\nend;\n\nbegin\n  { Example usage: }\n  Writeln(IsRightTriangle(3, 4, 5));  { Output: TRUE }\n  Writeln(IsRightTriangle(5, 5, 5));  { Output: FALSE }\nend.\n```"
  },
  {
    "task": "Write a script that calculates the total cost of items in a shopping cart using addition.",
    "code": "```pascal\nprogram ShoppingCart;\n\nvar\n  item1, item2, item3, totalCost: real;\n\nbegin\n  { Assign prices to items }\n  item1 := 12.99;\n  item2 := 23.50;\n  item3 := 9.75;\n\n  { Calculate total cost using addition }\n  totalCost := item1 + item2 + item3;\n\n  { Output the total cost }\n  writeln('Total cost of items in the shopping cart: $', totalCost:0:2);\nend.\n```"
  },
  {
    "task": "Develop a function that returns the quotient and remainder of a division operation.",
    "code": "```pascal\nprogram DivisionOperation;\n\nfunction DivideAndRemainder(dividend, divisor: Integer; var quotient, remainder: Integer): Boolean;\nbegin\n    if divisor = 0 then\n    begin\n        DivideAndRemainder := False;\n        Exit;\n    end;\n    quotient := dividend div divisor;\n    remainder := dividend mod divisor;\n    DivideAndRemainder := True;\nend;\n\nvar\n    dividend, divisor, quotient, remainder: Integer;\n    success: Boolean;\nbegin\n    dividend := 20;\n    divisor := 3;\n    \n    success := DivideAndRemainder(dividend, divisor, quotient, remainder);\n    \n    if success then\n    begin\n        WriteLn('Quotient: ', quotient);\n        WriteLn('Remainder: ', remainder);\n    end\n    else\n        WriteLn('Division by zero is not allowed.');\nend.\n```"
  },
  {
    "task": "Build a program that simulates a basic checkout system using arithmetic operations for totals and discounts.",
    "code": "```pascal\nprogram CheckoutSystem;\n\nvar\n  itemPrice, totalPrice, discount, finalPrice: Real;\n  itemCount, i: Integer;\n  discountRate: Real;\n\nbegin\n  totalPrice := 0.0;\n\n  Write('Enter the number of items: ');\n  ReadLn(itemCount);\n\n  for i := 1 to itemCount do\n  begin\n    Write('Enter price for item ', i, ': ');\n    ReadLn(itemPrice);\n    totalPrice := totalPrice + itemPrice;\n  end;\n\n  Write('Enter discount rate (as a percentage): ');\n  ReadLn(discountRate);\n\n  discount := totalPrice * (discountRate / 100);\n  finalPrice := totalPrice - discount;\n\n  WriteLn('Total Price: ', totalPrice:0:2);\n  WriteLn('Discount: ', discount:0:2);\n  WriteLn('Final Price after discount: ', finalPrice:0:2);\nend.\n```"
  },
  {
    "task": "Implement a function to calculate the distance between two points on a plane using subtraction and square roots.",
    "code": "```pascal\nprogram DistanceBetweenPoints;\n\nuses Math;\n\nfunction CalculateDistance(x1, y1, x2, y2: Real): Real;\nvar\n  deltaX, deltaY: Real;\nbegin\n  deltaX := x2 - x1;\n  deltaY := y2 - y1;\n  CalculateDistance := Sqrt(Sqr(deltaX) + Sqr(deltaY));\nend;\n\nbegin\n  { Example usage of the function }\n  Writeln('Distance: ', CalculateDistance(1.0, 2.0, 4.0, 6.0):0:2);\nend.\n```"
  },
  {
    "task": "Write a function that calculates the speed of a vehicle given distance and time using division.",
    "code": "```pascal\nprogram VehicleSpeed;\n\nfunction CalculateSpeed(distance, time: Real): Real;\nbegin\n  if time <> 0 then\n    CalculateSpeed := distance / time\n  else\n    CalculateSpeed := 0;\nend;\n\nvar\n  distance, time, speed: Real;\n\nbegin\n  distance := 150.0; { Example distance in kilometers }\n  time := 2.0; { Example time in hours }\n  speed := CalculateSpeed(distance, time);\n  WriteLn('The speed of the vehicle is: ', speed:0:2, ' km/h');\nend.\n```"
  },
  {
    "task": "Create a program to compute the total minutes in a given number of hours using multiplication.",
    "code": "```pascal\nprogram TotalMinutes;\n\nvar\n  hours, totalMinutes: Integer;\n\nbegin\n  Write('Enter the number of hours: ');\n  ReadLn(hours);\n  \n  totalMinutes := hours * 60;\n  \n  WriteLn('Total minutes: ', totalMinutes);\nend.\n```"
  },
  {
    "task": "Design a function that determines the number of dozens of eggs from a given total number of eggs.",
    "code": "```pascal\nprogram DozensOfEggs;\n\nfunction NumberOfDozens(totalEggs: Integer): Integer;\nbegin\n    NumberOfDozens := totalEggs div 12;\nend;\n\nvar\n    totalEggs, dozens: Integer;\nbegin\n    totalEggs := 27; { Example input }\n    dozens := NumberOfDozens(totalEggs);\n    writeln('Number of dozens: ', dozens);\nend.\n```"
  },
  {
    "task": "Write a script to find the greatest common divisor of two numbers using arithmetic operations.",
    "code": "```pascal\nprogram GCD;\n\nfunction GreatestCommonDivisor(a, b: Integer): Integer;\nbegin\n  while b <> 0 do\n  begin\n    a := a mod b;\n    a := a + b;\n    b := a - b;\n    a := a - b;\n  end;\n  GreatestCommonDivisor := a;\nend;\n\nvar\n  num1, num2, gcd: Integer;\nbegin\n  Write('Enter first number: ');\n  ReadLn(num1);\n  Write('Enter second number: ');\n  ReadLn(num2);\n  \n  gcd := GreatestCommonDivisor(num1, num2);\n  WriteLn('Greatest Common Divisor: ', gcd);\nend.\n```"
  },
  {
    "task": "Develop a program that calculates the total weight of multiple items using addition.",
    "code": "```pascal\nprogram CalculateTotalWeight;\n\nvar\n  numberOfItems, i: Integer;\n  weight, totalWeight: Real;\n\nbegin\n  totalWeight := 0.0;\n  \n  Write('Enter the number of items: ');\n  ReadLn(numberOfItems);\n  \n  for i := 1 to numberOfItems do\n  begin\n    Write('Enter the weight of item ', i, ': ');\n    ReadLn(weight);\n    totalWeight := totalWeight + weight;\n  end;\n  \n  WriteLn('The total weight of all items is: ', totalWeight:0:2);\nend.\n```"
  },
  {
    "task": "Implement a function to convert a temperature from Celsius to Fahrenheit using multiplication and addition.",
    "code": "```pascal\nprogram TemperatureConversion;\n\nfunction CelsiusToFahrenheit(celsius: Real): Real;\nbegin\n    CelsiusToFahrenheit := (celsius * 9 / 5) + 32;\nend;\n\nvar\n    celsius, fahrenheit: Real;\nbegin\n    Write('Enter temperature in Celsius: ');\n    ReadLn(celsius);\n    fahrenheit := CelsiusToFahrenheit(celsius);\n    WriteLn('Temperature in Fahrenheit: ', fahrenheit:0:2);\nend.\n```"
  },
  {
    "task": "Create a program that determines the age difference between two people given their birth years.",
    "code": "```pascal\nprogram AgeDifference;\n\nvar\n  birthYear1, birthYear2, ageDifference: Integer;\n\nbegin\n  writeln('Enter the birth year of the first person:');\n  readln(birthYear1);\n  writeln('Enter the birth year of the second person:');\n  readln(birthYear2);\n\n  ageDifference := abs(birthYear1 - birthYear2);\n\n  writeln('The age difference between the two people is ', ageDifference, ' years.');\nend.\n```"
  },
  {
    "task": "Write a function to calculate the final price after applying tax and discount using addition and subtraction.",
    "code": "```pascal\nprogram FinalPriceCalculator;\n\nfunction CalculateFinalPrice(basePrice: Real; taxRate: Real; discount: Real): Real;\nvar\n  taxAmount, discountAmount, finalPrice: Real;\nbegin\n  taxAmount := basePrice * (taxRate / 100);\n  discountAmount := basePrice * (discount / 100);\n  finalPrice := basePrice + taxAmount - discountAmount;\n  CalculateFinalPrice := finalPrice;\nend;\n\nvar\n  basePrice, taxRate, discount, finalPrice: Real;\nbegin\n  basePrice := 100.0;\n  taxRate := 10.0;\n  discount := 5.0;\n  finalPrice := CalculateFinalPrice(basePrice, taxRate, discount);\n  WriteLn('The final price is: ', finalPrice:0:2);\nend.\n```"
  },
  {
    "task": "Design a program to compute the net profit given total revenue and expenses.",
    "code": "```pascal\nprogram NetProfitCalculator;\n\nvar\n  totalRevenue, expenses, netProfit: Real;\n\nbegin\n  Write('Enter total revenue: ');\n  ReadLn(totalRevenue);\n  Write('Enter expenses: ');\n  ReadLn(expenses);\n  \n  netProfit := totalRevenue - expenses;\n  \n  WriteLn('Net Profit: ', netProfit:0:2);\nend.\n```"
  },
  {
    "task": "Develop a function to calculate the BMI given weight and height using division and multiplication.",
    "code": "```pascal\nprogram CalculateBMI;\n\nfunction CalculateBMI(weight, height: Real): Real;\nbegin\n  CalculateBMI := weight / (height * height);\nend;\n\nvar\n  weight, height, bmi: Real;\nbegin\n  weight := 70.0;  { Example weight in kilograms }\n  height := 1.75;  { Example height in meters }\n  bmi := CalculateBMI(weight, height);\n  WriteLn('The BMI is: ', bmi:0:2);\nend.\n```"
  },
  {
    "task": "Create a function that calculates the midpoint between two numbers using addition and division.",
    "code": "```pascal\nprogram MidpointCalculator;\n\nfunction CalculateMidpoint(a, b: Real): Real;\nbegin\n  CalculateMidpoint := (a + b) / 2;\nend;\n\nvar\n  num1, num2, midpoint: Real;\nbegin\n  num1 := 10.0;\n  num2 := 20.0;\n  midpoint := CalculateMidpoint(num1, num2);\n  WriteLn('The midpoint is: ', midpoint:0:2);\nend.\n```"
  },
  {
    "task": "Write a program that outputs the result of dividing a number by another with remainder.",
    "code": "```pascal\nprogram DivideWithRemainder;\nvar\n  dividend, divisor, quotient, remainder: Integer;\nbegin\n  Write('Enter the dividend: ');\n  ReadLn(dividend);\n  Write('Enter the divisor: ');\n  ReadLn(divisor);\n  \n  quotient := dividend div divisor;\n  remainder := dividend mod divisor;\n  \n  WriteLn('Quotient: ', quotient);\n  WriteLn('Remainder: ', remainder);\nend.\n```"
  },
  {
    "task": "Implement a function to calculate the factorial of a number using multiplication.",
    "code": "```pascal\nprogram FactorialCalculator;\n\nfunction Factorial(n: Integer): LongInt;\nvar\n  i: Integer;\n  result: LongInt;\nbegin\n  result := 1;\n  for i := 1 to n do\n    result := result * i;\n  Factorial := result;\nend;\n\nbegin\n  { Example usage }\n  WriteLn('Factorial of 5 is: ', Factorial(5));\nend.\n```"
  },
  {
    "task": "Build a script to find the average of three numbers using addition and division.",
    "code": "```pascal\nprogram AverageOfThreeNumbers;\n\nvar\n  num1, num2, num3: real;\n  average: real;\n\nbegin\n  { Assign values to the numbers }\n  num1 := 10;\n  num2 := 20;\n  num3 := 30;\n\n  { Calculate the average }\n  average := (num1 + num2 + num3) / 3;\n\n  { Output the result }\n  writeln('The average is: ', average:0:2);\nend.\n```"
  },
  {
    "task": "Create a program that simulates a simple bank account using arithmetic operations for deposits and withdrawals.",
    "code": "```pascal\nprogram BankAccount;\n\nvar\n  balance: Real;\n  depositAmount, withdrawalAmount: Real;\n  choice: Integer;\n\nbegin\n  balance := 0.0;\n\n  repeat\n    writeln('Bank Account Simulator');\n    writeln('1. Deposit');\n    writeln('2. Withdraw');\n    writeln('3. Check Balance');\n    writeln('4. Exit');\n    write('Choose an option (1-4): ');\n    readln(choice);\n\n    case choice of\n      1: begin\n           write('Enter deposit amount: ');\n           readln(depositAmount);\n           balance := balance + depositAmount;\n           writeln('Deposit successful! Current balance: ', balance:0:2);\n         end;\n      2: begin\n           write('Enter withdrawal amount: ');\n           readln(withdrawalAmount);\n           if withdrawalAmount <= balance then\n           begin\n             balance := balance - withdrawalAmount;\n             writeln('Withdrawal successful! Current balance: ', balance:0:2);\n           end\n           else\n             writeln('Insufficient funds for withdrawal.');\n         end;\n      3: begin\n           writeln('Current balance: ', balance:0:2);\n         end;\n      4: begin\n           writeln('Exiting program.');\n         end;\n      else\n        writeln('Invalid choice. Please choose a valid option (1-4).');\n    end;\n\n  until choice = 4;\nend.\n```"
  },
  {
    "task": "Write a function that computes the cost per item given a total cost and quantity using division.",
    "code": "```pascal\nprogram CostPerItem;\n\nfunction ComputeCostPerItem(totalCost: Real; quantity: Integer): Real;\nbegin\n  if quantity <> 0 then\n    ComputeCostPerItem := totalCost / quantity\n  else\n    ComputeCostPerItem := 0.0;  // Handle division by zero\nend;\n\nvar\n  totalCost: Real;\n  quantity: Integer;\n  costPerItem: Real;\nbegin\n  totalCost := 100.0;\n  quantity := 5;\n  costPerItem := ComputeCostPerItem(totalCost, quantity);\n  writeln('Cost per item: ', costPerItem:0:2);\nend.\n```"
  },
  {
    "task": "Design a program that calculates the time required to travel a distance at a given speed.",
    "code": "```pascal\nprogram TravelTimeCalculator;\n\nvar\n  distance, speed, time: real;\n\nbegin\n  writeln('Enter the distance (in kilometers): ');\n  readln(distance);\n  writeln('Enter the speed (in kilometers per hour): ');\n  readln(speed);\n  \n  if speed <> 0 then\n  begin\n    time := distance / speed;\n    writeln('Time required to travel the distance is: ', time:0:2, ' hours');\n  end\n  else\n  begin\n    writeln('Speed cannot be zero.');\n  end;\nend.\n```"
  },
  {
    "task": "Develop a function that returns the absolute difference between two numbers.",
    "code": "```pascal\nprogram AbsoluteDifference;\n\nfunction AbsoluteDifference(a, b: Integer): Integer;\nbegin\n  if a > b then\n    AbsoluteDifference := a - b\n  else\n    AbsoluteDifference := b - a;\nend;\n\nbegin\n  { Example usage }\n  Writeln(AbsoluteDifference(10, 5));  { Output: 5 }\n  Writeln(AbsoluteDifference(5, 10));  { Output: 5 }\nend.\n```"
  },
  {
    "task": "Implement a program to compute the geometric mean of a set of numbers using multiplication and roots.",
    "code": "```pascal\nprogram GeometricMean;\n\nuses\n  Math;\n\nvar\n  numbers: array of Real;\n  n, i: Integer;\n  product, geomMean: Real;\n\nbegin\n  { Initialize variables }\n  product := 1.0;\n\n  { Read number of elements }\n  Write('Enter the number of elements: ');\n  ReadLn(n);\n  SetLength(numbers, n);\n\n  { Read the numbers }\n  for i := 0 to n - 1 do\n  begin\n    Write('Enter number ', i + 1, ': ');\n    ReadLn(numbers[i]);\n    product := product * numbers[i];\n  end;\n\n  { Compute the geometric mean }\n  if n > 0 then\n    geomMean := Power(product, 1.0 / n)\n  else\n    geomMean := 0.0;\n\n  { Output the result }\n  WriteLn('The geometric mean is: ', geomMean:0:4);\nend.\n```"
  },
  {
    "task": "Write a function to calculate the total interest paid on a loan using arithmetic operations.",
    "code": "```pascal\nprogram InterestCalculator;\n\nfunction CalculateTotalInterest(principal: Real; annualRate: Real; years: Integer): Real;\nvar\n  totalInterest, totalAmount, rate: Real;\nbegin\n  rate := annualRate / 100;\n  totalAmount := principal * Power(1 + rate, years);\n  totalInterest := totalAmount - principal;\n  CalculateTotalInterest := totalInterest;\nend;\n\nvar\n  principal, annualRate, totalInterest: Real;\n  years: Integer;\nbegin\n  principal := 1000.0;\n  annualRate := 5.0;\n  years := 5;\n\n  totalInterest := CalculateTotalInterest(principal, annualRate, years);\n  WriteLn('Total interest paid: ', totalInterest:0:2);\nend.\n```"
  },
  {
    "task": "Create a program that calculates the sum of even numbers within a specified range.",
    "code": "```pascal\nprogram SumOfEvenNumbers;\n\nvar\n  startRange, endRange, i, sum: Integer;\n\nbegin\n  writeln('Enter the start of the range:');\n  readln(startRange);\n  writeln('Enter the end of the range:');\n  readln(endRange);\n\n  sum := 0;\n\n  for i := startRange to endRange do\n  begin\n    if i mod 2 = 0 then\n      sum := sum + i;\n  end;\n\n  writeln('The sum of even numbers in the range is: ', sum);\nend.\n```"
  },
  {
    "task": "Design a script to determine the final balance in a savings account after regular deposits and withdrawals.",
    "code": "```pascal\nprogram SavingsAccount;\n\nvar\n  initialBalance, deposit, withdrawal, finalBalance: Real;\n  numberOfDeposits, numberOfWithdrawals, i: Integer;\n\nbegin\n  initialBalance := 1000.0;  { Example initial balance }\n  finalBalance := initialBalance;\n  \n  numberOfDeposits := 3;\n  numberOfWithdrawals := 2;\n  \n  { Process deposits }\n  for i := 1 to numberOfDeposits do\n  begin\n    deposit := 200.0;  { Example deposit amount }\n    finalBalance := finalBalance + deposit;\n  end;\n  \n  { Process withdrawals }\n  for i := 1 to numberOfWithdrawals do\n  begin\n    withdrawal := 150.0;  { Example withdrawal amount }\n    finalBalance := finalBalance - withdrawal;\n  end;\n  \n  writeln('Final balance: ', finalBalance:0:2);\nend.\n```"
  },
  {
    "task": "Develop a function to compute the surface area of a cylinder given its radius and height.",
    "code": "```pascal\nprogram CylinderSurfaceArea;\n\nfunction SurfaceAreaOfCylinder(radius, height: Real): Real;\nconst\n  Pi = 3.141592653589793;\nbegin\n  SurfaceAreaOfCylinder := 2 * Pi * radius * (radius + height);\nend;\n\nvar\n  radius, height, surfaceArea: Real;\n\nbegin\n  { Example usage }\n  radius := 5.0;\n  height := 10.0;\n  surfaceArea := SurfaceAreaOfCylinder(radius, height);\n  WriteLn('Surface Area of Cylinder: ', surfaceArea:0:2);\nend.\n```"
  },
  {
    "task": "Write a program that outputs the result of an arithmetic sequence given the first term and common difference.",
    "code": "```pascal\nprogram ArithmeticSequence;\n\nvar\n  firstTerm, commonDifference, term, n: Integer;\n\nbegin\n  Write('Enter the first term of the sequence: ');\n  ReadLn(firstTerm);\n  Write('Enter the common difference: ');\n  ReadLn(commonDifference);\n  Write('Enter the number of terms: ');\n  ReadLn(n);\n\n  WriteLn('The arithmetic sequence is:');\n  for term := 0 to n - 1 do\n    WriteLn(firstTerm + term * commonDifference);\nend.\n```"
  },
  {
    "task": "Implement a function that finds the average speed for a trip given total distance and time.",
    "code": "```pascal\nprogram AverageSpeed;\n\nfunction CalculateAverageSpeed(totalDistance, totalTime: Real): Real;\nbegin\n    if totalTime = 0 then\n        CalculateAverageSpeed := 0\n    else\n        CalculateAverageSpeed := totalDistance / totalTime;\nend;\n\nvar\n    distance, time, averageSpeed: Real;\nbegin\n    distance := 150.0; { example distance in kilometers }\n    time := 3.0; { example time in hours }\n    \n    averageSpeed := CalculateAverageSpeed(distance, time);\n    \n    WriteLn('The average speed is: ', averageSpeed:0:2, ' km/h');\nend.\n```"
  },
  {
    "task": "Create a function to calculate the total cost of a road trip given fuel cost per mile and distance.",
    "code": "```pascal\nprogram RoadTripCost;\n\nfunction CalculateTotalCost(fuelCostPerMile: Real; distance: Real): Real;\nbegin\n  CalculateTotalCost := fuelCostPerMile * distance;\nend;\n\nvar\n  fuelCost, distance, totalCost: Real;\nbegin\n  fuelCost := 3.5;  { example fuel cost per mile }\n  distance := 150.0;  { example distance }\n  \n  totalCost := CalculateTotalCost(fuelCost, distance);\n  WriteLn('Total cost of the road trip: ', totalCost:0:2);\nend.\n```"
  },
  {
    "task": "Write a script that determines the number of tiles required to cover a floor area using arithmetic operations.",
    "code": "```pascal\nprogram TileCalculator;\n\nvar\n  floorLength, floorWidth, tileSide, floorArea, tileArea, numberOfTiles: Real;\n\nbegin\n  { Initialize the dimensions of the floor and the tile }\n  floorLength := 10.0;  { Example floor length in meters }\n  floorWidth := 5.0;    { Example floor width in meters }\n  tileSide := 0.5;      { Example tile side length in meters }\n\n  { Calculate the area of the floor }\n  floorArea := floorLength * floorWidth;\n\n  { Calculate the area of one tile }\n  tileArea := tileSide * tileSide;\n\n  { Determine the number of tiles required }\n  numberOfTiles := floorArea / tileArea;\n\n  { Output the result, rounding up to the nearest whole number }\n  Writeln('Number of tiles required: ', Ceil(numberOfTiles):0:0);\nend.\n```"
  },
  {
    "task": "Develop a program to calculate the amount of paint needed to cover a wall given its area.",
    "code": "```pascal\nprogram PaintCalculator;\n\nvar\n  width, height, area, paintNeeded: Real;\n  coveragePerLitre: Real;\n\nbegin\n  { Initialize the coverage per litre (e.g., 10 square meters per litre) }\n  coveragePerLitre := 10.0;\n  \n  { Input the dimensions of the wall }\n  Write('Enter the width of the wall in meters: ');\n  ReadLn(width);\n  Write('Enter the height of the wall in meters: ');\n  ReadLn(height);\n  \n  { Calculate the area of the wall }\n  area := width * height;\n  \n  { Calculate the amount of paint needed }\n  paintNeeded := area / coveragePerLitre;\n  \n  { Output the result }\n  WriteLn('Amount of paint needed: ', paintNeeded:0:2, ' litres');\nend.\n```"
  },
  {
    "task": "Build a function that calculates the price per unit weight given total price and weight.",
    "code": "```pascal\nprogram PricePerUnitWeight;\n\nfunction CalculatePricePerUnitWeight(totalPrice: Real; weight: Real): Real;\nbegin\n  if weight = 0 then\n    CalculatePricePerUnitWeight := 0\n  else\n    CalculatePricePerUnitWeight := totalPrice / weight;\nend;\n\nvar\n  totalPrice, weight, pricePerUnit: Real;\nbegin\n  totalPrice := 100.0;  { Example total price }\n  weight := 5.0;        { Example weight }\n  pricePerUnit := CalculatePricePerUnitWeight(totalPrice, weight);\n  WriteLn('Price per unit weight: ', pricePerUnit:0:2);\nend.\n```"
  },
  {
    "task": "Implement a program that computes the volume of a rectangular prism given its dimensions.",
    "code": "```pascal\nprogram VolumeOfRectangularPrism;\n\nvar\n  length, width, height, volume: real;\n\nbegin\n  { Input dimensions }\n  writeln('Enter the length of the rectangular prism: ');\n  readln(length);\n  writeln('Enter the width of the rectangular prism: ');\n  readln(width);\n  writeln('Enter the height of the rectangular prism: ');\n  readln(height);\n\n  { Compute the volume }\n  volume := length * width * height;\n\n  { Output the volume }\n  writeln('The volume of the rectangular prism is: ', volume:0:2);\nend.\n```"
  },
  {
    "task": "Write a function to find the percentage increase or decrease between two numbers.",
    "code": "```pascal\nprogram PercentageChange;\n\nfunction PercentageChange(oldValue, newValue: Real): Real;\nbegin\n  if oldValue = 0 then\n    PercentageChange := 0\n  else\n    PercentageChange := ((newValue - oldValue) / oldValue) * 100;\nend;\n\nvar\n  oldNum, newNum, result: Real;\n\nbegin\n  oldNum := 150.0;\n  newNum := 200.0;\n  result := PercentageChange(oldNum, newNum);\n  WriteLn('Percentage change: ', result:0:2, '%');\nend.\n```"
  },
  {
    "task": "Create a program to determine the number of complete weeks within a specified number of days.",
    "code": "```pascal\nprogram CompleteWeeksCalculator;\n\nvar\n  days, weeks: Integer;\n\nbegin\n  Write('Enter the number of days: ');\n  ReadLn(days);\n  weeks := days div 7;\n  WriteLn('Number of complete weeks: ', weeks);\nend.\n```"
  },
  {
    "task": "Design a function that calculates the break-even point for a business using cost and revenue data.",
    "code": "```pascal\nprogram BreakEvenPoint;\n\nfunction BreakEvenPoint(fixedCosts, variableCostPerUnit, pricePerUnit: Real): Real;\nbegin\n  if pricePerUnit = variableCostPerUnit then\n    BreakEvenPoint := -1\n  else\n    BreakEvenPoint := fixedCosts / (pricePerUnit - variableCostPerUnit);\nend;\n\nvar\n  fixedCosts, variableCostPerUnit, pricePerUnit, breakEvenUnits: Real;\n\nbegin\n  fixedCosts := 1000.0;\n  variableCostPerUnit := 50.0;\n  pricePerUnit := 75.0;\n  \n  breakEvenUnits := BreakEvenPoint(fixedCosts, variableCostPerUnit, pricePerUnit);\n  \n  if breakEvenUnits = -1 then\n    writeln('No break-even point, price per unit equals variable cost per unit.')\n  else\n    writeln('Break-even point in units: ', breakEvenUnits:0:2);\nend.\n```"
  },
  {
    "task": "Develop a program that converts a total number of seconds into hours, minutes, and seconds.",
    "code": "```pascal\nprogram ConvertSeconds;\n\nvar\n  totalSeconds, hours, minutes, seconds: Integer;\n\nbegin\n  Write('Enter total number of seconds: ');\n  ReadLn(totalSeconds);\n\n  hours := totalSeconds div 3600;\n  totalSeconds := totalSeconds mod 3600;\n  minutes := totalSeconds div 60;\n  seconds := totalSeconds mod 60;\n\n  WriteLn('Hours: ', hours);\n  WriteLn('Minutes: ', minutes);\n  WriteLn('Seconds: ', seconds);\nend.\n```"
  },
  {
    "task": "Write a function that calculates the depreciation of an asset over time using arithmetic operations.",
    "code": "```pascal\nprogram DepreciationCalculator;\n\nfunction CalculateDepreciation(initialValue: Real; salvageValue: Real; usefulLife: Integer): Real;\nvar\n  depreciation: Real;\nbegin\n  depreciation := (initialValue - salvageValue) / usefulLife;\n  CalculateDepreciation := depreciation;\nend;\n\nvar\n  initial, salvage: Real;\n  life: Integer;\n  depreciation: Real;\nbegin\n  initial := 10000.0;\n  salvage := 2000.0;\n  life := 5;\n\n  depreciation := CalculateDepreciation(initial, salvage, life);\n\n  WriteLn('Annual Depreciation: ', depreciation:0:2);\nend.\n```"
  },
  {
    "task": "Create a program that computes the final exam grade needed to achieve a target course average.",
    "code": "```pascal\nprogram FinalExamGradeCalculator;\n\nvar\n  currentAverage, targetAverage, examWeight, finalExamGrade: real;\n\nbegin\n  writeln('Enter your current average: ');\n  readln(currentAverage);\n  writeln('Enter your target average: ');\n  readln(targetAverage);\n  writeln('Enter the exam weight (as a percentage): ');\n  readln(examWeight);\n\n  finalExamGrade := (targetAverage - currentAverage * (1 - examWeight / 100)) / (examWeight / 100);\n\n  writeln('You need a final exam grade of: ', finalExamGrade:0:2);\nend.\n```"
  },
  {
    "task": "Implement a function to calculate the total cost of groceries given prices and quantities of items.",
    "code": "```pascal\nprogram GroceryCostCalculator;\n\nuses SysUtils;\n\nfunction CalculateTotalCost(prices: array of Real; quantities: array of Integer): Real;\nvar\n  i: Integer;\n  totalCost: Real;\nbegin\n  totalCost := 0.0;\n  for i := 0 to High(prices) do\n  begin\n    totalCost := totalCost + (prices[i] * quantities[i]);\n  end;\n  CalculateTotalCost := totalCost;\nend;\n\nvar\n  prices: array of Real;\n  quantities: array of Integer;\n  total: Real;\nbegin\n  SetLength(prices, 3);\n  SetLength(quantities, 3);\n  \n  prices[0] := 2.99;\n  quantities[0] := 4;\n\n  prices[1] := 1.49;\n  quantities[1] := 2;\n\n  prices[2] := 5.75;\n  quantities[2] := 1;\n\n  total := CalculateTotalCost(prices, quantities);\n  Writeln('Total cost of groceries: ', FormatFloat('0.00', total));\nend.\n```"
  },
  {
    "task": "Write a script that determines the number of years required to double an investment using a fixed interest rate.",
    "code": "```pascal\nprogram DoubleInvestment;\n\nvar\n  principal, rate, amount: Real;\n  years: Integer;\n\nbegin\n  principal := 1000.0;  { Initial principal amount }\n  rate := 0.05;         { Fixed interest rate }\n  amount := principal;\n  years := 0;\n\n  while amount < 2 * principal do\n  begin\n    amount := amount + (amount * rate);\n    years := years + 1;\n  end;\n\n  WriteLn('Number of years required to double the investment: ', years);\nend.\n```"
  },
  {
    "task": "Develop a function that computes the harmonic mean of a set of numbers using division and addition.",
    "code": "```pascal\nprogram HarmonicMeanCalculator;\n\nuses SysUtils;\n\nfunction HarmonicMean(numbers: array of Double): Double;\nvar\n  sum: Double;\n  i, n: Integer;\nbegin\n  n := Length(numbers);\n  if n = 0 then\n    raise Exception.Create('Array cannot be empty.');\n\n  sum := 0.0;\n  for i := 0 to n - 1 do\n  begin\n    if numbers[i] = 0 then\n      raise Exception.Create('Array elements cannot be zero.');\n    sum := sum + 1.0 / numbers[i];\n  end;\n\n  if sum = 0 then\n    raise Exception.Create('Sum of reciprocals cannot be zero.');\n\n  HarmonicMean := n / sum;\nend;\n\nvar\n  data: array of Double;\n  result: Double;\nbegin\n  data := [1.0, 2.0, 4.0, 4.0];\n  result := HarmonicMean(data);\n  WriteLn('Harmonic Mean: ', result:0:2);\nend.\n```"
  },
  {
    "task": "Create a program to find the sum of the squares of numbers in a given range.",
    "code": "```pascal\nprogram SumOfSquares;\n\nvar\n  startRange, endRange, i, sum: Integer;\n\nbegin\n  Write('Enter the start of the range: ');\n  ReadLn(startRange);\n  Write('Enter the end of the range: ');\n  ReadLn(endRange);\n\n  sum := 0;\n\n  for i := startRange to endRange do\n    sum := sum + (i * i);\n\n  WriteLn('The sum of squares from ', startRange, ' to ', endRange, ' is: ', sum);\nend.\n```"
  },
  {
    "task": "Design a function that calculates the energy consumption of an appliance given power and usage time.",
    "code": "```pascal\nprogram EnergyConsumption;\n\nfunction CalculateEnergyConsumption(Power: Real; UsageTime: Real): Real;\nbegin\n  CalculateEnergyConsumption := Power * UsageTime;\nend;\n\nvar\n  Power, UsageTime, Energy: Real;\n\nbegin\n  Power := 1500.0;  // Example power in watts\n  UsageTime := 2.5; // Example usage time in hours\n\n  Energy := CalculateEnergyConsumption(Power, UsageTime);\n  writeln('Energy Consumption: ', Energy:0:2, ' Wh');\nend.\n```"
  },
  {
    "task": "Write a program that simulates a simple stock portfolio using arithmetic operations for buying and selling.",
    "code": "```pascal\nprogram StockPortfolio;\n\nvar\n  totalShares: Integer;\n  sharePrice, totalValue, cash: Real;\n\nprocedure BuyShares(shares: Integer; price: Real);\nbegin\n  totalShares := totalShares + shares;\n  totalValue := totalShares * sharePrice;\n  cash := cash - (shares * price);\nend;\n\nprocedure SellShares(shares: Integer; price: Real);\nbegin\n  if shares <= totalShares then\n  begin\n    totalShares := totalShares - shares;\n    totalValue := totalShares * sharePrice;\n    cash := cash + (shares * price);\n  end\n  else\n    Writeln('Not enough shares to sell');\nend;\n\nbegin\n  totalShares := 0;\n  sharePrice := 100.0;\n  cash := 10000.0;\n\n  Writeln('Initial cash: ', cash:0:2);\n\n  BuyShares(50, sharePrice);\n  Writeln('After buying 50 shares at $', sharePrice:0:2, ' each');\n  Writeln('Total shares: ', totalShares);\n  Writeln('Cash remaining: ', cash:0:2);\n\n  SellShares(20, sharePrice);\n  Writeln('After selling 20 shares at $', sharePrice:0:2, ' each');\n  Writeln('Total shares: ', totalShares);\n  Writeln('Cash remaining: ', cash:0:2);\n\n  SellShares(40, sharePrice);\n  Writeln('After attempting to sell 40 shares at $', sharePrice:0:2, ' each');\n  Writeln('Total shares: ', totalShares);\n  Writeln('Cash remaining: ', cash:0:2);\nend.\n```"
  },
  {
    "task": "Implement a function to calculate the gravitational force between two masses using multiplication and division.",
    "code": "```pascal\nprogram GravitationalForceCalculator;\n\nfunction GravitationalForce(mass1, mass2, distance: Real): Real;\nconst\n  G = 6.67430e-11; // Gravitational constant in m^3 kg^-1 s^-2\nbegin\n  if distance <> 0 then\n    GravitationalForce := G * (mass1 * mass2) / (distance * distance)\n  else\n    GravitationalForce := 0;\nend;\n\nbegin\n  // Example usage\n  WriteLn(GravitationalForce(1000, 2000, 10):0:10);\nend.\n```"
  },
  {
    "task": "Create a function that determines the price per square foot of a piece of real estate.",
    "code": "```pascal\nprogram RealEstatePrice;\n\nfunction PricePerSquareFoot(totalPrice: Real; areaInSquareFeet: Real): Real;\nbegin\n  if areaInSquareFeet <> 0 then\n    PricePerSquareFoot := totalPrice / areaInSquareFeet\n  else\n    PricePerSquareFoot := 0;\nend;\n\nvar\n  totalPrice, areaInSquareFeet, result: Real;\n\nbegin\n  totalPrice := 500000.0;  { Example total price }\n  areaInSquareFeet := 2000.0;  { Example area in square feet }\n  \n  result := PricePerSquareFoot(totalPrice, areaInSquareFeet);\n  WriteLn('Price per square foot: ', result:0:2);\nend.\n```"
  },
  {
    "task": "Write a script to compute the total interest earned on a savings account with monthly compounding.",
    "code": "```pascal\nprogram CompoundInterest;\n\nvar\n  principal, rate, totalInterest: Real;\n  months, i: Integer;\n\nbegin\n  principal := 1000.0;  // Example principal amount\n  rate := 0.05;         // Example annual interest rate (5%)\n  months := 12;         // Example number of months\n\n  totalInterest := 0.0;\n\n  for i := 1 to months do\n  begin\n    totalInterest := totalInterest + (principal * (rate / 12));\n    principal := principal + (principal * (rate / 12));\n  end;\n\n  WriteLn('Total Interest Earned: ', totalInterest:0:2);\nend.\n```"
  },
  {
    "task": "Develop a program that calculates the calories burned during exercise given MET value and duration.",
    "code": "```pascal\nprogram CaloriesBurned;\n\nvar\n  MET, duration, weight, caloriesBurned: real;\n\nbegin\n  writeln('Enter the MET value:');\n  readln(MET);\n  \n  writeln('Enter the duration in minutes:');\n  readln(duration);\n  \n  writeln('Enter the weight in kilograms:');\n  readln(weight);\n  \n  caloriesBurned := MET * weight * (duration / 60);\n  \n  writeln('Calories burned: ', caloriesBurned:0:2);\nend.\n```"
  },
  {
    "task": "Build a function that converts a speed from miles per hour to kilometers per hour using multiplication.",
    "code": "```pascal\nprogram SpeedConverter;\n\nfunction ConvertMphToKph(mph: Real): Real;\nconst\n  MILES_TO_KILOMETERS = 1.60934;\nbegin\n  ConvertMphToKph := mph * MILES_TO_KILOMETERS;\nend;\n\nvar\n  mph, kph: Real;\nbegin\n  mph := 60; // Example speed\n  kph := ConvertMphToKph(mph);\n  WriteLn('Speed in kilometers per hour: ', kph:0:2);\nend.\n```"
  },
  {
    "task": "Implement a program to find the number of days between two dates using arithmetic operations.",
    "code": "```pascal\nprogram DaysBetweenDates;\n\nuses\n  SysUtils;\n\nfunction DaysBetween(Date1, Date2: TDateTime): Integer;\nbegin\n  Result := Trunc(Date2) - Trunc(Date1);\nend;\n\nvar\n  Date1, Date2: TDateTime;\n  DaysDiff: Integer;\nbegin\n  Date1 := EncodeDate(2023, 1, 1); // Change to the desired first date\n  Date2 := EncodeDate(2023, 10, 1); // Change to the desired second date\n  DaysDiff := DaysBetween(Date1, Date2);\n  WriteLn('Number of days between the two dates: ', DaysDiff);\nend.\n```"
  },
  {
    "task": "Write a function to calculate the area of a circle given its radius.",
    "code": "```pascal\nprogram CircleArea;\n\nfunction AreaOfCircle(radius: Real): Real;\nconst\n  Pi = 3.14159265358979323846;\nbegin\n  AreaOfCircle := Pi * radius * radius;\nend;\n\nvar\n  radius, area: Real;\nbegin\n  radius := 5.0; { Example radius }\n  area := AreaOfCircle(radius);\n  WriteLn('The area of the circle is: ', area:0:2);\nend.\n```"
  },
  {
    "task": "Create a program that determines the total distance driven given trips with varying speeds and durations.",
    "code": "```pascal\nprogram TotalDistance;\n\nuses SysUtils;\n\nvar\n  numTrips, i: Integer;\n  speed, duration, totalDistance, distance: Real;\n\nbegin\n  Write('Enter the number of trips: ');\n  ReadLn(numTrips);\n  \n  totalDistance := 0;\n\n  for i := 1 to numTrips do\n  begin\n    Write('Enter speed for trip ', i, ' (in km/h): ');\n    ReadLn(speed);\n    Write('Enter duration for trip ', i, ' (in hours): ');\n    ReadLn(duration);\n    \n    distance := speed * duration;\n    totalDistance := totalDistance + distance;\n  end;\n  \n  WriteLn('The total distance driven is: ', totalDistance:0:2, ' km');\nend.\n```"
  },
  {
    "task": "Design a function to compute the final price of an item after applying multiple discounts sequentially.",
    "code": "```pascal\nprogram FinalPriceCalculator;\n\nfunction ComputeFinalPrice(initialPrice: Real; discounts: array of Real): Real;\nvar\n  i: Integer;\n  finalPrice: Real;\nbegin\n  finalPrice := initialPrice;\n  for i := 0 to High(discounts) do\n  begin\n    finalPrice := finalPrice * (1 - discounts[i]);\n  end;\n  ComputeFinalPrice := finalPrice;\nend;\n\nvar\n  price: Real;\n  discountRates: array of Real;\nbegin\n  price := 100.0;\n  SetLength(discountRates, 2);\n  discountRates[0] := 0.10;  // 10% discount\n  discountRates[1] := 0.05;  // 5% discount\n  WriteLn('Final Price: ', ComputeFinalPrice(price, discountRates):0:2);\nend.\n```"
  },
  {
    "task": "Write a script that calculates the number of bricks needed to build a wall given wall dimensions and brick size.",
    "code": "```pascal\nprogram CalculateBricks;\n\nvar\n  wallLength, wallHeight, wallArea: Real;\n  brickLength, brickHeight, brickArea: Real;\n  numberOfBricks: Integer;\n\nbegin\n  { Input wall dimensions }\n  Write('Enter wall length (in meters): ');\n  ReadLn(wallLength);\n  Write('Enter wall height (in meters): ');\n  ReadLn(wallHeight);\n  \n  { Input brick dimensions }\n  Write('Enter brick length (in meters): ');\n  ReadLn(brickLength);\n  Write('Enter brick height (in meters): ');\n  ReadLn(brickHeight);\n  \n  { Calculate areas }\n  wallArea := wallLength * wallHeight;\n  brickArea := brickLength * brickHeight;\n  \n  { Calculate number of bricks }\n  numberOfBricks := Trunc(wallArea / brickArea);\n  \n  { Output result }\n  WriteLn('Number of bricks needed: ', numberOfBricks);\nend.\n```"
  },
  {
    "task": "Develop a program to determine the number of pizzas required for a party given the number of people and slices per pizza.",
    "code": "```pascal\nprogram PizzaParty;\n\nvar\n  people, slicesPerPerson, slicesPerPizza, totalSlices, pizzas: Integer;\n\nbegin\n  Write('Enter the number of people: ');\n  ReadLn(people);\n  Write('Enter the number of slices each person will eat: ');\n  ReadLn(slicesPerPerson);\n  Write('Enter the number of slices per pizza: ');\n  ReadLn(slicesPerPizza);\n\n  totalSlices := people * slicesPerPerson;\n  pizzas := (totalSlices + slicesPerPizza - 1) div slicesPerPizza;\n\n  WriteLn('Number of pizzas required: ', pizzas);\nend.\n```"
  },
  {
    "task": "Implement a function that calculates the total cost of a meal including tax and tip.",
    "code": "```pascal\nprogram MealCostCalculator;\n\nfunction CalculateTotalCost(mealCost: Real; taxRate: Real; tipRate: Real): Real;\nvar\n  taxAmount, tipAmount, totalCost: Real;\nbegin\n  taxAmount := mealCost * taxRate;\n  tipAmount := mealCost * tipRate;\n  totalCost := mealCost + taxAmount + tipAmount;\n  CalculateTotalCost := totalCost;\nend;\n\nvar\n  mealCost, taxRate, tipRate, totalCost: Real;\nbegin\n  mealCost := 50.0;  { Example meal cost }\n  taxRate := 0.08;   { Example tax rate of 8% }\n  tipRate := 0.15;   { Example tip rate of 15% }\n  \n  totalCost := CalculateTotalCost(mealCost, taxRate, tipRate);\n  WriteLn('Total meal cost: ', totalCost:0:2);\nend.\n```"
  },
  {
    "task": "Create a program to compute the average rainfall over a period using addition and division.",
    "code": "```pascal\nprogram AverageRainfall;\n\nvar\n  totalRainfall, averageRainfall: real;\n  numberOfDays, i: integer;\n  dailyRainfall: real;\n\nbegin\n  totalRainfall := 0;\n  writeln('Enter the number of days: ');\n  readln(numberOfDays);\n\n  for i := 1 to numberOfDays do\n  begin\n    writeln('Enter rainfall for day ', i, ': ');\n    readln(dailyRainfall);\n    totalRainfall := totalRainfall + dailyRainfall;\n  end;\n\n  if numberOfDays > 0 then\n    averageRainfall := totalRainfall / numberOfDays\n  else\n    averageRainfall := 0;\n\n  writeln('The average rainfall over ', numberOfDays, ' days is: ', averageRainfall:0:2);\nend.\n```"
  },
  {
    "task": "Write a function that determines the number of batches needed to produce a specific quantity of a product.",
    "code": "```pascal\nprogram CalculateBatches;\n\nfunction NumberOfBatches(quantity: Integer; batchSize: Integer): Integer;\nbegin\n  if batchSize = 0 then\n    NumberOfBatches := 0\n  else\n    NumberOfBatches := (quantity + batchSize - 1) div batchSize;\nend;\n\nvar\n  quantity, batchSize, batches: Integer;\nbegin\n  quantity := 100;  { Example quantity }\n  batchSize := 15;  { Example batch size }\n  \n  batches := NumberOfBatches(quantity, batchSize);\n  WriteLn('Number of batches needed: ', batches);\nend.\n```"
  },
  {
    "task": "Design a program to calculate the total energy consumption of a household given individual appliance usage.",
    "code": "```pascal\nprogram EnergyConsumption;\n\nvar\n  numAppliances, i: integer;\n  energyConsumption, totalConsumption: real;\n\nbegin\n  totalConsumption := 0.0;\n  \n  writeln('Enter the number of appliances:');\n  readln(numAppliances);\n  \n  for i := 1 to numAppliances do\n  begin\n    writeln('Enter the energy consumption of appliance ', i, ' in kWh:');\n    readln(energyConsumption);\n    totalConsumption := totalConsumption + energyConsumption;\n  end;\n  \n  writeln('The total energy consumption is: ', totalConsumption:0:2, ' kWh');\nend.\n```"
  },
  {
    "task": "Develop a function that computes the body surface area of a person using height and weight.",
    "code": "```pascal\nprogram BodySurfaceArea;\n\nfunction CalculateBSA(height, weight: Real): Real;\nbegin\n  CalculateBSA := sqrt((height * weight) / 3600);\nend;\n\nvar\n  height, weight, bsa: Real;\n\nbegin\n  Write('Enter height in cm: ');\n  ReadLn(height);\n  Write('Enter weight in kg: ');\n  ReadLn(weight);\n\n  bsa := CalculateBSA(height, weight);\n  WriteLn('The Body Surface Area is: ', bsa:0:2, ' m^2');\nend.\n```"
  },
  {
    "task": "Build a script to calculate the monthly payment on a mortgage using principal, interest rate, and term.",
    "code": "```pascal\nprogram MortgageCalculator;\n\nvar\n  principal, interestRate, monthlyInterestRate, monthlyPayment: real;\n  term, numberOfPayments: integer;\n\nbegin\n  (* Assign values to principal, interestRate, and term here *)\n  principal := 200000.0;  (* example principal amount *)\n  interestRate := 5.0;    (* example annual interest rate in percent *)\n  term := 30;             (* example term in years *)\n\n  (* Calculate the number of payments (months) *)\n  numberOfPayments := term * 12;\n\n  (* Convert annual interest rate to monthly and from percentage *)\n  monthlyInterestRate := (interestRate / 100) / 12;\n\n  (* Calculate monthly payment using the formula for annuity *)\n  monthlyPayment := (principal * monthlyInterestRate) / \n                    (1 - Power(1 + monthlyInterestRate, -numberOfPayments));\n\n  (* Output the result *)\n  writeln('The monthly payment is: ', monthlyPayment:0:2);\nend.\n```"
  },
  {
    "task": "Implement a function to find the volume of a cone given its height and radius.",
    "code": "```pascal\nprogram ConeVolume;\n\nfunction ConeVolume(radius, height: Real): Real;\nconst\n  Pi = 3.141592653589793;\nbegin\n  ConeVolume := (Pi * radius * radius * height) / 3;\nend;\n\nvar\n  radius, height, volume: Real;\nbegin\n  radius := 5.0;  { Example radius }\n  height := 10.0; { Example height }\n  volume := ConeVolume(radius, height);\n  WriteLn('Volume of the cone: ', volume:0:2);\nend.\n```"
  },
  {
    "task": "Write a program that estimates the cost of a trip using fuel efficiency and distance.",
    "code": "```pascal\nprogram TripCostEstimator;\n\nvar\n  fuelEfficiency, distance, fuelPrice, cost: real;\n\nbegin\n  writeln('Enter the fuel efficiency of the vehicle (km per liter): ');\n  readln(fuelEfficiency);\n  \n  writeln('Enter the distance of the trip (km): ');\n  readln(distance);\n  \n  writeln('Enter the price of fuel per liter: ');\n  readln(fuelPrice);\n  \n  cost := (distance / fuelEfficiency) * fuelPrice;\n  \n  writeln('The estimated cost of the trip is: ', cost:0:2);\nend.\n```"
  }
]