[
  {
    "task": "Create a function that initializes an array with the first ten prime numbers.",
    "code": "```pascal\nprogram PrimeArray;\n\ntype\n  TIntArray = array[1..10] of Integer;\n\nfunction InitializePrimeArray: TIntArray;\nbegin\n  InitializePrimeArray[1] := 2;\n  InitializePrimeArray[2] := 3;\n  InitializePrimeArray[3] := 5;\n  InitializePrimeArray[4] := 7;\n  InitializePrimeArray[5] := 11;\n  InitializePrimeArray[6] := 13;\n  InitializePrimeArray[7] := 17;\n  InitializePrimeArray[8] := 19;\n  InitializePrimeArray[9] := 23;\n  InitializePrimeArray[10] := 29;\nend;\n\nvar\n  PrimeNumbers: TIntArray;\n  I: Integer;\n\nbegin\n  PrimeNumbers := InitializePrimeArray;\n  for I := 1 to 10 do\n    WriteLn(PrimeNumbers[I]);\nend.\n```"
  },
  {
    "task": "Write a program to reverse the elements of a given array.",
    "code": "```pascal\nprogram ReverseArray;\n\nvar\n  arr: array of Integer;\n  i, n, temp: Integer;\n\nbegin\n  Write('Enter the number of elements: ');\n  ReadLn(n);\n  SetLength(arr, n);\n\n  WriteLn('Enter the elements of the array:');\n  for i := 0 to n - 1 do\n    Read(arr[i]);\n\n  for i := 0 to n div 2 - 1 do\n  begin\n    temp := arr[i];\n    arr[i] := arr[n - i - 1];\n    arr[n - i - 1] := temp;\n  end;\n\n  WriteLn('Reversed array:');\n  for i := 0 to n - 1 do\n    Write(arr[i], ' ');\n  WriteLn;\nend.\n```"
  },
  {
    "task": "Implement an algorithm that finds the maximum value in an array of integers.",
    "code": "```pascal\nprogram FindMaximum;\n\nvar\n  numbers: array[1..100] of Integer;\n  i, n, maxValue: Integer;\n\nbegin\n  { Example: Initialize the array and set n }\n  n := 5;\n  numbers[1] := 3;\n  numbers[2] := 15;\n  numbers[3] := 7;\n  numbers[4] := 9;\n  numbers[5] := 2;\n\n  if n > 0 then\n  begin\n    maxValue := numbers[1];\n    for i := 2 to n do\n    begin\n      if numbers[i] > maxValue then\n        maxValue := numbers[i];\n    end;\n  end;\n\n  WriteLn('The maximum value in the array is: ', maxValue);\nend.\n```"
  },
  {
    "task": "Design a routine to rotate an array to the right by a given number of steps.",
    "code": "```pascal\nprogram RotateArray;\n\ntype\n  TIntArray = array of Integer;\n\nprocedure RotateRight(var arr: TIntArray; steps: Integer);\nvar\n  i, n: Integer;\n  temp: TIntArray;\nbegin\n  n := Length(arr);\n  if n = 0 then Exit;\n\n  steps := steps mod n;\n  SetLength(temp, steps);\n\n  for i := 0 to steps - 1 do\n    temp[i] := arr[n - steps + i];\n\n  for i := n - 1 downto steps do\n    arr[i] := arr[i - steps];\n\n  for i := 0 to steps - 1 do\n    arr[i] := temp[i];\nend;\n\nvar\n  arr: TIntArray;\n  i: Integer;\nbegin\n  arr := TIntArray.Create(1, 2, 3, 4, 5);\n  RotateRight(arr, 2);\n\n  for i := 0 to High(arr) do\n    Write(arr[i], ' ');\nend.\n```"
  },
  {
    "task": "Develop a function to merge two sorted arrays into one sorted array.",
    "code": "```pascal\nprogram MergeSortedArrays;\n\ntype\n  TIntArray = array of Integer;\n\nfunction MergeArrays(arr1, arr2: TIntArray): TIntArray;\nvar\n  i, j, k, len1, len2: Integer;\nbegin\n  len1 := Length(arr1);\n  len2 := Length(arr2);\n  SetLength(Result, len1 + len2);\n  i := 0;\n  j := 0;\n  k := 0;\n\n  while (i < len1) and (j < len2) do\n  begin\n    if arr1[i] <= arr2[j] then\n    begin\n      Result[k] := arr1[i];\n      Inc(i);\n    end\n    else\n    begin\n      Result[k] := arr2[j];\n      Inc(j);\n    end;\n    Inc(k);\n  end;\n\n  while i < len1 do\n  begin\n    Result[k] := arr1[i];\n    Inc(i);\n    Inc(k);\n  end;\n\n  while j < len2 do\n  begin\n    Result[k] := arr2[j];\n    Inc(j);\n    Inc(k);\n  end;\nend;\n\nbegin\n  // Example usage:\n  // var arr1, arr2, mergedArr: TIntArray;\n  // arr1 := [1, 3, 5];\n  // arr2 := [2, 4, 6];\n  // mergedArr := MergeArrays(arr1, arr2);\nend.\n```"
  },
  {
    "task": "Create a method to remove duplicate values from an array.",
    "code": "```pascal\nprogram RemoveDuplicates;\n\ntype\n  IntArray = array of Integer;\n\nfunction RemoveDuplicates(arr: IntArray): IntArray;\nvar\n  tempArray: IntArray;\n  i, j, k, n: Integer;\n  isDuplicate: Boolean;\nbegin\n  n := Length(arr);\n  SetLength(tempArray, n);\n  k := 0;\n\n  for i := 0 to n - 1 do\n  begin\n    isDuplicate := False;\n    for j := 0 to k - 1 do\n    begin\n      if arr[i] = tempArray[j] then\n      begin\n        isDuplicate := True;\n        Break;\n      end;\n    end;\n    if not isDuplicate then\n    begin\n      tempArray[k] := arr[i];\n      Inc(k);\n    end;\n  end;\n\n  SetLength(tempArray, k);\n  Result := tempArray;\nend;\n\n// Example usage\nvar\n  originalArray, resultArray: IntArray;\n  i: Integer;\nbegin\n  originalArray := [1, 2, 2, 3, 4, 4, 5];\n  resultArray := RemoveDuplicates(originalArray);\n\n  for i := 0 to Length(resultArray) - 1 do\n  begin\n    Write(resultArray[i], ' ');\n  end;\nend.\n```"
  },
  {
    "task": "Write a script to calculate the sum of all elements in an array.",
    "code": "```pascal\nprogram SumArrayElements;\nvar\n  arr: array[1..5] of Integer;\n  sum, i: Integer;\nbegin\n  arr[1] := 10;\n  arr[2] := 20;\n  arr[3] := 30;\n  arr[4] := 40;\n  arr[5] := 50;\n  \n  sum := 0;\n  for i := 1 to 5 do\n    sum := sum + arr[i];\n    \n  WriteLn('Sum of array elements: ', sum);\nend.\n```"
  },
  {
    "task": "Construct a function that finds the second largest element in an array.",
    "code": "```pascal\nprogram FindSecondLargest;\n\nfunction SecondLargest(arr: array of Integer): Integer;\nvar\n  i, first, second: Integer;\nbegin\n  if Length(arr) < 2 then\n    raise Exception.Create('Array must have at least two elements.');\n\n  first := Low(Integer);\n  second := Low(Integer);\n\n  for i := 0 to High(arr) do\n  begin\n    if arr[i] > first then\n    begin\n      second := first;\n      first := arr[i];\n    end\n    else if (arr[i] > second) and (arr[i] <> first) then\n    begin\n      second := arr[i];\n    end;\n  end;\n\n  if second = Low(Integer) then\n    raise Exception.Create('No second largest element found.');\n  \n  Result := second;\nend;\n\nbegin\n  // Example usage:\n  // var numbers: array of Integer := [10, 20, 4, 45, 99];\n  // WriteLn('Second Largest Element: ', SecondLargest(numbers));\nend.\n```"
  },
  {
    "task": "Design a program to check if an array contains a specific value.",
    "code": "```pascal\nprogram CheckArrayValue;\n\nuses sysutils;\n\nvar\n  numbers: array[1..10] of Integer;\n  i, valueToFind: Integer;\n  found: Boolean;\n\nbegin\n  numbers[1] := 3;\n  numbers[2] := 15;\n  numbers[3] := 7;\n  numbers[4] := 20;\n  numbers[5] := 11;\n  numbers[6] := 8;\n  numbers[7] := 9;\n  numbers[8] := 5;\n  numbers[9] := 13;\n  numbers[10] := 2;\n  \n  write('Enter a value to find: ');\n  readln(valueToFind);\n\n  found := False;\n\n  for i := 1 to 10 do\n    if numbers[i] = valueToFind then\n    begin\n      found := True;\n      Break;\n    end;\n  \n  if found then\n    writeln('Value found in the array.')\n  else\n    writeln('Value not found in the array.');\nend.\n```"
  },
  {
    "task": "Implement a function to sort an array of strings alphabetically.",
    "code": "```pascal\nprogram SortStringArray;\n\ntype\n  TStringArray = array of string;\n\nprocedure SortArray(var arr: TStringArray);\nvar\n  i, j: Integer;\n  temp: string;\nbegin\n  for i := 0 to Length(arr) - 2 do\n    for j := i + 1 to Length(arr) - 1 do\n      if arr[i] > arr[j] then\n      begin\n        temp := arr[i];\n        arr[i] := arr[j];\n        arr[j] := temp;\n      end;\nend;\n\nvar\n  strings: TStringArray;\n  i: Integer;\nbegin\n  strings := TStringArray.Create('banana', 'apple', 'orange', 'grape');\n\n  SortArray(strings);\n\n  for i := 0 to High(strings) do\n    WriteLn(strings[i]);\nend.\n```"
  },
  {
    "task": "Create a method to search for a value in an array using binary search.",
    "code": "```pascal\nprogram BinarySearchExample;\n\nfunction BinarySearch(arr: array of Integer; value: Integer): Integer;\nvar\n  low, high, mid: Integer;\nbegin\n  low := 0;\n  high := High(arr);\n  \n  while low <= high do\n  begin\n    mid := (low + high) div 2;\n    \n    if arr[mid] = value then\n    begin\n      Exit(mid);\n    end\n    else if arr[mid] < value then\n    begin\n      low := mid + 1;\n    end\n    else\n    begin\n      high := mid - 1;\n    end;\n  end;\n  \n  Exit(-1); // Value not found\nend;\n\nvar\n  numbers: array[0..9] of Integer = (1, 3, 5, 7, 9, 11, 13, 15, 17, 19);\n  searchValue, resultIndex: Integer;\nbegin\n  searchValue := 7;\n  resultIndex := BinarySearch(numbers, searchValue);\n  \n  if resultIndex <> -1 then\n    WriteLn('Value found at index: ', resultIndex)\n  else\n    WriteLn('Value not found');\nend.\n```"
  },
  {
    "task": "Write a routine to calculate the average of numbers in an array.",
    "code": "```pascal\nprogram AverageOfArray;\n\nfunction CalculateAverage(arr: array of Real): Real;\nvar\n  sum: Real;\n  i: Integer;\nbegin\n  sum := 0.0;\n  for i := 0 to High(arr) do\n    sum := sum + arr[i];\n  if Length(arr) = 0 then\n    CalculateAverage := 0.0\n  else\n    CalculateAverage := sum / Length(arr);\nend;\n\nvar\n  numbers: array[1..5] of Real = (10.0, 20.0, 30.0, 40.0, 50.0);\n  average: Real;\nbegin\n  average := CalculateAverage(numbers);\n  WriteLn('The average is: ', average:0:2);\nend.\n```"
  },
  {
    "task": "Develop a function to find the intersection of two arrays.",
    "code": "```pascal\nprogram IntersectionArray;\n\ntype\n  TIntArray = array of Integer;\n\nfunction IntersectArrays(arr1, arr2: TIntArray): TIntArray;\nvar\n  i, j, k, len1, len2: Integer;\n  tempArray: TIntArray;\nbegin\n  len1 := Length(arr1);\n  len2 := Length(arr2);\n  SetLength(tempArray, len1);\n  k := 0;\n  \n  for i := 0 to len1 - 1 do\n    for j := 0 to len2 - 1 do\n      if arr1[i] = arr2[j] then\n      begin\n        tempArray[k] := arr1[i];\n        Inc(k);\n        Break;\n      end;\n  \n  SetLength(IntersectArrays, k);\n  for i := 0 to k - 1 do\n    IntersectArrays[i] := tempArray[i];\nend;\n\nvar\n  array1, array2, result: TIntArray;\n  i: Integer;\nbegin\n  array1 := TIntArray.Create(1, 2, 3, 4, 5);\n  array2 := TIntArray.Create(3, 4, 5, 6, 7);\n  result := IntersectArrays(array1, array2);\n  \n  for i := 0 to High(result) do\n    Write(result[i], ' ');\nend.\n```"
  },
  {
    "task": "Implement a method to find the union of two arrays without duplicates.",
    "code": "```pascal\nprogram ArrayUnion;\n\ntype\n  IntArray = array of Integer;\n\nfunction Contains(arr: IntArray; value: Integer): Boolean;\nvar\n  i: Integer;\nbegin\n  for i := 0 to High(arr) do\n    if arr[i] = value then\n    begin\n      Contains := True;\n      Exit;\n    end;\n  Contains := False;\nend;\n\nfunction Union(arr1, arr2: IntArray): IntArray;\nvar\n  i, j: Integer;\n  tempArray: IntArray;\nbegin\n  SetLength(tempArray, Length(arr1) + Length(arr2));\n  j := 0;\n\n  for i := 0 to High(arr1) do\n  begin\n    if not Contains(tempArray, arr1[i]) then\n    begin\n      tempArray[j] := arr1[i];\n      Inc(j);\n    end;\n  end;\n\n  for i := 0 to High(arr2) do\n  begin\n    if not Contains(tempArray, arr2[i]) then\n    begin\n      tempArray[j] := arr2[i];\n      Inc(j);\n    end;\n  end;\n\n  SetLength(tempArray, j);\n  Union := tempArray;\nend;\n\nvar\n  array1, array2, unionArray: IntArray;\n  i: Integer;\nbegin\n  array1 := IntArray.Create(1, 2, 3, 4);\n  array2 := IntArray.Create(3, 4, 5, 6);\n\n  unionArray := Union(array1, array2);\n\n  for i := 0 to High(unionArray) do\n    WriteLn(unionArray[i]);\nend.\n```"
  },
  {
    "task": "Create a program that shifts all zeroes in an array to the end.",
    "code": "```pascal\nprogram ShiftZeroesToEnd;\n\nprocedure ShiftZeroes(var arr: array of Integer);\nvar\n  i, count, n: Integer;\nbegin\n  n := Length(arr);\n  count := 0;\n  \n  for i := 0 to n - 1 do\n  begin\n    if arr[i] <> 0 then\n    begin\n      arr[count] := arr[i];\n      Inc(count);\n    end;\n  end;\n  \n  while count < n do\n  begin\n    arr[count] := 0;\n    Inc(count);\n  end;\nend;\n\nvar\n  myArray: array of Integer;\n  i: Integer;\nbegin\n  myArray := [0, 1, 0, 3, 12];\n  \n  ShiftZeroes(myArray);\n  \n  for i := 0 to High(myArray) do\n  begin\n    Write(myArray[i], ' ');\n  end;\nend.\n```"
  },
  {
    "task": "Write a function to split an array into two parts at a given index.",
    "code": "```pascal\nprogram SplitArray;\n\ntype\n  TIntArray = array of Integer;\n\nprocedure SplitArrayAtIndex(const Arr: TIntArray; Index: Integer; out FirstPart, SecondPart: TIntArray);\nvar\n  I: Integer;\nbegin\n  if (Index < 0) or (Index >= Length(Arr)) then\n  begin\n    SetLength(FirstPart, 0);\n    SetLength(SecondPart, 0);\n    Exit;\n  end;\n\n  SetLength(FirstPart, Index + 1);\n  SetLength(SecondPart, Length(Arr) - Index - 1);\n\n  for I := 0 to Index do\n    FirstPart[I] := Arr[I];\n\n  for I := Index + 1 to High(Arr) do\n    SecondPart[I - Index - 1] := Arr[I];\nend;\n\nvar\n  OriginalArray, Part1, Part2: TIntArray;\n  SplitIndex: Integer;\nbegin\n  { Example Usage }\n  OriginalArray := TIntArray.Create(1, 2, 3, 4, 5);\n  SplitIndex := 2;\n\n  SplitArrayAtIndex(OriginalArray, SplitIndex, Part1, Part2);\n\n  { Part1 will be: [1, 2, 3] }\n  { Part2 will be: [4, 5] }\nend.\n```"
  },
  {
    "task": "Design a script to find all pairs in an array that sum up to a specific target.",
    "code": "```pascal\nprogram FindPairsWithSum;\n\nvar\n  arr: array of Integer;\n  i, j, n, target: Integer;\n\nbegin\n  { Initialize the array and target }\n  arr := [2, 4, 3, 5, 7, 8, 1, 9];\n  target := 10;\n  n := Length(arr);\n\n  { Find pairs }\n  for i := 0 to n - 2 do\n  begin\n    for j := i + 1 to n - 1 do\n    begin\n      if arr[i] + arr[j] = target then\n      begin\n        WriteLn('Pair found: (', arr[i], ', ', arr[j], ')');\n      end;\n    end;\n  end;\nend.\n```"
  },
  {
    "task": "Construct a method to remove all occurrences of a specific value from an array.",
    "code": "```pascal\nprogram RemoveValueFromArray;\n\ntype\n  TIntArray = array of Integer;\n\nfunction RemoveValue(arr: TIntArray; value: Integer): TIntArray;\nvar\n  i, j, count: Integer;\nbegin\n  count := 0;\n  for i := 0 to High(arr) do\n    if arr[i] <> value then\n      Inc(count);\n\n  SetLength(Result, count);\n  j := 0;\n  for i := 0 to High(arr) do\n    if arr[i] <> value then\n    begin\n      Result[j] := arr[i];\n      Inc(j);\n    end;\nend;\n\nvar\n  originalArray, newArray: TIntArray;\n  i: Integer;\nbegin\n  originalArray := TIntArray.Create(1, 2, 3, 4, 2, 5, 2);\n  newArray := RemoveValue(originalArray, 2);\n  \n  for i := 0 to High(newArray) do\n    Write(newArray[i], ' ');\nend.\n```"
  },
  {
    "task": "Write a function to find the longest increasing subsequence in an array.",
    "code": "```pascal\nprogram LongestIncreasingSubsequence;\n\ntype\n  TIntArray = array of Integer;\n\nfunction LongestIncreasingSubsequence(arr: TIntArray): TIntArray;\nvar\n  i, j, n, maxLength, maxIndex: Integer;\n  lengths, previous: array of Integer;\n  lis: TIntArray;\nbegin\n  n := Length(arr);\n  SetLength(lengths, n);\n  SetLength(previous, n);\n\n  for i := 0 to n - 1 do\n  begin\n    lengths[i] := 1;\n    previous[i] := -1;\n    for j := 0 to i - 1 do\n    begin\n      if (arr[j] < arr[i]) and (lengths[j] + 1 > lengths[i]) then\n      begin\n        lengths[i] := lengths[j] + 1;\n        previous[i] := j;\n      end;\n    end;\n  end;\n\n  maxLength := 0;\n  maxIndex := -1;\n  for i := 0 to n - 1 do\n  begin\n    if lengths[i] > maxLength then\n    begin\n      maxLength := lengths[i];\n      maxIndex := i;\n    end;\n  end;\n\n  SetLength(lis, maxLength);\n  i := maxLength - 1;\n  while maxIndex <> -1 do\n  begin\n    lis[i] := arr[maxIndex];\n    Dec(i);\n    maxIndex := previous[maxIndex];\n  end;\n\n  LongestIncreasingSubsequence := lis;\nend;\n\nvar\n  arr, result: TIntArray;\n  i: Integer;\nbegin\n  arr := TIntArray.Create(10, 22, 9, 33, 21, 50, 41, 60, 80);\n  result := LongestIncreasingSubsequence(arr);\n\n  for i := 0 to High(result) do\n    WriteLn(result[i]);\nend.\n```"
  },
  {
    "task": "Develop an algorithm to find the missing number in a sequential array.",
    "code": "```pascal\nprogram FindMissingNumber;\n\nvar\n  arr: array[1..100] of integer;\n  n, i, total, expectedTotal, missing: integer;\n\nbegin\n  { Initialize the array and fill it with a sequence missing one number }\n  n := 10; { Example size }\n  arr[1] := 1;\n  arr[2] := 2;\n  arr[3] := 3;\n  arr[4] := 4;\n  arr[5] := 5;\n  arr[6] := 7;\n  arr[7] := 8;\n  arr[8] := 9;\n  arr[9] := 10;\n  { arr[10] := 11; -- missing number in sequence is 6 }\n\n  { Calculate the total sum of the array }\n  total := 0;\n  for i := 1 to n - 1 do\n    total := total + arr[i];\n\n  { Calculate the expected total for a complete sequence }\n  expectedTotal := n * (n + 1) div 2;\n\n  { Find the missing number }\n  missing := expectedTotal - total;\n\n  { Output the missing number }\n  writeln('The missing number is: ', missing);\nend.\n```"
  },
  {
    "task": "Create a program to find the common elements between two arrays.",
    "code": "```pascal\nprogram FindCommonElements;\n\nvar\n  array1, array2, common: array of Integer;\n  i, j, k, size1, size2: Integer;\n  found: Boolean;\n\nbegin\n  { Example sizes }\n  size1 := 5;\n  size2 := 6;\n  \n  { Set example values for the arrays }\n  SetLength(array1, size1);\n  SetLength(array2, size2);\n  array1 := [1, 2, 3, 4, 5];\n  array2 := [3, 4, 5, 6, 7, 8];\n  \n  SetLength(common, 0);\n  k := 0;\n\n  { Find common elements }\n  for i := 0 to size1 - 1 do\n  begin\n    for j := 0 to size2 - 1 do\n    begin\n      if array1[i] = array2[j] then\n      begin\n        found := False;\n        for k := 0 to Length(common) - 1 do\n        begin\n          if common[k] = array1[i] then\n          begin\n            found := True;\n            Break;\n          end;\n        end;\n        if not found then\n        begin\n          SetLength(common, Length(common) + 1);\n          common[k] := array1[i];\n          Inc(k);\n        end;\n      end;\n    end;\n  end;\n\n  { Output the common elements }\n  for i := 0 to Length(common) - 1 do\n    WriteLn(common[i]);\nend.\n```"
  },
  {
    "task": "Implement a function to move all negative numbers to the beginning of an array.",
    "code": "```pascal\nprogram MoveNegativesToFront;\n\ntype\n  TIntArray = array of Integer;\n\nfunction MoveNegatives(var arr: TIntArray): TIntArray;\nvar\n  i, j, n: Integer;\n  resultArr: TIntArray;\nbegin\n  n := Length(arr);\n  SetLength(resultArr, n);\n  j := 0;\n  \n  for i := 0 to n - 1 do\n    if arr[i] < 0 then\n    begin\n      resultArr[j] := arr[i];\n      Inc(j);\n    end;\n\n  for i := 0 to n - 1 do\n    if arr[i] >= 0 then\n    begin\n      resultArr[j] := arr[i];\n      Inc(j);\n    end;\n\n  MoveNegatives := resultArr;\nend;\n\nvar\n  arr, newArr: TIntArray;\n  i: Integer;\nbegin\n  arr := TIntArray([1, -4, 3, -2, -7, 5, 6]);\n  \n  newArr := MoveNegatives(arr);\n  \n  for i := 0 to High(newArr) do\n    Write(newArr[i], ' ');\nend.\n```"
  },
  {
    "task": "Write a method to check if an array is a palindrome.",
    "code": "```pascal\nprogram CheckPalindrome;\n\nfunction IsPalindrome(arr: array of Integer): Boolean;\nvar\n  i, n: Integer;\nbegin\n  n := Length(arr);\n  for i := 0 to n div 2 - 1 do\n  begin\n    if arr[i] <> arr[n - i - 1] then\n    begin\n      IsPalindrome := False;\n      Exit;\n    end;\n  end;\n  IsPalindrome := True;\nend;\n\nvar\n  testArray: array[0..4] of Integer = (1, 2, 3, 2, 1);\nbegin\n  if IsPalindrome(testArray) then\n    WriteLn('The array is a palindrome.')\n  else\n    WriteLn('The array is not a palindrome.');\nend.\n```"
  },
  {
    "task": "Design a routine to create a new array that is the element-wise sum of two input arrays.",
    "code": "```pascal\nprogram ElementWiseSum;\n\ntype\n  TIntegerArray = array of Integer;\n\nfunction SumArrays(const A, B: TIntegerArray): TIntegerArray;\nvar\n  i, n: Integer;\nbegin\n  n := Length(A);\n  SetLength(Result, n);\n  for i := 0 to n - 1 do\n  begin\n    Result[i] := A[i] + B[i];\n  end;\nend;\n\nvar\n  Array1, Array2, ResultArray: TIntegerArray;\nbegin\n  Array1 := TIntegerArray.Create(1, 2, 3);\n  Array2 := TIntegerArray.Create(4, 5, 6);\n  ResultArray := SumArrays(Array1, Array2);\n  // The ResultArray now contains the element-wise sum: [5, 7, 9]\nend.\n```"
  },
  {
    "task": "Create a function to find the product of all elements in an array, excluding the current element.",
    "code": "```pascal\nprogram ExcludeCurrentElementProduct;\n\ntype\n  TIntArray = array of Integer;\n\nfunction ProductExcludingCurrent(arr: TIntArray): TIntArray;\nvar\n  i, j, n: Integer;\n  product: Integer;\nbegin\n  n := Length(arr);\n  SetLength(Result, n);\n  \n  for i := 0 to n - 1 do\n  begin\n    product := 1;\n    for j := 0 to n - 1 do\n    begin\n      if i <> j then\n        product := product * arr[j];\n    end;\n    Result[i] := product;\n  end;\nend;\n\nvar\n  arr, resultArr: TIntArray;\n  i: Integer;\nbegin\n  arr := TIntArray.Create(1, 2, 3, 4);\n  resultArr := ProductExcludingCurrent(arr);\n  for i := 0 to High(resultArr) do\n    WriteLn('Product excluding element at index ', i, ': ', resultArr[i]);\nend.\n```"
  },
  {
    "task": "Develop a script to remove elements from an array that are smaller than a given threshold.",
    "code": "```pascal\nprogram RemoveElementsBelowThreshold;\n\nuses SysUtils;\n\nvar\n  arr: array of Integer;\n  resultArr: array of Integer;\n  threshold, i, j, n: Integer;\n\nbegin\n  { Example array and threshold }\n  arr := [10, 5, 8, 20, 3, 15];\n  threshold := 10;\n  n := Length(arr);\n  SetLength(resultArr, n);\n\n  j := 0;\n  for i := 0 to n - 1 do\n  begin\n    if arr[i] >= threshold then\n    begin\n      resultArr[j] := arr[i];\n      Inc(j);\n    end;\n  end;\n  \n  SetLength(resultArr, j);\n\n  { Output the resulting array }\n  for i := 0 to j - 1 do\n  begin\n    Write(resultArr[i], ' ');\n  end;\n  \n  WriteLn;\nend.\n```"
  },
  {
    "task": "Implement a method to clone an array without using built-in functions.",
    "code": "```pascal\nprogram CloneArray;\n\ntype\n  TIntegerArray = array of Integer;\n\nfunction CloneArray(original: TIntegerArray): TIntegerArray;\nvar\n  cloned: TIntegerArray;\n  i, len: Integer;\nbegin\n  len := Length(original);\n  SetLength(cloned, len);\n  for i := 0 to len - 1 do\n  begin\n    cloned[i] := original[i];\n  end;\n  Result := cloned;\nend;\n\nvar\n  original, cloned: TIntegerArray;\n  i: Integer;\nbegin\n  SetLength(original, 5);\n  original[0] := 1;\n  original[1] := 2;\n  original[2] := 3;\n  original[3] := 4;\n  original[4] := 5;\n\n  cloned := CloneArray(original);\n\n  for i := 0 to High(cloned) do\n  begin\n    WriteLn(cloned[i]);\n  end;\nend.\n```"
  },
  {
    "task": "Create a program that rotates a 2D array (matrix) 90 degrees clockwise.",
    "code": "```pascal\nprogram RotateMatrix;\n\nconst\n  N = 4; // Assuming a 4x4 matrix for simplicity\n\ntype\n  TMatrix = array[1..N, 1..N] of Integer;\n\nvar\n  Matrix, RotatedMatrix: TMatrix;\n  i, j: Integer;\n\nprocedure Rotate90Clockwise(var A: TMatrix; var B: TMatrix; size: Integer);\nvar\n  x, y: Integer;\nbegin\n  for x := 1 to size do\n    for y := 1 to size do\n      B[y, size - x + 1] := A[x, y];\nend;\n\nbegin\n  // Initialize the matrix with some values\n  for i := 1 to N do\n    for j := 1 to N do\n      Matrix[i, j] := (i - 1) * N + j;\n\n  // Rotate the matrix 90 degrees clockwise\n  Rotate90Clockwise(Matrix, RotatedMatrix, N);\n\n  // Output the rotated matrix\n  for i := 1 to N do\n  begin\n    for j := 1 to N do\n      Write(RotatedMatrix[i, j]:4);\n    Writeln;\n  end;\nend.\n```"
  },
  {
    "task": "Write a function to find the kth smallest element in an unsorted array.",
    "code": "```pascal\nprogram FindKthSmallest;\n\nuses SysUtils;\n\nfunction Partition(var arr: array of Integer; low, high: Integer): Integer;\nvar\n  pivot, i, j, temp: Integer;\nbegin\n  pivot := arr[high];\n  i := low - 1;\n\n  for j := low to high - 1 do\n  begin\n    if arr[j] <= pivot then\n    begin\n      Inc(i);\n      temp := arr[i];\n      arr[i] := arr[j];\n      arr[j] := temp;\n    end;\n  end;\n\n  temp := arr[i + 1];\n  arr[i + 1] := arr[high];\n  arr[high] := temp;\n\n  Result := i + 1;\nend;\n\nfunction QuickSelect(var arr: array of Integer; low, high, k: Integer): Integer;\nvar\n  pivotIndex: Integer;\nbegin\n  if low = high then\n    Exit(arr[low]);\n\n  pivotIndex := Partition(arr, low, high);\n\n  if k = pivotIndex then\n    Exit(arr[k])\n  else if k < pivotIndex then\n    Result := QuickSelect(arr, low, pivotIndex - 1, k)\n  else\n    Result := QuickSelect(arr, pivotIndex + 1, high, k);\nend;\n\nfunction FindKthSmallest(var arr: array of Integer; k: Integer): Integer;\nbegin\n  Result := QuickSelect(arr, 0, High(arr), k - 1);\nend;\n\nvar\n  arr: array of Integer;\n  k, result: Integer;\nbegin\n  arr := [12, 3, 5, 7, 4, 19, 26];\n  k := 3;\n  result := FindKthSmallest(arr, k);\n  WriteLn('The ', k, 'rd smallest element is ', result);\nend.\n```"
  },
  {
    "task": "Design a routine to partition an array into even and odd numbers.",
    "code": "```pascal\nprogram PartitionArray;\n\ntype\n  IntArray = array of Integer;\n\nprocedure PartitionEvenOdd(var arr: IntArray; out evens, odds: IntArray);\nvar\n  i, evenCount, oddCount: Integer;\nbegin\n  evenCount := 0;\n  oddCount := 0;\n  \n  // Count evens and odds\n  for i := 0 to High(arr) do\n  begin\n    if arr[i] mod 2 = 0 then\n      Inc(evenCount)\n    else\n      Inc(oddCount);\n  end;\n  \n  // Set lengths for evens and odds arrays\n  SetLength(evens, evenCount);\n  SetLength(odds, oddCount);\n  \n  evenCount := 0;\n  oddCount := 0;\n\n  // Partition array\n  for i := 0 to High(arr) do\n  begin\n    if arr[i] mod 2 = 0 then\n    begin\n      evens[evenCount] := arr[i];\n      Inc(evenCount);\n    end\n    else\n    begin\n      odds[oddCount] := arr[i];\n      Inc(oddCount);\n    end;\n  end;\nend;\n\nvar\n  numbers, evens, odds: IntArray;\n  i: Integer;\nbegin\n  numbers := IntArray.Create(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n  \n  PartitionEvenOdd(numbers, evens, odds);\n  \n  Write('Evens: ');\n  for i := 0 to High(evens) do\n    Write(evens[i], ' ');\n  Writeln;\n  \n  Write('Odds: ');\n  for i := 0 to High(odds) do\n    Write(odds[i], ' ');\n  Writeln;\nend.\n```"
  },
  {
    "task": "Create a method to merge overlapping intervals in an array.",
    "code": "```pascal\nprogram MergeIntervals;\n\ntype\n  TInterval = record\n    Start, End_: Integer;\n  end;\n\n  TIntervalArray = array of TInterval;\n\nfunction CompareIntervals(A, B: TInterval): Integer;\nbegin\n  if A.Start < B.Start then\n    Result := -1\n  else if A.Start > B.Start then\n    Result := 1\n  else\n    Result := 0;\nend;\n\nprocedure SortIntervals(var Intervals: TIntervalArray);\nvar\n  i, j: Integer;\n  Temp: TInterval;\nbegin\n  for i := Low(Intervals) to High(Intervals) - 1 do\n    for j := i + 1 to High(Intervals) do\n      if CompareIntervals(Intervals[i], Intervals[j]) > 0 then\n      begin\n        Temp := Intervals[i];\n        Intervals[i] := Intervals[j];\n        Intervals[j] := Temp;\n      end;\nend;\n\nfunction MergeIntervals(Intervals: TIntervalArray): TIntervalArray;\nvar\n  Merged: TIntervalArray;\n  i, Len: Integer;\nbegin\n  if Length(Intervals) = 0 then\n  begin\n    SetLength(Merged, 0);\n    Exit(Merged);\n  end;\n\n  SortIntervals(Intervals);\n  SetLength(Merged, Length(Intervals));\n  Merged[0] := Intervals[0];\n  Len := 1;\n\n  for i := 1 to High(Intervals) do\n  begin\n    if Intervals[i].Start <= Merged[Len - 1].End_ then\n    begin\n      if Intervals[i].End_ > Merged[Len - 1].End_ then\n        Merged[Len - 1].End_ := Intervals[i].End_;\n    end\n    else\n    begin\n      Merged[Len] := Intervals[i];\n      Inc(Len);\n    end;\n  end;\n\n  SetLength(Merged, Len);\n  Result := Merged;\nend;\n\nvar\n  Intervals, ResultIntervals: TIntervalArray;\nbegin\n  SetLength(Intervals, 4);\n  Intervals[0].Start := 1; Intervals[0].End_ := 3;\n  Intervals[1].Start := 2; Intervals[1].End_ := 6;\n  Intervals[2].Start := 8; Intervals[2].End_ := 10;\n  Intervals[3].Start := 15; Intervals[3].End_ := 18;\n\n  ResultIntervals := MergeIntervals(Intervals);\nend.\n```"
  },
  {
    "task": "Develop a function to count the frequency of each unique element in an array.",
    "code": "```pascal\nprogram FrequencyCounter;\n\ntype\n  IntegerArray = array of Integer;\n  FrequencyArray = array of record\n    Value: Integer;\n    Count: Integer;\n  end;\n\nfunction CountFrequencies(arr: IntegerArray): FrequencyArray;\nvar\n  i, j, n: Integer;\n  found: Boolean;\nbegin\n  n := Length(arr);\n  SetLength(Result, 0);\n  for i := 0 to n - 1 do\n  begin\n    found := False;\n    for j := 0 to High(Result) do\n    begin\n      if Result[j].Value = arr[i] then\n      begin\n        Inc(Result[j].Count);\n        found := True;\n        Break;\n      end;\n    end;\n    if not found then\n    begin\n      SetLength(Result, Length(Result) + 1);\n      Result[High(Result)].Value := arr[i];\n      Result[High(Result)].Count := 1;\n    end;\n  end;\nend;\n\nvar\n  arr: IntegerArray;\n  freq: FrequencyArray;\n  i: Integer;\nbegin\n  arr := IntegerArray.Create(1, 2, 2, 3, 1, 4, 1, 5);\n  freq := CountFrequencies(arr);\n  \n  for i := 0 to High(freq) do\n  begin\n    WriteLn('Value: ', freq[i].Value, ' Count: ', freq[i].Count);\n  end;\nend.\n```"
  },
  {
    "task": "Write a program to generate all possible subsets of an array.",
    "code": "```pascal\nprogram GenerateSubsets;\nuses SysUtils;\n\nprocedure PrintSubset(subset: array of Integer; size: Integer);\nvar\n  i: Integer;\nbegin\n  Write('{');\n  for i := 0 to size - 1 do\n  begin\n    Write(subset[i]);\n    if i < size - 1 then\n      Write(', ');\n  end;\n  Writeln('}');\nend;\n\nprocedure GenerateAllSubsets(arr: array of Integer; n: Integer);\nvar\n  subset: array of Integer;\n  i, j: Integer;\nbegin\n  SetLength(subset, n);\n  for i := 0 to (1 shl n) - 1 do\n  begin\n    j := 0;\n    for j := 0 to n - 1 do\n    begin\n      if (i and (1 shl j)) <> 0 then\n      begin\n        subset[j] := arr[j];\n      end\n      else\n      begin\n        subset[j] := 0;\n      end;\n    end;\n    PrintSubset(subset, n);\n  end;\nend;\n\nvar\n  arr: array of Integer;\nbegin\n  arr := [1, 2, 3];\n  GenerateAllSubsets(arr, Length(arr));\nend.\n```"
  },
  {
    "task": "Implement a routine to cyclically permute the elements of an array.",
    "code": "```pascal\nprogram CyclicPermuteArray;\n\ntype\n    TIntArray = array of Integer;\n\nprocedure CyclicPermute(var arr: TIntArray);\nvar\n    i, n, temp: Integer;\nbegin\n    n := Length(arr);\n    if n < 2 then\n        Exit;\n    \n    temp := arr[n - 1];\n    for i := n - 1 downto 1 do\n        arr[i] := arr[i - 1];\n    arr[0] := temp;\nend;\n\nvar\n    myArray: TIntArray;\n    i: Integer;\nbegin\n    myArray := TIntArray.Create(1, 2, 3, 4, 5);\n    CyclicPermute(myArray);\n    \n    for i := 0 to High(myArray) do\n        Write(myArray[i], ' ');\n    WriteLn;\nend.\n```"
  },
  {
    "task": "Create a function that checks if two arrays are equal regardless of element order.",
    "code": "```pascal\nprogram CheckArrayEquality;\n\nuses\n  SysUtils;\n\nfunction ArraysEqualUnordered(arr1, arr2: array of Integer): Boolean;\nvar\n  i, j: Integer;\n  count1, count2: array of Integer;\nbegin\n  if Length(arr1) <> Length(arr2) then\n  begin\n    Result := False;\n    Exit;\n  end;\n\n  SetLength(count1, Length(arr1));\n  SetLength(count2, Length(arr2));\n\n  for i := Low(arr1) to High(arr1) do\n  begin\n    for j := Low(arr1) to High(arr1) do\n    begin\n      if arr1[i] = arr1[j] then\n        Inc(count1[i]);\n      if arr1[i] = arr2[j] then\n        Inc(count2[i]);\n    end;\n  end;\n\n  for i := Low(count1) to High(count1) do\n  begin\n    if count1[i] <> count2[i] then\n    begin\n      Result := False;\n      Exit;\n    end;\n  end;\n\n  Result := True;\nend;\n\nvar\n  arr1, arr2: array of Integer;\nbegin\n  arr1 := [1, 2, 3, 4];\n  arr2 := [4, 3, 2, 1];\n  \n  if ArraysEqualUnordered(arr1, arr2) then\n    WriteLn('Arrays are equal.')\n  else\n    WriteLn('Arrays are not equal.');\nend.\n```"
  },
  {
    "task": "Design a script to initialize an array with random integers within a specified range.",
    "code": "```pascal\nprogram InitializeArrayWithRandomIntegers;\nuses SysUtils;\n\nconst\n  ArraySize = 10;\n  MinValue = 1;\n  MaxValue = 100;\n\nvar\n  MyArray: array[1..ArraySize] of Integer;\n  i: Integer;\nbegin\n  Randomize;\n  for i := 1 to ArraySize do\n    MyArray[i] := Random(MaxValue - MinValue + 1) + MinValue;\n\n  for i := 1 to ArraySize do\n    WriteLn('Element ', i, ': ', MyArray[i]);\nend.\n```"
  },
  {
    "task": "Write a method to convert an array of integers to a single concatenated number.",
    "code": "```pascal\nprogram ConcatArrayToNumber;\n\nuses\n  SysUtils;\n\nfunction ConcatArrayToNumber(arr: array of Integer): Int64;\nvar\n  strBuilder: string;\n  i: Integer;\nbegin\n  strBuilder := '';\n  for i := Low(arr) to High(arr) do\n  begin\n    strBuilder := strBuilder + IntToStr(arr[i]);\n  end;\n  Result := StrToInt64(strBuilder);\nend;\n\nvar\n  myArray: array of Integer;\n  resultNumber: Int64;\nbegin\n  myArray := [1, 2, 3, 4, 5];\n  resultNumber := ConcatArrayToNumber(myArray);\n  WriteLn(resultNumber);\nend.\n```"
  },
  {
    "task": "Develop a function to find the median value of an unsorted array.",
    "code": "```pascal\nprogram FindMedian;\n\nuses\n  SysUtils;\n\nfunction Partition(var A: array of Integer; low, high: Integer): Integer;\nvar\n  pivot, i, j, temp: Integer;\nbegin\n  pivot := A[high];\n  i := low - 1;\n  for j := low to high - 1 do\n  begin\n    if A[j] <= pivot then\n    begin\n      Inc(i);\n      temp := A[i];\n      A[i] := A[j];\n      A[j] := temp;\n    end;\n  end;\n  temp := A[i + 1];\n  A[i + 1] := A[high];\n  A[high] := temp;\n  Result := i + 1;\nend;\n\nprocedure QuickSort(var A: array of Integer; low, high: Integer);\nvar\n  pi: Integer;\nbegin\n  if low < high then\n  begin\n    pi := Partition(A, low, high);\n    QuickSort(A, low, pi - 1);\n    QuickSort(A, pi + 1, high);\n  end;\nend;\n\nfunction FindMedian(var A: array of Integer): Real;\nvar\n  n: Integer;\nbegin\n  n := Length(A);\n  QuickSort(A, 0, n - 1);\n  if n mod 2 = 0 then\n    Result := (A[n div 2 - 1] + A[n div 2]) / 2\n  else\n    Result := A[n div 2];\nend;\n\nvar\n  arr: array of Integer;\n  median: Real;\nbegin\n  arr := [5, 3, 8, 1, 2];\n  median := FindMedian(arr);\n  WriteLn('Median: ', median:0:2);\nend.\n```"
  },
  {
    "task": "Create a routine to determine if an array is sorted in ascending order.",
    "code": "```pascal\nprogram CheckSortedArray;\n\ntype\n  TIntArray = array of Integer;\n\nfunction IsSortedAscending(arr: TIntArray): Boolean;\nvar\n  i: Integer;\nbegin\n  for i := 0 to High(arr) - 1 do\n  begin\n    if arr[i] > arr[i + 1] then\n    begin\n      IsSortedAscending := False;\n      Exit;\n    end;\n  end;\n  IsSortedAscending := True;\nend;\n\nvar\n  arr: TIntArray;\n  result: Boolean;\nbegin\n  arr := TIntArray.Create(1, 2, 3, 4, 5);\n  result := IsSortedAscending(arr);\n  WriteLn('Array is sorted: ', result);\nend.\n```"
  },
  {
    "task": "Implement a method to find the longest contiguous subarray with equal number of 0s and 1s.",
    "code": "```pascal\nprogram LongestContiguousSubarray;\n\nuses SysUtils;\n\nfunction LongestSubarray(arr: array of Integer): Integer;\nvar\n  sumIndexMap: array of Integer;\n  sum, maxLength, i: Integer;\nbegin\n  SetLength(sumIndexMap, Length(arr) * 2 + 1);\n\n  for i := Low(sumIndexMap) to High(sumIndexMap) do\n    sumIndexMap[i] := -2;\n\n  sumIndexMap[Length(arr)] := -1;\n  sum := 0;\n  maxLength := 0;\n\n  for i := 0 to High(arr) do\n  begin\n    if arr[i] = 0 then\n      sum := sum - 1\n    else\n      sum := sum + 1;\n\n    if sumIndexMap[sum + Length(arr)] >= -1 then\n    begin\n      if i - sumIndexMap[sum + Length(arr)] > maxLength then\n        maxLength := i - sumIndexMap[sum + Length(arr)];\n    end\n    else\n      sumIndexMap[sum + Length(arr)] := i;\n  end;\n\n  LongestSubarray := maxLength;\nend;\n\nvar\n  arr: array of Integer;\nbegin\n  arr := [0, 1, 0, 1, 0, 1, 1, 0];\n  WriteLn('Length of longest subarray: ', LongestSubarray(arr));\nend.\n```"
  },
  {
    "task": "Write a function to interleave two arrays of equal length.",
    "code": "```pascal\nprogram InterleaveArrays;\n\ntype\n  TIntArray = array of Integer;\n\nfunction Interleave(arr1, arr2: TIntArray): TIntArray;\nvar\n  i, n: Integer;\nbegin\n  n := Length(arr1);\n  SetLength(Result, 2 * n);\n  for i := 0 to n - 1 do\n  begin\n    Result[2 * i] := arr1[i];\n    Result[2 * i + 1] := arr2[i];\n  end;\nend;\n\nvar\n  arr1, arr2, resultArray: TIntArray;\n  i: Integer;\nbegin\n  arr1 := TIntArray.Create(1, 3, 5);\n  arr2 := TIntArray.Create(2, 4, 6);\n  resultArray := Interleave(arr1, arr2);\n  \n  for i := 0 to High(resultArray) do\n    Write(resultArray[i], ' ');\nend.\n```"
  },
  {
    "task": "Design a program to replace each element in an array with the next greatest element.",
    "code": "```pascal\nprogram NextGreatestElement;\n\nconst\n  MAX = 100;\n\nvar\n  arr: array[1..MAX] of Integer;\n  n, i, j, max: Integer;\n\nbegin\n  Write('Enter the number of elements in the array: ');\n  ReadLn(n);\n\n  Write('Enter ', n, ' elements: ');\n  for i := 1 to n do\n    Read(arr[i]);\n\n  for i := 1 to n - 1 do\n  begin\n    max := arr[i + 1];\n    for j := i + 1 to n do\n    begin\n      if arr[j] > max then\n        max := arr[j];\n    end;\n    arr[i] := max;\n  end;\n\n  arr[n] := -1;\n\n  Write('The transformed array is: ');\n  for i := 1 to n do\n    Write(arr[i], ' ');\n\n  WriteLn;\nend.\n```"
  },
  {
    "task": "Create a function to calculate the dot product of two numeric arrays.",
    "code": "```pascal\nprogram DotProduct;\n\nfunction CalculateDotProduct(arr1, arr2: array of Integer): Integer;\nvar\n  i, result: Integer;\nbegin\n  result := 0;\n  if Length(arr1) = Length(arr2) then\n  begin\n    for i := 0 to High(arr1) do\n    begin\n      result := result + (arr1[i] * arr2[i]);\n    end;\n  end;\n  CalculateDotProduct := result;\nend;\n\nvar\n  array1, array2: array of Integer;\n  dotProduct: Integer;\nbegin\n  SetLength(array1, 3);\n  SetLength(array2, 3);\n  \n  array1[0] := 1;\n  array1[1] := 2;\n  array1[2] := 3;\n\n  array2[0] := 4;\n  array2[1] := 5;\n  array2[2] := 6;\n\n  dotProduct := CalculateDotProduct(array1, array2);\n  WriteLn('Dot Product: ', dotProduct);\nend.\n```"
  },
  {
    "task": "Develop a script to find the first recurring element in an array.",
    "code": "```pascal\nprogram FindFirstRecurringElement;\n\nuses SysUtils;\n\nvar\n  arr: array of Integer;\n  i, n, current: Integer;\n  found: Boolean;\n  seen: array of Boolean;\nbegin\n  // Example array\n  arr := [2, 5, 1, 2, 3, 5, 1, 2, 4];\n  n := Length(arr);\n  SetLength(seen, 1000); // Adjust size if necessary\n  found := False;\n\n  for i := 0 to n - 1 do\n  begin\n    current := arr[i];\n    if seen[current] then\n    begin\n      WriteLn('First recurring element: ', current);\n      found := True;\n      Break;\n    end;\n    seen[current] := True;\n  end;\n\n  if not found then\n    WriteLn('No recurring element found.');\nend.\n```"
  },
  {
    "task": "Write a method to check if an array is a subset of another array.",
    "code": "```pascal\nprogram ArraySubsetCheck;\n\nfunction IsSubset(arr1, arr2: array of Integer): Boolean;\nvar\n  i, j: Integer;\n  found: Boolean;\nbegin\n  for i := Low(arr1) to High(arr1) do\n  begin\n    found := False;\n    for j := Low(arr2) to High(arr2) do\n    begin\n      if arr1[i] = arr2[j] then\n      begin\n        found := True;\n        Break;\n      end;\n    end;\n    if not found then\n    begin\n      IsSubset := False;\n      Exit;\n    end;\n  end;\n  IsSubset := True;\nend;\n\nvar\n  A, B: array of Integer;\n  result: Boolean;\nbegin\n  A := [1, 2, 3];\n  B := [2, 3, 1, 4, 5];\n  result := IsSubset(A, B);\n  if result then\n    WriteLn('A is a subset of B')\n  else\n    WriteLn('A is not a subset of B');\nend.\n```"
  },
  {
    "task": "Implement a function to add a specific value to each element in an array.",
    "code": "```pascal\nprogram AddValueToArray;\n\ntype\n  TIntArray = array of Integer;\n\nfunction AddValueToEachElement(arr: TIntArray; value: Integer): TIntArray;\nvar\n  i: Integer;\nbegin\n  SetLength(Result, Length(arr));\n  for i := 0 to High(arr) do\n  begin\n    Result[i] := arr[i] + value;\n  end;\nend;\n\nvar\n  originalArray, modifiedArray: TIntArray;\n  i: Integer;\nbegin\n  originalArray := [1, 2, 3, 4, 5];\n  modifiedArray := AddValueToEachElement(originalArray, 10);\n  for i := 0 to High(modifiedArray) do\n  begin\n    WriteLn(modifiedArray[i]);\n  end;\nend.\n```"
  },
  {
    "task": "Create a program that finds the largest product of three numbers in an array.",
    "code": "```pascal\nprogram LargestProductOfThree;\n\nvar\n  arr: array of Integer;\n  n, i, max1, max2, max3, min1, min2, size, product1, product2, largestProduct: Integer;\n\nbegin\n  { Example array, can be replaced with any integer array }\n  arr := [10, 3, 5, 6, 20];\n  size := Length(arr);\n\n  if size < 3 then\n  begin\n    WriteLn('Array must have at least three elements.');\n    Exit;\n  end;\n\n  max1 := -MaxInt;\n  max2 := -MaxInt;\n  max3 := -MaxInt;\n  min1 := MaxInt;\n  min2 := MaxInt;\n\n  for i := 0 to size - 1 do\n  begin\n    if arr[i] > max1 then\n    begin\n      max3 := max2;\n      max2 := max1;\n      max1 := arr[i];\n    end\n    else if arr[i] > max2 then\n    begin\n      max3 := max2;\n      max2 := arr[i];\n    end\n    else if arr[i] > max3 then\n    begin\n      max3 := arr[i];\n    end;\n\n    if arr[i] < min1 then\n    begin\n      min2 := min1;\n      min1 := arr[i];\n    end\n    else if arr[i] < min2 then\n    begin\n      min2 := arr[i];\n    end;\n  end;\n\n  product1 := max1 * max2 * max3;\n  product2 := min1 * min2 * max1;\n\n  if product1 > product2 then\n    largestProduct := product1\n  else\n    largestProduct := product2;\n\n  WriteLn('The largest product of three numbers in the array is: ', largestProduct);\nend.\n```"
  },
  {
    "task": "Design a routine to find all unique permutations of an array.",
    "code": "```pascal\nprogram UniquePermutations;\n\ntype\n  TIntArray = array of Integer;\n\nprocedure Swap(var a, b: Integer);\nvar\n  temp: Integer;\nbegin\n  temp := a;\n  a := b;\n  b := temp;\nend;\n\nprocedure FindPermutations(var arr: TIntArray; left, right: Integer);\nvar\n  i: Integer;\nbegin\n  if left = right then\n  begin\n    for i := 0 to High(arr) do\n      Write(arr[i], ' ');\n    Writeln;\n  end\n  else\n  begin\n    for i := left to right do\n    begin\n      Swap(arr[left], arr[i]);\n      FindPermutations(arr, left + 1, right);\n      Swap(arr[left], arr[i]);\n    end;\n  end;\nend;\n\nprocedure SortArray(var arr: TIntArray);\nvar\n  i, j, minIdx: Integer;\nbegin\n  for i := 0 to High(arr) - 1 do\n  begin\n    minIdx := i;\n    for j := i + 1 to High(arr) do\n      if arr[j] < arr[minIdx] then\n        minIdx := j;\n    Swap(arr[i], arr[minIdx]);\n  end;\nend;\n\nfunction AreArraysEqual(arr1, arr2: TIntArray): Boolean;\nvar\n  i: Integer;\nbegin\n  if Length(arr1) <> Length(arr2) then\n    Exit(False);\n  for i := 0 to High(arr1) do\n    if arr1[i] <> arr2[i] then\n      Exit(False);\n  Exit(True);\nend;\n\nprocedure UniquePermutations(var arr: TIntArray);\nvar\n  result: array of TIntArray;\n  count, i, j: Integer;\n  isUnique: Boolean;\nbegin\n  SortArray(arr);\n  count := 0;\n  SetLength(result, 0);\n  FindPermutations(arr, 0, High(arr));\n  for i := 0 to High(result) do\n  begin\n    isUnique := True;\n    for j := 0 to i - 1 do\n    begin\n      if AreArraysEqual(result[i], result[j]) then\n      begin\n        isUnique := False;\n        Break;\n      end;\n    end;\n    if isUnique then\n    begin\n      for j := 0 to High(result[i]) do\n        Write(result[i][j], ' ');\n      Writeln;\n    end;\n  end;\nend;\n\nvar\n  arr: TIntArray;\nbegin\n  arr := TIntArray.Create(1, 2, 3);\n  UniquePermutations(arr);\nend.\n```"
  },
  {
    "task": "Write a function to transpose a square matrix represented as a 2D array.",
    "code": "```pascal\nprogram TransposeMatrix;\n\ntype\n  TMatrix = array of array of Integer;\n\nfunction Transpose(const A: TMatrix): TMatrix;\nvar\n  i, j, n: Integer;\n  ResultMatrix: TMatrix;\nbegin\n  n := Length(A);\n  SetLength(ResultMatrix, n, n);\n  \n  for i := 0 to n - 1 do\n    for j := 0 to n - 1 do\n      ResultMatrix[j][i] := A[i][j];\n  \n  Transpose := ResultMatrix;\nend;\n\nvar\n  Matrix, Transposed: TMatrix;\n  i, j: Integer;\nbegin\n  // Example usage:\n  SetLength(Matrix, 3, 3);\n  Matrix[0][0] := 1; Matrix[0][1] := 2; Matrix[0][2] := 3;\n  Matrix[1][0] := 4; Matrix[1][1] := 5; Matrix[1][2] := 6;\n  Matrix[2][0] := 7; Matrix[2][1] := 8; Matrix[2][2] := 9;\n\n  Transposed := Transpose(Matrix);\n\n  for i := 0 to High(Transposed) do\n  begin\n    for j := 0 to High(Transposed[i]) do\n      Write(Transposed[i][j], ' ');\n    Writeln;\n  end;\nend.\n```"
  },
  {
    "task": "Develop a method to find the longest common prefix in an array of strings.",
    "code": "```pascal\nprogram LongestCommonPrefix;\n\nuses\n  SysUtils;\n\nfunction LongestCommonPrefix(strings: array of string): string;\nvar\n  i, j, minLen: Integer;\n  prefix: string;\nbegin\n  if Length(strings) = 0 then\n  begin\n    Result := '';\n    Exit;\n  end;\n\n  minLen := Length(strings[0]);\n  for i := 1 to High(strings) do\n    if Length(strings[i]) < minLen then\n      minLen := Length(strings[i]);\n\n  prefix := '';\n  for i := 1 to minLen do\n  begin\n    for j := 1 to High(strings) do\n      if strings[j][i] <> strings[0][i] then\n      begin\n        Result := prefix;\n        Exit;\n      end;\n    prefix := prefix + strings[0][i];\n  end;\n  Result := prefix;\nend;\n\nvar\n  strings: array of string;\n  result: string;\nbegin\n  SetLength(strings, 3);\n  strings[0] := 'flower';\n  strings[1] := 'flow';\n  strings[2] := 'flight';\n  \n  result := LongestCommonPrefix(strings);\n  WriteLn('Longest common prefix: ', result);\nend.\n```"
  },
  {
    "task": "Implement a function to flatten a multi-dimensional array into a single array.",
    "code": "```pascal\nprogram FlattenArray;\n\ntype\n  TArray2D = array of array of Integer;\n  TArray1D = array of Integer;\n\nfunction FlattenArray(arr: TArray2D): TArray1D;\nvar\n  i, j, index, totalLength: Integer;\nbegin\n  totalLength := 0;\n  for i := Low(arr) to High(arr) do\n    totalLength := totalLength + Length(arr[i]);\n\n  SetLength(Result, totalLength);\n  index := 0;\n\n  for i := Low(arr) to High(arr) do\n    for j := Low(arr[i]) to High(arr[i]) do\n    begin\n      Result[index] := arr[i][j];\n      Inc(index);\n    end;\nend;\n\nvar\n  multiArray: TArray2D;\n  flatArray: TArray1D;\n  i: Integer;\nbegin\n  SetLength(multiArray, 2);\n  SetLength(multiArray[0], 3);\n  SetLength(multiArray[1], 2);\n\n  multiArray[0][0] := 1;\n  multiArray[0][1] := 2;\n  multiArray[0][2] := 3;\n  multiArray[1][0] := 4;\n  multiArray[1][1] := 5;\n\n  flatArray := FlattenArray(multiArray);\n\n  for i := Low(flatArray) to High(flatArray) do\n    Write(flatArray[i], ' ');\nend.\n```"
  },
  {
    "task": "Create a script to shift elements of an array to the left by a given number of positions.",
    "code": "```pascal\nprogram ShiftArrayLeft;\n\nconst\n  MaxSize = 100;\n\ntype\n  TArray = array[1..MaxSize] of Integer;\n\nvar\n  arr: TArray;\n  n, i, shift: Integer;\n\nprocedure LeftShift(var a: TArray; size, positions: Integer);\nvar\n  temp: TArray;\n  i, newPos: Integer;\nbegin\n  for i := 1 to size do\n    temp[i] := a[i];\n  for i := 1 to size do\n  begin\n    newPos := ((i - 1 - positions + size) mod size) + 1;\n    a[newPos] := temp[i];\n  end;\nend;\n\nbegin\n  n := 10; // Example size of array\n  shift := 3; // Example number of positions to shift\n\n  // Initialize the array with some values\n  for i := 1 to n do\n    arr[i] := i;\n\n  LeftShift(arr, n, shift);\n\n  // Output the shifted array\n  for i := 1 to n do\n    Write(arr[i], ' ');\n  Writeln;\nend.\n```"
  },
  {
    "task": "Write a routine to sort an array of objects based on a specific property.",
    "code": "```pascal\nprogram SortObjects;\n\ntype\n  TObjectType = record\n    Key: Integer;\n    Value: String;\n  end;\n\nvar\n  ObjectArray: array of TObjectType;\n  i, j, n: Integer;\n  Temp: TObjectType;\n\nprocedure SortArray(var arr: array of TObjectType);\nvar\n  i, j: Integer;\n  Temp: TObjectType;\nbegin\n  for i := 0 to High(arr) - 1 do\n    for j := 0 to High(arr) - i - 1 do\n      if arr[j].Key > arr[j + 1].Key then\n      begin\n        Temp := arr[j];\n        arr[j] := arr[j + 1];\n        arr[j + 1] := Temp;\n      end;\nend;\n\nbegin\n  n := 5;\n  SetLength(ObjectArray, n);\n  \n  ObjectArray[0].Key := 5; ObjectArray[0].Value := 'Object 5';\n  ObjectArray[1].Key := 2; ObjectArray[1].Value := 'Object 2';\n  ObjectArray[2].Key := 4; ObjectArray[2].Value := 'Object 4';\n  ObjectArray[3].Key := 3; ObjectArray[3].Value := 'Object 3';\n  ObjectArray[4].Key := 1; ObjectArray[4].Value := 'Object 1';\n\n  SortArray(ObjectArray);\n\n  for i := 0 to High(ObjectArray) do\n    WriteLn('Key: ', ObjectArray[i].Key, ', Value: ', ObjectArray[i].Value);\nend.\n```"
  },
  {
    "task": "Design a program to find the smallest missing positive integer in an array.",
    "code": "```pascal\nprogram SmallestMissingPositive;\n\nfunction SmallestMissingPositive(arr: array of Integer): Integer;\nvar\n  i, n, smallestMissing: Integer;\n  found: Boolean;\nbegin\n  n := Length(arr);\n  smallestMissing := 1;\n  \n  while true do\n  begin\n    found := False;\n    for i := 0 to n - 1 do\n    begin\n      if arr[i] = smallestMissing then\n      begin\n        found := True;\n        Break;\n      end;\n    end;\n    if not found then\n      Break;\n    Inc(smallestMissing);\n  end;\n  \n  Result := smallestMissing;\nend;\n\nvar\n  arr: array of Integer;\n  result: Integer;\nbegin\n  arr := [3, 4, -1, 1];\n  result := SmallestMissingPositive(arr);\n  WriteLn('Smallest missing positive integer: ', result);\nend.\n```"
  },
  {
    "task": "Create a function to calculate the cumulative sum of an array.",
    "code": "```pascal\nprogram CumulativeSumArray;\n\ntype\n  TIntArray = array of Integer;\n\nfunction CumulativeSum(arr: TIntArray): TIntArray;\nvar\n  i: Integer;\nbegin\n  SetLength(Result, Length(arr));\n  if Length(arr) = 0 then Exit;\n  \n  Result[0] := arr[0];\n  for i := 1 to High(arr) do\n    Result[i] := Result[i - 1] + arr[i];\nend;\n\nvar\n  inputArray, resultArray: TIntArray;\n  i: Integer;\nbegin\n  inputArray := TIntArray.Create(1, 2, 3, 4, 5);\n  resultArray := CumulativeSum(inputArray);\n  \n  for i := 0 to High(resultArray) do\n    WriteLn(resultArray[i]);\nend.\n```"
  },
  {
    "task": "Develop a function to remove consecutive duplicate elements in an array.",
    "code": "```pascal\nprogram RemoveConsecutiveDuplicates;\n\ntype\n  TIntArray = array of Integer;\n\nfunction RemoveDuplicates(arr: TIntArray): TIntArray;\nvar\n  i, j, n: Integer;\nbegin\n  n := Length(arr);\n  if n = 0 then\n  begin\n    SetLength(Result, 0);\n    Exit;\n  end;\n\n  SetLength(Result, n);\n  Result[0] := arr[0];\n  j := 1;\n\n  for i := 1 to n - 1 do\n  begin\n    if arr[i] <> arr[i - 1] then\n    begin\n      Result[j] := arr[i];\n      Inc(j);\n    end;\n  end;\n\n  SetLength(Result, j);\nend;\n\nvar\n  inputArray, outputArray: TIntArray;\n  i: Integer;\nbegin\n  inputArray := TIntArray.Create(1, 1, 2, 2, 3, 3, 3, 4, 4, 5);\n  outputArray := RemoveDuplicates(inputArray);\n\n  for i := 0 to High(outputArray) do\n    Write(outputArray[i], ' ');\nend.\n```"
  },
  {
    "task": "Implement a method to find the majority element in an array, if any.",
    "code": "```pascal\nprogram FindMajorityElement;\n\nuses sysutils;\n\nfunction FindMajorityElement(arr: array of Integer): Integer;\nvar\n  candidate, count, i: Integer;\nbegin\n  candidate := -1;\n  count := 0;\n\n  // Find candidate for majority element\n  for i := 0 to High(arr) do\n  begin\n    if count = 0 then\n    begin\n      candidate := arr[i];\n      count := 1;\n    end\n    else if arr[i] = candidate then\n      Inc(count)\n    else\n      Dec(count);\n  end;\n\n  // Verify if candidate is actually the majority element\n  count := 0;\n  for i := 0 to High(arr) do\n  begin\n    if arr[i] = candidate then\n      Inc(count);\n  end;\n\n  if count > Length(arr) div 2 then\n    Result := candidate\n  else\n    Result := -1;\nend;\n\nvar\n  arr: array of Integer;\n  majorityElement: Integer;\nbegin\n  arr := [2, 3, 9, 2, 2];\n  majorityElement := FindMajorityElement(arr);\n  if majorityElement <> -1 then\n    WriteLn('The majority element is: ', majorityElement)\n  else\n    WriteLn('There is no majority element.');\nend.\n```"
  },
  {
    "task": "Write a script to split an array into chunks of a given size.",
    "code": "```pascal\nprogram SplitArrayIntoChunks;\n\ntype\n  TIntArray = array of Integer;\n  TArrayOfIntArray = array of TIntArray;\n\nfunction SplitArray(const arr: TIntArray; chunkSize: Integer): TArrayOfIntArray;\nvar\n  resultArray: TArrayOfIntArray;\n  i, j, arrLength, numChunks: Integer;\nbegin\n  arrLength := Length(arr);\n  if chunkSize <= 0 then\n  begin\n    SetLength(resultArray, 0);\n    Exit(resultArray);\n  end;\n  \n  numChunks := (arrLength + chunkSize - 1) div chunkSize;\n  SetLength(resultArray, numChunks);\n\n  for i := 0 to numChunks - 1 do\n  begin\n    SetLength(resultArray[i], chunkSize);\n    for j := 0 to chunkSize - 1 do\n    begin\n      if (i * chunkSize + j) < arrLength then\n        resultArray[i][j] := arr[i * chunkSize + j]\n      else\n        break;\n    end;\n    SetLength(resultArray[i], j);\n  end;\n  \n  Result := resultArray;\nend;\n\nvar\n  myArray: TIntArray;\n  chunks: TArrayOfIntArray;\n  i, j: Integer;\nbegin\n  myArray := [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n  chunks := SplitArray(myArray, 3);\n\n  for i := 0 to High(chunks) do\n  begin\n    for j := 0 to High(chunks[i]) do\n      Write(chunks[i][j], ' ');\n    Writeln;\n  end;\nend.\n```"
  },
  {
    "task": "Create a program to calculate the difference between the largest and smallest values in an array.",
    "code": "```pascal\nprogram DifferenceArray;\n\nconst\n  MAX = 100;\n\nvar\n  arr: array[1..MAX] of Integer;\n  n, i, maxVal, minVal, diff: Integer;\n\nbegin\n  Write('Enter the number of elements: ');\n  ReadLn(n);\n\n  for i := 1 to n do\n  begin\n    Write('Enter element ', i, ': ');\n    ReadLn(arr[i]);\n  end;\n\n  maxVal := arr[1];\n  minVal := arr[1];\n\n  for i := 2 to n do\n  begin\n    if arr[i] > maxVal then\n      maxVal := arr[i];\n    if arr[i] < minVal then\n      minVal := arr[i];\n  end;\n\n  diff := maxVal - minVal;\n  WriteLn('The difference between the largest and smallest values is: ', diff);\nend.\n```"
  },
  {
    "task": "Design a routine to find the starting index of a target subarray in a larger array.",
    "code": "```pascal\nprogram FindSubarrayIndex;\n\nfunction FindSubarrayStartIndex(arr, subarr: array of Integer): Integer;\nvar\n  i, j, start, n, m: Integer;\n  found: Boolean;\nbegin\n  n := Length(arr);\n  m := Length(subarr);\n  for i := 0 to n - m do\n  begin\n    found := True;\n    for j := 0 to m - 1 do\n    begin\n      if arr[i + j] <> subarr[j] then\n      begin\n        found := False;\n        Break;\n      end;\n    end;\n    if found then\n    begin\n      FindSubarrayStartIndex := i;\n      Exit;\n    end;\n  end;\n  FindSubarrayStartIndex := -1;\nend;\n\nvar\n  arr, subarr: array of Integer;\n  index: Integer;\nbegin\n  arr := [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  subarr := [4, 5, 6];\n  index := FindSubarrayStartIndex(arr, subarr);\n  WriteLn('Starting index: ', index);\nend.\n```"
  },
  {
    "task": "Write a function to compress an array by eliminating zero values.",
    "code": "```pascal\nprogram CompressArray;\n\ntype\n  TIntArray = array of Integer;\n\nfunction Compress(const Arr: TIntArray): TIntArray;\nvar\n  i, j, Count: Integer;\nbegin\n  Count := 0;\n  for i := 0 to High(Arr) do\n    if Arr[i] <> 0 then\n      Inc(Count);\n\n  SetLength(Result, Count);\n  j := 0;\n  for i := 0 to High(Arr) do\n  begin\n    if Arr[i] <> 0 then\n    begin\n      Result[j] := Arr[i];\n      Inc(j);\n    end;\n  end;\nend;\n\nvar\n  Original, Compressed: TIntArray;\n  i: Integer;\nbegin\n  Original := TIntArray.Create(1, 0, 2, 3, 0, 4, 5, 0);\n  Compressed := Compress(Original);\n\n  for i := 0 to High(Compressed) do\n    WriteLn(Compressed[i]);\nend.\n```"
  },
  {
    "task": "Develop a method to determine if an array can be split into two parts with equal sums.",
    "code": "```pascal\nprogram EqualSumPartition;\n\nfunction CanPartition(arr: array of Integer): Boolean;\nvar\n  totalSum, i, currentSum: Integer;\nbegin\n  totalSum := 0;\n\n  for i := Low(arr) to High(arr) do\n    totalSum := totalSum + arr[i];\n\n  if totalSum mod 2 <> 0 then\n    Exit(False);\n\n  currentSum := 0;\n  for i := Low(arr) to High(arr) do\n  begin\n    currentSum := currentSum + arr[i];\n    if currentSum = totalSum div 2 then\n      Exit(True);\n  end;\n\n  Result := False;\nend;\n\nvar\n  arr: array[1..6] of Integer = (1, 5, 11, 5, 3, 2);\nbegin\n  if CanPartition(arr) then\n    WriteLn('The array can be partitioned into two parts with equal sums.')\n  else\n    WriteLn('The array cannot be partitioned into two parts with equal sums.');\nend.\n```"
  },
  {
    "task": "Implement a function to round each element in an array to the nearest integer.",
    "code": "```pascal\nprogram RoundArrayElements;\n\nuses Math;\n\ntype\n  TFloatArray = array of Double;\n  TIntArray = array of Integer;\n\nfunction RoundArrayElements(inputArray: TFloatArray): TIntArray;\nvar\n  outputArray: TIntArray;\n  i: Integer;\nbegin\n  SetLength(outputArray, Length(inputArray));\n  for i := 0 to High(inputArray) do\n  begin\n    outputArray[i] := Round(inputArray[i]);\n  end;\n  Result := outputArray;\nend;\n\nvar\n  input: TFloatArray;\n  output: TIntArray;\n  i: Integer;\nbegin\n  // Example usage\n  input := TFloatArray.Create(1.1, 2.5, 3.7, 4.4);\n  output := RoundArrayElements(input);\n  \n  for i := 0 to High(output) do\n  begin\n    WriteLn(output[i]);\n  end;\nend.\n```"
  },
  {
    "task": "Create a routine to generate an array of the Fibonacci sequence up to a given number.",
    "code": "```pascal\nprogram FibonacciArray;\n\ntype\n  TIntegerArray = array of Integer;\n\nfunction GenerateFibonacciArray(n: Integer): TIntegerArray;\nvar\n  fibArray: TIntegerArray;\n  i: Integer;\nbegin\n  if n <= 0 then\n  begin\n    SetLength(fibArray, 0);\n    Exit(fibArray);\n  end;\n  \n  SetLength(fibArray, n);\n  \n  if n > 0 then\n    fibArray[0] := 0;\n  if n > 1 then\n    fibArray[1] := 1;\n    \n  for i := 2 to n - 1 do\n    fibArray[i] := fibArray[i - 1] + fibArray[i - 2];\n    \n  Result := fibArray;\nend;\n\nvar\n  fibArray: TIntegerArray;\n  i: Integer;\nbegin\n  fibArray := GenerateFibonacciArray(10);\n  for i := 0 to High(fibArray) do\n    WriteLn(fibArray[i]);\nend.\n```"
  },
  {
    "task": "Write a program to find the longest repeating sequence in an array.",
    "code": "```pascal\nprogram LongestRepeatingSequence;\n\nuses SysUtils;\n\nconst\n  MaxSize = 100;\n\ntype\n  TArray = array[1..MaxSize] of Integer;\n\nvar\n  arr: TArray;\n  n, i, j, maxLen, currentLen, startIndex, currentIndex: Integer;\n\nbegin\n  { Example array initialization and size }\n  n := 10;\n  arr[1] := 1;\n  arr[2] := 2;\n  arr[3] := 2;\n  arr[4] := 3;\n  arr[5] := 3;\n  arr[6] := 3;\n  arr[7] := 4;\n  arr[8] := 5;\n  arr[9] := 5;\n  arr[10] := 5;\n\n  maxLen := 0;\n  startIndex := 0;\n  currentIndex := 1;\n\n  while currentIndex <= n do\n  begin\n    currentLen := 1;\n    i := currentIndex;\n    while (i < n) and (arr[i] = arr[i + 1]) do\n    begin\n      Inc(currentLen);\n      Inc(i);\n    end;\n\n    if currentLen > maxLen then\n    begin\n      maxLen := currentLen;\n      startIndex := currentIndex;\n    end;\n\n    currentIndex := i + 1;\n  end;\n\n  WriteLn('The longest repeating sequence has length ', maxLen, ' starting at index ', startIndex);\nend.\n```"
  },
  {
    "task": "Design a function to multiply each element of an array by its index.",
    "code": "```pascal\nprogram MultiplyArrayByIndex;\n\ntype\n  TIntegerArray = array of Integer;\n\nfunction MultiplyByIndex(arr: TIntegerArray): TIntegerArray;\nvar\n  i: Integer;\nbegin\n  SetLength(Result, Length(arr));\n  for i := 0 to High(arr) do\n  begin\n    Result[i] := arr[i] * i;\n  end;\nend;\n\nvar\n  arr, resultArr: TIntegerArray;\n  i: Integer;\nbegin\n  arr := [1, 2, 3, 4, 5];\n  resultArr := MultiplyByIndex(arr);\n  for i := 0 to High(resultArr) do\n    WriteLn('Element ', i, ' multiplied by index: ', resultArr[i]);\nend.\n```"
  },
  {
    "task": "Create a method to convert an array of characters into a single string.",
    "code": "```pascal\nprogram ArrayToString;\n\nuses\n  SysUtils;\n\nfunction ArrayToString(arr: array of Char): string;\nvar\n  i: Integer;\n  resultStr: string;\nbegin\n  resultStr := '';\n  for i := Low(arr) to High(arr) do\n    resultStr := resultStr + arr[i];\n  ArrayToString := resultStr;\nend;\n\nvar\n  charArray: array of Char;\n  resultString: string;\nbegin\n  charArray := ['H', 'e', 'l', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd'];\n  resultString := ArrayToString(charArray);\n  WriteLn(resultString);\nend.\n```"
  },
  {
    "task": "Develop a function to fill an array with a specified value.",
    "code": "```pascal\nprogram FillArray;\n\ntype\n  TIntArray = array of Integer;\n\nprocedure FillArrayWithValue(var arr: TIntArray; value: Integer);\nvar\n  i: Integer;\nbegin\n  for i := 0 to High(arr) do\n    arr[i] := value;\nend;\n\nvar\n  arr: TIntArray;\n  i: Integer;\nbegin\n  SetLength(arr, 10);\n  FillArrayWithValue(arr, 5);\n\n  for i := 0 to High(arr) do\n    WriteLn('arr[', i, '] = ', arr[i]);\nend.\n```"
  },
  {
    "task": "Implement a routine to determine if an array has any duplicate elements.",
    "code": "```pascal\nprogram CheckDuplicates;\n\nuses SysUtils;\n\nfunction HasDuplicates(arr: array of Integer): Boolean;\nvar\n  i, j: Integer;\nbegin\n  for i := Low(arr) to High(arr) do\n    for j := i + 1 to High(arr) do\n      if arr[i] = arr[j] then\n      begin\n        Result := True;\n        Exit;\n      end;\n  Result := False;\nend;\n\nvar\n  numbers: array of Integer;\nbegin\n  SetLength(numbers, 5);\n  numbers[0] := 1;\n  numbers[1] := 2;\n  numbers[2] := 3;\n  numbers[3] := 4;\n  numbers[4] := 2;\n\n  if HasDuplicates(numbers) then\n    WriteLn('Array has duplicates')\n  else\n    WriteLn('Array has no duplicates');\nend.\n```"
  },
  {
    "task": "Write a script to reverse the order of words in an array of strings.",
    "code": "```pascal\nprogram ReverseWords;\n\nuses SysUtils;\n\nvar\n  words: array of string;\n  i, n: Integer;\n  temp: string;\nbegin\n  words := ['one', 'two', 'three', 'four', 'five'];\n  n := Length(words);\n  \n  for i := 0 to n div 2 - 1 do\n  begin\n    temp := words[i];\n    words[i] := words[n - i - 1];\n    words[n - i - 1] := temp;\n  end;\n\n  for i := 0 to n - 1 do\n    WriteLn(words[i]);\nend.\n```"
  },
  {
    "task": "Create a function to calculate the total number of distinct elements in an array.",
    "code": "```pascal\nprogram DistinctElements;\n\ntype\n  TIntArray = array of Integer;\n\nfunction CountDistinctElements(arr: TIntArray): Integer;\nvar\n  unique: array of Integer;\n  i, j: Integer;\n  isDistinct: Boolean;\nbegin\n  SetLength(unique, 0);\n  for i := 0 to High(arr) do\n  begin\n    isDistinct := True;\n    for j := 0 to High(unique) do\n    begin\n      if arr[i] = unique[j] then\n      begin\n        isDistinct := False;\n        Break;\n      end;\n    end;\n    if isDistinct then\n    begin\n      SetLength(unique, Length(unique) + 1);\n      unique[High(unique)] := arr[i];\n    end;\n  end;\n  CountDistinctElements := Length(unique);\nend;\n\nvar\n  arr: TIntArray;\n  result: Integer;\nbegin\n  arr := TIntArray.Create(1, 2, 2, 3, 4, 4, 5);\n  result := CountDistinctElements(arr);\n  WriteLn('Total number of distinct elements: ', result);\nend.\n```"
  },
  {
    "task": "Design a program to find the largest gap between consecutive elements in a sorted array.",
    "code": "```pascal\nprogram LargestGapInSortedArray;\nvar\n  arr: array of Integer;\n  n, i, maxGap: Integer;\nbegin\n  { Initialize sorted array and size }\n  n := 5; \n  SetLength(arr, n);\n  arr[0] := 1;\n  arr[1] := 3;\n  arr[2] := 6;\n  arr[3] := 9;\n  arr[4] := 15;\n\n  maxGap := 0;\n  \n  for i := 1 to n - 1 do\n  begin\n    if (arr[i] - arr[i - 1] > maxGap) then\n      maxGap := arr[i] - arr[i - 1];\n  end;\n  \n  WriteLn('The largest gap is: ', maxGap);\nend.\n```"
  },
  {
    "task": "Write a routine to perform element-wise multiplication of two arrays.",
    "code": "```pascal\nprogram ElementWiseMultiplication;\n\ntype\n  TArray = array of Integer;\n\nfunction MultiplyArrays(arr1, arr2: TArray): TArray;\nvar\n  result: TArray;\n  i: Integer;\nbegin\n  if Length(arr1) <> Length(arr2) then\n    raise Exception.Create('Arrays must be of the same length.');\n\n  SetLength(result, Length(arr1));\n\n  for i := 0 to High(arr1) do\n  begin\n    result[i] := arr1[i] * arr2[i];\n  end;\n\n  MultiplyArrays := result;\nend;\n\nvar\n  array1, array2, result: TArray;\n  i: Integer;\nbegin\n  array1 := TArray.Create(1, 2, 3, 4);\n  array2 := TArray.Create(5, 6, 7, 8);\n\n  result := MultiplyArrays(array1, array2);\n\n  for i := 0 to High(result) do\n  begin\n    Write(result[i], ' ');\n  end;\nend.\n```"
  },
  {
    "task": "Develop a method to split a string into an array of words.",
    "code": "```pascal\nprogram SplitStringIntoWords;\n\ntype\n  TStringArray = array of string;\n\nfunction SplitString(const s: string; const delimiter: char): TStringArray;\nvar\n  wordList: TStringArray;\n  word: string;\n  i, wordCount: Integer;\nbegin\n  wordCount := 0;\n  word := '';\n  for i := 1 to Length(s) do\n  begin\n    if s[i] = delimiter then\n    begin\n      if word <> '' then\n      begin\n        SetLength(wordList, wordCount + 1);\n        wordList[wordCount] := word;\n        Inc(wordCount);\n        word := '';\n      end;\n    end\n    else\n    begin\n      word := word + s[i];\n    end;\n  end;\n  if word <> '' then\n  begin\n    SetLength(wordList, wordCount + 1);\n    wordList[wordCount] := word;\n  end;\n  Result := wordList;\nend;\n\nvar\n  words: TStringArray;\n  i: Integer;\nbegin\n  words := SplitString('The quick brown fox jumps over the lazy dog', ' ');\n  for i := 0 to High(words) do\n    writeln(words[i]);\nend.\n```"
  },
  {
    "task": "Implement a function to find the longest contiguous subarray with a sum less than a target.",
    "code": "```pascal\nprogram LongestSubarray;\n\ntype\n  TIntArray = array of Integer;\n\nfunction LongestSubarrayLessThanTarget(arr: TIntArray; target: Integer): Integer;\nvar\n  start, end_, sum, maxLength, i: Integer;\nbegin\n  start := 0;\n  sum := 0;\n  maxLength := 0;\n\n  for end_ := 0 to High(arr) do\n  begin\n    sum := sum + arr[end_];\n\n    while (sum >= target) and (start <= end_) do\n    begin\n      sum := sum - arr[start];\n      start := start + 1;\n    end;\n\n    if end_ - start + 1 > maxLength then\n      maxLength := end_ - start + 1;\n  end;\n\n  LongestSubarrayLessThanTarget := maxLength;\nend;\n\nvar\n  arr: TIntArray;\n  target, result: Integer;\nbegin\n  arr := TIntArray.Create(1, 2, 3, 4, 5);\n  target := 10;\n  result := LongestSubarrayLessThanTarget(arr, target);\n  WriteLn('Length of longest subarray: ', result);\nend.\n```"
  },
  {
    "task": "Create a script to rotate a 2D array (matrix) 180 degrees.",
    "code": "```pascal\nprogram RotateMatrix180;\n\nconst\n  N = 3; { Size of the matrix }\n\ntype\n  TMatrix = array[1..N, 1..N] of Integer;\n\nvar\n  Matrix, RotatedMatrix: TMatrix;\n  i, j: Integer;\n\nbegin\n  { Initialize the matrix }\n  Matrix[1, 1] := 1; Matrix[1, 2] := 2; Matrix[1, 3] := 3;\n  Matrix[2, 1] := 4; Matrix[2, 2] := 5; Matrix[2, 3] := 6;\n  Matrix[3, 1] := 7; Matrix[3, 2] := 8; Matrix[3, 3] := 9;\n\n  { Rotate the matrix 180 degrees }\n  for i := 1 to N do\n    for j := 1 to N do\n      RotatedMatrix[i, j] := Matrix[N - i + 1, N - j + 1];\n\n  { Output the rotated matrix }\n  for i := 1 to N do\n  begin\n    for j := 1 to N do\n      Write(RotatedMatrix[i, j]:4);\n    Writeln;\n  end;\nend.\n```"
  },
  {
    "task": "Write a program to convert an array of binary digits to its decimal equivalent.",
    "code": "```pascal\nprogram BinaryToDecimal;\n\nvar\n  binaryArray: array[1..8] of Integer;\n  decimalValue, i, power: Integer;\n\nbegin\n  { Example binary input: 11011010 }\n  binaryArray[1] := 1;\n  binaryArray[2] := 1;\n  binaryArray[3] := 0;\n  binaryArray[4] := 1;\n  binaryArray[5] := 1;\n  binaryArray[6] := 0;\n  binaryArray[7] := 1;\n  binaryArray[8] := 0;\n\n  decimalValue := 0;\n  power := 1;\n\n  for i := 8 downto 1 do\n  begin\n    decimalValue := decimalValue + binaryArray[i] * power;\n    power := power * 2;\n  end;\n\n  WriteLn('Decimal equivalent: ', decimalValue);\nend.\n```"
  },
  {
    "task": "Design a function to return a new array with elements squared from the input array.",
    "code": "```pascal\nprogram SquareArrayElements;\n\ntype\n  TIntArray = array of Integer;\n\nfunction SquareElements(inputArray: TIntArray): TIntArray;\nvar\n  i: Integer;\nbegin\n  SetLength(Result, Length(inputArray));\n  for i := 0 to High(inputArray) do\n    Result[i] := inputArray[i] * inputArray[i];\nend;\n\nvar\n  originalArray, squaredArray: TIntArray;\n  i: Integer;\nbegin\n  originalArray := TIntArray.Create(1, 2, 3, 4, 5);\n  squaredArray := SquareElements(originalArray);\n  \n  for i := 0 to High(squaredArray) do\n    WriteLn(squaredArray[i]);\nend.\n```"
  },
  {
    "task": "Create a method to check if all elements in an array are unique.",
    "code": "```pascal\nprogram CheckUniqueArray;\n\nuses SysUtils;\n\nfunction AreAllElementsUnique(arr: array of Integer): Boolean;\nvar\n  i, j: Integer;\nbegin\n  for i := Low(arr) to High(arr) do\n    for j := i + 1 to High(arr) do\n      if arr[i] = arr[j] then\n        Exit(False);\n  Exit(True);\nend;\n\nvar\n  numbers: array of Integer;\nbegin\n  numbers := [1, 2, 3, 4, 5];\n  if AreAllElementsUnique(numbers) then\n    WriteLn('All elements are unique.')\n  else\n    WriteLn('There are duplicate elements.');\nend.\n```"
  },
  {
    "task": "Develop a routine to find the indices of all occurrences of a specific element in an array.",
    "code": "```pascal\nprogram FindIndices;\n\ntype\n  TIntArray = array of Integer;\n  TIndexArray = array of Integer;\n\nfunction FindOccurrences(arr: TIntArray; value: Integer): TIndexArray;\nvar\n  i, count: Integer;\nbegin\n  count := 0;\n  SetLength(Result, Length(arr));\n  \n  for i := 0 to High(arr) do\n  begin\n    if arr[i] = value then\n    begin\n      Result[count] := i;\n      Inc(count);\n    end;\n  end;\n  \n  SetLength(Result, count);\nend;\n\nvar\n  myArray: TIntArray;\n  indices: TIndexArray;\n  i: Integer;\nbegin\n  myArray := [1, 2, 3, 2, 4, 2, 5];\n  indices := FindOccurrences(myArray, 2);\n  \n  for i := 0 to High(indices) do\n    WriteLn('Index: ', indices[i]);\nend.\n```"
  },
  {
    "task": "Implement a function to merge multiple arrays into one.",
    "code": "```pascal\nprogram MergeArrays;\n\ntype\n  TIntArray = array of Integer;\n\nfunction MergeArrays(arrays: array of TIntArray): TIntArray;\nvar\n  totalLength, i, j, k: Integer;\n  resultArray: TIntArray;\nbegin\n  totalLength := 0;\n  for i := 0 to High(arrays) do\n    totalLength := totalLength + Length(arrays[i]);\n  \n  SetLength(resultArray, totalLength);\n  \n  k := 0;\n  for i := 0 to High(arrays) do\n  begin\n    for j := 0 to High(arrays[i]) do\n    begin\n      resultArray[k] := arrays[i][j];\n      Inc(k);\n    end;\n  end;\n  \n  MergeArrays := resultArray;\nend;\n\nvar\n  array1, array2, array3, mergedArray: TIntArray;\n  i: Integer;\nbegin\n  array1 := [1, 2, 3];\n  array2 := [4, 5];\n  array3 := [6, 7, 8, 9];\n\n  mergedArray := MergeArrays([array1, array2, array3]);\n  \n  for i := 0 to High(mergedArray) do\n    Write(mergedArray[i], ' ');\nend.\n```"
  },
  {
    "task": "Write a script to convert an array of integers into a formatted string.",
    "code": "```pascal\nprogram ArrayToString;\n\nuses\n  SysUtils;\n\nvar\n  numbers: array[1..5] of Integer;\n  formattedString: String;\n  i: Integer;\n\nbegin\n  numbers[1] := 10;\n  numbers[2] := 20;\n  numbers[3] := 30;\n  numbers[4] := 40;\n  numbers[5] := 50;\n\n  formattedString := '[';\n\n  for i := 1 to Length(numbers) do\n  begin\n    formattedString := formattedString + IntToStr(numbers[i]);\n    if i < Length(numbers) then\n      formattedString := formattedString + ', ';\n  end;\n\n  formattedString := formattedString + ']';\n\n  WriteLn(formattedString);\nend.\n```"
  },
  {
    "task": "Create a program to find the largest sum of any contiguous subarray.",
    "code": "```pascal\nprogram LargestContiguousSubarraySum;\n\nvar\n  arr: array[1..100] of Integer;\n  n, i, maxSoFar, maxEndingHere: Integer;\n\nbegin\n  { Initialize array with some test values and size }\n  n := 10;\n  arr[1] := -2; arr[2] := -3; arr[3] := 4; arr[4] := -1;\n  arr[5] := -2; arr[6] := 1; arr[7] := 5; arr[8] := -3;\n  arr[9] := 6; arr[10] := -7;\n\n  maxSoFar := arr[1];\n  maxEndingHere := arr[1];\n\n  for i := 2 to n do\n  begin\n    if maxEndingHere + arr[i] > arr[i] then\n      maxEndingHere := maxEndingHere + arr[i]\n    else\n      maxEndingHere := arr[i];\n\n    if maxEndingHere > maxSoFar then\n      maxSoFar := maxEndingHere;\n  end;\n\n  WriteLn('Largest sum of contiguous subarray is: ', maxSoFar);\nend.\n```"
  },
  {
    "task": "Design a function to compare two arrays and return the differences.",
    "code": "```pascal\nprogram ArrayDifference;\n\ntype\n  TIntArray = array of Integer;\n\nfunction CompareArrays(arr1, arr2: TIntArray): TIntArray;\nvar\n  differences: TIntArray;\n  i, j, diffCount: Integer;\n  found: Boolean;\nbegin\n  SetLength(differences, 0);\n  diffCount := 0;\n  \n  for i := 0 to High(arr1) do\n  begin\n    found := False;\n    for j := 0 to High(arr2) do\n    begin\n      if arr1[i] = arr2[j] then\n      begin\n        found := True;\n        Break;\n      end;\n    end;\n    if not found then\n    begin\n      SetLength(differences, diffCount + 1);\n      differences[diffCount] := arr1[i];\n      Inc(diffCount);\n    end;\n  end;\n\n  for i := 0 to High(arr2) do\n  begin\n    found := False;\n    for j := 0 to High(arr1) do\n    begin\n      if arr2[i] = arr1[j] then\n      begin\n        found := True;\n        Break;\n      end;\n    end;\n    if not found then\n    begin\n      SetLength(differences, diffCount + 1);\n      differences[diffCount] := arr2[i];\n      Inc(diffCount);\n    end;\n  end;\n\n  CompareArrays := differences;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Write a method to find the longest subarray with elements in arithmetic progression.",
    "code": "```pascal\nprogram LongestAPSubarray;\n\nuses sysutils;\n\nfunction LongestAP(arr: array of Integer): Integer;\nvar\n  n, i, j, diff, maxLen, currLen: Integer;\nbegin\n  n := Length(arr);\n  if n <= 1 then\n  begin\n    LongestAP := n;\n    Exit;\n  end;\n\n  maxLen := 1;\n  for i := 0 to n - 2 do\n  begin\n    for j := i + 1 to n - 1 do\n    begin\n      diff := arr[j] - arr[i];\n      currLen := 2;\n      while (j + 1 < n) and (arr[j + 1] - arr[j] = diff) do\n      begin\n        Inc(j);\n        Inc(currLen);\n      end;\n      if currLen > maxLen then\n        maxLen := currLen;\n    end;\n  end;\n  \n  LongestAP := maxLen;\nend;\n\nvar\n  arr: array of Integer = (1, 7, 10, 13, 14, 19);\n  result: Integer;\nbegin\n  result := LongestAP(arr);\n  WriteLn('The length of the longest subarray with elements in arithmetic progression is: ', result);\nend.\n```"
  },
  {
    "task": "Develop a routine to remove elements from an array based on a predicate function.",
    "code": "```pascal\nprogram RemoveElements;\n\ntype\n  TIntArray = array of Integer;\n\nfunction Predicate(Value: Integer): Boolean;\nbegin\n  // Define your predicate condition here, e.g., remove even numbers\n  Predicate := Value mod 2 = 0;\nend;\n\nfunction RemoveElements(var Arr: TIntArray; Predicate: function(Value: Integer): Boolean): TIntArray;\nvar\n  ResultArr: TIntArray;\n  I, J: Integer;\nbegin\n  SetLength(ResultArr, Length(Arr));\n  J := 0;\n  for I := 0 to High(Arr) do\n  begin\n    if not Predicate(Arr[I]) then\n    begin\n      ResultArr[J] := Arr[I];\n      Inc(J);\n    end;\n  end;\n  SetLength(ResultArr, J);\n  RemoveElements := ResultArr;\nend;\n\nvar\n  OriginalArr, FilteredArr: TIntArray;\n  I: Integer;\nbegin\n  OriginalArr := TIntArray.Create(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n  FilteredArr := RemoveElements(OriginalArr, @Predicate);\n  \n  Write('Filtered Array: ');\n  for I := 0 to High(FilteredArr) do\n    Write(FilteredArr[I], ' ');\n  WriteLn;\nend.\n```"
  },
  {
    "task": "Implement a function to determine if two arrays have any common elements.",
    "code": "```pascal\nprogram CommonElements;\n\nfunction HaveCommonElements(arr1, arr2: array of Integer): Boolean;\nvar\n  i, j: Integer;\nbegin\n  for i := Low(arr1) to High(arr1) do\n    for j := Low(arr2) to High(arr2) do\n      if arr1[i] = arr2[j] then\n      begin\n        HaveCommonElements := True;\n        Exit;\n      end;\n  HaveCommonElements := False;\nend;\n\nvar\n  array1, array2: array of Integer;\nbegin\n  SetLength(array1, 5);\n  SetLength(array2, 5);\n  array1[0] := 1; array1[1] := 2; array1[2] := 3; array1[3] := 4; array1[4] := 5;\n  array2[0] := 5; array2[1] := 6; array2[2] := 7; array2[3] := 8; array2[4] := 9;\n  \n  if HaveCommonElements(array1, array2) then\n    WriteLn('Arrays have common elements.')\n  else\n    WriteLn('Arrays do not have common elements.');\nend.\n```"
  },
  {
    "task": "Create a script to initialize an empty array and populate it with user input.",
    "code": "```pascal\nprogram PopulateArrayWithInput;\n\nuses\n  SysUtils;\n\nconst\n  MAX_SIZE = 10;  // Example size, can be adjusted\n\nvar\n  values: array[1..MAX_SIZE] of Integer;\n  i, inputValue: Integer;\n\nbegin\n  for i := 1 to MAX_SIZE do\n  begin\n    Write('Enter value for position ', i, ': ');\n    ReadLn(inputValue);\n    values[i] := inputValue;\n  end;\nend.\n```"
  },
  {
    "task": "Write a program to find the maximum sum of non-adjacent elements in an array.",
    "code": "```pascal\nprogram MaxSumNonAdjacent;\n\nvar\n  arr: array of Integer;\n  n, i: Integer;\n  incl, excl, new_excl, max_sum: Integer;\n\nbegin\n  { Initialize an example array }\n  arr := [3, 2, 7, 10];\n  n := Length(arr);\n  \n  { Initialize maximum sums }\n  incl := 0;\n  excl := 0;\n  \n  for i := 0 to n - 1 do\n  begin\n    { Current max excluding i }\n    new_excl := ifthen(incl > excl, incl, excl);\n    \n    { Current max including i }\n    incl := excl + arr[i];\n    \n    { Update excl to new_excl }\n    excl := new_excl;\n  end;\n  \n  { Maximum of incl and excl will be the answer }\n  max_sum := ifthen(incl > excl, incl, excl);\n  \n  WriteLn('Maximum sum of non-adjacent elements: ', max_sum);\nend.\n```"
  },
  {
    "task": "Design a function to shuffle an array randomly.",
    "code": "```pascal\nprogram ShuffleArray;\n\nuses\n  SysUtils;\n\nprocedure Shuffle(var arr: array of Integer);\nvar\n  i, j, temp: Integer;\nbegin\n  Randomize;\n  for i := High(arr) downto Low(arr) + 1 do\n  begin\n    j := Random(i + 1);\n    temp := arr[i];\n    arr[i] := arr[j];\n    arr[j] := temp;\n  end;\nend;\n\nvar\n  myArray: array[0..9] of Integer;\n  i: Integer;\nbegin\n  for i := Low(myArray) to High(myArray) do\n    myArray[i] := i;\n  \n  Shuffle(myArray);\n\n  for i := Low(myArray) to High(myArray) do\n    WriteLn(myArray[i]);\nend.\n```"
  },
  {
    "task": "Create a method to generate a new array where each element is the cumulative product of the input array.",
    "code": "```pascal\nprogram CumulativeProductArray;\n\ntype\n  TIntArray = array of Integer;\n\nfunction CumulativeProduct(input: TIntArray): TIntArray;\nvar\n  i, n: Integer;\nbegin\n  n := Length(input);\n  SetLength(Result, n);\n  if n = 0 then\n    Exit;\n\n  Result[0] := input[0];\n  for i := 1 to n - 1 do\n    Result[i] := Result[i - 1] * input[i];\nend;\n\nvar\n  input, output: TIntArray;\n  i: Integer;\nbegin\n  input := TIntArray.Create(1, 2, 3, 4, 5);\n  output := CumulativeProduct(input);\n\n  for i := 0 to High(output) do\n    WriteLn(output[i]);\nend.\n```"
  },
  {
    "task": "Develop a routine to find the largest element in each row of a 2D array.",
    "code": "```pascal\nprogram LargestInRows;\n\nconst\n  Rows = 3;\n  Cols = 4;\n\ntype\n  T2DArray = array[1..Rows, 1..Cols] of Integer;\n  T1DArray = array[1..Rows] of Integer;\n\nvar\n  matrix: T2DArray = ((1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12));\n  largestInRows: T1DArray;\n  i, j: Integer;\n\nprocedure FindLargestInRows(var mat: T2DArray; var largest: T1DArray);\nvar\n  row, col: Integer;\n  max: Integer;\nbegin\n  for row := 1 to Rows do\n  begin\n    max := mat[row, 1];\n    for col := 2 to Cols do\n    begin\n      if mat[row, col] > max then\n        max := mat[row, col];\n    end;\n    largest[row] := max;\n  end;\nend;\n\nbegin\n  FindLargestInRows(matrix, largestInRows);\n  for i := 1 to Rows do\n  begin\n    WriteLn('Largest in row ', i, ': ', largestInRows[i]);\n  end;\nend.\n```"
  },
  {
    "task": "Implement a function to count the number of negative numbers in an array.",
    "code": "```pascal\nprogram CountNegativeNumbers;\n\nfunction CountNegatives(arr: array of Integer): Integer;\nvar\n  i, count: Integer;\nbegin\n  count := 0;\n  for i := Low(arr) to High(arr) do\n  begin\n    if arr[i] < 0 then\n      Inc(count);\n  end;\n  CountNegatives := count;\nend;\n\nvar\n  numbers: array[1..5] of Integer = (-3, 2, -1, 4, -5);\n  result: Integer;\nbegin\n  result := CountNegatives(numbers);\n  WriteLn('Number of negative numbers: ', result);\nend.\n```"
  },
  {
    "task": "Write a script to find the longest subarray with all distinct elements.",
    "code": "```pascal\nprogram LongestDistinctSubarray;\n\nuses SysUtils;\n\nvar\n  arr: array of Integer;\n  seen: array of Boolean;\n  n, i, j, maxLength, start: Integer;\n\nbegin\n  // Example input\n  arr := [5, 1, 3, 5, 2, 3, 4, 1];\n  n := Length(arr);\n  SetLength(seen, 1000); // Assuming elements in arr are between 0 and 999\n  maxLength := 0;\n  start := 0;\n\n  i := 0;\n  while i < n do\n  begin\n    if not seen[arr[i]] then\n    begin\n      seen[arr[i]] := True;\n      Inc(i);\n      maxLength := Max(maxLength, i - start);\n    end\n    else\n    begin\n      seen[arr[start]] := False;\n      Inc(start);\n    end;\n  end;\n\n  WriteLn('Length of longest subarray with all distinct elements: ', maxLength);\nend.\n```"
  }
]