[
  {
    "task": "Create a map to store student names as keys and their grades as values, then calculate the average grade.",
    "code": "```pascal\nprogram StudentGrades;\n\nuses\n  SysUtils, Generics.Collections;\n\nvar\n  grades: TDictionary<string, Double>;\n  sum, average: Double;\n  student: string;\n\nbegin\n  grades := TDictionary<string, Double>.Create;\n  try\n    grades.Add('Alice', 85.0);\n    grades.Add('Bob', 78.5);\n    grades.Add('Charlie', 92.0);\n    grades.Add('David', 76.5);\n    grades.Add('Eva', 88.0);\n\n    sum := 0.0;\n    for student in grades.Keys do\n      sum := sum + grades[student];\n\n    if grades.Count > 0 then\n      average := sum / grades.Count\n    else\n      average := 0.0;\n\n    Writeln('Average grade: ', average:0:2);\n  finally\n    grades.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Develop a function that takes a dictionary of product names and prices, and returns the total cost of all products.",
    "code": "```pascal\nprogram TotalCostCalculator;\n\nuses\n  SysUtils, Generics.Collections;\n\nfunction CalculateTotalCost(products: TDictionary<string, Double>): Double;\nvar\n  productPrice: Double;\nbegin\n  Result := 0;\n  for productPrice in products.Values do\n  begin\n    Result := Result + productPrice;\n  end;\nend;\n\nvar\n  products: TDictionary<string, Double>;\n  totalCost: Double;\nbegin\n  products := TDictionary<string, Double>.Create;\n  try\n    products.Add('Product1', 19.99);\n    products.Add('Product2', 5.49);\n    products.Add('Product3', 12.89);\n\n    totalCost := CalculateTotalCost(products);\n    WriteLn('Total cost of all products: ', FormatFloat('0.00', totalCost));\n  finally\n    products.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Implement a program that counts the frequency of each word in a given text using a dictionary.",
    "code": "```pascal\nprogram WordFrequencyCounter;\n\nuses\n  SysUtils, Generics.Collections;\n\nvar\n  wordDict: TDictionary<string, Integer>;\n  text, word: string;\n  words: TArray<string>;\n  i: Integer;\nbegin\n  wordDict := TDictionary<string, Integer>.Create;\n  try\n    text := 'This is a sample text with some sample words and some repeated words';\n    words := text.Split([' ']);\n\n    for word in words do\n    begin\n      word := LowerCase(word);\n      if wordDict.ContainsKey(word) then\n        wordDict[word] := wordDict[word] + 1\n      else\n        wordDict.Add(word, 1);\n    end;\n\n    for word in wordDict.Keys do\n    begin\n      WriteLn(Format('Word: %s, Frequency: %d', [word, wordDict[word]]));\n    end;\n  finally\n    wordDict.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Write a function that takes a dictionary of employee IDs and their work hours, and returns the ID of the employee with the most hours.",
    "code": "```pascal\nprogram MaxHoursEmployee;\n\nuses SysUtils;\n\ntype\n  TEmployeeHours = record\n    ID: String;\n    Hours: Integer;\n  end;\n\nfunction MaxHoursEmployee(employeeHours: TDictionary<String, Integer>): String;\nvar\n  maxHours: Integer;\n  maxEmployeeID: String;\n  pair: TPair<String, Integer>;\nbegin\n  maxHours := -1;\n  maxEmployeeID := '';\n  for pair in employeeHours do\n  begin\n    if pair.Value > maxHours then\n    begin\n      maxHours := pair.Value;\n      maxEmployeeID := pair.Key;\n    end;\n  end;\n  Result := maxEmployeeID;\nend;\n\nvar\n  employees: TDictionary<String, Integer>;\nbegin\n  employees := TDictionary<String, Integer>.Create;\n  try\n    employees.Add('E001', 40);\n    employees.Add('E002', 55);\n    employees.Add('E003', 60);\n    employees.Add('E004', 50);\n\n    WriteLn('Employee with most hours: ', MaxHoursEmployee(employees));\n  finally\n    employees.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Design a system that uses a map to store users' login attempts and timestamps, then locks the account after three failed attempts.",
    "code": "```pascal\nprogram AccountLockSystem;\n\nuses SysUtils, Generics.Collections;\n\ntype\n  TLoginAttempt = record\n    AttemptCount: Integer;\n    LastAttempt: TDateTime;\n  end;\n\nvar\n  LoginAttempts: TDictionary<String, TLoginAttempt>;\n  Username: String;\n  MaxAttempts: Integer = 3;\n  AttemptRecord: TLoginAttempt;\n  \nprocedure AttemptLogin(Username: String; Success: Boolean);\nbegin\n  if not LoginAttempts.TryGetValue(Username, AttemptRecord) then\n  begin\n    AttemptRecord.AttemptCount := 0;\n  end;\n  \n  if Success then\n  begin\n    AttemptRecord.AttemptCount := 0;\n  end\n  else\n  begin\n    Inc(AttemptRecord.AttemptCount);\n    AttemptRecord.LastAttempt := Now;\n  end;\n\n  LoginAttempts.AddOrSetValue(Username, AttemptRecord);\n  \n  if AttemptRecord.AttemptCount >= MaxAttempts then\n  begin\n    Writeln('Account locked for user: ', Username);\n  end\n  else\n  begin\n    Writeln('Login attempt recorded for user: ', Username);\n  end;\nend;\n\nbegin\n  LoginAttempts := TDictionary<String, TLoginAttempt>.Create;\n  \n  { Example attempts }\n  AttemptLogin('user1', False);\n  AttemptLogin('user1', False);\n  AttemptLogin('user1', False);\n  \n  LoginAttempts.Free;\nend.\n```"
  },
  {
    "task": "Create a dictionary to represent a phonebook, allowing users to add, remove, and look up contacts by name.",
    "code": "```pascal\nprogram PhoneBook;\n\nuses\n  SysUtils, Generics.Collections;\n\nvar\n  phonebook: TDictionary<string, string>;\n  command, name, number: string;\n\nbegin\n  phonebook := TDictionary<string, string>.Create;\n  \n  while True do\n  begin\n    WriteLn('Enter command (add, remove, lookup, exit):');\n    ReadLn(command);\n    \n    if command = 'add' then\n    begin\n      WriteLn('Enter name:');\n      ReadLn(name);\n      WriteLn('Enter number:');\n      ReadLn(number);\n      phonebook.AddOrSetValue(name, number);\n      WriteLn('Contact added.');\n    end\n    else if command = 'remove' then\n    begin\n      WriteLn('Enter name to remove:');\n      ReadLn(name);\n      if phonebook.ContainsKey(name) then\n      begin\n        phonebook.Remove(name);\n        WriteLn('Contact removed.');\n      end\n      else\n        WriteLn('Contact not found.');\n    end\n    else if command = 'lookup' then\n    begin\n      WriteLn('Enter name to look up:');\n      ReadLn(name);\n      if phonebook.TryGetValue(name, number) then\n        WriteLn('Number: ', number)\n      else\n        WriteLn('Contact not found.');\n    end\n    else if command = 'exit' then\n      Break\n    else\n      WriteLn('Invalid command.');\n  end;\n\n  phonebook.Free;\nend.\n```"
  },
  {
    "task": "Build a map that associates city names with their population, then find the city with the highest population.",
    "code": "```pascal\nprogram CityPopulation;\n\nuses\n  Classes, SysUtils;\n\nvar\n  CityMap: TFPHashList;\n  CityName: string;\n  Population, HighestPopulation: Integer;\n  I: Integer;\n  HighestCity: string;\n\nbegin\n  CityMap := TFPHashList.Create;\n\n  // Populate the map with city names and their populations\n  CityMap.Add('New York', Pointer(8419000));\n  CityMap.Add('Los Angeles', Pointer(3980000));\n  CityMap.Add('Chicago', Pointer(2716000));\n  CityMap.Add('Houston', Pointer(2328000));\n  CityMap.Add('Phoenix', Pointer(1690000));\n\n  HighestPopulation := 0;\n  HighestCity := '';\n\n  // Find the city with the highest population\n  for I := 0 to CityMap.Count - 1 do\n  begin\n    CityName := string(CityMap.NameOfIndex(I));\n    Population := Integer(CityMap.Items[I]);\n\n    if Population > HighestPopulation then\n    begin\n      HighestPopulation := Population;\n      HighestCity := CityName;\n    end;\n  end;\n\n  WriteLn('The city with the highest population is ', HighestCity, ' with a population of ', HighestPopulation);\n\n  CityMap.Free;\nend.\n```"
  },
  {
    "task": "Write a program that translates English words to another language using a provided dictionary, and translates a given sentence.",
    "code": "```pascal\nprogram TranslateSentence;\n\nuses SysUtils;\n\nvar\n  dictionary: TDictionary<string, string>;\n  sentence, word, translatedSentence: string;\n  words: TStringArray;\n  i: Integer;\nbegin\n  dictionary := TDictionary<string, string>.Create;\n  try\n    dictionary.Add('hello', 'hola');\n    dictionary.Add('world', 'mundo');\n    dictionary.Add('good', 'bueno');\n    dictionary.Add('morning', 'ma\u00f1ana');\n    \n    sentence := 'hello world good morning';\n    \n    words := sentence.Split([' ']);\n    translatedSentence := '';\n    \n    for i := Low(words) to High(words) do\n    begin\n      word := words[i];\n      if dictionary.ContainsKey(word) then\n        translatedSentence := translatedSentence + dictionary[word] + ' '\n      else\n        translatedSentence := translatedSentence + word + ' ';\n    end;\n    \n    writeln(Trim(translatedSentence));\n  finally\n    dictionary.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Construct a dictionary to map book titles to their authors, and implement a search function to find all books by a given author.",
    "code": "```pascal\nprogram BookAuthorMap;\n\nuses\n  SysUtils, Generics.Collections;\n\nvar\n  BookAuthorMap: TDictionary<string, string>;\n  BooksByAuthor: TStringList;\n\nprocedure AddBook(Title, Author: string);\nbegin\n  BookAuthorMap.Add(Title, Author);\nend;\n\nprocedure FindBooksByAuthor(Author: string);\nvar\n  Title: string;\nbegin\n  BooksByAuthor.Clear;\n  for Title in BookAuthorMap.Keys do\n    if BookAuthorMap[Title] = Author then\n      BooksByAuthor.Add(Title);\n\n  Writeln('Books by ', Author, ':');\n  for Title in BooksByAuthor do\n    Writeln('- ', Title);\nend;\n\nbegin\n  BookAuthorMap := TDictionary<string, string>.Create;\n  BooksByAuthor := TStringList.Create;\n\n  AddBook('1984', 'George Orwell');\n  AddBook('Animal Farm', 'George Orwell');\n  AddBook('Brave New World', 'Aldous Huxley');\n\n  FindBooksByAuthor('George Orwell');\n\n  BookAuthorMap.Free;\n  BooksByAuthor.Free;\nend.\n```"
  },
  {
    "task": "Create a map to store product IDs and their stock levels, then implement a function to update stock levels after a sale.",
    "code": "```pascal\nprogram ProductStock;\n\nuses\n  SysUtils, Generics.Collections;\n\nvar\n  ProductStock: TDictionary<Integer, Integer>;\n\nprocedure UpdateStockLevel(ProductID: Integer; SoldQuantity: Integer);\nvar\n  CurrentStock: Integer;\nbegin\n  if ProductStock.TryGetValue(ProductID, CurrentStock) then\n  begin\n    ProductStock[ProductID] := CurrentStock - SoldQuantity;\n  end\n  else\n  begin\n    WriteLn('Product ID not found.');\n  end;\nend;\n\nbegin\n  ProductStock := TDictionary<Integer, Integer>.Create;\n  try\n    ProductStock.Add(101, 50);\n    ProductStock.Add(102, 30);\n    ProductStock.Add(103, 20);\n\n    UpdateStockLevel(101, 5);\n    WriteLn('Stock level for Product 101: ', ProductStock[101]);\n  finally\n    ProductStock.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Write a script that uses a dictionary to convert country codes to country names and prints the full name for a given code.",
    "code": "```pascal\nprogram CountryCodeConverter;\n\nuses\n  SysUtils;\n\nvar\n  countryCodes: TFPHashObject;\n  countryCode, countryName: String;\n\nbegin\n  countryCodes := TFPHashObject.Create;\n  try\n    countryCodes.Add('US', TObject('United States'));\n    countryCodes.Add('FR', TObject('France'));\n    countryCodes.Add('DE', TObject('Germany'));\n    countryCodes.Add('JP', TObject('Japan'));\n    countryCodes.Add('IN', TObject('India'));\n\n    Write('Enter a country code: ');\n    ReadLn(countryCode);\n\n    countryName := String(countryCodes.Items[countryCode]);\n\n    if countryName <> '' then\n      WriteLn('Country: ', countryName)\n    else\n      WriteLn('Country code not found.');\n  finally\n    countryCodes.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Design a program that stores student IDs and names in a dictionary, and allows retrieval of names by ID.",
    "code": "```pascal\nprogram StudentDictionary;\n\nuses\n  SysUtils, Generics.Collections;\n\nvar\n  studentDict: TDictionary<Integer, string>;\n  studentID: Integer;\n  studentName: string;\n  inputID: Integer;\n\nbegin\n  studentDict := TDictionary<Integer, string>.Create;\n\n  { Sample data insertion }\n  studentDict.Add(1001, 'Alice');\n  studentDict.Add(1002, 'Bob');\n  studentDict.Add(1003, 'Charlie');\n\n  { User input to retrieve student name by ID }\n  Write('Enter student ID to retrieve name: ');\n  ReadLn(inputID);\n\n  if studentDict.TryGetValue(inputID, studentName) then\n    WriteLn('Student Name: ', studentName)\n  else\n    WriteLn('Student ID not found.');\n\n  studentDict.Free;\nend.\n```"
  },
  {
    "task": "Implement a dictionary to store configuration settings for a software application, allowing updates and retrieval of settings.",
    "code": "```pascal\nprogram ConfigSettings;\n\nuses\n  Generics.Collections;\n\nvar\n  Config: TDictionary<string, string>;\n\nprocedure InitializeConfig;\nbegin\n  Config := TDictionary<string, string>.Create;\nend;\n\nprocedure UpdateSetting(Key, Value: string);\nbegin\n  Config.AddOrSetValue(Key, Value);\nend;\n\nfunction GetSetting(Key: string): string;\nbegin\n  if Config.TryGetValue(Key, Result) then\n    Exit\n  else\n    Result := '';\nend;\n\nbegin\n  InitializeConfig;\n  \n  UpdateSetting('theme', 'dark');\n  UpdateSetting('language', 'en');\n  \n  Writeln('Theme: ', GetSetting('theme'));\n  Writeln('Language: ', GetSetting('language'));\n  \n  Config.Free;\nend.\n```"
  },
  {
    "task": "Create a map that stores words as keys and their definitions as values, and write a function to display all words starting with a given letter.",
    "code": "```pascal\nprogram WordDictionary;\n\nuses SysUtils, Generics.Collections;\n\ntype\n  TStringMap = TDictionary<string, string>;\n\nvar\n  wordMap: TStringMap;\n\nprocedure DisplayWordsStartingWith(letter: Char; map: TStringMap);\nvar\n  key: string;\nbegin\n  for key in map.Keys do\n  begin\n    if key.StartsWith(letter) then\n      WriteLn(key, ': ', map[key]);\n  end;\nend;\n\nbegin\n  wordMap := TStringMap.Create;\n  try\n    wordMap.Add('Apple', 'A fruit');\n    wordMap.Add('Banana', 'Another fruit');\n    wordMap.Add('Apricot', 'A type of fruit');\n    wordMap.Add('Avocado', 'A creamy fruit');\n    \n    DisplayWordsStartingWith('A', wordMap);\n  finally\n    wordMap.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Write a program that uses a dictionary to store usernames and passwords, and verifies login attempts.",
    "code": "```pascal\nprogram LoginVerification;\n\nuses\n  SysUtils, Generics.Collections;\n\nvar\n  Users: TDictionary<string, string>;\n  Username, Password: string;\n  LoginSuccess: Boolean;\n\nbegin\n  Users := TDictionary<string, string>.Create;\n  try\n    // Add some sample usernames and passwords\n    Users.Add('user1', 'password123');\n    Users.Add('user2', 'mypassword');\n    Users.Add('admin', 'adminpass');\n\n    Write('Enter username: ');\n    ReadLn(Username);\n    Write('Enter password: ');\n    ReadLn(Password);\n\n    if Users.TryGetValue(Username, Password) then\n      LoginSuccess := (Password = Users[Username])\n    else\n      LoginSuccess := False;\n\n    if LoginSuccess then\n      WriteLn('Login successful!')\n    else\n      WriteLn('Invalid username or password.');\n\n  finally\n    Users.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Design a map to track the number of times each item is purchased in a store, then find the most popular item.",
    "code": "```pascal\nprogram StorePurchases;\n\nuses\n  SysUtils, Generics.Collections;\n\nvar\n  purchases: TDictionary<string, Integer>;\n  item: string;\n  count, maxCount: Integer;\n  popularItem: string;\nbegin\n  purchases := TDictionary<string, Integer>.Create;\n  try\n    // Sample data\n    purchases.AddOrSetValue('apple', 5);\n    purchases.AddOrSetValue('banana', 3);\n    purchases.AddOrSetValue('orange', 10);\n    purchases.AddOrSetValue('mango', 7);\n\n    maxCount := -1;\n    popularItem := '';\n\n    for item in purchases.Keys do\n    begin\n      count := purchases[item];\n      if count > maxCount then\n      begin\n        maxCount := count;\n        popularItem := item;\n      end;\n    end;\n\n    WriteLn('Most popular item: ', popularItem, ' with ', maxCount, ' purchases.');\n  finally\n    purchases.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Build a dictionary that associates file extensions with their corresponding application types and uses it to determine how to open a given file.",
    "code": "```pascal\nprogram FileOpener;\n\nuses SysUtils;\n\nvar\n  fileAssociations: TFPHashObjectList;\n  fileExtension: string;\n  applicationType: string;\n  fileName: string;\n\nbegin\n  // Create the dictionary\n  fileAssociations := TFPHashObjectList.Create(True);\n  \n  // Add file extensions and their corresponding application types\n  fileAssociations.Add('.txt', TObject('Text Editor'));\n  fileAssociations.Add('.jpg', TObject('Image Viewer'));\n  fileAssociations.Add('.mp4', TObject('Media Player'));\n  fileAssociations.Add('.pdf', TObject('PDF Reader'));\n\n  // Sample file name\n  fileName := 'document.pdf';\n  \n  // Extract the file extension\n  fileExtension := ExtractFileExt(fileName);\n  \n  // Determine the application type\n  if Assigned(fileAssociations.Find(fileExtension)) then\n  begin\n    applicationType := string(fileAssociations.Items[fileAssociations.FindIndexOf(fileExtension)]);\n    WriteLn('Open with: ', applicationType);\n  end\n  else\n  begin\n    WriteLn('File extension not recognized.');\n  end;\n\n  // Clean up\n  fileAssociations.Free;\nend.\n```"
  },
  {
    "task": "Create a program that uses a map to store menu items and their prices, and allows customers to calculate their total bill.",
    "code": "```pascal\nprogram MenuBillCalculator;\n\nuses\n  SysUtils, Generics.Collections;\n\nvar\n  menu: TDictionary<string, Double>;\n  item: string;\n  quantity, totalItems: Integer;\n  totalPrice, itemPrice: Double;\n\nbegin\n  menu := TDictionary<string, Double>.Create;\n\n  // Adding menu items and their prices\n  menu.Add('Burger', 5.99);\n  menu.Add('Pizza', 8.99);\n  menu.Add('Salad', 4.99);\n  menu.Add('Fries', 2.49);\n  menu.Add('Drink', 1.99);\n\n  totalPrice := 0.0;\n\n  Write('Enter the number of different items ordered: ');\n  ReadLn(totalItems);\n\n  for quantity := 1 to totalItems do\n  begin\n    Write('Enter item name: ');\n    ReadLn(item);\n    \n    if menu.TryGetValue(item, itemPrice) then\n    begin\n      Write('Enter the quantity of ', item, ': ');\n      ReadLn(quantity);\n      totalPrice := totalPrice + (itemPrice * quantity);\n    end\n    else\n      WriteLn('Item not found on the menu.');\n  end;\n\n  WriteLn('Total bill amount: $', FormatFloat('0.00', totalPrice));\n\n  menu.Free;\nend.\n```"
  },
  {
    "task": "Implement a dictionary to track the inventory of a warehouse, allowing additions, removals, and inventory checks.",
    "code": "```pascal\nprogram WarehouseInventory;\n\nuses\n  SysUtils, Generics.Collections;\n\ntype\n  TInventory = TDictionary<string, Integer>;\n\nvar\n  Inventory: TInventory;\n\nprocedure AddToInventory(Item: string; Quantity: Integer);\nbegin\n  if Inventory.ContainsKey(Item) then\n    Inventory[Item] := Inventory[Item] + Quantity\n  else\n    Inventory.Add(Item, Quantity);\nend;\n\nprocedure RemoveFromInventory(Item: string; Quantity: Integer);\nbegin\n  if Inventory.ContainsKey(Item) then\n  begin\n    if Inventory[Item] > Quantity then\n      Inventory[Item] := Inventory[Item] - Quantity\n    else\n      Inventory.Remove(Item);\n  end\n  else\n    WriteLn('Item not found in inventory.');\nend;\n\nprocedure CheckInventory(Item: string);\nbegin\n  if Inventory.ContainsKey(Item) then\n    WriteLn('Inventory of ', Item, ': ', Inventory[Item])\n  else\n    WriteLn('Item not found in inventory.');\nend;\n\nbegin\n  Inventory := TInventory.Create;\n\n  // Example usage:\n  AddToInventory('Widget', 10);\n  AddToInventory('Gadget', 5);\n  CheckInventory('Widget');\n  RemoveFromInventory('Widget', 3);\n  CheckInventory('Widget');\n  RemoveFromInventory('Widget', 7);\n  CheckInventory('Widget');\n\n  Inventory.Free;\nend.\n```"
  },
  {
    "task": "Write a function that uses a map to convert Roman numerals to integers.",
    "code": "```pascal\nprogram RomanToInt;\n\nuses\n  SysUtils;\n\nfunction RomanToInteger(roman: string): Integer;\nvar\n  romanMap: TDictionary<Char, Integer>;\n  i, total, currentValue, nextValue: Integer;\nbegin\n  romanMap := TDictionary<Char, Integer>.Create;\n  try\n    romanMap.Add('I', 1);\n    romanMap.Add('V', 5);\n    romanMap.Add('X', 10);\n    romanMap.Add('L', 50);\n    romanMap.Add('C', 100);\n    romanMap.Add('D', 500);\n    romanMap.Add('M', 1000);\n\n    total := 0;\n    i := 1;\n    while i <= Length(roman) do\n    begin\n      romanMap.TryGetValue(roman[i], currentValue);\n      if i < Length(roman) then\n      begin\n        romanMap.TryGetValue(roman[i + 1], nextValue);\n        if currentValue < nextValue then\n        begin\n          total := total + (nextValue - currentValue);\n          Inc(i);\n        end\n        else\n          total := total + currentValue;\n      end\n      else\n        total := total + currentValue;\n      Inc(i);\n    end;\n    Result := total;\n  finally\n    romanMap.Free;\n  end;\nend;\n\nbegin\n  Writeln(RomanToInteger('MCMXCIV'));  // Example usage\nend.\n```"
  },
  {
    "task": "Develop a program that uses a dictionary to track the number of occurrences of each letter in a string.",
    "code": "```pascal\nprogram LetterFrequency;\n\nuses\n  SysUtils, Generics.Collections;\n\nvar\n  input: string;\n  letterCount: TDictionary<Char, Integer>;\n  i: Integer;\n  ch: Char;\nbegin\n  letterCount := TDictionary<Char, Integer>.Create;\n  try\n    Write('Enter a string: ');\n    ReadLn(input);\n\n    for i := 1 to Length(input) do\n    begin\n      ch := input[i];\n      if letterCount.ContainsKey(ch) then\n        letterCount[ch] := letterCount[ch] + 1\n      else\n        letterCount.Add(ch, 1);\n    end;\n\n    for ch in letterCount.Keys do\n      WriteLn(ch, ': ', letterCount[ch]);\n\n  finally\n    letterCount.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Create a map to store team names and their scores, then determine the team with the highest score.",
    "code": "```pascal\nprogram TeamScores;\n\nuses\n  SysUtils, Generics.Collections;\n\nvar\n  teamScores: TDictionary<string, Integer>;\n  team, highestScoringTeam: string;\n  score, highestScore: Integer;\nbegin\n  teamScores := TDictionary<string, Integer>.Create;\n  try\n    teamScores.Add('TeamA', 85);\n    teamScores.Add('TeamB', 90);\n    teamScores.Add('TeamC', 78);\n    teamScores.Add('TeamD', 92);\n    \n    highestScore := -1;\n    highestScoringTeam := '';\n    \n    for team in teamScores.Keys do\n    begin\n      score := teamScores[team];\n      if score > highestScore then\n      begin\n        highestScore := score;\n        highestScoringTeam := team;\n      end;\n    end;\n    \n    WriteLn('The team with the highest score is: ', highestScoringTeam, ' with a score of ', highestScore);\n    \n  finally\n    teamScores.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Write a function that takes a dictionary of item weights and calculates the total weight of all items.",
    "code": "```pascal\nprogram TotalWeightCalculator;\n\nuses SysUtils, Generics.Collections;\n\nfunction CalculateTotalWeight(weights: TDictionary<string, Double>): Double;\nvar\n  item: TPair<string, Double>;\n  totalWeight: Double;\nbegin\n  totalWeight := 0.0;\n  for item in weights do\n  begin\n    totalWeight := totalWeight + item.Value;\n  end;\n  Result := totalWeight;\nend;\n\nvar\n  weights: TDictionary<string, Double>;\n  total: Double;\nbegin\n  weights := TDictionary<string, Double>.Create;\n  try\n    weights.Add('Item1', 2.5);\n    weights.Add('Item2', 3.0);\n    weights.Add('Item3', 1.75);\n\n    total := CalculateTotalWeight(weights);\n    WriteLn('Total weight of all items: ', total:0:2);\n  finally\n    weights.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Implement a map to store website URLs and their respective visit counts, then find the most visited website.",
    "code": "```pascal\nprogram WebsiteVisitCounter;\n\nuses\n  SysUtils, Generics.Collections;\n\nvar\n  VisitMap: TDictionary<string, Integer>;\n  Website, MostVisited: string;\n  MaxVisits, Count: Integer;\nbegin\n  VisitMap := TDictionary<string, Integer>.Create;\n  try\n    // Example data\n    VisitMap.Add('https://example.com', 100);\n    VisitMap.Add('https://anotherexample.com', 150);\n    VisitMap.Add('https://yetanotherexample.com', 75);\n\n    MostVisited := '';\n    MaxVisits := -1;\n\n    for Website in VisitMap.Keys do\n    begin\n      Count := VisitMap[Website];\n      if Count > MaxVisits then\n      begin\n        MaxVisits := Count;\n        MostVisited := Website;\n      end;\n    end;\n\n    Writeln('Most visited website: ', MostVisited, ' with ', MaxVisits, ' visits.');\n  finally\n    VisitMap.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Create a script that uses a dictionary to map error codes to error messages, and prints the message for a given code.",
    "code": "```pascal\nprogram ErrorCodeMapper;\n\nuses\n  SysUtils, Generics.Collections;\n\nvar\n  errorMap: TDictionary<Integer, String>;\n  errorCode: Integer;\n  errorMessage: String;\n  \nbegin\n  errorMap := TDictionary<Integer, String>.Create;\n  try\n    // Populate the dictionary with error codes and messages\n    errorMap.Add(404, 'Not Found');\n    errorMap.Add(500, 'Internal Server Error');\n    errorMap.Add(403, 'Forbidden');\n    \n    // Example error code to look up\n    errorCode := 404;\n\n    // Attempt to find the error message for the given error code\n    if errorMap.TryGetValue(errorCode, errorMessage) then\n      WriteLn('Error ', errorCode, ': ', errorMessage)\n    else\n      WriteLn('Error code ', errorCode, ' not recognized.');\n  finally\n    errorMap.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Design a dictionary to store contact information with names as keys and phone numbers as values, allowing updates and lookups.",
    "code": "```pascal\nprogram ContactDictionary;\n\nuses\n  SysUtils, Generics.Collections;\n\nvar\n  Contacts: TDictionary<string, string>;\n  Name, PhoneNumber: string;\n\nbegin\n  Contacts := TDictionary<string, string>.Create;\n  \n  // Add or update a contact\n  Name := 'John Doe';\n  PhoneNumber := '123-456-7890';\n  Contacts.AddOrSetValue(Name, PhoneNumber);\n  \n  // Retrieve a contact's phone number\n  Name := 'John Doe';\n  if Contacts.TryGetValue(Name, PhoneNumber) then\n    Writeln('Phone number for ', Name, ': ', PhoneNumber)\n  else\n    Writeln('Contact not found for ', Name);\n\n  // Free the dictionary\n  Contacts.Free;\nend.\n```"
  },
  {
    "task": "Write a program that uses a map to assign tasks to employees based on their skill levels.",
    "code": "```pascal\nprogram AssignTasks;\n\nuses SysUtils, Generics.Collections;\n\nvar\n  TaskMap: TDictionary<string, string>;\n  Employee, Task: string;\nbegin\n  TaskMap := TDictionary<string, string>.Create;\n  try\n    // Assign tasks to employees\n    TaskMap.Add('Alice', 'Data Analysis');\n    TaskMap.Add('Bob', 'Software Development');\n    TaskMap.Add('Charlie', 'System Administration');\n\n    // Display the tasks assigned to employees\n    for Employee in TaskMap.Keys do\n    begin\n      Task := TaskMap[Employee];\n      WriteLn(Employee, ' is assigned to ', Task);\n    end;\n\n  finally\n    TaskMap.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Create a dictionary that maps airport codes to their respective city names, and allows retrieval of city names by code.",
    "code": "```pascal\nprogram AirportDictionary;\n\nuses\n  SysUtils, Generics.Collections;\n\nvar\n  airportDict: TDictionary<string, string>;\n  cityName: string;\nbegin\n  airportDict := TDictionary<string, string>.Create;\n  try\n    airportDict.Add('JFK', 'New York');\n    airportDict.Add('LAX', 'Los Angeles');\n    airportDict.Add('ORD', 'Chicago');\n    airportDict.Add('DFW', 'Dallas/Fort Worth');\n    airportDict.Add('DEN', 'Denver');\n\n    if airportDict.TryGetValue('JFK', cityName) then\n      WriteLn('JFK: ', cityName)\n    else\n      WriteLn('Code not found');\n\n    if airportDict.TryGetValue('LAX', cityName) then\n      WriteLn('LAX: ', cityName)\n    else\n      WriteLn('Code not found');\n  finally\n    airportDict.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Build a map to store movie titles and their release years, then find all movies released in a given decade.",
    "code": "```pascal\nprogram MovieDecadeFinder;\n\nuses\n  SysUtils, Generics.Collections;\n\nvar\n  movies: TDictionary<string, Integer>;\n  title: string;\n  year, startYear, endYear: Integer;\n  decadeMovies: TList<string>;\n  decade: Integer;\nbegin\n  movies := TDictionary<string, Integer>.Create;\n  decadeMovies := TList<string>.Create;\n  \n  try\n    // Add movies to the map\n    movies.Add('The Shawshank Redemption', 1994);\n    movies.Add('The Godfather', 1972);\n    movies.Add('The Dark Knight', 2008);\n    movies.Add('Pulp Fiction', 1994);\n    movies.Add('Schindler''s List', 1993);\n    movies.Add('Forrest Gump', 1994);\n    movies.Add('Inception', 2010);\n\n    // Specify the decade to search for\n    decade := 1990;\n    startYear := decade;\n    endYear := decade + 9;\n\n    // Find movies released in the given decade\n    for title in movies.Keys do\n    begin\n      year := movies[title];\n      if (year >= startYear) and (year <= endYear) then\n        decadeMovies.Add(title);\n    end;\n\n    // Output the movies found\n    for title in decadeMovies do\n    begin\n      WriteLn(title);\n    end;\n\n  finally\n    movies.Free;\n    decadeMovies.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Write a function that uses a dictionary to group students by their grades.",
    "code": "```pascal\nprogram GroupStudentsByGrades;\n\nuses\n  SysUtils, Generics.Collections;\n\ntype\n  TStudent = record\n    Name: string;\n    Grade: string;\n  end;\n\n  TStudentList = TList<TStudent>;\n  TGradeMap = TDictionary<string, TStudentList>;\n\nfunction GroupStudentsByGrades(Students: TStudentList): TGradeMap;\nvar\n  GradeMap: TGradeMap;\n  Student: TStudent;\n  StudentList: TStudentList;\nbegin\n  GradeMap := TGradeMap.Create;\n  for Student in Students do\n  begin\n    if not GradeMap.TryGetValue(Student.Grade, StudentList) then\n    begin\n      StudentList := TStudentList.Create;\n      GradeMap.Add(Student.Grade, StudentList);\n    end;\n    StudentList.Add(Student);\n  end;\n  Result := GradeMap;\nend;\n\nvar\n  Students: TStudentList;\n  GradeMap: TGradeMap;\n  Student: TStudent;\n  Grade: string;\nbegin\n  Students := TStudentList.Create;\n  Students.Add(TStudent.Create('Alice', 'A'));\n  Students.Add(TStudent.Create('Bob', 'B'));\n  Students.Add(TStudent.Create('Charlie', 'A'));\n  Students.Add(TStudent.Create('David', 'C'));\n\n  GradeMap := GroupStudentsByGrades(Students);\n\n  for Grade in GradeMap.Keys do\n  begin\n    WriteLn('Grade ', Grade, ': ');\n    for Student in GradeMap[Grade] do\n    begin\n      WriteLn('  ', Student.Name);\n    end;\n  end;\n\n  GradeMap.Free;\n  Students.Free;\nend.\n```"
  },
  {
    "task": "Create a dictionary to store the number of visitors to different sections of a website, and determine the most visited section.",
    "code": "```pascal\nprogram MostVisitedSection;\n\nuses\n  SysUtils, Generics.Collections;\n\nvar\n  visitorCount: TDictionary<string, Integer>;\n  section: string;\n  maxVisits: Integer;\n  mostVisited: string;\nbegin\n  visitorCount := TDictionary<string, Integer>.Create;\n  try\n    // Example data\n    visitorCount.Add('Home', 150);\n    visitorCount.Add('About', 75);\n    visitorCount.Add('Contact', 30);\n    visitorCount.Add('Blog', 200);\n    visitorCount.Add('Shop', 120);\n\n    maxVisits := -1;\n    mostVisited := '';\n    \n    for section in visitorCount.Keys do\n    begin\n      if visitorCount[section] > maxVisits then\n      begin\n        maxVisits := visitorCount[section];\n        mostVisited := section;\n      end;\n    end;\n\n    WriteLn('The most visited section is: ', mostVisited);\n  finally\n    visitorCount.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Design a program that uses a map to assign project deadlines to team members, allowing for deadline extensions.",
    "code": "```pascal\nprogram ProjectDeadlines;\n\nuses\n  SysUtils, Generics.Collections;\n\nvar\n  Deadlines: TDictionary<string, TDateTime>;\n  Member: string;\n  NewDeadline: TDateTime;\n\nprocedure AssignDeadline(MemberName: string; Deadline: TDateTime);\nbegin\n  Deadlines.AddOrSetValue(MemberName, Deadline);\nend;\n\nprocedure ExtendDeadline(MemberName: string; AdditionalDays: Integer);\nvar\n  CurrentDeadline: TDateTime;\nbegin\n  if Deadlines.TryGetValue(MemberName, CurrentDeadline) then\n  begin\n    Deadlines[MemberName] := CurrentDeadline + AdditionalDays;\n  end;\nend;\n\nbegin\n  Deadlines := TDictionary<string, TDateTime>.Create;\n  try\n    AssignDeadline('Alice', StrToDate('2023-10-15'));\n    AssignDeadline('Bob', StrToDate('2023-11-01'));\n\n    ExtendDeadline('Alice', 7);\n\n  finally\n    Deadlines.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Implement a dictionary that keeps track of borrowed books in a library, allowing users to check available books.",
    "code": "```pascal\nprogram LibrarySystem;\n\nuses\n  SysUtils, Generics.Collections;\n\nvar\n  BorrowedBooks: TDictionary<string, boolean>;\n  BookTitle: string;\n\nbegin\n  BorrowedBooks := TDictionary<string, boolean>.Create;\n  try\n    { Add some books to the dictionary }\n    BorrowedBooks.Add('The Great Gatsby', False);\n    BorrowedBooks.Add('1984', True);\n    BorrowedBooks.Add('To Kill a Mockingbird', False);\n\n    { Check availability of a book }\n    Write('Enter the title of the book to check availability: ');\n    ReadLn(BookTitle);\n\n    if BorrowedBooks.ContainsKey(BookTitle) then\n    begin\n      if not BorrowedBooks[BookTitle] then\n        WriteLn('The book \"', BookTitle, '\" is available.')\n      else\n        WriteLn('The book \"', BookTitle, '\" is currently borrowed.');\n    end\n    else\n      WriteLn('The book \"', BookTitle, '\" is not in the library.');\n\n  finally\n    BorrowedBooks.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Create a map to store the names of planets and their distances from the sun, then find the closest planet to Earth.",
    "code": "```pascal\nprogram PlanetDistances;\n\nuses SysUtils;\n\ntype\n  TPlanetDistances = record\n    Name: string;\n    Distance: Double;\n  end;\n\nvar\n  Planets: array of TPlanetDistances;\n  i, ClosestIndex: Integer;\n  MinDistance: Double;\n\nbegin\n  SetLength(Planets, 8);\n  Planets[0].Name := 'Mercury';\n  Planets[0].Distance := 57.9;\n  Planets[1].Name := 'Venus';\n  Planets[1].Distance := 108.2;\n  Planets[2].Name := 'Earth';\n  Planets[2].Distance := 149.6;\n  Planets[3].Name := 'Mars';\n  Planets[3].Distance := 227.9;\n  Planets[4].Name := 'Jupiter';\n  Planets[4].Distance := 778.3;\n  Planets[5].Name := 'Saturn';\n  Planets[5].Distance := 1427.0;\n  Planets[6].Name := 'Uranus';\n  Planets[6].Distance := 2871.0;\n  Planets[7].Name := 'Neptune';\n  Planets[7].Distance := 4497.1;\n\n  MinDistance := High(Double);\n  ClosestIndex := -1;\n\n  for i := 0 to High(Planets) do\n  begin\n    if (Planets[i].Name <> 'Earth') and (Planets[i].Distance < MinDistance) then\n    begin\n      MinDistance := Planets[i].Distance;\n      ClosestIndex := i;\n    end;\n  end;\n\n  if ClosestIndex <> -1 then\n    Writeln('The closest planet to Earth is ', Planets[ClosestIndex].Name, ' with a distance of ', Planets[ClosestIndex].Distance:0:1, ' million km.');\nend.\n```"
  },
  {
    "task": "Write a script that uses a dictionary to translate Morse code into plain text.",
    "code": "```pascal\nprogram MorseCodeTranslator;\n\nuses\n  SysUtils;\n\nvar\n  MorseDictionary: array[0..35] of record\n    Morse: string;\n    Letter: char;\n  end;\n  InputMorse, WordMorse: string;\n  i, j: Integer;\n  Found: Boolean;\n\nbegin\n  MorseDictionary[0].Morse := '.-'; MorseDictionary[0].Letter := 'A';\n  MorseDictionary[1].Morse := '-...'; MorseDictionary[1].Letter := 'B';\n  MorseDictionary[2].Morse := '-.-.'; MorseDictionary[2].Letter := 'C';\n  MorseDictionary[3].Morse := '-..'; MorseDictionary[3].Letter := 'D';\n  MorseDictionary[4].Morse := '.'; MorseDictionary[4].Letter := 'E';\n  MorseDictionary[5].Morse := '..-.'; MorseDictionary[5].Letter := 'F';\n  MorseDictionary[6].Morse := '--.'; MorseDictionary[6].Letter := 'G';\n  MorseDictionary[7].Morse := '....'; MorseDictionary[7].Letter := 'H';\n  MorseDictionary[8].Morse := '..'; MorseDictionary[8].Letter := 'I';\n  MorseDictionary[9].Morse := '.---'; MorseDictionary[9].Letter := 'J';\n  MorseDictionary[10].Morse := '-.-'; MorseDictionary[10].Letter := 'K';\n  MorseDictionary[11].Morse := '.-..'; MorseDictionary[11].Letter := 'L';\n  MorseDictionary[12].Morse := '--'; MorseDictionary[12].Letter := 'M';\n  MorseDictionary[13].Morse := '-.'; MorseDictionary[13].Letter := 'N';\n  MorseDictionary[14].Morse := '---'; MorseDictionary[14].Letter := 'O';\n  MorseDictionary[15].Morse := '.--.'; MorseDictionary[15].Letter := 'P';\n  MorseDictionary[16].Morse := '--.-'; MorseDictionary[16].Letter := 'Q';\n  MorseDictionary[17].Morse := '.-.'; MorseDictionary[17].Letter := 'R';\n  MorseDictionary[18].Morse := '...'; MorseDictionary[18].Letter := 'S';\n  MorseDictionary[19].Morse := '-'; MorseDictionary[19].Letter := 'T';\n  MorseDictionary[20].Morse := '..-'; MorseDictionary[20].Letter := 'U';\n  MorseDictionary[21].Morse := '...-'; MorseDictionary[21].Letter := 'V';\n  MorseDictionary[22].Morse := '.--'; MorseDictionary[22].Letter := 'W';\n  MorseDictionary[23].Morse := '-..-'; MorseDictionary[23].Letter := 'X';\n  MorseDictionary[24].Morse := '-.--'; MorseDictionary[24].Letter := 'Y';\n  MorseDictionary[25].Morse := '--..'; MorseDictionary[25].Letter := 'Z';\n  MorseDictionary[26].Morse := '-----'; MorseDictionary[26].Letter := '0';\n  MorseDictionary[27].Morse := '.----'; MorseDictionary[27].Letter := '1';\n  MorseDictionary[28].Morse := '..---'; MorseDictionary[28].Letter := '2';\n  MorseDictionary[29].Morse := '...--'; MorseDictionary[29].Letter := '3';\n  MorseDictionary[30].Morse := '....-'; MorseDictionary[30].Letter := '4';\n  MorseDictionary[31].Morse := '.....'; MorseDictionary[31].Letter := '5';\n  MorseDictionary[32].Morse := '-....'; MorseDictionary[32].Letter := '6';\n  MorseDictionary[33].Morse := '--...'; MorseDictionary[33].Letter := '7';\n  MorseDictionary[34].Morse := '---..'; MorseDictionary[34].Letter := '8';\n  MorseDictionary[35].Morse := '----.'; MorseDictionary[35].Letter := '9';\n\n  Write('Enter Morse Code (separate letters with spaces): ');\n  ReadLn(InputMorse);\n  \n  WordMorse := '';\n  for i := 1 to Length(InputMorse) do\n  begin\n    if InputMorse[i] = ' ' then\n    begin\n      Found := False;\n      for j := 0 to High(MorseDictionary) do\n      begin\n        if MorseDictionary[j].Morse = WordMorse then\n        begin\n          Write(MorseDictionary[j].Letter);\n          Found := True;\n          Break;\n        end;\n      end;\n      if not Found then\n        Write('?');\n      WordMorse := '';\n    end\n    else\n    begin\n      WordMorse := WordMorse + InputMorse[i];\n    end;\n  end;\n\n  if WordMorse <> '' then\n  begin\n    Found := False;\n    for j := 0 to High(MorseDictionary) do\n    begin\n      if MorseDictionary[j].Morse = WordMorse then\n      begin\n        Write(MorseDictionary[j].Letter);\n        Found := True;\n        Break;\n      end;\n    end;\n    if not Found then\n      Write('?');\n  end;\n\n  WriteLn;\nend.\n```"
  },
  {
    "task": "Develop a program that uses a map to store vehicle registration numbers and their corresponding owner's name.",
    "code": "```pascal\nprogram VehicleRegistration;\n\nuses\n  Generics.Collections;\n\nvar\n  VehicleMap: TDictionary<string, string>;\n  RegistrationNumber, OwnerName: string;\nbegin\n  VehicleMap := TDictionary<string, string>.Create;\n  try\n    // Adding entries to the map\n    VehicleMap.Add('ABC123', 'John Doe');\n    VehicleMap.Add('XYZ789', 'Jane Smith');\n    VehicleMap.Add('LMN456', 'Alice Johnson');\n\n    // Example of accessing an entry\n    RegistrationNumber := 'XYZ789';\n    if VehicleMap.TryGetValue(RegistrationNumber, OwnerName) then\n      WriteLn('Owner of ', RegistrationNumber, ' is ', OwnerName)\n    else\n      WriteLn('Registration number not found.');\n\n  finally\n    VehicleMap.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Create a dictionary that maps sports teams to their win-loss records, and find the team with the best record.",
    "code": "```pascal\nprogram BestTeamFinder;\n\nuses\n  SysUtils, Generics.Collections;\n\ntype\n  TWinLossRecord = record\n    Wins: Integer;\n    Losses: Integer;\n  end;\n\nvar\n  Teams: TDictionary<string, TWinLossRecord>;\n  TeamName, BestTeam: string;\n  Record: TWinLossRecord;\n  BestRecordRatio, CurrentRatio: Double;\n\nbegin\n  Teams := TDictionary<string, TWinLossRecord>.Create;\n\n  try\n    Teams.Add('TeamA', TWinLossRecord.Create(10, 2));\n    Teams.Add('TeamB', TWinLossRecord.Create(8, 4));\n    Teams.Add('TeamC', TWinLossRecord.Create(12, 1));\n    Teams.Add('TeamD', TWinLossRecord.Create(9, 3));\n\n    BestRecordRatio := -1.0;\n    BestTeam := '';\n\n    for TeamName in Teams.Keys do\n    begin\n      Record := Teams[TeamName];\n      CurrentRatio := Record.Wins / (Record.Wins + Record.Losses);\n\n      if CurrentRatio > BestRecordRatio then\n      begin\n        BestRecordRatio := CurrentRatio;\n        BestTeam := TeamName;\n      end;\n    end;\n\n    WriteLn('The team with the best record is: ', BestTeam);\n\n  finally\n    Teams.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Write a function that uses a map to convert currency codes to full currency names.",
    "code": "```pascal\nprogram CurrencyConverter;\n\nuses\n  SysUtils, Generics.Collections;\n\nfunction ConvertCurrencyCodeToName(code: string): string;\nvar\n  currencyMap: TDictionary<string, string>;\n  currencyName: string;\nbegin\n  currencyMap := TDictionary<string, string>.Create;\n  try\n    // Populate the map with currency codes and their full names\n    currencyMap.Add('USD', 'United States Dollar');\n    currencyMap.Add('EUR', 'Euro');\n    currencyMap.Add('JPY', 'Japanese Yen');\n    currencyMap.Add('GBP', 'British Pound');\n    currencyMap.Add('AUD', 'Australian Dollar');\n    currencyMap.Add('CAD', 'Canadian Dollar');\n    currencyMap.Add('CHF', 'Swiss Franc');\n    currencyMap.Add('CNY', 'Chinese Yuan');\n    currencyMap.Add('SEK', 'Swedish Krona');\n    currencyMap.Add('NZD', 'New Zealand Dollar');\n    \n    // Lookup the currency name using the code\n    if currencyMap.TryGetValue(UpperCase(code), currencyName) then\n      Result := currencyName\n    else\n      Result := 'Unknown Currency Code';\n  finally\n    currencyMap.Free;\n  end;\nend;\n\nbegin\n  // Example usage\n  Writeln(ConvertCurrencyCodeToName('usd'));\n  Writeln(ConvertCurrencyCodeToName('eur'));\n  Writeln(ConvertCurrencyCodeToName('inr')); // Output: Unknown Currency Code\nend.\n```"
  },
  {
    "task": "Build a dictionary to store student names and their attendance counts, and determine the student with the highest attendance.",
    "code": "```pascal\nprogram AttendanceTracker;\n\nuses\n  SysUtils, Generics.Collections;\n\nvar\n  Attendance: TDictionary<string, Integer>;\n  StudentName: string;\n  MaxAttendance: Integer;\n  MaxStudent: string;\n  Pair: TPair<string, Integer>;\n\nprocedure InitializeAttendance;\nbegin\n  Attendance.Add('Alice', 5);\n  Attendance.Add('Bob', 3);\n  Attendance.Add('Charlie', 7);\n  Attendance.Add('Diana', 4);\nend;\n\nbegin\n  Attendance := TDictionary<string, Integer>.Create;\n  try\n    InitializeAttendance;\n    \n    MaxAttendance := -1;\n    MaxStudent := '';\n    for Pair in Attendance do\n    begin\n      if Pair.Value > MaxAttendance then\n      begin\n        MaxAttendance := Pair.Value;\n        MaxStudent := Pair.Key;\n      end;\n    end;\n\n    WriteLn('Student with highest attendance: ', MaxStudent, ' with ', MaxAttendance, ' days.');\n  finally\n    Attendance.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Implement a map to store the names of countries and their capitals, allowing lookups by country name.",
    "code": "```pascal\nprogram CountryCapitals;\n\nuses\n  SysUtils, Generics.Collections;\n\nvar\n  CountryCapitalMap: TDictionary<string, string>;\n  capital: string;\nbegin\n  CountryCapitalMap := TDictionary<string, string>.Create;\n  try\n    CountryCapitalMap.Add('France', 'Paris');\n    CountryCapitalMap.Add('Germany', 'Berlin');\n    CountryCapitalMap.Add('Italy', 'Rome');\n    CountryCapitalMap.Add('Spain', 'Madrid');\n    CountryCapitalMap.Add('United Kingdom', 'London');\n\n    if CountryCapitalMap.TryGetValue('Germany', capital) then\n      Writeln('The capital of Germany is ', capital)\n    else\n      Writeln('Country not found.');\n\n  finally\n    CountryCapitalMap.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Create a program that uses a dictionary to keep track of recipe ingredients and their quantities.",
    "code": "```pascal\nprogram RecipeIngredients;\n\nuses\n  SysUtils, Generics.Collections;\n\nvar\n  Ingredients: TDictionary<String, Integer>;\n  Ingredient: String;\n  Quantity: Integer;\nbegin\n  Ingredients := TDictionary<String, Integer>.Create;\n  try\n    Ingredients.Add('Flour', 500);\n    Ingredients.Add('Sugar', 200);\n    Ingredients.Add('Eggs', 4);\n    Ingredients.Add('Butter', 250);\n\n    for Ingredient in Ingredients.Keys do\n    begin\n      Quantity := Ingredients.Items[Ingredient];\n      WriteLn(Format('%s: %d', [Ingredient, Quantity]));\n    end;\n  finally\n    Ingredients.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Design a system that uses a map to associate social media usernames with user profiles.",
    "code": "```pascal\nprogram SocialMediaMap;\n\nuses\n  SysUtils, Generics.Collections;\n\ntype\n  TUserProfile = record\n    Name: string;\n    Email: string;\n    Age: Integer;\n  end;\n\nvar\n  UserMap: TDictionary<string, TUserProfile>;\n  UserProfile: TUserProfile;\n  Username: string;\n\nbegin\n  UserMap := TDictionary<string, TUserProfile>.Create;\n\n  { Example user profile }\n  UserProfile.Name := 'John Doe';\n  UserProfile.Email := 'john.doe@example.com';\n  UserProfile.Age := 30;\n  Username := 'johndoe123';\n\n  { Add user profile to map }\n  UserMap.Add(Username, UserProfile);\n\n  { Retrieve and display user profile from map }\n  if UserMap.TryGetValue(Username, UserProfile) then\n  begin\n    Writeln('Username: ', Username);\n    Writeln('Name: ', UserProfile.Name);\n    Writeln('Email: ', UserProfile.Email);\n    Writeln('Age: ', UserProfile.Age);\n  end;\n\n  UserMap.Free;\nend.\n```"
  },
  {
    "task": "Write a function that takes a dictionary of product categories and lists all products in a given category.",
    "code": "```pascal\nprogram ProductLister;\n\nuses\n  SysUtils, Generics.Collections;\n\ntype\n  TProductDict = TDictionary<string, TList<string>>;\n\nfunction ListProductsByCategory(products: TProductDict; category: string): TList<string>;\nbegin\n  if products.ContainsKey(category) then\n    Result := products[category]\n  else\n    Result := nil;\nend;\n\nvar\n  products: TProductDict;\n  category: string;\n  productList: TList<string>;\n  product: string;\nbegin\n  products := TProductDict.Create;\n  try\n    products.Add('Electronics', TList<string>.Create);\n    products['Electronics'].Add('Laptop');\n    products['Electronics'].Add('Smartphone');\n\n    products.Add('Clothing', TList<string>.Create);\n    products['Clothing'].Add('Shirt');\n    products['Clothing'].Add('Jeans');\n\n    category := 'Electronics';\n    productList := ListProductsByCategory(products, category);\n    if Assigned(productList) then\n    begin\n      for product in productList do\n        WriteLn(product);\n    end\n    else\n      WriteLn('Category not found.');\n  finally\n    products.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Create a dictionary to store shopping list items and their quantities, and implement a function to update quantities.",
    "code": "```pascal\nprogram ShoppingList;\n\nuses\n  SysUtils, Generics.Collections;\n\ntype\n  TShoppingList = class\n  private\n    FItems: TDictionary<string, Integer>;\n  public\n    constructor Create;\n    destructor Destroy; override;\n    procedure UpdateQuantity(const Item: string; Quantity: Integer);\n    procedure PrintList;\n  end;\n\nconstructor TShoppingList.Create;\nbegin\n  FItems := TDictionary<string, Integer>.Create;\nend;\n\ndestructor TShoppingList.Destroy;\nbegin\n  FItems.Free;\n  inherited;\nend;\n\nprocedure TShoppingList.UpdateQuantity(const Item: string; Quantity: Integer);\nbegin\n  if FItems.ContainsKey(Item) then\n    FItems[Item] := FItems[Item] + Quantity\n  else\n    FItems.Add(Item, Quantity);\nend;\n\nprocedure TShoppingList.PrintList;\nvar\n  Key: string;\nbegin\n  for Key in FItems.Keys do\n    Writeln(Key, ': ', FItems[Key]);\nend;\n\nvar\n  ShoppingList: TShoppingList;\nbegin\n  ShoppingList := TShoppingList.Create;\n  try\n    ShoppingList.UpdateQuantity('Apples', 10);\n    ShoppingList.UpdateQuantity('Bananas', 5);\n    ShoppingList.UpdateQuantity('Apples', 2);\n    ShoppingList.PrintList;\n  finally\n    ShoppingList.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Build a program that uses a map to store historical events and their dates, and finds events that occurred in a given year.",
    "code": "```pascal\nprogram HistoricalEvents;\n\nuses SysUtils, Generics.Collections;\n\nvar\n  events: TDictionary<string, Integer>;\n  event: string;\n  year, searchYear: Integer;\n  eventList: TStringList;\n\nbegin\n  events := TDictionary<string, Integer>.Create;\n  try\n    events.Add('Moon Landing', 1969);\n    events.Add('Fall of Berlin Wall', 1989);\n    events.Add('World Wide Web Invented', 1991);\n    events.Add('Y2K', 2000);\n\n    Write('Enter a year to search for historical events: ');\n    ReadLn(searchYear);\n\n    eventList := TStringList.Create;\n    try\n      for event in events.Keys do\n      begin\n        if events[event] = searchYear then\n          eventList.Add(event);\n      end;\n\n      if eventList.Count > 0 then\n      begin\n        WriteLn('Events in ', searchYear, ':');\n        for event in eventList do\n          WriteLn(' - ', event);\n      end\n      else\n        WriteLn('No events found for the year ', searchYear);\n    finally\n      eventList.Free;\n    end;\n  finally\n    events.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Implement a dictionary to manage user roles and permissions within an application.",
    "code": "```pascal\nprogram UserRolePermissions;\n\nuses\n  SysUtils, Generics.Collections;\n\nvar\n  UserRoles: TDictionary<string, TList<string>>;\n  Role, Permission: string;\n  Permissions: TList<string>;\n\nbegin\n  UserRoles := TDictionary<string, TList<string>>.Create;\n\n  // Adding roles and permissions\n  Permissions := TList<string>.Create;\n  Permissions.Add('Read');\n  Permissions.Add('Write');\n  UserRoles.Add('Admin', Permissions);\n\n  Permissions := TList<string>.Create;\n  Permissions.Add('Read');\n  UserRoles.Add('User', Permissions);\n\n  Permissions := TList<string>.Create;\n  UserRoles.Add('Guest', Permissions);\n\n  // Example usage to print roles and permissions\n  for Role in UserRoles.Keys do\n  begin\n    WriteLn('Role: ', Role);\n    Permissions := UserRoles[Role];\n    for Permission in Permissions do\n    begin\n      WriteLn('  Permission: ', Permission);\n    end;\n  end;\n\n  // Clean up\n  for Permissions in UserRoles.Values do\n    Permissions.Free;\n  UserRoles.Free;\nend.\n```"
  },
  {
    "task": "Write a script that uses a map to convert numeric grades to letter grades.",
    "code": "```pascal\nprogram GradeConverter;\n\nuses\n  SysUtils, Generics.Collections;\n\nvar\n  GradeMap: TDictionary<Integer, Char>;\n  NumericGrade: Integer;\n  LetterGrade: Char;\n\nbegin\n  GradeMap := TDictionary<Integer, Char>.Create;\n  try\n    GradeMap.Add(90, 'A');\n    GradeMap.Add(80, 'B');\n    GradeMap.Add(70, 'C');\n    GradeMap.Add(60, 'D');\n    GradeMap.Add(0, 'F');\n\n    Write('Enter numeric grade: ');\n    ReadLn(NumericGrade);\n\n    if (NumericGrade >= 90) then\n      LetterGrade := GradeMap[90]\n    else if (NumericGrade >= 80) then\n      LetterGrade := GradeMap[80]\n    else if (NumericGrade >= 70) then\n      LetterGrade := GradeMap[70]\n    else if (NumericGrade >= 60) then\n      LetterGrade := GradeMap[60]\n    else\n      LetterGrade := GradeMap[0];\n\n    WriteLn('Letter grade: ', LetterGrade);\n  finally\n    GradeMap.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Create a dictionary that maps holiday names to their corresponding dates, and allows lookup by holiday name.",
    "code": "```pascal\nprogram HolidayDictionary;\n\nuses\n  SysUtils, Generics.Collections;\n\nvar\n  Holidays: TDictionary<string, TDateTime>;\n  HolidayName: string;\n  HolidayDate: TDateTime;\nbegin\n  Holidays := TDictionary<string, TDateTime>.Create;\n  try\n    Holidays.Add('New Year''s Day', EncodeDate(2023, 1, 1));\n    Holidays.Add('Independence Day', EncodeDate(2023, 7, 4));\n    Holidays.Add('Christmas Day', EncodeDate(2023, 12, 25));\n\n    HolidayName := 'Christmas Day';\n    if Holidays.TryGetValue(HolidayName, HolidayDate) then\n      Writeln(Format('%s is on %s', [HolidayName, DateToStr(HolidayDate)]))\n    else\n      Writeln('Holiday not found.');\n\n  finally\n    Holidays.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Design a system that uses a map to track the status of online orders, allowing updates to order status.",
    "code": "```pascal\nprogram OrderStatusTracker;\n\nuses\n  SysUtils, Generics.Collections;\n\ntype\n  TOrderStatus = (Pending, Processing, Shipped, Delivered, Cancelled);\n\nvar\n  OrderStatuses: TDictionary<Integer, TOrderStatus>;\n\nprocedure UpdateOrderStatus(OrderID: Integer; NewStatus: TOrderStatus);\nbegin\n  if OrderStatuses.ContainsKey(OrderID) then\n    OrderStatuses[OrderID] := NewStatus\n  else\n    writeln('Order ID not found.');\nend;\n\nprocedure PrintOrderStatus(OrderID: Integer);\nbegin\n  if OrderStatuses.ContainsKey(OrderID) then\n    writeln('Order ', OrderID, ' Status: ', Ord(OrderStatuses[OrderID]))\n  else\n    writeln('Order ID not found.');\nend;\n\nbegin\n  OrderStatuses := TDictionary<Integer, TOrderStatus>.Create;\n\n  OrderStatuses.Add(1001, Pending);\n  OrderStatuses.Add(1002, Shipped);\n\n  PrintOrderStatus(1001);\n  UpdateOrderStatus(1001, Delivered);\n  PrintOrderStatus(1001);\n\n  PrintOrderStatus(1002);\n  UpdateOrderStatus(1002, Cancelled);\n  PrintOrderStatus(1002);\n\n  OrderStatuses.Free;\nend.\n```"
  },
  {
    "task": "Develop a program that uses a dictionary to associate food items with their nutritional information.",
    "code": "```pascal\nprogram FoodNutritionalInfo;\n\nuses\n  SysUtils, Generics.Collections;\n\ntype\n  TNutritionalInfo = record\n    Calories: Integer;\n    Protein: Single;\n    Carbohydrates: Single;\n    Fats: Single;\n  end;\n\nvar\n  FoodDictionary: TDictionary<string, TNutritionalInfo>;\n  NutritionalInfo: TNutritionalInfo;\n  FoodItem: string;\n  \nbegin\n  FoodDictionary := TDictionary<string, TNutritionalInfo>.Create;\n\n  try\n    NutritionalInfo.Calories := 52;\n    NutritionalInfo.Protein := 0.3;\n    NutritionalInfo.Carbohydrates := 14;\n    NutritionalInfo.Fats := 0.2;\n    FoodDictionary.Add('Apple', NutritionalInfo);\n\n    NutritionalInfo.Calories := 89;\n    NutritionalInfo.Protein := 1.1;\n    NutritionalInfo.Carbohydrates := 23;\n    NutritionalInfo.Fats := 0.3;\n    FoodDictionary.Add('Banana', NutritionalInfo);\n\n    for FoodItem in FoodDictionary.Keys do\n    begin\n      NutritionalInfo := FoodDictionary[FoodItem];\n      WriteLn(Format('Food: %s, Calories: %d, Protein: %.1f, Carbohydrates: %.1f, Fats: %.1f',\n        [FoodItem, NutritionalInfo.Calories, NutritionalInfo.Protein, NutritionalInfo.Carbohydrates, NutritionalInfo.Fats]));\n    end;\n    \n  finally\n    FoodDictionary.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Create a map to store book genres and lists of book titles, allowing retrieval of all books in a given genre.",
    "code": "```pascal\nprogram BookGenres;\n\nuses\n  SysUtils, Generics.Collections;\n\nvar\n  BookMap: TDictionary<string, TList<string>>;\n\nprocedure AddBook(genre, title: string);\nbegin\n  if not BookMap.ContainsKey(genre) then\n    BookMap.Add(genre, TList<string>.Create);\n  BookMap[genre].Add(title);\nend;\n\nfunction GetBooksByGenre(genre: string): TList<string>;\nbegin\n  if BookMap.ContainsKey(genre) then\n    Result := BookMap[genre]\n  else\n    Result := nil;\nend;\n\nvar\n  books: TList<string>;\n  i: Integer;\nbegin\n  BookMap := TDictionary<string, TList<string>>.Create;\n  try\n    AddBook('Fantasy', 'The Hobbit');\n    AddBook('Fantasy', 'Harry Potter and the Sorcerer''s Stone');\n    AddBook('Science Fiction', 'Dune');\n    \n    books := GetBooksByGenre('Fantasy');\n    if books <> nil then\n    begin\n      for i := 0 to books.Count - 1 do\n        WriteLn(books[i]);\n    end;\n\n  finally\n    for books in BookMap.Values do\n      books.Free;\n    BookMap.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Write a function that uses a dictionary to convert state abbreviations to full state names.",
    "code": "```pascal\nprogram StateAbbreviationConverter;\n\nuses\n  SysUtils, Generics.Collections;\n\nfunction GetStateName(abbreviation: string): string;\nvar\n  states: TDictionary<string, string>;\nbegin\n  states := TDictionary<string, string>.Create;\n  try\n    states.Add('AL', 'Alabama');\n    states.Add('AK', 'Alaska');\n    states.Add('AZ', 'Arizona');\n    states.Add('AR', 'Arkansas');\n    states.Add('CA', 'California');\n    states.Add('CO', 'Colorado');\n    states.Add('CT', 'Connecticut');\n    states.Add('DE', 'Delaware');\n    states.Add('FL', 'Florida');\n    states.Add('GA', 'Georgia');\n    states.Add('HI', 'Hawaii');\n    states.Add('ID', 'Idaho');\n    states.Add('IL', 'Illinois');\n    states.Add('IN', 'Indiana');\n    states.Add('IA', 'Iowa');\n    states.Add('KS', 'Kansas');\n    states.Add('KY', 'Kentucky');\n    states.Add('LA', 'Louisiana');\n    states.Add('ME', 'Maine');\n    states.Add('MD', 'Maryland');\n    states.Add('MA', 'Massachusetts');\n    states.Add('MI', 'Michigan');\n    states.Add('MN', 'Minnesota');\n    states.Add('MS', 'Mississippi');\n    states.Add('MO', 'Missouri');\n    states.Add('MT', 'Montana');\n    states.Add('NE', 'Nebraska');\n    states.Add('NV', 'Nevada');\n    states.Add('NH', 'New Hampshire');\n    states.Add('NJ', 'New Jersey');\n    states.Add('NM', 'New Mexico');\n    states.Add('NY', 'New York');\n    states.Add('NC', 'North Carolina');\n    states.Add('ND', 'North Dakota');\n    states.Add('OH', 'Ohio');\n    states.Add('OK', 'Oklahoma');\n    states.Add('OR', 'Oregon');\n    states.Add('PA', 'Pennsylvania');\n    states.Add('RI', 'Rhode Island');\n    states.Add('SC', 'South Carolina');\n    states.Add('SD', 'South Dakota');\n    states.Add('TN', 'Tennessee');\n    states.Add('TX', 'Texas');\n    states.Add('UT', 'Utah');\n    states.Add('VT', 'Vermont');\n    states.Add('VA', 'Virginia');\n    states.Add('WA', 'Washington');\n    states.Add('WV', 'West Virginia');\n    states.Add('WI', 'Wisconsin');\n    states.Add('WY', 'Wyoming');\n\n    if states.TryGetValue(UpperCase(abbreviation), Result) then\n      Exit\n    else\n      Result := 'Unknown abbreviation';\n  finally\n    states.Free;\n  end;\nend;\n\nbegin\n  WriteLn(GetStateName('CA')); // Example Usage\n  WriteLn(GetStateName('NY'));\n  WriteLn(GetStateName('TX'));\nend.\n```"
  },
  {
    "task": "Build a dictionary to store customer names and their order histories.",
    "code": "```pascal\nprogram CustomerOrderHistory;\n\nuses\n  SysUtils, Generics.Collections;\n\ntype\n  TOrderHistory = TList<string>;\n  TCustomerOrders = TDictionary<string, TOrderHistory>;\n\nvar\n  CustomerOrders: TCustomerOrders;\n  OrderHistory: TOrderHistory;\n  CustomerName: string;\n  I: Integer;\n\nbegin\n  CustomerOrders := TCustomerOrders.Create;\n\n  try\n    // Example: Adding an order history for a customer\n    CustomerName := 'John Doe';\n    OrderHistory := TOrderHistory.Create;\n    OrderHistory.Add('Order 1: Book');\n    OrderHistory.Add('Order 2: Laptop');\n    CustomerOrders.Add(CustomerName, OrderHistory);\n\n    CustomerName := 'Jane Smith';\n    OrderHistory := TOrderHistory.Create;\n    OrderHistory.Add('Order 1: Phone');\n    CustomerOrders.Add(CustomerName, OrderHistory);\n\n    // Displaying the order histories\n    for CustomerName in CustomerOrders.Keys do\n    begin\n      WriteLn('Customer: ', CustomerName);\n      OrderHistory := CustomerOrders[CustomerName];\n      for I := 0 to OrderHistory.Count - 1 do\n      begin\n        WriteLn('  ', OrderHistory[I]);\n      end;\n    end;\n\n  finally\n    for OrderHistory in CustomerOrders.Values do\n      OrderHistory.Free;\n    CustomerOrders.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Implement a map to manage parking lot spaces, tracking which spaces are occupied.",
    "code": "```pascal\nprogram ParkingLotManager;\n\nuses\n  SysUtils, Generics.Collections;\n\nvar\n  ParkingLot: TDictionary<Integer, Boolean>;\n  SpaceNumber: Integer;\n  IsOccupied: Boolean;\n\nbegin\n  ParkingLot := TDictionary<Integer, Boolean>.Create;\n\n  // Example: Adding spaces and marking them as occupied or not\n  ParkingLot.Add(1, True);  // Space 1 is occupied\n  ParkingLot.Add(2, False); // Space 2 is not occupied\n  ParkingLot.Add(3, True);  // Space 3 is occupied\n  \n  // Check if a specific space is occupied\n  SpaceNumber := 2;\n  if ParkingLot.TryGetValue(SpaceNumber, IsOccupied) then\n  begin\n    if IsOccupied then\n      Writeln(Format('Space %d is occupied.', [SpaceNumber]))\n    else\n      Writeln(Format('Space %d is not occupied.', [SpaceNumber]));\n  end\n  else\n    Writeln(Format('Space %d does not exist in the parking lot.', [SpaceNumber]));\n\n  // Free the dictionary after use\n  ParkingLot.Free;\nend.\n```"
  },
  {
    "task": "Create a program that uses a dictionary to track the scores of players in a game.",
    "code": "```pascal\nprogram PlayerScores;\n\nuses\n  SysUtils, Generics.Collections;\n\nvar\n  PlayerScores: TDictionary<string, Integer>;\n  PlayerName: string;\n  Score: Integer;\n\nbegin\n  PlayerScores := TDictionary<string, Integer>.Create;\n  try\n    // Sample data\n    PlayerScores.Add('Alice', 10);\n    PlayerScores.Add('Bob', 15);\n    PlayerScores.Add('Charlie', 20);\n\n    // Display the scores\n    for PlayerName in PlayerScores.Keys do\n    begin\n      Score := PlayerScores[PlayerName];\n      WriteLn(PlayerName, ': ', Score);\n    end;\n\n  finally\n    PlayerScores.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Design a dictionary to store scientific terms and their definitions, allowing users to look up definitions.",
    "code": "```pascal\nprogram ScientificTermsDictionary;\n\nuses\n  SysUtils, Generics.Collections;\n\nvar\n  dictionary: TDictionary<string, string>;\n  term, definition: string;\n  response: Char;\n\nbegin\n  dictionary := TDictionary<string, string>.Create;\n  try\n    dictionary.Add('Atom', 'The basic unit of a chemical element.');\n    dictionary.Add('Molecule', 'A group of atoms bonded together.');\n    dictionary.Add('Photosynthesis', 'The process by which green plants use sunlight to synthesize nutrients from carbon dioxide and water.');\n    \n    repeat\n      Write('Enter a scientific term to look up: ');\n      ReadLn(term);\n      \n      if dictionary.TryGetValue(term, definition) then\n        WriteLn('Definition: ', definition)\n      else\n        WriteLn('Term not found in the dictionary.');\n      \n      Write('Do you want to look up another term? (Y/N): ');\n      ReadLn(response);\n    until UpCase(response) <> 'Y';\n  finally\n    dictionary.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Write a function that uses a map to convert temperature scales (e.g., Celsius to Fahrenheit).",
    "code": "```pascal\nprogram TemperatureConversion;\n\nuses\n  SysUtils, Generics.Collections;\n\nvar\n  temperatureMap: TDictionary<string, TFunc<Double, Double>>;\n\nfunction CelsiusToFahrenheit(celsius: Double): Double;\nbegin\n  Result := celsius * 9/5 + 32;\nend;\n\nfunction FahrenheitToCelsius(fahrenheit: Double): Double;\nbegin\n  Result := (fahrenheit - 32) * 5/9;\nend;\n\nprocedure InitializeMap;\nbegin\n  temperatureMap := TDictionary<string, TFunc<Double, Double>>.Create;\n  temperatureMap.Add('CtoF', @CelsiusToFahrenheit);\n  temperatureMap.Add('FtoC', @FahrenheitToCelsius);\nend;\n\nfunction ConvertTemperature(scale: string; temperature: Double): Double;\nbegin\n  if temperatureMap.ContainsKey(scale) then\n    Result := temperatureMap[scale](temperature)\n  else\n    raise Exception.Create('Conversion scale not supported');\nend;\n\nbegin\n  InitializeMap;\n  try\n    Writeln('25 Celsius to Fahrenheit: ', ConvertTemperature('CtoF', 25):0:2);\n    Writeln('77 Fahrenheit to Celsius: ', ConvertTemperature('FtoC', 77):0:2);\n  finally\n    temperatureMap.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Create a dictionary to store employee names and their respective departments.",
    "code": "```pascal\nprogram EmployeeDepartments;\n\nuses\n  Generics.Collections;\n\nvar\n  employeeDepartments: TDictionary<string, string>;\nbegin\n  employeeDepartments := TDictionary<string, string>.Create;\n\n  employeeDepartments.Add('Alice', 'HR');\n  employeeDepartments.Add('Bob', 'IT');\n  employeeDepartments.Add('Charlie', 'Finance');\n\n  employeeDepartments.Free;\nend.\n```"
  },
  {
    "task": "Build a program that uses a map to store tourist attractions and their locations.",
    "code": "```pascal\nprogram TouristAttractions;\n\nuses\n  SysUtils, Generics.Collections;\n\nvar\n  attractions: TDictionary<string, string>;\n  key: string;\nbegin\n  attractions := TDictionary<string, string>.Create;\n  try\n    attractions.Add('Eiffel Tower', 'Paris');\n    attractions.Add('Statue of Liberty', 'New York');\n    attractions.Add('Colosseum', 'Rome');\n    attractions.Add('Great Wall', 'China');\n\n    for key in attractions.Keys do\n      Writeln(Format('%s is located in %s', [key, attractions[key]]));\n  finally\n    attractions.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Implement a dictionary to manage a collection of music albums, allowing additions and removals.",
    "code": "```pascal\nprogram MusicAlbumsManager;\n\nuses\n  SysUtils, Generics.Collections;\n\ntype\n  TMusicAlbums = class\n  private\n    FAlbums: TDictionary<string, string>;\n  public\n    constructor Create;\n    destructor Destroy; override;\n    procedure AddAlbum(const Artist, Album: string);\n    procedure RemoveAlbum(const Artist: string);\n    procedure DisplayAlbums;\n  end;\n\nconstructor TMusicAlbums.Create;\nbegin\n  FAlbums := TDictionary<string, string>.Create;\nend;\n\ndestructor TMusicAlbums.Destroy;\nbegin\n  FAlbums.Free;\n  inherited;\nend;\n\nprocedure TMusicAlbums.AddAlbum(const Artist, Album: string);\nbegin\n  FAlbums.AddOrSetValue(Artist, Album);\nend;\n\nprocedure TMusicAlbums.RemoveAlbum(const Artist: string);\nbegin\n  FAlbums.Remove(Artist);\nend;\n\nprocedure TMusicAlbums.DisplayAlbums;\nvar\n  Artist, Album: string;\nbegin\n  for Artist in FAlbums.Keys do\n  begin\n    Album := FAlbums.Items[Artist];\n    Writeln(Artist, ': ', Album);\n  end;\nend;\n\nvar\n  MusicAlbums: TMusicAlbums;\nbegin\n  MusicAlbums := TMusicAlbums.Create;\n  try\n    MusicAlbums.AddAlbum('The Beatles', 'Abbey Road');\n    MusicAlbums.AddAlbum('Pink Floyd', 'The Dark Side of the Moon');\n    MusicAlbums.DisplayAlbums;\n    MusicAlbums.RemoveAlbum('The Beatles');\n    MusicAlbums.DisplayAlbums;\n  finally\n    MusicAlbums.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Write a script that uses a map to track the inventory of a small retail store.",
    "code": "```pascal\nprogram StoreInventory;\n\nuses\n  SysUtils, Generics.Collections;\n\nvar\n  Inventory: TDictionary<string, Integer>;\n  ItemName: string;\n  ItemQuantity: Integer;\n\nbegin\n  Inventory := TDictionary<string, Integer>.Create;\n\n  // Adding items to the inventory\n  Inventory.Add('Apple', 50);\n  Inventory.Add('Banana', 30);\n  Inventory.Add('Orange', 20);\n\n  // Update inventory\n  ItemName := 'Banana';\n  if Inventory.TryGetValue(ItemName, ItemQuantity) then\n    Inventory[ItemName] := ItemQuantity + 20\n  else\n    Inventory.Add(ItemName, 20);\n\n  // Check inventory\n  for ItemName in Inventory.Keys do\n  begin\n    Inventory.TryGetValue(ItemName, ItemQuantity);\n    WriteLn(ItemName, ': ', ItemQuantity);\n  end;\n\n  Inventory.Free;\nend.\n```"
  },
  {
    "task": "Create a dictionary to store the names of rivers and their lengths, allowing length lookups by river name.",
    "code": "```pascal\nprogram RiverLengths;\n\nuses\n  SysUtils, Generics.Collections;\n\nvar\n  RiverLengths: TDictionary<string, Integer>;\n  Length: Integer;\n  RiverName: string;\nbegin\n  RiverLengths := TDictionary<string, Integer>.Create;\n  try\n    RiverLengths.Add('Nile', 6650);\n    RiverLengths.Add('Amazon', 6400);\n    RiverLengths.Add('Yangtze', 6300);\n\n    Write('Enter the name of the river: ');\n    ReadLn(RiverName);\n\n    if RiverLengths.TryGetValue(RiverName, Length) then\n      WriteLn('The length of the ', RiverName, ' is ', Length, ' km.')\n    else\n      WriteLn('River not found.');\n  finally\n    RiverLengths.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Design a system that uses a map to track the availability of conference rooms in an office building.",
    "code": "```pascal\nprogram ConferenceRoomTracker;\n\nuses\n  SysUtils, Generics.Collections;\n\nvar\n  RoomAvailability: TDictionary<string, Boolean>;\n  RoomName: string;\n  IsAvailable: Boolean;\n\nbegin\n  RoomAvailability := TDictionary<string, Boolean>.Create;\n  try\n    // Add rooms to the dictionary\n    RoomAvailability.Add('Room101', True);\n    RoomAvailability.Add('Room102', False);\n    RoomAvailability.Add('Room103', True);\n\n    // Check availability of a specific room\n    Write('Enter the room name to check availability: ');\n    ReadLn(RoomName);\n\n    if RoomAvailability.TryGetValue(RoomName, IsAvailable) then\n    begin\n      if IsAvailable then\n        WriteLn(RoomName, ' is available.')\n      else\n        WriteLn(RoomName, ' is not available.');\n    end\n    else\n      WriteLn('Room not found.');\n\n  finally\n    RoomAvailability.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Develop a program that uses a dictionary to associate animal species with their habitats.",
    "code": "```pascal\nprogram AnimalHabitats;\n\nuses\n  SysUtils, Generics.Collections;\n\nvar\n  habitats: TDictionary<string, string>;\n  animal: string;\nbegin\n  habitats := TDictionary<string, string>.Create;\n  try\n    habitats.Add('Lion', 'Savannah');\n    habitats.Add('Penguin', 'Antarctica');\n    habitats.Add('Kangaroo', 'Australia');\n    habitats.Add('Panda', 'Forest');\n    habitats.Add('Eagle', 'Mountains');\n\n    for animal in habitats.Keys do\n      WriteLn('The ', animal, ' lives in ', habitats[animal]);\n  finally\n    habitats.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Create a map to store the names of mountains and their elevations, then find the tallest mountain.",
    "code": "```pascal\nprogram TallestMountain;\n\nuses SysUtils, Generics.Collections;\n\ntype\n  TMountainMap = TDictionary<string, Integer>;\n\nvar\n  MountainMap: TMountainMap;\n  MountainName: string;\n  Elevation, MaxElevation: Integer;\n  TallestMountain: string;\n\nbegin\n  MountainMap := TMountainMap.Create;\n\n  try\n    // Add mountains and their elevations to the map\n    MountainMap.Add('Mount Everest', 8848);\n    MountainMap.Add('K2', 8611);\n    MountainMap.Add('Kangchenjunga', 8586);\n    MountainMap.Add('Lhotse', 8516);\n    MountainMap.Add('Makalu', 8485);\n\n    MaxElevation := -1;\n    TallestMountain := '';\n\n    // Find the tallest mountain\n    for MountainName in MountainMap.Keys do\n    begin\n      Elevation := MountainMap[MountainName];\n      if Elevation > MaxElevation then\n      begin\n        MaxElevation := Elevation;\n        TallestMountain := MountainName;\n      end;\n    end;\n\n    // Output the name of the tallest mountain\n    WriteLn('The tallest mountain is: ', TallestMountain, ' with an elevation of ', MaxElevation, ' meters.');\n\n  finally\n    MountainMap.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Write a function that uses a dictionary to convert time zones to their respective UTC offsets.",
    "code": "```pascal\nprogram TimeZoneToUTCOffset;\n\nuses\n  SysUtils, Generics.Collections;\n\nfunction GetUTCOffset(const timeZone: string): string;\nvar\n  timeZoneOffsets: TDictionary<string, string>;\nbegin\n  timeZoneOffsets := TDictionary<string, string>.Create;\n  try\n    timeZoneOffsets.Add('PST', '-08:00');\n    timeZoneOffsets.Add('EST', '-05:00');\n    timeZoneOffsets.Add('CST', '-06:00');\n    timeZoneOffsets.Add('MST', '-07:00');\n    timeZoneOffsets.Add('GMT', '+00:00');\n    timeZoneOffsets.Add('CET', '+01:00');\n    timeZoneOffsets.Add('IST', '+05:30');\n    timeZoneOffsets.Add('JST', '+09:00');\n\n    if timeZoneOffsets.TryGetValue(timeZone, Result) then\n      Exit\n    else\n      Result := 'Unknown Time Zone';\n  finally\n    timeZoneOffsets.Free;\n  end;\nend;\n\nbegin\n  WriteLn(GetUTCOffset('PST'));\n  WriteLn(GetUTCOffset('EST'));\n  WriteLn(GetUTCOffset('Unknown'));\nend.\n```"
  },
  {
    "task": "Build a dictionary to store the names of programming languages and their creators.",
    "code": "```pascal\nprogram LanguageCreators;\n\nuses\n  SysUtils, Generics.Collections;\n\nvar\n  languageCreators: TDictionary<string, string>;\nbegin\n  languageCreators := TDictionary<string, string>.Create;\n\n  languageCreators.Add('Pascal', 'Niklaus Wirth');\n  languageCreators.Add('C', 'Dennis Ritchie');\n  languageCreators.Add('Python', 'Guido van Rossum');\n  languageCreators.Add('Java', 'James Gosling');\n  languageCreators.Add('Ruby', 'Yukihiro Matsumoto');\n\n  // Free the dictionary after use\n  languageCreators.Free;\nend.\n```"
  },
  {
    "task": "Implement a map to manage a list of subscribers to a newsletter, allowing subscriptions and cancellations.",
    "code": "```pascal\nprogram NewsletterManager;\n\nuses\n  SysUtils, Generics.Collections;\n\nvar\n  Subscribers: TDictionary<String, Boolean>;\n\nprocedure Subscribe(const Email: String);\nbegin\n  if not Subscribers.ContainsKey(Email) then\n  begin\n    Subscribers.Add(Email, True);\n    WriteLn(Email, ' subscribed successfully.');\n  end\n  else\n    WriteLn(Email, ' is already subscribed.');\nend;\n\nprocedure Unsubscribe(const Email: String);\nbegin\n  if Subscribers.ContainsKey(Email) then\n  begin\n    Subscribers.Remove(Email);\n    WriteLn(Email, ' unsubscribed successfully.');\n  end\n  else\n    WriteLn(Email, ' is not subscribed.');\nend;\n\nvar\n  Command, Email: String;\n\nbegin\n  Subscribers := TDictionary<String, Boolean>.Create;\n  try\n    while True do\n    begin\n      Write('Enter command (subscribe/unsubscribe/exit): ');\n      ReadLn(Command);\n      if Command = 'exit' then\n        Break;\n        \n      Write('Enter email: ');\n      ReadLn(Email);\n\n      if Command = 'subscribe' then\n        Subscribe(Email)\n      else if Command = 'unsubscribe' then\n        Unsubscribe(Email)\n      else\n        WriteLn('Unknown command.');\n    end;\n  finally\n    Subscribers.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Create a program that uses a dictionary to track the number of likes for social media posts.",
    "code": "```pascal\nprogram SocialMediaLikes;\n\nuses SysUtils, Generics.Collections;\n\nvar\n  LikesDictionary: TDictionary<string, Integer>;\n  PostID: string;\n  i, NumPosts, Likes: Integer;\nbegin\n  LikesDictionary := TDictionary<string, Integer>.Create;\n  try\n    { Example: Adding likes to posts }\n    NumPosts := 3; { Number of posts to track }\n\n    for i := 1 to NumPosts do\n    begin\n      PostID := 'Post' + IntToStr(i);\n      Likes := Random(100); { Random number of likes for demonstration }\n      LikesDictionary.Add(PostID, Likes);\n    end;\n\n    { Displaying the number of likes for each post }\n    for PostID in LikesDictionary.Keys do\n    begin\n      WriteLn(PostID + ' has ' + IntToStr(LikesDictionary[PostID]) + ' likes.');\n    end;\n\n  finally\n    LikesDictionary.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Design a dictionary to store the names of elements and their atomic numbers, allowing lookups by element name.",
    "code": "```pascal\nprogram ElementLookup;\n\nuses\n  SysUtils, Generics.Collections;\n\nvar\n  elementDictionary: TDictionary<string, Integer>;\n  atomicNumber: Integer;\n  elementName: string;\n\nbegin\n  elementDictionary := TDictionary<string, Integer>.Create;\n\n  try\n    elementDictionary.Add('Hydrogen', 1);\n    elementDictionary.Add('Helium', 2);\n    elementDictionary.Add('Lithium', 3);\n    elementDictionary.Add('Beryllium', 4);\n    elementDictionary.Add('Boron', 5);\n    elementDictionary.Add('Carbon', 6);\n    elementDictionary.Add('Nitrogen', 7);\n    elementDictionary.Add('Oxygen', 8);\n    elementDictionary.Add('Fluorine', 9);\n    elementDictionary.Add('Neon', 10);\n    \n    Write('Enter the name of the element: ');\n    ReadLn(elementName);\n    \n    if elementDictionary.TryGetValue(elementName, atomicNumber) then\n      WriteLn('The atomic number of ', elementName, ' is ', atomicNumber)\n    else\n      WriteLn('Element not found.');\n\n  finally\n    elementDictionary.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Write a function that uses a map to group movies by their directors.",
    "code": "```pascal\nprogram GroupMoviesByDirector;\n\nuses\n  SysUtils, Generics.Collections;\n\ntype\n  TMovie = record\n    Title: string;\n    Director: string;\n  end;\n\nfunction GroupMoviesByDirector(movies: TArray<TMovie>): TDictionary<string, TList<string>>;\nvar\n  movie: TMovie;\n  directorMoviesMap: TDictionary<string, TList<string>>;\n  movieList: TList<string>;\nbegin\n  directorMoviesMap := TDictionary<string, TList<string>>.Create;\n\n  for movie in movies do\n  begin\n    if not directorMoviesMap.TryGetValue(movie.Director, movieList) then\n    begin\n      movieList := TList<string>.Create;\n      directorMoviesMap.Add(movie.Director, movieList);\n    end;\n    movieList.Add(movie.Title);\n  end;\n\n  Result := directorMoviesMap;\nend;\n\nvar\n  movies: TArray<TMovie>;\n  directorMovies: TDictionary<string, TList<string>>;\n  director: string;\n  titles: TList<string>;\nbegin\n  // Example usage\n  movies := TArray<TMovie>.Create(\n    TMovie.Create('Inception', 'Christopher Nolan'),\n    TMovie.Create('Interstellar', 'Christopher Nolan'),\n    TMovie.Create('Pulp Fiction', 'Quentin Tarantino')\n  );\n\n  directorMovies := GroupMoviesByDirector(movies);\n  try\n    for director in directorMovies.Keys do\n    begin\n      WriteLn('Director: ', director);\n      titles := directorMovies[director];\n      for var title in titles do\n        WriteLn('  Movie: ', title);\n    end;\n  finally\n    for titles in directorMovies.Values do\n      titles.Free;\n    directorMovies.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Create a dictionary to store the names of historical figures and their birth years.",
    "code": "```pascal\nprogram HistoricalFigures;\n\nuses\n  SysUtils, Generics.Collections;\n\nvar\n  HistoricalFigures: TDictionary<string, Integer>;\nbegin\n  HistoricalFigures := TDictionary<string, Integer>.Create;\n  try\n    HistoricalFigures.Add('Albert Einstein', 1879);\n    HistoricalFigures.Add('Isaac Newton', 1643);\n    HistoricalFigures.Add('Marie Curie', 1867);\n    HistoricalFigures.Add('Galileo Galilei', 1564);\n    HistoricalFigures.Add('Leonardo da Vinci', 1452);\n  finally\n    HistoricalFigures.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Build a program that uses a map to store the names of planets and their diameters.",
    "code": "```pascal\nprogram PlanetDiameters;\n\nuses\n  SysUtils, Generics.Collections;\n\nvar\n  PlanetMap: TDictionary<string, Double>;\n  PlanetName: string;\n  Diameter: Double;\nbegin\n  PlanetMap := TDictionary<string, Double>.Create;\n  try\n    PlanetMap.Add('Mercury', 4879.0);\n    PlanetMap.Add('Venus', 12104.0);\n    PlanetMap.Add('Earth', 12742.0);\n    PlanetMap.Add('Mars', 6779.0);\n    PlanetMap.Add('Jupiter', 139820.0);\n    PlanetMap.Add('Saturn', 116460.0);\n    PlanetMap.Add('Uranus', 50724.0);\n    PlanetMap.Add('Neptune', 49244.0);\n\n    for PlanetName in PlanetMap.Keys do\n    begin\n      Diameter := PlanetMap[PlanetName];\n      WriteLn(PlanetName, ': ', Diameter:0:2, ' km');\n    end;\n  finally\n    PlanetMap.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Implement a dictionary to track the ratings of restaurants, allowing updates to ratings.",
    "code": "```pascal\nprogram RestaurantRatings;\n\nuses SysUtils, Generics.Collections;\n\nvar\n  Ratings: TDictionary<string, Integer>;\n\nprocedure AddOrUpdateRating(Restaurant: string; Rating: Integer);\nbegin\n  if Ratings.ContainsKey(Restaurant) then\n    Ratings[Restaurant] := Rating\n  else\n    Ratings.Add(Restaurant, Rating);\nend;\n\nprocedure DisplayRatings;\nvar\n  Restaurant: string;\nbegin\n  for Restaurant in Ratings.Keys do\n    Writeln(Restaurant, ': ', Ratings[Restaurant]);\nend;\n\nbegin\n  Ratings := TDictionary<string, Integer>.Create;\n  \n  AddOrUpdateRating('Pizza Place', 4);\n  AddOrUpdateRating('Burger Joint', 5);\n  AddOrUpdateRating('Sushi Spot', 3);\n  \n  DisplayRatings;\n  \n  AddOrUpdateRating('Pizza Place', 5);\n  \n  Writeln('Updated Ratings:');\n  DisplayRatings;\n  \n  Ratings.Free;\nend.\n```"
  },
  {
    "task": "Write a script that uses a map to translate binary numbers to decimal.",
    "code": "```pascal\nprogram BinaryToDecimal;\n\nuses SysUtils;\n\nvar\n  binaryToDecimal: TFPHashObject;\n  binaryString: string;\n  decimalValue: Integer;\n\nfunction BinaryToDecimalConversion(binary: string): Integer;\nvar\n  i, power, digit: Integer;\nbegin\n  Result := 0;\n  power := Length(binary) - 1;\n  for i := 1 to Length(binary) do\n  begin\n    digit := StrToInt(binary[i]);\n    Result := Result + (digit * (1 shl power));\n    Dec(power);\n  end;\nend;\n\nbegin\n  binaryToDecimal := TFPHashObject.Create(True);\n  try\n    binaryToDecimal.Add('101', TObject(BinaryToDecimalConversion('101')));\n    binaryToDecimal.Add('1111', TObject(BinaryToDecimalConversion('1111')));\n    binaryToDecimal.Add('10010', TObject(BinaryToDecimalConversion('10010')));\n\n    binaryString := '101';\n    decimalValue := Integer(binaryToDecimal.Items[binaryString]);\n    WriteLn('Binary: ', binaryString, ' -> Decimal: ', decimalValue);\n\n    binaryString := '1111';\n    decimalValue := Integer(binaryToDecimal.Items[binaryString]);\n    WriteLn('Binary: ', binaryString, ' -> Decimal: ', decimalValue);\n\n    binaryString := '10010';\n    decimalValue := Integer(binaryToDecimal.Items[binaryString]);\n    WriteLn('Binary: ', binaryString, ' -> Decimal: ', decimalValue);\n  finally\n    binaryToDecimal.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Create a dictionary to store the names of artists and their famous works.",
    "code": "```pascal\nprogram ArtistWorks;\n\nuses\n  SysUtils, Generics.Collections;\n\nvar\n  ArtistDictionary: TDictionary<string, string>;\n\nbegin\n  ArtistDictionary := TDictionary<string, string>.Create;\n  try\n    ArtistDictionary.Add('Leonardo da Vinci', 'Mona Lisa');\n    ArtistDictionary.Add('Vincent van Gogh', 'Starry Night');\n    ArtistDictionary.Add('Pablo Picasso', 'Guernica');\n    ArtistDictionary.Add('Claude Monet', 'Water Lilies');\n    ArtistDictionary.Add('Salvador Dali', 'The Persistence of Memory');\n  finally\n    ArtistDictionary.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Design a system that uses a map to track the maintenance schedules of vehicles.",
    "code": "```pascal\nprogram VehicleMaintenanceSchedules;\n\nuses\n  SysUtils, Generics.Collections;\n\ntype\n  TVehicle = record\n    ID: string;\n    MaintenanceDate: TDateTime;\n  end;\n\nvar\n  MaintenanceSchedule: TDictionary<string, TDateTime>;\n  Vehicle: TVehicle;\nbegin\n  MaintenanceSchedule := TDictionary<string, TDateTime>.Create;\n  try\n    // Add vehicles to the maintenance schedule\n    Vehicle.ID := 'Vehicle001';\n    Vehicle.MaintenanceDate := EncodeDate(2023, 10, 15);\n    MaintenanceSchedule.Add(Vehicle.ID, Vehicle.MaintenanceDate);\n\n    Vehicle.ID := 'Vehicle002';\n    Vehicle.MaintenanceDate := EncodeDate(2023, 11, 20);\n    MaintenanceSchedule.Add(Vehicle.ID, Vehicle.MaintenanceDate);\n\n    // Check a vehicle's maintenance schedule\n    if MaintenanceSchedule.TryGetValue('Vehicle001', Vehicle.MaintenanceDate) then\n      Writeln('Vehicle001 Maintenance Date: ', DateToStr(Vehicle.MaintenanceDate))\n    else\n      Writeln('Vehicle001 not found in the schedule.');\n\n  finally\n    MaintenanceSchedule.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Develop a program that uses a dictionary to associate languages with their number of speakers worldwide.",
    "code": "```pascal\nprogram LanguageSpeakers;\n\nuses\n  SysUtils, Generics.Collections;\n\nvar\n  languageSpeakers: TDictionary<string, Int64>;\n  language: string;\n  speakers: Int64;\n\nbegin\n  languageSpeakers := TDictionary<string, Int64>.Create;\n  try\n    languageSpeakers.Add('English', 1500000000);\n    languageSpeakers.Add('Mandarin', 1100000000);\n    languageSpeakers.Add('Hindi', 600000000);\n    languageSpeakers.Add('Spanish', 480000000);\n    languageSpeakers.Add('French', 300000000);\n\n    for language in languageSpeakers.Keys do\n    begin\n      speakers := languageSpeakers[language];\n      WriteLn(Format('%s: %d speakers', [language, speakers]));\n    end;\n  finally\n    languageSpeakers.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Create a map to store the names of cities and their average annual temperatures.",
    "code": "```pascal\nprogram CityTemperatures;\n\nuses\n  SysUtils, Generics.Collections;\n\nvar\n  CityTemperatures: TDictionary<string, Double>;\n\nbegin\n  CityTemperatures := TDictionary<string, Double>.Create;\n  try\n    CityTemperatures.Add('New York', 12.3);\n    CityTemperatures.Add('Los Angeles', 18.6);\n    CityTemperatures.Add('Chicago', 10.0);\n    CityTemperatures.Add('Houston', 20.8);\n    CityTemperatures.Add('Phoenix', 22.5);\n    // Add more cities and their average temperatures as needed\n  finally\n    CityTemperatures.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Write a function that uses a dictionary to convert metric units to imperial units.",
    "code": "```pascal\nprogram MetricToImperialConverter;\n\nuses\n  SysUtils, Generics.Collections;\n\nfunction ConvertToImperial(metricUnit: string; value: Double): Double;\nvar\n  conversionMap: TDictionary<string, Double>;\n  conversionFactor: Double;\nbegin\n  conversionMap := TDictionary<string, Double>.Create;\n  try\n    conversionMap.Add('meter', 3.28084);  // meters to feet\n    conversionMap.Add('kilogram', 2.20462); // kilograms to pounds\n    conversionMap.Add('liter', 0.264172); // liters to gallons\n\n    if conversionMap.TryGetValue(metricUnit, conversionFactor) then\n      Result := value * conversionFactor\n    else\n      raise Exception.Create('Unsupported metric unit');\n  finally\n    conversionMap.Free;\n  end;\nend;\n\nbegin\n  try\n    Writeln('5 meters in feet: ', ConvertToImperial('meter', 5):0:2);\n    Writeln('10 kilograms in pounds: ', ConvertToImperial('kilogram', 10):0:2);\n    Writeln('3 liters in gallons: ', ConvertToImperial('liter', 3):0:2);\n  except\n    on E: Exception do\n      Writeln('Error: ', E.Message);\n  end;\nend.\n```"
  },
  {
    "task": "Build a dictionary to store the names of sports and their respective world records.",
    "code": "```pascal\nprogram SportsWorldRecords;\nuses SysUtils, Generics.Collections;\n\nvar\n  worldRecords: TDictionary<string, string>;\n\nbegin\n  worldRecords := TDictionary<string, string>.Create;\n  try\n    worldRecords.Add('100m Dash', '9.58 seconds');\n    worldRecords.Add('Long Jump', '8.95 meters');\n    worldRecords.Add('Marathon', '2:01:39 hours');\n    worldRecords.Add('High Jump', '2.45 meters');\n\n    // Example of accessing the dictionary\n    if worldRecords.ContainsKey('100m Dash') then\n      WriteLn('100m Dash World Record: ', worldRecords['100m Dash']);\n  finally\n    worldRecords.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Implement a map to manage a list of favorite movies, allowing additions and deletions.",
    "code": "```pascal\nprogram FavoriteMovies;\n\nuses\n  SysUtils, Generics.Collections;\n\nvar\n  favoriteMovies: TDictionary<string, string>;\n  command, title, director: string;\n\nbegin\n  favoriteMovies := TDictionary<string, string>.Create;\n  try\n    while True do\n    begin\n      Write('Enter command (add, delete, list, exit): ');\n      ReadLn(command);\n      if command = 'add' then\n      begin\n        Write('Enter movie title: ');\n        ReadLn(title);\n        Write('Enter director: ');\n        ReadLn(director);\n        favoriteMovies.AddOrSetValue(title, director);\n        WriteLn('Movie added.');\n      end\n      else if command = 'delete' then\n      begin\n        Write('Enter movie title to delete: ');\n        ReadLn(title);\n        if favoriteMovies.ContainsKey(title) then\n        begin\n          favoriteMovies.Remove(title);\n          WriteLn('Movie deleted.');\n        end\n        else\n          WriteLn('Movie not found.');\n      end\n      else if command = 'list' then\n      begin\n        for title in favoriteMovies.Keys do\n          WriteLn('Title: ', title, ', Director: ', favoriteMovies.Items[title]);\n      end\n      else if command = 'exit' then\n        Break\n      else\n        WriteLn('Unknown command.');\n    end;\n  finally\n    favoriteMovies.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Create a program that uses a dictionary to track the distances between pairs of cities.",
    "code": "```pascal\nprogram CityDistances;\n\nuses\n  SysUtils, Generics.Collections;\n\nvar\n  cityDistances: TDictionary<string, Integer>;\n  cityPair: string;\nbegin\n  cityDistances := TDictionary<string, Integer>.Create;\n\n  cityDistances.Add('CityA-CityB', 100);\n  cityDistances.Add('CityA-CityC', 150);\n  cityDistances.Add('CityB-CityC', 200);\n\n  for cityPair in cityDistances.Keys do\n  begin\n    WriteLn(Format('Distance between %s: %d km', [cityPair, cityDistances[cityPair]]));\n  end;\n\n  cityDistances.Free;\nend.\n```"
  },
  {
    "task": "Design a dictionary to store the names of planets and their orbital periods.",
    "code": "```pascal\nprogram PlanetOrbitalPeriods;\nuses SysUtils, Generics.Collections;\n\nvar\n  PlanetOrbitalPeriods: TDictionary<String, Double>;\nbegin\n  PlanetOrbitalPeriods := TDictionary<String, Double>.Create;\n  \n  PlanetOrbitalPeriods.Add('Mercury', 87.97);\n  PlanetOrbitalPeriods.Add('Venus', 224.70);\n  PlanetOrbitalPeriods.Add('Earth', 365.25);\n  PlanetOrbitalPeriods.Add('Mars', 686.98);\n  PlanetOrbitalPeriods.Add('Jupiter', 4332.59);\n  PlanetOrbitalPeriods.Add('Saturn', 10759.22);\n  PlanetOrbitalPeriods.Add('Uranus', 30685.4);\n  PlanetOrbitalPeriods.Add('Neptune', 60190.03);\n  \n  PlanetOrbitalPeriods.Free;\nend.\n```"
  },
  {
    "task": "Write a function that uses a map to convert HTML color codes to their respective color names.",
    "code": "```pascal\nprogram HTMLColorCodeConverter;\n\nuses\n  SysUtils, Generics.Collections;\n\nfunction ConvertColorCodeToName(colorCode: string): string;\nvar\n  colorMap: TDictionary<string, string>;\nbegin\n  colorMap := TDictionary<string, string>.Create;\n  try\n    colorMap.Add('#FFFFFF', 'White');\n    colorMap.Add('#000000', 'Black');\n    colorMap.Add('#FF0000', 'Red');\n    colorMap.Add('#00FF00', 'Lime');\n    colorMap.Add('#0000FF', 'Blue');\n    colorMap.Add('#FFFF00', 'Yellow');\n    colorMap.Add('#00FFFF', 'Cyan');\n    colorMap.Add('#FF00FF', 'Magenta');\n\n    if colorMap.TryGetValue(colorCode, Result) then\n      Exit\n    else\n      Result := 'Unknown';\n\n  finally\n    colorMap.Free;\n  end;\nend;\n\nbegin\n  Writeln(ConvertColorCodeToName('#FF0000')); // Example usage\nend.\n```"
  },
  {
    "task": "Create a dictionary to store the names of composers and their famous compositions.",
    "code": "```pascal\nprogram ComposersDictionary;\n\nuses\n  Generics.Collections;\n\nvar\n  Composers: TDictionary<string, string>;\nbegin\n  Composers := TDictionary<string, string>.Create;\n  try\n    Composers.Add('Ludwig van Beethoven', 'Symphony No. 9');\n    Composers.Add('Wolfgang Amadeus Mozart', 'The Magic Flute');\n    Composers.Add('Johann Sebastian Bach', 'Brandenburg Concertos');\n    Composers.Add('Fr\u00e9d\u00e9ric Chopin', 'Nocturnes');\n    Composers.Add('Pyotr Ilyich Tchaikovsky', 'Swan Lake');\n  finally\n    Composers.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Build a program that uses a map to store the names of bridges and their lengths.",
    "code": "```pascal\nprogram BridgeLengths;\n\nuses\n  SysUtils, Generics.Collections;\n\nvar\n  BridgeMap: TDictionary<string, Integer>;\nbegin\n  BridgeMap := TDictionary<string, Integer>.Create;\n  try\n    BridgeMap.Add('Golden Gate Bridge', 2737);\n    BridgeMap.Add('Brooklyn Bridge', 1825);\n    BridgeMap.Add('Tower Bridge', 244);\n\n    Writeln('Golden Gate Bridge length: ', BridgeMap['Golden Gate Bridge'], ' meters');\n    Writeln('Brooklyn Bridge length: ', BridgeMap['Brooklyn Bridge'], ' meters');\n    Writeln('Tower Bridge length: ', BridgeMap['Tower Bridge'], ' meters');\n  finally\n    BridgeMap.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Implement a dictionary to manage a list of personal goals, allowing updates to goals.",
    "code": "```pascal\nprogram GoalManager;\n\nuses\n  SysUtils, Generics.Collections;\n\nvar\n  Goals: TDictionary<string, string>;\n\nprocedure AddOrUpdateGoal(Name: string; Goal: string);\nbegin\n  Goals.AddOrSetValue(Name, Goal);\nend;\n\nprocedure PrintGoals;\nvar\n  Key: string;\nbegin\n  for Key in Goals.Keys do\n    Writeln(Key, ': ', Goals[Key]);\nend;\n\nbegin\n  Goals := TDictionary<string, string>.Create;\n  try\n    AddOrUpdateGoal('Alice', 'Learn Pascal');\n    AddOrUpdateGoal('Bob', 'Read 10 books');\n    AddOrUpdateGoal('Alice', 'Complete a marathon');\n    PrintGoals;\n  finally\n    Goals.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Write a script that uses a map to convert hexadecimal numbers to binary.",
    "code": "```pascal\nprogram HexToBinary;\n\nuses SysUtils;\n\nvar\n  hexToBinaryMap: array['0'..'F'] of string;\n  hexInput, binaryOutput: string;\n  i: Integer;\n\nbegin\n  hexToBinaryMap['0'] := '0000';\n  hexToBinaryMap['1'] := '0001';\n  hexToBinaryMap['2'] := '0010';\n  hexToBinaryMap['3'] := '0011';\n  hexToBinaryMap['4'] := '0100';\n  hexToBinaryMap['5'] := '0101';\n  hexToBinaryMap['6'] := '0110';\n  hexToBinaryMap['7'] := '0111';\n  hexToBinaryMap['8'] := '1000';\n  hexToBinaryMap['9'] := '1001';\n  hexToBinaryMap['A'] := '1010';\n  hexToBinaryMap['B'] := '1011';\n  hexToBinaryMap['C'] := '1100';\n  hexToBinaryMap['D'] := '1101';\n  hexToBinaryMap['E'] := '1110';\n  hexToBinaryMap['F'] := '1111';\n\n  write('Enter a hexadecimal number: ');\n  readln(hexInput);\n  hexInput := UpperCase(hexInput);\n  \n  binaryOutput := '';\n  for i := 1 to Length(hexInput) do\n  begin\n    binaryOutput := binaryOutput + hexToBinaryMap[hexInput[i]];\n  end;\n\n  writeln('Binary equivalent: ', binaryOutput);\nend.\n```"
  },
  {
    "task": "Create a dictionary to store the names of trees and their average heights.",
    "code": "```pascal\nprogram TreeHeights;\n\nuses\n  SysUtils, Generics.Collections;\n\nvar\n  TreeHeights: TDictionary<string, Double>;\n\nbegin\n  TreeHeights := TDictionary<string, Double>.Create;\n\n  { Example entries }\n  TreeHeights.Add('Oak', 20.0);\n  TreeHeights.Add('Pine', 25.5);\n  TreeHeights.Add('Maple', 18.2);\n\n  { Free the dictionary after usage }\n  TreeHeights.Free;\nend.\n```"
  }
]