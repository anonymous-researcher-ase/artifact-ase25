[
  {
    "task": "Define a class representing a book with attributes for title, author, and number of pages, and a method to display the book's information.",
    "code": "```pascal\nprogram BookClassExample;\n\ntype\n  TBook = class\n  private\n    FTitle: string;\n    FAuthor: string;\n    FPages: Integer;\n  public\n    constructor Create(ATitle, AAuthor: string; APages: Integer);\n    procedure DisplayInfo;\n  end;\n\nconstructor TBook.Create(ATitle, AAuthor: string; APages: Integer);\nbegin\n  FTitle := ATitle;\n  FAuthor := AAuthor;\n  FPages := APages;\nend;\n\nprocedure TBook.DisplayInfo;\nbegin\n  WriteLn('Title: ', FTitle);\n  WriteLn('Author: ', FAuthor);\n  WriteLn('Pages: ', FPages);\nend;\n\nvar\n  MyBook: TBook;\n\nbegin\n  MyBook := TBook.Create('The Great Gatsby', 'F. Scott Fitzgerald', 218);\n  MyBook.DisplayInfo;\n  MyBook.Free;\nend.\n```"
  },
  {
    "task": "Create a class for a bank account that includes attributes for account number, balance, and a method to deposit funds.",
    "code": "```pascal\nprogram BankAccountProgram;\n\ntype\n  TBankAccount = class\n  private\n    FAccountNumber: Integer;\n    FBalance: Real;\n  public\n    constructor Create(AccountNumber: Integer; InitialBalance: Real);\n    procedure Deposit(Amount: Real);\n    function GetBalance: Real;\n    function GetAccountNumber: Integer;\n  end;\n\nconstructor TBankAccount.Create(AccountNumber: Integer; InitialBalance: Real);\nbegin\n  FAccountNumber := AccountNumber;\n  FBalance := InitialBalance;\nend;\n\nprocedure TBankAccount.Deposit(Amount: Real);\nbegin\n  if Amount > 0 then\n    FBalance := FBalance + Amount;\nend;\n\nfunction TBankAccount.GetBalance: Real;\nbegin\n  Result := FBalance;\nend;\n\nfunction TBankAccount.GetAccountNumber: Integer;\nbegin\n  Result := FAccountNumber;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Design a class for a vehicle with properties for make, model, and year, and a method to start the engine.",
    "code": "```pascal\nprogram VehicleClassExample;\n\ntype\n  TVehicle = class\n  private\n    FMake: string;\n    FModel: string;\n    FYear: Integer;\n  public\n    constructor Create(aMake, aModel: string; aYear: Integer);\n    procedure StartEngine;\n    property Make: string read FMake write FMake;\n    property Model: string read FModel write FModel;\n    property Year: Integer read FYear write FYear;\n  end;\n\nconstructor TVehicle.Create(aMake, aModel: string; aYear: Integer);\nbegin\n  FMake := aMake;\n  FModel := aModel;\n  FYear := aYear;\nend;\n\nprocedure TVehicle.StartEngine;\nbegin\n  WriteLn('The engine has started.');\nend;\n\nvar\n  MyVehicle: TVehicle;\nbegin\n  MyVehicle := TVehicle.Create('Toyota', 'Corolla', 2020);\n  MyVehicle.StartEngine;\nend.\n```"
  },
  {
    "task": "Implement a class that models a student with attributes for name, ID, and grades, and a method to calculate the GPA.",
    "code": "```pascal\nprogram StudentClass;\n\ntype\n  TStudent = class\n  private\n    FName: string;\n    FID: Integer;\n    FGrades: array of Real;\n  public\n    constructor Create(Name: string; ID: Integer; Grades: array of Real);\n    function CalculateGPA: Real;\n    property Name: string read FName write FName;\n    property ID: Integer read FID write FID;\n    property Grades: array of Real read FGrades write FGrades;\n  end;\n\nconstructor TStudent.Create(Name: string; ID: Integer; Grades: array of Real);\nvar\n  I: Integer;\nbegin\n  FName := Name;\n  FID := ID;\n  SetLength(FGrades, Length(Grades));\n  for I := Low(Grades) to High(Grades) do\n    FGrades[I] := Grades[I];\nend;\n\nfunction TStudent.CalculateGPA: Real;\nvar\n  Sum: Real;\n  I: Integer;\nbegin\n  if Length(FGrades) = 0 then\n    Exit(0.0);\n  Sum := 0.0;\n  for I := Low(FGrades) to High(FGrades) do\n    Sum := Sum + FGrades[I];\n  Result := Sum / Length(FGrades);\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Construct a class for a rectangle that has attributes for width and height, and methods to calculate area and perimeter.",
    "code": "```pascal\nprogram RectangleClassExample;\n\ntype\n  TRectangle = class\n  private\n    FWidth: Real;\n    FHeight: Real;\n  public\n    constructor Create(AWidth, AHeight: Real);\n    function Area: Real;\n    function Perimeter: Real;\n  end;\n\nconstructor TRectangle.Create(AWidth, AHeight: Real);\nbegin\n  FWidth := AWidth;\n  FHeight := AHeight;\nend;\n\nfunction TRectangle.Area: Real;\nbegin\n  Result := FWidth * FHeight;\nend;\n\nfunction TRectangle.Perimeter: Real;\nbegin\n  Result := 2 * (FWidth + FHeight);\nend;\n\nvar\n  Rectangle: TRectangle;\n\nbegin\n  Rectangle := TRectangle.Create(5.0, 10.0);\n  Writeln('Area: ', Rectangle.Area:0:2);\n  Writeln('Perimeter: ', Rectangle.Perimeter:0:2);\n  Rectangle.Free;\nend.\n```"
  },
  {
    "task": "Formulate a class for a smartphone with properties for brand, model, and battery life, and a method to make a call.",
    "code": "```pascal\nprogram SmartphoneClass;\n\ntype\n  TSmartphone = class\n  private\n    FBrand: string;\n    FModel: string;\n    FBatteryLife: integer;\n  public\n    constructor Create(Brand: string; Model: string; BatteryLife: integer);\n    procedure MakeCall(Number: string);\n    property Brand: string read FBrand;\n    property Model: string read FModel;\n    property BatteryLife: integer read FBatteryLife;\n  end;\n\nconstructor TSmartphone.Create(Brand: string; Model: string; BatteryLife: integer);\nbegin\n  FBrand := Brand;\n  FModel := Model;\n  FBatteryLife := BatteryLife;\nend;\n\nprocedure TSmartphone.MakeCall(Number: string);\nbegin\n  writeln('Calling ', Number, ' using ', FBrand, ' ', FModel);\nend;\n\nvar\n  MyPhone: TSmartphone;\nbegin\n  MyPhone := TSmartphone.Create('ExampleBrand', 'ExampleModel', 100);\n  MyPhone.MakeCall('123-456-7890');\n  MyPhone.Free;\nend.\n```"
  },
  {
    "task": "Build a class representing a movie with attributes for title, director, and duration, and a method to play the movie.",
    "code": "```pascal\nprogram MovieClassExample;\n\ntype\n  TMovie = class\n  private\n    FTitle: string;\n    FDirector: string;\n    FDuration: integer;\n  public\n    constructor Create(ATitle, ADirector: string; ADuration: integer);\n    procedure Play;\n  end;\n\nconstructor TMovie.Create(ATitle, ADirector: string; ADuration: integer);\nbegin\n  FTitle := ATitle;\n  FDirector := ADirector;\n  FDuration := ADuration;\nend;\n\nprocedure TMovie.Play;\nbegin\n  Writeln('Playing movie: ', FTitle);\nend;\n\nvar\n  Movie: TMovie;\nbegin\n  Movie := TMovie.Create('Inception', 'Christopher Nolan', 148);\n  Movie.Play;\n  Movie.Free;\nend.\n```"
  },
  {
    "task": "Create a class for an employee with attributes for name, position, and salary, and a method to display their profile.",
    "code": "```pascal\nprogram EmployeeClass;\n\ntype\n  TEmployee = class\n  private\n    FName: string;\n    FPosition: string;\n    FSalary: real;\n  public\n    constructor Create(AName, APosition: string; ASalary: real);\n    procedure DisplayProfile;\n  end;\n\nconstructor TEmployee.Create(AName, APosition: string; ASalary: real);\nbegin\n  FName := AName;\n  FPosition := APosition;\n  FSalary := ASalary;\nend;\n\nprocedure TEmployee.DisplayProfile;\nbegin\n  writeln('Name: ', FName);\n  writeln('Position: ', FPosition);\n  writeln('Salary: $', FSalary:0:2);\nend;\n\nvar\n  Employee: TEmployee;\n\nbegin\n  Employee := TEmployee.Create('John Doe', 'Developer', 75000);\n  Employee.DisplayProfile;\n  Employee.Free;\nend.\n```"
  },
  {
    "task": "Design a class for a library that includes attributes for name, location, and books available, and a method to add a new book.",
    "code": "```pascal\nprogram LibraryClass;\n\ntype\n  TLibrary = class\n  private\n    Name: string;\n    Location: string;\n    BooksAvailable: array of string;\n  public\n    constructor Create(AName, ALocation: string);\n    procedure AddBook(ABook: string);\n  end;\n\nconstructor TLibrary.Create(AName, ALocation: string);\nbegin\n  Name := AName;\n  Location := ALocation;\n  SetLength(BooksAvailable, 0);\nend;\n\nprocedure TLibrary.AddBook(ABook: string);\nbegin\n  SetLength(BooksAvailable, Length(BooksAvailable) + 1);\n  BooksAvailable[High(BooksAvailable)] := ABook;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Develop a class for a shopping cart with properties for items and total cost, and methods to add and remove items.",
    "code": "```pascal\nprogram ShoppingCartDemo;\n\ntype\n  TItem = record\n    Name: string;\n    Price: Real;\n  end;\n\n  TShoppingCart = class\n  private\n    FItems: array of TItem;\n    FTotalCost: Real;\n    procedure UpdateTotalCost;\n  public\n    constructor Create;\n    procedure AddItem(Item: TItem);\n    procedure RemoveItem(ItemName: string);\n    function GetTotalCost: Real;\n  end;\n\nconstructor TShoppingCart.Create;\nbegin\n  SetLength(FItems, 0);\n  FTotalCost := 0.0;\nend;\n\nprocedure TShoppingCart.UpdateTotalCost;\nvar\n  I: Integer;\nbegin\n  FTotalCost := 0.0;\n  for I := Low(FItems) to High(FItems) do\n    FTotalCost := FTotalCost + FItems[I].Price;\nend;\n\nprocedure TShoppingCart.AddItem(Item: TItem);\nbegin\n  SetLength(FItems, Length(FItems) + 1);\n  FItems[High(FItems)] := Item;\n  UpdateTotalCost;\nend;\n\nprocedure TShoppingCart.RemoveItem(ItemName: string);\nvar\n  I, J: Integer;\nbegin\n  for I := Low(FItems) to High(FItems) do\n  begin\n    if FItems[I].Name = ItemName then\n    begin\n      for J := I to High(FItems) - 1 do\n        FItems[J] := FItems[J + 1];\n      SetLength(FItems, Length(FItems) - 1);\n      UpdateTotalCost;\n      Break;\n    end;\n  end;\nend;\n\nfunction TShoppingCart.GetTotalCost: Real;\nbegin\n  Result := FTotalCost;\nend;\n\nend.\n```"
  },
  {
    "task": "Implement a class for a thermostat with attributes for current temperature and desired temperature, and a method to adjust the temperature.",
    "code": "```pascal\nprogram ThermostatProgram;\n\ntype\n  TThermostat = class\n  private\n    FCurrentTemperature: Real;\n    FDesiredTemperature: Real;\n  public\n    constructor Create(CurrentTemp, DesiredTemp: Real);\n    procedure AdjustTemperature(NewDesiredTemp: Real);\n    function GetCurrentTemperature: Real;\n    function GetDesiredTemperature: Real;\n  end;\n\nconstructor TThermostat.Create(CurrentTemp, DesiredTemp: Real);\nbegin\n  FCurrentTemperature := CurrentTemp;\n  FDesiredTemperature := DesiredTemp;\nend;\n\nprocedure TThermostat.AdjustTemperature(NewDesiredTemp: Real);\nbegin\n  FDesiredTemperature := NewDesiredTemp;\nend;\n\nfunction TThermostat.GetCurrentTemperature: Real;\nbegin\n  Result := FCurrentTemperature;\nend;\n\nfunction TThermostat.GetDesiredTemperature: Real;\nbegin\n  Result := FDesiredTemperature;\nend;\n\nvar\n  Thermostat: TThermostat;\n\nbegin\n  Thermostat := TThermostat.Create(20.0, 22.0);\n  Thermostat.AdjustTemperature(23.0);\n  // Example usage\n  WriteLn('Current Temperature: ', Thermostat.GetCurrentTemperature:0:1);\n  WriteLn('Desired Temperature: ', Thermostat.GetDesiredTemperature:0:1);\n  Thermostat.Free;\nend.\n```"
  },
  {
    "task": "Formulate a class for a person with attributes for first name, last name, and age, and a method to return the full name.",
    "code": "```pascal\nprogram PersonClass;\n\ntype\n  TPerson = class\n  private\n    FFirstName: string;\n    FLastName: string;\n    FAge: Integer;\n  public\n    constructor Create(AFirstName, ALastName: string; AAge: Integer);\n    function GetFullName: string;\n  end;\n\nconstructor TPerson.Create(AFirstName, ALastName: string; AAge: Integer);\nbegin\n  FFirstName := AFirstName;\n  FLastName := ALastName;\n  FAge := AAge;\nend;\n\nfunction TPerson.GetFullName: string;\nbegin\n  Result := FFirstName + ' ' + FLastName;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Construct a class for a game character with properties for health, strength, and inventory, and a method to attack.",
    "code": "```pascal\nprogram GameCharacterClass;\n\ntype\n  TGameCharacter = class\n  private\n    FHealth: Integer;\n    FStrength: Integer;\n    FInventory: array of string;\n  public\n    constructor Create(AHealth, AStrength: Integer);\n    procedure Attack(Target: TGameCharacter);\n    procedure AddToInventory(Item: string);\n    property Health: Integer read FHealth write FHealth;\n    property Strength: Integer read FStrength write FStrength;\n  end;\n\nconstructor TGameCharacter.Create(AHealth, AStrength: Integer);\nbegin\n  FHealth := AHealth;\n  FStrength := AStrength;\n  SetLength(FInventory, 0);\nend;\n\nprocedure TGameCharacter.Attack(Target: TGameCharacter);\nbegin\n  Target.Health := Target.Health - FStrength;\nend;\n\nprocedure TGameCharacter.AddToInventory(Item: string);\nbegin\n  SetLength(FInventory, Length(FInventory) + 1);\n  FInventory[High(FInventory)] := Item;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Create a class for a calendar event with attributes for title, date, and location, and a method to reschedule the event.",
    "code": "```pascal\nprogram CalendarEvent;\n\ntype\n  TCalendarEvent = class\n  private\n    FTitle: string;\n    FDate: TDateTime;\n    FLocation: string;\n  public\n    constructor Create(ATitle: string; ADate: TDateTime; ALocation: string);\n    procedure Reschedule(NewDate: TDateTime);\n    property Title: string read FTitle write FTitle;\n    property Date: TDateTime read FDate write FDate;\n    property Location: string read FLocation write FLocation;\n  end;\n\nconstructor TCalendarEvent.Create(ATitle: string; ADate: TDateTime; ALocation: string);\nbegin\n  FTitle := ATitle;\n  FDate := ADate;\n  FLocation := ALocation;\nend;\n\nprocedure TCalendarEvent.Reschedule(NewDate: TDateTime);\nbegin\n  FDate := NewDate;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Design a class representing a song with properties for title, artist, and duration, and a method to play the song.",
    "code": "```pascal\nprogram SongClassExample;\n\ntype\n  Song = class\n  private\n    FTitle: string;\n    FArtist: string;\n    FDuration: Integer; // duration in seconds\n  public\n    constructor Create(ATitle, AArtist: string; ADuration: Integer);\n    procedure Play;\n  end;\n\nconstructor Song.Create(ATitle, AArtist: string; ADuration: Integer);\nbegin\n  FTitle := ATitle;\n  FArtist := AArtist;\n  FDuration := ADuration;\nend;\n\nprocedure Song.Play;\nbegin\n  WriteLn('Playing \"', FTitle, '\" by ', FArtist, ' [', FDuration, ' seconds]');\nend;\n\nvar\n  mySong: Song;\n\nbegin\n  mySong := Song.Create('Imagine', 'John Lennon', 183);\n  mySong.Play;\n  mySong.Free;\nend.\n```"
  },
  {
    "task": "Develop a class for an order in an e-commerce system with attributes for order ID, customer, and items, and a method to calculate total price.",
    "code": "```pascal\nprogram ECommerceOrder;\n\ntype\n  TItem = record\n    Name: string;\n    Price: Real;\n  end;\n\n  TOrder = class\n  private\n    FOrderID: Integer;\n    FCustomer: string;\n    FItems: array of TItem;\n  public\n    constructor Create(AOrderID: Integer; ACustomer: string; AItems: array of TItem);\n    function CalculateTotalPrice: Real;\n  end;\n\nconstructor TOrder.Create(AOrderID: Integer; ACustomer: string; AItems: array of TItem);\nvar\n  I: Integer;\nbegin\n  FOrderID := AOrderID;\n  FCustomer := ACustomer;\n  SetLength(FItems, Length(AItems));\n  for I := 0 to High(AItems) do\n    FItems[I] := AItems[I];\nend;\n\nfunction TOrder.CalculateTotalPrice: Real;\nvar\n  Total: Real;\n  I: Integer;\nbegin\n  Total := 0.0;\n  for I := 0 to High(FItems) do\n    Total := Total + FItems[I].Price;\n  Result := Total;\nend;\n\nend.\n```"
  },
  {
    "task": "Build a class for a social media post with attributes for content, author, and timestamp, and a method to like the post.",
    "code": "```pascal\nprogram SocialMediaPost;\n\ntype\n  TSocialMediaPost = class\n  private\n    FContent: string;\n    FAuthor: string;\n    FTimestamp: TDateTime;\n    FLikes: Integer;\n  public\n    constructor Create(AContent, AAuthor: string; ATimestamp: TDateTime);\n    procedure LikePost;\n    function GetContent: string;\n    function GetAuthor: string;\n    function GetTimestamp: TDateTime;\n    function GetLikes: Integer;\n  end;\n\nconstructor TSocialMediaPost.Create(AContent, AAuthor: string; ATimestamp: TDateTime);\nbegin\n  FContent := AContent;\n  FAuthor := AAuthor;\n  FTimestamp := ATimestamp;\n  FLikes := 0;\nend;\n\nprocedure TSocialMediaPost.LikePost;\nbegin\n  Inc(FLikes);\nend;\n\nfunction TSocialMediaPost.GetContent: string;\nbegin\n  Result := FContent;\nend;\n\nfunction TSocialMediaPost.GetAuthor: string;\nbegin\n  Result := FAuthor;\nend;\n\nfunction TSocialMediaPost.GetTimestamp: TDateTime;\nbegin\n  Result := FTimestamp;\nend;\n\nfunction TSocialMediaPost.GetLikes: Integer;\nbegin\n  Result := FLikes;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Create a class for a computer with properties for processor, RAM, and storage, and a method to display system specifications.",
    "code": "```pascal\nprogram ComputerSpecs;\n\ntype\n  TComputer = class\n  private\n    FProcessor: string;\n    FRAM: Integer;\n    FStorage: Integer;\n  public\n    constructor Create(AProcessor: string; ARAM, AStorage: Integer);\n    procedure DisplaySpecs;\n  end;\n\nconstructor TComputer.Create(AProcessor: string; ARAM, AStorage: Integer);\nbegin\n  FProcessor := AProcessor;\n  FRAM := ARAM;\n  FStorage := AStorage;\nend;\n\nprocedure TComputer.DisplaySpecs;\nbegin\n  WriteLn('Processor: ', FProcessor);\n  WriteLn('RAM: ', FRAM, ' GB');\n  WriteLn('Storage: ', FStorage, ' GB');\nend;\n\nvar\n  MyComputer: TComputer;\n\nbegin\n  MyComputer := TComputer.Create('Intel i7', 16, 512);\n  MyComputer.DisplaySpecs;\n  MyComputer.Free;\nend.\n```"
  },
  {
    "task": "Implement a class for a restaurant menu item with attributes for name, price, and description, and a method to update the price.",
    "code": "```pascal\ntype\n  TMenuItem = class\n  private\n    FName: string;\n    FPrice: Real;\n    FDescription: string;\n  public\n    constructor Create(AName: string; APrice: Real; ADescription: string);\n    procedure UpdatePrice(NewPrice: Real);\n    property Name: string read FName write FName;\n    property Price: Real read FPrice write FPrice;\n    property Description: string read FDescription write FDescription;\n  end;\n\nconstructor TMenuItem.Create(AName: string; APrice: Real; ADescription: string);\nbegin\n  FName := AName;\n  FPrice := APrice;\n  FDescription := ADescription;\nend;\n\nprocedure TMenuItem.UpdatePrice(NewPrice: Real);\nbegin\n  FPrice := NewPrice;\nend;\n```"
  },
  {
    "task": "Design a class for a package delivery with attributes for tracking number, destination, and status, and a method to update the status.",
    "code": "```pascal\nprogram PackageDelivery;\n\ntype\n  TPackageDelivery = class\n  private\n    FTrackingNumber: string;\n    FDestination: string;\n    FStatus: string;\n  public\n    constructor Create(ATrackingNumber, ADestination, AStatus: string);\n    procedure UpdateStatus(NewStatus: string);\n    property TrackingNumber: string read FTrackingNumber;\n    property Destination: string read FDestination;\n    property Status: string read FStatus;\n  end;\n\nconstructor TPackageDelivery.Create(ATrackingNumber, ADestination, AStatus: string);\nbegin\n  FTrackingNumber := ATrackingNumber;\n  FDestination := ADestination;\n  FStatus := AStatus;\nend;\n\nprocedure TPackageDelivery.UpdateStatus(NewStatus: string);\nbegin\n  FStatus := NewStatus;\nend;\n\nvar\n  Package: TPackageDelivery;\n\nbegin\n  Package := TPackageDelivery.Create('123456789', '123 Main St, Anytown, USA', 'In Transit');\n  Package.UpdateStatus('Delivered');\nend.\n```"
  },
  {
    "task": "Construct a class representing a pet with attributes for species, age, and name, and a method to display its details.",
    "code": "```pascal\nprogram PetClassExample;\n\ntype\n  TPet = class\n  private\n    FSpecies: string;\n    FAge: Integer;\n    FName: string;\n  public\n    constructor Create(const ASpecies: string; AAge: Integer; const AName: string);\n    procedure DisplayDetails;\n  end;\n\nconstructor TPet.Create(const ASpecies: string; AAge: Integer; const AName: string);\nbegin\n  FSpecies := ASpecies;\n  FAge := AAge;\n  FName := AName;\nend;\n\nprocedure TPet.DisplayDetails;\nbegin\n  WriteLn('Species: ', FSpecies);\n  WriteLn('Age: ', FAge);\n  WriteLn('Name: ', FName);\nend;\n\nvar\n  Pet: TPet;\n\nbegin\n  Pet := TPet.Create('Dog', 5, 'Buddy');\n  Pet.DisplayDetails;\n  Pet.Free;\nend.\n```"
  },
  {
    "task": "Formulate a class for a product in a store with properties for SKU, name, and price, and a method to apply a discount.",
    "code": "```pascal\nprogram StoreProduct;\n\ntype\n  TProduct = class\n  private\n    FSku: string;\n    FName: string;\n    FPrice: Real;\n  public\n    constructor Create(aSku, aName: string; aPrice: Real);\n    procedure ApplyDiscount(DiscountPercentage: Real);\n    property Sku: string read FSku write FSku;\n    property Name: string read FName write FName;\n    property Price: Real read FPrice write FPrice;\n  end;\n\nconstructor TProduct.Create(aSku, aName: string; aPrice: Real);\nbegin\n  FSku := aSku;\n  FName := aName;\n  FPrice := aPrice;\nend;\n\nprocedure TProduct.ApplyDiscount(DiscountPercentage: Real);\nbegin\n  FPrice := FPrice - (FPrice * DiscountPercentage / 100);\nend;\n\nvar\n  product: TProduct;\n\nbegin\n  product := TProduct.Create('12345', 'Sample Product', 100.0);\n  product.ApplyDiscount(10);\n  WriteLn('SKU: ', product.Sku);\n  WriteLn('Name: ', product.Name);\n  WriteLn('Price after discount: ', product.Price:0:2);\n  product.Free;\nend.\n```"
  },
  {
    "task": "Develop a class for a university course with attributes for course code, title, and credits, and a method to enroll a student.",
    "code": "```pascal\nprogram UniversityCourse;\n\ntype\n  TCourse = class\n  private\n    FCourseCode: string;\n    FTitle: string;\n    FCredits: Integer;\n  public\n    constructor Create(const CourseCode, Title: string; Credits: Integer);\n    procedure EnrollStudent(const StudentName: string);\n  end;\n\nconstructor TCourse.Create(const CourseCode, Title: string; Credits: Integer);\nbegin\n  FCourseCode := CourseCode;\n  FTitle := Title;\n  FCredits := Credits;\nend;\n\nprocedure TCourse.EnrollStudent(const StudentName: string);\nbegin\n  Writeln('Student ', StudentName, ' has been enrolled in ', FTitle);\nend;\n\nvar\n  Course: TCourse;\nbegin\n  Course := TCourse.Create('CS101', 'Introduction to Computer Science', 3);\n  Course.EnrollStudent('Alice');\n  Course.Free;\nend.\n```"
  },
  {
    "task": "Create a class for a smart light bulb with attributes for color, brightness, and state (on/off), and a method to change the color.",
    "code": "```pascal\nprogram SmartLightBulb;\n\ntype\n  TSmartLightBulb = class\n  private\n    FColor: string;\n    FBrightness: Integer;\n    FState: Boolean;\n  public\n    constructor Create(aColor: string; aBrightness: Integer; aState: Boolean);\n    procedure ChangeColor(aNewColor: string);\n    property Color: string read FColor write FColor;\n    property Brightness: Integer read FBrightness write FBrightness;\n    property State: Boolean read FState write FState;\n  end;\n\nconstructor TSmartLightBulb.Create(aColor: string; aBrightness: Integer; aState: Boolean);\nbegin\n  FColor := aColor;\n  FBrightness := aBrightness;\n  FState := aState;\nend;\n\nprocedure TSmartLightBulb.ChangeColor(aNewColor: string);\nbegin\n  FColor := aNewColor;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Design a class for a blog post with properties for title, content, and date published, and a method to edit the content.",
    "code": "```pascal\nprogram BlogPostClass;\n\ntype\n  TBlogPost = class\n  private\n    FTitle: string;\n    FContent: string;\n    FDatePublished: TDateTime;\n  public\n    constructor Create(ATitle, AContent: string; ADatePublished: TDateTime);\n    procedure EditContent(NewContent: string);\n    property Title: string read FTitle write FTitle;\n    property Content: string read FContent write FContent;\n    property DatePublished: TDateTime read FDatePublished write FDatePublished;\n  end;\n\nconstructor TBlogPost.Create(ATitle, AContent: string; ADatePublished: TDateTime);\nbegin\n  FTitle := ATitle;\n  FContent := AContent;\n  FDatePublished := ADatePublished;\nend;\n\nprocedure TBlogPost.EditContent(NewContent: string);\nbegin\n  FContent := NewContent;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Build a class for a bank transaction with attributes for transaction ID, amount, and type, and a method to reverse the transaction.",
    "code": "```pascal\nprogram BankTransactionClass;\n\ntype\n  TBankTransaction = class\n  private\n    FTransactionID: Integer;\n    FAmount: Double;\n    FType: String;\n  public\n    constructor Create(ATransactionID: Integer; AAmount: Double; AType: String);\n    procedure ReverseTransaction;\n    property TransactionID: Integer read FTransactionID;\n    property Amount: Double read FAmount write FAmount;\n    property TransactionType: String read FType write FType;\n  end;\n\nconstructor TBankTransaction.Create(ATransactionID: Integer; AAmount: Double; AType: String);\nbegin\n  FTransactionID := ATransactionID;\n  FAmount := AAmount;\n  FType := AType;\nend;\n\nprocedure TBankTransaction.ReverseTransaction;\nbegin\n  FAmount := -FAmount;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Implement a class for a city with properties for name, population, and area, and a method to calculate population density.",
    "code": "```pascal\nprogram CityClassExample;\n\ntype\n  TCity = class\n  private\n    FName: string;\n    FPopulation: Integer;\n    FArea: Double;\n  public\n    constructor Create(AName: string; APopulation: Integer; AArea: Double);\n    function PopulationDensity: Double;\n    property Name: string read FName;\n    property Population: Integer read FPopulation;\n    property Area: Double read FArea;\n  end;\n\nconstructor TCity.Create(AName: string; APopulation: Integer; AArea: Double);\nbegin\n  FName := AName;\n  FPopulation := APopulation;\n  FArea := AArea;\nend;\n\nfunction TCity.PopulationDensity: Double;\nbegin\n  if FArea > 0 then\n    Result := FPopulation / FArea\n  else\n    Result := 0;\nend;\n\nbegin\n  // Example use case\nend.\n```"
  },
  {
    "task": "Construct a class for a library member with attributes for member ID, name, and borrowed books, and a method to borrow a book.",
    "code": "```pascal\nprogram LibraryMemberClass;\n\ntype\n  TLibraryMember = class\n  private\n    FMemberID: Integer;\n    FName: String;\n    FBorrowedBooks: array of String;\n  public\n    constructor Create(MemberID: Integer; Name: String);\n    procedure BorrowBook(BookTitle: String);\n  end;\n  \nconstructor TLibraryMember.Create(MemberID: Integer; Name: String);\nbegin\n  FMemberID := MemberID;\n  FName := Name;\n  SetLength(FBorrowedBooks, 0);\nend;\n\nprocedure TLibraryMember.BorrowBook(BookTitle: String);\nbegin\n  SetLength(FBorrowedBooks, Length(FBorrowedBooks) + 1);\n  FBorrowedBooks[High(FBorrowedBooks)] := BookTitle;\nend;\n\nvar\n  Member: TLibraryMember;\n\nbegin\n  Member := TLibraryMember.Create(1, 'John Doe');\n  Member.BorrowBook('Pascal Programming');\nend.\n```"
  },
  {
    "task": "Create a class for a flight reservation with attributes for flight number, passenger name, and seat number, and a method to change the seat.",
    "code": "```pascal\nprogram FlightReservation;\n\ntype\n  TFlightReservation = class\n  private\n    FFlightNumber: string;\n    FPassengerName: string;\n    FSeatNumber: string;\n  public\n    constructor Create(AFlightNumber, APassengerName, ASeatNumber: string);\n    procedure ChangeSeat(NewSeatNumber: string);\n  end;\n\nconstructor TFlightReservation.Create(AFlightNumber, APassengerName, ASeatNumber: string);\nbegin\n  FFlightNumber := AFlightNumber;\n  FPassengerName := APassengerName;\n  FSeatNumber := ASeatNumber;\nend;\n\nprocedure TFlightReservation.ChangeSeat(NewSeatNumber: string);\nbegin\n  FSeatNumber := NewSeatNumber;\nend;\n\nvar\n  Reservation: TFlightReservation;\n\nbegin\n  Reservation := TFlightReservation.Create('AB123', 'John Doe', '12A');\n  Reservation.ChangeSeat('14B');\n  Reservation.Free;\nend.\n```"
  },
  {
    "task": "Develop a class for a digital photo album with properties for album name, photos, and a method to add a new photo.",
    "code": "```pascal\nprogram DigitalPhotoAlbum;\n\ntype\n  TPhotoAlbum = class\n  private\n    FAlbumName: string;\n    FPhotos: array of string;\n  public\n    constructor Create(const AlbumName: string);\n    procedure AddPhoto(const Photo: string);\n    function GetPhotos: TArray<string>;\n    property AlbumName: string read FAlbumName write FAlbumName;\n  end;\n\nconstructor TPhotoAlbum.Create(const AlbumName: string);\nbegin\n  FAlbumName := AlbumName;\n  SetLength(FPhotos, 0);\nend;\n\nprocedure TPhotoAlbum.AddPhoto(const Photo: string);\nbegin\n  SetLength(FPhotos, Length(FPhotos) + 1);\n  FPhotos[High(FPhotos)] := Photo;\nend;\n\nfunction TPhotoAlbum.GetPhotos: TArray<string>;\nbegin\n  Result := FPhotos;\nend;\n\nvar\n  Album: TPhotoAlbum;\nbegin\n  Album := TPhotoAlbum.Create('My Album');\n  Album.AddPhoto('photo1.jpg');\n  Album.AddPhoto('photo2.jpg');\nend.\n```"
  },
  {
    "task": "Design a class for a task in a to-do list with attributes for description, deadline, and status, and a method to mark it as complete.",
    "code": "```pascal\nprogram ToDoList;\n\ntype\n  TTaskStatus = (Incomplete, Complete);\n\n  TTask = class\n  private\n    FDescription: string;\n    FDeadline: TDateTime;\n    FStatus: TTaskStatus;\n  public\n    constructor Create(ADescription: string; ADeadline: TDateTime);\n    procedure MarkAsComplete;\n    property Description: string read FDescription write FDescription;\n    property Deadline: TDateTime read FDeadline write FDeadline;\n    property Status: TTaskStatus read FStatus write FStatus;\n  end;\n\nconstructor TTask.Create(ADescription: string; ADeadline: TDateTime);\nbegin\n  FDescription := ADescription;\n  FDeadline := ADeadline;\n  FStatus := Incomplete;\nend;\n\nprocedure TTask.MarkAsComplete;\nbegin\n  FStatus := Complete;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Formulate a class for a conference speaker with attributes for name, topic, and time slot, and a method to update the time slot.",
    "code": "```pascal\nprogram ConferenceSpeakerClass;\n\ntype\n  TConferenceSpeaker = class\n  private\n    FName: string;\n    FTopic: string;\n    FTimeSlot: string;\n  public\n    constructor Create(AName, ATopic, ATimeSlot: string);\n    procedure UpdateTimeSlot(NewTimeSlot: string);\n    function GetName: string;\n    function GetTopic: string;\n    function GetTimeSlot: string;\n  end;\n\nconstructor TConferenceSpeaker.Create(AName, ATopic, ATimeSlot: string);\nbegin\n  FName := AName;\n  FTopic := ATopic;\n  FTimeSlot := ATimeSlot;\nend;\n\nprocedure TConferenceSpeaker.UpdateTimeSlot(NewTimeSlot: string);\nbegin\n  FTimeSlot := NewTimeSlot;\nend;\n\nfunction TConferenceSpeaker.GetName: string;\nbegin\n  Result := FName;\nend;\n\nfunction TConferenceSpeaker.GetTopic: string;\nbegin\n  Result := FTopic;\nend;\n\nfunction TConferenceSpeaker.GetTimeSlot: string;\nbegin\n  Result := FTimeSlot;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Construct a class for a real estate property with attributes for address, price, and square footage, and a method to change the price.",
    "code": "```pascal\nprogram RealEstate;\n\ntype\n  TRealEstateProperty = class\n  private\n    FAddress: string;\n    FPrice: Real;\n    FSquareFootage: Real;\n  public\n    constructor Create(Address: string; Price, SquareFootage: Real);\n    procedure ChangePrice(NewPrice: Real);\n    property Address: string read FAddress;\n    property Price: Real read FPrice;\n    property SquareFootage: Real read FSquareFootage;\n  end;\n\nconstructor TRealEstateProperty.Create(Address: string; Price, SquareFootage: Real);\nbegin\n  FAddress := Address;\n  FPrice := Price;\n  FSquareFootage := SquareFootage;\nend;\n\nprocedure TRealEstateProperty.ChangePrice(NewPrice: Real);\nbegin\n  FPrice := NewPrice;\nend;\n\nvar\n  Property1: TRealEstateProperty;\nbegin\n  Property1 := TRealEstateProperty.Create('123 Main St', 250000.00, 1500.00);\n  Property1.ChangePrice(260000.00);\nend.\n```"
  },
  {
    "task": "Create a class for a weather forecast with properties for temperature, humidity, and condition, and a method to update the forecast.",
    "code": "```pascal\nprogram WeatherForecastClass;\n\ntype\n  TWeatherForecast = class\n  private\n    FTemperature: Real;\n    FHumidity: Real;\n    FCondition: String;\n  public\n    procedure UpdateForecast(ATemperature: Real; AHumidity: Real; ACondition: String);\n    property Temperature: Real read FTemperature write FTemperature;\n    property Humidity: Real read FHumidity write FHumidity;\n    property Condition: String read FCondition write FCondition;\n  end;\n\nprocedure TWeatherForecast.UpdateForecast(ATemperature: Real; AHumidity: Real; ACondition: String);\nbegin\n  FTemperature := ATemperature;\n  FHumidity := AHumidity;\n  FCondition := ACondition;\nend;\n\nvar\n  Weather: TWeatherForecast;\n\nbegin\n  Weather := TWeatherForecast.Create;\n  Weather.UpdateForecast(22.5, 65.0, 'Sunny');\n  Weather.Free;\nend.\n```"
  },
  {
    "task": "Build a class for a musical instrument with attributes for type, brand, and model, and a method to play a note.",
    "code": "```pascal\nprogram MusicalInstrumentClass;\n\ntype\n  TInstrument = class\n  private\n    FType: string;\n    FBrand: string;\n    FModel: string;\n  public\n    constructor Create(AType, ABrand, AModel: string);\n    procedure PlayNote(Note: string);\n  end;\n\nconstructor TInstrument.Create(AType, ABrand, AModel: string);\nbegin\n  FType := AType;\n  FBrand := ABrand;\n  FModel := AModel;\nend;\n\nprocedure TInstrument.PlayNote(Note: string);\nbegin\n  WriteLn('Playing note: ', Note);\nend;\n\nvar\n  MyInstrument: TInstrument;\n\nbegin\n  MyInstrument := TInstrument.Create('Guitar', 'Fender', 'Stratocaster');\n  MyInstrument.PlayNote('C');\n  MyInstrument.Free;\nend.\n```"
  },
  {
    "task": "Design a class for a sports team with attributes for team name, players, and coach, and a method to add a new player.",
    "code": "```pascal\nprogram SportsTeamClass;\n\ntype\n  TPlayer = string;\n  TPlayersArray = array of TPlayer;\n\n  TSportsTeam = class\n  private\n    FTeamName: string;\n    FPlayers: TPlayersArray;\n    FCoach: string;\n  public\n    constructor Create(ATeamName, ACoach: string);\n    procedure AddPlayer(APlayer: TPlayer);\n    property TeamName: string read FTeamName write FTeamName;\n    property Players: TPlayersArray read FPlayers;\n    property Coach: string read FCoach write FCoach;\n  end;\n\nconstructor TSportsTeam.Create(ATeamName, ACoach: string);\nbegin\n  FTeamName := ATeamName;\n  FCoach := ACoach;\n  SetLength(FPlayers, 0);\nend;\n\nprocedure TSportsTeam.AddPlayer(APlayer: TPlayer);\nbegin\n  SetLength(FPlayers, Length(FPlayers) + 1);\n  FPlayers[High(FPlayers)] := APlayer;\nend;\n\nvar\n  MyTeam: TSportsTeam;\nbegin\n  MyTeam := TSportsTeam.Create('Tigers', 'John Doe');\n  MyTeam.AddPlayer('Alice');\n  MyTeam.AddPlayer('Bob');\n  // Use MyTeam as needed\nend.\n```"
  },
  {
    "task": "Implement a class for a podcast episode with attributes for title, duration, and host, and a method to play the episode.",
    "code": "```pascal\nprogram PodcastEpisode;\n\ntype\n  TPodcastEpisode = class\n  private\n    FTitle: string;\n    FDuration: Integer;\n    FHost: string;\n  public\n    constructor Create(ATitle: string; ADuration: Integer; AHost: string);\n    procedure PlayEpisode;\n  end;\n\nconstructor TPodcastEpisode.Create(ATitle: string; ADuration: Integer; AHost: string);\nbegin\n  FTitle := ATitle;\n  FDuration := ADuration;\n  FHost := AHost;\nend;\n\nprocedure TPodcastEpisode.PlayEpisode;\nbegin\n  Writeln('Playing episode: ', FTitle);\n  Writeln('Duration: ', FDuration, ' minutes');\n  Writeln('Host: ', FHost);\nend;\n\nvar\n  Episode: TPodcastEpisode;\n\nbegin\n  Episode := TPodcastEpisode.Create('The Art of Code', 60, 'Jane Doe');\n  Episode.PlayEpisode;\n  Episode.Free;\nend.\n```"
  },
  {
    "task": "Develop a class for a space mission with properties for mission name, crew, and launch date, and a method to launch the mission.",
    "code": "```pascal\nprogram SpaceMissionProgram;\n\ntype\n  TSpaceMission = class\n  private\n    FMissionName: string;\n    FCrew: integer;\n    FLaunchDate: TDateTime;\n  public\n    constructor Create(MissionName: string; Crew: integer; LaunchDate: TDateTime);\n    procedure LaunchMission;\n  end;\n\nconstructor TSpaceMission.Create(MissionName: string; Crew: integer; LaunchDate: TDateTime);\nbegin\n  FMissionName := MissionName;\n  FCrew := Crew;\n  FLaunchDate := LaunchDate;\nend;\n\nprocedure TSpaceMission.LaunchMission;\nbegin\n  Writeln('Mission ', FMissionName, ' is launching with ', FCrew, ' crew members on ', DateToStr(FLaunchDate));\nend;\n\nvar\n  Mission: TSpaceMission;\n\nbegin\n  Mission := TSpaceMission.Create('Apollo 11', 3, EncodeDate(1969, 7, 16));\n  Mission.LaunchMission;\nend.\n```"
  },
  {
    "task": "Create a class for a virtual assistant with attributes for name, language, and skills, and a method to add a new skill.",
    "code": "```pascal\nprogram VirtualAssistant;\n\ntype\n  TVirtualAssistant = class\n  private\n    FName: string;\n    FLanguage: string;\n    FSkills: array of string;\n  public\n    constructor Create(AName, ALanguage: string);\n    procedure AddSkill(NewSkill: string);\n    property Name: string read FName;\n    property Language: string read FLanguage;\n    property Skills: array of string read FSkills;\n  end;\n\nconstructor TVirtualAssistant.Create(AName, ALanguage: string);\nbegin\n  FName := AName;\n  FLanguage := ALanguage;\n  SetLength(FSkills, 0);\nend;\n\nprocedure TVirtualAssistant.AddSkill(NewSkill: string);\nbegin\n  SetLength(FSkills, Length(FSkills) + 1);\n  FSkills[High(FSkills)] := NewSkill;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Formulate a class for a news article with attributes for headline, content, and author, and a method to publish the article.",
    "code": "```pascal\nprogram NewsArticleClass;\n\ntype\n  TNewsArticle = class\n  private\n    FHeadline: string;\n    FContent: string;\n    FAuthor: string;\n  public\n    constructor Create(aHeadline, aContent, aAuthor: string);\n    procedure Publish;\n  end;\n\nconstructor TNewsArticle.Create(aHeadline, aContent, aAuthor: string);\nbegin\n  FHeadline := aHeadline;\n  FContent := aContent;\n  FAuthor := aAuthor;\nend;\n\nprocedure TNewsArticle.Publish;\nbegin\n  WriteLn('Headline: ', FHeadline);\n  WriteLn('Content: ', FContent);\n  WriteLn('Author: ', FAuthor);\nend;\n\nvar\n  Article: TNewsArticle;\n\nbegin\n  Article := TNewsArticle.Create('Breaking News', 'Some interesting content', 'John Doe');\n  Article.Publish;\n  Article.Free;\nend.\n```"
  },
  {
    "task": "Construct a class for a hiking trail with attributes for trail name, length, and difficulty, and a method to update the difficulty.",
    "code": "```pascal\nprogram HikingTrailClass;\n\ntype\n  THikingTrail = class\n  private\n    FTrailName: string;\n    FLength: real;\n    FDifficulty: string;\n  public\n    constructor Create(ATrailName: string; ALength: real; ADifficulty: string);\n    procedure UpdateDifficulty(NewDifficulty: string);\n    property TrailName: string read FTrailName write FTrailName;\n    property Length: real read FLength write FLength;\n    property Difficulty: string read FDifficulty write FDifficulty;\n  end;\n\nconstructor THikingTrail.Create(ATrailName: string; ALength: real; ADifficulty: string);\nbegin\n  FTrailName := ATrailName;\n  FLength := ALength;\n  FDifficulty := ADifficulty;\nend;\n\nprocedure THikingTrail.UpdateDifficulty(NewDifficulty: string);\nbegin\n  FDifficulty := NewDifficulty;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Design a class for a subscription service with properties for service name, subscriber count, and subscription fee, and a method to update the fee.",
    "code": "```pascal\nprogram SubscriptionService;\n\ntype\n  TSubscriptionService = class\n  private\n    FServiceName: string;\n    FSubscriberCount: Integer;\n    FSubscriptionFee: Real;\n  public\n    constructor Create(AServiceName: string; ASubscriberCount: Integer; ASubscriptionFee: Real);\n    procedure UpdateFee(NewFee: Real);\n    property ServiceName: string read FServiceName write FServiceName;\n    property SubscriberCount: Integer read FSubscriberCount write FSubscriberCount;\n    property SubscriptionFee: Real read FSubscriptionFee write FSubscriptionFee;\n  end;\n\nconstructor TSubscriptionService.Create(AServiceName: string; ASubscriberCount: Integer; ASubscriptionFee: Real);\nbegin\n  FServiceName := AServiceName;\n  FSubscriberCount := ASubscriberCount;\n  FSubscriptionFee := ASubscriptionFee;\nend;\n\nprocedure TSubscriptionService.UpdateFee(NewFee: Real);\nbegin\n  FSubscriptionFee := NewFee;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Build a class for a digital wallet with attributes for balance, transaction history, and a method to add funds.",
    "code": "```pascal\nprogram DigitalWalletProgram;\n\ntype\n  TTransaction = record\n    Amount: Real;\n    Description: String;\n  end;\n\n  TDigitalWallet = class\n  private\n    FBalance: Real;\n    FTransactionHistory: array of TTransaction;\n  public\n    constructor Create;\n    procedure AddFunds(Amount: Real; Description: String);\n    function GetBalance: Real;\n    function GetTransactionHistory: array of TTransaction;\n  end;\n\nconstructor TDigitalWallet.Create;\nbegin\n  FBalance := 0.0;\n  SetLength(FTransactionHistory, 0);\nend;\n\nprocedure TDigitalWallet.AddFunds(Amount: Real; Description: String);\nvar\n  NewTransaction: TTransaction;\nbegin\n  FBalance := FBalance + Amount;\n  NewTransaction.Amount := Amount;\n  NewTransaction.Description := Description;\n  SetLength(FTransactionHistory, Length(FTransactionHistory) + 1);\n  FTransactionHistory[High(FTransactionHistory)] := NewTransaction;\nend;\n\nfunction TDigitalWallet.GetBalance: Real;\nbegin\n  Result := FBalance;\nend;\n\nfunction TDigitalWallet.GetTransactionHistory: array of TTransaction;\nbegin\n  Result := FTransactionHistory;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Implement a class for a cooking recipe with attributes for name, ingredients, and instructions, and a method to update the instructions.",
    "code": "```pascal\nprogram RecipeClass;\n\ntype\n  TStringArray = array of string;\n\n  TRecipe = class\n  private\n    FName: string;\n    FIngredients: TStringArray;\n    FInstructions: string;\n  public\n    constructor Create(AName: string; AIngredients: TStringArray; AInstructions: string);\n    procedure UpdateInstructions(NewInstructions: string);\n    function GetName: string;\n    function GetIngredients: TStringArray;\n    function GetInstructions: string;\n  end;\n\nconstructor TRecipe.Create(AName: string; AIngredients: TStringArray; AInstructions: string);\nbegin\n  FName := AName;\n  FIngredients := AIngredients;\n  FInstructions := AInstructions;\nend;\n\nprocedure TRecipe.UpdateInstructions(NewInstructions: string);\nbegin\n  FInstructions := NewInstructions;\nend;\n\nfunction TRecipe.GetName: string;\nbegin\n  Result := FName;\nend;\n\nfunction TRecipe.GetIngredients: TStringArray;\nbegin\n  Result := FIngredients;\nend;\n\nfunction TRecipe.GetInstructions: string;\nbegin\n  Result := FInstructions;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Develop a class for a time zone with properties for zone name, offset, and a method to convert time from another time zone.",
    "code": "```pascal\nprogram TimeZoneExample;\n\ntype\n  TimeZone = class\n  private\n    FZoneName: string;\n    FOffset: Integer; // Offset in minutes\n  public\n    constructor Create(const AZoneName: string; AOffset: Integer);\n    function ConvertTime(OtherTime: TDateTime; OtherOffset: Integer): TDateTime;\n    property ZoneName: string read FZoneName write FZoneName;\n    property Offset: Integer read FOffset write FOffset;\n  end;\n\nconstructor TimeZone.Create(const AZoneName: string; AOffset: Integer);\nbegin\n  FZoneName := AZoneName;\n  FOffset := AOffset;\nend;\n\nfunction TimeZone.ConvertTime(OtherTime: TDateTime; OtherOffset: Integer): TDateTime;\nvar\n  TimeDifference: Integer;\nbegin\n  TimeDifference := FOffset - OtherOffset;\n  Result := IncMinute(OtherTime, TimeDifference);\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Create a class for a camera with attributes for resolution, brand, and model, and a method to take a picture.",
    "code": "```pascal\nprogram CameraClassExample;\n\ntype\n  TCamera = class\n  private\n    FResolution: string;\n    FBrand: string;\n    FModel: string;\n  public\n    constructor Create(AResolution, ABrand, AModel: string);\n    procedure TakePicture;\n  end;\n\nconstructor TCamera.Create(AResolution, ABrand, AModel: string);\nbegin\n  FResolution := AResolution;\n  FBrand := ABrand;\n  FModel := AModel;\nend;\n\nprocedure TCamera.TakePicture;\nbegin\n  Writeln('Picture taken with ', FBrand, ' ', FModel, ' at ', FResolution, ' resolution.');\nend;\n\nvar\n  Camera: TCamera;\n\nbegin\n  Camera := TCamera.Create('12MP', 'Canon', 'EOS R5');\n  try\n    Camera.TakePicture;\n  finally\n    Camera.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Design a class for a gaming console with properties for brand, model, and storage capacity, and a method to install a game.",
    "code": "```pascal\nprogram GamingConsoleProgram;\n\ntype\n  GamingConsole = class\n  private\n    FBrand: string;\n    FModel: string;\n    FStorageCapacity: integer;\n  public\n    constructor Create(Brand, Model: string; StorageCapacity: integer);\n    procedure InstallGame(GameName: string);\n  end;\n\nconstructor GamingConsole.Create(Brand, Model: string; StorageCapacity: integer);\nbegin\n  FBrand := Brand;\n  FModel := Model;\n  FStorageCapacity := StorageCapacity;\nend;\n\nprocedure GamingConsole.InstallGame(GameName: string);\nbegin\n  writeln('Installing game: ', GameName);\nend;\n\nvar\n  Console: GamingConsole;\n\nbegin\n  Console := GamingConsole.Create('BrandName', 'ModelName', 500);\n  Console.InstallGame('ExampleGame');\n  Console.Free;\nend.\n```"
  },
  {
    "task": "Formulate a class for a museum exhibit with attributes for exhibit name, artist, and year, and a method to update the year.",
    "code": "```pascal\nprogram MuseumExhibit;\n\ntype\n  TExhibit = class\n  private\n    FExhibitName: string;\n    FArtist: string;\n    FYear: integer;\n  public\n    constructor Create(AExhibitName, AArtist: string; AYear: integer);\n    procedure UpdateYear(NewYear: integer);\n    function GetExhibitName: string;\n    function GetArtist: string;\n    function GetYear: integer;\n  end;\n\nconstructor TExhibit.Create(AExhibitName, AArtist: string; AYear: integer);\nbegin\n  FExhibitName := AExhibitName;\n  FArtist := AArtist;\n  FYear := AYear;\nend;\n\nprocedure TExhibit.UpdateYear(NewYear: integer);\nbegin\n  FYear := NewYear;\nend;\n\nfunction TExhibit.GetExhibitName: string;\nbegin\n  Result := FExhibitName;\nend;\n\nfunction TExhibit.GetArtist: string;\nbegin\n  Result := FArtist;\nend;\n\nfunction TExhibit.GetYear: integer;\nbegin\n  Result := FYear;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Construct a class for a fitness tracker with attributes for steps, calories burned, and heart rate, and a method to add steps.",
    "code": "```pascal\nprogram FitnessTrackerClass;\n\ntype\n  TFitnessTracker = class\n  private\n    FSteps: Integer;\n    FCaloriesBurned: Double;\n    FHeartRate: Integer;\n  public\n    constructor Create;\n    procedure AddSteps(NewSteps: Integer);\n    property Steps: Integer read FSteps;\n    property CaloriesBurned: Double read FCaloriesBurned;\n    property HeartRate: Integer read FHeartRate;\n  end;\n\nconstructor TFitnessTracker.Create;\nbegin\n  FSteps := 0;\n  FCaloriesBurned := 0.0;\n  FHeartRate := 0;\nend;\n\nprocedure TFitnessTracker.AddSteps(NewSteps: Integer);\nbegin\n  FSteps := FSteps + NewSteps;\nend;\n\nbegin\n  // Example usage:\n  // var tracker: TFitnessTracker;\n  // begin\n  //   tracker := TFitnessTracker.Create;\n  //   tracker.AddSteps(1000);\n  // end.\nend.\n```"
  },
  {
    "task": "Build a class for an aquarium with properties for tank size, fish species, and water temperature, and a method to add a new fish.",
    "code": "```pascal\nprogram AquariumProgram;\n\ntype\n  TAquarium = class\n  private\n    FTankSize: Integer;\n    FFishSpecies: TStringList;\n    FWaterTemperature: Double;\n  public\n    constructor Create(ATankSize: Integer; AWaterTemperature: Double);\n    destructor Destroy; override;\n    procedure AddFishSpecies(const AFishSpecies: String);\n    property TankSize: Integer read FTankSize write FTankSize;\n    property WaterTemperature: Double read FWaterTemperature write FWaterTemperature;\n  end;\n\nconstructor TAquarium.Create(ATankSize: Integer; AWaterTemperature: Double);\nbegin\n  FTankSize := ATankSize;\n  FWaterTemperature := AWaterTemperature;\n  FFishSpecies := TStringList.Create;\nend;\n\ndestructor TAquarium.Destroy;\nbegin\n  FFishSpecies.Free;\n  inherited Destroy;\nend;\n\nprocedure TAquarium.AddFishSpecies(const AFishSpecies: String);\nbegin\n  FFishSpecies.Add(AFishSpecies);\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Create a class for a chat message with attributes for sender, content, and timestamp, and a method to edit the content.",
    "code": "```pascal\nprogram ChatMessageClass;\n\ntype\n  TChatMessage = class\n  private\n    FSender: string;\n    FContent: string;\n    FTimestamp: TDateTime;\n  public\n    constructor Create(ASender, AContent: string; ATimestamp: TDateTime);\n    procedure EditContent(NewContent: string);\n    property Sender: string read FSender;\n    property Content: string read FContent;\n    property Timestamp: TDateTime read FTimestamp;\n  end;\n\nconstructor TChatMessage.Create(ASender, AContent: string; ATimestamp: TDateTime);\nbegin\n  FSender := ASender;\n  FContent := AContent;\n  FTimestamp := ATimestamp;\nend;\n\nprocedure TChatMessage.EditContent(NewContent: string);\nbegin\n  FContent := NewContent;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Design a class for a vending machine with properties for items available, prices, and a method to dispense an item.",
    "code": "```pascal\nprogram VendingMachine;\n\ntype\n  TItem = record\n    Name: string;\n    Price: Real;\n  end;\n\n  TVendingMachine = class\n  private\n    FItems: array of TItem;\n  public\n    constructor Create;\n    procedure AddItem(const AName: string; APrice: Real);\n    function DispenseItem(const AName: string): string;\n  end;\n\nconstructor TVendingMachine.Create;\nbegin\n  SetLength(FItems, 0);\nend;\n\nprocedure TVendingMachine.AddItem(const AName: string; APrice: Real);\nvar\n  NewIndex: Integer;\nbegin\n  NewIndex := Length(FItems);\n  SetLength(FItems, NewIndex + 1);\n  FItems[NewIndex].Name := AName;\n  FItems[NewIndex].Price := APrice;\nend;\n\nfunction TVendingMachine.DispenseItem(const AName: string): string;\nvar\n  I: Integer;\nbegin\n  for I := 0 to High(FItems) do\n  begin\n    if FItems[I].Name = AName then\n    begin\n      Result := 'Dispensing ' + FItems[I].Name;\n      Exit;\n    end;\n  end;\n  Result := 'Item not available';\nend;\n\nvar\n  VendingMachine: TVendingMachine;\n\nbegin\n  VendingMachine := TVendingMachine.Create;\n  VendingMachine.AddItem('Soda', 1.50);\n  VendingMachine.AddItem('Chips', 1.00);\n  WriteLn(VendingMachine.DispenseItem('Soda'));\n  WriteLn(VendingMachine.DispenseItem('Candy'));\nend.\n```"
  },
  {
    "task": "Implement a class for a digital clock with attributes for current time, time zone, and a method to set an alarm.",
    "code": "```pascal\nprogram DigitalClockDemo;\n\ntype\n  TDigitalClock = class\n  private\n    FCurrentTime: TDateTime;\n    FTimeZone: string;\n    FAlarmTime: TDateTime;\n  public\n    constructor Create(ATime: TDateTime; ATimeZone: string);\n    procedure SetAlarm(AlarmTime: TDateTime);\n    function GetCurrentTime: TDateTime;\n    function GetTimeZone: string;\n  end;\n\nconstructor TDigitalClock.Create(ATime: TDateTime; ATimeZone: string);\nbegin\n  FCurrentTime := ATime;\n  FTimeZone := ATimeZone;\n  FAlarmTime := 0; // Default alarm time\nend;\n\nprocedure TDigitalClock.SetAlarm(AlarmTime: TDateTime);\nbegin\n  FAlarmTime := AlarmTime;\nend;\n\nfunction TDigitalClock.GetCurrentTime: TDateTime;\nbegin\n  Result := FCurrentTime;\nend;\n\nfunction TDigitalClock.GetTimeZone: string;\nbegin\n  Result := FTimeZone;\nend;\n\nvar\n  MyClock: TDigitalClock;\n\nbegin\n  MyClock := TDigitalClock.Create(Now, 'UTC');\n  MyClock.SetAlarm(EncodeTime(8, 0, 0, 0)); // Set alarm for 08:00 AM\n  // Use MyClock object...\n  MyClock.Free;\nend.\n```"
  },
  {
    "task": "Develop a class for a historical figure with attributes for name, birthdate, and achievements, and a method to add an achievement.",
    "code": "```pascal\nprogram HistoricalFigureClass;\n\ntype\n  THistoricalFigure = class\n  private\n    FName: string;\n    FBirthdate: string;\n    FAchievements: array of string;\n  public\n    constructor Create(const AName, ABirthdate: string);\n    procedure AddAchievement(const Achievement: string);\n    function GetName: string;\n    function GetBirthdate: string;\n    function GetAchievements: string;\n  end;\n\nconstructor THistoricalFigure.Create(const AName, ABirthdate: string);\nbegin\n  FName := AName;\n  FBirthdate := ABirthdate;\n  SetLength(FAchievements, 0);\nend;\n\nprocedure THistoricalFigure.AddAchievement(const Achievement: string);\nbegin\n  SetLength(FAchievements, Length(FAchievements) + 1);\n  FAchievements[High(FAchievements)] := Achievement;\nend;\n\nfunction THistoricalFigure.GetName: string;\nbegin\n  Result := FName;\nend;\n\nfunction THistoricalFigure.GetBirthdate: string;\nbegin\n  Result := FBirthdate;\nend;\n\nfunction THistoricalFigure.GetAchievements: string;\nvar\n  i: Integer;\n  AchievementsList: string;\nbegin\n  AchievementsList := '';\n  for i := 0 to High(FAchievements) do\n    AchievementsList := AchievementsList + FAchievements[i] + '; ';\n  Result := AchievementsList;\nend;\n\nvar\n  HistoricalFigure: THistoricalFigure;\nbegin\n  HistoricalFigure := THistoricalFigure.Create('Leonardo da Vinci', '15 April 1452');\n  HistoricalFigure.AddAchievement('Painted Mona Lisa');\n  HistoricalFigure.AddAchievement('Designed Flying Machine');\nend.\n```"
  },
  {
    "task": "Formulate a class for a travel itinerary with attributes for destinations, travel dates, and activities, and a method to add a destination.",
    "code": "```pascal\nprogram TravelItineraryExample;\n\ntype\n  TStringArray = array of string;\n\n  TTravelItinerary = class\n  private\n    FDestinations: TStringArray;\n    FTravelDates: TStringArray;\n    FActivities: TStringArray;\n  public\n    procedure AddDestination(NewDestination: string);\n  end;\n\nprocedure TTravelItinerary.AddDestination(NewDestination: string);\nbegin\n  SetLength(FDestinations, Length(FDestinations) + 1);\n  FDestinations[High(FDestinations)] := NewDestination;\nend;\n\nvar\n  Itinerary: TTravelItinerary;\nbegin\n  Itinerary := TTravelItinerary.Create;\n  Itinerary.AddDestination('Paris');\n  Itinerary.Free;\nend.\n```"
  },
  {
    "task": "Construct a class for a fashion brand with properties for brand name, founder, and product lines, and a method to launch a new product line.",
    "code": "```pascal\nprogram FashionBrandClass;\n\ntype\n  TFashionBrand = class\n  private\n    FBrandName: string;\n    FFounder: string;\n    FProductLines: array of string;\n  public\n    constructor Create(BrandName, Founder: string);\n    procedure LaunchNewProductLine(NewProductLine: string);\n  end;\n\nconstructor TFashionBrand.Create(BrandName, Founder: string);\nbegin\n  FBrandName := BrandName;\n  FFounder := Founder;\n  SetLength(FProductLines, 0);\nend;\n\nprocedure TFashionBrand.LaunchNewProductLine(NewProductLine: string);\nbegin\n  SetLength(FProductLines, Length(FProductLines) + 1);\n  FProductLines[High(FProductLines)] := NewProductLine;\nend;\n\nvar\n  MyFashionBrand: TFashionBrand;\n\nbegin\n  MyFashionBrand := TFashionBrand.Create('ChicStyle', 'Jane Doe');\n  MyFashionBrand.LaunchNewProductLine('Summer Collection');\n  MyFashionBrand.Free;\nend.\n```"
  },
  {
    "task": "Create a class for a video game with attributes for title, genre, and rating, and a method to update the rating.",
    "code": "```pascal\nprogram VideoGameClass;\n\ntype\n  TVideoGame = class\n  private\n    FTitle: String;\n    FGenre: String;\n    FRating: Integer;\n  public\n    constructor Create(ATitle, AGenre: String; ARating: Integer);\n    procedure UpdateRating(NewRating: Integer);\n    function GetTitle: String;\n    function GetGenre: String;\n    function GetRating: Integer;\n  end;\n\nconstructor TVideoGame.Create(ATitle, AGenre: String; ARating: Integer);\nbegin\n  FTitle := ATitle;\n  FGenre := AGenre;\n  FRating := ARating;\nend;\n\nprocedure TVideoGame.UpdateRating(NewRating: Integer);\nbegin\n  FRating := NewRating;\nend;\n\nfunction TVideoGame.GetTitle: String;\nbegin\n  Result := FTitle;\nend;\n\nfunction TVideoGame.GetGenre: String;\nbegin\n  Result := FGenre;\nend;\n\nfunction TVideoGame.GetRating: Integer;\nbegin\n  Result := FRating;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Build a class for a scientific experiment with attributes for experiment name, hypothesis, and results, and a method to record results.",
    "code": "```pascal\nprogram ScientificExperiment;\n\ntype\n  TScientificExperiment = class\n  private\n    FExperimentName: string;\n    FHypothesis: string;\n    FResults: string;\n  public\n    constructor Create(const AExperimentName, AHypothesis: string);\n    procedure RecordResults(const AResults: string);\n    function GetExperimentName: string;\n    function GetHypothesis: string;\n    function GetResults: string;\n  end;\n\nconstructor TScientificExperiment.Create(const AExperimentName, AHypothesis: string);\nbegin\n  FExperimentName := AExperimentName;\n  FHypothesis := AHypothesis;\n  FResults := '';\nend;\n\nprocedure TScientificExperiment.RecordResults(const AResults: string);\nbegin\n  FResults := AResults;\nend;\n\nfunction TScientificExperiment.GetExperimentName: string;\nbegin\n  Result := FExperimentName;\nend;\n\nfunction TScientificExperiment.GetHypothesis: string;\nbegin\n  Result := FHypothesis;\nend;\n\nfunction TScientificExperiment.GetResults: string;\nbegin\n  Result := FResults;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Design a class for a gourmet dish with properties for dish name, ingredients, and cooking time, and a method to change cooking time.",
    "code": "```pascal\nprogram GourmetDishClass;\n\ntype\n  TGourmetDish = class\n  private\n    FDishName: string;\n    FIngredients: string;\n    FCookingTime: Integer;\n  public\n    constructor Create(const ADishName, AIngredients: string; ACookingTime: Integer);\n    procedure SetCookingTime(ACookingTime: Integer);\n    function GetDishName: string;\n    function GetIngredients: string;\n    function GetCookingTime: Integer;\n  end;\n\nconstructor TGourmetDish.Create(const ADishName, AIngredients: string; ACookingTime: Integer);\nbegin\n  FDishName := ADishName;\n  FIngredients := AIngredients;\n  FCookingTime := ACookingTime;\nend;\n\nprocedure TGourmetDish.SetCookingTime(ACookingTime: Integer);\nbegin\n  FCookingTime := ACookingTime;\nend;\n\nfunction TGourmetDish.GetDishName: string;\nbegin\n  Result := FDishName;\nend;\n\nfunction TGourmetDish.GetIngredients: string;\nbegin\n  Result := FIngredients;\nend;\n\nfunction TGourmetDish.GetCookingTime: Integer;\nbegin\n  Result := FCookingTime;\nend;\n\nvar\n  Dish: TGourmetDish;\n\nbegin\n  Dish := TGourmetDish.Create('Truffle Pasta', 'Pasta, Truffles, Olive Oil, Parmesan', 30);\n  Dish.SetCookingTime(25);\nend.\n```"
  },
  {
    "task": "Implement a class for a political office with attributes for office title, holder, and term length, and a method to change the holder.",
    "code": "```pascal\nprogram PoliticalOfficeClass;\n\ntype\n  TPoliticalOffice = class\n  private\n    FOfficeTitle: string;\n    FHolder: string;\n    FTermLength: Integer;\n  public\n    constructor Create(OfficeTitle: string; Holder: string; TermLength: Integer);\n    procedure ChangeHolder(NewHolder: string);\n    property OfficeTitle: string read FOfficeTitle;\n    property Holder: string read FHolder;\n    property TermLength: Integer read FTermLength;\n  end;\n\nconstructor TPoliticalOffice.Create(OfficeTitle: string; Holder: string; TermLength: Integer);\nbegin\n  FOfficeTitle := OfficeTitle;\n  FHolder := Holder;\n  FTermLength := TermLength;\nend;\n\nprocedure TPoliticalOffice.ChangeHolder(NewHolder: string);\nbegin\n  FHolder := NewHolder;\nend;\n\nvar\n  Office: TPoliticalOffice;\nbegin\n  Office := TPoliticalOffice.Create('President', 'John Doe', 4);\n  Office.ChangeHolder('Jane Smith');\n  Office.Free;\nend.\n```"
  },
  {
    "task": "Develop a class for an astronomical object with properties for name, type, and distance from Earth, and a method to update the distance.",
    "code": "```pascal\nprogram AstronomicalObjectClass;\n\ntype\n  TAstronomicalObject = class\n  private\n    FName: string;\n    FType: string;\n    FDistanceFromEarth: real;\n  public\n    constructor Create(AName, AType: string; ADistanceFromEarth: real);\n    procedure UpdateDistance(ANewDistance: real);\n    property Name: string read FName;\n    property ObjectType: string read FType;\n    property DistanceFromEarth: real read FDistanceFromEarth;\n  end;\n\nconstructor TAstronomicalObject.Create(AName, AType: string; ADistanceFromEarth: real);\nbegin\n  FName := AName;\n  FType := AType;\n  FDistanceFromEarth := ADistanceFromEarth;\nend;\n\nprocedure TAstronomicalObject.UpdateDistance(ANewDistance: real);\nbegin\n  FDistanceFromEarth := ANewDistance;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Formulate a class for a public transportation route with attributes for route number, stops, and schedule, and a method to add a stop.",
    "code": "```pascal\nprogram TransportationRoute;\n\ntype\n  TStringArray = array of string;\n\n  TPublicTransportRoute = class\n  private\n    FRouteNumber: Integer;\n    FStops: TStringArray;\n    FSchedule: TStringArray;\n  public\n    constructor Create(ARouteNumber: Integer; AStops, ASchedule: TStringArray);\n    procedure AddStop(AStop: string);\n  end;\n\nconstructor TPublicTransportRoute.Create(ARouteNumber: Integer; AStops, ASchedule: TStringArray);\nbegin\n  FRouteNumber := ARouteNumber;\n  FStops := AStops;\n  FSchedule := ASchedule;\nend;\n\nprocedure TPublicTransportRoute.AddStop(AStop: string);\nbegin\n  SetLength(FStops, Length(FStops) + 1);\n  FStops[High(FStops)] := AStop;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Construct a class for a board game with properties for game name, player count, and rules, and a method to change the rules.",
    "code": "```pascal\nprogram BoardGameClass;\n\ntype\n  TBoardGame = class\n  private\n    FGameName: string;\n    FPlayerCount: Integer;\n    FRules: string;\n  public\n    constructor Create(aGameName: string; aPlayerCount: Integer; aRules: string);\n    procedure ChangeRules(aNewRules: string);\n    property GameName: string read FGameName write FGameName;\n    property PlayerCount: Integer read FPlayerCount write FPlayerCount;\n    property Rules: string read FRules write FRules;\n  end;\n\nconstructor TBoardGame.Create(aGameName: string; aPlayerCount: Integer; aRules: string);\nbegin\n  FGameName := aGameName;\n  FPlayerCount := aPlayerCount;\n  FRules := aRules;\nend;\n\nprocedure TBoardGame.ChangeRules(aNewRules: string);\nbegin\n  FRules := aNewRules;\nend;\n\nvar\n  MyBoardGame: TBoardGame;\n\nbegin\n  MyBoardGame := TBoardGame.Create('Chess', 2, 'Standard International Rules');\n  MyBoardGame.ChangeRules('Modified Tournament Rules');\nend.\n```"
  },
  {
    "task": "Create a class for a customer loyalty program with attributes for program name, points, and rewards, and a method to redeem points.",
    "code": "```pascal\nprogram CustomerLoyaltyProgram;\n\ntype\n  TLoyaltyProgram = class\n  private\n    FProgramName: string;\n    FPoints: Integer;\n    FRewards: string;\n  public\n    constructor Create(ProgramName: string; Points: Integer; Rewards: string);\n    procedure RedeemPoints(PointsToRedeem: Integer);\n    property ProgramName: string read FProgramName write FProgramName;\n    property Points: Integer read FPoints write FPoints;\n    property Rewards: string read FRewards write FRewards;\n  end;\n\nconstructor TLoyaltyProgram.Create(ProgramName: string; Points: Integer; Rewards: string);\nbegin\n  FProgramName := ProgramName;\n  FPoints := Points;\n  FRewards := Rewards;\nend;\n\nprocedure TLoyaltyProgram.RedeemPoints(PointsToRedeem: Integer);\nbegin\n  if FPoints >= PointsToRedeem then\n  begin\n    FPoints := FPoints - PointsToRedeem;\n    writeln('Points redeemed: ', PointsToRedeem);\n  end\n  else\n    writeln('Not enough points to redeem.');\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Design a class for an art gallery with properties for gallery name, location, and exhibitions, and a method to add a new exhibition.",
    "code": "```pascal\nprogram ArtGallery;\n\ntype\n  TArtGallery = class\n  private\n    FGalleryName: string;\n    FLocation: string;\n    FExhibitions: array of string;\n  public\n    constructor Create(const GalleryName, Location: string);\n    procedure AddExhibition(const Exhibition: string);\n  end;\n\nconstructor TArtGallery.Create(const GalleryName, Location: string);\nbegin\n  FGalleryName := GalleryName;\n  FLocation := Location;\n  SetLength(FExhibitions, 0);\nend;\n\nprocedure TArtGallery.AddExhibition(const Exhibition: string);\nbegin\n  SetLength(FExhibitions, Length(FExhibitions) + 1);\n  FExhibitions[High(FExhibitions)] := Exhibition;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Build a class for a personal blog with attributes for blog name, posts, and a method to add a new post.",
    "code": "```pascal\nprogram PersonalBlog;\n\ntype\n  TPost = record\n    Content: string;\n  end;\n\n  TBlog = class\n  private\n    FBlogName: string;\n    FPosts: array of TPost;\n  public\n    constructor Create(Name: string);\n    procedure AddPost(Content: string);\n    property BlogName: string read FBlogName;\n  end;\n\nconstructor TBlog.Create(Name: string);\nbegin\n  FBlogName := Name;\n  SetLength(FPosts, 0);\nend;\n\nprocedure TBlog.AddPost(Content: string);\nvar\n  NewPost: TPost;\nbegin\n  NewPost.Content := Content;\n  SetLength(FPosts, Length(FPosts) + 1);\n  FPosts[High(FPosts)] := NewPost;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Implement a class for a mobile application with properties for app name, version, and developer, and a method to update the version.",
    "code": "```pascal\nprogram MobileAppClass;\n\ntype\n  TMobileApp = class\n  private\n    FAppName: string;\n    FVersion: string;\n    FDeveloper: string;\n  public\n    constructor Create(AAppName, AVersion, ADeveloper: string);\n    procedure UpdateVersion(NewVersion: string);\n    property AppName: string read FAppName write FAppName;\n    property Version: string read FVersion write FVersion;\n    property Developer: string read FDeveloper write FDeveloper;\n  end;\n\nconstructor TMobileApp.Create(AAppName, AVersion, ADeveloper: string);\nbegin\n  FAppName := AAppName;\n  FVersion := AVersion;\n  FDeveloper := ADeveloper;\nend;\n\nprocedure TMobileApp.UpdateVersion(NewVersion: string);\nbegin\n  FVersion := NewVersion;\nend;\n\nvar\n  MyApp: TMobileApp;\n\nbegin\n  MyApp := TMobileApp.Create('ExampleApp', '1.0', 'ExampleDeveloper');\n  MyApp.UpdateVersion('1.1');\nend.\n```"
  },
  {
    "task": "Develop a class for a language translator with attributes for source language, target language, and translation method, and a method to translate a text.",
    "code": "```pascal\nprogram LanguageTranslator;\n\ntype\n  Translator = class\n  private\n    SourceLanguage: string;\n    TargetLanguage: string;\n    TranslationMethod: string;\n  public\n    constructor Create(srcLang, tgtLang, method: string);\n    function Translate(text: string): string;\n  end;\n\nconstructor Translator.Create(srcLang, tgtLang, method: string);\nbegin\n  SourceLanguage := srcLang;\n  TargetLanguage := tgtLang;\n  TranslationMethod := method;\nend;\n\nfunction Translator.Translate(text: string): string;\nbegin\n  // Placeholder translation logic\n  Translate := 'Translated text from ' + SourceLanguage + ' to ' + TargetLanguage;\nend;\n\nvar\n  myTranslator: Translator;\n  translatedText: string;\nbegin\n  myTranslator := Translator.Create('English', 'Spanish', 'Automated');\n  translatedText := myTranslator.Translate('Hello, world!');\n  writeln(translatedText);\n  myTranslator.Free;\nend.\n```"
  },
  {
    "task": "Formulate a class for a culinary school with properties for school name, courses offered, and a method to add a new course.",
    "code": "```pascal\nprogram CulinarySchool;\n\ntype\n  TCulinarySchool = class\n  private\n    FSchoolName: string;\n    FCourses: array of string;\n  public\n    constructor Create(SchoolName: string);\n    procedure AddCourse(CourseName: string);\n    function GetSchoolName: string;\n    function GetCourses: string;\n  end;\n\nconstructor TCulinarySchool.Create(SchoolName: string);\nbegin\n  FSchoolName := SchoolName;\n  SetLength(FCourses, 0);\nend;\n\nprocedure TCulinarySchool.AddCourse(CourseName: string);\nbegin\n  SetLength(FCourses, Length(FCourses) + 1);\n  FCourses[High(FCourses)] := CourseName;\nend;\n\nfunction TCulinarySchool.GetSchoolName: string;\nbegin\n  Result := FSchoolName;\nend;\n\nfunction TCulinarySchool.GetCourses: string;\nvar\n  i: Integer;\n  CourseList: string;\nbegin\n  CourseList := '';\n  for i := 0 to High(FCourses) do\n  begin\n    CourseList := CourseList + FCourses[i];\n    if i < High(FCourses) then\n      CourseList := CourseList + ', ';\n  end;\n  Result := CourseList;\nend;\n\nvar\n  CulinarySchool: TCulinarySchool;\n\nbegin\n  CulinarySchool := TCulinarySchool.Create('Gourmet Institute');\n  CulinarySchool.AddCourse('Baking Basics');\n  CulinarySchool.AddCourse('Advanced Pastry');\n  Writeln('School Name: ', CulinarySchool.GetSchoolName);\n  Writeln('Courses Offered: ', CulinarySchool.GetCourses);\nend.\n```"
  },
  {
    "task": "Construct a class for a musical band with attributes for band name, members, and genre, and a method to add a new member.",
    "code": "```pascal\nprogram BandClassDemo;\n\ntype\n  TBand = class\n  private\n    FBandName: string;\n    FMembers: array of string;\n    FGenre: string;\n  public\n    constructor Create(const ABandName, AGenre: string);\n    procedure AddMember(const AMemberName: string);\n    function GetBandName: string;\n    function GetMembers: string;\n    function GetGenre: string;\n  end;\n\nconstructor TBand.Create(const ABandName, AGenre: string);\nbegin\n  FBandName := ABandName;\n  FGenre := AGenre;\n  SetLength(FMembers, 0);\nend;\n\nprocedure TBand.AddMember(const AMemberName: string);\nbegin\n  SetLength(FMembers, Length(FMembers) + 1);\n  FMembers[High(FMembers)] := AMemberName;\nend;\n\nfunction TBand.GetBandName: string;\nbegin\n  Result := FBandName;\nend;\n\nfunction TBand.GetMembers: string;\nvar\n  i: Integer;\n  MembersStr: string;\nbegin\n  MembersStr := '';\n  for i := 0 to High(FMembers) do\n  begin\n    MembersStr := MembersStr + FMembers[i];\n    if i < High(FMembers) then\n      MembersStr := MembersStr + ', ';\n  end;\n  Result := MembersStr;\nend;\n\nfunction TBand.GetGenre: string;\nbegin\n  Result := FGenre;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Create a class for a television series with properties for series title, episodes, and network, and a method to add a new episode.",
    "code": "```pascal\nprogram TelevisionSeries;\n\ntype\n  TTelevisionSeries = class\n  private\n    FSeriesTitle: string;\n    FEpisodes: array of string;\n    FNetwork: string;\n  public\n    constructor Create(ATitle, ANetwork: string);\n    procedure AddEpisode(AEpisode: string);\n    function GetTitle: string;\n    function GetNetwork: string;\n    function GetEpisodes: array of string;\n  end;\n\nconstructor TTelevisionSeries.Create(ATitle, ANetwork: string);\nbegin\n  FSeriesTitle := ATitle;\n  FNetwork := ANetwork;\n  SetLength(FEpisodes, 0);\nend;\n\nprocedure TTelevisionSeries.AddEpisode(AEpisode: string);\nbegin\n  SetLength(FEpisodes, Length(FEpisodes) + 1);\n  FEpisodes[High(FEpisodes)] := AEpisode;\nend;\n\nfunction TTelevisionSeries.GetTitle: string;\nbegin\n  Result := FSeriesTitle;\nend;\n\nfunction TTelevisionSeries.GetNetwork: string;\nbegin\n  Result := FNetwork;\nend;\n\nfunction TTelevisionSeries.GetEpisodes: array of string;\nbegin\n  Result := FEpisodes;\nend;\n\nend.\n```"
  },
  {
    "task": "Design a class for a wildlife reserve with attributes for reserve name, species protected, and area size, and a method to expand the area.",
    "code": "```pascal\nprogram WildlifeReserve;\n\ntype\n  TWildlifeReserve = class\n  private\n    FReserveName: string;\n    FSpeciesProtected: string;\n    FAreaSize: Real;\n  public\n    constructor Create(AReserveName, ASpeciesProtected: string; AAreaSize: Real);\n    procedure ExpandArea(AdditionalArea: Real);\n    property ReserveName: string read FReserveName;\n    property SpeciesProtected: string read FSpeciesProtected;\n    property AreaSize: Real read FAreaSize;\n  end;\n\nconstructor TWildlifeReserve.Create(AReserveName, ASpeciesProtected: string; AAreaSize: Real);\nbegin\n  FReserveName := AReserveName;\n  FSpeciesProtected := ASpeciesProtected;\n  FAreaSize := AAreaSize;\nend;\n\nprocedure TWildlifeReserve.ExpandArea(AdditionalArea: Real);\nbegin\n  FAreaSize := FAreaSize + AdditionalArea;\nend;\n\nvar\n  Reserve: TWildlifeReserve;\n\nbegin\n  Reserve := TWildlifeReserve.Create('Savannah Reserve', 'Elephants', 1500.0);\n  Reserve.ExpandArea(500.0);\nend.\n```"
  },
  {
    "task": "Build a class for a luxury car with properties for brand, model, and price, and a method to update the price.",
    "code": "```pascal\nprogram LuxuryCarClass;\n\ntype\n  TLuxuryCar = class\n  private\n    FBrand: string;\n    FModel: string;\n    FPrice: Real;\n  public\n    constructor Create(Brand, Model: string; Price: Real);\n    procedure UpdatePrice(NewPrice: Real);\n    function GetBrand: string;\n    function GetModel: string;\n    function GetPrice: Real;\n  end;\n\nconstructor TLuxuryCar.Create(Brand, Model: string; Price: Real);\nbegin\n  FBrand := Brand;\n  FModel := Model;\n  FPrice := Price;\nend;\n\nprocedure TLuxuryCar.UpdatePrice(NewPrice: Real);\nbegin\n  FPrice := NewPrice;\nend;\n\nfunction TLuxuryCar.GetBrand: string;\nbegin\n  Result := FBrand;\nend;\n\nfunction TLuxuryCar.GetModel: string;\nbegin\n  Result := FModel;\nend;\n\nfunction TLuxuryCar.GetPrice: Real;\nbegin\n  Result := FPrice;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Implement a class for a scientific journal with attributes for journal name, articles, and impact factor, and a method to add a new article.",
    "code": "```pascal\nprogram ScientificJournal;\n\ntype\n  TScientificJournal = class\n  private\n    FJournalName: string;\n    FArticles: array of string;\n    FImpactFactor: Real;\n  public\n    constructor Create(const AJournalName: string; AImpactFactor: Real);\n    procedure AddArticle(const ArticleTitle: string);\n  end;\n\nconstructor TScientificJournal.Create(const AJournalName: string; AImpactFactor: Real);\nbegin\n  FJournalName := AJournalName;\n  FImpactFactor := AImpactFactor;\n  SetLength(FArticles, 0);\nend;\n\nprocedure TScientificJournal.AddArticle(const ArticleTitle: string);\nbegin\n  SetLength(FArticles, Length(FArticles) + 1);\n  FArticles[High(FArticles)] := ArticleTitle;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Develop a class for a historical monument with properties for monument name, location, and year established, and a method to update the location.",
    "code": "```pascal\nprogram HistoricalMonumentApp;\n\ntype\n  THistoricalMonument = class\n  private\n    FMonumentName: string;\n    FLocation: string;\n    FYearEstablished: Integer;\n  public\n    constructor Create(const AName, ALocation: string; AYear: Integer);\n    procedure UpdateLocation(const ANewLocation: string);\n    property MonumentName: string read FMonumentName;\n    property Location: string read FLocation write FLocation;\n    property YearEstablished: Integer read FYearEstablished;\n  end;\n\nconstructor THistoricalMonument.Create(const AName, ALocation: string; AYear: Integer);\nbegin\n  FMonumentName := AName;\n  FLocation := ALocation;\n  FYearEstablished := AYear;\nend;\n\nprocedure THistoricalMonument.UpdateLocation(const ANewLocation: string);\nbegin\n  FLocation := ANewLocation;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Formulate a class for an educational course with attributes for course title, instructor, and syllabus, and a method to update the syllabus.",
    "code": "```pascal\nprogram EducationalCourse;\n\ntype\n  TCourse = class\n  private\n    FCourseTitle: string;\n    FInstructor: string;\n    FSyllabus: string;\n  public\n    constructor Create(const ACourseTitle, AInstructor, ASyllabus: string);\n    \n    procedure UpdateSyllabus(const NewSyllabus: string);\n    \n    function GetCourseTitle: string;\n    function GetInstructor: string;\n    function GetSyllabus: string;\n  end;\n\nconstructor TCourse.Create(const ACourseTitle, AInstructor, ASyllabus: string);\nbegin\n  FCourseTitle := ACourseTitle;\n  FInstructor := AInstructor;\n  FSyllabus := ASyllabus;\nend;\n\nprocedure TCourse.UpdateSyllabus(const NewSyllabus: string);\nbegin\n  FSyllabus := NewSyllabus;\nend;\n\nfunction TCourse.GetCourseTitle: string;\nbegin\n  Result := FCourseTitle;\nend;\n\nfunction TCourse.GetInstructor: string;\nbegin\n  Result := FInstructor;\nend;\n\nfunction TCourse.GetSyllabus: string;\nbegin\n  Result := FSyllabus;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Construct a class for a city park with properties for park name, facilities, and opening hours, and a method to add a new facility.",
    "code": "```pascal\nprogram CityParkClass;\n\ntype\n  TCityPark = class\n  private\n    FParkName: string;\n    FFacilities: array of string;\n    FOpeningHours: string;\n  public\n    constructor Create(const AParkName, AOpeningHours: string);\n    procedure AddFacility(const AFacility: string);\n    function GetParkName: string;\n    function GetFacilities: TArray<string>;\n    function GetOpeningHours: string;\n  end;\n\nconstructor TCityPark.Create(const AParkName, AOpeningHours: string);\nbegin\n  FParkName := AParkName;\n  FOpeningHours := AOpeningHours;\n  SetLength(FFacilities, 0);\nend;\n\nprocedure TCityPark.AddFacility(const AFacility: string);\nbegin\n  SetLength(FFacilities, Length(FFacilities) + 1);\n  FFacilities[High(FFacilities)] := AFacility;\nend;\n\nfunction TCityPark.GetParkName: string;\nbegin\n  Result := FParkName;\nend;\n\nfunction TCityPark.GetFacilities: TArray<string>;\nbegin\n  Result := FFacilities;\nend;\n\nfunction TCityPark.GetOpeningHours: string;\nbegin\n  Result := FOpeningHours;\nend;\n\nbegin\n  // Example usage:\n  // var Park: TCityPark;\n  // Park := TCityPark.Create('Central Park', '6 AM - 8 PM');\n  // Park.AddFacility('Playground');\nend.\n```"
  },
  {
    "task": "Create a class for a fitness class with attributes for class name, instructor, and schedule, and a method to update the schedule.",
    "code": "```pascal\nprogram FitnessClassProgram;\n\ntype\n  TFitnessClass = class\n  private\n    FClassName: string;\n    FInstructor: string;\n    FSchedule: string;\n  public\n    constructor Create(AClassName, AInstructor, ASchedule: string);\n    procedure UpdateSchedule(NewSchedule: string);\n    property ClassName: string read FClassName write FClassName;\n    property Instructor: string read FInstructor write FInstructor;\n    property Schedule: string read FSchedule write FSchedule;\n  end;\n\nconstructor TFitnessClass.Create(AClassName, AInstructor, ASchedule: string);\nbegin\n  FClassName := AClassName;\n  FInstructor := AInstructor;\n  FSchedule := ASchedule;\nend;\n\nprocedure TFitnessClass.UpdateSchedule(NewSchedule: string);\nbegin\n  FSchedule := NewSchedule;\nend;\n\nvar\n  FitnessClass: TFitnessClass;\n\nbegin\n  FitnessClass := TFitnessClass.Create('Yoga', 'John Doe', 'Monday 9 AM');\n  FitnessClass.UpdateSchedule('Wednesday 10 AM');\n  FitnessClass.Free;\nend.\n```"
  },
  {
    "task": "Design a class for a virtual reality game with properties for game name, platform, and VR compatibility, and a method to change the platform.",
    "code": "```pascal\nprogram VRGameClass;\n\ntype\n  TVRGame = class\n  private\n    FGameName: string;\n    FPlatform: string;\n    FVRCompatible: Boolean;\n  public\n    constructor Create(GameName: string; Platform: string; VRCompatible: Boolean);\n    procedure ChangePlatform(NewPlatform: string);\n    property GameName: string read FGameName;\n    property Platform: string read FPlatform;\n    property VRCompatible: Boolean read FVRCompatible;\n  end;\n\nconstructor TVRGame.Create(GameName: string; Platform: string; VRCompatible: Boolean);\nbegin\n  FGameName := GameName;\n  FPlatform := Platform;\n  FVRCompatible := VRCompatible;\nend;\n\nprocedure TVRGame.ChangePlatform(NewPlatform: string);\nbegin\n  FPlatform := NewPlatform;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Build a class for a mountain range with attributes for range name, highest peak, and countries covered, and a method to add a new peak.",
    "code": "```pascal\nprogram MountainRangeProgram;\n\ntype\n  TMountainRange = class\n  private\n    FRangeName: string;\n    FHighestPeak: string;\n    FCountriesCovered: array of string;\n  public\n    constructor Create(RangeName: string; HighestPeak: string; CountriesCovered: array of string);\n    procedure AddPeak(NewPeak: string);\n    procedure DisplayInfo;\n  end;\n\nconstructor TMountainRange.Create(RangeName: string; HighestPeak: string; CountriesCovered: array of string);\nvar\n  i: Integer;\nbegin\n  FRangeName := RangeName;\n  FHighestPeak := HighestPeak;\n  SetLength(FCountriesCovered, Length(CountriesCovered));\n  for i := 0 to High(CountriesCovered) do\n    FCountriesCovered[i] := CountriesCovered[i];\nend;\n\nprocedure TMountainRange.AddPeak(NewPeak: string);\nbegin\n  FHighestPeak := NewPeak;\nend;\n\nprocedure TMountainRange.DisplayInfo;\nvar\n  i: Integer;\nbegin\n  WriteLn('Mountain Range: ', FRangeName);\n  WriteLn('Highest Peak: ', FHighestPeak);\n  Write('Countries Covered: ');\n  for i := 0 to High(FCountriesCovered) do\n  begin\n    Write(FCountriesCovered[i]);\n    if i < High(FCountriesCovered) then\n      Write(', ');\n  end;\n  WriteLn;\nend;\n\nvar\n  MyMountainRange: TMountainRange;\nbegin\n  MyMountainRange := TMountainRange.Create('Himalayas', 'Mount Everest', ['Nepal', 'China']);\n  MyMountainRange.DisplayInfo;\n  MyMountainRange.AddPeak('K2');\n  MyMountainRange.DisplayInfo;\nend.\n```"
  },
  {
    "task": "Implement a class for a documentary film with properties for title, director, and subject, and a method to update the subject.",
    "code": "```pascal\nprogram DocumentaryFilmClass;\n\ntype\n  TDocumentaryFilm = class\n  private\n    FTitle: string;\n    FDirector: string;\n    FSubject: string;\n  public\n    constructor Create(ATitle, ADirector, ASubject: string);\n    procedure UpdateSubject(NewSubject: string);\n    property Title: string read FTitle;\n    property Director: string read FDirector;\n    property Subject: string read FSubject;\n  end;\n\nconstructor TDocumentaryFilm.Create(ATitle, ADirector, ASubject: string);\nbegin\n  FTitle := ATitle;\n  FDirector := ADirector;\n  FSubject := ASubject;\nend;\n\nprocedure TDocumentaryFilm.UpdateSubject(NewSubject: string);\nbegin\n  FSubject := NewSubject;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Develop a class for a classical music composition with attributes for composition name, composer, and duration, and a method to change the duration.",
    "code": "```pascal\nprogram ClassicalMusicComposition;\n\ntype\n  TComposition = class\n    private\n      FName: string;\n      FComposer: string;\n      FDuration: integer;\n    public\n      constructor Create(aName: string; aComposer: string; aDuration: integer);\n      procedure SetDuration(NewDuration: integer);\n      property Name: string read FName;\n      property Composer: string read FComposer;\n      property Duration: integer read FDuration;\n  end;\n\nconstructor TComposition.Create(aName: string; aComposer: string; aDuration: integer);\nbegin\n  FName := aName;\n  FComposer := aComposer;\n  FDuration := aDuration;\nend;\n\nprocedure TComposition.SetDuration(NewDuration: integer);\nbegin\n  FDuration := NewDuration;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Formulate a class for a public library with properties for library name, books available, and membership, and a method to add a new book.",
    "code": "```pascal\nprogram LibraryClassDemo;\n\ntype\n  TBook = record\n    Title: string;\n  end;\n\n  TLibrary = class\n  private\n    FLibraryName: string;\n    FBooksAvailable: array of TBook;\n    FMembership: integer;\n  public\n    constructor Create(const ALibraryName: string; AMembership: integer);\n    procedure AddBook(const ABookTitle: string);\n    property LibraryName: string read FLibraryName;\n    property BooksAvailable: array of TBook read FBooksAvailable;\n    property Membership: integer read FMembership;\n  end;\n\nconstructor TLibrary.Create(const ALibraryName: string; AMembership: integer);\nbegin\n  FLibraryName := ALibraryName;\n  FMembership := AMembership;\nend;\n\nprocedure TLibrary.AddBook(const ABookTitle: string);\nvar\n  NewBook: TBook;\n  Len: integer;\nbegin\n  NewBook.Title := ABookTitle;\n  Len := Length(FBooksAvailable);\n  SetLength(FBooksAvailable, Len + 1);\n  FBooksAvailable[Len] := NewBook;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Construct a class for a tech startup with attributes for startup name, founder, and funding, and a method to raise additional funding.",
    "code": "```pascal\nprogram TechStartupClass;\n\ntype\n  TTechStartup = class\n  private\n    FStartupName: string;\n    FFounder: string;\n    FFunding: Currency;\n  public\n    constructor Create(AStartupName, AFounder: string; AFunding: Currency);\n    procedure RaiseFunding(AdditionalFunding: Currency);\n    function GetStartupName: string;\n    function GetFounder: string;\n    function GetFunding: Currency;\n  end;\n\nconstructor TTechStartup.Create(AStartupName, AFounder: string; AFunding: Currency);\nbegin\n  FStartupName := AStartupName;\n  FFounder := AFounder;\n  FFunding := AFunding;\nend;\n\nprocedure TTechStartup.RaiseFunding(AdditionalFunding: Currency);\nbegin\n  FFunding := FFunding + AdditionalFunding;\nend;\n\nfunction TTechStartup.GetStartupName: string;\nbegin\n  Result := FStartupName;\nend;\n\nfunction TTechStartup.GetFounder: string;\nbegin\n  Result := FFounder;\nend;\n\nfunction TTechStartup.GetFunding: Currency;\nbegin\n  Result := FFunding;\nend;\n\nbegin\n  // Example of usage\n  // var Startup: TTechStartup;\n  // Startup := TTechStartup.Create('Tech Innovators', 'Alice Johnson', 500000.00);\n  // Startup.RaiseFunding(100000.00);\n  // WriteLn('Funding after raise: ', Startup.GetFunding:0:2);\nend.\n```"
  }
]