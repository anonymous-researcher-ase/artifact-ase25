[
  {
    "task": "Create a program that continuously asks the user to enter a number until they input a negative number.",
    "code": "```pascal\nprogram AskForNumber;\nvar\n  number: Integer;\nbegin\n  Write('Enter a number: ');\n  ReadLn(number);\n  while number >= 0 do\n  begin\n    Write('Enter a number: ');\n    ReadLn(number);\n  end;\nend.\n```"
  },
  {
    "task": "Write a function that doubles a number and repeats the process until the number is greater than 1000.",
    "code": "```pascal\nfunction DoubleUntilGreaterThanThousand(x: Integer): Integer;\nbegin\n  while x <= 1000 do\n    x := x * 2;\n  DoubleUntilGreaterThanThousand := x;\nend;\n```"
  },
  {
    "task": "Develop a routine to keep printing 'Hello, World!' until a counter reaches 10.",
    "code": "```pascal\nprogram HelloWorld;\n\nvar\n  counter: Integer;\n\nbegin\n  counter := 0;\n  \n  while counter < 10 do\n  begin\n    WriteLn('Hello, World!');\n    counter := counter + 1;\n  end;\nend.\n```"
  },
  {
    "task": "Construct a loop that checks if a randomly generated number is even, repeating until an odd number is found.",
    "code": "```pascal\nprogram FindOddNumber;\nuses SysUtils;\n\nvar\n  num: Integer;\n\nbegin\n  Randomize;\n  num := Random(100); // generates a random number between 0 and 99\n  while (num mod 2 = 0) do\n  begin\n    num := Random(100);\n  end;\n  WriteLn('Found an odd number: ', num);\nend.\n```"
  },
  {
    "task": "Design a countdown timer that prints each second until it reaches zero.",
    "code": "```pascal\nprogram CountdownTimer;\n\nvar\n  seconds: Integer;\n\nbegin\n  seconds := 10; { Set the initial countdown time }\n  \n  while seconds >= 0 do\n  begin\n    WriteLn(seconds);\n    Dec(seconds);\n    Sleep(1000); { Pause for 1 second }\n  end;\nend.\n```"
  },
  {
    "task": "Implement a system where a user can keep adding items to a list until they type 'stop'.",
    "code": "```pascal\nprogram AddItemsToList;\n\nuses\n  SysUtils;\n\nvar\n  itemList: array of string;\n  input: string;\n  count: Integer;\n\nbegin\n  count := 0;\n  SetLength(itemList, count);\n\n  Write('Enter an item (type \"stop\" to end): ');\n  ReadLn(input);\n\n  while input <> 'stop' do\n  begin\n    count := count + 1;\n    SetLength(itemList, count);\n    itemList[count - 1] := input;\n    Write('Enter an item (type \"stop\" to end): ');\n    ReadLn(input);\n  end;\nend.\n```"
  },
  {
    "task": "Write a script that simulates rolling a die and continues until a six is rolled.",
    "code": "```pascal\nprogram RollDie;\n\nvar\n  roll: Integer;\n\nbegin\n  Randomize;\n  roll := 0;\n  while roll <> 6 do\n  begin\n    roll := Random(6) + 1;\n    writeln('Rolled: ', roll);\n  end;\nend.\n```"
  },
  {
    "task": "Create a program that asks for a password and keeps prompting until the correct password is entered.",
    "code": "```pascal\nprogram PasswordCheck;\n\nvar\n  inputPassword: string;\n  correctPassword: string;\n\nbegin\n  correctPassword := 'secret';\n  write('Enter password: ');\n  readln(inputPassword);\n\n  while inputPassword <> correctPassword do\n  begin\n    writeln('Incorrect password. Try again.');\n    write('Enter password: ');\n    readln(inputPassword);\n  end;\n\n  writeln('Access granted.');\nend.\n```"
  },
  {
    "task": "Design a loop that calculates the sum of entered numbers until the user enters zero.",
    "code": "```pascal\nprogram SumUntilZero;\nvar\n  number, sum: Integer;\nbegin\n  sum := 0;\n  Write('Enter a number (0 to stop): ');\n  ReadLn(number);\n  while number <> 0 do\n  begin\n    sum := sum + number;\n    Write('Enter a number (0 to stop): ');\n    ReadLn(number);\n  end;\n  WriteLn('The sum is: ', sum);\nend.\n```"
  },
  {
    "task": "Implement a feature that prints Fibonacci numbers until a number exceeds 100.",
    "code": "```pascal\nprogram FibonacciWhile;\n\nvar\n  a, b, temp: Integer;\n\nbegin\n  a := 0;\n  b := 1;\n  \n  while a <= 100 do\n  begin\n    WriteLn(a);\n    temp := a + b;\n    a := b;\n    b := temp;\n  end;\nend.\n```"
  },
  {
    "task": "Develop a loop that keeps halving a number until it becomes less than one.",
    "code": "```pascal\nprogram HalveUntilLessThanOne;\nvar\n  number: Real;\nbegin\n  number := 10.0; { You can initialize this with any starting value }\n  while number >= 1 do\n  begin\n    number := number / 2;\n  end;\nend.\n```"
  },
  {
    "task": "Write a program that asks for names and keeps storing them until the user enters 'done'.",
    "code": "```pascal\nprogram StoreNames;\n\nuses\n  SysUtils;\n\nvar\n  name: string;\n\nbegin\n  Write('Enter a name (or type \"done\" to finish): ');\n  ReadLn(name);\n  while LowerCase(name) <> 'done' do\n  begin\n    WriteLn('Name stored: ', name);\n    Write('Enter a name (or type \"done\" to finish): ');\n    ReadLn(name);\n  end;\nend.\n```"
  },
  {
    "task": "Create a process that keeps flipping a coin, recording results until there have been five heads.",
    "code": "```pascal\nprogram CoinFlipper;\n\nuses\n  SysUtils;\n\nvar\n  headsCount: Integer;\n  coin: String;\n\nbegin\n  Randomize;\n  headsCount := 0;\n\n  while headsCount < 5 do\n  begin\n    if Random(2) = 0 then\n      coin := 'Heads'\n    else\n      coin := 'Tails';\n\n    if coin = 'Heads' then\n      Inc(headsCount);\n\n    WriteLn('Flip: ', coin);\n  end;\nend.\n```"
  },
  {
    "task": "Implement a countdown that decreases by two each time, starting from 20, until it reaches zero.",
    "code": "```pascal\nprogram CountdownByTwo;\nvar\n  n: integer;\nbegin\n  n := 20;\n  while n >= 0 do\n  begin\n    writeln(n);\n    n := n - 2;\n  end;\nend.\n```"
  },
  {
    "task": "Design a solution that repeatedly asks for user input and repeats it back until they type 'exit'.",
    "code": "```pascal\nprogram EchoInput;\n\nuses\n  SysUtils;\n\nvar\n  userInput: string;\n\nbegin\n  Write('Enter a string (type ''exit'' to quit): ');\n  ReadLn(userInput);\n  \n  while userInput <> 'exit' do\n  begin\n    WriteLn('You entered: ', userInput);\n    Write('Enter a string (type ''exit'' to quit): ');\n    ReadLn(userInput);\n  end;\n  \n  WriteLn('Goodbye!');\nend.\n```"
  },
  {
    "task": "Develop a loop to simulate a bank account balance, repeatedly deducting a fee until the balance is below zero.",
    "code": "```pascal\nprogram BankAccountSimulation;\nvar\n  balance, fee: Real;\nbegin\n  balance := 100.0;  { Initial balance }\n  fee := 10.0;       { Fee to deduct in each iteration }\n\n  while balance >= 0 do\n  begin\n    balance := balance - fee;\n  end;\nend.\n```"
  },
  {
    "task": "Create a sequence generator that multiplies a number by three each time until it reaches or exceeds 100.",
    "code": "```pascal\nprogram SequenceGenerator;\n\nvar\n  number: Integer;\n\nbegin\n  number := 1; { Initialize the starting number }\n  \n  while number < 100 do\n  begin\n    WriteLn(number);\n    number := number * 3;\n  end;\nend.\n```"
  },
  {
    "task": "Write a program that keeps generating random numbers between 1 and 10 until it gets a five.",
    "code": "```pascal\nprogram GenerateRandomNumbers;\n\nuses\n  SysUtils;\n\nvar\n  number: Integer;\n\nbegin\n  Randomize;\n  number := 0; // Initialize number to ensure the loop starts\n\n  while number <> 5 do\n  begin\n    number := Random(10) + 1;\n    WriteLn('Generated number: ', number);\n  end;\nend.\n```"
  },
  {
    "task": "Implement a system to keep checking the temperature and only stop when it falls below freezing.",
    "code": "```pascal\nprogram CheckTemperature;\nvar\n  temperature: Integer;\nbegin\n  Write('Enter the temperature: ');\n  ReadLn(temperature);\n  \n  while temperature >= 0 do\n  begin\n    Write('Temperature is above freezing. Enter the temperature again: ');\n    ReadLn(temperature);\n  end;\n  \n  WriteLn('Temperature has fallen below freezing.');\nend.\n```"
  },
  {
    "task": "Construct a quiz game that continues asking questions until the player answers incorrectly.",
    "code": "```pascal\nprogram QuizGame;\nvar\n  answer: string;\n  correct: boolean;\nbegin\n  correct := true;\n  while correct do\n  begin\n    writeln('What is the capital of France?');\n    readln(answer);\n    if answer = 'Paris' then\n      writeln('Correct!')\n    else\n    begin\n      writeln('Incorrect. Game over.');\n      correct := false;\n    end;\n  end;\nend.\n```"
  },
  {
    "task": "Write a function that calculates factorials of a number, repeating the process for numbers 1 through 5.",
    "code": "```pascal\nprogram FactorialCalculation;\n\nfunction Factorial(n: Integer): LongInt;\nvar\n  result: LongInt;\nbegin\n  result := 1;\n  while n > 1 do\n  begin\n    result := result * n;\n    n := n - 1;\n  end;\n  Factorial := result;\nend;\n\nvar\n  i: Integer;\nbegin\n  i := 1;\n  while i <= 5 do\n  begin\n    WriteLn('Factorial of ', i, ' is ', Factorial(i));\n    i := i + 1;\n  end;\nend.\n```"
  },
  {
    "task": "Create a loop that prints all even numbers between 1 and 50.",
    "code": "```pascal\nprogram EvenNumbers;\n\nvar\n  i: Integer;\n\nbegin\n  i := 2;\n  while i <= 50 do\n  begin\n    WriteLn(i);\n    i := i + 2;\n  end;\nend.\n```"
  },
  {
    "task": "Design a program that continuously asks for user input until a palindrome is entered.",
    "code": "```pascal\nprogram PalindromeChecker;\n\nuses\n  SysUtils;\n\nfunction IsPalindrome(s: string): boolean;\nvar\n  i, len: integer;\nbegin\n  s := LowerCase(s);\n  len := Length(s);\n  for i := 1 to len div 2 do\n  begin\n    if s[i] <> s[len - i + 1] then\n    begin\n      IsPalindrome := False;\n      Exit;\n    end;\n  end;\n  IsPalindrome := True;\nend;\n\nvar\n  input: string;\nbegin\n  Write('Enter a string: ');\n  ReadLn(input);\n  while not IsPalindrome(input) do\n  begin\n    Write('Enter a string: ');\n    ReadLn(input);\n  end;\nend.\n```"
  },
  {
    "task": "Implement a countdown that decreases by one each second, starting from 100.",
    "code": "```pascal\nprogram Countdown;\n\nuses\n  SysUtils;\n\nvar\n  counter: Integer;\n\nbegin\n  counter := 100;\n  while counter > 0 do\n  begin\n    WriteLn(counter);\n    Dec(counter);\n    Sleep(1000);\n  end;\nend.\n```"
  },
  {
    "task": "Write a script that repeatedly asks for a number and adds it to a total until the total exceeds 500.",
    "code": "```pascal\nprogram SumUntilExceeds500;\nvar\n  total, num: Integer;\nbegin\n  total := 0;\n  while total <= 500 do\n  begin\n    Write('Enter a number: ');\n    ReadLn(num);\n    total := total + num;\n  end;\nend.\n```"
  },
  {
    "task": "Create a loop that generates random letters until the letter 'Z' appears.",
    "code": "```pascal\nprogram RandomLettersUntilZ;\n\nuses\n  SysUtils;\n\nvar\n  randomChar: Char;\n  \nbegin\n  Randomize;\n  randomChar := Chr(Random(26) + Ord('A'));\n  while randomChar <> 'Z' do\n  begin\n    WriteLn(randomChar);\n    randomChar := Chr(Random(26) + Ord('A'));\n  end;\nend.\n```"
  },
  {
    "task": "Write a process that continues prompting for two numbers and prints their sum if it's even.",
    "code": "```pascal\nprogram SumEven;\n\nvar\n  num1, num2, sum: Integer;\n\nbegin\n  while True do\n  begin\n    Write('Enter first number: ');\n    ReadLn(num1);\n    Write('Enter second number: ');\n    ReadLn(num2);\n    sum := num1 + num2;\n    if sum mod 2 = 0 then\n    begin\n      WriteLn('The sum is even: ', sum);\n    end;\n  end;\nend.\n```"
  },
  {
    "task": "Develop a loop that simulates a traffic light sequence until a manual stop command is received.",
    "code": "```pascal\nprogram TrafficLightSimulation;\nuses crt;\n\nvar\n  command: string;\n  light: integer;\n\nbegin\n  command := '';\n  light := 0;\n  \n  while command <> 'stop' do\n  begin\n    case light of\n      0: writeln('Red Light');\n      1: writeln('Green Light');\n      2: writeln('Yellow Light');\n    end;\n    \n    light := (light + 1) mod 3;\n    \n    writeln('Type \"stop\" to end the simulation or press Enter to continue.');\n    readln(command);\n  end;\nend.\n```"
  },
  {
    "task": "Implement a feature that keeps printing numbers in reverse order starting from 10.",
    "code": "```pascal\nprogram ReverseNumbers;\nvar\n  num: Integer;\nbegin\n  num := 10;\n  while num >= 1 do\n  begin\n    WriteLn(num);\n    num := num - 1;\n  end;\nend.\n```"
  },
  {
    "task": "Create a program that rolls two dice and continues until the sum is exactly seven.",
    "code": "```pascal\nprogram RollDiceUntilSeven;\n\nuses\n  SysUtils;\n\nvar\n  die1, die2, sum: Integer;\n\nbegin\n  Randomize;\n  sum := 0;\n  \n  while sum <> 7 do\n  begin\n    die1 := Random(6) + 1;\n    die2 := Random(6) + 1;\n    sum := die1 + die2;\n  end;\n  \nend.\n```"
  },
  {
    "task": "Design a loop that keeps asking for ages and prints the average once a negative age is entered.",
    "code": "```pascal\nprogram AverageAgeCalculator;\nvar\n  age, count, total: integer;\n  average: real;\nbegin\n  total := 0;\n  count := 0;\n  Write('Enter age (negative to stop): ');\n  ReadLn(age);\n  \n  while age >= 0 do\n  begin\n    total := total + age;\n    count := count + 1;\n    Write('Enter age (negative to stop): ');\n    ReadLn(age);\n  end;\n  \n  if count > 0 then\n  begin\n    average := total / count;\n    WriteLn('Average age: ', average:0:2);\n  end\n  else\n    WriteLn('No ages entered.');\nend.\n```"
  },
  {
    "task": "Write a routine that squares numbers starting from 1 until the square is greater than 500.",
    "code": "```pascal\nprogram SquareNumbers;\n\nvar\n  num, square: Integer;\n\nbegin\n  num := 1;\n  while True do\n  begin\n    square := num * num;\n    if square > 500 then\n      Break;\n    writeln('Number: ', num, ' Square: ', square);\n    Inc(num);\n  end;\nend.\n```"
  },
  {
    "task": "Implement a system to ask for a string and append it to a file until 'end' is typed.",
    "code": "```pascal\nprogram AppendToFileUntilEnd;\nuses\n  SysUtils;\n\nvar\n  input: string;\n  fileVar: TextFile;\n\nbegin\n  AssignFile(fileVar, 'output.txt');\n  Append(fileVar);\n  \n  repeat\n    Write('Enter a string (type \"end\" to finish): ');\n    ReadLn(input);\n    if input <> 'end' then\n      WriteLn(fileVar, input);\n  until input = 'end';\n  \n  CloseFile(fileVar);\nend.\n```"
  },
  {
    "task": "Create a script that checks if a number is prime, repeating for each number entered by the user.",
    "code": "```pascal\nprogram CheckPrime;\n\nuses crt;\n\nvar\n  num, i: integer;\n  isPrime: boolean;\n\nbegin\n  clrscr;\n  write('Enter a number (0 to exit): ');\n  readln(num);\n  \n  while num <> 0 do\n  begin\n    isPrime := true;\n    if num < 2 then\n      isPrime := false\n    else\n      for i := 2 to num div 2 do\n        if num mod i = 0 then\n        begin\n          isPrime := false;\n          break;\n        end;\n    \n    if isPrime then\n      writeln(num, ' is a prime number.')\n    else\n      writeln(num, ' is not a prime number.');\n      \n    write('Enter a number (0 to exit): ');\n    readln(num);\n  end;\nend.\n```"
  },
  {
    "task": "Develop a countdown that prints numbers starting from 50 down to 1.",
    "code": "```pascal\nprogram Countdown;\nvar\n  i: integer;\nbegin\n  i := 50;\n  while i >= 1 do\n  begin\n    writeln(i);\n    i := i - 1;\n  end;\nend.\n```"
  },
  {
    "task": "Write a program that keeps doubling the value of a variable until it exceeds 200.",
    "code": "```pascal\nprogram DoubleUntilExceeds200;\nvar\n  value: Integer;\nbegin\n  value := 1;\n  while value <= 200 do\n  begin\n    value := value * 2;\n  end;\nend.\n```"
  },
  {
    "task": "Design a loop that keeps generating a random string of letters until a specific word is formed.",
    "code": "```pascal\nprogram RandomStringGenerator;\n\nuses\n  SysUtils;\n\nfunction GenerateRandomString(Length: Integer): string;\nconst\n  Letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\nvar\n  i: Integer;\nbegin\n  Result := '';\n  Randomize;\n  for i := 1 to Length do\n    Result := Result + Letters[Random(Length(Letters)) + 1];\nend;\n\nvar\n  randomString: string;\n  targetWord: string;\nbegin\n  targetWord := 'HELLO';\n  randomString := '';\n  \n  while randomString <> targetWord do\n  begin\n    randomString := GenerateRandomString(Length(targetWord));\n    Writeln('Generated: ', randomString);\n  end;\n  \n  Writeln('Target word \"', targetWord, '\" formed.');\nend.\n```"
  },
  {
    "task": "Implement a system that continuously fetches data from a sensor until a threshold is crossed.",
    "code": "```pascal\nprogram SensorThreshold;\n\nvar\n  sensorData: Integer;\n  threshold: Integer;\n\nbegin\n  threshold := 100;  { Example threshold value }\n  sensorData := 0;   { Initial sensor data value }\n\n  while sensorData <= threshold do\n  begin\n    { Simulate fetching data from the sensor }\n    sensorData := sensorData + 10;  { Example sensor data increment }\n  end;\nend.\n```"
  },
  {
    "task": "Create a game where a player guesses a number, and the game continues until the player guesses correctly.",
    "code": "```pascal\nprogram GuessingGame;\nuses SysUtils;\n\nvar\n  target, guess: Integer;\nbegin\n  Randomize;\n  target := Random(100) + 1;  { Generate a random number between 1 and 100 }\n  WriteLn('Guess the number between 1 and 100:');\n  \n  repeat\n    Write('Enter your guess: ');\n    ReadLn(guess);\n    if guess < target then\n      WriteLn('Too low!')\n    else if guess > target then\n      WriteLn('Too high!')\n    else\n      WriteLn('Congratulations! You guessed the number.');\n  until guess = target;\nend.\n```"
  },
  {
    "task": "Write a loop that continues to add random numbers to a list until the list has 10 even numbers.",
    "code": "```pascal\nprogram AddEvenNumbers;\n\nuses\n  SysUtils;\n\nvar\n  numbers: array of Integer;\n  count, num: Integer;\n\nbegin\n  Randomize;\n  SetLength(numbers, 0);\n  count := 0;\n\n  while count < 10 do\n  begin\n    num := Random(100); // Generates a random number between 0 and 99\n    if num mod 2 = 0 then\n    begin\n      count := count + 1;\n      SetLength(numbers, Length(numbers) + 1);\n      numbers[High(numbers)] := num;\n    end;\n  end;\nend.\n```"
  },
  {
    "task": "Design a routine that keeps removing elements from a list until it is empty.",
    "code": "```pascal\nprogram RemoveElements;\n\nvar\n  List: array of Integer;\n  I: Integer;\n\nbegin\n  SetLength(List, 5);\n  List[0] := 1;\n  List[1] := 2;\n  List[2] := 3;\n  List[3] := 4;\n  List[4] := 5;\n\n  while Length(List) > 0 do\n  begin\n    SetLength(List, Length(List) - 1);\n  end;\nend.\n```"
  },
  {
    "task": "Implement a sequence that prints the alphabet repeatedly until interrupted by the user.",
    "code": "```pascal\nprogram PrintAlphabet;\nuses crt;\n\nvar\n  ch: char;\n\nbegin\n  while not keypressed do\n  begin\n    for ch := 'A' to 'Z' do\n    begin\n      write(ch);\n    end;\n  end;\nend.\n```"
  },
  {
    "task": "Create a program that continuously checks for updates and stops once an update is available.",
    "code": "```pascal\nprogram CheckForUpdates;\n\nvar\n  updateAvailable: Boolean;\n\nbegin\n  updateAvailable := False;\n  \n  while not updateAvailable do\n  begin\n    { Simulate checking for updates }\n    updateAvailable := Random(10) = 0; { Randomly decide if update is available }\n  end;\n\n  writeln('Update available. Stopping check.');\nend.\n```"
  },
  {
    "task": "Write a function that keeps dividing a number by two until it results in a fractional value.",
    "code": "```pascal\nprogram DivideByTwo;\n\nfunction DivideUntilFractional(value: Integer): Real;\nbegin\n  while value mod 2 = 0 do\n    value := value div 2;\n  DivideUntilFractional := value / 2;\nend;\n\nvar\n  number: Integer;\n  result: Real;\nbegin\n  number := 64; { Example value }\n  result := DivideUntilFractional(number);\n  WriteLn('Result: ', result:0:2);\nend.\n```"
  },
  {
    "task": "Develop a loop that keeps asking for student's grades and calculates the average until a grade of -1 is entered.",
    "code": "```pascal\nprogram AverageGrades;\n\nvar\n  grade, sum, count: Integer;\n  average: Real;\n\nbegin\n  sum := 0;\n  count := 0;\n  Write('Enter grade (-1 to end): ');\n  ReadLn(grade);\n  \n  while grade <> -1 do\n  begin\n    sum := sum + grade;\n    count := count + 1;\n    Write('Enter grade (-1 to end): ');\n    ReadLn(grade);\n  end;\n  \n  if count > 0 then\n  begin\n    average := sum / count;\n    WriteLn('Average grade: ', average:0:2);\n  end\n  else\n    WriteLn('No grades entered.');\nend.\n```"
  },
  {
    "task": "Design a feature that continuously monitors a file for changes and stops when no changes are detected for a minute.",
    "code": "```pascal\nprogram MonitorFileChanges;\n\nuses\n  SysUtils, DateUtils;\n\nvar\n  LastModifiedTime, CurrentModifiedTime: TDateTime;\n  FileName: string;\n  NoChangeDuration: Integer;\n\nbegin\n  FileName := 'monitored_file.txt';\n  NoChangeDuration := 0;\n  \n  if FileExists(FileName) then\n    LastModifiedTime := FileDateToDateTime(FileAge(FileName))\n  else\n  begin\n    WriteLn('File does not exist.');\n    Exit;\n  end;\n\n  while NoChangeDuration < 60 do\n  begin\n    Delay(1000); // Wait for 1 second\n    if FileExists(FileName) then\n    begin\n      CurrentModifiedTime := FileDateToDateTime(FileAge(FileName));\n      if CurrentModifiedTime = LastModifiedTime then\n        Inc(NoChangeDuration)\n      else\n      begin\n        LastModifiedTime := CurrentModifiedTime;\n        NoChangeDuration := 0;\n      end;\n    end\n    else\n    begin\n      WriteLn('File has been deleted.');\n      Exit;\n    end;\n  end;\n\n  WriteLn('No changes detected for a minute. Stopping the monitor.');\nend.\n```"
  },
  {
    "task": "Implement a process where a motor runs until a certain distance is reached.",
    "code": "```pascal\nprogram MotorControl;\n\nvar\n  distance, targetDistance: Integer;\n\nbegin\n  targetDistance := 100; { Example target distance }\n  distance := 0;\n\n  while distance < targetDistance do\n  begin\n    { Simulate motor running and increment distance }\n    distance := distance + 1;\n  end;\nend.\n```"
  },
  {
    "task": "Create a script that keeps generating random numbers and stops when it generates a prime number.",
    "code": "```pascal\nprogram RandomPrime;\n\nuses\n  SysUtils;\n\nfunction IsPrime(n: Integer): Boolean;\nvar\n  i: Integer;\nbegin\n  if n <= 1 then\n    Exit(False);\n  for i := 2 to Trunc(Sqrt(n)) do\n    if n mod i = 0 then\n      Exit(False);\n  Exit(True);\nend;\n\nfunction GenerateRandomNumber: Integer;\nbegin\n  Randomize;\n  Result := Random(100) + 1; // Generates a random number between 1 and 100\nend;\n\nvar\n  num: Integer;\n\nbegin\n  num := GenerateRandomNumber;\n  while not IsPrime(num) do\n  begin\n    num := GenerateRandomNumber;\n  end;\n  WriteLn('Generated a prime number: ', num);\nend.\n```"
  },
  {
    "task": "Write a program that asks for the user's favorite color and keeps asking until they say 'blue'.",
    "code": "```pascal\nprogram FavoriteColor;\n\nvar\n  color: string;\n\nbegin\n  color := '';\n  while color <> 'blue' do\n  begin\n    writeln('What is your favorite color?');\n    readln(color);\n  end;\nend.\n```"
  },
  {
    "task": "Develop a loop that continuously prints the time every second until a key is pressed.",
    "code": "```pascal\nprogram PrintTimeUntilKeyPress;\n\nuses\n  crt, sysutils, dateutils;\n\nvar\n  key: char;\n  currentTime: string;\n\nbegin\n  clrscr;\n  writeln('Press any key to stop...');\n  while not keypressed do\n  begin\n    currentTime := FormatDateTime('hh:nn:ss', Now);\n    writeln('Current Time: ', currentTime);\n    delay(1000);  // Wait for 1 second\n  end;\nend.\n```"
  },
  {
    "task": "Create a system to keep downloading data from a server until the connection is lost.",
    "code": "```pascal\nprogram DownloadData;\n\nfunction IsConnected: Boolean;\nbegin\n  { Simulate server connection check }\n  IsConnected := Random(2) = 1;\nend;\n\nprocedure DownloadData;\nbegin\n  { Simulate data download }\n  Writeln('Data downloaded from server.');\nend;\n\nbegin\n  Randomize;\n  \n  while IsConnected do\n  begin\n    DownloadData;\n  end;\n  \n  Writeln('Connection lost.');\nend.\n```"
  },
  {
    "task": "Write a process to keep a light on until the ambient light level is sufficient.",
    "code": "```pascal\nprogram LightControl;\n\nvar\n  ambientLightLevel: Integer;\n  sufficientLight: Boolean;\n\nbegin\n  sufficientLight := False;\n  \n  while not sufficientLight do\n  begin\n    Write('Enter current ambient light level: ');\n    ReadLn(ambientLightLevel);\n    \n    if ambientLightLevel >= 100 then\n      sufficientLight := True\n    else\n      WriteLn('Light is ON');\n  end;\n  \n  WriteLn('Light is OFF');\nend.\n```"
  },
  {
    "task": "Implement a feature that continuously plays a sound until the user presses a button.",
    "code": "```pascal\nprogram SoundPlayer;\n\nuses\n  crt;\n\nprocedure PlaySound;\nbegin\n  writeln('Playing sound...');\n  delay(500); { Simulate sound playing with a delay }\nend;\n\nvar\n  key: char;\nbegin\n  writeln('Press any key to stop the sound.');\n\n  while not keypressed do\n  begin\n    PlaySound;\n  end;\n\n  key := readkey; { Capture the key that was pressed to exit }\n  writeln('Sound stopped.');\nend.\n```"
  },
  {
    "task": "Design a program that keeps multiplying a matrix by itself until its determinant is greater than 1000.",
    "code": "```pascal\nprogram MatrixExponentiation;\n\nuses\n  SysUtils, Math;\n\ntype\n  TMatrix = array of array of Real;\n\nfunction MatrixMultiply(A, B: TMatrix): TMatrix;\nvar\n  i, j, k, n: Integer;\nbegin\n  n := Length(A);\n  SetLength(Result, n, n);\n  for i := 0 to n - 1 do\n    for j := 0 to n - 1 do\n    begin\n      Result[i][j] := 0;\n      for k := 0 to n - 1 do\n        Result[i][j] := Result[i][j] + A[i][k] * B[k][j];\n    end;\nend;\n\nfunction MatrixDeterminant(A: TMatrix): Real;\nbegin\n  if Length(A) = 2 then\n    Result := A[0][0] * A[1][1] - A[0][1] * A[1][0]\n  else\n    Result := 0; // Placeholder for larger matrices\nend;\n\nvar\n  Matrix: TMatrix;\n  Det: Real;\nbegin\n  SetLength(Matrix, 2, 2);\n  Matrix[0][0] := 1;\n  Matrix[0][1] := 1;\n  Matrix[1][0] := 1;\n  Matrix[1][1] := 0;\n\n  Det := MatrixDeterminant(Matrix);\n\n  while Det <= 1000 do\n  begin\n    Matrix := MatrixMultiply(Matrix, Matrix);\n    Det := MatrixDeterminant(Matrix);\n  end;\nend.\n```"
  },
  {
    "task": "Create a script that keeps prompting the user to guess a word until they get it right.",
    "code": "```pascal\nprogram GuessTheWord;\nuses\n  SysUtils;\n\nvar\n  correctWord, userGuess: string;\n\nbegin\n  correctWord := 'Pascal';\n  userGuess := '';\n  \n  while userGuess <> correctWord do\n  begin\n    Write('Guess the word: ');\n    ReadLn(userGuess);\n  end;\n  \n  WriteLn('Congratulations, you guessed the word!');\nend.\n```"
  },
  {
    "task": "Write a loop that simulates a car's fuel consumption and stops when the tank is empty.",
    "code": "```pascal\nprogram FuelConsumptionSimulation;\n\nvar\n  fuel: Real;\n  consumptionRate: Real;\n\nbegin\n  fuel := 50.0; { Initial amount of fuel in liters }\n  consumptionRate := 0.5; { Fuel consumption rate per iteration }\n\n  while fuel > 0 do\n  begin\n    fuel := fuel - consumptionRate;\n    writeln('Fuel remaining: ', fuel:0:1, ' liters');\n  end;\n\n  writeln('The tank is empty.');\nend.\n```"
  },
  {
    "task": "Develop a routine that keeps checking if a file exists and stops once it does.",
    "code": "```pascal\nprogram CheckFileExists;\n\nuses\n  SysUtils;\n\nvar\n  fileName: string;\n\nbegin\n  fileName := 'example.txt';\n  \n  while not FileExists(fileName) do\n  begin\n    // Keep checking\n  end;\n  \n  WriteLn('File found');\nend.\n```"
  },
  {
    "task": "Implement a feature that continuously calculates the square root of a number until it's less than 0.1.",
    "code": "```pascal\nprogram CalculateSquareRoot;\n\nvar\n  number: Real;\n\nbegin\n  Write('Enter a number: ');\n  ReadLn(number);\n\n  while number >= 0.1 do\n  begin\n    number := Sqrt(number);\n    WriteLn('Square root: ', number:0:5);\n  end;\nend.\n```"
  },
  {
    "task": "Create a system that prints 'Processing...' every second until a task is complete.",
    "code": "```pascal\nprogram ProcessingTask;\n\nuses\n  SysUtils;\n\nvar\n  taskComplete: Boolean;\n\nbegin\n  taskComplete := False;\n  \n  while not taskComplete do\n  begin\n    WriteLn('Processing...');\n    Sleep(1000); // Sleep for 1000 milliseconds (1 second)\n    \n    { Here you would have some condition to set taskComplete to True \n      when the task is actually complete. For this example, \n      we'll just break the loop after a certain condition \n      to prevent an infinite loop. }\n    \n    // Example condition to exit the loop (for demonstration purposes)\n    if Random(10) = 5 then\n      taskComplete := True;\n  end;\nend.\n```"
  },
  {
    "task": "Write a loop that repeatedly checks the status of a process until it reports 'complete'.",
    "code": "```pascal\nprogram CheckProcessStatus;\nvar\n  status: string;\nbegin\n  status := 'incomplete';\n  while status <> 'complete' do\n  begin\n    writeln('Checking process status...');\n    // Simulate a status update\n    readln(status); // This would be replaced with actual status checking code\n  end;\n  writeln('Process is complete.');\nend.\n```"
  },
  {
    "task": "Design a routine to keep pinging a server and alert when the connection is lost.",
    "code": "```pascal\nprogram PingServer;\n\nuses\n  SysUtils;\n\nfunction IsServerAlive: Boolean;\nbegin\n  // Simulated server check\n  Result := Random(10) <> 0; // 90% chance the server is alive\nend;\n\nprocedure AlertConnectionLost;\nbegin\n  WriteLn('Alert: Connection to server is lost.');\nend;\n\nbegin\n  Randomize;\n  \n  while IsServerAlive do\n  begin\n    WriteLn('Pinging server...');\n    Sleep(1000); // Wait for 1 second before next ping\n  end;\n\n  AlertConnectionLost;\nend.\n```"
  },
  {
    "task": "Implement a loop that counts down from 100 by fives until it reaches zero.",
    "code": "```pascal\nprogram CountdownByFives;\nvar\n  counter: Integer;\nbegin\n  counter := 100;\n  while counter >= 0 do\n  begin\n    WriteLn(counter);\n    counter := counter - 5;\n  end;\nend.\n```"
  },
  {
    "task": "Create a script that keeps track of inventory items being added or removed until an end signal is given.",
    "code": "```pascal\nprogram InventoryTracker;\n\nvar\n  inventory: integer;\n  action: char;\n  quantity: integer;\n\nbegin\n  inventory := 0;\n  \n  writeln('Inventory Tracker');\n  writeln('Add or Remove items. Enter \"E\" to end.');\n  \n  while true do\n  begin\n    write('Enter action (A to add, R to remove, E to end): ');\n    readln(action);\n    \n    if action = 'E' then\n      break;\n    \n    write('Enter quantity: ');\n    readln(quantity);\n    \n    if action = 'A' then\n      inventory := inventory + quantity\n    else if action = 'R' then\n      inventory := inventory - quantity;\n    \n    writeln('Current inventory: ', inventory);\n  end;\n  \n  writeln('Final inventory: ', inventory);\nend.\n```"
  },
  {
    "task": "Write a program that keeps calculating the power of two for numbers until a result is greater than 1000.",
    "code": "```pascal\nprogram PowerOfTwo;\n\nvar\n  num, result: Integer;\n\nbegin\n  num := 0;\n  result := 1;\n  \n  while result <= 1000 do\n  begin\n    result := 1 shl num;\n    num := num + 1;\n  end;\nend.\n```"
  },
  {
    "task": "Develop a sequence that keeps appending random numbers to an array until its length is 20.",
    "code": "```pascal\nprogram RandomNumberArray;\n\nuses\n  SysUtils;\n\nvar\n  numbers: array of Integer;\n  randomNumber: Integer;\n\nbegin\n  Randomize;\n  SetLength(numbers, 0);\n\n  while Length(numbers) < 20 do\n  begin\n    randomNumber := Random(100);  // Random number between 0 and 99\n    SetLength(numbers, Length(numbers) + 1);\n    numbers[High(numbers)] := randomNumber;\n  end;\nend.\n```"
  },
  {
    "task": "Implement a routine that continuously rotates an image until it matches a reference orientation.",
    "code": "```pascal\nprogram RotateImage;\n\nvar\n  imageOrientation, referenceOrientation: Integer;\n\nfunction RotateClockwise(currentOrientation: Integer): Integer;\nbegin\n  RotateClockwise := (currentOrientation + 90) mod 360;\nend;\n\nbegin\n  imageOrientation := 0;  { Example starting orientation }\n  referenceOrientation := 180;  { Example reference orientation }\n\n  while imageOrientation <> referenceOrientation do\n  begin\n    imageOrientation := RotateClockwise(imageOrientation);\n  end;\nend.\n```"
  },
  {
    "task": "Design a loop that keeps printing random jokes until the user stops it.",
    "code": "```pascal\nprogram RandomJokes;\n\nuses\n  SysUtils;\n\nvar\n  user_input: string;\n  jokes: array[1..5] of string;\n  random_index: integer;\n\nbegin\n  jokes[1] := 'Why don''t scientists trust atoms? Because they make up everything!';\n  jokes[2] := 'What do you get if you cross a cat with a dark horse? Kitty Perry.';\n  jokes[3] := 'Why did the scarecrow win an award? Because he was outstanding in his field!';\n  jokes[4] := 'Why don\u2019t skeletons fight each other? They don\u2019t have the guts.';\n  jokes[5] := 'What do you call fake spaghetti? An impasta!';\n  \n  Randomize;\n  user_input := '';\n\n  while user_input <> 'stop' do\n  begin\n    random_index := Random(5) + 1;\n    WriteLn(jokes[random_index]);\n    Write('Type \"stop\" to end, or press Enter to hear another joke: ');\n    ReadLn(user_input);\n  end;\nend.\n```"
  },
  {
    "task": "Create a program that accepts user feedback and continues until a positive feedback is received.",
    "code": "```pascal\nprogram FeedbackLoop;\nvar\n  feedback: string;\nbegin\n  writeln('Enter your feedback:');\n  readln(feedback);\n  while Pos('good', feedback) = 0 do\n  begin\n    writeln('Enter your feedback:');\n    readln(feedback);\n  end;\n  writeln('Thank you for your positive feedback!');\nend.\n```"
  },
  {
    "task": "Write a loop that repeatedly reads sensor data and stops when a stable reading is observed.",
    "code": "```pascal\nprogram SensorData;\n\nvar\n  sensorReading, previousReading: Integer;\n\nbegin\n  previousReading := -1;  { Initialize with a value that won't be a stable reading }\n  sensorReading := -1;  { Initialize to ensure the loop starts }\n  \n  while sensorReading <> previousReading do\n  begin\n    previousReading := sensorReading;\n    { Simulate reading from a sensor, replace this with actual sensor reading code }\n    sensorReading := Random(100);  { Example: Random sensor reading }\n  end;\nend.\n```"
  },
  {
    "task": "Develop a system that simulates a stopwatch, counting seconds until stopped manually.",
    "code": "```pascal\nprogram Stopwatch;\n\nuses\n  crt;\n\nvar\n  seconds: Integer;\n  ch: Char;\n\nbegin\n  seconds := 0;\n  writeln('Press any key to stop the stopwatch.');\n  while not KeyPressed do\n  begin\n    delay(1000);\n    Inc(seconds);\n    writeln('Seconds elapsed: ', seconds);\n  end;\n  readln(ch);\nend.\n```"
  },
  {
    "task": "Create a script that continues adding random integers to a sum until the sum exceeds 100.",
    "code": "```pascal\nprogram SumExceeds100;\n\nuses\n  SysUtils;\n\nvar\n  sum, num: Integer;\n\nbegin\n  Randomize;\n  sum := 0;\n  \n  while sum <= 100 do\n  begin\n    num := Random(100) + 1;\n    sum := sum + num;\n  end;\nend.\n```"
  },
  {
    "task": "Implement a process to track a moving object until it stops.",
    "code": "```pascal\nprogram TrackMovingObject;\n\nvar\n  isMoving: Boolean;\n\nbegin\n  isMoving := True;\n  \n  while isMoving do\n  begin\n    { Code to check if the object is still moving }\n    { Example: isMoving := CheckIfObjectIsMoving(); }\n    \n    { Simulate tracking logic here }\n    \n    { Placeholder for condition to stop the loop, for demonstration purposes: }\n    isMoving := False;  { This should be updated based on actual tracking logic }\n  end;\n  \nend.\n```"
  },
  {
    "task": "Design a routine to keep checking user login attempts until a successful login occurs.",
    "code": "```pascal\nprogram UserLogin;\nuses\n  SysUtils;\n\nfunction SuccessfulLogin(username, password: string): Boolean;\nbegin\n  // Placeholder for actual login logic\n  Result := (username = 'admin') and (password = 'password');\nend;\n\nvar\n  username, password: string;\n  loginSuccess: Boolean;\nbegin\n  loginSuccess := False;\n  \n  while not loginSuccess do\n  begin\n    Write('Enter username: ');\n    ReadLn(username);\n    Write('Enter password: ');\n    ReadLn(password);\n    \n    if SuccessfulLogin(username, password) then\n    begin\n      WriteLn('Login successful.');\n      loginSuccess := True;\n    end\n    else\n    begin\n      WriteLn('Login failed. Try again.');\n    end;\n  end;\nend.\n```"
  },
  {
    "task": "Write a loop that repeatedly calculates the area of a circle for radii from 1 to 10.",
    "code": "```pascal\nprogram CalculateCircleAreas;\nvar\n  radius: Integer;\n  area: Real;\nbegin\n  radius := 1;\n  while radius <= 10 do\n  begin\n    area := 3.14159 * radius * radius;\n    writeln('Radius: ', radius, ' Area: ', area:0:2);\n    radius := radius + 1;\n  end;\nend.\n```"
  },
  {
    "task": "Create a program that continues flipping a card from a deck until an ace is drawn.",
    "code": "```pascal\nprogram FlipCardUntilAce;\n\nuses\n  SysUtils;\n\nvar\n  card: string;\n\nfunction DrawCard: string;\nbegin\n  case Random(13) + 1 of\n    1: DrawCard := 'Ace';\n    2: DrawCard := '2';\n    3: DrawCard := '3';\n    4: DrawCard := '4';\n    5: DrawCard := '5';\n    6: DrawCard := '6';\n    7: DrawCard := '7';\n    8: DrawCard := '8';\n    9: DrawCard := '9';\n    10: DrawCard := '10';\n    11: DrawCard := 'Jack';\n    12: DrawCard := 'Queen';\n    13: DrawCard := 'King';\n  end;\nend;\n\nbegin\n  Randomize;\n  card := '';\n  while card <> 'Ace' do\n  begin\n    card := DrawCard;\n    WriteLn('Drawn card: ', card);\n  end;\nend.\n```"
  },
  {
    "task": "Develop a loop that keeps asking for a word and stores it until a word with more than five letters is entered.",
    "code": "```pascal\nprogram StoreWords;\n\nvar\n  word: string;\n  words: array of string;\n  count: integer;\n\nbegin\n  count := 0;\n  SetLength(words, 0);\n  \n  writeln('Enter words:');\n  readln(word);\n  \n  while Length(word) <= 5 do\n  begin\n    count := count + 1;\n    SetLength(words, count);\n    words[count - 1] := word;\n    readln(word);\n  end;\nend.\n```"
  },
  {
    "task": "Implement a feature that continuously calculates the exponential growth of a population until it doubles.",
    "code": "```pascal\nprogram ExponentialGrowth;\n\nvar\n  initialPopulation, currentPopulation: Double;\n  growthRate: Double;\n\nbegin\n  initialPopulation := 1000; { Example initial population }\n  growthRate := 0.05; { Example growth rate of 5% per period }\n  \n  currentPopulation := initialPopulation;\n\n  while currentPopulation < 2 * initialPopulation do\n  begin\n    currentPopulation := currentPopulation * (1 + growthRate);\n  end;\nend.\n```"
  },
  {
    "task": "Write a script that repeats a string a certain number of times until a limit is reached.",
    "code": "```pascal\nprogram RepeatStringUntilLimit;\n\nvar\n  str: string;\n  limit, count: integer;\n\nbegin\n  str := 'Hello, World! ';\n  limit := 5;\n  count := 0;\n  \n  while count < limit do\n  begin\n    Write(str);\n    Inc(count);\n  end;\nend.\n```"
  },
  {
    "task": "Create a routine that keeps accessing an API endpoint until it returns a specific result.",
    "code": "```pascal\nprogram AccessAPI;\n\nuses\n  SysUtils;\n\nfunction CallAPI: string;\nbegin\n  // Simulate an API call. Replace with actual API call logic.\n  Result := 'desired_result'; // Change to simulate different results\nend;\n\nprocedure AccessAPIUntilDesiredResult;\nvar\n  apiResult: string;\nbegin\n  apiResult := '';\n  while apiResult <> 'desired_result' do\n  begin\n    apiResult := CallAPI;\n  end;\nend;\n\nbegin\n  AccessAPIUntilDesiredResult;\nend.\n```"
  },
  {
    "task": "Design a loop that continues to fetch stock prices until a certain price threshold is crossed.",
    "code": "```pascal\nprogram StockPriceFetcher;\n\nvar\n  currentPrice: Real;\n  priceThreshold: Real;\n\nbegin\n  priceThreshold := 100.0; { Example threshold value }\n  currentPrice := 0.0;\n\n  while currentPrice <= priceThreshold do\n  begin\n    { Fetch the stock price from an external source or API }\n    currentPrice := Random * 200; { Simulate fetching a price between 0 and 200 }\n  end;\nend.\n```"
  },
  {
    "task": "Implement a process that keeps monitoring CPU usage until it drops below 10%.",
    "code": "```pascal\nprogram MonitorCPUUsage;\n\nuses\n  SysUtils;\n\nfunction GetCPUUsage: Integer;\nbegin\n  // Placeholder function to simulate CPU usage retrieval\n  Result := Random(100);\nend;\n\nvar\n  cpuUsage: Integer;\nbegin\n  Randomize;\n  cpuUsage := GetCPUUsage;\n  \n  while cpuUsage >= 10 do\n  begin\n    WriteLn('CPU Usage: ', cpuUsage, '%');\n    Sleep(1000); // Wait for 1 second before checking again\n    cpuUsage := GetCPUUsage;\n  end;\n  \n  WriteLn('CPU Usage dropped below 10%. Current Usage: ', cpuUsage, '%');\nend.\n```"
  },
  {
    "task": "Write a program that asks for a series of numbers and prints the largest once a negative number is entered.",
    "code": "```pascal\nprogram LargestNumber;\n\nvar\n  number, largest: Integer;\n\nbegin\n  largest := -MaxInt;\n  writeln('Enter a series of numbers (negative number to stop):');\n  \n  readln(number);\n  \n  while number >= 0 do\n  begin\n    if number > largest then\n      largest := number;\n    readln(number);\n  end;\n  \n  writeln('The largest number entered is: ', largest);\nend.\n```"
  },
  {
    "task": "Develop a system that keeps a heater on until the room reaches a desired temperature.",
    "code": "```pascal\nprogram HeaterControl;\n\nvar\n  currentTemperature, desiredTemperature: Real;\n\nbegin\n  Write('Enter the desired temperature: ');\n  ReadLn(desiredTemperature);\n  \n  Write('Enter the current temperature: ');\n  ReadLn(currentTemperature);\n  \n  while currentTemperature < desiredTemperature do\n  begin\n    WriteLn('Heater is ON. Current temperature: ', currentTemperature:0:1);\n    Write('Enter the current temperature: ');\n    ReadLn(currentTemperature);\n  end;\n  \n  WriteLn('The room has reached the desired temperature. Heater is OFF.');\nend.\n```"
  },
  {
    "task": "Create a loop that repeatedly checks if a door is open and alerts if it remains open for too long.",
    "code": "```pascal\nprogram DoorCheck;\n\nvar\n  doorOpen: boolean;\n  openTime: integer;\n  alertTime: integer;\n\nbegin\n  doorOpen := true; { Assume the door starts open }\n  openTime := 0;\n  alertTime := 10; { Time threshold to alert }\n\n  while doorOpen do\n  begin\n    Inc(openTime);\n    if openTime > alertTime then\n    begin\n      writeln('Alert: The door has been open for too long!');\n      break;\n    end;\n    { Code to check the door status goes here }\n    { Example: doorOpen := CheckDoorStatus(); }\n  end;\nend.\n```"
  },
  {
    "task": "Implement a feature that keeps adding random characters to a string until its length is 8.",
    "code": "```pascal\nprogram RandomStringGenerator;\n\nuses\n  SysUtils;\n\nvar\n  str: string;\n  randomChar: char;\n\nbegin\n  Randomize;\n  str := '';\n  \n  while Length(str) < 8 do\n  begin\n    randomChar := Chr(Ord('a') + Random(26));\n    str := str + randomChar;\n  end;\n  \n  WriteLn('Generated string: ', str);\nend.\n```"
  },
  {
    "task": "Design a routine that simulates a race and continues until a participant crosses the finish line.",
    "code": "```pascal\nprogram RaceSimulation;\n\nvar\n  participantPosition: Integer;\n  finishLine: Integer;\n\nbegin\n  participantPosition := 0;\n  finishLine := 100;  { Define finish line position }\n  \n  while participantPosition < finishLine do\n  begin\n    participantPosition := participantPosition + Random(10) + 1; { Move participant forward }\n  end;\n  \n  WriteLn('Participant has crossed the finish line at position: ', participantPosition);\nend.\n```"
  },
  {
    "task": "Write a script that keeps checking an email inbox until a specific email is received.",
    "code": "```pascal\nprogram CheckEmail;\n\nvar\n  emailReceived: Boolean;\n\nfunction CheckInboxForEmail: Boolean;\nbegin\n  { Simulate checking the inbox }\n  { Here you would normally have code that checks the inbox }\n  Result := False; { Replace this with the actual condition }\nend;\n\nbegin\n  emailReceived := False;\n  \n  while not emailReceived do\n  begin\n    emailReceived := CheckInboxForEmail;\n    { Add a delay if necessary to avoid constant polling }\n  end;\n  \n  { Code to execute when the specific email is received }\nend.\n```"
  },
  {
    "task": "Create a loop that continues to play a video on repeat until the user interrupts.",
    "code": "```pascal\nprogram VideoLoop;\n\nuses\n  crt;\n\nvar\n  userInterrupt: Boolean;\n\nbegin\n  userInterrupt := False;\n  while not userInterrupt do\n  begin\n    writeln('Playing video...');\n    writeln('Press any key to stop.');\n    delay(1000); { Simulate video playing for 1 second }\n    if keypressed then\n    begin\n      userInterrupt := True;\n      readkey; { Consume the key press }\n    end;\n  end;\n  writeln('Video stopped.');\nend.\n```"
  },
  {
    "task": "Develop a process that keeps scanning for Bluetooth devices until a specific device is found.",
    "code": "```pascal\nprogram BluetoothScanner;\n\nuses\n  SysUtils;\n\nvar\n  deviceFound: Boolean;\n  targetDevice: String;\n  currentDevice: String;\n\nfunction ScanForDevices: String;\nbegin\n  // This function would contain the actual logic to scan for Bluetooth devices\n  // For demonstration purposes, let's assume it returns a device name\n  Result := 'Device_' + IntToStr(Random(10)); // Mock device name\nend;\n\nbegin\n  Randomize;\n  deviceFound := False;\n  targetDevice := 'Device_5'; // Specific device we are looking for\n\n  while not deviceFound do\n  begin\n    currentDevice := ScanForDevices;\n    if currentDevice = targetDevice then\n    begin\n      deviceFound := True;\n      WriteLn('Found target device: ', currentDevice);\n    end\n    else\n    begin\n      WriteLn('Scanned device: ', currentDevice);\n    end;\n  end;\nend.\n```"
  },
  {
    "task": "Implement a script that continuously captures images from a webcam until a motion is detected.",
    "code": "```pascal\nprogram MotionDetection;\n\nuses\n  SysUtils, VideoCapture;\n\nvar\n  webcam: TVideoCaptureDevice;\n  frame, previousFrame: TFrame;\n  motionDetected: Boolean;\n\nbegin\n  webcam := TVideoCaptureDevice.Create;\n  try\n    webcam.Open;\n    previousFrame := nil;\n    motionDetected := False;\n    \n    while not motionDetected do\n    begin\n      frame := webcam.CaptureFrame;\n      \n      if Assigned(previousFrame) then\n      begin\n        motionDetected := DetectMotion(previousFrame, frame);\n        previousFrame.Free;\n      end;\n      \n      previousFrame := frame;\n    end;\n    \n  finally\n    webcam.Close;\n    webcam.Free;\n    if Assigned(previousFrame) then\n      previousFrame.Free;\n  end;\nend.\n\nfunction DetectMotion(frame1, frame2: TFrame): Boolean;\nbegin\n  // Implement motion detection logic here\n  Result := False; // Placeholder\nend;\n```"
  },
  {
    "task": "Design a program that keeps playing a sound file until the user presses a mute button.",
    "code": "```pascal\nprogram PlaySoundUntilMuted;\n\nuses\n  crt;\n\nvar\n  mutePressed: boolean;\n\nbegin\n  mutePressed := false;\n\n  while not mutePressed do\n  begin\n    // Simulate playing sound\n    writeln('Playing sound...');\n\n    // Simulate checking for mute button press\n    writeln('Press M to mute, any other key to continue playing...');\n    if upcase(readkey) = 'M' then\n    begin\n      mutePressed := true;\n    end;\n  end;\n\n  writeln('Sound muted.');\nend.\n```"
  },
  {
    "task": "Create a loop that repeatedly generates a random password until it meets certain security criteria.",
    "code": "```pascal\nprogram GenerateSecurePassword;\n\nuses\n  SysUtils;\n\nfunction IsSecurePassword(password: string): Boolean;\nvar\n  i, digitCount, upperCount, lowerCount: Integer;\nbegin\n  digitCount := 0;\n  upperCount := 0;\n  lowerCount := 0;\n  \n  for i := 1 to Length(password) do\n  begin\n    if password[i] in ['0'..'9'] then\n      Inc(digitCount)\n    else if password[i] in ['A'..'Z'] then\n      Inc(upperCount)\n    else if password[i] in ['a'..'z'] then\n      Inc(lowerCount);\n  end;\n  Result := (digitCount > 0) and (upperCount > 0) and (lowerCount > 0);\nend;\n\nfunction GenerateRandomPassword: string;\nconst\n  Characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\nvar\n  i: Integer;\nbegin\n  Randomize;\n  SetLength(Result, 8);\n  for i := 1 to 8 do\n    Result[i] := Characters[Random(Length(Characters)) + 1];\nend;\n\nvar\n  password: string;\nbegin\n  password := '';\n  while not IsSecurePassword(password) do\n  begin\n    password := GenerateRandomPassword;\n  end;\n  WriteLn('Secure password generated: ', password);\nend.\n```"
  },
  {
    "task": "Write a process that keeps checking for file changes in a directory and logs them until stopped.",
    "code": "```pascal\nprogram MonitorDirectoryChanges;\n\nuses\n  SysUtils, Classes;\n\nvar\n  Directory: string;\n  DirectoryFiles: TStringList;\n  NewFiles: TStringList;\n\nprocedure LogChange(const FileName: string);\nbegin\n  WriteLn('Change detected in: ', FileName);\n  // Here you might want to append the change to a log file.\nend;\n\nprocedure CheckForChanges;\nvar\n  i: Integer;\nbegin\n  NewFiles.Clear;\n  if FindFirst(Directory + '*.*', faAnyFile, SearchRec) = 0 then\n  begin\n    repeat\n      NewFiles.Add(SearchRec.Name);\n    until FindNext(SearchRec) <> 0;\n    FindClose(SearchRec);\n  end;\n\n  for i := 0 to NewFiles.Count - 1 do\n  begin\n    if DirectoryFiles.IndexOf(NewFiles[i]) = -1 then\n    begin\n      LogChange(NewFiles[i]);\n      DirectoryFiles.Add(NewFiles[i]);\n    end;\n  end;\n\n  for i := DirectoryFiles.Count - 1 downto 0 do\n  begin\n    if NewFiles.IndexOf(DirectoryFiles[i]) = -1 then\n    begin\n      LogChange(DirectoryFiles[i]);\n      DirectoryFiles.Delete(i);\n    end;\n  end;\nend;\n\nbegin\n  Directory := 'C:\\Path\\To\\Directory\\'; // Set your directory path here\n  DirectoryFiles := TStringList.Create;\n  NewFiles := TStringList.Create;\n\n  try\n    while not KeyPressed do\n    begin\n      CheckForChanges;\n      Sleep(1000); // Wait for 1 second before checking again\n    end;\n  finally\n    DirectoryFiles.Free;\n    NewFiles.Free;\n  end;\nend.\n```"
  }
]