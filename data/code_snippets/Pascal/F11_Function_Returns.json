[
  {
    "task": "Create a function that calculates the sum of two numbers and returns the result.",
    "code": "```pascal\nprogram SumFunction;\n\nfunction Sum(a, b: Integer): Integer;\nbegin\n  Sum := a + b;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Design a function that takes a string and returns its length.",
    "code": "```pascal\nprogram StringLengthFunction;\n\nfunction GetStringLength(s: string): Integer;\nbegin\n  GetStringLength := Length(s);\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Write a function that checks if a number is prime and returns a boolean value.",
    "code": "```pascal\nfunction IsPrime(n: Integer): Boolean;\nvar\n  i: Integer;\nbegin\n  if n <= 1 then\n  begin\n    IsPrime := False;\n    Exit;\n  end;\n  for i := 2 to Trunc(Sqrt(n)) do\n  begin\n    if (n mod i = 0) then\n    begin\n      IsPrime := False;\n      Exit;\n    end;\n  end;\n  IsPrime := True;\nend;\n```"
  },
  {
    "task": "Implement a function that returns the highest value in a list of integers.",
    "code": "```pascal\nprogram FindMaxValue;\n\nfunction MaxValue(arr: array of Integer): Integer;\nvar\n  i, max: Integer;\nbegin\n  if Length(arr) = 0 then\n    Exit(0); // Assuming 0 for an empty array, or handle as needed\n\n  max := arr[0];\n  for i := 1 to High(arr) do\n    if arr[i] > max then\n      max := arr[i];\n  MaxValue := max;\nend;\n\nvar\n  numbers: array of Integer;\nbegin\n  SetLength(numbers, 5);\n  numbers[0] := 10;\n  numbers[1] := 25;\n  numbers[2] := 3;\n  numbers[3] := 8;\n  numbers[4] := 15;\n  WriteLn('Maximum value: ', MaxValue(numbers));\nend.\n```"
  },
  {
    "task": "Create a function that accepts a list of words and returns the longest word.",
    "code": "```pascal\nprogram LongestWordFinder;\n\nuses\n  SysUtils;\n\nfunction LongestWord(words: array of string): string;\nvar\n  i: Integer;\n  longest: string;\nbegin\n  longest := '';\n  for i := 0 to High(words) do\n  begin\n    if Length(words[i]) > Length(longest) then\n      longest := words[i];\n  end;\n  LongestWord := longest;\nend;\n\nbegin\n  // Example usage:\n  // WriteLn(LongestWord(['apple', 'banana', 'cherry']));\nend.\n```"
  },
  {
    "task": "Write a function that takes a temperature in Celsius and returns the equivalent in Fahrenheit.",
    "code": "```pascal\nprogram CelsiusToFahrenheit;\n\nfunction ConvertToFahrenheit(celsius: Real): Real;\nbegin\n  ConvertToFahrenheit := (celsius * 9/5) + 32;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Develop a function that returns the factorial of a given number.",
    "code": "```pascal\nprogram FactorialFunction;\n\nfunction Factorial(n: Integer): Integer;\nbegin\n  if n = 0 then\n    Factorial := 1\n  else\n    Factorial := n * Factorial(n - 1);\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Implement a function that receives a date and returns the day of the week.",
    "code": "```pascal\nprogram DayOfWeekFunction;\n\nuses SysUtils;\n\nfunction GetDayOfWeek(year, month, day: Integer): String;\nvar\n  dateTime: TDateTime;\nbegin\n  dateTime := EncodeDate(year, month, day);\n  case DayOfWeek(dateTime) of\n    1: Result := 'Sunday';\n    2: Result := 'Monday';\n    3: Result := 'Tuesday';\n    4: Result := 'Wednesday';\n    5: Result := 'Thursday';\n    6: Result := 'Friday';\n    7: Result := 'Saturday';\n  else\n    Result := 'Unknown';\n  end;\nend;\n\nbegin\n  // Example usage:\n  WriteLn(GetDayOfWeek(2023, 10, 5)); // Output: Thursday\nend.\n```"
  },
  {
    "task": "Write a function that calculates the area of a circle given its radius and returns the value.",
    "code": "```pascal\nprogram CircleAreaCalculator;\n\nfunction CalculateArea(radius: Real): Real;\nconst\n  PI = 3.141592653589793;\nbegin\n  CalculateArea := PI * radius * radius;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Create a function that converts a string to uppercase and returns the modified string.",
    "code": "```pascal\nprogram UpperCaseFunction;\n\nuses SysUtils;\n\nfunction ToUpperCase(s: string): string;\nbegin\n  ToUpperCase := UpperCase(s);\nend;\n\nvar\n  original, modified: string;\nbegin\n  original := 'hello world';\n  modified := ToUpperCase(original);\n  WriteLn(modified);\nend.\n```"
  },
  {
    "task": "Design a function that returns the reverse of a given list.",
    "code": "```pascal\nprogram ReverseListFunction;\n\ntype\n  TIntArray = array of Integer;\n\nfunction ReverseList(arr: TIntArray): TIntArray;\nvar\n  i, n: Integer;\nbegin\n  n := Length(arr);\n  SetLength(Result, n);\n  for i := 0 to n - 1 do\n    Result[i] := arr[n - 1 - i];\nend;\n\nvar\n  OriginalList, ReversedList: TIntArray;\n  i: Integer;\nbegin\n  OriginalList := TIntArray.Create(1, 2, 3, 4, 5);\n  ReversedList := ReverseList(OriginalList);\n  for i := 0 to High(ReversedList) do\n    WriteLn(ReversedList[i]);\nend.\n```"
  },
  {
    "task": "Implement a function that accepts a string and returns a dictionary with character frequencies.",
    "code": "```pascal\nprogram CharacterFrequency;\n\nuses\n  SysUtils, Generics.Collections;\n\nfunction CharFrequency(const S: string): TDictionary<Char, Integer>;\nvar\n  CharDict: TDictionary<Char, Integer>;\n  Ch: Char;\nbegin\n  CharDict := TDictionary<Char, Integer>.Create;\n  for Ch in S do\n  begin\n    if CharDict.ContainsKey(Ch) then\n      CharDict[Ch] := CharDict[Ch] + 1\n    else\n      CharDict.Add(Ch, 1);\n  end;\n  Result := CharDict;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Write a function that returns the first non-repeating character in a string.",
    "code": "```pascal\nprogram FirstNonRepeatingCharacter;\n\nuses sysutils;\n\nfunction FirstNonRepeatingChar(const s: string): char;\nvar\n  freq: array[char] of integer;\n  i: integer;\nbegin\n  // Initialize frequency array\n  for i := low(freq) to high(freq) do\n    freq[i] := 0;\n  \n  // Count frequency of each character\n  for i := 1 to length(s) do\n    inc(freq[s[i]]);\n  \n  // Find first non-repeating character\n  for i := 1 to length(s) do\n    if freq[s[i]] = 1 then\n      exit(s[i]);\n  \n  // Return null character if no non-repeating character is found\n  exit(#0);\nend;\n\nvar\n  result: char;\n\nbegin\n  result := FirstNonRepeatingChar('swiss');\n  if result <> #0 then\n    writeln('First non-repeating character: ', result)\n  else\n    writeln('No non-repeating character found.');\nend.\n```"
  },
  {
    "task": "Create a function that takes a list of numbers and returns a new list with only even numbers.",
    "code": "```pascal\nprogram EvenNumbersFilter;\n\ntype\n  TIntegerArray = array of Integer;\n\nfunction FilterEvenNumbers(numbers: TIntegerArray): TIntegerArray;\nvar\n  i, count: Integer;\nbegin\n  count := 0;\n  SetLength(Result, Length(numbers));\n  for i := 0 to High(numbers) do\n  begin\n    if numbers[i] mod 2 = 0 then\n    begin\n      Result[count] := numbers[i];\n      Inc(count);\n    end;\n  end;\n  SetLength(Result, count);\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Develop a function that receives a sentence and returns the word count.",
    "code": "```pascal\nprogram WordCountProgram;\n\nuses\n  SysUtils;\n\nfunction WordCount(const Sentence: string): Integer;\nvar\n  i: Integer;\n  InWord: Boolean;\nbegin\n  Result := 0;\n  InWord := False;\n  for i := 1 to Length(Sentence) do\n  begin\n    if Sentence[i] in ['A'..'Z', 'a'..'z', '0'..'9'] then\n    begin\n      if not InWord then\n      begin\n        InWord := True;\n        Inc(Result);\n      end;\n    end\n    else\n      InWord := False;\n  end;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Implement a function that returns the smallest element in an array.",
    "code": "```pascal\nprogram SmallestElement;\n\ntype\n  IntegerArray = array of Integer;\n\nfunction FindSmallest(arr: IntegerArray): Integer;\nvar\n  i, min: Integer;\nbegin\n  if Length(arr) = 0 then\n    exit(0); // or raise an error for an empty array\n\n  min := arr[0];\n  for i := 1 to High(arr) do\n    if arr[i] < min then\n      min := arr[i];\n  Result := min;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Write a function that takes two strings and returns true if they are anagrams.",
    "code": "```pascal\nprogram AnagramCheck;\n\nuses SysUtils;\n\nfunction AreAnagrams(str1, str2: string): Boolean;\nvar\n  sortedStr1, sortedStr2: string;\nbegin\n  sortedStr1 := str1;\n  sortedStr2 := str2;\n  sortedStr1 := LowerCase(sortedStr1);\n  sortedStr2 := LowerCase(sortedStr2);\n  sortedStr1 := StringReplace(sortedStr1, ' ', '', [rfReplaceAll]);\n  sortedStr2 := StringReplace(sortedStr2, ' ', '', [rfReplaceAll]);\n  sortedStr1 := Concat(sortedStr1);\n  sortedStr2 := Concat(sortedStr2);\n  sortedStr1 := SortString(sortedStr1);\n  sortedStr2 := SortString(sortedStr2);\n  AreAnagrams := sortedStr1 = sortedStr2;\nend;\n\nfunction SortString(s: string): string;\nvar\n  i, j: Integer;\n  temp: Char;\nbegin\n  SetLength(SortString, Length(s));\n  for i := 1 to Length(s) do\n    SortString[i] := s[i];\n  for i := 1 to Length(SortString) - 1 do\n    for j := i + 1 to Length(SortString) do\n      if SortString[i] > SortString[j] then\n      begin\n        temp := SortString[i];\n        SortString[i] := SortString[j];\n        SortString[j] := temp;\n      end;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Create a function that accepts an integer and returns a list of its divisors.",
    "code": "```pascal\nprogram DivisorsFunction;\n\ntype\n  TIntArray = array of Integer;\n\nfunction FindDivisors(n: Integer): TIntArray;\nvar\n  i, count: Integer;\nbegin\n  SetLength(Result, 0);\n  count := 0;\n  for i := 1 to n do\n  begin\n    if n mod i = 0 then\n    begin\n      SetLength(Result, count + 1);\n      Result[count] := i;\n      Inc(count);\n    end;\n  end;\nend;\n\nvar\n  divisors: TIntArray;\n  i: Integer;\nbegin\n  divisors := FindDivisors(28);\n  for i := 0 to High(divisors) do\n  begin\n    WriteLn(divisors[i]);\n  end;\nend.\n```"
  },
  {
    "task": "Design a function that returns the square root of a given number.",
    "code": "```pascal\nprogram SquareRootFunction;\n\nfunction SquareRoot(x: Real): Real;\nbegin\n  SquareRoot := Sqrt(x);\nend;\n\nvar\n  number: Real;\n  result: Real;\nbegin\n  number := 9.0;  { Example input }\n  result := SquareRoot(number);\n  WriteLn('The square root of ', number:0:2, ' is ', result:0:2);\nend.\n```"
  },
  {
    "task": "Implement a function that accepts a list and returns it sorted in ascending order.",
    "code": "```pascal\nprogram SortList;\n\ntype\n  TIntegerArray = array of Integer;\n\nfunction SortArray(arr: TIntegerArray): TIntegerArray;\nvar\n  i, j, temp: Integer;\nbegin\n  SetLength(SortArray, Length(arr));\n  for i := 0 to High(arr) do\n    SortArray[i] := arr[i];\n\n  for i := 0 to High(SortArray) - 1 do\n    for j := i + 1 to High(SortArray) do\n      if SortArray[i] > SortArray[j] then\n      begin\n        temp := SortArray[i];\n        SortArray[i] := SortArray[j];\n        SortArray[j] := temp;\n      end;\nend;\n\nvar\n  myArray, sortedArray: TIntegerArray;\n  i: Integer;\nbegin\n  myArray := TIntegerArray.Create(5, 3, 8, 1, 4);\n  sortedArray := SortArray(myArray);\n\n  for i := 0 to High(sortedArray) do\n    Write(sortedArray[i], ' ');\nend.\n```"
  },
  {
    "task": "Write a function that checks whether a given year is a leap year and returns a boolean.",
    "code": "```pascal\nfunction IsLeapYear(year: Integer): Boolean;\nbegin\n  if (year mod 4 = 0) and ((year mod 100 <> 0) or (year mod 400 = 0)) then\n    IsLeapYear := True\n  else\n    IsLeapYear := False;\nend;\n```"
  },
  {
    "task": "Create a function that receives a list of numbers and returns their average.",
    "code": "```pascal\nprogram AverageCalculator;\n\nuses SysUtils;\n\nfunction CalculateAverage(numbers: array of Double): Double;\nvar\n  sum: Double;\n  i, count: Integer;\nbegin\n  sum := 0.0;\n  count := Length(numbers);\n  for i := 0 to count - 1 do\n    sum := sum + numbers[i];\n  if count > 0 then\n    CalculateAverage := sum / count\n  else\n    CalculateAverage := 0.0;  \nend;\n\nvar\n  nums: array of Double;\n  avg: Double;\nbegin\n  nums := [1.0, 2.0, 3.0, 4.0, 5.0];\n  avg := CalculateAverage(nums);\n  WriteLn('Average: ', avg:0:2);\nend.\n```"
  },
  {
    "task": "Develop a function that returns the nth Fibonacci number.",
    "code": "```pascal\nprogram FibonacciFunction;\n\nfunction Fibonacci(n: Integer): Integer;\nbegin\n    if n <= 1 then\n        Fibonacci := n\n    else\n        Fibonacci := Fibonacci(n - 1) + Fibonacci(n - 2);\nend;\n\nvar\n    n: Integer;\nbegin\n    n := 10; { Example to get the 10th Fibonacci number }\n    WriteLn('The ', n, 'th Fibonacci number is ', Fibonacci(n));\nend.\n```"
  },
  {
    "task": "Implement a function that accepts a string and returns it with vowels removed.",
    "code": "```pascal\nprogram RemoveVowels;\n\nfunction RemoveVowelsFromString(s: string): string;\nvar\n  i: integer;\n  resultString: string;\nbegin\n  resultString := '';\n  for i := 1 to Length(s) do\n  begin\n    if not (s[i] in ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']) then\n      resultString := resultString + s[i];\n  end;\n  RemoveVowelsFromString := resultString;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Write a function that takes two dates and returns the number of days between them.",
    "code": "```pascal\nprogram DateDifference;\n\nuses\n  SysUtils;\n\nfunction DaysBetween(Date1, Date2: TDateTime): Integer;\nbegin\n  Result := Abs(Trunc(Date2) - Trunc(Date1));\nend;\n\nvar\n  StartDate, EndDate: TDateTime;\n  DifferenceInDays: Integer;\nbegin\n  StartDate := EncodeDate(2023, 1, 1);\n  EndDate := EncodeDate(2023, 12, 31);\n  DifferenceInDays := DaysBetween(StartDate, EndDate);\n  WriteLn('Difference in days: ', DifferenceInDays);\nend.\n```"
  },
  {
    "task": "Create a function that returns the last element of a list.",
    "code": "```pascal\nprogram LastElementFunction;\n\ntype\n  TIntegerArray = array of Integer;\n\nfunction LastElement(arr: TIntegerArray): Integer;\nbegin\n  if Length(arr) > 0 then\n    LastElement := arr[High(arr)]\n  else\n    raise Exception.Create('Array is empty');\nend;\n\nvar\n  numbers: TIntegerArray;\n  last: Integer;\nbegin\n  numbers := [1, 2, 3, 4, 5];\n  last := LastElement(numbers);\n  WriteLn('Last element: ', last);\nend.\n```"
  },
  {
    "task": "Design a function that calculates the GCD of two numbers and returns it.",
    "code": "```pascal\nprogram GCDProgram;\n\nfunction GCD(a, b: Integer): Integer;\nbegin\n  while b <> 0 do\n  begin\n    GCD := b;\n    b := a mod b;\n    a := GCD;\n  end;\n  GCD := a;\nend;\n\nbegin\n  { This is where you could call the GCD function, if needed }\nend.\n```"
  },
  {
    "task": "Implement a function that takes a list and returns a tuple with the min and max values.",
    "code": "```pascal\nprogram MinMaxFunction;\n\ntype\n  TIntArray = array of Integer;\n  TIntTuple = record\n    MinValue: Integer;\n    MaxValue: Integer;\n  end;\n\nfunction MinMax(arr: TIntArray): TIntTuple;\nvar\n  i: Integer;\n  minValue, maxValue: Integer;\nbegin\n  if Length(arr) = 0 then\n  begin\n    MinMax.MinValue := 0;\n    MinMax.MaxValue := 0;\n    Exit;\n  end;\n\n  minValue := arr[0];\n  maxValue := arr[0];\n\n  for i := 1 to High(arr) do\n  begin\n    if arr[i] < minValue then\n      minValue := arr[i];\n    if arr[i] > maxValue then\n      maxValue := arr[i];\n  end;\n\n  MinMax.MinValue := minValue;\n  MinMax.MaxValue := maxValue;\nend;\n\nvar\n  nums: TIntArray;\n  result: TIntTuple;\nbegin\n  nums := TIntArray.Create(5, 3, 9, 1, 6);\n  result := MinMax(nums);\n  WriteLn('Min: ', result.MinValue, ' Max: ', result.MaxValue);\nend.\n```"
  },
  {
    "task": "Write a function that converts a binary string to its decimal representation and returns it.",
    "code": "```pascal\nprogram BinaryToDecimal;\n\nfunction BinaryStringToDecimal(binStr: string): Integer;\nvar\n  i, decimalValue, base: Integer;\nbegin\n  decimalValue := 0;\n  base := 1;\n  \n  for i := Length(binStr) downto 1 do\n  begin\n    if binStr[i] = '1' then\n      decimalValue := decimalValue + base;\n    base := base * 2;\n  end;\n  \n  BinaryStringToDecimal := decimalValue;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Create a function that accepts a dictionary and returns a list of its keys.",
    "code": "```pascal\nprogram DictionaryKeys;\n\nuses\n  SysUtils, Generics.Collections;\n\nfunction GetKeys(dict: TDictionary<string, string>): TList<string>;\nvar\n  key: string;\n  keysList: TList<string>;\nbegin\n  keysList := TList<string>.Create;\n  for key in dict.Keys do\n  begin\n    keysList.Add(key);\n  end;\n  Result := keysList;\nend;\n\nvar\n  myDict: TDictionary<string, string>;\n  keys: TList<string>;\n  key: string;\nbegin\n  myDict := TDictionary<string, string>.Create;\n  try\n    myDict.Add('One', '1');\n    myDict.Add('Two', '2');\n    myDict.Add('Three', '3');\n    \n    keys := GetKeys(myDict);\n    try\n      for key in keys do\n      begin\n        WriteLn(key);\n      end;\n    finally\n      keys.Free;\n    end;\n  finally\n    myDict.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Develop a function that returns the concatenation of two strings.",
    "code": "```pascal\nprogram ConcatenateStrings;\n\nfunction Concatenate(str1, str2: string): string;\nbegin\n  Concatenate := str1 + str2;\nend;\n\nvar\n  result: string;\n\nbegin\n  result := Concatenate('Hello, ', 'World!');\n  writeln(result);\nend.\n```"
  },
  {
    "task": "Implement a function that receives a list and returns a new list with duplicates removed.",
    "code": "```pascal\nprogram RemoveDuplicates;\n\ntype\n  TIntArray = array of Integer;\n\nfunction RemoveDuplicatesFromList(const arr: TIntArray): TIntArray;\nvar\n  i, j, n: Integer;\n  found: Boolean;\nbegin\n  n := Length(arr);\n  SetLength(Result, 0);\n\n  for i := 0 to n - 1 do\n  begin\n    found := False;\n    for j := 0 to High(Result) do\n    begin\n      if arr[i] = Result[j] then\n      begin\n        found := True;\n        Break;\n      end;\n    end;\n    if not found then\n    begin\n      SetLength(Result, Length(Result) + 1);\n      Result[High(Result)] := arr[i];\n    end;\n  end;\nend;\n\nvar\n  input: TIntArray;\n  output: TIntArray;\n  i: Integer;\nbegin\n  input := [1, 2, 2, 3, 4, 4, 5];\n  output := RemoveDuplicatesFromList(input);\n\n  for i := 0 to High(output) do\n    WriteLn(output[i]);\nend.\n```"
  },
  {
    "task": "Write a function that returns the intersection of two lists.",
    "code": "```pascal\nprogram ListIntersection;\n\ntype\n  TIntArray = array of Integer;\n\nfunction IntersectLists(A, B: TIntArray): TIntArray;\nvar\n  i, j, k: Integer;\n  found: Boolean;\nbegin\n  SetLength(Result, 0);\n  k := 0;\n  for i := 0 to High(A) do\n  begin\n    found := False;\n    for j := 0 to High(B) do\n    begin\n      if A[i] = B[j] then\n      begin\n        found := True;\n        Break;\n      end;\n    end;\n    if found then\n    begin\n      SetLength(Result, k + 1);\n      Result[k] := A[i];\n      Inc(k);\n    end;\n  end;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Create a function that takes an integer and returns whether it is even or odd as a string.",
    "code": "```pascal\nprogram EvenOrOdd;\n\nfunction IsEvenOrOdd(n: Integer): String;\nbegin\n  if n mod 2 = 0 then\n    IsEvenOrOdd := 'Even'\n  else\n    IsEvenOrOdd := 'Odd';\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Design a function that returns the number of vowels in a given string.",
    "code": "```pascal\nprogram CountVowels;\n\nfunction CountVowelsInString(s: string): Integer;\nvar\n  i, count: Integer;\nbegin\n  count := 0;\n  for i := 1 to Length(s) do\n  begin\n    if s[i] in ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'] then\n      Inc(count);\n  end;\n  CountVowelsInString := count;\nend;\n\nvar\n  inputString: string;\n  vowelCount: Integer;\nbegin\n  Write('Enter a string: ');\n  ReadLn(inputString);\n  vowelCount := CountVowelsInString(inputString);\n  WriteLn('Number of vowels: ', vowelCount);\nend.\n```"
  },
  {
    "task": "Implement a function that counts the occurrences of a substring within a string and returns it.",
    "code": "```pascal\nprogram SubstringCount;\n\nfunction CountSubstringOccurrences(const str, substr: string): Integer;\nvar\n  count, pos: Integer;\nbegin\n  count := 0;\n  pos := Pos(substr, str);\n  while pos > 0 do\n  begin\n    Inc(count);\n    pos := PosEx(substr, str, pos + 1);\n  end;\n  CountSubstringOccurrences := count;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Write a function that accepts a list of numbers and returns them sorted in descending order.",
    "code": "```pascal\nprogram SortDescending;\n\ntype\n  TIntArray = array of Integer;\n\nfunction SortDescendingOrder(numbers: TIntArray): TIntArray;\nvar\n  i, j, temp: Integer;\nbegin\n  SetLength(Result, Length(numbers));\n  for i := 0 to High(numbers) do\n    Result[i] := numbers[i];\n\n  for i := 0 to High(Result) - 1 do\n    for j := i + 1 to High(Result) do\n      if Result[i] < Result[j] then\n      begin\n        temp := Result[i];\n        Result[i] := Result[j];\n        Result[j] := temp;\n      end;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Create a function that returns the median of a list of numbers.",
    "code": "```pascal\nprogram MedianFunction;\n\ntype\n  TNumberArray = array of Real;\n\nfunction Median(numbers: TNumberArray): Real;\nvar\n  sortedNumbers: TNumberArray;\n  n, middle: Integer;\nbegin\n  // Copy the array to preserve the original order\n  sortedNumbers := Copy(numbers);\n  n := Length(sortedNumbers);\n  \n  // Sort the array\n  for var i := 0 to n - 2 do\n    for var j := i + 1 to n - 1 do\n      if sortedNumbers[i] > sortedNumbers[j] then\n      begin\n        var temp: Real;\n        temp := sortedNumbers[i];\n        sortedNumbers[i] := sortedNumbers[j];\n        sortedNumbers[j] := temp;\n      end;\n  \n  // Find the median\n  middle := n div 2;\n  if n mod 2 = 0 then\n    Result := (sortedNumbers[middle - 1] + sortedNumbers[middle]) / 2\n  else\n    Result := sortedNumbers[middle];\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Develop a function that receives a sentence and returns it with words in reverse order.",
    "code": "```pascal\nprogram ReverseWords;\n\nuses\n  SysUtils;\n\nfunction ReverseSentence(sentence: string): string;\nvar\n  words: TStringArray;\n  reversedSentence: string;\n  i: Integer;\nbegin\n  words := sentence.Split([' ']);\n  reversedSentence := '';\n  for i := High(words) downto Low(words) do\n  begin\n    reversedSentence := reversedSentence + words[i];\n    if i > Low(words) then\n      reversedSentence := reversedSentence + ' ';\n  end;\n  Result := reversedSentence;\nend;\n\nvar\n  original, reversed: string;\nbegin\n  original := 'This is a test sentence';\n  reversed := ReverseSentence(original);\n  WriteLn(reversed);\nend.\n```"
  },
  {
    "task": "Implement a function that returns the sum of all elements in a matrix.",
    "code": "```pascal\nprogram MatrixSum;\n\ntype\n  TMatrix = array of array of Integer;\n\nfunction SumMatrix(const A: TMatrix): Integer;\nvar\n  i, j: Integer;\n  sum: Integer;\nbegin\n  sum := 0;\n  for i := Low(A) to High(A) do\n    for j := Low(A[i]) to High(A[i]) do\n      sum := sum + A[i][j];\n  Result := sum;\nend;\n\nvar\n  matrix: TMatrix;\nbegin\n  SetLength(matrix, 3, 3); \n  matrix[0][0] := 1; matrix[0][1] := 2; matrix[0][2] := 3;\n  matrix[1][0] := 4; matrix[1][1] := 5; matrix[1][2] := 6;\n  matrix[2][0] := 7; matrix[2][1] := 8; matrix[2][2] := 9;\n  WriteLn('Sum of matrix elements: ', SumMatrix(matrix));\nend.\n```"
  },
  {
    "task": "Write a function that accepts a string and returns true if it is a palindrome.",
    "code": "```pascal\nprogram PalindromeCheck;\n\nfunction IsPalindrome(s: string): Boolean;\nvar\n  i, len: Integer;\nbegin\n  len := Length(s);\n  for i := 1 to len div 2 do\n    if s[i] <> s[len - i + 1] then\n    begin\n      IsPalindrome := False;\n      Exit;\n    end;\n  IsPalindrome := True;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Create a function that takes a number and returns its binary representation as a string.",
    "code": "```pascal\nprogram NumberToBinary;\n\nfunction NumberToBinary(n: Integer): String;\nvar\n  resultStr: String;\nbegin\n  resultStr := '';\n  while n > 0 do\n  begin\n    resultStr := Chr(48 + (n mod 2)) + resultStr;\n    n := n div 2;\n  end;\n  if resultStr = '' then\n    resultStr := '0';\n  NumberToBinary := resultStr;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Design a function that returns the number of words in a paragraph.",
    "code": "```pascal\nprogram WordCount;\n\nfunction CountWords(paragraph: string): Integer;\nvar\n  i, count: Integer;\n  inWord: Boolean;\nbegin\n  count := 0;\n  inWord := False;\n  for i := 1 to Length(paragraph) do\n  begin\n    if paragraph[i] in ['a'..'z', 'A'..'Z', '0'..'9'] then\n    begin\n      if not inWord then\n      begin\n        Inc(count);\n        inWord := True;\n      end;\n    end\n    else\n      inWord := False;\n  end;\n  CountWords := count;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Implement a function that accepts a list and returns the index of its maximum element.",
    "code": "```pascal\nprogram MaxIndexFinder;\n\nuses SysUtils;\n\nfunction IndexOfMaxElement(arr: array of Integer): Integer;\nvar\n  i, maxIndex, n: Integer;\nbegin\n  n := Length(arr);\n  if n = 0 then\n    raise Exception.Create('Array is empty');\n    \n  maxIndex := 0;\n  for i := 1 to n - 1 do\n  begin\n    if arr[i] > arr[maxIndex] then\n      maxIndex := i;\n  end;\n  Result := maxIndex;\nend;\n\nbegin\n  // Example Usage\n  try\n    WriteLn(IndexOfMaxElement([1, 3, 5, 7, 9, 2, 4]));\n  except\n    on E: Exception do\n      WriteLn(E.ClassName, ': ', E.Message);\n  end;\nend.\n```"
  },
  {
    "task": "Write a function that takes a list of grades and returns the highest grade.",
    "code": "```pascal\nprogram HighestGrade;\n\nuses sysutils;\n\nfunction GetHighestGrade(grades: array of Integer): Integer;\nvar\n  i, maxGrade: Integer;\nbegin\n  if Length(grades) = 0 then\n    raise Exception.Create('Grade list is empty');\n\n  maxGrade := grades[0];\n  for i := 1 to High(grades) do\n  begin\n    if grades[i] > maxGrade then\n      maxGrade := grades[i];\n  end;\n  GetHighestGrade := maxGrade;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Create a function that returns the product of all positive integers up to a given number.",
    "code": "```pascal\nprogram ProductFunction;\n\nfunction ProductUpTo(n: Integer): Integer;\nvar\n  i, product: Integer;\nbegin\n  product := 1;\n  for i := 1 to n do\n  begin\n    product := product * i;\n  end;\n  ProductUpTo := product;\nend;\n\nvar\n  number: Integer;\nbegin\n  number := 5; { Sample input }\n  WriteLn('Product of all positive integers up to ', number, ' is: ', ProductUpTo(number));\nend.\n```"
  },
  {
    "task": "Develop a function that receives a string and returns a new string with spaces replaced by hyphens.",
    "code": "```pascal\nprogram ReplaceSpacesWithHyphens;\n\nfunction ReplaceSpaces(const inputStr: string): string;\nvar\n  i: Integer;\n  resultStr: string;\nbegin\n  resultStr := inputStr;\n  for i := 1 to Length(resultStr) do\n  begin\n    if resultStr[i] = ' ' then\n      resultStr[i] := '-';\n  end;\n  ReplaceSpaces := resultStr;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Implement a function that takes a list of integers and returns their sum.",
    "code": "```pascal\nprogram SumOfIntegers;\n\nfunction SumList(numbers: array of Integer): Integer;\nvar\n  sum, i: Integer;\nbegin\n  sum := 0;\n  for i := Low(numbers) to High(numbers) do\n    sum := sum + numbers[i];\n  SumList := sum;\nend;\n\nvar\n  nums: array of Integer;\nbegin\n  SetLength(nums, 5);\n  nums[0] := 1;\n  nums[1] := 2;\n  nums[2] := 3;\n  nums[3] := 4;\n  nums[4] := 5;\n  WriteLn('Sum of the list: ', SumList(nums));\nend.\n```"
  },
  {
    "task": "Write a function that checks if a string is a valid email address and returns a boolean.",
    "code": "```pascal\nprogram EmailValidation;\n\nfunction IsValidEmail(email: string): Boolean;\nvar\n  atPos, dotPos: Integer;\nbegin\n  atPos := Pos('@', email);\n  dotPos := LastDelimiter('.', email);\n  if (atPos > 1) and (dotPos > atPos + 1) and (dotPos < Length(email)) then\n    IsValidEmail := True\n  else\n    IsValidEmail := False;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Create a function that returns the decimal equivalent of a hexadecimal string.",
    "code": "```pascal\nprogram HexToDecimal;\n\nuses\n  SysUtils;\n\nfunction HexToDec(hex: string): Integer;\nbegin\n  Result := StrToInt('$' + hex);\nend;\n\nvar\n  hexValue: string;\n  decimalValue: Integer;\n\nbegin\n  hexValue := '1A3F';\n  decimalValue := HexToDec(hexValue);\n  WriteLn('Decimal value: ', decimalValue);\nend.\n```"
  },
  {
    "task": "Design a function that calculates and returns the body mass index based on height and weight.",
    "code": "```pascal\nprogram BMICalculator;\n\nfunction CalculateBMI(weight, height: Real): Real;\nbegin\n  CalculateBMI := weight / (height * height);\nend;\n\nvar\n  weight, height, bmi: Real;\nbegin\n  { Example usage }\n  weight := 70.0;  { weight in kilograms }\n  height := 1.75;  { height in meters }\n  bmi := CalculateBMI(weight, height);\n  WriteLn('The calculated BMI is: ', bmi:0:2);\nend.\n```"
  },
  {
    "task": "Implement a function that returns the initials of a person's name given a full name.",
    "code": "```pascal\nprogram InitialsFunction;\n\nfunction GetInitials(fullName: string): string;\nvar\n  i: Integer;\n  initials: string;\nbegin\n  initials := '';\n  if Length(fullName) > 0 then\n    initials := initials + UpCase(fullName[1]);\n  \n  for i := 2 to Length(fullName) do\n  begin\n    if (fullName[i-1] = ' ') and (fullName[i] <> ' ') then\n      initials := initials + UpCase(fullName[i]);\n  end;\n  \n  GetInitials := initials;\nend;\n\nvar\n  name: string;\n  initials: string;\n\nbegin\n  name := 'John Doe';\n  initials := GetInitials(name);\n  writeln('Initials: ', initials);\nend.\n```"
  },
  {
    "task": "Write a function that accepts a list of names and returns them sorted alphabetically.",
    "code": "```pascal\nprogram SortNames;\n\nuses SysUtils;\n\ntype\n  TStringArray = array of string;\n\nfunction SortAlphabetically(names: TStringArray): TStringArray;\nvar\n  i, j: Integer;\n  temp: string;\nbegin\n  for i := Low(names) to High(names) - 1 do\n    for j := i + 1 to High(names) do\n      if CompareText(names[i], names[j]) > 0 then\n      begin\n        temp := names[i];\n        names[i] := names[j];\n        names[j] := temp;\n      end;\n  Result := names;\nend;\n\nvar\n  names: TStringArray;\n  sortedNames: TStringArray;\n  i: Integer;\nbegin\n  names := TStringArray.Create('Alice', 'Charlie', 'Bob');\n  sortedNames := SortAlphabetically(names);\n  for i := Low(sortedNames) to High(sortedNames) do\n    WriteLn(sortedNames[i]);\nend.\n```"
  },
  {
    "task": "Create a function that takes a list of integers and returns a list of their squares.",
    "code": "```pascal\nprogram SquareList;\n\ntype\n  TIntArray = array of Integer;\n\nfunction SquareNumbers(numbers: TIntArray): TIntArray;\nvar\n  i: Integer;\nbegin\n  SetLength(Result, Length(numbers));\n  for i := 0 to High(numbers) do\n  begin\n    Result[i] := numbers[i] * numbers[i];\n  end;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Develop a function that returns the common elements between two sets.",
    "code": "```pascal\nprogram CommonElements;\n\ntype\n  TSet = set of integer;\n\nfunction CommonElements(Set1, Set2: TSet): TSet;\nbegin\n  CommonElements := Set1 * Set2;\nend;\n\nvar\n  SetA, SetB, ResultSet: TSet;\n\nbegin\n  SetA := [1, 2, 3, 4];\n  SetB := [3, 4, 5, 6];\n  ResultSet := CommonElements(SetA, SetB);\n  { Output or further use ResultSet }\nend.\n```"
  },
  {
    "task": "Implement a function that receives a list of strings and returns the shortest string.",
    "code": "```pascal\nprogram ShortestString;\n\nuses\n  SysUtils;\n\nfunction FindShortestString(strings: array of string): string;\nvar\n  i: Integer;\n  shortest: string;\nbegin\n  if Length(strings) = 0 then\n    exit('');\n\n  shortest := strings[0];\n  for i := 1 to High(strings) do\n  begin\n    if Length(strings[i]) < Length(shortest) then\n      shortest := strings[i];\n  end;\n  Result := shortest;\nend;\n\nbegin\n  // Example usage:\n  Writeln(FindShortestString(['apple', 'banana', 'kiwi', 'pear']));\nend.\n```"
  },
  {
    "task": "Write a function that returns the sum of digits of a given integer.",
    "code": "```pascal\nprogram SumOfDigits;\n\nfunction SumDigits(n: Integer): Integer;\nvar\n  sum, digit: Integer;\nbegin\n  sum := 0;\n  n := Abs(n); // Ensure n is positive\n  while n > 0 do\n  begin\n    digit := n mod 10;\n    sum := sum + digit;\n    n := n div 10;\n  end;\n  SumDigits := sum;\nend;\n\nvar\n  number: Integer;\nbegin\n  number := 12345; // Example input\n  WriteLn('Sum of digits: ', SumDigits(number));\nend.\n```"
  },
  {
    "task": "Create a function that takes a matrix and returns its transpose.",
    "code": "```pascal\nprogram MatrixTranspose;\n\ntype\n  TMatrix = array of array of Integer;\n\nfunction TransposeMatrix(const M: TMatrix): TMatrix;\nvar\n  i, j, rows, cols: Integer;\n  Transposed: TMatrix;\nbegin\n  rows := Length(M);\n  if rows = 0 then\n  begin\n    SetLength(Transposed, 0);\n    Exit(Transposed);\n  end;\n  \n  cols := Length(M[0]);\n  SetLength(Transposed, cols, rows);\n  \n  for i := 0 to rows - 1 do\n    for j := 0 to cols - 1 do\n      Transposed[j][i] := M[i][j];\n      \n  Result := Transposed;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Design a function that returns the percentage of uppercase letters in a string.",
    "code": "```pascal\nprogram UppercasePercentage;\n\nuses\n  SysUtils;\n\nfunction UppercasePercentage(const s: string): Double;\nvar\n  i, uppercaseCount: Integer;\nbegin\n  uppercaseCount := 0;\n  for i := 1 to Length(s) do\n  begin\n    if s[i] in ['A'..'Z'] then\n      Inc(uppercaseCount);\n  end;\n  if Length(s) > 0 then\n    Result := (uppercaseCount / Length(s)) * 100\n  else\n    Result := 0.0;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Implement a function that accepts a string and returns it with each word capitalized.",
    "code": "```pascal\nprogram CapitalizeWords;\n\nuses\n  SysUtils;\n\nfunction CapitalizeEachWord(const S: string): string;\nvar\n  I: Integer;\n  InWord: Boolean;\nbegin\n  Result := LowerCase(S);\n  InWord := False;\n  for I := 1 to Length(Result) do\n  begin\n    if not InWord and (Result[I] in ['a'..'z']) then\n    begin\n      Result[I] := UpCase(Result[I]);\n      InWord := True;\n    end\n    else if Result[I] = ' ' then\n    begin\n      InWord := False;\n    end;\n  end;\nend;\n\nvar\n  Input, Output: string;\nbegin\n  Input := 'hello world from pascal';\n  Output := CapitalizeEachWord(Input);\n  WriteLn(Output);\nend.\n```"
  },
  {
    "task": "Write a function that takes a list and returns the difference between the max and min values.",
    "code": "```pascal\nprogram DifferenceMaxMin;\n\nfunction Difference(list: array of Integer): Integer;\nvar\n  maxVal, minVal, i: Integer;\nbegin\n  if Length(list) = 0 then\n  begin\n    Difference := 0;\n    Exit;\n  end;\n\n  maxVal := list[0];\n  minVal := list[0];\n\n  for i := 1 to High(list) do\n  begin\n    if list[i] > maxVal then\n      maxVal := list[i];\n    if list[i] < minVal then\n      minVal := list[i];\n  end;\n\n  Difference := maxVal - minVal;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Create a function that returns a list containing the first n prime numbers.",
    "code": "```pascal\nprogram FirstNPrimes;\n\ntype\n  TIntArray = array of Integer;\n\nfunction IsPrime(num: Integer): Boolean;\nvar\n  i: Integer;\nbegin\n  if num <= 1 then\n  begin\n    Result := False;\n    Exit;\n  end;\n  for i := 2 to Trunc(Sqrt(num)) do\n  begin\n    if num mod i = 0 then\n    begin\n      Result := False;\n      Exit;\n    end;\n  end;\n  Result := True;\nend;\n\nfunction FirstNPrimes(n: Integer): TIntArray;\nvar\n  count, num: Integer;\nbegin\n  SetLength(Result, n);\n  count := 0;\n  num := 2;\n  while count < n do\n  begin\n    if IsPrime(num) then\n    begin\n      Result[count] := num;\n      Inc(count);\n    end;\n    Inc(num);\n  end;\nend;\n\nvar\n  primes: TIntArray;\n  i: Integer;\nbegin\n  primes := FirstNPrimes(10);\n  for i := 0 to High(primes) do\n    WriteLn(primes[i]);\nend.\n```"
  },
  {
    "task": "Develop a function that receives a dictionary and returns a new dictionary with keys and values swapped.",
    "code": "```pascal\nprogram SwapDictionary;\n\nuses SysUtils, Generics.Collections;\n\nfunction SwapKeyValue(const AInput: TDictionary<string, string>): TDictionary<string, string>;\nvar\n  Key, Value: string;\nbegin\n  Result := TDictionary<string, string>.Create;\n  for Key in AInput.Keys do\n  begin\n    Value := AInput[Key];\n    Result.Add(Value, Key);\n  end;\nend;\n\nvar\n  OriginalDict, SwappedDict: TDictionary<string, string>;\n  Key: string;\nbegin\n  OriginalDict := TDictionary<string, string>.Create;\n  try\n    OriginalDict.Add('one', '1');\n    OriginalDict.Add('two', '2');\n    OriginalDict.Add('three', '3');\n\n    SwappedDict := SwapKeyValue(OriginalDict);\n    try\n      for Key in SwappedDict.Keys do\n      begin\n        WriteLn(Key, ': ', SwappedDict[Key]);\n      end;\n    finally\n      SwappedDict.Free;\n    end;\n  finally\n    OriginalDict.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Implement a function that accepts a string and returns the frequency of each word.",
    "code": "```pascal\nprogram WordFrequency;\n\nuses\n  SysUtils, Classes;\n\nfunction WordFrequency(const Text: string): TStringList;\nvar\n  Words: TStringList;\n  Word: string;\n  I: Integer;\nbegin\n  Words := TStringList.Create;\n  Words.Delimiter := ' ';\n  Words.DelimitedText := StringReplace(Text, '.', '', [rfReplaceAll]);\n  Result := TStringList.Create;\n\n  for I := 0 to Words.Count - 1 do\n  begin\n    Word := Trim(Words[I]);\n    if Word <> '' then\n    begin\n      if Result.IndexOfName(Word) = -1 then\n        Result.Values[Word] := '1'\n      else\n        Result.Values[Word] := IntToStr(StrToInt(Result.Values[Word]) + 1);\n    end;\n  end;\n  Words.Free;\nend;\n\nvar\n  Frequency: TStringList;\n  I: Integer;\nbegin\n  Frequency := WordFrequency('This is a test. This test is simple.');\n  for I := 0 to Frequency.Count - 1 do\n    Writeln(Frequency.Names[I], ': ', Frequency.ValueFromIndex[I]);\n  Frequency.Free;\nend.\n```"
  },
  {
    "task": "Write a function that takes two numbers and returns their greatest common divisor.",
    "code": "```pascal\nprogram GCDProgram;\n\nfunction GCD(a, b: Integer): Integer;\nbegin\n  while b <> 0 do\n  begin\n    GCD := b;\n    b := a mod b;\n    a := GCD;\n  end;\n  GCD := a;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Create a function that returns the number of consonants in a given string.",
    "code": "```pascal\nprogram CountConsonants;\n\nuses\n  SysUtils;\n\nfunction CountConsonants(const s: string): Integer;\nvar\n  i, count: Integer;\n  ch: Char;\nbegin\n  count := 0;\n  for i := 1 to Length(s) do\n  begin\n    ch := UpCase(s[i]);\n    if ch in ['B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', \n              'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z'] then\n      Inc(count);\n  end;\n  Result := count;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Design a function that checks if a number is a perfect square and returns a boolean.",
    "code": "```pascal\nprogram PerfectSquareCheck;\n\nfunction IsPerfectSquare(n: Integer): Boolean;\nvar\n  i: Integer;\nbegin\n  if n < 0 then\n  begin\n    IsPerfectSquare := False;\n    Exit;\n  end;\n  i := 0;\n  while i * i < n do\n    Inc(i);\n  IsPerfectSquare := (i * i = n);\nend;\n\nbegin\n  { Example usage }\n  WriteLn(IsPerfectSquare(16));  { Output: TRUE }\n  WriteLn(IsPerfectSquare(14));  { Output: FALSE }\nend.\n```"
  },
  {
    "task": "Implement a function that takes a list of numbers and returns the mode.",
    "code": "```pascal\nprogram ModeFunction;\n\nuses\n  SysUtils, Math;\n\ntype\n  TIntArray = array of Integer;\n\nfunction Mode(numbers: TIntArray): Integer;\nvar\n  countMap: array of record\n    Value: Integer;\n    Count: Integer;\n  end;\n  i, j, maxCount, modeIndex: Integer;\n  found: Boolean;\nbegin\n  SetLength(countMap, 0);\n  for i := 0 to High(numbers) do\n  begin\n    found := False;\n    for j := 0 to High(countMap) do\n    begin\n      if countMap[j].Value = numbers[i] then\n      begin\n        Inc(countMap[j].Count);\n        found := True;\n        Break;\n      end;\n    end;\n    if not found then\n    begin\n      SetLength(countMap, Length(countMap) + 1);\n      countMap[High(countMap)].Value := numbers[i];\n      countMap[High(countMap)].Count := 1;\n    end;\n  end;\n\n  maxCount := -1;\n  modeIndex := -1;\n  for i := 0 to High(countMap) do\n  begin\n    if countMap[i].Count > maxCount then\n    begin\n      maxCount := countMap[i].Count;\n      modeIndex := i;\n    end;\n  end;\n\n  if modeIndex <> -1 then\n    Result := countMap[modeIndex].Value\n  else\n    Result := -1;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Write a function that accepts a string and returns a new string with characters in reverse order.",
    "code": "```pascal\nprogram ReverseStringFunction;\n\nfunction ReverseString(s: string): string;\nvar\n  i: Integer;\n  reversed: string;\nbegin\n  reversed := '';\n  for i := Length(s) downto 1 do\n    reversed := reversed + s[i];\n  ReverseString := reversed;\nend;\n\nvar\n  original, reversed: string;\nbegin\n  original := 'example';\n  reversed := ReverseString(original);\n  WriteLn('Reversed: ', reversed);\nend.\n```"
  },
  {
    "task": "Create a function that returns the sum of all even numbers in a list.",
    "code": "```pascal\nprogram SumEvenNumbers;\n\nfunction SumOfEvenNumbers(numbers: array of Integer): Integer;\nvar\n  i, sum: Integer;\nbegin\n  sum := 0;\n  for i := Low(numbers) to High(numbers) do\n  begin\n    if numbers[i] mod 2 = 0 then\n      sum := sum + numbers[i];\n  end;\n  SumOfEvenNumbers := sum;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Develop a function that receives two lists and returns their union.",
    "code": "```pascal\nprogram UnionOfLists;\n\ntype\n  TIntArray = array of Integer;\n\nfunction UnionOfArrays(A, B: TIntArray): TIntArray;\nvar\n  UnionSet: TIntArray;\n  i, j, k: Integer;\n  Exists: Boolean;\nbegin\n  SetLength(UnionSet, Length(A) + Length(B));\n  k := 0;\n\n  for i := 0 to High(A) do\n  begin\n    UnionSet[k] := A[i];\n    Inc(k);\n  end;\n\n  for i := 0 to High(B) do\n  begin\n    Exists := False;\n    for j := 0 to High(A) do\n    begin\n      if B[i] = A[j] then\n      begin\n        Exists := True;\n        Break;\n      end;\n    end;\n    if not Exists then\n    begin\n      UnionSet[k] := B[i];\n      Inc(k);\n    end;\n  end;\n\n  SetLength(UnionSet, k);\n  Result := UnionSet;\nend;\n\nvar\n  List1, List2, ResultList: TIntArray;\n  i: Integer;\nbegin\n  List1 := TIntArray.Create(1, 2, 3, 4);\n  List2 := TIntArray.Create(3, 4, 5, 6);\n  ResultList := UnionOfArrays(List1, List2);\n\n  for i := 0 to High(ResultList) do\n  begin\n    Write(ResultList[i], ' ');\n  end;\nend.\n```"
  },
  {
    "task": "Implement a function that takes a string and returns the number of unique characters.",
    "code": "```pascal\nprogram UniqueCharacters;\n\nuses sysutils;\n\nfunction CountUniqueCharacters(str: string): Integer;\nvar\n  charSet: set of char;\n  i: Integer;\nbegin\n  charSet := [];\n  for i := 1 to Length(str) do\n    charSet := charSet + [str[i]];\n  CountUniqueCharacters := Length(charSet);\nend;\n\nvar\n  input: string;\n  result: Integer;\nbegin\n  input := 'example string';\n  result := CountUniqueCharacters(input);\n  WriteLn('Number of unique characters: ', result);\nend.\n```"
  },
  {
    "task": "Write a function that returns the cube of a given number.",
    "code": "```pascal\nprogram CubeFunction;\n\nfunction Cube(x: Real): Real;\nbegin\n  Cube := x * x * x;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Create a function that calculates the power of a number given a base and exponent and returns the result.",
    "code": "```pascal\nprogram PowerFunction;\n\nfunction Power(base: Real; exponent: Integer): Real;\nvar\n  result: Real;\n  i: Integer;\nbegin\n  result := 1.0;\n  for i := 1 to exponent do\n    result := result * base;\n  Power := result;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Design a function that accepts a URL and returns its domain name.",
    "code": "```pascal\nprogram GetDomainName;\n\nuses\n  SysUtils, StrUtils;\n\nfunction ExtractDomain(const URL: string): string;\nvar\n  StartPos, EndPos: Integer;\n  Domain: string;\nbegin\n  StartPos := Pos('://', URL);\n  if StartPos > 0 then\n    StartPos := StartPos + 3\n  else\n    StartPos := 1;\n\n  EndPos := PosEx('/', URL, StartPos);\n  if EndPos > 0 then\n    Domain := Copy(URL, StartPos, EndPos - StartPos)\n  else\n    Domain := Copy(URL, StartPos, Length(URL) - StartPos + 1);\n\n  Result := Domain;\nend;\n\nvar\n  URL, Domain: string;\nbegin\n  URL := 'http://www.example.com/path';\n  Domain := ExtractDomain(URL);\n  WriteLn('Domain: ', Domain);\nend.\n```"
  },
  {
    "task": "Implement a function that takes a sentence and returns it with each letter shifted by one in the alphabet.",
    "code": "```pascal\nprogram ShiftSentence;\n\nfunction ShiftChar(c: Char): Char;\nbegin\n  if c in ['a'..'y'] then\n    ShiftChar := Chr(Ord(c) + 1)\n  else if c = 'z' then\n    ShiftChar := 'a'\n  else if c in ['A'..'Y'] then\n    ShiftChar := Chr(Ord(c) + 1)\n  else if c = 'Z' then\n    ShiftChar := 'A'\n  else\n    ShiftChar := c;\nend;\n\nfunction ShiftSentence(sentence: String): String;\nvar\n  i: Integer;\nbegin\n  for i := 1 to Length(sentence) do\n    sentence[i] := ShiftChar(sentence[i]);\n  ShiftSentence := sentence;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Write a function that checks if a list is sorted and returns a boolean.",
    "code": "```pascal\nprogram CheckSorted;\n\ntype\n  TIntArray = array of Integer;\n\nfunction IsSorted(arr: TIntArray): Boolean;\nvar\n  i: Integer;\nbegin\n  for i := 0 to High(arr) - 1 do\n  begin\n    if arr[i] > arr[i + 1] then\n    begin\n      IsSorted := False;\n      Exit;\n    end;\n  end;\n  IsSorted := True;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Create a function that returns the longest increasing subsequence in a list of numbers.",
    "code": "```pascal\nprogram LongestIncreasingSubsequence;\n\ntype\n  TIntArray = array of Integer;\n\nfunction LongestIncreasingSubsequence(arr: TIntArray): TIntArray;\nvar\n  lis, prev: array of Integer;\n  i, j, maxIndex, maxLength: Integer;\nbegin\n  SetLength(lis, Length(arr));\n  SetLength(prev, Length(arr));\n  \n  if Length(arr) = 0 then\n  begin\n    SetLength(Result, 0);\n    Exit;\n  end;\n\n  for i := 0 to High(arr) do\n  begin\n    lis[i] := 1;\n    prev[i] := -1;\n  end;\n\n  maxLength := 1;\n  maxIndex := 0;\n\n  for i := 1 to High(arr) do\n  begin\n    for j := 0 to i - 1 do\n    begin\n      if (arr[i] > arr[j]) and (lis[i] < lis[j] + 1) then\n      begin\n        lis[i] := lis[j] + 1;\n        prev[i] := j;\n      end;\n    end;\n    if lis[i] > maxLength then\n    begin\n      maxLength := lis[i];\n      maxIndex := i;\n    end;\n  end;\n\n  SetLength(Result, maxLength);\n  i := maxLength - 1;\n  while maxIndex <> -1 do\n  begin\n    Result[i] := arr[maxIndex];\n    maxIndex := prev[maxIndex];\n    Dec(i);\n  end;\nend;\n\nvar\n  numbers, longestSubsequence: TIntArray;\n  i: Integer;\nbegin\n  numbers := TIntArray.Create(10, 22, 9, 33, 21, 50, 41, 60, 80);\n  longestSubsequence := LongestIncreasingSubsequence(numbers);\n  for i := 0 to High(longestSubsequence) do\n    Write(longestSubsequence[i], ' ');\n  WriteLn;\nend.\n```"
  },
  {
    "task": "Develop a function that calculates and returns the compound interest for given principal, rate, and time.",
    "code": "```pascal\nprogram CompoundInterest;\n\nfunction CalculateCompoundInterest(principal: Real; rate: Real; time: Integer): Real;\nbegin\n    CalculateCompoundInterest := principal * Power(1 + rate, time) - principal;\nend;\n\nbegin\n    { Example usage }\n    WriteLn(CalculateCompoundInterest(1000, 0.05, 5):0:2);\nend.\n```"
  },
  {
    "task": "Implement a function that accepts two strings and returns their longest common substring.",
    "code": "```pascal\nprogram LongestCommonSubstring;\n\nuses\n  SysUtils;\n\nfunction LongestCommonSubstr(s1, s2: string): string;\nvar\n  len1, len2, maxLen, endIndex: Integer;\n  i, j, currentLen: Integer;\n  table: array of array of Integer;\nbegin\n  len1 := Length(s1);\n  len2 := Length(s2);\n  SetLength(table, len1 + 1, len2 + 1);\n  maxLen := 0;\n  endIndex := 0;\n\n  for i := 1 to len1 do\n    for j := 1 to len2 do\n    begin\n      if s1[i] = s2[j] then\n      begin\n        table[i][j] := table[i - 1][j - 1] + 1;\n        if table[i][j] > maxLen then\n        begin\n          maxLen := table[i][j];\n          endIndex := i;\n        end;\n      end\n      else\n        table[i][j] := 0;\n    end;\n\n  LongestCommonSubstr := Copy(s1, endIndex - maxLen + 1, maxLen);\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Write a function that takes a number and returns true if it is a palindrome.",
    "code": "```pascal\nprogram PalindromeCheck;\n\nfunction IsPalindrome(num: Integer): Boolean;\nvar\n  original, reversed, remainder: Integer;\nbegin\n  original := num;\n  reversed := 0;\n  \n  while num <> 0 do\n  begin\n    remainder := num mod 10;\n    reversed := reversed * 10 + remainder;\n    num := num div 10;\n  end;\n  \n  IsPalindrome := (original = reversed);\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Create a function that returns the average length of words in a given sentence.",
    "code": "```pascal\nprogram AverageWordLength;\n\nuses SysUtils;\n\nfunction AverageLength(sentence: string): Real;\nvar\n  words: TStringArray;\n  totalLength, i: Integer;\nbegin\n  words := sentence.Split([' ']);\n  totalLength := 0;\n  for i := 0 to High(words) do\n    totalLength := totalLength + Length(words[i]);\n  if Length(words) > 0 then\n    AverageLength := totalLength / Length(words)\n  else\n    AverageLength := 0;\nend;\n\nvar\n  sentence: string;\n  avgLength: Real;\nbegin\n  sentence := 'This is a sample sentence';\n  avgLength := AverageLength(sentence);\n  WriteLn('Average word length: ', avgLength:0:2);\nend.\n```"
  },
  {
    "task": "Design a function that checks if a string contains only digits and returns a boolean.",
    "code": "```pascal\nprogram CheckStringDigits;\n\nfunction IsOnlyDigits(s: string): Boolean;\nvar\n  i: Integer;\nbegin\n  for i := 1 to Length(s) do\n  begin\n    if not (s[i] in ['0'..'9']) then\n    begin\n      IsOnlyDigits := False;\n      Exit;\n    end;\n  end;\n  IsOnlyDigits := True;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Implement a function that receives a list of tuples and returns a list of the first elements.",
    "code": "```pascal\nprogram FirstElementsFunction;\n\ntype\n  TTuple = record\n    First: Integer;\n    Second: Integer;\n  end;\n\n  TTupleArray = array of TTuple;\n  TIntArray = array of Integer;\n\nfunction GetFirstElements(Tuples: TTupleArray): TIntArray;\nvar\n  i: Integer;\nbegin\n  SetLength(Result, Length(Tuples));\n  for i := 0 to High(Tuples) do\n    Result[i] := Tuples[i].First;\nend;\n\nvar\n  Tuples: TTupleArray;\n  FirstElements: TIntArray;\n  i: Integer;\nbegin\n  SetLength(Tuples, 3);\n  Tuples[0].First := 1; Tuples[0].Second := 10;\n  Tuples[1].First := 2; Tuples[1].Second := 20;\n  Tuples[2].First := 3; Tuples[2].Second := 30;\n\n  FirstElements := GetFirstElements(Tuples);\n\n  for i := 0 to High(FirstElements) do\n    WriteLn(FirstElements[i]);\nend.\n```"
  },
  {
    "task": "Write a function that takes a year and returns the Chinese zodiac sign for that year.",
    "code": "```pascal\nprogram ChineseZodiac;\n\nfunction GetChineseZodiac(year: Integer): String;\nconst\n  ZodiacSigns: array[0..11] of String = (\n    'Monkey', 'Rooster', 'Dog', 'Pig', 'Rat', 'Ox', 'Tiger', 'Rabbit', 'Dragon', 'Snake', 'Horse', 'Goat'\n  );\nbegin\n  GetChineseZodiac := ZodiacSigns[year mod 12];\nend;\n\nvar\n  year: Integer;\n  zodiacSign: String;\nbegin\n  // Example usage\n  year := 2024;\n  zodiacSign := GetChineseZodiac(year);\n  WriteLn('The Chinese Zodiac sign for the year ', year, ' is ', zodiacSign);\nend.\n```"
  },
  {
    "task": "Create a function that returns the number of trailing zeros in a factorial of a given number.",
    "code": "```pascal\nprogram TrailingZeros;\n\nfunction TrailingZerosInFactorial(n: Integer): Integer;\nvar\n  count, i: Integer;\nbegin\n  count := 0;\n  i := 5;\n  while n div i > 0 do\n  begin\n    count := count + (n div i);\n    i := i * 5;\n  end;\n  TrailingZerosInFactorial := count;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Develop a function that accepts a list and returns a new list with elements multiplied by their index.",
    "code": "```pascal\nprogram MultiplyByIndex;\n\ntype\n  TIntArray = array of Integer;\n\nfunction MultiplyElementsByIndex(const arr: TIntArray): TIntArray;\nvar\n  i: Integer;\nbegin\n  SetLength(Result, Length(arr));\n  for i := Low(arr) to High(arr) do\n    Result[i] := arr[i] * i;\nend;\n\nvar\n  InputArray, OutputArray: TIntArray;\n  i: Integer;\nbegin\n  InputArray := [2, 4, 6, 8, 10];\n  OutputArray := MultiplyElementsByIndex(InputArray);\n\n  for i := Low(OutputArray) to High(OutputArray) do\n    WriteLn('Element ', i, ': ', OutputArray[i]);\nend.\n```"
  },
  {
    "task": "Implement a function that receives a string and returns a dictionary of word lengths.",
    "code": "```pascal\nprogram WordLengths;\n\nuses\n  SysUtils, Classes, Generics.Collections;\n\nfunction WordLengthsDict(input: string): TDictionary<string, Integer>;\nvar\n  Words: TStringList;\n  Word: string;\nbegin\n  Words := TStringList.Create;\n  Result := TDictionary<string, Integer>.Create;\n  try\n    Words.Delimiter := ' ';\n    Words.DelimitedText := input;\n    for Word in Words do\n      Result.Add(Word, Length(Word));\n  finally\n    Words.Free;\n  end;\nend;\n\nvar\n  Dict: TDictionary<string, Integer>;\n  Key: string;\nbegin\n  Dict := WordLengthsDict('This is a test string');\n  try\n    for Key in Dict.Keys do\n      Writeln(Key, ': ', Dict[Key]);\n  finally\n    Dict.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Write a function that takes a list of integers and returns a list of numbers that are divisible by 3.",
    "code": "```pascal\nprogram DivisibleByThree;\n\ntype\n  TIntArray = array of Integer;\n\nfunction FilterDivisibleByThree(numbers: TIntArray): TIntArray;\nvar\n  i, count: Integer;\n  resultArray: TIntArray;\nbegin\n  count := 0;\n  SetLength(resultArray, Length(numbers));\n  for i := 0 to High(numbers) do\n  begin\n    if (numbers[i] mod 3 = 0) then\n    begin\n      resultArray[count] := numbers[i];\n      Inc(count);\n    end;\n  end;\n  SetLength(resultArray, count);\n  FilterDivisibleByThree := resultArray;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Create a function that returns the result of a quadratic equation given its coefficients.",
    "code": "```pascal\nprogram QuadraticEquation;\n\nfunction QuadraticResult(a, b, c, x: Real): Real;\nbegin\n  QuadraticResult := a * x * x + b * x + c;\nend;\n\nvar\n  a, b, c, x, result: Real;\nbegin\n  a := 1.0;  // Example coefficient for x^2\n  b := 2.0;  // Example coefficient for x\n  c := 1.0;  // Example constant term\n  x := 3.0;  // Example value for x\n\n  result := QuadraticResult(a, b, c, x);\n  WriteLn('The result of the quadratic equation is: ', result:0:2);\nend.\n```"
  },
  {
    "task": "Design a function that checks if two lists have any elements in common and returns a boolean.",
    "code": "```pascal\nprogram CheckCommonElements;\n\ntype\n  TIntArray = array of Integer;\n\nfunction HaveCommonElements(list1, list2: TIntArray): Boolean;\nvar\n  i, j: Integer;\nbegin\n  for i := 0 to High(list1) do\n    for j := 0 to High(list2) do\n      if list1[i] = list2[j] then\n        Exit(True);\n  Exit(False);\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Implement a function that accepts a list and returns the sum of its elements using recursion.",
    "code": "```pascal\nprogram SumOfElements;\n\nfunction SumList(arr: array of Integer; n: Integer): Integer;\nbegin\n    if n = 0 then\n        SumList := 0\n    else\n        SumList := arr[n - 1] + SumList(arr, n - 1);\nend;\n\nvar\n    numbers: array of Integer;\n    total, n, i: Integer;\nbegin\n    n := 5; { Example size of the list }\n    SetLength(numbers, n);\n    \n    { Example values }\n    numbers[0] := 1;\n    numbers[1] := 2;\n    numbers[2] := 3;\n    numbers[3] := 4;\n    numbers[4] := 5;\n    \n    total := SumList(numbers, n);\n    WriteLn('Sum of elements: ', total);\nend.\n```"
  },
  {
    "task": "Write a function that takes a list of numbers and returns the variance.",
    "code": "```pascal\nprogram VarianceFunction;\n\ntype\n  TNumberArray = array of Real;\n\nfunction CalculateVariance(numbers: TNumberArray): Real;\nvar\n  sum, mean, variance: Real;\n  i: Integer;\n  n: Integer;\nbegin\n  n := Length(numbers);\n  if n = 0 then\n  begin\n    CalculateVariance := 0;\n    Exit;\n  end;\n\n  sum := 0;\n  for i := 0 to n - 1 do\n    sum := sum + numbers[i];\n\n  mean := sum / n;\n\n  variance := 0;\n  for i := 0 to n - 1 do\n    variance := variance + Sqr(numbers[i] - mean);\n\n  CalculateVariance := variance / n;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Create a function that returns the ASCII value of a given character.",
    "code": "```pascal\nprogram GetAsciiValue;\n\nfunction GetAscii(c: Char): Integer;\nbegin\n  GetAscii := Ord(c);\nend;\n\nvar\n  ch: Char;\n  asciiValue: Integer;\nbegin\n  ch := 'A';\n  asciiValue := GetAscii(ch);\n  WriteLn('The ASCII value of ', ch, ' is ', asciiValue);\nend.\n```"
  },
  {
    "task": "Develop a function that takes a number and returns the number of bits required for its binary representation.",
    "code": "```pascal\nprogram BitCount;\n\nfunction NumberOfBits(n: Integer): Integer;\nbegin\n    if n = 0 then\n        NumberOfBits := 1\n    else\n    begin\n        NumberOfBits := 0;\n        while n <> 0 do\n        begin\n            n := n shr 1;\n            NumberOfBits := NumberOfBits + 1;\n        end;\n    end;\nend;\n\nbegin\nend.\n```"
  }
]