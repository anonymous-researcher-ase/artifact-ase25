[
  {
    "task": "Create a new instance of a class that represents a book, with properties for title, author, and ISBN number.",
    "code": "```pascal\nprogram BookInstanceCreation;\n\ntype\n  TBook = class\n  private\n    FTitle: string;\n    FAuthor: string;\n    FISBN: string;\n  public\n    constructor Create(ATitle, AAuthor, AISBN: string);\n    property Title: string read FTitle write FTitle;\n    property Author: string read FAuthor write FAuthor;\n    property ISBN: string read FISBN write FISBN;\n  end;\n\nconstructor TBook.Create(ATitle, AAuthor, AISBN: string);\nbegin\n  FTitle := ATitle;\n  FAuthor := AAuthor;\n  FISBN := AISBN;\nend;\n\nvar\n  MyBook: TBook;\n\nbegin\n  MyBook := TBook.Create('The Great Gatsby', 'F. Scott Fitzgerald', '978-0743273565');\n  // Further code to utilize MyBook object\nend.\n```"
  },
  {
    "task": "Instantiate an object of a class named Car, and set its make, model, and year attributes.",
    "code": "```pascal\nprogram CarExample;\n\ntype\n  TCar = class\n  private\n    FMake: string;\n    FModel: string;\n    FYear: Integer;\n  public\n    constructor Create(aMake, aModel: string; aYear: Integer);\n    procedure DisplayInfo;\n  end;\n\nconstructor TCar.Create(aMake, aModel: string; aYear: Integer);\nbegin\n  FMake := aMake;\n  FModel := aModel;\n  FYear := aYear;\nend;\n\nprocedure TCar.DisplayInfo;\nbegin\n  WriteLn('Make: ', FMake);\n  WriteLn('Model: ', FModel);\n  WriteLn('Year: ', FYear);\nend;\n\nvar\n  MyCar: TCar;\n\nbegin\n  MyCar := TCar.Create('Toyota', 'Corolla', 2020);\n  MyCar.DisplayInfo;\n  MyCar.Free;\nend.\n```"
  },
  {
    "task": "Develop a class to represent a rectangle, then create an object with specific width and height.",
    "code": "```pascal\nprogram RectangleProgram;\n\ntype\n  TRectangle = class\n  private\n    FWidth: Double;\n    FHeight: Double;\n  public\n    constructor Create(AWidth, AHeight: Double);\n    function GetWidth: Double;\n    function GetHeight: Double;\n  end;\n\nconstructor TRectangle.Create(AWidth, AHeight: Double);\nbegin\n  FWidth := AWidth;\n  FHeight := AHeight;\nend;\n\nfunction TRectangle.GetWidth: Double;\nbegin\n  Result := FWidth;\nend;\n\nfunction TRectangle.GetHeight: Double;\nbegin\n  Result := FHeight;\nend;\n\nvar\n  MyRectangle: TRectangle;\n\nbegin\n  MyRectangle := TRectangle.Create(10.0, 5.0);\n  // Example usage:\n  // WriteLn('Width: ', MyRectangle.GetWidth);\n  // WriteLn('Height: ', MyRectangle.GetHeight);\n  MyRectangle.Free;\nend.\n```"
  },
  {
    "task": "Construct an object of a class Person, initializing it with a name and age.",
    "code": "```pascal\nprogram CreatePersonObject;\n\ntype\n  TPerson = class\n  private\n    FName: string;\n    FAge: Integer;\n  public\n    constructor Create(Name: string; Age: Integer);\n    procedure Display;\n  end;\n\nconstructor TPerson.Create(Name: string; Age: Integer);\nbegin\n  FName := Name;\n  FAge := Age;\nend;\n\nprocedure TPerson.Display;\nbegin\n  WriteLn('Name: ', FName);\n  WriteLn('Age: ', FAge);\nend;\n\nvar\n  Person: TPerson;\n\nbegin\n  Person := TPerson.Create('John Doe', 30);\n  Person.Display;\n  Person.Free;\nend.\n```"
  },
  {
    "task": "Create a new object from a class called Circle, initializing it with a radius value.",
    "code": "```pascal\nprogram CircleCreation;\n\ntype\n  Circle = class\n    private\n      Radius: Real;\n    public\n      constructor Create(aRadius: Real);\n  end;\n\nconstructor Circle.Create(aRadius: Real);\nbegin\n  Radius := aRadius;\nend;\n\nvar\n  MyCircle: Circle;\nbegin\n  MyCircle := Circle.Create(5.0);\nend.\n```"
  },
  {
    "task": "Instantiate a class named Student with properties for name, student ID, and GPA.",
    "code": "```pascal\nprogram StudentClassDemo;\n\ntype\n  Student = class\n  private\n    FName: string;\n    FStudentID: string;\n    FGPA: real;\n  public\n    constructor Create(Name: string; StudentID: string; GPA: real);\n    procedure Display;\n  end;\n\nconstructor Student.Create(Name: string; StudentID: string; GPA: real);\nbegin\n  FName := Name;\n  FStudentID := StudentID;\n  FGPA := GPA;\nend;\n\nprocedure Student.Display;\nbegin\n  writeln('Name: ', FName);\n  writeln('Student ID: ', FStudentID);\n  writeln('GPA: ', FGPA:0:2);\nend;\n\nvar\n  studentInstance: Student;\n\nbegin\n  studentInstance := Student.Create('John Doe', '123456', 3.75);\n  studentInstance.Display;\n  studentInstance.Free;\nend.\n```"
  },
  {
    "task": "Design a class for a smartphone, then create an instance with specific brand, model, and storage capacity.",
    "code": "```pascal\nprogram SmartphoneDemo;\n\ntype\n  TSmartphone = class\n  private\n    FBrand: string;\n    FModel: string;\n    FStorageCapacity: integer;\n  public\n    constructor Create(Brand, Model: string; StorageCapacity: integer);\n    procedure DisplayInfo;\n  end;\n\nconstructor TSmartphone.Create(Brand, Model: string; StorageCapacity: integer);\nbegin\n  FBrand := Brand;\n  FModel := Model;\n  FStorageCapacity := StorageCapacity;\nend;\n\nprocedure TSmartphone.DisplayInfo;\nbegin\n  writeln('Brand: ', FBrand);\n  writeln('Model: ', FModel);\n  writeln('Storage Capacity: ', FStorageCapacity, 'GB');\nend;\n\nvar\n  MySmartphone: TSmartphone;\n\nbegin\n  MySmartphone := TSmartphone.Create('Apple', 'iPhone 14', 256);\n  MySmartphone.DisplayInfo;\n  MySmartphone.Free;\nend.\n```"
  },
  {
    "task": "Create an object of a class named BankAccount, initializing it with an account number and balance.",
    "code": "```pascal\nprogram CreateBankAccount;\n\ntype\n  BankAccount = object\n    accountNumber: string;\n    balance: real;\n    constructor Init(aAccountNumber: string; aBalance: real);\n  end;\n\nconstructor BankAccount.Init(aAccountNumber: string; aBalance: real);\nbegin\n  accountNumber := aAccountNumber;\n  balance := aBalance;\nend;\n\nvar\n  myAccount: BankAccount;\n\nbegin\n  myAccount.Init('123456789', 1000.0);\nend.\n```"
  },
  {
    "task": "Write a class for a movie, then instantiate it with a title, director, and release year.",
    "code": "```pascal\nprogram MovieExample;\n\ntype\n  TMovie = class\n  private\n    FTitle: string;\n    FDirector: string;\n    FReleaseYear: Integer;\n  public\n    constructor Create(ATitle, ADirector: string; AReleaseYear: Integer);\n    function GetTitle: string;\n    function GetDirector: string;\n    function GetReleaseYear: Integer;\n  end;\n\nconstructor TMovie.Create(ATitle, ADirector: string; AReleaseYear: Integer);\nbegin\n  FTitle := ATitle;\n  FDirector := ADirector;\n  FReleaseYear := AReleaseYear;\nend;\n\nfunction TMovie.GetTitle: string;\nbegin\n  Result := FTitle;\nend;\n\nfunction TMovie.GetDirector: string;\nbegin\n  Result := FDirector;\nend;\n\nfunction TMovie.GetReleaseYear: Integer;\nbegin\n  Result := FReleaseYear;\nend;\n\nvar\n  MyMovie: TMovie;\n\nbegin\n  MyMovie := TMovie.Create('Inception', 'Christopher Nolan', 2010);\n  { Now you can use MyMovie object as needed }\nend.\n```"
  },
  {
    "task": "Define a class representing a point in 2D space and create an object with x and y coordinates.",
    "code": "```pascal\nprogram Point2DExample;\n\ntype\n  TPoint2D = class\n  private\n    FX: Double;\n    FY: Double;\n  public\n    constructor Create(AX, AY: Double);\n    function GetX: Double;\n    function GetY: Double;\n  end;\n\nconstructor TPoint2D.Create(AX, AY: Double);\nbegin\n  FX := AX;\n  FY := AY;\nend;\n\nfunction TPoint2D.GetX: Double;\nbegin\n  Result := FX;\nend;\n\nfunction TPoint2D.GetY: Double;\nbegin\n  Result := FY;\nend;\n\nvar\n  Point: TPoint2D;\n\nbegin\n  Point := TPoint2D.Create(3.0, 4.0);\n  Writeln('Point created at (', Point.GetX:0:2, ', ', Point.GetY:0:2, ')');\nend.\n```"
  },
  {
    "task": "Create an instance of a class called Computer with attributes for CPU, RAM, and storage.",
    "code": "```pascal\nprogram ObjectCreationExample;\n\ntype\n  TComputer = class\n  private\n    FCPU: string;\n    FRAM: Integer;\n    FStorage: Integer;\n  public\n    constructor Create(aCPU: string; aRAM, aStorage: Integer);\n    procedure DisplaySpecs;\n  end;\n\nconstructor TComputer.Create(aCPU: string; aRAM, aStorage: Integer);\nbegin\n  FCPU := aCPU;\n  FRAM := aRAM;\n  FStorage := aStorage;\nend;\n\nprocedure TComputer.DisplaySpecs;\nbegin\n  Writeln('CPU: ', FCPU);\n  Writeln('RAM: ', FRAM, ' GB');\n  Writeln('Storage: ', FStorage, ' GB');\nend;\n\nvar\n  MyComputer: TComputer;\n\nbegin\n  MyComputer := TComputer.Create('Intel i7', 16, 512);\n  MyComputer.DisplaySpecs;\n  MyComputer.Free;\nend.\n```"
  },
  {
    "task": "Design a class for a Song with properties for title, artist, and duration, and instantiate it.",
    "code": "```pascal\nprogram SongApp;\n\ntype\n  TSong = class\n  private\n    FTitle: string;\n    FArtist: string;\n    FDuration: Integer; // Duration in seconds\n  public\n    constructor Create(ATitle, AArtist: string; ADuration: Integer);\n    function GetTitle: string;\n    function GetArtist: string;\n    function GetDuration: Integer;\n  end;\n\nconstructor TSong.Create(ATitle, AArtist: string; ADuration: Integer);\nbegin\n  FTitle := ATitle;\n  FArtist := AArtist;\n  FDuration := ADuration;\nend;\n\nfunction TSong.GetTitle: string;\nbegin\n  Result := FTitle;\nend;\n\nfunction TSong.GetArtist: string;\nbegin\n  Result := FArtist;\nend;\n\nfunction TSong.GetDuration: Integer;\nbegin\n  Result := FDuration;\nend;\n\nvar\n  MySong: TSong;\n\nbegin\n  MySong := TSong.Create('Imagine', 'John Lennon', 183);\n  // Further operations with MySong can be added here\nend.\n```"
  },
  {
    "task": "Create a new instance of a class named Pet, initializing it with type, breed, and age.",
    "code": "```pascal\nprogram PetCreation;\n\ntype\n  Pet = class\n  private\n    FType: string;\n    FBreed: string;\n    FAge: Integer;\n  public\n    constructor Create(AType, ABreed: string; AAge: Integer);\n  end;\n\nconstructor Pet.Create(AType, ABreed: string; AAge: Integer);\nbegin\n  FType := AType;\n  FBreed := ABreed;\n  FAge := AAge;\nend;\n\nvar\n  MyPet: Pet;\n\nbegin\n  MyPet := Pet.Create('Dog', 'Beagle', 3);\nend.\n```"
  },
  {
    "task": "Instantiate an object of a class named House with attributes for address, number of bedrooms, and price.",
    "code": "```pascal\nprogram HouseDemo;\n\ntype\n  House = class\n  private\n    Address: string;\n    NumberOfBedrooms: Integer;\n    Price: Real;\n  public\n    constructor Create(aAddress: string; aNumberOfBedrooms: Integer; aPrice: Real);\n  end;\n\nconstructor House.Create(aAddress: string; aNumberOfBedrooms: Integer; aPrice: Real);\nbegin\n  Address := aAddress;\n  NumberOfBedrooms := aNumberOfBedrooms;\n  Price := aPrice;\nend;\n\nvar\n  MyHouse: House;\n\nbegin\n  MyHouse := House.Create('123 Main St', 3, 250000.00);\nend.\n```"
  },
  {
    "task": "Develop a class for a Camera, then create an object with resolution and zoom level attributes.",
    "code": "```pascal\nprogram CameraApp;\n\ntype\n  TCamera = class\n  private\n    FResolution: Integer;\n    FZoomLevel: Integer;\n  public\n    constructor Create(AResolution, AZoomLevel: Integer);\n    procedure ShowDetails;\n  end;\n\nconstructor TCamera.Create(AResolution, AZoomLevel: Integer);\nbegin\n  FResolution := AResolution;\n  FZoomLevel := AZoomLevel;\nend;\n\nprocedure TCamera.ShowDetails;\nbegin\n  WriteLn('Resolution: ', FResolution, ' MP');\n  WriteLn('Zoom Level: ', FZoomLevel, 'x');\nend;\n\nvar\n  MyCamera: TCamera;\n\nbegin\n  MyCamera := TCamera.Create(12, 5);\n  MyCamera.ShowDetails;\nend.\n```"
  },
  {
    "task": "Construct an object from a class named Bicycle with properties for brand, type, and gear count.",
    "code": "```pascal\nprogram BicycleObjectCreation;\n\ntype\n  TBicycle = class\n  private\n    FBrand: string;\n    FType: string;\n    FGearCount: Integer;\n  public\n    constructor Create(ABrand, AType: string; AGearCount: Integer);\n    procedure DisplayBicycleInfo;\n  end;\n\nconstructor TBicycle.Create(ABrand, AType: string; AGearCount: Integer);\nbegin\n  FBrand := ABrand;\n  FType := AType;\n  FGearCount := AGearCount;\nend;\n\nprocedure TBicycle.DisplayBicycleInfo;\nbegin\n  WriteLn('Brand: ', FBrand);\n  WriteLn('Type: ', FType);\n  WriteLn('Gear Count: ', FGearCount);\nend;\n\nvar\n  MyBicycle: TBicycle;\nbegin\n  MyBicycle := TBicycle.Create('Giant', 'Mountain', 21);\n  MyBicycle.DisplayBicycleInfo;\n  MyBicycle.Free;\nend.\n```"
  },
  {
    "task": "Create a class for a book author with name and nationality, then instantiate it.",
    "code": "```pascal\nprogram AuthorCreation;\n\ntype\n  TAuthor = class\n  private\n    FName: string;\n    FNationality: string;\n  public\n    constructor Create(Name, Nationality: string);\n    property Name: string read FName;\n    property Nationality: string read FNationality;\n  end;\n\nconstructor TAuthor.Create(Name, Nationality: string);\nbegin\n  FName := Name;\n  FNationality := Nationality;\nend;\n\nvar\n  Author: TAuthor;\n\nbegin\n  Author := TAuthor.Create('John Doe', 'American');\n  // Use the Author object as needed\n  Author.Free;\nend.\n```"
  },
  {
    "task": "Define a class representing a video game with attributes for title, genre, and platform, and create an object.",
    "code": "```pascal\nprogram VideoGameObjectCreation;\n\ntype\n  TVideoGame = class\n  private\n    FTitle: string;\n    FGenre: string;\n    FPlatform: string;\n  public\n    constructor Create(const ATitle, AGenre, APlatform: string);\n    function GetTitle: string;\n    function GetGenre: string;\n    function GetPlatform: string;\n  end;\n\nconstructor TVideoGame.Create(const ATitle, AGenre, APlatform: string);\nbegin\n  FTitle := ATitle;\n  FGenre := AGenre;\n  FPlatform := APlatform;\nend;\n\nfunction TVideoGame.GetTitle: string;\nbegin\n  Result := FTitle;\nend;\n\nfunction TVideoGame.GetGenre: string;\nbegin\n  Result := FGenre;\nend;\n\nfunction TVideoGame.GetPlatform: string;\nbegin\n  Result := FPlatform;\nend;\n\nvar\n  Game: TVideoGame;\n\nbegin\n  Game := TVideoGame.Create('Example Game', 'Action', 'PC');\n  // Example usage of the object\n  // WriteLn('Title: ', Game.GetTitle);\n  // WriteLn('Genre: ', Game.GetGenre);\n  // WriteLn('Platform: ', Game.GetPlatform);\nend.\n```"
  },
  {
    "task": "Instantiate a class named Plane with properties for airline, model, and capacity.",
    "code": "```pascal\nprogram PlaneCreation;\n\ntype\n  TPlane = class\n  private\n    FAirline: string;\n    FModel: string;\n    FCapacity: Integer;\n  public\n    constructor Create(Airline: string; Model: string; Capacity: Integer);\n    property Airline: string read FAirline;\n    property Model: string read FModel;\n    property Capacity: Integer read FCapacity;\n  end;\n\nconstructor TPlane.Create(Airline: string; Model: string; Capacity: Integer);\nbegin\n  FAirline := Airline;\n  FModel := Model;\n  FCapacity := Capacity;\nend;\n\nvar\n  MyPlane: TPlane;\n\nbegin\n  MyPlane := TPlane.Create('AirlineName', 'ModelType', 180);\n  // Use MyPlane object as needed\nend.\n```"
  },
  {
    "task": "Create a new object of a class called Lamp, initializing it with color and brightness level.",
    "code": "```pascal\nprogram LampCreation;\n\ntype\n  Lamp = class\n  private\n    FColor: string;\n    FBrightness: integer;\n  public\n    constructor Create(aColor: string; aBrightness: integer);\n    procedure Display;\n  end;\n\nconstructor Lamp.Create(aColor: string; aBrightness: integer);\nbegin\n  FColor := aColor;\n  FBrightness := aBrightness;\nend;\n\nprocedure Lamp.Display;\nbegin\n  writeln('Lamp Color: ', FColor);\n  writeln('Brightness Level: ', FBrightness);\nend;\n\nvar\n  MyLamp: Lamp;\n\nbegin\n  MyLamp := Lamp.Create('White', 75);\n  MyLamp.Display;\nend.\n```"
  },
  {
    "task": "Design a class for a TV show with properties for title, season, and episode count, then instantiate it.",
    "code": "```pascal\nprogram TVShowExample;\n\ntype\n  TTVShow = class\n  private\n    FTitle: string;\n    FSeason: Integer;\n    FEpisodeCount: Integer;\n  public\n    constructor Create(ATitle: string; ASeason: Integer; AEpisodeCount: Integer);\n    property Title: string read FTitle write FTitle;\n    property Season: Integer read FSeason write FSeason;\n    property EpisodeCount: Integer read FEpisodeCount write FEpisodeCount;\n  end;\n\nconstructor TTVShow.Create(ATitle: string; ASeason: Integer; AEpisodeCount: Integer);\nbegin\n  FTitle := ATitle;\n  FSeason := ASeason;\n  FEpisodeCount := AEpisodeCount;\nend;\n\nvar\n  MyShow: TTVShow;\n\nbegin\n  MyShow := TTVShow.Create('Example Show', 1, 10);\n  // Use MyShow as needed\nend.\n```"
  },
  {
    "task": "Instantiate an object of a class named Garden with attributes for size and number of plants.",
    "code": "```pascal\nprogram GardenExample;\n\ntype\n  Garden = class\n  private\n    FSize: Integer;\n    FNumberOfPlants: Integer;\n  public\n    constructor Create(size: Integer; numberOfPlants: Integer);\n    function GetSize: Integer;\n    function GetNumberOfPlants: Integer;\n  end;\n\nconstructor Garden.Create(size: Integer; numberOfPlants: Integer);\nbegin\n  FSize := size;\n  FNumberOfPlants := numberOfPlants;\nend;\n\nfunction Garden.GetSize: Integer;\nbegin\n  Result := FSize;\nend;\n\nfunction Garden.GetNumberOfPlants: Integer;\nbegin\n  Result := FNumberOfPlants;\nend;\n\nvar\n  MyGarden: Garden;\n\nbegin\n  MyGarden := Garden.Create(100, 20);\n  // MyGarden instance is created with size 100 and numberOfPlants 20\nend.\n```"
  },
  {
    "task": "Develop a class for a Train, then create an object with properties for type and number of carriages.",
    "code": "```pascal\nprogram TrainExample;\n\ntype\n  TTrain = class\n  private\n    FType: string;\n    FNumberOfCarriages: Integer;\n  public\n    constructor Create(AType: string; ANumberOfCarriages: Integer);\n    procedure DisplayInfo;\n  end;\n\nconstructor TTrain.Create(AType: string; ANumberOfCarriages: Integer);\nbegin\n  FType := AType;\n  FNumberOfCarriages := ANumberOfCarriages;\nend;\n\nprocedure TTrain.DisplayInfo;\nbegin\n  WriteLn('Train Type: ', FType);\n  WriteLn('Number of Carriages: ', FNumberOfCarriages);\nend;\n\nvar\n  MyTrain: TTrain;\n\nbegin\n  MyTrain := TTrain.Create('Freight', 25);\n  MyTrain.DisplayInfo;\n  MyTrain.Free;\nend.\n```"
  },
  {
    "task": "Define a class representing a planet with attributes for name, size, and distance from the sun, and create an object.",
    "code": "```pascal\nprogram PlanetExample;\n\ntype\n  TPlanet = class\n  private\n    FName: string;\n    FSize: real;\n    FDistanceFromSun: real;\n  public\n    constructor Create(AName: string; ASize, ADistanceFromSun: real);\n    procedure DisplayInfo;\n  end;\n\nconstructor TPlanet.Create(AName: string; ASize, ADistanceFromSun: real);\nbegin\n  FName := AName;\n  FSize := ASize;\n  FDistanceFromSun := ADistanceFromSun;\nend;\n\nprocedure TPlanet.DisplayInfo;\nbegin\n  writeln('Planet Name: ', FName);\n  writeln('Size: ', FSize:0:2);\n  writeln('Distance from Sun: ', FDistanceFromSun:0:2);\nend;\n\nvar\n  Earth: TPlanet;\n\nbegin\n  Earth := TPlanet.Create('Earth', 12742, 149.6);\n  Earth.DisplayInfo;\nend.\n```"
  },
  {
    "task": "Create an instance of a class named Fridge with properties for brand and capacity.",
    "code": "```pascal\nprogram FridgeExample;\n\ntype\n  TFridge = class\n    private\n      FBrand: string;\n      FCapacity: Integer;\n    public\n      constructor Create(ABrand: string; ACapacity: Integer);\n      property Brand: string read FBrand;\n      property Capacity: Integer read FCapacity;\n  end;\n\nconstructor TFridge.Create(ABrand: string; ACapacity: Integer);\nbegin\n  FBrand := ABrand;\n  FCapacity := ACapacity;\nend;\n\nvar\n  MyFridge: TFridge;\n\nbegin\n  MyFridge := TFridge.Create('Samsung', 300);\n  { Use MyFridge as needed }\nend.\n```"
  },
  {
    "task": "Design a class for a Restaurant with attributes for name, cuisine type, and location, then create an instance.",
    "code": "```pascal\nprogram RestaurantExample;\n\ntype\n  Restaurant = class\n    private\n      FName: string;\n      FCuisineType: string;\n      FLocation: string;\n    public\n      constructor Create(AName, ACuisineType, ALocation: string);\n      function GetName: string;\n      function GetCuisineType: string;\n      function GetLocation: string;\n  end;\n\nconstructor Restaurant.Create(AName, ACuisineType, ALocation: string);\nbegin\n  FName := AName;\n  FCuisineType := ACuisineType;\n  FLocation := ALocation;\nend;\n\nfunction Restaurant.GetName: string;\nbegin\n  Result := FName;\nend;\n\nfunction Restaurant.GetCuisineType: string;\nbegin\n  Result := FCuisineType;\nend;\n\nfunction Restaurant.GetLocation: string;\nbegin\n  Result := FLocation;\nend;\n\nvar\n  myRestaurant: Restaurant;\n\nbegin\n  myRestaurant := Restaurant.Create('Gourmet Place', 'French', 'Paris');\nend.\n```"
  },
  {
    "task": "Create a new object from a class named Bookstore, initializing it with name and number of books.",
    "code": "```pascal\nprogram CreateBookstoreObject;\n\ntype\n  Bookstore = class\n    Name: string;\n    NumberOfBooks: Integer;\n    constructor Create(aName: string; aNumberOfBooks: Integer);\n  end;\n\nconstructor Bookstore.Create(aName: string; aNumberOfBooks: Integer);\nbegin\n  Name := aName;\n  NumberOfBooks := aNumberOfBooks;\nend;\n\nvar\n  MyBookstore: Bookstore;\n\nbegin\n  MyBookstore := Bookstore.Create('My Bookstore', 1000);\nend.\n```"
  },
  {
    "task": "Instantiate a class named Library with properties for total books and number of members.",
    "code": "```pascal\nprogram ObjectCreationExample;\n\ntype\n  Library = class\n  private\n    FTotalBooks: Integer;\n    FNumberOfMembers: Integer;\n  public\n    constructor Create(ATotalBooks, ANumberOfMembers: Integer);\n    property TotalBooks: Integer read FTotalBooks write FTotalBooks;\n    property NumberOfMembers: Integer read FNumberOfMembers write FNumberOfMembers;\n  end;\n\nconstructor Library.Create(ATotalBooks, ANumberOfMembers: Integer);\nbegin\n  FTotalBooks := ATotalBooks;\n  FNumberOfMembers := ANumberOfMembers;\nend;\n\nvar\n  MyLibrary: Library;\n\nbegin\n  MyLibrary := Library.Create(1000, 300);\nend.\n```"
  },
  {
    "task": "Write a class for a Beverage with properties for name, type, and volume, and instantiate it.",
    "code": "```pascal\nprogram BeverageProgram;\n\ntype\n  TBeverage = class\n  private\n    FName: string;\n    FType: string;\n    FVolume: real;\n  public\n    constructor Create(AName, AType: string; AVolume: real);\n    function GetName: string;\n    function GetType: string;\n    function GetVolume: real;\n  end;\n\nconstructor TBeverage.Create(AName, AType: string; AVolume: real);\nbegin\n  FName := AName;\n  FType := AType;\n  FVolume := AVolume;\nend;\n\nfunction TBeverage.GetName: string;\nbegin\n  Result := FName;\nend;\n\nfunction TBeverage.GetType: string;\nbegin\n  Result := FType;\nend;\n\nfunction TBeverage.GetVolume: real;\nbegin\n  Result := FVolume;\nend;\n\nvar\n  MyBeverage: TBeverage;\n\nbegin\n  MyBeverage := TBeverage.Create('Orange Juice', 'Juice', 250.0);\nend.\n```"
  },
  {
    "task": "Create an object of a class named User with attributes for username, email, and password.",
    "code": "```pascal\nprogram CreateUserObject;\n\ntype\n  User = class\n  private\n    FUsername: string;\n    FEmail: string;\n    FPassword: string;\n  public\n    constructor Create(AUsername, AEmail, APassword: string);\n  end;\n\nconstructor User.Create(AUsername, AEmail, APassword: string);\nbegin\n  FUsername := AUsername;\n  FEmail := AEmail;\n  FPassword := APassword;\nend;\n\nvar\n  NewUser: User;\n\nbegin\n  NewUser := User.Create('exampleUser', 'example@example.com', 'securePassword');\nend.\n```"
  },
  {
    "task": "Define a class for a Laptop with properties for brand, processor, and RAM, then instantiate it.",
    "code": "```pascal\nprogram LaptopClassExample;\n\ntype\n  TLaptop = class\n    private\n      FBrand: string;\n      FProcessor: string;\n      FRAM: integer;\n    public\n      constructor Create(ABrand: string; AProcessor: string; ARAM: integer);\n      function GetBrand: string;\n      function GetProcessor: string;\n      function GetRAM: integer;\n  end;\n\nconstructor TLaptop.Create(ABrand: string; AProcessor: string; ARAM: integer);\nbegin\n  FBrand := ABrand;\n  FProcessor := AProcessor;\n  FRAM := ARAM;\nend;\n\nfunction TLaptop.GetBrand: string;\nbegin\n  Result := FBrand;\nend;\n\nfunction TLaptop.GetProcessor: string;\nbegin\n  Result := FProcessor;\nend;\n\nfunction TLaptop.GetRAM: integer;\nbegin\n  Result := FRAM;\nend;\n\nvar\n  MyLaptop: TLaptop;\nbegin\n  MyLaptop := TLaptop.Create('Dell', 'Intel i7', 16);\n  Writeln('Brand: ', MyLaptop.GetBrand);\n  Writeln('Processor: ', MyLaptop.GetProcessor);\n  Writeln('RAM: ', MyLaptop.GetRAM);\n  MyLaptop.Free;\nend.\n```"
  },
  {
    "task": "Construct an object from a class named Mountain with attributes for name and elevation.",
    "code": "```pascal\nprogram MountainObjectCreation;\n\ntype\n  Mountain = class\n  private\n    FName: string;\n    FElevation: Integer;\n  public\n    constructor Create(AName: string; AElevation: Integer);\n    function GetName: string;\n    function GetElevation: Integer;\n  end;\n\nconstructor Mountain.Create(AName: string; AElevation: Integer);\nbegin\n  FName := AName;\n  FElevation := AElevation;\nend;\n\nfunction Mountain.GetName: string;\nbegin\n  Result := FName;\nend;\n\nfunction Mountain.GetElevation: Integer;\nbegin\n  Result := FElevation;\nend;\n\nvar\n  myMountain: Mountain;\n\nbegin\n  myMountain := Mountain.Create('Everest', 8848);\n  // You can use myMountain.GetName and myMountain.GetElevation to access the attributes\nend.\n```"
  },
  {
    "task": "Create an instance of a class called Weather with properties for temperature, humidity, and condition.",
    "code": "```pascal\nprogram WeatherApp;\n\ntype\n  Weather = class\n  private\n    FTemperature: Real;\n    FHumidity: Real;\n    FCondition: String;\n  public\n    constructor Create(ATemperature: Real; AHumidity: Real; ACondition: String);\n    property Temperature: Real read FTemperature write FTemperature;\n    property Humidity: Real read FHumidity write FHumidity;\n    property Condition: String read FCondition write FCondition;\n  end;\n\nconstructor Weather.Create(ATemperature: Real; AHumidity: Real; ACondition: String);\nbegin\n  FTemperature := ATemperature;\n  FHumidity := AHumidity;\n  FCondition := ACondition;\nend;\n\nvar\n  TodayWeather: Weather;\n\nbegin\n  TodayWeather := Weather.Create(25.0, 60.0, 'Sunny');\n  // Use TodayWeather instance as needed\nend.\n```"
  },
  {
    "task": "Design a class for a Classroom with attributes for room number and capacity, then create an instance.",
    "code": "```pascal\nprogram ClassroomExample;\n\ntype\n  TClassroom = class\n  private\n    FRoomNumber: Integer;\n    FCapacity: Integer;\n  public\n    constructor Create(RoomNumber, Capacity: Integer);\n    property RoomNumber: Integer read FRoomNumber write FRoomNumber;\n    property Capacity: Integer read FCapacity write FCapacity;\n  end;\n\nconstructor TClassroom.Create(RoomNumber, Capacity: Integer);\nbegin\n  FRoomNumber := RoomNumber;\n  FCapacity := Capacity;\nend;\n\nvar\n  ClassroomInstance: TClassroom;\n\nbegin\n  ClassroomInstance := TClassroom.Create(101, 30);\n  { Use ClassroomInstance as needed }\nend.\n```"
  },
  {
    "task": "Instantiate an object of a class named Zoo with properties for name and number of animals.",
    "code": "```pascal\nprogram ZooObjectCreation;\n\ntype\n  TZoo = class\n  private\n    FName: string;\n    FNumberOfAnimals: Integer;\n  public\n    constructor Create(AName: string; ANumberOfAnimals: Integer);\n    property Name: string read FName write FName;\n    property NumberOfAnimals: Integer read FNumberOfAnimals write FNumberOfAnimals;\n  end;\n\nconstructor TZoo.Create(AName: string; ANumberOfAnimals: Integer);\nbegin\n  FName := AName;\n  FNumberOfAnimals := ANumberOfAnimals;\nend;\n\nvar\n  MyZoo: TZoo;\n\nbegin\n  MyZoo := TZoo.Create('Safari Park', 150);\n  // Use the object as needed\n  MyZoo.Free;\nend.\n```"
  },
  {
    "task": "Develop a class for an Album with properties for name, artist, and release date, then instantiate it.",
    "code": "```pascal\nprogram AlbumExample;\n\ntype\n  TAlbum = class\n  private\n    FName: string;\n    FArtist: string;\n    FReleaseDate: TDateTime;\n  public\n    constructor Create(Name, Artist: string; ReleaseDate: TDateTime);\n    property Name: string read FName write FName;\n    property Artist: string read FArtist write FArtist;\n    property ReleaseDate: TDateTime read FReleaseDate write FReleaseDate;\n  end;\n\nconstructor TAlbum.Create(Name, Artist: string; ReleaseDate: TDateTime);\nbegin\n  FName := Name;\n  FArtist := Artist;\n  FReleaseDate := ReleaseDate;\nend;\n\nvar\n  MyAlbum: TAlbum;\n\nbegin\n  MyAlbum := TAlbum.Create('Thriller', 'Michael Jackson', EncodeDate(1982, 11, 30));\n  // The album object is created and can be used here\nend.\n```"
  },
  {
    "task": "Create a new object from a class named Hotel, initializing it with name, location, and star rating.",
    "code": "```pascal\nprogram HotelObjectCreation;\n\ntype\n  Hotel = class\n  private\n    fName: string;\n    fLocation: string;\n    fStarRating: integer;\n  public\n    constructor Create(aName, aLocation: string; aStarRating: integer);\n  end;\n\nconstructor Hotel.Create(aName, aLocation: string; aStarRating: integer);\nbegin\n  fName := aName;\n  fLocation := aLocation;\n  fStarRating := aStarRating;\nend;\n\nvar\n  MyHotel: Hotel;\n\nbegin\n  MyHotel := Hotel.Create('Grand Plaza', 'New York', 5);\nend.\n```"
  },
  {
    "task": "Write a class for a Recipe with properties for name, ingredients, and cooking time, and instantiate it.",
    "code": "```pascal\nprogram RecipeExample;\n\ntype\n  TStringArray = array of string;\n  \n  TRecipe = class\n  private\n    FName: string;\n    FIngredients: TStringArray;\n    FCookingTime: Integer;\n  public\n    constructor Create(AName: string; AIngredients: TStringArray; ACookingTime: Integer);\n    function GetName: string;\n    function GetIngredients: TStringArray;\n    function GetCookingTime: Integer;\n  end;\n\nconstructor TRecipe.Create(AName: string; AIngredients: TStringArray; ACookingTime: Integer);\nbegin\n  FName := AName;\n  FIngredients := AIngredients;\n  FCookingTime := ACookingTime;\nend;\n\nfunction TRecipe.GetName: string;\nbegin\n  Result := FName;\nend;\n\nfunction TRecipe.GetIngredients: TStringArray;\nbegin\n  Result := FIngredients;\nend;\n\nfunction TRecipe.GetCookingTime: Integer;\nbegin\n  Result := FCookingTime;\nend;\n\nvar\n  MyRecipe: TRecipe;\n  Ingredients: TStringArray;\nbegin\n  SetLength(Ingredients, 3);\n  Ingredients[0] := 'Flour';\n  Ingredients[1] := 'Sugar';\n  Ingredients[2] := 'Eggs';\n\n  MyRecipe := TRecipe.Create('Cake', Ingredients, 45);\nend.\n```"
  },
  {
    "task": "Define a class representing a Conference with attributes for name, date, and number of attendees, and create an object.",
    "code": "```pascal\nprogram ConferenceApp;\n\ntype\n  TConference = class\n  private\n    FName: string;\n    FDate: TDateTime;\n    FAttendees: Integer;\n  public\n    constructor Create(AName: string; ADate: TDateTime; AAttendees: Integer);\n  end;\n\nconstructor TConference.Create(AName: string; ADate: TDateTime; AAttendees: Integer);\nbegin\n  FName := AName;\n  FDate := ADate;\n  FAttendees := AAttendees;\nend;\n\nvar\n  Conference: TConference;\n\nbegin\n  Conference := TConference.Create('Tech Conference', Now, 150);\nend.\n```"
  },
  {
    "task": "Create an instance of a class called Park with properties for name, location, and area.",
    "code": "```pascal\nprogram ParkCreation;\n\ntype\n  Park = class\n  private\n    FName: string;\n    FLocation: string;\n    FArea: real;\n  public\n    constructor Create(Name, Location: string; Area: real);\n    procedure DisplayInfo;\n  end;\n\nconstructor Park.Create(Name, Location: string; Area: real);\nbegin\n  FName := Name;\n  FLocation := Location;\n  FArea := Area;\nend;\n\nprocedure Park.DisplayInfo;\nbegin\n  writeln('Park Name: ', FName);\n  writeln('Location: ', FLocation);\n  writeln('Area: ', FArea:0:2, ' sq km');\nend;\n\nvar\n  myPark: Park;\n\nbegin\n  myPark := Park.Create('Central Park', 'New York', 3.41);\n  myPark.DisplayInfo;\nend.\n```"
  },
  {
    "task": "Design a class for a Bicycle with attributes for brand, type, and wheel size, then create an instance.",
    "code": "```pascal\nprogram BicycleProgram;\n\ntype\n  TBicycle = class\n    private\n      FBrand: string;\n      FType: string;\n      FWheelSize: Integer;\n    public\n      constructor Create(ABrand, AType: string; AWheelSize: Integer);\n      procedure DisplayBicycleInfo;\n  end;\n\nconstructor TBicycle.Create(ABrand, AType: string; AWheelSize: Integer);\nbegin\n  FBrand := ABrand;\n  FType := AType;\n  FWheelSize := AWheelSize;\nend;\n\nprocedure TBicycle.DisplayBicycleInfo;\nbegin\n  WriteLn('Brand: ', FBrand);\n  WriteLn('Type: ', FType);\n  WriteLn('Wheel Size: ', FWheelSize);\nend;\n\nvar\n  MyBicycle: TBicycle;\n\nbegin\n  MyBicycle := TBicycle.Create('Giant', 'Mountain', 27);\n  MyBicycle.DisplayBicycleInfo;\n  MyBicycle.Free;\nend.\n```"
  },
  {
    "task": "Instantiate an object of a class named Festival with properties for name, location, and duration.",
    "code": "```pascal\nprogram FestivalObjectCreation;\n\ntype\n  Festival = class\n    private\n      FName: string;\n      FLocation: string;\n      FDuration: Integer;\n    public\n      constructor Create(AName, ALocation: string; ADuration: Integer);\n      procedure ShowDetails;\n  end;\n\nconstructor Festival.Create(AName, ALocation: string; ADuration: Integer);\nbegin\n  FName := AName;\n  FLocation := ALocation;\n  FDuration := ADuration;\nend;\n\nprocedure Festival.ShowDetails;\nbegin\n  WriteLn('Festival Name: ', FName);\n  WriteLn('Location: ', FLocation);\n  WriteLn('Duration: ', FDuration, ' days');\nend;\n\nvar\n  MyFestival: Festival;\n\nbegin\n  MyFestival := Festival.Create('Music Fest', 'New York', 3);\n  MyFestival.ShowDetails;\n  MyFestival.Free;\nend.\n```"
  },
  {
    "task": "Develop a class for a Ship with properties for name, capacity, and type, then instantiate it.",
    "code": "```pascal\nprogram ShipExample;\n\ntype\n  TShip = class\n  private\n    FName: string;\n    FCapacity: Integer;\n    FType: string;\n  public\n    constructor Create(AName: string; ACapacity: Integer; AType: string);\n    property Name: string read FName write FName;\n    property Capacity: Integer read FCapacity write FCapacity;\n    property ShipType: string read FType write FType;\n  end;\n\nconstructor TShip.Create(AName: string; ACapacity: Integer; AType: string);\nbegin\n  FName := AName;\n  FCapacity := ACapacity;\n  FType := AType;\nend;\n\nvar\n  Ship: TShip;\n\nbegin\n  Ship := TShip.Create('Titanic', 3000, 'Cruise');\n  \n  { Here you can use the Ship object, for example, accessing its properties:\n    Writeln('Name: ', Ship.Name);\n    Writeln('Capacity: ', Ship.Capacity);\n    Writeln('Type: ', Ship.ShipType);\n  }\n  \n  Ship.Free;\nend.\n```"
  },
  {
    "task": "Create an object of a class named Currency with attributes for name, symbol, and exchange rate.",
    "code": "```pascal\nprogram CurrencyObjectCreation;\n\ntype\n  TCurrency = class\n    private\n      FName: string;\n      FSymbol: string;\n      FExchangeRate: real;\n    public\n      constructor Create(AName: string; ASymbol: string; AExchangeRate: real);\n      function GetName: string;\n      function GetSymbol: string;\n      function GetExchangeRate: real;\n  end;\n\nconstructor TCurrency.Create(AName: string; ASymbol: string; AExchangeRate: real);\nbegin\n  FName := AName;\n  FSymbol := ASymbol;\n  FExchangeRate := AExchangeRate;\nend;\n\nfunction TCurrency.GetName: string;\nbegin\n  Result := FName;\nend;\n\nfunction TCurrency.GetSymbol: string;\nbegin\n  Result := FSymbol;\nend;\n\nfunction TCurrency.GetExchangeRate: real;\nbegin\n  Result := FExchangeRate;\nend;\n\nvar\n  CurrencyObj: TCurrency;\n\nbegin\n  CurrencyObj := TCurrency.Create('US Dollar', '$', 1.0);\n  // Use CurrencyObj as needed\nend.\n```"
  },
  {
    "task": "Define a class for a Gadget with properties for name, brand, and functionality, then instantiate it.",
    "code": "```pascal\nprogram GadgetCreation;\n\ntype\n  TGadget = class\n  private\n    FName: string;\n    FBrand: string;\n    FFunctionality: string;\n  public\n    constructor Create(AName, ABrand, AFunctionality: string);\n    function GetDescription: string;\n  end;\n\nconstructor TGadget.Create(AName, ABrand, AFunctionality: string);\nbegin\n  FName := AName;\n  FBrand := ABrand;\n  FFunctionality := AFunctionality;\nend;\n\nfunction TGadget.GetDescription: string;\nbegin\n  Result := 'Name: ' + FName + ', Brand: ' + FBrand + ', Functionality: ' + FFunctionality;\nend;\n\nvar\n  MyGadget: TGadget;\nbegin\n  MyGadget := TGadget.Create('Smartphone', 'TechBrand', 'Communication');\n  WriteLn(MyGadget.GetDescription);\n  MyGadget.Free;\nend.\n```"
  },
  {
    "task": "Construct an object from a class named Bridge with attributes for name, length, and location.",
    "code": "```pascal\nprogram BridgeCreation;\n\ntype\n  TBridge = class\n  private\n    FName: string;\n    FLength: Integer;\n    FLocation: string;\n  public\n    constructor Create(AName: string; ALength: Integer; ALocation: string);\n    procedure DisplayInfo;\n  end;\n\nconstructor TBridge.Create(AName: string; ALength: Integer; ALocation: string);\nbegin\n  FName := AName;\n  FLength := ALength;\n  FLocation := ALocation;\nend;\n\nprocedure TBridge.DisplayInfo;\nbegin\n  WriteLn('Bridge Name: ', FName);\n  WriteLn('Length: ', FLength);\n  WriteLn('Location: ', FLocation);\nend;\n\nvar\n  Bridge: TBridge;\n\nbegin\n  Bridge := TBridge.Create('Golden Gate', 2737, 'San Francisco');\n  Bridge.DisplayInfo;\n  Bridge.Free;\nend.\n```"
  },
  {
    "task": "Create an instance of a class called Forest with properties for name, area, and tree species.",
    "code": "```pascal\nprogram ForestExample;\n\ntype\n  TForest = class\n  private\n    FName: string;\n    FArea: Double;\n    FTreeSpecies: string;\n  public\n    constructor Create(Name: string; Area: Double; TreeSpecies: string);\n    procedure DisplayInfo;\n  end;\n\nconstructor TForest.Create(Name: string; Area: Double; TreeSpecies: string);\nbegin\n  FName := Name;\n  FArea := Area;\n  FTreeSpecies := TreeSpecies;\nend;\n\nprocedure TForest.DisplayInfo;\nbegin\n  WriteLn('Forest Name: ', FName);\n  WriteLn('Area: ', FArea:0:2, ' hectares');\n  WriteLn('Tree Species: ', FTreeSpecies);\nend;\n\nvar\n  MyForest: TForest;\n\nbegin\n  MyForest := TForest.Create('Amazon', 5500.0, 'Rainforest Trees');\n  MyForest.DisplayInfo;\n  MyForest.Free;\nend.\n```"
  },
  {
    "task": "Design a class for a Sculpture with attributes for title, artist, and material, then create an instance.",
    "code": "```pascal\nprogram SculptureProgram;\n\ntype\n  TSculpture = class\n  private\n    FTitle: string;\n    FArtist: string;\n    FMaterial: string;\n  public\n    constructor Create(ATitle, AArtist, AMaterial: string);\n    property Title: string read FTitle;\n    property Artist: string read FArtist;\n    property Material: string read FMaterial;\n  end;\n\nconstructor TSculpture.Create(ATitle, AArtist, AMaterial: string);\nbegin\n  FTitle := ATitle;\n  FArtist := AArtist;\n  FMaterial := AMaterial;\nend;\n\nvar\n  MySculpture: TSculpture;\nbegin\n  MySculpture := TSculpture.Create('The Thinker', 'Auguste Rodin', 'Bronze');\nend.\n```"
  },
  {
    "task": "Instantiate an object of a class named Aquarium with properties for name and number of tanks.",
    "code": "```pascal\nprogram CreateAquariumObject;\n\ntype\n  Aquarium = class\n  private\n    Name: string;\n    NumberOfTanks: Integer;\n  public\n    constructor Create(aName: string; aNumberOfTanks: Integer);\n  end;\n\nconstructor Aquarium.Create(aName: string; aNumberOfTanks: Integer);\nbegin\n  Name := aName;\n  NumberOfTanks := aNumberOfTanks;\nend;\n\nvar\n  myAquarium: Aquarium;\n\nbegin\n  myAquarium := Aquarium.Create('Ocean World', 5);\nend.\n```"
  },
  {
    "task": "Develop a class for a Play with properties for title, playwright, and genre, then instantiate it.",
    "code": "```pascal\nprogram PlayClassExample;\n\ntype\n  TPlay = class\n  private\n    FTitle: string;\n    FPlaywright: string;\n    FGenre: string;\n  public\n    constructor Create(ATitle, APlaywright, AGenre: string);\n    function GetTitle: string;\n    function GetPlaywright: string;\n    function GetGenre: string;\n  end;\n\nconstructor TPlay.Create(ATitle, APlaywright, AGenre: string);\nbegin\n  FTitle := ATitle;\n  FPlaywright := APlaywright;\n  FGenre := AGenre;\nend;\n\nfunction TPlay.GetTitle: string;\nbegin\n  Result := FTitle;\nend;\n\nfunction TPlay.GetPlaywright: string;\nbegin\n  Result := FPlaywright;\nend;\n\nfunction TPlay.GetGenre: string;\nbegin\n  Result := FGenre;\nend;\n\nvar\n  MyPlay: TPlay;\n\nbegin\n  MyPlay := TPlay.Create('Hamlet', 'William Shakespeare', 'Tragedy');\n  // Example of accessing properties\n  WriteLn('Title: ', MyPlay.GetTitle);\n  WriteLn('Playwright: ', MyPlay.GetPlaywright);\n  WriteLn('Genre: ', MyPlay.GetGenre);\n  MyPlay.Free;\nend.\n```"
  },
  {
    "task": "Create a new object from a class named Telescope, initializing it with type and focal length.",
    "code": "```pascal\nprogram CreateTelescopeObject;\n\ntype\n  Telescope = class\n  private\n    FType: string;\n    FFocalLength: Double;\n  public\n    constructor Create(AType: string; AFocalLength: Double);\n    procedure Display;\n  end;\n\nconstructor Telescope.Create(AType: string; AFocalLength: Double);\nbegin\n  FType := AType;\n  FFocalLength := AFocalLength;\nend;\n\nprocedure Telescope.Display;\nbegin\n  WriteLn('Telescope Type: ', FType);\n  WriteLn('Focal Length: ', FFocalLength:0:2);\nend;\n\nvar\n  MyTelescope: Telescope;\n\nbegin\n  MyTelescope := Telescope.Create('Refractor', 900.0);\n  MyTelescope.Display;\nend.\n```"
  },
  {
    "task": "Write a class for a Monument with properties for name, location, and year built, and instantiate it.",
    "code": "```pascal\nprogram MonumentProgram;\n\ntype\n  TMonument = class\n  private\n    FName: string;\n    FLocation: string;\n    FYearBuilt: Integer;\n  public\n    constructor Create(AName, ALocation: string; AYearBuilt: Integer);\n    property Name: string read FName write FName;\n    property Location: string read FLocation write FLocation;\n    property YearBuilt: Integer read FYearBuilt write FYearBuilt;\n  end;\n\nconstructor TMonument.Create(AName, ALocation: string; AYearBuilt: Integer);\nbegin\n  FName := AName;\n  FLocation := ALocation;\n  FYearBuilt := AYearBuilt;\nend;\n\nvar\n  Monument: TMonument;\n\nbegin\n  Monument := TMonument.Create('Eiffel Tower', 'Paris', 1889);\nend.\n```"
  },
  {
    "task": "Define a class representing a Star with attributes for name, size, and distance from Earth, and create an object.",
    "code": "```pascal\nprogram StarClassExample;\n\ntype\n  TStar = class\n  private\n    FName: string;\n    FSize: real;\n    FDistanceFromEarth: real;\n  public\n    constructor Create(AName: string; ASize, ADistanceFromEarth: real);\n    function GetName: string;\n    function GetSize: real;\n    function GetDistanceFromEarth: real;\n  end;\n\nconstructor TStar.Create(AName: string; ASize, ADistanceFromEarth: real);\nbegin\n  FName := AName;\n  FSize := ASize;\n  FDistanceFromEarth := ADistanceFromEarth;\nend;\n\nfunction TStar.GetName: string;\nbegin\n  Result := FName;\nend;\n\nfunction TStar.GetSize: real;\nbegin\n  Result := FSize;\nend;\n\nfunction TStar.GetDistanceFromEarth: real;\nbegin\n  Result := FDistanceFromEarth;\nend;\n\nvar\n  MyStar: TStar;\n\nbegin\n  MyStar := TStar.Create('Sirius', 1.711, 8.6);\n  writeln('Star Created: ', MyStar.GetName);\n  writeln('Size: ', MyStar.GetSize:0:2);\n  writeln('Distance from Earth: ', MyStar.GetDistanceFromEarth:0:1, ' light years');\n  MyStar.Free;\nend.\n```"
  },
  {
    "task": "Create an instance of a class called Festival with properties for name, location, and number of events.",
    "code": "```pascal\nprogram FestivalDemo;\n\ntype\n  Festival = class\n  private\n    FName: string;\n    FLocation: string;\n    FNumberOfEvents: Integer;\n  public\n    constructor Create(Name: string; Location: string; NumberOfEvents: Integer);\n    procedure DisplayInfo;\n  end;\n\nconstructor Festival.Create(Name: string; Location: string; NumberOfEvents: Integer);\nbegin\n  FName := Name;\n  FLocation := Location;\n  FNumberOfEvents := NumberOfEvents;\nend;\n\nprocedure Festival.DisplayInfo;\nbegin\n  WriteLn('Festival Name: ', FName);\n  WriteLn('Location: ', FLocation);\n  WriteLn('Number of Events: ', FNumberOfEvents);\nend;\n\nvar\n  myFestival: Festival;\n\nbegin\n  myFestival := Festival.Create('Music Fest', 'Los Angeles', 25);\n  myFestival.DisplayInfo;\nend.\n```"
  },
  {
    "task": "Design a class for a Clock with attributes for brand, type, and display, then create an instance.",
    "code": "```pascal\nprogram ClockApp;\n\ntype\n  TClock = class\n    private\n      FBrand: string;\n      FType: string;\n      FDisplay: string;\n    public\n      constructor Create(aBrand, aType, aDisplay: string);\n      procedure ShowDetails;\n  end;\n\nconstructor TClock.Create(aBrand, aType, aDisplay: string);\nbegin\n  FBrand := aBrand;\n  FType := aType;\n  FDisplay := aDisplay;\nend;\n\nprocedure TClock.ShowDetails;\nbegin\n  WriteLn('Brand: ', FBrand);\n  WriteLn('Type: ', FType);\n  WriteLn('Display: ', FDisplay);\nend;\n\nvar\n  MyClock: TClock;\n\nbegin\n  MyClock := TClock.Create('Seiko', 'Analog', 'LCD');\n  MyClock.ShowDetails;\n  MyClock.Free;\nend.\n```"
  },
  {
    "task": "Instantiate an object of a class named Stadium with properties for name, capacity, and location.",
    "code": "```pascal\nprogram CreateStadiumObject;\n\ntype\n  Stadium = class\n  private\n    FName: string;\n    FCapacity: Integer;\n    FLocation: string;\n  public\n    constructor Create(AName: string; ACapacity: Integer; ALocation: string);\n    function GetName: string;\n    function GetCapacity: Integer;\n    function GetLocation: string;\n  end;\n\nconstructor Stadium.Create(AName: string; ACapacity: Integer; ALocation: string);\nbegin\n  FName := AName;\n  FCapacity := ACapacity;\n  FLocation := ALocation;\nend;\n\nfunction Stadium.GetName: string;\nbegin\n  Result := FName;\nend;\n\nfunction Stadium.GetCapacity: Integer;\nbegin\n  Result := FCapacity;\nend;\n\nfunction Stadium.GetLocation: string;\nbegin\n  Result := FLocation;\nend;\n\nvar\n  MyStadium: Stadium;\n\nbegin\n  MyStadium := Stadium.Create('National Arena', 55000, 'City Center');\nend.\n```"
  },
  {
    "task": "Develop a class for a Potion with properties for name, effect, and duration, then instantiate it.",
    "code": "```pascal\nprogram PotionProgram;\n\ntype\n  Potion = class\n  private\n    FName: string;\n    FEffect: string;\n    FDuration: integer;\n  public\n    constructor Create(aName, aEffect: string; aDuration: integer);\n    procedure DisplayInfo;\n  end;\n\nconstructor Potion.Create(aName, aEffect: string; aDuration: integer);\nbegin\n  FName := aName;\n  FEffect := aEffect;\n  FDuration := aDuration;\nend;\n\nprocedure Potion.DisplayInfo;\nbegin\n  writeln('Potion Name: ', FName);\n  writeln('Effect: ', FEffect);\n  writeln('Duration: ', FDuration, ' minutes');\nend;\n\nvar\n  myPotion: Potion;\n\nbegin\n  myPotion := Potion.Create('Healing Potion', 'Restores Health', 5);\n  myPotion.DisplayInfo;\nend.\n```"
  },
  {
    "task": "Create an object of a class named Planet with attributes for name, mass, and orbital period.",
    "code": "```pascal\nprogram PlanetObjectCreation;\n\ntype\n  Planet = class\n  private\n    FName: string;\n    FMass: real;\n    FOrbitalPeriod: real;\n  public\n    constructor Create(AName: string; AMass, AOrbitalPeriod: real);\n    // Add methods or properties if needed\n  end;\n\nconstructor Planet.Create(AName: string; AMass, AOrbitalPeriod: real);\nbegin\n  FName := AName;\n  FMass := AMass;\n  FOrbitalPeriod := AOrbitalPeriod;\nend;\n\nvar\n  Earth: Planet;\n\nbegin\n  Earth := Planet.Create('Earth', 5.972E24, 365.25);\n  // Use the Earth object as needed\n  Earth.Free;\nend.\n```"
  },
  {
    "task": "Define a class for a Lighthouse with properties for name, height, and light range, then instantiate it.",
    "code": "```pascal\nprogram LighthouseProgram;\n\ntype\n  TLighthouse = class\n  private\n    FName: string;\n    FHeight: integer;\n    FLightRange: integer;\n  public\n    constructor Create(aName: string; aHeight, aLightRange: integer);\n    property Name: string read FName;\n    property Height: integer read FHeight;\n    property LightRange: integer read FLightRange;\n  end;\n\nconstructor TLighthouse.Create(aName: string; aHeight, aLightRange: integer);\nbegin\n  FName := aName;\n  FHeight := aHeight;\n  FLightRange := aLightRange;\nend;\n\nvar\n  MyLighthouse: TLighthouse;\n\nbegin\n  MyLighthouse := TLighthouse.Create('Beacon Tower', 50, 20);\nend.\n```"
  },
  {
    "task": "Construct an object from a class named Volcano with attributes for name, height, and eruption history.",
    "code": "```pascal\nprogram VolcanoExample;\n\ntype\n  TEruptionHistory = array of string;\n\n  TVolcano = class\n  private\n    FName: string;\n    FHeight: Integer;\n    FEruptionHistory: TEruptionHistory;\n  public\n    constructor Create(AName: string; AHeight: Integer; AEruptionHistory: TEruptionHistory);\n  end;\n\nconstructor TVolcano.Create(AName: string; AHeight: Integer; AEruptionHistory: TEruptionHistory);\nbegin\n  FName := AName;\n  FHeight := AHeight;\n  FEruptionHistory := AEruptionHistory;\nend;\n\nvar\n  MyVolcano: TVolcano;\n  Eruptions: TEruptionHistory;\n\nbegin\n  SetLength(Eruptions, 3);\n  Eruptions[0] := '2020-01-01';\n  Eruptions[1] := '2021-06-15';\n  Eruptions[2] := '2022-03-10';\n\n  MyVolcano := TVolcano.Create('Mount Sample', 2500, Eruptions);\nend.\n```"
  },
  {
    "task": "Create an instance of a class called Sculpture with properties for title, artist, and year created.",
    "code": "```pascal\nprogram SculptureCreation;\n\ntype\n  Sculpture = class\n    private\n      title: string;\n      artist: string;\n      yearCreated: integer;\n    public\n      constructor Create(aTitle, anArtist: string; aYearCreated: integer);\n  end;\n\nconstructor Sculpture.Create(aTitle, anArtist: string; aYearCreated: integer);\nbegin\n  title := aTitle;\n  artist := anArtist;\n  yearCreated := aYearCreated;\nend;\n\nvar\n  mySculpture: Sculpture;\n\nbegin\n  mySculpture := Sculpture.Create('The Thinker', 'Auguste Rodin', 1904);\nend.\n```"
  },
  {
    "task": "Design a class for a Ship with attributes for name, type, and displacement, then create an instance.",
    "code": "```pascal\nprogram ShipCreation;\n\ntype\n  TShip = class\n  private\n    FName: string;\n    FType: string;\n    FDisplacement: real;\n  public\n    constructor Create(AName, AType: string; ADisplacement: real);\n  end;\n\nconstructor TShip.Create(AName, AType: string; ADisplacement: real);\nbegin\n  FName := AName;\n  FType := AType;\n  FDisplacement := ADisplacement;\nend;\n\nvar\n  MyShip: TShip;\n\nbegin\n  MyShip := TShip.Create('Poseidon', 'Cargo', 30000.0);\nend.\n```"
  },
  {
    "task": "Instantiate an object of a class named Opera with properties for title, composer, and act count.",
    "code": "```pascal\nprogram OperaCreation;\n\ntype\n  TOpera = class\n  private\n    FTitle: string;\n    FComposer: string;\n    FActCount: Integer;\n  public\n    constructor Create(ATitle, AComposer: string; AActCount: Integer);\n    property Title: string read FTitle;\n    property Composer: string read FComposer;\n    property ActCount: Integer read FActCount;\n  end;\n\nconstructor TOpera.Create(ATitle, AComposer: string; AActCount: Integer);\nbegin\n  FTitle := ATitle;\n  FComposer := AComposer;\n  FActCount := AActCount;\nend;\n\nvar\n  OperaInstance: TOpera;\n\nbegin\n  OperaInstance := TOpera.Create('La Traviata', 'Giuseppe Verdi', 3);\nend.\n```"
  },
  {
    "task": "Develop a class for a Waterfall with properties for name, height, and flow rate, then instantiate it.",
    "code": "```pascal\nprogram WaterfallDemo;\n\ntype\n  TWaterfall = class\n  private\n    FName: string;\n    FHeight: Double;\n    FFlowRate: Double;\n  public\n    constructor Create(AName: string; AHeight, AFlowRate: Double);\n    procedure DisplayInfo;\n  end;\n\nconstructor TWaterfall.Create(AName: string; AHeight, AFlowRate: Double);\nbegin\n  FName := AName;\n  FHeight := AHeight;\n  FFlowRate := AFlowRate;\nend;\n\nprocedure TWaterfall.DisplayInfo;\nbegin\n  WriteLn('Waterfall Name: ', FName);\n  WriteLn('Height: ', FHeight:0:2, ' meters');\n  WriteLn('Flow Rate: ', FFlowRate:0:2, ' cubic meters per second');\nend;\n\nvar\n  Niagara: TWaterfall;\n\nbegin\n  Niagara := TWaterfall.Create('Niagara Falls', 51.0, 2800.0);\n  Niagara.DisplayInfo;\n  Niagara.Free;\nend.\n```"
  },
  {
    "task": "Create a new object from a class named Castle, initializing it with name, location, and year built.",
    "code": "```pascal\nprogram CastleCreation;\n\ntype\n  TCastle = class\n  private\n    FName: string;\n    FLocation: string;\n    FYearBuilt: Integer;\n  public\n    constructor Create(Name, Location: string; YearBuilt: Integer);\n  end;\n\nconstructor TCastle.Create(Name, Location: string; YearBuilt: Integer);\nbegin\n  FName := Name;\n  FLocation := Location;\n  FYearBuilt := YearBuilt;\nend;\n\nvar\n  MyCastle: TCastle;\n\nbegin\n  MyCastle := TCastle.Create('Fortress of Solitude', 'Antarctica', 1938);\nend.\n```"
  },
  {
    "task": "Write a class for a Cat with properties for name, breed, and color, and instantiate it.",
    "code": "```pascal\nprogram CatExample;\n\ntype\n  TCat = class\n  private\n    FName: string;\n    FBreed: string;\n    FColor: string;\n  public\n    constructor Create(AName, ABreed, AColor: string);\n    property Name: string read FName;\n    property Breed: string read FBreed;\n    property Color: string read FColor;\n  end;\n\nconstructor TCat.Create(AName, ABreed, AColor: string);\nbegin\n  FName := AName;\n  FBreed := ABreed;\n  FColor := AColor;\nend;\n\nvar\n  MyCat: TCat;\n\nbegin\n  MyCat := TCat.Create('Whiskers', 'Siamese', 'Gray');\n  // Use MyCat as needed\nend.\n```"
  },
  {
    "task": "Define a class representing a Spaceship with attributes for name, speed, and crew capacity, and create an object.",
    "code": "```pascal\nprogram SpaceshipProgram;\n\ntype\n  TSpaceship = class\n  private\n    FName: string;\n    FSpeed: Integer;\n    FCrewCapacity: Integer;\n  public\n    constructor Create(Name: string; Speed, CrewCapacity: Integer);\n    procedure DisplayInfo;\n  end;\n\nconstructor TSpaceship.Create(Name: string; Speed, CrewCapacity: Integer);\nbegin\n  FName := Name;\n  FSpeed := Speed;\n  FCrewCapacity := CrewCapacity;\nend;\n\nprocedure TSpaceship.DisplayInfo;\nbegin\n  Writeln('Spaceship Name: ', FName);\n  Writeln('Speed: ', FSpeed, ' km/s');\n  Writeln('Crew Capacity: ', FCrewCapacity);\nend;\n\nvar\n  MySpaceship: TSpaceship;\n\nbegin\n  MySpaceship := TSpaceship.Create('Galactic Cruiser', 15000, 300);\n  MySpaceship.DisplayInfo;\nend.\n```"
  },
  {
    "task": "Create an instance of a class called Robot with properties for name, model, and function.",
    "code": "```pascal\nprogram RobotCreation;\n\ntype\n  TRobot = class\n  private\n    FName: string;\n    FModel: string;\n    FFunction: string;\n  public\n    constructor Create(AName, AModel, AFunction: string);\n    property Name: string read FName write FName;\n    property Model: string read FModel write FModel;\n    property Functionality: string read FFunction write FFunction;\n  end;\n\nconstructor TRobot.Create(AName, AModel, AFunction: string);\nbegin\n  FName := AName;\n  FModel := AModel;\n  FFunction := AFunction;\nend;\n\nvar\n  MyRobot: TRobot;\n\nbegin\n  MyRobot := TRobot.Create('Robo1', 'RX100', 'Welding');\nend.\n```"
  },
  {
    "task": "Design a class for a Computer Program with attributes for name, language, and lines of code, then create an instance.",
    "code": "```pascal\nprogram ComputerProgramDemo;\n\ntype\n  TComputerProgram = class\n  private\n    FName: string;\n    FLanguage: string;\n    FLinesOfCode: Integer;\n  public\n    constructor Create(Name, Language: string; LinesOfCode: Integer);\n    procedure DisplayInfo;\n  end;\n\nconstructor TComputerProgram.Create(Name, Language: string; LinesOfCode: Integer);\nbegin\n  FName := Name;\n  FLanguage := Language;\n  FLinesOfCode := LinesOfCode;\nend;\n\nprocedure TComputerProgram.DisplayInfo;\nbegin\n  writeln('Program Name: ', FName);\n  writeln('Programming Language: ', FLanguage);\n  writeln('Lines of Code: ', FLinesOfCode);\nend;\n\nvar\n  ProgramInstance: TComputerProgram;\n\nbegin\n  ProgramInstance := TComputerProgram.Create('Example Program', 'Pascal', 200);\n  ProgramInstance.DisplayInfo;\n  ProgramInstance.Free;\nend.\n```"
  },
  {
    "task": "Instantiate an object of a class named Mountain with properties for name, range, and prominence.",
    "code": "```pascal\nprogram MountainExample;\n\ntype\n  Mountain = class\n    private\n      FName: string;\n      FRange: string;\n      FProminence: Double;\n    public\n      constructor Create(AName, ARange: string; AProminence: Double);\n      procedure ShowDetails;\n  end;\n\nconstructor Mountain.Create(AName, ARange: string; AProminence: Double);\nbegin\n  FName := AName;\n  FRange := ARange;\n  FProminence := AProminence;\nend;\n\nprocedure Mountain.ShowDetails;\nbegin\n  Writeln('Name: ', FName);\n  Writeln('Range: ', FRange);\n  Writeln('Prominence: ', FProminence:0:2);\nend;\n\nvar\n  Everest: Mountain;\n\nbegin\n  Everest := Mountain.Create('Everest', 'Himalayas', 8848.86);\n  Everest.ShowDetails;\n  Everest.Free;\nend.\n```"
  },
  {
    "task": "Develop a class for a Painting with properties for title, artist, and dimensions, then instantiate it.",
    "code": "```pascal\nprogram PaintingProgram;\n\ntype\n  Painting = class\n  private\n    FTitle: string;\n    FArtist: string;\n    FDimensions: string;\n  public\n    constructor Create(ATitle, AArtist, ADimensions: string);\n    function GetTitle: string;\n    function GetArtist: string;\n    function GetDimensions: string;\n  end;\n\nconstructor Painting.Create(ATitle, AArtist, ADimensions: string);\nbegin\n  FTitle := ATitle;\n  FArtist := AArtist;\n  FDimensions := ADimensions;\nend;\n\nfunction Painting.GetTitle: string;\nbegin\n  Result := FTitle;\nend;\n\nfunction Painting.GetArtist: string;\nbegin\n  Result := FArtist;\nend;\n\nfunction Painting.GetDimensions: string;\nbegin\n  Result := FDimensions;\nend;\n\nvar\n  MyPainting: Painting;\n\nbegin\n  MyPainting := Painting.Create('Starry Night', 'Vincent van Gogh', '73.7 cm \u00d7 92.1 cm');\n  \n  // further code to use MyPainting\nend.\n```"
  },
  {
    "task": "Create an object of a class named Symphony with attributes for title, composer, and movement count.",
    "code": "```pascal\nprogram SymphonyCreation;\n\ntype\n  Symphony = class\n  private\n    FTitle: string;\n    FComposer: string;\n    FMovementCount: Integer;\n  public\n    constructor Create(ATitle, AComposer: string; AMovementCount: Integer);\n    property Title: string read FTitle;\n    property Composer: string read FComposer;\n    property MovementCount: Integer read FMovementCount;\n  end;\n\nconstructor Symphony.Create(ATitle, AComposer: string; AMovementCount: Integer);\nbegin\n  FTitle := ATitle;\n  FComposer := AComposer;\n  FMovementCount := AMovementCount;\nend;\n\nvar\n  MySymphony: Symphony;\n\nbegin\n  MySymphony := Symphony.Create('Symphony No. 5', 'Beethoven', 4);\nend.\n```"
  },
  {
    "task": "Define a class for a Dinosaur with properties for name, period, and diet, then instantiate it.",
    "code": "```pascal\nprogram DinosaurExample;\n\ntype\n  TDinosaur = class\n  private\n    FName: string;\n    FPeriod: string;\n    FDiet: string;\n  public\n    constructor Create(AName, APeriod, ADiet: string);\n    property Name: string read FName;\n    property Period: string read FPeriod;\n    property Diet: string read FDiet;\n  end;\n\nconstructor TDinosaur.Create(AName, APeriod, ADiet: string);\nbegin\n  FName := AName;\n  FPeriod := APeriod;\n  FDiet := ADiet;\nend;\n\nvar\n  Dino: TDinosaur;\n\nbegin\n  Dino := TDinosaur.Create('Tyrannosaurus', 'Cretaceous', 'Carnivore');\n  { Use Dino object as needed }\n  Dino.Free;\nend.\n```"
  },
  {
    "task": "Construct an object from a class named River with attributes for name, length, and basin size.",
    "code": "```pascal\nprogram CreateRiverObject;\n\ntype\n  River = class\n  private\n    FName: string;\n    FLength: real;\n    FBasinSize: real;\n  public\n    constructor Create(Name: string; Length: real; BasinSize: real);\n    procedure Display;\n  end;\n\nconstructor River.Create(Name: string; Length: real; BasinSize: real);\nbegin\n  FName := Name;\n  FLength := Length;\n  FBasinSize := BasinSize;\nend;\n\nprocedure River.Display;\nbegin\n  writeln('River Name: ', FName);\n  writeln('Length: ', FLength:0:2, ' km');\n  writeln('Basin Size: ', FBasinSize:0:2, ' sq km');\nend;\n\nvar\n  myRiver: River;\n\nbegin\n  myRiver := River.Create('Nile', 6650, 3254552);\n  myRiver.Display;\nend.\n```"
  },
  {
    "task": "Create an instance of a class called Instrument with properties for name, type, and material.",
    "code": "```pascal\nprogram InstrumentCreation;\n\ntype\n  Instrument = class\n    private\n      FName: string;\n      FType: string;\n      FMaterial: string;\n    public\n      constructor Create(AName, AType, AMaterial: string);\n      procedure DisplayDetails;\n  end;\n\nconstructor Instrument.Create(AName, AType, AMaterial: string);\nbegin\n  FName := AName;\n  FType := AType;\n  FMaterial := AMaterial;\nend;\n\nprocedure Instrument.DisplayDetails;\nbegin\n  writeln('Name: ', FName);\n  writeln('Type: ', FType);\n  writeln('Material: ', FMaterial);\nend;\n\nvar\n  MyInstrument: Instrument;\n\nbegin\n  MyInstrument := Instrument.Create('Guitar', 'String', 'Wood');\n  MyInstrument.DisplayDetails;\nend.\n```"
  },
  {
    "task": "Design a class for a Planetarium with attributes for name, location, and dome size, then create an instance.",
    "code": "```pascal\nprogram PlanetariumDemo;\n\ntype\n  TPlanetarium = class\n  private\n    FName: string;\n    FLocation: string;\n    FDomeSize: Double;\n  public\n    constructor Create(const AName, ALocation: string; const ADomeSize: Double);\n  end;\n\nconstructor TPlanetarium.Create(const AName, ALocation: string; const ADomeSize: Double);\nbegin\n  FName := AName;\n  FLocation := ALocation;\n  FDomeSize := ADomeSize;\nend;\n\nvar\n  MyPlanetarium: TPlanetarium;\n\nbegin\n  MyPlanetarium := TPlanetarium.Create('Cosmos Center', 'New York', 30.5);\n  // Use MyPlanetarium as needed\nend.\n```"
  },
  {
    "task": "Instantiate an object of a class named Island with properties for name, area, and population.",
    "code": "```pascal\nprogram IslandCreation;\n\ntype\n  TIsland = class\n    Name: string;\n    Area: real;\n    Population: integer;\n  end;\n\nvar\n  MyIsland: TIsland;\n\nbegin\n  MyIsland := TIsland.Create;\n  MyIsland.Name := 'Paradise';\n  MyIsland.Area := 123.45;\n  MyIsland.Population := 1000;\nend.\n```"
  },
  {
    "task": "Develop a class for a Space Station with properties for name, crew size, and modules, then instantiate it.",
    "code": "```pascal\nprogram SpaceStationProgram;\n\ntype\n  TSpaceStation = class\n  private\n    FName: string;\n    FCrewSize: Integer;\n    FModules: Integer;\n  public\n    constructor Create(aName: string; aCrewSize, aModules: Integer);\n    function GetName: string;\n    function GetCrewSize: Integer;\n    function GetModules: Integer;\n  end;\n\nconstructor TSpaceStation.Create(aName: string; aCrewSize, aModules: Integer);\nbegin\n  FName := aName;\n  FCrewSize := aCrewSize;\n  FModules := aModules;\nend;\n\nfunction TSpaceStation.GetName: string;\nbegin\n  Result := FName;\nend;\n\nfunction TSpaceStation.GetCrewSize: Integer;\nbegin\n  Result := FCrewSize;\nend;\n\nfunction TSpaceStation.GetModules: Integer;\nbegin\n  Result := FModules;\nend;\n\nvar\n  MySpaceStation: TSpaceStation;\n\nbegin\n  MySpaceStation := TSpaceStation.Create('Galactic Outpost', 100, 5);\nend.\n```"
  },
  {
    "task": "Create a new object from a class named Dinosaur, initializing it with species and period.",
    "code": "```pascal\nprogram DinosaurCreation;\n\ntype\n  Dinosaur = class\n  private\n    FSpecies: string;\n    FPeriod: string;\n  public\n    constructor Create(Species, Period: string);\n    procedure DisplayInfo;\n  end;\n\nconstructor Dinosaur.Create(Species, Period: string);\nbegin\n  FSpecies := Species;\n  FPeriod := Period;\nend;\n\nprocedure Dinosaur.DisplayInfo;\nbegin\n  WriteLn('Species: ', FSpecies, ', Period: ', FPeriod);\nend;\n\nvar\n  MyDinosaur: Dinosaur;\n\nbegin\n  MyDinosaur := Dinosaur.Create('Tyrannosaurus Rex', 'Cretaceous');\n  MyDinosaur.DisplayInfo;\n  MyDinosaur.Free;\nend.\n```"
  },
  {
    "task": "Write a class for a Tree with properties for species, height, and age, and instantiate it.",
    "code": "```pascal\nprogram TreeExample;\n\ntype\n  Tree = class\n  private\n    FSpecies: string;\n    FHeight: Real;\n    FAge: Integer;\n  public\n    constructor Create(aSpecies: string; aHeight: Real; aAge: Integer);\n    property Species: string read FSpecies write FSpecies;\n    property Height: Real read FHeight write FHeight;\n    property Age: Integer read FAge write FAge;\n  end;\n\nconstructor Tree.Create(aSpecies: string; aHeight: Real; aAge: Integer);\nbegin\n  FSpecies := aSpecies;\n  FHeight := aHeight;\n  FAge := aAge;\nend;\n\nvar\n  MyTree: Tree;\n\nbegin\n  MyTree := Tree.Create('Oak', 15.5, 10);\n  // Example usage of the MyTree object follows...\nend.\n```"
  },
  {
    "task": "Define a class representing a Firework with attributes for name, color, and duration, and create an object.",
    "code": "```pascal\nprogram FireworkDemo;\n\ntype\n  TFirework = class\n    name: string;\n    color: string;\n    duration: integer;\n  end;\n\nvar\n  myFirework: TFirework;\n\nbegin\n  myFirework := TFirework.Create;\n  myFirework.name := 'Sky Blazer';\n  myFirework.color := 'Red';\n  myFirework.duration := 5;\n  \n  // Use or display the firework object as needed\nend.\n```"
  },
  {
    "task": "Create an instance of a class called ComicBook with properties for title, author, and issue number.",
    "code": "```pascal\nprogram CreateComicBook;\n\ntype\n  ComicBook = class\n    private\n      FTitle: string;\n      FAuthor: string;\n      FIssueNumber: integer;\n    public\n      constructor Create(ATitle, AAuthor: string; AIssueNumber: integer);\n      function GetTitle: string;\n      function GetAuthor: string;\n      function GetIssueNumber: integer;\n  end;\n\nconstructor ComicBook.Create(ATitle, AAuthor: string; AIssueNumber: integer);\nbegin\n  FTitle := ATitle;\n  FAuthor := AAuthor;\n  FIssueNumber := AIssueNumber;\nend;\n\nfunction ComicBook.GetTitle: string;\nbegin\n  Result := FTitle;\nend;\n\nfunction ComicBook.GetAuthor: string;\nbegin\n  Result := FAuthor;\nend;\n\nfunction ComicBook.GetIssueNumber: integer;\nbegin\n  Result := FIssueNumber;\nend;\n\nvar\n  MyComic: ComicBook;\n\nbegin\n  MyComic := ComicBook.Create('The Amazing Spider-Man', 'Stan Lee', 1);\n  // Now MyComic instance is created with title, author, and issue number\nend.\n```"
  },
  {
    "task": "Design a class for a Metropolis with attributes for name, population, and GDP, then create an instance.",
    "code": "```pascal\nprogram MetropolisDemo;\n\ntype\n  TMetropolis = class\n  private\n    FName: string;\n    FPopulation: Int64;\n    FGDP: Double;\n  public\n    constructor Create(Name: string; Population: Int64; GDP: Double);\n    function GetName: string;\n    function GetPopulation: Int64;\n    function GetGDP: Double;\n  end;\n\nconstructor TMetropolis.Create(Name: string; Population: Int64; GDP: Double);\nbegin\n  FName := Name;\n  FPopulation := Population;\n  FGDP := GDP;\nend;\n\nfunction TMetropolis.GetName: string;\nbegin\n  Result := FName;\nend;\n\nfunction TMetropolis.GetPopulation: Int64;\nbegin\n  Result := FPopulation;\nend;\n\nfunction TMetropolis.GetGDP: Double;\nbegin\n  Result := FGDP;\nend;\n\nvar\n  MetropolisInstance: TMetropolis;\n\nbegin\n  MetropolisInstance := TMetropolis.Create('New Metropolis', 10000000, 5000000000.0);\nend.\n```"
  },
  {
    "task": "Instantiate an object of a class named Dragon with properties for name, element, and age.",
    "code": "```pascal\nprogram DragonExample;\n\ntype\n  TDragon = class\n  private\n    FName: string;\n    FElement: string;\n    FAge: Integer;\n  public\n    constructor Create(AName, AElement: string; AAge: Integer);\n    procedure DisplayInfo;\n  end;\n\nconstructor TDragon.Create(AName, AElement: string; AAge: Integer);\nbegin\n  FName := AName;\n  FElement := AElement;\n  FAge := AAge;\nend;\n\nprocedure TDragon.DisplayInfo;\nbegin\n  Writeln('Name: ', FName);\n  Writeln('Element: ', FElement);\n  Writeln('Age: ', FAge);\nend;\n\nvar\n  MyDragon: TDragon;\n\nbegin\n  MyDragon := TDragon.Create('Smaug', 'Fire', 200);\n  MyDragon.DisplayInfo;\n  \n  MyDragon.Free;\nend.\n```"
  },
  {
    "task": "Develop a class for a Novel with properties for title, author, and genre, then instantiate it.",
    "code": "```pascal\nprogram NovelExample;\n\ntype\n  TNovel = class\n  private\n    FTitle: string;\n    FAuthor: string;\n    FGenre: string;\n  public\n    constructor Create(ATitle, AAuthor, AGenre: string);\n    function GetTitle: string;\n    function GetAuthor: string;\n    function GetGenre: string;\n  end;\n\nconstructor TNovel.Create(ATitle, AAuthor, AGenre: string);\nbegin\n  FTitle := ATitle;\n  FAuthor := AAuthor;\n  FGenre := AGenre;\nend;\n\nfunction TNovel.GetTitle: string;\nbegin\n  Result := FTitle;\nend;\n\nfunction TNovel.GetAuthor: string;\nbegin\n  Result := FAuthor;\nend;\n\nfunction TNovel.GetGenre: string;\nbegin\n  Result := FGenre;\nend;\n\nvar\n  MyNovel: TNovel;\n\nbegin\n  MyNovel := TNovel.Create('1984', 'George Orwell', 'Dystopian');\n  // Use MyNovel as needed\nend.\n```"
  },
  {
    "task": "Create an object of a class named Satellite with attributes for name, orbit, and mission.",
    "code": "```pascal\nprogram SatelliteObjectCreation;\n\ntype\n  Satellite = object\n    name: string;\n    orbit: string;\n    mission: string;\n  end;\n\nvar\n  mySatellite: Satellite;\n\nbegin\n  mySatellite.name := 'Hubble';\n  mySatellite.orbit := 'Low Earth Orbit';\n  mySatellite.mission := 'Astronomical observation';\nend.\n```"
  },
  {
    "task": "Define a class for a Castle with properties for name, location, and architectural style, then instantiate it.",
    "code": "```pascal\nprogram CastleCreation;\n\ntype\n  TCastle = class\n  private\n    FName: string;\n    FLocation: string;\n    FArchitecturalStyle: string;\n  public\n    constructor Create(AName, ALocation, AStyle: string);\n    procedure Display;\n  end;\n\nconstructor TCastle.Create(AName, ALocation, AStyle: string);\nbegin\n  FName := AName;\n  FLocation := ALocation;\n  FArchitecturalStyle := AStyle;\nend;\n\nprocedure TCastle.Display;\nbegin\n  WriteLn('Castle Name: ', FName);\n  WriteLn('Location: ', FLocation);\n  WriteLn('Architectural Style: ', FArchitecturalStyle);\nend;\n\nvar\n  MyCastle: TCastle;\n\nbegin\n  MyCastle := TCastle.Create('Neuschwanstein', 'Bavaria, Germany', 'Romanesque Revival');\n  MyCastle.Display;\nend.\n```"
  },
  {
    "task": "Construct an object from a class named Jungle with attributes for name, area, and biodiversity.",
    "code": "```pascal\nprogram JungleExample;\n\ntype\n  Jungle = class\n  private\n    FName: string;\n    FArea: real;\n    FBiodiversity: integer;\n  public\n    constructor Create(Name: string; Area: real; Biodiversity: integer);\n    procedure DisplayDetails;\n  end;\n\nconstructor Jungle.Create(Name: string; Area: real; Biodiversity: integer);\nbegin\n  FName := Name;\n  FArea := Area;\n  FBiodiversity := Biodiversity;\nend;\n\nprocedure Jungle.DisplayDetails;\nbegin\n  writeln('Name: ', FName);\n  writeln('Area: ', FArea:0:2, ' square km');\n  writeln('Biodiversity index: ', FBiodiversity);\nend;\n\nvar\n  MyJungle: Jungle;\n\nbegin\n  MyJungle := Jungle.Create('Amazon', 5500.75, 1200);\n  MyJungle.DisplayDetails;\n  MyJungle.Free;\nend.\n```"
  },
  {
    "task": "Create an instance of a class called Dinosaur with properties for species, size, and diet.",
    "code": "```pascal\nprogram DinosaurCreation;\n\ntype\n  TDinosaur = class\n  private\n    FSpecies: string;\n    FSize: string;\n    FDiet: string;\n  public\n    constructor Create(ASpecies, ASize, ADiet: string);\n    property Species: string read FSpecies write FSpecies;\n    property Size: string read FSize write FSize;\n    property Diet: string read FDiet write FDiet;\n  end;\n\nconstructor TDinosaur.Create(ASpecies, ASize, ADiet: string);\nbegin\n  FSpecies := ASpecies;\n  FSize := ASize;\n  FDiet := ADiet;\nend;\n\nvar\n  Dinosaur: TDinosaur;\n\nbegin\n  Dinosaur := TDinosaur.Create('Tyrannosaurus Rex', 'Large', 'Carnivore');\n  // Normally, you would use the Dinosaur instance here\n  Dinosaur.Free;\nend.\n```"
  },
  {
    "task": "Design a class for a Superhero with attributes for name, powers, and alias, then create an instance.",
    "code": "```pascal\nprogram SuperheroProgram;\n\ntype\n  TSuperhero = class\n    private\n      FName: string;\n      FPowers: string;\n      FAlias: string;\n    public\n      constructor Create(AName, APowers, AAlias: string);\n      function GetName: string;\n      function GetPowers: string;\n      function GetAlias: string;\n  end;\n\nconstructor TSuperhero.Create(AName, APowers, AAlias: string);\nbegin\n  FName := AName;\n  FPowers := APowers;\n  FAlias := AAlias;\nend;\n\nfunction TSuperhero.GetName: string;\nbegin\n  Result := FName;\nend;\n\nfunction TSuperhero.GetPowers: string;\nbegin\n  Result := FPowers;\nend;\n\nfunction TSuperhero.GetAlias: string;\nbegin\n  Result := FAlias;\nend;\n\nvar\n  Hero: TSuperhero;\n\nbegin\n  Hero := TSuperhero.Create('Clark Kent', 'Super Strength, Flight, X-ray Vision', 'Superman');\nend.\n```"
  }
]