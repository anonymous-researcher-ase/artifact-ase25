[
  {
    "task": "Write a program that checks if a number is even or odd and outputs the result.",
    "code": "```pascal\nprogram EvenOrOddCheck;\nvar\n  num: Integer;\nbegin\n  Write('Enter a number: ');\n  ReadLn(num);\n  if num mod 2 = 0 then\n    WriteLn('The number is even.')\n  else\n    WriteLn('The number is odd.');\nend.\n```"
  },
  {
    "task": "Create a function that determines if a given year is a leap year.",
    "code": "```pascal\nprogram LeapYearCheck;\n\nfunction IsLeapYear(year: Integer): Boolean;\nbegin\n  if (year mod 4 = 0) then\n  begin\n    if (year mod 100 = 0) then\n    begin\n      if (year mod 400 = 0) then\n        IsLeapYear := True\n      else\n        IsLeapYear := False;\n    end\n    else\n      IsLeapYear := True;\n  end\n  else\n    IsLeapYear := False;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Develop a script that categorizes an input number as positive, negative, or zero.",
    "code": "```pascal\nprogram CategorizeNumber;\n\nvar\n  number: Integer;\n\nbegin\n  Write('Enter a number: ');\n  ReadLn(number);\n\n  if number > 0 then\n    WriteLn('The number is positive.')\n  else if number < 0 then\n    WriteLn('The number is negative.')\n  else\n    WriteLn('The number is zero.');\nend.\n```"
  },
  {
    "task": "Implement a system that grants access only if a correct password and username are provided.",
    "code": "```pascal\nprogram AccessControl;\n\nuses\n  SysUtils;\n\nvar\n  inputUsername, inputPassword: string;\n  correctUsername, correctPassword: string;\n\nbegin\n  correctUsername := 'admin';\n  correctPassword := 'pass123';\n\n  Write('Enter username: ');\n  ReadLn(inputUsername);\n  Write('Enter password: ');\n  ReadLn(inputPassword);\n\n  if (inputUsername = correctUsername) and (inputPassword = correctPassword) then\n    WriteLn('Access granted.')\n  else\n    WriteLn('Access denied.');\nend.\n```"
  },
  {
    "task": "Design a program that outputs 'Fizz' for numbers divisible by 3, 'Buzz' for numbers divisible by 5, and 'FizzBuzz' for numbers divisible by both.",
    "code": "```pascal\nprogram FizzBuzz;\n\nvar\n  i: Integer;\n\nbegin\n  for i := 1 to 100 do\n  begin\n    if (i mod 3 = 0) and (i mod 5 = 0) then\n      writeln('FizzBuzz')\n    else if (i mod 3 = 0) then\n      writeln('Fizz')\n    else if (i mod 5 = 0) then\n      writeln('Buzz')\n    else\n      writeln(i);\n  end;\nend.\n```"
  },
  {
    "task": "Write a function to determine if a character is a vowel or a consonant.",
    "code": "```pascal\nprogram VowelOrConsonant;\n\nfunction IsVowelOrConsonant(ch: Char): String;\nbegin\n  ch := UpCase(ch);\n  if (ch = 'A') or (ch = 'E') or (ch = 'I') or (ch = 'O') or (ch = 'U') then\n    IsVowelOrConsonant := 'Vowel'\n  else\n    IsVowelOrConsonant := 'Consonant';\nend;\n\nvar\n  result: String;\n  character: Char;\nbegin\n  Write('Enter a character: ');\n  ReadLn(character);\n  result := IsVowelOrConsonant(character);\n  WriteLn('The character is a ', result);\nend.\n```"
  },
  {
    "task": "Create a program that assigns letter grades based on numerical scores.",
    "code": "```pascal\nprogram GradeAssignment;\n\nvar\n  score: Integer;\n  grade: Char;\n\nbegin\n  Write('Enter the numerical score: ');\n  ReadLn(score);\n\n  if score >= 90 then\n    grade := 'A'\n  else if score >= 80 then\n    grade := 'B'\n  else if score >= 70 then\n    grade := 'C'\n  else if score >= 60 then\n    grade := 'D'\n  else\n    grade := 'F';\n\n  WriteLn('The letter grade is: ', grade);\nend.\n```"
  },
  {
    "task": "Develop a routine that suggests clothing based on the current temperature.",
    "code": "```pascal\nprogram ClothingSuggestion;\n\nuses\n  SysUtils;\n\nprocedure SuggestClothing(temperature: Integer);\nbegin\n  if temperature < 0 then\n    Writeln('Wear a heavy coat, scarf, and gloves.')\n  else if (temperature >= 0) and (temperature <= 10) then\n    Writeln('Wear a coat and a sweater.')\n  else if (temperature > 10) and (temperature <= 20) then\n    Writeln('Wear a sweater and jeans.')\n  else if (temperature > 20) and (temperature <= 30) then\n    Writeln('Wear a t-shirt and shorts.')\n  else\n    Writeln('Wear light clothing.')\nend;\n\nvar\n  currentTemperature: Integer;\n\nbegin\n  Write('Enter the current temperature: ');\n  Readln(currentTemperature);\n  SuggestClothing(currentTemperature);\nend.\n```"
  },
  {
    "task": "Implement a system that checks if a user is an adult or a minor based on their age.",
    "code": "```pascal\nprogram CheckAdultOrMinor;\nvar\n  age: Integer;\nbegin\n  Write('Enter age: ');\n  ReadLn(age);\n  \n  if age >= 18 then\n    WriteLn('User is an adult.')\n  else\n    WriteLn('User is a minor.');\nend.\n```"
  },
  {
    "task": "Design a program that validates if a triangle can exist based on its side lengths.",
    "code": "```pascal\nprogram TriangleValidation;\n\nvar\n  a, b, c: real;\n\nbegin\n  writeln('Enter the lengths of the three sides of the triangle:');\n  readln(a, b, c);\n\n  if (a + b > c) and (a + c > b) and (b + c > a) then\n    writeln('The triangle is valid.')\n  else\n    writeln('The triangle is not valid.');\nend.\n```"
  },
  {
    "task": "Write a function that determines the largest of three input numbers.",
    "code": "```pascal\nprogram LargestOfThree;\n\nfunction Largest(a, b, c: Integer): Integer;\nbegin\n  if (a >= b) and (a >= c) then\n    Largest := a\n  else if (b >= a) and (b >= c) then\n    Largest := b\n  else\n    Largest := c;\nend;\n\nvar\n  num1, num2, num3, result: Integer;\n\nbegin\n  num1 := 5;\n  num2 := 10;\n  num3 := 7;\n  result := Largest(num1, num2, num3);\n  WriteLn('The largest number is: ', result);\nend.\n```"
  },
  {
    "task": "Create a program that checks if a string is a palindrome.",
    "code": "```pascal\nprogram CheckPalindrome;\n\nuses SysUtils;\n\nvar\n  input, reversed: string;\n  i, len: Integer;\n  isPalindrome: Boolean;\n\nbegin\n  Write('Enter a string: ');\n  ReadLn(input);\n  \n  len := Length(input);\n  reversed := '';\n  \n  for i := len downto 1 do\n    reversed := reversed + input[i];\n  \n  if input = reversed then\n    isPalindrome := True\n  else\n    isPalindrome := False;\n\n  if isPalindrome then\n    WriteLn('The string is a palindrome.')\n  else\n    WriteLn('The string is not a palindrome.');\nend.\n```"
  },
  {
    "task": "Develop a routine that calculates the total cost with a discount applied if applicable.",
    "code": "```pascal\nprogram CalculateTotalCost;\n\nvar\n  totalCost, discount, finalCost: Real;\n\nbegin\n  Write('Enter the total cost: ');\n  ReadLn(totalCost);\n  \n  discount := 0.0;\n  \n  if totalCost > 100 then\n    discount := totalCost * 0.1\n  else if totalCost > 50 then\n    discount := totalCost * 0.05;\n\n  finalCost := totalCost - discount;\n  WriteLn('The final cost after discount is: ', finalCost:0:2);\nend.\n```"
  },
  {
    "task": "Implement a system that checks if a person is eligible to vote based on age and citizenship.",
    "code": "```pascal\nprogram VotingEligibility;\n\nvar\n  age: Integer;\n  isCitizen: Boolean;\n\nbegin\n  { Sample values for age and citizenship status }\n  age := 18;\n  isCitizen := True;\n\n  if (age >= 18) and isCitizen then\n    writeln('Eligible to vote.')\n  else\n    writeln('Not eligible to vote.');\nend.\n```"
  },
  {
    "task": "Design a function that returns the day of the week given a number from 1 to 7.",
    "code": "```pascal\nprogram DayOfWeek;\n\nfunction GetDayOfWeek(dayNumber: Integer): String;\nbegin\n  case dayNumber of\n    1: GetDayOfWeek := 'Monday';\n    2: GetDayOfWeek := 'Tuesday';\n    3: GetDayOfWeek := 'Wednesday';\n    4: GetDayOfWeek := 'Thursday';\n    5: GetDayOfWeek := 'Friday';\n    6: GetDayOfWeek := 'Saturday';\n    7: GetDayOfWeek := 'Sunday';\n  else\n    GetDayOfWeek := 'Invalid day';\n  end;\nend;\n\nbegin\n  { Example usage }\n  WriteLn(GetDayOfWeek(1));  { Outputs: Monday }\n  WriteLn(GetDayOfWeek(8));  { Outputs: Invalid day }\nend.\n```"
  },
  {
    "task": "Write a program that determines if a word is found within a given sentence.",
    "code": "```pascal\nprogram FindWordInSentence;\n\nuses\n  SysUtils;\n\nvar\n  sentence, word: string;\n  found: boolean;\n  \nbegin\n  Write('Enter a sentence: ');\n  ReadLn(sentence);\n  Write('Enter a word to find: ');\n  ReadLn(word);\n  \n  found := Pos(word, sentence) > 0;\n  \n  if found then\n    WriteLn('The word \"', word, '\" is found in the sentence.')\n  else\n    WriteLn('The word \"', word, '\" is NOT found in the sentence.');\nend.\n```"
  },
  {
    "task": "Create a script that checks if a number is within a specified range.",
    "code": "```pascal\nprogram CheckNumberInRange;\n\nvar\n  number, lowerBound, upperBound: Integer;\n\nbegin\n  write('Enter a number: ');\n  readln(number);\n  \n  write('Enter the lower bound of the range: ');\n  readln(lowerBound);\n  \n  write('Enter the upper bound of the range: ');\n  readln(upperBound);\n  \n  if (number >= lowerBound) and (number <= upperBound) then\n    writeln('The number is within the range.')\n  else\n    writeln('The number is outside the range.');\nend.\n```"
  },
  {
    "task": "Develop a routine to decide if a user input is a valid email address.",
    "code": "```pascal\nprogram ValidateEmail;\n\nuses\n  SysUtils;\n\nfunction IsValidEmail(const Email: string): Boolean;\nvar\n  AtPos, DotPos: Integer;\nbegin\n  AtPos := Pos('@', Email);\n  DotPos := LastDelimiter('.', Email);\n  if (AtPos > 1) and (DotPos > AtPos + 1) and (DotPos < Length(Email)) then\n    Result := True\n  else\n    Result := False;\nend;\n\nvar\n  UserInput: string;\nbegin\n  Write('Enter an email address: ');\n  ReadLn(UserInput);\n  if IsValidEmail(UserInput) then\n    WriteLn('Valid email address.')\n  else\n    WriteLn('Invalid email address.');\nend.\n```"
  },
  {
    "task": "Implement a program that categorizes a number as small, medium, or large.",
    "code": "```pascal\nprogram CategorizeNumber;\n\nvar\n  num: Integer;\n  category: String;\n\nbegin\n  Write('Enter a number: ');\n  ReadLn(num);\n\n  if num < 10 then\n    category := 'small'\n  else if num <= 100 then\n    category := 'medium'\n  else\n    category := 'large';\n\n  WriteLn('The number is ', category, '.');\nend.\n```"
  },
  {
    "task": "Design a function that outputs the season based on the month provided.",
    "code": "```pascal\nprogram SeasonFinder;\n\nfunction GetSeason(month: Integer): String;\nbegin\n  case month of\n    12, 1, 2: GetSeason := 'Winter';\n    3, 4, 5: GetSeason := 'Spring';\n    6, 7, 8: GetSeason := 'Summer';\n    9, 10, 11: GetSeason := 'Autumn';\n  else\n    GetSeason := 'Invalid month';\n  end;\nend;\n\nvar\n  month: Integer;\n  season: String;\nbegin\n  Write('Enter the month (1-12): ');\n  ReadLn(month);\n  season := GetSeason(month);\n  WriteLn('The season is: ', season);\nend.\n```"
  },
  {
    "task": "Write a program that checks if a string contains only alphabetic characters.",
    "code": "```pascal\nprogram CheckAlphabetic;\n\nuses SysUtils;\n\nfunction IsAlphabetic(s: string): Boolean;\nvar\n  i: Integer;\nbegin\n  IsAlphabetic := True;\n  for i := 1 to Length(s) do\n  begin\n    if not (s[i] in ['A'..'Z', 'a'..'z']) then\n    begin\n      IsAlphabetic := False;\n      Break;\n    end;\n  end;\nend;\n\nvar\n  input: string;\nbegin\n  Write('Enter a string: ');\n  ReadLn(input);\n  if IsAlphabetic(input) then\n    WriteLn('The string contains only alphabetic characters.')\n  else\n    WriteLn('The string contains non-alphabetic characters.');\nend.\n```"
  },
  {
    "task": "Create a routine that decides the type of triangle based on its angles.",
    "code": "```pascal\nprogram TriangleType;\n\nprocedure DetermineTriangleType(angle1, angle2, angle3: Integer);\nbegin\n  if (angle1 + angle2 + angle3 <> 180) or (angle1 <= 0) or (angle2 <= 0) or (angle3 <= 0) then\n    writeln('Not a valid triangle')\n  else if (angle1 = 90) or (angle2 = 90) or (angle3 = 90) then\n    writeln('Right triangle')\n  else if (angle1 > 90) or (angle2 > 90) or (angle3 > 90) then\n    writeln('Obtuse triangle')\n  else\n    writeln('Acute triangle');\nend;\n\nbegin\n  DetermineTriangleType(60, 60, 60);  // Example usage\nend.\n```"
  },
  {
    "task": "Develop a program that suggests a meal based on the time of day.",
    "code": "```pascal\nprogram MealSuggestion;\n\nvar\n  hour: Integer;\n  meal: String;\n\nbegin\n  Write('Enter the current hour (0-23): ');\n  ReadLn(hour);\n  \n  if (hour >= 0) and (hour < 12) then\n    meal := 'Breakfast'\n  else if (hour >= 12) and (hour < 17) then\n    meal := 'Lunch'\n  else if (hour >= 17) and (hour < 21) then\n    meal := 'Dinner'\n  else\n    meal := 'Snack';\n  \n  WriteLn('Suggested meal: ', meal);\nend.\n```"
  },
  {
    "task": "Implement a function that determines if a point lies within a circle given its radius.",
    "code": "```pascal\nprogram PointInCircle;\n\nfunction IsPointInCircle(x, y, radius: Real): Boolean;\nbegin\n  if (x * x + y * y <= radius * radius) then\n    IsPointInCircle := True\n  else\n    IsPointInCircle := False;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Design a script that calculates overtime pay based on hours worked.",
    "code": "```pascal\nprogram OvertimePayCalculator;\n\nvar\n  hoursWorked: Real;\n  overtimePay, regularPay, totalPay: Real;\n  overtimeRate, regularRate: Real;\n\nbegin\n  regularRate := 10.0;  { example regular pay rate }\n  overtimeRate := 15.0; { example overtime pay rate }\n  write('Enter hours worked: ');\n  readln(hoursWorked);\n\n  if hoursWorked > 40 then\n  begin\n    regularPay := 40 * regularRate;\n    overtimePay := (hoursWorked - 40) * overtimeRate;\n  end\n  else\n  begin\n    regularPay := hoursWorked * regularRate;\n    overtimePay := 0;\n  end;\n\n  totalPay := regularPay + overtimePay;\n  writeln('Total Pay: ', totalPay:0:2);\nend.\n```"
  },
  {
    "task": "Write a program that checks if two strings are anagrams of each other.",
    "code": "```pascal\nprogram AnagramCheck;\n\nuses sysutils;\n\nfunction AreAnagrams(s1, s2: string): Boolean;\nvar\n  i: Integer;\nbegin\n  if Length(s1) <> Length(s2) then\n    Exit(False);\n\n  s1 := LowerCase(s1);\n  s2 := LowerCase(s2);\n\n  for i := 1 to Length(s1) do\n  begin\n    if Pos(s1[i], s2) = 0 then\n      Exit(False)\n    else\n      Delete(s2, Pos(s1[i], s2), 1);\n  end;\n\n  Result := True;\nend;\n\nvar\n  str1, str2: string;\nbegin\n  Write('Enter first string: ');\n  ReadLn(str1);\n  Write('Enter second string: ');\n  ReadLn(str2);\n\n  if AreAnagrams(str1, str2) then\n    WriteLn('The strings are anagrams.')\n  else\n    WriteLn('The strings are not anagrams.');\nend.\n```"
  },
  {
    "task": "Create a function that classifies numbers as prime or composite.",
    "code": "```pascal\nprogram PrimeOrComposite;\n\nfunction IsPrime(n: Integer): Boolean;\nvar\n  i: Integer;\nbegin\n  if n <= 1 then\n    IsPrime := False\n  else if n <= 3 then\n    IsPrime := True\n  else if (n mod 2 = 0) or (n mod 3 = 0) then\n    IsPrime := False\n  else\n  begin\n    i := 5;\n    while i * i <= n do\n    begin\n      if (n mod i = 0) or (n mod (i + 2) = 0) then\n      begin\n        IsPrime := False;\n        Exit;\n      end;\n      i := i + 6;\n    end;\n    IsPrime := True;\n  end;\nend;\n\nprocedure ClassifyNumber(n: Integer);\nbegin\n  if IsPrime(n) then\n    WriteLn(n, ' is a prime number.')\n  else\n    WriteLn(n, ' is a composite number.');\nend;\n\nvar\n  number: Integer;\nbegin\n  Write('Enter a number: ');\n  ReadLn(number);\n  ClassifyNumber(number);\nend.\n```"
  },
  {
    "task": "Develop a routine to determine if a number is a power of two.",
    "code": "```pascal\nprogram PowerOfTwo;\n\nfunction IsPowerOfTwo(n: Integer): Boolean;\nbegin\n  if (n > 0) and ((n and (n - 1)) = 0) then\n    IsPowerOfTwo := True\n  else\n    IsPowerOfTwo := False;\nend;\n\nvar\n  num: Integer;\nbegin\n  Write('Enter a number: ');\n  ReadLn(num);\n\n  if IsPowerOfTwo(num) then\n    WriteLn(num, ' is a power of two.')\n  else\n    WriteLn(num, ' is not a power of two.');\nend.\n```"
  },
  {
    "task": "Implement a program that checks if a list is sorted in ascending order.",
    "code": "```pascal\nprogram CheckSortedList;\n\nvar\n  arr: array[1..100] of Integer;\n  n, i: Integer;\n  isSorted: Boolean;\n\nbegin\n  { Initialize or input the array and the number of elements, n }\n  n := 5; { Example value, you can change this }\n  arr[1] := 1;\n  arr[2] := 2;\n  arr[3] := 3;\n  arr[4] := 4;\n  arr[5] := 5;\n\n  isSorted := True;\n  for i := 1 to n - 1 do\n  begin\n    if arr[i] > arr[i + 1] then\n    begin\n      isSorted := False;\n      Break;\n    end;\n  end;\n\n  if isSorted then\n    WriteLn('The list is sorted in ascending order.')\n  else\n    WriteLn('The list is not sorted in ascending order.');\nend.\n```"
  },
  {
    "task": "Design a function that suggests a sport based on the weather conditions.",
    "code": "```pascal\nprogram SuggestSport;\n\nfunction SuggestSportBasedOnWeather(weather: string): string;\nbegin\n    if weather = 'sunny' then\n        SuggestSportBasedOnWeather := 'Tennis'\n    else if weather = 'rainy' then\n        SuggestSportBasedOnWeather := 'Swimming'\n    else if weather = 'windy' then\n        SuggestSportBasedOnWeather := 'Kite Flying'\n    else if weather = 'snowy' then\n        SuggestSportBasedOnWeather := 'Skiing'\n    else\n        SuggestSportBasedOnWeather := 'Indoor Gym';\nend;\n\nvar\n    weatherCondition: string;\n    suggestedSport: string;\nbegin\n    write('Enter weather condition (sunny, rainy, windy, snowy): ');\n    readln(weatherCondition);\n    suggestedSport := SuggestSportBasedOnWeather(weatherCondition);\n    writeln('Suggested Sport: ', suggestedSport);\nend.\n```"
  },
  {
    "task": "Write a program that determines if an entered date is valid.",
    "code": "```pascal\nprogram ValidateDate;\n\nuses SysUtils;\n\nvar\n  day, month, year: Integer;\n  isValid: Boolean;\n\nbegin\n  Write('Enter day: ');\n  ReadLn(day);\n  Write('Enter month: ');\n  ReadLn(month);\n  Write('Enter year: ');\n  ReadLn(year);\n\n  isValid := False;\n\n  if (year >= 1) and (month >= 1) and (month <= 12) then\n  begin\n    case month of\n      1, 3, 5, 7, 8, 10, 12:\n        if (day >= 1) and (day <= 31) then\n          isValid := True;\n      4, 6, 9, 11:\n        if (day >= 1) and (day <= 30) then\n          isValid := True;\n      2:\n        begin\n          if ((year mod 4 = 0) and (year mod 100 <> 0)) or (year mod 400 = 0) then\n          begin\n            if (day >= 1) and (day <= 29) then\n              isValid := True;\n          end\n          else if (day >= 1) and (day <= 28) then\n            isValid := True;\n        end;\n    end;\n  end;\n\n  if isValid then\n    WriteLn('The date is valid.')\n  else\n    WriteLn('The date is invalid.');\nend.\n```"
  },
  {
    "task": "Create a script to decide which of two products to buy based on price and reviews.",
    "code": "```pascal\nprogram ProductDecision;\n\nvar\n  price1, price2: real;\n  reviews1, reviews2: integer;\n\nbegin\n  { Input prices and reviews for the two products }\n  writeln('Enter price of product 1:');\n  readln(price1);\n  writeln('Enter reviews (score out of 100) for product 1:');\n  readln(reviews1);\n\n  writeln('Enter price of product 2:');\n  readln(price2);\n  writeln('Enter reviews (score out of 100) for product 2:');\n  readln(reviews2);\n\n  { Decision making based on price and reviews }\n  if (price1 < price2) and (reviews1 >= reviews2) then\n    writeln('Buy product 1')\n  else if (price2 < price1) and (reviews2 >= reviews1) then\n    writeln('Buy product 2')\n  else if (reviews1 > reviews2) then\n    writeln('Buy product 1')\n  else if (reviews2 > reviews1) then\n    writeln('Buy product 2')\n  else\n    writeln('Both products are equivalent in terms of price and reviews');\nend.\n```"
  },
  {
    "task": "Develop a function that categorizes a person\u2019s BMI as underweight, normal, overweight, or obese.",
    "code": "```pascal\nprogram BMICategorization;\n\nfunction CategorizeBMI(bmi: Real): String;\nbegin\n  if bmi < 18.5 then\n    CategorizeBMI := 'Underweight'\n  else if bmi < 24.9 then\n    CategorizeBMI := 'Normal'\n  else if bmi < 29.9 then\n    CategorizeBMI := 'Overweight'\n  else\n    CategorizeBMI := 'Obese';\nend;\n\nbegin\n  { Example usage of the CategorizeBMI function }\nend.\n```"
  },
  {
    "task": "Implement a program that checks if a credit card number is valid using the Luhn algorithm.",
    "code": "```pascal\nprogram LuhnAlgorithm;\n\nfunction LuhnCheck(cardNumber: string): Boolean;\nvar\n  sum, i, digit, doubleDigit: Integer;\n  isSecond: Boolean;\nbegin\n  sum := 0;\n  isSecond := False;\n  \n  for i := Length(cardNumber) downto 1 do\n  begin\n    digit := Ord(cardNumber[i]) - Ord('0');\n\n    if isSecond then\n    begin\n      doubleDigit := digit * 2;\n      if doubleDigit > 9 then\n        doubleDigit := doubleDigit - 9;\n      sum := sum + doubleDigit;\n    end\n    else\n    begin\n      sum := sum + digit;\n    end;\n\n    isSecond := not isSecond;\n  end;\n\n  Result := (sum mod 10 = 0);\nend;\n\nvar\n  cardNumber: string;\nbegin\n  Write('Enter credit card number: ');\n  ReadLn(cardNumber);\n  \n  if LuhnCheck(cardNumber) then\n    WriteLn('Credit card number is valid.')\n  else\n    WriteLn('Credit card number is invalid.');\nend.\n```"
  },
  {
    "task": "Design a routine that outputs a greeting based on the current time of day.",
    "code": "```pascal\nprogram GreetingBasedOnTime;\n\nuses\n  SysUtils;\n\nprocedure GreetBasedOnTime;\nvar\n  Hour: Integer;\nbegin\n  Hour := StrToInt(FormatDateTime('hh', Now));\n  if (Hour >= 5) and (Hour < 12) then\n    WriteLn('Good morning!')\n  else if (Hour >= 12) and (Hour < 18) then\n    WriteLn('Good afternoon!')\n  else if (Hour >= 18) and (Hour < 21) then\n    WriteLn('Good evening!')\n  else\n    WriteLn('Good night!');\nend;\n\nbegin\n  GreetBasedOnTime;\nend.\n```"
  },
  {
    "task": "Write a program that determines if a given word can be formed with a set of letters.",
    "code": "```pascal\nprogram WordFormationCheck;\n\nuses SysUtils;\n\nfunction CanFormWord(word, letters: string): Boolean;\nvar\n  i: Integer;\n  letterPos: Integer;\nbegin\n  for i := 1 to Length(word) do\n  begin\n    letterPos := Pos(word[i], letters);\n    if letterPos = 0 then\n    begin\n      CanFormWord := False;\n      Exit;\n    end\n    else\n      Delete(letters, letterPos, 1);\n  end;\n  CanFormWord := True;\nend;\n\nvar\n  word, letters: string;\nbegin\n  Write('Enter the word: ');\n  ReadLn(word);\n  Write('Enter the set of letters: ');\n  ReadLn(letters);\n\n  if CanFormWord(word, letters) then\n    WriteLn('The word can be formed with the given letters.')\n  else\n    WriteLn('The word cannot be formed with the given letters.');\nend.\n```"
  },
  {
    "task": "Create a function that outputs the appropriate greeting based on the day of the week.",
    "code": "```pascal\nprogram DayGreeting;\n\nuses SysUtils;\n\nfunction GetGreetingForDay(const Day: string): string;\nbegin\n  if Day = 'Monday' then\n    Result := 'Hello, it\\'s Monday!'\n  else if Day = 'Tuesday' then\n    Result := 'Happy Tuesday!'\n  else if Day = 'Wednesday' then\n    Result := 'Welcome to Wednesday!'\n  else if Day = 'Thursday' then\n    Result := 'Thursday Greetings!'\n  else if Day = 'Friday' then\n    Result := 'It\\'s finally Friday!'\n  else if Day = 'Saturday' then\n    Result := 'Enjoy your Saturday!'\n  else if Day = 'Sunday' then\n    Result := 'Have a relaxing Sunday!'\n  else\n    Result := 'Invalid day!';\nend;\n\nvar\n  Day: string;\nbegin\n  Write('Enter the day of the week: ');\n  ReadLn(Day);\n  WriteLn(GetGreetingForDay(Day));\nend.\n```"
  },
  {
    "task": "Develop a system to determine if a person qualifies for a senior citizen discount.",
    "code": "```pascal\nprogram SeniorCitizenDiscount;\n\nvar\n  age: Integer;\n  qualifiesForDiscount: Boolean;\n\nbegin\n  Write('Enter age: ');\n  ReadLn(age);\n  \n  if age >= 65 then\n    qualifiesForDiscount := True\n  else\n    qualifiesForDiscount := False;\n\n  if qualifiesForDiscount then\n    WriteLn('The person qualifies for a senior citizen discount.')\n  else\n    WriteLn('The person does not qualify for a senior citizen discount.');\nend.\n```"
  },
  {
    "task": "Implement a function that checks if a number is a perfect square.",
    "code": "```pascal\nprogram PerfectSquareCheck;\n\nfunction IsPerfectSquare(n: Integer): Boolean;\nvar\n  i: Integer;\nbegin\n  if n < 0 then\n  begin\n    IsPerfectSquare := False;\n    Exit;\n  end;\n  \n  i := 0;\n  while i * i < n do\n    Inc(i);\n  \n  IsPerfectSquare := (i * i = n);\nend;\n\nbegin\n  { Example usage }\nend.\n```"
  },
  {
    "task": "Design a program that outputs the correct shipping cost based on weight and distance.",
    "code": "```pascal\nprogram ShippingCostCalculator;\n\nvar\n  weight, distance: real;\n  cost: real;\n\nbegin\n  writeln('Enter the weight of the package (in kg):');\n  readln(weight);\n  writeln('Enter the distance to be shipped (in km):');\n  readln(distance);\n\n  if (weight <= 5.0) then\n  begin\n    if (distance <= 100.0) then\n      cost := 5.0\n    else\n      cost := 10.0;\n  end\n  else if (weight <= 20.0) then\n  begin\n    if (distance <= 100.0) then\n      cost := 10.0\n    else\n      cost := 20.0;\n  end\n  else\n  begin\n    if (distance <= 100.0) then\n      cost := 20.0\n    else\n      cost := 50.0;\n  end;\n\n  writeln('The shipping cost is: $', cost:0:2);\nend.\n```"
  },
  {
    "task": "Write a routine that chooses the correct pronoun based on gender input.",
    "code": "```pascal\nprogram PronounSelector;\n\nfunction GetPronoun(gender: string): string;\nbegin\n  if gender = 'male' then\n    GetPronoun := 'he'\n  else if gender = 'female' then\n    GetPronoun := 'she'\n  else\n    GetPronoun := 'they';\nend;\n\nvar\n  genderInput: string;\n  pronoun: string;\nbegin\n  writeln('Enter gender (male/female): ');\n  readln(genderInput);\n  pronoun := GetPronoun(genderInput);\n  writeln('The pronoun is: ', pronoun);\nend.\n```"
  },
  {
    "task": "Create a program that checks if a user input is a palindrome number.",
    "code": "```pascal\nprogram PalindromeCheck;\n\nuses SysUtils;\n\nvar\n  numStr, reversedStr: string;\n  i, len: integer;\n  isPalindrome: boolean;\n\nbegin\n  Write('Enter a number: ');\n  ReadLn(numStr);\n  \n  len := Length(numStr);\n  reversedStr := '';\n  \n  for i := len downto 1 do\n    reversedStr := reversedStr + numStr[i];\n    \n  if numStr = reversedStr then\n    isPalindrome := true\n  else\n    isPalindrome := false;\n  \n  if isPalindrome then\n    WriteLn('The number is a palindrome.')\n  else\n    WriteLn('The number is not a palindrome.');\nend.\n```"
  },
  {
    "task": "Develop a script to decide if a number is a perfect number.",
    "code": "```pascal\nprogram PerfectNumber;\n\nvar\n  num, sum, i: integer;\n\nbegin\n  write('Enter a number: ');\n  readln(num);\n  \n  sum := 0;\n  \n  for i := 1 to num - 1 do\n  begin\n    if (num mod i = 0) then\n      sum := sum + i;\n  end;\n  \n  if (sum = num) then\n    writeln('The number is a perfect number.')\n  else\n    writeln('The number is not a perfect number.');\nend.\n```"
  },
  {
    "task": "Implement a system that determines the winner in a rock-paper-scissors game.",
    "code": "```pascal\nprogram RockPaperScissors;\n\nvar\n  player1, player2: string;\n\nbegin\n  writeln('Enter move for Player 1 (rock, paper, or scissors):');\n  readln(player1);\n  writeln('Enter move for Player 2 (rock, paper, or scissors):');\n  readln(player2);\n\n  if player1 = player2 then\n    writeln('It''s a tie!')\n  else if (player1 = 'rock') and (player2 = 'scissors') then\n    writeln('Player 1 wins!')\n  else if (player1 = 'scissors') and (player2 = 'paper') then\n    writeln('Player 1 wins!')\n  else if (player1 = 'paper') and (player2 = 'rock') then\n    writeln('Player 1 wins!')\n  else\n    writeln('Player 2 wins!');\nend.\n```"
  },
  {
    "task": "Design a function that suggests a movie genre based on user mood.",
    "code": "```pascal\nprogram MovieSuggestion;\n\nuses SysUtils;\n\nfunction SuggestMovieGenre(mood: string): string;\nbegin\n  mood := LowerCase(mood);\n  if mood = 'happy' then\n    SuggestMovieGenre := 'Comedy'\n  else if mood = 'sad' then\n    SuggestMovieGenre := 'Drama'\n  else if mood = 'adventurous' then\n    SuggestMovieGenre := 'Action'\n  else if mood = 'romantic' then\n    SuggestMovieGenre := 'Romance'\n  else if mood = 'scared' then\n    SuggestMovieGenre := 'Horror'\n  else\n    SuggestMovieGenre := 'Documentary';\nend;\n\nvar\n  userMood: string;\n  genre: string;\nbegin\n  Write('Enter your mood: ');\n  ReadLn(userMood);\n  genre := SuggestMovieGenre(userMood);\n  WriteLn('Suggested movie genre: ', genre);\nend.\n```"
  },
  {
    "task": "Write a program that checks if a file extension is valid for an image file.",
    "code": "```pascal\nprogram CheckImageFileExtension;\n\nuses\n  SysUtils;\n\nvar\n  fileName: string;\n  extension: string;\n\nbegin\n  Write('Enter the file name: ');\n  ReadLn(fileName);\n  extension := ExtractFileExt(fileName);\n\n  if (extension = '.jpg') or (extension = '.jpeg') or (extension = '.png') or (extension = '.gif') or\n     (extension = '.bmp') or (extension = '.tiff') then\n    WriteLn('The file extension is valid for an image file.')\n  else\n    WriteLn('The file extension is not valid for an image file.');\nend.\n```"
  },
  {
    "task": "Create a routine that decides the appropriate currency symbol based on country.",
    "code": "```pascal\nprogram CurrencySymbol;\n\nfunction GetCurrencySymbol(country: string): string;\nbegin\n  if country = 'USA' then\n    GetCurrencySymbol := '$'\n  else if country = 'UK' then\n    GetCurrencySymbol := '\u00a3'\n  else if country = 'Japan' then\n    GetCurrencySymbol := '\u00a5'\n  else if country = 'Eurozone' then\n    GetCurrencySymbol := '\u20ac'\n  else\n    GetCurrencySymbol := 'Unknown';\nend;\n\nvar\n  country: string;\n  symbol: string;\nbegin\n  writeln('Enter the country name:');\n  readln(country);\n  symbol := GetCurrencySymbol(country);\n  writeln('The currency symbol for ', country, ' is ', symbol);\nend.\n```"
  },
  {
    "task": "Develop a function that determines if a string is a valid palindrome ignoring spaces and punctuation.",
    "code": "```pascal\nprogram PalindromeCheck;\n\nuses\n  SysUtils;\n\nfunction IsPalindrome(s: string): Boolean;\nvar\n  i, j: Integer;\n  cleanedStr: string;\nbegin\n  cleanedStr := '';\n  for i := 1 to Length(s) do\n    if s[i] in ['a'..'z', 'A'..'Z', '0'..'9'] then\n      cleanedStr := cleanedStr + LowerCase(s[i]);\n\n  i := 1;\n  j := Length(cleanedStr);\n  while i < j do\n  begin\n    if cleanedStr[i] <> cleanedStr[j] then\n    begin\n      IsPalindrome := False;\n      Exit;\n    end;\n    Inc(i);\n    Dec(j);\n  end;\n  IsPalindrome := True;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Implement a program that checks if a number is in the Fibonacci sequence.",
    "code": "```pascal\nprogram FibonacciCheck;\n\nfunction IsFibonacci(n: Integer): Boolean;\nvar\n  a, b, temp: Integer;\nbegin\n  a := 0;\n  b := 1;\n  while b < n do\n  begin\n    temp := b;\n    b := a + b;\n    a := temp;\n  end;\n  IsFibonacci := (b = n) or (n = 0);\nend;\n\nvar\n  number: Integer;\nbegin\n  Write('Enter a number: ');\n  ReadLn(number);\n  if IsFibonacci(number) then\n    WriteLn('The number is in the Fibonacci sequence.')\n  else\n    WriteLn('The number is not in the Fibonacci sequence.')\nend.\n```"
  },
  {
    "task": "Design a script to calculate the correct tip based on service quality rating.",
    "code": "```pascal\nprogram TipCalculator;\n\nvar\n  serviceQuality: string;\n  billAmount, tip: real;\n\nbegin\n  writeln('Enter the bill amount: ');\n  readln(billAmount);\n  writeln('Enter the service quality (excellent, good, average, poor): ');\n  readln(serviceQuality);\n  \n  if serviceQuality = 'excellent' then\n    tip := billAmount * 0.20\n  else if serviceQuality = 'good' then\n    tip := billAmount * 0.15\n  else if serviceQuality = 'average' then\n    tip := billAmount * 0.10\n  else if serviceQuality = 'poor' then\n    tip := billAmount * 0.05\n  else\n    tip := 0.0;\n\n  writeln('The calculated tip is: ', tip:0:2);\nend.\n```"
  },
  {
    "task": "Write a function that determines if a year is a century year.",
    "code": "```pascal\nfunction IsCenturyYear(year: Integer): Boolean;\nbegin\n  if year mod 100 = 0 then\n    IsCenturyYear := True\n  else\n    IsCenturyYear := False;\nend;\n```"
  },
  {
    "task": "Create a program that checks if a date falls on a weekend.",
    "code": "```pascal\nprogram CheckWeekend;\n\nuses\n  SysUtils;\n\nvar\n  Year, Month, Day: Word;\n  DayOfWeek: Integer;\n\nbegin\n  Write('Enter Year: ');\n  ReadLn(Year);\n  Write('Enter Month (1-12): ');\n  ReadLn(Month);\n  Write('Enter Day (1-31): ');\n  ReadLn(Day);\n\n  DayOfWeek := DayOfWeek(EncodeDate(Year, Month, Day));\n\n  if (DayOfWeek = 1) or (DayOfWeek = 7) then\n    Writeln('The date falls on a weekend.')\n  else\n    Writeln('The date does not fall on a weekend.');\nend.\n```"
  },
  {
    "task": "Develop a routine that suggests a book based on genre preference.",
    "code": "```pascal\nprogram BookSuggestion;\n\nuses\n  crt;\n\nvar\n  genre: string;\n\nbegin\n  clrscr;\n  \n  writeln('Enter your preferred genre (Fantasy, Science Fiction, Mystery, Romance): ');\n  readln(genre);\n  \n  if genre = 'Fantasy' then\n    writeln('Suggested Book: The Hobbit by J.R.R. Tolkien')\n  else if genre = 'Science Fiction' then\n    writeln('Suggested Book: Dune by Frank Herbert')\n  else if genre = 'Mystery' then\n    writeln('Suggested Book: The Girl with the Dragon Tattoo by Stieg Larsson')\n  else if genre = 'Romance' then\n    writeln('Suggested Book: Pride and Prejudice by Jane Austen')\n  else\n    writeln('Genre not recognized. Please try again.');\n\n  readln;\nend.\n```"
  },
  {
    "task": "Implement a system that determines if a student passes or fails based on their grades.",
    "code": "```pascal\nprogram PassOrFail;\n\nvar\n  grade: Integer;\n\nbegin\n  Write('Enter the student''s grade: ');\n  ReadLn(grade);\n\n  if grade >= 50 then\n    WriteLn('Pass')\n  else\n    WriteLn('Fail');\nend.\n```"
  },
  {
    "task": "Design a function to validate if a string is a valid URL.",
    "code": "```pascal\nprogram ValidateURL;\n\nuses\n  SysUtils, RegExpr;\n\nfunction IsValidURL(const URL: string): Boolean;\nvar\n  Regex: TRegExpr;\nbegin\n  Regex := TRegExpr.Create;\n  try\n    Regex.Expression := '^((http|https):\\/\\/)?([a-zA-Z0-9]+(\\.[a-zA-Z0-9]+)+.*)$';\n    Result := Regex.Exec(URL);\n  finally\n    Regex.Free;\n  end;\nend;\n\nvar\n  TestURL: string;\nbegin\n  TestURL := 'https://www.example.com';\n  if IsValidURL(TestURL) then\n    WriteLn('Valid URL')\n  else\n    WriteLn('Invalid URL');\nend.\n```"
  },
  {
    "task": "Write a program that checks if a point is inside a rectangle given its coordinates.",
    "code": "```pascal\nprogram CheckPointInRectangle;\n\nvar\n  x, y: Integer;\n  rectX1, rectY1, rectX2, rectY2: Integer;\n\nbegin\n  { Define the rectangle coordinates }\n  rectX1 := 1;\n  rectY1 := 1;\n  rectX2 := 5;\n  rectY2 := 5;\n\n  { Input the point coordinates }\n  Write('Enter x coordinate of the point: ');\n  ReadLn(x);\n  Write('Enter y coordinate of the point: ');\n  ReadLn(y);\n\n  { Check if the point is inside the rectangle }\n  if (x >= rectX1) and (x <= rectX2) and (y >= rectY1) and (y <= rectY2) then\n    WriteLn('The point is inside the rectangle.')\n  else\n    WriteLn('The point is not inside the rectangle.');\nend.\n```"
  },
  {
    "task": "Create a script to determine if a word can be constructed from a given set of letters.",
    "code": "```pascal\nprogram CanConstructWord;\n\nuses\n  SysUtils;\n\nfunction CanConstruct(word, letters: string): Boolean;\nvar\n  i, index: Integer;\nbegin\n  for i := 1 to Length(word) do\n  begin\n    index := Pos(word[i], letters);\n    if index = 0 then\n    begin\n      CanConstruct := False;\n      Exit;\n    end\n    else\n    begin\n      Delete(letters, index, 1);\n    end;\n  end;\n  CanConstruct := True;\nend;\n\nvar\n  word, letters: string;\nbegin\n  Write('Enter the word to check: ');\n  ReadLn(word);\n  Write('Enter the available letters: ');\n  ReadLn(letters);\n\n  if CanConstruct(word, letters) then\n    WriteLn('Yes, the word can be constructed.')\n  else\n    WriteLn('No, the word cannot be constructed.');\nend.\n```"
  },
  {
    "task": "Develop a routine that calculates insurance premiums based on age and driving record.",
    "code": "```pascal\nprogram InsurancePremium;\n\nfunction CalculatePremium(age: Integer; hasGoodRecord: Boolean): Real;\nbegin\n  if age < 25 then\n  begin\n    if hasGoodRecord then\n      CalculatePremium := 1500.0\n    else\n      CalculatePremium := 2000.0;\n  end\n  else\n  begin\n    if hasGoodRecord then\n      CalculatePremium := 1000.0\n    else\n      CalculatePremium := 1500.0;\n  end;\nend;\n\nvar\n  age: Integer;\n  hasGoodRecord: Boolean;\n  premium: Real;\nbegin\n  { Example Usage }\n  age := 30;\n  hasGoodRecord := True; { or False }\n  premium := CalculatePremium(age, hasGoodRecord);\n  WriteLn('The calculated premium is: ', premium:0:2);\nend.\n```"
  },
  {
    "task": "Implement a program that checks for palindrome sentences.",
    "code": "```pascal\nprogram PalindromeChecker;\n\nuses\n  SysUtils;\n\nfunction IsPalindrome(sentence: string): Boolean;\nvar\n  i, j: Integer;\n  cleanedSentence: string;\nbegin\n  cleanedSentence := '';\n  \n  for i := 1 to Length(sentence) do\n    if sentence[i] in ['A'..'Z', 'a'..'z', '0'..'9'] then\n      cleanedSentence := cleanedSentence + UpCase(sentence[i]);\n\n  i := 1;\n  j := Length(cleanedSentence);\n  \n  while i < j do\n  begin\n    if cleanedSentence[i] <> cleanedSentence[j] then\n    begin\n      IsPalindrome := False;\n      Exit;\n    end;\n    Inc(i);\n    Dec(j);\n  end;\n  \n  IsPalindrome := True;\nend;\n\nvar\n  input: string;\n\nbegin\n  Write('Enter a sentence: ');\n  ReadLn(input);\n  \n  if IsPalindrome(input) then\n    WriteLn('The sentence is a palindrome.')\n  else\n    WriteLn('The sentence is not a palindrome.');\nend.\n```"
  },
  {
    "task": "Design a function to evaluate if a string contains balanced parentheses.",
    "code": "```pascal\nprogram BalancedParentheses;\n\nfunction IsBalanced(s: string): Boolean;\nvar\n  i, balance: Integer;\nbegin\n  balance := 0;\n  for i := 1 to Length(s) do\n  begin\n    if s[i] = '(' then\n      Inc(balance)\n    else if s[i] = ')' then\n      Dec(balance);\n      \n    if balance < 0 then\n    begin\n      IsBalanced := False;\n      Exit;\n    end;\n  end;\n  IsBalanced := balance = 0;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Write a program that suggests a pet based on living conditions and preferences.",
    "code": "```pascal\nprogram PetSuggestion;\n\nvar\n  livingSpace: string;\n  allergies: string;\n  activityLevel: string;\n  petSuggestion: string;\n\nbegin\n  writeln('Enter living space (small/apartment, medium/house, large/farm): ');\n  readln(livingSpace);\n  \n  writeln('Do you have allergies? (yes/no): ');\n  readln(allergies);\n  \n  writeln('What is your preferred activity level? (low/medium/high): ');\n  readln(activityLevel);\n\n  if (livingSpace = 'small') and (allergies = 'no') and (activityLevel = 'low') then\n    petSuggestion := 'Consider a cat or a small dog.'\n  else if (livingSpace = 'medium') and (allergies = 'yes') and (activityLevel = 'medium') then\n    petSuggestion := 'Consider a hypoallergenic dog breed.'\n  else if (livingSpace = 'large') and (allergies = 'no') and (activityLevel = 'high') then\n    petSuggestion := 'Consider a large dog or a horse.'\n  else if (livingSpace = 'small') and (allergies = 'yes') then\n    petSuggestion := 'Consider a fish or a reptile.'\n  else\n    petSuggestion := 'Consider a pet that suits your lifestyle and preferences.';\n\n  writeln('Pet Suggestion: ', petSuggestion);\nend.\n```"
  },
  {
    "task": "Create a routine that determines if a phone number is valid based on format.",
    "code": "```pascal\nprogram PhoneNumberValidation;\n\nfunction IsValidPhoneNumber(phoneNumber: string): boolean;\nvar\n  i: integer;\nbegin\n  if Length(phoneNumber) <> 10 then\n    Exit(False);\n\n  for i := 1 to Length(phoneNumber) do\n  begin\n    if not (phoneNumber[i] in ['0'..'9']) then\n      Exit(False);\n  end;\n\n  Exit(True);\nend;\n\nvar\n  phoneNumber: string;\nbegin\n  writeln('Enter a phone number: ');\n  readln(phoneNumber);\n\n  if IsValidPhoneNumber(phoneNumber) then\n    writeln('The phone number is valid.')\n  else\n    writeln('The phone number is invalid.');\nend.\n```"
  },
  {
    "task": "Develop a function that checks if two rectangles overlap.",
    "code": "```pascal\nprogram RectangleOverlap;\n\ntype\n  TRectangle = record\n    x1, y1, x2, y2: Integer;\n  end;\n\nfunction DoRectanglesOverlap(rect1, rect2: TRectangle): Boolean;\nbegin\n  if (rect1.x1 >= rect2.x2) or (rect2.x1 >= rect1.x2) or\n     (rect1.y1 >= rect2.y2) or (rect2.y1 >= rect1.y2) then\n    DoRectanglesOverlap := False\n  else\n    DoRectanglesOverlap := True;\nend;\n\nvar\n  rect1, rect2: TRectangle;\n  overlap: Boolean;\nbegin\n  rect1.x1 := 0; rect1.y1 := 0; rect1.x2 := 2; rect1.y2 := 2;\n  rect2.x1 := 1; rect2.y1 := 1; rect2.x2 := 3; rect2.y2 := 3;\n\n  overlap := DoRectanglesOverlap(rect1, rect2);\n\n  if overlap then\n    Writeln('Rectangles overlap')\n  else\n    Writeln('Rectangles do not overlap');\nend.\n```"
  },
  {
    "task": "Implement a program that chooses a beverage based on user input time.",
    "code": "```pascal\nprogram ChooseBeverage;\n\nvar\n  time: Integer;\n  beverage: String;\n\nbegin\n  Write('Enter the time (in 24-hour format): ');\n  ReadLn(time);\n\n  if (time >= 0) and (time < 12) then\n    beverage := 'Coffee'\n  else if (time >= 12) and (time < 18) then\n    beverage := 'Tea'\n  else if (time >= 18) and (time <= 23) then\n    beverage := 'Juice'\n  else\n    beverage := 'Invalid time input';\n\n  WriteLn('The chosen beverage is: ', beverage);\nend.\n```"
  },
  {
    "task": "Design a script to determine if a URL is secure (HTTPS).",
    "code": "```pascal\nprogram CheckURLSecurity;\n\nvar\n  url: string;\n\nbegin\n  writeln('Enter the URL:');\n  readln(url);\n  \n  if Pos('https://', url) = 1 then\n    writeln('The URL is secure (HTTPS).')\n  else\n    writeln('The URL is not secure.');\nend.\n```"
  },
  {
    "task": "Write a function that outputs different messages based on the input number's divisibility.",
    "code": "```pascal\nprogram DivisibilityCheck;\n\nfunction CheckDivisibility(num: Integer): String;\nbegin\n  if (num mod 2 = 0) and (num mod 3 = 0) then\n    CheckDivisibility := 'Divisible by both 2 and 3'\n  else if num mod 2 = 0 then\n    CheckDivisibility := 'Divisible by 2'\n  else if num mod 3 = 0 then\n    CheckDivisibility := 'Divisible by 3'\n  else\n    CheckDivisibility := 'Not divisible by 2 or 3';\nend;\n\nvar\n  number: Integer;\nbegin\n  Write('Enter a number: ');\n  ReadLn(number);\n  WriteLn(CheckDivisibility(number));\nend.\n```"
  },
  {
    "task": "Create a program to decide if a person should bring an umbrella based on the weather forecast.",
    "code": "```pascal\nprogram UmbrellaDecision;\n\nvar\n  weather: string;\n  bringUmbrella: boolean;\n\nbegin\n  write('Enter the weather forecast (sunny, rainy, cloudy): ');\n  readln(weather);\n  \n  if (weather = 'rainy') then\n    bringUmbrella := true\n  else\n    bringUmbrella := false;\n\n  if bringUmbrella then\n    writeln('You should bring an umbrella.')\n  else\n    writeln('No need to bring an umbrella.');\nend.\n```"
  },
  {
    "task": "Develop a routine that checks if a chess move is valid.",
    "code": "```pascal\nprogram ChessMoveValidator;\n\ntype\n  TMove = record\n    fromX, fromY: Integer;\n    toX, toY: Integer;\n  end;\n\nfunction IsValidMove(move: TMove): Boolean;\nbegin\n  if (move.fromX < 1) or (move.fromX > 8) or\n     (move.fromY < 1) or (move.fromY > 8) or\n     (move.toX < 1) or (move.toX > 8) or\n     (move.toY < 1) or (move.toY > 8) then\n    Exit(False);\n\n  if (move.fromX = move.toX) and (move.fromY = move.toY) then\n    Exit(False);\n\n  // Example: Check if it's a valid rook move\n  if (move.fromX = move.toX) or (move.fromY = move.toY) then\n    Exit(True);\n\n  // Example: Check if it's a valid bishop move\n  if Abs(move.fromX - move.toX) = Abs(move.fromY - move.toY) then\n    Exit(True);\n\n  // Add additional piece move validations here...\n\n  Exit(False);\nend;\n\nvar\n  move: TMove;\nbegin\n  move.fromX := 1;\n  move.fromY := 1;\n  move.toX := 1;\n  move.toY := 8;\n\n  if IsValidMove(move) then\n    WriteLn('The move is valid.')\n  else\n    WriteLn('The move is invalid.');\nend.\n```"
  },
  {
    "task": "Implement a program that outputs the number of days in a given month.",
    "code": "```pascal\nprogram DaysInMonth;\n\nvar\n  month, year, days: Integer;\n\nbegin\n  { Read the month and year }\n  Write('Enter month (1-12): ');\n  ReadLn(month);\n  Write('Enter year: ');\n  ReadLn(year);\n  \n  { Determine the number of days in the month }\n  case month of\n    1, 3, 5, 7, 8, 10, 12: days := 31;\n    4, 6, 9, 11: days := 30;\n    2: \n      begin\n        if ((year mod 4 = 0) and (year mod 100 <> 0)) or (year mod 400 = 0) then\n          days := 29\n        else\n          days := 28;\n      end;\n  else\n    days := 0; { Invalid month }\n  end;\n\n  { Output the result }\n  if days <> 0 then\n    WriteLn('Number of days:', days)\n  else\n    WriteLn('Invalid month entered.');\nend.\n```"
  },
  {
    "task": "Design a function that validates if a string is a valid hexadecimal number.",
    "code": "```pascal\nprogram HexValidator;\n\nuses SysUtils;\n\nfunction IsHexadecimal(s: string): Boolean;\nvar\n  i: Integer;\nbegin\n  s := Trim(s);\n  if Length(s) = 0 then\n  begin\n    IsHexadecimal := False;\n    Exit;\n  end;\n  \n  for i := 1 to Length(s) do\n  begin\n    if not (s[i] in ['0'..'9', 'A'..'F', 'a'..'f']) then\n    begin\n      IsHexadecimal := False;\n      Exit;\n    end;\n  end;\n  \n  IsHexadecimal := True;\nend;\n\nbegin\n  { Example usage }\n  Writeln(IsHexadecimal('1A3F'));  { Outputs: TRUE }\n  Writeln(IsHexadecimal('GHIJ'));  { Outputs: FALSE }\nend.\n```"
  },
  {
    "task": "Write a script that checks if a word is present in a list of predefined words.",
    "code": "```pascal\nprogram CheckWordInList;\n\nvar\n  predefinedWords: array[1..5] of string = ('apple', 'banana', 'cherry', 'date', 'elderberry');\n  inputWord: string;\n  i: Integer;\n  found: Boolean;\n\nbegin\n  found := False;\n  Write('Enter a word to check: ');\n  ReadLn(inputWord);\n  \n  for i := 1 to Length(predefinedWords) do\n  begin\n    if predefinedWords[i] = inputWord then\n    begin\n      found := True;\n      Break;\n    end;\n  end;\n  \n  if found then\n    WriteLn('The word \"', inputWord, '\" is in the list.')\n  else\n    WriteLn('The word \"', inputWord, '\" is not in the list.');\nend.\n```"
  },
  {
    "task": "Create a routine to decide the correct tax bracket for a given income.",
    "code": "```pascal\nprogram TaxBracket;\n\nfunction GetTaxBracket(income: Real): String;\nbegin\n  if income < 10000 then\n    GetTaxBracket := 'Low income bracket'\n  else if income < 50000 then\n    GetTaxBracket := 'Middle income bracket'\n  else\n    GetTaxBracket := 'High income bracket';\nend;\n\nvar\n  income: Real;\n  bracket: String;\nbegin\n  Write('Enter the income: ');\n  ReadLn(income);\n\n  bracket := GetTaxBracket(income);\n  WriteLn('The tax bracket is: ', bracket);\nend.\n```"
  },
  {
    "task": "Develop a function that determines if a point is within a triangle.",
    "code": "```pascal\nprogram PointInTriangle;\n\ntype\n  TPoint = record\n    x, y: Real;\n  end;\n\nfunction Sign(p1, p2, p3: TPoint): Real;\nbegin\n  Sign := (p1.x - p3.x) * (p2.y - p3.y) - (p2.x - p3.x) * (p1.y - p3.y);\nend;\n\nfunction PointInTriangle(pt, v1, v2, v3: TPoint): Boolean;\nvar\n  d1, d2, d3: Real;\n  has_neg, has_pos: Boolean;\nbegin\n  d1 := Sign(pt, v1, v2);\n  d2 := Sign(pt, v2, v3);\n  d3 := Sign(pt, v3, v1);\n\n  has_neg := (d1 < 0) or (d2 < 0) or (d3 < 0);\n  has_pos := (d1 > 0) or (d2 > 0) or (d3 > 0);\n\n  PointInTriangle := not (has_neg and has_pos);\nend;\n\nvar\n  point, vertex1, vertex2, vertex3: TPoint;\n  result: Boolean;\nbegin\n  point.x := 1.0;\n  point.y := 1.0;\n\n  vertex1.x := 0.0;\n  vertex1.y := 0.0;\n  vertex2.x := 2.0;\n  vertex2.y := 0.0;\n  vertex3.x := 1.0;\n  vertex3.y := 2.0;\n\n  result := PointInTriangle(point, vertex1, vertex2, vertex3);\n\n  if result then\n    WriteLn('The point is inside the triangle.')\n  else\n    WriteLn('The point is outside the triangle.');\nend.\n```"
  },
  {
    "task": "Implement a program that checks if a given string is a valid binary number.",
    "code": "```pascal\nprogram CheckBinary;\n\nuses SysUtils;\n\nvar\n  input: string;\n  isValidBinary: boolean;\n  i: integer;\n\nbegin\n  Write('Enter a string: ');\n  ReadLn(input);\n\n  isValidBinary := True;\n  for i := 1 to Length(input) do\n  begin\n    if not (input[i] in ['0', '1']) then\n    begin\n      isValidBinary := False;\n      Break;\n    end;\n  end;\n\n  if isValidBinary then\n    WriteLn('The string is a valid binary number.')\n  else\n    WriteLn('The string is not a valid binary number.');\nend.\n```"
  },
  {
    "task": "Design a system to evaluate the risk level of an investment based on criteria.",
    "code": "```pascal\nprogram InvestmentRiskEvaluator;\n\nvar\n  investmentAmount: Real;\n  investmentDuration: Integer;\n  riskLevel: String;\n\nbegin\n  writeln('Enter the investment amount: ');\n  readln(investmentAmount);\n  writeln('Enter the investment duration in years: ');\n  readln(investmentDuration);\n\n  if (investmentAmount < 1000) and (investmentDuration < 1) then\n    riskLevel := 'High'\n  else if (investmentAmount >= 1000) and (investmentAmount <= 5000) and (investmentDuration >= 1) and (investmentDuration <= 3) then\n    riskLevel := 'Medium'\n  else\n    riskLevel := 'Low';\n\n  writeln('The risk level of the investment is: ', riskLevel);\nend.\n```"
  },
  {
    "task": "Write a program that suggests a vacation destination based on budget and preferences.",
    "code": "```pascal\nprogram VacationSuggestion;\n\nvar\n  budget: Integer;\n  preference: String;\n  destination: String;\n\nbegin\n  Write('Enter your budget: ');\n  ReadLn(budget);\n\n  Write('Do you prefer beach, mountains, or city? ');\n  ReadLn(preference);\n\n  if (budget < 500) then\n  begin\n    if (preference = 'beach') then\n      destination := 'Local Beach'\n    else if (preference = 'mountains') then\n      destination := 'Nearby Hills'\n    else if (preference = 'city') then\n      destination := 'Staycation in Your City'\n    else\n      destination := 'Invalid Preference';\n  end\n  else if (budget < 1000) then\n  begin\n    if (preference = 'beach') then\n      destination := 'National Beach'\n    else if (preference = 'mountains') then\n      destination := 'National Park'\n    else if (preference = 'city') then\n      destination := 'Nation\\'s Capital'\n    else\n      destination := 'Invalid Preference';\n  end\n  else\n  begin\n    if (preference = 'beach') then\n      destination := 'International Beach'\n    else if (preference = 'mountains') then\n      destination := 'Alps'\n    else if (preference = 'city') then\n      destination := 'World City'\n    else\n      destination := 'Invalid Preference';\n  end;\n\n  WriteLn('Suggested Destination: ', destination);\nend.\n```"
  },
  {
    "task": "Create a routine that checks if a username is already taken in a database.",
    "code": "```pascal\nprogram CheckUsername;\n\nuses SysUtils;\n\nfunction IsUsernameTaken(username: string; database: array of string): boolean;\nvar\n  i: integer;\nbegin\n  IsUsernameTaken := False;\n  for i := 0 to High(database) do\n  begin\n    if database[i] = username then\n    begin\n      IsUsernameTaken := True;\n      Break;\n    end;\n  end;\nend;\n\nvar\n  username: string;\n  database: array of string;\nbegin\n  database := ['Alice', 'Bob', 'Charlie'];\n  username := 'Dave';\n\n  if IsUsernameTaken(username, database) then\n    WriteLn('Username is already taken.')\n  else\n    WriteLn('Username is available.');\nend.\n```"
  },
  {
    "task": "Develop a function that determines if a string is a valid IPv4 address.",
    "code": "```pascal\nprogram CheckIPv4;\n\nfunction IsValidIPv4Address(IP: string): Boolean;\nvar\n  i, num, dotCount: Integer;\n  part: string;\nbegin\n  dotCount := 0;\n  part := '';\n  for i := 1 to Length(IP) do\n  begin\n    if IP[i] = '.' then\n    begin\n      Inc(dotCount);\n      if (dotCount > 3) or (part = '') then\n      begin\n        IsValidIPv4Address := False;\n        Exit;\n      end;\n      num := StrToIntDef(part, -1);\n      if (num < 0) or (num > 255) then\n      begin\n        IsValidIPv4Address := False;\n        Exit;\n      end;\n      part := '';\n    end\n    else if IP[i] in ['0'..'9'] then\n    begin\n      part := part + IP[i];\n    end\n    else\n    begin\n      IsValidIPv4Address := False;\n      Exit;\n    end;\n  end;\n  if (dotCount <> 3) or (part = '') then\n    IsValidIPv4Address := False\n  else\n  begin\n    num := StrToIntDef(part, -1);\n    IsValidIPv4Address := (num >= 0) and (num <= 255);\n  end;\nend;\n\nbegin\n  // Example use: WriteLn(IsValidIPv4Address('192.168.1.1'));\nend.\n```"
  },
  {
    "task": "Implement a program to decide which transportation method is quickest based on distance.",
    "code": "```pascal\nprogram QuickestTransport;\n\nvar\n  distance: Integer;\n  method: String;\n\nbegin\n  Write('Enter the distance (in kilometers): ');\n  ReadLn(distance);\n\n  if distance < 5 then\n    method := 'Walking'\n  else if distance < 20 then\n    method := 'Bicycle'\n  else if distance < 100 then\n    method := 'Car'\n  else\n    method := 'Airplane';\n\n  WriteLn('The quickest transportation method is: ', method);\nend.\n```"
  },
  {
    "task": "Design a script to validate if a number is a prime number.",
    "code": "```pascal\nprogram PrimeCheck;\n\nvar\n  n, i: Integer;\n  isPrime: Boolean;\n\nbegin\n  Write('Enter a number: ');\n  ReadLn(n);\n\n  if n <= 1 then\n    isPrime := False\n  else\n  begin\n    isPrime := True;\n    for i := 2 to n div 2 do\n    begin\n      if n mod i = 0 then\n      begin\n        isPrime := False;\n        Break;\n      end;\n    end;\n  end;\n\n  if isPrime then\n    WriteLn(n, ' is a prime number.')\n  else\n    WriteLn(n, ' is not a prime number.');\nend.\n```"
  },
  {
    "task": "Write a function that checks if a number is divisible by another number without remainder.",
    "code": "```pascal\nfunction IsDivisible(num, divisor: Integer): Boolean;\nbegin\n  if divisor = 0 then\n    IsDivisible := False\n  else\n    IsDivisible := (num mod divisor) = 0;\nend;\n```"
  },
  {
    "task": "Create a program that determines the type of a quadrilateral based on side lengths.",
    "code": "```pascal\nprogram QuadrilateralType;\n\nvar\n  a, b, c, d: Integer;\n  quadrilateralType: String;\n\nbegin\n  Write('Enter the length of side a: ');\n  Readln(a);\n  Write('Enter the length of side b: ');\n  Readln(b);\n  Write('Enter the length of side c: ');\n  Readln(c);\n  Write('Enter the length of side d: ');\n  Readln(d);\n\n  if (a = b) and (b = c) and (c = d) then\n    quadrilateralType := 'Square'\n  else if (a = c) and (b = d) then\n    quadrilateralType := 'Rectangle'\n  else if (a = b) and (c = d) then\n    quadrilateralType := 'Rhombus'\n  else\n    quadrilateralType := 'Other quadrilateral';\n\n  Writeln('The quadrilateral is a ', quadrilateralType);\nend.\n```"
  },
  {
    "task": "Develop a routine to check if a sentence contains all letters of the alphabet.",
    "code": "```pascal\nprogram CheckPangram;\n\nuses SysUtils;\n\nfunction IsPangram(sentence: string): Boolean;\nvar\n  alphabet: set of Char;\n  ch: Char;\nbegin\n  alphabet := [];\n  sentence := LowerCase(sentence);\n\n  for ch in sentence do\n  begin\n    if ch in ['a'..'z'] then\n      Include(alphabet, ch);\n  end;\n\n  IsPangram := alphabet = ['a'..'z'];\nend;\n\nvar\n  sentence: string;\nbegin\n  Write('Enter a sentence: ');\n  ReadLn(sentence);\n\n  if IsPangram(sentence) then\n    WriteLn('The sentence is a pangram.')\n  else\n    WriteLn('The sentence is not a pangram.');\nend.\n```"
  },
  {
    "task": "Implement a program that outputs the appropriate error message based on an error code.",
    "code": "```pascal\nprogram ErrorMessage;\n\nvar\n  errorCode: Integer;\n\nbegin\n  writeln('Enter error code: ');\n  readln(errorCode);\n\n  case errorCode of\n    1: writeln('Error 1: File not found');\n    2: writeln('Error 2: Access denied');\n    3: writeln('Error 3: Disk full');\n    4: writeln('Error 4: Illegal operation');\n  else\n    writeln('Unknown error');\n  end;\nend.\n```"
  },
  {
    "task": "Design a function that categorizes a movie rating as G, PG, PG-13, or R.",
    "code": "```pascal\nprogram MovieRating;\n\nfunction CategorizeRating(rating: Integer): String;\nbegin\n  if (rating <= 0) then\n    CategorizeRating := 'Invalid'\n  else if (rating <= 12) then\n    CategorizeRating := 'G'\n  else if (rating <= 16) then\n    CategorizeRating := 'PG'\n  else if (rating <= 18) then\n    CategorizeRating := 'PG-13'\n  else\n    CategorizeRating := 'R';\nend;\n\nvar\n  rating: Integer;\n  category: String;\nbegin\n  rating := 15; { Example rating input }\n  category := CategorizeRating(rating);\n  Writeln('The movie rating category is: ', category);\nend.\n```"
  },
  {
    "task": "Write a script to check if a string is a valid Roman numeral.",
    "code": "```pascal\nprogram CheckRomanNumeral;\n\nfunction IsValidRomanNumeral(s: string): Boolean;\nvar\n  i, len: Integer;\n  c: Char;\nbegin\n  len := Length(s);\n  if len = 0 then\n  begin\n    IsValidRomanNumeral := False;\n    Exit;\n  end;\n\n  for i := 1 to len do\n  begin\n    c := s[i];\n    case c of\n      'I', 'V', 'X', 'L', 'C', 'D', 'M': Continue;\n    else\n      begin\n        IsValidRomanNumeral := False;\n        Exit;\n      end;\n    end;\n  end;\n  IsValidRomanNumeral := True;\nend;\n\nvar\n  input: string;\nbegin\n  Write('Enter a string to check if it is a valid Roman numeral: ');\n  ReadLn(input);\n  if IsValidRomanNumeral(input) then\n    WriteLn('The string is a valid Roman numeral.')\n  else\n    WriteLn('The string is not a valid Roman numeral.');\nend.\n```"
  },
  {
    "task": "Create a routine that decides if a person can retire based on age and years worked.",
    "code": "```pascal\nprogram RetirementEligibility;\n\nfunction CanRetire(age, yearsWorked: Integer): Boolean;\nbegin\n  if (age >= 65) or (yearsWorked >= 40) or ((age >= 60) and (yearsWorked >= 35)) then\n    CanRetire := True\n  else\n    CanRetire := False;\nend;\n\nvar\n  age, yearsWorked: Integer;\n  eligible: Boolean;\nbegin\n  Write('Enter age: ');\n  ReadLn(age);\n  Write('Enter years worked: ');\n  ReadLn(yearsWorked);\n\n  eligible := CanRetire(age, yearsWorked);\n\n  if eligible then\n    WriteLn('The person can retire.')\n  else\n    WriteLn('The person cannot retire.');\nend.\n```"
  },
  {
    "task": "Develop a function that outputs a different emoji based on user mood input.",
    "code": "```pascal\nprogram MoodEmoji;\n\nuses\n  SysUtils;\n\nfunction MoodToEmoji(mood: string): string;\nbegin\n  if mood = 'happy' then\n    Result := '\ud83d\ude0a'\n  else if mood = 'sad' then\n    Result := '\ud83d\ude22'\n  else if mood = 'angry' then\n    Result := '\ud83d\ude21'\n  else if mood = 'excited' then\n    Result := '\ud83e\udd29'\n  else\n    Result := '\ud83d\ude10';\nend;\n\nvar\n  userMood: string;\n  emoji: string;\nbegin\n  Write('Enter your mood: ');\n  ReadLn(userMood);\n  emoji := MoodToEmoji(LowerCase(userMood));\n  WriteLn('Your emoji: ', emoji);\nend.\n```"
  },
  {
    "task": "Implement a program that checks if a password meets security requirements.",
    "code": "```pascal\nprogram PasswordCheck;\n\nuses SysUtils;\n\nvar\n  password: string;\n  hasUpper, hasLower, hasDigit: Boolean;\n  i: Integer;\n  \nbegin\n  Write('Enter the password: ');\n  Readln(password);\n  \n  hasUpper := False;\n  hasLower := False;\n  hasDigit := False;\n  \n  for i := 1 to Length(password) do\n  begin\n    if password[i] in ['A'..'Z'] then\n      hasUpper := True\n    else if password[i] in ['a'..'z'] then\n      hasLower := True\n    else if password[i] in ['0'..'9'] then\n      hasDigit := True;\n  end;\n  \n  if (Length(password) >= 8) and hasUpper and hasLower and hasDigit then\n    Writeln('Password is secure.')\n  else\n    Writeln('Password does not meet security requirements.');\nend.\n```"
  },
  {
    "task": "Design a script to determine if a number is a palindrome when reversed.",
    "code": "```pascal\nprogram PalindromeCheck;\nvar\n  num, reversedNum, remainder, originalNum: Integer;\nbegin\n  writeln('Enter an integer:');\n  readln(num);\n\n  originalNum := num;\n  reversedNum := 0;\n\n  while num <> 0 do\n  begin\n    remainder := num mod 10;\n    reversedNum := reversedNum * 10 + remainder;\n    num := num div 10;\n  end;\n\n  if originalNum = reversedNum then\n    writeln('The number is a palindrome.')\n  else\n    writeln('The number is not a palindrome.');\nend.\n```"
  },
  {
    "task": "Write a function that evaluates if a given day is a holiday.",
    "code": "```pascal\nprogram HolidayChecker;\n\nfunction IsHoliday(day: string): Boolean;\nbegin\n  if (day = 'New Year') or (day = 'Christmas') or (day = 'Independence Day') then\n    IsHoliday := True\n  else\n    IsHoliday := False;\nend;\n\nvar\n  day: string;\n  result: Boolean;\nbegin\n  Write('Enter the name of the day: ');\n  ReadLn(day);\n  result := IsHoliday(day);\n  if result then\n    WriteLn(day, ' is a holiday.')\n  else\n    WriteLn(day, ' is not a holiday.');\nend.\n```"
  },
  {
    "task": "Create a program to decide if a library book is overdue based on the due date.",
    "code": "```pascal\nprogram CheckOverdueBook;\n\nuses\n  SysUtils, DateUtils;\n\nvar\n  dueDate, currentDate: TDateTime;\n  isOverdue: Boolean;\n\nbegin\n  { Assume the due date is set to a specific date }\n  dueDate := EncodeDate(2023, 10, 10);  { Example due date }\n\n  { Get the current date }\n  currentDate := Now;\n\n  { Check if the book is overdue }\n  isOverdue := currentDate > dueDate;\n\n  if isOverdue then\n    writeln('The book is overdue.')\n  else\n    writeln('The book is not overdue.');\nend.\n```"
  },
  {
    "task": "Develop a routine that checks if a given year is part of a leap century.",
    "code": "```pascal\nprogram LeapCenturyCheck;\n\nfunction IsLeapCentury(year: Integer): Boolean;\nbegin\n  if (year mod 400 = 0) then\n    IsLeapCentury := True\n  else\n    IsLeapCentury := False;\nend;\n\nvar\n  year: Integer;\nbegin\n  Write('Enter a year: ');\n  ReadLn(year);\n\n  if IsLeapCentury(year) then\n    WriteLn(year, ' is part of a leap century.')\n  else\n    WriteLn(year, ' is not part of a leap century.');\nend.\n```"
  },
  {
    "task": "Implement a system to determine the correct category for a product based on user input.",
    "code": "```pascal\nprogram ProductCategory;\n\nvar\n  productType: string;\n  category: string;\n\nbegin\n  writeln('Enter the product type:');\n  readln(productType);\n\n  if productType = 'Electronics' then\n    category := 'Technology'\n  else if productType = 'Clothing' then\n    category := 'Apparel'\n  else if productType = 'Food' then\n    category := 'Groceries'\n  else\n    category := 'Miscellaneous';\n\n  writeln('The product category is: ', category);\nend.\n```"
  }
]