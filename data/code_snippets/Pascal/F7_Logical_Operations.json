[
  {
    "task": "Create a function that takes two boolean inputs and returns true if both are true using logical AND.",
    "code": "```pascal\nprogram LogicalAndFunction;\n\nfunction BothTrue(a, b: Boolean): Boolean;\nbegin\n  BothTrue := a and b;\nend;\n\nbegin\n  { Example usage: }\n  Writeln(BothTrue(True, True));   { Outputs: TRUE }\n  Writeln(BothTrue(True, False));  { Outputs: FALSE }\n  Writeln(BothTrue(False, True));  { Outputs: FALSE }\n  Writeln(BothTrue(False, False)); { Outputs: FALSE }\nend.\n```"
  },
  {
    "task": "Write a script to check if either of two given conditions are met using logical OR.",
    "code": "```pascal\nprogram LogicalOrExample;\nvar\n  condition1, condition2: Boolean;\nbegin\n  condition1 := True;  { Example condition }\n  condition2 := False; { Example condition }\n\n  if condition1 or condition2 then\n    writeln('At least one condition is met.')\n  else\n    writeln('Neither condition is met.');\nend.\n```"
  },
  {
    "task": "Develop a program that negates a boolean variable using logical NOT.",
    "code": "```pascal\nprogram NegateBoolean;\n\nvar\n  originalValue, negatedValue: Boolean;\n\nbegin\n  originalValue := True;\n  negatedValue := not originalValue;\n  WriteLn('Original Value: ', originalValue);\n  WriteLn('Negated Value: ', negatedValue);\nend.\n```"
  },
  {
    "task": "Implement a feature that determines if a number is within a specific range using logical operators.",
    "code": "```pascal\nprogram CheckNumberInRange;\n\nvar\n  number, lowerBound, upperBound: integer;\n  isInRange: boolean;\n\nbegin\n  { Assign values to number, lowerBound, and upperBound }\n  number := 15;\n  lowerBound := 10;\n  upperBound := 20;\n\n  { Determine if number is within the range using logical operators }\n  isInRange := (number >= lowerBound) and (number <= upperBound);\n\n  { Output the result }\n  if isInRange then\n    writeln('The number is within the range.')\n  else\n    writeln('The number is not within the range.');\nend.\n```"
  },
  {
    "task": "Design a system that checks if a user has both read and write permissions using logical AND.",
    "code": "```pascal\nprogram CheckPermissions;\n\nvar\n  hasReadPermission, hasWritePermission, hasBothPermissions: Boolean;\n\nbegin\n  { Example input values for permissions }\n  hasReadPermission := True;  { Assume user has read permission }\n  hasWritePermission := True; { Assume user has write permission }\n  \n  { Check if user has both read and write permissions }\n  hasBothPermissions := hasReadPermission and hasWritePermission;\n  \n  { Output the result }\n  if hasBothPermissions then\n    writeln('User has both read and write permissions.')\n  else\n    writeln('User does not have both read and write permissions.');\nend.\n```"
  },
  {
    "task": "Write a function to verify if a string is neither empty nor null using logical NOT.",
    "code": "```pascal\nfunction IsStringValid(const S: string): Boolean;\nbegin\n  IsStringValid := not ((S = '') or (S = #0));\nend;\n```"
  },
  {
    "task": "Create a conditional statement that executes a block of code if either of two expressions are true using logical OR.",
    "code": "```pascal\nprogram LogicalOperationsExample;\nvar\n  condition1, condition2: Boolean;\nbegin\n  condition1 := True;\n  condition2 := False;\n\n  if (condition1 or condition2) then\n  begin\n    writeln('At least one condition is true.');\n  end;\nend.\n```"
  },
  {
    "task": "Build a program that inverts the truth value of a given condition using logical NOT.",
    "code": "```pascal\nprogram InvertTruthValue;\n\nvar\n  condition: Boolean;\n  invertedCondition: Boolean;\n\nbegin\n  condition := True;  { Example condition }\n  invertedCondition := not condition;\n  writeln('Original condition: ', condition);\n  writeln('Inverted condition: ', invertedCondition);\nend.\n```"
  },
  {
    "task": "Compose a function to return true if a list is not empty using logical NOT.",
    "code": "```pascal\nprogram CheckListNotEmpty;\nuses SysUtils;\n\nfunction IsNotEmpty(const list: array of Integer): Boolean;\nbegin\n  IsNotEmpty := not (Length(list) = 0);\nend;\n\nbegin\n  // Example usage\n  Writeln(IsNotEmpty([1, 2, 3])); // Outputs: TRUE\n  Writeln(IsNotEmpty([]));        // Outputs: FALSE\nend.\n```"
  },
  {
    "task": "Develop a filter that selects items from a collection only if they meet multiple criteria using logical AND.",
    "code": "```pascal\nprogram FilterItems;\n\ntype\n  TItem = record\n    Value1: Integer;\n    Value2: Integer;\n    Value3: Integer;\n  end;\n\nvar\n  Items: array of TItem;\n  FilteredItems: array of TItem;\n  i, count: Integer;\n\nfunction MeetsCriteria(Item: TItem): Boolean;\nbegin\n  Result := (Item.Value1 > 10) and (Item.Value2 < 50) and (Item.Value3 mod 2 = 0);\nend;\n\nbegin\n  { Example collection initialization }\n  SetLength(Items, 5);\n  Items[0].Value1 := 15; Items[0].Value2 := 45; Items[0].Value3 := 4;\n  Items[1].Value1 := 9; Items[1].Value2 := 30; Items[1].Value3 := 5;\n  Items[2].Value1 := 20; Items[2].Value2 := 55; Items[2].Value3 := 6;\n  Items[3].Value1 := 12; Items[3].Value2 := 35; Items[3].Value3 := 8;\n  Items[4].Value1 := 8; Items[4].Value2 := 25; Items[4].Value3 := 12;\n\n  count := 0;\n  SetLength(FilteredItems, Length(Items));\n  for i := 0 to High(Items) do\n  begin\n    if MeetsCriteria(Items[i]) then\n    begin\n      FilteredItems[count] := Items[i];\n      Inc(count);\n    end;\n  end;\n  SetLength(FilteredItems, count);\n\n  { Output or further processing of FilteredItems }\nend.\n```"
  },
  {
    "task": "Write a script that checks if a value is outside a given range using logical OR.",
    "code": "```pascal\nprogram CheckValueOutsideRange;\n\nvar\n  value, lowerBound, upperBound: Integer;\n  isOutsideRange: Boolean;\n\nbegin\n  { Example values }\n  value := 15;\n  lowerBound := 10;\n  upperBound := 20;\n\n  isOutsideRange := (value < lowerBound) or (value > upperBound);\n\n  if isOutsideRange then\n    Writeln('Value is outside the range.')\n  else\n    Writeln('Value is inside the range.');\nend.\n```"
  },
  {
    "task": "Create a small program to toggle a boolean flag using logical NOT.",
    "code": "```pascal\nprogram ToggleBooleanFlag;\nvar\n  flag: Boolean;\nbegin\n  flag := False;\n  writeln('Initial flag value: ', flag);\n  flag := not flag;\n  writeln('Toggled flag value: ', flag);\nend.\n```"
  },
  {
    "task": "Implement a feature that evaluates if a username is both unique and valid using logical AND.",
    "code": "```pascal\nprogram UsernameValidation;\n\nuses SysUtils;\n\nfunction IsUnique(username: string): Boolean;\nbegin\n    // Placeholder logic for uniqueness check\n    IsUnique := username <> 'existingUser';\nend;\n\nfunction IsValid(username: string): Boolean;\nbegin\n    // Placeholder logic for validity check\n    IsValid := Length(username) > 3;\nend;\n\nfunction IsUniqueAndValid(username: string): Boolean;\nbegin\n    IsUniqueAndValid := IsUnique(username) and IsValid(username);\nend;\n\nvar\n    username: string;\nbegin\n    Write('Enter username: ');\n    ReadLn(username);\n    if IsUniqueAndValid(username) then\n        WriteLn('Username is both unique and valid.')\n    else\n        WriteLn('Username is not unique or not valid.');\nend.\n```"
  },
  {
    "task": "Design a conditional to perform an action if neither of two flags are set using logical NOT.",
    "code": "```pascal\nprogram LogicalOperationsExample;\nvar\n  flag1, flag2: boolean;\nbegin\n  flag1 := false;\n  flag2 := false;\n\n  if not flag1 and not flag2 then\n  begin\n    writeln('Action performed because neither flag1 nor flag2 is set.');\n  end;\nend.\n```"
  },
  {
    "task": "Write a function that returns true if at least one of multiple boolean inputs is true using logical OR.",
    "code": "```pascal\nfunction AtLeastOneTrue(inputs: array of Boolean): Boolean;\nvar\n  i: Integer;\nbegin\n  for i := Low(inputs) to High(inputs) do\n  begin\n    if inputs[i] then\n    begin\n      AtLeastOneTrue := True;\n      Exit;\n    end;\n  end;\n  AtLeastOneTrue := False;\nend;\n```"
  },
  {
    "task": "Create a loop that continues executing as long as two conditions are both false using logical NOT and AND.",
    "code": "```pascal\nprogram LogicalOperations;\n\nvar\n  condition1, condition2: Boolean;\n\nbegin\n  condition1 := False;\n  condition2 := False;\n\n  while not condition1 and not condition2 do\n  begin\n    { Your code here }\n    { For demonstration purposes, we'll change the conditions to break the loop }\n    condition1 := True;\n    condition2 := True;\n  end;\nend.\n```"
  },
  {
    "task": "Develop a sequence that checks if a character is either a vowel or a consonant using logical OR.",
    "code": "```pascal\nprogram VowelOrConsonant;\n\nuses SysUtils;\n\nvar\n  ch: Char;\n  isVowel, isConsonant: Boolean;\n\nbegin\n  Write('Enter a character: ');\n  ReadLn(ch);\n  \n  ch := UpCase(ch);\n  \n  isVowel := (ch = 'A') or (ch = 'E') or (ch = 'I') or (ch = 'O') or (ch = 'U');\n  isConsonant := not isVowel and ((ch >= 'A') and (ch <= 'Z'));\n  \n  if isVowel then\n    WriteLn(ch, ' is a vowel.')\n  else if isConsonant then\n    WriteLn(ch, ' is a consonant.')\n  else\n    WriteLn(ch, ' is not a valid alphabet character.');\nend.\n```"
  },
  {
    "task": "Implement a validation that ensures a password is both of minimum length and contains numbers using logical AND.",
    "code": "```pascal\nprogram PasswordValidation;\n\nuses\n  SysUtils;\n\nfunction IsPasswordValid(password: string): Boolean;\nvar\n  i: Integer;\n  hasNumber: Boolean;\nbegin\n  hasNumber := False;\n  \n  for i := 1 to Length(password) do\n  begin\n    if password[i] in ['0'..'9'] then\n    begin\n      hasNumber := True;\n      Break;\n    end;\n  end;\n  \n  IsPasswordValid := (Length(password) >= 8) and hasNumber;\nend;\n\nvar\n  password: string;\nbegin\n  Write('Enter password: ');\n  ReadLn(password);\n  \n  if IsPasswordValid(password) then\n    WriteLn('Password is valid.')\n  else\n    WriteLn('Password is invalid.');\nend.\n```"
  },
  {
    "task": "Compose a test to determine if a point is not within a circle using logical NOT.",
    "code": "```pascal\nprogram PointNotInCircle;\n\nvar\n  x, y, circleX, circleY, radius: Real;\n  isOutside: Boolean;\n\nbegin\n  { Example values for the point and circle }\n  x := 5.0;       { X-coordinate of the point }\n  y := 5.0;       { Y-coordinate of the point }\n  circleX := 0.0; { X-coordinate of the circle's center }\n  circleY := 0.0; { Y-coordinate of the circle's center }\n  radius := 3.0;  { Radius of the circle }\n\n  { Calculate if the point is outside the circle }\n  isOutside := not ((sqr(x - circleX) + sqr(y - circleY)) <= sqr(radius));\n  \n  { Output the result }\n  if isOutside then\n    writeln('The point is outside the circle.')\n  else\n    writeln('The point is inside the circle.');\nend.\n```"
  },
  {
    "task": "Write a function to decide if a user is either an admin or an editor using logical OR.",
    "code": "```pascal\nprogram UserRoleCheck;\n\nfunction IsAdminOrEditor(isAdmin: Boolean; isEditor: Boolean): Boolean;\nbegin\n    IsAdminOrEditor := isAdmin or isEditor;\nend;\n\nvar\n    userIsAdmin, userIsEditor: Boolean;\n    result: Boolean;\nbegin\n    userIsAdmin := True;  { Example value, set according to your needs }\n    userIsEditor := False; { Example value, set according to your needs }\n\n    result := IsAdminOrEditor(userIsAdmin, userIsEditor);\n    writeln('User is either Admin or Editor: ', result);\nend.\n```"
  },
  {
    "task": "Create a conditional statement to trigger an alert if two sensors both detect motion using logical AND.",
    "code": "```pascal\nprogram SensorAlert;\n\nvar\n  sensor1, sensor2: boolean;\n\nbegin\n  sensor1 := true;  { Example value for sensor1 }\n  sensor2 := true;  { Example value for sensor2 }\n\n  if sensor1 and sensor2 then\n    writeln('Alert: Both sensors detect motion!');\nend.\n```"
  },
  {
    "task": "Design a program to validate an email format and ensure it contains a domain using logical AND.",
    "code": "```pascal\nprogram ValidateEmail;\n\nuses\n  SysUtils;\n\nfunction IsValidEmail(email: string): Boolean;\nbegin\n  IsValidEmail := (Pos('@', email) > 1) and (Pos('.', email, Pos('@', email)) > Pos('@', email) + 1);\nend;\n\nvar\n  email: string;\nbegin\n  Write('Enter an email address: ');\n  ReadLn(email);\n  if IsValidEmail(email) then\n    WriteLn('The email format is valid.')\n  else\n    WriteLn('The email format is invalid.');\nend.\n```"
  },
  {
    "task": "Develop a method to confirm that a transaction is neither fraudulent nor unauthorized using logical NOT.",
    "code": "```pascal\nprogram TransactionVerification;\n\nfunction IsTransactionValid(isFraudulent, isUnauthorized: Boolean): Boolean;\nbegin\n  IsTransactionValid := not (isFraudulent or isUnauthorized);\nend;\n\nvar\n  fraudulent, unauthorized: Boolean;\nbegin\n  fraudulent := False;\n  unauthorized := False;\n\n  if IsTransactionValid(fraudulent, unauthorized) then\n    WriteLn('Transaction is valid.')\n  else\n    WriteLn('Transaction is invalid.');\nend.\n```"
  },
  {
    "task": "Write a function that outputs true if a file is either missing or empty using logical OR.",
    "code": "```pascal\nprogram CheckFileStatus;\n\nuses\n  SysUtils;\n\nfunction IsFileMissingOrEmpty(const FileName: string): Boolean;\nvar\n  FileInfo: TSearchRec;\nbegin\n  if FindFirst(FileName, faAnyFile, FileInfo) <> 0 then\n    Result := True\n  else\n  begin\n    Result := (FileInfo.Size = 0);\n    FindClose(FileInfo);\n  end;\nend;\n\nbegin\n  // Example usage:\n  Writeln(IsFileMissingOrEmpty('example.txt'));\nend.\n```"
  },
  {
    "task": "Implement a system to check if a student's grade is neither failing nor incomplete using logical NOT.",
    "code": "```pascal\nprogram GradeCheck;\n\nvar\n  grade: char;\n\nbegin\n  writeln('Enter the student''s grade (A-F): ');\n  readln(grade);\n\n  if not ((grade = 'F') or (grade = 'I')) then\n    writeln('The grade is neither failing nor incomplete.')\n  else\n    writeln('The grade is either failing or incomplete.');\nend.\n```"
  },
  {
    "task": "Create a script that executes a command if a file is both readable and writable using logical AND.",
    "code": "```pascal\nprogram FileCheck;\n\nuses\n  SysUtils;\n\nvar\n  FileName: string;\n\nbegin\n  FileName := 'example.txt';\n  if FileIsReadable(FileName) and FileIsWritable(FileName) then\n  begin\n    Writeln('The file is both readable and writable.');\n    // Execute command here\n  end\n  else\n    Writeln('The file is not both readable and writable.');\nend.\n```"
  },
  {
    "task": "Compose a function to determine if a temperature is not within a safe operating range using logical NOT.",
    "code": "```pascal\nprogram CheckTemperature;\n\nfunction IsTemperatureUnsafe(temp: Integer): Boolean;\nconst\n  MinSafeTemp = 0;\n  MaxSafeTemp = 100;\nbegin\n  IsTemperatureUnsafe := not ((temp >= MinSafeTemp) and (temp <= MaxSafeTemp));\nend;\n\nvar\n  temperature: Integer;\nbegin\n  temperature := 50;\n  if IsTemperatureUnsafe(temperature) then\n    WriteLn('Temperature is unsafe.')\n  else\n    WriteLn('Temperature is safe.');\nend.\n```"
  },
  {
    "task": "Design a check to see if a car is either out of fuel or needs maintenance using logical OR.",
    "code": "```pascal\nprogram CarCheck;\n\nvar\n  outOfFuel, needsMaintenance: Boolean;\n  needsAttention: Boolean;\n\nbegin\n  { Example values }\n  outOfFuel := True;\n  needsMaintenance := False;\n  \n  { Logical OR operation }\n  needsAttention := outOfFuel or needsMaintenance;\n  \n  if needsAttention then\n    writeln('The car needs attention.')\n  else\n    writeln('The car is fine.');\nend.\n```"
  },
  {
    "task": "Develop a routine that ensures a network connection is both stable and secure using logical AND.",
    "code": "```pascal\nprogram NetworkConnectionCheck;\n\nfunction IsStableConnection: Boolean;\nbegin\n  // Placeholder for actual stability check\n  IsStableConnection := True;\nend;\n\nfunction IsSecureConnection: Boolean;\nbegin\n  // Placeholder for actual security check\n  IsSecureConnection := True;\nend;\n\nfunction IsConnectionStableAndSecure: Boolean;\nbegin\n  IsConnectionStableAndSecure := IsStableConnection and IsSecureConnection;\nend;\n\nbegin\n  if IsConnectionStableAndSecure then\n    writeln('Connection is stable and secure.')\n  else\n    writeln('Connection is not stable or not secure.');\nend.\n```"
  },
  {
    "task": "Write a conditional to print a message if a user is not logged in using logical NOT.",
    "code": "```pascal\nprogram CheckUserLogin;\n\nvar\n  isLoggedIn: Boolean;\n\nbegin\n  isLoggedIn := False;\n  \n  if not isLoggedIn then\n    writeln('User is not logged in.');\nend.\n```"
  },
  {
    "task": "Create a function that checks if a number is both even and positive using logical AND.",
    "code": "```pascal\nprogram CheckEvenAndPositive;\n\nfunction IsEvenAndPositive(num: Integer): Boolean;\nbegin\n    IsEvenAndPositive := (num > 0) and (num mod 2 = 0);\nend;\n\nvar\n    number: Integer;\nbegin\n    number := 4;  // Example number\n    if IsEvenAndPositive(number) then\n        WriteLn('The number is both even and positive.')\n    else\n        WriteLn('The number is not both even and positive.');\nend.\n```"
  },
  {
    "task": "Implement a feature that turns off a device if neither of two switches are on using logical NOT.",
    "code": "```pascal\nprogram DeviceControl;\n\nvar\n  switch1, switch2, deviceOn: Boolean;\n\nbegin\n  switch1 := False;  { Example state for switch 1 }\n  switch2 := False;  { Example state for switch 2 }\n  \n  deviceOn := not (switch1 or switch2);\n  \n  if deviceOn then\n    writeln('The device is ON')\n  else\n    writeln('The device is OFF');\nend.\n```"
  },
  {
    "task": "Compose a script to alert if a server is either down or running slow using logical OR.",
    "code": "```pascal\nprogram ServerStatus;\n\nvar\n  serverDown, serverSlow: Boolean;\n\nbegin\n  serverDown := False;  { Example value, replace with actual check }\n  serverSlow := True;   { Example value, replace with actual check }\n\n  if serverDown or serverSlow then\n    writeln('Alert: The server is either down or running slow.');\nend.\n```"
  },
  {
    "task": "Design a validation method to ensure a form field is not empty using logical NOT.",
    "code": "```pascal\nprogram ValidateField;\n\nfunction IsFieldNotEmpty(fieldValue: string): Boolean;\nbegin\n  IsFieldNotEmpty := not (fieldValue = '');\nend;\n\nvar\n  userInput: string;\nbegin\n  writeln('Enter some text: ');\n  readln(userInput);\n  \n  if IsFieldNotEmpty(userInput) then\n    writeln('Field is not empty.')\n  else\n    writeln('Field is empty.');\nend.\n```"
  },
  {
    "task": "Write a program to determine if two strings are both non-empty using logical AND.",
    "code": "```pascal\nprogram CheckNonEmptyStrings;\n\nvar\n  str1, str2: string;\n  areBothNonEmpty: boolean;\n\nbegin\n  writeln('Enter first string:');\n  readln(str1);\n  writeln('Enter second string:');\n  readln(str2);\n\n  areBothNonEmpty := (str1 <> '') and (str2 <> '');\n\n  if areBothNonEmpty then\n    writeln('Both strings are non-empty.')\n  else\n    writeln('At least one string is empty.');\nend.\n```"
  },
  {
    "task": "Create a function that checks if a number is either prime or a perfect square using logical OR.",
    "code": "```pascal\nprogram CheckPrimeOrPerfectSquare;\n\nfunction IsPrime(n: Integer): Boolean;\nvar\n  i: Integer;\nbegin\n  if n <= 1 then\n    Exit(False);\n  for i := 2 to Trunc(Sqrt(n)) do\n    if n mod i = 0 then\n      Exit(False);\n  Exit(True);\nend;\n\nfunction IsPerfectSquare(n: Integer): Boolean;\nvar\n  root: Integer;\nbegin\n  root := Trunc(Sqrt(n));\n  Exit(root * root = n);\nend;\n\nfunction CheckPrimeOrPerfectSquare(n: Integer): Boolean;\nbegin\n  Exit(IsPrime(n) or IsPerfectSquare(n));\nend;\n\nbegin\n  // Example usage\n  WriteLn(CheckPrimeOrPerfectSquare(5));  // Output: True (Prime)\n  WriteLn(CheckPrimeOrPerfectSquare(9));  // Output: True (Perfect Square)\n  WriteLn(CheckPrimeOrPerfectSquare(10)); // Output: False\nend.\n```"
  },
  {
    "task": "Develop a script to ensure a user is either an adult or has parental consent using logical OR.",
    "code": "```pascal\nprogram CheckUserPermission;\n\nvar\n  isAdult, hasParentalConsent: Boolean;\n\nbegin\n  { Example input; replace with actual user input logic }\n  isAdult := False;\n  hasParentalConsent := True;\n\n  if isAdult or hasParentalConsent then\n    writeln('Permission granted.')\n  else\n    writeln('Permission denied.');\nend.\n```"
  },
  {
    "task": "Implement a condition to execute a task if a variable is neither zero nor negative using logical NOT.",
    "code": "```pascal\nprogram LogicalOperationsExample;\nvar\n  number: Integer;\nbegin\n  number := 5; // Example value\n\n  if not (number <= 0) then\n  begin\n    // Task to execute if number is neither zero nor negative\n    WriteLn('The number is positive and non-zero.');\n  end;\nend.\n```"
  },
  {
    "task": "Compose a method to verify if a system is both up-to-date and functioning using logical AND.",
    "code": "```pascal\nprogram SystemStatusCheck;\n\nfunction IsSystemUpToDate: Boolean;\nbegin\n  { Assume a function to check if the system is up-to-date }\n  Result := True; { Placeholder value }\nend;\n\nfunction IsSystemFunctioning: Boolean;\nbegin\n  { Assume a function to check if the system is functioning }\n  Result := True; { Placeholder value }\nend;\n\nfunction IsSystemOperational: Boolean;\nbegin\n  Result := IsSystemUpToDate and IsSystemFunctioning;\nend;\n\nbegin\n  if IsSystemOperational then\n    WriteLn('The system is both up-to-date and functioning.')\n  else\n    WriteLn('The system is either not up-to-date or not functioning.');\nend.\n```"
  },
  {
    "task": "Write a function that returns true if a list contains neither duplicates nor null values using logical NOT.",
    "code": "```pascal\nprogram NoDuplicatesOrNulls;\n\ntype\n  TArray = array of Integer;\n\nfunction HasNoDuplicatesOrNulls(arr: TArray): Boolean;\nvar\n  i, j: Integer;\nbegin\n  for i := 0 to High(arr) do\n  begin\n    if arr[i] = 0 then\n    begin\n      HasNoDuplicatesOrNulls := False;\n      Exit;\n    end;\n    for j := i + 1 to High(arr) do\n    begin\n      if arr[i] = arr[j] then\n      begin\n        HasNoDuplicatesOrNulls := False;\n        Exit;\n      end;\n    end;\n  end;\n  HasNoDuplicatesOrNulls := True;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Create a script to perform an action if a temperature is either too high or too low using logical OR.",
    "code": "```pascal\nprogram TemperatureCheck;\n\nvar\n  temperature: Integer;\n\nbegin\n  temperature := 25; { Example temperature, you can change it to test }\n\n  if (temperature < 10) or (temperature > 30) then\n    writeln('Temperature is either too low or too high.');\nend.\n```"
  },
  {
    "task": "Design a feature to toggle an option if a setting is not enabled using logical NOT.",
    "code": "```pascal\nprogram ToggleOption;\n\nvar\n  settingEnabled, optionEnabled: Boolean;\n\nbegin\n  settingEnabled := False;  // Assuming the setting is initially not enabled\n  optionEnabled := True;    // Assuming the option is initially enabled\n  \n  if not settingEnabled then\n    optionEnabled := not optionEnabled;\n\n  // Output the result\n  if optionEnabled then\n    writeln('Option is enabled.')\n  else\n    writeln('Option is disabled.');\nend.\n```"
  },
  {
    "task": "Develop a check to ensure a username is both available and meets length requirements using logical AND.",
    "code": "```pascal\nprogram UsernameCheck;\n\nvar\n  username: string;\n  isAvailable: boolean;\n  isValidLength: boolean;\n\nbegin\n  username := 'user123'; { Example username }\n  isAvailable := true; { Assume this is the result of an availability check }\n  isValidLength := (Length(username) >= 5) and (Length(username) <= 15);\n\n  if isAvailable and isValidLength then\n    writeln('Username is available and meets length requirements.')\n  else\n    writeln('Username does not meet the criteria.');\nend.\n```"
  },
  {
    "task": "Implement a function that returns true if a number is neither too large nor too small using logical NOT.",
    "code": "```pascal\nprogram LogicalOperations;\n\nfunction IsNeitherTooLargeNorTooSmall(num: Integer): Boolean;\nbegin\n    IsNeitherTooLargeNorTooSmall := not ((num > 100) or (num < 10));\nend;\n\nvar\n    number: Integer;\nbegin\n    number := 50; { Example number }\n    if IsNeitherTooLargeNorTooSmall(number) then\n        WriteLn('The number is neither too large nor too small.')\n    else\n        WriteLn('The number is either too large or too small.');\nend.\n```"
  },
  {
    "task": "Write a conditional to print a warning if a disk is either full or nearly full using logical OR.",
    "code": "```pascal\nprogram DiskWarning;\n\nvar\n  diskFull, diskNearlyFull: Boolean;\n\nbegin\n  diskFull := False;          { Change this value to test }\n  diskNearlyFull := True;     { Change this value to test }\n\n  if diskFull or diskNearlyFull then\n    writeln('Warning: The disk is either full or nearly full.');\nend.\n```"
  },
  {
    "task": "Create a routine to validate that two dates are both within a valid range using logical AND.",
    "code": "```pascal\nprogram DateValidation;\n\nuses SysUtils;\n\nfunction IsValidDate(day, month, year: Integer): Boolean;\nbegin\n  Result := TryEncodeDate(year, month, day, TDateTime.Create);\nend;\n\nfunction AreDatesValid(day1, month1, year1, day2, month2, year2: Integer): Boolean;\nbegin\n  Result := IsValidDate(day1, month1, year1) and IsValidDate(day2, month2, year2);\nend;\n\nvar\n  day1, month1, year1, day2, month2, year2: Integer;\nbegin\n  // Example usage:\n  day1 := 15; month1 := 8; year1 := 2023;\n  day2 := 23; month2 := 12; year2 := 2023;\n\n  if AreDatesValid(day1, month1, year1, day2, month2, year2) then\n    Writeln('Both dates are valid.')\n  else\n    Writeln('One or both of the dates are invalid.');\nend.\n```"
  },
  {
    "task": "Compose a function to decide if a person is either a minor or a senior using logical OR.",
    "code": "```pascal\nprogram AgeCheck;\n\nfunction IsMinorOrSenior(age: Integer): Boolean;\nbegin\n    IsMinorOrSenior := (age < 18) or (age >= 65);\nend;\n\nvar\n    age: Integer;\nbegin\n    Write('Enter age: ');\n    ReadLn(age);\n\n    if IsMinorOrSenior(age) then\n        WriteLn('The person is either a minor or a senior.')\n    else\n        WriteLn('The person is neither a minor nor a senior.');\nend.\n```"
  },
  {
    "task": "Design a script to execute a task if a condition is not met using logical NOT.",
    "code": "```pascal\nprogram NotOperationExample;\n\nvar\n  condition: Boolean;\nbegin\n  condition := False; // Example condition\n\n  if not condition then\n  begin\n    writeln('Executing task because condition is not met.');\n  end;\nend.\n```"
  },
  {
    "task": "Develop a program to verify if a process is neither running nor scheduled using logical NOT.",
    "code": "```pascal\nprogram VerifyProcessStatus;\nvar\n  isRunning, isScheduled: boolean;\n  isNeitherRunningNorScheduled: boolean;\nbegin\n  { Example values, can be set according to the actual process status }\n  isRunning := false;\n  isScheduled := false;\n  \n  isNeitherRunningNorScheduled := not (isRunning or isScheduled);\n  \n  if isNeitherRunningNorScheduled then\n    writeln('The process is neither running nor scheduled.')\n  else\n    writeln('The process is either running or scheduled.');\nend.\n```"
  },
  {
    "task": "Implement a feature that confirms a file is both accessible and not locked using logical AND.",
    "code": "```pascal\nprogram CheckFileAccessibility;\n\nuses\n  SysUtils;\n\nfunction IsFileAccessibleAndNotLocked(const FileName: string): Boolean;\nvar\n  FileHandle: File;\nbegin\n  {$I-}\n  AssignFile(FileHandle, FileName);\n  Reset(FileHandle);\n  Result := (IOResult = 0) and not FileIsReadOnly(FileName);\n  if Result then\n    CloseFile(FileHandle);\n  {$I+}\nend;\n\nvar\n  FileName: string;\nbegin\n  FileName := 'example.txt';\n  if IsFileAccessibleAndNotLocked(FileName) then\n    WriteLn('The file is accessible and not locked.')\n  else\n    WriteLn('The file is either not accessible or locked.');\nend.\n```"
  },
  {
    "task": "Write a script to check if a device is either offline or in maintenance mode using logical OR.",
    "code": "```pascal\nprogram DeviceStatusCheck;\n\nvar\n  isOffline, isInMaintenanceMode: Boolean;\n\nbegin\n  { Initialize the device status }\n  isOffline := True; { Example: the device is currently offline }\n  isInMaintenanceMode := False; { Example: the device is not in maintenance mode }\n\n  { Check if the device is either offline or in maintenance mode }\n  if isOffline or isInMaintenanceMode then\n    writeln('The device is either offline or in maintenance mode.')\n  else\n    writeln('The device is online and not in maintenance mode.');\nend.\n```"
  },
  {
    "task": "Create a function to ensure a password is both complex and unique using logical AND.",
    "code": "```pascal\nprogram PasswordValidator;\n\nfunction IsComplex(password: string): Boolean;\nvar\n  hasUpper, hasLower, hasDigit, hasSpecial: Boolean;\n  i: Integer;\nbegin\n  hasUpper := False;\n  hasLower := False;\n  hasDigit := False;\n  hasSpecial := False;\n  \n  for i := 1 to Length(password) do\n  begin\n    if password[i] in ['A'..'Z'] then\n      hasUpper := True\n    else if password[i] in ['a'..'z'] then\n      hasLower := True\n    else if password[i] in ['0'..'9'] then\n      hasDigit := True\n    else\n      hasSpecial := True;\n  end;\n  \n  IsComplex := hasUpper and hasLower and hasDigit and hasSpecial;\nend;\n\nfunction IsUnique(password: string; usedPasswords: array of string): Boolean;\nvar\n  i: Integer;\nbegin\n  IsUnique := True;\n  for i := Low(usedPasswords) to High(usedPasswords) do\n  begin\n    if usedPasswords[i] = password then\n    begin\n      IsUnique := False;\n      Break;\n    end;\n  end;\nend;\n\nfunction IsPasswordValid(password: string; usedPasswords: array of string): Boolean;\nbegin\n  IsPasswordValid := IsComplex(password) and IsUnique(password, usedPasswords);\nend;\n\nbegin\n  // Example usage, no output or interaction as per instructions\nend.\n```"
  },
  {
    "task": "Design a validation that ensures a value is not negative using logical NOT.",
    "code": "```pascal\nprogram ValidateNonNegative;\n\nvar\n  value: Integer;\n  isValid: Boolean;\n\nbegin\n  value := -5;  { You can change this value for testing }\n  isValid := not (value < 0);\n\n  if isValid then\n    writeln('The value is non-negative.')\n  else\n    writeln('The value is negative.');\nend.\n```"
  },
  {
    "task": "Develop a check to see if a user has either exceeded their quota or is nearing it using logical OR.",
    "code": "```pascal\nprogram QuotaCheck;\n\nvar\n  quotaLimit, usedQuota, threshold: Integer;\n  isExceeded, isNearing: Boolean;\n\nbegin\n  quotaLimit := 1000;  { Example quota limit }\n  usedQuota := 950;    { Example used quota }\n  threshold := 900;    { Example threshold for nearing quota }\n\n  isExceeded := usedQuota > quotaLimit;\n  isNearing := usedQuota >= threshold;\n\n  if isExceeded or isNearing then\n    writeln('Warning: Quota has been exceeded or is nearing the limit.')\n  else\n    writeln('Quota usage is within acceptable limits.');\nend.\n```"
  },
  {
    "task": "Implement a routine to confirm that a user is both authenticated and authorized using logical AND.",
    "code": "```pascal\nprogram UserAuthentication;\n\nfunction IsAuthenticated(username, password: string): Boolean;\nbegin\n  // Example logic for authentication\n  if (username = 'user') and (password = 'pass') then\n    IsAuthenticated := True\n  else\n    IsAuthenticated := False;\nend;\n\nfunction IsAuthorized(username, role: string): Boolean;\nbegin\n  // Example logic for authorization\n  if (username = 'user') and (role = 'admin') then\n    IsAuthorized := True\n  else\n    IsAuthorized := False;\nend;\n\nfunction IsUserAuthenticatedAndAuthorized(username, password, role: string): Boolean;\nbegin\n  IsUserAuthenticatedAndAuthorized := IsAuthenticated(username, password) and IsAuthorized(username, role);\nend;\n\nvar\n  username, password, role: string;\nbegin\n  username := 'user';\n  password := 'pass';\n  role := 'admin';\n\n  if IsUserAuthenticatedAndAuthorized(username, password, role) then\n    writeln('User is authenticated and authorized.')\n  else\n    writeln('User is not authenticated or not authorized.');\nend.\n```"
  },
  {
    "task": "Compose a function to determine if a light is either on or blinking using logical OR.",
    "code": "```pascal\nprogram LightStatus;\n\nfunction IsLightOnOrBlinking(isOn: Boolean; isBlinking: Boolean): Boolean;\nbegin\n    IsLightOnOrBlinking := isOn or isBlinking;\nend;\n\nvar\n    lightOn, lightBlinking: Boolean;\nbegin\n    lightOn := True;         // Example input\n    lightBlinking := False;  // Example input\n\n    if IsLightOnOrBlinking(lightOn, lightBlinking) then\n        writeln('The light is either on or blinking.')\n    else\n        writeln('The light is off.');\nend.\n```"
  },
  {
    "task": "Write a script that executes a command if a network connection is neither weak nor unstable using logical NOT.",
    "code": "```pascal\nprogram NetworkCheck;\n\nvar\n  isWeak, isUnstable: Boolean;\n  command: String;\n\nbegin\n  isWeak := False;     // Example value, replace with actual check\n  isUnstable := False; // Example value, replace with actual check\n  command := 'echo Connection is stable!';\n\n  if not (isWeak or isUnstable) then\n    begin\n      // Execute the command\n      writeln(command);\n    end;\nend.\n```"
  },
  {
    "task": "Create a program to verify that a sensor is both calibrated and active using logical AND.",
    "code": "```pascal\nprogram SensorCheck;\n\nvar\n  isCalibrated, isActive: Boolean;\n\nbegin\n  { Assuming some initial conditions for the sensor's state }\n  isCalibrated := True;  { Example condition }\n  isActive := True;      { Example condition }\n\n  if isCalibrated and isActive then\n    writeln('Sensor is both calibrated and active.')\n  else\n    writeln('Sensor does not meet the required conditions.');\nend.\n```"
  },
  {
    "task": "Design a feature to alert if a process is either overdue or incomplete using logical OR.",
    "code": "```pascal\nprogram ProcessAlert;\n\nvar\n  isOverdue: Boolean;\n  isIncomplete: Boolean;\n  alert: Boolean;\n\nbegin\n  { Assign values to isOverdue and isIncomplete as needed }\n  isOverdue := True; { Example value }\n  isIncomplete := False; { Example value }\n\n  alert := isOverdue or isIncomplete;\n\n  if alert then\n    writeln('Alert: The process is either overdue or incomplete.')\n  else\n    writeln('The process is on track and complete.');\nend.\n```"
  },
  {
    "task": "Develop a script to check if a person is neither a guest nor a temporary user using logical NOT.",
    "code": "```pascal\nprogram CheckUserStatus;\n\nvar\n  isGuest, isTemporaryUser, isRegularUser: Boolean;\n\nbegin\n  { Example values for demonstration }\n  isGuest := False;\n  isTemporaryUser := False;\n\n  { Logical NOT operation to determine if the user is neither a guest nor a temporary user }\n  isRegularUser := not isGuest and not isTemporaryUser;\n\n  { Output result }\n  if isRegularUser then\n    writeln('The person is neither a guest nor a temporary user.')\n  else\n    writeln('The person is either a guest or a temporary user.');\nend.\n```"
  },
  {
    "task": "Implement a function to toggle a light if a switch is not pressed using logical NOT.",
    "code": "```pascal\nprogram ToggleLight;\n\nfunction ToggleLightIfSwitchNotPressed(switchPressed: Boolean): Boolean;\nbegin\n  ToggleLightIfSwitchNotPressed := not switchPressed;\nend;\n\nvar\n  switchPressed, lightOn: Boolean;\nbegin\n  switchPressed := False; // Example switch state\n  lightOn := ToggleLightIfSwitchNotPressed(switchPressed);\n  WriteLn('Light is ', IfThen(lightOn, 'On', 'Off'));\nend.\n```"
  },
  {
    "task": "Write a conditional to trigger an event if a file is either corrupted or missing using logical OR.",
    "code": "```pascal\nprogram CheckFileStatus;\n\nvar\n  isCorrupted, isMissing: Boolean;\n\nbegin\n  isCorrupted := False;  { Example value, change as needed }\n  isMissing := True;     { Example value, change as needed }\n\n  if isCorrupted or isMissing then\n    writeln('Trigger event: The file is either corrupted or missing.');\nend.\n```"
  },
  {
    "task": "Create a routine that verifies if a vehicle is both insured and registered using logical AND.",
    "code": "```pascal\nprogram VehicleStatusCheck;\n\nfunction IsInsuredAndRegistered(insured: Boolean; registered: Boolean): Boolean;\nbegin\n  IsInsuredAndRegistered := insured and registered;\nend;\n\nvar\n  insured, registered: Boolean;\n  result: Boolean;\nbegin\n  insured := True;  { Example value, can be changed }\n  registered := True;  { Example value, can be changed }\n\n  result := IsInsuredAndRegistered(insured, registered);\n\n  if result then\n    writeln('The vehicle is both insured and registered.')\n  else\n    writeln('The vehicle is not both insured and registered.');\nend.\n```"
  },
  {
    "task": "Compose a method to check if an account is either overdrawn or flagged using logical OR.",
    "code": "```pascal\nprogram AccountCheck;\n\ntype\n  TAccount = record\n    Overdrawn: Boolean;\n    Flagged: Boolean;\n  end;\n\nfunction IsAccountOverdrawnOrFlagged(Account: TAccount): Boolean;\nbegin\n  IsAccountOverdrawnOrFlagged := Account.Overdrawn or Account.Flagged;\nend;\n\nvar\n  Account: TAccount;\nbegin\n  Account.Overdrawn := True;\n  Account.Flagged := False;\n  \n  if IsAccountOverdrawnOrFlagged(Account) then\n    WriteLn('The account is either overdrawn or flagged.')\n  else\n    WriteLn('The account is in good standing.');\nend.\n```"
  },
  {
    "task": "Design a program to ensure an application is both installed and updated using logical AND.",
    "code": "```pascal\nprogram CheckApplicationStatus;\n\nvar\n  isInstalled, isUpdated: Boolean;\n  isReady: Boolean;\n\nbegin\n  { Assume these variables are set based on actual checks }\n  isInstalled := True;\n  isUpdated := True;\n\n  isReady := isInstalled and isUpdated;\n\n  if isReady then\n    writeln('The application is both installed and updated.')\n  else\n    writeln('The application is not ready.');\nend.\n```"
  },
  {
    "task": "Develop a function that returns true if a number is neither divisible by 3 nor 5 using logical NOT.",
    "code": "```pascal\nprogram LogicalOperations;\n\nfunction IsNeitherDivisibleBy3Nor5(n: Integer): Boolean;\nbegin\n  IsNeitherDivisibleBy3Nor5 := not ((n mod 3 = 0) or (n mod 5 = 0));\nend;\n\nbegin\n  // Example usage:\n  // WriteLn(IsNeitherDivisibleBy3Nor5(7)); // Should output: True\nend.\n```"
  },
  {
    "task": "Implement a script that alerts if a device is either overheating or underperforming using logical OR.",
    "code": "```pascal\nprogram DeviceAlert;\n\nvar\n  temperature, performance: Integer;\n  isOverheating, isUnderperforming: Boolean;\n\nbegin\n  { Example values; in practice, these would be obtained from sensors or input }\n  temperature := 85;\n  performance := 40;\n\n  { Conditions for overheating and underperforming }\n  isOverheating := temperature > 80;\n  isUnderperforming := performance < 50;\n\n  { Alert if either condition is true }\n  if isOverheating or isUnderperforming then\n    writeln('Alert: Device is either overheating or underperforming!')\n  else\n    writeln('Device is operating within normal parameters.');\nend.\n```"
  },
  {
    "task": "Write a function to validate that a directory is both writable and not full using logical AND.",
    "code": "```pascal\nprogram DirectoryValidation;\n\nuses\n  SysUtils;\n\nfunction IsDirectoryWritableAndNotFull(const DirectoryPath: string): Boolean;\nvar\n  SearchRec: TSearchRec;\n  FreeSpace: Int64;\nbegin\n  // Check if directory exists and is writable\n  Result := DirectoryExists(DirectoryPath) and\n            (FindFirst(DirectoryPath + PathDelim + '*', faAnyFile, SearchRec) = 0);\n  FindClose(SearchRec);\n\n  // Check if the directory is not full\n  if Result then\n  begin\n    FreeSpace := DiskFree(0); // Obtain free space for current drive\n    Result := FreeSpace > 0;\n  end;\nend;\n\nbegin\n  // Example usage\n  if IsDirectoryWritableAndNotFull('/path/to/directory') then\n    Writeln('Directory is writable and not full')\n  else\n    Writeln('Directory is either not writable or full');\nend.\n```"
  },
  {
    "task": "Create a conditional statement that executes if a button is not clicked using logical NOT.",
    "code": "```pascal\nprogram ButtonCheck;\n\nvar\n  buttonClicked: Boolean;\n\nbegin\n  buttonClicked := False;  { Assume the button is not clicked initially }\n  \n  if not buttonClicked then\n  begin\n    writeln('Button has not been clicked.');\n  end;\nend.\n```"
  },
  {
    "task": "Design a check to ensure a transaction is both verified and complete using logical AND.",
    "code": "```pascal\nprogram TransactionCheck;\nvar\n  isVerified, isComplete, isTransactionValid: Boolean;\nbegin\n  isVerified := True;  { Example value, can be set based on actual transaction verification logic }\n  isComplete := True;  { Example value, can be set based on actual transaction completion logic }\n\n  isTransactionValid := isVerified and isComplete;\n\n  if isTransactionValid then\n    writeln('Transaction is valid.')\n  else\n    writeln('Transaction is not valid.');\nend.\n```"
  },
  {
    "task": "Develop a routine to determine if a string is either uppercase or lowercase using logical OR.",
    "code": "```pascal\nprogram CheckStringCase;\n\nfunction IsUpperCaseOrLowerCase(s: string): boolean;\nvar\n  i: Integer;\n  isUpper, isLower: boolean;\nbegin\n  isUpper := True;\n  isLower := True;\n  \n  for i := 1 to Length(s) do\n  begin\n    isUpper := isUpper and (s[i] in ['A'..'Z']);\n    isLower := isLower and (s[i] in ['a'..'z']);\n  end;\n  \n  IsUpperCaseOrLowerCase := isUpper or isLower;\nend;\n\nvar\n  input: string;\nbegin\n  Write('Enter a string: ');\n  ReadLn(input);\n  if IsUpperCaseOrLowerCase(input) then\n    WriteLn('The string is either uppercase or lowercase.')\n  else\n    WriteLn('The string contains mixed case.');\nend.\n```"
  },
  {
    "task": "Implement a feature to execute a task if a variable is neither null nor undefined using logical NOT.",
    "code": "```pascal\nprogram LogicalOperationsExample;\nvar\n  value: Variant;\n\nbegin\n  value := 'some value'; // Example assignment, can be nil for null\n\n  if not (VarIsNull(value) or VarIsEmpty(value)) then\n  begin\n    // Execute the task here\n    Writeln('Executing task because value is neither null nor undefined.');\n  end\n  else\n  begin\n    Writeln('Value is null or undefined, task will not be executed.');\n  end;\nend.\n```"
  },
  {
    "task": "Compose a function to return true if a date is either today or tomorrow using logical OR.",
    "code": "```pascal\nprogram DateCheck;\n\nuses SysUtils;\n\nfunction IsTodayOrTomorrow(inputDate: TDateTime): Boolean;\nvar\n  today, tomorrow: TDateTime;\nbegin\n  today := Date;\n  tomorrow := today + 1;\n  Result := (inputDate = today) or (inputDate = tomorrow);\nend;\n\nvar\n  testDate: TDateTime;\nbegin\n  testDate := Date; // Example usage\n  if IsTodayOrTomorrow(testDate) then\n    WriteLn('The date is either today or tomorrow.')\n  else\n    WriteLn('The date is neither today nor tomorrow.');\nend.\n```"
  },
  {
    "task": "Write a script to confirm that a system is both running and not in maintenance mode using logical AND.",
    "code": "```pascal\nprogram CheckSystemStatus;\n\nvar\n  isRunning, isInMaintenance: boolean;\n  systemOperational: boolean;\n\nbegin\n  isRunning := true;   { Assume the system is running }\n  isInMaintenance := false;  { Assume the system is not in maintenance }\n\n  systemOperational := isRunning and not isInMaintenance;\n\n  if systemOperational then\n    writeln('The system is operational.')\n  else\n    writeln('The system is not operational.');\nend.\n```"
  },
  {
    "task": "Create a program to verify if a text field is neither empty nor exceeds character limit using logical NOT.",
    "code": "```pascal\nprogram VerifyTextField;\n\nuses\n  SysUtils;\n\nvar\n  textField: string;\n  charLimit: Integer;\n\nbegin\n  textField := 'Hello, World!';\n  charLimit := 50;\n  \n  if not ((textField = '') or (Length(textField) > charLimit)) then\n    WriteLn('Text field is valid.')\n  else\n    WriteLn('Text field is invalid.');\nend.\n```"
  },
  {
    "task": "Design a feature that checks if a user has either admin privileges or editor rights using logical OR.",
    "code": "```pascal\nprogram CheckPrivileges;\n\nvar\n  isAdmin, isEditor, hasAccess: Boolean;\n\nbegin\n  { Example values, these would be set based on your application's logic }\n  isAdmin := False;\n  isEditor := True;\n  \n  hasAccess := isAdmin or isEditor;\n  \n  if hasAccess then\n    writeln('User has access.')\n  else\n    writeln('User does not have access.');\nend.\n```"
  },
  {
    "task": "Develop a script to ensure a file is both present and not empty using logical AND.",
    "code": "```pascal\nprogram CheckFilePresenceAndNotEmpty;\nuses\n  SysUtils;\n\nvar\n  fileName: string;\n  fileExists, fileNotEmpty: Boolean;\n  fileSize: Int64;\n  f: File of Byte;\n\nbegin\n  fileName := 'example.txt';  { Specify the file name }\n\n  fileExists := FileExists(fileName);\n  \n  if fileExists then\n  begin\n    AssignFile(f, fileName);\n    Reset(f);\n    fileSize := FileSize(f);\n    CloseFile(f);\n    fileNotEmpty := fileSize > 0;\n  end\n  else\n    fileNotEmpty := False;\n\n  if fileExists and fileNotEmpty then\n    WriteLn('The file is present and not empty.')\n  else\n    WriteLn('The file is either missing or empty.');\nend.\n```"
  },
  {
    "task": "Implement a condition to execute a command if a setting is not active using logical NOT.",
    "code": "```pascal\nprogram LogicalNotExample;\nvar\n  settingActive: Boolean;\nbegin\n  settingActive := False; { Assume the setting is not active }\n  \n  if not settingActive then\n  begin\n    writeln('The command is executed because the setting is not active.');\n  end;\nend.\n```"
  },
  {
    "task": "Compose a method to decide if a person is either eligible or exempt using logical OR.",
    "code": "```pascal\nprogram EligibilityCheck;\n\nfunction IsEligibleOrExempt(isEligible: Boolean; isExempt: Boolean): Boolean;\nbegin\n    IsEligibleOrExempt := isEligible or isExempt;\nend;\n\nvar\n    eligible, exempt: Boolean;\n    result: Boolean;\nbegin\n    eligible := True;  { Example value }\n    exempt := False;   { Example value }\n    \n    result := IsEligibleOrExempt(eligible, exempt);\n    writeln('Is the person either eligible or exempt? ', result);\nend.\n```"
  },
  {
    "task": "Write a function that returns true if a number is both greater than zero and less than ten using logical AND.",
    "code": "```pascal\nprogram LogicalOperations;\n\nfunction IsNumberInRange(n: Integer): Boolean;\nbegin\n  IsNumberInRange := (n > 0) and (n < 10);\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Create a loop to continue as long as a condition is either true or false using logical OR.",
    "code": "```pascal\nprogram LogicalOperations;\n\nvar\n  condition1, condition2: Boolean;\n\nbegin\n  condition1 := True;\n  condition2 := False;\n  \n  while condition1 or condition2 do\n  begin\n    // Perform some operation here\n    writeln('Loop is executing...');\n    \n    // Update condition1 and condition2 to eventually exit the loop\n    condition1 := False;\n    condition2 := False;\n  end;\nend.\n```"
  },
  {
    "task": "Design a program to verify if an account is neither inactive nor suspended using logical NOT.",
    "code": "```pascal\nprogram CheckAccountStatus;\n\nvar\n  isInactive, isSuspended, isValidAccount: Boolean;\n\nbegin\n  { Sample values for demonstration }\n  isInactive := False;\n  isSuspended := False;\n\n  { Verify if the account is neither inactive nor suspended }\n  isValidAccount := not isInactive and not isSuspended;\n\n  if isValidAccount then\n    writeln('The account is active and not suspended.')\n  else\n    writeln('The account is either inactive or suspended.');\nend.\n```"
  },
  {
    "task": "Develop a feature to confirm that a document is both signed and verified using logical AND.",
    "code": "```pascal\nprogram DocumentVerification;\n\nvar\n  isSigned, isVerified, isConfirmed: Boolean;\n\nbegin\n  isSigned := True;     { Assume the document is signed }\n  isVerified := True;   { Assume the document is verified }\n\n  isConfirmed := isSigned and isVerified;\n\n  if isConfirmed then\n    writeln('The document is both signed and verified.')\n  else\n    writeln('The document is not both signed and verified.');\nend.\n```"
  },
  {
    "task": "Implement a script to alert if a network is either congested or down using logical OR.",
    "code": "```pascal\nprogram NetworkAlert;\n\nvar\n  isCongested, isDown: Boolean;\n  alert: Boolean;\n\nbegin\n  { Assigning test values to network states }\n  isCongested := True;  { Assume network is congested }\n  isDown := False;      { Assume network is not down }\n\n  { Logical OR operation to determine alert status }\n  alert := isCongested or isDown;\n\n  { Output alert status }\n  if alert then\n    writeln('Alert: Network is either congested or down.')\n  else\n    writeln('Network is functioning normally.');\nend.\n```"
  },
  {
    "task": "Write a function to ensure a list is both sorted and unique using logical AND.",
    "code": "```pascal\nprogram EnsureSortedUnique;\n\ntype\n  TIntegerArray = array of Integer;\n\nfunction IsSortedAndUnique(arr: TIntegerArray): Boolean;\nvar\n  i: Integer;\nbegin\n  Result := True;\n  for i := 0 to High(arr) - 1 do\n    if (arr[i] >= arr[i + 1]) then\n    begin\n      Result := False;\n      Break;\n    end;\nend;\n\nvar\n  numbers: TIntegerArray;\nbegin\n  numbers := TIntegerArray.Create(1, 2, 3, 4, 5);\n  if IsSortedAndUnique(numbers) then\n    WriteLn('The list is sorted and unique.')\n  else\n    WriteLn('The list is not sorted or not unique.');\nend.\n```"
  },
  {
    "task": "Create a conditional statement to execute if a task is not completed using logical NOT.",
    "code": "```pascal\nprogram TaskCheck;\nvar\n  taskCompleted: Boolean;\nbegin\n  taskCompleted := False; // Example value\n\n  if not taskCompleted then\n  begin\n    writeln('The task is not completed.');\n  end;\nend.\n```"
  },
  {
    "task": "Design a check to determine if a component is either faulty or missing using logical OR.",
    "code": "```pascal\nprogram CheckComponentStatus;\n\nvar\n  isFaulty, isMissing, isFaultyOrMissing: Boolean;\n\nbegin\n  isFaulty := True;  (* Example value, can be set as needed *)\n  isMissing := False; (* Example value, can be set as needed *)\n\n  isFaultyOrMissing := isFaulty or isMissing;\n\n  if isFaultyOrMissing then\n    writeln('Component is either faulty or missing.')\n  else\n    writeln('Component is neither faulty nor missing.');\nend.\n```"
  },
  {
    "task": "Develop a routine to verify if a user is both online and available using logical AND.",
    "code": "```pascal\nprogram UserStatusCheck;\n\nfunction IsUserOnlineAndAvailable(isOnline, isAvailable: Boolean): Boolean;\nbegin\n  IsUserOnlineAndAvailable := isOnline and isAvailable;\nend;\n\nvar\n  userOnline, userAvailable, result: Boolean;\nbegin\n  userOnline := True;\n  userAvailable := True;\n\n  result := IsUserOnlineAndAvailable(userOnline, userAvailable);\n\n  writeln('User is online and available: ', result);\nend.\n```"
  },
  {
    "task": "Implement a feature to toggle an alert if a condition is not satisfied using logical NOT.",
    "code": "```pascal\nprogram ToggleAlert;\n\nvar\n  conditionMet: Boolean;\n  alertActive: Boolean;\n\nbegin\n  conditionMet := False;  { Example initial condition }\n  alertActive := False;\n\n  { Toggle alert if condition is not satisfied }\n  alertActive := not conditionMet;\n\n  { Output the alert status }\n  if alertActive then\n    writeln('Alert is active.')\n  else\n    writeln('Alert is not active.');\nend.\n```"
  },
  {
    "task": "Compose a function to return true if a transaction is either pending or failed using logical OR.",
    "code": "```pascal\nprogram TransactionStatus;\n\nfunction IsTransactionPendingOrFailed(status: string): Boolean;\nbegin\n  if (status = 'pending') or (status = 'failed') then\n    IsTransactionPendingOrFailed := True\n  else\n    IsTransactionPendingOrFailed := False;\nend;\n\nbegin\n  // Example usage\n  Writeln(IsTransactionPendingOrFailed('pending'));  // Outputs: TRUE\n  Writeln(IsTransactionPendingOrFailed('failed'));   // Outputs: TRUE\n  Writeln(IsTransactionPendingOrFailed('completed')); // Outputs: FALSE\nend.\n```"
  },
  {
    "task": "Write a script to ensure a configuration is both correct and active using logical AND.",
    "code": "```pascal\nprogram ConfigurationCheck;\n\nvar\n  isCorrect, isActive, isValid: Boolean;\n\nbegin\n  { Assume some logic to set isCorrect and isActive }\n  isCorrect := True;  { Example value }\n  isActive := True;   { Example value }\n\n  isValid := isCorrect and isActive;\n\n  if isValid then\n    writeln('Configuration is correct and active.')\n  else\n    writeln('Configuration is not valid.');\nend.\n```"
  }
]