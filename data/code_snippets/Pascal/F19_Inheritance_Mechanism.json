[
  {
    "task": "Create a base class for a vehicle with methods for speed and fuel efficiency, then derive a car class that overrides these methods to provide specific implementations.",
    "code": "```pascal\nprogram VehicleInheritance;\n\ntype\n  TVehicle = class\n  public\n    function Speed: Real; virtual;\n    function FuelEfficiency: Real; virtual;\n  end;\n\n  TCar = class(TVehicle)\n  public\n    function Speed: Real; override;\n    function FuelEfficiency: Real; override;\n  end;\n\nfunction TVehicle.Speed: Real;\nbegin\n  Result := 0.0; // Default implementation\nend;\n\nfunction TVehicle.FuelEfficiency: Real;\nbegin\n  Result := 0.0; // Default implementation\nend;\n\nfunction TCar.Speed: Real;\nbegin\n  Result := 150.0; // Car specific implementation\nend;\n\nfunction TCar.FuelEfficiency: Real;\nbegin\n  Result := 25.0; // Car specific implementation\nend;\n\nvar\n  MyCar: TCar;\n\nbegin\n  MyCar := TCar.Create;\n  writeln('Car Speed: ', MyCar.Speed:0:1);\n  writeln('Car Fuel Efficiency: ', MyCar.FuelEfficiency:0:1);\n  MyCar.Free;\nend.\n```"
  },
  {
    "task": "Design a base class for a multimedia file with properties like duration and format, then extend it with a video class that includes resolution and frame rate.",
    "code": "```pascal\nprogram MultimediaInheritance;\n\ntype\n  TMultimediaFile = class\n  private\n    FDuration: Integer;\n    FFormat: String;\n  public\n    constructor Create(ADuration: Integer; AFormat: String);\n    property Duration: Integer read FDuration write FDuration;\n    property Format: String read FFormat write FFormat;\n  end;\n\n  TVideoFile = class(TMultimediaFile)\n  private\n    FResolution: String;\n    FFrameRate: Double;\n  public\n    constructor Create(ADuration: Integer; AFormat, AResolution: String; AFrameRate: Double);\n    property Resolution: String read FResolution write FResolution;\n    property FrameRate: Double read FFrameRate write FFrameRate;\n  end;\n\nconstructor TMultimediaFile.Create(ADuration: Integer; AFormat: String);\nbegin\n  FDuration := ADuration;\n  FFormat := AFormat;\nend;\n\nconstructor TVideoFile.Create(ADuration: Integer; AFormat, AResolution: String; AFrameRate: Double);\nbegin\n  inherited Create(ADuration, AFormat);\n  FResolution := AResolution;\n  FFrameRate := AFrameRate;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Develop a superclass for bank accounts with methods for deposit and withdrawal, then create a savings account subclass that overrides the withdrawal method to incorporate interest deductions.",
    "code": "```pascal\nprogram BankAccountInheritance;\n\ntype\n  TBankAccount = class\n  private\n    FBalance: Double;\n  public\n    constructor Create(InitialBalance: Double);\n    procedure Deposit(Amount: Double);\n    procedure Withdraw(Amount: Double); virtual;\n    function GetBalance: Double;\n  end;\n\n  TSavingsAccount = class(TBankAccount)\n  private\n    FInterestRate: Double;\n  public\n    constructor Create(InitialBalance: Double; InterestRate: Double);\n    procedure Withdraw(Amount: Double); override;\n  end;\n\nconstructor TBankAccount.Create(InitialBalance: Double);\nbegin\n  FBalance := InitialBalance;\nend;\n\nprocedure TBankAccount.Deposit(Amount: Double);\nbegin\n  FBalance := FBalance + Amount;\nend;\n\nprocedure TBankAccount.Withdraw(Amount: Double);\nbegin\n  if Amount <= FBalance then\n    FBalance := FBalance - Amount;\nend;\n\nfunction TBankAccount.GetBalance: Double;\nbegin\n  Result := FBalance;\nend;\n\nconstructor TSavingsAccount.Create(InitialBalance: Double; InterestRate: Double);\nbegin\n  inherited Create(InitialBalance);\n  FInterestRate := InterestRate;\nend;\n\nprocedure TSavingsAccount.Withdraw(Amount: Double);\nvar\n  AmountWithInterest: Double;\nbegin\n  AmountWithInterest := Amount + (Amount * FInterestRate);\n  if AmountWithInterest <= GetBalance then\n    inherited Withdraw(AmountWithInterest);\nend;\n\nvar\n  Account: TBankAccount;\n  Savings: TSavingsAccount;\n\nbegin\n  Account := TBankAccount.Create(1000);\n  Savings := TSavingsAccount.Create(1000, 0.05);\n\n  Account.Deposit(500);\n  Account.Withdraw(200);\n  \n  Savings.Deposit(500);\n  Savings.Withdraw(200);\nend.\n```"
  },
  {
    "task": "Implement a base class for a geometric shape with methods to calculate area and perimeter, then create a rectangle subclass that provides specific calculations for these methods.",
    "code": "```pascal\nprogram GeometricShapeInheritance;\n\ntype\n  TShape = class\n    public\n      function Area: Real; virtual; abstract;\n      function Perimeter: Real; virtual; abstract;\n  end;\n\n  TRectangle = class(TShape)\n    private\n      FWidth, FHeight: Real;\n    public\n      constructor Create(AWidth, AHeight: Real);\n      function Area: Real; override;\n      function Perimeter: Real; override;\n  end;\n\nconstructor TRectangle.Create(AWidth, AHeight: Real);\nbegin\n  FWidth := AWidth;\n  FHeight := AHeight;\nend;\n\nfunction TRectangle.Area: Real;\nbegin\n  Result := FWidth * FHeight;\nend;\n\nfunction TRectangle.Perimeter: Real;\nbegin\n  Result := 2 * (FWidth + FHeight);\nend;\n\nvar\n  Rect: TRectangle;\nbegin\n  Rect := TRectangle.Create(5.0, 10.0);\n  Writeln('Area: ', Rect.Area:0:2);\n  Writeln('Perimeter: ', Rect.Perimeter:0:2);\n  Rect.Free;\nend.\n```"
  },
  {
    "task": "Construct a parent class for employees with a method to calculate salary, then derive a manager class that overrides this method to include bonuses.",
    "code": "```pascal\nprogram EmployeeInheritance;\n\ntype\n  TEmployee = class\n  public\n    function CalculateSalary: Real; virtual;\n  end;\n\n  TManager = class(TEmployee)\n  private\n    FBonus: Real;\n  public\n    constructor Create(aBonus: Real);\n    function CalculateSalary: Real; override;\n  end;\n\n{ TEmployee }\n\nfunction TEmployee.CalculateSalary: Real;\nbegin\n  Result := 1000.0; // Base salary\nend;\n\n{ TManager }\n\nconstructor TManager.Create(aBonus: Real);\nbegin\n  FBonus := aBonus;\nend;\n\nfunction TManager.CalculateSalary: Real;\nbegin\n  Result := inherited CalculateSalary + FBonus;\nend;\n\nvar\n  Employee: TEmployee;\n  Manager: TManager;\nbegin\n  Employee := TEmployee.Create;\n  Manager := TManager.Create(500.0);\n  \n  WriteLn('Employee Salary: ', Employee.CalculateSalary:0:2);\n  WriteLn('Manager Salary: ', Manager.CalculateSalary:0:2);\n  \n  Employee.Free;\n  Manager.Free;\nend.\n```"
  },
  {
    "task": "Set up a base class for a library item with properties like title and author, and extend it with a book subclass that adds a number of pages property.",
    "code": "```pascal\nprogram LibraryInheritance;\n\ntype\n  TLibraryItem = class\n    private\n      FTitle: string;\n      FAuthor: string;\n    public\n      constructor Create(ATitle, AAuthor: string);\n      property Title: string read FTitle write FTitle;\n      property Author: string read FAuthor write FAuthor;\n  end;\n\n  TBook = class(TLibraryItem)\n    private\n      FNumberOfPages: integer;\n    public\n      constructor Create(ATitle, AAuthor: string; ANumberOfPages: integer);\n      property NumberOfPages: integer read FNumberOfPages write FNumberOfPages;\n  end;\n\nconstructor TLibraryItem.Create(ATitle, AAuthor: string);\nbegin\n  FTitle := ATitle;\n  FAuthor := AAuthor;\nend;\n\nconstructor TBook.Create(ATitle, AAuthor: string; ANumberOfPages: integer);\nbegin\n  inherited Create(ATitle, AAuthor);\n  FNumberOfPages := ANumberOfPages;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Create a foundation class for an electronic device with a method to turn on and off, and derive a smartphone class that overrides the turn on method to require a passcode.",
    "code": "```pascal\nprogram InheritanceMechanismExample;\n\ntype\n  ElectronicDevice = class\n  public\n    procedure TurnOn; virtual;\n    procedure TurnOff;\n  end;\n\n  Smartphone = class(ElectronicDevice)\n  public\n    procedure TurnOn; override;\n  end;\n\nprocedure ElectronicDevice.TurnOn;\nbegin\n  WriteLn('Device is now ON');\nend;\n\nprocedure ElectronicDevice.TurnOff;\nbegin\n  WriteLn('Device is now OFF');\nend;\n\nprocedure Smartphone.TurnOn;\nvar\n  passcode: String;\nbegin\n  Write('Enter passcode to turn on: ');\n  ReadLn(passcode);\n  if passcode = '1234' then\n    WriteLn('Smartphone is now ON')\n  else\n    WriteLn('Incorrect passcode');\nend;\n\nvar\n  myDevice: ElectronicDevice;\n  myPhone: Smartphone;\n\nbegin\n  myDevice := ElectronicDevice.Create;\n  myPhone := Smartphone.Create;\n\n  myDevice.TurnOn;\n  myDevice.TurnOff;\n\n  myPhone.TurnOn;\n  myPhone.TurnOff;\n\n  myDevice.Free;\n  myPhone.Free;\nend.\n```"
  },
  {
    "task": "Design a base class for an animal with a method to make a sound, then create a dog subclass that overrides this method to bark.",
    "code": "```pascal\nprogram InheritanceExample;\n\ntype\n  TAnimal = class\n  public\n    procedure MakeSound; virtual;\n  end;\n\n  TDog = class(TAnimal)\n  public\n    procedure MakeSound; override;\n  end;\n\nprocedure TAnimal.MakeSound;\nbegin\n  Writeln('Animal sound');\nend;\n\nprocedure TDog.MakeSound;\nbegin\n  Writeln('Bark');\nend;\n\nvar\n  Animal: TAnimal;\n  Dog: TDog;\n\nbegin\n  Animal := TAnimal.Create;\n  Dog := TDog.Create;\n  \n  Animal.MakeSound;\n  Dog.MakeSound;\n  \n  Animal.Free;\n  Dog.Free;\nend.\n```"
  },
  {
    "task": "Develop a superclass for meals with a method to calculate calories, then create a dessert subclass that overrides it to add extra sugar calories.",
    "code": "```pascal\nprogram MealInheritance;\n\ntype\n  TMeal = class\n  public\n    function CalculateCalories: Integer; virtual;\n  end;\n\n  TDessert = class(TMeal)\n  private\n    FSugarCalories: Integer;\n  public\n    constructor Create(SugarCalories: Integer);\n    function CalculateCalories: Integer; override;\n  end;\n\n{ TMeal }\n\nfunction TMeal.CalculateCalories: Integer;\nbegin\n  Result := 0; // Base implementation\nend;\n\n{ TDessert }\n\nconstructor TDessert.Create(SugarCalories: Integer);\nbegin\n  FSugarCalories := SugarCalories;\nend;\n\nfunction TDessert.CalculateCalories: Integer;\nbegin\n  Result := inherited CalculateCalories + FSugarCalories;\nend;\n\nvar\n  Meal: TMeal;\n  Dessert: TDessert;\nbegin\n  Meal := TMeal.Create;\n  WriteLn('Meal calories: ', Meal.CalculateCalories);\n\n  Dessert := TDessert.Create(150);\n  WriteLn('Dessert calories: ', Dessert.CalculateCalories);\n\n  Meal.Free;\n  Dessert.Free;\nend.\n```"
  },
  {
    "task": "Implement a base class for a transportation mode with a method to calculate travel time, then extend it with a plane subclass that overrides the method to calculate based on speed.",
    "code": "```pascal\nprogram Transportation;\n\ntype\n  TTransportationMode = class\n  public\n    function CalculateTravelTime(distance: Double): Double; virtual;\n  end;\n\n  TPlane = class(TTransportationMode)\n  private\n    FSpeed: Double;\n  public\n    constructor Create(speed: Double);\n    function CalculateTravelTime(distance: Double): Double; override;\n  end;\n\n{ TTransportationMode }\n\nfunction TTransportationMode.CalculateTravelTime(distance: Double): Double;\nbegin\n  Result := 0; // Base class implementation\nend;\n\n{ TPlane }\n\nconstructor TPlane.Create(speed: Double);\nbegin\n  FSpeed := speed;\nend;\n\nfunction TPlane.CalculateTravelTime(distance: Double): Double;\nbegin\n  if FSpeed > 0 then\n    Result := distance / FSpeed\n  else\n    Result := 0;\nend;\n\nvar\n  plane: TPlane;\n  travelTime: Double;\nbegin\n  plane := TPlane.Create(500); { Example speed }\n  travelTime := plane.CalculateTravelTime(1000); { Example distance }\n  WriteLn('Travel time: ', travelTime:0:2, ' hours');\n  plane.Free;\nend.\n```"
  },
  {
    "task": "Construct a parent class for a musical instrument with a method to play sound, then derive a piano class that overrides the method to play specific notes.",
    "code": "```pascal\nprogram InheritanceExample;\n\ntype\n  TInstrument = class\n    procedure PlaySound; virtual;\n  end;\n\n  TPiano = class(TInstrument)\n    procedure PlaySound; override;\n  end;\n\nprocedure TInstrument.PlaySound;\nbegin\n  Writeln('Playing sound from a generic instrument.');\nend;\n\nprocedure TPiano.PlaySound;\nbegin\n  Writeln('Playing piano notes: C, E, G.');\nend;\n\nvar\n  Instrument: TInstrument;\n  Piano: TPiano;\n\nbegin\n  Instrument := TInstrument.Create;\n  Piano := TPiano.Create;\n\n  Instrument.PlaySound;\n  Piano.PlaySound;\n\n  Instrument.Free;\n  Piano.Free;\nend.\n```"
  },
  {
    "task": "Set up a base class for a user account with a method to reset password, and extend it with an admin account subclass that overrides it to include security questions.",
    "code": "```pascal\nprogram InheritanceExample;\n\ntype\n  TUserAccount = class\n  public\n    procedure ResetPassword; virtual;\n  end;\n\n  TAdminAccount = class(TUserAccount)\n  public\n    procedure ResetPassword; override;\n  end;\n\nprocedure TUserAccount.ResetPassword;\nbegin\n  WriteLn('Password reset with default method.');\nend;\n\nprocedure TAdminAccount.ResetPassword;\nbegin\n  WriteLn('Password reset with security questions.');\nend;\n\nvar\n  User: TUserAccount;\n  Admin: TAdminAccount;\n\nbegin\n  User := TUserAccount.Create;\n  Admin := TAdminAccount.Create;\n\n  User.ResetPassword;\n  Admin.ResetPassword;\n\n  User.Free;\n  Admin.Free;\nend.\n```"
  },
  {
    "task": "Create a foundational class for a beverage with properties like volume and temperature, and derive a coffee class that overrides the temperature property to be hot.",
    "code": "```pascal\nprogram BeverageInheritance;\n\ntype\n  TBeverage = class\n  private\n    FVolume: Integer;\n    FTemperature: String;\n  public\n    constructor Create(AVolume: Integer; ATemperature: String);\n    function GetVolume: Integer;\n    function GetTemperature: String; virtual;\n  end;\n\n  TCoffee = class(TBeverage)\n  public\n    constructor Create(AVolume: Integer);\n    function GetTemperature: String; override;\n  end;\n\nconstructor TBeverage.Create(AVolume: Integer; ATemperature: String);\nbegin\n  FVolume := AVolume;\n  FTemperature := ATemperature;\nend;\n\nfunction TBeverage.GetVolume: Integer;\nbegin\n  Result := FVolume;\nend;\n\nfunction TBeverage.GetTemperature: String;\nbegin\n  Result := FTemperature;\nend;\n\nconstructor TCoffee.Create(AVolume: Integer);\nbegin\n  inherited Create(AVolume, 'hot');\nend;\n\nfunction TCoffee.GetTemperature: String;\nbegin\n  Result := 'hot';\nend;\n\nvar\n  Beverage: TBeverage;\n  Coffee: TCoffee;\n\nbegin\n  Beverage := TBeverage.Create(250, 'cold');\n  Coffee := TCoffee.Create(250);\n\n  WriteLn('Beverage Temperature: ', Beverage.GetTemperature);\n  WriteLn('Coffee Temperature: ', Coffee.GetTemperature);\n\n  Beverage.Free;\n  Coffee.Free;\nend.\n```"
  },
  {
    "task": "Design a base class for a service appointment with a method to schedule time, then create a doctor appointment subclass that overrides this method to include consultation duration.",
    "code": "```pascal\nprogram ServiceAppointmentInheritance;\n\ntype\n  TServiceAppointment = class\n  public\n    procedure ScheduleTime; virtual;\n  end;\n\n  TDoctorAppointment = class(TServiceAppointment)\n  public\n    procedure ScheduleTime; override;\n  end;\n\nprocedure TServiceAppointment.ScheduleTime;\nbegin\n  WriteLn('Scheduling basic service appointment time.');\nend;\n\nprocedure TDoctorAppointment.ScheduleTime;\nbegin\n  WriteLn('Scheduling doctor appointment time with consultation duration.');\nend;\n\nvar\n  service: TServiceAppointment;\n  doctor: TDoctorAppointment;\n\nbegin\n  service := TServiceAppointment.Create;\n  doctor := TDoctorAppointment.Create;\n\n  service.ScheduleTime;\n  doctor.ScheduleTime;\n\n  service.Free;\n  doctor.Free;\nend.\n```"
  },
  {
    "task": "Develop a superclass for electronic gadgets with a method to calculate battery life, then extend it with a laptop class that overrides this method to consider usage patterns.",
    "code": "```pascal\nprogram ElectronicGadgets;\n\ntype\n  TElectronicGadget = class\n  public\n    function CalculateBatteryLife: Double; virtual;\n  end;\n\n  TLaptop = class(TElectronicGadget)\n  public\n    function CalculateBatteryLife: Double; override;\n  end;\n\nfunction TElectronicGadget.CalculateBatteryLife: Double;\nbegin\n  Result := 10.0; { Default battery life calculation }\nend;\n\nfunction TLaptop.CalculateBatteryLife: Double;\nbegin\n  Result := 8.0; { Override with laptop-specific battery life calculation }\nend;\n\nvar\n  Gadget: TElectronicGadget;\n  Laptop: TLaptop;\n\nbegin\n  Gadget := TElectronicGadget.Create;\n  Laptop := TLaptop.Create;\n\n  WriteLn('Gadget Battery Life: ', Gadget.CalculateBatteryLife:0:2, ' hours');\n  WriteLn('Laptop Battery Life: ', Laptop.CalculateBatteryLife:0:2, ' hours');\n\n  Gadget.Free;\n  Laptop.Free;\nend.\n```"
  },
  {
    "task": "Implement a base class for a website component with a method to render content, then create a blog post subclass that overrides this method to include author information.",
    "code": "```pascal\nprogram WebsiteComponent;\n\ntype\n  TComponent = class\n    public\n      procedure Render; virtual;\n  end;\n\n  TBlogPost = class(TComponent)\n    private\n      Author: string;\n    public\n      constructor Create(AName: string);\n      procedure Render; override;\n  end;\n\nprocedure TComponent.Render;\nbegin\n  WriteLn('Rendering component content');\nend;\n\nconstructor TBlogPost.Create(AName: string);\nbegin\n  Author := AName;\nend;\n\nprocedure TBlogPost.Render;\nbegin\n  WriteLn('Rendering blog post content');\n  WriteLn('Author: ', Author);\nend;\n\nvar\n  Component: TComponent;\n  BlogPost: TBlogPost;\n\nbegin\n  Component := TComponent.Create;\n  BlogPost := TBlogPost.Create('John Doe');\n\n  Component.Render;\n  BlogPost.Render;\n\n  Component.Free;\n  BlogPost.Free;\nend.\n```"
  },
  {
    "task": "Construct a parent class for a recipe with methods for ingredients and instructions, then derive a cake recipe class that overrides these methods to add baking steps.",
    "code": "```pascal\nprogram RecipeInheritance;\n\ntype\n  TRecipe = class\n    public\n      procedure Ingredients; virtual;\n      procedure Instructions; virtual;\n  end;\n\n  TCakeRecipe = class(TRecipe)\n    public\n      procedure Ingredients; override;\n      procedure Instructions; override;\n  end;\n\nprocedure TRecipe.Ingredients;\nbegin\n  writeln('List of generic ingredients.');\nend;\n\nprocedure TRecipe.Instructions;\nbegin\n  writeln('Generic instructions for a recipe.');\nend;\n\nprocedure TCakeRecipe.Ingredients;\nbegin\n  writeln('Ingredients for a cake: flour, sugar, eggs, butter.');\nend;\n\nprocedure TCakeRecipe.Instructions;\nbegin\n  writeln('Instructions for baking a cake:');\n  writeln('1. Preheat the oven to 350 degrees F.');\n  writeln('2. Mix the ingredients.');\n  writeln('3. Pour the batter into a baking pan.');\n  writeln('4. Bake for 30 minutes.');\nend;\n\nvar\n  Recipe: TRecipe;\n  Cake: TCakeRecipe;\n\nbegin\n  Recipe := TRecipe.Create;\n  Cake := TCakeRecipe.Create;\n\n  writeln('Generic Recipe:');\n  Recipe.Ingredients;\n  Recipe.Instructions;\n\n  writeln;\n  \n  writeln('Cake Recipe:');\n  Cake.Ingredients;\n  Cake.Instructions;\n\n  Recipe.Free;\n  Cake.Free;\nend.\n```"
  },
  {
    "task": "Set up a base class for a plant with methods for sunlight and water needs, and extend it with a cactus subclass that overrides these methods to require less water.",
    "code": "```pascal\nprogram PlantInheritance;\n\ntype\n  TPlant = class\n  public\n    function SunlightNeeds: string; virtual;\n    function WaterNeeds: string; virtual;\n  end;\n\n  TCactus = class(TPlant)\n  public\n    function WaterNeeds: string; override;\n  end;\n\nfunction TPlant.SunlightNeeds: string;\nbegin\n  Result := 'Requires regular sunlight';\nend;\n\nfunction TPlant.WaterNeeds: string;\nbegin\n  Result := 'Requires regular watering';\nend;\n\nfunction TCactus.WaterNeeds: string;\nbegin\n  Result := 'Requires less water';\nend;\n\nvar\n  Plant: TPlant;\n  Cactus: TCactus;\nbegin\n  Plant := TPlant.Create;\n  Cactus := TCactus.Create;\n\n  WriteLn('Plant Sunlight Needs: ', Plant.SunlightNeeds);\n  WriteLn('Plant Water Needs: ', Plant.WaterNeeds);\n  WriteLn('Cactus Sunlight Needs: ', Cactus.SunlightNeeds);\n  WriteLn('Cactus Water Needs: ', Cactus.WaterNeeds);\n\n  Plant.Free;\n  Cactus.Free;\nend.\n```"
  },
  {
    "task": "Create a foundational class for a building with properties like height and material, and derive a skyscraper class that overrides the height property to be significantly taller.",
    "code": "```pascal\nprogram BuildingInheritance;\n\ntype\n  TBuilding = class\n  private\n    FHeight: Integer;\n    FMaterial: String;\n  public\n    constructor Create(AHeight: Integer; AMaterial: String);\n    function GetHeight: Integer; virtual;\n    function GetMaterial: String;\n  end;\n\n  TSkyscraper = class(TBuilding)\n  public\n    constructor Create(AMaterial: String);\n    function GetHeight: Integer; override;\n  end;\n\nconstructor TBuilding.Create(AHeight: Integer; AMaterial: String);\nbegin\n  FHeight := AHeight;\n  FMaterial := AMaterial;\nend;\n\nfunction TBuilding.GetHeight: Integer;\nbegin\n  Result := FHeight;\nend;\n\nfunction TBuilding.GetMaterial: String;\nbegin\n  Result := FMaterial;\nend;\n\nconstructor TSkyscraper.Create(AMaterial: String);\nbegin\n  inherited Create(300, AMaterial);\nend;\n\nfunction TSkyscraper.GetHeight: Integer;\nbegin\n  Result := 300; // Skyscraper height significantly taller\nend;\n\nvar\n  Building: TBuilding;\n  Skyscraper: TSkyscraper;\n\nbegin\n  Building := TBuilding.Create(10, 'Concrete');\n  Skyscraper := TSkyscraper.Create('Steel');\n\n  Writeln('Building Height: ', Building.GetHeight);\n  Writeln('Building Material: ', Building.GetMaterial);\n\n  Writeln('Skyscraper Height: ', Skyscraper.GetHeight);\n  Writeln('Skyscraper Material: ', Skyscraper.GetMaterial);\n\n  Building.Free;\n  Skyscraper.Free;\nend.\n```"
  },
  {
    "task": "Design a base class for a payment method with a method to process transactions, then create a credit card subclass that overrides this method to include credit limits.",
    "code": "```pascal\nprogram PaymentSystem;\n\ntype\n  TPaymentMethod = class\n  public\n    procedure ProcessTransaction(amount: Real); virtual;\n  end;\n\n  TCreditCard = class(TPaymentMethod)\n  private\n    CreditLimit: Real;\n  public\n    constructor Create(limit: Real);\n    procedure ProcessTransaction(amount: Real); override;\n  end;\n\n{ TPaymentMethod }\n\nprocedure TPaymentMethod.ProcessTransaction(amount: Real);\nbegin\n  Writeln('Processing transaction of amount: ', amount:0:2);\nend;\n\n{ TCreditCard }\n\nconstructor TCreditCard.Create(limit: Real);\nbegin\n  CreditLimit := limit;\nend;\n\nprocedure TCreditCard.ProcessTransaction(amount: Real);\nbegin\n  if amount <= CreditLimit then\n    Writeln('Processing credit card transaction of amount: ', amount:0:2)\n  else\n    Writeln('Transaction declined. Amount exceeds credit limit.');\nend;\n\nvar\n  Payment: TPaymentMethod;\n  CreditCard: TCreditCard;\n\nbegin\n  Payment := TPaymentMethod.Create;\n  Payment.ProcessTransaction(100);\n\n  CreditCard := TCreditCard.Create(500);\n  CreditCard.ProcessTransaction(100);\n  CreditCard.ProcessTransaction(600);\n\n  Payment.Free;\n  CreditCard.Free;\nend.\n```"
  },
  {
    "task": "Develop a superclass for a computer program with methods for input and output, then extend it with a game subclass that overrides these methods to include player interactions.",
    "code": "```pascal\nprogram InheritanceExample;\n\ntype\n  TProgram = class\n  public\n    procedure Input; virtual;\n    procedure Output; virtual;\n  end;\n\n  TGame = class(TProgram)\n  public\n    procedure Input; override;\n    procedure Output; override;\n  end;\n\nprocedure TProgram.Input;\nbegin\n  Writeln('Program input method.');\nend;\n\nprocedure TProgram.Output;\nbegin\n  Writeln('Program output method.');\nend;\n\nprocedure TGame.Input;\nbegin\n  Writeln('Game input method for player interactions.');\nend;\n\nprocedure TGame.Output;\nbegin\n  Writeln('Game output method with player interactions.');\nend;\n\nvar\n  MyProgram: TProgram;\n  MyGame: TGame;\n\nbegin\n  MyProgram := TProgram.Create;\n  MyGame := TGame.Create;\n\n  MyProgram.Input;\n  MyProgram.Output;\n\n  MyGame.Input;\n  MyGame.Output;\n\n  MyProgram.Free;\n  MyGame.Free;\nend.\n```"
  },
  {
    "task": "Implement a base class for a dining establishment with a method to calculate wait time, then create a fast food subclass that overrides this method to be shorter.",
    "code": "```pascal\nprogram DiningEstablishmentInheritance;\n\ntype\n  TDiningEstablishment = class\n  public\n    function CalculateWaitTime: Integer; virtual;\n  end;\n\n  TFastFood = class(TDiningEstablishment)\n  public\n    function CalculateWaitTime: Integer; override;\n  end;\n\nfunction TDiningEstablishment.CalculateWaitTime: Integer;\nbegin\n  Result := 30; // Default wait time in minutes\nend;\n\nfunction TFastFood.CalculateWaitTime: Integer;\nbegin\n  Result := 10; // Shorter wait time for fast food\nend;\n\nvar\n  Restaurant: TDiningEstablishment;\n  FastFoodPlace: TFastFood;\nbegin\n  Restaurant := TDiningEstablishment.Create;\n  FastFoodPlace := TFastFood.Create;\n\n  WriteLn('Restaurant wait time: ', Restaurant.CalculateWaitTime, ' minutes');\n  WriteLn('Fast food wait time: ', FastFoodPlace.CalculateWaitTime, ' minutes');\n\n  Restaurant.Free;\n  FastFoodPlace.Free;\nend.\n```"
  },
  {
    "task": "Construct a parent class for a social media profile with methods for posting and liking, then derive a business profile class that overrides these methods to include promotions.",
    "code": "```pascal\nprogram SocialMediaProfiles;\n\ntype\n  TProfile = class\n  public\n    procedure Post;\n    procedure Like;\n  end;\n\n  TBusinessProfile = class(TProfile)\n  public\n    procedure Post; override;\n    procedure Like; override;\n  end;\n\nprocedure TProfile.Post;\nbegin\n  Writeln('Posting on social media profile.');\nend;\n\nprocedure TProfile.Like;\nbegin\n  Writeln('Liking a post on social media profile.');\nend;\n\nprocedure TBusinessProfile.Post;\nbegin\n  Writeln('Posting on business profile with promotions.');\nend;\n\nprocedure TBusinessProfile.Like;\nbegin\n  Writeln('Liking a post on business profile with promotions.');\nend;\n\nvar\n  Profile: TProfile;\n  BusinessProfile: TBusinessProfile;\nbegin\n  Profile := TProfile.Create;\n  BusinessProfile := TBusinessProfile.Create;\n\n  Profile.Post;\n  Profile.Like;\n\n  BusinessProfile.Post;\n  BusinessProfile.Like;\n\n  Profile.Free;\n  BusinessProfile.Free;\nend.\n```"
  },
  {
    "task": "Set up a base class for an educational course with methods for syllabus and grading, and extend it with an online course subclass that overrides these methods for remote learning.",
    "code": "```pascal\nprogram EducationalCourses;\n\ntype\n  TCourse = class\n    procedure Syllabus; virtual;\n    procedure Grading; virtual;\n  end;\n\n  TOnlineCourse = class(TCourse)\n    procedure Syllabus; override;\n    procedure Grading; override;\n  end;\n\nprocedure TCourse.Syllabus;\nbegin\n  Writeln('Base Course Syllabus');\nend;\n\nprocedure TCourse.Grading;\nbegin\n  Writeln('Base Course Grading');\nend;\n\nprocedure TOnlineCourse.Syllabus;\nbegin\n  Writeln('Online Course Syllabus for Remote Learning');\nend;\n\nprocedure TOnlineCourse.Grading;\nbegin\n  Writeln('Online Course Grading for Remote Learning');\nend;\n\nvar\n  BaseCourse: TCourse;\n  RemoteCourse: TOnlineCourse;\nbegin\n  BaseCourse := TCourse.Create;\n  RemoteCourse := TOnlineCourse.Create;\n\n  BaseCourse.Syllabus;\n  BaseCourse.Grading;\n  \n  RemoteCourse.Syllabus;\n  RemoteCourse.Grading;\n\n  BaseCourse.Free;\n  RemoteCourse.Free;\nend.\n```"
  },
  {
    "task": "Create a foundational class for a sports team with properties like team name and coach, and derive a football team class that overrides the coach property with a specific person.",
    "code": "```pascal\nprogram InheritanceMechanismExample;\n\ntype\n  TSportsTeam = class\n  private\n    FTeamName: string;\n    FCoach: string;\n  public\n    property TeamName: string read FTeamName write FTeamName;\n    property Coach: string read FCoach write FCoach;\n  end;\n\n  TFootballTeam = class(TSportsTeam)\n  public\n    constructor Create;\n  end;\n\nconstructor TFootballTeam.Create;\nbegin\n  inherited Create;\n  Coach := 'Specific Person'; // Override the coach property\nend;\n\nvar\n  FootballTeam: TFootballTeam;\n\nbegin\n  FootballTeam := TFootballTeam.Create;\n  FootballTeam.TeamName := 'Awesome Football Team';\n  writeln('Football Team: ', FootballTeam.TeamName);\n  writeln('Coach: ', FootballTeam.Coach);\n  FootballTeam.Free;\nend.\n```"
  },
  {
    "task": "Design a base class for a document with methods for printing and saving, then create a PDF document subclass that overrides these methods to include encryption.",
    "code": "```pascal\nprogram DocumentInheritance;\n\ntype\n  TDocument = class\n  public\n    procedure Print; virtual;\n    procedure Save; virtual;\n  end;\n\n  TPDFDocument = class(TDocument)\n  public\n    procedure Print; override;\n    procedure Save; override;\n  end;\n\nprocedure TDocument.Print;\nbegin\n  Writeln('Printing document...');\nend;\n\nprocedure TDocument.Save;\nbegin\n  Writeln('Saving document...');\nend;\n\nprocedure TPDFDocument.Print;\nbegin\n  Writeln('Printing PDF document with encryption...');\nend;\n\nprocedure TPDFDocument.Save;\nbegin\n  Writeln('Saving PDF document with encryption...');\nend;\n\nvar\n  Doc: TDocument;\n  PDFDoc: TPDFDocument;\n\nbegin\n  Doc := TDocument.Create;\n  PDFDoc := TPDFDocument.Create;\n\n  Doc.Print;\n  Doc.Save;\n\n  PDFDoc.Print;\n  PDFDoc.Save;\n  \n  Doc.Free;\n  PDFDoc.Free;\nend.\n```"
  },
  {
    "task": "Develop a superclass for a retail product with methods for pricing and discount, then extend it with an electronics product class that overrides the discount method to offer more.",
    "code": "```pascal\nprogram RetailProductDemo;\n\ntype\n  TRetailProduct = class\n  protected\n    FPrice: Double;\n  public\n    constructor Create(AInitialPrice: Double);\n    function GetPrice: Double;\n    function CalculateDiscount: Double; virtual;\n  end;\n\ntype\n  TElectronicsProduct = class(TRetailProduct)\n  public\n    function CalculateDiscount: Double; override;\n  end;\n\nconstructor TRetailProduct.Create(AInitialPrice: Double);\nbegin\n  FPrice := AInitialPrice;\nend;\n\nfunction TRetailProduct.GetPrice: Double;\nbegin\n  Result := FPrice;\nend;\n\nfunction TRetailProduct.CalculateDiscount: Double;\nbegin\n  Result := FPrice * 0.1; // Default discount is 10%\nend;\n\nfunction TElectronicsProduct.CalculateDiscount: Double;\nbegin\n  Result := FPrice * 0.2; // Electronics have a 20% discount\nend;\n\nvar\n  RegularProduct: TRetailProduct;\n  Electronics: TElectronicsProduct;\n\nbegin\n  RegularProduct := TRetailProduct.Create(100.0);\n  Electronics := TElectronicsProduct.Create(200.0);\n\n  Writeln('Regular Product Price: $', RegularProduct.GetPrice:0:2);\n  Writeln('Regular Product Discount: $', RegularProduct.CalculateDiscount:0:2);\n\n  Writeln('Electronics Product Price: $', Electronics.GetPrice:0:2);\n  Writeln('Electronics Product Discount: $', Electronics.CalculateDiscount:0:2);\n\n  RegularProduct.Free;\n  Electronics.Free;\nend.\n```"
  },
  {
    "task": "Implement a base class for a subscription service with a method to renew membership, then create a monthly subscription subclass that overrides this method for automatic renewal.",
    "code": "```pascal\nprogram SubscriptionService;\n\ntype\n  TSubscription = class\n  public\n    procedure RenewMembership; virtual;\n  end;\n\n  TMonthlySubscription = class(TSubscription)\n  public\n    procedure RenewMembership; override;\n  end;\n\nprocedure TSubscription.RenewMembership;\nbegin\n  Writeln('Membership renewed manually.');\nend;\n\nprocedure TMonthlySubscription.RenewMembership;\nbegin\n  Writeln('Membership renewed automatically for the month.');\nend;\n\nvar\n  basicSubscription: TSubscription;\n  monthlySubscription: TMonthlySubscription;\n\nbegin\n  basicSubscription := TSubscription.Create;\n  monthlySubscription := TMonthlySubscription.Create;\n\n  basicSubscription.RenewMembership;\n  monthlySubscription.RenewMembership;\n\n  basicSubscription.Free;\n  monthlySubscription.Free;\nend.\n```"
  },
  {
    "task": "Construct a parent class for a language translator with a method to translate text, then derive a French translator class that overrides this method for French language specifics.",
    "code": "```pascal\nprogram TranslatorInheritance;\n\ntype\n  TTranslator = class\n  public\n    function Translate(text: String): String; virtual;\n  end;\n\n  TFrenchTranslator = class(TTranslator)\n  public\n    function Translate(text: String): String; override;\n  end;\n\nfunction TTranslator.Translate(text: String): String;\nbegin\n  Result := 'Generic translation: ' + text;\nend;\n\nfunction TFrenchTranslator.Translate(text: String): String;\nbegin\n  Result := 'Traduction en fran\u00e7ais: ' + text;\nend;\n\nvar\n  Translator: TTranslator;\n  FrenchTranslator: TFrenchTranslator;\nbegin\n  Translator := TTranslator.Create;\n  FrenchTranslator := TFrenchTranslator.Create;\n\n  Writeln(Translator.Translate('Hello World'));\n  Writeln(FrenchTranslator.Translate('Hello World'));\n\n  Translator.Free;\n  FrenchTranslator.Free;\nend.\n```"
  },
  {
    "task": "Set up a base class for a customer order with methods for placing and tracking, and extend it with a food order subclass that overrides tracking for delivery status.",
    "code": "```pascal\nprogram InheritanceExample;\n\ntype\n  TCustomerOrder = class\n  public\n    procedure PlaceOrder; virtual;\n    procedure TrackOrder; virtual;\n  end;\n\n  TFoodOrder = class(TCustomerOrder)\n  public\n    procedure TrackOrder; override;\n  end;\n\nprocedure TCustomerOrder.PlaceOrder;\nbegin\n  Writeln('Order placed.');\nend;\n\nprocedure TCustomerOrder.TrackOrder;\nbegin\n  Writeln('Tracking customer order.');\nend;\n\nprocedure TFoodOrder.TrackOrder;\nbegin\n  Writeln('Tracking food order: delivery status.');\nend;\n\nvar\n  Order: TCustomerOrder;\n  Food: TFoodOrder;\n\nbegin\n  Order := TCustomerOrder.Create;\n  Food := TFoodOrder.Create;\n\n  Order.PlaceOrder;\n  Order.TrackOrder;\n\n  Food.PlaceOrder;\n  Food.TrackOrder;\n\n  Order.Free;\n  Food.Free;\nend.\n```"
  },
  {
    "task": "Create a foundational class for an artwork with properties like artist and medium, and derive a painting class that overrides the medium property to be 'canvas'.",
    "code": "```pascal\nprogram ArtInheritance;\n\ntype\n  TArtwork = class\n  private\n    FArtist: string;\n    FMedium: string;\n  public\n    constructor Create(Artist, Medium: string);\n    property Artist: string read FArtist write FArtist;\n    property Medium: string read FMedium write FMedium;\n  end;\n\n  TPainting = class(TArtwork)\n  public\n    constructor Create(Artist: string);\n  end;\n\nconstructor TArtwork.Create(Artist, Medium: string);\nbegin\n  FArtist := Artist;\n  FMedium := Medium;\nend;\n\nconstructor TPainting.Create(Artist: string);\nbegin\n  inherited Create(Artist, 'canvas');\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Design a base class for a computer network with methods for connectivity and bandwidth, then create a wireless network subclass that overrides these methods for signal strength.",
    "code": "```pascal\nprogram NetworkInheritance;\n\ntype\n  TNetwork = class\n    procedure Connectivity; virtual;\n    procedure Bandwidth; virtual;\n  end;\n\n  TWirelessNetwork = class(TNetwork)\n    procedure Connectivity; override;\n    procedure Bandwidth; override;\n  end;\n\n{ TNetwork methods implementation }\nprocedure TNetwork.Connectivity;\nbegin\n  writeln('Base network connectivity');\nend;\n\nprocedure TNetwork.Bandwidth;\nbegin\n  writeln('Base network bandwidth');\nend;\n\n{ TWirelessNetwork methods implementation }\nprocedure TWirelessNetwork.Connectivity;\nbegin\n  writeln('Wireless network connectivity based on signal strength');\nend;\n\nprocedure TWirelessNetwork.Bandwidth;\nbegin\n  writeln('Wireless network bandwidth based on signal strength');\nend;\n\nvar\n  Network: TNetwork;\n  WirelessNetwork: TWirelessNetwork;\n\nbegin\n  Network := TNetwork.Create;\n  WirelessNetwork := TWirelessNetwork.Create;\n\n  Network.Connectivity;\n  Network.Bandwidth;\n\n  WirelessNetwork.Connectivity;\n  WirelessNetwork.Bandwidth;\n\n  Network.Free;\n  WirelessNetwork.Free;\nend.\n```"
  },
  {
    "task": "Develop a superclass for a messaging app with methods for sending and receiving messages, then extend it with a secure messaging subclass that overrides these methods for encryption.",
    "code": "```pascal\nprogram MessagingApp;\n\ntype\n  TMessageApp = class\n    public\n      procedure SendMessage(msg: string); virtual;\n      function ReceiveMessage: string; virtual;\n  end;\n\n  TSecureMessageApp = class(TMessageApp)\n    public\n      procedure SendMessage(msg: string); override;\n      function ReceiveMessage: string; override;\n  end;\n\nprocedure TMessageApp.SendMessage(msg: string);\nbegin\n  writeln('Sending Message: ', msg);\nend;\n\nfunction TMessageApp.ReceiveMessage: string;\nbegin\n  ReceiveMessage := 'Received Message';\nend;\n\nprocedure TSecureMessageApp.SendMessage(msg: string);\nbegin\n  writeln('Sending Encrypted Message: ', '***', msg, '***');\nend;\n\nfunction TSecureMessageApp.ReceiveMessage: string;\nbegin\n  ReceiveMessage := 'Received Encrypted Message';\nend;\n\nvar\n  MessageApp: TMessageApp;\n  SecureMessageApp: TSecureMessageApp;\nbegin\n  MessageApp := TMessageApp.Create;\n  SecureMessageApp := TSecureMessageApp.Create;\n\n  MessageApp.SendMessage('Hello World');\n  writeln(MessageApp.ReceiveMessage);\n\n  SecureMessageApp.SendMessage('Hello Secure World');\n  writeln(SecureMessageApp.ReceiveMessage);\n\n  MessageApp.Free;\n  SecureMessageApp.Free;\nend.\n```"
  },
  {
    "task": "Implement a base class for a travel itinerary with methods for destinations and activities, then create a vacation itinerary subclass that overrides these methods for leisure activities.",
    "code": "```pascal\nprogram TravelItineraryInheritance;\n\ntype\n  TTravelItinerary = class\n  public\n    procedure Destinations; virtual;\n    procedure Activities; virtual;\n  end;\n\n  TVacationItinerary = class(TTravelItinerary)\n  public\n    procedure Destinations; override;\n    procedure Activities; override;\n  end;\n\nprocedure TTravelItinerary.Destinations;\nbegin\n  writeln('Base itinerary destinations.');\nend;\n\nprocedure TTravelItinerary.Activities;\nbegin\n  writeln('Base itinerary activities.');\nend;\n\nprocedure TVacationItinerary.Destinations;\nbegin\n  writeln('Vacation itinerary destinations.');\nend;\n\nprocedure TVacationItinerary.Activities;\nbegin\n  writeln('Leisure activities for vacation.');\nend;\n\nvar\n  BaseItinerary: TTravelItinerary;\n  VacationItinerary: TVacationItinerary;\nbegin\n  BaseItinerary := TTravelItinerary.Create;\n  VacationItinerary := TVacationItinerary.Create;\n\n  writeln('Base Itinerary:');\n  BaseItinerary.Destinations;\n  BaseItinerary.Activities;\n\n  writeln('Vacation Itinerary:');\n  VacationItinerary.Destinations;\n  VacationItinerary.Activities;\n\n  BaseItinerary.Free;\n  VacationItinerary.Free;\nend.\n```"
  },
  {
    "task": "Construct a parent class for a healthcare record with methods for patient data and treatment history, then derive a pediatric record class that overrides these methods for child-specific data.",
    "code": "```pascal\nprogram HealthcareRecords;\n\ntype\n  THealthcareRecord = class\n  public\n    procedure PatientData; virtual;\n    procedure TreatmentHistory; virtual;\n  end;\n\n  TPediatricRecord = class(THealthcareRecord)\n  public\n    procedure PatientData; override;\n    procedure TreatmentHistory; override;\n  end;\n\n{ THealthcareRecord }\n\nprocedure THealthcareRecord.PatientData;\nbegin\n  WriteLn('General patient data');\nend;\n\nprocedure THealthcareRecord.TreatmentHistory;\nbegin\n  WriteLn('General treatment history');\nend;\n\n{ TPediatricRecord }\n\nprocedure TPediatricRecord.PatientData;\nbegin\n  WriteLn('Child-specific patient data');\nend;\n\nprocedure TPediatricRecord.TreatmentHistory;\nbegin\n  WriteLn('Child-specific treatment history');\nend;\n\nvar\n  GeneralRecord: THealthcareRecord;\n  ChildRecord: TPediatricRecord;\n\nbegin\n  GeneralRecord := THealthcareRecord.Create;\n  ChildRecord := TPediatricRecord.Create;\n\n  GeneralRecord.PatientData;\n  GeneralRecord.TreatmentHistory;\n\n  ChildRecord.PatientData;\n  ChildRecord.TreatmentHistory;\n\n  GeneralRecord.Free;\n  ChildRecord.Free;\nend.\n```"
  },
  {
    "task": "Set up a base class for a culinary dish with methods for preparation and serving, and extend it with an appetizer subclass that overrides these methods for smaller portions.",
    "code": "```pascal\nprogram CulinaryDish;\n\ntype\n  TCulinaryDish = class\n    procedure Prepare; virtual;\n    procedure Serve; virtual;\n  end;\n\n  TAppetizer = class(TCulinaryDish)\n    procedure Prepare; override;\n    procedure Serve; override;\n  end;\n\nprocedure TCulinaryDish.Prepare;\nbegin\n  Writeln('Preparing the dish...');\nend;\n\nprocedure TCulinaryDish.Serve;\nbegin\n  Writeln('Serving the dish...');\nend;\n\nprocedure TAppetizer.Prepare;\nbegin\n  Writeln('Preparing a small portion...');\nend;\n\nprocedure TAppetizer.Serve;\nbegin\n  Writeln('Serving a small portion...');\nend;\n\nvar\n  Dish: TCulinaryDish;\n  Appetizer: TAppetizer;\nbegin\n  Dish := TCulinaryDish.Create;\n  Dish.Prepare;\n  Dish.Serve;\n\n  Appetizer := TAppetizer.Create;\n  Appetizer.Prepare;\n  Appetizer.Serve;\n\n  Dish.Free;\n  Appetizer.Free;\nend.\n```"
  },
  {
    "task": "Create a foundational class for a book collection with properties like genre and author, and derive a mystery collection class that overrides the genre property to be 'mystery'.",
    "code": "```pascal\nprogram BookCollection;\n\ntype\n  TBookCollection = class\n  private\n    FGenre: string;\n    FAuthor: string;\n  public\n    constructor Create(aGenre, aAuthor: string);\n    property Genre: string read FGenre write FGenre;\n    property Author: string read FAuthor write FAuthor;\n  end;\n\n  TMysteryCollection = class(TBookCollection)\n  public\n    constructor Create(aAuthor: string);\n  end;\n\nconstructor TBookCollection.Create(aGenre, aAuthor: string);\nbegin\n  FGenre := aGenre;\n  FAuthor := aAuthor;\nend;\n\nconstructor TMysteryCollection.Create(aAuthor: string);\nbegin\n  inherited Create('mystery', aAuthor);\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Design a base class for a file storage system with methods for saving and deleting files, then create a cloud storage subclass that overrides these methods for remote access.",
    "code": "```pascal\nprogram FileStorageSystem;\n\ntype\n  TFileStorage = class\n  public\n    procedure SaveFile; virtual;\n    procedure DeleteFile; virtual;\n  end;\n\n  TCloudStorage = class(TFileStorage)\n  public\n    procedure SaveFile; override;\n    procedure DeleteFile; override;\n  end;\n\nprocedure TFileStorage.SaveFile;\nbegin\n  WriteLn('Saving file locally.');\nend;\n\nprocedure TFileStorage.DeleteFile;\nbegin\n  WriteLn('Deleting file locally.');\nend;\n\nprocedure TCloudStorage.SaveFile;\nbegin\n  WriteLn('Saving file to cloud.');\nend;\n\nprocedure TCloudStorage.DeleteFile;\nbegin\n  WriteLn('Deleting file from cloud.');\nend;\n\nvar\n  Storage: TFileStorage;\n  Cloud: TCloudStorage;\n\nbegin\n  Storage := TFileStorage.Create;\n  Cloud := TCloudStorage.Create;\n\n  Storage.SaveFile;\n  Storage.DeleteFile;\n\n  Cloud.SaveFile;\n  Cloud.DeleteFile;\n\n  Storage.Free;\n  Cloud.Free;\nend.\n```"
  },
  {
    "task": "Develop a superclass for a seasonal sale event with methods for discounts and promotions, then extend it with a summer sale subclass that overrides these methods for summer items.",
    "code": "```pascal\nprogram SeasonalSale;\n\ntype\n  TSeasonalSale = class\n  public\n    function GetDiscount: Real; virtual;\n    function GetPromotion: String; virtual;\n  end;\n\n  TSummerSale = class(TSeasonalSale)\n  public\n    function GetDiscount: Real; override;\n    function GetPromotion: String; override;\n  end;\n\nfunction TSeasonalSale.GetDiscount: Real;\nbegin\n  Result := 0.10; // 10% discount\nend;\n\nfunction TSeasonalSale.GetPromotion: String;\nbegin\n  Result := 'General Sale Promotion';\nend;\n\nfunction TSummerSale.GetDiscount: Real;\nbegin\n  Result := 0.20; // 20% discount for summer items\nend;\n\nfunction TSummerSale.GetPromotion: String;\nbegin\n  Result := 'Summer Sale Promotion';\nend;\n\nvar\n  SummerSale: TSummerSale;\nbegin\n  SummerSale := TSummerSale.Create;\n  try\n    WriteLn('Summer Sale Discount: ', SummerSale.GetDiscount:0:2);\n    WriteLn('Summer Sale Promotion: ', SummerSale.GetPromotion);\n  finally\n    SummerSale.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Implement a base class for a personal budget with methods for income and expenses, then create a student budget subclass that overrides these methods for tuition and fees.",
    "code": "```pascal\nprogram BudgetInheritance;\n\ntype\n  TPersonalBudget = class\n  public\n    procedure AddIncome(Amount: Real); virtual;\n    procedure AddExpense(Amount: Real); virtual;\n  end;\n\n  TStudentBudget = class(TPersonalBudget)\n  public\n    procedure AddIncome(Amount: Real); override;\n    procedure AddExpense(Amount: Real); override;\n  end;\n\nprocedure TPersonalBudget.AddIncome(Amount: Real);\nbegin\n  WriteLn('Personal Income: ', Amount:0:2);\nend;\n\nprocedure TPersonalBudget.AddExpense(Amount: Real);\nbegin\n  WriteLn('Personal Expense: ', Amount:0:2);\nend;\n\nprocedure TStudentBudget.AddIncome(Amount: Real);\nbegin\n  WriteLn('Student Income (Scholarship): ', Amount:0:2);\nend;\n\nprocedure TStudentBudget.AddExpense(Amount: Real);\nbegin\n  WriteLn('Student Expense (Tuition and Fees): ', Amount:0:2);\nend;\n\nvar\n  Personal: TPersonalBudget;\n  Student: TStudentBudget;\n\nbegin\n  Personal := TPersonalBudget.Create;\n  Student := TStudentBudget.Create;\n\n  Personal.AddIncome(1000.00);\n  Personal.AddExpense(200.00);\n\n  Student.AddIncome(500.00);\n  Student.AddExpense(300.00);\n\n  Personal.Free;\n  Student.Free;\nend.\n```"
  },
  {
    "task": "Construct a parent class for a fitness routine with methods for exercises and duration, then derive a yoga routine class that overrides these methods for flexibility exercises.",
    "code": "```pascal\nprogram FitnessRoutineInheritance;\n\ntype\n  TFitnessRoutine = class\n    procedure Exercises; virtual;\n    procedure Duration; virtual;\n  end;\n\n  TYogaRoutine = class(TFitnessRoutine)\n    procedure Exercises; override;\n    procedure Duration; override;\n  end;\n\nprocedure TFitnessRoutine.Exercises;\nbegin\n  WriteLn('General fitness exercises');\nend;\n\nprocedure TFitnessRoutine.Duration;\nbegin\n  WriteLn('Standard duration');\nend;\n\nprocedure TYogaRoutine.Exercises;\nbegin\n  WriteLn('Flexibility exercises for yoga');\nend;\n\nprocedure TYogaRoutine.Duration;\nbegin\n  WriteLn('Extended yoga duration');\nend;\n\nvar\n  Routine: TFitnessRoutine;\nbegin\n  Routine := TFitnessRoutine.Create;\n  Routine.Exercises;\n  Routine.Duration;\n\n  Routine := TYogaRoutine.Create;\n  Routine.Exercises;\n  Routine.Duration;\n\n  Routine.Free;\nend.\n```"
  },
  {
    "task": "Set up a base class for a transportation ticket with methods for pricing and validity, and extend it with an airline ticket subclass that overrides these methods for baggage allowance.",
    "code": "```pascal\nprogram TicketSystem;\n\ntype\n  TTransportTicket = class\n  public\n    function GetPrice: Real; virtual;\n    function IsValid: Boolean; virtual;\n  end;\n\n  TAirlineTicket = class(TTransportTicket)\n  public\n    function GetPrice: Real; override;\n    function IsValid: Boolean; override;\n    function GetBaggageAllowance: Integer;\n  end;\n\nfunction TTransportTicket.GetPrice: Real;\nbegin\n  Result := 50.0;  // Base price\nend;\n\nfunction TTransportTicket.IsValid: Boolean;\nbegin\n  Result := True;  // Base validity\nend;\n\nfunction TAirlineTicket.GetPrice: Real;\nbegin\n  Result := 200.0;  // Airline-specific price\nend;\n\nfunction TAirlineTicket.IsValid: Boolean;\nbegin\n  Result := True;  // Airline-specific validity\nend;\n\nfunction TAirlineTicket.GetBaggageAllowance: Integer;\nbegin\n  Result := 30;  // Baggage allowance in kg\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Create a foundational class for a digital photo album with properties like album name and date, and derive a vacation album class that overrides the date property to be specific.",
    "code": "```pascal\nprogram PhotoAlbumInheritance;\n\ntype\n  TPhotoAlbum = class\n    private\n      FAlbumName: string;\n      FDate: TDateTime;\n    public\n      constructor Create(AAlbumName: string; ADate: TDateTime);\n      function GetAlbumName: string;\n      function GetDate: TDateTime;\n  end;\n\n  TVacationAlbum = class(TPhotoAlbum)\n    private\n      FSpecificDate: TDateTime;\n    public\n      constructor Create(AAlbumName: string; ASpecificDate: TDateTime);\n      function GetDate: TDateTime; override;\n  end;\n\nconstructor TPhotoAlbum.Create(AAlbumName: string; ADate: TDateTime);\nbegin\n  FAlbumName := AAlbumName;\n  FDate := ADate;\nend;\n\nfunction TPhotoAlbum.GetAlbumName: string;\nbegin\n  Result := FAlbumName;\nend;\n\nfunction TPhotoAlbum.GetDate: TDateTime;\nbegin\n  Result := FDate;\nend;\n\nconstructor TVacationAlbum.Create(AAlbumName: string; ASpecificDate: TDateTime);\nbegin\n  inherited Create(AAlbumName, ASpecificDate);\n  FSpecificDate := ASpecificDate;\nend;\n\nfunction TVacationAlbum.GetDate: TDateTime;\nbegin\n  Result := FSpecificDate;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Design a base class for a home appliance with methods for power usage and warranty, then create a refrigerator subclass that overrides these methods for energy efficiency.",
    "code": "```pascal\nprogram HomeApplianceInheritance;\n\ntype\n  THomeAppliance = class\n  public\n    function PowerUsage: string; virtual;\n    function Warranty: string; virtual;\n  end;\n\n  TRefrigerator = class(THomeAppliance)\n  public\n    function PowerUsage: string; override;\n    function Warranty: string; override;\n  end;\n\nfunction THomeAppliance.PowerUsage: string;\nbegin\n  Result := 'Standard power usage';\nend;\n\nfunction THomeAppliance.Warranty: string;\nbegin\n  Result := 'Standard warranty';\nend;\n\nfunction TRefrigerator.PowerUsage: string;\nbegin\n  Result := 'Energy efficient power usage';\nend;\n\nfunction TRefrigerator.Warranty: string;\nbegin\n  Result := 'Extended warranty for energy efficient models';\nend;\n\nvar\n  Appliance: THomeAppliance;\n  Fridge: TRefrigerator;\n\nbegin\n  Appliance := THomeAppliance.Create;\n  Fridge := TRefrigerator.Create;\n\n  Writeln('Home Appliance Power Usage: ', Appliance.PowerUsage);\n  Writeln('Home Appliance Warranty: ', Appliance.Warranty);\n  \n  Writeln('Refrigerator Power Usage: ', Fridge.PowerUsage);\n  Writeln('Refrigerator Warranty: ', Fridge.Warranty);\n\n  Appliance.Free;\n  Fridge.Free;\nend.\n```"
  },
  {
    "task": "Develop a superclass for a software update with methods for versioning and patch notes, then extend it with a security update subclass that overrides these methods for vulnerabilities.",
    "code": "```pascal\nprogram SoftwareUpdateInheritance;\n\ntype\n  TSoftwareUpdate = class\n  public\n    procedure Versioning; virtual;\n    procedure PatchNotes; virtual;\n  end;\n\n  TSecurityUpdate = class(TSoftwareUpdate)\n  public\n    procedure Versioning; override;\n    procedure PatchNotes; override;\n  end;\n\nprocedure TSoftwareUpdate.Versioning;\nbegin\n  Writeln('General software versioning.');\nend;\n\nprocedure TSoftwareUpdate.PatchNotes;\nbegin\n  Writeln('General patch notes.');\nend;\n\nprocedure TSecurityUpdate.Versioning;\nbegin\n  Writeln('Security update versioning.');\nend;\n\nprocedure TSecurityUpdate.PatchNotes;\nbegin\n  Writeln('Security patch notes focusing on vulnerabilities.');\nend;\n\nvar\n  Update: TSoftwareUpdate;\n  Security: TSecurityUpdate;\n\nbegin\n  Update := TSoftwareUpdate.Create;\n  Security := TSecurityUpdate.Create;\n  \n  Update.Versioning;\n  Update.PatchNotes;\n  \n  Security.Versioning;\n  Security.PatchNotes;\n  \n  Update.Free;\n  Security.Free;\nend.\n```"
  },
  {
    "task": "Implement a base class for a musical performance with methods for rehearsal and execution, then create a concert performance subclass that overrides these methods for live audience.",
    "code": "```pascal\nprogram MusicalPerformanceInheritance;\n\ntype\n  TPerformance = class\n  public\n    procedure Rehearsal; virtual;\n    procedure Execution; virtual;\n  end;\n\n  TConcertPerformance = class(TPerformance)\n  public\n    procedure Rehearsal; override;\n    procedure Execution; override;\n  end;\n\nprocedure TPerformance.Rehearsal;\nbegin\n  WriteLn('Rehearsing the performance.');\nend;\n\nprocedure TPerformance.Execution;\nbegin\n  WriteLn('Executing the performance.');\nend;\n\nprocedure TConcertPerformance.Rehearsal;\nbegin\n  WriteLn('Rehearsing the concert for a live audience.');\nend;\n\nprocedure TConcertPerformance.Execution;\nbegin\n  WriteLn('Executing the concert for a live audience.');\nend;\n\nvar\n  Performance: TPerformance;\n  Concert: TConcertPerformance;\nbegin\n  Performance := TPerformance.Create;\n  Concert := TConcertPerformance.Create;\n\n  Performance.Rehearsal;\n  Performance.Execution;\n  \n  Concert.Rehearsal;\n  Concert.Execution;\n\n  Performance.Free;\n  Concert.Free;\nend.\n```"
  },
  {
    "task": "Construct a parent class for an academic degree with methods for course requirements and credits, then derive a master's degree class that overrides these methods for advanced studies.",
    "code": "```pascal\nprogram AcademicDegrees;\n\ntype\n  TAcademicDegree = class\n  public\n    procedure CourseRequirements; virtual;\n    procedure Credits; virtual;\n  end;\n\n  TMastersDegree = class(TAcademicDegree)\n  public\n    procedure CourseRequirements; override;\n    procedure Credits; override;\n  end;\n\nprocedure TAcademicDegree.CourseRequirements;\nbegin\n  Writeln('Course requirements for a general academic degree.');\nend;\n\nprocedure TAcademicDegree.Credits;\nbegin\n  Writeln('Credits required for a general academic degree.');\nend;\n\nprocedure TMastersDegree.CourseRequirements;\nbegin\n  Writeln('Advanced course requirements for a master''s degree.');\nend;\n\nprocedure TMastersDegree.Credits;\nbegin\n  Writeln('Advanced credits required for a master''s degree.');\nend;\n\nvar\n  Degree: TAcademicDegree;\n  Masters: TMastersDegree;\nbegin\n  Degree := TAcademicDegree.Create;\n  Masters := TMastersDegree.Create;\n\n  Degree.CourseRequirements;\n  Degree.Credits;\n\n  Masters.CourseRequirements;\n  Masters.Credits;\n\n  Degree.Free;\n  Masters.Free;\nend.\n```"
  },
  {
    "task": "Set up a base class for a weather forecast with methods for temperature and conditions, and extend it with a winter forecast subclass that overrides these methods for snow conditions.",
    "code": "```pascal\nprogram WeatherForecast;\n\ntype\n  TWeatherForecast = class\n  public\n    function GetTemperature: string; virtual;\n    function GetConditions: string; virtual;\n  end;\n\n  TWinterForecast = class(TWeatherForecast)\n  public\n    function GetTemperature: string; override;\n    function GetConditions: string; override;\n  end;\n\n{ TWeatherForecast }\n\nfunction TWeatherForecast.GetTemperature: string;\nbegin\n  Result := 'Temperature is normal.';\nend;\n\nfunction TWeatherForecast.GetConditions: string;\nbegin\n  Result := 'Weather conditions are typical.';\nend;\n\n{ TWinterForecast }\n\nfunction TWinterForecast.GetTemperature: string;\nbegin\n  Result := 'Temperature is below freezing.';\nend;\n\nfunction TWinterForecast.GetConditions: string;\nbegin\n  Result := 'Snow conditions are present.';\nend;\n\nvar\n  Forecast: TWeatherForecast;\n  WinterForecast: TWinterForecast;\n\nbegin\n  Forecast := TWeatherForecast.Create;\n  WriteLn(Forecast.GetTemperature);\n  WriteLn(Forecast.GetConditions);\n  Forecast.Free;\n\n  WinterForecast := TWinterForecast.Create;\n  WriteLn(WinterForecast.GetTemperature);\n  WriteLn(WinterForecast.GetConditions);\n  WinterForecast.Free;\nend.\n```"
  },
  {
    "task": "Create a foundational class for a personal diary with properties like date and entries, and derive a travel diary class that overrides the date property with travel dates.",
    "code": "```pascal\nprogram DiaryInheritance;\n\ntype\n  TPersonalDiary = class\n  private\n    FDate: string;\n    FEntries: array of string;\n  public\n    procedure SetDate(NewDate: string);\n    function GetDate: string;\n    procedure AddEntry(NewEntry: string);\n    function GetEntry(Index: Integer): string;\n  end;\n\n  TTravelDiary = class(TPersonalDiary)\n  private\n    FTravelDate: string;\n  public\n    procedure SetDate(NewDate: string); override;\n    function GetDate: string; override;\n  end;\n\nprocedure TPersonalDiary.SetDate(NewDate: string);\nbegin\n  FDate := NewDate;\nend;\n\nfunction TPersonalDiary.GetDate: string;\nbegin\n  Result := FDate;\nend;\n\nprocedure TPersonalDiary.AddEntry(NewEntry: string);\nbegin\n  SetLength(FEntries, Length(FEntries) + 1);\n  FEntries[High(FEntries)] := NewEntry;\nend;\n\nfunction TPersonalDiary.GetEntry(Index: Integer): string;\nbegin\n  if (Index >= 0) and (Index < Length(FEntries)) then\n    Result := FEntries[Index]\n  else\n    Result := '';\nend;\n\nprocedure TTravelDiary.SetDate(NewDate: string);\nbegin\n  FTravelDate := NewDate;\nend;\n\nfunction TTravelDiary.GetDate: string;\nbegin\n  Result := FTravelDate;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Design a base class for a pet with methods for feeding and grooming, then create a cat subclass that overrides these methods with specific food preferences.",
    "code": "```pascal\nprogram PetInheritance;\n\ntype\n  TPet = class\n    procedure Feed; virtual;\n    procedure Groom; virtual;\n  end;\n\n  TCat = class(TPet)\n    procedure Feed; override;\n    procedure Groom; override;\n  end;\n\nprocedure TPet.Feed;\nbegin\n  Writeln('Feeding the pet.');\nend;\n\nprocedure TPet.Groom;\nbegin\n  Writeln('Grooming the pet.');\nend;\n\nprocedure TCat.Feed;\nbegin\n  Writeln('Feeding the cat with fish.');\nend;\n\nprocedure TCat.Groom;\nbegin\n  Writeln('Grooming the cat with a brush.');\nend;\n\nvar\n  Pet: TPet;\nbegin\n  Pet := TCat.Create;\n  try\n    Pet.Feed;\n    Pet.Groom;\n  finally\n    Pet.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Develop a superclass for a software library with methods for installation and updates, then extend it with a graphics library subclass that overrides these methods for rendering capabilities.",
    "code": "```pascal\nprogram LibraryInheritance;\n\ntype\n  TSoftwareLibrary = class\n    procedure Install; virtual;\n    procedure Update; virtual;\n  end;\n\n  TGraphicsLibrary = class(TSoftwareLibrary)\n    procedure Install; override;\n    procedure Update; override;\n  end;\n\nprocedure TSoftwareLibrary.Install;\nbegin\n  WriteLn('Installing software library...');\nend;\n\nprocedure TSoftwareLibrary.Update;\nbegin\n  WriteLn('Updating software library...');\nend;\n\nprocedure TGraphicsLibrary.Install;\nbegin\n  WriteLn('Installing graphics library with rendering capabilities...');\nend;\n\nprocedure TGraphicsLibrary.Update;\nbegin\n  WriteLn('Updating graphics library with rendering enhancements...');\nend;\n\nvar\n  Library: TSoftwareLibrary;\n  GraphicsLib: TGraphicsLibrary;\n\nbegin\n  Library := TSoftwareLibrary.Create;\n  Library.Install;\n  Library.Update;\n\n  GraphicsLib := TGraphicsLibrary.Create;\n  GraphicsLib.Install;\n  GraphicsLib.Update;\n\n  Library.Free;\n  GraphicsLib.Free;\nend.\n```"
  },
  {
    "task": "Implement a base class for a political campaign with methods for fundraising and events, then create a presidential campaign subclass that overrides these methods for national scale.",
    "code": "```pascal\nprogram PoliticalCampaign;\n\ntype\n  TCampaign = class\n  public\n    procedure Fundraising; virtual;\n    procedure Events; virtual;\n  end;\n\n  TPresidentialCampaign = class(TCampaign)\n  public\n    procedure Fundraising; override;\n    procedure Events; override;\n  end;\n\nprocedure TCampaign.Fundraising;\nbegin\n  WriteLn('Fundraising at local level.');\nend;\n\nprocedure TCampaign.Events;\nbegin\n  WriteLn('Organizing local events.');\nend;\n\nprocedure TPresidentialCampaign.Fundraising;\nbegin\n  WriteLn('Fundraising at national level.');\nend;\n\nprocedure TPresidentialCampaign.Events;\nbegin\n  WriteLn('Organizing national events.');\nend;\n\nvar\n  LocalCampaign: TCampaign;\n  NationalCampaign: TPresidentialCampaign;\n\nbegin\n  LocalCampaign := TCampaign.Create;\n  NationalCampaign := TPresidentialCampaign.Create;\n\n  LocalCampaign.Fundraising;\n  LocalCampaign.Events;\n\n  NationalCampaign.Fundraising;\n  NationalCampaign.Events;\n\n  LocalCampaign.Free;\n  NationalCampaign.Free;\nend.\n```"
  },
  {
    "task": "Construct a parent class for an automotive part with methods for durability and replacement, then derive an engine part class that overrides these methods for performance.",
    "code": "```pascal\nprogram AutomotiveParts;\n\ntype\n  TAutomotivePart = class\n    function Durability: string; virtual;\n    function Replacement: string; virtual;\n  end;\n\n  TEnginePart = class(TAutomotivePart)\n    function Durability: string; override;\n    function Replacement: string; override;\n  end;\n\nfunction TAutomotivePart.Durability: string;\nbegin\n  Result := 'Generic durability';\nend;\n\nfunction TAutomotivePart.Replacement: string;\nbegin\n  Result := 'Generic replacement procedure';\nend;\n\nfunction TEnginePart.Durability: string;\nbegin\n  Result := 'Engine-specific durability';\nend;\n\nfunction TEnginePart.Replacement: string;\nbegin\n  Result := 'Engine-specific replacement procedure';\nend;\n\nvar\n  Part: TAutomotivePart;\n  Engine: TEnginePart;\n\nbegin\n  Part := TAutomotivePart.Create;\n  Engine := TEnginePart.Create;\n\n  Writeln('Automotive Part Durability: ', Part.Durability);\n  Writeln('Automotive Part Replacement: ', Part.Replacement);\n  Writeln('Engine Part Durability: ', Engine.Durability);\n  Writeln('Engine Part Replacement: ', Engine.Replacement);\n\n  Part.Free;\n  Engine.Free;\nend.\n```"
  },
  {
    "task": "Set up a base class for an online tutorial with methods for lessons and quizzes, and extend it with a coding tutorial subclass that overrides these methods for interactive exercises.",
    "code": "```pascal\nprogram OnlineTutorialInheritance;\n\ntype\n  TOnlineTutorial = class\n    procedure Lessons; virtual;\n    procedure Quizzes; virtual;\n  end;\n\n  TCodingTutorial = class(TOnlineTutorial)\n    procedure Lessons; override;\n    procedure Quizzes; override;\n  end;\n\nprocedure TOnlineTutorial.Lessons;\nbegin\n  writeln('Displaying lesson content.');\nend;\n\nprocedure TOnlineTutorial.Quizzes;\nbegin\n  writeln('Displaying quiz content.');\nend;\n\nprocedure TCodingTutorial.Lessons;\nbegin\n  writeln('Displaying interactive coding lesson.');\nend;\n\nprocedure TCodingTutorial.Quizzes;\nbegin\n  writeln('Displaying interactive coding quiz.');\nend;\n\nvar\n  tutorial: TOnlineTutorial;\n  codingTutorial: TCodingTutorial;\nbegin\n  tutorial := TOnlineTutorial.Create;\n  codingTutorial := TCodingTutorial.Create;\n\n  tutorial.Lessons;\n  tutorial.Quizzes;\n\n  codingTutorial.Lessons;\n  codingTutorial.Quizzes;\n\n  tutorial.Free;\n  codingTutorial.Free;\nend.\n```"
  },
  {
    "task": "Create a foundational class for a personal collection with properties like item type and value, and derive a stamp collection class that overrides the item type property to be 'stamps'.",
    "code": "```pascal\nprogram CollectionInheritance;\n\ntype\n  TCollection = class\n  private\n    FItemType: string;\n    FValue: Double;\n  public\n    constructor Create(AItemType: string; AValue: Double);\n    procedure SetItemType(AItemType: string);\n    function GetItemType: string;\n    procedure SetValue(AValue: Double);\n    function GetValue: Double;\n  end;\n\n  TStampCollection = class(TCollection)\n  public\n    constructor Create(AValue: Double);\n  end;\n\nconstructor TCollection.Create(AItemType: string; AValue: Double);\nbegin\n  FItemType := AItemType;\n  FValue := AValue;\nend;\n\nprocedure TCollection.SetItemType(AItemType: string);\nbegin\n  FItemType := AItemType;\nend;\n\nfunction TCollection.GetItemType: string;\nbegin\n  Result := FItemType;\nend;\n\nprocedure TCollection.SetValue(AValue: Double);\nbegin\n  FValue := AValue;\nend;\n\nfunction TCollection.GetValue: Double;\nbegin\n  Result := FValue;\nend;\n\nconstructor TStampCollection.Create(AValue: Double);\nbegin\n  inherited Create('stamps', AValue);\nend;\n\nvar\n  MyStamps: TStampCollection;\n\nbegin\n  MyStamps := TStampCollection.Create(100.0);\n  WriteLn('Item Type: ', MyStamps.GetItemType);\n  WriteLn('Value: ', MyStamps.GetValue:0:2);\n  MyStamps.Free;\nend.\n```"
  },
  {
    "task": "Design a base class for a video game character with methods for health and abilities, then create a warrior character subclass that overrides these methods for strength.",
    "code": "```pascal\nprogram GameCharacters;\n\ntype\n  TCharacter = class\n  public\n    function Health: string; virtual;\n    function Abilities: string; virtual;\n  end;\n\n  TWarrior = class(TCharacter)\n  public\n    function Health: string; override;\n    function Abilities: string; override;\n  end;\n\nfunction TCharacter.Health: string;\nbegin\n  Result := 'Standard Health';\nend;\n\nfunction TCharacter.Abilities: string;\nbegin\n  Result := 'Basic Abilities';\nend;\n\nfunction TWarrior.Health: string;\nbegin\n  Result := 'Enhanced Health';\nend;\n\nfunction TWarrior.Abilities: string;\nbegin\n  Result := 'Strength Abilities';\nend;\n\nvar\n  Character: TCharacter;\n  Warrior: TWarrior;\n\nbegin\n  Character := TCharacter.Create;\n  Warrior := TWarrior.Create;\n\n  Writeln('Character Health: ', Character.Health);\n  Writeln('Character Abilities: ', Character.Abilities);\n  Writeln('Warrior Health: ', Warrior.Health);\n  Writeln('Warrior Abilities: ', Warrior.Abilities);\n\n  Character.Free;\n  Warrior.Free;\nend.\n```"
  },
  {
    "task": "Develop a superclass for an event planner with methods for scheduling and budgeting, then extend it with a wedding planner subclass that overrides these methods for ceremony details.",
    "code": "```pascal\nprogram EventPlannerInheritance;\n\ntype\n  TEventPlanner = class\n    procedure Schedule; virtual;\n    procedure Budget; virtual;\n  end;\n\n  TWeddingPlanner = class(TEventPlanner)\n    procedure Schedule; override;\n    procedure Budget; override;\n  end;\n\nprocedure TEventPlanner.Schedule;\nbegin\n  WriteLn('Scheduling event...');\nend;\n\nprocedure TEventPlanner.Budget;\nbegin\n  WriteLn('Calculating budget...');\nend;\n\nprocedure TWeddingPlanner.Schedule;\nbegin\n  WriteLn('Scheduling wedding ceremony...');\nend;\n\nprocedure TWeddingPlanner.Budget;\nbegin\n  WriteLn('Calculating wedding budget...');\nend;\n\nvar\n  Event: TEventPlanner;\n  Wedding: TWeddingPlanner;\n\nbegin\n  Event := TEventPlanner.Create;\n  Wedding := TWeddingPlanner.Create;\n\n  Event.Schedule;\n  Event.Budget;\n\n  Wedding.Schedule;\n  Wedding.Budget;\n\n  Event.Free;\n  Wedding.Free;\nend.\n```"
  },
  {
    "task": "Implement a base class for a software feature with methods for functionality and user feedback, then create a beta feature subclass that overrides these methods for testing.",
    "code": "```pascal\nprogram InheritanceExample;\n\ntype\n  TFeature = class\n    procedure Functionality; virtual;\n    procedure UserFeedback; virtual;\n  end;\n\n  TBetaFeature = class(TFeature)\n    procedure Functionality; override;\n    procedure UserFeedback; override;\n  end;\n\nprocedure TFeature.Functionality;\nbegin\n  writeln('Standard functionality');\nend;\n\nprocedure TFeature.UserFeedback;\nbegin\n  writeln('Standard user feedback');\nend;\n\nprocedure TBetaFeature.Functionality;\nbegin\n  writeln('Beta functionality for testing');\nend;\n\nprocedure TBetaFeature.UserFeedback;\nbegin\n  writeln('Beta user feedback for testing');\nend;\n\nvar\n  feature: TFeature;\n  betaFeature: TBetaFeature;\nbegin\n  feature := TFeature.Create;\n  betaFeature := TBetaFeature.Create;\n  \n  feature.Functionality;\n  feature.UserFeedback;\n  \n  betaFeature.Functionality;\n  betaFeature.UserFeedback;\n  \n  feature.Free;\n  betaFeature.Free;\nend.\n```"
  },
  {
    "task": "Construct a parent class for a gardening tool with methods for usage and maintenance, then derive a lawn mower class that overrides these methods for grass cutting.",
    "code": "```pascal\nprogram GardeningToolInheritance;\n\ntype\n  TGardeningTool = class\n  public\n    procedure Use; virtual;\n    procedure Maintain; virtual;\n  end;\n\n  TLawnMower = class(TGardeningTool)\n  public\n    procedure Use; override;\n    procedure Maintain; override;\n  end;\n\nprocedure TGardeningTool.Use;\nbegin\n  Writeln('Using the gardening tool.');\nend;\n\nprocedure TGardeningTool.Maintain;\nbegin\n  Writeln('Performing maintenance on the gardening tool.');\nend;\n\nprocedure TLawnMower.Use;\nbegin\n  Writeln('Using the lawn mower to cut grass.');\nend;\n\nprocedure TLawnMower.Maintain;\nbegin\n  Writeln('Performing maintenance on the lawn mower.');\nend;\n\nvar\n  Tool: TGardeningTool;\n  Mower: TLawnMower;\n\nbegin\n  Tool := TGardeningTool.Create;\n  Mower := TLawnMower.Create;\n\n  Tool.Use;\n  Tool.Maintain;\n\n  Mower.Use;\n  Mower.Maintain;\n\n  Tool.Free;\n  Mower.Free;\nend.\n```"
  },
  {
    "task": "Set up a base class for a household chore with methods for time and effort, and extend it with a cleaning chore subclass that overrides these methods for dirt removal.",
    "code": "```pascal\nprogram ChoreInheritance;\n\ntype\n  THouseholdChore = class\n  public\n    function Time: String; virtual;\n    function Effort: String; virtual;\n  end;\n\n  TCleaningChore = class(THouseholdChore)\n  public\n    function Time: String; override;\n    function Effort: String; override;\n  end;\n\nfunction THouseholdChore.Time: String;\nbegin\n  Result := 'General time estimate for chores';\nend;\n\nfunction THouseholdChore.Effort: String;\nbegin\n  Result := 'General effort estimate for chores';\nend;\n\nfunction TCleaningChore.Time: String;\nbegin\n  Result := 'Specific time for cleaning chores';\nend;\n\nfunction TCleaningChore.Effort: String;\nbegin\n  Result := 'Specific effort for cleaning chores';\nend;\n\nvar\n  Chore: THouseholdChore;\n  Cleaning: TCleaningChore;\n\nbegin\n  Chore := THouseholdChore.Create;\n  Cleaning := TCleaningChore.Create;\n\n  Writeln('Household Chore Time: ', Chore.Time);\n  Writeln('Household Chore Effort: ', Chore.Effort);\n\n  Writeln('Cleaning Chore Time: ', Cleaning.Time);\n  Writeln('Cleaning Chore Effort: ', Cleaning.Effort);\n\n  Chore.Free;\n  Cleaning.Free;\nend.\n```"
  },
  {
    "task": "Create a foundational class for a personal project with properties like name and deadline, and derive a coding project class that overrides the deadline property for milestones.",
    "code": "```pascal\nprogram ProjectInheritance;\n\ntype\n  TPersonalProject = class\n  private\n    FName: string;\n    FDeadline: string;\n  public\n    constructor Create(AName, ADeadline: string);\n    property Name: string read FName write FName;\n    property Deadline: string read FDeadline write FDeadline;\n  end;\n\n  TCodingProject = class(TPersonalProject)\n  private\n    FMilestoneDeadline: string;\n  public\n    constructor Create(AName, ADeadline, AMilestoneDeadline: string);\n    property Deadline: string read FMilestoneDeadline write FMilestoneDeadline;\n  end;\n\nconstructor TPersonalProject.Create(AName, ADeadline: string);\nbegin\n  FName := AName;\n  FDeadline := ADeadline;\nend;\n\nconstructor TCodingProject.Create(AName, ADeadline, AMilestoneDeadline: string);\nbegin\n  inherited Create(AName, ADeadline);\n  FMilestoneDeadline := AMilestoneDeadline;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Design a base class for a holiday celebration with methods for traditions and activities, then create a Christmas celebration subclass that overrides these methods for gift exchange.",
    "code": "```pascal\nprogram HolidayCelebration;\n\ntype\n  THoliday = class\n    procedure Traditions; virtual;\n    procedure Activities; virtual;\n  end;\n\n  TChristmas = class(THoliday)\n    procedure Traditions; override;\n    procedure Activities; override;\n  end;\n\nprocedure THoliday.Traditions;\nbegin\n  WriteLn('General holiday traditions.');\nend;\n\nprocedure THoliday.Activities;\nbegin\n  WriteLn('General holiday activities.');\nend;\n\nprocedure TChristmas.Traditions;\nbegin\n  WriteLn('Christmas traditions: Decorating the tree.');\nend;\n\nprocedure TChristmas.Activities;\nbegin\n  WriteLn('Christmas activities: Gift exchange.');\nend;\n\nvar\n  Holiday: THoliday;\n  Christmas: TChristmas;\n\nbegin\n  Holiday := THoliday.Create;\n  Christmas := TChristmas.Create;\n\n  Holiday.Traditions;\n  Holiday.Activities;\n\n  Christmas.Traditions;\n  Christmas.Activities;\n\n  Holiday.Free;\n  Christmas.Free;\nend.\n```"
  },
  {
    "task": "Develop a superclass for a customer feedback system with methods for collecting and analyzing, then extend it with a product feedback subclass that overrides these methods for reviews.",
    "code": "```pascal\nprogram FeedbackSystem;\n\ntype\n  TCustomerFeedback = class\n  public\n    procedure CollectFeedback; virtual;\n    procedure AnalyzeFeedback; virtual;\n  end;\n\n  TProductFeedback = class(TCustomerFeedback)\n  public\n    procedure CollectFeedback; override;\n    procedure AnalyzeFeedback; override;\n  end;\n\nprocedure TCustomerFeedback.CollectFeedback;\nbegin\n  WriteLn('Collecting customer feedback...');\nend;\n\nprocedure TCustomerFeedback.AnalyzeFeedback;\nbegin\n  WriteLn('Analyzing customer feedback...');\nend;\n\nprocedure TProductFeedback.CollectFeedback;\nbegin\n  WriteLn('Collecting product feedback...');\nend;\n\nprocedure TProductFeedback.AnalyzeFeedback;\nbegin\n  WriteLn('Analyzing product feedback...');\nend;\n\nvar\n  Feedback: TCustomerFeedback;\n  ProductFeedback: TProductFeedback;\n\nbegin\n  Feedback := TCustomerFeedback.Create;\n  Feedback.CollectFeedback;\n  Feedback.AnalyzeFeedback;\n\n  ProductFeedback := TProductFeedback.Create;\n  ProductFeedback.CollectFeedback;\n  ProductFeedback.AnalyzeFeedback;\n\n  Feedback.Free;\n  ProductFeedback.Free;\nend.\n```"
  },
  {
    "task": "Implement a base class for a civic service with methods for public engagement and policy, then create a community service subclass that overrides these methods for local impact.",
    "code": "```pascal\nprogram CivicServiceInheritance;\n\ntype\n  TCivicService = class\n  public\n    procedure PublicEngagement; virtual;\n    procedure Policy; virtual;\n  end;\n\n  TCommunityService = class(TCivicService)\n  public\n    procedure PublicEngagement; override;\n    procedure Policy; override;\n  end;\n\nprocedure TCivicService.PublicEngagement;\nbegin\n  WriteLn('Engaging with the public at a national level.');\nend;\n\nprocedure TCivicService.Policy;\nbegin\n  WriteLn('Implementing national policies.');\nend;\n\nprocedure TCommunityService.PublicEngagement;\nbegin\n  WriteLn('Engaging with the public at a community level.');\nend;\n\nprocedure TCommunityService.Policy;\nbegin\n  WriteLn('Implementing community-specific policies.');\nend;\n\nvar\n  CivicService: TCivicService;\n  CommunityService: TCommunityService;\n\nbegin\n  CivicService := TCivicService.Create;\n  CommunityService := TCommunityService.Create;\n\n  CivicService.PublicEngagement;\n  CivicService.Policy;\n\n  CommunityService.PublicEngagement;\n  CommunityService.Policy;\n\n  CivicService.Free;\n  CommunityService.Free;\nend.\n```"
  },
  {
    "task": "Construct a parent class for a culinary ingredient with methods for flavor and preparation, then derive a spice ingredient class that overrides these methods for seasoning.",
    "code": "```pascal\nprogram CulinaryInheritance;\n\ntype\n  TCulinaryIngredient = class\n  public\n    function Flavor: string; virtual;\n    function Preparation: string; virtual;\n  end;\n\n  TSpiceIngredient = class(TCulinaryIngredient)\n  public\n    function Flavor: string; override;\n    function Preparation: string; override;\n  end;\n\n{ TCulinaryIngredient }\n\nfunction TCulinaryIngredient.Flavor: string;\nbegin\n  Result := 'Generic flavor';\nend;\n\nfunction TCulinaryIngredient.Preparation: string;\nbegin\n  Result := 'Generic preparation';\nend;\n\n{ TSpiceIngredient }\n\nfunction TSpiceIngredient.Flavor: string;\nbegin\n  Result := 'Spicy flavor';\nend;\n\nfunction TSpiceIngredient.Preparation: string;\nbegin\n  Result := 'Seasoning preparation';\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Set up a base class for a scientific experiment with methods for hypothesis and testing, and extend it with a chemistry experiment subclass that overrides these methods for reactions.",
    "code": "```pascal\nprogram ScientificExperimentInheritance;\n\ntype\n  TScientificExperiment = class\n  public\n    procedure Hypothesis; virtual;\n    procedure Testing; virtual;\n  end;\n\n  TChemistryExperiment = class(TScientificExperiment)\n  public\n    procedure Hypothesis; override;\n    procedure Testing; override;\n  end;\n\n{ TScientificExperiment methods }\nprocedure TScientificExperiment.Hypothesis;\nbegin\n  writeln('Formulating a general scientific hypothesis.');\nend;\n\nprocedure TScientificExperiment.Testing;\nbegin\n  writeln('Conducting a general scientific test.');\nend;\n\n{ TChemistryExperiment methods }\nprocedure TChemistryExperiment.Hypothesis;\nbegin\n  writeln('Formulating a hypothesis specific to chemistry reactions.');\nend;\n\nprocedure TChemistryExperiment.Testing;\nbegin\n  writeln('Conducting a chemistry experiment test.');\nend;\n\nvar\n  Experiment: TScientificExperiment;\n  ChemExperiment: TChemistryExperiment;\n\nbegin\n  Experiment := TScientificExperiment.Create;\n  ChemExperiment := TChemistryExperiment.Create;\n\n  Experiment.Hypothesis;\n  Experiment.Testing;\n\n  ChemExperiment.Hypothesis;\n  ChemExperiment.Testing;\n\n  Experiment.Free;\n  ChemExperiment.Free;\nend.\n```"
  },
  {
    "task": "Create a foundational class for an inventory system with properties like item ID and quantity, and derive a warehouse inventory class that overrides the quantity property for bulk storage.",
    "code": "```pascal\nprogram WarehouseInventory;\n\ntype\n  TInventoryItem = class\n  private\n    FItemID: Integer;\n    FQuantity: Integer;\n  public\n    property ItemID: Integer read FItemID write FItemID;\n    property Quantity: Integer read FQuantity write FQuantity;\n  end;\n\n  TWarehouseInventory = class(TInventoryItem)\n  private\n    FBulkQuantity: Integer;\n  public\n    property Quantity: Integer read FBulkQuantity write FBulkQuantity;\n  end;\n\nvar\n  item: TInventoryItem;\n  warehouseItem: TWarehouseInventory;\n\nbegin\n  item := TInventoryItem.Create;\n  item.ItemID := 1;\n  item.Quantity := 10;\n\n  warehouseItem := TWarehouseInventory.Create;\n  warehouseItem.ItemID := 2;\n  warehouseItem.Quantity := 100;\n\n  item.Free;\n  warehouseItem.Free;\nend.\n```"
  },
  {
    "task": "Design a base class for a travel agency with methods for itinerary and bookings, then create a luxury travel subclass that overrides these methods for premium services.",
    "code": "```pascal\nprogram TravelAgency;\n\ntype\n  TTravelAgency = class\n    procedure Itinerary; virtual;\n    procedure Bookings; virtual;\n  end;\n\n  TLuxuryTravel = class(TTravelAgency)\n    procedure Itinerary; override;\n    procedure Bookings; override;\n  end;\n\nprocedure TTravelAgency.Itinerary;\nbegin\n  WriteLn('Standard Itinerary');\nend;\n\nprocedure TTravelAgency.Bookings;\nbegin\n  WriteLn('Standard Booking');\nend;\n\nprocedure TLuxuryTravel.Itinerary;\nbegin\n  WriteLn('Luxury Itinerary with premium services');\nend;\n\nprocedure TLuxuryTravel.Bookings;\nbegin\n  WriteLn('Luxury Booking with premium services');\nend;\n\nvar\n  StandardTravel: TTravelAgency;\n  LuxuryTravel: TLuxuryTravel;\nbegin\n  StandardTravel := TTravelAgency.Create;\n  LuxuryTravel := TLuxuryTravel.Create;\n\n  StandardTravel.Itinerary;\n  StandardTravel.Bookings;\n\n  LuxuryTravel.Itinerary;\n  LuxuryTravel.Bookings;\n\n  StandardTravel.Free;\n  LuxuryTravel.Free;\nend.\n```"
  },
  {
    "task": "Develop a superclass for an educational tool with methods for teaching and assessment, then extend it with a math tool subclass that overrides these methods for problem-solving.",
    "code": "```pascal\nprogram EducationalToolInheritance;\n\ntype\n  TEducationalTool = class\n    procedure Teach; virtual;\n    procedure Assess; virtual;\n  end;\n\n  TMathTool = class(TEducationalTool)\n    procedure Teach; override;\n    procedure Assess; override;\n  end;\n\nprocedure TEducationalTool.Teach;\nbegin\n  WriteLn('Teaching a general topic...');\nend;\n\nprocedure TEducationalTool.Assess;\nbegin\n  WriteLn('Assessing knowledge...');\nend;\n\nprocedure TMathTool.Teach;\nbegin\n  WriteLn('Teaching mathematics concepts...');\nend;\n\nprocedure TMathTool.Assess;\nbegin\n  WriteLn('Assessing math problem-solving skills...');\nend;\n\nvar\n  tool: TEducationalTool;\n  mathTool: TMathTool;\n\nbegin\n  tool := TEducationalTool.Create;\n  mathTool := TMathTool.Create;\n\n  tool.Teach;\n  tool.Assess;\n\n  mathTool.Teach;\n  mathTool.Assess;\n\n  tool.Free;\n  mathTool.Free;\nend.\n```"
  },
  {
    "task": "Implement a base class for a community project with methods for planning and execution, then create a park renovation subclass that overrides these methods for landscaping.",
    "code": "```pascal\nprogram CommunityProject;\n\ntype\n  TCommunityProject = class\n  public\n    procedure Plan; virtual;\n    procedure Execute; virtual;\n  end;\n\n  TParkRenovation = class(TCommunityProject)\n  public\n    procedure Plan; override;\n    procedure Execute; override;\n  end;\n\nprocedure TCommunityProject.Plan;\nbegin\n  WriteLn('Planning the community project.');\nend;\n\nprocedure TCommunityProject.Execute;\nbegin\n  WriteLn('Executing the community project.');\nend;\n\nprocedure TParkRenovation.Plan;\nbegin\n  WriteLn('Planning the park renovation with landscaping details.');\nend;\n\nprocedure TParkRenovation.Execute;\nbegin\n  WriteLn('Executing the park renovation with landscaping works.');\nend;\n\nvar\n  Project: TCommunityProject;\n  ParkProject: TParkRenovation;\n\nbegin\n  Project := TCommunityProject.Create;\n  ParkProject := TParkRenovation.Create;\n  \n  Project.Plan;\n  Project.Execute;\n  \n  ParkProject.Plan;\n  ParkProject.Execute;\n  \n  Project.Free;\n  ParkProject.Free;\nend.\n```"
  },
  {
    "task": "Construct a parent class for a digital marketing strategy with methods for targeting and engagement, then derive a social media strategy class that overrides these methods for platforms.",
    "code": "```pascal\nprogram DigitalMarketingStrategy;\n\ntype\n  TMarketingStrategy = class\n    procedure Targeting; virtual;\n    procedure Engagement; virtual;\n  end;\n\n  TSocialMediaStrategy = class(TMarketingStrategy)\n    procedure Targeting; override;\n    procedure Engagement; override;\n  end;\n\nprocedure TMarketingStrategy.Targeting;\nbegin\n  Writeln('Generic targeting strategy.');\nend;\n\nprocedure TMarketingStrategy.Engagement;\nbegin\n  Writeln('Generic engagement strategy.');\nend;\n\nprocedure TSocialMediaStrategy.Targeting;\nbegin\n  Writeln('Targeting strategy for social media platforms.');\nend;\n\nprocedure TSocialMediaStrategy.Engagement;\nbegin\n  Writeln('Engagement strategy for social media platforms.');\nend;\n\nvar\n  Strategy: TMarketingStrategy;\n  SocialMedia: TSocialMediaStrategy;\nbegin\n  Strategy := TMarketingStrategy.Create;\n  SocialMedia := TSocialMediaStrategy.Create;\n\n  Strategy.Targeting;\n  Strategy.Engagement;\n\n  SocialMedia.Targeting;\n  SocialMedia.Engagement;\n\n  Strategy.Free;\n  SocialMedia.Free;\nend.\n```"
  },
  {
    "task": "Set up a base class for a scientific publication with methods for research and review, and extend it with a journal article subclass that overrides these methods for peer review.",
    "code": "```pascal\nprogram InheritanceMechanismExample;\n\ntype\n  // Base class for scientific publications\n  TScientificPublication = class\n    public\n      procedure Research; virtual;\n      procedure Review; virtual;\n  end;\n\n  // Subclass for journal articles\n  TJournalArticle = class(TScientificPublication)\n    public\n      procedure Research; override;\n      procedure Review; override;\n  end;\n\n{ TScientificPublication methods implementation }\nprocedure TScientificPublication.Research;\nbegin\n  Writeln('Conducting general scientific research.');\nend;\n\nprocedure TScientificPublication.Review;\nbegin\n  Writeln('General review process.');\nend;\n\n{ TJournalArticle methods implementation }\nprocedure TJournalArticle.Research;\nbegin\n  Writeln('Conducting journal-specific research.');\nend;\n\nprocedure TJournalArticle.Review;\nbegin\n  Writeln('Performing peer review process.');\nend;\n\nvar\n  Publication: TScientificPublication;\n  Article: TJournalArticle;\n\nbegin\n  Publication := TScientificPublication.Create;\n  Article := TJournalArticle.Create;\n\n  // Using base class instance\n  Publication.Research;\n  Publication.Review;\n\n  // Using derived class instance\n  Article.Research;\n  Article.Review;\n\n  // Clean up\n  Publication.Free;\n  Article.Free;\nend.\n```"
  },
  {
    "task": "Create a foundational class for a software module with properties like name and dependencies, and derive a user interface module class that overrides the dependencies property for UI libraries.",
    "code": "```pascal\nprogram InheritanceExample;\n\ntype\n  TSoftwareModule = class\n  private\n    FName: string;\n    FDependencies: string;\n  public\n    constructor Create(AName, ADependencies: string);\n    function GetName: string;\n    function GetDependencies: string; virtual;\n  end;\n\n  TUserInterfaceModule = class(TSoftwareModule)\n  public\n    function GetDependencies: string; override;\n  end;\n\nconstructor TSoftwareModule.Create(AName, ADependencies: string);\nbegin\n  FName := AName;\n  FDependencies := ADependencies;\nend;\n\nfunction TSoftwareModule.GetName: string;\nbegin\n  Result := FName;\nend;\n\nfunction TSoftwareModule.GetDependencies: string;\nbegin\n  Result := FDependencies;\nend;\n\nfunction TUserInterfaceModule.GetDependencies: string;\nbegin\n  Result := 'UI Libraries';\nend;\n\nvar\n  Module: TSoftwareModule;\n  UIModule: TUserInterfaceModule;\n\nbegin\n  Module := TSoftwareModule.Create('CoreModule', 'Core Dependencies');\n  UIModule := TUserInterfaceModule.Create('UIModule', 'Some Dependencies');\n\n  writeln('Module Name: ', Module.GetName);\n  writeln('Module Dependencies: ', Module.GetDependencies);\n\n  writeln('UI Module Name: ', UIModule.GetName);\n  writeln('UI Module Dependencies: ', UIModule.GetDependencies);\n\n  Module.Free;\n  UIModule.Free;\nend.\n```"
  },
  {
    "task": "Design a base class for a fashion line with methods for design and production, then create a summer collection subclass that overrides these methods for seasonal trends.",
    "code": "// [ERROR] Connection error."
  },
  {
    "task": "Develop a superclass for a family tree with methods for ancestry and descendants, then extend it with a royal lineage subclass that overrides these methods for historical accuracy.",
    "code": "```pascal\nprogram FamilyTreeInheritance;\n\ntype\n  TFamilyTree = class\n  public\n    procedure Ancestry;\n    procedure Descendants;\n  end;\n\n  TRoyalLineage = class(TFamilyTree)\n  public\n    procedure Ancestry; override;\n    procedure Descendants; override;\n  end;\n\nprocedure TFamilyTree.Ancestry;\nbegin\n  writeln('General ancestry information.');\nend;\n\nprocedure TFamilyTree.Descendants;\nbegin\n  writeln('General descendants information.');\nend;\n\nprocedure TRoyalLineage.Ancestry;\nbegin\n  writeln('Historical royal lineage ancestry information.');\nend;\n\nprocedure TRoyalLineage.Descendants;\nbegin\n  writeln('Historical royal lineage descendants information.');\nend;\n\nvar\n  GeneralFamily: TFamilyTree;\n  RoyalFamily: TRoyalLineage;\n\nbegin\n  GeneralFamily := TFamilyTree.Create;\n  RoyalFamily := TRoyalLineage.Create;\n\n  GeneralFamily.Ancestry;\n  GeneralFamily.Descendants;\n\n  RoyalFamily.Ancestry;\n  RoyalFamily.Descendants;\n\n  GeneralFamily.Free;\n  RoyalFamily.Free;\nend.\n```"
  },
  {
    "task": "Implement a base class for a musical score with methods for composition and arrangement, then create a symphony subclass that overrides these methods for orchestration.",
    "code": "```pascal\nprogram MusicInheritance;\n\ntype\n  TScore = class\n  public\n    procedure Compose; virtual;\n    procedure Arrange; virtual;\n  end;\n\n  TSymphony = class(TScore)\n  public\n    procedure Compose; override;\n    procedure Arrange; override;\n  end;\n\nprocedure TScore.Compose;\nbegin\n  WriteLn('Composing a generic score.');\nend;\n\nprocedure TScore.Arrange;\nbegin\n  WriteLn('Arranging a generic score.');\nend;\n\nprocedure TSymphony.Compose;\nbegin\n  WriteLn('Composing a symphony.');\nend;\n\nprocedure TSymphony.Arrange;\nbegin\n  WriteLn('Orchestrating a symphony.');\nend;\n\nvar\n  score: TScore;\n  symphony: TSymphony;\nbegin\n  score := TScore.Create;\n  symphony := TSymphony.Create;\n\n  score.Compose;\n  score.Arrange;\n\n  symphony.Compose;\n  symphony.Arrange;\n\n  score.Free;\n  symphony.Free;\nend.\n```"
  },
  {
    "task": "Construct a parent class for a historical record with methods for events and dates, then derive a war history class that overrides these methods for battles.",
    "code": "```pascal\nprogram HistoricalRecords;\n\ntype\n  THistoricalRecord = class\n  public\n    procedure EventDetails; virtual;\n    procedure EventDate; virtual;\n  end;\n\n  TWarHistory = class(THistoricalRecord)\n  public\n    procedure EventDetails; override;\n    procedure EventDate; override;\n  end;\n\nprocedure THistoricalRecord.EventDetails;\nbegin\n  WriteLn('General historical event details.');\nend;\n\nprocedure THistoricalRecord.EventDate;\nbegin\n  WriteLn('General historical event date.');\nend;\n\nprocedure TWarHistory.EventDetails;\nbegin\n  WriteLn('Specific war battle details.');\nend;\n\nprocedure TWarHistory.EventDate;\nbegin\n  WriteLn('Specific war battle date.');\nend;\n\nvar\n  GeneralRecord: THistoricalRecord;\n  WarRecord: TWarHistory;\n\nbegin\n  GeneralRecord := THistoricalRecord.Create;\n  WarRecord := TWarHistory.Create;\n\n  GeneralRecord.EventDetails;\n  GeneralRecord.EventDate;\n\n  WarRecord.EventDetails;\n  WarRecord.EventDate;\n\n  GeneralRecord.Free;\n  WarRecord.Free;\nend.\n```"
  },
  {
    "task": "Set up a base class for a pet adoption service with methods for application and approval, and extend it with a dog adoption subclass that overrides these methods for breed compatibility.",
    "code": "```pascal\nprogram PetAdoptionService;\n\ntype\n  TPetAdoption = class\n  public\n    procedure ApplyForAdoption; virtual;\n    procedure ApproveAdoption; virtual;\n  end;\n\n  TDogAdoption = class(TPetAdoption)\n  public\n    procedure ApplyForAdoption; override;\n    procedure ApproveAdoption; override;\n  end;\n\nprocedure TPetAdoption.ApplyForAdoption;\nbegin\n  Writeln('Applying for general pet adoption.');\nend;\n\nprocedure TPetAdoption.ApproveAdoption;\nbegin\n  Writeln('Approval for general pet adoption.');\nend;\n\nprocedure TDogAdoption.ApplyForAdoption;\nbegin\n  Writeln('Applying for dog adoption with breed specification.');\nend;\n\nprocedure TDogAdoption.ApproveAdoption;\nbegin\n  Writeln('Approval for dog adoption with breed compatibility check.');\nend;\n\nvar\n  PetAdoption: TPetAdoption;\n  DogAdoption: TDogAdoption;\n\nbegin\n  PetAdoption := TPetAdoption.Create;\n  DogAdoption := TDogAdoption.Create;\n\n  PetAdoption.ApplyForAdoption;\n  PetAdoption.ApproveAdoption;\n\n  DogAdoption.ApplyForAdoption;\n  DogAdoption.ApproveAdoption;\n\n  PetAdoption.Free;\n  DogAdoption.Free;\nend.\n```"
  },
  {
    "task": "Create a foundational class for a financial report with properties like fiscal year and summary, and derive an annual report class that overrides the fiscal year property for yearly data.",
    "code": "```pascal\nprogram FinancialReportInheritance;\n\ntype\n  TFinancialReport = class\n  private\n    FFiscalYear: Integer;\n    FSummary: String;\n  public\n    property FiscalYear: Integer read FFiscalYear write FFiscalYear;\n    property Summary: String read FSummary write FSummary;\n  end;\n\n  TAnnualReport = class(TFinancialReport)\n  public\n    property FiscalYear;\n  end;\n\nvar\n  Report: TAnnualReport;\n\nbegin\n  Report := TAnnualReport.Create;\n  Report.FiscalYear := 2023;\n  Report.Summary := 'Annual Financial Summary';\n  // Output or further processing can be added here\n  Report.Free;\nend.\n```"
  },
  {
    "task": "Design a base class for a movie franchise with methods for casting and production, then create a sequel subclass that overrides these methods for continuity.",
    "code": "```pascal\nprogram MovieFranchise;\n\ntype\n  TMovieFranchise = class\n  public\n    procedure Cast; virtual;\n    procedure Produce; virtual;\n  end;\n\n  TSequel = class(TMovieFranchise)\n  public\n    procedure Cast; override;\n    procedure Produce; override;\n  end;\n\nprocedure TMovieFranchise.Cast;\nbegin\n  WriteLn('Casting for the movie franchise.');\nend;\n\nprocedure TMovieFranchise.Produce;\nbegin\n  WriteLn('Producing the movie franchise.');\nend;\n\nprocedure TSequel.Cast;\nbegin\n  WriteLn('Casting for the sequel to maintain continuity.');\nend;\n\nprocedure TSequel.Produce;\nbegin\n  WriteLn('Producing the sequel to maintain continuity.');\nend;\n\nvar\n  Original: TMovieFranchise;\n  Sequel: TSequel;\n\nbegin\n  Original := TMovieFranchise.Create;\n  Sequel := TSequel.Create;\n\n  Original.Cast;\n  Original.Produce;\n  \n  Sequel.Cast;\n  Sequel.Produce;\n\n  Original.Free;\n  Sequel.Free;\nend.\n```"
  },
  {
    "task": "Develop a superclass for a real estate listing with methods for pricing and description, then extend it with a luxury listing subclass that overrides these methods for high-end features.",
    "code": "```pascal\nprogram RealEstateListing;\n\ntype\n  TRealEstateListing = class\n  public\n    function Pricing: string; virtual;\n    function Description: string; virtual;\n  end;\n\n  TLuxuryListing = class(TRealEstateListing)\n  public\n    function Pricing: string; override;\n    function Description: string; override;\n  end;\n\nfunction TRealEstateListing.Pricing: string;\nbegin\n  Result := 'Standard pricing';\nend;\n\nfunction TRealEstateListing.Description: string;\nbegin\n  Result := 'Standard description';\nend;\n\nfunction TLuxuryListing.Pricing: string;\nbegin\n  Result := 'Luxury pricing';\nend;\n\nfunction TLuxuryListing.Description: string;\nbegin\n  Result := 'Luxury description';\nend;\n\nvar\n  Listing: TRealEstateListing;\n  LuxuryListing: TLuxuryListing;\n\nbegin\n  Listing := TRealEstateListing.Create;\n  LuxuryListing := TLuxuryListing.Create;\n\n  Writeln(Listing.Pricing);\n  Writeln(Listing.Description);\n  Writeln(LuxuryListing.Pricing);\n  Writeln(LuxuryListing.Description);\n\n  Listing.Free;\n  LuxuryListing.Free;\nend.\n```"
  },
  {
    "task": "Implement a base class for a mobile app with methods for user interface and performance, then create a gaming app subclass that overrides these methods for graphics and speed.",
    "code": "```pascal\nprogram MobileAppInheritance;\n\ntype\n  TMobileApp = class\n  public\n    procedure UserInterface; virtual;\n    procedure Performance; virtual;\n  end;\n\n  TGamingApp = class(TMobileApp)\n  public\n    procedure UserInterface; override;\n    procedure Performance; override;\n  end;\n\nprocedure TMobileApp.UserInterface;\nbegin\n  WriteLn('Standard User Interface');\nend;\n\nprocedure TMobileApp.Performance;\nbegin\n  WriteLn('Standard Performance');\nend;\n\nprocedure TGamingApp.UserInterface;\nbegin\n  WriteLn('High-Performance Graphics User Interface');\nend;\n\nprocedure TGamingApp.Performance;\nbegin\n  WriteLn('Optimized Speed and Performance');\nend;\n\nvar\n  MobileApp: TMobileApp;\n  GameApp: TGamingApp;\n\nbegin\n  MobileApp := TMobileApp.Create;\n  GameApp := TGamingApp.Create;\n  \n  MobileApp.UserInterface;\n  MobileApp.Performance;\n  \n  GameApp.UserInterface;\n  GameApp.Performance;\n  \n  MobileApp.Free;\n  GameApp.Free;\nend.\n```"
  },
  {
    "task": "Construct a parent class for a corporate policy with methods for compliance and enforcement, then derive an HR policy class that overrides these methods for employee relations.",
    "code": "```pascal\nprogram CorporatePolicyInheritance;\n\ntype\n  TCorporatePolicy = class\n  public\n    procedure Compliance; virtual;\n    procedure Enforcement; virtual;\n  end;\n\n  THRPolicy = class(TCorporatePolicy)\n  public\n    procedure Compliance; override;\n    procedure Enforcement; override;\n  end;\n\nprocedure TCorporatePolicy.Compliance;\nbegin\n  WriteLn('General compliance guidelines for corporate policy.');\nend;\n\nprocedure TCorporatePolicy.Enforcement;\nbegin\n  WriteLn('General enforcement actions for corporate policy.');\nend;\n\nprocedure THRPolicy.Compliance;\nbegin\n  WriteLn('Specific compliance guidelines for HR policy.');\nend;\n\nprocedure THRPolicy.Enforcement;\nbegin\n  WriteLn('Specific enforcement actions for HR policy.');\nend;\n\nvar\n  CorporatePolicy: TCorporatePolicy;\n  HRPolicy: THRPolicy;\n\nbegin\n  CorporatePolicy := TCorporatePolicy.Create;\n  HRPolicy := THRPolicy.Create;\n\n  try\n    WriteLn('Corporate Policy:');\n    CorporatePolicy.Compliance;\n    CorporatePolicy.Enforcement;\n\n    WriteLn('HR Policy:');\n    HRPolicy.Compliance;\n    HRPolicy.Enforcement;\n  finally\n    CorporatePolicy.Free;\n    HRPolicy.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Set up a base class for a scientific calculator with methods for basic operations and advanced functions, and extend it with a graphing calculator subclass that overrides these methods for plotting.",
    "code": "```pascal\nprogram CalculatorInheritance;\n\ntype\n  TScientificCalculator = class\n  public\n    function Add(a, b: Double): Double;\n    function Subtract(a, b: Double): Double;\n    function Multiply(a, b: Double): Double;\n    function Divide(a, b: Double): Double;\n    function Sin(x: Double): Double;\n    function Cos(x: Double): Double;\n  end;\n\n  TGraphingCalculator = class(TScientificCalculator)\n  public\n    function Add(a, b: Double): Double; override;\n    function Subtract(a, b: Double): Double; override;\n    function Multiply(a, b: Double): Double; override;\n    function Divide(a, b: Double): Double; override;\n    function Sin(x: Double): Double; override;\n    function Cos(x: Double): Double; override;\n  end;\n\nfunction TScientificCalculator.Add(a, b: Double): Double;\nbegin\n  Result := a + b;\nend;\n\nfunction TScientificCalculator.Subtract(a, b: Double): Double;\nbegin\n  Result := a - b;\nend;\n\nfunction TScientificCalculator.Multiply(a, b: Double): Double;\nbegin\n  Result := a * b;\nend;\n\nfunction TScientificCalculator.Divide(a, b: Double): Double;\nbegin\n  if b <> 0 then\n    Result := a / b\n  else\n    raise Exception.Create('Division by zero');\nend;\n\nfunction TScientificCalculator.Sin(x: Double): Double;\nbegin\n  Result := System.Sin(x);\nend;\n\nfunction TScientificCalculator.Cos(x: Double): Double;\nbegin\n  Result := System.Cos(x);\nend;\n\nfunction TGraphingCalculator.Add(a, b: Double): Double;\nbegin\n  // Implementation for plotting the addition\n  Result := a + b; // Placeholder\nend;\n\nfunction TGraphingCalculator.Subtract(a, b: Double): Double;\nbegin\n  // Implementation for plotting the subtraction\n  Result := a - b; // Placeholder\nend;\n\nfunction TGraphingCalculator.Multiply(a, b: Double): Double;\nbegin\n  // Implementation for plotting the multiplication\n  Result := a * b; // Placeholder\nend;\n\nfunction TGraphingCalculator.Divide(a, b: Double): Double;\nbegin\n  // Implementation for plotting the division\n  if b <> 0 then\n    Result := a / b // Placeholder\n  else\n    raise Exception.Create('Division by zero');\nend;\n\nfunction TGraphingCalculator.Sin(x: Double): Double;\nbegin\n  // Implementation for plotting the sine\n  Result := System.Sin(x); // Placeholder\nend;\n\nfunction TGraphingCalculator.Cos(x: Double): Double;\nbegin\n  // Implementation for plotting the cosine\n  Result := System.Cos(x); // Placeholder\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Create a foundational class for a children's book with properties like age group and illustrations, and derive a picture book class that overrides the illustrations property to be more prominent.",
    "code": "```pascal\nprogram BookInheritance;\n\ntype\n  TChildrensBook = class\n  private\n    FAgeGroup: string;\n    FIllustrations: string;\n  public\n    constructor Create(AgeGroup, Illustrations: string);\n    function GetAgeGroup: string;\n    function GetIllustrations: string; virtual;\n  end;\n\n  TPictureBook = class(TChildrensBook)\n  public\n    function GetIllustrations: string; override;\n  end;\n\nconstructor TChildrensBook.Create(AgeGroup, Illustrations: string);\nbegin\n  FAgeGroup := AgeGroup;\n  FIllustrations := Illustrations;\nend;\n\nfunction TChildrensBook.GetAgeGroup: string;\nbegin\n  Result := FAgeGroup;\nend;\n\nfunction TChildrensBook.GetIllustrations: string;\nbegin\n  Result := FIllustrations;\nend;\n\nfunction TPictureBook.GetIllustrations: string;\nbegin\n  Result := 'Prominent: ' + inherited GetIllustrations;\nend;\n\nvar\n  MyBook: TPictureBook;\n\nbegin\n  MyBook := TPictureBook.Create('3-5 years', 'Colorful illustrations');\n  WriteLn('Age Group: ', MyBook.GetAgeGroup);\n  WriteLn('Illustrations: ', MyBook.GetIllustrations);\n  MyBook.Free;\nend.\n```"
  },
  {
    "task": "Design a base class for a cooking class with methods for ingredients and techniques, then create a baking class subclass that overrides these methods for dough preparation.",
    "code": "```pascal\nprogram CookingClasses;\n\ntype\n  TCookingClass = class\n    procedure Ingredients; virtual;\n    procedure Techniques; virtual;\n  end;\n\n  TBakingClass = class(TCookingClass)\n    procedure Ingredients; override;\n    procedure Techniques; override;\n  end;\n\nprocedure TCookingClass.Ingredients;\nbegin\n  Writeln('Generic ingredients for cooking.');\nend;\n\nprocedure TCookingClass.Techniques;\nbegin\n  Writeln('Generic cooking techniques.');\nend;\n\nprocedure TBakingClass.Ingredients;\nbegin\n  Writeln('Specific ingredients for baking dough.');\nend;\n\nprocedure TBakingClass.Techniques;\nbegin\n  Writeln('Specific techniques for preparing dough.');\nend;\n\nvar\n  Cooking: TCookingClass;\n  Baking: TBakingClass;\n\nbegin\n  Cooking := TCookingClass.Create;\n  Baking := TBakingClass.Create;\n\n  Writeln('Cooking Class:');\n  Cooking.Ingredients;\n  Cooking.Techniques;\n\n  Writeln('Baking Class:');\n  Baking.Ingredients;\n  Baking.Techniques;\n\n  Cooking.Free;\n  Baking.Free;\nend.\n```"
  },
  {
    "task": "Develop a superclass for a public transportation system with methods for routes and schedules, then extend it with a metro system subclass that overrides these methods for urban areas.",
    "code": "```pascal\nprogram PublicTransportSystem;\n\ntype\n  TPublicTransport = class\n    procedure Routes; virtual;\n    procedure Schedules; virtual;\n  end;\n\n  TMetroSystem = class(TPublicTransport)\n    procedure Routes; override;\n    procedure Schedules; override;\n  end;\n\nprocedure TPublicTransport.Routes;\nbegin\n  Writeln('General transportation routes information.');\nend;\n\nprocedure TPublicTransport.Schedules;\nbegin\n  Writeln('General transportation schedules information.');\nend;\n\nprocedure TMetroSystem.Routes;\nbegin\n  Writeln('Urban metro routes information.');\nend;\n\nprocedure TMetroSystem.Schedules;\nbegin\n  Writeln('Urban metro schedules information.');\nend;\n\nvar\n  Transport: TPublicTransport;\n  Metro: TMetroSystem;\nbegin\n  Transport := TPublicTransport.Create;\n  Metro := TMetroSystem.Create;\n\n  Transport.Routes;\n  Transport.Schedules;\n\n  Metro.Routes;\n  Metro.Schedules;\n\n  Transport.Free;\n  Metro.Free;\nend.\n```"
  },
  {
    "task": "Implement a base class for a music store inventory with methods for stock and sales, then create a vinyl record subclass that overrides these methods for collectible items.",
    "code": "```pascal\nprogram MusicStoreInventory;\n\ntype\n  TMusicStoreItem = class\n  public\n    procedure Stock; virtual;\n    procedure Sales; virtual;\n  end;\n\n  TVinylRecord = class(TMusicStoreItem)\n  public\n    procedure Stock; override;\n    procedure Sales; override;\n  end;\n\nprocedure TMusicStoreItem.Stock;\nbegin\n  Writeln('Stocking item in general inventory.');\nend;\n\nprocedure TMusicStoreItem.Sales;\nbegin\n  Writeln('Processing sale in general inventory.');\nend;\n\nprocedure TVinylRecord.Stock;\nbegin\n  Writeln('Stocking collectible vinyl record.');\nend;\n\nprocedure TVinylRecord.Sales;\nbegin\n  Writeln('Processing sale of collectible vinyl record.');\nend;\n\nvar\n  GeneralItem: TMusicStoreItem;\n  Vinyl: TVinylRecord;\n\nbegin\n  GeneralItem := TMusicStoreItem.Create;\n  Vinyl := TVinylRecord.Create;\n\n  GeneralItem.Stock;\n  GeneralItem.Sales;\n\n  Vinyl.Stock;\n  Vinyl.Sales;\n\n  GeneralItem.Free;\n  Vinyl.Free;\nend.\n```"
  },
  {
    "task": "Construct a parent class for a legal contract with methods for terms and conditions, then derive a rental agreement class that overrides these methods for tenant rights.",
    "code": "```pascal\nprogram LegalContracts;\n\ntype\n  TLegalContract = class\n  public\n    procedure TermsAndConditions; virtual;\n  end;\n\n  TRentalAgreement = class(TLegalContract)\n  public\n    procedure TermsAndConditions; override;\n  end;\n\nprocedure TLegalContract.TermsAndConditions;\nbegin\n  Writeln('General terms and conditions of the legal contract.');\nend;\n\nprocedure TRentalAgreement.TermsAndConditions;\nbegin\n  Writeln('Specific terms and conditions regarding tenant rights.');\nend;\n\nvar\n  contract: TLegalContract;\n  rental: TRentalAgreement;\nbegin\n  contract := TLegalContract.Create;\n  rental := TRentalAgreement.Create;\n\n  contract.TermsAndConditions;\n  rental.TermsAndConditions;\n\n  contract.Free;\n  rental.Free;\nend.\n```"
  },
  {
    "task": "Set up a base class for a journalism piece with methods for reporting and editing, and extend it with an investigative article subclass that overrides these methods for in-depth analysis.",
    "code": "```pascal\nprogram JournalismInheritance;\n\ntype\n  TJournalismPiece = class\n  public\n    procedure Report; virtual;\n    procedure Edit; virtual;\n  end;\n\n  TInvestigativeArticle = class(TJournalismPiece)\n  public\n    procedure Report; override;\n    procedure Edit; override;\n  end;\n\nprocedure TJournalismPiece.Report;\nbegin\n  WriteLn('Reporting a general journalism piece.');\nend;\n\nprocedure TJournalismPiece.Edit;\nbegin\n  WriteLn('Editing a general journalism piece.');\nend;\n\nprocedure TInvestigativeArticle.Report;\nbegin\n  WriteLn('Reporting an in-depth investigative article.');\nend;\n\nprocedure TInvestigativeArticle.Edit;\nbegin\n  WriteLn('Editing an in-depth investigative article.');\nend;\n\nvar\n  GeneralPiece: TJournalismPiece;\n  InvestigativePiece: TInvestigativeArticle;\n\nbegin\n  GeneralPiece := TJournalismPiece.Create;\n  InvestigativePiece := TInvestigativeArticle.Create;\n\n  GeneralPiece.Report;\n  GeneralPiece.Edit;\n\n  InvestigativePiece.Report;\n  InvestigativePiece.Edit;\n\n  GeneralPiece.Free;\n  InvestigativePiece.Free;\nend.\n```"
  },
  {
    "task": "Create a foundational class for a wildlife reserve with properties like area and species, and derive a bird sanctuary class that overrides the species property for avians.",
    "code": "```pascal\nprogram WildlifeReserve;\n\ntype\n  TWildlifeReserve = class\n  private\n    FArea: Double;\n    FSpecies: String;\n  public\n    constructor Create(aArea: Double; aSpecies: String);\n    property Area: Double read FArea write FArea;\n    property Species: String read FSpecies write FSpecies;\n  end;\n\n  TBirdSanctuary = class(TWildlifeReserve)\n  public\n    constructor Create(aArea: Double);\n  end;\n\nconstructor TWildlifeReserve.Create(aArea: Double; aSpecies: String);\nbegin\n  FArea := aArea;\n  FSpecies := aSpecies;\nend;\n\nconstructor TBirdSanctuary.Create(aArea: Double);\nbegin\n  inherited Create(aArea, 'Avians');\nend;\n\nvar\n  Reserve: TWildlifeReserve;\n  Sanctuary: TBirdSanctuary;\n\nbegin\n  Reserve := TWildlifeReserve.Create(1000.0, 'Various');\n  Sanctuary := TBirdSanctuary.Create(500.0);\n  \n  Reserve.Free;\n  Sanctuary.Free;\nend.\n```"
  },
  {
    "task": "Design a base class for a subscription box service with methods for curation and delivery, then create a gourmet food box subclass that overrides these methods for artisanal products.",
    "code": "```pascal\nprogram SubscriptionBoxService;\n\ntype\n  TSubscriptionBox = class\n    procedure Curation; virtual;\n    procedure Delivery; virtual;\n  end;\n\n  TGourmetFoodBox = class(TSubscriptionBox)\n    procedure Curation; override;\n    procedure Delivery; override;\n  end;\n\nprocedure TSubscriptionBox.Curation;\nbegin\n  WriteLn('Curating general items for the subscription box.');\nend;\n\nprocedure TSubscriptionBox.Delivery;\nbegin\n  WriteLn('Delivering the subscription box.');\nend;\n\nprocedure TGourmetFoodBox.Curation;\nbegin\n  WriteLn('Curating artisanal products for the gourmet food box.');\nend;\n\nprocedure TGourmetFoodBox.Delivery;\nbegin\n  WriteLn('Delivering the gourmet food box.');\nend;\n\nvar\n  Box: TSubscriptionBox;\n  GourmetBox: TGourmetFoodBox;\n\nbegin\n  Box := TSubscriptionBox.Create;\n  try\n    Box.Curation;\n    Box.Delivery;\n  finally\n    Box.Free;\n  end;\n\n  GourmetBox := TGourmetFoodBox.Create;\n  try\n    GourmetBox.Curation;\n    GourmetBox.Delivery;\n  finally\n    GourmetBox.Free;\n  end;\nend.\n```"
  },
  {
    "task": "Develop a superclass for a fitness app with methods for tracking and motivation, then extend it with a running app subclass that overrides these methods for pace and distance.",
    "code": "```pascal\nprogram FitnessApp;\n\ntype\n  TFitnessApp = class\n  public\n    procedure TrackActivity; virtual;\n    procedure MotivateUser; virtual;\n  end;\n\n  TRunningApp = class(TFitnessApp)\n  public\n    procedure TrackActivity; override;\n    procedure MotivateUser; override;\n  end;\n\n{ TFitnessApp }\n\nprocedure TFitnessApp.TrackActivity;\nbegin\n  Writeln('Tracking general fitness activity...');\nend;\n\nprocedure TFitnessApp.MotivateUser;\nbegin\n  Writeln('Stay motivated and keep active!');\nend;\n\n{ TRunningApp }\n\nprocedure TRunningApp.TrackActivity;\nbegin\n  Writeln('Tracking running activity: pace and distance...');\nend;\n\nprocedure TRunningApp.MotivateUser;\nbegin\n  Writeln('Push your limits and improve your running!');\nend;\n\nvar\n  FitnessApp: TFitnessApp;\n  RunningApp: TRunningApp;\n\nbegin\n  FitnessApp := TFitnessApp.Create;\n  RunningApp := TRunningApp.Create;\n\n  FitnessApp.TrackActivity;\n  FitnessApp.MotivateUser;\n\n  RunningApp.TrackActivity;\n  RunningApp.MotivateUser;\n\n  FitnessApp.Free;\n  RunningApp.Free;\nend.\n```"
  },
  {
    "task": "Implement a base class for a digital portfolio with methods for showcasing and updating, then create an artist portfolio subclass that overrides these methods for galleries.",
    "code": "```pascal\nprogram PortfolioInheritance;\n\ntype\n  TDigitalPortfolio = class\n    procedure Showcase; virtual;\n    procedure Update; virtual;\n  end;\n\n  TArtistPortfolio = class(TDigitalPortfolio)\n    procedure Showcase; override;\n    procedure Update; override;\n  end;\n\nprocedure TDigitalPortfolio.Showcase;\nbegin\n  WriteLn('Showcasing digital portfolio.');\nend;\n\nprocedure TDigitalPortfolio.Update;\nbegin\n  WriteLn('Updating digital portfolio.');\nend;\n\nprocedure TArtistPortfolio.Showcase;\nbegin\n  WriteLn('Showcasing artist gallery.');\nend;\n\nprocedure TArtistPortfolio.Update;\nbegin\n  WriteLn('Updating artist gallery.');\nend;\n\nvar\n  Portfolio: TDigitalPortfolio;\n  ArtistPortfolio: TArtistPortfolio;\n\nbegin\n  Portfolio := TDigitalPortfolio.Create;\n  Portfolio.Showcase;\n  Portfolio.Update;\n\n  ArtistPortfolio := TArtistPortfolio.Create;\n  ArtistPortfolio.Showcase;\n  ArtistPortfolio.Update;\n\n  Portfolio.Free;\n  ArtistPortfolio.Free;\nend.\n```"
  },
  {
    "task": "Construct a parent class for a gaming console with methods for performance and compatibility, then derive a next-gen console class that overrides these methods for new features.",
    "code": "```pascal\nprogram GamingConsoleInheritance;\n\ntype\n  TGamingConsole = class\n  public\n    procedure Performance; virtual;\n    procedure Compatibility; virtual;\n  end;\n\n  TNextGenConsole = class(TGamingConsole)\n  public\n    procedure Performance; override;\n    procedure Compatibility; override;\n  end;\n\nprocedure TGamingConsole.Performance;\nbegin\n  Writeln('Standard performance of gaming console.');\nend;\n\nprocedure TGamingConsole.Compatibility;\nbegin\n  Writeln('Compatible with standard games.');\nend;\n\nprocedure TNextGenConsole.Performance;\nbegin\n  Writeln('Enhanced performance with next-gen features.');\nend;\n\nprocedure TNextGenConsole.Compatibility;\nbegin\n  Writeln('Compatible with next-gen and standard games.');\nend;\n\nvar\n  Console: TGamingConsole;\n  NextGenConsole: TNextGenConsole;\nbegin\n  Console := TGamingConsole.Create;\n  NextGenConsole := TNextGenConsole.Create;\n  \n  Console.Performance;\n  Console.Compatibility;\n  \n  NextGenConsole.Performance;\n  NextGenConsole.Compatibility;\n  \n  Console.Free;\n  NextGenConsole.Free;\nend.\n```"
  },
  {
    "task": "Set up a base class for a cultural festival with methods for events and participation, and extend it with a music festival subclass that overrides these methods for performances.",
    "code": "```pascal\nprogram CulturalFestival;\n\ntype\n  TCulturalFestival = class\n  public\n    procedure Events; virtual;\n    procedure Participation; virtual;\n  end;\n\n  TMusicFestival = class(TCulturalFestival)\n  public\n    procedure Events; override;\n    procedure Participation; override;\n  end;\n\nprocedure TCulturalFestival.Events;\nbegin\n  Writeln('Cultural Festival Events');\nend;\n\nprocedure TCulturalFestival.Participation;\nbegin\n  Writeln('Cultural Festival Participation');\nend;\n\nprocedure TMusicFestival.Events;\nbegin\n  Writeln('Music Festival Performances');\nend;\n\nprocedure TMusicFestival.Participation;\nbegin\n  Writeln('Music Festival Participation');\nend;\n\nvar\n  Festival: TCulturalFestival;\n  MusicFest: TMusicFestival;\n\nbegin\n  Festival := TCulturalFestival.Create;\n  MusicFest := TMusicFestival.Create;\n  \n  Festival.Events;\n  Festival.Participation;\n  \n  MusicFest.Events;\n  MusicFest.Participation;\n\n  Festival.Free;\n  MusicFest.Free;\nend.\n```"
  }
]