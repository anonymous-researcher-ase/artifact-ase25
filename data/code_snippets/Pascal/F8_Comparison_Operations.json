[
  {
    "task": "Write a function that checks if two strings are equal, ignoring case sensitivity.",
    "code": "```pascal\nprogram StringComparison;\n\nfunction AreStringsEqualIgnoreCase(s1, s2: string): Boolean;\nbegin\n  AreStringsEqualIgnoreCase := CompareText(s1, s2) = 0;\nend;\n\nbegin\n  { Example usage }\n  if AreStringsEqualIgnoreCase('Hello', 'hello') then\n    WriteLn('The strings are equal.')\n  else\n    WriteLn('The strings are not equal.');\nend.\n```"
  },
  {
    "task": "Create a program that determines if a number is greater than 10.",
    "code": "```pascal\nprogram CheckNumber;\nvar\n  num: Integer;\nbegin\n  Write('Enter a number: ');\n  ReadLn(num);\n  if num > 10 then\n    WriteLn('The number is greater than 10.')\n  else\n    WriteLn('The number is not greater than 10.');\nend.\n```"
  },
  {
    "task": "Implement a feature that compares the current date to a given date and returns if it is in the future.",
    "code": "```pascal\nprogram CompareDates;\nuses SysUtils;\n\nfunction IsDateInFuture(givenDate: TDateTime): Boolean;\nbegin\n  Result := givenDate > Now;\nend;\n\nvar\n  dateToCompare: TDateTime;\nbegin\n  dateToCompare := EncodeDate(2023, 12, 31); // Example given date\n  if IsDateInFuture(dateToCompare) then\n    Writeln('The given date is in the future.')\n  else\n    Writeln('The given date is not in the future.');\nend.\n```"
  },
  {
    "task": "Design a system that checks if a user's age is less than 18 and restricts access if true.",
    "code": "```pascal\nprogram AgeRestriction;\n\nvar\n  age: Integer;\n\nbegin\n  Write('Enter your age: ');\n  ReadLn(age);\n  \n  if age < 18 then\n    WriteLn('Access Restricted.')\n  else\n    WriteLn('Access Granted.');\nend.\n```"
  },
  {
    "task": "Build an algorithm that finds the maximum of three given integers.",
    "code": "```pascal\nprogram FindMaximumOfThree;\n\nvar\n  a, b, c, max: integer;\n\nbegin\n  writeln('Enter three integers:');\n  readln(a, b, c);\n  \n  max := a;\n  \n  if b > max then\n    max := b;\n  \n  if c > max then\n    max := c;\n  \n  writeln('The maximum value is: ', max);\nend.\n```"
  },
  {
    "task": "Write a function that verifies if two arrays contain the same elements in the same order.",
    "code": "```pascal\nprogram CompareArrays;\n\ntype\n  TIntArray = array of Integer;\n\nfunction AreArraysEqual(arr1, arr2: TIntArray): Boolean;\nvar\n  i: Integer;\nbegin\n  if Length(arr1) <> Length(arr2) then\n  begin\n    AreArraysEqual := False;\n    Exit;\n  end;\n\n  for i := 0 to High(arr1) do\n  begin\n    if arr1[i] <> arr2[i] then\n    begin\n      AreArraysEqual := False;\n      Exit;\n    end;\n  end;\n\n  AreArraysEqual := True;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Create a script that checks if a product's price is within a specified range.",
    "code": "```pascal\nprogram PriceCheck;\n\nvar\n  price, lowerBound, upperBound: real;\n  withinRange: boolean;\n\nbegin\n  (* Example values *)\n  price := 50.0;\n  lowerBound := 30.0;\n  upperBound := 60.0;\n\n  (* Check if the price is within the range *)\n  withinRange := (price >= lowerBound) and (price <= upperBound);\n\n  if withinRange then\n    writeln('The product''s price is within the specified range.')\n  else\n    writeln('The product''s price is outside the specified range.');\nend.\n```"
  },
  {
    "task": "Develop a tool that compares two versions of a software application and determines which is newer.",
    "code": "```pascal\nprogram VersionComparison;\n\nfunction CompareVersions(version1, version2: string): Integer;\nvar\n  v1Parts, v2Parts: array of Integer;\n  i, v1Part, v2Part: Integer;\n  v1Length, v2Length: Integer;\n  v1, v2: TStringArray;\nbegin\n  v1 := version1.Split('.');\n  v2 := version2.Split('.');\n  \n  v1Length := Length(v1);\n  v2Length := Length(v2);\n  \n  SetLength(v1Parts, v1Length);\n  SetLength(v2Parts, v2Length);\n  \n  for i := 0 to v1Length - 1 do\n    v1Parts[i] := StrToInt(v1[i]);\n  \n  for i := 0 to v2Length - 1 do\n    v2Parts[i] := StrToInt(v2[i]);\n  \n  for i := 0 to Max(v1Length, v2Length) - 1 do\n  begin\n    if i < v1Length then\n      v1Part := v1Parts[i]\n    else\n      v1Part := 0;\n      \n    if i < v2Length then\n      v2Part := v2Parts[i]\n    else\n      v2Part := 0;\n      \n    if v1Part < v2Part then\n      Exit(-1)\n    else if v1Part > v2Part then\n      Exit(1);\n  end;\n  \n  Result := 0;\nend;\n\nvar\n  version1, version2: string;\n  comparisonResult: Integer;\nbegin\n  version1 := '1.2.3';\n  version2 := '1.2.4';\n  \n  comparisonResult := CompareVersions(version1, version2);\n  \n  if comparisonResult < 0 then\n    WriteLn('Version ', version2, ' is newer than version ', version1)\n  else if comparisonResult > 0 then\n    WriteLn('Version ', version1, ' is newer than version ', version2)\n  else\n    WriteLn('Both versions are the same.');\nend.\n```"
  },
  {
    "task": "Implement a test to see if a given year is a leap year.",
    "code": "```pascal\nprogram LeapYearTest;\n\nvar\n  year: Integer;\n  isLeap: Boolean;\n\nbegin\n  Write('Enter a year: ');\n  ReadLn(year);\n\n  if (year mod 4 = 0) and ((year mod 100 <> 0) or (year mod 400 = 0)) then\n    isLeap := True\n  else\n    isLeap := False;\n\n  if isLeap then\n    WriteLn(year, ' is a leap year.')\n  else\n    WriteLn(year, ' is not a leap year.');\nend.\n```"
  },
  {
    "task": "Design a feature that tells if a student\u2019s grade is passing or failing based on a threshold.",
    "code": "```pascal\nprogram GradeCheck;\n\nvar\n  grade, threshold: Integer;\n  result: String;\n\nbegin\n  { Assign values to grade and threshold }\n  grade := 70;\n  threshold := 60;\n\n  { Compare grade with threshold }\n  if grade >= threshold then\n    result := 'Passing'\n  else\n    result := 'Failing';\n  \n  { Output the result }\n  WriteLn('The student''s grade is: ', result);\nend.\n```"
  },
  {
    "task": "Write a function to compare two file sizes and return the larger one.",
    "code": "```pascal\nprogram CompareFileSizes;\n\nuses\n  SysUtils;\n\nfunction LargerFileSize(fileSize1, fileSize2: Int64): Int64;\nbegin\n  if fileSize1 > fileSize2 then\n    LargerFileSize := fileSize1\n  else\n    LargerFileSize := fileSize2;\nend;\n\nvar\n  file1Size, file2Size, largerSize: Int64;\nbegin\n  // Example file sizes\n  file1Size := 1024; // Replace with actual size retrieval\n  file2Size := 2048; // Replace with actual size retrieval\n\n  largerSize := LargerFileSize(file1Size, file2Size);\n\n  WriteLn('The larger file size is: ', largerSize);\nend.\n```"
  },
  {
    "task": "Build a program that checks if the temperature is below freezing point.",
    "code": "```pascal\nprogram CheckFreezingPoint;\n\nvar\n  temperature: Real;\n\nbegin\n  Write('Enter the temperature in Celsius: ');\n  ReadLn(temperature);\n\n  if temperature < 0 then\n    WriteLn('The temperature is below the freezing point.')\n  else\n    WriteLn('The temperature is above or at the freezing point.');\nend.\n```"
  },
  {
    "task": "Create a logic that determines if a number is within the Fibonacci sequence.",
    "code": "```pascal\nprogram FibonacciCheck;\n\nfunction IsFibonacci(n: Integer): Boolean;\nvar\n  a, b, temp: Integer;\nbegin\n  a := 0;\n  b := 1;\n  \n  if (n = a) or (n = b) then\n  begin\n    IsFibonacci := True;\n    Exit;\n  end;\n  \n  while b < n do\n  begin\n    temp := b;\n    b := a + b;\n    a := temp;\n  end;\n  \n  IsFibonacci := (b = n);\nend;\n\nvar\n  number: Integer;\nbegin\n  Write('Enter a number to check if it is in the Fibonacci sequence: ');\n  ReadLn(number);\n  if IsFibonacci(number) then\n    WriteLn('The number is in the Fibonacci sequence.')\n  else\n    WriteLn('The number is not in the Fibonacci sequence.');\nend.\n```"
  },
  {
    "task": "Develop a function that checks if a given word is a palindrome.",
    "code": "```pascal\nprogram PalindromeCheck;\n\nfunction IsPalindrome(word: string): Boolean;\nvar\n  i, len: Integer;\nbegin\n  len := Length(word);\n  for i := 1 to len div 2 do\n  begin\n    if word[i] <> word[len - i + 1] then\n    begin\n      IsPalindrome := False;\n      Exit;\n    end;\n  end;\n  IsPalindrome := True;\nend;\n\nbegin\n  // Example usage\n  if IsPalindrome('radar') then\n    WriteLn('The word is a palindrome.')\n  else\n    WriteLn('The word is not a palindrome.');\nend.\n```"
  },
  {
    "task": "Write a script to see if a password meets a minimum length requirement.",
    "code": "```pascal\nprogram PasswordCheck;\n\nvar\n  password: string;\n  minLength: Integer;\n\nbegin\n  minLength := 8;\n  Write('Enter your password: ');\n  ReadLn(password);\n  \n  if Length(password) >= minLength then\n    WriteLn('Password meets the minimum length requirement.')\n  else\n    WriteLn('Password does not meet the minimum length requirement.');\nend.\n```"
  },
  {
    "task": "Implement a system that decides if a point is inside a circle based on its coordinates.",
    "code": "```pascal\nprogram PointInCircle;\n\nvar\n  x, y, circleX, circleY, radius: real;\n  distanceSquared, radiusSquared: real;\n  isInside: boolean;\n\nbegin\n  { Assign the point coordinates }\n  x := 5.0;\n  y := 5.0;\n\n  { Assign the circle's center and radius }\n  circleX := 0.0;\n  circleY := 0.0;\n  radius := 10.0;\n\n  { Calculate the squared distance from the point to the circle's center }\n  distanceSquared := sqr(x - circleX) + sqr(y - circleY);\n  radiusSquared := sqr(radius);\n\n  { Determine if the point is inside the circle }\n  isInside := distanceSquared <= radiusSquared;\n\n  { Output the result }\n  if isInside then\n    writeln('The point is inside the circle.')\n  else\n    writeln('The point is outside the circle.')\nend.\n```"
  },
  {
    "task": "Design a program that checks if a shopping cart total exceeds a certain budget.",
    "code": "```pascal\nprogram ShoppingCart;\n\nvar\n  cartTotal, budget: Real;\n\nbegin\n  cartTotal := 250.0; { Example total value }\n  budget := 200.0;    { Example budget }\n\n  if cartTotal > budget then\n    writeln('The cart total exceeds the budget.')\n  else\n    writeln('The cart total is within the budget.');\nend.\n```"
  },
  {
    "task": "Create a function that compares two players' scores and returns the winner.",
    "code": "```pascal\nprogram CompareScores;\n\nfunction DetermineWinner(score1, score2: Integer): String;\nbegin\n  if score1 > score2 then\n    DetermineWinner := 'Player 1 is the winner'\n  else if score2 > score1 then\n    DetermineWinner := 'Player 2 is the winner'\n  else\n    DetermineWinner := 'It''s a tie';\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Write a program to determine if one string is a substring of another.",
    "code": "```pascal\nprogram SubstringCheck;\n\nuses\n  SysUtils;\n\nvar\n  mainStr, subStr: string;\n  isSubstring: Boolean;\n\nbegin\n  Write('Enter the main string: ');\n  ReadLn(mainStr);\n  Write('Enter the substring to find: ');\n  ReadLn(subStr);\n\n  isSubstring := Pos(subStr, mainStr) > 0;\n\n  if isSubstring then\n    WriteLn('The string \"', subStr, '\" is a substring of \"', mainStr, '\".')\n  else\n    WriteLn('The string \"', subStr, '\" is not a substring of \"', mainStr, '\".');\nend.\n```"
  },
  {
    "task": "Build a utility that checks if a number is a prime number.",
    "code": "```pascal\nprogram CheckPrime;\n\nfunction IsPrime(n: Integer): Boolean;\nvar\n  i: Integer;\nbegin\n  if n <= 1 then\n  begin\n    IsPrime := False;\n    Exit;\n  end;\n\n  for i := 2 to Trunc(Sqrt(n)) do\n  begin\n    if n mod i = 0 then\n    begin\n      IsPrime := False;\n      Exit;\n    end;\n  end;\n\n  IsPrime := True;\nend;\n\nvar\n  number: Integer;\nbegin\n  Write('Enter a number: ');\n  ReadLn(number);\n\n  if IsPrime(number) then\n    WriteLn('The number is a prime number.')\n  else\n    WriteLn('The number is not a prime number.');\nend.\n```"
  },
  {
    "task": "Write a function that checks if a given number is a perfect square.",
    "code": "```pascal\nprogram PerfectSquareCheck;\n\nfunction IsPerfectSquare(n: Integer): Boolean;\nvar\n  i: Integer;\nbegin\n  if n < 0 then\n  begin\n    IsPerfectSquare := False;\n    Exit;\n  end;\n  \n  i := 0;\n  while i * i < n do\n    Inc(i);\n    \n  IsPerfectSquare := (i * i = n);\nend;\n\nbegin\n  { Example usage }\n  WriteLn(IsPerfectSquare(16));  { Outputs: TRUE }\n  WriteLn(IsPerfectSquare(14));  { Outputs: FALSE }\nend.\n```"
  },
  {
    "task": "Create a system that determines if a person is eligible for a senior citizen discount based on their age.",
    "code": "```pascal\nprogram SeniorCitizenDiscount;\n\nvar\n  age: Integer;\n  isEligible: Boolean;\n\nbegin\n  Write('Enter your age: ');\n  ReadLn(age);\n\n  isEligible := age >= 65;\n\n  if isEligible then\n    WriteLn('You are eligible for a senior citizen discount.')\n  else\n    WriteLn('You are not eligible for a senior citizen discount.');\nend.\n```"
  },
  {
    "task": "Develop a feature to check if a date falls on a weekend.",
    "code": "```pascal\nprogram CheckWeekend;\n\nuses\n  SysUtils, DateUtils;\n\nfunction IsWeekend(aDate: TDateTime): Boolean;\nvar\n  DayOfWeek: Integer;\nbegin\n  DayOfWeek := DayOfTheWeek(aDate);\n  Result := (DayOfWeek = DaySaturday) or (DayOfWeek = DaySunday);\nend;\n\nvar\n  TestDate: TDateTime;\nbegin\n  TestDate := EncodeDate(2023, 10, 14); // Example date\n  if IsWeekend(TestDate) then\n    WriteLn('The date falls on a weekend.')\n  else\n    WriteLn('The date is a weekday.');\nend.\n```"
  },
  {
    "task": "Design a program that sees if a given email address is in the correct format.",
    "code": "```pascal\nprogram ValidateEmailFormat;\n\nfunction IsValidEmail(email: string): Boolean;\nvar\n  atPos, dotPos: Integer;\nbegin\n  atPos := Pos('@', email);\n  dotPos := LastDelimiter('.', email);\n  IsValidEmail := (atPos > 1) and (dotPos > atPos + 1) and (dotPos < Length(email));\nend;\n\nvar\n  email: string;\nbegin\n  Write('Enter an email address: ');\n  ReadLn(email);\n  if IsValidEmail(email) then\n    WriteLn('The email address is in the correct format.')\n  else\n    WriteLn('The email address is not in the correct format.');\nend.\n```"
  },
  {
    "task": "Implement a test to check if a rectangle's area is larger than a triangle's area.",
    "code": "```pascal\nprogram AreaComparison;\n\nvar\n  rectLength, rectWidth: real;\n  triBase, triHeight: real;\n  rectArea, triArea: real;\n\nbegin\n  { Input dimensions for rectangle }\n  writeln('Enter the length and width of the rectangle:');\n  readln(rectLength, rectWidth);\n\n  { Input dimensions for triangle }\n  writeln('Enter the base and height of the triangle:');\n  readln(triBase, triHeight);\n\n  { Calculate areas }\n  rectArea := rectLength * rectWidth;\n  triArea := 0.5 * triBase * triHeight;\n\n  { Compare areas }\n  if rectArea > triArea then\n    writeln('The rectangle''s area is larger than the triangle''s area.')\n  else\n    writeln('The rectangle''s area is not larger than the triangle''s area.');\nend.\n```"
  },
  {
    "task": "Write a function that verifies if two rectangles overlap each other.",
    "code": "```pascal\nprogram RectangleOverlap;\n\ntype\n  Rectangle = record\n    x1, y1, x2, y2: Integer;\n  end;\n\nfunction Overlap(rect1, rect2: Rectangle): Boolean;\nbegin\n  if (rect1.x1 >= rect2.x2) or (rect2.x1 >= rect1.x2) or\n     (rect1.y1 >= rect2.y2) or (rect2.y1 >= rect1.y2) then\n    Overlap := False\n  else\n    Overlap := True;\nend;\n\nvar\n  r1, r2: Rectangle;\n  isOverlap: Boolean;\n\nbegin\n  r1.x1 := 1; r1.y1 := 1; r1.x2 := 4; r1.y2 := 4;\n  r2.x1 := 3; r2.y1 := 3; r2.x2 := 6; r2.y2 := 6;\n  isOverlap := Overlap(r1, r2);\n  WriteLn('Do the rectangles overlap? ', isOverlap);\nend.\n```"
  },
  {
    "task": "Create a script to compare two strings lexicographically.",
    "code": "```pascal\nprogram CompareStrings;\n\nvar\n  str1, str2: string;\n  comparisonResult: Integer;\n\nbegin\n  str1 := 'Hello';\n  str2 := 'World';\n\n  comparisonResult := CompareStr(str1, str2);\n\n  if comparisonResult < 0 then\n    writeln('str1 is less than str2')\n  else if comparisonResult > 0 then\n    writeln('str1 is greater than str2')\n  else\n    writeln('str1 is equal to str2');\nend.\n```"
  },
  {
    "task": "Build a program that checks if a list of numbers is in ascending order.",
    "code": "```pascal\nprogram CheckAscendingOrder;\n\nvar\n  numbers: array[1..100] of Integer;\n  n, i: Integer;\n  isAscending: Boolean;\n\nbegin\n  Write('Enter the number of elements: ');\n  ReadLn(n);\n  \n  WriteLn('Enter the elements:');\n  for i := 1 to n do\n    ReadLn(numbers[i]);\n\n  isAscending := True;\n  for i := 1 to n - 1 do\n  begin\n    if numbers[i] > numbers[i + 1] then\n    begin\n      isAscending := False;\n      Break;\n    end;\n  end;\n\n  if isAscending then\n    WriteLn('The list is in ascending order.')\n  else\n    WriteLn('The list is not in ascending order.');\nend.\n```"
  },
  {
    "task": "Design a system to compare the heights of two buildings.",
    "code": "```pascal\nprogram CompareBuildings;\n\nvar\n  height1, height2: Real;\n\nbegin\n  Write('Enter the height of the first building: ');\n  ReadLn(height1);\n  Write('Enter the height of the second building: ');\n  ReadLn(height2);\n\n  if height1 > height2 then\n    WriteLn('The first building is taller.')\n  else if height1 < height2 then\n    WriteLn('The second building is taller.')\n  else\n    WriteLn('Both buildings have the same height.');\nend.\n```"
  },
  {
    "task": "Write a feature that determines if a given time is before noon.",
    "code": "```pascal\nprogram BeforeNoonCheck;\n\nfunction IsBeforeNoon(hour, minute: Integer): Boolean;\nbegin\n  if (hour < 12) then\n    IsBeforeNoon := True\n  else\n    IsBeforeNoon := False;\nend;\n\nvar\n  hour, minute: Integer;\n  result: Boolean;\nbegin\n  { Example input for testing }\n  hour := 10;\n  minute := 30;\n\n  result := IsBeforeNoon(hour, minute);\n\n  if result then\n    WriteLn('The time is before noon.')\n  else\n    WriteLn('The time is not before noon.');\nend.\n```"
  },
  {
    "task": "Implement a function to check if a given number is a power of two.",
    "code": "```pascal\nprogram PowerOfTwoCheck;\n\nfunction IsPowerOfTwo(n: Integer): Boolean;\nbegin\n  if n <= 0 then\n    IsPowerOfTwo := False\n  else\n    IsPowerOfTwo := (n and (n - 1)) = 0;\nend;\n\nvar\n  num: Integer;\nbegin\n  Write('Enter a number: ');\n  ReadLn(num);\n  if IsPowerOfTwo(num) then\n    WriteLn(num, ' is a power of two.')\n  else\n    WriteLn(num, ' is not a power of two.');\nend.\n```"
  },
  {
    "task": "Create a program that determines if a word is longer than another word.",
    "code": "```pascal\nprogram CompareWordLengths;\n\nvar\n  word1, word2: string;\n\nbegin\n  writeln('Enter the first word:');\n  readln(word1);\n  writeln('Enter the second word:');\n  readln(word2);\n  \n  if Length(word1) > Length(word2) then\n    writeln('The first word is longer than the second word.')\n  else\n    writeln('The first word is not longer than the second word.');\nend.\n```"
  },
  {
    "task": "Develop a function to compare the lengths of two lists and return the longer one.",
    "code": "```pascal\nprogram CompareListLengths;\n\ntype\n  TIntArray = array of Integer;\n\nfunction LongerList(const A, B: TIntArray): TIntArray;\nbegin\n  if Length(A) > Length(B) then\n    Result := A\n  else\n    Result := B;\nend;\n\nvar\n  List1, List2, Longer: TIntArray;\nbegin\n  SetLength(List1, 5);\n  SetLength(List2, 3);\n\n  Longer := LongerList(List1, List2);\n\n  // Output to verify the result\n  WriteLn('Longer list length: ', Length(Longer));\nend.\n```"
  },
  {
    "task": "Write a script to see if a user's input matches a pre-defined secret code.",
    "code": "```pascal\nprogram SecretCodeCheck;\nvar\n  userInput: string;\n  secretCode: string;\nbegin\n  secretCode := 'OpenSesame';\n  writeln('Enter the secret code: ');\n  readln(userInput);\n  \n  if userInput = secretCode then\n    writeln('Access granted.')\n  else\n    writeln('Access denied.');\nend.\n```"
  },
  {
    "task": "Build a utility that checks if a given year is in the 21st century.",
    "code": "```pascal\nprogram Check21stCentury;\n\nfunction Is21stCentury(year: Integer): Boolean;\nbegin\n  Is21stCentury := (year >= 2001) and (year <= 2100);\nend;\n\nvar\n  year: Integer;\nbegin\n  Write('Enter a year: ');\n  ReadLn(year);\n  if Is21stCentury(year) then\n    WriteLn('The year ', year, ' is in the 21st century.')\n  else\n    WriteLn('The year ', year, ' is not in the 21st century.');\nend.\n```"
  },
  {
    "task": "Create a logic that determines if a book's publication year is after 2000.",
    "code": "```pascal\nprogram BookPublicationCheck;\nvar\n  publicationYear: Integer;\n  isAfter2000: Boolean;\nbegin\n  publicationYear := 2005; // Example year\n  isAfter2000 := publicationYear > 2000;\n  writeln('Is the book published after 2000? ', isAfter2000);\nend.\n```"
  },
  {
    "task": "Design a feature to see if a number is divisible by both 3 and 5.",
    "code": "```pascal\nprogram DivisibleByThreeAndFive;\n\nvar\n  number: Integer;\n\nbegin\n  Write('Enter a number: ');\n  ReadLn(number);\n\n  if (number mod 3 = 0) and (number mod 5 = 0) then\n    WriteLn('The number is divisible by both 3 and 5.')\n  else\n    WriteLn('The number is not divisible by both 3 and 5.');\nend.\n```"
  },
  {
    "task": "Implement a system that checks if a student's GPA is above a certain threshold.",
    "code": "```pascal\nprogram CheckGPA;\n\nvar\n  studentGPA, threshold: Real;\n\nbegin\n  { Set the threshold value }\n  threshold := 3.5;\n\n  { Example student GPA }\n  studentGPA := 3.7;\n\n  { Check if the student's GPA is above the threshold }\n  if studentGPA > threshold then\n    writeln('The student''s GPA is above the threshold.')\n  else\n    writeln('The student''s GPA is not above the threshold.');\nend.\n```"
  },
  {
    "task": "Write a function to determine if a given angle is acute, right, or obtuse.",
    "code": "```pascal\nprogram AngleType;\n\nfunction AngleCategory(angle: Integer): String;\nbegin\n  if angle < 90 then\n    AngleCategory := 'Acute'\n  else if angle = 90 then\n    AngleCategory := 'Right'\n  else\n    AngleCategory := 'Obtuse';\nend;\n\nvar\n  angle: Integer;\n  result: String;\nbegin\n  angle := 75; { Example angle }\n  result := AngleCategory(angle);\n  WriteLn('The angle is ', result, '.');\nend.\n```"
  },
  {
    "task": "Develop a program that compares the lengths of two strings and returns the shorter one.",
    "code": "```pascal\nprogram CompareStringsLength;\nuses SysUtils;\n\nvar\n  str1, str2, shorterString: string;\n\nbegin\n  Write('Enter the first string: ');\n  ReadLn(str1);\n  Write('Enter the second string: ');\n  ReadLn(str2);\n\n  if Length(str1) < Length(str2) then\n    shorterString := str1\n  else\n    shorterString := str2;\n\n  WriteLn('The shorter string is: ', shorterString);\nend.\n```"
  },
  {
    "task": "Create a script to verify if a username is unique within a list.",
    "code": "```pascal\nprogram CheckUniqueUsername;\n\nvar\n  usernames: array[1..5] of string;\n  inputUsername: string;\n  unique: boolean;\n  i: integer;\n\nbegin\n  usernames[1] := 'Alice';\n  usernames[2] := 'Bob';\n  usernames[3] := 'Charlie';\n  usernames[4] := 'David';\n  usernames[5] := 'Eve';\n\n  writeln('Enter a username to check:');\n  readln(inputUsername);\n\n  unique := true;\n\n  for i := 1 to 5 do\n    if usernames[i] = inputUsername then\n    begin\n      unique := false;\n      break;\n    end;\n\n  if unique then\n    writeln('The username is unique.')\n  else\n    writeln('The username already exists.');\nend.\n```"
  },
  {
    "task": "Build a tool that checks if a job applicant meets all the listed qualifications.",
    "code": "```pascal\nprogram JobApplicantQualifications;\n\nvar\n  hasDegree, hasExperience, knowsProgramming: Boolean;\n  meetsQualifications: Boolean;\n\nbegin\n  { Example values for the applicant's qualifications }\n  hasDegree := True;\n  hasExperience := False;\n  knowsProgramming := True;\n  \n  { Check if the applicant meets all the qualifications }\n  meetsQualifications := hasDegree and hasExperience and knowsProgramming;\n  \n  if meetsQualifications then\n    writeln('Applicant meets all the qualifications.')\n  else\n    writeln('Applicant does not meet all the qualifications.');\nend.\n```"
  },
  {
    "task": "Write a feature to see if a vehicle's speed exceeds the speed limit.",
    "code": "```pascal\nprogram SpeedCheck;\n\nvar\n  vehicleSpeed, speedLimit: Integer;\n  isSpeeding: Boolean;\n\nbegin\n  (* Example values *)\n  vehicleSpeed := 80;\n  speedLimit := 60;\n\n  isSpeeding := vehicleSpeed > speedLimit;\n\n  if isSpeeding then\n    writeln('The vehicle is exceeding the speed limit.')\n  else\n    writeln('The vehicle is within the speed limit.');\nend.\n```"
  },
  {
    "task": "Design a system that determines whether a given point is above or below the x-axis.",
    "code": "```pascal\nprogram PointPosition;\n\nvar\n  y: Real;\n\nbegin\n  Write('Enter the y-coordinate of the point: ');\n  ReadLn(y);\n  \n  if y > 0 then\n    WriteLn('The point is above the x-axis.')\n  else if y < 0 then\n    WriteLn('The point is below the x-axis.')\n  else\n    WriteLn('The point is on the x-axis.');\nend.\n```"
  },
  {
    "task": "Create a function that checks if a given word appears in a sentence.",
    "code": "```pascal\nprogram WordInSentence;\n\nfunction ContainsWord(sentence, word: string): Boolean;\nbegin\n  if Pos(word, sentence) > 0 then\n    ContainsWord := True\n  else\n    ContainsWord := False;\nend;\n\nvar\n  sentence, word: string;\nbegin\n  sentence := 'This is a sample sentence.';\n  word := 'sample';\n  if ContainsWord(sentence, word) then\n    WriteLn('The word \"', word, '\" appears in the sentence.')\n  else\n    WriteLn('The word \"', word, '\" does not appear in the sentence.');\nend.\n```"
  },
  {
    "task": "Implement a program that identifies whether a given number is negative or positive.",
    "code": "```pascal\nprogram IdentifyNumberSign;\nuses crt;\n\nvar\n  number: integer;\n\nbegin\n  clrscr;\n  write('Enter a number: ');\n  readln(number);\n\n  if number > 0 then\n    writeln('The number is positive.')\n  else if number < 0 then\n    writeln('The number is negative.')\n  else\n    writeln('The number is zero.');\n\n  readln;\nend.\n```"
  },
  {
    "task": "Write a script to see if the sum of two numbers is greater than 100.",
    "code": "```pascal\nprogram CompareSum;\n\nvar\n  num1, num2, sum: Integer;\n\nbegin\n  num1 := 45;\n  num2 := 60;\n  sum := num1 + num2;\n  \n  if sum > 100 then\n    writeln('The sum is greater than 100')\n  else\n    writeln('The sum is not greater than 100');\nend.\n```"
  },
  {
    "task": "Build a utility that checks if a file exists in a specified directory.",
    "code": "```pascal\nprogram CheckFileExists;\n\nuses\n  SysUtils;\n\nvar\n  fileName, directory: string;\n  fullPath: string;\n\nbegin\n  Write('Enter the directory: ');\n  Readln(directory);\n  Write('Enter the file name: ');\n  Readln(fileName);\n  \n  fullPath := IncludeTrailingPathDelimiter(directory) + fileName;\n  \n  if FileExists(fullPath) then\n    Writeln('The file exists.')\n  else\n    Writeln('The file does not exist.');\nend.\n```"
  },
  {
    "task": "Develop a system to compare the weights of two different objects.",
    "code": "```pascal\nprogram CompareWeights;\n\nvar\n  weight1, weight2: Real;\n\nbegin\n  writeln('Enter the weight of the first object:');\n  readln(weight1);\n  \n  writeln('Enter the weight of the second object:');\n  readln(weight2);\n  \n  if weight1 > weight2 then\n    writeln('The first object is heavier.')\n  else if weight1 < weight2 then\n    writeln('The second object is heavier.')\n  else\n    writeln('Both objects weigh the same.');\nend.\n```"
  },
  {
    "task": "Create a logic to determine if a number falls within a defined range.",
    "code": "```pascal\nprogram CheckNumberInRange;\n\nvar\n  number, lowerBound, upperBound: Integer;\n  isInRange: Boolean;\n\nbegin\n  lowerBound := 10;\n  upperBound := 20;\n  number := 15; { You can change this number to test }\n\n  isInRange := (number >= lowerBound) and (number <= upperBound);\n\n  if isInRange then\n    WriteLn('Number is within the range.')\n  else\n    WriteLn('Number is outside the range.');\nend.\n```"
  },
  {
    "task": "Design a program that checks if an employee worked overtime based on hours worked.",
    "code": "```pascal\nprogram CheckOvertime;\n\nvar\n  hoursWorked: Integer;\n  overtimeThreshold: Integer;\n\nbegin\n  overtimeThreshold := 40; { assuming 40 hours is the standard work week }\n  Write('Enter hours worked: ');\n  ReadLn(hoursWorked);\n  \n  if hoursWorked > overtimeThreshold then\n    WriteLn('The employee worked overtime.')\n  else\n    WriteLn('The employee did not work overtime.');\nend.\n```"
  },
  {
    "task": "Write a function to compare two dates and determine which is earlier.",
    "code": "```pascal\nprogram CompareDates;\n\ntype\n  TDate = record\n    Year: Integer;\n    Month: Integer;\n    Day: Integer;\n  end;\n\nfunction IsEarlierDate(Date1, Date2: TDate): Integer;\nbegin\n  if Date1.Year < Date2.Year then\n    IsEarlierDate := -1\n  else if Date1.Year > Date2.Year then\n    IsEarlierDate := 1\n  else if Date1.Month < Date2.Month then\n    IsEarlierDate := -1\n  else if Date1.Month > Date2.Month then\n    IsEarlierDate := 1\n  else if Date1.Day < Date2.Day then\n    IsEarlierDate := -1\n  else if Date1.Day > Date2.Day then\n    IsEarlierDate := 1\n  else\n    IsEarlierDate := 0;\nend;\n\nvar\n  Date1, Date2: TDate;\n  Result: Integer;\nbegin\n  Date1.Year := 2023;\n  Date1.Month := 10;\n  Date1.Day := 5;\n\n  Date2.Year := 2023;\n  Date2.Month := 10;\n  Date2.Day := 6;\n\n  Result := IsEarlierDate(Date1, Date2);\n  writeln(Result);  { Output will be -1 if Date1 is earlier, 1 if Date2 is earlier, 0 if they are the same }\nend.\n```"
  },
  {
    "task": "Create a script that verifies if a given word starts with a vowel.",
    "code": "```pascal\nprogram CheckStartsWithVowel;\n\nuses SysUtils;\n\nfunction StartsWithVowel(word: string): Boolean;\nvar\n  firstChar: Char;\nbegin\n  word := LowerCase(word);\n  firstChar := word[1];\n  StartsWithVowel := (firstChar = 'a') or (firstChar = 'e') or\n                     (firstChar = 'i') or (firstChar = 'o') or\n                     (firstChar = 'u');\nend;\n\nvar\n  word: string;\nbegin\n  Write('Enter a word: ');\n  ReadLn(word);\n  if StartsWithVowel(word) then\n    WriteLn('The word starts with a vowel.')\n  else\n    WriteLn('The word does not start with a vowel.');\nend.\n```"
  },
  {
    "task": "Build a utility that checks if a number is even or odd.",
    "code": "```pascal\nprogram EvenOrOdd;\n\nuses\n  SysUtils;\n\nvar\n  number: Integer;\n\nbegin\n  Write('Enter a number: ');\n  ReadLn(number);\n  \n  if number mod 2 = 0 then\n    WriteLn('The number ', number, ' is even.')\n  else\n    WriteLn('The number ', number, ' is odd.');\nend.\n```"
  },
  {
    "task": "Implement a system that determines if a string contains only numeric characters.",
    "code": "```pascal\nprogram NumericStringCheck;\n\nfunction IsNumeric(s: string): Boolean;\nvar\n  i: Integer;\nbegin\n  for i := 1 to Length(s) do\n  begin\n    if not (s[i] in ['0'..'9']) then\n    begin\n      IsNumeric := False;\n      Exit;\n    end;\n  end;\n  IsNumeric := True;\nend;\n\nvar\n  input: string;\nbegin\n  Write('Enter a string: ');\n  ReadLn(input);\n  if IsNumeric(input) then\n    WriteLn('The string contains only numeric characters.')\n  else\n    WriteLn('The string does not contain only numeric characters.');\nend.\n```"
  },
  {
    "task": "Write a function to see if a given character is a vowel or consonant.",
    "code": "```pascal\nprogram VowelOrConsonant;\n\nfunction IsVowelOrConsonant(c: Char): String;\nbegin\n  c := UpCase(c);\n  if (c = 'A') or (c = 'E') or (c = 'I') or (c = 'O') or (c = 'U') then\n    IsVowelOrConsonant := 'Vowel'\n  else\n    IsVowelOrConsonant := 'Consonant';\nend;\n\nvar\n  ch: Char;\n  result: String;\nbegin\n  Write('Enter a character: ');\n  ReadLn(ch);\n  result := IsVowelOrConsonant(ch);\n  WriteLn('The character ', ch, ' is a ', result);\nend.\n```"
  },
  {
    "task": "Create a program that checks if a point lies within a specified rectangle.",
    "code": "```pascal\nprogram PointInRectangle;\n\nvar\n  x, y: Integer; // Coordinates of the point\n  x1, y1, x2, y2: Integer; // Coordinates of the rectangle\n\nbegin\n  // Input the point coordinates\n  Write('Enter the point coordinates (x, y): ');\n  ReadLn(x, y);\n\n  // Input the rectangle coordinates\n  Write('Enter the rectangle top-left (x1, y1) and bottom-right (x2, y2) coordinates: ');\n  ReadLn(x1, y1, x2, y2);\n\n  // Check if the point is inside the rectangle\n  if (x >= x1) and (x <= x2) and (y >= y1) and (y <= y2) then\n    WriteLn('The point is inside the rectangle.')\n  else\n    WriteLn('The point is outside the rectangle.');\nend.\n```"
  },
  {
    "task": "Develop a feature to compare two lists and return the common elements.",
    "code": "```pascal\nprogram FindCommonElements;\n\nuses SysUtils;\n\ntype\n  TIntArray = array of Integer;\n\nfunction FindCommon(const List1, List2: TIntArray): TIntArray;\nvar\n  CommonElements: TIntArray;\n  i, j, Index: Integer;\nbegin\n  SetLength(CommonElements, 0);\n  Index := 0;\n  for i := 0 to High(List1) do\n  begin\n    for j := 0 to High(List2) do\n    begin\n      if List1[i] = List2[j] then\n      begin\n        SetLength(CommonElements, Index + 1);\n        CommonElements[Index] := List1[i];\n        Inc(Index);\n        Break;\n      end;\n    end;\n  end;\n  Result := CommonElements;\nend;\n\nvar\n  List1, List2, Common: TIntArray;\n  i: Integer;\nbegin\n  List1 := TIntArray.Create(1, 2, 3, 4, 5);\n  List2 := TIntArray.Create(3, 4, 5, 6, 7);\n\n  Common := FindCommon(List1, List2);\n\n  for i := 0 to High(Common) do\n    WriteLn(Common[i]);\nend.\n```"
  },
  {
    "task": "Design a function that determines if a text contains any uppercase letters.",
    "code": "```pascal\nprogram UppercaseCheck;\n\nfunction ContainsUppercase(const text: string): Boolean;\nvar\n  i: Integer;\nbegin\n  ContainsUppercase := False;\n  for i := 1 to Length(text) do\n  begin\n    if (text[i] >= 'A') and (text[i] <= 'Z') then\n    begin\n      ContainsUppercase := True;\n      Exit;\n    end;\n  end;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Implement a script to check if a given sentence is a question.",
    "code": "```pascal\nprogram CheckIfQuestion;\n\nuses SysUtils;\n\nfunction IsQuestion(sentence: string): Boolean;\nbegin\n    if (Length(sentence) > 0) and (sentence[Length(sentence)] = '?') then\n        IsQuestion := True\n    else\n        IsQuestion := False;\nend;\n\nvar\n    input: string;\nbegin\n    Write('Enter a sentence: ');\n    ReadLn(input);\n    if IsQuestion(input) then\n        WriteLn('The sentence is a question.')\n    else\n        WriteLn('The sentence is not a question.');\nend.\n```"
  },
  {
    "task": "Write a program to determine if a temperature is measured in Celsius or Fahrenheit.",
    "code": "```pascal\nprogram TemperatureCheck;\n\nvar\n  temp: Real;\n  tempType: String;\n\nbegin\n  Write('Enter temperature value: ');\n  ReadLn(temp);\n  Write('Enter temperature type (C for Celsius, F for Fahrenheit): ');\n  ReadLn(tempType);\n  \n  if (tempType = 'C') or (tempType = 'c') then\n    WriteLn('The temperature is in Celsius.')\n  else if (tempType = 'F') or (tempType = 'f') then\n    WriteLn('The temperature is in Fahrenheit.')\n  else\n    WriteLn('Invalid temperature type.');\nend.\n```"
  },
  {
    "task": "Create a system that verifies if a student is enrolled in a particular course.",
    "code": "```pascal\nprogram EnrollmentCheck;\n\ntype\n  Student = record\n    name: string;\n    enrolledCourses: array of string;\n  end;\n\nfunction IsEnrolled(student: Student; course: string): boolean;\nvar\n  i: integer;\nbegin\n  IsEnrolled := False;\n  for i := 0 to High(student.enrolledCourses) do\n    if student.enrolledCourses[i] = course then\n    begin\n      IsEnrolled := True;\n      Break;\n    end;\nend;\n\nvar\n  student1: Student;\n  courseToCheck: string;\nbegin\n  student1.name := 'John Doe';\n  student1.enrolledCourses := ['Math', 'Science', 'History'];\n\n  courseToCheck := 'Science';\n\n  if IsEnrolled(student1, courseToCheck) then\n    writeln(student1.name, ' is enrolled in ', courseToCheck)\n  else\n    writeln(student1.name, ' is not enrolled in ', courseToCheck);\nend.\n```"
  },
  {
    "task": "Build a utility to check if a given string is a valid hexadecimal number.",
    "code": "```pascal\nprogram HexadecimalValidator;\n\nuses SysUtils;\n\nfunction IsHexadecimal(const S: string): Boolean;\nvar\n  I: Integer;\nbegin\n  Result := (Length(S) > 0);\n  for I := 1 to Length(S) do\n    if not (UpCase(S[I]) in ['0'..'9', 'A'..'F']) then\n    begin\n      Result := False;\n      Exit;\n    end;\nend;\n\nvar\n  Input: string;\nbegin\n  Write('Enter a string to check if it is a valid hexadecimal number: ');\n  ReadLn(Input);\n  if IsHexadecimal(Input) then\n    WriteLn('The string is a valid hexadecimal number.')\n  else\n    WriteLn('The string is not a valid hexadecimal number.');\nend.\n```"
  },
  {
    "task": "Write a function to see if two circles intersect based on their radii and center points.",
    "code": "```pascal\nprogram CircleIntersection;\n\ntype\n  TPoint = record\n    x: Real;\n    y: Real;\n  end;\n\nfunction CirclesIntersect(center1, center2: TPoint; radius1, radius2: Real): Boolean;\nvar\n  distanceSquared, radiusSum: Real;\nbegin\n  distanceSquared := Sqr(center2.x - center1.x) + Sqr(center2.y - center1.y);\n  radiusSum := radius1 + radius2;\n  CirclesIntersect := distanceSquared <= Sqr(radiusSum);\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Develop a program that checks if a given number is within 10% of another number.",
    "code": "```pascal\nprogram WithinTenPercent;\n\nvar\n  num1, num2: Real;\n  tolerance: Real;\n\nbegin\n  writeln('Enter the first number:');\n  readln(num1);\n  writeln('Enter the second number:');\n  readln(num2);\n\n  tolerance := num1 * 0.1;\n\n  if (num2 >= (num1 - tolerance)) and (num2 <= (num1 + tolerance)) then\n    writeln('The second number is within 10% of the first number.')\n  else\n    writeln('The second number is not within 10% of the first number.');\nend.\n```"
  },
  {
    "task": "Create a feature to determine if a character is alphanumeric.",
    "code": "```pascal\nprogram IsAlphanumeric;\n\nuses\n  SysUtils;\n\nfunction IsAlphanumeric(ch: Char): Boolean;\nbegin\n  Result := (ch >= '0') and (ch <= '9') or \n            (ch >= 'A') and (ch <= 'Z') or \n            (ch >= 'a') and (ch <= 'z');\nend;\n\nvar\n  ch: Char;\nbegin\n  Write('Enter a character: ');\n  ReadLn(ch);\n  if IsAlphanumeric(ch) then\n    WriteLn(ch, ' is alphanumeric.')\n  else\n    WriteLn(ch, ' is not alphanumeric.');\nend.\n```"
  },
  {
    "task": "Implement a system to compare the profit margins of two products.",
    "code": "```pascal\nprogram CompareProfitMargins;\n\nvar\n  profitMargin1, profitMargin2: Real;\n\nbegin\n  { Initialize profit margins for two products }\n  profitMargin1 := 0.35; { Example profit margin for product 1 }\n  profitMargin2 := 0.25; { Example profit margin for product 2 }\n  \n  { Compare profit margins }\n  if profitMargin1 > profitMargin2 then\n    writeln('Product 1 has a higher profit margin.')\n  else if profitMargin1 < profitMargin2 then\n    writeln('Product 2 has a higher profit margin.')\n  else\n    writeln('Both products have the same profit margin.');\nend.\n```"
  },
  {
    "task": "Design a script to check if a given string contains any special characters.",
    "code": "```pascal\nprogram CheckSpecialCharacters;\n\nuses\n  SysUtils;\n\nfunction HasSpecialCharacters(const str: string): Boolean;\nvar\n  i: Integer;\nbegin\n  for i := 1 to Length(str) do\n  begin\n    if not (str[i] in ['A'..'Z', 'a'..'z', '0'..'9']) then\n    begin\n      Result := True;\n      Exit;\n    end;\n  end;\n  Result := False;\nend;\n\nvar\n  userInput: string;\nbegin\n  Write('Enter a string: ');\n  ReadLn(userInput);\n\n  if HasSpecialCharacters(userInput) then\n    WriteLn('The string contains special characters.')\n  else\n    WriteLn('The string does not contain special characters.');\nend.\n```"
  },
  {
    "task": "Write a function to verify if a number is a multiple of another number.",
    "code": "```pascal\nprogram MultipleCheck;\n\nfunction IsMultiple(a, b: Integer): Boolean;\nbegin\n  if b = 0 then\n    IsMultiple := False\n  else\n    IsMultiple := a mod b = 0;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Create a program that checks if a date is a holiday based on a list of holidays.",
    "code": "```pascal\nprogram CheckHoliday;\n\nuses\n  SysUtils;\n\ntype\n  TDateArray = array of TDateTime;\n\nfunction IsHoliday(date: TDateTime; holidays: TDateArray): Boolean;\nvar\n  i: Integer;\nbegin\n  Result := False;\n  for i := 0 to High(holidays) do\n  begin\n    if date = holidays[i] then\n    begin\n      Result := True;\n      Break;\n    end;\n  end;\nend;\n\nvar\n  holidays: TDateArray;\n  today: TDateTime;\nbegin\n  // Example list of holidays\n  holidays := [EncodeDate(2023, 1, 1), EncodeDate(2023, 12, 25)];\n\n  // Check today's date\n  today := Date;\n\n  if IsHoliday(today, holidays) then\n    WriteLn('Today is a holiday!')\n  else\n    WriteLn('Today is not a holiday.');\nend.\n```"
  },
  {
    "task": "Build a utility to compare two text files and highlight the differences.",
    "code": "```pascal\nprogram CompareTextFiles;\n\nuses\n  SysUtils;\n\nfunction FileToStringList(const FileName: string): TStringList;\nvar\n  List: TStringList;\nbegin\n  List := TStringList.Create;\n  try\n    List.LoadFromFile(FileName);\n    Result := List;\n  except\n    List.Free;\n    raise;\n  end;\nend;\n\nprocedure HighlightDifferences(const FileName1, FileName2: string);\nvar\n  List1, List2: TStringList;\n  i, MaxLines: Integer;\nbegin\n  List1 := FileToStringList(FileName1);\n  List2 := FileToStringList(FileName2);\n  try\n    MaxLines := Max(List1.Count, List2.Count);\n    for i := 0 to MaxLines - 1 do\n    begin\n      if (i < List1.Count) and (i < List2.Count) then\n      begin\n        if List1[i] <> List2[i] then\n          WriteLn('Difference at line ', i + 1, ': ', List1[i], ' <> ', List2[i]);\n      end\n      else if i < List1.Count then\n        WriteLn('Extra line in ', FileName1, ' at line ', i + 1, ': ', List1[i])\n      else if i < List2.Count then\n        WriteLn('Extra line in ', FileName2, ' at line ', i + 1, ': ', List2[i]);\n    end;\n  finally\n    List1.Free;\n    List2.Free;\n  end;\nend;\n\nbegin\n  if ParamCount <> 2 then\n  begin\n    WriteLn('Usage: CompareTextFiles <File1> <File2>');\n    Exit;\n  end;\n  HighlightDifferences(ParamStr(1), ParamStr(2));\nend.\n```"
  },
  {
    "task": "Develop a function to determine if a given password is strong based on length and character diversity.",
    "code": "```pascal\nprogram PasswordStrengthChecker;\n\nuses\n  SysUtils;\n\nfunction IsStrongPassword(password: string): Boolean;\nvar\n  hasUpper, hasLower, hasDigit, hasSpecial: Boolean;\n  i: Integer;\nbegin\n  hasUpper := False;\n  hasLower := False;\n  hasDigit := False;\n  hasSpecial := False;\n\n  if Length(password) < 8 then\n  begin\n    IsStrongPassword := False;\n    Exit;\n  end;\n\n  for i := 1 to Length(password) do\n  begin\n    if password[i] in ['A'..'Z'] then\n      hasUpper := True\n    else if password[i] in ['a'..'z'] then\n      hasLower := True\n    else if password[i] in ['0'..'9'] then\n      hasDigit := True\n    else\n      hasSpecial := True;\n  end;\n\n  IsStrongPassword := hasUpper and hasLower and hasDigit and hasSpecial;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Write a script to see if a number is within a specified distance from zero.",
    "code": "```pascal\nprogram DistanceFromZero;\n\nvar\n  number, distance: Real;\n\nbegin\n  Write('Enter a number: ');\n  ReadLn(number);\n  Write('Enter the distance: ');\n  ReadLn(distance);\n\n  if (number >= -distance) and (number <= distance) then\n    WriteLn('The number is within the specified distance from zero.')\n  else\n    WriteLn('The number is not within the specified distance from zero.');\nend.\n```"
  },
  {
    "task": "Create a system to check if a book title is available in a library database.",
    "code": "```pascal\nprogram LibraryCheck;\n\nuses SysUtils;\n\nvar\n  titles: array[1..5] of string;\n  inputTitle: string;\n  available: Boolean;\n  i: Integer;\n\nbegin\n  titles[1] := 'The Great Gatsby';\n  titles[2] := '1984';\n  titles[3] := 'To Kill a Mockingbird';\n  titles[4] := 'Pride and Prejudice';\n  titles[5] := 'Moby Dick';\n\n  Write('Enter the title of the book to check: ');\n  ReadLn(inputTitle);\n\n  available := False;\n  for i := 1 to Length(titles) do\n  begin\n    if CompareText(titles[i], inputTitle) = 0 then\n    begin\n      available := True;\n      Break;\n    end;\n  end;\n\n  if available then\n    WriteLn('The book \"', inputTitle, '\" is available in the library.')\n  else\n    WriteLn('The book \"', inputTitle, '\" is not available in the library.');\nend.\n```"
  },
  {
    "task": "Implement a feature that determines if a user has administrator privileges.",
    "code": "```pascal\nprogram CheckAdminPrivileges;\n\nvar\n  isAdmin: Boolean;\n  userRole: String;\n\nbegin\n  userRole := 'admin'; (* Example role, typically this would be provided by some input or system state *)\n\n  isAdmin := userRole = 'admin';\n\n  if isAdmin then\n    writeln('User has administrator privileges.')\n  else\n    writeln('User does not have administrator privileges.');\nend.\n```"
  },
  {
    "task": "Design a function to compare the brightness of two colors.",
    "code": "```pascal\nprogram CompareColorBrightness;\n\ntype\n  TColor = record\n    r, g, b: Integer;\n  end;\n\nfunction BrightnessComparison(color1, color2: TColor): Integer;\nvar\n  brightness1, brightness2: Integer;\nbegin\n  brightness1 := (color1.r * 299 + color1.g * 587 + color1.b * 114) div 1000;\n  brightness2 := (color2.r * 299 + color2.g * 587 + color2.b * 114) div 1000;\n  \n  if brightness1 > brightness2 then\n    BrightnessComparison := 1\n  else if brightness1 < brightness2 then\n    BrightnessComparison := -1\n  else\n    BrightnessComparison := 0;\nend;\n\nvar\n  colorA, colorB: TColor;\n  result: Integer;\nbegin\n  colorA.r := 100; colorA.g := 150; colorA.b := 200;\n  colorB.r := 120; colorB.g := 130; colorB.b := 140;\n\n  result := BrightnessComparison(colorA, colorB);\n\n  if result = 1 then\n    writeln('Color A is brighter')\n  else if result = -1 then\n    writeln('Color B is brighter')\n  else\n    writeln('Both colors have the same brightness');\nend.\n```"
  },
  {
    "task": "Write a program to verify if a number is a valid credit card number using the Luhn algorithm.",
    "code": "```pascal\nprogram ValidateCreditCard;\n\nuses SysUtils;\n\nfunction LuhnCheck(cardNumber: string): Boolean;\nvar\n  sum, digit, len, i: Integer;\n  doubleDigit: Boolean;\nbegin\n  sum := 0;\n  doubleDigit := False;\n  len := Length(cardNumber);\n\n  for i := len downto 1 do\n  begin\n    digit := Ord(cardNumber[i]) - Ord('0');\n\n    if doubleDigit then\n    begin\n      digit := digit * 2;\n      if digit > 9 then\n        digit := digit - 9;\n    end;\n\n    sum := sum + digit;\n    doubleDigit := not doubleDigit;\n  end;\n\n  Result := (sum mod 10 = 0);\nend;\n\nvar\n  cardNumber: string;\nbegin\n  Write('Enter the credit card number: ');\n  ReadLn(cardNumber);\n\n  if LuhnCheck(cardNumber) then\n    WriteLn('The credit card number is valid.')\n  else\n    WriteLn('The credit card number is invalid.');\nend.\n```"
  },
  {
    "task": "Create a script to determine if a given string is a valid IP address.",
    "code": "```pascal\nprogram ValidateIPAddress;\n\nuses\n  SysUtils;\n\nfunction IsValidIP(const ip: string): Boolean;\nvar\n  i, partValue, dotCount: Integer;\n  part: string;\nbegin\n  dotCount := 0;\n  part := '';\n  IsValidIP := False;\n  \n  for i := 1 to Length(ip) do\n  begin\n    if ip[i] = '.' then\n    begin\n      Inc(dotCount);\n      if (dotCount > 3) or (Length(part) = 0) then Exit;\n      partValue := StrToIntDef(part, -1);\n      if (partValue < 0) or (partValue > 255) then Exit;\n      part := '';\n    end\n    else if not (ip[i] in ['0'..'9']) then\n    begin\n      Exit;\n    end\n    else\n    begin\n      part := part + ip[i];\n      if Length(part) > 3 then Exit;\n    end;\n  end;\n\n  if (dotCount <> 3) or (Length(part) = 0) then Exit;\n  partValue := StrToIntDef(part, -1);\n  if (partValue < 0) or (partValue > 255) then Exit;\n  \n  IsValidIP := True;\nend;\n\nvar\n  ipAddress: string;\nbegin\n  Write('Enter an IP address: ');\n  ReadLn(ipAddress);\n  if IsValidIP(ipAddress) then\n    WriteLn('The IP address is valid.')\n  else\n    WriteLn('The IP address is not valid.');\nend.\n```"
  },
  {
    "task": "Build a utility that checks if a number is part of an arithmetic sequence.",
    "code": "```pascal\nprogram ArithmeticSequenceChecker;\n\nfunction IsPartOfArithmeticSequence(a, d, n, x: Integer): Boolean;\nvar\n  i, term: Integer;\nbegin\n  IsPartOfArithmeticSequence := False;\n  for i := 0 to n - 1 do\n  begin\n    term := a + i * d;\n    if term = x then\n    begin\n      IsPartOfArithmeticSequence := True;\n      Exit;\n    end;\n  end;\nend;\n\nvar\n  start, diff, count, number: Integer;\n  result: Boolean;\nbegin\n  { Example input }\n  start := 2;\n  diff := 3;\n  count := 10;\n  number := 11;\n  \n  result := IsPartOfArithmeticSequence(start, diff, count, number);\n  \n  if result then\n    WriteLn('The number is part of the arithmetic sequence.')\n  else\n    WriteLn('The number is not part of the arithmetic sequence.');\nend.\n```"
  },
  {
    "task": "Develop a feature to compare the efficiency of two algorithms based on time complexity.",
    "code": "```pascal\nprogram CompareAlgorithms;\n\nuses SysUtils;\n\nfunction Algorithm1TimeComplexity(n: Integer): Integer;\nbegin\n  // Example: O(n^2)\n  Result := n * n;\nend;\n\nfunction Algorithm2TimeComplexity(n: Integer): Integer;\nbegin\n  // Example: O(n log n)\n  Result := n * Trunc(Log2(n));\nend;\n\nprocedure CompareTimeComplexity(n: Integer);\nvar\n  time1, time2: Integer;\nbegin\n  time1 := Algorithm1TimeComplexity(n);\n  time2 := Algorithm2TimeComplexity(n);\n\n  if time1 < time2 then\n    WriteLn('Algorithm 1 is more efficient')\n  else if time1 > time2 then\n    WriteLn('Algorithm 2 is more efficient')\n  else\n    WriteLn('Both algorithms have the same efficiency');\nend;\n\nvar\n  n: Integer;\nbegin\n  Write('Enter a value for n: ');\n  ReadLn(n);\n  CompareTimeComplexity(n);\nend.\n```"
  },
  {
    "task": "Write a function to see if a given date falls in a leap year.",
    "code": "```pascal\nprogram LeapYearCheck;\n\nfunction IsLeapYear(year: Integer): Boolean;\nbegin\n    if (year mod 4 = 0) and ((year mod 100 <> 0) or (year mod 400 = 0)) then\n        IsLeapYear := True\n    else\n        IsLeapYear := False;\nend;\n\nfunction DateInLeapYear(day, month, year: Integer): Boolean;\nbegin\n    DateInLeapYear := IsLeapYear(year);\nend;\n\nvar\n    day, month, year: Integer;\nbegin\n    day := 29;\n    month := 2;\n    year := 2024;\n    if DateInLeapYear(day, month, year) then\n        WriteLn('The date falls in a leap year.')\n    else\n        WriteLn('The date does not fall in a leap year.');\nend.\n```"
  },
  {
    "task": "Create a program that determines if a user's subscription is active based on the current date.",
    "code": "```pascal\nprogram SubscriptionStatus;\n\nuses\n  SysUtils;\n\nvar\n  currentDate, expirationDate: TDateTime;\n  isActive: Boolean;\n\nbegin\n  currentDate := Now;\n  expirationDate := EncodeDate(2023, 12, 31); // Example expiration date\n\n  isActive := currentDate <= expirationDate;\n\n  if isActive then\n    Writeln('Your subscription is active.')\n  else\n    Writeln('Your subscription has expired.');\nend.\n```"
  },
  {
    "task": "Design a tool to check if a user\u2019s input is a palindrome phrase, ignoring spaces and punctuation.",
    "code": "```pascal\nprogram PalindromeChecker;\n\nuses\n  SysUtils;\n\nfunction IsPalindrome(phrase: string): Boolean;\nvar\n  i, j: Integer;\n  cleanedPhrase: string;\nbegin\n  cleanedPhrase := '';\n  for i := 1 to Length(phrase) do\n    if phrase[i] in ['a'..'z', 'A'..'Z', '0'..'9'] then\n      cleanedPhrase := cleanedPhrase + LowerCase(phrase[i]);\n  \n  i := 1;\n  j := Length(cleanedPhrase);\n  while (i < j) do\n  begin\n    if cleanedPhrase[i] <> cleanedPhrase[j] then\n    begin\n      Result := False;\n      Exit;\n    end;\n    Inc(i);\n    Dec(j);\n  end;\n  Result := True;\nend;\n\nvar\n  userInput: string;\nbegin\n  Write('Enter a phrase: ');\n  ReadLn(userInput);\n  \n  if IsPalindrome(userInput) then\n    WriteLn('The input is a palindrome.')\n  else\n    WriteLn('The input is not a palindrome.');\nend.\n```"
  },
  {
    "task": "Implement a system to verify if a given number is part of the Fibonacci sequence.",
    "code": "```pascal\nprogram FibonacciCheck;\n\nfunction IsPerfectSquare(x: LongInt): Boolean;\nvar\n  s: LongInt;\nbegin\n  s := Trunc(Sqrt(x));\n  IsPerfectSquare := s * s = x;\nend;\n\nfunction IsFibonacci(n: LongInt): Boolean;\nbegin\n  IsFibonacci := IsPerfectSquare(5 * n * n + 4) or IsPerfectSquare(5 * n * n - 4);\nend;\n\nvar\n  number: LongInt;\nbegin\n  Write('Enter a number: ');\n  ReadLn(number);\n  \n  if IsFibonacci(number) then\n    WriteLn(number, ' is a Fibonacci number.')\n  else\n    WriteLn(number, ' is not a Fibonacci number.')\nend.\n```"
  },
  {
    "task": "Write a program to compare the elevation of two geographic locations.",
    "code": "```pascal\nprogram CompareElevations;\n\nvar\n  elevation1, elevation2: real;\n\nbegin\n  writeln('Enter the elevation of the first location:');\n  readln(elevation1);\n  writeln('Enter the elevation of the second location:');\n  readln(elevation2);\n\n  if elevation1 > elevation2 then\n    writeln('The first location is higher.')\n  else if elevation1 < elevation2 then\n    writeln('The second location is higher.')\n  else\n    writeln('Both locations have the same elevation.');\nend.\n```"
  },
  {
    "task": "Create a function to determine if a given string is a valid JSON format.",
    "code": "```pascal\nprogram CheckValidJSON;\n\nuses\n  SysUtils, fpjson, jsonparser;\n\nfunction IsValidJSON(const S: string): Boolean;\nvar\n  JSONData: TJSONData;\nbegin\n  Result := False;\n  try\n    JSONData := GetJSON(S);\n    Result := True;\n  except\n    on E: Exception do\n      Result := False;\n  end;\n  JSONData.Free;\nend;\n\nbegin\nend.\n```"
  },
  {
    "task": "Build a utility that checks if a number is a factorial of any integer.",
    "code": "```pascal\nprogram CheckFactorial;\n\nfunction IsFactorial(num: LongInt): Boolean;\nvar\n  i, fact: LongInt;\nbegin\n  fact := 1;\n  i := 1;\n  while fact < num do\n  begin\n    Inc(i);\n    fact := fact * i;\n  end;\n  IsFactorial := (fact = num);\nend;\n\nvar\n  number: LongInt;\nbegin\n  Write('Enter a number: ');\n  ReadLn(number);\n  if IsFactorial(number) then\n    WriteLn(number, ' is a factorial of some integer.')\n  else\n    WriteLn(number, ' is not a factorial of any integer.');\nend.\n```"
  },
  {
    "task": "Develop a feature to compare the widths of two ribbons and return the wider one.",
    "code": "```pascal\nprogram CompareRibbons;\n\nfunction GetWiderRibbon(width1, width2: Integer): Integer;\nbegin\n  if width1 > width2 then\n    GetWiderRibbon := width1\n  else\n    GetWiderRibbon := width2;\nend;\n\nvar\n  ribbon1, ribbon2, widerRibbon: Integer;\nbegin\n  ribbon1 := 10;  { Example width for ribbon1 }\n  ribbon2 := 15;  { Example width for ribbon2 }\n  \n  widerRibbon := GetWiderRibbon(ribbon1, ribbon2);\n  \n  WriteLn('The wider ribbon has width: ', widerRibbon);\nend.\n```"
  },
  {
    "task": "Write a script to see if a word is present in a list of banned words.",
    "code": "```pascal\nprogram CheckBannedWord;\n\nuses SysUtils;\n\nvar\n  bannedWords: array of string;\n  wordToCheck: string;\n  isBanned: boolean;\n  i: Integer;\n\nbegin\n  bannedWords := ['spam', 'phishing', 'malware', 'scam'];\n  wordToCheck := 'spam';\n  isBanned := False;\n\n  for i := Low(bannedWords) to High(bannedWords) do\n  begin\n    if CompareText(bannedWords[i], wordToCheck) = 0 then\n    begin\n      isBanned := True;\n      Break;\n    end;\n  end;\n\n  if isBanned then\n    WriteLn('The word is banned.')\n  else\n    WriteLn('The word is not banned.');\nend.\n```"
  },
  {
    "task": "Design a system to determine if a patient's temperature is in the normal range.",
    "code": "```pascal\nprogram CheckTemperature;\n\nvar\n  temperature: real;\n  isNormal: boolean;\n\nbegin\n  writeln('Enter the patient''s temperature: ');\n  readln(temperature);\n\n  if (temperature >= 36.5) and (temperature <= 37.5) then\n    isNormal := true\n  else\n    isNormal := false;\n\n  if isNormal then\n    writeln('The temperature is in the normal range.')\n  else\n    writeln('The temperature is not in the normal range.');\nend.\n```"
  },
  {
    "task": "Create a program that checks if a given time is during business hours.",
    "code": "```pascal\nprogram BusinessHoursCheck;\n\nuses SysUtils;\n\nvar\n  inputTime: TDateTime;\n  hour, minute, second, millisecond: Word;\n  isBusinessHours: Boolean;\n\nbegin\n  Write('Enter time (hh:mm): ');\n  ReadLn(inputTime);\n  \n  DecodeTime(inputTime, hour, minute, second, millisecond);\n\n  isBusinessHours := (hour >= 9) and (hour < 17);\n\n  if isBusinessHours then\n    WriteLn('The time is during business hours.')\n  else\n    WriteLn('The time is outside business hours.');\nend.\n```"
  },
  {
    "task": "Implement a function to see if a number is a triangular number.",
    "code": "```pascal\nprogram TriangularNumberCheck;\n\nfunction IsTriangularNumber(n: Integer): Boolean;\nvar\n  sum, i: Integer;\nbegin\n  sum := 0;\n  i := 1;\n  while sum < n do\n  begin\n    sum := sum + i;\n    i := i + 1;\n  end;\n  IsTriangularNumber := (sum = n);\nend;\n\nvar\n  number: Integer;\nbegin\n  Write('Enter a number: ');\n  ReadLn(number);\n  if IsTriangularNumber(number) then\n    WriteLn(number, ' is a triangular number.')\n  else\n    WriteLn(number, ' is not a triangular number.')\nend.\n```"
  },
  {
    "task": "Write a feature to compare the number of vowels in two given strings.",
    "code": "```pascal\nprogram CompareVowels;\n\nuses\n  SysUtils;\n\nfunction CountVowels(s: string): Integer;\nvar\n  i, count: Integer;\nbegin\n  count := 0;\n  for i := 1 to Length(s) do\n    if Pos(LowerCase(s[i]), 'aeiou') > 0 then\n      Inc(count);\n  CountVowels := count;\nend;\n\nprocedure CompareStrings(s1, s2: string);\nvar\n  vowels1, vowels2: Integer;\nbegin\n  vowels1 := CountVowels(s1);\n  vowels2 := CountVowels(s2);\n\n  if vowels1 > vowels2 then\n    WriteLn('The first string has more vowels.')\n  else if vowels1 < vowels2 then\n    WriteLn('The second string has more vowels.')\n  else\n    WriteLn('Both strings have the same number of vowels.');\nend;\n\nbegin\n  CompareStrings('Hello', 'World');\nend.\n```"
  }
]