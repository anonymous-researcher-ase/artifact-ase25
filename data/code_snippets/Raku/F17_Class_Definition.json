[
  {
    "task": "Define a class representing a book with attributes for title, author, and number of pages, and a method to display the book's information.",
    "code": "```raku\nclass Book {\n    has Str $.title;\n    has Str $.author;\n    has Int $.pages;\n    \n    method display-info() {\n        say \"Title: \" ~ $.title;\n        say \"Author: \" ~ $.author;\n        say \"Pages: \" ~ $.pages;\n    }\n}\n```"
  },
  {
    "task": "Create a class for a bank account that includes attributes for account number, balance, and a method to deposit funds.",
    "code": "```raku\nclass BankAccount {\n    has $.account-number;\n    has $.balance;\n\n    method deposit($amount) {\n        $!balance += $amount;\n    }\n}\n```"
  },
  {
    "task": "Design a class for a vehicle with properties for make, model, and year, and a method to start the engine.",
    "code": "```raku\nclass Vehicle {\n    has Str $.make;\n    has Str $.model;\n    has Int $.year;\n\n    method start-engine() {\n        say \"The engine has started.\";\n    }\n}\n\n# Example usage:\n# my $car = Vehicle.new(make => 'Toyota', model => 'Corolla', year => 2022);\n# $car.start-engine();\n```"
  },
  {
    "task": "Implement a class that models a student with attributes for name, ID, and grades, and a method to calculate the GPA.",
    "code": "```raku\nclass Student {\n    has Str $.name;\n    has Int $.ID;\n    has @.grades;\n\n    method calculate-gpa() {\n        return @.grades.sum / @.grades.elems;\n    }\n}\n```"
  },
  {
    "task": "Construct a class for a rectangle that has attributes for width and height, and methods to calculate area and perimeter.",
    "code": "```raku\nclass Rectangle {\n    has $.width;\n    has $.height;\n\n    method area() {\n        return $.width * $.height;\n    }\n\n    method perimeter() {\n        return 2 * ($.width + $.height);\n    }\n}\n```"
  },
  {
    "task": "Formulate a class for a smartphone with properties for brand, model, and battery life, and a method to make a call.",
    "code": "```raku\nclass Smartphone {\n    has $.brand;\n    has $.model;\n    has $.battery-life;\n\n    method make-call($number) {\n        say \"Calling $number from $.brand $.model...\";\n    }\n}\n\nmy $phone = Smartphone.new(brand => 'ExampleBrand', model => 'ExampleModel', battery-life => '24h');\n$phone.make-call('123-456-7890');\n```"
  },
  {
    "task": "Build a class representing a movie with attributes for title, director, and duration, and a method to play the movie.",
    "code": "```raku\nclass Movie {\n    has Str $.title;\n    has Str $.director;\n    has Int $.duration;\n\n    method play() {\n        say \"Playing the movie: {$.title}\";\n    }\n}\n```"
  },
  {
    "task": "Create a class for an employee with attributes for name, position, and salary, and a method to display their profile.",
    "code": "```raku\nclass Employee {\n    has Str $.name;\n    has Str $.position;\n    has Num $.salary;\n\n    method display-profile() {\n        say \"Name: {$!name}\";\n        say \"Position: {$!position}\";\n        say \"Salary: {$!salary}\";\n    }\n}\n```"
  },
  {
    "task": "Design a class for a library that includes attributes for name, location, and books available, and a method to add a new book.",
    "code": "```raku\nclass Library {\n    has Str $.name;\n    has Str $.location;\n    has @.books;\n\n    method add-book(Str $book) {\n        @.books.push($book);\n    }\n}\n```"
  },
  {
    "task": "Develop a class for a shopping cart with properties for items and total cost, and methods to add and remove items.",
    "code": "```raku\nclass ShoppingCart {\n    has @.items;\n    has $.total-cost is rw = 0;\n\n    method add-item($item, $cost) {\n        @!items.push($item);\n        $!total-cost += $cost;\n    }\n\n    method remove-item($item, $cost) {\n        @!items .= grep(* ne $item);\n        $!total-cost -= $cost;\n    }\n}\n```"
  },
  {
    "task": "Implement a class for a thermostat with attributes for current temperature and desired temperature, and a method to adjust the temperature.",
    "code": "```raku\nclass Thermostat {\n    has $.current-temperature;\n    has $.desired-temperature;\n    \n    method adjust-temperature() {\n        if $!current-temperature < $!desired-temperature {\n            $!current-temperature++;\n        } elsif $!current-temperature > $!desired-temperature {\n            $!current-temperature--;\n        }\n    }\n}\n```"
  },
  {
    "task": "Formulate a class for a person with attributes for first name, last name, and age, and a method to return the full name.",
    "code": "```raku\nclass Person {\n    has Str $.first-name;\n    has Str $.last-name;\n    has Int $.age;\n\n    method full-name() {\n        return \"$.first-name $.last-name\";\n    }\n}\n```"
  },
  {
    "task": "Construct a class for a game character with properties for health, strength, and inventory, and a method to attack.",
    "code": "```raku\nclass GameCharacter {\n    has Int $.health;\n    has Int $.strength;\n    has @.inventory;\n\n    method attack($target, Int $damage) {\n        $target.health -= $damage;\n    }\n}\n```"
  },
  {
    "task": "Create a class for a calendar event with attributes for title, date, and location, and a method to reschedule the event.",
    "code": "```raku\nclass CalendarEvent {\n    has Str $.title;\n    has Date $.date;\n    has Str $.location;\n\n    method reschedule(Date $new-date) {\n        $!date = $new-date;\n    }\n}\n```"
  },
  {
    "task": "Design a class representing a song with properties for title, artist, and duration, and a method to play the song.",
    "code": "```raku\nclass Song {\n    has Str $.title;\n    has Str $.artist;\n    has Int $.duration;\n\n    method play() {\n        say \"Playing '$.title' by $.artist.\";\n    }\n}\n```"
  },
  {
    "task": "Develop a class for an order in an e-commerce system with attributes for order ID, customer, and items, and a method to calculate total price.",
    "code": "```raku\nclass Order {\n    has $.order-id;\n    has $.customer;\n    has @.items;\n\n    method total-price {\n        return [+] @.items.map(*.price);\n    }\n}\n```"
  },
  {
    "task": "Build a class for a social media post with attributes for content, author, and timestamp, and a method to like the post.",
    "code": "```raku\nclass SocialMediaPost {\n    has Str $.content;\n    has Str $.author;\n    has Instant $.timestamp;\n    has Int $!likes = 0;\n\n    method like() {\n        $!likes++;\n    }\n\n    method likes() {\n        return $!likes;\n    }\n}\n```"
  },
  {
    "task": "Create a class for a computer with properties for processor, RAM, and storage, and a method to display system specifications.",
    "code": "```raku\nclass Computer {\n    has $.processor;\n    has $.RAM;\n    has $.storage;\n\n    method display-specs {\n        say \"Processor: {$!processor}\";\n        say \"RAM: {$!RAM} GB\";\n        say \"Storage: {$!storage} GB\";\n    }\n}\n\n# Example usage\nmy $comp = Computer.new(processor => 'Intel i7', RAM => 16, storage => 512);\n$comp.display-specs;\n```"
  },
  {
    "task": "Implement a class for a restaurant menu item with attributes for name, price, and description, and a method to update the price.",
    "code": "```raku\nclass MenuItem {\n    has Str $.name;\n    has Num $.price;\n    has Str $.description;\n    \n    method update-price(Num $new-price) {\n        $!price = $new-price;\n    }\n}\n```"
  },
  {
    "task": "Design a class for a package delivery with attributes for tracking number, destination, and status, and a method to update the status.",
    "code": "```raku\nclass PackageDelivery {\n    has Str $.tracking-number;\n    has Str $.destination;\n    has Str $.status;\n\n    method update-status(Str $new-status) {\n        $!status = $new-status;\n    }\n}\n```"
  },
  {
    "task": "Construct a class representing a pet with attributes for species, age, and name, and a method to display its details.",
    "code": "```raku\nclass Pet {\n    has Str $.species;\n    has Int $.age;\n    has Str $.name;\n\n    method display-details() {\n        say \"Species: \" ~ $.species;\n        say \"Age: \" ~ $.age;\n        say \"Name: \" ~ $.name;\n    }\n}\n```"
  },
  {
    "task": "Formulate a class for a product in a store with properties for SKU, name, and price, and a method to apply a discount.",
    "code": "```raku\nclass Product {\n    has Str $.sku is rw;\n    has Str $.name is rw;\n    has Num $.price is rw;\n\n    method apply-discount(Num $percent) {\n        $.price *= (1 - $percent / 100);\n    }\n}\n```"
  },
  {
    "task": "Develop a class for a university course with attributes for course code, title, and credits, and a method to enroll a student.",
    "code": "```raku\nclass UniversityCourse {\n    has Str $.course-code;\n    has Str $.title;\n    has Int $.credits;\n    has @.students;\n\n    method enroll-student(Str $student-name) {\n        @!students.push($student-name);\n    }\n}\n```"
  },
  {
    "task": "Create a class for a smart light bulb with attributes for color, brightness, and state (on/off), and a method to change the color.",
    "code": "```raku\nclass SmartLightBulb {\n    has Str $.color;\n    has Int $.brightness;\n    has Bool $.state;\n\n    method change-color(Str $new-color) {\n        $!color = $new-color;\n    }\n}\n```"
  },
  {
    "task": "Design a class for a blog post with properties for title, content, and date published, and a method to edit the content.",
    "code": "```raku\nclass BlogPost {\n    has Str $.title;\n    has Str $.content;\n    has DateTime $.date-published;\n\n    method edit-content(Str $new-content) {\n        $!content = $new-content;\n    }\n}\n```"
  },
  {
    "task": "Build a class for a bank transaction with attributes for transaction ID, amount, and type, and a method to reverse the transaction.",
    "code": "```raku\nclass BankTransaction {\n    has $.transaction_id;\n    has $.amount;\n    has $.type;\n\n    method reverse-transaction() {\n        $.amount *= -1;\n        $.type = \"reversed\";\n    }\n}\n```"
  },
  {
    "task": "Implement a class for a city with properties for name, population, and area, and a method to calculate population density.",
    "code": "```raku\nclass City {\n    has $.name;\n    has $.population;\n    has $.area;\n\n    method population-density() {\n        return $.population / $.area;\n    }\n}\n```"
  },
  {
    "task": "Construct a class for a library member with attributes for member ID, name, and borrowed books, and a method to borrow a book.",
    "code": "```raku\nclass LibraryMember {\n    has Int $.member-id;\n    has Str $.name;\n    has @.borrowed-books;\n\n    method borrow-book(Str $book) {\n        @.borrowed-books.push($book);\n    }\n}\n```"
  },
  {
    "task": "Create a class for a flight reservation with attributes for flight number, passenger name, and seat number, and a method to change the seat.",
    "code": "```raku\nclass FlightReservation {\n    has Str $.flight-number;\n    has Str $.passenger-name;\n    has Str $.seat-number;\n\n    method change-seat(Str $new-seat) {\n        $!seat-number = $new-seat;\n    }\n}\n```"
  },
  {
    "task": "Develop a class for a digital photo album with properties for album name, photos, and a method to add a new photo.",
    "code": "```raku\nclass DigitalPhotoAlbum {\n    has Str $.album-name is rw;\n    has @.photos is rw;\n\n    method add-photo(Str $photo) {\n        @!photos.push($photo);\n    }\n}\n```"
  },
  {
    "task": "Design a class for a task in a to-do list with attributes for description, deadline, and status, and a method to mark it as complete.",
    "code": "```raku\nclass Task {\n    has Str $.description;\n    has Str $.deadline;\n    has Bool $.status;\n\n    method mark-as-complete() {\n        $!status = True;\n    }\n}\n```"
  },
  {
    "task": "Formulate a class for a conference speaker with attributes for name, topic, and time slot, and a method to update the time slot.",
    "code": "```raku\nclass ConferenceSpeaker {\n    has Str $.name;\n    has Str $.topic;\n    has Str $.time-slot;\n\n    method update-time-slot(Str $new-time-slot) {\n        $!time-slot = $new-time-slot;\n    }\n}\n```"
  },
  {
    "task": "Construct a class for a real estate property with attributes for address, price, and square footage, and a method to change the price.",
    "code": "```raku\nclass RealEstateProperty {\n    has Str $.address;\n    has Num $.price;\n    has Num $.square-footage;\n\n    method change-price(Num $new-price) {\n        $!price = $new-price;\n    }\n}\n```"
  },
  {
    "task": "Create a class for a weather forecast with properties for temperature, humidity, and condition, and a method to update the forecast.",
    "code": "```raku\nclass WeatherForecast {\n    has $.temperature;\n    has $.humidity;\n    has $.condition;\n    \n    method update-forecast($new-temperature, $new-humidity, $new-condition) {\n        $!temperature = $new-temperature;\n        $!humidity = $new-humidity;\n        $!condition = $new-condition;\n    }\n}\n```"
  },
  {
    "task": "Build a class for a musical instrument with attributes for type, brand, and model, and a method to play a note.",
    "code": "```raku\nclass MusicalInstrument {\n    has $.type;\n    has $.brand;\n    has $.model;\n\n    method play-note($note) {\n        say \"Playing $note on a {$!brand} {$!type} ({$!model})\";\n    }\n}\n```"
  },
  {
    "task": "Design a class for a sports team with attributes for team name, players, and coach, and a method to add a new player.",
    "code": "```raku\nclass SportsTeam {\n    has Str $.team-name;\n    has @.players;\n    has Str $.coach;\n\n    method add-player(Str $player) {\n        @!players.push($player);\n    }\n}\n```"
  },
  {
    "task": "Implement a class for a podcast episode with attributes for title, duration, and host, and a method to play the episode.",
    "code": "```raku\nclass PodcastEpisode {\n    has Str $.title;\n    has Int $.duration;\n    has Str $.host;\n    \n    method play {\n        say \"Playing episode '$.title' hosted by $.host for $.duration minutes.\";\n    }\n}\n\n# Example of creating an instance and using the play method\nmy $episode = PodcastEpisode.new(title => 'Raku Adventures', duration => 45, host => 'Jane Doe');\n$episode.play;\n```"
  },
  {
    "task": "Develop a class for a space mission with properties for mission name, crew, and launch date, and a method to launch the mission.",
    "code": "```raku\nclass SpaceMission {\n    has Str $.mission-name is rw;\n    has Array $.crew is rw;\n    has Date $.launch-date is rw;\n\n    method launch-mission() {\n        say \"Launching mission {$!mission-name} with crew: {$!crew.join(', ')} on {$!launch-date}\";\n    }\n}\n```"
  },
  {
    "task": "Create a class for a virtual assistant with attributes for name, language, and skills, and a method to add a new skill.",
    "code": "```raku\nclass VirtualAssistant {\n    has Str $.name;\n    has Str $.language;\n    has @.skills;\n\n    method add-skill(Str $new-skill) {\n        @!skills.push($new-skill);\n    }\n}\n```"
  },
  {
    "task": "Formulate a class for a news article with attributes for headline, content, and author, and a method to publish the article.",
    "code": "```raku\nclass NewsArticle {\n    has Str $.headline;\n    has Str $.content;\n    has Str $.author;\n    \n    method publish() {\n        say \"Headline: \" ~ $.headline;\n        say \"Content: \" ~ $.content;\n        say \"Author: \" ~ $.author;\n    }\n}\n```"
  },
  {
    "task": "Construct a class for a hiking trail with attributes for trail name, length, and difficulty, and a method to update the difficulty.",
    "code": "```raku\nclass HikingTrail {\n    has Str $.trail-name;\n    has Num $.length;\n    has Str $.difficulty;\n\n    method update-difficulty(Str $new-difficulty) {\n        $!difficulty = $new-difficulty;\n    }\n}\n```"
  },
  {
    "task": "Design a class for a subscription service with properties for service name, subscriber count, and subscription fee, and a method to update the fee.",
    "code": "```raku\nclass SubscriptionService {\n    has Str $.service-name is rw;\n    has Int $.subscriber-count is rw;\n    has Num $.subscription-fee is rw;\n\n    method update-fee(Num $new-fee) {\n        $.subscription-fee = $new-fee;\n    }\n}\n```"
  },
  {
    "task": "Build a class for a digital wallet with attributes for balance, transaction history, and a method to add funds.",
    "code": "```raku\nclass DigitalWallet {\n    has Num $.balance is rw = 0;\n    has @.transaction-history;\n\n    method add-funds(Num $amount) {\n        self.balance += $amount;\n        @.transaction-history.append(\"Added $amount to wallet\");\n    }\n}\n```"
  },
  {
    "task": "Implement a class for a cooking recipe with attributes for name, ingredients, and instructions, and a method to update the instructions.",
    "code": "```raku\nclass CookingRecipe {\n    has Str $.name is rw;\n    has @.ingredients is rw;\n    has Str $.instructions is rw;\n\n    method update-instructions(Str $new-instructions) {\n        $.instructions = $new-instructions;\n    }\n}\n```"
  },
  {
    "task": "Develop a class for a time zone with properties for zone name, offset, and a method to convert time from another time zone.",
    "code": "```raku\nclass TimeZone {\n    has Str $.zone-name;\n    has Int $.offset; # offset in hours\n\n    method convert-time($time, $from-offset) {\n        my $total-offset = $.offset - $from-offset;\n        return $time + $total-offset * 3600;\n    }\n}\n```"
  },
  {
    "task": "Create a class for a camera with attributes for resolution, brand, and model, and a method to take a picture.",
    "code": "```raku\nclass Camera {\n    has Str $.resolution;\n    has Str $.brand;\n    has Str $.model;\n\n    method take-picture() {\n        say \"Taking a picture with {$!brand} {$!model} at resolution {$!resolution}.\";\n    }\n}\n```"
  },
  {
    "task": "Design a class for a gaming console with properties for brand, model, and storage capacity, and a method to install a game.",
    "code": "```raku\nclass GamingConsole {\n    has Str $.brand;\n    has Str $.model;\n    has Int $.storage-capacity;\n\n    method install-game(Str $game) {\n        say \"Installing $game on {$!brand} {$!model}...\";\n    }\n}\n```"
  },
  {
    "task": "Formulate a class for a museum exhibit with attributes for exhibit name, artist, and year, and a method to update the year.",
    "code": "```raku\nclass MuseumExhibit {\n    has Str $.exhibit-name;\n    has Str $.artist;\n    has Int $.year;\n\n    method update-year(Int $new-year) {\n        $!year = $new-year;\n    }\n}\n```"
  },
  {
    "task": "Construct a class for a fitness tracker with attributes for steps, calories burned, and heart rate, and a method to add steps.",
    "code": "```raku\nclass FitnessTracker {\n    has Int $.steps is rw;\n    has Num $.calories-burned is rw;\n    has Int $.heart-rate is rw;\n\n    method add-steps(Int $additional-steps) {\n        $!steps += $additional-steps;\n    }\n}\n```"
  },
  {
    "task": "Build a class for an aquarium with properties for tank size, fish species, and water temperature, and a method to add a new fish.",
    "code": "```raku\nclass Aquarium {\n    has $.tank-size;\n    has @.fish-species;\n    has $.water-temperature;\n    \n    method add-fish(Str $new-fish) {\n        @!fish-species.push: $new-fish;\n    }\n}\n```"
  },
  {
    "task": "Create a class for a chat message with attributes for sender, content, and timestamp, and a method to edit the content.",
    "code": "```raku\nclass ChatMessage {\n    has Str $.sender;\n    has Str $.content;\n    has DateTime $.timestamp;\n\n    method edit-content(Str $new-content) {\n        $!content = $new-content;\n    }\n}\n```"
  },
  {
    "task": "Design a class for a vending machine with properties for items available, prices, and a method to dispense an item.",
    "code": "```raku\nclass VendingMachine {\n    has %!items;\n    has %!prices;\n\n    method new(%items, %prices) {\n        self.bless(:%items, :%prices);\n    }\n\n    method dispense-item($item) {\n        if %!items{$item} && %!items{$item} > 0 {\n            %!items{$item}--;\n            return \"Dispensing $item for \\${%!prices{$item}}.\";\n        } else {\n            return \"Item $item is out of stock.\";\n        }\n    }\n}\n```"
  },
  {
    "task": "Implement a class for a digital clock with attributes for current time, time zone, and a method to set an alarm.",
    "code": "```raku\nclass DigitalClock {\n    has Str $.current-time;\n    has Str $.time-zone;\n    has Str $.alarm-time;\n\n    method set-alarm(Str $alarm) {\n        $!alarm-time = $alarm;\n    }\n}\n```"
  },
  {
    "task": "Develop a class for a historical figure with attributes for name, birthdate, and achievements, and a method to add an achievement.",
    "code": "```raku\nclass HistoricalFigure {\n    has Str $.name is rw;\n    has Str $.birthdate is rw;\n    has @.achievements is rw = ();\n\n    method add-achievement(Str $achievement) {\n        @!achievements.push($achievement);\n    }\n}\n```"
  },
  {
    "task": "Formulate a class for a travel itinerary with attributes for destinations, travel dates, and activities, and a method to add a destination.",
    "code": "```raku\nclass TravelItinerary {\n    has @.destinations;\n    has @.travel_dates;\n    has @.activities;\n\n    method add_destination($destination) {\n        @!destinations.push($destination);\n    }\n}\n```"
  },
  {
    "task": "Construct a class for a fashion brand with properties for brand name, founder, and product lines, and a method to launch a new product line.",
    "code": "```raku\nclass FashionBrand {\n    has Str $.brand-name;\n    has Str $.founder;\n    has @.product-lines;\n\n    method launch-new-product-line(Str $new-line) {\n        @!product-lines.push($new-line);\n    }\n}\n```"
  },
  {
    "task": "Create a class for a video game with attributes for title, genre, and rating, and a method to update the rating.",
    "code": "```raku\nclass VideoGame {\n    has Str $.title;\n    has Str $.genre;\n    has Numeric $.rating;\n    \n    method update-rating(Numeric $new-rating) {\n        $!rating = $new-rating;\n    }\n}\n```"
  },
  {
    "task": "Build a class for a scientific experiment with attributes for experiment name, hypothesis, and results, and a method to record results.",
    "code": "```raku\nclass ScientificExperiment {\n    has Str $.experiment-name;\n    has Str $.hypothesis;\n    has @.results;\n\n    method record-results(Str $result) {\n        @!results.append($result);\n    }\n}\n```"
  },
  {
    "task": "Design a class for a gourmet dish with properties for dish name, ingredients, and cooking time, and a method to change cooking time.",
    "code": "```raku\nclass GourmetDish {\n    has Str $.dish-name;\n    has @.ingredients;\n    has Int $.cooking-time;\n\n    method change-cooking-time(Int $new-time) {\n        $!cooking-time = $new-time;\n    }\n}\n```"
  },
  {
    "task": "Implement a class for a political office with attributes for office title, holder, and term length, and a method to change the holder.",
    "code": "```raku\nclass PoliticalOffice {\n    has Str $.office-title;\n    has Str $.holder;\n    has Int $.term-length;\n\n    method change-holder(Str $new-holder) {\n        $!holder = $new-holder;\n    }\n}\n```"
  },
  {
    "task": "Develop a class for an astronomical object with properties for name, type, and distance from Earth, and a method to update the distance.",
    "code": "```raku\nclass AstronomicalObject {\n    has Str $.name;\n    has Str $.type;\n    has Num $.distance;\n\n    method update-distance(Num $new-distance) {\n        $!distance = $new-distance;\n    }\n}\n```"
  },
  {
    "task": "Formulate a class for a public transportation route with attributes for route number, stops, and schedule, and a method to add a stop.",
    "code": "```raku\nclass PublicTransportRoute {\n    has $.route-number;\n    has @.stops;\n    has $.schedule;\n\n    method add-stop($new-stop) {\n        @.stops.push($new-stop);\n    }\n}\n```"
  },
  {
    "task": "Construct a class for a board game with properties for game name, player count, and rules, and a method to change the rules.",
    "code": "```raku\nclass BoardGame {\n    has Str $.game-name;\n    has Int $.player-count;\n    has Str $.rules;\n\n    method change-rules(Str $new-rules) {\n        $!rules = $new-rules;\n    }\n}\n```"
  },
  {
    "task": "Create a class for a customer loyalty program with attributes for program name, points, and rewards, and a method to redeem points.",
    "code": "```raku\nclass CustomerLoyaltyProgram {\n    has Str $.program-name;\n    has Int $.points;\n    has @.rewards;\n\n    method redeem-points(Int $points-to-redeem) {\n        if $points-to-redeem <= $.points {\n            $.points -= $points-to-redeem;\n            return True;\n        } else {\n            return False;\n        }\n    }\n}\n```"
  },
  {
    "task": "Design a class for an art gallery with properties for gallery name, location, and exhibitions, and a method to add a new exhibition.",
    "code": "```raku\nclass ArtGallery {\n    has Str $.name;\n    has Str $.location;\n    has @.exhibitions;\n\n    method add-exhibition(Str $exhibition) {\n        @!exhibitions.push($exhibition);\n    }\n}\n```"
  },
  {
    "task": "Build a class for a personal blog with attributes for blog name, posts, and a method to add a new post.",
    "code": "```raku\nclass PersonalBlog {\n    has Str $.blog-name;\n    has @.posts;\n    \n    method add-post(Str $new-post) {\n        @!posts.push($new-post);\n    }\n}\n```"
  },
  {
    "task": "Implement a class for a mobile application with properties for app name, version, and developer, and a method to update the version.",
    "code": "```raku\nclass MobileApp {\n    has Str $.app-name is rw;\n    has Str $.version is rw;\n    has Str $.developer is rw;\n    \n    method update-version(Str $new-version) {\n        $!version = $new-version;\n    }\n}\n```"
  },
  {
    "task": "Develop a class for a language translator with attributes for source language, target language, and translation method, and a method to translate a text.",
    "code": "```raku\nclass LanguageTranslator {\n    has Str $.source-language;\n    has Str $.target-language;\n    has Str $.translation-method;\n\n    method translate(Str $text) {\n        # Placeholder implementation for translation\n        return \"Translated '$text' from {$!source-language} to {$!target-language} using {$!translation-method} method.\";\n    }\n}\n\n# Example usage\nmy $translator = LanguageTranslator.new(\n    source-language => 'English',\n    target-language => 'Spanish',\n    translation-method => 'Machine'\n);\n\nsay $translator.translate(\"Hello, world!\");\n```"
  },
  {
    "task": "Formulate a class for a culinary school with properties for school name, courses offered, and a method to add a new course.",
    "code": "```raku\nclass CulinarySchool {\n    has Str $.name;\n    has @.courses;\n    \n    method add-course(Str $course) {\n        @!courses.push($course);\n    }\n}\n```"
  },
  {
    "task": "Construct a class for a musical band with attributes for band name, members, and genre, and a method to add a new member.",
    "code": "```raku\nclass MusicalBand {\n    has Str $.band-name;\n    has @.members;\n    has Str $.genre;\n\n    method add-member(Str $new-member) {\n        @!members.push($new-member);\n    }\n}\n```"
  },
  {
    "task": "Create a class for a television series with properties for series title, episodes, and network, and a method to add a new episode.",
    "code": "```raku\nclass TelevisionSeries {\n    has Str $.series-title;\n    has @.episodes;\n    has Str $.network;\n\n    method add-episode(Str $episode) {\n        @!episodes.push($episode);\n    }\n}\n```"
  },
  {
    "task": "Design a class for a wildlife reserve with attributes for reserve name, species protected, and area size, and a method to expand the area.",
    "code": "```raku\nclass WildlifeReserve {\n    has Str $.reserve-name;\n    has @.species-protected;\n    has Num $.area-size;\n\n    method expand-area(Num $additional-area) {\n        $!area-size += $additional-area;\n    }\n}\n```"
  },
  {
    "task": "Build a class for a luxury car with properties for brand, model, and price, and a method to update the price.",
    "code": "```raku\nclass LuxuryCar {\n    has Str $.brand;\n    has Str $.model;\n    has Num $.price;\n\n    method update-price(Num $new-price) {\n        $!price = $new-price;\n    }\n}\n```"
  },
  {
    "task": "Implement a class for a scientific journal with attributes for journal name, articles, and impact factor, and a method to add a new article.",
    "code": "```raku\nclass ScientificJournal {\n    has Str $.journal-name;\n    has @.articles;\n    has Num $.impact-factor;\n\n    method add-article(Str $new-article) {\n        @!articles.push($new-article);\n    }\n}\n```"
  },
  {
    "task": "Develop a class for a historical monument with properties for monument name, location, and year established, and a method to update the location.",
    "code": "```raku\nclass HistoricalMonument {\n    has Str $.name;\n    has Str $.location;\n    has Int $.year-established;\n\n    method update-location(Str $new-location) {\n        $!location = $new-location;\n    }\n}\n```"
  },
  {
    "task": "Formulate a class for an educational course with attributes for course title, instructor, and syllabus, and a method to update the syllabus.",
    "code": "```raku\nclass Course {\n    has $.title;\n    has $.instructor;\n    has $.syllabus;\n\n    method update-syllabus($new-syllabus) {\n        $!syllabus = $new-syllabus;\n    }\n}\n```"
  },
  {
    "task": "Construct a class for a city park with properties for park name, facilities, and opening hours, and a method to add a new facility.",
    "code": "```raku\nclass CityPark {\n    has $.park-name;\n    has @.facilities;\n    has $.opening-hours;\n\n    method add-facility(Str $facility) {\n        @!facilities.push($facility);\n    }\n}\n```"
  },
  {
    "task": "Create a class for a fitness class with attributes for class name, instructor, and schedule, and a method to update the schedule.",
    "code": "```raku\nclass FitnessClass {\n    has Str $.class-name is rw;\n    has Str $.instructor is rw;\n    has Str $.schedule is rw;\n\n    method update-schedule(Str $new-schedule) {\n        $.schedule = $new-schedule;\n    }\n}\n```"
  },
  {
    "task": "Design a class for a virtual reality game with properties for game name, platform, and VR compatibility, and a method to change the platform.",
    "code": "```raku\nclass VirtualRealityGame {\n    has Str $.game-name;\n    has Str $.platform;\n    has Bool $.vr-compatibility;\n\n    method change-platform(Str $new-platform) {\n        $!platform = $new-platform;\n    }\n}\n```"
  },
  {
    "task": "Build a class for a mountain range with attributes for range name, highest peak, and countries covered, and a method to add a new peak.",
    "code": "```raku\nclass MountainRange {\n    has Str $.range-name;\n    has Str $.highest-peak;\n    has @.countries-covered;\n    has @.peaks;\n\n    method add-peak(Str $new-peak) {\n        @.peaks.push($new-peak);\n    }\n}\n```"
  },
  {
    "task": "Implement a class for a documentary film with properties for title, director, and subject, and a method to update the subject.",
    "code": "```raku\nclass DocumentaryFilm {\n    has $.title;\n    has $.director;\n    has $.subject;\n\n    method update-subject($new-subject) {\n        $!subject = $new-subject;\n    }\n}\n```"
  },
  {
    "task": "Develop a class for a classical music composition with attributes for composition name, composer, and duration, and a method to change the duration.",
    "code": "```raku\nclass ClassicalComposition {\n    has Str $.composition-name is rw;\n    has Str $.composer is rw;\n    has Int $.duration is rw; # duration in seconds\n\n    method change-duration(Int $new-duration) {\n        self.duration = $new-duration;\n    }\n}\n```"
  },
  {
    "task": "Formulate a class for a public library with properties for library name, books available, and membership, and a method to add a new book.",
    "code": "```raku\nclass PublicLibrary {\n    has Str $.library-name;\n    has @.books-available;\n    has Int $.membership;\n\n    method add-book(Str $new-book) {\n        @!books-available.push($new-book);\n    }\n}\n```"
  },
  {
    "task": "Construct a class for a tech startup with attributes for startup name, founder, and funding, and a method to raise additional funding.",
    "code": "```raku\nclass TechStartup {\n    has Str $.name;\n    has Str $.founder;\n    has Num $.funding;\n\n    method raise-funding(Num $additional-funds) {\n        $!funding += $additional-funds;\n    }\n}\n```"
  }
]