[
  {
    "task": "Create a list of the first ten positive integers and calculate their sum.",
    "code": "```raku\nmy @list = 1..10;\nmy $sum = [+] @list;\nsay $sum;\n```"
  },
  {
    "task": "Write a program to reverse the order of elements in a given list.",
    "code": "```raku\nmy @list = <1 2 3 4 5>;\nmy @reversed = @list.reverse;\nsay @reversed;\n```"
  },
  {
    "task": "Implement a function that takes a list and returns the list with duplicates removed.",
    "code": "```raku\nsub remove-duplicates(@list) {\n    return @list.unique;\n}\n```"
  },
  {
    "task": "Create a list of names and sort them in alphabetical order.",
    "code": "```raku\nmy @names = <Alice Bob Charlie Delta>;\n@names .= sort;\nsay @names;\n```"
  },
  {
    "task": "Write a function that appends a new element to an existing list.",
    "code": "```raku\nsub append-element(@list, $element) {\n    @list.push($element);\n    return @list;\n}\n```"
  },
  {
    "task": "Generate a list of the first 20 even numbers.",
    "code": "```raku\nmy @evens = (^40).grep(* %% 2);\nsay @evens;\n```"
  },
  {
    "task": "Create a nested list (a list of lists) and access an element from the inner list.",
    "code": "```raku\nmy @nested-list = ([1, 2, 3], ['a', 'b', 'c'], [True, False]);\nsay @nested-list[1][2]; # Access 'c' from the second inner list\n```"
  },
  {
    "task": "Write a program that finds the maximum value in a list of integers.",
    "code": "```raku\nmy @numbers = 5, 12, 3, 7, 9, 21, 4;\nsay @numbers.max;\n```"
  },
  {
    "task": "Implement a function to merge two lists into a single list without duplicates.",
    "code": "```raku\nsub merge-lists(@list1, @list2) {\n    return (@list1, @list2).Set.keys.sort;\n}\n\nmy @list1 = <a b c>;\nmy @list2 = <b c d>;\nsay merge-lists(@list1, @list2);\n```"
  },
  {
    "task": "Create a list from user input, then display the list in reverse order.",
    "code": "```raku\nmy @list = prompt(\"Enter items separated by spaces: \").split(' ');\nsay @list.reverse;\n```"
  },
  {
    "task": "Write a function that takes a list and returns a new list containing only the even numbers.",
    "code": "```raku\nsub extract-even(@list) {\n    @list.grep(* %% 2);\n}\n```"
  },
  {
    "task": "Generate a list of squares for the numbers 1 through 10.",
    "code": "```raku\nmy @squares = (1..10).map({ $_ * $_ });\nsay @squares;\n```"
  },
  {
    "task": "Create a list of floating-point numbers and find their average.",
    "code": "```raku\nmy @numbers = <1.2 3.4 5.6 7.8 9.0>;\nmy $average = @numbers.sum / @numbers.elems;\nsay $average;\n```"
  },
  {
    "task": "Implement a program to rotate the elements of a list to the right by a given number of steps.",
    "code": "```raku\nsub rotate-right(@list, Int $steps) {\n    my $len = @list.elems;\n    my $shift = $steps % $len;\n    return @list[* - $shift .. * - 1], @list[0 .. * - $shift - 1];\n}\n\nmy @list = <a b c d e>;\nmy $steps = 2;\nsay rotate-right(@list, $steps);\n```"
  },
  {
    "task": "Write a function that checks if a list is a palindrome (reads the same forwards and backwards).",
    "code": "```raku\nsub is-palindrome(@list) {\n    return @list eqv @list.reverse;\n}\n```"
  },
  {
    "task": "Create a list of random integers and count how many are greater than 50.",
    "code": "```raku\nmy @random-integers = (^100).map({ (1..100).roll });\nmy $count-greater-than-50 = @random-integers.grep(* > 50).elems;\nsay $count-greater-than-50;\n```"
  },
  {
    "task": "Write a program that removes the first occurrence of a specified element from a list.",
    "code": "```raku\nmy @list = <apple banana cherry apple>;\nmy $element = 'apple';\n\n@list.splice(@list.first-index($element), 1) if @list.first-index($element).defined;\nsay @list;\n```"
  },
  {
    "task": "Implement a function that takes two lists and returns a list containing their intersection.",
    "code": "```raku\nsub list_intersection(@list1, @list2) {\n    return @list1 (&) @list2;\n}\n\nmy @list1 = <1 2 3 4 5>;\nmy @list2 = <3 4 5 6 7>;\nsay list_intersection(@list1, @list2);\n```"
  },
  {
    "task": "Create a list of prime numbers less than 100.",
    "code": "```raku\nmy @primes = grep { .is-prime }, 2..^100;\nsay @primes;\n```"
  },
  {
    "task": "Write a function to split a list into two lists: one with even numbers and one with odd numbers.",
    "code": "```raku\nsub split_even_odd(@list) {\n    my @evens = @list.grep(* %% 2);\n    my @odds  = @list.grep(* !%% 2);\n    return @evens, @odds;\n}\n\nmy @numbers = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\nmy (@evens, @odds) = split_even_odd(@numbers);\nsay \"Evens: @evens\";\nsay \"Odds: @odds\";\n```"
  },
  {
    "task": "Create a list of strings and convert all the strings to uppercase.",
    "code": "```raku\nmy @strings = <apple banana cherry>;\nmy @uppercased = @strings.map(*.uc);\nsay @uppercased;\n```"
  },
  {
    "task": "Implement a program that removes all elements from a list that are less than a specified value.",
    "code": "```raku\nsub remove-less-than(@list, $threshold) {\n    return @list.grep(* >= $threshold);\n}\n\nmy @values = (1, 5, 3, 8, 2);\nmy $threshold = 4;\nmy @filtered = remove-less-than(@values, $threshold);\nsay @filtered;\n```"
  },
  {
    "task": "Write a function that takes a list and returns a new list with elements in random order.",
    "code": "```raku\nsub shuffle-list(@list) {\n    return @list.pick(*);\n}\n```"
  },
  {
    "task": "Create a list of tuples where each tuple contains a number and its square.",
    "code": "```raku\nmy @list = (1..10).map({ $_, $_ ** 2 });\n```"
  },
  {
    "task": "Write a program to multiply all elements in a list by a given factor.",
    "code": "```raku\nsub multiply-elements(@list, $factor) {\n    @list.map({ $_ * $factor });\n}\n\nmy @numbers = 1, 2, 3, 4, 5;\nmy $factor = 3;\nmy @result = multiply-elements(@numbers, $factor);\nsay @result;\n```"
  },
  {
    "task": "Implement a function that flattens a nested list.",
    "code": "```raku\nsub flatten(@nested) {\n    @nested.map({ $_ ~~ List ?? flatten($_) !! $_ }).flat;\n}\n\n# Example usage:\nmy @nested-list = (1, [2, 3, [4, 5]], 6);\nsay flatten(@nested-list); # Output: (1 2 3 4 5 6)\n```"
  },
  {
    "task": "Create a list of dates and sort them chronologically.",
    "code": "```raku\nmy @dates = <2023-05-15 2022-11-03 2024-01-07 2023-07-19>;\nmy @sorted-dates = @dates.sort(*.Str);\nsay @sorted-dates;\n```"
  },
  {
    "task": "Write a function that finds the index of the first occurrence of a given element in a list.",
    "code": "```raku\nsub find-first-index(@list, $element) {\n    for @list.kv -> $index, $value {\n        return $index if $value eq $element;\n    }\n    return Nil;\n}\n```"
  },
  {
    "task": "Generate a list of Fibonacci numbers up to a specified limit.",
    "code": "```raku\nsub fibonacci-up-to($limit) {\n    my @fibs = 0, 1;\n    while @fibs[*-1] + @fibs[*-2] <= $limit {\n        @fibs.push: @fibs[*-1] + @fibs[*-2];\n    }\n    return @fibs;\n}\n\nsay fibonacci-up-to(100);\n```"
  },
  {
    "task": "Create a list of booleans and determine if all are True.",
    "code": "```raku\nmy @bools = (True, True, True);\nsay @bools.all;\n```"
  },
  {
    "task": "Write a program to concatenate two lists.",
    "code": "```raku\nmy @list1 = <a b c>;\nmy @list2 = <1 2 3>;\nmy @concatenated = @list1, @list2;\nsay @concatenated;\n```"
  },
  {
    "task": "Implement a function that returns the length of a list without using built-in functions.",
    "code": "```raku\nsub list-length(@list) {\n    my $count = 0;\n    for @list -> $element {\n        $count++;\n    }\n    return $count;\n}\n```"
  },
  {
    "task": "Create a list of words and find the longest word.",
    "code": "```raku\nmy @words = <apple banana cherry date>;\nmy $longest-word = @words.max(*.chars);\nsay $longest-word;\n```"
  },
  {
    "task": "Write a function that takes a list and a predicate function, returning a list of elements that satisfy the predicate.",
    "code": "```raku\nsub filter-list(@list, &predicate) {\n    return @list.grep(&predicate);\n}\n```"
  },
  {
    "task": "Generate a list of strings and filter out those with less than 5 characters.",
    "code": "```raku\nmy @strings = <apple banana pear grape orange>;\nmy @filtered = @strings.grep(*.chars >= 5);\nsay @filtered;\n```"
  },
  {
    "task": "Create a list of mixed data types and separate them into lists by type.",
    "code": "```raku\nmy @mixed = (42, \"hello\", 3.14, True, \"world\", 99, False);\nmy @integers = @mixed.grep(Int);\nmy @strings = @mixed.grep(Str);\nmy @numbers = @mixed.grep(Real);\nmy @booleans = @mixed.grep(Bool);\n\nsay \"Integers: \", @integers;\nsay \"Strings: \", @strings;\nsay \"Numbers: \", @numbers;\nsay \"Booleans: \", @booleans;\n```"
  },
  {
    "task": "Write a program to find the common elements between two lists.",
    "code": "```raku\nmy @list1 = <1 2 3 4 5>;\nmy @list2 = <3 4 5 6 7>;\nmy @common = @list1 (&) @list2;\nsay @common;\n```"
  },
  {
    "task": "Implement a function to rotate the elements of a list to the left by a given number of steps.",
    "code": "```raku\nsub rotate-left(@list, $steps) {\n    my $count = @list.elems;\n    return @list if $count == 0;\n    my $effective-steps = $steps % $count;\n    return @list[$effective-steps..^$count] ~ @list[0..^$effective-steps];\n}\n\n# Example usage:\nmy @list = <a b c d e>;\nmy @rotated = rotate-left(@list, 2);\nsay @rotated; # Output: (c d e a b)\n```"
  },
  {
    "task": "Create a list of numbers and find the product of all the elements.",
    "code": "```raku\nmy @numbers = (1, 2, 3, 4, 5);\nmy $product = [*] @numbers;\nsay $product;\n```"
  },
  {
    "task": "Write a function that removes all occurrences of a specified element from a list.",
    "code": "```raku\nsub remove-element(@list, $element) {\n    return @list.grep({ $_ ne $element });\n}\n\nmy @list = <1 2 3 4 2 5 2 6>;\nmy $element = 2;\nsay remove-element(@list, $element);\n```"
  },
  {
    "task": "Generate a list of random numbers and find the median value.",
    "code": "```raku\nuse Random;\n\nmy @random-numbers = (1..100).roll(10);\n@random-numbers.sort;\nmy $median = @random-numbers.elems %% 2\n    ?? @random-numbers[@random-numbers.elems div 2]\n    !! (@random-numbers[@random-numbers.elems div 2] + @random-numbers[@random-numbers.elems div 2 - 1]) / 2;\n\nsay \"Random Numbers: @random-numbers[]\";\nsay \"Median: $median\";\n```"
  },
  {
    "task": "Create a list of dictionaries and sort them by a specific key.",
    "code": "```raku\nmy @list-of-dictionaries = (\n    { name => 'Alice', age => 30 },\n    { name => 'Bob', age => 25 },\n    { name => 'Charlie', age => 35 }\n);\n\nmy @sorted = @list-of-dictionaries.sort({ .<age> });\nsay @sorted;\n```"
  },
  {
    "task": "Write a program to split a list into chunks of a specified size.",
    "code": "```raku\nsub chunk-list(@list, $size) {\n    @list.rotor($size);\n}\n\nmy @numbers = 1..10;\nmy $chunk_size = 3;\nmy @chunks = chunk-list(@numbers, $chunk_size);\nsay @chunks;\n```"
  },
  {
    "task": "Implement a function that takes a list and returns a dictionary with the frequency of each element.",
    "code": "```raku\nsub frequency(%list) {\n    %list = %list.map({ $_ => %list.grep(* eq $_).elems });\n    return %list;\n}\n\nmy @list = <a b a c a b>;\nmy %result = frequency(@list);\nsay %result;\n```"
  },
  {
    "task": "Create a list of integers and replace all negative numbers with zero.",
    "code": "```raku\nmy @list = (-5, 3, -2, 7, -9, 0, 4);\n@list .= map({ $_ < 0 ?? 0 !! $_ });\nsay @list;\n```"
  },
  {
    "task": "Write a function that returns the first n elements of a list.",
    "code": "```raku\nsub first-n-elements(@list, Int $n) {\n    @list[0..^$n];\n}\n```"
  },
  {
    "task": "Generate a list of strings and join them into a single string with spaces.",
    "code": "```raku\nmy @list = <Hello World This Is Raku>;\nmy $joined = @list.join(' ');\nsay $joined;\n```"
  },
  {
    "task": "Create a list of lists and find the sum of each inner list.",
    "code": "```raku\nmy @list-of-lists = ([1, 2, 3], [4, 5, 6], [7, 8, 9]);\nmy @sums = @list-of-lists.map({ [+] @$_ });\nsay @sums;\n```"
  },
  {
    "task": "Write a function that finds the second largest number in a list.",
    "code": "```raku\nsub second-largest(@list) {\n    my @sorted = @list.sort.reverse;\n    return @sorted[1];\n}\n\nmy @numbers = (3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5);\nsay second-largest(@numbers);\n```"
  },
  {
    "task": "Generate a list of numbers and remove the duplicates while maintaining order.",
    "code": "```raku\nmy @numbers = <1 2 3 2 4 1 5 3>;\nmy @unique = @numbers.unique;\nsay @unique;\n```"
  },
  {
    "task": "Create a list of integers and partition it into two lists: one with numbers above the average and one below.",
    "code": "```raku\nmy @numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10;\nmy $average = @numbers.sum / @numbers.elems;\nmy @above-average = @numbers.grep(* > $average);\nmy @below-average = @numbers.grep(* < $average);\n\nsay \"Above Average: @above-average\";\nsay \"Below Average: @below-average\";\n```"
  },
  {
    "task": "Write a program to find the longest increasing subsequence in a list of numbers.",
    "code": "```raku\nsub longest-increasing-subsequence(@numbers) {\n    my @lis = @numbers.map(1);\n    my @prev = @numbers.map(-1);\n    \n    for 1 ..^ @numbers.elems -> $i {\n        for 0 ..^ $i -> $j {\n            if @numbers[$j] < @numbers[$i] && @lis[$j] + 1 > @lis[$i] {\n                @lis[$i] = @lis[$j] + 1;\n                @prev[$i] = $j;\n            }\n        }\n    }\n    \n    my $max-index = @lis.first(* == @lis.max);\n    my @sequence;\n    \n    while $max-index != -1 {\n        @sequence.unshift(@numbers[$max-index]);\n        $max-index = @prev[$max-index];\n    }\n    \n    return @sequence;\n}\n\nmy @numbers = (10, 9, 2, 5, 3, 7, 101, 18);\nsay longest-increasing-subsequence(@numbers);\n```"
  },
  {
    "task": "Implement a function to zip two lists into a single list of tuples.",
    "code": "```raku\nsub zip-lists(@list1, @list2) {\n    return [Z] @list1, @list2;\n}\n\nmy @list1 = <a b c>;\nmy @list2 = <1 2 3>;\n\nmy @zipped = zip-lists(@list1, @list2);\nsay @zipped; # OUTPUT: [(a 1) (b 2) (c 3)]\n```"
  },
  {
    "task": "Create a list of characters and count the vowels.",
    "code": "```raku\nmy @chars = <a b c d e f g h i j k l m n o p q r s t u v w x y z>;\nmy $vowel-count = @chars.grep({ $_ ~~ any <a e i o u> }).elems;\nsay $vowel-count;\n```"
  },
  {
    "task": "Write a function that returns the last n elements of a list.",
    "code": "```raku\nsub last-n-elements(@list, $n) {\n    @list[*-$n..*];\n}\n```"
  },
  {
    "task": "Generate a list of numbers and split it into two lists: one with positive numbers and one with negative numbers.",
    "code": "```raku\nmy @numbers = (-10, 5, -3, 7, 0, -1, 9, -8);\nmy @positive-numbers = @numbers.grep(* > 0);\nmy @negative-numbers = @numbers.grep(* < 0);\nsay \"Positive: \", @positive-numbers;\nsay \"Negative: \", @negative-numbers;\n```"
  },
  {
    "task": "Create a list of random integers and find the mode.",
    "code": "```raku\nmy @list = (1..100).roll(20);\nmy $mode = @list.Bag.grep(*.value == @list.Bag.values.max).keys;\nsay \"List: @list\";\nsay \"Mode: $mode\";\n```"
  },
  {
    "task": "Write a program to find the shortest path in a grid using a list to represent the path.",
    "code": "```raku\nsub find-shortest-path(@grid, $start, $end) {\n    my @directions = ((0, 1), (1, 0), (0, -1), (-1, 0));\n    my %visited;\n    my @queue = [$start, [$start]];\n    \n    while @queue {\n        my ($current, $path) = @queue.shift;\n        \n        return $path if $current == $end;\n        \n        for @directions -> ($dx, $dy) {\n            my $next = [$current[0] + $dx, $current[1] + $dy];\n            next if %visited{$next} || @grid[$next[0]][$next[1]] == 1;\n            \n            %visited{$next} = True;\n            @queue.push([$next, |$path, $next]);\n        }\n    }\n    return [];\n}\n\nmy @grid = [\n    [0, 0, 0, 0, 0],\n    [0, 1, 1, 1, 0],\n    [0, 0, 0, 1, 0],\n    [0, 1, 0, 0, 0],\n    [0, 0, 0, 0, 0]\n];\n\nmy $start = [0, 0];\nmy $end = [4, 4];\n\nmy @shortest-path = find-shortest-path(@grid, $start, $end);\nsay @shortest-path;\n```"
  },
  {
    "task": "Implement a function that takes a list and returns a list with elements doubled.",
    "code": "```raku\nsub double-elements(@list) {\n    return @list.map({ $_ * 2 });\n}\n```"
  },
  {
    "task": "Create a list of integers and sort them in descending order.",
    "code": "```raku\nmy @integers = 3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5;\nmy @sorted-desc = @integers.sort(* > *);\nsay @sorted-desc;\n```"
  },
  {
    "task": "Write a function that takes a list of intervals and merges overlapping intervals.",
    "code": "```raku\nsub merge-intervals(@intervals) {\n    @intervals.sort: { $^a[0] <=> $^b[0] };\n\n    my @merged;\n    for @intervals -> $interval {\n        if @merged && @merged[*-1][1] >= $interval[0] {\n            @merged[*-1][1] = max(@merged[*-1][1], $interval[1]);\n        } else {\n            @merged.push($interval);\n        }\n    }\n\n    return @merged;\n}\n```"
  },
  {
    "task": "Generate a list of random numbers and find the range (difference between max and min).",
    "code": "```raku\nmy @random-numbers = (^10).map({ (1..100).roll });\nmy $range = @random-numbers.max - @random-numbers.min;\nsay \"Range: $range\";\n```"
  },
  {
    "task": "Create a list of strings and remove any that are palindromes.",
    "code": "```raku\nmy @strings = <level world racecar hello rotor>;\nmy @non-palindromes = @strings.grep({ $_ ne $_.flip });\nsay @non-palindromes;\n```"
  },
  {
    "task": "Write a program to cyclically permute the elements of a list.",
    "code": "```raku\nsub cyclic_permute(@list) {\n    @list.push: @list.shift;\n    return @list;\n}\n\nmy @original = <a b c d>;\nmy @permuted = cyclic_permute(@original);\nsay @permuted;\n```"
  },
  {
    "task": "Implement a function to create a list of cumulative sums from a list of numbers.",
    "code": "```raku\nsub cumulative-sums(@numbers) {\n    my $sum = 0;\n    @numbers.map({ $sum += $_ });\n}\n\nmy @numbers = 1, 2, 3, 4, 5;\nsay cumulative-sums(@numbers); # Output: (1 3 6 10 15)\n```"
  },
  {
    "task": "Create a list of numbers and shift all zeros to the end.",
    "code": "```raku\nmy @numbers = 3, 0, 4, 2, 0, 5;\n@numbers = (@numbers.grep(* != 0), @numbers.grep(* == 0));\nsay @numbers;\n```"
  },
  {
    "task": "Write a program to simulate a queue using a list.",
    "code": "```raku\nmy @queue;\n\nsub enqueue($item) {\n    @queue.push($item);\n}\n\nsub dequeue {\n    @queue.shift;\n}\n\nsub display-queue {\n    say @queue;\n}\n\nenqueue(1);\nenqueue(2);\nenqueue(3);\n\ndisplay-queue;  # Output: [1 2 3]\n\ndequeue;\n\ndisplay-queue;  # Output: [2 3]\n```"
  },
  {
    "task": "Generate a list of numbers and identify all prime numbers.",
    "code": "```raku\nsub is-prime(Int $n) {\n    return False if $n < 2;\n    return !($n %% any(2..sqrt($n).Int));\n}\n\nmy @numbers = 1..100;\nmy @primes = @numbers.grep(&is-prime);\nsay @primes;\n```"
  },
  {
    "task": "Create a list of strings and group them by their starting letter.",
    "code": "```raku\nmy @strings = <apple apricot banana berry cherry cantaloupe date>;\nmy %grouped = @strings.classify(*.substr(0, 1));\nsay %grouped;\n```"
  },
  {
    "task": "Write a function that takes a list and returns a new list with all elements squared.",
    "code": "```raku\nsub square-list(@list) {\n    return @list.map({ $_ ** 2 });\n}\n```"
  },
  {
    "task": "Generate a list of timestamps and find the time difference between consecutive elements.",
    "code": "```raku\nmy @timestamps = <2023-10-01T12:00:00Z 2023-10-01T14:00:00Z 2023-10-01T15:30:00Z 2023-10-01T17:45:00Z>;\n\nmy @differences = @timestamps.pairs.map: {\n    DateTime.new($_.value).Instant - DateTime.new($_.key.value).Instant\n};\n\nsay @differences;\n```"
  },
  {
    "task": "Create a list of numbers and rotate it such that the smallest number is first.",
    "code": "```raku\nmy @numbers = 6, 3, 8, 1, 4;\nmy $min-index = @numbers.first-index(* == @numbers.min);\nmy @rotated = @numbers.rotor($min-index, :partial).flat;\nsay @rotated;\n```"
  },
  {
    "task": "Write a program to find all unique pairs in a list that sum up to a specific target.",
    "code": "```raku\nsub find_pairs(@list, $target) {\n    my %seen;\n    my %pairs;\n\n    for @list -> $num {\n        my $complement = $target - $num;\n        if %seen{$complement}:exists {\n            %pairs{\"$complement,$num\"} = True;\n        }\n        %seen{$num} = True;\n    }\n\n    return %pairs.keys.map: { .split(',').map(*.Int) };\n}\n\nmy @list = (2, 4, 3, 5, 1, 7, 9, 0);\nmy $target = 9;\nsay find_pairs(@list, $target);\n```"
  },
  {
    "task": "Implement a function that returns true if a list contains a cycle.",
    "code": "```raku\nsub has-cycle (@list) {\n    my $slow = 0;\n    my $fast = 0;\n    while $fast < @list.elems && $fast + 1 < @list.elems {\n        $slow = @list[$slow];\n        $fast = @list[@list[$fast]];\n        return True if $slow == $fast;\n    }\n    return False;\n}\n\n# Example usage:\n# say has-cycle([0, 1, 2, 3, 4, 2]); # True (cycle: 2 -> 3 -> 4 -> 2)\n# say has-cycle([0, 1, 2, 3, 4, 5]); # False\n```"
  },
  {
    "task": "Create a list of numbers and find the contiguous subarray with the maximum sum.",
    "code": "```raku\nmy @numbers = (1, -3, 2, 1, -1, 3, -2, 2, -3, 4, -1, 2);\nmy $max-sum = @numbers[0];\nmy $current-sum = 0;\n\nfor @numbers -> $num {\n    $current-sum = max($num, $current-sum + $num);\n    $max-sum = max($max-sum, $current-sum);\n}\n\nsay $max-sum;\n```"
  },
  {
    "task": "Write a function that takes a list and a number, and finds two numbers in the list that sum to the given number.",
    "code": "```raku\nsub find-pair(@list, $target-sum) {\n    my %seen;\n    for @list -> $num {\n        my $complement = $target-sum - $num;\n        return ($num, $complement) if %seen{$complement}:exists;\n        %seen{$num} = True;\n    }\n    return;\n}\n```"
  },
  {
    "task": "Generate a list of even numbers and filter out those that are greater than a specific value.",
    "code": "```raku\nmy $limit = 10;\nmy @evens = (0..20).grep(* %% 2).grep(* <= $limit);\nsay @evens;\n```"
  },
  {
    "task": "Create a list of characters and reverse the vowels only.",
    "code": "```raku\nmy @chars = <h e l l o w o r l d>;\nmy @vowels = @chars.grep(* ~~ /<[aeiouAEIOU]>/).reverse;\nmy $i = 0;\n@chars .= map(-> $c { $c ~~ /<[aeiouAEIOU]>/ ?? @vowels[$i++] !! $c });\nsay @chars;\n```"
  },
  {
    "task": "Write a program to find all permutations of a list of elements.",
    "code": "```raku\nsub permutations(@list) {\n    return [@list] if @list.elems <= 1;\n    gather for @list -> $elem {\n        my @rest = @list.grep(* ne $elem);\n        for permutations(@rest) -> @perm {\n            take [$elem, |@perm];\n        }\n    }\n}\n\nmy @elements = <a b c>;\nsay permutations(@elements);\n```"
  },
  {
    "task": "Implement a function that takes a list and returns the most frequently occurring element.",
    "code": "```raku\nsub most-frequent(@list) {\n    @list.sort({ @list.grep(* eq $^a).elems <=> @list.grep(* eq $^b).elems }).tail\n}\n\nsay most-frequent(<apple orange banana apple apple banana>);\n```"
  },
  {
    "task": "Create a list of numbers and calculate the variance.",
    "code": "```raku\nmy @numbers = 1, 2, 3, 4, 5;\nmy $mean = @numbers.sum / @numbers.elems;\nmy $variance = (@numbers.map({ ($_ - $mean) ** 2 })).sum / @numbers.elems;\nsay $variance;\n```"
  },
  {
    "task": "Write a function to concatenate a list of lists into a single list.",
    "code": "```raku\nsub concatenate-lists(@list-of-lists) {\n    return @list-of-lists.flat;\n}\n```"
  },
  {
    "task": "Generate a list of numbers and replace each element with the product of all other elements.",
    "code": "```raku\nmy @numbers = 1..5;\nmy @result = @numbers.map: -> $elem {\n    [*] @numbers.grep: * != $elem\n};\nsay @result;\n```"
  },
  {
    "task": "Create a list of strings and find the common prefix.",
    "code": "```raku\nmy @strings = <apple apricot application applause>;\nmy $common-prefix = @strings[0].comb[0 ..*].reduce: { [min] $^a, $^b };\nsay $common-prefix;\n```"
  },
  {
    "task": "Write a program to partition a list into two lists based on a predicate function.",
    "code": "```raku\nsub partition-list(@list, &predicate) {\n    my @true-part  = @list.grep(&predicate);\n    my @false-part = @list.grep(!&predicate);\n    return @true-part, @false-part;\n}\n\nmy @numbers = 1..10;\nmy &is-even = -> $n { $n %% 2 };\nmy (@evens, @odds) = partition-list(@numbers, &is-even);\n\nsay \"Evens: \", @evens;\nsay \"Odds: \", @odds;\n```"
  },
  {
    "task": "Implement a function to find the kth smallest element in a list.",
    "code": "```raku\nsub kth-smallest(@list, $k) {\n    @list.sort[$k - 1];\n}\n\nmy @numbers = (3, 1, 2, 5, 4);\nsay kth-smallest(@numbers, 3); # Output: 3\n```"
  },
  {
    "task": "Create a list of integers and find the length of the longest contiguous sequence.",
    "code": "```raku\nmy @integers = 1, 2, 2, 3, 4, 4, 4, 5, 6, 7, 7, 8;\nmy $max-length = 0;\nmy $current-length = 1;\n\nfor @integers.kv -> $i, $value {\n    if $i > 0 && $value == @integers[$i - 1] {\n        $current-length++;\n    } else {\n        $max-length = $current-length if $current-length > $max-length;\n        $current-length = 1;\n    }\n}\n$max-length = $current-length if $current-length > $max-length;\nsay $max-length;\n```"
  },
  {
    "task": "Write a function that rotates elements in a list while maintaining the relative order of non-rotated elements.",
    "code": "```raku\nsub rotate-list(@list, $positions) {\n    return @list if $positions == 0;\n    my $n = @list.elems;\n    $positions = $positions % $n;\n    return @list[$positions..^$n, 0..^$positions];\n}\n\nmy @original = <1 2 3 4 5>;\nmy $positions = 2;\nmy @rotated = rotate-list(@original, $positions);\nsay @rotated; # Output: (3 4 5 1 2)\n```"
  },
  {
    "task": "Generate a list of random numbers and sort them while maintaining the original index positions.",
    "code": "```raku\nmy @random-list = (1..100).pick(10);\nmy @sorted-list = @random-list.sort;\nmy @indexed-sorted-list = @sorted-list.map: { @random-list.first(:kv, { $_ eq $^v }).key };\nsay @indexed-sorted-list;\n```"
  },
  {
    "task": "Create a list of numbers and find all subsets that sum up to a specific target.",
    "code": "```raku\nsub find-subsets(@list, $target, @subset = [], $index = 0) {\n    if [\\+] @subset == $target {\n        say @subset;\n    }\n    for $index ..^ @list.elems -> $i {\n        find-subsets(@list, $target, @subset, $i + 1) with @subset.push(@list[$i]);\n        @subset.pop;\n    }\n}\n\nmy @numbers = 1, 2, 3, 4, 5;\nmy $target = 5;\nfind-subsets(@numbers, $target);\n```"
  },
  {
    "task": "Write a program to simulate a stack using a list.",
    "code": "```raku\nclass Stack {\n    has @.elements;\n\n    method push($value) {\n        @!elements.push($value);\n    }\n\n    method pop() {\n        @!elements.pop;\n    }\n\n    method top() {\n        @!elements[*-1];\n    }\n\n    method is-empty() {\n        @!elements.elems == 0;\n    }\n\n    method size() {\n        @!elements.elems;\n    }\n}\n\n# Example usage\nmy $stack = Stack.new;\n$stack.push(10);\n$stack.push(20);\nsay $stack.pop;     # 20\nsay $stack.top;     # 10\nsay $stack.is-empty;# False\nsay $stack.size;    # 1\n```"
  }
]