[
  {
    "task": "Create a function that calculates the sum of two numbers and returns the result.",
    "code": "```raku\nsub sum($a, $b) {\n    return $a + $b;\n}\n```"
  },
  {
    "task": "Design a function that takes a string and returns its length.",
    "code": "```raku\nsub string-length(Str $input) {\n    return $input.chars;\n}\n```"
  },
  {
    "task": "Write a function that checks if a number is prime and returns a boolean value.",
    "code": "```raku\nsub is-prime(Int $n) returns Bool {\n    return False if $n < 2;\n    return True if $n == 2;\n    return False if $n %% 2;\n    for 3, * + 2 ... sqrt($n).Int -> $i {\n        return False if $n %% $i == 0;\n    }\n    return True;\n}\n```"
  },
  {
    "task": "Implement a function that returns the highest value in a list of integers.",
    "code": "```raku\nsub highest-value(@numbers) {\n    return @numbers.max;\n}\n```"
  },
  {
    "task": "Create a function that accepts a list of words and returns the longest word.",
    "code": "```raku\nsub longest-word(@words) {\n    return @words.max(*.chars);\n}\n```"
  },
  {
    "task": "Write a function that takes a temperature in Celsius and returns the equivalent in Fahrenheit.",
    "code": "```raku\nsub celsius-to-fahrenheit($celsius) {\n    return $celsius * 9 / 5 + 32;\n}\n```"
  },
  {
    "task": "Develop a function that returns the factorial of a given number.",
    "code": "```raku\nsub factorial(Int $n where $n >= 0) returns Int {\n    return [*] 1..$n;\n}\n```"
  },
  {
    "task": "Implement a function that receives a date and returns the day of the week.",
    "code": "```raku\nsub day-of-week(Str $date) {\n    DateTime.new($date).day-of-week;\n}\n\nsay day-of-week('2023-10-05'); # Example usage\n```"
  },
  {
    "task": "Write a function that calculates the area of a circle given its radius and returns the value.",
    "code": "```raku\nsub circle-area($radius) {\n    return \u03c0 * $radius ** 2;\n}\n```"
  },
  {
    "task": "Create a function that converts a string to uppercase and returns the modified string.",
    "code": "```raku\nsub to-uppercase(Str $input) returns Str {\n    return $input.uc;\n}\n```"
  },
  {
    "task": "Design a function that returns the reverse of a given list.",
    "code": "```raku\nsub reverse-list(@list) {\n    return @list.reverse;\n}\n```"
  },
  {
    "task": "Implement a function that accepts a string and returns a dictionary with character frequencies.",
    "code": "```raku\nsub char-frequencies(Str $input) {\n    my %frequencies;\n    for $input.comb -> $char {\n        %frequencies{$char}++;\n    }\n    return %frequencies;\n}\n```"
  },
  {
    "task": "Write a function that returns the first non-repeating character in a string.",
    "code": "```raku\nsub first-non-repeating-char(Str $s) {\n    my %count;\n    $count{$_}++ for $s.comb;\n    for $s.comb -> $char {\n        return $char if %count{$char} == 1;\n    }\n    return Nil;\n}\n```"
  },
  {
    "task": "Create a function that takes a list of numbers and returns a new list with only even numbers.",
    "code": "```raku\nsub even-numbers(@numbers) {\n    @numbers.grep(* %% 2);\n}\n```"
  },
  {
    "task": "Develop a function that receives a sentence and returns the word count.",
    "code": "```raku\nsub word-count(Str $sentence) {\n    return $sentence.words.elems;\n}\n```"
  },
  {
    "task": "Implement a function that returns the smallest element in an array.",
    "code": "```raku\nsub smallest-element(@array) {\n    return @array.min;\n}\n```"
  },
  {
    "task": "Write a function that takes two strings and returns true if they are anagrams.",
    "code": "```raku\nsub are-anagrams(Str $str1, Str $str2) returns Bool {\n    return $str1.comb.sort.join eq $str2.comb.sort.join;\n}\n```"
  },
  {
    "task": "Create a function that accepts an integer and returns a list of its divisors.",
    "code": "```raku\nsub divisors(Int $n) {\n    return (1..$n).grep(-> $d { $n %% $d });\n}\n```"
  },
  {
    "task": "Design a function that returns the square root of a given number.",
    "code": "```raku\nsub square-root($number) {\n    return $number.sqrt;\n}\n```"
  },
  {
    "task": "Implement a function that accepts a list and returns it sorted in ascending order.",
    "code": "```raku\nsub sort-list(@list) {\n    return @list.sort;\n}\n```"
  },
  {
    "task": "Write a function that checks whether a given year is a leap year and returns a boolean.",
    "code": "```raku\nsub is-leap-year(Int $year) returns Bool {\n    return ($year %% 4 && !$year %% 100) || $year %% 400;\n}\n```"
  },
  {
    "task": "Create a function that receives a list of numbers and returns their average.",
    "code": "```raku\nsub average(@numbers) {\n    return [*] @numbers / @numbers.elems;\n}\n```"
  },
  {
    "task": "Develop a function that returns the nth Fibonacci number.",
    "code": "```raku\nsub fibonacci(Int $n) {\n    return $n if $n <= 1;\n    return fibonacci($n - 1) + fibonacci($n - 2);\n}\n```"
  },
  {
    "task": "Implement a function that accepts a string and returns it with vowels removed.",
    "code": "```raku\nsub remove-vowels(Str $input) {\n    return $input.subst(:g, /<[aeiouAEIOU]>/, '');\n}\n```"
  },
  {
    "task": "Write a function that takes two dates and returns the number of days between them.",
    "code": "```raku\nuse Date;\n\nsub days-between-dates(Date $date1, Date $date2) returns Int {\n    return ($date1 - $date2).abs.days;\n}\n\nmy $date1 = Date.new('2023-10-05');\nmy $date2 = Date.new('2023-09-30');\nsay days-between-dates($date1, $date2); # Output: 5\n```"
  },
  {
    "task": "Create a function that returns the last element of a list.",
    "code": "```raku\nsub last-element(@list) {\n    return @list[*-1];\n}\n```"
  },
  {
    "task": "Design a function that calculates the GCD of two numbers and returns it.",
    "code": "```raku\nsub gcd(Int $a, Int $b --> Int) {\n    return $b ?? gcd($b, $a % $b) !! $a;\n}\n```"
  },
  {
    "task": "Implement a function that takes a list and returns a tuple with the min and max values.",
    "code": "```raku\nsub min-max(@list) {\n    return @list.min, @list.max;\n}\n```"
  },
  {
    "task": "Write a function that converts a binary string to its decimal representation and returns it.",
    "code": "```raku\nsub binary-to-decimal(Str $binary) returns Int {\n    return :2($binary).Int;\n}\n```"
  },
  {
    "task": "Create a function that accepts a dictionary and returns a list of its keys.",
    "code": "```raku\nsub get-keys(%dictionary) {\n    return %dictionary.keys;\n}\n```"
  },
  {
    "task": "Develop a function that returns the concatenation of two strings.",
    "code": "```raku\nsub concatenate($str1, $str2) {\n    return $str1 ~ $str2;\n}\n```"
  },
  {
    "task": "Implement a function that receives a list and returns a new list with duplicates removed.",
    "code": "```raku\nsub remove-duplicates(@list) {\n    return @list.unique;\n}\n```"
  },
  {
    "task": "Write a function that returns the intersection of two lists.",
    "code": "```raku\nsub intersection(@list1, @list2) {\n    return @list1 (&) @list2;\n}\n```"
  },
  {
    "task": "Create a function that takes an integer and returns whether it is even or odd as a string.",
    "code": "```raku\nsub even-or-odd(Int $num) returns Str {\n    return $num %% 2 ?? 'even' !! 'odd';\n}\n```"
  },
  {
    "task": "Design a function that returns the number of vowels in a given string.",
    "code": "```raku\nsub count-vowels(Str $input) {\n    return $input.comb(/<:L>/<:Ll>/).grep(/<:vowel>/).elems;\n}\n```"
  },
  {
    "task": "Implement a function that counts the occurrences of a substring within a string and returns it.",
    "code": "```raku\nsub count-substring($string, $substring) {\n    return $string.comb($substring).elems;\n}\n```"
  },
  {
    "task": "Write a function that accepts a list of numbers and returns them sorted in descending order.",
    "code": "```raku\nsub sort-desc(@numbers) {\n    return @numbers.sort({ $^b <=> $^a });\n}\n```"
  },
  {
    "task": "Create a function that returns the median of a list of numbers.",
    "code": "```raku\nsub median(@numbers) {\n    @numbers .= sort;\n    my $len = @numbers.elems;\n    return $len %% 2\n        ?? (@numbers[$len div 2 - 1] + @numbers[$len div 2]) / 2\n        !! @numbers[$len div 2];\n}\n```"
  },
  {
    "task": "Develop a function that receives a sentence and returns it with words in reverse order.",
    "code": "```raku\nsub reverse-words($sentence) {\n    return $sentence.split(' ').reverse.join(' ');\n}\n```"
  },
  {
    "task": "Implement a function that returns the sum of all elements in a matrix.",
    "code": "```raku\nsub sum-matrix(@matrix) {\n    my $sum = 0;\n    for @matrix -> @row {\n        for @row -> $element {\n            $sum += $element;\n        }\n    }\n    return $sum;\n}\n```"
  },
  {
    "task": "Write a function that accepts a string and returns true if it is a palindrome.",
    "code": "```raku\nsub is-palindrome(Str $s) returns Bool {\n    return $s eq $s.flip;\n}\n```"
  },
  {
    "task": "Create a function that takes a number and returns its binary representation as a string.",
    "code": "```raku\nsub to-binary(Int $number) returns Str {\n    return $number.base(2);\n}\n```"
  },
  {
    "task": "Design a function that returns the number of words in a paragraph.",
    "code": "```raku\nsub count-words($paragraph) {\n    return $paragraph.words.elems;\n}\n```"
  },
  {
    "task": "Implement a function that accepts a list and returns the index of its maximum element.",
    "code": "```raku\nsub max-index(@list) {\n    return @list.first-index(@list.max);\n}\n```"
  },
  {
    "task": "Write a function that takes a list of grades and returns the highest grade.",
    "code": "```raku\nsub highest-grade(@grades) {\n    return @grades.max;\n}\n```"
  },
  {
    "task": "Create a function that returns the product of all positive integers up to a given number.",
    "code": "```raku\nsub product-up-to(Int $n) {\n    return [*] 1..$n;\n}\n```"
  },
  {
    "task": "Develop a function that receives a string and returns a new string with spaces replaced by hyphens.",
    "code": "```raku\nsub replace-spaces-with-hyphens(Str $input) returns Str {\n    return $input.trans(' ' => '-');\n}\n```"
  },
  {
    "task": "Implement a function that takes a list of integers and returns their sum.",
    "code": "```raku\nsub sum-list(@numbers) {\n    return [+] @numbers;\n}\n```"
  },
  {
    "task": "Write a function that checks if a string is a valid email address and returns a boolean.",
    "code": "```raku\nsub is-valid-email(Str $email) returns Bool {\n    return $email ~~ / ^\\w+ [ '.' | '-' | '+' | \\w ]* '@' \\w+ [ '.' \\w+ ]+ $ /;\n}\n```"
  },
  {
    "task": "Create a function that returns the decimal equivalent of a hexadecimal string.",
    "code": "```raku\nsub hex-to-decimal(Str $hex) {\n    return :16($hex).Int;\n}\n```"
  },
  {
    "task": "Design a function that calculates and returns the body mass index based on height and weight.",
    "code": "```raku\nsub calculate-bmi($weight, $height) {\n    return $weight / ($height ** 2);\n}\n```"
  },
  {
    "task": "Implement a function that returns the initials of a person's name given a full name.",
    "code": "```raku\nsub get-initials(Str $full-name) {\n    return $full-name.split(' ').map({ .substr(0, 1).uc }).join('');\n}\n\n# Example usage\nsay get-initials(\"John Doe\"); # Output: JD\n```"
  },
  {
    "task": "Write a function that accepts a list of names and returns them sorted alphabetically.",
    "code": "```raku\nsub sort-names(@names) {\n    return @names.sort;\n}\n```"
  },
  {
    "task": "Create a function that takes a list of integers and returns a list of their squares.",
    "code": "```raku\nsub square-list(@numbers) {\n    return @numbers.map(* ** 2);\n}\n```"
  },
  {
    "task": "Develop a function that returns the common elements between two sets.",
    "code": "```raku\nsub common-elements(Set $set1, Set $set2) {\n    return $set1 (\u2229) $set2;\n}\n```"
  },
  {
    "task": "Implement a function that receives a list of strings and returns the shortest string.",
    "code": "```raku\nsub shortest-string(@strings) {\n    @strings.min: *.chars\n}\n```"
  },
  {
    "task": "Write a function that returns the sum of digits of a given integer.",
    "code": "```raku\nsub sum-of-digits(Int $number) {\n    return [+] $number.comb(/\\d/);\n}\n```"
  },
  {
    "task": "Create a function that takes a matrix and returns its transpose.",
    "code": "```raku\nsub transpose(@matrix) {\n    my @transposed;\n    for ^@matrix[0].elems -> $i {\n        @transposed.push([@matrix>>.[$i]]);\n    }\n    return @transposed;\n}\n```"
  },
  {
    "task": "Design a function that returns the percentage of uppercase letters in a string.",
    "code": "```raku\nsub percentage-uppercase($str) {\n    my $total = $str.chars;\n    return 0 if $total == 0;\n    my $uppercase-count = $str.comb.grep({ $_ ~~ /<:Lu>/ }).elems;\n    return ($uppercase-count / $total) * 100;\n}\n```"
  },
  {
    "task": "Implement a function that accepts a string and returns it with each word capitalized.",
    "code": "```raku\nsub capitalize-words(Str $input) returns Str {\n    return $input.split(' ').map({ $_.ucfirst }).join(' ');\n}\n```"
  },
  {
    "task": "Write a function that takes a list and returns the difference between the max and min values.",
    "code": "```raku\nsub max_min_difference(@list) {\n    return @list.max - @list.min;\n}\n```"
  },
  {
    "task": "Create a function that returns a list containing the first n prime numbers.",
    "code": "```raku\nsub first-n-primes(Int $n) {\n    my @primes;\n    my $candidate = 2;\n    while @primes.elems < $n {\n        if $candidate.is-prime {\n            @primes.push($candidate);\n        }\n        $candidate++;\n    }\n    return @primes;\n}\n```"
  },
  {
    "task": "Develop a function that receives a dictionary and returns a new dictionary with keys and values swapped.",
    "code": "```raku\nsub swap-dict(%input) {\n    return %input.invert;\n}\n\nmy %original = a => 1, b => 2, c => 3;\nmy %swapped = swap-dict(%original);\nsay %swapped; # Output: { 1 => \"a\", 2 => \"b\", 3 => \"c\" }\n```"
  },
  {
    "task": "Implement a function that accepts a string and returns the frequency of each word.",
    "code": "```raku\nsub word-frequency($text) {\n    my %frequency;\n    for $text.words -> $word {\n        %frequency{$word}++;\n    }\n    return %frequency;\n}\n```"
  },
  {
    "task": "Write a function that takes two numbers and returns their greatest common divisor.",
    "code": "```raku\nsub gcd(Int $a, Int $b) {\n    return $b == 0 ?? $a !! gcd($b, $a mod $b);\n}\n```"
  },
  {
    "task": "Create a function that returns the number of consonants in a given string.",
    "code": "```raku\nsub count-consonants($str) {\n    return $str.comb(/<:L> && /<![aeiouAEIOU]>/:).elems;\n}\n```"
  },
  {
    "task": "Design a function that checks if a number is a perfect square and returns a boolean.",
    "code": "```raku\nsub is-perfect-square(Int $num) returns Bool {\n    return False if $num < 0;\n    my $root = sqrt($num);\n    return $root == $root.Int;\n}\n```"
  },
  {
    "task": "Implement a function that takes a list of numbers and returns the mode.",
    "code": "```raku\nsub mode(@numbers) {\n    my %frequency;\n    %frequency{$_}++ for @numbers;\n    my $max-frequency = %frequency.values.max;\n    my @modes = %frequency.grep(*.value == $max-frequency).keys;\n    return @modes[0];\n}\n```"
  },
  {
    "task": "Write a function that accepts a string and returns a new string with characters in reverse order.",
    "code": "```raku\nsub reverse-string(Str $input) {\n    return $input.flip;\n}\n```"
  },
  {
    "task": "Create a function that returns the sum of all even numbers in a list.",
    "code": "```raku\nsub sum-of-evens(@numbers) {\n    return [+] @numbers.grep(* %% 2);\n}\n```"
  },
  {
    "task": "Develop a function that receives two lists and returns their union.",
    "code": "```raku\nsub union(@list1, @list2) {\n    return (@list1, @list2).unique;\n}\n```"
  },
  {
    "task": "Implement a function that takes a string and returns the number of unique characters.",
    "code": "```raku\nsub count-unique-characters(Str $input) {\n    my %seen;\n    for $input.comb -> $char {\n        %seen{$char}++;\n    }\n    return %seen.keys.elems;\n}\n```"
  },
  {
    "task": "Write a function that returns the cube of a given number.",
    "code": "```raku\nsub cube($number) {\n    return $number ** 3;\n}\n```"
  },
  {
    "task": "Create a function that calculates the power of a number given a base and exponent and returns the result.",
    "code": "```raku\nsub power($base, $exponent) {\n    return $base ** $exponent;\n}\n```"
  },
  {
    "task": "Design a function that accepts a URL and returns its domain name.",
    "code": "```raku\nsub get-domain($url) {\n    return $url.subst(/<http[s]?:\\/\\/([^\\/]+)>/, '$0');\n}\n\n# Example use\nsay get-domain('https://www.example.com/path'); # Output: www.example.com\n```"
  },
  {
    "task": "Implement a function that takes a sentence and returns it with each letter shifted by one in the alphabet.",
    "code": "```raku\nsub shift-sentence($sentence) {\n    return $sentence.trans(\n        \"a\"..\"z\" => \"b\"..\"z\", \"a\",\n        \"A\"..\"Z\" => \"B\"..\"Z\", \"A\"\n    );\n}\n\nsay shift-sentence(\"Hello World\");\n```"
  },
  {
    "task": "Write a function that checks if a list is sorted and returns a boolean.",
    "code": "```raku\nsub is-sorted(@list) {\n    @list == @list.sort;\n}\n```"
  },
  {
    "task": "Create a function that returns the longest increasing subsequence in a list of numbers.",
    "code": "```raku\nsub longest-increasing-subsequence(@nums) {\n    my @lis = ([||] xx @nums.elems);\n    for @nums.kv -> $i, $num {\n        for 0 .. $i - 1 -> $j {\n            if @nums[$j] < $num && @lis[$i].elems < @lis[$j].elems + 1 {\n                @lis[$i] = [@lis[$j]];\n            }\n        }\n        @lis[$i].push($num);\n    }\n    \n    return @lis.sort({ .elems }).[*-1];\n}\n\n# Example usage\nmy @numbers = 10, 9, 2, 5, 3, 7, 101, 18;\nsay longest-increasing-subsequence(@numbers); # Output should be [2, 3, 7, 101]\n```"
  },
  {
    "task": "Develop a function that calculates and returns the compound interest for given principal, rate, and time.",
    "code": "```raku\nsub compound-interest($principal, $rate, $time) {\n    return $principal * (1 + $rate) ** $time;\n}\n```"
  },
  {
    "task": "Implement a function that accepts two strings and returns their longest common substring.",
    "code": "```raku\nsub longest-common-substring(Str $s1, Str $s2) {\n    my $max-length = 0;\n    my $end-index = 0;\n    my @dp = [0 xx $s2.chars + 1] xx $s1.chars + 1;\n\n    for 1 .. $s1.chars -> $i {\n        for 1 .. $s2.chars -> $j {\n            if $s1.substr($i - 1, 1) eq $s2.substr($j - 1, 1) {\n                @dp[$i][$j] = @dp[$i - 1][$j - 1] + 1;\n                if @dp[$i][$j] > $max-length {\n                    $max-length = @dp[$i][$j];\n                    $end-index = $i;\n                }\n            }\n        }\n    }\n\n    return $s1.substr($end-index - $max-length, $max-length);\n}\n```"
  },
  {
    "task": "Write a function that takes a number and returns true if it is a palindrome.",
    "code": "```raku\nsub is-palindrome(Int $number) {\n    my $str = $number.Str;\n    return $str eq $str.flip;\n}\n```"
  },
  {
    "task": "Create a function that returns the average length of words in a given sentence.",
    "code": "```raku\nsub average-word-length(Str $sentence) {\n    my @words = $sentence.split(' ');\n    return [*] @words\u00bb .chars / @words.elems;\n}\n```"
  },
  {
    "task": "Design a function that checks if a string contains only digits and returns a boolean.",
    "code": "```raku\nsub is-all-digits(Str $input) returns Bool {\n    return $input ~~ /^\\d+$/;\n}\n```"
  },
  {
    "task": "Implement a function that receives a list of tuples and returns a list of the first elements.",
    "code": "```raku\nsub first-elements(@tuples) {\n    return @tuples.map(*.[0]);\n}\n```"
  },
  {
    "task": "Write a function that takes a year and returns the Chinese zodiac sign for that year.",
    "code": "```raku\nsub chinese-zodiac-sign(Int $year) {\n    my @zodiac-signs = <Rat Ox Tiger Rabbit Dragon Snake Horse Goat Monkey Rooster Dog Pig>;\n    return @zodiac-signs[($year - 4) % 12];\n}\n\n# Example usage\nsay chinese-zodiac-sign(2021); # Outputs: Ox\n```"
  },
  {
    "task": "Create a function that returns the number of trailing zeros in a factorial of a given number.",
    "code": "```raku\nsub trailing-zeros($n) {\n    my $count = 0;\n    while $n >= 5 {\n        $n div= 5;\n        $count += $n;\n    }\n    return $count;\n}\n\nsay trailing-zeros(10); # Example usage\n```"
  },
  {
    "task": "Develop a function that accepts a list and returns a new list with elements multiplied by their index.",
    "code": "```raku\nsub multiply-by-index(@list) {\n    return @list.map(* * *^index);\n}\n\nmy @result = multiply-by-index(1, 2, 3, 4);\nsay @result; # Output: (0 2 6 12)\n```"
  },
  {
    "task": "Implement a function that receives a string and returns a dictionary of word lengths.",
    "code": "```raku\nsub word-lengths(Str $input) {\n    my %lengths;\n    for $input.words -> $word {\n        %lengths{$word} = $word.chars;\n    }\n    return %lengths;\n}\n```"
  },
  {
    "task": "Write a function that takes a list of integers and returns a list of numbers that are divisible by 3.",
    "code": "```raku\nsub divisible-by-three(@numbers) {\n    @numbers.grep(* %% 3);\n}\n```"
  },
  {
    "task": "Create a function that returns the result of a quadratic equation given its coefficients.",
    "code": "```raku\nsub quadratic-result($a, $b, $c, $x) {\n    return $a * $x ** 2 + $b * $x + $c;\n}\n```"
  },
  {
    "task": "Design a function that checks if two lists have any elements in common and returns a boolean.",
    "code": "```raku\nsub lists_have_common_elements(@list1, @list2) {\n    return any(@list1) \u2208 any(@list2);\n}\n```"
  },
  {
    "task": "Implement a function that accepts a list and returns the sum of its elements using recursion.",
    "code": "```raku\nsub sum-list(@list) {\n    return 0 if @list.elems == 0;\n    return @list[0] + sum-list(@list[1..*]);\n}\n```"
  },
  {
    "task": "Write a function that takes a list of numbers and returns the variance.",
    "code": "```raku\nsub variance(@numbers) {\n    my $mean = @numbers.sum / @numbers.elems;\n    return (@numbers.map({ ($_ - $mean) ** 2 }).sum) / @numbers.elems;\n}\n```"
  },
  {
    "task": "Create a function that returns the ASCII value of a given character.",
    "code": "```raku\nsub ascii-value($char) {\n    return $char.ord;\n}\n```"
  },
  {
    "task": "Develop a function that takes a number and returns the number of bits required for its binary representation.",
    "code": "```raku\nsub bits-required(Int $number) returns Int {\n    return $number.base(2).chars;\n}\n```"
  }
]