[
  {
    "task": "Write a function that checks if two strings are equal, ignoring case sensitivity.",
    "code": "```raku\nsub are-strings-equal($str1, $str2) {\n    return $str1.lc eq $str2.lc;\n}\n```"
  },
  {
    "task": "Create a program that determines if a number is greater than 10.",
    "code": "```raku\nmy $number = 15;\nsay $number > 10 ?? \"Greater than 10\" !! \"Not greater than 10\";\n```"
  },
  {
    "task": "Implement a feature that compares the current date to a given date and returns if it is in the future.",
    "code": "```raku\nuse DateTime;\n\nsub compare-date-to-current($input-date) {\n    my $current-date = DateTime.now;\n    return $input-date > $current-date ?? \"Future\" !! \"Not Future\";\n}\n\nmy $given-date = DateTime.new('2024-01-01T00:00:00Z');\nsay compare-date-to-current($given-date);\n```"
  },
  {
    "task": "Design a system that checks if a user's age is less than 18 and restricts access if true.",
    "code": "```raku\nsub check-access(Int $age) {\n    if $age < 18 {\n        say \"Access restricted.\";\n    } else {\n        say \"Access granted.\";\n    }\n}\n\n# Example usage\ncheck-access(17); # Access restricted.\ncheck-access(18); # Access granted.\n```"
  },
  {
    "task": "Build an algorithm that finds the maximum of three given integers.",
    "code": "```raku\nsub max-of-three(Int $a, Int $b, Int $c) {\n    return ($a > $b ?? $a !! $b) > $c ?? ($a > $b ?? $a !! $b) !! $c;\n}\n\nsay max-of-three(3, 7, 5);\n```"
  },
  {
    "task": "Write a function that verifies if two arrays contain the same elements in the same order.",
    "code": "```raku\nsub arrays-equal(@array1, @array2) {\n    return @array1 === @array2;\n}\n```"
  },
  {
    "task": "Create a script that checks if a product's price is within a specified range.",
    "code": "```raku\nsub check-price-range($price, $min, $max) {\n    if $price >= $min && $price <= $max {\n        say \"The price is within the specified range.\";\n    } else {\n        say \"The price is outside the specified range.\";\n    }\n}\n\nmy $product-price = 50;\nmy $min-price = 30;\nmy $max-price = 100;\n\ncheck-price-range($product-price, $min-price, $max-price);\n```"
  },
  {
    "task": "Develop a tool that compares two versions of a software application and determines which is newer.",
    "code": "```raku\nsub compare-versions(Str $version1, Str $version2) {\n    my @v1 = $version1.split('.').map({ .Int });\n    my @v2 = $version2.split('.').map({ .Int });\n\n    for @v1 Z @v2 -> $n1, $n2 {\n        return 'Version 1 is newer' if $n1 > $n2;\n        return 'Version 2 is newer' if $n1 < $n2;\n    }\n\n    return 'Both versions are the same';\n}\n\nsay compare-versions('1.2.3', '1.2.4');  # Example usage\n```"
  },
  {
    "task": "Implement a test to see if a given year is a leap year.",
    "code": "```raku\nsub is-leap-year(Int $year) {\n    return False if $year %% 100 && !$year %% 400;\n    return True if $year %% 4;\n    return False;\n}\n\nsay is-leap-year(2020); # True\nsay is-leap-year(1900); # False\nsay is-leap-year(2000); # True\n```"
  },
  {
    "task": "Design a feature that tells if a student\u2019s grade is passing or failing based on a threshold.",
    "code": "```raku\nsub is-passing-grade(Int $grade, Int $threshold) {\n    return $grade >= $threshold ?? 'Passing' !! 'Failing';\n}\n\n# Example usage\nmy $student-grade = 75;\nmy $passing-threshold = 60;\nsay is-passing-grade($student-grade, $passing-threshold);\n```"
  },
  {
    "task": "Write a function to compare two file sizes and return the larger one.",
    "code": "```raku\nsub larger-file-size(Str $file1, Str $file2) {\n    my $size1 = $file1.IO.s;\n    my $size2 = $file2.IO.s;\n    return $size1 > $size2 ?? $file1 !! $file2;\n}\n```"
  },
  {
    "task": "Build a program that checks if the temperature is below freezing point.",
    "code": "```raku\nmy $temperature = prompt \"Enter the temperature: \";\nif $temperature < 0 {\n    say \"The temperature is below freezing point.\";\n} else {\n    say \"The temperature is above freezing point.\";\n}\n```"
  },
  {
    "task": "Create a logic that determines if a number is within the Fibonacci sequence.",
    "code": "```raku\nsub is-fibonacci(Int $n) {\n    return False if $n < 0;\n    my ($a, $b) = (0, 1);\n    while $a < $n {\n        ($a, $b) = ($b, $a + $b);\n    }\n    return $a == $n;\n}\n\n# Usage example\nsay is-fibonacci(8);  # True\nsay is-fibonacci(10); # False\n```"
  },
  {
    "task": "Develop a function that checks if a given word is a palindrome.",
    "code": "```raku\nsub is-palindrome(Str $word) {\n    return $word eq $word.flip;\n}\n\nsay is-palindrome('radar');  # True\nsay is-palindrome('hello');  # False\n```"
  },
  {
    "task": "Write a script to see if a password meets a minimum length requirement.",
    "code": "```raku\nmy $minimum-length = 8;\nmy $password = prompt 'Enter your password: ';\nsay $password.chars >= $minimum-length ?? \"Password meets the minimum length requirement.\" !! \"Password is too short.\";\n```"
  },
  {
    "task": "Implement a system that decides if a point is inside a circle based on its coordinates.",
    "code": "```raku\nsub point-inside-circle($x, $y, $circle-x, $circle-y, $radius) {\n    my $distance-squared = ($x - $circle-x) ** 2 + ($y - $circle-y) ** 2;\n    return $distance-squared <= $radius ** 2;\n}\n\n# Example usage:\nsay point-inside-circle(1, 1, 0, 0, 5); # True if inside the circle\nsay point-inside-circle(6, 6, 0, 0, 5); # False if outside the circle\n```"
  },
  {
    "task": "Design a program that checks if a shopping cart total exceeds a certain budget.",
    "code": "```raku\nmy $budget = 100.00;\nmy $shopping-cart-total = 120.50;\n\nif $shopping-cart-total > $budget {\n    say \"The total exceeds the budget.\";\n} else {\n    say \"The total is within the budget.\";\n}\n```"
  },
  {
    "task": "Create a function that compares two players' scores and returns the winner.",
    "code": "```raku\nsub compare-scores(Int $score1, Int $score2) {\n    return 'Player 1 wins' if $score1 > $score2;\n    return 'Player 2 wins' if $score2 > $score1;\n    return 'It\\'s a tie';\n}\n```"
  },
  {
    "task": "Write a program to determine if one string is a substring of another.",
    "code": "```raku\nsub is-substring(Str $str, Str $substr) {\n    return $str.contains($substr);\n}\n\nmy $string = \"Raku programming language\";\nmy $substring = \"programming\";\n\nsay is-substring($string, $substring); # True or False\n```"
  },
  {
    "task": "Build a utility that checks if a number is a prime number.",
    "code": "```raku\nsub is-prime(Int $n) {\n    return False if $n < 2;\n    for 2..sqrt($n).floor -> $i {\n        return False if $n %% $i;\n    }\n    return True;\n}\n\nsay is-prime(11); # Example usage\n```"
  },
  {
    "task": "Write a function that checks if a given number is a perfect square.",
    "code": "```raku\nsub is-perfect-square(Int $n) {\n    return False if $n < 0;\n    my $sqrt = $n.sqrt.Int;\n    return $sqrt * $sqrt == $n;\n}\n\nsay is-perfect-square(16);  # True\nsay is-perfect-square(18);  # False\n```"
  },
  {
    "task": "Create a system that determines if a person is eligible for a senior citizen discount based on their age.",
    "code": "```raku\nsub is-eligible-for-discount(Int $age) {\n    return $age >= 65;\n}\n\nmy $person-age = 70;\nsay \"Eligible for discount\" if is-eligible-for-discount($person-age);\n```"
  },
  {
    "task": "Develop a feature to check if a date falls on a weekend.",
    "code": "```raku\nsub is-weekend(Date $date) {\n    my $day-of-week = $date.day-of-week;\n    return $day-of-week == 6 || $day-of-week == 7;\n}\n\n# Example usage:\nmy $date = Date.new('2023-10-14');\nsay is-weekend($date); # True, because it's a Saturday\n```"
  },
  {
    "task": "Design a program that sees if a given email address is in the correct format.",
    "code": "```raku\nsub is-valid-email($email) {\n    return $email ~~ /<-[\\s]>+ '@' <-[\\s]>+ '.' <-[\\s]>+/\n}\n\nmy $email = 'example@test.com';\nsay is-valid-email($email) ?? 'Valid' !! 'Invalid';\n```"
  },
  {
    "task": "Implement a test to check if a rectangle's area is larger than a triangle's area.",
    "code": "```raku\nsub rectangle-area($width, $height) {\n    return $width * $height;\n}\n\nsub triangle-area($base, $height) {\n    return 0.5 * $base * $height;\n}\n\nmy $rect-width = 5;\nmy $rect-height = 10;\nmy $tri-base = 6;\nmy $tri-height = 8;\n\nmy $rect-area = rectangle-area($rect-width, $rect-height);\nmy $tri-area = triangle-area($tri-base, $tri-height);\n\nsay $rect-area > $tri-area ?? 'Rectangle has a larger area' !! 'Triangle has a larger area';\n```"
  },
  {
    "task": "Write a function that verifies if two rectangles overlap each other.",
    "code": "```raku\nsub rectangles_overlap(%rect1, %rect2) {\n    my ($x1, $y1, $x2, $y2) = %rect1<left top right bottom>;\n    my ($x3, $y3, $x4, $y4) = %rect2<left top right bottom>;\n\n    return !($x1 >= $x4 || $x2 <= $x3 || $y1 >= $y4 || $y2 <= $y3);\n}\n\n# Example usage:\nmy %rect1 = (left => 0, top => 0, right => 2, bottom => 2);\nmy %rect2 = (left => 1, top => 1, right => 3, bottom => 3);\n\nsay rectangles_overlap(%rect1, %rect2); # Outputs: True\n```"
  },
  {
    "task": "Create a script to compare two strings lexicographically.",
    "code": "```raku\nmy $string1 = 'apple';\nmy $string2 = 'banana';\n\nif $string1 lt $string2 {\n    say \"'$string1' is lexicographically less than '$string2'\";\n}\nelsif $string1 gt $string2 {\n    say \"'$string1' is lexicographically greater than '$string2'\";\n}\nelse {\n    say \"'$string1' is lexicographically equal to '$string2'\";\n}\n```"
  },
  {
    "task": "Build a program that checks if a list of numbers is in ascending order.",
    "code": "```raku\nmy @numbers = (1, 2, 3, 4, 5);\n\nif @numbers eqv @numbers.sort {\n    say \"The list is in ascending order.\";\n} else {\n    say \"The list is not in ascending order.\";\n}\n```"
  },
  {
    "task": "Design a system to compare the heights of two buildings.",
    "code": "```raku\nclass Building {\n    has $.height;\n\n    method compare-height(Building $other) {\n        if $!height > $other.height {\n            return \"This building is taller.\";\n        } elsif $!height < $other.height {\n            return \"This building is shorter.\";\n        } else {\n            return \"Both buildings are of the same height.\";\n        }\n    }\n}\n\nmy $building1 = Building.new(height => 150);\nmy $building2 = Building.new(height => 120);\n\nsay $building1.compare-height($building2);\nsay $building2.compare-height($building1);\n```"
  },
  {
    "task": "Write a feature that determines if a given time is before noon.",
    "code": "```raku\nsub is-before-noon(Str $time) {\n    my $noon = '12:00';\n    return $time lt $noon;\n}\n\n# Example usage:\nsay is-before-noon('11:30'); # True\nsay is-before-noon('12:30'); # False\n```"
  },
  {
    "task": "Implement a function to check if a given number is a power of two.",
    "code": "```raku\nsub is-power-of-two(Int $n) {\n    return False if $n <= 0;\n    return ($n +& ($n - 1)) == 0;\n}\n```"
  },
  {
    "task": "Create a program that determines if a word is longer than another word.",
    "code": "```raku\nmy $word1 = \"example\";\nmy $word2 = \"test\";\n\nif $word1.chars > $word2.chars {\n    say \"'$word1' is longer than '$word2'.\";\n} else {\n    say \"'$word1' is not longer than '$word2'.\";\n}\n```"
  },
  {
    "task": "Develop a function to compare the lengths of two lists and return the longer one.",
    "code": "```raku\nsub longer-list(@list1, @list2) {\n    return @list1.elems > @list2.elems ?? @list1 !! @list2;\n}\n```"
  },
  {
    "task": "Write a script to see if a user's input matches a pre-defined secret code.",
    "code": "```raku\nmy $secret-code = 'Raku123';\n\nprint \"Enter the secret code: \";\nmy $user-input = prompt;\n\nif $user-input eq $secret-code {\n    say \"Access granted!\";\n} else {\n    say \"Access denied!\";\n}\n```"
  },
  {
    "task": "Build a utility that checks if a given year is in the 21st century.",
    "code": "```raku\nsub is-21st-century($year) {\n    return $year >= 2001 && $year <= 2100;\n}\n\nsay is-21st-century(2023); # Example usage\n```"
  },
  {
    "task": "Create a logic that determines if a book's publication year is after 2000.",
    "code": "```raku\nmy $publication-year = 2005;\nif $publication-year > 2000 {\n    say \"The book's publication year is after 2000.\";\n} else {\n    say \"The book's publication year is not after 2000.\";\n}\n```"
  },
  {
    "task": "Design a feature to see if a number is divisible by both 3 and 5.",
    "code": "```raku\nsub is-divisible-by-3-and-5(Int $number) {\n    return $number %% 3 && $number %% 5;\n}\n\n# Example usage\nsay is-divisible-by-3-and-5(15);  # True\nsay is-divisible-by-3-and-5(9);   # False\n```"
  },
  {
    "task": "Implement a system that checks if a student's GPA is above a certain threshold.",
    "code": "```raku\nsub check-gpa-above-threshold($gpa, $threshold) {\n    return $gpa > $threshold;\n}\n\n# Example usage\nmy $student-gpa = 3.5;\nmy $threshold-gpa = 3.0;\nsay check-gpa-above-threshold($student-gpa, $threshold-gpa);\n```"
  },
  {
    "task": "Write a function to determine if a given angle is acute, right, or obtuse.",
    "code": "```raku\nsub angle-type($angle) {\n    given $angle {\n        when * < 90  { 'acute' }\n        when 90      { 'right' }\n        when * > 90  { 'obtuse' }\n        default      { 'invalid' }\n    }\n}\n\nsay angle-type(45);   # acute\nsay angle-type(90);   # right\nsay angle-type(120);  # obtuse\n```"
  },
  {
    "task": "Develop a program that compares the lengths of two strings and returns the shorter one.",
    "code": "```raku\nsub shorter-string(Str $str1, Str $str2) {\n    return $str1.chars < $str2.chars ?? $str1 !! $str2;\n}\n\nsay shorter-string('hello', 'world!');\n```"
  },
  {
    "task": "Create a script to verify if a username is unique within a list.",
    "code": "```raku\nmy @usernames = <alice bob charlie>;\nmy $new_username = 'dave';\n\nif $new_username \u2208 @usernames {\n    say \"Username is not unique.\";\n} else {\n    say \"Username is unique.\";\n}\n```"
  },
  {
    "task": "Build a tool that checks if a job applicant meets all the listed qualifications.",
    "code": "```raku\nsub meets_qualifications(%applicant, %qualifications) {\n    for %qualifications.kv -> $key, $value {\n        return False unless %applicant{$key}:exists && %applicant{$key} eq $value;\n    }\n    return True;\n}\n\nmy %applicant = (\n    'degree' => 'Bachelor',\n    'experience' => '5 years',\n    'language' => 'Raku'\n);\n\nmy %qualifications = (\n    'degree' => 'Bachelor',\n    'experience' => '5 years',\n    'language' => 'Raku'\n);\n\nsay meets_qualifications(%applicant, %qualifications); # Outputs: True\n```"
  },
  {
    "task": "Write a feature to see if a vehicle's speed exceeds the speed limit.",
    "code": "```raku\nmy $speed = 80; # example vehicle speed\nmy $speed-limit = 65; # example speed limit\n\nif $speed > $speed-limit {\n    say \"The vehicle's speed exceeds the speed limit.\";\n} else {\n    say \"The vehicle's speed is within the speed limit.\";\n}\n```"
  },
  {
    "task": "Design a system that determines whether a given point is above or below the x-axis.",
    "code": "```raku\nsub point_position($x, $y) {\n    return $y > 0 ?? \"above\" !! $y < 0 ?? \"below\" !! \"on\";\n}\n\nsay point_position(3, 4);  # above\nsay point_position(5, -2); # below\nsay point_position(0, 0);  # on\n```"
  },
  {
    "task": "Create a function that checks if a given word appears in a sentence.",
    "code": "```raku\nsub word-appears($sentence, $word) {\n    return $sentence.contains($word);\n}\n```"
  },
  {
    "task": "Implement a program that identifies whether a given number is negative or positive.",
    "code": "```raku\nsub is_positive_or_negative(Int $number) {\n    if $number > 0 {\n        say \"$number is positive\";\n    } elsif $number < 0 {\n        say \"$number is negative\";\n    } else {\n        say \"$number is neither positive nor negative\";\n    }\n}\n\n# Example usage\nis_positive_or_negative(10);\nis_positive_or_negative(-5);\nis_positive_or_negative(0);\n```"
  },
  {
    "task": "Write a script to see if the sum of two numbers is greater than 100.",
    "code": "```raku\nmy ($num1, $num2) = (50, 60);\nsay $num1 + $num2 > 100 ?? 'Greater than 100' !! 'Not greater than 100';\n```"
  },
  {
    "task": "Build a utility that checks if a file exists in a specified directory.",
    "code": "```raku\nsub file-exists-in-dir($filename, $dir) {\n    my $path = \"$dir/$filename\";\n    return $path.IO.e;\n}\n\n# Usage example\nmy $file = \"example.txt\";\nmy $directory = \"/path/to/directory\";\nsay file-exists-in-dir($file, $directory) ?? \"File exists\" !! \"File does not exist\";\n```"
  },
  {
    "task": "Develop a system to compare the weights of two different objects.",
    "code": "```raku\nclass Object {\n    has $.weight;\n\n    method compare-weight(Object $other) {\n        given $.weight <=> $other.weight {\n            when -1 { return \"Object 1 is lighter than Object 2\" }\n            when  0 { return \"Both objects have the same weight\" }\n            when  1 { return \"Object 1 is heavier than Object 2\" }\n        }\n    }\n}\n\nmy $object1 = Object.new(weight => 10);\nmy $object2 = Object.new(weight => 15);\n\nsay $object1.compare-weight($object2);\n```"
  },
  {
    "task": "Create a logic to determine if a number falls within a defined range.",
    "code": "```raku\nmy $number = 42;\nmy $lower_bound = 10;\nmy $upper_bound = 100;\n\nif $number >= $lower_bound && $number <= $upper_bound {\n    say \"$number is within the range.\";\n} else {\n    say \"$number is outside the range.\";\n}\n```"
  },
  {
    "task": "Design a program that checks if an employee worked overtime based on hours worked.",
    "code": "```raku\nsub check-overtime(Int $hours-worked) {\n    return $hours-worked > 40 ?? \"Overtime\" !! \"No Overtime\";\n}\n\nsay check-overtime(45); # Example usage\n```"
  },
  {
    "task": "Write a function to compare two dates and determine which is earlier.",
    "code": "```raku\nsub compare-dates(Str $date1, Str $date2) {\n    my $d1 = Date.new($date1);\n    my $d2 = Date.new($date2);\n    \n    given $d1 <=> $d2 {\n        when -1 { return \"$date1 is earlier than $date2\"; }\n        when  0 { return \"$date1 is the same as $date2\"; }\n        when  1 { return \"$date1 is later than $date2\"; }\n    }\n}\n```"
  },
  {
    "task": "Create a script that verifies if a given word starts with a vowel.",
    "code": "```raku\nsub starts-with-vowel($word) {\n    return $word ~~ /^\\<[aeiouAEIOU]\\>/;\n}\n\nmy $word = prompt \"Enter a word: \";\nsay starts-with-vowel($word) ?? \"Starts with a vowel\" !! \"Does not start with a vowel\";\n```"
  },
  {
    "task": "Build a utility that checks if a number is even or odd.",
    "code": "```raku\nsub check-even-odd(Int $number) {\n    if $number % 2 == 0 {\n        return 'Even';\n    }\n    else {\n        return 'Odd';\n    }\n}\n\nsay check-even-odd(10); # Even\nsay check-even-odd(7);  # Odd\n```"
  },
  {
    "task": "Implement a system that determines if a string contains only numeric characters.",
    "code": "```raku\nsub is-numeric-str($str) {\n    return $str ~~ /^\\d+$/;\n}\n\nsay is-numeric-str(\"12345\");   # True\nsay is-numeric-str(\"123a5\");   # False\n```"
  },
  {
    "task": "Write a function to see if a given character is a vowel or consonant.",
    "code": "```raku\nsub is-vowel-or-consonant(Str $char) {\n    given $char.lc {\n        when 'a' | 'e' | 'i' | 'o' | 'u' { 'vowel' }\n        default { 'consonant' }\n    }\n}\n\nsay is-vowel-or-consonant('A'); # Output: vowel\nsay is-vowel-or-consonant('b'); # Output: consonant\n```"
  },
  {
    "task": "Create a program that checks if a point lies within a specified rectangle.",
    "code": "```raku\nsub point_in_rectangle($px, $py, $x1, $y1, $x2, $y2) {\n    return $px >= $x1 && $px <= $x2 && $py >= $y1 && $py <= $y2;\n}\n\nmy $point-x = 5;\nmy $point-y = 5;\nmy $rect-x1 = 0;\nmy $rect-y1 = 0;\nmy $rect-x2 = 10;\nmy $rect-y2 = 10;\n\nsay point_in_rectangle($point-x, $point-y, $rect-x1, $rect-y1, $rect-x2, $rect-y2);\n```"
  },
  {
    "task": "Develop a feature to compare two lists and return the common elements.",
    "code": "```raku\nmy @list1 = <1 2 3 4 5>;\nmy @list2 = <3 4 5 6 7>;\n\nmy @common = @list1 \u2229 @list2;\nsay @common;\n```"
  },
  {
    "task": "Design a function that determines if a text contains any uppercase letters.",
    "code": "```raku\nsub contains-uppercase(Str $text) {\n    return $text ~~ /<:upper>/;\n}\n```"
  },
  {
    "task": "Implement a script to check if a given sentence is a question.",
    "code": "```raku\nsub is-question(Str $sentence) {\n    return $sentence.trim.ends-with('?');\n}\n\nmy $sentence = prompt \"Enter a sentence: \";\nsay is-question($sentence) ?? \"It's a question.\" !! \"It's not a question.\";\n```"
  },
  {
    "task": "Write a program to determine if a temperature is measured in Celsius or Fahrenheit.",
    "code": "```raku\nsub determine-temperature($temp) {\n    if $temp ~~ /^ '-'? \\d+ 'C' $/ {\n        return 'Celsius';\n    }\n    elsif $temp ~~ /^ '-'? \\d+ 'F' $/ {\n        return 'Fahrenheit';\n    }\n    else {\n        return 'Unknown format';\n    }\n}\n\n# Example usage:\nsay determine-temperature('25C'); # Celsius\nsay determine-temperature('-10F'); # Fahrenheit\nsay determine-temperature('100K'); # Unknown format\n```"
  },
  {
    "task": "Create a system that verifies if a student is enrolled in a particular course.",
    "code": "```raku\nclass Course {\n    has Str $.name;\n    has Set $.students;\n    \n    method is-student-enrolled(Str $student-name) {\n        return $student-name \u2208 $!students;\n    }\n}\n\nmy $course = Course.new(name => 'Math 101', students => <Alice Bob Charlie>);\nsay $course.is-student-enrolled('Alice');   # True\nsay $course.is-student-enrolled('David');   # False\n```"
  },
  {
    "task": "Build a utility to check if a given string is a valid hexadecimal number.",
    "code": "```raku\nsub is-valid-hexadecimal(Str $str) {\n    return $str ~~ /^ 0x <[0..9 a..f A..F]>+ $/;\n}\n\nsay is-valid-hexadecimal('0x1a3f'); # True\nsay is-valid-hexadecimal('123abc'); # False\n```"
  },
  {
    "task": "Write a function to see if two circles intersect based on their radii and center points.",
    "code": "```raku\nsub circles-intersect(($x1, $y1, $r1), ($x2, $y2, $r2)) {\n    my $distance = sqrt(($x2 - $x1)\u00b2 + ($y2 - $y1)\u00b2);\n    return $distance <= ($r1 + $r2);\n}\n```"
  },
  {
    "task": "Develop a program that checks if a given number is within 10% of another number.",
    "code": "```raku\nsub is_within_10_percent($num1, $num2) {\n    my $tolerance = 0.1 * $num2.abs;\n    return $num1 >= $num2 - $tolerance && $num1 <= $num2 + $tolerance;\n}\n\nmy $number1 = 105;\nmy $number2 = 100;\n\nsay is_within_10_percent($number1, $number2);\n```"
  },
  {
    "task": "Create a feature to determine if a character is alphanumeric.",
    "code": "```raku\nsub is-alphanumeric(Str $char) {\n    return $char ~~ /<:L>/ || $char ~~ /<:N>/;\n}\n\nsay is-alphanumeric('a');  # True\nsay is-alphanumeric('1');  # True\nsay is-alphanumeric('*');  # False\n```"
  },
  {
    "task": "Implement a system to compare the profit margins of two products.",
    "code": "```raku\nclass Product {\n    has Str $.name;\n    has Num $.cost;\n    has Num $.revenue;\n\n    method profit-margin() {\n        return ($.revenue - $.cost) / $.revenue;\n    }\n}\n\nmy $product1 = Product.new(name => 'Product A', cost => 50, revenue => 100);\nmy $product2 = Product.new(name => 'Product B', cost => 70, revenue => 150);\n\nmy $margin1 = $product1.profit-margin();\nmy $margin2 = $product2.profit-margin();\n\nsay \"Product A has a higher profit margin\" if $margin1 > $margin2;\nsay \"Product B has a higher profit margin\" if $margin1 < $margin2;\nsay \"Both products have the same profit margin\" if $margin1 == $margin2;\n```"
  },
  {
    "task": "Design a script to check if a given string contains any special characters.",
    "code": "```raku\nsub contains-special-characters(Str $input) {\n    my $special-chars = $input ~~ /<-[\\w\\s]>/;\n    return $special-chars ?? True !! False;\n}\n\nmy $string = \"Hello, World!\";\nsay contains-special-characters($string);\n```"
  },
  {
    "task": "Write a function to verify if a number is a multiple of another number.",
    "code": "```raku\nsub is-multiple($num, $factor) {\n    return $num %% $factor;\n}\n```"
  },
  {
    "task": "Create a program that checks if a date is a holiday based on a list of holidays.",
    "code": "```raku\nmy @holidays = <2023-12-25 2024-01-01 2024-07-04>;\nsub is-holiday(Str $date) {\n    return $date eq any(@holidays);\n}\n\nmy $date-to-check = '2023-12-25';\nsay is-holiday($date-to-check) ?? 'It is a holiday!' !! 'It is not a holiday.';\n```"
  },
  {
    "task": "Build a utility to compare two text files and highlight the differences.",
    "code": "```raku\nuse Text::Diff;\n\nsub compare-files($file1, $file2) {\n    my $text1 = $file1.IO.slurp;\n    my $text2 = $file2.IO.slurp;\n    my $diff = diff $text1, $text2, :STYLE<Unified>;\n    say $diff;\n}\n\ncompare-files('file1.txt', 'file2.txt');\n```"
  },
  {
    "task": "Develop a function to determine if a given password is strong based on length and character diversity.",
    "code": "```raku\nsub is-strong-password(Str $password) {\n    my $has-lower = $password ~~ /<[a..z]>/;\n    my $has-upper = $password ~~ /<[A..Z]>/;\n    my $has-digit = $password ~~ /\\d/;\n    my $has-special = $password ~~ /\\W/;\n    my $is-long-enough = $password.chars >= 8;\n\n    return $is-long-enough && $has-lower && $has-upper && $has-digit && $has-special;\n}\n\nsay is-strong-password('Aa1!bcdef');  # True example\nsay is-strong-password('Aa1bcdef');   # False example\n```"
  },
  {
    "task": "Write a script to see if a number is within a specified distance from zero.",
    "code": "```raku\nsub within-distance-from-zero($number, $distance) {\n    return $number.abs <= $distance;\n}\n\nmy $number = 5;\nmy $distance = 10;\nsay within-distance-from-zero($number, $distance); # True if within distance, False otherwise\n```"
  },
  {
    "task": "Create a system to check if a book title is available in a library database.",
    "code": "```raku\nmy %library-database = (\n    'The Great Gatsby' => True,\n    '1984'             => True,\n    'To Kill a Mockingbird' => False,\n    'Pride and Prejudice'   => True,\n);\n\nsub is-book-available($title) {\n    if %library-database{$title}:exists {\n        return %library-database{$title};\n    }\n    else {\n        return False;\n    }\n}\n\n# Example usage:\nsay is-book-available('1984');               # True\nsay is-book-available('To Kill a Mockingbird'); # False\nsay is-book-available('Moby Dick');          # False\n```"
  },
  {
    "task": "Implement a feature that determines if a user has administrator privileges.",
    "code": "```raku\nmy %user = (\n    name => 'John Doe',\n    role => 'admin'\n);\n\nsub has-admin-privileges(%user) {\n    return %user<role> eq 'admin';\n}\n\nsay has-admin-privileges(%user) ?? \"User has admin privileges.\" !! \"User does not have admin privileges.\";\n```"
  },
  {
    "task": "Design a function to compare the brightness of two colors.",
    "code": "```raku\nsub brightness($r, $g, $b) {\n    return (0.299 * $r + 0.587 * $g + 0.114 * $b);\n}\n\nsub compare-brightness(@color1, @color2) {\n    my $brightness1 = brightness(@color1);\n    my $brightness2 = brightness(@color2);\n    return $brightness1 <=> $brightness2;\n}\n\n# Example usage:\nsay compare-brightness([255, 0, 0], [0, 255, 0]); # Output: -1, 0, or 1\n```"
  },
  {
    "task": "Write a program to verify if a number is a valid credit card number using the Luhn algorithm.",
    "code": "```raku\nsub luhn-check(Int $number) {\n    my @digits = $number.comb.reverse.map(*.Int);\n    my $sum = 0;\n    for @digits.kv -> $i, $digit {\n        $sum += $i %% 2 ?? $digit !! (($digit * 2) > 9 ?? ($digit * 2 - 9) !! ($digit * 2));\n    }\n    return $sum %% 10 == 0;\n}\n\nmy $number = 1234567812345670;\nsay luhn-check($number) ?? \"Valid\" !! \"Invalid\";\n```"
  },
  {
    "task": "Create a script to determine if a given string is a valid IP address.",
    "code": "```raku\nsub is-valid-ip($ip) {\n    return $ip ~~ /^ (\\d ** 1..3) '.' (\\d ** 1..3) '.' (\\d ** 1..3) '.' (\\d ** 1..3) $/ && \n           all($ip.split('.').map({ $_.Int <= 255 }));\n}\n\nmy $ip = prompt \"Enter an IP address to validate: \";\nsay is-valid-ip($ip) ?? \"Valid IP address\" !! \"Invalid IP address\";\n```"
  },
  {
    "task": "Build a utility that checks if a number is part of an arithmetic sequence.",
    "code": "```raku\nsub is-part-of-sequence($number, $start, $difference) {\n    return False if $difference == 0;\n    ($number - $start) %% $difference;\n}\n\n# Example usage:\nsay is-part-of-sequence(10, 2, 2);  # True\nsay is-part-of-sequence(9, 2, 2);   # False\n```"
  },
  {
    "task": "Develop a feature to compare the efficiency of two algorithms based on time complexity.",
    "code": "```raku\nclass Algorithm {\n    has Str $.name;\n    has Str $.complexity;\n\n    method compare(Algorithm $other) {\n        my %order = (\n            'O(1)' => 1,\n            'O(log n)' => 2,\n            'O(n)' => 3,\n            'O(n log n)' => 4,\n            'O(n^2)' => 5,\n            'O(n^3)' => 6,\n            'O(2^n)' => 7,\n            'O(n!)' => 8,\n        );\n        \n        my $this-order = %order{$!complexity} // 0;\n        my $other-order = %order{$other.complexity} // 0;\n        \n        if $this-order < $other-order {\n            return \"$!name is more efficient than {$other.name}\";\n        }\n        elsif $this-order > $other-order {\n            return \"$!name is less efficient than {$other.name}\";\n        }\n        else {\n            return \"$!name and {$other.name} have the same efficiency\";\n        }\n    }\n}\n\nmy $algo1 = Algorithm.new(name => 'Algorithm A', complexity => 'O(n)');\nmy $algo2 = Algorithm.new(name => 'Algorithm B', complexity => 'O(n log n)');\n\nsay $algo1.compare($algo2);\n```"
  },
  {
    "task": "Write a function to see if a given date falls in a leap year.",
    "code": "```raku\nsub is-leap-year(Int $year) {\n    return False unless $year %% 4;\n    return True if $year %% 400;\n    return $year %% 100 ?? False !! True;\n}\n\nsub date-in-leap-year(Date $date) {\n    return is-leap-year($date.year);\n}\n```"
  },
  {
    "task": "Create a program that determines if a user's subscription is active based on the current date.",
    "code": "```raku\nuse DateTime;\n\nsub is-subscription-active(DateTime:D $expiry-date) {\n    my $current-date = DateTime.now;\n    return $current-date <= $expiry-date;\n}\n\n# Example usage:\nmy $expiry-date = DateTime.new('2023-12-31T23:59:59Z');\nsay is-subscription-active($expiry-date); # Output: True or False based on current date\n```"
  },
  {
    "task": "Design a tool to check if a user\u2019s input is a palindrome phrase, ignoring spaces and punctuation.",
    "code": "```raku\nsub is-palindrome($phrase) {\n    my $cleaned = $phrase.lc.comb.grep(/\\w/).join('');\n    return $cleaned eq $cleaned.flip;\n}\n\nsay \"Enter a phrase:\";\nmy $input = prompt;\nif is-palindrome($input) {\n    say \"The phrase is a palindrome\";\n} else {\n    say \"The phrase is not a palindrome\";\n}\n```"
  },
  {
    "task": "Implement a system to verify if a given number is part of the Fibonacci sequence.",
    "code": "```raku\nsub is-fibonacci(Int $n) {\n    my sub is-perfect-square(Int $x) {\n        my $s = sqrt($x);\n        return $s == $s.Int;\n    }\n    \n    return is-perfect-square(5 * $n ** 2 + 4) || is-perfect-square(5 * $n ** 2 - 4);\n}\n\n# Example usage:\nsay is-fibonacci(21);    # True\nsay is-fibonacci(22);    # False\n```"
  },
  {
    "task": "Write a program to compare the elevation of two geographic locations.",
    "code": "```raku\nmy $location1-elevation = 2500; # Elevation in meters\nmy $location2-elevation = 3000; # Elevation in meters\n\nif $location1-elevation > $location2-elevation {\n    say \"Location 1 is at a higher elevation than Location 2.\";\n} elsif $location1-elevation < $location2-elevation {\n    say \"Location 2 is at a higher elevation than Location 1.\";\n} else {\n    say \"Both locations are at the same elevation.\";\n}\n```"
  },
  {
    "task": "Create a function to determine if a given string is a valid JSON format.",
    "code": "```raku\nuse JSON::Fast;\n\nsub is-valid-json(Str $input) {\n    try from-json($input);\n    return $! == Nil;\n}\n\n# Example usage\nsay is-valid-json('{\"name\": \"Raku\", \"type\": \"Language\"}'); # True\nsay is-valid-json('{name: Raku, type: Language}');          # False\n```"
  },
  {
    "task": "Build a utility that checks if a number is a factorial of any integer.",
    "code": "```raku\nsub is-factorial(Int $n) {\n    my Int $factorial = 1;\n    my Int $i = 1;\n\n    while $factorial <= $n {\n        return True if $factorial == $n;\n        $i++;\n        $factorial *= $i;\n    }\n\n    return False;\n}\n\nsay is-factorial(120); # Example usage\n```"
  },
  {
    "task": "Develop a feature to compare the widths of two ribbons and return the wider one.",
    "code": "```raku\nsub wider-ribbon($width1, $width2) {\n    return $width1 > $width2 ?? $width1 !! $width2;\n}\n\nsay wider-ribbon(5, 7); # Output: 7\nsay wider-ribbon(10, 3); # Output: 10\n```"
  },
  {
    "task": "Write a script to see if a word is present in a list of banned words.",
    "code": "```raku\nmy @banned-words = <foo bar baz>;\nmy $word = 'bar';\n\nif $word \u2208 @banned-words {\n    say \"'$word' is a banned word.\";\n} else {\n    say \"'$word' is not a banned word.\";\n}\n```"
  },
  {
    "task": "Design a system to determine if a patient's temperature is in the normal range.",
    "code": "```raku\nsub is-temperature-normal(Num $temperature) {\n    return $temperature >= 36.5 && $temperature <= 37.5;\n}\n\nmy $patient-temperature = 37.0;\nsay \"Temperature is normal\" if is-temperature-normal($patient-temperature);\nsay \"Temperature is not normal\" unless is-temperature-normal($patient-temperature);\n```"
  },
  {
    "task": "Create a program that checks if a given time is during business hours.",
    "code": "```raku\nsub is-business-hours(Str $time) {\n    my ($hour, $minute) = $time.split(':').map({ .Int });\n    return $hour >= 9 && $hour < 17;\n}\n\nmy $input-time = '14:30';\nsay is-business-hours($input-time) ?? \"During business hours\" !! \"Outside business hours\";\n```"
  },
  {
    "task": "Implement a function to see if a number is a triangular number.",
    "code": "```raku\nsub is-triangular-number(Int $n) {\n    my $x = (8 * $n + 1).sqrt;\n    return $x == $x.Int;\n}\n\n# Example usage\nsay is-triangular-number(6);  # True\nsay is-triangular-number(8);  # False\n```"
  },
  {
    "task": "Write a feature to compare the number of vowels in two given strings.",
    "code": "```raku\nsub count-vowels(Str $s) {\n    return $s.comb(/<[aeiouAEIOU]>/).elems;\n}\n\nsub compare-vowels(Str $str1, Str $str2) {\n    my $vowels1 = count-vowels($str1);\n    my $vowels2 = count-vowels($str2);\n\n    if $vowels1 > $vowels2 {\n        return 'First string has more vowels';\n    }\n    elsif $vowels1 < $vowels2 {\n        return 'Second string has more vowels';\n    }\n    else {\n        return 'Both strings have the same number of vowels';\n    }\n}\n\nsay compare-vowels('hello', 'world');\n```"
  }
]