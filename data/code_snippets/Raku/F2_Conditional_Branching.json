[
  {
    "task": "Write a program that checks if a number is even or odd and outputs the result.",
    "code": "```raku\nmy $number = 42; # example number\n\nif $number %% 2 {\n    say \"$number is even\";\n} else {\n    say \"$number is odd\";\n}\n```"
  },
  {
    "task": "Create a function that determines if a given year is a leap year.",
    "code": "```raku\nsub is-leap-year(Int $year) {\n    if $year %% 400 {\n        return True;\n    }\n    elsif $year %% 100 {\n        return False;\n    }\n    elsif $year %% 4 {\n        return True;\n    }\n    else {\n        return False;\n    }\n}\n```"
  },
  {
    "task": "Develop a script that categorizes an input number as positive, negative, or zero.",
    "code": "```raku\nsub categorize-number($num) {\n    if $num > 0 {\n        say \"Positive\";\n    } elsif $num < 0 {\n        say \"Negative\";\n    } else {\n        say \"Zero\";\n    }\n}\n\n# Example usage\ncategorize-number(10);   # Output: Positive\ncategorize-number(-5);   # Output: Negative\ncategorize-number(0);    # Output: Zero\n```"
  },
  {
    "task": "Implement a system that grants access only if a correct password and username are provided.",
    "code": "```raku\nmy %credentials = 'admin' => 'password123';\n\nsub grant-access($username, $password) {\n    if %credentials{$username}:exists && %credentials{$username} eq $password {\n        say \"Access granted.\";\n    } else {\n        say \"Access denied.\";\n    }\n}\n\n# Example usage\ngrant-access('admin', 'password123');\ngrant-access('user', 'wrongpassword');\n```"
  },
  {
    "task": "Design a program that outputs 'Fizz' for numbers divisible by 3, 'Buzz' for numbers divisible by 5, and 'FizzBuzz' for numbers divisible by both.",
    "code": "```raku\nfor 1..100 -> $i {\n    if $i %% 15 {\n        say 'FizzBuzz';\n    }\n    elsif $i %% 3 {\n        say 'Fizz';\n    }\n    elsif $i %% 5 {\n        say 'Buzz';\n    }\n    else {\n        say $i;\n    }\n}\n```"
  },
  {
    "task": "Write a function to determine if a character is a vowel or a consonant.",
    "code": "```raku\nsub is-vowel-or-consonant(Str $char) {\n    given $char.lc {\n        when 'a' | 'e' | 'i' | 'o' | 'u' { return 'vowel' }\n        default { return 'consonant' }\n    }\n}\n\nsay is-vowel-or-consonant('a'); # Output: vowel\nsay is-vowel-or-consonant('b'); # Output: consonant\n```"
  },
  {
    "task": "Create a program that assigns letter grades based on numerical scores.",
    "code": "```raku\nsub get-grade($score) {\n    given $score {\n        when $_ >= 90 { 'A' }\n        when $_ >= 80 { 'B' }\n        when $_ >= 70 { 'C' }\n        when $_ >= 60 { 'D' }\n        default { 'F' }\n    }\n}\n\nmy $score = 85;\nsay \"The grade for score $score is \" ~ get-grade($score);\n```"
  },
  {
    "task": "Develop a routine that suggests clothing based on the current temperature.",
    "code": "```raku\nsub suggest-clothing(Int $temperature) {\n    given $temperature {\n        when $_ <= 0 {\n            say \"Wear a heavy coat, scarf, and gloves.\";\n        }\n        when 1..10 {\n            say \"Wear a coat and a hat.\";\n        }\n        when 11..20 {\n            say \"Wear a jacket.\";\n        }\n        when 21..30 {\n            say \"Wear a t-shirt and jeans.\";\n        }\n        default {\n            say \"Wear shorts and a tank top.\";\n        }\n    }\n}\n\n# Example usage:\nsuggest-clothing(15);  # Outputs: Wear a jacket.\n```"
  },
  {
    "task": "Implement a system that checks if a user is an adult or a minor based on their age.",
    "code": "```raku\nsub check-age(Int $age) {\n    if $age >= 18 {\n        say \"User is an adult.\";\n    } else {\n        say \"User is a minor.\";\n    }\n}\n\n# Example usage\ncheck-age(20);  # Output: User is an adult.\ncheck-age(16);  # Output: User is a minor.\n```"
  },
  {
    "task": "Design a program that validates if a triangle can exist based on its side lengths.",
    "code": "```raku\nsub is-valid-triangle($a, $b, $c) {\n    return $a > 0 && $b > 0 && $c > 0 && $a + $b > $c && $a + $c > $b && $b + $c > $a;\n}\n\nmy $a = prompt(\"Enter side a: \").Int;\nmy $b = prompt(\"Enter side b: \").Int;\nmy $c = prompt(\"Enter side c: \").Int;\n\nif is-valid-triangle($a, $b, $c) {\n    say \"The triangle is valid.\";\n} else {\n    say \"The triangle is not valid.\";\n}\n```"
  },
  {
    "task": "Write a function that determines the largest of three input numbers.",
    "code": "```raku\nsub largest-of-three($a, $b, $c) {\n    if $a >= $b && $a >= $c {\n        return $a;\n    }\n    elsif $b >= $a && $b >= $c {\n        return $b;\n    }\n    else {\n        return $c;\n    }\n}\n```"
  },
  {
    "task": "Create a program that checks if a string is a palindrome.",
    "code": "```raku\nsub is-palindrome(Str $str) {\n    return $str eq $str.flip;\n}\n\nmy $input = prompt(\"Enter a string: \");\nif is-palindrome($input) {\n    say \"'$input' is a palindrome.\";\n} else {\n    say \"'$input' is not a palindrome.\";\n}\n```"
  },
  {
    "task": "Develop a routine that calculates the total cost with a discount applied if applicable.",
    "code": "```raku\nsub calculate-total-cost($amount, $discount-threshold, $discount-rate) {\n    my $total = $amount;\n    if $amount >= $discount-threshold {\n        $total -= $amount * $discount-rate;\n    }\n    return $total;\n}\n\n# Example usage\nmy $cost = calculate-total-cost(100, 50, 0.1);\nsay $cost; # Outputs: 90\n```"
  },
  {
    "task": "Implement a system that checks if a person is eligible to vote based on age and citizenship.",
    "code": "```raku\nsub check-eligibility(Int $age, Str $citizenship) {\n    if $age >= 18 && $citizenship eq 'citizen' {\n        say \"Eligible to vote\";\n    } else {\n        say \"Not eligible to vote\";\n    }\n}\n\nmy $age = 20;\nmy $citizenship = 'citizen';\ncheck-eligibility($age, $citizenship);\n```"
  },
  {
    "task": "Design a function that returns the day of the week given a number from 1 to 7.",
    "code": "```raku\nsub day-of-week(Int $day) {\n    given $day {\n        when 1 { 'Monday' }\n        when 2 { 'Tuesday' }\n        when 3 { 'Wednesday' }\n        when 4 { 'Thursday' }\n        when 5 { 'Friday' }\n        when 6 { 'Saturday' }\n        when 7 { 'Sunday' }\n        default { 'Invalid day' }\n    }\n}\n```"
  },
  {
    "task": "Write a program that determines if a word is found within a given sentence.",
    "code": "```raku\nsub word_in_sentence($word, $sentence) {\n    if $sentence.contains($word) {\n        say \"Word found.\";\n    } else {\n        say \"Word not found.\";\n    }\n}\n\nmy $word = 'example';\nmy $sentence = 'This is an example sentence.';\nword_in_sentence($word, $sentence);\n```"
  },
  {
    "task": "Create a script that checks if a number is within a specified range.",
    "code": "```raku\nmy $number = 42; # Example number\nmy $lower_bound = 10;\nmy $upper_bound = 50;\n\nif $number >= $lower_bound && $number <= $upper_bound {\n    say \"$number is within the range $lower_bound to $upper_bound\";\n} else {\n    say \"$number is outside the range $lower_bound to $upper_bound\";\n}\n```"
  },
  {
    "task": "Develop a routine to decide if a user input is a valid email address.",
    "code": "```raku\nsub is-valid-email($email) {\n    if $email ~~ /^^ <[ \\w . % + - ]>+ '@' <[ \\w . - ]>+ \\. <[ \\w ]>+ $$/ {\n        return True;\n    } else {\n        return False;\n    }\n}\n\nsay \"Enter an email address:\";\nmy $input = prompt();\n\nif is-valid-email($input) {\n    say \"Valid email address.\";\n} else {\n    say \"Invalid email address.\";\n}\n```"
  },
  {
    "task": "Implement a program that categorizes a number as small, medium, or large.",
    "code": "```raku\nsub categorize-number(Int $number) {\n    given $number {\n        when * < 10 {\n            say \"small\";\n        }\n        when * <= 100 {\n            say \"medium\";\n        }\n        default {\n            say \"large\";\n        }\n    }\n}\n\n# Example usage:\ncategorize-number(5);   # Output: small\ncategorize-number(50);  # Output: medium\ncategorize-number(150); # Output: large\n```"
  },
  {
    "task": "Design a function that outputs the season based on the month provided.",
    "code": "```raku\nsub get-season(Str $month) {\n    given $month.lc {\n        when 'december' | 'january' | 'february' { 'Winter' }\n        when 'march' | 'april' | 'may' { 'Spring' }\n        when 'june' | 'july' | 'august' { 'Summer' }\n        when 'september' | 'october' | 'november' { 'Autumn' }\n        default { 'Unknown month' }\n    }\n}\n\nsay get-season('March');  # Example usage\n```"
  },
  {
    "task": "Write a program that checks if a string contains only alphabetic characters.",
    "code": "```raku\nsub check-alphabetic($str) {\n    if $str ~~ /^ <[a..zA..Z]>+ $/ {\n        say \"The string contains only alphabetic characters.\";\n    } else {\n        say \"The string contains non-alphabetic characters.\";\n    }\n}\n\nmy $input = \"HelloWorld\";\ncheck-alphabetic($input);\n```"
  },
  {
    "task": "Create a routine that decides the type of triangle based on its angles.",
    "code": "```raku\nsub triangle-type($angle1, $angle2, $angle3) {\n    if $angle1 + $angle2 + $angle3 != 180 {\n        return 'Not a triangle';\n    }\n    elsif $angle1 == 90 || $angle2 == 90 || $angle3 == 90 {\n        return 'Right triangle';\n    }\n    elsif $angle1 > 90 || $angle2 > 90 || $angle3 > 90 {\n        return 'Obtuse triangle';\n    }\n    else {\n        return 'Acute triangle';\n    }\n}\n\nsay triangle-type(60, 60, 60);  # Acute triangle\nsay triangle-type(90, 45, 45);  # Right triangle\nsay triangle-type(120, 30, 30); # Obtuse triangle\nsay triangle-type(0, 0, 0);     # Not a triangle\n```"
  },
  {
    "task": "Develop a program that suggests a meal based on the time of day.",
    "code": "```raku\nmy $hour = DateTime.now.hour;\n\nmy $suggestion = \n    $hour < 11 ?? \"Breakfast\" !!\n    $hour < 17 ?? \"Lunch\" !!\n    $hour < 21 ?? \"Dinner\" !!\n    \"Late-night Snack\";\n\nsay \"Suggested meal for this time: $suggestion\";\n```"
  },
  {
    "task": "Implement a function that determines if a point lies within a circle given its radius.",
    "code": "```raku\nsub is-point-in-circle($x, $y, $radius) {\n    my $distance-squared = $x**2 + $y**2;\n    return $distance-squared <= $radius**2;\n}\n\nsay is-point-in-circle(1, 1, 2); # Example usage\n```"
  },
  {
    "task": "Design a script that calculates overtime pay based on hours worked.",
    "code": "```raku\nmy $hours-worked = prompt(\"Enter hours worked: \").Int;\nmy $hourly-rate = prompt(\"Enter hourly rate: \").Num;\nmy $overtime-pay;\n\nif $hours-worked > 40 {\n    $overtime-pay = ($hours-worked - 40) * ($hourly-rate * 1.5) + (40 * $hourly-rate);\n} else {\n    $overtime-pay = $hours-worked * $hourly-rate;\n}\n\nsay \"Total pay: \\$\" ~ $overtime-pay;\n```"
  },
  {
    "task": "Write a program that checks if two strings are anagrams of each other.",
    "code": "```raku\nsub is-anagram(Str $str1, Str $str2) {\n    return $str1.comb.sort.join eq $str2.comb.sort.join;\n}\n\nmy $string1 = \"listen\";\nmy $string2 = \"silent\";\n\nif is-anagram($string1, $string2) {\n    say \"'$string1' and '$string2' are anagrams.\";\n} else {\n    say \"'$string1' and '$string2' are not anagrams.\";\n}\n```"
  },
  {
    "task": "Create a function that classifies numbers as prime or composite.",
    "code": "```raku\nsub classify-number(Int $n) {\n    return 'neither prime nor composite' if $n < 2;\n    return 'composite' if $n > 2 && $n %% 2;\n    for 3, 5 ... sqrt($n) -> $i {\n        return 'composite' if $n %% $i == 0;\n    }\n    return 'prime';\n}\n\nsay classify-number(11);  # Example usage\n```"
  },
  {
    "task": "Develop a routine to determine if a number is a power of two.",
    "code": "```raku\nsub is-power-of-two(Int $n) {\n    return False if $n <= 0;\n    return ($n +& ($n - 1)) == 0;\n}\n\nsay is-power-of-two(1);   # True\nsay is-power-of-two(2);   # True\nsay is-power-of-two(3);   # False\nsay is-power-of-two(4);   # True\n```"
  },
  {
    "task": "Implement a program that checks if a list is sorted in ascending order.",
    "code": "```raku\nmy @list = <1 2 3 4 5>;\n\nsub is-sorted(@list) {\n    for 0..@list.elems-2 -> $i {\n        if @list[$i] > @list[$i + 1] {\n            return False;\n        }\n    }\n    return True;\n}\n\nsay is-sorted(@list);\n```"
  },
  {
    "task": "Design a function that suggests a sport based on the weather conditions.",
    "code": "```raku\nsub suggest-sport(Str $weather) {\n    given $weather {\n        when 'sunny'   { return 'Play tennis' }\n        when 'rainy'   { return 'Go swimming indoors' }\n        when 'windy'   { return 'Fly a kite' }\n        when 'snowy'   { return 'Go skiing' }\n        default        { return 'Stay indoors and read a book' }\n    }\n}\n\nsay suggest-sport('sunny');   # Example usage\n```"
  },
  {
    "task": "Write a program that determines if an entered date is valid.",
    "code": "```raku\nsub is-leap-year(Int $year) {\n    ($year %% 4 && !$year %% 100) || $year %% 400;\n}\n\nsub is-valid-date(Int $year, Int $month, Int $day) {\n    my %days-in-month = (\n        1 => 31, 2 => 28, 3 => 31, 4 => 30, 5 => 31, 6 => 30,\n        7 => 31, 8 => 31, 9 => 30, 10 => 31, 11 => 30, 12 => 31\n    );\n\n    %days-in-month{2} = 29 if is-leap-year($year);\n\n    return False unless $year > 0 && $month > 0 && $month <= 12;\n    return False unless $day > 0 && $day <= %days-in-month{$month};\n\n    return True;\n}\n\nsay \"Enter year:\";\nmy $year = prompt().Int;\nsay \"Enter month:\";\nmy $month = prompt().Int;\nsay \"Enter day:\";\nmy $day = prompt().Int;\n\nif is-valid-date($year, $month, $day) {\n    say \"The date is valid.\";\n} else {\n    say \"The date is invalid.\";\n}\n```"
  },
  {
    "task": "Create a script to decide which of two products to buy based on price and reviews.",
    "code": "```raku\nsub decide-purchase($product1, $product2) {\n    if $product1<price> < $product2<price> {\n        say \"Buy Product 1\";\n    }\n    elsif $product1<price> > $product2<price> {\n        say \"Buy Product 2\";\n    }\n    elsif $product1<reviews> > $product2<reviews> {\n        say \"Buy Product 1\";\n    }\n    elsif $product1<reviews> < $product2<reviews> {\n        say \"Buy Product 2\";\n    }\n    else {\n        say \"Both products are equally good.\";\n    }\n}\n\nmy %product1 = (price => 100, reviews => 4.5);\nmy %product2 = (price => 100, reviews => 4.7);\n\ndecide-purchase(%product1, %product2);\n```"
  },
  {
    "task": "Develop a function that categorizes a person\u2019s BMI as underweight, normal, overweight, or obese.",
    "code": "```raku\nsub categorize-bmi($weight, $height) {\n    my $bmi = $weight / ($height ** 2);\n    given $bmi {\n        when * < 18.5 { return 'underweight' }\n        when * >= 18.5 && * < 25 { return 'normal' }\n        when * >= 25 && * < 30 { return 'overweight' }\n        default { return 'obese' }\n    }\n}\n```"
  },
  {
    "task": "Implement a program that checks if a credit card number is valid using the Luhn algorithm.",
    "code": "```raku\nsub is-valid-luhn(Str $number) {\n    my @digits = $number.comb.reverse.map(*.Numeric);\n    my $sum = 0;\n\n    for @digits.kv -> $index, $digit {\n        if $index %% 2 {\n            my $doubled = $digit * 2;\n            $sum += $doubled > 9 ?? $doubled - 9 !! $doubled;\n        } else {\n            $sum += $digit;\n        }\n    }\n\n    return $sum %% 10 == 0;\n}\n\nmy $card-number = '4532015112830366';\nsay \"The card number is \" ~ (is-valid-luhn($card-number) ?? 'valid' !! 'invalid');\n```"
  },
  {
    "task": "Design a routine that outputs a greeting based on the current time of day.",
    "code": "```raku\nsub greet-based-on-time() {\n    my $hour = DateTime.now.hour;\n    if $hour >= 5 && $hour < 12 {\n        say \"Good morning!\";\n    }\n    elsif $hour >= 12 && $hour < 18 {\n        say \"Good afternoon!\";\n    }\n    elsif $hour >= 18 && $hour < 21 {\n        say \"Good evening!\";\n    }\n    else {\n        say \"Good night!\";\n    }\n}\n\ngreet-based-on-time();\n```"
  },
  {
    "task": "Write a program that determines if a given word can be formed with a set of letters.",
    "code": "```raku\nsub can-form-word($word, @letters) {\n    my %letter-count;\n    %letter-count{$_}++ for @letters;\n    \n    for $word.comb -> $char {\n        if %letter-count{$char}:exists && %letter-count{$char} > 0 {\n            %letter-count{$char}--;\n        } else {\n            return False;\n        }\n    }\n    return True;\n}\n\n# Example usage\nmy $word = \"apple\";\nmy @letters = <a p p l e>;\nsay can-form-word($word, @letters); # True\n\n@letters = <a p l e>;\nsay can-form-word($word, @letters); # False\n```"
  },
  {
    "task": "Create a function that outputs the appropriate greeting based on the day of the week.",
    "code": "```raku\nsub greeting($day) {\n    given $day {\n        when 'Monday'    { say 'Start of the week! Have a great Monday!' }\n        when 'Tuesday'   { say 'Happy Tuesday!' }\n        when 'Wednesday' { say 'It\\'s Wednesday, halfway through!' }\n        when 'Thursday'  { say 'Almost Friday! Have a good Thursday!' }\n        when 'Friday'    { say 'Happy Friday! The weekend is near!' }\n        when 'Saturday'  { say 'Enjoy your Saturday!' }\n        when 'Sunday'    { say 'Relax, it\\'s Sunday!' }\n        default          { say 'Invalid day!' }\n    }\n}\n\ngreeting('Monday');\n```"
  },
  {
    "task": "Develop a system to determine if a person qualifies for a senior citizen discount.",
    "code": "```raku\nsub senior-citizen-discount(Int $age) {\n    if $age >= 65 {\n        return \"Eligible for senior citizen discount\";\n    } else {\n        return \"Not eligible for senior citizen discount\";\n    }\n}\n\n# Example usage:\nsay senior-citizen-discount(70);  # Output: Eligible for senior citizen discount\nsay senior-citizen-discount(60);  # Output: Not eligible for senior citizen discount\n```"
  },
  {
    "task": "Implement a function that checks if a number is a perfect square.",
    "code": "```raku\nsub is-perfect-square(Int $n) {\n    return False if $n < 0;\n    my $root = $n.sqrt.Int;\n    return $root * $root == $n;\n}\n\nsay is-perfect-square(16); # True\nsay is-perfect-square(17); # False\n```"
  },
  {
    "task": "Design a program that outputs the correct shipping cost based on weight and distance.",
    "code": "```raku\nsub shipping-cost($weight, $distance) {\n    given $weight {\n        when $_ <= 5 {\n            given $distance {\n                when $_ <= 100 { return 10; }\n                when $_ <= 500 { return 20; }\n                default { return 50; }\n            }\n        }\n        when $_ <= 20 {\n            given $distance {\n                when $_ <= 100 { return 20; }\n                when $_ <= 500 { return 40; }\n                default { return 80; }\n            }\n        }\n        default {\n            given $distance {\n                when $_ <= 100 { return 50; }\n                when $_ <= 500 { return 100; }\n                default { return 200; }\n            }\n        }\n    }\n}\n\nsay shipping-cost(3, 50);    # Example usage\nsay shipping-cost(10, 150);\nsay shipping-cost(25, 600);\n```"
  },
  {
    "task": "Write a routine that chooses the correct pronoun based on gender input.",
    "code": "```raku\nsub choose-pronoun(Str $gender) {\n    given $gender.lc {\n        when 'male'   { 'he' }\n        when 'female' { 'she' }\n        default       { 'they' }\n    }\n}\n\nsay choose-pronoun('Male');   # he\nsay choose-pronoun('female'); # she\nsay choose-pronoun('other');  # they\n```"
  },
  {
    "task": "Create a program that checks if a user input is a palindrome number.",
    "code": "```raku\nsay \"Enter a number:\";\nmy $input = prompt();\nif $input ~~ /^\\d+$/ {\n    my $reversed = $input.flip;\n    if $input == $reversed {\n        say \"$input is a palindrome number.\";\n    } else {\n        say \"$input is not a palindrome number.\";\n    }\n} else {\n    say \"Invalid input. Please enter a valid number.\";\n}\n```"
  },
  {
    "task": "Develop a script to decide if a number is a perfect number.",
    "code": "```raku\nsub is-perfect-number(Int $n) {\n    return False if $n <= 1;\n    my $sum = 0;\n    for 1 .. $n / 2 -> $i {\n        $sum += $i if $n %% $i;\n    }\n    return $sum == $n;\n}\n\nmy $number = prompt \"Enter a number: \";\nsay is-perfect-number($number) ?? \"$number is a perfect number\" !! \"$number is not a perfect number\";\n```"
  },
  {
    "task": "Implement a system that determines the winner in a rock-paper-scissors game.",
    "code": "```raku\nsub determine-winner($player1, $player2) {\n    if $player1 eq $player2 {\n        return \"It's a tie!\";\n    }\n    elsif ($player1 eq 'rock' && $player2 eq 'scissors') || \n          ($player1 eq 'scissors' && $player2 eq 'paper') || \n          ($player1 eq 'paper' && $player2 eq 'rock') {\n        return \"Player 1 wins!\";\n    }\n    else {\n        return \"Player 2 wins!\";\n    }\n}\n\nsay determine-winner('rock', 'scissors');  # Example usage\n```"
  },
  {
    "task": "Design a function that suggests a movie genre based on user mood.",
    "code": "```raku\nsub suggest-genre(Str $mood) {\n    given $mood {\n        when 'happy'   { 'Comedy' }\n        when 'sad'     { 'Drama' }\n        when 'excited' { 'Action' }\n        when 'relaxed' { 'Romance' }\n        when 'bored'   { 'Adventure' }\n        default        { 'Documentary' }\n    }\n}\n\n# Example usage:\nsay suggest-genre('happy'); # Output: Comedy\n```"
  },
  {
    "task": "Write a program that checks if a file extension is valid for an image file.",
    "code": "```raku\nmy $filename = 'example.jpg';\nmy @valid_extensions = <jpg jpeg png gif bmp>;\n\nif $filename ~~ /\\.(.*)$/ {\n    my $extension = $0.lc;\n    if $extension ~~ any(@valid_extensions) {\n        say \"The file extension '$extension' is valid for an image file.\";\n    } else {\n        say \"The file extension '$extension' is not valid for an image file.\";\n    }\n} else {\n    say \"No file extension found.\";\n}\n```"
  },
  {
    "task": "Create a routine that decides the appropriate currency symbol based on country.",
    "code": "```raku\nsub get-currency-symbol(Str $country) {\n    given $country {\n        when 'USA'         { return '$' }\n        when 'UK'          { return '\u00a3' }\n        when 'Japan'       { return '\u00a5' }\n        when 'European Union' { return '\u20ac' }\n        when 'India'       { return '\u20b9' }\n        default            { return 'Unknown currency symbol' }\n    }\n}\n\n# Example usage:\nsay get-currency-symbol('Japan'); # Outputs: \u00a5\n```"
  },
  {
    "task": "Develop a function that determines if a string is a valid palindrome ignoring spaces and punctuation.",
    "code": "```raku\nsub is-palindrome($str) {\n    my $cleaned = $str.trans(/\\W/, '').lc;\n    return $cleaned eq $cleaned.flip;\n}\n\nsay is-palindrome(\"A man, a plan, a canal, Panama!\");  # True\nsay is-palindrome(\"Not a palindrome\");                 # False\n```"
  },
  {
    "task": "Implement a program that checks if a number is in the Fibonacci sequence.",
    "code": "```raku\nsub is-fibonacci(Int $n) {\n    my $a = 0;\n    my $b = 1;\n    while $a < $n {\n        ($a, $b) = ($b, $a + $b);\n    }\n    return $a == $n;\n}\n\nsay is-fibonacci(8) ?? \"8 is in the Fibonacci sequence\" !! \"8 is not in the Fibonacci sequence\";\nsay is-fibonacci(10) ?? \"10 is in the Fibonacci sequence\" !! \"10 is not in the Fibonacci sequence\";\n```"
  },
  {
    "task": "Design a script to calculate the correct tip based on service quality rating.",
    "code": "```raku\nsub calculate-tip($amount, $rating) {\n    given $rating {\n        when 'excellent' { return $amount * 0.25 }\n        when 'good' { return $amount * 0.20 }\n        when 'average' { return $amount * 0.15 }\n        when 'poor' { return $amount * 0.10 }\n        default { return 0 }\n    }\n}\n\nmy $bill-amount = 100;\nmy $service-rating = 'excellent';\nsay \"Tip: \" ~ calculate-tip($bill-amount, $service-rating);\n```"
  },
  {
    "task": "Write a function that determines if a year is a century year.",
    "code": "```raku\nsub is-century-year(Int $year) {\n    return $year %% 100;\n}\n```"
  },
  {
    "task": "Create a program that checks if a date falls on a weekend.",
    "code": "```raku\nuse Date;\n\nsub is-weekend(Date $date) {\n    given $date.day-of-week {\n        when 6 | 7 { True }\n        default { False }\n    }\n}\n\nmy $date = Date.new('2023-10-14');\nsay is-weekend($date) ?? \"It's a weekend!\" !! \"It's a weekday.\";\n```"
  },
  {
    "task": "Develop a routine that suggests a book based on genre preference.",
    "code": "```raku\nsub suggest-book(Str $genre) {\n    given $genre {\n        when 'Fantasy'   { return \"The Hobbit by J.R.R. Tolkien\" }\n        when 'Science Fiction' { return \"Dune by Frank Herbert\" }\n        when 'Mystery'   { return \"The Da Vinci Code by Dan Brown\" }\n        when 'Romance'   { return \"Pride and Prejudice by Jane Austen\" }\n        when 'Horror'    { return \"The Shining by Stephen King\" }\n        default          { return \"Genre not recognized. Try another genre.\" }\n    }\n}\n\nsay suggest-book('Fantasy');\n```"
  },
  {
    "task": "Implement a system that determines if a student passes or fails based on their grades.",
    "code": "```raku\nsub determine_pass_fail(Int $grade) {\n    if $grade >= 50 {\n        return 'Pass';\n    }\n    else {\n        return 'Fail';\n    }\n}\n\nmy $student_grade = 65;\nsay determine_pass_fail($student_grade);  # Output: Pass\n```"
  },
  {
    "task": "Design a function to validate if a string is a valid URL.",
    "code": "```raku\nsub is-valid-url(Str $url) {\n    if $url ~~ m/^https?:\\/\\/ [\\w.%-]+ \\. [a-z]{2,6} / {\n        return True;\n    }\n    return False;\n}\n\n# Example usage\nsay is-valid-url(\"https://example.com\"); # True\nsay is-valid-url(\"ftp://example.com\");   # False\n```"
  },
  {
    "task": "Write a program that checks if a point is inside a rectangle given its coordinates.",
    "code": "```raku\nsub is-point-inside-rectangle($px, $py, $rect-x1, $rect-y1, $rect-x2, $rect-y2) {\n    if $px >= $rect-x1 && $px <= $rect-x2 && $py >= $rect-y1 && $py <= $rect-y2 {\n        return True;\n    }\n    else {\n        return False;\n    }\n}\n\n# Example usage\nmy $point-x = 5;\nmy $point-y = 5;\nmy $rect-x1 = 0;\nmy $rect-y1 = 0;\nmy $rect-x2 = 10;\nmy $rect-y2 = 10;\n\nsay is-point-inside-rectangle($point-x, $point-y, $rect-x1, $rect-y1, $rect-x2, $rect-y2);\n```"
  },
  {
    "task": "Create a script to determine if a word can be constructed from a given set of letters.",
    "code": "```raku\nsub can-construct-word(Str $word, Str $letters) {\n    my %letter-count;\n    %letter-count{$_}++ for $letters.comb;\n    \n    for $word.comb -> $char {\n        %letter-count{$char}--;\n        return False if %letter-count{$char} < 0;\n    }\n    \n    return True;\n}\n\n# Example usage\nmy $word = 'hello';\nmy $letters = 'olhelxyz';\nsay can-construct-word($word, $letters); # True\n```"
  },
  {
    "task": "Develop a routine that calculates insurance premiums based on age and driving record.",
    "code": "```raku\nsub calculate-premium(Int $age, Str $driving-record) {\n    my $premium;\n    \n    given $age {\n        when * < 25 {\n            $premium = 200;\n        }\n        when * < 65 {\n            $premium = 100;\n        }\n        default {\n            $premium = 150;\n        }\n    }\n    \n    given $driving-record {\n        when 'good' {\n            $premium *= 0.9;\n        }\n        when 'bad' {\n            $premium *= 1.5;\n        }\n    }\n\n    return $premium;\n}\n\nmy $age = 30;\nmy $record = 'good';\nsay calculate-premium($age, $record);\n```"
  },
  {
    "task": "Implement a program that checks for palindrome sentences.",
    "code": "```raku\nsub is-palindrome($sentence) {\n    my $cleaned = $sentence.lc.comb.grep(*~~/\\w/).join;\n    return $cleaned eq $cleaned.flip;\n}\n\nmy $sentence = prompt 'Enter a sentence: ';\nif is-palindrome($sentence) {\n    say \"The sentence is a palindrome.\";\n} else {\n    say \"The sentence is not a palindrome.\";\n}\n```"
  },
  {
    "task": "Design a function to evaluate if a string contains balanced parentheses.",
    "code": "```raku\nsub is-balanced($str) {\n    my $balance = 0;\n    for $str.comb -> $char {\n        if $char eq '(' {\n            $balance++;\n        } elsif $char eq ')' {\n            $balance--;\n            return False if $balance < 0;\n        }\n    }\n    return $balance == 0;\n}\n```"
  },
  {
    "task": "Write a program that suggests a pet based on living conditions and preferences.",
    "code": "```raku\nsub suggest-pet($living-space, $allergy, $activity-level) {\n    given $living-space {\n        when 'apartment' {\n            given $allergy {\n                when 'none' {\n                    given $activity-level {\n                        when 'low' { 'Cat' }\n                        when 'medium' { 'Small dog' }\n                        when 'high' { 'Parrot' }\n                        default { 'Fish' }\n                    }\n                }\n                when 'mild' {\n                    given $activity-level {\n                        when 'low' { 'Fish' }\n                        when 'medium' { 'Hamster' }\n                        when 'high' { 'Turtle' }\n                        default { 'Ant farm' }\n                    }\n                }\n                default {\n                    'No pet recommended due to allergies'\n                }\n            }\n        }\n        when 'house' {\n            given $allergy {\n                when 'none' {\n                    given $activity-level {\n                        when 'low' { 'Dog' }\n                        when 'medium' { 'Cat' }\n                        when 'high' { 'Large dog' }\n                        default { 'Rabbit' }\n                    }\n                }\n                when 'mild' {\n                    given $activity-level {\n                        when 'low' { 'Fish' }\n                        when 'medium' { 'Bird' }\n                        when 'high' { 'Guinea pig' }\n                        default { 'Reptile' }\n                    }\n                }\n                default {\n                    'No pet recommended due to allergies'\n                }\n            }\n        }\n        default {\n            'Please provide valid living conditions'\n        }\n    }\n}\n\n# Example usage\nsay suggest-pet('apartment', 'none', 'medium'); # Outputs: Small dog\n```"
  },
  {
    "task": "Create a routine that determines if a phone number is valid based on format.",
    "code": "```raku\nsub is-valid-phone-number($phone-number) {\n    if $phone-number ~~ /^ \\+? \\d ** 1..3 '-'? \\d ** 3 '-'? \\d ** 4 $/ {\n        return True;\n    }\n    else {\n        return False;\n    }\n}\n\nsay is-valid-phone-number('+123-456-7890'); # Example usage\n```"
  },
  {
    "task": "Develop a function that checks if two rectangles overlap.",
    "code": "```raku\nsub rectangles-overlap($rect1, $rect2) {\n    my ($x1, $y1, $w1, $h1) = $rect1;\n    my ($x2, $y2, $w2, $h2) = $rect2;\n\n    if ($x1 < $x2 + $w2 &&\n        $x1 + $w1 > $x2 &&\n        $y1 < $y2 + $h2 &&\n        $y1 + $h1 > $y2) {\n        return True;\n    } else {\n        return False;\n    }\n}\n```"
  },
  {
    "task": "Implement a program that chooses a beverage based on user input time.",
    "code": "```raku\nsay \"Enter the time (in 24-hour format, e.g., 13 for 1 PM): \";\nmy $time = prompt().Int;\n\nmy $beverage = \n    $time >= 6  && $time < 12 ?? 'Coffee' !!\n    $time >= 12 && $time < 18 ?? 'Tea' !!\n    $time >= 18 && $time < 24 ?? 'Wine' !!\n    $time >= 0  && $time < 6  ?? 'Milk' !!\n    'Invalid time';\n\nsay \"Suggested beverage: $beverage\";\n```"
  },
  {
    "task": "Design a script to determine if a URL is secure (HTTPS).",
    "code": "```raku\nmy $url = prompt(\"Enter a URL: \");\nif $url ~~ /^ 'https://' / {\n    say \"The URL is secure.\";\n} else {\n    say \"The URL is not secure.\";\n}\n```"
  },
  {
    "task": "Write a function that outputs different messages based on the input number's divisibility.",
    "code": "```raku\nsub divisibility-message(Int $num) {\n    if $num %% 3 && $num %% 5 {\n        say \"Divisible by both 3 and 5\";\n    } elsif $num %% 3 {\n        say \"Divisible by 3\";\n    } elsif $num %% 5 {\n        say \"Divisible by 5\";\n    } else {\n        say \"Not divisible by 3 or 5\";\n    }\n}\n\n# Example usage:\ndivisibility-message(15);\ndivisibility-message(9);\ndivisibility-message(10);\ndivisibility-message(7);\n```"
  },
  {
    "task": "Create a program to decide if a person should bring an umbrella based on the weather forecast.",
    "code": "```raku\nmy $weather-forecast = prompt(\"Enter the weather forecast (sunny, cloudy, rainy): \").trim.lc;\n\ngiven $weather-forecast {\n    when 'sunny'  { say \"No need for an umbrella.\" }\n    when 'cloudy' { say \"You might want to bring an umbrella just in case.\" }\n    when 'rainy'  { say \"Definitely bring an umbrella.\" }\n    default       { say \"Invalid forecast entered.\" }\n}\n```"
  },
  {
    "task": "Develop a routine that checks if a chess move is valid.",
    "code": "```raku\nsub is-valid-move($piece, $from, $to) {\n    given $piece {\n        when 'pawn' {\n            return ($from.row + 1 == $to.row && $from.col == $to.col) || \n                   ($from.row == 2 && $from.row + 2 == $to.row && $from.col == $to.col);\n        }\n        when 'rook' {\n            return $from.row == $to.row || $from.col == $to.col;\n        }\n        when 'knight' {\n            return (($from.row - $to.row).abs == 2 && ($from.col - $to.col).abs == 1) ||\n                   (($from.row - $to.row).abs == 1 && ($from.col - $to.col).abs == 2);\n        }\n        when 'bishop' {\n            return ($from.row - $to.row).abs == ($from.col - $to.col).abs;\n        }\n        when 'queen' {\n            return $from.row == $to.row || $from.col == $to.col || \n                   ($from.row - $to.row).abs == ($from.col - $to.col).abs;\n        }\n        when 'king' {\n            return ($from.row - $to.row).abs <= 1 && ($from.col - $to.col).abs <= 1;\n        }\n        default {\n            return False;\n        }\n    }\n}\n\n# Example positions\nmy $from = { row => 2, col => 2 };\nmy $to = { row => 3, col => 2 };\n\nsay is-valid-move('pawn', $from, $to); # Outputs True or False based on move validity\n```"
  },
  {
    "task": "Implement a program that outputs the number of days in a given month.",
    "code": "```raku\nsub days-in-month(Int $month, Int $year) {\n    given $month {\n        when 2 {\n            return $year %% 4 && !($year %% 100) || $year %% 400 ?? 29 !! 28;\n        }\n        when 4 | 6 | 9 | 11 {\n            return 30;\n        }\n        when 1 | 3 | 5 | 7 | 8 | 10 | 12 {\n            return 31;\n        }\n        default {\n            die \"Invalid month\";\n        }\n    }\n}\n\nmy $month = prompt(\"Enter month (1-12): \");\nmy $year = prompt(\"Enter year: \");\nsay \"Number of days: \", days-in-month($month, $year);\n```"
  },
  {
    "task": "Design a function that validates if a string is a valid hexadecimal number.",
    "code": "```raku\nsub is-valid-hex($str) {\n    if $str ~~ /^ <[0..9a..fA..F]>+ $/ {\n        return True;\n    } else {\n        return False;\n    }\n}\n```"
  },
  {
    "task": "Write a script that checks if a word is present in a list of predefined words.",
    "code": "```raku\nmy @words = <apple banana cherry>;\nmy $word = prompt('Enter a word: ');\n\nif $word eq any(@words) {\n    say \"The word '$word' is in the list.\";\n} else {\n    say \"The word '$word' is not in the list.\";\n}\n```"
  },
  {
    "task": "Create a routine to decide the correct tax bracket for a given income.",
    "code": "```raku\nsub tax-bracket-decider($income) {\n    given $income {\n        when * < 10000       { 'Low' }\n        when * >= 10000 && * < 50000 { 'Medium' }\n        when * >= 50000 && * < 100000 { 'High' }\n        default                 { 'Very High' }\n    }\n}\n\nsay tax-bracket-decider(7500);  # Outputs 'Low'\nsay tax-bracket-decider(30000); # Outputs 'Medium'\nsay tax-bracket-decider(75000); # Outputs 'High'\nsay tax-bracket-decider(150000); # Outputs 'Very High'\n```"
  },
  {
    "task": "Develop a function that determines if a point is within a triangle.",
    "code": "```raku\nsub is-point-in-triangle($px, $py, $ax, $ay, $bx, $by, $cx, $cy) {\n    my $det = sub ($x1, $y1, $x2, $y2, $x3, $y3) {\n        return ($x1 * ($y2 - $y3) + $x2 * ($y3 - $y1) + $x3 * ($y1 - $y2));\n    };\n\n    my $d1 = $det($px, $py, $ax, $ay, $bx, $by);\n    my $d2 = $det($px, $py, $bx, $by, $cx, $cy);\n    my $d3 = $det($px, $py, $cx, $cy, $ax, $ay);\n\n    my $has_neg = ($d1 < 0) || ($d2 < 0) || ($d3 < 0);\n    my $has_pos = ($d1 > 0) || ($d2 > 0) || ($d3 > 0);\n\n    return !($has_neg && $has_pos);\n}\n```"
  },
  {
    "task": "Implement a program that checks if a given string is a valid binary number.",
    "code": "```raku\nsub is-valid-binary($str) {\n    if $str ~~ /^<0|1>*$/ {\n        return True;\n    }\n    else {\n        return False;\n    }\n}\n\nmy $binary = '101010';\nsay is-valid-binary($binary); # True\n\nmy $non_binary = '102011';\nsay is-valid-binary($non_binary); # False\n```"
  },
  {
    "task": "Design a system to evaluate the risk level of an investment based on criteria.",
    "code": "```raku\nsub evaluate-risk-level(Int $investment, Int $market-trend, Int $economic-factor) {\n    my $risk-level = '';\n\n    if $investment > 100_000 && $market-trend < 5 && $economic-factor < 3 {\n        $risk-level = 'High';\n    }\n    elsif $investment > 50_000 && $market-trend < 7 && $economic-factor < 5 {\n        $risk-level = 'Medium';\n    }\n    elsif $investment > 10_000 && $market-trend < 9 && $economic-factor < 7 {\n        $risk-level = 'Low';\n    }\n    else {\n        $risk-level = 'Minimal';\n    }\n    \n    return $risk-level;\n}\n\nsay evaluate-risk-level(150_000, 4, 2);  # Example usage\n```"
  },
  {
    "task": "Write a program that suggests a vacation destination based on budget and preferences.",
    "code": "```raku\nsub suggest-destination($budget, $preference) {\n    given $budget {\n        when 'low' {\n            given $preference {\n                when 'beach' { return 'Goa, India' }\n                when 'mountains' { return 'Pokhara, Nepal' }\n                when 'city' { return 'Bangkok, Thailand' }\n                default { return 'Staycation at home' }\n            }\n        }\n        when 'medium' {\n            given $preference {\n                when 'beach' { return 'Maldives' }\n                when 'mountains' { return 'Swiss Alps' }\n                when 'city' { return 'Dubai, UAE' }\n                default { return 'Road trip' }\n            }\n        }\n        when 'high' {\n            given $preference {\n                when 'beach' { return 'Bora Bora, French Polynesia' }\n                when 'mountains' { return 'Aspen, USA' }\n                when 'city' { return 'Tokyo, Japan' }\n                default { return 'Luxury cruise' }\n            }\n        }\n        default { return 'Invalid budget' }\n    }\n}\n\nmy $budget = 'medium';\nmy $preference = 'beach';\nsay suggest-destination($budget, $preference);\n```"
  },
  {
    "task": "Create a routine that checks if a username is already taken in a database.",
    "code": "```raku\nclass UserDatabase {\n    has @.usernames;\n\n    method is-username-taken(Str $username) {\n        if $username \u2208 @.usernames {\n            return True;\n        }\n        else {\n            return False;\n        }\n    }\n}\n\nmy $db = UserDatabase.new(usernames => <alice bob charlie>);\nsay $db.is-username-taken('bob');     # True\nsay $db.is-username-taken('dave');    # False\n```"
  },
  {
    "task": "Develop a function that determines if a string is a valid IPv4 address.",
    "code": "```raku\nsub is-valid-ipv4(Str $ip) {\n    my @parts = $ip.split('.');\n    return False unless @parts.elems == 4;\n\n    for @parts -> $part {\n        return False unless $part ~~ /^\\d+$/ && $part.Int >= 0 && $part.Int <= 255;\n    }\n\n    return True;\n}\n\n# Example usage\nsay is-valid-ipv4('192.168.1.1');   # True\nsay is-valid-ipv4('256.100.50.0'); # False\n```"
  },
  {
    "task": "Implement a program to decide which transportation method is quickest based on distance.",
    "code": "```raku\nsub quickest-transportation(Int $distance) {\n    given $distance {\n        when * < 1 {\n            say \"Walking is quickest for distances less than 1 km.\";\n        }\n        when 1..5 {\n            say \"Biking is quickest for distances between 1 and 5 km.\";\n        }\n        when 6..20 {\n            say \"Driving is quickest for distances between 6 and 20 km.\";\n        }\n        default {\n            say \"Flying is quickest for distances greater than 20 km.\";\n        }\n    }\n}\n\n# Example usage\nquickest-transportation(0);   # Walking\nquickest-transportation(3);   # Biking\nquickest-transportation(10);  # Driving\nquickest-transportation(25);  # Flying\n```"
  },
  {
    "task": "Design a script to validate if a number is a prime number.",
    "code": "```raku\nsub is-prime(Int $n) {\n    return False if $n < 2;\n    for 2..sqrt($n).Int -> $i {\n        return False if $n %% $i;\n    }\n    return True;\n}\n\nmy $number = prompt(\"Enter a number: \");\nif is-prime($number.Int) {\n    say \"$number is a prime number.\";\n} else {\n    say \"$number is not a prime number.\";\n}\n```"
  },
  {
    "task": "Write a function that checks if a number is divisible by another number without remainder.",
    "code": "```raku\nsub is-divisible($num, $divisor) {\n    return $num %% $divisor ?? True !! False;\n}\n```"
  },
  {
    "task": "Create a program that determines the type of a quadrilateral based on side lengths.",
    "code": "```raku\nsub quadrilateral-type($a, $b, $c, $d) {\n    if $a == $b && $b == $c && $c == $d {\n        return 'Square';\n    } elsif $a == $c && $b == $d {\n        return 'Rectangle';\n    } elsif $a == $b && $c == $d {\n        return 'Rhombus';\n    } elsif $a == $d && $b == $c {\n        return 'Trapezoid';\n    } else {\n        return 'Irregular Quadrilateral';\n    }\n}\n\nmy $type = quadrilateral-type(4, 4, 4, 4);\nsay \"The quadrilateral is a $type.\";\n```"
  },
  {
    "task": "Develop a routine to check if a sentence contains all letters of the alphabet.",
    "code": "```raku\nsub contains-all-letters($sentence) {\n    my %alphabet = 'a' .. 'z' => True;\n    for $sentence.lc.comb -> $char {\n        %alphabet{$char} = False if %alphabet{$char}:exists;\n    }\n    return !%alphabet.values.any;\n}\n\nsay contains-all-letters(\"The quick brown fox jumps over the lazy dog\"); # True\nsay contains-all-letters(\"Hello, World!\"); # False\n```"
  },
  {
    "task": "Implement a program that outputs the appropriate error message based on an error code.",
    "code": "```raku\nmy %error-messages = (\n    404 => 'Not Found',\n    500 => 'Internal Server Error',\n    403 => 'Forbidden',\n    401 => 'Unauthorized'\n);\n\nsub get-error-message(Int $error-code) {\n    given $error-code {\n        when %error-messages.keys() -> $code {\n            say %error-messages{$code};\n        }\n        default {\n            say 'Unknown Error';\n        }\n    }\n}\n\nget-error-message(404);  # Example usage\n```"
  },
  {
    "task": "Design a function that categorizes a movie rating as G, PG, PG-13, or R.",
    "code": "```raku\nsub categorize-rating(Int $rating) {\n    given $rating {\n        when 0 .. 6  { return 'G' }\n        when 7 .. 12 { return 'PG' }\n        when 13 .. 16 { return 'PG-13' }\n        when 17 .. * { return 'R' }\n        default { return 'Invalid rating' }\n    }\n}\n```"
  },
  {
    "task": "Write a script to check if a string is a valid Roman numeral.",
    "code": "```raku\nsub is-valid-roman($s) {\n    return $s ~~ /^ M{0,3} (CM|CD|D?C{0,3}) (XC|XL|L?X{0,3}) (IX|IV|V?I{0,3}) $/;\n}\n\nmy $input = prompt 'Enter a string: ';\nif is-valid-roman($input) {\n    say \"'$input' is a valid Roman numeral.\";\n} else {\n    say \"'$input' is not a valid Roman numeral.\";\n}\n```"
  },
  {
    "task": "Create a routine that decides if a person can retire based on age and years worked.",
    "code": "```raku\nsub can-retire(Int $age, Int $years-worked --> Bool) {\n    if $age >= 65 || $years-worked >= 30 {\n        return True;\n    } else {\n        return False;\n    }\n}\n```"
  },
  {
    "task": "Develop a function that outputs a different emoji based on user mood input.",
    "code": "```raku\nsub mood-emoji($mood) {\n    given $mood {\n        when 'happy'  { '\ud83d\ude0a' }\n        when 'sad'    { '\ud83d\ude22' }\n        when 'angry'  { '\ud83d\ude21' }\n        when 'excited' { '\ud83d\ude04' }\n        when 'bored'  { '\ud83d\ude10' }\n        default       { '\ud83e\udd14' }\n    }\n}\n\nsay mood-emoji('happy');   # Example usage\n```"
  },
  {
    "task": "Implement a program that checks if a password meets security requirements.",
    "code": "```raku\nsub check-password-security(Str $password) {\n    if $password.chars < 8 {\n        say \"Password too short\";\n    }\n    elsif $password ~~ /\\d/ && $password ~~ /<[A..Z]>/ && $password ~~ /<[a..z]>/ {\n        say \"Password is secure\";\n    }\n    else {\n        say \"Password must contain uppercase, lowercase letters, and digits\";\n    }\n}\n\nmy $password = prompt('Enter your password: ');\ncheck-password-security($password);\n```"
  },
  {
    "task": "Design a script to determine if a number is a palindrome when reversed.",
    "code": "```raku\nsub is-palindrome(Int $number) {\n    my $str = $number.Str;\n    return $str eq $str.flip;\n}\n\nmy $number = 12321;\nsay \"$number is \" ~ (is-palindrome($number) ?? '' !! 'not ') ~ \"a palindrome.\";\n```"
  },
  {
    "task": "Write a function that evaluates if a given day is a holiday.",
    "code": "```raku\nsub is-holiday(Str $day) {\n    given $day {\n        when 'New Year\\'s Day' { return True }\n        when 'Christmas Day'   { return True }\n        when 'Independence Day' { return True }\n        default                { return False }\n    }\n}\n```"
  },
  {
    "task": "Create a program to decide if a library book is overdue based on the due date.",
    "code": "```raku\nuse DateTime::TimeZone; \nuse DateTime;\n\nsub is-overdue(DateTime $due-date) {\n    my $now = DateTime.now(time_zone => 'UTC');\n    if $now > $due-date {\n        say \"The book is overdue.\";\n    } else {\n        say \"The book is not overdue.\";\n    }\n}\n\n# Example usage:\nmy $due-date = DateTime.new('2023-10-01T00:00:00Z');\nis-overdue($due-date);\n```"
  },
  {
    "task": "Develop a routine that checks if a given year is part of a leap century.",
    "code": "```raku\nsub is-leap-century(Int $year) {\n    if $year %% 400 {\n        return True;\n    } elsif $year %% 100 {\n        return False;\n    } else {\n        return False;\n    }\n}\n\nsay is-leap-century(2000); # True\nsay is-leap-century(1900); # False\nsay is-leap-century(1600); # True\nsay is-leap-century(1700); # False\n```"
  },
  {
    "task": "Implement a system to determine the correct category for a product based on user input.",
    "code": "```raku\nsub categorize-product($product) {\n    given $product {\n        when 'apple' | 'banana' | 'orange' {\n            return 'Fruit';\n        }\n        when 'carrot' | 'broccoli' | 'lettuce' {\n            return 'Vegetable';\n        }\n        when 'bread' | 'pasta' | 'rice' {\n            return 'Grain';\n        }\n        default {\n            return 'Unknown';\n        }\n    }\n}\n\nsay \"Enter a product name:\";\nmy $input = prompt();\nmy $category = categorize-product($input);\nsay \"The product category is: $category\";\n```"
  }
]