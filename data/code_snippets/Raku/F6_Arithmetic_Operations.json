[
  {
    "task": "Write a function that takes two numbers and returns their sum.",
    "code": "```raku\nsub add($a, $b) {\n    return $a + $b;\n}\n```"
  },
  {
    "task": "Create a program that calculates the difference between two given integers.",
    "code": "```raku\nsub MAIN(Int $a, Int $b) {\n    my $difference = $a - $b;\n    say \"The difference is: $difference\";\n}\n```"
  },
  {
    "task": "Design a function to multiply two floating-point numbers and return the result.",
    "code": "```raku\nsub multiply($num1, $num2) {\n    return $num1 * $num2;\n}\n```"
  },
  {
    "task": "Implement a function that divides two numbers and handles division by zero exceptions.",
    "code": "```raku\nsub divide($numerator, $denominator) {\n    try {\n        $numerator / $denominator;\n    } \n    CATCH {\n        when X::Numeric::DivideByZero {\n            return \"Division by zero error\";\n        }\n    }\n}\n\nsay divide(10, 2);  # Output: 5\nsay divide(10, 0);  # Output: Division by zero error\n```"
  },
  {
    "task": "Build a calculator that can perform addition, subtraction, multiplication, and division on user-provided inputs.",
    "code": "```raku\nsub calculator($operation, $num1, $num2) {\n    given $operation {\n        when 'add'        { return $num1 + $num2 }\n        when 'subtract'   { return $num1 - $num2 }\n        when 'multiply'   { return $num1 * $num2 }\n        when 'divide'     { return $num1 / $num2 }\n        default           { die \"Invalid operation\" }\n    }\n}\n\nsay \"Enter operation (add, subtract, multiply, divide): \";\nmy $operation = prompt().trim;\nsay \"Enter first number: \";\nmy $num1 = prompt().trim.Num;\nsay \"Enter second number: \";\nmy $num2 = prompt().trim.Num;\n\nmy $result = calculator($operation, $num1, $num2);\nsay \"Result: $result\";\n```"
  },
  {
    "task": "Write a script to compute the average of a list of numbers using arithmetic operations.",
    "code": "```raku\nmy @numbers = 5, 10, 15, 20, 25;\nmy $sum = [+] @numbers;\nmy $average = $sum / @numbers.elems;\nsay $average;\n```"
  },
  {
    "task": "Create a function that returns the remainder of the division of two integers.",
    "code": "```raku\nsub remainder(Int $a, Int $b) {\n    return $a % $b;\n}\n```"
  },
  {
    "task": "Develop a function that can add a variable number of arguments and return the total.",
    "code": "```raku\nsub add(*@args) {\n    [+] @args;\n}\n```"
  },
  {
    "task": "Write a program that subtracts a series of numbers from an initial value.",
    "code": "```raku\nmy $initial-value = 100;\nmy @numbers = 10, 20, 30, 5;\nmy $result = $initial-value - [+] @numbers;\nsay $result;\n```"
  },
  {
    "task": "Implement a function that multiplies all elements in an array and returns the product.",
    "code": "```raku\nsub multiply-elements(@array) {\n    return [*] @array;\n}\n```"
  },
  {
    "task": "Design a program that divides a number by another and rounds the result to two decimal places.",
    "code": "```raku\nmy $numerator = 10;\nmy $denominator = 3;\nmy $result = $numerator / $denominator;\nsay sprintf(\"%.2f\", $result);\n```"
  },
  {
    "task": "Create a function that performs arithmetic operations on complex numbers.",
    "code": "```raku\nsub complex-arithmetic($z1, $z2, $operation) {\n    given $operation {\n        when 'add'      { return $z1 + $z2 }\n        when 'subtract' { return $z1 - $z2 }\n        when 'multiply' { return $z1 * $z2 }\n        when 'divide'   { return $z1 / $z2 }\n        default         { die \"Invalid operation\" }\n    }\n}\n\n# Example usage:\nmy $z1 = Complex.new(3, 4);\nmy $z2 = Complex.new(1, 2);\n\nsay complex-arithmetic($z1, $z2, 'add');\nsay complex-arithmetic($z1, $z2, 'subtract');\nsay complex-arithmetic($z1, $z2, 'multiply');\nsay complex-arithmetic($z1, $z2, 'divide');\n```"
  },
  {
    "task": "Write a function to calculate the area of a rectangle given its length and width using multiplication.",
    "code": "```raku\nsub calculate-area($length, $width) {\n    return $length * $width;\n}\n```"
  },
  {
    "task": "Build a program that converts a price in dollars to another currency using multiplication with exchange rates.",
    "code": "```raku\nsub convert-currency($amount, $exchange-rate) {\n    return $amount * $exchange-rate;\n}\n\nmy $price-in-dollars = 100;\nmy $exchange-rate = 0.85; # Example: USD to EUR\n\nmy $price-in-euros = convert-currency($price-in-dollars, $exchange-rate);\nsay \"Price in Euros: $price-in-euros\";\n```"
  },
  {
    "task": "Implement a function that checks if a number is divisible by another and returns a boolean.",
    "code": "```raku\nsub is-divisible($num, $divisor) {\n    return $num % $divisor == 0;\n}\n```"
  },
  {
    "task": "Write a script to sum the digits of an integer using arithmetic operations.",
    "code": "```raku\nsub sum-of-digits(Int $number) {\n    my $sum = 0;\n    $number = $number.abs;\n    while $number > 0 {\n        $sum += $number % 10;\n        $number div= 10;\n    }\n    return $sum;\n}\n\nmy $integer = prompt('Enter an integer: ');\nsay sum-of-digits($integer);\n```"
  },
  {
    "task": "Develop a function that applies a discount percentage to a price using subtraction and multiplication.",
    "code": "```raku\nsub apply-discount($price, $discount-percentage) {\n    return $price - ($price * $discount-percentage / 100);\n}\n\nsay apply-discount(100, 15); # Example usage\n```"
  },
  {
    "task": "Create a program to calculate the yearly salary given an hourly wage and hours worked per week.",
    "code": "```raku\nsub yearly-salary($hourly-wage, $hours-per-week) {\n    return $hourly-wage * $hours-per-week * 52;\n}\n\nmy $hourly-wage = 25;     # Example hourly wage\nmy $hours-per-week = 40;  # Example hours worked per week\n\nsay yearly-salary($hourly-wage, $hours-per-week);\n```"
  },
  {
    "task": "Design a function that calculates the compound interest over a given period using arithmetic operations.",
    "code": "```raku\nsub compound-interest(Numeric $principal, Numeric $rate, Int $times, Int $period) {\n    return $principal * (1 + $rate / $times) ** ($times * $period);\n}\n\nmy $principal = 1000;\nmy $rate = 0.05;\nmy $times = 4;\nmy $period = 5;\n\nsay compound-interest($principal, $rate, $times, $period);\n```"
  },
  {
    "task": "Write a program that scales a 2D point by a given factor using multiplication.",
    "code": "```raku\nsub scale-point($x, $y, $factor) {\n    return ($x * $factor, $y * $factor);\n}\n\nmy ($x, $y, $factor) = (3, 4, 2);\nmy ($new-x, $new-y) = scale-point($x, $y, $factor);\nsay \"Scaled point: ($new-x, $new-y)\";\n```"
  },
  {
    "task": "Implement a function that calculates the perimeter of a triangle given its side lengths.",
    "code": "```raku\nsub triangle-perimeter($a, $b, $c) {\n    return $a + $b + $c;\n}\n```"
  },
  {
    "task": "Create a function to determine if three sides can form a right triangle using the Pythagorean theorem.",
    "code": "```raku\nsub is-right-triangle($a, $b, $c) {\n    my ($x, $y, $z) = sort { $^a <=> $^b }, $a, $b, $c;\n    return $x**2 + $y**2 == $z**2;\n}\n\n# Example usage:\nsay is-right-triangle(3, 4, 5); # True\nsay is-right-triangle(5, 6, 7); # False\n```"
  },
  {
    "task": "Write a script that calculates the total cost of items in a shopping cart using addition.",
    "code": "```raku\nmy @prices = (19.99, 5.49, 3.75, 12.30);\nmy $total-cost = [+] @prices;\nsay \"Total cost: $total-cost\";\n```"
  },
  {
    "task": "Develop a function that returns the quotient and remainder of a division operation.",
    "code": "```raku\nsub quotient-and-remainder($numerator, $denominator) {\n    my $quotient = $numerator div $denominator;\n    my $remainder = $numerator % $denominator;\n    return ($quotient, $remainder);\n}\n```"
  },
  {
    "task": "Build a program that simulates a basic checkout system using arithmetic operations for totals and discounts.",
    "code": "```raku\nclass CheckoutSystem {\n    has @.items;\n    has %.prices;\n    has $.discount-percent = 0;\n\n    method add-item($item, $price) {\n        @!items.push($item);\n        %!prices{$item} = $price;\n    }\n\n    method set-discount($percent) {\n        $!discount-percent = $percent;\n    }\n\n    method calculate-total() {\n        my $total = @!items.map({ %!prices{$_} }).sum;\n        my $discount = $total * $!discount-percent / 100;\n        return $total - $discount;\n    }\n}\n\nmy $checkout = CheckoutSystem.new;\n$checkout.add-item('apple', 1.00);\n$checkout.add-item('banana', 0.50);\n$checkout.set-discount(10);\nsay \"Total: \" ~ $checkout.calculate-total();\n```"
  },
  {
    "task": "Implement a function to calculate the distance between two points on a plane using subtraction and square roots.",
    "code": "```raku\nsub calculate-distance(@point1, @point2) {\n    my $x-diff = @point2[0] - @point1[0];\n    my $y-diff = @point2[1] - @point1[1];\n    return sqrt($x-diff ** 2 + $y-diff ** 2);\n}\n```"
  },
  {
    "task": "Write a function that calculates the speed of a vehicle given distance and time using division.",
    "code": "```raku\nsub calculate-speed($distance, $time) {\n    return $distance / $time;\n}\n```"
  },
  {
    "task": "Create a program to compute the total minutes in a given number of hours using multiplication.",
    "code": "```raku\nsub total-minutes(Int $hours) {\n    return $hours * 60;\n}\n\nsay total-minutes(5); # Example usage\n```"
  },
  {
    "task": "Design a function that determines the number of dozens of eggs from a given total number of eggs.",
    "code": "```raku\nsub dozens-of-eggs(Int $total-eggs) {\n    return $total-eggs div 12;\n}\n```"
  },
  {
    "task": "Write a script to find the greatest common divisor of two numbers using arithmetic operations.",
    "code": "```raku\nsub gcd(Int $a, Int $b --> Int) {\n    while $b != 0 {\n        ($a, $b) = ($b, $a % $b);\n    }\n    return $a;\n}\n\nmy ($num1, $num2) = (48, 18);\nsay gcd($num1, $num2);\n```"
  },
  {
    "task": "Develop a program that calculates the total weight of multiple items using addition.",
    "code": "```raku\nmy @weights = (2.5, 3.0, 4.2, 1.5); # Example weights\nmy $total-weight = [+] @weights;\nsay \"The total weight is $total-weight\";\n```"
  },
  {
    "task": "Implement a function to convert a temperature from Celsius to Fahrenheit using multiplication and addition.",
    "code": "```raku\nsub celsius-to-fahrenheit($celsius) {\n    return $celsius * 9/5 + 32;\n}\n```"
  },
  {
    "task": "Create a program that determines the age difference between two people given their birth years.",
    "code": "```raku\nsub age-difference(Int $year1, Int $year2) {\n    return abs($year1 - $year2);\n}\n\nmy $birth-year1 = prompt \"Enter the birth year of the first person: \";\nmy $birth-year2 = prompt \"Enter the birth year of the second person: \";\n\nmy $difference = age-difference($birth-year1, $birth-year2);\nsay \"The age difference is $difference years.\";\n```"
  },
  {
    "task": "Write a function to calculate the final price after applying tax and discount using addition and subtraction.",
    "code": "```raku\nsub calculate-final-price($price, $tax, $discount) {\n    my $taxed-price = $price + $tax;\n    my $final-price = $taxed-price - $discount;\n    return $final-price;\n}\n```"
  },
  {
    "task": "Design a program to compute the net profit given total revenue and expenses.",
    "code": "```raku\nsub compute-net-profit($revenue, $expenses) {\n    return $revenue - $expenses;\n}\n\nmy $total-revenue = 10000; # Example value\nmy $total-expenses = 7500; # Example value\n\nmy $net-profit = compute-net-profit($total-revenue, $total-expenses);\nsay \"Net Profit: $net-profit\";\n```"
  },
  {
    "task": "Develop a function to calculate the BMI given weight and height using division and multiplication.",
    "code": "```raku\nsub calculate-bmi($weight, $height) {\n    return $weight / ($height * $height);\n}\n\nsay calculate-bmi(70, 1.75);\n```"
  },
  {
    "task": "Create a function that calculates the midpoint between two numbers using addition and division.",
    "code": "```raku\nsub midpoint($a, $b) {\n    return ($a + $b) / 2;\n}\n```"
  },
  {
    "task": "Write a program that outputs the result of dividing a number by another with remainder.",
    "code": "```raku\nmy $numerator = 10;\nmy $denominator = 3;\nmy $quotient = $numerator div $denominator;\nmy $remainder = $numerator mod $denominator;\nsay \"Quotient: $quotient, Remainder: $remainder\";\n```"
  },
  {
    "task": "Implement a function to calculate the factorial of a number using multiplication.",
    "code": "```raku\nsub factorial(Int $n) {\n    [*] 1..$n;\n}\n\nsay factorial(5); # Example usage\n```"
  },
  {
    "task": "Build a script to find the average of three numbers using addition and division.",
    "code": "```raku\nmy $num1 = 10;\nmy $num2 = 20;\nmy $num3 = 30;\n\nmy $sum = $num1 + $num2 + $num3;\nmy $average = $sum / 3;\n\nsay \"The average is: $average\";\n```"
  },
  {
    "task": "Create a program that simulates a simple bank account using arithmetic operations for deposits and withdrawals.",
    "code": "```raku\nclass BankAccount {\n    has Num $.balance is rw = 0;\n\n    method deposit(Num $amount) {\n        $!balance += $amount;\n    }\n\n    method withdraw(Num $amount) {\n        $!balance -= $amount;\n    }\n\n    method get-balance() {\n        return $!balance;\n    }\n}\n\nmy $account = BankAccount.new;\n$account.deposit(1000);\n$account.withdraw(250);\nsay $account.get-balance; # Output: 750\n```"
  },
  {
    "task": "Write a function that computes the cost per item given a total cost and quantity using division.",
    "code": "```raku\nsub cost-per-item($total-cost, $quantity) {\n    return $total-cost / $quantity;\n}\n```"
  },
  {
    "task": "Design a program that calculates the time required to travel a distance at a given speed.",
    "code": "```raku\nsub travel-time($distance, $speed) {\n    return $distance / $speed;\n}\n\nmy $distance = 100; # distance in kilometers\nmy $speed = 80;     # speed in kilometers per hour\n\nsay \"Time required to travel $distance km at $speed km/h is {travel-time($distance, $speed)} hours.\";\n```"
  },
  {
    "task": "Develop a function that returns the absolute difference between two numbers.",
    "code": "```raku\nsub absolute-difference($a, $b) {\n    return abs($a - $b);\n}\n```"
  },
  {
    "task": "Implement a program to compute the geometric mean of a set of numbers using multiplication and roots.",
    "code": "```raku\nsub geometric-mean(@numbers) {\n    return 0 if @numbers.elems == 0;\n    my $product = [*] @numbers;\n    return $product ** (1 / @numbers.elems);\n}\n\nmy @numbers = (1, 3, 9, 27);\nsay geometric-mean(@numbers);\n```"
  },
  {
    "task": "Write a function to calculate the total interest paid on a loan using arithmetic operations.",
    "code": "```raku\nsub calculate-total-interest($principal, $annual-rate, $years) {\n    my $total-amount = $principal * (1 + $annual-rate/100) ** $years;\n    my $total-interest = $total-amount - $principal;\n    return $total-interest;\n}\n\n# Example usage\nsay calculate-total-interest(1000, 5, 3);\n```"
  },
  {
    "task": "Create a program that calculates the sum of even numbers within a specified range.",
    "code": "```raku\nsub sum-of-evens(Int $start, Int $end) {\n    [+] grep { $_ %% 2 }, $start..$end;\n}\n\nsay sum-of-evens(1, 10);\n```"
  },
  {
    "task": "Design a script to determine the final balance in a savings account after regular deposits and withdrawals.",
    "code": "```raku\nsub calculate_balance(@transactions) {\n    my $balance = 0;\n    for @transactions -> $transaction {\n        $balance += $transaction;\n    }\n    return $balance;\n}\n\nmy @transactions = <100 200 -50 -30 400 -100>;\nsay 'Final Balance: ', calculate_balance(@transactions);\n```"
  },
  {
    "task": "Develop a function to compute the surface area of a cylinder given its radius and height.",
    "code": "```raku\nsub cylinder-surface-area($radius, $height) {\n    my $base-area = 2 * \u03c0 * $radius * $radius;\n    my $side-area = 2 * \u03c0 * $radius * $height;\n    return $base-area + $side-area;\n}\n```"
  },
  {
    "task": "Write a program that outputs the result of an arithmetic sequence given the first term and common difference.",
    "code": "```raku\nsub arithmetic-sequence($first-term, $common-difference, $n) {\n    return $first-term + ($n - 1) * $common-difference;\n}\n\nmy $first-term = 5;\nmy $common-difference = 3;\nmy $n = 10;\n\nsay arithmetic-sequence($first-term, $common-difference, $n);\n```"
  },
  {
    "task": "Implement a function that finds the average speed for a trip given total distance and time.",
    "code": "```raku\nsub average-speed($distance, $time) {\n    return $distance / $time;\n}\n\n# Example usage\nsay average-speed(150, 3); # Output: 50\n```"
  },
  {
    "task": "Create a function to calculate the total cost of a road trip given fuel cost per mile and distance.",
    "code": "```raku\nsub total-cost($fuel-cost-per-mile, $distance) {\n    return $fuel-cost-per-mile * $distance;\n}\n```"
  },
  {
    "task": "Write a script that determines the number of tiles required to cover a floor area using arithmetic operations.",
    "code": "```raku\nsub tiles-required($floor-length, $floor-width, $tile-length, $tile-width) {\n    my $floor-area = $floor-length * $floor-width;\n    my $tile-area = $tile-length * $tile-width;\n    return ($floor-area / $tile-area).ceiling;\n}\n\nmy $floor-length = 10; # Example floor length in meters\nmy $floor-width = 8;   # Example floor width in meters\nmy $tile-length = 0.5; # Example tile length in meters\nmy $tile-width = 0.5;  # Example tile width in meters\n\nsay \"Tiles required: \", tiles-required($floor-length, $floor-width, $tile-length, $tile-width);\n```"
  },
  {
    "task": "Develop a program to calculate the amount of paint needed to cover a wall given its area.",
    "code": "```raku\nsub paint_needed($width, $height, $coverage) {\n    my $area = $width * $height;\n    my $paint_cans = $area / $coverage;\n    return $paint_cans;\n}\n\nmy $width = 10; # Example width in meters\nmy $height = 3; # Example height in meters\nmy $coverage = 10; # Example coverage in square meters per can\n\nmy $cans_required = paint_needed($width, $height, $coverage);\nsay \"Paint cans needed: {ceil($cans_required)}\";\n```"
  },
  {
    "task": "Build a function that calculates the price per unit weight given total price and weight.",
    "code": "```raku\nsub price-per-unit-weight($total-price, $weight) {\n    return $total-price / $weight;\n}\n```"
  },
  {
    "task": "Implement a program that computes the volume of a rectangular prism given its dimensions.",
    "code": "```raku\nsub compute-volume($length, $width, $height) {\n    return $length * $width * $height;\n}\n\nmy $length = 5;\nmy $width = 3;\nmy $height = 2;\n\nmy $volume = compute-volume($length, $width, $height);\nsay \"The volume of the rectangular prism is $volume.\";\n```"
  },
  {
    "task": "Write a function to find the percentage increase or decrease between two numbers.",
    "code": "```raku\nsub percentage-change($original, $new) {\n    return 0 if $original == 0;\n    my $change = $new - $original;\n    return ($change / $original) * 100;\n}\n\nsay percentage-change(100, 150); # Example usage\n```"
  },
  {
    "task": "Create a program to determine the number of complete weeks within a specified number of days.",
    "code": "```raku\nsub complete-weeks(Int $days) {\n    return $days div 7;\n}\n\nsay complete-weeks(45);  # Example usage\n```"
  },
  {
    "task": "Design a function that calculates the break-even point for a business using cost and revenue data.",
    "code": "```raku\nsub break-even-point($fixed-costs, $variable-costs, $price-per-unit) {\n    return $fixed-costs / ($price-per-unit - $variable-costs);\n}\n\nmy $fixed-costs = 10000;\nmy $variable-costs = 5;\nmy $price-per-unit = 10;\n\nsay break-even-point($fixed-costs, $variable-costs, $price-per-unit);\n```"
  },
  {
    "task": "Develop a program that converts a total number of seconds into hours, minutes, and seconds.",
    "code": "```raku\nsub convert-seconds($total-seconds) {\n    my $hours   = $total-seconds div 3600;\n    my $minutes = ($total-seconds mod 3600) div 60;\n    my $seconds = $total-seconds mod 60;\n    return ($hours, $minutes, $seconds);\n}\n\nmy $total-seconds = 7265; # Example input\nmy ($hours, $minutes, $seconds) = convert-seconds($total-seconds);\nsay \"$total-seconds seconds is $hours hours, $minutes minutes, and $seconds seconds.\";\n```"
  },
  {
    "task": "Write a function that calculates the depreciation of an asset over time using arithmetic operations.",
    "code": "```raku\nsub calculate-depreciation($initial-value, $depreciation-rate, $years) {\n    my $depreciated-value = $initial-value;\n    for 1..$years -> $year {\n        $depreciated-value -= $depreciated-value * $depreciation-rate;\n    }\n    return $depreciated-value;\n}\n```"
  },
  {
    "task": "Create a program that computes the final exam grade needed to achieve a target course average.",
    "code": "```raku\nsub compute_final_exam_grade($current_average, $target_average, $final_weight) {\n    return ($target_average - $current_average * (1 - $final_weight)) / $final_weight;\n}\n\nsay \"Enter current average: \";\nmy $current_average = prompt().Numeric;\n\nsay \"Enter target average: \";\nmy $target_average = prompt().Numeric;\n\nsay \"Enter final exam weight (as a decimal): \";\nmy $final_weight = prompt().Numeric;\n\nmy $final_exam_grade = compute_final_exam_grade($current_average, $target_average, $final_weight);\nsay \"You need a grade of {$final_exam_grade.round(2)} on the final exam to achieve your target average.\";\n```"
  },
  {
    "task": "Implement a function to calculate the total cost of groceries given prices and quantities of items.",
    "code": "```raku\nsub total-cost(@prices, @quantities) {\n    my $total = [+] @prices Z* @quantities;\n    return $total;\n}\n\nmy @prices = (2.99, 3.49, 1.99);\nmy @quantities = (3, 2, 5);\n\nsay total-cost(@prices, @quantities);\n```"
  },
  {
    "task": "Write a script that determines the number of years required to double an investment using a fixed interest rate.",
    "code": "```raku\nsub years-to-double-investment($initial-amount, $interest-rate) {\n    my $amount = $initial-amount;\n    my $years = 0;\n    while $amount < 2 * $initial-amount {\n        $amount *= 1 + $interest-rate;\n        $years++;\n    }\n    return $years;\n}\n\nmy $initial-amount = 1000;\nmy $interest-rate = 0.05; # 5% interest rate\nmy $years = years-to-double-investment($initial-amount, $interest-rate);\nsay \"Years to double the investment: $years\";\n```"
  },
  {
    "task": "Develop a function that computes the harmonic mean of a set of numbers using division and addition.",
    "code": "```raku\nsub harmonic-mean(@numbers) {\n    return 0 if @numbers.elems == 0;\n    return @numbers.elems / [+] @numbers.map({ 1 / $_ });\n}\n\nmy @data = 1, 2, 3, 4, 5;\nsay harmonic-mean(@data);\n```"
  },
  {
    "task": "Create a program to find the sum of the squares of numbers in a given range.",
    "code": "```raku\nsub sum-of-squares(Int $start, Int $end) {\n    return [+] ($start .. $end).map({ $_ ** 2 });\n}\n\nmy $start = 1;\nmy $end = 10;\nsay sum-of-squares($start, $end);\n```"
  },
  {
    "task": "Design a function that calculates the energy consumption of an appliance given power and usage time.",
    "code": "```raku\nsub energy-consumption($power, $time) {\n    return $power * $time;\n}\n\nsay energy-consumption(1500, 3); # Example usage\n```"
  },
  {
    "task": "Write a program that simulates a simple stock portfolio using arithmetic operations for buying and selling.",
    "code": "```raku\nclass Stock {\n    has Str $.name;\n    has Num $.price;\n    has Int $.quantity = 0;\n\n    method buy(Int $amount, Num $price) {\n        $!quantity += $amount;\n        $!price = $price;\n    }\n\n    method sell(Int $amount) {\n        $!quantity -= $amount if $amount <= $!quantity;\n    }\n\n    method total-value() {\n        $!quantity * $!price;\n    }\n}\n\nmy $portfolio = Stock.new(name => 'Raku', price => 100.0);\n\n$portfolio.buy(10, 105.0);\nsay \"Total value after buying 10 stocks: \", $portfolio.total-value();\n\n$portfolio.sell(5);\nsay \"Total value after selling 5 stocks: \", $portfolio.total-value();\n```"
  },
  {
    "task": "Implement a function to calculate the gravitational force between two masses using multiplication and division.",
    "code": "```raku\nsub gravitational-force($mass1, $mass2, $distance) {\n    my $G = 6.67430e-11; # gravitational constant in m^3 kg^-1 s^-2\n    return ($G * $mass1 * $mass2) / ($distance ** 2);\n}\n```"
  },
  {
    "task": "Create a function that determines the price per square foot of a piece of real estate.",
    "code": "```raku\nsub price-per-square-foot($total-price, $width, $length) {\n    return $total-price / ($width * $length);\n}\n```"
  },
  {
    "task": "Write a script to compute the total interest earned on a savings account with monthly compounding.",
    "code": "```raku\nmy $principal = 1000; # initial amount\nmy $rate = 0.05; # annual interest rate\nmy $years = 5; # number of years\n\nmy $total_amount = $principal * (1 + $rate / 12) ** (12 * $years);\nmy $interest_earned = $total_amount - $principal;\n\nsay \"Total interest earned: $interest_earned\";\n```"
  },
  {
    "task": "Develop a program that calculates the calories burned during exercise given MET value and duration.",
    "code": "```raku\nsub calculate-calories-burned($met, $duration-in-minutes, $weight-in-kg) {\n    return $met * $weight-in-kg * $duration-in-minutes / 60;\n}\n\nmy $met = 8; # Example MET value for running\nmy $duration = 30; # Duration in minutes\nmy $weight = 70; # Weight in kg\n\nsay calculate-calories-burned($met, $duration, $weight);\n```"
  },
  {
    "task": "Build a function that converts a speed from miles per hour to kilometers per hour using multiplication.",
    "code": "```raku\nsub mph-to-kph($mph) {\n    return $mph * 1.60934;\n}\n```"
  },
  {
    "task": "Implement a program to find the number of days between two dates using arithmetic operations.",
    "code": "```raku\nsub days-between-dates(Str $date1, Str $date2) {\n    my $d1 = Date.new($date1);\n    my $d2 = Date.new($date2);\n    return ($d2 - $d1).days;\n}\n\nmy $date1 = \"2023-01-01\";\nmy $date2 = \"2023-10-01\";\nsay days-between-dates($date1, $date2);\n```"
  },
  {
    "task": "Write a function to calculate the area of a circle given its radius.",
    "code": "```raku\nsub area-of-circle($radius) {\n    return \u03c0 * $radius ** 2;\n}\n```"
  },
  {
    "task": "Create a program that determines the total distance driven given trips with varying speeds and durations.",
    "code": "```raku\nmy @trips = (\n    { speed => 60, duration => 1.5 },\n    { speed => 80, duration => 2 },\n    { speed => 50, duration => 1.2 }\n);\n\nmy $total-distance = [+] @trips.map: { $_<speed> * $_<duration> };\n\nsay \"Total distance driven: $total-distance km\";\n```"
  },
  {
    "task": "Design a function to compute the final price of an item after applying multiple discounts sequentially.",
    "code": "```raku\nsub compute-final-price($initial-price, @discounts) {\n    my $final-price = $initial-price;\n    for @discounts -> $discount {\n        $final-price *= (1 - $discount / 100);\n    }\n    return $final-price;\n}\n\n# Example usage:\nsay compute-final-price(100, [10, 20]); # Computes price after 10% and then 20% discount\n```"
  },
  {
    "task": "Write a script that calculates the number of bricks needed to build a wall given wall dimensions and brick size.",
    "code": "```raku\nsub bricks-needed($wall-length, $wall-height, $brick-length, $brick-height) {\n    my $wall-area = $wall-length * $wall-height;\n    my $brick-area = $brick-length * $brick-height;\n    return ($wall-area / $brick-area).ceiling;\n}\n\nsay bricks-needed(10, 5, 0.3, 0.1);\n```"
  },
  {
    "task": "Develop a program to determine the number of pizzas required for a party given the number of people and slices per pizza.",
    "code": "```raku\nsub pizzas-required(Int $people, Int $slices-per-pizza, Int $slices-per-person) {\n    my $total-slices = $people * $slices-per-person;\n    return ($total-slices / $slices-per-pizza).ceiling;\n}\n\nmy $people = 25;\nmy $slices-per-pizza = 8;\nmy $slices-per-person = 3;\n\nsay \"Pizzas required: \", pizzas-required($people, $slices-per-pizza, $slices-per-person);\n```"
  },
  {
    "task": "Implement a function that calculates the total cost of a meal including tax and tip.",
    "code": "```raku\nsub calculate-total-cost($meal-cost, $tax-rate, $tip-rate) {\n    my $tax = $meal-cost * $tax-rate / 100;\n    my $tip = $meal-cost * $tip-rate / 100;\n    return $meal-cost + $tax + $tip;\n}\n\n# Example usage\nsay calculate-total-cost(50, 10, 15); # Sample input values: meal cost = 50, tax rate = 10%, tip rate = 15%\n```"
  },
  {
    "task": "Create a program to compute the average rainfall over a period using addition and division.",
    "code": "```raku\nmy @rainfall = <3.2 4.5 2.8 5.0 1.9>; # Example rainfall data\nmy $total = [+] @rainfall;\nmy $average = $total / @rainfall.elems;\nsay \"Average rainfall: $average\";\n```"
  },
  {
    "task": "Write a function that determines the number of batches needed to produce a specific quantity of a product.",
    "code": "```raku\nsub batches-needed($total-quantity, $batch-size) {\n    return ($total-quantity / $batch-size).ceiling;\n}\n\n# Example usage\nsay batches-needed(250, 30);  # Output: 9\n```"
  },
  {
    "task": "Design a program to calculate the total energy consumption of a household given individual appliance usage.",
    "code": "```raku\nmy %appliance_usage = (\n    'fridge'       => 150,  # watts\n    'tv'           => 100,  # watts\n    'washing_machine' => 500, # watts\n    'microwave'    => 1200, # watts\n);\n\nmy %hours_used = (\n    'fridge'       => 24,   # hours\n    'tv'           => 4,    # hours\n    'washing_machine' => 1, # hours\n    'microwave'    => 0.5,  # hours\n);\n\nmy $total_energy_consumption = 0;\nfor %appliance_usage.kv -> $appliance, $wattage {\n    $total_energy_consumption += $wattage * %hours_used{$appliance};\n}\n\nsay \"Total Energy Consumption: $total_energy_consumption Wh\";\n```"
  },
  {
    "task": "Develop a function that computes the body surface area of a person using height and weight.",
    "code": "```raku\nsub body-surface-area($height, $weight) {\n    return 0.007184 * ($height ** 0.725) * ($weight ** 0.425);\n}\n\nsay body-surface-area(170, 70); # Example usage\n```"
  },
  {
    "task": "Build a script to calculate the monthly payment on a mortgage using principal, interest rate, and term.",
    "code": "```raku\nsub monthly-payment($principal, $annual-rate, $term-years) {\n    my $monthly-rate = $annual-rate / 12 / 100;\n    my $num-payments = $term-years * 12;\n    return $principal * $monthly-rate / (1 - (1 + $monthly-rate) ** -$num-payments);\n}\n\nmy $principal = 200_000; # example principal amount\nmy $annual-rate = 5; # example annual interest rate\nmy $term-years = 30; # example term in years\n\nmy $payment = monthly-payment($principal, $annual-rate, $term-years);\nsay \"Monthly Payment: \\$\", $payment.round(2);\n```"
  },
  {
    "task": "Implement a function to find the volume of a cone given its height and radius.",
    "code": "```raku\nsub cone-volume($radius, $height) {\n    (1/3) * \u03c0 * $radius ** 2 * $height;\n}\n\nsay cone-volume(3, 5); # Example usage\n```"
  },
  {
    "task": "Write a program that estimates the cost of a trip using fuel efficiency and distance.",
    "code": "```raku\nsub estimate_trip_cost($fuel_efficiency, $distance, $fuel_price_per_unit) {\n    my $fuel_needed = $distance / $fuel_efficiency;\n    my $trip_cost = $fuel_needed * $fuel_price_per_unit;\n    return $trip_cost;\n}\n\nmy $fuel_efficiency = 15; # kilometers per liter\nmy $distance = 300; # kilometers\nmy $fuel_price_per_unit = 1.5; # price per liter\n\nsay \"The estimated trip cost is: \" ~ estimate_trip_cost($fuel_efficiency, $distance, $fuel_price_per_unit) ~ \" currency units\";\n```"
  }
]