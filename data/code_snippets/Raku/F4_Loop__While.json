[
  {
    "task": "Create a program that continuously asks the user to enter a number until they input a negative number.",
    "code": "```raku\nloop {\n    my $input = prompt(\"Enter a number: \");\n    last if $input < 0;\n}\n```"
  },
  {
    "task": "Write a function that doubles a number and repeats the process until the number is greater than 1000.",
    "code": "```raku\nsub double-until-thousand(Int $number) {\n    while $number <= 1000 {\n        $number *= 2;\n    }\n    return $number;\n}\n```"
  },
  {
    "task": "Develop a routine to keep printing 'Hello, World!' until a counter reaches 10.",
    "code": "```raku\nmy $counter = 0;\nwhile $counter < 10 {\n    say 'Hello, World!';\n    $counter++;\n}\n```"
  },
  {
    "task": "Construct a loop that checks if a randomly generated number is even, repeating until an odd number is found.",
    "code": "```raku\nmy $random;\nwhile True {\n    $random = (1..100).roll;\n    last if $random %% 2 == False;\n}\nsay $random;\n```"
  },
  {
    "task": "Design a countdown timer that prints each second until it reaches zero.",
    "code": "```raku\nmy $countdown = 10;\nwhile $countdown >= 0 {\n    say $countdown;\n    sleep 1;\n    $countdown--;\n}\n```"
  },
  {
    "task": "Implement a system where a user can keep adding items to a list until they type 'stop'.",
    "code": "```raku\nmy @list;\nwhile True {\n    print \"Enter an item (or 'stop' to finish): \";\n    my $input = get.chomp;\n    last if $input eq 'stop';\n    @list.push($input);\n}\nsay \"Items in the list: @list[]\";\n```"
  },
  {
    "task": "Write a script that simulates rolling a die and continues until a six is rolled.",
    "code": "```raku\nmy $rolled;\nwhile $rolled != 6 {\n    $rolled = (1..6).roll;\n    say \"Rolled: $rolled\";\n}\nsay \"A six was rolled!\";\n```"
  },
  {
    "task": "Create a program that asks for a password and keeps prompting until the correct password is entered.",
    "code": "```raku\nmy $correct_password = 'secret';\nmy $input;\n\nwhile $input ne $correct_password {\n    print \"Enter password: \";\n    $input = prompt;\n}\nsay \"Access granted.\";\n```"
  },
  {
    "task": "Design a loop that calculates the sum of entered numbers until the user enters zero.",
    "code": "```raku\nmy $sum = 0;\nwhile my $number = prompt('Enter a number: ').Int {\n    $sum += $number;\n}\nsay \"The total sum is: $sum\";\n```"
  },
  {
    "task": "Implement a feature that prints Fibonacci numbers until a number exceeds 100.",
    "code": "```raku\nmy ($a, $b) = (0, 1);\nwhile $a <= 100 {\n    say $a;\n    ($a, $b) = ($b, $a + $b);\n}\n```"
  },
  {
    "task": "Develop a loop that keeps halving a number until it becomes less than one.",
    "code": "```raku\nmy $number = 100; # Example starting number\nwhile $number >= 1 {\n    $number /= 2;\n    say $number;\n}\n```"
  },
  {
    "task": "Write a program that asks for names and keeps storing them until the user enters 'done'.",
    "code": "```raku\nmy @names;\nwhile True {\n    print \"Enter a name (or 'done' to finish): \";\n    my $name = prompt();\n    last if $name eq 'done';\n    @names.push($name);\n}\n```"
  },
  {
    "task": "Create a process that keeps flipping a coin, recording results until there have been five heads.",
    "code": "```raku\nmy $heads = 0; \nmy @results;\n\nwhile $heads < 5 {\n    my $flip = <Heads Tails>.pick;\n    @results.push($flip);\n    $heads++ if $flip eq 'Heads';\n}\n\nsay @results;\n```"
  },
  {
    "task": "Implement a countdown that decreases by two each time, starting from 20, until it reaches zero.",
    "code": "```raku\nmy $count = 20;\nwhile $count >= 0 {\n    say $count;\n    $count -= 2;\n}\n```"
  },
  {
    "task": "Design a solution that repeatedly asks for user input and repeats it back until they type 'exit'.",
    "code": "```raku\nloop {\n    print \"Enter something (type 'exit' to quit): \";\n    my $input = $*IN.get;\n    last if $input eq 'exit';\n    say \"You entered: $input\";\n}\n```"
  },
  {
    "task": "Develop a loop to simulate a bank account balance, repeatedly deducting a fee until the balance is below zero.",
    "code": "```raku\nmy $balance = 100;\nmy $fee = 10;\n\nwhile $balance >= 0 {\n    $balance -= $fee;\n}\n```"
  },
  {
    "task": "Create a sequence generator that multiplies a number by three each time until it reaches or exceeds 100.",
    "code": "```raku\nmy $num = 1;\nwhile $num < 100 {\n    say $num;\n    $num *= 3;\n}\n```"
  },
  {
    "task": "Write a program that keeps generating random numbers between 1 and 10 until it gets a five.",
    "code": "```raku\nuse MONKEY-SEE-NO-EVAL; # To ensure safe random number generation\n\nmy $num;\nwhile $num != 5 {\n    $num = 1 + (10.rand.floor);\n    say $num;\n}\n```"
  },
  {
    "task": "Implement a system to keep checking the temperature and only stop when it falls below freezing.",
    "code": "```raku\nmy $temperature = 10; # Starting temperature\n\nwhile $temperature >= 0 {\n    # Simulate temperature change\n    $temperature -= rand(1..3);\n    say \"Current temperature: $temperature\u00b0C\";\n}\nsay \"Temperature has fallen below freezing.\";\n```"
  },
  {
    "task": "Construct a quiz game that continues asking questions until the player answers incorrectly.",
    "code": "```raku\nmy %questions = (\n    'What is the capital of France?' => 'Paris',\n    'What is 2 + 2?' => '4',\n    'What color is the sky on a clear day?' => 'Blue'\n);\n\nwhile True {\n    my ($question, $answer) = %questions.pick;\n    say $question;\n    my $user-answer = prompt 'Your answer: ';\n    if $user-answer.lc ne $answer.lc {\n        say \"Incorrect! Game over.\";\n        last;\n    } else {\n        say \"Correct! Next question.\";\n    }\n}\n```"
  },
  {
    "task": "Write a function that calculates factorials of a number, repeating the process for numbers 1 through 5.",
    "code": "```raku\nsub factorial($n) {\n    my $result = 1;\n    while $n > 1 {\n        $result *= $n;\n        $n--;\n    }\n    return $result;\n}\n\nfor 1..5 -> $num {\n    say \"Factorial of $num is \", factorial($num);\n}\n```"
  },
  {
    "task": "Create a loop that prints all even numbers between 1 and 50.",
    "code": "```raku\nmy $i = 1;\nwhile $i <= 50 {\n    if $i % 2 == 0 {\n        say $i;\n    }\n    $i++;\n}\n```"
  },
  {
    "task": "Design a program that continuously asks for user input until a palindrome is entered.",
    "code": "```raku\nloop {\n    print \"Enter a string: \";\n    my $input = prompt;\n    last if $input eq $input.flip;\n}\n```"
  },
  {
    "task": "Implement a countdown that decreases by one each second, starting from 100.",
    "code": "```raku\nmy $count = 100;\nwhile $count >= 0 {\n    say $count;\n    $count--;\n    sleep 1;\n}\n```"
  },
  {
    "task": "Write a script that repeatedly asks for a number and adds it to a total until the total exceeds 500.",
    "code": "```raku\nmy $total = 0;\nwhile $total <= 500 {\n    print \"Enter a number: \";\n    my $number = prompt().Int;\n    $total += $number;\n}\n```"
  },
  {
    "task": "Create a loop that generates random letters until the letter 'Z' appears.",
    "code": "```raku\nwhile (my $letter = ('A'..'Z').pick) ne 'Z' {\n    say $letter;\n}\n```"
  },
  {
    "task": "Write a process that continues prompting for two numbers and prints their sum if it's even.",
    "code": "```raku\nloop {\n    my $num1 = prompt 'Enter the first number: ';\n    my $num2 = prompt 'Enter the second number: ';\n    my $sum = $num1 + $num2;\n    say \"The sum is even: $sum\" if $sum %% 2;\n}\n```"
  },
  {
    "task": "Develop a loop that simulates a traffic light sequence until a manual stop command is received.",
    "code": "```raku\nmy $running = True;\nwhile $running {\n    say \"Red Light\";\n    sleep 3;\n    say \"Green Light\";\n    sleep 3;\n    say \"Yellow Light\";\n    sleep 1;\n    \n    print \"Continue? (yes to continue, no to stop): \";\n    my $input = prompt;\n    $running = False if $input eq 'no';\n}\n```"
  },
  {
    "task": "Implement a feature that keeps printing numbers in reverse order starting from 10.",
    "code": "```raku\nmy $num = 10;\nwhile $num >= 1 {\n    say $num;\n    $num--;\n}\n```"
  },
  {
    "task": "Create a program that rolls two dice and continues until the sum is exactly seven.",
    "code": "```raku\nwhile True {\n    my $die1 = (1..6).roll;\n    my $die2 = (1..6).roll;\n    last if $die1 + $die2 == 7;\n}\n```"
  },
  {
    "task": "Design a loop that keeps asking for ages and prints the average once a negative age is entered.",
    "code": "```raku\nmy $sum = 0;\nmy $count = 0;\n\nwhile True {\n    print \"Enter age: \";\n    my $age = prompt().Int;\n    last if $age < 0;\n    $sum += $age;\n    $count++;\n}\n\nif $count > 0 {\n    my $average = $sum / $count;\n    say \"Average age: $average\";\n} else {\n    say \"No ages were entered.\";\n}\n```"
  },
  {
    "task": "Write a routine that squares numbers starting from 1 until the square is greater than 500.",
    "code": "```raku\nmy $n = 1;\nwhile $n ** 2 <= 500 {\n    say $n ** 2;\n    $n++;\n}\n```"
  },
  {
    "task": "Implement a system to ask for a string and append it to a file until 'end' is typed.",
    "code": "```raku\nmy $filename = 'output.txt';\nmy $continue = True;\n\nwhile $continue {\n    print \"Enter a string (type 'end' to finish): \";\n    my $input = $*IN.get.trim;\n    if $input eq 'end' {\n        $continue = False;\n    } else {\n        spurt $filename, \"$input\\n\", :append;\n    }\n}\n```"
  },
  {
    "task": "Create a script that checks if a number is prime, repeating for each number entered by the user.",
    "code": "```raku\nsub is-prime(Int $n) {\n    return False if $n < 2;\n    for 2 .. $n.sqrt.Int -> $i {\n        return False if $n %% $i;\n    }\n    return True;\n}\n\nwhile True {\n    print \"Enter a number: \";\n    my $input = prompt();\n    last if $input.lc eq 'exit';\n    my $number = $input.Int;\n    if is-prime($number) {\n        say \"$number is a prime number.\";\n    } else {\n        say \"$number is not a prime number.\";\n    }\n}\n```"
  },
  {
    "task": "Develop a countdown that prints numbers starting from 50 down to 1.",
    "code": "```raku\nmy $count = 50;\nwhile $count >= 1 {\n    say $count;\n    $count--;\n}\n```"
  },
  {
    "task": "Write a program that keeps doubling the value of a variable until it exceeds 200.",
    "code": "```raku\nmy $value = 1;\nwhile $value <= 200 {\n    $value *= 2;\n}\nsay $value;\n```"
  },
  {
    "task": "Design a loop that keeps generating a random string of letters until a specific word is formed.",
    "code": "```raku\nmy $target-word = \"hello\";\nmy $generated-word = \"\";\n\nwhile $generated-word ne $target-word {\n    $generated-word = (1..5).map({ ('a'..'z').pick }).join;\n    say $generated-word;\n}\n```"
  },
  {
    "task": "Implement a system that continuously fetches data from a sensor until a threshold is crossed.",
    "code": "```raku\nmy $threshold = 100;\nmy $sensor-value = 0;\n\nwhile $sensor-value <= $threshold {\n    $sensor-value = get-sensor-data();\n}\n\nsub get-sensor-data {\n    # Simulate fetching data from a sensor\n    return 10.rand * 20; # returns a value between 0 and 200\n}\n```"
  },
  {
    "task": "Create a game where a player guesses a number, and the game continues until the player guesses correctly.",
    "code": "```raku\nmy $secret-number = 42; # Example secret number\nmy $guess;\n\nwhile $guess != $secret-number {\n    print \"Guess the number: \";\n    $guess = prompt();\n    if $guess == $secret-number {\n        say \"Congratulations! You've guessed correctly.\";\n    } else {\n        say \"Try again!\";\n    }\n}\n```"
  },
  {
    "task": "Write a loop that continues to add random numbers to a list until the list has 10 even numbers.",
    "code": "```raku\nmy @list;\nwhile @list.grep(* %% 2).elems < 10 {\n    @list.push: (^1000).roll;\n}\n```"
  },
  {
    "task": "Design a routine that keeps removing elements from a list until it is empty.",
    "code": "```raku\nsub empty-list(@list) {\n    while @list {\n        @list.pop;\n    }\n    return @list;\n}\n\nmy @elements = <a b c d>;\nempty-list(@elements);\nsay @elements; # Outputs: ()\n```"
  },
  {
    "task": "Implement a sequence that prints the alphabet repeatedly until interrupted by the user.",
    "code": "```raku\nmy @alphabet = 'A' .. 'Z';\nloop {\n    for @alphabet -> $letter {\n        say $letter;\n    }\n}\n```"
  },
  {
    "task": "Create a program that continuously checks for updates and stops once an update is available.",
    "code": "```raku\nmy $update-available = False;\nwhile !$update-available {\n    # Simulate checking for updates\n    $update-available = Bool.pick; # Randomly simulate an update becoming available\n}\nsay \"Update is available!\";\n```"
  },
  {
    "task": "Write a function that keeps dividing a number by two until it results in a fractional value.",
    "code": "```raku\nsub divide-until-fractional($number) {\n    while $number %% 2 {\n        $number /= 2;\n    }\n    return $number;\n}\n```"
  },
  {
    "task": "Develop a loop that keeps asking for student's grades and calculates the average until a grade of -1 is entered.",
    "code": "```raku\nmy @grades;\nloop {\n    my $grade = prompt(\"Enter student's grade (-1 to finish): \").Int;\n    last if $grade == -1;\n    @grades.push($grade);\n}\nmy $average = @grades.elems ?? @grades.sum / @grades.elems !! 0;\nsay \"Average grade: $average\";\n```"
  },
  {
    "task": "Design a feature that continuously monitors a file for changes and stops when no changes are detected for a minute.",
    "code": "```raku\nuse IO::Notification;\n\nmy $filename = 'path/to/your/file.txt';\nmy $changed = True;\nmy $timeout = 60;\n\nmy $watcher = IO::Notification.watch-path($filename);\n\nwhile $changed {\n    $changed = False;\n    my $start-time = now;\n\n    while now - $start-time < $timeout {\n        my $event = $watcher.poll(:nohang);\n        if $event.defined && $event.event ~~ 'modify' {\n            $changed = True;\n            last;\n        }\n    }\n}\n\n$watcher.close;\n```"
  },
  {
    "task": "Implement a process where a motor runs until a certain distance is reached.",
    "code": "```raku\nmy $distance = 0;\nmy $target-distance = 100;\n\nwhile $distance < $target-distance {\n    say \"Motor is running. Current distance: $distance\";\n    $distance += 10; # Simulate motor running by increasing distance\n}\n\nsay \"Target distance reached: $distance\";\n```"
  },
  {
    "task": "Create a script that keeps generating random numbers and stops when it generates a prime number.",
    "code": "```raku\nuse nqp;\nwhile True {\n    my $num = nqp::rand_i(100) + 1;\n    if $num.is-prime {\n        say \"Prime number generated: $num\";\n        last;\n    }\n}\n```"
  },
  {
    "task": "Write a program that asks for the user's favorite color and keeps asking until they say 'blue'.",
    "code": "```raku\nmy $color;\nwhile $color ne 'blue' {\n    print \"What is your favorite color? \";\n    $color = prompt;\n}\n```"
  },
  {
    "task": "Develop a loop that continuously prints the time every second until a key is pressed.",
    "code": "```raku\nuse Terminal::ANSIColor;\n\nmy $continue = True;\nsignal(SIGINT, { $continue = False });\n\nwhile $continue {\n    say colored(now, 'green');\n    sleep 1;\n}\n```"
  },
  {
    "task": "Create a system to keep downloading data from a server until the connection is lost.",
    "code": "```raku\nwhile (True) {\n    my $connection = check_connection();\n    last unless $connection;\n    download_data();\n}\n```"
  },
  {
    "task": "Write a process to keep a light on until the ambient light level is sufficient.",
    "code": "```raku\nmy $ambient-light-level = 0;\nmy $sufficient-light-level = 100;\n\nwhile $ambient-light-level < $sufficient-light-level {\n    turn-on-light();\n    $ambient-light-level = read-ambient-light-level();\n}\n\nsub turn-on-light {\n    say \"Light is on.\";\n}\n\nsub read-ambient-light-level {\n    # Simulate reading ambient light level\n    return $ambient-light-level + 10;\n}\n```"
  },
  {
    "task": "Implement a feature that continuously plays a sound until the user presses a button.",
    "code": "```raku\nuse NativeCall;\n\n# Assume a function 'play-sound' exists to play a sound\nsub play-sound() is native('soundlib') { ... }\nsub check-button() returns int is native('inputlib') { ... }\n\nwhile check-button() == 0 {\n    play-sound();\n}\n```"
  },
  {
    "task": "Design a program that keeps multiplying a matrix by itself until its determinant is greater than 1000.",
    "code": "```raku\nmy @matrix = [[1, 2], [3, 4]];\nsub determinant(@m) {\n    return @m[0][0] * @m[1][1] - @m[0][1] * @m[1][0];\n}\n\nsub matrix-multiply(@a, @b) {\n    my @result = \n        [ @a[0][0] * @b[0][0] + @a[0][1] * @b[1][0], @a[0][0] * @b[0][1] + @a[0][1] * @b[1][1] ],\n        [ @a[1][0] * @b[0][0] + @a[1][1] * @b[1][0], @a[1][0] * @b[0][1] + @a[1][1] * @b[1][1] ];\n    return @result;\n}\n\nwhile determinant(@matrix) <= 1000 {\n    @matrix = matrix-multiply(@matrix, @matrix);\n}\n\nsay @matrix;\n```"
  },
  {
    "task": "Create a script that keeps prompting the user to guess a word until they get it right.",
    "code": "```raku\nmy $secret-word = \"raku\";\n\nwhile (True) {\n    print \"Guess the word: \";\n    my $guess = prompt();\n    last if $guess eq $secret-word;\n}\n\nsay \"Correct! The word is $secret-word.\";\n```"
  },
  {
    "task": "Write a loop that simulates a car's fuel consumption and stops when the tank is empty.",
    "code": "```raku\nmy $fuel = 50; # initial fuel in liters\n\nwhile $fuel > 0 {\n    say \"Driving... Fuel remaining: $fuel liters\";\n    $fuel -= 5; # fuel consumption per iteration\n}\n\nsay \"The tank is empty.\";\n```"
  },
  {
    "task": "Develop a routine that keeps checking if a file exists and stops once it does.",
    "code": "```raku\nmy $filename = \"your-file.txt\";\nwhile (!$filename.IO.e) {\n    sleep 1;\n}\n```"
  },
  {
    "task": "Implement a feature that continuously calculates the square root of a number until it's less than 0.1.",
    "code": "```raku\nmy $number = 100; # Starting value\nwhile $number >= 0.1 {\n    $number = $number.sqrt;\n    say $number;\n}\n```"
  },
  {
    "task": "Create a system that prints 'Processing...' every second until a task is complete.",
    "code": "```raku\nmy $task-complete = False;\n\nwhile !$task-complete {\n    say 'Processing...';\n    sleep 1;\n    # Simulate task completion condition\n    # $task-complete = True;  # Uncomment to stop the loop\n}\n```"
  },
  {
    "task": "Write a loop that repeatedly checks the status of a process until it reports 'complete'.",
    "code": "```raku\nmy $status = 'incomplete'; # Initial status\nwhile $status ne 'complete' {\n    # Simulate a status check, update $status somehow\n    # For demonstration purpose, assume a status update function\n    $status = check-process-status();\n}\n```"
  },
  {
    "task": "Design a routine to keep pinging a server and alert when the connection is lost.",
    "code": "```raku\nsub ping-server($server) {\n    # Simulate a ping result for the purpose of this example\n    return Bool.pick;\n}\n\nsub alert-connection-lost {\n    say \"Alert: Connection to server lost!\";\n}\n\nmy $server = 'example.com';\n\nwhile True {\n    unless ping-server($server) {\n        alert-connection-lost;\n        last;\n    }\n    sleep 1;  # Pause for a second before trying again\n}\n```"
  },
  {
    "task": "Implement a loop that counts down from 100 by fives until it reaches zero.",
    "code": "```raku\nmy $count = 100;\nwhile $count >= 0 {\n    say $count;\n    $count -= 5;\n}\n```"
  },
  {
    "task": "Create a script that keeps track of inventory items being added or removed until an end signal is given.",
    "code": "```raku\nmy %inventory;\nloop {\n    say \"Enter command (add/remove/show/end): \";\n    my $input = prompt;\n    given $input {\n        when 'add' {\n            say \"Enter item name: \";\n            my $item = prompt;\n            say \"Enter quantity: \";\n            my $quantity = prompt.Int;\n            %inventory{$item} += $quantity;\n            say \"$quantity $item(s) added.\";\n        }\n        when 'remove' {\n            say \"Enter item name: \";\n            my $item = prompt;\n            say \"Enter quantity: \";\n            my $quantity = prompt.Int;\n            if %inventory{$item} >= $quantity {\n                %inventory{$item} -= $quantity;\n                say \"$quantity $item(s) removed.\";\n            } else {\n                say \"Not enough $item(s) in inventory.\";\n            }\n        }\n        when 'show' {\n            say \"Current inventory:\";\n            for %inventory.kv -> $item, $quantity {\n                say \"$item: $quantity\";\n            }\n        }\n        when 'end' {\n            say \"Ending inventory management.\";\n            last;\n        }\n        default {\n            say \"Invalid command.\";\n        }\n    }\n}\n```"
  },
  {
    "task": "Write a program that keeps calculating the power of two for numbers until a result is greater than 1000.",
    "code": "```raku\nmy $n = 0;\nmy $result = 1;\nwhile $result <= 1000 {\n    $result = 2 ** $n;\n    $n++;\n}\n```"
  },
  {
    "task": "Develop a sequence that keeps appending random numbers to an array until its length is 20.",
    "code": "```raku\nmy @numbers;\nwhile @numbers.elems < 20 {\n    @numbers.append: (1..100).roll;\n}\n```"
  },
  {
    "task": "Implement a routine that continuously rotates an image until it matches a reference orientation.",
    "code": "```raku\nsub rotate-image($image) {\n    # Placeholder for actual image rotation logic\n    return $image.rotated;\n}\n\nsub image-matches-orientation($image, $reference) {\n    # Placeholder for actual image orientation comparison logic\n    return $image.orientation eq $reference.orientation;\n}\n\nsub rotate-until-match($image, $reference) {\n    while !image-matches-orientation($image, $reference) {\n        $image = rotate-image($image);\n    }\n    return $image;\n}\n```"
  },
  {
    "task": "Design a loop that keeps printing random jokes until the user stops it.",
    "code": "```raku\nmy @jokes = (\n    \"Why don't scientists trust atoms? Because they make up everything!\",\n    \"What do you get if you cross a cat with a dark horse? Kitty Perry.\",\n    \"Why was the math book sad? Because it had too many problems.\",\n    \"What do you call fake spaghetti? An impasta!\",\n    \"Why do seagulls fly over the ocean? Because if they flew over the bay, they'd be bagels!\"\n);\n\nwhile True {\n    say @jokes.pick;\n    say \"Press Enter to continue or type 'stop' to quit:\";\n    my $input = $*IN.get.trim;\n    last if $input eq 'stop';\n}\n```"
  },
  {
    "task": "Create a program that accepts user feedback and continues until a positive feedback is received.",
    "code": "```raku\nloop {\n    print \"Please enter your feedback: \";\n    my $feedback = prompt;\n    last if $feedback ~~ /positive/i;\n}\n```"
  },
  {
    "task": "Write a loop that repeatedly reads sensor data and stops when a stable reading is observed.",
    "code": "```raku\nmy $previous-reading;\nmy $current-reading;\n\nwhile True {\n    $current-reading = get-sensor-data();\n    last if $current-reading == $previous-reading;\n    $previous-reading = $current-reading;\n}\n```"
  },
  {
    "task": "Develop a system that simulates a stopwatch, counting seconds until stopped manually.",
    "code": "```raku\nmy $seconds = 0;\nsay \"Press ENTER to stop the stopwatch.\";\nwhile $*IN.get !~~ /^\\s*$/ {\n    sleep 1;\n    $seconds++;\n    say \"Elapsed time: $seconds second(s)\";\n}\nsay \"Stopwatch stopped at $seconds second(s).\";\n```"
  },
  {
    "task": "Create a script that continues adding random integers to a sum until the sum exceeds 100.",
    "code": "```raku\nmy $sum = 0;\nwhile $sum <= 100 {\n    $sum += (1..100).pick;\n}\n```"
  },
  {
    "task": "Implement a process to track a moving object until it stops.",
    "code": "```raku\nmy $velocity = 10; # initial velocity\nmy $position = 0;  # initial position\n\nwhile $velocity > 0 {\n    $position += $velocity;\n    $velocity--; # simulate deceleration\n    say \"Position: $position, Velocity: $velocity\";\n}\nsay \"Object has stopped.\";\n```"
  },
  {
    "task": "Design a routine to keep checking user login attempts until a successful login occurs.",
    "code": "```raku\nmy $successful = False;\n\nwhile !$successful {\n    print \"Enter username: \";\n    my $username = prompt;\n    print \"Enter password: \";\n    my $password = prompt;\n\n    # Simulate a login check\n    $successful = check_login($username, $password);\n    \n    if !$successful {\n        say \"Login failed. Please try again.\";\n    }\n}\n\nsub check_login($username, $password) {\n    # Placeholder for actual login validation logic\n    return $username eq 'admin' && $password eq 'secret';\n}\n```"
  },
  {
    "task": "Write a loop that repeatedly calculates the area of a circle for radii from 1 to 10.",
    "code": "```raku\nmy $radius = 1;\nwhile $radius <= 10 {\n    my $area = pi * $radius ** 2;\n    say \"Radius: $radius, Area: $area\";\n    $radius++;\n}\n```"
  },
  {
    "task": "Create a program that continues flipping a card from a deck until an ace is drawn.",
    "code": "```raku\nmy @deck = ('2'..'10', 'J', 'Q', 'K', 'A') xx 4;\n@deck .= scramble;\n\nmy $drawn-card;\nwhile $drawn-card ne 'A' {\n    $drawn-card = @deck.shift;\n    say \"Drawn card: $drawn-card\";\n}\nsay \"An ace was drawn!\";\n```"
  },
  {
    "task": "Develop a loop that keeps asking for a word and stores it until a word with more than five letters is entered.",
    "code": "```raku\nmy @words;\nwhile True {\n    print \"Enter a word: \";\n    my $word = prompt;\n    @words.push($word);\n    last if $word.chars > 5;\n}\n```"
  },
  {
    "task": "Implement a feature that continuously calculates the exponential growth of a population until it doubles.",
    "code": "```raku\nmy $initial_population = 100; # Example initial population\nmy $growth_rate = 0.05;       # Example growth rate (5%)\nmy $target_population = $initial_population * 2;\n\nmy $current_population = $initial_population;\n\nwhile $current_population < $target_population {\n    $current_population *= (1 + $growth_rate);\n}\n\nsay \"Population has doubled to: $current_population\";\n```"
  },
  {
    "task": "Write a script that repeats a string a certain number of times until a limit is reached.",
    "code": "```raku\nmy $string = \"Hello\";\nmy $limit = 5;\nmy $count = 0;\nmy $result = \"\";\n\nwhile $count < $limit {\n    $result ~= $string;\n    $count++;\n}\n\nsay $result;\n```"
  },
  {
    "task": "Create a routine that keeps accessing an API endpoint until it returns a specific result.",
    "code": "```raku\nsub access-api-until-result($url, $desired-result) {\n    my $ua = HTTP::UserAgent.new;\n    my $response;\n\n    while (!$response.defined || $response.content ne $desired-result) {\n        $response = $ua.get($url);\n        sleep 1 if $response.content ne $desired-result;\n    }\n\n    return $response.content;\n}\n\n# Example usage\nmy $result = access-api-until-result('http://example.com/api', 'desired-result');\nsay $result;\n```"
  },
  {
    "task": "Design a loop that continues to fetch stock prices until a certain price threshold is crossed.",
    "code": "```raku\nmy $threshold = 100;  # Example threshold\nmy $current-price = 0;\n\nwhile $current-price <= $threshold {\n    $current-price = fetch-stock-price();\n}\n\nsub fetch-stock-price {\n    # Simulate fetching a stock price\n    return (90..110).pick;\n}\n```"
  },
  {
    "task": "Implement a process that keeps monitoring CPU usage until it drops below 10%.",
    "code": "```raku\nuse System::Statistics::Linux;\n\nmy $cpu_monitor = System::Statistics::Linux->new( sysinfo => 1 );\n\nwhile True {\n    my $cpu_info = $cpu_monitor->get->cpu;\n    my $usage = 100 - $cpu_info->{idle};\n    \n    last if $usage < 10;\n    \n    sleep 1;\n}\n```"
  },
  {
    "task": "Write a program that asks for a series of numbers and prints the largest once a negative number is entered.",
    "code": "```raku\nmy $largest = -Inf;\nloop {\n    print \"Enter a number: \";\n    my $input = get.trim;\n    if $input ~~ /^ '-'? \\d+ $/ {\n        my $number = $input.Int;\n        last if $number < 0;\n        $largest = $number if $number > $largest;\n    }\n}\nsay \"The largest number entered was: $largest\";\n```"
  },
  {
    "task": "Develop a system that keeps a heater on until the room reaches a desired temperature.",
    "code": "```raku\nmy $desired-temperature = 22; # Desired temperature in Celsius\nmy $current-temperature = 18; # Initial current temperature\n\nwhile $current-temperature < $desired-temperature {\n    say \"Heater is on. Current temperature: $current-temperature\u00b0C\";\n    $current-temperature++; # Simulate the increase in temperature\n}\n\nsay \"Desired temperature reached: $current-temperature\u00b0C. Heater is off.\";\n```"
  },
  {
    "task": "Create a loop that repeatedly checks if a door is open and alerts if it remains open for too long.",
    "code": "```raku\nmy $door-open = True;\nmy $open-time = 0;\nwhile $door-open {\n    $open-time++;\n    if $open-time > 5 {\n        say \"Alert: The door has been open for too long!\";\n        last;\n    }\n    # Simulate door status check\n    $door-open = Bool.pick; # Randomly close the door\n}\n```"
  },
  {
    "task": "Implement a feature that keeps adding random characters to a string until its length is 8.",
    "code": "```raku\nmy $string = '';\nwhile $string.chars < 8 {\n    $string ~= ('a'..'z').pick;\n}\n```"
  },
  {
    "task": "Design a routine that simulates a race and continues until a participant crosses the finish line.",
    "code": "```raku\nsub simulate-race() {\n    my $finish-line = 100;\n    my $position = 0;\n    \n    while $position < $finish-line {\n        $position += 1 + (1..10).pick;\n        say \"Current position: $position\";\n    }\n    \n    say \"Finish line crossed!\";\n}\n\nsimulate-race();\n```"
  },
  {
    "task": "Write a script that keeps checking an email inbox until a specific email is received.",
    "code": "```raku\nmy $inbox = ['Welcome', 'Newsletter', 'Meeting', 'Special Offer', 'Important Email'];\n\nmy $found = False;\nmy $target_email = 'Important Email';\n\nwhile !$found {\n    for $inbox -> $email {\n        if $email eq $target_email {\n            say \"Email received: $email\";\n            $found = True;\n            last;\n        }\n    }\n    # Simulate checking the inbox again\n    sleep 1;\n}\n```"
  },
  {
    "task": "Create a loop that continues to play a video on repeat until the user interrupts.",
    "code": "```raku\nloop {\n    play-video();\n    last if check-user-interrupt();\n}\n```"
  },
  {
    "task": "Develop a process that keeps scanning for Bluetooth devices until a specific device is found.",
    "code": "```raku\nmy $target-device = \"TargetDeviceName\";\nmy $found = False;\n\nwhile !$found {\n    my @devices = scan-for-bluetooth-devices();\n    for @devices -> $device {\n        if $device eq $target-device {\n            $found = True;\n            last;\n        }\n    }\n}\n\nsub scan-for-bluetooth-devices {\n    # Simulate scanning for devices\n    return <DeviceA DeviceB TargetDeviceName DeviceC>;\n}\n```"
  },
  {
    "task": "Implement a script that continuously captures images from a webcam until a motion is detected.",
    "code": "```raku\nuse NativeCall;\n\n# Assuming a hypothetical library for image capturing and motion detection\nsub capture-image() returns Blob is native('webcam') { ... }\nsub detect-motion(Blob) returns Bool is native('motion') { ... }\n\nwhile True {\n    my $image = capture-image();\n    if detect-motion($image) {\n        last;\n    }\n}\n```"
  },
  {
    "task": "Design a program that keeps playing a sound file until the user presses a mute button.",
    "code": "```raku\nuse NativeCall;\n\n# Assuming a native call to a function to play sound\nsub play-sound() is native('soundlib') { ... }\nsub is-mute-pressed() is native('inputlib') returns int { ... }\n\nwhile !is-mute-pressed() {\n    play-sound();\n}\n```"
  },
  {
    "task": "Create a loop that repeatedly generates a random password until it meets certain security criteria.",
    "code": "```raku\nsub generate-password {\n    my $chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()';\n    return join '', map { $chars[rand($chars.chars)] }, 1..12;\n}\n\nsub is-secure($password) {\n    return $password ~~ /<:upper>/ && $password ~~ /<:lower>/ && $password ~~ /\\d/ && $password ~~ /<[%!@#$%^&*()]>/\n}\n\nmy $password;\nwhile !$password || !is-secure($password) {\n    $password = generate-password();\n}\n\nsay \"Generated secure password: $password\";\n```"
  },
  {
    "task": "Write a process that keeps checking for file changes in a directory and logs them until stopped.",
    "code": "```raku\nuse IO::Notification;\n\nmy $path = 'path/to/directory';\nmy $watcher = IO::Notification.watch-path($path);\n\nwhile True {\n    for $watcher.poll -> $event {\n        say \"Change detected: $event.path()\";\n    }\n}\n```"
  }
]