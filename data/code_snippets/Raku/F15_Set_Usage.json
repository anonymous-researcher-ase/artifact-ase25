[
  {
    "task": "Create a set to store unique usernames and demonstrate adding new ones.",
    "code": "```raku\nmy set $usernames;\n\n$usernames.insert('Alice');\n$usernames.insert('Bob');\n$usernames.insert('Charlie');\n\nsay $usernames;\n\n$usernames.insert('Alice'); # Attempt to add a duplicate\n$usernames.insert('David');\n\nsay $usernames;\n```"
  },
  {
    "task": "Write a function that returns the union of two sets of integers.",
    "code": "```raku\nsub union-of-sets(Set $set1, Set $set2) {\n    $set1 \u222a $set2;\n}\n```"
  },
  {
    "task": "Given two sets of strings, find their intersection.",
    "code": "```raku\nmy set $set1 = <apple banana cherry>;\nmy set $set2 = <banana cherry date>;\n\nmy set $intersection = $set1 \u2229 $set2;\nsay $intersection;\n```"
  },
  {
    "task": "Implement a set to track visited web pages and check if a page has been visited.",
    "code": "```raku\nmy %visited-pages;\nsub visit-page(Str $url) {\n    %visited-pages{$url} = True;\n}\n\nsub has-visited(Str $url) {\n    return %visited-pages{$url}:exists;\n}\n\n# Example usage\nvisit-page('https://example.com');\nsay has-visited('https://example.com'); # True\nsay has-visited('https://raku.org');    # False\n```"
  },
  {
    "task": "Create a set from a list of numbers and remove duplicates.",
    "code": "```raku\nmy @numbers = 1, 2, 3, 2, 4, 5, 1;\nmy $set = @numbers.Set;\nsay $set;\n```"
  },
  {
    "task": "Check if a set is a subset of another set.",
    "code": "```raku\nmy $set1 = set(<a b c>);\nmy $set2 = set(<a b c d e>);\nsay $set1 \u2286 $set2; # True if $set1 is a subset of $set2\n```"
  },
  {
    "task": "Demonstrate adding and removing elements from a set of book titles.",
    "code": "```raku\nmy set $books = <The Hobbit 1984 Brave New World>;\n\n# Add elements to the set\n$books = $books \u222a <Dune Fahrenheit 451>;\n\n# Remove elements from the set\n$books = $books \u2216 <1984>;\n\nsay $books;\n```"
  },
  {
    "task": "Create a set and show how to clear all its elements.",
    "code": "```raku\nmy %set = set(1, 2, 3, 4, 5);\n%set = set();\n```"
  },
  {
    "task": "Write a program to find the difference between two sets of employee IDs.",
    "code": "```raku\nmy %set1 = set(<E001 E002 E003 E004>);\nmy %set2 = set(<E003 E004 E005 E006>);\n\nmy %difference = %set1 (-) %set2;\nsay %difference;\n```"
  },
  {
    "task": "Implement a set to store unique email addresses and check membership.",
    "code": "```raku\nmy $emails = set();\n\n# Add emails to the set\n$emails.insert('example1@example.com');\n$emails.insert('example2@example.com');\n$emails.insert('example3@example.com');\n\n# Check membership\nsay 'example1@example.com' \u2208 $emails; # True\nsay 'example4@example.com' \u2208 $emails; # False\n```"
  },
  {
    "task": "Use a set to determine if two lists have any common elements.",
    "code": "```raku\nmy @list1 = <a b c d>;\nmy @list2 = <x y z a>;\n\nmy %set = @list1.SetHash;\nmy $has_common = any(@list2) ~~ %set.keys;\n\nsay $has_common;\n```"
  },
  {
    "task": "Create a set to represent a group of students and update it with new entries.",
    "code": "```raku\nmy %students-set = set(\"Alice\", \"Bob\", \"Charlie\");\n\n%students-set.insert(\"David\", \"Eve\");\n\nsay %students-set;\n```"
  },
  {
    "task": "Write a function to find symmetric difference between two sets of colors.",
    "code": "```raku\nsub symmetric-difference(@set1, @set2) {\n    my %set1 = @set1.Set;\n    my %set2 = @set2.Set;\n    return (%set1 (-) %set2).keys;\n}\n\nmy @colors1 = <red blue green>;\nmy @colors2 = <blue yellow green>;\n\nsay symmetric-difference(@colors1, @colors2);\n```"
  },
  {
    "task": "Implement a set to store unique product codes and demonstrate iteration over it.",
    "code": "```raku\nmy set $product-codes = <A123 B456 C789 D012>;\n\nfor $product-codes -> $code {\n    say $code;\n}\n```"
  },
  {
    "task": "Create a set and demonstrate the use of the `discard` method.",
    "code": "```raku\nmy $set = set(1, 2, 3, 4);\n$set .= discard(2);\nsay $set; # Output: (1 3 4)\n```"
  },
  {
    "task": "Given a list of numbers, create a set and check if a specific number is present.",
    "code": "```raku\nmy @numbers = 1, 2, 3, 4, 5;\nmy $set = @numbers.Set;\nmy $specific-number = 3;\nsay $set{$specific-number} ?? 'Present' !! 'Not Present';\n```"
  },
  {
    "task": "Use a set to find all unique words in a sentence.",
    "code": "```raku\nmy $sentence = \"Find all unique words in this sentence with unique words\";\nmy %words-set = $sentence.words.Set;\nsay %words-set;\n```"
  },
  {
    "task": "Create a set from a sequence of characters and demonstrate set operations.",
    "code": "```raku\nmy $set1 = <a b c d e f g>;\nmy $set2 = <d e f g h i j>;\n\n# Union\nmy $union = $set1 \u222a $set2;\nsay \"Union: {$union}\";\n\n# Intersection\nmy $intersection = $set1 \u2229 $set2;\nsay \"Intersection: {$intersection}\";\n\n# Difference\nmy $difference = $set1 \u2216 $set2;\nsay \"Difference (set1 - set2): {$difference}\";\n\n# Symmetric Difference\nmy $symmetric-difference = $set1 \u2216\u2216 $set2;\nsay \"Symmetric Difference: {$symmetric-difference}\";\n```"
  },
  {
    "task": "Write a function to merge two sets and return the result.",
    "code": "```raku\nsub merge-sets(Set $set1, Set $set2) {\n    return $set1 \u222a $set2;\n}\n```"
  },
  {
    "task": "Implement a set to hold unique IP addresses and demonstrate basic operations.",
    "code": "```raku\nmy set $ip-set;\n\n# Adding IP addresses to the set\n$ip-set = $ip-set \u222a <192.168.1.1 10.0.0.1 172.16.0.1>;\n\n# Adding more IP addresses\n$ip-set = $ip-set \u222a <192.168.1.2 10.0.0.2>;\n\n# Display the set of IP addresses\nsay \"IP Addresses: \", $ip-set;\n\n# Check if an IP is in the set\nsay \"Contains 192.168.1.1: \", '192.168.1.1' (elem) $ip-set;\n\n# Remove an IP address\n$ip-set = $ip-set \u2216 <10.0.0.1>;\n\n# Display the updated set\nsay \"Updated IP Addresses: \", $ip-set;\n```"
  },
  {
    "task": "Create a set and demonstrate how to find the size of the set.",
    "code": "```raku\nmy $set = set(1, 2, 3, 4, 5);\nsay $set.elems;\n```"
  },
  {
    "task": "Write a program to check if two sets of dates are disjoint.",
    "code": "```raku\nmy set $set1 = <2023-01-01 2023-01-02 2023-01-03>;\nmy set $set2 = <2023-01-04 2023-01-05 2023-01-06>;\n\nsay $set1 (\u2229) $set2 ?? 'Not Disjoint' !! 'Disjoint';\n```"
  },
  {
    "task": "Create a set to manage a collection of tags and demonstrate addition and removal.",
    "code": "```raku\nmy set $tags = set(\"tag1\", \"tag2\", \"tag3\");\n\n# Add a tag\n$tags.insert(\"tag4\");\n\n# Remove a tag\n$tags.remove(\"tag2\");\n\n# Display the set\nsay $tags;\n```"
  },
  {
    "task": "Implement a set to track unique inventory items in a store.",
    "code": "```raku\nmy %inventory;\n%inventory{\"item1\"} = Set.new(\"apple\", \"banana\", \"orange\");\n%inventory{\"item2\"} = Set.new(\"bread\", \"milk\", \"cheese\");\n\n# Add a new item to the inventory\n%inventory{\"item1\"} .= union(<grape>);\n\n# Check if a particular item exists\nsay \"apple is in inventory\" if \"apple\" \u2208 %inventory{\"item1\"};\n\n# Remove an item from the inventory\n%inventory{\"item2\"} .= difference(<milk>);\n\n# Display the inventory\nfor %inventory.kv -> $key, $set {\n    say \"$key: {$set.elems} items - {$set.join(', ')}\";\n}\n```"
  },
  {
    "task": "Create a set of numbers and demonstrate conversion to a list.",
    "code": "```raku\nmy %numbers = set(1, 2, 3, 4, 5);\nmy @list = %numbers.keys.sort;\nsay @list;\n```"
  },
  {
    "task": "Write a function that returns all elements present in either of two sets but not both.",
    "code": "```raku\nsub symmetric_difference(Set $set1, Set $set2) {\n    return ($set1 (-) $set2) \u222a ($set2 (-) $set1);\n}\n\nmy $set1 = set(1, 2, 3, 4);\nmy $set2 = set(3, 4, 5, 6);\n\nsay symmetric_difference($set1, $set2); # Output: (1 2 5 6)\n```"
  },
  {
    "task": "Use a set to manage a collection of unique transaction IDs.",
    "code": "```raku\nmy %transactions;\nsub add-transaction($id) {\n    %transactions{$id} = True;\n}\n\nsub remove-transaction($id) {\n    %transactions.delete($id);\n}\n\nsub has-transaction($id) {\n    %transactions.exists($id)\n}\n\n# Example usage\nadd-transaction(\"tx123\");\nadd-transaction(\"tx456\");\nremove-transaction(\"tx123\");\nsay has-transaction(\"tx123\"); # False\nsay has-transaction(\"tx456\"); # True\n```"
  },
  {
    "task": "Create a set of integers and demonstrate the `pop` operation.",
    "code": "```raku\nmy $set = set(1, 2, 3, 4, 5);\nsay $set.elems;  # Print the number of elements before pop\n\nmy $popped = $set.pop;\nsay \"Popped element: $popped\";\n\nsay $set.elems;  # Print the number of elements after pop\n```"
  },
  {
    "task": "Write a program to find the maximum element in a set of floating-point numbers.",
    "code": "```raku\nmy set $numbers = set(3.4, 5.1, 2.8, 9.7, 1.6);\nsay $numbers.max;\n```"
  },
  {
    "task": "Create a set and demonstrate the use of the `update` method with another set.",
    "code": "```raku\nmy $set1 = set(<apple banana cherry>);\nmy $set2 = set(<banana date fig>);\n$set1.update($set2);\nsay $set1;\n```"
  },
  {
    "task": "Implement a set to keep track of unique file extensions in a directory.",
    "code": "```raku\nmy $dir = '.';\nmy $extensions = setdir($dir).map(*.extension).grep(*.defined).Set;\nsay $extensions;\n```"
  },
  {
    "task": "Create a set of strings and demonstrate how to iterate over it in reverse order.",
    "code": "```raku\nmy @strings = <apple banana cherry>;\nmy $set = @strings.Set;\nfor $set.reverse -> $item {\n    say $item;\n}\n```"
  },
  {
    "task": "Write a function to check if a set is empty.",
    "code": "```raku\nsub is-set-empty(Set $set) {\n    return $set.elems == 0;\n}\n```"
  },
  {
    "task": "Use a set to filter out duplicate entries from a list of participants.",
    "code": "```raku\nmy @participants = <Alice Bob Charlie Alice David Bob>;\nmy %unique-participants = @participants.Set;\nsay %unique-participants.keys;\n```"
  },
  {
    "task": "Create a set of tuples and demonstrate basic set operations.",
    "code": "```raku\nmy $set1 = Set.new((1, 'a'), (2, 'b'), (3, 'c'));\nmy $set2 = Set.new((2, 'b'), (3, 'c'), (4, 'd'));\n\n# Union of sets\nmy $union = $set1 \u222a $set2;\nsay \"Union: \", $union;\n\n# Intersection of sets\nmy $intersection = $set1 \u2229 $set2;\nsay \"Intersection: \", $intersection;\n\n# Difference of sets\nmy $difference = $set1 \u2216 $set2;\nsay \"Difference: \", $difference;\n\n# Symmetric difference of sets\nmy $symmetric-difference = $set1 \u2296 $set2;\nsay \"Symmetric Difference: \", $symmetric-difference;\n\n# Check if a tuple is in a set\nsay \"(1, 'a') in set1: \", (1, 'a') \u2208 $set1;\nsay \"(1, 'a') in set2: \", (1, 'a') \u2208 $set2;\n```"
  },
  {
    "task": "Write a program to find the common elements between two sets of country names.",
    "code": "```raku\nmy $set1 = set(<USA Canada Mexico>);\nmy $set2 = set(<Canada Mexico Brazil>);\n\nmy $common-elements = $set1 (&) $set2;\n\nsay $common-elements;\n```"
  },
  {
    "task": "Create a set of characters and demonstrate the use of the `issubset` method.",
    "code": "```raku\nmy $set1 = Set.new(<a b c>);\nmy $set2 = Set.new(<a b>);\n\nif $set2.issubset($set1) {\n    say \"set2 is a subset of set1\";\n} else {\n    say \"set2 is not a subset of set1\";\n}\n```"
  },
  {
    "task": "Implement a set to manage a collection of unique hashtags from social media posts.",
    "code": "```raku\nmy %hashtags;\n\nsub add-hashtag(Str $hashtag) {\n    %hashtags{$hashtag} = True;\n}\n\nsub remove-hashtag(Str $hashtag) {\n    %hashtags{$hashtag}:delete;\n}\n\nsub list-hashtags() {\n    return %hashtags.keys.sort;\n}\n\n# Example usage:\nadd-hashtag('#RakuLang');\nadd-hashtag('#Programming');\nadd-hashtag('#RakuLang'); # Duplicate, will not be added again\nremove-hashtag('#Programming');\nsay list-hashtags(); # Output: (#RakuLang)\n```"
  },
  {
    "task": "Create a set and demonstrate how to copy it to another set.",
    "code": "```raku\nmy set $original-set = <apple banana cherry>;\nmy set $copied-set = set($original-set.elems);\n```"
  },
  {
    "task": "Write a function that accepts two sets and returns a new set with elements found in both.",
    "code": "```raku\nsub intersection(Set $set1, Set $set2 --> Set) {\n    return $set1 (\u2229) $set2;\n}\n```"
  },
  {
    "task": "Use a set to determine the unique items purchased in a day.",
    "code": "```raku\nmy @purchases = <apple banana apple orange banana pear>;\nmy %unique-items = @purchases.Set;\nsay %unique-items.keys;\n```"
  },
  {
    "task": "Create a set of student IDs and demonstrate set comprehension to filter IDs.",
    "code": "```raku\nmy @student_ids = <101 102 103 104 105 106 107 108 109 110>;\nmy %ids_set = @student_ids.SetHash;\n\n# Filter IDs to demonstrate set comprehension\nmy %filtered_ids = %ids_set.grep(*.key > 105);\n\nsay %filtered_ids.keys; # Output filtered student IDs\n```"
  },
  {
    "task": "Write a program to check if a set of strings is a superset of another set.",
    "code": "```raku\nmy $set1 = set(<a b c d e>);\nmy $set2 = set(<b c>);\nsay $set1.superset($set2);\n```"
  },
  {
    "task": "Create a set of unique words from a text file.",
    "code": "```raku\nmy $filename = 'textfile.txt';\nmy %unique-words;\nfor 'textfile.txt'.IO.lines -> $line {\n    %unique-words{$_} = True for $line.split(/\\s+/);\n}\nmy $unique-set = %unique-words.keys.Set;\n```"
  },
  {
    "task": "Implement a set to store unique project identifiers and demonstrate membership testing.",
    "code": "```raku\nmy $project-ids = Set.new;\n\n# Add some project identifiers\n$project-ids.insert('proj-101', 'proj-102', 'proj-103');\n\n# Membership testing\nsay 'proj-101' \u2208 $project-ids; # True\nsay 'proj-104' \u2208 $project-ids; # False\n```"
  },
  {
    "task": "Create a set and demonstrate the `symmetric_difference_update` method.",
    "code": "```raku\nmy %set1 = set(1, 2, 3, 4);\nmy %set2 = set(3, 4, 5, 6);\n%set1 (|)\u2216= %set2;\nsay %set1; # OUTPUT: {1, 2, 5, 6}\n```"
  },
  {
    "task": "Write a function to remove all elements from a set that are also in another set.",
    "code": "```raku\nsub remove-elements(\\set1, \\set2 --> Set) {\n    set1 (-) set2;\n}\n```"
  },
  {
    "task": "Use a set to keep track of unique error codes from server logs.",
    "code": "```raku\nmy $error-codes = set();\n\nfor 'server.log'.IO.lines -> $line {\n    if $line ~~ /<error-code>(\\d+)<\\/error-code>/ {\n        $error-codes.insert($0.Str);\n    }\n}\n\nsay $error-codes.elems; # Number of unique error codes\nsay $error-codes;       # Unique error codes\n```"
  },
  {
    "task": "Create a set and demonstrate how to find all unique pairs of elements.",
    "code": "```raku\nmy @elements = <a b c>;\nmy $set = set(@elements);\n\nfor $set -> $x {\n    for $set -> $y {\n        next if $x eq $y;\n        say \"($x, $y)\";\n    }\n}\n```"
  },
  {
    "task": "Write a program to find the smallest element in a set of integers.",
    "code": "```raku\nmy $set = set(3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5);\nsay $set.min;\n```"
  },
  {
    "task": "Create a set and demonstrate the `add` method with multiple elements.",
    "code": "```raku\nmy $set = set();\n$set.add(<apple banana cherry>);\nsay $set;\n```"
  },
  {
    "task": "Implement a set to manage a collection of unique author names.",
    "code": "```raku\nmy set $authors;\n\n# Add authors\n$authors{\"J.K. Rowling\", \"George Orwell\", \"J.R.R. Tolkien\"};\n\n# Check if an author is in the set\nsay \"J.K. Rowling is in the set\" if \"J.K. Rowling\" \u2208 $authors;\n\n# Remove an author\n$authors = $authors (-) \"George Orwell\";\n\n# Print all authors\nsay $authors.elems;\nsay $authors.sort;\n```"
  },
  {
    "task": "Create a set of integers and demonstrate converting it to a sorted list.",
    "code": "```raku\nmy $set = set(5, 3, 9, 1, 4);\nmy @sorted-list = $set.elems.sort;\nsay @sorted-list;\n```"
  },
  {
    "task": "Write a function that returns the union of multiple sets.",
    "code": "```raku\nsub union-of-sets(*@sets) {\n    my $result = set();\n    for @sets -> $s {\n        $result = $result (|) $s;\n    }\n    return $result;\n}\n```"
  },
  {
    "task": "Use a set to identify unique characters in a string.",
    "code": "```raku\nmy $string = \"example string\";\nmy %unique-chars = $string.comb.Set;\nsay %unique-chars.keys;\n```"
  },
  {
    "task": "Create a set of prime numbers and demonstrate basic set operations.",
    "code": "```raku\nsub is-prime(Int $n) {\n    return False if $n < 2;\n    return True if $n == 2;\n    return False if $n %% 2;\n    for 3, 5 ... sqrt($n) -> $i {\n        return False if $n %% $i == 0;\n    }\n    return True;\n}\n\nmy @primes = grep { is-prime($_) }, 1..50;\nmy $prime-set = @primes.Set;\n\nsay \"Prime set: \", $prime-set;\nsay \"Contains 3: \", 3 \u2208 $prime-set;\nsay \"Contains 4: \", 4 \u2208 $prime-set;\n\nmy $even-numbers = (2, 4, 6, 8, 10).Set;\nsay \"Even numbers set: \", $even-numbers;\n\nsay \"Intersection: \", $prime-set (\u2229) $even-numbers;\nsay \"Union: \", $prime-set (\u222a) $even-numbers;\nsay \"Difference (prime - even): \", $prime-set (-) $even-numbers;\n```"
  },
  {
    "task": "Create a set and demonstrate how to check for non-membership.",
    "code": "```raku\nmy %set = set(<apple banana cherry>);\nmy $item = 'orange';\nsay \"$item is not in the set\" if $item \u2209 %set;\n```"
  },
  {
    "task": "Write a program to find the largest element in a set of numbers.",
    "code": "```raku\nmy $set = set(3, 5, 9, 2, 8);\nsay $set.max;\n```"
  },
  {
    "task": "Create a set of unique movie titles and demonstrate membership testing.",
    "code": "```raku\nmy set $movies = set(\"Inception\", \"The Matrix\", \"Interstellar\", \"The Matrix\");\n\nsay \"Is 'Inception' in the set? \" ~ (\"Inception\" \u2208 $movies ?? \"Yes\" !! \"No\");\nsay \"Is 'Avatar' in the set? \" ~ (\"Avatar\" \u2208 $movies ?? \"Yes\" !! \"No\");\n```"
  },
  {
    "task": "Implement a set to store unique keys from a dictionary.",
    "code": "```raku\nmy %dictionary = (\n    'one' => 1,\n    'two' => 2,\n    'three' => 3,\n    'two' => 2,\n);\n\nmy $unique-keys-set = set(%dictionary.keys);\n\nsay $unique-keys-set;\n```"
  },
  {
    "task": "Create a set and demonstrate the `difference_update` method.",
    "code": "```raku\nmy $set1 = set('a', 'b', 'c', 'd');\nmy $set2 = set('c', 'd', 'e');\n\n$set1 = $set1 (-) $set2;\n\nsay $set1; # Output the result\n```"
  },
  {
    "task": "Write a function to merge multiple sets into a single set.",
    "code": "```raku\nsub merge-sets(*@sets) {\n    my $merged-set = set();\n    for @sets -> $s {\n        $merged-set = $merged-set \u222a $s;\n    }\n    return $merged-set;\n}\n```"
  },
  {
    "task": "Use a set to filter out duplicate letters from a word.",
    "code": "```raku\nmy $word = \"exampleword\";\nmy $set = $word.comb.Set;\nsay $set.elems;\nsay $set;\n```"
  },
  {
    "task": "Create a set and demonstrate the use of the `isdisjoint` method.",
    "code": "```raku\nmy $set1 = set(<apple banana cherry>);\nmy $set2 = set(<kiwi mango banana>);\n\nsay $set1.isdisjoint($set2); # Output: False\n```"
  },
  {
    "task": "Write a program to find all elements that are only in one of two sets.",
    "code": "```raku\nmy $set1 = set(<a b c>);\nmy $set2 = set(<b c d>);\n\nmy $only-in-one = $set1 (|) $set2;\n\nsay $only-in-one;\n```"
  },
  {
    "task": "Create a set of unique book authors and demonstrate basic set operations.",
    "code": "```raku\nmy $authors = set(\"J.K. Rowling\", \"George Orwell\", \"J.R.R. Tolkien\", \"Isaac Asimov\");\n\n# Adding an author\n$authors.insert(\"Agatha Christie\");\n\n# Removing an author\n$authors.remove(\"George Orwell\");\n\n# Checking if an author is in the set\nsay \"J.K. Rowling\" \u2208 $authors; # True\n\n# Set Union\nmy $additional-authors = set(\"Stephen King\", \"Isaac Asimov\");\nmy $all-authors = $authors \u222a $additional-authors;\nsay $all-authors;\n\n# Set Intersection\nmy $common-authors = $authors \u2229 $additional-authors;\nsay $common-authors;\n\n# Set Difference\nmy $unique-authors = $authors \u2216 $additional-authors;\nsay $unique-authors;\n```"
  },
  {
    "task": "Implement a set to store unique phone numbers and check for duplicates.",
    "code": "```raku\nmy %phone-set;\nsub add-phone-number($number) {\n    if $number \u2208 %phone-set {\n        say \"Duplicate phone number: $number\";\n    } else {\n        %phone-set{$number} = True;\n        say \"Added phone number: $number\";\n    }\n}\n\nadd-phone-number('123-456-7890');\nadd-phone-number('098-765-4321');\nadd-phone-number('123-456-7890');\n```"
  },
  {
    "task": "Create a set of floating-point numbers and demonstrate rounding each element.",
    "code": "```raku\nmy set $numbers = 3.1415, 2.718, 1.618, 0.5772;\nfor $numbers -> $num {\n    say $num.round;\n}\n```"
  },
  {
    "task": "Write a function that returns a set of all vowels present in a given sentence.",
    "code": "```raku\nsub get-vowels($sentence) {\n    my %vowels = a => True, e => True, i => True, o => True, u => True;\n    return $sentence.lc.comb.grep({ %vowels{$_} }).Set;\n}\n```"
  },
  {
    "task": "Use a set to track unique session IDs for a web application.",
    "code": "```raku\nmy %sessions;\nsub add-session-id($id) {\n    %sessions{$id} = True;\n}\n\nsub remove-session-id($id) {\n    %sessions{$id}:delete;\n}\n\nsub is-session-active($id) {\n    return %sessions{$id}:exists;\n}\n\n# Example usage\nadd-session-id('abc123');\nadd-session-id('def456');\nsay is-session-active('abc123'); # True\nsay is-session-active('xyz789'); # False\nremove-session-id('abc123');\nsay is-session-active('abc123'); # False\n```"
  },
  {
    "task": "Create a set of unique city names and demonstrate set operations with it.",
    "code": "```raku\nmy $cities = set(\"New York\", \"Los Angeles\", \"Chicago\", \"Houston\", \"Phoenix\");\n\n# Demonstrate set operations\nmy $other-cities = set(\"Chicago\", \"Houston\", \"San Francisco\", \"Seattle\");\n\n# Union\nsay $cities \u222a $other-cities; # output: (New York Los Angeles Chicago Houston Phoenix San Francisco Seattle)\n\n# Intersection\nsay $cities \u2229 $other-cities; # output: (Chicago Houston)\n\n# Difference\nsay $cities \u2216 $other-cities; # output: (New York Los Angeles Phoenix)\n\n# Symmetric Difference\nsay $cities \u2206 $other-cities; # output: (New York Los Angeles Phoenix San Francisco Seattle)\n```"
  },
  {
    "task": "Write a program to find the common elements in three sets.",
    "code": "```raku\nmy @set1 = <a b c d>;\nmy @set2 = <b c e f>;\nmy @set3 = <c d f g>;\n\nmy %set1 = @set1.SetHash;\nmy %set2 = @set2.SetHash;\nmy %set3 = @set3.SetHash;\n\nmy @common-elements = (%set1 (\u2229) %set2 (\u2229) %set3).keys;\n\nsay @common-elements;\n```"
  },
  {
    "task": "Create a set and demonstrate how to remove an element by its value.",
    "code": "```raku\nmy set $set = set(<apple banana cherry>);\n$set -= 'banana';\nsay $set;\n```"
  },
  {
    "task": "Implement a set to store a collection of unique ISBN numbers.",
    "code": "```raku\nmy set $isbn-set;\n$isbn-set.insert('978-3-16-148410-0');\n$isbn-set.insert('978-1-4028-9462-6');\n$isbn-set.insert('978-0-545-01022-1');\n$isbn-set.insert('978-3-16-148410-0'); # Duplicate, won't be added\n\nsay $isbn-set;\n```"
  },
  {
    "task": "Create a set and demonstrate the `intersection_update` method.",
    "code": "```raku\nmy $set1 = set(1, 2, 3, 4, 5);\nmy $set2 = set(3, 4, 5, 6, 7);\n\n$set1 = $set1 \u2229 $set2;\n\nsay $set1; # Output: (3 4 5)\n```"
  },
  {
    "task": "Write a function to generate a set of all unique elements in a list.",
    "code": "```raku\nsub unique-elements(@list) {\n    return @list.Set;\n}\n```"
  },
  {
    "task": "Use a set to determine the unique characters in two strings.",
    "code": "```raku\nmy $string1 = \"example string one\";\nmy $string2 = \"another example string\";\n\nmy %unique-chars = ($string1.comb, $string2.comb).Set;\nsay %unique-chars.elems;  # Number of unique characters\nsay %unique-chars.keys;   # Unique characters themselves\n```"
  },
  {
    "task": "Create a set of unique animal names and demonstrate the `discard` method.",
    "code": "```raku\nmy $animals = set('cat', 'dog', 'bird', 'fish');\n$animals = $animals.discard('dog');\nsay $animals;\n```"
  },
  {
    "task": "Write a program to find all elements present in the first set but not in the second.",
    "code": "```raku\nmy $set1 = set(<a b c d>);\nmy $set2 = set(<c d e f>);\nmy $difference = $set1 (-) $set2;\nsay $difference;\n```"
  },
  {
    "task": "Create a set of integers and demonstrate using it to eliminate duplicates from a list.",
    "code": "```raku\nmy @list = (1, 2, 3, 2, 4, 5, 3, 6);\nmy $set = @list.Set;\nsay $set; # Outputs: (1 2 3 4 5 6)\n```"
  },
  {
    "task": "Implement a set to manage a collection of unique car models.",
    "code": "```raku\nmy set $car-models;\n\n# Add car models\n$car-models.insert(<Toyota Camry>);\n$car-models.insert(<Honda Accord>);\n$car-models.insert(<Ford Mustang>);\n\n# Remove a car model\n$car-models.remove(<Ford Mustang>);\n\n# Check if a car model exists\nsay 'Honda Accord is in the set' if <Honda Accord> \u2208 $car-models;\n\n# List all car models\nsay $car-models;\n```"
  },
  {
    "task": "Create a set and demonstrate the use of the `clear` method.",
    "code": "```raku\nmy $set = set(<apple banana cherry>);\n$set.clear;\nsay $set; # OUTPUT: \u00ab{}\u2424\u00bb\n```"
  },
  {
    "task": "Write a function that finds the intersection of multiple sets.",
    "code": "```raku\nsub intersection-of-sets(*@sets) {\n    return @sets[0] Z\u2229 @sets[1..*];\n}\n\nmy @set1 = <1 2 3 4>;\nmy @set2 = <2 3 5 6>;\nmy @set3 = <3 4 6 7>;\n\nsay intersection-of-sets(@set1, @set2, @set3);\n```"
  },
  {
    "task": "Use a set to identify unique words in a paragraph.",
    "code": "```raku\nmy $paragraph = \"This is a sample paragraph with some words. Some words repeat, some do not.\";\nmy %unique-words = $paragraph.split(/\\W+/).SetHash;\nsay %unique-words.keys;\n```"
  },
  {
    "task": "Create a set of unique country codes and demonstrate membership testing.",
    "code": "```raku\nmy set $country-codes = <US CA MX BR DE JP IN FR>;\nsay 'US' \u2208 $country-codes; # True\nsay 'CN' \u2208 $country-codes; # False\n```"
  },
  {
    "task": "Write a program to find the union of two sets and return it as a list.",
    "code": "```raku\nmy @set1 = <a b c>;\nmy @set2 = <b c d>;\n\nmy $union = @set1.Set \u222a @set2.Set;\n\nsay $union.elems; # Convert the set back to a list\n```"
  },
  {
    "task": "Create a set and demonstrate using it to check if all elements of another set are present.",
    "code": "```raku\nmy $set1 = set(<apple banana cherry>);\nmy $set2 = set(<banana apple>);\n\nif $set2 (<=) $set1 {\n    say \"All elements of set2 are present in set1.\";\n} else {\n    say \"Not all elements of set2 are present in set1.\";\n}\n```"
  },
  {
    "task": "Implement a set to store unique coupon codes and demonstrate adding new codes.",
    "code": "```raku\nmy set $coupon-codes;\n\n$coupon-codes.insert('SAVE10');\n$coupon-codes.insert('WELCOME20');\n$coupon-codes.insert('DISCOUNT30');\n\n# Demonstrate adding new codes\n$coupon-codes.insert('SPRING25');\n$coupon-codes.insert('WELCOME20'); # This won't be added as it is a duplicate\n\nsay $coupon-codes;\n```"
  },
  {
    "task": "Create a set and demonstrate the `copy` method.",
    "code": "```raku\nmy $set = set(1, 2, 3, 4);\nmy $set-copy = $set.copy;\nsay $set-copy;\n```"
  },
  {
    "task": "Write a function to remove duplicates from a list using a set.",
    "code": "```raku\nsub remove-duplicates(@list) {\n    my %set = @list.SetHash;\n    return %set.keys;\n}\n```"
  },
  {
    "task": "Use a set to identify unique numbers in a sequence.",
    "code": "```raku\nmy @sequence = (1, 2, 2, 3, 4, 4, 5);\nmy %unique-numbers = @sequence.Set;\nsay %unique-numbers.keys;\n```"
  },
  {
    "task": "Create a set of unique fruit names and demonstrate set operations with it.",
    "code": "```raku\nmy $fruits = set('apple', 'banana', 'orange', 'grape', 'apple');\n\n# Add a fruit to the set\n$fruits = $fruits \u222a set('kiwi');\n\n# Remove a fruit from the set\n$fruits = $fruits \u2212 set('banana');\n\n# Check if a fruit is in the set\nsay 'Has apple' if 'apple' \u2208 $fruits;\n\n# Print all fruits in the set\nsay $fruits.elems;\nsay $fruits;\n```"
  }
]