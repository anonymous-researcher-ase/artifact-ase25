[
  {
    "task": "Create a function that takes two boolean inputs and returns true if both are true using logical AND.",
    "code": "```raku\nsub both-true(Bool $a, Bool $b) {\n    return $a && $b;\n}\n```"
  },
  {
    "task": "Write a script to check if either of two given conditions are met using logical OR.",
    "code": "```raku\nmy $condition1 = True;\nmy $condition2 = False;\n\nif $condition1 || $condition2 {\n    say \"At least one condition is met.\";\n} else {\n    say \"Neither condition is met.\";\n}\n```"
  },
  {
    "task": "Develop a program that negates a boolean variable using logical NOT.",
    "code": "```raku\nmy $bool = True;\nmy $negated-bool = !$bool;\nsay $negated-bool;\n```"
  },
  {
    "task": "Implement a feature that determines if a number is within a specific range using logical operators.",
    "code": "```raku\nsub is-within-range($number, $min, $max) {\n    return $number >= $min && $number <= $max;\n}\n\nmy $number = 5;\nmy $min = 1;\nmy $max = 10;\n\nsay is-within-range($number, $min, $max); # True\n```"
  },
  {
    "task": "Design a system that checks if a user has both read and write permissions using logical AND.",
    "code": "```raku\nsub has-read-write-permissions(%permissions) {\n    return %permissions<read> && %permissions<write>;\n}\n\nmy %user-permissions = (read => True, write => True);\nsay has-read-write-permissions(%user-permissions); # True\n```"
  },
  {
    "task": "Write a function to verify if a string is neither empty nor null using logical NOT.",
    "code": "```raku\nsub is-not-empty-or-null(Str $input) {\n    return not ($input eq '' or $input eq Any);\n}\n```"
  },
  {
    "task": "Create a conditional statement that executes a block of code if either of two expressions are true using logical OR.",
    "code": "```raku\nmy $condition1 = True;\nmy $condition2 = False;\n\nif $condition1 || $condition2 {\n    say \"At least one condition is true.\";\n}\n```"
  },
  {
    "task": "Build a program that inverts the truth value of a given condition using logical NOT.",
    "code": "```raku\nmy $condition = True; # Example condition\nmy $inverted-condition = !$condition;\nsay $inverted-condition;\n```"
  },
  {
    "task": "Compose a function to return true if a list is not empty using logical NOT.",
    "code": "```raku\nsub is-not-empty(@list) {\n    return !@list.is-empty;\n}\n```"
  },
  {
    "task": "Develop a filter that selects items from a collection only if they meet multiple criteria using logical AND.",
    "code": "```raku\nmy @collection = (1..10);\nmy @filtered = @collection.grep({ $_ > 3 && $_ < 8 });\nsay @filtered;\n```"
  },
  {
    "task": "Write a script that checks if a value is outside a given range using logical OR.",
    "code": "```raku\nmy $value = 15;\nmy $lower_limit = 10;\nmy $upper_limit = 20;\n\nif $value < $lower_limit || $value > $upper_limit {\n    say \"The value is outside the range.\";\n} else {\n    say \"The value is within the range.\";\n}\n```"
  },
  {
    "task": "Create a small program to toggle a boolean flag using logical NOT.",
    "code": "```raku\nmy $flag = True;\nsay \"Initial flag state: $flag\";\n\n$flag = !$flag;\nsay \"Toggled flag state: $flag\";\n```"
  },
  {
    "task": "Implement a feature that evaluates if a username is both unique and valid using logical AND.",
    "code": "```raku\nmy %existing-usernames = ('user1' => True, 'user2' => True);\n\nsub is-unique($username) {\n    return !$%existing-usernames{$username}:exists;\n}\n\nsub is-valid($username) {\n    return $username.chars >= 5 && $username ~~ /<:alnum>/;\n}\n\nsub evaluate-username($username) {\n    return is-unique($username) && is-valid($username);\n}\n\nmy $username = 'newuser';\nsay evaluate-username($username); # Output will be True or False\n```"
  },
  {
    "task": "Design a conditional to perform an action if neither of two flags are set using logical NOT.",
    "code": "```raku\nmy $flag1 = False;\nmy $flag2 = False;\n\nif (!$flag1 && !$flag2) {\n    say \"Neither flag is set.\";\n}\n```"
  },
  {
    "task": "Write a function that returns true if at least one of multiple boolean inputs is true using logical OR.",
    "code": "```raku\nsub any_true(*@inputs) {\n    return any(@inputs);\n}\n\nsay any_true(True, False, False);  # Output: True\nsay any_true(False, False, False); # Output: False\n```"
  },
  {
    "task": "Create a loop that continues executing as long as two conditions are both false using logical NOT and AND.",
    "code": "```raku\nmy $condition1 = False;\nmy $condition2 = False;\n\nwhile not $condition1 && not $condition2 {\n    # Your code here\n    # Update conditions if needed to break the loop\n    # Example: $condition1 = True; # This will eventually break the loop\n}\n```"
  },
  {
    "task": "Develop a sequence that checks if a character is either a vowel or a consonant using logical OR.",
    "code": "```raku\nsub check-character($char) {\n    my @vowels = <a e i o u>;\n    my @consonants = ('a'..'z').grep(* ne any(@vowels));\n    \n    if $char.lc eq any(@vowels) || $char.lc eq any(@consonants) {\n        say \"$char is a vowel or a consonant.\";\n    } else {\n        say \"$char is neither a vowel nor a consonant.\";\n    }\n}\n\ncheck-character('a');\ncheck-character('b');\ncheck-character('1');\n```"
  },
  {
    "task": "Implement a validation that ensures a password is both of minimum length and contains numbers using logical AND.",
    "code": "```raku\nsub validate-password($password) {\n    my $min-length = 8;\n    return $password.chars >= $min-length && $password ~~ /\\d/;\n}\n\nsay validate-password(\"pass1234\"); # True\nsay validate-password(\"short1\");   # False\n```"
  },
  {
    "task": "Compose a test to determine if a point is not within a circle using logical NOT.",
    "code": "```raku\nsub point-outside-circle($x, $y, $circle-x, $circle-y, $radius) {\n    return !((($x - $circle-x) ** 2 + ($y - $circle-y) ** 2) <= $radius ** 2);\n}\n\n# Example usage:\nmy $x = 5;\nmy $y = 5;\nmy $circle-x = 0;\nmy $circle-y = 0;\nmy $radius = 3;\nsay point-outside-circle($x, $y, $circle-x, $circle-y, $radius); # True if outside\n```"
  },
  {
    "task": "Write a function to decide if a user is either an admin or an editor using logical OR.",
    "code": "```raku\nsub is-admin-or-editor(Str $role) {\n    return $role eq 'admin' || $role eq 'editor';\n}\n\n# Example usage:\nsay is-admin-or-editor('admin');  # True\nsay is-admin-or-editor('editor'); # True\nsay is-admin-or-editor('user');   # False\n```"
  },
  {
    "task": "Create a conditional statement to trigger an alert if two sensors both detect motion using logical AND.",
    "code": "```raku\nmy $sensor1 = True; # Replace with actual sensor data\nmy $sensor2 = True; # Replace with actual sensor data\n\nif $sensor1 && $sensor2 {\n    say \"Alert: Motion detected by both sensors!\";\n}\n```"
  },
  {
    "task": "Design a program to validate an email format and ensure it contains a domain using logical AND.",
    "code": "```raku\nsub validate-email($email) {\n    return $email ~~ /<.alnum>+ \\@ <.alnum>+ '.' <.alnum>+/\n           && $email ~~ /\\@/;\n}\n\nmy $email = 'example@domain.com';\nsay validate-email($email) ?? 'Valid email' !! 'Invalid email';\n```"
  },
  {
    "task": "Develop a method to confirm that a transaction is neither fraudulent nor unauthorized using logical NOT.",
    "code": "```raku\nsub is_valid_transaction(Bool $is_fraudulent, Bool $is_unauthorized) {\n    return !($is_fraudulent || $is_unauthorized);\n}\n\n# Example usage\nmy $transaction_status = is_valid_transaction(False, False);\nsay \"Transaction is valid: $transaction_status\";\n```"
  },
  {
    "task": "Write a function that outputs true if a file is either missing or empty using logical OR.",
    "code": "```raku\nsub is-file-missing-or-empty(Str $filename) {\n    return !($filename.IO.e && $filename.IO.s);\n}\n```"
  },
  {
    "task": "Implement a system to check if a student's grade is neither failing nor incomplete using logical NOT.",
    "code": "```raku\nsub check-grade(Str $grade) {\n    my %grades = (\n        'A' => 'pass',\n        'B' => 'pass',\n        'C' => 'pass',\n        'D' => 'pass',\n        'F' => 'fail',\n        'I' => 'incomplete'\n    );\n\n    my $status = %grades{$grade} // 'unknown';\n    return $status ne 'fail' && $status ne 'incomplete';\n}\n\nmy $grade = 'B';\nsay \"Grade $grade is neither failing nor incomplete: \" ~ check-grade($grade).Str;\n```"
  },
  {
    "task": "Create a script that executes a command if a file is both readable and writable using logical AND.",
    "code": "```raku\nmy $filename = 'example.txt';\nif $filename.IO.r && $filename.IO.w {\n    say \"File is both readable and writable. Executing command...\";\n    # Execute your command here\n}\n```"
  },
  {
    "task": "Compose a function to determine if a temperature is not within a safe operating range using logical NOT.",
    "code": "```raku\nsub is-temperature-unsafe(Int $temperature) {\n    my $safe-range = 15..25;\n    return not ($temperature ~~ $safe-range);\n}\n\nsay is-temperature-unsafe(10);  # True\nsay is-temperature-unsafe(20);  # False\n```"
  },
  {
    "task": "Design a check to see if a car is either out of fuel or needs maintenance using logical OR.",
    "code": "```raku\nmy $out-of-fuel = Bool::True;  # Example condition for out of fuel\nmy $needs-maintenance = Bool::False;  # Example condition for needing maintenance\n\nif $out-of-fuel || $needs-maintenance {\n    say \"The car is either out of fuel or needs maintenance.\";\n} else {\n    say \"The car is fine.\";\n}\n```"
  },
  {
    "task": "Develop a routine that ensures a network connection is both stable and secure using logical AND.",
    "code": "```raku\nsub is-stable() {\n    # Placeholder logic for stability check\n    return True;\n}\n\nsub is-secure() {\n    # Placeholder logic for security check\n    return True;\n}\n\nsub is-connection-stable-and-secure() {\n    return is-stable() && is-secure();\n}\n\nsay \"Connection is stable and secure\" if is-connection-stable-and-secure();\n```"
  },
  {
    "task": "Write a conditional to print a message if a user is not logged in using logical NOT.",
    "code": "```raku\nmy $user_logged_in = False;\n\nunless $user_logged_in {\n    say \"User is not logged in\";\n}\n```"
  },
  {
    "task": "Create a function that checks if a number is both even and positive using logical AND.",
    "code": "```raku\nsub is-even-and-positive(Int $num) {\n    return $num %% 2 && $num > 0;\n}\n```"
  },
  {
    "task": "Implement a feature that turns off a device if neither of two switches are on using logical NOT.",
    "code": "```raku\nmy $switch1 = False;\nmy $switch2 = False;\n\nsub turn_off_device {\n    say \"Device is turned off.\";\n}\n\nif (not $switch1 or not $switch2) {\n    turn_off_device();\n}\n```"
  },
  {
    "task": "Compose a script to alert if a server is either down or running slow using logical OR.",
    "code": "```raku\nmy $server_status = 'down'; # Possible values: 'down', 'slow', 'ok'\n\nif $server_status eq 'down' || $server_status eq 'slow' {\n    say \"Alert: The server is either down or running slow.\";\n}\n```"
  },
  {
    "task": "Design a validation method to ensure a form field is not empty using logical NOT.",
    "code": "```raku\nsub validate-field(Str $field) {\n    return !$field.trim;\n}\n\nmy $form-field = '   ';\nsay validate-field($form-field) ?? 'Field is empty' !! 'Field is not empty';\n```"
  },
  {
    "task": "Write a program to determine if two strings are both non-empty using logical AND.",
    "code": "```raku\nmy $string1 = \"Hello\";\nmy $string2 = \"World\";\n\nif $string1 && $string2 {\n    say \"Both strings are non-empty.\";\n} else {\n    say \"At least one of the strings is empty.\";\n}\n```"
  },
  {
    "task": "Create a function that checks if a number is either prime or a perfect square using logical OR.",
    "code": "```raku\nsub is-prime($n) {\n    return False if $n < 2;\n    return True if $n == 2;\n    return False if $n %% 2;\n    for 3, 5 ... sqrt($n) -> $i {\n        return False if $n %% $i == 0;\n    }\n    return True;\n}\n\nsub is-perfect-square($n) {\n    my $root = sqrt($n);\n    return $root == $root.floor;\n}\n\nsub prime-or-perfect-square($n) {\n    return is-prime($n) || is-perfect-square($n);\n}\n\nsay prime-or-perfect-square(5);   # Example usage\nsay prime-or-perfect-square(4);   # Example usage\n```"
  },
  {
    "task": "Develop a script to ensure a user is either an adult or has parental consent using logical OR.",
    "code": "```raku\nsub check-access(Bool $is-adult, Bool $has-parental-consent) {\n    if $is-adult || $has-parental-consent {\n        say \"Access granted.\";\n    } else {\n        say \"Access denied.\";\n    }\n}\n\n# Example usage\ncheck-access(True, False);  # User is an adult\ncheck-access(False, True);  # User has parental consent\ncheck-access(False, False); # Neither condition met\n```"
  },
  {
    "task": "Implement a condition to execute a task if a variable is neither zero nor negative using logical NOT.",
    "code": "```raku\nmy $variable = 5; # example value\nif not ($variable <= 0) {\n    say \"The variable is positive and non-zero.\";\n}\n```"
  },
  {
    "task": "Compose a method to verify if a system is both up-to-date and functioning using logical AND.",
    "code": "```raku\nsub is-system-valid(Bool $is-up-to-date, Bool $is-functioning) {\n    return $is-up-to-date && $is-functioning;\n}\n```"
  },
  {
    "task": "Write a function that returns true if a list contains neither duplicates nor null values using logical NOT.",
    "code": "```raku\nsub has-no-duplicates-or-nulls(@list) {\n    return !(@list.grep(*.defined) != @list.unique);\n}\n\n# Example usage\nsay has-no-duplicates-or-nulls([1, 2, 3]); # True\nsay has-no-duplicates-or-nulls([1, 2, 2]); # False\nsay has-no-duplicates-or-nulls([1, Nil, 3]); # False\n```"
  },
  {
    "task": "Create a script to perform an action if a temperature is either too high or too low using logical OR.",
    "code": "```raku\nmy $temperature = 35; # Example temperature value\n\nif $temperature > 30 || $temperature < 15 {\n    say \"Temperature is too extreme!\";\n}\n```"
  },
  {
    "task": "Design a feature to toggle an option if a setting is not enabled using logical NOT.",
    "code": "```raku\nmy $setting-enabled = False;\nmy $option = False;\n\nif !$setting-enabled {\n    $option = !$option;\n}\n```"
  },
  {
    "task": "Develop a check to ensure a username is both available and meets length requirements using logical AND.",
    "code": "```raku\nsub is-username-valid(Str $username, @taken-usernames, Int $min-length, Int $max-length) {\n    return $username !\u2208 @taken-usernames && $username.chars >= $min-length && $username.chars <= $max-length;\n}\n\nmy @taken-usernames = <user1 user2 example>;\nmy $min-length = 5;\nmy $max-length = 10;\n\nsay is-username-valid('newuser', @taken-usernames, $min-length, $max-length); # True\nsay is-username-valid('user2', @taken-usernames, $min-length, $max-length);   # False\nsay is-username-valid('us', @taken-usernames, $min-length, $max-length);      # False\n```"
  },
  {
    "task": "Implement a function that returns true if a number is neither too large nor too small using logical NOT.",
    "code": "```raku\nsub is_neither_too_large_nor_too_small(Int $number, Int $min, Int $max) {\n    return !(($number < $min) || ($number > $max));\n}\n```"
  },
  {
    "task": "Write a conditional to print a warning if a disk is either full or nearly full using logical OR.",
    "code": "```raku\nmy $disk_full = True;\nmy $disk_nearly_full = False;\n\nif $disk_full || $disk_nearly_full {\n    say \"Warning: Disk is either full or nearly full!\";\n}\n```"
  },
  {
    "task": "Create a routine to validate that two dates are both within a valid range using logical AND.",
    "code": "```raku\nsub validate-dates($date1, $date2, $start-range, $end-range) {\n    return ($date1 >= $start-range && $date1 <= $end-range) &&\n           ($date2 >= $start-range && $date2 <= $end-range);\n}\n\n# Usage example\nmy $date1 = Date.new('2023-01-15');\nmy $date2 = Date.new('2023-05-20');\nmy $start-range = Date.new('2023-01-01');\nmy $end-range = Date.new('2023-12-31');\n\nsay validate-dates($date1, $date2, $start-range, $end-range); # True or False\n```"
  },
  {
    "task": "Compose a function to decide if a person is either a minor or a senior using logical OR.",
    "code": "```raku\nsub is-minor-or-senior(Int $age) {\n    return $age < 18 || $age >= 65;\n}\n\nsay is-minor-or-senior(16); # True\nsay is-minor-or-senior(30); # False\nsay is-minor-or-senior(70); # True\n```"
  },
  {
    "task": "Design a script to execute a task if a condition is not met using logical NOT.",
    "code": "```raku\nmy $condition = False;\n\nunless $condition {\n    say \"Executing task because condition is not met.\";\n}\n```"
  },
  {
    "task": "Develop a program to verify if a process is neither running nor scheduled using logical NOT.",
    "code": "```raku\nsub is-process-active($process) {\n    # Placeholder function to check if process is running\n    return False;\n}\n\nsub is-process-scheduled($process) {\n    # Placeholder function to check if process is scheduled\n    return False;\n}\n\nmy $process = \"example-process\";\nmy $is-not-active-nor-scheduled = !(is-process-active($process) || is-process-scheduled($process));\n\nsay \"Process is neither running nor scheduled: \", $is-not-active-nor-scheduled;\n```"
  },
  {
    "task": "Implement a feature that confirms a file is both accessible and not locked using logical AND.",
    "code": "```raku\nsub is-file-accessible-and-not-locked(Str $file-path) {\n    my $accessible = $file-path.IO.e && $file-path.IO.r;\n    my $not-locked = !$file-path.IO.is-lock;\n    return $accessible && $not-locked;\n}\n\nmy $file-path = \"path/to/your/file.txt\";\nsay \"File is accessible and not locked\" if is-file-accessible-and-not-locked($file-path);\n```"
  },
  {
    "task": "Write a script to check if a device is either offline or in maintenance mode using logical OR.",
    "code": "```raku\nmy $status = 'offline';  # Example status\nif $status eq 'offline' || $status eq 'maintenance' {\n    say \"The device is either offline or in maintenance mode.\";\n} else {\n    say \"The device is online and not in maintenance mode.\";\n}\n```"
  },
  {
    "task": "Create a function to ensure a password is both complex and unique using logical AND.",
    "code": "```raku\nsub is-password-complex-and-unique($password, @unique-passwords) {\n    my $is-complex = $password ~~ /<:alpha>+ & <:digit>+ & <:punct>+/;\n    my $is-unique = $password \u2209 @unique-passwords;\n    return $is-complex && $is-unique;\n}\n\nmy @existing-passwords = <password123! uniquePass$>;\nsay is-password-complex-and-unique(\"Complex1!\", @existing-passwords); # True\nsay is-password-complex-and-unique(\"Simple123\", @existing-passwords); # False\nsay is-password-complex-and-unique(\"UniquePass$\", @existing-passwords); # False\n```"
  },
  {
    "task": "Design a validation that ensures a value is not negative using logical NOT.",
    "code": "```raku\nsub is-positive(Int $value) {\n    return !$value.is-negative;\n}\n\nmy $value = -5;\nsay is-positive($value); # False\n\n$value = 10;\nsay is-positive($value); # True\n```"
  },
  {
    "task": "Develop a check to see if a user has either exceeded their quota or is nearing it using logical OR.",
    "code": "```raku\nsub check-quota-exceeded-or-near($used, $quota, $threshold) {\n    return ($used > $quota) || ($used >= $quota - $threshold);\n}\n\n# Example usage\nmy $used = 90;\nmy $quota = 100;\nmy $threshold = 5;\n\nsay check-quota-exceeded-or-near($used, $quota, $threshold); # Output: True\n```"
  },
  {
    "task": "Implement a routine to confirm that a user is both authenticated and authorized using logical AND.",
    "code": "```raku\nsub is-authenticated($user) {\n    # Assume a routine checking if the user is authenticated\n    return $user.authenticated;\n}\n\nsub is-authorized($user) {\n    # Assume a routine checking if the user is authorized\n    return $user.authorized;\n}\n\nsub is-authenticated-and-authorized($user) {\n    return is-authenticated($user) && is-authorized($user);\n}\n\n# Example usage\nmy $user = User.new(authenticated => True, authorized => True);\nsay is-authenticated-and-authorized($user); # Outputs: True or False depending on user state\n```"
  },
  {
    "task": "Compose a function to determine if a light is either on or blinking using logical OR.",
    "code": "```raku\nsub light-status($is-on, $is-blinking) {\n    return $is-on || $is-blinking;\n}\n\n# Example usage\nsay light-status(True, False);  # Outputs: True\nsay light-status(False, True);  # Outputs: True\nsay light-status(False, False); # Outputs: False\n```"
  },
  {
    "task": "Write a script that executes a command if a network connection is neither weak nor unstable using logical NOT.",
    "code": "```raku\nmy $is-weak = False;\nmy $is-unstable = False;\n\nif not ($is-weak or $is-unstable) {\n    say \"Executing command: Network is stable and strong.\";\n}\n```"
  },
  {
    "task": "Create a program to verify that a sensor is both calibrated and active using logical AND.",
    "code": "```raku\nmy Bool $is-calibrated = True;\nmy Bool $is-active = True;\n\nif $is-calibrated && $is-active {\n    say \"Sensor is both calibrated and active.\";\n} else {\n    say \"Sensor is not both calibrated and active.\";\n}\n```"
  },
  {
    "task": "Design a feature to alert if a process is either overdue or incomplete using logical OR.",
    "code": "```raku\nsub alert-if-overdue-or-incomplete(Bool $is-overdue, Bool $is-incomplete) {\n    if $is-overdue || $is-incomplete {\n        say \"Alert: The process is either overdue or incomplete.\";\n    } else {\n        say \"The process is on track.\";\n    }\n}\n\n# Example usage\nalert-if-overdue-or-incomplete(True, False);  # This will trigger the alert\nalert-if-overdue-or-incomplete(False, False); # This will not trigger the alert\n```"
  },
  {
    "task": "Develop a script to check if a person is neither a guest nor a temporary user using logical NOT.",
    "code": "```raku\nmy $is-guest = False;\nmy $is-temporary-user = False;\n\nif !($is-guest || $is-temporary-user) {\n    say \"The person is neither a guest nor a temporary user.\";\n} else {\n    say \"The person is either a guest or a temporary user.\";\n}\n```"
  },
  {
    "task": "Implement a function to toggle a light if a switch is not pressed using logical NOT.",
    "code": "```raku\nsub toggle-light-if-switch-not-pressed(Bool $switch-pressed) {\n    my $light-on = False;\n    $light-on = !$switch-pressed;\n    return $light-on;\n}\n\nsay toggle-light-if-switch-not-pressed(False); # Outputs: True\nsay toggle-light-if-switch-not-pressed(True);  # Outputs: False\n```"
  },
  {
    "task": "Write a conditional to trigger an event if a file is either corrupted or missing using logical OR.",
    "code": "```raku\nmy $file = \"example.txt\";\nmy $corrupted = False; # Assume some logic to determine if file is corrupted\n\nif ! $file.IO.e || $corrupted {\n    say \"Trigger event: File is either corrupted or missing.\";\n}\n```"
  },
  {
    "task": "Create a routine that verifies if a vehicle is both insured and registered using logical AND.",
    "code": "```raku\nsub is-insured-and-registered(Bool $is-insured, Bool $is-registered) {\n    return $is-insured && $is-registered;\n}\n```"
  },
  {
    "task": "Compose a method to check if an account is either overdrawn or flagged using logical OR.",
    "code": "```raku\nclass Account {\n    has Bool $.overdrawn;\n    has Bool $.flagged;\n    \n    method is-overdrawn-or-flagged() {\n        return $!overdrawn || $!flagged;\n    }\n}\n```"
  },
  {
    "task": "Design a program to ensure an application is both installed and updated using logical AND.",
    "code": "```raku\nmy $is-installed = True;\nmy $is-updated = True;\n\nif $is-installed && $is-updated {\n    say \"The application is both installed and updated.\";\n} else {\n    say \"The application is not fully functional.\";\n}\n```"
  },
  {
    "task": "Develop a function that returns true if a number is neither divisible by 3 nor 5 using logical NOT.",
    "code": "```raku\nsub is-not-divisible-by-3-or-5(Int $number) {\n    return !($number %% 3 || $number %% 5);\n}\n```"
  },
  {
    "task": "Implement a script that alerts if a device is either overheating or underperforming using logical OR.",
    "code": "```raku\nmy $temperature = 85; # Example temperature\nmy $performance = 40; # Example performance\n\nif $temperature > 80 || $performance < 50 {\n    say \"Alert: Device is either overheating or underperforming!\";\n}\n```"
  },
  {
    "task": "Write a function to validate that a directory is both writable and not full using logical AND.",
    "code": "```raku\nsub validate-directory(Str $dir) {\n    my $writable = $dir.IO.w;\n    my $not-full = $dir.IO.stat.dev < $dir.IO.stat.devsize;\n    return $writable && $not-full;\n}\n```"
  },
  {
    "task": "Create a conditional statement that executes if a button is not clicked using logical NOT.",
    "code": "```raku\nmy $button_clicked = False;\nunless !$button_clicked {\n    say \"Button is not clicked.\";\n}\n```"
  },
  {
    "task": "Design a check to ensure a transaction is both verified and complete using logical AND.",
    "code": "```raku\nmy $verified = True;  # Example status\nmy $complete = True;  # Example status\n\nif $verified && $complete {\n    say \"Transaction is verified and complete.\";\n} else {\n    say \"Transaction check failed.\";\n}\n```"
  },
  {
    "task": "Develop a routine to determine if a string is either uppercase or lowercase using logical OR.",
    "code": "```raku\nsub is-uppercase-or-lowercase(Str $input) {\n    return $input ~~ / ^ <.uc>+ $ / || $input ~~ / ^ <.lc>+ $ /;\n}\n\nsay is-uppercase-or-lowercase(\"HELLO\"); # True\nsay is-uppercase-or-lowercase(\"hello\"); # True\nsay is-uppercase-or-lowercase(\"Hello\"); # False\n```"
  },
  {
    "task": "Implement a feature to execute a task if a variable is neither null nor undefined using logical NOT.",
    "code": "```raku\nmy $variable = 'some value';\n\nif defined $variable && $variable.defined {\n    say \"Executing the task because the variable is neither null nor undefined.\";\n}\n```"
  },
  {
    "task": "Compose a function to return true if a date is either today or tomorrow using logical OR.",
    "code": "```raku\nuse DateTime;\n\nsub is-today-or-tomorrow(DateTime $date) {\n    my $today = DateTime.now;\n    my $tomorrow = $today.later(days => 1);\n    return $date.Date eq $today.Date || $date.Date eq $tomorrow.Date;\n}\n```"
  },
  {
    "task": "Write a script to confirm that a system is both running and not in maintenance mode using logical AND.",
    "code": "```raku\nmy $is-running = True;\nmy $is-in-maintenance = False;\n\nif $is-running && !$is-in-maintenance {\n    say \"System is running and not in maintenance mode.\";\n} else {\n    say \"System is either not running or in maintenance mode.\";\n}\n```"
  },
  {
    "task": "Create a program to verify if a text field is neither empty nor exceeds character limit using logical NOT.",
    "code": "```raku\nmy $text = \"Example text\";\nmy $character_limit = 50;\n\nif !$text.is-empty && $text.chars <= $character_limit {\n    say \"Text is valid.\";\n} else {\n    say \"Text is invalid.\";\n}\n```"
  },
  {
    "task": "Design a feature that checks if a user has either admin privileges or editor rights using logical OR.",
    "code": "```raku\nsub has_access(Bool $is_admin, Bool $is_editor) {\n    return $is_admin || $is_editor;\n}\n\n# Example usage\nsay has_access(True, False);  # True, as the user has admin privileges\nsay has_access(False, True);  # True, as the user has editor rights\nsay has_access(False, False); # False, as the user has neither\n```"
  },
  {
    "task": "Develop a script to ensure a file is both present and not empty using logical AND.",
    "code": "```raku\nmy $filename = 'example.txt';\n\nif $filename.IO.e && $filename.IO.s > 0 {\n    say \"File exists and is not empty.\";\n} else {\n    say \"File is either missing or empty.\";\n}\n```"
  },
  {
    "task": "Implement a condition to execute a command if a setting is not active using logical NOT.",
    "code": "```raku\nmy $setting-active = False;\nif !$setting-active {\n    say \"The setting is not active. Executing command...\";\n}\n```"
  },
  {
    "task": "Compose a method to decide if a person is either eligible or exempt using logical OR.",
    "code": "```raku\nsub is-eligible-or-exempt(Bool $eligible, Bool $exempt) {\n    return $eligible || $exempt;\n}\n\n# Example usage\nsay is-eligible-or-exempt(True, False);  # OUTPUT: True\nsay is-eligible-or-exempt(False, True);  # OUTPUT: True\nsay is-eligible-or-exempt(False, False); # OUTPUT: False\n```"
  },
  {
    "task": "Write a function that returns true if a number is both greater than zero and less than ten using logical AND.",
    "code": "```raku\nsub is-between-zero-and-ten($number) {\n    return $number > 0 && $number < 10;\n}\n```"
  },
  {
    "task": "Create a loop to continue as long as a condition is either true or false using logical OR.",
    "code": "```raku\nmy $condition1 = True;\nmy $condition2 = False;\n\nloop {\n    # Some operations here\n    last unless $condition1 || $condition2;\n    # Change $condition1 and $condition2 to eventually exit the loop\n}\n```"
  },
  {
    "task": "Design a program to verify if an account is neither inactive nor suspended using logical NOT.",
    "code": "```raku\nmy $is_inactive = False;\nmy $is_suspended = False;\n\nif (!$is_inactive && !$is_suspended) {\n    say \"The account is active and not suspended.\";\n} else {\n    say \"The account is either inactive or suspended.\";\n}\n```"
  },
  {
    "task": "Develop a feature to confirm that a document is both signed and verified using logical AND.",
    "code": "```raku\nsub is-document-valid(Bool $is-signed, Bool $is-verified) {\n    return $is-signed && $is-verified;\n}\n\n# Example usage:\nmy $signed = True;\nmy $verified = True;\nsay is-document-valid($signed, $verified);  # Output: True\n\n$signed = True;\n$verified = False;\nsay is-document-valid($signed, $verified);  # Output: False\n```"
  },
  {
    "task": "Implement a script to alert if a network is either congested or down using logical OR.",
    "code": "```raku\nmy $network_congested = True; # Example value\nmy $network_down = False;     # Example value\n\nif $network_congested || $network_down {\n    say \"Alert: Network is either congested or down.\";\n}\n```"
  },
  {
    "task": "Write a function to ensure a list is both sorted and unique using logical AND.",
    "code": "```raku\nsub ensure-sorted-unique(@list) {\n    return @list.sort.uniq if @list.sort eqv @list and @list.uniq eqv @list;\n    return @list.sort.uniq;\n}\n```"
  },
  {
    "task": "Create a conditional statement to execute if a task is not completed using logical NOT.",
    "code": "```raku\nmy $task_completed = False;\n\nif !$task_completed {\n    say \"The task is not completed.\";\n}\n```"
  },
  {
    "task": "Design a check to determine if a component is either faulty or missing using logical OR.",
    "code": "```raku\nmy $is-faulty = True;    # Example value\nmy $is-missing = False;  # Example value\n\nmy $is-faulty-or-missing = $is-faulty || $is-missing;\n\nsay \"The component is faulty or missing\" if $is-faulty-or-missing;\n```"
  },
  {
    "task": "Develop a routine to verify if a user is both online and available using logical AND.",
    "code": "```raku\nsub is-user-online-and-available(%user) {\n    return %user<online> && %user<available>;\n}\n\nmy %user = online => True, available => True;\nsay is-user-online-and-available(%user); # True\n```"
  },
  {
    "task": "Implement a feature to toggle an alert if a condition is not satisfied using logical NOT.",
    "code": "```raku\nmy $condition = False;\nmy $alert = !$condition;\nsay \"Alert status: $alert\"; # Outputs: Alert status: True\n```"
  },
  {
    "task": "Compose a function to return true if a transaction is either pending or failed using logical OR.",
    "code": "```raku\nsub transaction-status($status) {\n    return $status eq 'pending' || $status eq 'failed';\n}\n```"
  },
  {
    "task": "Write a script to ensure a configuration is both correct and active using logical AND.",
    "code": "```raku\nmy $is_correct = True;  # Assume this is determined elsewhere in the script\nmy $is_active  = True;  # Assume this is determined elsewhere in the script\n\nif $is_correct && $is_active {\n    say \"The configuration is correct and active.\";\n} else {\n    say \"The configuration is not both correct and active.\";\n}\n```"
  }
]