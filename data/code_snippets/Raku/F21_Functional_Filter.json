[
  {
    "task": "Filter out all even numbers from a list of integers.",
    "code": "```raku\nmy @numbers = 1..10;\nmy @odd-numbers = @numbers.grep(* %% 2 == False);\nsay @odd-numbers;\n```"
  },
  {
    "task": "Select all words from a list that start with the letter 'a'.",
    "code": "```raku\nmy @words = <apple banana cherry apricot date>;\nmy @filtered = @words.grep(/^a/);\nsay @filtered;\n```"
  },
  {
    "task": "Find all positive numbers in a collection of integers.",
    "code": "```raku\nmy @numbers = (-10, 0, 5, 3, -2, 7, -8);\nmy @positive = @numbers.grep(* > 0);\nsay @positive;\n```"
  },
  {
    "task": "Extract all employees who are older than 30 from an employee directory.",
    "code": "```raku\nmy @employees = (\n    { name => 'Alice', age => 25 },\n    { name => 'Bob', age => 35 },\n    { name => 'Charlie', age => 32 },\n    { name => 'David', age => 28 }\n);\n\nmy @older-than-30 = @employees.grep({ .<age> > 30 });\n\nsay @older-than-30;\n```"
  },
  {
    "task": "List all cities with a population greater than one million from a dataset.",
    "code": "```raku\nmy @cities = (\n    { name => 'CityA', population => 500_000 },\n    { name => 'CityB', population => 1_500_000 },\n    { name => 'CityC', population => 2_000_000 },\n    { name => 'CityD', population => 750_000 },\n    { name => 'CityE', population => 3_000_000 }\n);\n\nmy @large-cities = @cities.grep(*.population > 1_000_000).map(*.name);\nsay @large-cities;\n```"
  },
  {
    "task": "Filter out products that are out of stock from a product list.",
    "code": "```raku\nmy @products = (\n    { name => 'Laptop', stock => 10 },\n    { name => 'Smartphone', stock => 0 },\n    { name => 'Tablet', stock => 5 },\n    { name => 'Monitor', stock => 0 }\n);\n\nmy @in_stock = @products.grep({ .<stock> > 0 });\n\nsay @in_stock;\n```"
  },
  {
    "task": "Select all students who have passed with a grade above 70 from a list of student scores.",
    "code": "```raku\nmy @students = (\n    { name => 'Alice', grade => 85 },\n    { name => 'Bob', grade => 67 },\n    { name => 'Charlie', grade => 72 },\n    { name => 'David', grade => 90 },\n    { name => 'Eve', grade => 55 }\n);\n\nmy @passed = @students.grep({ $_<grade> > 70 });\n\nsay @passed;\n```"
  },
  {
    "task": "Identify all strings in an array that contain the substring 'cat'.",
    "code": "```raku\nmy @strings = <concatenate catalog caterpillar dog>;\nmy @filtered = @strings.grep(/'cat'/);\nsay @filtered;\n```"
  },
  {
    "task": "Extract all transactions above $1000 from a financial record.",
    "code": "```raku\nmy @transactions = (500, 1500, 2000, 750, 1200, 300);\nmy @filtered = @transactions.grep(* > 1000);\nsay @filtered;\n```"
  },
  {
    "task": "Filter out all non-prime numbers from a list of numbers.",
    "code": "```raku\nsub is-prime(Int $n) {\n    return False if $n < 2;\n    return !(2..$n.sqrt.Int).first: { $n %% $_ };\n}\n\nmy @numbers = 2, 3, 4, 5, 6, 7, 8, 9, 10;\nmy @primes = @numbers.grep(&is-prime);\nsay @primes;\n```"
  },
  {
    "task": "Select all books with more than 300 pages from a library catalog.",
    "code": "```raku\nmy @library-catalog = (\n    { title => \"Book 1\", pages => 150 },\n    { title => \"Book 2\", pages => 350 },\n    { title => \"Book 3\", pages => 400 },\n    { title => \"Book 4\", pages => 250 }\n);\n\nmy @books-with-more-than-300-pages = @library-catalog.grep({ .<pages> > 300 });\nsay @books-with-more-than-300-pages;\n```"
  },
  {
    "task": "Identify all users who have logged in within the past week from a user database.",
    "code": "```raku\nuse DateTime;\n\nmy @users = (\n    { name => 'Alice', last_login => DateTime.new('2023-10-01T12:00:00Z') },\n    { name => 'Bob', last_login => DateTime.new('2023-10-05T14:00:00Z') },\n    { name => 'Charlie', last_login => DateTime.new('2023-09-28T09:00:00Z') },\n);\n\nmy $one_week_ago = DateTime.now - Duration.new(days => 7);\n\nmy @active_users = @users.grep({ $_<last_login> > $one_week_ago });\n\nsay @active_users.map(*<name>);\n```"
  },
  {
    "task": "Extract all URLs that contain 'https' from a list of web addresses.",
    "code": "```raku\nmy @urls = <http://example.com https://secure.com ftp://fileserver.com https://another-secure-site.com>;\nmy @https-urls = @urls.grep(/https/);\nsay @https-urls;\n```"
  },
  {
    "task": "Find all movies released after the year 2000 from a movie database.",
    "code": "```raku\nmy @movies = (\n    { title => 'The Matrix', year => 1999 },\n    { title => 'Inception', year => 2010 },\n    { title => 'The Lord of the Rings: The Fellowship of the Ring', year => 2001 },\n    { title => 'Fight Club', year => 1999 },\n    { title => 'The Dark Knight', year => 2008 }\n);\n\nmy @filtered-movies = @movies.grep({ .<year> > 2000 });\n.say for @filtered-movies;\n```"
  },
  {
    "task": "Select all tasks with a priority level of 'high' from a task management system.",
    "code": "```raku\nmy @tasks = (\n    { name => 'Task 1', priority => 'high' },\n    { name => 'Task 2', priority => 'low' },\n    { name => 'Task 3', priority => 'medium' },\n    { name => 'Task 4', priority => 'high' },\n);\n\nmy @high-priority-tasks = @tasks.grep({ .<priority> eq 'high' });\n\nsay @high-priority-tasks;\n```"
  },
  {
    "task": "Filter out all words longer than five characters from a text document.",
    "code": "```raku\nmy $text = \"This is a sample text document with several words.\";\nmy @filtered-words = $text.words.grep({ .chars <= 5 });\nsay @filtered-words;\n```"
  },
  {
    "task": "Extract all odd numbers from a sequence of integers.",
    "code": "```raku\nmy @numbers = 1..20;\nmy @odds = @numbers.grep(* mod 2);\nsay @odds;\n```"
  },
  {
    "task": "Select all files larger than 10MB from a list of files.",
    "code": "```raku\nmy @files = <file1.txt file2.txt file3.txt>; # Example list of files\nmy @large-files = @files.grep({ .IO.s > 10*1024*1024 });\nsay @large-files;\n```"
  },
  {
    "task": "Identify all events occurring on weekends from an event schedule.",
    "code": "```raku\nmy @events = (\n    {:date(Date.new('2023-10-27')), :name('Meeting A')},\n    {:date(Date.new('2023-10-28')), :name('Conference B')},\n    {:date(Date.new('2023-10-29')), :name('Seminar C')},\n    {:date(Date.new('2023-10-30')), :name('Workshop D')}\n);\n\nmy @weekend-events = @events.grep({ $_<date>.day-of-week ~~ 6|7 });\n\nsay @weekend-events;\n```"
  },
  {
    "task": "Find all emails from a specific domain in an email list.",
    "code": "```raku\nmy @emails = <user1@example.com user2@example.org user3@example.com user4@sample.net>;\nmy $domain = 'example.com';\nmy @filtered-emails = @emails.grep( *.contains($domain) );\nsay @filtered-emails;\n```"
  },
  {
    "task": "Filter out all people not living in a specific city from a contact list.",
    "code": "```raku\nmy @contacts = (\n    { name => \"Alice\", city => \"New York\" },\n    { name => \"Bob\", city => \"Los Angeles\" },\n    { name => \"Charlie\", city => \"New York\" },\n    { name => \"David\", city => \"San Francisco\" }\n);\n\nmy $target-city = \"New York\";\nmy @filtered-contacts = @contacts.grep({ .<city> eq $target-city });\n\nsay @filtered-contacts;\n```"
  },
  {
    "task": "Select all rectangles with an area greater than 50 from a list of rectangles.",
    "code": "```raku\nmy @rectangles = (\n    { width => 5, height => 12 },\n    { width => 8, height => 6 },\n    { width => 3, height => 20 },\n    { width => 10, height => 4 },\n);\n\nmy @large-rectangles = @rectangles.grep({ $_<width> * $_<height> > 50 });\n.say for @large-rectangles;\n```"
  },
  {
    "task": "Extract all elements that are not null from a collection.",
    "code": "```raku\nmy @collection = (1, Nil, 2, 3, Nil, 4);\nmy @filtered = @collection.grep({ $_.defined });\nsay @filtered;\n```"
  },
  {
    "task": "Identify all registered voters over the age of 18 from a voter registration list.",
    "code": "```raku\nmy @voter-registration-list = (\n    { name => 'Alice', age => 25, registered => True },\n    { name => 'Bob', age => 17, registered => True },\n    { name => 'Charlie', age => 30, registered => True },\n    { name => 'David', age => 20, registered => False },\n    { name => 'Eve', age => 19, registered => True }\n);\n\nmy @eligible-voters = @voter-registration-list.grep({ .<age> > 18 && .<registered> });\nsay @eligible-voters;\n```"
  },
  {
    "task": "Select all cars manufactured after 2015 from a vehicle registry.",
    "code": "```raku\nmy @vehicles = (\n    { make => 'Toyota', year => 2018 },\n    { make => 'Ford', year => 2010 },\n    { make => 'Honda', year => 2020 },\n);\n\nmy @cars_after_2015 = @vehicles.grep({ .<year> > 2015 });\nsay @cars_after_2015;\n```"
  },
  {
    "task": "Filter out all negative numbers from a dataset of integers.",
    "code": "```raku\nmy @data = (-3, 1, -7, 4, 0, 9, -1);\nmy @filtered = @data.grep(* >= 0);\nsay @filtered;\n```"
  },
  {
    "task": "Extract all characters from a string that are uppercase.",
    "code": "```raku\nmy $string = \"Example String With Uppercase Letters\";\nmy @uppercase = $string.comb.grep(*.uc eq *);\nsay @uppercase.join;\n```"
  },
  {
    "task": "Identify all projects with a deadline within the next month from a project database.",
    "code": "```raku\nuse DateTime;\n\nmy @projects = (\n    { name => 'Project A', deadline => DateTime.new('2023-11-15') },\n    { name => 'Project B', deadline => DateTime.new('2023-12-01') },\n    { name => 'Project C', deadline => DateTime.new('2024-01-10') },\n);\n\nmy $now = DateTime.now;\nmy $next_month = $now + 1.month;\n\nmy @upcoming-projects = @projects.grep({\n    $_<deadline> >= $now && $_<deadline> <= $next_month\n});\n\nsay @upcoming-projects;\n```"
  },
  {
    "task": "Select all athletes with a score higher than 90 from a competition result list.",
    "code": "```raku\nmy @results = [\n    { name => 'Alice', score => 92 },\n    { name => 'Bob', score => 88 },\n    { name => 'Charlie', score => 95 },\n    { name => 'Dave', score => 85 }\n];\n\nmy @athletes-above-90 = @results.grep({ .<score> > 90 });\nsay @athletes-above-90;\n```"
  },
  {
    "task": "Filter out all strings that do not contain vowels from a list of words.",
    "code": "```raku\nmy @words = <sky fly try apple orange>;\nmy @filtered = @words.grep: /<[aeiouAEIOU]>/;\nsay @filtered;\n```"
  },
  {
    "task": "Extract all dates that fall on a weekday from a calendar.",
    "code": "```raku\nmy @calendar = <2023-10-01 2023-10-02 2023-10-03 2023-10-04 2023-10-05 2023-10-06 2023-10-07>;\nmy @weekdays = @calendar.grep({ .Date.day-of-week ~~ 1..5 });\nsay @weekdays;\n```"
  },
  {
    "task": "Find all software versions that are stable releases from a list of software versions.",
    "code": "```raku\nmy @versions = <1.0 1.0-beta 2.0 2.0-alpha 3.0 3.1-beta 4.0>;\nmy @stable-versions = @versions.grep(* !~~ /'-'/);\nsay @stable-versions;\n```"
  },
  {
    "task": "Select all temperatures above freezing from a weather report.",
    "code": "```raku\nmy @temperatures = (32, 28, 45, 50, 31, 40, 33);\nmy @above_freezing = @temperatures.grep(* > 32);\nsay @above_freezing;\n```"
  },
  {
    "task": "Identify all countries with a GDP per capita above $40,000 from a country dataset.",
    "code": "```raku\nmy @countries = (\n    { name => 'CountryA', gdp_per_capita => 45000 },\n    { name => 'CountryB', gdp_per_capita => 39000 },\n    { name => 'CountryC', gdp_per_capita => 42000 },\n    { name => 'CountryD', gdp_per_capita => 38000 },\n);\n\nmy @rich-countries = @countries.grep({ .<gdp_per_capita> > 40000 });\n\nsay @rich-countries.map({ .<name> });\n```"
  },
  {
    "task": "Filter out all names shorter than four letters from a roster.",
    "code": "```raku\nmy @roster = <John Jane Alex Max Sam Sue>;\nmy @filtered-names = @roster.grep({ .chars >= 4 });\nsay @filtered-names;\n```"
  },
  {
    "task": "Extract all numbers divisible by five from a sequence.",
    "code": "```raku\nmy @sequence = 1..100; # Example sequence\nmy @divisible-by-five = @sequence.grep(* %% 5);\nsay @divisible-by-five;\n```"
  },
  {
    "task": "Select all movies with a rating above 4 stars from a film review site.",
    "code": "```raku\nmy @movies = (\n    { title => 'Movie A', rating => 3.5 },\n    { title => 'Movie B', rating => 4.7 },\n    { title => 'Movie C', rating => 5.0 },\n    { title => 'Movie D', rating => 2.8 },\n);\n\nmy @highly_rated_movies = @movies.grep({ .<rating> > 4 });\n\nsay @highly_rated_movies;\n```"
  },
  {
    "task": "Find all jobs with a salary above $50,000 from a job listing.",
    "code": "```raku\nmy @job-listings = (\n    { title => \"Software Engineer\", salary => 75000 },\n    { title => \"Data Analyst\", salary => 48000 },\n    { title => \"Project Manager\", salary => 52000 },\n    { title => \"UX Designer\", salary => 45000 },\n);\n\nmy @high-salary-jobs = @job-listings.grep( *.{'salary'} > 50000 );\n\nsay @high-salary-jobs;\n```"
  },
  {
    "task": "Filter out all entries without an email address from a contact form submission list.",
    "code": "```raku\nmy @submissions = (\n    { name => 'Alice', email => 'alice@example.com' },\n    { name => 'Bob' },\n    { name => 'Charlie', email => 'charlie@example.com' },\n    { name => 'Dave' }\n);\n\nmy @filtered = @submissions.grep({ .<email>:exists });\n\nsay @filtered;\n```"
  },
  {
    "task": "Identify all animals weighing more than 50kg from a zoo inventory.",
    "code": "```raku\nmy @zoo-inventory = (\n    { name => 'Elephant', weight => 5000 },\n    { name => 'Tiger', weight => 300 },\n    { name => 'Kangaroo', weight => 85 },\n    { name => 'Penguin', weight => 15 },\n    { name => 'Giraffe', weight => 800 },\n    { name => 'Rabbit', weight => 5 },\n);\n\nmy @heavy-animals = @zoo-inventory.grep({ .<weight> > 50 });\nsay @heavy-animals;\n```"
  },
  {
    "task": "Select all songs with a duration longer than three minutes from a playlist.",
    "code": "```raku\nmy @playlist = (\n    { title => 'Song One', duration => 180 },\n    { title => 'Song Two', duration => 240 },\n    { title => 'Song Three', duration => 200 },\n    { title => 'Song Four', duration => 320 }\n);\n\nmy @long_songs = @playlist.grep({ .<duration> > 180 });\nsay @long_songs;\n```"
  },
  {
    "task": "Extract all accounts with a balance below zero from a bank statement.",
    "code": "```raku\nmy @bank_statement = (\n    { account => '001', balance => 100 },\n    { account => '002', balance => -50 },\n    { account => '003', balance => 200 },\n    { account => '004', balance => -10 },\n);\n\nmy @negative_balances = @bank_statement.grep({ .<balance> < 0 });\n\nsay @negative_balances;\n```"
  },
  {
    "task": "Filter out all non-alphabetic characters from a string of text.",
    "code": "```raku\nmy $text = \"Raku 123 programming! @2023 #Filter\";\nmy $filtered = $text.comb.grep(/<:alpha>/).join;\nsay $filtered;\n```"
  },
  {
    "task": "Select all participants who scored above average in a competition.",
    "code": "```raku\nmy @participants = (\n    { name => 'Alice', score => 78 },\n    { name => 'Bob', score => 85 },\n    { name => 'Charlie', score => 92 },\n    { name => 'Dave', score => 60 },\n    { name => 'Eve', score => 70 }\n);\n\nmy $average-score = [\u2211] @participants>>.score / @participants.elems;\n\nmy @above-average = @participants.grep({ .score > $average-score });\n\nsay @above-average.map(*.name);\n```"
  },
  {
    "task": "Find all houses priced under $300,000 from a real estate database.",
    "code": "```raku\nmy @houses = (\n    { :price(250_000), :location('City Center') },\n    { :price(320_000), :location('Suburbs') },\n    { :price(280_000), :location('Downtown') },\n    { :price(340_000), :location('Countryside') },\n    { :price(150_000), :location('Old Town') }\n);\n\nmy @affordable-houses = @houses.grep(*<price> < 300_000);\n\nsay @affordable-houses;\n```"
  },
  {
    "task": "Identify all plants that bloom in spring from a botanical catalog.",
    "code": "```raku\nmy @catalog = (\n    { name => \"Cherry Blossom\", blooms => \"spring\" },\n    { name => \"Sunflower\", blooms => \"summer\" },\n    { name => \"Daffodil\", blooms => \"spring\" },\n    { name => \"Marigold\", blooms => \"summer\" },\n    { name => \"Crocus\", blooms => \"spring\" }\n);\n\nmy @spring-bloomers = @catalog.grep({ $_<blooms> eq \"spring\" });\n\n.say for @spring-bloomers.map({ $_<name> });\n```"
  },
  {
    "task": "Extract all passwords that are longer than eight characters from a user database.",
    "code": "```raku\nmy @user-database = (\n    \"password123\",\n    \"123456\",\n    \"securepass\",\n    \"letmein\",\n    \"strong_password!\",\n    \"short\",\n);\n\nmy @long-passwords = @user-database.grep(*.chars > 8);\nsay @long-passwords;\n```"
  },
  {
    "task": "Filter out all projects that are not yet started from a project management tool.",
    "code": "```raku\nmy @projects = (\n    { name => 'Project A', status => 'Not Started' },\n    { name => 'Project B', status => 'In Progress' },\n    { name => 'Project C', status => 'Completed' },\n    { name => 'Project D', status => 'Not Started' },\n    { name => 'Project E', status => 'In Progress' }\n);\n\nmy @started-projects = @projects.grep({ .<status> ne 'Not Started' });\n\nsay @started-projects;\n```"
  },
  {
    "task": "Select all days with temperatures exceeding 25\u00b0C from a climate report.",
    "code": "```raku\nmy @climate-report = (\n    { day => 'Monday', temperature => 22 },\n    { day => 'Tuesday', temperature => 28 },\n    { day => 'Wednesday', temperature => 24 },\n    { day => 'Thursday', temperature => 26 },\n    { day => 'Friday', temperature => 30 },\n);\n\nmy @hot-days = @climate-report.grep( *.temperature > 25 );\nsay @hot-days.map(*.day);\n```"
  },
  {
    "task": "Find all recipes that are vegetarian from a cookbook.",
    "code": "```raku\nmy @cookbook = (\n    { name => \"Spaghetti Bolognese\", vegetarian => False },\n    { name => \"Vegetable Stir Fry\", vegetarian => True },\n    { name => \"Chicken Curry\", vegetarian => False },\n    { name => \"Mushroom Risotto\", vegetarian => True },\n);\n\nmy @vegetarian-recipes = @cookbook.grep(*.{'vegetarian'});\nsay @vegetarian-recipes;\n```"
  },
  {
    "task": "Identify all articles that mention a specific keyword from a news feed.",
    "code": "```raku\nmy @news-feed = (\n    \"Breaking news: Local hero saves the day\",\n    \"Sports update: Local team wins championship\",\n    \"Weather alert: Severe storms expected tomorrow\",\n    \"Economy: Stock market hits record high\",\n    \"Technology: New smartphone model released\"\n);\n\nmy $keyword = \"Local\";\n\nmy @filtered-articles = @news-feed.grep({ .contains($keyword) });\n\nsay @filtered-articles;\n```"
  },
  {
    "task": "Extract all files with the '.jpg' extension from a directory.",
    "code": "```raku\nmy @jpg-files = dir('path/to/directory').grep(*.extension eq 'jpg');\n```"
  },
  {
    "task": "Filter out all transactions that are not categorized from a financial statement.",
    "code": "```raku\nmy @transactions = (\n    { amount => 100, category => 'Food' },\n    { amount => 200, category => 'Rent' },\n    { amount => 150 },\n    { amount => 80, category => 'Transport' },\n    { amount => 50 }\n);\n\nmy @categorized-transactions = @transactions.grep(*.category.defined);\n\nsay @categorized-transactions;\n```"
  },
  {
    "task": "Select all paintings created before 1900 from an art gallery collection.",
    "code": "```raku\nmy @paintings = (\n    { title => 'Mona Lisa', year => 1503 },\n    { title => 'The Starry Night', year => 1889 },\n    { title => 'The Persistence of Memory', year => 1931 },\n    { title => 'American Gothic', year => 1930 }\n);\n\nmy @filtered-paintings = @paintings.grep(*<year> < 1900);\nsay @filtered-paintings;\n```"
  },
  {
    "task": "Find all students with perfect attendance from a school record.",
    "code": "```raku\nmy @school-record = (\n    { name => 'Alice', attendance => 100 },\n    { name => 'Bob', attendance => 95 },\n    { name => 'Charlie', attendance => 100 },\n    { name => 'David', attendance => 98 },\n);\n\nmy @perfect-attendance = @school-record.grep({ .<attendance> == 100 });\n.say for @perfect-attendance;\n```"
  },
  {
    "task": "Identify all messages sent by a specific user from a chat application.",
    "code": "```raku\nmy @messages = (\n    { user => 'alice', message => 'Hello!' },\n    { user => 'bob', message => 'Hi there!' },\n    { user => 'alice', message => 'How are you?' },\n    { user => 'carol', message => 'Good morning!' }\n);\n\nmy $specific-user = 'alice';\nmy @filtered = @messages.grep({ .<user> eq $specific-user });\n\nsay @filtered;\n```"
  },
  {
    "task": "Extract all elements greater than 100 from an array of numbers.",
    "code": "```raku\nmy @numbers = 50, 150, 200, 75, 125, 90;\nmy @filtered = @numbers.grep(* > 100);\nsay @filtered;\n```"
  },
  {
    "task": "Filter out all words that do not end in 'ed' from a paragraph.",
    "code": "```raku\nmy $paragraph = \"The dog barked and chased the frightened cat. The tired cat hid under the bed.\";\nmy @words = $paragraph.split(/\\s+/);\nmy @filtered-words = @words.grep({ $_ ~~ /'ed' $/ });\nsay @filtered-words;\n```"
  },
  {
    "task": "Select all flights departing before noon from a flight schedule.",
    "code": "```raku\nmy @flights = (\n    { departure => '08:30', destination => 'New York' },\n    { departure => '12:45', destination => 'Los Angeles' },\n    { departure => '09:15', destination => 'Chicago' },\n    { departure => '14:00', destination => 'Miami' },\n);\n\nmy @morning-flights = @flights.grep({ DateTime.new(:str($_<departure>)).hour < 12 });\n\nsay @morning-flights;\n```"
  },
  {
    "task": "Find all products priced above $20 from an online store inventory.",
    "code": "```raku\nmy @inventory = (\n    { name => 'Laptop', price => 999 },\n    { name => 'Book', price => 15 },\n    { name => 'Headphones', price => 45 },\n    { name => 'Coffee Mug', price => 12 },\n    { name => 'Desk', price => 150 }\n);\n\nmy @expensive-products = @inventory.grep({ .<price> > 20 });\nsay @expensive-products;\n```"
  },
  {
    "task": "Identify all sessions longer than one hour from a webinar series.",
    "code": "```raku\nmy @sessions = (\n    { title => \"Intro to Raku\", duration => 75 },\n    { title => \"Advanced Features\", duration => 45 },\n    { title => \"Functional Programming\", duration => 65 },\n    { title => \"Concurrency\", duration => 55 },\n    { title => \"Web Development\", duration => 90 }\n);\n\nmy @long-sessions = @sessions.grep(*.{'duration'} > 60);\nsay @long-sessions;\n```"
  },
  {
    "task": "Extract all images with a resolution higher than 1080p from a photo library.",
    "code": "```raku\nmy @photo-library = (\n    { name => 'image1.jpg', width => 1920, height => 1080 },\n    { name => 'image2.jpg', width => 2560, height => 1440 },\n    { name => 'image3.jpg', width => 1280, height => 720 },\n    { name => 'image4.jpg', width => 3840, height => 2160 }\n);\n\nmy @high-res-images = @photo-library.grep({ $_<width> > 1920 || $_<height> > 1080 });\n\nsay @high-res-images;\n```"
  },
  {
    "task": "Filter out all responses that are not 'yes' or 'no' from a survey result.",
    "code": "```raku\nmy @responses = <yes no maybe yes no certainly>;\nmy @filtered = @responses.grep({ $_ eq 'yes' || $_ eq 'no' });\nsay @filtered;\n```"
  },
  {
    "task": "Select all tweets with more than 100 likes from a Twitter feed.",
    "code": "```raku\nmy @tweets = (\n    { text => 'Tweet 1', likes => 150 },\n    { text => 'Tweet 2', likes => 90 },\n    { text => 'Tweet 3', likes => 200 },\n    { text => 'Tweet 4', likes => 50 }\n);\n\nmy @popular-tweets = @tweets.grep({ .<likes> > 100 });\n\nsay @popular-tweets;\n```"
  },
  {
    "task": "Find all links that are broken from a webpage.",
    "code": "```raku\nuse HTTP::UserAgent;\nuse URI;\n\nmy $url = 'http://example.com'; # Replace with the webpage URL\nmy $user-agent = HTTP::UserAgent.new;\n\nmy $response = $user-agent.get($url);\ndie \"Failed to fetch the webpage.\" unless $response.is-success;\n\nmy @links = $response.content.match(/<a\\s+[^>]*?href=([\"'])(.*?)\\1/).map(*.Str).unique;\n\nmy @broken-links = @links.grep({\n    my $link-response = $user-agent.get(URI.new($_).abs($url));\n    !$link-response.is-success;\n});\n\nsay \"Broken links: \", @broken-links.join(\", \");\n```"
  },
  {
    "task": "Identify all machines that are currently offline from a network monitoring tool.",
    "code": "```raku\nmy @machines = (\n    { name => 'Machine1', status => 'offline' },\n    { name => 'Machine2', status => 'online' },\n    { name => 'Machine3', status => 'offline' },\n    { name => 'Machine4', status => 'online' }\n);\n\nmy @offline-machines = @machines.grep({ .<status> eq 'offline' });\n\nsay @offline-machines;\n```"
  },
  {
    "task": "Extract all invoices with a due date in the current month from an accounting system.",
    "code": "```raku\nuse Date::Intl;\nmy $today = Date::Intl.now;\nmy $current-month = Date::Intl.new($today.year, $today.month);\n\nmy @invoices = (\n    { id => 1, due_date => Date::Intl.new(2023, 10, 15) },\n    { id => 2, due_date => Date::Intl.new(2023, 11, 5) },\n    { id => 3, due_date => Date::Intl.new(2023, 10, 25) },\n);\n\nmy @current-month-invoices = @invoices.grep({\n    .due_date.year == $current-month.year &&\n    .due_date.month == $current-month.month\n});\n\n.say for @current-month-invoices;\n```"
  },
  {
    "task": "Filter out all lines in a file that start with a '#' from a configuration file.",
    "code": "```raku\nmy @filtered-lines = 'config.txt'.IO.lines.grep({ !/^#/ });\n.say for @filtered-lines;\n```"
  },
  {
    "task": "Select all posts with a comment count higher than 50 from a blog.",
    "code": "```raku\nmy @posts = (\n    { title => \"Post 1\", comments => 45 },\n    { title => \"Post 2\", comments => 55 },\n    { title => \"Post 3\", comments => 62 },\n    { title => \"Post 4\", comments => 30 }\n);\n\nmy @popular-posts = @posts.grep({ $_<comments> > 50 });\n\nsay @popular-posts;\n```"
  },
  {
    "task": "Find all offers that expire within the next week from a promotional database.",
    "code": "```raku\nuse DateTime;\n\nmy @offers = (\n    { name => \"Offer1\", expiry_date => DateTime.new(\"2023-10-15\") },\n    { name => \"Offer2\", expiry_date => DateTime.new(\"2023-10-10\") },\n    { name => \"Offer3\", expiry_date => DateTime.new(\"2023-10-20\") },\n);\n\nmy $today = DateTime.now;\nmy $next_week = $today.later(:days(7));\n\nmy @expiring_offers = @offers.grep({ $_<expiry_date> <= $next_week && $_<expiry_date> > $today });\n\nsay @expiring_offers.map(*<name>);\n```"
  },
  {
    "task": "Identify all items that are on sale from a shopping catalog.",
    "code": "```raku\nmy @catalog = (\n    { name => \"Laptop\", price => 1000, on_sale => True },\n    { name => \"Phone\", price => 500, on_sale => False },\n    { name => \"Tablet\", price => 300, on_sale => True },\n    { name => \"Headphones\", price => 150, on_sale => False },\n    { name => \"Camera\", price => 700, on_sale => True }\n);\n\nmy @on_sale_items = @catalog.grep(*<on_sale>);\nsay @on_sale_items;\n```"
  },
  {
    "task": "Extract all notes that mention 'urgent' from a meeting record.",
    "code": "```raku\nmy @meeting-notes = (\n    \"Discuss project timeline\",\n    \"Urgent: Update budget report\",\n    \"Review team performance\",\n    \"Urgent: Schedule client meeting\",\n    \"Plan upcoming events\"\n);\n\nmy @urgent-notes = @meeting-notes.grep(/urgent/i);\nsay @urgent-notes;\n```"
  },
  {
    "task": "Filter out all numbers that do not have a remainder when divided by two from a list.",
    "code": "```raku\nmy @list = 1..10;\nmy @filtered = @list.grep(* %% 2);\nsay @filtered;\n```"
  },
  {
    "task": "Select all concerts happening in the summer from an event calendar.",
    "code": "```raku\nmy @events = (\n    { name => 'Concert A', date => '2023-06-21' },\n    { name => 'Concert B', date => '2023-07-10' },\n    { name => 'Concert C', date => '2023-08-15' },\n    { name => 'Concert D', date => '2023-09-10' },\n);\n\nsub is-summer-date($date) {\n    my $month = $date.split('-')[1].Int;\n    return $month >= 6 && $month <= 8;\n}\n\nmy @summer-concerts = @events.grep({ is-summer-date(.<date>) });\n\n@summer-concerts.put;\n```"
  },
  {
    "task": "Find all users with more than 1000 followers from a social media platform.",
    "code": "```raku\nmy @users = (\n    { name => 'Alice', followers => 1200 },\n    { name => 'Bob', followers => 800 },\n    { name => 'Carol', followers => 1500 },\n    { name => 'Dave', followers => 950 }\n);\n\nmy @popular-users = @users.grep({ .<followers> > 1000 });\nsay @popular-users;\n```"
  },
  {
    "task": "Identify all stocks with a growth rate above 10% from a financial portfolio.",
    "code": "```raku\nmy @portfolio = (\n    { name => 'StockA', growth_rate => 12 },\n    { name => 'StockB', growth_rate => 8 },\n    { name => 'StockC', growth_rate => 15 },\n    { name => 'StockD', growth_rate => 5 }\n);\n\nmy @high_growth_stocks = @portfolio.grep(*.{'growth_rate'} > 10);\nsay @high_growth_stocks;\n```"
  },
  {
    "task": "Extract all reviews that have a five-star rating from a product review site.",
    "code": "```raku\nmy @reviews = (\n    { rating => 5, content => 'Excellent product!' },\n    { rating => 4, content => 'Very good, but could be improved.' },\n    { rating => 5, content => 'Absolutely love it!' },\n    { rating => 3, content => 'Average experience.' },\n    { rating => 5, content => 'Highly recommend!' }\n);\n\nmy @five_star_reviews = @reviews.grep( *.rating == 5 );\n.say for @five_star_reviews;\n```"
  },
  {
    "task": "Filter out all emails that are not flagged from an inbox.",
    "code": "```raku\nmy @inbox = (\n    { email => 'example1@example.com', flagged => True },\n    { email => 'example2@example.com', flagged => False },\n    { email => 'example3@example.com', flagged => True },\n);\n\nmy @flagged-emails = @inbox.grep(*.flagged);\nsay @flagged-emails;\n```"
  },
  {
    "task": "Select all entries with a timestamp from the past 24 hours from a log file.",
    "code": "```raku\nuse DateTime;\n\nmy $now = DateTime.now;\nmy $past_24_hours = $now - 24 * 60 * 60;\n\nmy @log_entries = 'logfile.txt'.IO.lines;\nmy @recent_entries = @log_entries.grep({\n    if $_ ~~ / (\\d ** 4 '-' \\d ** 2 '-' \\d ** 2 'T' \\d ** 2 ':' \\d ** 2 ':' \\d ** 2) / {\n        my $timestamp = DateTime.new($0.Str);\n        $timestamp > $past_24_hours;\n    }\n});\n\nsay @recent_entries;\n```"
  },
  {
    "task": "Find all books by a specific author from a library database.",
    "code": "```raku\nmy @library = (\n    { title => 'Book A', author => 'Author X' },\n    { title => 'Book B', author => 'Author Y' },\n    { title => 'Book C', author => 'Author X' },\n    { title => 'Book D', author => 'Author Z' }\n);\n\nmy $specific-author = 'Author X';\nmy @books-by-author = @library.grep({ .<author> eq $specific-author });\n\nsay @books-by-author;\n```"
  },
  {
    "task": "Identify all donations above $500 from a charity fundraiser report.",
    "code": "```raku\nmy @donations = (100, 250, 600, 800, 450, 550, 300);\nmy @large-donations = @donations.grep(* > 500);\nsay @large-donations;\n```"
  },
  {
    "task": "Extract all assignments due in the next week from a course syllabus.",
    "code": "```raku\nuse DateTime::Duration;\n\nmy @syllabus = (\n    { title => 'Assignment 1', due_date => DateTime.new('2023-10-20') },\n    { title => 'Assignment 2', due_date => DateTime.new('2023-10-25') },\n    { title => 'Assignment 3', due_date => DateTime.new('2023-11-01') },\n);\n\nmy $today = DateTime.now;\nmy $next_week = $today + DateTime::Duration.new(days => 7);\n\nmy @due_next_week = @syllabus.grep({\n    $_<due_date> > $today && $_<due_date> <= $next_week\n});\n\nsay @due_next_week;\n```"
  },
  {
    "task": "Filter out all movies that are not in English from a streaming service.",
    "code": "```raku\nmy @movies = (\n    { title => 'Parasite', language => 'Korean' },\n    { title => 'Inception', language => 'English' },\n    { title => 'Am\u00e9lie', language => 'French' },\n    { title => 'The Godfather', language => 'English' },\n);\n\nmy @english-movies = @movies.grep({ $_<language> eq 'English' });\n\nsay @english-movies;\n```"
  },
  {
    "task": "Select all landmarks located in Europe from a travel guide.",
    "code": "```raku\nmy @travel-guide = (\n    { name => 'Eiffel Tower', location => 'Europe' },\n    { name => 'Great Wall of China', location => 'Asia' },\n    { name => 'Colosseum', location => 'Europe' },\n    { name => 'Christ the Redeemer', location => 'South America' },\n    { name => 'Big Ben', location => 'Europe' }\n);\n\nmy @europe-landmarks = @travel-guide.grep(*.location eq 'Europe');\n.say for @europe-landmarks;\n```"
  },
  {
    "task": "Find all contracts that are set to renew next month from a contract management system.",
    "code": "```raku\nmy @contracts = (\n    { id => 1, renewal_date => '2023-11-15' },\n    { id => 2, renewal_date => '2023-12-01' },\n    { id => 3, renewal_date => '2023-12-20' },\n    { id => 4, renewal_date => '2024-01-05' }\n);\n\nmy $next_month = Date.today.later(months => 1).truncate-to('month');\n\nmy @renewing_next_month = @contracts.grep({\n    my $renewal_month = Date.new($_<renewal_date>).truncate-to('month');\n    $renewal_month == $next_month\n});\n\nsay @renewing_next_month;\n```"
  },
  {
    "task": "Identify all volunteer hours logged in the past year from a non-profit organization database.",
    "code": "```raku\nuse DateTime;\n\n# Assuming 'volunteer_hours' is a list of hashes with 'date' and 'hours'\nmy @volunteer_hours = (\n    { date => DateTime.new('2022-11-01'), hours => 5 },\n    { date => DateTime.new('2023-05-15'), hours => 3 },\n    { date => DateTime.new('2024-01-10'), hours => 4 },\n    # ... more records ...\n);\n\nmy $one_year_ago = DateTime.now - DateTime::Duration.new(years => 1);\n\nmy @hours_past_year = @volunteer_hours.grep({ $_<date> > $one_year_ago });\n\nsay @hours_past_year;\n```"
  },
  {
    "task": "Extract all elements that are not strings from a mixed-type list.",
    "code": "```raku\nmy @mixed = (1, 'apple', 3.14, 'banana', 42, 'cherry', True);\nmy @non-strings = @mixed.grep(* !~~ Str);\nsay @non-strings;\n```"
  },
  {
    "task": "Filter out all orders that are not yet shipped from an e-commerce system.",
    "code": "```raku\nmy @orders = (\n    { id => 1, status => 'shipped' },\n    { id => 2, status => 'pending' },\n    { id => 3, status => 'shipped' },\n    { id => 4, status => 'processing' },\n);\n\nmy @shipped-orders = @orders.grep( *.{'status'} eq 'shipped' );\n\nsay @shipped-orders;\n```"
  },
  {
    "task": "Select all emails sent from a specific address in an email server.",
    "code": "```raku\nmy @emails = (\n    { from => 'user1@example.com', subject => 'Hello', body => '...' },\n    { from => 'specific@example.com', subject => 'Meeting', body => '...' },\n    { from => 'user2@example.com', subject => 'Question', body => '...' },\n    { from => 'specific@example.com', subject => 'Follow-up', body => '...' }\n);\n\nmy @filtered-emails = @emails.grep({ .<from> eq 'specific@example.com' });\n\nsay @filtered-emails;\n```"
  },
  {
    "task": "Find all passwords with at least one special character from a security database.",
    "code": "```raku\nmy @passwords = <pass1 p@ss2 password3 pass@word4 p4ssword>;\nmy @filtered = @passwords.grep(/<-[\\w]>+/);\nsay @filtered;\n```"
  },
  {
    "task": "Identify all courses with a prerequisite from a university catalog.",
    "code": "```raku\nmy @courses = (\n    { name => 'Math 101', prerequisites => [] },\n    { name => 'Physics 202', prerequisites => ['Math 101'] },\n    { name => 'Chemistry 301', prerequisites => ['Physics 202'] },\n    { name => 'Literature 101', prerequisites => [] },\n    { name => 'Biology 102', prerequisites => ['Chemistry 301'] },\n);\n\nmy @courses_with_prerequisites = @courses.grep(*.prerequisites.elems > 0);\nsay @courses_with_prerequisites;\n```"
  },
  {
    "task": "Extract all genes associated with a specific trait from a genetic database.",
    "code": "```raku\nmy @database = (\n    { gene => 'GeneA', trait => 'Trait1' },\n    { gene => 'GeneB', trait => 'Trait2' },\n    { gene => 'GeneC', trait => 'Trait1' },\n    { gene => 'GeneD', trait => 'Trait3' },\n);\n\nmy $specific-trait = 'Trait1';\nmy @associated-genes = @database.grep({ .<trait> eq $specific-trait }).map(*.<gene>);\nsay @associated-genes;\n```"
  },
  {
    "task": "Filter out all investments with a risk level below medium from a portfolio.",
    "code": "```raku\nmy @portfolio = (\n    { name => 'Investment A', risk => 'low' },\n    { name => 'Investment B', risk => 'medium' },\n    { name => 'Investment C', risk => 'high' },\n    { name => 'Investment D', risk => 'medium' },\n    { name => 'Investment E', risk => 'low' }\n);\n\nmy @filtered-investments = @portfolio.grep({ $_<{'risk'}> ne 'low' });\n\nsay @filtered-investments;\n```"
  },
  {
    "task": "Select all calls longer than five minutes from a call log.",
    "code": "```raku\nmy @call-log = (\n    { duration => 3, number => '123-4567' },\n    { duration => 10, number => '234-5678' },\n    { duration => 5, number => '345-6789' },\n    { duration => 8, number => '456-7890' }\n);\n\nmy @long-calls = @call-log.grep( *.duration > 5 );\nsay @long-calls;\n```"
  }
]