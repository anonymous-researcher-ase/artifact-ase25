[
  {
    "task": "Write a program that prints numbers from 1 to 10 using a for loop.",
    "code": "```raku\nfor 1..10 -> $number {\n    say $number;\n}\n```"
  },
  {
    "task": "Create a loop that iterates over an array of names and prints each name.",
    "code": "```raku\nmy @names = <Alice Bob Charlie>;\nfor @names -> $name {\n    say $name;\n}\n```"
  },
  {
    "task": "Design a for loop to calculate the factorial of a given number.",
    "code": "```raku\nsub factorial(Int $n --> Int) {\n    my $result = 1;\n    for 2..$n -> $i {\n        $result *= $i;\n    }\n    return $result;\n}\n\nsay factorial(5);  # Example usage\n```"
  },
  {
    "task": "Implement a program that uses a for loop to sum all even numbers between 1 and 100.",
    "code": "```raku\nmy $sum = 0;\nfor 1..100 -> $num {\n    $sum += $num if $num %% 2;\n}\nsay $sum;\n```"
  },
  {
    "task": "Use a for loop to generate and print the Fibonacci sequence up to 20 terms.",
    "code": "```raku\nmy @fibonacci = 0, 1;\nfor ^18 -> $i {\n    @fibonacci.push(@fibonacci[*-1] + @fibonacci[*-2]);\n}\nsay @fibonacci;\n```"
  },
  {
    "task": "Construct a for loop that prints the multiplication table for a given number.",
    "code": "```raku\nmy $number = 5; # Example number\nfor 1..10 -> $i {\n    say \"$number x $i = \", $number * $i;\n}\n```"
  },
  {
    "task": "Write code to iterate through a list of student grades and print only those above a certain threshold.",
    "code": "```raku\nmy @grades = (95, 67, 88, 72, 85);\nmy $threshold = 75;\n\nfor @grades -> $grade {\n    if $grade > $threshold {\n        say $grade;\n    }\n}\n```"
  },
  {
    "task": "Create a for loop that appends the square of numbers 1 to 10 to a list.",
    "code": "```raku\nmy @squares;\nfor 1..10 -> $num {\n    @squares.append($num ** 2);\n}\n```"
  },
  {
    "task": "Develop a for loop that reverses a given string.",
    "code": "```raku\nmy $str = \"Hello, World!\";\nmy $reversed = \"\";\nfor $str.comb.reverse -> $char {\n    $reversed ~= $char;\n}\nsay $reversed;\n```"
  },
  {
    "task": "Build a program that uses a for loop to print all elements in a 2D matrix.",
    "code": "```raku\nmy @matrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\n\nfor @matrix -> $row {\n    for $row -> $element {\n        say $element;\n    }\n}\n```"
  },
  {
    "task": "Use a for loop to find the maximum value in an array of integers.",
    "code": "```raku\nmy @array = (3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5);\nmy $max = @array[0];\n\nfor @array -> $num {\n    $max = $num if $num > $max;\n}\n\nsay $max;\n```"
  },
  {
    "task": "Write a program that uses a for loop to print the characters of a string, one per line.",
    "code": "```raku\nmy $string = \"Hello, World!\";\nfor $string.comb -> $char {\n    say $char;\n}\n```"
  },
  {
    "task": "Create a for loop that counts the number of vowels in a given sentence.",
    "code": "```raku\nmy $sentence = \"This is a sample sentence.\";\nmy $vowel-count = 0;\n\nfor $sentence.comb -> $char {\n    $vowel-count++ if $char.lc ~~ /<[aeiou]>/;\n}\n\nsay \"Number of vowels: $vowel-count\";\n```"
  },
  {
    "task": "Implement a for loop to check if a number is prime by testing divisibility.",
    "code": "```raku\nsub is-prime(Int $n) {\n    return False if $n < 2;\n    for 2..^$n.sqrt.Int -> $i {\n        return False if $n %% $i;\n    }\n    return True;\n}\n\nsay is-prime(17); # Example usage\n```"
  },
  {
    "task": "Design a for loop that prints a pyramid pattern of asterisks with a given height.",
    "code": "```raku\nmy $height = 5; # Example height\nfor 1..$height -> $i {\n    my $spaces = ' ' x ($height - $i);\n    my $stars = '*' x (2 * $i - 1);\n    say $spaces ~ $stars;\n}\n```"
  },
  {
    "task": "Write a program that uses a for loop to calculate the sum of digits of a number.",
    "code": "```raku\nmy $number = 12345;\nmy $sum = 0;\nfor $number.comb -> $digit {\n    $sum += $digit;\n}\nsay $sum;\n```"
  },
  {
    "task": "Construct a for loop to flatten a list of lists into a single list.",
    "code": "```raku\nmy @list-of-lists = ([1, 2], [3, 4], [5, 6]);\nmy @flattened-list;\n\nfor @list-of-lists -> $sublist {\n    @flattened-list.append: $sublist;\n}\n\nsay @flattened-list;\n```"
  },
  {
    "task": "Use a for loop to generate a list of random numbers and print them.",
    "code": "```raku\nfor ^10 {\n    say (1..100).roll;\n}\n```"
  },
  {
    "task": "Create a for loop that iterates through a dictionary and prints its keys and values.",
    "code": "```raku\nmy %dictionary = 'apple' => 'fruit', 'carrot' => 'vegetable', 'dog' => 'animal';\n\nfor %dictionary.kv -> $key, $value {\n    say \"$key: $value\";\n}\n```"
  },
  {
    "task": "Develop a for loop that counts down from 10 to 1 and prints each number.",
    "code": "```raku\nfor 10 ... 1 -> $num {\n    say $num;\n}\n```"
  },
  {
    "task": "Write code to multiply each element in an array by 2 using a for loop.",
    "code": "```raku\nmy @array = <1 2 3 4 5>;\nfor @array -> $element {\n    $element *= 2;\n}\nsay @array;\n```"
  },
  {
    "task": "Create a for loop that calculates the average of numbers in a list.",
    "code": "```raku\nmy @numbers = 1, 2, 3, 4, 5;\nmy $sum = 0;\nfor @numbers -> $num {\n    $sum += $num;\n}\nmy $average = $sum / @numbers.elems;\nsay $average;\n```"
  },
  {
    "task": "Implement a for loop to find duplicate elements in an array.",
    "code": "```raku\nmy @array = <1 2 3 4 5 3 2 6>;\nmy %seen;\nmy @duplicates;\n\nfor @array -> $element {\n    if %seen{$element}:exists {\n        @duplicates.push($element) unless @duplicates.grep($element);\n    }\n    else {\n        %seen{$element} = True;\n    }\n}\n\nsay @duplicates;\n```"
  },
  {
    "task": "Design a for loop that removes all occurrences of a specific element from a list.",
    "code": "```raku\nmy @list = 1, 2, 3, 4, 2, 5, 2;\nmy $element-to-remove = 2;\nmy @result;\nfor @list -> $item {\n    @result.push($item) unless $item == $element-to-remove;\n}\nsay @result;\n```"
  },
  {
    "task": "Use a for loop to simulate rolling a dice 100 times and count the occurrences of each face.",
    "code": "```raku\nmy %counts;\nfor 1..100 {\n    my $roll = (1..6).roll;\n    %counts{$roll}++;\n}\nsay %counts;\n```"
  },
  {
    "task": "Write a for loop that prints all the prime numbers between 1 and 50.",
    "code": "```raku\nsub is-prime($n) {\n    return False if $n < 2;\n    for 2..sqrt($n).Int -> $i {\n        return False if $n %% $i;\n    }\n    return True;\n}\n\nfor 1..50 -> $num {\n    say $num if is-prime($num);\n}\n```"
  },
  {
    "task": "Develop a for loop that extracts all the uppercase letters from a string.",
    "code": "```raku\nmy $string = \"Hello World! Raku Is Fun!\";\nmy $uppercase-letters = '';\n\nfor $string.comb -> $char {\n    $uppercase-letters ~= $char if $char ~~ /<:Lu>/;\n}\n\nsay $uppercase-letters;\n```"
  },
  {
    "task": "Create a for loop that checks if a list is sorted in ascending order.",
    "code": "```raku\nmy @list = <1 2 3 4 5>;\nmy $is-sorted = True;\n\nfor 0..@list.end - 1 -> $i {\n    if @list[$i] > @list[$i + 1] {\n        $is-sorted = False;\n        last;\n    }\n}\n\nsay $is-sorted;\n```"
  },
  {
    "task": "Implement a for loop to generate a list of the first 10 square numbers.",
    "code": "```raku\nmy @squares;\nfor 1..10 -> $i {\n    @squares.push($i ** 2);\n}\nsay @squares;\n```"
  },
  {
    "task": "Write code to print all the elements of a list that are greater than a given number using a for loop.",
    "code": "```raku\nmy @list = 1, 5, 8, 10, 15;\nmy $threshold = 7;\n\nfor @list -> $element {\n    if $element > $threshold {\n        say $element;\n    }\n}\n```"
  },
  {
    "task": "Construct a for loop that finds the smallest number in an array.",
    "code": "```raku\nmy @numbers = (5, 3, 9, 1, 6);\nmy $min = @numbers[0];\n\nfor @numbers -> $num {\n    $min = $num if $num < $min;\n}\n\nsay $min;\n```"
  },
  {
    "task": "Develop a for loop that prints the first N lines of Pascal's Triangle.",
    "code": "```raku\nsub pascal-triangle($n) {\n    my @triangle;\n    for 0 ..^ $n -> $i {\n        my @row = (1);\n        for 1 .. $i -> $j {\n            @row[$j] = (@triangle[$i-1][$j-1] // 0) + (@triangle[$i-1][$j] // 0);\n        }\n        @triangle.push(@row);\n        say @row.join(' ');\n    }\n}\n\npascal-triangle(5);  # Example: prints the first 5 lines of Pascal's Triangle\n```"
  },
  {
    "task": "Create a for loop that calculates the product of all elements in a list.",
    "code": "```raku\nmy @list = (1, 2, 3, 4, 5);\nmy $product = 1;\nfor @list -> $element {\n    $product *= $element;\n}\nsay $product;\n```"
  },
  {
    "task": "Use a for loop to print numbers from 1 to 100, but replace multiples of 3 with 'Fizz'.",
    "code": "```raku\nfor 1..100 -> $i {\n    if $i %% 3 {\n        say 'Fizz';\n    } else {\n        say $i;\n    }\n}\n```"
  },
  {
    "task": "Write a for loop that iterates over a string and counts the number of words.",
    "code": "```raku\nmy $string = \"Write a for loop that iterates over a string and counts the number of words\";\nmy $word-count = 0;\nfor $string.split(' ') -> $word {\n    $word-count++;\n}\nsay $word-count;\n```"
  },
  {
    "task": "Design a for loop that prints numbers from 1 to 50, but skips numbers divisible by 5.",
    "code": "```raku\nfor 1..50 -> $num {\n    next if $num %% 5;\n    say $num;\n}\n```"
  },
  {
    "task": "Implement a for loop that prints a checkerboard pattern of asterisks.",
    "code": "```raku\nfor 1..8 -> $row {\n    for 1..8 -> $col {\n        if ($row + $col) %% 2 {\n            print '*';\n        } else {\n            print ' ';\n        }\n    }\n    say '';\n}\n```"
  },
  {
    "task": "Create a for loop that finds the index of a target value in a list.",
    "code": "```raku\nmy @list = <a b c d e>;\nmy $target = 'c';\nmy $index = -1;\n\nfor @list.kv -> $i, $value {\n    if $value eq $target {\n        $index = $i;\n        last;\n    }\n}\n\nsay $index;\n```"
  },
  {
    "task": "Use a for loop to concatenate a list of strings into a single string.",
    "code": "```raku\nmy @strings = <Hello World from Raku>;\nmy $result = '';\n\nfor @strings -> $string {\n    $result ~= $string;\n}\n\nsay $result;\n```"
  },
  {
    "task": "Develop a for loop that rotates a list to the right by a given number of positions.",
    "code": "```raku\nsub rotate-right(@list, $positions) {\n    my $len = @list.elems;\n    for 1 .. $positions {\n        @list = @list[$len-1] \u00bb,\u00bb @list[0..$len-2];\n    }\n    return @list;\n}\n\nmy @rotated = rotate-right(<1 2 3 4 5>, 2);\nsay @rotated;\n```"
  },
  {
    "task": "Write code that uses a for loop to insert an element into a sorted list while maintaining order.",
    "code": "```raku\nmy @sorted-list = (1, 3, 5, 7, 9);\nmy $new-element = 4;\nmy $inserted = False;\n\nfor ^@sorted-list.elems -> $i {\n    if $new-element < @sorted-list[$i] {\n        @sorted-list.splice($i, 0, $new-element);\n        $inserted = True;\n        last;\n    }\n}\n\n# Add to the end if not inserted\n@sorted-list.push($new-element) unless $inserted;\n\nsay @sorted-list;\n```"
  },
  {
    "task": "Implement a for loop that counts the frequency of each character in a string.",
    "code": "```raku\nmy $string = \"example string\";\nmy %frequency;\n\nfor $string.comb -> $char {\n    %frequency{$char}++;\n}\n\nsay %frequency;\n```"
  },
  {
    "task": "Create a for loop that prints all subsets of a given set.",
    "code": "```raku\nmy @set = <a b c>; \nfor 0..* -> $mask {\n    my @subset;\n    for ^@set.elems -> $i {\n        @subset.push: @set[$i] if $mask +& (1 << $i);\n    }\n    say @subset;\n    last if $mask == (1 << @set.elems) - 1;\n}\n```"
  },
  {
    "task": "Design a for loop to generate all permutations of a string.",
    "code": "```raku\nsub permutations(Str $s, $prefix = '') {\n    if $s.chars == 0 {\n        say $prefix;\n    } else {\n        for 0 ..^ $s.chars -> $i {\n            permutations($s.substr(0, $i) ~ $s.substr($i + 1), $prefix ~ $s.substr($i, 1));\n        }\n    }\n}\n\nmy $string = \"abc\";\npermutations($string);\n```"
  },
  {
    "task": "Write a for loop that sorts an array in descending order.",
    "code": "```raku\nmy @array = 5, 3, 8, 1, 4;\nfor @array = @array.sort({ $^b <=> $^a }) -> $element {\n    say $element;\n}\n```"
  },
  {
    "task": "Use a for loop to generate a sequence of random characters and print them.",
    "code": "```raku\nfor ^10 {\n    my $char = ('a'..'z').roll; \n    print $char;\n}\n```"
  },
  {
    "task": "Construct a for loop that finds the common elements between two lists.",
    "code": "```raku\nmy @list1 = <1 2 3 4 5>;\nmy @list2 = <3 4 5 6 7>;\nmy @common;\n\nfor @list1 -> $elem {\n    if $elem \u2208 @list2 {\n        @common.push($elem);\n    }\n}\n\nsay @common;\n```"
  },
  {
    "task": "Develop a for loop to calculate and print the cumulative sum of a list.",
    "code": "```raku\nmy @numbers = 1, 2, 3, 4, 5;\nmy $cumulative-sum = 0;\n\nfor @numbers -> $number {\n    $cumulative-sum += $number;\n    say $cumulative-sum;\n}\n```"
  },
  {
    "task": "Create a for loop that prints a diamond pattern using asterisks.",
    "code": "```raku\nmy $n = 5;\nfor 1..$n -> $i {\n    my $spaces = ' ' x ($n - $i);\n    my $stars = '*' x (2 * $i - 1);\n    say $spaces ~ $stars;\n}\nfor reverse 1..($n - 1) -> $i {\n    my $spaces = ' ' x ($n - $i);\n    my $stars = '*' x (2 * $i - 1);\n    say $spaces ~ $stars;\n}\n```"
  },
  {
    "task": "Write a for loop that simulates a countdown timer from a specified number of seconds.",
    "code": "```raku\nmy $start = 10; # specify the countdown start time in seconds\nfor $start ... 0 -> $i {\n    say $i;\n}\n```"
  },
  {
    "task": "Use a for loop to print the transpose of a matrix.",
    "code": "```raku\nmy @matrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\n\nfor 0 .. @matrix[0].end -> $col {\n    say [map { @matrix[$_][$col] }, 0 .. @matrix.end];\n}\n```"
  },
  {
    "task": "Implement a for loop that reverses the order of words in a sentence.",
    "code": "```raku\nmy $sentence = \"This is a test sentence\";\nmy @words = $sentence.split(' ');\nmy @reversed-words;\nfor @words.reverse -> $word {\n    @reversed-words.push($word);\n}\nsay @reversed-words.join(' ');\n```"
  },
  {
    "task": "Create a for loop that deletes elements from a list that are less than a given value.",
    "code": "```raku\nmy @list = 1, 2, 3, 4, 5;\nmy $threshold = 3;\nfor @list.kv -> $index, $value {\n    @list.splice($index, 1) if $value < $threshold;\n}\nsay @list;\n```"
  },
  {
    "task": "Design a for loop to merge two sorted lists into a single sorted list.",
    "code": "```raku\nmy @list1 = <1 3 5 7>;\nmy @list2 = <2 4 6 8>;\nmy @merged;\nmy $i = 0;\nmy $j = 0;\n\nfor 0..(@list1.elems + @list2.elems - 1) {\n    if $i < @list1.elems && ($j >= @list2.elems || @list1[$i] <= @list2[$j]) {\n        @merged.push: @list1[$i++];\n    } else {\n        @merged.push: @list2[$j++];\n    }\n}\n\nsay @merged;\n```"
  },
  {
    "task": "Write a for loop that calculates the power of a number using repeated multiplication.",
    "code": "```raku\nsub calculate-power($base, $exponent) {\n    my $result = 1;\n    for 1..$exponent {\n        $result *= $base;\n    }\n    return $result;\n}\n\nsay calculate-power(2, 3);  # Example usage\n```"
  },
  {
    "task": "Use a for loop to find the longest word in a list of words.",
    "code": "```raku\nmy @words = <apple banana cherry date>;\nmy $longest-word = \"\";\n\nfor @words -> $word {\n    $longest-word = $word if $word.chars > $longest-word.chars;\n}\n\nsay $longest-word;\n```"
  },
  {
    "task": "Develop a for loop that sorts a list of tuples based on the second element.",
    "code": "```raku\nmy @tuples = [(3, 2), (1, 5), (4, 1)];\nmy @sorted = @tuples.sort({ $^a[1] <=> $^b[1] });\n\nfor @sorted -> $tuple {\n    say $tuple;\n}\n```"
  },
  {
    "task": "Create a for loop that replicates each character in a string a given number of times.",
    "code": "```raku\nsub replicate-characters($string, $times) {\n    my $result = '';\n    for $string.comb -> $char {\n        $result ~= $char x $times;\n    }\n    return $result;\n}\n\nsay replicate-characters(\"hello\", 3);  # Output: hhheeelllllooo\n```"
  },
  {
    "task": "Construct a for loop that replaces spaces in a string with hyphens.",
    "code": "```raku\nmy $string = \"Replace spaces with hyphens\";\nfor $string.comb -> $char {\n    $string ~= $char eq ' ' ?? '-' !! $char;\n}\n$string.=subst(/^\\s+/, '');  # Remove initial spaces, if any\nsay $string;\n```"
  },
  {
    "task": "Design a for loop to find the intersection of two sets.",
    "code": "```raku\nmy @set1 = <a b c d>;\nmy @set2 = <c d e f>;\n\nmy @intersection;\nfor @set1 -> $item {\n    if @set2.grep($item) {\n        @intersection.push($item);\n    }\n}\n\nsay @intersection;\n```"
  },
  {
    "task": "Write a for loop that generates a list of prime numbers up to a given number.",
    "code": "```raku\nsub is-prime(Int $n) {\n    return False if $n < 2;\n    for 2..sqrt($n) -> $i {\n        return False if $n %% $i;\n    }\n    return True;\n}\n\nmy $limit = 100; # Example limit\nmy @primes;\nfor 2..$limit -> $num {\n    @primes.push($num) if is-prime($num);\n}\n\nsay @primes;\n```"
  },
  {
    "task": "Use a for loop to implement a simple text-based progress bar.",
    "code": "```raku\nfor 1..10 -> $step {\n    print \"\\r[\" ~ '#' x $step ~ ' ' x (10 - $step) ~ \"] $step/10\";\n    sleep 0.5;\n}\nprint \"\\n\";\n```"
  },
  {
    "task": "Implement a for loop that finds and prints all palindromic numbers between 10 and 200.",
    "code": "```raku\nfor 10..200 -> $num {\n    say $num if $num eq $num.flip;\n}\n```"
  },
  {
    "task": "Create a for loop that multiplies corresponding elements of two lists and stores the result.",
    "code": "```raku\nmy @list1 = <1 2 3 4 5>;\nmy @list2 = <6 7 8 9 10>;\nmy @result;\n\nfor @list1 Z @list2 -> $a, $b {\n    @result.push: $a * $b;\n}\n\nsay @result;\n```"
  },
  {
    "task": "Develop a for loop that finds the difference between the largest and smallest numbers in a list.",
    "code": "```raku\nmy @numbers = (3, 7, 2, 9, 5);\nmy $min = Inf;\nmy $max = -Inf;\n\nfor @numbers -> $num {\n    $min = $num if $num < $min;\n    $max = $num if $num > $max;\n}\n\nmy $difference = $max - $min;\nsay $difference;\n```"
  },
  {
    "task": "Write a for loop that prints numbers from 1 to 100, replacing multiples of 5 with 'Buzz'.",
    "code": "```raku\nfor 1..100 -> $i {\n    if $i %% 5 {\n        say 'Buzz';\n    } else {\n        say $i;\n    }\n}\n```"
  },
  {
    "task": "Use a for loop to convert a list of integers into their binary representation.",
    "code": "```raku\nmy @numbers = (5, 7, 10, 15);\nmy @binary = @numbers.map: { sprintf '%b', $_ };\nfor @binary -> $bin {\n    say $bin;\n}\n```"
  },
  {
    "task": "Design a for loop that fills a 2D array with consecutive numbers in a spiral pattern.",
    "code": "```raku\nmy @matrix = [ [0 xx 5] xx 5 ];\nmy ($top, $bottom, $left, $right) = (0, @matrix.elems - 1, 0, @matrix[0].elems - 1);\nmy $num = 1;\n\nwhile $top <= $bottom && $left <= $right {\n    for $left .. $right -> $i {\n        @matrix[$top][$i] = $num++;\n    }\n    $top++;\n\n    for $top .. $bottom -> $i {\n        @matrix[$i][$right] = $num++;\n    }\n    $right--;\n\n    if $top <= $bottom {\n        for $right .. $left -> $i {\n            @matrix[$bottom][$i] = $num++;\n        }\n        $bottom--;\n    }\n\n    if $left <= $right {\n        for $bottom .. $top -> $i {\n            @matrix[$i][$left] = $num++;\n        }\n        $left++;\n    }\n}\n\nfor @matrix -> @row {\n    say @row;\n}\n```"
  },
  {
    "task": "Create a for loop that iterates over a list and removes duplicates.",
    "code": "```raku\nmy @list = <a b c d a e f b>;\nmy %seen;\nmy @unique;\n\nfor @list -> $item {\n    unless %seen{$item}++ {\n        @unique.push($item);\n    }\n}\n\nsay @unique;\n```"
  },
  {
    "task": "Implement a for loop to calculate the dot product of two vectors.",
    "code": "```raku\nmy @vector1 = <1 2 3>;\nmy @vector2 = <4 5 6>;\nmy $dot_product = 0;\n\nfor @vector1.kv -> $i, $value {\n    $dot_product += $value * @vector2[$i];\n}\n\nsay $dot_product;\n```"
  },
  {
    "task": "Write a for loop that prints a sequence of numbers in reverse order.",
    "code": "```raku\nfor reverse 1..10 -> $num {\n    say $num;\n}\n```"
  },
  {
    "task": "Develop a for loop that computes the greatest common divisor (GCD) of two numbers.",
    "code": "```raku\nsub gcd(Int $a, Int $b) {\n    for $a, $b -> $x, $y {\n        ($x, $y) = $y, $x % $y while $y != 0;\n        return $x;\n    }\n}\n\nsay gcd(48, 18);\n```"
  },
  {
    "task": "Construct a for loop that prints a square pattern of numbers with a given side length.",
    "code": "```raku\nmy $side-length = 5;\nfor 1..$side-length -> $i {\n    for 1..$side-length -> $j {\n        print $j ~ ' ';\n    }\n    say '';\n}\n```"
  },
  {
    "task": "Create a for loop that shifts all elements of a list to the left by one position.",
    "code": "```raku\nmy @list = <a b c d>;\nmy $first = @list.shift;\nfor @list -> $elem {\n    @list.push: $first;\n    last;\n}\nsay @list;\n```"
  },
  {
    "task": "Use a for loop to print the first 20 triangular numbers.",
    "code": "```raku\nfor 1..20 -> $n {\n    my $triangular = $n * ($n + 1) div 2;\n    say $triangular;\n}\n```"
  },
  {
    "task": "Write a for loop that finds the first repeating character in a string.",
    "code": "```raku\nmy $str = \"example string with repeating characters\";\nmy %seen;\nfor $str.comb -> $char {\n    if %seen{$char}++ {\n        say $char;\n        last;\n    }\n}\n```"
  },
  {
    "task": "Design a for loop that transforms a list of temperatures from Celsius to Fahrenheit.",
    "code": "```raku\nmy @celsius = <0 10 20 30 40>;\nmy @fahrenheit;\n\nfor @celsius -> $temp {\n    @fahrenheit.push($temp * 9 / 5 + 32);\n}\n\nsay @fahrenheit;\n```"
  },
  {
    "task": "Implement a for loop to determine if a string is an isogram.",
    "code": "```raku\nsub is-isogram(Str $word) {\n    my %seen;\n    for $word.lc.comb -> $char {\n        return False if %seen{$char}++;\n    }\n    return True;\n}\n\nmy $string = \"Dermatoglyphics\";\nsay is-isogram($string); # Output: True\n```"
  },
  {
    "task": "Use a for loop to create a histogram from a list of integers.",
    "code": "```raku\nmy @numbers = 1, 2, 2, 3, 3, 3, 4, 4, 4, 4;\nmy %histogram;\n\nfor @numbers -> $num {\n    %histogram{$num}++;\n}\n\nfor %histogram.keys.sort -> $key {\n    say \"$key: \" ~ '*' x %histogram{$key};\n}\n```"
  },
  {
    "task": "Create a for loop that prints the indexes of all occurrences of a particular element in a list.",
    "code": "```raku\nmy @list = <a b c a d e a>;\nmy $element = 'a';\n\nfor @list.kv -> $index, $value {\n    say $index if $value eq $element;\n}\n```"
  },
  {
    "task": "Write a for loop that checks if a given string is a palindrome.",
    "code": "```raku\nmy $string = 'level';\nmy $is-palindrome = True;\n\nfor 0 ..^ $string.chars div 2 -> $i {\n    if $string[$i] ne $string[*-$i-1] {\n        $is-palindrome = False;\n        last;\n    }\n}\n\nsay $is-palindrome ?? \"$string is a palindrome\" !! \"$string is not a palindrome\";\n```"
  },
  {
    "task": "Develop a for loop to simulate the behavior of a simple finite state machine.",
    "code": "```raku\nmy @states = <start middle end>;\nmy $current_state = @states[0];\n\nfor @states -> $state {\n    say \"Current State: $state\";\n    # Simulate state transition\n    $current_state = $state;\n}\n```"
  },
  {
    "task": "Design a for loop that finds the sum of all odd numbers in a list.",
    "code": "```raku\nmy @numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9;\nmy $sum = 0;\n\nfor @numbers -> $num {\n    if $num %% 2 {\n        next;\n    }\n    $sum += $num;\n}\n\nsay $sum;\n```"
  },
  {
    "task": "Use a for loop to count how many words start with a vowel in a given sentence.",
    "code": "```raku\nmy $sentence = \"Enter your sentence here\";\nmy @words = $sentence.split(/\\s+/);\nmy $count = 0;\n\nfor @words -> $word {\n    if $word ~~ /^<[AEIOUaeiou]>/ {\n        $count++;\n    }\n}\n\nsay $count;\n```"
  },
  {
    "task": "Implement a for loop that sorts a list of strings by their length.",
    "code": "```raku\nmy @strings = <apple banana grape cherry>;\nmy @sorted = @strings.sort({ .chars });\nfor @sorted -> $string {\n    say $string;\n}\n```"
  },
  {
    "task": "Write a for loop that prints the factorial of numbers from 1 to 10.",
    "code": "```raku\nfor 1..10 -> $n {\n    my $factorial = [*] 1..$n;\n    say \"Factorial of $n is $factorial\";\n}\n```"
  },
  {
    "task": "Create a for loop that replaces all instances of a substring in a string with another substring.",
    "code": "```raku\nmy $str = \"The quick brown fox jumps over the lazy dog. The fox is quick.\";\nmy $from = \"quick\";\nmy $to = \"swift\";\n\nfor $str.match(/$from/) -> $match {\n    $str = $str.subst($match, $to);\n}\n\nsay $str;\n```"
  },
  {
    "task": "Develop a for loop that squares each element in a list of numbers.",
    "code": "```raku\nmy @numbers = 1, 2, 3, 4, 5;\nfor @numbers -> $num {\n    say $num ** 2;\n}\n```"
  },
  {
    "task": "Use a for loop to reverse the order of elements in an array.",
    "code": "```raku\nmy @array = <a b c d e>;\nmy @reversed;\nfor @array -> $element {\n    unshift @reversed, $element;\n}\nsay @reversed;\n```"
  },
  {
    "task": "Implement a for loop that tests if two strings are anagrams of each other.",
    "code": "```raku\nsub are-anagrams($str1, $str2) {\n    return False if $str1.chars != $str2.chars;\n    my %count;\n    for $str1.comb -> $char {\n        %count{$char}++;\n    }\n    for $str2.comb -> $char {\n        %count{$char}--;\n    }\n    return all(%count.values.map(* == 0));\n}\n\nsay are-anagrams('listen', 'silent'); # True\nsay are-anagrams('hello', 'world');  # False\n```"
  },
  {
    "task": "Design a for loop to find and print all Armstrong numbers between 100 and 999.",
    "code": "```raku\nfor 100..999 -> $number {\n    my $sum = [+] ($number.comb.map({ $_ ** 3 }));\n    say $number if $sum == $number;\n}\n```"
  }
]