[
  {
    "task": "Convert a list of temperatures from Celsius to Fahrenheit using a map function.",
    "code": "```raku\nmy @celsius = <0 20 37 100>;\nmy @fahrenheit = @celsius.map({ $_ * 9 / 5 + 32 });\nsay @fahrenheit;\n```"
  },
  {
    "task": "Use map to convert a list of lowercase words to uppercase.",
    "code": "```raku\nmy @words = <apple banana cherry>;\nmy @uppercased-words = @words.map(*.uc);\nsay @uppercased-words;\n```"
  },
  {
    "task": "Apply map to add a prefix to each string in a list of filenames.",
    "code": "```raku\nmy @filenames = <file1.txt file2.txt file3.txt>;\nmy @prefixed = @filenames.map({ \"prefix_\" ~ $_ });\nsay @prefixed;\n```"
  },
  {
    "task": "Transform a list of numbers by squaring each element with a map function.",
    "code": "```raku\nmy @numbers = 1, 2, 3, 4, 5;\nmy @squared = @numbers.map({ $_ ** 2 });\nsay @squared;\n```"
  },
  {
    "task": "Convert a list of integers to their string representations using map.",
    "code": "```raku\nmy @integers = 1, 2, 3, 4, 5;\nmy @string-representations = @integers.map(*.Str);\nsay @string-representations;\n```"
  },
  {
    "task": "Use map to compute the length of each string in a list of sentences.",
    "code": "```raku\nmy @sentences = (\"This is a sentence.\", \"Another sentence here.\", \"Yet another one.\");\nmy @lengths = @sentences.map(*.chars);\nsay @lengths;\n```"
  },
  {
    "task": "Apply a discount to a list of prices using a map function.",
    "code": "```raku\nmy @prices = 100, 200, 300, 400;\nmy $discount = 0.1;\nmy @discounted-prices = @prices.map({ $_ * (1 - $discount) });\nsay @discounted-prices;\n```"
  },
  {
    "task": "Extract the first element from each tuple in a list of tuples with map.",
    "code": "```raku\nmy @tuples = [(1, 2), (3, 4), (5, 6)];\nmy @first-elements = @tuples.map(*[0]);\nsay @first-elements;\n```"
  },
  {
    "task": "Use map to round a list of floating-point numbers to two decimal places.",
    "code": "```raku\nmy @numbers = 3.14159, 2.71828, 1.61803;\nmy @rounded = @numbers.map(*.round(0.01));\nsay @rounded;\n```"
  },
  {
    "task": "Capitalize the first letter of each word in a list of names using map.",
    "code": "```raku\nmy @names = <alice bob charlie>;\nmy @capitalized-names = @names.map({ $_.tc });\nsay @capitalized-names;\n```"
  },
  {
    "task": "Convert a list of JSON strings to corresponding dictionary objects with map.",
    "code": "```raku\nuse JSON::Fast;\n\nmy @json_strings = (\n    '{\"name\": \"Alice\", \"age\": 30}',\n    '{\"name\": \"Bob\", \"age\": 25}',\n    '{\"name\": \"Charlie\", \"age\": 35}'\n);\n\nmy @dictionaries = @json_strings.map({ from-json($_) });\n\nsay @dictionaries;\n```"
  },
  {
    "task": "Use map to double the value of each number in a list.",
    "code": "```raku\nmy @numbers = 1, 2, 3, 4, 5;\nmy @doubled = @numbers.map(* * 2);\nsay @doubled;\n```"
  },
  {
    "task": "Transform a list of RGB tuples to hexadecimal color codes using map.",
    "code": "```raku\nmy @rgb-tuples = [(255, 0, 0), (0, 255, 0), (0, 0, 255), (255, 255, 255)];\nmy @hex-codes = @rgb-tuples.map({ sprintf(\"#%02X%02X%02X\", .[0], .[1], .[2]) });\nsay @hex-codes;\n```"
  },
  {
    "task": "Use map to compute the factorial of each number in a list.",
    "code": "```raku\nmy @numbers = 1..5;\nmy @factorials = @numbers.map({ [*] 1..$_ });\nsay @factorials;\n```"
  },
  {
    "task": "Translate a list of English words to Spanish using a map function.",
    "code": "```raku\nmy %dictionary = 'hello' => 'hola', 'world' => 'mundo', 'cat' => 'gato', 'dog' => 'perro';\n\nmy @english = <hello world cat dog>;\nmy @spanish = @english.map({ %dictionary{$_} // $_ });\n\nsay @spanish;\n```"
  },
  {
    "task": "Apply a map function to format a list of dates from one format to another.",
    "code": "```raku\nmy @dates = <2023-01-01 2023-02-14 2023-03-21>;\nmy @formatted-dates = @dates.map({ .Str.subst(/(\\d**4)-(\\d**2)-(\\d**2)/, '$2/$3/$1') });\nsay @formatted-dates;\n```"
  },
  {
    "task": "Use map to check if each number in a list is even, returning a list of booleans.",
    "code": "```raku\nmy @numbers = 1, 2, 3, 4, 5;\nmy @is-even = @numbers.map(* %% 2);\nsay @is-even;\n```"
  },
  {
    "task": "Convert a list of binary strings to decimal numbers using map.",
    "code": "```raku\nmy @binary-strings = <1010 1100 1111>;\nmy @decimal-numbers = @binary-strings.map({ :2($_).Int });\nsay @decimal-numbers;\n```"
  },
  {
    "task": "Use map to append a domain name to a list of user names to create email addresses.",
    "code": "```raku\nmy @usernames = <alice bob charlie>;\nmy $domain = 'example.com';\nmy @emails = @usernames.map({ \"$_@$domain\" });\nsay @emails;\n```"
  },
  {
    "task": "Calculate the area of each circle in a list of radii using a map function.",
    "code": "```raku\nmy @radii = (1, 2, 3, 4, 5);\nmy @areas = @radii.map({ 3.14159 * $_ ** 2 });\nsay @areas;\n```"
  },
  {
    "task": "Use map to strip whitespace from the start and end of each string in a list.",
    "code": "```raku\nmy @strings = < one two three >;\nmy @trimmed = @strings.map(*.trim);\nsay @trimmed;\n```"
  },
  {
    "task": "Apply map to replace spaces with underscores in a list of file paths.",
    "code": "```raku\nmy @file_paths = <file one.txt another file.doc some file.pdf>;\nmy @underscored_paths = @file_paths.map(*.subst(' ', '_'));\nsay @underscored_paths;\n```"
  },
  {
    "task": "Convert a list of mixed-case strings to title case using map.",
    "code": "```raku\nmy @strings = <hello world Raku programming>;\nmy @title_cased = @strings.map({ $_.tc });\nsay @title_cased;\n```"
  },
  {
    "task": "Use map to filter out only the digits from a list of mixed alphanumeric strings.",
    "code": "```raku\nmy @strings = <abc123 def456 ghi789>;\nmy @digits = @strings.map({ .comb(/\\d/) }).flat;\nsay @digits;\n```"
  },
  {
    "task": "Apply map to convert a list of Unix timestamps to readable date strings.",
    "code": "```raku\nmy @timestamps = (1609459200, 1612137600, 1614556800);\nmy @readable-dates = @timestamps.map({ DateTime.new(:$*VM.now.tz, :epoch($_)).Str });\nsay @readable-dates;\n```"
  },
  {
    "task": "Transform a list of dictionary objects by extracting a specific key's value using map.",
    "code": "```raku\nmy @list-of-dictionaries = (\n    { name => 'Alice', age => 30 },\n    { name => 'Bob', age => 25 },\n    { name => 'Charlie', age => 35 },\n);\n\nmy @names = @list-of-dictionaries.map: { $_<name> };\n\nsay @names;\n```"
  },
  {
    "task": "Use map to compute the cube of each number in a list.",
    "code": "```raku\nmy @numbers = 1, 2, 3, 4, 5;\nmy @cubes = @numbers.map({ $_ ** 3 });\nsay @cubes;\n```"
  },
  {
    "task": "Translate a list of URLs to their respective domain names using a map function.",
    "code": "```raku\nmy @urls = <http://example.com https://raku.org http://www.github.com>;\nmy @domains = @urls.map({ .match(/ ^ \\w+ \\: \\/\\/ (.+?) \\/ /).[0] // . });\nsay @domains;\n```"
  },
  {
    "task": "Use map to generate HTML list items from a list of text strings.",
    "code": "```raku\nmy @texts = <item1 item2 item3>;\nmy @html_items = @texts.map({ \"<li>$_</li>\" });\nsay @html_items;\n```"
  },
  {
    "task": "Convert a list of polar coordinates to Cartesian coordinates using map.",
    "code": "```raku\nmy @polar-coords = [(1, \u03c0/4), (2, \u03c0/3), (3, \u03c0/6)];\nmy @cartesian-coords = @polar-coords.map: -> ($r, $theta) {\n    ($r * cos($theta), $r * sin($theta))\n};\nsay @cartesian-coords;\n```"
  },
  {
    "task": "Use map to decode a list of Base64 encoded strings.",
    "code": "```raku\nuse MIME::Base64;\n\nmy @encoded = <U29tZSBzdHJpbmc= QW5vdGhlciBlbmNvZGVkIHN0cmluZw==>;\nmy @decoded = @encoded.map(&decode-base64);\nsay @decoded;\n```"
  },
  {
    "task": "Convert a list of English sentences to Pig Latin using a map function.",
    "code": "```raku\nsub to-pig-latin($sentence) {\n    $sentence.words.map({ .subst(/^(\\w)(\\w*)/, \"$0$1ay\") }).join(' ');\n}\n\nmy @sentences = <The quick brown fox jumps over the lazy dog>;\nmy @pig_latin = @sentences.map(&to-pig-latin);\nsay @pig_latin;\n```"
  },
  {
    "task": "Use map to anonymize a list of email addresses by masking them.",
    "code": "```raku\nmy @emails = <john.doe@example.com jane.smith@example.org>;\nmy @anonymized = @emails.map({ $_.subst(/<-[@]>/, '*', :g) });\nsay @anonymized;\n```"
  },
  {
    "task": "Apply map to reverse each string in a list of words.",
    "code": "```raku\nmy @words = <hello world functional map>;\nmy @reversed = @words.map: *.flip;\nsay @reversed;\n```"
  },
  {
    "task": "Convert a list of hexadecimal color codes to RGB tuples using map.",
    "code": "```raku\nmy @hex-codes = <#FF5733 #33FF57 #3357FF>;\nmy @rgb-tuples = @hex-codes.map: {\n    my $hex = $_;\n    $hex.match: / ^ '#' (<[0..9A..F]> ** 6) $ /;\n    my $dec = $0.comb(2).map({ :16(~$_) });\n    $dec;\n};\nsay @rgb-tuples;\n```"
  },
  {
    "task": "Use map to increment each integer in a list by a constant value.",
    "code": "```raku\nmy @list = 1, 2, 3, 4, 5;\nmy $increment = 10;\nmy @new-list = @list.map(* + $increment);\n```"
  },
  {
    "task": "Calculate the square root of each number in a list using a map function.",
    "code": "```raku\nmy @numbers = 1, 4, 9, 16, 25;\nmy @roots = @numbers.map({ sqrt($_) });\nsay @roots;\n```"
  },
  {
    "task": "Use map to convert a list of currency amounts from dollars to euros.",
    "code": "```raku\nmy @dollars = <100 50 200 150>;\nmy $exchange_rate = 0.85;\nmy @euros = @dollars.map(* * $exchange_rate);\nsay @euros;\n```"
  },
  {
    "task": "Extract the domain from each email address in a list using map.",
    "code": "```raku\nmy @emails = <user1@example.com user2@test.org user3@domain.net>;\nmy @domains = @emails.map({ .split('@')[1] });\nsay @domains;\n```"
  },
  {
    "task": "Use map to serialize a list of objects into JSON strings.",
    "code": "```raku\nuse JSON::Fast;\n\nmy @objects = (\n    { name => 'Alice', age => 30 },\n    { name => 'Bob', age => 25 },\n    { name => 'Carol', age => 22 }\n);\n\nmy @json_strings = @objects.map({ to-json($_) });\n\nsay @json_strings;\n```"
  },
  {
    "task": "Transform a list of file sizes from bytes to kilobytes using map.",
    "code": "```raku\nmy @file-sizes-bytes = 1024, 2048, 5120, 10240;\nmy @file-sizes-kilobytes = @file-sizes-bytes.map({ $_ / 1024 });\nsay @file-sizes-kilobytes;\n```"
  },
  {
    "task": "Use map to append a suffix to each string in a list of identifiers.",
    "code": "```raku\nmy @identifiers = <id1 id2 id3>;\nmy $suffix = '-suffix';\nmy @modified = @identifiers.map({ \"$_{$suffix}\" });\nsay @modified;\n```"
  },
  {
    "task": "Apply map to convert measurements from inches to centimeters in a list.",
    "code": "```raku\nmy @inches = <1 2 3 4 5>;\nmy @centimeters = @inches.map(* * 2.54);\nsay @centimeters;\n```"
  },
  {
    "task": "Use map to encrypt a list of plaintext messages using a simple cipher.",
    "code": "```raku\nmy @plaintexts = <hello world raku>;\nmy %cipher = 'a'..'z' Z=> 'b'..'z', 'a';\nmy @encrypted = @plaintexts.map({ .comb.map({ %cipher{$_} // $_ }).join });\nsay @encrypted;\n```"
  },
  {
    "task": "Transform a list of date strings to day of the week names using a map function.",
    "code": "```raku\nmy @date-strings = <2023-10-01 2023-10-02 2023-10-03>;\nmy @days-of-week = @date-strings.map: { Date.new($_).day-of-week.fmt('%A') };\nsay @days-of-week;\n```"
  },
  {
    "task": "Use map to derive the absolute value of each number in a list.",
    "code": "```raku\nmy @numbers = (-3, 4, -1, 7, -9);\nmy @absolute_values = @numbers.map(*.abs);\nsay @absolute_values;\n```"
  },
  {
    "task": "Convert a list of lowercase hexadecimal strings to uppercase using map.",
    "code": "```raku\nmy @hexstrings = <a1 b2 c3 d4>;\nmy @uppercase = @hexstrings.map(*.uc);\nsay @uppercase;\n```"
  },
  {
    "task": "Use map to find the maximum value in a list of lists of numbers.",
    "code": "```raku\nmy @lists = ([3, 5, 7], [2, 9, 4], [8, 1, 6]);\nmy @maxima = @lists.map(*.max);\nmy $max_value = @maxima.max;\nsay $max_value;\n```"
  },
  {
    "task": "Apply map to extract the year from each date in a list of date objects.",
    "code": "```raku\nmy @dates = <2020-01-01 2021-06-15 2022-12-31>.map({ Date.new($_) });\nmy @years = @dates.map(*.year);\nsay @years;\n```"
  },
  {
    "task": "Use map to prepend a country code to each phone number in a list.",
    "code": "```raku\nmy @phone-numbers = <1234567890 9876543210 5556667777>;\nmy $country-code = '+1';\n\nmy @updated-numbers = @phone-numbers.map({ \"$country-code$_\" });\n\nsay @updated-numbers;\n```"
  },
  {
    "task": "Capitalize the last letter of each word in a list using a map function.",
    "code": "```raku\nmy @words = <hello world raku programming>;\nmy @capitalized = @words.map({ $_~~s/(.*)(.)/$0 ~ $1.uc/ });\nsay @capitalized;\n```"
  },
  {
    "task": "Use map to transform a list of strings by removing all vowels.",
    "code": "```raku\nmy @strings = <hello world functional map>;\nmy @transformed = @strings.map({ $_.trans('aeiouAEIOU' => '') });\nsay @transformed;\n```"
  },
  {
    "task": "Convert a list of music notes to their corresponding frequencies using map.",
    "code": "```raku\nmy %note-frequencies = (\n    'C'  => 261.63,\n    'C#' => 277.18,\n    'D'  => 293.66,\n    'D#' => 311.13,\n    'E'  => 329.63,\n    'F'  => 349.23,\n    'F#' => 369.99,\n    'G'  => 392.00,\n    'G#' => 415.30,\n    'A'  => 440.00,\n    'A#' => 466.16,\n    'B'  => 493.88\n);\n\nmy @notes = <C D E F G A B>;\nmy @frequencies = @notes.map({ %note-frequencies{$_} });\nsay @frequencies;\n```"
  },
  {
    "task": "Use map to find the reciprocal of each number in a list.",
    "code": "```raku\nmy @numbers = 1, 2, 3, 4, 5;\nmy @reciprocals = @numbers.map({ 1 / $_ });\nsay @reciprocals;\n```"
  },
  {
    "task": "Transform a list of URLs to their shortened versions using a map function.",
    "code": "```raku\nmy @urls = <http://example.com/page1 http://example.com/page2 http://example.com/page3>;\nmy @shortened-urls = @urls>>.map({ \"short.ly/\" ~ .substr(7, *) });\nsay @shortened-urls;\n```"
  },
  {
    "task": "Use map to generate a list of initials from a list of full names.",
    "code": "```raku\nmy @full-names = <John Doe Jane Smith Alice Johnson>;\nmy @initials = @full-names.map({ $_.split.map({ .substr(0, 1) }).join('') });\nsay @initials;\n```"
  },
  {
    "task": "Convert a list of decimal numbers to their binary string representations using map.",
    "code": "```raku\nmy @decimals = (10, 15, 255, 1024);\nmy @binaries = @decimals.map(*.base(2));\nsay @binaries;\n```"
  },
  {
    "task": "Use map to adjust the brightness of each color in a list of RGB tuples.",
    "code": "```raku\nmy @colors = [(255, 0, 0), (0, 255, 0), (0, 0, 255)];\nmy $brightness-factor = 0.5;\n\nmy @adjusted-colors = @colors.map(-> $r, $g, $b {\n    ($r * $brightness-factor, $g * $brightness-factor, $b * $brightness-factor)\n});\n\nsay @adjusted-colors;\n```"
  },
  {
    "task": "Apply map to filter out only alphabetic characters from a list of strings.",
    "code": "```raku\nmy @strings = <a1b2c3 def4g hij5>;\nmy @filtered = @strings.map( *.comb(/\\w/).grep(/\\D/).join );\nsay @filtered;\n```"
  },
  {
    "task": "Use map to compute the prime factorization of each number in a list.",
    "code": "```raku\nsub is-prime($n) {\n    return False if $n < 2;\n    return $n == 2 || all($n %% $_ for 2..sqrt($n));\n}\n\nsub prime-factors($n) {\n    my @factors;\n    my $factor = 2;\n    while $n > 1 {\n        if $n %% $factor && is-prime($factor) {\n            push @factors, $factor;\n            $n /= $factor;\n        } else {\n            $factor++;\n        }\n    }\n    return @factors;\n}\n\nmy @numbers = (10, 15, 21, 28, 30);\nmy @factors-list = @numbers.map({ prime-factors($_) });\nsay @factors-list;\n```"
  },
  {
    "task": "Calculate the exponential of each number in a list using a map function.",
    "code": "```raku\nmy @numbers = 1, 2, 3, 4, 5;\nmy @exponentials = @numbers.map({ exp($_) });\nsay @exponentials;\n```"
  },
  {
    "task": "Use map to convert a list of text messages to morse code.",
    "code": "```raku\nmy %morse = 'A' => '.-', 'B' => '-...', 'C' => '-.-.', 'D' => '-..', 'E' => '.', 'F' => '..-.', 'G' => '--.', 'H' => '....', 'I' => '..', 'J' => '.---', 'K' => '-.-', 'L' => '.-..', 'M' => '--', 'N' => '-.', 'O' => '---', 'P' => '.--.', 'Q' => '--.-', 'R' => '.-.', 'S' => '...', 'T' => '-', 'U' => '..-', 'V' => '...-', 'W' => '.--', 'X' => '-..-', 'Y' => '-.--', 'Z' => '--..', '0' => '-----', '1' => '.----', '2' => '..---', '3' => '...--', '4' => '....-', '5' => '.....', '6' => '-....', '7' => '--...', '8' => '---..', '9' => '----.';\n\nmy @messages = (\"HELLO\", \"WORLD\", \"RAKU\");\n\nmy @morse_messages = @messages.map: -> $message {\n    $message.uc.comb.map({ %morse{$_} // '' }).join(' ')\n};\n\nsay @morse_messages;\n```"
  },
  {
    "task": "Transform a list of JSON objects to XML strings using a map function.",
    "code": "```raku\nuse JSON::Fast;\nuse XML::Writer;\n\nmy @json-objects = (\n    '{\"name\": \"John\", \"age\": 30}',\n    '{\"name\": \"Jane\", \"age\": 25}'\n);\n\nsub json-to-xml($json-str) {\n    my %data = from-json($json-str);\n    my $xml = '';\n    my $writer = XML::Writer.new(:output($xml));\n    $writer.dataElement('root', %data);\n    $writer.end;\n    return $xml;\n}\n\nmy @xml-strings = @json-objects.map(&json-to-xml);\ndd @xml-strings;\n```"
  },
  {
    "task": "Use map to extract the extension from each filename in a list.",
    "code": "```raku\nmy @filenames = <file1.txt file2.doc file3.pdf>;\nmy @extensions = @filenames.map({ .split('.').[-1] });\nsay @extensions;\n```"
  },
  {
    "task": "Convert a list of temperatures from Fahrenheit to Kelvin using map.",
    "code": "```raku\nmy @fahrenheit = <32 68 104 212>;\nmy @kelvin = @fahrenheit.map({ ($_ - 32) * 5/9 + 273.15 });\nsay @kelvin;\n```"
  },
  {
    "task": "Use map to calculate the perimeter of each rectangle in a list of dimensions.",
    "code": "```raku\nmy @dimensions = ((4, 5), (7, 3), (10, 2));\nmy @perimeters = @dimensions.map({ 2 * ($_[0] + $_[1]) });\nsay @perimeters;\n```"
  },
  {
    "task": "Apply map to format a list of phone numbers into a standard format.",
    "code": "```raku\nmy @phone-numbers = ('123-456-7890', '987.654.3210', '(555) 123 4567');\nmy @formatted-numbers = @phone-numbers.map({ $_.subst(/<[\\-\\. ()]>+/, '', :g).subst(/^(\\d{3})(\\d{3})(\\d{4})$/, '($0) $1-$2') });\nsay @formatted-numbers;\n```"
  },
  {
    "task": "Use map to generate a hashed version of passwords from a list.",
    "code": "```raku\nmy @passwords = <password1 examplePassword secret123>;\nmy @hashed-passwords = @passwords.map({ \"{$_}\".IO.slurp.md5 });\nsay @hashed-passwords;\n```"
  },
  {
    "task": "Convert a list of text paragraphs to a word count using map.",
    "code": "```raku\nmy @paragraphs = (\"This is the first paragraph.\", \"Here is another one.\", \"And the last paragraph.\");\nmy @word_counts = @paragraphs.map({ .words.elems });\nsay @word_counts;\n```"
  },
  {
    "task": "Use map to remove punctuation from each string in a list of sentences.",
    "code": "```raku\nmy @sentences = ('Hello, world!', 'This is a test.', 'Raku is great!');\nmy @cleaned = @sentences.map({ .subst(/<-[\\w\\s]>+/, '') });\nsay @cleaned;\n```"
  },
  {
    "task": "Transform a list of URLs to their base domain using a map function.",
    "code": "```raku\nmy @urls = <http://example.com/page https://www.test.org/about http://sub.example.net/info>;\nmy @domains = @urls.map({ .split('/')[2] });\nsay @domains;\n```"
  },
  {
    "task": "Use map to translate a list of expressions to their symbolic algebraic forms.",
    "code": "```raku\nmy @expressions = <x+1 y-2 z*3>;\nmy @algebraic_forms = @expressions.map: {\n    $_ ~~ s:g/ '+' / ' plus '/;\n    $_ ~~ s:g/ '-' / ' minus '/;\n    $_ ~~ s:g/ '*' / ' times '/;\n    return $_;\n};\nsay @algebraic_forms;\n```"
  },
  {
    "task": "Apply map to convert a list of ASCII codes to corresponding characters.",
    "code": "```raku\nmy @ascii-codes = (65, 66, 67, 68, 69);\nmy @characters = @ascii-codes.map({ .chr });\nsay @characters;\n```"
  },
  {
    "task": "Use map to transform a list of text strings to their lemmatized forms.",
    "code": "```raku\nuse Lingua::EN::Lemmatizer;\n\nmy @strings = <running dogs cats children>;\nmy $lemmatizer = Lingua::EN::Lemmatizer.new;\n\nmy @lemmatized = @strings.map({ $lemmatizer.lemmatize($_) });\n\nsay @lemmatized;\n```"
  },
  {
    "task": "Convert a list of HTML strings to plain text using map.",
    "code": "```raku\nmy @html-list = ('<p>Hello, World!</p>', '<strong>Raku</strong> is <em>awesome</em>!');\nmy @plain-text-list = @html-list.map({ .subst(/<[^>]+>/, '', :g) });\nsay @plain-text-list;\n```"
  },
  {
    "task": "Use map to create a summary of each article in a list of texts.",
    "code": "```raku\nmy @articles = (\n    \"Raku is a member of the Perl family of programming languages.\",\n    \"It is known for its expressive and flexible syntax.\",\n    \"Raku supports multiple programming paradigms.\"\n);\n\nmy @summaries = @articles.map: { .split(' ').head(5).join(' ') ~ '...' };\n\nsay @summaries;\n```"
  },
  {
    "task": "Transform a list of paths to their absolute paths using a map function.",
    "code": "```raku\nmy @paths = ('./file1', '../file2', '/absolute/path');\nmy @absolute-paths = @paths.map({ .IO.absolute });\nsay @absolute-paths;\n```"
  },
  {
    "task": "Use map to generate QR codes from a list of URLs.",
    "code": "```raku\nuse MIME::Base64;\nuse Digest::SHA1;\nuse JSON::Fast;\n\nsub generate-qr-code(Str $url) {\n    # This is a placeholder function for generating a QR code.\n    # In a real implementation, this would generate and return a QR code.\n    return \"QR Code for $url\";\n}\n\nmy @urls = <http://example.com https://raku.org http://github.com>;\nmy @qr-codes = @urls.map(&generate-qr-code);\nsay @qr-codes;\n```"
  },
  {
    "task": "Convert a list of angles from degrees to radians using map.",
    "code": "```raku\nmy @degrees = (0, 30, 45, 60, 90, 180, 270, 360);\nmy @radians = @degrees.map(* * \u03c0 / 180);\nsay @radians;\n```"
  },
  {
    "task": "Use map to anonymize a list of IP addresses by masking parts of them.",
    "code": "```raku\nmy @ips = <192.168.1.1 10.0.0.1 172.16.0.1>;\nmy @anonymized = @ips.map({ $_.subst(/\\d+$/, 'xxx') });\nsay @anonymized;\n```"
  },
  {
    "task": "Transform a list of tuples by swapping their elements using a map function.",
    "code": "```raku\nmy @tuples = [(1, 2), (3, 4), (5, 6)];\nmy @swapped = @tuples.map: -> ($a, $b) { ($b, $a) };\nsay @swapped;\n```"
  },
  {
    "task": "Use map to compute the greatest common divisor of pairs in a list of number pairs.",
    "code": "```raku\nsub gcd($a, $b) {\n    ($a, $b) = ($b, $a % $b) while $b;\n    return $a;\n}\n\nmy @pairs = ([48, 18], [56, 98], [101, 103]);\nmy @gcds = @pairs.map({ gcd($_[0], $_[1]) });\nsay @gcds;\n```"
  },
  {
    "task": "Convert a list of file paths to their directory names using map.",
    "code": "```raku\nmy @file-paths = ('/home/user/file.txt', '/usr/local/bin/executable', '/etc/nginx/nginx.conf');\nmy @directory-names = @file-paths.map({ .IO.dirname });\nsay @directory-names;\n```"
  },
  {
    "task": "Use map to replace each vowel in a list of strings with a specific character.",
    "code": "```raku\nmy @strings = <apple orange banana>;\nmy $replacement = '*';\nmy @result = @strings.map: { $_.trans(rx:i/<[aeiou]>/, $replacement) };\nsay @result;\n```"
  },
  {
    "task": "Transform a list of integers to their hexadecimal representations using map.",
    "code": "```raku\nmy @integers = (10, 15, 255, 1024, 4096);\nmy @hex-representations = @integers.map(*.base(16));\nsay @hex-representations;\n```"
  },
  {
    "task": "Use map to apply a transformation matrix to a list of 2D vectors.",
    "code": "```raku\nmy @vectors = ([1, 2], [3, 4], [5, 6]);\nmy @transformation-matrix = ([2, 0], [0, 2]);\n\nmy @transformed-vectors = @vectors.map(-> @vector {\n    [\n        @vector[0] * @transformation-matrix[0][0] + @vector[1] * @transformation-matrix[0][1],\n        @vector[0] * @transformation-matrix[1][0] + @vector[1] * @transformation-matrix[1][1]\n    ]\n});\n\nsay @transformed-vectors;\n```"
  },
  {
    "task": "Convert a list of text strings to their phonetic alphabet equivalents using map.",
    "code": "```raku\nmy %phonetic = 'A' => 'Alfa', 'B' => 'Bravo', 'C' => 'Charlie', 'D' => 'Delta', \n               'E' => 'Echo', 'F' => 'Foxtrot', 'G' => 'Golf', 'H' => 'Hotel', \n               'I' => 'India', 'J' => 'Juliett', 'K' => 'Kilo', 'L' => 'Lima', \n               'M' => 'Mike', 'N' => 'November', 'O' => 'Oscar', 'P' => 'Papa', \n               'Q' => 'Quebec', 'R' => 'Romeo', 'S' => 'Sierra', 'T' => 'Tango', \n               'U' => 'Uniform', 'V' => 'Victor', 'W' => 'Whiskey', 'X' => 'X-ray', \n               'Y' => 'Yankee', 'Z' => 'Zulu';\n\nmy @strings = <HELLO WORLD RAKU>;\n\nmy @phonetic = @strings.map({\n    $_.comb.map({ %phonetic{$_} // $_ }).join(' ')\n});\n\nsay @phonetic.join(', ');\n```"
  },
  {
    "task": "Use map to determine if each word in a list is a palindrome, returning booleans.",
    "code": "```raku\nmy @words = <level rotor hello world civic>;\nmy @palindromes = @words.map({ $_ eq $_.flip });\nsay @palindromes;\n```"
  },
  {
    "task": "Transform a list of dictionaries by renaming a specified key using a map function.",
    "code": "```raku\nmy @list-of-dicts = ( { oldKey => 1 }, { oldKey => 2 }, { oldKey => 3 } );\nmy $rename-key = sub ($hash) { $hash{'newKey'} = $hash{'oldKey'}; $hash{'oldKey'}:delete; $hash };\nmy @transformed = @list-of-dicts.map: $rename-key;\nsay @transformed;\n```"
  },
  {
    "task": "Use map to compute the logarithm of each number in a list.",
    "code": "```raku\nmy @numbers = 1, 10, 100, 1000;\nmy @logarithms = @numbers.map({ log($_) });\nsay @logarithms;\n```"
  },
  {
    "task": "Convert a list of image file paths to grayscale versions using map.",
    "code": "```raku\nmy @image-paths = <image1.jpg image2.png image3.bmp>;\nmy @grayscale-paths = @image-paths.map({ convert-to-grayscale($_) });\n\nsub convert-to-grayscale($path) {\n    # Hypothetical function to convert image to grayscale\n    # This would contain the actual logic to process the image\n    return $path.subst(/\\.jpg$|\\.png$|\\.bmp$/, '-grayscale$0');\n}\n```"
  },
  {
    "task": "Use map to flatten a list of lists of strings into a single list of strings.",
    "code": "```raku\nmy @list-of-lists = [['a', 'b'], ['c', 'd'], ['e', 'f']];\nmy @flattened = @list-of-lists.map(*.flat);\nsay @flattened;\n```"
  },
  {
    "task": "Transform a list of temperature readings to temperature anomalies using a map function.",
    "code": "```raku\nmy @temperatures = <15.5 17.2 16.8 14.0 19.5>;\nmy $average = @temperatures.sum / @temperatures.elems;\nmy @anomalies = @temperatures.map({ $_ - $average });\nsay @anomalies;\n```"
  }
]