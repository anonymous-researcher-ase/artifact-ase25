[
  {
    "task": "Create a function that modifies the first element of an array passed to it. Explain how the changes are reflected in the original array.",
    "code": "```javascript\nfunction modifyFirstElement(arr) {\n    if (arr.length > 0) {\n        arr[0] = \"Modified\";\n    }\n}\n\nlet myArray = [1, 2, 3];\nmodifyFirstElement(myArray);\nconsole.log(myArray);\n```"
  },
  {
    "task": "Design a function that swaps the values of two variables using pass-by-reference. Demonstrate how the swap affects the original variables.",
    "code": "```javascript\nfunction swap(obj) {\n    let temp = obj.a;\n    obj.a = obj.b;\n    obj.b = temp;\n}\n\nlet values = { a: 1, b: 2 };\nswap(values);\nconsole.log(values.a, values.b);\n```"
  },
  {
    "task": "Write a program that passes a large data structure to a function by value and by reference. Compare the performance and memory usage for both approaches.",
    "code": "```javascript\nfunction passByValue(data) {\n    let copiedData = JSON.parse(JSON.stringify(data));\n    // Simulate some processing on copiedData\n    return copiedData;\n}\n\nfunction passByReference(data) {\n    // Simulate some processing on data\n    return data;\n}\n\nfunction measurePerformance(func, data) {\n    const start = performance.now();\n    func(data);\n    const end = performance.now();\n    return end - start;\n}\n\nconst largeDataStructure = Array.from({ length: 100000 }, (_, i) => ({ index: i, value: Math.random() }));\n\nconst timeByValue = measurePerformance(passByValue, largeDataStructure);\nconst timeByReference = measurePerformance(passByReference, largeDataStructure);\n\nconsole.log('Time by value:', timeByValue, 'ms');\nconsole.log('Time by reference:', timeByReference, 'ms');\n```"
  },
  {
    "task": "Implement a function that accepts an integer and doubles its value. Show the difference in the original variable when using pass-by-value versus pass-by-reference.",
    "code": "```javascript\n// JavaScript uses pass-by-value for primitive types like numbers\nfunction doubleValueByValue(number) {\n    return number * 2;\n}\n\n// Objects are passed by reference in JavaScript\nfunction doubleValueByReference(obj) {\n    obj.value *= 2;\n}\n\nlet num = 5;\nlet doubledNum = doubleValueByValue(num);\nconsole.log(\"Original number:\", num); // 5\nconsole.log(\"Doubled number by value:\", doubledNum); // 10\n\nlet numberObj = { value: 5 };\ndoubleValueByReference(numberObj);\nconsole.log(\"Original number object:\", numberObj.value); // 10\n```"
  },
  {
    "task": "Create a function that takes a list and returns a new list with elements doubled. Ensure the original list remains unchanged.",
    "code": "```javascript\nfunction doubleElements(list) {\n    return list.map(element => element * 2);\n}\n\n// Example usage:\nconst originalList = [1, 2, 3, 4];\nconst doubledList = doubleElements(originalList);\nconsole.log(originalList); // [1, 2, 3, 4]\nconsole.log(doubledList);  // [2, 4, 6, 8]\n```"
  },
  {
    "task": "Design a function that takes a string argument and appends a character to it. Illustrate the result when the string is passed by value.",
    "code": "```javascript\nfunction appendCharacter(str, char) {\n    return str + char;\n}\n\nlet originalString = \"Hello\";\nlet resultString = appendCharacter(originalString, '!');\nconsole.log(\"Original String:\", originalString);\nconsole.log(\"Result String:\", resultString);\n```"
  },
  {
    "task": "Write a function that increments a counter variable. Pass the variable by reference to see changes in the original variable.",
    "code": "```javascript\nfunction incrementCounter(counter) {\n  counter.value++;\n}\n\nlet counter = { value: 0 };\n\nincrementCounter(counter);\nconsole.log(counter.value); // Output will be 1\n```"
  },
  {
    "task": "Develop a function that removes an item from a dictionary passed to it. Demonstrate how pass-by-reference affects the original dictionary.",
    "code": "```javascript\nfunction removeItemFromDict(dict, key) {\n    delete dict[key];\n}\n\nconst myDict = { a: 1, b: 2, c: 3 };\nconsole.log('Before:', myDict);\nremoveItemFromDict(myDict, 'b');\nconsole.log('After:', myDict);\n```"
  },
  {
    "task": "Create a program that passes a matrix to a function, which transposes it. Explain how the transposition affects the original matrix with pass-by-reference.",
    "code": "```javascript\nfunction transposeMatrix(matrix) {\n    for (let i = 0; i < matrix.length; i++) {\n        for (let j = i + 1; j < matrix[i].length; j++) {\n            let temp = matrix[i][j];\n            matrix[i][j] = matrix[j][i];\n            matrix[j][i] = temp;\n        }\n    }\n}\n\nlet originalMatrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\n\ntransposeMatrix(originalMatrix);\n\nconsole.log(originalMatrix);\n```"
  },
  {
    "task": "Implement a function that takes a float number and rounds it. Discuss the implications of passing the number by value.",
    "code": "```javascript\nfunction roundNumber(num) {\n    return Math.round(num);\n}\n\nlet originalNumber = 5.7;\nlet roundedNumber = roundNumber(originalNumber);\n\nconsole.log(\"Original Number:\", originalNumber);\nconsole.log(\"Rounded Number:\", roundedNumber);\n```"
  },
  {
    "task": "Design a function that accepts a dictionary and adds a key-value pair to it. Show the changes when the dictionary is passed by reference.",
    "code": "```javascript\nfunction addKeyValuePair(obj, key, value) {\n    obj[key] = value;\n}\n\nlet myDictionary = { a: 1, b: 2 };\nconsole.log(\"Before:\", myDictionary);\n\naddKeyValuePair(myDictionary, 'c', 3);\nconsole.log(\"After:\", myDictionary);\n```"
  },
  {
    "task": "Write a program that passes a string to a function that converts it to uppercase. Explain how this affects the original string with pass-by-value.",
    "code": "```javascript\nfunction toUpperCaseString(str) {\n    return str.toUpperCase();\n}\n\nlet originalString = \"hello world\";\nlet uppercasedString = toUpperCaseString(originalString);\n\nconsole.log(\"Original String:\", originalString);\nconsole.log(\"Uppercased String:\", uppercasedString);\n```"
  },
  {
    "task": "Create a function that receives a tuple and attempts to modify one of its elements. Discuss the outcome of using pass-by-value.",
    "code": "```javascript\nfunction modifyTupleElement(tuple) {\n    tuple[0] = 'Modified';\n}\n\nconst myTuple = Object.freeze(['Original', 'Element']);\nmodifyTupleElement(myTuple);\nconsole.log(myTuple);\n```"
  },
  {
    "task": "Develop a function that accepts an object and modifies one of its attributes. Illustrate how pass-by-reference alters the original object.",
    "code": "```javascript\nfunction modifyObject(obj) {\n    obj.modified = true;\n}\n\nconst myObject = { name: 'Original', modified: false };\nconsole.log('Before modification:', myObject);\nmodifyObject(myObject);\nconsole.log('After modification:', myObject);\n```"
  },
  {
    "task": "Design a function that outputs the sum of all elements in an array passed by value. Confirm the original array remains unchanged.",
    "code": "```javascript\nfunction sumArray(arr) {\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n\nconst originalArray = [1, 2, 3, 4, 5];\nconst result = sumArray([...originalArray]);\nconsole.log('Sum:', result);\nconsole.log('Original Array:', originalArray);\n```"
  },
  {
    "task": "Write a function that takes a boolean flag and toggles its value. Demonstrate the effect of pass-by-reference on the original flag.",
    "code": "```javascript\nfunction toggleFlag(flagObj) {\n    flagObj.value = !flagObj.value;\n}\n\nlet flag = { value: true };\nconsole.log('Before toggle:', flag.value);\ntoggleFlag(flag);\nconsole.log('After toggle:', flag.value);\n```"
  },
  {
    "task": "Create a function that takes an object and clones it. Modify the clone and show that the original object remains unaffected.",
    "code": "```javascript\nfunction cloneAndModify(obj) {\n    const clone = { ...obj };\n    clone.modified = true;\n    return clone;\n}\n\nconst original = { key: 'value' };\nconst modifiedClone = cloneAndModify(original);\n\nconsole.log(original); // { key: 'value' }\nconsole.log(modifiedClone); // { key: 'value', modified: true }\n```"
  },
  {
    "task": "Implement a function that accepts a list of integers and removes all even numbers. Describe the difference in behavior when using pass-by-value and pass-by-reference.",
    "code": "```javascript\nfunction removeEvens(numbers) {\n    return numbers.filter(num => num % 2 !== 0);\n}\n\nlet numbers = [1, 2, 3, 4, 5, 6];\nlet result = removeEvens(numbers);\n\nconsole.log('Original list:', numbers);\nconsole.log('List after removing evens:', result);\n```"
  },
  {
    "task": "Develop a function that takes a complex number and returns its conjugate. Explain how pass-by-value affects the original complex number.",
    "code": "```javascript\nfunction complexConjugate(complexNumber) {\n    return { real: complexNumber.real, imaginary: -complexNumber.imaginary };\n}\n\n// Example usage:\nconst originalComplexNumber = { real: 4, imaginary: 5 };\nconst conjugate = complexConjugate(originalComplexNumber);\n\nconsole.log(`Original: ${originalComplexNumber.real} + ${originalComplexNumber.imaginary}i`);\nconsole.log(`Conjugate: ${conjugate.real} + ${conjugate.imaginary}i`);\n```"
  },
  {
    "task": "Design a program where a function receives a binary tree and inverts it. Discuss how pass-by-reference impacts the original tree structure.",
    "code": "```javascript\nfunction invertTree(node) {\n    if (!node) return null;\n\n    // Swap the left and right children\n    let temp = node.left;\n    node.left = node.right;\n    node.right = temp;\n\n    // Recursively invert the sub-trees\n    invertTree(node.left);\n    invertTree(node.right);\n\n    return node;\n}\n\n// Example usage\nclass TreeNode {\n    constructor(value, left = null, right = null) {\n        this.value = value;\n        this.left = left;\n        this.right = right;\n    }\n}\n\n// Construct a binary tree\nlet root = new TreeNode(1, new TreeNode(2), new TreeNode(3));\n\n// Invert the binary tree\ninvertTree(root);\n```"
  },
  {
    "task": "Write a function that adds an element to a set passed to it. Show how pass-by-reference affects the original set.",
    "code": "```javascript\nfunction addElementToSet(set, element) {\n    set.add(element);\n}\n\nconst mySet = new Set([1, 2, 3]);\nconsole.log('Before:', mySet);\n\naddElementToSet(mySet, 4);\nconsole.log('After:', mySet);\n```"
  },
  {
    "task": "Create a function that accepts an integer array and sorts it. Demonstrate the difference when the array is passed by value.",
    "code": "```javascript\nfunction sortArray(arr) {\n    return arr.slice().sort((a, b) => a - b);\n}\n\nconst originalArray = [5, 2, 9, 1, 5, 6];\nconst sortedArray = sortArray(originalArray);\n\nconsole.log('Original Array:', originalArray);\nconsole.log('Sorted Array:', sortedArray);\n```"
  },
  {
    "task": "Implement a function that takes a configuration object and toggles a setting. Illustrate the changes with pass-by-reference.",
    "code": "```javascript\nfunction toggleSetting(config, settingName) {\n    if (config.hasOwnProperty(settingName)) {\n        config[settingName] = !config[settingName];\n    }\n}\n\nconst config = {\n    darkMode: false,\n    notifications: true,\n    autoSave: false\n};\n\nconsole.log('Before:', config);\ntoggleSetting(config, 'darkMode');\nconsole.log('After:', config);\n```"
  },
  {
    "task": "Design a function that receives a file path and reads its content. Explain how passing the path by value affects the outcome.",
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filePath) {\n    const content = fs.readFileSync(filePath, 'utf-8');\n    return content;\n}\n\n// Example usage\nconst fileContent = readFileContent('example.txt');\nconsole.log(fileContent);\n```"
  },
  {
    "task": "Write a program in which a function takes a stack and reverses its elements. Discuss the impact of pass-by-reference on the stack.",
    "code": "```javascript\nfunction reverseStack(stack) {\n  const tempStack = [];\n  while (stack.length > 0) {\n    tempStack.push(stack.pop());\n  }\n  while (tempStack.length > 0) {\n    stack.push(tempStack.pop());\n  }\n}\n\n// Example usage:\nconst originalStack = [1, 2, 3, 4, 5];\nreverseStack(originalStack);\nconsole.log(originalStack); // Output: [5, 4, 3, 2, 1]\n```"
  },
  {
    "task": "Create a function that takes a queue and dequeues an element. Show the result when the queue is passed by reference.",
    "code": "```javascript\nfunction dequeueElement(queue) {\n    if (queue.length === 0) {\n        return null;\n    }\n    return queue.shift();\n}\n\n// Example of passing a queue by reference\nlet myQueue = [1, 2, 3, 4, 5];\nlet dequeuedElement = dequeueElement(myQueue);\n\nconsole.log('Dequeued Element:', dequeuedElement);\nconsole.log('Queue after dequeue:', myQueue);\n```"
  },
  {
    "task": "Develop a function that accepts a hashmap and updates a value for a specific key. Illustrate the effects of pass-by-reference.",
    "code": "```javascript\nfunction updateHashMap(map, key, newValue) {\n    if (map.hasOwnProperty(key)) {\n        map[key] = newValue;\n    }\n}\n\nconst myMap = { a: 1, b: 2, c: 3 };\nconsole.log('Before update:', myMap);\n\nupdateHashMap(myMap, 'b', 42);\nconsole.log('After update:', myMap);\n```"
  },
  {
    "task": "Design a function that receives a JSON object and adds a new property. Discuss the implications of modifying the object by reference.",
    "code": "```javascript\nfunction addProperty(obj, key, value) {\n    obj[key] = value;\n}\n\n// Example usage\nconst person = { name: \"Alice\", age: 30 };\naddProperty(person, \"email\", \"alice@example.com\");\nconsole.log(person); // { name: \"Alice\", age: 30, email: \"alice@example.com\" }\n```"
  },
  {
    "task": "Write a program where a function accepts a graph and adds a node. Explain how pass-by-reference affects the original graph structure.",
    "code": "```javascript\nfunction addNode(graph, node) {\n    graph.nodes.push(node);\n}\n\n// Example usage:\nlet graph = {\n    nodes: ['A', 'B', 'C'],\n    edges: [['A', 'B'], ['B', 'C']]\n};\n\naddNode(graph, 'D');\nconsole.log(graph);\n```"
  },
  {
    "task": "Create a function that accepts a set of coordinates and shifts them. Demonstrate how pass-by-value ensures the original set is unchanged.",
    "code": "```javascript\nfunction shiftCoordinates(coords, dx, dy) {\n    return { x: coords.x + dx, y: coords.y + dy };\n}\n\nconst originalCoords = { x: 5, y: 10 };\nconst shiftedCoords = shiftCoordinates(originalCoords, 3, -2);\n\nconsole.log('Original:', originalCoords); // { x: 5, y: 10 }\nconsole.log('Shifted:', shiftedCoords);  // { x: 8, y: 8 }\n```"
  },
  {
    "task": "Implement a function that takes a date object and sets it to the next day. Discuss the effects of pass-by-reference on the date object.",
    "code": "```javascript\nfunction setToNextDay(date) {\n  date.setDate(date.getDate() + 1);\n}\n\nlet myDate = new Date(2023, 9, 14); // October 14, 2023\nsetToNextDay(myDate);\nconsole.log(myDate);\n```"
  },
  {
    "task": "Develop a function that receives a polynomial represented as a list of coefficients and differentiates it. Show how the original list remains unchanged with pass-by-value.",
    "code": "```javascript\nfunction differentiatePolynomial(coefficients) {\n    const differentiated = coefficients.map((coef, index) => coef * index).slice(1);\n    return differentiated;\n}\n\nconst originalCoefficients = [3, 2, 5, 0]; // Represents 3 + 2x + 5x^2\nconst differentiatedCoefficients = differentiatePolynomial(originalCoefficients);\n\nconsole.log(\"Original Coefficients:\", originalCoefficients);\nconsole.log(\"Differentiated Coefficients:\", differentiatedCoefficients);\n```"
  },
  {
    "task": "Design a function that accepts a stack and clears it. Explain how pass-by-reference affects the original stack.",
    "code": "```javascript\nfunction clearStack(stack) {\n    while (stack.length > 0) {\n        stack.pop();\n    }\n}\n\n// Example usage\nlet myStack = [1, 2, 3, 4, 5];\nclearStack(myStack);\nconsole.log(myStack); // Output will be []\n```"
  },
  {
    "task": "Write a function that takes a linked list and appends a new node. Demonstrate the impact of pass-by-reference on the list.",
    "code": "```javascript\nclass Node {\n    constructor(value) {\n        this.value = value;\n        this.next = null;\n    }\n}\n\nclass LinkedList {\n    constructor() {\n        this.head = null;\n    }\n\n    append(value) {\n        const newNode = new Node(value);\n        if (this.head === null) {\n            this.head = newNode;\n        } else {\n            let current = this.head;\n            while (current.next !== null) {\n                current = current.next;\n            }\n            current.next = newNode;\n        }\n    }\n}\n\nfunction appendNode(linkedList, value) {\n    linkedList.append(value);\n}\n\nconst list = new LinkedList();\nlist.append(1);\nlist.append(2);\n\nconsole.log(JSON.stringify(list)); // Before appending new node\n\nappendNode(list, 3);\n\nconsole.log(JSON.stringify(list)); // After appending new node\n```"
  },
  {
    "task": "Create a function that receives a URL and extracts the domain name. Discuss the effects of pass-by-value on the URL string.",
    "code": "```javascript\nfunction extractDomain(url) {\n    const urlObject = new URL(url);\n    return urlObject.hostname;\n}\n\nconst url = \"https://www.example.com/page\";\nconst domainName = extractDomain(url);\nconsole.log(domainName);\n```"
  },
  {
    "task": "Implement a function that takes a priority queue and changes the priority of an element. Illustrate the effects using pass-by-reference.",
    "code": "```javascript\nclass PriorityQueue {\n    constructor() {\n        this.queue = [];\n    }\n\n    enqueue(element, priority) {\n        this.queue.push({ element, priority });\n        this.queue.sort((a, b) => a.priority - b.priority);\n    }\n\n    changePriority(element, newPriority) {\n        for (let item of this.queue) {\n            if (item.element === element) {\n                item.priority = newPriority;\n                this.queue.sort((a, b) => a.priority - b.priority);\n                break;\n            }\n        }\n    }\n\n    printQueue() {\n        console.log(this.queue.map(item => `${item.element}:${item.priority}`).join(' '));\n    }\n}\n\nfunction changeElementPriority(priorityQueue, element, newPriority) {\n    priorityQueue.changePriority(element, newPriority);\n}\n\nconst pq = new PriorityQueue();\npq.enqueue('task1', 1);\npq.enqueue('task2', 3);\npq.enqueue('task3', 2);\n\nconsole.log(\"Before change:\");\npq.printQueue();\n\nchangeElementPriority(pq, 'task3', 0);\n\nconsole.log(\"After change:\");\npq.printQueue();\n```"
  },
  {
    "task": "Develop a function that accepts a circular buffer and reads an element. Explain how pass-by-reference influences the buffer.",
    "code": "```javascript\nclass CircularBuffer {\n    constructor(size) {\n        this.buffer = new Array(size);\n        this.size = size;\n        this.start = 0;\n        this.end = 0;\n        this.isFull = false;\n    }\n\n    add(element) {\n        this.buffer[this.end] = element;\n        this.end = (this.end + 1) % this.size;\n        if (this.isFull) {\n            this.start = (this.start + 1) % this.size;\n        }\n        this.isFull = this.end === this.start;\n    }\n\n    read() {\n        if (this.start === this.end && !this.isFull) {\n            throw new Error(\"Buffer is empty\");\n        }\n        const element = this.buffer[this.start];\n        this.start = (this.start + 1) % this.size;\n        this.isFull = false;\n        return element;\n    }\n}\n\nfunction readElementFromBuffer(buffer) {\n    return buffer.read();\n}\n\n// Example Usage\nconst buffer = new CircularBuffer(3);\nbuffer.add(1);\nbuffer.add(2);\nconsole.log(readElementFromBuffer(buffer)); // Outputs: 1\nbuffer.add(3);\nbuffer.add(4);\nconsole.log(readElementFromBuffer(buffer)); // Outputs: 2\n```"
  },
  {
    "task": "Design a program where a function receives a record and updates a field. Show how pass-by-reference affects the original record.",
    "code": "```javascript\nfunction updateRecordField(record) {\n    record.field = \"Updated Value\";\n}\n\nlet originalRecord = { field: \"Original Value\" };\n\nconsole.log(\"Before update:\", originalRecord.field);\n\nupdateRecordField(originalRecord);\n\nconsole.log(\"After update:\", originalRecord.field);\n```"
  },
  {
    "task": "Write a function that takes a frequency list and normalizes it. Describe how pass-by-value ensures the original list remains unchanged.",
    "code": "```javascript\nfunction normalizeFrequencyList(frequencyList) {\n    const total = frequencyList.reduce((sum, freq) => sum + freq, 0);\n    return frequencyList.map(freq => freq / total);\n}\n\nconst originalList = [10, 20, 30];\nconst normalizedList = normalizeFrequencyList(originalList);\n\nconsole.log('Original List:', originalList);\nconsole.log('Normalized List:', normalizedList);\n```"
  },
  {
    "task": "Create a function that accepts a chessboard and makes a move. Discuss how pass-by-reference alters the original board setup.",
    "code": "```javascript\nfunction makeMove(chessboard, move) {\n    const [start, end] = move;\n    chessboard[end[0]][end[1]] = chessboard[start[0]][start[1]];\n    chessboard[start[0]][start[1]] = null;\n}\n\nconst chessboard = [\n    ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R'],\n    ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'],\n    [null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null],\n    ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'],\n    ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r']\n];\n\nmakeMove(chessboard, [[1, 0], [3, 0]]);\nconsole.log(chessboard);\n```"
  },
  {
    "task": "Implement a function that takes a decimal number and converts it to binary. Explain the effects of pass-by-value on the original number.",
    "code": "```javascript\nfunction decimalToBinary(decimalNumber) {\n    let binary = '';\n    while (decimalNumber > 0) {\n        binary = (decimalNumber % 2) + binary;\n        decimalNumber = Math.floor(decimalNumber / 2);\n    }\n    return binary || '0';\n}\n\n// Example usage:\nconst originalNumber = 10;\nconst binaryRepresentation = decimalToBinary(originalNumber);\nconsole.log(`Original Number: ${originalNumber}`); // Pass-by-value means originalNumber is unchanged\nconsole.log(`Binary Representation: ${binaryRepresentation}`);\n```"
  },
  {
    "task": "Develop a function that receives a DNA sequence and counts nucleotides. Illustrate how pass-by-value ensures the original sequence remains intact.",
    "code": "```javascript\nfunction countNucleotides(dnaSequence) {\n    let counts = { A: 0, T: 0, C: 0, G: 0 };\n    for (let nucleotide of dnaSequence) {\n        if (counts.hasOwnProperty(nucleotide)) {\n            counts[nucleotide]++;\n        }\n    }\n    return counts;\n}\n\nlet originalSequence = \"ATCGATTGAGCTCTAGCG\";\nlet nucleotideCounts = countNucleotides(originalSequence);\n\nconsole.log(\"Original Sequence: \" + originalSequence);\nconsole.log(\"Nucleotide Counts: \", nucleotideCounts);\n```"
  },
  {
    "task": "Design a function that accepts a shopping cart object and applies a discount. Show the changes with pass-by-reference.",
    "code": "```javascript\nfunction applyDiscount(cart, discountRate) {\n  for (let item of cart.items) {\n    item.price = item.price - (item.price * discountRate);\n  }\n}\n\nconst shoppingCart = {\n  items: [\n    { name: 'Apple', price: 1.00 },\n    { name: 'Banana', price: 0.50 }\n  ]\n};\n\napplyDiscount(shoppingCart, 0.1);\nconsole.log(shoppingCart);\n```"
  },
  {
    "task": "Write a program where a function receives a playlist and adds a song. Discuss how pass-by-reference affects the original playlist.",
    "code": "```javascript\nfunction addSongToPlaylist(playlist, song) {\n    playlist.push(song);\n}\n\nlet myPlaylist = ['Song1', 'Song2', 'Song3'];\naddSongToPlaylist(myPlaylist, 'New Song');\n\nconsole.log(myPlaylist);\n```"
  },
  {
    "task": "Create a function that takes a sprite in a game and moves it. Demonstrate the result when the sprite is passed by reference.",
    "code": "```javascript\nfunction moveSprite(sprite, deltaX, deltaY) {\n    sprite.x += deltaX;\n    sprite.y += deltaY;\n}\n\n// Example of a sprite object\nlet mySprite = {\n    x: 10,\n    y: 20\n};\n\nconsole.log('Before moving:', mySprite);\n\n// Move the sprite by passing it to the function\nmoveSprite(mySprite, 5, -3);\n\nconsole.log('After moving:', mySprite);\n```"
  },
  {
    "task": "Implement a function that accepts a book object and updates the title. Illustrate the impact of pass-by-reference on the original object.",
    "code": "```javascript\nfunction updateBookTitle(book, newTitle) {\n    book.title = newTitle;\n}\n\nlet myBook = { title: 'Original Title', author: 'John Doe' };\nconsole.log('Before update:', myBook.title);\n\nupdateBookTitle(myBook, 'Updated Title');\nconsole.log('After update:', myBook.title);\n```"
  },
  {
    "task": "Develop a function that receives a sound wave and normalizes it. Explain how pass-by-value affects the original sound wave.",
    "code": "```javascript\nfunction normalizeSoundWave(soundWave) {\n    let maxAmplitude = Math.max(...soundWave);\n    return soundWave.map(amplitude => amplitude / maxAmplitude);\n}\n\nlet originalSoundWave = [0.5, 0.75, 1.0, 0.25];\nlet normalizedSoundWave = normalizeSoundWave(originalSoundWave);\n\nconsole.log(\"Original Sound Wave:\", originalSoundWave);\nconsole.log(\"Normalized Sound Wave:\", normalizedSoundWave);\n```"
  },
  {
    "task": "Design a program where a function receives a bank account object and credits an amount. Discuss the effects of pass-by-reference.",
    "code": "```javascript\nfunction creditAccount(account, amount) {\n    account.balance += amount;\n}\n\nlet bankAccount = {\n    accountNumber: '123456789',\n    balance: 1000\n};\n\ncreditAccount(bankAccount, 500);\nconsole.log(bankAccount.balance); // Outputs: 1500\n```"
  },
  {
    "task": "Write a function that takes an email list and filters out invalid addresses. Show the difference in the list when using pass-by-value.",
    "code": "```javascript\nfunction isValidEmail(email) {\n    const re = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return re.test(email);\n}\n\nfunction filterInvalidEmails(emailList) {\n    let validEmails = emailList.filter(isValidEmail);\n    return validEmails;\n}\n\nlet emails = ['test@example.com', 'invalid-email', 'user@domain.com'];\nlet filteredEmails = filterInvalidEmails(emails);\n\nconsole.log('Original list:', emails);\nconsole.log('Filtered list:', filteredEmails);\n```"
  },
  {
    "task": "Create a function that accepts a 3D model and scales it. Demonstrate how pass-by-reference affects the original model.",
    "code": "```javascript\nfunction scaleModel(model, scaleFactor) {\n    model.x *= scaleFactor;\n    model.y *= scaleFactor;\n    model.z *= scaleFactor;\n}\n\n// Example usage\nlet myModel = { x: 1, y: 2, z: 3 };\nconsole.log('Before scaling:', myModel);\n\nscaleModel(myModel, 2);\nconsole.log('After scaling:', myModel);\n```"
  },
  {
    "task": "Implement a function that receives a text document and redacts sensitive information. Explain the impact of pass-by-reference.",
    "code": "```javascript\nfunction redactSensitiveInformation(document) {\n    const sensitiveWords = [\"password\", \"ssn\", \"credit card\"];\n    sensitiveWords.forEach(word => {\n        const regex = new RegExp(`\\\\b${word}\\\\b`, 'gi');\n        document = document.replace(regex, \"[REDACTED]\");\n    });\n    return document;\n}\n\n// Example usage:\nlet textDocument = \"The user's password is '1234'. His ssn is 987-65-4321.\";\nlet redactedDocument = redactSensitiveInformation(textDocument);\n\nconsole.log(\"Original Document:\", textDocument);\nconsole.log(\"Redacted Document:\", redactedDocument);\n```"
  },
  {
    "task": "Develop a function that takes a temperature reading and adjusts for calibration. Discuss how pass-by-value ensures the original reading is unchanged.",
    "code": "```javascript\nfunction adjustTemperature(tempReading, calibrationOffset) {\n    return tempReading + calibrationOffset;\n}\n\n// Example Usage\nconst originalReading = 25; // Original temperature reading\nconst calibrationOffset = 2; // Calibration offset\n\nconst adjustedReading = adjustTemperature(originalReading, calibrationOffset);\n\nconsole.log(\"Original Reading:\", originalReading); // Output: Original Reading: 25\nconsole.log(\"Adjusted Reading:\", adjustedReading); // Output: Adjusted Reading: 27\n```"
  },
  {
    "task": "Design a function that accepts a bug report and updates its status. Show the changes with pass-by-reference.",
    "code": "```javascript\nfunction updateBugStatus(bugReport) {\n    bugReport.status = 'updated';\n}\n\n// Example usage:\nconst bugReport = { id: 1, description: 'Sample bug', status: 'new' };\nupdateBugStatus(bugReport);\nconsole.log(bugReport); // { id: 1, description: 'Sample bug', status: 'updated' }\n```"
  },
  {
    "task": "Write a program where a function receives a sensor array and calibrates it. Demonstrate the effect of pass-by-reference on the array.",
    "code": "```javascript\nfunction calibrateSensorArray(sensorArray) {\n    for (let i = 0; i < sensorArray.length; i++) {\n        sensorArray[i] += 10; // Calibrate each sensor value by adding 10\n    }\n}\n\nlet sensors = [20, 30, 40, 50];\nconsole.log(\"Before calibration:\", sensors);\n\ncalibrateSensorArray(sensors);\nconsole.log(\"After calibration:\", sensors);\n```"
  },
  {
    "task": "Create a function that takes a vector and rotates it. Explain how pass-by-value ensures the original vector remains unchanged.",
    "code": "```javascript\nfunction rotateVector(vector, angle) {\n    const radians = (Math.PI / 180) * angle;\n    const cos = Math.cos(radians);\n    const sin = Math.sin(radians);\n    return {\n        x: vector.x * cos - vector.y * sin,\n        y: vector.x * sin + vector.y * cos\n    };\n}\n\n// Example usage:\nconst originalVector = { x: 1, y: 0 };\nconst rotatedVector = rotateVector(originalVector, 90);\n\nconsole.log('Original Vector:', originalVector);\nconsole.log('Rotated Vector:', rotatedVector);\n```"
  },
  {
    "task": "Implement a function that accepts an operation log and compresses it. Discuss the impact of pass-by-reference on the log.",
    "code": "```javascript\nfunction compressLog(operationLog) {\n    for (let i = 0; i < operationLog.length - 1; i++) {\n        if (operationLog[i] === operationLog[i + 1]) {\n            operationLog.splice(i, 1);\n            i--;\n        }\n    }\n    return operationLog;\n}\n\nlet log = [\"start\", \"start\", \"process\", \"process\", \"end\", \"end\"];\ncompressLog(log);\n```"
  },
  {
    "task": "Develop a function that receives a neural network model and updates its weights. Illustrate the effects of pass-by-reference.",
    "code": "```javascript\nfunction updateWeights(model, learningRate) {\n    model.layers.forEach(layer => {\n        layer.weights = layer.weights.map(weight => weight - learningRate * Math.random());\n    });\n}\n\n// Example usage\nlet neuralNetworkModel = {\n    layers: [\n        { weights: [0.5, 0.2, 0.1] },\n        { weights: [0.3, 0.8, 0.5] }\n    ]\n};\n\nconsole.log(\"Before update:\", neuralNetworkModel);\nupdateWeights(neuralNetworkModel, 0.01);\nconsole.log(\"After update:\", neuralNetworkModel);\n```"
  },
  {
    "task": "Design a function that accepts a command history and reverts the last command. Show the changes with pass-by-reference.",
    "code": "```javascript\nfunction revertLastCommand(commandHistory) {\n    if (commandHistory.length > 0) {\n        commandHistory.pop();\n    }\n}\n\nconst commandHistory = ['command1', 'command2', 'command3'];\nrevertLastCommand(commandHistory);\n\nconsole.log(commandHistory); // Output will be: ['command1', 'command2']\n```"
  },
  {
    "task": "Write a function that takes a user profile and anonymizes it. Discuss how pass-by-reference affects the original profile.",
    "code": "```javascript\nfunction anonymizeProfile(profile) {\n    profile.name = \"Anonymous\";\n    profile.email = \"hidden@example.com\";\n    profile.phone = \"000-000-0000\";\n}\n\nlet userProfile = {\n    name: \"Jane Doe\",\n    email: \"jane.doe@example.com\",\n    phone: \"123-456-7890\"\n};\n\nanonymizeProfile(userProfile);\n\nconsole.log(userProfile);\n```"
  },
  {
    "task": "Create a function that accepts a polynomial and evaluates it at a given point. Explain how pass-by-value ensures the polynomial remains unchanged.",
    "code": "```javascript\nfunction evaluatePolynomial(coefficients, x) {\n    let result = 0;\n    for (let i = 0; i < coefficients.length; i++) {\n        result += coefficients[i] * Math.pow(x, i);\n    }\n    return result;\n}\n\nconst polynomial = [2, 3, 0, 5]; // Represents 2 + 3x + 0x^2 + 5x^3\nconst point = 2;\nconst evaluation = evaluatePolynomial(polynomial, point);\nconsole.log('Polynomial evaluated at', point, 'is', evaluation);\n```"
  },
  {
    "task": "Implement a function that receives a video stream and applies a filter. Demonstrate the effects of pass-by-reference on the stream.",
    "code": "```javascript\nfunction applyFilter(stream, filterFunction) {\n    for (let i = 0; i < stream.length; i++) {\n        stream[i] = filterFunction(stream[i]);\n    }\n}\n\nfunction sampleFilter(frame) {\n    // Example filter: invert colors\n    return frame.map(pixel => 255 - pixel);\n}\n\nlet videoStream = [\n    [100, 150, 200], // Example frame 1\n    [50, 75, 125],  // Example frame 2\n    // More frames...\n];\n\nconsole.log(\"Before filter:\", videoStream);\napplyFilter(videoStream, sampleFilter);\nconsole.log(\"After filter:\", videoStream);\n```"
  },
  {
    "task": "Develop a function that takes a task queue and reorders tasks based on priority. Illustrate the impact of pass-by-reference.",
    "code": "```javascript\nfunction reorderTasksByPriority(taskQueue) {\n    taskQueue.sort((a, b) => b.priority - a.priority);\n}\n\nlet tasks = [\n    { name: 'Task 1', priority: 2 },\n    { name: 'Task 2', priority: 1 },\n    { name: 'Task 3', priority: 3 }\n];\n\nconsole.log('Before reordering:', tasks);\n\nreorderTasksByPriority(tasks);\n\nconsole.log('After reordering:', tasks);\n```"
  },
  {
    "task": "Design a program where a function receives a blockchain and verifies a transaction. Discuss how pass-by-reference affects the blockchain.",
    "code": "```javascript\nfunction verifyTransaction(blockchain, transactionId) {\n    for (let block of blockchain) {\n        for (let transaction of block.transactions) {\n            if (transaction.id === transactionId) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\n// Example usage\nlet blockchain = [\n    {\n        transactions: [\n            { id: 'tx1', data: 'Alice pays Bob 5 BTC' },\n            { id: 'tx2', data: 'Bob pays Charlie 3 BTC' }\n        ]\n    },\n    {\n        transactions: [\n            { id: 'tx3', data: 'Charlie pays Dave 2 BTC' },\n            { id: 'tx4', data: 'Dave pays Eve 1 BTC' }\n        ]\n    }\n];\n\nlet transactionId = 'tx3';\nlet result = verifyTransaction(blockchain, transactionId);\nconsole.log(`Transaction ${transactionId} verified: ${result}`);\n```"
  },
  {
    "task": "Write a function that takes a game leaderboard and updates scores. Show the changes with pass-by-reference.",
    "code": "```javascript\nfunction updateScores(leaderboard, updates) {\n    updates.forEach(update => {\n        const player = leaderboard.find(player => player.name === update.name);\n        if (player) {\n            player.score += update.score;\n        }\n    });\n}\n\n// Example usage:\nconst leaderboard = [\n    { name: 'Alice', score: 50 },\n    { name: 'Bob', score: 40 }\n];\n\nconst scoreUpdates = [\n    { name: 'Alice', score: 10 },\n    { name: 'Bob', score: 20 }\n];\n\nupdateScores(leaderboard, scoreUpdates);\n\nconsole.log(leaderboard);\n```"
  },
  {
    "task": "Create a function that accepts a project timeline and adjusts for delays. Explain how pass-by-reference influences the timeline.",
    "code": "```javascript\nfunction adjustTimeline(timeline, delay) {\n    for (let i = 0; i < timeline.length; i++) {\n        timeline[i] += delay;\n    }\n}\n\nlet projectTimeline = [1, 2, 3, 4, 5];\nadjustTimeline(projectTimeline, 2);\n\nconsole.log(projectTimeline);\n```"
  },
  {
    "task": "Implement a function that receives a to-do list and completes a task. Demonstrate the effect of pass-by-reference on the list.",
    "code": "```javascript\nfunction completeTask(todoList, taskIndex) {\n    if (taskIndex >= 0 && taskIndex < todoList.length) {\n        todoList[taskIndex].completed = true;\n    }\n}\n\n// Demonstration\nlet todos = [\n    { task: 'Buy groceries', completed: false },\n    { task: 'Wash the car', completed: false },\n    { task: 'Pay bills', completed: false }\n];\n\nconsole.log('Before:', todos);\ncompleteTask(todos, 1);\nconsole.log('After:', todos);\n```"
  },
  {
    "task": "Develop a function that takes a paint canvas and adds a layer. Discuss the impact of pass-by-reference on the canvas.",
    "code": "```javascript\nfunction addLayerToCanvas(canvas) {\n    const layer = document.createElement('canvas');\n    layer.width = canvas.width;\n    layer.height = canvas.height;\n    const context = layer.getContext('2d');\n    \n    // Example impact: Modifying the original canvas\n    context.fillStyle = 'rgba(255, 255, 255, 0.5)';\n    context.fillRect(0, 0, layer.width, layer.height);\n    \n    canvas.getContext('2d').drawImage(layer, 0, 0);\n}\n\nconst canvasElement = document.getElementById('myCanvas');\naddLayerToCanvas(canvasElement);\n```"
  },
  {
    "task": "Design a function that accepts a URL list and fetches content. Show the difference in the list when using pass-by-value.",
    "code": "```javascript\nfunction fetchURLs(urls) {\n    let urlListCopy = [...urls];\n    \n    urlListCopy.forEach(url => {\n        fetch(url)\n            .then(response => response.text())\n            .then(data => {\n                console.log(`Fetched data from: ${url}`);\n            })\n            .catch(error => {\n                console.log(`Error fetching data from: ${url}`, error);\n            });\n    });\n\n    // Modify the copy to demonstrate pass-by-value effect\n    urlListCopy.push(\"https://new-url.com\");\n    console.log(\"Original List:\", urls);\n    console.log(\"Modified Copy:\", urlListCopy);\n}\n\nconst urls = [\"https://example1.com\", \"https://example2.com\"];\nfetchURLs(urls);\n```"
  },
  {
    "task": "Write a program where a function receives a game board and resets it. Illustrate the effects of pass-by-reference.",
    "code": "```javascript\nfunction resetBoard(board) {\n    for (let i = 0; i < board.length; i++) {\n        for (let j = 0; j < board[i].length; j++) {\n            board[i][j] = 0;\n        }\n    }\n}\n\nlet gameBoard = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\n\nconsole.log(\"Before reset:\", gameBoard);\nresetBoard(gameBoard);\nconsole.log(\"After reset:\", gameBoard);\n```"
  },
  {
    "task": "Create a function that takes a sound effect and increases its volume. Explain how pass-by-reference affects the original sound.",
    "code": "```javascript\nfunction increaseVolume(soundEffect) {\n    for (let i = 0; i < soundEffect.length; i++) {\n        soundEffect[i] *= 1.1; // Increase each sound sample by 10%\n    }\n}\n\nlet originalSoundEffect = [0.5, 0.6, 0.7, 0.8];\nincreaseVolume(originalSoundEffect);\nconsole.log(originalSoundEffect); // The original sound effect is modified due to pass-by-reference\n```"
  },
  {
    "task": "Implement a function that accepts a weather forecast and updates temperature predictions. Discuss the impact of pass-by-reference.",
    "code": "```javascript\nfunction updateTemperaturePredictions(forecast) {\n    // Simulating temperature update\n    forecast.temperature += 5;\n}\n\nconst weatherForecast = {\n    temperature: 20,\n    condition: 'Sunny'\n};\n\nupdateTemperaturePredictions(weatherForecast);\nconsole.log(weatherForecast.temperature); // Outputs: 25\n```"
  },
  {
    "task": "Develop a function that receives a system log and extracts error messages. Show how pass-by-value ensures the original log remains unchanged.",
    "code": "```javascript\nfunction extractErrorMessages(log) {\n    // Create a copy of the log to ensure the original remains unchanged\n    const logCopy = [...log];\n    \n    // Filter out error messages from the log copy\n    const errorMessages = logCopy.filter(entry => entry.type === 'error');\n    \n    return errorMessages;\n}\n\n// Example system log\nconst systemLog = [\n    { type: 'info', message: 'System boot successful.' },\n    { type: 'error', message: 'Failed to connect to the database.' },\n    { type: 'warning', message: 'Low memory warning.' },\n    { type: 'error', message: 'Error reading configuration file.' }\n];\n\n// Extract error messages\nconst errors = extractErrorMessages(systemLog);\n\n// Output the extracted error messages and the original log\nconsole.log('Extracted Error Messages:', errors);\nconsole.log('Original Log:', systemLog);\n```"
  },
  {
    "task": "Design a function that accepts a data packet and encrypts it. Demonstrate the effect of pass-by-value on the packet.",
    "code": "```javascript\nfunction encryptPacket(packet) {\n    packet = { ...packet }; // Simulate pass-by-value by creating a shallow copy\n    packet.data = packet.data.split('').reverse().join(''); // Simple encryption by reversing the data\n    return packet;\n}\n\nconst originalPacket = { data: \"This is a test packet\" };\nconst encryptedPacket = encryptPacket(originalPacket);\n\nconsole.log(\"Original Packet:\", originalPacket);\nconsole.log(\"Encrypted Packet:\", encryptedPacket);\n```"
  },
  {
    "task": "Write a function that takes a website theme and applies a color change. Explain how pass-by-reference affects the original theme.",
    "code": "```javascript\nfunction applyColorChange(theme) {\n    theme.color = 'blue'; // Change the theme color to blue\n}\n\nconst myTheme = {\n    color: 'red',\n    font: 'Arial'\n};\n\napplyColorChange(myTheme);\n\nconsole.log(myTheme); // { color: 'blue', font: 'Arial' }\n```"
  },
  {
    "task": "Create a function that accepts a digital signature and verifies it. Discuss the implications of pass-by-value on the signature.",
    "code": "```javascript\nfunction verifySignature(digitalSignature) {\n    // Placeholder for the actual verification logic\n    // For demonstration, assume the signature is always verified\n    const isValid = true;\n    return isValid;\n}\n\nconst signature = \"exampleSignature\";\nconst result = verifySignature(signature);\nconsole.log(\"Signature verification result:\", result);\n```"
  },
  {
    "task": "Implement a function that receives a robot's path and optimizes it. Illustrate the effects of pass-by-reference on the path.",
    "code": "```javascript\nfunction optimizePath(path) {\n    // Modify the path to optimize it\n    for (let i = 0; i < path.length - 1; i++) {\n        if (path[i] === 'N' && path[i + 1] === 'S' || \n            path[i] === 'S' && path[i + 1] === 'N' || \n            path[i] === 'E' && path[i + 1] === 'W' || \n            path[i] === 'W' && path[i + 1] === 'E') {\n            path.splice(i, 2);\n            i = Math.max(-1, i - 2); // Re-evaluate the previous step after removal\n        }\n    }\n}\n\nlet robotPath = ['N', 'S', 'E', 'W', 'N', 'E'];\noptimizePath(robotPath);\nconsole.log(robotPath);\n```"
  },
  {
    "task": "Develop a function that takes a music playlist and shuffles it. Demonstrate the impact of pass-by-reference on the playlist.",
    "code": "```javascript\nfunction shufflePlaylist(playlist) {\n    for (let i = playlist.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [playlist[i], playlist[j]] = [playlist[j], playlist[i]];\n    }\n}\n\nconst myPlaylist = ['Song1', 'Song2', 'Song3', 'Song4', 'Song5'];\nconsole.log('Original Playlist:', myPlaylist);\n\nshufflePlaylist(myPlaylist);\nconsole.log('Shuffled Playlist:', myPlaylist);\n```"
  },
  {
    "task": "Design a program where a function receives a social media feed and removes duplicates. Show the changes with pass-by-reference.",
    "code": "```javascript\nfunction removeDuplicates(feed) {\n    let seen = new Set();\n    for (let i = 0; i < feed.length; i++) {\n        if (seen.has(feed[i])) {\n            feed.splice(i, 1);\n            i--; // Adjust index after removal\n        } else {\n            seen.add(feed[i]);\n        }\n    }\n}\n\nlet socialMediaFeed = [\"post1\", \"post2\", \"post1\", \"post3\", \"post2\"];\nremoveDuplicates(socialMediaFeed);\nconsole.log(socialMediaFeed);\n```"
  },
  {
    "task": "Write a function that takes a coding challenge and adds test cases. Discuss the effects of pass-by-reference on the challenge.",
    "code": "```javascript\nfunction addTestCases(challenge) {\n    // Pass-by-reference allows us to modify the original challenge object directly\n    challenge.testCases = [\n        { input: [1, 2, 3], expectedOutput: 6 },\n        { input: [4, 5, 6], expectedOutput: 15 },\n        { input: [-1, -2, -3], expectedOutput: -6 }\n    ];\n}\n\n// Example usage\nlet codingChallenge = {\n    description: \"Sum an array of numbers\",\n    solution: function(arr) {\n        return arr.reduce((a, b) => a + b, 0);\n    }\n};\n\naddTestCases(codingChallenge);\n\nconsole.log(codingChallenge);\n```"
  },
  {
    "task": "Create a function that accepts an animation sequence and reverses it. Explain how pass-by-value ensures the sequence remains unchanged.",
    "code": "```javascript\nfunction reverseAnimationSequence(sequence) {\n    // Clone the original sequence to ensure the original is not modified\n    let clonedSequence = [...sequence];\n    return clonedSequence.reverse();\n}\n\n// Example usage:\nconst animationSequence = ['frame1', 'frame2', 'frame3'];\nconst reversedSequence = reverseAnimationSequence(animationSequence);\n\nconsole.log('Original:', animationSequence);  // Output: Original: ['frame1', 'frame2', 'frame3']\nconsole.log('Reversed:', reversedSequence);  // Output: Reversed: ['frame3', 'frame2', 'frame1']\n```"
  },
  {
    "task": "Implement a function that receives a GPS route and recalculates it. Illustrate the impact of pass-by-reference on the route.",
    "code": "```javascript\nfunction recalculateRoute(route) {\n    // Modify the route directly to illustrate pass-by-reference\n    if (route.length > 0) {\n        route[0] = { latitude: 0, longitude: 0 };  // Change the first waypoint\n    }\n}\n\nlet gpsRoute = [\n    { latitude: 34.0522, longitude: -118.2437 },\n    { latitude: 36.1699, longitude: -115.1398 }\n];\n\nconsole.log('Before recalculation:', gpsRoute);\nrecalculateRoute(gpsRoute);\nconsole.log('After recalculation:', gpsRoute);\n```"
  },
  {
    "task": "Develop a function that takes a chat history and censors inappropriate language. Show the effect of pass-by-reference on the history.",
    "code": "```javascript\nfunction censorChatHistory(chatHistory) {\n    const inappropriateWords = ['badword1', 'badword2'];\n    for (let i = 0; i < chatHistory.length; i++) {\n        for (const word of inappropriateWords) {\n            const regex = new RegExp(`\\\\b${word}\\\\b`, 'gi');\n            chatHistory[i] = chatHistory[i].replace(regex, '****');\n        }\n    }\n}\n\n// Example usage:\nconst chatHistory = [\n    \"This is a badword1 message.\",\n    \"Another clean message.\",\n    \"Here is a badword2 in the text.\"\n];\n\ncensorChatHistory(chatHistory);\nconsole.log(chatHistory);\n```"
  },
  {
    "task": "Design a function that accepts a lighting setup and adjusts brightness. Discuss the changes when the setup is passed by reference.",
    "code": "```javascript\nfunction adjustBrightness(lightingSetup, newBrightness) {\n    lightingSetup.brightness = newBrightness;\n}\n\nlet lightingSetup = { brightness: 50 };\nconsole.log('Before adjustment:', lightingSetup.brightness);\n\nadjustBrightness(lightingSetup, 75);\nconsole.log('After adjustment:', lightingSetup.brightness);\n```"
  },
  {
    "task": "Write a program where a function receives a VR environment and changes the scenery. Demonstrate the effects of pass-by-reference.",
    "code": "```javascript\nfunction changeScenery(vrEnvironment) {\n    vrEnvironment.scenery = 'Beach';\n}\n\nconst vrEnvironment = {\n    scenery: 'Mountains'\n};\n\nconsole.log('Before change:', vrEnvironment.scenery); // Output: Mountains\nchangeScenery(vrEnvironment);\nconsole.log('After change:', vrEnvironment.scenery); // Output: Beach\n```"
  },
  {
    "task": "Create a function that takes a blockchain ledger and adds a block. Explain how pass-by-reference affects the ledger.",
    "code": "```javascript\nfunction addBlockToLedger(ledger, block) {\n    ledger.push(block);\n    // The ledger is modified directly because objects and arrays in JavaScript are passed by reference.\n}\n\n// Example usage:\nconst ledger = [\n    { index: 0, data: \"Genesis Block\" }\n];\n\nconst newBlock = { index: 1, data: \"New Block Data\" };\n\naddBlockToLedger(ledger, newBlock);\n\nconsole.log(ledger);\n```"
  },
  {
    "task": "Implement a function that accepts a network packet and alters its headers. Discuss the implications of pass-by-value on the packet.",
    "code": "```javascript\nfunction alterPacketHeaders(packet) {\n    packet.headers['Content-Type'] = 'application/json';\n    packet.headers['Authorization'] = 'Bearer token';\n    return packet;\n}\n\nlet networkPacket = {\n    headers: {\n        'Content-Type': 'text/plain',\n        'Authorization': 'None'\n    },\n    body: 'Sample data'\n};\n\nlet updatedPacket = alterPacketHeaders(networkPacket);\nconsole.log(updatedPacket);\nconsole.log(networkPacket);\n```"
  }
]