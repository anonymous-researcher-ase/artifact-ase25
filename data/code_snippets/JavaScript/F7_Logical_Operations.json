[
  {
    "task": "Create a function that takes two boolean inputs and returns true if both are true using logical AND.",
    "code": "```javascript\nfunction bothAreTrue(input1, input2) {\n    return input1 && input2;\n}\n```"
  },
  {
    "task": "Write a script to check if either of two given conditions are met using logical OR.",
    "code": "```javascript\nfunction checkConditions(condition1, condition2) {\n    return condition1 || condition2;\n}\n\n// Example usage:\nlet result = checkConditions(true, false);\nconsole.log(result); // Output: true\n```"
  },
  {
    "task": "Develop a program that negates a boolean variable using logical NOT.",
    "code": "```javascript\nlet booleanVar = true;\nbooleanVar = !booleanVar;\n```"
  },
  {
    "task": "Implement a feature that determines if a number is within a specific range using logical operators.",
    "code": "```javascript\nfunction isWithinRange(number, min, max) {\n    return number >= min && number <= max;\n}\n\n// Example usage:\nconsole.log(isWithinRange(5, 1, 10)); // true\nconsole.log(isWithinRange(15, 1, 10)); // false\n```"
  },
  {
    "task": "Design a system that checks if a user has both read and write permissions using logical AND.",
    "code": "```javascript\nfunction hasReadAndWritePermissions(userPermissions) {\n    const hasReadPermission = userPermissions.includes('read');\n    const hasWritePermission = userPermissions.includes('write');\n    return hasReadPermission && hasWritePermission;\n}\n\n// Example usage:\nconst userPermissions = ['read', 'write'];\nconsole.log(hasReadAndWritePermissions(userPermissions)); // Output: true\n```"
  },
  {
    "task": "Write a function to verify if a string is neither empty nor null using logical NOT.",
    "code": "```javascript\nfunction isStringValid(str) {\n  return !!str;\n}\n```"
  },
  {
    "task": "Create a conditional statement that executes a block of code if either of two expressions are true using logical OR.",
    "code": "```javascript\nlet expression1 = true; // example expression\nlet expression2 = false; // example expression\n\nif (expression1 || expression2) {\n    console.log(\"At least one of the expressions is true.\");\n}\n```"
  },
  {
    "task": "Build a program that inverts the truth value of a given condition using logical NOT.",
    "code": "```javascript\nfunction invertTruth(value) {\n    return !value;\n}\n\nlet originalValue = true;\nlet invertedValue = invertTruth(originalValue);\n\nconsole.log(`Original: ${originalValue}, Inverted: ${invertedValue}`);\n```"
  },
  {
    "task": "Compose a function to return true if a list is not empty using logical NOT.",
    "code": "```javascript\nfunction isListNotEmpty(list) {\n    return !!list.length;\n}\n```"
  },
  {
    "task": "Develop a filter that selects items from a collection only if they meet multiple criteria using logical AND.",
    "code": "```javascript\nfunction filterItems(collection, criteria) {\n    return collection.filter(item => {\n        return criteria.every(criterion => criterion(item));\n    });\n}\n\n// Example usage:\nconst items = [\n    { name: 'Item 1', price: 10, inStock: true },\n    { name: 'Item 2', price: 20, inStock: false },\n    { name: 'Item 3', price: 30, inStock: true }\n];\n\nconst criteria = [\n    item => item.price > 15,\n    item => item.inStock === true\n];\n\nconst filteredItems = filterItems(items, criteria);\nconsole.log(filteredItems);\n```"
  },
  {
    "task": "Write a script that checks if a value is outside a given range using logical OR.",
    "code": "```javascript\nfunction isOutsideRange(value, min, max) {\n    return value < min || value > max;\n}\n\n// Example usage:\nconst value = 10;\nconst min = 5;\nconst max = 15;\nconsole.log(isOutsideRange(value, min, max)); // Output: false\nconsole.log(isOutsideRange(20, min, max)); // Output: true\n```"
  },
  {
    "task": "Create a small program to toggle a boolean flag using logical NOT.",
    "code": "```javascript\nlet flag = true;\nflag = !flag;\nconsole.log(flag);\nflag = !flag;\nconsole.log(flag);\n```"
  },
  {
    "task": "Implement a feature that evaluates if a username is both unique and valid using logical AND.",
    "code": "```javascript\nfunction isUnique(username, existingUsernames) {\n    return !existingUsernames.includes(username);\n}\n\nfunction isValid(username) {\n    const validPattern = /^[a-zA-Z0-9_]{3,20}$/; // Example pattern: alphanumeric and underscores, 3-20 chars\n    return validPattern.test(username);\n}\n\nfunction isUniqueAndValid(username, existingUsernames) {\n    return isUnique(username, existingUsernames) && isValid(username);\n}\n\n// Example usage:\nconst existingUsernames = ['user1', 'test_user', 'example123'];\nconst newUsername = 'new_user';\n\nconsole.log(isUniqueAndValid(newUsername, existingUsernames)); // Outputs: true or false\n```"
  },
  {
    "task": "Design a conditional to perform an action if neither of two flags are set using logical NOT.",
    "code": "```javascript\nlet flag1 = false;\nlet flag2 = false;\n\nif (!flag1 && !flag2) {\n    // Perform the action here\n    console.log(\"Neither flag1 nor flag2 is set.\");\n}\n```"
  },
  {
    "task": "Write a function that returns true if at least one of multiple boolean inputs is true using logical OR.",
    "code": "```javascript\nfunction atLeastOneTrue(...args) {\n    return args.some(arg => arg === true);\n}\n```"
  },
  {
    "task": "Create a loop that continues executing as long as two conditions are both false using logical NOT and AND.",
    "code": "```javascript\nlet condition1 = false;\nlet condition2 = false;\n\nwhile (!condition1 && !condition2) {\n    // Loop body\n    // Update condition1 or condition2 to eventually break the loop\n}\n```"
  },
  {
    "task": "Develop a sequence that checks if a character is either a vowel or a consonant using logical OR.",
    "code": "```javascript\nfunction checkCharacterType(char) {\n    const vowels = 'aeiouAEIOU';\n    if (vowels.indexOf(char) !== -1) {\n        return 'Vowel';\n    } else if ((char >= 'a' && char <= 'z') || (char >= 'A' && char <= 'Z')) {\n        return 'Consonant';\n    } else {\n        return 'Not a letter';\n    }\n}\n\nconsole.log(checkCharacterType('a')); // Vowel\nconsole.log(checkCharacterType('b')); // Consonant\nconsole.log(checkCharacterType('1')); // Not a letter\n```"
  },
  {
    "task": "Implement a validation that ensures a password is both of minimum length and contains numbers using logical AND.",
    "code": "```javascript\nfunction isValidPassword(password) {\n    const minLength = 8;\n    const hasNumber = /\\d/;\n    return password.length >= minLength && hasNumber.test(password);\n}\n```"
  },
  {
    "task": "Compose a test to determine if a point is not within a circle using logical NOT.",
    "code": "```javascript\nfunction isPointOutsideCircle(x, y, circleCenterX, circleCenterY, radius) {\n    const distanceSquared = (x - circleCenterX) ** 2 + (y - circleCenterY) ** 2;\n    const radiusSquared = radius ** 2;\n    return !(distanceSquared < radiusSquared);\n}\n\n// Example usage:\nconst x = 5;\nconst y = 5;\nconst circleCenterX = 0;\nconst circleCenterY = 0;\nconst radius = 3;\n\nconsole.log(isPointOutsideCircle(x, y, circleCenterX, circleCenterY, radius)); // Output: true\n```"
  },
  {
    "task": "Write a function to decide if a user is either an admin or an editor using logical OR.",
    "code": "```javascript\nfunction isAdminOrEditor(user) {\n    return user.role === 'admin' || user.role === 'editor';\n}\n```"
  },
  {
    "task": "Create a conditional statement to trigger an alert if two sensors both detect motion using logical AND.",
    "code": "```javascript\nlet sensor1DetectedMotion = true; // Example value, replace with actual sensor reading\nlet sensor2DetectedMotion = true; // Example value, replace with actual sensor reading\n\nif (sensor1DetectedMotion && sensor2DetectedMotion) {\n    alert(\"Both sensors detect motion!\");\n}\n```"
  },
  {
    "task": "Design a program to validate an email format and ensure it contains a domain using logical AND.",
    "code": "```javascript\nfunction isValidEmail(email) {\n    const atSymbolIndex = email.indexOf('@');\n    const dotSymbolIndex = email.lastIndexOf('.');\n    return atSymbolIndex > 0 && dotSymbolIndex > atSymbolIndex + 1;\n}\n\n// Example usage:\nconst email = 'example@domain.com';\nconsole.log(isValidEmail(email)); // Expected output: true or false\n```"
  },
  {
    "task": "Develop a method to confirm that a transaction is neither fraudulent nor unauthorized using logical NOT.",
    "code": "```javascript\nfunction isTransactionValid(isFraudulent, isUnauthorized) {\n    return !isFraudulent && !isUnauthorized;\n}\n```"
  },
  {
    "task": "Write a function that outputs true if a file is either missing or empty using logical OR.",
    "code": "```javascript\nfunction isFileMissingOrEmpty(file) {\n    return !file || file.length === 0;\n}\n```"
  },
  {
    "task": "Implement a system to check if a student's grade is neither failing nor incomplete using logical NOT.",
    "code": "```javascript\nfunction checkGrade(grade) {\n    const isFailing = grade === 'F';\n    const isIncomplete = grade === 'I';\n    return !(isFailing || isIncomplete);\n}\n\n// Example usage\nconst grade = 'B';\nconsole.log(checkGrade(grade)); // Output: true\n```"
  },
  {
    "task": "Create a script that executes a command if a file is both readable and writable using logical AND.",
    "code": "```javascript\nconst fs = require('fs');\n\nconst filePath = 'path/to/your/file.txt';\n\nfs.access(filePath, fs.constants.R_OK | fs.constants.W_OK, (err) => {\n  if (!err) {\n    console.log('The file is both readable and writable.');\n    // Execute your command here\n  } else {\n    console.log('The file is not both readable and writable.');\n  }\n});\n```"
  },
  {
    "task": "Compose a function to determine if a temperature is not within a safe operating range using logical NOT.",
    "code": "```javascript\nfunction isTemperatureUnsafe(temperature, minSafeTemp, maxSafeTemp) {\n    return !(temperature >= minSafeTemp && temperature <= maxSafeTemp);\n}\n```"
  },
  {
    "task": "Design a check to see if a car is either out of fuel or needs maintenance using logical OR.",
    "code": "```javascript\nfunction checkCarStatus(isOutOfFuel, needsMaintenance) {\n    return isOutOfFuel || needsMaintenance;\n}\n\n// Example usage:\nconst carStatus = checkCarStatus(true, false);\nconsole.log(carStatus); // Output: true\n```"
  },
  {
    "task": "Develop a routine that ensures a network connection is both stable and secure using logical AND.",
    "code": "```javascript\nfunction isConnectionStable() {\n    // Assume this function checks and returns true if the connection is stable\n    return true; // Placeholder\n}\n\nfunction isConnectionSecure() {\n    // Assume this function checks and returns true if the connection is secure\n    return true; // Placeholder\n}\n\nfunction isConnectionStableAndSecure() {\n    return isConnectionStable() && isConnectionSecure();\n}\n\nconsole.log(isConnectionStableAndSecure());\n```"
  },
  {
    "task": "Write a conditional to print a message if a user is not logged in using logical NOT.",
    "code": "```javascript\nlet isLoggedIn = false;\n\nif (!isLoggedIn) {\n    console.log(\"User is not logged in.\");\n}\n```"
  },
  {
    "task": "Create a function that checks if a number is both even and positive using logical AND.",
    "code": "```javascript\nfunction isEvenAndPositive(number) {\n    return number > 0 && number % 2 === 0;\n}\n```"
  },
  {
    "task": "Implement a feature that turns off a device if neither of two switches are on using logical NOT.",
    "code": "```javascript\nfunction turnOffDevice(switch1, switch2) {\n    if (!switch1 && !switch2) {\n        return \"Device is turned off\";\n    }\n    return \"Device remains on\";\n}\n\n// Example usage:\nlet switch1 = false;\nlet switch2 = false;\nconsole.log(turnOffDevice(switch1, switch2)); // Output: Device is turned off\n```"
  },
  {
    "task": "Compose a script to alert if a server is either down or running slow using logical OR.",
    "code": "```javascript\nlet serverStatus = 'down'; // Possible values: 'down', 'slow', 'normal'\n\nif (serverStatus === 'down' || serverStatus === 'slow') {\n    alert('The server is either down or running slow.');\n}\n```"
  },
  {
    "task": "Design a validation method to ensure a form field is not empty using logical NOT.",
    "code": "```javascript\nfunction isFieldNotEmpty(value) {\n    return !!value;\n}\n```"
  },
  {
    "task": "Write a program to determine if two strings are both non-empty using logical AND.",
    "code": "```javascript\nfunction areBothStringsNonEmpty(str1, str2) {\n    return str1 !== '' && str2 !== '';\n}\n\n// Example usage\nconsole.log(areBothStringsNonEmpty('hello', 'world')); // true\nconsole.log(areBothStringsNonEmpty('hello', ''));      // false\n```"
  },
  {
    "task": "Create a function that checks if a number is either prime or a perfect square using logical OR.",
    "code": "```javascript\nfunction isPrimeOrPerfectSquare(num) {\n    function isPrime(n) {\n        if (n <= 1) return false;\n        for (let i = 2; i * i <= n; i++) {\n            if (n % i === 0) return false;\n        }\n        return true;\n    }\n\n    function isPerfectSquare(n) {\n        const sqrt = Math.sqrt(n);\n        return sqrt === Math.floor(sqrt);\n    }\n\n    return isPrime(num) || isPerfectSquare(num);\n}\n```"
  },
  {
    "task": "Develop a script to ensure a user is either an adult or has parental consent using logical OR.",
    "code": "```javascript\nfunction canProceed(isAdult, hasParentalConsent) {\n    return isAdult || hasParentalConsent;\n}\n\n// Example usage:\nlet userIsAdult = false;\nlet userHasParentalConsent = true;\n\nif (canProceed(userIsAdult, userHasParentalConsent)) {\n    console.log(\"Access granted.\");\n} else {\n    console.log(\"Access denied.\");\n}\n```"
  },
  {
    "task": "Implement a condition to execute a task if a variable is neither zero nor negative using logical NOT.",
    "code": "```javascript\nlet variable = 5; // Example value\n\nif (!(variable <= 0)) {\n    // Execute task\n    console.log(\"Variable is positive and non-zero.\");\n}\n```"
  },
  {
    "task": "Compose a method to verify if a system is both up-to-date and functioning using logical AND.",
    "code": "```javascript\nfunction isSystemValid(isUpToDate, isFunctioning) {\n    return isUpToDate && isFunctioning;\n}\n```"
  },
  {
    "task": "Write a function that returns true if a list contains neither duplicates nor null values using logical NOT.",
    "code": "```javascript\nfunction hasNoDuplicatesOrNulls(arr) {\n    const hasNoNulls = !arr.includes(null);\n    const hasNoDuplicates = new Set(arr).size === arr.length;\n    return hasNoNulls && hasNoDuplicates;\n}\n```"
  },
  {
    "task": "Create a script to perform an action if a temperature is either too high or too low using logical OR.",
    "code": "```javascript\nlet temperature = 75; // Example temperature value\n\nif (temperature > 100 || temperature < 32) {\n    console.log(\"Temperature is either too high or too low.\");\n}\n```"
  },
  {
    "task": "Design a feature to toggle an option if a setting is not enabled using logical NOT.",
    "code": "```javascript\nfunction toggleOptionIfSettingNotEnabled(setting, option) {\n    if (!setting) {\n        option = !option;\n    }\n    return option;\n}\n\n// Example usage:\nlet setting = false;\nlet option = true;\n\noption = toggleOptionIfSettingNotEnabled(setting, option);\nconsole.log(option); // Output: false\n```"
  },
  {
    "task": "Develop a check to ensure a username is both available and meets length requirements using logical AND.",
    "code": "```javascript\nfunction isUsernameValid(username, isAvailable) {\n    const minLength = 5;\n    const maxLength = 15;\n    return isAvailable && username.length >= minLength && username.length <= maxLength;\n}\n```"
  },
  {
    "task": "Implement a function that returns true if a number is neither too large nor too small using logical NOT.",
    "code": "```javascript\nfunction isNeitherTooLargeNorTooSmall(number) {\n    const tooLarge = number > 100;\n    const tooSmall = number < 1;\n    return !(tooLarge || tooSmall);\n}\n```"
  },
  {
    "task": "Write a conditional to print a warning if a disk is either full or nearly full using logical OR.",
    "code": "```javascript\nfunction checkDiskSpace(isFull, isNearlyFull) {\n    if (isFull || isNearlyFull) {\n        console.log(\"Warning: Disk is full or nearly full\");\n    }\n}\n\n// Example usage:\ncheckDiskSpace(false, true); // This will print the warning\n```"
  },
  {
    "task": "Create a routine to validate that two dates are both within a valid range using logical AND.",
    "code": "```javascript\nfunction areDatesValid(date1, date2, startDate, endDate) {\n    const isDate1Valid = date1 >= startDate && date1 <= endDate;\n    const isDate2Valid = date2 >= startDate && date2 <= endDate;\n    return isDate1Valid && isDate2Valid;\n}\n\n// Example usage\nconst date1 = new Date('2023-10-01');\nconst date2 = new Date('2023-10-15');\nconst startDate = new Date('2023-09-01');\nconst endDate = new Date('2023-12-31');\n\nconsole.log(areDatesValid(date1, date2, startDate, endDate)); // true or false\n```"
  },
  {
    "task": "Compose a function to decide if a person is either a minor or a senior using logical OR.",
    "code": "```javascript\nfunction isMinorOrSenior(age) {\n    return age < 18 || age >= 65;\n}\n```"
  },
  {
    "task": "Design a script to execute a task if a condition is not met using logical NOT.",
    "code": "```javascript\nlet condition = false;\n\nif (!condition) {\n    // Execute the task\n    console.log(\"Condition not met, executing the task.\");\n}\n```"
  },
  {
    "task": "Develop a program to verify if a process is neither running nor scheduled using logical NOT.",
    "code": "```javascript\nfunction isProcessNeitherRunningNorScheduled(isRunning, isScheduled) {\n    return !isRunning && !isScheduled;\n}\n\n// Example usage:\nlet processRunning = false;\nlet processScheduled = false;\nconsole.log(isProcessNeitherRunningNorScheduled(processRunning, processScheduled));  // Output: true\n```"
  },
  {
    "task": "Implement a feature that confirms a file is both accessible and not locked using logical AND.",
    "code": "```javascript\nfunction isFileAccessibleAndNotLocked(isAccessible, isLocked) {\n    return isAccessible && !isLocked;\n}\n\n// Example usage:\nlet fileStatus = {\n    isAccessible: true,\n    isLocked: false\n};\n\nconsole.log(isFileAccessibleAndNotLocked(fileStatus.isAccessible, fileStatus.isLocked)); // true\n```"
  },
  {
    "task": "Write a script to check if a device is either offline or in maintenance mode using logical OR.",
    "code": "```javascript\nfunction isDeviceOfflineOrInMaintenance(isOffline, isInMaintenance) {\n    return isOffline || isInMaintenance;\n}\n\n// Example usage:\nconst deviceStatus = {\n    isOffline: true,\n    isInMaintenance: false\n};\n\nconst result = isDeviceOfflineOrInMaintenance(deviceStatus.isOffline, deviceStatus.isInMaintenance);\nconsole.log(result); // Output: true\n```"
  },
  {
    "task": "Create a function to ensure a password is both complex and unique using logical AND.",
    "code": "```javascript\nconst isPasswordComplexAndUnique = (password, existingPasswords) => {\n    const isComplex = password.length >= 8 && /[A-Z]/.test(password) && /[a-z]/.test(password) && /\\d/.test(password);\n    const isUnique = !existingPasswords.includes(password);\n    return isComplex && isUnique;\n};\n\n// Example usage\nconst existingPasswords = ['Password1', 'ComplexPass2'];\nconsole.log(isPasswordComplexAndUnique('Secure123', existingPasswords)); // true\nconsole.log(isPasswordComplexAndUnique('Pass12', existingPasswords));    // false\nconsole.log(isPasswordComplexAndUnique('ComplexPass2', existingPasswords)); // false\n```"
  },
  {
    "task": "Design a validation that ensures a value is not negative using logical NOT.",
    "code": "```javascript\nfunction isNotNegative(value) {\n    return !(value < 0);\n}\n```"
  },
  {
    "task": "Develop a check to see if a user has either exceeded their quota or is nearing it using logical OR.",
    "code": "```javascript\nfunction checkQuotaStatus(currentUsage, quotaLimit, nearingLimitThreshold) {\n    return currentUsage > quotaLimit || currentUsage >= nearingLimitThreshold;\n}\n\n// Example usage:\nconst currentUsage = 90;\nconst quotaLimit = 100;\nconst nearingLimitThreshold = 85;\n\nconst isQuotaExceededOrNearing = checkQuotaStatus(currentUsage, quotaLimit, nearingLimitThreshold);\nconsole.log(isQuotaExceededOrNearing); // true if the user has exceeded or is nearing their quota\n```"
  },
  {
    "task": "Implement a routine to confirm that a user is both authenticated and authorized using logical AND.",
    "code": "```javascript\nfunction isUserAuthenticatedAndAuthorized(user) {\n    return user.isAuthenticated && user.isAuthorized;\n}\n```"
  },
  {
    "task": "Compose a function to determine if a light is either on or blinking using logical OR.",
    "code": "```javascript\nfunction isLightOnOrBlinking(isOn, isBlinking) {\n    return isOn || isBlinking;\n}\n```"
  },
  {
    "task": "Write a script that executes a command if a network connection is neither weak nor unstable using logical NOT.",
    "code": "```javascript\nfunction executeCommand() {\n    const isWeak = false; // Example value, replace with actual network status\n    const isUnstable = false; // Example value, replace with actual network status\n\n    if (!isWeak && !isUnstable) {\n        console.log(\"Executing command...\");\n        // Place your command execution code here\n    }\n}\n\nexecuteCommand();\n```"
  },
  {
    "task": "Create a program to verify that a sensor is both calibrated and active using logical AND.",
    "code": "```javascript\nfunction isSensorOperational(isCalibrated, isActive) {\n    return isCalibrated && isActive;\n}\n\n// Example usage:\nconst isCalibrated = true;\nconst isActive = true;\nconsole.log(isSensorOperational(isCalibrated, isActive)); // Output: true\n```"
  },
  {
    "task": "Design a feature to alert if a process is either overdue or incomplete using logical OR.",
    "code": "```javascript\nfunction checkProcessStatus(isOverdue, isIncomplete) {\n    if (isOverdue || isIncomplete) {\n        alert('The process is either overdue or incomplete.');\n    }\n}\n\n// Example usage:\ncheckProcessStatus(true, false);  // Alerts because the process is overdue\ncheckProcessStatus(false, true);  // Alerts because the process is incomplete\ncheckProcessStatus(true, true);   // Alerts because both conditions are true\ncheckProcessStatus(false, false); // No alert because neither condition is true\n```"
  },
  {
    "task": "Develop a script to check if a person is neither a guest nor a temporary user using logical NOT.",
    "code": "```javascript\nfunction isNeitherGuestNorTemporaryUser(userStatus) {\n    const isGuest = userStatus === 'guest';\n    const isTemporaryUser = userStatus === 'temporary';\n    return !(isGuest || isTemporaryUser);\n}\n\n// Example usage:\nconst userStatus = 'regular'; // replace with any user status\nconsole.log(isNeitherGuestNorTemporaryUser(userStatus)); // true if neither 'guest' nor 'temporary'\n```"
  },
  {
    "task": "Implement a function to toggle a light if a switch is not pressed using logical NOT.",
    "code": "```javascript\nfunction toggleLight(isSwitchPressed) {\n    return !isSwitchPressed;\n}\n```"
  },
  {
    "task": "Write a conditional to trigger an event if a file is either corrupted or missing using logical OR.",
    "code": "```javascript\nfunction checkFileStatus(isCorrupted, isMissing) {\n    if (isCorrupted || isMissing) {\n        triggerEvent();\n    }\n}\n\nfunction triggerEvent() {\n    console.log(\"Event triggered due to file issue.\");\n}\n\n// Example usage\ncheckFileStatus(true, false); // Corrupted\ncheckFileStatus(false, true); // Missing\ncheckFileStatus(true, true);  // Corrupted and Missing\ncheckFileStatus(false, false); // Neither\n```"
  },
  {
    "task": "Create a routine that verifies if a vehicle is both insured and registered using logical AND.",
    "code": "```javascript\nfunction isVehicleInsuredAndRegistered(isInsured, isRegistered) {\n    return isInsured && isRegistered;\n}\n\n// Example usage:\nconst insured = true;\nconst registered = true;\nconsole.log(isVehicleInsuredAndRegistered(insured, registered)); // Output: true\n```"
  },
  {
    "task": "Compose a method to check if an account is either overdrawn or flagged using logical OR.",
    "code": "```javascript\nfunction isAccountOverdrawnOrFlagged(account) {\n    return account.isOverdrawn || account.isFlagged;\n}\n```"
  },
  {
    "task": "Design a program to ensure an application is both installed and updated using logical AND.",
    "code": "```javascript\nfunction isApplicationReady(isInstalled, isUpdated) {\n    return isInstalled && isUpdated;\n}\n\n// Example usage:\nconst appInstalled = true;\nconst appUpdated = true;\n\nif (isApplicationReady(appInstalled, appUpdated)) {\n    console.log(\"The application is both installed and updated.\");\n} else {\n    console.log(\"The application is not ready.\");\n}\n```"
  },
  {
    "task": "Develop a function that returns true if a number is neither divisible by 3 nor 5 using logical NOT.",
    "code": "```javascript\nfunction isNeitherDivisibleBy3Nor5(number) {\n    return !(number % 3 === 0 || number % 5 === 0);\n}\n```"
  },
  {
    "task": "Implement a script that alerts if a device is either overheating or underperforming using logical OR.",
    "code": "```javascript\nlet temperature = 75; // Example temperature\nlet performance = 50; // Example performance\n\nlet isOverheating = temperature > 70;\nlet isUnderperforming = performance < 60;\n\nif (isOverheating || isUnderperforming) {\n    alert(\"Warning: Device is either overheating or underperforming.\");\n}\n```"
  },
  {
    "task": "Write a function to validate that a directory is both writable and not full using logical AND.",
    "code": "```javascript\nfunction validateDirectory(isWritable, isNotFull) {\n    return isWritable && isNotFull;\n}\n\n// Example usage:\nconst isWritable = true; // Assume directory is writable\nconst isNotFull = true;  // Assume directory is not full\n\nconsole.log(validateDirectory(isWritable, isNotFull)); // Outputs: true\n```"
  },
  {
    "task": "Create a conditional statement that executes if a button is not clicked using logical NOT.",
    "code": "```javascript\nlet buttonClicked = false;\n\nif (!buttonClicked) {\n    // Execute code here\n    console.log(\"Button has not been clicked.\");\n}\n```"
  },
  {
    "task": "Design a check to ensure a transaction is both verified and complete using logical AND.",
    "code": "```javascript\nfunction isTransactionValid(isVerified, isComplete) {\n    return isVerified && isComplete;\n}\n\n// Example usage:\nconst verified = true;\nconst complete = true;\nconst transactionStatus = isTransactionValid(verified, complete);\nconsole.log(transactionStatus); // Outputs: true\n```"
  },
  {
    "task": "Develop a routine to determine if a string is either uppercase or lowercase using logical OR.",
    "code": "```javascript\nfunction isUppercaseOrLowercase(str) {\n    return str === str.toUpperCase() || str === str.toLowerCase();\n}\n\n// Example usage:\nconsole.log(isUppercaseOrLowercase(\"HELLO\")); // true\nconsole.log(isUppercaseOrLowercase(\"hello\")); // true\nconsole.log(isUppercaseOrLowercase(\"Hello\")); // false\n```"
  },
  {
    "task": "Implement a feature to execute a task if a variable is neither null nor undefined using logical NOT.",
    "code": "```javascript\nlet variable = /* some value */;\nif (!(variable === null || variable === undefined)) {\n    // Execute the task\n    console.log('Task executed');\n}\n```"
  },
  {
    "task": "Compose a function to return true if a date is either today or tomorrow using logical OR.",
    "code": "```javascript\nfunction isTodayOrTomorrow(date) {\n    const today = new Date();\n    const tomorrow = new Date();\n    tomorrow.setDate(today.getDate() + 1);\n\n    const isToday = date.toDateString() === today.toDateString();\n    const isTomorrow = date.toDateString() === tomorrow.toDateString();\n\n    return isToday || isTomorrow;\n}\n```"
  },
  {
    "task": "Write a script to confirm that a system is both running and not in maintenance mode using logical AND.",
    "code": "```javascript\nlet isRunning = true; // Example value, replace with actual condition\nlet isInMaintenanceMode = false; // Example value, replace with actual condition\n\nif (isRunning && !isInMaintenanceMode) {\n    console.log(\"System is running and not in maintenance mode.\");\n} else {\n    console.log(\"System is either not running or in maintenance mode.\");\n}\n```"
  },
  {
    "task": "Create a program to verify if a text field is neither empty nor exceeds character limit using logical NOT.",
    "code": "```javascript\nfunction isValidTextField(text, maxLength) {\n    return !(text === \"\" || text.length > maxLength);\n}\n\n// Example usage:\nconst text = \"Hello, World!\";\nconst maxLength = 20;\nconsole.log(isValidTextField(text, maxLength)); // Output: true\n```"
  },
  {
    "task": "Design a feature that checks if a user has either admin privileges or editor rights using logical OR.",
    "code": "```javascript\nfunction checkUserPrivileges(user) {\n    return user.isAdmin || user.isEditor;\n}\n\n// Example usage:\nconst user1 = { isAdmin: true, isEditor: false };\nconst user2 = { isAdmin: false, isEditor: true };\nconst user3 = { isAdmin: false, isEditor: false };\n\nconsole.log(checkUserPrivileges(user1)); // true\nconsole.log(checkUserPrivileges(user2)); // true\nconsole.log(checkUserPrivileges(user3)); // false\n```"
  },
  {
    "task": "Develop a script to ensure a file is both present and not empty using logical AND.",
    "code": "```javascript\nconst fs = require('fs');\n\nfunction checkFilePresenceAndNotEmpty(filePath) {\n    if (fs.existsSync(filePath) && fs.statSync(filePath).size > 0) {\n        console.log('File is present and not empty.');\n    } else {\n        console.log('File is either missing or empty.');\n    }\n}\n\nconst filePath = 'path/to/your/file.txt';\ncheckFilePresenceAndNotEmpty(filePath);\n```"
  },
  {
    "task": "Implement a condition to execute a command if a setting is not active using logical NOT.",
    "code": "```javascript\nlet settingActive = false;\n\nif (!settingActive) {\n    // Execute command\n    console.log(\"Command executed because setting is not active.\");\n}\n```"
  },
  {
    "task": "Compose a method to decide if a person is either eligible or exempt using logical OR.",
    "code": "```javascript\nfunction isEligibleOrExempt(isEligible, isExempt) {\n    return isEligible || isExempt;\n}\n\n// Example usage:\nconst person1 = isEligibleOrExempt(true, false);  // true\nconst person2 = isEligibleOrExempt(false, true);  // true\nconst person3 = isEligibleOrExempt(false, false); // false\n```"
  },
  {
    "task": "Write a function that returns true if a number is both greater than zero and less than ten using logical AND.",
    "code": "```javascript\nfunction isBetweenZeroAndTen(num) {\n    return num > 0 && num < 10;\n}\n```"
  },
  {
    "task": "Create a loop to continue as long as a condition is either true or false using logical OR.",
    "code": "```javascript\nlet condition1 = true;\nlet condition2 = false;\n\nwhile (condition1 || condition2) {\n    // Perform some actions\n\n    // Update conditions to eventually break the loop\n    condition1 = false;\n    condition2 = false;\n}\n```"
  },
  {
    "task": "Design a program to verify if an account is neither inactive nor suspended using logical NOT.",
    "code": "```javascript\nfunction isAccountActive(status) {\n    const isInactive = status === 'inactive';\n    const isSuspended = status === 'suspended';\n    return !(isInactive || isSuspended);\n}\n\n// Example usage:\nconst accountStatus = 'active';\nconsole.log(isAccountActive(accountStatus)); // true if the account is neither inactive nor suspended\n```"
  },
  {
    "task": "Develop a feature to confirm that a document is both signed and verified using logical AND.",
    "code": "```javascript\nfunction isDocumentReady(signed, verified) {\n    return signed && verified;\n}\n\n// Example usage:\nconst signed = true;\nconst verified = true;\nconsole.log(isDocumentReady(signed, verified)); // Output: true\n```"
  },
  {
    "task": "Implement a script to alert if a network is either congested or down using logical OR.",
    "code": "```javascript\nfunction checkNetworkStatus(isCongested, isDown) {\n    if (isCongested || isDown) {\n        alert(\"The network is either congested or down.\");\n    }\n}\n\n// Example usage\ncheckNetworkStatus(true, false);  // Alerts: The network is either congested or down.\n```"
  },
  {
    "task": "Write a function to ensure a list is both sorted and unique using logical AND.",
    "code": "```javascript\nfunction sortAndUnique(arr) {\n    return [...new Set(arr)].sort((a, b) => a - b);\n}\n```"
  },
  {
    "task": "Create a conditional statement to execute if a task is not completed using logical NOT.",
    "code": "```javascript\nlet taskCompleted = false;\n\nif (!taskCompleted) {\n    // Execute task-related code here\n    console.log(\"Task is not completed. Executing task-related code.\");\n}\n```"
  },
  {
    "task": "Design a check to determine if a component is either faulty or missing using logical OR.",
    "code": "```javascript\nfunction isComponentFaultyOrMissing(isFaulty, isMissing) {\n    return isFaulty || isMissing;\n}\n```"
  },
  {
    "task": "Develop a routine to verify if a user is both online and available using logical AND.",
    "code": "```javascript\nfunction isUserOnlineAndAvailable(user) {\n    return user.isOnline && user.isAvailable;\n}\n\n// Example usage:\nconst user = { isOnline: true, isAvailable: true };\nconsole.log(isUserOnlineAndAvailable(user)); // Output: true\n```"
  },
  {
    "task": "Implement a feature to toggle an alert if a condition is not satisfied using logical NOT.",
    "code": "```javascript\nlet condition = false;\n\nfunction toggleAlert() {\n    if (!condition) {\n        alert(\"Condition is not satisfied!\");\n    }\n}\n\n// To test the function\ntoggleAlert();\n```"
  },
  {
    "task": "Compose a function to return true if a transaction is either pending or failed using logical OR.",
    "code": "```javascript\nfunction isTransactionPendingOrFailed(status) {\n    return status === 'pending' || status === 'failed';\n}\n```"
  },
  {
    "task": "Write a script to ensure a configuration is both correct and active using logical AND.",
    "code": "```javascript\nfunction isConfigurationValid(config) {\n    return config.isCorrect && config.isActive;\n}\n\n// Example usage:\nconst config = {\n    isCorrect: true,\n    isActive: true\n};\n\nconsole.log(isConfigurationValid(config)); // Output: true\n```"
  }
]