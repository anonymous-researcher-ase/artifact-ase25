[
  {
    "task": "Create a set to store unique usernames and demonstrate adding new ones.",
    "code": "```javascript\nconst usernames = new Set();\n\nusernames.add(\"user1\");\nusernames.add(\"user2\");\nusernames.add(\"user3\");\n\n// Attempting to add duplicate usernames\nusernames.add(\"user1\");\nusernames.add(\"user2\");\n\n// Output the set to demonstrate unique usernames\nconsole.log(usernames);\n```"
  },
  {
    "task": "Write a function that returns the union of two sets of integers.",
    "code": "```javascript\nfunction unionOfSets(setA, setB) {\n    return new Set([...setA, ...setB]);\n}\n```"
  },
  {
    "task": "Given two sets of strings, find their intersection.",
    "code": "```javascript\nfunction findIntersection(set1, set2) {\n    const intersection = new Set([...set1].filter(item => set2.has(item)));\n    return intersection;\n}\n\n// Example usage\nconst setA = new Set(['apple', 'banana', 'cherry']);\nconst setB = new Set(['banana', 'dragonfruit', 'apple']);\nconst result = findIntersection(setA, setB);\nconsole.log(result); // Output: Set { 'apple', 'banana' }\n```"
  },
  {
    "task": "Implement a set to track visited web pages and check if a page has been visited.",
    "code": "```javascript\nclass VisitedPages {\n  constructor() {\n    this.visitedSet = new Set();\n  }\n\n  visitPage(url) {\n    this.visitedSet.add(url);\n  }\n\n  hasVisited(url) {\n    return this.visitedSet.has(url);\n  }\n}\n\n// Example usage:\nconst pages = new VisitedPages();\npages.visitPage('https://example.com');\nconsole.log(pages.hasVisited('https://example.com')); // true\nconsole.log(pages.hasVisited('https://another.com')); // false\n```"
  },
  {
    "task": "Create a set from a list of numbers and remove duplicates.",
    "code": "```javascript\nconst numbers = [1, 2, 3, 2, 4, 5, 5, 6];\nconst uniqueNumbersSet = new Set(numbers);\nconst uniqueNumbersArray = Array.from(uniqueNumbersSet);\n```"
  },
  {
    "task": "Check if a set is a subset of another set.",
    "code": "```javascript\nfunction isSubset(setA, setB) {\n    for (const elem of setA) {\n        if (!setB.has(elem)) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// Example usage:\nconst set1 = new Set([1, 2, 3]);\nconst set2 = new Set([1, 2, 3, 4, 5]);\n\nconsole.log(isSubset(set1, set2)); // Output: true\n```"
  },
  {
    "task": "Demonstrate adding and removing elements from a set of book titles.",
    "code": "```javascript\n// Create a new Set to store book titles\nlet bookTitles = new Set();\n\n// Add book titles to the set\nbookTitles.add(\"To Kill a Mockingbird\");\nbookTitles.add(\"1984\");\nbookTitles.add(\"The Great Gatsby\");\nbookTitles.add(\"The Catcher in the Rye\");\n\n// Remove a book title from the set\nbookTitles.delete(\"1984\");\n\n// Display the current set of book titles\nconsole.log(bookTitles);\n```"
  },
  {
    "task": "Create a set and show how to clear all its elements.",
    "code": "```javascript\nconst mySet = new Set([1, 2, 3, 4, 5]);\nmySet.clear();\n```"
  },
  {
    "task": "Write a program to find the difference between two sets of employee IDs.",
    "code": "```javascript\nconst setA = new Set([101, 102, 103, 104]);\nconst setB = new Set([103, 104, 105, 106]);\n\nconst difference = new Set([...setA].filter(id => !setB.has(id)));\nconsole.log(difference);\n```"
  },
  {
    "task": "Implement a set to store unique email addresses and check membership.",
    "code": "```javascript\n// Create a set to store unique email addresses\nconst emailSet = new Set();\n\n// Function to add an email to the set\nfunction addEmail(email) {\n  emailSet.add(email);\n}\n\n// Function to check if an email is in the set\nfunction hasEmail(email) {\n  return emailSet.has(email);\n}\n\n// Example usage\naddEmail('example@example.com');\nconsole.log(hasEmail('example@example.com')); // true\nconsole.log(hasEmail('test@test.com')); // false\n```"
  },
  {
    "task": "Use a set to determine if two lists have any common elements.",
    "code": "```javascript\nfunction haveCommonElements(list1, list2) {\n    const set1 = new Set(list1);\n    for (const element of list2) {\n        if (set1.has(element)) {\n            return true;\n        }\n    }\n    return false;\n}\n\n// Example usage:\nconst listA = [1, 2, 3, 4];\nconst listB = [5, 6, 7, 8];\nconst listC = [3, 6, 9];\n\nconsole.log(haveCommonElements(listA, listB)); // false\nconsole.log(haveCommonElements(listA, listC)); // true\n```"
  },
  {
    "task": "Create a set to represent a group of students and update it with new entries.",
    "code": "```javascript\nlet students = new Set();\n\n// Add new entries\nstudents.add('Alice');\nstudents.add('Bob');\nstudents.add('Charlie');\n\n// Add more entries\nstudents.add('David');\nstudents.add('Eva');\n```"
  },
  {
    "task": "Write a function to find symmetric difference between two sets of colors.",
    "code": "```javascript\nfunction symmetricDifference(setA, setB) {\n    const difference = new Set(setA);\n    for (const elem of setB) {\n        if (difference.has(elem)) {\n            difference.delete(elem);\n        } else {\n            difference.add(elem);\n        }\n    }\n    return difference;\n}\n\nconst colors1 = new Set(['red', 'blue', 'green']);\nconst colors2 = new Set(['blue', 'yellow', 'green']);\n\nconst result = symmetricDifference(colors1, colors2);\nconsole.log(result); // Output: Set { 'red', 'yellow' }\n```"
  },
  {
    "task": "Implement a set to store unique product codes and demonstrate iteration over it.",
    "code": "```javascript\nconst productCodes = new Set();\n\n// Adding unique product codes to the set\nproductCodes.add('A123');\nproductCodes.add('B456');\nproductCodes.add('C789');\nproductCodes.add('A123'); // Duplicate entry, will not be added\n\n// Iterating over the set\nfor (const code of productCodes) {\n    console.log(code);\n}\n```"
  },
  {
    "task": "Create a set and demonstrate the use of the `discard` method.",
    "code": "```javascript\nlet mySet = new Set([1, 2, 3, 4]);\nmySet.delete(3);\n```"
  },
  {
    "task": "Given a list of numbers, create a set and check if a specific number is present.",
    "code": "```javascript\nconst numbers = [1, 2, 3, 4, 5];\nconst numberSet = new Set(numbers);\nconst specificNumber = 3;\nconst isPresent = numberSet.has(specificNumber);\n```"
  },
  {
    "task": "Use a set to find all unique words in a sentence.",
    "code": "```javascript\nfunction findUniqueWords(sentence) {\n  const words = sentence.split(/\\s+/);\n  const uniqueWords = new Set(words);\n  return Array.from(uniqueWords);\n}\n\nconst sentence = \"This is a test sentence with some repeated words words\";\nconst unique = findUniqueWords(sentence);\nconsole.log(unique);\n```"
  },
  {
    "task": "Create a set from a sequence of characters and demonstrate set operations.",
    "code": "```javascript\n// Create a set from a sequence of characters\nlet charSequence = \"abcdeabc\";\nlet charSet = new Set(charSequence);\n\n// Demonstrate set operations\n// Add a character\ncharSet.add('f');\n\n// Delete a character\ncharSet.delete('a');\n\n// Check if a character is in the set\nlet hasCharacter = charSet.has('b');\n\n// Get the size of the set\nlet setSize = charSet.size;\n\n// Convert set to an array to display the contents\nlet charArray = Array.from(charSet);\n\n// Output the results\nconsole.log(charArray); // Displays the contents of the set\nconsole.log(hasCharacter); // Displays true if 'b' is in the set\nconsole.log(setSize); // Displays the size of the set\n```"
  },
  {
    "task": "Write a function to merge two sets and return the result.",
    "code": "```javascript\nfunction mergeSets(set1, set2) {\n    return new Set([...set1, ...set2]);\n}\n```"
  },
  {
    "task": "Implement a set to hold unique IP addresses and demonstrate basic operations.",
    "code": "```javascript\n// Create a set to store IP addresses\nconst ipSet = new Set();\n\n// Add IP addresses to the set\nipSet.add('192.168.1.1');\nipSet.add('10.0.0.1');\nipSet.add('172.16.0.1');\n\n// Attempt to add a duplicate IP address\nipSet.add('192.168.1.1');\n\n// Check if a specific IP address is in the set\nconst hasIp = ipSet.has('10.0.0.1');\n\n// Remove an IP address from the set\nipSet.delete('172.16.0.1');\n\n// Get the number of unique IP addresses in the set\nconst size = ipSet.size;\n\n// Iterate over the IP addresses in the set\nipSet.forEach(ip => {\n    console.log(ip);\n});\n```"
  },
  {
    "task": "Create a set and demonstrate how to find the size of the set.",
    "code": "```javascript\nconst mySet = new Set();\nmySet.add('apple');\nmySet.add('banana');\nmySet.add('orange');\n\nconst setSize = mySet.size;\nconsole.log(setSize);\n```"
  },
  {
    "task": "Write a program to check if two sets of dates are disjoint.",
    "code": "```javascript\nfunction areSetsDisjoint(set1, set2) {\n    const datesSet1 = new Set(set1);\n    for (const date of set2) {\n        if (datesSet1.has(date)) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// Example usage:\nconst dates1 = [\"2023-10-01\", \"2023-10-02\", \"2023-10-03\"];\nconst dates2 = [\"2023-10-04\", \"2023-10-05\"];\nconsole.log(areSetsDisjoint(dates1, dates2)); // Output: true\n\nconst dates3 = [\"2023-10-01\", \"2023-10-05\"];\nconsole.log(areSetsDisjoint(dates1, dates3)); // Output: false\n```"
  },
  {
    "task": "Create a set to manage a collection of tags and demonstrate addition and removal.",
    "code": "```javascript\nconst tags = new Set();\n\n// Adding tags\ntags.add('JavaScript');\ntags.add('Programming');\ntags.add('Web Development');\n\n// Removing a tag\ntags.delete('Programming');\n\n// Outputting the set to demonstrate\nconsole.log(tags);\n```"
  },
  {
    "task": "Implement a set to track unique inventory items in a store.",
    "code": "```javascript\nclass Inventory {\n    constructor() {\n        this.items = new Set();\n    }\n\n    addItem(item) {\n        this.items.add(item);\n    }\n\n    removeItem(item) {\n        this.items.delete(item);\n    }\n\n    hasItem(item) {\n        return this.items.has(item);\n    }\n\n    getItems() {\n        return Array.from(this.items);\n    }\n}\n\n// Example usage:\nconst storeInventory = new Inventory();\nstoreInventory.addItem('apple');\nstoreInventory.addItem('banana');\nstoreInventory.addItem('apple'); // Duplicate item, will not be added again\n\nconsole.log(storeInventory.getItems()); // ['apple', 'banana']\nconsole.log(storeInventory.hasItem('banana')); // true\nstoreInventory.removeItem('banana');\nconsole.log(storeInventory.hasItem('banana')); // false\n```"
  },
  {
    "task": "Create a set of numbers and demonstrate conversion to a list.",
    "code": "```javascript\nconst numberSet = new Set([1, 2, 3, 4, 5]);\nconst numberList = Array.from(numberSet);\nconsole.log(numberList);\n```"
  },
  {
    "task": "Write a function that returns all elements present in either of two sets but not both.",
    "code": "```javascript\nfunction symmetricDifference(setA, setB) {\n    const result = new Set();\n    \n    for (let item of setA) {\n        if (!setB.has(item)) {\n            result.add(item);\n        }\n    }\n    \n    for (let item of setB) {\n        if (!setA.has(item)) {\n            result.add(item);\n        }\n    }\n    \n    return result;\n}\n```"
  },
  {
    "task": "Use a set to manage a collection of unique transaction IDs.",
    "code": "```javascript\nconst transactionIds = new Set();\n\n// Adding transaction IDs\ntransactionIds.add('TXN001');\ntransactionIds.add('TXN002');\ntransactionIds.add('TXN003');\n\n// Check if a transaction ID exists\nif (transactionIds.has('TXN001')) {\n    console.log('Transaction ID TXN001 exists.');\n}\n\n// Remove a transaction ID\ntransactionIds.delete('TXN002');\n\n// Iterate over transaction IDs\ntransactionIds.forEach(id => {\n    console.log('Transaction ID:', id);\n});\n```"
  },
  {
    "task": "Create a set of integers and demonstrate the `pop` operation.",
    "code": "```javascript\nconst mySet = new Set([1, 2, 3, 4, 5]);\n\nif (mySet.size > 0) {\n  const iterator = mySet.values();\n  const firstValue = iterator.next().value;\n  mySet.delete(firstValue);\n}\n\nconsole.log(mySet);\n```"
  },
  {
    "task": "Write a program to find the maximum element in a set of floating-point numbers.",
    "code": "```javascript\nfunction findMaxInSet(floatSet) {\n    return Math.max(...floatSet);\n}\n\nconst floatSet = new Set([1.2, 3.7, 2.5, 4.9, 3.6]);\nconst maxElement = findMaxInSet(floatSet);\nconsole.log(maxElement);\n```"
  },
  {
    "task": "Create a set and demonstrate the use of the `update` method with another set.",
    "code": "```javascript\nconst set1 = new Set([1, 2, 3]);\nconst set2 = new Set([3, 4, 5]);\n\nset2.forEach(value => set1.add(value));\n\nconsole.log(set1);\n```"
  },
  {
    "task": "Implement a set to keep track of unique file extensions in a directory.",
    "code": "```javascript\nconst fs = require('fs');\nconst path = require('path');\n\nfunction getUniqueFileExtensions(directoryPath) {\n    const files = fs.readdirSync(directoryPath);\n    const extensions = new Set();\n\n    files.forEach(file => {\n        const ext = path.extname(file);\n        if (ext) {\n            extensions.add(ext);\n        }\n    });\n\n    return Array.from(extensions);\n}\n\n// Usage example\nconst directoryPath = '/path/to/directory';\nconst uniqueExtensions = getUniqueFileExtensions(directoryPath);\nconsole.log(uniqueExtensions);\n```"
  },
  {
    "task": "Create a set of strings and demonstrate how to iterate over it in reverse order.",
    "code": "```javascript\nconst mySet = new Set(['apple', 'banana', 'cherry']);\nconst setArray = Array.from(mySet);\nfor (let i = setArray.length - 1; i >= 0; i--) {\n  console.log(setArray[i]);\n}\n```"
  },
  {
    "task": "Write a function to check if a set is empty.",
    "code": "```javascript\nfunction isSetEmpty(s) {\n    return s.size === 0;\n}\n```"
  },
  {
    "task": "Use a set to filter out duplicate entries from a list of participants.",
    "code": "```javascript\nfunction filterDuplicates(participants) {\n    return Array.from(new Set(participants));\n}\n\nconst participants = ['Alice', 'Bob', 'Charlie', 'Alice', 'Bob'];\nconst uniqueParticipants = filterDuplicates(participants);\nconsole.log(uniqueParticipants);\n```"
  },
  {
    "task": "Create a set of tuples and demonstrate basic set operations.",
    "code": "```javascript\nlet set = new Set();\n\n// Create tuples as arrays\nconst tuple1 = [1, 2];\nconst tuple2 = [3, 4];\nconst tuple3 = [5, 6];\n\n// Add tuples to the set\nset.add(tuple1);\nset.add(tuple2);\nset.add(tuple3);\n\n// Attempt to add a duplicate tuple\nset.add([1, 2]);\n\n// Display size of the set\nconsole.log(set.size); // Outputs: 4\n\n// Check if a tuple is in the set\nconst hasTuple = [...set].some(tuple => JSON.stringify(tuple) === JSON.stringify([3, 4]));\nconsole.log(hasTuple); // Outputs: true\n\n// Remove a tuple\nset.delete(tuple2);\n\n// Display size of the set after removal\nconsole.log(set.size); // Outputs: 3\n\n// Iterate over the set\nset.forEach(tuple => {\n    console.log(tuple);\n});\n```"
  },
  {
    "task": "Write a program to find the common elements between two sets of country names.",
    "code": "```javascript\nconst set1 = new Set([\"USA\", \"Canada\", \"Mexico\", \"Brazil\"]);\nconst set2 = new Set([\"Argentina\", \"Brazil\", \"Canada\", \"Chile\"]);\n\nconst commonElements = new Set([...set1].filter(country => set2.has(country)));\n\nconsole.log(commonElements);\n```"
  },
  {
    "task": "Create a set of characters and demonstrate the use of the `issubset` method.",
    "code": "```javascript\nconst setA = new Set(['a', 'b', 'c']);\nconst setB = new Set(['a', 'b', 'c', 'd', 'e']);\n\nconst isSubset = [...setA].every(value => setB.has(value));\nconsole.log(isSubset);\n```"
  },
  {
    "task": "Implement a set to manage a collection of unique hashtags from social media posts.",
    "code": "```javascript\nclass HashtagManager {\n  constructor() {\n    this.hashtags = new Set();\n  }\n\n  addHashtag(hashtag) {\n    this.hashtags.add(hashtag);\n  }\n\n  removeHashtag(hashtag) {\n    this.hashtags.delete(hashtag);\n  }\n\n  hasHashtag(hashtag) {\n    return this.hashtags.has(hashtag);\n  }\n\n  getAllHashtags() {\n    return Array.from(this.hashtags);\n  }\n}\n\n// Example usage\nconst manager = new HashtagManager();\nmanager.addHashtag('#JavaScript');\nmanager.addHashtag('#Coding');\nmanager.removeHashtag('#JavaScript');\nconsole.log(manager.hasHashtag('#Coding')); // true\nconsole.log(manager.getAllHashtags()); // ['#Coding']\n```"
  },
  {
    "task": "Create a set and demonstrate how to copy it to another set.",
    "code": "```javascript\nconst originalSet = new Set([1, 2, 3, 4, 5]);\nconst copiedSet = new Set(originalSet);\n```"
  },
  {
    "task": "Write a function that accepts two sets and returns a new set with elements found in both.",
    "code": "```javascript\nfunction intersection(setA, setB) {\n    return new Set([...setA].filter(element => setB.has(element)));\n}\n```"
  },
  {
    "task": "Use a set to determine the unique items purchased in a day.",
    "code": "```javascript\nconst purchases = ['apple', 'banana', 'apple', 'orange', 'banana', 'grape'];\nconst uniqueItems = new Set(purchases);\nconsole.log([...uniqueItems]);\n```"
  },
  {
    "task": "Create a set of student IDs and demonstrate set comprehension to filter IDs.",
    "code": "```javascript\nconst studentIDs = new Set([101, 102, 103, 104, 105, 106, 107, 108, 109, 110]);\n\nconst filteredIDs = new Set([...studentIDs].filter(id => id > 105));\n\nconsole.log(filteredIDs);\n```"
  },
  {
    "task": "Write a program to check if a set of strings is a superset of another set.",
    "code": "```javascript\nfunction isSuperset(setA, setB) {\n    for (let elem of setB) {\n        if (!setA.has(elem)) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// Example usage\nconst setA = new Set(['apple', 'banana', 'cherry', 'date']);\nconst setB = new Set(['banana', 'cherry']);\n\nconsole.log(isSuperset(setA, setB)); // true\n```"
  },
  {
    "task": "Create a set of unique words from a text file.",
    "code": "```javascript\nconst fs = require('fs');\n\nfs.readFile('file.txt', 'utf8', (err, data) => {\n    if (err) {\n        console.error(err);\n        return;\n    }\n    const words = data.split(/\\s+/);\n    const uniqueWordsSet = new Set(words);\n    console.log(uniqueWordsSet);\n});\n```"
  },
  {
    "task": "Implement a set to store unique project identifiers and demonstrate membership testing.",
    "code": "```javascript\n// Create a new Set to store unique project identifiers\nconst projectIdentifiers = new Set();\n\n// Add some project identifiers to the set\nprojectIdentifiers.add('proj-101');\nprojectIdentifiers.add('proj-102');\nprojectIdentifiers.add('proj-103');\n\n// Demonstrate membership testing\nconst identifierToCheck = 'proj-101';\nif (projectIdentifiers.has(identifierToCheck)) {\n    console.log(`${identifierToCheck} is in the set.`);\n} else {\n    console.log(`${identifierToCheck} is not in the set.`);\n}\n```"
  },
  {
    "task": "Create a set and demonstrate the `symmetric_difference_update` method.",
    "code": "```javascript\nfunction symmetricDifferenceUpdate(setA, setB) {\n  for (let elem of setB) {\n    if (setA.has(elem)) {\n      setA.delete(elem);\n    } else {\n      setA.add(elem);\n    }\n  }\n}\n\nlet setA = new Set([1, 2, 3, 4]);\nlet setB = new Set([3, 4, 5, 6]);\n\nsymmetricDifferenceUpdate(setA, setB);\nconsole.log(setA);\n```"
  },
  {
    "task": "Write a function to remove all elements from a set that are also in another set.",
    "code": "```javascript\nfunction removeElements(set1, set2) {\n    for (let elem of set2) {\n        set1.delete(elem);\n    }\n}\n\n// Example usage:\nlet setA = new Set([1, 2, 3, 4, 5]);\nlet setB = new Set([2, 4]);\n\nremoveElements(setA, setB);\nconsole.log(setA); // Output: Set { 1, 3, 5 }\n```"
  },
  {
    "task": "Use a set to keep track of unique error codes from server logs.",
    "code": "```javascript\nconst errorCodes = new Set();\n\nfunction logError(code) {\n  errorCodes.add(code);\n}\n\nfunction getUniqueErrorCodes() {\n  return Array.from(errorCodes);\n}\n\n// Example usage\nlogError(404);\nlogError(500);\nlogError(404);\nconsole.log(getUniqueErrorCodes()); // Output: [404, 500]\n```"
  },
  {
    "task": "Create a set and demonstrate how to find all unique pairs of elements.",
    "code": "```javascript\nfunction findUniquePairs(array) {\n    const uniquePairs = new Set();\n    const uniqueElements = new Set(array);\n\n    uniqueElements.forEach((value1) => {\n        uniqueElements.forEach((value2) => {\n            if (value1 !== value2) {\n                const pair = [value1, value2].sort().join(',');\n                uniquePairs.add(pair);\n            }\n        });\n    });\n\n    return Array.from(uniquePairs).map(pair => pair.split(','));\n}\n\nconst array = [1, 2, 3, 4];\nconst uniquePairs = findUniquePairs(array);\nconsole.log(uniquePairs);\n```"
  },
  {
    "task": "Write a program to find the smallest element in a set of integers.",
    "code": "```javascript\nfunction findSmallestElement(setOfIntegers) {\n    return Math.min(...setOfIntegers);\n}\n\nconst integers = new Set([5, 3, 8, 1, 9]);\nconsole.log(findSmallestElement(integers));\n```"
  },
  {
    "task": "Create a set and demonstrate the `add` method with multiple elements.",
    "code": "```javascript\nconst mySet = new Set();\nmySet.add(1);\nmySet.add(2);\nmySet.add(3);\nconsole.log(mySet);\n```"
  },
  {
    "task": "Implement a set to manage a collection of unique author names.",
    "code": "```javascript\nclass AuthorSet {\n  constructor() {\n    this.authors = new Set();\n  }\n\n  addAuthor(name) {\n    this.authors.add(name);\n  }\n\n  deleteAuthor(name) {\n    this.authors.delete(name);\n  }\n\n  hasAuthor(name) {\n    return this.authors.has(name);\n  }\n\n  getAuthors() {\n    return Array.from(this.authors);\n  }\n}\n\n// Example usage\nconst authors = new AuthorSet();\nauthors.addAuthor(\"J.K. Rowling\");\nauthors.addAuthor(\"George R.R. Martin\");\nauthors.addAuthor(\"J.K. Rowling\"); // Duplicate, will not be added\nconsole.log(authors.getAuthors());\n```"
  },
  {
    "task": "Create a set of integers and demonstrate converting it to a sorted list.",
    "code": "```javascript\nconst integerSet = new Set([5, 1, 3, 8, 2]);\nconst sortedList = Array.from(integerSet).sort((a, b) => a - b);\nconsole.log(sortedList);\n```"
  },
  {
    "task": "Write a function that returns the union of multiple sets.",
    "code": "```javascript\nfunction unionOfSets(...sets) {\n    return sets.reduce((acc, set) => {\n        set.forEach(value => acc.add(value));\n        return acc;\n    }, new Set());\n}\n```"
  },
  {
    "task": "Use a set to identify unique characters in a string.",
    "code": "```javascript\nfunction getUniqueCharacters(str) {\n    return [...new Set(str)].join('');\n}\n\n// Example usage:\nconst uniqueChars = getUniqueCharacters(\"hello world\");\nconsole.log(uniqueChars); // Output: \"helo wrd\"\n```"
  },
  {
    "task": "Create a set of prime numbers and demonstrate basic set operations.",
    "code": "```javascript\n// Create a set of prime numbers\nconst primeNumbers = new Set([2, 3, 5, 7, 11, 13, 17, 19, 23, 29]);\n\n// Add a new prime number to the set\nprimeNumbers.add(31);\n\n// Check if a number is in the set\nconst hasFive = primeNumbers.has(5);\n\n// Remove a number from the set\nprimeNumbers.delete(2);\n\n// Get the number of elements in the set\nconst size = primeNumbers.size;\n\n// Convert the set to an array\nconst primeArray = Array.from(primeNumbers);\n\n// Log results\nconsole.log(primeNumbers);\nconsole.log(hasFive);\nconsole.log(size);\nconsole.log(primeArray);\n```"
  },
  {
    "task": "Create a set and demonstrate how to check for non-membership.",
    "code": "```javascript\nconst mySet = new Set([1, 2, 3, 4, 5]);\n\nconst element = 6;\nconst isNotMember = !mySet.has(element);\n\nconsole.log(isNotMember); // true, since 6 is not in the set\n```"
  },
  {
    "task": "Write a program to find the largest element in a set of numbers.",
    "code": "```javascript\nfunction findLargestInSet(numbers) {\n    if (numbers.size === 0) return null;\n    return Math.max(...numbers);\n}\n\nconst numberSet = new Set([5, 3, 9, 1, 4]);\nconst largest = findLargestInSet(numberSet);\nconsole.log(largest);\n```"
  },
  {
    "task": "Create a set of unique movie titles and demonstrate membership testing.",
    "code": "```javascript\nconst movieTitles = new Set();\n\n// Adding unique movie titles to the set\nmovieTitles.add('Inception');\nmovieTitles.add('The Matrix');\nmovieTitles.add('Interstellar');\nmovieTitles.add('The Dark Knight');\n\n// Demonstrate membership testing\nconst testTitle = 'Inception';\nconst isMember = movieTitles.has(testTitle);\n\nconsole.log(`Is \"${testTitle}\" in the set?`, isMember);\n```"
  },
  {
    "task": "Implement a set to store unique keys from a dictionary.",
    "code": "```javascript\nconst dictionary = {\n    key1: 'value1',\n    key2: 'value2',\n    key3: 'value3'\n};\n\nconst uniqueKeys = new Set(Object.keys(dictionary));\n```"
  },
  {
    "task": "Create a set and demonstrate the `difference_update` method.",
    "code": "```javascript\nlet setA = new Set([1, 2, 3, 4, 5]);\nlet setB = new Set([4, 5, 6, 7, 8]);\n\nsetB.forEach(value => {\n  setA.delete(value);\n});\n\nconsole.log(setA);\n```"
  },
  {
    "task": "Write a function to merge multiple sets into a single set.",
    "code": "```javascript\nfunction mergeSets(...sets) {\n    return new Set(sets.flat());\n}\n```"
  },
  {
    "task": "Use a set to filter out duplicate letters from a word.",
    "code": "```javascript\nfunction removeDuplicateLetters(word) {\n  return [...new Set(word)].join('');\n}\n\nconsole.log(removeDuplicateLetters(\"programming\")); // Output: \"progamin\"\n```"
  },
  {
    "task": "Create a set and demonstrate the use of the `isdisjoint` method.",
    "code": "```javascript\nconst setA = new Set([1, 2, 3, 4, 5]);\nconst setB = new Set([6, 7, 8, 9, 10]);\n\nfunction isDisjoint(set1, set2) {\n  for (let elem of set1) {\n    if (set2.has(elem)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nconsole.log(isDisjoint(setA, setB)); // true\n```"
  },
  {
    "task": "Write a program to find all elements that are only in one of two sets.",
    "code": "```javascript\nfunction findUniqueElements(setA, setB) {\n    const uniqueA = new Set([...setA].filter(x => !setB.has(x)));\n    const uniqueB = new Set([...setB].filter(x => !setA.has(x)));\n    return new Set([...uniqueA, ...uniqueB]);\n}\n\n// Example usage:\nconst set1 = new Set([1, 2, 3, 4]);\nconst set2 = new Set([3, 4, 5, 6]);\nconst uniqueElements = findUniqueElements(set1, set2);\nconsole.log(uniqueElements); // Output: Set { 1, 2, 5, 6 }\n```"
  },
  {
    "task": "Create a set of unique book authors and demonstrate basic set operations.",
    "code": "```javascript\n// Create a set of unique book authors\nconst authors = new Set();\n\n// Add authors to the set\nauthors.add('J.K. Rowling');\nauthors.add('George R.R. Martin');\nauthors.add('J.R.R. Tolkien');\nauthors.add('Agatha Christie');\n\n// Demonstrate basic set operations\n\n// Check if a certain author exists in the set\nconst hasAuthor = authors.has('J.K. Rowling');\n\n// Remove an author from the set\nauthors.delete('Agatha Christie');\n\n// Get the number of authors in the set\nconst numberOfAuthors = authors.size;\n\n// Convert the set to an array\nconst authorsArray = Array.from(authors);\n\n// Clear all authors from the set\nauthors.clear();\n```"
  },
  {
    "task": "Implement a set to store unique phone numbers and check for duplicates.",
    "code": "```javascript\nconst phoneNumbers = new Set();\n\n// Function to add phone number and check for duplicates\nfunction addPhoneNumber(number) {\n    if (phoneNumbers.has(number)) {\n        console.log(`Duplicate found: ${number}`);\n    } else {\n        phoneNumbers.add(number);\n        console.log(`Added: ${number}`);\n    }\n}\n\n// Example usage\naddPhoneNumber('123-456-7890');\naddPhoneNumber('987-654-3210');\naddPhoneNumber('123-456-7890'); // This should log a duplicate message\n```"
  },
  {
    "task": "Create a set of floating-point numbers and demonstrate rounding each element.",
    "code": "```javascript\nconst numbers = new Set([3.14159, 2.71828, 1.61803, 0.57721]);\n\nconst roundedNumbers = new Set();\nnumbers.forEach(num => {\n  roundedNumbers.add(Math.round(num));\n});\n\nconsole.log(roundedNumbers);\n```"
  },
  {
    "task": "Write a function that returns a set of all vowels present in a given sentence.",
    "code": "```javascript\nfunction getVowels(sentence) {\n    const vowels = new Set();\n    const vowelSet = new Set(['a', 'e', 'i', 'o', 'u']);\n    for (let char of sentence.toLowerCase()) {\n        if (vowelSet.has(char)) {\n            vowels.add(char);\n        }\n    }\n    return vowels;\n}\n```"
  },
  {
    "task": "Use a set to track unique session IDs for a web application.",
    "code": "```javascript\nconst sessionIDs = new Set();\n\n// Function to add a session ID\nfunction addSessionID(sessionID) {\n    sessionIDs.add(sessionID);\n}\n\n// Function to check if a session ID exists\nfunction hasSessionID(sessionID) {\n    return sessionIDs.has(sessionID);\n}\n\n// Function to remove a session ID\nfunction removeSessionID(sessionID) {\n    sessionIDs.delete(sessionID);\n}\n\n// Example usage\naddSessionID('abc123');\nconsole.log(hasSessionID('abc123')); // true\nremoveSessionID('abc123');\nconsole.log(hasSessionID('abc123')); // false\n```"
  },
  {
    "task": "Create a set of unique city names and demonstrate set operations with it.",
    "code": "```javascript\n// Create a set of unique city names\nconst citySet = new Set(['New York', 'Los Angeles', 'Chicago', 'Houston', 'Phoenix']);\n\n// Add a new city\ncitySet.add('San Francisco');\n\n// Remove a city\ncitySet.delete('Houston');\n\n// Check if a city is in the set\nconst hasChicago = citySet.has('Chicago');\n\n// Get the size of the set\nconst setSize = citySet.size;\n\n// Display the set, check result, and size\nconsole.log(citySet);\nconsole.log('Contains Chicago:', hasChicago);\nconsole.log('Set Size:', setSize);\n```"
  },
  {
    "task": "Write a program to find the common elements in three sets.",
    "code": "```javascript\nfunction findCommonElements(set1, set2, set3) {\n  return [...set1].filter(element => set2.has(element) && set3.has(element));\n}\n\nconst set1 = new Set([1, 2, 3, 4]);\nconst set2 = new Set([2, 3, 5, 6]);\nconst set3 = new Set([3, 4, 5, 6]);\n\nconst commonElements = findCommonElements(set1, set2, set3);\nconsole.log(commonElements);\n```"
  },
  {
    "task": "Create a set and demonstrate how to remove an element by its value.",
    "code": "```javascript\nconst mySet = new Set([1, 2, 3, 4, 5]);\nmySet.delete(3);\nconsole.log(mySet);\n```"
  },
  {
    "task": "Implement a set to store a collection of unique ISBN numbers.",
    "code": "```javascript\nconst isbnSet = new Set();\n\n// Example usage:\nisbnSet.add('978-3-16-148410-0');\nisbnSet.add('978-1-4028-9462-6');\nisbnSet.add('978-0-596-52068-7');\n\n// Trying to add a duplicate ISBN\nisbnSet.add('978-3-16-148410-0'); // This will not be added again\n\n// Output the set\nconsole.log(isbnSet);\n```"
  },
  {
    "task": "Create a set and demonstrate the `intersection_update` method.",
    "code": "```javascript\nconst setA = new Set([1, 2, 3, 4]);\nconst setB = new Set([3, 4, 5, 6]);\n\nsetA.forEach(value => {\n  if (!setB.has(value)) {\n    setA.delete(value);\n  }\n});\n\nconsole.log(setA); // Output should be: Set { 3, 4 }\n```"
  },
  {
    "task": "Write a function to generate a set of all unique elements in a list.",
    "code": "```javascript\nfunction uniqueElements(list) {\n    return new Set(list);\n}\n```"
  },
  {
    "task": "Use a set to determine the unique characters in two strings.",
    "code": "```javascript\nfunction uniqueCharacters(str1, str2) {\n    const set1 = new Set(str1);\n    const set2 = new Set(str2);\n    const uniqueChars = new Set([...set1, ...set2]);\n    return Array.from(uniqueChars).join('');\n}\n\nconst string1 = \"hello\";\nconst string2 = \"world\";\nconsole.log(uniqueCharacters(string1, string2));\n```"
  },
  {
    "task": "Create a set of unique animal names and demonstrate the `discard` method.",
    "code": "```javascript\nlet animalSet = new Set(['lion', 'tiger', 'bear', 'tiger', 'lion']);\nanimalSet.delete('tiger');\nconsole.log(animalSet);\n```"
  },
  {
    "task": "Write a program to find all elements present in the first set but not in the second.",
    "code": "```javascript\nfunction difference(setA, setB) {\n    let differenceSet = new Set([...setA].filter(x => !setB.has(x)));\n    return differenceSet;\n}\n\nconst set1 = new Set([1, 2, 3, 4, 5]);\nconst set2 = new Set([4, 5, 6, 7, 8]);\n\nconst result = difference(set1, set2);\nconsole.log(result);\n```"
  },
  {
    "task": "Create a set of integers and demonstrate using it to eliminate duplicates from a list.",
    "code": "```javascript\nconst numbers = [1, 2, 2, 3, 4, 4, 5];\nconst uniqueNumbersSet = new Set(numbers);\nconst uniqueNumbersArray = Array.from(uniqueNumbersSet);\nconsole.log(uniqueNumbersArray);\n```"
  },
  {
    "task": "Implement a set to manage a collection of unique car models.",
    "code": "```javascript\nclass CarModels {\n  constructor() {\n    this.models = new Set();\n  }\n\n  addModel(model) {\n    this.models.add(model);\n  }\n\n  removeModel(model) {\n    this.models.delete(model);\n  }\n\n  hasModel(model) {\n    return this.models.has(model);\n  }\n\n  getAllModels() {\n    return Array.from(this.models);\n  }\n}\n\n// Example usage:\nconst carModels = new CarModels();\ncarModels.addModel('Tesla Model S');\ncarModels.addModel('Ford Mustang');\ncarModels.addModel('Chevrolet Camaro');\n\nconsole.log(carModels.hasModel('Tesla Model S')); // true\nconsole.log(carModels.getAllModels()); // ['Tesla Model S', 'Ford Mustang', 'Chevrolet Camaro']\n\ncarModels.removeModel('Ford Mustang');\nconsole.log(carModels.getAllModels()); // ['Tesla Model S', 'Chevrolet Camaro']\n```"
  },
  {
    "task": "Create a set and demonstrate the use of the `clear` method.",
    "code": "```javascript\nconst mySet = new Set([1, 2, 3, 4, 5]);\nmySet.clear();\n```"
  },
  {
    "task": "Write a function that finds the intersection of multiple sets.",
    "code": "```javascript\nfunction intersectionOfSets(...sets) {\n    if (sets.length === 0) return new Set();\n    return sets.reduce((acc, set) => new Set([...acc].filter(x => set.has(x))));\n}\n\n// Example usage:\nconst set1 = new Set([1, 2, 3, 4]);\nconst set2 = new Set([3, 4, 5, 6]);\nconst set3 = new Set([4, 5, 6, 7]);\n\nconst intersection = intersectionOfSets(set1, set2, set3);\nconsole.log(intersection); // Output: Set { 4 }\n```"
  },
  {
    "task": "Use a set to identify unique words in a paragraph.",
    "code": "```javascript\nfunction uniqueWords(paragraph) {\n    const words = paragraph.match(/\\b\\w+\\b/g);\n    const uniqueWordsSet = new Set(words);\n    return Array.from(uniqueWordsSet);\n}\n\nconst paragraph = \"Example paragraph with some repeated words. Words that are unique in this paragraph.\";\nconst uniqueWordsArray = uniqueWords(paragraph);\nconsole.log(uniqueWordsArray);\n```"
  },
  {
    "task": "Create a set of unique country codes and demonstrate membership testing.",
    "code": "```javascript\nconst countryCodes = new Set(['US', 'CA', 'MX', 'DE', 'FR']);\n\nfunction isMember(code) {\n    return countryCodes.has(code);\n}\n\nconsole.log(isMember('US')); // true\nconsole.log(isMember('JP')); // false\n```"
  },
  {
    "task": "Write a program to find the union of two sets and return it as a list.",
    "code": "```javascript\nfunction unionOfSets(setA, setB) {\n    const unionSet = new Set([...setA, ...setB]);\n    return Array.from(unionSet);\n}\n\nconst set1 = new Set([1, 2, 3]);\nconst set2 = new Set([3, 4, 5]);\nconsole.log(unionOfSets(set1, set2)); // Output: [1, 2, 3, 4, 5]\n```"
  },
  {
    "task": "Create a set and demonstrate using it to check if all elements of another set are present.",
    "code": "```javascript\nconst setA = new Set([1, 2, 3, 4, 5]);\nconst setB = new Set([2, 3]);\n\nconst isSubset = [...setB].every(element => setA.has(element));\n\nconsole.log(isSubset); // Output: true or false\n```"
  },
  {
    "task": "Implement a set to store unique coupon codes and demonstrate adding new codes.",
    "code": "```javascript\nconst couponCodes = new Set();\n\ncouponCodes.add('SAVE10');\ncouponCodes.add('WELCOME20');\ncouponCodes.add('FREESHIP');\ncouponCodes.add('SAVE10'); // Duplicate code, will not be added\n\nconsole.log(couponCodes);\n```"
  },
  {
    "task": "Create a set and demonstrate the `copy` method.",
    "code": "```javascript\n// Note: JavaScript's Set object does not have a built-in `copy` method.\n// We can demonstrate copying a Set in JavaScript by creating a new Set from the existing one.\n\nconst originalSet = new Set([1, 2, 3, 4, 5]);\nconst copiedSet = new Set(originalSet);\n\nconsole.log(copiedSet); // Output: Set { 1, 2, 3, 4, 5 }\n```"
  },
  {
    "task": "Write a function to remove duplicates from a list using a set.",
    "code": "```javascript\nfunction removeDuplicates(arr) {\n    return [...new Set(arr)];\n}\n```"
  },
  {
    "task": "Use a set to identify unique numbers in a sequence.",
    "code": "```javascript\nconst numbers = [1, 2, 2, 3, 4, 4, 5];\nconst uniqueNumbers = new Set(numbers);\nconsole.log([...uniqueNumbers]);\n```"
  },
  {
    "task": "Create a set of unique fruit names and demonstrate set operations with it.",
    "code": "```javascript\n// Create a set of unique fruit names\nconst fruitSet = new Set(['apple', 'banana', 'orange', 'grape', 'mango']);\n\n// Add a new fruit to the set\nfruitSet.add('peach');\n\n// Attempt to add a duplicate fruit to the set\nfruitSet.add('apple');\n\n// Remove a fruit from the set\nfruitSet.delete('banana');\n\n// Check if a fruit is in the set\nconst hasOrange = fruitSet.has('orange');\n\n// Get the size of the set\nconst size = fruitSet.size;\n\n// Iterate over the set and log each fruit\nfruitSet.forEach(fruit => {\n    console.log(fruit);\n});\n```"
  }
]