[
  {
    "task": "Write a function that reads a file and handles the exception if the file is not found.",
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        console.log(data);\n    } catch (err) {\n        if (err.code === 'ENOENT') {\n            console.error('File not found');\n        } else {\n            console.error('An error occurred:', err);\n        }\n    }\n}\n\n// Example usage\nreadFile('path/to/file.txt');\n```"
  },
  {
    "task": "Create a program that divides two numbers and catches any division by zero errors.",
    "code": "```javascript\nfunction divideNumbers(a, b) {\n    try {\n        if (b === 0) {\n            throw new Error(\"Division by zero is not allowed.\");\n        }\n        return a / b;\n    } catch (error) {\n        console.error(error.message);\n    }\n}\n\n// Example usage:\nconsole.log(divideNumbers(10, 2)); // Outputs: 5\nconsole.log(divideNumbers(10, 0)); // Outputs: Division by zero is not allowed.\n```"
  },
  {
    "task": "Design a function to parse an integer from a string and manage invalid input exceptions.",
    "code": "```javascript\nfunction parseIntegerFromString(input) {\n    try {\n        const parsedNumber = parseInt(input, 10);\n        if (isNaN(parsedNumber)) {\n            throw new Error(\"Invalid input: not a valid integer.\");\n        }\n        return parsedNumber;\n    } catch (error) {\n        console.error(error.message);\n        return null;\n    }\n}\n```"
  },
  {
    "task": "Implement an API call and catch exceptions related to network errors or timeouts.",
    "code": "```javascript\nasync function fetchData(url) {\n    try {\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error(`Failed to fetch data: ${error.message}`);\n        return null;\n    }\n}\n\n// Example usage: fetchData('https://api.example.com/data');\n```"
  },
  {
    "task": "Develop a program that opens a database connection and handles any connection failure exceptions.",
    "code": "```javascript\nfunction openDatabaseConnection() {\n    try {\n        // Simulate opening a database connection\n        let isConnected = Math.random() > 0.5; // Randomly simulates success or failure\n        if (!isConnected) {\n            throw new Error(\"Connection failed.\");\n        }\n        console.log(\"Database connection successful.\");\n    } catch (error) {\n        console.error(\"Error: \" + error.message);\n    } finally {\n        console.log(\"Attempt to open database connection completed.\");\n    }\n}\n\nopenDatabaseConnection();\n```"
  },
  {
    "task": "Write a function that accesses an array by index and catches out-of-bounds exceptions.",
    "code": "```javascript\nfunction accessArrayElement(array, index) {\n    try {\n        if (index < 0 || index >= array.length) {\n            throw new RangeError('Index out of bounds');\n        }\n        return array[index];\n    } catch (error) {\n        console.error(error.message);\n        return null;\n    }\n}\n\n// Example usage:\n// const arr = [1, 2, 3];\n// console.log(accessArrayElement(arr, 2)); // Outputs: 3\n// console.log(accessArrayElement(arr, 5)); // Outputs: Index out of bounds\n```"
  },
  {
    "task": "Create a function that converts a string to a date object and manages format exceptions.",
    "code": "```javascript\nfunction convertToDate(dateString) {\n    try {\n        const date = new Date(dateString);\n        if (isNaN(date.getTime())) {\n            throw new Error(\"Invalid date format\");\n        }\n        return date;\n    } catch (error) {\n        console.error(\"Error:\", error.message);\n        return null;\n    }\n}\n```"
  },
  {
    "task": "Design a program that writes data to a file and catches any file permission exceptions.",
    "code": "```javascript\nconst fs = require('fs');\nconst filePath = 'output.txt';\nconst data = 'This is some data to write to the file.';\n\ntry {\n    fs.writeFileSync(filePath, data);\n    console.log('Data written successfully to file.');\n} catch (error) {\n    if (error.code === 'EACCES') {\n        console.error('Permission denied. Unable to write to file.');\n    } else {\n        console.error('An error occurred:', error.message);\n    }\n}\n```"
  },
  {
    "task": "Implement a module that retrieves data from a URL and handles malformed URL exceptions.",
    "code": "```javascript\nfunction fetchDataFromUrl(url) {\n    try {\n        const parsedUrl = new URL(url); // This will throw if the URL is malformed\n        return fetch(parsedUrl)\n            .then(response => {\n                if (!response.ok) {\n                    throw new Error('Network response was not ok');\n                }\n                return response.json();\n            });\n    } catch (error) {\n        if (error instanceof TypeError) {\n            console.error('Malformed URL:', error.message);\n        } else {\n            console.error('Error fetching data:', error.message);\n        }\n        return Promise.reject(error);\n    }\n}\n\n// Example usage\nfetchDataFromUrl('https://example.com/data')\n    .then(data => console.log('Data retrieved:', data))\n    .catch(error => console.error('Error:', error));\n```"
  },
  {
    "task": "Write a function to calculate the square root of a number and catch any negative input exceptions.",
    "code": "```javascript\nfunction calculateSquareRoot(number) {\n    try {\n        if (number < 0) {\n            throw new Error(\"Negative input not allowed\");\n        }\n        return Math.sqrt(number);\n    } catch (error) {\n        return error.message;\n    }\n}\n\n// Example usage:\nconsole.log(calculateSquareRoot(9));  // Output: 3\nconsole.log(calculateSquareRoot(-1)); // Output: Negative input not allowed\n```"
  },
  {
    "task": "Develop a program that sends an email and manages exceptions for invalid email addresses.",
    "code": "```javascript\nfunction sendEmail(emailAddress) {\n    return new Promise((resolve, reject) => {\n        if (!validateEmail(emailAddress)) {\n            reject(new Error('Invalid email address'));\n        } else {\n            // Simulate email sending with a timeout\n            setTimeout(() => {\n                resolve('Email sent successfully');\n            }, 1000);\n        }\n    });\n}\n\nfunction validateEmail(email) {\n    const re = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return re.test(email);\n}\n\nasync function main() {\n    const emailAddress = \"example@example.com\"; // Replace with dynamic input if needed\n    try {\n        const result = await sendEmail(emailAddress);\n        console.log(result);\n    } catch (error) {\n        console.error('Error:', error.message);\n    }\n}\n\nmain();\n```"
  },
  {
    "task": "Create a calculator application that handles invalid operations gracefully.",
    "code": "```javascript\nclass Calculator {\n  static add(a, b) {\n    return a + b;\n  }\n\n  static subtract(a, b) {\n    return a - b;\n  }\n\n  static multiply(a, b) {\n    return a * b;\n  }\n\n  static divide(a, b) {\n    if (b === 0) {\n      throw new Error(\"Division by zero is not allowed.\");\n    }\n    return a / b;\n  }\n\n  static operate(operation, a, b) {\n    try {\n      switch (operation) {\n        case 'add':\n          return Calculator.add(a, b);\n        case 'subtract':\n          return Calculator.subtract(a, b);\n        case 'multiply':\n          return Calculator.multiply(a, b);\n        case 'divide':\n          return Calculator.divide(a, b);\n        default:\n          throw new Error(\"Invalid operation.\");\n      }\n    } catch (error) {\n      console.error(error.message);\n      return null;\n    }\n  }\n}\n\nconsole.log(Calculator.operate('add', 5, 3));       // 8\nconsole.log(Calculator.operate('divide', 10, 0));   // Error: Division by zero is not allowed.\nconsole.log(Calculator.operate('modulus', 10, 3));  // Error: Invalid operation.\n```"
  },
  {
    "task": "Design a function that tries to parse JSON data and catches parsing errors.",
    "code": "```javascript\nfunction parseJsonData(jsonString) {\n    try {\n        return JSON.parse(jsonString);\n    } catch (error) {\n        console.error('Parsing error:', error.message);\n        return null;\n    }\n}\n```"
  },
  {
    "task": "Implement a system that processes user input and handles any type conversion exceptions.",
    "code": "```javascript\nfunction processInput(input) {\n    try {\n        // Attempt to convert input to a number\n        let number = parseFloat(input);\n        if (isNaN(number)) {\n            throw new Error('Invalid number format');\n        }\n        // Further processing with the number\n        console.log('Processed number:', number);\n    } catch (error) {\n        // Handle any exceptions during type conversion\n        console.error('Error processing input:', error.message);\n    }\n}\n\n// Example usage\nprocessInput('123.45'); // Valid input\nprocessInput('not a number'); // Invalid input\n```"
  },
  {
    "task": "Write a function that fetches data from a database and manages exceptions for missing records.",
    "code": "```javascript\nasync function fetchDataFromDatabase(query) {\n    try {\n        const result = await database.fetch(query);\n        if (!result) {\n            throw new Error('Record not found');\n        }\n        return result;\n    } catch (error) {\n        console.error('An error occurred:', error.message);\n        throw error;\n    }\n}\n```"
  },
  {
    "task": "Create a program that connects to a remote server and handles authentication failure exceptions.",
    "code": "```javascript\nfunction connectToServer(serverUrl, credentials) {\n    return new Promise((resolve, reject) => {\n        // Simulate server connection and authentication\n        setTimeout(() => {\n            const isAuthenticated = Math.random() > 0.5; // Randomly simulate success or failure\n            if (isAuthenticated) {\n                resolve(\"Connected and authenticated successfully.\");\n            } else {\n                reject(new Error(\"Authentication failed.\"));\n            }\n        }, 1000);\n    });\n}\n\nasync function main() {\n    const serverUrl = \"https://example.com\";\n    const credentials = { username: \"user\", password: \"pass\" };\n\n    try {\n        const message = await connectToServer(serverUrl, credentials);\n        console.log(message);\n    } catch (error) {\n        console.error(\"Error connecting to server:\", error.message);\n    }\n}\n\nmain();\n```"
  },
  {
    "task": "Develop a function to download a file from the internet and handle file not found exceptions.",
    "code": "```javascript\nasync function downloadFile(url) {\n    try {\n        let response = await fetch(url);\n        if (!response.ok) {\n            throw new Error('File not found');\n        }\n        let data = await response.blob();\n        let downloadUrl = URL.createObjectURL(data);\n        let a = document.createElement('a');\n        a.href = downloadUrl;\n        a.download = 'downloadedFile';\n        document.body.appendChild(a);\n        a.click();\n        a.remove();\n        URL.revokeObjectURL(downloadUrl);\n    } catch (error) {\n        if (error.message === 'File not found') {\n            console.error('Error: The file could not be found.');\n        } else {\n            console.error('An unexpected error occurred:', error);\n        }\n    }\n}\n```"
  },
  {
    "task": "Design a program that attempts to connect to an API and handles rate limit exceptions.",
    "code": "```javascript\nasync function connectToAPI() {\n    try {\n        const response = await fetch('https://api.example.com/data');\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log(data);\n    } catch (error) {\n        if (error.message.includes('429')) {\n            console.error('Rate limit exceeded. Please try again later.');\n        } else {\n            console.error('An error occurred:', error.message);\n        }\n    }\n}\n\nconnectToAPI();\n```"
  },
  {
    "task": "Write a function that reads from a configuration file and manages key not found exceptions.",
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readConfig(filePath, key) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        const config = JSON.parse(data);\n        \n        if (!(key in config)) {\n            throw new Error(`Key '${key}' not found`);\n        }\n        \n        return config[key];\n    } catch (err) {\n        console.error(`Error: ${err.message}`);\n        return null;\n    }\n}\n```"
  },
  {
    "task": "Create an application that processes a list of tasks and catches any task execution exceptions.",
    "code": "```javascript\nclass Task {\n    constructor(name, executeFn) {\n        this.name = name;\n        this.execute = executeFn;\n    }\n}\n\nconst tasks = [\n    new Task(\"Task 1\", () => { console.log(\"Executing Task 1\"); }),\n    new Task(\"Task 2\", () => { throw new Error(\"Error in Task 2\"); }),\n    new Task(\"Task 3\", () => { console.log(\"Executing Task 3\"); })\n];\n\nfunction processTasks(taskList) {\n    taskList.forEach(task => {\n        try {\n            console.log(`Starting ${task.name}`);\n            task.execute();\n            console.log(`${task.name} completed successfully`);\n        } catch (error) {\n            console.error(`Exception occurred while executing ${task.name}: ${error.message}`);\n        }\n    });\n}\n\nprocessTasks(tasks);\n```"
  },
  {
    "task": "Implement a program that performs batch processing and handles individual item processing exceptions.",
    "code": "```javascript\nfunction processItem(item) {\n  if (Math.random() > 0.7) {\n    throw new Error(`Failed to process item: ${item}`);\n  }\n  return `Processed item: ${item}`;\n}\n\nfunction processBatch(items) {\n  items.forEach(item => {\n    try {\n      const result = processItem(item);\n      console.log(result);\n    } catch (error) {\n      console.error(error.message);\n    }\n  });\n}\n\nconst itemsToProcess = ['item1', 'item2', 'item3', 'item4', 'item5'];\nprocessBatch(itemsToProcess);\n```"
  },
  {
    "task": "Develop a function that performs mathematical operations and catches arithmetic exceptions.",
    "code": "```javascript\nfunction performOperation(a, b, operation) {\n    try {\n        switch (operation) {\n            case 'add':\n                return a + b;\n            case 'subtract':\n                return a - b;\n            case 'multiply':\n                return a * b;\n            case 'divide':\n                if (b === 0) {\n                    throw new Error('Division by zero');\n                }\n                return a / b;\n            default:\n                throw new Error('Invalid operation');\n        }\n    } catch (error) {\n        console.error('Error:', error.message);\n    }\n}\n\n// Example usage:\nconsole.log(performOperation(10, 5, 'add')); // Output: 15\nconsole.log(performOperation(10, 0, 'divide')); // Output: Error: Division by zero\n```"
  },
  {
    "task": "Write a program that logs error messages when exceptions occur during data processing.",
    "code": "```javascript\nfunction processData(data) {\n    try {\n        // Simulate data processing\n        if (typeof data !== 'string') {\n            throw new Error('Invalid data type');\n        }\n        console.log('Data processed successfully:', data);\n    } catch (error) {\n        console.error('Error processing data:', error.message);\n    }\n}\n\n// Example usage\nprocessData('Valid data');    // Successful processing\nprocessData(123);             // Error: Invalid data type\n```"
  },
  {
    "task": "Create a script that monitors system resources and handles exceptions when limits are exceeded.",
    "code": "```javascript\nfunction monitorSystemResources() {\n    try {\n        const memoryUsage = process.memoryUsage().heapUsed / 1024 / 1024;\n        const cpuUsage = process.cpuUsage().system / 1000000;\n\n        if (memoryUsage > 100) {\n            throw new Error('Memory usage exceeded 100 MB limit');\n        }\n\n        if (cpuUsage > 80) {\n            throw new Error('CPU usage exceeded 80% limit');\n        }\n\n        console.log(`Memory Usage: ${memoryUsage.toFixed(2)} MB`);\n        console.log(`CPU Usage: ${cpuUsage.toFixed(2)}%`);\n    } catch (error) {\n        console.error('Resource monitoring error:', error.message);\n    }\n}\n\nsetInterval(monitorSystemResources, 5000);\n```"
  },
  {
    "task": "Design a function that validates user input and manages any format exceptions.",
    "code": "```javascript\nfunction validateUserInput(input) {\n    try {\n        if (typeof input !== 'string') {\n            throw new TypeError('Input must be a string');\n        }\n\n        if (input.trim() === '') {\n            throw new Error('Input cannot be empty');\n        }\n\n        // Additional format validation logic can be added here\n\n        return 'Input is valid';\n    } catch (error) {\n        return `Validation error: ${error.message}`;\n    }\n}\n```"
  },
  {
    "task": "Implement a service that interacts with third-party APIs and handles unexpected response exceptions.",
    "code": "```javascript\nasync function fetchDataFromAPI(url) {\n    try {\n        let response = await fetch(url);\n        if (!response.ok) {\n            throw new Error('Network response was not ok');\n        }\n        let data = await response.json();\n        return data;\n    } catch (error) {\n        console.error('There was a problem with the fetch operation:', error);\n        throw error;\n    }\n}\n\nasync function main() {\n    const apiUrl = 'https://api.example.com/data';\n    try {\n        const data = await fetchDataFromAPI(apiUrl);\n        console.log('Data received:', data);\n    } catch (error) {\n        console.error('Error in API interaction:', error);\n    }\n}\n\nmain();\n```"
  },
  {
    "task": "Write a function that uploads files to a server and handles exceptions for unsupported file types.",
    "code": "```javascript\nfunction uploadFile(file) {\n    const supportedFileTypes = ['image/jpeg', 'image/png', 'application/pdf'];\n\n    try {\n        if (!supportedFileTypes.includes(file.type)) {\n            throw new Error('Unsupported file type');\n        }\n        // Simulate file upload process\n        console.log('Uploading file:', file.name);\n        // Assume the file upload process happens here\n        console.log('File uploaded successfully');\n    } catch (error) {\n        console.error('File upload failed:', error.message);\n    }\n}\n\n// Example usage:\n// const file = { name: 'example.txt', type: 'text/plain' };\n// uploadFile(file);\n```"
  },
  {
    "task": "Create a program that simulates network traffic and manages packet loss exceptions.",
    "code": "```javascript\nclass NetworkTrafficSimulator {\n    constructor(packetLossProbability) {\n        this.packetLossProbability = packetLossProbability;\n    }\n\n    simulatePacketTransmission() {\n        try {\n            if (Math.random() < this.packetLossProbability) {\n                throw new Error(\"Packet lost during transmission.\");\n            }\n            console.log(\"Packet transmitted successfully.\");\n        } catch (error) {\n            console.error(\"Error:\", error.message);\n        }\n    }\n\n    startSimulation(numberOfPackets) {\n        for (let i = 0; i < numberOfPackets; i++) {\n            this.simulatePacketTransmission();\n        }\n    }\n}\n\nconst simulator = new NetworkTrafficSimulator(0.3);\nsimulator.startSimulation(10);\n```"
  },
  {
    "task": "Develop a function that processes XML data and catches any structural exceptions.",
    "code": "```javascript\nfunction processXmlData(xmlString) {\n    try {\n        const parser = new DOMParser();\n        const xmlDoc = parser.parseFromString(xmlString, \"text/xml\");\n\n        const parseError = xmlDoc.getElementsByTagName(\"parsererror\");\n        if (parseError.length > 0) {\n            throw new Error(\"XML Parsing Error: Invalid XML structure.\");\n        }\n\n        // Process the XML document here\n\n        return \"XML processed successfully\";\n    } catch (error) {\n        console.error(\"Error processing XML:\", error.message);\n        return null;\n    }\n}\n\n// Example usage:\nconst xmlData = '<root><element>value</element></root>';\nprocessXmlData(xmlData);\n```"
  },
  {
    "task": "Design a program that handles exceptions when accessing environment variables.",
    "code": "```javascript\nfunction getEnvVariable(key) {\n    try {\n        const value = process.env[key];\n        if (value === undefined) {\n            throw new Error(`Environment variable ${key} not found`);\n        }\n        return value;\n    } catch (error) {\n        console.error(`Error accessing environment variable: ${error.message}`);\n        return null;\n    }\n}\n\n// Example usage:\nconst myEnvVar = getEnvVariable('MY_ENV_VAR');\nconsole.log('Value:', myEnvVar);\n```"
  },
  {
    "task": "Write a function that calculates factorial and manages exceptions for negative input values.",
    "code": "```javascript\nfunction factorial(n) {\n    if (n < 0) {\n        throw new Error(\"Input must be a non-negative integer.\");\n    }\n    if (n === 0 || n === 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n\ntry {\n    console.log(factorial(5)); // 120\n    console.log(factorial(-1)); // Throws error\n} catch (error) {\n    console.error(error.message);\n}\n```"
  },
  {
    "task": "Create a software tool that converts file formats and handles unsupported format exceptions.",
    "code": "```javascript\nclass FormatConverter {\n  constructor(supportedFormats) {\n    this.supportedFormats = supportedFormats;\n  }\n\n  convert(file, targetFormat) {\n    try {\n      if (!this.supportedFormats.includes(targetFormat)) {\n        throw new Error(`Unsupported format: ${targetFormat}`);\n      }\n      // Simulate format conversion\n      console.log(`Converting ${file} to ${targetFormat}...`);\n      // Conversion logic would go here\n      return `Converted ${file} to ${targetFormat}`;\n    } catch (error) {\n      console.error(`Error: ${error.message}`);\n      return null;\n    }\n  }\n}\n\nconst converter = new FormatConverter(['pdf', 'docx', 'txt']);\nconverter.convert('example.doc', 'pdf'); // Supported format\nconverter.convert('example.doc', 'jpg'); // Unsupported format\n```"
  },
  {
    "task": "Implement a function that sends HTTP requests and catches exceptions for invalid response status codes.",
    "code": "```javascript\nasync function sendHttpRequest(url, options = {}) {\n    try {\n        const response = await fetch(url, options);\n        \n        if (!response.ok) {\n            throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        \n        return await response.json();\n        \n    } catch (error) {\n        console.error(`Error occurred while sending HTTP request: ${error.message}`);\n        throw error;\n    }\n}\n```"
  },
  {
    "task": "Develop a program that interacts with a message queue and handles message delivery exceptions.",
    "code": "```javascript\nclass MessageQueue {\n    constructor() {\n        this.queue = [];\n    }\n\n    enqueue(message) {\n        this.queue.push(message);\n    }\n\n    dequeue() {\n        if (this.queue.length === 0) {\n            throw new Error(\"Queue is empty\");\n        }\n        return this.queue.shift();\n    }\n}\n\nfunction processMessage(message) {\n    // Simulate message processing\n    if (Math.random() > 0.7) {\n        throw new Error(\"Failed to deliver message\");\n    }\n    console.log(\"Message delivered:\", message);\n}\n\nfunction main() {\n    const messageQueue = new MessageQueue();\n\n    // Enqueue some messages\n    messageQueue.enqueue(\"Message 1\");\n    messageQueue.enqueue(\"Message 2\");\n    messageQueue.enqueue(\"Message 3\");\n\n    while (true) {\n        try {\n            const message = messageQueue.dequeue();\n            processMessage(message);\n        } catch (error) {\n            console.error(\"Error:\", error.message);\n            if (error.message === \"Queue is empty\") {\n                break; // Exit loop if queue is empty\n            }\n        }\n    }\n}\n\nmain();\n```"
  },
  {
    "task": "Write a function that reads user input and catches exceptions for unexpected data types.",
    "code": "```javascript\nfunction readUserInput() {\n    try {\n        let input = prompt(\"Please enter a number:\");\n        let number = parseInt(input);\n        \n        if (isNaN(number)) {\n            throw new Error(\"Invalid input: not a number\");\n        }\n        \n        console.log(\"You entered the number:\", number);\n    } catch (error) {\n        console.error(\"An error occurred:\", error.message);\n    }\n}\n\nreadUserInput();\n```"
  },
  {
    "task": "Create a system that processes transactions and manages exceptions for insufficient funds.",
    "code": "```javascript\nclass InsufficientFundsException extends Error {\n    constructor(message) {\n        super(message);\n        this.name = \"InsufficientFundsException\";\n    }\n}\n\nclass Account {\n    constructor(balance) {\n        this.balance = balance;\n    }\n\n    processTransaction(amount) {\n        try {\n            if (amount > this.balance) {\n                throw new InsufficientFundsException(\"Insufficient funds for this transaction.\");\n            }\n            this.balance -= amount;\n            console.log(`Transaction successful. New balance: $${this.balance}`);\n        } catch (error) {\n            if (error instanceof InsufficientFundsException) {\n                console.error(error.message);\n            } else {\n                console.error(\"An unexpected error occurred.\");\n            }\n        }\n    }\n}\n\n// Example usage\nconst account = new Account(100);\naccount.processTransaction(150);\naccount.processTransaction(50);\n```"
  },
  {
    "task": "Design a function that generates random numbers and handles exceptions when the range is invalid.",
    "code": "```javascript\nfunction generateRandomNumber(min, max) {\n    try {\n        if (min >= max) {\n            throw new Error(\"Invalid range: min should be less than max\");\n        }\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    } catch (error) {\n        console.error(error.message);\n        return null;\n    }\n}\n\n// Example usage\nconsole.log(generateRandomNumber(10, 5)); // Invalid range\nconsole.log(generateRandomNumber(1, 10)); // Valid range\n```"
  },
  {
    "task": "Implement a program that performs image processing and catches exceptions for unsupported file dimensions.",
    "code": "```javascript\nclass ImageProcessingError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = \"ImageProcessingError\";\n    }\n}\n\nfunction processImage(file) {\n    try {\n        // Simulated image processing logic\n        const dimensions = getImageDimensions(file);\n\n        if (dimensions.width > 4096 || dimensions.height > 4096) {\n            throw new ImageProcessingError(\"Unsupported file dimensions: Image is too large.\");\n        }\n\n        console.log(\"Image processed successfully.\");\n    } catch (error) {\n        if (error instanceof ImageProcessingError) {\n            console.error(\"Image processing error:\", error.message);\n        } else {\n            console.error(\"An unexpected error occurred:\", error);\n        }\n    }\n}\n\nfunction getImageDimensions(file) {\n    // Mock function to simulate getting image dimensions\n    return { width: 5000, height: 3000 }; // Example dimensions\n}\n\nconst imageFile = {}; // Placeholder for image file\nprocessImage(imageFile);\n```"
  },
  {
    "task": "Write a function that manipulates strings and manages exceptions for invalid operations.",
    "code": "```javascript\nfunction manipulateString(str, operation) {\n    try {\n        if (typeof str !== 'string') {\n            throw new Error('Invalid input: Argument is not a string');\n        }\n\n        switch (operation) {\n            case 'reverse':\n                return str.split('').reverse().join('');\n            case 'uppercase':\n                return str.toUpperCase();\n            case 'lowercase':\n                return str.toLowerCase();\n            default:\n                throw new Error('Invalid operation');\n        }\n    } catch (error) {\n        return `Error: ${error.message}`;\n    }\n}\n\n// Example usage:\nconsole.log(manipulateString(\"Hello\", \"reverse\")); // Output: \"olleH\"\nconsole.log(manipulateString(\"Hello\", \"uppercase\")); // Output: \"HELLO\"\nconsole.log(manipulateString(\"Hello\", \"invalid\")); // Output: \"Error: Invalid operation\"\nconsole.log(manipulateString(123, \"reverse\")); // Output: \"Error: Invalid input: Argument is not a string\"\n```"
  },
  {
    "task": "Create a script that automates tasks and handles exceptions for missing dependencies.",
    "code": "```javascript\nfunction performTask() {\n    try {\n        // Attempt to require a hypothetical module\n        const dependency = require('hypothetical-module');\n        \n        // If the module is available, perform the task\n        dependency.performAutomatedTask();\n        console.log(\"Task completed successfully.\");\n    } catch (error) {\n        if (error.code === 'MODULE_NOT_FOUND') {\n            console.error(\"Error: Required dependency is missing. Please install the necessary modules.\");\n        } else {\n            console.error(\"An unexpected error occurred:\", error.message);\n        }\n    }\n}\n\nperformTask();\n```"
  },
  {
    "task": "Develop a function that accesses nested data structures and manages key access exceptions.",
    "code": "```javascript\nfunction accessNestedData(data, keys) {\n    try {\n        let result = data;\n        for (let key of keys) {\n            if (result[key] !== undefined) {\n                result = result[key];\n            } else {\n                throw new Error(`Key \"${key}\" not found.`);\n            }\n        }\n        return result;\n    } catch (error) {\n        console.error(error.message);\n        return null;\n    }\n}\n\n// Example usage\nconst data = {\n    user: {\n        profile: {\n            name: 'John Doe',\n            age: 30\n        }\n    }\n};\n\nconsole.log(accessNestedData(data, ['user', 'profile', 'name'])); // John Doe\nconsole.log(accessNestedData(data, ['user', 'address'])); // Key \"address\" not found. / null\n```"
  },
  {
    "task": "Design a program that synchronizes data between sources and handles data mismatch exceptions.",
    "code": "```javascript\nclass DataMismatchException extends Error {\n  constructor(message) {\n    super(message);\n    this.name = 'DataMismatchException';\n  }\n}\n\nfunction fetchDataFromSource1() {\n  return { id: 1, data: 'Source1 Data' };\n}\n\nfunction fetchDataFromSource2() {\n  return { id: 1, data: 'Source2 Data' };\n}\n\nfunction synchronizeData() {\n  try {\n    const data1 = fetchDataFromSource1();\n    const data2 = fetchDataFromSource2();\n\n    if (data1.id !== data2.id || data1.data !== data2.data) {\n      throw new DataMismatchException('Data mismatch between sources');\n    }\n\n    console.log('Data synchronized successfully:', data1);\n  } catch (error) {\n    if (error instanceof DataMismatchException) {\n      console.error('Synchronization failed:', error.message);\n    } else {\n      console.error('An unexpected error occurred:', error);\n    }\n  }\n}\n\nsynchronizeData();\n```"
  },
  {
    "task": "Write a function that interacts with hardware devices and handles connection failure exceptions.",
    "code": "```javascript\nfunction interactWithHardwareDevice() {\n    try {\n        // Simulate interaction with hardware device\n        connectToDevice();\n        console.log(\"Device interaction successful.\");\n    } catch (error) {\n        console.error(\"Connection to device failed: \", error.message);\n    }\n}\n\nfunction connectToDevice() {\n    // Simulate a connection failure\n    throw new Error(\"Unable to connect to the device.\");\n}\n\ninteractWithHardwareDevice();\n```"
  },
  {
    "task": "Create a tool that compresses files and manages exceptions for unsupported compression formats.",
    "code": "```javascript\nclass FileCompressor {\n    constructor() {\n        this.supportedFormats = ['zip', 'tar', 'gzip'];\n    }\n\n    compress(file, format) {\n        try {\n            if (!this.supportedFormats.includes(format)) {\n                throw new Error(`Unsupported compression format: ${format}`);\n            }\n            console.log(`Compressing ${file} using ${format} format.`);\n            // Compression logic here\n            return `${file}.${format}`;\n        } catch (error) {\n            console.error(`Error: ${error.message}`);\n        }\n    }\n}\n\n// Usage example\nconst compressor = new FileCompressor();\ncompressor.compress('example.txt', 'zip');\ncompressor.compress('example.txt', 'rar'); // Unsupported format\n```"
  },
  {
    "task": "Implement a function that parses command-line arguments and handles missing argument exceptions.",
    "code": "```javascript\nfunction parseArguments(args) {\n    try {\n        if (args.length < 1) {\n            throw new Error('Missing arguments');\n        }\n        \n        // Example: process the first argument\n        let firstArg = args[0];\n        console.log('First argument:', firstArg);\n        \n        return firstArg;\n    } catch (error) {\n        console.error('Error:', error.message);\n    }\n}\n\n// Simulate command-line arguments\nconst simulatedArgs = process.argv.slice(2);\nparseArguments(simulatedArgs);\n```"
  },
  {
    "task": "Develop a program that simulates user interactions and manages timing exceptions.",
    "code": "```javascript\nfunction simulateUserInteraction() {\n    try {\n        console.log(\"User interaction started.\");\n\n        // Simulate a delay\n        let delay = Math.random() * 5000;\n        if (delay > 3000) {\n            throw new Error(\"Operation taking too long\");\n        }\n\n        setTimeout(() => {\n            console.log(\"User interaction completed successfully.\");\n        }, delay);\n\n    } catch (error) {\n        console.error(\"Exception caught:\", error.message);\n    }\n}\n\nsimulateUserInteraction();\n```"
  },
  {
    "task": "Write a function that encrypts data and handles exceptions for unsupported encryption algorithms.",
    "code": "```javascript\nfunction encryptData(data, algorithm) {\n    try {\n        let encrypted;\n        switch (algorithm) {\n            case 'aes-256-cbc':\n                encrypted = 'encryptedWithAES'; // Placeholder for actual encryption logic\n                break;\n            case 'rsa':\n                encrypted = 'encryptedWithRSA'; // Placeholder for actual encryption logic\n                break;\n            default:\n                throw new Error('Unsupported encryption algorithm');\n        }\n        return encrypted;\n    } catch (error) {\n        console.error('Encryption failed:', error.message);\n        return null;\n    }\n}\n\n// Example usage\nconst result = encryptData('myData', 'unsupported-algo');\nconsole.log(result);\n```"
  },
  {
    "task": "Create a system that aggregates data and manages exceptions for data inconsistency.",
    "code": "```javascript\nclass DataAggregator {\n  constructor() {\n    this.data = [];\n  }\n\n  addData(newData) {\n    try {\n      if (!this.isValidData(newData)) {\n        throw new Error('Data inconsistency detected');\n      }\n      this.data.push(newData);\n    } catch (error) {\n      console.error(`Failed to add data: ${error.message}`);\n    }\n  }\n\n  isValidData(data) {\n    // Placeholder for actual validation logic\n    // Assume it checks for data consistency\n    return data !== null && typeof data === 'object' && !Array.isArray(data);\n  }\n\n  aggregateData() {\n    try {\n      if (this.data.length === 0) {\n        throw new Error('No data to aggregate');\n      }\n      // Sample aggregation logic: summing up numbers in data objects\n      return this.data.reduce((acc, obj) => {\n        for (const key in obj) {\n          if (typeof obj[key] === 'number') {\n            acc[key] = (acc[key] || 0) + obj[key];\n          }\n        }\n        return acc;\n      }, {});\n    } catch (error) {\n      console.error(`Aggregation failed: ${error.message}`);\n      return null;\n    }\n  }\n}\n\n// Usage example:\nconst aggregator = new DataAggregator();\naggregator.addData({ value: 10 });\naggregator.addData({ value: 20 });\naggregator.addData('invalid data'); // Will trigger exception handling\nconst result = aggregator.aggregateData();\nconsole.log(result); // { value: 30 }\n```"
  },
  {
    "task": "Design a program that processes real-time data streams and handles connection drop exceptions.",
    "code": "```javascript\nclass DataStreamProcessor {\n  constructor(dataStream) {\n    this.dataStream = dataStream;\n  }\n\n  processStream() {\n    try {\n      this.dataStream.connect();\n      this.dataStream.on('data', (data) => {\n        this.processData(data);\n      });\n    } catch (error) {\n      if (error instanceof ConnectionDropException) {\n        console.error('Connection dropped. Attempting to reconnect...');\n        this.retryConnection();\n      } else {\n        console.error('An unexpected error occurred:', error);\n      }\n    }\n  }\n\n  processData(data) {\n    // Process data here\n    console.log('Processing data:', data);\n  }\n\n  retryConnection() {\n    setTimeout(() => {\n      console.log('Reconnecting...');\n      this.processStream();\n    }, 1000); // Retry after 1 second\n  }\n}\n\nclass ConnectionDropException extends Error {\n  constructor(message) {\n    super(message);\n    this.name = \"ConnectionDropException\";\n  }\n}\n\n// Simulated data stream for demonstration\nclass SimulatedDataStream {\n  connect() {\n    if (Math.random() < 0.2) { // 20% chance of connection drop\n      throw new ConnectionDropException('Connection dropped');\n    }\n    console.log('Connected to data stream');\n  }\n\n  on(event, callback) {\n    if (event === 'data') {\n      setInterval(() => {\n        callback('sample data');\n      }, 500); // Simulate data arrival every 500 ms\n    }\n  }\n}\n\nconst simulatedDataStream = new SimulatedDataStream();\nconst processor = new DataStreamProcessor(simulatedDataStream);\nprocessor.processStream();\n```"
  },
  {
    "task": "Implement a function that performs scientific calculations and manages precision exceptions.",
    "code": "```javascript\nfunction scientificCalculation(input) {\n    try {\n        // Perform scientific calculations\n        if (typeof input !== 'number') {\n            throw new Error('Input must be a number');\n        }\n        \n        // Example calculation\n        let result = Math.sqrt(input);\n\n        // Check for precision issues\n        if (!Number.isFinite(result)) {\n            throw new Error('Result is not a finite number');\n        }\n\n        return result;\n    } catch (error) {\n        console.error('Error during calculation:', error.message);\n        return null;\n    }\n}\n\n// Example usage\nlet result = scientificCalculation(16);\nconsole.log(result);\n```"
  },
  {
    "task": "Write a script that generates reports and handles exceptions for missing data sources.",
    "code": "```javascript\nfunction generateReport(dataSource) {\n    try {\n        if (!dataSource) {\n            throw new Error('Data source is missing.');\n        }\n        // Simulate report generation\n        console.log('Report generated successfully.');\n    } catch (error) {\n        console.error('Error generating report:', error.message);\n    }\n}\n\n// Example usage\ngenerateReport(null); // This will trigger an exception\n```"
  },
  {
    "task": "Create a program that validates digital certificates and manages trust exceptions.",
    "code": "```javascript\nclass DigitalCertificate {\n    constructor(subject, issuer, validFrom, validTo) {\n        this.subject = subject;\n        this.issuer = issuer;\n        this.validFrom = new Date(validFrom);\n        this.validTo = new Date(validTo);\n    }\n\n    isValid() {\n        const now = new Date();\n        return now >= this.validFrom && now <= this.validTo;\n    }\n}\n\nclass CertificateValidator {\n    constructor() {\n        this.trustedIssuers = new Set();\n    }\n\n    addTrustedIssuer(issuer) {\n        this.trustedIssuers.add(issuer);\n    }\n\n    validateCertificate(certificate) {\n        try {\n            if (!certificate.isValid()) {\n                throw new Error('Certificate is not valid at the current date');\n            }\n            if (!this.trustedIssuers.has(certificate.issuer)) {\n                throw new Error('Issuer is not trusted');\n            }\n            console.log('Certificate is valid and trusted');\n        } catch (error) {\n            this.handleException(error);\n        }\n    }\n\n    handleException(exception) {\n        console.error('Trust exception:', exception.message);\n    }\n}\n\n// Example usage\nconst certificate = new DigitalCertificate('Subject A', 'Issuer X', '2023-01-01', '2024-01-01');\nconst validator = new CertificateValidator();\nvalidator.addTrustedIssuer('Issuer X');\nvalidator.validateCertificate(certificate);\n```"
  },
  {
    "task": "Develop a function that schedules tasks and handles exceptions for scheduling conflicts.",
    "code": "```javascript\nfunction scheduleTask(task, schedule, tasks) {\n    try {\n        if (tasks.some(t => t.schedule === schedule)) {\n            throw new Error('Scheduling conflict detected');\n        }\n        tasks.push({ task, schedule });\n        console.log('Task scheduled successfully');\n    } catch (error) {\n        console.error('Error:', error.message);\n    }\n}\n\nlet tasks = [];\nscheduleTask('Task 1', '10:00', tasks);\nscheduleTask('Task 2', '10:00', tasks); // This will cause a scheduling conflict\n```"
  },
  {
    "task": "Design a system that manages user sessions and handles session timeout exceptions.",
    "code": "```javascript\nclass SessionManager {\n    constructor(sessionTimeout) {\n        this.sessionTimeout = sessionTimeout;\n        this.sessions = new Map();\n    }\n\n    startSession(userId) {\n        const sessionId = this.generateSessionId();\n        const timeout = setTimeout(() => {\n            this.handleSessionTimeout(sessionId);\n        }, this.sessionTimeout);\n\n        this.sessions.set(sessionId, { userId, timeout });\n        return sessionId;\n    }\n\n    endSession(sessionId) {\n        const session = this.sessions.get(sessionId);\n        if (session) {\n            clearTimeout(session.timeout);\n            this.sessions.delete(sessionId);\n        }\n    }\n\n    handleSessionTimeout(sessionId) {\n        try {\n            if (!this.sessions.has(sessionId)) {\n                throw new Error('Session not found.');\n            }\n            console.log(`Session ${sessionId} has timed out.`);\n            this.sessions.delete(sessionId);\n        } catch (error) {\n            console.error(`Error handling session timeout: ${error.message}`);\n        }\n    }\n\n    generateSessionId() {\n        return Math.random().toString(36).substr(2, 9);\n    }\n}\n\n// Example usage\nconst sessionManager = new SessionManager(5000);\nconst sessionId = sessionManager.startSession('user123');\nsetTimeout(() => {\n    sessionManager.endSession(sessionId);\n}, 2000);\n```"
  },
  {
    "task": "Write a function that processes audio files and manages exceptions for unsupported audio formats.",
    "code": "```javascript\nfunction processAudioFile(file) {\n    try {\n        if (!isSupportedFormat(file)) {\n            throw new Error('Unsupported audio format');\n        }\n        // Process the audio file here\n        console.log('Processing audio file:', file.name);\n    } catch (error) {\n        console.error('Error processing audio file:', error.message);\n    }\n}\n\nfunction isSupportedFormat(file) {\n    const supportedFormats = ['mp3', 'wav', 'flac'];\n    const fileExtension = file.name.split('.').pop().toLowerCase();\n    return supportedFormats.includes(fileExtension);\n}\n\n// Example usage\nconst audioFile = { name: 'song.mp3' };\nprocessAudioFile(audioFile);\n```"
  },
  {
    "task": "Create a service that sends notifications and handles exceptions for unreachable destinations.",
    "code": "```javascript\nclass NotificationService {\n    sendNotification(destination, message) {\n        try {\n            if (!this.isReachable(destination)) {\n                throw new Error('Destination is unreachable');\n            }\n            console.log(`Notification sent to ${destination}: ${message}`);\n        } catch (error) {\n            console.error(`Failed to send notification: ${error.message}`);\n        }\n    }\n\n    isReachable(destination) {\n        // Dummy implementation for reachability check\n        return Math.random() > 0.5;\n    }\n}\n\n// Example usage:\nconst service = new NotificationService();\nservice.sendNotification('user@example.com', 'Hello, this is your notification!');\n```"
  },
  {
    "task": "Implement a program that performs data migration and manages data transformation exceptions.",
    "code": "```javascript\nfunction performDataMigration(data) {\n    try {\n        data.forEach(item => {\n            try {\n                transformData(item);\n            } catch (transformationError) {\n                console.error(`Data transformation error for item ${item}:`, transformationError.message);\n            }\n        });\n        console.log(\"Data migration completed successfully.\");\n    } catch (migrationError) {\n        console.error(\"Data migration failed:\", migrationError.message);\n    }\n}\n\nfunction transformData(item) {\n    if (typeof item !== 'string') {\n        throw new Error(\"Invalid data type for transformation.\");\n    }\n    // Simulate data transformation\n    return item.toUpperCase();\n}\n\nconst sampleData = [\"data1\", \"data2\", 3, \"data4\"];\nperformDataMigration(sampleData);\n```"
  },
  {
    "task": "Develop a function that processes video files and handles codec compatibility exceptions.",
    "code": "```javascript\nfunction processVideoFile(videoFile) {\n    try {\n        // Simulate video processing and codec compatibility check\n        if (!isCodecCompatible(videoFile)) {\n            throw new Error('Codec not compatible');\n        }\n        // Proceed with processing the compatible video file\n        console.log(`Processing video file: ${videoFile.name}`);\n    } catch (error) {\n        console.error(`Error processing video file: ${error.message}`);\n    }\n}\n\nfunction isCodecCompatible(videoFile) {\n    // Simulate codec compatibility check\n    const compatibleCodecs = ['h264', 'vp9'];\n    return compatibleCodecs.includes(videoFile.codec);\n}\n\n// Example usage:\nconst videoFile = { name: 'example.mp4', codec: 'h265' };\nprocessVideoFile(videoFile);\n```"
  },
  {
    "task": "Write a function that manages memory allocation and catches out-of-memory exceptions.",
    "code": "```javascript\nfunction allocateMemory(size) {\n    try {\n        const buffer = new ArrayBuffer(size);\n        return buffer;\n    } catch (error) {\n        if (error instanceof RangeError) {\n            console.error(\"Out of memory: Cannot allocate requested memory size.\");\n        } else {\n            console.error(\"An unexpected error occurred:\", error);\n        }\n        return null;\n    }\n}\n\n// Example usage:\nconst memory = allocateMemory(1024 * 1024 * 1024); // Attempt to allocate 1GB\nif (memory) {\n    console.log(\"Memory allocated successfully.\");\n} else {\n    console.log(\"Failed to allocate memory.\");\n}\n```"
  },
  {
    "task": "Create a program that processes financial transactions and handles currency conversion exceptions.",
    "code": "```javascript\nclass CurrencyConversionException extends Error {\n    constructor(message) {\n        super(message);\n        this.name = \"CurrencyConversionException\";\n    }\n}\n\nfunction convertCurrency(amount, fromCurrency, toCurrency) {\n    const conversionRates = {\n        \"USD\": { \"EUR\": 0.85, \"JPY\": 110.0 },\n        \"EUR\": { \"USD\": 1.18, \"JPY\": 129.53 },\n        \"JPY\": { \"USD\": 0.0091, \"EUR\": 0.0077 }\n    };\n\n    if (!conversionRates[fromCurrency] || !conversionRates[fromCurrency][toCurrency]) {\n        throw new CurrencyConversionException(`Conversion from ${fromCurrency} to ${toCurrency} is not supported.`);\n    }\n\n    return amount * conversionRates[fromCurrency][toCurrency];\n}\n\nfunction processTransaction(amount, fromCurrency, toCurrency) {\n    try {\n        const convertedAmount = convertCurrency(amount, fromCurrency, toCurrency);\n        console.log(`Converted Amount: ${convertedAmount} ${toCurrency}`);\n    } catch (error) {\n        if (error instanceof CurrencyConversionException) {\n            console.error(`Currency Conversion Error: ${error.message}`);\n        } else {\n            console.error(`An unexpected error occurred: ${error.message}`);\n        }\n    }\n}\n\n// Example transactions\nprocessTransaction(100, \"USD\", \"EUR\");\nprocessTransaction(100, \"USD\", \"GBP\");\n```"
  },
  {
    "task": "Design a function that interacts with cloud storage and manages access permission exceptions.",
    "code": "```javascript\nfunction accessCloudStorage(action) {\n  try {\n    // Simulate an interaction with cloud storage\n    if (action !== 'read' && action !== 'write') {\n      throw new Error('Invalid access permission');\n    }\n    console.log(`Successfully performed the ${action} operation.`);\n  } catch (error) {\n    console.error(`Access error: ${error.message}`);\n  }\n}\n\n// Example usage\naccessCloudStorage('read');  // Successful\naccessCloudStorage('delete'); // Throws exception\n```"
  },
  {
    "task": "Implement a script that automates deployment and handles exceptions for missing configuration files.",
    "code": "```javascript\nconst fs = require('fs');\nconst path = require('path');\n\nfunction deploy() {\n    try {\n        const configPath = path.resolve(__dirname, 'config.json');\n        if (!fs.existsSync(configPath)) {\n            throw new Error('Configuration file is missing.');\n        }\n        \n        const config = JSON.parse(fs.readFileSync(configPath, 'utf-8'));\n        console.log('Deploying with the following configuration:', config);\n\n        // Simulate deployment logic\n        console.log('Deployment successful.');\n    } catch (error) {\n        console.error('Deployment failed:', error.message);\n    }\n}\n\ndeploy();\n```"
  },
  {
    "task": "Write a function that normalizes data and handles exceptions for invalid data ranges.",
    "code": "```javascript\nfunction normalizeData(data) {\n    try {\n        if (!Array.isArray(data)) throw new Error(\"Input must be an array\");\n        \n        const min = Math.min(...data);\n        const max = Math.max(...data);\n        \n        if (min === max) throw new Error(\"Data range is invalid, all elements are the same\");\n        \n        return data.map(num => (num - min) / (max - min));\n    } catch (error) {\n        console.error(error.message);\n        return null;\n    }\n}\n\n// Example usage:\nconst data = [10, 20, 30, 40, 50];\nconst normalizedData = normalizeData(data);\nconsole.log(normalizedData);\n```"
  },
  {
    "task": "Create a system that monitors application performance and handles threshold breach exceptions.",
    "code": "```javascript\nclass PerformanceMonitor {\n    constructor(threshold) {\n        this.threshold = threshold;\n    }\n\n    monitor(performanceMetric) {\n        try {\n            if (performanceMetric > this.threshold) {\n                throw new Error(\"Threshold Breach Exception: Performance metric exceeded the threshold.\");\n            }\n            console.log(\"Performance is within acceptable range.\");\n        } catch (error) {\n            this.handleException(error);\n        }\n    }\n\n    handleException(exception) {\n        console.error(exception.message);\n        // Additional handling logic can be added here\n    }\n}\n\n// Example usage\nconst monitor = new PerformanceMonitor(100);\nmonitor.monitor(120);  // This will trigger the exception\nmonitor.monitor(80);   // This will not trigger the exception\n```"
  },
  {
    "task": "Develop a program that processes social media data and manages API limit exceptions.",
    "code": "```javascript\nasync function processSocialMediaData(apiEndpoint) {\n    try {\n        let response = await fetch(apiEndpoint);\n        \n        if (!response.ok) {\n            throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n\n        let data = await response.json();\n        // Process the data here\n        console.log(\"Data processed successfully:\", data);\n\n    } catch (error) {\n        if (error.message.includes(\"429\")) {\n            console.log(\"API limit reached. Please try again later.\");\n        } else {\n            console.error(\"An error occurred:\", error);\n        }\n    }\n}\n\nconst apiEndpoint = \"https://api.socialmedia.com/data\";\nprocessSocialMediaData(apiEndpoint);\n```"
  },
  {
    "task": "Design a function that integrates with payment gateways and handles payment failure exceptions.",
    "code": "```javascript\nclass PaymentGateway {\n    processPayment(amount) {\n        // Simulate random payment success or failure\n        if (Math.random() > 0.5) {\n            throw new Error(\"Payment failed due to insufficient funds.\");\n        }\n        return \"Payment processed successfully.\";\n    }\n}\n\nfunction handlePayment(amount) {\n    const gateway = new PaymentGateway();\n    try {\n        const result = gateway.processPayment(amount);\n        console.log(result);\n    } catch (error) {\n        console.error(\"Error processing payment:\", error.message);\n    }\n}\n\n// Example usage\nhandlePayment(100);\n```"
  },
  {
    "task": "Write a function that backs up data and handles exceptions for unavailable storage media.",
    "code": "```javascript\nfunction backupData(data) {\n  try {\n    // Simulate the process of backing up data\n    if (!isStorageAvailable()) {\n      throw new Error(\"Storage media unavailable\");\n    }\n    console.log(\"Data backed up successfully:\", data);\n  } catch (error) {\n    console.error(\"Failed to backup data:\", error.message);\n  }\n}\n\nfunction isStorageAvailable() {\n  // Simulate checking if storage media is available\n  return Math.random() > 0.5; // Randomly returns true or false\n}\n\n// Example usage:\nbackupData(\"Important data\");\n```"
  },
  {
    "task": "Create a tool that manages software updates and handles exceptions for version conflicts.",
    "code": "```javascript\nclass UpdateManager {\n    constructor() {\n        this.currentVersion = \"1.0.0\";\n    }\n\n    compareVersions(version1, version2) {\n        const v1 = version1.split('.').map(Number);\n        const v2 = version2.split('.').map(Number);\n        for (let i = 0; i < v1.length; i++) {\n            if (v1[i] > v2[i]) return 1;\n            if (v1[i] < v2[i]) return -1;\n        }\n        return 0;\n    }\n\n    updateSoftware(newVersion) {\n        try {\n            if (!newVersion) {\n                throw new Error(\"New version is not specified.\");\n            }\n            \n            const comparison = this.compareVersions(this.currentVersion, newVersion);\n            if (comparison < 0) {\n                this.currentVersion = newVersion;\n                console.log(`Updated successfully to version ${newVersion}.`);\n            } else if (comparison > 0) {\n                throw new Error(\"Version conflict: New version is older than the current version.\");\n            } else {\n                throw new Error(\"Version conflict: New version is the same as the current version.\");\n            }\n        } catch (error) {\n            console.error(`Update failed: ${error.message}`);\n        }\n    }\n}\n\n// Example usage\nconst manager = new UpdateManager();\nmanager.updateSoftware(\"1.2.0\");\nmanager.updateSoftware(\"1.0.0\");\nmanager.updateSoftware(\"1.3.0\");\n```"
  },
  {
    "task": "Implement a program that performs sentiment analysis and manages exceptions for ambiguous texts.",
    "code": "```javascript\nfunction analyzeSentiment(text) {\n    try {\n        if (typeof text !== 'string') {\n            throw new Error('Invalid input: Text must be a string.');\n        }\n\n        const result = performSentimentAnalysis(text);\n        return result;\n    } catch (error) {\n        return `Error: ${error.message}`;\n    }\n}\n\nfunction performSentimentAnalysis(text) {\n    // Placeholder for sentiment analysis logic\n    const positiveWords = ['good', 'happy', 'joy', 'excellent'];\n    const negativeWords = ['bad', 'sad', 'pain', 'poor'];\n\n    let score = 0;\n    const words = text.toLowerCase().split(/\\W+/);\n\n    words.forEach(word => {\n        if (positiveWords.includes(word)) {\n            score++;\n        } else if (negativeWords.includes(word)) {\n            score--;\n        }\n    });\n\n    if (score > 0) {\n        return 'Positive Sentiment';\n    } else if (score < 0) {\n        return 'Negative Sentiment';\n    } else {\n        throw new Error('Ambiguous text: Unable to determine sentiment.');\n    }\n}\n\n// Example usage\nconsole.log(analyzeSentiment('This is a good day with excellent weather.'));\nconsole.log(analyzeSentiment('This is a bad day with poor results.'));\nconsole.log(analyzeSentiment('This is a day.'));\nconsole.log(analyzeSentiment(12345));  // Invalid input case\n```"
  },
  {
    "task": "Develop a function that manages user authentication and handles credential mismatch exceptions.",
    "code": "```javascript\nfunction authenticateUser(username, password) {\n    const storedUsername = \"user123\"; // Example stored username\n    const storedPassword = \"pass123\"; // Example stored password\n\n    try {\n        if (username !== storedUsername || password !== storedPassword) {\n            throw new Error(\"Credential mismatch\");\n        }\n        return \"Authentication successful\";\n    } catch (error) {\n        return `Authentication failed: ${error.message}`;\n    }\n}\n\n// Example usage\nconsole.log(authenticateUser(\"user123\", \"pass123\")); // Authentication successful\nconsole.log(authenticateUser(\"user123\", \"wrongpass\")); // Authentication failed: Credential mismatch\n```"
  },
  {
    "task": "Write a program that processes geographic data and handles exceptions for invalid coordinates.",
    "code": "```javascript\nfunction processGeographicData(coordinates) {\n    try {\n        coordinates.forEach(coord => {\n            if (typeof coord.latitude !== 'number' || typeof coord.longitude !== 'number') {\n                throw new Error('Invalid coordinate format');\n            }\n            if (coord.latitude < -90 || coord.latitude > 90 || coord.longitude < -180 || coord.longitude > 180) {\n                throw new Error('Coordinate out of bounds');\n            }\n            // Process valid data here\n            console.log(`Processing latitude: ${coord.latitude}, longitude: ${coord.longitude}`);\n        });\n    } catch (error) {\n        console.error(`Error processing geographic data: ${error.message}`);\n    }\n}\n\n// Example usage\nconst geographicData = [\n    { latitude: 34.05, longitude: -118.25 },\n    { latitude: 91.00, longitude: 45.00 }, // Invalid latitude\n    { latitude: 'invalid', longitude: 120.00 } // Invalid format\n];\n\nprocessGeographicData(geographicData);\n```"
  },
  {
    "task": "Create a script that manages network configurations and handles exceptions for invalid syntax.",
    "code": "```javascript\nfunction manageNetworkConfigurations(config) {\n    try {\n        // Simulate parsing network configuration\n        if (typeof config !== 'object' || config === null) {\n            throw new SyntaxError('Invalid configuration syntax');\n        }\n        // Assume further processing of network configurations here\n        console.log('Network configuration processed successfully:', config);\n    } catch (error) {\n        if (error instanceof SyntaxError) {\n            console.error('Syntax Error:', error.message);\n        } else {\n            console.error('Unexpected Error:', error.message);\n        }\n    }\n}\n\n// Example usage\nmanageNetworkConfigurations({ ip: '192.168.1.1', subnet: '255.255.255.0' });\nmanageNetworkConfigurations('InvalidSyntax');\n```"
  },
  {
    "task": "Design a function that processes biometric data and handles exceptions for sensor errors.",
    "code": "```javascript\nfunction processBiometricData(data) {\n    try {\n        // Simulate processing biometric data\n        if (!data || typeof data !== 'object') {\n            throw new Error('Invalid biometric data.');\n        }\n        // Further processing logic here...\n        console.log('Biometric data processed successfully.');\n    } catch (error) {\n        console.error('Error processing biometric data:', error.message);\n    }\n}\n\n// Example usage\nprocessBiometricData({ /* biometric data */ });\nprocessBiometricData(null); // This will trigger an exception\n```"
  },
  {
    "task": "Implement a system that manages access control and handles exceptions for unauthorized access attempts.",
    "code": "```javascript\nclass AccessControl {\n    constructor() {\n        this.allowedUsers = new Set();\n    }\n\n    addUser(user) {\n        this.allowedUsers.add(user);\n    }\n\n    checkAccess(user) {\n        try {\n            if (!this.allowedUsers.has(user)) {\n                throw new Error(`Access denied for user: ${user}`);\n            }\n            console.log(`Access granted to user: ${user}`);\n        } catch (error) {\n            console.error(error.message);\n        }\n    }\n}\n\n// Example usage:\nconst accessControl = new AccessControl();\naccessControl.addUser('alice');\naccessControl.checkAccess('alice'); // Access granted\naccessControl.checkAccess('bob');   // Access denied\n```"
  },
  {
    "task": "Write a function that performs load balancing and handles exceptions for unreachable nodes.",
    "code": "```javascript\nfunction performLoadBalancing(nodes) {\n    nodes.forEach(node => {\n        try {\n            if (!isNodeReachable(node)) {\n                throw new Error(`Node ${node} is unreachable`);\n            }\n            distributeLoad(node);\n        } catch (error) {\n            console.error(`Error handling node ${node}: ${error.message}`);\n        }\n    });\n}\n\nfunction isNodeReachable(node) {\n    // Simulate node reachability check logic\n    return Math.random() > 0.2; // 80% chance the node is reachable\n}\n\nfunction distributeLoad(node) {\n    // Simulate load distribution logic\n    console.log(`Load distributed to node ${node}`);\n}\n\n// Example usage:\nconst nodes = ['Node1', 'Node2', 'Node3', 'Node4'];\nperformLoadBalancing(nodes);\n```"
  },
  {
    "task": "Create a program that simulates virtual environments and manages resource allocation exceptions.",
    "code": "```javascript\nclass VirtualEnvironment {\n  constructor(name, maxResources) {\n    this.name = name;\n    this.maxResources = maxResources;\n    this.allocatedResources = 0;\n  }\n\n  allocateResources(amount) {\n    try {\n      if (amount < 0) {\n        throw new Error(\"Cannot allocate a negative amount of resources.\");\n      }\n      if (this.allocatedResources + amount > this.maxResources) {\n        throw new Error(\"Resource allocation exceeds the maximum limit.\");\n      }\n      this.allocatedResources += amount;\n      console.log(`${amount} resources allocated to ${this.name}.`);\n    } catch (error) {\n      console.error(`Error in ${this.name}: ${error.message}`);\n    }\n  }\n\n  deallocateResources(amount) {\n    try {\n      if (amount < 0) {\n        throw new Error(\"Cannot deallocate a negative amount of resources.\");\n      }\n      if (this.allocatedResources - amount < 0) {\n        throw new Error(\"Cannot deallocate more resources than currently allocated.\");\n      }\n      this.allocatedResources -= amount;\n      console.log(`${amount} resources deallocated from ${this.name}.`);\n    } catch (error) {\n      console.error(`Error in ${this.name}: ${error.message}`);\n    }\n  }\n}\n\nconst env1 = new VirtualEnvironment(\"Environment1\", 100);\n\nenv1.allocateResources(50);\nenv1.allocateResources(60);\nenv1.deallocateResources(30);\nenv1.allocateResources(-10);\nenv1.deallocateResources(100);\n```"
  },
  {
    "task": "Develop a tool that manages digital rights and handles exceptions for unauthorized content access.",
    "code": "```javascript\nclass DigitalRightsManager {\n  constructor() {\n    this.authorizedUsers = new Set();\n  }\n\n  addUser(userId) {\n    this.authorizedUsers.add(userId);\n  }\n\n  removeUser(userId) {\n    this.authorizedUsers.delete(userId);\n  }\n\n  accessContent(userId) {\n    try {\n      if (!this.authorizedUsers.has(userId)) {\n        throw new Error('Unauthorized access attempt detected.');\n      }\n      console.log('Content accessed successfully.');\n    } catch (error) {\n      console.error(error.message);\n    }\n  }\n}\n\n// Example usage:\nconst drm = new DigitalRightsManager();\ndrm.addUser('user123');\n\ndrm.accessContent('user123'); // Content accessed successfully.\ndrm.accessContent('user456'); // Unauthorized access attempt detected.\n```"
  },
  {
    "task": "Design a function that synchronizes clocks and handles exceptions for time drift.",
    "code": "```javascript\nfunction synchronizeClocks() {\n  try {\n    // Simulate getting the current time from an external time source\n    let externalTime = getExternalTimeSource();\n    \n    // Simulate getting the local time\n    let localTime = new Date();\n    \n    // Calculate the drift\n    let timeDrift = externalTime - localTime;\n    \n    // Adjust the local time based on the drift\n    adjustLocalClock(timeDrift);\n    \n    return \"Clocks synchronized successfully.\";\n  } catch (error) {\n    return `Error synchronizing clocks: ${error.message}`;\n  }\n}\n\nfunction getExternalTimeSource() {\n  // This function would normally connect to an external time source\n  // For the purpose of this example, we'll simulate with a random time\n  if (Math.random() > 0.8) { // Simulate occasional failure\n    throw new Error(\"Failed to connect to the external time source.\");\n  }\n  return new Date(new Date().getTime() + Math.floor(Math.random() * 1000));\n}\n\nfunction adjustLocalClock(timeDrift) {\n  // Simulate adjusting the local clock\n  // In a real scenario, this would adjust the system clock or application clock\n  console.log(`Adjusting local clock by ${timeDrift} milliseconds.`);\n}\n```"
  },
  {
    "task": "Write a script that manages system backups and handles exceptions for insufficient backup space.",
    "code": "```javascript\nfunction manageSystemBackup() {\n    try {\n        const availableSpace = getAvailableSpace();\n        const requiredSpace = getRequiredBackupSpace();\n        \n        if (availableSpace < requiredSpace) {\n            throw new Error(\"Insufficient backup space\");\n        }\n\n        performBackup();\n        console.log(\"Backup completed successfully.\");\n    } catch (error) {\n        console.error(\"Backup failed: \" + error.message);\n    }\n}\n\nfunction getAvailableSpace() {\n    // Simulate getting available space (e.g., from system or API)\n    return 50; // Example: 50GB available\n}\n\nfunction getRequiredBackupSpace() {\n    // Simulate calculating required backup space\n    return 100; // Example: 100GB required\n}\n\nfunction performBackup() {\n    // Simulate performing the backup operation\n}\n\nmanageSystemBackup();\n```"
  },
  {
    "task": "Create a program that processes natural language text and handles parsing exceptions.",
    "code": "```javascript\nfunction processText(text) {\n    try {\n        // Simulate parsing the text\n        if (typeof text !== 'string') {\n            throw new Error('Input must be a string');\n        }\n        let parsedText = parseNaturalLanguage(text);\n        console.log('Parsed text:', parsedText);\n    } catch (error) {\n        console.error('An error occurred while parsing:', error.message);\n    }\n}\n\nfunction parseNaturalLanguage(text) {\n    // Simulate a parsing error\n    if (text.trim() === '') {\n        throw new Error('Text cannot be empty');\n    }\n    // Simulate successful parsing\n    return `Parsed version of: ${text}`;\n}\n\n// Example usage\nprocessText('Hello, how are you?');\nprocessText('');\nprocessText(42);\n```"
  },
  {
    "task": "Implement a function that manages thread execution and handles race condition exceptions.",
    "code": "```javascript\nfunction manageThreadExecution(task1, task2) {\n    let result;\n    try {\n        // Simulate asynchronous tasks with Promises\n        const task1Promise = new Promise((resolve) => {\n            setTimeout(() => resolve(task1()), Math.random() * 1000);\n        });\n\n        const task2Promise = new Promise((resolve) => {\n            setTimeout(() => resolve(task2()), Math.random() * 1000);\n        });\n\n        // Execute tasks concurrently\n        Promise.all([task1Promise, task2Promise])\n            .then((values) => {\n                result = values;\n                console.log('Tasks completed successfully:', result);\n            })\n            .catch((error) => {\n                throw new Error('Race condition exception occurred: ' + error);\n            });\n    } catch (e) {\n        console.error(e.message);\n    }\n}\n\n// Example tasks\nconst task1 = () => 'Result from task 1';\nconst task2 = () => 'Result from task 2';\n\n// Execute the function\nmanageThreadExecution(task1, task2);\n```"
  },
  {
    "task": "Develop a system that integrates with IoT devices and handles connectivity exceptions.",
    "code": "```javascript\nclass IoTDevice {\n    constructor(name) {\n        this.name = name;\n        this.isConnected = false;\n    }\n\n    connect() {\n        try {\n            // Simulate the connection process\n            this.simulateConnection();\n            this.isConnected = true;\n            console.log(`${this.name} connected successfully.`);\n        } catch (error) {\n            console.error(`Failed to connect ${this.name}: ${error.message}`);\n        }\n    }\n\n    simulateConnection() {\n        // Simulate a random failure in connection\n        if (Math.random() > 0.5) {\n            throw new Error('Connection failed due to network issues.');\n        }\n    }\n}\n\nconst devices = [\n    new IoTDevice('Temperature Sensor'),\n    new IoTDevice('Humidity Sensor'),\n    new IoTDevice('Light Sensor')\n];\n\ndevices.forEach(device => device.connect());\n```"
  },
  {
    "task": "Write a function that manages application logging and handles exceptions for log overflow.",
    "code": "```javascript\nclass LogOverflowException extends Error {\n    constructor(message) {\n        super(message);\n        this.name = \"LogOverflowException\";\n    }\n}\n\nclass Logger {\n    constructor(maxLogs) {\n        this.maxLogs = maxLogs;\n        this.logs = [];\n    }\n\n    log(message) {\n        try {\n            if (this.logs.length >= this.maxLogs) {\n                throw new LogOverflowException(\"Log limit exceeded\");\n            }\n            this.logs.push(message);\n        } catch (error) {\n            if (error instanceof LogOverflowException) {\n                console.error(error.message);\n            } else {\n                console.error(\"An unexpected error occurred: \", error);\n            }\n        }\n    }\n\n    getLogs() {\n        return this.logs;\n    }\n}\n\n// Usage example\nconst logger = new Logger(3);\nlogger.log(\"First log\");\nlogger.log(\"Second log\");\nlogger.log(\"Third log\");\nlogger.log(\"Fourth log\"); // This will trigger the exception\nconsole.log(logger.getLogs());\n```"
  },
  {
    "task": "Create a tool that visualizes data and handles exceptions for unsupported visualization types.",
    "code": "```javascript\nclass DataVisualizer {\n    constructor() {\n        this.supportedTypes = ['bar', 'line', 'pie'];\n    }\n\n    visualize(data, type) {\n        try {\n            if (!this.supportedTypes.includes(type)) {\n                throw new Error(`Unsupported visualization type: ${type}`);\n            }\n            // Visualize data (mock implementation)\n            console.log(`Visualizing data as ${type}`);\n        } catch (error) {\n            console.error(error.message);\n        }\n    }\n}\n\n// Example usage:\nconst visualizer = new DataVisualizer();\nvisualizer.visualize([1, 2, 3], 'bar'); // Supported type\nvisualizer.visualize([1, 2, 3], 'scatter'); // Unsupported type\n```"
  },
  {
    "task": "Design a program that performs genetic algorithm simulations and manages exception for invalid mutations.",
    "code": "```javascript\nclass GeneticAlgorithm {\n  constructor() {\n    this.population = [];\n  }\n\n  simulate() {\n    try {\n      this.applyMutation();\n    } catch (error) {\n      console.error(\"Error in mutation: \" + error.message);\n    }\n  }\n\n  applyMutation() {\n    // Simulate a mutation\n    let mutationSuccess = Math.random() > 0.5; // Random success or failure\n    if (!mutationSuccess) {\n      throw new Error(\"Invalid mutation occurred.\");\n    }\n    console.log(\"Mutation applied successfully.\");\n  }\n}\n\nconst ga = new GeneticAlgorithm();\nga.simulate();\n```"
  },
  {
    "task": "Implement a function that manages distributed transactions and handles consistency exceptions.",
    "code": "```javascript\nclass ConsistencyException extends Error {\n  constructor(message) {\n    super(message);\n    this.name = \"ConsistencyException\";\n  }\n}\n\nfunction manageTransaction(transaction) {\n  try {\n    // Assume beginTransaction and commitTransaction are part of some transaction management system\n    transaction.beginTransaction();\n    \n    // Execute transaction operations...\n    // If any operation fails, throw a ConsistencyException\n    if (Math.random() > 0.5) { // Simulating failure\n      throw new ConsistencyException(\"Transaction consistency error\");\n    }\n    \n    transaction.commitTransaction();\n    console.log(\"Transaction committed successfully.\");\n  } catch (error) {\n    if (error instanceof ConsistencyException) {\n      console.error(\"Consistency exception occurred: \", error.message);\n      // Handle consistency exception, potentially rolling back the transaction\n      transaction.rollbackTransaction();\n    } else {\n      console.error(\"An unexpected error occurred: \", error);\n    }\n  }\n}\n\n// Example usage\nconst fakeTransaction = {\n  beginTransaction: () => console.log(\"Transaction started\"),\n  commitTransaction: () => console.log(\"Transaction committed\"),\n  rollbackTransaction: () => console.log(\"Transaction rolled back\")\n};\n\nmanageTransaction(fakeTransaction);\n```"
  },
  {
    "task": "Write a function that handles secure communications and manages encryption key exceptions.",
    "code": "```javascript\nfunction handleSecureCommunication(communicationData) {\n    try {\n        const encryptionKey = getEncryptionKey();\n        if (!encryptionKey) {\n            throw new Error(\"Encryption key not found\");\n        }\n        \n        const encryptedData = encryptData(communicationData, encryptionKey);\n        return encryptedData;\n    } catch (error) {\n        console.error(\"Error handling secure communication:\", error.message);\n        return null;\n    }\n}\n\nfunction getEncryptionKey() {\n    // Logic to retrieve encryption key\n    // This can be null or undefined to simulate an error\n    return \"dummyEncryptionKey\";\n}\n\nfunction encryptData(data, key) {\n    // Simulated encryption logic\n    return `encrypted(${data}) with key(${key})`;\n}\n\n// Example usage\nconst secureData = handleSecureCommunication(\"Sensitive Information\");\nconsole.log(secureData);\n```"
  },
  {
    "task": "Create a system that processes sensor data and handles out-of-range value exceptions.",
    "code": "```javascript\nclass SensorDataProcessor {\n    constructor(data) {\n        this.data = data;\n    }\n\n    process() {\n        try {\n            this.data.forEach(value => {\n                if (value < 0 || value > 100) {\n                    throw new RangeError(`Sensor value ${value} is out of range.`);\n                }\n                console.log(`Processing sensor value: ${value}`);\n            });\n        } catch (error) {\n            if (error instanceof RangeError) {\n                console.error(`Error: ${error.message}`);\n            } else {\n                console.error(`An unexpected error occurred: ${error.message}`);\n            }\n        }\n    }\n}\n\nconst sensorData = [23, 45, 101, 76, -5];\nconst processor = new SensorDataProcessor(sensorData);\nprocessor.process();\n```"
  },
  {
    "task": "Develop a program that simulates weather patterns and handles model prediction exceptions.",
    "code": "```javascript\nclass WeatherModelError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = \"WeatherModelError\";\n  }\n}\n\nfunction simulateWeatherPatterns() {\n  try {\n    let prediction = Math.random();\n    if (prediction < 0.2) {\n      throw new WeatherModelError(\"Model prediction error: Data not available.\");\n    }\n    return `Weather prediction successful: ${prediction}`;\n  } catch (error) {\n    if (error instanceof WeatherModelError) {\n      console.error(error.message);\n    } else {\n      console.error(\"An unexpected error occurred: \", error);\n    }\n  }\n}\n\nconsole.log(simulateWeatherPatterns());\n```"
  },
  {
    "task": "Design a function that manages API versioning and handles backward compatibility exceptions.",
    "code": "```javascript\nclass APIVersionError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = \"APIVersionError\";\n    }\n}\n\nfunction manageAPIVersion(version, supportedVersions) {\n    try {\n        if (!supportedVersions.includes(version)) {\n            throw new APIVersionError(`Version ${version} is not supported.`);\n        }\n        console.log(`API version ${version} is supported.`);\n        // Proceed with API logic for the specified version\n    } catch (error) {\n        if (error instanceof APIVersionError) {\n            console.error(`Backward Compatibility Exception: ${error.message}`);\n        } else {\n            console.error(`An unexpected error occurred: ${error.message}`);\n        }\n    }\n}\n\n// Example usage\nconst supportedVersions = ['1.0', '1.1', '2.0'];\nmanageAPIVersion('1.1', supportedVersions);\nmanageAPIVersion('3.0', supportedVersions);\n```"
  },
  {
    "task": "Write a tool that converts character encodings and handles unsupported encoding exceptions.",
    "code": "```javascript\nfunction convertEncoding(inputString, fromEncoding, toEncoding) {\n    try {\n        const decoder = new TextDecoder(fromEncoding);\n        const encoder = new TextEncoder(toEncoding);\n        const decoded = decoder.decode(Buffer.from(inputString, 'binary'));\n        const encoded = encoder.encode(decoded);\n        return Buffer.from(encoded).toString('binary');\n    } catch (e) {\n        if (e instanceof RangeError) {\n            throw new Error('Unsupported encoding');\n        } else {\n            throw e;\n        }\n    }\n}\n\ntry {\n    const result = convertEncoding('Hello, world!', 'utf-8', 'utf-16');\n    console.log(result);\n} catch (error) {\n    console.error('Error:', error.message);\n}\n```"
  },
  {
    "task": "Create a program that handles dynamic content generation and manages template parsing exceptions.",
    "code": "```javascript\nfunction generateDynamicContent(template, data) {\n    try {\n        if (typeof template !== 'string') {\n            throw new Error('Template must be a string');\n        }\n\n        // Simulating template parsing logic\n        const keys = Object.keys(data);\n        let content = template;\n\n        keys.forEach(key => {\n            const regex = new RegExp(`{{\\\\s*${key}\\\\s*}}`, 'g');\n            content = content.replace(regex, data[key]);\n        });\n\n        return content;\n    } catch (error) {\n        console.error('Error during template parsing:', error.message);\n        return null;\n    }\n}\n\n// Example usage\nconst template = 'Hello, {{ name }}! You have {{ count }} new messages.';\nconst data = { name: 'Alice', count: 5 };\n\nconst result = generateDynamicContent(template, data);\nconsole.log(result);\n```"
  },
  {
    "task": "Implement a script that schedules automated tests and handles exceptions for missing test cases.",
    "code": "```javascript\nclass TestScheduler {\n    constructor() {\n        this.tests = {};\n    }\n\n    addTest(testName, testFunction) {\n        this.tests[testName] = testFunction;\n    }\n\n    runTest(testName) {\n        try {\n            if (!this.tests[testName]) {\n                throw new Error(`Test case \"${testName}\" is missing.`);\n            }\n            this.tests[testName]();\n            console.log(`Test \"${testName}\" executed successfully.`);\n        } catch (error) {\n            console.error(`Error running test \"${testName}\": ${error.message}`);\n        }\n    }\n\n    scheduleTests(testNames) {\n        testNames.forEach(testName => this.runTest(testName));\n    }\n}\n\n// Example usage\nconst scheduler = new TestScheduler();\n\n// Adding a sample test\nscheduler.addTest('sampleTest', () => {\n    console.log('Sample test executed.');\n});\n\n// Scheduling tests\nscheduler.scheduleTests(['sampleTest', 'missingTest']);\n```"
  },
  {
    "task": "Develop a system that manages virtual machine instances and handles provisioning exceptions.",
    "code": "```javascript\nclass VirtualMachineManager {\n    constructor() {\n        this.instances = [];\n    }\n\n    provisionInstance(instanceConfig) {\n        try {\n            if (!instanceConfig || typeof instanceConfig !== 'object') {\n                throw new Error('Invalid instance configuration');\n            }\n            // Simulate provisioning logic\n            const newInstance = { id: this.instances.length + 1, ...instanceConfig };\n            this.instances.push(newInstance);\n            return newInstance;\n        } catch (error) {\n            console.error('Provisioning failed:', error.message);\n            return null;\n        }\n    }\n\n    listInstances() {\n        return this.instances;\n    }\n}\n\n// Example usage:\nconst vmManager = new VirtualMachineManager();\nconst config1 = { cpu: 2, memory: '4GB' };\nconst config2 = { cpu: 4, memory: '8GB' };\nconst malformedConfig = null;\n\nvmManager.provisionInstance(config1);\nvmManager.provisionInstance(config2);\nvmManager.provisionInstance(malformedConfig); // This will trigger an exception\n\nconsole.log(vmManager.listInstances());\n```"
  },
  {
    "task": "Write a function that processes credit scores and handles exceptions for missing credit history.",
    "code": "```javascript\nfunction processCreditScore(creditScore) {\n    try {\n        if (creditScore === undefined || creditScore === null) {\n            throw new Error(\"Missing credit history\");\n        }\n        // Process credit score\n        console.log(`Processing credit score: ${creditScore}`);\n    } catch (error) {\n        console.error(`Error: ${error.message}`);\n    }\n}\n\n// Example usage\nprocessCreditScore(750); // Valid credit score\nprocessCreditScore(null); // Missing credit history\n```"
  },
  {
    "task": "Create a tool that manages digital certificates and handles expiration exceptions.",
    "code": "```javascript\nclass DigitalCertificate {\n    constructor(id, expirationDate) {\n        this.id = id;\n        this.expirationDate = new Date(expirationDate);\n    }\n\n    isExpired() {\n        const currentDate = new Date();\n        return currentDate > this.expirationDate;\n    }\n}\n\nclass CertificateManager {\n    constructor() {\n        this.certificates = [];\n    }\n\n    addCertificate(certificate) {\n        this.certificates.push(certificate);\n    }\n\n    checkCertificates() {\n        this.certificates.forEach(cert => {\n            try {\n                if (cert.isExpired()) {\n                    throw new Error(`Certificate ${cert.id} is expired.`);\n                } else {\n                    console.log(`Certificate ${cert.id} is valid.`);\n                }\n            } catch (error) {\n                console.error(error.message);\n            }\n        });\n    }\n}\n\nconst cert1 = new DigitalCertificate('cert1', '2023-10-01');\nconst cert2 = new DigitalCertificate('cert2', '2025-12-01');\n\nconst manager = new CertificateManager();\nmanager.addCertificate(cert1);\nmanager.addCertificate(cert2);\n\nmanager.checkCertificates();\n```"
  },
  {
    "task": "Design a program that processes genome sequences and handles exceptions for sequence alignment.",
    "code": "```javascript\nfunction processGenomeSequences(sequences) {\n    sequences.forEach(sequence => {\n        try {\n            alignSequence(sequence);\n        } catch (error) {\n            console.error(`Error processing sequence: ${sequence}. Error: ${error.message}`);\n        }\n    });\n}\n\nfunction alignSequence(sequence) {\n    if (!isValidSequence(sequence)) {\n        throw new Error('Invalid sequence for alignment');\n    }\n    // Perform sequence alignment logic here\n    console.log(`Sequence aligned: ${sequence}`);\n}\n\nfunction isValidSequence(sequence) {\n    // Validate sequence logic (e.g., checking if it contains only valid nucleotides)\n    const validNucleotides = new Set(['A', 'T', 'C', 'G']);\n    for (let nucleotide of sequence) {\n        if (!validNucleotides.has(nucleotide)) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// Example usage:\nconst genomeSequences = ['ATCG', 'GCTA', 'ATBX', 'CGTA'];\nprocessGenomeSequences(genomeSequences);\n```"
  }
]