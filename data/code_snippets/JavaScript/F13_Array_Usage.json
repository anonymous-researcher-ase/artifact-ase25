[
  {
    "task": "Create a function that initializes an array with the first ten prime numbers.",
    "code": "```javascript\nfunction getFirstTenPrimes() {\n    return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29];\n}\n\nconst primes = getFirstTenPrimes();\n```"
  },
  {
    "task": "Write a program to reverse the elements of a given array.",
    "code": "```javascript\nfunction reverseArray(arr) {\n    return arr.reverse();\n}\n\nconst array = [1, 2, 3, 4, 5];\nconst reversedArray = reverseArray(array);\nconsole.log(reversedArray);\n```"
  },
  {
    "task": "Implement an algorithm that finds the maximum value in an array of integers.",
    "code": "```javascript\nfunction findMaxValue(arr) {\n    if (arr.length === 0) return undefined;\n    let max = arr[0];\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n    }\n    return max;\n}\n```"
  },
  {
    "task": "Design a routine to rotate an array to the right by a given number of steps.",
    "code": "```javascript\nfunction rotateArrayRight(arr, steps) {\n    const length = arr.length;\n    const rotateSteps = steps % length;\n    return arr.slice(-rotateSteps).concat(arr.slice(0, length - rotateSteps));\n}\n```"
  },
  {
    "task": "Develop a function to merge two sorted arrays into one sorted array.",
    "code": "```javascript\nfunction mergeSortedArrays(arr1, arr2) {\n    let mergedArray = [];\n    let i = 0, j = 0;\n\n    while (i < arr1.length && j < arr2.length) {\n        if (arr1[i] < arr2[j]) {\n            mergedArray.push(arr1[i]);\n            i++;\n        } else {\n            mergedArray.push(arr2[j]);\n            j++;\n        }\n    }\n\n    while (i < arr1.length) {\n        mergedArray.push(arr1[i]);\n        i++;\n    }\n\n    while (j < arr2.length) {\n        mergedArray.push(arr2[j]);\n        j++;\n    }\n\n    return mergedArray;\n}\n```"
  },
  {
    "task": "Create a method to remove duplicate values from an array.",
    "code": "```javascript\nfunction removeDuplicates(arr) {\n  return [...new Set(arr)];\n}\n```"
  },
  {
    "task": "Write a script to calculate the sum of all elements in an array.",
    "code": "```javascript\nfunction sumArray(arr) {\n    return arr.reduce((accumulator, currentValue) => accumulator + currentValue, 0);\n}\n\nconst array = [1, 2, 3, 4, 5];\nconst sum = sumArray(array);\nconsole.log(sum);\n```"
  },
  {
    "task": "Construct a function that finds the second largest element in an array.",
    "code": "```javascript\nfunction findSecondLargest(arr) {\n    if (arr.length < 2) return null;\n    let first = -Infinity, second = -Infinity;\n    for (let num of arr) {\n        if (num > first) {\n            second = first;\n            first = num;\n        } else if (num > second && num !== first) {\n            second = num;\n        }\n    }\n    return second === -Infinity ? null : second;\n}\n```"
  },
  {
    "task": "Design a program to check if an array contains a specific value.",
    "code": "```javascript\nfunction containsValue(array, value) {\n    return array.includes(value);\n}\n\n// Example usage:\nconst myArray = [1, 2, 3, 4, 5];\nconst valueToFind = 3;\nconst result = containsValue(myArray, valueToFind);\nconsole.log(result); // true\n```"
  },
  {
    "task": "Implement a function to sort an array of strings alphabetically.",
    "code": "```javascript\nfunction sortStringsAlphabetically(arr) {\n    return arr.sort();\n}\n```"
  },
  {
    "task": "Create a method to search for a value in an array using binary search.",
    "code": "```javascript\nfunction binarySearch(arr, target) {\n    let left = 0;\n    let right = arr.length - 1;\n    \n    while (left <= right) {\n        const mid = Math.floor((left + right) / 2);\n        \n        if (arr[mid] === target) {\n            return mid;\n        } else if (arr[mid] < target) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    \n    return -1;\n}\n```"
  },
  {
    "task": "Write a routine to calculate the average of numbers in an array.",
    "code": "```javascript\nfunction calculateAverage(numbers) {\n    if (numbers.length === 0) return 0;\n    const sum = numbers.reduce((acc, num) => acc + num, 0);\n    return sum / numbers.length;\n}\n```"
  },
  {
    "task": "Develop a function to find the intersection of two arrays.",
    "code": "```javascript\nfunction intersection(arr1, arr2) {\n    return arr1.filter(value => arr2.includes(value));\n}\n```"
  },
  {
    "task": "Implement a method to find the union of two arrays without duplicates.",
    "code": "```javascript\nfunction unionArrays(arr1, arr2) {\n    return [...new Set([...arr1, ...arr2])];\n}\n\n// Example usage:\nconst array1 = [1, 2, 3, 4];\nconst array2 = [3, 4, 5, 6];\nconst union = unionArrays(array1, array2);\nconsole.log(union); // Output: [1, 2, 3, 4, 5, 6]\n```"
  },
  {
    "task": "Create a program that shifts all zeroes in an array to the end.",
    "code": "```javascript\nfunction shiftZeroesToEnd(arr) {\n    let nonZeroIndex = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] !== 0) {\n            arr[nonZeroIndex] = arr[i];\n            nonZeroIndex++;\n        }\n    }\n    for (let i = nonZeroIndex; i < arr.length; i++) {\n        arr[i] = 0;\n    }\n    return arr;\n}\n\n// Example usage\nlet array = [0, 1, 0, 3, 12];\nconsole.log(shiftZeroesToEnd(array)); // Output: [1, 3, 12, 0, 0]\n```"
  },
  {
    "task": "Write a function to split an array into two parts at a given index.",
    "code": "```javascript\nfunction splitArray(arr, index) {\n    const part1 = arr.slice(0, index);\n    const part2 = arr.slice(index);\n    return [part1, part2];\n}\n```"
  },
  {
    "task": "Design a script to find all pairs in an array that sum up to a specific target.",
    "code": "```javascript\nfunction findPairsWithSum(arr, target) {\n    const pairs = [];\n    const seen = new Set();\n    \n    for (let num of arr) {\n        const complement = target - num;\n        if (seen.has(complement)) {\n            pairs.push([complement, num]);\n        }\n        seen.add(num);\n    }\n    \n    return pairs;\n}\n\n// Example usage:\nconst array = [2, 4, 3, 5, 7, 8, 9];\nconst targetSum = 10;\nconst result = findPairsWithSum(array, targetSum);\nconsole.log(result); // Output: [[3, 7], [2, 8]]\n```"
  },
  {
    "task": "Construct a method to remove all occurrences of a specific value from an array.",
    "code": "```javascript\nfunction removeOccurrences(arr, valueToRemove) {\n    return arr.filter(element => element !== valueToRemove);\n}\n\n// Example usage\nlet array = [1, 2, 3, 4, 3, 5];\nlet result = removeOccurrences(array, 3);\nconsole.log(result); // Output: [1, 2, 4, 5]\n```"
  },
  {
    "task": "Write a function to find the longest increasing subsequence in an array.",
    "code": "```javascript\nfunction longestIncreasingSubsequence(arr) {\n    if (arr.length === 0) return [];\n    \n    const dp = Array(arr.length).fill(1);\n    const prev = Array(arr.length).fill(-1);\n    \n    let maxLength = 0;\n    let maxIndex = -1;\n    \n    for (let i = 1; i < arr.length; i++) {\n        for (let j = 0; j < i; j++) {\n            if (arr[i] > arr[j] && dp[i] < dp[j] + 1) {\n                dp[i] = dp[j] + 1;\n                prev[i] = j;\n            }\n        }\n        \n        if (dp[i] > maxLength) {\n            maxLength = dp[i];\n            maxIndex = i;\n        }\n    }\n    \n    const sequence = [];\n    let currentIndex = maxIndex;\n    while (currentIndex !== -1) {\n        sequence.push(arr[currentIndex]);\n        currentIndex = prev[currentIndex];\n    }\n    \n    return sequence.reverse();\n}\n```"
  },
  {
    "task": "Develop an algorithm to find the missing number in a sequential array.",
    "code": "```javascript\nfunction findMissingNumber(arr) {\n    const n = arr.length + 1;\n    const totalSum = (n * (n + 1)) / 2;\n    const arraySum = arr.reduce((acc, num) => acc + num, 0);\n    return totalSum - arraySum;\n}\n\n// Example usage:\nconst sequentialArray = [1, 2, 4, 5, 6];\nconst missingNumber = findMissingNumber(sequentialArray);\nconsole.log(missingNumber); // Output: 3\n```"
  },
  {
    "task": "Create a program to find the common elements between two arrays.",
    "code": "```javascript\nfunction findCommonElements(arr1, arr2) {\n    return arr1.filter(element => arr2.includes(element));\n}\n\nconst array1 = [1, 2, 3, 4, 5];\nconst array2 = [4, 5, 6, 7, 8];\nconst commonElements = findCommonElements(array1, array2);\nconsole.log(commonElements);\n```"
  },
  {
    "task": "Implement a function to move all negative numbers to the beginning of an array.",
    "code": "```javascript\nfunction moveNegativesToFront(arr) {\n    let negatives = [];\n    let positives = [];\n    \n    for (let num of arr) {\n        if (num < 0) {\n            negatives.push(num);\n        } else {\n            positives.push(num);\n        }\n    }\n    \n    return negatives.concat(positives);\n}\n\n// Example usage\nlet arr = [1, -2, 3, -4, 5];\nconsole.log(moveNegativesToFront(arr)); // Output: [-2, -4, 1, 3, 5]\n```"
  },
  {
    "task": "Write a method to check if an array is a palindrome.",
    "code": "```javascript\nfunction isPalindrome(arr) {\n    for (let i = 0, j = arr.length - 1; i < j; i++, j--) {\n        if (arr[i] !== arr[j]) {\n            return false;\n        }\n    }\n    return true;\n}\n```"
  },
  {
    "task": "Design a routine to create a new array that is the element-wise sum of two input arrays.",
    "code": "```javascript\nfunction elementWiseSum(array1, array2) {\n    if (array1.length !== array2.length) {\n        throw new Error('Arrays must have the same length');\n    }\n    return array1.map((value, index) => value + array2[index]);\n}\n```"
  },
  {
    "task": "Create a function to find the product of all elements in an array, excluding the current element.",
    "code": "```javascript\nfunction productExcludingSelf(arr) {\n    const n = arr.length;\n    const result = new Array(n).fill(1);\n\n    let leftProduct = 1;\n    for (let i = 0; i < n; i++) {\n        result[i] = leftProduct;\n        leftProduct *= arr[i];\n    }\n\n    let rightProduct = 1;\n    for (let i = n - 1; i >= 0; i--) {\n        result[i] *= rightProduct;\n        rightProduct *= arr[i];\n    }\n\n    return result;\n}\n```"
  },
  {
    "task": "Develop a script to remove elements from an array that are smaller than a given threshold.",
    "code": "```javascript\nfunction removeElementsBelowThreshold(arr, threshold) {\n    return arr.filter(element => element >= threshold);\n}\n\n// Example usage:\nconst array = [1, 5, 3, 7, 2, 8];\nconst threshold = 4;\nconst filteredArray = removeElementsBelowThreshold(array, threshold);\nconsole.log(filteredArray); // Output: [5, 7, 8]\n```"
  },
  {
    "task": "Implement a method to clone an array without using built-in functions.",
    "code": "```javascript\nfunction cloneArray(arr) {\n    let clonedArray = [];\n    for (let i = 0; i < arr.length; i++) {\n        clonedArray[i] = arr[i];\n    }\n    return clonedArray;\n}\n```"
  },
  {
    "task": "Create a program that rotates a 2D array (matrix) 90 degrees clockwise.",
    "code": "```javascript\nfunction rotateMatrix(matrix) {\n    const n = matrix.length;\n    const result = Array.from({ length: n }, () => Array(n).fill(0));\n    \n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < n; j++) {\n            result[j][n - 1 - i] = matrix[i][j];\n        }\n    }\n    \n    return result;\n}\n\n// Example usage:\nconst matrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\nconst rotatedMatrix = rotateMatrix(matrix);\nconsole.log(rotatedMatrix);\n```"
  },
  {
    "task": "Write a function to find the kth smallest element in an unsorted array.",
    "code": "```javascript\nfunction findKthSmallest(arr, k) {\n    arr.sort((a, b) => a - b);\n    return arr[k - 1];\n}\n```"
  },
  {
    "task": "Design a routine to partition an array into even and odd numbers.",
    "code": "```javascript\nfunction partitionArray(array) {\n    let evens = [];\n    let odds = [];\n    \n    for (let number of array) {\n        if (number % 2 === 0) {\n            evens.push(number);\n        } else {\n            odds.push(number);\n        }\n    }\n    \n    return { evens, odds };\n}\n\n// Example usage\nlet numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet partitioned = partitionArray(numbers);\nconsole.log(partitioned.evens); // [2, 4, 6, 8, 10]\nconsole.log(partitioned.odds);  // [1, 3, 5, 7, 9]\n```"
  },
  {
    "task": "Create a method to merge overlapping intervals in an array.",
    "code": "```javascript\nfunction mergeIntervals(intervals) {\n    if (!intervals.length) return [];\n    \n    intervals.sort((a, b) => a[0] - b[0]);\n    \n    const merged = [intervals[0]];\n    \n    for (let i = 1; i < intervals.length; i++) {\n        const lastMerged = merged[merged.length - 1];\n        const current = intervals[i];\n        \n        if (lastMerged[1] >= current[0]) {\n            lastMerged[1] = Math.max(lastMerged[1], current[1]);\n        } else {\n            merged.push(current);\n        }\n    }\n    \n    return merged;\n}\n```"
  },
  {
    "task": "Develop a function to count the frequency of each unique element in an array.",
    "code": "```javascript\nfunction countFrequency(arr) {\n    const frequency = {};\n    arr.forEach(element => {\n        frequency[element] = (frequency[element] || 0) + 1;\n    });\n    return frequency;\n}\n```"
  },
  {
    "task": "Write a program to generate all possible subsets of an array.",
    "code": "```javascript\nfunction subsets(array) {\n    const result = [];\n    const generateSubsets = (index, currentSubset) => {\n        if (index === array.length) {\n            result.push([...currentSubset]);\n            return;\n        }\n        // Exclude the current element\n        generateSubsets(index + 1, currentSubset);\n        // Include the current element\n        currentSubset.push(array[index]);\n        generateSubsets(index + 1, currentSubset);\n        currentSubset.pop();\n    };\n    generateSubsets(0, []);\n    return result;\n}\n\n// Example usage:\nconst array = [1, 2, 3];\nconsole.log(subsets(array));\n```"
  },
  {
    "task": "Implement a routine to cyclically permute the elements of an array.",
    "code": "```javascript\nfunction cyclicallyPermuteArray(arr) {\n    if (arr.length === 0) return arr;\n    let lastElement = arr.pop();\n    arr.unshift(lastElement);\n    return arr;\n}\n\n// Example usage:\nlet array = [1, 2, 3, 4, 5];\nconsole.log(cyclicallyPermuteArray(array)); // Output: [5, 1, 2, 3, 4]\n```"
  },
  {
    "task": "Create a function that checks if two arrays are equal regardless of element order.",
    "code": "```javascript\nfunction arraysEqual(arr1, arr2) {\n    if (arr1.length !== arr2.length) {\n        return false;\n    }\n    let sortedArr1 = arr1.slice().sort();\n    let sortedArr2 = arr2.slice().sort();\n    for (let i = 0; i < sortedArr1.length; i++) {\n        if (sortedArr1[i] !== sortedArr2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n```"
  },
  {
    "task": "Design a script to initialize an array with random integers within a specified range.",
    "code": "```javascript\nfunction getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nfunction initializeArrayWithRandomIntegers(size, min, max) {\n    const array = new Array(size);\n    for (let i = 0; i < size; i++) {\n        array[i] = getRandomInt(min, max);\n    }\n    return array;\n}\n\nconst size = 10; // Specify the size of the array\nconst min = 1;   // Specify the minimum value of the random integers\nconst max = 100; // Specify the maximum value of the random integers\n\nconst randomArray = initializeArrayWithRandomIntegers(size, min, max);\nconsole.log(randomArray);\n```"
  },
  {
    "task": "Write a method to convert an array of integers to a single concatenated number.",
    "code": "```javascript\nfunction concatenateArray(arr) {\n    return parseInt(arr.join(''), 10);\n}\n\nlet numbers = [1, 2, 3, 4];\nlet result = concatenateArray(numbers);\nconsole.log(result); // Output: 1234\n```"
  },
  {
    "task": "Develop a function to find the median value of an unsorted array.",
    "code": "```javascript\nfunction findMedian(arr) {\n    arr.sort((a, b) => a - b);\n    const mid = Math.floor(arr.length / 2);\n    return arr.length % 2 !== 0 ? arr[mid] : (arr[mid - 1] + arr[mid]) / 2;\n}\n```"
  },
  {
    "task": "Create a routine to determine if an array is sorted in ascending order.",
    "code": "```javascript\nfunction isArraySorted(arr) {\n    for (let i = 0; i < arr.length - 1; i++) {\n        if (arr[i] > arr[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n```"
  },
  {
    "task": "Implement a method to find the longest contiguous subarray with equal number of 0s and 1s.",
    "code": "```javascript\nfunction findMaxLength(nums) {\n    const map = new Map();\n    map.set(0, -1);\n    let maxLength = 0;\n    let count = 0;\n\n    for (let i = 0; i < nums.length; i++) {\n        count += nums[i] === 1 ? 1 : -1;\n        if (map.has(count)) {\n            maxLength = Math.max(maxLength, i - map.get(count));\n        } else {\n            map.set(count, i);\n        }\n    }\n\n    return maxLength;\n}\n```"
  },
  {
    "task": "Write a function to interleave two arrays of equal length.",
    "code": "```javascript\nfunction interleaveArrays(arr1, arr2) {\n    let result = [];\n    for (let i = 0; i < arr1.length; i++) {\n        result.push(arr1[i], arr2[i]);\n    }\n    return result;\n}\n```"
  },
  {
    "task": "Design a program to replace each element in an array with the next greatest element.",
    "code": "```javascript\nfunction replaceWithNextGreatest(arr) {\n    let n = arr.length;\n    let maxFromRight = arr[n - 1];\n    arr[n - 1] = -1;\n\n    for (let i = n - 2; i >= 0; i--) {\n        let temp = arr[i];\n        arr[i] = maxFromRight;\n        if (temp > maxFromRight) {\n            maxFromRight = temp;\n        }\n    }\n    return arr;\n}\n\nlet arr = [16, 17, 4, 3, 5, 2];\nconsole.log(replaceWithNextGreatest(arr));\n```"
  },
  {
    "task": "Create a function to calculate the dot product of two numeric arrays.",
    "code": "```javascript\nfunction dotProduct(arr1, arr2) {\n    if (arr1.length !== arr2.length) {\n        throw new Error('Arrays must be of the same length');\n    }\n    return arr1.reduce((sum, value, index) => sum + value * arr2[index], 0);\n}\n```"
  },
  {
    "task": "Develop a script to find the first recurring element in an array.",
    "code": "```javascript\nfunction findFirstRecurringElement(arr) {\n    const seen = new Set();\n    for (const element of arr) {\n        if (seen.has(element)) {\n            return element;\n        }\n        seen.add(element);\n    }\n    return null;\n}\n\n// Example usage:\nconst array = [2, 5, 1, 2, 3, 5, 1, 2, 4];\nconst result = findFirstRecurringElement(array);\nconsole.log(result); // Output: 2\n```"
  },
  {
    "task": "Write a method to check if an array is a subset of another array.",
    "code": "```javascript\nfunction isSubset(arr1, arr2) {\n    return arr1.every(element => arr2.includes(element));\n}\n\n// Example usage\nconst array1 = [1, 2, 3];\nconst array2 = [1, 2, 3, 4, 5];\nconsole.log(isSubset(array1, array2)); // Output: true\n```"
  },
  {
    "task": "Implement a function to add a specific value to each element in an array.",
    "code": "```javascript\nfunction addValueToArray(arr, value) {\n    return arr.map(element => element + value);\n}\n\n// Example usage:\n// const result = addValueToArray([1, 2, 3], 5);\n// console.log(result); // Output: [6, 7, 8]\n```"
  },
  {
    "task": "Create a program that finds the largest product of three numbers in an array.",
    "code": "```javascript\nfunction largestProductOfThree(array) {\n  if (array.length < 3) throw new Error(\"Array must have at least three numbers\");\n  \n  array.sort((a, b) => a - b);\n  \n  const n = array.length;\n  const product1 = array[n - 1] * array[n - 2] * array[n - 3];\n  const product2 = array[0] * array[1] * array[n - 1];\n  \n  return Math.max(product1, product2);\n}\n\n// Example usage:\nconst numbers = [1, 10, 2, 6, 5, 3];\nconsole.log(largestProductOfThree(numbers)); // Output: 300\n```"
  },
  {
    "task": "Design a routine to find all unique permutations of an array.",
    "code": "```javascript\nfunction permuteUnique(nums) {\n    const results = [];\n    nums.sort((a, b) => a - b);\n    function backtrack(path, used) {\n        if (path.length === nums.length) {\n            results.push([...path]);\n            return;\n        }\n        for (let i = 0; i < nums.length; i++) {\n            if (used[i]) continue;\n            if (i > 0 && nums[i] === nums[i - 1] && !used[i - 1]) continue;\n            used[i] = true;\n            path.push(nums[i]);\n            backtrack(path, used);\n            path.pop();\n            used[i] = false;\n        }\n    }\n    backtrack([], Array(nums.length).fill(false));\n    return results;\n}\n```"
  },
  {
    "task": "Write a function to transpose a square matrix represented as a 2D array.",
    "code": "```javascript\nfunction transposeMatrix(matrix) {\n    const n = matrix.length;\n    for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            [matrix[i][j], matrix[j][i]] = [matrix[j][i], matrix[i][j]];\n        }\n    }\n    return matrix;\n}\n```"
  },
  {
    "task": "Develop a method to find the longest common prefix in an array of strings.",
    "code": "```javascript\nfunction longestCommonPrefix(strs) {\n    if (!strs.length) return '';\n    \n    let prefix = strs[0];\n    \n    for (let i = 1; i < strs.length; i++) {\n        while (strs[i].indexOf(prefix) !== 0) {\n            prefix = prefix.substring(0, prefix.length - 1);\n            if (!prefix) return '';\n        }\n    }\n    \n    return prefix;\n}\n\n// Example usage\nconst strings = [\"flower\", \"flow\", \"flight\"];\nconsole.log(longestCommonPrefix(strings)); // Output: \"fl\"\n```"
  },
  {
    "task": "Implement a function to flatten a multi-dimensional array into a single array.",
    "code": "```javascript\nfunction flattenArray(arr) {\n    return arr.reduce((flat, toFlatten) => \n        flat.concat(Array.isArray(toFlatten) ? flattenArray(toFlatten) : toFlatten), []);\n}\n```"
  },
  {
    "task": "Create a script to shift elements of an array to the left by a given number of positions.",
    "code": "```javascript\nfunction shiftArrayLeft(arr, positions) {\n    const len = arr.length;\n    const shift = positions % len;\n    return arr.slice(shift).concat(arr.slice(0, shift));\n}\n\n// Example usage:\nconst array = [1, 2, 3, 4, 5];\nconst shiftedArray = shiftArrayLeft(array, 2);\nconsole.log(shiftedArray); // Output: [3, 4, 5, 1, 2]\n```"
  },
  {
    "task": "Write a routine to sort an array of objects based on a specific property.",
    "code": "```javascript\nfunction sortArrayByProperty(arr, property) {\n    return arr.sort((a, b) => {\n        if (a[property] < b[property]) {\n            return -1;\n        }\n        if (a[property] > b[property]) {\n            return 1;\n        }\n        return 0;\n    });\n}\n\n// Example usage:\nconst objectsArray = [\n    { name: 'John', age: 30 },\n    { name: 'Jane', age: 25 },\n    { name: 'Doe', age: 35 }\n];\n\nconst sortedArray = sortArrayByProperty(objectsArray, 'age');\nconsole.log(sortedArray);\n```"
  },
  {
    "task": "Design a program to find the smallest missing positive integer in an array.",
    "code": "```javascript\nfunction findSmallestMissingPositive(arr) {\n    const set = new Set(arr);\n    let i = 1;\n    while (set.has(i)) {\n        i++;\n    }\n    return i;\n}\n\n// Example usage\nconst numbers = [3, 4, -1, 1];\nconst result = findSmallestMissingPositive(numbers);\nconsole.log(result); // Outputs: 2\n```"
  },
  {
    "task": "Create a function to calculate the cumulative sum of an array.",
    "code": "```javascript\nfunction cumulativeSum(arr) {\n    let sum = 0;\n    return arr.map(num => sum += num);\n}\n```"
  },
  {
    "task": "Develop a function to remove consecutive duplicate elements in an array.",
    "code": "```javascript\nfunction removeConsecutiveDuplicates(arr) {\n    if (arr.length === 0) return [];\n    \n    const result = [arr[0]];\n\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] !== arr[i - 1]) {\n            result.push(arr[i]);\n        }\n    }\n\n    return result;\n}\n```"
  },
  {
    "task": "Implement a method to find the majority element in an array, if any.",
    "code": "```javascript\nfunction findMajorityElement(arr) {\n    const countMap = {};\n    const majorityCount = Math.floor(arr.length / 2);\n\n    for (let num of arr) {\n        countMap[num] = (countMap[num] || 0) + 1;\n        if (countMap[num] > majorityCount) {\n            return num;\n        }\n    }\n\n    return null;\n}\n```"
  },
  {
    "task": "Write a script to split an array into chunks of a given size.",
    "code": "```javascript\nfunction chunkArray(array, chunkSize) {\n    if (chunkSize <= 0) return [];\n    let result = [];\n    for (let i = 0; i < array.length; i += chunkSize) {\n        result.push(array.slice(i, i + chunkSize));\n    }\n    return result;\n}\n\n// Example usage:\nlet array = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet chunkSize = 3;\nlet chunkedArray = chunkArray(array, chunkSize);\nconsole.log(chunkedArray);\n```"
  },
  {
    "task": "Create a program to calculate the difference between the largest and smallest values in an array.",
    "code": "```javascript\nfunction calculateDifference(arr) {\n    if (arr.length === 0) return 0;\n    let min = arr[0];\n    let max = arr[0];\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] < min) min = arr[i];\n        if (arr[i] > max) max = arr[i];\n    }\n    return max - min;\n}\n\n// Example usage:\nconst array = [4, 9, 1, 5, 6];\nconst difference = calculateDifference(array);\nconsole.log(difference);\n```"
  },
  {
    "task": "Design a routine to find the starting index of a target subarray in a larger array.",
    "code": "```javascript\nfunction findSubarrayIndex(arr, subarr) {\n    for (let i = 0; i <= arr.length - subarr.length; i++) {\n        let match = true;\n        for (let j = 0; j < subarr.length; j++) {\n            if (arr[i + j] !== subarr[j]) {\n                match = false;\n                break;\n            }\n        }\n        if (match) {\n            return i;\n        }\n    }\n    return -1;\n}\n\n// Example usage:\nconst arr = [1, 2, 3, 4, 5, 6];\nconst subarr = [3, 4];\nconsole.log(findSubarrayIndex(arr, subarr)); // Output: 2\n```"
  },
  {
    "task": "Write a function to compress an array by eliminating zero values.",
    "code": "```javascript\nfunction compressArray(arr) {\n    return arr.filter(value => value !== 0);\n}\n\n// Example usage:\nconst originalArray = [1, 0, 2, 3, 0, 4, 0, 5];\nconst compressedArray = compressArray(originalArray);\nconsole.log(compressedArray); // Output: [1, 2, 3, 4, 5]\n```"
  },
  {
    "task": "Develop a method to determine if an array can be split into two parts with equal sums.",
    "code": "```javascript\nfunction canSplitArray(arr) {\n    const totalSum = arr.reduce((acc, num) => acc + num, 0);\n    if (totalSum % 2 !== 0) return false;\n    \n    const target = totalSum / 2;\n    let currentSum = 0;\n    \n    for (let num of arr) {\n        currentSum += num;\n        if (currentSum === target) return true;\n    }\n    \n    return false;\n}\n```"
  },
  {
    "task": "Implement a function to round each element in an array to the nearest integer.",
    "code": "```javascript\nfunction roundArrayElements(arr) {\n    return arr.map(Math.round);\n}\n```"
  },
  {
    "task": "Create a routine to generate an array of the Fibonacci sequence up to a given number.",
    "code": "```javascript\nfunction generateFibonacciSequence(limit) {\n    if (limit <= 0) return [];\n    if (limit === 1) return [0];\n    \n    const fibArray = [0, 1];\n    let nextFib = fibArray[0] + fibArray[1];\n    \n    while (nextFib <= limit) {\n        fibArray.push(nextFib);\n        const lastIndex = fibArray.length - 1;\n        nextFib = fibArray[lastIndex] + fibArray[lastIndex - 1];\n    }\n    \n    return fibArray;\n}\n```"
  },
  {
    "task": "Write a program to find the longest repeating sequence in an array.",
    "code": "```javascript\nfunction findLongestRepeatingSequence(arr) {\n    let longestSeq = [];\n    let currentSeq = [];\n    \n    for (let i = 0; i < arr.length; i++) {\n        currentSeq = [arr[i]];\n        \n        for (let j = i + 1; j < arr.length; j++) {\n            if (arr[j] === arr[i]) {\n                currentSeq.push(arr[j]);\n            } else {\n                break;\n            }\n        }\n        \n        if (currentSeq.length > longestSeq.length) {\n            longestSeq = currentSeq;\n        }\n    }\n    \n    return longestSeq;\n}\n\n// Example usage:\nconst array = [1, 2, 2, 3, 3, 3, 2, 2];\nconst longestSequence = findLongestRepeatingSequence(array);\nconsole.log(longestSequence); // Output: [3, 3, 3]\n```"
  },
  {
    "task": "Design a function to multiply each element of an array by its index.",
    "code": "```javascript\nfunction multiplyElementsByIndex(arr) {\n    return arr.map((element, index) => element * index);\n}\n```"
  },
  {
    "task": "Create a method to convert an array of characters into a single string.",
    "code": "```javascript\nfunction arrayToString(charArray) {\n    return charArray.join('');\n}\n```"
  },
  {
    "task": "Develop a function to fill an array with a specified value.",
    "code": "```javascript\nfunction fillArray(length, value) {\n    return Array(length).fill(value);\n}\n```"
  },
  {
    "task": "Implement a routine to determine if an array has any duplicate elements.",
    "code": "```javascript\nfunction hasDuplicates(arr) {\n    const seen = new Set();\n    for (const element of arr) {\n        if (seen.has(element)) {\n            return true;\n        }\n        seen.add(element);\n    }\n    return false;\n}\n```"
  },
  {
    "task": "Write a script to reverse the order of words in an array of strings.",
    "code": "```javascript\nconst reverseWords = (wordsArray) => {\n    return wordsArray.reverse();\n};\n\nconst words = [\"hello\", \"world\", \"this\", \"is\", \"an\", \"example\"];\nconst reversedWords = reverseWords(words);\nconsole.log(reversedWords);\n```"
  },
  {
    "task": "Create a function to calculate the total number of distinct elements in an array.",
    "code": "```javascript\nfunction countDistinctElements(arr) {\n    const uniqueElements = new Set(arr);\n    return uniqueElements.size;\n}\n```"
  },
  {
    "task": "Design a program to find the largest gap between consecutive elements in a sorted array.",
    "code": "```javascript\nfunction largestGap(arr) {\n    if (arr.length < 2) return 0;\n    arr.sort((a, b) => a - b);\n    let maxGap = 0;\n    for (let i = 1; i < arr.length; i++) {\n        let gap = arr[i] - arr[i - 1];\n        if (gap > maxGap) {\n            maxGap = gap;\n        }\n    }\n    return maxGap;\n}\n```"
  },
  {
    "task": "Write a routine to perform element-wise multiplication of two arrays.",
    "code": "```javascript\nfunction elementWiseMultiplication(arr1, arr2) {\n    if (arr1.length !== arr2.length) {\n        throw new Error('Arrays must be of the same length');\n    }\n\n    let result = [];\n    for (let i = 0; i < arr1.length; i++) {\n        result.push(arr1[i] * arr2[i]);\n    }\n\n    return result;\n}\n```"
  },
  {
    "task": "Develop a method to split a string into an array of words.",
    "code": "```javascript\nfunction splitStringIntoWords(inputString) {\n    return inputString.split(' ');\n}\n\n// Example usage:\nconst sentence = \"Develop a method to split a string into an array of words\";\nconst wordsArray = splitStringIntoWords(sentence);\nconsole.log(wordsArray);\n```"
  },
  {
    "task": "Implement a function to find the longest contiguous subarray with a sum less than a target.",
    "code": "```javascript\nfunction longestSubarrayWithSumLessThanTarget(arr, target) {\n    let maxLength = 0;\n    let currentSum = 0;\n    let start = 0;\n\n    for (let end = 0; end < arr.length; end++) {\n        currentSum += arr[end];\n\n        while (currentSum >= target && start <= end) {\n            currentSum -= arr[start];\n            start++;\n        }\n\n        maxLength = Math.max(maxLength, end - start + 1);\n    }\n\n    return maxLength;\n}\n```"
  },
  {
    "task": "Create a script to rotate a 2D array (matrix) 180 degrees.",
    "code": "```javascript\nfunction rotateMatrix180(matrix) {\n    let numRows = matrix.length;\n    let numCols = matrix[0].length;\n    let rotatedMatrix = new Array(numRows);\n\n    for (let i = 0; i < numRows; i++) {\n        rotatedMatrix[i] = new Array(numCols);\n        for (let j = 0; j < numCols; j++) {\n            rotatedMatrix[i][j] = matrix[numRows - 1 - i][numCols - 1 - j];\n        }\n    }\n    return rotatedMatrix;\n}\n\n// Example usage:\nlet matrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\n\nlet rotated = rotateMatrix180(matrix);\nconsole.log(rotated);\n```"
  },
  {
    "task": "Write a program to convert an array of binary digits to its decimal equivalent.",
    "code": "```javascript\nfunction binaryArrayToDecimal(binaryArray) {\n    return binaryArray.reduce((accumulator, currentValue, index) => {\n        return accumulator + currentValue * Math.pow(2, binaryArray.length - 1 - index);\n    }, 0);\n}\n\n// Example usage:\nconst binaryDigits = [1, 0, 1, 1];\nconst decimal = binaryArrayToDecimal(binaryDigits);\nconsole.log(decimal); // Output: 11\n```"
  },
  {
    "task": "Design a function to return a new array with elements squared from the input array.",
    "code": "```javascript\nfunction squareElements(inputArray) {\n    return inputArray.map(element => element * element);\n}\n```"
  },
  {
    "task": "Create a method to check if all elements in an array are unique.",
    "code": "```javascript\nfunction areAllElementsUnique(arr) {\n    const seen = new Set();\n    for (const element of arr) {\n        if (seen.has(element)) {\n            return false;\n        }\n        seen.add(element);\n    }\n    return true;\n}\n```"
  },
  {
    "task": "Develop a routine to find the indices of all occurrences of a specific element in an array.",
    "code": "```javascript\nfunction findIndices(arr, element) {\n    const indices = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] === element) {\n            indices.push(i);\n        }\n    }\n    return indices;\n}\n```"
  },
  {
    "task": "Implement a function to merge multiple arrays into one.",
    "code": "```javascript\nfunction mergeArrays(...arrays) {\n    return arrays.flat();\n}\n\n// Example usage:\nconst result = mergeArrays([1, 2], [3, 4], [5, 6]);\nconsole.log(result); // Output: [1, 2, 3, 4, 5, 6]\n```"
  },
  {
    "task": "Write a script to convert an array of integers into a formatted string.",
    "code": "```javascript\nfunction arrayToString(arr) {\n    return arr.join(', ');\n}\n\nconst numbers = [1, 2, 3, 4, 5];\nconst formattedString = arrayToString(numbers);\nconsole.log(formattedString);\n```"
  },
  {
    "task": "Create a program to find the largest sum of any contiguous subarray.",
    "code": "```javascript\nfunction maxSubArray(nums) {\n    let maxSum = nums[0];\n    let currentSum = nums[0];\n    \n    for (let i = 1; i < nums.length; i++) {\n        currentSum = Math.max(nums[i], currentSum + nums[i]);\n        maxSum = Math.max(maxSum, currentSum);\n    }\n    \n    return maxSum;\n}\n\n// Example usage:\nconst nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4];\nconsole.log(maxSubArray(nums)); // Outputs: 6\n```"
  },
  {
    "task": "Design a function to compare two arrays and return the differences.",
    "code": "```javascript\nfunction compareArrays(arr1, arr2) {\n    const diff1 = arr1.filter(item => !arr2.includes(item));\n    const diff2 = arr2.filter(item => !arr1.includes(item));\n    return { differencesInArr1: diff1, differencesInArr2: diff2 };\n}\n```"
  },
  {
    "task": "Write a method to find the longest subarray with elements in arithmetic progression.",
    "code": "```javascript\nfunction longestArithmeticSubarray(arr) {\n    if (arr.length < 2) return arr.length;\n\n    let maxLength = 1;\n    let currentLength = 1;\n    let commonDifference = arr[1] - arr[0];\n\n    for (let i = 1; i < arr.length - 1; i++) {\n        if (arr[i + 1] - arr[i] === commonDifference) {\n            currentLength++;\n        } else {\n            commonDifference = arr[i + 1] - arr[i];\n            currentLength = 2;\n        }\n        maxLength = Math.max(maxLength, currentLength);\n    }\n\n    return maxLength;\n}\n```"
  },
  {
    "task": "Develop a routine to remove elements from an array based on a predicate function.",
    "code": "```javascript\nfunction removeElements(array, predicate) {\n    return array.filter(element => !predicate(element));\n}\n\n// Example usage:\nconst numbers = [1, 2, 3, 4, 5];\nconst isEven = num => num % 2 === 0;\nconst result = removeElements(numbers, isEven);\nconsole.log(result); // [1, 3, 5]\n```"
  },
  {
    "task": "Implement a function to determine if two arrays have any common elements.",
    "code": "```javascript\nfunction haveCommonElements(arr1, arr2) {\n    return arr1.some(element => arr2.includes(element));\n}\n```"
  },
  {
    "task": "Create a script to initialize an empty array and populate it with user input.",
    "code": "```javascript\nlet array = [];\nlet userInput;\nwhile (userInput !== null) {\n    userInput = prompt(\"Enter a value (or press Cancel to finish):\");\n    if (userInput !== null) {\n        array.push(userInput);\n    }\n}\n```"
  },
  {
    "task": "Write a program to find the maximum sum of non-adjacent elements in an array.",
    "code": "```javascript\nfunction maxSumNonAdjacent(arr) {\n    if (arr.length === 0) return 0;\n    if (arr.length === 1) return arr[0];\n\n    let prevMax = 0;\n    let currentMax = 0;\n\n    for (let num of arr) {\n        let newMax = Math.max(currentMax, prevMax + num);\n        prevMax = currentMax;\n        currentMax = newMax;\n    }\n\n    return currentMax;\n}\n\n// Example usage:\nconst nums = [3, 2, 5, 10, 7];\nconsole.log(maxSumNonAdjacent(nums)); // Output: 15\n```"
  },
  {
    "task": "Design a function to shuffle an array randomly.",
    "code": "```javascript\nfunction shuffleArray(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n}\n```"
  },
  {
    "task": "Create a method to generate a new array where each element is the cumulative product of the input array.",
    "code": "```javascript\nfunction cumulativeProduct(arr) {\n    let result = [];\n    let product = 1;\n    for (let i = 0; i < arr.length; i++) {\n        product *= arr[i];\n        result.push(product);\n    }\n    return result;\n}\n```"
  },
  {
    "task": "Develop a routine to find the largest element in each row of a 2D array.",
    "code": "```javascript\nfunction findLargestInRows(matrix) {\n    return matrix.map(row => Math.max(...row));\n}\n\n// Example usage:\nconst matrix = [\n    [3, 5, 9],\n    [1, 6, 4],\n    [8, 7, 2]\n];\nconst largestElements = findLargestInRows(matrix);\nconsole.log(largestElements); // Output: [9, 6, 8]\n```"
  },
  {
    "task": "Implement a function to count the number of negative numbers in an array.",
    "code": "```javascript\nfunction countNegatives(arr) {\n    return arr.filter(num => num < 0).length;\n}\n```"
  },
  {
    "task": "Write a script to find the longest subarray with all distinct elements.",
    "code": "```javascript\nfunction longestDistinctSubarray(arr) {\n    let maxLength = 0;\n    let start = 0;\n    const seen = new Map();\n\n    for (let end = 0; end < arr.length; end++) {\n        if (seen.has(arr[end])) {\n            start = Math.max(start, seen.get(arr[end]) + 1);\n        }\n        seen.set(arr[end], end);\n        maxLength = Math.max(maxLength, end - start + 1);\n    }\n\n    return maxLength;\n}\n\n// Example usage\nconst array = [1, 2, 3, 4, 5, 1, 2, 3];\nconsole.log(longestDistinctSubarray(array)); // Output: 5\n```"
  }
]