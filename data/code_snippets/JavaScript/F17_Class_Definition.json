[
  {
    "task": "Define a class representing a book with attributes for title, author, and number of pages, and a method to display the book's information.",
    "code": "```javascript\nclass Book {\n    constructor(title, author, pages) {\n        this.title = title;\n        this.author = author;\n        this.pages = pages;\n    }\n\n    displayInfo() {\n        console.log(`Title: ${this.title}, Author: ${this.author}, Pages: ${this.pages}`);\n    }\n}\n```"
  },
  {
    "task": "Create a class for a bank account that includes attributes for account number, balance, and a method to deposit funds.",
    "code": "```javascript\nclass BankAccount {\n  constructor(accountNumber, balance) {\n    this.accountNumber = accountNumber;\n    this.balance = balance;\n  }\n\n  deposit(amount) {\n    this.balance += amount;\n  }\n}\n```"
  },
  {
    "task": "Design a class for a vehicle with properties for make, model, and year, and a method to start the engine.",
    "code": "```javascript\nclass Vehicle {\n    constructor(make, model, year) {\n        this.make = make;\n        this.model = model;\n        this.year = year;\n    }\n\n    startEngine() {\n        console.log(\"Engine started\");\n    }\n}\n```"
  },
  {
    "task": "Implement a class that models a student with attributes for name, ID, and grades, and a method to calculate the GPA.",
    "code": "```javascript\nclass Student {\n    constructor(name, id, grades) {\n        this.name = name;\n        this.id = id;\n        this.grades = grades;\n    }\n\n    calculateGPA() {\n        if (this.grades.length === 0) return 0;\n        const sum = this.grades.reduce((total, grade) => total + grade, 0);\n        return sum / this.grades.length;\n    }\n}\n```"
  },
  {
    "task": "Construct a class for a rectangle that has attributes for width and height, and methods to calculate area and perimeter.",
    "code": "```javascript\nclass Rectangle {\n    constructor(width, height) {\n        this.width = width;\n        this.height = height;\n    }\n\n    calculateArea() {\n        return this.width * this.height;\n    }\n\n    calculatePerimeter() {\n        return 2 * (this.width + this.height);\n    }\n}\n```"
  },
  {
    "task": "Formulate a class for a smartphone with properties for brand, model, and battery life, and a method to make a call.",
    "code": "```javascript\nclass Smartphone {\n    constructor(brand, model, batteryLife) {\n        this.brand = brand;\n        this.model = model;\n        this.batteryLife = batteryLife;\n    }\n\n    makeCall(contact) {\n        console.log(`Calling ${contact} from ${this.model}...`);\n    }\n}\n```"
  },
  {
    "task": "Build a class representing a movie with attributes for title, director, and duration, and a method to play the movie.",
    "code": "```javascript\nclass Movie {\n    constructor(title, director, duration) {\n        this.title = title;\n        this.director = director;\n        this.duration = duration;\n    }\n\n    play() {\n        console.log(`Playing ${this.title} directed by ${this.director}`);\n    }\n}\n```"
  },
  {
    "task": "Create a class for an employee with attributes for name, position, and salary, and a method to display their profile.",
    "code": "```javascript\nclass Employee {\n    constructor(name, position, salary) {\n        this.name = name;\n        this.position = position;\n        this.salary = salary;\n    }\n\n    displayProfile() {\n        console.log(`Name: ${this.name}, Position: ${this.position}, Salary: ${this.salary}`);\n    }\n}\n```"
  },
  {
    "task": "Design a class for a library that includes attributes for name, location, and books available, and a method to add a new book.",
    "code": "```javascript\nclass Library {\n    constructor(name, location) {\n        this.name = name;\n        this.location = location;\n        this.books = [];\n    }\n\n    addBook(book) {\n        this.books.push(book);\n    }\n}\n```"
  },
  {
    "task": "Develop a class for a shopping cart with properties for items and total cost, and methods to add and remove items.",
    "code": "```javascript\nclass ShoppingCart {\n    constructor() {\n        this.items = [];\n        this.totalCost = 0;\n    }\n\n    addItem(item, price) {\n        this.items.push(item);\n        this.totalCost += price;\n    }\n\n    removeItem(item, price) {\n        const index = this.items.indexOf(item);\n        if (index > -1) {\n            this.items.splice(index, 1);\n            this.totalCost -= price;\n        }\n    }\n}\n```"
  },
  {
    "task": "Implement a class for a thermostat with attributes for current temperature and desired temperature, and a method to adjust the temperature.",
    "code": "```javascript\nclass Thermostat {\n    constructor(currentTemperature, desiredTemperature) {\n        this.currentTemperature = currentTemperature;\n        this.desiredTemperature = desiredTemperature;\n    }\n\n    adjustTemperature() {\n        if (this.currentTemperature < this.desiredTemperature) {\n            this.currentTemperature++;\n        } else if (this.currentTemperature > this.desiredTemperature) {\n            this.currentTemperature--;\n        }\n    }\n}\n```"
  },
  {
    "task": "Formulate a class for a person with attributes for first name, last name, and age, and a method to return the full name.",
    "code": "```javascript\nclass Person {\n    constructor(firstName, lastName, age) {\n        this.firstName = firstName;\n        this.lastName = lastName;\n        this.age = age;\n    }\n\n    getFullName() {\n        return `${this.firstName} ${this.lastName}`;\n    }\n}\n```"
  },
  {
    "task": "Construct a class for a game character with properties for health, strength, and inventory, and a method to attack.",
    "code": "```javascript\nclass GameCharacter {\n    constructor(health, strength) {\n        this.health = health;\n        this.strength = strength;\n        this.inventory = [];\n    }\n\n    attack(target) {\n        if (target.health > 0) {\n            target.health -= this.strength;\n            console.log(`Attacked! Target's health is now ${target.health}`);\n        } else {\n            console.log(\"Target is already defeated.\");\n        }\n    }\n}\n```"
  },
  {
    "task": "Create a class for a calendar event with attributes for title, date, and location, and a method to reschedule the event.",
    "code": "```javascript\nclass CalendarEvent {\n  constructor(title, date, location) {\n    this.title = title;\n    this.date = date;\n    this.location = location;\n  }\n\n  reschedule(newDate) {\n    this.date = newDate;\n  }\n}\n```"
  },
  {
    "task": "Design a class representing a song with properties for title, artist, and duration, and a method to play the song.",
    "code": "```javascript\nclass Song {\n    constructor(title, artist, duration) {\n        this.title = title;\n        this.artist = artist;\n        this.duration = duration;\n    }\n\n    play() {\n        console.log(`Playing ${this.title} by ${this.artist}`);\n    }\n}\n```"
  },
  {
    "task": "Develop a class for an order in an e-commerce system with attributes for order ID, customer, and items, and a method to calculate total price.",
    "code": "```javascript\nclass Order {\n  constructor(orderId, customer, items) {\n    this.orderId = orderId;\n    this.customer = customer;\n    this.items = items; // items should be an array of objects with price properties\n  }\n\n  calculateTotalPrice() {\n    return this.items.reduce((total, item) => total + item.price, 0);\n  }\n}\n```"
  },
  {
    "task": "Build a class for a social media post with attributes for content, author, and timestamp, and a method to like the post.",
    "code": "```javascript\nclass SocialMediaPost {\n    constructor(content, author, timestamp) {\n        this.content = content;\n        this.author = author;\n        this.timestamp = timestamp;\n        this.likes = 0;\n    }\n\n    likePost() {\n        this.likes++;\n    }\n}\n```"
  },
  {
    "task": "Create a class for a computer with properties for processor, RAM, and storage, and a method to display system specifications.",
    "code": "```javascript\nclass Computer {\n    constructor(processor, ram, storage) {\n        this.processor = processor;\n        this.ram = ram;\n        this.storage = storage;\n    }\n\n    displaySpecifications() {\n        return `Processor: ${this.processor}, RAM: ${this.ram}, Storage: ${this.storage}`;\n    }\n}\n\n// Example usage:\nconst myComputer = new Computer('Intel i7', '16GB', '512GB SSD');\nconsole.log(myComputer.displaySpecifications());\n```"
  },
  {
    "task": "Implement a class for a restaurant menu item with attributes for name, price, and description, and a method to update the price.",
    "code": "```javascript\nclass MenuItem {\n  constructor(name, price, description) {\n    this.name = name;\n    this.price = price;\n    this.description = description;\n  }\n\n  updatePrice(newPrice) {\n    this.price = newPrice;\n  }\n}\n```"
  },
  {
    "task": "Design a class for a package delivery with attributes for tracking number, destination, and status, and a method to update the status.",
    "code": "```javascript\nclass PackageDelivery {\n    constructor(trackingNumber, destination, status) {\n        this.trackingNumber = trackingNumber;\n        this.destination = destination;\n        this.status = status;\n    }\n\n    updateStatus(newStatus) {\n        this.status = newStatus;\n    }\n}\n```"
  },
  {
    "task": "Construct a class representing a pet with attributes for species, age, and name, and a method to display its details.",
    "code": "```javascript\nclass Pet {\n    constructor(species, age, name) {\n        this.species = species;\n        this.age = age;\n        this.name = name;\n    }\n\n    displayDetails() {\n        console.log(`Species: ${this.species}, Age: ${this.age}, Name: ${this.name}`);\n    }\n}\n\n// Example of creating a pet and displaying its details\nconst pet = new Pet('Dog', 5, 'Buddy');\npet.displayDetails();\n```"
  },
  {
    "task": "Formulate a class for a product in a store with properties for SKU, name, and price, and a method to apply a discount.",
    "code": "```javascript\nclass Product {\n    constructor(sku, name, price) {\n        this.sku = sku;\n        this.name = name;\n        this.price = price;\n    }\n\n    applyDiscount(discountPercentage) {\n        this.price -= this.price * (discountPercentage / 100);\n    }\n}\n```"
  },
  {
    "task": "Develop a class for a university course with attributes for course code, title, and credits, and a method to enroll a student.",
    "code": "```javascript\nclass UniversityCourse {\n  constructor(courseCode, title, credits) {\n    this.courseCode = courseCode;\n    this.title = title;\n    this.credits = credits;\n    this.enrolledStudents = [];\n  }\n\n  enrollStudent(student) {\n    this.enrolledStudents.push(student);\n  }\n}\n```"
  },
  {
    "task": "Create a class for a smart light bulb with attributes for color, brightness, and state (on/off), and a method to change the color.",
    "code": "```javascript\nclass SmartLightBulb {\n    constructor(color, brightness, state) {\n        this.color = color;\n        this.brightness = brightness;\n        this.state = state;\n    }\n\n    changeColor(newColor) {\n        this.color = newColor;\n    }\n}\n```"
  },
  {
    "task": "Design a class for a blog post with properties for title, content, and date published, and a method to edit the content.",
    "code": "```javascript\nclass BlogPost {\n    constructor(title, content, datePublished) {\n        this.title = title;\n        this.content = content;\n        this.datePublished = datePublished;\n    }\n\n    editContent(newContent) {\n        this.content = newContent;\n    }\n}\n```"
  },
  {
    "task": "Build a class for a bank transaction with attributes for transaction ID, amount, and type, and a method to reverse the transaction.",
    "code": "```javascript\nclass BankTransaction {\n    constructor(transactionId, amount, type) {\n        this.transactionId = transactionId;\n        this.amount = amount;\n        this.type = type;\n    }\n\n    reverseTransaction() {\n        if (this.type === 'credit') {\n            this.type = 'debit';\n        } else if (this.type === 'debit') {\n            this.type = 'credit';\n        }\n    }\n}\n```"
  },
  {
    "task": "Implement a class for a city with properties for name, population, and area, and a method to calculate population density.",
    "code": "```javascript\nclass City {\n    constructor(name, population, area) {\n        this.name = name;\n        this.population = population;\n        this.area = area;\n    }\n\n    calculatePopulationDensity() {\n        return this.population / this.area;\n    }\n}\n```"
  },
  {
    "task": "Construct a class for a library member with attributes for member ID, name, and borrowed books, and a method to borrow a book.",
    "code": "```javascript\nclass LibraryMember {\n    constructor(memberId, name) {\n        this.memberId = memberId;\n        this.name = name;\n        this.borrowedBooks = [];\n    }\n\n    borrowBook(book) {\n        this.borrowedBooks.push(book);\n    }\n}\n```"
  },
  {
    "task": "Create a class for a flight reservation with attributes for flight number, passenger name, and seat number, and a method to change the seat.",
    "code": "```javascript\nclass FlightReservation {\n    constructor(flightNumber, passengerName, seatNumber) {\n        this.flightNumber = flightNumber;\n        this.passengerName = passengerName;\n        this.seatNumber = seatNumber;\n    }\n\n    changeSeat(newSeatNumber) {\n        this.seatNumber = newSeatNumber;\n    }\n}\n```"
  },
  {
    "task": "Develop a class for a digital photo album with properties for album name, photos, and a method to add a new photo.",
    "code": "```javascript\nclass DigitalPhotoAlbum {\n  constructor(albumName) {\n    this.albumName = albumName;\n    this.photos = [];\n  }\n\n  addPhoto(photo) {\n    this.photos.push(photo);\n  }\n}\n```"
  },
  {
    "task": "Design a class for a task in a to-do list with attributes for description, deadline, and status, and a method to mark it as complete.",
    "code": "```javascript\nclass Task {\n    constructor(description, deadline, status) {\n        this.description = description;\n        this.deadline = deadline;\n        this.status = status;\n    }\n\n    markAsComplete() {\n        this.status = 'Complete';\n    }\n}\n```"
  },
  {
    "task": "Formulate a class for a conference speaker with attributes for name, topic, and time slot, and a method to update the time slot.",
    "code": "```javascript\nclass ConferenceSpeaker {\n    constructor(name, topic, timeSlot) {\n        this.name = name;\n        this.topic = topic;\n        this.timeSlot = timeSlot;\n    }\n\n    updateTimeSlot(newTimeSlot) {\n        this.timeSlot = newTimeSlot;\n    }\n}\n```"
  },
  {
    "task": "Construct a class for a real estate property with attributes for address, price, and square footage, and a method to change the price.",
    "code": "```javascript\nclass RealEstateProperty {\n  constructor(address, price, squareFootage) {\n    this.address = address;\n    this.price = price;\n    this.squareFootage = squareFootage;\n  }\n\n  changePrice(newPrice) {\n    this.price = newPrice;\n  }\n}\n```"
  },
  {
    "task": "Create a class for a weather forecast with properties for temperature, humidity, and condition, and a method to update the forecast.",
    "code": "```javascript\nclass WeatherForecast {\n    constructor(temperature, humidity, condition) {\n        this.temperature = temperature;\n        this.humidity = humidity;\n        this.condition = condition;\n    }\n\n    updateForecast(newTemperature, newHumidity, newCondition) {\n        this.temperature = newTemperature;\n        this.humidity = newHumidity;\n        this.condition = newCondition;\n    }\n}\n```"
  },
  {
    "task": "Build a class for a musical instrument with attributes for type, brand, and model, and a method to play a note.",
    "code": "```javascript\nclass MusicalInstrument {\n    constructor(type, brand, model) {\n        this.type = type;\n        this.brand = brand;\n        this.model = model;\n    }\n\n    playNote(note) {\n        console.log(`Playing note: ${note}`);\n    }\n}\n```"
  },
  {
    "task": "Design a class for a sports team with attributes for team name, players, and coach, and a method to add a new player.",
    "code": "```javascript\nclass SportsTeam {\n    constructor(teamName, coach) {\n        this.teamName = teamName;\n        this.players = [];\n        this.coach = coach;\n    }\n\n    addPlayer(playerName) {\n        this.players.push(playerName);\n    }\n}\n```"
  },
  {
    "task": "Implement a class for a podcast episode with attributes for title, duration, and host, and a method to play the episode.",
    "code": "```javascript\nclass PodcastEpisode {\n    constructor(title, duration, host) {\n        this.title = title;\n        this.duration = duration;\n        this.host = host;\n    }\n\n    play() {\n        console.log(`Playing episode: ${this.title} hosted by ${this.host}`);\n    }\n}\n```"
  },
  {
    "task": "Develop a class for a space mission with properties for mission name, crew, and launch date, and a method to launch the mission.",
    "code": "```javascript\nclass SpaceMission {\n    constructor(missionName, crew, launchDate) {\n        this.missionName = missionName;\n        this.crew = crew;\n        this.launchDate = launchDate;\n    }\n\n    launchMission() {\n        console.log(`Mission ${this.missionName} is launching on ${this.launchDate} with crew: ${this.crew}.`);\n    }\n}\n```"
  },
  {
    "task": "Create a class for a virtual assistant with attributes for name, language, and skills, and a method to add a new skill.",
    "code": "```javascript\nclass VirtualAssistant {\n    constructor(name, language, skills = []) {\n        this.name = name;\n        this.language = language;\n        this.skills = skills;\n    }\n\n    addSkill(newSkill) {\n        this.skills.push(newSkill);\n    }\n}\n```"
  },
  {
    "task": "Formulate a class for a news article with attributes for headline, content, and author, and a method to publish the article.",
    "code": "```javascript\nclass NewsArticle {\n  constructor(headline, content, author) {\n    this.headline = headline;\n    this.content = content;\n    this.author = author;\n  }\n\n  publish() {\n    console.log(`Headline: ${this.headline}`);\n    console.log(`Content: ${this.content}`);\n    console.log(`Author: ${this.author}`);\n  }\n}\n```"
  },
  {
    "task": "Construct a class for a hiking trail with attributes for trail name, length, and difficulty, and a method to update the difficulty.",
    "code": "```javascript\nclass HikingTrail {\n    constructor(trailName, length, difficulty) {\n        this.trailName = trailName;\n        this.length = length;\n        this.difficulty = difficulty;\n    }\n\n    updateDifficulty(newDifficulty) {\n        this.difficulty = newDifficulty;\n    }\n}\n```"
  },
  {
    "task": "Design a class for a subscription service with properties for service name, subscriber count, and subscription fee, and a method to update the fee.",
    "code": "```javascript\nclass SubscriptionService {\n  constructor(serviceName, subscriberCount, subscriptionFee) {\n    this.serviceName = serviceName;\n    this.subscriberCount = subscriberCount;\n    this.subscriptionFee = subscriptionFee;\n  }\n\n  updateFee(newFee) {\n    this.subscriptionFee = newFee;\n  }\n}\n```"
  },
  {
    "task": "Build a class for a digital wallet with attributes for balance, transaction history, and a method to add funds.",
    "code": "```javascript\nclass DigitalWallet {\n  constructor() {\n    this.balance = 0;\n    this.transactionHistory = [];\n  }\n\n  addFunds(amount) {\n    if (amount > 0) {\n      this.balance += amount;\n      this.transactionHistory.push({ type: 'credit', amount: amount });\n    }\n  }\n}\n```"
  },
  {
    "task": "Implement a class for a cooking recipe with attributes for name, ingredients, and instructions, and a method to update the instructions.",
    "code": "```javascript\nclass Recipe {\n  constructor(name, ingredients, instructions) {\n    this.name = name;\n    this.ingredients = ingredients;\n    this.instructions = instructions;\n  }\n\n  updateInstructions(newInstructions) {\n    this.instructions = newInstructions;\n  }\n}\n```"
  },
  {
    "task": "Develop a class for a time zone with properties for zone name, offset, and a method to convert time from another time zone.",
    "code": "```javascript\nclass TimeZone {\n    constructor(zoneName, offset) {\n        this.zoneName = zoneName;\n        this.offset = offset;\n    }\n\n    convertTime(time, fromOffset) {\n        const timeInMinutes = time.getHours() * 60 + time.getMinutes();\n        const convertedTimeInMinutes = timeInMinutes + (this.offset - fromOffset) * 60;\n        const hours = Math.floor(convertedTimeInMinutes / 60) % 24;\n        const minutes = convertedTimeInMinutes % 60;\n        const convertedTime = new Date(time);\n        convertedTime.setHours(hours);\n        convertedTime.setMinutes(minutes);\n        return convertedTime;\n    }\n}\n```"
  },
  {
    "task": "Create a class for a camera with attributes for resolution, brand, and model, and a method to take a picture.",
    "code": "```javascript\nclass Camera {\n  constructor(resolution, brand, model) {\n    this.resolution = resolution;\n    this.brand = brand;\n    this.model = model;\n  }\n\n  takePicture() {\n    console.log(`Picture taken with ${this.brand} ${this.model} at ${this.resolution} resolution.`);\n  }\n}\n```"
  },
  {
    "task": "Design a class for a gaming console with properties for brand, model, and storage capacity, and a method to install a game.",
    "code": "```javascript\nclass GamingConsole {\n    constructor(brand, model, storageCapacity) {\n        this.brand = brand;\n        this.model = model;\n        this.storageCapacity = storageCapacity;\n    }\n    \n    installGame(gameName) {\n        console.log(`Installing ${gameName} on ${this.brand} ${this.model}`);\n    }\n}\n```"
  },
  {
    "task": "Formulate a class for a museum exhibit with attributes for exhibit name, artist, and year, and a method to update the year.",
    "code": "```javascript\nclass MuseumExhibit {\n    constructor(exhibitName, artist, year) {\n        this.exhibitName = exhibitName;\n        this.artist = artist;\n        this.year = year;\n    }\n\n    updateYear(newYear) {\n        this.year = newYear;\n    }\n}\n```"
  },
  {
    "task": "Construct a class for a fitness tracker with attributes for steps, calories burned, and heart rate, and a method to add steps.",
    "code": "```javascript\nclass FitnessTracker {\n  constructor(steps = 0, caloriesBurned = 0, heartRate = 0) {\n    this.steps = steps;\n    this.caloriesBurned = caloriesBurned;\n    this.heartRate = heartRate;\n  }\n\n  addSteps(stepCount) {\n    this.steps += stepCount;\n  }\n}\n```"
  },
  {
    "task": "Build a class for an aquarium with properties for tank size, fish species, and water temperature, and a method to add a new fish.",
    "code": "```javascript\nclass Aquarium {\n  constructor(tankSize, fishSpecies, waterTemperature) {\n    this.tankSize = tankSize;\n    this.fishSpecies = fishSpecies;\n    this.waterTemperature = waterTemperature;\n  }\n\n  addFish(newSpecies) {\n    this.fishSpecies.push(newSpecies);\n  }\n}\n```"
  },
  {
    "task": "Create a class for a chat message with attributes for sender, content, and timestamp, and a method to edit the content.",
    "code": "```javascript\nclass ChatMessage {\n    constructor(sender, content, timestamp) {\n        this.sender = sender;\n        this.content = content;\n        this.timestamp = timestamp;\n    }\n\n    editContent(newContent) {\n        this.content = newContent;\n    }\n}\n```"
  },
  {
    "task": "Design a class for a vending machine with properties for items available, prices, and a method to dispense an item.",
    "code": "```javascript\nclass VendingMachine {\n    constructor(items, prices) {\n        this.items = items;\n        this.prices = prices;\n    }\n\n    dispenseItem(itemName) {\n        const itemIndex = this.items.indexOf(itemName);\n        if (itemIndex !== -1) {\n            console.log(`Dispensing ${itemName} for $${this.prices[itemIndex]}`);\n            this.items.splice(itemIndex, 1);\n            this.prices.splice(itemIndex, 1);\n        } else {\n            console.log(`Item ${itemName} not available`);\n        }\n    }\n}\n\n// Example usage\nconst vendingMachine = new VendingMachine(['Soda', 'Chips', 'Candy'], [1.50, 1.00, 0.75]);\nvendingMachine.dispenseItem('Chips');\n```"
  },
  {
    "task": "Implement a class for a digital clock with attributes for current time, time zone, and a method to set an alarm.",
    "code": "```javascript\nclass DigitalClock {\n    constructor(currentTime, timeZone) {\n        this.currentTime = currentTime;\n        this.timeZone = timeZone;\n        this.alarmTime = null;\n    }\n\n    setAlarm(alarmTime) {\n        this.alarmTime = alarmTime;\n    }\n}\n```"
  },
  {
    "task": "Develop a class for a historical figure with attributes for name, birthdate, and achievements, and a method to add an achievement.",
    "code": "```javascript\nclass HistoricalFigure {\n    constructor(name, birthdate) {\n        this.name = name;\n        this.birthdate = birthdate;\n        this.achievements = [];\n    }\n\n    addAchievement(achievement) {\n        this.achievements.push(achievement);\n    }\n}\n```"
  },
  {
    "task": "Formulate a class for a travel itinerary with attributes for destinations, travel dates, and activities, and a method to add a destination.",
    "code": "```javascript\nclass TravelItinerary {\n  constructor() {\n    this.destinations = [];\n    this.travelDates = [];\n    this.activities = [];\n  }\n\n  addDestination(destination) {\n    this.destinations.push(destination);\n  }\n}\n```"
  },
  {
    "task": "Construct a class for a fashion brand with properties for brand name, founder, and product lines, and a method to launch a new product line.",
    "code": "```javascript\nclass FashionBrand {\n    constructor(brandName, founder, productLines) {\n        this.brandName = brandName;\n        this.founder = founder;\n        this.productLines = productLines || [];\n    }\n\n    launchNewProductLine(newProductLine) {\n        this.productLines.push(newProductLine);\n    }\n}\n```"
  },
  {
    "task": "Create a class for a video game with attributes for title, genre, and rating, and a method to update the rating.",
    "code": "```javascript\nclass VideoGame {\n    constructor(title, genre, rating) {\n        this.title = title;\n        this.genre = genre;\n        this.rating = rating;\n    }\n\n    updateRating(newRating) {\n        this.rating = newRating;\n    }\n}\n```"
  },
  {
    "task": "Build a class for a scientific experiment with attributes for experiment name, hypothesis, and results, and a method to record results.",
    "code": "```javascript\nclass ScientificExperiment {\n    constructor(experimentName, hypothesis) {\n        this.experimentName = experimentName;\n        this.hypothesis = hypothesis;\n        this.results = null;\n    }\n\n    recordResults(results) {\n        this.results = results;\n    }\n}\n```"
  },
  {
    "task": "Design a class for a gourmet dish with properties for dish name, ingredients, and cooking time, and a method to change cooking time.",
    "code": "```javascript\nclass GourmetDish {\n    constructor(dishName, ingredients, cookingTime) {\n        this.dishName = dishName;\n        this.ingredients = ingredients;\n        this.cookingTime = cookingTime;\n    }\n\n    changeCookingTime(newCookingTime) {\n        this.cookingTime = newCookingTime;\n    }\n}\n```"
  },
  {
    "task": "Implement a class for a political office with attributes for office title, holder, and term length, and a method to change the holder.",
    "code": "```javascript\nclass PoliticalOffice {\n    constructor(title, holder, termLength) {\n        this.title = title;\n        this.holder = holder;\n        this.termLength = termLength;\n    }\n\n    changeHolder(newHolder) {\n        this.holder = newHolder;\n    }\n}\n```"
  },
  {
    "task": "Develop a class for an astronomical object with properties for name, type, and distance from Earth, and a method to update the distance.",
    "code": "```javascript\nclass AstronomicalObject {\n    constructor(name, type, distanceFromEarth) {\n        this.name = name;\n        this.type = type;\n        this.distanceFromEarth = distanceFromEarth;\n    }\n\n    updateDistance(newDistance) {\n        this.distanceFromEarth = newDistance;\n    }\n}\n```"
  },
  {
    "task": "Formulate a class for a public transportation route with attributes for route number, stops, and schedule, and a method to add a stop.",
    "code": "```javascript\nclass PublicTransportationRoute {\n    constructor(routeNumber, stops = [], schedule = {}) {\n        this.routeNumber = routeNumber;\n        this.stops = stops;\n        this.schedule = schedule;\n    }\n\n    addStop(stop) {\n        this.stops.push(stop);\n    }\n}\n```"
  },
  {
    "task": "Construct a class for a board game with properties for game name, player count, and rules, and a method to change the rules.",
    "code": "```javascript\nclass BoardGame {\n    constructor(gameName, playerCount, rules) {\n        this.gameName = gameName;\n        this.playerCount = playerCount;\n        this.rules = rules;\n    }\n\n    changeRules(newRules) {\n        this.rules = newRules;\n    }\n}\n```"
  },
  {
    "task": "Create a class for a customer loyalty program with attributes for program name, points, and rewards, and a method to redeem points.",
    "code": "```javascript\nclass LoyaltyProgram {\n    constructor(programName, points, rewards) {\n        this.programName = programName;\n        this.points = points;\n        this.rewards = rewards;\n    }\n\n    redeemPoints(pointsToRedeem) {\n        if (pointsToRedeem <= this.points) {\n            this.points -= pointsToRedeem;\n            return `Redeemed ${pointsToRedeem} points. Remaining points: ${this.points}.`;\n        } else {\n            return `Insufficient points to redeem. Available points: ${this.points}.`;\n        }\n    }\n}\n```"
  },
  {
    "task": "Design a class for an art gallery with properties for gallery name, location, and exhibitions, and a method to add a new exhibition.",
    "code": "```javascript\nclass ArtGallery {\n    constructor(galleryName, location) {\n        this.galleryName = galleryName;\n        this.location = location;\n        this.exhibitions = [];\n    }\n\n    addExhibition(exhibition) {\n        this.exhibitions.push(exhibition);\n    }\n}\n```"
  },
  {
    "task": "Build a class for a personal blog with attributes for blog name, posts, and a method to add a new post.",
    "code": "```javascript\nclass PersonalBlog {\n    constructor(blogName) {\n        this.blogName = blogName;\n        this.posts = [];\n    }\n\n    addPost(post) {\n        this.posts.push(post);\n    }\n}\n```"
  },
  {
    "task": "Implement a class for a mobile application with properties for app name, version, and developer, and a method to update the version.",
    "code": "```javascript\nclass MobileApp {\n    constructor(appName, version, developer) {\n        this.appName = appName;\n        this.version = version;\n        this.developer = developer;\n    }\n\n    updateVersion(newVersion) {\n        this.version = newVersion;\n    }\n}\n```"
  },
  {
    "task": "Develop a class for a language translator with attributes for source language, target language, and translation method, and a method to translate a text.",
    "code": "```javascript\nclass LanguageTranslator {\n    constructor(sourceLanguage, targetLanguage, translationMethod) {\n        this.sourceLanguage = sourceLanguage;\n        this.targetLanguage = targetLanguage;\n        this.translationMethod = translationMethod;\n    }\n\n    translate(text) {\n        // Implement the translation logic here\n        // This is a placeholder for the translation logic\n        return `Translated text from ${this.sourceLanguage} to ${this.targetLanguage} using ${this.translationMethod}`;\n    }\n}\n```"
  },
  {
    "task": "Formulate a class for a culinary school with properties for school name, courses offered, and a method to add a new course.",
    "code": "```javascript\nclass CulinarySchool {\n  constructor(schoolName, coursesOffered) {\n    this.schoolName = schoolName;\n    this.coursesOffered = coursesOffered;\n  }\n\n  addCourse(newCourse) {\n    this.coursesOffered.push(newCourse);\n  }\n}\n```"
  },
  {
    "task": "Construct a class for a musical band with attributes for band name, members, and genre, and a method to add a new member.",
    "code": "```javascript\nclass Band {\n    constructor(name, members, genre) {\n        this.name = name;\n        this.members = members;\n        this.genre = genre;\n    }\n\n    addMember(newMember) {\n        this.members.push(newMember);\n    }\n}\n```"
  },
  {
    "task": "Create a class for a television series with properties for series title, episodes, and network, and a method to add a new episode.",
    "code": "```javascript\nclass TelevisionSeries {\n    constructor(seriesTitle, network) {\n        this.seriesTitle = seriesTitle;\n        this.network = network;\n        this.episodes = [];\n    }\n\n    addEpisode(episode) {\n        this.episodes.push(episode);\n    }\n}\n```"
  },
  {
    "task": "Design a class for a wildlife reserve with attributes for reserve name, species protected, and area size, and a method to expand the area.",
    "code": "```javascript\nclass WildlifeReserve {\n    constructor(reserveName, speciesProtected, areaSize) {\n        this.reserveName = reserveName;\n        this.speciesProtected = speciesProtected;\n        this.areaSize = areaSize;\n    }\n\n    expandArea(additionalSize) {\n        this.areaSize += additionalSize;\n    }\n}\n```"
  },
  {
    "task": "Build a class for a luxury car with properties for brand, model, and price, and a method to update the price.",
    "code": "```javascript\nclass LuxuryCar {\n    constructor(brand, model, price) {\n        this.brand = brand;\n        this.model = model;\n        this.price = price;\n    }\n\n    updatePrice(newPrice) {\n        this.price = newPrice;\n    }\n}\n```"
  },
  {
    "task": "Implement a class for a scientific journal with attributes for journal name, articles, and impact factor, and a method to add a new article.",
    "code": "```javascript\nclass ScientificJournal {\n    constructor(journalName, impactFactor) {\n        this.journalName = journalName;\n        this.impactFactor = impactFactor;\n        this.articles = [];\n    }\n\n    addArticle(article) {\n        this.articles.push(article);\n    }\n}\n```"
  },
  {
    "task": "Develop a class for a historical monument with properties for monument name, location, and year established, and a method to update the location.",
    "code": "```javascript\nclass HistoricalMonument {\n    constructor(name, location, yearEstablished) {\n        this.name = name;\n        this.location = location;\n        this.yearEstablished = yearEstablished;\n    }\n\n    updateLocation(newLocation) {\n        this.location = newLocation;\n    }\n}\n```"
  },
  {
    "task": "Formulate a class for an educational course with attributes for course title, instructor, and syllabus, and a method to update the syllabus.",
    "code": "```javascript\nclass EducationalCourse {\n    constructor(courseTitle, instructor, syllabus) {\n        this.courseTitle = courseTitle;\n        this.instructor = instructor;\n        this.syllabus = syllabus;\n    }\n\n    updateSyllabus(newSyllabus) {\n        this.syllabus = newSyllabus;\n    }\n}\n```"
  },
  {
    "task": "Construct a class for a city park with properties for park name, facilities, and opening hours, and a method to add a new facility.",
    "code": "```javascript\nclass CityPark {\n    constructor(name, facilities, openingHours) {\n        this.name = name;\n        this.facilities = facilities;\n        this.openingHours = openingHours;\n    }\n\n    addFacility(newFacility) {\n        this.facilities.push(newFacility);\n    }\n}\n```"
  },
  {
    "task": "Create a class for a fitness class with attributes for class name, instructor, and schedule, and a method to update the schedule.",
    "code": "```javascript\nclass FitnessClass {\n    constructor(className, instructor, schedule) {\n        this.className = className;\n        this.instructor = instructor;\n        this.schedule = schedule;\n    }\n\n    updateSchedule(newSchedule) {\n        this.schedule = newSchedule;\n    }\n}\n```"
  },
  {
    "task": "Design a class for a virtual reality game with properties for game name, platform, and VR compatibility, and a method to change the platform.",
    "code": "```javascript\nclass VirtualRealityGame {\n  constructor(name, platform, vrCompatible) {\n    this.name = name;\n    this.platform = platform;\n    this.vrCompatible = vrCompatible;\n  }\n\n  changePlatform(newPlatform) {\n    this.platform = newPlatform;\n  }\n}\n```"
  },
  {
    "task": "Build a class for a mountain range with attributes for range name, highest peak, and countries covered, and a method to add a new peak.",
    "code": "```javascript\nclass MountainRange {\n    constructor(rangeName, highestPeak, countriesCovered) {\n        this.rangeName = rangeName;\n        this.highestPeak = highestPeak;\n        this.countriesCovered = countriesCovered;\n        this.peaks = [];\n    }\n\n    addPeak(peak) {\n        this.peaks.push(peak);\n    }\n}\n```"
  },
  {
    "task": "Implement a class for a documentary film with properties for title, director, and subject, and a method to update the subject.",
    "code": "```javascript\nclass DocumentaryFilm {\n    constructor(title, director, subject) {\n        this.title = title;\n        this.director = director;\n        this.subject = subject;\n    }\n\n    updateSubject(newSubject) {\n        this.subject = newSubject;\n    }\n}\n```"
  },
  {
    "task": "Develop a class for a classical music composition with attributes for composition name, composer, and duration, and a method to change the duration.",
    "code": "```javascript\nclass ClassicalMusicComposition {\n  constructor(compositionName, composer, duration) {\n    this.compositionName = compositionName;\n    this.composer = composer;\n    this.duration = duration;\n  }\n\n  changeDuration(newDuration) {\n    this.duration = newDuration;\n  }\n}\n```"
  },
  {
    "task": "Formulate a class for a public library with properties for library name, books available, and membership, and a method to add a new book.",
    "code": "```javascript\nclass PublicLibrary {\n  constructor(name, books, membership) {\n    this.name = name;\n    this.books = books;\n    this.membership = membership;\n  }\n\n  addBook(newBook) {\n    this.books.push(newBook);\n  }\n}\n```"
  },
  {
    "task": "Construct a class for a tech startup with attributes for startup name, founder, and funding, and a method to raise additional funding.",
    "code": "```javascript\nclass TechStartup {\n  constructor(name, founder, funding) {\n    this.name = name;\n    this.founder = founder;\n    this.funding = funding;\n  }\n\n  raiseFunding(amount) {\n    this.funding += amount;\n  }\n}\n```"
  }
]