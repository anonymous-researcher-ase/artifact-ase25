[
  {
    "task": "Create a program that continuously asks the user to enter a number until they input a negative number.",
    "code": "```javascript\nlet readlineSync = require('readline-sync');\n\nlet number = 0;\n\nwhile (number >= 0) {\n    number = parseFloat(readlineSync.question('Enter a number: '));\n}\n```"
  },
  {
    "task": "Write a function that doubles a number and repeats the process until the number is greater than 1000.",
    "code": "```javascript\nfunction doubleUntilGreaterThanThousand(num) {\n    while (num <= 1000) {\n        num *= 2;\n    }\n    return num;\n}\n```"
  },
  {
    "task": "Develop a routine to keep printing 'Hello, World!' until a counter reaches 10.",
    "code": "```javascript\nlet counter = 0;\nwhile (counter < 10) {\n    console.log('Hello, World!');\n    counter++;\n}\n```"
  },
  {
    "task": "Construct a loop that checks if a randomly generated number is even, repeating until an odd number is found.",
    "code": "```javascript\nfunction findOddNumber() {\n  let number;\n  while (true) {\n    number = Math.floor(Math.random() * 100);\n    if (number % 2 !== 0) {\n      break;\n    }\n  }\n  return number;\n}\n\nconst oddNumber = findOddNumber();\nconsole.log(oddNumber);\n```"
  },
  {
    "task": "Design a countdown timer that prints each second until it reaches zero.",
    "code": "```javascript\nlet countdown = 10; // Set the starting number for the countdown\n\nwhile (countdown >= 0) {\n    console.log(countdown);\n    countdown--;\n}\n```"
  },
  {
    "task": "Implement a system where a user can keep adding items to a list until they type 'stop'.",
    "code": "```javascript\nlet readlineSync = require('readline-sync');\nlet items = [];\n\nwhile (true) {\n    let input = readlineSync.question('Enter an item (or type \"stop\" to finish): ');\n    if (input.toLowerCase() === 'stop') {\n        break;\n    }\n    items.push(input);\n}\n\nconsole.log('Items:', items);\n```"
  },
  {
    "task": "Write a script that simulates rolling a die and continues until a six is rolled.",
    "code": "```javascript\nlet roll;\nwhile (roll !== 6) {\n    roll = Math.floor(Math.random() * 6) + 1;\n    console.log(`Rolled: ${roll}`);\n}\n```"
  },
  {
    "task": "Create a program that asks for a password and keeps prompting until the correct password is entered.",
    "code": "```javascript\nconst correctPassword = \"secret\";\nlet userInput = \"\";\n\nwhile (userInput !== correctPassword) {\n    userInput = prompt(\"Enter the password:\");\n}\n```"
  },
  {
    "task": "Design a loop that calculates the sum of entered numbers until the user enters zero.",
    "code": "```javascript\nlet sum = 0;\nlet input;\n\nwhile (true) {\n  input = parseInt(prompt(\"Enter a number (0 to stop): \"), 10);\n  if (input === 0) {\n    break;\n  }\n  sum += input;\n}\n\nconsole.log(\"The sum is:\", sum);\n```"
  },
  {
    "task": "Implement a feature that prints Fibonacci numbers until a number exceeds 100.",
    "code": "```javascript\nlet a = 0, b = 1;\nwhile (a <= 100) {\n    console.log(a);\n    let next = a + b;\n    a = b;\n    b = next;\n}\n```"
  },
  {
    "task": "Develop a loop that keeps halving a number until it becomes less than one.",
    "code": "```javascript\nlet number = 64; // Example starting number\nwhile (number >= 1) {\n    number /= 2;\n}\n```"
  },
  {
    "task": "Write a program that asks for names and keeps storing them until the user enters 'done'.",
    "code": "```javascript\nconst names = [];\nlet input = '';\n\nwhile (input.toLowerCase() !== 'done') {\n    input = prompt(\"Enter a name (or type 'done' to finish):\");\n    if (input.toLowerCase() !== 'done') {\n        names.push(input);\n    }\n}\n```"
  },
  {
    "task": "Create a process that keeps flipping a coin, recording results until there have been five heads.",
    "code": "```javascript\nlet headsCount = 0;\nconst results = [];\n\nwhile (headsCount < 5) {\n    const flip = Math.random() < 0.5 ? 'Heads' : 'Tails';\n    results.push(flip);\n    if (flip === 'Heads') {\n        headsCount++;\n    }\n}\n```"
  },
  {
    "task": "Implement a countdown that decreases by two each time, starting from 20, until it reaches zero.",
    "code": "```javascript\nlet count = 20;\nwhile (count >= 0) {\n    console.log(count);\n    count -= 2;\n}\n```"
  },
  {
    "task": "Design a solution that repeatedly asks for user input and repeats it back until they type 'exit'.",
    "code": "```javascript\nconst readline = require('readline');\n\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\n\nfunction askForInput() {\n  rl.question('Enter something (type \"exit\" to quit): ', (input) => {\n    if (input === 'exit') {\n      rl.close();\n    } else {\n      console.log(`You entered: ${input}`);\n      askForInput();\n    }\n  });\n}\n\naskForInput();\n```"
  },
  {
    "task": "Develop a loop to simulate a bank account balance, repeatedly deducting a fee until the balance is below zero.",
    "code": "```javascript\nlet balance = 100; // Example starting balance\nconst fee = 10;\n\nwhile (balance >= 0) {\n    balance -= fee;\n}\n\nconsole.log(\"Final balance:\", balance);\n```"
  },
  {
    "task": "Create a sequence generator that multiplies a number by three each time until it reaches or exceeds 100.",
    "code": "```javascript\nlet number = 1;\nwhile (number < 100) {\n    console.log(number);\n    number *= 3;\n}\n```"
  },
  {
    "task": "Write a program that keeps generating random numbers between 1 and 10 until it gets a five.",
    "code": "```javascript\nlet number;\nwhile (number !== 5) {\n    number = Math.floor(Math.random() * 10) + 1;\n}\n```"
  },
  {
    "task": "Implement a system to keep checking the temperature and only stop when it falls below freezing.",
    "code": "```javascript\nlet temperature = 10; // Example initial temperature in Celsius\n\nwhile (temperature >= 0) {\n    // Simulate a temperature check (replace this with actual temperature reading logic)\n    temperature -= 1; // Example logic to decrease temperature\n}\n```"
  },
  {
    "task": "Construct a quiz game that continues asking questions until the player answers incorrectly.",
    "code": "```javascript\nconst questions = [\n    { question: \"What is the capital of France?\", answer: \"Paris\" },\n    { question: \"What is 2 + 2?\", answer: \"4\" },\n    { question: \"What is the color of the sky?\", answer: \"Blue\" }\n];\n\nlet index = 0;\nlet isCorrect = true;\n\nwhile (isCorrect && index < questions.length) {\n    const userAnswer = prompt(questions[index].question);\n    if (userAnswer.trim().toLowerCase() === questions[index].answer.toLowerCase()) {\n        alert(\"Correct!\");\n        index++;\n    } else {\n        alert(\"Incorrect!\");\n        isCorrect = false;\n    }\n}\n```"
  },
  {
    "task": "Write a function that calculates factorials of a number, repeating the process for numbers 1 through 5.",
    "code": "```javascript\nfunction calculateFactorials() {\n    let number = 1;\n    while (number <= 5) {\n        let factorial = 1;\n        let i = 1;\n        while (i <= number) {\n            factorial *= i;\n            i++;\n        }\n        console.log(`Factorial of ${number} is ${factorial}`);\n        number++;\n    }\n}\n\ncalculateFactorials();\n```"
  },
  {
    "task": "Create a loop that prints all even numbers between 1 and 50.",
    "code": "```javascript\nlet number = 2;\nwhile (number <= 50) {\n    console.log(number);\n    number += 2;\n}\n```"
  },
  {
    "task": "Design a program that continuously asks for user input until a palindrome is entered.",
    "code": "```javascript\nconst readline = require('readline').createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\n\nconst isPalindrome = (str) => {\n  const len = str.length;\n  for (let i = 0; i < len / 2; i++) {\n    if (str[i] !== str[len - 1 - i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst askForInput = () => {\n  readline.question('Enter a word: ', (input) => {\n    if (isPalindrome(input)) {\n      console.log('Palindrome entered.');\n      readline.close();\n    } else {\n      askForInput();\n    }\n  });\n};\n\naskForInput();\n```"
  },
  {
    "task": "Implement a countdown that decreases by one each second, starting from 100.",
    "code": "```javascript\nlet countdown = 100;\nconst intervalId = setInterval(() => {\n    console.log(countdown);\n    countdown--;\n    if (countdown < 0) {\n        clearInterval(intervalId);\n    }\n}, 1000);\n```"
  },
  {
    "task": "Write a script that repeatedly asks for a number and adds it to a total until the total exceeds 500.",
    "code": "```javascript\nlet total = 0;\nwhile (total <= 500) {\n    let input = prompt(\"Enter a number:\");\n    let number = parseFloat(input);\n    if (!isNaN(number)) {\n        total += number;\n    }\n}\n```"
  },
  {
    "task": "Create a loop that generates random letters until the letter 'Z' appears.",
    "code": "```javascript\nlet letter;\nwhile (letter !== 'Z') {\n    letter = String.fromCharCode(65 + Math.floor(Math.random() * 26));\n    console.log(letter);\n}\n```"
  },
  {
    "task": "Write a process that continues prompting for two numbers and prints their sum if it's even.",
    "code": "```javascript\nconst prompt = require('prompt-sync')();\n\nwhile (true) {\n    const num1 = parseInt(prompt('Enter the first number: '), 10);\n    const num2 = parseInt(prompt('Enter the second number: '), 10);\n    \n    const sum = num1 + num2;\n    \n    if (sum % 2 === 0) {\n        console.log('The sum is even:', sum);\n    }\n}\n```"
  },
  {
    "task": "Develop a loop that simulates a traffic light sequence until a manual stop command is received.",
    "code": "```javascript\nlet stopCommand = false;\n\nfunction simulateTrafficLight() {\n  let lights = [\"Red\", \"Green\", \"Yellow\"];\n  let currentLight = 0;\n  \n  while (!stopCommand) {\n    console.log(lights[currentLight]);\n    currentLight = (currentLight + 1) % lights.length;\n    \n    // Simulate waiting time for each light\n    if (lights[currentLight] === \"Red\") {\n      sleep(3000); // Red light duration\n    } else if (lights[currentLight] === \"Green\") {\n      sleep(5000); // Green light duration\n    } else {\n      sleep(2000); // Yellow light duration\n    }\n  }\n}\n\nfunction sleep(milliseconds) {\n  const start = new Date().getTime();\n  while (new Date().getTime() - start < milliseconds) {\n    // Simulating delay\n  }\n}\n\n// Call the function to start the simulation\nsimulateTrafficLight();\n\n// Example of how to stop the simulation (this would be triggered by some user action in a real scenario)\nsetTimeout(() => {\n  stopCommand = true;\n  console.log(\"Traffic light simulation stopped.\");\n}, 20000); // Stop after 20 seconds\n```"
  },
  {
    "task": "Implement a feature that keeps printing numbers in reverse order starting from 10.",
    "code": "```javascript\nlet number = 10;\nwhile (number >= 1) {\n    console.log(number);\n    number--;\n}\n```"
  },
  {
    "task": "Create a program that rolls two dice and continues until the sum is exactly seven.",
    "code": "```javascript\nfunction rollDice() {\n    return Math.floor(Math.random() * 6) + 1;\n}\n\nlet sum = 0;\n\nwhile (sum !== 7) {\n    const die1 = rollDice();\n    const die2 = rollDice();\n    sum = die1 + die2;\n    console.log(`Rolled: ${die1} and ${die2}, Sum: ${sum}`);\n}\n```"
  },
  {
    "task": "Design a loop that keeps asking for ages and prints the average once a negative age is entered.",
    "code": "```javascript\nlet sum = 0;\nlet count = 0;\nlet age = 0;\n\nwhile (true) {\n    age = parseInt(prompt(\"Enter age: \"), 10);\n    if (age < 0) break;\n    sum += age;\n    count++;\n}\n\nif (count > 0) {\n    console.log(\"Average age:\", sum / count);\n} else {\n    console.log(\"No ages were entered.\");\n}\n```"
  },
  {
    "task": "Write a routine that squares numbers starting from 1 until the square is greater than 500.",
    "code": "```javascript\nlet number = 1;\nwhile (number * number <= 500) {\n    console.log(number * number);\n    number++;\n}\n```"
  },
  {
    "task": "Implement a system to ask for a string and append it to a file until 'end' is typed.",
    "code": "```javascript\nconst fs = require('fs');\nconst readline = require('readline');\n\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\n\nfunction askForString() {\n  rl.question('Enter a string (type \"end\" to stop): ', (input) => {\n    if (input.toLowerCase() === 'end') {\n      rl.close();\n    } else {\n      fs.appendFileSync('output.txt', input + '\\n');\n      askForString();\n    }\n  });\n}\n\naskForString();\n```"
  },
  {
    "task": "Create a script that checks if a number is prime, repeating for each number entered by the user.",
    "code": "```javascript\nfunction isPrime(num) {\n    if (num <= 1) return false;\n    if (num <= 3) return true;\n    if (num % 2 === 0 || num % 3 === 0) return false;\n    let i = 5;\n    while (i * i <= num) {\n        if (num % i === 0 || num % (i + 2) === 0) return false;\n        i += 6;\n    }\n    return true;\n}\n\nwhile (true) {\n    const input = prompt(\"Enter a number (or type 'exit' to stop):\");\n    if (input.toLowerCase() === 'exit') break;\n    const number = parseInt(input, 10);\n    if (isNaN(number)) {\n        console.log(\"Please enter a valid number.\");\n    } else {\n        if (isPrime(number)) {\n            console.log(number + \" is a prime number.\");\n        } else {\n            console.log(number + \" is not a prime number.\");\n        }\n    }\n}\n```"
  },
  {
    "task": "Develop a countdown that prints numbers starting from 50 down to 1.",
    "code": "```javascript\nlet number = 50;\nwhile (number >= 1) {\n    console.log(number);\n    number--;\n}\n```"
  },
  {
    "task": "Write a program that keeps doubling the value of a variable until it exceeds 200.",
    "code": "```javascript\nlet value = 1;\nwhile (value <= 200) {\n    value *= 2;\n}\n```"
  },
  {
    "task": "Design a loop that keeps generating a random string of letters until a specific word is formed.",
    "code": "```javascript\nfunction generateRandomString() {\n    const characters = 'abcdefghijklmnopqrstuvwxyz';\n    let result = '';\n    for (let i = 0; i < 5; i++) {\n        result += characters.charAt(Math.floor(Math.random() * characters.length));\n    }\n    return result;\n}\n\nconst targetWord = 'hello';\nlet randomString = '';\n\nwhile (randomString !== targetWord) {\n    randomString = generateRandomString();\n    console.log(randomString);\n}\n\nconsole.log('Target word formed:', randomString);\n```"
  },
  {
    "task": "Implement a system that continuously fetches data from a sensor until a threshold is crossed.",
    "code": "```javascript\nlet threshold = 50; // Example threshold value\nlet sensorData = 0;\n\nfunction fetchDataFromSensor() {\n    // Simulate fetching data from a sensor\n    return Math.random() * 100; // Example random data from 0 to 100\n}\n\nwhile (sensorData <= threshold) {\n    sensorData = fetchDataFromSensor();\n    console.log(`Fetched data: ${sensorData}`);\n}\n\nconsole.log('Threshold crossed!');\n```"
  },
  {
    "task": "Create a game where a player guesses a number, and the game continues until the player guesses correctly.",
    "code": "```javascript\nconst targetNumber = Math.floor(Math.random() * 100) + 1;\nlet guessedCorrectly = false;\nwhile (!guessedCorrectly) {\n    const playerGuess = parseInt(prompt(\"Guess a number between 1 and 100:\"));\n    if (playerGuess === targetNumber) {\n        alert(\"Congratulations! You guessed the correct number.\");\n        guessedCorrectly = true;\n    } else {\n        alert(\"Try again!\");\n    }\n}\n```"
  },
  {
    "task": "Write a loop that continues to add random numbers to a list until the list has 10 even numbers.",
    "code": "```javascript\nlet list = [];\nwhile (list.length < 10) {\n    let num = Math.floor(Math.random() * 100);\n    if (num % 2 === 0) {\n        list.push(num);\n    }\n}\n```"
  },
  {
    "task": "Design a routine that keeps removing elements from a list until it is empty.",
    "code": "```javascript\nlet list = [1, 2, 3, 4, 5];\n\nwhile (list.length > 0) {\n    list.pop();\n}\n```"
  },
  {
    "task": "Implement a sequence that prints the alphabet repeatedly until interrupted by the user.",
    "code": "```javascript\nconst readline = require('readline');\n\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\n\nfunction printAlphabet() {\n  let charCode = 65; // ASCII code for 'A'\n  while (true) {\n    process.stdout.write(String.fromCharCode(charCode));\n    charCode++;\n    if (charCode > 90) { // ASCII code for 'Z'\n      charCode = 65;\n    }\n  }\n}\n\nrl.question('Press Enter to start printing the alphabet. Ctrl+C to stop.\\n', () => {\n  printAlphabet();\n});\n```"
  },
  {
    "task": "Create a program that continuously checks for updates and stops once an update is available.",
    "code": "```javascript\nlet updateAvailable = false;\n\nwhile (!updateAvailable) {\n    // Simulate checking for updates\n    updateAvailable = checkForUpdates();\n}\n\nfunction checkForUpdates() {\n    // Logic to determine if an update is available\n    // For simulation, let's randomly determine if an update is available\n    return Math.random() < 0.1; // 10% chance of update being available\n}\n```"
  },
  {
    "task": "Write a function that keeps dividing a number by two until it results in a fractional value.",
    "code": "```javascript\nfunction divideUntilFractional(number) {\n    while (number % 1 === 0) {\n        number /= 2;\n    }\n    return number;\n}\n```"
  },
  {
    "task": "Develop a loop that keeps asking for student's grades and calculates the average until a grade of -1 is entered.",
    "code": "```javascript\nlet sum = 0;\nlet count = 0;\nlet grade = 0;\n\nwhile (grade !== -1) {\n    grade = parseInt(prompt(\"Enter student's grade (-1 to end):\"));\n    if (grade !== -1) {\n        sum += grade;\n        count++;\n    }\n}\n\nlet average = count > 0 ? sum / count : 0;\nconsole.log(\"Average grade:\", average);\n```"
  },
  {
    "task": "Design a feature that continuously monitors a file for changes and stops when no changes are detected for a minute.",
    "code": "```javascript\nconst fs = require('fs');\n\nlet lastModifiedTime = null;\nlet noChangeDuration = 0;\nconst checkInterval = 1000; // Check every second\n\nfunction monitorFile(filePath) {\n  const intervalId = setInterval(() => {\n    fs.stat(filePath, (err, stats) => {\n      if (err) {\n        console.error('Error reading file stats:', err);\n        clearInterval(intervalId);\n        return;\n      }\n      \n      const currentModifiedTime = stats.mtimeMs;\n      if (lastModifiedTime === null || currentModifiedTime !== lastModifiedTime) {\n        lastModifiedTime = currentModifiedTime;\n        noChangeDuration = 0;\n      } else {\n        noChangeDuration += checkInterval;\n      }\n\n      if (noChangeDuration >= 60000) {\n        clearInterval(intervalId);\n        console.log('No changes detected for a minute. Stopping monitoring.');\n      }\n    });\n  }, checkInterval);\n}\n\nmonitorFile('path/to/your/file.txt');\n```"
  },
  {
    "task": "Implement a process where a motor runs until a certain distance is reached.",
    "code": "```javascript\nlet distanceCovered = 0;\nconst targetDistance = 100; // Example target distance\n\nwhile (distanceCovered < targetDistance) {\n    // Code to run the motor\n    distanceCovered += 5; // Example increment in distance\n}\n\nconsole.log(\"Target distance reached!\");\n```"
  },
  {
    "task": "Create a script that keeps generating random numbers and stops when it generates a prime number.",
    "code": "```javascript\nfunction isPrime(num) {\n  if (num <= 1) return false;\n  if (num <= 3) return true;\n  \n  if (num % 2 === 0 || num % 3 === 0) return false;\n  for (let i = 5; i * i <= num; i += 6) {\n    if (num % i === 0 || num % (i + 2) === 0) return false;\n  }\n  return true;\n}\n\nlet randomNum;\ndo {\n  randomNum = Math.floor(Math.random() * 100) + 1;\n} while (!isPrime(randomNum));\nconsole.log(\"Prime number generated:\", randomNum);\n```"
  },
  {
    "task": "Write a program that asks for the user's favorite color and keeps asking until they say 'blue'.",
    "code": "```javascript\nlet favoriteColor = prompt(\"What is your favorite color?\");\nwhile (favoriteColor.toLowerCase() !== 'blue') {\n    favoriteColor = prompt(\"What is your favorite color?\");\n}\n```"
  },
  {
    "task": "Develop a loop that continuously prints the time every second until a key is pressed.",
    "code": "```javascript\nconst readline = require('readline');\n\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\n\nlet stop = false;\n\nrl.on('line', () => {\n  stop = true;\n  rl.close();\n});\n\nfunction printTime() {\n  while (!stop) {\n    console.log(new Date().toLocaleTimeString());\n    const delay = new Date().getSeconds() === 59 ? 1000 : 1000;\n    Atomics.wait(new Int32Array(new SharedArrayBuffer(4)), 0, 0, delay);\n  }\n}\n\nprintTime();\n```"
  },
  {
    "task": "Create a system to keep downloading data from a server until the connection is lost.",
    "code": "```javascript\nlet connectionLost = false;\n\nwhile (!connectionLost) {\n    // Simulate a data download\n    console.log(\"Downloading data...\");\n\n    // Simulate checking if the connection is lost\n    connectionLost = Math.random() < 0.1; // 10% chance of losing connection\n}\n\nconsole.log(\"Connection lost. Stopping download.\");\n```"
  },
  {
    "task": "Write a process to keep a light on until the ambient light level is sufficient.",
    "code": "```javascript\nlet ambientLightLevel = 0;\nconst sufficientLightLevel = 100;\n\nwhile (ambientLightLevel < sufficientLightLevel) {\n  console.log(\"Light is on\");\n  // Simulate change in ambient light level\n  ambientLightLevel += 10;\n}\nconsole.log(\"Ambient light is sufficient, light is off.\");\n```"
  },
  {
    "task": "Implement a feature that continuously plays a sound until the user presses a button.",
    "code": "```javascript\nlet isPlaying = true;\n\nconst playSound = () => {\n  // Code to play sound\n  console.log(\"Playing sound...\");\n};\n\nconst stopSound = () => {\n  isPlaying = false;\n  console.log(\"Sound stopped.\");\n};\n\n// Simulating a button press event to stop the sound\ndocument.getElementById(\"stopButton\").addEventListener(\"click\", stopSound);\n\nwhile (isPlaying) {\n  playSound();\n}\n```"
  },
  {
    "task": "Design a program that keeps multiplying a matrix by itself until its determinant is greater than 1000.",
    "code": "```javascript\nfunction determinant(matrix) {\n    if (matrix.length !== matrix[0].length) {\n        throw new Error(\"Matrix must be square\");\n    }\n\n    const n = matrix.length;\n    \n    if (n === 1) {\n        return matrix[0][0];\n    }\n    \n    if (n === 2) {\n        return matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0];\n    }\n\n    let det = 0;\n    for (let i = 0; i < n; i++) {\n        const subMatrix = matrix.slice(1).map(row => row.filter((_, j) => j !== i));\n        det += matrix[0][i] * determinant(subMatrix) * (i % 2 === 0 ? 1 : -1);\n    }\n    \n    return det;\n}\n\nfunction matrixMultiply(A, B) {\n    const n = A.length;\n    const result = Array.from({ length: n }, () => Array(n).fill(0));\n    \n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < n; j++) {\n            for (let k = 0; k < n; k++) {\n                result[i][j] += A[i][k] * B[k][j];\n            }\n        }\n    }\n    \n    return result;\n}\n\nlet matrix = [\n    [2, 3],\n    [1, 4]\n];\n\nwhile (determinant(matrix) <= 1000) {\n    matrix = matrixMultiply(matrix, matrix);\n}\n```"
  },
  {
    "task": "Create a script that keeps prompting the user to guess a word until they get it right.",
    "code": "```javascript\nconst correctWord = \"secret\";\nlet guessedWord = \"\";\n\nwhile (guessedWord !== correctWord) {\n    guessedWord = prompt(\"Guess the word:\");\n}\n\nalert(\"Congratulations! You guessed the right word.\");\n```"
  },
  {
    "task": "Write a loop that simulates a car's fuel consumption and stops when the tank is empty.",
    "code": "```javascript\nlet fuel = 100; // initial fuel level\n\nwhile (fuel > 0) {\n    console.log(`Fuel level: ${fuel}`);\n    fuel -= 10; // simulate fuel consumption\n}\n\nconsole.log(\"The tank is empty.\");\n```"
  },
  {
    "task": "Develop a routine that keeps checking if a file exists and stops once it does.",
    "code": "```javascript\nconst fs = require('fs');\nconst filePath = 'path/to/your/file.txt';\n\nlet fileExists = false;\n\nwhile (!fileExists) {\n  fileExists = fs.existsSync(filePath);\n}\n```"
  },
  {
    "task": "Implement a feature that continuously calculates the square root of a number until it's less than 0.1.",
    "code": "```javascript\nlet number = 100; // Example starting number\nwhile (number >= 0.1) {\n    number = Math.sqrt(number);\n}\n```"
  },
  {
    "task": "Create a system that prints 'Processing...' every second until a task is complete.",
    "code": "```javascript\nlet taskComplete = false;\n\nfunction checkTaskCompletion() {\n    // Simulate task completion for demonstration purposes\n    setTimeout(() => {\n        taskComplete = true;\n    }, 5000); // Task completes after 5 seconds\n}\n\nfunction processTask() {\n    checkTaskCompletion();\n\n    const interval = setInterval(() => {\n        if (!taskComplete) {\n            console.log('Processing...');\n        } else {\n            clearInterval(interval);\n        }\n    }, 1000);\n}\n\nprocessTask();\n```"
  },
  {
    "task": "Write a loop that repeatedly checks the status of a process until it reports 'complete'.",
    "code": "```javascript\nlet status = checkProcessStatus();\n\nwhile (status !== 'complete') {\n    status = checkProcessStatus();\n}\n```"
  },
  {
    "task": "Design a routine to keep pinging a server and alert when the connection is lost.",
    "code": "```javascript\nfunction pingServer() {\n    let serverConnected = true;\n\n    while (serverConnected) {\n        // Simulate a server ping\n        serverConnected = Math.random() > 0.1; // 10% chance of disconnection\n\n        if (!serverConnected) {\n            alert(\"Connection lost!\");\n        }\n    }\n}\n\npingServer();\n```"
  },
  {
    "task": "Implement a loop that counts down from 100 by fives until it reaches zero.",
    "code": "```javascript\nlet count = 100;\nwhile (count >= 0) {\n    console.log(count);\n    count -= 5;\n}\n```"
  },
  {
    "task": "Create a script that keeps track of inventory items being added or removed until an end signal is given.",
    "code": "```javascript\nlet inventory = {};\nlet endSignal = false;\n\nfunction updateInventory(action, item, quantity) {\n  if (action === 'add') {\n    inventory[item] = (inventory[item] || 0) + quantity;\n  } else if (action === 'remove') {\n    if (inventory[item] && inventory[item] >= quantity) {\n      inventory[item] -= quantity;\n    }\n  }\n}\n\nwhile (!endSignal) {\n  // Simulate receiving input; replace with actual input mechanism\n  let input = getInput(); // e.g., { action: 'add', item: 'apple', quantity: 10 }\n  \n  if (input.action === 'end') {\n    endSignal = true;\n  } else {\n    updateInventory(input.action, input.item, input.quantity);\n  }\n}\n\nfunction getInput() {\n  // Placeholder function to simulate input\n  return { action: 'add', item: 'apple', quantity: 10 }; // Example input\n}\n```"
  },
  {
    "task": "Write a program that keeps calculating the power of two for numbers until a result is greater than 1000.",
    "code": "```javascript\nlet number = 1;\nlet result = 1;\n\nwhile (result <= 1000) {\n    result = Math.pow(2, number);\n    number++;\n}\n```"
  },
  {
    "task": "Develop a sequence that keeps appending random numbers to an array until its length is 20.",
    "code": "```javascript\nlet numbers = [];\nwhile (numbers.length < 20) {\n    numbers.push(Math.random());\n}\n```"
  },
  {
    "task": "Implement a routine that continuously rotates an image until it matches a reference orientation.",
    "code": "```javascript\nfunction rotateImageUntilMatch(image, reference) {\n    while (!imageMatchesReference(image, reference)) {\n        image = rotateImage(image);\n    }\n}\n\nfunction imageMatchesReference(image, reference) {\n    // Placeholder for comparison logic\n    return JSON.stringify(image) === JSON.stringify(reference);\n}\n\nfunction rotateImage(image) {\n    // Placeholder for rotation logic\n    // This function should rotate the image by 90 degrees clockwise\n    return image;\n}\n\n// Example usage\nlet image = [[1, 2], [3, 4]];\nlet reference = [[3, 1], [4, 2]];\nrotateImageUntilMatch(image, reference);\n```"
  },
  {
    "task": "Design a loop that keeps printing random jokes until the user stops it.",
    "code": "```javascript\nconst jokes = [\n    \"Why don't scientists trust atoms? Because they make up everything.\",\n    \"What do you get if you cross a cat with a dark horse? Kitty Perry.\",\n    \"Why did the scarecrow win an award? Because he was outstanding in his field.\",\n    \"I told my wife she was drawing her eyebrows too high. She looked surprised.\",\n    \"I'm reading a book on anti-gravity. It's impossible to put down!\"\n];\n\nfunction getRandomJoke() {\n    const index = Math.floor(Math.random() * jokes.length);\n    return jokes[index];\n}\n\nlet continueLoop = true;\n\nwhile (continueLoop) {\n    console.log(getRandomJoke());\n    continueLoop = confirm(\"Do you want to hear another joke?\");\n}\n```"
  },
  {
    "task": "Create a program that accepts user feedback and continues until a positive feedback is received.",
    "code": "```javascript\nconst readline = require('readline');\n\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\n\nfunction askFeedback() {\n  rl.question('Please provide your feedback: ', (feedback) => {\n    if (feedback.toLowerCase() === 'positive') {\n      console.log('Thank you for your positive feedback!');\n      rl.close();\n    } else {\n      console.log('We appreciate your feedback. Please provide positive feedback to exit.');\n      askFeedback();\n    }\n  });\n}\n\naskFeedback();\n```"
  },
  {
    "task": "Write a loop that repeatedly reads sensor data and stops when a stable reading is observed.",
    "code": "```javascript\nfunction readSensor() {\n    // Simulate reading sensor data\n    return Math.random() * 100;\n}\n\nfunction isStable(reading) {\n    // Define stability condition\n    return reading > 50 && reading < 55;\n}\n\nlet sensorReading;\ndo {\n    sensorReading = readSensor();\n    console.log('Sensor reading:', sensorReading);\n} while (!isStable(sensorReading));\n\nconsole.log('Stable reading observed:', sensorReading);\n```"
  },
  {
    "task": "Develop a system that simulates a stopwatch, counting seconds until stopped manually.",
    "code": "```javascript\nlet seconds = 0;\nlet isRunning = true;\n\nfunction startStopwatch() {\n    while (isRunning) {\n        console.log(`Elapsed time: ${seconds} seconds`);\n        seconds++;\n        sleep(1000);\n    }\n}\n\nfunction stopStopwatch() {\n    isRunning = false;\n}\n\nfunction sleep(milliseconds) {\n    const start = new Date().getTime();\n    while (new Date().getTime() - start < milliseconds) {}\n}\n\n// Example usage\nsetTimeout(stopStopwatch, 10000); // Stops the stopwatch after 10 seconds\nstartStopwatch();\n```"
  },
  {
    "task": "Create a script that continues adding random integers to a sum until the sum exceeds 100.",
    "code": "```javascript\nlet sum = 0;\n\nwhile (sum <= 100) {\n    const randomInt = Math.floor(Math.random() * 100) + 1;\n    sum += randomInt;\n}\n```"
  },
  {
    "task": "Implement a process to track a moving object until it stops.",
    "code": "```javascript\nlet moving = true;\nlet position = 0;\n\nwhile (moving) {\n    // Simulate moving object\n    position += Math.random() * 10;\n\n    // Check if the object should stop\n    if (position >= 100) {\n        moving = false;\n    }\n}\n\nconsole.log(\"Object stopped at position:\", position);\n```"
  },
  {
    "task": "Design a routine to keep checking user login attempts until a successful login occurs.",
    "code": "```javascript\nlet successfulLogin = false;\n\nwhile (!successfulLogin) {\n    let username = prompt(\"Enter your username:\");\n    let password = prompt(\"Enter your password:\");\n\n    if (username === \"correctUsername\" && password === \"correctPassword\") {\n        successfulLogin = true;\n        console.log(\"Login successful!\");\n    } else {\n        console.log(\"Login failed. Please try again.\");\n    }\n}\n```"
  },
  {
    "task": "Write a loop that repeatedly calculates the area of a circle for radii from 1 to 10.",
    "code": "```javascript\nlet radius = 1;\nwhile (radius <= 10) {\n    let area = Math.PI * radius * radius;\n    console.log(`Radius: ${radius}, Area: ${area}`);\n    radius++;\n}\n```"
  },
  {
    "task": "Create a program that continues flipping a card from a deck until an ace is drawn.",
    "code": "```javascript\nfunction drawCard() {\n    const cards = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A'];\n    const randomIndex = Math.floor(Math.random() * cards.length);\n    return cards[randomIndex];\n}\n\nlet card;\nwhile (card !== 'A') {\n    card = drawCard();\n    console.log(`Drew a ${card}`);\n}\n```"
  },
  {
    "task": "Develop a loop that keeps asking for a word and stores it until a word with more than five letters is entered.",
    "code": "```javascript\nlet words = [];\nlet input = '';\n\nwhile (input.length <= 5) {\n  input = prompt(\"Enter a word:\");\n  words.push(input);\n}\n```"
  },
  {
    "task": "Implement a feature that continuously calculates the exponential growth of a population until it doubles.",
    "code": "```javascript\nlet initialPopulation = 100; // Example initial population\nlet growthRate = 0.05; // Example growth rate (5%)\nlet targetPopulation = initialPopulation * 2;\nlet currentPopulation = initialPopulation;\n\nwhile (currentPopulation < targetPopulation) {\n    currentPopulation += currentPopulation * growthRate;\n}\n\nconsole.log(`Population has doubled to: ${currentPopulation}`);\n```"
  },
  {
    "task": "Write a script that repeats a string a certain number of times until a limit is reached.",
    "code": "```javascript\nfunction repeatStringUntilLimit(str, times, limit) {\n    let result = '';\n    let count = 0;\n    while (count < times && result.length + str.length <= limit) {\n        result += str;\n        count++;\n    }\n    return result;\n}\n\nconsole.log(repeatStringUntilLimit('abc', 5, 10));\n```"
  },
  {
    "task": "Create a routine that keeps accessing an API endpoint until it returns a specific result.",
    "code": "```javascript\nasync function fetchDataUntilSpecificResult(url, specificResult) {\n    let result;\n    const fetchData = async () => {\n        const response = await fetch(url);\n        return response.json();\n    };\n\n    while (result !== specificResult) {\n        result = await fetchData();\n    }\n}\n\nfetchDataUntilSpecificResult('https://api.example.com/data', 'desiredResult');\n```"
  },
  {
    "task": "Design a loop that continues to fetch stock prices until a certain price threshold is crossed.",
    "code": "```javascript\nlet stockPrice = 0;\nconst priceThreshold = 100;\n\nwhile (stockPrice <= priceThreshold) {\n    stockPrice = fetchStockPrice(); // Assume fetchStockPrice() is a function that retrieves the current stock price\n}\n```"
  },
  {
    "task": "Implement a process that keeps monitoring CPU usage until it drops below 10%.",
    "code": "```javascript\nfunction getCPUUsage() {\n    // This is a placeholder for an actual CPU usage retrieval function\n    return Math.random() * 100; // returns a random CPU usage percentage\n}\n\nfunction monitorCPU() {\n    let cpuUsage = getCPUUsage();\n    while (cpuUsage >= 10) {\n        console.log(`Current CPU usage: ${cpuUsage.toFixed(2)}%`);\n        cpuUsage = getCPUUsage();\n    }\n    console.log(`CPU usage dropped below 10%: ${cpuUsage.toFixed(2)}%`);\n}\n\nmonitorCPU();\n```"
  },
  {
    "task": "Write a program that asks for a series of numbers and prints the largest once a negative number is entered.",
    "code": "```javascript\nconst readline = require('readline');\n\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\n\nlet largest = null;\n\nfunction askForNumber() {\n  rl.question('Enter a number: ', (input) => {\n    const number = parseFloat(input);\n    if (number < 0) {\n      console.log(`The largest number entered was: ${largest}`);\n      rl.close();\n    } else {\n      if (largest === null || number > largest) {\n        largest = number;\n      }\n      askForNumber();\n    }\n  });\n}\n\naskForNumber();\n```"
  },
  {
    "task": "Develop a system that keeps a heater on until the room reaches a desired temperature.",
    "code": "```javascript\nlet currentTemperature = 18; // Example starting temperature\nconst desiredTemperature = 22; // Desired temperature\n\nwhile (currentTemperature < desiredTemperature) {\n    console.log(\"Heater is ON. Current temperature:\", currentTemperature);\n    currentTemperature += 1; // Simulating the increase in temperature\n}\n\nconsole.log(\"Desired temperature reached. Heater is OFF.\");\n```"
  },
  {
    "task": "Create a loop that repeatedly checks if a door is open and alerts if it remains open for too long.",
    "code": "```javascript\nlet doorIsOpen = true; // This is a placeholder for the actual door status check\nlet timeOpen = 0;\nconst maxOpenTime = 5; // Maximum time in seconds before alerting\n\nwhile (doorIsOpen) {\n    if (timeOpen >= maxOpenTime) {\n        alert(\"The door has been open for too long!\");\n        break;\n    }\n    // Simulate time passing\n    timeOpen++;\n    // Simulate checking the door status\n    // doorIsOpen = checkDoorStatus(); // Uncomment and implement this in a real scenario\n}\n```"
  },
  {
    "task": "Implement a feature that keeps adding random characters to a string until its length is 8.",
    "code": "```javascript\nlet str = '';\nconst characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\nwhile (str.length < 8) {\n  const randomIndex = Math.floor(Math.random() * characters.length);\n  str += characters[randomIndex];\n}\n\nconsole.log(str);\n```"
  },
  {
    "task": "Design a routine that simulates a race and continues until a participant crosses the finish line.",
    "code": "```javascript\nlet finishLine = 100;\nlet participants = [\n    { name: 'Runner1', position: 0 },\n    { name: 'Runner2', position: 0 },\n    { name: 'Runner3', position: 0 }\n];\n\nfunction moveParticipant(participant) {\n    participant.position += Math.floor(Math.random() * 10) + 1;\n}\n\nwhile (true) {\n    for (let participant of participants) {\n        moveParticipant(participant);\n        if (participant.position >= finishLine) {\n            console.log(`${participant.name} has crossed the finish line!`);\n            break;\n        }\n    }\n    if (participants.some(participant => participant.position >= finishLine)) {\n        break;\n    }\n}\n```"
  },
  {
    "task": "Write a script that keeps checking an email inbox until a specific email is received.",
    "code": "```javascript\nfunction checkInboxForEmail(targetEmail) {\n    let emailReceived = false;\n\n    while (!emailReceived) {\n        // Simulate checking the inbox\n        let inbox = getInbox(); // Assume this function fetches the latest emails\n        for (let email of inbox) {\n            if (email === targetEmail) {\n                emailReceived = true;\n                console.log('Target email received:', email);\n                break;\n            }\n        }\n\n        // Sleep or wait for a short period before checking again\n        sleep(1000); // Assume this function pauses execution for 1 second\n    }\n}\n\nfunction getInbox() {\n    // This would normally interact with an email server\n    // Here we simulate with a random condition\n    let emails = ['email1@example.com', 'email2@example.com'];\n    if (Math.random() > 0.8) {\n        emails.push('target@example.com');\n    }\n    return emails;\n}\n\nfunction sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n(async function() {\n    await checkInboxForEmail('target@example.com');\n})();\n```"
  },
  {
    "task": "Create a loop that continues to play a video on repeat until the user interrupts.",
    "code": "```javascript\nlet userInterrupted = false;\n\nfunction playVideo() {\n    console.log(\"Playing video...\");\n    // Simulate video playing\n    setTimeout(() => {\n        if (!userInterrupted) {\n            playVideo();\n        }\n    }, 2000); // Assume each video is 2 seconds long\n}\n\n// Simulate user interruption\nsetTimeout(() => {\n    userInterrupted = true;\n    console.log(\"User interrupted. Stopping video...\");\n}, 10000); // User interrupts after 10 seconds\n\nplayVideo();\n```"
  },
  {
    "task": "Develop a process that keeps scanning for Bluetooth devices until a specific device is found.",
    "code": "```javascript\nfunction scanForBluetoothDevice(targetDeviceName) {\n    let found = false;\n\n    while (!found) {\n        let devices = getAvailableBluetoothDevices(); // Hypothetical function to get devices\n        for (let device of devices) {\n            if (device.name === targetDeviceName) {\n                found = true;\n                break;\n            }\n        }\n    }\n}\n\n// Hypothetical usage\nscanForBluetoothDevice(\"Target Device\");\n```"
  },
  {
    "task": "Implement a script that continuously captures images from a webcam until a motion is detected.",
    "code": "```javascript\nasync function startCapture() {\n    const videoElement = document.createElement('video');\n    const canvasElement = document.createElement('canvas');\n    const canvasContext = canvasElement.getContext('2d');\n    const mediaStream = await navigator.mediaDevices.getUserMedia({ video: true });\n    videoElement.srcObject = mediaStream;\n    await videoElement.play();\n    \n    function detectMotion() {\n        canvasContext.drawImage(videoElement, 0, 0, canvasElement.width, canvasElement.height);\n        const frame = canvasContext.getImageData(0, 0, canvasElement.width, canvasElement.height);\n        const pixels = frame.data;\n        \n        let motionDetected = false;\n        for (let i = 0; i < pixels.length; i += 4) {\n            const r = pixels[i];\n            const g = pixels[i + 1];\n            const b = pixels[i + 2];\n            const grayscale = r * 0.3 + g * 0.59 + b * 0.11;\n            if (grayscale > 200) {\n                motionDetected = true;\n                break;\n            }\n        }\n        return motionDetected;\n    }\n\n    while (true) {\n        if (detectMotion()) {\n            console.log('Motion Detected');\n            break;\n        }\n        await new Promise(requestAnimationFrame);\n    }\n\n    mediaStream.getTracks().forEach(track => track.stop());\n}\n\nstartCapture();\n```"
  },
  {
    "task": "Design a program that keeps playing a sound file until the user presses a mute button.",
    "code": "```javascript\nlet isMuted = false;\n\nfunction playSound() {\n  const audio = new Audio('soundfile.mp3');\n  audio.loop = true;\n  audio.play();\n\n  const muteButton = document.getElementById('muteButton');\n  muteButton.addEventListener('click', function() {\n    isMuted = true;\n    audio.pause();\n  });\n\n  while (!isMuted) {\n    // Continuously check the muted status\n  }\n}\n\nplaySound();\n```"
  },
  {
    "task": "Create a loop that repeatedly generates a random password until it meets certain security criteria.",
    "code": "```javascript\nfunction generateRandomPassword() {\n    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+[]{}|;:,.<>?';\n    let password = '';\n    for (let i = 0; i < 12; i++) {\n        password += characters.charAt(Math.floor(Math.random() * characters.length));\n    }\n    return password;\n}\n\nfunction meetsSecurityCriteria(password) {\n    const hasUpperCase = /[A-Z]/.test(password);\n    const hasLowerCase = /[a-z]/.test(password);\n    const hasDigit = /[0-9]/.test(password);\n    const hasSpecialChar = /[!@#$%^&*()_+[\\]{}|;:,.<>?]/.test(password);\n    return hasUpperCase && hasLowerCase && hasDigit && hasSpecialChar;\n}\n\nlet securePassword = '';\nwhile (!meetsSecurityCriteria(securePassword)) {\n    securePassword = generateRandomPassword();\n}\n\nconsole.log(securePassword);\n```"
  },
  {
    "task": "Write a process that keeps checking for file changes in a directory and logs them until stopped.",
    "code": "```javascript\nconst fs = require('fs');\n\nconst directoryPath = './your-directory';\nlet isRunning = true;\n\nfunction checkForChanges() {\n  let previousFiles = fs.readdirSync(directoryPath);\n\n  while (isRunning) {\n    const currentFiles = fs.readdirSync(directoryPath);\n    const addedFiles = currentFiles.filter(file => !previousFiles.includes(file));\n    const removedFiles = previousFiles.filter(file => !currentFiles.includes(file));\n\n    if (addedFiles.length > 0) {\n      console.log('Added files:', addedFiles);\n    }\n    if (removedFiles.length > 0) {\n      console.log('Removed files:', removedFiles);\n    }\n\n    previousFiles = currentFiles;\n  }\n}\n\ncheckForChanges();\n```"
  }
]