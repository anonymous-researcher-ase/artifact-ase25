[
  {
    "task": "Filter out all even numbers from a list of integers.",
    "code": "```javascript\nconst filterOddNumbers = (numbers) => numbers.filter(number => number % 2 !== 0);\n\n// Example usage:\nconst numbers = [1, 2, 3, 4, 5, 6];\nconst oddNumbers = filterOddNumbers(numbers);\nconsole.log(oddNumbers); // Output: [1, 3, 5]\n```"
  },
  {
    "task": "Select all words from a list that start with the letter 'a'.",
    "code": "```javascript\nconst words = ['apple', 'banana', 'avocado', 'grape', 'apricot'];\nconst filteredWords = words.filter(word => word.startsWith('a'));\nconsole.log(filteredWords);\n```"
  },
  {
    "task": "Find all positive numbers in a collection of integers.",
    "code": "```javascript\nfunction filterPositiveNumbers(numbers) {\n    return numbers.filter(number => number > 0);\n}\n```"
  },
  {
    "task": "Extract all employees who are older than 30 from an employee directory.",
    "code": "```javascript\nconst employees = [\n  { name: 'Alice', age: 28 },\n  { name: 'Bob', age: 34 },\n  { name: 'Charlie', age: 29 },\n  { name: 'David', age: 41 }\n];\n\nconst olderThan30 = employees.filter(employee => employee.age > 30);\n\nconsole.log(olderThan30);\n```"
  },
  {
    "task": "List all cities with a population greater than one million from a dataset.",
    "code": "```javascript\nconst cities = [\n  { name: 'New York', population: 8419000 },\n  { name: 'Los Angeles', population: 3980000 },\n  { name: 'San Francisco', population: 883305 },\n  { name: 'Chicago', population: 2716000 },\n  { name: 'Houston', population: 2328000 }\n];\n\nconst largeCities = cities.filter(city => city.population > 1000000);\nconsole.log(largeCities);\n```"
  },
  {
    "task": "Filter out products that are out of stock from a product list.",
    "code": "```javascript\nconst products = [\n  { name: 'Laptop', inStock: true },\n  { name: 'Phone', inStock: false },\n  { name: 'Tablet', inStock: true }\n];\n\nconst availableProducts = products.filter(product => product.inStock);\n\nconsole.log(availableProducts);\n```"
  },
  {
    "task": "Select all students who have passed with a grade above 70 from a list of student scores.",
    "code": "```javascript\nconst students = [\n    { name: 'Alice', grade: 85 },\n    { name: 'Bob', grade: 68 },\n    { name: 'Charlie', grade: 72 },\n    { name: 'David', grade: 60 },\n    { name: 'Eva', grade: 90 }\n];\n\nconst passedStudents = students.filter(student => student.grade > 70);\n\nconsole.log(passedStudents);\n```"
  },
  {
    "task": "Identify all strings in an array that contain the substring 'cat'.",
    "code": "```javascript\nconst strings = ['dog', 'catalog', 'scatter', 'cat', 'concatenate'];\nconst result = strings.filter(str => str.includes('cat'));\nconsole.log(result);\n```"
  },
  {
    "task": "Extract all transactions above $1000 from a financial record.",
    "code": "```javascript\nconst transactions = [\n  { id: 1, amount: 500 },\n  { id: 2, amount: 1500 },\n  { id: 3, amount: 10000 },\n  { id: 4, amount: 750 },\n  { id: 5, amount: 2000 }\n];\n\nconst highValueTransactions = transactions.filter(transaction => transaction.amount > 1000);\n\nconsole.log(highValueTransactions);\n```"
  },
  {
    "task": "Filter out all non-prime numbers from a list of numbers.",
    "code": "```javascript\nfunction isPrime(num) {\n  if (num <= 1) return false;\n  if (num <= 3) return true;\n  if (num % 2 === 0 || num % 3 === 0) return false;\n  for (let i = 5; i * i <= num; i += 6) {\n    if (num % i === 0 || num % (i + 2) === 0) return false;\n  }\n  return true;\n}\n\nfunction filterPrimes(numbers) {\n  return numbers.filter(isPrime);\n}\n\nconst numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconst primes = filterPrimes(numbers);\nconsole.log(primes);\n```"
  },
  {
    "task": "Select all books with more than 300 pages from a library catalog.",
    "code": "```javascript\nconst libraryCatalog = [\n  { title: 'Book 1', pages: 250 },\n  { title: 'Book 2', pages: 320 },\n  { title: 'Book 3', pages: 400 },\n  { title: 'Book 4', pages: 150 }\n];\n\nconst booksWithMoreThan300Pages = libraryCatalog.filter(book => book.pages > 300);\n\nconsole.log(booksWithMoreThan300Pages);\n```"
  },
  {
    "task": "Identify all users who have logged in within the past week from a user database.",
    "code": "```javascript\nconst users = [\n  { id: 1, name: 'Alice', lastLogin: '2023-10-01T10:00:00Z' },\n  { id: 2, name: 'Bob', lastLogin: '2023-10-05T12:30:00Z' },\n  { id: 3, name: 'Charlie', lastLogin: '2023-09-25T09:00:00Z' }\n];\n\nconst oneWeekAgo = new Date();\noneWeekAgo.setDate(oneWeekAgo.getDate() - 7);\n\nconst recentlyLoggedInUsers = users.filter(user => new Date(user.lastLogin) > oneWeekAgo);\n\nconsole.log(recentlyLoggedInUsers);\n```"
  },
  {
    "task": "Extract all URLs that contain 'https' from a list of web addresses.",
    "code": "```javascript\nconst webAddresses = [\n  'http://example.com',\n  'https://secure.com',\n  'ftp://fileserver.com',\n  'https://anothersecure.com',\n  'http://unsecure.com'\n];\n\nconst httpsUrls = webAddresses.filter(url => url.startsWith('https://'));\nconsole.log(httpsUrls);\n```"
  },
  {
    "task": "Find all movies released after the year 2000 from a movie database.",
    "code": "```javascript\nconst movies = [\n  { title: \"Movie 1\", year: 1999 },\n  { title: \"Movie 2\", year: 2001 },\n  { title: \"Movie 3\", year: 2005 },\n  { title: \"Movie 4\", year: 1995 }\n];\n\nconst moviesAfter2000 = movies.filter(movie => movie.year > 2000);\n\nconsole.log(moviesAfter2000);\n```"
  },
  {
    "task": "Select all tasks with a priority level of 'high' from a task management system.",
    "code": "```javascript\nconst tasks = [\n  { id: 1, name: 'Task 1', priority: 'high' },\n  { id: 2, name: 'Task 2', priority: 'medium' },\n  { id: 3, name: 'Task 3', priority: 'high' },\n  { id: 4, name: 'Task 4', priority: 'low' }\n];\n\nconst highPriorityTasks = tasks.filter(task => task.priority === 'high');\n```"
  },
  {
    "task": "Filter out all words longer than five characters from a text document.",
    "code": "```javascript\nfunction filterWords(text) {\n    return text.split(/\\s+/).filter(word => word.length <= 5).join(' ');\n}\n\n// Example usage:\nconst document = \"This is an example text document with various length words.\";\nconst filteredText = filterWords(document);\nconsole.log(filteredText);\n```"
  },
  {
    "task": "Extract all odd numbers from a sequence of integers.",
    "code": "```javascript\nfunction extractOddNumbers(sequence) {\n    return sequence.filter(num => num % 2 !== 0);\n}\n```"
  },
  {
    "task": "Select all files larger than 10MB from a list of files.",
    "code": "```javascript\nconst files = [\n  { name: 'file1.txt', sizeMB: 5 },\n  { name: 'file2.txt', sizeMB: 15 },\n  { name: 'file3.txt', sizeMB: 10 },\n  { name: 'file4.txt', sizeMB: 25 }\n];\n\nconst largeFiles = files.filter(file => file.sizeMB > 10);\n\nconsole.log(largeFiles);\n```"
  },
  {
    "task": "Identify all events occurring on weekends from an event schedule.",
    "code": "```javascript\nconst schedule = [\n  { name: \"Meeting\", date: \"2023-11-04\" },\n  { name: \"Conference\", date: \"2023-11-06\" },\n  { name: \"Workshop\", date: \"2023-11-05\" },\n  { name: \"Webinar\", date: \"2023-11-10\" }\n];\n\nconst isWeekend = date => {\n  const day = new Date(date).getDay();\n  return day === 0 || day === 6;\n};\n\nconst weekendEvents = schedule.filter(event => isWeekend(event.date));\n\nconsole.log(weekendEvents);\n```"
  },
  {
    "task": "Find all emails from a specific domain in an email list.",
    "code": "```javascript\nfunction filterEmailsByDomain(emailList, domain) {\n    return emailList.filter(email => email.endsWith(`@${domain}`));\n}\n\n// Example usage:\n// const emails = ['user1@example.com', 'user2@test.com', 'user3@example.com'];\n// const domain = 'example.com';\n// console.log(filterEmailsByDomain(emails, domain));\n// Output: ['user1@example.com', 'user3@example.com']\n```"
  },
  {
    "task": "Filter out all people not living in a specific city from a contact list.",
    "code": "```javascript\nconst filterByCity = (contacts, city) => contacts.filter(contact => contact.city === city);\n\n// Example usage\nconst contacts = [\n  { name: 'Alice', city: 'New York' },\n  { name: 'Bob', city: 'San Francisco' },\n  { name: 'Charlie', city: 'New York' }\n];\n\nconst filteredContacts = filterByCity(contacts, 'New York');\nconsole.log(filteredContacts);\n```"
  },
  {
    "task": "Select all rectangles with an area greater than 50 from a list of rectangles.",
    "code": "```javascript\nconst rectangles = [\n    { width: 5, height: 10 },\n    { width: 7, height: 8 },\n    { width: 10, height: 6 },\n    { width: 4, height: 12 }\n];\n\nconst filteredRectangles = rectangles.filter(rectangle => rectangle.width * rectangle.height > 50);\n\nconsole.log(filteredRectangles);\n```"
  },
  {
    "task": "Extract all elements that are not null from a collection.",
    "code": "```javascript\nconst collection = [1, null, 2, null, 3, 4, null];\nconst filteredCollection = collection.filter(element => element !== null);\n```"
  },
  {
    "task": "Identify all registered voters over the age of 18 from a voter registration list.",
    "code": "```javascript\nconst voters = [\n  { name: \"Alice\", age: 19, registered: true },\n  { name: \"Bob\", age: 17, registered: true },\n  { name: \"Charlie\", age: 22, registered: false },\n  { name: \"David\", age: 21, registered: true },\n  { name: \"Eve\", age: 18, registered: true }\n];\n\nconst registeredVotersOver18 = voters.filter(voter => voter.registered && voter.age > 18);\n\nconsole.log(registeredVotersOver18);\n```"
  },
  {
    "task": "Select all cars manufactured after 2015 from a vehicle registry.",
    "code": "```javascript\nconst vehicleRegistry = [\n    { make: 'Toyota', model: 'Camry', year: 2014 },\n    { make: 'Honda', model: 'Accord', year: 2016 },\n    { make: 'Ford', model: 'Mustang', year: 2018 },\n    { make: 'Chevrolet', model: 'Malibu', year: 2015 },\n    { make: 'Tesla', model: 'Model S', year: 2020 }\n];\n\nconst carsAfter2015 = vehicleRegistry.filter(car => car.year > 2015);\n\nconsole.log(carsAfter2015);\n```"
  },
  {
    "task": "Filter out all negative numbers from a dataset of integers.",
    "code": "```javascript\nconst filterNegativeNumbers = (dataset) => dataset.filter(number => number >= 0);\n\n// Example usage:\nconst dataset = [1, -2, 3, -4, 5];\nconst filteredDataset = filterNegativeNumbers(dataset);\nconsole.log(filteredDataset); // Output: [1, 3, 5]\n```"
  },
  {
    "task": "Extract all characters from a string that are uppercase.",
    "code": "```javascript\nfunction extractUppercaseCharacters(str) {\n  return Array.from(str).filter(char => char === char.toUpperCase() && char !== char.toLowerCase()).join('');\n}\n\n// Example usage:\nconst result = extractUppercaseCharacters(\"HelloWorld!\");\nconsole.log(result); // Outputs: HW\n```"
  },
  {
    "task": "Identify all projects with a deadline within the next month from a project database.",
    "code": "```javascript\nconst projects = [\n    { name: 'Project A', deadline: '2023-11-15' },\n    { name: 'Project B', deadline: '2023-12-20' },\n    { name: 'Project C', deadline: '2023-11-05' },\n    { name: 'Project D', deadline: '2024-01-10' }\n];\n\nconst today = new Date();\nconst nextMonth = new Date(today);\nnextMonth.setMonth(today.getMonth() + 1);\n\nconst projectsDueNextMonth = projects.filter(project => {\n    const deadlineDate = new Date(project.deadline);\n    return deadlineDate > today && deadlineDate <= nextMonth;\n});\n\nconsole.log(projectsDueNextMonth);\n```"
  },
  {
    "task": "Select all athletes with a score higher than 90 from a competition result list.",
    "code": "```javascript\nconst competitionResults = [\n  { name: 'Athlete 1', score: 85 },\n  { name: 'Athlete 2', score: 92 },\n  { name: 'Athlete 3', score: 88 },\n  { name: 'Athlete 4', score: 95 }\n];\n\nconst topAthletes = competitionResults.filter(athlete => athlete.score > 90);\n\nconsole.log(topAthletes);\n```"
  },
  {
    "task": "Filter out all strings that do not contain vowels from a list of words.",
    "code": "```javascript\nconst words = ['sky', 'apple', 'fly', 'banana', 'try'];\nconst containsVowel = word => /[aeiou]/i.test(word);\nconst filteredWords = words.filter(containsVowel);\nconsole.log(filteredWords);\n```"
  },
  {
    "task": "Extract all dates that fall on a weekday from a calendar.",
    "code": "```javascript\nfunction isWeekday(date) {\n    const day = date.getDay();\n    return day !== 0 && day !== 6;\n}\n\nfunction filterWeekdays(dates) {\n    return dates.filter(isWeekday);\n}\n\n// Example usage:\n// const calendarDates = [new Date('2023-10-01'), new Date('2023-10-02'), new Date('2023-10-07')];\n// const weekdays = filterWeekdays(calendarDates);\n// console.log(weekdays);\n```"
  },
  {
    "task": "Find all software versions that are stable releases from a list of software versions.",
    "code": "```javascript\nconst softwareVersions = [\n  \"1.0.0-alpha\",\n  \"1.0.0\",\n  \"1.1.0-beta\",\n  \"1.2.0\",\n  \"2.0.0-rc\",\n  \"2.0.0\"\n];\n\nconst stableReleases = softwareVersions.filter(version => !version.includes('-'));\nconsole.log(stableReleases);\n```"
  },
  {
    "task": "Select all temperatures above freezing from a weather report.",
    "code": "```javascript\nconst temperatures = [32, 28, 45, 50, 31, 60, 20];\nconst aboveFreezing = temperatures.filter(temp => temp > 32);\nconsole.log(aboveFreezing);\n```"
  },
  {
    "task": "Identify all countries with a GDP per capita above $40,000 from a country dataset.",
    "code": "```javascript\nconst countries = [\n  { name: 'Country A', gdpPerCapita: 45000 },\n  { name: 'Country B', gdpPerCapita: 30000 },\n  { name: 'Country C', gdpPerCapita: 50000 },\n  { name: 'Country D', gdpPerCapita: 38000 }\n];\n\nconst highGdpCountries = countries.filter(country => country.gdpPerCapita > 40000);\n\nconsole.log(highGdpCountries);\n```"
  },
  {
    "task": "Filter out all names shorter than four letters from a roster.",
    "code": "```javascript\nconst roster = [\"Anna\", \"Bob\", \"Charlie\", \"Dan\", \"Eve\", \"Frank\"];\nconst filteredRoster = roster.filter(name => name.length >= 4);\n```"
  },
  {
    "task": "Extract all numbers divisible by five from a sequence.",
    "code": "```javascript\nfunction extractDivisibleByFive(numbers) {\n    return numbers.filter(number => number % 5 === 0);\n}\n```"
  },
  {
    "task": "Select all movies with a rating above 4 stars from a film review site.",
    "code": "```javascript\nconst movies = [\n  { title: \"Movie A\", rating: 4.5 },\n  { title: \"Movie B\", rating: 3.9 },\n  { title: \"Movie C\", rating: 5.0 },\n  { title: \"Movie D\", rating: 4.3 }\n];\n\nconst highRatedMovies = movies.filter(movie => movie.rating > 4);\n\nconsole.log(highRatedMovies);\n```"
  },
  {
    "task": "Find all jobs with a salary above $50,000 from a job listing.",
    "code": "```javascript\nconst jobListings = [\n  { title: 'Software Engineer', salary: 75000 },\n  { title: 'Data Scientist', salary: 65000 },\n  { title: 'Teacher', salary: 40000 },\n  { title: 'Nurse', salary: 45000 },\n  { title: 'Product Manager', salary: 85000 },\n];\n\nconst highSalaryJobs = jobListings.filter(job => job.salary > 50000);\nconsole.log(highSalaryJobs);\n```"
  },
  {
    "task": "Filter out all entries without an email address from a contact form submission list.",
    "code": "```javascript\nconst submissions = [\n    { name: 'John Doe', email: 'john@example.com' },\n    { name: 'Jane Doe', email: '' },\n    { name: 'Alice Smith', email: 'alice@example.com' },\n    { name: 'Bob Johnson', email: null }\n];\n\nconst filteredSubmissions = submissions.filter(submission => submission.email);\n\nconsole.log(filteredSubmissions);\n```"
  },
  {
    "task": "Identify all animals weighing more than 50kg from a zoo inventory.",
    "code": "```javascript\nconst zooInventory = [\n    { name: 'Elephant', weight: 5000 },\n    { name: 'Kangaroo', weight: 85 },\n    { name: 'Giraffe', weight: 800 },\n    { name: 'Monkey', weight: 35 },\n    { name: 'Penguin', weight: 30 }\n];\n\nconst heavyAnimals = zooInventory.filter(animal => animal.weight > 50);\n\nconsole.log(heavyAnimals);\n```"
  },
  {
    "task": "Select all songs with a duration longer than three minutes from a playlist.",
    "code": "```javascript\nconst playlist = [\n    { title: \"Song 1\", duration: 180 },\n    { title: \"Song 2\", duration: 240 },\n    { title: \"Song 3\", duration: 200 },\n    { title: \"Song 4\", duration: 215 }\n];\n\nconst songsLongerThanThreeMinutes = playlist.filter(song => song.duration > 180);\n\nconsole.log(songsLongerThanThreeMinutes);\n```"
  },
  {
    "task": "Extract all accounts with a balance below zero from a bank statement.",
    "code": "```javascript\nconst bankStatement = [\n  { accountNumber: '123', balance: -50 },\n  { accountNumber: '456', balance: 100 },\n  { accountNumber: '789', balance: -20 }\n];\n\nconst accountsBelowZero = bankStatement.filter(account => account.balance < 0);\n\nconsole.log(accountsBelowZero);\n```"
  },
  {
    "task": "Filter out all non-alphabetic characters from a string of text.",
    "code": "```javascript\nfunction filterAlphabetic(input) {\n    return input.split('').filter(char => /^[a-zA-Z]+$/.test(char)).join('');\n}\n```"
  },
  {
    "task": "Select all participants who scored above average in a competition.",
    "code": "```javascript\nfunction filterAboveAverage(participants) {\n    const totalScore = participants.reduce((sum, participant) => sum + participant.score, 0);\n    const averageScore = totalScore / participants.length;\n    return participants.filter(participant => participant.score > averageScore);\n}\n\nconst participants = [\n    { name: 'Alice', score: 85 },\n    { name: 'Bob', score: 92 },\n    { name: 'Charlie', score: 78 },\n    { name: 'David', score: 88 },\n    { name: 'Eve', score: 95 }\n];\n\nconst aboveAverageParticipants = filterAboveAverage(participants);\nconsole.log(aboveAverageParticipants);\n```"
  },
  {
    "task": "Find all houses priced under $300,000 from a real estate database.",
    "code": "```javascript\nconst realEstateDatabase = [\n  { id: 1, price: 250000 },\n  { id: 2, price: 320000 },\n  { id: 3, price: 275000 },\n  { id: 4, price: 500000 },\n  { id: 5, price: 290000 }\n];\n\nconst affordableHouses = realEstateDatabase.filter(house => house.price < 300000);\n\nconsole.log(affordableHouses);\n```"
  },
  {
    "task": "Identify all plants that bloom in spring from a botanical catalog.",
    "code": "```javascript\nconst botanicalCatalog = [\n  { name: 'Tulip', bloomSeason: 'spring' },\n  { name: 'Rose', bloomSeason: 'summer' },\n  { name: 'Daffodil', bloomSeason: 'spring' },\n  { name: 'Sunflower', bloomSeason: 'summer' }\n];\n\nconst springBloomingPlants = botanicalCatalog.filter(plant => plant.bloomSeason === 'spring');\n\nconsole.log(springBloomingPlants);\n```"
  },
  {
    "task": "Extract all passwords that are longer than eight characters from a user database.",
    "code": "```javascript\nconst users = [\n  { username: 'user1', password: 'short' },\n  { username: 'user2', password: 'longenoughpassword' },\n  { username: 'user3', password: 'anotherlongpassword' },\n  { username: 'user4', password: 'tiny' }\n];\n\nconst longPasswords = users\n  .map(user => user.password)\n  .filter(password => password.length > 8);\n\nconsole.log(longPasswords);\n```"
  },
  {
    "task": "Filter out all projects that are not yet started from a project management tool.",
    "code": "```javascript\nconst projects = [\n  { name: \"Project 1\", status: \"completed\" },\n  { name: \"Project 2\", status: \"not started\" },\n  { name: \"Project 3\", status: \"in progress\" },\n  { name: \"Project 4\", status: \"not started\" },\n];\n\nconst startedProjects = projects.filter(project => project.status !== \"not started\");\n\nconsole.log(startedProjects);\n```"
  },
  {
    "task": "Select all days with temperatures exceeding 25\u00b0C from a climate report.",
    "code": "```javascript\nconst climateReport = [\n  { day: 'Monday', temperature: 22 },\n  { day: 'Tuesday', temperature: 28 },\n  { day: 'Wednesday', temperature: 26 },\n  { day: 'Thursday', temperature: 24 },\n  { day: 'Friday', temperature: 30 }\n];\n\nconst hotDays = climateReport.filter(report => report.temperature > 25);\n\nconsole.log(hotDays);\n```"
  },
  {
    "task": "Find all recipes that are vegetarian from a cookbook.",
    "code": "```javascript\nconst cookbook = [\n  { name: \"Pasta\", vegetarian: true },\n  { name: \"Chicken Curry\", vegetarian: false },\n  { name: \"Veggie Burger\", vegetarian: true },\n  { name: \"Beef Stew\", vegetarian: false }\n];\n\nconst vegetarianRecipes = cookbook.filter(recipe => recipe.vegetarian);\n\nconsole.log(vegetarianRecipes);\n```"
  },
  {
    "task": "Identify all articles that mention a specific keyword from a news feed.",
    "code": "```javascript\nfunction filterArticlesByKeyword(articles, keyword) {\n    return articles.filter(article => article.includes(keyword));\n}\n\n// Example usage:\nconst newsFeed = [\n    \"Breaking news: JavaScript takes over the world!\",\n    \"Learn how to cook the perfect pasta\",\n    \"The future of AI: What to expect\",\n    \"JavaScript and its impact on modern web development\"\n];\n\nconst keyword = \"JavaScript\";\nconst filteredArticles = filterArticlesByKeyword(newsFeed, keyword);\nconsole.log(filteredArticles);\n```"
  },
  {
    "task": "Extract all files with the '.jpg' extension from a directory.",
    "code": "```javascript\nconst fs = require('fs');\nconst path = require('path');\n\nfunction getJpgFiles(directory) {\n    return fs.readdirSync(directory).filter(file => path.extname(file).toLowerCase() === '.jpg');\n}\n\n// Example usage:\nconst jpgFiles = getJpgFiles('/path/to/directory');\nconsole.log(jpgFiles);\n```"
  },
  {
    "task": "Filter out all transactions that are not categorized from a financial statement.",
    "code": "```javascript\nconst financialStatement = [\n  { amount: 100, category: 'Food' },\n  { amount: 200, category: null },\n  { amount: 300, category: 'Utility' },\n  { amount: 400, category: undefined },\n];\n\nconst categorizedTransactions = financialStatement.filter(transaction => transaction.category !== null && transaction.category !== undefined);\n\nconsole.log(categorizedTransactions);\n```"
  },
  {
    "task": "Select all paintings created before 1900 from an art gallery collection.",
    "code": "```javascript\nconst artGallery = [\n  { title: 'The Starry Night', artist: 'Vincent van Gogh', year: 1889 },\n  { title: 'The Persistence of Memory', artist: 'Salvador Dal\u00ed', year: 1931 },\n  { title: 'Mona Lisa', artist: 'Leonardo da Vinci', year: 1503 },\n  { title: 'The Scream', artist: 'Edvard Munch', year: 1893 },\n  { title: 'Girl with a Pearl Earring', artist: 'Johannes Vermeer', year: 1665 }\n];\n\nconst paintingsBefore1900 = artGallery.filter(painting => painting.year < 1900);\n```"
  },
  {
    "task": "Find all students with perfect attendance from a school record.",
    "code": "```javascript\nconst schoolRecord = [\n    { name: 'Alice', attendance: 100 },\n    { name: 'Bob', attendance: 95 },\n    { name: 'Charlie', attendance: 100 },\n    { name: 'David', attendance: 85 }\n];\n\nconst perfectAttendanceStudents = schoolRecord.filter(student => student.attendance === 100);\n\nconsole.log(perfectAttendanceStudents);\n```"
  },
  {
    "task": "Identify all messages sent by a specific user from a chat application.",
    "code": "```javascript\nconst filterMessagesByUser = (messages, userId) => \n    messages.filter(message => message.userId === userId);\n\n// Example usage:\nconst chatMessages = [\n    { userId: 1, text: 'Hello!' },\n    { userId: 2, text: 'Hi there!' },\n    { userId: 1, text: 'How are you?' },\n    { userId: 3, text: 'Good morning!' }\n];\n\nconst userMessages = filterMessagesByUser(chatMessages, 1);\nconsole.log(userMessages);\n```"
  },
  {
    "task": "Extract all elements greater than 100 from an array of numbers.",
    "code": "```javascript\nfunction filterGreaterThan100(numbers) {\n    return numbers.filter(num => num > 100);\n}\n\n// Example usage:\nconst numbers = [50, 120, 200, 80, 150];\nconst result = filterGreaterThan100(numbers);\nconsole.log(result); // Output: [120, 200, 150]\n```"
  },
  {
    "task": "Filter out all words that do not end in 'ed' from a paragraph.",
    "code": "```javascript\nconst paragraph = \"This is a sample paragraph that should be filtered based on the provided criteria.\";\n\nconst filteredWords = paragraph.split(' ').filter(word => word.endsWith('ed'));\n\nconsole.log(filteredWords);\n```"
  },
  {
    "task": "Select all flights departing before noon from a flight schedule.",
    "code": "```javascript\nconst flightSchedule = [\n  { flightNumber: 'AA123', departureTime: '09:30' },\n  { flightNumber: 'BA456', departureTime: '12:15' },\n  { flightNumber: 'CA789', departureTime: '11:45' },\n  { flightNumber: 'DA012', departureTime: '14:00' },\n  { flightNumber: 'EA345', departureTime: '10:30' }\n];\n\nconst flightsBeforeNoon = flightSchedule.filter(flight => {\n  const [hours, minutes] = flight.departureTime.split(':').map(Number);\n  return hours < 12;\n});\n\nconsole.log(flightsBeforeNoon);\n```"
  },
  {
    "task": "Find all products priced above $20 from an online store inventory.",
    "code": "```javascript\nconst inventory = [\n    { name: 'Product 1', price: 10 },\n    { name: 'Product 2', price: 25 },\n    { name: 'Product 3', price: 30 },\n    { name: 'Product 4', price: 15 }\n];\n\nconst expensiveProducts = inventory.filter(product => product.price > 20);\n\nconsole.log(expensiveProducts);\n```"
  },
  {
    "task": "Identify all sessions longer than one hour from a webinar series.",
    "code": "```javascript\nconst sessions = [\n    { title: \"Session 1\", duration: 30 },\n    { title: \"Session 2\", duration: 90 },\n    { title: \"Session 3\", duration: 120 },\n    { title: \"Session 4\", duration: 45 }\n];\n\nconst longSessions = sessions.filter(session => session.duration > 60);\n\nconsole.log(longSessions);\n```"
  },
  {
    "task": "Extract all images with a resolution higher than 1080p from a photo library.",
    "code": "```javascript\nconst photoLibrary = [\n  { url: 'image1.jpg', width: 1920, height: 1080 },\n  { url: 'image2.jpg', width: 2560, height: 1440 },\n  { url: 'image3.jpg', width: 1280, height: 720 },\n  { url: 'image4.jpg', width: 3840, height: 2160 },\n  { url: 'image5.jpg', width: 800, height: 600 }\n];\n\nconst highResolutionImages = photoLibrary.filter(image => image.width > 1920 || image.height > 1080);\n\nconsole.log(highResolutionImages);\n```"
  },
  {
    "task": "Filter out all responses that are not 'yes' or 'no' from a survey result.",
    "code": "```javascript\nconst surveyResults = ['yes', 'no', 'maybe', 'yes', 'no', 'idk', 'yes'];\n\nconst filteredResults = surveyResults.filter(response => response === 'yes' || response === 'no');\n\nconsole.log(filteredResults);\n```"
  },
  {
    "task": "Select all tweets with more than 100 likes from a Twitter feed.",
    "code": "```javascript\nconst tweets = [\n    { id: 1, text: \"Hello world!\", likes: 50 },\n    { id: 2, text: \"Just setting up my account\", likes: 150 },\n    { id: 3, text: \"Having a great day!\", likes: 200 },\n    { id: 4, text: \"Check out this cool link\", likes: 90 }\n];\n\nconst popularTweets = tweets.filter(tweet => tweet.likes > 100);\n\nconsole.log(popularTweets);\n```"
  },
  {
    "task": "Find all links that are broken from a webpage.",
    "code": "```javascript\nasync function findBrokenLinks(url) {\n  const response = await fetch(url);\n  const html = await response.text();\n  const parser = new DOMParser();\n  const doc = parser.parseFromString(html, 'text/html');\n  const links = Array.from(doc.querySelectorAll('a')).map(link => link.href);\n\n  const statusPromises = links.map(async link => {\n    try {\n      const res = await fetch(link);\n      return { link, status: res.status };\n    } catch {\n      return { link, status: 'error' };\n    }\n  });\n\n  const results = await Promise.all(statusPromises);\n  return results.filter(result => result.status !== 200);\n}\n\n// Example usage:\n// findBrokenLinks('https://example.com').then(console.log);\n```"
  },
  {
    "task": "Identify all machines that are currently offline from a network monitoring tool.",
    "code": "```javascript\nconst machines = [\n  { id: 1, status: 'online' },\n  { id: 2, status: 'offline' },\n  { id: 3, status: 'online' },\n  { id: 4, status: 'offline' },\n];\n\nconst offlineMachines = machines.filter(machine => machine.status === 'offline');\nconsole.log(offlineMachines);\n```"
  },
  {
    "task": "Extract all invoices with a due date in the current month from an accounting system.",
    "code": "```javascript\nconst invoices = [\n  { id: 1, dueDate: '2023-10-15' },\n  { id: 2, dueDate: '2023-11-20' },\n  { id: 3, dueDate: '2023-10-05' },\n  { id: 4, dueDate: '2023-12-01' }\n];\n\nconst currentDate = new Date();\nconst currentMonth = currentDate.getMonth();\nconst currentYear = currentDate.getFullYear();\n\nconst invoicesDueThisMonth = invoices.filter(invoice => {\n  const dueDate = new Date(invoice.dueDate);\n  return dueDate.getMonth() === currentMonth && dueDate.getFullYear() === currentYear;\n});\n\nconsole.log(invoicesDueThisMonth);\n```"
  },
  {
    "task": "Filter out all lines in a file that start with a '#' from a configuration file.",
    "code": "```javascript\nconst fs = require('fs');\n\nfunction filterConfigFile(filePath) {\n    const data = fs.readFileSync(filePath, 'utf-8');\n    const lines = data.split('\\n');\n    const filteredLines = lines.filter(line => !line.trim().startsWith('#'));\n    return filteredLines.join('\\n');\n}\n\n// Example usage:\n// const result = filterConfigFile('path/to/config.file');\n// console.log(result);\n```"
  },
  {
    "task": "Select all posts with a comment count higher than 50 from a blog.",
    "code": "```javascript\nconst posts = [\n  // Example posts array with a commentCount property\n  { id: 1, title: 'Post 1', commentCount: 45 },\n  { id: 2, title: 'Post 2', commentCount: 60 },\n  { id: 3, title: 'Post 3', commentCount: 30 },\n  { id: 4, title: 'Post 4', commentCount: 80 }\n];\n\nconst filteredPosts = posts.filter(post => post.commentCount > 50);\n\nconsole.log(filteredPosts);\n```"
  },
  {
    "task": "Find all offers that expire within the next week from a promotional database.",
    "code": "```javascript\nconst offers = [\n    { id: 1, expires: '2023-12-10' },\n    { id: 2, expires: '2023-12-05' },\n    { id: 3, expires: '2023-12-01' },\n    { id: 4, expires: '2023-11-28' }\n];\n\nconst today = new Date();\nconst nextWeek = new Date();\nnextWeek.setDate(today.getDate() + 7);\n\nconst expiringSoon = offers.filter(offer => {\n    const expirationDate = new Date(offer.expires);\n    return expirationDate > today && expirationDate <= nextWeek;\n});\n\nconsole.log(expiringSoon);\n```"
  },
  {
    "task": "Identify all items that are on sale from a shopping catalog.",
    "code": "```javascript\nconst shoppingCatalog = [\n    { item: 'T-shirt', price: 20, onSale: true },\n    { item: 'Jeans', price: 40, onSale: false },\n    { item: 'Sneakers', price: 60, onSale: true },\n    { item: 'Hat', price: 15, onSale: false }\n];\n\nconst itemsOnSale = shoppingCatalog.filter(product => product.onSale);\n\nconsole.log(itemsOnSale);\n```"
  },
  {
    "task": "Extract all notes that mention 'urgent' from a meeting record.",
    "code": "```javascript\nconst meetingRecord = [\n    \"Discuss budget plans\",\n    \"urgent: finalize project deadlines\",\n    \"Review team performance\",\n    \"Plan team building event\",\n    \"urgent: prepare presentation\"\n];\n\nconst urgentNotes = meetingRecord.filter(note => note.toLowerCase().includes('urgent'));\nconsole.log(urgentNotes);\n```"
  },
  {
    "task": "Filter out all numbers that do not have a remainder when divided by two from a list.",
    "code": "```javascript\nconst numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconst filteredNumbers = numbers.filter(number => number % 2 !== 0);\nconsole.log(filteredNumbers);\n```"
  },
  {
    "task": "Select all concerts happening in the summer from an event calendar.",
    "code": "```javascript\nconst events = [\n  { name: 'Concert A', date: '2023-06-15' },\n  { name: 'Concert B', date: '2023-07-20' },\n  { name: 'Concert C', date: '2023-05-10' },\n  { name: 'Concert D', date: '2023-08-05' }\n];\n\nconst isSummerConcert = event => {\n  const month = new Date(event.date).getMonth() + 1;\n  return month >= 6 && month <= 8;\n};\n\nconst summerConcerts = events.filter(isSummerConcert);\n\nconsole.log(summerConcerts);\n```"
  },
  {
    "task": "Find all users with more than 1000 followers from a social media platform.",
    "code": "```javascript\nconst users = [\n  { name: 'Alice', followers: 1200 },\n  { name: 'Bob', followers: 500 },\n  { name: 'Charlie', followers: 1500 },\n  { name: 'David', followers: 800 }\n];\n\nconst usersWithMoreThan1000Followers = users.filter(user => user.followers > 1000);\n\nconsole.log(usersWithMoreThan1000Followers);\n```"
  },
  {
    "task": "Identify all stocks with a growth rate above 10% from a financial portfolio.",
    "code": "```javascript\nconst portfolio = [\n    { name: 'Stock A', growthRate: 0.15 },\n    { name: 'Stock B', growthRate: 0.05 },\n    { name: 'Stock C', growthRate: 0.12 },\n    { name: 'Stock D', growthRate: 0.08 }\n];\n\nconst highGrowthStocks = portfolio.filter(stock => stock.growthRate > 0.10);\n\nconsole.log(highGrowthStocks);\n```"
  },
  {
    "task": "Extract all reviews that have a five-star rating from a product review site.",
    "code": "```javascript\nconst reviews = [\n    { rating: 5, text: \"Excellent product!\" },\n    { rating: 4, text: \"Very good, but could be improved.\" },\n    { rating: 5, text: \"Loved it, highly recommend!\" },\n    { rating: 3, text: \"It's okay, not the best.\" }\n];\n\nconst fiveStarReviews = reviews.filter(review => review.rating === 5);\n\nconsole.log(fiveStarReviews);\n```"
  },
  {
    "task": "Filter out all emails that are not flagged from an inbox.",
    "code": "```javascript\nconst inbox = [\n  { email: 'example1@example.com', flagged: true },\n  { email: 'example2@example.com', flagged: false },\n  { email: 'example3@example.com', flagged: true },\n  { email: 'example4@example.com', flagged: false },\n];\n\nconst flaggedEmails = inbox.filter(item => item.flagged);\n\nconsole.log(flaggedEmails);\n```"
  },
  {
    "task": "Select all entries with a timestamp from the past 24 hours from a log file.",
    "code": "```javascript\nconst fs = require('fs');\n\nfs.readFile('log.txt', 'utf8', (err, data) => {\n  if (err) throw err;\n\n  const entries = data.split('\\n').filter(entry => {\n    const timestamp = new Date(entry.split(',')[0]); // Assuming the timestamp is the first part of the entry\n    const now = new Date();\n    const twentyFourHoursAgo = new Date(now.getTime() - 24 * 60 * 60 * 1000);\n    return timestamp > twentyFourHoursAgo;\n  });\n\n  console.log(entries);\n});\n```"
  },
  {
    "task": "Find all books by a specific author from a library database.",
    "code": "```javascript\nfunction findBooksByAuthor(library, author) {\n    return library.filter(book => book.author === author);\n}\n```"
  },
  {
    "task": "Identify all donations above $500 from a charity fundraiser report.",
    "code": "```javascript\nconst donations = [300, 750, 150, 600, 450, 900, 250];\nconst filteredDonations = donations.filter(donation => donation > 500);\nconsole.log(filteredDonations);\n```"
  },
  {
    "task": "Extract all assignments due in the next week from a course syllabus.",
    "code": "```javascript\nconst syllabus = [\n  { title: 'Assignment 1', dueDate: '2023-11-01' },\n  { title: 'Assignment 2', dueDate: '2023-11-07' },\n  { title: 'Assignment 3', dueDate: '2023-11-15' }\n];\n\nconst now = new Date();\nconst nextWeek = new Date();\nnextWeek.setDate(now.getDate() + 7);\n\nconst assignmentsDueNextWeek = syllabus.filter(assignment => {\n  const dueDate = new Date(assignment.dueDate);\n  return dueDate > now && dueDate <= nextWeek;\n});\n\nconsole.log(assignmentsDueNextWeek);\n```"
  },
  {
    "task": "Filter out all movies that are not in English from a streaming service.",
    "code": "```javascript\nconst movies = [\n    { title: 'Parasite', language: 'Korean' },\n    { title: 'Inception', language: 'English' },\n    { title: 'Am\u00e9lie', language: 'French' },\n    { title: 'The Dark Knight', language: 'English' },\n    { title: 'Spirited Away', language: 'Japanese' }\n];\n\nconst englishMovies = movies.filter(movie => movie.language === 'English');\n\nconsole.log(englishMovies);\n```"
  },
  {
    "task": "Select all landmarks located in Europe from a travel guide.",
    "code": "```javascript\nconst landmarks = [\n    { name: \"Eiffel Tower\", location: \"Europe\" },\n    { name: \"Statue of Liberty\", location: \"North America\" },\n    { name: \"Colosseum\", location: \"Europe\" },\n    { name: \"Great Wall of China\", location: \"Asia\" },\n    { name: \"Big Ben\", location: \"Europe\" }\n];\n\nconst europeanLandmarks = landmarks.filter(landmark => landmark.location === \"Europe\");\n\nconsole.log(europeanLandmarks);\n```"
  },
  {
    "task": "Find all contracts that are set to renew next month from a contract management system.",
    "code": "```javascript\nfunction getContractsToRenewNextMonth(contracts) {\n    const nextMonth = new Date();\n    nextMonth.setMonth(nextMonth.getMonth() + 1);\n\n    return contracts.filter(contract => {\n        const renewalDate = new Date(contract.renewalDate);\n        return renewalDate.getFullYear() === nextMonth.getFullYear() &&\n               renewalDate.getMonth() === nextMonth.getMonth();\n    });\n}\n```"
  },
  {
    "task": "Identify all volunteer hours logged in the past year from a non-profit organization database.",
    "code": "```javascript\n// Assuming `volunteerHours` is an array of objects from the database\n// Each object has a `date` property which is a JavaScript Date object\n\nconst oneYearAgo = new Date();\noneYearAgo.setFullYear(oneYearAgo.getFullYear() - 1);\n\nconst hoursLoggedPastYear = volunteerHours.filter(entry => entry.date >= oneYearAgo);\n```"
  },
  {
    "task": "Extract all elements that are not strings from a mixed-type list.",
    "code": "```javascript\nconst mixedList = [1, 'apple', 3.14, true, 'banana', {}, [], 'carrot'];\nconst nonStringElements = mixedList.filter(element => typeof element !== 'string');\n```"
  },
  {
    "task": "Filter out all orders that are not yet shipped from an e-commerce system.",
    "code": "```javascript\nconst orders = [\n  { id: 1, status: 'shipped' },\n  { id: 2, status: 'pending' },\n  { id: 3, status: 'shipped' },\n  { id: 4, status: 'processing' }\n];\n\nconst shippedOrders = orders.filter(order => order.status === 'shipped');\n\nconsole.log(shippedOrders);\n```"
  },
  {
    "task": "Select all emails sent from a specific address in an email server.",
    "code": "```javascript\nfunction filterEmailsBySender(emails, senderAddress) {\n    return emails.filter(email => email.from === senderAddress);\n}\n\n// Example usage:\nconst emails = [\n    { from: 'example1@example.com', subject: 'Hello', body: 'Hi there!' },\n    { from: 'specific@address.com', subject: 'Meeting', body: 'Let\\'s meet at 5.' },\n    { from: 'example2@example.com', subject: 'Greetings', body: 'Good day!' },\n    { from: 'specific@address.com', subject: 'Follow-up', body: 'Just checking in.' }\n];\n\nconst filteredEmails = filterEmailsBySender(emails, 'specific@address.com');\nconsole.log(filteredEmails);\n```"
  },
  {
    "task": "Find all passwords with at least one special character from a security database.",
    "code": "```javascript\nconst passwords = [\n  'password123',\n  'secure$pass',\n  'hello_world',\n  'noSpecialChar',\n  'good#day'\n];\n\nconst hasSpecialCharacter = password => /[!@#$%^&*(),.?\":{}|<>]/.test(password);\n\nconst passwordsWithSpecialChar = passwords.filter(hasSpecialCharacter);\n\nconsole.log(passwordsWithSpecialChar);\n```"
  },
  {
    "task": "Identify all courses with a prerequisite from a university catalog.",
    "code": "```javascript\nconst courses = [\n    { name: \"Calculus I\", prerequisites: [] },\n    { name: \"Calculus II\", prerequisites: [\"Calculus I\"] },\n    { name: \"Physics I\", prerequisites: [\"Calculus I\"] },\n    { name: \"Physics II\", prerequisites: [\"Physics I\"] },\n    { name: \"Art History\", prerequisites: [] }\n];\n\nconst coursesWithPrerequisites = courses.filter(course => course.prerequisites.length > 0);\n\nconsole.log(coursesWithPrerequisites);\n```"
  },
  {
    "task": "Extract all genes associated with a specific trait from a genetic database.",
    "code": "```javascript\nfunction extractGenesWithTrait(geneticDatabase, trait) {\n    return geneticDatabase.filter(gene => gene.traits.includes(trait));\n}\n\n// Example usage:\nconst geneticDatabase = [\n    { name: 'GeneA', traits: ['height', 'eye color'] },\n    { name: 'GeneB', traits: ['hair color', 'disease resistance'] },\n    { name: 'GeneC', traits: ['eye color', 'disease resistance'] },\n];\n\nconst specificTrait = 'eye color';\nconst genesWithTrait = extractGenesWithTrait(geneticDatabase, specificTrait);\nconsole.log(genesWithTrait);\n```"
  },
  {
    "task": "Filter out all investments with a risk level below medium from a portfolio.",
    "code": "```javascript\nconst portfolio = [\n  { name: 'Investment A', risk: 'low' },\n  { name: 'Investment B', risk: 'medium' },\n  { name: 'Investment C', risk: 'high' },\n  { name: 'Investment D', risk: 'medium' }\n];\n\nconst filteredInvestments = portfolio.filter(investment => investment.risk !== 'low');\n\nconsole.log(filteredInvestments);\n```"
  },
  {
    "task": "Select all calls longer than five minutes from a call log.",
    "code": "```javascript\nconst callLog = [\n  { id: 1, duration: 300 },\n  { id: 2, duration: 600 },\n  { id: 3, duration: 200 },\n  { id: 4, duration: 700 }\n];\n\nconst longCalls = callLog.filter(call => call.duration > 300);\n\nconsole.log(longCalls);\n```"
  }
]