[
  {
    "task": "Create a list of the first ten positive integers and calculate their sum.",
    "code": "```javascript\nconst numbers = Array.from({ length: 10 }, (_, i) => i + 1);\nconst sum = numbers.reduce((acc, curr) => acc + curr, 0);\nconsole.log(sum);\n```"
  },
  {
    "task": "Write a program to reverse the order of elements in a given list.",
    "code": "```javascript\nfunction reverseList(list) {\n    return list.reverse();\n}\n\n// Example usage:\nlet myList = [1, 2, 3, 4, 5];\nlet reversedList = reverseList(myList);\nconsole.log(reversedList); // Output: [5, 4, 3, 2, 1]\n```"
  },
  {
    "task": "Implement a function that takes a list and returns the list with duplicates removed.",
    "code": "```javascript\nfunction removeDuplicates(list) {\n    return [...new Set(list)];\n}\n```"
  },
  {
    "task": "Create a list of names and sort them in alphabetical order.",
    "code": "```javascript\nlet names = [\"John\", \"Alice\", \"Bob\", \"Diana\"];\nnames.sort();\n```"
  },
  {
    "task": "Write a function that appends a new element to an existing list.",
    "code": "```javascript\nfunction appendToList(list, element) {\n    list.push(element);\n}\n```"
  },
  {
    "task": "Generate a list of the first 20 even numbers.",
    "code": "```javascript\nlet evenNumbers = [];\nfor (let i = 1; i <= 20; i++) {\n    evenNumbers.push(i * 2);\n}\n```"
  },
  {
    "task": "Create a nested list (a list of lists) and access an element from the inner list.",
    "code": "```javascript\nlet nestedList = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\nlet element = nestedList[1][2]; // Accessing element '6' from the inner list\n```"
  },
  {
    "task": "Write a program that finds the maximum value in a list of integers.",
    "code": "```javascript\nfunction findMaxValue(numbers) {\n    if (numbers.length === 0) return null;\n    let max = numbers[0];\n    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n    }\n    return max;\n}\n\n// Example usage:\nconst list = [3, 5, 7, 2, 8];\nconsole.log(findMaxValue(list)); // Outputs: 8\n```"
  },
  {
    "task": "Implement a function to merge two lists into a single list without duplicates.",
    "code": "```javascript\nfunction mergeLists(list1, list2) {\n    return Array.from(new Set([...list1, ...list2]));\n}\n```"
  },
  {
    "task": "Create a list from user input, then display the list in reverse order.",
    "code": "```javascript\nconst readline = require('readline');\n\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\n\nrl.question('Enter comma-separated list items: ', (answer) => {\n  const list = answer.split(',');\n  const reversedList = list.reverse();\n  console.log('Reversed List:', reversedList);\n  rl.close();\n});\n```"
  },
  {
    "task": "Write a function that takes a list and returns a new list containing only the even numbers.",
    "code": "```javascript\nfunction filterEvenNumbers(arr) {\n    return arr.filter(num => num % 2 === 0);\n}\n```"
  },
  {
    "task": "Generate a list of squares for the numbers 1 through 10.",
    "code": "```javascript\nconst squares = [];\nfor (let i = 1; i <= 10; i++) {\n  squares.push(i * i);\n}\n```"
  },
  {
    "task": "Create a list of floating-point numbers and find their average.",
    "code": "```javascript\nlet numbers = [1.2, 3.4, 5.6, 7.8, 9.0];\nlet sum = numbers.reduce((acc, num) => acc + num, 0);\nlet average = sum / numbers.length;\nconsole.log(average);\n```"
  },
  {
    "task": "Implement a program to rotate the elements of a list to the right by a given number of steps.",
    "code": "```javascript\nfunction rotateListRight(arr, steps) {\n    const len = arr.length;\n    if (len === 0) return arr;\n    const shift = steps % len;\n    return arr.slice(-shift).concat(arr.slice(0, len - shift));\n}\n\n// Example usage:\nconst list = [1, 2, 3, 4, 5];\nconst steps = 2;\nconst rotatedList = rotateListRight(list, steps);\nconsole.log(rotatedList); // Output: [4, 5, 1, 2, 3]\n```"
  },
  {
    "task": "Write a function that checks if a list is a palindrome (reads the same forwards and backwards).",
    "code": "```javascript\nfunction isPalindrome(list) {\n    return list.join('') === list.slice().reverse().join('');\n}\n```"
  },
  {
    "task": "Create a list of random integers and count how many are greater than 50.",
    "code": "```javascript\nfunction countGreaterThanFifty() {\n    let randomIntegers = Array.from({length: 100}, () => Math.floor(Math.random() * 100));\n    let count = randomIntegers.filter(num => num > 50).length;\n    return count;\n}\n\nconsole.log(countGreaterThanFifty());\n```"
  },
  {
    "task": "Write a program that removes the first occurrence of a specified element from a list.",
    "code": "```javascript\nfunction removeFirstOccurrence(arr, element) {\n    const index = arr.indexOf(element);\n    if (index !== -1) {\n        arr.splice(index, 1);\n    }\n    return arr;\n}\n\n// Example usage:\nconst myList = [1, 2, 3, 4, 2];\nconsole.log(removeFirstOccurrence(myList, 2)); // Output: [1, 3, 4, 2]\n```"
  },
  {
    "task": "Implement a function that takes two lists and returns a list containing their intersection.",
    "code": "```javascript\nfunction listIntersection(list1, list2) {\n    return list1.filter(element => list2.includes(element));\n}\n```"
  },
  {
    "task": "Create a list of prime numbers less than 100.",
    "code": "```javascript\nfunction isPrime(num) {\n    if (num <= 1) return false;\n    if (num <= 3) return true;\n    if (num % 2 === 0 || num % 3 === 0) return false;\n    for (let i = 5; i * i <= num; i += 6) {\n        if (num % i === 0 || num % (i + 2) === 0) return false;\n    }\n    return true;\n}\n\nlet primes = [];\nfor (let i = 2; i < 100; i++) {\n    if (isPrime(i)) {\n        primes.push(i);\n    }\n}\n\nconsole.log(primes);\n```"
  },
  {
    "task": "Write a function to split a list into two lists: one with even numbers and one with odd numbers.",
    "code": "```javascript\nfunction splitEvenOdd(numbers) {\n    const evens = [];\n    const odds = [];\n    numbers.forEach(number => {\n        if (number % 2 === 0) {\n            evens.push(number);\n        } else {\n            odds.push(number);\n        }\n    });\n    return { evens, odds };\n}\n```"
  },
  {
    "task": "Create a list of strings and convert all the strings to uppercase.",
    "code": "```javascript\nlet strings = [\"apple\", \"banana\", \"cherry\"];\nlet uppercasedStrings = strings.map(str => str.toUpperCase());\n```"
  },
  {
    "task": "Implement a program that removes all elements from a list that are less than a specified value.",
    "code": "```javascript\nfunction removeElementsLessThan(list, specifiedValue) {\n    return list.filter(item => item >= specifiedValue);\n}\n\n// Example usage:\nconst list = [5, 3, 8, 1, 9, 2];\nconst specifiedValue = 4;\nconst result = removeElementsLessThan(list, specifiedValue);\nconsole.log(result); // Output: [5, 8, 9]\n```"
  },
  {
    "task": "Write a function that takes a list and returns a new list with elements in random order.",
    "code": "```javascript\nfunction shuffleList(originalList) {\n    const newList = [...originalList];\n    for (let i = newList.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [newList[i], newList[j]] = [newList[j], newList[i]];\n    }\n    return newList;\n}\n```"
  },
  {
    "task": "Create a list of tuples where each tuple contains a number and its square.",
    "code": "```javascript\nlet listOfTuples = [];\nfor (let i = 1; i <= 10; i++) {\n    listOfTuples.push([i, i * i]);\n}\n```"
  },
  {
    "task": "Write a program to multiply all elements in a list by a given factor.",
    "code": "```javascript\nfunction multiplyListByFactor(list, factor) {\n  return list.map(element => element * factor);\n}\n\nconst numbers = [1, 2, 3, 4, 5];\nconst factor = 3;\nconst multipliedNumbers = multiplyListByFactor(numbers, factor);\nconsole.log(multipliedNumbers);\n```"
  },
  {
    "task": "Implement a function that flattens a nested list.",
    "code": "```javascript\nfunction flattenList(nestedList) {\n    const flatList = [];\n    \n    function flatten(sublist) {\n        for (const item of sublist) {\n            if (Array.isArray(item)) {\n                flatten(item);\n            } else {\n                flatList.push(item);\n            }\n        }\n    }\n    \n    flatten(nestedList);\n    return flatList;\n}\n```"
  },
  {
    "task": "Create a list of dates and sort them chronologically.",
    "code": "```javascript\nconst dates = [\n  new Date('2023-12-31'),\n  new Date('2021-01-01'),\n  new Date('2022-06-15'),\n  new Date('2023-03-10')\n];\n\ndates.sort((a, b) => a - b);\n```"
  },
  {
    "task": "Write a function that finds the index of the first occurrence of a given element in a list.",
    "code": "```javascript\nfunction findFirstOccurrenceIndex(list, element) {\n    return list.indexOf(element);\n}\n```"
  },
  {
    "task": "Generate a list of Fibonacci numbers up to a specified limit.",
    "code": "```javascript\nfunction generateFibonacci(limit) {\n    const fibonacci = [];\n    let a = 0, b = 1;\n    while (a <= limit) {\n        fibonacci.push(a);\n        [a, b] = [b, a + b];\n    }\n    return fibonacci;\n}\n\n// Example usage:\nconst limit = 100; // Specify the limit here\nconst fibonacciNumbers = generateFibonacci(limit);\nconsole.log(fibonacciNumbers);\n```"
  },
  {
    "task": "Create a list of booleans and determine if all are True.",
    "code": "```javascript\nconst booleanList = [true, true, true, false, true];\nconst allTrue = booleanList.every(value => value === true);\n```"
  },
  {
    "task": "Write a program to concatenate two lists.",
    "code": "```javascript\nconst list1 = [1, 2, 3];\nconst list2 = [4, 5, 6];\n\nconst concatenatedList = list1.concat(list2);\n\nconsole.log(concatenatedList);\n```"
  },
  {
    "task": "Implement a function that returns the length of a list without using built-in functions.",
    "code": "```javascript\nfunction listLength(list) {\n    let length = 0;\n    for (let i in list) {\n        length++;\n    }\n    return length;\n}\n```"
  },
  {
    "task": "Create a list of words and find the longest word.",
    "code": "```javascript\nconst words = [\"apple\", \"banana\", \"cherry\", \"date\"];\nlet longestWord = \"\";\n\nfor (const word of words) {\n    if (word.length > longestWord.length) {\n        longestWord = word;\n    }\n}\n\nconsole.log(longestWord);\n```"
  },
  {
    "task": "Write a function that takes a list and a predicate function, returning a list of elements that satisfy the predicate.",
    "code": "```javascript\nfunction filterList(list, predicate) {\n    return list.filter(predicate);\n}\n```"
  },
  {
    "task": "Generate a list of strings and filter out those with less than 5 characters.",
    "code": "```javascript\nconst strings = [\"apple\", \"dog\", \"banana\", \"cat\", \"elephant\"];\nconst filteredStrings = strings.filter(str => str.length >= 5);\nconsole.log(filteredStrings);\n```"
  },
  {
    "task": "Create a list of mixed data types and separate them into lists by type.",
    "code": "```javascript\nconst mixedList = [1, 'hello', true, 3.14, false, 'world', 42];\n\nconst numbers = mixedList.filter(item => typeof item === 'number');\nconst strings = mixedList.filter(item => typeof item === 'string');\nconst booleans = mixedList.filter(item => typeof item === 'boolean');\n\nconsole.log('Numbers:', numbers);\nconsole.log('Strings:', strings);\nconsole.log('Booleans:', booleans);\n```"
  },
  {
    "task": "Write a program to find the common elements between two lists.",
    "code": "```javascript\nfunction findCommonElements(list1, list2) {\n    return list1.filter(element => list2.includes(element));\n}\n\n// Example usage:\nconst list1 = [1, 2, 3, 4, 5];\nconst list2 = [4, 5, 6, 7, 8];\nconst commonElements = findCommonElements(list1, list2);\nconsole.log(commonElements); // Output: [4, 5]\n```"
  },
  {
    "task": "Implement a function to rotate the elements of a list to the left by a given number of steps.",
    "code": "```javascript\nfunction rotateLeft(list, steps) {\n    const n = list.length;\n    steps = steps % n;\n    return list.slice(steps).concat(list.slice(0, steps));\n}\n```"
  },
  {
    "task": "Create a list of numbers and find the product of all the elements.",
    "code": "```javascript\nlet numbers = [2, 3, 4, 5];\nlet product = numbers.reduce((accumulator, currentValue) => accumulator * currentValue, 1);\nconsole.log(product);\n```"
  },
  {
    "task": "Write a function that removes all occurrences of a specified element from a list.",
    "code": "```javascript\nfunction removeOccurrences(arr, element) {\n  return arr.filter(item => item !== element);\n}\n```"
  },
  {
    "task": "Generate a list of random numbers and find the median value.",
    "code": "```javascript\nfunction getRandomNumber(min, max) {\n    return Math.random() * (max - min) + min;\n}\n\nfunction generateRandomNumbers(count, min, max) {\n    const numbers = [];\n    for (let i = 0; i < count; i++) {\n        numbers.push(getRandomNumber(min, max));\n    }\n    return numbers;\n}\n\nfunction findMedian(numbers) {\n    const sortedNumbers = numbers.slice().sort((a, b) => a - b);\n    const mid = Math.floor(sortedNumbers.length / 2);\n\n    if (sortedNumbers.length % 2 === 0) {\n        return (sortedNumbers[mid - 1] + sortedNumbers[mid]) / 2;\n    } else {\n        return sortedNumbers[mid];\n    }\n}\n\nconst randomNumbers = generateRandomNumbers(10, 1, 100);\nconst median = findMedian(randomNumbers);\nconsole.log('Random Numbers:', randomNumbers);\nconsole.log('Median Value:', median);\n```"
  },
  {
    "task": "Create a list of dictionaries and sort them by a specific key.",
    "code": "```javascript\nconst listOfDicts = [\n    {name: 'Alice', age: 30},\n    {name: 'Bob', age: 25},\n    {name: 'Charlie', age: 35}\n];\n\nlistOfDicts.sort((a, b) => a.age - b.age);\n```"
  },
  {
    "task": "Write a program to split a list into chunks of a specified size.",
    "code": "```javascript\nfunction chunkList(list, chunkSize) {\n    let result = [];\n    for (let i = 0; i < list.length; i += chunkSize) {\n        result.push(list.slice(i, i + chunkSize));\n    }\n    return result;\n}\n\n// Example usage:\nlet myList = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet chunkSize = 3;\nlet chunks = chunkList(myList, chunkSize);\nconsole.log(chunks); // Output: [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n```"
  },
  {
    "task": "Implement a function that takes a list and returns a dictionary with the frequency of each element.",
    "code": "```javascript\nfunction getFrequency(list) {\n    const frequencyDict = {};\n    list.forEach(item => {\n        if (frequencyDict[item]) {\n            frequencyDict[item]++;\n        } else {\n            frequencyDict[item] = 1;\n        }\n    });\n    return frequencyDict;\n}\n```"
  },
  {
    "task": "Create a list of integers and replace all negative numbers with zero.",
    "code": "```javascript\nlet numbers = [4, -1, 7, -3, 0, 5, -8];\nlet updatedNumbers = numbers.map(num => num < 0 ? 0 : num);\n```"
  },
  {
    "task": "Write a function that returns the first n elements of a list.",
    "code": "```javascript\nfunction firstNElements(list, n) {\n    return list.slice(0, n);\n}\n```"
  },
  {
    "task": "Generate a list of strings and join them into a single string with spaces.",
    "code": "```javascript\nconst stringList = ['Hello', 'world', 'this', 'is', 'a', 'test'];\nconst joinedString = stringList.join(' ');\nconsole.log(joinedString);\n```"
  },
  {
    "task": "Create a list of lists and find the sum of each inner list.",
    "code": "```javascript\nconst listOfLists = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\n\nconst sums = listOfLists.map(innerList => innerList.reduce((sum, num) => sum + num, 0));\n\nconsole.log(sums);\n```"
  },
  {
    "task": "Write a function that finds the second largest number in a list.",
    "code": "```javascript\nfunction secondLargest(numbers) {\n    if (numbers.length < 2) return null;\n    let first = -Infinity, second = -Infinity;\n\n    for (let number of numbers) {\n        if (number > first) {\n            second = first;\n            first = number;\n        } else if (number > second && number !== first) {\n            second = number;\n        }\n    }\n    return second;\n}\n```"
  },
  {
    "task": "Generate a list of numbers and remove the duplicates while maintaining order.",
    "code": "```javascript\nfunction removeDuplicates(numbers) {\n    let uniqueNumbers = [];\n    let seen = new Set();\n\n    for (let number of numbers) {\n        if (!seen.has(number)) {\n            uniqueNumbers.push(number);\n            seen.add(number);\n        }\n    }\n    return uniqueNumbers;\n}\n\n// Example usage:\nlet numbers = [1, 2, 2, 3, 4, 4, 5];\nlet result = removeDuplicates(numbers);\nconsole.log(result); // Output: [1, 2, 3, 4, 5]\n```"
  },
  {
    "task": "Create a list of integers and partition it into two lists: one with numbers above the average and one below.",
    "code": "```javascript\nlet numbers = [10, 20, 30, 40, 50];\nlet sum = numbers.reduce((acc, val) => acc + val, 0);\nlet average = sum / numbers.length;\n\nlet aboveAverage = numbers.filter(num => num > average);\nlet belowAverage = numbers.filter(num => num < average);\n\nconsole.log('Above Average:', aboveAverage);\nconsole.log('Below Average:', belowAverage);\n```"
  },
  {
    "task": "Write a program to find the longest increasing subsequence in a list of numbers.",
    "code": "```javascript\nfunction longestIncreasingSubsequence(arr) {\n    if (arr.length === 0) return [];\n    \n    const lengths = Array(arr.length).fill(1);\n    const previous = Array(arr.length).fill(-1);\n    \n    for (let i = 1; i < arr.length; i++) {\n        for (let j = 0; j < i; j++) {\n            if (arr[i] > arr[j] && lengths[i] < lengths[j] + 1) {\n                lengths[i] = lengths[j] + 1;\n                previous[i] = j;\n            }\n        }\n    }\n\n    let maxLength = 0;\n    let index = -1;\n    for (let i = 0; i < lengths.length; i++) {\n        if (lengths[i] > maxLength) {\n            maxLength = lengths[i];\n            index = i;\n        }\n    }\n\n    const subsequence = [];\n    while (index !== -1) {\n        subsequence.unshift(arr[index]);\n        index = previous[index];\n    }\n    \n    return subsequence;\n}\n\n// Example usage:\n// const numbers = [10, 9, 2, 5, 3, 7, 101, 18];\n// console.log(longestIncreasingSubsequence(numbers)); // Output: [2, 3, 7, 101]\n```"
  },
  {
    "task": "Implement a function to zip two lists into a single list of tuples.",
    "code": "```javascript\nfunction zipLists(list1, list2) {\n    const length = Math.min(list1.length, list2.length);\n    const zippedList = [];\n    for (let i = 0; i < length; i++) {\n        zippedList.push([list1[i], list2[i]]);\n    }\n    return zippedList;\n}\n```"
  },
  {
    "task": "Create a list of characters and count the vowels.",
    "code": "```javascript\nconst characters = ['a', 'b', 'c', 'e', 'i', 'o', 'u', 'x', 'y', 'z'];\nconst vowels = ['a', 'e', 'i', 'o', 'u'];\nlet vowelCount = 0;\n\ncharacters.forEach(char => {\n  if (vowels.includes(char)) {\n    vowelCount++;\n  }\n});\n\nconsole.log(vowelCount);\n```"
  },
  {
    "task": "Write a function that returns the last n elements of a list.",
    "code": "```javascript\nfunction getLastElements(list, n) {\n    return list.slice(-n);\n}\n```"
  },
  {
    "task": "Generate a list of numbers and split it into two lists: one with positive numbers and one with negative numbers.",
    "code": "```javascript\nconst numbers = [3, -1, 0, 5, -7, 8, -2];\nconst positiveNumbers = [];\nconst negativeNumbers = [];\n\nnumbers.forEach(number => {\n  if (number > 0) {\n    positiveNumbers.push(number);\n  } else if (number < 0) {\n    negativeNumbers.push(number);\n  }\n});\n\nconsole.log('Positive Numbers:', positiveNumbers);\nconsole.log('Negative Numbers:', negativeNumbers);\n```"
  },
  {
    "task": "Create a list of random integers and find the mode.",
    "code": "```javascript\nfunction getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nfunction findMode(arr) {\n    const frequencyMap = {};\n    let maxFreq = 0;\n    let mode = [];\n\n    arr.forEach((num) => {\n        frequencyMap[num] = (frequencyMap[num] || 0) + 1;\n        if (frequencyMap[num] > maxFreq) {\n            maxFreq = frequencyMap[num];\n        }\n    });\n\n    for (const num in frequencyMap) {\n        if (frequencyMap[num] === maxFreq) {\n            mode.push(Number(num));\n        }\n    }\n\n    return mode;\n}\n\nconst list = Array.from({ length: 10 }, () => getRandomInt(1, 10));\nconst mode = findMode(list);\nconsole.log('List:', list);\nconsole.log('Mode:', mode);\n```"
  },
  {
    "task": "Write a program to find the shortest path in a grid using a list to represent the path.",
    "code": "```javascript\nfunction shortestPath(grid, start, end) {\n    const rows = grid.length;\n    const cols = grid[0].length;\n    const directions = [[1, 0], [-1, 0], [0, 1], [0, -1]];\n    const queue = [[start[0], start[1], []]];\n    const visited = new Set();\n    visited.add(start[0] + ',' + start[1]);\n\n    while (queue.length > 0) {\n        const [x, y, path] = queue.shift();\n        const newPath = [...path, [x, y]];\n        if (x === end[0] && y === end[1]) {\n            return newPath;\n        }\n        for (const [dx, dy] of directions) {\n            const newX = x + dx;\n            const newY = y + dy;\n            if (newX >= 0 && newY >= 0 && newX < rows && newY < cols && grid[newX][newY] === 0 && !visited.has(newX + ',' + newY)) {\n                queue.push([newX, newY, newPath]);\n                visited.add(newX + ',' + newY);\n            }\n        }\n    }\n    return null; // Return null if no path is found\n}\n\n// Example usage:\nconst grid = [\n    [0, 0, 0, 1],\n    [0, 1, 0, 1],\n    [0, 0, 0, 0],\n    [1, 1, 0, 0]\n];\nconst start = [0, 0];\nconst end = [2, 3];\nconsole.log(shortestPath(grid, start, end));\n```"
  },
  {
    "task": "Implement a function that takes a list and returns a list with elements doubled.",
    "code": "```javascript\nfunction doubleElements(list) {\n    return list.map(element => element * 2);\n}\n```"
  },
  {
    "task": "Create a list of integers and sort them in descending order.",
    "code": "```javascript\nlet numbers = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5];\nnumbers.sort((a, b) => b - a);\n```"
  },
  {
    "task": "Write a function that takes a list of intervals and merges overlapping intervals.",
    "code": "```javascript\nfunction mergeIntervals(intervals) {\n  if (!intervals.length) return [];\n\n  intervals.sort((a, b) => a[0] - b[0]);\n  const merged = [intervals[0]];\n\n  for (let i = 1; i < intervals.length; i++) {\n    const lastMerged = merged[merged.length - 1];\n    const current = intervals[i];\n\n    if (current[0] <= lastMerged[1]) {\n      lastMerged[1] = Math.max(lastMerged[1], current[1]);\n    } else {\n      merged.push(current);\n    }\n  }\n\n  return merged;\n}\n```"
  },
  {
    "task": "Generate a list of random numbers and find the range (difference between max and min).",
    "code": "```javascript\nfunction getRandomList(size, min, max) {\n    return Array.from({ length: size }, () => Math.floor(Math.random() * (max - min + 1)) + min);\n}\n\nfunction findRange(numbers) {\n    const minNum = Math.min(...numbers);\n    const maxNum = Math.max(...numbers);\n    return maxNum - minNum;\n}\n\nconst randomNumbers = getRandomList(10, 1, 100);\nconst range = findRange(randomNumbers);\n\nconsole.log('Random Numbers:', randomNumbers);\nconsole.log('Range:', range);\n```"
  },
  {
    "task": "Create a list of strings and remove any that are palindromes.",
    "code": "```javascript\nconst strings = [\"radar\", \"hello\", \"level\", \"world\", \"deified\", \"example\"];\n\nconst isPalindrome = (str) => str === str.split('').reverse().join('');\n\nconst filteredStrings = strings.filter(str => !isPalindrome(str));\n\nconsole.log(filteredStrings);\n```"
  },
  {
    "task": "Write a program to cyclically permute the elements of a list.",
    "code": "```javascript\nfunction cyclicallyPermute(list) {\n    if (list.length === 0) return list;\n    const lastElement = list.pop();\n    list.unshift(lastElement);\n    return list;\n}\n\n// Example usage:\nlet myList = [1, 2, 3, 4, 5];\nmyList = cyclicallyPermute(myList);\nconsole.log(myList); // Output will be [5, 1, 2, 3, 4]\n```"
  },
  {
    "task": "Implement a function to create a list of cumulative sums from a list of numbers.",
    "code": "```javascript\nfunction cumulativeSums(numbers) {\n    let result = [];\n    let sum = 0;\n    for (let number of numbers) {\n        sum += number;\n        result.push(sum);\n    }\n    return result;\n}\n```"
  },
  {
    "task": "Create a list of numbers and shift all zeros to the end.",
    "code": "```javascript\nfunction shiftZerosToEnd(numbers) {\n    let nonZeroNumbers = numbers.filter(num => num !== 0);\n    let zeroCount = numbers.length - nonZeroNumbers.length;\n    return nonZeroNumbers.concat(new Array(zeroCount).fill(0));\n}\n\nlet numbers = [1, 0, 2, 0, 3, 4, 0, 5];\nlet result = shiftZerosToEnd(numbers);\nconsole.log(result); // Output: [1, 2, 3, 4, 5, 0, 0, 0]\n```"
  },
  {
    "task": "Write a program to simulate a queue using a list.",
    "code": "```javascript\nclass Queue {\n    constructor() {\n        this.items = [];\n    }\n    \n    enqueue(element) {\n        this.items.push(element);\n    }\n    \n    dequeue() {\n        if (this.isEmpty()) {\n            return \"Queue is empty\";\n        }\n        return this.items.shift();\n    }\n    \n    isEmpty() {\n        return this.items.length === 0;\n    }\n    \n    front() {\n        if (this.isEmpty()) {\n            return \"Queue is empty\";\n        }\n        return this.items[0];\n    }\n    \n    size() {\n        return this.items.length;\n    }\n    \n    printQueue() {\n        return this.items.join(' ');\n    }\n}\n\n// Example usage\nconst queue = new Queue();\nqueue.enqueue(10);\nqueue.enqueue(20);\nqueue.enqueue(30);\nconsole.log(queue.printQueue()); // 10 20 30\nconsole.log(queue.dequeue());    // 10\nconsole.log(queue.front());      // 20\nconsole.log(queue.printQueue()); // 20 30\n```"
  },
  {
    "task": "Generate a list of numbers and identify all prime numbers.",
    "code": "```javascript\nfunction isPrime(num) {\n    if (num <= 1) return false;\n    if (num <= 3) return true;\n    if (num % 2 === 0 || num % 3 === 0) return false;\n    for (let i = 5; i * i <= num; i += 6) {\n        if (num % i === 0 || num % (i + 2) === 0) return false;\n    }\n    return true;\n}\n\nfunction listPrimes(limit) {\n    let numbers = Array.from({ length: limit }, (_, i) => i);\n    let primes = numbers.filter(isPrime);\n    return primes;\n}\n\nlet primeNumbers = listPrimes(100);\nconsole.log(primeNumbers);\n```"
  },
  {
    "task": "Create a list of strings and group them by their starting letter.",
    "code": "```javascript\nconst strings = [\"apple\", \"banana\", \"apricot\", \"blueberry\", \"cherry\", \"avocado\"];\nconst groupedByFirstLetter = {};\n\nstrings.forEach(str => {\n    const firstLetter = str[0];\n    if (!groupedByFirstLetter[firstLetter]) {\n        groupedByFirstLetter[firstLetter] = [];\n    }\n    groupedByFirstLetter[firstLetter].push(str);\n});\n\nconsole.log(groupedByFirstLetter);\n```"
  },
  {
    "task": "Write a function that takes a list and returns a new list with all elements squared.",
    "code": "```javascript\nfunction squareList(list) {\n    return list.map(element => element * element);\n}\n```"
  },
  {
    "task": "Generate a list of timestamps and find the time difference between consecutive elements.",
    "code": "```javascript\nfunction generateTimestampsAndFindDifferences() {\n    const timestamps = [];\n    const differences = [];\n    const now = Date.now();\n\n    // Generate a list of timestamps (e.g., every second for 10 seconds)\n    for (let i = 0; i < 10; i++) {\n        timestamps.push(new Date(now + i * 1000));\n    }\n\n    // Find the time difference between consecutive elements\n    for (let i = 1; i < timestamps.length; i++) {\n        differences.push(timestamps[i] - timestamps[i - 1]);\n    }\n\n    return { timestamps, differences };\n}\n\nconsole.log(generateTimestampsAndFindDifferences());\n```"
  },
  {
    "task": "Create a list of numbers and rotate it such that the smallest number is first.",
    "code": "```javascript\nfunction rotateListToSmallestFirst(numbers) {\n  if (numbers.length === 0) return numbers;\n  const minIndex = numbers.indexOf(Math.min(...numbers));\n  return numbers.slice(minIndex).concat(numbers.slice(0, minIndex));\n}\n\nconst numbers = [5, 3, 8, 1, 4];\nconst rotatedList = rotateListToSmallestFirst(numbers);\nconsole.log(rotatedList);\n```"
  },
  {
    "task": "Write a program to find all unique pairs in a list that sum up to a specific target.",
    "code": "```javascript\nfunction findUniquePairs(nums, target) {\n    const pairs = [];\n    const seen = new Set();\n    const output = new Set();\n\n    for (let num of nums) {\n        const complement = target - num;\n        if (seen.has(complement)) {\n            const pair = [Math.min(num, complement), Math.max(num, complement)];\n            output.add(pair.toString());\n        }\n        seen.add(num);\n    }\n\n    for (let pairString of output) {\n        pairs.push(pairString.split(',').map(Number));\n    }\n    \n    return pairs;\n}\n\n// Example usage:\nconst nums = [1, 2, 3, 4, 3, 5, 6, 7, 8, 9];\nconst target = 10;\nconsole.log(findUniquePairs(nums, target));\n```"
  },
  {
    "task": "Implement a function that returns true if a list contains a cycle.",
    "code": "```javascript\nfunction hasCycle(head) {\n    let slow = head;\n    let fast = head;\n    while (fast !== null && fast.next !== null) {\n        slow = slow.next;\n        fast = fast.next.next;\n        if (slow === fast) {\n            return true;\n        }\n    }\n    return false;\n}\n```"
  },
  {
    "task": "Create a list of numbers and find the contiguous subarray with the maximum sum.",
    "code": "```javascript\nfunction maxSubArray(nums) {\n    let maxSoFar = nums[0];\n    let maxEndingHere = nums[0];\n    \n    for (let i = 1; i < nums.length; i++) {\n        maxEndingHere = Math.max(nums[i], maxEndingHere + nums[i]);\n        maxSoFar = Math.max(maxSoFar, maxEndingHere);\n    }\n    \n    return maxSoFar;\n}\n\nconst numbers = [-2, 1, -3, 4, -1, 2, 1, -5, 4];\nconst maxSum = maxSubArray(numbers);\nconsole.log(maxSum);\n```"
  },
  {
    "task": "Write a function that takes a list and a number, and finds two numbers in the list that sum to the given number.",
    "code": "```javascript\nfunction findTwoNumbers(list, target) {\n    const seenNumbers = new Set();\n    for (const num of list) {\n        const complement = target - num;\n        if (seenNumbers.has(complement)) {\n            return [complement, num];\n        }\n        seenNumbers.add(num);\n    }\n    return null;\n}\n```"
  },
  {
    "task": "Generate a list of even numbers and filter out those that are greater than a specific value.",
    "code": "```javascript\nfunction filterEvenNumbers(maxValue) {\n    const numbers = Array.from({ length: maxValue }, (_, i) => i + 1);\n    const evenNumbers = numbers.filter(num => num % 2 === 0);\n    const filteredNumbers = evenNumbers.filter(num => num <= maxValue);\n    return filteredNumbers;\n}\n\nconst maxValue = 10; // Specify the value here\nconst result = filterEvenNumbers(maxValue);\nconsole.log(result);\n```"
  },
  {
    "task": "Create a list of characters and reverse the vowels only.",
    "code": "```javascript\nfunction reverseVowels(s) {\n    const vowels = new Set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']);\n    let chars = s.split('');\n    let i = 0, j = chars.length - 1;\n    \n    while (i < j) {\n        while (i < j && !vowels.has(chars[i])) i++;\n        while (i < j && !vowels.has(chars[j])) j--;\n        \n        if (i < j) {\n            [chars[i], chars[j]] = [chars[j], chars[i]];\n            i++;\n            j--;\n        }\n    }\n    \n    return chars.join('');\n}\n\n// Example usage:\nconst input = \"hello world\";\nconst result = reverseVowels(input);\nconsole.log(result); // \"holle werld\"\n```"
  },
  {
    "task": "Write a program to find all permutations of a list of elements.",
    "code": "```javascript\nfunction permute(nums) {\n    const result = [];\n    \n    function backtrack(path, options) {\n        if (path.length === nums.length) {\n            result.push([...path]);\n            return;\n        }\n        \n        for (let i = 0; i < options.length; i++) {\n            path.push(options[i]);\n            backtrack(path, options.slice(0, i).concat(options.slice(i + 1)));\n            path.pop();\n        }\n    }\n    \n    backtrack([], nums);\n    return result;\n}\n\nconst elements = [1, 2, 3];\nconst permutations = permute(elements);\nconsole.log(permutations);\n```"
  },
  {
    "task": "Implement a function that takes a list and returns the most frequently occurring element.",
    "code": "```javascript\nfunction mostFrequentElement(list) {\n    const frequencyMap = {};\n    let maxCount = 0;\n    let mostFrequent;\n\n    for (const element of list) {\n        frequencyMap[element] = (frequencyMap[element] || 0) + 1;\n        if (frequencyMap[element] > maxCount) {\n            maxCount = frequencyMap[element];\n            mostFrequent = element;\n        }\n    }\n\n    return mostFrequent;\n}\n```"
  },
  {
    "task": "Create a list of numbers and calculate the variance.",
    "code": "```javascript\nconst numbers = [10, 20, 30, 40, 50];\n\nconst mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n\nconst variance = numbers.reduce((acc, val) => acc + Math.pow(val - mean, 2), 0) / numbers.length;\n\nconsole.log(variance);\n```"
  },
  {
    "task": "Write a function to concatenate a list of lists into a single list.",
    "code": "```javascript\nfunction concatenateLists(listOfLists) {\n    return listOfLists.reduce((acc, curr) => acc.concat(curr), []);\n}\n```"
  },
  {
    "task": "Generate a list of numbers and replace each element with the product of all other elements.",
    "code": "```javascript\nfunction replaceWithProductOfOthers(arr) {\n    const n = arr.length;\n    if (n === 0) return arr;\n\n    const leftProducts = new Array(n).fill(1);\n    const rightProducts = new Array(n).fill(1);\n    const result = new Array(n);\n\n    for (let i = 1; i < n; i++) {\n        leftProducts[i] = leftProducts[i - 1] * arr[i - 1];\n    }\n\n    for (let i = n - 2; i >= 0; i--) {\n        rightProducts[i] = rightProducts[i + 1] * arr[i + 1];\n    }\n\n    for (let i = 0; i < n; i++) {\n        result[i] = leftProducts[i] * rightProducts[i];\n    }\n\n    return result;\n}\n\n// Example usage:\nconst numbers = [1, 2, 3, 4];\nconst result = replaceWithProductOfOthers(numbers);\nconsole.log(result); // [24, 12, 8, 6]\n```"
  },
  {
    "task": "Create a list of strings and find the common prefix.",
    "code": "```javascript\nfunction findCommonPrefix(strings) {\n    if (strings.length === 0) return '';\n\n    let prefix = strings[0];\n\n    for (let i = 1; i < strings.length; i++) {\n        while (strings[i].indexOf(prefix) !== 0) {\n            prefix = prefix.substring(0, prefix.length - 1);\n            if (prefix === '') return '';\n        }\n    }\n\n    return prefix;\n}\n\nlet strings = [\"flower\", \"flow\", \"flight\"];\nlet commonPrefix = findCommonPrefix(strings);\nconsole.log(commonPrefix);\n```"
  },
  {
    "task": "Write a program to partition a list into two lists based on a predicate function.",
    "code": "```javascript\nfunction partitionList(list, predicate) {\n    const truthyList = [];\n    const falsyList = [];\n    \n    list.forEach(item => {\n        if (predicate(item)) {\n            truthyList.push(item);\n        } else {\n            falsyList.push(item);\n        }\n    });\n    \n    return [truthyList, falsyList];\n}\n\n// Example usage:\nconst numbers = [1, 2, 3, 4, 5, 6];\nconst isEven = num => num % 2 === 0;\nconst [evens, odds] = partitionList(numbers, isEven);\n\nconsole.log(evens); // [2, 4, 6]\nconsole.log(odds);  // [1, 3, 5]\n```"
  },
  {
    "task": "Implement a function to find the kth smallest element in a list.",
    "code": "```javascript\nfunction findKthSmallest(arr, k) {\n    if (k < 1 || k > arr.length) {\n        throw new Error(\"k is out of bounds\");\n    }\n    arr.sort((a, b) => a - b);\n    return arr[k - 1];\n}\n```"
  },
  {
    "task": "Create a list of integers and find the length of the longest contiguous sequence.",
    "code": "```javascript\nfunction longestContiguousSequence(arr) {\n    if (arr.length === 0) return 0;\n\n    let maxLen = 1;\n    let currentLen = 1;\n\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] === arr[i - 1] + 1) {\n            currentLen++;\n        } else {\n            maxLen = Math.max(maxLen, currentLen);\n            currentLen = 1;\n        }\n    }\n\n    return Math.max(maxLen, currentLen);\n}\n\nconst list = [1, 2, 2, 3, 4, 5, 7, 8, 9, 10];\nconst longestSequence = longestContiguousSequence(list);\nconsole.log(longestSequence);\n```"
  },
  {
    "task": "Write a function that rotates elements in a list while maintaining the relative order of non-rotated elements.",
    "code": "```javascript\nfunction rotateList(arr, k) {\n    if (!Array.isArray(arr) || arr.length === 0 || k <= 0) return arr;\n    const n = arr.length;\n    k = k % n;\n    if (k === 0) return arr;\n    return arr.slice(n - k).concat(arr.slice(0, n - k));\n}\n```"
  },
  {
    "task": "Generate a list of random numbers and sort them while maintaining the original index positions.",
    "code": "```javascript\nfunction generateAndSortList(length) {\n    const list = Array.from({ length }, () => Math.random());\n    const indexedList = list.map((value, index) => ({ value, index }));\n\n    indexedList.sort((a, b) => a.value - b.value);\n\n    const sortedList = indexedList.map(item => item.value);\n\n    return { originalList: list, sortedList };\n}\n\nconst result = generateAndSortList(10);\nconsole.log(result);\n```"
  },
  {
    "task": "Create a list of numbers and find all subsets that sum up to a specific target.",
    "code": "```javascript\nfunction findSubsets(nums, target) {\n    const result = [];\n\n    function backtrack(start, currentSubset, currentSum) {\n        if (currentSum === target) {\n            result.push([...currentSubset]);\n            return;\n        }\n\n        for (let i = start; i < nums.length; i++) {\n            if (currentSum + nums[i] > target) continue;\n            currentSubset.push(nums[i]);\n            backtrack(i + 1, currentSubset, currentSum + nums[i]);\n            currentSubset.pop();\n        }\n    }\n\n    backtrack(0, [], 0);\n    return result;\n}\n\n// Example usage:\nconst numbers = [2, 3, 5, 7];\nconst targetSum = 10;\nconsole.log(findSubsets(numbers, targetSum));\n```"
  },
  {
    "task": "Write a program to simulate a stack using a list.",
    "code": "```javascript\nclass Stack {\n    constructor() {\n        this.items = [];\n    }\n\n    push(element) {\n        this.items.push(element);\n    }\n\n    pop() {\n        if (this.isEmpty()) {\n            return \"Underflow\";\n        }\n        return this.items.pop();\n    }\n\n    peek() {\n        if (this.isEmpty()) {\n            return \"No elements in Stack\";\n        }\n        return this.items[this.items.length - 1];\n    }\n\n    isEmpty() {\n        return this.items.length === 0;\n    }\n\n    printStack() {\n        return this.items.join(' ');\n    }\n}\n\n// Example usage:\nlet stack = new Stack();\nstack.push(10);\nstack.push(20);\nstack.push(30);\nconsole.log(stack.printStack()); // Output: 10 20 30\nconsole.log(stack.pop()); // Output: 30\nconsole.log(stack.printStack()); // Output: 10 20\n```"
  }
]