[
  {
    "task": "Create a base class for a vehicle with methods for speed and fuel efficiency, then derive a car class that overrides these methods to provide specific implementations.",
    "code": "```javascript\nclass Vehicle {\n  speed() {\n    return \"Generic vehicle speed\";\n  }\n  \n  fuelEfficiency() {\n    return \"Generic vehicle fuel efficiency\";\n  }\n}\n\nclass Car extends Vehicle {\n  speed() {\n    return \"Car specific speed\";\n  }\n  \n  fuelEfficiency() {\n    return \"Car specific fuel efficiency\";\n  }\n}\n\n// Example usage\nconst myCar = new Car();\nconsole.log(myCar.speed());\nconsole.log(myCar.fuelEfficiency());\n```"
  },
  {
    "task": "Design a base class for a multimedia file with properties like duration and format, then extend it with a video class that includes resolution and frame rate.",
    "code": "```javascript\nclass MultimediaFile {\n    constructor(duration, format) {\n        this.duration = duration;\n        this.format = format;\n    }\n}\n\nclass VideoFile extends MultimediaFile {\n    constructor(duration, format, resolution, frameRate) {\n        super(duration, format);\n        this.resolution = resolution;\n        this.frameRate = frameRate;\n    }\n}\n```"
  },
  {
    "task": "Develop a superclass for bank accounts with methods for deposit and withdrawal, then create a savings account subclass that overrides the withdrawal method to incorporate interest deductions.",
    "code": "```javascript\nclass BankAccount {\n  constructor(balance) {\n    this.balance = balance;\n  }\n\n  deposit(amount) {\n    if (amount > 0) {\n      this.balance += amount;\n    }\n  }\n\n  withdraw(amount) {\n    if (amount > 0 && amount <= this.balance) {\n      this.balance -= amount;\n    }\n  }\n}\n\nclass SavingsAccount extends BankAccount {\n  constructor(balance, interestRate) {\n    super(balance);\n    this.interestRate = interestRate;\n  }\n\n  withdraw(amount) {\n    let interest = amount * this.interestRate;\n    let totalAmount = amount + interest;\n    if (totalAmount <= this.balance) {\n      this.balance -= totalAmount;\n    }\n  }\n}\n```"
  },
  {
    "task": "Implement a base class for a geometric shape with methods to calculate area and perimeter, then create a rectangle subclass that provides specific calculations for these methods.",
    "code": "```javascript\nclass Shape {\n  constructor() {}\n\n  calculateArea() {\n    throw new Error('Method calculateArea() must be implemented.');\n  }\n\n  calculatePerimeter() {\n    throw new Error('Method calculatePerimeter() must be implemented.');\n  }\n}\n\nclass Rectangle extends Shape {\n  constructor(width, height) {\n    super();\n    this.width = width;\n    this.height = height;\n  }\n\n  calculateArea() {\n    return this.width * this.height;\n  }\n\n  calculatePerimeter() {\n    return 2 * (this.width + this.height);\n  }\n}\n\n// Example usage:\nconst rect = new Rectangle(5, 10);\nconsole.log('Area:', rect.calculateArea());\nconsole.log('Perimeter:', rect.calculatePerimeter());\n```"
  },
  {
    "task": "Construct a parent class for employees with a method to calculate salary, then derive a manager class that overrides this method to include bonuses.",
    "code": "```javascript\nclass Employee {\n    constructor(name, baseSalary) {\n        this.name = name;\n        this.baseSalary = baseSalary;\n    }\n\n    calculateSalary() {\n        return this.baseSalary;\n    }\n}\n\nclass Manager extends Employee {\n    constructor(name, baseSalary, bonus) {\n        super(name, baseSalary);\n        this.bonus = bonus;\n    }\n\n    calculateSalary() {\n        return this.baseSalary + this.bonus;\n    }\n}\n\n// Example usage:\nconst employee = new Employee('John Doe', 50000);\nconsole.log(employee.calculateSalary()); // 50000\n\nconst manager = new Manager('Jane Smith', 70000, 10000);\nconsole.log(manager.calculateSalary()); // 80000\n```"
  },
  {
    "task": "Set up a base class for a library item with properties like title and author, and extend it with a book subclass that adds a number of pages property.",
    "code": "```javascript\nclass LibraryItem {\n  constructor(title, author) {\n    this.title = title;\n    this.author = author;\n  }\n}\n\nclass Book extends LibraryItem {\n  constructor(title, author, numberOfPages) {\n    super(title, author);\n    this.numberOfPages = numberOfPages;\n  }\n}\n```"
  },
  {
    "task": "Create a foundation class for an electronic device with a method to turn on and off, and derive a smartphone class that overrides the turn on method to require a passcode.",
    "code": "```javascript\nclass ElectronicDevice {\n    constructor() {\n        this.isOn = false;\n    }\n\n    turnOn() {\n        this.isOn = true;\n        console.log(\"Device is turned on.\");\n    }\n\n    turnOff() {\n        this.isOn = false;\n        console.log(\"Device is turned off.\");\n    }\n}\n\nclass Smartphone extends ElectronicDevice {\n    constructor(passcode) {\n        super();\n        this.passcode = passcode;\n    }\n\n    turnOn(enteredPasscode) {\n        if (enteredPasscode === this.passcode) {\n            this.isOn = true;\n            console.log(\"Smartphone is turned on.\");\n        } else {\n            console.log(\"Incorrect passcode. Smartphone remains off.\");\n        }\n    }\n}\n```"
  },
  {
    "task": "Design a base class for an animal with a method to make a sound, then create a dog subclass that overrides this method to bark.",
    "code": "```javascript\nclass Animal {\n    makeSound() {\n        console.log(\"Some generic sound\");\n    }\n}\n\nclass Dog extends Animal {\n    makeSound() {\n        console.log(\"Bark\");\n    }\n}\n\n// Example usage:\nconst myDog = new Dog();\nmyDog.makeSound(); // Output: Bark\n```"
  },
  {
    "task": "Develop a superclass for meals with a method to calculate calories, then create a dessert subclass that overrides it to add extra sugar calories.",
    "code": "```javascript\nclass Meal {\n    constructor(calories) {\n        this.calories = calories;\n    }\n\n    calculateCalories() {\n        return this.calories;\n    }\n}\n\nclass Dessert extends Meal {\n    constructor(calories, sugarCalories) {\n        super(calories);\n        this.sugarCalories = sugarCalories;\n    }\n\n    calculateCalories() {\n        return super.calculateCalories() + this.sugarCalories;\n    }\n}\n\n// Usage example\nconst dessert = new Dessert(200, 100);\nconsole.log(dessert.calculateCalories()); // Outputs: 300\n```"
  },
  {
    "task": "Implement a base class for a transportation mode with a method to calculate travel time, then extend it with a plane subclass that overrides the method to calculate based on speed.",
    "code": "```javascript\nclass TransportationMode {\n    constructor(distance) {\n        this.distance = distance;\n    }\n\n    calculateTravelTime() {\n        console.log(\"Travel time calculation not implemented.\");\n    }\n}\n\nclass Plane extends TransportationMode {\n    constructor(distance, speed) {\n        super(distance);\n        this.speed = speed;\n    }\n\n    calculateTravelTime() {\n        return this.distance / this.speed;\n    }\n}\n\n// Example usage:\nconst plane = new Plane(1000, 500);\nconsole.log(plane.calculateTravelTime()); // Outputs: 2\n```"
  },
  {
    "task": "Construct a parent class for a musical instrument with a method to play sound, then derive a piano class that overrides the method to play specific notes.",
    "code": "```javascript\nclass MusicalInstrument {\n    playSound() {\n        console.log(\"Playing sound from the instrument.\");\n    }\n}\n\nclass Piano extends MusicalInstrument {\n    playSound() {\n        console.log(\"Playing specific piano notes.\");\n    }\n}\n\n// Example usage:\nconst myInstrument = new MusicalInstrument();\nmyInstrument.playSound();\n\nconst myPiano = new Piano();\nmyPiano.playSound();\n```"
  },
  {
    "task": "Set up a base class for a user account with a method to reset password, and extend it with an admin account subclass that overrides it to include security questions.",
    "code": "```javascript\nclass UserAccount {\n    constructor(username, password) {\n        this.username = username;\n        this.password = password;\n    }\n\n    resetPassword(newPassword) {\n        this.password = newPassword;\n        console.log('Password has been reset.');\n    }\n}\n\nclass AdminAccount extends UserAccount {\n    constructor(username, password, securityQuestions) {\n        super(username, password);\n        this.securityQuestions = securityQuestions;\n    }\n\n    resetPassword(newPassword, answers) {\n        if (this.verifySecurityQuestions(answers)) {\n            super.resetPassword(newPassword);\n        } else {\n            console.log('Security questions verification failed.');\n        }\n    }\n\n    verifySecurityQuestions(answers) {\n        // Simple verification logic (for illustration purposes)\n        return JSON.stringify(this.securityQuestions) === JSON.stringify(answers);\n    }\n}\n\n// Example usage\nconst user = new UserAccount('user123', 'pass123');\nuser.resetPassword('newpass123');\n\nconst admin = new AdminAccount('admin123', 'adminpass123', ['Answer1', 'Answer2']);\nadmin.resetPassword('newadminpass123', ['Answer1', 'Answer2']);\n```"
  },
  {
    "task": "Create a foundational class for a beverage with properties like volume and temperature, and derive a coffee class that overrides the temperature property to be hot.",
    "code": "```javascript\nclass Beverage {\n    constructor(volume, temperature) {\n        this.volume = volume;\n        this.temperature = temperature;\n    }\n}\n\nclass Coffee extends Beverage {\n    constructor(volume) {\n        super(volume, 'hot');\n    }\n}\n\n// Example usage:\nconst myDrink = new Coffee(250);\nconsole.log(myDrink.volume); // 250\nconsole.log(myDrink.temperature); // 'hot'\n```"
  },
  {
    "task": "Design a base class for a service appointment with a method to schedule time, then create a doctor appointment subclass that overrides this method to include consultation duration.",
    "code": "```javascript\nclass ServiceAppointment {\n    constructor(date) {\n        this.date = date;\n    }\n\n    scheduleTime(time) {\n        this.time = time;\n        console.log(`Service scheduled on ${this.date} at ${this.time}.`);\n    }\n}\n\nclass DoctorAppointment extends ServiceAppointment {\n    constructor(date, consultationDuration) {\n        super(date);\n        this.consultationDuration = consultationDuration;\n    }\n\n    scheduleTime(time) {\n        this.time = time;\n        console.log(`Doctor appointment scheduled on ${this.date} at ${this.time} for ${this.consultationDuration} minutes.`);\n    }\n}\n\n// Example usage:\n// const appointment = new DoctorAppointment('2023-10-15', 30);\n// appointment.scheduleTime('10:00 AM');\n```"
  },
  {
    "task": "Develop a superclass for electronic gadgets with a method to calculate battery life, then extend it with a laptop class that overrides this method to consider usage patterns.",
    "code": "```javascript\nclass ElectronicGadget {\n  constructor(batteryCapacity) {\n    this.batteryCapacity = batteryCapacity; // in mAh\n  }\n  \n  calculateBatteryLife() {\n    // Calculate battery life in hours based on a fixed discharge rate\n    const dischargeRate = 100; // mAh per hour\n    return this.batteryCapacity / dischargeRate;\n  }\n}\n\nclass Laptop extends ElectronicGadget {\n  constructor(batteryCapacity, usagePattern) {\n    super(batteryCapacity);\n    this.usagePattern = usagePattern; // e.g., 'heavy', 'moderate', 'light'\n  }\n\n  calculateBatteryLife() {\n    let dischargeRate;\n    switch (this.usagePattern) {\n      case 'heavy':\n        dischargeRate = 200; // mAh per hour\n        break;\n      case 'moderate':\n        dischargeRate = 150; // mAh per hour\n        break;\n      case 'light':\n      default:\n        dischargeRate = 100; // mAh per hour\n        break;\n    }\n    return this.batteryCapacity / dischargeRate;\n  }\n}\n\n// Example usage:\nconst myGadget = new ElectronicGadget(5000);\nconsole.log(myGadget.calculateBatteryLife());\n\nconst myLaptop = new Laptop(5000, 'moderate');\nconsole.log(myLaptop.calculateBatteryLife());\n```"
  },
  {
    "task": "Implement a base class for a website component with a method to render content, then create a blog post subclass that overrides this method to include author information.",
    "code": "```javascript\nclass WebsiteComponent {\n    renderContent() {\n        return \"Rendering website component content.\";\n    }\n}\n\nclass BlogPost extends WebsiteComponent {\n    constructor(author) {\n        super();\n        this.author = author;\n    }\n\n    renderContent() {\n        return `Rendering blog post content. Author: ${this.author}`;\n    }\n}\n\n// Example usage\nconst baseComponent = new WebsiteComponent();\nconsole.log(baseComponent.renderContent());\n\nconst blogPost = new BlogPost(\"John Doe\");\nconsole.log(blogPost.renderContent());\n```"
  },
  {
    "task": "Construct a parent class for a recipe with methods for ingredients and instructions, then derive a cake recipe class that overrides these methods to add baking steps.",
    "code": "```javascript\nclass Recipe {\n    constructor() {\n        this.ingredientsList = [];\n        this.instructionsList = [];\n    }\n\n    ingredients() {\n        return this.ingredientsList.join(', ');\n    }\n\n    instructions() {\n        return this.instructionsList.join('. ');\n    }\n}\n\nclass CakeRecipe extends Recipe {\n    constructor() {\n        super();\n        this.ingredientsList = ['flour', 'sugar', 'eggs', 'butter'];\n        this.instructionsList = [\n            'Preheat the oven to 350 degrees F',\n            'Mix the ingredients',\n            'Pour the batter into a pan'\n        ];\n    }\n\n    instructions() {\n        return super.instructions() + '. Bake for 30 minutes';\n    }\n}\n\nconst cake = new CakeRecipe();\nconsole.log('Ingredients:', cake.ingredients());\nconsole.log('Instructions:', cake.instructions());\n```"
  },
  {
    "task": "Set up a base class for a plant with methods for sunlight and water needs, and extend it with a cactus subclass that overrides these methods to require less water.",
    "code": "```javascript\nclass Plant {\n    sunlightNeeds() {\n        return \"Requires regular sunlight.\";\n    }\n\n    waterNeeds() {\n        return \"Requires regular watering.\";\n    }\n}\n\nclass Cactus extends Plant {\n    waterNeeds() {\n        return \"Requires minimal watering.\";\n    }\n}\n\n// Example usage:\nlet genericPlant = new Plant();\nconsole.log(genericPlant.sunlightNeeds()); // \"Requires regular sunlight.\"\nconsole.log(genericPlant.waterNeeds());    // \"Requires regular watering.\"\n\nlet cactusPlant = new Cactus();\nconsole.log(cactusPlant.sunlightNeeds());  // \"Requires regular sunlight.\"\nconsole.log(cactusPlant.waterNeeds());     // \"Requires minimal watering.\"\n```"
  },
  {
    "task": "Create a foundational class for a building with properties like height and material, and derive a skyscraper class that overrides the height property to be significantly taller.",
    "code": "```javascript\nclass Building {\n  constructor(height, material) {\n    this.height = height;\n    this.material = material;\n  }\n}\n\nclass Skyscraper extends Building {\n  constructor(material) {\n    super(300, material); // Setting a default height of 300 for skyscrapers\n  }\n}\n\n// Example usage\nconst building = new Building(50, 'brick');\nconst skyscraper = new Skyscraper('steel');\nconsole.log(building.height); // 50\nconsole.log(skyscraper.height); // 300\n```"
  },
  {
    "task": "Design a base class for a payment method with a method to process transactions, then create a credit card subclass that overrides this method to include credit limits.",
    "code": "```javascript\nclass PaymentMethod {\n    processTransaction(amount) {\n        console.log(`Processing transaction of $${amount}`);\n    }\n}\n\nclass CreditCard extends PaymentMethod {\n    constructor(creditLimit) {\n        super();\n        this.creditLimit = creditLimit;\n    }\n\n    processTransaction(amount) {\n        if (amount > this.creditLimit) {\n            console.log(`Transaction denied. Amount exceeds credit limit of $${this.creditLimit}`);\n        } else {\n            console.log(`Processing credit card transaction of $${amount}`);\n        }\n    }\n}\n\n// Example usage:\nconst creditCard = new CreditCard(1000);\ncreditCard.processTransaction(500); // Processing credit card transaction of $500\ncreditCard.processTransaction(1500); // Transaction denied. Amount exceeds credit limit of $1000\n```"
  },
  {
    "task": "Develop a superclass for a computer program with methods for input and output, then extend it with a game subclass that overrides these methods to include player interactions.",
    "code": "```javascript\n// Superclass\nclass ComputerProgram {\n    input(data) {\n        console.log(`Input: ${data}`);\n    }\n\n    output(data) {\n        console.log(`Output: ${data}`);\n    }\n}\n\n// Subclass\nclass Game extends ComputerProgram {\n    input(data) {\n        console.log(`Player input: ${data}`);\n    }\n\n    output(data) {\n        console.log(`Game output: ${data}`);\n    }\n}\n\n// Example usage\nconst program = new ComputerProgram();\nprogram.input(\"Hello, World!\");\nprogram.output(\"Goodbye, World!\");\n\nconst game = new Game();\ngame.input(\"Move forward\");\ngame.output(\"You moved forward\");\n```"
  },
  {
    "task": "Implement a base class for a dining establishment with a method to calculate wait time, then create a fast food subclass that overrides this method to be shorter.",
    "code": "```javascript\nclass DiningEstablishment {\n  calculateWaitTime() {\n    return \"Wait time is approximately 30 minutes.\";\n  }\n}\n\nclass FastFood extends DiningEstablishment {\n  calculateWaitTime() {\n    return \"Wait time is approximately 5 minutes.\";\n  }\n}\n\n// Example usage:\nconst restaurant = new DiningEstablishment();\nconsole.log(restaurant.calculateWaitTime());\n\nconst fastFood = new FastFood();\nconsole.log(fastFood.calculateWaitTime());\n```"
  },
  {
    "task": "Construct a parent class for a social media profile with methods for posting and liking, then derive a business profile class that overrides these methods to include promotions.",
    "code": "```javascript\nclass SocialMediaProfile {\n    constructor(username) {\n        this.username = username;\n    }\n\n    post(content) {\n        console.log(`${this.username} posted: ${content}`);\n    }\n\n    like(postUsername) {\n        console.log(`${this.username} liked a post by ${postUsername}`);\n    }\n}\n\nclass BusinessProfile extends SocialMediaProfile {\n    constructor(username, businessName) {\n        super(username);\n        this.businessName = businessName;\n    }\n\n    post(content) {\n        console.log(`${this.businessName} (Business) posted: ${content} - Check out our latest promotions!`);\n    }\n\n    like(postUsername) {\n        console.log(`${this.businessName} (Business) liked a post by ${postUsername} - Stay tuned for our offers!`);\n    }\n}\n\n// Example usage:\nconst user = new SocialMediaProfile('user123');\nuser.post('Hello World!');\nuser.like('user456');\n\nconst business = new BusinessProfile('business123', 'TechCorp');\nbusiness.post('New Product Launch!');\nbusiness.like('user789');\n```"
  },
  {
    "task": "Set up a base class for an educational course with methods for syllabus and grading, and extend it with an online course subclass that overrides these methods for remote learning.",
    "code": "```javascript\nclass Course {\n    syllabus() {\n        return \"This is the standard course syllabus.\";\n    }\n\n    grading() {\n        return \"This is the standard grading policy.\";\n    }\n}\n\nclass OnlineCourse extends Course {\n    syllabus() {\n        return \"This is the online course syllabus.\";\n    }\n\n    grading() {\n        return \"This is the online course grading policy.\";\n    }\n}\n\n// Example usage:\nconst standardCourse = new Course();\nconsole.log(standardCourse.syllabus());\nconsole.log(standardCourse.grading());\n\nconst onlineCourse = new OnlineCourse();\nconsole.log(onlineCourse.syllabus());\nconsole.log(onlineCourse.grading());\n```"
  },
  {
    "task": "Create a foundational class for a sports team with properties like team name and coach, and derive a football team class that overrides the coach property with a specific person.",
    "code": "```javascript\nclass SportsTeam {\n    constructor(teamName, coach) {\n        this.teamName = teamName;\n        this.coach = coach;\n    }\n}\n\nclass FootballTeam extends SportsTeam {\n    constructor(teamName) {\n        super(teamName, 'Specific Person');\n    }\n}\n\n// Example usage:\nconst footballTeam = new FootballTeam('Eagles');\nconsole.log(footballTeam.teamName); // Eagles\nconsole.log(footballTeam.coach);    // Specific Person\n```"
  },
  {
    "task": "Design a base class for a document with methods for printing and saving, then create a PDF document subclass that overrides these methods to include encryption.",
    "code": "```javascript\nclass Document {\n    print() {\n        console.log('Printing document...');\n    }\n\n    save() {\n        console.log('Saving document...');\n    }\n}\n\nclass PDFDocument extends Document {\n    print() {\n        this.encrypt();\n        console.log('Printing PDF document...');\n    }\n\n    save() {\n        this.encrypt();\n        console.log('Saving PDF document...');\n    }\n\n    encrypt() {\n        console.log('Encrypting document...');\n    }\n}\n\n// Usage example\nconst pdfDoc = new PDFDocument();\npdfDoc.print();\npdfDoc.save();\n```"
  },
  {
    "task": "Develop a superclass for a retail product with methods for pricing and discount, then extend it with an electronics product class that overrides the discount method to offer more.",
    "code": "```javascript\n// Superclass for a retail product\nclass RetailProduct {\n    constructor(name, price) {\n        this.name = name;\n        this.price = price;\n    }\n\n    getPrice() {\n        return this.price;\n    }\n\n    getDiscountedPrice(discountPercent) {\n        return this.price - (this.price * (discountPercent / 100));\n    }\n}\n\n// Subclass for an electronics product\nclass ElectronicsProduct extends RetailProduct {\n    constructor(name, price, warranty) {\n        super(name, price);\n        this.warranty = warranty;\n    }\n\n    getDiscountedPrice(discountPercent) {\n        // Offers more discount for electronics\n        const additionalDiscount = 5;\n        const totalDiscount = discountPercent + additionalDiscount;\n        return this.price - (this.price * (totalDiscount / 100));\n    }\n}\n\n// Example usage\nconst genericProduct = new RetailProduct('Generic Product', 100);\nconsole.log(genericProduct.getDiscountedPrice(10)); // 90\n\nconst laptop = new ElectronicsProduct('Laptop', 1000, '2 years');\nconsole.log(laptop.getDiscountedPrice(10)); // 850\n```"
  },
  {
    "task": "Implement a base class for a subscription service with a method to renew membership, then create a monthly subscription subclass that overrides this method for automatic renewal.",
    "code": "```javascript\nclass SubscriptionService {\n    constructor(memberName) {\n        this.memberName = memberName;\n    }\n\n    renewMembership() {\n        console.log(`${this.memberName} has manually renewed their subscription.`);\n    }\n}\n\nclass MonthlySubscription extends SubscriptionService {\n    constructor(memberName) {\n        super(memberName);\n    }\n\n    renewMembership() {\n        console.log(`${this.memberName}'s subscription is automatically renewed monthly.`);\n    }\n}\n\n// Example usage\nconst baseSub = new SubscriptionService('Alice');\nbaseSub.renewMembership();\n\nconst monthlySub = new MonthlySubscription('Bob');\nmonthlySub.renewMembership();\n```"
  },
  {
    "task": "Construct a parent class for a language translator with a method to translate text, then derive a French translator class that overrides this method for French language specifics.",
    "code": "```javascript\nclass LanguageTranslator {\n    translate(text) {\n        return \"Translating text: \" + text;\n    }\n}\n\nclass FrenchTranslator extends LanguageTranslator {\n    translate(text) {\n        return \"Traduction du texte: \" + text;\n    }\n}\n\n// Example usage:\nconst translator = new FrenchTranslator();\nconsole.log(translator.translate(\"Hello, how are you?\"));\n```"
  },
  {
    "task": "Set up a base class for a customer order with methods for placing and tracking, and extend it with a food order subclass that overrides tracking for delivery status.",
    "code": "```javascript\nclass CustomerOrder {\n    constructor(orderId) {\n        this.orderId = orderId;\n    }\n\n    placeOrder() {\n        console.log(`Order ${this.orderId} has been placed.`);\n    }\n\n    trackOrder() {\n        console.log(`Tracking order ${this.orderId}.`);\n    }\n}\n\nclass FoodOrder extends CustomerOrder {\n    constructor(orderId, deliveryStatus) {\n        super(orderId);\n        this.deliveryStatus = deliveryStatus;\n    }\n\n    trackOrder() {\n        console.log(`Order ${this.orderId} is currently: ${this.deliveryStatus}.`);\n    }\n}\n\n// Example usage:\nconst order1 = new CustomerOrder(123);\norder1.placeOrder();\norder1.trackOrder();\n\nconst foodOrder1 = new FoodOrder(456, 'Out for delivery');\nfoodOrder1.placeOrder();\nfoodOrder1.trackOrder();\n```"
  },
  {
    "task": "Create a foundational class for an artwork with properties like artist and medium, and derive a painting class that overrides the medium property to be 'canvas'.",
    "code": "```javascript\nclass Artwork {\n    constructor(artist, medium) {\n        this.artist = artist;\n        this.medium = medium;\n    }\n}\n\nclass Painting extends Artwork {\n    constructor(artist) {\n        super(artist, 'canvas');\n    }\n}\n```"
  },
  {
    "task": "Design a base class for a computer network with methods for connectivity and bandwidth, then create a wireless network subclass that overrides these methods for signal strength.",
    "code": "```javascript\nclass ComputerNetwork {\n  constructor() {\n    this.connectivityStatus = 'Connected';\n    this.bandwidth = '100 Mbps';\n  }\n\n  getConnectivity() {\n    return this.connectivityStatus;\n  }\n\n  getBandwidth() {\n    return this.bandwidth;\n  }\n}\n\nclass WirelessNetwork extends ComputerNetwork {\n  constructor() {\n    super();\n    this.signalStrength = 'Strong';\n  }\n\n  getConnectivity() {\n    return `${super.getConnectivity()} with signal strength: ${this.signalStrength}`;\n  }\n\n  getBandwidth() {\n    return `${super.getBandwidth()} adapted for wireless`;\n  }\n}\n\n// Example usage:\nconst wirelessNetwork = new WirelessNetwork();\nconsole.log(wirelessNetwork.getConnectivity());\nconsole.log(wirelessNetwork.getBandwidth());\n```"
  },
  {
    "task": "Develop a superclass for a messaging app with methods for sending and receiving messages, then extend it with a secure messaging subclass that overrides these methods for encryption.",
    "code": "```javascript\nclass MessagingApp {\n    sendMessage(message) {\n        console.log(`Sending message: ${message}`);\n    }\n\n    receiveMessage() {\n        console.log('Receiving message...');\n        return 'Message received';\n    }\n}\n\nclass SecureMessagingApp extends MessagingApp {\n    sendMessage(message) {\n        const encryptedMessage = this.encrypt(message);\n        console.log(`Sending encrypted message: ${encryptedMessage}`);\n    }\n\n    receiveMessage() {\n        console.log('Receiving encrypted message...');\n        const encryptedMessage = 'Encrypted message received';\n        return this.decrypt(encryptedMessage);\n    }\n\n    encrypt(message) {\n        // Simple encryption logic for demonstration\n        return Buffer.from(message).toString('base64');\n    }\n\n    decrypt(encryptedMessage) {\n        // Simple decryption logic for demonstration\n        return Buffer.from(encryptedMessage, 'base64').toString('utf-8');\n    }\n}\n```"
  },
  {
    "task": "Implement a base class for a travel itinerary with methods for destinations and activities, then create a vacation itinerary subclass that overrides these methods for leisure activities.",
    "code": "```javascript\nclass TravelItinerary {\n    constructor(destinations = [], activities = []) {\n        this.destinations = destinations;\n        this.activities = activities;\n    }\n\n    addDestination(destination) {\n        this.destinations.push(destination);\n    }\n\n    addActivity(activity) {\n        this.activities.push(activity);\n    }\n\n    getDestinations() {\n        return this.destinations;\n    }\n\n    getActivities() {\n        return this.activities;\n    }\n}\n\nclass VacationItinerary extends TravelItinerary {\n    constructor(destinations = [], activities = []) {\n        super(destinations, activities);\n    }\n\n    addActivity(activity) {\n        const leisureActivities = ['beach', 'spa', 'hiking', 'sightseeing'];\n        if (leisureActivities.includes(activity.toLowerCase())) {\n            super.addActivity(activity);\n        }\n    }\n\n    getActivities() {\n        return super.getActivities().filter(activity => \n            ['beach', 'spa', 'hiking', 'sightseeing'].includes(activity.toLowerCase())\n        );\n    }\n}\n\n// Example usage:\n// const vacation = new VacationItinerary();\n// vacation.addDestination('Hawaii');\n// vacation.addActivity('Beach');\n// vacation.addActivity('Conference');\n// console.log(vacation.getDestinations()); // ['Hawaii']\n// console.log(vacation.getActivities()); // ['Beach']\n```"
  },
  {
    "task": "Construct a parent class for a healthcare record with methods for patient data and treatment history, then derive a pediatric record class that overrides these methods for child-specific data.",
    "code": "```javascript\nclass HealthcareRecord {\n    constructor(patientName, age) {\n        this.patientName = patientName;\n        this.age = age;\n        this.treatmentHistory = [];\n    }\n\n    getPatientData() {\n        return {\n            name: this.patientName,\n            age: this.age\n        };\n    }\n\n    addTreatment(treatment) {\n        this.treatmentHistory.push(treatment);\n    }\n\n    getTreatmentHistory() {\n        return this.treatmentHistory;\n    }\n}\n\nclass PediatricRecord extends HealthcareRecord {\n    constructor(patientName, age, guardianName) {\n        super(patientName, age);\n        this.guardianName = guardianName;\n        this.vaccinationHistory = [];\n    }\n\n    getPatientData() {\n        return {\n            name: this.patientName,\n            age: this.age,\n            guardian: this.guardianName\n        };\n    }\n\n    addVaccination(vaccine) {\n        this.vaccinationHistory.push(vaccine);\n    }\n\n    getTreatmentHistory() {\n        return {\n            treatments: this.treatmentHistory,\n            vaccinations: this.vaccinationHistory\n        };\n    }\n}\n```"
  },
  {
    "task": "Set up a base class for a culinary dish with methods for preparation and serving, and extend it with an appetizer subclass that overrides these methods for smaller portions.",
    "code": "```javascript\nclass CulinaryDish {\n    prepare() {\n        console.log('Preparing the dish.');\n    }\n\n    serve() {\n        console.log('Serving the dish.');\n    }\n}\n\nclass Appetizer extends CulinaryDish {\n    prepare() {\n        console.log('Preparing the appetizer.');\n    }\n\n    serve() {\n        console.log('Serving the appetizer in smaller portions.');\n    }\n}\n\nconst dish = new CulinaryDish();\ndish.prepare();\ndish.serve();\n\nconst appetizer = new Appetizer();\nappetizer.prepare();\nappetizer.serve();\n```"
  },
  {
    "task": "Create a foundational class for a book collection with properties like genre and author, and derive a mystery collection class that overrides the genre property to be 'mystery'.",
    "code": "```javascript\nclass BookCollection {\n    constructor(genre, author) {\n        this.genre = genre;\n        this.author = author;\n    }\n}\n\nclass MysteryCollection extends BookCollection {\n    constructor(author) {\n        super('mystery', author);\n    }\n}\n```"
  },
  {
    "task": "Design a base class for a file storage system with methods for saving and deleting files, then create a cloud storage subclass that overrides these methods for remote access.",
    "code": "```javascript\n// Base class for file storage system\nclass FileStorage {\n    saveFile(fileName, data) {\n        console.log(`Saving ${fileName} locally.`);\n        // Logic to save file locally\n    }\n\n    deleteFile(fileName) {\n        console.log(`Deleting ${fileName} locally.`);\n        // Logic to delete file locally\n    }\n}\n\n// Cloud storage subclass\nclass CloudStorage extends FileStorage {\n    saveFile(fileName, data) {\n        console.log(`Saving ${fileName} to the cloud.`);\n        // Logic to save file to the cloud\n    }\n\n    deleteFile(fileName) {\n        console.log(`Deleting ${fileName} from the cloud.`);\n        // Logic to delete file from the cloud\n    }\n}\n\n// Example usage\nconst localStorage = new FileStorage();\nlocalStorage.saveFile(\"document.txt\", \"Hello, World!\");\n\nconst cloudStorage = new CloudStorage();\ncloudStorage.saveFile(\"document.txt\", \"Hello, World!\");\n```"
  },
  {
    "task": "Develop a superclass for a seasonal sale event with methods for discounts and promotions, then extend it with a summer sale subclass that overrides these methods for summer items.",
    "code": "```javascript\nclass SeasonalSaleEvent {\n    constructor() {\n        this.baseDiscount = 0.10; // 10% base discount\n    }\n\n    getDiscount(itemPrice) {\n        return itemPrice * this.baseDiscount;\n    }\n\n    getPromotionMessage() {\n        return \"Enjoy our seasonal sale!\";\n    }\n}\n\nclass SummerSale extends SeasonalSaleEvent {\n    constructor() {\n        super();\n        this.summerDiscount = 0.15; // 15% summer discount\n    }\n\n    getDiscount(itemPrice) {\n        return itemPrice * this.summerDiscount;\n    }\n\n    getPromotionMessage() {\n        return \"Summer sale is here! Get up to 15% off on summer items!\";\n    }\n}\n```"
  },
  {
    "task": "Implement a base class for a personal budget with methods for income and expenses, then create a student budget subclass that overrides these methods for tuition and fees.",
    "code": "```javascript\nclass PersonalBudget {\n    constructor() {\n        this.totalIncome = 0;\n        this.totalExpenses = 0;\n    }\n\n    addIncome(amount) {\n        this.totalIncome += amount;\n    }\n\n    addExpense(amount) {\n        this.totalExpenses += amount;\n    }\n\n    getBalance() {\n        return this.totalIncome - this.totalExpenses;\n    }\n}\n\nclass StudentBudget extends PersonalBudget {\n    constructor() {\n        super();\n        this.tuition = 0;\n        this.fees = 0;\n    }\n\n    addIncome(amount) {\n        super.addIncome(amount);\n        console.log(`Student income added: $${amount}`);\n    }\n\n    addExpense(amount) {\n        super.addExpense(amount);\n        console.log(`Student expense added: $${amount}`);\n    }\n\n    addTuition(amount) {\n        this.tuition += amount;\n        this.addExpense(amount);\n        console.log(`Tuition added: $${amount}`);\n    }\n\n    addFees(amount) {\n        this.fees += amount;\n        this.addExpense(amount);\n        console.log(`Fees added: $${amount}`);\n    }\n\n    getBalance() {\n        return super.getBalance();\n    }\n}\n```"
  },
  {
    "task": "Construct a parent class for a fitness routine with methods for exercises and duration, then derive a yoga routine class that overrides these methods for flexibility exercises.",
    "code": "```javascript\nclass FitnessRoutine {\n    constructor() {\n        this.exercises = [];\n        this.duration = 0;\n    }\n\n    addExercise(exercise) {\n        this.exercises.push(exercise);\n    }\n\n    setDuration(duration) {\n        this.duration = duration;\n    }\n\n    getRoutine() {\n        return {\n            exercises: this.exercises,\n            duration: this.duration,\n        };\n    }\n}\n\nclass YogaRoutine extends FitnessRoutine {\n    constructor() {\n        super();\n    }\n\n    addExercise(exercise) {\n        if (exercise.includes('flexibility')) {\n            this.exercises.push(exercise);\n        } else {\n            console.log('Only flexibility exercises are allowed in a YogaRoutine.');\n        }\n    }\n\n    setDuration(duration) {\n        if (duration >= 30) {\n            this.duration = duration;\n        } else {\n            console.log('Yoga routines should be at least 30 minutes.');\n        }\n    }\n}\n```"
  },
  {
    "task": "Set up a base class for a transportation ticket with methods for pricing and validity, and extend it with an airline ticket subclass that overrides these methods for baggage allowance.",
    "code": "```javascript\nclass TransportationTicket {\n    constructor(price, validUntil) {\n        this.price = price;\n        this.validUntil = validUntil;\n    }\n\n    getPrice() {\n        return this.price;\n    }\n\n    isValid() {\n        const currentDate = new Date();\n        const validDate = new Date(this.validUntil);\n        return currentDate <= validDate;\n    }\n}\n\nclass AirlineTicket extends TransportationTicket {\n    constructor(price, validUntil, baggageAllowance) {\n        super(price, validUntil);\n        this.baggageAllowance = baggageAllowance;\n    }\n\n    getPrice() {\n        return this.price + (this.baggageAllowance > 20 ? 50 : 0); // Additional cost for baggage over 20kg\n    }\n\n    isValid() {\n        const currentDate = new Date();\n        const validDate = new Date(this.validUntil);\n        return currentDate <= validDate && this.baggageAllowance <= 50; // Validity check with baggage limit\n    }\n}\n```"
  },
  {
    "task": "Create a foundational class for a digital photo album with properties like album name and date, and derive a vacation album class that overrides the date property to be specific.",
    "code": "```javascript\nclass PhotoAlbum {\n    constructor(albumName, date) {\n        this.albumName = albumName;\n        this.date = date;\n    }\n}\n\nclass VacationAlbum extends PhotoAlbum {\n    constructor(albumName, specificDate) {\n        super(albumName, specificDate);\n    }\n}\n```"
  },
  {
    "task": "Design a base class for a home appliance with methods for power usage and warranty, then create a refrigerator subclass that overrides these methods for energy efficiency.",
    "code": "```javascript\nclass HomeAppliance {\n  powerUsage() {\n    return \"Standard power usage.\";\n  }\n\n  warranty() {\n    return \"Standard warranty.\";\n  }\n}\n\nclass Refrigerator extends HomeAppliance {\n  powerUsage() {\n    return \"Energy-efficient power usage.\";\n  }\n\n  warranty() {\n    return \"Extended warranty for energy efficiency.\";\n  }\n}\n\n// Example usage\nconst fridge = new Refrigerator();\nconsole.log(fridge.powerUsage()); // Energy-efficient power usage.\nconsole.log(fridge.warranty());   // Extended warranty for energy efficiency.\n```"
  },
  {
    "task": "Develop a superclass for a software update with methods for versioning and patch notes, then extend it with a security update subclass that overrides these methods for vulnerabilities.",
    "code": "```javascript\nclass SoftwareUpdate {\n    constructor(version, patchNotes) {\n        this.version = version;\n        this.patchNotes = patchNotes;\n    }\n\n    getVersion() {\n        return `Version: ${this.version}`;\n    }\n\n    getPatchNotes() {\n        return `Patch Notes: ${this.patchNotes}`;\n    }\n}\n\nclass SecurityUpdate extends SoftwareUpdate {\n    constructor(version, patchNotes, vulnerabilities) {\n        super(version, patchNotes);\n        this.vulnerabilities = vulnerabilities;\n    }\n\n    getVersion() {\n        return `Security Update Version: ${this.version}`;\n    }\n\n    getPatchNotes() {\n        return `Security Patch Notes: ${this.patchNotes}, Vulnerabilities Addressed: ${this.vulnerabilities}`;\n    }\n}\n\n// Example usage:\nconst update = new SoftwareUpdate(\"1.0\", \"Initial release.\");\nconsole.log(update.getVersion());\nconsole.log(update.getPatchNotes());\n\nconst securityUpdate = new SecurityUpdate(\"1.1\", \"Security improvements.\", \"Fixed XSS vulnerability.\");\nconsole.log(securityUpdate.getVersion());\nconsole.log(securityUpdate.getPatchNotes());\n```"
  },
  {
    "task": "Implement a base class for a musical performance with methods for rehearsal and execution, then create a concert performance subclass that overrides these methods for live audience.",
    "code": "```javascript\nclass MusicalPerformance {\n  rehearsal() {\n    console.log(\"Rehearsing the performance.\");\n  }\n\n  execution() {\n    console.log(\"Executing the performance.\");\n  }\n}\n\nclass ConcertPerformance extends MusicalPerformance {\n  rehearsal() {\n    console.log(\"Rehearsing the concert for a live audience.\");\n  }\n\n  execution() {\n    console.log(\"Executing the concert for a live audience.\");\n  }\n}\n\n// Example usage:\nconst concert = new ConcertPerformance();\nconcert.rehearsal();\nconcert.execution();\n```"
  },
  {
    "task": "Construct a parent class for an academic degree with methods for course requirements and credits, then derive a master's degree class that overrides these methods for advanced studies.",
    "code": "```javascript\nclass AcademicDegree {\n    constructor() {\n        this.courseRequirements = \"General course requirements\";\n        this.credits = \"General credits\";\n    }\n\n    getCourseRequirements() {\n        return this.courseRequirements;\n    }\n\n    getCredits() {\n        return this.credits;\n    }\n}\n\nclass MastersDegree extends AcademicDegree {\n    constructor() {\n        super();\n        this.courseRequirements = \"Advanced course requirements\";\n        this.credits = \"Advanced credits\";\n    }\n\n    getCourseRequirements() {\n        return this.courseRequirements;\n    }\n\n    getCredits() {\n        return this.credits;\n    }\n}\n```"
  },
  {
    "task": "Set up a base class for a weather forecast with methods for temperature and conditions, and extend it with a winter forecast subclass that overrides these methods for snow conditions.",
    "code": "```javascript\nclass WeatherForecast {\n    constructor(temperature, conditions) {\n        this.temperature = temperature;\n        this.conditions = conditions;\n    }\n\n    getTemperature() {\n        return `The temperature is ${this.temperature} degrees.`;\n    }\n\n    getConditions() {\n        return `The conditions are: ${this.conditions}.`;\n    }\n}\n\nclass WinterForecast extends WeatherForecast {\n    constructor(temperature, conditions, snowConditions) {\n        super(temperature, conditions);\n        this.snowConditions = snowConditions;\n    }\n\n    getTemperature() {\n        return `The winter temperature is ${this.temperature} degrees.`;\n    }\n\n    getConditions() {\n        return `The conditions are: ${this.conditions}. Snow conditions: ${this.snowConditions}.`;\n    }\n}\n\n// Example usage\nconst winterForecast = new WinterForecast(-5, 'Cloudy', 'Heavy snowfall');\nconsole.log(winterForecast.getTemperature());\nconsole.log(winterForecast.getConditions());\n```"
  },
  {
    "task": "Create a foundational class for a personal diary with properties like date and entries, and derive a travel diary class that overrides the date property with travel dates.",
    "code": "```javascript\nclass PersonalDiary {\n    constructor(date, entries) {\n        this.date = date;\n        this.entries = entries;\n    }\n}\n\nclass TravelDiary extends PersonalDiary {\n    constructor(travelDate, entries) {\n        super(travelDate, entries);\n        this.travelDate = travelDate;\n    }\n}\n```"
  },
  {
    "task": "Design a base class for a pet with methods for feeding and grooming, then create a cat subclass that overrides these methods with specific food preferences.",
    "code": "```javascript\nclass Pet {\n    feed() {\n        console.log('Feeding the pet...');\n    }\n\n    groom() {\n        console.log('Grooming the pet...');\n    }\n}\n\nclass Cat extends Pet {\n    feed() {\n        console.log('Feeding the cat with cat food...');\n    }\n\n    groom() {\n        console.log('Grooming the cat with a brush...');\n    }\n}\n\nconst myCat = new Cat();\nmyCat.feed();\nmyCat.groom();\n```"
  },
  {
    "task": "Develop a superclass for a software library with methods for installation and updates, then extend it with a graphics library subclass that overrides these methods for rendering capabilities.",
    "code": "```javascript\nclass SoftwareLibrary {\n    install() {\n        console.log(\"Installing software library...\");\n    }\n\n    update() {\n        console.log(\"Updating software library...\");\n    }\n}\n\nclass GraphicsLibrary extends SoftwareLibrary {\n    install() {\n        console.log(\"Installing graphics library with rendering capabilities...\");\n    }\n\n    update() {\n        console.log(\"Updating graphics library with rendering capabilities...\");\n    }\n}\n\n// Example usage\nconst lib = new GraphicsLibrary();\nlib.install();\nlib.update();\n```"
  },
  {
    "task": "Implement a base class for a political campaign with methods for fundraising and events, then create a presidential campaign subclass that overrides these methods for national scale.",
    "code": "```javascript\nclass PoliticalCampaign {\n    constructor(name) {\n        this.name = name;\n    }\n\n    fundraising() {\n        console.log(`${this.name} is fundraising at the local level.`);\n    }\n\n    events() {\n        console.log(`${this.name} is hosting local events.`);\n    }\n}\n\nclass PresidentialCampaign extends PoliticalCampaign {\n    constructor(name) {\n        super(name);\n    }\n\n    fundraising() {\n        console.log(`${this.name} is fundraising at the national level.`);\n    }\n\n    events() {\n        console.log(`${this.name} is hosting national events.`);\n    }\n}\n\n// Example usage:\nconst localCampaign = new PoliticalCampaign(\"Local Campaign\");\nlocalCampaign.fundraising();\nlocalCampaign.events();\n\nconst nationalCampaign = new PresidentialCampaign(\"National Campaign\");\nnationalCampaign.fundraising();\nnationalCampaign.events();\n```"
  },
  {
    "task": "Construct a parent class for an automotive part with methods for durability and replacement, then derive an engine part class that overrides these methods for performance.",
    "code": "```javascript\nclass AutomotivePart {\n    constructor(name) {\n        this.name = name;\n    }\n\n    durability() {\n        return `The durability of ${this.name} is standard.`;\n    }\n\n    replacement() {\n        return `The replacement of ${this.name} is standard.`;\n    }\n}\n\nclass EnginePart extends AutomotivePart {\n    constructor(name) {\n        super(name);\n    }\n\n    durability() {\n        return `The durability of ${this.name} is enhanced for performance.`;\n    }\n\n    replacement() {\n        return `The replacement of ${this.name} is specialized for high performance.`;\n    }\n}\n\n// Example usage:\nlet standardPart = new AutomotivePart(\"Generic Part\");\nconsole.log(standardPart.durability()); // The durability of Generic Part is standard.\nconsole.log(standardPart.replacement()); // The replacement of Generic Part is standard.\n\nlet performancePart = new EnginePart(\"High-Performance Engine\");\nconsole.log(performancePart.durability()); // The durability of High-Performance Engine is enhanced for performance.\nconsole.log(performancePart.replacement()); // The replacement of High-Performance Engine is specialized for high performance.\n```"
  },
  {
    "task": "Set up a base class for an online tutorial with methods for lessons and quizzes, and extend it with a coding tutorial subclass that overrides these methods for interactive exercises.",
    "code": "```javascript\nclass OnlineTutorial {\n    constructor(title) {\n        this.title = title;\n    }\n\n    lessons() {\n        return `Lessons for ${this.title}`;\n    }\n\n    quizzes() {\n        return `Quizzes for ${this.title}`;\n    }\n}\n\nclass CodingTutorial extends OnlineTutorial {\n    constructor(title) {\n        super(title);\n    }\n\n    lessons() {\n        return `Interactive lessons for ${this.title}`;\n    }\n\n    quizzes() {\n        return `Interactive quizzes for ${this.title}`;\n    }\n}\n\n// Example usage\nconst tutorial = new CodingTutorial(\"JavaScript 101\");\nconsole.log(tutorial.lessons());\nconsole.log(tutorial.quizzes());\n```"
  },
  {
    "task": "Create a foundational class for a personal collection with properties like item type and value, and derive a stamp collection class that overrides the item type property to be 'stamps'.",
    "code": "```javascript\nclass PersonalCollection {\n    constructor(itemType, value) {\n        this.itemType = itemType;\n        this.value = value;\n    }\n}\n\nclass StampCollection extends PersonalCollection {\n    constructor(value) {\n        super('stamps', value);\n    }\n}\n```"
  },
  {
    "task": "Design a base class for a video game character with methods for health and abilities, then create a warrior character subclass that overrides these methods for strength.",
    "code": "```javascript\n// Base class for a video game character\nclass Character {\n    constructor(name) {\n        this.name = name;\n        this.health = 100;\n    }\n\n    getHealth() {\n        return this.health;\n    }\n\n    abilities() {\n        return \"Basic abilities\";\n    }\n}\n\n// Subclass for a warrior character\nclass Warrior extends Character {\n    constructor(name) {\n        super(name);\n    }\n\n    getHealth() {\n        return this.health + 50; // Warriors have more health\n    }\n\n    abilities() {\n        return \"Warrior abilities with strength\";\n    }\n}\n\n// Example usage\nconst hero = new Warrior(\"Aragorn\");\nconsole.log(hero.getHealth());\nconsole.log(hero.abilities());\n```"
  },
  {
    "task": "Develop a superclass for an event planner with methods for scheduling and budgeting, then extend it with a wedding planner subclass that overrides these methods for ceremony details.",
    "code": "```javascript\n// Superclass\nclass EventPlanner {\n    scheduleEvent(date) {\n        return `Event scheduled on ${date}`;\n    }\n    \n    setBudget(amount) {\n        return `Budget set to $${amount}`;\n    }\n}\n\n// Subclass\nclass WeddingPlanner extends EventPlanner {\n    scheduleEvent(date, ceremonyDetails) {\n        return `Wedding scheduled on ${date} with details: ${ceremonyDetails}`;\n    }\n    \n    setBudget(amount, additionalDetails) {\n        return `Wedding budget set to $${amount} with additional details: ${additionalDetails}`;\n    }\n}\n\n// Example usage\nconst weddingPlanner = new WeddingPlanner();\nconsole.log(weddingPlanner.scheduleEvent('June 15', 'Beach ceremony'));\nconsole.log(weddingPlanner.setBudget(5000, 'Includes catering and decorations'));\n```"
  },
  {
    "task": "Implement a base class for a software feature with methods for functionality and user feedback, then create a beta feature subclass that overrides these methods for testing.",
    "code": "```javascript\nclass Feature {\n    functionality() {\n        console.log(\"Executing main feature functionality.\");\n    }\n    \n    userFeedback() {\n        console.log(\"Collecting user feedback for main feature.\");\n    }\n}\n\nclass BetaFeature extends Feature {\n    functionality() {\n        console.log(\"Executing beta feature functionality for testing.\");\n    }\n    \n    userFeedback() {\n        console.log(\"Collecting user feedback for beta feature.\");\n    }\n}\n\n// Example usage\nconst mainFeature = new Feature();\nmainFeature.functionality();\nmainFeature.userFeedback();\n\nconst betaFeature = new BetaFeature();\nbetaFeature.functionality();\nbetaFeature.userFeedback();\n```"
  },
  {
    "task": "Construct a parent class for a gardening tool with methods for usage and maintenance, then derive a lawn mower class that overrides these methods for grass cutting.",
    "code": "```javascript\nclass GardeningTool {\n    use() {\n        console.log(\"Using the gardening tool.\");\n    }\n\n    maintain() {\n        console.log(\"Maintaining the gardening tool.\");\n    }\n}\n\nclass LawnMower extends GardeningTool {\n    use() {\n        console.log(\"Using the lawn mower to cut grass.\");\n    }\n\n    maintain() {\n        console.log(\"Maintaining the lawn mower.\");\n    }\n}\n\n// Example usage\nconst tool = new GardeningTool();\ntool.use();\ntool.maintain();\n\nconst mower = new LawnMower();\nmower.use();\nmower.maintain();\n```"
  },
  {
    "task": "Set up a base class for a household chore with methods for time and effort, and extend it with a cleaning chore subclass that overrides these methods for dirt removal.",
    "code": "```javascript\nclass HouseholdChore {\n    time() {\n        return 'General time for chore';\n    }\n\n    effort() {\n        return 'General effort for chore';\n    }\n}\n\nclass CleaningChore extends HouseholdChore {\n    time() {\n        return 'Specific time for cleaning chore';\n    }\n\n    effort() {\n        return 'Specific effort for cleaning chore';\n    }\n}\n```"
  },
  {
    "task": "Create a foundational class for a personal project with properties like name and deadline, and derive a coding project class that overrides the deadline property for milestones.",
    "code": "```javascript\nclass Project {\n    constructor(name, deadline) {\n        this.name = name;\n        this.deadline = deadline;\n    }\n}\n\nclass CodingProject extends Project {\n    constructor(name, deadline, milestones) {\n        super(name, deadline);\n        this.milestones = milestones;\n    }\n\n    setMilestoneDeadline(milestone, newDeadline) {\n        if (this.milestones[milestone]) {\n            this.milestones[milestone] = newDeadline;\n        }\n    }\n}\n\n// Example usage:\nconst project = new CodingProject(\"Website Redesign\", \"2024-12-31\", {\n    \"Design Phase\": \"2024-06-30\",\n    \"Development Phase\": \"2024-09-30\"\n});\n\nproject.setMilestoneDeadline(\"Design Phase\", \"2024-07-15\");\n```"
  },
  {
    "task": "Design a base class for a holiday celebration with methods for traditions and activities, then create a Christmas celebration subclass that overrides these methods for gift exchange.",
    "code": "```javascript\nclass HolidayCelebration {\n  traditions() {\n    return \"General holiday traditions\";\n  }\n\n  activities() {\n    return \"General holiday activities\";\n  }\n}\n\nclass ChristmasCelebration extends HolidayCelebration {\n  traditions() {\n    return \"Christmas traditions: decorating a tree, singing carols\";\n  }\n\n  activities() {\n    return \"Christmas activities: gift exchange, family dinner\";\n  }\n}\n\n// Example usage\nconst christmas = new ChristmasCelebration();\nconsole.log(christmas.traditions());\nconsole.log(christmas.activities());\n```"
  },
  {
    "task": "Develop a superclass for a customer feedback system with methods for collecting and analyzing, then extend it with a product feedback subclass that overrides these methods for reviews.",
    "code": "```javascript\nclass FeedbackSystem {\n    collect() {\n        console.log(\"Collecting feedback\");\n    }\n\n    analyze() {\n        console.log(\"Analyzing feedback\");\n    }\n}\n\nclass ProductFeedback extends FeedbackSystem {\n    collect() {\n        console.log(\"Collecting product reviews\");\n    }\n\n    analyze() {\n        console.log(\"Analyzing product reviews\");\n    }\n}\n\nconst feedback = new ProductFeedback();\nfeedback.collect();\nfeedback.analyze();\n```"
  },
  {
    "task": "Implement a base class for a civic service with methods for public engagement and policy, then create a community service subclass that overrides these methods for local impact.",
    "code": "```javascript\n// Base class\nclass CivicService {\n  publicEngagement() {\n    console.log(\"Engaging with the public on a national level.\");\n  }\n\n  policy() {\n    console.log(\"Implementing policies for the entire region.\");\n  }\n}\n\n// Subclass\nclass CommunityService extends CivicService {\n  publicEngagement() {\n    console.log(\"Engaging with the community on a local level.\");\n  }\n\n  policy() {\n    console.log(\"Implementing policies for local impact.\");\n  }\n}\n\n// Example usage\nconst communityService = new CommunityService();\ncommunityService.publicEngagement();\ncommunityService.policy();\n```"
  },
  {
    "task": "Construct a parent class for a culinary ingredient with methods for flavor and preparation, then derive a spice ingredient class that overrides these methods for seasoning.",
    "code": "```javascript\nclass Ingredient {\n    flavor() {\n        return \"Generic flavor\";\n    }\n\n    preparation() {\n        return \"Generic preparation\";\n    }\n}\n\nclass Spice extends Ingredient {\n    flavor() {\n        return \"Spicy flavor\";\n    }\n\n    preparation() {\n        return \"Grind and sprinkle\";\n    }\n}\n\nconst genericIngredient = new Ingredient();\nconsole.log(genericIngredient.flavor()); // Generic flavor\nconsole.log(genericIngredient.preparation()); // Generic preparation\n\nconst spice = new Spice();\nconsole.log(spice.flavor()); // Spicy flavor\nconsole.log(spice.preparation()); // Grind and sprinkle\n```"
  },
  {
    "task": "Set up a base class for a scientific experiment with methods for hypothesis and testing, and extend it with a chemistry experiment subclass that overrides these methods for reactions.",
    "code": "```javascript\nclass ScientificExperiment {\n    hypothesis() {\n        return \"General hypothesis for the experiment.\";\n    }\n\n    testing() {\n        return \"General testing method for the experiment.\";\n    }\n}\n\nclass ChemistryExperiment extends ScientificExperiment {\n    hypothesis() {\n        return \"Hypothesis related to a chemical reaction.\";\n    }\n\n    testing() {\n        return \"Testing method for a chemical reaction.\";\n    }\n}\n\nconst chemExp = new ChemistryExperiment();\nconsole.log(chemExp.hypothesis());\nconsole.log(chemExp.testing());\n```"
  },
  {
    "task": "Create a foundational class for an inventory system with properties like item ID and quantity, and derive a warehouse inventory class that overrides the quantity property for bulk storage.",
    "code": "```javascript\nclass InventoryItem {\n    constructor(itemId, quantity) {\n        this.itemId = itemId;\n        this.quantity = quantity;\n    }\n}\n\nclass WarehouseInventory extends InventoryItem {\n    constructor(itemId, bulkQuantity) {\n        super(itemId, bulkQuantity);\n        this.quantity = bulkQuantity;\n    }\n}\n\n// Example usage:\nconst warehouseItem = new WarehouseInventory('item123', 500);\nconsole.log(warehouseItem.itemId); // Output: item123\nconsole.log(warehouseItem.quantity); // Output: 500\n```"
  },
  {
    "task": "Design a base class for a travel agency with methods for itinerary and bookings, then create a luxury travel subclass that overrides these methods for premium services.",
    "code": "```javascript\nclass TravelAgency {\n  itinerary() {\n    console.log(\"Standard itinerary for travel.\");\n  }\n\n  bookings() {\n    console.log(\"Standard booking services.\");\n  }\n}\n\nclass LuxuryTravel extends TravelAgency {\n  itinerary() {\n    console.log(\"Premium itinerary for luxury travel.\");\n  }\n\n  bookings() {\n    console.log(\"Premium booking services with additional perks.\");\n  }\n}\n\n// Example usage:\nconst standardTravel = new TravelAgency();\nstandardTravel.itinerary();  // Output: Standard itinerary for travel.\nstandardTravel.bookings();   // Output: Standard booking services.\n\nconst luxuryTravel = new LuxuryTravel();\nluxuryTravel.itinerary();    // Output: Premium itinerary for luxury travel.\nluxuryTravel.bookings();     // Output: Premium booking services with additional perks.\n```"
  },
  {
    "task": "Develop a superclass for an educational tool with methods for teaching and assessment, then extend it with a math tool subclass that overrides these methods for problem-solving.",
    "code": "```javascript\n// Superclass for Educational Tool\nclass EducationalTool {\n    teach() {\n        console.log(\"Teaching a general subject.\");\n    }\n\n    assess() {\n        console.log(\"Assessing general knowledge.\");\n    }\n}\n\n// Subclass for Math Tool\nclass MathTool extends EducationalTool {\n    teach() {\n        console.log(\"Teaching math concepts.\");\n    }\n\n    assess() {\n        console.log(\"Assessing math problem-solving skills.\");\n    }\n}\n\n// Example usage\nconst generalTool = new EducationalTool();\ngeneralTool.teach();\ngeneralTool.assess();\n\nconst mathTool = new MathTool();\nmathTool.teach();\nmathTool.assess();\n```"
  },
  {
    "task": "Implement a base class for a community project with methods for planning and execution, then create a park renovation subclass that overrides these methods for landscaping.",
    "code": "```javascript\nclass CommunityProject {\n    plan() {\n        console.log(\"Planning the community project...\");\n    }\n\n    execute() {\n        console.log(\"Executing the community project...\");\n    }\n}\n\nclass ParkRenovation extends CommunityProject {\n    plan() {\n        console.log(\"Planning the park renovation with landscaping...\");\n    }\n\n    execute() {\n        console.log(\"Executing the park renovation with landscaping...\");\n    }\n}\n\n// Example usage:\nconst project = new ParkRenovation();\nproject.plan();\nproject.execute();\n```"
  },
  {
    "task": "Construct a parent class for a digital marketing strategy with methods for targeting and engagement, then derive a social media strategy class that overrides these methods for platforms.",
    "code": "```javascript\nclass DigitalMarketingStrategy {\n    targeting() {\n        return \"Targeting based on general digital marketing strategy.\";\n    }\n\n    engagement() {\n        return \"Engagement based on general digital marketing strategy.\";\n    }\n}\n\nclass SocialMediaStrategy extends DigitalMarketingStrategy {\n    targeting() {\n        return \"Targeting based on social media platforms.\";\n    }\n\n    engagement() {\n        return \"Engagement based on social media platforms.\";\n    }\n}\n\n// Example usage:\nconst strategy = new SocialMediaStrategy();\nconsole.log(strategy.targeting());\nconsole.log(strategy.engagement());\n```"
  },
  {
    "task": "Set up a base class for a scientific publication with methods for research and review, and extend it with a journal article subclass that overrides these methods for peer review.",
    "code": "```javascript\nclass ScientificPublication {\n    research() {\n        console.log(\"Conducting general research...\");\n    }\n\n    review() {\n        console.log(\"Reviewing publication...\");\n    }\n}\n\nclass JournalArticle extends ScientificPublication {\n    research() {\n        console.log(\"Conducting detailed research for journal article...\");\n    }\n\n    review() {\n        console.log(\"Performing peer review for journal article...\");\n    }\n}\n\n// Example usage:\nlet publication = new ScientificPublication();\npublication.research();\npublication.review();\n\nlet article = new JournalArticle();\narticle.research();\narticle.review();\n```"
  },
  {
    "task": "Create a foundational class for a software module with properties like name and dependencies, and derive a user interface module class that overrides the dependencies property for UI libraries.",
    "code": "```javascript\nclass Module {\n    constructor(name, dependencies) {\n        this.name = name;\n        this.dependencies = dependencies;\n    }\n}\n\nclass UIModule extends Module {\n    constructor(name, uiDependencies) {\n        super(name, uiDependencies);\n        this.dependencies = uiDependencies; // Override dependencies\n    }\n}\n\n// Example usage\nconst baseModule = new Module('BaseModule', ['core-lib']);\nconst uiModule = new UIModule('UIModule', ['ui-lib']);\n\nconsole.log(baseModule);\nconsole.log(uiModule);\n```"
  },
  {
    "task": "Design a base class for a fashion line with methods for design and production, then create a summer collection subclass that overrides these methods for seasonal trends.",
    "code": "```javascript\nclass FashionLine {\n  design() {\n    return \"Designing fashion line.\";\n  }\n\n  production() {\n    return \"Producing fashion line.\";\n  }\n}\n\nclass SummerCollection extends FashionLine {\n  design() {\n    return \"Designing summer collection with seasonal trends.\";\n  }\n\n  production() {\n    return \"Producing summer collection with seasonal materials.\";\n  }\n}\n\n// Example usage\nconst summerCollection = new SummerCollection();\nconsole.log(summerCollection.design());\nconsole.log(summerCollection.production());\n```"
  },
  {
    "task": "Develop a superclass for a family tree with methods for ancestry and descendants, then extend it with a royal lineage subclass that overrides these methods for historical accuracy.",
    "code": "```javascript\nclass FamilyTree {\n    constructor(name) {\n        this.name = name;\n        this.ancestors = [];\n        this.descendants = [];\n    }\n\n    addAncestor(ancestor) {\n        this.ancestors.push(ancestor);\n    }\n\n    addDescendant(descendant) {\n        this.descendants.push(descendant);\n    }\n\n    getAncestry() {\n        return this.ancestors;\n    }\n\n    getDescendants() {\n        return this.descendants;\n    }\n}\n\nclass RoyalLineage extends FamilyTree {\n    constructor(name) {\n        super(name);\n    }\n\n    getAncestry() {\n        // Custom logic for historical accuracy\n        return this.ancestors.map(ancestor => `${ancestor} (Royal Ancestry)`);\n    }\n\n    getDescendants() {\n        // Custom logic for historical accuracy\n        return this.descendants.map(descendant => `${descendant} (Royal Descendant)`);\n    }\n}\n```"
  },
  {
    "task": "Implement a base class for a musical score with methods for composition and arrangement, then create a symphony subclass that overrides these methods for orchestration.",
    "code": "```javascript\nclass MusicalScore {\n    compose() {\n        console.log(\"Composing a musical piece...\");\n    }\n\n    arrange() {\n        console.log(\"Arranging the musical piece...\");\n    }\n}\n\nclass Symphony extends MusicalScore {\n    compose() {\n        console.log(\"Composing a symphonic movement...\");\n    }\n\n    arrange() {\n        console.log(\"Orchestrating the symphonic movement...\");\n    }\n}\n\n// Example usage\nconst score = new MusicalScore();\nscore.compose();\nscore.arrange();\n\nconst symphony = new Symphony();\nsymphony.compose();\nsymphony.arrange();\n```"
  },
  {
    "task": "Construct a parent class for a historical record with methods for events and dates, then derive a war history class that overrides these methods for battles.",
    "code": "```javascript\nclass HistoricalRecord {\n    events() {\n        return \"General historical events.\";\n    }\n\n    dates() {\n        return \"General historical dates.\";\n    }\n}\n\nclass WarHistory extends HistoricalRecord {\n    events() {\n        return \"War-specific events.\";\n    }\n\n    dates() {\n        return \"Dates of battles.\";\n    }\n}\n\n// Example usage:\nconst history = new HistoricalRecord();\nconsole.log(history.events()); // \"General historical events.\"\nconsole.log(history.dates());  // \"General historical dates.\"\n\nconst warHistory = new WarHistory();\nconsole.log(warHistory.events()); // \"War-specific events.\"\nconsole.log(warHistory.dates());  // \"Dates of battles.\"\n```"
  },
  {
    "task": "Set up a base class for a pet adoption service with methods for application and approval, and extend it with a dog adoption subclass that overrides these methods for breed compatibility.",
    "code": "```javascript\nclass PetAdoptionService {\n    constructor() {\n        this.applications = [];\n    }\n\n    apply(application) {\n        this.applications.push(application);\n        console.log(\"Application received.\");\n    }\n\n    approve(application) {\n        console.log(\"Application approved.\");\n    }\n}\n\nclass DogAdoptionService extends PetAdoptionService {\n    apply(application) {\n        super.apply(application);\n        console.log(\"Checking breed compatibility...\");\n    }\n\n    approve(application) {\n        if (this.checkBreedCompatibility(application)) {\n            super.approve(application);\n        } else {\n            console.log(\"Application denied due to breed incompatibility.\");\n        }\n    }\n\n    checkBreedCompatibility(application) {\n        // Placeholder for breed compatibility logic\n        return true; \n    }\n}\n\nconst dogAdoption = new DogAdoptionService();\ndogAdoption.apply({applicant: \"John Doe\", breed: \"Labrador\"});\ndogAdoption.approve({applicant: \"John Doe\", breed: \"Labrador\"});\n```"
  },
  {
    "task": "Create a foundational class for a financial report with properties like fiscal year and summary, and derive an annual report class that overrides the fiscal year property for yearly data.",
    "code": "```javascript\nclass FinancialReport {\n    constructor(fiscalYear, summary) {\n        this.fiscalYear = fiscalYear;\n        this.summary = summary;\n    }\n}\n\nclass AnnualReport extends FinancialReport {\n    constructor(yearlyData, summary) {\n        super(null, summary);\n        this.fiscalYear = this.overrideFiscalYear(yearlyData);\n    }\n\n    overrideFiscalYear(yearlyData) {\n        return yearlyData;\n    }\n}\n\n// Example usage:\nconst report = new AnnualReport('2023', 'Yearly financial summary.');\nconsole.log(report.fiscalYear); // Output: 2023\nconsole.log(report.summary); // Output: Yearly financial summary.\n```"
  },
  {
    "task": "Design a base class for a movie franchise with methods for casting and production, then create a sequel subclass that overrides these methods for continuity.",
    "code": "```javascript\nclass MovieFranchise {\n  constructor(title) {\n    this.title = title;\n  }\n\n  cast() {\n    console.log(`Casting for the movie: ${this.title}`);\n  }\n\n  production() {\n    console.log(`Production details for the movie: ${this.title}`);\n  }\n}\n\nclass Sequel extends MovieFranchise {\n  constructor(title, sequelNumber) {\n    super(title);\n    this.sequelNumber = sequelNumber;\n  }\n\n  cast() {\n    console.log(`Casting for the sequel: ${this.title} ${this.sequelNumber}`);\n  }\n\n  production() {\n    console.log(`Production details for the sequel: ${this.title} ${this.sequelNumber}`);\n  }\n}\n\n// Example usage:\nconst original = new MovieFranchise(\"Original Movie\");\noriginal.cast();\noriginal.production();\n\nconst sequel = new Sequel(\"Original Movie\", 2);\nsequel.cast();\nsequel.production();\n```"
  },
  {
    "task": "Develop a superclass for a real estate listing with methods for pricing and description, then extend it with a luxury listing subclass that overrides these methods for high-end features.",
    "code": "```javascript\nclass RealEstateListing {\n    constructor(address, price) {\n        this.address = address;\n        this.price = price;\n    }\n\n    getPricing() {\n        return `The price of the property is $${this.price}.`;\n    }\n\n    getDescription() {\n        return `This property is located at ${this.address}.`;\n    }\n}\n\nclass LuxuryListing extends RealEstateListing {\n    constructor(address, price, luxuryFeatures) {\n        super(address, price);\n        this.luxuryFeatures = luxuryFeatures;\n    }\n\n    getPricing() {\n        return `The luxury price of this property is $${this.price}.`;\n    }\n\n    getDescription() {\n        return `This luxury property is located at ${this.address} and includes features such as ${this.luxuryFeatures.join(', ')}.`;\n    }\n}\n\n// Example usage\nconst listing = new RealEstateListing(\"123 Main St\", 300000);\nconsole.log(listing.getPricing());\nconsole.log(listing.getDescription());\n\nconst luxuryListing = new LuxuryListing(\"456 Luxury Rd\", 5000000, [\"private pool\", \"home theater\", \"wine cellar\"]);\nconsole.log(luxuryListing.getPricing());\nconsole.log(luxuryListing.getDescription());\n```"
  },
  {
    "task": "Implement a base class for a mobile app with methods for user interface and performance, then create a gaming app subclass that overrides these methods for graphics and speed.",
    "code": "```javascript\nclass MobileApp {\n    userInterface() {\n        console.log(\"Standard user interface.\");\n    }\n\n    performance() {\n        console.log(\"Standard performance.\");\n    }\n}\n\nclass GamingApp extends MobileApp {\n    userInterface() {\n        console.log(\"Enhanced graphics user interface.\");\n    }\n\n    performance() {\n        console.log(\"High-speed performance.\");\n    }\n}\n\n// Example usage\nconst app = new MobileApp();\napp.userInterface(); // Standard user interface.\napp.performance();   // Standard performance.\n\nconst gameApp = new GamingApp();\ngameApp.userInterface(); // Enhanced graphics user interface.\ngameApp.performance();   // High-speed performance.\n```"
  },
  {
    "task": "Construct a parent class for a corporate policy with methods for compliance and enforcement, then derive an HR policy class that overrides these methods for employee relations.",
    "code": "```javascript\nclass CorporatePolicy {\n    compliance() {\n        console.log(\"Compliance method in Corporate Policy\");\n    }\n\n    enforcement() {\n        console.log(\"Enforcement method in Corporate Policy\");\n    }\n}\n\nclass HRPolicy extends CorporatePolicy {\n    compliance() {\n        console.log(\"Compliance method in HR Policy for employee relations\");\n    }\n\n    enforcement() {\n        console.log(\"Enforcement method in HR Policy for employee relations\");\n    }\n}\n\n// Example usage\nconst hrPolicy = new HRPolicy();\nhrPolicy.compliance();\nhrPolicy.enforcement();\n```"
  },
  {
    "task": "Set up a base class for a scientific calculator with methods for basic operations and advanced functions, and extend it with a graphing calculator subclass that overrides these methods for plotting.",
    "code": "```javascript\nclass ScientificCalculator {\n  add(a, b) {\n    return a + b;\n  }\n\n  subtract(a, b) {\n    return a - b;\n  }\n\n  multiply(a, b) {\n    return a * b;\n  }\n\n  divide(a, b) {\n    if (b === 0) throw new Error(\"Division by zero\");\n    return a / b;\n  }\n\n  sin(x) {\n    return Math.sin(x);\n  }\n\n  cos(x) {\n    return Math.cos(x);\n  }\n\n  tan(x) {\n    return Math.tan(x);\n  }\n}\n\nclass GraphingCalculator extends ScientificCalculator {\n  add(a, b) {\n    console.log(`Plotting addition: ${a} + ${b}`);\n    return super.add(a, b);\n  }\n\n  subtract(a, b) {\n    console.log(`Plotting subtraction: ${a} - ${b}`);\n    return super.subtract(a, b);\n  }\n\n  multiply(a, b) {\n    console.log(`Plotting multiplication: ${a} * ${b}`);\n    return super.multiply(a, b);\n  }\n\n  divide(a, b) {\n    console.log(`Plotting division: ${a} / ${b}`);\n    return super.divide(a, b);\n  }\n\n  sin(x) {\n    console.log(`Plotting sine of: ${x}`);\n    return super.sin(x);\n  }\n\n  cos(x) {\n    console.log(`Plotting cosine of: ${x}`);\n    return super.cos(x);\n  }\n\n  tan(x) {\n    console.log(`Plotting tangent of: ${x}`);\n    return super.tan(x);\n  }\n}\n```"
  },
  {
    "task": "Create a foundational class for a children's book with properties like age group and illustrations, and derive a picture book class that overrides the illustrations property to be more prominent.",
    "code": "```javascript\nclass ChildrensBook {\n    constructor(ageGroup, illustrations) {\n        this.ageGroup = ageGroup;\n        this.illustrations = illustrations;\n    }\n}\n\nclass PictureBook extends ChildrensBook {\n    constructor(ageGroup, prominentIllustrations) {\n        super(ageGroup, prominentIllustrations);\n        this.prominentIllustrations = prominentIllustrations;\n    }\n}\n\nconst myPictureBook = new PictureBook('3-5', 'High quality illustrations');\nconsole.log(myPictureBook.ageGroup); // Output: 3-5\nconsole.log(myPictureBook.prominentIllustrations); // Output: High quality illustrations\n```"
  },
  {
    "task": "Design a base class for a cooking class with methods for ingredients and techniques, then create a baking class subclass that overrides these methods for dough preparation.",
    "code": "```javascript\nclass CookingClass {\n  ingredients() {\n    return \"General cooking ingredients\";\n  }\n\n  techniques() {\n    return \"General cooking techniques\";\n  }\n}\n\nclass BakingClass extends CookingClass {\n  ingredients() {\n    return \"Flour, sugar, eggs, butter\";\n  }\n\n  techniques() {\n    return \"Kneading, proofing, baking\";\n  }\n}\n\n// Example usage:\nconst baking = new BakingClass();\nconsole.log(baking.ingredients()); // Output: Flour, sugar, eggs, butter\nconsole.log(baking.techniques());  // Output: Kneading, proofing, baking\n```"
  },
  {
    "task": "Develop a superclass for a public transportation system with methods for routes and schedules, then extend it with a metro system subclass that overrides these methods for urban areas.",
    "code": "```javascript\nclass PublicTransportation {\n  routes() {\n    return \"General transportation routes.\";\n  }\n  \n  schedules() {\n    return \"General transportation schedules.\";\n  }\n}\n\nclass MetroSystem extends PublicTransportation {\n  routes() {\n    return \"Metro-specific urban area routes.\";\n  }\n  \n  schedules() {\n    return \"Metro-specific urban area schedules.\";\n  }\n}\n```"
  },
  {
    "task": "Implement a base class for a music store inventory with methods for stock and sales, then create a vinyl record subclass that overrides these methods for collectible items.",
    "code": "```javascript\nclass MusicStoreInventory {\n    constructor(name, stock) {\n        this.name = name;\n        this.stock = stock;\n    }\n\n    checkStock() {\n        return `${this.name} stock: ${this.stock}`;\n    }\n\n    sellItem(quantity) {\n        if (quantity > this.stock) {\n            return 'Not enough stock available';\n        }\n        this.stock -= quantity;\n        return `${quantity} ${this.name}(s) sold`;\n    }\n}\n\nclass VinylRecord extends MusicStoreInventory {\n    constructor(name, stock, isCollectible) {\n        super(name, stock);\n        this.isCollectible = isCollectible;\n    }\n\n    checkStock() {\n        let collectibleMessage = this.isCollectible ? ' (Collectible)' : '';\n        return `${this.name}${collectibleMessage} stock: ${this.stock}`;\n    }\n\n    sellItem(quantity) {\n        if (this.isCollectible) {\n            return `Cannot sell collectible ${this.name}`;\n        }\n        return super.sellItem(quantity);\n    }\n}\n\n// Example usage\nconst regularVinyl = new VinylRecord('Regular Vinyl', 100, false);\nconsole.log(regularVinyl.checkStock());\nconsole.log(regularVinyl.sellItem(10));\n\nconst collectibleVinyl = new VinylRecord('Collectible Vinyl', 10, true);\nconsole.log(collectibleVinyl.checkStock());\nconsole.log(collectibleVinyl.sellItem(1));\n```"
  },
  {
    "task": "Construct a parent class for a legal contract with methods for terms and conditions, then derive a rental agreement class that overrides these methods for tenant rights.",
    "code": "```javascript\nclass LegalContract {\n  termsAndConditions() {\n    return \"General terms and conditions of the legal contract.\";\n  }\n}\n\nclass RentalAgreement extends LegalContract {\n  termsAndConditions() {\n    return \"Specific terms and conditions for tenant rights in the rental agreement.\";\n  }\n}\n\n// Example usage\nconst contract = new LegalContract();\nconsole.log(contract.termsAndConditions());\n\nconst rental = new RentalAgreement();\nconsole.log(rental.termsAndConditions());\n```"
  },
  {
    "task": "Set up a base class for a journalism piece with methods for reporting and editing, and extend it with an investigative article subclass that overrides these methods for in-depth analysis.",
    "code": "```javascript\nclass JournalismPiece {\n    report() {\n        return \"Reporting the news.\";\n    }\n\n    edit() {\n        return \"Editing the piece.\";\n    }\n}\n\nclass InvestigativeArticle extends JournalismPiece {\n    report() {\n        return \"Reporting with in-depth analysis.\";\n    }\n\n    edit() {\n        return \"Editing with detailed scrutiny.\";\n    }\n}\n\n// Example usage\nconst article = new InvestigativeArticle();\nconsole.log(article.report()); // \"Reporting with in-depth analysis.\"\nconsole.log(article.edit());   // \"Editing with detailed scrutiny.\"\n```"
  },
  {
    "task": "Create a foundational class for a wildlife reserve with properties like area and species, and derive a bird sanctuary class that overrides the species property for avians.",
    "code": "```javascript\nclass WildlifeReserve {\n    constructor(area, species) {\n        this.area = area;\n        this.species = species;\n    }\n}\n\nclass BirdSanctuary extends WildlifeReserve {\n    constructor(area, species) {\n        super(area, species);\n        this.species = 'Avians';\n    }\n}\n```"
  },
  {
    "task": "Design a base class for a subscription box service with methods for curation and delivery, then create a gourmet food box subclass that overrides these methods for artisanal products.",
    "code": "```javascript\nclass SubscriptionBox {\n  curate() {\n    console.log(\"Curating standard products for the box.\");\n  }\n\n  deliver() {\n    console.log(\"Delivering the box to the customer.\");\n  }\n}\n\nclass GourmetFoodBox extends SubscriptionBox {\n  curate() {\n    console.log(\"Curating artisanal products for the gourmet food box.\");\n  }\n\n  deliver() {\n    console.log(\"Delivering the gourmet food box with care.\");\n  }\n}\n\n// Example usage\nconst gourmetBox = new GourmetFoodBox();\ngourmetBox.curate();\ngourmetBox.deliver();\n```"
  },
  {
    "task": "Develop a superclass for a fitness app with methods for tracking and motivation, then extend it with a running app subclass that overrides these methods for pace and distance.",
    "code": "```javascript\nclass FitnessApp {\n    track() {\n        return \"Tracking your fitness activities.\";\n    }\n\n    motivate() {\n        return \"Keep pushing your limits!\";\n    }\n}\n\nclass RunningApp extends FitnessApp {\n    track() {\n        return \"Tracking your running pace and distance.\";\n    }\n\n    motivate() {\n        return \"Great job! Keep running to reach your goals!\";\n    }\n}\n\n// Example usage:\nconst runningApp = new RunningApp();\nconsole.log(runningApp.track());\nconsole.log(runningApp.motivate());\n```"
  },
  {
    "task": "Implement a base class for a digital portfolio with methods for showcasing and updating, then create an artist portfolio subclass that overrides these methods for galleries.",
    "code": "```javascript\nclass DigitalPortfolio {\n    showcase() {\n        console.log(\"Showcasing digital portfolio.\");\n    }\n\n    update() {\n        console.log(\"Updating digital portfolio.\");\n    }\n}\n\nclass ArtistPortfolio extends DigitalPortfolio {\n    showcase() {\n        console.log(\"Showcasing artist portfolio gallery.\");\n    }\n\n    update() {\n        console.log(\"Updating artist portfolio gallery.\");\n    }\n}\n\n// Example usage\nconst artistPortfolio = new ArtistPortfolio();\nartistPortfolio.showcase(); // Output: Showcasing artist portfolio gallery.\nartistPortfolio.update();   // Output: Updating artist portfolio gallery.\n```"
  },
  {
    "task": "Construct a parent class for a gaming console with methods for performance and compatibility, then derive a next-gen console class that overrides these methods for new features.",
    "code": "```javascript\nclass GamingConsole {\n  performance() {\n    return \"Standard performance for gaming\";\n  }\n\n  compatibility() {\n    return \"Compatible with current generation games\";\n  }\n}\n\nclass NextGenConsole extends GamingConsole {\n  performance() {\n    return \"Enhanced performance with new hardware\";\n  }\n\n  compatibility() {\n    return \"Compatible with both current and next-generation games\";\n  }\n}\n\n// Example usage:\nconst oldConsole = new GamingConsole();\nconsole.log(oldConsole.performance());\nconsole.log(oldConsole.compatibility());\n\nconst newConsole = new NextGenConsole();\nconsole.log(newConsole.performance());\nconsole.log(newConsole.compatibility());\n```"
  },
  {
    "task": "Set up a base class for a cultural festival with methods for events and participation, and extend it with a music festival subclass that overrides these methods for performances.",
    "code": "```javascript\nclass CulturalFestival {\n    events() {\n        return \"General cultural events are scheduled.\";\n    }\n    \n    participation() {\n        return \"Open participation for all cultural events.\";\n    }\n}\n\nclass MusicFestival extends CulturalFestival {\n    events() {\n        return \"Music performances are scheduled.\";\n    }\n    \n    participation() {\n        return \"Participation is open for all music performers.\";\n    }\n}\n\nconst culturalFestival = new CulturalFestival();\nconsole.log(culturalFestival.events());\nconsole.log(culturalFestival.participation());\n\nconst musicFestival = new MusicFestival();\nconsole.log(musicFestival.events());\nconsole.log(musicFestival.participation());\n```"
  }
]