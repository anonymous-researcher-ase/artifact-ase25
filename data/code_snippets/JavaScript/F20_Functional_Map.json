[
  {
    "task": "Convert a list of temperatures from Celsius to Fahrenheit using a map function.",
    "code": "```javascript\nconst celsiusTemperatures = [0, 20, 30, 100];\nconst fahrenheitTemperatures = celsiusTemperatures.map(temp => (temp * 9/5) + 32);\n```"
  },
  {
    "task": "Use map to convert a list of lowercase words to uppercase.",
    "code": "```javascript\nconst words = ['apple', 'banana', 'cherry'];\nconst uppercasedWords = words.map(word => word.toUpperCase());\nconsole.log(uppercasedWords);\n```"
  },
  {
    "task": "Apply map to add a prefix to each string in a list of filenames.",
    "code": "```javascript\nconst filenames = ['file1.txt', 'file2.txt', 'file3.txt'];\nconst prefix = 'prefix_';\n\nconst prefixedFilenames = filenames.map(filename => prefix + filename);\n\nconsole.log(prefixedFilenames);\n```"
  },
  {
    "task": "Transform a list of numbers by squaring each element with a map function.",
    "code": "```javascript\nconst numbers = [1, 2, 3, 4, 5];\nconst squaredNumbers = numbers.map(number => number ** 2);\n```"
  },
  {
    "task": "Convert a list of integers to their string representations using map.",
    "code": "```javascript\nconst integers = [1, 2, 3, 4, 5];\nconst stringRepresentations = integers.map(num => num.toString());\n```"
  },
  {
    "task": "Use map to compute the length of each string in a list of sentences.",
    "code": "```javascript\nconst sentences = [\"Hello world\", \"Functional programming is powerful\", \"JavaScript map\"];\nconst lengths = sentences.map(sentence => sentence.length);\nconsole.log(lengths);\n```"
  },
  {
    "task": "Apply a discount to a list of prices using a map function.",
    "code": "```javascript\nconst prices = [100, 200, 300, 400, 500];\nconst discountRate = 0.1; // 10% discount\n\nconst discountedPrices = prices.map(price => price * (1 - discountRate));\n\nconsole.log(discountedPrices);\n```"
  },
  {
    "task": "Extract the first element from each tuple in a list of tuples with map.",
    "code": "```javascript\nconst tuples = [[1, 'a'], [2, 'b'], [3, 'c']];\nconst firstElements = tuples.map(tuple => tuple[0]);\nconsole.log(firstElements);\n```"
  },
  {
    "task": "Use map to round a list of floating-point numbers to two decimal places.",
    "code": "```javascript\nconst numbers = [1.2345, 2.3456, 3.4567, 4.5678];\nconst roundedNumbers = numbers.map(num => parseFloat(num.toFixed(2)));\n```"
  },
  {
    "task": "Capitalize the first letter of each word in a list of names using map.",
    "code": "```javascript\nconst names = [\"alice\", \"bob\", \"charlie\"];\n\nconst capitalizeFirstLetter = (str) => str.charAt(0).toUpperCase() + str.slice(1);\n\nconst capitalizedNames = names.map(capitalizeFirstLetter);\n\nconsole.log(capitalizedNames);\n```"
  },
  {
    "task": "Convert a list of JSON strings to corresponding dictionary objects with map.",
    "code": "```javascript\nconst jsonStrings = [\n    '{\"name\": \"Alice\", \"age\": 30}',\n    '{\"name\": \"Bob\", \"age\": 25}',\n    '{\"name\": \"Charlie\", \"age\": 35}'\n];\n\nconst dictionaryObjects = jsonStrings.map(JSON.parse);\n\nconsole.log(dictionaryObjects);\n```"
  },
  {
    "task": "Use map to double the value of each number in a list.",
    "code": "```javascript\nconst numbers = [1, 2, 3, 4, 5];\nconst doubledNumbers = numbers.map(num => num * 2);\n```"
  },
  {
    "task": "Transform a list of RGB tuples to hexadecimal color codes using map.",
    "code": "```javascript\nconst rgbToHex = rgb => {\n    const toHex = num => num.toString(16).padStart(2, '0');\n    return `#${rgb.map(toHex).join('')}`;\n};\n\nconst rgbList = [\n    [255, 0, 0],\n    [0, 255, 0],\n    [0, 0, 255],\n    [255, 255, 255]\n];\n\nconst hexList = rgbList.map(rgbToHex);\nconsole.log(hexList);\n```"
  },
  {
    "task": "Use map to compute the factorial of each number in a list.",
    "code": "```javascript\nfunction factorial(n) {\n    if (n === 0) return 1;\n    return n * factorial(n - 1);\n}\n\nconst numbers = [1, 2, 3, 4, 5];\nconst factorials = numbers.map(factorial);\n\nconsole.log(factorials);\n```"
  },
  {
    "task": "Translate a list of English words to Spanish using a map function.",
    "code": "```javascript\nconst englishToSpanish = {\n    \"hello\": \"hola\",\n    \"world\": \"mundo\",\n    \"cat\": \"gato\",\n    \"dog\": \"perro\",\n    \"food\": \"comida\"\n};\n\nconst englishWords = [\"hello\", \"world\", \"cat\", \"dog\", \"food\"];\n\nconst spanishWords = englishWords.map(word => englishToSpanish[word]);\n\nconsole.log(spanishWords);\n```"
  },
  {
    "task": "Apply a map function to format a list of dates from one format to another.",
    "code": "```javascript\nconst dates = ['2023-10-10', '2023-11-01', '2023-12-25'];\nconst formatDates = dates.map(date => {\n  const [year, month, day] = date.split('-');\n  return `${day}/${month}/${year}`;\n});\nconsole.log(formatDates);\n```"
  },
  {
    "task": "Use map to check if each number in a list is even, returning a list of booleans.",
    "code": "```javascript\nconst numbers = [1, 2, 3, 4, 5, 6];\nconst isEven = numbers.map(num => num % 2 === 0);\n```"
  },
  {
    "task": "Convert a list of binary strings to decimal numbers using map.",
    "code": "```javascript\nconst binaryStrings = ['101', '1101', '10010', '111111'];\nconst decimals = binaryStrings.map(binary => parseInt(binary, 2));\nconsole.log(decimals);\n```"
  },
  {
    "task": "Use map to append a domain name to a list of user names to create email addresses.",
    "code": "```javascript\nconst usernames = ['alice', 'bob', 'charlie'];\nconst domain = '@example.com';\n\nconst emailAddresses = usernames.map(username => username + domain);\n\nconsole.log(emailAddresses);\n```"
  },
  {
    "task": "Calculate the area of each circle in a list of radii using a map function.",
    "code": "```javascript\nconst radii = [3, 5, 7, 2];\nconst areas = radii.map(radius => Math.PI * radius * radius);\nconsole.log(areas);\n```"
  },
  {
    "task": "Use map to strip whitespace from the start and end of each string in a list.",
    "code": "```javascript\nconst strings = [\"  hello  \", \"  world \", \" example \"];\nconst trimmedStrings = strings.map(str => str.trim());\n```"
  },
  {
    "task": "Apply map to replace spaces with underscores in a list of file paths.",
    "code": "```javascript\nconst filePaths = ['/path/to/file one', '/another path/file two', '/yet another/file three'];\nconst updatedFilePaths = filePaths.map(path => path.replace(/ /g, '_'));\nconsole.log(updatedFilePaths);\n```"
  },
  {
    "task": "Convert a list of mixed-case strings to title case using map.",
    "code": "```javascript\nconst strings = [\"heLLo\", \"WOrld\", \"jaVascript\", \"coDing\"];\n\nconst toTitleCase = (str) => str.toLowerCase().replace(/\\b\\w/g, char => char.toUpperCase());\n\nconst titleCasedStrings = strings.map(toTitleCase);\n\nconsole.log(titleCasedStrings);\n```"
  },
  {
    "task": "Use map to filter out only the digits from a list of mixed alphanumeric strings.",
    "code": "```javascript\nconst alphanumericStrings = ['abc123', '456def', 'gh789', '0ijkl'];\nconst onlyDigits = alphanumericStrings.map(str => str.replace(/\\D/g, ''));\nconsole.log(onlyDigits); // Output: ['123', '456', '789', '0']\n```"
  },
  {
    "task": "Apply map to convert a list of Unix timestamps to readable date strings.",
    "code": "```javascript\nconst unixTimestamps = [1609459200, 1612137600, 1614556800]; // Example timestamps\nconst readableDates = unixTimestamps.map(timestamp => new Date(timestamp * 1000).toLocaleString());\nconsole.log(readableDates);\n```"
  },
  {
    "task": "Transform a list of dictionary objects by extracting a specific key's value using map.",
    "code": "```javascript\nconst extractKeyValues = (list, key) => list.map(item => item[key]);\n\n// Example usage:\nconst listOfObjects = [\n    { name: 'Alice', age: 30 },\n    { name: 'Bob', age: 25 },\n    { name: 'Charlie', age: 35 }\n];\n\nconst names = extractKeyValues(listOfObjects, 'name');\nconsole.log(names); // Output: ['Alice', 'Bob', 'Charlie']\n```"
  },
  {
    "task": "Use map to compute the cube of each number in a list.",
    "code": "```javascript\nconst numbers = [1, 2, 3, 4, 5];\nconst cubes = numbers.map(num => Math.pow(num, 3));\nconsole.log(cubes);\n```"
  },
  {
    "task": "Translate a list of URLs to their respective domain names using a map function.",
    "code": "```javascript\nconst urls = [\n  \"https://www.example.com/page1\",\n  \"https://subdomain.example.org\",\n  \"http://another-example.net\",\n  \"https://example.co.uk\"\n];\n\nconst getDomainName = (url) => {\n  const domain = new URL(url).hostname;\n  return domain.startsWith('www.') ? domain.slice(4) : domain;\n};\n\nconst domainNames = urls.map(getDomainName);\n\nconsole.log(domainNames);\n```"
  },
  {
    "task": "Use map to generate HTML list items from a list of text strings.",
    "code": "```javascript\nconst textStrings = ['Item 1', 'Item 2', 'Item 3'];\n\nconst htmlListItems = textStrings.map(text => `<li>${text}</li>`);\n\nconsole.log(htmlListItems);\n```"
  },
  {
    "task": "Convert a list of polar coordinates to Cartesian coordinates using map.",
    "code": "```javascript\nfunction polarToCartesian(polarCoordinates) {\n    return polarCoordinates.map(([r, theta]) => {\n        const x = r * Math.cos(theta);\n        const y = r * Math.sin(theta);\n        return [x, y];\n    });\n}\n\n// Example usage:\nconst polarCoordinates = [[1, Math.PI / 4], [2, Math.PI / 2], [3, Math.PI]];\nconst cartesianCoordinates = polarToCartesian(polarCoordinates);\nconsole.log(cartesianCoordinates);\n```"
  },
  {
    "task": "Use map to decode a list of Base64 encoded strings.",
    "code": "```javascript\nconst base64EncodedStrings = [\n  \"SGVsbG8gd29ybGQh\",\n  \"SmF2YVNjcmlwdCBpcyBmdW4h\",\n  \"VXNlIG1hcCBmb3IgZnVuY3Rpb25hbCBwcm9ncmFtbWluZw==\"\n];\n\nconst decodedStrings = base64EncodedStrings.map(encodedString => \n  Buffer.from(encodedString, 'base64').toString('utf-8')\n);\n\nconsole.log(decodedStrings);\n```"
  },
  {
    "task": "Convert a list of English sentences to Pig Latin using a map function.",
    "code": "```javascript\nfunction toPigLatin(sentence) {\n    return sentence.split(' ').map(word => {\n        const firstVowelIndex = word.search(/[aeiouAEIOU]/);\n        if (firstVowelIndex > 0) {\n            return word.slice(firstVowelIndex) + word.slice(0, firstVowelIndex) + 'ay';\n        }\n        return word + 'way';\n    }).join(' ');\n}\n\nfunction convertSentencesToPigLatin(sentences) {\n    return sentences.map(toPigLatin);\n}\n\n// Example usage:\nconst englishSentences = [\n    \"Hello world\",\n    \"This is a test sentence\",\n    \"Pig Latin is fun\"\n];\n\nconst pigLatinSentences = convertSentencesToPigLatin(englishSentences);\nconsole.log(pigLatinSentences);\n```"
  },
  {
    "task": "Use map to anonymize a list of email addresses by masking them.",
    "code": "```javascript\nconst emails = [\"user1@example.com\", \"user2@example.com\", \"user3@example.com\"];\n\nconst anonymizeEmail = (email) => {\n  const [localPart, domain] = email.split('@');\n  const maskedLocal = localPart.replace(/./g, '*');\n  return `${maskedLocal}@${domain}`;\n};\n\nconst anonymizedEmails = emails.map(anonymizeEmail);\n\nconsole.log(anonymizedEmails);\n```"
  },
  {
    "task": "Apply map to reverse each string in a list of words.",
    "code": "```javascript\nconst words = [\"hello\", \"world\", \"example\", \"strings\"];\nconst reversedWords = words.map(word => word.split('').reverse().join(''));\nconsole.log(reversedWords);\n```"
  },
  {
    "task": "Convert a list of hexadecimal color codes to RGB tuples using map.",
    "code": "```javascript\nconst hexToRgb = hex => {\n    const bigint = parseInt(hex.slice(1), 16);\n    const r = (bigint >> 16) & 255;\n    const g = (bigint >> 8) & 255;\n    const b = bigint & 255;\n    return [r, g, b];\n};\n\nconst hexColors = ['#FF5733', '#33FF57', '#3357FF'];\nconst rgbColors = hexColors.map(hexToRgb);\nconsole.log(rgbColors);\n```"
  },
  {
    "task": "Use map to increment each integer in a list by a constant value.",
    "code": "```javascript\nconst incrementBy = (numbers, increment) => numbers.map(num => num + increment);\n\nconst numbers = [1, 2, 3, 4, 5];\nconst incrementValue = 1;\nconst incrementedNumbers = incrementBy(numbers, incrementValue);\n\nconsole.log(incrementedNumbers);\n```"
  },
  {
    "task": "Calculate the square root of each number in a list using a map function.",
    "code": "```javascript\nconst numbers = [1, 4, 9, 16, 25];\nconst squareRoots = numbers.map(Math.sqrt);\nconsole.log(squareRoots);\n```"
  },
  {
    "task": "Use map to convert a list of currency amounts from dollars to euros.",
    "code": "```javascript\nconst dollarAmounts = [10, 20, 50, 100];\nconst conversionRate = 0.85; // Example conversion rate from dollars to euros\n\nconst euroAmounts = dollarAmounts.map(amount => amount * conversionRate);\n\nconsole.log(euroAmounts);\n```"
  },
  {
    "task": "Extract the domain from each email address in a list using map.",
    "code": "```javascript\nconst emails = [\"user1@example.com\", \"user2@domain.com\", \"user3@anotherdomain.org\"];\nconst domains = emails.map(email => email.split('@')[1]);\nconsole.log(domains);\n```"
  },
  {
    "task": "Use map to serialize a list of objects into JSON strings.",
    "code": "```javascript\nconst objects = [\n  { name: 'Alice', age: 30 },\n  { name: 'Bob', age: 25 },\n  { name: 'Charlie', age: 35 }\n];\n\nconst jsonStrings = objects.map(obj => JSON.stringify(obj));\n```"
  },
  {
    "task": "Transform a list of file sizes from bytes to kilobytes using map.",
    "code": "```javascript\nconst fileSizesInBytes = [1024, 2048, 5120, 1048576];\nconst fileSizesInKilobytes = fileSizesInBytes.map(size => size / 1024);\n```"
  },
  {
    "task": "Use map to append a suffix to each string in a list of identifiers.",
    "code": "```javascript\nconst identifiers = ['id1', 'id2', 'id3'];\nconst suffix = '_suffix';\n\nconst modifiedIdentifiers = identifiers.map(identifier => identifier + suffix);\n\nconsole.log(modifiedIdentifiers);\n```"
  },
  {
    "task": "Apply map to convert measurements from inches to centimeters in a list.",
    "code": "```javascript\nconst inches = [1, 5, 10, 15, 20];\nconst centimeters = inches.map(inch => inch * 2.54);\nconsole.log(centimeters);\n```"
  },
  {
    "task": "Use map to encrypt a list of plaintext messages using a simple cipher.",
    "code": "```javascript\nconst encryptMessage = (message) => {\n  const shift = 3;\n  return message.split('').map(char => {\n    const charCode = char.charCodeAt(0);\n    if (char >= 'a' && char <= 'z') {\n      return String.fromCharCode((charCode - 97 + shift) % 26 + 97);\n    } else if (char >= 'A' && char <= 'Z') {\n      return String.fromCharCode((charCode - 65 + shift) % 26 + 65);\n    }\n    return char;\n  }).join('');\n};\n\nconst plaintextMessages = ['hello', 'world', 'JavaScript'];\nconst encryptedMessages = plaintextMessages.map(encryptMessage);\nconsole.log(encryptedMessages);\n```"
  },
  {
    "task": "Transform a list of date strings to day of the week names using a map function.",
    "code": "```javascript\nconst dateStrings = [\"2023-10-01\", \"2023-10-02\", \"2023-10-03\"];\n\nconst getDayOfWeek = dateStr => {\n  const date = new Date(dateStr);\n  return date.toLocaleDateString('en-US', { weekday: 'long' });\n};\n\nconst daysOfWeek = dateStrings.map(getDayOfWeek);\n\nconsole.log(daysOfWeek);\n```"
  },
  {
    "task": "Use map to derive the absolute value of each number in a list.",
    "code": "```javascript\nconst numbers = [-1, -2, 3, 4, -5];\nconst absoluteValues = numbers.map(Math.abs);\nconsole.log(absoluteValues);\n```"
  },
  {
    "task": "Convert a list of lowercase hexadecimal strings to uppercase using map.",
    "code": "```javascript\nconst hexStrings = ['1a', '2b', '3c', '4d', '5e'];\n\nconst upperHexStrings = hexStrings.map(str => str.toUpperCase());\n\nconsole.log(upperHexStrings);\n```"
  },
  {
    "task": "Use map to find the maximum value in a list of lists of numbers.",
    "code": "```javascript\nconst lists = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n];\n\nconst maxValues = lists.map(list => Math.max(...list));\nconst overallMax = Math.max(...maxValues);\n\nconsole.log(overallMax);\n```"
  },
  {
    "task": "Apply map to extract the year from each date in a list of date objects.",
    "code": "```javascript\nconst dates = [\n  new Date('2020-01-01'),\n  new Date('2021-06-15'),\n  new Date('2022-09-30')\n];\n\nconst years = dates.map(date => date.getFullYear());\n\nconsole.log(years);\n```"
  },
  {
    "task": "Use map to prepend a country code to each phone number in a list.",
    "code": "```javascript\nconst phoneNumbers = ['1234567890', '9876543210', '5555555555'];\nconst countryCode = '+1';\n\nconst updatedPhoneNumbers = phoneNumbers.map(number => countryCode + number);\n\nconsole.log(updatedPhoneNumbers);\n```"
  },
  {
    "task": "Capitalize the last letter of each word in a list using a map function.",
    "code": "```javascript\nconst capitalizeLastLetter = words => words.map(word => {\n  const lastCharIndex = word.length - 1;\n  return word.slice(0, lastCharIndex) + word.charAt(lastCharIndex).toUpperCase();\n});\n\n// Example usage:\nconst words = ['hello', 'world', 'example'];\nconst result = capitalizeLastLetter(words);\nconsole.log(result); // ['hellO', 'worlD', 'examplE']\n```"
  },
  {
    "task": "Use map to transform a list of strings by removing all vowels.",
    "code": "```javascript\nconst removeVowels = str => str.replace(/[aeiou]/gi, '');\nconst strings = ['example', 'strings', 'with', 'vowels'];\nconst transformedStrings = strings.map(removeVowels);\nconsole.log(transformedStrings);\n```"
  },
  {
    "task": "Convert a list of music notes to their corresponding frequencies using map.",
    "code": "```javascript\nconst noteFrequencies = {\n  'C4': 261.63,\n  'D4': 293.66,\n  'E4': 329.63,\n  'F4': 349.23,\n  'G4': 392.00,\n  'A4': 440.00,\n  'B4': 493.88\n};\n\nconst notes = ['C4', 'E4', 'G4', 'A4'];\n\nconst frequencies = notes.map(note => noteFrequencies[note]);\n\nconsole.log(frequencies);\n```"
  },
  {
    "task": "Use map to find the reciprocal of each number in a list.",
    "code": "```javascript\nconst numbers = [2, 4, 8, 16];\nconst reciprocals = numbers.map(num => 1 / num);\nconsole.log(reciprocals);\n```"
  },
  {
    "task": "Transform a list of URLs to their shortened versions using a map function.",
    "code": "```javascript\nfunction shortenUrl(url) {\n    // Dummy function for URL shortening\n    return url.replace('www.', 'short.');\n}\n\nconst urls = [\n    'https://www.example.com',\n    'https://www.anotherexample.com',\n    'https://www.somethingelse.com'\n];\n\nconst shortenedUrls = urls.map(shortenUrl);\n\nconsole.log(shortenedUrls);\n```"
  },
  {
    "task": "Use map to generate a list of initials from a list of full names.",
    "code": "```javascript\nconst fullNames = [\"John Doe\", \"Jane Smith\", \"Alice Johnson\"];\nconst initials = fullNames.map(name => name.split(' ').map(word => word[0]).join(''));\nconsole.log(initials);\n```"
  },
  {
    "task": "Convert a list of decimal numbers to their binary string representations using map.",
    "code": "```javascript\nconst decimals = [10, 15, 255, 1024];\nconst binaryStrings = decimals.map(num => num.toString(2));\nconsole.log(binaryStrings);\n```"
  },
  {
    "task": "Use map to adjust the brightness of each color in a list of RGB tuples.",
    "code": "```javascript\nfunction adjustBrightness(colors, factor) {\n    return colors.map(([r, g, b]) => [\n        Math.min(255, Math.max(0, Math.round(r * factor))),\n        Math.min(255, Math.max(0, Math.round(g * factor))),\n        Math.min(255, Math.max(0, Math.round(b * factor)))\n    ]);\n}\n\nconst colors = [\n    [100, 150, 200],\n    [50, 75, 100],\n    [255, 255, 255]\n];\n\nconst adjustedColors = adjustBrightness(colors, 1.2);\nconsole.log(adjustedColors);\n```"
  },
  {
    "task": "Apply map to filter out only alphabetic characters from a list of strings.",
    "code": "```javascript\nconst strings = [\"123abc\", \"hello!\", \"456world\", \"@@test@@\"];\n\nconst filterAlphabetic = strings.map(str => str.replace(/[^a-zA-Z]/g, ''));\n\nconsole.log(filterAlphabetic);\n```"
  },
  {
    "task": "Use map to compute the prime factorization of each number in a list.",
    "code": "```javascript\nfunction primeFactors(n) {\n    const factors = [];\n    let divisor = 2;\n    while (n >= 2) {\n        if (n % divisor === 0) {\n            factors.push(divisor);\n            n /= divisor;\n        } else {\n            divisor++;\n        }\n    }\n    return factors;\n}\n\nconst numbers = [10, 15, 21, 33];\nconst primeFactorizations = numbers.map(primeFactors);\nconsole.log(primeFactorizations);\n```"
  },
  {
    "task": "Calculate the exponential of each number in a list using a map function.",
    "code": "```javascript\nconst numbers = [1, 2, 3, 4, 5];\nconst exponentials = numbers.map(Math.exp);\nconsole.log(exponentials);\n```"
  },
  {
    "task": "Use map to convert a list of text messages to morse code.",
    "code": "```javascript\nconst textToMorse = {\n  'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.',\n  'g': '--.', 'h': '....', 'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..',\n  'm': '--', 'n': '-.', 'o': '---', 'p': '.--.', 'q': '--.-', 'r': '.-.',\n  's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-',\n  'y': '-.--', 'z': '--..', '0': '-----', '1': '.----', '2': '..---', \n  '3': '...--', '4': '....-', '5': '.....', '6': '-....', '7': '--...', \n  '8': '---..', '9': '----.', ' ': '/'\n};\n\nconst convertToMorse = (messages) => {\n  return messages.map(message => \n    message.toLowerCase().split('').map(char => textToMorse[char] || '').join(' ')\n  );\n};\n\n// Example usage:\nconst messages = [\"Hello World\", \"Sos\"];\nconst morseMessages = convertToMorse(messages);\nconsole.log(morseMessages);\n```"
  },
  {
    "task": "Transform a list of JSON objects to XML strings using a map function.",
    "code": "```javascript\nconst jsonObjects = [\n    { name: \"John\", age: 30 },\n    { name: \"Jane\", age: 25 }\n];\n\nconst jsonToXml = (obj) => {\n    const xml = Object.entries(obj)\n        .map(([key, value]) => `<${key}>${value}</${key}>`)\n        .join('');\n    return `<object>${xml}</object>`;\n};\n\nconst xmlStrings = jsonObjects.map(jsonToXml);\n\nconsole.log(xmlStrings);\n```"
  },
  {
    "task": "Use map to extract the extension from each filename in a list.",
    "code": "```javascript\nconst filenames = ['example.txt', 'photo.jpg', 'script.js', 'document.pdf'];\n\nconst extensions = filenames.map(filename => {\n    const parts = filename.split('.');\n    return parts.length > 1 ? parts.pop() : '';\n});\n\nconsole.log(extensions);\n```"
  },
  {
    "task": "Convert a list of temperatures from Fahrenheit to Kelvin using map.",
    "code": "```javascript\nconst fahrenheitToKelvin = fahrenheit => (fahrenheit + 459.67) * (5/9);\n\nconst fahrenheitTemperatures = [32, 68, 100, 212];\nconst kelvinTemperatures = fahrenheitTemperatures.map(fahrenheitToKelvin);\n\nconsole.log(kelvinTemperatures);\n```"
  },
  {
    "task": "Use map to calculate the perimeter of each rectangle in a list of dimensions.",
    "code": "```javascript\nconst rectangles = [\n    { width: 5, height: 10 },\n    { width: 8, height: 6 },\n    { width: 12, height: 7 }\n];\n\nconst perimeters = rectangles.map(rectangle => 2 * (rectangle.width + rectangle.height));\n\nconsole.log(perimeters);\n```"
  },
  {
    "task": "Apply map to format a list of phone numbers into a standard format.",
    "code": "```javascript\nconst phoneNumbers = [\"1234567890\", \"9876543210\", \"5551234567\"];\n\nconst formattedNumbers = phoneNumbers.map(number => {\n  return `(${number.slice(0, 3)}) ${number.slice(3, 6)}-${number.slice(6)}`;\n});\n\nconsole.log(formattedNumbers);\n```"
  },
  {
    "task": "Use map to generate a hashed version of passwords from a list.",
    "code": "```javascript\nconst passwords = ['password1', '123456', 'qwerty'];\nconst hashedPasswords = passwords.map(password => {\n  return password.split('').reduce((hash, char) => {\n    return hash + char.charCodeAt(0);\n  }, '');\n});\n\nconsole.log(hashedPasswords);\n```"
  },
  {
    "task": "Convert a list of text paragraphs to a word count using map.",
    "code": "```javascript\nconst paragraphs = [\n  \"This is the first paragraph.\",\n  \"Here is the second paragraph with more words.\",\n  \"The final paragraph is here.\"\n];\n\nconst wordCounts = paragraphs.map(paragraph => paragraph.split(' ').length);\n\nconsole.log(wordCounts);\n```"
  },
  {
    "task": "Use map to remove punctuation from each string in a list of sentences.",
    "code": "```javascript\nconst sentences = [\n  \"Hello, world!\",\n  \"This is a test.\",\n  \"How are you doing?\",\n  \"Let's code.\"\n];\n\nconst removePunctuation = str => str.replace(/[.,!?']/g, \"\");\n\nconst cleanedSentences = sentences.map(removePunctuation);\n\nconsole.log(cleanedSentences);\n```"
  },
  {
    "task": "Transform a list of URLs to their base domain using a map function.",
    "code": "```javascript\nconst urls = [\n  'https://www.example.com/path',\n  'http://subdomain.example.org/anotherpath',\n  'https://example.net'\n];\n\nconst getBaseDomain = url => {\n  const urlObj = new URL(url);\n  return urlObj.hostname;\n};\n\nconst baseDomains = urls.map(getBaseDomain);\n\nconsole.log(baseDomains);\n```"
  },
  {
    "task": "Use map to translate a list of expressions to their symbolic algebraic forms.",
    "code": "```javascript\nconst expressions = ['2x + 3x', '4y^2 - y', '5z + z - z'];\nconst algebraicForms = expressions.map(expr => {\n    return expr.replace(/([\\d]*)([a-z])\\s*\\+\\s*([\\d]*)([a-z])/g, (match, p1, p2, p3, p4) => {\n        let coefficient1 = parseInt(p1) || 0;\n        let coefficient2 = parseInt(p3) || 0;\n        return `${coefficient1 + coefficient2}${p2}`;\n    }).replace(/([\\d]*)([a-z])\\s*\\-\\s*([\\d]*)([a-z])/g, (match, p1, p2, p3, p4) => {\n        let coefficient1 = parseInt(p1) || 0;\n        let coefficient2 = parseInt(p3) || 0;\n        return `${coefficient1 - coefficient2}${p2}`;\n    });\n});\n\nconsole.log(algebraicForms);\n```"
  },
  {
    "task": "Apply map to convert a list of ASCII codes to corresponding characters.",
    "code": "```javascript\nconst asciiCodes = [65, 66, 67, 68, 69];\nconst characters = asciiCodes.map(code => String.fromCharCode(code));\nconsole.log(characters);\n```"
  },
  {
    "task": "Use map to transform a list of text strings to their lemmatized forms.",
    "code": "```javascript\nconst lemmatize = (word) => {\n  // Placeholder for lemmatization logic\n  // Replace this with actual lemmatization functionality\n  return word.toLowerCase(); // Simple example: converting to lowercase\n};\n\nconst textStrings = ['Running', 'Baked', 'Cars', 'Better'];\n\nconst lemmatizedStrings = textStrings.map(lemmatize);\n\nconsole.log(lemmatizedStrings);\n```"
  },
  {
    "task": "Convert a list of HTML strings to plain text using map.",
    "code": "```javascript\nconst htmlStrings = [\n  \"<div>Hello</div>\",\n  \"<p>World</p>\",\n  \"<span>This is a test</span>\"\n];\n\nconst plainTextArray = htmlStrings.map(html => {\n  const tempDiv = document.createElement(\"div\");\n  tempDiv.innerHTML = html;\n  return tempDiv.textContent || tempDiv.innerText || \"\";\n});\n\nconsole.log(plainTextArray);\n```"
  },
  {
    "task": "Use map to create a summary of each article in a list of texts.",
    "code": "```javascript\nconst texts = [\n    \"JavaScript is a versatile language used for web development.\",\n    \"Python is popular for data analysis and machine learning.\",\n    \"Java is a robust language commonly used in enterprise applications.\"\n];\n\nconst createSummary = text => {\n    const words = text.split(\" \");\n    return words.slice(0, 5).join(\" \") + \"...\";\n};\n\nconst summaries = texts.map(createSummary);\n\nconsole.log(summaries);\n```"
  },
  {
    "task": "Transform a list of paths to their absolute paths using a map function.",
    "code": "```javascript\nconst paths = ['./file1.txt', '../file2.txt', '/dir/file3.txt'];\nconst absolutePaths = paths.map(path => require('path').resolve(path));\nconsole.log(absolutePaths);\n```"
  },
  {
    "task": "Use map to generate QR codes from a list of URLs.",
    "code": "```javascript\nconst QRCode = require('qrcode');\n\nconst urls = [\n  'https://example.com',\n  'https://another-example.com',\n  'https://yet-another-example.com'\n];\n\nconst generateQRCodes = async (urlList) => {\n  return Promise.all(urlList.map(url => QRCode.toDataURL(url)));\n};\n\ngenerateQRCodes(urls).then(qrCodes => {\n  qrCodes.forEach(qrCode => {\n    console.log(qrCode);\n  });\n}).catch(error => {\n  console.error('Error generating QR codes:', error);\n});\n```"
  },
  {
    "task": "Convert a list of angles from degrees to radians using map.",
    "code": "```javascript\nconst degreesToRadians = degreesArray => degreesArray.map(degree => degree * (Math.PI / 180));\n\nconst degrees = [0, 30, 45, 60, 90, 180];\nconst radians = degreesToRadians(degrees);\n\nconsole.log(radians);\n```"
  },
  {
    "task": "Use map to anonymize a list of IP addresses by masking parts of them.",
    "code": "```javascript\nconst anonymizeIP = (ip) => {\n    return ip.split('.').map((octet, index) => index < 3 ? '*' : octet).join('.');\n};\n\nconst ipAddresses = ['192.168.1.1', '10.0.0.5', '172.16.0.3'];\nconst anonymizedIPs = ipAddresses.map(anonymizeIP);\n\nconsole.log(anonymizedIPs);\n```"
  },
  {
    "task": "Transform a list of tuples by swapping their elements using a map function.",
    "code": "```javascript\nconst tuples = [[1, 2], [3, 4], [5, 6]];\n\nconst swappedTuples = tuples.map(([a, b]) => [b, a]);\n\nconsole.log(swappedTuples);\n```"
  },
  {
    "task": "Use map to compute the greatest common divisor of pairs in a list of number pairs.",
    "code": "```javascript\nfunction gcd(a, b) {\n    while (b !== 0) {\n        [a, b] = [b, a % b];\n    }\n    return a;\n}\n\nconst pairs = [[48, 18], [56, 98], [101, 103]];\nconst gcdResults = pairs.map(([a, b]) => gcd(a, b));\n\nconsole.log(gcdResults);\n```"
  },
  {
    "task": "Convert a list of file paths to their directory names using map.",
    "code": "```javascript\nconst filePaths = [\n  '/home/user/documents/report.docx',\n  '/var/log/system.log',\n  '/usr/local/bin/script.sh'\n];\n\nconst directoryNames = filePaths.map(filePath => filePath.substring(0, filePath.lastIndexOf('/')));\n\nconsole.log(directoryNames);\n```"
  },
  {
    "task": "Use map to replace each vowel in a list of strings with a specific character.",
    "code": "```javascript\nconst replaceVowels = (strings, char) => {\n  const vowels = 'aeiouAEIOU';\n  return strings.map(str => \n    str.split('').map(letter => \n      vowels.includes(letter) ? char : letter\n    ).join('')\n  );\n};\n\n// Example usage:\nconst words = [\"apple\", \"banana\", \"cherry\"];\nconst result = replaceVowels(words, '*');\nconsole.log(result); // [\"*ppl*\", \"b*n*n*\", \"ch*rry\"]\n```"
  },
  {
    "task": "Transform a list of integers to their hexadecimal representations using map.",
    "code": "```javascript\nconst integers = [10, 15, 255, 4096];\nconst hexadecimals = integers.map(num => num.toString(16));\nconsole.log(hexadecimals);\n```"
  },
  {
    "task": "Use map to apply a transformation matrix to a list of 2D vectors.",
    "code": "```javascript\nconst vectors = [[1, 2], [3, 4], [5, 6]];\nconst transformationMatrix = [\n  [2, 0],\n  [0, 2]\n];\n\nconst transformedVectors = vectors.map(([x, y]) => [\n  x * transformationMatrix[0][0] + y * transformationMatrix[0][1],\n  x * transformationMatrix[1][0] + y * transformationMatrix[1][1]\n]);\n\nconsole.log(transformedVectors);\n```"
  },
  {
    "task": "Convert a list of text strings to their phonetic alphabet equivalents using map.",
    "code": "```javascript\nconst phoneticAlphabet = {\n  'A': 'Alpha', 'B': 'Bravo', 'C': 'Charlie', 'D': 'Delta', 'E': 'Echo',\n  'F': 'Foxtrot', 'G': 'Golf', 'H': 'Hotel', 'I': 'India', 'J': 'Juliett',\n  'K': 'Kilo', 'L': 'Lima', 'M': 'Mike', 'N': 'November', 'O': 'Oscar',\n  'P': 'Papa', 'Q': 'Quebec', 'R': 'Romeo', 'S': 'Sierra', 'T': 'Tango',\n  'U': 'Uniform', 'V': 'Victor', 'W': 'Whiskey', 'X': 'X-ray', 'Y': 'Yankee',\n  'Z': 'Zulu'\n};\n\nconst convertToPhonetic = (textList) => {\n  return textList.map(text => \n    text.toUpperCase().split('').map(letter => phoneticAlphabet[letter] || letter).join(' ')\n  );\n};\n\nconst textList = ['hello', 'world'];\nconst phoneticList = convertToPhonetic(textList);\nconsole.log(phoneticList);\n```"
  },
  {
    "task": "Use map to determine if each word in a list is a palindrome, returning booleans.",
    "code": "```javascript\nconst words = ['level', 'world', 'radar', 'hello'];\n\nconst isPalindrome = words.map(word => {\n  const reversed = word.split('').reverse().join('');\n  return word === reversed;\n});\n\nconsole.log(isPalindrome);\n```"
  },
  {
    "task": "Transform a list of dictionaries by renaming a specified key using a map function.",
    "code": "```javascript\nfunction renameKeyInList(objects, oldKey, newKey) {\n    return objects.map(obj => {\n        const {[oldKey]: value, ...rest} = obj;\n        return {\n            ...rest,\n            [newKey]: value\n        };\n    });\n}\n\n// Example usage:\nconst data = [\n    {name: 'Alice', age: 25},\n    {name: 'Bob', age: 30}\n];\n\nconst transformedData = renameKeyInList(data, 'name', 'firstName');\nconsole.log(transformedData);\n```"
  },
  {
    "task": "Use map to compute the logarithm of each number in a list.",
    "code": "```javascript\nconst numbers = [1, 10, 100, 1000, 10000];\nconst logarithms = numbers.map(Math.log);\n```"
  },
  {
    "task": "Convert a list of image file paths to grayscale versions using map.",
    "code": "```javascript\nconst toGrayscale = (imagePath) => {\n  // Placeholder for actual grayscale conversion logic\n  return `grayscale_${imagePath}`;\n};\n\nconst imagePaths = [\n  'image1.jpg',\n  'image2.png',\n  'image3.bmp'\n];\n\nconst grayscaleImages = imagePaths.map(toGrayscale);\n\nconsole.log(grayscaleImages);\n```"
  },
  {
    "task": "Use map to flatten a list of lists of strings into a single list of strings.",
    "code": "```javascript\nconst flatten = lists => [].concat(...lists.map(list => list));\n\nconst listsOfStrings = [['hello', 'world'], ['foo', 'bar'], ['baz']];\nconst flattenedList = flatten(listsOfStrings);\n\nconsole.log(flattenedList); // Output: ['hello', 'world', 'foo', 'bar', 'baz']\n```"
  },
  {
    "task": "Transform a list of temperature readings to temperature anomalies using a map function.",
    "code": "```javascript\nconst temperatureReadings = [15, 18, 20, 25, 30];\nconst averageTemperature = temperatureReadings.reduce((acc, temp) => acc + temp, 0) / temperatureReadings.length;\n\nconst temperatureAnomalies = temperatureReadings.map(temp => temp - averageTemperature);\n\nconsole.log(temperatureAnomalies);\n```"
  }
]