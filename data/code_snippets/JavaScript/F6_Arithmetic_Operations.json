[
  {
    "task": "Write a function that takes two numbers and returns their sum.",
    "code": "```javascript\nfunction addNumbers(a, b) {\n    return a + b;\n}\n```"
  },
  {
    "task": "Create a program that calculates the difference between two given integers.",
    "code": "```javascript\nfunction calculateDifference(a, b) {\n    return a - b;\n}\n\n// Example usage:\nconst num1 = 10;\nconst num2 = 5;\nconst difference = calculateDifference(num1, num2);\nconsole.log(difference);\n```"
  },
  {
    "task": "Design a function to multiply two floating-point numbers and return the result.",
    "code": "```javascript\nfunction multiplyFloats(num1, num2) {\n    return num1 * num2;\n}\n```"
  },
  {
    "task": "Implement a function that divides two numbers and handles division by zero exceptions.",
    "code": "```javascript\nfunction divideNumbers(a, b) {\n    if (b === 0) {\n        throw new Error(\"Division by zero is not allowed.\");\n    }\n    return a / b;\n}\n```"
  },
  {
    "task": "Build a calculator that can perform addition, subtraction, multiplication, and division on user-provided inputs.",
    "code": "```javascript\nfunction calculator() {\n  const operator = prompt('Enter operator ( either +, -, * or / ): ');\n  const number1 = parseFloat(prompt('Enter first number: '));\n  const number2 = parseFloat(prompt('Enter second number: '));\n\n  let result;\n  if (operator === '+') {\n    result = number1 + number2;\n  } else if (operator === '-') {\n    result = number1 - number2;\n  } else if (operator === '*') {\n    result = number1 * number2;\n  } else if (operator === '/') {\n    result = number1 / number2;\n  } else {\n    result = 'Invalid operator';\n  }\n\n  alert('Result: ' + result);\n}\n\ncalculator();\n```"
  },
  {
    "task": "Write a script to compute the average of a list of numbers using arithmetic operations.",
    "code": "```javascript\nfunction computeAverage(numbers) {\n    if (numbers.length === 0) return 0;\n    let sum = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    return sum / numbers.length;\n}\n\n// Example usage:\nconst numbers = [5, 10, 15, 20];\nconst average = computeAverage(numbers);\nconsole.log(average);\n```"
  },
  {
    "task": "Create a function that returns the remainder of the division of two integers.",
    "code": "```javascript\nfunction getRemainder(a, b) {\n    return a % b;\n}\n```"
  },
  {
    "task": "Develop a function that can add a variable number of arguments and return the total.",
    "code": "```javascript\nfunction add(...args) {\n    return args.reduce((sum, num) => sum + num, 0);\n}\n```"
  },
  {
    "task": "Write a program that subtracts a series of numbers from an initial value.",
    "code": "```javascript\nfunction subtractNumbers(initialValue, numbers) {\n    return numbers.reduce((accumulator, currentValue) => accumulator - currentValue, initialValue);\n}\n\n// Example usage:\nconst initialValue = 100;\nconst numbers = [10, 20, 30];\nconst result = subtractNumbers(initialValue, numbers);\nconsole.log(result); // Output: 40\n```"
  },
  {
    "task": "Implement a function that multiplies all elements in an array and returns the product.",
    "code": "```javascript\nfunction multiplyArrayElements(arr) {\n    return arr.reduce((product, num) => product * num, 1);\n}\n```"
  },
  {
    "task": "Design a program that divides a number by another and rounds the result to two decimal places.",
    "code": "```javascript\nfunction divideAndRound(a, b) {\n    if (b === 0) {\n        throw new Error(\"Cannot divide by zero\");\n    }\n    const result = a / b;\n    return Math.round(result * 100) / 100;\n}\n\n// Example usage:\nconst result = divideAndRound(10, 3);\nconsole.log(result); // Output will be 3.33\n```"
  },
  {
    "task": "Create a function that performs arithmetic operations on complex numbers.",
    "code": "```javascript\nclass ComplexNumber {\n    constructor(real, imaginary) {\n        this.real = real;\n        this.imaginary = imaginary;\n    }\n\n    add(other) {\n        return new ComplexNumber(this.real + other.real, this.imaginary + other.imaginary);\n    }\n\n    subtract(other) {\n        return new ComplexNumber(this.real - other.real, this.imaginary - other.imaginary);\n    }\n\n    multiply(other) {\n        const realPart = this.real * other.real - this.imaginary * other.imaginary;\n        const imaginaryPart = this.real * other.imaginary + this.imaginary * other.real;\n        return new ComplexNumber(realPart, imaginaryPart);\n    }\n\n    divide(other) {\n        const denominator = other.real * other.real + other.imaginary * other.imaginary;\n        const realPart = (this.real * other.real + this.imaginary * other.imaginary) / denominator;\n        const imaginaryPart = (this.imaginary * other.real - this.real * other.imaginary) / denominator;\n        return new ComplexNumber(realPart, imaginaryPart);\n    }\n}\n\nfunction performArithmeticOperations(c1, c2, operation) {\n    switch (operation) {\n        case 'add':\n            return c1.add(c2);\n        case 'subtract':\n            return c1.subtract(c2);\n        case 'multiply':\n            return c1.multiply(c2);\n        case 'divide':\n            return c1.divide(c2);\n        default:\n            throw new Error('Unknown operation');\n    }\n}\n```"
  },
  {
    "task": "Write a function to calculate the area of a rectangle given its length and width using multiplication.",
    "code": "```javascript\nfunction calculateRectangleArea(length, width) {\n    return length * width;\n}\n```"
  },
  {
    "task": "Build a program that converts a price in dollars to another currency using multiplication with exchange rates.",
    "code": "```javascript\nfunction convertCurrency(amountInDollars, exchangeRate) {\n    return amountInDollars * exchangeRate;\n}\n\nconst priceInDollars = 100;\nconst exchangeRate = 0.85; // Example: 1 USD to EUR\nconst convertedPrice = convertCurrency(priceInDollars, exchangeRate);\n\nconsole.log(`Price in converted currency: ${convertedPrice}`);\n```"
  },
  {
    "task": "Implement a function that checks if a number is divisible by another and returns a boolean.",
    "code": "```javascript\nfunction isDivisible(num1, num2) {\n    return num2 !== 0 && num1 % num2 === 0;\n}\n```"
  },
  {
    "task": "Write a script to sum the digits of an integer using arithmetic operations.",
    "code": "```javascript\nfunction sumDigits(number) {\n    let sum = 0;\n    number = Math.abs(number);\n    while (number > 0) {\n        sum += number % 10;\n        number = Math.floor(number / 10);\n    }\n    return sum;\n}\n\n// Example usage\nconst result = sumDigits(12345);\nconsole.log(result); // Output: 15\n```"
  },
  {
    "task": "Develop a function that applies a discount percentage to a price using subtraction and multiplication.",
    "code": "```javascript\nfunction applyDiscount(price, discountPercentage) {\n    const discountAmount = price * (discountPercentage / 100);\n    const discountedPrice = price - discountAmount;\n    return discountedPrice;\n}\n```"
  },
  {
    "task": "Create a program to calculate the yearly salary given an hourly wage and hours worked per week.",
    "code": "```javascript\nfunction calculateYearlySalary(hourlyWage, hoursPerWeek) {\n    const weeksPerYear = 52;\n    return hourlyWage * hoursPerWeek * weeksPerYear;\n}\n\n// Example usage:\nconst hourlyWage = 20; // Example hourly wage\nconst hoursPerWeek = 40; // Example hours worked per week\nconst yearlySalary = calculateYearlySalary(hourlyWage, hoursPerWeek);\nconsole.log(`Yearly Salary: $${yearlySalary}`);\n```"
  },
  {
    "task": "Design a function that calculates the compound interest over a given period using arithmetic operations.",
    "code": "```javascript\nfunction calculateCompoundInterest(principal, rate, time, n) {\n    return principal * Math.pow((1 + rate / n), n * time);\n}\n\n// Example usage:\n// let result = calculateCompoundInterest(1000, 0.05, 10, 12);\n// console.log(result);\n```"
  },
  {
    "task": "Write a program that scales a 2D point by a given factor using multiplication.",
    "code": "```javascript\nfunction scalePoint(x, y, factor) {\n    return {\n        x: x * factor,\n        y: y * factor\n    };\n}\n\n// Example usage:\nconst point = { x: 3, y: 4 };\nconst factor = 2;\nconst scaledPoint = scalePoint(point.x, point.y, factor);\nconsole.log(scaledPoint); // { x: 6, y: 8 }\n```"
  },
  {
    "task": "Implement a function that calculates the perimeter of a triangle given its side lengths.",
    "code": "```javascript\nfunction calculatePerimeter(a, b, c) {\n    return a + b + c;\n}\n```"
  },
  {
    "task": "Create a function to determine if three sides can form a right triangle using the Pythagorean theorem.",
    "code": "```javascript\nfunction isRightTriangle(a, b, c) {\n    let sides = [a, b, c].sort((x, y) => x - y);\n    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n}\n```"
  },
  {
    "task": "Write a script that calculates the total cost of items in a shopping cart using addition.",
    "code": "```javascript\nconst shoppingCart = [29.99, 49.99, 9.99, 4.99, 12.99];\nlet totalCost = 0;\n\nfor (let i = 0; i < shoppingCart.length; i++) {\n    totalCost += shoppingCart[i];\n}\n\nconsole.log(\"Total cost: $\" + totalCost.toFixed(2));\n```"
  },
  {
    "task": "Develop a function that returns the quotient and remainder of a division operation.",
    "code": "```javascript\nfunction divideAndRemainder(dividend, divisor) {\n    const quotient = Math.floor(dividend / divisor);\n    const remainder = dividend % divisor;\n    return { quotient, remainder };\n}\n```"
  },
  {
    "task": "Build a program that simulates a basic checkout system using arithmetic operations for totals and discounts.",
    "code": "```javascript\nfunction calculateTotal(items, discountRate) {\n    let subtotal = items.reduce((total, item) => total + item.price * item.quantity, 0);\n    let discount = subtotal * discountRate;\n    let total = subtotal - discount;\n    return total;\n}\n\n// Example usage:\nlet items = [\n    { price: 10, quantity: 2 },\n    { price: 5, quantity: 5 },\n    { price: 20, quantity: 1 }\n];\nlet discountRate = 0.1; // 10% discount\nlet totalAmount = calculateTotal(items, discountRate);\nconsole.log('Total amount after discount:', totalAmount);\n```"
  },
  {
    "task": "Implement a function to calculate the distance between two points on a plane using subtraction and square roots.",
    "code": "```javascript\nfunction calculateDistance(x1, y1, x2, y2) {\n    const deltaX = x2 - x1;\n    const deltaY = y2 - y1;\n    return Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n}\n```"
  },
  {
    "task": "Write a function that calculates the speed of a vehicle given distance and time using division.",
    "code": "```javascript\nfunction calculateSpeed(distance, time) {\n    return distance / time;\n}\n```"
  },
  {
    "task": "Create a program to compute the total minutes in a given number of hours using multiplication.",
    "code": "```javascript\nfunction totalMinutes(hours) {\n    return hours * 60;\n}\n\nlet hours = 5; // Example input\nlet minutes = totalMinutes(hours);\nconsole.log(minutes);\n```"
  },
  {
    "task": "Design a function that determines the number of dozens of eggs from a given total number of eggs.",
    "code": "```javascript\nfunction calculateDozens(totalEggs) {\n    return Math.floor(totalEggs / 12);\n}\n```"
  },
  {
    "task": "Write a script to find the greatest common divisor of two numbers using arithmetic operations.",
    "code": "```javascript\nfunction gcd(a, b) {\n    while (b !== 0) {\n        let temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n\nlet num1 = 48; // Example number 1\nlet num2 = 18; // Example number 2\nconsole.log(\"GCD:\", gcd(num1, num2));\n```"
  },
  {
    "task": "Develop a program that calculates the total weight of multiple items using addition.",
    "code": "```javascript\nfunction calculateTotalWeight(weights) {\n    return weights.reduce((total, weight) => total + weight, 0);\n}\n\n// Example usage:\nconst itemWeights = [5.5, 10.2, 3.7, 8.1];\nconst totalWeight = calculateTotalWeight(itemWeights);\nconsole.log(totalWeight);\n```"
  },
  {
    "task": "Implement a function to convert a temperature from Celsius to Fahrenheit using multiplication and addition.",
    "code": "```javascript\nfunction celsiusToFahrenheit(celsius) {\n    return celsius * 9 / 5 + 32;\n}\n```"
  },
  {
    "task": "Create a program that determines the age difference between two people given their birth years.",
    "code": "```javascript\nfunction ageDifference(year1, year2) {\n    return Math.abs(year1 - year2);\n}\n\nconst birthYearPerson1 = 1985;\nconst birthYearPerson2 = 1995;\nconst difference = ageDifference(birthYearPerson1, birthYearPerson2);\n\nconsole.log(`The age difference is ${difference} years.`);\n```"
  },
  {
    "task": "Write a function to calculate the final price after applying tax and discount using addition and subtraction.",
    "code": "```javascript\nfunction calculateFinalPrice(originalPrice, taxRate, discount) {\n    const taxAmount = originalPrice * (taxRate / 100);\n    const discountedPrice = originalPrice - discount;\n    const finalPrice = discountedPrice + taxAmount;\n    return finalPrice;\n}\n```"
  },
  {
    "task": "Design a program to compute the net profit given total revenue and expenses.",
    "code": "```javascript\nfunction calculateNetProfit(totalRevenue, totalExpenses) {\n    return totalRevenue - totalExpenses;\n}\n\n// Example usage:\nconst totalRevenue = 10000;\nconst totalExpenses = 7000;\nconst netProfit = calculateNetProfit(totalRevenue, totalExpenses);\nconsole.log(\"Net Profit:\", netProfit);\n```"
  },
  {
    "task": "Develop a function to calculate the BMI given weight and height using division and multiplication.",
    "code": "```javascript\nfunction calculateBMI(weight, height) {\n    return weight / (height * height);\n}\n```"
  },
  {
    "task": "Create a function that calculates the midpoint between two numbers using addition and division.",
    "code": "```javascript\nfunction calculateMidpoint(num1, num2) {\n    return (num1 + num2) / 2;\n}\n```"
  },
  {
    "task": "Write a program that outputs the result of dividing a number by another with remainder.",
    "code": "```javascript\nfunction divideWithRemainder(a, b) {\n    if (b === 0) {\n        return \"Division by zero is undefined.\";\n    }\n    const quotient = Math.floor(a / b);\n    const remainder = a % b;\n    return `Quotient: ${quotient}, Remainder: ${remainder}`;\n}\n\nconsole.log(divideWithRemainder(10, 3));\n```"
  },
  {
    "task": "Implement a function to calculate the factorial of a number using multiplication.",
    "code": "```javascript\nfunction factorial(n) {\n    if (n < 0) return undefined;\n    let result = 1;\n    for (let i = 2; i <= n; i++) {\n        result *= i;\n    }\n    return result;\n}\n```"
  },
  {
    "task": "Build a script to find the average of three numbers using addition and division.",
    "code": "```javascript\nfunction calculateAverage(num1, num2, num3) {\n    let sum = num1 + num2 + num3;\n    let average = sum / 3;\n    return average;\n}\n\n// Example usage:\nlet average = calculateAverage(10, 20, 30);\nconsole.log(average);\n```"
  },
  {
    "task": "Create a program that simulates a simple bank account using arithmetic operations for deposits and withdrawals.",
    "code": "```javascript\nclass BankAccount {\n    constructor(initialBalance = 0) {\n        this.balance = initialBalance;\n    }\n\n    deposit(amount) {\n        if (amount > 0) {\n            this.balance += amount;\n        }\n    }\n\n    withdraw(amount) {\n        if (amount > 0 && amount <= this.balance) {\n            this.balance -= amount;\n        }\n    }\n\n    getBalance() {\n        return this.balance;\n    }\n}\n\n// Example usage:\nconst account = new BankAccount(100);\naccount.deposit(50);\naccount.withdraw(30);\nconsole.log(account.getBalance()); // Output: 120\n```"
  },
  {
    "task": "Write a function that computes the cost per item given a total cost and quantity using division.",
    "code": "```javascript\nfunction computeCostPerItem(totalCost, quantity) {\n    return totalCost / quantity;\n}\n```"
  },
  {
    "task": "Design a program that calculates the time required to travel a distance at a given speed.",
    "code": "```javascript\nfunction calculateTravelTime(distance, speed) {\n    if (speed <= 0) {\n        throw new Error(\"Speed must be greater than zero.\");\n    }\n    return distance / speed;\n}\n\nconst distance = 150; // example distance in kilometers\nconst speed = 60; // example speed in kilometers per hour\n\ntry {\n    const time = calculateTravelTime(distance, speed);\n    console.log(`Time required to travel ${distance} km at ${speed} km/h is ${time} hours.`);\n} catch (error) {\n    console.error(error.message);\n}\n```"
  },
  {
    "task": "Develop a function that returns the absolute difference between two numbers.",
    "code": "```javascript\nfunction absoluteDifference(num1, num2) {\n    return Math.abs(num1 - num2);\n}\n```"
  },
  {
    "task": "Implement a program to compute the geometric mean of a set of numbers using multiplication and roots.",
    "code": "```javascript\nfunction geometricMean(numbers) {\n    if (numbers.length === 0) return 0;\n    let product = numbers.reduce((acc, num) => acc * num, 1);\n    return Math.pow(product, 1 / numbers.length);\n}\n\n// Example usage\nconst nums = [1, 2, 3, 4, 5];\nconsole.log(geometricMean(nums));\n```"
  },
  {
    "task": "Write a function to calculate the total interest paid on a loan using arithmetic operations.",
    "code": "```javascript\nfunction calculateTotalInterest(principal, annualRate, years) {\n    let rate = annualRate / 100;\n    let totalInterest = principal * rate * years;\n    return totalInterest;\n}\n```"
  },
  {
    "task": "Create a program that calculates the sum of even numbers within a specified range.",
    "code": "```javascript\nfunction sumOfEvensInRange(start, end) {\n    let sum = 0;\n    for (let i = start; i <= end; i++) {\n        if (i % 2 === 0) {\n            sum += i;\n        }\n    }\n    return sum;\n}\n\nconst start = 1;\nconst end = 10;\nconsole.log(sumOfEvensInRange(start, end));\n```"
  },
  {
    "task": "Design a script to determine the final balance in a savings account after regular deposits and withdrawals.",
    "code": "```javascript\nfunction calculateFinalBalance(initialBalance, transactions) {\n    let finalBalance = initialBalance;\n    transactions.forEach(transaction => {\n        if (transaction.type === 'deposit') {\n            finalBalance += transaction.amount;\n        } else if (transaction.type === 'withdrawal') {\n            finalBalance -= transaction.amount;\n        }\n    });\n    return finalBalance;\n}\n\nconst initialBalance = 1000;\nconst transactions = [\n    { type: 'deposit', amount: 200 },\n    { type: 'withdrawal', amount: 100 },\n    { type: 'deposit', amount: 50 },\n    { type: 'withdrawal', amount: 30 }\n];\n\nconst finalBalance = calculateFinalBalance(initialBalance, transactions);\nconsole.log('Final Balance:', finalBalance);\n```"
  },
  {
    "task": "Develop a function to compute the surface area of a cylinder given its radius and height.",
    "code": "```javascript\nfunction surfaceAreaOfCylinder(radius, height) {\n    const pi = Math.PI;\n    const lateralSurfaceArea = 2 * pi * radius * height;\n    const topAndBottomSurfaceArea = 2 * pi * radius * radius;\n    return lateralSurfaceArea + topAndBottomSurfaceArea;\n}\n```"
  },
  {
    "task": "Write a program that outputs the result of an arithmetic sequence given the first term and common difference.",
    "code": "```javascript\nfunction arithmeticSequence(firstTerm, commonDifference, n) {\n    let sequence = [];\n    for (let i = 0; i < n; i++) {\n        sequence.push(firstTerm + i * commonDifference);\n    }\n    return sequence;\n}\n\nlet firstTerm = 5;\nlet commonDifference = 3;\nlet n = 10;\nconsole.log(arithmeticSequence(firstTerm, commonDifference, n));\n```"
  },
  {
    "task": "Implement a function that finds the average speed for a trip given total distance and time.",
    "code": "```javascript\nfunction calculateAverageSpeed(totalDistance, totalTime) {\n    return totalDistance / totalTime;\n}\n```"
  },
  {
    "task": "Create a function to calculate the total cost of a road trip given fuel cost per mile and distance.",
    "code": "```javascript\nfunction calculateTotalCost(fuelCostPerMile, distance) {\n    return fuelCostPerMile * distance;\n}\n```"
  },
  {
    "task": "Write a script that determines the number of tiles required to cover a floor area using arithmetic operations.",
    "code": "```javascript\nfunction calculateTilesNeeded(floorLength, floorWidth, tileLength, tileWidth) {\n    const floorArea = floorLength * floorWidth;\n    const tileArea = tileLength * tileWidth;\n    const numberOfTiles = Math.ceil(floorArea / tileArea);\n    return numberOfTiles;\n}\n\n// Example usage:\nconst floorLength = 10; // in meters\nconst floorWidth = 12;  // in meters\nconst tileLength = 0.5; // in meters\nconst tileWidth = 0.5;  // in meters\n\nconst tilesNeeded = calculateTilesNeeded(floorLength, floorWidth, tileLength, tileWidth);\nconsole.log(tilesNeeded);\n```"
  },
  {
    "task": "Develop a program to calculate the amount of paint needed to cover a wall given its area.",
    "code": "```javascript\nfunction calculatePaintNeeded(width, height, coveragePerLiter) {\n    const area = width * height;\n    const paintNeeded = area / coveragePerLiter;\n    return paintNeeded;\n}\n\n// Example usage:\nconst wallWidth = 10; // in meters\nconst wallHeight = 3; // in meters\nconst coverage = 12; // coverage per liter in square meters\n\nconst paintRequired = calculatePaintNeeded(wallWidth, wallHeight, coverage);\nconsole.log(`Paint needed: ${paintRequired.toFixed(2)} liters`);\n```"
  },
  {
    "task": "Build a function that calculates the price per unit weight given total price and weight.",
    "code": "```javascript\nfunction calculatePricePerUnitWeight(totalPrice, weight) {\n    return totalPrice / weight;\n}\n```"
  },
  {
    "task": "Implement a program that computes the volume of a rectangular prism given its dimensions.",
    "code": "```javascript\nfunction calculateVolume(length, width, height) {\n    return length * width * height;\n}\n\n// Example usage:\nconst length = 5;\nconst width = 3;\nconst height = 2;\nconst volume = calculateVolume(length, width, height);\nconsole.log(\"Volume of the rectangular prism:\", volume);\n```"
  },
  {
    "task": "Write a function to find the percentage increase or decrease between two numbers.",
    "code": "```javascript\nfunction calculatePercentageChange(original, newNumber) {\n    if (original === 0) {\n        throw new Error(\"Original number cannot be zero.\");\n    }\n    return ((newNumber - original) / original) * 100;\n}\n```"
  },
  {
    "task": "Create a program to determine the number of complete weeks within a specified number of days.",
    "code": "```javascript\nfunction completeWeeks(days) {\n    return Math.floor(days / 7);\n}\n\nconst days = 23; // Example input\nconst weeks = completeWeeks(days);\nconsole.log(weeks); // Output the number of complete weeks\n```"
  },
  {
    "task": "Design a function that calculates the break-even point for a business using cost and revenue data.",
    "code": "```javascript\nfunction calculateBreakEvenPoint(fixedCosts, variableCostPerUnit, pricePerUnit) {\n    if (pricePerUnit <= variableCostPerUnit) {\n        return Infinity; // No break-even point, as costs exceed or equal revenue per unit\n    }\n    return fixedCosts / (pricePerUnit - variableCostPerUnit);\n}\n\n// Example usage:\nconst fixedCosts = 10000;\nconst variableCostPerUnit = 5;\nconst pricePerUnit = 10;\nconst breakEvenPoint = calculateBreakEvenPoint(fixedCosts, variableCostPerUnit, pricePerUnit);\nconsole.log(`Break-even point in units: ${breakEvenPoint}`);\n```"
  },
  {
    "task": "Develop a program that converts a total number of seconds into hours, minutes, and seconds.",
    "code": "```javascript\nfunction convertSeconds(totalSeconds) {\n    const hours = Math.floor(totalSeconds / 3600);\n    totalSeconds %= 3600;\n    const minutes = Math.floor(totalSeconds / 60);\n    const seconds = totalSeconds % 60;\n    return { hours, minutes, seconds };\n}\n\n// Example usage:\nconst result = convertSeconds(3665);\nconsole.log(`${result.hours} hours, ${result.minutes} minutes, ${result.seconds} seconds`);\n```"
  },
  {
    "task": "Write a function that calculates the depreciation of an asset over time using arithmetic operations.",
    "code": "```javascript\nfunction calculateDepreciation(initialValue, depreciationRate, years) {\n    return initialValue * Math.pow((1 - depreciationRate), years);\n}\n```"
  },
  {
    "task": "Create a program that computes the final exam grade needed to achieve a target course average.",
    "code": "```javascript\nfunction calculateFinalExamGrade(currentAverage, targetAverage, finalExamWeight) {\n    // The current average contributes (1 - finalExamWeight) to the final grade\n    const currentContribution = currentAverage * (1 - finalExamWeight);\n    \n    // Solve for final exam grade needed\n    const finalExamGradeNeeded = (targetAverage - currentContribution) / finalExamWeight;\n    \n    return finalExamGradeNeeded;\n}\n\n// Example usage:\n// currentAverage = 85, targetAverage = 90, finalExamWeight = 0.4 (40%)\nconst neededGrade = calculateFinalExamGrade(85, 90, 0.4);\nconsole.log(`Final exam grade needed: ${neededGrade.toFixed(2)}`);\n```"
  },
  {
    "task": "Implement a function to calculate the total cost of groceries given prices and quantities of items.",
    "code": "```javascript\nfunction calculateTotalCost(prices, quantities) {\n    let totalCost = 0;\n    for (let i = 0; i < prices.length; i++) {\n        totalCost += prices[i] * quantities[i];\n    }\n    return totalCost;\n}\n```"
  },
  {
    "task": "Write a script that determines the number of years required to double an investment using a fixed interest rate.",
    "code": "```javascript\nfunction yearsToDoubleInvestment(principal, interestRate) {\n    let years = 0;\n    let target = principal * 2;\n    while (principal < target) {\n        principal += principal * interestRate;\n        years++;\n    }\n    return years;\n}\n\nlet principal = 1000; // Example principal amount\nlet interestRate = 0.05; // Example interest rate (5%)\nlet years = yearsToDoubleInvestment(principal, interestRate);\nconsole.log(`Years required to double the investment: ${years}`);\n```"
  },
  {
    "task": "Develop a function that computes the harmonic mean of a set of numbers using division and addition.",
    "code": "```javascript\nfunction harmonicMean(numbers) {\n    if (numbers.length === 0) return 0;\n    const sumOfReciprocals = numbers.reduce((sum, num) => sum + 1 / num, 0);\n    return numbers.length / sumOfReciprocals;\n}\n```"
  },
  {
    "task": "Create a program to find the sum of the squares of numbers in a given range.",
    "code": "```javascript\nfunction sumOfSquares(start, end) {\n    let sum = 0;\n    for (let i = start; i <= end; i++) {\n        sum += i * i;\n    }\n    return sum;\n}\n\nlet start = 1;\nlet end = 5;\nlet result = sumOfSquares(start, end);\nconsole.log(result);\n```"
  },
  {
    "task": "Design a function that calculates the energy consumption of an appliance given power and usage time.",
    "code": "```javascript\nfunction calculateEnergyConsumption(power, usageTime) {\n    return power * usageTime;\n}\n```"
  },
  {
    "task": "Write a program that simulates a simple stock portfolio using arithmetic operations for buying and selling.",
    "code": "```javascript\nclass StockPortfolio {\n    constructor() {\n        this.stocks = {};\n    }\n\n    buyStock(symbol, quantity, pricePerShare) {\n        if (!this.stocks[symbol]) {\n            this.stocks[symbol] = { quantity: 0, totalCost: 0 };\n        }\n        this.stocks[symbol].quantity += quantity;\n        this.stocks[symbol].totalCost += quantity * pricePerShare;\n    }\n\n    sellStock(symbol, quantity, pricePerShare) {\n        if (!this.stocks[symbol] || this.stocks[symbol].quantity < quantity) {\n            throw new Error(\"Not enough stock to sell\");\n        }\n        this.stocks[symbol].quantity -= quantity;\n        this.stocks[symbol].totalCost -= quantity * pricePerShare;\n    }\n\n    getStockInfo(symbol) {\n        if (!this.stocks[symbol]) {\n            return null;\n        }\n        return {\n            quantity: this.stocks[symbol].quantity,\n            totalCost: this.stocks[symbol].totalCost\n        };\n    }\n}\n\nconst portfolio = new StockPortfolio();\nportfolio.buyStock('AAPL', 10, 150);\nportfolio.sellStock('AAPL', 5, 160);\nconsole.log(portfolio.getStockInfo('AAPL'));\n```"
  },
  {
    "task": "Implement a function to calculate the gravitational force between two masses using multiplication and division.",
    "code": "```javascript\nfunction calculateGravitationalForce(mass1, mass2, distance) {\n    const G = 6.67430e-11; // gravitational constant in m^3 kg^-1 s^-2\n    return (G * mass1 * mass2) / (distance * distance);\n}\n```"
  },
  {
    "task": "Create a function that determines the price per square foot of a piece of real estate.",
    "code": "```javascript\nfunction pricePerSquareFoot(totalPrice, totalSquareFeet) {\n    if (totalSquareFeet === 0) {\n        return 0; // Avoid division by zero\n    }\n    return totalPrice / totalSquareFeet;\n}\n```"
  },
  {
    "task": "Write a script to compute the total interest earned on a savings account with monthly compounding.",
    "code": "```javascript\nfunction calculateTotalInterest(principal, annualRate, years) {\n    const months = years * 12;\n    const monthlyRate = annualRate / 12 / 100;\n    const futureValue = principal * Math.pow((1 + monthlyRate), months);\n    return futureValue - principal;\n}\n\nconst principal = 1000; // Example principal amount\nconst annualRate = 5;   // Example annual interest rate in percentage\nconst years = 5;        // Example number of years\n\nconst totalInterest = calculateTotalInterest(principal, annualRate, years);\nconsole.log(\"Total Interest Earned:\", totalInterest.toFixed(2));\n```"
  },
  {
    "task": "Develop a program that calculates the calories burned during exercise given MET value and duration.",
    "code": "```javascript\nfunction calculateCaloriesBurned(metValue, durationInMinutes, weightInKg) {\n    const caloriesBurnedPerMinute = 0.0175 * metValue * weightInKg;\n    const totalCaloriesBurned = caloriesBurnedPerMinute * durationInMinutes;\n    return totalCaloriesBurned;\n}\n\n// Example usage:\nconst metValue = 8; // MET value for the exercise\nconst duration = 30; // Duration in minutes\nconst weight = 70; // Weight in kg\nconst caloriesBurned = calculateCaloriesBurned(metValue, duration, weight);\nconsole.log(`Calories burned: ${caloriesBurned}`);\n```"
  },
  {
    "task": "Build a function that converts a speed from miles per hour to kilometers per hour using multiplication.",
    "code": "```javascript\nfunction convertMphToKph(mph) {\n    const conversionFactor = 1.60934;\n    return mph * conversionFactor;\n}\n```"
  },
  {
    "task": "Implement a program to find the number of days between two dates using arithmetic operations.",
    "code": "```javascript\nfunction daysBetweenDates(date1, date2) {\n    const oneDay = 24 * 60 * 60 * 1000; // milliseconds in one day\n    const firstDate = new Date(date1);\n    const secondDate = new Date(date2);\n    const differenceInTime = Math.abs(secondDate - firstDate);\n    return Math.round(differenceInTime / oneDay);\n}\n\n// Example usage:\nconst date1 = '2023-10-01';\nconst date2 = '2023-10-20';\nconsole.log(daysBetweenDates(date1, date2)); // Output: 19\n```"
  },
  {
    "task": "Write a function to calculate the area of a circle given its radius.",
    "code": "```javascript\nfunction calculateCircleArea(radius) {\n    return Math.PI * radius * radius;\n}\n```"
  },
  {
    "task": "Create a program that determines the total distance driven given trips with varying speeds and durations.",
    "code": "```javascript\nfunction calculateTotalDistance(trips) {\n    let totalDistance = 0;\n    for (let trip of trips) {\n        let { speed, duration } = trip;\n        totalDistance += speed * duration;\n    }\n    return totalDistance;\n}\n\nconst trips = [\n    { speed: 60, duration: 2 },\n    { speed: 70, duration: 3 },\n    { speed: 50, duration: 1.5 }\n];\n\nconsole.log(calculateTotalDistance(trips));\n```"
  },
  {
    "task": "Design a function to compute the final price of an item after applying multiple discounts sequentially.",
    "code": "```javascript\nfunction computeFinalPrice(initialPrice, discounts) {\n    let finalPrice = initialPrice;\n    for (let discount of discounts) {\n        finalPrice -= finalPrice * (discount / 100);\n    }\n    return finalPrice;\n}\n```"
  },
  {
    "task": "Write a script that calculates the number of bricks needed to build a wall given wall dimensions and brick size.",
    "code": "```javascript\nfunction calculateBricks(wallWidth, wallHeight, brickWidth, brickHeight) {\n    const wallArea = wallWidth * wallHeight;\n    const brickArea = brickWidth * brickHeight;\n    const numberOfBricks = Math.ceil(wallArea / brickArea);\n    return numberOfBricks;\n}\n\n// Example usage:\nconst wallWidth = 10; // Wall width in meters\nconst wallHeight = 3; // Wall height in meters\nconst brickWidth = 0.2; // Brick width in meters\nconst brickHeight = 0.1; // Brick height in meters\n\nconst bricksNeeded = calculateBricks(wallWidth, wallHeight, brickWidth, brickHeight);\nconsole.log(`Number of bricks needed: ${bricksNeeded}`);\n```"
  },
  {
    "task": "Develop a program to determine the number of pizzas required for a party given the number of people and slices per pizza.",
    "code": "```javascript\nfunction pizzasNeeded(people, slicesPerPerson, slicesPerPizza) {\n    const totalSlicesNeeded = people * slicesPerPerson;\n    const pizzas = Math.ceil(totalSlicesNeeded / slicesPerPizza);\n    return pizzas;\n}\n\n// Example usage:\nconst numberOfPeople = 20;\nconst slicesPerPerson = 3;\nconst slicesPerPizza = 8;\nconst pizzas = pizzasNeeded(numberOfPeople, slicesPerPerson, slicesPerPizza);\nconsole.log(`Pizzas needed: ${pizzas}`);\n```"
  },
  {
    "task": "Implement a function that calculates the total cost of a meal including tax and tip.",
    "code": "```javascript\nfunction calculateTotalCost(mealCost, taxRate, tipRate) {\n    const taxAmount = mealCost * taxRate;\n    const tipAmount = mealCost * tipRate;\n    const totalCost = mealCost + taxAmount + tipAmount;\n    return totalCost;\n}\n```"
  },
  {
    "task": "Create a program to compute the average rainfall over a period using addition and division.",
    "code": "```javascript\nfunction averageRainfall(rainfallData) {\n    if (rainfallData.length === 0) return 0;\n    let totalRainfall = 0;\n    for (let i = 0; i < rainfallData.length; i++) {\n        totalRainfall += rainfallData[i];\n    }\n    return totalRainfall / rainfallData.length;\n}\n\n// Example usage:\nconst rainfallData = [3.4, 2.8, 4.5, 1.2, 5.0];\nconsole.log(averageRainfall(rainfallData)); // Outputs the average rainfall\n```"
  },
  {
    "task": "Write a function that determines the number of batches needed to produce a specific quantity of a product.",
    "code": "```javascript\nfunction calculateBatches(productQuantity, batchSize) {\n    return Math.ceil(productQuantity / batchSize);\n}\n\n// Example usage:\nconst productQuantity = 100;\nconst batchSize = 15;\nconst numberOfBatches = calculateBatches(productQuantity, batchSize);\nconsole.log(numberOfBatches);\n```"
  },
  {
    "task": "Design a program to calculate the total energy consumption of a household given individual appliance usage.",
    "code": "```javascript\nfunction calculateTotalEnergyConsumption(applianceUsages) {\n    let totalEnergy = 0;\n    for (let usage of applianceUsages) {\n        totalEnergy += usage;\n    }\n    return totalEnergy;\n}\n\n// Example usage:\nconst applianceUsages = [100, 200, 150, 75]; // Energy usage in kWh for each appliance\nconst totalEnergy = calculateTotalEnergyConsumption(applianceUsages);\nconsole.log('Total Energy Consumption:', totalEnergy, 'kWh');\n```"
  },
  {
    "task": "Develop a function that computes the body surface area of a person using height and weight.",
    "code": "```javascript\nfunction computeBodySurfaceArea(height, weight) {\n    return Math.sqrt((height * weight) / 3600);\n}\n```"
  },
  {
    "task": "Build a script to calculate the monthly payment on a mortgage using principal, interest rate, and term.",
    "code": "```javascript\nfunction calculateMonthlyPayment(principal, annualInterestRate, termInYears) {\n    const monthlyInterestRate = annualInterestRate / 12 / 100;\n    const numberOfPayments = termInYears * 12;\n    const monthlyPayment = principal * monthlyInterestRate / \n        (1 - Math.pow(1 + monthlyInterestRate, -numberOfPayments));\n    return monthlyPayment;\n}\n\n// Example usage:\nconst principal = 200000; // Principal amount\nconst annualInterestRate = 5; // Annual interest rate in percentage\nconst termInYears = 30; // Term in years\n\nconst monthlyPayment = calculateMonthlyPayment(principal, annualInterestRate, termInYears);\nconsole.log(`Monthly Payment: $${monthlyPayment.toFixed(2)}`);\n```"
  },
  {
    "task": "Implement a function to find the volume of a cone given its height and radius.",
    "code": "```javascript\nfunction coneVolume(radius, height) {\n    return (1/3) * Math.PI * Math.pow(radius, 2) * height;\n}\n```"
  },
  {
    "task": "Write a program that estimates the cost of a trip using fuel efficiency and distance.",
    "code": "```javascript\nfunction estimateTripCost(distance, fuelEfficiency, fuelCostPerUnit) {\n    const fuelNeeded = distance / fuelEfficiency;\n    const tripCost = fuelNeeded * fuelCostPerUnit;\n    return tripCost;\n}\n\n// Example usage:\nconst distance = 500; // kilometers\nconst fuelEfficiency = 15; // kilometers per liter\nconst fuelCostPerUnit = 1.4; // cost per liter\nconst cost = estimateTripCost(distance, fuelEfficiency, fuelCostPerUnit);\nconsole.log(`Estimated trip cost: $${cost.toFixed(2)}`);\n```"
  }
]