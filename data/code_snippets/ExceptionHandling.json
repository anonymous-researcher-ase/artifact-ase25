{
    "Rust ExceptionHandling": "fn file_operation() -> Result<(), io::Error> {\n    let mut file = File::open(\"non_existent_file.txt\")?;\n    let mut contents = String::new();\n    file.read_to_string(&mut contents)?;\n    println!(\"{}\", contents);\n    Ok(())\n}\n\nfn arithmetic_operation() -> Result<(), &'static str> {\n    let denominator = 0;\n    if denominator == 0 {\n        return Err(\"Division by zero error\");\n    }\n    let result = 10 / denominator;\n    println!(\"Result of division: {}\", result);\n    Ok(())\n}\n\nfn custom_function() -> Result<(), CustomError> {\n    Err(CustomError)\n}\n\nfn main() {\n    match file_operation() {\n        Ok(_) => println!(\"File operation successful\"),\n        Err(e) => println!(\"File operation error: {:?}\", e),\n    }\n\n    match arithmetic_operation() {\n        Ok(_) => println!(\"Arithmetic operation successful\"),\n        Err(e) => println!(\"Arithmetic operation error: {}\", e),\n    }\n\n    match custom_function() {\n        Ok(_) => println!(\"Custom function successful\"),\n        Err(e) => println!(\"Custom function error: {:?}\", e),\n    }\n}\n",
    "JavaScript ExceptionHandling": "try {\n    const fs = require('fs');\n    const data = fs.readFileSync('non_existent_file.txt', 'utf8');\n    console.log(data);\n} catch (err) {\n    console.error('File operation error:', err.message);\n}\n\ntry {\n    const result = 10 / 0;\n    console.log('Result of division:', result);\n} catch (err) {\n    console.error('Arithmetic operation error:', err.message);\n}\n\nfunction customFunction() {\n    throw new Error('This is a custom error');\n}\n\ntry {\n    customFunction();\n} catch (err) {\n    console.error('Custom exception:', err.message);\n}\n",
    "Python ExceptionHandling": "try:\n    with open(\"non_existent_file.txt\", \"r\") as file:\n        data = file.read()\n        print(data)\nexcept FileNotFoundError as e:\n    print(f\"File operation error: {e}\")\n\ntry:\n    result = 10 / 0\n    print(f\"Result of division: {result}\")\nexcept ZeroDivisionError as e:\n    print(f\"Arithmetic operation error: {e}\")\n\ntry:\n    custom_function()\nexcept CustomException as e:\n    print(f\"Custom exception: {e}\")\n",
    "Java ExceptionHandling": "public class code {\n    public static void main(String[] args) {\n        try {\n            File file = new File(\"non_existent_file.txt\");\n            Scanner scanner = new Scanner(file);\n            while (scanner.hasNextLine()) {\n                System.out.println(scanner.nextLine());\n            }\n            scanner.close();\n        } catch (FileNotFoundException e) {\n            System.out.println(\"File operation error: \" + e.getMessage());\n        }\n\n        try {\n            int result = 10 / 0;\n            System.out.println(\"Result of division: \" + result);\n        } catch (ArithmeticException e) {\n            System.out.println(\"Arithmetic operation error: \" + e.getMessage());\n        }\n\n        try {\n            throwCustomException();\n        } catch (CustomException e) {\n            System.out.println(\"Custom exception: \" + e.getMessage());\n        }\n    }\n\n    static class CustomException extends Exception {\n        public CustomException(String message) {\n            super(message);\n        }\n    }\n\n    static void throwCustomException() throws CustomException {\n        throw new CustomException(\"This is a custom exception\");\n    }\n}\n",
    "Kotlin ExceptionHandling": "fun main() {\n    try {\n        val file = File(\"non_existent_file.txt\")\n        val data = file.readText()\n        println(data)\n    } catch (e: IOException) {\n        println(\"File operation error: ${e.message}\")\n    }\n\n    try {\n        val result = 10 / 0\n        println(\"Result of division: $result\")\n    } catch (e: ArithmeticException) {\n        println(\"Arithmetic operation error: ${e.message}\")\n    }\n\n    try {\n        customFunction()\n    } catch (e: CustomException) {\n        println(\"Custom exception: ${e.message}\")\n    }\n}\n",
    "C++ ExceptionHandling": "int main()\n{\n    ifstream file;\n    int *ptr = nullptr;\n\n    try\n    {\n        file.open(\"non_existent_file.txt\");\n        if (!file.is_open())\n        {\n            throw runtime_error(\"Error opening file\");\n        }\n\n        ptr = new int;\n        if (ptr == nullptr)\n        {\n            throw bad_alloc();\n        }\n\n        int dividend = 10, divisor = 0;\n        if (divisor == 0)\n        {\n            throw logic_error(\"Division by zero error\");\n        }\n    }\n    catch (const exception &e)\n    {\n        cerr << \"Exception occurred: \" << e.what() << endl;\n\n        if (file.is_open())\n        {\n            file.close();\n        }\n        delete ptr;\n\n        return EXIT_FAILURE;\n    }\n\n    file.close();\n    delete ptr;\n\n    return EXIT_SUCCESS;\n}\n",
    "Haskell ExceptionHandling": "main :: IO ()\nmain = do\n    result1 <- try (readFile \"non_existent_file.txt\") :: IO (Either SomeException String)\n    case result1 of\n        Left e -> putStrLn $ \"File operation error: \" ++ show e\n        Right content -> putStrLn $ \"File content: \" ++ content\n\n    result2 <- try (evaluate (10 `div` 0)) :: IO (Either SomeException Int)\n    case result2 of\n        Left e -> putStrLn $ \"Arithmetic operation error: \" ++ show e\n        Right _ -> putStrLn \"Arithmetic operation successful\"\n\n    result3 <- try (throwException) :: IO (Either MyException ())\n    case result3 of\n        Left (MyException msg) -> putStrLn $ \"Custom exception: \" ++ msg\n        Right _ -> putStrLn \"No custom exception thrown\"\n\ndata MyException = MyException String deriving Show\n\ninstance Exception MyException\n\nthrowException :: IO ()\nthrowException = throwIO (MyException \"This is a custom exception\")\n",
    "C ExceptionHandling": "int main()\n{\n    FILE *fp;\n\n    fp = fopen(\"non_existent_file.txt\", \"r\");\n    if (fp == NULL)\n    {\n        perror(\"Error opening file\");\n        return EXIT_FAILURE;\n    }\n\n    int *ptr = (int *)malloc(sizeof(int));\n    if (ptr == NULL)\n    {\n        perror(\"Error allocating memory\");\n        fclose(fp);\n        return EXIT_FAILURE;\n    }\n\n    int dividend = 10, divisor = 0;\n    if (divisor == 0)\n    {\n        fprintf(stderr, \"Division by zero error\\n\");\n        free(ptr);\n        fclose(fp);\n        return EXIT_FAILURE;\n    }\n\n    fclose(fp);\n    free(ptr);\n\n    return EXIT_SUCCESS;\n}\n"
}