[
  {
    "task": "Create a list of the first ten positive integers and calculate their sum.",
    "code": "```kotlin\nfun main() {\n    val numbers = List(10) { it + 1 }\n    val sum = numbers.sum()\n    println(\"Sum of the first ten positive integers: $sum\")\n}\n```"
  },
  {
    "task": "Write a program to reverse the order of elements in a given list.",
    "code": "```kotlin\nfun main() {\n    val originalList = listOf(1, 2, 3, 4, 5)\n    val reversedList = originalList.reversed()\n    println(reversedList)\n}\n```"
  },
  {
    "task": "Implement a function that takes a list and returns the list with duplicates removed.",
    "code": "```kotlin\nfun removeDuplicates(inputList: List<Int>): List<Int> {\n    return inputList.distinct()\n}\n```"
  },
  {
    "task": "Create a list of names and sort them in alphabetical order.",
    "code": "```kotlin\nfun main() {\n    val names = listOf(\"Alice\", \"Bob\", \"Charlie\", \"Diana\")\n    val sortedNames = names.sorted()\n    println(sortedNames)\n}\n```"
  },
  {
    "task": "Write a function that appends a new element to an existing list.",
    "code": "```kotlin\nfun appendToList(existingList: MutableList<Any>, newElement: Any) {\n    existingList.add(newElement)\n}\n```"
  },
  {
    "task": "Generate a list of the first 20 even numbers.",
    "code": "```kotlin\nval evenNumbers = List(20) { it * 2 }\nprintln(evenNumbers)\n```"
  },
  {
    "task": "Create a nested list (a list of lists) and access an element from the inner list.",
    "code": "```kotlin\nfun main() {\n    val nestedList = listOf(\n        listOf(1, 2, 3),\n        listOf(4, 5, 6),\n        listOf(7, 8, 9)\n    )\n    \n    // Accessing an element from the inner list\n    val element = nestedList[1][2]\n    println(element)\n}\n```"
  },
  {
    "task": "Write a program that finds the maximum value in a list of integers.",
    "code": "```kotlin\nfun findMaxValue(numbers: List<Int>): Int? {\n    return numbers.maxOrNull()\n}\n\nfun main() {\n    val numbers = listOf(3, 5, 7, 2, 8)\n    val maxValue = findMaxValue(numbers)\n    println(\"The maximum value is: $maxValue\")\n}\n```"
  },
  {
    "task": "Implement a function to merge two lists into a single list without duplicates.",
    "code": "```kotlin\nfun mergeLists(list1: List<Int>, list2: List<Int>): List<Int> {\n    return (list1 + list2).distinct()\n}\n```"
  },
  {
    "task": "Create a list from user input, then display the list in reverse order.",
    "code": "```kotlin\nfun main() {\n    val inputList = mutableListOf<String>()\n    println(\"Enter items for the list (type 'done' to finish):\")\n    while (true) {\n        val input = readLine() ?: break\n        if (input.lowercase() == \"done\") break\n        inputList.add(input)\n    }\n    inputList.reverse()\n    println(\"List in reverse order:\")\n    for (item in inputList) {\n        println(item)\n    }\n}\n```"
  },
  {
    "task": "Write a function that takes a list and returns a new list containing only the even numbers.",
    "code": "```kotlin\nfun filterEvenNumbers(numbers: List<Int>): List<Int> {\n    return numbers.filter { it % 2 == 0 }\n}\n```"
  },
  {
    "task": "Generate a list of squares for the numbers 1 through 10.",
    "code": "```kotlin\nfun main() {\n    val squares = (1..10).map { it * it }\n    println(squares)\n}\n```"
  },
  {
    "task": "Create a list of floating-point numbers and find their average.",
    "code": "```kotlin\nfun main() {\n    val numbers = listOf(1.5, 2.3, 3.7, 4.4, 5.8)\n    val average = numbers.average()\n    println(\"Average: $average\")\n}\n```"
  },
  {
    "task": "Implement a program to rotate the elements of a list to the right by a given number of steps.",
    "code": "```kotlin\nfun rotateListRight(list: List<Int>, steps: Int): List<Int> {\n    if (list.isEmpty()) return list\n    val effectiveSteps = steps % list.size\n    return list.takeLast(effectiveSteps) + list.dropLast(effectiveSteps)\n}\n\nfun main() {\n    val originalList = listOf(1, 2, 3, 4, 5)\n    val rotatedList = rotateListRight(originalList, 2)\n    println(rotatedList) // Output: [4, 5, 1, 2, 3]\n}\n```"
  },
  {
    "task": "Write a function that checks if a list is a palindrome (reads the same forwards and backwards).",
    "code": "```kotlin\nfun isPalindrome(list: List<Any>): Boolean {\n    return list == list.reversed()\n}\n```"
  },
  {
    "task": "Create a list of random integers and count how many are greater than 50.",
    "code": "```kotlin\nimport kotlin.random.Random\n\nfun main() {\n    val randomIntegers = List(100) { Random.nextInt(0, 100) }\n    val countGreaterThanFifty = randomIntegers.count { it > 50 }\n    println(\"Count of integers greater than 50: $countGreaterThanFifty\")\n}\n```"
  },
  {
    "task": "Write a program that removes the first occurrence of a specified element from a list.",
    "code": "```kotlin\nfun removeFirstOccurrence(list: MutableList<Int>, element: Int): List<Int> {\n    list.remove(element)\n    return list\n}\n\nfun main() {\n    val myList = mutableListOf(1, 2, 3, 4, 3, 5)\n    val elementToRemove = 3\n    val resultList = removeFirstOccurrence(myList, elementToRemove)\n    println(resultList)\n}\n```"
  },
  {
    "task": "Implement a function that takes two lists and returns a list containing their intersection.",
    "code": "```kotlin\nfun intersectLists(list1: List<Int>, list2: List<Int>): List<Int> {\n    return list1.intersect(list2).toList()\n}\n```"
  },
  {
    "task": "Create a list of prime numbers less than 100.",
    "code": "```kotlin\nfun isPrime(num: Int): Boolean {\n    if (num <= 1) return false\n    if (num <= 3) return true\n    if (num % 2 == 0 || num % 3 == 0) return false\n    var i = 5\n    while (i * i <= num) {\n        if (num % i == 0 || num % (i + 2) == 0) return false\n        i += 6\n    }\n    return true\n}\n\nfun main() {\n    val primes = (2 until 100).filter { isPrime(it) }\n    println(primes)\n}\n```"
  },
  {
    "task": "Write a function to split a list into two lists: one with even numbers and one with odd numbers.",
    "code": "```kotlin\nfun splitEvenOdd(numbers: List<Int>): Pair<List<Int>, List<Int>> {\n    val evens = mutableListOf<Int>()\n    val odds = mutableListOf<Int>()\n    for (number in numbers) {\n        if (number % 2 == 0) {\n            evens.add(number)\n        } else {\n            odds.add(number)\n        }\n    }\n    return Pair(evens, odds)\n}\n```"
  },
  {
    "task": "Create a list of strings and convert all the strings to uppercase.",
    "code": "```kotlin\nfun main() {\n    val strings = listOf(\"apple\", \"banana\", \"cherry\")\n    val uppercasedStrings = strings.map { it.uppercase() }\n    println(uppercasedStrings)\n}\n```"
  },
  {
    "task": "Implement a program that removes all elements from a list that are less than a specified value.",
    "code": "```kotlin\nfun removeElementsLessThan(list: List<Int>, threshold: Int): List<Int> {\n    return list.filter { it >= threshold }\n}\n\nfun main() {\n    val numbers = listOf(1, 5, 10, 15, 20, 25)\n    val threshold = 10\n    val filteredNumbers = removeElementsLessThan(numbers, threshold)\n    println(filteredNumbers)\n}\n```"
  },
  {
    "task": "Write a function that takes a list and returns a new list with elements in random order.",
    "code": "```kotlin\nimport kotlin.random.Random\n\nfun <T> shuffleList(inputList: List<T>): List<T> {\n    return inputList.shuffled(Random)\n}\n```"
  },
  {
    "task": "Create a list of tuples where each tuple contains a number and its square.",
    "code": "```kotlin\nfun main() {\n    val numbersAndSquares = List(10) { it to it * it }\n    println(numbersAndSquares)\n}\n```"
  },
  {
    "task": "Write a program to multiply all elements in a list by a given factor.",
    "code": "```kotlin\nfun multiplyListByFactor(numbers: List<Int>, factor: Int): List<Int> {\n    return numbers.map { it * factor }\n}\n\nfun main() {\n    val numbers = listOf(1, 2, 3, 4, 5)\n    val factor = 3\n    val result = multiplyListByFactor(numbers, factor)\n    println(result)\n}\n```"
  },
  {
    "task": "Implement a function that flattens a nested list.",
    "code": "```kotlin\nfun flatten(nestedList: List<Any>): List<Any> {\n    val result = mutableListOf<Any>()\n    nestedList.forEach { element ->\n        if (element is List<*>) {\n            result.addAll(flatten(element))\n        } else {\n            result.add(element)\n        }\n    }\n    return result\n}\n```"
  },
  {
    "task": "Create a list of dates and sort them chronologically.",
    "code": "```kotlin\nimport java.time.LocalDate\n\nfun main() {\n    val dates = listOf(\n        LocalDate.of(2023, 10, 5),\n        LocalDate.of(2021, 1, 15),\n        LocalDate.of(2022, 7, 20),\n        LocalDate.of(2020, 12, 31)\n    )\n    \n    val sortedDates = dates.sorted()\n    \n    println(sortedDates)\n}\n```"
  },
  {
    "task": "Write a function that finds the index of the first occurrence of a given element in a list.",
    "code": "```kotlin\nfun findFirstOccurrenceIndex(list: List<Int>, element: Int): Int {\n    return list.indexOf(element)\n}\n```"
  },
  {
    "task": "Generate a list of Fibonacci numbers up to a specified limit.",
    "code": "```kotlin\nfun generateFibonacci(limit: Int): List<Int> {\n    val fibonacciList = mutableListOf(0, 1)\n    while (true) {\n        val next = fibonacciList[fibonacciList.size - 1] + fibonacciList[fibonacciList.size - 2]\n        if (next > limit) break\n        fibonacciList.add(next)\n    }\n    return fibonacciList\n}\n\nfun main() {\n    val limit = 100\n    val fibonacciNumbers = generateFibonacci(limit)\n    println(fibonacciNumbers)\n}\n```"
  },
  {
    "task": "Create a list of booleans and determine if all are True.",
    "code": "```kotlin\nfun main() {\n    val booleanList = listOf(true, true, true, false)\n    val allTrue = booleanList.all { it }\n    println(allTrue)\n}\n```"
  },
  {
    "task": "Write a program to concatenate two lists.",
    "code": "```kotlin\nfun main() {\n    val list1 = listOf(\"a\", \"b\", \"c\")\n    val list2 = listOf(\"d\", \"e\", \"f\")\n    val concatenatedList = list1 + list2\n    println(concatenatedList)\n}\n```"
  },
  {
    "task": "Implement a function that returns the length of a list without using built-in functions.",
    "code": "```kotlin\nfun listLength(list: List<Any>): Int {\n    var length = 0\n    for (item in list) {\n        length++\n    }\n    return length\n}\n```"
  },
  {
    "task": "Create a list of words and find the longest word.",
    "code": "```kotlin\nfun main() {\n    val words = listOf(\"apple\", \"banana\", \"cherry\", \"blueberry\", \"strawberry\")\n    val longestWord = words.maxByOrNull { it.length }\n    println(\"The longest word is: $longestWord\")\n}\n```"
  },
  {
    "task": "Write a function that takes a list and a predicate function, returning a list of elements that satisfy the predicate.",
    "code": "```kotlin\nfun <T> filterList(inputList: List<T>, predicate: (T) -> Boolean): List<T> {\n    return inputList.filter(predicate)\n}\n```"
  },
  {
    "task": "Generate a list of strings and filter out those with less than 5 characters.",
    "code": "```kotlin\nfun main() {\n    val strings = listOf(\"apple\", \"dog\", \"banana\", \"cat\", \"elephant\")\n    val filteredStrings = strings.filter { it.length >= 5 }\n    println(filteredStrings)\n}\n```"
  },
  {
    "task": "Create a list of mixed data types and separate them into lists by type.",
    "code": "```kotlin\nfun main() {\n    val mixedList: List<Any> = listOf(1, \"hello\", 3.14, true, 42, \"world\", false, 2.71)\n\n    val intList = mixedList.filterIsInstance<Int>()\n    val stringList = mixedList.filterIsInstance<String>()\n    val doubleList = mixedList.filterIsInstance<Double>()\n    val booleanList = mixedList.filterIsInstance<Boolean>()\n\n    println(\"Integers: $intList\")\n    println(\"Strings: $stringList\")\n    println(\"Doubles: $doubleList\")\n    println(\"Booleans: $booleanList\")\n}\n```"
  },
  {
    "task": "Write a program to find the common elements between two lists.",
    "code": "```kotlin\nfun main() {\n    val list1 = listOf(1, 2, 3, 4, 5)\n    val list2 = listOf(4, 5, 6, 7, 8)\n\n    val commonElements = list1.intersect(list2)\n    println(commonElements)\n}\n```"
  },
  {
    "task": "Implement a function to rotate the elements of a list to the left by a given number of steps.",
    "code": "```kotlin\nfun <T> rotateLeft(list: List<T>, steps: Int): List<T> {\n    if (list.isEmpty()) return list\n    val shift = steps % list.size\n    return list.drop(shift) + list.take(shift)\n}\n```"
  },
  {
    "task": "Create a list of numbers and find the product of all the elements.",
    "code": "```kotlin\nfun main() {\n    val numbers = listOf(2, 3, 4, 5)\n    val product = numbers.fold(1) { acc, num -> acc * num }\n    println(\"Product of all elements: $product\")\n}\n```"
  },
  {
    "task": "Write a function that removes all occurrences of a specified element from a list.",
    "code": "```kotlin\nfun removeOccurrences(list: List<Int>, element: Int): List<Int> {\n    return list.filter { it != element }\n}\n```"
  },
  {
    "task": "Generate a list of random numbers and find the median value.",
    "code": "```kotlin\nimport kotlin.random.Random\n\nfun main() {\n    val randomNumbers = List(10) { Random.nextInt(0, 100) }\n    val sortedNumbers = randomNumbers.sorted()\n    val median = if (sortedNumbers.size % 2 == 1) {\n        sortedNumbers[sortedNumbers.size / 2]\n    } else {\n        val middle = sortedNumbers.size / 2\n        (sortedNumbers[middle - 1] + sortedNumbers[middle]) / 2.0\n    }\n    \n    println(\"Random Numbers: $randomNumbers\")\n    println(\"Median: $median\")\n}\n```"
  },
  {
    "task": "Create a list of dictionaries and sort them by a specific key.",
    "code": "```kotlin\nfun main() {\n    val listOfMaps = listOf(\n        mapOf(\"name\" to \"Alice\", \"age\" to 30),\n        mapOf(\"name\" to \"Bob\", \"age\" to 25),\n        mapOf(\"name\" to \"Charlie\", \"age\" to 35)\n    )\n\n    val sortedList = listOfMaps.sortedBy { it[\"age\"] as Int }\n\n    println(sortedList)\n}\n```"
  },
  {
    "task": "Write a program to split a list into chunks of a specified size.",
    "code": "```kotlin\nfun <T> List<T>.chunked(size: Int): List<List<T>> {\n    val chunks = mutableListOf<List<T>>()\n    var index = 0\n    while (index < this.size) {\n        val end = (index + size).coerceAtMost(this.size)\n        chunks.add(this.subList(index, end))\n        index += size\n    }\n    return chunks\n}\n\nfun main() {\n    val list = listOf(1, 2, 3, 4, 5, 6, 7, 8, 9)\n    val chunkedList = list.chunked(3)\n    println(chunkedList)\n}\n```"
  },
  {
    "task": "Implement a function that takes a list and returns a dictionary with the frequency of each element.",
    "code": "```kotlin\nfun elementFrequency(list: List<Any>): Map<Any, Int> {\n    return list.groupingBy { it }.eachCount()\n}\n```"
  },
  {
    "task": "Create a list of integers and replace all negative numbers with zero.",
    "code": "```kotlin\nfun main() {\n    val numbers = listOf(3, -1, 4, -9, 5, -2)\n    val replacedNumbers = numbers.map { if (it < 0) 0 else it }\n    println(replacedNumbers)\n}\n```"
  },
  {
    "task": "Write a function that returns the first n elements of a list.",
    "code": "```kotlin\nfun firstNElements(list: List<Any>, n: Int): List<Any> {\n    return list.take(n)\n}\n```"
  },
  {
    "task": "Generate a list of strings and join them into a single string with spaces.",
    "code": "```kotlin\nfun main() {\n    val stringList = listOf(\"This\", \"is\", \"a\", \"list\", \"of\", \"strings\")\n    val joinedString = stringList.joinToString(\" \")\n    println(joinedString)\n}\n```"
  },
  {
    "task": "Create a list of lists and find the sum of each inner list.",
    "code": "```kotlin\nfun main() {\n    val listOfLists = listOf(\n        listOf(1, 2, 3),\n        listOf(4, 5, 6),\n        listOf(7, 8, 9)\n    )\n\n    val sums = listOfLists.map { it.sum() }\n\n    println(sums)\n}\n```"
  },
  {
    "task": "Write a function that finds the second largest number in a list.",
    "code": "```kotlin\nfun findSecondLargest(numbers: List<Int>): Int? {\n    if (numbers.size < 2) return null\n    val uniqueNumbers = numbers.toSet().toList()\n    if (uniqueNumbers.size < 2) return null\n    return uniqueNumbers.sortedDescending()[1]\n}\n```"
  },
  {
    "task": "Generate a list of numbers and remove the duplicates while maintaining order.",
    "code": "```kotlin\nfun removeDuplicates(numbers: List<Int>): List<Int> {\n    val seen = mutableSetOf<Int>()\n    return numbers.filter { seen.add(it) }\n}\n\nfun main() {\n    val numbers = listOf(1, 2, 2, 3, 4, 4, 5)\n    val uniqueNumbers = removeDuplicates(numbers)\n    println(uniqueNumbers)\n}\n```"
  },
  {
    "task": "Create a list of integers and partition it into two lists: one with numbers above the average and one below.",
    "code": "```kotlin\nfun main() {\n    val numbers = listOf(10, 20, 30, 40, 50)\n    val average = numbers.average()\n    \n    val aboveAverage = numbers.filter { it > average }\n    val belowAverage = numbers.filter { it < average }\n    \n    println(\"Above Average: $aboveAverage\")\n    println(\"Below Average: $belowAverage\")\n}\n```"
  },
  {
    "task": "Write a program to find the longest increasing subsequence in a list of numbers.",
    "code": "```kotlin\nfun longestIncreasingSubsequence(nums: List<Int>): List<Int> {\n    if (nums.isEmpty()) return emptyList()\n\n    val lengths = IntArray(nums.size) { 1 }\n    val previous = IntArray(nums.size) { -1 }\n\n    for (i in nums.indices) {\n        for (j in 0 until i) {\n            if (nums[j] < nums[i] && lengths[j] + 1 > lengths[i]) {\n                lengths[i] = lengths[j] + 1\n                previous[i] = j\n            }\n        }\n    }\n\n    val maxLengthIndex = lengths.indices.maxByOrNull { lengths[it] } ?: -1\n    val lis = mutableListOf<Int>()\n    var currentIndex = maxLengthIndex\n\n    while (currentIndex != -1) {\n        lis.add(nums[currentIndex])\n        currentIndex = previous[currentIndex]\n    }\n\n    return lis.reversed()\n}\n\nfun main() {\n    val nums = listOf(10, 9, 2, 5, 3, 7, 101, 18)\n    val lis = longestIncreasingSubsequence(nums)\n    println(lis)\n}\n```"
  },
  {
    "task": "Implement a function to zip two lists into a single list of tuples.",
    "code": "```kotlin\nfun <T, U> zipLists(list1: List<T>, list2: List<U>): List<Pair<T, U>> {\n    return list1.zip(list2)\n}\n```"
  },
  {
    "task": "Create a list of characters and count the vowels.",
    "code": "```kotlin\nfun main() {\n    val characters = listOf('a', 'b', 'c', 'e', 'i', 'o', 'u', 'x', 'y', 'z')\n    val vowels = setOf('a', 'e', 'i', 'o', 'u')\n    val vowelCount = characters.count { it in vowels }\n    println(\"Number of vowels: $vowelCount\")\n}\n```"
  },
  {
    "task": "Write a function that returns the last n elements of a list.",
    "code": "```kotlin\nfun <T> getLastNElements(list: List<T>, n: Int): List<T> {\n    return list.takeLast(n)\n}\n```"
  },
  {
    "task": "Generate a list of numbers and split it into two lists: one with positive numbers and one with negative numbers.",
    "code": "```kotlin\nfun main() {\n    val numbers = listOf(-10, -5, 0, 3, 8, -2, 7, -1)\n    val positiveNumbers = numbers.filter { it > 0 }\n    val negativeNumbers = numbers.filter { it < 0 }\n    \n    println(\"Positive Numbers: $positiveNumbers\")\n    println(\"Negative Numbers: $negativeNumbers\")\n}\n```"
  },
  {
    "task": "Create a list of random integers and find the mode.",
    "code": "```kotlin\nimport kotlin.random.Random\n\nfun main() {\n    val randomNumbers = List(100) { Random.nextInt(0, 50) }\n    val numberFrequency = randomNumbers.groupingBy { it }.eachCount()\n    val mode = numberFrequency.maxByOrNull { it.value }?.key\n\n    println(\"Random numbers: $randomNumbers\")\n    println(\"Mode: $mode\")\n}\n```"
  },
  {
    "task": "Write a program to find the shortest path in a grid using a list to represent the path.",
    "code": "```kotlin\ndata class Point(val x: Int, val y: Int)\n\nfun isValid(grid: Array<Array<Int>>, visited: Array<Array<Boolean>>, x: Int, y: Int): Boolean {\n    return (x >= 0 && y >= 0 && x < grid.size && y < grid[0].size && grid[x][y] == 0 && !visited[x][y])\n}\n\nfun bfs(grid: Array<Array<Int>>, src: Point, dest: Point): List<Point>? {\n    val directions = listOf(Point(0, 1), Point(1, 0), Point(0, -1), Point(-1, 0))\n    val visited = Array(grid.size) { Array(grid[0].size) { false } }\n    val queue: MutableList<List<Point>> = mutableListOf(listOf(src))\n\n    visited[src.x][src.y] = true\n\n    while (queue.isNotEmpty()) {\n        val path = queue.removeAt(0)\n        val point = path.last()\n\n        if (point == dest) return path\n\n        for (dir in directions) {\n            val newX = point.x + dir.x\n            val newY = point.y + dir.y\n\n            if (isValid(grid, visited, newX, newY)) {\n                visited[newX][newY] = true\n                val newPath = path.toMutableList()\n                newPath.add(Point(newX, newY))\n                queue.add(newPath)\n            }\n        }\n    }\n    return null\n}\n\nfun main() {\n    val grid = arrayOf(\n        arrayOf(0, 0, 0, 0),\n        arrayOf(1, 1, 0, 1),\n        arrayOf(0, 0, 0, 0),\n        arrayOf(0, 0, 0, 0)\n    )\n    val source = Point(0, 0)\n    val destination = Point(3, 3)\n\n    val path = bfs(grid, source, destination)\n\n    if (path != null) {\n        println(\"Shortest path:\")\n        for (point in path) {\n            println(\"(${point.x}, ${point.y})\")\n        }\n    } else {\n        println(\"No path found\")\n    }\n}\n```"
  },
  {
    "task": "Implement a function that takes a list and returns a list with elements doubled.",
    "code": "```kotlin\nfun doubleElements(inputList: List<Int>): List<Int> {\n    return inputList.map { it * 2 }\n}\n```"
  },
  {
    "task": "Create a list of integers and sort them in descending order.",
    "code": "```kotlin\nfun main() {\n    val numbers = listOf(5, 2, 9, 1, 3)\n    val sortedNumbers = numbers.sortedDescending()\n    println(sortedNumbers)\n}\n```"
  },
  {
    "task": "Write a function that takes a list of intervals and merges overlapping intervals.",
    "code": "```kotlin\nfun mergeIntervals(intervals: List<Pair<Int, Int>>): List<Pair<Int, Int>> {\n    if (intervals.isEmpty()) return emptyList()\n\n    val sortedIntervals = intervals.sortedBy { it.first }\n    val mergedIntervals = mutableListOf<Pair<Int, Int>>()\n\n    var currentInterval = sortedIntervals.first()\n    for (interval in sortedIntervals.drop(1)) {\n        if (currentInterval.second >= interval.first) {\n            currentInterval = currentInterval.first to maxOf(currentInterval.second, interval.second)\n        } else {\n            mergedIntervals.add(currentInterval)\n            currentInterval = interval\n        }\n    }\n    \n    mergedIntervals.add(currentInterval)\n    return mergedIntervals\n}\n```"
  },
  {
    "task": "Generate a list of random numbers and find the range (difference between max and min).",
    "code": "```kotlin\nimport kotlin.random.Random\n\nfun main() {\n    val randomNumbers = List(10) { Random.nextInt(0, 100) }\n    val range = randomNumbers.maxOrNull()?.minus(randomNumbers.minOrNull() ?: 0)\n    println(\"Random Numbers: $randomNumbers\")\n    println(\"Range: $range\")\n}\n```"
  },
  {
    "task": "Create a list of strings and remove any that are palindromes.",
    "code": "```kotlin\nfun removePalindromes(strings: List<String>): List<String> {\n    return strings.filter { it != it.reversed() }\n}\n\nfun main() {\n    val strings = listOf(\"level\", \"world\", \"deified\", \"hello\", \"racecar\", \"kotlin\")\n    val result = removePalindromes(strings)\n    println(result)\n}\n```"
  },
  {
    "task": "Write a program to cyclically permute the elements of a list.",
    "code": "```kotlin\nfun cyclicallyPermute(list: MutableList<Int>): List<Int> {\n    if (list.isEmpty()) return list\n    val lastElement = list.removeAt(list.size - 1)\n    list.add(0, lastElement)\n    return list\n}\n\nfun main() {\n    val list = mutableListOf(1, 2, 3, 4, 5)\n    val permutedList = cyclicallyPermute(list)\n    println(permutedList)\n}\n```"
  },
  {
    "task": "Implement a function to create a list of cumulative sums from a list of numbers.",
    "code": "```kotlin\nfun cumulativeSums(numbers: List<Int>): List<Int> {\n    val result = mutableListOf<Int>()\n    var sum = 0\n    for (number in numbers) {\n        sum += number\n        result.add(sum)\n    }\n    return result\n}\n```"
  },
  {
    "task": "Create a list of numbers and shift all zeros to the end.",
    "code": "```kotlin\nfun shiftZerosToEnd(numbers: List<Int>): List<Int> {\n    val nonZeros = numbers.filter { it != 0 }\n    val zeros = numbers.filter { it == 0 }\n    return nonZeros + zeros\n}\n\nfun main() {\n    val numbers = listOf(0, 1, 0, 3, 12, 0)\n    val result = shiftZerosToEnd(numbers)\n    println(result) // Output: [1, 3, 12, 0, 0, 0]\n}\n```"
  },
  {
    "task": "Write a program to simulate a queue using a list.",
    "code": "```kotlin\nfun main() {\n    val queue = mutableListOf<String>()\n\n    // Enqueue operation\n    fun enqueue(element: String) {\n        queue.add(element)\n    }\n\n    // Dequeue operation\n    fun dequeue(): String? {\n        return if (queue.isNotEmpty()) queue.removeAt(0) else null\n    }\n\n    // Check if queue is empty\n    fun isEmpty(): Boolean {\n        return queue.isEmpty()\n    }\n\n    // Peek operation\n    fun peek(): String? {\n        return queue.firstOrNull()\n    }\n\n    // Example usage\n    enqueue(\"first\")\n    enqueue(\"second\")\n    enqueue(\"third\")\n    \n    println(\"Queue: $queue\")\n    println(\"Dequeue: ${dequeue()}\")\n    println(\"Queue after dequeue: $queue\")\n    println(\"Peek: ${peek()}\")\n    println(\"Is queue empty: ${isEmpty()}\")\n}\n```"
  },
  {
    "task": "Generate a list of numbers and identify all prime numbers.",
    "code": "```kotlin\nfun isPrime(num: Int): Boolean {\n    if (num <= 1) return false\n    if (num == 2) return true\n    if (num % 2 == 0) return false\n    for (i in 3..Math.sqrt(num.toDouble()).toInt() step 2) {\n        if (num % i == 0) return false\n    }\n    return true\n}\n\nfun main() {\n    val numbers = (1..100).toList()\n    val primeNumbers = numbers.filter { isPrime(it) }\n    println(primeNumbers)\n}\n```"
  },
  {
    "task": "Create a list of strings and group them by their starting letter.",
    "code": "```kotlin\nfun main() {\n    val strings = listOf(\"apple\", \"apricot\", \"banana\", \"blueberry\", \"cherry\", \"cranberry\")\n    val groupedByStartingLetter = strings.groupBy { it.first() }\n    println(groupedByStartingLetter)\n}\n```"
  },
  {
    "task": "Write a function that takes a list and returns a new list with all elements squared.",
    "code": "```kotlin\nfun squareElements(inputList: List<Int>): List<Int> {\n    return inputList.map { it * it }\n}\n```"
  },
  {
    "task": "Generate a list of timestamps and find the time difference between consecutive elements.",
    "code": "```kotlin\nimport java.time.LocalDateTime\nimport java.time.Duration\n\nfun main() {\n    val timestamps = List(5) { LocalDateTime.now().plusSeconds((it * 3600).toLong()) }\n    val differences = timestamps.zipWithNext { a, b -> Duration.between(a, b).toHours() }\n    println(\"Timestamps: $timestamps\")\n    println(\"Differences (in hours): $differences\")\n}\n```"
  },
  {
    "task": "Create a list of numbers and rotate it such that the smallest number is first.",
    "code": "```kotlin\nfun main() {\n    val numbers = listOf(5, 3, 8, 1, 4)\n    val minIndex = numbers.indexOf(numbers.minOrNull())\n    val rotatedList = numbers.drop(minIndex) + numbers.take(minIndex)\n    println(rotatedList)\n}\n```"
  },
  {
    "task": "Write a program to find all unique pairs in a list that sum up to a specific target.",
    "code": "```kotlin\nfun findPairsWithSum(nums: List<Int>, target: Int): List<Pair<Int, Int>> {\n    val seen = mutableSetOf<Int>()\n    val pairs = mutableSetOf<Pair<Int, Int>>()\n\n    for (num in nums) {\n        val complement = target - num\n        if (complement in seen) {\n            pairs.add(Pair(minOf(num, complement), maxOf(num, complement)))\n        }\n        seen.add(num)\n    }\n\n    return pairs.toList()\n}\n\nfun main() {\n    val nums = listOf(2, 4, 3, 5, 7, 8, 9)\n    val target = 10\n    val result = findPairsWithSum(nums, target)\n    println(result)\n}\n```"
  },
  {
    "task": "Implement a function that returns true if a list contains a cycle.",
    "code": "```kotlin\nfun hasCycle(list: List<Any>): Boolean {\n    val seen = mutableSetOf<Any>()\n    for (item in list) {\n        if (!seen.add(item)) {\n            return true\n        }\n    }\n    return false\n}\n```"
  },
  {
    "task": "Create a list of numbers and find the contiguous subarray with the maximum sum.",
    "code": "```kotlin\nfun maxSubArray(nums: List<Int>): Int {\n    var maxSoFar = nums[0]\n    var maxEndingHere = nums[0]\n    \n    for (i in 1 until nums.size) {\n        maxEndingHere = maxOf(nums[i], maxEndingHere + nums[i])\n        maxSoFar = maxOf(maxSoFar, maxEndingHere)\n    }\n    \n    return maxSoFar\n}\n\nfun main() {\n    val numbers = listOf(-2, 1, -3, 4, -1, 2, 1, -5, 4)\n    println(maxSubArray(numbers))\n}\n```"
  },
  {
    "task": "Write a function that takes a list and a number, and finds two numbers in the list that sum to the given number.",
    "code": "```kotlin\nfun findPairWithSum(numbers: List<Int>, target: Int): Pair<Int, Int>? {\n    val seen = mutableSetOf<Int>()\n    for (number in numbers) {\n        val complement = target - number\n        if (seen.contains(complement)) {\n            return Pair(complement, number)\n        }\n        seen.add(number)\n    }\n    return null\n}\n```"
  },
  {
    "task": "Generate a list of even numbers and filter out those that are greater than a specific value.",
    "code": "```kotlin\nfun main() {\n    val specificValue = 10\n    val numbers = List(20) { it * 2 }\n    val filteredNumbers = numbers.filter { it <= specificValue }\n    println(filteredNumbers)\n}\n```"
  },
  {
    "task": "Create a list of characters and reverse the vowels only.",
    "code": "```kotlin\nfun reverseVowels(input: List<Char>): List<Char> {\n    val vowels = \"aeiouAEIOU\"\n    val vowelIndices = input.indices.filter { input[it] in vowels }\n    val vowelsReversed = vowelIndices.map { input[it] }.reversed()\n    \n    return input.mapIndexed { index, char ->\n        if (index in vowelIndices) vowelsReversed[vowelIndices.indexOf(index)] else char\n    }\n}\n\n// Example usage\nval characters = listOf('h', 'e', 'l', 'l', 'o')\nval result = reverseVowels(characters)\nprintln(result) // Output: [h, o, l, l, e]\n```"
  },
  {
    "task": "Write a program to find all permutations of a list of elements.",
    "code": "```kotlin\nfun <T> permutations(list: List<T>): List<List<T>> {\n    if (list.isEmpty()) return listOf(emptyList())\n    val result = mutableListOf<List<T>>()\n    for (i in list.indices) {\n        val current = list[i]\n        val remaining = list.take(i) + list.drop(i + 1)\n        for (perm in permutations(remaining)) {\n            result.add(listOf(current) + perm)\n        }\n    }\n    return result\n}\n\nfun main() {\n    val elements = listOf(1, 2, 3)\n    val perms = permutations(elements)\n    for (perm in perms) {\n        println(perm)\n    }\n}\n```"
  },
  {
    "task": "Implement a function that takes a list and returns the most frequently occurring element.",
    "code": "```kotlin\nfun mostFrequentElement(list: List<Any>): Any? {\n    return list.groupingBy { it }.eachCount().maxByOrNull { it.value }?.key\n}\n```"
  },
  {
    "task": "Create a list of numbers and calculate the variance.",
    "code": "```kotlin\nfun calculateVariance(numbers: List<Double>): Double {\n    val mean = numbers.average()\n    val squaredDifferences = numbers.map { (it - mean) * (it - mean) }\n    return squaredDifferences.average()\n}\n\nfun main() {\n    val numbers = listOf(1.0, 2.0, 3.0, 4.0, 5.0)\n    val variance = calculateVariance(numbers)\n    println(\"Variance: $variance\")\n}\n```"
  },
  {
    "task": "Write a function to concatenate a list of lists into a single list.",
    "code": "```kotlin\nfun <T> concatenateLists(listOfLists: List<List<T>>): List<T> {\n    return listOfLists.flatten()\n}\n```"
  },
  {
    "task": "Generate a list of numbers and replace each element with the product of all other elements.",
    "code": "```kotlin\nfun replaceWithProductOfOthers(numbers: List<Int>): List<Int> {\n    if (numbers.isEmpty()) return numbers\n    val totalProduct = numbers.fold(1) { acc, num -> acc * num }\n    return numbers.map { num -> totalProduct / num }\n}\n\nfun main() {\n    val numbers = listOf(1, 2, 3, 4, 5)\n    val result = replaceWithProductOfOthers(numbers)\n    println(result)\n}\n```"
  },
  {
    "task": "Create a list of strings and find the common prefix.",
    "code": "```kotlin\nfun commonPrefix(strings: List<String>): String {\n    if (strings.isEmpty()) return \"\"\n    var prefix = strings[0]\n    for (string in strings) {\n        while (string.indexOf(prefix) != 0) {\n            prefix = prefix.substring(0, prefix.length - 1)\n            if (prefix.isEmpty()) return \"\"\n        }\n    }\n    return prefix\n}\n\nfun main() {\n    val strings = listOf(\"flower\", \"flow\", \"flight\")\n    val prefix = commonPrefix(strings)\n    println(\"Common prefix: $prefix\")\n}\n```"
  },
  {
    "task": "Write a program to partition a list into two lists based on a predicate function.",
    "code": "```kotlin\nfun <T> partitionList(inputList: List<T>, predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val trueList = mutableListOf<T>()\n    val falseList = mutableListOf<T>()\n\n    for (item in inputList) {\n        if (predicate(item)) {\n            trueList.add(item)\n        } else {\n            falseList.add(item)\n        }\n    }\n\n    return Pair(trueList, falseList)\n}\n\n// Example usage:\nval numbers = listOf(1, 2, 3, 4, 5, 6)\nval (evens, odds) = partitionList(numbers) { it % 2 == 0 }\nprintln(\"Evens: $evens\")\nprintln(\"Odds: $odds\")\n```"
  },
  {
    "task": "Implement a function to find the kth smallest element in a list.",
    "code": "```kotlin\nfun findKthSmallestElement(list: List<Int>, k: Int): Int? {\n    if (k < 1 || k > list.size) return null\n    val sortedList = list.sorted()\n    return sortedList[k - 1]\n}\n```"
  },
  {
    "task": "Create a list of integers and find the length of the longest contiguous sequence.",
    "code": "```kotlin\nfun main() {\n    val numbers = listOf(1, 2, 2, 3, 4, 4, 4, 5, 6)\n    var maxLength = 0\n    var currentLength = 1\n\n    for (i in 1 until numbers.size) {\n        if (numbers[i] == numbers[i - 1]) {\n            currentLength++\n        } else {\n            maxLength = maxOf(maxLength, currentLength)\n            currentLength = 1\n        }\n    }\n    maxLength = maxOf(maxLength, currentLength)\n\n    println(\"The length of the longest contiguous sequence is: $maxLength\")\n}\n```"
  },
  {
    "task": "Write a function that rotates elements in a list while maintaining the relative order of non-rotated elements.",
    "code": "```kotlin\nfun <T> rotateList(elements: List<T>, rotateCount: Int): List<T> {\n    if (elements.isEmpty()) return elements\n    val count = rotateCount % elements.size\n    return elements.drop(count) + elements.take(count)\n}\n```"
  },
  {
    "task": "Generate a list of random numbers and sort them while maintaining the original index positions.",
    "code": "```kotlin\nimport kotlin.random.Random\n\nfun main() {\n    val listSize = 10\n    val randomNumbers = List(listSize) { Random.nextInt(0, 100) }\n    val sortedListWithIndices = randomNumbers.mapIndexed { index, value -> index to value }\n                                            .sortedBy { it.second }\n\n    println(\"Original List with Indices: $randomNumbers\")\n    println(\"Sorted List with Original Indices: $sortedListWithIndices\")\n}\n```"
  },
  {
    "task": "Create a list of numbers and find all subsets that sum up to a specific target.",
    "code": "```kotlin\nfun findSubsets(nums: List<Int>, target: Int): List<List<Int>> {\n    val result = mutableListOf<List<Int>>()\n    \n    fun backtrack(start: Int, current: MutableList<Int>, currentSum: Int) {\n        if (currentSum == target) {\n            result.add(ArrayList(current))\n            return\n        }\n        \n        for (i in start until nums.size) {\n            if (currentSum + nums[i] <= target) {\n                current.add(nums[i])\n                backtrack(i + 1, current, currentSum + nums[i])\n                current.removeAt(current.size - 1)\n            }\n        }\n    }\n    \n    backtrack(0, mutableListOf(), 0)\n    return result\n}\n\nfun main() {\n    val numbers = listOf(1, 2, 3, 4, 5)\n    val target = 5\n    val subsets = findSubsets(numbers, target)\n    println(subsets)\n}\n```"
  },
  {
    "task": "Write a program to simulate a stack using a list.",
    "code": "```kotlin\nclass Stack<T> {\n    private val elements: MutableList<T> = mutableListOf()\n\n    fun push(item: T) {\n        elements.add(item)\n    }\n\n    fun pop(): T? {\n        if (elements.isEmpty()) return null\n        return elements.removeAt(elements.size - 1)\n    }\n\n    fun peek(): T? {\n        return elements.lastOrNull()\n    }\n\n    fun isEmpty(): Boolean {\n        return elements.isEmpty()\n    }\n\n    fun size(): Int {\n        return elements.size\n    }\n}\n\nfun main() {\n    val stack = Stack<Int>()\n    stack.push(1)\n    stack.push(2)\n    println(stack.pop())   // Output: 2\n    println(stack.peek())  // Output: 1\n    println(stack.isEmpty()) // Output: false\n    println(stack.size()) // Output: 1\n}\n```"
  }
]