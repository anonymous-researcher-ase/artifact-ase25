[
  {
    "task": "Create a program that continuously asks the user to enter a number until they input a negative number.",
    "code": "```kotlin\nfun main() {\n    val scanner = java.util.Scanner(System.`in`)\n    while (true) {\n        print(\"Enter a number: \")\n        val number = scanner.nextInt()\n        if (number < 0) {\n            break\n        }\n    }\n}\n```"
  },
  {
    "task": "Write a function that doubles a number and repeats the process until the number is greater than 1000.",
    "code": "```kotlin\nfun doubleUntilGreaterThanThousand(initialNumber: Int): Int {\n    var number = initialNumber\n    while (number <= 1000) {\n        number *= 2\n    }\n    return number\n}\n```"
  },
  {
    "task": "Develop a routine to keep printing 'Hello, World!' until a counter reaches 10.",
    "code": "```kotlin\nfun main() {\n    var counter = 0\n    while (counter < 10) {\n        println(\"Hello, World!\")\n        counter++\n    }\n}\n```"
  },
  {
    "task": "Construct a loop that checks if a randomly generated number is even, repeating until an odd number is found.",
    "code": "```kotlin\nimport kotlin.random.Random\n\nfun main() {\n    var number: Int\n    do {\n        number = Random.nextInt()\n    } while (number % 2 == 0)\n    println(\"Found an odd number: $number\")\n}\n```"
  },
  {
    "task": "Design a countdown timer that prints each second until it reaches zero.",
    "code": "```kotlin\nfun countdownTimer(seconds: Int) {\n    var timeLeft = seconds\n    while (timeLeft >= 0) {\n        println(timeLeft)\n        Thread.sleep(1000)\n        timeLeft--\n    }\n}\n\nfun main() {\n    countdownTimer(10) // Example countdown from 10 seconds\n}\n```"
  },
  {
    "task": "Implement a system where a user can keep adding items to a list until they type 'stop'.",
    "code": "```kotlin\nfun main() {\n    val items = mutableListOf<String>()\n    var input: String?\n\n    do {\n        print(\"Enter an item (or type 'stop' to finish): \")\n        input = readLine()\n        if (input != null && input.lowercase() != \"stop\") {\n            items.add(input)\n        }\n    } while (input != null && input.lowercase() != \"stop\")\n\n    println(\"Items entered: $items\")\n}\n```"
  },
  {
    "task": "Write a script that simulates rolling a die and continues until a six is rolled.",
    "code": "```kotlin\nimport kotlin.random.Random\n\nfun main() {\n    val random = Random.Default\n    var roll: Int\n\n    do {\n        roll = random.nextInt(1, 7)\n        println(\"Rolled: $roll\")\n    } while (roll != 6)\n\n    println(\"Rolled a six, stopping.\")\n}\n```"
  },
  {
    "task": "Create a program that asks for a password and keeps prompting until the correct password is entered.",
    "code": "```kotlin\nfun main() {\n    val correctPassword = \"secret\"\n    var input: String?\n\n    do {\n        println(\"Enter password:\")\n        input = readLine()\n    } while (input != correctPassword)\n\n    println(\"Access granted.\")\n}\n```"
  },
  {
    "task": "Design a loop that calculates the sum of entered numbers until the user enters zero.",
    "code": "```kotlin\nfun main() {\n    var sum = 0\n    var number: Int\n\n    do {\n        print(\"Enter a number (0 to quit): \")\n        number = readLine()?.toIntOrNull() ?: 0\n        sum += number\n    } while (number != 0)\n\n    println(\"The sum of entered numbers is: $sum\")\n}\n```"
  },
  {
    "task": "Implement a feature that prints Fibonacci numbers until a number exceeds 100.",
    "code": "```kotlin\nfun main() {\n    var a = 0\n    var b = 1\n    while (a <= 100) {\n        println(a)\n        val temp = a\n        a = b\n        b += temp\n    }\n}\n```"
  },
  {
    "task": "Develop a loop that keeps halving a number until it becomes less than one.",
    "code": "```kotlin\nfun halveUntilLessThanOne(initialNumber: Double) {\n    var number = initialNumber\n    while (number >= 1) {\n        number /= 2\n    }\n}\n\nfun main() {\n    halveUntilLessThanOne(10.0)\n}\n```"
  },
  {
    "task": "Write a program that asks for names and keeps storing them until the user enters 'done'.",
    "code": "```kotlin\nfun main() {\n    val names = mutableListOf<String>()\n    while (true) {\n        println(\"Enter a name (or type 'done' to finish):\")\n        val input = readLine() ?: \"\"\n        if (input.lowercase() == \"done\") break\n        names.add(input)\n    }\n    println(\"Names entered: $names\")\n}\n```"
  },
  {
    "task": "Create a process that keeps flipping a coin, recording results until there have been five heads.",
    "code": "```kotlin\nfun main() {\n    val random = java.util.Random()\n    var headsCount = 0\n    \n    while (headsCount < 5) {\n        val flip = random.nextBoolean() // true for heads, false for tails\n        if (flip) {\n            headsCount++\n            println(\"Heads\")\n        } else {\n            println(\"Tails\")\n        }\n    }\n}\n```"
  },
  {
    "task": "Implement a countdown that decreases by two each time, starting from 20, until it reaches zero.",
    "code": "```kotlin\nfun main() {\n    var number = 20\n    while (number >= 0) {\n        println(number)\n        number -= 2\n    }\n}\n```"
  },
  {
    "task": "Design a solution that repeatedly asks for user input and repeats it back until they type 'exit'.",
    "code": "```kotlin\nfun main() {\n    val scanner = java.util.Scanner(System.`in`)\n    var input: String\n    while (true) {\n        print(\"Enter something: \")\n        input = scanner.nextLine()\n        if (input.lowercase() == \"exit\") {\n            break\n        }\n        println(\"You entered: $input\")\n    }\n}\n```"
  },
  {
    "task": "Develop a loop to simulate a bank account balance, repeatedly deducting a fee until the balance is below zero.",
    "code": "```kotlin\nfun main() {\n    var balance = 100.0 // Initial balance\n    val fee = 10.0 // Fee to deduct\n\n    while (balance >= 0) {\n        balance -= fee\n    }\n\n    println(\"Final balance: $balance\")\n}\n```"
  },
  {
    "task": "Create a sequence generator that multiplies a number by three each time until it reaches or exceeds 100.",
    "code": "```kotlin\nfun generateSequence(initial: Int) {\n    var number = initial\n    while (number < 100) {\n        println(number)\n        number *= 3\n    }\n    println(number)\n}\n\nfun main() {\n    generateSequence(1)\n}\n```"
  },
  {
    "task": "Write a program that keeps generating random numbers between 1 and 10 until it gets a five.",
    "code": "```kotlin\nimport kotlin.random.Random\n\nfun main() {\n    var number: Int\n    do {\n        number = Random.nextInt(1, 11)\n        println(\"Generated: $number\")\n    } while (number != 5)\n}\n```"
  },
  {
    "task": "Implement a system to keep checking the temperature and only stop when it falls below freezing.",
    "code": "```kotlin\nfun main() {\n    var temperature: Int\n\n    do {\n        println(\"Enter the current temperature:\")\n        temperature = readLine()?.toIntOrNull() ?: continue\n    } while (temperature >= 0)\n\n    println(\"Temperature has fallen below freezing.\")\n}\n```"
  },
  {
    "task": "Construct a quiz game that continues asking questions until the player answers incorrectly.",
    "code": "```kotlin\nfun main() {\n    val questionsAndAnswers = mapOf(\n        \"What is the capital of France?\" to \"Paris\",\n        \"What is 2 + 2?\" to \"4\",\n        \"What is the largest planet in our solar system?\" to \"Jupiter\"\n    )\n\n    val iterator = questionsAndAnswers.entries.iterator()\n    var isCorrect = true\n\n    while (iterator.hasNext() && isCorrect) {\n        val entry = iterator.next()\n        println(entry.key)\n        val answer = readLine()?.trim()\n\n        if (answer.equals(entry.value, ignoreCase = true)) {\n            println(\"Correct!\")\n        } else {\n            println(\"Incorrect! Game over.\")\n            isCorrect = false\n        }\n    }\n}\n```"
  },
  {
    "task": "Write a function that calculates factorials of a number, repeating the process for numbers 1 through 5.",
    "code": "```kotlin\nfun calculateFactorials() {\n    var number = 1\n    while (number <= 5) {\n        var factorial = 1\n        var i = 1\n        while (i <= number) {\n            factorial *= i\n            i++\n        }\n        println(\"Factorial of $number is $factorial\")\n        number++\n    }\n}\n\nfun main() {\n    calculateFactorials()\n}\n```"
  },
  {
    "task": "Create a loop that prints all even numbers between 1 and 50.",
    "code": "```kotlin\nfun main() {\n    var number = 2\n    while (number <= 50) {\n        print(\"$number \")\n        number += 2\n    }\n}\n```"
  },
  {
    "task": "Design a program that continuously asks for user input until a palindrome is entered.",
    "code": "```kotlin\nfun main() {\n    val scanner = java.util.Scanner(System.`in`)\n    while (true) {\n        println(\"Enter a string:\")\n        val input = scanner.nextLine()\n        if (input == input.reversed()) {\n            println(\"Palindrome entered: $input\")\n            break\n        }\n    }\n}\n```"
  },
  {
    "task": "Implement a countdown that decreases by one each second, starting from 100.",
    "code": "```kotlin\nfun main() {\n    var count = 100\n    while (count > 0) {\n        println(count)\n        Thread.sleep(1000)\n        count--\n    }\n}\n```"
  },
  {
    "task": "Write a script that repeatedly asks for a number and adds it to a total until the total exceeds 500.",
    "code": "```kotlin\nfun main() {\n    var total = 0\n    val scanner = java.util.Scanner(System.`in`)\n    \n    while (total <= 500) {\n        println(\"Enter a number:\")\n        val number = scanner.nextInt()\n        total += number\n    }\n    \n    println(\"Total exceeded 500. Final total: $total\")\n}\n```"
  },
  {
    "task": "Create a loop that generates random letters until the letter 'Z' appears.",
    "code": "```kotlin\nimport kotlin.random.Random\n\nfun main() {\n    val letters = ('A'..'Z').toList()\n    var letter: Char\n    do {\n        letter = letters[Random.nextInt(letters.size)]\n        println(letter)\n    } while (letter != 'Z')\n}\n```"
  },
  {
    "task": "Write a process that continues prompting for two numbers and prints their sum if it's even.",
    "code": "```kotlin\nfun main() {\n    val scanner = java.util.Scanner(System.`in`)\n    \n    while (true) {\n        println(\"Enter the first number:\")\n        val num1 = scanner.nextInt()\n        \n        println(\"Enter the second number:\")\n        val num2 = scanner.nextInt()\n        \n        val sum = num1 + num2\n        \n        if (sum % 2 == 0) {\n            println(\"The sum is $sum\")\n        }\n    }\n}\n```"
  },
  {
    "task": "Develop a loop that simulates a traffic light sequence until a manual stop command is received.",
    "code": "```kotlin\nimport java.util.Scanner\n\nfun main() {\n    val scanner = Scanner(System.`in`)\n    var running = true\n\n    while (running) {\n        println(\"Traffic light is Green\")\n        Thread.sleep(1000)\n        println(\"Traffic light is Yellow\")\n        Thread.sleep(1000)\n        println(\"Traffic light is Red\")\n        Thread.sleep(1000)\n\n        println(\"Enter 'stop' to stop the simulation, or press Enter to continue:\")\n        if (scanner.nextLine().trim().equals(\"stop\", ignoreCase = true)) {\n            running = false\n        }\n    }\n}\n```"
  },
  {
    "task": "Implement a feature that keeps printing numbers in reverse order starting from 10.",
    "code": "```kotlin\nfun main() {\n    var number = 10\n    while (number > 0) {\n        println(number)\n        number--\n    }\n}\n```"
  },
  {
    "task": "Create a program that rolls two dice and continues until the sum is exactly seven.",
    "code": "```kotlin\nimport kotlin.random.Random\n\nfun main() {\n    val random = Random(System.currentTimeMillis())\n    var sum: Int\n\n    do {\n        val die1 = random.nextInt(1, 7)\n        val die2 = random.nextInt(1, 7)\n        sum = die1 + die2\n        println(\"Rolled: $die1 and $die2, Sum: $sum\")\n    } while (sum != 7)\n}\n```"
  },
  {
    "task": "Design a loop that keeps asking for ages and prints the average once a negative age is entered.",
    "code": "```kotlin\nfun main() {\n    var sum = 0\n    var count = 0\n\n    while (true) {\n        print(\"Enter age: \")\n        val age = readLine()?.toIntOrNull() ?: continue\n        if (age < 0) break\n        sum += age\n        count++\n    }\n\n    if (count > 0) {\n        val average = sum.toDouble() / count\n        println(\"Average age: $average\")\n    } else {\n        println(\"No valid ages entered.\")\n    }\n}\n```"
  },
  {
    "task": "Write a routine that squares numbers starting from 1 until the square is greater than 500.",
    "code": "```kotlin\nfun main() {\n    var number = 1\n    while (true) {\n        val square = number * number\n        if (square > 500) {\n            break\n        }\n        println(\"Number: $number, Square: $square\")\n        number++\n    }\n}\n```"
  },
  {
    "task": "Implement a system to ask for a string and append it to a file until 'end' is typed.",
    "code": "```kotlin\nimport java.io.File\n\nfun main() {\n    val filename = \"output.txt\"\n    val file = File(filename)\n    \n    while (true) {\n        print(\"Enter a string (type 'end' to finish): \")\n        val input = readLine() ?: \"\"\n        if (input == \"end\") {\n            break\n        }\n        file.appendText(\"$input\\n\")\n    }\n}\n```"
  },
  {
    "task": "Create a script that checks if a number is prime, repeating for each number entered by the user.",
    "code": "```kotlin\nfun isPrime(number: Int): Boolean {\n    if (number <= 1) return false\n    if (number == 2) return true\n    if (number % 2 == 0) return false\n    var i = 3\n    while (i * i <= number) {\n        if (number % i == 0) return false\n        i += 2\n    }\n    return true\n}\n\nfun main() {\n    while (true) {\n        println(\"Enter a number (or type 'exit' to quit):\")\n        val input = readLine()\n        if (input == \"exit\") break\n        val number = input?.toIntOrNull()\n        if (number == null) {\n            println(\"Please enter a valid integer.\")\n            continue\n        }\n        if (isPrime(number)) {\n            println(\"$number is a prime number.\")\n        } else {\n            println(\"$number is not a prime number.\")\n        }\n    }\n}\n```"
  },
  {
    "task": "Develop a countdown that prints numbers starting from 50 down to 1.",
    "code": "```kotlin\nfun main() {\n    var number = 50\n    while (number >= 1) {\n        println(number)\n        number--\n    }\n}\n```"
  },
  {
    "task": "Write a program that keeps doubling the value of a variable until it exceeds 200.",
    "code": "```kotlin\nfun main() {\n    var value = 1\n    while (value <= 200) {\n        value *= 2\n    }\n    println(value)\n}\n```"
  },
  {
    "task": "Design a loop that keeps generating a random string of letters until a specific word is formed.",
    "code": "```kotlin\nimport kotlin.random.Random\n\nfun generateRandomString(length: Int): String {\n    val chars = ('a'..'z').toList()\n    return (1..length).map { chars.random() }.joinToString(\"\")\n}\n\nfun main() {\n    val targetWord = \"hello\"\n    var generatedString = \"\"\n    \n    while (generatedString != targetWord) {\n        generatedString = generateRandomString(targetWord.length)\n        println(generatedString)\n    }\n    println(\"Target word '$targetWord' formed!\")\n}\n```"
  },
  {
    "task": "Implement a system that continuously fetches data from a sensor until a threshold is crossed.",
    "code": "```kotlin\nfun fetchDataFromSensor(): Int {\n    // Mock function to simulate data fetching from a sensor\n    return (1..100).random()\n}\n\nfun main() {\n    val threshold = 50\n    var sensorData: Int\n\n    do {\n        sensorData = fetchDataFromSensor()\n        println(\"Sensor Data: $sensorData\")\n    } while (sensorData <= threshold)\n\n    println(\"Threshold crossed. Stopping data fetch.\")\n}\n```"
  },
  {
    "task": "Create a game where a player guesses a number, and the game continues until the player guesses correctly.",
    "code": "```kotlin\nimport kotlin.random.Random\nimport kotlin.system.exitProcess\n\nfun main() {\n    val targetNumber = Random.nextInt(1, 100)\n    var guess: Int?\n\n    println(\"Guess the number between 1 and 100:\")\n    \n    while (true) {\n        print(\"Enter your guess: \")\n        guess = readLine()?.toIntOrNull()\n\n        if (guess == null) {\n            println(\"Please enter a valid number.\")\n            continue\n        }\n\n        when {\n            guess < targetNumber -> println(\"Too low, try again!\")\n            guess > targetNumber -> println(\"Too high, try again!\")\n            else -> {\n                println(\"Congratulations! You've guessed the number.\")\n                break\n            }\n        }\n    }\n}\n```"
  },
  {
    "task": "Write a loop that continues to add random numbers to a list until the list has 10 even numbers.",
    "code": "```kotlin\nimport kotlin.random.Random\n\nfun main() {\n    val evenNumbers = mutableListOf<Int>()\n\n    while (evenNumbers.size < 10) {\n        val num = Random.nextInt()\n        if (num % 2 == 0) {\n            evenNumbers.add(num)\n        }\n    }\n\n    println(evenNumbers)\n}\n```"
  },
  {
    "task": "Design a routine that keeps removing elements from a list until it is empty.",
    "code": "```kotlin\nfun removeAllElements(elements: MutableList<Any>) {\n    while (elements.isNotEmpty()) {\n        elements.removeAt(0)\n    }\n}\n```"
  },
  {
    "task": "Implement a sequence that prints the alphabet repeatedly until interrupted by the user.",
    "code": "```kotlin\nfun main() {\n    val alphabet = ('A'..'Z').joinToString(\"\")\n    while (true) {\n        println(alphabet)\n    }\n}\n```"
  },
  {
    "task": "Create a program that continuously checks for updates and stops once an update is available.",
    "code": "```kotlin\nfun checkForUpdates(): Boolean {\n    // Placeholder function for checking updates\n    // Replace with actual update checking logic\n    return Math.random() < 0.1\n}\n\nfun main() {\n    var updateAvailable = false\n    while (!updateAvailable) {\n        println(\"Checking for updates...\")\n        updateAvailable = checkForUpdates()\n        Thread.sleep(1000) // Simulate time delay between checks\n    }\n    println(\"Update available!\")\n}\n```"
  },
  {
    "task": "Write a function that keeps dividing a number by two until it results in a fractional value.",
    "code": "```kotlin\nfun divideUntilFractional(number: Double): Double {\n    var n = number\n    while (n % 1 == 0.0) {\n        n /= 2\n    }\n    return n\n}\n```"
  },
  {
    "task": "Develop a loop that keeps asking for student's grades and calculates the average until a grade of -1 is entered.",
    "code": "```kotlin\nfun main() {\n    var sum = 0.0\n    var count = 0\n\n    while (true) {\n        println(\"Enter student's grade (or -1 to finish):\")\n        val grade = readLine()!!.toInt()\n        \n        if (grade == -1) {\n            break\n        }\n\n        sum += grade\n        count++\n    }\n\n    if (count > 0) {\n        val average = sum / count\n        println(\"The average grade is: $average\")\n    } else {\n        println(\"No grades were entered.\")\n    }\n}\n```"
  },
  {
    "task": "Design a feature that continuously monitors a file for changes and stops when no changes are detected for a minute.",
    "code": "```kotlin\nimport java.io.File\nimport java.nio.file.Files\nimport java.nio.file.Paths\nimport java.nio.file.StandardWatchEventKinds\nimport java.nio.file.WatchKey\nimport java.nio.file.WatchService\nimport kotlin.concurrent.thread\nimport kotlin.system.exitProcess\n\nfun main() {\n    val path = Paths.get(\"path/to/your/file\")\n    val file = File(path.toUri())\n    \n    if (!file.exists()) {\n        println(\"File does not exist.\")\n        exitProcess(1)\n    }\n    \n    val watchService: WatchService = path.fileSystem.newWatchService()\n    path.parent.register(watchService, StandardWatchEventKinds.ENTRY_MODIFY)\n    \n    var lastModifiedTime = file.lastModified()\n    var changeDetected = false\n    var stopMonitoring = false\n    \n    thread {\n        while (!stopMonitoring) {\n            val key: WatchKey = watchService.poll()\n            if (key != null) {\n                key.pollEvents().forEach { event ->\n                    val changedFilePath = path.parent.resolve(event.context() as Path)\n                    if (changedFilePath.toFile().absolutePath == file.absolutePath) {\n                        val currentModifiedTime = file.lastModified()\n                        if (currentModifiedTime != lastModifiedTime) {\n                            lastModifiedTime = currentModifiedTime\n                            changeDetected = true\n                        }\n                    }\n                }\n                key.reset()\n            }\n            Thread.sleep(1000)\n        }\n    }\n    \n    thread {\n        while (!stopMonitoring) {\n            if (changeDetected) {\n                changeDetected = false\n                Thread.sleep(60000)\n            } else {\n                stopMonitoring = true\n            }\n        }\n        watchService.close()\n        println(\"No changes detected for a minute. Stopping monitoring.\")\n    }\n}\n```"
  },
  {
    "task": "Implement a process where a motor runs until a certain distance is reached.",
    "code": "```kotlin\nfun runMotorUntil(distanceThreshold: Double) {\n    var currentDistance = 0.0\n    \n    while (currentDistance < distanceThreshold) {\n        // Code to run the motor\n        println(\"Motor is running...\")\n\n        // Simulate distance increment\n        currentDistance += 1.0 // Replace this with real data\n    }\n    \n    println(\"Target distance reached. Motor stopped.\")\n}\n\n// Example usage\nfun main() {\n    runMotorUntil(10.0)\n}\n```"
  },
  {
    "task": "Create a script that keeps generating random numbers and stops when it generates a prime number.",
    "code": "```kotlin\nimport kotlin.random.Random\nimport kotlin.math.sqrt\n\nfun isPrime(num: Int): Boolean {\n    if (num < 2) return false\n    for (i in 2..sqrt(num.toDouble()).toInt()) {\n        if (num % i == 0) return false\n    }\n    return true\n}\n\nfun main() {\n    var number: Int\n    do {\n        number = Random.nextInt(1, 100)\n        println(\"Generated: $number\")\n    } while (!isPrime(number))\n    println(\"Prime number found: $number\")\n}\n```"
  },
  {
    "task": "Write a program that asks for the user's favorite color and keeps asking until they say 'blue'.",
    "code": "```kotlin\nfun main() {\n    var color: String?\n    do {\n        println(\"What is your favorite color?\")\n        color = readLine()\n    } while (color != \"blue\")\n}\n```"
  },
  {
    "task": "Develop a loop that continuously prints the time every second until a key is pressed.",
    "code": "```kotlin\nimport java.time.LocalTime\nimport java.time.format.DateTimeFormatter\n\nfun main() {\n    val formatter = DateTimeFormatter.ofPattern(\"HH:mm:ss\")\n    val thread = Thread {\n        println(\"Press any key to stop...\")\n        while (!System.`in`.available()) {\n            val currentTime = LocalTime.now().format(formatter)\n            println(currentTime)\n            Thread.sleep(1000)\n        }\n    }\n    thread.start()\n}\n```"
  },
  {
    "task": "Create a system to keep downloading data from a server until the connection is lost.",
    "code": "```kotlin\nfun downloadDataFromServer() {\n    var isConnected = true\n\n    while (isConnected) {\n        try {\n            // Simulate data download from server\n            println(\"Downloading data...\")\n            // Simulate checking connection status\n            isConnected = checkServerConnection()\n        } catch (e: Exception) {\n            println(\"Error occurred: ${e.message}\")\n            isConnected = false\n        }\n    }\n    println(\"Connection lost. Stopping download.\")\n}\n\nfun checkServerConnection(): Boolean {\n    // Simulate a connection check\n    return Math.random() > 0.1 // 90% chance connection is still alive\n}\n\nfun main() {\n    downloadDataFromServer()\n}\n```"
  },
  {
    "task": "Write a process to keep a light on until the ambient light level is sufficient.",
    "code": "```kotlin\nfun main() {\n    val sufficientLightLevel = 100 // Example threshold\n    var currentLightLevel = 0 // Initial light level\n    var isLightOn = true\n\n    while (isLightOn) {\n        currentLightLevel = getAmbientLightLevel() // Assume this function retrieves the current ambient light level\n        if (currentLightLevel >= sufficientLightLevel) {\n            isLightOn = false\n        }\n    }\n    println(\"Light is now off.\")\n}\n\n// Placeholder for actual function to get ambient light level\nfun getAmbientLightLevel(): Int {\n    // Logic to retrieve the current ambient light level\n    return 0 // Example value\n}\n```"
  },
  {
    "task": "Implement a feature that continuously plays a sound until the user presses a button.",
    "code": "```kotlin\nimport java.util.Scanner\n\nfun main() {\n    val scanner = Scanner(System.`in`)\n    var buttonPressed = false\n\n    while (!buttonPressed) {\n        playSound()\n        println(\"Press any key to stop the sound...\")\n        if (scanner.hasNext()) {\n            buttonPressed = true\n        }\n    }\n}\n\nfun playSound() {\n    // Code to play sound\n    println(\"Playing sound...\")\n}\n```"
  },
  {
    "task": "Design a program that keeps multiplying a matrix by itself until its determinant is greater than 1000.",
    "code": "```kotlin\nimport org.apache.commons.math3.linear.MatrixUtils\nimport org.apache.commons.math3.linear.RealMatrix\n\nfun main() {\n    val initialData = arrayOf(\n        doubleArrayOf(1.0, 2.0),\n        doubleArrayOf(3.0, 4.0)\n    )\n\n    var matrix: RealMatrix = MatrixUtils.createRealMatrix(initialData)\n\n    while (matrix.determinant <= 1000) {\n        matrix = matrix.multiply(matrix)\n    }\n}\n```"
  },
  {
    "task": "Create a script that keeps prompting the user to guess a word until they get it right.",
    "code": "```kotlin\nfun main() {\n    val secretWord = \"kotlin\"\n    var guessedWord: String?\n\n    do {\n        print(\"Guess the word: \")\n        guessedWord = readLine()\n    } while (guessedWord != secretWord)\n\n    println(\"Congratulations! You guessed the word.\")\n}\n```"
  },
  {
    "task": "Write a loop that simulates a car's fuel consumption and stops when the tank is empty.",
    "code": "```kotlin\nfun main() {\n    var fuel = 50 // Initial fuel level\n\n    while (fuel > 0) {\n        println(\"Fuel level: $fuel\")\n        fuel -= 5 // Simulate fuel consumption\n    }\n\n    println(\"The tank is empty.\")\n}\n```"
  },
  {
    "task": "Develop a routine that keeps checking if a file exists and stops once it does.",
    "code": "```kotlin\nimport java.io.File\n\nfun checkFileExists(filePath: String) {\n    while (true) {\n        val file = File(filePath)\n        if (file.exists()) {\n            break\n        }\n    }\n}\n```"
  },
  {
    "task": "Implement a feature that continuously calculates the square root of a number until it's less than 0.1.",
    "code": "```kotlin\nimport kotlin.math.sqrt\n\nfun main() {\n    var number = 16.0 // Example starting number\n    while (number >= 0.1) {\n        number = sqrt(number)\n        println(\"Current square root: $number\")\n    }\n}\n```"
  },
  {
    "task": "Create a system that prints 'Processing...' every second until a task is complete.",
    "code": "```kotlin\nfun main() {\n    var taskComplete = false\n    \n    while (!taskComplete) {\n        println(\"Processing...\")\n        Thread.sleep(1000)\n        // Here you could insert the logic to check if the task is complete\n        // For example, setting taskComplete = true if some condition is met\n    }\n}\n```"
  },
  {
    "task": "Write a loop that repeatedly checks the status of a process until it reports 'complete'.",
    "code": "```kotlin\nvar status = \"incomplete\"\n\nwhile (status != \"complete\") {\n    // Simulate checking the process status\n    status = checkProcessStatus() // Assume this function returns the current status\n}\n```"
  },
  {
    "task": "Design a routine to keep pinging a server and alert when the connection is lost.",
    "code": "```kotlin\nfun pingServer() {\n    val serverAddress = \"http://example.com\"\n    var isConnected = true\n\n    while (isConnected) {\n        try {\n            val url = URL(serverAddress)\n            val connection = url.openConnection() as HttpURLConnection\n            connection.requestMethod = \"GET\"\n            connection.connect()\n            if (connection.responseCode != 200) {\n                isConnected = false\n                println(\"Connection lost. Alert!\")\n            }\n            connection.disconnect()\n            Thread.sleep(5000) // Wait for 5 seconds before next ping\n        } catch (e: Exception) {\n            isConnected = false\n            println(\"Connection lost. Alert!\")\n        }\n    }\n}\n```"
  },
  {
    "task": "Implement a loop that counts down from 100 by fives until it reaches zero.",
    "code": "```kotlin\nfun main() {\n    var number = 100\n    while (number >= 0) {\n        println(number)\n        number -= 5\n    }\n}\n```"
  },
  {
    "task": "Create a script that keeps track of inventory items being added or removed until an end signal is given.",
    "code": "```kotlin\nfun main() {\n    val inventory = mutableMapOf<String, Int>()\n    while (true) {\n        println(\"Enter command (add/remove/show/end):\")\n        when (readLine()?.trim()?.toLowerCase()) {\n            \"add\" -> {\n                println(\"Enter item name to add:\")\n                val itemName = readLine()?.trim() ?: continue\n                println(\"Enter quantity to add:\")\n                val quantity = readLine()?.toIntOrNull() ?: continue\n                inventory[itemName] = inventory.getOrDefault(itemName, 0) + quantity\n            }\n            \"remove\" -> {\n                println(\"Enter item name to remove:\")\n                val itemName = readLine()?.trim() ?: continue\n                println(\"Enter quantity to remove:\")\n                val quantity = readLine()?.toIntOrNull() ?: continue\n                inventory[itemName] = (inventory[itemName] ?: 0) - quantity\n                if (inventory[itemName]!! <= 0) {\n                    inventory.remove(itemName)\n                }\n            }\n            \"show\" -> {\n                println(\"Current inventory:\")\n                inventory.forEach { (item, quantity) ->\n                    println(\"$item: $quantity\")\n                }\n            }\n            \"end\" -> return\n            else -> println(\"Unknown command, please try again.\")\n        }\n    }\n}\n```"
  },
  {
    "task": "Write a program that keeps calculating the power of two for numbers until a result is greater than 1000.",
    "code": "```kotlin\nfun main() {\n    var number = 1\n    var result = 1\n    while (result <= 1000) {\n        result = 2.0.pow(number).toInt()\n        println(\"2^$number = $result\")\n        number++\n    }\n}\n```"
  },
  {
    "task": "Develop a sequence that keeps appending random numbers to an array until its length is 20.",
    "code": "```kotlin\nimport kotlin.random.Random\n\nfun main() {\n    val numbers = mutableListOf<Int>()\n    while (numbers.size < 20) {\n        numbers.add(Random.nextInt())\n    }\n    println(numbers)\n}\n```"
  },
  {
    "task": "Implement a routine that continuously rotates an image until it matches a reference orientation.",
    "code": "```kotlin\nfun rotateUntilMatch(image: Image, referenceOrientation: Orientation): Image {\n    while (image.orientation != referenceOrientation) {\n        image.rotate()\n    }\n    return image\n}\n```"
  },
  {
    "task": "Design a loop that keeps printing random jokes until the user stops it.",
    "code": "```kotlin\nimport kotlin.random.Random\nimport java.util.Scanner\n\nfun main() {\n    val jokes = listOf(\n        \"Why don't scientists trust atoms? Because they make up everything!\",\n        \"What do you get when you cross a snowman with a vampire? Frostbite.\",\n        \"Why did the math book look sad? Because it had too many problems.\",\n        \"How do you organize a space party? You planet.\",\n        \"Why did the scarecrow win an award? Because he was outstanding in his field!\"\n    )\n\n    val scanner = Scanner(System.`in`)\n    var continuePrinting = true\n\n    while (continuePrinting) {\n        println(jokes[Random.nextInt(jokes.size)])\n        println(\"Do you want to hear another joke? (yes/no)\")\n        val response = scanner.nextLine().trim().lowercase()\n        if (response != \"yes\") {\n            continuePrinting = false\n        }\n    }\n}\n```"
  },
  {
    "task": "Create a program that accepts user feedback and continues until a positive feedback is received.",
    "code": "```kotlin\nimport java.util.Scanner\n\nfun main() {\n    val scanner = Scanner(System.`in`)\n    var feedback: String\n\n    do {\n        println(\"Please enter your feedback:\")\n        feedback = scanner.nextLine()\n    } while (!isPositiveFeedback(feedback))\n\n    println(\"Thank you for your positive feedback!\")\n}\n\nfun isPositiveFeedback(feedback: String): Boolean {\n    val positiveKeywords = listOf(\"good\", \"excellent\", \"awesome\", \"great\", \"positive\")\n    return positiveKeywords.any { feedback.contains(it, ignoreCase = true) }\n}\n```"
  },
  {
    "task": "Write a loop that repeatedly reads sensor data and stops when a stable reading is observed.",
    "code": "```kotlin\nfun main() {\n    var lastReading: Int? = null\n    var stableReading = false\n\n    while (!stableReading) {\n        val currentReading = readSensorData()\n\n        if (currentReading == lastReading) {\n            stableReading = true\n        } else {\n            lastReading = currentReading\n        }\n    }\n}\n\nfun readSensorData(): Int {\n    // Placeholder function to simulate sensor data reading\n    return (0..100).random()\n}\n```"
  },
  {
    "task": "Develop a system that simulates a stopwatch, counting seconds until stopped manually.",
    "code": "```kotlin\nimport kotlin.concurrent.thread\n\nfun main() {\n    var seconds = 0\n    var running = true\n\n    val stopwatchThread = thread {\n        while (running) {\n            Thread.sleep(1000)\n            seconds++\n            println(\"Seconds passed: $seconds\")\n        }\n    }\n\n    println(\"Press Enter to stop the stopwatch...\")\n    readLine()\n    running = false\n    stopwatchThread.join()\n    println(\"Stopwatch stopped at $seconds seconds.\")\n}\n```"
  },
  {
    "task": "Create a script that continues adding random integers to a sum until the sum exceeds 100.",
    "code": "```kotlin\nimport kotlin.random.Random\n\nfun main() {\n    var sum = 0\n    while (sum <= 100) {\n        val randomInt = Random.nextInt(1, 100)\n        sum += randomInt\n    }\n    println(\"Final sum: $sum\")\n}\n```"
  },
  {
    "task": "Implement a process to track a moving object until it stops.",
    "code": "```kotlin\nfun trackMovingObject() {\n    var isMoving = true\n    while (isMoving) {\n        // Here you would check the object's movement status\n        // For demonstration, let's assume we have a function isObjectMoving()\n        isMoving = isObjectMoving()\n    }\n}\n\nfun isObjectMoving(): Boolean {\n    // Placeholder function to simulate object movement\n    // Replace with actual logic to determine if the object is moving\n    return Math.random() > 0.1 // Simulate movement with random chance\n}\n\nfun main() {\n    trackMovingObject()\n    println(\"The object has stopped moving.\")\n}\n```"
  },
  {
    "task": "Design a routine to keep checking user login attempts until a successful login occurs.",
    "code": "```kotlin\nfun main() {\n    val correctUsername = \"user\"\n    val correctPassword = \"pass\"\n    var loggedIn = false\n\n    while (!loggedIn) {\n        println(\"Enter your username:\")\n        val username = readLine()\n        println(\"Enter your password:\")\n        val password = readLine()\n\n        if (username == correctUsername && password == correctPassword) {\n            println(\"Login successful!\")\n            loggedIn = true\n        } else {\n            println(\"Incorrect username or password. Please try again.\")\n        }\n    }\n}\n```"
  },
  {
    "task": "Write a loop that repeatedly calculates the area of a circle for radii from 1 to 10.",
    "code": "```kotlin\nfun main() {\n    var radius = 1\n    while (radius <= 10) {\n        val area = Math.PI * radius * radius\n        println(\"Radius: $radius, Area: $area\")\n        radius++\n    }\n}\n```"
  },
  {
    "task": "Create a program that continues flipping a card from a deck until an ace is drawn.",
    "code": "```kotlin\nimport kotlin.random.Random\n\nfun main() {\n    val deck = listOf(\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\")\n    var card: String\n\n    do {\n        card = deck[Random.nextInt(deck.size)]\n        println(\"Flipped: $card\")\n    } while (card != \"A\")\n}\n```"
  },
  {
    "task": "Develop a loop that keeps asking for a word and stores it until a word with more than five letters is entered.",
    "code": "```kotlin\nfun main() {\n    val words = mutableListOf<String>()\n    while (true) {\n        println(\"Please enter a word:\")\n        val word = readLine() ?: \"\"\n        words.add(word)\n        if (word.length > 5) {\n            break\n        }\n    }\n}\n```"
  },
  {
    "task": "Implement a feature that continuously calculates the exponential growth of a population until it doubles.",
    "code": "```kotlin\nfun main() {\n    val initialPopulation = 1000.0\n    val growthRate = 0.05\n    var population = initialPopulation\n    val targetPopulation = initialPopulation * 2\n\n    while (population < targetPopulation) {\n        population += population * growthRate\n    }\n\n    println(\"Population has doubled: $population\")\n}\n```"
  },
  {
    "task": "Write a script that repeats a string a certain number of times until a limit is reached.",
    "code": "```kotlin\nfun repeatStringUntilLimit(str: String, count: Int, limit: Int): String {\n    val sb = StringBuilder()\n    var times = 0\n    while (times < count && sb.length + str.length <= limit) {\n        sb.append(str)\n        times++\n    }\n    return sb.toString()\n}\n\nfun main() {\n    val result = repeatStringUntilLimit(\"hello\", 3, 15)\n    println(result)\n}\n```"
  },
  {
    "task": "Create a routine that keeps accessing an API endpoint until it returns a specific result.",
    "code": "```kotlin\nimport java.net.HttpURLConnection\nimport java.net.URL\n\nfun checkApiResult(): Boolean {\n    val url = URL(\"https://api.example.com/endpoint\")\n    val connection = url.openConnection() as HttpURLConnection\n    connection.requestMethod = \"GET\"\n    val responseCode = connection.responseCode\n    // Assume the specific result is a 200 OK response\n    return responseCode == 200\n}\n\nfun main() {\n    while (!checkApiResult()) {\n        println(\"Waiting for the specific result...\")\n        Thread.sleep(1000) // Wait for 1 second before retrying\n    }\n    println(\"Specific result received!\")\n}\n```"
  },
  {
    "task": "Design a loop that continues to fetch stock prices until a certain price threshold is crossed.",
    "code": "```kotlin\nfun fetchStockPrice(): Double {\n    // Simulated stock price fetch\n    return Math.random() * 150\n}\n\nfun main() {\n    val priceThreshold = 100.0\n    var currentPrice = fetchStockPrice()\n    \n    while (currentPrice <= priceThreshold) {\n        println(\"Current stock price: $currentPrice\")\n        currentPrice = fetchStockPrice()\n    }\n    \n    println(\"Price threshold crossed: $currentPrice\")\n}\n```"
  },
  {
    "task": "Implement a process that keeps monitoring CPU usage until it drops below 10%.",
    "code": "```kotlin\nimport java.lang.management.ManagementFactory\nimport com.sun.management.OperatingSystemMXBean\n\nfun main() {\n    val osBean = ManagementFactory.getPlatformMXBean(OperatingSystemMXBean::class.java)\n    \n    while (true) {\n        val cpuLoad = osBean.systemCpuLoad * 100\n        if (cpuLoad < 10) {\n            break\n        }\n        Thread.sleep(1000)\n    }\n}\n```"
  },
  {
    "task": "Write a program that asks for a series of numbers and prints the largest once a negative number is entered.",
    "code": "```kotlin\nfun main() {\n    var largest = Int.MIN_VALUE\n    while (true) {\n        print(\"Enter a number: \")\n        val number = readLine()?.toIntOrNull() ?: continue\n        if (number < 0) break\n        if (number > largest) largest = number\n    }\n    println(\"The largest number is: $largest\")\n}\n```"
  },
  {
    "task": "Develop a system that keeps a heater on until the room reaches a desired temperature.",
    "code": "```kotlin\nfun main() {\n    var currentTemperature = 18 // Example starting temperature\n    val desiredTemperature = 22 // Desired temperature\n\n    while (currentTemperature < desiredTemperature) {\n        println(\"Heater is on. Current temperature: $currentTemperature\u00b0C\")\n        currentTemperature++ // Simulating the increase in temperature\n    }\n\n    println(\"Desired temperature reached: $currentTemperature\u00b0C. Heater is off.\")\n}\n```"
  },
  {
    "task": "Create a loop that repeatedly checks if a door is open and alerts if it remains open for too long.",
    "code": "```kotlin\nfun main() {\n    var doorOpen = true\n    var alertThreshold = 5\n    var timeOpen = 0\n\n    while (doorOpen) {\n        // Simulate checking the door status\n        if (isDoorStillOpen()) {\n            timeOpen++\n            if (timeOpen > alertThreshold) {\n                println(\"Alert: The door has been open for too long!\")\n                break\n            }\n        } else {\n            doorOpen = false\n        }\n    }\n}\n\nfun isDoorStillOpen(): Boolean {\n    // Simulate door status check\n    return true // Assume door is open for demonstration\n}\n```"
  },
  {
    "task": "Implement a feature that keeps adding random characters to a string until its length is 8.",
    "code": "```kotlin\nimport kotlin.random.Random\n\nfun main() {\n    val chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\n    var result = \"\"\n\n    while (result.length < 8) {\n        val randomChar = chars[Random.nextInt(chars.length)]\n        result += randomChar\n    }\n\n    println(result)\n}\n```"
  },
  {
    "task": "Design a routine that simulates a race and continues until a participant crosses the finish line.",
    "code": "```kotlin\nfun simulateRace() {\n    val finishLine = 100\n    var participantPosition = 0\n\n    while (participantPosition < finishLine) {\n        participantPosition += (1..10).random()\n        println(\"Current position: $participantPosition\")\n    }\n    println(\"The participant has crossed the finish line!\")\n}\n\nfun main() {\n    simulateRace()\n}\n```"
  },
  {
    "task": "Write a script that keeps checking an email inbox until a specific email is received.",
    "code": "```kotlin\nfun checkEmailInbox() {\n    var emailReceived = false\n\n    while (!emailReceived) {\n        // Simulate checking the email inbox\n        val currentEmails = getEmails()\n\n        // Check if the specific email is present\n        emailReceived = currentEmails.any { email -> email.subject == \"Specific Subject\" }\n\n        // Optional: Add a sleep to prevent tight loop, e.g., Thread.sleep(5000)\n    }\n}\n\n// Dummy function to simulate retrieving emails\nfun getEmails(): List<Email> {\n    // This function should interact with an email service provider\n    // For example, using an email API or IMAP/POP3\n    return listOf()\n}\n\ndata class Email(val subject: String, val body: String)\n```"
  },
  {
    "task": "Create a loop that continues to play a video on repeat until the user interrupts.",
    "code": "```kotlin\nfun playVideo() {\n    println(\"Playing video...\")\n}\n\nfun main() {\n    var isInterrupted = false\n\n    while (!isInterrupted) {\n        playVideo()\n        // Assume some mechanism here to update isInterrupted based on user input\n    }\n}\n```"
  },
  {
    "task": "Develop a process that keeps scanning for Bluetooth devices until a specific device is found.",
    "code": "```kotlin\nfun scanForBluetoothDevice(targetDeviceName: String): Boolean {\n    var deviceFound = false\n    val bluetoothAdapter = BluetoothAdapter.getDefaultAdapter()\n\n    while (!deviceFound) {\n        val pairedDevices = bluetoothAdapter.bondedDevices\n\n        for (device in pairedDevices) {\n            if (device.name == targetDeviceName) {\n                deviceFound = true\n                break\n            }\n        }\n    }\n\n    return deviceFound\n}\n```"
  },
  {
    "task": "Implement a script that continuously captures images from a webcam until a motion is detected.",
    "code": "```kotlin\nimport org.opencv.core.Core\nimport org.opencv.core.Mat\nimport org.opencv.core.Scalar\nimport org.opencv.core.Size\nimport org.opencv.highgui.HighGui\nimport org.opencv.videoio.VideoCapture\nimport org.opencv.imgproc.Imgproc\n\nfun main() {\n    System.loadLibrary(Core.NATIVE_LIBRARY_NAME)\n\n    val capture = VideoCapture(0)\n    if (!capture.isOpened) {\n        println(\"Error: Could not open video device.\")\n        return\n    }\n\n    var previousFrame: Mat? = null\n\n    while (true) {\n        val currentFrame = Mat()\n        if (!capture.read(currentFrame) || currentFrame.empty()) {\n            println(\"Error: Could not read frame.\")\n            break\n        }\n\n        if (previousFrame != null) {\n            val diff = Mat()\n            Core.absdiff(previousFrame, currentFrame, diff)\n            Imgproc.cvtColor(diff, diff, Imgproc.COLOR_BGR2GRAY)\n            Imgproc.GaussianBlur(diff, diff, Size(5.0, 5.0), 0.0)\n            val thresholdImage = Mat()\n            Imgproc.threshold(diff, thresholdImage, 25.0, 255.0, Imgproc.THRESH_BINARY)\n\n            val motion = Core.countNonZero(thresholdImage) > 0\n\n            if (motion) {\n                println(\"Motion detected!\")\n                break\n            }\n        }\n\n        previousFrame = currentFrame.clone()\n\n        HighGui.imshow(\"Webcam\", currentFrame)\n        if (HighGui.waitKey(1) == 27) { // Escape key\n            break\n        }\n    }\n    capture.release()\n    HighGui.destroyAllWindows()\n}\n```"
  },
  {
    "task": "Design a program that keeps playing a sound file until the user presses a mute button.",
    "code": "```kotlin\nimport java.util.Scanner\n\nfun playSound() {\n    // Simulate playing sound\n    println(\"Playing sound...\")\n}\n\nfun isMuteButtonPressed(scanner: Scanner): Boolean {\n    // Simulate checking if mute button is pressed\n    println(\"Press 'm' to mute:\")\n    return scanner.nextLine().trim().equals(\"m\", ignoreCase = true)\n}\n\nfun main() {\n    val scanner = Scanner(System.`in`)\n    \n    while (true) {\n        playSound()\n        \n        if (isMuteButtonPressed(scanner)) {\n            println(\"Sound muted.\")\n            break\n        }\n    }\n}\n```"
  },
  {
    "task": "Create a loop that repeatedly generates a random password until it meets certain security criteria.",
    "code": "```kotlin\nimport kotlin.random.Random\n\nfun generateRandomPassword(length: Int): String {\n    val chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"\n    return (1..length)\n        .map { chars.random() }\n        .joinToString(\"\")\n}\n\nfun isSecurePassword(password: String): Boolean {\n    val hasUpperCase = password.any { it.isUpperCase() }\n    val hasLowerCase = password.any { it.isLowerCase() }\n    val hasDigit = password.any { it.isDigit() }\n    return hasUpperCase && hasLowerCase && hasDigit\n}\n\nfun main() {\n    var password: String\n    do {\n        password = generateRandomPassword(12)\n    } while (!isSecurePassword(password))\n    println(\"Generated secure password: $password\")\n}\n```"
  },
  {
    "task": "Write a process that keeps checking for file changes in a directory and logs them until stopped.",
    "code": "```kotlin\nimport java.io.File\nimport java.nio.file.*\nimport kotlin.system.exitProcess\n\nfun watchDirectory(path: String) {\n    val watchService = FileSystems.getDefault().newWatchService()\n    val dir = Paths.get(path)\n    dir.register(watchService, StandardWatchEventKinds.ENTRY_CREATE, StandardWatchEventKinds.ENTRY_DELETE, StandardWatchEventKinds.ENTRY_MODIFY)\n\n    println(\"Watching directory: $path\")\n\n    while (true) {\n        val key = watchService.take()\n        for (event in key.pollEvents()) {\n            val kind = event.kind()\n            if (kind == StandardWatchEventKinds.OVERFLOW) continue\n\n            val fileName = event.context() as Path\n            println(\"Event kind: $kind. File affected: $fileName.\")\n        }\n        val valid = key.reset()\n        if (!valid) {\n            println(\"Key has been unregistered\")\n            break\n        }\n    }\n}\n\nfun main() {\n    val path = \"./your-directory\" // change to your directory path\n    watchDirectory(path)\n}\n```"
  }
]