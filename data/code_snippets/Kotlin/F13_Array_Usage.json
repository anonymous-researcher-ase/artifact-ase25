[
  {
    "task": "Create a function that initializes an array with the first ten prime numbers.",
    "code": "```kotlin\nfun getFirstTenPrimes(): IntArray {\n    return intArrayOf(2, 3, 5, 7, 11, 13, 17, 19, 23, 29)\n}\n```"
  },
  {
    "task": "Write a program to reverse the elements of a given array.",
    "code": "```kotlin\nfun reverseArray(arr: Array<Int>): Array<Int> {\n    return arr.reversedArray()\n}\n\nfun main() {\n    val array = arrayOf(1, 2, 3, 4, 5)\n    val reversedArray = reverseArray(array)\n    println(reversedArray.joinToString(\", \"))\n}\n```"
  },
  {
    "task": "Implement an algorithm that finds the maximum value in an array of integers.",
    "code": "```kotlin\nfun findMaxValue(array: IntArray): Int? {\n    if (array.isEmpty()) return null\n    var maxValue = array[0]\n    for (element in array) {\n        if (element > maxValue) {\n            maxValue = element\n        }\n    }\n    return maxValue\n}\n```"
  },
  {
    "task": "Design a routine to rotate an array to the right by a given number of steps.",
    "code": "```kotlin\nfun rotateArrayRight(array: IntArray, steps: Int): IntArray {\n    val n = array.size\n    val k = steps % n\n    return array.sliceArray(n - k until n) + array.sliceArray(0 until n - k)\n}\n\nfun main() {\n    val array = intArrayOf(1, 2, 3, 4, 5)\n    val steps = 2\n    val rotatedArray = rotateArrayRight(array, steps)\n    println(rotatedArray.joinToString(\", \"))\n}\n```"
  },
  {
    "task": "Develop a function to merge two sorted arrays into one sorted array.",
    "code": "```kotlin\nfun mergeSortedArrays(arr1: IntArray, arr2: IntArray): IntArray {\n    val result = IntArray(arr1.size + arr2.size)\n    var i = 0\n    var j = 0\n    var k = 0\n\n    while (i < arr1.size && j < arr2.size) {\n        if (arr1[i] < arr2[j]) {\n            result[k++] = arr1[i++]\n        } else {\n            result[k++] = arr2[j++]\n        }\n    }\n\n    while (i < arr1.size) {\n        result[k++] = arr1[i++]\n    }\n\n    while (j < arr2.size) {\n        result[k++] = arr2[j++]\n    }\n\n    return result\n}\n```"
  },
  {
    "task": "Create a method to remove duplicate values from an array.",
    "code": "```kotlin\nfun removeDuplicates(array: Array<Int>): Array<Int> {\n    return array.toSet().toTypedArray()\n}\n\n// Example usage\nfun main() {\n    val array = arrayOf(1, 2, 3, 2, 4, 5, 1)\n    val result = removeDuplicates(array)\n    println(result.joinToString(\", \"))\n}\n```"
  },
  {
    "task": "Write a script to calculate the sum of all elements in an array.",
    "code": "```kotlin\nfun main() {\n    val numbers = arrayOf(1, 2, 3, 4, 5)\n    val sum = numbers.sum()\n    println(\"Sum of array elements: $sum\")\n}\n```"
  },
  {
    "task": "Construct a function that finds the second largest element in an array.",
    "code": "```kotlin\nfun findSecondLargest(arr: Array<Int>): Int? {\n    if (arr.size < 2) return null\n    var firstLargest = Int.MIN_VALUE\n    var secondLargest = Int.MIN_VALUE\n    for (num in arr) {\n        if (num > firstLargest) {\n            secondLargest = firstLargest\n            firstLargest = num\n        } else if (num > secondLargest && num != firstLargest) {\n            secondLargest = num\n        }\n    }\n    return if (secondLargest == Int.MIN_VALUE) null else secondLargest\n}\n```"
  },
  {
    "task": "Design a program to check if an array contains a specific value.",
    "code": "```kotlin\nfun containsValue(array: Array<Int>, target: Int): Boolean {\n    for (element in array) {\n        if (element == target) {\n            return true\n        }\n    }\n    return false\n}\n\nfun main() {\n    val numbers = arrayOf(1, 2, 3, 4, 5)\n    val target = 3\n    println(containsValue(numbers, target)) // Output: true\n}\n```"
  },
  {
    "task": "Implement a function to sort an array of strings alphabetically.",
    "code": "```kotlin\nfun sortStringsArray(strings: Array<String>): Array<String> {\n    return strings.sortedArray()\n}\n```"
  },
  {
    "task": "Create a method to search for a value in an array using binary search.",
    "code": "```kotlin\nfun binarySearch(array: IntArray, target: Int): Int {\n    var left = 0\n    var right = array.size - 1\n\n    while (left <= right) {\n        val mid = left + (right - left) / 2\n\n        when {\n            array[mid] == target -> return mid\n            array[mid] < target -> left = mid + 1\n            else -> right = mid - 1\n        }\n    }\n    return -1\n}\n```"
  },
  {
    "task": "Write a routine to calculate the average of numbers in an array.",
    "code": "```kotlin\nfun calculateAverage(numbers: Array<Int>): Double {\n    if (numbers.isEmpty()) return 0.0\n    val sum = numbers.sum()\n    return sum.toDouble() / numbers.size\n}\n\nfun main() {\n    val numbers = arrayOf(1, 2, 3, 4, 5)\n    val average = calculateAverage(numbers)\n    println(\"Average: $average\")\n}\n```"
  },
  {
    "task": "Develop a function to find the intersection of two arrays.",
    "code": "```kotlin\nfun findIntersection(array1: Array<Int>, array2: Array<Int>): Array<Int> {\n    return array1.intersect(array2.toSet()).toTypedArray()\n}\n```"
  },
  {
    "task": "Implement a method to find the union of two arrays without duplicates.",
    "code": "```kotlin\nfun unionWithoutDuplicates(array1: Array<Int>, array2: Array<Int>): Array<Int> {\n    val set = mutableSetOf<Int>()\n    set.addAll(array1)\n    set.addAll(array2)\n    return set.toTypedArray()\n}\n```"
  },
  {
    "task": "Create a program that shifts all zeroes in an array to the end.",
    "code": "```kotlin\nfun shiftZeroesToEnd(arr: IntArray) {\n    var lastNonZeroFoundAt = 0\n    for (current in arr.indices) {\n        if (arr[current] != 0) {\n            val temp = arr[lastNonZeroFoundAt]\n            arr[lastNonZeroFoundAt] = arr[current]\n            arr[current] = temp\n            lastNonZeroFoundAt++\n        }\n    }\n}\n\nfun main() {\n    val arr = intArrayOf(0, 1, 0, 3, 12)\n    shiftZeroesToEnd(arr)\n    println(arr.joinToString(\", \"))\n}\n```"
  },
  {
    "task": "Write a function to split an array into two parts at a given index.",
    "code": "```kotlin\nfun splitArrayAtIndex(arr: Array<Int>, index: Int): Pair<Array<Int>, Array<Int>> {\n    val firstPart = arr.sliceArray(0 until index)\n    val secondPart = arr.sliceArray(index until arr.size)\n    return Pair(firstPart, secondPart)\n}\n```"
  },
  {
    "task": "Design a script to find all pairs in an array that sum up to a specific target.",
    "code": "```kotlin\nfun findPairsWithTargetSum(array: IntArray, target: Int): List<Pair<Int, Int>> {\n    val pairs = mutableListOf<Pair<Int, Int>>()\n    val seen = mutableSetOf<Int>()\n\n    for (number in array) {\n        val complement = target - number\n        if (seen.contains(complement)) {\n            pairs.add(Pair(complement, number))\n        }\n        seen.add(number)\n    }\n\n    return pairs\n}\n\nfun main() {\n    val array = intArrayOf(1, 2, 3, 4, 5)\n    val target = 6\n    val pairs = findPairsWithTargetSum(array, target)\n    println(pairs)\n}\n```"
  },
  {
    "task": "Construct a method to remove all occurrences of a specific value from an array.",
    "code": "```kotlin\nfun removeOccurrences(arr: Array<Int>, value: Int): Array<Int> {\n    return arr.filter { it != value }.toTypedArray()\n}\n```"
  },
  {
    "task": "Write a function to find the longest increasing subsequence in an array.",
    "code": "```kotlin\nfun longestIncreasingSubsequence(arr: IntArray): IntArray {\n    if (arr.isEmpty()) return intArrayOf()\n    val n = arr.size\n    val lis = IntArray(n) { 1 }\n    val prevIdx = IntArray(n) { -1 }\n    \n    var maxLength = 1\n    var maxIndex = 0\n\n    for (i in 1 until n) {\n        for (j in 0 until i) {\n            if (arr[i] > arr[j] && lis[i] < lis[j] + 1) {\n                lis[i] = lis[j] + 1\n                prevIdx[i] = j\n            }\n        }\n        if (lis[i] > maxLength) {\n            maxLength = lis[i]\n            maxIndex = i\n        }\n    }\n\n    val subsequence = mutableListOf<Int>()\n    var k = maxIndex\n    while (k >= 0) {\n        subsequence.add(arr[k])\n        k = prevIdx[k]\n    }\n    subsequence.reverse()\n    return subsequence.toIntArray()\n}\n```"
  },
  {
    "task": "Develop an algorithm to find the missing number in a sequential array.",
    "code": "```kotlin\nfun findMissingNumber(arr: IntArray): Int {\n    val n = arr.size + 1\n    val totalSum = n * (n + 1) / 2\n    val arraySum = arr.sum()\n    return totalSum - arraySum\n}\n\nfun main() {\n    val arr = intArrayOf(1, 2, 4, 5, 6)\n    val missingNumber = findMissingNumber(arr)\n    println(\"The missing number is: $missingNumber\")\n}\n```"
  },
  {
    "task": "Create a program to find the common elements between two arrays.",
    "code": "```kotlin\nfun main() {\n    val array1 = arrayOf(1, 2, 3, 4, 5)\n    val array2 = arrayOf(4, 5, 6, 7, 8)\n    \n    val commonElements = array1.intersect(array2.toSet()).toTypedArray()\n    \n    println(\"Common elements: ${commonElements.joinToString(\", \")}\")\n}\n```"
  },
  {
    "task": "Implement a function to move all negative numbers to the beginning of an array.",
    "code": "```kotlin\nfun moveNegativesToFront(arr: IntArray): IntArray {\n    val negatives = arr.filter { it < 0 }\n    val nonNegatives = arr.filter { it >= 0 }\n    return (negatives + nonNegatives).toIntArray()\n}\n\nfun main() {\n    val arr = intArrayOf(1, -2, 3, -4, 5, -6)\n    val result = moveNegativesToFront(arr)\n    println(result.joinToString(\", \"))\n}\n```"
  },
  {
    "task": "Write a method to check if an array is a palindrome.",
    "code": "```kotlin\nfun isPalindrome(array: Array<Int>): Boolean {\n    for (i in 0 until array.size / 2) {\n        if (array[i] != array[array.size - 1 - i]) {\n            return false\n        }\n    }\n    return true\n}\n```"
  },
  {
    "task": "Design a routine to create a new array that is the element-wise sum of two input arrays.",
    "code": "```kotlin\nfun elementWiseSum(array1: IntArray, array2: IntArray): IntArray {\n    val size = minOf(array1.size, array2.size)\n    val result = IntArray(size)\n    for (i in 0 until size) {\n        result[i] = array1[i] + array2[i]\n    }\n    return result\n}\n```"
  },
  {
    "task": "Create a function to find the product of all elements in an array, excluding the current element.",
    "code": "```kotlin\nfun productExcludingCurrent(arr: IntArray): IntArray {\n    val n = arr.size\n    val result = IntArray(n) { 1 }\n    var leftProduct = 1\n\n    for (i in arr.indices) {\n        result[i] *= leftProduct\n        leftProduct *= arr[i]\n    }\n\n    var rightProduct = 1\n    for (i in arr.indices.reversed()) {\n        result[i] *= rightProduct\n        rightProduct *= arr[i]\n    }\n\n    return result\n}\n```"
  },
  {
    "task": "Develop a script to remove elements from an array that are smaller than a given threshold.",
    "code": "```kotlin\nfun removeElementsBelowThreshold(arr: IntArray, threshold: Int): IntArray {\n    return arr.filter { it >= threshold }.toIntArray()\n}\n\nfun main() {\n    val array = intArrayOf(1, 5, 3, 10, 7)\n    val threshold = 5\n    val filteredArray = removeElementsBelowThreshold(array, threshold)\n    println(filteredArray.joinToString(\", \"))\n}\n```"
  },
  {
    "task": "Implement a method to clone an array without using built-in functions.",
    "code": "```kotlin\nfun cloneArray(original: Array<Int>): Array<Int> {\n    val clonedArray = Array(original.size) { 0 }\n    for (i in original.indices) {\n        clonedArray[i] = original[i]\n    }\n    return clonedArray\n}\n```"
  },
  {
    "task": "Create a program that rotates a 2D array (matrix) 90 degrees clockwise.",
    "code": "```kotlin\nfun rotateMatrix90DegreesClockwise(matrix: Array<IntArray>): Array<IntArray> {\n    val n = matrix.size\n    val rotatedMatrix = Array(n) { IntArray(n) }\n    for (i in 0 until n) {\n        for (j in 0 until n) {\n            rotatedMatrix[j][n - 1 - i] = matrix[i][j]\n        }\n    }\n    return rotatedMatrix\n}\n\nfun main() {\n    val matrix = arrayOf(\n        intArrayOf(1, 2, 3),\n        intArrayOf(4, 5, 6),\n        intArrayOf(7, 8, 9)\n    )\n    val rotatedMatrix = rotateMatrix90DegreesClockwise(matrix)\n    rotatedMatrix.forEach { row ->\n        println(row.joinToString(\" \"))\n    }\n}\n```"
  },
  {
    "task": "Write a function to find the kth smallest element in an unsorted array.",
    "code": "```kotlin\nfun findKthSmallestElement(arr: IntArray, k: Int): Int {\n    return arr.sorted()[k - 1]\n}\n```"
  },
  {
    "task": "Design a routine to partition an array into even and odd numbers.",
    "code": "```kotlin\nfun partitionArrayByEvenOdd(numbers: Array<Int>): Pair<Array<Int>, Array<Int>> {\n    val evens = numbers.filter { it % 2 == 0 }.toTypedArray()\n    val odds = numbers.filter { it % 2 != 0 }.toTypedArray()\n    return Pair(evens, odds)\n}\n```"
  },
  {
    "task": "Create a method to merge overlapping intervals in an array.",
    "code": "```kotlin\nfun mergeIntervals(intervals: Array<IntArray>): Array<IntArray> {\n    if (intervals.isEmpty()) return arrayOf()\n    \n    intervals.sortBy { it[0] }\n    val merged = mutableListOf<IntArray>()\n    \n    var currentInterval = intervals[0]\n    merged.add(currentInterval)\n    \n    for (i in 1 until intervals.size) {\n        val currentStart = currentInterval[0]\n        val currentEnd = currentInterval[1]\n        val nextStart = intervals[i][0]\n        val nextEnd = intervals[i][1]\n        \n        if (currentEnd >= nextStart) {\n            currentInterval[1] = maxOf(currentEnd, nextEnd)\n        } else {\n            currentInterval = intervals[i]\n            merged.add(currentInterval)\n        }\n    }\n    \n    return merged.toTypedArray()\n}\n```"
  },
  {
    "task": "Develop a function to count the frequency of each unique element in an array.",
    "code": "```kotlin\nfun countFrequency(arr: Array<Int>): Map<Int, Int> {\n    val frequencyMap = mutableMapOf<Int, Int>()\n    for (element in arr) {\n        frequencyMap[element] = frequencyMap.getOrDefault(element, 0) + 1\n    }\n    return frequencyMap\n}\n```"
  },
  {
    "task": "Write a program to generate all possible subsets of an array.",
    "code": "```kotlin\nfun generateSubsets(array: Array<Int>): List<List<Int>> {\n    val subsets = mutableListOf<List<Int>>()\n    val totalSubsets = 1 shl array.size\n    for (i in 0 until totalSubsets) {\n        val subset = mutableListOf<Int>()\n        for (j in array.indices) {\n            if ((i and (1 shl j)) != 0) {\n                subset.add(array[j])\n            }\n        }\n        subsets.add(subset)\n    }\n    return subsets\n}\n\nfun main() {\n    val array = arrayOf(1, 2, 3)\n    val subsets = generateSubsets(array)\n    println(subsets)\n}\n```"
  },
  {
    "task": "Implement a routine to cyclically permute the elements of an array.",
    "code": "```kotlin\nfun cyclicPermute(array: IntArray): IntArray {\n    if (array.isEmpty()) return array\n    val lastElement = array.last()\n    for (i in array.size - 1 downTo 1) {\n        array[i] = array[i - 1]\n    }\n    array[0] = lastElement\n    return array\n}\n```"
  },
  {
    "task": "Create a function that checks if two arrays are equal regardless of element order.",
    "code": "```kotlin\nfun arraysAreEqual(arr1: Array<Int>, arr2: Array<Int>): Boolean {\n    if (arr1.size != arr2.size) return false\n    return arr1.sorted() == arr2.sorted()\n}\n```"
  },
  {
    "task": "Design a script to initialize an array with random integers within a specified range.",
    "code": "```kotlin\nimport kotlin.random.Random\n\nfun main() {\n    val arraySize = 10\n    val minValue = 1\n    val maxValue = 100\n    val randomArray = IntArray(arraySize) { Random.nextInt(minValue, maxValue + 1) }\n    \n    println(randomArray.joinToString(\", \"))\n}\n```"
  },
  {
    "task": "Write a method to convert an array of integers to a single concatenated number.",
    "code": "```kotlin\nfun concatenateArrayToNumber(arr: Array<Int>): Int {\n    return arr.joinToString(\"\").toInt()\n}\n```"
  },
  {
    "task": "Develop a function to find the median value of an unsorted array.",
    "code": "```kotlin\nfun findMedian(arr: IntArray): Double {\n    val sortedArr = arr.sortedArray()\n    val n = sortedArr.size\n    return if (n % 2 == 0) {\n        (sortedArr[n / 2 - 1] + sortedArr[n / 2]) / 2.0\n    } else {\n        sortedArr[n / 2].toDouble()\n    }\n}\n\n// Example usage\nfun main() {\n    val arr = intArrayOf(3, 1, 4, 2, 5)\n    println(\"The median is: ${findMedian(arr)}\")\n}\n```"
  },
  {
    "task": "Create a routine to determine if an array is sorted in ascending order.",
    "code": "```kotlin\nfun isArraySorted(arr: IntArray): Boolean {\n    for (i in 0 until arr.size - 1) {\n        if (arr[i] > arr[i + 1]) {\n            return false\n        }\n    }\n    return true\n}\n```"
  },
  {
    "task": "Implement a method to find the longest contiguous subarray with equal number of 0s and 1s.",
    "code": "```kotlin\nfun findMaxLength(nums: IntArray): Int {\n    val map = mutableMapOf(0 to -1)\n    var maxLength = 0\n    var count = 0\n\n    for (i in nums.indices) {\n        count += if (nums[i] == 1) 1 else -1\n        if (map.containsKey(count)) {\n            maxLength = maxOf(maxLength, i - map[count]!!)\n        } else {\n            map[count] = i\n        }\n    }\n    \n    return maxLength\n}\n```"
  },
  {
    "task": "Write a function to interleave two arrays of equal length.",
    "code": "```kotlin\nfun interleaveArrays(array1: Array<Int>, array2: Array<Int>): Array<Int> {\n    val result = Array(array1.size + array2.size) { 0 }\n    for (i in array1.indices) {\n        result[2 * i] = array1[i]\n        result[2 * i + 1] = array2[i]\n    }\n    return result\n}\n```"
  },
  {
    "task": "Design a program to replace each element in an array with the next greatest element.",
    "code": "```kotlin\nfun replaceWithNextGreatest(arr: IntArray): IntArray {\n    val n = arr.size\n    val result = IntArray(n)\n    var maxFromRight = arr[n - 1]\n    result[n - 1] = -1\n\n    for (i in n - 2 downTo 0) {\n        result[i] = maxFromRight\n        if (arr[i] > maxFromRight) {\n            maxFromRight = arr[i]\n        }\n    }\n    return result\n}\n\nfun main() {\n    val inputArray = intArrayOf(16, 17, 4, 3, 5, 2)\n    val resultArray = replaceWithNextGreatest(inputArray)\n    println(resultArray.joinToString(\", \"))\n}\n```"
  },
  {
    "task": "Create a function to calculate the dot product of two numeric arrays.",
    "code": "```kotlin\nfun dotProduct(array1: Array<Double>, array2: Array<Double>): Double {\n    require(array1.size == array2.size) { \"Arrays must be of the same length\" }\n    return array1.indices.sumOf { array1[it] * array2[it] }\n}\n```"
  },
  {
    "task": "Develop a script to find the first recurring element in an array.",
    "code": "```kotlin\nfun findFirstRecurringElement(arr: Array<Int>): Int? {\n    val seen = mutableSetOf<Int>()\n    for (element in arr) {\n        if (seen.contains(element)) {\n            return element\n        }\n        seen.add(element)\n    }\n    return null\n}\n\nfun main() {\n    val array = arrayOf(2, 5, 1, 2, 3, 5, 1, 2, 4)\n    val result = findFirstRecurringElement(array)\n    println(\"First recurring element: $result\")\n}\n```"
  },
  {
    "task": "Write a method to check if an array is a subset of another array.",
    "code": "```kotlin\nfun isSubset(array1: Array<Int>, array2: Array<Int>): Boolean {\n    val set1 = array1.toSet()\n    return array2.all { it in set1 }\n}\n```"
  },
  {
    "task": "Implement a function to add a specific value to each element in an array.",
    "code": "```kotlin\nfun addValueToEachElement(array: IntArray, value: Int): IntArray {\n    return array.map { it + value }.toIntArray()\n}\n```"
  },
  {
    "task": "Create a program that finds the largest product of three numbers in an array.",
    "code": "```kotlin\nfun largestProductOfThree(nums: IntArray): Int {\n    if (nums.size < 3) throw IllegalArgumentException(\"Array must have at least three numbers\")\n    \n    nums.sort()\n    \n    val n = nums.size\n    val product1 = nums[n-1] * nums[n-2] * nums[n-3]\n    val product2 = nums[0] * nums[1] * nums[n-1]\n    \n    return maxOf(product1, product2)\n}\n\nfun main() {\n    val nums = intArrayOf(1, 10, 2, 6, 5, 3)\n    println(largestProductOfThree(nums))  // Output: 300\n}\n```"
  },
  {
    "task": "Design a routine to find all unique permutations of an array.",
    "code": "```kotlin\nfun permuteUnique(nums: IntArray): List<List<Int>> {\n    val results = mutableListOf<List<Int>>()\n    nums.sort()\n    backtrack(nums, mutableListOf(), BooleanArray(nums.size), results)\n    return results\n}\n\nprivate fun backtrack(nums: IntArray, current: MutableList<Int>, used: BooleanArray, results: MutableList<List<Int>>) {\n    if (current.size == nums.size) {\n        results.add(ArrayList(current))\n        return\n    }\n\n    for (i in nums.indices) {\n        if (used[i] || (i > 0 && nums[i] == nums[i - 1] && !used[i - 1])) continue\n        used[i] = true\n        current.add(nums[i])\n        backtrack(nums, current, used, results)\n        current.removeAt(current.size - 1)\n        used[i] = false\n    }\n}\n```"
  },
  {
    "task": "Write a function to transpose a square matrix represented as a 2D array.",
    "code": "```kotlin\nfun transpose(matrix: Array<Array<Int>>): Array<Array<Int>> {\n    val n = matrix.size\n    val transposed = Array(n) { Array(n) { 0 } }\n    for (i in 0 until n) {\n        for (j in 0 until n) {\n            transposed[j][i] = matrix[i][j]\n        }\n    }\n    return transposed\n}\n```"
  },
  {
    "task": "Develop a method to find the longest common prefix in an array of strings.",
    "code": "```kotlin\nfun longestCommonPrefix(strs: Array<String>): String {\n    if (strs.isEmpty()) return \"\"\n    var prefix = strs[0]\n    for (i in 1 until strs.size) {\n        while (strs[i].indexOf(prefix) != 0) {\n            prefix = prefix.substring(0, prefix.length - 1)\n            if (prefix.isEmpty()) return \"\"\n        }\n    }\n    return prefix\n}\n```"
  },
  {
    "task": "Implement a function to flatten a multi-dimensional array into a single array.",
    "code": "```kotlin\nfun flattenArray(array: Any): List<Any> {\n    val result = mutableListOf<Any>()\n    if (array is Array<*>) {\n        for (element in array) {\n            result.addAll(flattenArray(element!!))\n        }\n    } else {\n        result.add(array)\n    }\n    return result\n}\n\nfun main() {\n    val multiDimensionalArray = arrayOf(arrayOf(1, 2, arrayOf(3, 4)), 5, arrayOf(arrayOf(6, 7)))\n    val flattenedArray = flattenArray(multiDimensionalArray)\n    println(flattenedArray)\n}\n```"
  },
  {
    "task": "Create a script to shift elements of an array to the left by a given number of positions.",
    "code": "```kotlin\nfun shiftLeft(array: IntArray, positions: Int): IntArray {\n    val n = array.size\n    val shift = positions % n\n    return array.copyOfRange(shift, n) + array.copyOfRange(0, shift)\n}\n\nfun main() {\n    val array = intArrayOf(1, 2, 3, 4, 5)\n    val positions = 2\n    val shiftedArray = shiftLeft(array, positions)\n    println(shiftedArray.joinToString(\", \"))\n}\n```"
  },
  {
    "task": "Write a routine to sort an array of objects based on a specific property.",
    "code": "```kotlin\ndata class Item(val property: Int)\n\nfun sortArrayByProperty(items: Array<Item>): Array<Item> {\n    return items.sortedBy { it.property }.toTypedArray()\n}\n\nfun main() {\n    val items = arrayOf(Item(3), Item(1), Item(2))\n    val sortedItems = sortArrayByProperty(items)\n    sortedItems.forEach { println(it.property) }\n}\n```"
  },
  {
    "task": "Design a program to find the smallest missing positive integer in an array.",
    "code": "```kotlin\nfun findSmallestMissingPositive(nums: IntArray): Int {\n    val n = nums.size\n    for (i in nums.indices) {\n        while (nums[i] in 1..n && nums[nums[i] - 1] != nums[i]) {\n            val correctIndex = nums[i] - 1\n            val temp = nums[i]\n            nums[i] = nums[correctIndex]\n            nums[correctIndex] = temp\n        }\n    }\n\n    for (i in nums.indices) {\n        if (nums[i] != i + 1) {\n            return i + 1\n        }\n    }\n    \n    return n + 1\n}\n\n// Example usage\nfun main() {\n    val nums = intArrayOf(3, 4, -1, 1)\n    println(findSmallestMissingPositive(nums))  // Output: 2\n}\n```"
  },
  {
    "task": "Create a function to calculate the cumulative sum of an array.",
    "code": "```kotlin\nfun cumulativeSum(arr: Array<Int>): Array<Int> {\n    val result = Array(arr.size) { 0 }\n    var sum = 0\n    for (i in arr.indices) {\n        sum += arr[i]\n        result[i] = sum\n    }\n    return result\n}\n```"
  },
  {
    "task": "Develop a function to remove consecutive duplicate elements in an array.",
    "code": "```kotlin\nfun removeConsecutiveDuplicates(arr: Array<Int>): Array<Int> {\n    if (arr.isEmpty()) return arrayOf()\n    val result = mutableListOf<Int>()\n    var previous = arr[0]\n    result.add(previous)\n    for (i in 1 until arr.size) {\n        if (arr[i] != previous) {\n            result.add(arr[i])\n            previous = arr[i]\n        }\n    }\n    return result.toTypedArray()\n}\n```"
  },
  {
    "task": "Implement a method to find the majority element in an array, if any.",
    "code": "```kotlin\nfun findMajorityElement(nums: IntArray): Int? {\n    var candidate: Int? = null\n    var count = 0\n    \n    for (num in nums) {\n        if (count == 0) {\n            candidate = num\n            count = 1\n        } else if (num == candidate) {\n            count++\n        } else {\n            count--\n        }\n    }\n    \n    if (candidate != null) {\n        count = nums.count { it == candidate }\n        if (count > nums.size / 2) {\n            return candidate\n        }\n    }\n    \n    return null\n}\n```"
  },
  {
    "task": "Write a script to split an array into chunks of a given size.",
    "code": "```kotlin\nfun chunkArray(array: Array<Int>, chunkSize: Int): List<List<Int>> {\n    if (chunkSize <= 0) throw IllegalArgumentException(\"Chunk size must be greater than 0\")\n    val result = mutableListOf<List<Int>>()\n    var index = 0\n    while (index < array.size) {\n        val chunk = array.slice(index until kotlin.math.min(index + chunkSize, array.size))\n        result.add(chunk)\n        index += chunkSize\n    }\n    return result\n}\n\nfun main() {\n    val array = arrayOf(1, 2, 3, 4, 5, 6, 7)\n    val chunkSize = 3\n    val chunks = chunkArray(array, chunkSize)\n    println(chunks)\n}\n```"
  },
  {
    "task": "Create a program to calculate the difference between the largest and smallest values in an array.",
    "code": "```kotlin\nfun calculateDifference(arr: IntArray): Int {\n    if (arr.isEmpty()) return 0\n    val max = arr.maxOrNull() ?: return 0\n    val min = arr.minOrNull() ?: return 0\n    return max - min\n}\n\nfun main() {\n    val numbers = intArrayOf(10, 5, 20, 8, 2)\n    val difference = calculateDifference(numbers)\n    println(\"Difference: $difference\")\n}\n```"
  },
  {
    "task": "Design a routine to find the starting index of a target subarray in a larger array.",
    "code": "```kotlin\nfun findSubarrayIndex(array: IntArray, subarray: IntArray): Int {\n    val arrayLength = array.size\n    val subarrayLength = subarray.size\n\n    if (subarrayLength == 0 || subarrayLength > arrayLength) return -1\n\n    for (i in 0..arrayLength - subarrayLength) {\n        var found = true\n        for (j in 0 until subarrayLength) {\n            if (array[i + j] != subarray[j]) {\n                found = false\n                break\n            }\n        }\n        if (found) return i\n    }\n    return -1\n}\n```"
  },
  {
    "task": "Write a function to compress an array by eliminating zero values.",
    "code": "```kotlin\nfun compressArray(arr: Array<Int>): Array<Int> {\n    return arr.filter { it != 0 }.toTypedArray()\n}\n```"
  },
  {
    "task": "Develop a method to determine if an array can be split into two parts with equal sums.",
    "code": "```kotlin\nfun canBeSplitIntoTwoEqualSumParts(arr: IntArray): Boolean {\n    val totalSum = arr.sum()\n    if (totalSum % 2 != 0) return false\n    \n    val target = totalSum / 2\n    var currentSum = 0\n    \n    for (num in arr) {\n        currentSum += num\n        if (currentSum == target) return true\n    }\n    \n    return false\n}\n```"
  },
  {
    "task": "Implement a function to round each element in an array to the nearest integer.",
    "code": "```kotlin\nfun roundArrayElements(arr: Array<Double>): Array<Int> {\n    return arr.map { it.roundToInt() }.toTypedArray()\n}\n```"
  },
  {
    "task": "Create a routine to generate an array of the Fibonacci sequence up to a given number.",
    "code": "```kotlin\nfun generateFibonacciArray(n: Int): IntArray {\n    if (n <= 0) return intArrayOf()\n    if (n == 1) return intArrayOf(0)\n\n    val fibonacciArray = IntArray(n)\n    fibonacciArray[0] = 0\n    fibonacciArray[1] = 1\n\n    for (i in 2 until n) {\n        fibonacciArray[i] = fibonacciArray[i - 1] + fibonacciArray[i - 2]\n    }\n\n    return fibonacciArray\n}\n```"
  },
  {
    "task": "Write a program to find the longest repeating sequence in an array.",
    "code": "```kotlin\nfun findLongestRepeatingSequence(arr: IntArray): IntArray {\n    if (arr.isEmpty()) return intArrayOf()\n\n    var maxLength = 0\n    var currentLength = 1\n    var startIndex = 0\n    var maxStartIndex = 0\n\n    for (i in 1 until arr.size) {\n        if (arr[i] == arr[i - 1]) {\n            currentLength++\n        } else {\n            if (currentLength > maxLength) {\n                maxLength = currentLength\n                maxStartIndex = startIndex\n            }\n            startIndex = i\n            currentLength = 1\n        }\n    }\n\n    if (currentLength > maxLength) {\n        maxLength = currentLength\n        maxStartIndex = startIndex\n    }\n\n    return arr.copyOfRange(maxStartIndex, maxStartIndex + maxLength)\n}\n\nfun main() {\n    val array = intArrayOf(1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 6, 6)\n    val longestSequence = findLongestRepeatingSequence(array)\n    println(longestSequence.joinToString(\", \"))\n}\n```"
  },
  {
    "task": "Design a function to multiply each element of an array by its index.",
    "code": "```kotlin\nfun multiplyElementsByIndex(arr: IntArray): IntArray {\n    return arr.mapIndexed { index, value -> index * value }.toIntArray()\n}\n```"
  },
  {
    "task": "Create a method to convert an array of characters into a single string.",
    "code": "```kotlin\nfun convertCharArrayToString(charArray: CharArray): String {\n    return String(charArray)\n}\n```"
  },
  {
    "task": "Develop a function to fill an array with a specified value.",
    "code": "```kotlin\nfun fillArray(size: Int, value: Int): Array<Int> {\n    return Array(size) { value }\n}\n```"
  },
  {
    "task": "Implement a routine to determine if an array has any duplicate elements.",
    "code": "```kotlin\nfun hasDuplicates(array: Array<Int>): Boolean {\n    val seen = mutableSetOf<Int>()\n    for (element in array) {\n        if (!seen.add(element)) {\n            return true\n        }\n    }\n    return false\n}\n```"
  },
  {
    "task": "Write a script to reverse the order of words in an array of strings.",
    "code": "```kotlin\nfun reverseWords(words: Array<String>): Array<String> {\n    return words.reversedArray()\n}\n\nfun main() {\n    val words = arrayOf(\"one\", \"two\", \"three\", \"four\")\n    val reversedWords = reverseWords(words)\n    println(reversedWords.joinToString(\" \"))\n}\n```"
  },
  {
    "task": "Create a function to calculate the total number of distinct elements in an array.",
    "code": "```kotlin\nfun countDistinctElements(arr: Array<Int>): Int {\n    return arr.toSet().size\n}\n```"
  },
  {
    "task": "Design a program to find the largest gap between consecutive elements in a sorted array.",
    "code": "```kotlin\nfun largestConsecutiveGap(arr: IntArray): Int {\n    if (arr.size < 2) return 0\n    arr.sort()\n    var maxGap = 0\n    for (i in 0 until arr.size - 1) {\n        val gap = arr[i + 1] - arr[i]\n        if (gap > maxGap) {\n            maxGap = gap\n        }\n    }\n    return maxGap\n}\n\nfun main() {\n    val array = intArrayOf(3, 6, 9, 1)\n    println(largestConsecutiveGap(array))\n}\n```"
  },
  {
    "task": "Write a routine to perform element-wise multiplication of two arrays.",
    "code": "```kotlin\nfun elementWiseMultiply(array1: IntArray, array2: IntArray): IntArray {\n    require(array1.size == array2.size) { \"Arrays must be of the same size.\" }\n    return IntArray(array1.size) { i -> array1[i] * array2[i] }\n}\n```"
  },
  {
    "task": "Develop a method to split a string into an array of words.",
    "code": "```kotlin\nfun splitStringIntoWords(input: String): Array<String> {\n    return input.split(\"\\\\s+\".toRegex()).toTypedArray()\n}\n```"
  },
  {
    "task": "Implement a function to find the longest contiguous subarray with a sum less than a target.",
    "code": "```kotlin\nfun longestSubarrayWithSumLessThanTarget(arr: IntArray, target: Int): Int {\n    var maxLength = 0\n    var sum = 0\n    var start = 0\n\n    for (end in arr.indices) {\n        sum += arr[end]\n\n        while (sum >= target && start <= end) {\n            sum -= arr[start]\n            start++\n        }\n\n        maxLength = maxOf(maxLength, end - start + 1)\n    }\n\n    return maxLength\n}\n```"
  },
  {
    "task": "Create a script to rotate a 2D array (matrix) 180 degrees.",
    "code": "```kotlin\nfun rotateMatrix180(matrix: Array<IntArray>): Array<IntArray> {\n    val numRows = matrix.size\n    val numCols = matrix[0].size\n    val rotatedMatrix = Array(numRows) { IntArray(numCols) }\n    \n    for (i in 0 until numRows) {\n        for (j in 0 until numCols) {\n            rotatedMatrix[numRows - 1 - i][numCols - 1 - j] = matrix[i][j]\n        }\n    }\n    \n    return rotatedMatrix\n}\n\nfun main() {\n    val matrix = arrayOf(\n        intArrayOf(1, 2, 3),\n        intArrayOf(4, 5, 6),\n        intArrayOf(7, 8, 9)\n    )\n    \n    val rotatedMatrix = rotateMatrix180(matrix)\n    \n    for (row in rotatedMatrix) {\n        println(row.joinToString(\" \"))\n    }\n}\n```"
  },
  {
    "task": "Write a program to convert an array of binary digits to its decimal equivalent.",
    "code": "```kotlin\nfun binaryArrayToDecimal(binaryArray: IntArray): Int {\n    return binaryArray.reversed().foldIndexed(0) { index, acc, bit ->\n        acc + bit * (1 shl index)\n    }\n}\n\nfun main() {\n    val binaryArray = intArrayOf(1, 0, 1, 1) // Example binary array\n    val decimalValue = binaryArrayToDecimal(binaryArray)\n    println(\"The decimal equivalent is: $decimalValue\")\n}\n```"
  },
  {
    "task": "Design a function to return a new array with elements squared from the input array.",
    "code": "```kotlin\nfun squareArray(input: Array<Int>): Array<Int> {\n    return input.map { it * it }.toTypedArray()\n}\n```"
  },
  {
    "task": "Create a method to check if all elements in an array are unique.",
    "code": "```kotlin\nfun allElementsUnique(arr: Array<Int>): Boolean {\n    val seen = mutableSetOf<Int>()\n    for (element in arr) {\n        if (element in seen) {\n            return false\n        }\n        seen.add(element)\n    }\n    return true\n}\n```"
  },
  {
    "task": "Develop a routine to find the indices of all occurrences of a specific element in an array.",
    "code": "```kotlin\nfun findIndices(array: Array<Int>, target: Int): List<Int> {\n    val indices = mutableListOf<Int>()\n    for (index in array.indices) {\n        if (array[index] == target) {\n            indices.add(index)\n        }\n    }\n    return indices\n}\n```"
  },
  {
    "task": "Implement a function to merge multiple arrays into one.",
    "code": "```kotlin\nfun mergeArrays(vararg arrays: Array<Int>): Array<Int> {\n    return arrays.flatMap { it.asList() }.toTypedArray()\n}\n\n// Example usage\nfun main() {\n    val array1 = arrayOf(1, 2, 3)\n    val array2 = arrayOf(4, 5)\n    val array3 = arrayOf(6, 7, 8, 9)\n\n    val mergedArray = mergeArrays(array1, array2, array3)\n    println(mergedArray.joinToString(\", \"))\n}\n```"
  },
  {
    "task": "Write a script to convert an array of integers into a formatted string.",
    "code": "```kotlin\nfun convertArrayToString(arr: Array<Int>): String {\n    return arr.joinToString(prefix = \"[\", postfix = \"]\", separator = \", \")\n}\n\nfun main() {\n    val numbers = arrayOf(1, 2, 3, 4, 5)\n    val result = convertArrayToString(numbers)\n    println(result)\n}\n```"
  },
  {
    "task": "Create a program to find the largest sum of any contiguous subarray.",
    "code": "```kotlin\nfun maxSubArray(nums: IntArray): Int {\n    var maxSoFar = nums[0]\n    var maxEndingHere = nums[0]\n\n    for (i in 1 until nums.size) {\n        maxEndingHere = maxOf(nums[i], maxEndingHere + nums[i])\n        maxSoFar = maxOf(maxSoFar, maxEndingHere)\n    }\n\n    return maxSoFar\n}\n\nfun main() {\n    val nums = intArrayOf(-2, 1, -3, 4, -1, 2, 1, -5, 4)\n    println(\"The largest sum of contiguous subarray is: ${maxSubArray(nums)}\")\n}\n```"
  },
  {
    "task": "Design a function to compare two arrays and return the differences.",
    "code": "```kotlin\nfun compareArrays(array1: Array<Int>, array2: Array<Int>): Pair<List<Int>, List<Int>> {\n    val differences1 = array1.filterNot { it in array2 }\n    val differences2 = array2.filterNot { it in array1 }\n    return Pair(differences1, differences2)\n}\n```"
  },
  {
    "task": "Write a method to find the longest subarray with elements in arithmetic progression.",
    "code": "```kotlin\nfun longestArithmeticSubarray(arr: IntArray): IntArray {\n    if (arr.size < 2) return arr\n\n    var maxLength = 1\n    var currentLength = 1\n    var diff = arr[1] - arr[0]\n    var startIndex = 0\n\n    for (i in 1 until arr.size) {\n        val currentDiff = arr[i] - arr[i - 1]\n        if (currentDiff == diff) {\n            currentLength++\n        } else {\n            if (currentLength > maxLength) {\n                maxLength = currentLength\n                startIndex = i - currentLength\n            }\n            diff = currentDiff\n            currentLength = 2\n        }\n    }\n    \n    if (currentLength > maxLength) {\n        maxLength = currentLength\n        startIndex = arr.size - maxLength\n    }\n\n    return arr.copyOfRange(startIndex, startIndex + maxLength)\n}\n```"
  },
  {
    "task": "Develop a routine to remove elements from an array based on a predicate function.",
    "code": "```kotlin\nfun <T> removeIf(array: Array<T>, predicate: (T) -> Boolean): Array<T> {\n    return array.filterNot(predicate).toTypedArray()\n}\n\n// Example usage:\nfun main() {\n    val numbers = arrayOf(1, 2, 3, 4, 5)\n    val result = removeIf(numbers) { it % 2 == 0 }\n    println(result.joinToString()) // Outputs: 1, 3, 5\n}\n```"
  },
  {
    "task": "Implement a function to determine if two arrays have any common elements.",
    "code": "```kotlin\nfun haveCommonElements(array1: Array<Any>, array2: Array<Any>): Boolean {\n    return array1.any { it in array2 }\n}\n```"
  },
  {
    "task": "Create a script to initialize an empty array and populate it with user input.",
    "code": "```kotlin\nfun main() {\n    val array = mutableListOf<String>()\n    println(\"Enter elements (type 'done' to finish):\")\n    while (true) {\n        val input = readLine() ?: break\n        if (input.lowercase() == \"done\") break\n        array.add(input)\n    }\n    println(\"Array contents: $array\")\n}\n```"
  },
  {
    "task": "Write a program to find the maximum sum of non-adjacent elements in an array.",
    "code": "```kotlin\nfun maxSumNonAdjacent(arr: IntArray): Int {\n    if (arr.isEmpty()) return 0\n    var include = arr[0]\n    var exclude = 0\n    for (i in 1 until arr.size) {\n        val newExclude = maxOf(include, exclude)\n        include = exclude + arr[i]\n        exclude = newExclude\n    }\n    return maxOf(include, exclude)\n}\n\nfun main() {\n    val arr = intArrayOf(3, 2, 7, 10)\n    println(maxSumNonAdjacent(arr))  // Output: 13\n}\n```"
  },
  {
    "task": "Design a function to shuffle an array randomly.",
    "code": "```kotlin\nimport kotlin.random.Random\n\nfun <T> shuffleArray(array: Array<T>): Array<T> {\n    val list = array.toMutableList()\n    list.shuffle(Random.Default)\n    return list.toTypedArray()\n}\n```"
  },
  {
    "task": "Create a method to generate a new array where each element is the cumulative product of the input array.",
    "code": "```kotlin\nfun cumulativeProduct(input: IntArray): IntArray {\n    val result = IntArray(input.size)\n    if (input.isNotEmpty()) {\n        result[0] = input[0]\n        for (i in 1 until input.size) {\n            result[i] = result[i - 1] * input[i]\n        }\n    }\n    return result\n}\n```"
  },
  {
    "task": "Develop a routine to find the largest element in each row of a 2D array.",
    "code": "```kotlin\nfun largestInRows(matrix: Array<IntArray>): IntArray {\n    return matrix.map { row -> row.maxOrNull() ?: Int.MIN_VALUE }.toIntArray()\n}\n```"
  },
  {
    "task": "Implement a function to count the number of negative numbers in an array.",
    "code": "```kotlin\nfun countNegativeNumbers(array: IntArray): Int {\n    return array.count { it < 0 }\n}\n```"
  },
  {
    "task": "Write a script to find the longest subarray with all distinct elements.",
    "code": "```kotlin\nfun longestDistinctSubarray(arr: IntArray): IntArray {\n    var maxLength = 0\n    var start = 0\n    var startIndex = 0\n    val seen = mutableMapOf<Int, Int>()\n\n    for (i in arr.indices) {\n        if (seen.containsKey(arr[i])) {\n            start = maxOf(start, seen[arr[i]]!! + 1)\n        }\n        seen[arr[i]] = i\n        if (i - start + 1 > maxLength) {\n            maxLength = i - start + 1\n            startIndex = start\n        }\n    }\n\n    return arr.copyOfRange(startIndex, startIndex + maxLength)\n}\n\nfun main() {\n    val arr = intArrayOf(1, 2, 3, 4, 2, 3, 5, 6)\n    val result = longestDistinctSubarray(arr)\n    println(result.joinToString(\", \"))\n}\n```"
  }
]