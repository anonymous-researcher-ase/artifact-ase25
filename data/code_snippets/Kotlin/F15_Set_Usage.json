[
  {
    "task": "Create a set to store unique usernames and demonstrate adding new ones.",
    "code": "```kotlin\nfun main() {\n    val usernames = mutableSetOf<String>()\n    usernames.add(\"user1\")\n    usernames.add(\"user2\")\n    usernames.add(\"user3\")\n\n    // Attempt to add a duplicate\n    usernames.add(\"user1\")\n\n    // Print the set to show unique usernames\n    println(usernames)\n}\n```"
  },
  {
    "task": "Write a function that returns the union of two sets of integers.",
    "code": "```kotlin\nfun unionOfSets(set1: Set<Int>, set2: Set<Int>): Set<Int> {\n    return set1 union set2\n}\n```"
  },
  {
    "task": "Given two sets of strings, find their intersection.",
    "code": "```kotlin\nfun findIntersection(set1: Set<String>, set2: Set<String>): Set<String> {\n    return set1.intersect(set2)\n}\n```"
  },
  {
    "task": "Implement a set to track visited web pages and check if a page has been visited.",
    "code": "```kotlin\nclass WebPageTracker {\n    private val visitedPages: MutableSet<String> = mutableSetOf()\n\n    fun visitPage(url: String) {\n        visitedPages.add(url)\n    }\n\n    fun hasVisited(url: String): Boolean {\n        return visitedPages.contains(url)\n    }\n}\n\nfun main() {\n    val tracker = WebPageTracker()\n    \n    tracker.visitPage(\"https://example.com\")\n    println(tracker.hasVisited(\"https://example.com\")) // Output: true\n    println(tracker.hasVisited(\"https://anotherexample.com\")) // Output: false\n}\n```"
  },
  {
    "task": "Create a set from a list of numbers and remove duplicates.",
    "code": "```kotlin\nfun main() {\n    val numbers = listOf(1, 2, 2, 3, 4, 4, 5)\n    val uniqueNumbers = numbers.toSet()\n    println(uniqueNumbers)\n}\n```"
  },
  {
    "task": "Check if a set is a subset of another set.",
    "code": "```kotlin\nfun isSubset(set1: Set<Int>, set2: Set<Int>): Boolean {\n    return set1.all { it in set2 }\n}\n\n// Example usage\nval setA = setOf(1, 2, 3)\nval setB = setOf(1, 2, 3, 4, 5)\n\nprintln(isSubset(setA, setB))  // Output: true\n```"
  },
  {
    "task": "Demonstrate adding and removing elements from a set of book titles.",
    "code": "```kotlin\nfun main() {\n    val bookTitles = mutableSetOf(\"1984\", \"Brave New World\", \"Fahrenheit 451\")\n\n    // Add elements\n    bookTitles.add(\"The Catcher in the Rye\")\n    bookTitles.add(\"To Kill a Mockingbird\")\n\n    // Remove elements\n    bookTitles.remove(\"1984\")\n\n    // Output the set\n    println(bookTitles)\n}\n```"
  },
  {
    "task": "Create a set and show how to clear all its elements.",
    "code": "```kotlin\nfun main() {\n    val mySet = mutableSetOf(1, 2, 3, 4, 5)\n    mySet.clear()\n    println(mySet)\n}\n```"
  },
  {
    "task": "Write a program to find the difference between two sets of employee IDs.",
    "code": "```kotlin\nfun main() {\n    val employeeIdsSet1 = setOf(101, 102, 103, 104)\n    val employeeIdsSet2 = setOf(103, 104, 105, 106)\n\n    val difference = employeeIdsSet1.subtract(employeeIdsSet2)\n    println(\"Difference: $difference\")\n}\n```"
  },
  {
    "task": "Implement a set to store unique email addresses and check membership.",
    "code": "```kotlin\nfun main() {\n    val emailSet = mutableSetOf<String>()\n\n    // Add email addresses\n    emailSet.add(\"example1@example.com\")\n    emailSet.add(\"example2@example.com\")\n    emailSet.add(\"example3@example.com\")\n\n    // Check membership\n    val emailToCheck = \"example2@example.com\"\n    if (emailSet.contains(emailToCheck)) {\n        println(\"Email is in the set.\")\n    } else {\n        println(\"Email is not in the set.\")\n    }\n}\n```"
  },
  {
    "task": "Use a set to determine if two lists have any common elements.",
    "code": "```kotlin\nfun haveCommonElements(list1: List<Int>, list2: List<Int>): Boolean {\n    val set = list1.toSet()\n    return list2.any { it in set }\n}\n\n// Example usage\nval list1 = listOf(1, 2, 3, 4, 5)\nval list2 = listOf(5, 6, 7, 8, 9)\nprintln(haveCommonElements(list1, list2)) // Output: true\n```"
  },
  {
    "task": "Create a set to represent a group of students and update it with new entries.",
    "code": "```kotlin\nfun main() {\n    val students = mutableSetOf(\"Alice\", \"Bob\", \"Charlie\")\n    students.add(\"David\")\n    students.add(\"Eve\")\n    println(students)\n}\n```"
  },
  {
    "task": "Write a function to find symmetric difference between two sets of colors.",
    "code": "```kotlin\nfun symmetricDifference(set1: Set<String>, set2: Set<String>): Set<String> {\n    val difference1 = set1.subtract(set2)\n    val difference2 = set2.subtract(set1)\n    return difference1.union(difference2)\n}\n```"
  },
  {
    "task": "Implement a set to store unique product codes and demonstrate iteration over it.",
    "code": "```kotlin\nfun main() {\n    val productCodes: MutableSet<String> = mutableSetOf()\n\n    // Adding unique product codes\n    productCodes.add(\"P12345\")\n    productCodes.add(\"P67890\")\n    productCodes.add(\"P54321\")\n    productCodes.add(\"P12345\") // Duplicate entry, will not be added\n\n    // Iterating over the set\n    for (code in productCodes) {\n        println(code)\n    }\n}\n```"
  },
  {
    "task": "Create a set and demonstrate the use of the `discard` method.",
    "code": "```kotlin\nfun main() {\n    val mySet = mutableSetOf(\"apple\", \"banana\", \"cherry\")\n    println(\"Original set: $mySet\")\n    \n    // Removing an element if present\n    mySet.remove(\"banana\")\n    println(\"Set after removing 'banana': $mySet\")\n}\n```"
  },
  {
    "task": "Given a list of numbers, create a set and check if a specific number is present.",
    "code": "```kotlin\nfun main() {\n    val numbers = listOf(1, 2, 3, 4, 5)\n    val numberSet = numbers.toSet()\n    val specificNumber = 3\n    val isPresent = specificNumber in numberSet\n    println(\"Is the number present? $isPresent\")\n}\n```"
  },
  {
    "task": "Use a set to find all unique words in a sentence.",
    "code": "```kotlin\nfun findUniqueWords(sentence: String): Set<String> {\n    return sentence.split(\"\\\\s+\".toRegex()).map { it.trim() }.toSet()\n}\n\n// Example usage\nval sentence = \"the quick brown fox jumps over the lazy dog the fox\"\nval uniqueWords = findUniqueWords(sentence)\nprintln(uniqueWords)\n```"
  },
  {
    "task": "Create a set from a sequence of characters and demonstrate set operations.",
    "code": "```kotlin\nfun main() {\n    val charSet = setOf('a', 'b', 'c', 'd', 'e')\n\n    // Demonstrating set operations\n    // Check if the set contains an element\n    println(\"Set contains 'a': ${'a' in charSet}\")\n\n    // Union of two sets\n    val anotherCharSet = setOf('d', 'e', 'f', 'g')\n    val unionSet = charSet.union(anotherCharSet)\n    println(\"Union of sets: $unionSet\")\n\n    // Intersection of two sets\n    val intersectionSet = charSet.intersect(anotherCharSet)\n    println(\"Intersection of sets: $intersectionSet\")\n\n    // Difference between two sets\n    val differenceSet = charSet.subtract(anotherCharSet)\n    println(\"Difference of sets: $differenceSet\")\n}\n```"
  },
  {
    "task": "Write a function to merge two sets and return the result.",
    "code": "```kotlin\nfun mergeSets(set1: Set<Int>, set2: Set<Int>): Set<Int> {\n    return set1.union(set2)\n}\n```"
  },
  {
    "task": "Implement a set to hold unique IP addresses and demonstrate basic operations.",
    "code": "```kotlin\nfun main() {\n    // Create a set to hold unique IP addresses\n    val ipAddressSet = mutableSetOf<String>()\n\n    // Add IP addresses to the set\n    ipAddressSet.add(\"192.168.1.1\")\n    ipAddressSet.add(\"10.0.0.1\")\n    ipAddressSet.add(\"172.16.0.1\")\n    ipAddressSet.add(\"192.168.1.1\") // Duplicate, will not be added\n\n    // Print all IP addresses\n    println(\"IP Addresses in Set:\")\n    for (ip in ipAddressSet) {\n        println(ip)\n    }\n\n    // Check if a specific IP address is in the set\n    val testIp = \"192.168.1.1\"\n    if (testIp in ipAddressSet) {\n        println(\"$testIp is in the set.\")\n    } else {\n        println(\"$testIp is not in the set.\")\n    }\n\n    // Remove an IP address from the set\n    ipAddressSet.remove(\"10.0.0.1\")\n\n    // Print the updated set of IP addresses\n    println(\"Updated IP Addresses in Set:\")\n    for (ip in ipAddressSet) {\n        println(ip)\n    }\n}\n```"
  },
  {
    "task": "Create a set and demonstrate how to find the size of the set.",
    "code": "```kotlin\nfun main() {\n    val mySet = setOf(\"apple\", \"banana\", \"cherry\")\n    println(\"The size of the set is: ${mySet.size}\")\n}\n```"
  },
  {
    "task": "Write a program to check if two sets of dates are disjoint.",
    "code": "```kotlin\nfun areDisjoint(set1: Set<String>, set2: Set<String>): Boolean {\n    return set1.intersect(set2).isEmpty()\n}\n\nfun main() {\n    val datesSet1 = setOf(\"2023-10-01\", \"2023-10-02\", \"2023-10-03\")\n    val datesSet2 = setOf(\"2023-10-04\", \"2023-10-05\")\n    \n    println(areDisjoint(datesSet1, datesSet2)) // Output: true\n}\n```"
  },
  {
    "task": "Create a set to manage a collection of tags and demonstrate addition and removal.",
    "code": "```kotlin\nfun main() {\n    val tags = mutableSetOf<String>()\n\n    // Adding tags\n    tags.add(\"Kotlin\")\n    tags.add(\"Programming\")\n    tags.add(\"Code\")\n    \n    // Attempt to add a duplicate tag\n    tags.add(\"Kotlin\")\n\n    // Removing a tag\n    tags.remove(\"Code\")\n\n    // Display the tags\n    println(tags)\n}\n```"
  },
  {
    "task": "Implement a set to track unique inventory items in a store.",
    "code": "```kotlin\nfun main() {\n    val inventoryItems: MutableSet<String> = mutableSetOf()\n\n    // Example of adding items to the inventory\n    inventoryItems.add(\"Laptop\")\n    inventoryItems.add(\"Smartphone\")\n    inventoryItems.add(\"Tablet\")\n    inventoryItems.add(\"Smartphone\") // Duplicate, will not be added\n\n    // Print all unique inventory items\n    println(\"Unique inventory items:\")\n    for (item in inventoryItems) {\n        println(item)\n    }\n\n    // Example of removing an item\n    inventoryItems.remove(\"Tablet\")\n\n    // Check if an item exists\n    if (\"Laptop\" in inventoryItems) {\n        println(\"Laptop is in the inventory.\")\n    } else {\n        println(\"Laptop is not in the inventory.\")\n    }\n}\n```"
  },
  {
    "task": "Create a set of numbers and demonstrate conversion to a list.",
    "code": "```kotlin\nfun main() {\n    val numberSet: Set<Int> = setOf(1, 2, 3, 4, 5)\n    val numberList: List<Int> = numberSet.toList()\n    println(numberList)\n}\n```"
  },
  {
    "task": "Write a function that returns all elements present in either of two sets but not both.",
    "code": "```kotlin\nfun symmetricDifference(set1: Set<Int>, set2: Set<Int>): Set<Int> {\n    return (set1 union set2) subtract (set1 intersect set2)\n}\n```"
  },
  {
    "task": "Use a set to manage a collection of unique transaction IDs.",
    "code": "```kotlin\nfun main() {\n    val transactionIds = mutableSetOf<String>()\n\n    // Adding transaction IDs\n    transactionIds.add(\"TXN12345\")\n    transactionIds.add(\"TXN67890\")\n    transactionIds.add(\"TXN24680\")\n\n    // Attempting to add a duplicate transaction ID\n    transactionIds.add(\"TXN12345\")\n\n    // Displaying all unique transaction IDs\n    println(\"Unique Transaction IDs:\")\n    for (id in transactionIds) {\n        println(id)\n    }\n}\n```"
  },
  {
    "task": "Create a set of integers and demonstrate the `pop` operation.",
    "code": "```kotlin\nval numbers = mutableSetOf(1, 2, 3, 4, 5)\nval iterator = numbers.iterator()\nif (iterator.hasNext()) {\n    val element = iterator.next()\n    iterator.remove()\n    println(\"Popped element: $element\")\n}\nprintln(\"Remaining set: $numbers\")\n```"
  },
  {
    "task": "Write a program to find the maximum element in a set of floating-point numbers.",
    "code": "```kotlin\nfun main() {\n    val numbers = setOf(3.5, 6.7, 2.1, 9.4, 5.2)\n    val maxElement = numbers.maxOrNull()\n    println(\"The maximum element is: $maxElement\")\n}\n```"
  },
  {
    "task": "Create a set and demonstrate the use of the `update` method with another set.",
    "code": "```kotlin\nfun main() {\n    val set1 = mutableSetOf(1, 2, 3)\n    val set2 = setOf(3, 4, 5)\n    set1.addAll(set2)\n    println(set1)\n}\n```"
  },
  {
    "task": "Implement a set to keep track of unique file extensions in a directory.",
    "code": "```kotlin\nimport java.io.File\n\nfun getUniqueFileExtensions(directoryPath: String): Set<String> {\n    val directory = File(directoryPath)\n    val extensions = mutableSetOf<String>()\n\n    if (directory.isDirectory) {\n        directory.listFiles()?.forEach { file ->\n            if (file.isFile) {\n                val extension = file.extension\n                if (extension.isNotEmpty()) {\n                    extensions.add(extension)\n                }\n            }\n        }\n    }\n\n    return extensions\n}\n```"
  },
  {
    "task": "Create a set of strings and demonstrate how to iterate over it in reverse order.",
    "code": "```kotlin\nfun main() {\n    val stringSet = setOf(\"apple\", \"banana\", \"cherry\")\n    for (item in stringSet.toList().asReversed()) {\n        println(item)\n    }\n}\n```"
  },
  {
    "task": "Write a function to check if a set is empty.",
    "code": "```kotlin\nfun isSetEmpty(set: Set<Any>): Boolean {\n    return set.isEmpty()\n}\n```"
  },
  {
    "task": "Use a set to filter out duplicate entries from a list of participants.",
    "code": "```kotlin\nfun filterDuplicates(participants: List<String>): List<String> {\n    val uniqueParticipants = participants.toSet()\n    return uniqueParticipants.toList()\n}\n\n// Example usage\nfun main() {\n    val participants = listOf(\"Alice\", \"Bob\", \"Alice\", \"Charlie\", \"Bob\")\n    val uniqueParticipants = filterDuplicates(participants)\n    println(uniqueParticipants) // Output: [Alice, Bob, Charlie]\n}\n```"
  },
  {
    "task": "Create a set of tuples and demonstrate basic set operations.",
    "code": "```kotlin\nfun main() {\n    val setOfTuples: Set<Pair<Int, String>> = setOf(\n        Pair(1, \"One\"),\n        Pair(2, \"Two\"),\n        Pair(3, \"Three\")\n    )\n\n    // Checking if a tuple is present\n    val containsTuple = Pair(2, \"Two\") in setOfTuples\n    println(\"Contains (2, \\\"Two\\\"): $containsTuple\")\n\n    // Adding a new tuple\n    val newTuple = Pair(4, \"Four\")\n    val updatedSet = setOfTuples + newTuple\n    println(\"Set after adding (4, \\\"Four\\\"): $updatedSet\")\n\n    // Removing a tuple\n    val removedSet = updatedSet - Pair(1, \"One\")\n    println(\"Set after removing (1, \\\"One\\\"): $removedSet\")\n\n    // Iterating over the set\n    println(\"Iterating over the set:\")\n    for (tuple in removedSet) {\n        println(tuple)\n    }\n}\n```"
  },
  {
    "task": "Write a program to find the common elements between two sets of country names.",
    "code": "```kotlin\nfun main() {\n    val set1 = setOf(\"USA\", \"Canada\", \"Mexico\", \"Germany\", \"France\")\n    val set2 = setOf(\"Brazil\", \"Canada\", \"USA\", \"Spain\", \"Germany\")\n\n    val commonElements = set1.intersect(set2)\n\n    println(\"Common elements: $commonElements\")\n}\n```"
  },
  {
    "task": "Create a set of characters and demonstrate the use of the `issubset` method.",
    "code": "```kotlin\nfun main() {\n    val set1 = setOf('a', 'b', 'c')\n    val set2 = setOf('a', 'b', 'c', 'd', 'e')\n\n    val isSubset = set1.all { it in set2 }\n    \n    println(\"Is set1 a subset of set2? $isSubset\")\n}\n```"
  },
  {
    "task": "Implement a set to manage a collection of unique hashtags from social media posts.",
    "code": "```kotlin\nfun main() {\n    val hashtags = mutableSetOf<String>()\n\n    // Example usage\n    addHashtag(hashtags, \"#Kotlin\")\n    addHashtag(hashtags, \"#Programming\")\n    addHashtag(hashtags, \"#Kotlin\") // Duplicate, should not be added\n\n    println(\"Unique Hashtags: $hashtags\")\n}\n\nfun addHashtag(hashtags: MutableSet<String>, hashtag: String) {\n    hashtags.add(hashtag)\n}\n```"
  },
  {
    "task": "Create a set and demonstrate how to copy it to another set.",
    "code": "```kotlin\nfun main() {\n    val originalSet = setOf(1, 2, 3, 4, 5)\n    val copiedSet = originalSet.toSet()\n\n    println(\"Original Set: $originalSet\")\n    println(\"Copied Set: $copiedSet\")\n}\n```"
  },
  {
    "task": "Write a function that accepts two sets and returns a new set with elements found in both.",
    "code": "```kotlin\nfun intersection(set1: Set<Int>, set2: Set<Int>): Set<Int> {\n    return set1.intersect(set2)\n}\n```"
  },
  {
    "task": "Use a set to determine the unique items purchased in a day.",
    "code": "```kotlin\nfun uniqueItemsPurchased(purchases: List<String>): Set<String> {\n    return purchases.toSet()\n}\n\nfun main() {\n    val purchases = listOf(\"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"kiwi\")\n    val uniqueItems = uniqueItemsPurchased(purchases)\n    println(\"Unique items purchased: $uniqueItems\")\n}\n```"
  },
  {
    "task": "Create a set of student IDs and demonstrate set comprehension to filter IDs.",
    "code": "```kotlin\nfun main() {\n    val studentIds = setOf(101, 102, 103, 104, 105)\n    val filteredIds = studentIds.filter { it % 2 == 0 }\n    println(filteredIds)\n}\n```"
  },
  {
    "task": "Write a program to check if a set of strings is a superset of another set.",
    "code": "```kotlin\nfun main() {\n    val setA = setOf(\"apple\", \"banana\", \"cherry\")\n    val setB = setOf(\"banana\", \"cherry\")\n\n    val isSuperset = setA.containsAll(setB)\n    println(\"Set A is a superset of Set B: $isSuperset\")\n}\n```"
  },
  {
    "task": "Create a set of unique words from a text file.",
    "code": "```kotlin\nimport java.io.File\n\nfun uniqueWordsFromFile(filePath: String): Set<String> {\n    val words = mutableSetOf<String>()\n    File(filePath).forEachLine { line ->\n        words.addAll(line.split(\"\\\\s+\".toRegex()))\n    }\n    return words\n}\n\n// Usage example (uncomment to use):\n// val uniqueWords = uniqueWordsFromFile(\"path/to/textfile.txt\")\n// println(uniqueWords)\n```"
  },
  {
    "task": "Implement a set to store unique project identifiers and demonstrate membership testing.",
    "code": "```kotlin\nfun main() {\n    val projectIdentifiers = mutableSetOf<String>()\n\n    // Adding project identifiers to the set\n    projectIdentifiers.add(\"project1\")\n    projectIdentifiers.add(\"project2\")\n    projectIdentifiers.add(\"project3\")\n\n    // Demonstrating membership testing\n    val testIdentifier = \"project2\"\n    if (projectIdentifiers.contains(testIdentifier)) {\n        println(\"$testIdentifier is in the set.\")\n    } else {\n        println(\"$testIdentifier is not in the set.\")\n    }\n}\n```"
  },
  {
    "task": "Create a set and demonstrate the `symmetric_difference_update` method.",
    "code": "```kotlin\nfun main() {\n    val set1 = mutableSetOf(1, 2, 3, 4)\n    val set2 = setOf(3, 4, 5, 6)\n\n    set1.apply {\n        removeAll(set2)\n        addAll(set2.filterNot { it in set1 })\n    }\n\n    println(set1)\n}\n```"
  },
  {
    "task": "Write a function to remove all elements from a set that are also in another set.",
    "code": "```kotlin\nfun removeElements(originalSet: MutableSet<Int>, elementsToRemove: Set<Int>) {\n    originalSet.removeAll(elementsToRemove)\n}\n```"
  },
  {
    "task": "Use a set to keep track of unique error codes from server logs.",
    "code": "```kotlin\nfun main() {\n    val errorCodes = setOf(\"404\", \"500\", \"403\", \"404\", \"500\", \"502\")\n    val uniqueErrorCodes = errorCodes.toSet()\n\n    println(\"Unique error codes: $uniqueErrorCodes\")\n}\n```"
  },
  {
    "task": "Create a set and demonstrate how to find all unique pairs of elements.",
    "code": "```kotlin\nfun main() {\n    val elements = setOf(1, 2, 3, 4)\n    val uniquePairs = mutableSetOf<Pair<Int, Int>>()\n\n    for (element1 in elements) {\n        for (element2 in elements) {\n            if (element1 != element2) {\n                val pair = if (element1 < element2) Pair(element1, element2) else Pair(element2, element1)\n                uniquePairs.add(pair)\n            }\n        }\n    }\n\n    println(uniquePairs)\n}\n```"
  },
  {
    "task": "Write a program to find the smallest element in a set of integers.",
    "code": "```kotlin\nfun main() {\n    val numbers = setOf(5, 3, 9, 1, 4)\n    val smallest = numbers.minOrNull()\n    println(\"The smallest element is: $smallest\")\n}\n```"
  },
  {
    "task": "Create a set and demonstrate the `add` method with multiple elements.",
    "code": "```kotlin\nfun main() {\n    val mySet = mutableSetOf<Int>()\n    mySet.add(1)\n    mySet.add(2)\n    mySet.add(3)\n    mySet.add(2) // Attempt to add a duplicate element\n    println(mySet)\n}\n```"
  },
  {
    "task": "Implement a set to manage a collection of unique author names.",
    "code": "```kotlin\nfun main() {\n    val authorNames: MutableSet<String> = mutableSetOf()\n\n    // Example usage\n    authorNames.add(\"Jane Austen\")\n    authorNames.add(\"Mark Twain\")\n    authorNames.add(\"George Orwell\")\n\n    // Attempting to add a duplicate\n    authorNames.add(\"Jane Austen\")\n\n    // Print all unique author names\n    for (author in authorNames) {\n        println(author)\n    }\n}\n```"
  },
  {
    "task": "Create a set of integers and demonstrate converting it to a sorted list.",
    "code": "```kotlin\nfun main() {\n    val integerSet = setOf(5, 3, 9, 1, 4)\n    val sortedList = integerSet.toSortedSet().toList()\n    println(sortedList)\n}\n```"
  },
  {
    "task": "Write a function that returns the union of multiple sets.",
    "code": "```kotlin\nfun unionOfSets(vararg sets: Set<Int>): Set<Int> {\n    return sets.fold(emptySet()) { acc, set -> acc union set }\n}\n```"
  },
  {
    "task": "Use a set to identify unique characters in a string.",
    "code": "```kotlin\nfun uniqueCharacters(input: String): Set<Char> {\n    return input.toSet()\n}\n\n// Example usage:\nval uniqueChars = uniqueCharacters(\"hello world\")\nprintln(uniqueChars)\n```"
  },
  {
    "task": "Create a set of prime numbers and demonstrate basic set operations.",
    "code": "```kotlin\nfun isPrime(num: Int): Boolean {\n    if (num <= 1) return false\n    if (num <= 3) return true\n    if (num % 2 == 0 || num % 3 == 0) return false\n    var i = 5\n    while (i * i <= num) {\n        if (num % i == 0 || num % (i + 2) == 0) return false\n        i += 6\n    }\n    return true\n}\n\nfun main() {\n    val primeNumbers = mutableSetOf<Int>()\n    for (i in 2..30) {\n        if (isPrime(i)) {\n            primeNumbers.add(i)\n        }\n    }\n    \n    val otherNumbers = setOf(1, 2, 3, 5, 10, 15, 20)\n    \n    val unionSet = primeNumbers union otherNumbers\n    val intersectSet = primeNumbers intersect otherNumbers\n    val differenceSet = primeNumbers subtract otherNumbers\n    \n    println(\"Prime Numbers: $primeNumbers\")\n    println(\"Other Numbers: $otherNumbers\")\n    println(\"Union: $unionSet\")\n    println(\"Intersection: $intersectSet\")\n    println(\"Difference: $differenceSet\")\n}\n```"
  },
  {
    "task": "Create a set and demonstrate how to check for non-membership.",
    "code": "```kotlin\nfun main() {\n    val mySet = setOf(\"apple\", \"banana\", \"cherry\")\n    val itemToCheck = \"orange\"\n    \n    if (itemToCheck !in mySet) {\n        println(\"$itemToCheck is not in the set.\")\n    } else {\n        println(\"$itemToCheck is in the set.\")\n    }\n}\n```"
  },
  {
    "task": "Write a program to find the largest element in a set of numbers.",
    "code": "```kotlin\nfun main() {\n    val numbers = setOf(5, 12, 3, 8, 21, 7)\n    val largest = numbers.maxOrNull()\n    println(\"The largest element is: $largest\")\n}\n```"
  },
  {
    "task": "Create a set of unique movie titles and demonstrate membership testing.",
    "code": "```kotlin\nfun main() {\n    val movieTitles = setOf(\"Inception\", \"The Matrix\", \"Interstellar\", \"The Godfather\")\n\n    val testTitle1 = \"Inception\"\n    val testTitle2 = \"Avatar\"\n\n    println(\"$testTitle1 is in the set: ${testTitle1 in movieTitles}\")\n    println(\"$testTitle2 is in the set: ${testTitle2 in movieTitles}\")\n}\n```"
  },
  {
    "task": "Implement a set to store unique keys from a dictionary.",
    "code": "```kotlin\nfun extractUniqueKeys(map: Map<Any, Any>): Set<Any> {\n    return map.keys.toSet()\n}\n\n// Example usage:\nfun main() {\n    val dictionary = mapOf(\"key1\" to \"value1\", \"key2\" to \"value2\", \"key1\" to \"value3\")\n    val uniqueKeys = extractUniqueKeys(dictionary)\n    println(uniqueKeys)\n}\n```"
  },
  {
    "task": "Create a set and demonstrate the `difference_update` method.",
    "code": "```kotlin\nfun main() {\n    val set1 = mutableSetOf(1, 2, 3, 4, 5)\n    val set2 = setOf(3, 4, 5, 6, 7)\n\n    // Kotlin does not have a built-in `difference_update` method\n    // We achieve this by using `removeAll` method\n    set1.removeAll(set2)\n\n    println(set1) // Output: [1, 2]\n}\n```"
  },
  {
    "task": "Write a function to merge multiple sets into a single set.",
    "code": "```kotlin\nfun mergeSets(vararg sets: Set<Any>): Set<Any> {\n    return sets.flatten().toSet()\n}\n```"
  },
  {
    "task": "Use a set to filter out duplicate letters from a word.",
    "code": "```kotlin\nfun removeDuplicateLetters(word: String): String {\n    return word.toSet().joinToString(\"\")\n}\n\nfun main() {\n    val word = \"programming\"\n    val result = removeDuplicateLetters(word)\n    println(result)  // Output: \"progamin\"\n}\n```"
  },
  {
    "task": "Create a set and demonstrate the use of the `isdisjoint` method.",
    "code": "```kotlin\nfun main() {\n    val set1 = setOf(1, 2, 3, 4)\n    val set2 = setOf(5, 6, 7, 8)\n\n    val isDisjoint = set1.none { it in set2 }\n    println(\"Are the sets disjoint? $isDisjoint\")\n}\n```"
  },
  {
    "task": "Write a program to find all elements that are only in one of two sets.",
    "code": "```kotlin\nfun main() {\n    val set1 = setOf(1, 2, 3, 4, 5)\n    val set2 = setOf(4, 5, 6, 7, 8)\n\n    val onlyInOneSet = (set1 union set2) subtract (set1 intersect set2)\n\n    println(onlyInOneSet)\n}\n```"
  },
  {
    "task": "Create a set of unique book authors and demonstrate basic set operations.",
    "code": "```kotlin\nfun main() {\n    // Create a set of unique book authors\n    val authors = setOf(\"J.K. Rowling\", \"George R.R. Martin\", \"J.R.R. Tolkien\", \"Agatha Christie\")\n\n    // Demonstrate basic set operations\n\n    // Check if an author is in the set\n    val hasRowling = \"J.K. Rowling\" in authors\n    println(\"Has J.K. Rowling: $hasRowling\")\n\n    // Add a new author to the set\n    val updatedAuthors = authors + \"Isaac Asimov\"\n    println(\"Authors after adding Isaac Asimov: $updatedAuthors\")\n\n    // Remove an author from the set\n    val reducedAuthors = authors - \"Agatha Christie\"\n    println(\"Authors after removing Agatha Christie: $reducedAuthors\")\n\n    // Check the size of the set\n    val numberOfAuthors = authors.size\n    println(\"Number of authors: $numberOfAuthors\")\n\n    // Iterate over the set\n    println(\"List of authors:\")\n    for (author in authors) {\n        println(author)\n    }\n}\n```"
  },
  {
    "task": "Implement a set to store unique phone numbers and check for duplicates.",
    "code": "```kotlin\nfun main() {\n    val phoneNumbers = mutableSetOf<String>()\n\n    fun addPhoneNumber(phoneNumber: String): Boolean {\n        return if (phoneNumbers.contains(phoneNumber)) {\n            println(\"Duplicate phone number: $phoneNumber\")\n            false\n        } else {\n            phoneNumbers.add(phoneNumber)\n            println(\"Added phone number: $phoneNumber\")\n            true\n        }\n    }\n\n    addPhoneNumber(\"123-456-7890\")\n    addPhoneNumber(\"098-765-4321\")\n    addPhoneNumber(\"123-456-7890\") // Attempt to add a duplicate\n}\n```"
  },
  {
    "task": "Create a set of floating-point numbers and demonstrate rounding each element.",
    "code": "```kotlin\nfun main() {\n    val floatSet: Set<Double> = setOf(1.234, 5.678, 9.1011)\n    val roundedSet = floatSet.map { it.toInt().toDouble() }\n    println(roundedSet)\n}\n```"
  },
  {
    "task": "Write a function that returns a set of all vowels present in a given sentence.",
    "code": "```kotlin\nfun vowelsInSentence(sentence: String): Set<Char> {\n    val vowels = setOf('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n    return sentence.filter { it in vowels }.toSet()\n}\n```"
  },
  {
    "task": "Use a set to track unique session IDs for a web application.",
    "code": "```kotlin\nfun main() {\n    val sessionIds = mutableSetOf<String>()\n    \n    fun addSessionId(sessionId: String) {\n        sessionIds.add(sessionId)\n    }\n    \n    fun checkSessionId(sessionId: String): Boolean {\n        return sessionIds.contains(sessionId)\n    }\n    \n    // Example usage\n    addSessionId(\"session1\")\n    addSessionId(\"session2\")\n    println(checkSessionId(\"session1\")) // true\n    println(checkSessionId(\"session3\")) // false\n}\n```"
  },
  {
    "task": "Create a set of unique city names and demonstrate set operations with it.",
    "code": "```kotlin\nfun main() {\n    val citySet = setOf(\"New York\", \"Los Angeles\", \"Chicago\", \"Houston\", \"Phoenix\")\n\n    // Demonstrating set operations\n    println(\"Original Set: $citySet\")\n\n    // Add a city (demonstrates immutability, will not change the original set)\n    val newCitySet = citySet + \"San Francisco\"\n    println(\"Set after adding a city: $newCitySet\")\n\n    // Remove a city\n    val reducedCitySet = citySet - \"Houston\"\n    println(\"Set after removing a city: $reducedCitySet\")\n\n    // Check if a city is in the set\n    val containsCity = \"Chicago\" in citySet\n    println(\"Does the set contain 'Chicago'? $containsCity\")\n\n    // Union of two sets\n    val anotherSet = setOf(\"San Diego\", \"Dallas\", \"San Jose\")\n    val unionSet = citySet union anotherSet\n    println(\"Union of two sets: $unionSet\")\n\n    // Intersection of two sets\n    val intersectionSet = citySet intersect anotherSet\n    println(\"Intersection of two sets: $intersectionSet\")\n\n    // Difference of two sets\n    val differenceSet = citySet subtract anotherSet\n    println(\"Difference of two sets: $differenceSet\")\n}\n```"
  },
  {
    "task": "Write a program to find the common elements in three sets.",
    "code": "```kotlin\nfun main() {\n    val set1 = setOf(1, 2, 3, 4, 5)\n    val set2 = setOf(3, 4, 5, 6, 7)\n    val set3 = setOf(5, 6, 7, 8, 9)\n\n    val commonElements = set1 intersect set2 intersect set3\n    println(commonElements)\n}\n```"
  },
  {
    "task": "Create a set and demonstrate how to remove an element by its value.",
    "code": "```kotlin\nfun main() {\n    val mySet = mutableSetOf(\"apple\", \"banana\", \"cherry\")\n    mySet.remove(\"banana\")\n    println(mySet)\n}\n```"
  },
  {
    "task": "Implement a set to store a collection of unique ISBN numbers.",
    "code": "```kotlin\nval isbnNumbers: MutableSet<String> = mutableSetOf()\n\n// Example usage\nisbnNumbers.add(\"978-3-16-148410-0\")\nisbnNumbers.add(\"978-1-4028-9462-6\")\n\n// Attempting to add a duplicate\nisbnNumbers.add(\"978-3-16-148410-0\")\n\nprintln(isbnNumbers)\n```"
  },
  {
    "task": "Create a set and demonstrate the `intersection_update` method.",
    "code": "```kotlin\nfun main() {\n    val set1 = mutableSetOf(1, 2, 3, 4, 5)\n    val set2 = setOf(3, 4, 5, 6, 7)\n\n    set1.retainAll(set2)\n    println(set1)\n}\n```"
  },
  {
    "task": "Write a function to generate a set of all unique elements in a list.",
    "code": "```kotlin\nfun uniqueElements(list: List<Int>): Set<Int> {\n    return list.toSet()\n}\n```"
  },
  {
    "task": "Use a set to determine the unique characters in two strings.",
    "code": "```kotlin\nfun uniqueCharactersInStrings(str1: String, str2: String): Set<Char> {\n    val set1 = str1.toSet()\n    val set2 = str2.toSet()\n    return set1 union set2\n}\n\n// Example usage\nval uniqueChars = uniqueCharactersInStrings(\"hello\", \"world\")\nprintln(uniqueChars)\n```"
  },
  {
    "task": "Create a set of unique animal names and demonstrate the `discard` method.",
    "code": "```kotlin\nfun main() {\n    val animals = mutableSetOf(\"Lion\", \"Tiger\", \"Bear\", \"Wolf\")\n    animals.remove(\"Bear\")\n    println(animals)\n}\n```"
  },
  {
    "task": "Write a program to find all elements present in the first set but not in the second.",
    "code": "```kotlin\nfun main() {\n    val set1 = setOf(1, 2, 3, 4, 5)\n    val set2 = setOf(4, 5, 6, 7, 8)\n\n    val difference = set1.subtract(set2)\n\n    println(\"Elements in set1 but not in set2: $difference\")\n}\n```"
  },
  {
    "task": "Create a set of integers and demonstrate using it to eliminate duplicates from a list.",
    "code": "```kotlin\nfun main() {\n    val numbersList = listOf(1, 2, 2, 3, 4, 4, 5)\n    val uniqueNumbersSet = numbersList.toSet()\n    val uniqueNumbersList = uniqueNumbersSet.toList()\n    \n    println(uniqueNumbersList)\n}\n```"
  },
  {
    "task": "Implement a set to manage a collection of unique car models.",
    "code": "```kotlin\nfun main() {\n    val carModels = mutableSetOf<String>()\n\n    // Add car models\n    carModels.add(\"Toyota Camry\")\n    carModels.add(\"Honda Accord\")\n    carModels.add(\"Ford Mustang\")\n\n    // Attempt to add a duplicate model\n    carModels.add(\"Toyota Camry\")\n\n    // Remove a car model\n    carModels.remove(\"Ford Mustang\")\n\n    // Check if a model exists\n    if (\"Honda Accord\" in carModels) {\n        println(\"Honda Accord is in the set.\")\n    }\n\n    // Print all car models\n    for (model in carModels) {\n        println(model)\n    }\n}\n```"
  },
  {
    "task": "Create a set and demonstrate the use of the `clear` method.",
    "code": "```kotlin\nfun main() {\n    val mySet = mutableSetOf(1, 2, 3, 4, 5)\n    println(\"Set before clear: $mySet\")\n    mySet.clear()\n    println(\"Set after clear: $mySet\")\n}\n```"
  },
  {
    "task": "Write a function that finds the intersection of multiple sets.",
    "code": "```kotlin\nfun <T> findIntersection(vararg sets: Set<T>): Set<T> {\n    if (sets.isEmpty()) return emptySet()\n    return sets.reduce { acc, set -> acc.intersect(set) }\n}\n```"
  },
  {
    "task": "Use a set to identify unique words in a paragraph.",
    "code": "```kotlin\nfun uniqueWords(paragraph: String): Set<String> {\n    return paragraph.split(\"\\\\s+\".toRegex()).toSet()\n}\n\nfun main() {\n    val paragraph = \"This is a test. This test is only a test.\"\n    val uniqueWordsSet = uniqueWords(paragraph)\n    println(uniqueWordsSet)\n}\n```"
  },
  {
    "task": "Create a set of unique country codes and demonstrate membership testing.",
    "code": "```kotlin\nfun main() {\n    val countryCodes = setOf(\"US\", \"CA\", \"MX\", \"FR\", \"DE\")\n\n    // Demonstrating membership testing\n    val testCode1 = \"US\"\n    val testCode2 = \"IN\"\n\n    println(\"$testCode1 is in the set: ${testCode1 in countryCodes}\")\n    println(\"$testCode2 is in the set: ${testCode2 in countryCodes}\")\n}\n```"
  },
  {
    "task": "Write a program to find the union of two sets and return it as a list.",
    "code": "```kotlin\nfun unionOfSets(set1: Set<Int>, set2: Set<Int>): List<Int> {\n    return (set1 union set2).toList()\n}\n\nfun main() {\n    val set1 = setOf(1, 2, 3, 4)\n    val set2 = setOf(3, 4, 5, 6)\n    val unionList = unionOfSets(set1, set2)\n    println(unionList)\n}\n```"
  },
  {
    "task": "Create a set and demonstrate using it to check if all elements of another set are present.",
    "code": "```kotlin\nfun main() {\n    val mainSet = setOf(1, 2, 3, 4, 5)\n    val subset = setOf(2, 3, 4)\n\n    val isSubset = mainSet.containsAll(subset)\n\n    println(\"Is subset fully contained in the main set? $isSubset\")\n}\n```"
  },
  {
    "task": "Implement a set to store unique coupon codes and demonstrate adding new codes.",
    "code": "```kotlin\nfun main() {\n    val couponCodes = mutableSetOf<String>()\n\n    // Adding new coupon codes\n    couponCodes.add(\"SAVE10\")\n    couponCodes.add(\"WELCOME2023\")\n    couponCodes.add(\"FREESHIP\")\n\n    // Attempt to add a duplicate code\n    couponCodes.add(\"SAVE10\")\n\n    // Print all unique coupon codes\n    println(\"Unique Coupon Codes: $couponCodes\")\n}\n```"
  },
  {
    "task": "Create a set and demonstrate the `copy` method.",
    "code": "```kotlin\nfun main() {\n    val originalSet = setOf(1, 2, 3, 4, 5)\n    val copiedSet = originalSet.toSet()\n    \n    println(\"Original Set: $originalSet\")\n    println(\"Copied Set: $copiedSet\")\n}\n```"
  },
  {
    "task": "Write a function to remove duplicates from a list using a set.",
    "code": "```kotlin\nfun removeDuplicates(inputList: List<Int>): List<Int> {\n    return inputList.toSet().toList()\n}\n```"
  },
  {
    "task": "Use a set to identify unique numbers in a sequence.",
    "code": "```kotlin\nfun findUniqueNumbers(sequence: List<Int>): Set<Int> {\n    return sequence.toSet()\n}\n\n// Example usage\nfun main() {\n    val numbers = listOf(1, 2, 3, 2, 4, 1, 5)\n    val uniqueNumbers = findUniqueNumbers(numbers)\n    println(uniqueNumbers) // Output: [1, 2, 3, 4, 5]\n}\n```"
  },
  {
    "task": "Create a set of unique fruit names and demonstrate set operations with it.",
    "code": "```kotlin\nfun main() {\n    // Create a set of unique fruit names\n    val fruits = setOf(\"Apple\", \"Banana\", \"Cherry\", \"Date\", \"Elderberry\")\n\n    // Demonstrate set operations\n    // Check if \"Apple\" is in the set\n    println(\"Contains Apple: ${\"Apple\" in fruits}\")\n\n    // Add a new fruit to the set (since we are using a read-only set, create a new set)\n    val newFruits = fruits + \"Fig\"\n    println(\"Set after adding Fig: $newFruits\")\n\n    // Remove a fruit from the set (same as above, create a new set)\n    val lessFruits = fruits - \"Banana\"\n    println(\"Set after removing Banana: $lessFruits\")\n\n    // Find the size of the set\n    println(\"Size of the set: ${fruits.size}\")\n\n    // Iterate through the set and print each fruit\n    for (fruit in fruits) {\n        println(fruit)\n    }\n}\n```"
  }
]