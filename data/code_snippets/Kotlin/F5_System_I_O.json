[
  {
    "task": "Write a program that reads a user's name and age from the input, then prints a greeting message using both values.",
    "code": "```kotlin\nfun main() {\n    print(\"Enter your name: \")\n    val name = readLine() ?: \"\"\n    \n    print(\"Enter your age: \")\n    val age = readLine()?.toIntOrNull() ?: 0\n    \n    println(\"Hello, $name! You are $age years old.\")\n}\n```"
  },
  {
    "task": "Create a script that continuously reads numbers from the input and prints their running total until a negative number is entered.",
    "code": "```kotlin\nfun main() {\n    var total = 0\n    while (true) {\n        val input = readLine()?.toIntOrNull()\n        if (input == null || input < 0) break\n        total += input\n        println(\"Running total: $total\")\n    }\n}\n```"
  },
  {
    "task": "Design a program that asks the user for a sentence and outputs the number of words it contains.",
    "code": "```kotlin\nfun main() {\n    print(\"Enter a sentence: \")\n    val input = readLine()\n    if (input != null) {\n        val wordCount = input.trim().split(\"\\\\s+\".toRegex()).size\n        println(\"Number of words: $wordCount\")\n    }\n}\n```"
  },
  {
    "task": "Build a command-line tool that reads a list of integers and outputs them in sorted order.",
    "code": "```kotlin\nfun main() {\n    println(\"Enter a list of integers separated by spaces:\")\n    val input = readLine()\n    val numbers = input?.split(\" \")?.mapNotNull { it.toIntOrNull() } ?: listOf()\n    val sortedNumbers = numbers.sorted()\n    println(\"Sorted numbers: ${sortedNumbers.joinToString(\" \")}\")\n}\n```"
  },
  {
    "task": "Develop a program that reads a file name from the input, then prints the number of lines in that file.",
    "code": "```kotlin\nimport java.io.File\n\nfun main() {\n    println(\"Enter the file name:\")\n    val fileName = readLine() ?: return\n    try {\n        val lines = File(fileName).readLines().size\n        println(\"Number of lines: $lines\")\n    } catch (e: Exception) {\n        println(\"Error reading file: ${e.message}\")\n    }\n}\n```"
  },
  {
    "task": "Implement a calculator that reads two numbers and an operator (+, -, *, /) from the input and prints the result.",
    "code": "```kotlin\nfun main() {\n    println(\"Enter first number:\")\n    val firstNumber = readLine()!!.toDouble()\n\n    println(\"Enter an operator (+, -, *, /):\")\n    val operator = readLine()!!\n\n    println(\"Enter second number:\")\n    val secondNumber = readLine()!!.toDouble()\n\n    val result = when (operator) {\n        \"+\" -> firstNumber + secondNumber\n        \"-\" -> firstNumber - secondNumber\n        \"*\" -> firstNumber * secondNumber\n        \"/\" -> firstNumber / secondNumber\n        else -> {\n            println(\"Invalid operator\")\n            return\n        }\n    }\n\n    println(\"Result: $result\")\n}\n```"
  },
  {
    "task": "Write a script that reads a user's full name and prints it in reverse order.",
    "code": "```kotlin\nfun main() {\n    val fullName = readLine() ?: \"\"\n    val reversedName = fullName.reversed()\n    println(reversedName)\n}\n```"
  },
  {
    "task": "Create a program that asks for a word and checks if it is a palindrome, printing the appropriate message.",
    "code": "```kotlin\nfun main() {\n    print(\"Enter a word: \")\n    val word = readLine() ?: \"\"\n    val isPalindrome = word.equals(word.reversed(), ignoreCase = true)\n    if (isPalindrome) {\n        println(\"The word is a palindrome.\")\n    } else {\n        println(\"The word is not a palindrome.\")\n    }\n}\n```"
  },
  {
    "task": "Develop a tool that reads multiple lines of text and outputs the longest line.",
    "code": "```kotlin\nfun main() {\n    println(\"Enter text lines (type 'END' to finish):\")\n    var longestLine = \"\"\n    while (true) {\n        val line = readLine() ?: break\n        if (line == \"END\") break\n        if (line.length > longestLine.length) {\n            longestLine = line\n        }\n    }\n    println(\"The longest line is:\\n$longestLine\")\n}\n```"
  },
  {
    "task": "Design a script that reads a number 'n' and prints the first 'n' Fibonacci numbers.",
    "code": "```kotlin\nfun main() {\n    print(\"Enter a number: \")\n    val n = readLine()?.toIntOrNull() ?: return\n    var a = 0\n    var b = 1\n    repeat(n) {\n        println(a)\n        val next = a + b\n        a = b\n        b = next\n    }\n}\n```"
  },
  {
    "task": "Write a program that takes a list of numbers from the input and prints only the even ones.",
    "code": "```kotlin\nfun main() {\n    val numbers = readLine()?.split(\" \")?.mapNotNull { it.toIntOrNull() } ?: return\n    numbers.filter { it % 2 == 0 }.forEach { println(it) }\n}\n```"
  },
  {
    "task": "Create a script that reads a date (day, month, year) and prints the day of the week for that date.",
    "code": "```kotlin\nimport java.time.LocalDate\nimport java.time.format.DateTimeFormatter\nimport java.util.Scanner\n\nfun main() {\n    val scanner = Scanner(System.`in`)\n    println(\"Enter date in format dd MM yyyy:\")\n    val input = scanner.nextLine()\n    val formatter = DateTimeFormatter.ofPattern(\"d M yyyy\")\n    val date = LocalDate.parse(input, formatter)\n    println(\"Day of the week: ${date.dayOfWeek}\")\n}\n```"
  },
  {
    "task": "Develop a program that reads a paragraph and counts the frequency of each letter in the text.",
    "code": "```kotlin\nfun main() {\n    println(\"Enter a paragraph:\")\n    val input = readLine() ?: \"\"\n    val frequencyMap = mutableMapOf<Char, Int>()\n\n    for (char in input.toLowerCase()) {\n        if (char.isLetter()) {\n            frequencyMap[char] = frequencyMap.getOrDefault(char, 0) + 1\n        }\n    }\n\n    println(\"Letter frequencies:\")\n    for ((char, count) in frequencyMap) {\n        println(\"$char: $count\")\n    }\n}\n```"
  },
  {
    "task": "Build a tool that reads a text and a word, then prints the number of times the word appears in the text.",
    "code": "```kotlin\nfun main() {\n    println(\"Enter the text:\")\n    val text = readLine() ?: return\n    println(\"Enter the word to count:\")\n    val word = readLine() ?: return\n\n    val count = text.split(\"\\\\s+\".toRegex()).count { it == word }\n    println(\"The word '$word' appears $count times in the text.\")\n}\n```"
  },
  {
    "task": "Implement a script that reads a temperature in Celsius and converts it to Fahrenheit, printing the result.",
    "code": "```kotlin\nfun main() {\n    print(\"Enter temperature in Celsius: \")\n    val input = readLine()\n    val celsius = input?.toDoubleOrNull()\n    if (celsius != null) {\n        val fahrenheit = celsius * 9 / 5 + 32\n        println(\"Temperature in Fahrenheit: $fahrenheit\")\n    } else {\n        println(\"Invalid input.\")\n    }\n}\n```"
  },
  {
    "task": "Write a program that continuously reads input until the word 'exit' is entered, then prints all entered inputs.",
    "code": "```kotlin\nfun main() {\n    val inputs = mutableListOf<String>()\n    while (true) {\n        val input = readLine() ?: \"\"\n        if (input == \"exit\") break\n        inputs.add(input)\n    }\n    inputs.forEach { println(it) }\n}\n```"
  },
  {
    "task": "Create a tool that prompts for a filename, reads the file, and prints its content in uppercase.",
    "code": "```kotlin\nfun main() {\n    print(\"Enter the filename: \")\n    val filename = readLine() ?: return\n    try {\n        val content = java.io.File(filename).readText()\n        println(content.uppercase())\n    } catch (e: Exception) {\n        println(\"Error reading file: ${e.message}\")\n    }\n}\n```"
  },
  {
    "task": "Develop a program that reads a series of email addresses and prints the unique domain names.",
    "code": "```kotlin\nfun main() {\n    val emails = generateSequence(::readLine).toList()\n    val domains = emails.mapNotNull { it.substringAfter('@', \"\") }.toSet()\n    domains.forEach(::println)\n}\n```"
  },
  {
    "task": "Design a script that reads a string and prints whether it contains all the letters of the alphabet.",
    "code": "```kotlin\nfun main() {\n    val input = readLine() ?: \"\"\n    val alphabet = ('a'..'z').toSet()\n    val inputSet = input.toLowerCase().filter { it.isLetter() }.toSet()\n    if (alphabet.all { it in inputSet }) {\n        println(\"Contains all letters of the alphabet\")\n    } else {\n        println(\"Does not contain all letters of the alphabet\")\n    }\n}\n```"
  },
  {
    "task": "Write a program that reads a number and prints its factorial.",
    "code": "```kotlin\nfun main() {\n    println(\"Enter a number:\")\n    val number = readLine()?.toIntOrNull() ?: return\n    println(\"Factorial: ${factorial(number)}\")\n}\n\nfun factorial(n: Int): Long {\n    return if (n <= 1) 1 else n * factorial(n - 1)\n}\n```"
  },
  {
    "task": "Create a tool that reads a list of names and prints them in alphabetical order.",
    "code": "```kotlin\nfun main() {\n    println(\"Enter names separated by commas:\")\n    val input = readLine()\n    val names = input?.split(\",\")?.map { it.trim() } ?: emptyList()\n    val sortedNames = names.sorted()\n    println(\"Names in alphabetical order:\")\n    for (name in sortedNames) {\n        println(name)\n    }\n}\n```"
  },
  {
    "task": "Develop a program that asks for a sentence and prints each word on a new line.",
    "code": "```kotlin\nfun main() {\n    println(\"Please enter a sentence:\")\n    val input = readLine() ?: \"\"\n    input.split(\"\\\\s+\".toRegex()).forEach { word ->\n        println(word)\n    }\n}\n```"
  },
  {
    "task": "Build a script that reads a time in 12-hour format and converts it to 24-hour format.",
    "code": "```kotlin\nfun main() {\n    println(\"Enter time in 12-hour format (e.g., 07:05:45PM):\")\n    val input = readLine() ?: return\n\n    val timeComponents = input.substring(0, 8).split(\":\")\n    val hour = timeComponents[0].toInt()\n    val minute = timeComponents[1]\n    val second = timeComponents[2]\n    val period = input.substring(8, 10)\n\n    val convertedHour = if (period == \"PM\" && hour != 12) {\n        hour + 12\n    } else if (period == \"AM\" && hour == 12) {\n        0\n    } else {\n        hour\n    }\n\n    println(\"%02d:%s:%s\".format(convertedHour, minute, second))\n}\n```"
  },
  {
    "task": "Implement a program that reads two strings and checks if they are anagrams, printing the result.",
    "code": "```kotlin\nfun main() {\n    val input = readLine() ?: return\n    val inputs = input.split(\" \")\n    if (inputs.size != 2) return\n\n    val str1 = inputs[0]\n    val str2 = inputs[1]\n\n    fun areAnagrams(s1: String, s2: String): Boolean {\n        return s1.toCharArray().sorted() == s2.toCharArray().sorted()\n    }\n\n    val result = areAnagrams(str1, str2)\n    println(result)\n}\n```"
  },
  {
    "task": "Write a tool that reads a paragraph and prints the first and last sentence.",
    "code": "```kotlin\nfun main() {\n    println(\"Enter a paragraph:\")\n    val paragraph = readLine() ?: \"\"\n\n    val sentences = paragraph.split(\". \").filter { it.isNotBlank() }\n\n    if (sentences.isNotEmpty()) {\n        println(\"First sentence: ${sentences.first()}.\")\n        println(\"Last sentence: ${sentences.last()}.\")\n    } else {\n        println(\"No sentences found.\")\n    }\n}\n```"
  },
  {
    "task": "Create a program that reads a binary number and converts it to decimal.",
    "code": "```kotlin\nfun main() {\n    print(\"Enter a binary number: \")\n    val binaryInput = readLine()\n    if (binaryInput != null && binaryInput.all { it == '0' || it == '1' }) {\n        val decimalValue = binaryInput.toInt(2)\n        println(\"Decimal value: $decimalValue\")\n    } else {\n        println(\"Invalid binary number\")\n    }\n}\n```"
  },
  {
    "task": "Develop a script that reads a series of scores and prints the average score.",
    "code": "```kotlin\nfun main() {\n    println(\"Enter scores separated by spaces:\")\n    val input = readLine() ?: return\n    val scores = input.split(\" \").mapNotNull { it.toDoubleOrNull() }\n    if (scores.isEmpty()) {\n        println(\"No valid scores provided.\")\n    } else {\n        val average = scores.average()\n        println(\"Average score: $average\")\n    }\n}\n```"
  },
  {
    "task": "Design a program that reads a list of integers and prints the prime numbers.",
    "code": "```kotlin\nfun isPrime(n: Int): Boolean {\n    if (n <= 1) return false\n    if (n <= 3) return true\n    if (n % 2 == 0 || n % 3 == 0) return false\n    var i = 5\n    while (i * i <= n) {\n        if (n % i == 0 || n % (i + 2) == 0) return false\n        i += 6\n    }\n    return true\n}\n\nfun main() {\n    println(\"Enter the list of integers separated by space:\")\n    val input = readLine() ?: \"\"\n    val numbers = input.split(\" \").mapNotNull { it.toIntOrNull() }\n    val primes = numbers.filter { isPrime(it) }\n    println(\"Prime numbers: ${primes.joinToString(\" \")}\")\n}\n```"
  },
  {
    "task": "Write a script that reads a word and prints its Pig Latin translation.",
    "code": "```kotlin\nfun main() {\n    print(\"Enter a word: \")\n    val word = readLine() ?: \"\"\n    val pigLatin = if (word.isNotEmpty() && word[0].lowercaseChar() in \"aeiou\") {\n        \"$word-way\"\n    } else {\n        word.drop(1) + word[0] + \"ay\"\n    }\n    println(\"Pig Latin: $pigLatin\")\n}\n```"
  },
  {
    "task": "Create a tool that reads a matrix of numbers and prints its transpose.",
    "code": "```kotlin\nfun main() {\n    val reader = System.`in`.bufferedReader()\n    println(\"Enter number of rows:\")\n    val rows = reader.readLine().toInt()\n    println(\"Enter number of columns:\")\n    val cols = reader.readLine().toInt()\n\n    val matrix = Array(rows) { IntArray(cols) }\n    println(\"Enter the elements row by row:\")\n    for (i in 0 until rows) {\n        val row = reader.readLine().split(\" \").map { it.toInt() }.toIntArray()\n        for (j in 0 until cols) {\n            matrix[i][j] = row[j]\n        }\n    }\n\n    println(\"Transposed matrix:\")\n    for (j in 0 until cols) {\n        for (i in 0 until rows) {\n            print(\"${matrix[i][j]} \")\n        }\n        println()\n    }\n}\n```"
  },
  {
    "task": "Implement a program that reads a URL and prints the domain name.",
    "code": "```kotlin\nimport java.net.URL\n\nfun main() {\n    println(\"Enter a URL:\")\n    val input = readLine() ?: return\n    try {\n        val url = URL(input)\n        println(\"Domain name: ${url.host}\")\n    } catch (e: Exception) {\n        println(\"Invalid URL\")\n    }\n}\n```"
  },
  {
    "task": "Write a script that reads a number and prints its multiplication table up to 12.",
    "code": "```kotlin\nfun main() {\n    val input = readLine()?.toIntOrNull()\n    if (input != null) {\n        for (i in 1..12) {\n            println(\"$input x $i = ${input * i}\")\n        }\n    } else {\n        println(\"Please enter a valid number.\")\n    }\n}\n```"
  },
  {
    "task": "Develop a program that reads a list of dates and prints them in order of occurrence.",
    "code": "```kotlin\nimport java.time.LocalDate\nimport java.time.format.DateTimeFormatter\n\nfun main() {\n    val formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\")\n    println(\"Enter dates in yyyy-MM-dd format, one per line. Type 'end' to finish:\")\n    \n    val dates = mutableListOf<LocalDate>()\n    while (true) {\n        val input = readLine() ?: break\n        if (input.toLowerCase() == \"end\") break\n        try {\n            val date = LocalDate.parse(input, formatter)\n            dates.add(date)\n        } catch (e: Exception) {\n            println(\"Invalid date format, please try again.\")\n        }\n    }\n    \n    val sortedDates = dates.sorted()\n    println(\"Dates in order of occurrence:\")\n    sortedDates.forEach { println(it.format(formatter)) }\n}\n```"
  },
  {
    "task": "Create a tool that reads a text and prints it with each sentence capitalized.",
    "code": "```kotlin\nimport java.util.Scanner\n\nfun main() {\n    val scanner = Scanner(System.`in`)\n    println(\"Enter text:\")\n    val input = scanner.nextLine()\n    val capitalizedText = input.split(\". \").joinToString(\". \") { sentence ->\n        sentence.trim().replaceFirstChar { if (it.isLowerCase()) it.titlecase() else it.toString() }\n    }\n    println(capitalizedText)\n}\n```"
  },
  {
    "task": "Design a program that reads a list of words and prints them in reverse alphabetical order.",
    "code": "```kotlin\nfun main() {\n    println(\"Enter words separated by spaces:\")\n    val input = readLine() ?: \"\"\n    val words = input.split(\" \").filter { it.isNotBlank() }\n    val sortedWords = words.sortedDescending()\n    println(\"Words in reverse alphabetical order:\")\n    sortedWords.forEach { println(it) }\n}\n```"
  },
  {
    "task": "Write a script that asks for two times and prints the difference in minutes.",
    "code": "```kotlin\nimport java.util.Scanner\nimport java.time.LocalTime\nimport java.time.format.DateTimeFormatter\nimport java.time.temporal.ChronoUnit\n\nfun main() {\n    val scanner = Scanner(System.`in`)\n    val formatter = DateTimeFormatter.ofPattern(\"HH:mm\")\n\n    print(\"Enter the first time (HH:mm): \")\n    val firstInput = scanner.nextLine()\n    val firstTime = LocalTime.parse(firstInput, formatter)\n\n    print(\"Enter the second time (HH:mm): \")\n    val secondInput = scanner.nextLine()\n    val secondTime = LocalTime.parse(secondInput, formatter)\n\n    val difference = ChronoUnit.MINUTES.between(firstTime, secondTime)\n\n    println(\"The difference in minutes is: ${difference.absoluteValue}\")\n}\n```"
  },
  {
    "task": "Build a program that reads a text and prints the number of vowels and consonants.",
    "code": "```kotlin\nfun main() {\n    println(\"Enter text:\")\n    val input = readLine() ?: \"\"\n    var vowels = 0\n    var consonants = 0\n\n    for (char in input.toLowerCase()) {\n        when (char) {\n            'a', 'e', 'i', 'o', 'u' -> vowels++\n            in 'a'..'z' -> consonants++\n        }\n    }\n\n    println(\"Vowels: $vowels\")\n    println(\"Consonants: $consonants\")\n}\n```"
  },
  {
    "task": "Implement a tool that reads a JSON object from input and prints its keys.",
    "code": "```kotlin\nimport java.util.Scanner\nimport org.json.JSONObject\n\nfun main() {\n    val scanner = Scanner(System.`in`)\n    val input = scanner.nextLine()\n    val jsonObject = JSONObject(input)\n    jsonObject.keys().forEach { key ->\n        println(key)\n    }\n}\n```"
  },
  {
    "task": "Write a program that reads a CSV file from input and prints each row as a dictionary.",
    "code": "```kotlin\nimport java.io.BufferedReader\nimport java.io.InputStreamReader\n\nfun main() {\n    val reader = BufferedReader(InputStreamReader(System.`in`))\n    val headers = reader.readLine().split(\",\")\n    \n    reader.forEachLine { line ->\n        val values = line.split(\",\")\n        val rowMap = headers.zip(values).toMap()\n        println(rowMap)\n    }\n}\n```"
  },
  {
    "task": "Create a script that reads a sentence and prints it with the words in reverse order.",
    "code": "```kotlin\nfun main() {\n    println(\"Enter a sentence: \")\n    val input = readLine()\n    if (input != null) {\n        val reversed = input.split(\" \").reversed().joinToString(\" \")\n        println(reversed)\n    }\n}\n```"
  },
  {
    "task": "Develop a tool that reads a list of numbers and prints their median.",
    "code": "```kotlin\nfun main() {\n    println(\"Enter numbers separated by spaces:\")\n    val numbers = readLine()?.split(\" \")?.mapNotNull { it.toDoubleOrNull() }?.sorted()\n\n    if (numbers.isNullOrEmpty()) {\n        println(\"No valid numbers entered.\")\n        return\n    }\n\n    val median = if (numbers.size % 2 == 0) {\n        val mid1 = numbers[numbers.size / 2 - 1]\n        val mid2 = numbers[numbers.size / 2]\n        (mid1 + mid2) / 2\n    } else {\n        numbers[numbers.size / 2]\n    }\n\n    println(\"The median is: $median\")\n}\n```"
  },
  {
    "task": "Design a program that reads a sequence of characters and prints the first non-repeated character.",
    "code": "```kotlin\nfun main() {\n    println(\"Enter a sequence of characters:\")\n    val input = readLine() ?: return\n    val charCount = mutableMapOf<Char, Int>()\n    \n    for (char in input) {\n        charCount[char] = charCount.getOrDefault(char, 0) + 1\n    }\n    \n    for (char in input) {\n        if (charCount[char] == 1) {\n            println(\"The first non-repeated character is: $char\")\n            return\n        }\n    }\n    \n    println(\"No non-repeated character found.\")\n}\n```"
  },
  {
    "task": "Write a script that reads a list of tuples and prints them sorted by the second element.",
    "code": "```kotlin\nfun main() {\n    val tuples = listOf(\n        Pair(\"apple\", 3),\n        Pair(\"banana\", 1),\n        Pair(\"cherry\", 2)\n    )\n    \n    val sortedTuples = tuples.sortedBy { it.second }\n    \n    sortedTuples.forEach { println(it) }\n}\n```"
  },
  {
    "task": "Create a program that reads a list of cities and prints them grouped by their starting letter.",
    "code": "```kotlin\nfun main() {\n    println(\"Enter cities (comma separated):\")\n    val input = readLine() ?: \"\"\n    val cities = input.split(\",\").map { it.trim() }\n\n    val groupedCities = cities.groupBy { it.firstOrNull() ?: ' ' }\n\n    groupedCities.forEach { (letter, cityList) ->\n        if (letter != ' ') {\n            println(\"$letter: ${cityList.joinToString(\", \")}\")\n        }\n    }\n}\n```"
  },
  {
    "task": "Build a tool that reads a text and prints the longest word.",
    "code": "```kotlin\nfun main() {\n    println(\"Enter a text:\")\n    val input = readLine() ?: \"\"\n    val longestWord = input.split(\"\\\\s+\".toRegex()).maxByOrNull { it.length } ?: \"\"\n    println(\"The longest word is: $longestWord\")\n}\n```"
  },
  {
    "task": "Implement a program that reads a string and prints the number of unique characters.",
    "code": "```kotlin\nfun main() {\n    val input = readLine() ?: \"\"\n    val uniqueChars = input.toSet()\n    println(uniqueChars.size)\n}\n```"
  },
  {
    "task": "Write a script that reads two strings and prints the longest common substring.",
    "code": "```kotlin\nfun main() {\n    val input1 = readLine()!!\n    val input2 = readLine()!!\n    \n    fun longestCommonSubstring(str1: String, str2: String): String {\n        val dp = Array(str1.length + 1) { IntArray(str2.length + 1) }\n        var maxLength = 0\n        var endIndex = 0\n        \n        for (i in 1..str1.length) {\n            for (j in 1..str2.length) {\n                if (str1[i - 1] == str2[j - 1]) {\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                    if (dp[i][j] > maxLength) {\n                        maxLength = dp[i][j]\n                        endIndex = i\n                    }\n                }\n            }\n        }\n        \n        return if (maxLength > 0) str1.substring(endIndex - maxLength, endIndex) else \"\"\n    }\n\n    println(longestCommonSubstring(input1, input2))\n}\n```"
  },
  {
    "task": "Develop a program that reads a chessboard position and prints all possible moves for a knight.",
    "code": "```kotlin\nfun main() {\n    println(\"Enter the knight's position (e.g., e4):\")\n    val input = readLine() ?: return\n    if (input.length != 2) {\n        println(\"Invalid input\")\n        return\n    }\n\n    val column = input[0]\n    val row = input[1]\n\n    if (column !in 'a'..'h' || row !in '1'..'8') {\n        println(\"Invalid position\")\n        return\n    }\n\n    val columnNumber = column - 'a'\n    val rowNumber = row - '1'\n\n    val possibleMoves = listOf(\n        Pair(2, 1), Pair(2, -1), Pair(-2, 1), Pair(-2, -1),\n        Pair(1, 2), Pair(1, -2), Pair(-1, 2), Pair(-1, -2)\n    )\n\n    val validMoves = possibleMoves.map { (dc, dr) ->\n        Pair(columnNumber + dc, rowNumber + dr)\n    }.filter { (c, r) ->\n        c in 0..7 && r in 0..7\n    }.map { (c, r) ->\n        \"${'a' + c}${'1' + r}\"\n    }\n\n    println(\"Possible moves:\")\n    validMoves.forEach { println(it) }\n}\n```"
  },
  {
    "task": "Create a tool that reads a list of numbers and prints the mode.",
    "code": "```kotlin\nimport java.util.Scanner\n\nfun main() {\n    val scanner = Scanner(System.`in`)\n    print(\"Enter numbers separated by spaces: \")\n    val input = scanner.nextLine()\n    val numbers = input.split(\" \").map { it.toInt() }\n    \n    if (numbers.isEmpty()) {\n        println(\"No mode found.\")\n        return\n    }\n    \n    val frequencyMap = numbers.groupingBy { it }.eachCount()\n    val maxFrequency = frequencyMap.values.maxOrNull() ?: 0\n    val mode = frequencyMap.filter { it.value == maxFrequency }.keys\n\n    println(\"Mode: ${mode.joinToString(\", \")}\")\n}\n```"
  },
  {
    "task": "Design a program that reads a list of file paths and prints the largest file.",
    "code": "```kotlin\nimport java.io.File\n\nfun main() {\n    println(\"Enter file paths (comma-separated):\")\n    val input = readLine() ?: return\n    val filePaths = input.split(\",\").map { it.trim() }\n\n    val largestFile = filePaths\n        .mapNotNull { path -> File(path).takeIf { it.exists() && it.isFile } }\n        .maxByOrNull { it.length() }\n\n    if (largestFile != null) {\n        println(\"Largest file: ${largestFile.path} (${largestFile.length()} bytes)\")\n    } else {\n        println(\"No valid files found.\")\n    }\n}\n```"
  },
  {
    "task": "Write a script that reads a list of prices and prints the total cost with tax.",
    "code": "```kotlin\nfun main() {\n    val taxRate = 0.1 // 10% tax\n    println(\"Enter prices separated by space:\")\n    val input = readLine()\n    if (input != null) {\n        val prices = input.split(\" \").mapNotNull { it.toDoubleOrNull() }\n        val totalCost = prices.sum()\n        val totalCostWithTax = totalCost + (totalCost * taxRate)\n        println(\"Total cost with tax: $totalCostWithTax\")\n    } else {\n        println(\"No input provided.\")\n    }\n}\n```"
  },
  {
    "task": "Build a program that reads a list of temperatures and prints them in Fahrenheit.",
    "code": "```kotlin\nfun main() {\n    println(\"Enter temperatures in Celsius (comma separated):\")\n    val input = readLine()\n    if (input != null) {\n        val temperatures = input.split(\",\").map { it.trim().toDoubleOrNull() }\n        for (temp in temperatures) {\n            if (temp != null) {\n                val fahrenheit = temp * 9/5 + 32\n                println(\"$temp\u00b0C is $fahrenheit\u00b0F\")\n            } else {\n                println(\"Invalid input\")\n            }\n        }\n    }\n}\n```"
  },
  {
    "task": "Implement a tool that reads a list of book titles and prints them sorted by length.",
    "code": "```kotlin\nfun main() {\n    val titles = mutableListOf<String>()\n    println(\"Enter book titles (type 'done' to finish):\")\n    \n    while (true) {\n        val input = readLine() ?: break\n        if (input.lowercase() == \"done\") break\n        titles.add(input)\n    }\n    \n    val sortedTitles = titles.sortedBy { it.length }\n    println(\"Sorted book titles by length:\")\n    sortedTitles.forEach { println(it) }\n}\n```"
  },
  {
    "task": "Write a program that reads a directory path and prints all file names.",
    "code": "```kotlin\nimport java.io.File\n\nfun main() {\n    println(\"Enter directory path:\")\n    val path = readLine() ?: return\n    val directory = File(path)\n    \n    if (directory.exists() && directory.isDirectory) {\n        directory.listFiles()?.forEach { file ->\n            if (file.isFile) {\n                println(file.name)\n            }\n        }\n    } else {\n        println(\"Invalid directory path.\")\n    }\n}\n```"
  },
  {
    "task": "Create a script that reads a list of URLs and prints those with a secure connection.",
    "code": "```kotlin\nfun main() {\n    val urls = listOf(\n        \"http://example.com\",\n        \"https://secure.com\",\n        \"ftp://fileserver.com\",\n        \"https://anothersecure.com\"\n    )\n\n    urls.filter { it.startsWith(\"https://\") }\n        .forEach { println(it) }\n}\n```"
  },
  {
    "task": "Develop a tool that reads a sequence of numbers and prints if it is strictly increasing.",
    "code": "```kotlin\nfun main() {\n    println(\"Enter a sequence of numbers separated by spaces:\")\n    val input = readLine()\n    if (input != null) {\n        val numbers = input.split(\" \").mapNotNull { it.toIntOrNull() }\n        val isStrictlyIncreasing = numbers.zipWithNext().all { (a, b) -> a < b }\n        if (isStrictlyIncreasing) {\n            println(\"The sequence is strictly increasing.\")\n        } else {\n            println(\"The sequence is not strictly increasing.\")\n        }\n    } else {\n        println(\"No input provided.\")\n    }\n}\n```"
  },
  {
    "task": "Design a program that reads a list of products and prints them grouped by category.",
    "code": "```kotlin\nfun main() {\n    val products = listOf(\n        Product(\"Apple\", \"Fruit\"),\n        Product(\"Carrot\", \"Vegetable\"),\n        Product(\"Banana\", \"Fruit\"),\n        Product(\"Broccoli\", \"Vegetable\"),\n        Product(\"Orange\", \"Fruit\")\n    )\n\n    val groupedByCategory = products.groupBy { it.category }\n\n    for ((category, items) in groupedByCategory) {\n        println(\"$category:\")\n        for (item in items) {\n            println(\" - ${item.name}\")\n        }\n    }\n}\n\ndata class Product(val name: String, val category: String)\n```"
  },
  {
    "task": "Write a script that reads a sentence and prints it with alternating word capitalization.",
    "code": "```kotlin\nfun main() {\n    val input = readLine() ?: return\n    val words = input.split(\" \")\n    val result = words.mapIndexed { index, word ->\n        if (index % 2 == 0) word.lowercase() else word.uppercase()\n    }.joinToString(\" \")\n    println(result)\n}\n```"
  },
  {
    "task": "Create a program that reads a list of grades and prints the highest and lowest grade.",
    "code": "```kotlin\nfun main() {\n    println(\"Enter grades separated by spaces:\")\n    val input = readLine()\n    val grades = input?.split(\" \")?.mapNotNull { it.toIntOrNull() }\n\n    if (grades != null && grades.isNotEmpty()) {\n        val highestGrade = grades.maxOrNull()\n        val lowestGrade = grades.minOrNull()\n        println(\"Highest grade: $highestGrade\")\n        println(\"Lowest grade: $lowestGrade\")\n    } else {\n        println(\"No valid grades entered.\")\n    }\n}\n```"
  },
  {
    "task": "Build a tool that reads a text and prints the number of sentences.",
    "code": "```kotlin\nfun main() {\n    println(\"Enter text:\")\n    val input = readLine() ?: \"\"\n    val sentenceCount = input.split(Regex(\"[.!?]+\")).filter { it.isNotBlank() }.size\n    println(\"Number of sentences: $sentenceCount\")\n}\n```"
  },
  {
    "task": "Implement a program that reads a list of integers and prints the sum of all odd numbers.",
    "code": "```kotlin\nfun main() {\n    val input = readLine() ?: return\n    val numbers = input.split(\" \").mapNotNull { it.toIntOrNull() }\n    val sumOfOdds = numbers.filter { it % 2 != 0 }.sum()\n    println(sumOfOdds)\n}\n```"
  },
  {
    "task": "Write a script that reads a text and prints the shortest sentence.",
    "code": "```kotlin\nfun main() {\n    println(\"Enter text:\")\n    val text = readLine() ?: \"\"\n    val sentences = text.split(Regex(\"[.!?]\\\\s*\"))\n    val shortestSentence = sentences.minByOrNull { it.length } ?: \"\"\n    println(\"Shortest sentence: $shortestSentence\")\n}\n```"
  },
  {
    "task": "Develop a program that reads a list of dictionaries and prints them sorted by a specific key.",
    "code": "```kotlin\nimport kotlin.system.exitProcess\n\nfun main() {\n    val dictionaries = mutableListOf<Map<String, String>>()\n    println(\"Enter dictionaries (as key:value pairs separated by commas), one per line. Enter 'end' to finish:\")\n    \n    while (true) {\n        val input = readLine() ?: break\n        if (input.lowercase() == \"end\") break\n        \n        val dictionary = input.split(\",\").associate {\n            val (key, value) = it.split(\":\").map(String::trim)\n            key to value\n        }\n        dictionaries.add(dictionary)\n    }\n\n    println(\"Enter the key to sort by:\")\n    val sortKey = readLine() ?: run {\n        println(\"No key provided.\")\n        exitProcess(1)\n    }\n\n    val sortedDictionaries = dictionaries.sortedBy { it[sortKey] }\n    println(\"Sorted dictionaries:\")\n    sortedDictionaries.forEach { println(it) }\n}\n```"
  },
  {
    "task": "Create a tool that reads a sequence of strings and prints the common prefix.",
    "code": "```kotlin\nfun main() {\n    println(\"Enter the number of strings:\")\n    val n = readLine()?.toIntOrNull() ?: return\n    val strings = mutableListOf<String>()\n\n    println(\"Enter the strings:\")\n    repeat(n) {\n        val input = readLine() ?: return\n        strings.add(input)\n    }\n\n    if (strings.isEmpty()) {\n        println(\"No common prefix\")\n        return\n    }\n\n    var prefix = strings[0]\n    \n    for (i in 1 until strings.size) {\n        while (strings[i].indexOf(prefix) != 0) {\n            prefix = prefix.substring(0, prefix.length - 1)\n            if (prefix.isEmpty()) {\n                println(\"No common prefix\")\n                return\n            }\n        }\n    }\n\n    println(\"Common prefix: $prefix\")\n}\n```"
  },
  {
    "task": "Design a program that reads a number and prints all of its divisors.",
    "code": "```kotlin\nfun main() {\n    println(\"Enter a number:\")\n    val number = readLine()?.toIntOrNull()\n\n    if (number != null) {\n        println(\"Divisors of $number are:\")\n        for (i in 1..number) {\n            if (number % i == 0) {\n                println(i)\n            }\n        }\n    } else {\n        println(\"Invalid input.\")\n    }\n}\n```"
  },
  {
    "task": "Write a script that reads a text and prints each word with its length.",
    "code": "```kotlin\nfun main() {\n    val input = readLine() ?: return\n    val words = input.split(\"\\\\s+\".toRegex())\n    for (word in words) {\n        println(\"$word: ${word.length}\")\n    }\n}\n```"
  },
  {
    "task": "Build a program that reads a list of colors and prints them in a rainbow order.",
    "code": "```kotlin\nfun main() {\n    val rainbowOrder = listOf(\"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"indigo\", \"violet\")\n    println(\"Enter a list of colors separated by spaces:\")\n    val inputColors = readLine()?.split(\" \") ?: emptyList()\n    val sortedColors = inputColors.filter { it in rainbowOrder }.sortedBy { rainbowOrder.indexOf(it) }\n    println(\"Colors in rainbow order:\")\n    sortedColors.forEach { println(it) }\n}\n```"
  },
  {
    "task": "Implement a tool that reads a list of names and prints them with their initials.",
    "code": "```kotlin\nfun main() {\n    println(\"Enter the names separated by commas:\")\n    val input = readLine() ?: return\n    val names = input.split(\",\").map { it.trim() }\n\n    for (name in names) {\n        val initials = name.split(\" \")\n            .mapNotNull { it.firstOrNull()?.toUpperCase() }\n            .joinToString(\"\")\n        println(\"$name: $initials\")\n    }\n}\n```"
  },
  {
    "task": "Write a program that reads a series of coordinates and prints the center point.",
    "code": "```kotlin\nfun main() {\n    val coordinates = mutableListOf<Pair<Double, Double>>()\n    println(\"Enter coordinates as 'x y' (type 'end' to finish):\")\n    while (true) {\n        val input = readLine() ?: break\n        if (input.lowercase() == \"end\") break\n        val parts = input.split(\" \")\n        if (parts.size != 2) continue\n        val x = parts[0].toDoubleOrNull() ?: continue\n        val y = parts[1].toDoubleOrNull() ?: continue\n        coordinates.add(Pair(x, y))\n    }\n    if (coordinates.isNotEmpty()) {\n        val sum = coordinates.reduce { acc, pair -> Pair(acc.first + pair.first, acc.second + pair.second) }\n        val center = Pair(sum.first / coordinates.size, sum.second / coordinates.size)\n        println(\"Center Point: ${center.first} ${center.second}\")\n    } else {\n        println(\"No coordinates provided.\")\n    }\n}\n```"
  },
  {
    "task": "Create a script that reads a sentence and prints it with each vowel replaced by its uppercase form.",
    "code": "```kotlin\nfun main() {\n    println(\"Enter a sentence:\")\n    val sentence = readLine() ?: \"\"\n    val result = sentence.map { \n        if (it in \"aeiou\") it.uppercaseChar() else it \n    }.joinToString(\"\")\n    println(result)\n}\n```"
  },
  {
    "task": "Develop a tool that reads a mathematical expression and evaluates its result.",
    "code": "```kotlin\nimport javax.script.ScriptEngineManager\n\nfun main() {\n    val reader = System.`in`.bufferedReader()\n    print(\"Enter a mathematical expression: \")\n    val expression = reader.readLine()\n\n    val engine = ScriptEngineManager().getEngineByName(\"kotlin\")\n    val result = engine.eval(expression)\n\n    println(\"Result: $result\")\n}\n```"
  },
  {
    "task": "Design a program that reads a text and prints the first three words.",
    "code": "```kotlin\nfun main() {\n    val input = readLine().orEmpty()\n    val words = input.split(\"\\\\s+\".toRegex())\n    val firstThreeWords = words.take(3)\n    println(firstThreeWords.joinToString(\" \"))\n}\n```"
  },
  {
    "task": "Write a script that reads a list of numbers and prints them without duplicates.",
    "code": "```kotlin\nfun main() {\n    val numbers = readLine()?.split(\" \")?.mapNotNull { it.toIntOrNull() } ?: emptyList()\n    val uniqueNumbers = numbers.toSet()\n    uniqueNumbers.forEach { println(it) }\n}\n```"
  },
  {
    "task": "Create a program that reads a string and prints it with spaces between each character.",
    "code": "```kotlin\nfun main() {\n    print(\"Enter a string: \")\n    val input = readLine() ?: \"\"\n    val spacedString = input.toCharArray().joinToString(\" \")\n    println(spacedString)\n}\n```"
  },
  {
    "task": "Build a tool that reads a list of events with dates and prints them by chronological order.",
    "code": "```kotlin\nimport java.text.SimpleDateFormat\nimport java.util.*\n\nfun main() {\n    val scanner = Scanner(System.`in`)\n    val dateFormat = SimpleDateFormat(\"yyyy-MM-dd\")\n    val events = mutableListOf<Pair<Date, String>>()\n\n    println(\"Enter the number of events:\")\n    val numberOfEvents = scanner.nextInt()\n    scanner.nextLine() // Consume the newline\n\n    for (i in 1..numberOfEvents) {\n        println(\"Enter event $i description:\")\n        val description = scanner.nextLine()\n        println(\"Enter event $i date (yyyy-MM-dd):\")\n        val date = dateFormat.parse(scanner.nextLine())\n        events.add(Pair(date, description))\n    }\n\n    events.sortBy { it.first }\n\n    println(\"Events in chronological order:\")\n    for ((date, description) in events) {\n        println(\"${dateFormat.format(date)}: $description\")\n    }\n}\n```"
  },
  {
    "task": "Implement a program that reads a list of fractions and prints their sum as a reduced fraction.",
    "code": "```kotlin\nimport java.util.Scanner\nimport kotlin.math.abs\n\nfun gcd(a: Int, b: Int): Int {\n    return if (b == 0) abs(a) else gcd(b, a % b)\n}\n\nfun reduceFraction(numerator: Int, denominator: Int): Pair<Int, Int> {\n    val gcdValue = gcd(numerator, denominator)\n    return Pair(numerator / gcdValue, denominator / gcdValue)\n}\n\nfun main() {\n    val scanner = Scanner(System.`in`)\n    println(\"Enter fractions separated by spaces (e.g., '1/2 3/4 5/6'):\")\n    val input = scanner.nextLine()\n    val fractions = input.split(\" \")\n\n    var totalNumerator = 0\n    var totalDenominator = 1\n\n    for (fraction in fractions) {\n        val parts = fraction.split(\"/\")\n        val numerator = parts[0].toInt()\n        val denominator = parts[1].toInt()\n\n        totalNumerator = totalNumerator * denominator + numerator * totalDenominator\n        totalDenominator *= denominator\n    }\n\n    val result = reduceFraction(totalNumerator, totalDenominator)\n    println(\"Sum of fractions: ${result.first}/${result.second}\")\n}\n```"
  },
  {
    "task": "Write a script that reads a text and prints it with each consonant doubled.",
    "code": "```kotlin\nfun main() {\n    val input = readLine() ?: return\n    val vowels = \"aeiouAEIOU\"\n    val result = input.map { if (it !in vowels && it.isLetter()) \"$it$it\" else \"$it\" }.joinToString(\"\")\n    println(result)\n}\n```"
  },
  {
    "task": "Develop a program that reads a number and prints its representation in Roman numerals.",
    "code": "```kotlin\nfun intToRoman(num: Int): String {\n    val romanNumerals = listOf(\n        Pair(1000, \"M\"),\n        Pair(900, \"CM\"),\n        Pair(500, \"D\"),\n        Pair(400, \"CD\"),\n        Pair(100, \"C\"),\n        Pair(90, \"XC\"),\n        Pair(50, \"L\"),\n        Pair(40, \"XL\"),\n        Pair(10, \"X\"),\n        Pair(9, \"IX\"),\n        Pair(5, \"V\"),\n        Pair(4, \"IV\"),\n        Pair(1, \"I\")\n    )\n    var number = num\n    val result = StringBuilder()\n    for ((value, symbol) in romanNumerals) {\n        while (number >= value) {\n            result.append(symbol)\n            number -= value\n        }\n    }\n    return result.toString()\n}\n\nfun main() {\n    println(\"Enter a number:\")\n    val input = readLine()?.toIntOrNull()\n    if (input != null) {\n        println(\"Roman numeral: ${intToRoman(input)}\")\n    } else {\n        println(\"Invalid input\")\n    }\n}\n```"
  },
  {
    "task": "Create a tool that reads a list of words and prints them with each letter in reverse order.",
    "code": "```kotlin\nfun main() {\n    println(\"Enter words separated by spaces:\")\n    val input = readLine()\n    input?.split(\" \")?.forEach { word ->\n        println(word.reversed())\n    }\n}\n```"
  },
  {
    "task": "Design a program that reads a set of points and prints the one closest to the origin.",
    "code": "```kotlin\nimport kotlin.math.sqrt\n\nfun main() {\n    println(\"Enter number of points:\")\n    val n = readLine()!!.toInt()\n    \n    var closestPoint: Pair<Double, Double>? = null\n    var minDistance = Double.MAX_VALUE\n    \n    repeat(n) {\n        println(\"Enter x and y coordinates of point:\")\n        val input = readLine()!!.split(\" \")\n        val x = input[0].toDouble()\n        val y = input[1].toDouble()\n        \n        val distance = sqrt(x * x + y * y)\n        \n        if (distance < minDistance) {\n            minDistance = distance\n            closestPoint = Pair(x, y)\n        }\n    }\n    \n    closestPoint?.let { (x, y) ->\n        println(\"The closest point to the origin is: ($x, $y)\")\n    }\n}\n```"
  },
  {
    "task": "Write a script that reads a text and prints the frequency of each word.",
    "code": "```kotlin\nfun main() {\n    val input = readLine() ?: return\n    val words = input.split(\"\\\\s+\".toRegex())\n    val frequencyMap = mutableMapOf<String, Int>()\n\n    for (word in words) {\n        frequencyMap[word] = frequencyMap.getOrDefault(word, 0) + 1\n    }\n\n    for ((word, frequency) in frequencyMap) {\n        println(\"$word: $frequency\")\n    }\n}\n```"
  },
  {
    "task": "Build a program that reads a list of integers and prints the second smallest.",
    "code": "```kotlin\nfun main() {\n    val input = readLine() ?: return\n    val numbers = input.split(\" \").mapNotNull { it.toIntOrNull() }.distinct()\n    if (numbers.size < 2) {\n        println(\"Not enough distinct numbers\")\n    } else {\n        val secondSmallest = numbers.sorted()[1]\n        println(secondSmallest)\n    }\n}\n```"
  },
  {
    "task": "Implement a tool that reads a string and prints all its substrings.",
    "code": "```kotlin\nfun main() {\n    val input = readLine() ?: return\n    for (i in input.indices) {\n        for (j in i + 1..input.length) {\n            println(input.substring(i, j))\n        }\n    }\n}\n```"
  },
  {
    "task": "Write a program that reads a number and generates a random number up to that number.",
    "code": "```kotlin\nimport kotlin.random.Random\n\nfun main() {\n    println(\"Enter a number:\")\n    val input = readLine() ?: return\n    val maxNumber = input.toIntOrNull() ?: return\n    val randomNumber = Random.nextInt(maxNumber + 1)\n    println(\"Random number: $randomNumber\")\n}\n```"
  },
  {
    "task": "Create a script that reads a sentence and prints it with each word reversed.",
    "code": "```kotlin\nfun main() {\n    println(\"Enter a sentence:\")\n    val input = readLine() ?: \"\"\n    val result = input.split(\" \").joinToString(\" \") { it.reversed() }\n    println(result)\n}\n```"
  },
  {
    "task": "Develop a tool that reads a text and prints it with each sentence on a new line.",
    "code": "```kotlin\nimport java.util.Scanner\n\nfun main() {\n    val scanner = Scanner(System.`in`)\n    println(\"Please enter the text:\")\n\n    val inputText = scanner.nextLine()\n    val sentences = inputText.split(Regex(\"(?<=[.!?])\\\\s*\"))\n\n    sentences.forEach { sentence ->\n        if (sentence.isNotBlank()) {\n            println(sentence.trim())\n        }\n    }\n}\n```"
  },
  {
    "task": "Design a program that reads a list of numbers and prints the product of all negative numbers.",
    "code": "```kotlin\nfun main() {\n    val input = readLine() ?: return\n    val numbers = input.split(\" \").mapNotNull { it.toIntOrNull() }\n    val productOfNegatives = numbers.filter { it < 0 }.fold(1) { acc, num -> acc * num }\n    println(productOfNegatives)\n}\n```"
  },
  {
    "task": "Write a script that reads a dictionary and prints the keys and values in sorted order.",
    "code": "```kotlin\nfun main() {\n    val dictionary = mapOf(\n        \"apple\" to 2,\n        \"banana\" to 5,\n        \"cherry\" to 3\n    )\n\n    val sortedKeys = dictionary.keys.sorted()\n    for (key in sortedKeys) {\n        println(\"$key: ${dictionary[key]}\")\n    }\n}\n```"
  },
  {
    "task": "Create a program that reads a text and prints the number of unique words.",
    "code": "```kotlin\nfun main() {\n    val input = readLine() ?: return\n    val words = input.split(\"\\\\s+\".toRegex()).map { it.lowercase() }\n    val uniqueWordsCount = words.toSet().size\n    println(uniqueWordsCount)\n}\n```"
  }
]