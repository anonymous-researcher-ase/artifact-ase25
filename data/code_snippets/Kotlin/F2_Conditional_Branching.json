[
  {
    "task": "Write a program that checks if a number is even or odd and outputs the result.",
    "code": "```kotlin\nfun main() {\n    val number = 4 // You can change this number to test with different values\n    if (number % 2 == 0) {\n        println(\"$number is even\")\n    } else {\n        println(\"$number is odd\")\n    }\n}\n```"
  },
  {
    "task": "Create a function that determines if a given year is a leap year.",
    "code": "```kotlin\nfun isLeapYear(year: Int): Boolean {\n    return when {\n        year % 400 == 0 -> true\n        year % 100 == 0 -> false\n        year % 4 == 0 -> true\n        else -> false\n    }\n}\n```"
  },
  {
    "task": "Develop a script that categorizes an input number as positive, negative, or zero.",
    "code": "```kotlin\nfun categorizeNumber(number: Int): String {\n    return when {\n        number > 0 -> \"positive\"\n        number < 0 -> \"negative\"\n        else -> \"zero\"\n    }\n}\n\nfun main() {\n    val number = readLine()?.toIntOrNull() ?: 0\n    val category = categorizeNumber(number)\n    println(\"The number $number is $category.\")\n}\n```"
  },
  {
    "task": "Implement a system that grants access only if a correct password and username are provided.",
    "code": "```kotlin\nfun main() {\n    val correctUsername = \"user123\"\n    val correctPassword = \"pass123\"\n\n    val inputUsername = \"user123\" // Replace with user input\n    val inputPassword = \"pass123\" // Replace with user input\n\n    if (inputUsername == correctUsername && inputPassword == correctPassword) {\n        println(\"Access granted\")\n    } else {\n        println(\"Access denied\")\n    }\n}\n```"
  },
  {
    "task": "Design a program that outputs 'Fizz' for numbers divisible by 3, 'Buzz' for numbers divisible by 5, and 'FizzBuzz' for numbers divisible by both.",
    "code": "```kotlin\nfun main() {\n    for (num in 1..100) {\n        when {\n            num % 3 == 0 && num % 5 == 0 -> println(\"FizzBuzz\")\n            num % 3 == 0 -> println(\"Fizz\")\n            num % 5 == 0 -> println(\"Buzz\")\n            else -> println(num)\n        }\n    }\n}\n```"
  },
  {
    "task": "Write a function to determine if a character is a vowel or a consonant.",
    "code": "```kotlin\nfun isVowelOrConsonant(character: Char): String {\n    return when (character.toLowerCase()) {\n        'a', 'e', 'i', 'o', 'u' -> \"Vowel\"\n        in 'a'..'z' -> \"Consonant\"\n        else -> \"Not a letter\"\n    }\n}\n```"
  },
  {
    "task": "Create a program that assigns letter grades based on numerical scores.",
    "code": "```kotlin\nfun assignLetterGrade(score: Int): String {\n    return when {\n        score >= 90 -> \"A\"\n        score >= 80 -> \"B\"\n        score >= 70 -> \"C\"\n        score >= 60 -> \"D\"\n        else -> \"F\"\n    }\n}\n\nfun main() {\n    val scores = listOf(95, 82, 67, 73, 59)\n    for (score in scores) {\n        println(\"Score: $score, Grade: ${assignLetterGrade(score)}\")\n    }\n}\n```"
  },
  {
    "task": "Develop a routine that suggests clothing based on the current temperature.",
    "code": "```kotlin\nfun suggestClothing(temperature: Int): String {\n    return when {\n        temperature < 0 -> \"Wear a heavy coat, hat, and gloves.\"\n        temperature in 0..10 -> \"Wear a coat and a hat.\"\n        temperature in 11..20 -> \"Wear a light jacket or sweater.\"\n        temperature in 21..30 -> \"A t-shirt and jeans should be fine.\"\n        temperature > 30 -> \"Wear shorts and a t-shirt.\"\n        else -> \"Invalid temperature range.\"\n    }\n}\n\nfun main() {\n    val currentTemperature = 15\n    println(suggestClothing(currentTemperature))\n}\n```"
  },
  {
    "task": "Implement a system that checks if a user is an adult or a minor based on their age.",
    "code": "```kotlin\nfun checkUserAge(age: Int): String {\n    return if (age >= 18) {\n        \"Adult\"\n    } else {\n        \"Minor\"\n    }\n}\n\nfun main() {\n    val age = 20\n    val result = checkUserAge(age)\n    println(\"The user is an $result.\")\n}\n```"
  },
  {
    "task": "Design a program that validates if a triangle can exist based on its side lengths.",
    "code": "```kotlin\nfun isValidTriangle(a: Double, b: Double, c: Double): Boolean {\n    return (a > 0 && b > 0 && c > 0) && (a + b > c) && (a + c > b) && (b + c > a)\n}\n\nfun main() {\n    val a = 3.0\n    val b = 4.0\n    val c = 5.0\n    if (isValidTriangle(a, b, c)) {\n        println(\"The triangle is valid.\")\n    } else {\n        println(\"The triangle is not valid.\")\n    }\n}\n```"
  },
  {
    "task": "Write a function that determines the largest of three input numbers.",
    "code": "```kotlin\nfun largestOfThree(a: Int, b: Int, c: Int): Int {\n    return if (a >= b && a >= c) {\n        a\n    } else if (b >= a && b >= c) {\n        b\n    } else {\n        c\n    }\n}\n```"
  },
  {
    "task": "Create a program that checks if a string is a palindrome.",
    "code": "```kotlin\nfun isPalindrome(input: String): Boolean {\n    val cleanedInput = input.replace(\"\\\\s\".toRegex(), \"\").toLowerCase()\n    val reversedInput = cleanedInput.reversed()\n    return cleanedInput == reversedInput\n}\n\nfun main() {\n    val testString = \"A man a plan a canal Panama\"\n    if (isPalindrome(testString)) {\n        println(\"\\\"$testString\\\" is a palindrome.\")\n    } else {\n        println(\"\\\"$testString\\\" is not a palindrome.\")\n    }\n}\n```"
  },
  {
    "task": "Develop a routine that calculates the total cost with a discount applied if applicable.",
    "code": "```kotlin\nfun calculateTotalCost(price: Double, quantity: Int, discountRate: Double): Double {\n    val subtotal = price * quantity\n    val discount = if (subtotal > 100) subtotal * discountRate else 0.0\n    return subtotal - discount\n}\n```"
  },
  {
    "task": "Implement a system that checks if a person is eligible to vote based on age and citizenship.",
    "code": "```kotlin\nfun isEligibleToVote(age: Int, isCitizen: Boolean): Boolean {\n    if (age >= 18 && isCitizen) {\n        return true\n    } else {\n        return false\n    }\n}\n\nfun main() {\n    val age = 20\n    val isCitizen = true\n    if (isEligibleToVote(age, isCitizen)) {\n        println(\"Eligible to vote\")\n    } else {\n        println(\"Not eligible to vote\")\n    }\n}\n```"
  },
  {
    "task": "Design a function that returns the day of the week given a number from 1 to 7.",
    "code": "```kotlin\nfun getDayOfWeek(number: Int): String {\n    return when (number) {\n        1 -> \"Monday\"\n        2 -> \"Tuesday\"\n        3 -> \"Wednesday\"\n        4 -> \"Thursday\"\n        5 -> \"Friday\"\n        6 -> \"Saturday\"\n        7 -> \"Sunday\"\n        else -> \"Invalid number\"\n    }\n}\n```"
  },
  {
    "task": "Write a program that determines if a word is found within a given sentence.",
    "code": "```kotlin\nfun isWordInSentence(word: String, sentence: String): Boolean {\n    val words = sentence.split(\" \")\n    return word in words\n}\n\nfun main() {\n    val sentence = \"The quick brown fox jumps over the lazy dog\"\n    val word = \"fox\"\n    if (isWordInSentence(word, sentence)) {\n        println(\"$word is found in the sentence.\")\n    } else {\n        println(\"$word is not found in the sentence.\")\n    }\n}\n```"
  },
  {
    "task": "Create a script that checks if a number is within a specified range.",
    "code": "```kotlin\nfun isNumberInRange(number: Int, lowerBound: Int, upperBound: Int): Boolean {\n    return number in lowerBound..upperBound\n}\n\nfun main() {\n    val number = 10\n    val lowerBound = 5\n    val upperBound = 15\n\n    if (isNumberInRange(number, lowerBound, upperBound)) {\n        println(\"The number $number is within the range.\")\n    } else {\n        println(\"The number $number is outside the range.\")\n    }\n}\n```"
  },
  {
    "task": "Develop a routine to decide if a user input is a valid email address.",
    "code": "```kotlin\nfun isValidEmail(email: String): Boolean {\n    if (email.isEmpty()) return false\n    val atSymbolIndex = email.indexOf('@')\n    val dotSymbolIndex = email.lastIndexOf('.')\n\n    if (atSymbolIndex < 1 || dotSymbolIndex < atSymbolIndex + 2 || dotSymbolIndex + 2 >= email.length) {\n        return false\n    }\n    return true\n}\n\nfun main() {\n    val email = readLine() ?: \"\"\n    if (isValidEmail(email)) {\n        println(\"Valid email address\")\n    } else {\n        println(\"Invalid email address\")\n    }\n}\n```"
  },
  {
    "task": "Implement a program that categorizes a number as small, medium, or large.",
    "code": "```kotlin\nfun categorizeNumber(number: Int): String {\n    return when {\n        number < 10 -> \"small\"\n        number in 10..100 -> \"medium\"\n        else -> \"large\"\n    }\n}\n\nfun main() {\n    val number = 42\n    val category = categorizeNumber(number)\n    println(\"The number $number is categorized as $category.\")\n}\n```"
  },
  {
    "task": "Design a function that outputs the season based on the month provided.",
    "code": "```kotlin\nfun getSeason(month: String): String {\n    return when (month.toLowerCase()) {\n        \"december\", \"january\", \"february\" -> \"Winter\"\n        \"march\", \"april\", \"may\" -> \"Spring\"\n        \"june\", \"july\", \"august\" -> \"Summer\"\n        \"september\", \"october\", \"november\" -> \"Autumn\"\n        else -> \"Invalid month\"\n    }\n}\n```"
  },
  {
    "task": "Write a program that checks if a string contains only alphabetic characters.",
    "code": "```kotlin\nfun isAlphabetic(input: String): Boolean {\n    for (char in input) {\n        if (!char.isLetter()) {\n            return false\n        }\n    }\n    return true\n}\n\nfun main() {\n    val testString = \"HelloWorld\"\n    println(\"The string \\\"$testString\\\" is alphabetic: ${isAlphabetic(testString)}\")\n}\n```"
  },
  {
    "task": "Create a routine that decides the type of triangle based on its angles.",
    "code": "```kotlin\nfun triangleType(angle1: Int, angle2: Int, angle3: Int): String {\n    return if (angle1 + angle2 + angle3 != 180 || angle1 <= 0 || angle2 <= 0 || angle3 <= 0) {\n        \"Not a triangle\"\n    } else if (angle1 == 90 || angle2 == 90 || angle3 == 90) {\n        \"Right triangle\"\n    } else if (angle1 > 90 || angle2 > 90 || angle3 > 90) {\n        \"Obtuse triangle\"\n    } else {\n        \"Acute triangle\"\n    }\n}\n```"
  },
  {
    "task": "Develop a program that suggests a meal based on the time of day.",
    "code": "```kotlin\nfun suggestMeal(hour: Int): String {\n    return when {\n        hour in 5..10 -> \"Breakfast\"\n        hour in 11..15 -> \"Lunch\"\n        hour in 16..21 -> \"Dinner\"\n        else -> \"Snack\"\n    }\n}\n\nfun main() {\n    val currentHour = 14 // Example hour of the day\n    println(\"Suggested meal: ${suggestMeal(currentHour)}\")\n}\n```"
  },
  {
    "task": "Implement a function that determines if a point lies within a circle given its radius.",
    "code": "```kotlin\nfun isPointInCircle(x: Double, y: Double, circleRadius: Double): Boolean {\n    val distanceFromOrigin = Math.sqrt(x * x + y * y)\n    return distanceFromOrigin <= circleRadius\n}\n```"
  },
  {
    "task": "Design a script that calculates overtime pay based on hours worked.",
    "code": "```kotlin\nfun calculateOvertimePay(hoursWorked: Double, hourlyRate: Double): Double {\n    val regularHours = 40.0\n    val overtimeMultiplier = 1.5\n    return if (hoursWorked > regularHours) {\n        val overtimeHours = hoursWorked - regularHours\n        (regularHours * hourlyRate) + (overtimeHours * hourlyRate * overtimeMultiplier)\n    } else {\n        hoursWorked * hourlyRate\n    }\n}\n\nfun main() {\n    val hoursWorked = 45.0\n    val hourlyRate = 20.0\n    val pay = calculateOvertimePay(hoursWorked, hourlyRate)\n    println(\"Total pay: $$pay\")\n}\n```"
  },
  {
    "task": "Write a program that checks if two strings are anagrams of each other.",
    "code": "```kotlin\nfun areAnagrams(str1: String, str2: String): Boolean {\n    if (str1.length != str2.length) return false\n    val sortedStr1 = str1.toCharArray().sorted()\n    val sortedStr2 = str2.toCharArray().sorted()\n    return sortedStr1 == sortedStr2\n}\n\nfun main() {\n    val str1 = \"listen\"\n    val str2 = \"silent\"\n    if (areAnagrams(str1, str2)) {\n        println(\"The strings are anagrams.\")\n    } else {\n        println(\"The strings are not anagrams.\")\n    }\n}\n```"
  },
  {
    "task": "Create a function that classifies numbers as prime or composite.",
    "code": "```kotlin\nfun classifyNumber(n: Int): String {\n    if (n <= 1) return \"Composite\"\n    if (n == 2) return \"Prime\"\n    \n    for (i in 2..Math.sqrt(n.toDouble()).toInt()) {\n        if (n % i == 0) return \"Composite\"\n    }\n    return \"Prime\"\n}\n```"
  },
  {
    "task": "Develop a routine to determine if a number is a power of two.",
    "code": "```kotlin\nfun isPowerOfTwo(number: Int): Boolean {\n    if (number <= 0) return false\n    return (number and (number - 1)) == 0\n}\n```"
  },
  {
    "task": "Implement a program that checks if a list is sorted in ascending order.",
    "code": "```kotlin\nfun isSortedAscending(list: List<Int>): Boolean {\n    for (i in 0 until list.size - 1) {\n        if (list[i] > list[i + 1]) {\n            return false\n        }\n    }\n    return true\n}\n\nfun main() {\n    val list = listOf(1, 2, 3, 4, 5)\n    println(\"List is sorted in ascending order: ${isSortedAscending(list)}\")\n}\n```"
  },
  {
    "task": "Design a function that suggests a sport based on the weather conditions.",
    "code": "```kotlin\nfun suggestSport(weather: String): String {\n    return when (weather.toLowerCase()) {\n        \"sunny\" -> \"Tennis\"\n        \"rainy\" -> \"Swimming\"\n        \"windy\" -> \"Kite Flying\"\n        \"snowy\" -> \"Skiing\"\n        \"cloudy\" -> \"Jogging\"\n        else -> \"Reading\"\n    }\n}\n```"
  },
  {
    "task": "Write a program that determines if an entered date is valid.",
    "code": "```kotlin\nimport java.util.*\n\nfun isValidDate(day: Int, month: Int, year: Int): Boolean {\n    if (year < 1) return false\n    if (month < 1 || month > 12) return false\n    if (day < 1) return false\n\n    val daysInMonth = when (month) {\n        1, 3, 5, 7, 8, 10, 12 -> 31\n        4, 6, 9, 11 -> 30\n        2 -> if (isLeapYear(year)) 29 else 28\n        else -> return false\n    }\n\n    return day <= daysInMonth\n}\n\nfun isLeapYear(year: Int): Boolean {\n    return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)\n}\n\nfun main() {\n    val scanner = Scanner(System.`in`)\n    print(\"Enter day: \")\n    val day = scanner.nextInt()\n    print(\"Enter month: \")\n    val month = scanner.nextInt()\n    print(\"Enter year: \")\n    val year = scanner.nextInt()\n\n    if (isValidDate(day, month, year)) {\n        println(\"The entered date is valid.\")\n    } else {\n        println(\"The entered date is invalid.\")\n    }\n}\n```"
  },
  {
    "task": "Create a script to decide which of two products to buy based on price and reviews.",
    "code": "```kotlin\nfun main() {\n    val product1Price = 100.0\n    val product1Reviews = 4.5\n    val product2Price = 90.0\n    val product2Reviews = 4.0\n\n    val chosenProduct = when {\n        product1Price < product2Price && product1Reviews >= product2Reviews -> \"Product 1\"\n        product2Price < product1Price && product2Reviews >= product1Reviews -> \"Product 2\"\n        product1Price < product2Price -> \"Product 1\"\n        product2Price < product1Price -> \"Product 2\"\n        else -> if (product1Reviews >= product2Reviews) \"Product 1\" else \"Product 2\"\n    }\n\n    println(\"Buy $chosenProduct\")\n}\n```"
  },
  {
    "task": "Develop a function that categorizes a person\u2019s BMI as underweight, normal, overweight, or obese.",
    "code": "```kotlin\nfun categorizeBMI(bmi: Double): String {\n    return when {\n        bmi < 18.5 -> \"Underweight\"\n        bmi in 18.5..24.9 -> \"Normal weight\"\n        bmi in 25.0..29.9 -> \"Overweight\"\n        else -> \"Obese\"\n    }\n}\n```"
  },
  {
    "task": "Implement a program that checks if a credit card number is valid using the Luhn algorithm.",
    "code": "```kotlin\nfun isValidCreditCardNumber(number: String): Boolean {\n    val sanitizedNumber = number.filter { it.isDigit() }\n    if (sanitizedNumber.isEmpty()) return false\n\n    val sum = sanitizedNumber.reversed().map { it.toString().toInt() }.mapIndexed { index, digit ->\n        if (index % 2 == 1) {\n            val doubled = digit * 2\n            if (doubled > 9) doubled - 9 else doubled\n        } else {\n            digit\n        }\n    }.sum()\n\n    return sum % 10 == 0\n}\n\nfun main() {\n    val cardNumber = \"1234567812345670\"\n    if (isValidCreditCardNumber(cardNumber)) {\n        println(\"The credit card number is valid.\")\n    } else {\n        println(\"The credit card number is invalid.\")\n    }\n}\n```"
  },
  {
    "task": "Design a routine that outputs a greeting based on the current time of day.",
    "code": "```kotlin\nimport java.time.LocalTime\n\nfun greetBasedOnTime() {\n    val currentTime = LocalTime.now()\n    val hour = currentTime.hour\n\n    val greeting = when {\n        hour in 0..11 -> \"Good morning\"\n        hour in 12..17 -> \"Good afternoon\"\n        else -> \"Good evening\"\n    }\n\n    println(greeting)\n}\n\nfun main() {\n    greetBasedOnTime()\n}\n```"
  },
  {
    "task": "Write a program that determines if a given word can be formed with a set of letters.",
    "code": "```kotlin\nfun canFormWord(word: String, letters: String): Boolean {\n    val letterCounts = mutableMapOf<Char, Int>()\n\n    for (letter in letters) {\n        letterCounts[letter] = letterCounts.getOrDefault(letter, 0) + 1\n    }\n\n    for (char in word) {\n        val count = letterCounts.getOrDefault(char, 0)\n        if (count == 0) {\n            return false\n        }\n        letterCounts[char] = count - 1\n    }\n\n    return true\n}\n\nfun main() {\n    val word = \"example\"\n    val letters = \"axmeepl\"\n    println(canFormWord(word, letters))\n}\n```"
  },
  {
    "task": "Create a function that outputs the appropriate greeting based on the day of the week.",
    "code": "```kotlin\nfun greetingForDay(day: String): String {\n    return when (day.toLowerCase()) {\n        \"monday\" -> \"Hello, it's Monday! Start of a new week.\"\n        \"tuesday\" -> \"Hey, it's Tuesday! Keep going.\"\n        \"wednesday\" -> \"Hi, it's Wednesday! Halfway through.\"\n        \"thursday\" -> \"Hello, it's Thursday! Almost there.\"\n        \"friday\" -> \"Hey, it's Friday! Weekend is near.\"\n        \"saturday\" -> \"Hi, it's Saturday! Enjoy your weekend.\"\n        \"sunday\" -> \"Hello, it's Sunday! Relax and recharge.\"\n        else -> \"Hi, not sure what day it is!\"\n    }\n}\n```"
  },
  {
    "task": "Develop a system to determine if a person qualifies for a senior citizen discount.",
    "code": "```kotlin\nfun main() {\n    val age = 65\n    val qualifiesForDiscount = if (age >= 65) {\n        true\n    } else {\n        false\n    }\n\n    println(\"Qualifies for senior citizen discount: $qualifiesForDiscount\")\n}\n```"
  },
  {
    "task": "Implement a function that checks if a number is a perfect square.",
    "code": "```kotlin\nfun isPerfectSquare(num: Int): Boolean {\n    if (num < 0) return false\n    val sqrt = Math.sqrt(num.toDouble()).toInt()\n    return sqrt * sqrt == num\n}\n```"
  },
  {
    "task": "Design a program that outputs the correct shipping cost based on weight and distance.",
    "code": "```kotlin\nfun calculateShippingCost(weight: Double, distance: Double): Double {\n    return when {\n        weight <= 0 || distance <= 0 -> 0.0\n        weight <= 5.0 -> {\n            when {\n                distance <= 20 -> 5.0\n                distance <= 100 -> 10.0\n                else -> 20.0\n            }\n        }\n        weight <= 20.0 -> {\n            when {\n                distance <= 20 -> 10.0\n                distance <= 100 -> 20.0\n                else -> 30.0\n            }\n        }\n        else -> {\n            when {\n                distance <= 20 -> 20.0\n                distance <= 100 -> 30.0\n                else -> 50.0\n            }\n        }\n    }\n}\n\nfun main() {\n    val weight = 10.0\n    val distance = 50.0\n    val shippingCost = calculateShippingCost(weight, distance)\n    println(\"The shipping cost is: $$shippingCost\")\n}\n```"
  },
  {
    "task": "Write a routine that chooses the correct pronoun based on gender input.",
    "code": "```kotlin\nfun getPronoun(gender: String): String {\n    return when (gender.toLowerCase()) {\n        \"male\" -> \"he\"\n        \"female\" -> \"she\"\n        \"non-binary\" -> \"they\"\n        else -> \"they\"\n    }\n}\n```"
  },
  {
    "task": "Create a program that checks if a user input is a palindrome number.",
    "code": "```kotlin\nfun isPalindrome(number: Int): Boolean {\n    val original = number.toString()\n    val reversed = original.reversed()\n    return original == reversed\n}\n\nfun main() {\n    print(\"Enter a number: \")\n    val input = readLine()?.toIntOrNull()\n\n    if (input != null) {\n        if (isPalindrome(input)) {\n            println(\"$input is a palindrome number.\")\n        } else {\n            println(\"$input is not a palindrome number.\")\n        }\n    } else {\n        println(\"Invalid input.\")\n    }\n}\n```"
  },
  {
    "task": "Develop a script to decide if a number is a perfect number.",
    "code": "```kotlin\nfun isPerfectNumber(number: Int): Boolean {\n    if (number < 1) return false\n\n    var sum = 0\n    for (i in 1 until number) {\n        if (number % i == 0) {\n            sum += i\n        }\n    }\n    return sum == number\n}\n\nfun main() {\n    val number = 28\n    if (isPerfectNumber(number)) {\n        println(\"$number is a perfect number.\")\n    } else {\n        println(\"$number is not a perfect number.\")\n    }\n}\n```"
  },
  {
    "task": "Implement a system that determines the winner in a rock-paper-scissors game.",
    "code": "```kotlin\nfun determineWinner(player1: String, player2: String): String {\n    return when {\n        player1 == player2 -> \"Draw\"\n        player1 == \"rock\" && player2 == \"scissors\" -> \"Player 1 wins\"\n        player1 == \"scissors\" && player2 == \"paper\" -> \"Player 1 wins\"\n        player1 == \"paper\" && player2 == \"rock\" -> \"Player 1 wins\"\n        player2 == \"rock\" && player1 == \"scissors\" -> \"Player 2 wins\"\n        player2 == \"scissors\" && player1 == \"paper\" -> \"Player 2 wins\"\n        player2 == \"paper\" && player1 == \"rock\" -> \"Player 2 wins\"\n        else -> \"Invalid input\"\n    }\n}\n```"
  },
  {
    "task": "Design a function that suggests a movie genre based on user mood.",
    "code": "```kotlin\nfun suggestMovieGenreBasedOnMood(mood: String): String {\n    return when (mood.toLowerCase()) {\n        \"happy\" -> \"Comedy\"\n        \"sad\" -> \"Drama\"\n        \"adventurous\" -> \"Action\"\n        \"romantic\" -> \"Romance\"\n        \"scared\" -> \"Horror\"\n        \"curious\" -> \"Mystery\"\n        else -> \"Documentary\"\n    }\n}\n```"
  },
  {
    "task": "Write a program that checks if a file extension is valid for an image file.",
    "code": "```kotlin\nfun isValidImageFileExtension(extension: String): Boolean {\n    val validExtensions = setOf(\"jpg\", \"jpeg\", \"png\", \"gif\", \"bmp\", \"tiff\")\n    return extension.lowercase() in validExtensions\n}\n\nfun main() {\n    val fileName = \"example.png\"\n    val extension = fileName.substringAfterLast('.', \"\")\n    if (isValidImageFileExtension(extension)) {\n        println(\"The file extension is valid for an image file.\")\n    } else {\n        println(\"The file extension is not valid for an image file.\")\n    }\n}\n```"
  },
  {
    "task": "Create a routine that decides the appropriate currency symbol based on country.",
    "code": "```kotlin\nfun getCurrencySymbol(country: String): String {\n    return when (country) {\n        \"United States\" -> \"$\"\n        \"United Kingdom\" -> \"\u00a3\"\n        \"Japan\" -> \"\u00a5\"\n        \"European Union\" -> \"\u20ac\"\n        \"India\" -> \"\u20b9\"\n        else -> \"Unrecognized country\"\n    }\n}\n```"
  },
  {
    "task": "Develop a function that determines if a string is a valid palindrome ignoring spaces and punctuation.",
    "code": "```kotlin\nfun isValidPalindrome(s: String): Boolean {\n    val filtered = s.filter { it.isLetterOrDigit() }.toLowerCase()\n    return filtered == filtered.reversed()\n}\n```"
  },
  {
    "task": "Implement a program that checks if a number is in the Fibonacci sequence.",
    "code": "```kotlin\nfun isFibonacci(n: Int): Boolean {\n    if (n < 0) return false\n    var a = 0\n    var b = 1\n    while (a < n) {\n        val temp = a\n        a = b\n        b += temp\n    }\n    return a == n\n}\n\nfun main() {\n    val number = 13\n    val result = if (isFibonacci(number)) \"is in\" else \"is not in\"\n    println(\"The number $number $result the Fibonacci sequence.\")\n}\n```"
  },
  {
    "task": "Design a script to calculate the correct tip based on service quality rating.",
    "code": "```kotlin\nfun calculateTip(amount: Double, serviceQuality: String): Double {\n    val tipPercentage = when (serviceQuality.toLowerCase()) {\n        \"excellent\" -> 0.20\n        \"good\" -> 0.15\n        \"average\" -> 0.10\n        \"poor\" -> 0.05\n        else -> 0.0\n    }\n    return amount * tipPercentage\n}\n\nfun main() {\n    val billAmount = 100.0 // Example bill amount\n    val serviceQuality = \"good\" // Example service quality\n\n    val tip = calculateTip(billAmount, serviceQuality)\n    println(\"The calculated tip is: $$tip\")\n}\n```"
  },
  {
    "task": "Write a function that determines if a year is a century year.",
    "code": "```kotlin\nfun isCenturyYear(year: Int): Boolean {\n    return year % 100 == 0\n}\n```"
  },
  {
    "task": "Create a program that checks if a date falls on a weekend.",
    "code": "```kotlin\nimport java.time.DayOfWeek\nimport java.time.LocalDate\n\nfun isWeekend(date: LocalDate): Boolean {\n    val dayOfWeek = date.dayOfWeek\n    return dayOfWeek == DayOfWeek.SATURDAY || dayOfWeek == DayOfWeek.SUNDAY\n}\n\nfun main() {\n    val date = LocalDate.of(2023, 10, 7) // Example date\n    if (isWeekend(date)) {\n        println(\"The date falls on a weekend.\")\n    } else {\n        println(\"The date does not fall on a weekend.\")\n    }\n}\n```"
  },
  {
    "task": "Develop a routine that suggests a book based on genre preference.",
    "code": "```kotlin\nfun suggestBook(genre: String): String {\n    return when (genre.toLowerCase()) {\n        \"fantasy\" -> \"The Hobbit by J.R.R. Tolkien\"\n        \"science fiction\" -> \"Dune by Frank Herbert\"\n        \"mystery\" -> \"The Da Vinci Code by Dan Brown\"\n        \"romance\" -> \"Pride and Prejudice by Jane Austen\"\n        \"horror\" -> \"The Shining by Stephen King\"\n        else -> \"Genre not recognized. Try another genre.\"\n    }\n}\n\nfun main() {\n    val genre = \"fantasy\"\n    val suggestion = suggestBook(genre)\n    println(\"Based on your preference, we suggest: $suggestion\")\n}\n```"
  },
  {
    "task": "Implement a system that determines if a student passes or fails based on their grades.",
    "code": "```kotlin\nfun determinePassOrFail(grade: Int): String {\n    return if (grade >= 50) {\n        \"Pass\"\n    } else {\n        \"Fail\"\n    }\n}\n\nfun main() {\n    val studentGrades = listOf(45, 75, 60, 30, 85)\n    for (grade in studentGrades) {\n        val result = determinePassOrFail(grade)\n        println(\"Grade: $grade - Result: $result\")\n    }\n}\n```"
  },
  {
    "task": "Design a function to validate if a string is a valid URL.",
    "code": "```kotlin\nimport java.net.URL\n\nfun isValidUrl(url: String): Boolean {\n    return try {\n        val obj = URL(url)\n        true\n    } catch (e: Exception) {\n        false\n    }\n}\n```"
  },
  {
    "task": "Write a program that checks if a point is inside a rectangle given its coordinates.",
    "code": "```kotlin\nfun isPointInsideRectangle(pointX: Double, pointY: Double, rectX1: Double, rectY1: Double, rectX2: Double, rectY2: Double): Boolean {\n    val lowerLeftX = minOf(rectX1, rectX2)\n    val lowerLeftY = minOf(rectY1, rectY2)\n    val upperRightX = maxOf(rectX1, rectX2)\n    val upperRightY = maxOf(rectY1, rectY2)\n    \n    return (pointX in lowerLeftX..upperRightX) && (pointY in lowerLeftY..upperRightY)\n}\n\nfun main() {\n    val pointX = 3.0\n    val pointY = 4.0\n    val rectX1 = 2.0\n    val rectY1 = 2.0\n    val rectX2 = 5.0\n    val rectY2 = 6.0\n    \n    val inside = isPointInsideRectangle(pointX, pointY, rectX1, rectY1, rectX2, rectY2)\n    \n    println(\"Point is inside the rectangle: $inside\")\n}\n```"
  },
  {
    "task": "Create a script to determine if a word can be constructed from a given set of letters.",
    "code": "```kotlin\nfun canConstructWord(word: String, letters: String): Boolean {\n    val letterCount = mutableMapOf<Char, Int>()\n    for (letter in letters) {\n        letterCount[letter] = letterCount.getOrDefault(letter, 0) + 1\n    }\n    for (char in word) {\n        if (letterCount.getOrDefault(char, 0) <= 0) {\n            return false\n        }\n        letterCount[char] = letterCount[char]!! - 1\n    }\n    return true\n}\n\nfun main() {\n    val wordToConstruct = \"hello\"\n    val availableLetters = \"loleh\"\n    println(canConstructWord(wordToConstruct, availableLetters)) // Output: true\n}\n```"
  },
  {
    "task": "Develop a routine that calculates insurance premiums based on age and driving record.",
    "code": "```kotlin\nfun calculateInsurancePremium(age: Int, hasGoodDrivingRecord: Boolean): Double {\n    return when {\n        age < 25 && !hasGoodDrivingRecord -> 200.0\n        age < 25 && hasGoodDrivingRecord -> 150.0\n        age >= 25 && !hasGoodDrivingRecord -> 180.0\n        age >= 25 && hasGoodDrivingRecord -> 100.0\n        else -> 0.0\n    }\n}\n```"
  },
  {
    "task": "Implement a program that checks for palindrome sentences.",
    "code": "```kotlin\nfun isPalindrome(sentence: String): Boolean {\n    val cleaned = sentence.filter { it.isLetterOrDigit() }.toLowerCase()\n    return cleaned == cleaned.reversed()\n}\n\nfun main() {\n    val sentences = listOf(\n        \"A man, a plan, a canal, Panama\",\n        \"This is not a palindrome\",\n        \"No lemon, no melon\"\n    )\n    \n    for (sentence in sentences) {\n        if (isPalindrome(sentence)) {\n            println(\"\\\"$sentence\\\" is a palindrome.\")\n        } else {\n            println(\"\\\"$sentence\\\" is not a palindrome.\")\n        }\n    }\n}\n```"
  },
  {
    "task": "Design a function to evaluate if a string contains balanced parentheses.",
    "code": "```kotlin\nfun isBalancedParentheses(input: String): Boolean {\n    var balance = 0\n    for (char in input) {\n        when (char) {\n            '(' -> balance++\n            ')' -> {\n                if (balance == 0) return false\n                balance--\n            }\n        }\n    }\n    return balance == 0\n}\n```"
  },
  {
    "task": "Write a program that suggests a pet based on living conditions and preferences.",
    "code": "```kotlin\nfun suggestPet(hasLargeYard: Boolean, hasAllergies: Boolean, prefersLowMaintenance: Boolean): String {\n    return if (hasLargeYard && !hasAllergies && !prefersLowMaintenance) {\n        \"Dog\"\n    } else if (!hasLargeYard && hasAllergies) {\n        \"Fish\"\n    } else if (!hasLargeYard && !hasAllergies && prefersLowMaintenance) {\n        \"Cat\"\n    } else {\n        \"Hamster\"\n    }\n}\n\nfun main() {\n    println(\"Suggested pet: ${suggestPet(hasLargeYard = true, hasAllergies = false, prefersLowMaintenance = false)}\")\n}\n```"
  },
  {
    "task": "Create a routine that determines if a phone number is valid based on format.",
    "code": "```kotlin\nfun isValidPhoneNumber(phoneNumber: String): Boolean {\n    // A simple pattern assuming valid phone numbers are in the format (XXX) XXX-XXXX\n    // You can adjust the pattern as per the actual valid format you want to check.\n    val regex = Regex(\"\"\"^\\(\\d{3}\\) \\d{3}-\\d{4}$\"\"\")\n    return regex.matches(phoneNumber)\n}\n\nfun main() {\n    val testNumbers = listOf(\n        \"(123) 456-7890\",\n        \"123-456-7890\",\n        \"(123)456-7890\",\n        \"(123) 456-789\",\n        \"(123) 456-78901\"\n    )\n\n    for (number in testNumbers) {\n        if (isValidPhoneNumber(number)) {\n            println(\"$number is a valid phone number.\")\n        } else {\n            println(\"$number is not a valid phone number.\")\n        }\n    }\n}\n```"
  },
  {
    "task": "Develop a function that checks if two rectangles overlap.",
    "code": "```kotlin\ndata class Rectangle(val x1: Int, val y1: Int, val x2: Int, val y2: Int)\n\nfun doRectanglesOverlap(rect1: Rectangle, rect2: Rectangle): Boolean {\n    if (rect1.x1 >= rect2.x2 || rect2.x1 >= rect1.x2) {\n        return false\n    }\n    if (rect1.y1 >= rect2.y2 || rect2.y1 >= rect1.y2) {\n        return false\n    }\n    return true\n}\n```"
  },
  {
    "task": "Implement a program that chooses a beverage based on user input time.",
    "code": "```kotlin\nfun main() {\n    println(\"Enter the time in 24-hour format (e.g., 9 for 9 AM, 15 for 3 PM):\")\n    val time = readLine()?.toIntOrNull()\n\n    if (time != null) {\n        val beverage = when {\n            time in 6..11 -> \"Coffee\"\n            time in 12..16 -> \"Tea\"\n            time in 17..20 -> \"Juice\"\n            time in 21..23 || time in 0..5 -> \"Water\"\n            else -> \"Invalid time\"\n        }\n        println(\"Recommended beverage: $beverage\")\n    } else {\n        println(\"Invalid input. Please enter a valid number.\")\n    }\n}\n```"
  },
  {
    "task": "Design a script to determine if a URL is secure (HTTPS).",
    "code": "```kotlin\nfun isSecureUrl(url: String): Boolean {\n    return url.startsWith(\"https://\")\n}\n\nfun main() {\n    val url = \"https://example.com\"\n    if (isSecureUrl(url)) {\n        println(\"The URL is secure.\")\n    } else {\n        println(\"The URL is not secure.\")\n    }\n}\n```"
  },
  {
    "task": "Write a function that outputs different messages based on the input number's divisibility.",
    "code": "```kotlin\nfun checkDivisibility(number: Int): String {\n    return when {\n        number % 15 == 0 -> \"Divisible by 15\"\n        number % 5 == 0 -> \"Divisible by 5\"\n        number % 3 == 0 -> \"Divisible by 3\"\n        else -> \"Not divisible by 3, 5, or 15\"\n    }\n}\n```"
  },
  {
    "task": "Create a program to decide if a person should bring an umbrella based on the weather forecast.",
    "code": "```kotlin\nfun main() {\n    val weatherForecast = \"rainy\" // This can be \"sunny\", \"cloudy\", or \"rainy\"\n    \n    if (weatherForecast == \"rainy\") {\n        println(\"Bring an umbrella.\")\n    } else {\n        println(\"No need for an umbrella.\")\n    }\n}\n```"
  },
  {
    "task": "Develop a routine that checks if a chess move is valid.",
    "code": "```kotlin\nfun isValidMove(start: Pair<Int, Int>, end: Pair<Int, Int>, piece: String): Boolean {\n    val rowDiff = Math.abs(start.first - end.first)\n    val colDiff = Math.abs(start.second - end.second)\n\n    return when (piece.toLowerCase()) {\n        \"pawn\" -> (rowDiff == 1 && colDiff == 0) || (rowDiff == 1 && colDiff == 1)\n        \"rook\" -> (rowDiff == 0 || colDiff == 0)\n        \"knight\" -> (rowDiff == 2 && colDiff == 1) || (rowDiff == 1 && colDiff == 2)\n        \"bishop\" -> (rowDiff == colDiff)\n        \"queen\" -> (rowDiff == colDiff) || (rowDiff == 0 || colDiff == 0)\n        \"king\" -> (rowDiff <= 1 && colDiff <= 1)\n        else -> false\n    }\n}\n```"
  },
  {
    "task": "Implement a program that outputs the number of days in a given month.",
    "code": "```kotlin\nfun main() {\n    val month = 2 // Example month input\n    val year = 2020 // Example year input to check for leap year\n\n    val daysInMonth = when (month) {\n        1, 3, 5, 7, 8, 10, 12 -> 31\n        4, 6, 9, 11 -> 30\n        2 -> if (isLeapYear(year)) 29 else 28\n        else -> -1 // Invalid month\n    }\n\n    println(\"Number of days: $daysInMonth\")\n}\n\nfun isLeapYear(year: Int): Boolean {\n    return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)\n}\n```"
  },
  {
    "task": "Design a function that validates if a string is a valid hexadecimal number.",
    "code": "```kotlin\nfun isValidHexadecimal(input: String): Boolean {\n    if (input.isEmpty()) return false\n    for (char in input) {\n        if (!(char in '0'..'9' || char in 'a'..'f' || char in 'A'..'F')) {\n            return false\n        }\n    }\n    return true\n}\n```"
  },
  {
    "task": "Write a script that checks if a word is present in a list of predefined words.",
    "code": "```kotlin\nfun main() {\n    val predefinedWords = listOf(\"apple\", \"banana\", \"cherry\")\n    val wordToCheck = \"banana\"\n\n    if (wordToCheck in predefinedWords) {\n        println(\"$wordToCheck is in the list.\")\n    } else {\n        println(\"$wordToCheck is not in the list.\")\n    }\n}\n```"
  },
  {
    "task": "Create a routine to decide the correct tax bracket for a given income.",
    "code": "```kotlin\nfun determineTaxBracket(income: Double): String {\n    return when {\n        income < 10000 -> \"Low Income Tax Bracket\"\n        income < 50000 -> \"Middle Income Tax Bracket\"\n        income < 100000 -> \"Upper Middle Income Tax Bracket\"\n        else -> \"High Income Tax Bracket\"\n    }\n}\n\n// Example usage\nfun main() {\n    val income = 75000.0\n    println(\"The tax bracket for an income of $$income is: ${determineTaxBracket(income)}\")\n}\n```"
  },
  {
    "task": "Develop a function that determines if a point is within a triangle.",
    "code": "```kotlin\ndata class Point(val x: Double, val y: Double)\n\nfun isPointInTriangle(p: Point, p0: Point, p1: Point, p2: Point): Boolean {\n    fun sign(p1: Point, p2: Point, p3: Point): Double {\n        return (p1.x - p3.x) * (p2.y - p3.y) - (p2.x - p3.x) * (p1.y - p3.y)\n    }\n\n    val d1 = sign(p, p0, p1)\n    val d2 = sign(p, p1, p2)\n    val d3 = sign(p, p2, p0)\n\n    val hasNeg = (d1 < 0) || (d2 < 0) || (d3 < 0)\n    val hasPos = (d1 > 0) || (d2 > 0) || (d3 > 0)\n\n    return !(hasNeg && hasPos)\n}\n```"
  },
  {
    "task": "Implement a program that checks if a given string is a valid binary number.",
    "code": "```kotlin\nfun isValidBinaryNumber(input: String): Boolean {\n    for (char in input) {\n        if (char != '0' && char != '1') {\n            return false\n        }\n    }\n    return true\n}\n\nfun main() {\n    val testString = \"101010\"\n    if (isValidBinaryNumber(testString)) {\n        println(\"$testString is a valid binary number.\")\n    } else {\n        println(\"$testString is not a valid binary number.\")\n    }\n}\n```"
  },
  {
    "task": "Design a system to evaluate the risk level of an investment based on criteria.",
    "code": "```kotlin\nfun evaluateInvestmentRisk(investmentAmount: Double, marketVolatility: Double, investorExperience: Int): String {\n    return when {\n        investmentAmount > 100000 && marketVolatility > 0.7 -> \"High Risk\"\n        investmentAmount > 100000 && marketVolatility <= 0.7 && investorExperience < 5 -> \"Moderate Risk\"\n        investmentAmount <= 100000 && marketVolatility > 0.7 -> \"Moderate Risk\"\n        investmentAmount <= 100000 && marketVolatility <= 0.7 -> \"Low Risk\"\n        investorExperience >= 5 -> \"Low Risk\"\n        else -> \"Moderate Risk\"\n    }\n}\n\nfun main() {\n    val riskLevel = evaluateInvestmentRisk(120000.0, 0.8, 3)\n    println(\"The investment risk level is: $riskLevel\")\n}\n```"
  },
  {
    "task": "Write a program that suggests a vacation destination based on budget and preferences.",
    "code": "```kotlin\nfun suggestVacation(budget: Int, preference: String): String {\n    return when {\n        budget < 500 -> \"Staycation\"\n        budget in 500..1000 && preference == \"beach\" -> \"Local Beach Resort\"\n        budget in 500..1000 && preference == \"mountain\" -> \"Nearby Mountain Cabin\"\n        budget in 1001..3000 && preference == \"beach\" -> \"Caribbean Island\"\n        budget in 1001..3000 && preference == \"mountain\" -> \"Alpine Ski Resort\"\n        budget > 3000 && preference == \"beach\" -> \"Luxury Maldives Resort\"\n        budget > 3000 && preference == \"mountain\" -> \"Swiss Alps Vacation\"\n        else -> \"Unknown destination\"\n    }\n}\n\nfun main() {\n    val budget = 2000\n    val preference = \"beach\"\n    println(\"Suggested vacation: ${suggestVacation(budget, preference)}\")\n}\n```"
  },
  {
    "task": "Create a routine that checks if a username is already taken in a database.",
    "code": "```kotlin\nfun isUsernameTaken(username: String, database: List<String>): Boolean {\n    return if (database.contains(username)) {\n        true\n    } else {\n        false\n    }\n}\n```"
  },
  {
    "task": "Develop a function that determines if a string is a valid IPv4 address.",
    "code": "```kotlin\nfun isValidIPv4(ip: String): Boolean {\n    val parts = ip.split(\".\")\n    if (parts.size != 4) return false\n    for (part in parts) {\n        if (part.isEmpty() || part.length > 3) return false\n        if (!part.all { it.isDigit() }) return false\n        val num = part.toIntOrNull() ?: return false\n        if (num < 0 || num > 255) return false\n    }\n    return true\n}\n```"
  },
  {
    "task": "Implement a program to decide which transportation method is quickest based on distance.",
    "code": "```kotlin\nfun main() {\n    val distance = readLine()?.toDoubleOrNull() ?: return\n    val quickestMethod = when {\n        distance < 1 -> \"Walking\"\n        distance < 5 -> \"Bicycle\"\n        distance < 20 -> \"Car\"\n        else -> \"Train\"\n    }\n    println(\"The quickest method of transportation is: $quickestMethod\")\n}\n```"
  },
  {
    "task": "Design a script to validate if a number is a prime number.",
    "code": "```kotlin\nfun isPrime(number: Int): Boolean {\n    if (number <= 1) return false\n    if (number == 2) return true\n    if (number % 2 == 0) return false\n    for (i in 3..Math.sqrt(number.toDouble()).toInt() step 2) {\n        if (number % i == 0) return false\n    }\n    return true\n}\n\nfun main() {\n    val number = 19\n    if (isPrime(number)) {\n        println(\"$number is a prime number.\")\n    } else {\n        println(\"$number is not a prime number.\")\n    }\n}\n```"
  },
  {
    "task": "Write a function that checks if a number is divisible by another number without remainder.",
    "code": "```kotlin\nfun isDivisible(dividend: Int, divisor: Int): Boolean {\n    return if (divisor != 0) {\n        dividend % divisor == 0\n    } else {\n        false\n    }\n}\n```"
  },
  {
    "task": "Create a program that determines the type of a quadrilateral based on side lengths.",
    "code": "```kotlin\nfun determineQuadrilateralType(a: Int, b: Int, c: Int, d: Int): String {\n    return when {\n        a == b && b == c && c == d -> \"Square\"\n        a == c && b == d -> \"Rectangle\"\n        a == b && c == d -> \"Rhombus\"\n        (a == c && b == d) || (a == d && b == c) -> \"Parallelogram\"\n        else -> \"Irregular Quadrilateral\"\n    }\n}\n\nfun main() {\n    val side1 = 5\n    val side2 = 5\n    val side3 = 5\n    val side4 = 5\n    \n    val type = determineQuadrilateralType(side1, side2, side3, side4)\n    println(\"The quadrilateral is a $type.\")\n}\n```"
  },
  {
    "task": "Develop a routine to check if a sentence contains all letters of the alphabet.",
    "code": "```kotlin\nfun containsAllLetters(sentence: String): Boolean {\n    val alphabetSet = ('a'..'z').toSet()\n    val lowerCaseSentence = sentence.toLowerCase()\n    return alphabetSet.all { it in lowerCaseSentence }\n}\n\n// Example usage\nfun main() {\n    val sentence = \"The quick brown fox jumps over the lazy dog\"\n    println(containsAllLetters(sentence)) // Output: true\n}\n```"
  },
  {
    "task": "Implement a program that outputs the appropriate error message based on an error code.",
    "code": "```kotlin\nfun getErrorMessage(errorCode: Int): String {\n    return when (errorCode) {\n        404 -> \"Not Found\"\n        500 -> \"Internal Server Error\"\n        403 -> \"Forbidden\"\n        401 -> \"Unauthorized\"\n        else -> \"Unknown Error\"\n    }\n}\n\nfun main() {\n    val errorCodes = listOf(404, 500, 403, 401, 999)\n    for (code in errorCodes) {\n        println(\"Error $code: ${getErrorMessage(code)}\")\n    }\n}\n```"
  },
  {
    "task": "Design a function that categorizes a movie rating as G, PG, PG-13, or R.",
    "code": "```kotlin\nfun categorizeMovieRating(rating: Int): String {\n    return when {\n        rating >= 0 && rating <= 10 -> \"G\"\n        rating in 11..12 -> \"PG\"\n        rating in 13..16 -> \"PG-13\"\n        rating >= 17 -> \"R\"\n        else -> \"Invalid Rating\"\n    }\n}\n```"
  },
  {
    "task": "Write a script to check if a string is a valid Roman numeral.",
    "code": "```kotlin\nfun isValidRomanNumeral(s: String): Boolean {\n    val regex = Regex(\"^M{0,4}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})$\")\n    return regex.matches(s)\n}\n\nfun main() {\n    val testCases = listOf(\"III\", \"IV\", \"IX\", \"LVIII\", \"MCMXCIV\", \"MMXXIII\", \"INVALID\")\n    \n    testCases.forEach { testCase ->\n        if (isValidRomanNumeral(testCase)) {\n            println(\"$testCase is a valid Roman numeral.\")\n        } else {\n            println(\"$testCase is not a valid Roman numeral.\")\n        }\n    }\n}\n```"
  },
  {
    "task": "Create a routine that decides if a person can retire based on age and years worked.",
    "code": "```kotlin\nfun canRetire(age: Int, yearsWorked: Int): Boolean {\n    return (age >= 65 && yearsWorked >= 10) || yearsWorked >= 30\n}\n\nfun main() {\n    println(canRetire(64, 29)) // Output: false\n    println(canRetire(65, 10)) // Output: true\n    println(canRetire(70, 5))  // Output: false\n    println(canRetire(60, 30)) // Output: true\n}\n```"
  },
  {
    "task": "Develop a function that outputs a different emoji based on user mood input.",
    "code": "```kotlin\nfun getEmojiForMood(mood: String): String {\n    return when (mood.toLowerCase()) {\n        \"happy\" -> \"\ud83d\ude0a\"\n        \"sad\" -> \"\ud83d\ude22\"\n        \"angry\" -> \"\ud83d\ude20\"\n        \"excited\" -> \"\ud83d\ude06\"\n        \"bored\" -> \"\ud83d\ude10\"\n        else -> \"\ud83e\udd14\"\n    }\n}\n```"
  },
  {
    "task": "Implement a program that checks if a password meets security requirements.",
    "code": "```kotlin\nfun checkPasswordSecurity(password: String): Boolean {\n    if (password.length < 8) return false\n    if (!password.any { it.isUpperCase() }) return false\n    if (!password.any { it.isLowerCase() }) return false\n    if (!password.any { it.isDigit() }) return false\n    if (!password.any { \"!@#$%^&*()_+[]{}|;:,.<>?\".contains(it) }) return false\n    return true\n}\n\nfun main() {\n    val password = \"YourPassword123!\"\n    if (checkPasswordSecurity(password)) {\n        println(\"Password is secure.\")\n    } else {\n        println(\"Password does not meet security requirements.\")\n    }\n}\n```"
  },
  {
    "task": "Design a script to determine if a number is a palindrome when reversed.",
    "code": "```kotlin\nfun isPalindrome(number: Int): Boolean {\n    val original = number.toString()\n    val reversed = original.reversed()\n    return original == reversed\n}\n\nfun main() {\n    val number = 12321\n    if (isPalindrome(number)) {\n        println(\"$number is a palindrome.\")\n    } else {\n        println(\"$number is not a palindrome.\")\n    }\n}\n```"
  },
  {
    "task": "Write a function that evaluates if a given day is a holiday.",
    "code": "```kotlin\nfun isHoliday(day: String): Boolean {\n    return when (day.toLowerCase()) {\n        \"new year's day\", \"christmas\", \"independence day\" -> true\n        else -> false\n    }\n}\n```"
  },
  {
    "task": "Create a program to decide if a library book is overdue based on the due date.",
    "code": "```kotlin\nimport java.time.LocalDate\n\nfun isBookOverdue(dueDate: LocalDate, currentDate: LocalDate): Boolean {\n    return currentDate.isAfter(dueDate)\n}\n\nfun main() {\n    val dueDate = LocalDate.of(2023, 10, 1)\n    val currentDate = LocalDate.now()\n\n    if (isBookOverdue(dueDate, currentDate)) {\n        println(\"The book is overdue.\")\n    } else {\n        println(\"The book is not overdue.\")\n    }\n}\n```"
  },
  {
    "task": "Develop a routine that checks if a given year is part of a leap century.",
    "code": "```kotlin\nfun isLeapCentury(year: Int): Boolean {\n    return (year % 400 == 0)\n}\n\nfun main() {\n    val year = 2000\n    if (isLeapCentury(year)) {\n        println(\"$year is a leap century year.\")\n    } else {\n        println(\"$year is not a leap century year.\")\n    }\n}\n```"
  },
  {
    "task": "Implement a system to determine the correct category for a product based on user input.",
    "code": "```kotlin\nfun determineProductCategory(productType: String): String {\n    return when (productType.toLowerCase()) {\n        \"electronics\" -> \"Category: Electronics\"\n        \"clothing\" -> \"Category: Clothing\"\n        \"furniture\" -> \"Category: Furniture\"\n        \"food\" -> \"Category: Food\"\n        \"books\" -> \"Category: Books\"\n        else -> \"Category: Other\"\n    }\n}\n\nfun main() {\n    println(\"Enter the product type:\")\n    val userInput = readLine() ?: \"\"\n    val category = determineProductCategory(userInput)\n    println(category)\n}\n```"
  }
]