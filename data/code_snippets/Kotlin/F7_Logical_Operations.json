[
  {
    "task": "Create a function that takes two boolean inputs and returns true if both are true using logical AND.",
    "code": "```kotlin\nfun bothTrue(a: Boolean, b: Boolean): Boolean {\n    return a && b\n}\n```"
  },
  {
    "task": "Write a script to check if either of two given conditions are met using logical OR.",
    "code": "```kotlin\nfun checkConditions(condition1: Boolean, condition2: Boolean): Boolean {\n    return condition1 || condition2\n}\n\nfun main() {\n    val condition1 = true\n    val condition2 = false\n\n    val result = checkConditions(condition1, condition2)\n    println(\"At least one condition is met: $result\")\n}\n```"
  },
  {
    "task": "Develop a program that negates a boolean variable using logical NOT.",
    "code": "```kotlin\nfun main() {\n    val originalValue = true\n    val negatedValue = !originalValue\n    println(\"Original: $originalValue, Negated: $negatedValue\")\n}\n```"
  },
  {
    "task": "Implement a feature that determines if a number is within a specific range using logical operators.",
    "code": "```kotlin\nfun isNumberInRange(number: Int, lowerBound: Int, upperBound: Int): Boolean {\n    return number >= lowerBound && number <= upperBound\n}\n\nfun main() {\n    val number = 10\n    val lowerBound = 5\n    val upperBound = 15\n    val result = isNumberInRange(number, lowerBound, upperBound)\n    println(\"Is the number $number within the range $lowerBound to $upperBound? $result\")\n}\n```"
  },
  {
    "task": "Design a system that checks if a user has both read and write permissions using logical AND.",
    "code": "```kotlin\nfun hasReadAndWritePermissions(readPermission: Boolean, writePermission: Boolean): Boolean {\n    return readPermission && writePermission\n}\n\n// Example usage\nfun main() {\n    val readPermission = true\n    val writePermission = true\n    val hasPermissions = hasReadAndWritePermissions(readPermission, writePermission)\n    println(\"User has both read and write permissions: $hasPermissions\")\n}\n```"
  },
  {
    "task": "Write a function to verify if a string is neither empty nor null using logical NOT.",
    "code": "```kotlin\nfun isStringNotEmptyOrNull(input: String?): Boolean {\n    return !(input == null || input.isEmpty())\n}\n```"
  },
  {
    "task": "Create a conditional statement that executes a block of code if either of two expressions are true using logical OR.",
    "code": "```kotlin\nfun main() {\n    val condition1 = true\n    val condition2 = false\n\n    if (condition1 || condition2) {\n        println(\"At least one condition is true.\")\n    }\n}\n```"
  },
  {
    "task": "Build a program that inverts the truth value of a given condition using logical NOT.",
    "code": "```kotlin\nfun invertTruthValue(condition: Boolean): Boolean {\n    return !condition\n}\n\nfun main() {\n    val condition = true\n    val invertedCondition = invertTruthValue(condition)\n    println(\"Original: $condition, Inverted: $invertedCondition\")\n}\n```"
  },
  {
    "task": "Compose a function to return true if a list is not empty using logical NOT.",
    "code": "```kotlin\nfun isListNotEmpty(list: List<Any>): Boolean {\n    return !list.isEmpty()\n}\n```"
  },
  {
    "task": "Develop a filter that selects items from a collection only if they meet multiple criteria using logical AND.",
    "code": "```kotlin\ndata class Item(val name: String, val price: Double, val inStock: Boolean)\n\nfun filterItems(items: List<Item>): List<Item> {\n    return items.filter { item ->\n        item.price >= 10.0 && item.inStock\n    }\n}\n\nfun main() {\n    val items = listOf(\n        Item(\"Item1\", 15.0, true),\n        Item(\"Item2\", 8.0, true),\n        Item(\"Item3\", 12.0, false),\n        Item(\"Item4\", 20.0, true)\n    )\n    \n    val filteredItems = filterItems(items)\n    println(filteredItems)\n}\n```"
  },
  {
    "task": "Write a script that checks if a value is outside a given range using logical OR.",
    "code": "```kotlin\nfun isOutsideRange(value: Int, lowerBound: Int, upperBound: Int): Boolean {\n    return value < lowerBound || value > upperBound\n}\n\nfun main() {\n    val value = 10\n    val lowerBound = 5\n    val upperBound = 15\n    println(\"Is the value outside the range? ${isOutsideRange(value, lowerBound, upperBound)}\")\n}\n```"
  },
  {
    "task": "Create a small program to toggle a boolean flag using logical NOT.",
    "code": "```kotlin\nfun main() {\n    var flag = true\n    println(\"Initial flag value: $flag\")\n\n    // Toggle the flag using logical NOT\n    flag = !flag\n    println(\"Toggled flag value: $flag\")\n\n    // Toggle again\n    flag = !flag\n    println(\"Toggled again flag value: $flag\")\n}\n```"
  },
  {
    "task": "Implement a feature that evaluates if a username is both unique and valid using logical AND.",
    "code": "```kotlin\nfun isUsernameUniqueAndValid(username: String, existingUsernames: Set<String>): Boolean {\n    val isUnique = !existingUsernames.contains(username)\n    val isValid = username.matches(Regex(\"^[a-zA-Z0-9_]+$\"))\n    return isUnique && isValid\n}\n\n// Example usage\nfun main() {\n    val existingUsernames = setOf(\"user1\", \"user2\", \"user3\")\n    val usernameToCheck = \"new_user\"\n    val result = isUsernameUniqueAndValid(usernameToCheck, existingUsernames)\n    println(\"Is the username unique and valid? $result\")\n}\n```"
  },
  {
    "task": "Design a conditional to perform an action if neither of two flags are set using logical NOT.",
    "code": "```kotlin\nfun performActionIfNeitherFlagSet(flag1: Boolean, flag2: Boolean) {\n    if (!flag1 && !flag2) {\n        // Perform the action here\n    }\n}\n```"
  },
  {
    "task": "Write a function that returns true if at least one of multiple boolean inputs is true using logical OR.",
    "code": "```kotlin\nfun atLeastOneTrue(vararg inputs: Boolean): Boolean {\n    return inputs.any { it }\n}\n```"
  },
  {
    "task": "Create a loop that continues executing as long as two conditions are both false using logical NOT and AND.",
    "code": "```kotlin\nfun main() {\n    var condition1 = false\n    var condition2 = false\n\n    while (!(condition1 && condition2)) {\n        // Your loop logic here\n\n        // Example update of conditions to eventually exit the loop\n        condition1 = true\n        condition2 = true\n    }\n}\n```"
  },
  {
    "task": "Develop a sequence that checks if a character is either a vowel or a consonant using logical OR.",
    "code": "```kotlin\nfun isVowelOrConsonant(c: Char): String {\n    return if (c.toLowerCase() in listOf('a', 'e', 'i', 'o', 'u') || \n               (c.toLowerCase() in 'a'..'z' && c.toLowerCase() !in listOf('a', 'e', 'i', 'o', 'u'))) {\n        \"The character is a vowel or consonant.\"\n    } else {\n        \"The character is neither a vowel nor a consonant.\"\n    }\n}\n```"
  },
  {
    "task": "Implement a validation that ensures a password is both of minimum length and contains numbers using logical AND.",
    "code": "```kotlin\nfun isValidPassword(password: String): Boolean {\n    val minLength = 8\n    val containsNumber = password.any { it.isDigit() }\n    return password.length >= minLength && containsNumber\n}\n```"
  },
  {
    "task": "Compose a test to determine if a point is not within a circle using logical NOT.",
    "code": "```kotlin\nfun isPointOutsideCircle(pointX: Double, pointY: Double, circleCenterX: Double, circleCenterY: Double, radius: Double): Boolean {\n    val distanceSquared = (pointX - circleCenterX) * (pointX - circleCenterX) + (pointY - circleCenterY) * (pointY - circleCenterY)\n    val radiusSquared = radius * radius\n    return !(distanceSquared <= radiusSquared)\n}\n\n// Example usage\nfun main() {\n    val pointX = 5.0\n    val pointY = 5.0\n    val circleCenterX = 0.0\n    val circleCenterY = 0.0\n    val radius = 3.0\n\n    val result = isPointOutsideCircle(pointX, pointY, circleCenterX, circleCenterY, radius)\n    println(\"The point is outside the circle: $result\")\n}\n```"
  },
  {
    "task": "Write a function to decide if a user is either an admin or an editor using logical OR.",
    "code": "```kotlin\nfun isAdminOrEditor(userRole: String): Boolean {\n    return userRole == \"admin\" || userRole == \"editor\"\n}\n```"
  },
  {
    "task": "Create a conditional statement to trigger an alert if two sensors both detect motion using logical AND.",
    "code": "```kotlin\nfun checkSensors(sensor1: Boolean, sensor2: Boolean) {\n    if (sensor1 && sensor2) {\n        println(\"Alert: Both sensors detected motion!\")\n    }\n}\n```"
  },
  {
    "task": "Design a program to validate an email format and ensure it contains a domain using logical AND.",
    "code": "```kotlin\nfun isValidEmail(email: String): Boolean {\n    val atSymbolIndex = email.indexOf('@')\n    val dotIndex = email.lastIndexOf('.')\n    return atSymbolIndex > 0 && dotIndex > atSymbolIndex\n}\n\nfun main() {\n    val email = \"example@domain.com\"\n    if (isValidEmail(email)) {\n        println(\"Valid Email\")\n    } else {\n        println(\"Invalid Email\")\n    }\n}\n```"
  },
  {
    "task": "Develop a method to confirm that a transaction is neither fraudulent nor unauthorized using logical NOT.",
    "code": "```kotlin\nfun isTransactionValid(isFraudulent: Boolean, isUnauthorized: Boolean): Boolean {\n    return !(isFraudulent || isUnauthorized)\n}\n```"
  },
  {
    "task": "Write a function that outputs true if a file is either missing or empty using logical OR.",
    "code": "```kotlin\nimport java.io.File\n\nfun isFileMissingOrEmpty(filePath: String): Boolean {\n    val file = File(filePath)\n    return !file.exists() || file.length() == 0L\n}\n```"
  },
  {
    "task": "Implement a system to check if a student's grade is neither failing nor incomplete using logical NOT.",
    "code": "```kotlin\nfun isGradePassing(grade: String): Boolean {\n    return !(grade == \"Failing\" || grade == \"Incomplete\")\n}\n\nfun main() {\n    val grade = \"B\"\n    if (isGradePassing(grade)) {\n        println(\"The grade is passing.\")\n    } else {\n        println(\"The grade is either failing or incomplete.\")\n    }\n}\n```"
  },
  {
    "task": "Create a script that executes a command if a file is both readable and writable using logical AND.",
    "code": "```kotlin\nimport java.io.File\n\nfun executeCommandIfFileIsReadableAndWritable(filePath: String, command: () -> Unit) {\n    val file = File(filePath)\n    if (file.canRead() && file.canWrite()) {\n        command()\n    }\n}\n\nfun main() {\n    val filePath = \"path/to/your/file.txt\"\n    executeCommandIfFileIsReadableAndWritable(filePath) {\n        println(\"Executing command because the file is readable and writable.\")\n        // Place your command logic here\n    }\n}\n```"
  },
  {
    "task": "Compose a function to determine if a temperature is not within a safe operating range using logical NOT.",
    "code": "```kotlin\nfun isTemperatureUnsafe(temperature: Int): Boolean {\n    val safeMin = 0\n    val safeMax = 100\n    return !(temperature in safeMin..safeMax)\n}\n```"
  },
  {
    "task": "Design a check to see if a car is either out of fuel or needs maintenance using logical OR.",
    "code": "```kotlin\nfun needsAttention(isOutOfFuel: Boolean, needsMaintenance: Boolean): Boolean {\n    return isOutOfFuel || needsMaintenance\n}\n\nfun main() {\n    val isOutOfFuel = true\n    val needsMaintenance = false\n\n    if (needsAttention(isOutOfFuel, needsMaintenance)) {\n        println(\"The car needs attention.\")\n    } else {\n        println(\"The car is good to go.\")\n    }\n}\n```"
  },
  {
    "task": "Develop a routine that ensures a network connection is both stable and secure using logical AND.",
    "code": "```kotlin\nfun isConnectionStable(): Boolean {\n    // Placeholder logic for checking connection stability\n    return true\n}\n\nfun isConnectionSecure(): Boolean {\n    // Placeholder logic for checking connection security\n    return true\n}\n\nfun isConnectionStableAndSecure(): Boolean {\n    return isConnectionStable() && isConnectionSecure()\n}\n\nfun main() {\n    if (isConnectionStableAndSecure()) {\n        println(\"The network connection is stable and secure.\")\n    } else {\n        println(\"The network connection is not stable or not secure.\")\n    }\n}\n```"
  },
  {
    "task": "Write a conditional to print a message if a user is not logged in using logical NOT.",
    "code": "```kotlin\nfun checkUserStatus(isLoggedIn: Boolean) {\n    if (!isLoggedIn) {\n        println(\"User is not logged in.\")\n    }\n}\n\n// Example usage\ncheckUserStatus(false)\n```"
  },
  {
    "task": "Create a function that checks if a number is both even and positive using logical AND.",
    "code": "```kotlin\nfun isEvenAndPositive(number: Int): Boolean {\n    return number % 2 == 0 && number > 0\n}\n```"
  },
  {
    "task": "Implement a feature that turns off a device if neither of two switches are on using logical NOT.",
    "code": "```kotlin\nfun shouldTurnOffDevice(switch1: Boolean, switch2: Boolean): Boolean {\n    return !(switch1 || switch2)\n}\n\n// Example usage\nfun main() {\n    val switch1 = false\n    val switch2 = false\n    val isDeviceOff = shouldTurnOffDevice(switch1, switch2)\n    println(\"Turn off device: $isDeviceOff\")\n}\n```"
  },
  {
    "task": "Compose a script to alert if a server is either down or running slow using logical OR.",
    "code": "```kotlin\nfun main() {\n    val serverStatus = \"down\"\n    val serverResponseTime = 2000 // in milliseconds\n\n    if (serverStatus == \"down\" || serverResponseTime > 1000) {\n        println(\"Alert: The server is either down or running slow.\")\n    }\n}\n```"
  },
  {
    "task": "Design a validation method to ensure a form field is not empty using logical NOT.",
    "code": "```kotlin\nfun isFieldNotEmpty(input: String?): Boolean {\n    return !input.isNullOrEmpty()\n}\n```"
  },
  {
    "task": "Write a program to determine if two strings are both non-empty using logical AND.",
    "code": "```kotlin\nfun areBothStringsNonEmpty(string1: String, string2: String): Boolean {\n    return string1.isNotEmpty() && string2.isNotEmpty()\n}\n\nfun main() {\n    val string1 = \"Hello\"\n    val string2 = \"World\"\n    println(areBothStringsNonEmpty(string1, string2))  // Output: true\n}\n```"
  },
  {
    "task": "Create a function that checks if a number is either prime or a perfect square using logical OR.",
    "code": "```kotlin\nfun isPrimeOrPerfectSquare(number: Int): Boolean {\n    fun isPrime(n: Int): Boolean {\n        if (n <= 1) return false\n        for (i in 2..Math.sqrt(n.toDouble()).toInt()) {\n            if (n % i == 0) return false\n        }\n        return true\n    }\n\n    fun isPerfectSquare(n: Int): Boolean {\n        val sqrt = Math.sqrt(n.toDouble()).toInt()\n        return sqrt * sqrt == n\n    }\n\n    return isPrime(number) || isPerfectSquare(number)\n}\n```"
  },
  {
    "task": "Develop a script to ensure a user is either an adult or has parental consent using logical OR.",
    "code": "```kotlin\nfun hasAccess(age: Int, hasParentalConsent: Boolean): Boolean {\n    return age >= 18 || hasParentalConsent\n}\n\nfun main() {\n    val age = 16\n    val parentalConsent = true\n\n    if (hasAccess(age, parentalConsent)) {\n        println(\"Access granted.\")\n    } else {\n        println(\"Access denied.\")\n    }\n}\n```"
  },
  {
    "task": "Implement a condition to execute a task if a variable is neither zero nor negative using logical NOT.",
    "code": "```kotlin\nfun main() {\n    val number = 5 // Example number\n\n    if (!(number <= 0)) {\n        println(\"The number is positive and non-zero.\")\n        // Execute the task here\n    }\n}\n```"
  },
  {
    "task": "Compose a method to verify if a system is both up-to-date and functioning using logical AND.",
    "code": "```kotlin\nfun isSystemOperational(isUpToDate: Boolean, isFunctioning: Boolean): Boolean {\n    return isUpToDate && isFunctioning\n}\n```"
  },
  {
    "task": "Write a function that returns true if a list contains neither duplicates nor null values using logical NOT.",
    "code": "```kotlin\nfun hasNoDuplicatesOrNulls(list: List<Any?>): Boolean {\n    return !list.contains(null) && list.size == list.toSet().size\n}\n```"
  },
  {
    "task": "Create a script to perform an action if a temperature is either too high or too low using logical OR.",
    "code": "```kotlin\nfun checkTemperature(temperature: Int) {\n    val isTooHigh = temperature > 30\n    val isTooLow = temperature < 10\n\n    if (isTooHigh || isTooLow) {\n        println(\"Action required: Temperature is out of range!\")\n    }\n}\n\nfun main() {\n    val currentTemperature = 35\n    checkTemperature(currentTemperature)\n}\n```"
  },
  {
    "task": "Design a feature to toggle an option if a setting is not enabled using logical NOT.",
    "code": "```kotlin\nclass Settings {\n    var isOptionEnabled: Boolean = false\n    var isSettingEnabled: Boolean = false\n\n    fun toggleOptionIfSettingNotEnabled() {\n        if (!isSettingEnabled) {\n            isOptionEnabled = !isOptionEnabled\n        }\n    }\n}\n```"
  },
  {
    "task": "Develop a check to ensure a username is both available and meets length requirements using logical AND.",
    "code": "```kotlin\nfun isUsernameValid(username: String, isAvailable: Boolean): Boolean {\n    val minLength = 5\n    val maxLength = 15\n    return isAvailable && username.length in minLength..maxLength\n}\n\n// Example usage\nval username = \"user123\"\nval isAvailable = true\nval isValid = isUsernameValid(username, isAvailable)\nprintln(\"Is the username valid? $isValid\")\n```"
  },
  {
    "task": "Implement a function that returns true if a number is neither too large nor too small using logical NOT.",
    "code": "```kotlin\nfun isNumberInRange(number: Int, lowerBound: Int, upperBound: Int): Boolean {\n    return !(number < lowerBound || number > upperBound)\n}\n```"
  },
  {
    "task": "Write a conditional to print a warning if a disk is either full or nearly full using logical OR.",
    "code": "```kotlin\nfun checkDiskSpace(isFull: Boolean, isNearlyFull: Boolean) {\n    if (isFull || isNearlyFull) {\n        println(\"Warning: Disk is full or nearly full.\")\n    }\n}\n\n// Example usage\nfun main() {\n    checkDiskSpace(isFull = false, isNearlyFull = true)\n}\n```"
  },
  {
    "task": "Create a routine to validate that two dates are both within a valid range using logical AND.",
    "code": "```kotlin\nimport java.time.LocalDate\n\nfun areDatesWithinRange(date1: LocalDate, date2: LocalDate, startDate: LocalDate, endDate: LocalDate): Boolean {\n    return (date1.isAfter(startDate) || date1.isEqual(startDate)) &&\n           (date1.isBefore(endDate) || date1.isEqual(endDate)) &&\n           (date2.isAfter(startDate) || date2.isEqual(startDate)) &&\n           (date2.isBefore(endDate) || date2.isEqual(endDate))\n}\n\n// Example usage:\nfun main() {\n    val startDate = LocalDate.of(2023, 1, 1)\n    val endDate = LocalDate.of(2023, 12, 31)\n    val date1 = LocalDate.of(2023, 5, 15)\n    val date2 = LocalDate.of(2023, 11, 20)\n\n    val result = areDatesWithinRange(date1, date2, startDate, endDate)\n    println(\"Both dates within range: $result\")\n}\n```"
  },
  {
    "task": "Compose a function to decide if a person is either a minor or a senior using logical OR.",
    "code": "```kotlin\nfun isMinorOrSenior(age: Int): Boolean {\n    return age < 18 || age >= 65\n}\n```"
  },
  {
    "task": "Design a script to execute a task if a condition is not met using logical NOT.",
    "code": "```kotlin\nfun main() {\n    val condition = false\n\n    if (!condition) {\n        executeTask()\n    }\n}\n\nfun executeTask() {\n    println(\"Task executed because condition was not met.\")\n}\n```"
  },
  {
    "task": "Develop a program to verify if a process is neither running nor scheduled using logical NOT.",
    "code": "```kotlin\nfun isProcessNeitherRunningNorScheduled(isRunning: Boolean, isScheduled: Boolean): Boolean {\n    return !isRunning && !isScheduled\n}\n\nfun main() {\n    val isRunning = false\n    val isScheduled = false\n    \n    val result = isProcessNeitherRunningNorScheduled(isRunning, isScheduled)\n    println(\"Is the process neither running nor scheduled? $result\")\n}\n```"
  },
  {
    "task": "Implement a feature that confirms a file is both accessible and not locked using logical AND.",
    "code": "```kotlin\nimport java.io.File\n\nfun isFileAccessibleAndNotLocked(filePath: String): Boolean {\n    val file = File(filePath)\n    return file.exists() && file.canRead() && file.canWrite()\n}\n\n// Example usage\nfun main() {\n    val filePath = \"example.txt\"\n    if (isFileAccessibleAndNotLocked(filePath)) {\n        println(\"The file is accessible and not locked.\")\n    } else {\n        println(\"The file is either not accessible or locked.\")\n    }\n}\n```"
  },
  {
    "task": "Write a script to check if a device is either offline or in maintenance mode using logical OR.",
    "code": "```kotlin\nfun isDeviceUnavailable(isOffline: Boolean, isInMaintenance: Boolean): Boolean {\n    return isOffline || isInMaintenance\n}\n\nfun main() {\n    val isOffline = true\n    val isInMaintenance = false\n\n    if (isDeviceUnavailable(isOffline, isInMaintenance)) {\n        println(\"The device is unavailable.\")\n    } else {\n        println(\"The device is available.\")\n    }\n}\n```"
  },
  {
    "task": "Create a function to ensure a password is both complex and unique using logical AND.",
    "code": "```kotlin\nfun isPasswordComplexAndUnique(password: String, existingPasswords: Set<String>): Boolean {\n    val isComplex = password.length >= 8 && password.any { it.isDigit() } && password.any { it.isUpperCase() }\n    val isUnique = password !in existingPasswords\n    return isComplex && isUnique\n}\n```"
  },
  {
    "task": "Design a validation that ensures a value is not negative using logical NOT.",
    "code": "```kotlin\nfun isNonNegative(value: Int): Boolean {\n    return !(value < 0)\n}\n```"
  },
  {
    "task": "Develop a check to see if a user has either exceeded their quota or is nearing it using logical OR.",
    "code": "```kotlin\nfun hasExceededOrNearingQuota(usedQuota: Int, quotaLimit: Int, nearingThreshold: Int): Boolean {\n    return usedQuota >= quotaLimit || usedQuota >= quotaLimit - nearingThreshold\n}\n\n// Example usage\nfun main() {\n    val usedQuota = 90\n    val quotaLimit = 100\n    val nearingThreshold = 10\n\n    val result = hasExceededOrNearingQuota(usedQuota, quotaLimit, nearingThreshold)\n    println(\"Has user exceeded or nearing quota: $result\")\n}\n```"
  },
  {
    "task": "Implement a routine to confirm that a user is both authenticated and authorized using logical AND.",
    "code": "```kotlin\nfun isUserAuthenticatedAndAuthorized(isAuthenticated: Boolean, isAuthorized: Boolean): Boolean {\n    return isAuthenticated && isAuthorized\n}\n```"
  },
  {
    "task": "Compose a function to determine if a light is either on or blinking using logical OR.",
    "code": "```kotlin\nfun isLightOnOrBlinking(isOn: Boolean, isBlinking: Boolean): Boolean {\n    return isOn || isBlinking\n}\n```"
  },
  {
    "task": "Write a script that executes a command if a network connection is neither weak nor unstable using logical NOT.",
    "code": "```kotlin\nfun executeCommandIfConnectionStable(isWeak: Boolean, isUnstable: Boolean) {\n    if (!isWeak && !isUnstable) {\n        // Execute the command\n        println(\"Executing command as connection is stable\")\n    } else {\n        println(\"Connection is either weak or unstable\")\n    }\n}\n\nfun main() {\n    val isWeak = false\n    val isUnstable = false\n    executeCommandIfConnectionStable(isWeak, isUnstable)\n}\n```"
  },
  {
    "task": "Create a program to verify that a sensor is both calibrated and active using logical AND.",
    "code": "```kotlin\nfun main() {\n    val isCalibrated = true\n    val isActive = true\n\n    if (isCalibrated && isActive) {\n        println(\"The sensor is both calibrated and active.\")\n    } else {\n        println(\"The sensor is not both calibrated and active.\")\n    }\n}\n```"
  },
  {
    "task": "Design a feature to alert if a process is either overdue or incomplete using logical OR.",
    "code": "```kotlin\nfun alertIfOverdueOrIncomplete(isOverdue: Boolean, isIncomplete: Boolean): Boolean {\n    return isOverdue || isIncomplete\n}\n\n// Example usage\nfun main() {\n    val processOverdue = true\n    val processIncomplete = false\n    val alert = alertIfOverdueOrIncomplete(processOverdue, processIncomplete)\n    println(\"Alert: $alert\") // Output: Alert: true\n}\n```"
  },
  {
    "task": "Develop a script to check if a person is neither a guest nor a temporary user using logical NOT.",
    "code": "```kotlin\nfun isPermanentUser(isGuest: Boolean, isTemporaryUser: Boolean): Boolean {\n    return !isGuest && !isTemporaryUser\n}\n\nfun main() {\n    val isGuest = false\n    val isTemporaryUser = false\n    val result = isPermanentUser(isGuest, isTemporaryUser)\n    println(\"Is the person a permanent user? $result\")\n}\n```"
  },
  {
    "task": "Implement a function to toggle a light if a switch is not pressed using logical NOT.",
    "code": "```kotlin\nfun toggleLight(switchPressed: Boolean): Boolean {\n    return !switchPressed\n}\n```"
  },
  {
    "task": "Write a conditional to trigger an event if a file is either corrupted or missing using logical OR.",
    "code": "```kotlin\nfun checkFileStatus(isCorrupted: Boolean, isMissing: Boolean) {\n    if (isCorrupted || isMissing) {\n        triggerEvent()\n    }\n}\n\nfun triggerEvent() {\n    println(\"Event triggered due to file issue.\")\n}\n```"
  },
  {
    "task": "Create a routine that verifies if a vehicle is both insured and registered using logical AND.",
    "code": "```kotlin\nfun isVehicleInsuredAndRegistered(isInsured: Boolean, isRegistered: Boolean): Boolean {\n    return isInsured && isRegistered\n}\n```"
  },
  {
    "task": "Compose a method to check if an account is either overdrawn or flagged using logical OR.",
    "code": "```kotlin\nfun isAccountOverdrawnOrFlagged(accountBalance: Double, isFlagged: Boolean): Boolean {\n    return accountBalance < 0.0 || isFlagged\n}\n```"
  },
  {
    "task": "Design a program to ensure an application is both installed and updated using logical AND.",
    "code": "```kotlin\nfun isApplicationReady(installed: Boolean, updated: Boolean): Boolean {\n    return installed && updated\n}\n\nfun main() {\n    val installed = true  // Example value\n    val updated = true    // Example value\n\n    if (isApplicationReady(installed, updated)) {\n        println(\"Application is ready to use.\")\n    } else {\n        println(\"Application is not ready. Please check installation and updates.\")\n    }\n}\n```"
  },
  {
    "task": "Develop a function that returns true if a number is neither divisible by 3 nor 5 using logical NOT.",
    "code": "```kotlin\nfun isNeitherDivisibleBy3Nor5(number: Int): Boolean {\n    return !(number % 3 == 0 || number % 5 == 0)\n}\n```"
  },
  {
    "task": "Implement a script that alerts if a device is either overheating or underperforming using logical OR.",
    "code": "```kotlin\nfun checkDeviceStatus(temperature: Double, performance: Double) {\n    val overheatingThreshold = 75.0\n    val underperformingThreshold = 50.0\n\n    if (temperature > overheatingThreshold || performance < underperformingThreshold) {\n        println(\"Alert: Device is either overheating or underperforming.\")\n    } else {\n        println(\"Device is operating normally.\")\n    }\n}\n\nfun main() {\n    val temperature = 80.0\n    val performance = 45.0\n    checkDeviceStatus(temperature, performance)\n}\n```"
  },
  {
    "task": "Write a function to validate that a directory is both writable and not full using logical AND.",
    "code": "```kotlin\nimport java.io.File\n\nfun isDirectoryWritableAndNotFull(directoryPath: String): Boolean {\n    val directory = File(directoryPath)\n    val writable = directory.canWrite()\n    val notFull = directory.usableSpace > 0\n    return writable && notFull\n}\n```"
  },
  {
    "task": "Create a conditional statement that executes if a button is not clicked using logical NOT.",
    "code": "```kotlin\nval isButtonClicked = false\n\nif (!isButtonClicked) {\n    // Execute the desired code here\n    println(\"Button is not clicked.\")\n}\n```"
  },
  {
    "task": "Design a check to ensure a transaction is both verified and complete using logical AND.",
    "code": "```kotlin\nfun isTransactionValid(isVerified: Boolean, isComplete: Boolean): Boolean {\n    return isVerified && isComplete\n}\n```"
  },
  {
    "task": "Develop a routine to determine if a string is either uppercase or lowercase using logical OR.",
    "code": "```kotlin\nfun isUpperOrLowerCase(input: String): Boolean {\n    return input.all { it.isUpperCase() } || input.all { it.isLowerCase() }\n}\n```"
  },
  {
    "task": "Implement a feature to execute a task if a variable is neither null nor undefined using logical NOT.",
    "code": "```kotlin\nfun executeTaskIfNotNullOrUndefined(variable: Any?) {\n    if (variable != null) {\n        // Execute the task here\n        println(\"Executing task as variable is neither null nor undefined.\")\n    }\n}\n\n// Example usage\nfun main() {\n    val testVariable: Any? = \"Test\"\n    executeTaskIfNotNullOrUndefined(testVariable)\n}\n```"
  },
  {
    "task": "Compose a function to return true if a date is either today or tomorrow using logical OR.",
    "code": "```kotlin\nimport java.time.LocalDate\n\nfun isTodayOrTomorrow(date: LocalDate): Boolean {\n    val today = LocalDate.now()\n    val tomorrow = today.plusDays(1)\n    return date == today || date == tomorrow\n}\n```"
  },
  {
    "task": "Write a script to confirm that a system is both running and not in maintenance mode using logical AND.",
    "code": "```kotlin\nfun main() {\n    val isSystemRunning = true\n    val isInMaintenanceMode = false\n\n    if (isSystemRunning && !isInMaintenanceMode) {\n        println(\"System is running and not in maintenance mode.\")\n    } else {\n        println(\"System check failed.\")\n    }\n}\n```"
  },
  {
    "task": "Create a program to verify if a text field is neither empty nor exceeds character limit using logical NOT.",
    "code": "```kotlin\nfun isTextFieldValid(text: String, maxLength: Int): Boolean {\n    return !(text.isEmpty() || text.length > maxLength)\n}\n\nfun main() {\n    val textField = \"Hello, World!\"\n    val maxLength = 20\n    val isValid = isTextFieldValid(textField, maxLength)\n    println(\"Is the text field valid? $isValid\")\n}\n```"
  },
  {
    "task": "Design a feature that checks if a user has either admin privileges or editor rights using logical OR.",
    "code": "```kotlin\nfun hasAccess(isAdmin: Boolean, isEditor: Boolean): Boolean {\n    return isAdmin || isEditor\n}\n\n// Example usage:\nfun main() {\n    val userIsAdmin = true\n    val userIsEditor = false\n\n    if (hasAccess(userIsAdmin, userIsEditor)) {\n        println(\"User has access.\")\n    } else {\n        println(\"User does not have access.\")\n    }\n}\n```"
  },
  {
    "task": "Develop a script to ensure a file is both present and not empty using logical AND.",
    "code": "```kotlin\nimport java.io.File\n\nfun isFilePresentAndNotEmpty(filePath: String): Boolean {\n    val file = File(filePath)\n    return file.exists() && file.length() > 0\n}\n\nfun main() {\n    val filePath = \"path/to/your/file.txt\"\n    if (isFilePresentAndNotEmpty(filePath)) {\n        println(\"The file is present and not empty.\")\n    } else {\n        println(\"The file is either missing or empty.\")\n    }\n}\n```"
  },
  {
    "task": "Implement a condition to execute a command if a setting is not active using logical NOT.",
    "code": "```kotlin\nfun executeIfSettingNotActive(isSettingActive: Boolean) {\n    if (!isSettingActive) {\n        // Command to execute\n        println(\"Executing command because setting is not active.\")\n    }\n}\n\n// Example usage\nfun main() {\n    val settingActive = false\n    executeIfSettingNotActive(settingActive)\n}\n```"
  },
  {
    "task": "Compose a method to decide if a person is either eligible or exempt using logical OR.",
    "code": "```kotlin\nfun isEligibleOrExempt(isEligible: Boolean, isExempt: Boolean): Boolean {\n    return isEligible || isExempt\n}\n```"
  },
  {
    "task": "Write a function that returns true if a number is both greater than zero and less than ten using logical AND.",
    "code": "```kotlin\nfun isNumberInRange(number: Int): Boolean {\n    return number > 0 && number < 10\n}\n```"
  },
  {
    "task": "Create a loop to continue as long as a condition is either true or false using logical OR.",
    "code": "```kotlin\nfun main() {\n    var condition1 = true\n    var condition2 = false\n\n    while (condition1 || condition2) {\n        // Perform some operations\n\n        // Change the conditions to eventually exit the loop\n        condition1 = false\n        condition2 = false\n    }\n}\n```"
  },
  {
    "task": "Design a program to verify if an account is neither inactive nor suspended using logical NOT.",
    "code": "```kotlin\nfun isAccountActive(isInactive: Boolean, isSuspended: Boolean): Boolean {\n    return !(isInactive || isSuspended)\n}\n\nfun main() {\n    val isInactive = false\n    val isSuspended = false\n    \n    if (isAccountActive(isInactive, isSuspended)) {\n        println(\"The account is active.\")\n    } else {\n        println(\"The account is not active.\")\n    }\n}\n```"
  },
  {
    "task": "Develop a feature to confirm that a document is both signed and verified using logical AND.",
    "code": "```kotlin\nfun isDocumentValid(isSigned: Boolean, isVerified: Boolean): Boolean {\n    return isSigned && isVerified\n}\n```"
  },
  {
    "task": "Implement a script to alert if a network is either congested or down using logical OR.",
    "code": "```kotlin\nfun isNetworkCongested(): Boolean {\n    // Placeholder implementation\n    return false\n}\n\nfun isNetworkDown(): Boolean {\n    // Placeholder implementation\n    return true\n}\n\nfun alertNetworkStatus() {\n    if (isNetworkCongested() || isNetworkDown()) {\n        println(\"Alert: Network is either congested or down.\")\n    } else {\n        println(\"Network is operating normally.\")\n    }\n}\n\nfun main() {\n    alertNetworkStatus()\n}\n```"
  },
  {
    "task": "Write a function to ensure a list is both sorted and unique using logical AND.",
    "code": "```kotlin\nfun ensureSortedUnique(list: List<Int>): List<Int> {\n    return list.sorted().distinct()\n}\n\nfun main() {\n    val numbers = listOf(3, 1, 2, 3, 4, 1, 5)\n    val result = ensureSortedUnique(numbers)\n    println(result) // Output: [1, 2, 3, 4, 5]\n}\n```"
  },
  {
    "task": "Create a conditional statement to execute if a task is not completed using logical NOT.",
    "code": "```kotlin\nval isTaskCompleted = false\n\nif (!isTaskCompleted) {\n    println(\"Task is not completed.\")\n}\n```"
  },
  {
    "task": "Design a check to determine if a component is either faulty or missing using logical OR.",
    "code": "```kotlin\nfun isComponentFaultyOrMissing(isFaulty: Boolean, isMissing: Boolean): Boolean {\n    return isFaulty || isMissing\n}\n\n// Example usage\nfun main() {\n    val faulty = true\n    val missing = false\n    println(\"Component status: ${isComponentFaultyOrMissing(faulty, missing)}\") // Output: Component status: true\n}\n```"
  },
  {
    "task": "Develop a routine to verify if a user is both online and available using logical AND.",
    "code": "```kotlin\nfun isUserOnlineAndAvailable(isOnline: Boolean, isAvailable: Boolean): Boolean {\n    return isOnline && isAvailable\n}\n```"
  },
  {
    "task": "Implement a feature to toggle an alert if a condition is not satisfied using logical NOT.",
    "code": "```kotlin\nfun toggleAlert(condition: Boolean): Boolean {\n    return !condition\n}\n\nfun main() {\n    val condition = false\n    val alert = toggleAlert(condition)\n    println(\"Alert is ${if (alert) \"ON\" else \"OFF\"}\")\n}\n```"
  },
  {
    "task": "Compose a function to return true if a transaction is either pending or failed using logical OR.",
    "code": "```kotlin\nfun isTransactionPendingOrFailed(status: String): Boolean {\n    return status == \"pending\" || status == \"failed\"\n}\n```"
  },
  {
    "task": "Write a script to ensure a configuration is both correct and active using logical AND.",
    "code": "```kotlin\nfun isConfigurationValidAndActive(isCorrect: Boolean, isActive: Boolean): Boolean {\n    return isCorrect && isActive\n}\n\nfun main() {\n    val isCorrect = true  // Example value\n    val isActive = true   // Example value\n\n    val isValidAndActive = isConfigurationValidAndActive(isCorrect, isActive)\n    println(\"Configuration is valid and active: $isValidAndActive\")\n}\n```"
  }
]