[
  {
    "task": "Write a program that prints numbers from 1 to 10 using a for loop.",
    "code": "```kotlin\nfun main() {\n    for (i in 1..10) {\n        println(i)\n    }\n}\n```"
  },
  {
    "task": "Create a loop that iterates over an array of names and prints each name.",
    "code": "```kotlin\nfun main() {\n    val names = arrayOf(\"Alice\", \"Bob\", \"Charlie\", \"Diana\")\n    for (name in names) {\n        println(name)\n    }\n}\n```"
  },
  {
    "task": "Design a for loop to calculate the factorial of a given number.",
    "code": "```kotlin\nfun calculateFactorial(number: Int): Long {\n    var factorial: Long = 1\n    for (i in 1..number) {\n        factorial *= i\n    }\n    return factorial\n}\n\n// Example usage\nfun main() {\n    val number = 5\n    println(\"Factorial of $number is: ${calculateFactorial(number)}\")\n}\n```"
  },
  {
    "task": "Implement a program that uses a for loop to sum all even numbers between 1 and 100.",
    "code": "```kotlin\nfun main() {\n    var sum = 0\n    for (i in 1..100) {\n        if (i % 2 == 0) {\n            sum += i\n        }\n    }\n    println(\"Sum of even numbers between 1 and 100 is: $sum\")\n}\n```"
  },
  {
    "task": "Use a for loop to generate and print the Fibonacci sequence up to 20 terms.",
    "code": "```kotlin\nfun main() {\n    val nTerms = 20\n    var firstTerm = 0\n    var secondTerm = 1\n\n    for (i in 1..nTerms) {\n        println(firstTerm)\n        val nextTerm = firstTerm + secondTerm\n        firstTerm = secondTerm\n        secondTerm = nextTerm\n    }\n}\n```"
  },
  {
    "task": "Construct a for loop that prints the multiplication table for a given number.",
    "code": "```kotlin\nfun printMultiplicationTable(number: Int) {\n    for (i in 1..10) {\n        println(\"$number x $i = ${number * i}\")\n    }\n}\n\n// Example usage\nfun main() {\n    printMultiplicationTable(5)\n}\n```"
  },
  {
    "task": "Write code to iterate through a list of student grades and print only those above a certain threshold.",
    "code": "```kotlin\nfun main() {\n    val studentGrades = listOf(85, 92, 76, 81, 95, 67)\n    val threshold = 80\n\n    for (grade in studentGrades) {\n        if (grade > threshold) {\n            println(grade)\n        }\n    }\n}\n```"
  },
  {
    "task": "Create a for loop that appends the square of numbers 1 to 10 to a list.",
    "code": "```kotlin\nfun main() {\n    val squares = mutableListOf<Int>()\n    for (i in 1..10) {\n        squares.add(i * i)\n    }\n    println(squares)\n}\n```"
  },
  {
    "task": "Develop a for loop that reverses a given string.",
    "code": "```kotlin\nfun reverseString(input: String): String {\n    var reversed = \"\"\n    for (i in input.length - 1 downTo 0) {\n        reversed += input[i]\n    }\n    return reversed\n}\n\n// Example usage:\nval original = \"Hello, World!\"\nval reversed = reverseString(original)\nprintln(reversed)\n```"
  },
  {
    "task": "Build a program that uses a for loop to print all elements in a 2D matrix.",
    "code": "```kotlin\nfun main() {\n    val matrix = arrayOf(\n        arrayOf(1, 2, 3),\n        arrayOf(4, 5, 6),\n        arrayOf(7, 8, 9)\n    )\n\n    for (row in matrix) {\n        for (element in row) {\n            println(element)\n        }\n    }\n}\n```"
  },
  {
    "task": "Use a for loop to find the maximum value in an array of integers.",
    "code": "```kotlin\nfun findMaxValue(arr: IntArray): Int {\n    var max = arr[0]\n    for (num in arr) {\n        if (num > max) {\n            max = num\n        }\n    }\n    return max\n}\n\nfun main() {\n    val numbers = intArrayOf(3, 5, 1, 8, 2)\n    val maxValue = findMaxValue(numbers)\n    println(\"The maximum value is $maxValue\")\n}\n```"
  },
  {
    "task": "Write a program that uses a for loop to print the characters of a string, one per line.",
    "code": "```kotlin\nfun main() {\n    val text = \"YourStringHere\"\n    for (char in text) {\n        println(char)\n    }\n}\n```"
  },
  {
    "task": "Create a for loop that counts the number of vowels in a given sentence.",
    "code": "```kotlin\nfun countVowels(sentence: String): Int {\n    val vowels = setOf('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n    var count = 0\n    for (char in sentence) {\n        if (char in vowels) {\n            count++\n        }\n    }\n    return count\n}\n\n// Example usage\nval sentence = \"The quick brown fox jumps over the lazy dog.\"\nval numberOfVowels = countVowels(sentence)\nprintln(\"Number of vowels: $numberOfVowels\")\n```"
  },
  {
    "task": "Implement a for loop to check if a number is prime by testing divisibility.",
    "code": "```kotlin\nfun isPrime(number: Int): Boolean {\n    if (number <= 1) return false\n    for (i in 2 until number) {\n        if (number % i == 0) return false\n    }\n    return true\n}\n\n// Example usage\nfun main() {\n    val num = 29\n    println(\"Is $num a prime number? ${isPrime(num)}\")\n}\n```"
  },
  {
    "task": "Design a for loop that prints a pyramid pattern of asterisks with a given height.",
    "code": "```kotlin\nfun printPyramid(height: Int) {\n    for (i in 1..height) {\n        for (j in 1..(height - i)) {\n            print(\" \")\n        }\n        for (k in 1..(2 * i - 1)) {\n            print(\"*\")\n        }\n        println()\n    }\n}\n\nfun main() {\n    val height = 5\n    printPyramid(height)\n}\n```"
  },
  {
    "task": "Write a program that uses a for loop to calculate the sum of digits of a number.",
    "code": "```kotlin\nfun sumOfDigits(number: Int): Int {\n    var sum = 0\n    val numString = number.toString()\n    for (char in numString) {\n        sum += char.toString().toInt()\n    }\n    return sum\n}\n\nfun main() {\n    val number = 12345\n    val result = sumOfDigits(number)\n    println(\"The sum of the digits is: $result\")\n}\n```"
  },
  {
    "task": "Construct a for loop to flatten a list of lists into a single list.",
    "code": "```kotlin\nfun flattenList(listOfLists: List<List<Int>>): List<Int> {\n    val flattenedList = mutableListOf<Int>()\n    for (list in listOfLists) {\n        for (item in list) {\n            flattenedList.add(item)\n        }\n    }\n    return flattenedList\n}\n```"
  },
  {
    "task": "Use a for loop to generate a list of random numbers and print them.",
    "code": "```kotlin\nimport kotlin.random.Random\n\nfun main() {\n    val randomNumbers = mutableListOf<Int>()\n    for (i in 1..10) {\n        randomNumbers.add(Random.nextInt(100))\n    }\n    println(randomNumbers)\n}\n```"
  },
  {
    "task": "Create a for loop that iterates through a dictionary and prints its keys and values.",
    "code": "```kotlin\nfun main() {\n    val dictionary = mapOf(\"key1\" to \"value1\", \"key2\" to \"value2\", \"key3\" to \"value3\")\n    for ((key, value) in dictionary) {\n        println(\"Key: $key, Value: $value\")\n    }\n}\n```"
  },
  {
    "task": "Develop a for loop that counts down from 10 to 1 and prints each number.",
    "code": "```kotlin\nfun main() {\n    for (i in 10 downTo 1) {\n        println(i)\n    }\n}\n```"
  },
  {
    "task": "Write code to multiply each element in an array by 2 using a for loop.",
    "code": "```kotlin\nfun main() {\n    val array = arrayOf(1, 2, 3, 4, 5)\n    for (i in array.indices) {\n        array[i] *= 2\n    }\n    println(array.joinToString(\", \"))\n}\n```"
  },
  {
    "task": "Create a for loop that calculates the average of numbers in a list.",
    "code": "```kotlin\nfun calculateAverage(numbers: List<Double>): Double {\n    var sum = 0.0\n    for (number in numbers) {\n        sum += number\n    }\n    return if (numbers.isNotEmpty()) sum / numbers.size else 0.0\n}\n```"
  },
  {
    "task": "Implement a for loop to find duplicate elements in an array.",
    "code": "```kotlin\nfun findDuplicates(arr: Array<Int>): Set<Int> {\n    val duplicates = mutableSetOf<Int>()\n    val seen = mutableSetOf<Int>()\n    for (element in arr) {\n        if (!seen.add(element)) {\n            duplicates.add(element)\n        }\n    }\n    return duplicates\n}\n\nfun main() {\n    val array = arrayOf(1, 2, 3, 4, 5, 1, 2, 6)\n    val duplicates = findDuplicates(array)\n    println(\"Duplicate elements: $duplicates\")\n}\n```"
  },
  {
    "task": "Design a for loop that removes all occurrences of a specific element from a list.",
    "code": "```kotlin\nfun removeElementFromList(inputList: MutableList<Int>, elementToRemove: Int): MutableList<Int> {\n    val resultList = mutableListOf<Int>()\n    for (element in inputList) {\n        if (element != elementToRemove) {\n            resultList.add(element)\n        }\n    }\n    return resultList\n}\n\n// Example usage\nval list = mutableListOf(1, 2, 3, 4, 2, 5)\nval updatedList = removeElementFromList(list, 2)\nprintln(updatedList) // Output: [1, 3, 4, 5]\n```"
  },
  {
    "task": "Use a for loop to simulate rolling a dice 100 times and count the occurrences of each face.",
    "code": "```kotlin\nfun main() {\n    val occurrences = IntArray(6)\n\n    for (i in 1..100) {\n        val roll = (1..6).random()\n        occurrences[roll - 1]++\n    }\n\n    occurrences.forEachIndexed { index, count ->\n        println(\"Face ${index + 1}: $count times\")\n    }\n}\n```"
  },
  {
    "task": "Write a for loop that prints all the prime numbers between 1 and 50.",
    "code": "```kotlin\nfun isPrime(num: Int): Boolean {\n    if (num <= 1) return false\n    for (i in 2..Math.sqrt(num.toDouble()).toInt()) {\n        if (num % i == 0) return false\n    }\n    return true\n}\n\nfun main() {\n    for (i in 1..50) {\n        if (isPrime(i)) {\n            println(i)\n        }\n    }\n}\n```"
  },
  {
    "task": "Develop a for loop that extracts all the uppercase letters from a string.",
    "code": "```kotlin\nfun extractUppercase(input: String): String {\n    var result = \"\"\n    for (char in input) {\n        if (char.isUpperCase()) {\n            result += char\n        }\n    }\n    return result\n}\n```"
  },
  {
    "task": "Create a for loop that checks if a list is sorted in ascending order.",
    "code": "```kotlin\nfun isSortedAscending(list: List<Int>): Boolean {\n    for (i in 0 until list.size - 1) {\n        if (list[i] > list[i + 1]) {\n            return false\n        }\n    }\n    return true\n}\n```"
  },
  {
    "task": "Implement a for loop to generate a list of the first 10 square numbers.",
    "code": "```kotlin\nfun generateSquareNumbers(): List<Int> {\n    val squares = mutableListOf<Int>()\n    for (i in 1..10) {\n        squares.add(i * i)\n    }\n    return squares\n}\n\nfun main() {\n    val squareNumbers = generateSquareNumbers()\n    println(squareNumbers)\n}\n```"
  },
  {
    "task": "Write code to print all the elements of a list that are greater than a given number using a for loop.",
    "code": "```kotlin\nfun printElementsGreaterThan(list: List<Int>, number: Int) {\n    for (element in list) {\n        if (element > number) {\n            println(element)\n        }\n    }\n}\n\n// Example usage\nval numbers = listOf(1, 5, 8, 12, 20)\nval threshold = 10\nprintElementsGreaterThan(numbers, threshold)\n```"
  },
  {
    "task": "Construct a for loop that finds the smallest number in an array.",
    "code": "```kotlin\nfun findSmallestNumber(numbers: IntArray): Int {\n    var smallest = Int.MAX_VALUE\n    for (number in numbers) {\n        if (number < smallest) {\n            smallest = number\n        }\n    }\n    return smallest\n}\n\nfun main() {\n    val numbers = intArrayOf(5, 3, 9, 1, 4)\n    val smallestNumber = findSmallestNumber(numbers)\n    println(\"The smallest number is: $smallestNumber\")\n}\n```"
  },
  {
    "task": "Develop a for loop that prints the first N lines of Pascal's Triangle.",
    "code": "```kotlin\nfun printPascalsTriangle(n: Int) {\n    for (line in 0 until n) {\n        var value = 1\n        for (i in 0..line) {\n            print(\"$value \")\n            value = value * (line - i) / (i + 1)\n        }\n        println()\n    }\n}\n\nfun main() {\n    val N = 5\n    printPascalsTriangle(N)\n}\n```"
  },
  {
    "task": "Create a for loop that calculates the product of all elements in a list.",
    "code": "```kotlin\nfun calculateProduct(numbers: List<Int>): Int {\n    var product = 1\n    for (number in numbers) {\n        product *= number\n    }\n    return product\n}\n```"
  },
  {
    "task": "Use a for loop to print numbers from 1 to 100, but replace multiples of 3 with 'Fizz'.",
    "code": "```kotlin\nfor (i in 1..100) {\n    if (i % 3 == 0) {\n        println(\"Fizz\")\n    } else {\n        println(i)\n    }\n}\n```"
  },
  {
    "task": "Write a for loop that iterates over a string and counts the number of words.",
    "code": "```kotlin\nfun countWords(text: String): Int {\n    var wordCount = 0\n    var isWord = false\n\n    for (char in text) {\n        if (char.isWhitespace()) {\n            if (isWord) {\n                wordCount++\n                isWord = false\n            }\n        } else {\n            isWord = true\n        }\n    }\n\n    if (isWord) {\n        wordCount++\n    }\n\n    return wordCount\n}\n```"
  },
  {
    "task": "Design a for loop that prints numbers from 1 to 50, but skips numbers divisible by 5.",
    "code": "```kotlin\nfun main() {\n    for (i in 1..50) {\n        if (i % 5 == 0) continue\n        println(i)\n    }\n}\n```"
  },
  {
    "task": "Implement a for loop that prints a checkerboard pattern of asterisks.",
    "code": "```kotlin\nfun printCheckerboardPattern(rows: Int, columns: Int) {\n    for (i in 0 until rows) {\n        for (j in 0 until columns) {\n            if ((i + j) % 2 == 0) {\n                print(\"*\")\n            } else {\n                print(\" \")\n            }\n        }\n        println()\n    }\n}\n\nfun main() {\n    printCheckerboardPattern(8, 8)\n}\n```"
  },
  {
    "task": "Create a for loop that finds the index of a target value in a list.",
    "code": "```kotlin\nfun findIndexOfTarget(list: List<Int>, target: Int): Int? {\n    for (index in list.indices) {\n        if (list[index] == target) {\n            return index\n        }\n    }\n    return null\n}\n```"
  },
  {
    "task": "Use a for loop to concatenate a list of strings into a single string.",
    "code": "```kotlin\nfun concatenateStrings(stringList: List<String>): String {\n    var result = \"\"\n    for (str in stringList) {\n        result += str\n    }\n    return result\n}\n\n// Example usage\nval strings = listOf(\"Hello\", \" \", \"World\", \"!\")\nval concatenated = concatenateStrings(strings)\nprintln(concatenated)\n```"
  },
  {
    "task": "Develop a for loop that rotates a list to the right by a given number of positions.",
    "code": "```kotlin\nfun rotateListRight(list: MutableList<Int>, positions: Int) {\n    val n = list.size\n    val rotation = positions % n\n    val rotatedList = MutableList(n) { 0 }\n\n    for (i in list.indices) {\n        rotatedList[(i + rotation) % n] = list[i]\n    }\n\n    for (i in rotatedList.indices) {\n        list[i] = rotatedList[i]\n    }\n}\n\n// Example usage\nfun main() {\n    val list = mutableListOf(1, 2, 3, 4, 5)\n    rotateListRight(list, 2)\n    println(list) // Output: [4, 5, 1, 2, 3]\n}\n```"
  },
  {
    "task": "Write code that uses a for loop to insert an element into a sorted list while maintaining order.",
    "code": "```kotlin\nfun insertIntoSortedList(sortedList: MutableList<Int>, element: Int) {\n    var inserted = false\n    for (i in sortedList.indices) {\n        if (element < sortedList[i]) {\n            sortedList.add(i, element)\n            inserted = true\n            break\n        }\n    }\n    if (!inserted) {\n        sortedList.add(element)\n    }\n}\n\n// Example usage\nval sortedList = mutableListOf(1, 3, 5, 7)\ninsertIntoSortedList(sortedList, 4)\nprintln(sortedList) // Output: [1, 3, 4, 5, 7]\n```"
  },
  {
    "task": "Implement a for loop that counts the frequency of each character in a string.",
    "code": "```kotlin\nfun countCharacterFrequency(input: String): Map<Char, Int> {\n    val frequencyMap = mutableMapOf<Char, Int>()\n    for (char in input) {\n        frequencyMap[char] = frequencyMap.getOrDefault(char, 0) + 1\n    }\n    return frequencyMap\n}\n```"
  },
  {
    "task": "Create a for loop that prints all subsets of a given set.",
    "code": "```kotlin\nfun printSubsets(set: List<Int>) {\n    val n = set.size\n    val totalSubsets = 1 shl n // 2^n\n\n    for (i in 0 until totalSubsets) {\n        val subset = mutableListOf<Int>()\n        for (j in 0 until n) {\n            if (i and (1 shl j) != 0) {\n                subset.add(set[j])\n            }\n        }\n        println(subset)\n    }\n}\n\nfun main() {\n    val set = listOf(1, 2, 3)\n    printSubsets(set)\n}\n```"
  },
  {
    "task": "Design a for loop to generate all permutations of a string.",
    "code": "```kotlin\nfun permute(s: String): List<String> {\n    val permutations = mutableListOf<String>()\n    fun permuteHelper(prefix: String, remaining: String) {\n        if (remaining.isEmpty()) {\n            permutations.add(prefix)\n        } else {\n            for (i in remaining.indices) {\n                permuteHelper(\n                    prefix + remaining[i],\n                    remaining.substring(0, i) + remaining.substring(i + 1)\n                )\n            }\n        }\n    }\n    permuteHelper(\"\", s)\n    return permutations\n}\n\nfun main() {\n    val result = permute(\"abc\")\n    for (permutation in result) {\n        println(permutation)\n    }\n}\n```"
  },
  {
    "task": "Write a for loop that sorts an array in descending order.",
    "code": "```kotlin\nfun sortDescending(array: IntArray): IntArray {\n    for (i in array.indices) {\n        for (j in i + 1 until array.size) {\n            if (array[i] < array[j]) {\n                val temp = array[i]\n                array[i] = array[j]\n                array[j] = temp\n            }\n        }\n    }\n    return array\n}\n\nfun main() {\n    val array = intArrayOf(5, 3, 8, 6, 2)\n    val sortedArray = sortDescending(array)\n    println(sortedArray.joinToString(\", \"))\n}\n```"
  },
  {
    "task": "Use a for loop to generate a sequence of random characters and print them.",
    "code": "```kotlin\nimport kotlin.random.Random\n\nfun main() {\n    val length = 10\n    val charPool = ('a'..'z') + ('A'..'Z') + ('0'..'9')\n\n    for (i in 1..length) {\n        val randomChar = charPool.random()\n        print(randomChar)\n    }\n}\n```"
  },
  {
    "task": "Construct a for loop that finds the common elements between two lists.",
    "code": "```kotlin\nfun findCommonElements(list1: List<Int>, list2: List<Int>): List<Int> {\n    val commonElements = mutableListOf<Int>()\n    for (element in list1) {\n        if (element in list2) {\n            commonElements.add(element)\n        }\n    }\n    return commonElements\n}\n\n// Example usage\nfun main() {\n    val list1 = listOf(1, 2, 3, 4, 5)\n    val list2 = listOf(4, 5, 6, 7, 8)\n    val common = findCommonElements(list1, list2)\n    println(common) // Output: [4, 5]\n}\n```"
  },
  {
    "task": "Develop a for loop to calculate and print the cumulative sum of a list.",
    "code": "```kotlin\nfun main() {\n    val numbers = listOf(1, 2, 3, 4, 5)\n    var cumulativeSum = 0\n    for (number in numbers) {\n        cumulativeSum += number\n        println(cumulativeSum)\n    }\n}\n```"
  },
  {
    "task": "Create a for loop that prints a diamond pattern using asterisks.",
    "code": "```kotlin\nfun printDiamond(n: Int) {\n    // upper half\n    for (i in 0 until n) {\n        for (j in 0 until n - i - 1) {\n            print(\" \")\n        }\n        for (j in 0 until 2 * i + 1) {\n            print(\"*\")\n        }\n        println()\n    }\n    // lower half\n    for (i in n - 2 downTo 0) {\n        for (j in 0 until n - i - 1) {\n            print(\" \")\n        }\n        for (j in 0 until 2 * i + 1) {\n            print(\"*\")\n        }\n        println()\n    }\n}\n\nfun main() {\n    val n = 5\n    printDiamond(n)\n}\n```"
  },
  {
    "task": "Write a for loop that simulates a countdown timer from a specified number of seconds.",
    "code": "```kotlin\nfun countdownTimer(seconds: Int) {\n    for (i in seconds downTo 0) {\n        println(\"Time remaining: $i seconds\")\n        Thread.sleep(1000) // Simulate a 1-second delay\n    }\n}\n\nfun main() {\n    countdownTimer(10) // Example usage with a 10-second countdown\n}\n```"
  },
  {
    "task": "Use a for loop to print the transpose of a matrix.",
    "code": "```kotlin\nfun main() {\n    val matrix = arrayOf(\n        intArrayOf(1, 2, 3),\n        intArrayOf(4, 5, 6),\n        intArrayOf(7, 8, 9)\n    )\n    \n    for (i in matrix[0].indices) {\n        for (j in matrix.indices) {\n            print(\"${matrix[j][i]} \")\n        }\n        println()\n    }\n}\n```"
  },
  {
    "task": "Implement a for loop that reverses the order of words in a sentence.",
    "code": "```kotlin\nfun reverseWords(sentence: String): String {\n    val words = sentence.split(\" \")\n    val reversedWords = mutableListOf<String>()\n    for (i in words.indices.reversed()) {\n        reversedWords.add(words[i])\n    }\n    return reversedWords.joinToString(\" \")\n}\n\nfun main() {\n    val sentence = \"This is a sample sentence\"\n    val reversedSentence = reverseWords(sentence)\n    println(reversedSentence)\n}\n```"
  },
  {
    "task": "Create a for loop that deletes elements from a list that are less than a given value.",
    "code": "```kotlin\nfun removeElementsLessThanValue(list: MutableList<Int>, value: Int) {\n    val iterator = list.iterator()\n    for (element in iterator) {\n        if (element < value) {\n            iterator.remove()\n        }\n    }\n}\n\n// Example usage\nval numbers = mutableListOf(1, 3, 5, 7, 9)\nremoveElementsLessThanValue(numbers, 5)\nprintln(numbers) // Output will be [5, 7, 9]\n```"
  },
  {
    "task": "Design a for loop to merge two sorted lists into a single sorted list.",
    "code": "```kotlin\nfun mergeSortedLists(list1: List<Int>, list2: List<Int>): List<Int> {\n    val mergedList = mutableListOf<Int>()\n    var i = 0\n    var j = 0\n\n    while (i < list1.size && j < list2.size) {\n        if (list1[i] < list2[j]) {\n            mergedList.add(list1[i])\n            i++\n        } else {\n            mergedList.add(list2[j])\n            j++\n        }\n    }\n\n    for (k in i until list1.size) {\n        mergedList.add(list1[k])\n    }\n\n    for (k in j until list2.size) {\n        mergedList.add(list2[k])\n    }\n\n    return mergedList\n}\n```"
  },
  {
    "task": "Write a for loop that calculates the power of a number using repeated multiplication.",
    "code": "```kotlin\nfun power(base: Int, exponent: Int): Int {\n    var result = 1\n    for (i in 1..exponent) {\n        result *= base\n    }\n    return result\n}\n\nfun main() {\n    val base = 2\n    val exponent = 5\n    val result = power(base, exponent)\n    println(\"$base raised to the power of $exponent is $result\")\n}\n```"
  },
  {
    "task": "Use a for loop to find the longest word in a list of words.",
    "code": "```kotlin\nfun findLongestWord(words: List<String>): String {\n    var longestWord = \"\"\n    for (word in words) {\n        if (word.length > longestWord.length) {\n            longestWord = word\n        }\n    }\n    return longestWord\n}\n\n// Example usage\nval words = listOf(\"apple\", \"banana\", \"cherry\", \"date\")\nval longest = findLongestWord(words)\nprintln(longest)\n```"
  },
  {
    "task": "Develop a for loop that sorts a list of tuples based on the second element.",
    "code": "```kotlin\nfun main() {\n    val list = listOf(Pair(\"apple\", 3), Pair(\"banana\", 1), Pair(\"cherry\", 2))\n    val sortedList = list.sortedBy { it.second }\n    \n    for (item in sortedList) {\n        println(item)\n    }\n}\n```"
  },
  {
    "task": "Create a for loop that replicates each character in a string a given number of times.",
    "code": "```kotlin\nfun replicateCharacters(input: String, times: Int): String {\n    val result = StringBuilder()\n    for (char in input) {\n        for (i in 0 until times) {\n            result.append(char)\n        }\n    }\n    return result.toString()\n}\n```"
  },
  {
    "task": "Construct a for loop that replaces spaces in a string with hyphens.",
    "code": "```kotlin\nfun replaceSpacesWithHyphens(input: String): String {\n    val result = StringBuilder()\n    for (char in input) {\n        if (char == ' ') {\n            result.append('-')\n        } else {\n            result.append(char)\n        }\n    }\n    return result.toString()\n}\n```"
  },
  {
    "task": "Design a for loop to find the intersection of two sets.",
    "code": "```kotlin\nfun findIntersection(set1: Set<Int>, set2: Set<Int>): Set<Int> {\n    val intersection = mutableSetOf<Int>()\n    for (element in set1) {\n        if (element in set2) {\n            intersection.add(element)\n        }\n    }\n    return intersection\n}\n\n// Example usage\nval setA = setOf(1, 2, 3, 4)\nval setB = setOf(3, 4, 5, 6)\nval result = findIntersection(setA, setB)\nprintln(result) // Output: [3, 4]\n```"
  },
  {
    "task": "Write a for loop that generates a list of prime numbers up to a given number.",
    "code": "```kotlin\nfun generatePrimes(upTo: Int): List<Int> {\n    val primes = mutableListOf<Int>()\n    for (num in 2..upTo) {\n        var isPrime = true\n        for (i in 2..Math.sqrt(num.toDouble()).toInt()) {\n            if (num % i == 0) {\n                isPrime = false\n                break\n            }\n        }\n        if (isPrime) {\n            primes.add(num)\n        }\n    }\n    return primes\n}\n\n// Example usage:\n// val primes = generatePrimes(30)\n// println(primes) // Output will be a list of prime numbers up to 30\n```"
  },
  {
    "task": "Use a for loop to implement a simple text-based progress bar.",
    "code": "```kotlin\nfun main() {\n    val total = 10\n    print(\"Progress: [\")\n    for (i in 1..total) {\n        Thread.sleep(500) // Simulates work being done\n        print(\"=\")\n    }\n    println(\"] Done!\")\n}\n```"
  },
  {
    "task": "Implement a for loop that finds and prints all palindromic numbers between 10 and 200.",
    "code": "```kotlin\nfun isPalindrome(number: Int): Boolean {\n    val str = number.toString()\n    return str == str.reversed()\n}\n\nfun main() {\n    for (i in 10..200) {\n        if (isPalindrome(i)) {\n            println(i)\n        }\n    }\n}\n```"
  },
  {
    "task": "Create a for loop that multiplies corresponding elements of two lists and stores the result.",
    "code": "```kotlin\nfun multiplyCorrespondingElements(list1: List<Int>, list2: List<Int>): List<Int> {\n    val result = mutableListOf<Int>()\n    for (i in list1.indices) {\n        result.add(list1[i] * list2[i])\n    }\n    return result\n}\n```"
  },
  {
    "task": "Develop a for loop that finds the difference between the largest and smallest numbers in a list.",
    "code": "```kotlin\nfun findDifference(numbers: List<Int>): Int {\n    if (numbers.isEmpty()) return 0\n    \n    var min = numbers[0]\n    var max = numbers[0]\n    \n    for (number in numbers) {\n        if (number < min) min = number\n        if (number > max) max = number\n    }\n    \n    return max - min\n}\n```"
  },
  {
    "task": "Write a for loop that prints numbers from 1 to 100, replacing multiples of 5 with 'Buzz'.",
    "code": "```kotlin\nfor (i in 1..100) {\n    if (i % 5 == 0) {\n        println(\"Buzz\")\n    } else {\n        println(i)\n    }\n}\n```"
  },
  {
    "task": "Use a for loop to convert a list of integers into their binary representation.",
    "code": "```kotlin\nfun convertToBinary(numbers: List<Int>): List<String> {\n    val binaryList = mutableListOf<String>()\n    for (number in numbers) {\n        binaryList.add(number.toString(2))\n    }\n    return binaryList\n}\n\nfun main() {\n    val integers = listOf(1, 2, 3, 4, 5)\n    val binaryRepresentations = convertToBinary(integers)\n    println(binaryRepresentations)\n}\n```"
  },
  {
    "task": "Design a for loop that fills a 2D array with consecutive numbers in a spiral pattern.",
    "code": "```kotlin\nfun fillSpiral(n: Int): Array<IntArray> {\n    val array = Array(n) { IntArray(n) }\n    var value = 1\n    var top = 0\n    var bottom = n - 1\n    var left = 0\n    var right = n - 1\n\n    while (top <= bottom && left <= right) {\n        for (i in left..right) {\n            array[top][i] = value++\n        }\n        top++\n        for (i in top..bottom) {\n            array[i][right] = value++\n        }\n        right--\n        if (top <= bottom) {\n            for (i in right downTo left) {\n                array[bottom][i] = value++\n            }\n            bottom--\n        }\n        if (left <= right) {\n            for (i in bottom downTo top) {\n                array[i][left] = value++\n            }\n            left++\n        }\n    }\n    return array\n}\n```"
  },
  {
    "task": "Create a for loop that iterates over a list and removes duplicates.",
    "code": "```kotlin\nfun removeDuplicates(list: List<Int>): List<Int> {\n    val resultSet = mutableSetOf<Int>()\n    for (item in list) {\n        resultSet.add(item)\n    }\n    return resultSet.toList()\n}\n\n// Example usage\nval numbers = listOf(1, 2, 2, 3, 4, 4, 5)\nval noDuplicates = removeDuplicates(numbers)\nprintln(noDuplicates)  // Output: [1, 2, 3, 4, 5]\n```"
  },
  {
    "task": "Implement a for loop to calculate the dot product of two vectors.",
    "code": "```kotlin\nfun dotProduct(vector1: List<Int>, vector2: List<Int>): Int {\n    var product = 0\n    for (i in vector1.indices) {\n        product += vector1[i] * vector2[i]\n    }\n    return product\n}\n\nfun main() {\n    val vector1 = listOf(1, 2, 3)\n    val vector2 = listOf(4, 5, 6)\n    println(\"Dot Product: ${dotProduct(vector1, vector2)}\")\n}\n```"
  },
  {
    "task": "Write a for loop that prints a sequence of numbers in reverse order.",
    "code": "```kotlin\nfun main() {\n    for (i in 10 downTo 1) {\n        println(i)\n    }\n}\n```"
  },
  {
    "task": "Develop a for loop that computes the greatest common divisor (GCD) of two numbers.",
    "code": "```kotlin\nfun gcd(a: Int, b: Int): Int {\n    var gcd = 1\n    val min = if (a < b) a else b\n    for (i in 1..min) {\n        if (a % i == 0 && b % i == 0) {\n            gcd = i\n        }\n    }\n    return gcd\n}\n\nfun main() {\n    val number1 = 48\n    val number2 = 18\n    println(\"GCD of $number1 and $number2 is: ${gcd(number1, number2)}\")\n}\n```"
  },
  {
    "task": "Construct a for loop that prints a square pattern of numbers with a given side length.",
    "code": "```kotlin\nfun printSquarePattern(sideLength: Int) {\n    for (i in 1..sideLength) {\n        for (j in 1..sideLength) {\n            print(\"$i \")\n        }\n        println()\n    }\n}\n\nfun main() {\n    val sideLength = 5\n    printSquarePattern(sideLength)\n}\n```"
  },
  {
    "task": "Create a for loop that shifts all elements of a list to the left by one position.",
    "code": "```kotlin\nfun shiftLeft(list: MutableList<Int>) {\n    if (list.isNotEmpty()) {\n        val firstElement = list[0]\n        for (i in 0 until list.size - 1) {\n            list[i] = list[i + 1]\n        }\n        list[list.size - 1] = firstElement\n    }\n}\n\n// Example usage\nval numbers = mutableListOf(1, 2, 3, 4, 5)\nshiftLeft(numbers)\nprintln(numbers) // Output: [2, 3, 4, 5, 1]\n```"
  },
  {
    "task": "Use a for loop to print the first 20 triangular numbers.",
    "code": "```kotlin\nfun main() {\n    for (n in 1..20) {\n        val triangularNumber = n * (n + 1) / 2\n        println(triangularNumber)\n    }\n}\n```"
  },
  {
    "task": "Write a for loop that finds the first repeating character in a string.",
    "code": "```kotlin\nfun firstRepeatingCharacter(input: String): Char? {\n    val seen = mutableSetOf<Char>()\n    for (char in input) {\n        if (char in seen) {\n            return char\n        }\n        seen.add(char)\n    }\n    return null\n}\n\n// Example usage\nval input = \"kotlinprogramming\"\nval result = firstRepeatingCharacter(input)\nprintln(result) // Output: o\n```"
  },
  {
    "task": "Design a for loop that transforms a list of temperatures from Celsius to Fahrenheit.",
    "code": "```kotlin\nfun convertCelsiusToFahrenheit(celsiusList: List<Double>): List<Double> {\n    val fahrenheitList = mutableListOf<Double>()\n    for (celsius in celsiusList) {\n        val fahrenheit = celsius * 9/5 + 32\n        fahrenheitList.add(fahrenheit)\n    }\n    return fahrenheitList\n}\n\n// Example usage\nval celsiusTemperatures = listOf(0.0, 20.0, 37.0, 100.0)\nval fahrenheitTemperatures = convertCelsiusToFahrenheit(celsiusTemperatures)\nprintln(fahrenheitTemperatures)\n```"
  },
  {
    "task": "Implement a for loop to determine if a string is an isogram.",
    "code": "```kotlin\nfun isIsogram(input: String): Boolean {\n    val lowerCasedInput = input.toLowerCase()\n    val seenChars = mutableSetOf<Char>()\n    for (char in lowerCasedInput) {\n        if (char in seenChars) {\n            return false\n        }\n        seenChars.add(char)\n    }\n    return true\n}\n```"
  },
  {
    "task": "Use a for loop to create a histogram from a list of integers.",
    "code": "```kotlin\nfun createHistogram(data: List<Int>): Map<Int, Int> {\n    val histogram = mutableMapOf<Int, Int>()\n    for (number in data) {\n        histogram[number] = histogram.getOrDefault(number, 0) + 1\n    }\n    return histogram\n}\n\nfun main() {\n    val dataList = listOf(1, 2, 2, 3, 3, 3, 4, 4, 4, 4)\n    val histogram = createHistogram(dataList)\n    for ((key, value) in histogram) {\n        println(\"$key: $value\")\n    }\n}\n```"
  },
  {
    "task": "Create a for loop that prints the indexes of all occurrences of a particular element in a list.",
    "code": "```kotlin\nfun printIndexesOfElement(list: List<Int>, element: Int) {\n    for (index in list.indices) {\n        if (list[index] == element) {\n            println(index)\n        }\n    }\n}\n```"
  },
  {
    "task": "Write a for loop that checks if a given string is a palindrome.",
    "code": "```kotlin\nfun isPalindrome(input: String): Boolean {\n    val length = input.length\n    for (i in 0 until length / 2) {\n        if (input[i] != input[length - 1 - i]) {\n            return false\n        }\n    }\n    return true\n}\n\n// Example usage\nval inputString = \"racecar\"\nprintln(\"Is palindrome: ${isPalindrome(inputString)}\")\n```"
  },
  {
    "task": "Develop a for loop to simulate the behavior of a simple finite state machine.",
    "code": "```kotlin\nfun simulateStateMachine() {\n    val states = listOf(\"Start\", \"Processing\", \"End\")\n    for (state in states) {\n        when (state) {\n            \"Start\" -> println(\"Entering Start State\")\n            \"Processing\" -> println(\"Processing Data\")\n            \"End\" -> println(\"Exiting State Machine\")\n        }\n    }\n}\n\nfun main() {\n    simulateStateMachine()\n}\n```"
  },
  {
    "task": "Design a for loop that finds the sum of all odd numbers in a list.",
    "code": "```kotlin\nfun sumOfOddNumbers(numbers: List<Int>): Int {\n    var sum = 0\n    for (number in numbers) {\n        if (number % 2 != 0) {\n            sum += number\n        }\n    }\n    return sum\n}\n```"
  },
  {
    "task": "Use a for loop to count how many words start with a vowel in a given sentence.",
    "code": "```kotlin\nfun countWordsStartingWithVowel(sentence: String): Int {\n    val vowels = setOf('a', 'e', 'i', 'o', 'u')\n    var count = 0\n    val words = sentence.split(\"\\\\s+\".toRegex())\n    \n    for (word in words) {\n        if (word.isNotEmpty() && word[0].lowercaseChar() in vowels) {\n            count++\n        }\n    }\n    \n    return count\n}\n\nfun main() {\n    val sentence = \"An example of a sentence with some words\"\n    val result = countWordsStartingWithVowel(sentence)\n    println(\"Number of words starting with a vowel: $result\")\n}\n```"
  },
  {
    "task": "Implement a for loop that sorts a list of strings by their length.",
    "code": "```kotlin\nfun sortStringsByLength(strings: List<String>): List<String> {\n    val sortedStrings = strings.toMutableList()\n    for (i in 0 until sortedStrings.size - 1) {\n        for (j in 0 until sortedStrings.size - 1 - i) {\n            if (sortedStrings[j].length > sortedStrings[j + 1].length) {\n                val temp = sortedStrings[j]\n                sortedStrings[j] = sortedStrings[j + 1]\n                sortedStrings[j + 1] = temp\n            }\n        }\n    }\n    return sortedStrings\n}\n\nfun main() {\n    val strings = listOf(\"apple\", \"banana\", \"kiwi\", \"cherry\", \"mango\")\n    val sortedStrings = sortStringsByLength(strings)\n    println(sortedStrings)\n}\n```"
  },
  {
    "task": "Write a for loop that prints the factorial of numbers from 1 to 10.",
    "code": "```kotlin\nfun main() {\n    for (i in 1..10) {\n        var factorial = 1\n        for (j in 1..i) {\n            factorial *= j\n        }\n        println(\"Factorial of $i is $factorial\")\n    }\n}\n```"
  },
  {
    "task": "Create a for loop that replaces all instances of a substring in a string with another substring.",
    "code": "```kotlin\nfun replaceSubstrings(input: String, target: String, replacement: String): String {\n    var result = input\n    for (i in 0..result.length - target.length) {\n        if (result.substring(i, i + target.length) == target) {\n            result = result.substring(0, i) + replacement + result.substring(i + target.length)\n        }\n    }\n    return result\n}\n\n// Example usage\nfun main() {\n    val original = \"hello world, hello universe\"\n    val replaced = replaceSubstrings(original, \"hello\", \"hi\")\n    println(replaced)\n}\n```"
  },
  {
    "task": "Develop a for loop that squares each element in a list of numbers.",
    "code": "```kotlin\nfun squareElements(numbers: List<Int>): List<Int> {\n    val squaredNumbers = mutableListOf<Int>()\n    for (number in numbers) {\n        squaredNumbers.add(number * number)\n    }\n    return squaredNumbers\n}\n\n// Example usage:\nval numbers = listOf(1, 2, 3, 4, 5)\nval squared = squareElements(numbers)\nprintln(squared)\n```"
  },
  {
    "task": "Use a for loop to reverse the order of elements in an array.",
    "code": "```kotlin\nfun reverseArray(arr: Array<Int>): Array<Int> {\n    val reversedArray = Array(arr.size) { 0 }\n    for (i in arr.indices) {\n        reversedArray[i] = arr[arr.size - 1 - i]\n    }\n    return reversedArray\n}\n\nfun main() {\n    val originalArray = arrayOf(1, 2, 3, 4, 5)\n    val reversedArray = reverseArray(originalArray)\n    println(reversedArray.joinToString(\", \"))\n}\n```"
  },
  {
    "task": "Implement a for loop that tests if two strings are anagrams of each other.",
    "code": "```kotlin\nfun areAnagrams(str1: String, str2: String): Boolean {\n    if (str1.length != str2.length) return false\n\n    val count = IntArray(26)\n\n    for (c in str1) {\n        count[c - 'a']++\n    }\n\n    for (c in str2) {\n        if (--count[c - 'a'] < 0) {\n            return false\n        }\n    }\n\n    return true\n}\n\n// Example usage\nfun main() {\n    val str1 = \"listen\"\n    val str2 = \"silent\"\n    println(areAnagrams(str1, str2)) // Outputs: true\n}\n```"
  },
  {
    "task": "Design a for loop to find and print all Armstrong numbers between 100 and 999.",
    "code": "```kotlin\nfun main() {\n    for (number in 100..999) {\n        val digits = number.toString().map { it.toString().toInt() }\n        val sumOfCubes = digits.map { it * it * it }.sum()\n        if (sumOfCubes == number) {\n            println(number)\n        }\n    }\n}\n```"
  }
]