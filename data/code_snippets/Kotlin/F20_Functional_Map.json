[
  {
    "task": "Convert a list of temperatures from Celsius to Fahrenheit using a map function.",
    "code": "```kotlin\nfun main() {\n    val celsiusTemperatures = listOf(0, 20, 30, 100)\n    val fahrenheitTemperatures = celsiusTemperatures.map { it * 9 / 5 + 32 }\n    println(fahrenheitTemperatures)\n}\n```"
  },
  {
    "task": "Use map to convert a list of lowercase words to uppercase.",
    "code": "```kotlin\nfun main() {\n    val words = listOf(\"hello\", \"world\", \"kotlin\", \"map\")\n    val uppercasedWords = words.map { it.uppercase() }\n    println(uppercasedWords)\n}\n```"
  },
  {
    "task": "Apply map to add a prefix to each string in a list of filenames.",
    "code": "```kotlin\nfun addPrefixToFilenames(filenames: List<String>, prefix: String): List<String> {\n    return filenames.map { \"$prefix$it\" }\n}\n\n// Example usage\nval filenames = listOf(\"file1.txt\", \"file2.txt\", \"file3.txt\")\nval prefix = \"new_\"\nval updatedFilenames = addPrefixToFilenames(filenames, prefix)\nprintln(updatedFilenames)\n```"
  },
  {
    "task": "Transform a list of numbers by squaring each element with a map function.",
    "code": "```kotlin\nfun main() {\n    val numbers = listOf(1, 2, 3, 4, 5)\n    val squaredNumbers = numbers.map { it * it }\n    println(squaredNumbers)\n}\n```"
  },
  {
    "task": "Convert a list of integers to their string representations using map.",
    "code": "```kotlin\nfun main() {\n    val numbers = listOf(1, 2, 3, 4, 5)\n    val stringRepresentations = numbers.map { it.toString() }\n    println(stringRepresentations)\n}\n```"
  },
  {
    "task": "Use map to compute the length of each string in a list of sentences.",
    "code": "```kotlin\nfun main() {\n    val sentences = listOf(\"This is a sentence.\", \"Kotlin is fun!\", \"Functional programming.\")\n    val lengths = sentences.map { it.length }\n    println(lengths)\n}\n```"
  },
  {
    "task": "Apply a discount to a list of prices using a map function.",
    "code": "```kotlin\nfun main() {\n    val prices = listOf(100.0, 200.0, 300.0, 400.0, 500.0)\n    val discountRate = 0.1\n    val discountedPrices = prices.map { it * (1 - discountRate) }\n    println(discountedPrices)\n}\n```"
  },
  {
    "task": "Extract the first element from each tuple in a list of tuples with map.",
    "code": "```kotlin\nval listOfTuples = listOf(Pair(1, \"a\"), Pair(2, \"b\"), Pair(3, \"c\"))\nval firstElements = listOfTuples.map { it.first }\n```"
  },
  {
    "task": "Use map to round a list of floating-point numbers to two decimal places.",
    "code": "```kotlin\nfun main() {\n    val numbers = listOf(3.14159, 2.71828, 1.61803, 1.41421)\n    val roundedNumbers = numbers.map { String.format(\"%.2f\", it).toDouble() }\n    println(roundedNumbers)\n}\n```"
  },
  {
    "task": "Capitalize the first letter of each word in a list of names using map.",
    "code": "```kotlin\nfun main() {\n    val names = listOf(\"alice\", \"bob\", \"charlie\")\n    val capitalizedNames = names.map { name ->\n        name.split(\" \").joinToString(\" \") { word ->\n            word.replaceFirstChar { if (it.isLowerCase()) it.titlecase() else it.toString() }\n        }\n    }\n    println(capitalizedNames)\n}\n```"
  },
  {
    "task": "Convert a list of JSON strings to corresponding dictionary objects with map.",
    "code": "```kotlin\nimport kotlinx.serialization.*\nimport kotlinx.serialization.json.*\n\n@Serializable\ndata class MyDataClass(val key: String, val value: String)\n\nfun main() {\n    val jsonStrings = listOf(\n        \"\"\"{\"key\": \"first\", \"value\": \"1\"}\"\"\",\n        \"\"\"{\"key\": \"second\", \"value\": \"2\"}\"\"\"\n    )\n\n    val dictionaries = jsonStrings.map { jsonString ->\n        Json.decodeFromString<MyDataClass>(jsonString)\n    }\n\n    println(dictionaries)\n}\n```"
  },
  {
    "task": "Use map to double the value of each number in a list.",
    "code": "```kotlin\nfun main() {\n    val numbers = listOf(1, 2, 3, 4, 5)\n    val doubledNumbers = numbers.map { it * 2 }\n    println(doubledNumbers)\n}\n```"
  },
  {
    "task": "Transform a list of RGB tuples to hexadecimal color codes using map.",
    "code": "```kotlin\nfun rgbToHex(rgb: Triple<Int, Int, Int>): String {\n    return String.format(\"#%02X%02X%02X\", rgb.first, rgb.second, rgb.third)\n}\n\nfun main() {\n    val rgbList = listOf(\n        Triple(255, 0, 0),\n        Triple(0, 255, 0),\n        Triple(0, 0, 255),\n        Triple(255, 255, 0)\n    )\n    \n    val hexList = rgbList.map { rgbToHex(it) }\n    \n    println(hexList)\n}\n```"
  },
  {
    "task": "Use map to compute the factorial of each number in a list.",
    "code": "```kotlin\nfun factorial(n: Int): Int = if (n == 0) 1 else n * factorial(n - 1)\n\nfun main() {\n    val numbers = listOf(1, 2, 3, 4, 5)\n    val factorials = numbers.map { factorial(it) }\n    println(factorials)\n}\n```"
  },
  {
    "task": "Translate a list of English words to Spanish using a map function.",
    "code": "```kotlin\nfun main() {\n    val englishToSpanish = mapOf(\n        \"hello\" to \"hola\",\n        \"world\" to \"mundo\",\n        \"good\" to \"bueno\",\n        \"morning\" to \"ma\u00f1ana\",\n        \"night\" to \"noche\"\n    )\n\n    val englishWords = listOf(\"hello\", \"world\", \"good\", \"morning\", \"night\")\n    val spanishWords = englishWords.map { englishToSpanish[it] ?: it }\n    \n    println(spanishWords)\n}\n```"
  },
  {
    "task": "Apply a map function to format a list of dates from one format to another.",
    "code": "```kotlin\nimport java.time.LocalDate\nimport java.time.format.DateTimeFormatter\n\nfun main() {\n    val dateStrings = listOf(\"2023-10-01\", \"2023-10-15\", \"2023-10-31\")\n    val inputFormatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\")\n    val outputFormatter = DateTimeFormatter.ofPattern(\"dd/MM/yyyy\")\n\n    val formattedDates = dateStrings.map { dateStr ->\n        LocalDate.parse(dateStr, inputFormatter).format(outputFormatter)\n    }\n\n    println(formattedDates)\n}\n```"
  },
  {
    "task": "Use map to check if each number in a list is even, returning a list of booleans.",
    "code": "```kotlin\nfun main() {\n    val numbers = listOf(1, 2, 3, 4, 5, 6)\n    val isEvenList = numbers.map { it % 2 == 0 }\n    println(isEvenList)\n}\n```"
  },
  {
    "task": "Convert a list of binary strings to decimal numbers using map.",
    "code": "```kotlin\nfun main() {\n    val binaryStrings = listOf(\"101\", \"110\", \"111\")\n    val decimalNumbers = binaryStrings.map { it.toInt(2) }\n    println(decimalNumbers)\n}\n```"
  },
  {
    "task": "Use map to append a domain name to a list of user names to create email addresses.",
    "code": "```kotlin\nfun main() {\n    val userNames = listOf(\"alice\", \"bob\", \"charlie\")\n    val domain = \"example.com\"\n    val emailAddresses = userNames.map { \"$it@$domain\" }\n    println(emailAddresses)\n}\n```"
  },
  {
    "task": "Calculate the area of each circle in a list of radii using a map function.",
    "code": "```kotlin\nfun main() {\n    val radii = listOf(3.0, 5.0, 7.0)\n    val areas = radii.map { radius -> Math.PI * radius * radius }\n    println(areas)\n}\n```"
  },
  {
    "task": "Use map to strip whitespace from the start and end of each string in a list.",
    "code": "```kotlin\nfun main() {\n    val strings = listOf(\"  hello  \", \"  world  \", \"  kotlin  \")\n    val trimmedStrings = strings.map { it.trim() }\n    println(trimmedStrings)\n}\n```"
  },
  {
    "task": "Apply map to replace spaces with underscores in a list of file paths.",
    "code": "```kotlin\nfun replaceSpacesWithUnderscores(filePaths: List<String>): List<String> {\n    return filePaths.map { it.replace(\" \", \"_\") }\n}\n\n// Example usage\nfun main() {\n    val filePaths = listOf(\"path/to file\", \"another path/to file\", \"file with spaces\")\n    val updatedPaths = replaceSpacesWithUnderscores(filePaths)\n    println(updatedPaths)\n}\n```"
  },
  {
    "task": "Convert a list of mixed-case strings to title case using map.",
    "code": "```kotlin\nfun convertToTitleCase(strings: List<String>): List<String> {\n    return strings.map { it.toLowerCase().split(\" \").joinToString(\" \") { word -> word.capitalize() } }\n}\n\nfun main() {\n    val mixedCaseStrings = listOf(\"hello world\", \"kotlin programming\", \"functional map\")\n    val titleCaseStrings = convertToTitleCase(mixedCaseStrings)\n    println(titleCaseStrings)\n}\n```"
  },
  {
    "task": "Use map to filter out only the digits from a list of mixed alphanumeric strings.",
    "code": "```kotlin\nfun main() {\n    val mixedList = listOf(\"abc123\", \"def456\", \"ghi789\", \"0jkl\")\n    val digitsList = mixedList.map { it.filter { char -> char.isDigit() } }\n    println(digitsList)\n}\n```"
  },
  {
    "task": "Apply map to convert a list of Unix timestamps to readable date strings.",
    "code": "```kotlin\nimport java.text.SimpleDateFormat\nimport java.util.Date\nimport java.util.Locale\n\nfun main() {\n    val timestamps = listOf(1635724800, 1635811200, 1635897600)\n    val dateFormat = SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\", Locale.getDefault())\n\n    val readableDates = timestamps.map { timestamp ->\n        val date = Date(timestamp * 1000L)\n        dateFormat.format(date)\n    }\n\n    println(readableDates)\n}\n```"
  },
  {
    "task": "Transform a list of dictionary objects by extracting a specific key's value using map.",
    "code": "```kotlin\ndata class Item(val key: String, val value: Any)\n\nfun main() {\n    val items = listOf(\n        Item(\"name\", \"Alice\"),\n        Item(\"name\", \"Bob\"),\n        Item(\"name\", \"Charlie\")\n    )\n    \n    val names = items.map { it.key }\n    \n    println(names)\n}\n```"
  },
  {
    "task": "Use map to compute the cube of each number in a list.",
    "code": "```kotlin\nfun main() {\n    val numbers = listOf(1, 2, 3, 4, 5)\n    val cubes = numbers.map { it * it * it }\n    println(cubes)\n}\n```"
  },
  {
    "task": "Translate a list of URLs to their respective domain names using a map function.",
    "code": "```kotlin\nfun extractDomain(url: String): String {\n    return url.substringAfter(\"//\").substringBefore(\"/\")\n}\n\nfun main() {\n    val urls = listOf(\"https://www.example.com\", \"http://subdomain.example.org\", \"https://anotherexample.net\")\n    val domains = urls.map(::extractDomain)\n    println(domains)\n}\n```"
  },
  {
    "task": "Use map to generate HTML list items from a list of text strings.",
    "code": "```kotlin\nfun generateHtmlListItems(texts: List<String>): List<String> {\n    return texts.map { \"<li>$it</li>\" }\n}\n\nfun main() {\n    val texts = listOf(\"Apple\", \"Banana\", \"Cherry\")\n    val htmlListItems = generateHtmlListItems(texts)\n    htmlListItems.forEach { println(it) }\n}\n```"
  },
  {
    "task": "Convert a list of polar coordinates to Cartesian coordinates using map.",
    "code": "```kotlin\ndata class PolarCoordinate(val radius: Double, val angle: Double)\ndata class CartesianCoordinate(val x: Double, val y: Double)\n\nfun convertPolarToCartesian(polarCoordinates: List<PolarCoordinate>): List<CartesianCoordinate> {\n    return polarCoordinates.map { polar ->\n        CartesianCoordinate(\n            x = polar.radius * kotlin.math.cos(polar.angle),\n            y = polar.radius * kotlin.math.sin(polar.angle)\n        )\n    }\n}\n\n// Example usage:\nval polarCoordinates = listOf(\n    PolarCoordinate(1.0, kotlin.math.PI / 4),\n    PolarCoordinate(2.0, kotlin.math.PI / 2)\n)\nval cartesianCoordinates = convertPolarToCartesian(polarCoordinates)\nprintln(cartesianCoordinates)\n```"
  },
  {
    "task": "Use map to decode a list of Base64 encoded strings.",
    "code": "```kotlin\nimport java.util.Base64\n\nfun decodeBase64Strings(encodedStrings: List<String>): List<String> {\n    return encodedStrings.map { encodedString ->\n        String(Base64.getDecoder().decode(encodedString))\n    }\n}\n\n// Example usage\nfun main() {\n    val encodedStrings = listOf(\"SGVsbG8gd29ybGQ=\", \"S290bGluIGlzIGZ1biE=\")\n    val decodedStrings = decodeBase64Strings(encodedStrings)\n    println(decodedStrings)\n}\n```"
  },
  {
    "task": "Convert a list of English sentences to Pig Latin using a map function.",
    "code": "```kotlin\nfun main() {\n    val sentences = listOf(\n        \"hello world\",\n        \"functions are fun\",\n        \"kotlin is great\"\n    )\n\n    val pigLatinSentences = sentences.map { sentence ->\n        sentence.split(\" \").joinToString(\" \") { word ->\n            val firstVowelIndex = word.indexOfFirst { it in \"aeiouAEIOU\" }\n            if (firstVowelIndex > 0) {\n                word.substring(firstVowelIndex) + word.substring(0, firstVowelIndex) + \"ay\"\n            } else {\n                word + \"yay\"\n            }\n        }\n    }\n\n    pigLatinSentences.forEach { println(it) }\n}\n```"
  },
  {
    "task": "Use map to anonymize a list of email addresses by masking them.",
    "code": "```kotlin\nfun anonymizeEmails(emails: List<String>): List<String> {\n    return emails.map { email ->\n        val indexOfAt = email.indexOf('@')\n        if (indexOfAt > 1) {\n            val firstChar = email[0]\n            val maskedPart = \"*\".repeat(indexOfAt - 1)\n            \"$firstChar$maskedPart${email.substring(indexOfAt)}\"\n        } else {\n            email\n        }\n    }\n}\n\nfun main() {\n    val emails = listOf(\"example1@test.com\", \"user2@example.org\", \"sample3@domain.net\")\n    val anonymizedEmails = anonymizeEmails(emails)\n    println(anonymizedEmails)\n}\n```"
  },
  {
    "task": "Apply map to reverse each string in a list of words.",
    "code": "```kotlin\nfun main() {\n    val words = listOf(\"apple\", \"banana\", \"cherry\")\n    val reversedWords = words.map { it.reversed() }\n    println(reversedWords)\n}\n```"
  },
  {
    "task": "Convert a list of hexadecimal color codes to RGB tuples using map.",
    "code": "```kotlin\nfun hexToRgb(hex: String): Triple<Int, Int, Int> {\n    val r = hex.substring(0, 2).toInt(16)\n    val g = hex.substring(2, 4).toInt(16)\n    val b = hex.substring(4, 6).toInt(16)\n    return Triple(r, g, b)\n}\n\nfun convertHexToRgb(hexColors: List<String>): List<Triple<Int, Int, Int>> {\n    return hexColors.map { hexToRgb(it) }\n}\n\n// Example usage\nval hexColors = listOf(\"FF5733\", \"33FF57\", \"3357FF\")\nval rgbColors = convertHexToRgb(hexColors)\nprintln(rgbColors) // [(255, 87, 51), (51, 255, 87), (51, 87, 255)]\n```"
  },
  {
    "task": "Use map to increment each integer in a list by a constant value.",
    "code": "```kotlin\nval numbers = listOf(1, 2, 3, 4, 5)\nval incrementedNumbers = numbers.map { it + 1 }\n```"
  },
  {
    "task": "Calculate the square root of each number in a list using a map function.",
    "code": "```kotlin\nfun main() {\n    val numbers = listOf(1.0, 4.0, 9.0, 16.0, 25.0)\n    val squareRoots = numbers.map { Math.sqrt(it) }\n    println(squareRoots)\n}\n```"
  },
  {
    "task": "Use map to convert a list of currency amounts from dollars to euros.",
    "code": "```kotlin\nfun convertDollarsToEuros(dollars: List<Double>, conversionRate: Double): List<Double> {\n    return dollars.map { it * conversionRate }\n}\n\nfun main() {\n    val dollarAmounts = listOf(10.0, 20.0, 30.0)\n    val conversionRate = 0.85 // Example conversion rate\n    val euroAmounts = convertDollarsToEuros(dollarAmounts, conversionRate)\n    println(euroAmounts)\n}\n```"
  },
  {
    "task": "Extract the domain from each email address in a list using map.",
    "code": "```kotlin\nfun extractDomains(emails: List<String>): List<String> {\n    return emails.map { email ->\n        email.substringAfter('@')\n    }\n}\n\n// Example usage:\nval emails = listOf(\"user1@example.com\", \"user2@test.org\", \"user3@sample.net\")\nval domains = extractDomains(emails)\nprintln(domains)  // Output: [example.com, test.org, sample.net]\n```"
  },
  {
    "task": "Use map to serialize a list of objects into JSON strings.",
    "code": "```kotlin\nimport kotlinx.serialization.*\nimport kotlinx.serialization.json.*\n\n@Serializable\ndata class Item(val id: Int, val name: String)\n\nfun main() {\n    val items = listOf(\n        Item(1, \"Item 1\"),\n        Item(2, \"Item 2\"),\n        Item(3, \"Item 3\")\n    )\n    \n    val jsonStrings = items.map { Json.encodeToString(it) }\n    println(jsonStrings)\n}\n```"
  },
  {
    "task": "Transform a list of file sizes from bytes to kilobytes using map.",
    "code": "```kotlin\nfun main() {\n    val fileSizesInBytes = listOf(1024, 2048, 5120, 8192, 16384)\n    val fileSizesInKilobytes = fileSizesInBytes.map { it / 1024.0 }\n    println(fileSizesInKilobytes)\n}\n```"
  },
  {
    "task": "Use map to append a suffix to each string in a list of identifiers.",
    "code": "```kotlin\nfun appendSuffixToIdentifiers(identifiers: List<String>, suffix: String): List<String> {\n    return identifiers.map { it + suffix }\n}\n\n// Example usage:\nval identifiers = listOf(\"id1\", \"id2\", \"id3\")\nval suffix = \"_suffix\"\nval updatedIdentifiers = appendSuffixToIdentifiers(identifiers, suffix)\nprintln(updatedIdentifiers)\n```"
  },
  {
    "task": "Apply map to convert measurements from inches to centimeters in a list.",
    "code": "```kotlin\nfun main() {\n    val measurementsInInches = listOf(10.0, 20.5, 30.0, 45.2)\n    val measurementsInCentimeters = measurementsInInches.map { it * 2.54 }\n    println(measurementsInCentimeters)\n}\n```"
  },
  {
    "task": "Use map to encrypt a list of plaintext messages using a simple cipher.",
    "code": "```kotlin\nfun encryptMessages(messages: List<String>, shift: Int): List<String> {\n    return messages.map { message ->\n        message.map { char ->\n            if (char.isLetter()) {\n                val base = if (char.isUpperCase()) 'A' else 'a'\n                ((char - base + shift) % 26 + base.toInt()).toChar()\n            } else {\n                char\n            }\n        }.joinToString(\"\")\n    }\n}\n\nfun main() {\n    val plaintextMessages = listOf(\"Hello World\", \"Kotlin Programming\", \"Functional Map\")\n    val shift = 3\n    val encryptedMessages = encryptMessages(plaintextMessages, shift)\n    encryptedMessages.forEach { println(it) }\n}\n```"
  },
  {
    "task": "Transform a list of date strings to day of the week names using a map function.",
    "code": "```kotlin\nimport java.text.SimpleDateFormat\nimport java.util.*\n\nfun main() {\n    val dateStrings = listOf(\"2023-10-01\", \"2023-10-02\", \"2023-10-03\")\n    val sdf = SimpleDateFormat(\"yyyy-MM-dd\", Locale.getDefault())\n    val dayFormat = SimpleDateFormat(\"EEEE\", Locale.getDefault())\n\n    val daysOfWeek = dateStrings.map { dateString ->\n        val date = sdf.parse(dateString)\n        dayFormat.format(date)\n    }\n\n    println(daysOfWeek)\n}\n```"
  },
  {
    "task": "Use map to derive the absolute value of each number in a list.",
    "code": "```kotlin\nfun main() {\n    val numbers = listOf(-1, -2, 3, -4, 5)\n    val absoluteValues = numbers.map { kotlin.math.abs(it) }\n    println(absoluteValues)\n}\n```"
  },
  {
    "task": "Convert a list of lowercase hexadecimal strings to uppercase using map.",
    "code": "```kotlin\nfun main() {\n    val hexStrings = listOf(\"a1b2\", \"c3d4\", \"e5f6\")\n    val uppercaseHexStrings = hexStrings.map { it.uppercase() }\n    println(uppercaseHexStrings)\n}\n```"
  },
  {
    "task": "Use map to find the maximum value in a list of lists of numbers.",
    "code": "```kotlin\nval lists = listOf(\n    listOf(1, 5, 3),\n    listOf(7, 2, 8),\n    listOf(4, 6, 9)\n)\n\nval maxValues = lists.map { it.maxOrNull() ?: Int.MIN_VALUE }\nval overallMax = maxValues.maxOrNull() ?: Int.MIN_VALUE\n\nprintln(overallMax)\n```"
  },
  {
    "task": "Apply map to extract the year from each date in a list of date objects.",
    "code": "```kotlin\nimport java.time.LocalDate\n\nfun main() {\n    val dates = listOf(\n        LocalDate.of(2021, 5, 17),\n        LocalDate.of(2020, 8, 23),\n        LocalDate.of(2019, 12, 30)\n    )\n    val years = dates.map { it.year }\n    println(years)\n}\n```"
  },
  {
    "task": "Use map to prepend a country code to each phone number in a list.",
    "code": "```kotlin\nfun prependCountryCode(countryCode: String, phoneNumbers: List<String>): List<String> {\n    return phoneNumbers.map { phoneNumber -> \"$countryCode$phoneNumber\" }\n}\n\nfun main() {\n    val phoneNumbers = listOf(\"1234567890\", \"0987654321\", \"1122334455\")\n    val countryCode = \"+1\"\n    val result = prependCountryCode(countryCode, phoneNumbers)\n    println(result)\n}\n```"
  },
  {
    "task": "Capitalize the last letter of each word in a list using a map function.",
    "code": "```kotlin\nfun capitalizeLastLetter(words: List<String>): List<String> {\n    return words.map { word ->\n        if (word.isNotEmpty()) {\n            word.dropLast(1) + word.last().uppercase()\n        } else {\n            word\n        }\n    }\n}\n\n// Example usage:\nval words = listOf(\"hello\", \"world\", \"kotlin\", \"map\")\nval capitalizedWords = capitalizeLastLetter(words)\nprintln(capitalizedWords) // Output: [hellO, worlD, kotliN, maP]\n```"
  },
  {
    "task": "Use map to transform a list of strings by removing all vowels.",
    "code": "```kotlin\nfun removeVowels(input: List<String>): List<String> {\n    val vowels = setOf('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n    return input.map { word ->\n        word.filter { it !in vowels }\n    }\n}\n\nfun main() {\n    val words = listOf(\"apple\", \"banana\", \"cherry\")\n    val transformedWords = removeVowels(words)\n    println(transformedWords)\n}\n```"
  },
  {
    "task": "Convert a list of music notes to their corresponding frequencies using map.",
    "code": "```kotlin\nfun noteToFrequency(note: String): Double {\n    val noteFrequencies = mapOf(\n        \"C4\" to 261.63,\n        \"D4\" to 293.66,\n        \"E4\" to 329.63,\n        \"F4\" to 349.23,\n        \"G4\" to 392.00,\n        \"A4\" to 440.00,\n        \"B4\" to 493.88\n    )\n    return noteFrequencies[note] ?: 0.0\n}\n\nfun main() {\n    val notes = listOf(\"C4\", \"E4\", \"G4\", \"A4\")\n    val frequencies = notes.map { noteToFrequency(it) }\n    println(frequencies)\n}\n```"
  },
  {
    "task": "Use map to find the reciprocal of each number in a list.",
    "code": "```kotlin\nfun main() {\n    val numbers = listOf(1.0, 2.0, 4.0, 8.0)\n    val reciprocals = numbers.map { 1 / it }\n    println(reciprocals)\n}\n```"
  },
  {
    "task": "Transform a list of URLs to their shortened versions using a map function.",
    "code": "```kotlin\nfun main() {\n    val urls = listOf(\n        \"https://example.com\",\n        \"https://example.org\",\n        \"https://example.net\"\n    )\n\n    val shortenedUrls = urls.map { url -> shortenUrl(url) }\n\n    println(shortenedUrls)\n}\n\nfun shortenUrl(url: String): String {\n    // This is a placeholder for URL shortening logic\n    return \"short.ly/\" + url.hashCode().toString()\n}\n```"
  },
  {
    "task": "Use map to generate a list of initials from a list of full names.",
    "code": "```kotlin\nfun main() {\n    val fullNames = listOf(\"John Doe\", \"Jane Smith\", \"Emily Davis\")\n    val initials = fullNames.map { name ->\n        name.split(\" \").map { it.first() }.joinToString(\"\")\n    }\n    println(initials)\n}\n```"
  },
  {
    "task": "Convert a list of decimal numbers to their binary string representations using map.",
    "code": "```kotlin\nfun convertToBinary(decimalNumbers: List<Int>): List<String> {\n    return decimalNumbers.map { it.toString(2) }\n}\n\nfun main() {\n    val decimalNumbers = listOf(10, 15, 20, 25)\n    val binaryStrings = convertToBinary(decimalNumbers)\n    println(binaryStrings)\n}\n```"
  },
  {
    "task": "Use map to adjust the brightness of each color in a list of RGB tuples.",
    "code": "```kotlin\nfun adjustBrightness(colors: List<Triple<Int, Int, Int>>, factor: Double): List<Triple<Int, Int, Int>> {\n    return colors.map { (r, g, b) ->\n        val newR = (r * factor).coerceIn(0.0, 255.0).toInt()\n        val newG = (g * factor).coerceIn(0.0, 255.0).toInt()\n        val newB = (b * factor).coerceIn(0.0, 255.0).toInt()\n        Triple(newR, newG, newB)\n    }\n}\n```"
  },
  {
    "task": "Apply map to filter out only alphabetic characters from a list of strings.",
    "code": "```kotlin\nfun main() {\n    val strings = listOf(\"Hello123\", \"World!@#\", \"Kotlin456\")\n    val alphabeticStrings = strings.map { it.filter { char -> char.isLetter() } }\n    println(alphabeticStrings)\n}\n```"
  },
  {
    "task": "Use map to compute the prime factorization of each number in a list.",
    "code": "```kotlin\nfun primeFactors(n: Int): List<Int> {\n    var num = n\n    val factors = mutableListOf<Int>()\n    var divisor = 2\n    while (num >= 2) {\n        while (num % divisor == 0) {\n            factors.add(divisor)\n            num /= divisor\n        }\n        divisor++\n    }\n    return factors\n}\n\nfun main() {\n    val numbers = listOf(12, 15, 20, 31)\n    val primeFactorizations = numbers.map { primeFactors(it) }\n    println(primeFactorizations)\n}\n```"
  },
  {
    "task": "Calculate the exponential of each number in a list using a map function.",
    "code": "```kotlin\nfun main() {\n    val numbers = listOf(1.0, 2.0, 3.0, 4.0, 5.0)\n    val exponentials = numbers.map { Math.exp(it) }\n    println(exponentials)\n}\n```"
  },
  {
    "task": "Use map to convert a list of text messages to morse code.",
    "code": "```kotlin\nfun textToMorse(text: String): String {\n    val morseCodeMap = mapOf(\n        'A' to \".-\",    'B' to \"-...\",  'C' to \"-.-.\",  'D' to \"-..\",\n        'E' to \".\",     'F' to \"..-.\",  'G' to \"--.\",   'H' to \"....\",\n        'I' to \"..\",    'J' to \".---\",  'K' to \"-.-\",   'L' to \".-..\",\n        'M' to \"--\",    'N' to \"-.\",    'O' to \"---\",   'P' to \".--.\",\n        'Q' to \"--.-\",  'R' to \".-.\",   'S' to \"...\",   'T' to \"-\",\n        'U' to \"..-\",   'V' to \"...-\",  'W' to \".--\",   'X' to \"-..-\",\n        'Y' to \"-.--\",  'Z' to \"--..\",\n        '1' to \".----\", '2' to \"..---\", '3' to \"...--\", '4' to \"....-\",\n        '5' to \".....\", '6' to \"-....\", '7' to \"--...\", '8' to \"---..\",\n        '9' to \"----.\", '0' to \"-----\",\n        ' ' to \"/\"\n    )\n    return text.uppercase().map { morseCodeMap[it] ?: \"\" }.joinToString(\" \")\n}\n\nfun main() {\n    val messages = listOf(\"hello world\", \"kotlin is fun\", \"morse code\")\n    val morseMessages = messages.map { textToMorse(it) }\n    morseMessages.forEach { println(it) }\n}\n```"
  },
  {
    "task": "Transform a list of JSON objects to XML strings using a map function.",
    "code": "```kotlin\nimport org.json.JSONObject\nimport org.json.XML\n\nfun main() {\n    val jsonObjects = listOf(\n        JSONObject(\"\"\"{\"name\": \"Alice\", \"age\": 30}\"\"\"),\n        JSONObject(\"\"\"{\"name\": \"Bob\", \"age\": 25}\"\"\"),\n        JSONObject(\"\"\"{\"name\": \"Charlie\", \"age\": 35}\"\"\")\n    )\n\n    val xmlStrings = jsonObjects.map { jsonObject ->\n        XML.toString(jsonObject)\n    }\n\n    xmlStrings.forEach { println(it) }\n}\n```"
  },
  {
    "task": "Use map to extract the extension from each filename in a list.",
    "code": "```kotlin\nval filenames = listOf(\"document.txt\", \"photo.jpg\", \"presentation.pptx\", \"archive.zip\")\nval extensions = filenames.map { it.substringAfterLast('.', \"\") }\nprintln(extensions)\n```"
  },
  {
    "task": "Convert a list of temperatures from Fahrenheit to Kelvin using map.",
    "code": "```kotlin\nfun main() {\n    val fahrenheitTemperatures = listOf(32.0, 68.0, 104.0, 212.0)\n    val kelvinTemperatures = fahrenheitTemperatures.map { (it - 32) * 5 / 9 + 273.15 }\n    println(kelvinTemperatures)\n}\n```"
  },
  {
    "task": "Use map to calculate the perimeter of each rectangle in a list of dimensions.",
    "code": "```kotlin\ndata class Rectangle(val width: Int, val height: Int)\n\nfun main() {\n    val rectangles = listOf(\n        Rectangle(2, 3),\n        Rectangle(5, 10),\n        Rectangle(7, 8)\n    )\n\n    val perimeters = rectangles.map { 2 * (it.width + it.height) }\n\n    println(perimeters)\n}\n```"
  },
  {
    "task": "Apply map to format a list of phone numbers into a standard format.",
    "code": "```kotlin\nfun main() {\n    val phoneNumbers = listOf(\"1234567890\", \"0987654321\", \"5551234567\")\n    val formattedNumbers = phoneNumbers.map { number ->\n        val areaCode = number.substring(0, 3)\n        val centralOfficeCode = number.substring(3, 6)\n        val lineNumber = number.substring(6, 10)\n        \"($areaCode) $centralOfficeCode-$lineNumber\"\n    }\n    println(formattedNumbers)\n}\n```"
  },
  {
    "task": "Use map to generate a hashed version of passwords from a list.",
    "code": "```kotlin\nimport java.security.MessageDigest\n\nfun hashPassword(password: String): String {\n    val bytes = MessageDigest.getInstance(\"SHA-256\").digest(password.toByteArray())\n    return bytes.joinToString(\"\") { \"%02x\".format(it) }\n}\n\nfun main() {\n    val passwords = listOf(\"password1\", \"password2\", \"password3\")\n    val hashedPasswords = passwords.map { hashPassword(it) }\n    println(hashedPasswords)\n}\n```"
  },
  {
    "task": "Convert a list of text paragraphs to a word count using map.",
    "code": "```kotlin\nfun main() {\n    val paragraphs = listOf(\n        \"First paragraph with some words.\",\n        \"Second paragraph has a few more words.\",\n        \"The third one is short.\"\n    )\n    \n    val wordCounts = paragraphs.map { it.split(\"\\\\s+\".toRegex()).size }\n    \n    println(wordCounts)\n}\n```"
  },
  {
    "task": "Use map to remove punctuation from each string in a list of sentences.",
    "code": "```kotlin\nfun main() {\n    val sentences = listOf(\"Hello, world!\", \"Kotlin is great.\", \"Let's code!\")\n    val cleanedSentences = sentences.map { it.replace(Regex(\"[^\\\\w\\\\s]\"), \"\") }\n    println(cleanedSentences)\n}\n```"
  },
  {
    "task": "Transform a list of URLs to their base domain using a map function.",
    "code": "```kotlin\nfun main() {\n    val urls = listOf(\n        \"https://www.example.com/path\",\n        \"http://another-example.org/another/path\",\n        \"https://subdomain.example.net\"\n    )\n\n    val baseDomains = urls.map { url ->\n        url.split(\"/\")[2]\n    }\n\n    println(baseDomains)\n}\n```"
  },
  {
    "task": "Use map to translate a list of expressions to their symbolic algebraic forms.",
    "code": "```kotlin\nfun main() {\n    val expressions = listOf(\"1+1\", \"2*3\", \"4-2\", \"6/3\")\n    val symbolicForms = expressions.map { expressionToSymbolicForm(it) }\n    println(symbolicForms)\n}\n\nfun expressionToSymbolicForm(expression: String): String {\n    return when (expression) {\n        \"1+1\" -> \"Addition\"\n        \"2*3\" -> \"Multiplication\"\n        \"4-2\" -> \"Subtraction\"\n        \"6/3\" -> \"Division\"\n        else -> \"Unknown\"\n    }\n}\n```"
  },
  {
    "task": "Apply map to convert a list of ASCII codes to corresponding characters.",
    "code": "```kotlin\nfun main() {\n    val asciiCodes = listOf(65, 66, 67, 68, 69)\n    val characters = asciiCodes.map { it.toChar() }\n    println(characters)\n}\n```"
  },
  {
    "task": "Use map to transform a list of text strings to their lemmatized forms.",
    "code": "```kotlin\nimport opennlp.tools.lemmatizer.SimpleLemmatizer\nimport java.io.File\n\nfun lemmatizeWords(words: List<String>, lemmatizer: SimpleLemmatizer): List<String> {\n    return words.map { word ->\n        lemmatizer.lemmatize(word, \"O\") ?: word\n    }\n}\n\nfun main() {\n    val lemmatizerFile = File(\"path/to/lemmatizer.dict\")\n    val lemmatizer = SimpleLemmatizer(lemmatizerFile.inputStream())\n\n    val textStrings = listOf(\"running\", \"played\", \"better\")\n    val lemmatizedForms = lemmatizeWords(textStrings, lemmatizer)\n\n    println(lemmatizedForms)\n}\n```"
  },
  {
    "task": "Convert a list of HTML strings to plain text using map.",
    "code": "```kotlin\nfun convertHtmlToPlainText(htmlList: List<String>): List<String> {\n    return htmlList.map { htmlString ->\n        htmlString.replace(Regex(\"<[^>]*>\"), \"\")\n    }\n}\n\nfun main() {\n    val htmlStrings = listOf(\"<p>Hello</p>\", \"<div>World</div>\", \"<span>!</span>\")\n    val plainTextList = convertHtmlToPlainText(htmlStrings)\n    println(plainTextList)\n}\n```"
  },
  {
    "task": "Use map to create a summary of each article in a list of texts.",
    "code": "```kotlin\nfun summarizeArticles(articles: List<String>): List<String> {\n    return articles.map { article ->\n        if (article.length <= 100) {\n            article\n        } else {\n            article.substring(0, 100) + \"...\"\n        }\n    }\n}\n\n// Example usage\nval articles = listOf(\n    \"This is a short article.\",\n    \"This is a longer article that should be summarized because it exceeds the hundred characters limit imposed by the task description.\"\n)\n\nval summaries = summarizeArticles(articles)\nsummaries.forEach { println(it) }\n```"
  },
  {
    "task": "Transform a list of paths to their absolute paths using a map function.",
    "code": "```kotlin\nimport java.nio.file.Paths\n\nfun main() {\n    val paths = listOf(\"user/docs/file1.txt\", \"user/docs/file2.txt\", \"user/docs/file3.txt\")\n    val absolutePaths = paths.map { path -> Paths.get(path).toAbsolutePath().toString() }\n    println(absolutePaths)\n}\n```"
  },
  {
    "task": "Use map to generate QR codes from a list of URLs.",
    "code": "```kotlin\nimport net.glxn.qrgen.javase.QRCode\nimport java.io.File\n\nfun generateQRCodes(urls: List<String>): List<File> {\n    return urls.map { url ->\n        QRCode.from(url).file()\n    }\n}\n\nfun main() {\n    val urls = listOf(\"https://example.com\", \"https://another.com\")\n    val qrFiles = generateQRCodes(urls)\n    qrFiles.forEach { file ->\n        println(\"QR code generated: ${file.absolutePath}\")\n    }\n}\n```"
  },
  {
    "task": "Convert a list of angles from degrees to radians using map.",
    "code": "```kotlin\nfun main() {\n    val degrees = listOf(0.0, 30.0, 45.0, 60.0, 90.0)\n    val radians = degrees.map { Math.toRadians(it) }\n    println(radians)\n}\n```"
  },
  {
    "task": "Use map to anonymize a list of IP addresses by masking parts of them.",
    "code": "```kotlin\nfun anonymizeIpAddresses(ipAddresses: List<String>): List<String> {\n    return ipAddresses.map { ip ->\n        ip.split('.').let { parts ->\n            parts.take(2).joinToString(\".\") + \".x.x\"\n        }\n    }\n}\n\nfun main() {\n    val ipAddresses = listOf(\"192.168.1.1\", \"10.0.0.5\", \"172.16.0.10\")\n    val anonymizedIPs = anonymizeIpAddresses(ipAddresses)\n    println(anonymizedIPs)\n}\n```"
  },
  {
    "task": "Transform a list of tuples by swapping their elements using a map function.",
    "code": "```kotlin\nfun main() {\n    val listOfTuples = listOf(Pair(1, 2), Pair(3, 4), Pair(5, 6))\n    val swappedList = listOfTuples.map { Pair(it.second, it.first) }\n    println(swappedList)\n}\n```"
  },
  {
    "task": "Use map to compute the greatest common divisor of pairs in a list of number pairs.",
    "code": "```kotlin\nfun gcd(a: Int, b: Int): Int {\n    return if (b == 0) a else gcd(b, a % b)\n}\n\nfun main() {\n    val numberPairs = listOf(Pair(48, 18), Pair(56, 98), Pair(25, 15))\n    val gcdResults = numberPairs.map { (a, b) -> gcd(a, b) }\n    println(gcdResults)\n}\n```"
  },
  {
    "task": "Convert a list of file paths to their directory names using map.",
    "code": "```kotlin\nfun main() {\n    val filePaths = listOf(\"/home/user/file1.txt\", \"/usr/local/bin/script.sh\", \"/var/log/system.log\")\n    val directoryNames = filePaths.map { filePath -> filePath.substringBeforeLast(\"/\") }\n    println(directoryNames)\n}\n```"
  },
  {
    "task": "Use map to replace each vowel in a list of strings with a specific character.",
    "code": "```kotlin\nfun replaceVowelsWithChar(strings: List<String>, replacementChar: Char): List<String> {\n    return strings.map { str ->\n        str.map { char ->\n            if (char in \"aeiouAEIOU\") replacementChar else char\n        }.joinToString(\"\")\n    }\n}\n\nfun main() {\n    val strings = listOf(\"hello\", \"world\", \"kotlin\")\n    val replacementChar = '*'\n    val result = replaceVowelsWithChar(strings, replacementChar)\n    println(result)\n}\n```"
  },
  {
    "task": "Transform a list of integers to their hexadecimal representations using map.",
    "code": "```kotlin\nfun main() {\n    val numbers = listOf(10, 15, 255, 16)\n    val hexNumbers = numbers.map { it.toString(16) }\n    println(hexNumbers)\n}\n```"
  },
  {
    "task": "Use map to apply a transformation matrix to a list of 2D vectors.",
    "code": "```kotlin\ndata class Vector2D(val x: Double, val y: Double)\n\nfun transformVectors(vectors: List<Vector2D>, matrix: List<List<Double>>): List<Vector2D> {\n    return vectors.map { vector ->\n        val newX = matrix[0][0] * vector.x + matrix[0][1] * vector.y\n        val newY = matrix[1][0] * vector.x + matrix[1][1] * vector.y\n        Vector2D(newX, newY)\n    }\n}\n\nfun main() {\n    val vectors = listOf(Vector2D(1.0, 2.0), Vector2D(3.0, 4.0))\n    val matrix = listOf(\n        listOf(2.0, 0.0),\n        listOf(0.0, 2.0)\n    )\n    val transformedVectors = transformVectors(vectors, matrix)\n    println(transformedVectors)\n}\n```"
  },
  {
    "task": "Convert a list of text strings to their phonetic alphabet equivalents using map.",
    "code": "```kotlin\nfun main() {\n    val phoneticMap = mapOf(\n        \"A\" to \"Alpha\", \"B\" to \"Bravo\", \"C\" to \"Charlie\", \"D\" to \"Delta\",\n        \"E\" to \"Echo\", \"F\" to \"Foxtrot\", \"G\" to \"Golf\", \"H\" to \"Hotel\",\n        \"I\" to \"India\", \"J\" to \"Juliett\", \"K\" to \"Kilo\", \"L\" to \"Lima\",\n        \"M\" to \"Mike\", \"N\" to \"November\", \"O\" to \"Oscar\", \"P\" to \"Papa\",\n        \"Q\" to \"Quebec\", \"R\" to \"Romeo\", \"S\" to \"Sierra\", \"T\" to \"Tango\",\n        \"U\" to \"Uniform\", \"V\" to \"Victor\", \"W\" to \"Whiskey\", \"X\" to \"X-ray\",\n        \"Y\" to \"Yankee\", \"Z\" to \"Zulu\"\n    )\n\n    val textList = listOf(\"HELLO\", \"WORLD\")\n    val phoneticList = textList.map { word ->\n        word.map { char ->\n            phoneticMap[char.toString()] ?: char.toString()\n        }.joinToString(\" \")\n    }\n\n    println(phoneticList)\n}\n```"
  },
  {
    "task": "Use map to determine if each word in a list is a palindrome, returning booleans.",
    "code": "```kotlin\nfun main() {\n    val words = listOf(\"level\", \"world\", \"radar\", \"hello\")\n    val palindromeChecks = words.map { it == it.reversed() }\n    println(palindromeChecks)\n}\n```"
  },
  {
    "task": "Transform a list of dictionaries by renaming a specified key using a map function.",
    "code": "```kotlin\nfun transformList(dictionaries: List<Map<String, Any>>, oldKey: String, newKey: String): List<Map<String, Any>> {\n    return dictionaries.map { dict ->\n        dict.mapKeys { entry ->\n            if (entry.key == oldKey) newKey else entry.key\n        }\n    }\n}\n\n// Example usage\nval dictionaries = listOf(\n    mapOf(\"oldKey\" to \"value1\", \"anotherKey\" to \"value2\"),\n    mapOf(\"oldKey\" to \"value3\", \"anotherKey\" to \"value4\")\n)\n\nval transformed = transformList(dictionaries, \"oldKey\", \"newKey\")\n\nprintln(transformed)\n```"
  },
  {
    "task": "Use map to compute the logarithm of each number in a list.",
    "code": "```kotlin\nimport kotlin.math.log\n\nfun main() {\n    val numbers = listOf(1.0, 10.0, 100.0, 1000.0)\n    val logValues = numbers.map { log(it) }\n    println(logValues)\n}\n```"
  },
  {
    "task": "Convert a list of image file paths to grayscale versions using map.",
    "code": "```kotlin\nimport java.awt.image.BufferedImage\nimport java.io.File\nimport javax.imageio.ImageIO\n\nfun convertToGrayscale(image: BufferedImage): BufferedImage {\n    val grayscaleImage = BufferedImage(image.width, image.height, BufferedImage.TYPE_BYTE_GRAY)\n    val graphics = grayscaleImage.createGraphics()\n    graphics.drawImage(image, 0, 0, null)\n    graphics.dispose()\n    return grayscaleImage\n}\n\nfun main() {\n    val imagePaths = listOf(\"path/to/image1.jpg\", \"path/to/image2.png\", \"path/to/image3.bmp\")\n\n    val grayscaleImages = imagePaths.map { path ->\n        val originalImage = ImageIO.read(File(path))\n        convertToGrayscale(originalImage)\n    }\n\n    grayscaleImages.forEachIndexed { index, grayscaleImage ->\n        ImageIO.write(grayscaleImage, \"jpg\", File(\"path/to/grayscale_image${index + 1}.jpg\"))\n    }\n}\n```"
  },
  {
    "task": "Use map to flatten a list of lists of strings into a single list of strings.",
    "code": "```kotlin\nfun main() {\n    val listOfLists = listOf(\n        listOf(\"one\", \"two\", \"three\"),\n        listOf(\"four\", \"five\"),\n        listOf(\"six\", \"seven\", \"eight\", \"nine\")\n    )\n\n    val flattenedList = listOfLists.flatMap { it }\n    println(flattenedList)\n}\n```"
  },
  {
    "task": "Transform a list of temperature readings to temperature anomalies using a map function.",
    "code": "```kotlin\nfun main() {\n    val temperatures = listOf(15.5, 17.0, 16.2, 18.1, 14.8)\n    val averageTemperature = temperatures.average()\n    val anomalies = temperatures.map { it - averageTemperature }\n    println(anomalies)\n}\n```"
  }
]