[
  {
    "task": "Create a new instance of a class that represents a book, with properties for title, author, and ISBN number.",
    "code": "```kotlin\nclass Book(val title: String, val author: String, val isbn: String)\n\nfun main() {\n    val myBook = Book(\"1984\", \"George Orwell\", \"1234567890\")\n}\n```"
  },
  {
    "task": "Instantiate an object of a class named Car, and set its make, model, and year attributes.",
    "code": "```kotlin\nclass Car(var make: String, var model: String, var year: Int)\n\nfun main() {\n    val myCar = Car(make = \"Toyota\", model = \"Corolla\", year = 2020)\n}\n```"
  },
  {
    "task": "Develop a class to represent a rectangle, then create an object with specific width and height.",
    "code": "```kotlin\nclass Rectangle(val width: Double, val height: Double)\n\nfun main() {\n    val rectangle = Rectangle(5.0, 10.0)\n}\n```"
  },
  {
    "task": "Construct an object of a class Person, initializing it with a name and age.",
    "code": "```kotlin\nclass Person(val name: String, val age: Int)\n\nfun main() {\n    val person = Person(\"John Doe\", 30)\n}\n```"
  },
  {
    "task": "Create a new object from a class called Circle, initializing it with a radius value.",
    "code": "```kotlin\nclass Circle(val radius: Double)\n\nfun main() {\n    val circle = Circle(5.0)\n}\n```"
  },
  {
    "task": "Instantiate a class named Student with properties for name, student ID, and GPA.",
    "code": "```kotlin\nclass Student(val name: String, val studentId: String, val gpa: Double)\n\nfun main() {\n    val student = Student(\"John Doe\", \"123456\", 3.75)\n}\n```"
  },
  {
    "task": "Design a class for a smartphone, then create an instance with specific brand, model, and storage capacity.",
    "code": "```kotlin\nclass Smartphone(val brand: String, val model: String, val storageCapacity: Int)\n\nfun main() {\n    val mySmartphone = Smartphone(\"Apple\", \"iPhone 13\", 128)\n}\n```"
  },
  {
    "task": "Create an object of a class named BankAccount, initializing it with an account number and balance.",
    "code": "```kotlin\nclass BankAccount(val accountNumber: String, val balance: Double)\n\nfun main() {\n    val account = BankAccount(\"123456789\", 1000.0)\n}\n```"
  },
  {
    "task": "Write a class for a movie, then instantiate it with a title, director, and release year.",
    "code": "```kotlin\nclass Movie(val title: String, val director: String, val releaseYear: Int)\n\nfun main() {\n    val movie = Movie(\"Inception\", \"Christopher Nolan\", 2010)\n}\n```"
  },
  {
    "task": "Define a class representing a point in 2D space and create an object with x and y coordinates.",
    "code": "```kotlin\nclass Point(val x: Double, val y: Double)\n\nfun main() {\n    val point = Point(3.0, 4.0)\n}\n```"
  },
  {
    "task": "Create an instance of a class called Computer with attributes for CPU, RAM, and storage.",
    "code": "```kotlin\nclass Computer(val cpu: String, val ram: String, val storage: String)\n\nfun main() {\n    val myComputer = Computer(cpu = \"Intel i7\", ram = \"16GB\", storage = \"512GB SSD\")\n}\n```"
  },
  {
    "task": "Design a class for a Song with properties for title, artist, and duration, and instantiate it.",
    "code": "```kotlin\nclass Song(val title: String, val artist: String, val duration: Int)\n\nfun main() {\n    val song = Song(\"Imagine\", \"John Lennon\", 183)\n}\n```"
  },
  {
    "task": "Create a new instance of a class named Pet, initializing it with type, breed, and age.",
    "code": "```kotlin\nclass Pet(val type: String, val breed: String, val age: Int)\n\nfun main() {\n    val myPet = Pet(type = \"Dog\", breed = \"Labrador\", age = 3)\n}\n```"
  },
  {
    "task": "Instantiate an object of a class named House with attributes for address, number of bedrooms, and price.",
    "code": "```kotlin\nclass House(val address: String, val numberOfBedrooms: Int, val price: Double)\n\nfun main() {\n    val house = House(\"123 Main St\", 3, 250000.0)\n}\n```"
  },
  {
    "task": "Develop a class for a Camera, then create an object with resolution and zoom level attributes.",
    "code": "```kotlin\nclass Camera(val resolution: String, val zoomLevel: Int)\n\nfun main() {\n    val myCamera = Camera(\"1080p\", 5)\n    println(\"Camera Resolution: ${myCamera.resolution}, Zoom Level: ${myCamera.zoomLevel}\")\n}\n```"
  },
  {
    "task": "Construct an object from a class named Bicycle with properties for brand, type, and gear count.",
    "code": "```kotlin\nclass Bicycle(val brand: String, val type: String, val gearCount: Int)\n\nfun main() {\n    val myBicycle = Bicycle(brand = \"Giant\", type = \"Mountain\", gearCount = 21)\n}\n```"
  },
  {
    "task": "Create a class for a book author with name and nationality, then instantiate it.",
    "code": "```kotlin\nclass Author(val name: String, val nationality: String)\n\nfun main() {\n    val author = Author(\"Jane Doe\", \"American\")\n}\n```"
  },
  {
    "task": "Define a class representing a video game with attributes for title, genre, and platform, and create an object.",
    "code": "```kotlin\nclass VideoGame(val title: String, val genre: String, val platform: String)\n\nfun main() {\n    val game = VideoGame(\"The Legend of Zelda\", \"Action-Adventure\", \"Nintendo Switch\")\n}\n```"
  },
  {
    "task": "Instantiate a class named Plane with properties for airline, model, and capacity.",
    "code": "```kotlin\nclass Plane(val airline: String, val model: String, val capacity: Int)\n\nfun main() {\n    val plane = Plane(\"Airways\", \"Boeing 747\", 416)\n}\n```"
  },
  {
    "task": "Create a new object of a class called Lamp, initializing it with color and brightness level.",
    "code": "```kotlin\nclass Lamp(val color: String, val brightnessLevel: Int)\n\nfun main() {\n    val lamp = Lamp(\"Red\", 75)\n}\n```"
  },
  {
    "task": "Design a class for a TV show with properties for title, season, and episode count, then instantiate it.",
    "code": "```kotlin\nclass TVShow(val title: String, val season: Int, val episodeCount: Int)\n\nfun main() {\n    val myShow = TVShow(\"Example Show\", 3, 24)\n}\n```"
  },
  {
    "task": "Instantiate an object of a class named Garden with attributes for size and number of plants.",
    "code": "```kotlin\nclass Garden(val size: Int, val numberOfPlants: Int)\n\nfun main() {\n    val myGarden = Garden(size = 100, numberOfPlants = 50)\n}\n```"
  },
  {
    "task": "Develop a class for a Train, then create an object with properties for type and number of carriages.",
    "code": "```kotlin\nclass Train(val type: String, val numberOfCarriages: Int)\n\nfun main() {\n    val train = Train(\"Freight\", 20)\n    println(\"Train type: ${train.type}, Number of carriages: ${train.numberOfCarriages}\")\n}\n```"
  },
  {
    "task": "Define a class representing a planet with attributes for name, size, and distance from the sun, and create an object.",
    "code": "```kotlin\nclass Planet(val name: String, val size: Double, val distanceFromSun: Double)\n\nfun main() {\n    val earth = Planet(\"Earth\", 12742.0, 149.6)\n}\n```"
  },
  {
    "task": "Create an instance of a class named Fridge with properties for brand and capacity.",
    "code": "```kotlin\nclass Fridge(val brand: String, val capacity: Int)\n\nfun main() {\n    val myFridge = Fridge(\"Samsung\", 300)\n}\n```"
  },
  {
    "task": "Design a class for a Restaurant with attributes for name, cuisine type, and location, then create an instance.",
    "code": "```kotlin\nclass Restaurant(val name: String, val cuisineType: String, val location: String)\n\nfun main() {\n    val restaurant = Restaurant(\"Gourmet Bistro\", \"French\", \"Paris\")\n}\n```"
  },
  {
    "task": "Create a new object from a class named Bookstore, initializing it with name and number of books.",
    "code": "```kotlin\nclass Bookstore(val name: String, val numberOfBooks: Int)\n\nfun main() {\n    val bookstore = Bookstore(\"The Great Reads\", 150)\n}\n```"
  },
  {
    "task": "Instantiate a class named Library with properties for total books and number of members.",
    "code": "```kotlin\nclass Library(val totalBooks: Int, val numberOfMembers: Int)\n\nfun main() {\n    val library = Library(totalBooks = 1000, numberOfMembers = 50)\n}\n```"
  },
  {
    "task": "Write a class for a Beverage with properties for name, type, and volume, and instantiate it.",
    "code": "```kotlin\nclass Beverage(val name: String, val type: String, val volume: Double)\n\nfun main() {\n    val beverage = Beverage(\"Cola\", \"Soda\", 500.0)\n}\n```"
  },
  {
    "task": "Create an object of a class named User with attributes for username, email, and password.",
    "code": "```kotlin\nclass User(val username: String, val email: String, val password: String)\n\nfun main() {\n    val user = User(\"exampleUser\", \"user@example.com\", \"securePassword123\")\n}\n```"
  },
  {
    "task": "Define a class for a Laptop with properties for brand, processor, and RAM, then instantiate it.",
    "code": "```kotlin\nclass Laptop(val brand: String, val processor: String, val ram: Int)\n\nfun main() {\n    val myLaptop = Laptop(\"Dell\", \"Intel Core i7\", 16)\n}\n```"
  },
  {
    "task": "Construct an object from a class named Mountain with attributes for name and elevation.",
    "code": "```kotlin\nclass Mountain(val name: String, val elevation: Int)\n\nfun main() {\n    val mountain = Mountain(\"Everest\", 8848)\n    println(\"Mountain Name: ${mountain.name}, Elevation: ${mountain.elevation}\")\n}\n```"
  },
  {
    "task": "Create an instance of a class called Weather with properties for temperature, humidity, and condition.",
    "code": "```kotlin\nclass Weather(val temperature: Double, val humidity: Double, val condition: String)\n\nfun main() {\n    val weather = Weather(temperature = 25.0, humidity = 65.0, condition = \"Sunny\")\n}\n```"
  },
  {
    "task": "Design a class for a Classroom with attributes for room number and capacity, then create an instance.",
    "code": "```kotlin\nclass Classroom(val roomNumber: Int, val capacity: Int)\n\nfun main() {\n    val classroom = Classroom(roomNumber = 101, capacity = 30)\n}\n```"
  },
  {
    "task": "Instantiate an object of a class named Zoo with properties for name and number of animals.",
    "code": "```kotlin\nclass Zoo(val name: String, val numberOfAnimals: Int)\n\nfun main() {\n    val zoo = Zoo(\"Safari Park\", 150)\n}\n```"
  },
  {
    "task": "Develop a class for an Album with properties for name, artist, and release date, then instantiate it.",
    "code": "```kotlin\nclass Album(val name: String, val artist: String, val releaseDate: String)\n\nfun main() {\n    val album = Album(\"The Dark Side of the Moon\", \"Pink Floyd\", \"1973-03-01\")\n}\n```"
  },
  {
    "task": "Create a new object from a class named Hotel, initializing it with name, location, and star rating.",
    "code": "```kotlin\nclass Hotel(val name: String, val location: String, val starRating: Int)\n\nfun main() {\n    val hotel = Hotel(\"Grand Hotel\", \"New York\", 5)\n}\n```"
  },
  {
    "task": "Write a class for a Recipe with properties for name, ingredients, and cooking time, and instantiate it.",
    "code": "```kotlin\ndata class Recipe(val name: String, val ingredients: List<String>, val cookingTime: Int)\n\nfun main() {\n    val recipe = Recipe(\n        name = \"Pasta\",\n        ingredients = listOf(\"Pasta\", \"Tomato Sauce\", \"Cheese\"),\n        cookingTime = 20\n    )\n}\n```"
  },
  {
    "task": "Define a class representing a Conference with attributes for name, date, and number of attendees, and create an object.",
    "code": "```kotlin\nclass Conference(val name: String, val date: String, val numberOfAttendees: Int)\n\nfun main() {\n    val conference = Conference(\"Tech Summit\", \"2023-10-15\", 250)\n}\n```"
  },
  {
    "task": "Create an instance of a class called Park with properties for name, location, and area.",
    "code": "```kotlin\nclass Park(val name: String, val location: String, val area: Double)\n\nfun main() {\n    val centralPark = Park(\"Central Park\", \"New York City\", 3.41)\n}\n```"
  },
  {
    "task": "Design a class for a Bicycle with attributes for brand, type, and wheel size, then create an instance.",
    "code": "```kotlin\nclass Bicycle(val brand: String, val type: String, val wheelSize: Int)\n\nfun main() {\n    val myBicycle = Bicycle(brand = \"Trek\", type = \"Mountain\", wheelSize = 29)\n}\n```"
  },
  {
    "task": "Instantiate an object of a class named Festival with properties for name, location, and duration.",
    "code": "```kotlin\nclass Festival(val name: String, val location: String, val duration: Int)\n\nfun main() {\n    val festival = Festival(name = \"Summer Fest\", location = \"Beachside\", duration = 3)\n}\n```"
  },
  {
    "task": "Develop a class for a Ship with properties for name, capacity, and type, then instantiate it.",
    "code": "```kotlin\nclass Ship(val name: String, val capacity: Int, val type: String)\n\nfun main() {\n    val myShip = Ship(\"SS Enterprise\", 3000, \"Cruiser\")\n}\n```"
  },
  {
    "task": "Create an object of a class named Currency with attributes for name, symbol, and exchange rate.",
    "code": "```kotlin\nclass Currency(val name: String, val symbol: String, val exchangeRate: Double)\n\nfun main() {\n    val currency = Currency(\"US Dollar\", \"$\", 1.0)\n}\n```"
  },
  {
    "task": "Define a class for a Gadget with properties for name, brand, and functionality, then instantiate it.",
    "code": "```kotlin\nclass Gadget(val name: String, val brand: String, val functionality: String)\n\nfun main() {\n    val gadget = Gadget(\"Smartphone\", \"TechBrand\", \"Communication\")\n}\n```"
  },
  {
    "task": "Construct an object from a class named Bridge with attributes for name, length, and location.",
    "code": "```kotlin\nclass Bridge(val name: String, val length: Double, val location: String)\n\nfun main() {\n    val bridge = Bridge(\"Golden Gate\", 2737.4, \"San Francisco\")\n}\n```"
  },
  {
    "task": "Create an instance of a class called Forest with properties for name, area, and tree species.",
    "code": "```kotlin\nclass Forest(val name: String, val area: Double, val treeSpecies: List<String>)\n\nfun main() {\n    val forest = Forest(\"Amazon\", 5500.0, listOf(\"Cedar\", \"Fir\", \"Pine\"))\n}\n```"
  },
  {
    "task": "Design a class for a Sculpture with attributes for title, artist, and material, then create an instance.",
    "code": "```kotlin\nclass Sculpture(val title: String, val artist: String, val material: String)\n\nfun main() {\n    val sculpture = Sculpture(\"The Thinker\", \"Auguste Rodin\", \"Bronze\")\n}\n```"
  },
  {
    "task": "Instantiate an object of a class named Aquarium with properties for name and number of tanks.",
    "code": "```kotlin\nclass Aquarium(val name: String, val numberOfTanks: Int)\n\nfun main() {\n    val aquarium = Aquarium(name = \"Ocean World\", numberOfTanks = 5)\n}\n```"
  },
  {
    "task": "Develop a class for a Play with properties for title, playwright, and genre, then instantiate it.",
    "code": "```kotlin\nclass Play(val title: String, val playwright: String, val genre: String)\n\nfun main() {\n    val play = Play(\"Hamlet\", \"William Shakespeare\", \"Tragedy\")\n}\n```"
  },
  {
    "task": "Create a new object from a class named Telescope, initializing it with type and focal length.",
    "code": "```kotlin\nclass Telescope(val type: String, val focalLength: Double)\n\nfun main() {\n    val telescope = Telescope(\"Refractor\", 1200.0)\n}\n```"
  },
  {
    "task": "Write a class for a Monument with properties for name, location, and year built, and instantiate it.",
    "code": "```kotlin\nclass Monument(val name: String, val location: String, val yearBuilt: Int)\n\nfun main() {\n    val monument = Monument(\"Eiffel Tower\", \"Paris\", 1889)\n}\n```"
  },
  {
    "task": "Define a class representing a Star with attributes for name, size, and distance from Earth, and create an object.",
    "code": "```kotlin\nclass Star(val name: String, val size: Double, val distanceFromEarth: Double)\n\nfun main() {\n    val star = Star(\"Sirius\", 1.71, 8.6)\n}\n```"
  },
  {
    "task": "Create an instance of a class called Festival with properties for name, location, and number of events.",
    "code": "```kotlin\nclass Festival(val name: String, val location: String, val numberOfEvents: Int)\n\nfun main() {\n    val festival = Festival(\"Spring Fest\", \"New York\", 10)\n}\n```"
  },
  {
    "task": "Design a class for a Clock with attributes for brand, type, and display, then create an instance.",
    "code": "```kotlin\nclass Clock(val brand: String, val type: String, val display: String)\n\nfun main() {\n    val myClock = Clock(brand = \"Seiko\", type = \"Analog\", display = \"Digital\")\n}\n```"
  },
  {
    "task": "Instantiate an object of a class named Stadium with properties for name, capacity, and location.",
    "code": "```kotlin\nclass Stadium(val name: String, val capacity: Int, val location: String)\n\nfun main() {\n    val stadium = Stadium(name = \"National Stadium\", capacity = 50000, location = \"City Center\")\n}\n```"
  },
  {
    "task": "Develop a class for a Potion with properties for name, effect, and duration, then instantiate it.",
    "code": "```kotlin\nclass Potion(val name: String, val effect: String, val duration: Int)\n\nfun main() {\n    val healingPotion = Potion(\"Healing Potion\", \"Restores health\", 5)\n}\n```"
  },
  {
    "task": "Create an object of a class named Planet with attributes for name, mass, and orbital period.",
    "code": "```kotlin\nclass Planet(val name: String, val mass: Double, val orbitalPeriod: Double)\n\nfun main() {\n    val earth = Planet(\"Earth\", 5.972e24, 365.25)\n}\n```"
  },
  {
    "task": "Define a class for a Lighthouse with properties for name, height, and light range, then instantiate it.",
    "code": "```kotlin\nclass Lighthouse(val name: String, val height: Double, val lightRange: Double)\n\nfun main() {\n    val lighthouse = Lighthouse(\"Beacon Tower\", 50.0, 20.0)\n}\n```"
  },
  {
    "task": "Construct an object from a class named Volcano with attributes for name, height, and eruption history.",
    "code": "```kotlin\nclass Volcano(val name: String, val height: Double, val eruptionHistory: List<String>)\n\nfun main() {\n    val volcano = Volcano(\n        name = \"Mount Fuji\",\n        height = 3776.24,\n        eruptionHistory = listOf(\"1707\", \"864\", \"1708\")\n    )\n}\n```"
  },
  {
    "task": "Create an instance of a class called Sculpture with properties for title, artist, and year created.",
    "code": "```kotlin\nclass Sculpture(val title: String, val artist: String, val yearCreated: Int)\n\nfun main() {\n    val sculpture = Sculpture(\"The Thinker\", \"Auguste Rodin\", 1902)\n}\n```"
  },
  {
    "task": "Design a class for a Ship with attributes for name, type, and displacement, then create an instance.",
    "code": "```kotlin\nclass Ship(val name: String, val type: String, val displacement: Double)\n\nfun main() {\n    val ship = Ship(name = \"HMS Victory\", type = \"Warship\", displacement = 3500.0)\n}\n```"
  },
  {
    "task": "Instantiate an object of a class named Opera with properties for title, composer, and act count.",
    "code": "```kotlin\nclass Opera(val title: String, val composer: String, val actCount: Int)\n\nfun main() {\n    val opera = Opera(title = \"La Traviata\", composer = \"Giuseppe Verdi\", actCount = 3)\n}\n```"
  },
  {
    "task": "Develop a class for a Waterfall with properties for name, height, and flow rate, then instantiate it.",
    "code": "```kotlin\nclass Waterfall(val name: String, val height: Double, val flowRate: Double)\n\nfun main() {\n    val waterfall = Waterfall(\"Angel Falls\", 979.0, 500.0)\n}\n```"
  },
  {
    "task": "Create a new object from a class named Castle, initializing it with name, location, and year built.",
    "code": "```kotlin\nclass Castle(val name: String, val location: String, val yearBuilt: Int)\n\nfun main() {\n    val myCastle = Castle(\"Winterfell\", \"The North\", 1066)\n}\n```"
  },
  {
    "task": "Write a class for a Cat with properties for name, breed, and color, and instantiate it.",
    "code": "```kotlin\nclass Cat(val name: String, val breed: String, val color: String)\n\nfun main() {\n    val myCat = Cat(name = \"Whiskers\", breed = \"Siamese\", color = \"Gray\")\n}\n```"
  },
  {
    "task": "Define a class representing a Spaceship with attributes for name, speed, and crew capacity, and create an object.",
    "code": "```kotlin\nclass Spaceship(val name: String, val speed: Double, val crewCapacity: Int)\n\nfun main() {\n    val spaceship = Spaceship(\"Galaxy Explorer\", 7500.0, 10)\n}\n```"
  },
  {
    "task": "Create an instance of a class called Robot with properties for name, model, and function.",
    "code": "```kotlin\nclass Robot(val name: String, val model: String, val function: String)\n\nfun main() {\n    val robot = Robot(name = \"RoboHelper\", model = \"XJ-9\", function = \"Assistance\")\n}\n```"
  },
  {
    "task": "Design a class for a Computer Program with attributes for name, language, and lines of code, then create an instance.",
    "code": "```kotlin\nclass ComputerProgram(val name: String, val language: String, val linesOfCode: Int)\n\nfun main() {\n    val program = ComputerProgram(\"MyApp\", \"Kotlin\", 1500)\n}\n```"
  },
  {
    "task": "Instantiate an object of a class named Mountain with properties for name, range, and prominence.",
    "code": "```kotlin\nclass Mountain(val name: String, val range: String, val prominence: Double)\n\nfun main() {\n    val mountain = Mountain(name = \"Mount Everest\", range = \"Himalayas\", prominence = 8848.86)\n}\n```"
  },
  {
    "task": "Develop a class for a Painting with properties for title, artist, and dimensions, then instantiate it.",
    "code": "```kotlin\nclass Painting(val title: String, val artist: String, val dimensions: String)\n\nfun main() {\n    val painting = Painting(\"Starry Night\", \"Vincent van Gogh\", \"73.7 cm \u00d7 92.1 cm\")\n}\n```"
  },
  {
    "task": "Create an object of a class named Symphony with attributes for title, composer, and movement count.",
    "code": "```kotlin\nclass Symphony(val title: String, val composer: String, val movementCount: Int)\n\nfun main() {\n    val symphony = Symphony(\"Symphony No. 9\", \"Ludwig van Beethoven\", 4)\n}\n```"
  },
  {
    "task": "Define a class for a Dinosaur with properties for name, period, and diet, then instantiate it.",
    "code": "```kotlin\nclass Dinosaur(val name: String, val period: String, val diet: String)\n\nfun main() {\n    val dinosaur = Dinosaur(name = \"Tyrannosaurus\", period = \"Cretaceous\", diet = \"Carnivore\")\n}\n```"
  },
  {
    "task": "Construct an object from a class named River with attributes for name, length, and basin size.",
    "code": "```kotlin\nclass River(val name: String, val length: Double, val basinSize: Double)\n\nfun main() {\n    val river = River(name = \"Amazon\", length = 6992.0, basinSize = 7050000.0)\n}\n```"
  },
  {
    "task": "Create an instance of a class called Instrument with properties for name, type, and material.",
    "code": "```kotlin\nclass Instrument(val name: String, val type: String, val material: String)\n\nfun main() {\n    val instrument = Instrument(name = \"Guitar\", type = \"String\", material = \"Wood\")\n}\n```"
  },
  {
    "task": "Design a class for a Planetarium with attributes for name, location, and dome size, then create an instance.",
    "code": "```kotlin\nclass Planetarium(val name: String, val location: String, val domeSize: Double)\n\nfun main() {\n    val planetarium = Planetarium(\"Galactic Center\", \"New York\", 30.0)\n}\n```"
  },
  {
    "task": "Instantiate an object of a class named Island with properties for name, area, and population.",
    "code": "```kotlin\nclass Island(val name: String, val area: Double, val population: Int)\n\nfun main() {\n    val island = Island(\"Paradise Island\", 100.5, 10000)\n}\n```"
  },
  {
    "task": "Develop a class for a Space Station with properties for name, crew size, and modules, then instantiate it.",
    "code": "```kotlin\nclass SpaceStation(val name: String, val crewSize: Int, val modules: List<String>)\n\nfun main() {\n    val spaceStation = SpaceStation(\"International Space Station\", 6, listOf(\"Module1\", \"Module2\", \"Module3\"))\n}\n```"
  },
  {
    "task": "Create a new object from a class named Dinosaur, initializing it with species and period.",
    "code": "```kotlin\nclass Dinosaur(val species: String, val period: String)\n\nfun main() {\n    val dinosaur = Dinosaur(\"Tyrannosaurus\", \"Cretaceous\")\n}\n```"
  },
  {
    "task": "Write a class for a Tree with properties for species, height, and age, and instantiate it.",
    "code": "```kotlin\nclass Tree(val species: String, val height: Double, val age: Int)\n\nfun main() {\n    val myTree = Tree(\"Oak\", 15.5, 100)\n}\n```"
  },
  {
    "task": "Define a class representing a Firework with attributes for name, color, and duration, and create an object.",
    "code": "```kotlin\nclass Firework(val name: String, val color: String, val duration: Int)\n\nfun main() {\n    val firework = Firework(\"Sparkler\", \"Red\", 10)\n}\n```"
  },
  {
    "task": "Create an instance of a class called ComicBook with properties for title, author, and issue number.",
    "code": "```kotlin\nclass ComicBook(val title: String, val author: String, val issueNumber: Int)\n\nfun main() {\n    val comicBook = ComicBook(\"The Amazing Spider-Man\", \"Stan Lee\", 1)\n}\n```"
  },
  {
    "task": "Design a class for a Metropolis with attributes for name, population, and GDP, then create an instance.",
    "code": "```kotlin\nclass Metropolis(val name: String, val population: Int, val gdp: Double)\n\nfun main() {\n    val metropolis = Metropolis(name = \"Futuristic City\", population = 5000000, gdp = 7500000000.0)\n}\n```"
  },
  {
    "task": "Instantiate an object of a class named Dragon with properties for name, element, and age.",
    "code": "```kotlin\nclass Dragon(val name: String, val element: String, val age: Int)\n\nfun main() {\n    val dragon = Dragon(\"Smaug\", \"Fire\", 100)\n}\n```"
  },
  {
    "task": "Develop a class for a Novel with properties for title, author, and genre, then instantiate it.",
    "code": "```kotlin\nclass Novel(val title: String, val author: String, val genre: String)\n\nfun main() {\n    val myNovel = Novel(\"1984\", \"George Orwell\", \"Dystopian\")\n}\n```"
  },
  {
    "task": "Create an object of a class named Satellite with attributes for name, orbit, and mission.",
    "code": "```kotlin\nclass Satellite(val name: String, val orbit: String, val mission: String)\n\nfun main() {\n    val satellite = Satellite(name = \"Hubble\", orbit = \"Low Earth Orbit\", mission = \"Space Telescope\")\n}\n```"
  },
  {
    "task": "Define a class for a Castle with properties for name, location, and architectural style, then instantiate it.",
    "code": "```kotlin\nclass Castle(val name: String, val location: String, val architecturalStyle: String)\n\nfun main() {\n    val myCastle = Castle(\"Windsor Castle\", \"Windsor, England\", \"Gothic\")\n}\n```"
  },
  {
    "task": "Construct an object from a class named Jungle with attributes for name, area, and biodiversity.",
    "code": "```kotlin\nclass Jungle(val name: String, val area: Double, val biodiversity: Int)\n\nfun main() {\n    val jungle = Jungle(\"Amazon\", 5500.0, 1000)\n    println(\"Jungle Name: ${jungle.name}, Area: ${jungle.area}, Biodiversity: ${jungle.biodiversity}\")\n}\n```"
  },
  {
    "task": "Create an instance of a class called Dinosaur with properties for species, size, and diet.",
    "code": "```kotlin\nclass Dinosaur(val species: String, val size: String, val diet: String)\n\nfun main() {\n    val dinosaur = Dinosaur(species = \"Tyrannosaurus Rex\", size = \"Large\", diet = \"Carnivore\")\n}\n```"
  },
  {
    "task": "Design a class for a Superhero with attributes for name, powers, and alias, then create an instance.",
    "code": "```kotlin\nclass Superhero(val name: String, val powers: List<String>, val alias: String)\n\nfun main() {\n    val superhero = Superhero(name = \"Clark Kent\", powers = listOf(\"Flight\", \"Super Strength\", \"X-ray Vision\"), alias = \"Superman\")\n}\n```"
  }
]