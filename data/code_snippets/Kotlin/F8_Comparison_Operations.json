[
  {
    "task": "Write a function that checks if two strings are equal, ignoring case sensitivity.",
    "code": "```kotlin\nfun areStringsEqualIgnoreCase(str1: String, str2: String): Boolean {\n    return str1.equals(str2, ignoreCase = true)\n}\n```"
  },
  {
    "task": "Create a program that determines if a number is greater than 10.",
    "code": "```kotlin\nfun isGreaterThanTen(number: Int): Boolean {\n    return number > 10\n}\n\nfun main() {\n    val number = 15\n    println(\"Is the number greater than 10? ${isGreaterThanTen(number)}\")\n}\n```"
  },
  {
    "task": "Implement a feature that compares the current date to a given date and returns if it is in the future.",
    "code": "```kotlin\nimport java.time.LocalDate\n\nfun isFutureDate(givenDate: LocalDate): Boolean {\n    val currentDate = LocalDate.now()\n    return givenDate.isAfter(currentDate)\n}\n```"
  },
  {
    "task": "Design a system that checks if a user's age is less than 18 and restricts access if true.",
    "code": "```kotlin\nfun checkAccess(age: Int): String {\n    return if (age < 18) {\n        \"Access Restricted\"\n    } else {\n        \"Access Granted\"\n    }\n}\n\nfun main() {\n    val userAge = 16\n    println(checkAccess(userAge))\n}\n```"
  },
  {
    "task": "Build an algorithm that finds the maximum of three given integers.",
    "code": "```kotlin\nfun findMaximum(a: Int, b: Int, c: Int): Int {\n    return if (a >= b && a >= c) {\n        a\n    } else if (b >= a && b >= c) {\n        b\n    } else {\n        c\n    }\n}\n\nfun main() {\n    val a = 10\n    val b = 20\n    val c = 15\n    val max = findMaximum(a, b, c)\n    println(\"The maximum value is: $max\")\n}\n```"
  },
  {
    "task": "Write a function that verifies if two arrays contain the same elements in the same order.",
    "code": "```kotlin\nfun areArraysEqual(array1: Array<Any>, array2: Array<Any>): Boolean {\n    if (array1.size != array2.size) return false\n    for (i in array1.indices) {\n        if (array1[i] != array2[i]) return false\n    }\n    return true\n}\n```"
  },
  {
    "task": "Create a script that checks if a product's price is within a specified range.",
    "code": "```kotlin\nfun isPriceWithinRange(price: Double, lowerBound: Double, upperBound: Double): Boolean {\n    return price >= lowerBound && price <= upperBound\n}\n\nfun main() {\n    val price = 150.0\n    val lowerBound = 100.0\n    val upperBound = 200.0\n    val result = isPriceWithinRange(price, lowerBound, upperBound)\n    println(\"Is the price within range? $result\")\n}\n```"
  },
  {
    "task": "Develop a tool that compares two versions of a software application and determines which is newer.",
    "code": "```kotlin\nfun compareVersions(version1: String, version2: String): Int {\n    val v1Parts = version1.split(\".\").map { it.toInt() }\n    val v2Parts = version2.split(\".\").map { it.toInt() }\n    val length = maxOf(v1Parts.size, v2Parts.size)\n\n    for (i in 0 until length) {\n        val v1Part = if (i < v1Parts.size) v1Parts[i] else 0\n        val v2Part = if (i < v2Parts.size) v2Parts[i] else 0\n\n        if (v1Part < v2Part) return -1\n        if (v1Part > v2Part) return 1\n    }\n    return 0\n}\n\nfun main() {\n    val version1 = \"1.2.3\"\n    val version2 = \"1.3.0\"\n    val result = compareVersions(version1, version2)\n\n    when (result) {\n        -1 -> println(\"$version2 is newer than $version1\")\n        1 -> println(\"$version1 is newer than $version2\")\n        0 -> println(\"$version1 and $version2 are the same\")\n    }\n}\n```"
  },
  {
    "task": "Implement a test to see if a given year is a leap year.",
    "code": "```kotlin\nfun isLeapYear(year: Int): Boolean {\n    return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)\n}\n\nfun main() {\n    val year = 2024\n    if (isLeapYear(year)) {\n        println(\"$year is a leap year.\")\n    } else {\n        println(\"$year is not a leap year.\")\n    }\n}\n```"
  },
  {
    "task": "Design a feature that tells if a student\u2019s grade is passing or failing based on a threshold.",
    "code": "```kotlin\nfun isPassing(grade: Int, threshold: Int): Boolean {\n    return grade >= threshold\n}\n\nfun main() {\n    val grade = 75\n    val threshold = 60\n    val result = if (isPassing(grade, threshold)) \"Passing\" else \"Failing\"\n    println(\"The student's grade is: $result\")\n}\n```"
  },
  {
    "task": "Write a function to compare two file sizes and return the larger one.",
    "code": "```kotlin\nfun largerFileSize(size1: Long, size2: Long): Long {\n    return if (size1 > size2) size1 else size2\n}\n```"
  },
  {
    "task": "Build a program that checks if the temperature is below freezing point.",
    "code": "```kotlin\nfun main() {\n    val temperature = -5 // Example temperature in Celsius\n    if (temperature < 0) {\n        println(\"The temperature is below freezing point.\")\n    } else {\n        println(\"The temperature is above freezing point.\")\n    }\n}\n```"
  },
  {
    "task": "Create a logic that determines if a number is within the Fibonacci sequence.",
    "code": "```kotlin\nfun isFibonacci(num: Int): Boolean {\n    if (num < 0) return false\n    var a = 0\n    var b = 1\n    while (b < num) {\n        val temp = b\n        b += a\n        a = temp\n    }\n    return b == num || num == 0\n}\n\n// Example usage\nfun main() {\n    val number = 21\n    println(\"$number is in Fibonacci: ${isFibonacci(number)}\")\n}\n```"
  },
  {
    "task": "Develop a function that checks if a given word is a palindrome.",
    "code": "```kotlin\nfun isPalindrome(word: String): Boolean {\n    val cleanedWord = word.filter { it.isLetterOrDigit() }.toLowerCase()\n    return cleanedWord == cleanedWord.reversed()\n}\n```"
  },
  {
    "task": "Write a script to see if a password meets a minimum length requirement.",
    "code": "```kotlin\nfun isPasswordValid(password: String, minLength: Int): Boolean {\n    return password.length >= minLength\n}\n\nfun main() {\n    val password = \"examplePassword\"\n    val minLength = 8\n\n    if (isPasswordValid(password, minLength)) {\n        println(\"Password meets the minimum length requirement.\")\n    } else {\n        println(\"Password does not meet the minimum length requirement.\")\n    }\n}\n```"
  },
  {
    "task": "Implement a system that decides if a point is inside a circle based on its coordinates.",
    "code": "```kotlin\ndata class Point(val x: Double, val y: Double)\n\ndata class Circle(val center: Point, val radius: Double)\n\nfun isPointInsideCircle(point: Point, circle: Circle): Boolean {\n    val dx = point.x - circle.center.x\n    val dy = point.y - circle.center.y\n    val distanceSquared = dx * dx + dy * dy\n    return distanceSquared < circle.radius * circle.radius\n}\n\nfun main() {\n    val circle = Circle(Point(0.0, 0.0), 5.0)\n    val point = Point(3.0, 4.0)\n    println(isPointInsideCircle(point, circle)) // Output: true\n}\n```"
  },
  {
    "task": "Design a program that checks if a shopping cart total exceeds a certain budget.",
    "code": "```kotlin\nfun isOverBudget(cartTotal: Double, budget: Double): Boolean {\n    return cartTotal > budget\n}\n\nfun main() {\n    val cartTotal = 150.0\n    val budget = 100.0\n\n    if (isOverBudget(cartTotal, budget)) {\n        println(\"The shopping cart total exceeds the budget.\")\n    } else {\n        println(\"The shopping cart total is within the budget.\")\n    }\n}\n```"
  },
  {
    "task": "Create a function that compares two players' scores and returns the winner.",
    "code": "```kotlin\nfun determineWinner(player1Score: Int, player2Score: Int): String {\n    return when {\n        player1Score > player2Score -> \"Player 1 wins\"\n        player1Score < player2Score -> \"Player 2 wins\"\n        else -> \"It's a tie\"\n    }\n}\n```"
  },
  {
    "task": "Write a program to determine if one string is a substring of another.",
    "code": "```kotlin\nfun isSubstring(sub: String, str: String): Boolean {\n    return str.contains(sub)\n}\n\nfun main() {\n    val string1 = \"Hello, world!\"\n    val string2 = \"world\"\n    \n    if (isSubstring(string2, string1)) {\n        println(\"\\\"$string2\\\" is a substring of \\\"$string1\\\"\")\n    } else {\n        println(\"\\\"$string2\\\" is not a substring of \\\"$string1\\\"\")\n    }\n}\n```"
  },
  {
    "task": "Build a utility that checks if a number is a prime number.",
    "code": "```kotlin\nfun isPrime(number: Int): Boolean {\n    if (number <= 1) return false\n    if (number <= 3) return true\n    if (number % 2 == 0 || number % 3 == 0) return false\n    var i = 5\n    while (i * i <= number) {\n        if (number % i == 0 || number % (i + 2) == 0) return false\n        i += 6\n    }\n    return true\n}\n```"
  },
  {
    "task": "Write a function that checks if a given number is a perfect square.",
    "code": "```kotlin\nfun isPerfectSquare(number: Int): Boolean {\n    if (number < 0) return false\n    val sqrt = Math.sqrt(number.toDouble()).toInt()\n    return sqrt * sqrt == number\n}\n```"
  },
  {
    "task": "Create a system that determines if a person is eligible for a senior citizen discount based on their age.",
    "code": "```kotlin\nfun isEligibleForSeniorDiscount(age: Int): Boolean {\n    return age >= 65\n}\n\nfun main() {\n    val age = 70\n    if (isEligibleForSeniorDiscount(age)) {\n        println(\"Eligible for senior citizen discount.\")\n    } else {\n        println(\"Not eligible for senior citizen discount.\")\n    }\n}\n```"
  },
  {
    "task": "Develop a feature to check if a date falls on a weekend.",
    "code": "```kotlin\nimport java.time.DayOfWeek\nimport java.time.LocalDate\n\nfun isWeekend(date: LocalDate): Boolean {\n    val dayOfWeek = date.dayOfWeek\n    return dayOfWeek == DayOfWeek.SATURDAY || dayOfWeek == DayOfWeek.SUNDAY\n}\n\nfun main() {\n    val date = LocalDate.of(2023, 10, 28) // Example date\n    println(\"Is the date a weekend? ${isWeekend(date)}\")\n}\n```"
  },
  {
    "task": "Design a program that sees if a given email address is in the correct format.",
    "code": "```kotlin\nfun isEmailValid(email: String): Boolean {\n    val emailRegex = Regex(\"^[\\\\w-\\\\.]+@([\\\\w-]+\\\\.)+[\\\\w-]{2,4}$\")\n    return emailRegex.matches(email)\n}\n\nfun main() {\n    val email = \"example@test.com\"\n    if (isEmailValid(email)) {\n        println(\"The email address is in the correct format.\")\n    } else {\n        println(\"The email address is not in the correct format.\")\n    }\n}\n```"
  },
  {
    "task": "Implement a test to check if a rectangle's area is larger than a triangle's area.",
    "code": "```kotlin\nfun main() {\n    val rectangleWidth = 10.0\n    val rectangleHeight = 5.0\n    val triangleBase = 8.0\n    val triangleHeight = 6.0\n\n    val rectangleArea = rectangleWidth * rectangleHeight\n    val triangleArea = 0.5 * triangleBase * triangleHeight\n\n    if (rectangleArea > triangleArea) {\n        println(\"The rectangle's area is larger than the triangle's area.\")\n    } else {\n        println(\"The rectangle's area is not larger than the triangle's area.\")\n    }\n}\n```"
  },
  {
    "task": "Write a function that verifies if two rectangles overlap each other.",
    "code": "```kotlin\ndata class Rectangle(val x: Int, val y: Int, val width: Int, val height: Int)\n\nfun doRectanglesOverlap(rect1: Rectangle, rect2: Rectangle): Boolean {\n    val rect1Right = rect1.x + rect1.width\n    val rect1Bottom = rect1.y + rect1.height\n    val rect2Right = rect2.x + rect2.width\n    val rect2Bottom = rect2.y + rect2.height\n\n    return !(rect1Right <= rect2.x || rect2Right <= rect1.x ||\n             rect1Bottom <= rect2.y || rect2Bottom <= rect1.y)\n}\n```"
  },
  {
    "task": "Create a script to compare two strings lexicographically.",
    "code": "```kotlin\nfun compareStrings(str1: String, str2: String): Int {\n    return str1.compareTo(str2)\n}\n\nfun main() {\n    val string1 = \"apple\"\n    val string2 = \"banana\"\n\n    val result = compareStrings(string1, string2)\n\n    when {\n        result < 0 -> println(\"$string1 is lexicographically less than $string2\")\n        result > 0 -> println(\"$string1 is lexicographically greater than $string2\")\n        else -> println(\"$string1 is lexicographically equal to $string2\")\n    }\n}\n```"
  },
  {
    "task": "Build a program that checks if a list of numbers is in ascending order.",
    "code": "```kotlin\nfun isAscending(numbers: List<Int>): Boolean {\n    for (i in 0 until numbers.size - 1) {\n        if (numbers[i] > numbers[i + 1]) {\n            return false\n        }\n    }\n    return true\n}\n\nfun main() {\n    val numbers = listOf(1, 2, 3, 4, 5)\n    println(\"Is the list in ascending order? ${isAscending(numbers)}\")\n}\n```"
  },
  {
    "task": "Design a system to compare the heights of two buildings.",
    "code": "```kotlin\ndata class Building(val name: String, val height: Double)\n\nfun compareHeights(building1: Building, building2: Building): String {\n    return when {\n        building1.height > building2.height -> \"${building1.name} is taller than ${building2.name}\"\n        building1.height < building2.height -> \"${building2.name} is taller than ${building1.name}\"\n        else -> \"${building1.name} and ${building2.name} are of the same height\"\n    }\n}\n\nfun main() {\n    val buildingA = Building(\"Building A\", 150.0)\n    val buildingB = Building(\"Building B\", 200.0)\n    \n    println(compareHeights(buildingA, buildingB))\n}\n```"
  },
  {
    "task": "Write a feature that determines if a given time is before noon.",
    "code": "```kotlin\nfun isBeforeNoon(hour: Int, minute: Int): Boolean {\n    return hour < 12 || (hour == 12 && minute == 0)\n}\n\n// Example Usage:\nval hour = 11\nval minute = 30\nprintln(isBeforeNoon(hour, minute)) // Output: true\n```"
  },
  {
    "task": "Implement a function to check if a given number is a power of two.",
    "code": "```kotlin\nfun isPowerOfTwo(number: Int): Boolean {\n    if (number <= 0) return false\n    return (number and (number - 1)) == 0\n}\n```"
  },
  {
    "task": "Create a program that determines if a word is longer than another word.",
    "code": "```kotlin\nfun main() {\n    val word1 = \"example\"\n    val word2 = \"test\"\n    \n    if (word1.length > word2.length) {\n        println(\"'$word1' is longer than '$word2'\")\n    } else if (word1.length < word2.length) {\n        println(\"'$word2' is longer than '$word1'\")\n    } else {\n        println(\"'$word1' and '$word2' are of the same length\")\n    }\n}\n```"
  },
  {
    "task": "Develop a function to compare the lengths of two lists and return the longer one.",
    "code": "```kotlin\nfun longerList(list1: List<Any>, list2: List<Any>): List<Any> {\n    return if (list1.size > list2.size) list1 else list2\n}\n```"
  },
  {
    "task": "Write a script to see if a user's input matches a pre-defined secret code.",
    "code": "```kotlin\nfun main() {\n    val secretCode = \"KotlinRocks\"\n    print(\"Enter the secret code: \")\n    val userInput = readLine()\n    \n    if (userInput == secretCode) {\n        println(\"Access Granted\")\n    } else {\n        println(\"Access Denied\")\n    }\n}\n```"
  },
  {
    "task": "Build a utility that checks if a given year is in the 21st century.",
    "code": "```kotlin\nfun isIn21stCentury(year: Int): Boolean {\n    return year in 2001..2100\n}\n```"
  },
  {
    "task": "Create a logic that determines if a book's publication year is after 2000.",
    "code": "```kotlin\nfun isPublishedAfter2000(publicationYear: Int): Boolean {\n    return publicationYear > 2000\n}\n```"
  },
  {
    "task": "Design a feature to see if a number is divisible by both 3 and 5.",
    "code": "```kotlin\nfun isDivisibleBy3And5(number: Int): Boolean {\n    return number % 3 == 0 && number % 5 == 0\n}\n```"
  },
  {
    "task": "Implement a system that checks if a student's GPA is above a certain threshold.",
    "code": "```kotlin\nfun isGpaAboveThreshold(studentGpa: Double, threshold: Double): Boolean {\n    return studentGpa > threshold\n}\n\n// Example usage\nfun main() {\n    val studentGpa = 3.5\n    val threshold = 3.0\n    println(\"Is the student's GPA above the threshold? ${isGpaAboveThreshold(studentGpa, threshold)}\")\n}\n```"
  },
  {
    "task": "Write a function to determine if a given angle is acute, right, or obtuse.",
    "code": "```kotlin\nfun classifyAngle(angle: Int): String {\n    return when {\n        angle < 90 -> \"Acute\"\n        angle == 90 -> \"Right\"\n        angle < 180 -> \"Obtuse\"\n        else -> \"Invalid\"\n    }\n}\n```"
  },
  {
    "task": "Develop a program that compares the lengths of two strings and returns the shorter one.",
    "code": "```kotlin\nfun shorterString(str1: String, str2: String): String {\n    return if (str1.length < str2.length) str1 else str2\n}\n\nfun main() {\n    val string1 = \"Hello\"\n    val string2 = \"World!\"\n    println(shorterString(string1, string2))\n}\n```"
  },
  {
    "task": "Create a script to verify if a username is unique within a list.",
    "code": "```kotlin\nfun isUsernameUnique(username: String, existingUsernames: List<String>): Boolean {\n    return username !in existingUsernames\n}\n\nfun main() {\n    val existingUsernames = listOf(\"Alice\", \"Bob\", \"Charlie\")\n    val usernameToCheck = \"Dave\"\n    \n    if (isUsernameUnique(usernameToCheck, existingUsernames)) {\n        println(\"Username is unique\")\n    } else {\n        println(\"Username is not unique\")\n    }\n}\n```"
  },
  {
    "task": "Build a tool that checks if a job applicant meets all the listed qualifications.",
    "code": "```kotlin\ndata class Applicant(\n    val hasRequiredDegree: Boolean,\n    val yearsOfExperience: Int,\n    val knowsRequiredLanguages: Boolean,\n    val hasPortfolio: Boolean\n)\n\nfun isQualified(applicant: Applicant): Boolean {\n    val requiredExperience = 3\n    return applicant.hasRequiredDegree &&\n           applicant.yearsOfExperience >= requiredExperience &&\n           applicant.knowsRequiredLanguages &&\n           applicant.hasPortfolio\n}\n\nfun main() {\n    val applicant = Applicant(\n        hasRequiredDegree = true,\n        yearsOfExperience = 4,\n        knowsRequiredLanguages = true,\n        hasPortfolio = true\n    )\n\n    if (isQualified(applicant)) {\n        println(\"The applicant meets all the qualifications.\")\n    } else {\n        println(\"The applicant does not meet all the qualifications.\")\n    }\n}\n```"
  },
  {
    "task": "Write a feature to see if a vehicle's speed exceeds the speed limit.",
    "code": "```kotlin\nfun isSpeeding(vehicleSpeed: Int, speedLimit: Int): Boolean {\n    return vehicleSpeed > speedLimit\n}\n```"
  },
  {
    "task": "Design a system that determines whether a given point is above or below the x-axis.",
    "code": "```kotlin\nfun pointPosition(y: Double): String {\n    return if (y > 0) {\n        \"Above the x-axis\"\n    } else if (y < 0) {\n        \"Below the x-axis\"\n    } else {\n        \"On the x-axis\"\n    }\n}\n\nfun main() {\n    val y = 1.5 // Example point's y-coordinate\n    println(pointPosition(y))\n}\n```"
  },
  {
    "task": "Create a function that checks if a given word appears in a sentence.",
    "code": "```kotlin\nfun containsWord(sentence: String, word: String): Boolean {\n    return word in sentence.split(\" \")\n}\n```"
  },
  {
    "task": "Implement a program that identifies whether a given number is negative or positive.",
    "code": "```kotlin\nfun identifyNumberSign(number: Int): String {\n    return if (number >= 0) \"Positive\" else \"Negative\"\n}\n\nfun main() {\n    val number = -5\n    println(\"The number is ${identifyNumberSign(number)}.\")\n}\n```"
  },
  {
    "task": "Write a script to see if the sum of two numbers is greater than 100.",
    "code": "```kotlin\nfun main() {\n    val number1 = 50\n    val number2 = 60\n    val sum = number1 + number2\n    if (sum > 100) {\n        println(\"The sum is greater than 100.\")\n    } else {\n        println(\"The sum is not greater than 100.\")\n    }\n}\n```"
  },
  {
    "task": "Build a utility that checks if a file exists in a specified directory.",
    "code": "```kotlin\nimport java.io.File\n\nfun fileExists(directory: String, fileName: String): Boolean {\n    val file = File(directory, fileName)\n    return file.exists()\n}\n```"
  },
  {
    "task": "Develop a system to compare the weights of two different objects.",
    "code": "```kotlin\nfun compareWeights(weight1: Double, weight2: Double): String {\n    return when {\n        weight1 > weight2 -> \"The first object is heavier.\"\n        weight1 < weight2 -> \"The second object is heavier.\"\n        else -> \"Both objects weigh the same.\"\n    }\n}\n\nfun main() {\n    val weightOfObject1 = 15.0\n    val weightOfObject2 = 10.0\n\n    println(compareWeights(weightOfObject1, weightOfObject2))\n}\n```"
  },
  {
    "task": "Create a logic to determine if a number falls within a defined range.",
    "code": "```kotlin\nfun isNumberInRange(number: Int, lowerBound: Int, upperBound: Int): Boolean {\n    return number >= lowerBound && number <= upperBound\n}\n\n// Example usage:\nfun main() {\n    val number = 10\n    val lowerBound = 5\n    val upperBound = 15\n    println(isNumberInRange(number, lowerBound, upperBound)) // Output: true\n}\n```"
  },
  {
    "task": "Design a program that checks if an employee worked overtime based on hours worked.",
    "code": "```kotlin\nfun isOvertime(hoursWorked: Int): Boolean {\n    val standardHours = 40\n    return hoursWorked > standardHours\n}\n\nfun main() {\n    val hoursWorked = 45\n    if (isOvertime(hoursWorked)) {\n        println(\"The employee worked overtime.\")\n    } else {\n        println(\"The employee did not work overtime.\")\n    }\n}\n```"
  },
  {
    "task": "Write a function to compare two dates and determine which is earlier.",
    "code": "```kotlin\nimport java.time.LocalDate\n\nfun compareDates(date1: LocalDate, date2: LocalDate): LocalDate {\n    return if (date1.isBefore(date2)) date1 else date2\n}\n```"
  },
  {
    "task": "Create a script that verifies if a given word starts with a vowel.",
    "code": "```kotlin\nfun startsWithVowel(word: String): Boolean {\n    return when (word.firstOrNull()?.toLowerCase()) {\n        'a', 'e', 'i', 'o', 'u' -> true\n        else -> false\n    }\n}\n\nfun main() {\n    val word = \"example\"\n    println(\"Does '$word' start with a vowel? ${startsWithVowel(word)}\")\n}\n```"
  },
  {
    "task": "Build a utility that checks if a number is even or odd.",
    "code": "```kotlin\nfun isEven(number: Int): Boolean {\n    return number % 2 == 0\n}\n\nfun main() {\n    val number = 5\n    if (isEven(number)) {\n        println(\"$number is even\")\n    } else {\n        println(\"$number is odd\")\n    }\n}\n```"
  },
  {
    "task": "Implement a system that determines if a string contains only numeric characters.",
    "code": "```kotlin\nfun isNumeric(input: String): Boolean {\n    return input.all { it.isDigit() }\n}\n\nfun main() {\n    val testString = \"123456\"\n    println(isNumeric(testString)) // Outputs: true\n\n    val testString2 = \"123a56\"\n    println(isNumeric(testString2)) // Outputs: false\n}\n```"
  },
  {
    "task": "Write a function to see if a given character is a vowel or consonant.",
    "code": "```kotlin\nfun isVowelOrConsonant(char: Char): String {\n    return when (char.toLowerCase()) {\n        'a', 'e', 'i', 'o', 'u' -> \"Vowel\"\n        in 'a'..'z' -> \"Consonant\"\n        else -> \"Not a letter\"\n    }\n}\n```"
  },
  {
    "task": "Create a program that checks if a point lies within a specified rectangle.",
    "code": "```kotlin\nfun isPointInsideRectangle(px: Int, py: Int, rectX1: Int, rectY1: Int, rectX2: Int, rectY2: Int): Boolean {\n    return px >= rectX1 && px <= rectX2 && py >= rectY1 && py <= rectY2\n}\n\nfun main() {\n    val px = 5\n    val py = 5\n    val rectX1 = 0\n    val rectY1 = 0\n    val rectX2 = 10\n    val rectY2 = 10\n\n    val result = isPointInsideRectangle(px, py, rectX1, rectY1, rectX2, rectY2)\n    println(\"Point ($px, $py) is inside rectangle: $result\")\n}\n```"
  },
  {
    "task": "Develop a feature to compare two lists and return the common elements.",
    "code": "```kotlin\nfun findCommonElements(list1: List<Int>, list2: List<Int>): List<Int> {\n    return list1.intersect(list2).toList()\n}\n```"
  },
  {
    "task": "Design a function that determines if a text contains any uppercase letters.",
    "code": "```kotlin\nfun containsUppercase(text: String): Boolean {\n    return text.any { it.isUpperCase() }\n}\n```"
  },
  {
    "task": "Implement a script to check if a given sentence is a question.",
    "code": "```kotlin\nfun isQuestion(sentence: String): Boolean {\n    return sentence.trim().endsWith(\"?\")\n}\n\nfun main() {\n    val sentence1 = \"Is this a question?\"\n    val sentence2 = \"This is not a question.\"\n\n    println(\"Is the first sentence a question? ${isQuestion(sentence1)}\")\n    println(\"Is the second sentence a question? ${isQuestion(sentence2)}\")\n}\n```"
  },
  {
    "task": "Write a program to determine if a temperature is measured in Celsius or Fahrenheit.",
    "code": "```kotlin\nfun determineTemperatureUnit(temperature: String): String {\n    return if (temperature.endsWith(\"C\", ignoreCase = true)) {\n        \"Celsius\"\n    } else if (temperature.endsWith(\"F\", ignoreCase = true)) {\n        \"Fahrenheit\"\n    } else {\n        \"Unknown\"\n    }\n}\n\nfun main() {\n    val temp1 = \"20C\"\n    val temp2 = \"68F\"\n    val temp3 = \"100\"\n\n    println(determineTemperatureUnit(temp1))  // Output: Celsius\n    println(determineTemperatureUnit(temp2))  // Output: Fahrenheit\n    println(determineTemperatureUnit(temp3))  // Output: Unknown\n}\n```"
  },
  {
    "task": "Create a system that verifies if a student is enrolled in a particular course.",
    "code": "```kotlin\ndata class Student(val name: String, val enrolledCourses: List<String>)\n\nfun isStudentEnrolledInCourse(student: Student, course: String): Boolean {\n    return course in student.enrolledCourses\n}\n\nfun main() {\n    val student = Student(\"Alice\", listOf(\"Math\", \"Science\", \"History\"))\n    val courseToCheck = \"Math\"\n    \n    val isEnrolled = isStudentEnrolledInCourse(student, courseToCheck)\n    println(\"Is the student enrolled in $courseToCheck? $isEnrolled\")\n}\n```"
  },
  {
    "task": "Build a utility to check if a given string is a valid hexadecimal number.",
    "code": "```kotlin\nfun isValidHexadecimal(input: String): Boolean {\n    val hexRegex = \"^[0-9a-fA-F]+$\".toRegex()\n    return input.matches(hexRegex)\n}\n```"
  },
  {
    "task": "Write a function to see if two circles intersect based on their radii and center points.",
    "code": "```kotlin\ndata class Point(val x: Double, val y: Double)\n\nfun circlesIntersect(center1: Point, radius1: Double, center2: Point, radius2: Double): Boolean {\n    val distanceSquared = (center2.x - center1.x).let { dx -> dx * dx } + \n                          (center2.y - center1.y).let { dy -> dy * dy }\n    val radiusSum = radius1 + radius2\n    return distanceSquared <= radiusSum * radiusSum\n}\n```"
  },
  {
    "task": "Develop a program that checks if a given number is within 10% of another number.",
    "code": "```kotlin\nfun isWithinTenPercent(num1: Double, num2: Double): Boolean {\n    val difference = Math.abs(num1 - num2)\n    val tenPercent = num1 * 0.1\n    return difference <= tenPercent\n}\n\nfun main() {\n    val num1 = 100.0\n    val num2 = 109.0\n    println(isWithinTenPercent(num1, num2))\n}\n```"
  },
  {
    "task": "Create a feature to determine if a character is alphanumeric.",
    "code": "```kotlin\nfun isAlphanumeric(char: Char): Boolean {\n    return char.isLetterOrDigit()\n}\n\n// Example usage\nfun main() {\n    val testChar = 'A'\n    println(\"$testChar is alphanumeric: ${isAlphanumeric(testChar)}\")\n}\n```"
  },
  {
    "task": "Implement a system to compare the profit margins of two products.",
    "code": "```kotlin\ndata class Product(val name: String, val costPrice: Double, val sellingPrice: Double) {\n    fun profitMargin(): Double {\n        return (sellingPrice - costPrice) / sellingPrice * 100\n    }\n}\n\nfun compareProfitMargins(product1: Product, product2: Product): String {\n    val margin1 = product1.profitMargin()\n    val margin2 = product2.profitMargin()\n\n    return when {\n        margin1 > margin2 -> \"${product1.name} has a higher profit margin.\"\n        margin1 < margin2 -> \"${product2.name} has a higher profit margin.\"\n        else -> \"Both products have the same profit margin.\"\n    }\n}\n\nfun main() {\n    val product1 = Product(\"Product A\", 50.0, 100.0)\n    val product2 = Product(\"Product B\", 30.0, 70.0)\n\n    println(compareProfitMargins(product1, product2))\n}\n```"
  },
  {
    "task": "Design a script to check if a given string contains any special characters.",
    "code": "```kotlin\nfun containsSpecialCharacters(input: String): Boolean {\n    val regex = Regex(\"[^a-zA-Z0-9]\")\n    return regex.containsMatchIn(input)\n}\n\nfun main() {\n    val testString = \"!HelloWorld123\"\n    println(containsSpecialCharacters(testString)) // Output: true\n}\n```"
  },
  {
    "task": "Write a function to verify if a number is a multiple of another number.",
    "code": "```kotlin\nfun isMultipleOf(number: Int, multipleOf: Int): Boolean {\n    return number % multipleOf == 0\n}\n```"
  },
  {
    "task": "Create a program that checks if a date is a holiday based on a list of holidays.",
    "code": "```kotlin\nimport java.time.LocalDate\n\nfun isHoliday(date: LocalDate, holidays: List<LocalDate>): Boolean {\n    return holidays.contains(date)\n}\n\nfun main() {\n    val holidays = listOf(\n        LocalDate.of(2023, 1, 1),  // New Year's Day\n        LocalDate.of(2023, 12, 25) // Christmas Day\n    )\n    \n    val dateToCheck = LocalDate.of(2023, 12, 25)\n    if (isHoliday(dateToCheck, holidays)) {\n        println(\"$dateToCheck is a holiday.\")\n    } else {\n        println(\"$dateToCheck is not a holiday.\")\n    }\n}\n```"
  },
  {
    "task": "Build a utility to compare two text files and highlight the differences.",
    "code": "```kotlin\nimport java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).readLines()\n}\n\nfun compareFiles(file1Path: String, file2Path: String): List<Pair<Int, String>> {\n    val file1Lines = readLinesFromFile(file1Path)\n    val file2Lines = readLinesFromFile(file2Path)\n    val differences = mutableListOf<Pair<Int, String>>()\n\n    val maxLines = maxOf(file1Lines.size, file2Lines.size)\n    for (i in 0 until maxLines) {\n        val line1 = if (i < file1Lines.size) file1Lines[i] else \"\"\n        val line2 = if (i < file2Lines.size) file2Lines[i] else \"\"\n        if (line1 != line2) {\n            differences.add(Pair(i + 1, \"File1: $line1 | File2: $line2\"))\n        }\n    }\n    return differences\n}\n\nfun main() {\n    val file1Path = \"path/to/file1.txt\"\n    val file2Path = \"path/to/file2.txt\"\n    val differences = compareFiles(file1Path, file2Path)\n\n    if (differences.isEmpty()) {\n        println(\"Files are identical.\")\n    } else {\n        println(\"Differences found:\")\n        differences.forEach { (lineNumber, difference) ->\n            println(\"Line $lineNumber: $difference\")\n        }\n    }\n}\n```"
  },
  {
    "task": "Develop a function to determine if a given password is strong based on length and character diversity.",
    "code": "```kotlin\nfun isStrongPassword(password: String): Boolean {\n    val minLength = 8\n    if (password.length < minLength) return false\n\n    var hasUppercase = false\n    var hasLowercase = false\n    var hasDigit = false\n    var hasSpecialChar = false\n\n    for (char in password) {\n        when {\n            char.isUpperCase() -> hasUppercase = true\n            char.isLowerCase() -> hasLowercase = true\n            char.isDigit() -> hasDigit = true\n            !char.isLetterOrDigit() -> hasSpecialChar = true\n        }\n    }\n\n    return hasUppercase && hasLowercase && hasDigit && hasSpecialChar\n}\n```"
  },
  {
    "task": "Write a script to see if a number is within a specified distance from zero.",
    "code": "```kotlin\nfun isWithinDistanceFromZero(number: Int, distance: Int): Boolean {\n    return number >= -distance && number <= distance\n}\n\nfun main() {\n    val number = 5\n    val distance = 10\n    println(isWithinDistanceFromZero(number, distance)) // Output: true\n}\n```"
  },
  {
    "task": "Create a system to check if a book title is available in a library database.",
    "code": "```kotlin\nfun isBookAvailable(libraryDatabase: List<String>, bookTitle: String): Boolean {\n    return bookTitle in libraryDatabase\n}\n\nfun main() {\n    val libraryDatabase = listOf(\"The Great Gatsby\", \"1984\", \"To Kill a Mockingbird\")\n    val bookTitle = \"1984\"\n    val available = isBookAvailable(libraryDatabase, bookTitle)\n    println(\"Is the book '$bookTitle' available? $available\")\n}\n```"
  },
  {
    "task": "Implement a feature that determines if a user has administrator privileges.",
    "code": "```kotlin\ndata class User(val username: String, val isAdmin: Boolean)\n\nfun hasAdminPrivileges(user: User): Boolean {\n    return user.isAdmin\n}\n\nfun main() {\n    val user1 = User(\"john_doe\", false)\n    val user2 = User(\"admin_user\", true)\n\n    println(\"User1 has admin privileges: ${hasAdminPrivileges(user1)}\")\n    println(\"User2 has admin privileges: ${hasAdminPrivileges(user2)}\")\n}\n```"
  },
  {
    "task": "Design a function to compare the brightness of two colors.",
    "code": "```kotlin\ndata class Color(val red: Int, val green: Int, val blue: Int)\n\nfun compareBrightness(color1: Color, color2: Color): Int {\n    val brightness1 = color1.red * 0.299 + color1.green * 0.587 + color1.blue * 0.114\n    val brightness2 = color2.red * 0.299 + color2.green * 0.587 + color2.blue * 0.114\n    return when {\n        brightness1 > brightness2 -> 1\n        brightness1 < brightness2 -> -1\n        else -> 0\n    }\n}\n```"
  },
  {
    "task": "Write a program to verify if a number is a valid credit card number using the Luhn algorithm.",
    "code": "```kotlin\nfun isValidCreditCardNumber(number: String): Boolean {\n    val digits = number.filter { it.isDigit() }.map { it.toString().toInt() }\n    if (digits.isEmpty()) return false\n    \n    val sum = digits.reversed().mapIndexed { index, digit ->\n        if (index % 2 == 1) {\n            val doubled = digit * 2\n            if (doubled > 9) doubled - 9 else doubled\n        } else {\n            digit\n        }\n    }.sum()\n    \n    return sum % 10 == 0\n}\n\nfun main() {\n    val creditCardNumber = \"4539578763621486\"\n    println(\"Is valid: ${isValidCreditCardNumber(creditCardNumber)}\")\n}\n```"
  },
  {
    "task": "Create a script to determine if a given string is a valid IP address.",
    "code": "```kotlin\nfun isValidIPAddress(ip: String): Boolean {\n    val parts = ip.split(\".\")\n    if (parts.size != 4) return false\n\n    for (part in parts) {\n        val number = part.toIntOrNull() ?: return false\n        if (number !in 0..255) return false\n    }\n    return true\n}\n\nfun main() {\n    val testIp = \"192.168.1.1\"\n    println(\"Is valid IP: ${isValidIPAddress(testIp)}\")\n}\n```"
  },
  {
    "task": "Build a utility that checks if a number is part of an arithmetic sequence.",
    "code": "```kotlin\nfun isPartOfArithmeticSequence(n: Int, start: Int, difference: Int): Boolean {\n    if (difference == 0) return n == start\n    return (n - start) % difference == 0 && (n - start) / difference >= 0\n}\n\nfun main() {\n    println(isPartOfArithmeticSequence(10, 2, 2))  // true\n    println(isPartOfArithmeticSequence(9, 2, 2))   // false\n    println(isPartOfArithmeticSequence(20, 5, 5))  // true\n    println(isPartOfArithmeticSequence(20, 5, -5)) // false\n}\n```"
  },
  {
    "task": "Develop a feature to compare the efficiency of two algorithms based on time complexity.",
    "code": "```kotlin\nfun compareAlgorithms(algorithm1: () -> Unit, algorithm2: () -> Unit): String {\n    val time1 = measureTimeMillis { algorithm1() }\n    val time2 = measureTimeMillis { algorithm2() }\n    \n    return when {\n        time1 < time2 -> \"Algorithm 1 is more efficient\"\n        time1 > time2 -> \"Algorithm 2 is more efficient\"\n        else -> \"Both algorithms have similar efficiency\"\n    }\n}\n\nfun main() {\n    val algorithm1 = {\n        // Simulate algorithm 1\n        Thread.sleep(100)\n    }\n    \n    val algorithm2 = {\n        // Simulate algorithm 2\n        Thread.sleep(200)\n    }\n    \n    println(compareAlgorithms(algorithm1, algorithm2))\n}\n```"
  },
  {
    "task": "Write a function to see if a given date falls in a leap year.",
    "code": "```kotlin\nfun isLeapYear(year: Int): Boolean {\n    return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)\n}\n\nfun isDateInLeapYear(date: String): Boolean {\n    val year = date.split(\"-\")[0].toInt()\n    return isLeapYear(year)\n}\n```"
  },
  {
    "task": "Create a program that determines if a user's subscription is active based on the current date.",
    "code": "```kotlin\nimport java.time.LocalDate\n\nfun isSubscriptionActive(expirationDate: LocalDate): Boolean {\n    val currentDate = LocalDate.now()\n    return currentDate <= expirationDate\n}\n\nfun main() {\n    val expirationDate = LocalDate.of(2023, 12, 31) // Example expiration date\n    if (isSubscriptionActive(expirationDate)) {\n        println(\"Subscription is active.\")\n    } else {\n        println(\"Subscription has expired.\")\n    }\n}\n```"
  },
  {
    "task": "Design a tool to check if a user\u2019s input is a palindrome phrase, ignoring spaces and punctuation.",
    "code": "```kotlin\nfun isPalindromePhrase(input: String): Boolean {\n    val sanitizedInput = input.filter { it.isLetterOrDigit() }.toLowerCase()\n    return sanitizedInput == sanitizedInput.reversed()\n}\n\nfun main() {\n    println(\"Enter a phrase:\")\n    val userInput = readLine() ?: \"\"\n    if (isPalindromePhrase(userInput)) {\n        println(\"The phrase is a palindrome.\")\n    } else {\n        println(\"The phrase is not a palindrome.\")\n    }\n}\n```"
  },
  {
    "task": "Implement a system to verify if a given number is part of the Fibonacci sequence.",
    "code": "```kotlin\nfun isFibonacci(num: Int): Boolean {\n    if (num < 0) return false\n    var a = 0\n    var b = 1\n    while (b < num) {\n        val temp = b\n        b += a\n        a = temp\n    }\n    return num == b || num == 0\n}\n\nfun main() {\n    val number = 21\n    if (isFibonacci(number)) {\n        println(\"$number is a Fibonacci number.\")\n    } else {\n        println(\"$number is not a Fibonacci number.\")\n    }\n}\n```"
  },
  {
    "task": "Write a program to compare the elevation of two geographic locations.",
    "code": "```kotlin\nfun compareElevations(elevation1: Double, elevation2: Double): String {\n    return when {\n        elevation1 > elevation2 -> \"Location 1 is higher than Location 2\"\n        elevation1 < elevation2 -> \"Location 1 is lower than Location 2\"\n        else -> \"Both locations are at the same elevation\"\n    }\n}\n\nfun main() {\n    val elevation1 = 450.0\n    val elevation2 = 350.0\n\n    println(compareElevations(elevation1, elevation2))\n}\n```"
  },
  {
    "task": "Create a function to determine if a given string is a valid JSON format.",
    "code": "```kotlin\nimport org.json.JSONObject\nimport org.json.JSONException\n\nfun isValidJson(input: String): Boolean {\n    return try {\n        JSONObject(input)\n        true\n    } catch (e: JSONException) {\n        false\n    }\n}\n```"
  },
  {
    "task": "Build a utility that checks if a number is a factorial of any integer.",
    "code": "```kotlin\nfun isFactorial(num: Int): Boolean {\n    if (num < 0) return false\n    var i = 1\n    var factorial = 1\n    while (factorial < num) {\n        i++\n        factorial *= i\n    }\n    return factorial == num\n}\n\nfun main() {\n    val number = 120\n    println(\"Is $number a factorial of any integer? ${isFactorial(number)}\")\n}\n```"
  },
  {
    "task": "Develop a feature to compare the widths of two ribbons and return the wider one.",
    "code": "```kotlin\nfun widerRibbon(width1: Double, width2: Double): Double {\n    return if (width1 > width2) width1 else width2\n}\n```"
  },
  {
    "task": "Write a script to see if a word is present in a list of banned words.",
    "code": "```kotlin\nfun isWordBanned(word: String, bannedWords: List<String>): Boolean {\n    return bannedWords.contains(word)\n}\n\nfun main() {\n    val bannedWords = listOf(\"forbidden\", \"restricted\", \"prohibited\")\n    val word = \"restricted\"\n    \n    if (isWordBanned(word, bannedWords)) {\n        println(\"The word \\\"$word\\\" is banned.\")\n    } else {\n        println(\"The word \\\"$word\\\" is not banned.\")\n    }\n}\n```"
  },
  {
    "task": "Design a system to determine if a patient's temperature is in the normal range.",
    "code": "```kotlin\nfun isTemperatureNormal(temperature: Double): Boolean {\n    val normalRangeLow = 36.5\n    val normalRangeHigh = 37.5\n    return temperature >= normalRangeLow && temperature <= normalRangeHigh\n}\n\nfun main() {\n    val temperature = 37.0\n    if (isTemperatureNormal(temperature)) {\n        println(\"Temperature is normal.\")\n    } else {\n        println(\"Temperature is not normal.\")\n    }\n}\n```"
  },
  {
    "task": "Create a program that checks if a given time is during business hours.",
    "code": "```kotlin\nfun isDuringBusinessHours(hour: Int, minute: Int): Boolean {\n    val startHour = 9\n    val endHour = 17\n    return (hour > startHour || (hour == startHour && minute >= 0)) &&\n           (hour < endHour || (hour == endHour && minute == 0))\n}\n\nfun main() {\n    val hour = 14\n    val minute = 30\n    println(\"Is $hour:$minute during business hours? ${isDuringBusinessHours(hour, minute)}\")\n}\n```"
  },
  {
    "task": "Implement a function to see if a number is a triangular number.",
    "code": "```kotlin\nfun isTriangularNumber(num: Int): Boolean {\n    if (num < 0) return false\n    var sum = 0\n    var n = 1\n    while (sum < num) {\n        sum += n\n        n++\n    }\n    return sum == num\n}\n```"
  },
  {
    "task": "Write a feature to compare the number of vowels in two given strings.",
    "code": "```kotlin\nfun countVowels(s: String): Int {\n    return s.count { it in \"aeiouAEIOU\" }\n}\n\nfun compareVowelCount(string1: String, string2: String): Int {\n    val vowels1 = countVowels(string1)\n    val vowels2 = countVowels(string2)\n    return when {\n        vowels1 > vowels2 -> 1\n        vowels1 < vowels2 -> -1\n        else -> 0\n    }\n}\n```"
  }
]