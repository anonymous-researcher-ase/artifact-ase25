[
  {
    "task": "Define a class representing a book with attributes for title, author, and number of pages, and a method to display the book's information.",
    "code": "```kotlin\nclass Book(private val title: String, private val author: String, private val numberOfPages: Int) {\n    fun displayInfo() {\n        println(\"Title: $title\")\n        println(\"Author: $author\")\n        println(\"Number of Pages: $numberOfPages\")\n    }\n}\n```"
  },
  {
    "task": "Create a class for a bank account that includes attributes for account number, balance, and a method to deposit funds.",
    "code": "```kotlin\nclass BankAccount(val accountNumber: String, var balance: Double) {\n    fun deposit(amount: Double) {\n        if (amount > 0) {\n            balance += amount\n        }\n    }\n}\n```"
  },
  {
    "task": "Design a class for a vehicle with properties for make, model, and year, and a method to start the engine.",
    "code": "```kotlin\nclass Vehicle(val make: String, val model: String, val year: Int) {\n    fun startEngine() {\n        println(\"Engine started\")\n    }\n}\n```"
  },
  {
    "task": "Implement a class that models a student with attributes for name, ID, and grades, and a method to calculate the GPA.",
    "code": "```kotlin\nclass Student(private val name: String, private val id: String, private val grades: List<Double>) {\n\n    fun calculateGPA(): Double {\n        return if (grades.isNotEmpty()) {\n            grades.sum() / grades.size\n        } else {\n            0.0\n        }\n    }\n}\n```"
  },
  {
    "task": "Construct a class for a rectangle that has attributes for width and height, and methods to calculate area and perimeter.",
    "code": "```kotlin\nclass Rectangle(private val width: Double, private val height: Double) {\n\n    fun area(): Double {\n        return width * height\n    }\n\n    fun perimeter(): Double {\n        return 2 * (width + height)\n    }\n}\n```"
  },
  {
    "task": "Formulate a class for a smartphone with properties for brand, model, and battery life, and a method to make a call.",
    "code": "```kotlin\nclass Smartphone(\n    val brand: String,\n    val model: String,\n    val batteryLife: Int\n) {\n    fun makeCall(number: String) {\n        println(\"Calling $number...\")\n    }\n}\n```"
  },
  {
    "task": "Build a class representing a movie with attributes for title, director, and duration, and a method to play the movie.",
    "code": "```kotlin\nclass Movie(val title: String, val director: String, val duration: Int) {\n    fun play() {\n        println(\"Playing the movie: $title\")\n    }\n}\n```"
  },
  {
    "task": "Create a class for an employee with attributes for name, position, and salary, and a method to display their profile.",
    "code": "```kotlin\nclass Employee(val name: String, val position: String, val salary: Double) {\n    fun displayProfile() {\n        println(\"Name: $name\")\n        println(\"Position: $position\")\n        println(\"Salary: $salary\")\n    }\n}\n```"
  },
  {
    "task": "Design a class for a library that includes attributes for name, location, and books available, and a method to add a new book.",
    "code": "```kotlin\nclass Library(\n    val name: String,\n    val location: String,\n    private val books: MutableList<String>\n) {\n    fun addBook(book: String) {\n        books.add(book)\n    }\n}\n```"
  },
  {
    "task": "Develop a class for a shopping cart with properties for items and total cost, and methods to add and remove items.",
    "code": "```kotlin\ndata class Item(val name: String, val price: Double)\n\nclass ShoppingCart {\n    private val items = mutableListOf<Item>()\n    var totalCost: Double = 0.0\n        private set\n\n    fun addItem(item: Item) {\n        items.add(item)\n        totalCost += item.price\n    }\n\n    fun removeItem(item: Item) {\n        if (items.remove(item)) {\n            totalCost -= item.price\n        }\n    }\n}\n```"
  },
  {
    "task": "Implement a class for a thermostat with attributes for current temperature and desired temperature, and a method to adjust the temperature.",
    "code": "```kotlin\nclass Thermostat(private var currentTemperature: Double, private var desiredTemperature: Double) {\n\n    fun adjustTemperature() {\n        if (currentTemperature < desiredTemperature) {\n            currentTemperature++\n        } else if (currentTemperature > desiredTemperature) {\n            currentTemperature--\n        }\n    }\n\n    fun getCurrentTemperature(): Double {\n        return currentTemperature\n    }\n\n    fun getDesiredTemperature(): Double {\n        return desiredTemperature\n    }\n\n    fun setDesiredTemperature(newDesiredTemperature: Double) {\n        desiredTemperature = newDesiredTemperature\n    }\n}\n```"
  },
  {
    "task": "Formulate a class for a person with attributes for first name, last name, and age, and a method to return the full name.",
    "code": "```kotlin\nclass Person(val firstName: String, val lastName: String, var age: Int) {\n    fun fullName(): String {\n        return \"$firstName $lastName\"\n    }\n}\n```"
  },
  {
    "task": "Construct a class for a game character with properties for health, strength, and inventory, and a method to attack.",
    "code": "```kotlin\nclass GameCharacter(var health: Int, var strength: Int) {\n    val inventory: MutableList<String> = mutableListOf()\n\n    fun attack(target: GameCharacter) {\n        target.health -= this.strength\n        if (target.health < 0) {\n            target.health = 0\n        }\n    }\n}\n```"
  },
  {
    "task": "Create a class for a calendar event with attributes for title, date, and location, and a method to reschedule the event.",
    "code": "```kotlin\nimport java.time.LocalDate\n\nclass CalendarEvent(\n    var title: String,\n    var date: LocalDate,\n    var location: String\n) {\n    fun reschedule(newDate: LocalDate) {\n        date = newDate\n    }\n}\n```"
  },
  {
    "task": "Design a class representing a song with properties for title, artist, and duration, and a method to play the song.",
    "code": "```kotlin\nclass Song(val title: String, val artist: String, val duration: Int) {\n    fun play() {\n        println(\"Playing '$title' by $artist\")\n    }\n}\n```"
  },
  {
    "task": "Develop a class for an order in an e-commerce system with attributes for order ID, customer, and items, and a method to calculate total price.",
    "code": "```kotlin\nclass Order(\n    val orderId: String,\n    val customer: String,\n    val items: List<Item>\n) {\n    fun calculateTotalPrice(): Double {\n        return items.sumOf { it.price }\n    }\n}\n\ndata class Item(\n    val name: String,\n    val price: Double\n)\n```"
  },
  {
    "task": "Build a class for a social media post with attributes for content, author, and timestamp, and a method to like the post.",
    "code": "```kotlin\nclass SocialMediaPost(\n    var content: String,\n    var author: String,\n    var timestamp: String\n) {\n    private var likes: Int = 0\n\n    fun likePost() {\n        likes++\n    }\n}\n```"
  },
  {
    "task": "Create a class for a computer with properties for processor, RAM, and storage, and a method to display system specifications.",
    "code": "```kotlin\nclass Computer(val processor: String, val ram: Int, val storage: Int) {\n    fun displaySpecifications() {\n        println(\"Processor: $processor\")\n        println(\"RAM: ${ram}GB\")\n        println(\"Storage: ${storage}GB\")\n    }\n}\n```"
  },
  {
    "task": "Implement a class for a restaurant menu item with attributes for name, price, and description, and a method to update the price.",
    "code": "```kotlin\nclass MenuItem(var name: String, var price: Double, var description: String) {\n    fun updatePrice(newPrice: Double) {\n        price = newPrice\n    }\n}\n```"
  },
  {
    "task": "Design a class for a package delivery with attributes for tracking number, destination, and status, and a method to update the status.",
    "code": "```kotlin\nclass PackageDelivery(\n    val trackingNumber: String,\n    val destination: String,\n    var status: String\n) {\n    fun updateStatus(newStatus: String) {\n        status = newStatus\n    }\n}\n```"
  },
  {
    "task": "Construct a class representing a pet with attributes for species, age, and name, and a method to display its details.",
    "code": "```kotlin\nclass Pet(val species: String, val age: Int, val name: String) {\n    fun displayDetails() {\n        println(\"Species: $species, Age: $age, Name: $name\")\n    }\n}\n\n// Example usage\nfun main() {\n    val pet = Pet(\"Dog\", 5, \"Buddy\")\n    pet.displayDetails()\n}\n```"
  },
  {
    "task": "Formulate a class for a product in a store with properties for SKU, name, and price, and a method to apply a discount.",
    "code": "```kotlin\nclass Product(val sku: String, var name: String, var price: Double) {\n    fun applyDiscount(discount: Double) {\n        price -= price * discount / 100\n    }\n}\n```"
  },
  {
    "task": "Develop a class for a university course with attributes for course code, title, and credits, and a method to enroll a student.",
    "code": "```kotlin\nclass UniversityCourse(\n    val courseCode: String,\n    val title: String,\n    val credits: Int\n) {\n    private val enrolledStudents = mutableListOf<String>()\n\n    fun enrollStudent(studentName: String) {\n        enrolledStudents.add(studentName)\n    }\n}\n```"
  },
  {
    "task": "Create a class for a smart light bulb with attributes for color, brightness, and state (on/off), and a method to change the color.",
    "code": "```kotlin\nclass SmartLightBulb(var color: String, var brightness: Int, var state: Boolean) {\n\n    fun changeColor(newColor: String) {\n        color = newColor\n    }\n}\n```"
  },
  {
    "task": "Design a class for a blog post with properties for title, content, and date published, and a method to edit the content.",
    "code": "```kotlin\nimport java.time.LocalDate\n\nclass BlogPost(\n    var title: String,\n    var content: String,\n    var datePublished: LocalDate\n) {\n    fun editContent(newContent: String) {\n        content = newContent\n    }\n}\n```"
  },
  {
    "task": "Build a class for a bank transaction with attributes for transaction ID, amount, and type, and a method to reverse the transaction.",
    "code": "```kotlin\nclass BankTransaction(\n    val transactionId: String,\n    var amount: Double,\n    var type: String\n) {\n    fun reverseTransaction() {\n        amount = -amount\n        type = if (type == \"debit\") \"credit\" else \"debit\"\n    }\n}\n```"
  },
  {
    "task": "Implement a class for a city with properties for name, population, and area, and a method to calculate population density.",
    "code": "```kotlin\nclass City(val name: String, val population: Int, val area: Double) {\n    fun populationDensity(): Double {\n        return population / area\n    }\n}\n```"
  },
  {
    "task": "Construct a class for a library member with attributes for member ID, name, and borrowed books, and a method to borrow a book.",
    "code": "```kotlin\nclass LibraryMember(val memberId: Int, var name: String) {\n    private val borrowedBooks = mutableListOf<String>()\n\n    fun borrowBook(bookTitle: String) {\n        borrowedBooks.add(bookTitle)\n    }\n}\n```"
  },
  {
    "task": "Create a class for a flight reservation with attributes for flight number, passenger name, and seat number, and a method to change the seat.",
    "code": "```kotlin\nclass FlightReservation(\n    var flightNumber: String,\n    var passengerName: String,\n    var seatNumber: String\n) {\n    fun changeSeat(newSeatNumber: String) {\n        seatNumber = newSeatNumber\n    }\n}\n```"
  },
  {
    "task": "Develop a class for a digital photo album with properties for album name, photos, and a method to add a new photo.",
    "code": "```kotlin\nclass DigitalPhotoAlbum(val albumName: String) {\n    private val photos: MutableList<String> = mutableListOf()\n\n    fun addPhoto(photo: String) {\n        photos.add(photo)\n    }\n}\n```"
  },
  {
    "task": "Design a class for a task in a to-do list with attributes for description, deadline, and status, and a method to mark it as complete.",
    "code": "```kotlin\nclass Task(\n    val description: String,\n    val deadline: String,\n    var status: String\n) {\n    fun markAsComplete() {\n        status = \"Complete\"\n    }\n}\n```"
  },
  {
    "task": "Formulate a class for a conference speaker with attributes for name, topic, and time slot, and a method to update the time slot.",
    "code": "```kotlin\nclass ConferenceSpeaker(var name: String, var topic: String, var timeSlot: String) {\n    fun updateTimeSlot(newTimeSlot: String) {\n        timeSlot = newTimeSlot\n    }\n}\n```"
  },
  {
    "task": "Construct a class for a real estate property with attributes for address, price, and square footage, and a method to change the price.",
    "code": "```kotlin\nclass RealEstateProperty(\n    var address: String,\n    var price: Double,\n    var squareFootage: Int\n) {\n    fun changePrice(newPrice: Double) {\n        price = newPrice\n    }\n}\n```"
  },
  {
    "task": "Create a class for a weather forecast with properties for temperature, humidity, and condition, and a method to update the forecast.",
    "code": "```kotlin\nclass WeatherForecast(var temperature: Double, var humidity: Double, var condition: String) {\n    fun updateForecast(newTemperature: Double, newHumidity: Double, newCondition: String) {\n        temperature = newTemperature\n        humidity = newHumidity\n        condition = newCondition\n    }\n}\n```"
  },
  {
    "task": "Build a class for a musical instrument with attributes for type, brand, and model, and a method to play a note.",
    "code": "```kotlin\nclass MusicalInstrument(val type: String, val brand: String, val model: String) {\n    fun playNote(note: String) {\n        println(\"Playing note: $note\")\n    }\n}\n```"
  },
  {
    "task": "Design a class for a sports team with attributes for team name, players, and coach, and a method to add a new player.",
    "code": "```kotlin\nclass SportsTeam(\n    val teamName: String,\n    val coach: String\n) {\n    private val players: MutableList<String> = mutableListOf()\n\n    fun addPlayer(player: String) {\n        players.add(player)\n    }\n}\n```"
  },
  {
    "task": "Implement a class for a podcast episode with attributes for title, duration, and host, and a method to play the episode.",
    "code": "```kotlin\nclass PodcastEpisode(val title: String, val duration: Int, val host: String) {\n    fun play() {\n        println(\"Playing episode: $title by $host\")\n    }\n}\n```"
  },
  {
    "task": "Develop a class for a space mission with properties for mission name, crew, and launch date, and a method to launch the mission.",
    "code": "```kotlin\nclass SpaceMission(val missionName: String, val crew: Int, val launchDate: String) {\n    \n    fun launchMission() {\n        println(\"Launching mission: $missionName with $crew crew members on $launchDate.\")\n    }\n}\n```"
  },
  {
    "task": "Create a class for a virtual assistant with attributes for name, language, and skills, and a method to add a new skill.",
    "code": "```kotlin\nclass VirtualAssistant(\n    var name: String,\n    var language: String,\n    var skills: MutableList<String>\n) {\n    fun addSkill(skill: String) {\n        skills.add(skill)\n    }\n}\n```"
  },
  {
    "task": "Formulate a class for a news article with attributes for headline, content, and author, and a method to publish the article.",
    "code": "```kotlin\nclass NewsArticle(private val headline: String, private val content: String, private val author: String) {\n\n    fun publishArticle() {\n        println(\"Headline: $headline\")\n        println(\"Content: $content\")\n        println(\"Author: $author\")\n    }\n}\n```"
  },
  {
    "task": "Construct a class for a hiking trail with attributes for trail name, length, and difficulty, and a method to update the difficulty.",
    "code": "```kotlin\nclass HikingTrail(var trailName: String, var length: Double, var difficulty: String) {\n    fun updateDifficulty(newDifficulty: String) {\n        difficulty = newDifficulty\n    }\n}\n```"
  },
  {
    "task": "Design a class for a subscription service with properties for service name, subscriber count, and subscription fee, and a method to update the fee.",
    "code": "```kotlin\nclass SubscriptionService(\n    val serviceName: String,\n    var subscriberCount: Int,\n    var subscriptionFee: Double\n) {\n    fun updateFee(newFee: Double) {\n        subscriptionFee = newFee\n    }\n}\n```"
  },
  {
    "task": "Build a class for a digital wallet with attributes for balance, transaction history, and a method to add funds.",
    "code": "```kotlin\nclass DigitalWallet {\n    var balance: Double = 0.0\n    private val transactionHistory: MutableList<String> = mutableListOf()\n\n    fun addFunds(amount: Double) {\n        if (amount > 0) {\n            balance += amount\n            transactionHistory.add(\"Added $amount to balance.\")\n        }\n    }\n\n    fun getTransactionHistory(): List<String> {\n        return transactionHistory\n    }\n}\n```"
  },
  {
    "task": "Implement a class for a cooking recipe with attributes for name, ingredients, and instructions, and a method to update the instructions.",
    "code": "```kotlin\nclass CookingRecipe(var name: String, var ingredients: List<String>, var instructions: String) {\n\n    fun updateInstructions(newInstructions: String) {\n        instructions = newInstructions\n    }\n}\n```"
  },
  {
    "task": "Develop a class for a time zone with properties for zone name, offset, and a method to convert time from another time zone.",
    "code": "```kotlin\nclass TimeZone(val zoneName: String, val offset: Int) {\n\n    fun convertTime(hour: Int, fromOffset: Int): Int {\n        val convertedHour = (hour + (offset - fromOffset)) % 24\n        return if (convertedHour < 0) convertedHour + 24 else convertedHour\n    }\n}\n```"
  },
  {
    "task": "Create a class for a camera with attributes for resolution, brand, and model, and a method to take a picture.",
    "code": "```kotlin\nclass Camera(val resolution: String, val brand: String, val model: String) {\n    fun takePicture() {\n        println(\"Picture taken with $brand $model at $resolution resolution.\")\n    }\n}\n```"
  },
  {
    "task": "Design a class for a gaming console with properties for brand, model, and storage capacity, and a method to install a game.",
    "code": "```kotlin\nclass GamingConsole(\n    val brand: String,\n    val model: String,\n    var storageCapacity: Int\n) {\n    fun installGame(gameSize: Int) {\n        if (gameSize <= storageCapacity) {\n            storageCapacity -= gameSize\n            println(\"Game installed successfully. Remaining storage: $storageCapacity GB\")\n        } else {\n            println(\"Not enough storage to install the game.\")\n        }\n    }\n}\n```"
  },
  {
    "task": "Formulate a class for a museum exhibit with attributes for exhibit name, artist, and year, and a method to update the year.",
    "code": "```kotlin\nclass MuseumExhibit(var exhibitName: String, var artist: String, var year: Int) {\n    fun updateYear(newYear: Int) {\n        year = newYear\n    }\n}\n```"
  },
  {
    "task": "Construct a class for a fitness tracker with attributes for steps, calories burned, and heart rate, and a method to add steps.",
    "code": "```kotlin\nclass FitnessTracker {\n    var steps: Int = 0\n    var caloriesBurned: Double = 0.0\n    var heartRate: Int = 0\n\n    fun addSteps(additionalSteps: Int) {\n        steps += additionalSteps\n    }\n}\n```"
  },
  {
    "task": "Build a class for an aquarium with properties for tank size, fish species, and water temperature, and a method to add a new fish.",
    "code": "```kotlin\nclass Aquarium(var tankSize: Int, var waterTemperature: Double) {\n    private val fishSpecies = mutableListOf<String>()\n\n    fun addFish(species: String) {\n        fishSpecies.add(species)\n    }\n}\n```"
  },
  {
    "task": "Create a class for a chat message with attributes for sender, content, and timestamp, and a method to edit the content.",
    "code": "```kotlin\nimport java.time.LocalDateTime\n\nclass ChatMessage(val sender: String, var content: String, val timestamp: LocalDateTime) {\n\n    fun editContent(newContent: String) {\n        content = newContent\n    }\n}\n```"
  },
  {
    "task": "Design a class for a vending machine with properties for items available, prices, and a method to dispense an item.",
    "code": "```kotlin\nclass VendingMachine(\n    private val items: Map<String, Double>\n) {\n    fun dispenseItem(itemName: String): String {\n        return if (items.containsKey(itemName)) {\n            \"Dispensing $itemName\"\n        } else {\n            \"Item not available\"\n        }\n    }\n}\n```"
  },
  {
    "task": "Implement a class for a digital clock with attributes for current time, time zone, and a method to set an alarm.",
    "code": "```kotlin\nclass DigitalClock(var currentTime: String, var timeZone: String) {\n    \n    private var alarmTime: String? = null\n\n    fun setAlarm(time: String) {\n        alarmTime = time\n    }\n}\n```"
  },
  {
    "task": "Develop a class for a historical figure with attributes for name, birthdate, and achievements, and a method to add an achievement.",
    "code": "```kotlin\nclass HistoricalFigure(val name: String, val birthDate: String) {\n    private val achievements = mutableListOf<String>()\n\n    fun addAchievement(achievement: String) {\n        achievements.add(achievement)\n    }\n\n    fun getAchievements(): List<String> {\n        return achievements\n    }\n}\n```"
  },
  {
    "task": "Formulate a class for a travel itinerary with attributes for destinations, travel dates, and activities, and a method to add a destination.",
    "code": "```kotlin\nclass TravelItinerary {\n    var destinations: MutableList<String> = mutableListOf()\n    var travelDates: MutableList<String> = mutableListOf()\n    var activities: MutableList<String> = mutableListOf()\n\n    fun addDestination(destination: String) {\n        destinations.add(destination)\n    }\n}\n```"
  },
  {
    "task": "Construct a class for a fashion brand with properties for brand name, founder, and product lines, and a method to launch a new product line.",
    "code": "```kotlin\nclass FashionBrand(\n    val brandName: String,\n    val founder: String,\n    val productLines: MutableList<String>\n) {\n    fun launchNewProductLine(newProductLine: String) {\n        productLines.add(newProductLine)\n    }\n}\n```"
  },
  {
    "task": "Create a class for a video game with attributes for title, genre, and rating, and a method to update the rating.",
    "code": "```kotlin\nclass VideoGame(var title: String, var genre: String, var rating: Double) {\n    fun updateRating(newRating: Double) {\n        rating = newRating\n    }\n}\n```"
  },
  {
    "task": "Build a class for a scientific experiment with attributes for experiment name, hypothesis, and results, and a method to record results.",
    "code": "```kotlin\nclass ScientificExperiment(\n    val experimentName: String,\n    val hypothesis: String,\n    var results: String? = null\n) {\n    fun recordResults(newResults: String) {\n        results = newResults\n    }\n}\n```"
  },
  {
    "task": "Design a class for a gourmet dish with properties for dish name, ingredients, and cooking time, and a method to change cooking time.",
    "code": "```kotlin\nclass GourmetDish(\n    val name: String,\n    val ingredients: List<String>,\n    var cookingTime: Int\n) {\n    fun changeCookingTime(newTime: Int) {\n        cookingTime = newTime\n    }\n}\n```"
  },
  {
    "task": "Implement a class for a political office with attributes for office title, holder, and term length, and a method to change the holder.",
    "code": "```kotlin\nclass PoliticalOffice(\n    var officeTitle: String,\n    var holder: String,\n    var termLength: Int\n) {\n    fun changeHolder(newHolder: String) {\n        holder = newHolder\n    }\n}\n```"
  },
  {
    "task": "Develop a class for an astronomical object with properties for name, type, and distance from Earth, and a method to update the distance.",
    "code": "```kotlin\nclass AstronomicalObject(\n    var name: String,\n    var type: String,\n    var distanceFromEarth: Double\n) {\n    fun updateDistance(newDistance: Double) {\n        distanceFromEarth = newDistance\n    }\n}\n```"
  },
  {
    "task": "Formulate a class for a public transportation route with attributes for route number, stops, and schedule, and a method to add a stop.",
    "code": "```kotlin\nclass PublicTransportationRoute(\n    val routeNumber: Int,\n    val stops: MutableList<String>,\n    val schedule: String\n) {\n    fun addStop(stop: String) {\n        stops.add(stop)\n    }\n}\n```"
  },
  {
    "task": "Construct a class for a board game with properties for game name, player count, and rules, and a method to change the rules.",
    "code": "```kotlin\nclass BoardGame(var gameName: String, var playerCount: Int, var rules: String) {\n    fun changeRules(newRules: String) {\n        rules = newRules\n    }\n}\n```"
  },
  {
    "task": "Create a class for a customer loyalty program with attributes for program name, points, and rewards, and a method to redeem points.",
    "code": "```kotlin\nclass CustomerLoyaltyProgram(\n    val programName: String,\n    var points: Int,\n    val rewards: List<String>\n) {\n    fun redeemPoints(pointsToRedeem: Int): Boolean {\n        return if (points >= pointsToRedeem) {\n            points -= pointsToRedeem\n            true\n        } else {\n            false\n        }\n    }\n}\n```"
  },
  {
    "task": "Design a class for an art gallery with properties for gallery name, location, and exhibitions, and a method to add a new exhibition.",
    "code": "```kotlin\nclass ArtGallery(\n    val name: String,\n    val location: String\n) {\n    private val exhibitions = mutableListOf<String>()\n\n    fun addExhibition(exhibition: String) {\n        exhibitions.add(exhibition)\n    }\n\n    fun getExhibitions(): List<String> {\n        return exhibitions\n    }\n}\n```"
  },
  {
    "task": "Build a class for a personal blog with attributes for blog name, posts, and a method to add a new post.",
    "code": "```kotlin\nclass Blog(val blogName: String) {\n    private val posts: MutableList<String> = mutableListOf()\n\n    fun addPost(post: String) {\n        posts.add(post)\n    }\n}\n```"
  },
  {
    "task": "Implement a class for a mobile application with properties for app name, version, and developer, and a method to update the version.",
    "code": "```kotlin\nclass MobileApp(private var appName: String, private var version: String, private var developer: String) {\n\n    fun updateVersion(newVersion: String) {\n        version = newVersion\n    }\n\n    fun getAppName(): String {\n        return appName\n    }\n\n    fun getVersion(): String {\n        return version\n    }\n\n    fun getDeveloper(): String {\n        return developer\n    }\n}\n```"
  },
  {
    "task": "Develop a class for a language translator with attributes for source language, target language, and translation method, and a method to translate a text.",
    "code": "```kotlin\nclass LanguageTranslator(\n    val sourceLanguage: String,\n    val targetLanguage: String,\n    val translationMethod: String\n) {\n    fun translate(text: String): String {\n        // Implementation of translation logic goes here\n        return \"Translated text\"\n    }\n}\n```"
  },
  {
    "task": "Formulate a class for a culinary school with properties for school name, courses offered, and a method to add a new course.",
    "code": "```kotlin\nclass CulinarySchool(val schoolName: String) {\n    private val coursesOffered: MutableList<String> = mutableListOf()\n\n    fun addCourse(course: String) {\n        coursesOffered.add(course)\n    }\n    \n    fun getCourses(): List<String> {\n        return coursesOffered\n    }\n}\n```"
  },
  {
    "task": "Construct a class for a musical band with attributes for band name, members, and genre, and a method to add a new member.",
    "code": "```kotlin\nclass Band(val name: String, var genre: String) {\n    private val members = mutableListOf<String>()\n\n    fun addMember(member: String) {\n        members.add(member)\n    }\n\n    fun getMembers(): List<String> {\n        return members\n    }\n}\n```"
  },
  {
    "task": "Create a class for a television series with properties for series title, episodes, and network, and a method to add a new episode.",
    "code": "```kotlin\nclass TelevisionSeries(\n    val seriesTitle: String,\n    val network: String\n) {\n    private val episodes: MutableList<String> = mutableListOf()\n\n    fun addEpisode(episode: String) {\n        episodes.add(episode)\n    }\n\n    fun getEpisodes(): List<String> {\n        return episodes.toList()\n    }\n}\n```"
  },
  {
    "task": "Design a class for a wildlife reserve with attributes for reserve name, species protected, and area size, and a method to expand the area.",
    "code": "```kotlin\nclass WildlifeReserve(\n    val reserveName: String,\n    val speciesProtected: List<String>,\n    var areaSize: Double\n) {\n    fun expandArea(additionalSize: Double) {\n        areaSize += additionalSize\n    }\n}\n```"
  },
  {
    "task": "Build a class for a luxury car with properties for brand, model, and price, and a method to update the price.",
    "code": "```kotlin\nclass LuxuryCar(var brand: String, var model: String, var price: Double) {\n    \n    fun updatePrice(newPrice: Double) {\n        price = newPrice\n    }\n}\n```"
  },
  {
    "task": "Implement a class for a scientific journal with attributes for journal name, articles, and impact factor, and a method to add a new article.",
    "code": "```kotlin\nclass ScientificJournal(\n    val journalName: String,\n    var impactFactor: Double\n) {\n    private val articles: MutableList<String> = mutableListOf()\n\n    fun addArticle(article: String) {\n        articles.add(article)\n    }\n}\n```"
  },
  {
    "task": "Develop a class for a historical monument with properties for monument name, location, and year established, and a method to update the location.",
    "code": "```kotlin\nclass HistoricalMonument(\n    var monumentName: String,\n    var location: String,\n    var yearEstablished: Int\n) {\n    fun updateLocation(newLocation: String) {\n        location = newLocation\n    }\n}\n```"
  },
  {
    "task": "Formulate a class for an educational course with attributes for course title, instructor, and syllabus, and a method to update the syllabus.",
    "code": "```kotlin\nclass EducationalCourse(\n    var courseTitle: String,\n    var instructor: String,\n    var syllabus: String\n) {\n    fun updateSyllabus(newSyllabus: String) {\n        syllabus = newSyllabus\n    }\n}\n```"
  },
  {
    "task": "Construct a class for a city park with properties for park name, facilities, and opening hours, and a method to add a new facility.",
    "code": "```kotlin\nclass CityPark(\n    var parkName: String,\n    var facilities: MutableList<String>,\n    var openingHours: String\n) {\n    fun addFacility(facility: String) {\n        facilities.add(facility)\n    }\n}\n```"
  },
  {
    "task": "Create a class for a fitness class with attributes for class name, instructor, and schedule, and a method to update the schedule.",
    "code": "```kotlin\nclass FitnessClass(\n    var className: String,\n    var instructor: String,\n    var schedule: String\n) {\n    fun updateSchedule(newSchedule: String) {\n        schedule = newSchedule\n    }\n}\n```"
  },
  {
    "task": "Design a class for a virtual reality game with properties for game name, platform, and VR compatibility, and a method to change the platform.",
    "code": "```kotlin\nclass VirtualRealityGame(\n    var gameName: String,\n    var platform: String,\n    var isVrCompatible: Boolean\n) {\n    fun changePlatform(newPlatform: String) {\n        platform = newPlatform\n    }\n}\n```"
  },
  {
    "task": "Build a class for a mountain range with attributes for range name, highest peak, and countries covered, and a method to add a new peak.",
    "code": "```kotlin\nclass MountainRange(\n    val rangeName: String,\n    var highestPeak: String,\n    var countriesCovered: List<String>\n) {\n    private val peaks = mutableListOf<String>()\n\n    init {\n        peaks.add(highestPeak)\n    }\n\n    fun addNewPeak(peak: String) {\n        peaks.add(peak)\n    }\n}\n```"
  },
  {
    "task": "Implement a class for a documentary film with properties for title, director, and subject, and a method to update the subject.",
    "code": "```kotlin\nclass DocumentaryFilm(var title: String, var director: String, var subject: String) {\n    fun updateSubject(newSubject: String) {\n        subject = newSubject\n    }\n}\n```"
  },
  {
    "task": "Develop a class for a classical music composition with attributes for composition name, composer, and duration, and a method to change the duration.",
    "code": "```kotlin\nclass ClassicalMusicComposition(\n    var compositionName: String,\n    var composer: String,\n    var duration: Int\n) {\n    fun changeDuration(newDuration: Int) {\n        duration = newDuration\n    }\n}\n```"
  },
  {
    "task": "Formulate a class for a public library with properties for library name, books available, and membership, and a method to add a new book.",
    "code": "```kotlin\nclass PublicLibrary(\n    val libraryName: String,\n    val booksAvailable: MutableList<String>,\n    var membership: Int\n) {\n    fun addNewBook(bookTitle: String) {\n        booksAvailable.add(bookTitle)\n    }\n}\n```"
  },
  {
    "task": "Construct a class for a tech startup with attributes for startup name, founder, and funding, and a method to raise additional funding.",
    "code": "```kotlin\nclass TechStartup(\n    var startupName: String,\n    var founder: String,\n    var funding: Double\n) {\n    fun raiseFunding(amount: Double) {\n        funding += amount\n    }\n}\n```"
  }
]