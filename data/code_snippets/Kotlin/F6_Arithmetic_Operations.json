[
  {
    "task": "Write a function that takes two numbers and returns their sum.",
    "code": "```kotlin\nfun sum(a: Int, b: Int): Int {\n    return a + b\n}\n```"
  },
  {
    "task": "Create a program that calculates the difference between two given integers.",
    "code": "```kotlin\nfun main() {\n    val num1 = 10\n    val num2 = 5\n    val difference = num1 - num2\n    println(\"The difference is: $difference\")\n}\n```"
  },
  {
    "task": "Design a function to multiply two floating-point numbers and return the result.",
    "code": "```kotlin\nfun multiply(a: Double, b: Double): Double {\n    return a * b\n}\n```"
  },
  {
    "task": "Implement a function that divides two numbers and handles division by zero exceptions.",
    "code": "```kotlin\nfun divideNumbers(numerator: Double, denominator: Double): Double? {\n    return try {\n        numerator / denominator\n    } catch (e: ArithmeticException) {\n        null\n    }\n}\n```"
  },
  {
    "task": "Build a calculator that can perform addition, subtraction, multiplication, and division on user-provided inputs.",
    "code": "```kotlin\nfun main() {\n    println(\"Enter first number:\")\n    val num1 = readLine()!!.toDouble()\n    println(\"Enter second number:\")\n    val num2 = readLine()!!.toDouble()\n\n    println(\"Enter operation (+, -, *, /):\")\n    val operation = readLine()!!\n\n    val result = when (operation) {\n        \"+\" -> num1 + num2\n        \"-\" -> num1 - num2\n        \"*\" -> num1 * num2\n        \"/\" -> if (num2 != 0.0) num1 / num2 else \"Cannot divide by zero\"\n        else -> \"Invalid operation\"\n    }\n\n    println(\"Result: $result\")\n}\n```"
  },
  {
    "task": "Write a script to compute the average of a list of numbers using arithmetic operations.",
    "code": "```kotlin\nfun main() {\n    val numbers = listOf(10, 20, 30, 40, 50)\n    val sum = numbers.sum()\n    val average = sum.toDouble() / numbers.size\n    println(\"The average is $average\")\n}\n```"
  },
  {
    "task": "Create a function that returns the remainder of the division of two integers.",
    "code": "```kotlin\nfun remainder(dividend: Int, divisor: Int): Int {\n    return dividend % divisor\n}\n```"
  },
  {
    "task": "Develop a function that can add a variable number of arguments and return the total.",
    "code": "```kotlin\nfun add(vararg numbers: Int): Int {\n    return numbers.sum()\n}\n```"
  },
  {
    "task": "Write a program that subtracts a series of numbers from an initial value.",
    "code": "```kotlin\nfun subtractSeries(initialValue: Int, numbers: List<Int>): Int {\n    var result = initialValue\n    for (number in numbers) {\n        result -= number\n    }\n    return result\n}\n\nfun main() {\n    val initialValue = 100\n    val numbers = listOf(10, 5, 15, 20)\n    val result = subtractSeries(initialValue, numbers)\n    println(\"Result after subtraction: $result\")\n}\n```"
  },
  {
    "task": "Implement a function that multiplies all elements in an array and returns the product.",
    "code": "```kotlin\nfun multiplyElements(array: Array<Int>): Int {\n    return array.fold(1) { product, element -> product * element }\n}\n```"
  },
  {
    "task": "Design a program that divides a number by another and rounds the result to two decimal places.",
    "code": "```kotlin\nfun divideAndRound(dividend: Double, divisor: Double): Double {\n    if (divisor == 0.0) throw IllegalArgumentException(\"Divisor cannot be zero.\")\n    val result = dividend / divisor\n    return String.format(\"%.2f\", result).toDouble()\n}\n\nfun main() {\n    val dividend = 10.0\n    val divisor = 3.0\n    val result = divideAndRound(dividend, divisor)\n    println(\"Result: $result\")\n}\n```"
  },
  {
    "task": "Create a function that performs arithmetic operations on complex numbers.",
    "code": "```kotlin\ndata class ComplexNumber(val real: Double, val imaginary: Double)\n\nfun add(a: ComplexNumber, b: ComplexNumber) = ComplexNumber(\n    a.real + b.real,\n    a.imaginary + b.imaginary\n)\n\nfun subtract(a: ComplexNumber, b: ComplexNumber) = ComplexNumber(\n    a.real - b.real,\n    a.imaginary - b.imaginary\n)\n\nfun multiply(a: ComplexNumber, b: ComplexNumber) = ComplexNumber(\n    a.real * b.real - a.imaginary * b.imaginary,\n    a.real * b.imaginary + a.imaginary * b.real\n)\n\nfun divide(a: ComplexNumber, b: ComplexNumber): ComplexNumber {\n    val denominator = b.real * b.real + b.imaginary * b.imaginary\n    return ComplexNumber(\n        (a.real * b.real + a.imaginary * b.imaginary) / denominator,\n        (a.imaginary * b.real - a.real * b.imaginary) / denominator\n    )\n}\n```"
  },
  {
    "task": "Write a function to calculate the area of a rectangle given its length and width using multiplication.",
    "code": "```kotlin\nfun calculateRectangleArea(length: Double, width: Double): Double {\n    return length * width\n}\n```"
  },
  {
    "task": "Build a program that converts a price in dollars to another currency using multiplication with exchange rates.",
    "code": "```kotlin\nfun convertCurrency(priceInDollars: Double, exchangeRate: Double): Double {\n    return priceInDollars * exchangeRate\n}\n\nfun main() {\n    val priceInDollars = 100.0\n    val exchangeRate = 0.85 // Example exchange rate\n    val convertedPrice = convertCurrency(priceInDollars, exchangeRate)\n    println(\"Converted price: $convertedPrice\")\n}\n```"
  },
  {
    "task": "Implement a function that checks if a number is divisible by another and returns a boolean.",
    "code": "```kotlin\nfun isDivisible(number: Int, divisor: Int): Boolean {\n    return number % divisor == 0\n}\n```"
  },
  {
    "task": "Write a script to sum the digits of an integer using arithmetic operations.",
    "code": "```kotlin\nfun sumOfDigits(number: Int): Int {\n    var num = number\n    var sum = 0\n    while (num != 0) {\n        sum += num % 10\n        num /= 10\n    }\n    return sum\n}\n\nfun main() {\n    val number = 12345\n    println(\"Sum of digits: ${sumOfDigits(number)}\")\n}\n```"
  },
  {
    "task": "Develop a function that applies a discount percentage to a price using subtraction and multiplication.",
    "code": "```kotlin\nfun applyDiscount(price: Double, discountPercentage: Double): Double {\n    return price - (price * (discountPercentage / 100))\n}\n```"
  },
  {
    "task": "Create a program to calculate the yearly salary given an hourly wage and hours worked per week.",
    "code": "```kotlin\nfun calculateYearlySalary(hourlyWage: Double, hoursPerWeek: Double): Double {\n    val weeksPerYear = 52\n    return hourlyWage * hoursPerWeek * weeksPerYear\n}\n\nfun main() {\n    val hourlyWage = 20.0\n    val hoursPerWeek = 40.0\n    val yearlySalary = calculateYearlySalary(hourlyWage, hoursPerWeek)\n    println(\"Yearly Salary: $$yearlySalary\")\n}\n```"
  },
  {
    "task": "Design a function that calculates the compound interest over a given period using arithmetic operations.",
    "code": "```kotlin\nfun calculateCompoundInterest(principal: Double, rate: Double, timesCompounded: Int, years: Int): Double {\n    return principal * Math.pow(1 + rate / timesCompounded, timesCompounded * years)\n}\n```"
  },
  {
    "task": "Write a program that scales a 2D point by a given factor using multiplication.",
    "code": "```kotlin\nfun scalePoint(x: Double, y: Double, factor: Double): Pair<Double, Double> {\n    val scaledX = x * factor\n    val scaledY = y * factor\n    return Pair(scaledX, scaledY)\n}\n\nfun main() {\n    val point = Pair(3.0, 4.0)\n    val factor = 2.0\n    val scaledPoint = scalePoint(point.first, point.second, factor)\n    println(\"Scaled point: (${scaledPoint.first}, ${scaledPoint.second})\")\n}\n```"
  },
  {
    "task": "Implement a function that calculates the perimeter of a triangle given its side lengths.",
    "code": "```kotlin\nfun calculatePerimeter(side1: Double, side2: Double, side3: Double): Double {\n    return side1 + side2 + side3\n}\n```"
  },
  {
    "task": "Create a function to determine if three sides can form a right triangle using the Pythagorean theorem.",
    "code": "```kotlin\nfun isRightTriangle(side1: Double, side2: Double, side3: Double): Boolean {\n    val sides = listOf(side1, side2, side3).sorted()\n    val (a, b, c) = sides\n    return a * a + b * b == c * c\n}\n```"
  },
  {
    "task": "Write a script that calculates the total cost of items in a shopping cart using addition.",
    "code": "```kotlin\nfun calculateTotalCost(prices: List<Double>): Double {\n    var totalCost = 0.0\n    for (price in prices) {\n        totalCost += price\n    }\n    return totalCost\n}\n\nfun main() {\n    val shoppingCart = listOf(19.99, 5.49, 3.89, 12.99)\n    val total = calculateTotalCost(shoppingCart)\n    println(\"Total cost: $$total\")\n}\n```"
  },
  {
    "task": "Develop a function that returns the quotient and remainder of a division operation.",
    "code": "```kotlin\nfun divisionOperations(dividend: Int, divisor: Int): Pair<Int, Int> {\n    val quotient = dividend / divisor\n    val remainder = dividend % divisor\n    return Pair(quotient, remainder)\n}\n```"
  },
  {
    "task": "Build a program that simulates a basic checkout system using arithmetic operations for totals and discounts.",
    "code": "```kotlin\nfun main() {\n    val items = listOf(\n        Pair(\"Apple\", 1.50),\n        Pair(\"Banana\", 0.75),\n        Pair(\"Orange\", 1.25)\n    )\n\n    val quantities = mapOf(\n        \"Apple\" to 3,\n        \"Banana\" to 2,\n        \"Orange\" to 5\n    )\n\n    val discountRate = 0.10\n\n    var subtotal = 0.0\n    for ((item, price) in items) {\n        val quantity = quantities[item] ?: 0\n        subtotal += price * quantity\n    }\n\n    val discount = subtotal * discountRate\n    val total = subtotal - discount\n\n    println(\"Subtotal: $$subtotal\")\n    println(\"Discount: $$discount\")\n    println(\"Total: $$total\")\n}\n```"
  },
  {
    "task": "Implement a function to calculate the distance between two points on a plane using subtraction and square roots.",
    "code": "```kotlin\nimport kotlin.math.sqrt\n\nfun calculateDistance(x1: Double, y1: Double, x2: Double, y2: Double): Double {\n    val dx = x2 - x1\n    val dy = y2 - y1\n    return sqrt(dx * dx + dy * dy)\n}\n```"
  },
  {
    "task": "Write a function that calculates the speed of a vehicle given distance and time using division.",
    "code": "```kotlin\nfun calculateSpeed(distance: Double, time: Double): Double {\n    return distance / time\n}\n```"
  },
  {
    "task": "Create a program to compute the total minutes in a given number of hours using multiplication.",
    "code": "```kotlin\nfun totalMinutes(hours: Int): Int {\n    return hours * 60\n}\n\nfun main() {\n    val hours = 5\n    val minutes = totalMinutes(hours)\n    println(\"Total minutes in $hours hours is $minutes.\")\n}\n```"
  },
  {
    "task": "Design a function that determines the number of dozens of eggs from a given total number of eggs.",
    "code": "```kotlin\nfun calculateDozens(totalEggs: Int): Int {\n    return totalEggs / 12\n}\n```"
  },
  {
    "task": "Write a script to find the greatest common divisor of two numbers using arithmetic operations.",
    "code": "```kotlin\nfun gcd(a: Int, b: Int): Int {\n    var num1 = a\n    var num2 = b\n    while (num2 != 0) {\n        val temp = num2\n        num2 = num1 % num2\n        num1 = temp\n    }\n    return num1\n}\n\nfun main() {\n    val number1 = 48\n    val number2 = 18\n    println(\"GCD of $number1 and $number2 is ${gcd(number1, number2)}\")\n}\n```"
  },
  {
    "task": "Develop a program that calculates the total weight of multiple items using addition.",
    "code": "```kotlin\nfun calculateTotalWeight(weights: List<Double>): Double {\n    return weights.sum()\n}\n\nfun main() {\n    val itemWeights = listOf(2.5, 3.0, 1.75, 4.0)\n    val totalWeight = calculateTotalWeight(itemWeights)\n    println(\"Total weight: $totalWeight\")\n}\n```"
  },
  {
    "task": "Implement a function to convert a temperature from Celsius to Fahrenheit using multiplication and addition.",
    "code": "```kotlin\nfun celsiusToFahrenheit(celsius: Double): Double {\n    return celsius * 9 / 5 + 32\n}\n```"
  },
  {
    "task": "Create a program that determines the age difference between two people given their birth years.",
    "code": "```kotlin\nfun main() {\n    val birthYearPerson1 = 1990\n    val birthYearPerson2 = 1985\n    \n    val ageDifference = kotlin.math.abs(birthYearPerson1 - birthYearPerson2)\n    \n    println(\"The age difference is $ageDifference years.\")\n}\n```"
  },
  {
    "task": "Write a function to calculate the final price after applying tax and discount using addition and subtraction.",
    "code": "```kotlin\nfun calculateFinalPrice(initialPrice: Double, taxRate: Double, discount: Double): Double {\n    val taxAmount = initialPrice * taxRate\n    val discountAmount = initialPrice * discount\n    val finalPrice = initialPrice + taxAmount - discountAmount\n    return finalPrice\n}\n```"
  },
  {
    "task": "Design a program to compute the net profit given total revenue and expenses.",
    "code": "```kotlin\nfun computeNetProfit(revenue: Double, expenses: Double): Double {\n    return revenue - expenses\n}\n\nfun main() {\n    val totalRevenue = 15000.0\n    val totalExpenses = 7000.0\n    \n    val netProfit = computeNetProfit(totalRevenue, totalExpenses)\n    println(\"Net Profit: $$netProfit\")\n}\n```"
  },
  {
    "task": "Develop a function to calculate the BMI given weight and height using division and multiplication.",
    "code": "```kotlin\nfun calculateBMI(weight: Double, height: Double): Double {\n    return weight / (height * height)\n}\n```"
  },
  {
    "task": "Create a function that calculates the midpoint between two numbers using addition and division.",
    "code": "```kotlin\nfun calculateMidpoint(a: Double, b: Double): Double {\n    return (a + b) / 2\n}\n```"
  },
  {
    "task": "Write a program that outputs the result of dividing a number by another with remainder.",
    "code": "```kotlin\nfun main() {\n    val dividend = 10\n    val divisor = 3\n    val quotient = dividend / divisor\n    val remainder = dividend % divisor\n    println(\"Quotient: $quotient, Remainder: $remainder\")\n}\n```"
  },
  {
    "task": "Implement a function to calculate the factorial of a number using multiplication.",
    "code": "```kotlin\nfun factorial(n: Int): Long {\n    if (n < 0) throw IllegalArgumentException(\"Negative numbers are not allowed.\")\n    var result = 1L\n    for (i in 2..n) {\n        result *= i\n    }\n    return result\n}\n```"
  },
  {
    "task": "Build a script to find the average of three numbers using addition and division.",
    "code": "```kotlin\nfun main() {\n    val num1 = 10.0\n    val num2 = 15.0\n    val num3 = 20.0\n\n    val sum = num1 + num2 + num3\n    val average = sum / 3\n\n    println(\"The average is: $average\")\n}\n```"
  },
  {
    "task": "Create a program that simulates a simple bank account using arithmetic operations for deposits and withdrawals.",
    "code": "```kotlin\nclass BankAccount(initialBalance: Double) {\n    private var balance: Double = initialBalance\n\n    fun deposit(amount: Double) {\n        if (amount > 0) {\n            balance += amount\n        }\n    }\n\n    fun withdraw(amount: Double) {\n        if (amount > 0 && amount <= balance) {\n            balance -= amount\n        }\n    }\n\n    fun getBalance(): Double {\n        return balance\n    }\n}\n\nfun main() {\n    val account = BankAccount(1000.0)\n    account.deposit(500.0)\n    account.withdraw(200.0)\n    println(\"Current balance: ${account.getBalance()}\")\n}\n```"
  },
  {
    "task": "Write a function that computes the cost per item given a total cost and quantity using division.",
    "code": "```kotlin\nfun computeCostPerItem(totalCost: Double, quantity: Int): Double {\n    return totalCost / quantity\n}\n```"
  },
  {
    "task": "Design a program that calculates the time required to travel a distance at a given speed.",
    "code": "```kotlin\nfun calculateTravelTime(distance: Double, speed: Double): Double {\n    return distance / speed\n}\n\nfun main() {\n    val distance = 150.0 // distance in kilometers\n    val speed = 60.0 // speed in kilometers per hour\n\n    val travelTime = calculateTravelTime(distance, speed)\n    println(\"Time required to travel $distance km at $speed km/h is $travelTime hours\")\n}\n```"
  },
  {
    "task": "Develop a function that returns the absolute difference between two numbers.",
    "code": "```kotlin\nfun absoluteDifference(a: Int, b: Int): Int {\n    return kotlin.math.abs(a - b)\n}\n```"
  },
  {
    "task": "Implement a program to compute the geometric mean of a set of numbers using multiplication and roots.",
    "code": "```kotlin\nimport kotlin.math.pow\n\nfun geometricMean(numbers: List<Double>): Double {\n    if (numbers.isEmpty()) return 0.0\n    val product = numbers.reduce { acc, num -> acc * num }\n    return product.pow(1.0 / numbers.size)\n}\n\nfun main() {\n    val numbers = listOf(1.0, 2.0, 3.0, 4.0)\n    val result = geometricMean(numbers)\n    println(\"Geometric Mean: $result\")\n}\n```"
  },
  {
    "task": "Write a function to calculate the total interest paid on a loan using arithmetic operations.",
    "code": "```kotlin\nfun calculateTotalInterest(principal: Double, annualRate: Double, years: Int): Double {\n    val interestRate = annualRate / 100\n    val totalInterest = principal * interestRate * years\n    return totalInterest\n}\n```"
  },
  {
    "task": "Create a program that calculates the sum of even numbers within a specified range.",
    "code": "```kotlin\nfun sumOfEvenNumbers(start: Int, end: Int): Int {\n    var sum = 0\n    for (i in start..end) {\n        if (i % 2 == 0) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfun main() {\n    val start = 1\n    val end = 10\n    println(\"Sum of even numbers between $start and $end: ${sumOfEvenNumbers(start, end)}\")\n}\n```"
  },
  {
    "task": "Design a script to determine the final balance in a savings account after regular deposits and withdrawals.",
    "code": "```kotlin\nfun main() {\n    val initialBalance = 1000.0\n    val deposits = listOf(200.0, 150.0, 300.0)\n    val withdrawals = listOf(100.0, 50.0, 75.0)\n\n    val totalDeposits = deposits.sum()\n    val totalWithdrawals = withdrawals.sum()\n\n    val finalBalance = initialBalance + totalDeposits - totalWithdrawals\n\n    println(\"Final Balance: $$finalBalance\")\n}\n```"
  },
  {
    "task": "Develop a function to compute the surface area of a cylinder given its radius and height.",
    "code": "```kotlin\nfun surfaceAreaOfCylinder(radius: Double, height: Double): Double {\n    val pi = Math.PI\n    return 2 * pi * radius * (radius + height)\n}\n```"
  },
  {
    "task": "Write a program that outputs the result of an arithmetic sequence given the first term and common difference.",
    "code": "```kotlin\nfun arithmeticSequence(firstTerm: Int, commonDifference: Int, numberOfTerms: Int) {\n    for (i in 0 until numberOfTerms) {\n        val term = firstTerm + i * commonDifference\n        println(term)\n    }\n}\n\nfun main() {\n    val firstTerm = 5\n    val commonDifference = 3\n    val numberOfTerms = 10\n\n    arithmeticSequence(firstTerm, commonDifference, numberOfTerms)\n}\n```"
  },
  {
    "task": "Implement a function that finds the average speed for a trip given total distance and time.",
    "code": "```kotlin\nfun calculateAverageSpeed(totalDistance: Double, totalTime: Double): Double {\n    return totalDistance / totalTime\n}\n```"
  },
  {
    "task": "Create a function to calculate the total cost of a road trip given fuel cost per mile and distance.",
    "code": "```kotlin\nfun calculateTotalCost(fuelCostPerMile: Double, distance: Double): Double {\n    return fuelCostPerMile * distance\n}\n```"
  },
  {
    "task": "Write a script that determines the number of tiles required to cover a floor area using arithmetic operations.",
    "code": "```kotlin\nfun main() {\n    val floorLength = 10.0 // Length of the floor in meters\n    val floorWidth = 15.0  // Width of the floor in meters\n    val tileLength = 0.5   // Length of a tile in meters\n    val tileWidth = 0.5    // Width of a tile in meters\n    \n    val floorArea = floorLength * floorWidth\n    val tileArea = tileLength * tileWidth\n    \n    val numberOfTiles = Math.ceil(floorArea / tileArea).toInt()\n    \n    println(\"Number of tiles required: $numberOfTiles\")\n}\n```"
  },
  {
    "task": "Develop a program to calculate the amount of paint needed to cover a wall given its area.",
    "code": "```kotlin\nfun calculatePaintNeeded(area: Double, coveragePerLiter: Double): Double {\n    return area / coveragePerLiter\n}\n\nfun main() {\n    val wallArea = 30.0 // Example area in square meters\n    val coveragePerLiter = 10.0 // Example coverage in square meters per liter\n\n    val paintNeeded = calculatePaintNeeded(wallArea, coveragePerLiter)\n    println(\"You need $paintNeeded liters of paint to cover the wall.\")\n}\n```"
  },
  {
    "task": "Build a function that calculates the price per unit weight given total price and weight.",
    "code": "```kotlin\nfun calculatePricePerUnitWeight(totalPrice: Double, totalWeight: Double): Double {\n    return totalPrice / totalWeight\n}\n```"
  },
  {
    "task": "Implement a program that computes the volume of a rectangular prism given its dimensions.",
    "code": "```kotlin\nfun main() {\n    val length = 5.0\n    val width = 3.0\n    val height = 2.0\n\n    val volume = length * width * height\n\n    println(\"The volume of the rectangular prism is: $volume\")\n}\n```"
  },
  {
    "task": "Write a function to find the percentage increase or decrease between two numbers.",
    "code": "```kotlin\nfun percentageChange(original: Double, new: Double): Double {\n    return ((new - original) / original) * 100\n}\n```"
  },
  {
    "task": "Create a program to determine the number of complete weeks within a specified number of days.",
    "code": "```kotlin\nfun main() {\n    val days = 45 // Example input\n    val completeWeeks = days / 7\n    println(\"Number of complete weeks: $completeWeeks\")\n}\n```"
  },
  {
    "task": "Design a function that calculates the break-even point for a business using cost and revenue data.",
    "code": "```kotlin\nfun calculateBreakEvenPoint(fixedCosts: Double, pricePerUnit: Double, variableCostPerUnit: Double): Double {\n    if (pricePerUnit <= variableCostPerUnit) {\n        throw IllegalArgumentException(\"Price per unit must be greater than variable cost per unit to reach break-even.\")\n    }\n    return fixedCosts / (pricePerUnit - variableCostPerUnit)\n}\n\nfun main() {\n    val fixedCosts = 10000.0\n    val pricePerUnit = 50.0\n    val variableCostPerUnit = 30.0\n    val breakEvenPoint = calculateBreakEvenPoint(fixedCosts, pricePerUnit, variableCostPerUnit)\n    println(\"Break-even point: $breakEvenPoint units\")\n}\n```"
  },
  {
    "task": "Develop a program that converts a total number of seconds into hours, minutes, and seconds.",
    "code": "```kotlin\nfun convertSeconds(totalSeconds: Int) {\n    val hours = totalSeconds / 3600\n    val minutes = (totalSeconds % 3600) / 60\n    val seconds = totalSeconds % 60\n    println(\"Hours: $hours, Minutes: $minutes, Seconds: $seconds\")\n}\n\nfun main() {\n    val totalSeconds = 3671\n    convertSeconds(totalSeconds)\n}\n```"
  },
  {
    "task": "Write a function that calculates the depreciation of an asset over time using arithmetic operations.",
    "code": "```kotlin\nfun calculateDepreciation(initialValue: Double, years: Int, rate: Double): Double {\n    val depreciation = initialValue * Math.pow(1 - rate / 100, years.toDouble())\n    return initialValue - depreciation\n}\n```"
  },
  {
    "task": "Create a program that computes the final exam grade needed to achieve a target course average.",
    "code": "```kotlin\nfun main() {\n    print(\"Enter your current average grade: \")\n    val currentAverage = readLine()!!.toDouble()\n\n    print(\"Enter the weight of the final exam (as a percentage): \")\n    val finalExamWeight = readLine()!!.toDouble()\n\n    print(\"Enter your target course average: \")\n    val targetAverage = readLine()!!.toDouble()\n\n    val finalExamGradeNeeded = (targetAverage - (currentAverage * (1 - finalExamWeight / 100))) / (finalExamWeight / 100)\n\n    println(\"You need to score $finalExamGradeNeeded on the final exam to achieve your target course average.\")\n}\n```"
  },
  {
    "task": "Implement a function to calculate the total cost of groceries given prices and quantities of items.",
    "code": "```kotlin\nfun calculateTotalCost(prices: List<Double>, quantities: List<Int>): Double {\n    return prices.zip(quantities).sumOf { (price, quantity) -> price * quantity }\n}\n```"
  },
  {
    "task": "Write a script that determines the number of years required to double an investment using a fixed interest rate.",
    "code": "```kotlin\nfun yearsToDoubleInvestment(principal: Double, interestRate: Double): Int {\n    var years = 0\n    var investment = principal\n    while (investment < principal * 2) {\n        investment += investment * interestRate\n        years++\n    }\n    return years\n}\n\nfun main() {\n    val principal = 1000.0\n    val interestRate = 0.05 // 5% interest rate\n    val years = yearsToDoubleInvestment(principal, interestRate)\n    println(\"Years required to double the investment: $years\")\n}\n```"
  },
  {
    "task": "Develop a function that computes the harmonic mean of a set of numbers using division and addition.",
    "code": "```kotlin\nfun harmonicMean(numbers: List<Double>): Double {\n    if (numbers.isEmpty()) return 0.0\n    val sumOfReciprocals = numbers.sumOf { 1.0 / it }\n    return numbers.size / sumOfReciprocals\n}\n```"
  },
  {
    "task": "Create a program to find the sum of the squares of numbers in a given range.",
    "code": "```kotlin\nfun sumOfSquares(start: Int, end: Int): Int {\n    var sum = 0\n    for (number in start..end) {\n        sum += number * number\n    }\n    return sum\n}\n\nfun main() {\n    val start = 1\n    val end = 5\n    println(\"Sum of squares from $start to $end is: ${sumOfSquares(start, end)}\")\n}\n```"
  },
  {
    "task": "Design a function that calculates the energy consumption of an appliance given power and usage time.",
    "code": "```kotlin\nfun calculateEnergyConsumption(power: Double, time: Double): Double {\n    return power * time\n}\n```"
  },
  {
    "task": "Write a program that simulates a simple stock portfolio using arithmetic operations for buying and selling.",
    "code": "```kotlin\nfun main() {\n    var cashBalance = 10000.0\n    var stockPrice = 50.0\n    var stocksOwned = 0\n\n    fun buyStocks(amount: Int) {\n        val cost = amount * stockPrice\n        if (cost <= cashBalance) {\n            stocksOwned += amount\n            cashBalance -= cost\n            println(\"Bought $amount stocks. Cash balance: $cashBalance, Stocks owned: $stocksOwned\")\n        } else {\n            println(\"Not enough cash to buy $amount stocks.\")\n        }\n    }\n\n    fun sellStocks(amount: Int) {\n        if (amount <= stocksOwned) {\n            stocksOwned -= amount\n            cashBalance += amount * stockPrice\n            println(\"Sold $amount stocks. Cash balance: $cashBalance, Stocks owned: $stocksOwned\")\n        } else {\n            println(\"Not enough stocks to sell $amount stocks.\")\n        }\n    }\n\n    // Simulate buying and selling\n    buyStocks(100)\n    sellStocks(50)\n    buyStocks(200)\n    sellStocks(300)\n}\n```"
  },
  {
    "task": "Implement a function to calculate the gravitational force between two masses using multiplication and division.",
    "code": "```kotlin\nfun calculateGravitationalForce(mass1: Double, mass2: Double, distance: Double): Double {\n    val gravitationalConstant = 6.67430e-11\n    return (gravitationalConstant * mass1 * mass2) / (distance * distance)\n}\n```"
  },
  {
    "task": "Create a function that determines the price per square foot of a piece of real estate.",
    "code": "```kotlin\nfun pricePerSquareFoot(price: Double, area: Double): Double {\n    return price / area\n}\n```"
  },
  {
    "task": "Write a script to compute the total interest earned on a savings account with monthly compounding.",
    "code": "```kotlin\nfun calculateTotalInterest(principal: Double, annualRate: Double, years: Int): Double {\n    val monthlyRate = annualRate / 12 / 100\n    val totalMonths = years * 12\n    val compoundInterest = principal * Math.pow((1 + monthlyRate), totalMonths.toDouble())\n    return compoundInterest - principal\n}\n\nfun main() {\n    val principal = 1000.0  // Example principal amount\n    val annualRate = 5.0    // Example annual interest rate in percentage\n    val years = 5           // Example number of years\n\n    val totalInterest = calculateTotalInterest(principal, annualRate, years)\n    println(\"Total interest earned: $$totalInterest\")\n}\n```"
  },
  {
    "task": "Develop a program that calculates the calories burned during exercise given MET value and duration.",
    "code": "```kotlin\nfun calculateCaloriesBurned(metValue: Double, durationInMinutes: Double, weightInKg: Double): Double {\n    val caloriesBurned = metValue * 3.5 * weightInKg * (durationInMinutes / 60.0) / 200.0\n    return caloriesBurned\n}\n\nfun main() {\n    val metValue = 8.0 // Example MET value for running\n    val durationInMinutes = 30.0 // Exercise duration in minutes\n    val weightInKg = 70.0 // Weight of the person in kilograms\n\n    val caloriesBurned = calculateCaloriesBurned(metValue, durationInMinutes, weightInKg)\n    println(\"Calories burned: $caloriesBurned\")\n}\n```"
  },
  {
    "task": "Build a function that converts a speed from miles per hour to kilometers per hour using multiplication.",
    "code": "```kotlin\nfun convertMphToKph(mph: Double): Double {\n    val conversionFactor = 1.60934\n    return mph * conversionFactor\n}\n```"
  },
  {
    "task": "Implement a program to find the number of days between two dates using arithmetic operations.",
    "code": "```kotlin\nimport java.time.LocalDate\nimport java.time.format.DateTimeFormatter\nimport kotlin.math.abs\n\nfun daysBetweenDates(date1: String, date2: String): Long {\n    val formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\")\n    val firstDate = LocalDate.parse(date1, formatter)\n    val secondDate = LocalDate.parse(date2, formatter)\n    return abs(firstDate.toEpochDay() - secondDate.toEpochDay())\n}\n\nfun main() {\n    val date1 = \"2023-10-01\"\n    val date2 = \"2023-10-15\"\n    println(\"Days between: ${daysBetweenDates(date1, date2)}\")\n}\n```"
  },
  {
    "task": "Write a function to calculate the area of a circle given its radius.",
    "code": "```kotlin\nfun calculateCircleArea(radius: Double): Double {\n    return Math.PI * radius * radius\n}\n```"
  },
  {
    "task": "Create a program that determines the total distance driven given trips with varying speeds and durations.",
    "code": "```kotlin\nfun main() {\n    val trips = listOf(\n        Pair(60, 1.5), // speed in km/h, duration in hours\n        Pair(80, 2.0),\n        Pair(70, 1.0)\n    )\n\n    val totalDistance = trips.sumOf { (speed, duration) -> speed * duration }\n\n    println(\"Total distance driven: $totalDistance km\")\n}\n```"
  },
  {
    "task": "Design a function to compute the final price of an item after applying multiple discounts sequentially.",
    "code": "```kotlin\nfun computeFinalPrice(initialPrice: Double, discounts: List<Double>): Double {\n    var finalPrice = initialPrice\n    for (discount in discounts) {\n        finalPrice -= finalPrice * discount\n    }\n    return finalPrice\n}\n```"
  },
  {
    "task": "Write a script that calculates the number of bricks needed to build a wall given wall dimensions and brick size.",
    "code": "```kotlin\nfun calculateBricksNeeded(wallWidth: Double, wallHeight: Double, brickWidth: Double, brickHeight: Double): Int {\n    val wallArea = wallWidth * wallHeight\n    val brickArea = brickWidth * brickHeight\n    return Math.ceil(wallArea / brickArea).toInt()\n}\n\nfun main() {\n    val wallWidth = 10.0\n    val wallHeight = 5.0\n    val brickWidth = 0.3\n    val brickHeight = 0.15\n\n    val bricksNeeded = calculateBricksNeeded(wallWidth, wallHeight, brickWidth, brickHeight)\n    println(\"Number of bricks needed: $bricksNeeded\")\n}\n```"
  },
  {
    "task": "Develop a program to determine the number of pizzas required for a party given the number of people and slices per pizza.",
    "code": "```kotlin\nfun calculatePizzasRequired(people: Int, slicesPerPerson: Int, slicesPerPizza: Int): Int {\n    val totalSlicesNeeded = people * slicesPerPerson\n    return if (totalSlicesNeeded % slicesPerPizza == 0) {\n        totalSlicesNeeded / slicesPerPizza\n    } else {\n        (totalSlicesNeeded / slicesPerPizza) + 1\n    }\n}\n\nfun main() {\n    val numberOfPeople = 10\n    val slicesPerPerson = 3\n    val slicesPerPizza = 8\n    val pizzasRequired = calculatePizzasRequired(numberOfPeople, slicesPerPerson, slicesPerPizza)\n    println(\"Number of pizzas required: $pizzasRequired\")\n}\n```"
  },
  {
    "task": "Implement a function that calculates the total cost of a meal including tax and tip.",
    "code": "```kotlin\nfun calculateTotalCost(mealCost: Double, taxRate: Double, tipRate: Double): Double {\n    val taxAmount = mealCost * taxRate\n    val tipAmount = mealCost * tipRate\n    return mealCost + taxAmount + tipAmount\n}\n```"
  },
  {
    "task": "Create a program to compute the average rainfall over a period using addition and division.",
    "code": "```kotlin\nfun main() {\n    val rainfallMeasurements = listOf(10.0, 20.0, 15.0, 25.0, 30.0)\n    val totalRainfall = rainfallMeasurements.sum()\n    val averageRainfall = totalRainfall / rainfallMeasurements.size\n    println(\"The average rainfall is $averageRainfall\")\n}\n```"
  },
  {
    "task": "Write a function that determines the number of batches needed to produce a specific quantity of a product.",
    "code": "```kotlin\nfun calculateBatchesNeeded(totalQuantity: Int, batchSize: Int): Int {\n    return if (batchSize > 0) (totalQuantity + batchSize - 1) / batchSize else 0\n}\n```"
  },
  {
    "task": "Design a program to calculate the total energy consumption of a household given individual appliance usage.",
    "code": "```kotlin\nfun main() {\n    val applianceUsages = mapOf(\n        \"Refrigerator\" to 150.0, // kWh\n        \"Washing Machine\" to 500.0, // kWh\n        \"Air Conditioner\" to 1200.0, // kWh\n        \"Television\" to 200.0, // kWh\n        \"Computer\" to 300.0 // kWh\n    )\n\n    val totalEnergyConsumption = applianceUsages.values.sum()\n\n    println(\"Total energy consumption: $totalEnergyConsumption kWh\")\n}\n```"
  },
  {
    "task": "Develop a function that computes the body surface area of a person using height and weight.",
    "code": "```kotlin\nfun calculateBodySurfaceArea(height: Double, weight: Double): Double {\n    return Math.sqrt((height * weight) / 3600.0)\n}\n```"
  },
  {
    "task": "Build a script to calculate the monthly payment on a mortgage using principal, interest rate, and term.",
    "code": "```kotlin\nfun calculateMonthlyPayment(principal: Double, annualInterestRate: Double, termInYears: Int): Double {\n    val monthlyInterestRate = annualInterestRate / 100 / 12\n    val numberOfPayments = termInYears * 12\n    return (principal * monthlyInterestRate) / (1 - Math.pow(1 + monthlyInterestRate, -numberOfPayments.toDouble()))\n}\n\nfun main() {\n    val principal = 250000.0\n    val annualInterestRate = 3.75\n    val termInYears = 30\n    val monthlyPayment = calculateMonthlyPayment(principal, annualInterestRate, termInYears)\n    println(\"Monthly Payment: $monthlyPayment\")\n}\n```"
  },
  {
    "task": "Implement a function to find the volume of a cone given its height and radius.",
    "code": "```kotlin\nfun coneVolume(height: Double, radius: Double): Double {\n    val pi = Math.PI\n    return (1.0 / 3.0) * pi * radius * radius * height\n}\n```"
  },
  {
    "task": "Write a program that estimates the cost of a trip using fuel efficiency and distance.",
    "code": "```kotlin\nfun main() {\n    val fuelEfficiency = 15.0 // kilometers per liter\n    val distance = 300.0 // kilometers\n    val fuelPricePerLiter = 1.2 // currency units per liter\n\n    val litersNeeded = distance / fuelEfficiency\n    val tripCost = litersNeeded * fuelPricePerLiter\n\n    println(\"Estimated cost of the trip: $tripCost\")\n}\n```"
  }
]