[
  {
    "task": "Filter out all even numbers from a list of integers.",
    "code": "```kotlin\nfun main() {\n    val numbers = listOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    val oddNumbers = numbers.filter { it % 2 != 0 }\n    println(oddNumbers)\n}\n```"
  },
  {
    "task": "Select all words from a list that start with the letter 'a'.",
    "code": "```kotlin\nfun main() {\n    val words = listOf(\"apple\", \"banana\", \"apricot\", \"cherry\", \"avocado\", \"berry\")\n    val wordsStartingWithA = words.filter { it.startsWith('a') }\n    println(wordsStartingWithA)\n}\n```"
  },
  {
    "task": "Find all positive numbers in a collection of integers.",
    "code": "```kotlin\nfun main() {\n    val numbers = listOf(-5, 10, -3, 7, 0, 2, -1)\n    val positiveNumbers = numbers.filter { it > 0 }\n    println(positiveNumbers)\n}\n```"
  },
  {
    "task": "Extract all employees who are older than 30 from an employee directory.",
    "code": "```kotlin\ndata class Employee(val name: String, val age: Int)\n\nfun filterEmployeesByAge(employees: List<Employee>, ageLimit: Int): List<Employee> {\n    return employees.filter { it.age > ageLimit }\n}\n\nfun main() {\n    val employees = listOf(\n        Employee(\"Alice\", 28),\n        Employee(\"Bob\", 34),\n        Employee(\"Charlie\", 30),\n        Employee(\"Diana\", 32)\n    )\n\n    val filteredEmployees = filterEmployeesByAge(employees, 30)\n    println(filteredEmployees)\n}\n```"
  },
  {
    "task": "List all cities with a population greater than one million from a dataset.",
    "code": "```kotlin\ndata class City(val name: String, val population: Int)\n\nfun main() {\n    val cities = listOf(\n        City(\"New York\", 8419000),\n        City(\"Los Angeles\", 3980000),\n        City(\"Chicago\", 2716000),\n        City(\"Houston\", 2328000),\n        City(\"Phoenix\", 1690000),\n        City(\"Philadelphia\", 1584000),\n        City(\"San Antonio\", 1547000),\n        City(\"San Diego\", 1424000),\n        City(\"Dallas\", 1340000),\n        City(\"San Jose\", 1035000),\n        City(\"Austin\", 995000),\n        City(\"Jacksonville\", 902000)\n    )\n\n    val largeCities = cities.filter { it.population > 1000000 }\n    largeCities.forEach { println(it.name) }\n}\n```"
  },
  {
    "task": "Filter out products that are out of stock from a product list.",
    "code": "```kotlin\ndata class Product(val name: String, val inStock: Boolean)\n\nfun filterInStockProducts(products: List<Product>): List<Product> {\n    return products.filter { it.inStock }\n}\n\nfun main() {\n    val products = listOf(\n        Product(\"Laptop\", true),\n        Product(\"Smartphone\", false),\n        Product(\"Tablet\", true)\n    )\n    \n    val inStockProducts = filterInStockProducts(products)\n    println(inStockProducts)\n}\n```"
  },
  {
    "task": "Select all students who have passed with a grade above 70 from a list of student scores.",
    "code": "```kotlin\ndata class Student(val name: String, val grade: Int)\n\nfun main() {\n    val students = listOf(\n        Student(\"Alice\", 85),\n        Student(\"Bob\", 67),\n        Student(\"Charlie\", 92),\n        Student(\"David\", 70),\n        Student(\"Eve\", 78)\n    )\n\n    val passedStudents = students.filter { it.grade > 70 }\n    println(passedStudents)\n}\n```"
  },
  {
    "task": "Identify all strings in an array that contain the substring 'cat'.",
    "code": "```kotlin\nfun main() {\n    val strings = arrayOf(\"caterpillar\", \"dog\", \"category\", \"apple\", \"concatenate\", \"bat\")\n    val filteredStrings = strings.filter { it.contains(\"cat\") }\n    println(filteredStrings)\n}\n```"
  },
  {
    "task": "Extract all transactions above $1000 from a financial record.",
    "code": "```kotlin\ndata class Transaction(val amount: Double, val description: String)\n\nfun extractHighValueTransactions(transactions: List<Transaction>): List<Transaction> {\n    return transactions.filter { it.amount > 1000 }\n}\n```"
  },
  {
    "task": "Filter out all non-prime numbers from a list of numbers.",
    "code": "```kotlin\nfun isPrime(num: Int): Boolean {\n    if (num <= 1) return false\n    for (i in 2..Math.sqrt(num.toDouble()).toInt()) {\n        if (num % i == 0) return false\n    }\n    return true\n}\n\nfun filterPrimes(numbers: List<Int>): List<Int> {\n    return numbers.filter { isPrime(it) }\n}\n\n// Example usage:\nval numbers = listOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\nval primes = filterPrimes(numbers)\nprintln(primes) // Output: [2, 3, 5, 7]\n```"
  },
  {
    "task": "Select all books with more than 300 pages from a library catalog.",
    "code": "```kotlin\ndata class Book(val title: String, val pages: Int)\n\nfun filterBooksByPageCount(catalog: List<Book>): List<Book> {\n    return catalog.filter { it.pages > 300 }\n}\n\n// Example usage\nfun main() {\n    val libraryCatalog = listOf(\n        Book(\"Book One\", 250),\n        Book(\"Book Two\", 350),\n        Book(\"Book Three\", 400)\n    )\n\n    val filteredBooks = filterBooksByPageCount(libraryCatalog)\n    println(filteredBooks)\n}\n```"
  },
  {
    "task": "Identify all users who have logged in within the past week from a user database.",
    "code": "```kotlin\nimport java.time.LocalDate\n\ndata class User(val id: Int, val lastLogin: LocalDate)\n\nfun filterRecentUsers(users: List<User>): List<User> {\n    val oneWeekAgo = LocalDate.now().minusWeeks(1)\n    return users.filter { it.lastLogin.isAfter(oneWeekAgo) }\n}\n\n// Example usage\nfun main() {\n    val users = listOf(\n        User(1, LocalDate.now().minusDays(3)),\n        User(2, LocalDate.now().minusDays(10)),\n        User(3, LocalDate.now().minusDays(1))\n    )\n    \n    val recentUsers = filterRecentUsers(users)\n    println(recentUsers)\n}\n```"
  },
  {
    "task": "Extract all URLs that contain 'https' from a list of web addresses.",
    "code": "```kotlin\nfun main() {\n    val webAddresses = listOf(\n        \"http://example.com\",\n        \"https://secure-site.com\",\n        \"ftp://fileserver.com\",\n        \"https://another-secure-site.com\",\n        \"http://insecure.com\"\n    )\n    \n    val httpsUrls = webAddresses.filter { it.startsWith(\"https://\") }\n    println(httpsUrls)\n}\n```"
  },
  {
    "task": "Find all movies released after the year 2000 from a movie database.",
    "code": "```kotlin\ndata class Movie(val title: String, val releaseYear: Int)\n\nfun findMoviesReleasedAfter2000(movies: List<Movie>): List<Movie> {\n    return movies.filter { it.releaseYear > 2000 }\n}\n\n// Example usage\nval movieDatabase = listOf(\n    Movie(\"The Matrix\", 1999),\n    Movie(\"Inception\", 2010),\n    Movie(\"Avatar\", 2009),\n    Movie(\"The Lord of the Rings: The Fellowship of the Ring\", 2001)\n)\n\nval filteredMovies = findMoviesReleasedAfter2000(movieDatabase)\nprintln(filteredMovies)\n```"
  },
  {
    "task": "Select all tasks with a priority level of 'high' from a task management system.",
    "code": "```kotlin\ndata class Task(val id: Int, val name: String, val priority: String)\n\nfun main() {\n    val tasks = listOf(\n        Task(1, \"Task 1\", \"low\"),\n        Task(2, \"Task 2\", \"high\"),\n        Task(3, \"Task 3\", \"medium\"),\n        Task(4, \"Task 4\", \"high\")\n    )\n\n    val highPriorityTasks = tasks.filter { it.priority == \"high\" }\n    println(highPriorityTasks)\n}\n```"
  },
  {
    "task": "Filter out all words longer than five characters from a text document.",
    "code": "```kotlin\nimport java.io.File\n\nfun main() {\n    val filePath = \"path/to/text/document.txt\"\n    val filteredWords = File(filePath)\n        .readLines()\n        .flatMap { it.split(\"\\\\s+\".toRegex()) }\n        .filter { it.length <= 5 }\n\n    println(filteredWords)\n}\n```"
  },
  {
    "task": "Extract all odd numbers from a sequence of integers.",
    "code": "```kotlin\nfun main() {\n    val numbers = sequenceOf(1, 2, 3, 4, 5, 6, 7, 8, 9)\n    val oddNumbers = numbers.filter { it % 2 != 0 }\n    println(oddNumbers.toList())\n}\n```"
  },
  {
    "task": "Select all files larger than 10MB from a list of files.",
    "code": "```kotlin\ndata class File(val name: String, val sizeInBytes: Long)\n\nfun filterLargeFiles(files: List<File>): List<File> {\n    return files.filter { it.sizeInBytes > 10 * 1024 * 1024 }\n}\n```"
  },
  {
    "task": "Identify all events occurring on weekends from an event schedule.",
    "code": "```kotlin\nimport java.time.LocalDate\nimport java.time.format.DateTimeFormatter\nimport java.time.DayOfWeek\n\ndata class Event(val name: String, val date: String)\n\nfun main() {\n    val events = listOf(\n        Event(\"Conference\", \"2023-10-14\"),\n        Event(\"Workshop\", \"2023-10-15\"),\n        Event(\"Meeting\", \"2023-10-16\"),\n        Event(\"Seminar\", \"2023-10-17\")\n    )\n\n    val dateFormatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\")\n\n    val weekendEvents = events.filter { event ->\n        val date = LocalDate.parse(event.date, dateFormatter)\n        date.dayOfWeek == DayOfWeek.SATURDAY || date.dayOfWeek == DayOfWeek.SUNDAY\n    }\n\n    weekendEvents.forEach { println(it) }\n}\n```"
  },
  {
    "task": "Find all emails from a specific domain in an email list.",
    "code": "```kotlin\nfun filterEmailsByDomain(emails: List<String>, domain: String): List<String> {\n    return emails.filter { it.endsWith(\"@$domain\") }\n}\n```"
  },
  {
    "task": "Filter out all people not living in a specific city from a contact list.",
    "code": "```kotlin\ndata class Person(val name: String, val city: String)\n\nfun filterPeopleByCity(contacts: List<Person>, city: String): List<Person> {\n    return contacts.filter { it.city == city }\n}\n```"
  },
  {
    "task": "Select all rectangles with an area greater than 50 from a list of rectangles.",
    "code": "```kotlin\ndata class Rectangle(val width: Int, val height: Int)\n\nfun main() {\n    val rectangles = listOf(\n        Rectangle(5, 10),\n        Rectangle(8, 8),\n        Rectangle(6, 9),\n        Rectangle(10, 5),\n        Rectangle(7, 6)\n    )\n\n    val largeRectangles = rectangles.filter { it.width * it.height > 50 }\n    println(largeRectangles)\n}\n```"
  },
  {
    "task": "Extract all elements that are not null from a collection.",
    "code": "```kotlin\nfun <T> filterNotNullElements(collection: Collection<T?>): List<T> {\n    return collection.filterNotNull()\n}\n```"
  },
  {
    "task": "Identify all registered voters over the age of 18 from a voter registration list.",
    "code": "```kotlin\ndata class Voter(val name: String, val age: Int, val isRegistered: Boolean)\n\nfun main() {\n    val voters = listOf(\n        Voter(\"Alice\", 22, true),\n        Voter(\"Bob\", 17, true),\n        Voter(\"Charlie\", 19, false),\n        Voter(\"David\", 20, true),\n        Voter(\"Eve\", 25, true)\n    )\n\n    val registeredVotersOver18 = voters.filter { it.isRegistered && it.age > 18 }\n    println(registeredVotersOver18)\n}\n```"
  },
  {
    "task": "Select all cars manufactured after 2015 from a vehicle registry.",
    "code": "```kotlin\ndata class Car(val make: String, val model: String, val year: Int)\n\nfun main() {\n    val vehicleRegistry = listOf(\n        Car(\"Toyota\", \"Camry\", 2014),\n        Car(\"Ford\", \"F-150\", 2018),\n        Car(\"Tesla\", \"Model S\", 2020),\n        Car(\"Honda\", \"Civic\", 2015)\n    )\n\n    val carsAfter2015 = vehicleRegistry.filter { it.year > 2015 }\n    println(carsAfter2015)\n}\n```"
  },
  {
    "task": "Filter out all negative numbers from a dataset of integers.",
    "code": "```kotlin\nval numbers = listOf(1, -2, 3, -4, 5)\nval positiveNumbers = numbers.filter { it >= 0 }\nprintln(positiveNumbers)\n```"
  },
  {
    "task": "Extract all characters from a string that are uppercase.",
    "code": "```kotlin\nfun extractUppercaseCharacters(input: String): String {\n    return input.filter { it.isUpperCase() }\n}\n```"
  },
  {
    "task": "Identify all projects with a deadline within the next month from a project database.",
    "code": "```kotlin\nimport java.time.LocalDate\n\ndata class Project(val name: String, val deadline: LocalDate)\n\nfun getProjectsDueNextMonth(projects: List<Project>): List<Project> {\n    val today = LocalDate.now()\n    val nextMonth = today.plusMonths(1)\n    return projects.filter { it.deadline.isAfter(today) && it.deadline.isBefore(nextMonth) }\n}\n```"
  },
  {
    "task": "Select all athletes with a score higher than 90 from a competition result list.",
    "code": "```kotlin\ndata class Athlete(val name: String, val score: Int)\n\nfun filterHighScoringAthletes(athletes: List<Athlete>): List<Athlete> {\n    return athletes.filter { it.score > 90 }\n}\n\n// Example usage\nfun main() {\n    val competitionResults = listOf(\n        Athlete(\"John\", 88),\n        Athlete(\"Alice\", 95),\n        Athlete(\"Bob\", 92),\n        Athlete(\"Jane\", 85)\n    )\n    \n    val highScorers = filterHighScoringAthletes(competitionResults)\n    println(highScorers)\n}\n```"
  },
  {
    "task": "Filter out all strings that do not contain vowels from a list of words.",
    "code": "```kotlin\nfun main() {\n    val words = listOf(\"sky\", \"apple\", \"fly\", \"orange\", \"try\", \"umbrella\")\n    val filteredWords = words.filter { it.contains(Regex(\"[aeiouAEIOU]\")) }\n    println(filteredWords)\n}\n```"
  },
  {
    "task": "Extract all dates that fall on a weekday from a calendar.",
    "code": "```kotlin\nimport java.time.DayOfWeek\nimport java.time.LocalDate\n\nfun main() {\n    val calendar = listOf(\n        LocalDate.of(2023, 10, 1), // Sunday\n        LocalDate.of(2023, 10, 2), // Monday\n        LocalDate.of(2023, 10, 3), // Tuesday\n        LocalDate.of(2023, 10, 4), // Wednesday\n        LocalDate.of(2023, 10, 5), // Thursday\n        LocalDate.of(2023, 10, 6), // Friday\n        LocalDate.of(2023, 10, 7)  // Saturday\n    )\n\n    val weekdays = calendar.filter { date ->\n        val dayOfWeek = date.dayOfWeek\n        dayOfWeek != DayOfWeek.SATURDAY && dayOfWeek != DayOfWeek.SUNDAY\n    }\n\n    println(weekdays)\n}\n```"
  },
  {
    "task": "Find all software versions that are stable releases from a list of software versions.",
    "code": "```kotlin\ndata class SoftwareVersion(val version: String, val isStable: Boolean)\n\nfun filterStableVersions(versions: List<SoftwareVersion>): List<SoftwareVersion> {\n    return versions.filter { it.isStable }\n}\n\nfun main() {\n    val versions = listOf(\n        SoftwareVersion(\"1.0.0\", true),\n        SoftwareVersion(\"1.1.0-beta\", false),\n        SoftwareVersion(\"1.2.0\", true),\n        SoftwareVersion(\"2.0.0-alpha\", false)\n    )\n    \n    val stableVersions = filterStableVersions(versions)\n    println(stableVersions)\n}\n```"
  },
  {
    "task": "Select all temperatures above freezing from a weather report.",
    "code": "```kotlin\nfun main() {\n    val temperatures = listOf(-5, 3, 0, 7, 12, -2, 15)\n    val aboveFreezing = temperatures.filter { it > 0 }\n    println(aboveFreezing)\n}\n```"
  },
  {
    "task": "Identify all countries with a GDP per capita above $40,000 from a country dataset.",
    "code": "```kotlin\ndata class Country(val name: String, val gdpPerCapita: Double)\n\nfun main() {\n    val countries = listOf(\n        Country(\"CountryA\", 45000.0),\n        Country(\"CountryB\", 39000.0),\n        Country(\"CountryC\", 50000.0),\n        Country(\"CountryD\", 42000.0)\n    )\n\n    val wealthyCountries = countries.filter { it.gdpPerCapita > 40000 }\n    println(wealthyCountries.map { it.name })\n}\n```"
  },
  {
    "task": "Filter out all names shorter than four letters from a roster.",
    "code": "```kotlin\nfun main() {\n    val roster = listOf(\"Ann\", \"John\", \"Mike\", \"Zoe\", \"Alex\")\n    val filteredRoster = roster.filter { it.length >= 4 }\n    println(filteredRoster)\n}\n```"
  },
  {
    "task": "Extract all numbers divisible by five from a sequence.",
    "code": "```kotlin\nfun main() {\n    val numbers = sequenceOf(1, 5, 10, 14, 25, 30)\n    val divisibleByFive = numbers.filter { it % 5 == 0 }\n    println(divisibleByFive.toList())\n}\n```"
  },
  {
    "task": "Select all movies with a rating above 4 stars from a film review site.",
    "code": "```kotlin\ndata class Movie(val name: String, val rating: Double)\n\nfun main() {\n    val movies = listOf(\n        Movie(\"Inception\", 4.5),\n        Movie(\"The Room\", 3.7),\n        Movie(\"The Godfather\", 4.9),\n        Movie(\"Titanic\", 4.3),\n        Movie(\"Twilight\", 3.2)\n    )\n\n    val highRatedMovies = movies.filter { it.rating > 4.0 }\n    println(highRatedMovies)\n}\n```"
  },
  {
    "task": "Find all jobs with a salary above $50,000 from a job listing.",
    "code": "```kotlin\ndata class Job(val title: String, val salary: Int)\n\nfun main() {\n    val jobs = listOf(\n        Job(\"Software Developer\", 60000),\n        Job(\"Graphic Designer\", 45000),\n        Job(\"Data Scientist\", 80000),\n        Job(\"Marketing Specialist\", 52000)\n    )\n\n    val highSalaryJobs = jobs.filter { it.salary > 50000 }\n    println(highSalaryJobs)\n}\n```"
  },
  {
    "task": "Filter out all entries without an email address from a contact form submission list.",
    "code": "```kotlin\ndata class ContactFormSubmission(val name: String, val email: String?)\n\nfun filterSubmissionsWithEmail(submissions: List<ContactFormSubmission>): List<ContactFormSubmission> {\n    return submissions.filter { it.email != null && it.email.isNotBlank() }\n}\n```"
  },
  {
    "task": "Identify all animals weighing more than 50kg from a zoo inventory.",
    "code": "```kotlin\ndata class Animal(val name: String, val weight: Double)\n\nfun main() {\n    val zooInventory = listOf(\n        Animal(\"Elephant\", 5000.0),\n        Animal(\"Lion\", 190.0),\n        Animal(\"Zebra\", 380.0),\n        Animal(\"Monkey\", 35.0),\n        Animal(\"Giraffe\", 800.0),\n        Animal(\"Panda\", 100.0)\n    )\n\n    val heavyAnimals = zooInventory.filter { it.weight > 50 }\n    \n    heavyAnimals.forEach { println(it.name) }\n}\n```"
  },
  {
    "task": "Select all songs with a duration longer than three minutes from a playlist.",
    "code": "```kotlin\ndata class Song(val title: String, val durationInMinutes: Int)\n\nfun filterLongSongs(playlist: List<Song>): List<Song> {\n    return playlist.filter { it.durationInMinutes > 3 }\n}\n```"
  },
  {
    "task": "Extract all accounts with a balance below zero from a bank statement.",
    "code": "```kotlin\ndata class Account(val id: String, val balance: Double)\n\nfun extractNegativeBalanceAccounts(accounts: List<Account>): List<Account> {\n    return accounts.filter { it.balance < 0 }\n}\n```"
  },
  {
    "task": "Filter out all non-alphabetic characters from a string of text.",
    "code": "```kotlin\nfun filterAlphabetic(input: String): String {\n    return input.filter { it.isLetter() }\n}\n```"
  },
  {
    "task": "Select all participants who scored above average in a competition.",
    "code": "```kotlin\ndata class Participant(val name: String, val score: Int)\n\nfun selectAboveAverageParticipants(participants: List<Participant>): List<Participant> {\n    val averageScore = participants.map { it.score }.average()\n    return participants.filter { it.score > averageScore }\n}\n\n// Example usage\nval participants = listOf(\n    Participant(\"Alice\", 82),\n    Participant(\"Bob\", 75),\n    Participant(\"Charlie\", 90),\n    Participant(\"David\", 68)\n)\n\nval aboveAverageParticipants = selectAboveAverageParticipants(participants)\nprintln(aboveAverageParticipants)\n```"
  },
  {
    "task": "Find all houses priced under $300,000 from a real estate database.",
    "code": "```kotlin\ndata class House(val price: Int)\n\nfun filterAffordableHouses(houses: List<House>): List<House> {\n    return houses.filter { it.price < 300000 }\n}\n\n// Example usage\nfun main() {\n    val houses = listOf(\n        House(250000),\n        House(320000),\n        House(275000),\n        House(310000)\n    )\n    val affordableHouses = filterAffordableHouses(houses)\n    println(affordableHouses)\n}\n```"
  },
  {
    "task": "Identify all plants that bloom in spring from a botanical catalog.",
    "code": "```kotlin\ndata class Plant(val name: String, val bloomsIn: List<String>)\n\nfun main() {\n    val catalog = listOf(\n        Plant(\"Rose\", listOf(\"Spring\", \"Summer\")),\n        Plant(\"Tulip\", listOf(\"Spring\")),\n        Plant(\"Sunflower\", listOf(\"Summer\")),\n        Plant(\"Chrysanthemum\", listOf(\"Fall\"))\n    )\n\n    val springBloomers = catalog.filter { \"Spring\" in it.bloomsIn }\n    println(springBloomers)\n}\n```"
  },
  {
    "task": "Extract all passwords that are longer than eight characters from a user database.",
    "code": "```kotlin\ndata class User(val username: String, val password: String)\n\nfun extractLongPasswords(users: List<User>): List<String> {\n    return users.map { it.password }.filter { it.length > 8 }\n}\n```"
  },
  {
    "task": "Filter out all projects that are not yet started from a project management tool.",
    "code": "```kotlin\ndata class Project(val name: String, val status: String)\n\nfun filterNotStartedProjects(projects: List<Project>): List<Project> {\n    return projects.filter { it.status == \"Not Started\" }\n}\n\n// Example usage\nval projects = listOf(\n    Project(\"Project A\", \"Not Started\"),\n    Project(\"Project B\", \"In Progress\"),\n    Project(\"Project C\", \"Not Started\"),\n    Project(\"Project D\", \"Completed\")\n)\n\nval notStartedProjects = filterNotStartedProjects(projects)\nprintln(notStartedProjects)\n```"
  },
  {
    "task": "Select all days with temperatures exceeding 25\u00b0C from a climate report.",
    "code": "```kotlin\ndata class Day(val date: String, val temperature: Double)\n\nfun filterHotDays(climateReport: List<Day>): List<Day> {\n    return climateReport.filter { it.temperature > 25.0 }\n}\n```"
  },
  {
    "task": "Find all recipes that are vegetarian from a cookbook.",
    "code": "```kotlin\ndata class Recipe(val name: String, val isVegetarian: Boolean)\n\nfun main() {\n    val cookbook = listOf(\n        Recipe(\"Spaghetti Bolognese\", false),\n        Recipe(\"Vegetable Stir Fry\", true),\n        Recipe(\"Chicken Curry\", false),\n        Recipe(\"Caprese Salad\", true)\n    )\n    \n    val vegetarianRecipes = cookbook.filter { it.isVegetarian }\n    \n    println(vegetarianRecipes)\n}\n```"
  },
  {
    "task": "Identify all articles that mention a specific keyword from a news feed.",
    "code": "```kotlin\ndata class Article(val title: String, val content: String)\n\nfun filterArticlesByKeyword(articles: List<Article>, keyword: String): List<Article> {\n    return articles.filter { it.content.contains(keyword, ignoreCase = true) }\n}\n\nfun main() {\n    val newsFeed = listOf(\n        Article(\"Tech News\", \"Today in technology...\"),\n        Article(\"Sports Update\", \"The recent game...\"),\n        Article(\"World News\", \"In global events today...\")\n    )\n    \n    val keyword = \"technology\"\n    val filteredArticles = filterArticlesByKeyword(newsFeed, keyword)\n    \n    filteredArticles.forEach { println(it.title) }\n}\n```"
  },
  {
    "task": "Extract all files with the '.jpg' extension from a directory.",
    "code": "```kotlin\nimport java.io.File\n\nfun extractJpgFiles(directory: String): List<File> {\n    return File(directory).listFiles()?.filter { it.extension == \"jpg\" } ?: emptyList()\n}\n```"
  },
  {
    "task": "Filter out all transactions that are not categorized from a financial statement.",
    "code": "```kotlin\ndata class Transaction(val amount: Double, val category: String?)\n\nfun filterUncategorizedTransactions(transactions: List<Transaction>): List<Transaction> {\n    return transactions.filter { it.category != null }\n}\n\n// Example usage:\n// val transactions = listOf(Transaction(100.0, \"Food\"), Transaction(50.0, null))\n// val categorizedTransactions = filterUncategorizedTransactions(transactions)\n```"
  },
  {
    "task": "Select all paintings created before 1900 from an art gallery collection.",
    "code": "```kotlin\ndata class Painting(val title: String, val year: Int)\n\nfun main() {\n    val gallery = listOf(\n        Painting(\"Starry Night\", 1889),\n        Painting(\"The Persistence of Memory\", 1931),\n        Painting(\"The Night Watch\", 1642),\n        Painting(\"Girl with a Pearl Earring\", 1665),\n        Painting(\"The Scream\", 1893)\n    )\n\n    val paintingsBefore1900 = gallery.filter { it.year < 1900 }\n    println(paintingsBefore1900)\n}\n```"
  },
  {
    "task": "Find all students with perfect attendance from a school record.",
    "code": "```kotlin\ndata class Student(val name: String, val attendance: Int)\n\nfun main() {\n    val students = listOf(\n        Student(\"Alice\", 100),\n        Student(\"Bob\", 95),\n        Student(\"Charlie\", 100),\n        Student(\"David\", 85)\n    )\n    \n    val perfectAttendanceStudents = students.filter { it.attendance == 100 }\n    \n    println(perfectAttendanceStudents)\n}\n```"
  },
  {
    "task": "Identify all messages sent by a specific user from a chat application.",
    "code": "```kotlin\ndata class Message(val user: String, val content: String)\n\nfun filterMessagesByUser(messages: List<Message>, specificUser: String): List<Message> {\n    return messages.filter { it.user == specificUser }\n}\n\n// Example usage\nval messages = listOf(\n    Message(\"user1\", \"Hello!\"),\n    Message(\"user2\", \"Hi there!\"),\n    Message(\"user1\", \"How are you?\"),\n    Message(\"user3\", \"Good morning!\"),\n    Message(\"user2\", \"What's up?\")\n)\n\nval user1Messages = filterMessagesByUser(messages, \"user1\")\nprintln(user1Messages)\n```"
  },
  {
    "task": "Extract all elements greater than 100 from an array of numbers.",
    "code": "```kotlin\nfun main() {\n    val numbers = arrayOf(50, 150, 200, 75, 125)\n    val filteredNumbers = numbers.filter { it > 100 }\n    println(filteredNumbers)\n}\n```"
  },
  {
    "task": "Filter out all words that do not end in 'ed' from a paragraph.",
    "code": "```kotlin\nfun filterWordsEndingWithEd(paragraph: String): List<String> {\n    return paragraph.split(\"\\\\s+\".toRegex())\n        .filter { it.endsWith(\"ed\") }\n}\n\nfun main() {\n    val paragraph = \"I walked to the store and noticed that the door was opened. It was locked earlier.\"\n    val filteredWords = filterWordsEndingWithEd(paragraph)\n    println(filteredWords)\n}\n```"
  },
  {
    "task": "Select all flights departing before noon from a flight schedule.",
    "code": "```kotlin\ndata class Flight(val departureTime: String)\n\nfun main() {\n    val flightSchedule = listOf(\n        Flight(\"08:30\"),\n        Flight(\"11:45\"),\n        Flight(\"12:15\"),\n        Flight(\"09:00\")\n    )\n\n    val morningFlights = flightSchedule.filter { flight ->\n        val (hour, _) = flight.departureTime.split(\":\").map { it.toInt() }\n        hour < 12\n    }\n\n    println(morningFlights)\n}\n```"
  },
  {
    "task": "Find all products priced above $20 from an online store inventory.",
    "code": "```kotlin\ndata class Product(val name: String, val price: Double)\n\nfun main() {\n    val inventory = listOf(\n        Product(\"Book\", 15.99),\n        Product(\"Headphones\", 49.99),\n        Product(\"Coffee Maker\", 89.99),\n        Product(\"Notebook\", 5.99),\n        Product(\"Pen\", 2.49),\n        Product(\"Smartphone\", 299.99)\n    )\n    \n    val expensiveProducts = inventory.filter { it.price > 20.0 }\n    \n    println(expensiveProducts)\n}\n```"
  },
  {
    "task": "Identify all sessions longer than one hour from a webinar series.",
    "code": "```kotlin\ndata class Session(val title: String, val durationInMinutes: Int)\n\nfun filterLongSessions(sessions: List<Session>): List<Session> {\n    return sessions.filter { it.durationInMinutes > 60 }\n}\n\nfun main() {\n    val sessions = listOf(\n        Session(\"Introduction to Kotlin\", 45),\n        Session(\"Advanced Kotlin Features\", 90),\n        Session(\"Kotlin Coroutines\", 120),\n        Session(\"Kotlin for Android\", 60)\n    )\n\n    val longSessions = filterLongSessions(sessions)\n    longSessions.forEach { println(it.title) }\n}\n```"
  },
  {
    "task": "Extract all images with a resolution higher than 1080p from a photo library.",
    "code": "```kotlin\ndata class Image(val width: Int, val height: Int, val path: String)\n\nfun filterHighResolutionImages(images: List<Image>): List<Image> {\n    return images.filter { it.width > 1920 && it.height > 1080 }\n}\n\nfun main() {\n    val photoLibrary = listOf(\n        Image(1920, 1080, \"image1.jpg\"),\n        Image(3840, 2160, \"image2.jpg\"),\n        Image(2560, 1440, \"image3.jpg\"),\n        Image(1280, 720, \"image4.jpg\")\n    )\n\n    val highResolutionImages = filterHighResolutionImages(photoLibrary)\n    highResolutionImages.forEach { println(it.path) }\n}\n```"
  },
  {
    "task": "Filter out all responses that are not 'yes' or 'no' from a survey result.",
    "code": "```kotlin\nval surveyResponses = listOf(\"yes\", \"no\", \"maybe\", \"yes\", \"no\", \"undecided\")\nval filteredResponses = surveyResponses.filter { it == \"yes\" || it == \"no\" }\nprintln(filteredResponses)\n```"
  },
  {
    "task": "Select all tweets with more than 100 likes from a Twitter feed.",
    "code": "```kotlin\ndata class Tweet(val content: String, val likes: Int)\n\nfun filterPopularTweets(tweets: List<Tweet>): List<Tweet> {\n    return tweets.filter { it.likes > 100 }\n}\n```"
  },
  {
    "task": "Find all links that are broken from a webpage.",
    "code": "```kotlin\nimport java.net.HttpURLConnection\nimport java.net.URL\n\nfun isBrokenLink(url: String): Boolean {\n    return try {\n        val connection = URL(url).openConnection() as HttpURLConnection\n        connection.requestMethod = \"HEAD\"\n        connection.connect()\n        val responseCode = connection.responseCode\n        responseCode >= 400\n    } catch (e: Exception) {\n        true\n    }\n}\n\nfun findBrokenLinks(links: List<String>): List<String> {\n    return links.filter(::isBrokenLink)\n}\n```"
  },
  {
    "task": "Identify all machines that are currently offline from a network monitoring tool.",
    "code": "```kotlin\ndata class Machine(val id: String, val status: String)\n\nfun getOfflineMachines(machines: List<Machine>): List<Machine> {\n    return machines.filter { it.status == \"offline\" }\n}\n```"
  },
  {
    "task": "Extract all invoices with a due date in the current month from an accounting system.",
    "code": "```kotlin\nimport java.time.LocalDate\n\ndata class Invoice(val id: Int, val dueDate: LocalDate)\n\nfun extractCurrentMonthInvoices(invoices: List<Invoice>): List<Invoice> {\n    val now = LocalDate.now()\n    return invoices.filter { it.dueDate.year == now.year && it.dueDate.month == now.month }\n}\n```"
  },
  {
    "task": "Filter out all lines in a file that start with a '#' from a configuration file.",
    "code": "```kotlin\nimport java.io.File\n\nfun main() {\n    val file = File(\"config.txt\")\n    val filteredLines = file.readLines().filterNot { it.startsWith(\"#\") }\n    filteredLines.forEach { println(it) }\n}\n```"
  },
  {
    "task": "Select all posts with a comment count higher than 50 from a blog.",
    "code": "```kotlin\ndata class Post(val title: String, val commentCount: Int)\n\nfun main() {\n    val posts = listOf(\n        Post(\"Post 1\", 45),\n        Post(\"Post 2\", 60),\n        Post(\"Post 3\", 30),\n        Post(\"Post 4\", 75)\n    )\n\n    val filteredPosts = posts.filter { it.commentCount > 50 }\n\n    println(filteredPosts)\n}\n```"
  },
  {
    "task": "Find all offers that expire within the next week from a promotional database.",
    "code": "```kotlin\nimport java.time.LocalDate\nimport java.time.temporal.ChronoUnit\n\ndata class Offer(val name: String, val expiryDate: LocalDate)\n\nfun main() {\n    val offers = listOf(\n        Offer(\"Offer1\", LocalDate.of(2023, 10, 27)),\n        Offer(\"Offer2\", LocalDate.of(2023, 11, 3)),\n        Offer(\"Offer3\", LocalDate.of(2023, 11, 10))\n    )\n    \n    val nextWeek = LocalDate.now().plus(1, ChronoUnit.WEEKS)\n    val expiringOffers = offers.filter { it.expiryDate.isBefore(nextWeek) }\n    println(expiringOffers)\n}\n```"
  },
  {
    "task": "Identify all items that are on sale from a shopping catalog.",
    "code": "```kotlin\ndata class Item(val name: String, val isOnSale: Boolean)\n\nfun getSaleItems(catalog: List<Item>): List<Item> {\n    return catalog.filter { it.isOnSale }\n}\n\n// Example usage\nfun main() {\n    val catalog = listOf(\n        Item(\"Laptop\", false),\n        Item(\"Smartphone\", true),\n        Item(\"Tablet\", true),\n        Item(\"Headphones\", false)\n    )\n\n    val saleItems = getSaleItems(catalog)\n    println(saleItems)\n}\n```"
  },
  {
    "task": "Extract all notes that mention 'urgent' from a meeting record.",
    "code": "```kotlin\nfun extractUrgentNotes(meetingRecord: List<String>): List<String> {\n    return meetingRecord.filter { \"urgent\" in it.lowercase() }\n}\n\n// Example usage\nfun main() {\n    val meetingRecord = listOf(\n        \"Discuss project timeline\",\n        \"urgent: finalize budget\",\n        \"Review team performance\",\n        \"urgent: prepare presentation\"\n    )\n\n    val urgentNotes = extractUrgentNotes(meetingRecord)\n    println(urgentNotes)\n}\n```"
  },
  {
    "task": "Filter out all numbers that do not have a remainder when divided by two from a list.",
    "code": "```kotlin\nfun main() {\n    val numbers = listOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    val filtered = numbers.filter { it % 2 != 0 }\n    println(filtered)\n}\n```"
  },
  {
    "task": "Select all concerts happening in the summer from an event calendar.",
    "code": "```kotlin\ndata class Event(val name: String, val date: String)\n\nfun main() {\n    val events = listOf(\n        Event(\"Concert 1\", \"2023-06-15\"),\n        Event(\"Concert 2\", \"2023-07-20\"),\n        Event(\"Concert 3\", \"2023-12-05\"),\n        Event(\"Concert 4\", \"2023-08-10\")\n    )\n\n    val summerConcerts = events.filter { event ->\n        val month = event.date.substring(5, 7).toInt()\n        month in 6..8\n    }\n\n    println(summerConcerts)\n}\n```"
  },
  {
    "task": "Find all users with more than 1000 followers from a social media platform.",
    "code": "```kotlin\ndata class User(val username: String, val followers: Int)\n\nfun filterUsersWithMoreThanThousandFollowers(users: List<User>): List<User> {\n    return users.filter { it.followers > 1000 }\n}\n\n// Example usage:\nval users = listOf(\n    User(\"user1\", 500),\n    User(\"user2\", 1500),\n    User(\"user3\", 2000)\n)\n\nval result = filterUsersWithMoreThanThousandFollowers(users)\nprintln(result)\n```"
  },
  {
    "task": "Identify all stocks with a growth rate above 10% from a financial portfolio.",
    "code": "```kotlin\ndata class Stock(val name: String, val growthRate: Double)\n\nfun main() {\n    val portfolio = listOf(\n        Stock(\"AAPL\", 12.5),\n        Stock(\"GOOGL\", 8.7),\n        Stock(\"AMZN\", 15.3),\n        Stock(\"MSFT\", 9.9),\n        Stock(\"TSLA\", 11.2)\n    )\n\n    val highGrowthStocks = portfolio.filter { it.growthRate > 10.0 }\n    println(highGrowthStocks)\n}\n```"
  },
  {
    "task": "Extract all reviews that have a five-star rating from a product review site.",
    "code": "```kotlin\ndata class Review(val rating: Int, val content: String)\n\nfun main() {\n    val reviews = listOf(\n        Review(5, \"Excellent product!\"),\n        Review(4, \"Very good, but could be improved.\"),\n        Review(5, \"Perfect, highly recommend!\"),\n        Review(3, \"Average experience.\"),\n        Review(2, \"Not satisfied with the product.\"),\n        Review(5, \"Absolutely love it!\")\n    )\n\n    val fiveStarReviews = reviews.filter { it.rating == 5 }\n    fiveStarReviews.forEach { println(it.content) }\n}\n```"
  },
  {
    "task": "Filter out all emails that are not flagged from an inbox.",
    "code": "```kotlin\ndata class Email(val subject: String, val isFlagged: Boolean)\n\nfun filterFlaggedEmails(inbox: List<Email>): List<Email> {\n    return inbox.filter { it.isFlagged }\n}\n\nfun main() {\n    val inbox = listOf(\n        Email(\"Meeting Schedule\", true),\n        Email(\"Weekly Report\", false),\n        Email(\"Follow-up\", true),\n        Email(\"Newsletter\", false)\n    )\n\n    val flaggedEmails = filterFlaggedEmails(inbox)\n    println(flaggedEmails)\n}\n```"
  },
  {
    "task": "Select all entries with a timestamp from the past 24 hours from a log file.",
    "code": "```kotlin\nimport java.time.LocalDateTime\nimport java.time.format.DateTimeFormatter\n\ndata class LogEntry(val timestamp: LocalDateTime, val message: String)\n\nfun main() {\n    val logEntries = listOf(\n        LogEntry(LocalDateTime.now().minusHours(10), \"Entry 1\"),\n        LogEntry(LocalDateTime.now().minusDays(1).minusMinutes(1), \"Entry 2\"),\n        LogEntry(LocalDateTime.now().minusHours(5), \"Entry 3\")\n    )\n\n    val now = LocalDateTime.now()\n    val past24HoursEntries = logEntries.filter { it.timestamp.isAfter(now.minusHours(24)) }\n\n    past24HoursEntries.forEach { println(\"${it.timestamp.format(DateTimeFormatter.ISO_DATE_TIME)}: ${it.message}\") }\n}\n```"
  },
  {
    "task": "Find all books by a specific author from a library database.",
    "code": "```kotlin\ndata class Book(val title: String, val author: String)\n\nfun findBooksByAuthor(library: List<Book>, author: String): List<Book> {\n    return library.filter { it.author == author }\n}\n```"
  },
  {
    "task": "Identify all donations above $500 from a charity fundraiser report.",
    "code": "```kotlin\nfun main() {\n    val donations = listOf(150, 600, 350, 750, 200, 800)\n    val highDonations = donations.filter { it > 500 }\n    println(highDonations)\n}\n```"
  },
  {
    "task": "Extract all assignments due in the next week from a course syllabus.",
    "code": "```kotlin\nimport java.time.LocalDate\n\ndata class Assignment(val title: String, val dueDate: LocalDate)\n\nfun filterAssignmentsDueNextWeek(syllabus: List<Assignment>): List<Assignment> {\n    val today = LocalDate.now()\n    val nextWeek = today.plusWeeks(1)\n    return syllabus.filter { it.dueDate.isAfter(today) && it.dueDate.isBefore(nextWeek) }\n}\n```"
  },
  {
    "task": "Filter out all movies that are not in English from a streaming service.",
    "code": "```kotlin\ndata class Movie(val title: String, val language: String)\n\nfun filterEnglishMovies(movies: List<Movie>): List<Movie> {\n    return movies.filter { it.language.equals(\"English\", ignoreCase = true) }\n}\n\nfun main() {\n    val movies = listOf(\n        Movie(\"Inception\", \"English\"),\n        Movie(\"Am\u00e9lie\", \"French\"),\n        Movie(\"Parasite\", \"Korean\"),\n        Movie(\"The Dark Knight\", \"English\")\n    )\n\n    val englishMovies = filterEnglishMovies(movies)\n    englishMovies.forEach { println(it.title) }\n}\n```"
  },
  {
    "task": "Select all landmarks located in Europe from a travel guide.",
    "code": "```kotlin\ndata class Landmark(val name: String, val location: String)\n\nfun main() {\n    val landmarks = listOf(\n        Landmark(\"Eiffel Tower\", \"Europe\"),\n        Landmark(\"Statue of Liberty\", \"North America\"),\n        Landmark(\"Colosseum\", \"Europe\"),\n        Landmark(\"Great Wall of China\", \"Asia\")\n    )\n\n    val europeanLandmarks = landmarks.filter { it.location == \"Europe\" }\n\n    println(europeanLandmarks)\n}\n```"
  },
  {
    "task": "Find all contracts that are set to renew next month from a contract management system.",
    "code": "```kotlin\nimport java.time.LocalDate\n\ndata class Contract(val renewalDate: LocalDate)\n\nfun findContractsToRenewNextMonth(contracts: List<Contract>): List<Contract> {\n    val nextMonth = LocalDate.now().plusMonths(1).month\n    return contracts.filter { it.renewalDate.month == nextMonth }\n}\n\n// Example usage\nval contracts = listOf(\n    Contract(LocalDate.of(2023, 11, 15)),\n    Contract(LocalDate.of(2023, 10, 20)),\n    Contract(LocalDate.of(2023, 12, 1))\n)\n\nval contractsToRenew = findContractsToRenewNextMonth(contracts)\nprintln(contractsToRenew)\n```"
  },
  {
    "task": "Identify all volunteer hours logged in the past year from a non-profit organization database.",
    "code": "```kotlin\nimport java.time.LocalDate\n\ndata class VolunteerHour(val date: LocalDate, val hours: Int)\n\nfun filterPastYearVolunteerHours(volunteerHours: List<VolunteerHour>): List<VolunteerHour> {\n    val oneYearAgo = LocalDate.now().minusYears(1)\n    return volunteerHours.filter { it.date.isAfter(oneYearAgo) }\n}\n```"
  },
  {
    "task": "Extract all elements that are not strings from a mixed-type list.",
    "code": "```kotlin\nfun main() {\n    val mixedList = listOf(1, \"apple\", 2.5, \"banana\", 3, true)\n    val nonStringElements = mixedList.filter { it !is String }\n    println(nonStringElements)\n}\n```"
  },
  {
    "task": "Filter out all orders that are not yet shipped from an e-commerce system.",
    "code": "```kotlin\ndata class Order(val id: Int, val status: String)\n\nfun filterShippedOrders(orders: List<Order>): List<Order> {\n    return orders.filter { it.status == \"shipped\" }\n}\n\nfun main() {\n    val orders = listOf(\n        Order(1, \"shipped\"),\n        Order(2, \"pending\"),\n        Order(3, \"shipped\"),\n        Order(4, \"processing\")\n    )\n    \n    val shippedOrders = filterShippedOrders(orders)\n    println(shippedOrders)\n}\n```"
  },
  {
    "task": "Select all emails sent from a specific address in an email server.",
    "code": "```kotlin\ndata class Email(val from: String, val subject: String, val body: String)\n\nfun filterEmailsBySender(emails: List<Email>, senderAddress: String): List<Email> {\n    return emails.filter { it.from == senderAddress }\n}\n\n// Example usage\nfun main() {\n    val emails = listOf(\n        Email(\"example1@example.com\", \"Subject 1\", \"Body 1\"),\n        Email(\"specific@example.com\", \"Subject 2\", \"Body 2\"),\n        Email(\"example2@example.com\", \"Subject 3\", \"Body 3\"),\n        Email(\"specific@example.com\", \"Subject 4\", \"Body 4\")\n    )\n    \n    val filteredEmails = filterEmailsBySender(emails, \"specific@example.com\")\n    println(filteredEmails)\n}\n```"
  },
  {
    "task": "Find all passwords with at least one special character from a security database.",
    "code": "```kotlin\nfun main() {\n    val passwords = listOf(\"password123\", \"hello@world\", \"secure#2023\", \"admin\", \"pass!word\")\n    val specialCharRegex = Regex(\"[^a-zA-Z0-9]\")\n\n    val filteredPasswords = passwords.filter { it.contains(specialCharRegex) }\n\n    println(filteredPasswords)\n}\n```"
  },
  {
    "task": "Identify all courses with a prerequisite from a university catalog.",
    "code": "```kotlin\ndata class Course(val name: String, val prerequisite: String?)\n\nfun main() {\n    val courses = listOf(\n        Course(\"Math 101\", null),\n        Course(\"Physics 101\", \"Math 101\"),\n        Course(\"Chemistry 101\", \"Physics 101\"),\n        Course(\"Biology 101\", null)\n    )\n\n    val coursesWithPrerequisite = courses.filter { it.prerequisite != null }\n    println(coursesWithPrerequisite)\n}\n```"
  },
  {
    "task": "Extract all genes associated with a specific trait from a genetic database.",
    "code": "```kotlin\ndata class Gene(val name: String, val traits: List<String>)\n\nfun filterGenesByTrait(genes: List<Gene>, specificTrait: String): List<Gene> {\n    return genes.filter { gene -> specificTrait in gene.traits }\n}\n\n// Example usage\nfun main() {\n    val genes = listOf(\n        Gene(\"GeneA\", listOf(\"Trait1\", \"Trait2\")),\n        Gene(\"GeneB\", listOf(\"Trait3\")),\n        Gene(\"GeneC\", listOf(\"Trait1\", \"Trait3\"))\n    )\n    \n    val specificTrait = \"Trait1\"\n    val filteredGenes = filterGenesByTrait(genes, specificTrait)\n    println(filteredGenes)\n}\n```"
  },
  {
    "task": "Filter out all investments with a risk level below medium from a portfolio.",
    "code": "```kotlin\ndata class Investment(val name: String, val riskLevel: String)\n\nfun filterInvestments(portfolio: List<Investment>): List<Investment> {\n    return portfolio.filter { it.riskLevel == \"medium\" || it.riskLevel == \"high\" }\n}\n\nfun main() {\n    val portfolio = listOf(\n        Investment(\"InvestmentA\", \"low\"),\n        Investment(\"InvestmentB\", \"medium\"),\n        Investment(\"InvestmentC\", \"high\"),\n        Investment(\"InvestmentD\", \"low\")\n    )\n\n    val filteredInvestments = filterInvestments(portfolio)\n    println(filteredInvestments)\n}\n```"
  },
  {
    "task": "Select all calls longer than five minutes from a call log.",
    "code": "```kotlin\ndata class Call(val durationInMinutes: Int)\n\nfun filterLongCalls(callLog: List<Call>): List<Call> {\n    return callLog.filter { it.durationInMinutes > 5 }\n}\n```"
  }
]