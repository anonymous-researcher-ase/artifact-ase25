[
  {
    "task": "Create a function that calculates the sum of two numbers and returns the result.",
    "code": "```kotlin\nfun sum(a: Int, b: Int): Int {\n    return a + b\n}\n```"
  },
  {
    "task": "Design a function that takes a string and returns its length.",
    "code": "```kotlin\nfun getStringLength(input: String): Int {\n    return input.length\n}\n```"
  },
  {
    "task": "Write a function that checks if a number is prime and returns a boolean value.",
    "code": "```kotlin\nfun isPrime(number: Int): Boolean {\n    if (number <= 1) return false\n    if (number == 2) return true\n    if (number % 2 == 0) return false\n    for (i in 3..Math.sqrt(number.toDouble()).toInt() step 2) {\n        if (number % i == 0) return false\n    }\n    return true\n}\n```"
  },
  {
    "task": "Implement a function that returns the highest value in a list of integers.",
    "code": "```kotlin\nfun findMaxValue(numbers: List<Int>): Int {\n    return numbers.maxOrNull() ?: throw IllegalArgumentException(\"List is empty\")\n}\n```"
  },
  {
    "task": "Create a function that accepts a list of words and returns the longest word.",
    "code": "```kotlin\nfun longestWord(words: List<String>): String? {\n    return words.maxByOrNull { it.length }\n}\n```"
  },
  {
    "task": "Write a function that takes a temperature in Celsius and returns the equivalent in Fahrenheit.",
    "code": "```kotlin\nfun celsiusToFahrenheit(celsius: Double): Double {\n    return celsius * 9 / 5 + 32\n}\n```"
  },
  {
    "task": "Develop a function that returns the factorial of a given number.",
    "code": "```kotlin\nfun factorial(n: Int): Long {\n    return if (n == 0) 1 else n * factorial(n - 1)\n}\n```"
  },
  {
    "task": "Implement a function that receives a date and returns the day of the week.",
    "code": "```kotlin\nimport java.time.LocalDate\nimport java.time.format.DateTimeFormatter\nimport java.time.DayOfWeek\n\nfun getDayOfWeek(date: String): String {\n    val formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\")\n    val localDate = LocalDate.parse(date, formatter)\n    val dayOfWeek: DayOfWeek = localDate.dayOfWeek\n    return dayOfWeek.name\n}\n```"
  },
  {
    "task": "Write a function that calculates the area of a circle given its radius and returns the value.",
    "code": "```kotlin\nfun calculateCircleArea(radius: Double): Double {\n    return Math.PI * radius * radius\n}\n```"
  },
  {
    "task": "Create a function that converts a string to uppercase and returns the modified string.",
    "code": "```kotlin\nfun toUpperCase(input: String): String {\n    return input.uppercase()\n}\n```"
  },
  {
    "task": "Design a function that returns the reverse of a given list.",
    "code": "```kotlin\nfun reverseList(inputList: List<Any>): List<Any> {\n    return inputList.reversed()\n}\n```"
  },
  {
    "task": "Implement a function that accepts a string and returns a dictionary with character frequencies.",
    "code": "```kotlin\nfun characterFrequencies(input: String): Map<Char, Int> {\n    val frequencyMap = mutableMapOf<Char, Int>()\n    for (char in input) {\n        frequencyMap[char] = frequencyMap.getOrDefault(char, 0) + 1\n    }\n    return frequencyMap\n}\n```"
  },
  {
    "task": "Write a function that returns the first non-repeating character in a string.",
    "code": "```kotlin\nfun firstNonRepeatingCharacter(s: String): Char? {\n    val charFrequency = mutableMapOf<Char, Int>()\n    for (char in s) {\n        charFrequency[char] = charFrequency.getOrDefault(char, 0) + 1\n    }\n    for (char in s) {\n        if (charFrequency[char] == 1) {\n            return char\n        }\n    }\n    return null\n}\n```"
  },
  {
    "task": "Create a function that takes a list of numbers and returns a new list with only even numbers.",
    "code": "```kotlin\nfun filterEvenNumbers(numbers: List<Int>): List<Int> {\n    return numbers.filter { it % 2 == 0 }\n}\n```"
  },
  {
    "task": "Develop a function that receives a sentence and returns the word count.",
    "code": "```kotlin\nfun wordCount(sentence: String): Int {\n    return sentence.split(\"\\\\s+\".toRegex()).filter { it.isNotEmpty() }.size\n}\n```"
  },
  {
    "task": "Implement a function that returns the smallest element in an array.",
    "code": "```kotlin\nfun findSmallestElement(array: IntArray): Int? {\n    return array.minOrNull()\n}\n```"
  },
  {
    "task": "Write a function that takes two strings and returns true if they are anagrams.",
    "code": "```kotlin\nfun areAnagrams(str1: String, str2: String): Boolean {\n    return str1.toCharArray().sorted() == str2.toCharArray().sorted()\n}\n```"
  },
  {
    "task": "Create a function that accepts an integer and returns a list of its divisors.",
    "code": "```kotlin\nfun findDivisors(n: Int): List<Int> {\n    return (1..n).filter { n % it == 0 }\n}\n```"
  },
  {
    "task": "Design a function that returns the square root of a given number.",
    "code": "```kotlin\nfun squareRoot(number: Double): Double {\n    return kotlin.math.sqrt(number)\n}\n```"
  },
  {
    "task": "Implement a function that accepts a list and returns it sorted in ascending order.",
    "code": "```kotlin\nfun sortListAscending(list: List<Int>): List<Int> {\n    return list.sorted()\n}\n```"
  },
  {
    "task": "Write a function that checks whether a given year is a leap year and returns a boolean.",
    "code": "```kotlin\nfun isLeapYear(year: Int): Boolean {\n    return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)\n}\n```"
  },
  {
    "task": "Create a function that receives a list of numbers and returns their average.",
    "code": "```kotlin\nfun calculateAverage(numbers: List<Double>): Double {\n    return if (numbers.isNotEmpty()) {\n        numbers.sum() / numbers.size\n    } else {\n        0.0\n    }\n}\n```"
  },
  {
    "task": "Develop a function that returns the nth Fibonacci number.",
    "code": "```kotlin\nfun fibonacci(n: Int): Int {\n    if (n <= 1) return n\n    var a = 0\n    var b = 1\n    for (i in 2..n) {\n        val temp = a + b\n        a = b\n        b = temp\n    }\n    return b\n}\n```"
  },
  {
    "task": "Implement a function that accepts a string and returns it with vowels removed.",
    "code": "```kotlin\nfun removeVowels(input: String): String {\n    return input.filterNot { it in \"aeiouAEIOU\" }\n}\n```"
  },
  {
    "task": "Write a function that takes two dates and returns the number of days between them.",
    "code": "```kotlin\nimport java.time.LocalDate\nimport java.time.temporal.ChronoUnit\n\nfun daysBetween(startDate: LocalDate, endDate: LocalDate): Long {\n    return ChronoUnit.DAYS.between(startDate, endDate)\n}\n```"
  },
  {
    "task": "Create a function that returns the last element of a list.",
    "code": "```kotlin\nfun <T> getLastElement(list: List<T>): T? {\n    return list.lastOrNull()\n}\n```"
  },
  {
    "task": "Design a function that calculates the GCD of two numbers and returns it.",
    "code": "```kotlin\nfun gcd(a: Int, b: Int): Int {\n    if (b == 0) return a\n    return gcd(b, a % b)\n}\n```"
  },
  {
    "task": "Implement a function that takes a list and returns a tuple with the min and max values.",
    "code": "```kotlin\nfun findMinMax(values: List<Int>): Pair<Int, Int>? {\n    if (values.isEmpty()) return null\n    val min = values.minOrNull() ?: return null\n    val max = values.maxOrNull() ?: return null\n    return Pair(min, max)\n}\n```"
  },
  {
    "task": "Write a function that converts a binary string to its decimal representation and returns it.",
    "code": "```kotlin\nfun binaryToDecimal(binaryString: String): Int {\n    return binaryString.toInt(2)\n}\n```"
  },
  {
    "task": "Create a function that accepts a dictionary and returns a list of its keys.",
    "code": "```kotlin\nfun getKeys(map: Map<Any, Any>): List<Any> {\n    return map.keys.toList()\n}\n```"
  },
  {
    "task": "Develop a function that returns the concatenation of two strings.",
    "code": "```kotlin\nfun concatenateStrings(first: String, second: String): String {\n    return first + second\n}\n```"
  },
  {
    "task": "Implement a function that receives a list and returns a new list with duplicates removed.",
    "code": "```kotlin\nfun removeDuplicates(inputList: List<Int>): List<Int> {\n    return inputList.distinct()\n}\n```"
  },
  {
    "task": "Write a function that returns the intersection of two lists.",
    "code": "```kotlin\nfun intersection(list1: List<Int>, list2: List<Int>): List<Int> {\n    return list1.intersect(list2).toList()\n}\n```"
  },
  {
    "task": "Create a function that takes an integer and returns whether it is even or odd as a string.",
    "code": "```kotlin\nfun evenOrOdd(number: Int): String {\n    return if (number % 2 == 0) \"even\" else \"odd\"\n}\n```"
  },
  {
    "task": "Design a function that returns the number of vowels in a given string.",
    "code": "```kotlin\nfun countVowels(input: String): Int {\n    val vowels = \"aeiouAEIOU\"\n    return input.count { it in vowels }\n}\n```"
  },
  {
    "task": "Implement a function that counts the occurrences of a substring within a string and returns it.",
    "code": "```kotlin\nfun countOccurrences(mainString: String, subString: String): Int {\n    return mainString.windowed(subString.length).count { it == subString }\n}\n```"
  },
  {
    "task": "Write a function that accepts a list of numbers and returns them sorted in descending order.",
    "code": "```kotlin\nfun sortDescending(numbers: List<Int>): List<Int> {\n    return numbers.sortedDescending()\n}\n```"
  },
  {
    "task": "Create a function that returns the median of a list of numbers.",
    "code": "```kotlin\nfun findMedian(numbers: List<Double>): Double {\n    if (numbers.isEmpty()) throw IllegalArgumentException(\"List cannot be empty\")\n    \n    val sortedNumbers = numbers.sorted()\n    val size = sortedNumbers.size\n    return if (size % 2 == 0) {\n        (sortedNumbers[size / 2 - 1] + sortedNumbers[size / 2]) / 2\n    } else {\n        sortedNumbers[size / 2]\n    }\n}\n```"
  },
  {
    "task": "Develop a function that receives a sentence and returns it with words in reverse order.",
    "code": "```kotlin\nfun reverseWordsInSentence(sentence: String): String {\n    return sentence.split(\" \").reversed().joinToString(\" \")\n}\n```"
  },
  {
    "task": "Implement a function that returns the sum of all elements in a matrix.",
    "code": "```kotlin\nfun sumMatrix(matrix: Array<IntArray>): Int {\n    var sum = 0\n    for (row in matrix) {\n        for (element in row) {\n            sum += element\n        }\n    }\n    return sum\n}\n```"
  },
  {
    "task": "Write a function that accepts a string and returns true if it is a palindrome.",
    "code": "```kotlin\nfun isPalindrome(input: String): Boolean {\n    val sanitizedInput = input.replace(\"\\\\s\".toRegex(), \"\").lowercase()\n    return sanitizedInput == sanitizedInput.reversed()\n}\n```"
  },
  {
    "task": "Create a function that takes a number and returns its binary representation as a string.",
    "code": "```kotlin\nfun toBinaryString(number: Int): String {\n    return number.toString(2)\n}\n```"
  },
  {
    "task": "Design a function that returns the number of words in a paragraph.",
    "code": "```kotlin\nfun countWords(paragraph: String): Int {\n    return paragraph.split(\"\\\\s+\".toRegex()).filter { it.isNotEmpty() }.size\n}\n```"
  },
  {
    "task": "Implement a function that accepts a list and returns the index of its maximum element.",
    "code": "```kotlin\nfun indexOfMaxElement(list: List<Int>): Int? {\n    if (list.isEmpty()) return null\n    var maxIndex = 0\n    for (i in list.indices) {\n        if (list[i] > list[maxIndex]) {\n            maxIndex = i\n        }\n    }\n    return maxIndex\n}\n```"
  },
  {
    "task": "Write a function that takes a list of grades and returns the highest grade.",
    "code": "```kotlin\nfun highestGrade(grades: List<Int>): Int? {\n    return grades.maxOrNull()\n}\n```"
  },
  {
    "task": "Create a function that returns the product of all positive integers up to a given number.",
    "code": "```kotlin\nfun productOfIntegers(n: Int): Int {\n    if (n <= 0) return 0\n    var product = 1\n    for (i in 1..n) {\n        product *= i\n    }\n    return product\n}\n```"
  },
  {
    "task": "Develop a function that receives a string and returns a new string with spaces replaced by hyphens.",
    "code": "```kotlin\nfun replaceSpacesWithHyphens(input: String): String {\n    return input.replace(\" \", \"-\")\n}\n```"
  },
  {
    "task": "Implement a function that takes a list of integers and returns their sum.",
    "code": "```kotlin\nfun sumOfList(numbers: List<Int>): Int {\n    return numbers.sum()\n}\n```"
  },
  {
    "task": "Write a function that checks if a string is a valid email address and returns a boolean.",
    "code": "```kotlin\nfun isValidEmail(email: String): Boolean {\n    val emailRegex = \"^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+$\".toRegex()\n    return emailRegex.matches(email)\n}\n```"
  },
  {
    "task": "Create a function that returns the decimal equivalent of a hexadecimal string.",
    "code": "```kotlin\nfun hexToDecimal(hex: String): Int {\n    return hex.toInt(16)\n}\n```"
  },
  {
    "task": "Design a function that calculates and returns the body mass index based on height and weight.",
    "code": "```kotlin\nfun calculateBMI(weight: Double, height: Double): Double {\n    return weight / (height * height)\n}\n```"
  },
  {
    "task": "Implement a function that returns the initials of a person's name given a full name.",
    "code": "```kotlin\nfun getInitials(fullName: String): String {\n    return fullName.split(\" \").map { it.first().uppercase() }.joinToString(\"\")\n}\n```"
  },
  {
    "task": "Write a function that accepts a list of names and returns them sorted alphabetically.",
    "code": "```kotlin\nfun sortNames(names: List<String>): List<String> {\n    return names.sorted()\n}\n```"
  },
  {
    "task": "Create a function that takes a list of integers and returns a list of their squares.",
    "code": "```kotlin\nfun squareList(numbers: List<Int>): List<Int> {\n    return numbers.map { it * it }\n}\n```"
  },
  {
    "task": "Develop a function that returns the common elements between two sets.",
    "code": "```kotlin\nfun commonElements(set1: Set<Int>, set2: Set<Int>): Set<Int> {\n    return set1.intersect(set2)\n}\n```"
  },
  {
    "task": "Implement a function that receives a list of strings and returns the shortest string.",
    "code": "```kotlin\nfun findShortestString(strings: List<String>): String? {\n    return strings.minByOrNull { it.length }\n}\n```"
  },
  {
    "task": "Write a function that returns the sum of digits of a given integer.",
    "code": "```kotlin\nfun sumOfDigits(number: Int): Int {\n    return number.toString().map { it.toString().toInt() }.sum()\n}\n```"
  },
  {
    "task": "Create a function that takes a matrix and returns its transpose.",
    "code": "```kotlin\nfun transpose(matrix: Array<IntArray>): Array<IntArray> {\n    val rowCount = matrix.size\n    val colCount = if (rowCount > 0) matrix[0].size else 0\n    val transposedMatrix = Array(colCount) { IntArray(rowCount) }\n    for (i in matrix.indices) {\n        for (j in matrix[i].indices) {\n            transposedMatrix[j][i] = matrix[i][j]\n        }\n    }\n    return transposedMatrix\n}\n```"
  },
  {
    "task": "Design a function that returns the percentage of uppercase letters in a string.",
    "code": "```kotlin\nfun percentageOfUppercase(input: String): Double {\n    if (input.isEmpty()) return 0.0\n    val uppercaseCount = input.count { it.isUpperCase() }\n    return (uppercaseCount.toDouble() / input.length) * 100\n}\n```"
  },
  {
    "task": "Implement a function that accepts a string and returns it with each word capitalized.",
    "code": "```kotlin\nfun capitalizeWords(input: String): String {\n    return input.split(\" \").joinToString(\" \") { it.capitalize() }\n}\n```"
  },
  {
    "task": "Write a function that takes a list and returns the difference between the max and min values.",
    "code": "```kotlin\nfun maxMinDifference(numbers: List<Int>): Int {\n    return if (numbers.isNotEmpty()) {\n        numbers.maxOrNull()!! - numbers.minOrNull()!!\n    } else {\n        0\n    }\n}\n```"
  },
  {
    "task": "Create a function that returns a list containing the first n prime numbers.",
    "code": "```kotlin\nfun isPrime(num: Int): Boolean {\n    if (num <= 1) return false\n    if (num <= 3) return true\n    if (num % 2 == 0 || num % 3 == 0) return false\n    var i = 5\n    while (i * i <= num) {\n        if (num % i == 0 || num % (i + 2) == 0) return false\n        i += 6\n    }\n    return true\n}\n\nfun firstNPrimes(n: Int): List<Int> {\n    val primes = mutableListOf<Int>()\n    var num = 2\n    while (primes.size < n) {\n        if (isPrime(num)) {\n            primes.add(num)\n        }\n        num++\n    }\n    return primes\n}\n```"
  },
  {
    "task": "Develop a function that receives a dictionary and returns a new dictionary with keys and values swapped.",
    "code": "```kotlin\nfun swapKeysAndValues(original: Map<String, String>): Map<String, String> {\n    return original.entries.associate { (key, value) -> value to key }\n}\n```"
  },
  {
    "task": "Implement a function that accepts a string and returns the frequency of each word.",
    "code": "```kotlin\nfun wordFrequency(text: String): Map<String, Int> {\n    return text.split(\"\\\\s+\".toRegex())\n        .filter { it.isNotEmpty() }\n        .groupingBy { it }\n        .eachCount()\n}\n```"
  },
  {
    "task": "Write a function that takes two numbers and returns their greatest common divisor.",
    "code": "```kotlin\nfun greatestCommonDivisor(a: Int, b: Int): Int {\n    return if (b == 0) a else greatestCommonDivisor(b, a % b)\n}\n```"
  },
  {
    "task": "Create a function that returns the number of consonants in a given string.",
    "code": "```kotlin\nfun countConsonants(input: String): Int {\n    return input.count { it.isLetter() && !it.lowercaseChar().let { c -> c in \"aeiou\" } }\n}\n```"
  },
  {
    "task": "Design a function that checks if a number is a perfect square and returns a boolean.",
    "code": "```kotlin\nfun isPerfectSquare(number: Int): Boolean {\n    if (number < 0) return false\n    val sqrt = Math.sqrt(number.toDouble()).toInt()\n    return sqrt * sqrt == number\n}\n```"
  },
  {
    "task": "Implement a function that takes a list of numbers and returns the mode.",
    "code": "```kotlin\nfun findMode(numbers: List<Int>): Int? {\n    return numbers.groupingBy { it }.eachCount().maxByOrNull { it.value }?.key\n}\n```"
  },
  {
    "task": "Write a function that accepts a string and returns a new string with characters in reverse order.",
    "code": "```kotlin\nfun reverseString(input: String): String {\n    return input.reversed()\n}\n```"
  },
  {
    "task": "Create a function that returns the sum of all even numbers in a list.",
    "code": "```kotlin\nfun sumOfEvenNumbers(numbers: List<Int>): Int {\n    return numbers.filter { it % 2 == 0 }.sum()\n}\n```"
  },
  {
    "task": "Develop a function that receives two lists and returns their union.",
    "code": "```kotlin\nfun unionOfLists(list1: List<Int>, list2: List<Int>): List<Int> {\n    return (list1 + list2).distinct()\n}\n```"
  },
  {
    "task": "Implement a function that takes a string and returns the number of unique characters.",
    "code": "```kotlin\nfun countUniqueCharacters(input: String): Int {\n    return input.toSet().size\n}\n```"
  },
  {
    "task": "Write a function that returns the cube of a given number.",
    "code": "```kotlin\nfun cube(number: Double): Double {\n    return number * number * number\n}\n```"
  },
  {
    "task": "Create a function that calculates the power of a number given a base and exponent and returns the result.",
    "code": "```kotlin\nfun power(base: Double, exponent: Int): Double {\n    return Math.pow(base, exponent.toDouble())\n}\n```"
  },
  {
    "task": "Design a function that accepts a URL and returns its domain name.",
    "code": "```kotlin\nfun getDomainName(url: String): String? {\n    return try {\n        val uri = java.net.URI(url)\n        uri.host\n    } catch (e: Exception) {\n        null\n    }\n}\n```"
  },
  {
    "task": "Implement a function that takes a sentence and returns it with each letter shifted by one in the alphabet.",
    "code": "```kotlin\nfun shiftSentence(sentence: String): String {\n    return sentence.map { char ->\n        when (char) {\n            in 'a'..'y', in 'A'..'Y' -> char + 1\n            'z' -> 'a'\n            'Z' -> 'A'\n            else -> char\n        }\n    }.joinToString(\"\")\n}\n```"
  },
  {
    "task": "Write a function that checks if a list is sorted and returns a boolean.",
    "code": "```kotlin\nfun isSorted(list: List<Int>): Boolean {\n    for (i in 0 until list.size - 1) {\n        if (list[i] > list[i + 1]) {\n            return false\n        }\n    }\n    return true\n}\n```"
  },
  {
    "task": "Create a function that returns the longest increasing subsequence in a list of numbers.",
    "code": "```kotlin\nfun longestIncreasingSubsequence(nums: List<Int>): List<Int> {\n    if (nums.isEmpty()) return emptyList()\n\n    val lengths = IntArray(nums.size) { 1 }\n    val prevIndices = IntArray(nums.size) { -1 }\n\n    for (i in nums.indices) {\n        for (j in 0 until i) {\n            if (nums[j] < nums[i] && lengths[j] + 1 > lengths[i]) {\n                lengths[i] = lengths[j] + 1\n                prevIndices[i] = j\n            }\n        }\n    }\n\n    var maxLength = 0\n    var maxIndex = 0\n    for (i in lengths.indices) {\n        if (lengths[i] > maxLength) {\n            maxLength = lengths[i]\n            maxIndex = i\n        }\n    }\n\n    val lis = mutableListOf<Int>()\n    var index = maxIndex\n    while (index != -1) {\n        lis.add(nums[index])\n        index = prevIndices[index]\n    }\n\n    return lis.reversed()\n}\n```"
  },
  {
    "task": "Develop a function that calculates and returns the compound interest for given principal, rate, and time.",
    "code": "```kotlin\nfun calculateCompoundInterest(principal: Double, rate: Double, time: Double): Double {\n    return principal * Math.pow((1 + rate / 100), time)\n}\n```"
  },
  {
    "task": "Implement a function that accepts two strings and returns their longest common substring.",
    "code": "```kotlin\nfun longestCommonSubstring(s1: String, s2: String): String {\n    val dp = Array(s1.length + 1) { IntArray(s2.length + 1) }\n    var maxLength = 0\n    var endIndex = 0\n    \n    for (i in 1..s1.length) {\n        for (j in 1..s2.length) {\n            if (s1[i - 1] == s2[j - 1]) {\n                dp[i][j] = dp[i - 1][j - 1] + 1\n                if (dp[i][j] > maxLength) {\n                    maxLength = dp[i][j]\n                    endIndex = i\n                }\n            }\n        }\n    }\n    \n    return s1.substring(endIndex - maxLength, endIndex)\n}\n```"
  },
  {
    "task": "Write a function that takes a number and returns true if it is a palindrome.",
    "code": "```kotlin\nfun isPalindrome(number: Int): Boolean {\n    val original = number.toString()\n    val reversed = original.reversed()\n    return original == reversed\n}\n```"
  },
  {
    "task": "Create a function that returns the average length of words in a given sentence.",
    "code": "```kotlin\nfun averageWordLength(sentence: String): Double {\n    val words = sentence.split(\"\\\\s+\".toRegex())\n    val totalLength = words.sumBy { it.length }\n    return if (words.isNotEmpty()) totalLength.toDouble() / words.size else 0.0\n}\n```"
  },
  {
    "task": "Design a function that checks if a string contains only digits and returns a boolean.",
    "code": "```kotlin\nfun isNumeric(input: String): Boolean {\n    return input.all { it.isDigit() }\n}\n```"
  },
  {
    "task": "Implement a function that receives a list of tuples and returns a list of the first elements.",
    "code": "```kotlin\nfun getFirstElements(listOfTuples: List<Pair<Any, Any>>): List<Any> {\n    return listOfTuples.map { it.first }\n}\n```"
  },
  {
    "task": "Write a function that takes a year and returns the Chinese zodiac sign for that year.",
    "code": "```kotlin\nfun getChineseZodiac(year: Int): String {\n    val zodiacSigns = arrayOf(\n        \"Monkey\", \"Rooster\", \"Dog\", \"Pig\", \"Rat\", \"Ox\",\n        \"Tiger\", \"Rabbit\", \"Dragon\", \"Snake\", \"Horse\", \"Goat\"\n    )\n    return zodiacSigns[year % 12]\n}\n```"
  },
  {
    "task": "Create a function that returns the number of trailing zeros in a factorial of a given number.",
    "code": "```kotlin\nfun trailingZerosInFactorial(n: Int): Int {\n    var count = 0\n    var i = 5\n    while (n / i >= 1) {\n        count += n / i\n        i *= 5\n    }\n    return count\n}\n```"
  },
  {
    "task": "Develop a function that accepts a list and returns a new list with elements multiplied by their index.",
    "code": "```kotlin\nfun multiplyElementsByIndex(inputList: List<Int>): List<Int> {\n    return inputList.mapIndexed { index, element -> index * element }\n}\n```"
  },
  {
    "task": "Implement a function that receives a string and returns a dictionary of word lengths.",
    "code": "```kotlin\nfun wordLengths(input: String): Map<String, Int> {\n    return input.split(\"\\\\s+\".toRegex()).associateWith { it.length }\n}\n```"
  },
  {
    "task": "Write a function that takes a list of integers and returns a list of numbers that are divisible by 3.",
    "code": "```kotlin\nfun getNumbersDivisibleByThree(numbers: List<Int>): List<Int> {\n    return numbers.filter { it % 3 == 0 }\n}\n```"
  },
  {
    "task": "Create a function that returns the result of a quadratic equation given its coefficients.",
    "code": "```kotlin\nimport kotlin.math.sqrt\n\nfun solveQuadratic(a: Double, b: Double, c: Double): Pair<Double?, Double?> {\n    val discriminant = b * b - 4 * a * c\n    return when {\n        discriminant > 0 -> {\n            val root1 = (-b + sqrt(discriminant)) / (2 * a)\n            val root2 = (-b - sqrt(discriminant)) / (2 * a)\n            Pair(root1, root2)\n        }\n        discriminant == 0.0 -> {\n            val root = -b / (2 * a)\n            Pair(root, root)\n        }\n        else -> Pair(null, null)\n    }\n}\n```"
  },
  {
    "task": "Design a function that checks if two lists have any elements in common and returns a boolean.",
    "code": "```kotlin\nfun haveCommonElements(list1: List<Any>, list2: List<Any>): Boolean {\n    return list1.any { it in list2 }\n}\n```"
  },
  {
    "task": "Implement a function that accepts a list and returns the sum of its elements using recursion.",
    "code": "```kotlin\nfun sumListRecursively(list: List<Int>): Int {\n    return if (list.isEmpty()) 0 else list.first() + sumListRecursively(list.drop(1))\n}\n```"
  },
  {
    "task": "Write a function that takes a list of numbers and returns the variance.",
    "code": "```kotlin\nfun calculateVariance(numbers: List<Double>): Double {\n    if (numbers.isEmpty()) return 0.0\n    val mean = numbers.average()\n    return numbers.map { (it - mean) * (it - mean) }.average()\n}\n```"
  },
  {
    "task": "Create a function that returns the ASCII value of a given character.",
    "code": "```kotlin\nfun getAsciiValue(character: Char): Int {\n    return character.code\n}\n```"
  },
  {
    "task": "Develop a function that takes a number and returns the number of bits required for its binary representation.",
    "code": "```kotlin\nfun numberOfBits(n: Int): Int {\n    return n.toString(2).length\n}\n```"
  }
]