[
  {
    "task": "Create a program that continuously asks the user to enter a number until they input a negative number.",
    "code": "```applescript\nrepeat\n    display dialog \"Enter a number:\" default answer \"\"\n    set userInput to text returned of result\n    try\n        set userNumber to userInput as number\n        if userNumber < 0 then exit repeat\n    on error\n        display dialog \"Please enter a valid number.\"\n    end try\nend repeat\n```"
  },
  {
    "task": "Write a function that doubles a number and repeats the process until the number is greater than 1000.",
    "code": "```applescript\non doubleUntilGreaterThan1000(n)\n    set num to n\n    repeat while num \u2264 1000\n        set num to num * 2\n    end repeat\n    return num\nend doubleUntilGreaterThan1000\n```"
  },
  {
    "task": "Develop a routine to keep printing 'Hello, World!' until a counter reaches 10.",
    "code": "```applescript\nset counter to 0\n\nrepeat while counter < 10\n    display dialog \"Hello, World!\"\n    set counter to counter + 1\nend repeat\n```"
  },
  {
    "task": "Construct a loop that checks if a randomly generated number is even, repeating until an odd number is found.",
    "code": "```applescript\nrepeat\n    set randomNumber to (random number from 1 to 100)\n    if randomNumber mod 2 is not 0 then\n        exit repeat\n    end if\nend repeat\n```"
  },
  {
    "task": "Design a countdown timer that prints each second until it reaches zero.",
    "code": "```applescript\nset countdown to 10 -- Set the initial countdown value\n\nrepeat while countdown > 0\n    display dialog countdown buttons {\"OK\"} default button \"OK\"\n    delay 1\n    set countdown to countdown - 1\nend repeat\n\ndisplay dialog \"Time's up!\" buttons {\"OK\"} default button \"OK\"\n```"
  },
  {
    "task": "Implement a system where a user can keep adding items to a list until they type 'stop'.",
    "code": "```applescript\nset itemList to {}\nrepeat\n    set userInput to text returned of (display dialog \"Enter an item to add to the list (type 'stop' to finish):\" default answer \"\")\n    if userInput is \"stop\" then exit repeat\n    set end of itemList to userInput\nend repeat\n```"
  },
  {
    "task": "Write a script that simulates rolling a die and continues until a six is rolled.",
    "code": "```applescript\nset dieRoll to 0\nrepeat while dieRoll is not 6\n\tset dieRoll to (random number from 1 to 6)\nend repeat\n```"
  },
  {
    "task": "Create a program that asks for a password and keeps prompting until the correct password is entered.",
    "code": "```applescript\nset correctPassword to \"secret\"\nset userPassword to \"\"\n\nrepeat while userPassword is not correctPassword\n    set userPassword to text returned of (display dialog \"Enter the password:\" default answer \"\")\nend repeat\n```"
  },
  {
    "task": "Design a loop that calculates the sum of entered numbers until the user enters zero.",
    "code": "```applescript\nset total to 0\nrepeat\n    display dialog \"Enter a number (0 to stop):\" default answer \"\"\n    set userInput to text returned of result\n    set num to (userInput as number)\n    if num is 0 then exit repeat\n    set total to total + num\nend repeat\ndisplay dialog \"The total sum is \" & total\n```"
  },
  {
    "task": "Implement a feature that prints Fibonacci numbers until a number exceeds 100.",
    "code": "```applescript\nset a to 0\nset b to 1\n\nrepeat while a \u2264 100\n    display dialog a\n    set temp to a + b\n    set a to b\n    set b to temp\nend repeat\n```"
  },
  {
    "task": "Develop a loop that keeps halving a number until it becomes less than one.",
    "code": "```applescript\nset theNumber to 100\n\nrepeat while theNumber >= 1\n    set theNumber to theNumber / 2\nend repeat\n```"
  },
  {
    "task": "Write a program that asks for names and keeps storing them until the user enters 'done'.",
    "code": "```applescript\nset nameList to {}\n\nrepeat\n    display dialog \"Enter a name (or type 'done' to finish):\" default answer \"\"\n    set userInput to text returned of result\n    if userInput is equal to \"done\" then\n        exit repeat\n    else\n        set end of nameList to userInput\n    end if\nend repeat\n```"
  },
  {
    "task": "Create a process that keeps flipping a coin, recording results until there have been five heads.",
    "code": "```applescript\nset headsCount to 0\nset results to {}\n\nrepeat while headsCount < 5\n    set flipResult to (random number from 0 to 1)\n    if flipResult is 0 then\n        set end of results to \"Heads\"\n        set headsCount to headsCount + 1\n    else\n        set end of results to \"Tails\"\n    end if\nend repeat\n\nreturn results\n```"
  },
  {
    "task": "Implement a countdown that decreases by two each time, starting from 20, until it reaches zero.",
    "code": "```applescript\nset countdown to 20\nrepeat while countdown > 0\n    display dialog countdown as string\n    set countdown to countdown - 2\nend repeat\n```"
  },
  {
    "task": "Design a solution that repeatedly asks for user input and repeats it back until they type 'exit'.",
    "code": "```applescript\nrepeat\n\tset userInput to text returned of (display dialog \"Enter something: (type 'exit' to quit)\" default answer \"\")\n\tif userInput is \"exit\" then\n\t\texit repeat\n\tend if\n\tdisplay dialog \"You entered: \" & userInput buttons {\"OK\"} default button \"OK\"\nend repeat\n```"
  },
  {
    "task": "Develop a loop to simulate a bank account balance, repeatedly deducting a fee until the balance is below zero.",
    "code": "```applescript\nset balance to 1000\nset fee to 100\n\nrepeat while balance >= 0\n    set balance to balance - fee\nend repeat\n```"
  },
  {
    "task": "Create a sequence generator that multiplies a number by three each time until it reaches or exceeds 100.",
    "code": "```applescript\nset number to 1\nrepeat while number < 100\n    set number to number * 3\nend repeat\n```"
  },
  {
    "task": "Write a program that keeps generating random numbers between 1 and 10 until it gets a five.",
    "code": "```applescript\nrepeat\n\tset randomNumber to (random number from 1 to 10)\n\tif randomNumber is 5 then exit repeat\nend repeat\n```"
  },
  {
    "task": "Implement a system to keep checking the temperature and only stop when it falls below freezing.",
    "code": "```applescript\nset temperature to 32 -- Example starting temperature\nrepeat while temperature \u2265 32\n    -- Simulate checking the temperature\n    set temperature to (temperature - 1) -- Example decrement\nend repeat\n```"
  },
  {
    "task": "Construct a quiz game that continues asking questions until the player answers incorrectly.",
    "code": "```applescript\nset questionList to {\"What is the capital of France?\", \"What is 2 + 2?\", \"What is the color of the sky?\"}\nset answerList to {\"Paris\", \"4\", \"blue\"}\nset playerCorrect to true\nset questionIndex to 1\n\nrepeat while playerCorrect\n\tset question to item questionIndex of questionList\n\tset answer to item questionIndex of answerList\n\t\n\tdisplay dialog question default answer \"\"\n\tset playerAnswer to text returned of result\n\t\n\tif playerAnswer is not equal to answer then\n\t\tset playerCorrect to false\n\telse\n\t\tset questionIndex to questionIndex + 1\n\t\tif questionIndex > (count of questionList) then\n\t\t\tset questionIndex to 1\n\t\tend if\n\tend if\nend repeat\n\ndisplay dialog \"Game over! You answered incorrectly.\" buttons {\"OK\"}\n```"
  },
  {
    "task": "Write a function that calculates factorials of a number, repeating the process for numbers 1 through 5.",
    "code": "```applescript\non calculateFactorial(n)\n    set factorial to 1\n    set counter to 1\n    repeat while counter \u2264 n\n        set factorial to factorial * counter\n        set counter to counter + 1\n    end repeat\n    return factorial\nend calculateFactorial\n\nrepeat with i from 1 to 5\n    set result to calculateFactorial(i)\n    display dialog \"Factorial of \" & i & \" is: \" & result\nend repeat\n```"
  },
  {
    "task": "Create a loop that prints all even numbers between 1 and 50.",
    "code": "```applescript\nset number to 1\nrepeat while number \u2264 50\n    if number mod 2 is 0 then\n        display dialog number\n    end if\n    set number to number + 1\nend repeat\n```"
  },
  {
    "task": "Design a program that continuously asks for user input until a palindrome is entered.",
    "code": "```applescript\nrepeat\n    display dialog \"Enter a string:\" default answer \"\"\n    set userInput to text returned of result\n    set reversedInput to reverse of characters of userInput as string\n    if userInput is equal to reversedInput then exit repeat\nend repeat\ndisplay dialog \"You entered a palindrome: \" & userInput\n```"
  },
  {
    "task": "Implement a countdown that decreases by one each second, starting from 100.",
    "code": "```applescript\nset countdown to 100\nrepeat while countdown > 0\n    display dialog countdown as string buttons {\"OK\"} default button \"OK\" giving up after 1\n    set countdown to countdown - 1\nend repeat\n```"
  },
  {
    "task": "Write a script that repeatedly asks for a number and adds it to a total until the total exceeds 500.",
    "code": "```applescript\nset total to 0\nrepeat while total \u2264 500\n    set userInput to text returned of (display dialog \"Enter a number:\" default answer \"\")\n    set number to (userInput as number)\n    set total to total + number\nend repeat\n```"
  },
  {
    "task": "Create a loop that generates random letters until the letter 'Z' appears.",
    "code": "```applescript\nset foundZ to false\n\nrepeat while foundZ is false\n    set randomLetter to character id (random number from 65 to 90)\n    if randomLetter is \"Z\" then\n        set foundZ to true\n    end if\nend repeat\n```"
  },
  {
    "task": "Write a process that continues prompting for two numbers and prints their sum if it's even.",
    "code": "```applescript\nrepeat\n\tset firstNumber to text returned of (display dialog \"Enter the first number:\" default answer \"\")\n\tset secondNumber to text returned of (display dialog \"Enter the second number:\" default answer \"\")\n\tset firstNumber to firstNumber as number\n\tset secondNumber to secondNumber as number\n\tset sum to firstNumber + secondNumber\n\tif sum mod 2 = 0 then\n\t\tdisplay dialog \"The sum is even: \" & sum\n\tend if\nend repeat\n```"
  },
  {
    "task": "Develop a loop that simulates a traffic light sequence until a manual stop command is received.",
    "code": "```applescript\nset isRunning to true\n\nrepeat while isRunning\n    display dialog \"Traffic light is Green. Press OK to continue.\" buttons {\"Stop\", \"OK\"} default button \"OK\"\n    if button returned of result is \"Stop\" then\n        set isRunning to false\n        exit repeat\n    end if\n    \n    display dialog \"Traffic light is Yellow. Press OK to continue.\" buttons {\"Stop\", \"OK\"} default button \"OK\"\n    if button returned of result is \"Stop\" then\n        set isRunning to false\n        exit repeat\n    end if\n    \n    display dialog \"Traffic light is Red. Press OK to continue.\" buttons {\"Stop\", \"OK\"} default button \"OK\"\n    if button returned of result is \"Stop\" then\n        set isRunning to false\n    end if\nend repeat\n```"
  },
  {
    "task": "Implement a feature that keeps printing numbers in reverse order starting from 10.",
    "code": "```applescript\nset counter to 10\n\nrepeat while counter > 0\n    display dialog counter\n    set counter to counter - 1\nend repeat\n```"
  },
  {
    "task": "Create a program that rolls two dice and continues until the sum is exactly seven.",
    "code": "```applescript\nset sum to 0\nrepeat while sum is not 7\n    set die1 to (random number from 1 to 6)\n    set die2 to (random number from 1 to 6)\n    set sum to die1 + die2\nend repeat\n```"
  },
  {
    "task": "Design a loop that keeps asking for ages and prints the average once a negative age is entered.",
    "code": "```applescript\nset totalAge to 0\nset count to 0\n\nrepeat\n    display dialog \"Enter age:\" default answer \"\"\n    set userAge to text returned of result as integer\n    \n    if userAge < 0 then\n        exit repeat\n    else\n        set totalAge to totalAge + userAge\n        set count to count + 1\n    end if\nend repeat\n\nif count > 0 then\n    set averageAge to totalAge / count\n    display dialog \"The average age is \" & averageAge\nelse\n    display dialog \"No ages were entered.\"\nend if\n```"
  },
  {
    "task": "Write a routine that squares numbers starting from 1 until the square is greater than 500.",
    "code": "```applescript\nset num to 1\nrepeat while (num * num) \u2264 500\n    set squared to num * num\n    set num to num + 1\nend repeat\n```"
  },
  {
    "task": "Implement a system to ask for a string and append it to a file until 'end' is typed.",
    "code": "```applescript\nset filePath to (path to desktop as text) & \"output.txt\"\n\nrepeat\n    set userInput to text returned of (display dialog \"Enter a string to append to the file (type 'end' to finish):\" default answer \"\")\n    if userInput is \"end\" then\n        exit repeat\n    end if\n    \n    try\n        set fileReference to open for access file filePath with write permission\n        write userInput & return to fileReference starting at eof\n        close access fileReference\n    on error\n        try\n            close access file filePath\n        end try\n    end try\nend repeat\n```"
  },
  {
    "task": "Create a script that checks if a number is prime, repeating for each number entered by the user.",
    "code": "```applescript\nrepeat\n    display dialog \"Enter a number to check if it's prime:\" default answer \"\"\n    set userInput to text returned of result\n    try\n        set num to (userInput as integer)\n    on error\n        display dialog \"Please enter a valid integer.\"\n        next repeat\n    end try\n    \n    if num \u2264 1 then\n        set isPrime to false\n    else\n        set isPrime to true\n        set i to 2\n        repeat while i * i \u2264 num\n            if num mod i = 0 then\n                set isPrime to false\n                exit repeat\n            end if\n            set i to i + 1\n        end repeat\n    end if\n    \n    if isPrime then\n        display dialog (num as string) & \" is a prime number.\"\n    else\n        display dialog (num as string) & \" is not a prime number.\"\n    end if\nend repeat\n```"
  },
  {
    "task": "Develop a countdown that prints numbers starting from 50 down to 1.",
    "code": "```applescript\nset count to 50\nrepeat while count > 0\n    display dialog count\n    set count to count - 1\nend repeat\n```"
  },
  {
    "task": "Write a program that keeps doubling the value of a variable until it exceeds 200.",
    "code": "```applescript\nset theValue to 1\nrepeat while theValue \u2264 200\n    set theValue to theValue * 2\nend repeat\n```"
  },
  {
    "task": "Design a loop that keeps generating a random string of letters until a specific word is formed.",
    "code": "```applescript\nset targetWord to \"hello\"\nset generatedWord to \"\"\n\nrepeat while generatedWord is not targetWord\n    set generatedWord to generateRandomWord(length of targetWord)\nend repeat\n\non generateRandomWord(wordLength)\n    set letters to \"abcdefghijklmnopqrstuvwxyz\"\n    set randomWord to \"\"\n    repeat wordLength times\n        set randomIndex to (random number from 1 to (length of letters))\n        set randomLetter to text randomIndex through randomIndex of letters\n        set randomWord to randomWord & randomLetter\n    end repeat\n    return randomWord\nend generateRandomWord\n```"
  },
  {
    "task": "Implement a system that continuously fetches data from a sensor until a threshold is crossed.",
    "code": "```applescript\nset threshold to 100\nset sensorValue to 0\n\nrepeat while sensorValue \u2264 threshold\n    set sensorValue to fetchSensorData()\nend repeat\n\non fetchSensorData()\n    -- Simulate fetching data from a sensor\n    set newValue to (random number from 90 to 110)\n    return newValue\nend fetchSensorData\n```"
  },
  {
    "task": "Create a game where a player guesses a number, and the game continues until the player guesses correctly.",
    "code": "```applescript\nset targetNumber to random number from 1 to 100\nset guessedCorrectly to false\n\nrepeat while guessedCorrectly is false\n\tdisplay dialog \"Guess the number (between 1 and 100):\" default answer \"\"\n\tset playerGuess to text returned of result\n\t\n\ttry\n\t\tset playerGuess to playerGuess as integer\n\t\tif playerGuess is targetNumber then\n\t\t\tset guessedCorrectly to true\n\t\t\tdisplay dialog \"Congratulations! You guessed correctly.\"\n\t\telse if playerGuess < targetNumber then\n\t\t\tdisplay dialog \"Too low! Try again.\"\n\t\telse\n\t\t\tdisplay dialog \"Too high! Try again.\"\n\t\tend if\n\ton error\n\t\tdisplay dialog \"Please enter a valid number.\"\n\tend try\nend repeat\n```"
  },
  {
    "task": "Write a loop that continues to add random numbers to a list until the list has 10 even numbers.",
    "code": "```applescript\nset evenNumbers to {}\n\nrepeat while (count of evenNumbers) < 10\n    set randNum to random number from 1 to 100\n    if randNum mod 2 is 0 then\n        set end of evenNumbers to randNum\n    end if\nend repeat\n```"
  },
  {
    "task": "Design a routine that keeps removing elements from a list until it is empty.",
    "code": "```applescript\nset myList to {\"apple\", \"banana\", \"cherry\", \"date\"}\n\nrepeat while (count of myList) > 0\n    set myList to rest of myList\nend repeat\n```"
  },
  {
    "task": "Implement a sequence that prints the alphabet repeatedly until interrupted by the user.",
    "code": "```applescript\nrepeat\n    set alphabet to \"abcdefghijklmnopqrstuvwxyz\"\n    repeat while true\n        repeat with letter in alphabet\n            do shell script \"echo \" & letter\n        end repeat\n    end repeat\nend repeat\n```"
  },
  {
    "task": "Create a program that continuously checks for updates and stops once an update is available.",
    "code": "```applescript\nset updateAvailable to false\n\nrepeat while updateAvailable is false\n    -- Simulate checking for updates\n    delay 1 -- Wait for 1 second before the next check\n    set updateAvailable to (random number from 0 to 1) > 0.5 -- Randomly determine update availability\nend repeat\n\ndisplay dialog \"Update is now available!\"\n```"
  },
  {
    "task": "Write a function that keeps dividing a number by two until it results in a fractional value.",
    "code": "```applescript\non divideUntilFractional(theNumber)\n\trepeat while theNumber mod 1 = 0\n\t\tset theNumber to theNumber / 2\n\tend repeat\n\treturn theNumber\nend divideUntilFractional\n```"
  },
  {
    "task": "Develop a loop that keeps asking for student's grades and calculates the average until a grade of -1 is entered.",
    "code": "```applescript\nset totalGrades to 0\nset gradeCount to 0\nset grade to 0\n\nrepeat while grade is not -1\n    set grade to text returned of (display dialog \"Enter student's grade:\" default answer \"\")\n    set grade to grade as integer\n    if grade is not -1 then\n        set totalGrades to totalGrades + grade\n        set gradeCount to gradeCount + 1\n    end if\nend repeat\n\nif gradeCount is greater than 0 then\n    set average to totalGrades / gradeCount\n    display dialog \"Average grade is: \" & average\nelse\n    display dialog \"No grades entered.\"\nend if\n```"
  },
  {
    "task": "Design a feature that continuously monitors a file for changes and stops when no changes are detected for a minute.",
    "code": "```applescript\nset filePath to \"/path/to/your/file.txt\"\nset lastModified to (do shell script \"stat -f %m \" & quoted form of filePath)\n\nrepeat\n    delay 60\n    set currentModified to (do shell script \"stat -f %m \" & quoted form of filePath)\n    if currentModified is equal to lastModified then\n        exit repeat\n    else\n        set lastModified to currentModified\n    end if\nend repeat\n```"
  },
  {
    "task": "Implement a process where a motor runs until a certain distance is reached.",
    "code": "```applescript\nset targetDistance to 100 -- Set the target distance\nset currentDistance to 0 -- Initialize current distance\n\nrepeat while currentDistance < targetDistance\n    runMotor() -- Function to run the motor\n    set currentDistance to currentDistance + (measureDistance()) -- Update the current distance\nend repeat\n\non runMotor()\n    -- Code to start the motor\nend runMotor\n\non measureDistance()\n    -- Code to measure the distance traveled\n    return 10 -- Return the measured distance increment\nend measureDistance\n```"
  },
  {
    "task": "Create a script that keeps generating random numbers and stops when it generates a prime number.",
    "code": "```applescript\non isPrime(n)\n\tset n to n as integer\n\tif n \u2264 1 then return false\n\tif n = 2 then return true\n\tif n mod 2 = 0 then return false\n\tset max to (n ^ 0.5) as integer\n\trepeat with i from 3 to max by 2\n\t\tif n mod i = 0 then return false\n\tend repeat\n\treturn true\nend isPrime\n\nset foundPrime to false\nrepeat while foundPrime is false\n\tset randomNumber to (random number from 1 to 100) as integer\n\tif isPrime(randomNumber) then\n\t\tset foundPrime to true\n\tend if\nend repeat\n\nrandomNumber\n```"
  },
  {
    "task": "Write a program that asks for the user's favorite color and keeps asking until they say 'blue'.",
    "code": "```applescript\nrepeat\n    display dialog \"What is your favorite color?\" default answer \"\"\n    set favoriteColor to text returned of result\n    if favoriteColor is \"blue\" then exit repeat\nend repeat\n```"
  },
  {
    "task": "Develop a loop that continuously prints the time every second until a key is pressed.",
    "code": "```applescript\nset isKeyPressed to false\n\non keyPressed()\n    set isKeyPressed to true\nend keyPressed\n\nrepeat while not isKeyPressed\n    set currentTime to (current date) as string\n    display dialog currentTime buttons {\"OK\"} giving up after 1\nend repeat\n```"
  },
  {
    "task": "Create a system to keep downloading data from a server until the connection is lost.",
    "code": "```applescript\nset connectionLost to false\n\nrepeat while connectionLost is false\n    try\n        -- Replace the following line with actual code to download data\n        do shell script \"curl -O http://example.com/data\"\n    on error\n        set connectionLost to true\n    end try\nend repeat\n```"
  },
  {
    "task": "Write a process to keep a light on until the ambient light level is sufficient.",
    "code": "```applescript\nrepeat while ambientLightLevelIsLow()\n    turnOnLight()\nend repeat\n```"
  },
  {
    "task": "Implement a feature that continuously plays a sound until the user presses a button.",
    "code": "```applescript\nset soundFile to \"/System/Library/Sounds/Glass.aiff\"\nset isButtonPressed to false\n\nrepeat while not isButtonPressed\n    do shell script \"afplay \" & quoted form of soundFile\n    -- Simulate button press checking\n    delay 1\n    set isButtonPressed to buttonPressCheck()\nend repeat\n\non buttonPressCheck()\n    -- Simulate a button press\n    return false\nend buttonPressCheck\n```"
  },
  {
    "task": "Design a program that keeps multiplying a matrix by itself until its determinant is greater than 1000.",
    "code": "```applescript\nset initialMatrix to {{1, 2}, {3, 4}}\n\non multiplyMatrix(matrixA, matrixB)\n\tset result to {{0, 0}, {0, 0}}\n\trepeat with i from 1 to 2\n\t\trepeat with j from 1 to 2\n\t\t\tset sum to 0\n\t\t\trepeat with k from 1 to 2\n\t\t\t\tset sum to sum + (item i of item k of matrixA) * (item k of item j of matrixB)\n\t\t\tend repeat\n\t\t\tset item j of item i of result to sum\n\t\tend repeat\n\tend repeat\n\treturn result\nend multiplyMatrix\n\non calculateDeterminant(matrix)\n\tset a to item 1 of item 1 of matrix\n\tset b to item 2 of item 1 of matrix\n\tset c to item 1 of item 2 of matrix\n\tset d to item 2 of item 2 of matrix\n\treturn a * d - b * c\nend calculateDeterminant\n\nset determinant to calculateDeterminant(initialMatrix)\n\nrepeat while determinant \u2264 1000\n\tset initialMatrix to multiplyMatrix(initialMatrix, initialMatrix)\n\tset determinant to calculateDeterminant(initialMatrix)\nend repeat\n```"
  },
  {
    "task": "Create a script that keeps prompting the user to guess a word until they get it right.",
    "code": "```applescript\nset targetWord to \"apple\"\nset userGuess to \"\"\n\nrepeat while userGuess is not targetWord\n    set userGuess to text returned of (display dialog \"Guess the word:\" default answer \"\")\nend repeat\ndisplay dialog \"Congratulations! You guessed the word.\"\n```"
  },
  {
    "task": "Write a loop that simulates a car's fuel consumption and stops when the tank is empty.",
    "code": "```applescript\nset fuelLevel to 100\nset fuelConsumptionRate to 5\n\nrepeat while fuelLevel > 0\n    set fuelLevel to fuelLevel - fuelConsumptionRate\n    delay 1\nend repeat\n```"
  },
  {
    "task": "Develop a routine that keeps checking if a file exists and stops once it does.",
    "code": "```applescript\nset filePath to \"/path/to/your/file.txt\"\n\nrepeat while not (do shell script \"test -e \" & quoted form of filePath & \" && echo exists\") is \"exists\"\n\tdelay 1\nend repeat\n```"
  },
  {
    "task": "Implement a feature that continuously calculates the square root of a number until it's less than 0.1.",
    "code": "```applescript\nset inputNumber to 100\nset result to inputNumber\n\nrepeat while result \u2265 0.1\n    set result to result ^ 0.5\nend repeat\n```"
  },
  {
    "task": "Create a system that prints 'Processing...' every second until a task is complete.",
    "code": "```applescript\nset taskComplete to false\n\nrepeat while not taskComplete\n    display dialog \"Processing...\"\n    delay 1\n    set taskComplete to (button returned of (display dialog \"Is the task complete?\" buttons {\"No\", \"Yes\"} default button \"No\") = \"Yes\")\nend repeat\n```"
  },
  {
    "task": "Write a loop that repeatedly checks the status of a process until it reports 'complete'.",
    "code": "```applescript\nset processStatus to \"incomplete\"\n\nrepeat while processStatus is not \"complete\"\n    -- Insert code here to update processStatus\nend repeat\n```"
  },
  {
    "task": "Design a routine to keep pinging a server and alert when the connection is lost.",
    "code": "```applescript\nset serverAddress to \"example.com\"\nset connectionLost to false\n\nrepeat while not connectionLost\n    try\n        do shell script \"ping -c 1 \" & serverAddress\n    on error\n        display alert \"Connection Lost\" message \"The server is not responding.\"\n        set connectionLost to true\n    end try\n    delay 5\nend repeat\n```"
  },
  {
    "task": "Implement a loop that counts down from 100 by fives until it reaches zero.",
    "code": "```applescript\nset counter to 100\nrepeat while counter > 0\n    display dialog counter\n    set counter to counter - 5\nend repeat\n```"
  },
  {
    "task": "Create a script that keeps track of inventory items being added or removed until an end signal is given.",
    "code": "```applescript\nset inventoryCount to 0\nset continueLoop to true\n\nrepeat while continueLoop is true\n    display dialog \"Enter 'add' to add an item, 'remove' to remove an item, or 'end' to finish:\" default answer \"\"\n    set userInput to text returned of result\n\n    if userInput is equal to \"add\" then\n        set inventoryCount to inventoryCount + 1\n    else if userInput is equal to \"remove\" then\n        if inventoryCount > 0 then\n            set inventoryCount to inventoryCount - 1\n        else\n            display dialog \"No items to remove.\"\n        end if\n    else if userInput is equal to \"end\" then\n        set continueLoop to false\n    else\n        display dialog \"Invalid input. Please enter 'add', 'remove', or 'end'.\"\n    end if\nend repeat\n\ndisplay dialog \"Final inventory count: \" & inventoryCount\n```"
  },
  {
    "task": "Write a program that keeps calculating the power of two for numbers until a result is greater than 1000.",
    "code": "```applescript\nset result to 1\nset number to 0\nrepeat while result <= 1000\n    set number to number + 1\n    set result to 2 ^ number\nend repeat\n```"
  },
  {
    "task": "Develop a sequence that keeps appending random numbers to an array until its length is 20.",
    "code": "```applescript\nset randomNumbers to {}\nrepeat while (count of randomNumbers) is less than 20\n    set end of randomNumbers to (random number from 1 to 100)\nend repeat\n```"
  },
  {
    "task": "Implement a routine that continuously rotates an image until it matches a reference orientation.",
    "code": "```applescript\nset referenceOrientation to 90 -- replace with the desired reference orientation\nset currentOrientation to 0 -- assume initial orientation\n\ntell application \"Preview\"\n    activate\n    repeat while currentOrientation is not equal to referenceOrientation\n        -- Rotate the image here\n        delay 0.5 -- simulate rotation time\n        set currentOrientation to (currentOrientation + 90) mod 360\n    end repeat\nend tell\n```"
  },
  {
    "task": "Design a loop that keeps printing random jokes until the user stops it.",
    "code": "```applescript\nset stopJokes to false\n\nrepeat while not stopJokes\n    set randomJoke to some item of {\"Why don't scientists trust atoms? Because they make up everything!\", \"What do you call fake spaghetti? An impasta!\", \"How many tickles does it take to make an octopus laugh? Ten tickles!\"}\n    display dialog randomJoke buttons {\"Stop\", \"Another\"} default button \"Another\"\n    if button returned of the result is \"Stop\" then\n        set stopJokes to true\n    end if\nend repeat\n```"
  },
  {
    "task": "Create a program that accepts user feedback and continues until a positive feedback is received.",
    "code": "```applescript\nrepeat\n    display dialog \"Please provide your feedback:\" default answer \"\"\n    set userFeedback to text returned of result\n    if userFeedback contains \"good\" or userFeedback contains \"great\" or userFeedback contains \"excellent\" then\n        exit repeat\n    end if\nend repeat\ndisplay dialog \"Thank you for your positive feedback!\"\n```"
  },
  {
    "task": "Write a loop that repeatedly reads sensor data and stops when a stable reading is observed.",
    "code": "```applescript\nset stable to false\n\nrepeat while not stable\n    set sensorData to do shell script \"read_sensor_command\"\n    \n    if isStableReading(sensorData) then\n        set stable to true\n    end if\nend repeat\n\non isStableReading(data)\n    -- Replace this with logic to determine if the reading is stable\n    return data is \"stable_value\"\nend isStableReading\n```"
  },
  {
    "task": "Develop a system that simulates a stopwatch, counting seconds until stopped manually.",
    "code": "```applescript\nset stopped to false\nset seconds to 0\n\ndisplay dialog \"Press OK to start the stopwatch. Press Cancel to stop.\" buttons {\"Cancel\", \"OK\"} default button \"OK\"\nset button_pressed to button returned of result\n\nif button_pressed is \"OK\" then\n    repeat while not stopped\n        delay 1\n        set seconds to seconds + 1\n        display dialog \"Elapsed time: \" & seconds & \" seconds\" buttons {\"Stop\"} default button \"Stop\"\n        set stopped to true\n    end repeat\nend if\n```"
  },
  {
    "task": "Create a script that continues adding random integers to a sum until the sum exceeds 100.",
    "code": "```applescript\nset totalSum to 0\n\nrepeat while totalSum \u2264 100\n    set randomInt to (random number from 1 to 10)\n    set totalSum to totalSum + randomInt\nend repeat\n```"
  },
  {
    "task": "Implement a process to track a moving object until it stops.",
    "code": "```applescript\nset objectMoving to true\n\nrepeat while objectMoving\n    -- Code to track the moving object goes here\n\n    -- Check if the object has stopped\n    set objectMoving to false -- This should be replaced with actual condition to check if the object has stopped\nend repeat\n```"
  },
  {
    "task": "Design a routine to keep checking user login attempts until a successful login occurs.",
    "code": "```applescript\nset successfulLogin to false\n\nrepeat while not successfulLogin\n    display dialog \"Enter your username:\" default answer \"\"\n    set username to text returned of result\n\n    display dialog \"Enter your password:\" default answer \"\" with hidden answer\n    set password to text returned of result\n\n    -- Simulate a login check (replace with actual login verification logic)\n    if username is \"admin\" and password is \"password\" then\n        set successfulLogin to true\n        display dialog \"Login successful!\"\n    else\n        display dialog \"Login failed. Please try again.\"\n    end if\nend repeat\n```"
  },
  {
    "task": "Write a loop that repeatedly calculates the area of a circle for radii from 1 to 10.",
    "code": "```applescript\nset pi to 3.14159\nset radius to 1\nrepeat while radius \u2264 10\n    set area to pi * radius * radius\n    display dialog \"Radius: \" & radius & \", Area: \" & area\n    set radius to radius + 1\nend repeat\n```"
  },
  {
    "task": "Create a program that continues flipping a card from a deck until an ace is drawn.",
    "code": "```applescript\nset deck to {\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"}\nset aceDrawn to false\n\nrepeat while aceDrawn is false\n    set drawnCard to some item of deck\n    if drawnCard is \"A\" then\n        set aceDrawn to true\n    end if\nend repeat\n```"
  },
  {
    "task": "Develop a loop that keeps asking for a word and stores it until a word with more than five letters is entered.",
    "code": "```applescript\nset wordsList to {}\n\nrepeat\n    set inputWord to text returned of (display dialog \"Enter a word:\" default answer \"\")\n    set end of wordsList to inputWord\n    if (count characters of inputWord) > 5 then exit repeat\nend repeat\n```"
  },
  {
    "task": "Implement a feature that continuously calculates the exponential growth of a population until it doubles.",
    "code": "```applescript\nset initialPopulation to 1000\nset growthRate to 0.05\nset currentPopulation to initialPopulation\nset targetPopulation to initialPopulation * 2\n\nrepeat while currentPopulation < targetPopulation\n    set currentPopulation to currentPopulation * (1 + growthRate)\nend repeat\n\ncurrentPopulation\n```"
  },
  {
    "task": "Write a script that repeats a string a certain number of times until a limit is reached.",
    "code": "```applescript\nset repeatString to \"Hello, World!\"\nset limit to 5\nset count to 0\nset result to \"\"\n\nrepeat while count is less than limit\n    set result to result & repeatString & return\n    set count to count + 1\nend repeat\n\nresult\n```"
  },
  {
    "task": "Create a routine that keeps accessing an API endpoint until it returns a specific result.",
    "code": "```applescript\nset apiURL to \"https://example.com/api/endpoint\"\nset expectedResult to \"desiredResult\"\nset found to false\n\nrepeat while not found\n    set response to do shell script \"curl \" & apiURL\n    if response contains expectedResult then\n        set found to true\n    else\n        delay 5\n    end if\nend repeat\n```"
  },
  {
    "task": "Design a loop that continues to fetch stock prices until a certain price threshold is crossed.",
    "code": "```applescript\nset threshold to 100\nset currentPrice to 0\n\nrepeat while currentPrice \u2264 threshold\n    -- Replace this line with the actual code to fetch the current stock price\n    set currentPrice to (random number from 50 to 150)\nend repeat\n```"
  },
  {
    "task": "Implement a process that keeps monitoring CPU usage until it drops below 10%.",
    "code": "```applescript\nrepeat\n    set cpuUsage to do shell script \"ps -A -o %cpu | awk '{s+=$1} END {print s}'\"\n    if (cpuUsage as number) < 10 then\n        exit repeat\n    end if\n    delay 5\nend repeat\n```"
  },
  {
    "task": "Write a program that asks for a series of numbers and prints the largest once a negative number is entered.",
    "code": "```applescript\nset largestNumber to -infinity\nrepeat\n    display dialog \"Enter a number:\" default answer \"\"\n    set inputNumber to text returned of result\n    set inputNumber to inputNumber as number\n    if inputNumber < 0 then exit repeat\n    if inputNumber > largestNumber then\n        set largestNumber to inputNumber\n    end if\nend repeat\ndisplay dialog \"The largest number is \" & largestNumber\n```"
  },
  {
    "task": "Develop a system that keeps a heater on until the room reaches a desired temperature.",
    "code": "```applescript\nset desiredTemperature to 72\nset currentTemperature to 65\n\nrepeat while currentTemperature < desiredTemperature\n    -- Turn on the heater\n    set currentTemperature to currentTemperature + 1\n    delay 1 -- Simulate the passage of time\nend repeat\n\n-- Turn off the heater\n```"
  },
  {
    "task": "Create a loop that repeatedly checks if a door is open and alerts if it remains open for too long.",
    "code": "```applescript\nset doorOpen to true\nset openDuration to 0\nset maxDuration to 10\n\nrepeat while doorOpen\n    delay 1\n    set openDuration to openDuration + 1\n    if openDuration > maxDuration then\n        display alert \"The door has been open for too long!\"\n        exit repeat\n    end if\n    -- Here, you would check the actual door state and update 'doorOpen' accordingly\n    -- For this example, we assume the door remains open\nend repeat\n```"
  },
  {
    "task": "Implement a feature that keeps adding random characters to a string until its length is 8.",
    "code": "```applescript\nset randomString to \"\"\nset allowedChars to \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\nrepeat while length of randomString is less than 8\n    set randomIndex to (random number from 1 to (length of allowedChars))\n    set randomString to randomString & (character randomIndex of allowedChars)\nend repeat\nrandomString\n```"
  },
  {
    "task": "Design a routine that simulates a race and continues until a participant crosses the finish line.",
    "code": "```applescript\nset participantPosition to 0\nset finishLine to 100\n\nrepeat while participantPosition < finishLine\n    set participantPosition to participantPosition + (random number from 1 to 10)\nend repeat\n\ndisplay dialog \"A participant has crossed the finish line!\"\n```"
  },
  {
    "task": "Write a script that keeps checking an email inbox until a specific email is received.",
    "code": "```applescript\nset specificSubject to \"Specific Subject\"\nset emailReceived to false\n\ntell application \"Mail\"\n\trepeat while emailReceived is false\n\t\tset inboxMessages to messages of inbox\n\t\trepeat with msg in inboxMessages\n\t\t\tif subject of msg is specificSubject then\n\t\t\t\tset emailReceived to true\n\t\t\t\texit repeat\n\t\t\tend if\n\t\tend repeat\n\t\tdelay 60 -- wait for 1 minute before checking again\n\tend repeat\nend tell\n```"
  },
  {
    "task": "Create a loop that continues to play a video on repeat until the user interrupts.",
    "code": "```applescript\nrepeat while true\n    tell application \"QuickTime Player\"\n        open \"path:to:your:video.mov\"\n        play document 1\n        repeat while playing of document 1\n            delay 1\n        end repeat\n        close document 1\n    end tell\nend repeat\n```"
  },
  {
    "task": "Develop a process that keeps scanning for Bluetooth devices until a specific device is found.",
    "code": "```applescript\nset targetDeviceName to \"YourDeviceName\"\nset deviceFound to false\n\nrepeat while deviceFound is false\n    set deviceList to do shell script \"system_profiler SPBluetoothDataType | grep 'Name:'\"\n    if deviceList contains targetDeviceName then\n        set deviceFound to true\n    end if\n    delay 5\nend repeat\n```"
  },
  {
    "task": "Implement a script that continuously captures images from a webcam until a motion is detected.",
    "code": "```applescript\nset motionDetected to false\n\nrepeat while motionDetected is false\n    -- Capture an image from the webcam\n    do shell script \"imagesnap -w 1 webcam_image.jpg\"\n    \n    -- Check for motion detection (this is a placeholder for actual motion detection logic)\n    set motionDetected to (random number from 1 to 10) > 8\nend repeat\n```"
  },
  {
    "task": "Design a program that keeps playing a sound file until the user presses a mute button.",
    "code": "```applescript\nset isMuted to false\nrepeat while not isMuted\n    -- Play sound file\n    do shell script \"afplay /path/to/soundfile.mp3\"\n    \n    -- Check for mute button press\n    tell application \"System Events\"\n        if (exists (button \"Mute\" of window 1 of process \"YourAppName\")) then\n            set isMuted to true\n        end if\n    end tell\nend repeat\n```"
  },
  {
    "task": "Create a loop that repeatedly generates a random password until it meets certain security criteria.",
    "code": "```applescript\nset passwordGenerated to false\nset validCharacters to \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"\nset minPasswordLength to 8\nset hasUpper to false\nset hasLower to false\nset hasDigit to false\n\nrepeat while not passwordGenerated\n\tset randomPassword to \"\"\n\trepeat minPasswordLength times\n\t\tset randomChar to some character of validCharacters\n\t\tset randomPassword to randomPassword & randomChar\n\tend repeat\n\t\n\tset hasUpper to false\n\tset hasLower to false\n\tset hasDigit to false\n\t\n\trepeat with i from 1 to length of randomPassword\n\t\tset currentChar to character i of randomPassword\n\t\tif currentChar is in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" then\n\t\t\tset hasUpper to true\n\t\telse if currentChar is in \"abcdefghijklmnopqrstuvwxyz\" then\n\t\t\tset hasLower to true\n\t\telse if currentChar is in \"0123456789\" then\n\t\t\tset hasDigit to true\n\t\tend if\n\tend repeat\n\t\n\tif hasUpper and hasLower and hasDigit then\n\t\tset passwordGenerated to true\n\tend if\nend repeat\n\nreturn randomPassword\n```"
  },
  {
    "task": "Write a process that keeps checking for file changes in a directory and logs them until stopped.",
    "code": "```applescript\nset directoryPath to \"/path/to/directory\"\nset logFilePath to \"/path/to/logfile.txt\"\n\non hasFileChanged(directoryPath, lastModificationDate)\n    set newModificationDate to do shell script \"find \" & quoted form of directoryPath & \" -type f -exec stat -f \\\"%m\\\" {} + | sort -nr | head -n 1\"\n    if newModificationDate is not equal to lastModificationDate then\n        return {true, newModificationDate}\n    else\n        return {false, lastModificationDate}\n    end if\nend hasFileChanged\n\nset lastModificationDate to do shell script \"find \" & quoted form of directoryPath & \" -type f -exec stat -f \\\"%m\\\" {} + | sort -nr | head -n 1\"\n\nrepeat\n    delay 5\n    set {fileChanged, lastModificationDate} to hasFileChanged(directoryPath, lastModificationDate)\n    if fileChanged then\n        do shell script \"echo 'File change detected at \" & (current date) & \"' >> \" & quoted form of logFilePath\n    end if\nend repeat\n```"
  }
]