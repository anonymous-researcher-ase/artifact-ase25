[
  {
    "task": "Create a base class for a vehicle with methods for speed and fuel efficiency, then derive a car class that overrides these methods to provide specific implementations.",
    "code": "```applescript\n-- Define the base class Vehicle\nscript Vehicle\n    property speed : 0\n    property fuelEfficiency : 0\n\n    on getSpeed()\n        return speed\n    end getSpeed\n\n    on getFuelEfficiency()\n        return fuelEfficiency\n    end getFuelEfficiency\nend script\n\n-- Define the derived class Car\nscript Car\n    property parent : Vehicle -- Inherits from Vehicle\n\n    -- Override the speed method\n    on getSpeed()\n        set speed to 120 -- Specific implementation for Car\n        return speed\n    end getSpeed\n\n    -- Override the fuel efficiency method\n    on getFuelEfficiency()\n        set fuelEfficiency to 25 -- Specific implementation for Car\n        return fuelEfficiency\n    end getFuelEfficiency\nend script\n```"
  },
  {
    "task": "Design a base class for a multimedia file with properties like duration and format, then extend it with a video class that includes resolution and frame rate.",
    "code": "```applescript\n-- Base class for multimedia file\nscript MultimediaFile\n    property duration : \"\"\n    property format : \"\"\nend script\n\n-- Extended class for video\nscript Video\n    property parent : MultimediaFile\n    property resolution : \"\"\n    property frameRate : \"\"\nend script\n```"
  },
  {
    "task": "Develop a superclass for bank accounts with methods for deposit and withdrawal, then create a savings account subclass that overrides the withdrawal method to incorporate interest deductions.",
    "code": "```applescript\n-- Superclass for Bank Accounts\nscript BankAccount\n    property balance : 0\n\n    -- Method to deposit money\n    on deposit(amount)\n        set balance to balance + amount\n    end deposit\n\n    -- Method to withdraw money\n    on withdraw(amount)\n        if amount \u2264 balance then\n            set balance to balance - amount\n        else\n            display dialog \"Insufficient funds\"\n        end if\n    end withdraw\nend script\n\n-- Subclass for Savings Account\nscript SavingsAccount\n    -- Inherit from BankAccount\n    property parentAccount : BankAccount\n    property interestRate : 0.02\n\n    -- Initialize with a balance and interest rate\n    on initialize(initialBalance, rate)\n        set balance of parentAccount to initialBalance\n        set interestRate to rate\n    end initialize\n\n    -- Override the withdraw method to include interest deduction\n    on withdraw(amount)\n        set totalAmount to amount + (amount * interestRate)\n        tell parentAccount to withdraw(totalAmount)\n    end withdraw\n\n    -- Delegate deposit method to parent\n    on deposit(amount)\n        tell parentAccount to deposit(amount)\n    end deposit\n\n    -- Accessor for balance\n    on getBalance()\n        return balance of parentAccount\n    end getBalance\nend script\n```"
  },
  {
    "task": "Implement a base class for a geometric shape with methods to calculate area and perimeter, then create a rectangle subclass that provides specific calculations for these methods.",
    "code": "```applescript\n-- Base class for a geometric shape\nscript GeometricShape\n    property area : missing value\n    property perimeter : missing value\n\n    on calculateArea()\n        return area\n    end calculateArea\n\n    on calculatePerimeter()\n        return perimeter\n    end calculatePerimeter\nend script\n\n-- Rectangle subclass\nscript Rectangle\n    property parent : GeometricShape\n    property width : 0\n    property height : 0\n\n    on calculateArea()\n        set my area to width * height\n        return area\n    end calculateArea\n\n    on calculatePerimeter()\n        set my perimeter to 2 * (width + height)\n        return perimeter\n    end calculatePerimeter\nend script\n```"
  },
  {
    "task": "Construct a parent class for employees with a method to calculate salary, then derive a manager class that overrides this method to include bonuses.",
    "code": "```applescript\n-- Define the Employee class\nscript Employee\n    property baseSalary : 0\n\n    on calculateSalary()\n        return baseSalary\n    end calculateSalary\nend script\n\n-- Define the Manager class inheriting from Employee\nscript Manager\n    property parent : Employee\n    property bonus : 0\n\n    on calculateSalary()\n        return baseSalary + bonus\n    end calculateSalary\nend script\n```"
  },
  {
    "task": "Set up a base class for a library item with properties like title and author, and extend it with a book subclass that adds a number of pages property.",
    "code": "```applescript\nscript LibraryItem\n    property title : \"\"\n    property author : \"\"\nend script\n\nscript Book\n    property parent : LibraryItem\n    property numberOfPages : 0\nend script\n```"
  },
  {
    "task": "Create a foundation class for an electronic device with a method to turn on and off, and derive a smartphone class that overrides the turn on method to require a passcode.",
    "code": "```applescript\n-- Foundation class for an electronic device\nscript ElectronicDevice\n    property isOn : false\n\n    on turnOn()\n        set isOn to true\n        display dialog \"Device is now ON.\"\n    end turnOn\n\n    on turnOff()\n        set isOn to false\n        display dialog \"Device is now OFF.\"\n    end turnOff\nend script\n\n-- Smartphone class inheriting from ElectronicDevice\nscript Smartphone\n    property parent : ElectronicDevice\n    property passcode : \"1234\"\n\n    on turnOn()\n        display dialog \"Enter passcode:\" default answer \"\"\n        set userInput to text returned of result\n        if userInput is passcode then\n            set isOn to true\n            display dialog \"Smartphone is now ON.\"\n        else\n            display dialog \"Incorrect passcode. Access denied.\"\n        end if\n    end turnOn\nend script\n```"
  },
  {
    "task": "Design a base class for an animal with a method to make a sound, then create a dog subclass that overrides this method to bark.",
    "code": "```applescript\nscript Animal\n    on makeSound()\n        return \"Some generic animal sound\"\n    end makeSound\nend script\n\nscript Dog\n    property parent : Animal\n\n    on makeSound()\n        return \"Bark\"\n    end makeSound\nend script\n```"
  },
  {
    "task": "Develop a superclass for meals with a method to calculate calories, then create a dessert subclass that overrides it to add extra sugar calories.",
    "code": "```applescript\n-- Define the superclass for meals\nscript Meal\n    property totalCalories : 0\n\n    on calculateCalories()\n        return totalCalories\n    end calculateCalories\nend script\n\n-- Define the subclass for dessert\nscript Dessert\n    property parent : Meal\n    property sugarCalories : 50\n\n    on calculateCalories()\n        return (totalCalories + sugarCalories)\n    end calculateCalories\nend script\n\n-- Example usage\nset myDessert to Dessert's script\nmyDessert's set totalCalories to 200\nset calorieCount to myDessert's calculateCalories()\ndisplay dialog \"Total calories in dessert: \" & calorieCount\n```"
  },
  {
    "task": "Implement a base class for a transportation mode with a method to calculate travel time, then extend it with a plane subclass that overrides the method to calculate based on speed.",
    "code": "```applescript\n-- Base class for transportation mode\nscript TransportationMode\n    property |speed| : 0 -- In kilometers per hour\n    \n    on calculateTravelTime(distance)\n        return distance / |speed|\n    end calculateTravelTime\nend script\n\n-- Subclass for plane\nscript Plane\n    property parent : TransportationMode\n    property |speed| : 900 -- Average speed of a plane in km/h\n    \n    on calculateTravelTime(distance)\n        return distance / |speed|\n    end calculateTravelTime\nend script\n\n-- Example usage\nset myPlane to Plane\nset travelTime to myPlane's calculateTravelTime(1800)\ndisplay dialog \"Travel time by plane: \" & travelTime & \" hours\"\n```"
  },
  {
    "task": "Construct a parent class for a musical instrument with a method to play sound, then derive a piano class that overrides the method to play specific notes.",
    "code": "```applescript\n-- Define the parent class for a musical instrument\nscript MusicalInstrument\n    property instrumentName : \"Generic Instrument\"\n\n    on playSound()\n        display dialog \"Playing sound from \" & instrumentName\n    end playSound\nend script\n\n-- Define the derived class for a piano\nscript Piano\n    -- Inherit from the MusicalInstrument class\n    property parent : MusicalInstrument\n    property instrumentName : \"Piano\"\n\n    on playSound()\n        display dialog \"Playing notes: C, E, G on \" & instrumentName\n    end playSound\nend script\n\n-- Example usage\ntell Piano to playSound()\n```"
  },
  {
    "task": "Set up a base class for a user account with a method to reset password, and extend it with an admin account subclass that overrides it to include security questions.",
    "code": "```applescript\n-- Base class for a user account\nscript UserAccount\n    property accountName : \"\"\n    property password : \"\"\n    \n    on resetPassword(newPassword)\n        set password to newPassword\n        return \"Password has been reset.\"\n    end resetPassword\nend script\n\n-- Subclass for an admin account\nscript AdminAccount\n    script UserAccount -- Inheriting from UserAccount\n    \n    property securityQuestion : \"What is your favorite color?\"\n    property securityAnswer : \"blue\"\n    \n    on resetPassword(newPassword, answer)\n        if answer is securityAnswer then\n            set password to newPassword\n            return \"Password has been reset with security question.\"\n        else\n            return \"Security answer is incorrect.\"\n        end if\n    end resetPassword\nend script\n```"
  },
  {
    "task": "Create a foundational class for a beverage with properties like volume and temperature, and derive a coffee class that overrides the temperature property to be hot.",
    "code": "```applescript\n-- Define the foundational Beverage class\nscript Beverage\n    property volume : 0\n    property temperature : \"cold\"\nend script\n\n-- Define the Coffee class that inherits from Beverage\nscript Coffee\n    script Beverage\n        property volume : 0\n        property temperature : \"hot\"\n    end script\nend script\n```"
  },
  {
    "task": "Design a base class for a service appointment with a method to schedule time, then create a doctor appointment subclass that overrides this method to include consultation duration.",
    "code": "```applescript\n-- Base class for a service appointment\nscript ServiceAppointment\n    property appointmentTime : \"\"\n    \n    on scheduleTime(time)\n        set appointmentTime to time\n    end scheduleTime\nend script\n\n-- Subclass for a doctor appointment\nscript DoctorAppointment\n    property parent : ServiceAppointment\n    property consultationDuration : \"\"\n    \n    on scheduleTime(time, duration)\n        set appointmentTime to time\n        set consultationDuration to duration\n    end scheduleTime\nend script\n```"
  },
  {
    "task": "Develop a superclass for electronic gadgets with a method to calculate battery life, then extend it with a laptop class that overrides this method to consider usage patterns.",
    "code": "```applescript\n-- Define the superclass for electronic gadgets\nscript ElectronicGadget\n    property batteryCapacity : 0\n\n    on calculateBatteryLife()\n        return batteryCapacity & \" hours\"\n    end calculateBatteryLife\nend script\n\n-- Define the subclass for laptops\nscript Laptop\n    property parent : ElectronicGadget\n    property usagePattern : 0.5 -- fraction of maximum battery usage\n\n    on calculateBatteryLife()\n        return (batteryCapacity * usagePattern) & \" hours based on usage pattern\"\n    end calculateBatteryLife\nend script\n\n-- Example of usage\nset myGadget to ElectronicGadget's script\nset myGadget's batteryCapacity to 10\ndisplay dialog myGadget's calculateBatteryLife()\n\nset myLaptop to Laptop's script\nset myLaptop's batteryCapacity to 10\nset myLaptop's usagePattern to 0.7\ndisplay dialog myLaptop's calculateBatteryLife()\n```"
  },
  {
    "task": "Implement a base class for a website component with a method to render content, then create a blog post subclass that overrides this method to include author information.",
    "code": "```applescript\n-- Base class for a website component\nscript WebsiteComponent\n    -- Method to render content\n    on renderContent()\n        return \"Rendering website component content\"\n    end renderContent\nend script\n\n-- Subclass for a blog post that inherits from WebsiteComponent\nscript BlogPost\n    property parent : WebsiteComponent\n\n    -- Overriding method to render content with author information\n    on renderContent()\n        return \"Rendering blog post content with author information\"\n    end renderContent\nend script\n\n-- Example of using the classes\ntell BlogPost\n    set blogContent to renderContent()\nend tell\n\ndisplay dialog blogContent\n```"
  },
  {
    "task": "Construct a parent class for a recipe with methods for ingredients and instructions, then derive a cake recipe class that overrides these methods to add baking steps.",
    "code": "```applescript\n-- Define the parent class Recipe\nscript Recipe\n    property ingredientsList : {}\n    property instructionsList : {}\n    \n    on setIngredients(ingredients)\n        set ingredientsList to ingredients\n    end setIngredients\n    \n    on getIngredients()\n        return ingredientsList\n    end getIngredients\n    \n    on setInstructions(instructions)\n        set instructionsList to instructions\n    end setInstructions\n    \n    on getInstructions()\n        return instructionsList\n    end getInstructions\nend script\n\n-- Define the child class CakeRecipe that inherits from Recipe\nscript CakeRecipe\n    property parent : Recipe\n    property bakingInstructions : {}\n    \n    on setIngredients(ingredients)\n        set my ingredientsList to ingredients & {\"flour\", \"sugar\", \"eggs\", \"butter\"}\n    end setIngredients\n    \n    on setInstructions(instructions)\n        set my instructionsList to instructions & {\"mix ingredients\", \"pour into pan\", \"bake at 350 degrees\"}\n    end setInstructions\nend script\n```"
  },
  {
    "task": "Set up a base class for a plant with methods for sunlight and water needs, and extend it with a cactus subclass that overrides these methods to require less water.",
    "code": "```applescript\nscript Plant\n    property sunlightNeeds : \"Requires regular sunlight\"\n    property waterNeeds : \"Requires regular watering\"\n\n    on getSunlightNeeds()\n        return sunlightNeeds\n    end getSunlightNeeds\n\n    on getWaterNeeds()\n        return waterNeeds\n    end getWaterNeeds\nend script\n\nscript Cactus\n    property parent : Plant\n    property waterNeeds : \"Requires minimal watering\"\n\n    on getWaterNeeds()\n        return waterNeeds\n    end getWaterNeeds\nend script\n\n-- Example usage\ntell Plant to getSunlightNeeds()\ntell Plant to getWaterNeeds()\ntell Cactus to getSunlightNeeds()\ntell Cactus to getWaterNeeds()\n```"
  },
  {
    "task": "Create a foundational class for a building with properties like height and material, and derive a skyscraper class that overrides the height property to be significantly taller.",
    "code": "```applescript\n-- Define the foundational building class\nscript Building\n    property height : 0\n    property material : \"\"\n\n    on initBuilding(buildingHeight, buildingMaterial)\n        set height to buildingHeight\n        set material to buildingMaterial\n    end initBuilding\nend script\n\n-- Derive the Skyscraper class from Building\nscript Skyscraper\n    property parent : Building\n\n    on initSkyscraper(buildingMaterial)\n        set parent to script Building\n        tell parent to initBuilding(1000, buildingMaterial) -- Override height to be significantly taller\n    end initSkyscraper\nend script\n```"
  },
  {
    "task": "Design a base class for a payment method with a method to process transactions, then create a credit card subclass that overrides this method to include credit limits.",
    "code": "```applescript\nscript PaymentMethod\n    on processTransaction(amount)\n        return \"Processing transaction of $\" & amount\n    end processTransaction\nend script\n\nscript CreditCard\n    property parent : PaymentMethod\n    property creditLimit : 5000\n\n    on processTransaction(amount)\n        if amount \u2264 creditLimit then\n            return \"Processing credit card transaction of $\" & amount\n        else\n            return \"Transaction exceeds credit limit.\"\n        end if\n    end processTransaction\nend script\n```"
  },
  {
    "task": "Develop a superclass for a computer program with methods for input and output, then extend it with a game subclass that overrides these methods to include player interactions.",
    "code": "```applescript\n-- Superclass for a computer program\nscript Program\n    property inputText : \"\"\n    property outputText : \"\"\n    \n    on input()\n        set inputText to \"Generic Input\"\n    end input\n    \n    on output()\n        set outputText to \"Generic Output\"\n        return outputText\n    end output\nend script\n\n-- Game subclass that extends Program\nscript Game\n    script Program's superclass\n    \n    on input()\n        set inputText to \"Player Input\"\n    end input\n    \n    on output()\n        set outputText to \"Player Output\"\n        return outputText\n    end output\nend script\n\n-- Example usage\nset myGame to Game\ntell myGame\n    input()\n    display dialog (output())\nend tell\n```"
  },
  {
    "task": "Implement a base class for a dining establishment with a method to calculate wait time, then create a fast food subclass that overrides this method to be shorter.",
    "code": "```applescript\n-- Base class DiningEstablishment\nscript DiningEstablishment\n\tproperty waitTime : 30 -- default wait time in minutes\n\t\n\ton calculateWaitTime()\n\t\treturn waitTime\n\tend calculateWaitTime\nend script\n\n-- Subclass FastFood\nscript FastFood\n\tproperty parent : DiningEstablishment\n\tproperty waitTime : 10 -- override wait time in minutes\n\t\n\ton calculateWaitTime()\n\t\treturn waitTime\n\tend calculateWaitTime\nend script\n\n-- Example usage\nset restaurant to DiningEstablishment\nset fastFoodPlace to FastFood\n\ndisplay dialog \"Restaurant wait time: \" & (restaurant's calculateWaitTime()) & \" minutes\"\ndisplay dialog \"Fast food place wait time: \" & (fastFoodPlace's calculateWaitTime()) & \" minutes\"\n```"
  },
  {
    "task": "Construct a parent class for a social media profile with methods for posting and liking, then derive a business profile class that overrides these methods to include promotions.",
    "code": "```applescript\n-- Parent class for a social media profile\nscript SocialMediaProfile\n    property name : \"\"\n    \n    on initProfile(profileName)\n        set name to profileName\n    end initProfile\n    \n    on post(content)\n        return name & \" posted: \" & content\n    end post\n    \n    on like(content)\n        return name & \" liked: \" & content\n    end like\nend script\n\n-- Derived class for a business profile\nscript BusinessProfile\n    property parentProfile : SocialMediaProfile\n    property businessName : \"\"\n    \n    on initBusinessProfile(businessName)\n        set parentProfile to SocialMediaProfile\n        tell parentProfile to initProfile(businessName)\n        set my businessName to businessName\n    end initBusinessProfile\n    \n    on post(content)\n        return businessName & \" posted a promotion: \" & content\n    end post\n    \n    on like(content)\n        return businessName & \" liked a promotion: \" & content\n    end like\nend script\n```"
  },
  {
    "task": "Set up a base class for an educational course with methods for syllabus and grading, and extend it with an online course subclass that overrides these methods for remote learning.",
    "code": "```applescript\nscript Course\n    property syllabus : \"General syllabus\"\n    property grading : \"Standard grading\"\n\n    on getSyllabus()\n        return syllabus\n    end getSyllabus\n\n    on getGrading()\n        return grading\n    end getGrading\nend script\n\nscript OnlineCourse\n    property parent : Course\n    property syllabus : \"Online course syllabus\"\n    property grading : \"Online course grading\"\n\n    on getSyllabus()\n        return syllabus\n    end getSyllabus\n\n    on getGrading()\n        return grading\n    end getGrading\nend script\n```"
  },
  {
    "task": "Create a foundational class for a sports team with properties like team name and coach, and derive a football team class that overrides the coach property with a specific person.",
    "code": "```applescript\n-- Define a foundational class for a sports team\nscript SportsTeam\n    property teamName : \"\"\n    property coach : \"\"\nend script\n\n-- Derive a football team class that overrides the coach property\nscript FootballTeam\n    property parent : SportsTeam\n    property teamName : \"Football Team\"\n    property coach : \"Specific Person\"\nend script\n\n-- Example of creating a football team instance\nset footballTeamInstance to FootballTeam's copy()\n```"
  },
  {
    "task": "Design a base class for a document with methods for printing and saving, then create a PDF document subclass that overrides these methods to include encryption.",
    "code": "```applescript\n-- Base class for a document\nscript Document\n    property documentName : \"\"\n\n    on printDocument()\n        display dialog \"Printing \" & documentName\n    end printDocument\n\n    on saveDocument()\n        display dialog \"Saving \" & documentName\n    end saveDocument\nend script\n\n-- PDF document subclass that overrides print and save methods\nscript PDFDocument\n    property parent : Document\n    property encryptionEnabled : true\n\n    on printDocument()\n        if encryptionEnabled then\n            display dialog \"Printing encrypted PDF: \" & documentName\n        else\n            display dialog \"Printing PDF: \" & documentName\n        end if\n    end printDocument\n\n    on saveDocument()\n        if encryptionEnabled then\n            display dialog \"Saving encrypted PDF: \" & documentName\n        else\n            display dialog \"Saving PDF: \" & documentName\n        end if\n    end saveDocument\nend script\n\n-- Example Usage\nset myPDF to PDFDocument\nset myPDF's documentName to \"SampleDocument\"\nmyPDF's printDocument()\nmyPDF's saveDocument()\n```"
  },
  {
    "task": "Develop a superclass for a retail product with methods for pricing and discount, then extend it with an electronics product class that overrides the discount method to offer more.",
    "code": "```applescript\n-- Superclass for a retail product\nscript RetailProduct\n    property productName : \"\"\n    property basePrice : 0\n\n    on initWithNamePrice(name, price)\n        set productName to name\n        set basePrice to price\n        return me\n    end initWithNamePrice\n\n    on calculatePrice()\n        return basePrice\n    end calculatePrice\n\n    on calculateDiscount()\n        return 0\n    end calculateDiscount\nend script\n\n-- Subclass for an electronics product\nscript ElectronicsProduct\n    script RetailProduct\n        on calculateDiscount()\n            return basePrice * 0.1 -- Override to offer 10% discount\n        end calculateDiscount\n    end script\nend script\n\n-- Example usage\nset myProduct to RetailProduct's initWithNamePrice(\"Generic Item\", 100)\nset electronicsItem to ElectronicsProduct's initWithNamePrice(\"Laptop\", 1200)\n\n-- Access methods\nmyProduct's calculatePrice() -- 100\nmyProduct's calculateDiscount() -- 0\nelectronicsItem's calculatePrice() -- 1200\nelectronicsItem's calculateDiscount() -- 120\n```"
  },
  {
    "task": "Implement a base class for a subscription service with a method to renew membership, then create a monthly subscription subclass that overrides this method for automatic renewal.",
    "code": "```applescript\n-- Base class for a subscription service\nscript SubscriptionService\n    property membershipStatus : \"active\"\n    \n    on renewMembership()\n        set membershipStatus to \"renewed\"\n    end renewMembership\nend script\n\n-- Subclass for a monthly subscription\nscript MonthlySubscription\n    property parent : SubscriptionService\n    \n    on renewMembership()\n        set my membershipStatus to \"automatically renewed\"\n    end renewMembership\nend script\n\n-- Example usage\nset myMonthlySubscription to MonthlySubscription's script\nmyMonthlySubscription's renewMembership()\ndisplay dialog \"Membership Status: \" & myMonthlySubscription's membershipStatus\n```"
  },
  {
    "task": "Construct a parent class for a language translator with a method to translate text, then derive a French translator class that overrides this method for French language specifics.",
    "code": "```applescript\n-- Parent Class\nscript LanguageTranslator\n    on translateText(textToTranslate)\n        return \"Generic translation of: \" & textToTranslate\n    end translateText\nend script\n\n-- Derived Class\nscript FrenchTranslator\n    property parent : LanguageTranslator\n\n    on translateText(textToTranslate)\n        return \"Traduction fran\u00e7aise de: \" & textToTranslate\n    end translateText\nend script\n\n-- Example usage:\nset translator to FrenchTranslator\ntranslator's translateText(\"Hello, world!\")\n```"
  },
  {
    "task": "Set up a base class for a customer order with methods for placing and tracking, and extend it with a food order subclass that overrides tracking for delivery status.",
    "code": "```applescript\n-- Base class for a customer order\nscript CustomerOrder\n    property orderID : \"\"\n    \n    on initWithOrderID(theOrderID)\n        set orderID to theOrderID\n        return me\n    end initWithOrderID\n    \n    on placeOrder()\n        return \"Order \" & orderID & \" has been placed.\"\n    end placeOrder\n    \n    on trackOrder()\n        return \"Tracking order \" & orderID & \".\"\n    end trackOrder\nend script\n\n-- Subclass for a food order\nscript FoodOrder\n    property parent : CustomerOrder\n    property deliveryStatus : \"Preparing\"\n    \n    on initWithOrderID(theOrderID)\n        set orderID of me to theOrderID\n        return me\n    end initWithOrderID\n    \n    on trackOrder()\n        return \"Order \" & orderID of me & \" is currently \" & deliveryStatus & \".\"\n    end trackOrder\nend script\n\n-- Example usage\nset myOrder to CustomerOrder's initWithOrderID(\"12345\")\nmyOrder's placeOrder() -- \"Order 12345 has been placed.\"\nmyOrder's trackOrder() -- \"Tracking order 12345.\"\n\nset myFoodOrder to FoodOrder's initWithOrderID(\"54321\")\nmyFoodOrder's placeOrder() -- \"Order 54321 has been placed.\"\nmyFoodOrder's trackOrder() -- \"Order 54321 is currently Preparing.\"\n```"
  },
  {
    "task": "Create a foundational class for an artwork with properties like artist and medium, and derive a painting class that overrides the medium property to be 'canvas'.",
    "code": "```applescript\nscript Artwork\n    property artist : \"\"\n    property medium : \"\"\nend script\n\nscript Painting\n    property parent : Artwork\n    property medium : \"canvas\"\nend script\n```"
  },
  {
    "task": "Design a base class for a computer network with methods for connectivity and bandwidth, then create a wireless network subclass that overrides these methods for signal strength.",
    "code": "```applescript\n-- Base class for a computer network\nscript ComputerNetwork\n    property connectivity : \"Unknown\"\n    property bandwidth : \"Unknown\"\n    \n    on getConnectivity()\n        return connectivity\n    end getConnectivity\n    \n    on getBandwidth()\n        return bandwidth\n    end getBandwidth\nend script\n\n-- Subclass for a wireless network\nscript WirelessNetwork\n    property parent : ComputerNetwork\n    property signalStrength : \"Unknown\"\n    \n    on getConnectivity()\n        return \"Wireless Connectivity: \" & (get signalStrength)\n    end getConnectivity\n    \n    on getBandwidth()\n        return \"Wireless Bandwidth: \" & (get signalStrength)\n    end getBandwidth\n    \n    on getSignalStrength()\n        return signalStrength\n    end getSignalStrength\nend script\n```"
  },
  {
    "task": "Develop a superclass for a messaging app with methods for sending and receiving messages, then extend it with a secure messaging subclass that overrides these methods for encryption.",
    "code": "```applescript\n-- Define the superclass for a messaging app\nscript MessagingApp\n    on sendMessage(message)\n        return \"Sending message: \" & message\n    end sendMessage\n    \n    on receiveMessage(message)\n        return \"Receiving message: \" & message\n    end receiveMessage\nend script\n\n-- Define the subclass for secure messaging\nscript SecureMessagingApp\n    property parent : MessagingApp\n    \n    on sendMessage(message)\n        -- Here you would add encryption logic\n        return \"Sending encrypted message: \" & message\n    end sendMessage\n    \n    on receiveMessage(message)\n        -- Here you would add decryption logic\n        return \"Receiving encrypted message: \" & message\n    end receiveMessage\nend script\n```"
  },
  {
    "task": "Implement a base class for a travel itinerary with methods for destinations and activities, then create a vacation itinerary subclass that overrides these methods for leisure activities.",
    "code": "```applescript\nscript TravelItinerary\n    property destinations : {}\n    property activities : {}\n\n    on getDestinations()\n        return destinations\n    end getDestinations\n\n    on getActivities()\n        return activities\n    end getActivities\nend script\n\nscript VacationItinerary\n    property parent : TravelItinerary\n\n    on getDestinations()\n        return {\"Beach\", \"Resort\", \"Spa\"}\n    end getDestinations\n\n    on getActivities()\n        return {\"Swimming\", \"Sunbathing\", \"Relaxing\"}\n    end getActivities\nend script\n```"
  },
  {
    "task": "Construct a parent class for a healthcare record with methods for patient data and treatment history, then derive a pediatric record class that overrides these methods for child-specific data.",
    "code": "```applescript\n-- Define a parent class for healthcare record\nscript HealthcareRecord\n    property patientData : {}\n    property treatmentHistory : {}\n    \n    on getPatientData()\n        return patientData\n    end getPatientData\n    \n    on getTreatmentHistory()\n        return treatmentHistory\n    end getTreatmentHistory\nend script\n\n-- Define a derived class for pediatric record\nscript PediatricRecord\n    property parent : HealthcareRecord\n    property childSpecificData : {}\n    property childSpecificHistory : {}\n    \n    on getPatientData()\n        return childSpecificData\n    end getPatientData\n    \n    on getTreatmentHistory()\n        return childSpecificHistory\n    end getTreatmentHistory\nend script\n```"
  },
  {
    "task": "Set up a base class for a culinary dish with methods for preparation and serving, and extend it with an appetizer subclass that overrides these methods for smaller portions.",
    "code": "```applescript\n-- Base class for a culinary dish\nscript CulinaryDish\n    property name : \"Generic Dish\"\n    \n    on prepare()\n        return \"Preparing \" & name\n    end prepare\n    \n    on serve()\n        return \"Serving \" & name\n    end serve\nend script\n\n-- Subclass for an appetizer\nscript Appetizer\n    property parent : CulinaryDish\n    property name : \"Generic Appetizer\"\n    \n    on prepare()\n        return \"Preparing small portion of \" & name\n    end prepare\n    \n    on serve()\n        return \"Serving small portion of \" & name\n    end serve\nend script\n```"
  },
  {
    "task": "Create a foundational class for a book collection with properties like genre and author, and derive a mystery collection class that overrides the genre property to be 'mystery'.",
    "code": "```applescript\nscript BookCollection\n    property genre : \"\"\n    property author : \"\"\nend script\n\nscript MysteryCollection\n    property parent : BookCollection\n    property genre : \"mystery\"\nend script\n```"
  },
  {
    "task": "Design a base class for a file storage system with methods for saving and deleting files, then create a cloud storage subclass that overrides these methods for remote access.",
    "code": "```applescript\n-- Base class for file storage system\nscript FileStorage\n    -- Method to save a file\n    on saveFile(filePath)\n        display dialog \"Saving file at \" & filePath\n    end saveFile\n\n    -- Method to delete a file\n    on deleteFile(filePath)\n        display dialog \"Deleting file at \" & filePath\n    end deleteFile\nend script\n\n-- Subclass for cloud storage\nscript CloudStorage\n    property parent : FileStorage\n\n    -- Override method to save a file for cloud storage\n    on saveFile(filePath)\n        display dialog \"Saving file to cloud at \" & filePath\n    end saveFile\n\n    -- Override method to delete a file for cloud storage\n    on deleteFile(filePath)\n        display dialog \"Deleting file from cloud at \" & filePath\n    end deleteFile\nend script\n\n-- Example usage\ntell CloudStorage\n    saveFile(\"remote/path/to/file.txt\")\n    deleteFile(\"remote/path/to/file.txt\")\nend tell\n```"
  },
  {
    "task": "Develop a superclass for a seasonal sale event with methods for discounts and promotions, then extend it with a summer sale subclass that overrides these methods for summer items.",
    "code": "```applescript\n-- Superclass for a seasonal sale event\nscript SeasonalSaleEvent\n    property discount : 0\n    property promotion : \"\"\n\n    on getDiscount()\n        return discount\n    end getDiscount\n\n    on getPromotion()\n        return promotion\n    end getPromotion\nend script\n\n-- Subclass for a summer sale event\nscript SummerSaleEvent\n    script SeasonalSaleEvent\n    end script\n\n    on getDiscount()\n        set discount to 20\n        return discount\n    end getDiscount\n\n    on getPromotion()\n        set promotion to \"Buy 1 Get 1 Free on select summer items\"\n        return promotion\n    end getPromotion\nend script\n```"
  },
  {
    "task": "Implement a base class for a personal budget with methods for income and expenses, then create a student budget subclass that overrides these methods for tuition and fees.",
    "code": "```applescript\n-- Base Class: PersonalBudget\nscript PersonalBudget\n    property income : 0\n    property expenses : 0\n    \n    on setIncome(newIncome)\n        set income to newIncome\n    end setIncome\n    \n    on setExpenses(newExpenses)\n        set expenses to newExpenses\n    end setExpenses\n    \n    on getIncome()\n        return income\n    end getIncome\n    \n    on getExpenses()\n        return expenses\n    end getExpenses\nend script\n\n-- Subclass: StudentBudget\nscript StudentBudget\n    property parent : PersonalBudget()\n    property tuition : 0\n    property fees : 0\n    \n    on setIncome(newIncome)\n        set parent's income to newIncome - tuition - fees\n    end setIncome\n    \n    on setExpenses(newExpenses)\n        set parent's expenses to newExpenses + tuition + fees\n    end setExpenses\n    \n    on setTuition(newTuition)\n        set tuition to newTuition\n    end setTuition\n    \n    on setFees(newFees)\n        set fees to newFees\n    end setFees\n    \n    on getIncome()\n        return parent's income + tuition + fees\n    end getIncome\n    \n    on getExpenses()\n        return parent's expenses - tuition - fees\n    end getExpenses\nend script\n```"
  },
  {
    "task": "Construct a parent class for a fitness routine with methods for exercises and duration, then derive a yoga routine class that overrides these methods for flexibility exercises.",
    "code": "```applescript\n-- Define the parent class for a fitness routine\nscript FitnessRoutine\n    property exercises : {\"exercise1\", \"exercise2\"}\n    property duration : 30\n    \n    on getExercises()\n        return exercises\n    end getExercises\n    \n    on getDuration()\n        return duration\n    end getDuration\nend script\n\n-- Define the derived class for a yoga routine\nscript YogaRoutine\n    property parent : FitnessRoutine\n    property exercises : {\"flexibility exercise1\", \"flexibility exercise2\"}\n    property duration : 60\n    \n    on getExercises()\n        return exercises\n    end getExercises\n    \n    on getDuration()\n        return duration\n    end getDuration\nend script\n```"
  },
  {
    "task": "Set up a base class for a transportation ticket with methods for pricing and validity, and extend it with an airline ticket subclass that overrides these methods for baggage allowance.",
    "code": "```applescript\n-- Base class for a transportation ticket\nscript TransportationTicket\n    property price : 100\n    property validity : \"1 day\"\n    \n    on getPrice()\n        return price\n    end getPrice\n    \n    on getValidity()\n        return validity\n    end getValidity\nend script\n\n-- Subclass for an airline ticket\nscript AirlineTicket\n    property parent : TransportationTicket\n    property baggageAllowance : 20\n    \n    on getPrice()\n        return parent's getPrice() + 50\n    end getPrice\n    \n    on getValidity()\n        return \"1 year\"\n    end getValidity\n    \n    on getBaggageAllowance()\n        return baggageAllowance\n    end getBaggageAllowance\nend script\n```"
  },
  {
    "task": "Create a foundational class for a digital photo album with properties like album name and date, and derive a vacation album class that overrides the date property to be specific.",
    "code": "```applescript\n-- Define the foundational class for a digital photo album\nscript PhotoAlbum\n    property albumName : \"\"\n    property albumDate : \"\"\n\n    on initAlbum(name, date)\n        set albumName to name\n        set albumDate to date\n    end initAlbum\n    \n    on getAlbumDetails()\n        return \"Album Name: \" & albumName & \", Album Date: \" & albumDate\n    end getAlbumDetails\nend script\n\n-- Define the derived class for a vacation album\nscript VacationAlbum\n    property parent : PhotoAlbum\n    property vacationDate : \"\"\n\n    on initVacationAlbum(name, date)\n        set albumName of me to name\n        set vacationDate to date\n    end initVacationAlbum\n    \n    on getAlbumDetails()\n        return \"Vacation Album Name: \" & albumName of me & \", Vacation Date: \" & vacationDate\n    end getAlbumDetails\nend script\n```"
  },
  {
    "task": "Design a base class for a home appliance with methods for power usage and warranty, then create a refrigerator subclass that overrides these methods for energy efficiency.",
    "code": "```applescript\n-- Define the base class for a home appliance\nscript HomeAppliance\n    property powerUsage : \"Standard power usage\"\n    property warranty : \"Standard warranty\"\n\n    on getPowerUsage()\n        return powerUsage\n    end getPowerUsage\n\n    on getWarranty()\n        return warranty\n    end getWarranty\nend script\n\n-- Define the refrigerator subclass\nscript Refrigerator\n    script HomeAppliance -- Inherit from HomeAppliance\n\n    on getPowerUsage()\n        return \"Energy efficient power usage\"\n    end getPowerUsage\n\n    on getWarranty()\n        return \"Extended warranty for refrigerator\"\n    end getWarranty\nend script\n\n-- Example usage\ntell Refrigerator to getPowerUsage() -- Returns \"Energy efficient power usage\"\ntell Refrigerator to getWarranty() -- Returns \"Extended warranty for refrigerator\"\n```"
  },
  {
    "task": "Develop a superclass for a software update with methods for versioning and patch notes, then extend it with a security update subclass that overrides these methods for vulnerabilities.",
    "code": "```applescript\n-- Superclass for Software Update\nscript SoftwareUpdate\n    property versionNumber : \"\"\n    property patchNotes : \"\"\n    \n    on setVersionNumber(version)\n        set versionNumber to version\n    end setVersionNumber\n    \n    on getVersionNumber()\n        return versionNumber\n    end getVersionNumber\n    \n    on setPatchNotes(notes)\n        set patchNotes to notes\n    end setPatchNotes\n    \n    on getPatchNotes()\n        return patchNotes\n    end getPatchNotes\nend script\n\n-- Subclass for Security Update\nscript SecurityUpdate\n    property parent : SoftwareUpdate\n    property vulnerabilities : \"\"\n    \n    on setVersionNumber(version)\n        set versionNumber of my parent to version & \" (Security Update)\"\n    end setVersionNumber\n    \n    on getVersionNumber()\n        return versionNumber of my parent\n    end getVersionNumber\n    \n    on setPatchNotes(notes)\n        set vulnerabilities to notes\n    end setPatchNotes\n    \n    on getPatchNotes()\n        return vulnerabilities\n    end getPatchNotes\nend script\n```"
  },
  {
    "task": "Implement a base class for a musical performance with methods for rehearsal and execution, then create a concert performance subclass that overrides these methods for live audience.",
    "code": "```applescript\n-- Base class for a musical performance\nscript MusicalPerformance\n    property rehearsalMessage : \"Rehearsing the performance.\"\n    property executionMessage : \"Executing the performance.\"\n\n    on rehearse()\n        return rehearsalMessage\n    end rehearse\n\n    on execute()\n        return executionMessage\n    end execute\nend script\n\n-- Subclass for a concert performance\nscript ConcertPerformance\n    property parent : MusicalPerformance\n    property rehearsalMessage : \"Rehearsing for the concert.\"\n    property executionMessage : \"Executing the concert for a live audience.\"\n\n    on rehearse()\n        return rehearsalMessage\n    end rehearse\n\n    on execute()\n        return executionMessage\n    end execute\nend script\n```"
  },
  {
    "task": "Construct a parent class for an academic degree with methods for course requirements and credits, then derive a master's degree class that overrides these methods for advanced studies.",
    "code": "```applescript\n-- Define the parent class for an academic degree\nscript AcademicDegree\n    property courseRequirements : \"General Requirements\"\n    property credits : 120\n    \n    on getCourseRequirements()\n        return courseRequirements\n    end getCourseRequirements\n    \n    on getCredits()\n        return credits\n    end getCredits\nend script\n\n-- Define the derived class for a master's degree\nscript MastersDegree\n    property parent : AcademicDegree\n    property courseRequirements : \"Advanced Studies Requirements\"\n    property credits : 60\n    \n    on getCourseRequirements()\n        return courseRequirements\n    end getCourseRequirements\n    \n    on getCredits()\n        return credits\n    end getCredits\nend script\n```"
  },
  {
    "task": "Set up a base class for a weather forecast with methods for temperature and conditions, and extend it with a winter forecast subclass that overrides these methods for snow conditions.",
    "code": "```applescript\n-- Base class for weather forecast\nscript WeatherForecast\n    property temperature : \"\"\n    property conditions : \"\"\n\n    on getTemperature()\n        return temperature\n    end getTemperature\n\n    on getConditions()\n        return conditions\n    end getConditions\nend script\n\n-- Subclass for winter forecast\nscript WinterForecast\n    script WeatherForecast\n\n    on getTemperature()\n        return \"Below freezing\"\n    end getTemperature\n\n    on getConditions()\n        return \"Snowy\"\n    end getConditions\nend script\n```"
  },
  {
    "task": "Create a foundational class for a personal diary with properties like date and entries, and derive a travel diary class that overrides the date property with travel dates.",
    "code": "```applescript\n-- Define the foundational class for a personal diary\nscript PersonalDiary\n    property date : missing value\n    property entries : {}\n\n    on initDiary(theDate, theEntries)\n        set date to theDate\n        set entries to theEntries\n    end initDiary\nend script\n\n-- Derive a travel diary class from the personal diary class\nscript TravelDiary\n    property parent : PersonalDiary\n    property travelDates : {}\n\n    on initTravelDiary(theTravelDates, theEntries)\n        set travelDates to theTravelDates\n        set entries to theEntries\n    end initTravelDiary\nend script\n```"
  },
  {
    "task": "Design a base class for a pet with methods for feeding and grooming, then create a cat subclass that overrides these methods with specific food preferences.",
    "code": "```applescript\n-- Define the base class for a pet\nscript Pet\n    property petName : \"Generic Pet\"\n    \n    on feed()\n        return \"Feeding \" & petName & \" with generic food.\"\n    end feed\n    \n    on groom()\n        return \"Grooming \" & petName & \".\"\n    end groom\nend script\n\n-- Define the subclass for a cat\nscript Cat\n    -- Inherit from Pet\n    property parent : Pet\n    property petName : \"Cat\"\n\n    on feed()\n        return \"Feeding \" & petName & \" with cat food.\"\n    end feed\n    \n    on groom()\n        return \"Grooming \" & petName & \" with a cat brush.\"\n    end groom\nend script\n\n-- Example usage\nset myPet to Pet\nset myCat to Cat\n\nfeed of myPet\ngroom of myPet\n\nfeed of myCat\ngroom of myCat\n```"
  },
  {
    "task": "Develop a superclass for a software library with methods for installation and updates, then extend it with a graphics library subclass that overrides these methods for rendering capabilities.",
    "code": "```applescript\n-- Define the superclass for a software library\nscript SoftwareLibrary\n    property libraryName : \"Generic Library\"\n\n    on install()\n        display dialog \"Installing \" & libraryName\n    end install\n\n    on update()\n        display dialog \"Updating \" & libraryName\n    end update\nend script\n\n-- Extend the superclass with a graphics library subclass\nscript GraphicsLibrary\n    script SoftwareLibrary -- Inherit from SoftwareLibrary\n        property libraryName : \"Graphics Library\"\n\n        on install()\n            display dialog \"Installing \" & libraryName & \" with rendering capabilities\"\n        end install\n\n        on update()\n            display dialog \"Updating \" & libraryName & \" with new rendering features\"\n        end update\n    end script\nend script\n\n-- Example usage\ntell GraphicsLibrary to install()\ntell GraphicsLibrary to update()\n```"
  },
  {
    "task": "Implement a base class for a political campaign with methods for fundraising and events, then create a presidential campaign subclass that overrides these methods for national scale.",
    "code": "```applescript\n-- Define the base class for a political campaign\nscript PoliticalCampaign\n    property fundraisingAmount : 0\n\n    on fundraise()\n        set fundraisingAmount to fundraisingAmount + 1000\n        return \"Fundraising at local level: $\" & fundraisingAmount\n    end fundraise\n\n    on organizeEvent()\n        return \"Organizing a local campaign event.\"\n    end organizeEvent\nend script\n\n-- Define a subclass for a presidential campaign\nscript PresidentialCampaign\n    property parent : PoliticalCampaign\n    property fundraisingAmount : 0\n\n    on fundraise()\n        set fundraisingAmount to fundraisingAmount + 10000\n        return \"Fundraising at national level: $\" & fundraisingAmount\n    end fundraise\n\n    on organizeEvent()\n        return \"Organizing a national campaign event.\"\n    end organizeEvent\nend script\n```"
  },
  {
    "task": "Construct a parent class for an automotive part with methods for durability and replacement, then derive an engine part class that overrides these methods for performance.",
    "code": "```applescript\n-- Define the parent class for an automotive part\nscript AutomotivePart\n    property durability : \"Standard durability\"\n    property replacement : \"Standard replacement\"\n\n    on checkDurability()\n        return durability\n    end checkDurability\n\n    on replacePart()\n        return replacement\n    end replacePart\nend script\n\n-- Derive an engine part class that overrides the methods\nscript EnginePart\n    property parent : AutomotivePart\n    property durability : \"High performance durability\"\n    property replacement : \"Engine specific replacement\"\n\n    on checkDurability()\n        return durability\n    end checkDurability\n\n    on replacePart()\n        return replacement\n    end replacePart\nend script\n```"
  },
  {
    "task": "Set up a base class for an online tutorial with methods for lessons and quizzes, and extend it with a coding tutorial subclass that overrides these methods for interactive exercises.",
    "code": "```applescript\n-- Base class for an online tutorial\nscript OnlineTutorial\n    property lessonContent : \"Generic Lesson Content\"\n    property quizContent : \"Generic Quiz Content\"\n    \n    on showLesson()\n        return lessonContent\n    end showLesson\n    \n    on showQuiz()\n        return quizContent\n    end showQuiz\nend script\n\n-- Subclass for a coding tutorial\nscript CodingTutorial\n    property parent : OnlineTutorial\n    property lessonContent : \"Interactive Coding Lesson Content\"\n    property quizContent : \"Interactive Coding Quiz Content\"\n    \n    on showLesson()\n        return lessonContent\n    end showLesson\n    \n    on showQuiz()\n        return quizContent\n    end showQuiz\nend script\n\n-- Example usage\nset codingTutorial to CodingTutorial\ndisplay dialog (showLesson of codingTutorial)\ndisplay dialog (showQuiz of codingTutorial)\n```"
  },
  {
    "task": "Create a foundational class for a personal collection with properties like item type and value, and derive a stamp collection class that overrides the item type property to be 'stamps'.",
    "code": "```applescript\n-- Define the foundational class for a personal collection\nscript PersonalCollection\n    property itemType : \"generic item\"\n    property itemValue : 0\n\n    on initCollection(type, value)\n        set itemType to type\n        set itemValue to value\n    end initCollection\nend script\n\n-- Derive a stamp collection class from the personal collection class\nscript StampCollection\n    property parent : PersonalCollection\n    property itemType : \"stamps\"\n\n    on initStampCollection(value)\n        my initCollection(itemType, value)\n    end initStampCollection\nend script\n```"
  },
  {
    "task": "Design a base class for a video game character with methods for health and abilities, then create a warrior character subclass that overrides these methods for strength.",
    "code": "```applescript\n-- Base Class for Video Game Character\nscript Character\n    property health : 100\n    property abilities : {\"run\", \"jump\"}\n    \n    on getHealth()\n        return health\n    end getHealth\n    \n    on getAbilities()\n        return abilities\n    end getAbilities\nend script\n\n-- Subclass for Warrior Character\nscript Warrior\n    property parent : Character\n    property health : 150\n    property abilities : {\"run\", \"jump\", \"fight\"}\n    \n    on getHealth()\n        return health\n    end getHealth\n    \n    on getAbilities()\n        return abilities\n    end getAbilities\nend script\n\n-- Example usage\ntell Warrior\n    getHealth() -- returns 150\n    getAbilities() -- returns {\"run\", \"jump\", \"fight\"}\nend tell\n```"
  },
  {
    "task": "Develop a superclass for an event planner with methods for scheduling and budgeting, then extend it with a wedding planner subclass that overrides these methods for ceremony details.",
    "code": "```applescript\n-- Superclass for Event Planner\nscript EventPlanner\n    property scheduledDate : \"\"\n    property budget : 0\n\n    on scheduleEvent(date)\n        set scheduledDate to date\n        return \"Event scheduled on \" & date\n    end scheduleEvent\n\n    on setBudget(amount)\n        set budget to amount\n        return \"Budget set to \" & amount\n    end setBudget\nend script\n\n-- Subclass for Wedding Planner\nscript WeddingPlanner\n    property parent : EventPlanner\n    property ceremonyDetails : \"\"\n\n    on scheduleEvent(date)\n        set scheduledDate to date\n        return \"Wedding scheduled on \" & date & \" with ceremony details: \" & ceremonyDetails\n    end scheduleEvent\n\n    on setBudget(amount)\n        set budget to amount\n        return \"Wedding budget set to \" & amount & \" with ceremony details: \" & ceremonyDetails\n    end setBudget\n\n    on setCeremonyDetails(details)\n        set ceremonyDetails to details\n        return \"Ceremony details set to: \" & details\n    end setCeremonyDetails\nend script\n```"
  },
  {
    "task": "Implement a base class for a software feature with methods for functionality and user feedback, then create a beta feature subclass that overrides these methods for testing.",
    "code": "```applescript\n-- Base class\nscript Feature\n    property featureName : \"Base Feature\"\n\n    on functionality()\n        return \"Functionality of \" & featureName\n    end functionality\n\n    on userFeedback()\n        return \"User feedback for \" & featureName\n    end userFeedback\nend script\n\n-- Subclass\nscript BetaFeature\n    property parent : Feature\n    property featureName : \"Beta Feature\"\n\n    on functionality()\n        return \"Testing functionality of \" & featureName\n    end functionality\n\n    on userFeedback()\n        return \"Testing user feedback for \" & featureName\n    end userFeedback\nend script\n\n-- Example usage\nset baseFeature to Feature\ndisplay dialog (functionality of baseFeature)\ndisplay dialog (userFeedback of baseFeature)\n\nset betaFeature to BetaFeature\ndisplay dialog (functionality of betaFeature)\ndisplay dialog (userFeedback of betaFeature)\n```"
  },
  {
    "task": "Construct a parent class for a gardening tool with methods for usage and maintenance, then derive a lawn mower class that overrides these methods for grass cutting.",
    "code": "```applescript\nscript GardeningTool\n    property toolName : \"Generic Tool\"\n    \n    on usage()\n        return \"Using the \" & toolName\n    end usage\n    \n    on maintenance()\n        return \"Maintaining the \" & toolName\n    end maintenance\nend script\n\nscript LawnMower\n    property parent : GardeningTool\n    property toolName : \"Lawn Mower\"\n    \n    on usage()\n        return \"Using the \" & toolName & \" to cut grass\"\n    end usage\n    \n    on maintenance()\n        return \"Sharpening blades and checking the \" & toolName\n    end maintenance\nend script\n```"
  },
  {
    "task": "Set up a base class for a household chore with methods for time and effort, and extend it with a cleaning chore subclass that overrides these methods for dirt removal.",
    "code": "```applescript\n-- Base class for a household chore\nscript HouseholdChore\n    property parent : script\n    property time : \"\"\n    property effort : \"\"\n    \n    on getTime()\n        return time\n    end getTime\n    \n    on getEffort()\n        return effort\n    end getEffort\nend script\n\n-- Subclass for a cleaning chore\nscript CleaningChore\n    property parent : HouseholdChore\n    property dirtRemovalTime : \"30 minutes\"\n    property dirtRemovalEffort : \"High\"\n    \n    on getTime()\n        return dirtRemovalTime\n    end getTime\n    \n    on getEffort()\n        return dirtRemovalEffort\n    end getEffort\nend script\n```"
  },
  {
    "task": "Create a foundational class for a personal project with properties like name and deadline, and derive a coding project class that overrides the deadline property for milestones.",
    "code": "```applescript\n-- Define the foundational class\nscript PersonalProject\n    property name : \"\"\n    property deadline : \"\"\nend script\n\n-- Derive the coding project class\nscript CodingProject\n    property parentProject : PersonalProject\n    property milestonesDeadline : \"\"\n\n    on setDeadline(newDeadline)\n        set milestonesDeadline to newDeadline\n    end setDeadline\n    \n    on getName()\n        return name of parentProject\n    end getName\n    \n    on getDeadline()\n        return milestonesDeadline\n    end getDeadline\nend script\n\n-- Example Usage\nset parentProject to script PersonalProject\nset name of parentProject to \"My Project\"\nset deadline of parentProject to \"2023-12-31\"\n\nset myCodingProject to script CodingProject\nset parentProject of myCodingProject to parentProject\nmyCodingProject's setDeadline(\"2023-11-30\")\n\nmyCodingProject's getName() -- \"My Project\"\nmyCodingProject's getDeadline() -- \"2023-11-30\"\n```"
  },
  {
    "task": "Design a base class for a holiday celebration with methods for traditions and activities, then create a Christmas celebration subclass that overrides these methods for gift exchange.",
    "code": "```applescript\n-- Base class for a holiday celebration\nscript HolidayCelebration\n    property traditions : \"Generic traditions\"\n    property activities : \"Generic activities\"\n\n    on getTraditions()\n        return traditions\n    end getTraditions\n\n    on getActivities()\n        return activities\n    end getActivities\nend script\n\n-- Christmas celebration subclass\nscript ChristmasCelebration\n    property parent : HolidayCelebration\n    property traditions : \"Christmas traditions\"\n    property activities : \"Gift exchange and Christmas activities\"\n\n    on getTraditions()\n        return traditions\n    end getTraditions\n\n    on getActivities()\n        return activities\n    end getActivities\nend script\n```"
  },
  {
    "task": "Develop a superclass for a customer feedback system with methods for collecting and analyzing, then extend it with a product feedback subclass that overrides these methods for reviews.",
    "code": "```applescript\n-- Define the superclass for Customer Feedback\nscript CustomerFeedback\n    property feedbackList : {}\n\n    on collectFeedback(feedback)\n        set end of feedbackList to feedback\n    end collectFeedback\n\n    on analyzeFeedback()\n        return \"Analyzing generic customer feedback...\"\n    end analyzeFeedback\nend script\n\n-- Define the subclass for Product Feedback\nscript ProductFeedback\n    property parent : CustomerFeedback\n\n    -- Override the collectFeedback method\n    on collectFeedback(feedback)\n        set end of feedbackList to (\"Product Review: \" & feedback)\n    end collectFeedback\n\n    -- Override the analyzeFeedback method\n    on analyzeFeedback()\n        return \"Analyzing product-specific feedback...\"\n    end analyzeFeedback\nend script\n```"
  },
  {
    "task": "Implement a base class for a civic service with methods for public engagement and policy, then create a community service subclass that overrides these methods for local impact.",
    "code": "```applescript\n-- Base class for CivicService\nscript CivicService\n    property parent : class \"NSObject\"\n    \n    on publicEngagement()\n        return \"Engaging with the public through general events.\"\n    end publicEngagement\n    \n    on policy()\n        return \"Implementing broad policies.\"\n    end policy\nend script\n\n-- Subclass for CommunityService\nscript CommunityService\n    property parent : CivicService\n    \n    on publicEngagement()\n        return \"Engaging with the local community through neighborhood meetings.\"\n    end publicEngagement\n    \n    on policy()\n        return \"Implementing local impact policies tailored to community needs.\"\n    end policy\nend script\n\n-- Example usage\nset civicServiceInstance to CivicService's alloc()'s init()\nset communityServiceInstance to CommunityService's alloc()'s init()\n\n-- Access methods\ncivicServiceInstance's publicEngagement()\ncivicServiceInstance's policy()\n\ncommunityServiceInstance's publicEngagement()\ncommunityServiceInstance's policy()\n```"
  },
  {
    "task": "Construct a parent class for a culinary ingredient with methods for flavor and preparation, then derive a spice ingredient class that overrides these methods for seasoning.",
    "code": "```applescript\nscript CulinaryIngredient\n    property flavor : \"generic flavor\"\n    \n    on prepare()\n        return \"generic preparation\"\n    end prepare\nend script\n\nscript SpiceIngredient\n    property parent : CulinaryIngredient\n    property flavor : \"spicy flavor\"\n    \n    on prepare()\n        return \"seasoning preparation\"\n    end prepare\nend script\n```"
  },
  {
    "task": "Set up a base class for a scientific experiment with methods for hypothesis and testing, and extend it with a chemistry experiment subclass that overrides these methods for reactions.",
    "code": "```applescript\nscript ScientificExperiment\n    property hypothesis : \"Generic Hypothesis\"\n    \n    on test()\n        return \"Performing generic testing method.\"\n    end test\nend script\n\nscript ChemistryExperiment\n    property parent : ScientificExperiment\n    property hypothesis : \"Chemistry Hypothesis\"\n    \n    on test()\n        return \"Performing chemistry-specific reaction testing.\"\n    end test\nend script\n```"
  },
  {
    "task": "Create a foundational class for an inventory system with properties like item ID and quantity, and derive a warehouse inventory class that overrides the quantity property for bulk storage.",
    "code": "```applescript\n-- Define a class for the inventory system\nscript InventoryItem\n    property itemID : \"\"\n    property quantity : 0\nend script\n\n-- Define a subclass for the warehouse inventory\nscript WarehouseInventory\n    property parent : InventoryItem\n    property quantity : 0 -- Override for bulk storage\nend script\n\n-- Example usage\nset myItem to script InventoryItem\nset myItem's itemID to \"12345\"\nset myItem's quantity to 10\n\nset myWarehouseItem to script WarehouseInventory\nset myWarehouseItem's itemID to \"67890\"\nset myWarehouseItem's quantity to 1000\n```"
  },
  {
    "task": "Design a base class for a travel agency with methods for itinerary and bookings, then create a luxury travel subclass that overrides these methods for premium services.",
    "code": "```applescript\n-- Base class for Travel Agency\nscript TravelAgency\n    property itinerary : \"Standard Itinerary\"\n    property bookings : \"Standard Bookings\"\n    \n    on displayItinerary()\n        return itinerary\n    end displayItinerary\n    \n    on displayBookings()\n        return bookings\n    end displayBookings\nend script\n\n-- Subclass for Luxury Travel\nscript LuxuryTravel\n    script superclass : TravelAgency\n        property itinerary : \"Luxury Itinerary\"\n        property bookings : \"Luxury Bookings\"\n        \n        on displayItinerary()\n            return itinerary\n        end displayItinerary\n        \n        on displayBookings()\n            return bookings\n        end displayBookings\n    end script\nend script\n\n-- Example usage\nset standardTravel to TravelAgency\ndisplay dialog standardTravel's displayItinerary()\ndisplay dialog standardTravel's displayBookings()\n\nset luxuryTravel to LuxuryTravel\ndisplay dialog luxuryTravel's displayItinerary()\ndisplay dialog luxuryTravel's displayBookings()\n```"
  },
  {
    "task": "Develop a superclass for an educational tool with methods for teaching and assessment, then extend it with a math tool subclass that overrides these methods for problem-solving.",
    "code": "```applescript\n-- Superclass for Educational Tool\nscript EducationalTool\n    property |name| : \"\"\n    \n    on teach()\n        return \"Generic teaching method\"\n    end teach\n    \n    on assess()\n        return \"Generic assessment method\"\n    end assess\nend script\n\n-- Subclass for Math Tool\nscript MathTool\n    property parent : EducationalTool\n    property |name| : \"Math Tool\"\n    \n    on teach()\n        return \"Teaching math problem-solving\"\n    end teach\n    \n    on assess()\n        return \"Assessing math problem-solving skills\"\n    end assess\nend script\n```"
  },
  {
    "task": "Implement a base class for a community project with methods for planning and execution, then create a park renovation subclass that overrides these methods for landscaping.",
    "code": "```applescript\n-- Base class for community project\nscript CommunityProject\n    property projectName : \"Community Project\"\n    \n    on plan()\n        display dialog \"Planning the \" & projectName\n    end plan\n    \n    on execute()\n        display dialog \"Executing the \" & projectName\n    end execute\nend script\n\n-- Subclass for park renovation\nscript ParkRenovation\n    property parent : CommunityProject\n    property projectName : \"Park Renovation\"\n    \n    on plan()\n        display dialog \"Planning the \" & projectName & \" with a focus on landscaping\"\n    end plan\n    \n    on execute()\n        display dialog \"Executing the \" & projectName & \" with landscaping\"\n    end execute\nend script\n\n-- Example usage\ntell ParkRenovation\n    plan()\n    execute()\nend tell\n```"
  },
  {
    "task": "Construct a parent class for a digital marketing strategy with methods for targeting and engagement, then derive a social media strategy class that overrides these methods for platforms.",
    "code": "```applescript\n-- Define the parent class for a digital marketing strategy\nscript DigitalMarketingStrategy\n    property targetAudience : \"\"\n    \n    on targeting()\n        return \"Generic targeting strategy for \" & targetAudience\n    end targeting\n    \n    on engagement()\n        return \"Generic engagement strategy\"\n    end engagement\nend script\n\n-- Define the derived class for a social media strategy\nscript SocialMediaStrategy\n    property parent : DigitalMarketingStrategy\n    property platform : \"\"\n    \n    on targeting()\n        return \"Social media targeting strategy for \" & targetAudience & \" on \" & platform\n    end targeting\n    \n    on engagement()\n        return \"Social media engagement strategy on \" & platform\n    end engagement\nend script\n```"
  },
  {
    "task": "Set up a base class for a scientific publication with methods for research and review, and extend it with a journal article subclass that overrides these methods for peer review.",
    "code": "```applescript\nscript ScientificPublication\n    property publicationName : \"\"\n    \n    on research()\n        return \"Conducting general research for \" & publicationName\n    end research\n    \n    on review()\n        return \"Reviewing general publication \" & publicationName\n    end review\nend script\n\nscript JournalArticle\n    property parent : ScientificPublication\n    property journalName : \"\"\n    \n    on research()\n        return \"Conducting specific research for journal article in \" & journalName\n    end research\n    \n    on review()\n        return \"Peer reviewing journal article in \" & journalName\n    end review\nend script\n```"
  },
  {
    "task": "Create a foundational class for a software module with properties like name and dependencies, and derive a user interface module class that overrides the dependencies property for UI libraries.",
    "code": "```applescript\n-- Define the foundational class\nscript Module\n    property name : \"\"\n    property dependencies : {}\n    \n    on init(theName, theDependencies)\n        set name to theName\n        set dependencies to theDependencies\n    end init\nend script\n\n-- Define the user interface module class inheriting from Module\nscript UIModule\n    property parent : Module\n    property dependencies : {\"UIKit\", \"AppKit\"} -- Overriding dependencies property\n    \n    on init(theName)\n        tell parent to init(theName, dependencies)\n    end init\nend script\n\n-- Example of creating a new UI module\nset myUIModule to UIModule's init(\"My UI Module\")\n```"
  },
  {
    "task": "Design a base class for a fashion line with methods for design and production, then create a summer collection subclass that overrides these methods for seasonal trends.",
    "code": "```applescript\n-- Base class for Fashion Line\nscript FashionLine\n    property name : \"\"\n    \n    on design()\n        return \"Designing general fashion line\"\n    end design\n    \n    on production()\n        return \"Producing general fashion line\"\n    end production\nend script\n\n-- Subclass for Summer Collection\nscript SummerCollection\n    script instance\n        property parent : FashionLine\n    end script\n    \n    on design()\n        return \"Designing summer collection with seasonal trends\"\n    end design\n    \n    on production()\n        return \"Producing summer collection with seasonal trends\"\n    end production\nend script\n\n-- Example usage\nset summerLine to SummerCollection's instance\nsummerLine's design()\nsummerLine's production()\n```"
  },
  {
    "task": "Develop a superclass for a family tree with methods for ancestry and descendants, then extend it with a royal lineage subclass that overrides these methods for historical accuracy.",
    "code": "```applescript\n-- Superclass for a family tree\nscript FamilyTree\n    -- Properties\n    property name : \"\"\n    property children : {}\n    property parents : {}\n\n    -- Methods\n    on ancestry()\n        return parents\n    end ancestry\n\n    on descendants()\n        return children\n    end descendants\nend script\n\n-- Subclass for a royal lineage\nscript RoyalLineage\n    -- Inheritance from FamilyTree\n    property parent : FamilyTree\n\n    -- Override ancestry method for historical accuracy\n    on ancestry()\n        -- Custom implementation for royal lineage\n        set royalAncestors to {\"King Henry VIII\", \"Queen Elizabeth I\", \"Queen Victoria\"}\n        return royalAncestors\n    end ancestry\n\n    -- Override descendants method for historical accuracy\n    on descendants()\n        -- Custom implementation for royal lineage\n        set royalDescendants to {\"Prince William\", \"Prince George\", \"Princess Charlotte\"}\n        return royalDescendants\n    end descendants\nend script\n```"
  },
  {
    "task": "Implement a base class for a musical score with methods for composition and arrangement, then create a symphony subclass that overrides these methods for orchestration.",
    "code": "```applescript\nscript MusicalScore\n    property scoreName : \"Untitled Score\"\n    \n    on compose()\n        return \"Composing the musical score...\"\n    end compose\n    \n    on arrange()\n        return \"Arranging the musical score...\"\n    end arrange\nend script\n\nscript Symphony\n    property parent : MusicalScore\n    property symphonyName : \"Untitled Symphony\"\n    \n    on compose()\n        return \"Composing the symphony with complex orchestration...\"\n    end compose\n    \n    on arrange()\n        return \"Arranging the symphony with orchestration details...\"\n    end arrange\nend script\n```"
  },
  {
    "task": "Construct a parent class for a historical record with methods for events and dates, then derive a war history class that overrides these methods for battles.",
    "code": "```applescript\n-- Define the parent class for a historical record\nscript HistoricalRecord\n    property eventDescription : \"Generic Event\"\n    property eventDate : \"Unknown Date\"\n\n    on getEventDescription()\n        return eventDescription\n    end getEventDescription\n\n    on getEventDate()\n        return eventDate\n    end getEventDate\nend script\n\n-- Derive the war history class that overrides methods for battles\nscript WarHistory\n    property parent : HistoricalRecord\n    property battleDescription : \"Generic Battle\"\n    property battleDate : \"Unknown Battle Date\"\n\n    on getEventDescription()\n        return battleDescription\n    end getEventDescription\n\n    on getEventDate()\n        return battleDate\n    end getEventDate\nend script\n```"
  },
  {
    "task": "Set up a base class for a pet adoption service with methods for application and approval, and extend it with a dog adoption subclass that overrides these methods for breed compatibility.",
    "code": "```applescript\n-- Base class for Pet Adoption Service\nscript PetAdoptionService\n    property parent : script\n    property applicationAccepted : false\n    \n    on applyForAdoption(petName)\n        log \"Application submitted for: \" & petName\n        set applicationAccepted to true\n    end applyForAdoption\n    \n    on approveAdoption()\n        if applicationAccepted then\n            log \"Adoption approved.\"\n        else\n            log \"Application not accepted yet.\"\n        end if\n    end approveAdoption\nend script\n\n-- Subclass for Dog Adoption\nscript DogAdoptionService\n    property parent : PetAdoptionService\n    property breedCompatible : false\n    \n    on applyForAdoption(petName)\n        set breedCompatible to (petName contains \"Dog\")\n        if breedCompatible then\n            log \"Application submitted for: \" & petName & \" - Breed compatible.\"\n            set applicationAccepted to true\n        else\n            log \"Application submitted for: \" & petName & \" - Breed not compatible.\"\n            set applicationAccepted to false\n        end if\n    end applyForAdoption\n    \n    on approveAdoption()\n        if applicationAccepted and breedCompatible then\n            log \"Dog adoption approved.\"\n        else\n            log \"Dog adoption not approved.\"\n        end if\n    end approveAdoption\nend script\n```"
  },
  {
    "task": "Create a foundational class for a financial report with properties like fiscal year and summary, and derive an annual report class that overrides the fiscal year property for yearly data.",
    "code": "```applescript\n-- Define the foundational class for a financial report\nscript FinancialReport\n    property fiscalYear : \"\"\n    property summary : \"\"\n\n    -- Method to initialize the financial report\n    on initFiscalReport(fYear, sum)\n        set fiscalYear to fYear\n        set summary to sum\n    end initFiscalReport\nend script\n\n-- Define the derived class for an annual report\nscript AnnualReport\n    property parent : FinancialReport\n    property fiscalYear : \"\" -- Override the fiscal year property\n\n    -- Method to initialize the annual report\n    on initAnnualReport(fYear, sum)\n        set fiscalYear to fYear\n        set summary to sum\n    end initAnnualReport\nend script\n```"
  },
  {
    "task": "Design a base class for a movie franchise with methods for casting and production, then create a sequel subclass that overrides these methods for continuity.",
    "code": "```applescript\n-- Base class for a movie franchise\nscript MovieFranchise\n    property franchiseName : \"\"\n    \n    on setFranchiseName(name)\n        set franchiseName to name\n    end setFranchiseName\n    \n    on casting()\n        return \"Default casting process for \" & franchiseName\n    end casting\n    \n    on production()\n        return \"Default production process for \" & franchiseName\n    end production\nend script\n\n-- Sequel subclass that overrides methods\nscript Sequel\n    property parent : MovieFranchise\n    property sequelNumber : 0\n    \n    on setSequelNumber(number)\n        set sequelNumber to number\n    end setSequelNumber\n    \n    on casting()\n        return \"Casting process for \" & franchiseName & \" sequel \" & sequelNumber\n    end casting\n    \n    on production()\n        return \"Production process for \" & franchiseName & \" sequel \" & sequelNumber\n    end production\nend script\n```"
  },
  {
    "task": "Develop a superclass for a real estate listing with methods for pricing and description, then extend it with a luxury listing subclass that overrides these methods for high-end features.",
    "code": "```applescript\n-- Superclass for Real Estate Listing\nscript RealEstateListing\n    property price : 0\n    property description : \"Generic listing\"\n\n    on getPrice()\n        return price\n    end getPrice\n\n    on getDescription()\n        return description\n    end getDescription\nend script\n\n-- Subclass for Luxury Listing\nscript LuxuryListing\n    property parent : RealEstateListing\n    property price : 1000000\n    property description : \"Luxury listing\"\n\n    on getPrice()\n        return price & \" (Luxury)\"\n    end getPrice\n\n    on getDescription()\n        return description & \" with high-end features\"\n    end getDescription\nend script\n```"
  },
  {
    "task": "Implement a base class for a mobile app with methods for user interface and performance, then create a gaming app subclass that overrides these methods for graphics and speed.",
    "code": "```applescript\n-- Base class for a mobile app\nscript MobileApp\n    property appName : \"Mobile App Base\"\n\n    on userInterface()\n        return \"Standard UI\"\n    end userInterface\n\n    on performance()\n        return \"Standard Performance\"\n    end performance\nend script\n\n-- Subclass for a gaming app\nscript GamingApp\n    property parent : MobileApp\n    property appName : \"Gaming App\"\n\n    on userInterface()\n        return \"High-Resolution Graphics UI\"\n    end userInterface\n\n    on performance()\n        return \"Optimized Speed Performance\"\n    end performance\nend script\n\n-- Example usage:\nset baseApp to MobileApp\nset gameApp to GamingApp\n\ndisplay dialog (appName of baseApp & \": \" & userInterface of baseApp & \", \" & performance of baseApp)\ndisplay dialog (appName of gameApp & \": \" & userInterface of gameApp & \", \" & performance of gameApp)\n```"
  },
  {
    "task": "Construct a parent class for a corporate policy with methods for compliance and enforcement, then derive an HR policy class that overrides these methods for employee relations.",
    "code": "```applescript\n-- Define the parent class CorporatePolicy\nscript CorporatePolicy\n    property policyName : \"Corporate Policy\"\n    \n    on compliance()\n        return \"General compliance guidelines\"\n    end compliance\n    \n    on enforcement()\n        return \"General enforcement actions\"\n    end enforcement\nend script\n\n-- Define the HRPolicy class inheriting from CorporatePolicy\nscript HRPolicy\n    property parent : CorporatePolicy\n    property policyName : \"HR Policy\"\n    \n    on compliance()\n        return \"Employee compliance guidelines\"\n    end compliance\n    \n    on enforcement()\n        return \"Employee enforcement actions\"\n    end enforcement\nend script\n```"
  },
  {
    "task": "Set up a base class for a scientific calculator with methods for basic operations and advanced functions, and extend it with a graphing calculator subclass that overrides these methods for plotting.",
    "code": "```applescript\n-- Base class for Scientific Calculator\nscript ScientificCalculator\n    property baseValue : 0\n\n    on add(x, y)\n        return x + y\n    end add\n\n    on subtract(x, y)\n        return x - y\n    end subtract\n\n    on multiply(x, y)\n        return x * y\n    end multiply\n\n    on divide(x, y)\n        if y is not 0 then\n            return x / y\n        else\n            return \"Division by zero error\"\n        end if\n    end divide\n\n    on power(x, y)\n        return x ^ y\n    end power\n\n    on sqrt(x)\n        return x ^ 0.5\n    end sqrt\n\nend script\n\n-- Subclass for Graphing Calculator\nscript GraphingCalculator\n    script GraphingCalculator inherits the properties and methods of ScientificCalculator\n\n    on plotAdd(x, y)\n        add(x, y)\n        return \"Plotting result of addition: \" & (x + y)\n    end plotAdd\n\n    on plotSubtract(x, y)\n        subtract(x, y)\n        return \"Plotting result of subtraction: \" & (x - y)\n    end plotSubtract\n\n    on plotMultiply(x, y)\n        multiply(x, y)\n        return \"Plotting result of multiplication: \" & (x * y)\n    end plotMultiply\n\n    on plotDivide(x, y)\n        if y is not 0 then\n            divide(x, y)\n            return \"Plotting result of division: \" & (x / y)\n        else\n            return \"Division by zero error\"\n        end if\n    end plotDivide\n\n    on plotPower(x, y)\n        power(x, y)\n        return \"Plotting result of power: \" & (x ^ y)\n    end plotPower\n\n    on plotSqrt(x)\n        sqrt(x)\n        return \"Plotting result of square root: \" & (x ^ 0.5)\n    end plotSqrt\n\nend script\n```"
  },
  {
    "task": "Create a foundational class for a children's book with properties like age group and illustrations, and derive a picture book class that overrides the illustrations property to be more prominent.",
    "code": "```applescript\n-- Base class for Children's Book\nscript Children'sBook\n    property ageGroup : \"\"\n    property illustrations : false\n    \n    on getDetails()\n        return \"Age Group: \" & ageGroup & \", Illustrations: \" & illustrations\n    end getDetails\nend script\n\n-- Derived class for Picture Book\nscript PictureBook\n    script Children'sBook -- Inherit from Children'sBook\n        property illustrations : true\n    end script\n    \n    on getDetails()\n        return \"Age Group: \" & ageGroup & \", Illustrations: Prominent\"\n    end getDetails\nend script\n\n-- Example usage\nset myPictureBook to PictureBook's script\nset myPictureBook's ageGroup to \"3-5 years\"\ndisplay dialog myPictureBook's getDetails()\n```"
  },
  {
    "task": "Design a base class for a cooking class with methods for ingredients and techniques, then create a baking class subclass that overrides these methods for dough preparation.",
    "code": "```applescript\nscript CookingClass\n    property ingredientsList : {}\n    property techniquesList : {}\n    \n    on ingredients()\n        return ingredientsList\n    end ingredients\n    \n    on techniques()\n        return techniquesList\n    end techniques\nend script\n\nscript BakingClass\n    property parent : CookingClass\n    property ingredientsList : {\"flour\", \"water\", \"yeast\", \"salt\"}\n    property techniquesList : {\"kneading\", \"proofing\", \"baking\"}\n    \n    on ingredients()\n        return ingredientsList\n    end ingredients\n    \n    on techniques()\n        return techniquesList\n    end techniques\nend script\n```"
  },
  {
    "task": "Develop a superclass for a public transportation system with methods for routes and schedules, then extend it with a metro system subclass that overrides these methods for urban areas.",
    "code": "```applescript\n-- Define the superclass for public transportation\nscript PublicTransportation\n    property parent : script\n\n    on routes()\n        return \"Generic routes for public transportation\"\n    end routes\n\n    on schedules()\n        return \"Generic schedules for public transportation\"\n    end schedules\nend script\n\n-- Define the subclass for metro system\nscript MetroSystem\n    property parent : PublicTransportation\n\n    on routes()\n        return \"Specific metro routes for urban areas\"\n    end routes\n\n    on schedules()\n        return \"Specific metro schedules for urban areas\"\n    end schedules\nend script\n```"
  },
  {
    "task": "Implement a base class for a music store inventory with methods for stock and sales, then create a vinyl record subclass that overrides these methods for collectible items.",
    "code": "```applescript\n-- Base class for a music store inventory\nscript MusicStoreInventory\n    property stock : 0\n    property sales : 0\n    \n    on getStock()\n        return stock\n    end getStock\n    \n    on getSales()\n        return sales\n    end getSales\n    \n    on updateStock(quantity)\n        set stock to stock + quantity\n    end updateStock\n    \n    on updateSales(quantity)\n        set sales to sales + quantity\n    end updateSales\nend script\n\n-- Vinyl record subclass\nscript VinylRecord\n    script inherits MusicStoreInventory\n        \n        on updateStock(quantity)\n            if quantity > 0 then\n                set stock to stock + quantity\n                display dialog \"Added \" & quantity & \" collectible vinyl records to stock.\"\n            else\n                display dialog \"Cannot add negative stock.\"\n            end if\n        end updateStock\n        \n        on updateSales(quantity)\n            if quantity > 0 and quantity \u2264 stock then\n                set sales to sales + quantity\n                set stock to stock - quantity\n                display dialog \"Sold \" & quantity & \" collectible vinyl records.\"\n            else\n                display dialog \"Insufficient stock to sell.\"\n            end if\n        end updateSales\n    end script\nend script\n```"
  },
  {
    "task": "Construct a parent class for a legal contract with methods for terms and conditions, then derive a rental agreement class that overrides these methods for tenant rights.",
    "code": "```applescript\n-- Define the parent class for a legal contract\nscript LegalContract\n    property termsAndConditions : \"Default terms and conditions for legal contracts.\"\n\n    on getTermsAndConditions()\n        return termsAndConditions\n    end getTermsAndConditions\nend script\n\n-- Define the derived class for a rental agreement\nscript RentalAgreement\n    -- Inherit from LegalContract\n    property parent : LegalContract\n    property termsAndConditions : \"Terms and conditions specific to rental agreements, including tenant rights.\"\n\n    on getTermsAndConditions()\n        return termsAndConditions\n    end getTermsAndConditions\nend script\n\n-- Example usage\ntell LegalContract\n    display dialog getTermsAndConditions()\nend tell\n\ntell RentalAgreement\n    display dialog getTermsAndConditions()\nend tell\n```"
  },
  {
    "task": "Set up a base class for a journalism piece with methods for reporting and editing, and extend it with an investigative article subclass that overrides these methods for in-depth analysis.",
    "code": "```applescript\n-- Base class for journalism piece\nscript JournalismPiece\n    property title : \"\"\n    property content : \"\"\n\n    on report()\n        return \"Reporting: \" & content\n    end report\n\n    on edit()\n        return \"Editing: \" & content\n    end edit\nend script\n\n-- Subclass for investigative article\nscript InvestigativeArticle\n    property parent : JournalismPiece\n    property title : \"\"\n    property content : \"\"\n\n    on report()\n        return \"In-depth Reporting: \" & content\n    end report\n\n    on edit()\n        return \"In-depth Editing: \" & content\n    end edit\nend script\n```"
  },
  {
    "task": "Create a foundational class for a wildlife reserve with properties like area and species, and derive a bird sanctuary class that overrides the species property for avians.",
    "code": "```applescript\n-- Define the foundational class for a wildlife reserve\nscript WildlifeReserve\n    property |area| : missing value\n    property species : missing value\nend script\n\n-- Define a derived class for a bird sanctuary\nscript BirdSanctuary\n    property parent : WildlifeReserve\n    property species : \"avians\"\nend script\n```"
  },
  {
    "task": "Design a base class for a subscription box service with methods for curation and delivery, then create a gourmet food box subclass that overrides these methods for artisanal products.",
    "code": "```applescript\nscript SubscriptionBox\n    property boxName : \"Generic Box\"\n    \n    on curate()\n        return \"Curating items for \" & boxName\n    end curate\n    \n    on deliver()\n        return \"Delivering \" & boxName\n    end deliver\nend script\n\nscript GourmetFoodBox\n    property parent : SubscriptionBox\n    property boxName : \"Gourmet Food Box\"\n    \n    on curate()\n        return \"Curating artisanal products for \" & boxName\n    end curate\n    \n    on deliver()\n        return \"Delivering \" & boxName & \" with artisanal care\"\n    end deliver\nend script\n```"
  },
  {
    "task": "Develop a superclass for a fitness app with methods for tracking and motivation, then extend it with a running app subclass that overrides these methods for pace and distance.",
    "code": "```applescript\n-- Superclass for a fitness app\nscript FitnessApp\n\tproperty parent : class \"NSObject\"\n\t\n\ton track()\n\t\tdisplay dialog \"Tracking fitness activity...\"\n\tend track\n\t\n\ton motivate()\n\t\tdisplay dialog \"Stay motivated and keep going!\"\n\tend motivate\nend script\n\n-- Subclass for a running app\nscript RunningApp\n\tproperty parent : FitnessApp\n\t\n\ton track()\n\t\tdisplay dialog \"Tracking running activity: pace and distance.\"\n\tend track\n\t\n\ton motivate()\n\t\tdisplay dialog \"Push your limits and improve your pace!\"\n\tend motivate\nend script\n\n-- Example usage\nset myFitnessApp to FitnessApp's alloc()'s init()\nmyFitnessApp's track()\nmyFitnessApp's motivate()\n\nset myRunningApp to RunningApp's alloc()'s init()\nmyRunningApp's track()\nmyRunningApp's motivate()\n```"
  },
  {
    "task": "Implement a base class for a digital portfolio with methods for showcasing and updating, then create an artist portfolio subclass that overrides these methods for galleries.",
    "code": "```applescript\n-- Base class for digital portfolio\nscript Portfolio\n    property name : \"\"\n    \n    on showcase()\n        return \"Showcasing generic portfolio for \" & name\n    end showcase\n    \n    on update()\n        return \"Updating portfolio for \" & name\n    end update\nend script\n\n-- Subclass for artist portfolio\nscript ArtistPortfolio\n    property parent : Portfolio()\n    property artistName : \"\"\n    \n    on showcase()\n        return \"Showcasing art gallery for \" & artistName\n    end showcase\n    \n    on update()\n        return \"Updating art gallery for \" & artistName\n    end update\nend script\n\n-- Example usage\nset basePortfolio to Portfolio's script\nset basePortfolio's name to \"Generic User\"\nset artistPortfolio to ArtistPortfolio's script\nset artistPortfolio's artistName to \"Artist Name\"\n\nreturn basePortfolio's showcase()\nreturn artistPortfolio's showcase()\n```"
  },
  {
    "task": "Construct a parent class for a gaming console with methods for performance and compatibility, then derive a next-gen console class that overrides these methods for new features.",
    "code": "```applescript\n-- Define the parent class for a gaming console\nscript GamingConsole\n    property performance : \"Standard Performance\"\n    property compatibility : \"Standard Compatibility\"\n\n    on getPerformance()\n        return performance\n    end getPerformance\n\n    on getCompatibility()\n        return compatibility\n    end getCompatibility\nend script\n\n-- Define the derived class for the next-gen console\nscript NextGenConsole\n    property parent : GamingConsole\n    property performance : \"High Performance\"\n    property compatibility : \"Advanced Compatibility\"\n\n    on getPerformance()\n        return performance\n    end getPerformance\n\n    on getCompatibility()\n        return compatibility\n    end getCompatibility\nend script\n\n-- Example usage\nset oldConsole to GamingConsole\nset newConsole to NextGenConsole\n\ndisplay dialog \"Old Console Performance: \" & oldConsole's getPerformance()\ndisplay dialog \"Old Console Compatibility: \" & oldConsole's getCompatibility()\n\ndisplay dialog \"Next-Gen Console Performance: \" & newConsole's getPerformance()\ndisplay dialog \"Next-Gen Console Compatibility: \" & newConsole's getCompatibility()\n```"
  },
  {
    "task": "Set up a base class for a cultural festival with methods for events and participation, and extend it with a music festival subclass that overrides these methods for performances.",
    "code": "```applescript\n-- Base class for Cultural Festival\nscript CulturalFestival\n    property events : {\"Opening Ceremony\", \"Art Exhibition\", \"Food Fair\"}\n    property participants : {\"John Doe\", \"Jane Smith\", \"Alice Johnson\"}\n\n    on listEvents()\n        return events\n    end listEvents\n\n    on listParticipants()\n        return participants\n    end listParticipants\nend script\n\n-- Subclass for Music Festival\nscript MusicFestival\n    property parent : CulturalFestival\n    property events : {\"Concert\", \"Band Competition\", \"DJ Night\"}\n    property participants : {\"Bob Marley\", \"Freddie Mercury\", \"Elvis Presley\"}\n\n    on listEvents()\n        return events\n    end listEvents\n\n    on listParticipants()\n        return participants\n    end listParticipants\nend script\n```"
  }
]