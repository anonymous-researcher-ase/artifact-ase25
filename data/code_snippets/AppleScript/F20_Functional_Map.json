[
  {
    "task": "Convert a list of temperatures from Celsius to Fahrenheit using a map function.",
    "code": "```applescript\nset celsiusTemps to {0, 20, 30, 100}\n\non convertToFahrenheit(cTemp)\n    return cTemp * 1.8 + 32\nend convertToFahrenheit\n\nset fahrenheitTemps to map(convertToFahrenheit, celsiusTemps)\n\non map(fn, lst)\n    set newList to {}\n    repeat with i from 1 to count of lst\n        set end of newList to fn(item i of lst)\n    end repeat\n    return newList\nend map\n```"
  },
  {
    "task": "Use map to convert a list of lowercase words to uppercase.",
    "code": "```applescript\nset wordList to {\"hello\", \"world\", \"applescript\"}\nset upperList to my mapList(wordList, my toUpper)\n\non mapList(theList, theFunction)\n\tscript\n\t\tproperty functionRef : theFunction\n\t\ton mapEach(anItem)\n\t\t\tfunctionRef's performSelector_onThread_withObject_waitUntilDone_(\"invoke\", current application's NSThread's mainThread(), anItem, true)\n\t\tend mapEach\n\tend script\n\treturn mapList(theList, result)\nend mapList\n\non toUpper(word)\n\treturn word's uppercaseString()\nend toUpper\n```"
  },
  {
    "task": "Apply map to add a prefix to each string in a list of filenames.",
    "code": "```applescript\nset filenames to {\"file1.txt\", \"file2.txt\", \"file3.txt\"}\nset prefix to \"prefix_\"\n\nset prefixedFilenames to my map(filenames, prefix)\n\non map(filenames, prefix)\n\tset newFilenames to {}\n\trepeat with filename in filenames\n\t\tset end of newFilenames to prefix & filename\n\tend repeat\n\treturn newFilenames\nend map\n```"
  },
  {
    "task": "Transform a list of numbers by squaring each element with a map function.",
    "code": "```applescript\nset numberList to {1, 2, 3, 4, 5}\n\non squareNumber(x)\n    return x * x\nend squareNumber\n\nset squaredList to {}\nrepeat with num in numberList\n    set end of squaredList to squareNumber(num)\nend repeat\n\nsquaredList\n```"
  },
  {
    "task": "Convert a list of integers to their string representations using map.",
    "code": "```applescript\nset integerList to {1, 2, 3, 4, 5}\nset stringList to my mapIntegerToString(integerList)\n\non mapIntegerToString(intList)\n\tscript\n\t\ton mapFunc(x)\n\t\t\treturn x as string\n\t\tend mapFunc\n\tend script\n\treturn (intList's map(mapFunc))\nend mapIntegerToString\n```"
  },
  {
    "task": "Use map to compute the length of each string in a list of sentences.",
    "code": "```applescript\nset sentences to {\"The quick brown fox\", \"jumps over\", \"the lazy dog\"}\nset lengths to my mapList(sentences, my getLength)\n\non mapList(lst, func)\n\tset newList to {}\n\trepeat with item in lst\n\t\tset end of newList to func's (contents of item)\n\tend repeat\n\treturn newList\nend mapList\n\non getLength(sentence)\n\treturn (count words of sentence)\nend getLength\n```"
  },
  {
    "task": "Apply a discount to a list of prices using a map function.",
    "code": "```applescript\nset prices to {100, 200, 300, 400, 500}\nset discountRate to 0.1\n\nset discountedPrices to my map(prices, discountRate)\n\non map(priceList, rate)\n\tset result to {}\n\trepeat with price in priceList\n\t\tset end of result to price - (price * rate)\n\tend repeat\n\treturn result\nend map\n```"
  },
  {
    "task": "Extract the first element from each tuple in a list of tuples with map.",
    "code": "```applescript\nset tupleList to {{\"a\", 1}, {\"b\", 2}, {\"c\", 3}}\nset firstElements to my mapFirstElements(tupleList)\n\non mapFirstElements(lst)\n\tscript\n\t\ton |\u03bb|(x)\n\t\t\treturn item 1 of x\n\t\tend |\u03bb|\n\tend script\n\treturn map(result, lst)\nend mapFirstElements\n```"
  },
  {
    "task": "Use map to round a list of floating-point numbers to two decimal places.",
    "code": "```applescript\nset floatList to {3.14159, 2.71828, 1.61803, 0.57721, 1.41421}\nset roundedList to {}\nrepeat with num in floatList\n    set end of roundedList to round (num * 100) / 100\nend repeat\nreturn roundedList\n```"
  },
  {
    "task": "Capitalize the first letter of each word in a list of names using map.",
    "code": "```applescript\nset namesList to {\"john doe\", \"jane smith\", \"alice johnson\"}\n\non capitalizeFirstLetter(theString)\n\tset theWords to words of theString\n\tset capitalizedWords to {}\n\trepeat with aWord in theWords\n\t\tset end of capitalizedWords to (do shell script \"echo \" & quoted form of aWord & \" | awk '{print toupper(substr($0,1,1)) tolower(substr($0,2))}'\")\n\tend repeat\n\treturn my joinList(capitalizedWords, \" \")\nend capitalizeFirstLetter\n\non joinList(theList, theDelimiter)\n\tset {oldTIDs, AppleScript's text item delimiters} to {AppleScript's text item delimiters, theDelimiter}\n\tset theJoined to theList as text\n\tset AppleScript's text item delimiters to oldTIDs\n\treturn theJoined\nend joinList\n\nset capitalizedNamesList to {}\nrepeat with aName in namesList\n\tset end of capitalizedNamesList to my capitalizeFirstLetter(aName)\nend repeat\n\nreturn capitalizedNamesList\n```"
  },
  {
    "task": "Convert a list of JSON strings to corresponding dictionary objects with map.",
    "code": "```applescript\nuse framework \"Foundation\"\n\nset jsonStringList to {\"{\\\"name\\\": \\\"John\\\", \\\"age\\\": 30}\", \"{\\\"name\\\": \\\"Jane\\\", \\\"age\\\": 25}\"}\n\nset jsonDataList to current application's NSArray's arrayWithArray:jsonStringList\nset jsonObjects to jsonDataList's valueForKeyPath:\"@unionOfObjects.dataUsingEncoding:NSUTF8StringEncoding\"\nset dictionaries to jsonObjects's valueForKeyPath:\"@unionOfObjects.JSONDictionary\"\n\ndictionaries\n```"
  },
  {
    "task": "Use map to double the value of each number in a list.",
    "code": "```applescript\nset numberList to {1, 2, 3, 4, 5}\n\nset doubledList to my map(numberList, my doubleValue)\n\non map(aList, aFunction)\n\tset newList to {}\n\trepeat with anItem in aList\n\t\tset end of newList to aFunction's (anItem as integer)\n\tend repeat\n\treturn newList\nend map\n\non doubleValue(x)\n\treturn x * 2\nend doubleValue\n\ndoubledList\n```"
  },
  {
    "task": "Transform a list of RGB tuples to hexadecimal color codes using map.",
    "code": "```applescript\nset rgbList to {{255, 0, 0}, {0, 255, 0}, {0, 0, 255}, {255, 255, 255}, {0, 0, 0}}\n\non rgbToHex(rgb)\n\tset {r, g, b} to rgb\n\tset hexString to \"#\" & my intToHex(r) & my intToHex(g) & my intToHex(b)\n\treturn hexString\nend rgbToHex\n\non intToHex(num)\n\tset hexDigits to \"0123456789ABCDEF\"\n\tset firstDigit to (num div 16) + 1\n\tset secondDigit to (num mod 16) + 1\n\tset hex to (text firstDigit thru firstDigit of hexDigits) & (text secondDigit thru secondDigit of hexDigits)\n\treturn hex\nend intToHex\n\nset hexList to map(rgbToHex, rgbList)\n\non map(func, lst)\n\tset newList to {}\n\trepeat with item in lst\n\t\tset end of newList to func's (item as list)\n\tend repeat\n\treturn newList\nend map\n```"
  },
  {
    "task": "Use map to compute the factorial of each number in a list.",
    "code": "```applescript\nset numberList to {1, 2, 3, 4, 5}\n\non factorial(n)\n    if n is 0 then\n        return 1\n    else\n        return n * factorial(n - 1)\n    end if\nend factorial\n\nset factorialList to map(factorial, numberList)\n\non map(fn, lst)\n    set result to {}\n    repeat with i from 1 to count of lst\n        set end of result to fn(item i of lst)\n    end repeat\n    return result\nend map\n```"
  },
  {
    "task": "Translate a list of English words to Spanish using a map function.",
    "code": "```applescript\nset englishWords to {\"hello\", \"world\", \"apple\", \"script\", \"function\"}\n\non translateToSpanish(word)\n    if word is \"hello\" then\n        return \"hola\"\n    else if word is \"world\" then\n        return \"mundo\"\n    else if word is \"apple\" then\n        return \"manzana\"\n    else if word is \"script\" then\n        return \"guion\"\n    else if word is \"function\" then\n        return \"funci\u00f3n\"\n    else\n        return word\n    end if\nend translateToSpanish\n\nset spanishWords to my map(englishWords, \"translateToSpanish\")\n\non map(aList, aFunction)\n    set newList to {}\n    repeat with anItem in aList\n        set end of newList to my call method aFunction with parameters {contents of anItem}\n    end repeat\n    return newList\nend map\n\nspanishWords\n```"
  },
  {
    "task": "Apply a map function to format a list of dates from one format to another.",
    "code": "```applescript\nset dateList to {\"2023-10-24\", \"2023-11-05\", \"2023-12-15\"}\nset formattedDateList to my formatDateList(dateList)\n\non formatDateList(dates)\n\tset formattedDates to {}\n\trepeat with dateString in dates\n\t\tset end of formattedDates to my formatDate(dateString)\n\tend repeat\n\treturn formattedDates\nend formatDateList\n\non formatDate(dateString)\n\tset {year, month, day} to words of (dateString as string)\n\treturn month & \"/\" & day & \"/\" & year\nend formatDate\n```"
  },
  {
    "task": "Use map to check if each number in a list is even, returning a list of booleans.",
    "code": "```applescript\nset numberList to {1, 2, 3, 4, 5, 6}\nset evenCheckList to my mapIsEven(numberList)\n\non mapIsEven(aList)\n\tset booleanList to {}\n\trepeat with anItem in aList\n\t\tset end of booleanList to ((anItem mod 2) = 0)\n\tend repeat\n\treturn booleanList\nend mapIsEven\n```"
  },
  {
    "task": "Convert a list of binary strings to decimal numbers using map.",
    "code": "```applescript\nset binaryList to {\"101\", \"1111\", \"10000\", \"11001\"}\n\non binaryToDecimal(binStr)\n\tset decimalValue to 0\n\tset lengthOfStr to length of binStr\n\trepeat with i from 1 to lengthOfStr\n\t\tset bit to character i of binStr\n\t\tset decimalValue to decimalValue * 2\n\t\tif bit is \"1\" then\n\t\t\tset decimalValue to decimalValue + 1\n\t\tend if\n\tend repeat\n\treturn decimalValue\nend binaryToDecimal\n\nset decimalList to {}\nrepeat with binStr in binaryList\n\tset end of decimalList to binaryToDecimal(binStr)\nend repeat\n\ndecimalList\n```"
  },
  {
    "task": "Use map to append a domain name to a list of user names to create email addresses.",
    "code": "```applescript\nset userNames to {\"alice\", \"bob\", \"charlie\"}\nset domainName to \"@example.com\"\n\non appendDomain(userName)\n\treturn userName & domainName\nend appendDomain\n\nset emailAddresses to map(userNames, my appendDomain)\n```\n\n```applescript\non map(list, aFunction)\n\tset result to {}\n\trepeat with i in list\n\t\tset end of result to (aFunction's (contents of i))\n\tend repeat\n\treturn result\nend map\n```"
  },
  {
    "task": "Calculate the area of each circle in a list of radii using a map function.",
    "code": "```applescript\nset radii to {1, 2, 3, 4, 5}\n\non calculateArea(radius)\n    return pi * radius * radius\nend calculateArea\n\nset areas to map(calculateArea, radii)\n\non map(fn, lst)\n    set result to {}\n    repeat with item in lst\n        set end of result to fn's item\n    end repeat\n    return result\nend map\n\nareas\n```"
  },
  {
    "task": "Use map to strip whitespace from the start and end of each string in a list.",
    "code": "```applescript\nset stringList to {\"  hello  \", \"  world  \", \"  applescript  \"}\nset trimmedList to my map(stringList, my trimWhitespace)\n\non map(aList, aFunction)\n\tset newList to {}\n\trepeat with anItem in aList\n\t\tset end of newList to aFunction's anItem\n\tend repeat\n\treturn newList\nend map\n\non trimWhitespace(aString)\n\treturn (aString's text as string) as text\nend trimWhitespace\n```"
  },
  {
    "task": "Apply map to replace spaces with underscores in a list of file paths.",
    "code": "```applescript\nset filePaths to {\"/path/to/file one.txt\", \"/path/to/file two.txt\", \"/path/to/file three.txt\"}\n\nset modifiedPaths to my mapReplace(filePaths, \" \", \"_\")\n\non mapReplace(theList, target, replacement)\n\tset newList to {}\n\trepeat with item in theList\n\t\tset end of newList to my replaceText(item, target, replacement)\n\tend repeat\n\treturn newList\nend mapReplace\n\non replaceText(theText, target, replacement)\n\tset AppleScript's text item delimiters to target\n\tset textItems to every text item of theText\n\tset AppleScript's text item delimiters to replacement\n\tset newText to textItems as string\n\tset AppleScript's text item delimiters to \"\"\n\treturn newText\nend replaceText\n```"
  },
  {
    "task": "Convert a list of mixed-case strings to title case using map.",
    "code": "```applescript\nset mixedCaseStrings to {\"hello world\", \"apple script\", \"functional map\"}\n\non titleCase(theString)\n\tset wordList to words of theString\n\tset titleCasedWords to {}\n\trepeat with aWord in wordList\n\t\tset end of titleCasedWords to (do shell script \"echo \" & quoted form of aWord & \" | sed 's/.*/\\\\u&/'\")\n\tend repeat\n\treturn my join(titleCasedWords, \" \")\nend titleCase\n\non map(list, func)\n\tset newList to {}\n\trepeat with eachItem in list\n\t\tset end of newList to {my func(eachItem)}\n\tend repeat\n\treturn newList\nend map\n\non join(theList, theDelimiter)\n\tset {oldDelims, text item delimiters} to {text item delimiters, theDelimiter}\n\tset joinedString to theList as text\n\tset text item delimiters to oldDelims\n\treturn joinedString\nend join\n\nset titleCasedList to map(mixedCaseStrings, titleCase)\n```"
  },
  {
    "task": "Use map to filter out only the digits from a list of mixed alphanumeric strings.",
    "code": "```applescript\nset alphanumericList to {\"abc123\", \"def456\", \"ghi789\", \"012xyz\"}\nset digitLists to my mapList(alphanumericList, my filterDigits)\n\non mapList(aList, aFunction)\n    set newList to {}\n    repeat with anItem in aList\n        set end of newList to aFunction's (contents of anItem)\n    end repeat\n    return newList\nend mapList\n\non filterDigits(anItem)\n    set digitString to \"\"\n    repeat with i from 1 to length of anItem\n        set aChar to character i of anItem\n        if aChar is in \"0123456789\" then\n            set digitString to digitString & aChar\n        end if\n    end repeat\n    return digitString\nend filterDigits\n```"
  },
  {
    "task": "Apply map to convert a list of Unix timestamps to readable date strings.",
    "code": "```applescript\nset unixTimestamps to {1672531199, 1672617599, 1672703999}\n\non formatUnixTimestamp(unixTime)\n\tset theDate to (unixTime + 978307200) as date\n\tset formattedDate to short date string of theDate & \" \" & time string of theDate\n\treturn formattedDate\nend formatUnixTimestamp\n\nset formattedDates to map(formatUnixTimestamp, unixTimestamps)\n\non map(func, theList)\n\tset newList to {}\n\trepeat with item in theList\n\t\tset end of newList to func's item\n\tend repeat\n\treturn newList\nend map\n```"
  },
  {
    "task": "Transform a list of dictionary objects by extracting a specific key's value using map.",
    "code": "```applescript\nset dictList to {\u00ac\n    {name:\"Alice\", age:30}, \u00ac\n    {name:\"Bob\", age:25}, \u00ac\n    {name:\"Charlie\", age:35}}\n\nset keyToExtract to \"name\"\n\nset extractedValues to {}\nrepeat with eachDict in dictList\n    set end of extractedValues to (eachDict's item keyToExtract)\nend repeat\n\nextractedValues\n```"
  },
  {
    "task": "Use map to compute the cube of each number in a list.",
    "code": "```applescript\nset numberList to {1, 2, 3, 4, 5}\nset cubeList to my mapCube(numberList)\n\non mapCube(aList)\n\tset result to {}\n\trepeat with aNumber in aList\n\t\tset end of result to (aNumber ^ 3)\n\tend repeat\n\treturn result\nend mapCube\n```"
  },
  {
    "task": "Translate a list of URLs to their respective domain names using a map function.",
    "code": "```applescript\nset urlList to {\"https://www.example.com\", \"https://www.apple.com\", \"https://developer.apple.com\"}\n\non getDomainNameFromURL(u)\n\ttell application \"System Events\"\n\t\tset AppleScript's text item delimiters to \"/\"\n\t\tset domainName to text item 3 of u\n\t\tset AppleScript's text item delimiters to \"\"\n\tend tell\n\treturn domainName\nend getDomainNameFromURL\n\nset domainList to {}\nrepeat with u in urlList\n\tset end of domainList to my getDomainNameFromURL(u)\nend repeat\n\nreturn domainList\n```"
  },
  {
    "task": "Use map to generate HTML list items from a list of text strings.",
    "code": "```applescript\nset textList to {\"Item 1\", \"Item 2\", \"Item 3\"}\n\nset htmlListItems to my mapList(textList, \"generateHTML\")\n\non mapList(aList, aFunction)\n\tset newList to {}\n\trepeat with anItem in aList\n\t\tset end of newList to (my performFunction(aFunction, anItem))\n\tend repeat\n\treturn newList\nend mapList\n\non performFunction(aFunction, anItem)\n\tif aFunction is \"generateHTML\" then\n\t\treturn \"<li>\" & anItem & \"</li>\"\n\tend if\nend performFunction\n```"
  },
  {
    "task": "Convert a list of polar coordinates to Cartesian coordinates using map.",
    "code": "```applescript\non polarToCartesian(polarCoords)\n\tset cartesianCoords to map(polarCoords, my convertPolarToCartesian)\n\treturn cartesianCoords\nend polarToCartesian\n\non map(inputList, transformFunction)\n\tset outputList to {}\n\trepeat with anItem in inputList\n\t\tset end of outputList to (transformFunction's (contents of anItem))\n\tend repeat\n\treturn outputList\nend map\n\non convertPolarToCartesian(polarCoord)\n\tset {r, theta} to polarCoord\n\tset x to r * (cos(theta))\n\tset y to r * (sin(theta))\n\treturn {x, y}\nend convertPolarToCartesian\n\n-- Example Usage\nset polarCoords to {{5, 1}, {10, 0.5}, {3, 2}}\nset cartesianCoords to polarToCartesian(polarCoords)\n```"
  },
  {
    "task": "Use map to decode a list of Base64 encoded strings.",
    "code": "```applescript\nset base64Strings to {\"SGVsbG8=\", \"V29ybGQ=\", \"U29mdHdhcmU=\"}\n\non decodeBase64(encodedString)\n    do shell script \"echo \" & encodedString & \" | base64 -D\"\nend decodeBase64\n\nset decodedStrings to map(base64Strings, my decodeBase64)\n\non map(theList, theFunction)\n    set newList to {}\n    repeat with anItem in theList\n        set end of newList to theFunction(anItem)\n    end repeat\n    return newList\nend map\n```"
  },
  {
    "task": "Convert a list of English sentences to Pig Latin using a map function.",
    "code": "```applescript\non pigLatinWord(word)\n\tset firstChar to character 1 of word\n\tif firstChar is in \"aeiou\" then\n\t\treturn word & \"yay\"\n\telse\n\t\tset restWord to text 2 thru -1 of word\n\t\treturn restWord & firstChar & \"ay\"\n\tend if\nend pigLatinWord\n\non pigLatinSentence(sentence)\n\tset sentenceWords to words of sentence\n\tset pigLatinWords to map(pigLatinWord, sentenceWords)\n\treturn join(pigLatinWords, \" \")\nend pigLatinSentence\n\non map(f, lst)\n\tset newList to {}\n\trepeat with i from 1 to count of lst\n\t\tset end of newList to f(item i of lst)\n\tend repeat\n\treturn newList\nend map\n\non join(lst, delim)\n\tset textItemDelimiters to delim\n\treturn lst as string\nend join\n\nset sentences to {\"Hello world\", \"This is a test\", \"AppleScript is fun\"}\nset pigLatinSentences to map(pigLatinSentence, sentences)\npigLatinSentences\n```"
  },
  {
    "task": "Use map to anonymize a list of email addresses by masking them.",
    "code": "```applescript\nset emailList to {\"user1@example.com\", \"user2@example.com\", \"user3@example.com\"}\n\non maskEmail(email)\n\tset AppleScript's text item delimiters to \"@\"\n\tset parts to text items of email\n\tset maskedEmail to text item 1 of parts & \"@****.com\"\n\treturn maskedEmail\nend maskEmail\n\nset maskedList to map(maskEmail, emailList)\n\non map(fn, lst)\n\tset result to {}\n\trepeat with i from 1 to count of lst\n\t\tset end of result to fn(item i of lst)\n\tend repeat\n\treturn result\nend map\n\nmaskedList\n```"
  },
  {
    "task": "Apply map to reverse each string in a list of words.",
    "code": "```applescript\nset wordList to {\"apple\", \"banana\", \"cherry\", \"date\"}\n\nset reversedList to my map(reverseString, wordList)\n\non map(func, lst)\n    set newList to {}\n    repeat with item in lst\n        set end of newList to func's item\n    end repeat\n    return newList\nend map\n\non reverseString(word)\n    return (reverse of characters of word) as string\nend reverseString\n```"
  },
  {
    "task": "Convert a list of hexadecimal color codes to RGB tuples using map.",
    "code": "```applescript\nset hexColors to {\"#FF5733\", \"#33FF57\", \"#3357FF\"}\n\non hexToRGB(hexColor)\n\tset red to ((hexToDec(text 2 thru 3 of hexColor)) as integer)\n\tset green to ((hexToDec(text 4 thru 5 of hexColor)) as integer)\n\tset blue to ((hexToDec(text 6 thru 7 of hexColor)) as integer)\n\treturn {red, green, blue}\nend hexToRGB\n\non hexToDec(hex)\n\treturn (run script \"return 0x\" & hex)\nend hexToDec\n\nset rgbColors to map(hexColors, my hexToRGB)\nreturn rgbColors\n\non map(list, func)\n\tset newList to {}\n\trepeat with elem in list\n\t\tset end of newList to func's item elem\n\tend repeat\n\treturn newList\nend map\n```"
  },
  {
    "task": "Use map to increment each integer in a list by a constant value.",
    "code": "```applescript\nset integerList to {1, 2, 3, 4, 5}\nset incrementValue to 1\n\nset incrementedList to my mapList(integerList, incrementValue)\n\non mapList(aList, incrementValue)\n\tset newlist to {}\n\trepeat with i from 1 to count aList\n\t\tset end of newlist to (item i of aList) + incrementValue\n\tend repeat\n\treturn newlist\nend mapList\n```"
  },
  {
    "task": "Calculate the square root of each number in a list using a map function.",
    "code": "```applescript\nset numberList to {1, 4, 9, 16, 25}\nset sqrtList to my map(numberList, sqrt)\n\non map(list, func)\n\tset newList to {}\n\trepeat with item in list\n\t\tset end of newList to func(item)\n\tend repeat\n\treturn newList\nend map\n```"
  },
  {
    "task": "Use map to convert a list of currency amounts from dollars to euros.",
    "code": "```applescript\nset dollarAmounts to {100, 250, 300, 425, 500}\nset conversionRate to 0.85\nset euroAmounts to my map(dollarAmounts, conversionRate)\n\non map(dollarAmounts, conversionRate)\n\tset euroAmounts to {}\n\trepeat with amount in dollarAmounts\n\t\tset end of euroAmounts to (amount * conversionRate)\n\tend repeat\n\treturn euroAmounts\nend map\n```"
  },
  {
    "task": "Extract the domain from each email address in a list using map.",
    "code": "```applescript\nset emailList to {\"user1@example.com\", \"user2@test.org\", \"user3@sample.net\"}\n\non extractDomain(email)\n\tset AppleScript's text item delimiters to \"@\"\n\tset domain to text item 2 of email\n\tset AppleScript's text item delimiters to \"\"\n\treturn domain\nend extractDomain\n\nset domainList to {}\nrepeat with email in emailList\n\tset end of domainList to extractDomain(email)\nend repeat\n\nreturn domainList\n```"
  },
  {
    "task": "Use map to serialize a list of objects into JSON strings.",
    "code": "```applescript\nuse framework \"Foundation\"\n\n-- Define a list of objects\nset myObjects to {{name:\"John\", age:30}, {name:\"Jane\", age:25}, {name:\"Doe\", age:22}}\n\n-- Function to serialize an object to JSON\non serializeToJSON(obj)\n\tset jsonData to current application's NSJSONSerialization's dataWithJSONObject:obj options:0 |error|:(missing value)\n\tset jsonString to (current application's NSString's alloc()'s initWithData:jsonData encoding:(current application's NSUTF8StringEncoding))\n\treturn jsonString as text\nend serializeToJSON\n\n-- Map the list of objects to JSON strings\nset jsonStrings to {}\nrepeat with obj in myObjects\n\tset end of jsonStrings to serializeToJSON(obj)\nend repeat\n\n-- Output the result\njsonStrings\n```"
  },
  {
    "task": "Transform a list of file sizes from bytes to kilobytes using map.",
    "code": "```applescript\nset byteSizes to {1024, 2048, 5120, 8192, 16384}\nset kilobyteSizes to my map(byteSizes, 1024)\n\non map(aList, divisor)\n\tscript\n\t\ton mapItem(item)\n\t\t\treturn item / divisor\n\t\tend mapItem\n\tend script\n\treturn mapItem of result over aList\nend map\n```"
  },
  {
    "task": "Use map to append a suffix to each string in a list of identifiers.",
    "code": "```applescript\nset identifierList to {\"id1\", \"id2\", \"id3\"}\nset suffix to \"_suffix\"\n\nset updatedList to my map(identifierList, suffix)\n\non map(identifierList, suffix)\n\tset result to {}\n\trepeat with identifier in identifierList\n\t\tset end of result to (identifier & suffix)\n\tend repeat\n\treturn result\nend map\n```"
  },
  {
    "task": "Apply map to convert measurements from inches to centimeters in a list.",
    "code": "```applescript\nset inchList to {1, 2.5, 4, 7.5, 10}\nset cmList to my map(inchList, my inchToCm)\n\non inchToCm(inch)\n\treturn inch * 2.54\nend inchToCm\n\non map(lst, func)\n\tset newList to {}\n\trepeat with item in lst\n\t\tset end of newList to func's (item as real)\n\tend repeat\n\treturn newList\nend map\n\ncmList\n```"
  },
  {
    "task": "Use map to encrypt a list of plaintext messages using a simple cipher.",
    "code": "```applescript\nset plaintextMessages to {\"hello\", \"world\", \"apple\"}\n\nset encryptedMessages to my map(plaintextMessages, my simpleCipher)\n\non map(inputList, func)\n\tset outputList to {}\n\trepeat with item in inputList\n\t\tset end of outputList to func's (item)\n\tend repeat\n\treturn outputList\nend map\n\non simpleCipher(message)\n\tset letters to characters of message\n\tset encryptedText to \"\"\n\trepeat with letter in letters\n\t\tset asciiValue to (ASCII number of letter) + 1\n\t\tset encryptedText to encryptedText & (ASCII character of asciiValue)\n\tend repeat\n\treturn encryptedText\nend simpleCipher\n\nreturn encryptedMessages\n```"
  },
  {
    "task": "Transform a list of date strings to day of the week names using a map function.",
    "code": "```applescript\nset dateStrings to {\"2023-10-01\", \"2023-10-02\", \"2023-10-03\"}\n\nset dayNames to my map(dateStrings, my dateToDayOfWeek)\n\non map(lst, func)\n\tset output to {}\n\trepeat with item in lst\n\t\tset end of output to func's (item as string)\n\tend repeat\n\treturn output\nend map\n\non dateToDayOfWeek(dateString)\n\tset theDate to current date\n\tset {year:y, month:m, day:d} to dateString's words\n\tset theDate's year to y\n\tset theDate's month to m as integer\n\tset theDate's day to d as integer\n\treturn theDate's weekday as string\nend dateToDayOfWeek\n\ndayNames\n```"
  },
  {
    "task": "Use map to derive the absolute value of each number in a list.",
    "code": "```applescript\nset numberList to {-10, 20, -30, 40, -50}\nset absoluteList to my mapList(numberList, my absValue)\n\non mapList(aList, aFunction)\n\tset resultList to {}\n\trepeat with anItem in aList\n\t\tset end of resultList to aFunction's |\u03bb|(anItem)\n\tend repeat\n\treturn resultList\nend mapList\n\non absValue()\n\tscript\n\t\ton |\u03bb|(x)\n\t\t\treturn abs(x)\n\t\tend |\u03bb|\n\tend script\nend absValue\n```"
  },
  {
    "task": "Convert a list of lowercase hexadecimal strings to uppercase using map.",
    "code": "```applescript\nset hexList to {\"1a\", \"2b\", \"3c\", \"4d\", \"5e\", \"6f\"}\n\non toUpperCase(hexStr)\n\treturn do shell script \"echo \" & hexStr & \" | tr '[:lower:]' '[:upper:]'\"\nend toUpperCase\n\nset upperHexList to map(toUpperCase, hexList)\n\non map(func, lst)\n\tset result to {}\n\trepeat with item in lst\n\t\tset end of result to func's (contents of item)\n\tend repeat\n\treturn result\nend map\n\nreturn upperHexList\n```"
  },
  {
    "task": "Use map to find the maximum value in a list of lists of numbers.",
    "code": "```applescript\nset listOfLists to {{1, 3, 5}, {2, 4, 6}, {0, 7, 8}}\n\nset maxValues to map(listOfLists, my findMax)\nset overallMax to my findMax(maxValues)\n\non map(aList, aFunction)\n    set newList to {}\n    repeat with anItem in aList\n        set end of newList to aFunction's (contents of anItem)\n    end repeat\n    return newList\nend map\n\non findMax(aList)\n    set maxVal to item 1 of aList\n    repeat with anItem in aList\n        if anItem > maxVal then\n            set maxVal to anItem\n        end if\n    end repeat\n    return maxVal\nend findMax\n```"
  },
  {
    "task": "Apply map to extract the year from each date in a list of date objects.",
    "code": "```applescript\nset dateList to {date \"Saturday, March 25, 2023 at 12:00:00 AM\", date \"Friday, June 11, 2021 at 12:00:00 AM\", date \"Monday, December 5, 2022 at 12:00:00 AM\"}\n\nset yearList to {}\nrepeat with aDate in dateList\n\tset end of yearList to year of aDate\nend repeat\n\nyearList\n```"
  },
  {
    "task": "Use map to prepend a country code to each phone number in a list.",
    "code": "```applescript\nset phoneNumbers to {\"123-456-7890\", \"987-654-3210\", \"555-555-5555\"}\nset countryCode to \"+1\"\n\nset prependCountryCode to my mapList(phoneNumbers, countryCode)\n\non mapList(phoneList, code)\n\tset mappedList to {}\n\trepeat with phone in phoneList\n\t\tset end of mappedList to code & phone\n\tend repeat\n\treturn mappedList\nend mapList\n```"
  },
  {
    "task": "Capitalize the last letter of each word in a list using a map function.",
    "code": "```applescript\non capitalizeLastLetter(wordsList)\n\treturn my map(wordsList, my capitalizeLast)\nend capitalizeLastLetter\n\non capitalizeLast(aWord)\n\tset lastLetter to last character of aWord\n\tset rest to text 1 thru -2 of aWord\n\treturn rest & (lastLetter as string)'s uppercase\nend capitalizeLast\n\non map(myList, myFunction)\n\tset newList to {}\n\trepeat with anItem in myList\n\t\tset end of newList to myFunction's item anItem\n\tend repeat\n\treturn newList\nend map\n\n-- Example usage:\nset wordsList to {\"apple\", \"banana\", \"cherry\"}\nset result to capitalizeLastLetter(wordsList)\n```"
  },
  {
    "task": "Use map to transform a list of strings by removing all vowels.",
    "code": "```applescript\nset stringList to {\"apple\", \"orange\", \"banana\", \"grape\"}\nset vowels to {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"}\n\non removeVowels(s)\n\tset result to \"\"\n\trepeat with ch in s\n\t\tif ch is not in vowels then\n\t\t\tset result to result & ch\n\t\tend if\n\tend repeat\n\treturn result\nend removeVowels\n\nset transformedList to {}\nrepeat with s in stringList\n\tset end of transformedList to removeVowels(s)\nend repeat\n\ntransformedList\n```"
  },
  {
    "task": "Convert a list of music notes to their corresponding frequencies using map.",
    "code": "```applescript\nset musicNotes to {\"C4\", \"D4\", \"E4\", \"F4\", \"G4\", \"A4\", \"B4\"}\nset noteFrequencies to {261.63, 293.66, 329.63, 349.23, 392.00, 440.00, 493.88}\n\non getFrequency(note)\n\trepeat with i from 1 to count of musicNotes\n\t\tif item i of musicNotes is note then\n\t\t\treturn item i of noteFrequencies\n\t\tend if\n\tend repeat\n\treturn 0\nend getFrequency\n\nset frequencies to {}\nrepeat with note in musicNotes\n\tset end of frequencies to my getFrequency(note)\nend repeat\n\nfrequencies\n```"
  },
  {
    "task": "Use map to find the reciprocal of each number in a list.",
    "code": "```applescript\nset numList to {1, 2, 3, 4, 5}\nset reciprocalList to map(numList, my reciprocal)\n\non map(lst, func)\n    set newList to {}\n    repeat with item in lst\n        set end of newList to func's item\n    end repeat\n    return newList\nend map\n\non reciprocal(n)\n    return 1.0 / n\nend reciprocal\n\nreciprocalList\n```"
  },
  {
    "task": "Transform a list of URLs to their shortened versions using a map function.",
    "code": "```applescript\nset urlList to {\"https://example.com/long-url-1\", \"https://example.com/long-url-2\", \"https://example.com/long-url-3\"}\n\non shortenURL(url)\n    -- Placeholder logic for URL shortening\n    return \"https://short.url/\" & (text 9 thru -1 of url)\nend shortenURL\n\nset shortenedURLs to {}\nrepeat with theURL in urlList\n    set end of shortenedURLs to my shortenURL(theURL)\nend repeat\n\nreturn shortenedURLs\n```"
  },
  {
    "task": "Use map to generate a list of initials from a list of full names.",
    "code": "```applescript\nset fullNames to {\"John Doe\", \"Jane Smith\", \"Alice Johnson\"}\n\nset initialsList to my map(fullNames, my getInitials)\n\non map(list, func)\n\tset newList to {}\n\trepeat with item in list\n\t\tset end of newList to func's (item as text)\n\tend repeat\n\treturn newList\nend map\n\non getInitials(fullName)\n\tset nameParts to words of fullName\n\tset initials to \"\"\n\trepeat with part in nameParts\n\t\tset initials to initials & (character 1 of part)\n\tend repeat\n\treturn initials\nend getInitials\n\ninitialsList\n```"
  },
  {
    "task": "Convert a list of decimal numbers to their binary string representations using map.",
    "code": "```applescript\nset decimalList to {10, 15, 23, 42, 63}\nset binaryList to my map(decimalList, my decimalToBinary)\n\non decimalToBinary(n)\n\tset binaryResult to \"\"\n\trepeat while n > 0\n\t\tset binaryResult to (n mod 2) & binaryResult\n\t\tset n to n div 2\n\tend repeat\n\tif binaryResult is \"\" then set binaryResult to \"0\"\n\treturn binaryResult\nend decimalToBinary\n\non map(aList, aFunction)\n\tset newList to {}\n\trepeat with eachItem in aList\n\t\tset end of newList to aFunction(eachItem)\n\tend repeat\n\treturn newList\nend map\n\nreturn binaryList\n```"
  },
  {
    "task": "Use map to adjust the brightness of each color in a list of RGB tuples.",
    "code": "```applescript\nset colorList to {{255, 0, 0}, {0, 255, 0}, {0, 0, 255}, {128, 128, 128}}\n\non adjustBrightness(rgb)\n\tset {r, g, b} to rgb\n\tset adjustmentFactor to 1.2\n\tset newR to min(round(r * adjustmentFactor), 255)\n\tset newG to min(round(g * adjustmentFactor), 255)\n\tset newB to min(round(b * adjustmentFactor), 255)\n\treturn {newR, newG, newB}\nend adjustBrightness\n\nset adjustedColors to map adjustBrightness to colorList\n\non map(func, lst)\n\tscript\n\t\tproperty f : func\n\tend script\n\treturn (f's map(lst))\nend map\n\nscript\n\tproperty parent : map\n\ton map(lst)\n\t\tset result to {}\n\t\trepeat with item in lst\n\t\t\tset end of result to my f's |\u03bb|(item)\n\t\tend repeat\n\t\treturn result\n\tend map\nend script\n```"
  },
  {
    "task": "Apply map to filter out only alphabetic characters from a list of strings.",
    "code": "```applescript\nset inputList to {\"abc123\", \"hello!\", \"123\", \"world\", \"42foo\"}\n\nset outputList to my filterAlphabetic(inputList)\n\non filterAlphabetic(theList)\n\tscript StringFilter\n\t\ton mapString(theString)\n\t\t\tset alphabeticString to \"\"\n\t\t\trepeat with char in theString\n\t\t\t\tset charCode to (ASCII number char)\n\t\t\t\tif (charCode \u2265 65 and charCode \u2264 90) or (charCode \u2265 97 and charCode \u2264 122) then\n\t\t\t\t\tset alphabeticString to alphabeticString & char\n\t\t\t\tend if\n\t\t\tend repeat\n\t\t\treturn alphabeticString\n\t\tend mapString\n\tend script\n\n\tset filteredList to {}\n\trepeat with item in theList\n\t\tset end of filteredList to StringFilter's mapString(item)\n\tend repeat\n\treturn filteredList\nend filterAlphabetic\n```"
  },
  {
    "task": "Use map to compute the prime factorization of each number in a list.",
    "code": "```applescript\non isPrime(n)\n\tif n \u2264 1 then return false\n\tif n \u2264 3 then return true\n\tif n mod 2 = 0 or n mod 3 = 0 then return false\n\tset i to 5\n\trepeat while i * i \u2264 n\n\t\tif n mod i = 0 or n mod (i + 2) = 0 then return false\n\t\tset i to i + 6\n\tend repeat\n\treturn true\nend isPrime\n\non nextPrime(n)\n\tset n to n + 1\n\trepeat while not isPrime(n)\n\t\tset n to n + 1\n\tend repeat\n\treturn n\nend nextPrime\n\non primeFactors(n)\n\tset factors to {}\n\tset divisor to 2\n\trepeat while n > 1\n\t\trepeat while n mod divisor = 0\n\t\t\tset end of factors to divisor\n\t\t\tset n to n / divisor\n\t\tend repeat\n\t\tset divisor to nextPrime(divisor)\n\tend repeat\n\treturn factors\nend primeFactors\n\non map(lst, func)\n\tset result to {}\n\trepeat with item in lst\n\t\tset end of result to func's item\n\tend repeat\n\treturn result\nend map\n\nset numbers to {12, 15, 21, 29}\nset factorizations to map(numbers, primeFactors)\nfactorizations\n```"
  },
  {
    "task": "Calculate the exponential of each number in a list using a map function.",
    "code": "```applescript\nset numList to {1, 2, 3, 4, 5}\nset expList to my map(numList, my expFunction)\n\non map(lst, func)\n    set newList to {}\n    repeat with i from 1 to count of lst\n        set end of newList to func(item i of lst)\n    end repeat\n    return newList\nend map\n\non expFunction(n)\n    return (n ^ 2)\nend expFunction\n```"
  },
  {
    "task": "Use map to convert a list of text messages to morse code.",
    "code": "```applescript\non textToMorse(textMessage)\n\tset morseDictionary to {a:\"\u00b7-\", b:\"-\u00b7\u00b7\u00b7\", c:\"-\u00b7-\u00b7\", d:\"-\u00b7\u00b7\", e:\"\u00b7\", f:\"\u00b7\u00b7-\u00b7\", g:\"--\u00b7\", h:\"\u00b7\u00b7\u00b7\u00b7\", i:\"\u00b7\u00b7\", j:\"\u00b7---\", k:\"-\u00b7-\", l:\"\u00b7-\u00b7\u00b7\", m:\"--\", n:\"-\u00b7\", o:\"---\", p:\"\u00b7--\u00b7\", q:\"--\u00b7-\", r:\"\u00b7-\u00b7\", s:\"\u00b7\u00b7\u00b7\", t:\"-\", u:\"\u00b7\u00b7-\", v:\"\u00b7\u00b7\u00b7-\", w:\"\u00b7--\", x:\"-\u00b7\u00b7-\", y:\"-\u00b7--\", z:\"--\u00b7\u00b7\", space:\"/\"}\n\tset morseText to \"\"\n\trepeat with char in textMessage's characters\n\t\tset morseCode to morseDictionary's (char as lowercase)\n\t\tif morseCode is missing value then\n\t\t\tset morseCode to \"\"\n\t\tend if\n\t\tset morseText to morseText & morseCode & \" \"\n\tend repeat\n\treturn text trim characters \" \" from morseText\nend textToMorse\n\non mapMessagesToMorse(messages)\n\treturn map(messages, my textToMorse)\nend mapMessagesToMorse\n\non map(list, func)\n\tset newList to {}\n\trepeat with item in list\n\t\tset end of newList to func's item\n\tend repeat\n\treturn newList\nend map\n\nset messages to {\"Hello World\", \"Functional Map\", \"AppleScript\"}\nset morseMessages to mapMessagesToMorse(messages)\n```"
  },
  {
    "task": "Transform a list of JSON objects to XML strings using a map function.",
    "code": "```applescript\nuse framework \"Foundation\"\n\non jsonToXml(jsonString)\n\ttell current application's NSJSONSerialization to set jsonData to dataWithJSONObject:jsonString options:0 |error|:(missing value)\n\tset xmlString to \"<root>\"\n\trepeat with key in jsonString's allKeys()\n\t\tset xmlString to xmlString & \"<\" & key & \">\" & (jsonString's objectForKey:key) & \"</\" & key & \">\"\n\tend repeat\n\tset xmlString to xmlString & \"</root>\"\n\treturn xmlString\nend jsonToXml\n\nset jsonObjects to {\"{\\\"name\\\": \\\"John\\\", \\\"age\\\": 30}\", \"{\\\"name\\\": \\\"Jane\\\", \\\"age\\\": 25}\"}\n\nset xmlStrings to {}\nrepeat with jsonString in jsonObjects\n\tset jsonData to (current application's NSJSONSerialization's JSONObjectWithData:(jsonString's dataUsingEncoding:(current application's NSUTF8StringEncoding)) options:0 |error|:(missing value))\n\tset end of xmlStrings to my jsonToXml(jsonData)\nend repeat\n\nxmlStrings\n```"
  },
  {
    "task": "Use map to extract the extension from each filename in a list.",
    "code": "```applescript\nset filenames to {\"document.txt\", \"image.jpeg\", \"archive.zip\", \"presentation.pptx\"}\n\nset extensions to my map(filenames, extractExtension)\n\non map(list, func)\n\tset result to {}\n\trepeat with item in list\n\t\tset end of result to func's item\n\tend repeat\n\treturn result\nend map\n\non extractExtension(filename)\n\tset {name, ext} to splitNameExtension(filename)\n\treturn ext\nend extractExtension\n\non splitNameExtension(filename)\n\tset AppleScript's text item delimiters to \".\"\n\tset nameParts to text items of filename\n\tset AppleScript's text item delimiters to \"\"\n\tset name to (items 1 thru -2 of nameParts) as string\n\tset ext to item -1 of nameParts\n\treturn {name, ext}\nend splitNameExtension\n\nextensions\n```"
  },
  {
    "task": "Convert a list of temperatures from Fahrenheit to Kelvin using map.",
    "code": "```applescript\nset fahrenheitTemperatures to {32, 68, 104, 212}\n\non fahrenheitToKelvin(tempF)\n\treturn (tempF - 32) * 5 / 9 + 273.15\nend fahrenheitToKelvin\n\nset kelvinTemperatures to {}\nrepeat with tempF in fahrenheitTemperatures\n\tset kelvinTemperatures's end to fahrenheitToKelvin(tempF)\nend repeat\n\nkelvinTemperatures\n```"
  },
  {
    "task": "Use map to calculate the perimeter of each rectangle in a list of dimensions.",
    "code": "```applescript\nset rectangles to {{length: 5, width: 3}, {length: 10, width: 7}, {length: 6, width: 4}}\n\non calculatePerimeter(rectangle)\n\tset length to length of rectangle\n\tset width to width of rectangle\n\treturn 2 * (length + width)\nend calculatePerimeter\n\nset perimeters to map(calculatePerimeter, rectangles)\n\non map(func, lst)\n\tset newList to {}\n\trepeat with item in lst\n\t\tset end of newList to func's item\n\tend repeat\n\treturn newList\nend map\n\nperimeters\n```"
  },
  {
    "task": "Apply map to format a list of phone numbers into a standard format.",
    "code": "```applescript\nset phoneNumbers to {\"1234567890\", \"2345678901\", \"3456789012\"}\n\non formatPhoneNumber(phoneNumber)\n\tset areaCode to text 1 thru 3 of phoneNumber\n\tset firstPart to text 4 thru 6 of phoneNumber\n\tset secondPart to text 7 thru 10 of phoneNumber\n\treturn \"(\" & areaCode & \") \" & firstPart & \"-\" & secondPart\nend formatPhoneNumber\n\nset formattedNumbers to {}\nrepeat with phoneNumber in phoneNumbers\n\tset end of formattedNumbers to formatPhoneNumber(phoneNumber)\nend repeat\n\nformattedNumbers\n```"
  },
  {
    "task": "Use map to generate a hashed version of passwords from a list.",
    "code": "```applescript\nset passwords to {\"password123\", \"letmein\", \"123456\", \"qwerty\"}\nset hashedPasswords to my map(hashPassword, passwords)\n\non map(aFunction, aList)\n\tset newList to {}\n\trepeat with anItem in aList\n\t\tset end of newList to aFunction's (anItem as text)\n\tend repeat\n\treturn newList\nend map\n\non hashPassword(aString)\n\tset aText to aString as text\n\t-- Simple hash function, for example, reverse the string\n\treturn (reverse of characters of aText) as text\nend hashPassword\n```"
  },
  {
    "task": "Convert a list of text paragraphs to a word count using map.",
    "code": "```applescript\nset paragraphs to {\"This is the first paragraph.\", \"Here is the second one.\", \"And the third paragraph is here.\"}\n\nset wordCounts to map(paragraphs, my countWords)\nreturn wordCounts\n\non countWords(paragraph)\n\tset wordList to words of paragraph\n\treturn length of wordList\nend countWords\n\non map(list, func)\n\tset newList to {}\n\trepeat with item in list\n\t\tset end of newList to func's item\n\tend repeat\n\treturn newList\nend map\n```"
  },
  {
    "task": "Use map to remove punctuation from each string in a list of sentences.",
    "code": "```applescript\nset sentences to {\"Hello, world!\", \"Good morning, everyone.\", \"How's it going?\"}\n\non removePunctuation(sentence)\n\tset punctuationChars to {\",\", \".\", \"!\", \"?\", \";\", \":\", \"'\", \"\\\"\"}\n\trepeat with char in punctuationChars\n\t\tset sentence to my replaceText(char, \"\", sentence)\n\tend repeat\n\treturn sentence\nend removePunctuation\n\non replaceText(find, replace, text)\n\tset AppleScript's text item delimiters to find\n\tset textItems to text items of text\n\tset AppleScript's text item delimiters to replace\n\tset newText to textItems as text\n\tset AppleScript's text item delimiters to \"\"\n\treturn newText\nend replaceText\n\nset cleanedSentences to map removePunctuation over sentences\n\non map(func, lst)\n\tset result to {}\n\trepeat with item in lst\n\t\tset end of result to func's item\n\tend repeat\n\treturn result\nend map\n\ncleanedSentences\n```"
  },
  {
    "task": "Transform a list of URLs to their base domain using a map function.",
    "code": "```applescript\nset urls to {\"http://example.com/path\", \"https://subdomain.example.org/anotherpath\", \"ftp://example.net/resource\"}\n\non getBaseDomain(url)\n\tset AppleScript's text item delimiters to {\"://\", \"/\"}\n\tset domainParts to text items of url\n\tset AppleScript's text item delimiters to \"\"\n\treturn item 2 of domainParts\nend getBaseDomain\n\nset baseDomains to {}\nrepeat with u in urls\n\tset end of baseDomains to my getBaseDomain(u)\nend repeat\n\nreturn baseDomains\n```"
  },
  {
    "task": "Use map to translate a list of expressions to their symbolic algebraic forms.",
    "code": "```applescript\nset expressions to {\"2 + 2\", \"3 * 4\", \"5 - 1\", \"6 / 3\"}\nset symbolicForms to my map(expressions, my translateToSymbolic)\n\non map(inputList, func)\n\tset outputList to {}\n\trepeat with item in inputList\n\t\tset end of outputList to func's item\n\tend repeat\n\treturn outputList\nend map\n\non translateToSymbolic(expression)\n\t-- This is a placeholder function. Replace with actual translation logic.\n\treturn \"Symbolic(\" & expression & \")\"\nend translateToSymbolic\n```"
  },
  {
    "task": "Apply map to convert a list of ASCII codes to corresponding characters.",
    "code": "```applescript\nset asciiList to {72, 101, 108, 108, 111}\n\nset charList to my map(asciiList, my convertAsciiToChar)\n\non map(lst, func)\n\tset newList to {}\n\trepeat with item in lst\n\t\tset end of newList to func's (contents of item)\n\tend repeat\n\treturn newList\nend map\n\non convertAsciiToChar(asciiCode)\n\treturn (ASCII character asciiCode)\nend convertAsciiToChar\n```"
  },
  {
    "task": "Use map to transform a list of text strings to their lemmatized forms.",
    "code": "```applescript\nuse framework \"Foundation\"\n\non lemmatize(text)\n    -- Assuming a simple lemmatization function here\n    if text is \"running\" then\n        return \"run\"\n    else if text is \"better\" then\n        return \"good\"\n    else\n        return text\n    end if\nend lemmatize\n\nset textList to {\"running\", \"better\", \"apples\"}\n\nset lemmatizedList to my mapList(textList, my lemmatize)\n\non mapList(aList, aFunction)\n    set mappedList to {}\n    repeat with anItem in aList\n        set end of mappedList to (aFunction's (anItem as text))\n    end repeat\n    return mappedList\nend mapList\n```"
  },
  {
    "task": "Convert a list of HTML strings to plain text using map.",
    "code": "```applescript\nset htmlList to {\"<p>Hello, <b>world</b>!</p>\", \"<div>AppleScript <i>is</i> fun.</div>\", \"<h1>Welcome</h1>\"}\n\nset plainTextList to my map(htmlList, my removeHTML)\n\non map(inputList, func)\n\tset outputList to {}\n\trepeat with eachItem in inputList\n\t\tset end of outputList to func's (eachItem)\n\tend repeat\n\treturn outputList\nend map\n\non removeHTML(htmlString)\n\tset text item delimiters to \"<\"\n\tset parts to text items of htmlString\n\tset plainText to \"\"\n\trepeat with part in parts\n\t\tif part does not contain \">\" then\n\t\t\tset plainText to plainText & part\n\t\telse\n\t\t\tset text item delimiters to \">\"\n\t\t\tset plainText to plainText & (text item 2 of part)\n\t\tend if\n\tend repeat\n\treturn plainText\nend removeHTML\n```"
  },
  {
    "task": "Use map to create a summary of each article in a list of texts.",
    "code": "```applescript\nset articles to {\"Article 1 text here\", \"Article 2 text here\", \"Article 3 text here\"}\n\non summarize(text)\n\treturn \"Summary of: \" & text\nend summarize\n\nset summaries to map(summarize, articles)\n\non map(func, list)\n\tset newList to {}\n\trepeat with item in list\n\t\tset end of newList to func(item)\n\tend repeat\n\treturn newList\nend map\n\nsummaries\n```"
  },
  {
    "task": "Transform a list of paths to their absolute paths using a map function.",
    "code": "```applescript\nset pathList to {\"/Users/example/relative/path1\", \"/Users/example/relative/path2\", \"/Users/example/relative/path3\"}\n\nset absolutePathList to my mapFunction(pathList, my absolutePath)\n\non mapFunction(theList, theFunction)\n\tset newList to {}\n\trepeat with anItem in theList\n\t\tset end of newList to (theFunction's (anItem as string))\n\tend repeat\n\treturn newList\nend mapFunction\n\non absolutePath(aPath)\n\tset aPath to aPath as POSIX file as alias\n\treturn POSIX path of aPath\nend absolutePath\n```"
  },
  {
    "task": "Use map to generate QR codes from a list of URLs.",
    "code": "```applescript\nuse framework \"Foundation\"\nuse framework \"QuartzCore\"\nuse scripting additions\n\nproperty QRCodeGenerator : class \"CIFilter\"\n\nset urlList to {\"https://example.com\", \"https://example.org\", \"https://example.net\"}\n\non generateQRCodeFromURL(url)\n\ttell QRCodeGenerator to set theFilter to filterWithName:\"CIQRCodeGenerator\"\n\ttheFilter's setDefaults()\n\ttheFilter's setValue:(current application's NSString's stringWithString:url)'s dataUsingEncoding:(current application's NSUTF8StringEncoding) forKey:\"inputMessage\"\n\tset qrImage to theFilter's valueForKey:\"outputImage\"\n\treturn qrImage\nend generateQRCodeFromURL\n\nset qrCodes to map(generateQRCodeFromURL, urlList)\n```"
  },
  {
    "task": "Convert a list of angles from degrees to radians using map.",
    "code": "```applescript\n-- Define a list of angles in degrees\nset degreeList to {0, 30, 45, 60, 90, 180, 270, 360}\n\n-- Function to convert degrees to radians\non degreesToRadians(degree)\n    return degree * (pi / 180)\nend degreesToRadians\n\n-- Apply the conversion using map\nset radiansList to my map(degreeList, degreesToRadians)\n\non map(aList, aFunction)\n    set newList to {}\n    repeat with anItem in aList\n        set end of newList to aFunction(anItem)\n    end repeat\n    return newList\nend map\n```"
  },
  {
    "task": "Use map to anonymize a list of IP addresses by masking parts of them.",
    "code": "```applescript\nset ipAddresses to {\"192.168.1.1\", \"10.0.0.5\", \"172.16.254.3\"}\n\nset anonymizedIPs to my mapAnonymize(ipAddresses)\n\non mapAnonymize(ipList)\n\tset maskedList to {}\n\trepeat with ip in ipList\n\t\tset end of maskedList to my maskIP(ip)\n\tend repeat\n\treturn maskedList\nend mapAnonymize\n\non maskIP(ip)\n\tset ipParts to my split(ip, \".\")\n\tset maskedIP to (item 1 of ipParts) & \".\" & \"xxx\" & \".\" & \"xxx\" & \".\" & (item 4 of ipParts)\n\treturn maskedIP\nend maskIP\n\non split(theText, theDelimiter)\n\tset AppleScript's text item delimiters to theDelimiter\n\tset theItems to every text item of theText\n\tset AppleScript's text item delimiters to \"\"\n\treturn theItems\nend split\n\nreturn anonymizedIPs\n```"
  },
  {
    "task": "Transform a list of tuples by swapping their elements using a map function.",
    "code": "```applescript\nset originalList to {{1, 2}, {3, 4}, {5, 6}}\n\nset swappedList to my mapList(originalList, my swapElements)\n\non mapList(lst, func)\n\tset newList to {}\n\trepeat with elem in lst\n\t\tset end of newList to func's (contents of elem)\n\tend repeat\n\treturn newList\nend mapList\n\non swapElements(aTuple)\n\treturn {item 2 of aTuple, item 1 of aTuple}\nend swapElements\n\nswappedList\n```"
  },
  {
    "task": "Use map to compute the greatest common divisor of pairs in a list of number pairs.",
    "code": "```applescript\non gcd(a, b)\n\tif b is 0 then\n\t\treturn a\n\telse\n\t\treturn gcd(b, a mod b)\n\tend if\nend gcd\n\non mapGCD(pairs)\n\tset gcdList to {}\n\trepeat with pair in pairs\n\t\tcopy pair to {a, b}\n\t\tset end of gcdList to gcd(a, b)\n\tend repeat\n\treturn gcdList\nend mapGCD\n\nset pairsList to {{48, 18}, {56, 98}, {99, 27}}\nmapGCD(pairsList)\n```"
  },
  {
    "task": "Convert a list of file paths to their directory names using map.",
    "code": "```applescript\nset filePaths to {\"/Users/John/Documents/file1.txt\", \"/Users/John/Music/song.mp3\", \"/Users/John/Pictures/photo.jpg\"}\n\nset directoryNames to my map(filePaths, my getDirectoryName)\n\non map(lst, func)\n\tset newList to {}\n\trepeat with item in lst\n\t\tset end of newList to (func's call with item as parameter)\n\tend repeat\n\treturn newList\nend map\n\non getDirectoryName(filePath)\n\tset AppleScript's text item delimiters to \"/\"\n\tset pathComponents to text items of filePath\n\tset AppleScript's text item delimiters to \"\"\n\tset numberOfComponents to count of pathComponents\n\tif numberOfComponents is greater than 1 then\n\t\treturn item (numberOfComponents - 1) of pathComponents\n\telse\n\t\treturn \"\"\n\tend if\nend getDirectoryName\n\nreturn directoryNames\n```"
  },
  {
    "task": "Use map to replace each vowel in a list of strings with a specific character.",
    "code": "```applescript\nset originalStrings to {\"apple\", \"orange\", \"grape\", \"banana\"}\nset vowels to {\"a\", \"e\", \"i\", \"o\", \"u\"}\nset replacementChar to \"*\"\n\non replaceVowels(inputString, vowels, replacementChar)\n\tset charList to characters of inputString\n\tset newList to {}\n\trepeat with char in charList\n\t\tif char is in vowels then\n\t\t\tset end of newList to replacementChar\n\t\telse\n\t\t\tset end of newList to char\n\t\tend if\n\tend repeat\n\treturn (newList as string)\nend replaceVowels\n\nset modifiedStrings to {}\nrepeat with str in originalStrings\n\tset end of modifiedStrings to replaceVowels(str, vowels, replacementChar)\nend repeat\n\nreturn modifiedStrings\n```"
  },
  {
    "task": "Transform a list of integers to their hexadecimal representations using map.",
    "code": "```applescript\nset intList to {10, 15, 255, 42, 100}\n\nset hexList to my map(intList, my intToHex)\n\non map(lst, fn)\n\tscript\n\t\tproperty function : fn\n\t\ton |\u03bb|(x)\n\t\t\treturn function's |\u03bb|(x)\n\t\tend |\u03bb|\n\tend script\n\treturn map(lst, result)\nend map\n\non intToHex(n)\n\treturn do shell script \"printf '%02X' \" & n\nend intToHex\n```"
  },
  {
    "task": "Use map to apply a transformation matrix to a list of 2D vectors.",
    "code": "```applescript\n-- Define a function to apply a transformation matrix to a 2D vector\non transformVector(matrix, vector)\n\tset {a, b, c, d} to matrix\n\tset {x, y} to vector\n\tset newX to a * x + b * y\n\tset newY to c * x + d * y\n\treturn {newX, newY}\nend transformVector\n\n-- Define the transformation matrix\nset transformationMatrix to {1, 2, 3, 4} -- Example transformation matrix\n\n-- Define the list of 2D vectors\nset vectors to {{1, 1}, {2, 2}, {3, 3}, {4, 4}}\n\n-- Apply the transformation matrix to each vector using map\nset transformedVectors to {}\nrepeat with v in vectors\n\tset end of transformedVectors to transformVector(transformationMatrix, v)\nend repeat\n\nreturn transformedVectors\n```"
  },
  {
    "task": "Convert a list of text strings to their phonetic alphabet equivalents using map.",
    "code": "```applescript\nset phoneticAlphabet to {A:\"Alpha\", B:\"Bravo\", C:\"Charlie\", D:\"Delta\", E:\"Echo\", F:\"Foxtrot\", G:\"Golf\", H:\"Hotel\", I:\"India\", J:\"Juliett\", K:\"Kilo\", L:\"Lima\", M:\"Mike\", N:\"November\", O:\"Oscar\", P:\"Papa\", Q:\"Quebec\", R:\"Romeo\", S:\"Sierra\", T:\"Tango\", U:\"Uniform\", V:\"Victor\", W:\"Whiskey\", X:\"X-ray\", Y:\"Yankee\", Z:\"Zulu\"}\n\non phoneticEquivalent(char)\n\tset charUpper to (do shell script \"echo \" & char & \" | tr '[:lower:]' '[:upper:]'\")\n\tif phoneticAlphabet contains charUpper then\n\t\treturn phoneticAlphabet's item charUpper\n\telse\n\t\treturn char\n\tend if\nend phoneticEquivalent\n\nset textList to {\"hello\", \"world\"}\nset phoneticTextList to {}\n\nrepeat with textString in textList\n\tset phoneticText to (my map(phoneticEquivalent, textString's text items))\n\tset end of phoneticTextList to phoneticText\nend repeat\n\non map(func, theList)\n\tset newList to {}\n\trepeat with i in theList\n\t\tset end of newList to func's (contents of i)\n\tend repeat\n\treturn newList\nend map\n\nphoneticTextList\n```"
  },
  {
    "task": "Use map to determine if each word in a list is a palindrome, returning booleans.",
    "code": "```applescript\nset wordList to {\"level\", \"world\", \"radar\", \"hello\", \"madam\"}\n\non isPalindrome(word)\n\tset reversedWord to reverse of characters of word as string\n\treturn word is equal to reversedWord\nend isPalindrome\n\nset palindromeResults to map isPalindrome to wordList\n\non map(func, theList)\n\tset result to {}\n\trepeat with eachItem in theList\n\t\tset end of result to func(eachItem)\n\tend repeat\n\treturn result\nend map\n\npalindromeResults\n```"
  },
  {
    "task": "Transform a list of dictionaries by renaming a specified key using a map function.",
    "code": "```applescript\nset originalList to {{name:\"Alice\", age:30}, {name:\"Bob\", age:25}, {name:\"Charlie\", age:35}}\n\nset newList to my mapFunction(originalList, \"name\", \"fullName\")\n\non mapFunction(inputList, oldKey, newKey)\n\tset transformedList to {}\n\trepeat with item in inputList\n\t\tset newItem to item\n\t\tif item contains oldKey then\n\t\t\tset itemValue to item's item oldKey\n\t\t\tset end of newItem to {newKey:itemValue}\n\t\t\tset newItem to removeKey(newItem, oldKey)\n\t\tend if\n\t\tset end of transformedList to newItem\n\tend repeat\n\treturn transformedList\nend mapFunction\n\non removeKey(inputDict, keyToRemove)\n\tset newDict to {}\n\trepeat with {key, value} in inputDict\n\t\tif key is not keyToRemove then\n\t\t\tset end of newDict to {key:value}\n\t\tend if\n\tend repeat\n\treturn newDict\nend removeKey\n```"
  },
  {
    "task": "Use map to compute the logarithm of each number in a list.",
    "code": "```applescript\nset numberList to {1, 10, 100, 1000}\nset logList to my map(logarithm, numberList)\n\non map(func, aList)\n    set newList to {}\n    repeat with eachItem in aList\n        set end of newList to func's (eachItem)\n    end repeat\n    return newList\nend map\n\non logarithm(x)\n    return log(x) / log(10)\nend logarithm\n```"
  },
  {
    "task": "Convert a list of image file paths to grayscale versions using map.",
    "code": "```applescript\nset imagePaths to {\"path/to/image1.jpg\", \"path/to/image2.jpg\", \"path/to/image3.jpg\"}\n\non convertToGrayscale(imagePath)\n\ttell application \"Image Events\"\n\t\tlaunch\n\t\tset thisImage to open imagePath\n\t\tsave thisImage as JPEG in imagePath with icon\n\t\tset grayscaleImage to duplicate thisImage\n\t\tapply grayscale to grayscaleImage\n\t\tclose thisImage\n\t\treturn grayscaleImage\n\tend tell\nend convertToGrayscale\n\nset grayscaleImages to map imagePaths with convertToGrayscale\n\non map(itemList, func)\n\tset resultList to {}\n\trepeat with anItem in itemList\n\t\tset end of resultList to func's contents(anItem)\n\tend repeat\n\treturn resultList\nend map\n```"
  },
  {
    "task": "Use map to flatten a list of lists of strings into a single list of strings.",
    "code": "```applescript\nset listOfLists to {{\"apple\", \"banana\"}, {\"carrot\", \"date\"}, {\"eggplant\", \"fig\"}}\n\nset flattenedList to {}\nrepeat with sublist in listOfLists\n    set flattenedList to flattenedList & sublist\nend repeat\n\nflattenedList\n```"
  },
  {
    "task": "Transform a list of temperature readings to temperature anomalies using a map function.",
    "code": "```applescript\nset temperatureReadings to {15.5, 18.2, 20.3, 17.8, 21.0}\nset averageTemperature to (sum of temperatureReadings) / (count of temperatureReadings)\n\nset temperatureAnomalies to my map(temperatureReadings, averageTemperature)\n\non map(readings, avgTemp)\n\tset anomalies to {}\n\trepeat with reading in readings\n\t\tset end of anomalies to (reading - avgTemp)\n\tend repeat\n\treturn anomalies\nend map\n```"
  }
]