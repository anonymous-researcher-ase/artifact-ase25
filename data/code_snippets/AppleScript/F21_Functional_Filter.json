[
  {
    "task": "Filter out all even numbers from a list of integers.",
    "code": "```applescript\nset integerList to {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\nset oddNumbers to my filterOddNumbers(integerList)\n\non filterOddNumbers(numbers)\n\ttell application \"AppleScript\"\n\t\tset oddNumbers to {}\n\t\trepeat with n in numbers\n\t\t\tif (n mod 2) is not equal to 0 then\n\t\t\t\tset end of oddNumbers to n\n\t\t\tend if\n\t\tend repeat\n\t\treturn oddNumbers\n\tend tell\nend filterOddNumbers\n```"
  },
  {
    "task": "Select all words from a list that start with the letter 'a'.",
    "code": "```applescript\nset wordList to {\"apple\", \"banana\", \"apricot\", \"orange\", \"avocado\"}\nset filteredWords to my filterWordsStartingWithA(wordList)\n\non filterWordsStartingWithA(wordList)\n\tset result to {}\n\trepeat with word in wordList\n\t\tif word starts with \"a\" then\n\t\t\tset end of result to word\n\t\tend if\n\tend repeat\n\treturn result\nend filterWordsStartingWithA\n```"
  },
  {
    "task": "Find all positive numbers in a collection of integers.",
    "code": "```applescript\nset theList to {-3, 5, 0, 9, -1, 4, -7}\nset positiveNumbers to {}\nrepeat with eachNumber in theList\n    if eachNumber > 0 then\n        set end of positiveNumbers to eachNumber\n    end if\nend repeat\npositiveNumbers\n```"
  },
  {
    "task": "Extract all employees who are older than 30 from an employee directory.",
    "code": "```applescript\nset employeeDirectory to {\u00ac\n\t{name:\"Alice\", age:25}, \u00ac\n\t{name:\"Bob\", age:35}, \u00ac\n\t{name:\"Charlie\", age:30}, \u00ac\n\t{name:\"David\", age:40} \u00ac\n}\n\nset employeesOver30 to {}\nrepeat with employee in employeeDirectory\n\tif age of employee > 30 then\n\t\tset end of employeesOver30 to employee\n\tend if\nend repeat\n\nreturn employeesOver30\n```"
  },
  {
    "task": "List all cities with a population greater than one million from a dataset.",
    "code": "```applescript\nset cityData to {{name:\"New York\", population:8419000}, {name:\"Los Angeles\", population:3980000}, {name:\"San Francisco\", population:883305}, {name:\"Chicago\", population:2716000}}\n\nset largeCities to {}\n\nrepeat with city in cityData\n    set cityPopulation to population of city\n    if cityPopulation > 1000000 then\n        copy (name of city) to end of largeCities\n    end if\nend repeat\n\nreturn largeCities\n```"
  },
  {
    "task": "Filter out products that are out of stock from a product list.",
    "code": "```applescript\nset productList to {\u00ac\n\t{name:\"Product A\", stock:10}, \u00ac\n\t{name:\"Product B\", stock:0}, \u00ac\n\t{name:\"Product C\", stock:5}, \u00ac\n\t{name:\"Product D\", stock:0}}\n\nset inStockProducts to my filterOutOfStock(productList)\n\non filterOutOfStock(products)\n\tset availableProducts to {}\n\trepeat with product in products\n\t\tif stock of product > 0 then\n\t\t\tset end of availableProducts to product\n\t\tend if\n\tend repeat\n\treturn availableProducts\nend filterOutOfStock\n```"
  },
  {
    "task": "Select all students who have passed with a grade above 70 from a list of student scores.",
    "code": "```applescript\nset studentScores to {{\"Alice\", 85}, {\"Bob\", 67}, {\"Charlie\", 72}, {\"David\", 90}, {\"Eve\", 45}}\n\nset passingStudents to my filterScores(studentScores, 70)\n\non filterScores(scoresList, passingGrade)\n\tset passingList to {}\n\trepeat with student in scoresList\n\t\tset {studentName, studentScore} to student\n\t\tif studentScore > passingGrade then\n\t\t\tcopy studentName to end of passingList\n\t\tend if\n\tend repeat\n\treturn passingList\nend filterScores\n```"
  },
  {
    "task": "Identify all strings in an array that contain the substring 'cat'.",
    "code": "```applescript\nset inputArray to {\"caterpillar\", \"dog\", \"catalog\", \"fish\", \"catnap\"}\nset filteredArray to {}\n\nrepeat with anItem in inputArray\n    if anItem contains \"cat\" then\n        set end of filteredArray to anItem\n    end if\nend repeat\n\nreturn filteredArray\n```"
  },
  {
    "task": "Extract all transactions above $1000 from a financial record.",
    "code": "```applescript\nset financialRecord to {{amount:1200, description:\"Salary\"}, {amount:600, description:\"Groceries\"}, {amount:1500, description:\"Bonus\"}, {amount:200, description:\"Utilities\"}, {amount:3000, description:\"Freelance\"}}\n\nset filteredTransactions to {}\nrepeat with transaction in financialRecord\n    if (amount of transaction) > 1000 then\n        set end of filteredTransactions to transaction\n    end if\nend repeat\n\nfilteredTransactions\n```"
  },
  {
    "task": "Filter out all non-prime numbers from a list of numbers.",
    "code": "```applescript\non isPrime(n)\n\tif n \u2264 1 then return false\n\tif n = 2 then return true\n\tif n mod 2 = 0 then return false\n\tset maxDivisor to n div 2\n\trepeat with i from 3 to maxDivisor by 2\n\t\tif n mod i = 0 then return false\n\tend repeat\n\treturn true\nend isPrime\n\non filterPrimes(numbers)\n\tset primeNumbers to {}\n\trepeat with number in numbers\n\t\tif isPrime(number as integer) then\n\t\t\tcopy number to end of primeNumbers\n\t\tend if\n\tend repeat\n\treturn primeNumbers\nend filterPrimes\n\nset numbersList to {10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}\nset primes to filterPrimes(numbersList)\nprimes\n```"
  },
  {
    "task": "Select all books with more than 300 pages from a library catalog.",
    "code": "```applescript\nset libraryCatalog to {\u00ac\n\t{name:\"Book A\", pages:250}, \u00ac\n\t{name:\"Book B\", pages:320}, \u00ac\n\t{name:\"Book C\", pages:150}, \u00ac\n\t{name:\"Book D\", pages:450}, \u00ac\n\t{name:\"Book E\", pages:200}, \u00ac\n\t{name:\"Book F\", pages:330}}\n\nset filteredBooks to {}\nrepeat with aBook in libraryCatalog\n\tif (pages of aBook) > 300 then\n\t\tset end of filteredBooks to aBook\n\tend if\nend repeat\n\nfilteredBooks\n```"
  },
  {
    "task": "Identify all users who have logged in within the past week from a user database.",
    "code": "```applescript\nset currentDate to current date\nset oneWeekAgo to currentDate - (7 * days)\n\nset userDatabase to {\u00ac\n\t{name:\"Alice\", lastLogin:date \"Saturday, October 14, 2023 at 12:00:00 AM\"}, \u00ac\n\t{name:\"Bob\", lastLogin:date \"Saturday, October 7, 2023 at 12:00:00 AM\"}, \u00ac\n\t{name:\"Charlie\", lastLogin:date \"Thursday, October 12, 2023 at 12:00:00 AM\"} \u00ac\n}\n\nset recentUsers to {}\nrepeat with user in userDatabase\n\tset lastLogin to lastLogin of user\n\tif lastLogin > oneWeekAgo then\n\t\tset end of recentUsers to user\n\tend if\nend repeat\n\nreturn recentUsers\n```"
  },
  {
    "task": "Extract all URLs that contain 'https' from a list of web addresses.",
    "code": "```applescript\nset webAddresses to {\"http://example.com\", \"https://secure.com\", \"ftp://fileserver.com\", \"https://anothersecure.com\"}\n\nset secureURLs to {}\nrepeat with address in webAddresses\n    if address starts with \"https://\" then\n        set end of secureURLs to address\n    end if\nend repeat\n\nreturn secureURLs\n```"
  },
  {
    "task": "Find all movies released after the year 2000 from a movie database.",
    "code": "```applescript\nset movieDatabase to {\u00ac\n\t{name:\"Movie A\", releaseYear:1999}, \u00ac\n\t{name:\"Movie B\", releaseYear:2001}, \u00ac\n\t{name:\"Movie C\", releaseYear:2005}, \u00ac\n\t{name:\"Movie D\", releaseYear:1990}, \u00ac\n\t{name:\"Movie E\", releaseYear:2010}}\n\nset moviesAfter2000 to {}\nrepeat with movie in movieDatabase\n\tif releaseYear of movie > 2000 then\n\t\tset end of moviesAfter2000 to movie\n\tend if\nend repeat\n\nreturn moviesAfter2000\n```"
  },
  {
    "task": "Select all tasks with a priority level of 'high' from a task management system.",
    "code": "```applescript\nset taskList to {\u00ac\n\t{name:\"Task 1\", priority:\"high\"}, \u00ac\n\t{name:\"Task 2\", priority:\"low\"}, \u00ac\n\t{name:\"Task 3\", priority:\"medium\"}, \u00ac\n\t{name:\"Task 4\", priority:\"high\"}}\n\nset highPriorityTasks to my filterTasksByPriority(taskList, \"high\")\n\non filterTasksByPriority(tasks, priorityLevel)\n\tset filteredTasks to {}\n\trepeat with task in tasks\n\t\tif task's priority is priorityLevel then\n\t\t\tset end of filteredTasks to task\n\t\tend if\n\tend repeat\n\treturn filteredTasks\nend filterTasksByPriority\n```"
  },
  {
    "task": "Filter out all words longer than five characters from a text document.",
    "code": "```applescript\nset inputFile to (choose file with prompt \"Select a text file:\")\nset outputFile to (choose file name with prompt \"Save the filtered text as:\")\n\nset filteredText to \"\"\n\ntry\n\topen for access inputFile\n\tset fileContents to (read inputFile)\n\tclose access inputFile\n\t\n\tset wordList to words of fileContents\n\tset filteredWords to {}\n\trepeat with aWord in wordList\n\t\tif (count of aWord) \u2264 5 then\n\t\t\tset end of filteredWords to aWord\n\t\tend if\n\tend repeat\n\t\n\tset filteredText to filteredWords as text\non error errMsg\n\tdisplay dialog \"Error: \" & errMsg\nend try\n\ntry\n\topen for access outputFile with write permission\n\tset eof of outputFile to 0\n\twrite filteredText to outputFile\n\tclose access outputFile\non error errMsg\n\tdisplay dialog \"Error: \" & errMsg\nend try\n```"
  },
  {
    "task": "Extract all odd numbers from a sequence of integers.",
    "code": "```applescript\nset integerSequence to {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\nset oddNumbers to my filterOddNumbers(integerSequence)\n\non filterOddNumbers(sequence)\n\tset oddList to {}\n\trepeat with i in sequence\n\t\tif (i mod 2) is not 0 then\n\t\t\tset end of oddList to i\n\t\tend if\n\tend repeat\n\treturn oddList\nend filterOddNumbers\n```"
  },
  {
    "task": "Select all files larger than 10MB from a list of files.",
    "code": "```applescript\nset fileList to {\"/path/to/file1.txt\", \"/path/to/file2.txt\", \"/path/to/file3.txt\"} -- Example file paths\nset largeFiles to {}\n\nrepeat with filePath in fileList\n    set fileSize to (do shell script \"stat -f%z \" & quoted form of filePath) as number\n    if fileSize > 1024 * 1024 * 10 then\n        set end of largeFiles to filePath\n    end if\nend repeat\n\nreturn largeFiles\n```"
  },
  {
    "task": "Identify all events occurring on weekends from an event schedule.",
    "code": "```applescript\nset eventSchedule to {{title:\"Meeting\", date:date \"Saturday, October 14, 2023 at 10:00:00 AM\"}, {title:\"Workshop\", date:date \"Monday, October 16, 2023 at 2:00:00 PM\"}, {title:\"Conference\", date:date \"Sunday, October 15, 2023 at 11:00:00 AM\"}}\n\nset weekendEvents to my filterWeekendEvents(eventSchedule)\n\non filterWeekendEvents(events)\n\tset weekendEvents to {}\n\trepeat with anEvent in events\n\t\tset eventDate to date of anEvent\n\t\tset weekday to weekday of eventDate\n\t\tif weekday is in {Saturday, Sunday} then\n\t\t\tcopy anEvent to end of weekendEvents\n\t\tend if\n\tend repeat\n\treturn weekendEvents\nend filterWeekendEvents\n```"
  },
  {
    "task": "Find all emails from a specific domain in an email list.",
    "code": "```applescript\nset emailList to {\"john@example.com\", \"alice@test.com\", \"bob@example.com\", \"carol@sample.com\"}\nset targetDomain to \"example.com\"\n\nset filteredEmails to my filterEmails(emailList, targetDomain)\n\non filterEmails(emailList, targetDomain)\n\tset filteredList to {}\n\trepeat with email in emailList\n\t\tif email ends with (\"@\" & targetDomain) then\n\t\t\tcopy email to end of filteredList\n\t\tend if\n\tend repeat\n\treturn filteredList\nend filterEmails\n```"
  },
  {
    "task": "Filter out all people not living in a specific city from a contact list.",
    "code": "```applescript\nset targetCity to \"Specific City\"\nset filteredContacts to {}\n\ntell application \"Contacts\"\n    set allContacts to every person\n    repeat with aContact in allContacts\n        set contactAddresses to every address of aContact\n        repeat with anAddress in contactAddresses\n            if city of anAddress is targetCity then\n                copy aContact to end of filteredContacts\n                exit repeat\n            end if\n        end repeat\n    end repeat\nend tell\n\nfilteredContacts\n```"
  },
  {
    "task": "Select all rectangles with an area greater than 50 from a list of rectangles.",
    "code": "```applescript\nset rectangles to {{width: 3, height: 4}, {width: 10, height: 6}, {width: 5, height: 5}, {width: 4, height: 12}}\n\nset filteredRectangles to my filterRectangles(rectangles, 50)\n\non filterRectangles(rectList, minArea)\n\tset selectedRects to {}\n\trepeat with rect in rectList\n\t\tset {width:w, height:h} to rect\n\t\tif (w * h) > minArea then\n\t\t\tset end of selectedRects to rect\n\t\tend if\n\tend repeat\n\treturn selectedRects\nend filterRectangles\n```"
  },
  {
    "task": "Extract all elements that are not null from a collection.",
    "code": "```applescript\nset myList to {1, missing value, 2, 3, missing value, 4}\nset filteredList to my filter notNull from myList\n\non filter(fn, lst)\n\tset output to {}\n\trepeat with elem in lst\n\t\tif fn's (contents of elem) then set end of output to contents of elem\n\tend repeat\n\treturn output\nend filter\n\non notNull(x)\n\treturn x is not missing value\nend notNull\n```"
  },
  {
    "task": "Identify all registered voters over the age of 18 from a voter registration list.",
    "code": "```applescript\nset voterRegistrationList to {\u00ac\n\t{name:\"John Doe\", age:17, registered:true}, \u00ac\n\t{name:\"Jane Smith\", age:25, registered:true}, \u00ac\n\t{name:\"Emily Johnson\", age:19, registered:false}, \u00ac\n\t{name:\"Michael Brown\", age:22, registered:true}, \u00ac\n\t{name:\"Jessica Davis\", age:16, registered:true}}\n\nset eligibleVoters to my filterVoters(voterRegistrationList)\n\non filterVoters(voterList)\n\tset filteredList to {}\n\trepeat with voter in voterList\n\t\tset voterAge to age of voter\n\t\tset isRegistered to registered of voter\n\t\tif voterAge > 18 and isRegistered then\n\t\t\tset end of filteredList to voter\n\t\tend if\n\tend repeat\n\treturn filteredList\nend filterVoters\n```"
  },
  {
    "task": "Select all cars manufactured after 2015 from a vehicle registry.",
    "code": "```applescript\nset vehicleRegistry to {\u00ac\n\t{name:\"Car A\", year:2010}, \u00ac\n\t{name:\"Car B\", year:2016}, \u00ac\n\t{name:\"Car C\", year:2018}, \u00ac\n\t{name:\"Car D\", year:2014}}\n\nset filteredCars to {}\nrepeat with car in vehicleRegistry\n\tif year of car > 2015 then\n\t\tcopy car to end of filteredCars\n\tend if\nend repeat\n\nreturn filteredCars\n```"
  },
  {
    "task": "Filter out all negative numbers from a dataset of integers.",
    "code": "```applescript\nset integerList to {3, -1, 7, -4, 5, -6, 9, 0, -2, 8}\nset positiveNumbers to {}\n\nrepeat with num in integerList\n\tif num \u2265 0 then\n\t\tset end of positiveNumbers to num\n\tend if\nend repeat\n\nreturn positiveNumbers\n```"
  },
  {
    "task": "Extract all characters from a string that are uppercase.",
    "code": "```applescript\nset inputString to \"YourInputStringHere\"\nset uppercaseChars to \"\"\n\nrepeat with i from 1 to count of characters of inputString\n    set currentChar to character i of inputString\n    if currentChar is in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" then\n        set uppercaseChars to uppercaseChars & currentChar\n    end if\nend repeat\n\nreturn uppercaseChars\n```"
  },
  {
    "task": "Identify all projects with a deadline within the next month from a project database.",
    "code": "```applescript\nset currentDate to current date\nset nextMonthDate to (currentDate) + (30 * days)\n\nset projectDatabase to {\u00ac\n\t{name:\"Project A\", deadline:date \"2023-11-15\"}, \u00ac\n\t{name:\"Project B\", deadline:date \"2023-10-30\"}, \u00ac\n\t{name:\"Project C\", deadline:date \"2023-12-05\"}, \u00ac\n\t{name:\"Project D\", deadline:date \"2023-11-01\"}}\n\nset projectsDueNextMonth to my filterProjects(projectDatabase, currentDate, nextMonthDate)\n\non filterProjects(projects, startDate, endDate)\n\tset filteredProjects to {}\n\trepeat with project in projects\n\t\tset projectDeadline to deadline of project\n\t\tif projectDeadline \u2265 startDate and projectDeadline \u2264 endDate then\n\t\t\tset end of filteredProjects to project\n\t\tend if\n\tend repeat\n\treturn filteredProjects\nend filterProjects\n```"
  },
  {
    "task": "Select all athletes with a score higher than 90 from a competition result list.",
    "code": "```applescript\nset competitionResults to {{\"John\", 85}, {\"Alice\", 92}, {\"Bob\", 88}, {\"Diana\", 95}}\n\nset filteredAthletes to {}\nrepeat with athleteScorePair in competitionResults\n\tset athleteName to item 1 of athleteScorePair\n\tset athleteScore to item 2 of athleteScorePair\n\tif athleteScore > 90 then\n\t\tcopy athleteName to end of filteredAthletes\n\tend if\nend repeat\n\nfilteredAthletes\n```"
  },
  {
    "task": "Filter out all strings that do not contain vowels from a list of words.",
    "code": "```applescript\non hasVowel(aString)\n\tset vowels to {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"}\n\trepeat with aVowel in vowels\n\t\tif aString contains aVowel then return true\n\tend repeat\n\treturn false\nend hasVowel\n\nset wordList to {\"sky\", \"apple\", \"fly\", \"banana\", \"dry\", \"orange\"}\nset vowelWords to {}\nrepeat with aWord in wordList\n\tif hasVowel(aWord) then set end of vowelWords to aWord\nend repeat\nvowelWords\n```"
  },
  {
    "task": "Extract all dates that fall on a weekday from a calendar.",
    "code": "```applescript\nset weekdayDates to {}\ntell application \"Calendar\"\n\tset allDates to {}\n\trepeat with c in calendars\n\t\tset allDates to allDates & (get start date of every event of c)\n\tend repeat\n\tset weekdayDates to my filterWeekdays(allDates)\nend tell\n\non filterWeekdays(dates)\n\tset weekdays to {}\n\trepeat with d in dates\n\t\tset dayOfWeek to weekday of (d as date)\n\t\tif dayOfWeek is not in {Sunday, Saturday} then\n\t\t\tset end of weekdays to d\n\t\tend if\n\tend repeat\n\treturn weekdays\nend filterWeekdays\n```"
  },
  {
    "task": "Find all software versions that are stable releases from a list of software versions.",
    "code": "```applescript\nset softwareVersions to {\"1.0-alpha\", \"1.0-beta\", \"1.0\", \"2.0-alpha\", \"2.0\", \"3.0-beta\", \"3.0\"}\nset stableVersions to my filterStableReleases(softwareVersions)\n\non filterStableReleases(versionList)\n\tset stableList to {}\n\trepeat with version in versionList\n\t\tif version does not contain \"-\" then\n\t\t\tcopy version to end of stableList\n\t\tend if\n\tend repeat\n\treturn stableList\nend filterStableReleases\n```"
  },
  {
    "task": "Select all temperatures above freezing from a weather report.",
    "code": "```applescript\nset weatherReport to {32, 28, 41, 35, 30, 50, 20}\nset freezingPoint to 32\n\nset temperaturesAboveFreezing to my filterAboveFreezing(weatherReport, freezingPoint)\n\non filterAboveFreezing(temps, threshold)\n\tset filteredTemps to {}\n\trepeat with temp in temps\n\t\tif temp > threshold then\n\t\t\tset end of filteredTemps to temp\n\t\tend if\n\tend repeat\n\treturn filteredTemps\nend filterAboveFreezing\n\ntemperaturesAboveFreezing\n```"
  },
  {
    "task": "Identify all countries with a GDP per capita above $40,000 from a country dataset.",
    "code": "```applescript\nset countries to {{\"United States\", 65094}, {\"Germany\", 50206}, {\"Japan\", 41463}, {\"India\", 2099}, {\"Brazil\", 8940}}\n\nset filteredCountries to {}\nrepeat with countryInfo in countries\n\tset {countryName, gdpPerCapita} to countryInfo\n\tif gdpPerCapita > 40000 then\n\t\tset end of filteredCountries to countryName\n\tend if\nend repeat\n\nfilteredCountries\n```"
  },
  {
    "task": "Filter out all names shorter than four letters from a roster.",
    "code": "```applescript\nset roster to {\"John\", \"Ann\", \"Mike\", \"Sue\", \"Tom\", \"Chris\", \"Eve\"}\nset filteredRoster to {}\n\nrepeat with name in roster\n    if (count of characters of name) \u2265 4 then\n        set end of filteredRoster to name\n    end if\nend repeat\n\nfilteredRoster\n```"
  },
  {
    "task": "Extract all numbers divisible by five from a sequence.",
    "code": "```applescript\nset sequence to {1, 5, 10, 12, 15, 18, 20, 22, 25}\nset divisibleByFive to {}\n\nrepeat with num in sequence\n    if num mod 5 is equal to 0 then\n        set end of divisibleByFive to num\n    end if\nend repeat\n\nreturn divisibleByFive\n```"
  },
  {
    "task": "Select all movies with a rating above 4 stars from a film review site.",
    "code": "```applescript\nset movies to {{\"title\": \"Movie A\", \"rating\": 3.5}, {\"title\": \"Movie B\", \"rating\": 4.5}, {\"title\": \"Movie C\", \"rating\": 5.0}}\n\nset filteredMovies to my filterMoviesWithRatingAbove(movies, 4.0)\n\non filterMoviesWithRatingAbove(movieList, minRating)\n\tset filteredList to {}\n\trepeat with aMovie in movieList\n\t\tif rating of aMovie > minRating then\n\t\t\tset end of filteredList to aMovie\n\t\tend if\n\tend repeat\n\treturn filteredList\nend filterMoviesWithRatingAbove\n```"
  },
  {
    "task": "Find all jobs with a salary above $50,000 from a job listing.",
    "code": "```applescript\nset jobListing to {\u00ac\n    {title:\"Developer\", salary:60000}, \u00ac\n    {title:\"Designer\", salary:48000}, \u00ac\n    {title:\"Manager\", salary:75000}, \u00ac\n    {title:\"Intern\", salary:30000} \u00ac\n}\n\nset highSalaryJobs to {}\nrepeat with job in jobListing\n    if salary of job > 50000 then\n        set end of highSalaryJobs to job\n    end if\nend repeat\n\nreturn highSalaryJobs\n```"
  },
  {
    "task": "Filter out all entries without an email address from a contact form submission list.",
    "code": "```applescript\nset contactFormSubmissions to {\u00ac\n\t{name:\"John Doe\", email:\"john@example.com\", phone:\"123-456-7890\"}, \u00ac\n\t{name:\"Jane Smith\", email:\"\", phone:\"987-654-3210\"}, \u00ac\n\t{name:\"Emily Johnson\", email:\"emily@example.com\", phone:\"555-555-5555\"}, \u00ac\n\t{name:\"Michael Brown\", email:\"\", phone:\"111-222-3333\"} \u00ac\n}\n\nset filteredSubmissions to {}\nrepeat with contact in contactFormSubmissions\n\tif email of contact is not \"\" then\n\t\tset end of filteredSubmissions to contact\n\tend if\nend repeat\n\nfilteredSubmissions\n```"
  },
  {
    "task": "Identify all animals weighing more than 50kg from a zoo inventory.",
    "code": "```applescript\nset zooInventory to {{\"Elephant\", 5000}, {\"Monkey\", 30}, {\"Giraffe\", 900}, {\"Lion\", 190}, {\"Penguin\", 23}, {\"Zebra\", 320}}\n\nset heavyAnimals to {}\nrepeat with animal in zooInventory\n\tset {animalName, animalWeight} to animal\n\tif animalWeight > 50 then\n\t\tset end of heavyAnimals to animalName\n\tend if\nend repeat\n\nreturn heavyAnimals\n```"
  },
  {
    "task": "Select all songs with a duration longer than three minutes from a playlist.",
    "code": "```applescript\ntell application \"Music\"\n    set myPlaylist to playlist \"Your Playlist Name\"\n    set longSongs to {}\n    repeat with t in (get a reference to every track of myPlaylist)\n        if duration of t > 180 then\n            copy t to end of longSongs\n        end if\n    end repeat\nend tell\n```"
  },
  {
    "task": "Extract all accounts with a balance below zero from a bank statement.",
    "code": "```applescript\n-- Assume bankStatement is a list of records where each record has a 'balance' property\nset bankStatement to {{accountID: 1, balance: -50}, {accountID: 2, balance: 100}, {accountID: 3, balance: -200}}\n\nset accountsBelowZero to my filterAccountsWithNegativeBalance(bankStatement)\n\non filterAccountsWithNegativeBalance(statement)\n\tset filteredAccounts to {}\n\trepeat with account in statement\n\t\tif balance of account < 0 then\n\t\t\tset end of filteredAccounts to account\n\t\tend if\n\tend repeat\n\treturn filteredAccounts\nend filterAccountsWithNegativeBalance\n```"
  },
  {
    "task": "Filter out all non-alphabetic characters from a string of text.",
    "code": "```applescript\nset inputText to \"Your input string here!\"\nset filteredText to filterAlphabeticCharacters(inputText)\n\non filterAlphabeticCharacters(inputString)\n\tset alphabeticChars to \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\tset outputString to \"\"\n\trepeat with i from 1 to (count of inputString)\n\t\tset currentChar to character i of inputString\n\t\tif alphabeticChars contains currentChar then\n\t\t\tset outputString to outputString & currentChar\n\t\tend if\n\tend repeat\n\treturn outputString\nend filterAlphabeticCharacters\n```"
  },
  {
    "task": "Select all participants who scored above average in a competition.",
    "code": "```applescript\nset participants to {{\"Alice\", 85}, {\"Bob\", 75}, {\"Charlie\", 95}, {\"David\", 60}, {\"Eva\", 70}}\n\nset total to 0\nset count to 0\n\nrepeat with participant in participants\n\tset total to total + item 2 of participant\n\tset count to count + 1\nend repeat\n\nset averageScore to total / count\n\nset aboveAverageParticipants to {}\n\nrepeat with participant in participants\n\tif item 2 of participant > averageScore then\n\t\tset end of aboveAverageParticipants to item 1 of participant\n\tend if\nend repeat\n\nreturn aboveAverageParticipants\n```"
  },
  {
    "task": "Find all houses priced under $300,000 from a real estate database.",
    "code": "```applescript\nset realEstateDatabase to {\u00ac\n\t{\"address\": \"123 Maple St\", \"price\": 250000}, \u00ac\n\t{\"address\": \"456 Oak St\", \"price\": 320000}, \u00ac\n\t{\"address\": \"789 Pine St\", \"price\": 275000}, \u00ac\n\t{\"address\": \"321 Elm St\", \"price\": 350000}}\n\nset affordableHouses to my filterHouses(realEstateDatabase, 300000)\n\non filterHouses(database, maxPrice)\n\tscript Filter\n\t\tproperty maxPrice : maxPrice\n\t\ton isUnderPrice(house)\n\t\t\treturn (house's price) < maxPrice\n\t\tend isUnderPrice\n\tend script\n\t\n\treturn database's items where Filter's isUnderPrice\nend filterHouses\n```"
  },
  {
    "task": "Identify all plants that bloom in spring from a botanical catalog.",
    "code": "```applescript\nset botanicalCatalog to {\u00ac\n\t{name:\"Rose\", bloomSeason:\"Spring\"}, \u00ac\n\t{name:\"Tulip\", bloomSeason:\"Spring\"}, \u00ac\n\t{name:\"Daffodil\", bloomSeason:\"Spring\"}, \u00ac\n\t{name:\"Sunflower\", bloomSeason:\"Summer\"}, \u00ac\n\t{name:\"Chrysanthemum\", bloomSeason:\"Fall\"}}\n\nset springBloomers to my filterPlants(botanicalCatalog, \"Spring\")\n\non filterPlants(plants, season)\n\tset filteredPlants to {}\n\trepeat with plant in plants\n\t\tif bloomSeason of plant is equal to season then\n\t\t\tset end of filteredPlants to plant\n\t\tend if\n\tend repeat\n\treturn filteredPlants\nend filterPlants\n```"
  },
  {
    "task": "Extract all passwords that are longer than eight characters from a user database.",
    "code": "```applescript\nset userDatabase to {\"password123\", \"short\", \"longenoughpassword\", \"tiny\", \"adequate\"}\n\nset longPasswords to my filterPasswords(userDatabase)\n\non filterPasswords(passwords)\n\tset longPasswords to {}\n\trepeat with password in passwords\n\t\tif (length of password) > 8 then\n\t\t\tset end of longPasswords to password\n\t\tend if\n\tend repeat\n\treturn longPasswords\nend filterPasswords\n```"
  },
  {
    "task": "Filter out all projects that are not yet started from a project management tool.",
    "code": "```applescript\nset projects to {{\"name\": \"Project A\", \"status\": \"not started\"}, {\"name\": \"Project B\", \"status\": \"in progress\"}, {\"name\": \"Project C\", \"status\": \"completed\"}, {\"name\": \"Project D\", \"status\": \"not started\"}}\n\nset startedProjects to my filterStartedProjects(projects)\n\non filterStartedProjects(projectsList)\n\tset filteredProjects to {}\n\trepeat with project in projectsList\n\t\tif (status of project) is not \"not started\" then\n\t\t\tset end of filteredProjects to project\n\t\tend if\n\tend repeat\n\treturn filteredProjects\nend filterStartedProjects\n```"
  },
  {
    "task": "Select all days with temperatures exceeding 25\u00b0C from a climate report.",
    "code": "```applescript\nset climateReport to {{day:\"Monday\", temperature:22}, {day:\"Tuesday\", temperature:27}, {day:\"Wednesday\", temperature:30}, {day:\"Thursday\", temperature:24}, {day:\"Friday\", temperature:29}}\n\nset hotDays to {}\nrepeat with record in climateReport\n    if temperature of record > 25 then\n        set end of hotDays to day of record\n    end if\nend repeat\n\nreturn hotDays\n```"
  },
  {
    "task": "Find all recipes that are vegetarian from a cookbook.",
    "code": "```applescript\nset cookbook to {\u00ac\n\t{name:\"Spaghetti Bolognese\", vegetarian:false}, \u00ac\n\t{name:\"Vegetable Stir Fry\", vegetarian:true}, \u00ac\n\t{name:\"Chicken Curry\", vegetarian:false}, \u00ac\n\t{name:\"Caprese Salad\", vegetarian:true}, \u00ac\n\t{name:\"Beef Stew\", vegetarian:false} \u00ac\n}\n\nset vegetarianRecipes to {}\nrepeat with recipe in cookbook\n\tif vegetarian of recipe then\n\t\tset end of vegetarianRecipes to recipe\n\tend if\nend repeat\n\nreturn vegetarianRecipes\n```"
  },
  {
    "task": "Identify all articles that mention a specific keyword from a news feed.",
    "code": "```applescript\nset keyword to \"specific keyword\"\nset newsFeed to {\"Article one mentioning specific keyword\", \"Another article\", \"Yet another article mentioning specific keyword\", \"No mention here\"}\n\nset filteredArticles to {}\nrepeat with article in newsFeed\n    if article contains keyword then\n        set end of filteredArticles to article\n    end if\nend repeat\n\nreturn filteredArticles\n```"
  },
  {
    "task": "Extract all files with the '.jpg' extension from a directory.",
    "code": "```applescript\nset directoryPath to POSIX file \"/path/to/directory\" as alias\n\ntell application \"Finder\"\n    set jpgFiles to every file of folder directoryPath whose name extension is \"jpg\"\nend tell\n```"
  },
  {
    "task": "Filter out all transactions that are not categorized from a financial statement.",
    "code": "```applescript\nset transactions to {\u00ac\n\t{name:\"Transaction 1\", category:\"Food\"}, \u00ac\n\t{name:\"Transaction 2\", category:\"\"}, \u00ac\n\t{name:\"Transaction 3\", category:\"Transportation\"}, \u00ac\n\t{name:\"Transaction 4\", category:\"\"}, \u00ac\n\t{name:\"Transaction 5\", category:\"Utilities\"}}\n\nset categorizedTransactions to {}\nrepeat with transaction in transactions\n\tif category of transaction is not \"\" then\n\t\tset end of categorizedTransactions to transaction\n\tend if\nend repeat\n\ncategorizedTransactions\n```"
  },
  {
    "task": "Select all paintings created before 1900 from an art gallery collection.",
    "code": "```applescript\nset artGallery to {\u00ac\n\t{name:\"Mona Lisa\", year:1503}, \u00ac\n\t{name:\"Starry Night\", year:1889}, \u00ac\n\t{name:\"The Persistence of Memory\", year:1931}, \u00ac\n\t{name:\"The Scream\", year:1893}, \u00ac\n\t{name:\"Girl with a Pearl Earring\", year:1665}}\n\nset oldPaintings to {}\nrepeat with painting in artGallery\n\tif year of painting < 1900 then\n\t\tset end of oldPaintings to painting\n\tend if\nend repeat\n\nreturn oldPaintings\n```"
  },
  {
    "task": "Find all students with perfect attendance from a school record.",
    "code": "```applescript\nset schoolRecord to {\u00ac\n\t{name:\"Alice\", attendance:100}, \u00ac\n\t{name:\"Bob\", attendance:95}, \u00ac\n\t{name:\"Charlie\", attendance:100}, \u00ac\n\t{name:\"David\", attendance:85}}\n\nset perfectAttendanceStudents to my filterList(schoolRecord, 100)\n\non filterList(recordList, perfectAttendance)\n\tset filteredList to {}\n\trepeat with student in recordList\n\t\tif attendance of student is perfectAttendance then\n\t\t\tset end of filteredList to student\n\t\tend if\n\tend repeat\n\treturn filteredList\nend filterList\n```"
  },
  {
    "task": "Identify all messages sent by a specific user from a chat application.",
    "code": "```applescript\nset targetUser to \"specificUserName\"\nset filteredMessages to {}\nset allMessages to {\u00ac\n    {user:\"user1\", message:\"Hello\"}, \u00ac\n    {user:\"specificUserName\", message:\"Hi\"}, \u00ac\n    {user:\"user2\", message:\"How are you?\"}, \u00ac\n    {user:\"specificUserName\", message:\"Good morning\"}, \u00ac\n    {user:\"user1\", message:\"Goodbye\"} \u00ac\n}\n\nrepeat with aMessage in allMessages\n    if user of aMessage is targetUser then\n        set end of filteredMessages to aMessage\n    end if\nend repeat\n\nreturn filteredMessages\n```"
  },
  {
    "task": "Extract all elements greater than 100 from an array of numbers.",
    "code": "```applescript\nset inputArray to {50, 150, 200, 75, 125, 90, 300}\nset filteredArray to {}\n\nrepeat with i from 1 to count of inputArray\n    set currentElement to item i of inputArray\n    if currentElement > 100 then\n        set end of filteredArray to currentElement\n    end if\nend repeat\n\nfilteredArray\n```"
  },
  {
    "task": "Filter out all words that do not end in 'ed' from a paragraph.",
    "code": "```applescript\nset theParagraph to \"Your example paragraph goes here.\"\n\nset theWords to words of theParagraph\nset filteredWords to {}\nrepeat with aWord in theWords\n\tif aWord ends with \"ed\" then\n\t\tset end of filteredWords to aWord\n\tend if\nend repeat\n\nset filteredParagraph to filteredWords as text\n```"
  },
  {
    "task": "Select all flights departing before noon from a flight schedule.",
    "code": "```applescript\nset flightSchedule to {{\"Flight 101\", \"10:30 AM\"}, {\"Flight 202\", \"12:15 PM\"}, {\"Flight 303\", \"9:45 AM\"}, {\"Flight 404\", \"3:00 PM\"}, {\"Flight 505\", \"11:59 AM\"}}\n\nset morningFlights to {}\nrepeat with flight in flightSchedule\n\tset flightTime to item 2 of flight\n\tset hourMinute to first word of flightTime\n\tset timePeriod to second word of flightTime\n\tset hour to first word of hourMinute as integer\n\t\n\tif (timePeriod is \"AM\") or (hour is 12 and timePeriod is \"PM\") then\n\t\tset end of morningFlights to flight\n\tend if\nend repeat\n\nreturn morningFlights\n```"
  },
  {
    "task": "Find all products priced above $20 from an online store inventory.",
    "code": "```applescript\nset inventory to {\u00ac\n\t{name:\"Product 1\", price:15}, \u00ac\n\t{name:\"Product 2\", price:35}, \u00ac\n\t{name:\"Product 3\", price:25}, \u00ac\n\t{name:\"Product 4\", price:10}, \u00ac\n\t{name:\"Product 5\", price:50}}\n\nset expensiveProducts to {}\nrepeat with item in inventory\n\tif price of item > 20 then\n\t\tset end of expensiveProducts to item\n\tend if\nend repeat\n\nreturn expensiveProducts\n```"
  },
  {
    "task": "Identify all sessions longer than one hour from a webinar series.",
    "code": "```applescript\nset webinarSessions to {{\"Session A\", 45}, {\"Session B\", 75}, {\"Session C\", 120}, {\"Session D\", 30}}\nset longSessions to my filterSessions(webinarSessions, 60)\n\non filterSessions(sessions, threshold)\n\tset output to {}\n\trepeat with session in sessions\n\t\tset sessionDuration to item 2 of session\n\t\tif sessionDuration > threshold then\n\t\t\tset end of output to session\n\t\tend if\n\tend repeat\n\treturn output\nend filterSessions\n```"
  },
  {
    "task": "Extract all images with a resolution higher than 1080p from a photo library.",
    "code": "```applescript\ntell application \"Photos\"\n    set highResImages to {}\n    set allImages to media items\n    repeat with img in allImages\n        if (width of img > 1920) and (height of img > 1080) then\n            set end of highResImages to img\n        end if\n    end repeat\nend tell\n```"
  },
  {
    "task": "Filter out all responses that are not 'yes' or 'no' from a survey result.",
    "code": "```applescript\nset surveyResults to {\"yes\", \"maybe\", \"no\", \"yes\", \"no\", \"unknown\", \"no\", \"yes\", \"whatever\"}\nset filteredResults to {}\n\nrepeat with response in surveyResults\n    if response is \"yes\" or response is \"no\" then\n        set end of filteredResults to response\n    end if\nend repeat\n\nreturn filteredResults\n```"
  },
  {
    "task": "Select all tweets with more than 100 likes from a Twitter feed.",
    "code": "```applescript\nset tweets to {\u00ac\n\t{name:\"Tweet 1\", likes:120}, \u00ac\n\t{name:\"Tweet 2\", likes:90}, \u00ac\n\t{name:\"Tweet 3\", likes:200}, \u00ac\n\t{name:\"Tweet 4\", likes:50}, \u00ac\n\t{name:\"Tweet 5\", likes:300} \u00ac\n}\n\nset filteredTweets to {}\nrepeat with tweet in tweets\n\tset tweetLikes to likes of tweet\n\tif tweetLikes > 100 then\n\t\tset end of filteredTweets to tweet\n\tend if\nend repeat\n\nfilteredTweets\n```"
  },
  {
    "task": "Find all links that are broken from a webpage.",
    "code": "```applescript\nset theURL to \"http://example.com\" -- Replace with the target URL\nset brokenLinks to {}\n\ntell application \"Safari\"\n\topen location theURL\n\tdelay 5 -- Wait for page to load\n\tset pageContent to source of front document\nend tell\n\nset linkMatches to {}\nset linkPattern to \"<a\\\\s+href=\\\"(http[^\\\"]+)\\\"\" -- Regex pattern for extracting links\n\n-- Extract links using regex\nset AppleScript's text item delimiters to \"\\n\"\nset linkMatches to paragraphs of (do shell script \"echo \" & quoted form of pageContent & \" | grep -oE \" & quoted form of linkPattern)\n\n-- Extract URLs from regex matches\nset links to {}\nrepeat with linkMatch in linkMatches\n\tset end of links to (do shell script \"echo \" & quoted form of linkMatch & \" | sed -E 's/<a\\\\s+href=\\\"//;s/\\\">//'\")\nend repeat\n\n-- Function to check if a link is broken\non isBroken(link)\n\ttry\n\t\tset statusCode to do shell script \"curl -o /dev/null --silent --head --write-out '%{http_code}' \" & quoted form of link\n\t\tif statusCode is not \"200\" then\n\t\t\treturn true\n\t\tend if\n\tend try\n\treturn false\nend isBroken\n\n-- Filter broken links\nrepeat with link in links\n\tif isBroken(link) then\n\t\tset end of brokenLinks to link\n\tend if\nend repeat\n\nreturn brokenLinks\n```"
  },
  {
    "task": "Identify all machines that are currently offline from a network monitoring tool.",
    "code": "```applescript\nset offlineMachines to {}\nset machines to {{\"name\": \"Router\", \"status\": \"online\"}, {\"name\": \"Switch\", \"status\": \"offline\"}, {\"name\": \"Server\", \"status\": \"offline\"}, {\"name\": \"Firewall\", \"status\": \"online\"}}\n\nrepeat with machine in machines\n    if (status of machine) is equal to \"offline\" then\n        copy (name of machine) to end of offlineMachines\n    end if\nend repeat\n\nreturn offlineMachines\n```"
  },
  {
    "task": "Extract all invoices with a due date in the current month from an accounting system.",
    "code": "```applescript\nset currentDate to current date\nset currentMonth to month of currentDate\nset currentYear to year of currentDate\n\n-- Assuming invoices is a list of records with a dueDate property\nset invoices to {{dueDate:date \"2023-10-05\"}, {dueDate:date \"2023-11-15\"}, {dueDate:date \"2023-10-25\"}}\n\nset filteredInvoices to my filterInvoicesByCurrentMonth(invoices, currentMonth, currentYear)\n\non filterInvoicesByCurrentMonth(invoices, currentMonth, currentYear)\n\tset filteredList to {}\n\trepeat with invoice in invoices\n\t\tset dueDate to dueDate of invoice\n\t\tif month of dueDate is currentMonth and year of dueDate is currentYear then\n\t\t\tset end of filteredList to invoice\n\t\tend if\n\tend repeat\n\treturn filteredList\nend filterInvoicesByCurrentMonth\n```"
  },
  {
    "task": "Filter out all lines in a file that start with a '#' from a configuration file.",
    "code": "```applescript\nset inputFile to \"path:to:your:config.file\"\nset outputFile to \"path:to:your:filtered_config.file\"\n\nset filteredLines to {}\nset fileReference to open for access inputFile\nset fileContents to read fileReference\nclose access fileReference\n\nset fileLines to paragraphs of fileContents\nrepeat with line in fileLines\n    if line does not start with \"#\" then\n        set end of filteredLines to line\n    end if\nend repeat\n\nset outputReference to open for access outputFile with write permission\nset eof outputReference to 0\nrepeat with filteredLine in filteredLines\n    write filteredLine & linefeed to outputReference\nend repeat\nclose access outputReference\n```"
  },
  {
    "task": "Select all posts with a comment count higher than 50 from a blog.",
    "code": "```applescript\nset blogPosts to {\u00ac\n\t{name:\"Post 1\", comments:45}, \u00ac\n\t{name:\"Post 2\", comments:60}, \u00ac\n\t{name:\"Post 3\", comments:30}, \u00ac\n\t{name:\"Post 4\", comments:100}, \u00ac\n\t{name:\"Post 5\", comments:80} \u00ac\n}\n\nset filteredPosts to my filterPosts(blogPosts)\n\non filterPosts(posts)\n\tset result to {}\n\trepeat with post in posts\n\t\tif (post's comments) > 50 then\n\t\t\tset end of result to post\n\t\tend if\n\tend repeat\n\treturn result\nend filterPosts\n```"
  },
  {
    "task": "Find all offers that expire within the next week from a promotional database.",
    "code": "```applescript\n-- Define a sample promotional database\nset promotionalDatabase to {{offer: \"Offer1\", expiryDate: date \"October 10, 2023\"}, {offer: \"Offer2\", expiryDate: date \"October 15, 2023\"}, {offer: \"Offer3\", expiryDate: date \"October 20, 2023\"}}\n\n-- Get the current date\nset currentDate to current date\n\n-- Calculate the date one week from now\nset oneWeekLater to currentDate + (7 * days)\n\n-- Define a function to filter offers expiring within the next week\non offersExpiringSoon(offers)\n    set expiringOffers to {}\n    repeat with anOffer in offers\n        set expiryDate to expiryDate of anOffer\n        if expiryDate > currentDate and expiryDate \u2264 oneWeekLater then\n            set end of expiringOffers to anOffer\n        end if\n    end repeat\n    return expiringOffers\nend offersExpiringSoon\n\n-- Get the list of offers expiring within the next week\nset expiringOffers to offersExpiringSoon(promotionalDatabase)\n```"
  },
  {
    "task": "Identify all items that are on sale from a shopping catalog.",
    "code": "```applescript\nset shoppingCatalog to {\u00ac\n\t{name:\"Shirt\", price:20, onSale:true}, \u00ac\n\t{name:\"Pants\", price:35, onSale:false}, \u00ac\n\t{name:\"Hat\", price:15, onSale:true}, \u00ac\n\t{name:\"Shoes\", price:50, onSale:false} \u00ac\n\t}\n\nset saleItems to my filterCatalog(shoppingCatalog)\n\non filterCatalog(catalog)\n\tset saleList to {}\n\trepeat with item in catalog\n\t\tif item's onSale then\n\t\t\tset end of saleList to item\n\t\tend if\n\tend repeat\n\treturn saleList\nend filterCatalog\n```"
  },
  {
    "task": "Extract all notes that mention 'urgent' from a meeting record.",
    "code": "```applescript\nset meetingRecord to \"Review project timeline. Discuss budget. Urgent: finalize contract. Plan team building. Urgent: submit report.\"\nset urgentNotes to filterUrgentNotes(meetingRecord)\n\non filterUrgentNotes(record)\n\tset notes to paragraphs of record\n\tset urgentNotes to {}\n\trepeat with note in notes\n\t\tif note contains \"urgent\" then\n\t\t\tset end of urgentNotes to note\n\t\tend if\n\tend repeat\n\treturn urgentNotes\nend filterUrgentNotes\n```"
  },
  {
    "task": "Filter out all numbers that do not have a remainder when divided by two from a list.",
    "code": "```applescript\nset numbers to {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\nset filteredNumbers to {}\n\nrepeat with n in numbers\n    if n mod 2 is not equal to 0 then\n        set end of filteredNumbers to n\n    end if\nend repeat\n\nfilteredNumbers\n```"
  },
  {
    "task": "Select all concerts happening in the summer from an event calendar.",
    "code": "```applescript\nset summerConcerts to {}\nset events to {\u00ac\n\t{name:\"Concert A\", date:date \"Monday, June 15, 2023\"}, \u00ac\n\t{name:\"Concert B\", date:date \"Thursday, July 20, 2023\"}, \u00ac\n\t{name:\"Concert C\", date:date \"Sunday, August 25, 2023\"}, \u00ac\n\t{name:\"Concert D\", date:date \"Saturday, September 10, 2023\"}}\n\nset summerMonths to {6, 7, 8}\n\nrepeat with anEvent in events\n\tset eventDate to date of anEvent\n\tset eventMonth to month of eventDate as integer\n\tif eventMonth is in summerMonths then\n\t\tcopy anEvent to end of summerConcerts\n\tend if\nend repeat\n\nsummerConcerts\n```"
  },
  {
    "task": "Find all users with more than 1000 followers from a social media platform.",
    "code": "```applescript\n-- Sample data structure\nset users to {\u00ac\n\t{name:\"Alice\", followers:1500}, \u00ac\n\t{name:\"Bob\", followers:950}, \u00ac\n\t{name:\"Carol\", followers:1200}, \u00ac\n\t{name:\"David\", followers:800} \u00ac\n}\n\n-- Function to filter users with more than 1000 followers\non filterUsersWithMoreThan1000Followers(userList)\n\tset filteredUsers to {}\n\trepeat with currentUser in userList\n\t\tif (followers of currentUser) > 1000 then\n\t\t\tset end of filteredUsers to currentUser\n\t\tend if\n\tend repeat\n\treturn filteredUsers\nend filterUsersWithMoreThan1000Followers\n\n-- Execute the filter function\nset usersWithMoreThan1000Followers to filterUsersWithMoreThan1000Followers(users)\n\n-- Output the filtered list\nreturn usersWithMoreThan1000Followers\n```"
  },
  {
    "task": "Identify all stocks with a growth rate above 10% from a financial portfolio.",
    "code": "```applescript\nset financialPortfolio to {{\"AAPL\", 15}, {\"GOOGL\", 8}, {\"AMZN\", 12}, {\"MSFT\", 9}, {\"TSLA\", 11}}\n\nset filteredStocks to my functionalFilter(financialPortfolio, 10)\n\non functionalFilter(portfolio, threshold)\n\tset result to {}\n\trepeat with stock in portfolio\n\t\tset {stockName, growthRate} to stock\n\t\tif growthRate > threshold then\n\t\t\tset end of result to stockName\n\t\tend if\n\tend repeat\n\treturn result\nend functionalFilter\n```"
  },
  {
    "task": "Extract all reviews that have a five-star rating from a product review site.",
    "code": "```applescript\nset fiveStarReviews to {}\nset allReviews to {{\"review\": \"Great product!\", \"rating\": 5}, {\"review\": \"Not bad\", \"rating\": 4}, {\"review\": \"Excellent!\", \"rating\": 5}, {\"review\": \"Could be better\", \"rating\": 3}}\n\nrepeat with review in allReviews\n    if (rating of review) is equal to 5 then\n        copy review to end of fiveStarReviews\n    end if\nend repeat\n\nreturn fiveStarReviews\n```"
  },
  {
    "task": "Filter out all emails that are not flagged from an inbox.",
    "code": "```applescript\ntell application \"Mail\"\n    set theInbox to inbox\n    set flaggedEmails to {}\n    set allEmails to messages of theInbox\n    repeat with eachEmail in allEmails\n        if flagged status of eachEmail is true then\n            copy eachEmail to end of flaggedEmails\n        end if\n    end repeat\n    return flaggedEmails\nend tell\n```"
  },
  {
    "task": "Select all entries with a timestamp from the past 24 hours from a log file.",
    "code": "```applescript\nset logFile to \"/path/to/logfile.txt\"\nset currentTime to (current date)\nset oneDayAgo to currentTime - (24 * hours)\n\nset filteredEntries to {}\nset logEntries to paragraphs of (read file logFile)\n\nrepeat with entry in logEntries\n\ttry\n\t\tset entryTime to date (word 1 of entry & \" \" & word 2 of entry & \" \" & word 3 of entry & \" \" & word 4 of entry & \" \" & word 5 of entry)\n\t\tif entryTime > oneDayAgo then\n\t\t\tset end of filteredEntries to entry\n\t\tend if\n\tend try\nend repeat\n\n-- To see the filtered entries, you can display them or save to a file\n-- display dialog (filteredEntries as string)\n```"
  },
  {
    "task": "Find all books by a specific author from a library database.",
    "code": "```applescript\nset targetAuthor to \"Specific Author\"\nset libraryDatabase to {\u00ac\n\t{name:\"Book 1\", author:\"Specific Author\"}, \u00ac\n\t{name:\"Book 2\", author:\"Another Author\"}, \u00ac\n\t{name:\"Book 3\", author:\"Specific Author\"}, \u00ac\n\t{name:\"Book 4\", author:\"Different Author\"} \u00ac\n}\n\nset booksByAuthor to my filterBooksByAuthor(libraryDatabase, targetAuthor)\n\non filterBooksByAuthor(library, authorName)\n\tset filteredBooks to {}\n\trepeat with book in library\n\t\tif author of book is equal to authorName then\n\t\t\tset end of filteredBooks to book\n\t\tend if\n\tend repeat\n\treturn filteredBooks\nend filterBooksByAuthor\n```"
  },
  {
    "task": "Identify all donations above $500 from a charity fundraiser report.",
    "code": "```applescript\nset donations to {300, 750, 200, 550, 1000, 450, 600}\nset highDonations to {}\n\nrepeat with donation in donations\n    if donation > 500 then\n        set end of highDonations to donation\n    end if\nend repeat\n\nreturn highDonations\n```"
  },
  {
    "task": "Extract all assignments due in the next week from a course syllabus.",
    "code": "```applescript\nset currentDate to current date\nset nextWeekDate to currentDate + (7 * days)\n\n-- Example of a list of assignments with their due dates\nset assignments to {\u00ac\n\t{name:\"Assignment 1\", dueDate:date \"October 20, 2023\"}, \u00ac\n\t{name:\"Assignment 2\", dueDate:date \"October 25, 2023\"}, \u00ac\n\t{name:\"Assignment 3\", dueDate:date \"October 30, 2023\"}}\n\nset nextWeekAssignments to {}\nrepeat with anAssignment in assignments\n\tset dueDate to dueDate of anAssignment\n\tif dueDate \u2265 currentDate and dueDate \u2264 nextWeekDate then\n\t\tset end of nextWeekAssignments to anAssignment\n\tend if\nend repeat\n\nnextWeekAssignments\n```"
  },
  {
    "task": "Filter out all movies that are not in English from a streaming service.",
    "code": "```applescript\nset movies to {\"Movie1,English\", \"Movie2,Spanish\", \"Movie3,English\", \"Movie4,French\", \"Movie5,English\"}\n\nset englishMovies to my filterMovies(movies, \"English\")\n\non filterMovies(moviesList, language)\n\tset filteredMovies to {}\n\trepeat with movie in moviesList\n\t\tset {movieName, movieLanguage} to my splitString(movie, \",\")\n\t\tif movieLanguage is equal to language then\n\t\t\tcopy movieName to end of filteredMovies\n\t\tend if\n\tend repeat\n\treturn filteredMovies\nend filterMovies\n\non splitString(theText, theDelimiter)\n\tset AppleScript's text item delimiters to theDelimiter\n\tset theList to every text item of theText\n\tset AppleScript's text item delimiters to {\"\"} -- reset the delimiters\n\treturn theList\nend splitString\n```"
  },
  {
    "task": "Select all landmarks located in Europe from a travel guide.",
    "code": "```applescript\nset travelGuide to {\u00ac\n\t{name:\"Eiffel Tower\", location:\"Europe\"}, \u00ac\n\t{name:\"Statue of Liberty\", location:\"North America\"}, \u00ac\n\t{name:\"Colosseum\", location:\"Europe\"}, \u00ac\n\t{name:\"Great Wall of China\", location:\"Asia\"}}\n\nset europeanLandmarks to {}\nrepeat with landmark in travelGuide\n\tif location of landmark is \"Europe\" then set end of europeanLandmarks to landmark\nend repeat\n\neuropeanLandmarks\n```"
  },
  {
    "task": "Find all contracts that are set to renew next month from a contract management system.",
    "code": "```applescript\nset today to current date\nset nextMonth to (month of today) + 1\nif nextMonth is greater than 12 then\n    set nextMonth to nextMonth - 12\nend if\n\nset contracts to {{contractID:1, renewDate:date \"October 20, 2023\"}, {contractID:2, renewDate:date \"November 15, 2023\"}, {contractID:3, renewDate:date \"December 1, 2023\"}, {contractID:4, renewDate:date \"January 5, 2024\"}}\n\nset contractsToRenew to my filterContracts(contracts, nextMonth)\n\non filterContracts(contractList, monthToFilter)\n    set filteredContracts to {}\n    repeat with contract in contractList\n        set renewDate to renewDate of contract\n        if (month of renewDate) is equal to monthToFilter then\n            set end of filteredContracts to contract\n        end if\n    end repeat\n    return filteredContracts\nend filterContracts\n```"
  },
  {
    "task": "Identify all volunteer hours logged in the past year from a non-profit organization database.",
    "code": "```applescript\n-- Get the current date and calculate the date one year ago\nset currentDate to current date\nset oneYearAgo to (currentDate) - (365 * days)\n\n-- Sample data for volunteer hours logged\nset volunteerLogs to {{\"date\": date \"Monday, January 2, 2023 at 12:00:00 AM\", \"hours\": 5}, {\"date\": date \"Sunday, March 20, 2022 at 12:00:00 AM\", \"hours\": 3}, {\"date\": date \"Saturday, October 1, 2023 at 12:00:00 AM\", \"hours\": 2}}\n\n-- Define a function to filter logs from the past year\non logsFromPastYear(logs)\n\tset filteredLogs to {}\n\trepeat with logEntry in logs\n\t\tset logDate to logEntry's date\n\t\tif logDate > oneYearAgo then\n\t\t\tset end of filteredLogs to logEntry\n\t\tend if\n\tend repeat\n\treturn filteredLogs\nend logsFromPastYear\n\n-- Get the filtered volunteer logs\nset pastYearLogs to logsFromPastYear(volunteerLogs)\n\n-- Output the filtered logs\nreturn pastYearLogs\n```"
  },
  {
    "task": "Extract all elements that are not strings from a mixed-type list.",
    "code": "```applescript\nset mixedList to {1, \"apple\", 3.14, \"banana\", true, {1, 2, 3}, \"cherry\", 42}\nset nonStrings to {}\nrepeat with itemRef in mixedList\n    if class of itemRef is not text then\n        set end of nonStrings to itemRef\n    end if\nend repeat\nnonStrings\n```"
  },
  {
    "task": "Filter out all orders that are not yet shipped from an e-commerce system.",
    "code": "```applescript\nset orders to {{\"orderID\": 1, \"status\": \"shipped\"}, {\"orderID\": 2, \"status\": \"pending\"}, {\"orderID\": 3, \"status\": \"shipped\"}, {\"orderID\": 4, \"status\": \"processing\"}}\n\nset shippedOrders to my filterOrders(orders)\n\non filterOrders(orderList)\n\tset shippedOrders to {}\n\trepeat with orderItem in orderList\n\t\tif (orderItem's status is equal to \"shipped\") then\n\t\t\tset end of shippedOrders to orderItem\n\t\tend if\n\tend repeat\n\treturn shippedOrders\nend filterOrders\n```"
  },
  {
    "task": "Select all emails sent from a specific address in an email server.",
    "code": "```applescript\ntell application \"Mail\"\n    set selectedAddress to \"specific@example.com\"\n    set allMessages to {}\n    repeat with aMailbox in mailboxes\n        set allMessages to allMessages & (messages of aMailbox whose sender is equal to selectedAddress)\n    end repeat\nend tell\n```"
  },
  {
    "task": "Find all passwords with at least one special character from a security database.",
    "code": "```applescript\nset securityDatabase to {\"password123\", \"pa$$word\", \"admin!\", \"user\", \"123456\", \"qwerty!\", \"pass_word\"}\n\nset specialCharacters to \"!@#$%^&*()-_=+[]{}|;:'\\\",.<>?/`~\"\n\nset passwordsWithSpecialChars to {}\nrepeat with password in securityDatabase\n    set hasSpecialChar to false\n    repeat with char in specialCharacters\n        if password contains char then\n            set hasSpecialChar to true\n            exit repeat\n        end if\n    end repeat\n    if hasSpecialChar then\n        copy password to end of passwordsWithSpecialChars\n    end if\nend repeat\n\nreturn passwordsWithSpecialChars\n```"
  },
  {
    "task": "Identify all courses with a prerequisite from a university catalog.",
    "code": "```applescript\nset courseCatalog to {\u00ac\n\t{name:\"Mathematics 101\", prerequisite:\"None\"}, \u00ac\n\t{name:\"Physics 201\", prerequisite:\"Mathematics 101\"}, \u00ac\n\t{name:\"Chemistry 101\", prerequisite:\"None\"}, \u00ac\n\t{name:\"Biology 201\", prerequisite:\"Chemistry 101\"}, \u00ac\n\t{name:\"Computer Science 101\", prerequisite:\"None\"}, \u00ac\n\t{name:\"Engineering 201\", prerequisite:\"Physics 201\"}}\n\nset coursesWithPrerequisite to my filterCoursesWithPrerequisite(courseCatalog)\n\non filterCoursesWithPrerequisite(courseList)\n\tset filteredList to {}\n\trepeat with aCourse in courseList\n\t\tif (prerequisite of aCourse is not \"None\") then\n\t\t\tset end of filteredList to aCourse\n\t\tend if\n\tend repeat\n\treturn filteredList\nend filterCoursesWithPrerequisite\n```"
  },
  {
    "task": "Extract all genes associated with a specific trait from a genetic database.",
    "code": "```applescript\nset specificTrait to \"desired_trait\"\n\n-- Mock data for demonstration purposes\nset geneticDatabase to {\u00ac\n\t{name:\"GeneA\", trait:\"trait1\"}, \u00ac\n\t{name:\"GeneB\", trait:\"desired_trait\"}, \u00ac\n\t{name:\"GeneC\", trait:\"trait3\"}, \u00ac\n\t{name:\"GeneD\", trait:\"desired_trait\"}, \u00ac\n\t{name:\"GeneE\", trait:\"trait2\"} \u00ac\n}\n\non filterGenesByTrait(database, trait)\n\treturn filter(database, trait)\nend filterGenesByTrait\n\non filter(database, trait)\n\tset filteredGenes to {}\n\trepeat with gene in database\n\t\tif trait of gene is trait then\n\t\t\tcopy gene to end of filteredGenes\n\t\tend if\n\tend repeat\n\treturn filteredGenes\nend filter\n\nset genesAssociatedWithTrait to filterGenesByTrait(geneticDatabase, specificTrait)\n```"
  },
  {
    "task": "Filter out all investments with a risk level below medium from a portfolio.",
    "code": "```applescript\nset portfolio to {{\"Investment1\", \"high\"}, {\"Investment2\", \"low\"}, {\"Investment3\", \"medium\"}, {\"Investment4\", \"medium\"}, {\"Investment5\", \"low\"}}\n\nset filteredPortfolio to my filterPortfolio(portfolio, \"medium\")\n\non filterPortfolio(portfolioList, minRiskLevel)\n\tset riskLevels to {\"low\", \"medium\", \"high\"}\n\tset minRiskIndex to my indexOf(minRiskLevel, riskLevels)\n\tset newPortfolio to {}\n\trepeat with investment in portfolioList\n\t\tset {investmentName, investmentRisk} to investment\n\t\tif my indexOf(investmentRisk, riskLevels) \u2265 minRiskIndex then\n\t\t\tset end of newPortfolio to investment\n\t\tend if\n\tend repeat\n\treturn newPortfolio\nend filterPortfolio\n\non indexOf(item, list)\n\trepeat with i from 1 to count of list\n\t\tif item is equal to (item i of list) then\n\t\t\treturn i\n\t\tend if\n\tend repeat\n\treturn 0\nend indexOf\n```"
  },
  {
    "task": "Select all calls longer than five minutes from a call log.",
    "code": "```applescript\nset callLog to {{\"call1\", 240}, {\"call2\", 360}, {\"call3\", 420}, {\"call4\", 300}, {\"call5\", 600}}\n\nset longCalls to my filterCalls(callLog, 300)\n\non filterCalls(log, durationLimit)\n\tset filteredList to {}\n\trepeat with callEntry in log\n\t\tset callDuration to item 2 of callEntry\n\t\tif callDuration > durationLimit then\n\t\t\tset end of filteredList to callEntry\n\t\tend if\n\tend repeat\n\treturn filteredList\nend filterCalls\n```"
  }
]