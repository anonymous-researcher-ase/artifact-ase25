[
  {
    "task": "Write a program that reads a user's name and age from the input, then prints a greeting message using both values.",
    "code": "```applescript\ndisplay dialog \"Enter your name:\" default answer \"\"\nset userName to text returned of result\n\ndisplay dialog \"Enter your age:\" default answer \"\"\nset userAge to text returned of result\n\nset greetingMessage to \"Hello, \" & userName & \"! You are \" & userAge & \" years old.\"\ndisplay dialog greetingMessage\n```"
  },
  {
    "task": "Create a script that continuously reads numbers from the input and prints their running total until a negative number is entered.",
    "code": "```applescript\nset runningTotal to 0\nrepeat\n    set userInput to text returned of (display dialog \"Enter a number:\" default answer \"\")\n    try\n        set number to userInput as integer\n        if number < 0 then exit repeat\n        set runningTotal to runningTotal + number\n        display dialog \"Running Total: \" & runningTotal\n    on error\n        display dialog \"Please enter a valid number.\"\n    end try\nend repeat\n```"
  },
  {
    "task": "Design a program that asks the user for a sentence and outputs the number of words it contains.",
    "code": "```applescript\nset userInput to text returned of (display dialog \"Please enter a sentence:\" default answer \"\")\nset wordCount to count of words of userInput\ndisplay dialog \"The sentence contains \" & wordCount & \" words.\"\n```"
  },
  {
    "task": "Build a command-line tool that reads a list of integers and outputs them in sorted order.",
    "code": "```applescript\nset input to (do shell script \"cat\")\nset integerList to paragraphs of input\n\nset sortedList to sortList(integerList)\n\nrepeat with i in sortedList\n    do shell script \"echo \" & i\nend repeat\n\non sortList(lst)\n    set AppleScript's text item delimiters to \",\"\n    set sortedList to sort (lst as text)\n    set AppleScript's text item delimiters to \"\"\n    return sortedList\nend sortList\n\non sort(aList)\n    set sortedList to aList\n    repeat with i from 2 to count of sortedList\n        set key to item i of sortedList\n        set j to i - 1\n        repeat while j > 0 and (item j of sortedList) > key\n            set item (j + 1) of sortedList to item j of sortedList\n            set j to j - 1\n        end repeat\n        set item (j + 1) of sortedList to key\n    end repeat\n    return sortedList\nend sort\n```"
  },
  {
    "task": "Develop a program that reads a file name from the input, then prints the number of lines in that file.",
    "code": "```applescript\nset inputFile to text returned of (display dialog \"Enter the file name:\" default answer \"\")\n\ntry\n\tset fileRef to open for access file inputFile\n\tset fileContents to read fileRef\n\tclose access fileRef\n\tset lineCount to count paragraphs of fileContents\n\tdisplay dialog \"Number of lines: \" & lineCount\non error errMsg\n\tdisplay dialog \"Error: \" & errMsg\nend try\n```"
  },
  {
    "task": "Implement a calculator that reads two numbers and an operator (+, -, *, /) from the input and prints the result.",
    "code": "```applescript\nset num1 to text returned of (display dialog \"Enter the first number:\" default answer \"\")\nset num2 to text returned of (display dialog \"Enter the second number:\" default answer \"\")\nset operator to text returned of (display dialog \"Enter the operator (+, -, *, /):\" default answer \"\")\n\nset num1 to num1 as number\nset num2 to num2 as number\n\nif operator is \"+\" then\n\tset result to num1 + num2\nelse if operator is \"-\" then\n\tset result to num1 - num2\nelse if operator is \"*\" then\n\tset result to num1 * num2\nelse if operator is \"/\" then\n\tif num2 is 0 then\n\t\tdisplay dialog \"Error: Division by zero\" buttons {\"OK\"} default button \"OK\"\n\t\treturn\n\telse\n\t\tset result to num1 / num2\n\tend if\nelse\n\tdisplay dialog \"Invalid operator\" buttons {\"OK\"} default button \"OK\"\n\treturn\nend if\n\ndisplay dialog \"The result is: \" & result buttons {\"OK\"} default button \"OK\"\n```"
  },
  {
    "task": "Write a script that reads a user's full name and prints it in reverse order.",
    "code": "```applescript\nset userFullName to text returned of (display dialog \"Enter your full name:\" default answer \"\")\nset reversedName to reverse of characters of userFullName\nset reversedNameString to reversedName as string\ndisplay dialog reversedNameString\n```"
  },
  {
    "task": "Create a program that asks for a word and checks if it is a palindrome, printing the appropriate message.",
    "code": "```applescript\nset inputWord to text returned of (display dialog \"Enter a word:\" default answer \"\")\n\nset reversedWord to reverse of characters of inputWord as string\n\nif inputWord is equal to reversedWord then\n    display dialog inputWord & \" is a palindrome.\"\nelse\n    display dialog inputWord & \" is not a palindrome.\"\nend if\n```"
  },
  {
    "task": "Develop a tool that reads multiple lines of text and outputs the longest line.",
    "code": "```applescript\nset longestLine to \"\"\nrepeat\n    set inputLine to text returned of (display dialog \"Enter a line of text:\" default answer \"\")\n    if inputLine is \"\" then exit repeat\n    if (count of inputLine) > (count of longestLine) then\n        set longestLine to inputLine\n    end if\nend repeat\ndisplay dialog \"The longest line is: \" & longestLine\n```"
  },
  {
    "task": "Design a script that reads a number 'n' and prints the first 'n' Fibonacci numbers.",
    "code": "```applescript\nset n to text returned of (display dialog \"Enter a number:\" default answer \"10\")\nset n to n as integer\n\non fibonacciNumbers(num)\n\tset fibList to {0, 1}\n\trepeat with i from 3 to num\n\t\tset end of fibList to (item -1 of fibList) + (item -2 of fibList)\n\tend repeat\n\treturn fibList\nend fibonacciNumbers\n\nset fibNumbers to fibonacciNumbers(n)\nset fibText to \"\"\nrepeat with fibNum in fibNumbers\n\tset fibText to fibText & fibNum & return\nend repeat\n\ndisplay dialog \"The first \" & n & \" Fibonacci numbers are:\" & return & fibText\n```"
  },
  {
    "task": "Write a program that takes a list of numbers from the input and prints only the even ones.",
    "code": "```applescript\nset inputNumbers to {}\nrepeat\n    set userInput to text returned of (display dialog \"Enter a number:\" default answer \"\" buttons {\"Cancel\", \"OK\"} default button \"OK\")\n    if userInput is \"\" then exit repeat\n    try\n        set end of inputNumbers to (userInput as number)\n    on error\n        display dialog \"Please enter a valid number.\" buttons {\"OK\"} default button \"OK\"\n    end try\nend repeat\n\nset evenNumbers to {}\nrepeat with num in inputNumbers\n    if (num mod 2 is 0) then\n        set end of evenNumbers to num\n    end if\nend repeat\n\nif (count of evenNumbers) is 0 then\n    display dialog \"There are no even numbers.\" buttons {\"OK\"} default button \"OK\"\nelse\n    set evenNumbersString to \"\"\n    repeat with evenNum in evenNumbers\n        set evenNumbersString to evenNumbersString & evenNum & return\n    end repeat\n    display dialog \"Even numbers:\" & return & evenNumbersString buttons {\"OK\"} default button \"OK\"\nend if\n```"
  },
  {
    "task": "Create a script that reads a date (day, month, year) and prints the day of the week for that date.",
    "code": "```applescript\nset userInput to display dialog \"Enter a date (dd-mm-yyyy):\" default answer \"\"\nset inputDate to text returned of userInput\n\nset dateComponents to my splitString(inputDate, \"-\")\nset dayValue to item 1 of dateComponents\nset monthValue to item 2 of dateComponents\nset yearValue to item 3 of dateComponents\n\nset theDate to (current date)\nset day of theDate to dayValue\nset month of theDate to monthValue\nset year of theDate to yearValue\n\nset weekdayName to weekday of theDate as string\ndisplay dialog \"The day of the week is: \" & weekdayName\n\non splitString(theString, theDelimiter)\n\tset AppleScript's text item delimiters to theDelimiter\n\tset theList to text items of theString\n\tset AppleScript's text item delimiters to \"\"\n\treturn theList\nend splitString\n```"
  },
  {
    "task": "Develop a program that reads a paragraph and counts the frequency of each letter in the text.",
    "code": "```applescript\nset inputParagraph to \"\"\nset letterCount to {}\n\n-- Read paragraph from the user\ndisplay dialog \"Enter a paragraph:\" default answer \"\"\nset inputParagraph to text returned of result\n\n-- Initialize the dictionary for letter frequency\nrepeat with i from 1 to count of inputParagraph\n\tset thisChar to character i of inputParagraph\n\tif thisChar is not in letterCount and thisChar is not \" \" and thisChar is not return then\n\t\tset end of letterCount to {thisChar, 0}\n\tend if\nend repeat\n\n-- Count frequency of each letter\nrepeat with i from 1 to count of inputParagraph\n\tset thisChar to character i of inputParagraph\n\trepeat with j from 1 to count of letterCount\n\t\tif item 1 of item j of letterCount is thisChar then\n\t\t\tset item 2 of item j of letterCount to (item 2 of item j of letterCount) + 1\n\t\tend if\n\tend repeat\nend repeat\n\n-- Display the frequency of each letter\nset frequencyList to \"\"\nrepeat with i from 1 to count of letterCount\n\tset frequencyList to frequencyList & item 1 of item i of letterCount & \": \" & item 2 of item i of letterCount & return\nend repeat\n\ndisplay dialog \"Letter Frequencies:\" & return & frequencyList\n```"
  },
  {
    "task": "Build a tool that reads a text and a word, then prints the number of times the word appears in the text.",
    "code": "```applescript\n-- Prompt the user to enter the text\nset inputText to text returned of (display dialog \"Enter the text:\" default answer \"\")\n\n-- Prompt the user to enter the word to count\nset wordToCount to text returned of (display dialog \"Enter the word to count:\" default answer \"\")\n\n-- Count the occurrences of the word in the text\nset AppleScript's text item delimiters to wordToCount\nset wordList to text items of inputText\nset occurrences to (count of wordList) - 1\n\n-- Display the result\ndisplay dialog \"The word '\" & wordToCount & \"' appears \" & occurrences & \" times in the text.\"\n```"
  },
  {
    "task": "Implement a script that reads a temperature in Celsius and converts it to Fahrenheit, printing the result.",
    "code": "```applescript\nset celsius to text returned of (display dialog \"Enter temperature in Celsius:\" default answer \"\")\nset fahrenheit to (celsius as number) * 9 / 5 + 32\ndisplay dialog \"Temperature in Fahrenheit: \" & fahrenheit\n```"
  },
  {
    "task": "Write a program that continuously reads input until the word 'exit' is entered, then prints all entered inputs.",
    "code": "```applescript\nset inputList to {}\nrepeat\n\tset userInput to text returned of (display dialog \"Enter input (type 'exit' to finish):\" default answer \"\")\n\tif userInput is \"exit\" then exit repeat\n\tset end of inputList to userInput\nend repeat\ndisplay dialog \"You entered: \" & (inputList as string)\n```"
  },
  {
    "task": "Create a tool that prompts for a filename, reads the file, and prints its content in uppercase.",
    "code": "```applescript\ndisplay dialog \"Enter the filename:\" default answer \"\"\nset filename to text returned of result\n\ntry\n    set fileContent to read file filename\n    set uppercaseContent to do shell script \"echo \" & quoted form of fileContent & \" | tr '[:lower:]' '[:upper:]'\"\n    display dialog uppercaseContent\non error errorMessage number errorNumber\n    display dialog \"Error: \" & errorMessage\nend try\n```"
  },
  {
    "task": "Develop a program that reads a series of email addresses and prints the unique domain names.",
    "code": "```applescript\n-- Collect email addresses input from the user\nset emailAddresses to {}\nrepeat\n    display dialog \"Enter an email address (or leave empty to finish):\" default answer \"\"\n    set email to text returned of result\n    if email is \"\" then exit repeat\n    set end of emailAddresses to email\nend repeat\n\n-- Extract unique domain names\nset domainNames to {}\nrepeat with email in emailAddresses\n    set AppleScript's text item delimiters to \"@\"\n    set domain to text item 2 of email\n    if domain is not in domainNames then\n        set end of domainNames to domain\n    end if\nend repeat\n\n-- Output the unique domain names\nset AppleScript's text item delimiters to return\ndisplay dialog \"Unique domain names:\" & return & domainNames as text\n```"
  },
  {
    "task": "Design a script that reads a string and prints whether it contains all the letters of the alphabet.",
    "code": "```applescript\nset inputString to text returned of (display dialog \"Enter a string:\" default answer \"\")\n\nset alphabet to \"abcdefghijklmnopqrstuvwxyz\"\nset allLettersPresent to true\n\nrepeat with i from 1 to count of characters of alphabet\n    if not (inputString contains character i of alphabet) then\n        set allLettersPresent to false\n        exit repeat\n    end if\nend repeat\n\nif allLettersPresent then\n    display dialog \"The string contains all the letters of the alphabet.\"\nelse\n    display dialog \"The string does not contain all the letters of the alphabet.\"\nend if\n```"
  },
  {
    "task": "Write a program that reads a number and prints its factorial.",
    "code": "```applescript\nset userInput to text returned of (display dialog \"Enter a number:\" default answer \"\")\nset number to userInput as integer\n\non factorial(n)\n\tset result to 1\n\trepeat with i from 1 to n\n\t\tset result to result * i\n\tend repeat\n\treturn result\nend factorial\n\nset result to factorial(number)\ndisplay dialog \"The factorial of \" & number & \" is \" & result\n```"
  },
  {
    "task": "Create a tool that reads a list of names and prints them in alphabetical order.",
    "code": "```applescript\nset filePath to (choose file with prompt \"Select the text file containing names:\")\n\nset namesList to {}\ntry\n    set fileRef to open for access filePath\n    set namesList to paragraphs of (read fileRef)\n    close access fileRef\non error\n    try\n        close access fileRef\n    end try\n    error \"Failed to read the file.\"\nend try\n\nset sortedNames to sortList(namesList)\n\nrepeat with name in sortedNames\n    display dialog name\nend repeat\n\non sortList(aList)\n    set {TID, text item delimiters} to {text item delimiters, ASCII character 10}\n    set sortedList to paragraphs of (do shell script \"echo \" & quoted form of (aList as text) & \" | sort\")\n    set text item delimiters to TID\n    return sortedList\nend sortList\n```"
  },
  {
    "task": "Develop a program that asks for a sentence and prints each word on a new line.",
    "code": "```applescript\ndisplay dialog \"Enter a sentence:\" default answer \"\"\nset userInput to text returned of result\nset wordList to words of userInput\n\nrepeat with eachWord in wordList\n    display dialog eachWord\nend repeat\n```"
  },
  {
    "task": "Build a script that reads a time in 12-hour format and converts it to 24-hour format.",
    "code": "```applescript\nset time12 to text returned of (display dialog \"Enter time in 12-hour format (e.g., 2:30 PM):\" default answer \"\")\n\nset timeParts to words of time12\nset timeComponents to my splitText(item 1 of timeParts, \":\")\n\nset hour12 to item 1 of timeComponents as integer\nset minutes to item 2 of timeComponents\nset period to item 2 of timeParts\n\nif period is equal to \"PM\" and hour12 is not equal to 12 then\n    set hour24 to hour12 + 12\nelse if period is equal to \"AM\" and hour12 is equal to 12 then\n    set hour24 to 0\nelse\n    set hour24 to hour12\nend if\n\nset time24 to (hour24 as text) & \":\" & minutes\ndisplay dialog \"The time in 24-hour format is: \" & time24\n\non splitText(theText, theDelimiter)\n    set AppleScript's text item delimiters to theDelimiter\n    set theItems to every text item of theText\n    set AppleScript's text item delimiters to \"\"\n    return theItems\nend splitText\n```"
  },
  {
    "task": "Implement a program that reads two strings and checks if they are anagrams, printing the result.",
    "code": "```applescript\nset firstString to text returned of (display dialog \"Enter the first string:\" default answer \"\")\nset secondString to text returned of (display dialog \"Enter the second string:\" default answer \"\")\n\non isAnagram(str1, str2)\n\tif (length of str1) is not equal to (length of str2) then\n\t\treturn false\n\tend if\n\tset sorted1 to (characters of str1) as list\n\tset sorted2 to (characters of str2) as list\n\tset sorted1 to sortList(sorted1)\n\tset sorted2 to sortList(sorted2)\n\treturn sorted1 is equal to sorted2\nend isAnagram\n\non sortList(aList)\n\tset AppleScript's text item delimiters to \"\"\n\tset sortedList to my sortListHelper(aList, {})\n\treturn sortedList\nend sortList\n\non sortListHelper(inputList, outputList)\n\tif inputList is {} then\n\t\treturn outputList\n\tend if\n\tset minChar to item 1 of inputList\n\tset minIndex to 1\n\trepeat with i from 2 to count of inputList\n\t\tif item i of inputList comes before minChar then\n\t\t\tset minChar to item i of inputList\n\t\t\tset minIndex to i\n\t\tend if\n\tend repeat\n\tset end of outputList to minChar\n\tset inputList to (items 1 thru (minIndex - 1) of inputList) & (items (minIndex + 1) thru -1 of inputList)\n\treturn my sortListHelper(inputList, outputList)\nend sortListHelper\n\nif isAnagram(firstString, secondString) then\n\tdisplay dialog \"The strings are anagrams.\"\nelse\n\tdisplay dialog \"The strings are not anagrams.\"\nend if\n```"
  },
  {
    "task": "Write a tool that reads a paragraph and prints the first and last sentence.",
    "code": "```applescript\nset inputFile to choose file with prompt \"Select the file containing the paragraph:\"\nset paragraphText to read file inputFile\n\nset sentenceList to paragraphs of (do shell script \"echo \" & quoted form of paragraphText & \" | sed 's/[.!?]/&\\\\n/g'\")\n\nset firstSentence to item 1 of sentenceList\nset lastSentence to item -1 of sentenceList\n\ndisplay dialog \"First Sentence: \" & firstSentence & return & \"Last Sentence: \" & lastSentence\n```"
  },
  {
    "task": "Create a program that reads a binary number and converts it to decimal.",
    "code": "```applescript\nset binaryNumber to text returned of (display dialog \"Enter a binary number:\" default answer \"\")\n\non binaryToDecimal(bin)\n\tset decimalValue to 0\n\tset binList to reverse of characters of bin\n\trepeat with i from 1 to count binList\n\t\tif item i of binList is \"1\" then\n\t\t\tset decimalValue to decimalValue + (2 ^ (i - 1))\n\t\tend if\n\tend repeat\n\treturn decimalValue\nend binaryToDecimal\n\nset decimalNumber to binaryToDecimal(binaryNumber)\ndisplay dialog \"The decimal equivalent is: \" & decimalNumber\n```"
  },
  {
    "task": "Develop a script that reads a series of scores and prints the average score.",
    "code": "```applescript\nset total to 0\nset count to 0\n\nrepeat\n    display dialog \"Enter a score (or leave empty to finish):\" default answer \"\"\n    set input to text returned of result\n    if input is \"\" then exit repeat\n    set score to input as number\n    set total to total + score\n    set count to count + 1\nend repeat\n\nif count > 0 then\n    set average to total / count\n    display dialog \"The average score is: \" & average\nelse\n    display dialog \"No scores were entered.\"\nend if\n```"
  },
  {
    "task": "Design a program that reads a list of integers and prints the prime numbers.",
    "code": "```applescript\nset numberList to {\"23\", \"15\", \"9\", \"2\", \"11\", \"27\", \"17\", \"4\", \"5\"}\n\nrepeat with numString in numberList\n\tset num to numString as integer\n\tif isPrime(num) then\n\t\tdisplay dialog (num as string) & \" is a prime number.\"\n\tend if\nend repeat\n\non isPrime(n)\n\tif n \u2264 1 then return false\n\tif n = 2 then return true\n\tif n mod 2 = 0 then return false\n\tset maxDiv to (n ^ 0.5) as integer\n\trepeat with i from 3 to maxDiv by 2\n\t\tif n mod i = 0 then return false\n\tend repeat\n\treturn true\nend isPrime\n```"
  },
  {
    "task": "Write a script that reads a word and prints its Pig Latin translation.",
    "code": "```applescript\nset inputWord to text returned of (display dialog \"Enter a word:\" default answer \"\")\nset pigLatinWord to convertToPigLatin(inputWord)\ndisplay dialog \"Pig Latin: \" & pigLatinWord\n\non convertToPigLatin(word)\n    set vowels to {\"a\", \"e\", \"i\", \"o\", \"u\"}\n    set firstLetter to first character of word\n    if firstLetter is in vowels then\n        return word & \"yay\"\n    else\n        set wordLength to length of word\n        repeat with i from 2 to wordLength\n            if character i of word is in vowels then\n                return (text i thru -1 of word) & (text 1 thru (i - 1) of word) & \"ay\"\n            end if\n        end repeat\n        return word & \"ay\"\n    end if\nend convertToPigLatin\n```"
  },
  {
    "task": "Create a tool that reads a matrix of numbers and prints its transpose.",
    "code": "```applescript\nset inputFile to choose file with prompt \"Select the file containing the matrix:\"\nset inputFilePath to POSIX path of inputFile\n\nset matrix to {}\nset theFile to open for access inputFile with write permission\nset inputContent to read theFile\nclose access theFile\n\nset inputRows to paragraphs of inputContent\nrepeat with i from 1 to count of inputRows\n    set row to item i of inputRows\n    set rowNumbers to words of row\n    copy rowNumbers to end of matrix\nend repeat\n\nset transposedMatrix to {}\nrepeat with i from 1 to count of item 1 of matrix\n    set newRow to {}\n    repeat with j from 1 to count of matrix\n        copy item i of item j of matrix to end of newRow\n    end repeat\n    copy newRow to end of transposedMatrix\nend repeat\n\nset output to \"\"\nrepeat with row in transposedMatrix\n    set output to output & (row as text) & linefeed\nend repeat\n\ndisplay dialog output\n```"
  },
  {
    "task": "Implement a program that reads a URL and prints the domain name.",
    "code": "```applescript\nset inputURL to the text returned of (display dialog \"Enter URL:\" default answer \"\")\nset theURL to current application's NSURL's URLWithString:inputURL\nset domainName to theURL's host()\ndisplay dialog \"Domain Name: \" & domainName as string\n```"
  },
  {
    "task": "Write a script that reads a number and prints its multiplication table up to 12.",
    "code": "```applescript\ndisplay dialog \"Enter a number:\" default answer \"\"\nset inputNumber to text returned of result as number\n\nset output to \"\"\nrepeat with i from 1 to 12\n\tset output to output & inputNumber & \" * \" & i & \" = \" & (inputNumber * i) & return\nend repeat\n\ndisplay dialog output buttons {\"OK\"}\n```"
  },
  {
    "task": "Develop a program that reads a list of dates and prints them in order of occurrence.",
    "code": "```applescript\nset dateList to {\"2023-12-25\", \"2023-01-01\", \"2023-07-04\", \"2023-10-31\"}\n\nset sortedDates to sortDateList(dateList)\n\nrepeat with aDate in sortedDates\n    display dialog aDate\nend repeat\n\non sortDateList(dateList)\n    set dateObjects to {}\n    repeat with aDate in dateList\n        set end of dateObjects to date aDate\n    end repeat\n    set sortedDateObjects to my sortList(dateObjects)\n    set sortedDates to {}\n    repeat with dateObj in sortedDateObjects\n        set end of sortedDates to (dateObj as string)\n    end repeat\n    return sortedDates\nend sortDateList\n\non sortList(theList)\n    set sortedList to {}\n    repeat while (count of theList) > 0\n        set {theMin, theIndex} to {item 1 of theList, 1}\n        repeat with i from 2 to count of theList\n            if (item i of theList) < theMin then\n                set {theMin, theIndex} to {item i of theList, i}\n            end if\n        end repeat\n        set end of sortedList to theMin\n        set theList to (items 1 thru (theIndex - 1) of theList) & (items (theIndex + 1) thru -1 of theList)\n    end repeat\n    return sortedList\nend sortList\n```"
  },
  {
    "task": "Create a tool that reads a text and prints it with each sentence capitalized.",
    "code": "```applescript\nset inputText to read (choose file with prompt \"Select a text file to read\" of type {\"txt\"}) as \u00abclass utf8\u00bb\n\nset sentenceList to my capitalizeSentences(inputText)\nset outputText to my joinList(sentenceList, \". \")\n\ndisplay dialog outputText\n\non capitalizeSentences(text)\n\tset sentenceList to my splitText(text, \". \")\n\tset capitalizedSentences to {}\n\trepeat with sentence in sentenceList\n\t\tset trimmedSentence to my trim(sentence)\n\t\tif trimmedSentence is not \"\" then\n\t\t\tset end of capitalizedSentences to (my capitalize(trimmedSentence))\n\t\tend if\n\tend repeat\n\treturn capitalizedSentences\nend capitalizeSentences\n\non splitText(text, delimiter)\n\tset textDelimiters to AppleScript's text item delimiters\n\tset AppleScript's text item delimiters to delimiter\n\tset textList to text items of text\n\tset AppleScript's text item delimiters to textDelimiters\n\treturn textList\nend splitText\n\non joinList(list, delimiter)\n\tset textDelimiters to AppleScript's text item delimiters\n\tset AppleScript's text item delimiters to delimiter\n\tset joinedText to list as text\n\tset AppleScript's text item delimiters to textDelimiters\n\treturn joinedText\nend joinList\n\non capitalize(sentence)\n\tif length of sentence > 0 then\n\t\tset firstChar to character 1 of sentence\n\t\tset restChars to text 2 thru -1 of sentence\n\t\treturn (uppercase firstChar & restChars)\n\telse\n\t\treturn sentence\n\tend if\nend capitalize\n\non trim(text)\n\tset whiteSpace to {\" \", tab, return, linefeed}\n\trepeat while text begins with any item of whiteSpace\n\t\tset text to text 2 thru -1\n\tend repeat\n\trepeat while text ends with any item of whiteSpace\n\t\tset text to text 1 thru -2\n\tend repeat\n\treturn text\nend trim\n```"
  },
  {
    "task": "Design a program that reads a list of words and prints them in reverse alphabetical order.",
    "code": "```applescript\nset wordList to {}\nrepeat\n    display dialog \"Enter a word (or click Cancel to finish):\" default answer \"\"\n    copy the text returned of the result to end of wordList\nend repeat\n\nset sortedList to my reverseAlphabetical(wordList)\n\nrepeat with aWord in sortedList\n    display dialog aWord\nend repeat\n\non reverseAlphabetical(aList)\n    set sortedList to my sortListDescending(aList)\n    return sortedList\nend reverseAlphabetical\n\non sortListDescending(aList)\n    set sortedList to {}\n    repeat with i from 1 to (count aList)\n        set nextWord to item i of aList\n        set inserted to false\n        repeat with j from 1 to (count sortedList)\n            if nextWord > item j of sortedList then\n                set end of sortedList to item j of sortedList\n                set item j of sortedList to nextWord\n                set inserted to true\n                exit repeat\n            end if\n        end repeat\n        if not inserted then\n            set end of sortedList to nextWord\n        end if\n    end repeat\n    return sortedList\nend sortListDescending\n```"
  },
  {
    "task": "Write a script that asks for two times and prints the difference in minutes.",
    "code": "```applescript\nset time1 to text returned of (display dialog \"Enter the first time (HH:MM):\" default answer \"\")\nset time2 to text returned of (display dialog \"Enter the second time (HH:MM):\" default answer \"\")\n\nset {hours1, mins1} to {word 1 of time1, word 2 of time1} as integer\nset {hours2, mins2} to {word 1 of time2, word 2 of time2} as integer\n\nset totalMinutes1 to hours1 * 60 + mins1\nset totalMinutes2 to hours2 * 60 + mins2\n\nset differenceInMinutes to abs(totalMinutes1 - totalMinutes2)\n\ndisplay dialog \"The difference is \" & differenceInMinutes & \" minutes.\"\n```"
  },
  {
    "task": "Build a program that reads a text and prints the number of vowels and consonants.",
    "code": "```applescript\nset inputText to text returned of (display dialog \"Enter text:\" default answer \"\")\nset vowels to \"AEIOUaeiou\"\nset vowelCount to 0\nset consonantCount to 0\n\nrepeat with i from 1 to length of inputText\n    set currentChar to character i of inputText\n    if currentChar is in vowels then\n        set vowelCount to vowelCount + 1\n    else if currentChar is in \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\" then\n        set consonantCount to consonantCount + 1\n    end if\nend repeat\n\ndisplay dialog \"Vowels: \" & vowelCount & return & \"Consonants: \" & consonantCount\n```"
  },
  {
    "task": "Implement a tool that reads a JSON object from input and prints its keys.",
    "code": "```applescript\nset inputJSON to (do shell script \"cat\")\nset jsonKeys to do shell script \"echo \" & quoted form of inputJSON & \" | /usr/bin/osascript -l JavaScript -e 'JSON.stringify(Object.keys(JSON.parse(arguments[0])))'\")\ndisplay dialog jsonKeys\n```"
  },
  {
    "task": "Write a program that reads a CSV file from input and prints each row as a dictionary.",
    "code": "```applescript\nset csvFile to choose file with prompt \"Select a CSV file\"\nset csvData to read file csvFile\n\nset csvLines to paragraphs of csvData\nset headers to {}\nset firstLine to true\n\nrepeat with line in csvLines\n    if firstLine then\n        set headers to my splitText(line, \",\")\n        set firstLine to false\n    else\n        set rowValues to my splitText(line, \",\")\n        set rowDict to {}\n        \n        repeat with i from 1 to count of headers\n            set rowDict's item (item i of headers) to item i of rowValues\n        end repeat\n        \n        log rowDict\n    end if\nend repeat\n\n-- Helper function to split text by delimiter\non splitText(theText, theDelimiter)\n    set AppleScript's text item delimiters to theDelimiter\n    set theArray to text items of theText\n    set AppleScript's text item delimiters to \"\"\n    return theArray\nend splitText\n```"
  },
  {
    "task": "Create a script that reads a sentence and prints it with the words in reverse order.",
    "code": "```applescript\nset userInput to text returned of (display dialog \"Enter a sentence:\" default answer \"\")\nset wordList to words of userInput\nset reversedWordList to reverse of wordList\nset reversedSentence to reversedWordList as text\ndisplay dialog reversedSentence\n```"
  },
  {
    "task": "Develop a tool that reads a list of numbers and prints their median.",
    "code": "```applescript\nset numberList to {}\n\n-- Read numbers from standard input\nrepeat\n    set input to (do shell script \"read input; echo $input\")\n    if input is \"\" then exit repeat\n    set end of numberList to (input as number)\nend repeat\n\n-- Sort the list of numbers\nset sortedList to my sortList(numberList)\n\n-- Calculate the median\nset count to count of sortedList\nif count is 0 then\n    set median to \"undefined\"\nelse if count mod 2 is 1 then\n    set median to item ((count + 1) / 2) of sortedList\nelse\n    set mid1 to item (count / 2) of sortedList\n    set mid2 to item (count / 2 + 1) of sortedList\n    set median to (mid1 + mid2) / 2\nend if\n\n-- Print the median\ndo shell script \"echo \" & median\n\n-- Subroutine to sort list\non sortList(thisList)\n    script sortScript\n        property theList : thisList\n        property theCount : count of theList\n    end script\n    set theResult to {}\n    repeat while sortScript's theCount > 0\n        set theSmallest to item 1 of sortScript's theList\n        set theIndex to 1\n        repeat with i from 2 to sortScript's theCount\n            if item i of sortScript's theList < theSmallest then\n                set theSmallest to item i of sortScript's theList\n                set theIndex to i\n            end if\n        end repeat\n        set end of theResult to theSmallest\n        set sortScript's theList to (items 1 thru (theIndex - 1) of sortScript's theList) & (items (theIndex + 1) thru -1 of sortScript's theList)\n        set sortScript's theCount to count of sortScript's theList\n    end repeat\n    return theResult\nend sortList\n```"
  },
  {
    "task": "Design a program that reads a sequence of characters and prints the first non-repeated character.",
    "code": "```applescript\nset inputString to text returned of (display dialog \"Enter a sequence of characters:\" default answer \"\")\n\non firstNonRepeatedCharacter(s)\n\tset charCount to {}\n\tset charOrder to {}\n\trepeat with i from 1 to length of s\n\t\tset c to character i of s\n\t\tif c is not in charCount then\n\t\t\tset end of charOrder to c\n\t\t\tset charCount's item c to 1\n\t\telse\n\t\t\tset charCount's item c to charCount's item c + 1\n\t\tend if\n\tend repeat\n\t\n\trepeat with c in charOrder\n\t\tif charCount's item c is 1 then\n\t\t\treturn c\n\t\tend if\n\tend repeat\n\treturn \"No non-repeated character found.\"\nend firstNonRepeatedCharacter\n\nset result to firstNonRepeatedCharacter(inputString)\ndisplay dialog \"First non-repeated character: \" & result\n```"
  },
  {
    "task": "Write a script that reads a list of tuples and prints them sorted by the second element.",
    "code": "```applescript\nset tupleList to {{\"apple\", 3}, {\"banana\", 1}, {\"cherry\", 2}}\n\nset sortedList to my sortBySecondElement(tupleList)\n\nrepeat with theTuple in sortedList\n    set output to \"\"\n    repeat with element in theTuple\n        set output to output & element & \" \"\n    end repeat\n    log (text 1 thru -2 of output) -- remove trailing space\nend repeat\n\non sortBySecondElement(lst)\n    set sortedList to {}\n    repeat with i from 1 to count of lst\n        set end of sortedList to item i of lst\n    end repeat\n    set sortedList to my sort(sortedList)\n    return sortedList\nend sortBySecondElement\n\non sort(lst)\n    script s\n        property lst : lst\n        on lessThan(a, b)\n            if item 2 of a < item 2 of b then return true\n            return false\n        end lessThan\n    end script\n    return my mergeSort(lst, s)\nend sort\n\non mergeSort(lst, comparator)\n    if (count of lst) < 2 then return lst\n    set mid to (count of lst) div 2\n    set left to items 1 thru mid of lst\n    set right to items (mid + 1) thru -1 of lst\n    set left to my mergeSort(left, comparator)\n    set right to my mergeSort(right, comparator)\n    return my merge(left, right, comparator)\nend mergeSort\n\non merge(left, right, comparator)\n    set result to {}\n    repeat until (left = {} or right = {})\n        if my (lessThan(item 1 of left, item 1 of right, comparator)) then\n            set end of result to item 1 of left\n            set left to rest of left\n        else\n            set end of result to item 1 of right\n            set right to rest of right\n        end if\n    end repeat\n    if left \u2260 {} then set result to result & left\n    if right \u2260 {} then set result to result & right\n    return result\nend merge\n\non lessThan(a, b, comparator)\n    return comparator's lessThan(a, b)\nend lessThan\n```"
  },
  {
    "task": "Create a program that reads a list of cities and prints them grouped by their starting letter.",
    "code": "```applescript\nset cityList to {\"Amsterdam\", \"Berlin\", \"Buenos Aires\", \"Cairo\", \"Copenhagen\", \"Delhi\", \"Dakar\"}\n\nset groupedCities to {}\n\nrepeat with city in cityList\n\tset firstLetter to (text 1 of city)\n\tif firstLetter is not in (groupedCities's keys) then\n\t\tset groupedCities's end to {firstLetter, {}}\n\tend if\n\tset end of (item 2 of (first item whose item 1 is firstLetter in groupedCities)) to city\nend repeat\n\nrepeat with group in groupedCities\n\tset startLetter to item 1 of group\n\tset cities to item 2 of group\n\tset output to startLetter & \": \" & (cities as text)\n\tdisplay dialog output\nend repeat\n```"
  },
  {
    "task": "Build a tool that reads a text and prints the longest word.",
    "code": "```applescript\nset inputFile to choose file with prompt \"Select a text file:\"\nset fileContents to read file inputFile\n\nset wordList to words of fileContents\nset longestWord to \"\"\nrepeat with aWord in wordList\n    if (length of aWord) > (length of longestWord) then\n        set longestWord to aWord\n    end if\nend repeat\n\ndisplay dialog \"The longest word is: \" & longestWord\n```"
  },
  {
    "task": "Implement a program that reads a string and prints the number of unique characters.",
    "code": "```applescript\nset inputString to text returned of (display dialog \"Enter a string:\" default answer \"\")\nset uniqueChars to {}\n\nrepeat with char in characters of inputString\n\tif char is not in uniqueChars then\n\t\tset end of uniqueChars to char\n\tend if\nend repeat\n\ndisplay dialog \"Number of unique characters: \" & (count of uniqueChars)\n```"
  },
  {
    "task": "Write a script that reads two strings and prints the longest common substring.",
    "code": "```applescript\nset firstString to text returned of (display dialog \"Enter the first string:\" default answer \"\")\nset secondString to text returned of (display dialog \"Enter the second string:\" default answer \"\")\n\non longestCommonSubstring(s1, s2)\n\tset maxLen to 0\n\tset start to 0\n\tset len1 to length of s1\n\tset len2 to length of s2\n\trepeat with i from 1 to len1\n\t\trepeat with j from 1 to len2\n\t\t\tset k to 0\n\t\t\trepeat while (i + k) \u2264 len1 and (j + k) \u2264 len2 and (item (i + k) of s1) is equal to (item (j + k) of s2)\n\t\t\t\tset k to k + 1\n\t\t\tend repeat\n\t\t\tif k > maxLen then\n\t\t\t\tset maxLen to k\n\t\t\t\tset start to i\n\t\t\tend if\n\t\tend repeat\n\tend repeat\n\tif maxLen is greater than 0 then\n\t\treturn text start thru (start + maxLen - 1) of s1\n\telse\n\t\treturn \"\"\n\tend if\nend longestCommonSubstring\n\nset result to longestCommonSubstring(firstString, secondString)\ndisplay dialog \"Longest common substring: \" & result\n```"
  },
  {
    "task": "Develop a program that reads a chessboard position and prints all possible moves for a knight.",
    "code": "```applescript\non run\n    set chessboard to {\"a1\", \"b1\", \"c1\", \"d1\", \"e1\", \"f1\", \"g1\", \"h1\", \"a2\", \"b2\", \"c2\", \"d2\", \"e2\", \"f2\", \"g2\", \"h2\", \"a3\", \"b3\", \"c3\", \"d3\", \"e3\", \"f3\", \"g3\", \"h3\", \"a4\", \"b4\", \"c4\", \"d4\", \"e4\", \"f4\", \"g4\", \"h4\", \"a5\", \"b5\", \"c5\", \"d5\", \"e5\", \"f5\", \"g5\", \"h5\", \"a6\", \"b6\", \"c6\", \"d6\", \"e6\", \"f6\", \"g6\", \"h6\", \"a7\", \"b7\", \"c7\", \"d7\", \"e7\", \"f7\", \"g7\", \"h7\", \"a8\", \"b8\", \"c8\", \"d8\", \"e8\", \"f8\", \"g8\", \"h8\"}\n    \n    set knightPosition to text returned of (display dialog \"Enter knight's position (e.g., b1):\" default answer \"\")\n    \n    if knightPosition is not in chessboard then\n        display dialog \"Invalid position.\"\n        return\n    end if\n    \n    set possibleMoves to getKnightMoves(knightPosition, chessboard)\n    \n    display dialog \"Knight possible moves from \" & knightPosition & \": \" & (possibleMoves as string)\nend run\n\non getKnightMoves(position, chessboard)\n    set validMoves to {}\n    set file to character 1 of position\n    set rank to character 2 of position as integer\n    set knightMoves to {{1, 2}, {2, 1}, {2, -1}, {1, -2}, {-1, -2}, {-2, -1}, {-2, 1}, {-1, 2}}\n    \n    repeat with move in knightMoves\n        set newFile to offsetInList(file, {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"}) + item 1 of move\n        set newRank to rank + item 2 of move\n        if newFile \u2265 1 and newFile \u2264 8 and newRank \u2265 1 and newRank \u2264 8 then\n            set end of validMoves to item newFile of {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"} & newRank\n        end if\n    end repeat\n    \n    return validMoves\nend getKnightMoves\n\non offsetInList(item, theList)\n    repeat with i from 1 to count of theList\n        if item is item i of theList then return i\n    end repeat\n    return 0\nend offsetInList\n```"
  },
  {
    "task": "Create a tool that reads a list of numbers and prints the mode.",
    "code": "```applescript\n-- Function to read a list of numbers from a file\non readNumbersFromFile(filePath)\n\tset numberList to {}\n\tset fileRef to open for access filePath\n\ttry\n\t\tset fileContents to read fileRef using delimiter {return, linefeed}\n\t\trepeat with line in fileContents\n\t\t\tif line is not \"\" then\n\t\t\t\tset end of numberList to (line as number)\n\t\t\tend if\n\t\tend repeat\n\t\tclose access fileRef\n\ton error\n\t\tclose access fileRef\n\t\terror \"Failed to read numbers from file.\"\n\tend try\n\treturn numberList\nend readNumbersFromFile\n\n-- Function to compute the mode of a list of numbers\non computeMode(numberList)\n\tset numberCounts to {}\n\trepeat with num in numberList\n\t\tif numberCounts contains num then\n\t\t\tset count to item (num as string) of numberCounts\n\t\t\tset item (num as string) of numberCounts to count + 1\n\t\telse\n\t\t\tset end of numberCounts to {num, 1}\n\t\tend if\n\tend repeat\n\t\n\tset modeValue to missing value\n\tset maxCount to 0\n\trepeat with numberCount in numberCounts\n\t\tif item 2 of numberCount > maxCount then\n\t\t\tset modeValue to item 1 of numberCount\n\t\t\tset maxCount to item 2 of numberCount\n\t\tend if\n\tend repeat\n\t\n\treturn modeValue\nend computeMode\n\n-- Main execution\nset filePath to (choose file with prompt \"Select the file containing the list of numbers:\")\nset numbers to readNumbersFromFile(filePath)\nset mode to computeMode(numbers)\n\nif mode is not missing value then\n\tdisplay dialog \"The mode of the list of numbers is: \" & mode\nelse\n\tdisplay dialog \"No mode found in the list of numbers.\"\nend if\n```"
  },
  {
    "task": "Design a program that reads a list of file paths and prints the largest file.",
    "code": "```applescript\nset filePaths to {\"path/to/file1\", \"path/to/file2\", \"path/to/file3\"} -- Replace with actual file paths\n\nset largestFile to \"\"\nset largestSize to 0\n\nrepeat with filePath in filePaths\n    try\n        set fileSize to size of (info for (POSIX file filePath))\n        if fileSize > largestSize then\n            set largestSize to fileSize\n            set largestFile to filePath\n        end if\n    on error\n        -- Handle error if file does not exist or is not accessible\n    end try\nend repeat\n\nif largestFile is not \"\" then\n    do shell script \"echo \" & quoted form of largestFile\nelse\n    do shell script \"echo 'No valid files found.'\"\nend if\n```"
  },
  {
    "task": "Write a script that reads a list of prices and prints the total cost with tax.",
    "code": "```applescript\nset priceList to {\"10.99\", \"5.50\", \"20.00\"} -- Replace with actual input method\nset taxRate to 0.05\nset totalCost to 0\n\nrepeat with price in priceList\n\tset totalCost to totalCost + (price as number)\nend repeat\n\nset totalCostWithTax to totalCost * (1 + taxRate)\n\ndisplay dialog \"Total cost with tax: \" & totalCostWithTax\n```"
  },
  {
    "task": "Build a program that reads a list of temperatures and prints them in Fahrenheit.",
    "code": "```applescript\nset temperatureList to {\"0\", \"100\", \"37\", \"20\", \"15\"}\n\nrepeat with temp in temperatureList\n\tset celsius to temp as number\n\tset fahrenheit to (celsius * 9 / 5) + 32\n\tdo shell script \"echo \" & fahrenheit\nend repeat\n```"
  },
  {
    "task": "Implement a tool that reads a list of book titles and prints them sorted by length.",
    "code": "```applescript\n-- Read book titles from standard input\nset bookTitles to paragraphs of (do shell script \"cat\")\n\n-- Sort book titles by length\nset sortedTitles to my sortListByLength(bookTitles)\n\n-- Print sorted book titles\nrepeat with title in sortedTitles\n    do shell script \"echo \" & quoted form of title\nend repeat\n\n-- Function to sort list by length\non sortListByLength(aList)\n    set theIndexes to {}\n    set theLengths to {}\n    repeat with i from 1 to count of aList\n        set end of theIndexes to i\n        set end of theLengths to length of (item i of aList)\n    end repeat\n    set sortedIndexes to my sortBy(theLengths, theIndexes)\n    set sortedList to {}\n    repeat with i in sortedIndexes\n        set end of sortedList to item i of aList\n    end repeat\n    return sortedList\nend sortListByLength\n\n-- Helper function to sort indexes by their corresponding lengths\non sortBy(theLengths, theIndexes)\n    set theIndexLengthPairs to {}\n    repeat with i from 1 to count of theLengths\n        set end of theIndexLengthPairs to {item i of theLengths, item i of theIndexes}\n    end repeat\n    set sortedPairs to my sortListOfLists(theIndexLengthPairs)\n    set sortedIndexes to {}\n    repeat with aPair in sortedPairs\n        set end of sortedIndexes to item 2 of aPair\n    end repeat\n    return sortedIndexes\nend sortBy\n\n-- Sort a list of lists based on the first item in each sub-list\non sortListOfLists(theList)\n    set sortedList to {}\n    set oldDelims to AppleScript's text item delimiters\n    set AppleScript's text item delimiters to \"\"\n    set theScript to \"on compare(a, b)\n        set {a1, a2} to a\n        set {b1, b2} to b\n        return (a1 < b1) - (a1 > b1)\n    end compare\"\n    set sortScript to run script theScript\n    set sortedList to my customSort(theList, sortScript)\n    set AppleScript's text item delimiters to oldDelims\n    return sortedList\nend sortListOfLists\n\n-- Custom sort function using a given comparison handler\non customSort(theList, compareHandler)\n    set sortedList to {}\n    repeat until theList is {}\n        set {theItem, theList} to my extractMin(theList, compareHandler)\n        set end of sortedList to theItem\n    end repeat\n    return sortedList\nend customSort\n\n-- Extract the minimum item from the list based on the comparison handler\non extractMin(theList, compareHandler)\n    set theMin to item 1 of theList\n    set theRest to rest of theList\n    repeat with anItem in theRest\n        if (run script compareHandler with parameters {anItem, theMin}) is less than 0 then\n            set theMin to anItem\n        end if\n    end repeat\n    set theNewList to {}\n    set minFound to false\n    repeat with anItem in theList\n        if anItem is theMin and minFound is false then\n            set minFound to true\n        else\n            set end of theNewList to anItem\n        end if\n    end repeat\n    return {theMin, theNewList}\nend extractMin\n```"
  },
  {
    "task": "Write a program that reads a directory path and prints all file names.",
    "code": "```applescript\nset dirPath to POSIX path of (choose folder with prompt \"Select a directory:\")\ntell application \"System Events\"\n    set fileList to name of every file of folder dirPath\nend tell\nrepeat with fileName in fileList\n    display dialog fileName as text\nend repeat\n```"
  },
  {
    "task": "Create a script that reads a list of URLs and prints those with a secure connection.",
    "code": "```applescript\nset urlList to {\"http://example.com\", \"https://secure-site.com\", \"ftp://another-site.com\", \"https://another-secure-site.com\"}\nrepeat with url in urlList\n    if url starts with \"https://\" then\n        log url\n    end if\nend repeat\n```"
  },
  {
    "task": "Develop a tool that reads a sequence of numbers and prints if it is strictly increasing.",
    "code": "```applescript\nset inputSequence to text returned of (display dialog \"Enter a sequence of numbers separated by commas:\" default answer \"\")\nset numberList to my convertToNumberList(inputSequence)\nset isIncreasing to my isStrictlyIncreasing(numberList)\n\nif isIncreasing then\n\tdisplay dialog \"The sequence is strictly increasing.\"\nelse\n\tdisplay dialog \"The sequence is not strictly increasing.\"\nend if\n\non convertToNumberList(inputString)\n\tset text item delimiters to \",\"\n\tset numberStrings to text items of inputString\n\tset numberList to {}\n\trepeat with numString in numberStrings\n\t\tset end of numberList to (numString as number)\n\tend repeat\n\treturn numberList\nend convertToNumberList\n\non isStrictlyIncreasing(numberList)\n\tset previousNumber to item 1 of numberList\n\trepeat with i from 2 to count of numberList\n\t\tset currentNumber to item i of numberList\n\t\tif currentNumber \u2264 previousNumber then\n\t\t\treturn false\n\t\tend if\n\t\tset previousNumber to currentNumber\n\tend repeat\n\treturn true\nend isStrictlyIncreasing\n```"
  },
  {
    "task": "Design a program that reads a list of products and prints them grouped by category.",
    "code": "```applescript\nset productData to \"Electronics:TV,Electronics:Smartphone,Groceries:Apples,Groceries:Bread\"\nset productList to my split(productData, \",\")\n\nset categorizedProducts to {}\n\nrepeat with product in productList\n\tset itemParts to my split(product, \":\")\n\tset category to item 1 of itemParts\n\tset productName to item 2 of itemParts\n\t\n\tif not (exists item category of categorizedProducts) then\n\t\tset end of categorizedProducts to {category, {productName}}\n\telse\n\t\tset productNames to item 2 of (item (my findCategory(category, categorizedProducts)) of categorizedProducts)\n\t\tset end of productNames to productName\n\t\tset item 2 of (item (my findCategory(category, categorizedProducts)) of categorizedProducts) to productNames\n\tend if\nend repeat\n\nrepeat with categoryEntry in categorizedProducts\n\tset categoryName to item 1 of categoryEntry\n\tset products to item 2 of categoryEntry\n\tset output to categoryName & \": \" & (products as string)\n\tdisplay dialog output\nend repeat\n\non split(inputText, delimiter)\n\tset AppleScript's text item delimiters to delimiter\n\tset textItems to text items of inputText\n\tset AppleScript's text item delimiters to \"\"\n\treturn textItems\nend split\n\non findCategory(category, categoriesList)\n\trepeat with i from 1 to count of categoriesList\n\t\tif item 1 of (item i of categoriesList) is equal to category then\n\t\t\treturn i\n\t\tend if\n\tend repeat\n\treturn 0\nend findCategory\n```"
  },
  {
    "task": "Write a script that reads a sentence and prints it with alternating word capitalization.",
    "code": "```applescript\nset inputText to the text returned of (display dialog \"Enter a sentence:\" default answer \"\")\nset wordsList to words of inputText\nset outputText to \"\"\nrepeat with i from 1 to count of wordsList\n\tset currentWord to item i of wordsList\n\tif (i mod 2) is 1 then\n\t\tset outputText to outputText & (currentWord's uppercaseString) & \" \"\n\telse\n\t\tset outputText to outputText & (currentWord's lowercaseString) & \" \"\n\tend if\nend repeat\ndisplay dialog trimText(outputText)\n\non trimText(t)\n\tif t ends with \" \" then\n\t\treturn (text 1 thru -2 of t)\n\telse\n\t\treturn t\n\tend if\nend trimText\n```"
  },
  {
    "task": "Create a program that reads a list of grades and prints the highest and lowest grade.",
    "code": "```applescript\nset gradeList to {}\nrepeat\n    set inputGrade to text returned of (display dialog \"Enter a grade (or cancel to finish):\" default answer \"\")\n    if inputGrade is \"\" then\n        exit repeat\n    end if\n    set end of gradeList to (inputGrade as integer)\nend repeat\n\nif (count of gradeList) is greater than 0 then\n    set highestGrade to item 1 of gradeList\n    set lowestGrade to item 1 of gradeList\n    repeat with grade in gradeList\n        if grade > highestGrade then\n            set highestGrade to grade\n        end if\n        if grade < lowestGrade then\n            set lowestGrade to grade\n        end if\n    end repeat\n    display dialog \"Highest grade: \" & highestGrade & return & \"Lowest grade: \" & lowestGrade\nelse\n    display dialog \"No grades entered.\"\nend if\n```"
  },
  {
    "task": "Build a tool that reads a text and prints the number of sentences.",
    "code": "```applescript\nset textInput to \"This is the first sentence. Here is another one! And yet another?\"\n\nset sentenceCount to count of paragraphs of (do shell script \"echo \" & quoted form of textInput & \" | sed 's/[.!?] /&\\\\n/g'\")\n\ndisplay dialog \"Number of sentences: \" & sentenceCount\n```"
  },
  {
    "task": "Implement a program that reads a list of integers and prints the sum of all odd numbers.",
    "code": "```applescript\nset integerList to {\"1\", \"2\", \"3\", \"4\", \"5\"} -- Example list of integers as strings\nset sumOddNumbers to 0\n\nrepeat with integerString in integerList\n\tset integerValue to integerString as integer\n\tif integerValue mod 2 is not 0 then\n\t\tset sumOddNumbers to sumOddNumbers + integerValue\n\tend if\nend repeat\n\ndisplay dialog \"Sum of odd numbers: \" & sumOddNumbers\n```"
  },
  {
    "task": "Write a script that reads a text and prints the shortest sentence.",
    "code": "```applescript\nset textContent to readFile(\"/path/to/your/file.txt\")\nset sentenceList to splitText(textContent, \".\")\nset shortestSentence to findShortestSentence(sentenceList)\ndisplay dialog shortestSentence\n\non readFile(filePath)\n\ttell application \"System Events\"\n\t\tset fileContent to read filePath as \u00abclass utf8\u00bb\n\tend tell\n\treturn fileContent\nend readFile\n\non splitText(theText, delimiter)\n\tset AppleScript's text item delimiters to delimiter\n\tset theList to text items of theText\n\tset AppleScript's text item delimiters to {\"\"} -- Reset delimiters\n\treturn theList\nend splitText\n\non findShortestSentence(sentenceList)\n\tset shortest to \"\"\n\trepeat with sentence in sentenceList\n\t\tif (shortest is equal to \"\") or (count words of sentence < count words of shortest) then\n\t\t\tset shortest to sentence\n\t\tend if\n\tend repeat\n\treturn shortest\nend findShortestSentence\n```"
  },
  {
    "task": "Develop a program that reads a list of dictionaries and prints them sorted by a specific key.",
    "code": "```applescript\n-- Sample list of dictionaries (records in AppleScript)\nset listOfDictionaries to {\u00ac\n    {name:\"Alice\", age:30, city:\"New York\"}, \u00ac\n    {name:\"Bob\", age:25, city:\"Los Angeles\"}, \u00ac\n    {name:\"Charlie\", age:35, city:\"Chicago\"}}\n\n-- Define the key to sort by\nset sortKey to \"age\"\n\n-- Comparator function for sorting\non compareDicts(a, b, key)\n    if (get key of a) < (get key of b) then\n        return -1\n    else if (get key of a) > (get key of b) then\n        return 1\n    else\n        return 0\n    end if\nend compareDicts\n\n-- Sort the list of dictionaries\nset sortedList to my sort(listOfDictionaries, sortKey)\n\n-- Print the sorted dictionaries\nrepeat with itemRecord in sortedList\n    set dictString to \"\"\n    repeat with k in itemRecord's keys\n        set dictString to dictString & k & \": \" & (itemRecord's (contents of k)) & \", \"\n    end repeat\n    -- Remove trailing comma and space\n    set dictString to text 1 thru -3 of dictString\n    log dictString\nend repeat\n\n-- Custom sort function\non sort(theList, key)\n    set sortedList to {}\n    set {sortedIndices, sortedList} to my qsort(theList, {}, key)\n    return sortedList\nend sort\n\n-- QuickSort implementation\non qsort(theList, sortedList, key)\n    if length of theList is 0 then\n        return {sortedList, sortedList}\n    end if\n    set pivot to item 1 of theList\n    set restItems to rest of theList\n    set leftItems to {}\n    set rightItems to {}\n    repeat with itemRecord in restItems\n        if my compareDicts(itemRecord, pivot, key) is -1 then\n            set end of leftItems to itemRecord\n        else\n            set end of rightItems to itemRecord\n        end if\n    end repeat\n    set {leftSortedIndices, leftSortedList} to my qsort(leftItems, sortedList, key)\n    set {rightSortedIndices, rightSortedList} to my qsort(rightItems, sortedList, key)\n    set sortedList to leftSortedList & {pivot} & rightSortedList\n    return {sortedList, sortedList}\nend qsort\n```"
  },
  {
    "task": "Create a tool that reads a sequence of strings and prints the common prefix.",
    "code": "```applescript\n-- Function to find the common prefix of a list of strings\non commonPrefix(stringsList)\n\tset prefix to item 1 of stringsList\n\trepeat with str in stringsList\n\t\trepeat while not str starts with prefix\n\t\t\tif (length of prefix) = 0 then return \"\"\n\t\t\tset prefix to text 1 thru -2 of prefix\n\t\tend repeat\n\tend repeat\n\treturn prefix\nend commonPrefix\n\n-- Read input strings from System I/O\nset stringList to {}\nrepeat\n\tdisplay dialog \"Enter a string (or press Cancel to finish):\" default answer \"\" buttons {\"Cancel\", \"OK\"} default button \"OK\"\n\tset userInput to the text returned of the result\n\tif userInput is \"\" then exit repeat\n\tcopy userInput to the end of stringList\nend repeat\n\n-- Output the common prefix\nset thePrefix to commonPrefix(stringList)\nif thePrefix is \"\" then\n\tdisplay dialog \"No common prefix found.\"\nelse\n\tdisplay dialog \"The common prefix is: \" & thePrefix\nend if\n```"
  },
  {
    "task": "Design a program that reads a number and prints all of its divisors.",
    "code": "```applescript\ndisplay dialog \"Enter a number:\" default answer \"\"\nset inputNumber to text returned of result\nset inputNumber to inputNumber as integer\n\nset divisors to {}\nrepeat with i from 1 to inputNumber\n    if inputNumber mod i is 0 then\n        set end of divisors to i\n    end if\nend repeat\n\nset divisorsString to \"\"\nrepeat with divisor in divisors\n    set divisorsString to divisorsString & divisor & return\nend repeat\n\ndisplay dialog \"Divisors of \" & inputNumber & \":\" & return & divisorsString\n```"
  },
  {
    "task": "Write a script that reads a text and prints each word with its length.",
    "code": "```applescript\nset inputText to do shell script \"cat\"\nset textWords to words of inputText\n\nrepeat with aWord in textWords\n\tset wordLength to length of aWord\n\tdisplay dialog aWord & \": \" & wordLength\nend repeat\n```"
  },
  {
    "task": "Build a program that reads a list of colors and prints them in a rainbow order.",
    "code": "```applescript\nset colorList to {\"Red\", \"Orange\", \"Yellow\", \"Green\", \"Blue\", \"Indigo\", \"Violet\"}\n\nrepeat with color in colorList\n    do shell script \"echo \" & quoted form of color\nend repeat\n```"
  },
  {
    "task": "Implement a tool that reads a list of names and prints them with their initials.",
    "code": "```applescript\nset inputFile to choose file with prompt \"Select a text file with a list of names:\"\nset nameList to paragraphs of (read inputFile)\n\nrepeat with fullName in nameList\n\tset nameWords to words of fullName\n\tset initials to \"\"\n\trepeat with word in nameWords\n\t\tset initials to initials & (character 1 of word) & \". \"\n\tend repeat\n\tdisplay dialog fullName & \": \" & initials\nend repeat\n```"
  },
  {
    "task": "Write a program that reads a series of coordinates and prints the center point.",
    "code": "```applescript\nset inputCoordinates to {}\nrepeat\n    display dialog \"Enter a coordinate as 'x,y' or press Cancel to finish:\" default answer \"\"\n    set userInput to text returned of result\n    if userInput is \"\" then exit repeat\n    set end of inputCoordinates to userInput\nend repeat\n\nset totalX to 0\nset totalY to 0\nset count to 0\n\nrepeat with coordinate in inputCoordinates\n    set {x, y} to the paragraphs of coordinate\n    set {x, y} to {x as number, y as number}\n    set totalX to totalX + x\n    set totalY to totalY + y\n    set count to count + 1\nend repeat\n\nif count > 0 then\n    set centerX to totalX / count\n    set centerY to totalY / count\n    display dialog \"The center point is: (\" & centerX & \", \" & centerY & \")\"\nelse\n    display dialog \"No coordinates were entered.\"\nend if\n```"
  },
  {
    "task": "Create a script that reads a sentence and prints it with each vowel replaced by its uppercase form.",
    "code": "```applescript\nset inputSentence to the text returned of (display dialog \"Enter a sentence:\" default answer \"\")\n\nset vowels to {\"a\", \"e\", \"i\", \"o\", \"u\"}\nset upperVowels to {\"A\", \"E\", \"I\", \"O\", \"U\"}\nset transformedSentence to inputSentence\n\nrepeat with i from 1 to count of vowels\n\tset transformedSentence to replaceText(transformedSentence, item i of vowels, item i of upperVowels)\nend repeat\n\ndisplay dialog transformedSentence\n\non replaceText(theText, theSearch, theReplacement)\n\tset AppleScript's text item delimiters to theSearch\n\tset theTextItems to every text item of theText\n\tset AppleScript's text item delimiters to theReplacement\n\tset theText to theTextItems as text\n\tset AppleScript's text item delimiters to \"\"\n\treturn theText\nend replaceText\n```"
  },
  {
    "task": "Develop a tool that reads a mathematical expression and evaluates its result.",
    "code": "```applescript\nset userInput to text returned of (display dialog \"Enter a mathematical expression:\" default answer \"\")\ntry\n    set result to (run script \"return (\" & userInput & \")\")\n    display dialog \"The result is: \" & result\non error errMsg\n    display dialog \"Error: \" & errMsg\nend try\n```"
  },
  {
    "task": "Design a program that reads a text and prints the first three words.",
    "code": "```applescript\nset filePath to POSIX path of (choose file with prompt \"Select a text file\")\n\nset fileContents to read file filePath\n\nset wordList to words of fileContents\n\nset firstThreeWords to items 1 thru 3 of wordList as string\n\ndisplay dialog firstThreeWords\n```"
  },
  {
    "task": "Write a script that reads a list of numbers and prints them without duplicates.",
    "code": "```applescript\nset inputFilePath to (choose file with prompt \"Select the input file containing numbers:\")\n\nset fileContents to read inputFilePath\nset numberList to paragraphs of fileContents\nset uniqueNumbers to {}\n\nrepeat with aNumber in numberList\n    if aNumber is not in uniqueNumbers then\n        set end of uniqueNumbers to aNumber\n    end if\nend repeat\n\nrepeat with aNumber in uniqueNumbers\n    display dialog aNumber\nend repeat\n```"
  },
  {
    "task": "Create a program that reads a string and prints it with spaces between each character.",
    "code": "```applescript\nset inputString to the text returned of (display dialog \"Enter a string:\" default answer \"\")\nset spacedString to \"\"\nrepeat with i from 1 to length of inputString\n\tset spacedString to spacedString & character i of inputString & \" \"\nend repeat\ndisplay dialog spacedString\n```"
  },
  {
    "task": "Build a tool that reads a list of events with dates and prints them by chronological order.",
    "code": "```applescript\n-- Define the list of events with dates\nset eventList to {\"2023-12-25: Christmas\", \"2023-11-23: Thanksgiving\", \"2024-01-01: New Year\"}\n\n-- Function to split date and event\non splitEvent(eventString)\n\tset AppleScript's text item delimiters to \": \"\n\tset dateEventPair to text items of eventString\n\treturn dateEventPair\nend splitEvent\n\n-- Function to convert date string to date object\non stringToDate(dateString)\n\tset AppleScript's text item delimiters to \"-\"\n\tset {yearStr, monthStr, dayStr} to text items of dateString\n\tset theDate to current date\n\tset year of theDate to (yearStr as integer)\n\tset month of theDate to (monthStr as integer)\n\tset day of theDate to (dayStr as integer)\n\treturn theDate\nend stringToDate\n\n-- Sort the events\nset sortedEvents to {}\nrepeat with event in eventList\n\tset {eventDate, eventName} to splitEvent(event)\n\tset end of sortedEvents to {date:stringToDate(eventDate), name:eventName}\nend repeat\n\nset sortedEvents to my sortList(sortedEvents)\n\n-- Print the sorted events\nrepeat with event in sortedEvents\n\tset {eventDate, eventName} to event\n\tset output to (eventDate as string) & \": \" & eventName\n\tdisplay dialog output\nend repeat\n\n-- Sort list of records by date\non sortList(theList)\n\tset sortedList to {}\n\trepeat with i from 1 to count of theList\n\t\tset theRecord to item i of theList\n\t\tset theDate to date of theRecord\n\t\tset inserted to false\n\t\trepeat with j from 1 to count of sortedList\n\t\t\tif theDate comes before (date of item j of sortedList) then\n\t\t\t\tset end of (beginning of sortedList) to theRecord\n\t\t\t\tset inserted to true\n\t\t\t\texit repeat\n\t\t\tend if\n\t\tend repeat\n\t\tif not inserted then\n\t\t\tset end of sortedList to theRecord\n\t\tend if\n\tend repeat\n\treturn sortedList\nend sortList\n```"
  },
  {
    "task": "Implement a program that reads a list of fractions and prints their sum as a reduced fraction.",
    "code": "```applescript\non run\n    set inputString to text returned of (display dialog \"Enter a list of fractions separated by commas:\" default answer \"\")\n    set fractionList to paragraphs of (do shell script \"echo \" & quoted form of inputString & \" | tr ',' '\\n' | sed -e 's/ //g'\")\n    \n    set numeratorSum to 0\n    set denominatorProduct to 1\n    \n    repeat with fraction in fractionList\n        set {numerator, denominator} to my parseFraction(fraction)\n        set numeratorSum to numeratorSum * denominator + numerator * denominatorProduct\n        set denominatorProduct to denominatorProduct * denominator\n    end repeat\n    \n    set {finalNumerator, finalDenominator} to my reduceFraction(numeratorSum, denominatorProduct)\n    display dialog \"The sum of the fractions is: \" & finalNumerator & \"/\" & finalDenominator\nend run\n\non parseFraction(fractionString)\n    set {numerator, denominator} to {1, 1}\n    set delimPos to offset of \"/\" in fractionString\n    if delimPos is not 0 then\n        set numerator to text 1 thru (delimPos - 1) of fractionString as integer\n        set denominator to text (delimPos + 1) thru -1 of fractionString as integer\n    else\n        set numerator to fractionString as integer\n    end if\n    return {numerator, denominator}\nend parseFraction\n\non reduceFraction(numerator, denominator)\n    set gcdValue to my gcd(numerator, denominator)\n    return {numerator div gcdValue, denominator div gcdValue}\nend reduceFraction\n\non gcd(a, b)\n    if b is 0 then\n        return a\n    else\n        return my gcd(b, a mod b)\n    end if\nend gcd\n```"
  },
  {
    "task": "Write a script that reads a text and prints it with each consonant doubled.",
    "code": "```applescript\nset inputText to do shell script \"cat\"\nset outputText to \"\"\nrepeat with i from 1 to count of inputText\n\tset currentChar to character i of inputText\n\tif currentChar is in \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\" then\n\t\tset outputText to outputText & currentChar & currentChar\n\telse\n\t\tset outputText to outputText & currentChar\n\tend if\nend repeat\ndo shell script \"echo \" & quoted form of outputText\n```"
  },
  {
    "task": "Develop a program that reads a number and prints its representation in Roman numerals.",
    "code": "```applescript\non run\n    set inputNumber to text returned of (display dialog \"Enter a number:\" default answer \"\")\n    try\n        set num to inputNumber as integer\n        set romanNumeral to convertToRoman(num)\n        display dialog \"Roman numeral: \" & romanNumeral\n    on error\n        display dialog \"Invalid input. Please enter a valid integer.\"\n    end try\nend run\n\non convertToRoman(num)\n    set romanList to {1000:\"M\", 900:\"CM\", 500:\"D\", 400:\"CD\", 100:\"C\", 90:\"XC\", 50:\"L\", 40:\"XL\", 10:\"X\", 9:\"IX\", 5:\"V\", 4:\"IV\", 1:\"I\"}\n    set romanNumeral to \"\"\n    repeat with i from 1 to count of romanList\n        set {arabic, roman} to item i of romanList\n        repeat while num \u2265 arabic\n            set romanNumeral to romanNumeral & roman\n            set num to num - arabic\n        end repeat\n    end repeat\n    return romanNumeral\nend convertToRoman\n```"
  },
  {
    "task": "Create a tool that reads a list of words and prints them with each letter in reverse order.",
    "code": "```applescript\n-- Open the input file\nset inputFile to (choose file with prompt \"Select the file containing words:\")\nset inputText to read inputFile using delimiter {return, linefeed}\n\n-- Process each word\nset reversedWords to {}\nrepeat with word in inputText\n    set end of reversedWords to (reverse of (characters of word)) as string\nend repeat\n\n-- Print each reversed word\nrepeat with reversedWord in reversedWords\n    display dialog reversedWord buttons {\"OK\"} default button \"OK\"\nend repeat\n```"
  },
  {
    "task": "Design a program that reads a set of points and prints the one closest to the origin.",
    "code": "```applescript\nset pointList to {}\nrepeat\n    display dialog \"Enter a point as x,y or leave blank to finish:\" default answer \"\"\n    set input to text returned of result\n    if input is \"\" then exit repeat\n    set end of pointList to input\nend repeat\n\nset closestPoint to \"\"\nset minDistance to -1\n\nrepeat with point in pointList\n    set {x, y} to my parsePoint(point)\n    set distance to (x ^ 2 + y ^ 2) ^ 0.5\n    if minDistance is -1 or distance < minDistance then\n        set minDistance to distance\n        set closestPoint to point\n    end if\nend repeat\n\nif closestPoint is not \"\" then\n    display dialog \"The closest point to the origin is: \" & closestPoint\nelse\n    display dialog \"No points were entered.\"\nend if\n\non parsePoint(p)\n    set {TID, text item delimiters} to {text item delimiters, \",\"}\n    set {x, y} to text items of p\n    set text item delimiters to TID\n    return {x as number, y as number}\nend parsePoint\n```"
  },
  {
    "task": "Write a script that reads a text and prints the frequency of each word.",
    "code": "```applescript\nset filePath to choose file with prompt \"Select a text file\"\nset fileContent to read filePath\n\nset wordList to words of fileContent\nset wordFrequency to {}\n\nrepeat with aWord in wordList\n\tset found to false\n\trepeat with aPair in wordFrequency\n\t\tif item 1 of aPair is aWord then\n\t\t\tset item 2 of aPair to (item 2 of aPair) + 1\n\t\t\tset found to true\n\t\t\texit repeat\n\t\tend if\n\tend repeat\n\tif not found then\n\t\tset end of wordFrequency to {aWord, 1}\n\tend if\nend repeat\n\nrepeat with aPair in wordFrequency\n\tlog (item 1 of aPair & \": \" & item 2 of aPair)\nend repeat\n```"
  },
  {
    "task": "Build a program that reads a list of integers and prints the second smallest.",
    "code": "```applescript\nset inputList to text returned of (display dialog \"Enter a list of integers separated by commas:\" default answer \"\")\nset integerList to {}\nrepeat with num in my text items of inputList\n\tset end of integerList to (num as integer)\nend repeat\n\nset sortedList to my sortList(integerList)\nif (count of sortedList) \u2265 2 then\n\tset secondSmallest to item 2 of sortedList\n\tdisplay dialog \"The second smallest integer is: \" & secondSmallest\nelse\n\tdisplay dialog \"Not enough integers to determine the second smallest.\"\nend if\n\non sortList(aList)\n\tset sortedList to aList\n\trepeat with i from 1 to (count of sortedList) - 1\n\t\trepeat with j from (i + 1) to count of sortedList\n\t\t\tif (item i of sortedList) > (item j of sortedList) then\n\t\t\t\tset temp to item i of sortedList\n\t\t\t\tset item i of sortedList to item j of sortedList\n\t\t\t\tset item j of sortedList to temp\n\t\t\tend if\n\t\tend repeat\n\tend repeat\n\treturn sortedList\nend sortList\n```"
  },
  {
    "task": "Implement a tool that reads a string and prints all its substrings.",
    "code": "```applescript\non run\n    set inputString to do shell script \"read -p \\\"Enter a string: \\\" userInput; echo $userInput\"\n    set substrings to getAllSubstrings(inputString)\n    \n    repeat with substring in substrings\n        do shell script \"echo \" & quoted form of substring\n    end repeat\nend run\n\non getAllSubstrings(s)\n    set substringsList to {}\n    set stringLength to length of s\n    repeat with i from 1 to stringLength\n        repeat with j from i to stringLength\n            set end of substringsList to text i thru j of s\n        end repeat\n    end repeat\n    return substringsList\nend getAllSubstrings\n```"
  },
  {
    "task": "Write a program that reads a number and generates a random number up to that number.",
    "code": "```applescript\ndisplay dialog \"Enter a number:\" default answer \"\"\nset userInput to text returned of result\nset userNumber to userInput as integer\nset randomNumber to random number from 0 to userNumber\ndisplay dialog \"Random number: \" & randomNumber\n```"
  },
  {
    "task": "Create a script that reads a sentence and prints it with each word reversed.",
    "code": "```applescript\nset userInput to text returned of (display dialog \"Enter a sentence:\" default answer \"\")\nset reversedWords to \"\"\nset wordList to words of userInput\nrepeat with w in wordList\n    set reversedWords to reversedWords & (reverse of (characters of w as string)) & \" \"\nend repeat\ndisplay dialog reversedWords\n```"
  },
  {
    "task": "Develop a tool that reads a text and prints it with each sentence on a new line.",
    "code": "```applescript\nset inputText to do shell script \"cat\"\n\nset sentenceList to paragraphs of (do shell script \"echo \" & quoted form of inputText & \" | sed 's/\\\\([.!?]\\\\) \\\\([^ ]\\\\)/\\\\1\\\\n\\\\2/g'\")\n\nrepeat with sentence in sentenceList\n    if sentence is not \"\" then\n        display dialog sentence\n    end if\nend repeat\n```"
  },
  {
    "task": "Design a program that reads a list of numbers and prints the product of all negative numbers.",
    "code": "```applescript\nset inputNumbers to text returned of (display dialog \"Enter a list of numbers separated by commas:\" default answer \"\")\nset numberList to paragraphs of (do shell script \"echo \" & quoted form of inputNumbers & \" | tr ',' '\\n'\")\n\nset product to 1\nset hasNegative to false\n\nrepeat with num in numberList\n\tset n to num as number\n\tif n < 0 then\n\t\tset hasNegative to true\n\t\tset product to product * n\n\tend if\nend repeat\n\nif hasNegative then\n\tdisplay dialog \"Product of negative numbers: \" & product\nelse\n\tdisplay dialog \"No negative numbers in the list.\"\nend if\n```"
  },
  {
    "task": "Write a script that reads a dictionary and prints the keys and values in sorted order.",
    "code": "```applescript\nset myDict to {key3:\"value3\", key1:\"value1\", key2:\"value2\"}\n\nset sortedKeys to sort keys of myDict\n\nrepeat with aKey in sortedKeys\n    set aValue to item aKey of myDict\n    log aKey & \": \" & aValue\nend repeat\n\non sort(keys)\n    set sortedKeys to keys\n    set AppleScript's text item delimiters to \"\"\n    set sortedKeys to do shell script \"echo \" & quoted form of (keys as text) & \" | tr ', ' '\\n' | sort\"\n    set sortedKeys to paragraphs of sortedKeys\n    return sortedKeys\nend sort\n```"
  },
  {
    "task": "Create a program that reads a text and prints the number of unique words.",
    "code": "```applescript\nset filePath to choose file with prompt \"Select a text file\"\nset fileContent to read filePath\n\nset textItems to words of fileContent\nset uniqueWords to {}\n\nrepeat with word in textItems\n\tif uniqueWords does not contain word then\n\t\tset end of uniqueWords to word\n\tend if\nend repeat\n\ndisplay dialog \"Number of unique words: \" & (count of uniqueWords)\n```"
  }
]