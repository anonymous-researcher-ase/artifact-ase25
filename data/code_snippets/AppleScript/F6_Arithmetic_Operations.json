[
  {
    "task": "Write a function that takes two numbers and returns their sum.",
    "code": "```applescript\non addNumbers(a, b)\n    return a + b\nend addNumbers\n```"
  },
  {
    "task": "Create a program that calculates the difference between two given integers.",
    "code": "```applescript\nset firstNumber to 10\nset secondNumber to 4\nset difference to firstNumber - secondNumber\ndifference\n```"
  },
  {
    "task": "Design a function to multiply two floating-point numbers and return the result.",
    "code": "```applescript\non multiplyNumbers(num1, num2)\n    return num1 * num2\nend multiplyNumbers\n```"
  },
  {
    "task": "Implement a function that divides two numbers and handles division by zero exceptions.",
    "code": "```applescript\non divideNumbers(a, b)\n    try\n        if b is 0 then\n            error \"Division by zero is not allowed.\"\n        else\n            return a / b\n        end if\n    on error errMsg number errNum\n        return errMsg\n    end try\nend divideNumbers\n\n-- Example usage\nset result to divideNumbers(10, 2)\ndisplay dialog result as string\n\nset result to divideNumbers(10, 0)\ndisplay dialog result as string\n```"
  },
  {
    "task": "Build a calculator that can perform addition, subtraction, multiplication, and division on user-provided inputs.",
    "code": "```applescript\ndisplay dialog \"Enter the first number:\" default answer \"\"\nset firstNumber to text returned of result\nset firstNumber to firstNumber as number\n\ndisplay dialog \"Enter the second number:\" default answer \"\"\nset secondNumber to text returned of result\nset secondNumber to secondNumber as number\n\nset operationList to {\"Addition\", \"Subtraction\", \"Multiplication\", \"Division\"}\nchoose from list operationList with prompt \"Choose an operation:\"\nset operation to result as string\n\nset result to 0\n\nif operation is \"Addition\" then\n    set result to firstNumber + secondNumber\nelse if operation is \"Subtraction\" then\n    set result to firstNumber - secondNumber\nelse if operation is \"Multiplication\" then\n    set result to firstNumber * secondNumber\nelse if operation is \"Division\" then\n    if secondNumber is not 0 then\n        set result to firstNumber / secondNumber\n    else\n        display dialog \"Cannot divide by zero.\" buttons {\"OK\"} default button \"OK\"\n        return\n    end if\nend if\n\ndisplay dialog \"The result of \" & operation & \" is: \" & result buttons {\"OK\"} default button \"OK\"\n```"
  },
  {
    "task": "Write a script to compute the average of a list of numbers using arithmetic operations.",
    "code": "```applescript\nset numberList to {10, 20, 30, 40, 50}\nset total to 0\nrepeat with num in numberList\n    set total to total + num\nend repeat\nset average to total / (count numberList)\nreturn average\n```"
  },
  {
    "task": "Create a function that returns the remainder of the division of two integers.",
    "code": "```applescript\non remainderOfDivision(a, b)\n\treturn a mod b\nend remainderOfDivision\n```"
  },
  {
    "task": "Develop a function that can add a variable number of arguments and return the total.",
    "code": "```applescript\non addNumbers(nList)\n    set total to 0\n    repeat with n in nList\n        set total to total + n\n    end repeat\n    return total\nend addNumbers\n\n-- Example usage:\n-- set result to addNumbers({1, 2, 3, 4, 5})\n-- display dialog result\n```"
  },
  {
    "task": "Write a program that subtracts a series of numbers from an initial value.",
    "code": "```applescript\nset initialValue to 100\nset numbersToSubtract to {10, 5, 20, 15}\n\nrepeat with aNumber in numbersToSubtract\n    set initialValue to initialValue - aNumber\nend repeat\n\nreturn initialValue\n```"
  },
  {
    "task": "Implement a function that multiplies all elements in an array and returns the product.",
    "code": "```applescript\non multiplyArrayElements(theArray)\n\tset product to 1\n\trepeat with eachElement in theArray\n\t\tset product to product * eachElement\n\tend repeat\n\treturn product\nend multiplyArrayElements\n```"
  },
  {
    "task": "Design a program that divides a number by another and rounds the result to two decimal places.",
    "code": "```applescript\nset num1 to 10\nset num2 to 3\n\nset result to num1 / num2\nset roundedResult to round (result * 100) rounding to nearest / 100.0\n\nreturn roundedResult\n```"
  },
  {
    "task": "Create a function that performs arithmetic operations on complex numbers.",
    "code": "```applescript\non complexAdd(a, b)\n\tset realPart to (item 1 of a) + (item 1 of b)\n\tset imaginaryPart to (item 2 of a) + (item 2 of b)\n\treturn {realPart, imaginaryPart}\nend complexAdd\n\non complexSubtract(a, b)\n\tset realPart to (item 1 of a) - (item 1 of b)\n\tset imaginaryPart to (item 2 of a) - (item 2 of b)\n\treturn {realPart, imaginaryPart}\nend complexSubtract\n\non complexMultiply(a, b)\n\tset realPart to (item 1 of a) * (item 1 of b) - (item 2 of a) * (item 2 of b)\n\tset imaginaryPart to (item 1 of a) * (item 2 of b) + (item 2 of a) * (item 1 of b)\n\treturn {realPart, imaginaryPart}\nend complexMultiply\n\non complexDivide(a, b)\n\tset denominator to (item 1 of b) ^ 2 + (item 2 of b) ^ 2\n\tset realPart to ((item 1 of a) * (item 1 of b) + (item 2 of a) * (item 2 of b)) / denominator\n\tset imaginaryPart to ((item 2 of a) * (item 1 of b) - (item 1 of a) * (item 2 of b)) / denominator\n\treturn {realPart, imaginaryPart}\nend complexDivide\n```"
  },
  {
    "task": "Write a function to calculate the area of a rectangle given its length and width using multiplication.",
    "code": "```applescript\non calculateRectangleArea(length, width)\n    return length * width\nend calculateRectangleArea\n```"
  },
  {
    "task": "Build a program that converts a price in dollars to another currency using multiplication with exchange rates.",
    "code": "```applescript\nset dollars to 100.0\nset exchangeRate to 0.85 -- example exchange rate for conversion (e.g., USD to EUR)\nset convertedPrice to dollars * exchangeRate\ndisplay dialog \"Converted Price: \" & convertedPrice\n```"
  },
  {
    "task": "Implement a function that checks if a number is divisible by another and returns a boolean.",
    "code": "```applescript\non isDivisibleBy(number, divisor)\n    if divisor = 0 then\n        error \"Divisor cannot be zero.\"\n    end if\n    return (number mod divisor = 0)\nend isDivisibleBy\n```"
  },
  {
    "task": "Write a script to sum the digits of an integer using arithmetic operations.",
    "code": "```applescript\nset inputNumber to 12345\nset sumDigits to 0\n\nrepeat while inputNumber > 0\n    set lastDigit to inputNumber mod 10\n    set sumDigits to sumDigits + lastDigit\n    set inputNumber to inputNumber div 10\nend repeat\n\nreturn sumDigits\n```"
  },
  {
    "task": "Develop a function that applies a discount percentage to a price using subtraction and multiplication.",
    "code": "```applescript\non applyDiscount(price, discountPercentage)\n\tset discountAmount to (price * discountPercentage) / 100\n\tset discountedPrice to price - discountAmount\n\treturn discountedPrice\nend applyDiscount\n```"
  },
  {
    "task": "Create a program to calculate the yearly salary given an hourly wage and hours worked per week.",
    "code": "```applescript\nset hourlyWage to 20.0\nset hoursPerWeek to 40\nset weeksPerYear to 52\n\nset weeklySalary to hourlyWage * hoursPerWeek\nset yearlySalary to weeklySalary * weeksPerYear\n\nreturn yearlySalary\n```"
  },
  {
    "task": "Design a function that calculates the compound interest over a given period using arithmetic operations.",
    "code": "```applescript\non compoundInterest(principal, rate, timesCompounded, years)\n\tset ratePerPeriod to rate / timesCompounded\n\tset totalPeriods to timesCompounded * years\n\tset compoundAmount to principal * ((1 + ratePerPeriod) ^ totalPeriods)\n\treturn compoundAmount\nend compoundInterest\n```"
  },
  {
    "task": "Write a program that scales a 2D point by a given factor using multiplication.",
    "code": "```applescript\n-- Define a 2D point\nset x to 3\nset y to 4\n\n-- Define the scaling factor\nset scaleFactor to 2\n\n-- Scale the 2D point\nset newX to x * scaleFactor\nset newY to y * scaleFactor\n\n-- Output the scaled point\nreturn {newX, newY}\n```"
  },
  {
    "task": "Implement a function that calculates the perimeter of a triangle given its side lengths.",
    "code": "```applescript\non calculatePerimeter(side1, side2, side3)\n\treturn side1 + side2 + side3\nend calculatePerimeter\n```"
  },
  {
    "task": "Create a function to determine if three sides can form a right triangle using the Pythagorean theorem.",
    "code": "```applescript\non isRightTriangle(a, b, c)\n\ttell application \"Finder\"\n\t\tset sides to {a, b, c}\n\t\tset sortedSides to my sortList(sides)\n\t\tset square1 to (item 1 of sortedSides) ^ 2\n\t\tset square2 to (item 2 of sortedSides) ^ 2\n\t\tset hypotenuseSquare to (item 3 of sortedSides) ^ 2\n\t\treturn (hypotenuseSquare = square1 + square2)\n\tend tell\nend isRightTriangle\n\non sortList(aList)\n\tset sortedList to aList\n\trepeat with i from 1 to (count sortedList) - 1\n\t\trepeat with j from i + 1 to count sortedList\n\t\t\tif (item i of sortedList) > (item j of sortedList) then\n\t\t\t\tset temp to item i of sortedList\n\t\t\t\tset item i of sortedList to item j of sortedList\n\t\t\t\tset item j of sortedList to temp\n\t\t\tend if\n\t\tend repeat\n\tend repeat\n\treturn sortedList\nend sortList\n```"
  },
  {
    "task": "Write a script that calculates the total cost of items in a shopping cart using addition.",
    "code": "```applescript\nset item1 to 15.99\nset item2 to 23.50\nset item3 to 9.75\nset item4 to 4.99\n\nset totalCost to item1 + item2 + item3 + item4\n\ndisplay dialog \"The total cost of items in the shopping cart is $\" & totalCost\n```"
  },
  {
    "task": "Develop a function that returns the quotient and remainder of a division operation.",
    "code": "```applescript\non divisionResult(dividend, divisor)\n    set quotient to dividend div divisor\n    set remainder to dividend mod divisor\n    return {quotient, remainder}\nend divisionResult\n```"
  },
  {
    "task": "Build a program that simulates a basic checkout system using arithmetic operations for totals and discounts.",
    "code": "```applescript\n-- Define item prices\nset item1Price to 5.99\nset item2Price to 12.49\nset item3Price to 7.85\n\n-- Define item quantities\nset item1Quantity to 2\nset item2Quantity to 1\nset item3Quantity to 3\n\n-- Calculate total for each item\nset item1Total to item1Price * item1Quantity\nset item2Total to item2Price * item2Quantity\nset item3Total to item3Price * item3Quantity\n\n-- Calculate subtotal\nset subtotal to item1Total + item2Total + item3Total\n\n-- Define discount percentage (e.g., 10%)\nset discountPercentage to 10\n\n-- Calculate discount amount\nset discountAmount to (subtotal * discountPercentage) / 100\n\n-- Calculate final total\nset finalTotal to subtotal - discountAmount\n\n-- Output results\ndisplay dialog \"Subtotal: $\" & subtotal & return & \"Discount: $\" & discountAmount & return & \"Final Total: $\" & finalTotal\n```"
  },
  {
    "task": "Implement a function to calculate the distance between two points on a plane using subtraction and square roots.",
    "code": "```applescript\non calculateDistance(x1, y1, x2, y2)\n\tset xDifference to x2 - x1\n\tset yDifference to y2 - y1\n\tset distance to (xDifference ^ 2 + yDifference ^ 2) ^ 0.5\n\treturn distance\nend calculateDistance\n```"
  },
  {
    "task": "Write a function that calculates the speed of a vehicle given distance and time using division.",
    "code": "```applescript\non calculateSpeed(distance, time)\n    if time is not 0 then\n        return distance / time\n    else\n        return \"Time cannot be zero\"\n    end if\nend calculateSpeed\n```"
  },
  {
    "task": "Create a program to compute the total minutes in a given number of hours using multiplication.",
    "code": "```applescript\nset hours to 5\nset totalMinutes to hours * 60\ndisplay dialog \"Total minutes: \" & totalMinutes\n```"
  },
  {
    "task": "Design a function that determines the number of dozens of eggs from a given total number of eggs.",
    "code": "```applescript\non numberOfDozens(totalEggs)\n    return totalEggs div 12\nend numberOfDozens\n```"
  },
  {
    "task": "Write a script to find the greatest common divisor of two numbers using arithmetic operations.",
    "code": "```applescript\n-- Function to find GCD using Euclidean algorithm\non gcd(a, b)\n\trepeat until b is 0\n\t\tset remainder to a mod b\n\t\tset a to b\n\t\tset b to remainder\n\tend repeat\n\treturn a\nend gcd\n\n-- Example usage\nset number1 to 48\nset number2 to 18\nset result to gcd(number1, number2)\ndisplay dialog \"The GCD of \" & number1 & \" and \" & number2 & \" is \" & result\n```"
  },
  {
    "task": "Develop a program that calculates the total weight of multiple items using addition.",
    "code": "```applescript\nset itemWeights to {2.5, 3.75, 1.2, 4.8} -- Example item weights\nset totalWeight to 0\n\nrepeat with weight in itemWeights\n    set totalWeight to totalWeight + weight\nend repeat\n\nreturn totalWeight\n```"
  },
  {
    "task": "Implement a function to convert a temperature from Celsius to Fahrenheit using multiplication and addition.",
    "code": "```applescript\non celsiusToFahrenheit(celsiusTemperature)\n\tset fahrenheitTemperature to celsiusTemperature * 1.8 + 32\n\treturn fahrenheitTemperature\nend celsiusToFahrenheit\n```"
  },
  {
    "task": "Create a program that determines the age difference between two people given their birth years.",
    "code": "```applescript\nset birthYear1 to 1990\nset birthYear2 to 1985\n\nset ageDifference to birthYear1 - birthYear2\n\ndisplay dialog \"The age difference is \" & ageDifference & \" years.\"\n```"
  },
  {
    "task": "Write a function to calculate the final price after applying tax and discount using addition and subtraction.",
    "code": "```applescript\non calculateFinalPrice(basePrice, taxRate, discountRate)\n    set taxAmount to basePrice * (taxRate / 100)\n    set discountAmount to basePrice * (discountRate / 100)\n    set finalPrice to basePrice + taxAmount - discountAmount\n    return finalPrice\nend calculateFinalPrice\n```"
  },
  {
    "task": "Design a program to compute the net profit given total revenue and expenses.",
    "code": "```applescript\non calculateNetProfit(totalRevenue, totalExpenses)\n    set netProfit to totalRevenue - totalExpenses\n    return netProfit\nend calculateNetProfit\n\nset totalRevenue to 100000\nset totalExpenses to 75000\nset netProfit to calculateNetProfit(totalRevenue, totalExpenses)\ndisplay dialog \"The net profit is \" & netProfit\n```"
  },
  {
    "task": "Develop a function to calculate the BMI given weight and height using division and multiplication.",
    "code": "```applescript\non calculateBMI(weight, height)\n\tset bmi to weight / (height * height)\n\treturn bmi\nend calculateBMI\n```"
  },
  {
    "task": "Create a function that calculates the midpoint between two numbers using addition and division.",
    "code": "```applescript\non calculateMidpoint(num1, num2)\n\tset sum to num1 + num2\n\tset midpoint to sum / 2\n\treturn midpoint\nend calculateMidpoint\n```"
  },
  {
    "task": "Write a program that outputs the result of dividing a number by another with remainder.",
    "code": "```applescript\nset numerator to 10\nset denominator to 3\nset quotient to numerator div denominator\nset remainder to numerator mod denominator\nset result to \"Quotient: \" & quotient & \", Remainder: \" & remainder\ndisplay dialog result\n```"
  },
  {
    "task": "Implement a function to calculate the factorial of a number using multiplication.",
    "code": "```applescript\non factorial(n)\n    if n < 0 then\n        return \"Undefined for negative numbers\"\n    else if n = 0 then\n        return 1\n    else\n        set result to 1\n        repeat with i from 1 to n\n            set result to result * i\n        end repeat\n        return result\n    end if\nend factorial\n```"
  },
  {
    "task": "Build a script to find the average of three numbers using addition and division.",
    "code": "```applescript\nset num1 to 10\nset num2 to 20\nset num3 to 30\n\nset sum to num1 + num2 + num3\nset average to sum / 3\n\nreturn average\n```"
  },
  {
    "task": "Create a program that simulates a simple bank account using arithmetic operations for deposits and withdrawals.",
    "code": "```applescript\nproperty accountBalance : 0\n\non deposit(amount)\n    set accountBalance to accountBalance + amount\n    return accountBalance\nend deposit\n\non withdraw(amount)\n    if amount \u2264 accountBalance then\n        set accountBalance to accountBalance - amount\n    else\n        return \"Insufficient funds\"\n    end if\n    return accountBalance\nend withdraw\n\n-- Example Usage\ndeposit(100)\nwithdraw(50)\nwithdraw(100)\n```"
  },
  {
    "task": "Write a function that computes the cost per item given a total cost and quantity using division.",
    "code": "```applescript\non computeCostPerItem(totalCost, quantity)\n\treturn totalCost / quantity\nend computeCostPerItem\n```"
  },
  {
    "task": "Design a program that calculates the time required to travel a distance at a given speed.",
    "code": "```applescript\nset distance to 100 -- example distance in kilometers\nset speed to 80 -- example speed in kilometers per hour\n\nif speed is not 0 then\n\tset timeRequired to distance / speed\n\tdisplay dialog \"Time required to travel \" & distance & \" km at \" & speed & \" km/h is \" & timeRequired & \" hours.\"\nelse\n\tdisplay dialog \"Speed cannot be zero.\"\nend if\n```"
  },
  {
    "task": "Develop a function that returns the absolute difference between two numbers.",
    "code": "```applescript\non absoluteDifference(num1, num2)\n\tset difference to num1 - num2\n\tif difference < 0 then\n\t\treturn -difference\n\telse\n\t\treturn difference\n\tend if\nend absoluteDifference\n```"
  },
  {
    "task": "Implement a program to compute the geometric mean of a set of numbers using multiplication and roots.",
    "code": "```applescript\nset numbers to {1, 2, 3, 4, 5} -- Example set of numbers\nset product to 1\nrepeat with i from 1 to count of numbers\n    set product to product * (item i of numbers)\nend repeat\nset n to count of numbers\nset geometricMean to product ^ (1 / n)\ngeometricMean\n```"
  },
  {
    "task": "Write a function to calculate the total interest paid on a loan using arithmetic operations.",
    "code": "```applescript\non calculateTotalInterest(principal, rate, time)\n    set totalInterest to principal * rate * time\n    return totalInterest\nend calculateTotalInterest\n```"
  },
  {
    "task": "Create a program that calculates the sum of even numbers within a specified range.",
    "code": "```applescript\non sumOfEvensInRange(startNum, endNum)\n\tset sum to 0\n\trepeat with n from startNum to endNum\n\t\tif n mod 2 is 0 then\n\t\t\tset sum to sum + n\n\t\tend if\n\tend repeat\n\treturn sum\nend sumOfEvensInRange\n\n-- Example use\nset startNumber to 1\nset endNumber to 10\nset result to sumOfEvensInRange(startNumber, endNumber)\ndisplay dialog \"The sum of even numbers between \" & startNumber & \" and \" & endNumber & \" is: \" & result\n```"
  },
  {
    "task": "Design a script to determine the final balance in a savings account after regular deposits and withdrawals.",
    "code": "```applescript\nset initialBalance to 1000\nset deposits to {200, 150, 300}\nset withdrawals to {100, 50, 75}\n\nset finalBalance to initialBalance\n\nrepeat with deposit in deposits\n    set finalBalance to finalBalance + deposit\nend repeat\n\nrepeat with withdrawal in withdrawals\n    set finalBalance to finalBalance - withdrawal\nend repeat\n\nreturn finalBalance\n```"
  },
  {
    "task": "Develop a function to compute the surface area of a cylinder given its radius and height.",
    "code": "```applescript\non computeSurfaceAreaOfCylinder(radius, height)\n\tset pi to 3.141592653589793\n\tset lateralArea to 2 * pi * radius * height\n\tset baseArea to 2 * pi * radius * radius\n\tset surfaceArea to lateralArea + baseArea\n\treturn surfaceArea\nend computeSurfaceAreaOfCylinder\n```"
  },
  {
    "task": "Write a program that outputs the result of an arithmetic sequence given the first term and common difference.",
    "code": "```applescript\nset firstTerm to 5\nset commonDifference to 3\nset numberOfTerms to 10\n\nrepeat with n from 0 to (numberOfTerms - 1)\n    set result to firstTerm + (n * commonDifference)\n    display dialog \"Term \" & (n + 1) & \": \" & result\nend repeat\n```"
  },
  {
    "task": "Implement a function that finds the average speed for a trip given total distance and time.",
    "code": "```applescript\non averageSpeed(totalDistance, totalTime)\n    if totalTime is not 0 then\n        set avgSpeed to totalDistance / totalTime\n    else\n        set avgSpeed to 0\n    end if\n    return avgSpeed\nend averageSpeed\n```"
  },
  {
    "task": "Create a function to calculate the total cost of a road trip given fuel cost per mile and distance.",
    "code": "```applescript\non calculateTotalCost(fuelCostPerMile, distance)\n    return fuelCostPerMile * distance\nend calculateTotalCost\n```"
  },
  {
    "task": "Write a script that determines the number of tiles required to cover a floor area using arithmetic operations.",
    "code": "```applescript\nset floorLength to 10 -- example length in meters\nset floorWidth to 5 -- example width in meters\nset tileSize to 0.25 -- example tile size in square meters\n\nset floorArea to floorLength * floorWidth\nset numberOfTiles to floorArea / tileSize\n\ndisplay dialog \"Number of tiles required: \" & (round numberOfTiles rounding up)\n```"
  },
  {
    "task": "Develop a program to calculate the amount of paint needed to cover a wall given its area.",
    "code": "```applescript\n-- Define the dimensions of the wall\nset wallWidth to 10 -- in meters\nset wallHeight to 3 -- in meters\n\n-- Calculate the area of the wall\nset wallArea to wallWidth * wallHeight\n\n-- Define the coverage of the paint\nset coveragePerLiter to 12 -- in square meters per liter\n\n-- Calculate the amount of paint needed\nset paintNeeded to wallArea / coveragePerLiter\n\n-- Display the result\ndisplay dialog \"The amount of paint needed is \" & paintNeeded & \" liters.\"\n```"
  },
  {
    "task": "Build a function that calculates the price per unit weight given total price and weight.",
    "code": "```applescript\non calculatePricePerUnitWeight(totalPrice, weight)\n    if weight is not equal to 0 then\n        return totalPrice / weight\n    else\n        return \"Weight cannot be zero\"\n    end if\nend calculatePricePerUnitWeight\n```"
  },
  {
    "task": "Implement a program that computes the volume of a rectangular prism given its dimensions.",
    "code": "```applescript\n-- Function to calculate the volume of a rectangular prism\non calculateVolume(length, width, height)\n\treturn length * width * height\nend calculateVolume\n\n-- Example usage\nset length to 5\nset width to 3\nset height to 10\n\nset volume to calculateVolume(length, width, height)\ndisplay dialog \"The volume of the rectangular prism is \" & volume\n```"
  },
  {
    "task": "Write a function to find the percentage increase or decrease between two numbers.",
    "code": "```applescript\non calculatePercentageChange(oldValue, newValue)\n\tset difference to newValue - oldValue\n\tset percentageChange to (difference / oldValue) * 100\n\treturn percentageChange\nend calculatePercentageChange\n```"
  },
  {
    "task": "Create a program to determine the number of complete weeks within a specified number of days.",
    "code": "```applescript\nset numberOfDays to 45\nset completeWeeks to numberOfDays div 7\ncompleteWeeks\n```"
  },
  {
    "task": "Design a function that calculates the break-even point for a business using cost and revenue data.",
    "code": "```applescript\non calculateBreakEvenPoint(fixedCosts, variableCosts, pricePerUnit)\n\tset breakEvenPoint to fixedCosts / (pricePerUnit - variableCosts)\n\treturn breakEvenPoint\nend calculateBreakEvenPoint\n\n-- Example usage:\nset fixedCosts to 50000\nset variableCosts to 20\nset pricePerUnit to 50\nset breakEven to calculateBreakEvenPoint(fixedCosts, variableCosts, pricePerUnit)\ndisplay dialog \"Break-even point is: \" & breakEven\n```"
  },
  {
    "task": "Develop a program that converts a total number of seconds into hours, minutes, and seconds.",
    "code": "```applescript\nset totalSeconds to 3661\n\nset hours to totalSeconds div 3600\nset remainingSeconds to totalSeconds mod 3600\nset minutes to remainingSeconds div 60\nset seconds to remainingSeconds mod 60\n\ndisplay dialog \"Hours: \" & hours & \", Minutes: \" & minutes & \", Seconds: \" & seconds\n```"
  },
  {
    "task": "Write a function that calculates the depreciation of an asset over time using arithmetic operations.",
    "code": "```applescript\non calculateDepreciation(initialValue, depreciationRate, years)\n\tset currentValue to initialValue\n\trepeat with i from 1 to years\n\t\tset currentValue to currentValue - (currentValue * depreciationRate)\n\tend repeat\n\treturn currentValue\nend calculateDepreciation\n```"
  },
  {
    "task": "Create a program that computes the final exam grade needed to achieve a target course average.",
    "code": "```applescript\nset currentAverage to 85\nset weightFinalExam to 0.4\nset targetAverage to 90\n\nset requiredFinalExamGrade to (targetAverage - ((1 - weightFinalExam) * currentAverage)) / weightFinalExam\n\ndisplay dialog \"You need to score \" & requiredFinalExamGrade & \" on the final exam to achieve your target average.\"\n```"
  },
  {
    "task": "Implement a function to calculate the total cost of groceries given prices and quantities of items.",
    "code": "```applescript\non calculateTotalCost(prices, quantities)\n\tset totalCost to 0\n\tset itemCount to count of prices\n\trepeat with i from 1 to itemCount\n\t\tset totalCost to totalCost + (item i of prices) * (item i of quantities)\n\tend repeat\n\treturn totalCost\nend calculateTotalCost\n\n-- Example usage\nset prices to {2.99, 5.49, 3.75}\nset quantities to {3, 2, 4}\nset totalCost to calculateTotalCost(prices, quantities)\ndisplay dialog \"Total Cost: $\" & totalCost\n```"
  },
  {
    "task": "Write a script that determines the number of years required to double an investment using a fixed interest rate.",
    "code": "```applescript\nset principal to 1000\nset interestRate to 5\nset amount to principal\nset years to 0\n\nrepeat while amount < principal * 2\n\tset amount to amount * (1 + interestRate / 100)\n\tset years to years + 1\nend repeat\n\nreturn years\n```"
  },
  {
    "task": "Develop a function that computes the harmonic mean of a set of numbers using division and addition.",
    "code": "```applescript\non harmonicMean(numbers)\n\tset n to length of numbers\n\tset reciprocalSum to 0\n\trepeat with i from 1 to n\n\t\tset reciprocalSum to reciprocalSum + (1 / item i of numbers)\n\tend repeat\n\tset harmonicMean to n / reciprocalSum\n\treturn harmonicMean\nend harmonicMean\n```"
  },
  {
    "task": "Create a program to find the sum of the squares of numbers in a given range.",
    "code": "```applescript\nset startNumber to 1\nset endNumber to 10\nset sumOfSquares to 0\n\nrepeat with i from startNumber to endNumber\n    set sumOfSquares to sumOfSquares + (i * i)\nend repeat\n\nreturn sumOfSquares\n```"
  },
  {
    "task": "Design a function that calculates the energy consumption of an appliance given power and usage time.",
    "code": "```applescript\non calculateEnergyConsumption(power, usageTime)\n\tset energyConsumption to power * usageTime\n\treturn energyConsumption\nend calculateEnergyConsumption\n```"
  },
  {
    "task": "Write a program that simulates a simple stock portfolio using arithmetic operations for buying and selling.",
    "code": "```applescript\n-- Define initial stock portfolio\nset stockPortfolio to {AAPL:100, GOOG:50, TSLA:30}\n\n-- Function to buy stocks\non buyStock(stockSymbol, quantity)\n\tset currentQuantity to stockPortfolio's stockSymbol\n\tset stockPortfolio's stockSymbol to currentQuantity + quantity\nend buyStock\n\n-- Function to sell stocks\non sellStock(stockSymbol, quantity)\n\tset currentQuantity to stockPortfolio's stockSymbol\n\tset stockPortfolio's stockSymbol to currentQuantity - quantity\nend sellStock\n\n-- Example operations\nbuyStock(\"AAPL\", 20) -- Buy 20 AAPL stocks\nsellStock(\"GOOG\", 10) -- Sell 10 GOOG stocks\n\n-- Output updated portfolio\nreturn stockPortfolio\n```"
  },
  {
    "task": "Implement a function to calculate the gravitational force between two masses using multiplication and division.",
    "code": "```applescript\non calculateGravitationalForce(mass1, mass2, distance)\n\tset gravitationalConstant to 6.67430E-11\n\tset force to (gravitationalConstant * mass1 * mass2) / (distance * distance)\n\treturn force\nend calculateGravitationalForce\n```"
  },
  {
    "task": "Create a function that determines the price per square foot of a piece of real estate.",
    "code": "```applescript\non pricePerSquareFoot(price, area)\n\treturn price / area\nend pricePerSquareFoot\n\n-- Example usage:\nset result to pricePerSquareFoot(500000, 2500)\ndisplay dialog \"Price per square foot: \" & result\n```"
  },
  {
    "task": "Write a script to compute the total interest earned on a savings account with monthly compounding.",
    "code": "```applescript\nset principal to 1000 -- initial amount\nset annualRate to 0.05 -- annual interest rate\nset months to 12 -- compounding period\n\nset monthlyRate to annualRate / 12\nset totalAmount to principal * (1 + monthlyRate) ^ months\nset totalInterest to totalAmount - principal\n\nreturn totalInterest\n```"
  },
  {
    "task": "Develop a program that calculates the calories burned during exercise given MET value and duration.",
    "code": "```applescript\nset weight to 70 -- weight in kg\nset metValue to 8 -- MET value\nset duration to 1 -- duration in hours\n\nset caloriesBurned to metValue * weight * duration\n\ndisplay dialog \"Calories burned: \" & caloriesBurned\n```"
  },
  {
    "task": "Build a function that converts a speed from miles per hour to kilometers per hour using multiplication.",
    "code": "```applescript\non mphToKph(mph)\n\treturn mph * 1.60934\nend mphToKph\n```"
  },
  {
    "task": "Implement a program to find the number of days between two dates using arithmetic operations.",
    "code": "```applescript\nset date1 to date \"1/1/2023\"\nset date2 to date \"1/10/2023\"\n\nset timeDifference to date2 - date1\nset dayDifference to timeDifference / days\n\ndisplay dialog \"Number of days between dates: \" & dayDifference\n```"
  },
  {
    "task": "Write a function to calculate the area of a circle given its radius.",
    "code": "```applescript\non calculateAreaOfCircle(radius)\n\tset pi to 3.141592653589793\n\treturn pi * radius * radius\nend calculateAreaOfCircle\n```"
  },
  {
    "task": "Create a program that determines the total distance driven given trips with varying speeds and durations.",
    "code": "```applescript\n-- Define a list of trips with each trip having speed and duration\nset trips to {{speed: 60, duration: 2}, {speed: 80, duration: 1.5}, {speed: 50, duration: 3}}\n\n-- Function to calculate total distance\non calculateTotalDistance(trips)\n    set totalDistance to 0\n    repeat with trip in trips\n        set speed to trip's speed\n        set duration to trip's duration\n        set distance to speed * duration\n        set totalDistance to totalDistance + distance\n    end repeat\n    return totalDistance\nend calculateTotalDistance\n\n-- Calculate and display the total distance\nset totalDistance to calculateTotalDistance(trips)\ndisplay dialog \"Total distance driven: \" & totalDistance & \" miles\"\n```"
  },
  {
    "task": "Design a function to compute the final price of an item after applying multiple discounts sequentially.",
    "code": "```applescript\non computeFinalPrice(initialPrice, discountList)\n\tset finalPrice to initialPrice\n\trepeat with discount in discountList\n\t\tset finalPrice to finalPrice - (finalPrice * (discount / 100))\n\tend repeat\n\treturn finalPrice\nend computeFinalPrice\n```"
  },
  {
    "task": "Write a script that calculates the number of bricks needed to build a wall given wall dimensions and brick size.",
    "code": "```applescript\n-- Define wall dimensions and brick size\nset wallHeight to 3.0 -- height of the wall in meters\nset wallWidth to 5.0 -- width of the wall in meters\nset brickHeight to 0.1 -- height of a brick in meters\nset brickWidth to 0.2 -- width of a brick in meters\n\n-- Calculate the area of the wall\nset wallArea to wallHeight * wallWidth\n\n-- Calculate the area of a brick\nset brickArea to brickHeight * brickWidth\n\n-- Calculate the number of bricks needed\nset numberOfBricks to wallArea / brickArea\n\n-- Round up the number of bricks since you can't have a fraction of a brick\nset numberOfBricks to ceiling of numberOfBricks\n\n-- Display the result\ndisplay dialog \"Number of bricks needed: \" & numberOfBricks\n```"
  },
  {
    "task": "Develop a program to determine the number of pizzas required for a party given the number of people and slices per pizza.",
    "code": "```applescript\nset numberOfPeople to 20\nset slicesPerPerson to 3\nset slicesPerPizza to 8\n\nset totalSlicesNeeded to numberOfPeople * slicesPerPerson\nset pizzasRequired to (totalSlicesNeeded div slicesPerPizza)\nif (totalSlicesNeeded mod slicesPerPizza) > 0 then\n    set pizzasRequired to pizzasRequired + 1\nend if\n\nreturn pizzasRequired\n```"
  },
  {
    "task": "Implement a function that calculates the total cost of a meal including tax and tip.",
    "code": "```applescript\non calculateTotalCost(mealCost, taxRate, tipRate)\n\tset taxAmount to mealCost * taxRate / 100\n\tset tipAmount to mealCost * tipRate / 100\n\tset totalCost to mealCost + taxAmount + tipAmount\n\treturn totalCost\nend calculateTotalCost\n\n-- Example usage\nset mealCost to 50\nset taxRate to 8\nset tipRate to 15\nset totalCost to calculateTotalCost(mealCost, taxRate, tipRate)\ndisplay dialog \"Total cost: $\" & totalCost\n```"
  },
  {
    "task": "Create a program to compute the average rainfall over a period using addition and division.",
    "code": "```applescript\nset rainfallData to {5.2, 3.8, 4.0, 6.1, 2.9, 4.5}\nset totalRainfall to 0\nset numberOfDays to count of rainfallData\n\nrepeat with rainfall in rainfallData\n\tset totalRainfall to totalRainfall + rainfall\nend repeat\n\nset averageRainfall to totalRainfall / numberOfDays\nreturn averageRainfall\n```"
  },
  {
    "task": "Write a function that determines the number of batches needed to produce a specific quantity of a product.",
    "code": "```applescript\non numberOfBatches(totalQuantity, batchSize)\n\treturn ceiling(totalQuantity / batchSize)\nend numberOfBatches\n```"
  },
  {
    "task": "Design a program to calculate the total energy consumption of a household given individual appliance usage.",
    "code": "```applescript\n-- Define the usage in hours for each appliance\nset usageWashingMachine to 2\nset usageFridge to 24\nset usageOven to 1.5\nset usageTV to 4\nset usageComputer to 3\n\n-- Define the power rating in watts for each appliance\nset powerWashingMachine to 500\nset powerFridge to 150\nset powerOven to 2000\nset powerTV to 100\nset powerComputer to 300\n\n-- Calculate energy consumption in kWh for each appliance\nset energyWashingMachine to (usageWashingMachine * powerWashingMachine) / 1000\nset energyFridge to (usageFridge * powerFridge) / 1000\nset energyOven to (usageOven * powerOven) / 1000\nset energyTV to (usageTV * powerTV) / 1000\nset energyComputer to (usageComputer * powerComputer) / 1000\n\n-- Calculate total energy consumption\nset totalEnergyConsumption to energyWashingMachine + energyFridge + energyOven + energyTV + energyComputer\n\n-- Output the total energy consumption\ndisplay dialog \"The total energy consumption is \" & totalEnergyConsumption & \" kWh\"\n```"
  },
  {
    "task": "Develop a function that computes the body surface area of a person using height and weight.",
    "code": "```applescript\non computeBodySurfaceArea(height, weight)\n\tset bsa to (height * weight / 3600) ^ 0.5\n\treturn bsa\nend computeBodySurfaceArea\n```"
  },
  {
    "task": "Build a script to calculate the monthly payment on a mortgage using principal, interest rate, and term.",
    "code": "```applescript\nset principal to 300000\nset annualInterestRate to 3.5\nset termInYears to 30\n\nset monthlyInterestRate to (annualInterestRate / 100) / 12\nset numberOfPayments to termInYears * 12\n\nset numerator to monthlyInterestRate * (principal * (1 + monthlyInterestRate) ^ numberOfPayments)\nset denominator to ((1 + monthlyInterestRate) ^ numberOfPayments) - 1\nset monthlyPayment to numerator / denominator\n\nreturn monthlyPayment\n```"
  },
  {
    "task": "Implement a function to find the volume of a cone given its height and radius.",
    "code": "```applescript\non volumeOfCone(height, radius)\n\tset pi to 3.14159265359\n\tset volume to (1 / 3) * pi * (radius ^ 2) * height\n\treturn volume\nend volumeOfCone\n```"
  },
  {
    "task": "Write a program that estimates the cost of a trip using fuel efficiency and distance.",
    "code": "```applescript\nset fuelEfficiency to 25.0 -- miles per gallon\nset distance to 300.0 -- miles\nset fuelPrice to 3.5 -- dollars per gallon\n\nset gallonsNeeded to distance / fuelEfficiency\nset estimatedCost to gallonsNeeded * fuelPrice\n\ndisplay dialog \"The estimated cost of the trip is $\" & estimatedCost\n```"
  }
]