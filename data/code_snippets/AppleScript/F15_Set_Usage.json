[
  {
    "task": "Create a set to store unique usernames and demonstrate adding new ones.",
    "code": "```applescript\nset usernameSet to {}\n\non addUsername(username)\n    if username is not in usernameSet then\n        set end of usernameSet to username\n    end if\nend addUsername\n\naddUsername(\"user1\")\naddUsername(\"user2\")\naddUsername(\"user3\")\n\nreturn usernameSet\n```"
  },
  {
    "task": "Write a function that returns the union of two sets of integers.",
    "code": "```applescript\non unionOfSets(setA, setB)\n\tset unionSet to {}\n\trepeat with num in setA\n\t\tif num is not in unionSet then\n\t\t\tset end of unionSet to num\n\t\tend if\n\tend repeat\n\trepeat with num in setB\n\t\tif num is not in unionSet then\n\t\t\tset end of unionSet to num\n\t\tend if\n\tend repeat\n\treturn unionSet\nend unionOfSets\n```"
  },
  {
    "task": "Given two sets of strings, find their intersection.",
    "code": "```applescript\nset set1 to {\"apple\", \"banana\", \"cherry\"}\nset set2 to {\"banana\", \"cherry\", \"date\"}\n\nset intersection to {}\nrepeat with item in set1\n    if set2 contains item then\n        set end of intersection to item\n    end if\nend repeat\n\nreturn intersection\n```"
  },
  {
    "task": "Implement a set to track visited web pages and check if a page has been visited.",
    "code": "```applescript\n-- Create a set to track visited web pages\nset visitedPages to {}\n\n-- Function to add a page to the visited set\non addPageToVisited(url)\n\tif url is not in visitedPages then\n\t\tset end of visitedPages to url\n\tend if\nend addPageToVisited\n\n-- Function to check if a page has been visited\non isPageVisited(url)\n\tif url is in visitedPages then\n\t\treturn true\n\telse\n\t\treturn false\n\tend if\nend isPageVisited\n\n-- Example usage\naddPageToVisited(\"http://example.com\")\nset hasVisited to isPageVisited(\"http://example.com\") -- Expected to return true\n```"
  },
  {
    "task": "Create a set from a list of numbers and remove duplicates.",
    "code": "```applescript\nset numberList to {1, 2, 3, 2, 4, 5, 4, 6}\nset uniqueSet to {}\nrepeat with aNumber in numberList\n\tif uniqueSet does not contain aNumber then\n\t\tset end of uniqueSet to aNumber\n\tend if\nend repeat\nreturn uniqueSet\n```"
  },
  {
    "task": "Check if a set is a subset of another set.",
    "code": "```applescript\nset setA to {1, 2, 3}\nset setB to {1, 2, 3, 4, 5}\n\non isSubset(subset, superset)\n\trepeat with item in subset\n\t\tif item is not in superset then\n\t\t\treturn false\n\t\tend if\n\tend repeat\n\treturn true\nend isSubset\n\nset result to isSubset(setA, setB)\n```"
  },
  {
    "task": "Demonstrate adding and removing elements from a set of book titles.",
    "code": "```applescript\nset bookTitles to {\"1984\", \"Brave New World\", \"Fahrenheit 451\"}\n\n-- Adding elements\ncopy \"The Great Gatsby\" to end of bookTitles\ncopy \"To Kill a Mockingbird\" to end of bookTitles\n\n-- Removing an element\nset bookTitles to my removeItem(bookTitles, \"1984\")\n\non removeItem(theList, theItem)\n\tset newList to {}\n\trepeat with anItem in theList\n\t\tif anItem is not theItem then\n\t\t\tset end of newList to anItem\n\t\tend if\n\tend repeat\n\treturn newList\nend removeItem\n\nreturn bookTitles\n```"
  },
  {
    "task": "Create a set and show how to clear all its elements.",
    "code": "```applescript\nset mySet to {1, 2, 3, 4, 5}\n\n-- Clearing all elements\nset mySet to {}\n```"
  },
  {
    "task": "Write a program to find the difference between two sets of employee IDs.",
    "code": "```applescript\nset employeeIDs1 to {\"E001\", \"E002\", \"E003\", \"E004\", \"E005\"}\nset employeeIDs2 to {\"E003\", \"E004\", \"E006\", \"E007\"}\n\nset difference to {}\n\nrepeat with id in employeeIDs1\n\tif id is not in employeeIDs2 then\n\t\tset end of difference to id\n\tend if\nend repeat\n\nrepeat with id in employeeIDs2\n\tif id is not in employeeIDs1 then\n\t\tset end of difference to id\n\tend if\nend repeat\n\nreturn difference\n```"
  },
  {
    "task": "Implement a set to store unique email addresses and check membership.",
    "code": "```applescript\nset emailSet to {}\nset emailToAdd to \"example@example.com\"\n\nif emailToAdd is not in emailSet then\n    set end of emailSet to emailToAdd\nend if\n\nset emailToCheck to \"example@example.com\"\nif emailToCheck is in emailSet then\n    display dialog emailToCheck & \" is in the set.\"\nelse\n    display dialog emailToCheck & \" is not in the set.\"\nend if\n```"
  },
  {
    "task": "Use a set to determine if two lists have any common elements.",
    "code": "```applescript\nset list1 to {\"apple\", \"banana\", \"cherry\"}\nset list2 to {\"kiwi\", \"banana\", \"grape\"}\n\nset commonElementFound to false\n\nrepeat with element in list1\n    if (list2 contains element) then\n        set commonElementFound to true\n        exit repeat\n    end if\nend repeat\n\nreturn commonElementFound\n```"
  },
  {
    "task": "Create a set to represent a group of students and update it with new entries.",
    "code": "```applescript\nset studentSet to {\"Alice\", \"Bob\", \"Charlie\"}\nset end of studentSet to \"David\"\nset end of studentSet to \"Eve\"\n```"
  },
  {
    "task": "Write a function to find symmetric difference between two sets of colors.",
    "code": "```applescript\non symmetricDifference(setA, setB)\n\tset setADict to {}\n\trepeat with color in setA\n\t\tset setADict's end to color\n\tend repeat\n\t\n\tset setBDict to {}\n\trepeat with color in setB\n\t\tset setBDict's end to color\n\tend repeat\n\t\n\tset resultSet to {}\n\trepeat with color in setA\n\t\tif color is not in setBDict then\n\t\t\tset resultSet's end to color\n\t\tend if\n\tend repeat\n\t\n\trepeat with color in setB\n\t\tif color is not in setADict then\n\t\t\tset resultSet's end to color\n\t\tend if\n\tend repeat\n\t\n\treturn resultSet\nend symmetricDifference\n```"
  },
  {
    "task": "Implement a set to store unique product codes and demonstrate iteration over it.",
    "code": "```applescript\nset productCodes to {\"P001\", \"P002\", \"P003\", \"P001\", \"P004\"}\nset uniqueProductCodes to {}\n\nrepeat with code in productCodes\n\tif code is not in uniqueProductCodes then\n\t\tset end of uniqueProductCodes to code\n\tend if\nend repeat\n\nrepeat with code in uniqueProductCodes\n\tdisplay dialog code\nend repeat\n```"
  },
  {
    "task": "Create a set and demonstrate the use of the `discard` method.",
    "code": "```applescript\nset mySet to {\"apple\", \"banana\", \"cherry\"}\nset itemToRemove to \"banana\"\n\nif mySet contains itemToRemove then\n\tset mySet to mySet's items where it's not itemToRemove\nend if\n\nreturn mySet\n```"
  },
  {
    "task": "Given a list of numbers, create a set and check if a specific number is present.",
    "code": "```applescript\nset numberList to {1, 2, 3, 4, 5}\nset specificNumber to 3\n\nset numberSet to {}\nrepeat with n in numberList\n    if n is not in numberSet then\n        set end of numberSet to n\n    end if\nend repeat\n\nset isPresent to specificNumber is in numberSet\n```"
  },
  {
    "task": "Use a set to find all unique words in a sentence.",
    "code": "```applescript\nset sentence to \"Use a set to find all unique words in a sentence\"\nset wordList to words of sentence\nset uniqueWords to {}\nrepeat with aWord in wordList\n    if aWord is not in uniqueWords then\n        set end of uniqueWords to aWord\n    end if\nend repeat\nuniqueWords\n```"
  },
  {
    "task": "Create a set from a sequence of characters and demonstrate set operations.",
    "code": "```applescript\nset charSequence to \"abcdeabcde\"\nset charSet to {}\n\nrepeat with char in charSequence\n    if char is not in charSet then\n        set end of charSet to char\n    end if\nend repeat\n\n-- Display the set\ndisplay dialog \"Set: \" & (charSet as text)\n\n-- Add a character to the set\nset newChar to \"f\"\nif newChar is not in charSet then\n    set end of charSet to newChar\nend if\ndisplay dialog \"After adding 'f': \" & (charSet as text)\n\n-- Remove a character from the set\nset charToRemove to \"a\"\nif charToRemove is in charSet then\n    set charSet to charSet as list\n    set charSet to my removeItem(charToRemove, charSet)\nend if\ndisplay dialog \"After removing 'a': \" & (charSet as text)\n\n-- Function to remove an item from a list\non removeItem(anItem, aList)\n    set newList to {}\n    repeat with i from 1 to count of aList\n        if item i of aList is not anItem then\n            set end of newList to item i of aList\n        end if\n    end repeat\n    return newList\nend removeItem\n```"
  },
  {
    "task": "Write a function to merge two sets and return the result.",
    "code": "```applescript\non mergeSets(set1, set2)\n\tset resultSet to set1\n\trepeat with item in set2\n\t\tif item is not in resultSet then\n\t\t\tset end of resultSet to item\n\t\tend if\n\tend repeat\n\treturn resultSet\nend mergeSets\n```"
  },
  {
    "task": "Implement a set to hold unique IP addresses and demonstrate basic operations.",
    "code": "```applescript\n-- Create a list to simulate a set\nset ipSet to {}\n\n-- Function to add an IP address to the set\non addIP(ipAddress)\n\tif ipAddress is not in ipSet then\n\t\tset end of ipSet to ipAddress\n\tend if\nend addIP\n\n-- Function to check if an IP address is in the set\non containsIP(ipAddress)\n\tif ipAddress is in ipSet then\n\t\treturn true\n\telse\n\t\treturn false\n\tend if\nend containsIP\n\n-- Function to remove an IP address from the set\non removeIP(ipAddress)\n\tset ipSet to ipSet's items whose it is not ipAddress\nend removeIP\n\n-- Add IP addresses to the set\naddIP(\"192.168.1.1\")\naddIP(\"10.0.0.1\")\naddIP(\"172.16.0.1\")\naddIP(\"192.168.1.1\") -- Duplicate, won't be added\n\n-- Check if an IP address is in the set\ncontainsIP(\"10.0.0.1\") -- Returns true\ncontainsIP(\"192.168.0.2\") -- Returns false\n\n-- Remove an IP address from the set\nremoveIP(\"10.0.0.1\")\n\n-- Check the final state of the set\nipSet -- Should be {\"192.168.1.1\", \"172.16.0.1\"}\n```"
  },
  {
    "task": "Create a set and demonstrate how to find the size of the set.",
    "code": "```applescript\n-- Create a set using a list and convert it to a unique set\nset itemList to {1, 2, 3, 4, 5, 1, 2}\nset itemSet to my uniqueSet(itemList)\n\n-- Find the size of the set\nset setSize to length of itemSet\n\n-- Handler to create a unique set from a list\non uniqueSet(aList)\n    set uniqueList to {}\n    repeat with anItem in aList\n        if anItem is not in uniqueList then\n            set end of uniqueList to anItem\n        end if\n    end repeat\n    return uniqueList\nend uniqueSet\n\nreturn setSize\n```"
  },
  {
    "task": "Write a program to check if two sets of dates are disjoint.",
    "code": "```applescript\nset set1 to {date \"Monday, January 1, 2023 12:00:00 AM\", date \"Wednesday, January 3, 2023 12:00:00 AM\"}\nset set2 to {date \"Thursday, January 4, 2023 12:00:00 AM\", date \"Friday, January 5, 2023 12:00:00 AM\"}\n\non isDisjoint(setA, setB)\n\trepeat with dateA in setA\n\t\tif dateA is in setB then\n\t\t\treturn false\n\t\tend if\n\tend repeat\n\treturn true\nend isDisjoint\n\nset disjointResult to isDisjoint(set1, set2)\n\nif disjointResult then\n\tdisplay dialog \"The sets are disjoint.\"\nelse\n\tdisplay dialog \"The sets are not disjoint.\"\nend if\n```"
  },
  {
    "task": "Create a set to manage a collection of tags and demonstrate addition and removal.",
    "code": "```applescript\nset tagSet to {}\n\n-- Add tags\nset end of tagSet to \"work\"\nset end of tagSet to \"personal\"\nset end of tagSet to \"urgent\"\n\n-- Remove a tag\nset tagSet to my removeItem(tagSet, \"personal\")\n\non removeItem(aList, anItem)\n\tset newList to {}\n\trepeat with i in aList\n\t\tif i is not anItem then\n\t\t\tset end of newList to i\n\t\tend if\n\tend repeat\n\treturn newList\nend removeItem\n```"
  },
  {
    "task": "Implement a set to track unique inventory items in a store.",
    "code": "```applescript\nset inventorySet to {}\naddItemToInventory(\"apple\")\naddItemToInventory(\"banana\")\naddItemToInventory(\"apple\")\naddItemToInventory(\"orange\")\n\non addItemToInventory(item)\n\tif inventorySet does not contain item then\n\t\tset end of inventorySet to item\n\tend if\nend addItemToInventory\n\ninventorySet\n```"
  },
  {
    "task": "Create a set of numbers and demonstrate conversion to a list.",
    "code": "```applescript\nset numberSet to {1, 2, 3, 4, 5}\nset numberList to {}\nrepeat with num in numberSet\n    set end of numberList to num\nend repeat\nnumberList\n```"
  },
  {
    "task": "Write a function that returns all elements present in either of two sets but not both.",
    "code": "```applescript\non symmetricDifference(setA, setB)\n\tset uniqueToA to {}\n\tset uniqueToB to {}\n\t\n\trepeat with itemA in setA\n\t\tif itemA is not in setB then\n\t\t\tcopy itemA to end of uniqueToA\n\t\tend if\n\tend repeat\n\t\n\trepeat with itemB in setB\n\t\tif itemB is not in setA then\n\t\t\tcopy itemB to end of uniqueToB\n\t\tend if\n\tend repeat\n\t\n\treturn uniqueToA & uniqueToB\nend symmetricDifference\n```"
  },
  {
    "task": "Use a set to manage a collection of unique transaction IDs.",
    "code": "```applescript\nset transactionIDs to {}\n\n-- Function to add a transaction ID to the set\non addTransactionID(transactionID)\n\tif transactionID is not in transactionIDs then\n\t\tset end of transactionIDs to transactionID\n\tend if\nend addTransactionID\n\n-- Function to remove a transaction ID from the set\non removeTransactionID(transactionID)\n\tset transactionIDs to my removeItem(transactionID, transactionIDs)\nend removeTransactionID\n\n-- Helper function to remove an item from a list\non removeItem(item, itemList)\n\tset newList to {}\n\trepeat with i from 1 to count of itemList\n\t\tif itemList's item i is not item then\n\t\t\tset end of newList to itemList's item i\n\t\tend if\n\tend repeat\n\treturn newList\nend removeItem\n\n-- Example usage\naddTransactionID(\"TXN12345\")\naddTransactionID(\"TXN67890\")\naddTransactionID(\"TXN12345\") -- Duplicate, will not be added\nremoveTransactionID(\"TXN67890\")\ntransactionIDs\n```"
  },
  {
    "task": "Create a set of integers and demonstrate the `pop` operation.",
    "code": "```applescript\nset integerSet to {1, 2, 3, 4, 5}\n\non popSetElement(aSet)\n\tset element to last item of aSet\n\tset aSet to items 1 thru -2 of aSet\n\treturn {element, aSet}\nend popSetElement\n\nset {poppedElement, updatedSet} to popSetElement(integerSet)\n\n-- poppedElement now contains the last element of the set\n-- updatedSet now contains the set without the last element\n```"
  },
  {
    "task": "Write a program to find the maximum element in a set of floating-point numbers.",
    "code": "```applescript\nset floatSet to {3.14, 2.71, 9.81, 1.41, 6.67}\nset maxElement to item 1 of floatSet\nrepeat with num in floatSet\n    if num > maxElement then\n        set maxElement to num\n    end if\nend repeat\nreturn maxElement\n```"
  },
  {
    "task": "Create a set and demonstrate the use of the `update` method with another set.",
    "code": "```applescript\nset setA to {1, 2, 3}\nset setB to {3, 4, 5}\n\nset updatedSet to setA & setB\n\nset uniqueUpdatedSet to {}\n\nrepeat with item in updatedSet\n\tif item is not in uniqueUpdatedSet then\n\t\tset end of uniqueUpdatedSet to item\n\tend if\nend repeat\n\nreturn uniqueUpdatedSet\n```"
  },
  {
    "task": "Implement a set to keep track of unique file extensions in a directory.",
    "code": "```applescript\nset directoryPath to POSIX file \"/path/to/directory\" as alias\ntell application \"System Events\"\n\tset uniqueExtensions to {}\n\tset fileList to every file of folder directoryPath\n\trepeat with aFile in fileList\n\t\tset fileName to name of aFile\n\t\tif (fileName contains \".\") then\n\t\t\tset fileExtension to (text ((offset of \".\" in fileName) + 1) through -1 of fileName)\n\t\t\tif uniqueExtensions does not contain fileExtension then\n\t\t\t\tset end of uniqueExtensions to fileExtension\n\t\t\tend if\n\t\tend if\n\tend repeat\nend tell\n```"
  },
  {
    "task": "Create a set of strings and demonstrate how to iterate over it in reverse order.",
    "code": "```applescript\nset mySet to {\"apple\", \"banana\", \"cherry\"}\nset reversedSet to reverse of mySet\n\nrepeat with item in reversedSet\n    display dialog item\nend repeat\n```"
  },
  {
    "task": "Write a function to check if a set is empty.",
    "code": "```applescript\non isSetEmpty(aSet)\n    return (count of aSet) is 0\nend isSetEmpty\n```"
  },
  {
    "task": "Use a set to filter out duplicate entries from a list of participants.",
    "code": "```applescript\nset participantList to {\"Alice\", \"Bob\", \"Alice\", \"Charlie\", \"Bob\"}\nset uniqueParticipants to {}\n\nrepeat with participant in participantList\n\tif participant is not in uniqueParticipants then\n\t\tset end of uniqueParticipants to participant\n\tend if\nend repeat\n\nuniqueParticipants\n```"
  },
  {
    "task": "Create a set of tuples and demonstrate basic set operations.",
    "code": "```applescript\n-- Create a set of tuples\nset tupleSet1 to {{\"apple\", 1}, {\"banana\", 2}, {\"cherry\", 3}}\nset tupleSet2 to {{\"banana\", 2}, {\"date\", 4}}\n\n-- Define a function to check if a tuple is in a set\non containsTuple(tupleSet, aTuple)\n\trepeat with itemTuple in tupleSet\n\t\tif itemTuple is equal to aTuple then return true\n\tend repeat\n\treturn false\nend containsTuple\n\n-- Union of tupleSet1 and tupleSet2\nset unionSet to tupleSet1\nrepeat with itemTuple in tupleSet2\n\tif not (containsTuple(unionSet, itemTuple)) then\n\t\tset end of unionSet to itemTuple\n\tend if\nend repeat\n\n-- Intersection of tupleSet1 and tupleSet2\nset intersectionSet to {}\nrepeat with itemTuple in tupleSet1\n\tif containsTuple(tupleSet2, itemTuple) then\n\t\tset end of intersectionSet to itemTuple\n\tend if\nend repeat\n\n-- Difference of tupleSet1 and tupleSet2\nset differenceSet to {}\nrepeat with itemTuple in tupleSet1\n\tif not (containsTuple(tupleSet2, itemTuple)) then\n\t\tset end of differenceSet to itemTuple\n\tend if\nend repeat\n\n-- Display results\nunionSet\nintersectionSet\ndifferenceSet\n```"
  },
  {
    "task": "Write a program to find the common elements between two sets of country names.",
    "code": "```applescript\nset set1 to {\"United States\", \"Canada\", \"Mexico\", \"France\"}\nset set2 to {\"Brazil\", \"France\", \"Germany\", \"Canada\"}\n\nset commonElements to {}\n\nrepeat with country in set1\n    if country is in set2 then\n        set end of commonElements to country\n    end if\nend repeat\n\nreturn commonElements\n```"
  },
  {
    "task": "Create a set of characters and demonstrate the use of the `issubset` method.",
    "code": "```applescript\nset setA to {\"a\", \"b\", \"c\"}\nset setB to {\"a\", \"b\", \"c\", \"d\"}\n\non isSubset(subsetList, mainSetList)\n\tset isSubsetResult to true\n\trepeat with char in subsetList\n\t\tif char is not in mainSetList then\n\t\t\tset isSubsetResult to false\n\t\t\texit repeat\n\t\tend if\n\tend repeat\n\treturn isSubsetResult\nend isSubset\n\nset result to isSubset(setA, setB)\ndisplay dialog \"Is setA a subset of setB? \" & result\n```"
  },
  {
    "task": "Implement a set to manage a collection of unique hashtags from social media posts.",
    "code": "```applescript\nset hashtagSet to {}\n\non addHashtag(newHashtag)\n\tif newHashtag is not in hashtagSet then\n\t\tcopy newHashtag to end of hashtagSet\n\tend if\nend addHashtag\n\non removeHashtag(existingHashtag)\n\tset hashtagSet to hashtagSet's items whose it is not existingHashtag\nend removeHashtag\n\non listHashtags()\n\treturn hashtagSet\nend listHashtags\n```"
  },
  {
    "task": "Create a set and demonstrate how to copy it to another set.",
    "code": "```applescript\nset originalSet to {1, 2, 3, 4, 5}\nset copiedSet to originalSet\n```"
  },
  {
    "task": "Write a function that accepts two sets and returns a new set with elements found in both.",
    "code": "```applescript\non setUsage(setA, setB)\n\tset commonSet to {}\n\trepeat with element in setA\n\t\tif element is in setB then\n\t\t\tcopy element to end of commonSet\n\t\tend if\n\tend repeat\n\treturn commonSet\nend setUsage\n```"
  },
  {
    "task": "Use a set to determine the unique items purchased in a day.",
    "code": "```applescript\nset purchasedItems to {\"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"pear\"}\nset uniqueItems to {}\n\nrepeat with item in purchasedItems\n    if item is not in uniqueItems then\n        set end of uniqueItems to item\n    end if\nend repeat\n\nreturn uniqueItems\n```"
  },
  {
    "task": "Create a set of student IDs and demonstrate set comprehension to filter IDs.",
    "code": "```applescript\nset studentIDs to {101, 102, 103, 104, 105, 106, 107, 108, 109, 110}\nset filteredIDs to {}\nrepeat with id in studentIDs\n    if id mod 2 is 0 then\n        copy id to end of filteredIDs\n    end if\nend repeat\nfilteredIDs\n```"
  },
  {
    "task": "Write a program to check if a set of strings is a superset of another set.",
    "code": "```applescript\nset setA to {\"apple\", \"banana\", \"cherry\"}\nset setB to {\"apple\", \"banana\"}\n\non isSuperset(superset, subset)\n\trepeat with item in subset\n\t\tif item is not in superset then\n\t\t\treturn false\n\t\tend if\n\tend repeat\n\treturn true\nend isSuperset\n\nset result to isSuperset(setA, setB)\ndisplay dialog \"Set A is a superset of Set B: \" & result\n```"
  },
  {
    "task": "Create a set of unique words from a text file.",
    "code": "```applescript\nset filePath to \"path:to:your:file.txt\" -- Change this to the path of your file\nset fileContents to read file filePath as \u00abclass utf8\u00bb\n\nset wordList to words of fileContents\nset uniqueWords to {}\n\nrepeat with aWord in wordList\n    if aWord is not in uniqueWords then\n        set end of uniqueWords to aWord\n    end if\nend repeat\n\nreturn uniqueWords\n```"
  },
  {
    "task": "Implement a set to store unique project identifiers and demonstrate membership testing.",
    "code": "```applescript\n-- Create a list to simulate a set of unique project identifiers\nset projectIdentifiers to {\"proj1\", \"proj2\", \"proj3\"}\n\n-- Function to add a unique project identifier to the set\non addIdentifierToSet(identifier)\n\tif identifier is not in projectIdentifiers then\n\t\tset end of projectIdentifiers to identifier\n\tend if\nend addIdentifierToSet\n\n-- Function to test membership of a project identifier in the set\non isIdentifierInSet(identifier)\n\treturn identifier is in projectIdentifiers\nend isIdentifierInSet\n\n-- Add a new identifier\naddIdentifierToSet(\"proj4\")\n\n-- Test if identifiers are in the set\nset test1 to isIdentifierInSet(\"proj1\") -- should be true\nset test2 to isIdentifierInSet(\"proj5\") -- should be false\n\n-- Output results\nreturn {test1, test2}\n```"
  },
  {
    "task": "Create a set and demonstrate the `symmetric_difference_update` method.",
    "code": "```applescript\nset setA to {1, 2, 3, 4}\nset setB to {3, 4, 5, 6}\n\nset symmetricDifference to {}\n\nrepeat with item in setA\n\tif item is not in setB then\n\t\tset end of symmetricDifference to item\n\tend if\nend repeat\n\nrepeat with item in setB\n\tif item is not in setA then\n\t\tset end of symmetricDifference to item\n\tend if\nend repeat\n\nsetA to symmetricDifference\n```"
  },
  {
    "task": "Write a function to remove all elements from a set that are also in another set.",
    "code": "```applescript\non removeElementsFromSet(aSet, bSet)\n\tset resultSet to {}\n\trepeat with anElement in aSet\n\t\tif anElement is not in bSet then\n\t\t\tset end of resultSet to anElement\n\t\tend if\n\tend repeat\n\treturn resultSet\nend removeElementsFromSet\n```"
  },
  {
    "task": "Use a set to keep track of unique error codes from server logs.",
    "code": "```applescript\nset errorCodes to {}\n\n-- Example of adding error codes from server logs\nset end of errorCodes to 404\nset end of errorCodes to 500\nset end of errorCodes to 404\nset end of errorCodes to 200\n\n-- Using a set to keep unique values\nset uniqueErrorCodes to {}\n\nrepeat with errorCode in errorCodes\n\tif errorCode is not in uniqueErrorCodes then\n\t\tset end of uniqueErrorCodes to errorCode\n\tend if\nend repeat\n\nreturn uniqueErrorCodes\n```"
  },
  {
    "task": "Create a set and demonstrate how to find all unique pairs of elements.",
    "code": "```applescript\n-- Function to find unique pairs in a set\non findUniquePairs(inputList)\n\tset uniquePairs to {}\n\tset seenElements to {}\n\t\n\trepeat with i from 1 to count of inputList\n\t\tset element to item i of inputList\n\t\tif element is not in seenElements then\n\t\t\trepeat with j from i + 1 to count of inputList\n\t\t\t\tset secondElement to item j of inputList\n\t\t\t\tif secondElement is not in seenElements then\n\t\t\t\t\tset end of uniquePairs to {element, secondElement}\n\t\t\t\tend if\n\t\t\tend repeat\n\t\tend if\n\t\tset end of seenElements to element\n\tend repeat\n\t\n\treturn uniquePairs\nend findUniquePairs\n\n-- Example usage\nset mySet to {1, 2, 3, 4, 5}\nset uniquePairs to findUniquePairs(mySet)\nreturn uniquePairs\n```"
  },
  {
    "task": "Write a program to find the smallest element in a set of integers.",
    "code": "```applescript\nset integerSet to {5, 3, 9, 1, 7}\nset smallestElement to item 1 of integerSet\nrepeat with anInteger in integerSet\n\tif anInteger < smallestElement then\n\t\tset smallestElement to anInteger\n\tend if\nend repeat\nreturn smallestElement\n```"
  },
  {
    "task": "Create a set and demonstrate the `add` method with multiple elements.",
    "code": "```applescript\nset mySet to {}\n\n-- Add elements to the set\nset end of mySet to \"Apple\"\nset end of mySet to \"Banana\"\nset end of mySet to \"Orange\"\n\n-- Function to add an element to the set (only if not already present)\non addToSet(aSet, anElement)\n\tif anElement is not in aSet then\n\t\tset end of aSet to anElement\n\tend if\nend addToSet\n\n-- Demonstrate adding elements\naddToSet(mySet, \"Grape\")\naddToSet(mySet, \"Apple\") -- Duplicate, won't be added\naddToSet(mySet, \"Pineapple\")\n\n-- Display the set\nreturn mySet\n```"
  },
  {
    "task": "Implement a set to manage a collection of unique author names.",
    "code": "```applescript\nset authorNames to {}\nset end of authorNames to \"Author One\"\nset end of authorNames to \"Author Two\"\nset end of authorNames to \"Author Three\"\n\non addAuthor(authorName)\n    if authorName is not in authorNames then\n        set end of authorNames to authorName\n    end if\nend addAuthor\n\non removeAuthor(authorName)\n    if authorName is in authorNames then\n        set authorNames to my removeItem(authorName, authorNames)\n    end if\nend removeAuthor\n\non removeItem(item, itemList)\n    set newList to {}\n    repeat with i from 1 to count of itemList\n        if item is not item i of itemList then\n            set end of newList to item i of itemList\n        end if\n    end repeat\n    return newList\nend removeItem\n\non listAuthors()\n    return authorNames\nend listAuthors\n\n-- Example usage\naddAuthor(\"New Author\")\nremoveAuthor(\"Author Two\")\nset currentAuthors to listAuthors()\n```"
  },
  {
    "task": "Create a set of integers and demonstrate converting it to a sorted list.",
    "code": "```applescript\nset intSet to {5, 2, 9, 1, 5, 6}\nset sortedList to my sortList(items of (NSSet's setWithArray:intSet))\nreturn sortedList\n\non sortList(theList)\n\ttell current application's NSArray to set sortedArray to arrayWithArray:theList's sortedArrayUsingSelector:\"compare:\"\n\treturn sortedArray as list\nend sortList\n```"
  },
  {
    "task": "Write a function that returns the union of multiple sets.",
    "code": "```applescript\non unionOfSets(setList)\n    set unionSet to {}\n    repeat with aSet in setList\n        repeat with item in aSet\n            if item is not in unionSet then\n                set end of unionSet to item\n            end if\n        end repeat\n    end repeat\n    return unionSet\nend unionOfSets\n```"
  },
  {
    "task": "Use a set to identify unique characters in a string.",
    "code": "```applescript\nset inputString to \"your input string here\"\nset uniqueCharacters to {}\n\nrepeat with char in inputString\n    if char is not in uniqueCharacters then\n        set end of uniqueCharacters to char\n    end if\nend repeat\n\nuniqueCharacters\n```"
  },
  {
    "task": "Create a set of prime numbers and demonstrate basic set operations.",
    "code": "```applescript\n-- Helper function to determine if a number is prime\non isPrime(n)\n\tif n \u2264 1 then return false\n\tif n = 2 then return true\n\tif n mod 2 = 0 then return false\n\tset limit to n div 2 + 1\n\trepeat with i from 3 to limit by 2\n\t\tif n mod i = 0 then return false\n\tend repeat\n\treturn true\nend isPrime\n\n-- Function to create a set of prime numbers up to a given limit\non createPrimeSet(limit)\n\tset primeSet to {}\n\trepeat with i from 2 to limit\n\t\tif isPrime(i) then\n\t\t\tset end of primeSet to i\n\t\tend if\n\tend repeat\n\treturn primeSet\nend createPrimeSet\n\n-- Create a set of prime numbers up to 20\nset primeNumbers to createPrimeSet(20)\n\n-- Basic set operations\n-- 1. Display the set\ndisplay dialog \"Prime Numbers: \" & primeNumbers as text\n\n-- 2. Add a new prime number to the set\nset newPrime to 23\nif newPrime is not in primeNumbers then\n\tset end of primeNumbers to newPrime\n\tdisplay dialog \"Added new prime number: \" & newPrime\nend if\n\n-- 3. Remove a prime number from the set\nset removePrime to 3\nif removePrime is in primeNumbers then\n\tset primeNumbers to primeNumbers's items whose it is not removePrime\n\tdisplay dialog \"Removed prime number: \" & removePrime\nend if\n\n-- 4. Check for a prime number in the set\nset checkPrime to 17\nif checkPrime is in primeNumbers then\n\tdisplay dialog checkPrime & \" is in the set.\"\nelse\n\tdisplay dialog checkPrime & \" is not in the set.\"\nend if\n\n-- 5. Display final set\ndisplay dialog \"Final Prime Numbers Set: \" & primeNumbers as text\n```"
  },
  {
    "task": "Create a set and demonstrate how to check for non-membership.",
    "code": "```applescript\nset mySet to {\"apple\", \"banana\", \"orange\"}\nset itemToCheck to \"grape\"\nset isNotMember to (itemToCheck is not in mySet)\n\nreturn isNotMember\n```"
  },
  {
    "task": "Write a program to find the largest element in a set of numbers.",
    "code": "```applescript\nset numberSet to {34, 67, 23, 89, 12, 90, 24}\nset largestNumber to item 1 of numberSet\n\nrepeat with currentNumber in numberSet\n\tif currentNumber > largestNumber then\n\t\tset largestNumber to currentNumber\n\tend if\nend repeat\n\nreturn largestNumber\n```"
  },
  {
    "task": "Create a set of unique movie titles and demonstrate membership testing.",
    "code": "```applescript\nset movieTitles to {\"Inception\", \"The Matrix\", \"Interstellar\", \"Inception\"}\nset uniqueMovieTitles to {}\nrepeat with aTitle in movieTitles\n\tif aTitle is not in uniqueMovieTitles then\n\t\tset end of uniqueMovieTitles to aTitle\n\tend if\nend repeat\n\nset movieToCheck to \"Inception\"\nset isMember to false\nif movieToCheck is in uniqueMovieTitles then\n\tset isMember to true\nend if\n\nreturn {uniqueMovieTitles, isMember}\n```"
  },
  {
    "task": "Implement a set to store unique keys from a dictionary.",
    "code": "```applescript\nset myDict to {key1:\"value1\", key2:\"value2\", key3:\"value3\", key4:\"value4\"}\n\nset uniqueKeys to {}\n\nrepeat with aKey in myDict's keys\n\tif aKey is not in uniqueKeys then\n\t\tset end of uniqueKeys to aKey\n\tend if\nend repeat\n\nreturn uniqueKeys\n```"
  },
  {
    "task": "Create a set and demonstrate the `difference_update` method.",
    "code": "```applescript\n-- AppleScript doesn't have a native Set type, so we'll use lists to simulate set operations\non listDifferenceUpdate(list1, list2)\n\trepeat with item2 in list2\n\t\tset list1 to my removeItem(item2, list1)\n\tend repeat\n\treturn list1\nend listDifferenceUpdate\n\non removeItem(item, list)\n\tset newList to {}\n\trepeat with i in list\n\t\tif i is not equal to item then\n\t\t\tset end of newList to i\n\t\tend if\n\tend repeat\n\treturn newList\nend removeItem\n\n-- Example set lists\nset listA to {1, 2, 3, 4, 5}\nset listB to {3, 4, 6}\n\n-- Demonstrating difference_update-like operation\nset listA to listDifferenceUpdate(listA, listB)\nlistA\n```"
  },
  {
    "task": "Write a function to merge multiple sets into a single set.",
    "code": "```applescript\non mergeSets(setsList)\n\tset mergedSet to current application's NSMutableSet's set()\n\trepeat with aSet in setsList\n\t\tmergedSet's unionSet:aSet\n\tend repeat\n\treturn mergedSet as list\nend mergeSets\n```"
  },
  {
    "task": "Use a set to filter out duplicate letters from a word.",
    "code": "```applescript\nset inputWord to \"exampleword\"\nset uniqueLetters to {}\nrepeat with i from 1 to count of inputWord\n    set currentLetter to character i of inputWord\n    if currentLetter is not in uniqueLetters then\n        set end of uniqueLetters to currentLetter\n    end if\nend repeat\nset result to uniqueLetters as string\n```"
  },
  {
    "task": "Create a set and demonstrate the use of the `isdisjoint` method.",
    "code": "```applescript\nset setA to {\"apple\", \"banana\", \"cherry\"}\nset setB to {\"orange\", \"grape\", \"melon\"}\n\nset isDisjoint to true\nrepeat with itemA in setA\n    if setB contains itemA then\n        set isDisjoint to false\n        exit repeat\n    end if\nend repeat\n\nisDisjoint\n```"
  },
  {
    "task": "Write a program to find all elements that are only in one of two sets.",
    "code": "```applescript\nset set1 to {\"a\", \"b\", \"c\"}\nset set2 to {\"b\", \"c\", \"d\"}\n\nset uniqueToSet1 to {}\nrepeat with item1 in set1\n    if item1 is not in set2 then\n        set end of uniqueToSet1 to item1\n    end if\nend repeat\n\nset uniqueToSet2 to {}\nrepeat with item2 in set2\n    if item2 is not in set1 then\n        set end of uniqueToSet2 to item2\n    end if\nend repeat\n\nset uniqueElements to uniqueToSet1 & uniqueToSet2\nuniqueElements\n```"
  },
  {
    "task": "Create a set of unique book authors and demonstrate basic set operations.",
    "code": "```applescript\n-- Create sets of unique book authors\nset authorSet1 to {\"J.K. Rowling\", \"George R.R. Martin\", \"J.R.R. Tolkien\"}\nset authorSet2 to {\"Isaac Asimov\", \"J.K. Rowling\", \"George Orwell\"}\n\n-- Function to create a set\non makeSet(theList)\n\tset uniqueItems to {}\n\trepeat with item_ in theList\n\t\tif item_ is not in uniqueItems then set end of uniqueItems to item_\n\tend repeat\n\treturn uniqueItems\nend makeSet\n\n-- Create unique sets\nset uniqueAuthorSet1 to makeSet(authorSet1)\nset uniqueAuthorSet2 to makeSet(authorSet2)\n\n-- Union of sets\nset unionSet to uniqueAuthorSet1\nrepeat with author in uniqueAuthorSet2\n\tif author is not in unionSet then set end of unionSet to author\nend repeat\n\n-- Intersection of sets\nset intersectionSet to {}\nrepeat with author in uniqueAuthorSet1\n\tif author is in uniqueAuthorSet2 then set end of intersectionSet to author\nend repeat\n\n-- Difference of sets (authors in set1 but not in set2)\nset differenceSet to {}\nrepeat with author in uniqueAuthorSet1\n\tif author is not in uniqueAuthorSet2 then set end of differenceSet to author\nend repeat\n\n-- Output results\nreturn {uniqueAuthorSet1, uniqueAuthorSet2, unionSet, intersectionSet, differenceSet}\n```"
  },
  {
    "task": "Implement a set to store unique phone numbers and check for duplicates.",
    "code": "```applescript\n-- Create a new empty list to act as our set of phone numbers\nset phoneNumbersSet to {}\n\n-- Function to add a phone number to the set\non addPhoneNumber(phoneNumber)\n    if phoneNumber is not in phoneNumbersSet then\n        set end of phoneNumbersSet to phoneNumber\n        return \"Phone number added.\"\n    else\n        return \"Duplicate phone number, not added.\"\n    end if\nend addPhoneNumber\n\n-- Example usage\ndisplay dialog addPhoneNumber(\"123-456-7890\")\ndisplay dialog addPhoneNumber(\"098-765-4321\")\ndisplay dialog addPhoneNumber(\"123-456-7890\")\n```"
  },
  {
    "task": "Create a set of floating-point numbers and demonstrate rounding each element.",
    "code": "```applescript\nset floatSet to {3.14159, 2.71828, 1.61803, 1.41421, 0.57721}\nset roundedSet to {}\nrepeat with num in floatSet\n    set end of roundedSet to round num\nend repeat\nroundedSet\n```"
  },
  {
    "task": "Write a function that returns a set of all vowels present in a given sentence.",
    "code": "```applescript\non getVowelsFromSentence(sentence)\n\tset vowels to {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"}\n\tset foundVowels to {}\n\trepeat with i from 1 to count of characters of sentence\n\t\tset currentChar to character i of sentence\n\t\tif currentChar is in vowels then\n\t\t\tif currentChar is not in foundVowels then\n\t\t\t\tset end of foundVowels to currentChar\n\t\t\tend if\n\t\tend if\n\tend repeat\n\treturn foundVowels\nend getVowelsFromSentence\n```"
  },
  {
    "task": "Use a set to track unique session IDs for a web application.",
    "code": "```applescript\nset sessionIDs to {}\n-- Add a new session ID\nset end of sessionIDs to \"session1\"\nset sessionIDs to my removeDuplicates(sessionIDs)\n-- Add another session ID\nset end of sessionIDs to \"session2\"\nset sessionIDs to my removeDuplicates(sessionIDs)\n-- Attempt to add a duplicate session ID\nset end of sessionIDs to \"session1\"\nset sessionIDs to my removeDuplicates(sessionIDs)\n-- Function to remove duplicates, simulating a set\non removeDuplicates(listOfIDs)\n\tset uniqueList to {}\n\trepeat with anID in listOfIDs\n\t\tif anID is not in uniqueList then\n\t\t\tset end of uniqueList to anID\n\t\tend if\n\tend repeat\n\treturn uniqueList\nend removeDuplicates\n```"
  },
  {
    "task": "Create a set of unique city names and demonstrate set operations with it.",
    "code": "```applescript\n-- Create a set of unique city names\nset citySet to {\"New York\", \"Los Angeles\", \"Chicago\", \"Houston\", \"Phoenix\"}\n\n-- Demonstrate set operations\n-- Adding a new city\nset end of citySet to \"San Francisco\"\nset citySet to my removeDuplicates(citySet)\n\n-- Removing a city\nset citySet to my removeFromList(citySet, \"Houston\")\n\n-- Check if a city exists\nset cityExists to \"Chicago\" is in citySet\n\n-- Result\nreturn {citySet, cityExists}\n\non removeDuplicates(theList)\n\tset uniqueList to {}\n\trepeat with anItem in theList\n\t\tif anItem is not in uniqueList then\n\t\t\tset end of uniqueList to anItem\n\t\tend if\n\tend repeat\n\treturn uniqueList\nend removeDuplicates\n\non removeFromList(theList, theItem)\n\tset newList to {}\n\trepeat with anItem in theList\n\t\tif anItem is not theItem then\n\t\t\tset end of newList to anItem\n\t\tend if\n\tend repeat\n\treturn newList\nend removeFromList\n```"
  },
  {
    "task": "Write a program to find the common elements in three sets.",
    "code": "```applescript\nset set1 to {1, 2, 3, 4, 5}\nset set2 to {3, 4, 5, 6, 7}\nset set3 to {5, 6, 7, 8, 9}\n\nset commonElements to {}\n\nrepeat with element in set1\n    if element is in set2 and element is in set3 then\n        set end of commonElements to element\n    end if\nend repeat\n\nreturn commonElements\n```"
  },
  {
    "task": "Create a set and demonstrate how to remove an element by its value.",
    "code": "```applescript\nset mySet to {\"apple\", \"banana\", \"orange\"}\nset itemToRemove to \"banana\"\n\nif mySet contains itemToRemove then\n\tset mySet to mySet's items whose it is not itemToRemove\nend if\n\nreturn mySet\n```"
  },
  {
    "task": "Implement a set to store a collection of unique ISBN numbers.",
    "code": "```applescript\nproperty isbnSet : {}\n\non addISBN(theISBN)\n\tif theISBN is not in isbnSet then\n\t\tset end of isbnSet to theISBN\n\tend if\nend addISBN\n\non removeISBN(theISBN)\n\tif theISBN is in isbnSet then\n\t\tset isbnSet to isbnSet's items where it is not theISBN\n\tend if\nend removeISBN\n\non containsISBN(theISBN)\n\treturn theISBN is in isbnSet\nend containsISBN\n\non getAllISBNs()\n\treturn isbnSet\nend getAllISBNs\n```"
  },
  {
    "task": "Create a set and demonstrate the `intersection_update` method.",
    "code": "```applescript\n-- AppleScript doesn't have built-in support for sets, but we can simulate a set using lists and a custom handler\n\non removeDuplicates(theList)\n\tset newList to {}\n\trepeat with i from 1 to count of theList\n\t\tset currentItem to item i of theList\n\t\tif currentItem is not in newList then\n\t\t\tcopy currentItem to end of newList\n\t\tend if\n\tend repeat\n\treturn newList\nend removeDuplicates\n\non intersection_update(set1, set2)\n\tset newSet to {}\n\trepeat with item1 in set1\n\t\tif item1 is in set2 then\n\t\t\tcopy item1 to end of newSet\n\t\tend if\n\tend repeat\n\treturn removeDuplicates(newSet)\nend intersection_update\n\n-- Demonstration\nset setA to {1, 2, 3, 4, 5}\nset setB to {3, 4, 5, 6, 7}\n\nset resultSet to intersection_update(setA, setB)\nresultSet -- This will output {3, 4, 5}\n```"
  },
  {
    "task": "Write a function to generate a set of all unique elements in a list.",
    "code": "```applescript\non uniqueElements(aList)\n    set uniqueSet to {}\n    repeat with anItem in aList\n        if anItem is not in uniqueSet then\n            copy anItem to end of uniqueSet\n        end if\n    end repeat\n    return uniqueSet\nend uniqueElements\n```"
  },
  {
    "task": "Use a set to determine the unique characters in two strings.",
    "code": "```applescript\nset string1 to \"firstString\"\nset string2 to \"secondString\"\n\nset characters1 to characters of string1\nset characters2 to characters of string2\n\nset uniqueCharacters to {}\n\nrepeat with char in characters1\n\tif char is not in uniqueCharacters then\n\t\tset end of uniqueCharacters to char\n\tend if\nend repeat\n\nrepeat with char in characters2\n\tif char is not in uniqueCharacters then\n\t\tset end of uniqueCharacters to char\n\tend if\nend repeat\n\nuniqueCharacters\n```"
  },
  {
    "task": "Create a set of unique animal names and demonstrate the `discard` method.",
    "code": "```applescript\nset animalNames to {\"cat\", \"dog\", \"bird\", \"cat\", \"fish\", \"dog\"}\nset uniqueAnimalNames to {}\nrepeat with animal in animalNames\n\tif animal is not in uniqueAnimalNames then\n\t\tset end of uniqueAnimalNames to animal\n\tend if\nend repeat\n\n-- Demonstrate the `discard` method equivalent\nset animalToRemove to \"cat\"\nset newAnimalNames to {}\nrepeat with animal in uniqueAnimalNames\n\tif animal is not animalToRemove then\n\t\tset end of newAnimalNames to animal\n\tend if\nend repeat\n\nset uniqueAnimalNames to newAnimalNames\n```"
  },
  {
    "task": "Write a program to find all elements present in the first set but not in the second.",
    "code": "```applescript\nset firstSet to {\"apple\", \"banana\", \"cherry\"}\nset secondSet to {\"banana\", \"kiwi\", \"melon\"}\n\nset result to {}\nrepeat with item in firstSet\n    if item is not in secondSet then\n        set end of result to item\n    end if\nend repeat\n\nreturn result\n```"
  },
  {
    "task": "Create a set of integers and demonstrate using it to eliminate duplicates from a list.",
    "code": "```applescript\nset integerList to {1, 2, 3, 2, 4, 5, 1, 6, 3, 7}\nset uniqueIntegers to {}\n\nrepeat with anInteger in integerList\n    if anInteger is not in uniqueIntegers then\n        set end of uniqueIntegers to anInteger\n    end if\nend repeat\n\nreturn uniqueIntegers\n```"
  },
  {
    "task": "Implement a set to manage a collection of unique car models.",
    "code": "```applescript\n-- Create a new script object to represent the set\nscript CarModelSet\n    property carModels : {}\n\n    -- Method to add a car model to the set\n    on addCarModel(carModel)\n        if carModel is not in carModels then\n            set end of carModels to carModel\n        end if\n    end addCarModel\n\n    -- Method to remove a car model from the set\n    on removeCarModel(carModel)\n        set carModels to carModels's items where (it is not carModel)\n    end removeCarModel\n\n    -- Method to check if a car model is in the set\n    on containsCarModel(carModel)\n        return (carModel is in carModels)\n    end containsCarModel\n\n    -- Method to get all car models in the set\n    on getCarModels()\n        return carModels\n    end getCarModels\nend script\n\n-- Example usage\ntell CarModelSet\n    addCarModel(\"Tesla Model S\")\n    addCarModel(\"Ford Mustang\")\n    addCarModel(\"Chevrolet Camaro\")\n    display dialog (getCarModels() as text) -- Shows all car models\n    removeCarModel(\"Ford Mustang\")\n    display dialog (getCarModels() as text) -- Shows remaining car models\nend tell\n```"
  },
  {
    "task": "Create a set and demonstrate the use of the `clear` method.",
    "code": "```applescript\nset mySet to {\"apple\", \"banana\", \"cherry\"}\nset mySet to {}\n```"
  },
  {
    "task": "Write a function that finds the intersection of multiple sets.",
    "code": "```applescript\non findIntersectionOfSets(listOfSets)\n    set intersectionSet to item 1 of listOfSets\n    repeat with currentSet in rest of listOfSets\n        set intersectionSet to my intersectSets(intersectionSet, currentSet)\n    end repeat\n    return intersectionSet\nend findIntersectionOfSets\n\non intersectSets(setA, setB)\n    set intersectionResult to {}\n    repeat with itemA in setA\n        if itemA is in setB then\n            set end of intersectionResult to itemA\n        end if\n    end repeat\n    return intersectionResult\nend intersectSets\n\n-- Example usage:\nset set1 to {1, 2, 3, 4}\nset set2 to {3, 4, 5, 6}\nset set3 to {4, 5, 6, 7}\nset result to findIntersectionOfSets({set1, set2, set3})\ndisplay dialog \"Intersection: \" & result\n```"
  },
  {
    "task": "Use a set to identify unique words in a paragraph.",
    "code": "```applescript\nset paragraphText to \"This is a sample paragraph with some words. Some words repeat. Words should be unique.\"\n\n-- Split the paragraph into words\nset wordList to words of paragraphText\n\n-- Create a set to store unique words\nset uniqueWordsSet to {}\n\n-- Iterate over each word\nrepeat with aWord in wordList\n    -- Add to set (AppleScript doesn't have native set, we simulate using list)\n    if uniqueWordsSet does not contain aWord then\n        set end of uniqueWordsSet to aWord\n    end if\nend repeat\n\n-- Output unique words\nuniqueWordsSet\n```"
  },
  {
    "task": "Create a set of unique country codes and demonstrate membership testing.",
    "code": "```applescript\nset countryCodes to {\"US\", \"FR\", \"DE\", \"JP\", \"CN\"}\n\n-- Function to check membership\non isMember(countryCode, theSet)\n\trepeat with code in theSet\n\t\tif countryCode is equal to code then\n\t\t\treturn true\n\t\tend if\n\tend repeat\n\treturn false\nend isMember\n\n-- Test membership\nset testCode to \"FR\"\nset isMemberResult to isMember(testCode, countryCodes)\n\ndisplay dialog \"Is \" & testCode & \" a member? \" & isMemberResult\n```"
  },
  {
    "task": "Write a program to find the union of two sets and return it as a list.",
    "code": "```applescript\nset setA to {1, 2, 3, 4}\nset setB to {3, 4, 5, 6}\n\non unionOfSets(set1, set2)\n\tset unionSet to set1\n\trepeat with itemB in set2\n\t\tif itemB is not in unionSet then\n\t\t\tset end of unionSet to itemB\n\t\tend if\n\tend repeat\n\treturn unionSet\nend unionOfSets\n\nset result to unionOfSets(setA, setB)\nreturn result\n```"
  },
  {
    "task": "Create a set and demonstrate using it to check if all elements of another set are present.",
    "code": "```applescript\nset set1 to {\"apple\", \"banana\", \"cherry\"}\nset set2 to {\"banana\", \"cherry\"}\n\nset allPresent to true\nrepeat with item in set2\n    if item is not in set1 then\n        set allPresent to false\n        exit repeat\n    end if\nend repeat\n\nreturn allPresent\n```"
  },
  {
    "task": "Implement a set to store unique coupon codes and demonstrate adding new codes.",
    "code": "```applescript\nset couponSet to {}\n\non addCoupon(couponCode)\n\tif couponSet does not contain couponCode then\n\t\tset end of couponSet to couponCode\n\tend if\nend addCoupon\n\naddCoupon(\"SAVE10\")\naddCoupon(\"DISCOUNT20\")\naddCoupon(\"SAVE10\") -- Duplicate, won't be added\naddCoupon(\"FREESHIP\")\n\nreturn couponSet\n```"
  },
  {
    "task": "Create a set and demonstrate the `copy` method.",
    "code": "```applescript\nset originalSet to {\"apple\", \"orange\", \"banana\"}\nset copiedSet to originalSet\n\n-- Demonstrating the copy method\ncopy originalSet to copiedSet\n\n-- Verifying copied set\nlog copiedSet\n```"
  },
  {
    "task": "Write a function to remove duplicates from a list using a set.",
    "code": "```applescript\non removeDuplicatesFromList(inputList)\n\tset uniqueSet to {}\n\trepeat with anItem in inputList\n\t\tset end of uniqueSet to anItem\n\tend repeat\n\treturn uniqueSet\nend removeDuplicatesFromList\n```"
  },
  {
    "task": "Use a set to identify unique numbers in a sequence.",
    "code": "```applescript\nset numberSequence to {5, 3, 9, 5, 2, 3, 8, 9, 1}\nset uniqueNumbers to {}\n\nrepeat with number in numberSequence\n    if number is not in uniqueNumbers then\n        set end of uniqueNumbers to number\n    end if\nend repeat\n\nreturn uniqueNumbers\n```"
  },
  {
    "task": "Create a set of unique fruit names and demonstrate set operations with it.",
    "code": "```applescript\n-- Create a set of unique fruit names\nset fruitSet to {\"apple\", \"banana\", \"cherry\", \"apple\", \"banana\"}\n\n-- Convert list to set (unique values)\nset uniqueFruitSet to my removeDuplicates(fruitSet)\n\n-- Demonstrate set operations\n-- Check if \"banana\" is in the set\nset bananaExists to (\"banana\" is in uniqueFruitSet)\n\n-- Add a new fruit to the set\nset end of uniqueFruitSet to \"orange\"\n\n-- Remove a fruit from the set\nset uniqueFruitSet to my removeItem(\"apple\", uniqueFruitSet)\n\n-- Display the results\nlog uniqueFruitSet\nlog bananaExists\n\n-- Helper function to remove duplicates\non removeDuplicates(lst)\n    set uniqueList to {}\n    repeat with anItem in lst\n        if anItem is not in uniqueList then\n            set end of uniqueList to anItem\n        end if\n    end repeat\n    return uniqueList\nend removeDuplicates\n\n-- Helper function to remove a specific item\non removeItem(item, lst)\n    set newList to {}\n    repeat with anItem in lst\n        if anItem is not item then\n            set end of newList to anItem\n        end if\n    end repeat\n    return newList\nend removeItem\n```"
  }
]