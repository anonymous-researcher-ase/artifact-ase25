[
  {
    "task": "Create a list of the first ten positive integers and calculate their sum.",
    "code": "```applescript\nset numList to {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\nset sum to 0\nrepeat with num in numList\n\tset sum to sum + num\nend repeat\nsum\n```"
  },
  {
    "task": "Write a program to reverse the order of elements in a given list.",
    "code": "```applescript\nset originalList to {\"apple\", \"banana\", \"cherry\", \"date\"}\nset reversedList to {}\n\nrepeat with i from (count originalList) to 1 by -1\n    set end of reversedList to item i of originalList\nend repeat\n\nreturn reversedList\n```"
  },
  {
    "task": "Implement a function that takes a list and returns the list with duplicates removed.",
    "code": "```applescript\non removeDuplicates(theList)\n\tset uniqueList to {}\n\trepeat with anItem in theList\n\t\tif anItem is not in uniqueList then\n\t\t\tset end of uniqueList to anItem\n\t\tend if\n\tend repeat\n\treturn uniqueList\nend removeDuplicates\n```"
  },
  {
    "task": "Create a list of names and sort them in alphabetical order.",
    "code": "```applescript\nset nameList to {\"John\", \"Alice\", \"Bob\", \"Diana\", \"Charlie\"}\nset sortedNameList to my sortList(nameList)\n\non sortList(theList)\n    set sortedList to {}\n    repeat with i from 1 to count of theList\n        set end of sortedList to item i of theList\n        set sortedList to my sortSingleItem(sortedList)\n    end repeat\n    return sortedList\nend sortList\n\non sortSingleItem(theList)\n    set listCount to count of theList\n    repeat with i from (listCount - 1) to 1 by -1\n        if item i of theList > item (i + 1) of theList then\n            set temp to item i of theList\n            set item i of theList to item (i + 1) of theList\n            set item (i + 1) of theList to temp\n        else\n            exit repeat\n        end if\n    end repeat\n    return theList\nend sortSingleItem\n```"
  },
  {
    "task": "Write a function that appends a new element to an existing list.",
    "code": "```applescript\non appendToList(theList, newElement)\n\tset end of theList to newElement\n\treturn theList\nend appendToList\n```"
  },
  {
    "task": "Generate a list of the first 20 even numbers.",
    "code": "```applescript\nset evenNumbers to {}\nrepeat with i from 1 to 20\n    set end of evenNumbers to (i * 2)\nend repeat\nreturn evenNumbers\n```"
  },
  {
    "task": "Create a nested list (a list of lists) and access an element from the inner list.",
    "code": "```applescript\nset nestedList to {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}\nset element to item 2 of item 1 of nestedList\n```"
  },
  {
    "task": "Write a program that finds the maximum value in a list of integers.",
    "code": "```applescript\nset integerList to {5, 3, 9, 1, 6, 12, 8}\nset maxValue to item 1 of integerList\nrepeat with i from 2 to count of integerList\n    if item i of integerList > maxValue then\n        set maxValue to item i of integerList\n    end if\nend repeat\nreturn maxValue\n```"
  },
  {
    "task": "Implement a function to merge two lists into a single list without duplicates.",
    "code": "```applescript\non mergeListsWithoutDuplicates(list1, list2)\n\tset combinedList to list1 & list2\n\tset uniqueList to {}\n\trepeat with anItem in combinedList\n\t\tif anItem is not in uniqueList then\n\t\t\tset end of uniqueList to anItem\n\t\tend if\n\tend repeat\n\treturn uniqueList\nend mergeListsWithoutDuplicates\n```"
  },
  {
    "task": "Create a list from user input, then display the list in reverse order.",
    "code": "```applescript\nset inputList to {}\nrepeat\n\tdisplay dialog \"Enter a list item (or click Cancel to finish):\" default answer \"\" buttons {\"OK\", \"Cancel\"} default button \"OK\"\n\tcopy the result as list to {buttonPressed, userInput}\n\tif buttonPressed is \"Cancel\" then exit repeat\n\tset end of inputList to userInput\nend repeat\n\nset reversedList to reverse of inputList\n\nset reversedText to \"\"\nrepeat with itemText in reversedList\n\tset reversedText to reversedText & itemText & return\nend repeat\n\ndisplay dialog \"Reversed List:\" & return & reversedText buttons {\"OK\"} default button \"OK\"\n```"
  },
  {
    "task": "Write a function that takes a list and returns a new list containing only the even numbers.",
    "code": "```applescript\non filterEvenNumbers(inputList)\n\tset evenList to {}\n\trepeat with num in inputList\n\t\tif num mod 2 is 0 then\n\t\t\tset end of evenList to num\n\t\tend if\n\tend repeat\n\treturn evenList\nend filterEvenNumbers\n```"
  },
  {
    "task": "Generate a list of squares for the numbers 1 through 10.",
    "code": "```applescript\nset squareList to {}\nrepeat with i from 1 to 10\n    set end of squareList to i * i\nend repeat\nreturn squareList\n```"
  },
  {
    "task": "Create a list of floating-point numbers and find their average.",
    "code": "```applescript\nset floatList to {1.5, 2.3, 3.7, 4.2, 5.8}\nset total to 0\nrepeat with eachNumber in floatList\n    set total to total + eachNumber\nend repeat\nset average to total / (count of floatList)\naverage\n```"
  },
  {
    "task": "Implement a program to rotate the elements of a list to the right by a given number of steps.",
    "code": "```applescript\n-- Function to rotate a list to the right by n steps\non rotateListRight(theList, steps)\n    set listLength to length of theList\n    set steps to steps mod listLength\n    if steps is 0 then return theList\n    set rotatedList to {}\n    set endPart to items (listLength - steps + 1) thru listLength of theList\n    set startPart to items 1 thru (listLength - steps) of theList\n    set rotatedList to endPart & startPart\n    return rotatedList\nend rotateListRight\n\n-- Example usage\nset myList to {1, 2, 3, 4, 5}\nset steps to 2\nset rotatedList to rotateListRight(myList, steps)\nreturn rotatedList\n```"
  },
  {
    "task": "Write a function that checks if a list is a palindrome (reads the same forwards and backwards).",
    "code": "```applescript\non isPalindrome(theList)\n\tset reversedList to reverse of theList\n\tif theList = reversedList then\n\t\treturn true\n\telse\n\t\treturn false\n\tend if\nend isPalindrome\n\non reverse of theList\n\tset reversedList to {}\n\trepeat with anItem in theList\n\t\tset reversedList to {anItem} & reversedList\n\tend repeat\n\treturn reversedList\nend reverse\n```"
  },
  {
    "task": "Create a list of random integers and count how many are greater than 50.",
    "code": "```applescript\nset randomList to {}\nset countGreaterThan50 to 0\nrepeat 10 times\n\tset end of randomList to (random number from 1 to 100)\nend repeat\n\nrepeat with num in randomList\n\tif num > 50 then\n\t\tset countGreaterThan50 to countGreaterThan50 + 1\n\tend if\nend repeat\n\nreturn countGreaterThan50\n```"
  },
  {
    "task": "Write a program that removes the first occurrence of a specified element from a list.",
    "code": "```applescript\nset myList to {\"apple\", \"banana\", \"cherry\", \"banana\", \"date\"}\nset elementToRemove to \"banana\"\n\nrepeat with i from 1 to count of myList\n    if item i of myList is elementToRemove then\n        set myList to (items 1 thru (i - 1) of myList) & (items (i + 1) thru -1 of myList)\n        exit repeat\n    end if\nend repeat\n\nreturn myList\n```"
  },
  {
    "task": "Implement a function that takes two lists and returns a list containing their intersection.",
    "code": "```applescript\non intersectionOfLists(list1, list2)\n\tset intersectList to {}\n\trepeat with item1 in list1\n\t\tif item1 is in list2 then\n\t\t\tset end of intersectList to item1\n\t\tend if\n\tend repeat\n\treturn intersectList\nend intersectionOfLists\n```"
  },
  {
    "task": "Create a list of prime numbers less than 100.",
    "code": "```applescript\nset primeNumbers to {}\nrepeat with n from 2 to 99\n    set isPrime to true\n    repeat with i from 2 to (n div 2)\n        if n mod i is 0 then\n            set isPrime to false\n            exit repeat\n        end if\n    end repeat\n    if isPrime then\n        set end of primeNumbers to n\n    end if\nend repeat\nprimeNumbers\n```"
  },
  {
    "task": "Write a function to split a list into two lists: one with even numbers and one with odd numbers.",
    "code": "```applescript\non splitList(lst)\n\tset evenList to {}\n\tset oddList to {}\n\trepeat with i in lst\n\t\tif (i mod 2) = 0 then\n\t\t\tcopy i to end of evenList\n\t\telse\n\t\t\tcopy i to end of oddList\n\t\tend if\n\tend repeat\n\treturn {evenList, oddList}\nend splitList\n```"
  },
  {
    "task": "Create a list of strings and convert all the strings to uppercase.",
    "code": "```applescript\nset myList to {\"apple\", \"banana\", \"cherry\"}\nset upperList to {}\nrepeat with anItem in myList\n    set end of upperList to (anItem as string)'s uppercaseString\nend repeat\nupperList\n```"
  },
  {
    "task": "Implement a program that removes all elements from a list that are less than a specified value.",
    "code": "```applescript\nset inputList to {5, 8, 12, 3, 7, 1}\nset threshold to 6\nset outputList to {}\n\nrepeat with item in inputList\n    if item \u2265 threshold then\n        set end of outputList to item\n    end if\nend repeat\n\noutputList\n```"
  },
  {
    "task": "Write a function that takes a list and returns a new list with elements in random order.",
    "code": "```applescript\non shuffleList(inputList)\n\tset itemCount to count of inputList\n\tset shuffledList to {}\n\trepeat while itemCount > 0\n\t\tset randomIndex to random number from 1 to itemCount\n\t\tset end of shuffledList to item randomIndex of inputList\n\t\tset inputList to items 1 thru (randomIndex - 1) of inputList & items (randomIndex + 1) thru -1 of inputList\n\t\tset itemCount to itemCount - 1\n\tend repeat\n\treturn shuffledList\nend shuffleList\n```"
  },
  {
    "task": "Create a list of tuples where each tuple contains a number and its square.",
    "code": "```applescript\nset numberList to {1, 2, 3, 4, 5}\nset tupleList to {}\n\nrepeat with aNumber in numberList\n\tset end of tupleList to {aNumber, aNumber * aNumber}\nend repeat\n\nreturn tupleList\n```"
  },
  {
    "task": "Write a program to multiply all elements in a list by a given factor.",
    "code": "```applescript\nset theList to {1, 2, 3, 4, 5}\nset factor to 3\nset multipliedList to {}\n\nrepeat with i from 1 to count of theList\n    set end of multipliedList to item i of theList * factor\nend repeat\n\nreturn multipliedList\n```"
  },
  {
    "task": "Implement a function that flattens a nested list.",
    "code": "```applescript\non flattenList(aList)\n\tscript ListOps\n\t\tproperty flatList : {}\n\t\ton flatten(lst)\n\t\t\trepeat with el in lst\n\t\t\t\tif class of el is list then\n\t\t\t\t\tmy flatten(el)\n\t\t\t\telse\n\t\t\t\t\tset end of flatList to el\n\t\t\t\tend if\n\t\t\tend repeat\n\t\tend flatten\n\tend script\n\ttell ListOps to flatten(aList)\n\treturn ListOps's flatList\nend flattenList\n```"
  },
  {
    "task": "Create a list of dates and sort them chronologically.",
    "code": "```applescript\nset dateList to {date \"2023-10-05\", date \"2023-01-01\", date \"2023-05-20\", date \"2024-02-14\"}\nset sortedDateList to sortList(dateList)\n\non sortList(theList)\n\tset sortedList to {}\n\trepeat with i from 1 to count of theList\n\t\tset minDate to item i of theList\n\t\tset minIndex to i\n\t\trepeat with j from i + 1 to count of theList\n\t\t\tif item j of theList comes before minDate then\n\t\t\t\tset minDate to item j of theList\n\t\t\t\tset minIndex to j\n\t\t\tend if\n\t\tend repeat\n\t\tif minIndex is not i then\n\t\t\tset temp to item i of theList\n\t\t\tset item i of theList to item minIndex of theList\n\t\t\tset item minIndex of theList to temp\n\t\tend if\n\t\tset end of sortedList to item i of theList\n\tend repeat\n\treturn sortedList\nend sortList\n```"
  },
  {
    "task": "Write a function that finds the index of the first occurrence of a given element in a list.",
    "code": "```applescript\non findFirstIndexOfElement(theList, theElement)\n\trepeat with i from 1 to count of theList\n\t\tif item i of theList is theElement then\n\t\t\treturn i\n\t\tend if\n\tend repeat\n\treturn -1\nend findFirstIndexOfElement\n```"
  },
  {
    "task": "Generate a list of Fibonacci numbers up to a specified limit.",
    "code": "```applescript\nset limit to 1000 -- specify the limit here\nset fibList to {0, 1}\nrepeat\n\tset newFib to item -1 of fibList + item -2 of fibList\n\tif newFib > limit then exit repeat\n\tset end of fibList to newFib\nend repeat\nfibList\n```"
  },
  {
    "task": "Create a list of booleans and determine if all are True.",
    "code": "```applescript\nset booleanList to {true, true, true}\nset allTrue to true\n\nrepeat with aBoolean in booleanList\n    if aBoolean is not true then\n        set allTrue to false\n        exit repeat\n    end if\nend repeat\n\nallTrue\n```"
  },
  {
    "task": "Write a program to concatenate two lists.",
    "code": "```applescript\nset list1 to {\"apple\", \"banana\", \"cherry\"}\nset list2 to {\"date\", \"elderberry\", \"fig\"}\n\nset concatenatedList to list1 & list2\n```"
  },
  {
    "task": "Implement a function that returns the length of a list without using built-in functions.",
    "code": "```applescript\non listLength(aList)\n\tset count to 0\n\trepeat with anItem in aList\n\t\tset count to count + 1\n\tend repeat\n\treturn count\nend listLength\n```"
  },
  {
    "task": "Create a list of words and find the longest word.",
    "code": "```applescript\nset wordList to {\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\", \"grape\"}\nset longestWord to \"\"\nrepeat with currentWord in wordList\n\tif (count of currentWord) > (count of longestWord) then\n\t\tset longestWord to currentWord\n\tend if\nend repeat\nlongestWord\n```"
  },
  {
    "task": "Write a function that takes a list and a predicate function, returning a list of elements that satisfy the predicate.",
    "code": "```applescript\non filterList(theList, predicateFunction)\n\tset resultList to {}\n\trepeat with anItem in theList\n\t\tif predicateFunction's call(anItem) then\n\t\t\tcopy anItem to end of resultList\n\t\tend if\n\tend repeat\n\treturn resultList\nend filterList\n```"
  },
  {
    "task": "Generate a list of strings and filter out those with less than 5 characters.",
    "code": "```applescript\nset stringList to {\"apple\", \"fig\", \"banana\", \"kiwi\", \"pear\", \"grape\"}\nset filteredList to {}\n\nrepeat with eachString in stringList\n    if (length of eachString) \u2265 5 then\n        set end of filteredList to eachString\n    end if\nend repeat\n\nreturn filteredList\n```"
  },
  {
    "task": "Create a list of mixed data types and separate them into lists by type.",
    "code": "```applescript\nset mixedList to {1, \"hello\", 2.5, true, \"world\", false, 42}\n\nset numberList to {}\nset stringList to {}\nset booleanList to {}\n\nrepeat with anItem in mixedList\n    if class of anItem is integer or class of anItem is real then\n        set end of numberList to anItem\n    else if class of anItem is text then\n        set end of stringList to anItem\n    else if class of anItem is boolean then\n        set end of booleanList to anItem\n    end if\nend repeat\n\nreturn {numberList, stringList, booleanList}\n```"
  },
  {
    "task": "Write a program to find the common elements between two lists.",
    "code": "```applescript\nset list1 to {\"apple\", \"banana\", \"cherry\", \"date\"}\nset list2 to {\"banana\", \"date\", \"fig\", \"grape\"}\n\nset commonElements to {}\n\nrepeat with item1 in list1\n    if item1 is in list2 then\n        set end of commonElements to item1\n    end if\nend repeat\n\nreturn commonElements\n```"
  },
  {
    "task": "Implement a function to rotate the elements of a list to the left by a given number of steps.",
    "code": "```applescript\non rotateLeft(theList, numSteps)\n\tset listLength to count of theList\n\tif listLength is greater than 0 then\n\t\tset numSteps to numSteps mod listLength\n\t\tif numSteps is greater than 0 then\n\t\t\tset rotatedList to (items (numSteps + 1) thru -1 of theList) & (items 1 thru numSteps of theList)\n\t\telse\n\t\t\tset rotatedList to theList\n\t\tend if\n\telse\n\t\tset rotatedList to {}\n\tend if\n\treturn rotatedList\nend rotateLeft\n```"
  },
  {
    "task": "Create a list of numbers and find the product of all the elements.",
    "code": "```applescript\nset numberList to {2, 3, 5, 7}\nset product to 1\nrepeat with number in numberList\n    set product to product * number\nend repeat\nreturn product\n```"
  },
  {
    "task": "Write a function that removes all occurrences of a specified element from a list.",
    "code": "```applescript\non removeOccurrences(theList, theElement)\n\tset newList to {}\n\trepeat with anItem in theList\n\t\tif anItem is not theElement then\n\t\t\tcopy anItem to end of newList\n\t\tend if\n\tend repeat\n\treturn newList\nend removeOccurrences\n```"
  },
  {
    "task": "Generate a list of random numbers and find the median value.",
    "code": "```applescript\nset randomNumbers to {}\nrepeat 10 times\n\tset end of randomNumbers to (random number from 1 to 100)\nend repeat\n\nset sortedNumbers to my sortList(randomNumbers)\nset count to count of sortedNumbers\n\nif (count mod 2 is equal to 0) then\n\tset median to ((item (count / 2) of sortedNumbers) + (item ((count / 2) + 1) of sortedNumbers)) / 2\nelse\n\tset median to item ((count + 1) / 2) of sortedNumbers\nend if\n\nreturn median\n\non sortList(aList)\n\tset theIndexes to {}\n\tset theValues to {}\n\tset theIndex to 1\n\trepeat with i in aList\n\t\tset end of theIndexes to theIndex\n\t\tset end of theValues to i\n\t\tset theIndex to theIndex + 1\n\tend repeat\n\n\trepeat with i from 1 to count of theIndexes\n\t\trepeat with j from (i + 1) to count of theIndexes\n\t\t\tif item i of theValues > item j of theValues then\n\t\t\t\tset tempValue to item i of theValues\n\t\t\t\tset item i of theValues to item j of theValues\n\t\t\t\tset item j of theValues to tempValue\n\n\t\t\t\tset tempIndex to item i of theIndexes\n\t\t\t\tset item i of theIndexes to item j of theIndexes\n\t\t\t\tset item j of theIndexes to tempIndex\n\t\t\tend if\n\t\tend repeat\n\tend repeat\n\treturn theValues\nend sortList\n```"
  },
  {
    "task": "Create a list of dictionaries and sort them by a specific key.",
    "code": "```applescript\nset myList to {{name:\"Alice\", age:30}, {name:\"Bob\", age:25}, {name:\"Charlie\", age:35}}\nset sortedList to my sortListByKey(myList, \"age\")\n\non sortListByKey(theList, theKey)\n\tscript SortingScript\n\t\tproperty theKey : theKey\n\t\ton isLess(a, b)\n\t\t\treturn (a's theKey) < (b's theKey)\n\t\tend isLess\n\tend script\n\tset theList to my customSort(theList, SortingScript's isLess)\n\treturn theList\nend sortListByKey\n\non customSort(theList, isLessFunc)\n\tset sortedList to {}\n\trepeat with i from 1 to count of theList\n\t\tset currentItem to item i of theList\n\t\tset insertIndex to 1\n\t\trepeat with j from 1 to count of sortedList\n\t\t\tif isLessFunc(currentItem, item j of sortedList) then\n\t\t\t\texit repeat\n\t\t\telse\n\t\t\t\tset insertIndex to j + 1\n\t\t\tend if\n\t\tend repeat\n\t\tset end of sortedList to currentItem\n\t\tif insertIndex < count of sortedList then\n\t\t\tset item insertIndex of sortedList to currentItem\n\t\t\tset sortedList to items 1 thru (insertIndex - 1) of sortedList & {currentItem} & items insertIndex thru -2 of sortedList\n\t\tend if\n\tend repeat\n\treturn sortedList\nend customSort\n```"
  },
  {
    "task": "Write a program to split a list into chunks of a specified size.",
    "code": "```applescript\non splitListIntoChunks(theList, chunkSize)\n\tset chunkedList to {}\n\tset theCount to (count of theList)\n\tset index to 1\n\trepeat while index \u2264 theCount\n\t\tset endIndex to (index + chunkSize - 1)\n\t\tif endIndex > theCount then set endIndex to theCount\n\t\tcopy (items index thru endIndex of theList) to end of chunkedList\n\t\tset index to index + chunkSize\n\tend repeat\n\treturn chunkedList\nend splitListIntoChunks\n\n-- Example usage\nset myList to {1, 2, 3, 4, 5, 6, 7, 8, 9}\nset chunkSize to 3\nsplitListIntoChunks(myList, chunkSize)\n```"
  },
  {
    "task": "Implement a function that takes a list and returns a dictionary with the frequency of each element.",
    "code": "```applescript\non countFrequency(theList)\n\tset freqDict to {}\n\trepeat with item in theList\n\t\tset itemString to item as text\n\t\tif freqDict contains itemString then\n\t\t\tset freqDict's itemString to (freqDict's itemString) + 1\n\t\telse\n\t\t\tset freqDict's itemString to 1\n\t\tend if\n\tend repeat\n\treturn freqDict\nend countFrequency\n```"
  },
  {
    "task": "Create a list of integers and replace all negative numbers with zero.",
    "code": "```applescript\nset integerList to {4, -3, 9, -1, 7, -8, 0, 5}\nrepeat with i from 1 to count of integerList\n\tif item i of integerList is less than 0 then\n\t\tset item i of integerList to 0\n\tend if\nend repeat\n```"
  },
  {
    "task": "Write a function that returns the first n elements of a list.",
    "code": "```applescript\non first_n_elements(theList, n)\n    if n \u2264 length of theList then\n        return items 1 thru n of theList\n    else\n        return theList\n    end if\nend first_n_elements\n```"
  },
  {
    "task": "Generate a list of strings and join them into a single string with spaces.",
    "code": "```applescript\nset stringList to {\"Hello\", \"world\", \"this\", \"is\", \"a\", \"test\"}\nset joinedString to my joinList(stringList, \" \")\n\non joinList(theList, delimiter)\n\tset {oldDelimiters, AppleScript's text item delimiters} to {AppleScript's text item delimiters, delimiter}\n\tset joinedText to theList as text\n\tset AppleScript's text item delimiters to oldDelimiters\n\treturn joinedText\nend joinList\n\njoinedString\n```"
  },
  {
    "task": "Create a list of lists and find the sum of each inner list.",
    "code": "```applescript\nset listOfLists to {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}\nset sums to {}\n\nrepeat with innerList in listOfLists\n\tset sum to 0\n\trepeat with num in innerList\n\t\tset sum to sum + num\n\tend repeat\n\tcopy sum to end of sums\nend repeat\n\nsums\n```"
  },
  {
    "task": "Write a function that finds the second largest number in a list.",
    "code": "```applescript\non findSecondLargest(theList)\n\tset sortedList to sortListDescending(theList)\n\tif (count of sortedList) < 2 then\n\t\treturn missing value\n\telse\n\t\treturn item 2 of sortedList\n\tend if\nend findSecondLargest\n\non sortListDescending(theList)\n\tset sortedList to theList\n\trepeat with i from 1 to (count of sortedList) - 1\n\t\trepeat with j from i + 1 to count of sortedList\n\t\t\tif item i of sortedList < item j of sortedList then\n\t\t\t\tset temp to item i of sortedList\n\t\t\t\tset item i of sortedList to item j of sortedList\n\t\t\t\tset item j of sortedList to temp\n\t\t\tend if\n\t\tend repeat\n\tend repeat\n\treturn sortedList\nend sortListDescending\n```"
  },
  {
    "task": "Generate a list of numbers and remove the duplicates while maintaining order.",
    "code": "```applescript\nset originalList to {1, 2, 3, 1, 2, 4, 5}\nset uniqueList to {}\n\nrepeat with item in originalList\n    if item is not in uniqueList then\n        set end of uniqueList to item\n    end if\nend repeat\n\nreturn uniqueList\n```"
  },
  {
    "task": "Create a list of integers and partition it into two lists: one with numbers above the average and one below.",
    "code": "```applescript\nset originalList to {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n\nset total to 0\nrepeat with num in originalList\n    set total to total + num\nend repeat\n\nset average to total / (count originalList)\n\nset aboveAverageList to {}\nset belowAverageList to {}\n\nrepeat with num in originalList\n    if num > average then\n        set end of aboveAverageList to num\n    else if num < average then\n        set end of belowAverageList to num\n    end if\nend repeat\n\nreturn {aboveAverageList, belowAverageList}\n```"
  },
  {
    "task": "Write a program to find the longest increasing subsequence in a list of numbers.",
    "code": "```applescript\nset theList to {10, 9, 2, 5, 3, 7, 101, 18}\nset n to count of theList\nset lengths to {}\nset sequences to {}\n\nrepeat with i from 1 to n\n    set end of lengths to 1\n    set end of sequences to {item i of theList}\nend repeat\n\nrepeat with i from 2 to n\n    repeat with j from 1 to (i - 1)\n        if item i of theList > item j of theList then\n            if (item j of lengths + 1) > item i of lengths then\n                set item i of lengths to (item j of lengths + 1)\n                set item i of sequences to item j of sequences & {item i of theList}\n            end if\n        end if\n    end repeat\nend repeat\n\nset maxLength to 0\nset longestSeq to {}\nrepeat with i from 1 to n\n    if item i of lengths > maxLength then\n        set maxLength to item i of lengths\n        set longestSeq to item i of sequences\n    end if\nend repeat\n\nreturn longestSeq\n```"
  },
  {
    "task": "Implement a function to zip two lists into a single list of tuples.",
    "code": "```applescript\non zipLists(list1, list2)\n\tset zippedList to {}\n\tset minLength to (count list1)\n\tif (count list2) < minLength then set minLength to (count list2)\n\trepeat with i from 1 to minLength\n\t\tset end of zippedList to {item i of list1, item i of list2}\n\tend repeat\n\treturn zippedList\nend zipLists\n```"
  },
  {
    "task": "Create a list of characters and count the vowels.",
    "code": "```applescript\nset charList to {\"a\", \"b\", \"c\", \"e\", \"i\", \"o\", \"u\", \"x\", \"y\"}\nset vowels to {\"a\", \"e\", \"i\", \"o\", \"u\"}\nset vowelCount to 0\n\nrepeat with char in charList\n    if char is in vowels then\n        set vowelCount to vowelCount + 1\n    end if\nend repeat\n\nvowelCount\n```"
  },
  {
    "task": "Write a function that returns the last n elements of a list.",
    "code": "```applescript\non lastNElements(inputList, n)\n\tset listCount to (count of inputList)\n\tif n > listCount then\n\t\treturn inputList\n\telse\n\t\tset startIndex to listCount - n + 1\n\t\treturn items startIndex thru -1 of inputList\n\tend if\nend lastNElements\n```"
  },
  {
    "task": "Generate a list of numbers and split it into two lists: one with positive numbers and one with negative numbers.",
    "code": "```applescript\nset numberList to {3, -7, 0, 5, -2, 9, -1}\nset positiveNumbers to {}\nset negativeNumbers to {}\n\nrepeat with aNumber in numberList\n    if aNumber > 0 then\n        set end of positiveNumbers to aNumber\n    else if aNumber < 0 then\n        set end of negativeNumbers to aNumber\n    end if\nend repeat\n\nreturn {positiveNumbers, negativeNumbers}\n```"
  },
  {
    "task": "Create a list of random integers and find the mode.",
    "code": "```applescript\nset randomList to {}\nrepeat 10 times\n\tset end of randomList to (random number from 1 to 10)\nend repeat\n\nset modeCount to 0\nset modeValue to 0\n\nrepeat with eachNumber in randomList\n\tset count to (count of (every item of randomList whose it is eachNumber))\n\tif count > modeCount then\n\t\tset modeCount to count\n\t\tset modeValue to eachNumber\n\tend if\nend repeat\n\nreturn {modeValue, modeCount}\n```"
  },
  {
    "task": "Write a program to find the shortest path in a grid using a list to represent the path.",
    "code": "```applescript\nproperty grid : {{0, 0, 0, 1}, {0, 1, 0, 1}, {0, 0, 0, 0}, {1, 1, 0, 0}}\n\non findShortestPath(startX, startY, endX, endY)\n\tset path to {}\n\tset visited to {}\n\tset queue to {{startX, startY, {}}}\n\trepeat while queue is not {}\n\t\tset {currentX, currentY, currentPath} to item 1 of queue\n\t\tset end of visited to {currentX, currentY}\n\t\tset end of currentPath to {currentX, currentY}\n\t\t\n\t\tif currentX = endX and currentY = endY then\n\t\t\treturn currentPath\n\t\tend if\n\t\t\n\t\tset queue to rest of queue\n\t\t\n\t\tset directions to {{1, 0}, {0, 1}, {-1, 0}, {0, -1}}\n\t\trepeat with direction in directions\n\t\t\tset newX to currentX + item 1 of direction\n\t\t\tset newY to currentY + item 2 of direction\n\t\t\t\n\t\t\tif (newX \u2265 1 and newY \u2265 1 and newX \u2264 length of grid and newY \u2264 length of item 1 of grid) then\n\t\t\t\tif (item newX of item newY of grid is 0 and {newX, newY} is not in visited) then\n\t\t\t\t\tset end of queue to {newX, newY, currentPath}\n\t\t\t\tend if\n\t\t\tend if\n\t\tend repeat\n\tend repeat\n\treturn {}\nend findShortestPath\n\nfindShortestPath(1, 1, 4, 4)\n```"
  },
  {
    "task": "Implement a function that takes a list and returns a list with elements doubled.",
    "code": "```applescript\non doubleElements(inputList)\n\tset doubledList to {}\n\trepeat with anItem in inputList\n\t\tset doubledValue to anItem * 2\n\t\tcopy doubledValue to end of doubledList\n\tend repeat\n\treturn doubledList\nend doubleElements\n\n-- Example usage\nset myList to {1, 2, 3, 4, 5}\nset result to doubleElements(myList)\ndisplay dialog (result as string)\n```"
  },
  {
    "task": "Create a list of integers and sort them in descending order.",
    "code": "```applescript\nset integerList to {4, 1, 3, 9, 7}\nset sortedList to reverse of (sort integerList)\n```"
  },
  {
    "task": "Write a function that takes a list of intervals and merges overlapping intervals.",
    "code": "```applescript\non mergeIntervals(intervals)\n\tset sortedIntervals to my sortIntervals(intervals)\n\tset merged to {}\n\tset currentInterval to item 1 of sortedIntervals\n\t\n\trepeat with i from 2 to count of sortedIntervals\n\t\tset nextInterval to item i of sortedIntervals\n\t\tif item 2 of currentInterval \u2265 item 1 of nextInterval then\n\t\t\tset currentInterval's end to max(item 2 of currentInterval, item 2 of nextInterval)\n\t\telse\n\t\t\tset end of merged to currentInterval\n\t\t\tset currentInterval to nextInterval\n\t\tend if\n\tend repeat\n\t\n\tset end of merged to currentInterval\n\treturn merged\nend mergeIntervals\n\non sortIntervals(intervals)\n\tset {TID, text item delimiters} to {text item delimiters, \",\"}\n\tset sortedString to do shell script \"echo {\" & intervals & \"} | sed 's/},{/} {/' | sort -n | tr -d '{}'\"\n\tset text item delimiters to \" \"\n\tset sortedIntervals to {}\n\trepeat with intervalString in text items of sortedString\n\t\tset text item delimiters to \",\"\n\t\tset interval to text items of intervalString\n\t\tset end of sortedIntervals to {item 1 of interval as integer, item 2 of interval as integer}\n\tend repeat\n\tset text item delimiters to TID\n\treturn sortedIntervals\nend sortIntervals\n\non max(a, b)\n\tif a > b then\n\t\treturn a\n\telse\n\t\treturn b\n\tend if\nend max\n```"
  },
  {
    "task": "Generate a list of random numbers and find the range (difference between max and min).",
    "code": "```applescript\nset randomNumbers to {}\nrepeat 10 times\n    set end of randomNumbers to (random number from 1 to 100)\nend repeat\n\nset maxNum to max of randomNumbers\nset minNum to min of randomNumbers\nset rangeValue to maxNum - minNum\n\nreturn {randomNumbers, rangeValue}\n\non max of aList\n    set maxValue to item 1 of aList\n    repeat with i from 2 to count of aList\n        if item i of aList > maxValue then\n            set maxValue to item i of aList\n        end if\n    end repeat\n    return maxValue\nend max\n\non min of aList\n    set minValue to item 1 of aList\n    repeat with i from 2 to count of aList\n        if item i of aList < minValue then\n            set minValue to item i of aList\n        end if\n    end repeat\n    return minValue\nend min\n```"
  },
  {
    "task": "Create a list of strings and remove any that are palindromes.",
    "code": "```applescript\nset stringList to {\"racecar\", \"apple\", \"level\", \"banana\", \"radar\", \"cherry\"}\nset nonPalindromes to {}\nrepeat with str in stringList\n    set reversedStr to (reverse of characters of str) as string\n    if str is not reversedStr then\n        set end of nonPalindromes to str\n    end if\nend repeat\nnonPalindromes\n```"
  },
  {
    "task": "Write a program to cyclically permute the elements of a list.",
    "code": "```applescript\nset myList to {\"a\", \"b\", \"c\", \"d\"}\nset firstElement to item 1 of myList\nset end of myList to firstElement\nset myList to items 2 thru -1 of myList\n```"
  },
  {
    "task": "Implement a function to create a list of cumulative sums from a list of numbers.",
    "code": "```applescript\non cumulativeSums(numbersList)\n\tset cumulativeList to {}\n\tset currentSum to 0\n\trepeat with num in numbersList\n\t\tset currentSum to currentSum + num\n\t\tcopy currentSum to the end of cumulativeList\n\tend repeat\n\treturn cumulativeList\nend cumulativeSums\n```"
  },
  {
    "task": "Create a list of numbers and shift all zeros to the end.",
    "code": "```applescript\nset numList to {0, 3, 0, 12, 5, 0, 7}\nset nonZeroList to {}\nset zeroList to {}\n\nrepeat with num in numList\n    if num is not 0 then\n        set end of nonZeroList to num\n    else\n        set end of zeroList to num\n    end if\nend repeat\n\nset resultList to nonZeroList & zeroList\nresultList\n```"
  },
  {
    "task": "Write a program to simulate a queue using a list.",
    "code": "```applescript\nset myQueue to {}\n\non enqueue(item)\n    copy item to end of myQueue\nend enqueue\n\non dequeue()\n    if (count of myQueue) is greater than 0 then\n        set firstItem to item 1 of myQueue\n        set myQueue to rest of myQueue\n        return firstItem\n    else\n        return \"Queue is empty\"\n    end if\nend dequeue\n\non listQueue()\n    return myQueue\nend listQueue\n\n-- Example usage\nenqueue(\"apple\")\nenqueue(\"banana\")\nenqueue(\"cherry\")\n\ndisplay dialog \"Current Queue: \" & (listQueue as string)\ndisplay dialog \"Dequeue Item: \" & (dequeue() as string)\ndisplay dialog \"Queue after Dequeue: \" & (listQueue as string)\n```"
  },
  {
    "task": "Generate a list of numbers and identify all prime numbers.",
    "code": "```applescript\nset numList to {2, 3, 4, 5, 6, 7, 8, 9, 10}\nset primeList to {}\n\nrepeat with n in numList\n    set isPrime to true\n    if n < 2 then\n        set isPrime to false\n    else\n        repeat with i from 2 to (n div 2)\n            if n mod i is 0 then\n                set isPrime to false\n                exit repeat\n            end if\n        end repeat\n    end if\n    if isPrime then\n        set end of primeList to n\n    end if\nend repeat\n\nreturn primeList\n```"
  },
  {
    "task": "Create a list of strings and group them by their starting letter.",
    "code": "```applescript\nset stringList to {\"apple\", \"banana\", \"apricot\", \"blueberry\", \"avocado\", \"blackberry\", \"cherry\"}\nset groupedList to {}\n\nrepeat with item in stringList\n\tset firstLetter to (text 1 thru 1 of item) as string\n\tif groupedList's firstLetter is missing value then\n\t\tset end of groupedList to {firstLetter:firstLetter, items:{item}}\n\telse\n\t\tset end of (items of (groupedList's firstLetter)) to item\n\tend if\nend repeat\n\ngroupedList\n```"
  },
  {
    "task": "Write a function that takes a list and returns a new list with all elements squared.",
    "code": "```applescript\non squareList(theList)\n\tset squaredList to {}\n\trepeat with anItem in theList\n\t\tset end of squaredList to (anItem * anItem)\n\tend repeat\n\treturn squaredList\nend squareList\n```"
  },
  {
    "task": "Generate a list of timestamps and find the time difference between consecutive elements.",
    "code": "```applescript\nset timestampList to {}\nrepeat 5 times\n\tset end of timestampList to current date\n\tdelay 1\nend repeat\n\nset timeDifferences to {}\nrepeat with i from 2 to count of timestampList\n\tset end of timeDifferences to (item i of timestampList) - (item (i - 1) of timestampList)\nend repeat\n\nreturn timeDifferences\n```"
  },
  {
    "task": "Create a list of numbers and rotate it such that the smallest number is first.",
    "code": "```applescript\nset numberList to {4, 7, 2, 9, 1, 5}\nset sortedList to sort numberList in ascending order\nset rotatedList to sortedList\n```"
  },
  {
    "task": "Write a program to find all unique pairs in a list that sum up to a specific target.",
    "code": "```applescript\nset myList to {2, 4, 3, 5, 7, 8, 1, 9}\nset target to 10\nset uniquePairs to {}\n\nrepeat with i from 1 to (count myList)\n\tset Num1 to item i of myList\n\trepeat with j from (i + 1) to (count myList)\n\t\tset Num2 to item j of myList\n\t\tif Num1 + Num2 is equal to target then\n\t\t\tset pair to {Num1, Num2}\n\t\t\tif pair is not in uniquePairs then\n\t\t\t\tset end of uniquePairs to pair\n\t\t\tend if\n\t\tend if\n\tend repeat\nend repeat\n\nuniquePairs\n```"
  },
  {
    "task": "Implement a function that returns true if a list contains a cycle.",
    "code": "```applescript\non hasCycle(theList)\n\tscript Node\n\t\tproperty value : missing value\n\t\tproperty next : missing value\n\tend script\n\t\n\tset seenNodes to {}\n\tset currentNode to theList\n\t\n\trepeat while currentNode is not missing value\n\t\tset end of seenNodes to currentNode\n\t\tif my containsNode(seenNodes, currentNode's next) then\n\t\t\treturn true\n\t\tend if\n\t\tset currentNode to currentNode's next\n\tend repeat\n\t\n\treturn false\nend hasCycle\n\non containsNode(theList, theNode)\n\trepeat with itemNode in theList\n\t\tif itemNode is theNode then return true\n\tend repeat\n\treturn false\nend containsNode\n```"
  },
  {
    "task": "Create a list of numbers and find the contiguous subarray with the maximum sum.",
    "code": "```applescript\nset numList to {34, -50, 42, 14, -5, 86}\nset maxSum to item 1 of numList\nset currentSum to 0\n\nrepeat with num in numList\n\tset currentSum to currentSum + num\n\tif currentSum > maxSum then\n\t\tset maxSum to currentSum\n\tend if\n\tif currentSum < 0 then\n\t\tset currentSum to 0\n\tend if\nend repeat\n\nreturn maxSum\n```"
  },
  {
    "task": "Write a function that takes a list and a number, and finds two numbers in the list that sum to the given number.",
    "code": "```applescript\non findPairWithSum(theList, targetSum)\n\trepeat with i from 1 to (count theList) - 1\n\t\tset firstNum to item i of theList\n\t\trepeat with j from (i + 1) to count theList\n\t\t\tset secondNum to item j of theList\n\t\t\tif firstNum + secondNum is equal to targetSum then\n\t\t\t\treturn {firstNum, secondNum}\n\t\t\tend if\n\t\tend repeat\n\tend repeat\n\treturn missing value\nend findPairWithSum\n\n-- Example usage:\nset myList to {2, 4, 7, 11, 15}\nset target to 9\nfindPairWithSum(myList, target)\n```"
  },
  {
    "task": "Generate a list of even numbers and filter out those that are greater than a specific value.",
    "code": "```applescript\nset specificValue to 10\nset evenNumbers to {2, 4, 6, 8, 10, 12, 14, 16, 18, 20}\nset filteredNumbers to {}\nrepeat with n in evenNumbers\n    if n > specificValue then\n        copy n to end of filteredNumbers\n    end if\nend repeat\nfilteredNumbers\n```"
  },
  {
    "task": "Create a list of characters and reverse the vowels only.",
    "code": "```applescript\nset charList to {\"a\", \"b\", \"c\", \"e\", \"i\", \"o\", \"u\", \"d\", \"f\"}\n\nset vowels to {\"a\", \"e\", \"i\", \"o\", \"u\"}\nset vowelList to {}\nset reversedVowelList to {}\n\nrepeat with char in charList\n    if char is in vowels then\n        set end of vowelList to char\n    end if\nend repeat\n\nset reversedVowelList to reverse of vowelList\n\nset resultList to {}\nset vowelIndex to 1\n\nrepeat with char in charList\n    if char is in vowels then\n        set end of resultList to item vowelIndex of reversedVowelList\n        set vowelIndex to vowelIndex + 1\n    else\n        set end of resultList to char\n    end if\nend repeat\n\nresultList\n```"
  },
  {
    "task": "Write a program to find all permutations of a list of elements.",
    "code": "```applescript\nto permuteList(theList)\n    set n to (count theList)\n    if n \u2264 1 then\n        return {theList}\n    else\n        set permutations to {}\n        repeat with i from 1 to n\n            set item_i to item i of theList\n            set restList to {}\n            if i > 1 then set restList to items 1 thru (i - 1) of theList\n            if i < n then set restList to restList & items (i + 1) thru -1 of theList\n            set subPermutations to permuteList(restList)\n            repeat with eachPermutation in subPermutations\n                set end of permutations to {item_i} & eachPermutation\n            end repeat\n        end repeat\n        return permutations\n    end if\nend permuteList\n\n-- Example usage:\nset myList to {\"a\", \"b\", \"c\"}\nset result to permuteList(myList)\nreturn result\n```"
  },
  {
    "task": "Implement a function that takes a list and returns the most frequently occurring element.",
    "code": "```applescript\non mostFrequentElement(lst)\n\tset frequencyDict to {}\n\tset maxCount to 0\n\tset mostFrequent to missing value\n\t\n\trepeat with element in lst\n\t\tset element to contents of element\n\t\tif frequencyDict's containsKey:element then\n\t\t\tset currentCount to (frequencyDict's valueForKey:element) + 1\n\t\telse\n\t\t\tset currentCount to 1\n\t\tend if\n\t\tfrequencyDict's setValue:currentCount forKey:element\n\t\t\n\t\tif currentCount > maxCount then\n\t\t\tset maxCount to currentCount\n\t\t\tset mostFrequent to element\n\t\tend if\n\tend repeat\n\t\n\treturn mostFrequent\nend mostFrequentElement\n\n-- Example usage:\nset result to mostFrequentElement({\"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\"})\nreturn result\n```"
  },
  {
    "task": "Create a list of numbers and calculate the variance.",
    "code": "```applescript\nset numberList to {1, 2, 3, 4, 5}\nset sum to 0\nset count to count of numberList\n\nrepeat with num in numberList\n\tset sum to sum + num\nend repeat\n\nset mean to sum / count\n\nset sumOfSquares to 0\n\nrepeat with num in numberList\n\tset sumOfSquares to sumOfSquares + (num - mean) ^ 2\nend repeat\n\nset variance to sumOfSquares / count\nreturn variance\n```"
  },
  {
    "task": "Write a function to concatenate a list of lists into a single list.",
    "code": "```applescript\non concatenateLists(listOfLists)\n    set concatenatedList to {}\n    repeat with aList in listOfLists\n        set concatenatedList to concatenatedList & aList\n    end repeat\n    return concatenatedList\nend concatenateLists\n```"
  },
  {
    "task": "Generate a list of numbers and replace each element with the product of all other elements.",
    "code": "```applescript\nset originalList to {1, 2, 3, 4, 5}\nset transformedList to {}\n\nrepeat with i from 1 to length of originalList\n    set product to 1\n    repeat with j from 1 to length of originalList\n        if i is not j then\n            set product to product * item j of originalList\n        end if\n    end repeat\n    set end of transformedList to product\nend repeat\n\ntransformedList\n```"
  },
  {
    "task": "Create a list of strings and find the common prefix.",
    "code": "```applescript\nset stringList to {\"flower\", \"flow\", \"flight\"}\nset commonPrefix to first item of stringList\n\nrepeat with s in rest of stringList\n    set prefixLength to length of commonPrefix\n    repeat while prefixLength > 0\n        if (text 1 thru prefixLength of s) is equal to (text 1 thru prefixLength of commonPrefix) then\n            exit repeat\n        else\n            set prefixLength to prefixLength - 1\n        end if\n    end repeat\n    set commonPrefix to text 1 thru prefixLength of commonPrefix\nend repeat\n\nreturn commonPrefix\n```"
  },
  {
    "task": "Write a program to partition a list into two lists based on a predicate function.",
    "code": "```applescript\non partitionList(inputList, predicate)\n\tset trueList to {}\n\tset falseList to {}\n\trepeat with item in inputList\n\t\tif my predicate(item) then\n\t\t\tset end of trueList to item\n\t\telse\n\t\t\tset end of falseList to item\n\t\tend if\n\tend repeat\n\treturn {trueList, falseList}\nend partitionList\n\non predicate(x)\n\t-- Define your predicate logic here, e.g., return true if x is even\n\treturn x mod 2 is equal to 0\nend predicate\n\n-- Example usage\nset myList to {1, 2, 3, 4, 5}\nset {evens, odds} to partitionList(myList, predicate)\n```"
  },
  {
    "task": "Implement a function to find the kth smallest element in a list.",
    "code": "```applescript\non kthSmallestElement(theList, k)\n\ttell application \"System Events\"\n\t\tset sortedList to (sort theList)\n\tend tell\n\treturn item k of sortedList\nend kthSmallestElement\n```"
  },
  {
    "task": "Create a list of integers and find the length of the longest contiguous sequence.",
    "code": "```applescript\nset numberList to {1, 2, 2, 3, 4, 5, 5, 5, 6, 7, 8}\nset maxSequenceLength to 0\nset currentSequenceLength to 1\n\nrepeat with i from 2 to (count of numberList)\n    if item i of numberList is equal to item (i - 1) of numberList then\n        set currentSequenceLength to currentSequenceLength + 1\n    else\n        if currentSequenceLength > maxSequenceLength then\n            set maxSequenceLength to currentSequenceLength\n        end if\n        set currentSequenceLength to 1\n    end if\nend repeat\n\nif currentSequenceLength > maxSequenceLength then\n    set maxSequenceLength to currentSequenceLength\nend if\n\nreturn maxSequenceLength\n```"
  },
  {
    "task": "Write a function that rotates elements in a list while maintaining the relative order of non-rotated elements.",
    "code": "```applescript\non rotateList(theList, numRotations)\n\tset listLength to length of theList\n\tset numRotations to numRotations mod listLength\n\tif numRotations is 0 then return theList\n\t\n\tset rotatedList to {}\n\tset rotatedPart to items 1 thru numRotations of theList\n\tset remainingPart to items (numRotations + 1) thru -1 of theList\n\t\n\tset rotatedList to rotatedPart & remainingPart\n\treturn rotatedList\nend rotateList\n\n-- Example usage:\nset myList to {1, 2, 3, 4, 5}\nset rotated to rotateList(myList, 2)\ndisplay dialog (rotated as string)\n```"
  },
  {
    "task": "Generate a list of random numbers and sort them while maintaining the original index positions.",
    "code": "```applescript\nset randomNumbers to {}\nrepeat 10 times\n\tset end of randomNumbers to (random number from 1 to 100)\nend repeat\n\nset indexedNumbers to {}\nrepeat with i from 1 to count of randomNumbers\n\tset end of indexedNumbers to {index:i, value:item i of randomNumbers}\nend repeat\n\nset sortedNumbers to my sortList(indexedNumbers)\n\non sortList(lst)\n\trepeat with i from 1 to (count of lst) - 1\n\t\trepeat with j from (i + 1) to count of lst\n\t\t\tif (value of item i of lst) > (value of item j of lst) then\n\t\t\t\tset temp to item i of lst\n\t\t\t\tset item i of lst to item j of lst\n\t\t\t\tset item j of lst to temp\n\t\t\tend if\n\t\tend repeat\n\tend repeat\n\treturn lst\nend sortList\n\nreturn sortedNumbers\n```"
  },
  {
    "task": "Create a list of numbers and find all subsets that sum up to a specific target.",
    "code": "```applescript\non subsetsThatSumToTarget(numbersList, targetSum)\n    set result to {}\n    set sublistCount to 2 ^ (count numbersList)\n    repeat with i from 0 to (sublistCount - 1)\n        set currentSubset to {}\n        set sum to 0\n        repeat with j from 1 to count numbersList\n            if (i div (2 ^ (j - 1)) mod 2) is 1 then\n                set end of currentSubset to item j of numbersList\n                set sum to sum + item j of numbersList\n            end if\n        end repeat\n        if sum is equal to targetSum then\n            set end of result to currentSubset\n        end if\n    end repeat\n    return result\nend subsetsThatSumToTarget\n\n-- Example usage\nset numList to {3, 1, 2, 5, 4}\nset target to 6\nsubsetsThatSumToTarget(numList, target)\n```"
  },
  {
    "task": "Write a program to simulate a stack using a list.",
    "code": "```applescript\nproperty stack : {}\n\non push(item)\n\tset end of stack to item\nend push\n\non pop()\n\tif (count of stack) is greater than 0 then\n\t\tset lastItem to item -1 of stack\n\t\tset stack to items 1 thru -2 of stack\n\t\treturn lastItem\n\telse\n\t\treturn \"Stack is empty\"\n\tend if\nend pop\n\non peek()\n\tif (count of stack) is greater than 0 then\n\t\treturn item -1 of stack\n\telse\n\t\treturn \"Stack is empty\"\n\tend if\nend peek\n\non isEmpty()\n\treturn (count of stack) is 0\nend isEmpty\n\non size()\n\treturn count of stack\nend size\n```"
  }
]