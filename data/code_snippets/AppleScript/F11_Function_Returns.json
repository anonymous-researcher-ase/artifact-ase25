[
  {
    "task": "Create a function that calculates the sum of two numbers and returns the result.",
    "code": "```applescript\non calculateSum(a, b)\n\treturn a + b\nend calculateSum\n```"
  },
  {
    "task": "Design a function that takes a string and returns its length.",
    "code": "```applescript\non getLengthOfString(theString)\n    return (length of theString)\nend getLengthOfString\n```"
  },
  {
    "task": "Write a function that checks if a number is prime and returns a boolean value.",
    "code": "```applescript\non isPrime(n)\n    if n \u2264 1 then return false\n    if n = 2 then return true\n    if n mod 2 = 0 then return false\n    set maxCheck to (n ^ 0.5) div 1\n    repeat with i from 3 to maxCheck by 2\n        if n mod i = 0 then return false\n    end repeat\n    return true\nend isPrime\n```"
  },
  {
    "task": "Implement a function that returns the highest value in a list of integers.",
    "code": "```applescript\non findMaxValue(integerList)\n\tset maxValue to item 1 of integerList\n\trepeat with i from 2 to count of integerList\n\t\tif item i of integerList > maxValue then\n\t\t\tset maxValue to item i of integerList\n\t\tend if\n\tend repeat\n\treturn maxValue\nend findMaxValue\n```"
  },
  {
    "task": "Create a function that accepts a list of words and returns the longest word.",
    "code": "```applescript\non longestWord(wordList)\n\tset longest to \"\"\n\trepeat with currentWord in wordList\n\t\tif (length of currentWord) > (length of longest) then\n\t\t\tset longest to currentWord\n\t\tend if\n\tend repeat\n\treturn longest\nend longestWord\n```"
  },
  {
    "task": "Write a function that takes a temperature in Celsius and returns the equivalent in Fahrenheit.",
    "code": "```applescript\non celsiusToFahrenheit(celsius)\n\treturn celsius * 9 / 5 + 32\nend celsiusToFahrenheit\n```"
  },
  {
    "task": "Develop a function that returns the factorial of a given number.",
    "code": "```applescript\non factorial(n)\n    if n is less than or equal to 1 then\n        return 1\n    else\n        return n * factorial(n - 1)\n    end if\nend factorial\n```"
  },
  {
    "task": "Implement a function that receives a date and returns the day of the week.",
    "code": "```applescript\non dayOfWeekForDate(theDate)\n    set theDate to date theDate\n    set dayOfWeek to weekday of theDate\n    return dayOfWeek as text\nend dayOfWeekForDate\n```"
  },
  {
    "task": "Write a function that calculates the area of a circle given its radius and returns the value.",
    "code": "```applescript\non calculateAreaOfCircle(radius)\n\tset pi to 3.141592653589793\n\tset area to pi * radius * radius\n\treturn area\nend calculateAreaOfCircle\n```"
  },
  {
    "task": "Create a function that converts a string to uppercase and returns the modified string.",
    "code": "```applescript\non convertToUppercase(inputString)\n\treturn (inputString as string) as uppercase\nend convertToUppercase\n```"
  },
  {
    "task": "Design a function that returns the reverse of a given list.",
    "code": "```applescript\non reverseList(theList)\n\tset reversedList to {}\n\trepeat with i from (count of theList) to 1 by -1\n\t\tset end of reversedList to item i of theList\n\tend repeat\n\treturn reversedList\nend reverseList\n```"
  },
  {
    "task": "Implement a function that accepts a string and returns a dictionary with character frequencies.",
    "code": "```applescript\non characterFrequencies(inputString)\n\tset freqDict to {}\n\trepeat with i from 1 to (length of inputString)\n\t\tset char to character i of inputString\n\t\tif freqDict contains char then\n\t\t\tset freqDict's item char to freqDict's item char + 1\n\t\telse\n\t\t\tset freqDict's item char to 1\n\t\tend if\n\tend repeat\n\treturn freqDict\nend characterFrequencies\n```"
  },
  {
    "task": "Write a function that returns the first non-repeating character in a string.",
    "code": "```applescript\non firstNonRepeatingCharacter(theString)\n\tset charCount to {}\n\tset charOrder to {}\n\trepeat with i from 1 to length of theString\n\t\tset char to character i of theString\n\t\tif char is in charCount then\n\t\t\tset item (item 1 of (charCount's index of char)) of charCount to char & \"x\"\n\t\telse\n\t\t\tset end of charCount to char & \"1\"\n\t\t\tset end of charOrder to char\n\t\tend if\n\tend repeat\n\t\n\trepeat with char in charOrder\n\t\tif item (item 1 of (charCount's index of char)) of charCount contains \"1\" then\n\t\t\treturn char\n\t\tend if\n\tend repeat\n\t\n\treturn \"\"\nend firstNonRepeatingCharacter\n```"
  },
  {
    "task": "Create a function that takes a list of numbers and returns a new list with only even numbers.",
    "code": "```applescript\non filterEvens(numList)\n\tset evenList to {}\n\trepeat with num in numList\n\t\tif num mod 2 is 0 then\n\t\t\tset end of evenList to num\n\t\tend if\n\tend repeat\n\treturn evenList\nend filterEvens\n```"
  },
  {
    "task": "Develop a function that receives a sentence and returns the word count.",
    "code": "```applescript\non countWords(sentence)\n\tset wordList to words of sentence\n\treturn (count of wordList)\nend countWords\n```"
  },
  {
    "task": "Implement a function that returns the smallest element in an array.",
    "code": "```applescript\non findSmallest(theList)\n\tset smallest to item 1 of theList\n\trepeat with i from 2 to count of theList\n\t\tif item i of theList < smallest then\n\t\t\tset smallest to item i of theList\n\t\tend if\n\tend repeat\n\treturn smallest\nend findSmallest\n```"
  },
  {
    "task": "Write a function that takes two strings and returns true if they are anagrams.",
    "code": "```applescript\non areAnagrams(string1, string2)\n    if (length of string1) is not equal to (length of string2) then\n        return false\n    end if\n    set charList1 to characters of string1\n    set charList2 to characters of string2\n    set sorted1 to my sortList(charList1)\n    set sorted2 to my sortList(charList2)\n    return sorted1 is equal to sorted2\nend areAnagrams\n\non sortList(aList)\n    set {TID, text item delimiters} to {text item delimiters, \"\"}\n    set sortedList to paragraphs of (do shell script \"echo \" & quoted form of (aList as text) & \" | tr -d ' ' | fold -w1 | sort | tr -d '\\n'\")\n    set text item delimiters to TID\n    return sortedList\nend sortList\n```"
  },
  {
    "task": "Create a function that accepts an integer and returns a list of its divisors.",
    "code": "```applescript\non divisors(n)\n\tset divisorList to {}\n\trepeat with i from 1 to n\n\t\tif n mod i = 0 then\n\t\t\tset end of divisorList to i\n\t\tend if\n\tend repeat\n\treturn divisorList\nend divisors\n```"
  },
  {
    "task": "Design a function that returns the square root of a given number.",
    "code": "```applescript\non squareRootOfNumber(n)\n\treturn n ^ 0.5\nend squareRootOfNumber\n```"
  },
  {
    "task": "Implement a function that accepts a list and returns it sorted in ascending order.",
    "code": "```applescript\non sortListAscending(theList)\n\tset sortedList to {}\n\trepeat until (count of theList) is 0\n\t\tset minItem to item 1 of theList\n\t\trepeat with i from 2 to (count of theList)\n\t\t\tif item i of theList < minItem then\n\t\t\t\tset minItem to item i of theList\n\t\t\tend if\n\t\tend repeat\n\t\tset end of sortedList to minItem\n\t\tset theList to my removeItem(minItem, theList)\n\tend repeat\n\treturn sortedList\nend sortListAscending\n\non removeItem(theItem, theList)\n\tset newList to {}\n\trepeat with i from 1 to (count of theList)\n\t\tif item i of theList is not theItem then\n\t\t\tset end of newList to item i of theList\n\t\tend if\n\tend repeat\n\treturn newList\nend removeItem\n```"
  },
  {
    "task": "Write a function that checks whether a given year is a leap year and returns a boolean.",
    "code": "```applescript\non isLeapYear(year)\n    if (year mod 4 is 0 and year mod 100 is not 0) or (year mod 400 is 0) then\n        return true\n    else\n        return false\n    end if\nend isLeapYear\n```"
  },
  {
    "task": "Create a function that receives a list of numbers and returns their average.",
    "code": "```applescript\non averageOfList(numberList)\n\tset total to 0\n\tset count to length of numberList\n\trepeat with num in numberList\n\t\tset total to total + num\n\tend repeat\n\treturn total / count\nend averageOfList\n```"
  },
  {
    "task": "Develop a function that returns the nth Fibonacci number.",
    "code": "```applescript\non fibonacciNumber(n)\n    if n is less than or equal to 1 then\n        return n\n    else\n        return fibonacciNumber(n - 1) + fibonacciNumber(n - 2)\n    end if\nend fibonacciNumber\n```"
  },
  {
    "task": "Implement a function that accepts a string and returns it with vowels removed.",
    "code": "```applescript\non removeVowels(inputString)\n\tset vowels to {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"}\n\tset result to \"\"\n\trepeat with char in characters of inputString\n\t\tif char is not in vowels then\n\t\t\tset result to result & char\n\t\tend if\n\tend repeat\n\treturn result\nend removeVowels\n```"
  },
  {
    "task": "Write a function that takes two dates and returns the number of days between them.",
    "code": "```applescript\non daysBetween(date1, date2)\n\tset dateDifference to (date2 - date1) / days\n\treturn dateDifference\nend daysBetween\n```"
  },
  {
    "task": "Create a function that returns the last element of a list.",
    "code": "```applescript\non getLastItem(theList)\n    return item -1 of theList\nend getLastItem\n```"
  },
  {
    "task": "Design a function that calculates the GCD of two numbers and returns it.",
    "code": "```applescript\non calculateGCD(a, b)\n    repeat while b is not 0\n        set temp to b\n        set b to a mod b\n        set a to temp\n    end repeat\n    return a\nend calculateGCD\n```"
  },
  {
    "task": "Implement a function that takes a list and returns a tuple with the min and max values.",
    "code": "```applescript\non minMaxValues(lst)\n\tset minValue to item 1 of lst\n\tset maxValue to item 1 of lst\n\trepeat with value in lst\n\t\tif value < minValue then\n\t\t\tset minValue to value\n\t\tend if\n\t\tif value > maxValue then\n\t\t\tset maxValue to value\n\t\tend if\n\tend repeat\n\treturn {minValue, maxValue}\nend minMaxValues\n```"
  },
  {
    "task": "Write a function that converts a binary string to its decimal representation and returns it.",
    "code": "```applescript\non binaryToDecimal(binaryString)\n\tset decimalValue to 0\n\tset binaryLength to length of binaryString\n\t\n\trepeat with i from 1 to binaryLength\n\t\tset bit to text i thru i of binaryString\n\t\tset decimalValue to decimalValue * 2 + (bit as integer)\n\tend repeat\n\t\n\treturn decimalValue\nend binaryToDecimal\n```"
  },
  {
    "task": "Create a function that accepts a dictionary and returns a list of its keys.",
    "code": "```applescript\non getKeysFromDictionary(theDictionary)\n    set theKeys to {}\n    set dictKeys to current application's NSDictionary's dictionaryWithDictionary:theDictionary\n    set allKeys to dictKeys's allKeys()\n    repeat with aKey in allKeys\n        set end of theKeys to aKey as text\n    end repeat\n    return theKeys\nend getKeysFromDictionary\n```"
  },
  {
    "task": "Develop a function that returns the concatenation of two strings.",
    "code": "```applescript\non concatenateStrings(firstString, secondString)\n\treturn firstString & secondString\nend concatenateStrings\n```"
  },
  {
    "task": "Implement a function that receives a list and returns a new list with duplicates removed.",
    "code": "```applescript\non removeDuplicates(theList)\n\tset newList to {}\n\trepeat with anItem in theList\n\t\tif anItem is not in newList then\n\t\t\tset end of newList to anItem\n\t\tend if\n\tend repeat\n\treturn newList\nend removeDuplicates\n```"
  },
  {
    "task": "Write a function that returns the intersection of two lists.",
    "code": "```applescript\non intersectionOfLists(list1, list2)\n\tset result to {}\n\trepeat with item in list1\n\t\tif item is in list2 then\n\t\t\tset end of result to item\n\t\tend if\n\tend repeat\n\treturn result\nend intersectionOfLists\n```"
  },
  {
    "task": "Create a function that takes an integer and returns whether it is even or odd as a string.",
    "code": "```applescript\non evenOrOdd(n)\n    if n mod 2 is 0 then\n        return \"even\"\n    else\n        return \"odd\"\n    end if\nend evenOrOdd\n```"
  },
  {
    "task": "Design a function that returns the number of vowels in a given string.",
    "code": "```applescript\non countVowels(inputString)\n\tset vowels to \"aeiouAEIOU\"\n\tset vowelCount to 0\n\trepeat with char in characters of inputString\n\t\tif char is in vowels then\n\t\t\tset vowelCount to vowelCount + 1\n\t\tend if\n\tend repeat\n\treturn vowelCount\nend countVowels\n```"
  },
  {
    "task": "Implement a function that counts the occurrences of a substring within a string and returns it.",
    "code": "```applescript\non countOccurrences(substring, mainString)\n\tset AppleScript's text item delimiters to substring\n\tset theItems to text items of mainString\n\tset AppleScript's text item delimiters to \"\"\n\treturn (count of theItems) - 1\nend countOccurrences\n```"
  },
  {
    "task": "Write a function that accepts a list of numbers and returns them sorted in descending order.",
    "code": "```applescript\non sortDescending(numbersList)\n\tset sortedList to my sortListDescending(numbersList)\n\treturn sortedList\nend sortDescending\n\non sortListDescending(numbersList)\n\tset sortedList to numbersList\n\tset sortedList to reverse of (sort sortedList)\n\treturn sortedList\nend sortListDescending\n\non sort(numbersList)\n\tset theIndexes to {}\n\tset theSortedList to {}\n\trepeat with i from 1 to count of numbersList\n\t\tset end of theIndexes to i\n\tend repeat\n\t\n\trepeat with i from 1 to count of theIndexes\n\t\tset theLowestIndex to 1\n\t\trepeat with j from 2 to (count of theIndexes) - (i - 1)\n\t\t\tif item (item j of theIndexes) of numbersList < item (item theLowestIndex of theIndexes) of numbersList then\n\t\t\t\tset theLowestIndex to j\n\t\t\tend if\n\t\tend repeat\n\t\tset end of theSortedList to item (item theLowestIndex of theIndexes) of numbersList\n\t\tset theIndexes to my removeItem(theLowestIndex, theIndexes)\n\tend repeat\n\t\n\treturn theSortedList\nend sort\n\non removeItem(anIndex, aList)\n\tset newList to {}\n\trepeat with i from 1 to count of aList\n\t\tif i is not anIndex then\n\t\t\tset end of newList to item i of aList\n\t\tend if\n\tend repeat\n\treturn newList\nend removeItem\n```"
  },
  {
    "task": "Create a function that returns the median of a list of numbers.",
    "code": "```applescript\non medianOfList(theList)\n\tset sortedList to my sortList(theList)\n\tset listLength to count of sortedList\n\t\n\tif listLength mod 2 is 0 then\n\t\tset midIndex1 to listLength div 2\n\t\tset midIndex2 to midIndex1 + 1\n\t\tset midValue to (item midIndex1 of sortedList + item midIndex2 of sortedList) / 2\n\telse\n\t\tset midIndex to (listLength + 1) div 2\n\t\tset midValue to item midIndex of sortedList\n\tend if\n\t\n\treturn midValue\nend medianOfList\n\non sortList(theList)\n\tset AppleScript's text item delimiters to {\", \"}\n\tset sortedList to paragraphs of (do shell script \"echo {\" & theList & \"} | tr -d '{}' | tr ',' '\\n' | sort -n | tr '\\n' ',' | sed 's/,$//'\")\n\tset AppleScript's text item delimiters to \"\"\n\treturn sortedList\nend sortList\n```"
  },
  {
    "task": "Develop a function that receives a sentence and returns it with words in reverse order.",
    "code": "```applescript\non reverseWordsInSentence(sentence)\n\tset wordList to words of sentence\n\tset reversedList to reverse of wordList\n\tset reversedSentence to reversedList as text\n\treturn reversedSentence\nend reverseWordsInSentence\n```"
  },
  {
    "task": "Implement a function that returns the sum of all elements in a matrix.",
    "code": "```applescript\non sumMatrix(matrix)\n    set totalSum to 0\n    repeat with row in matrix\n        repeat with element in row\n            set totalSum to totalSum + element\n        end repeat\n    end repeat\n    return totalSum\nend sumMatrix\n```"
  },
  {
    "task": "Write a function that accepts a string and returns true if it is a palindrome.",
    "code": "```applescript\non isPalindrome(theString)\n\tset reversedString to (reverse of characters of theString) as string\n\tif theString is equal to reversedString then\n\t\treturn true\n\telse\n\t\treturn false\n\tend if\nend isPalindrome\n```"
  },
  {
    "task": "Create a function that takes a number and returns its binary representation as a string.",
    "code": "```applescript\non numberToBinary(inputNumber)\n\tset binaryString to \"\"\n\tset n to inputNumber\n\trepeat while n > 0\n\t\tset remainder to n mod 2\n\t\tset binaryString to remainder as string & binaryString\n\t\tset n to n div 2\n\tend repeat\n\treturn binaryString\nend numberToBinary\n```"
  },
  {
    "task": "Design a function that returns the number of words in a paragraph.",
    "code": "```applescript\non countWordsInParagraph(paragraphText)\n\tset wordCount to count of words of paragraphText\n\treturn wordCount\nend countWordsInParagraph\n```"
  },
  {
    "task": "Implement a function that accepts a list and returns the index of its maximum element.",
    "code": "```applescript\non maxIndex(theList)\n\tset maxVal to item 1 of theList\n\tset maxIdx to 1\n\trepeat with i from 2 to count of theList\n\t\tif item i of theList > maxVal then\n\t\t\tset maxVal to item i of theList\n\t\t\tset maxIdx to i\n\t\tend if\n\tend repeat\n\treturn maxIdx\nend maxIndex\n```"
  },
  {
    "task": "Write a function that takes a list of grades and returns the highest grade.",
    "code": "```applescript\non highestGrade(gradesList)\n\tset highest to item 1 of gradesList\n\trepeat with grade in gradesList\n\t\tif grade > highest then\n\t\t\tset highest to grade\n\t\tend if\n\tend repeat\n\treturn highest\nend highestGrade\n```"
  },
  {
    "task": "Create a function that returns the product of all positive integers up to a given number.",
    "code": "```applescript\non factorial(n)\n\tif n \u2264 0 then return 1\n\tset product to 1\n\trepeat with i from 1 to n\n\t\tset product to product * i\n\tend repeat\n\treturn product\nend factorial\n```"
  },
  {
    "task": "Develop a function that receives a string and returns a new string with spaces replaced by hyphens.",
    "code": "```applescript\non replaceSpacesWithHyphens(inputString)\n\tset AppleScript's text item delimiters to \" \"\n\tset textItems to text items of inputString\n\tset AppleScript's text item delimiters to \"-\"\n\tset newString to textItems as string\n\tset AppleScript's text item delimiters to \"\"\n\treturn newString\nend replaceSpacesWithHyphens\n```"
  },
  {
    "task": "Implement a function that takes a list of integers and returns their sum.",
    "code": "```applescript\non sumOfIntegers(integerList)\n\tset total to 0\n\trepeat with num in integerList\n\t\tset total to total + num\n\tend repeat\n\treturn total\nend sumOfIntegers\n```"
  },
  {
    "task": "Write a function that checks if a string is a valid email address and returns a boolean.",
    "code": "```applescript\non isValidEmail(emailAddress)\n\tset emailPattern to \"^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\\\.[A-Z]{2,}$\"\n\tset isEmail to (do shell script \"echo \" & quoted form of emailAddress & \" | grep -iE \" & quoted form of emailPattern) is not \"\"\n\treturn isEmail\nend isValidEmail\n```"
  },
  {
    "task": "Create a function that returns the decimal equivalent of a hexadecimal string.",
    "code": "```applescript\non hexToDecimal(hexString)\n\tset decimalValue to 0\n\tset hexDigits to \"0123456789ABCDEF\"\n\tset hexString to text items of hexString\n\tset hexString to reverse of hexString\n\trepeat with i from 1 to count of hexString\n\t\tset digitValue to (offset of (item i of hexString) in hexDigits) - 1\n\t\tset decimalValue to decimalValue + digitValue * (16 ^ (i - 1))\n\tend repeat\n\treturn decimalValue\nend hexToDecimal\n```"
  },
  {
    "task": "Design a function that calculates and returns the body mass index based on height and weight.",
    "code": "```applescript\non calculateBMI(weight, height)\n\tset bmi to weight / (height * height)\n\treturn bmi\nend calculateBMI\n```"
  },
  {
    "task": "Implement a function that returns the initials of a person's name given a full name.",
    "code": "```applescript\non getInitials(fullName)\n\tset nameParts to words of fullName\n\tset initials to \"\"\n\trepeat with namePart in nameParts\n\t\tset initials to initials & (character 1 of namePart)\n\tend repeat\n\treturn initials\nend getInitials\n```"
  },
  {
    "task": "Write a function that accepts a list of names and returns them sorted alphabetically.",
    "code": "```applescript\non sortNames(nameList)\n\tset sortedList to {}\n\ttell (current application's NSArray's arrayWithArray:nameList) to set sortedList to its sortedArrayUsingSelector:\"caseInsensitiveCompare:\"\n\treturn sortedList as list\nend sortNames\n```"
  },
  {
    "task": "Create a function that takes a list of integers and returns a list of their squares.",
    "code": "```applescript\non squareList(theList)\n\tset squaredList to {}\n\trepeat with i from 1 to count of theList\n\t\tset end of squaredList to (item i of theList) * (item i of theList)\n\tend repeat\n\treturn squaredList\nend squareList\n```"
  },
  {
    "task": "Develop a function that returns the common elements between two sets.",
    "code": "```applescript\non commonElements(set1, set2)\n\tset commonSet to {}\n\trepeat with elem in set1\n\t\tif set2 contains elem then\n\t\t\tset end of commonSet to elem\n\t\tend if\n\tend repeat\n\treturn commonSet\nend commonElements\n```"
  },
  {
    "task": "Implement a function that receives a list of strings and returns the shortest string.",
    "code": "```applescript\non shortestString(theList)\n\tset minString to item 1 of theList\n\trepeat with currentString in theList\n\t\tif (length of currentString) < (length of minString) then\n\t\t\tset minString to currentString\n\t\tend if\n\tend repeat\n\treturn minString\nend shortestString\n```"
  },
  {
    "task": "Write a function that returns the sum of digits of a given integer.",
    "code": "```applescript\non sumOfDigits(n)\n\tset digitList to characters of (n as string)\n\tset total to 0\n\trepeat with digit in digitList\n\t\tset total to total + (digit as integer)\n\tend repeat\n\treturn total\nend sumOfDigits\n```"
  },
  {
    "task": "Create a function that takes a matrix and returns its transpose.",
    "code": "```applescript\non transposeMatrix(matrix)\n\tset transposedMatrix to {}\n\tset numberOfRows to count of matrix\n\tif numberOfRows is 0 then return {}\n\tset numberOfColumns to count of item 1 of matrix\n\t\n\trepeat with columnIndex from 1 to numberOfColumns\n\t\tset newRow to {}\n\t\trepeat with rowIndex from 1 to numberOfRows\n\t\t\tset end of newRow to item columnIndex of item rowIndex of matrix\n\t\tend repeat\n\t\tset end of transposedMatrix to newRow\n\tend repeat\n\t\n\treturn transposedMatrix\nend transposeMatrix\n```"
  },
  {
    "task": "Design a function that returns the percentage of uppercase letters in a string.",
    "code": "```applescript\non percentageUppercase(s)\n\tset totalChars to length of s\n\tif totalChars is 0 then return 0\n\tset uppercaseCount to 0\n\trepeat with i from 1 to totalChars\n\t\tset currentChar to character i of s\n\t\tif currentChar is in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" then\n\t\t\tset uppercaseCount to uppercaseCount + 1\n\t\tend if\n\tend repeat\n\treturn (uppercaseCount / totalChars) * 100\nend percentageUppercase\n```"
  },
  {
    "task": "Implement a function that accepts a string and returns it with each word capitalized.",
    "code": "```applescript\non capitalizeWords(inputString)\n\tset wordList to words of inputString\n\tset capitalizedList to {}\n\trepeat with aWord in wordList\n\t\tset end of capitalizedList to (do shell script \"echo \" & quoted form of aWord & \" | awk '{print toupper(substr($0,1,1)) tolower(substr($0,2))}'\")\n\tend repeat\n\treturn my joinWords(capitalizedList, \" \")\nend capitalizeWords\n\non joinWords(theList, delimiter)\n\tset {oldDelimiters, AppleScript's text item delimiters} to {AppleScript's text item delimiters, delimiter}\n\tset joinedString to theList as text\n\tset AppleScript's text item delimiters to oldDelimiters\n\treturn joinedString\nend joinWords\n```"
  },
  {
    "task": "Write a function that takes a list and returns the difference between the max and min values.",
    "code": "```applescript\non calculateDifference(theList)\n\tset maxVal to max of theList\n\tset minVal to min of theList\n\treturn maxVal - minVal\nend calculateDifference\n\non max(theList)\n\tset maxValue to item 1 of theList\n\trepeat with i from 2 to count of theList\n\t\tif item i of theList > maxValue then\n\t\t\tset maxValue to item i of theList\n\t\tend if\n\tend repeat\n\treturn maxValue\nend max\n\non min(theList)\n\tset minValue to item 1 of theList\n\trepeat with i from 2 to count of theList\n\t\tif item i of theList < minValue then\n\t\t\tset minValue to item i of theList\n\t\tend if\n\tend repeat\n\treturn minValue\nend min\n```"
  },
  {
    "task": "Create a function that returns a list containing the first n prime numbers.",
    "code": "```applescript\non firstNPrimes(n)\n    set primes to {}\n    set count to 0\n    set num to 2\n    repeat while count < n\n        if isPrime(num) then\n            set end of primes to num\n            set count to count + 1\n        end if\n        set num to num + 1\n    end repeat\n    return primes\nend firstNPrimes\n\non isPrime(num)\n    if num < 2 then return false\n    if num is 2 then return true\n    if num mod 2 is 0 then return false\n    set limit to num div 2\n    repeat with i from 3 to limit by 2\n        if num mod i is 0 then return false\n    end repeat\n    return true\nend isPrime\n```"
  },
  {
    "task": "Develop a function that receives a dictionary and returns a new dictionary with keys and values swapped.",
    "code": "```applescript\non swapKeysAndValues(originalDict)\n\tset swappedDict to {}\n\tset originalKeys to my keys of originalDict\n\t\n\trepeat with aKey in originalKeys\n\t\tset aValue to (originalDict's item aKey)\n\t\tset swappedDict's item aValue to aKey\n\tend repeat\n\t\n\treturn swappedDict\nend swapKeysAndValues\n\non keys(dict)\n\tset keyList to {}\n\trepeat with aKey in dict\n\t\tcopy aKey to the end of keyList\n\tend repeat\n\treturn keyList\nend keys\n```"
  },
  {
    "task": "Implement a function that accepts a string and returns the frequency of each word.",
    "code": "```applescript\non wordFrequency(inputString)\n\tset wordList to words of inputString\n\tset frequencyDict to {}\n\trepeat with aWord in wordList\n\t\tif aWord is in frequencyDict then\n\t\t\tset end of (frequencyDict's item aWord) to (frequencyDict's item aWord) + 1\n\t\telse\n\t\t\tset end of frequencyDict to {aWord:1}\n\t\tend if\n\tend repeat\n\treturn frequencyDict\nend wordFrequency\n```"
  },
  {
    "task": "Write a function that takes two numbers and returns their greatest common divisor.",
    "code": "```applescript\non greatestCommonDivisor(a, b)\n    if b is 0 then\n        return a\n    else\n        return greatestCommonDivisor(b, a mod b)\n    end if\nend greatestCommonDivisor\n```"
  },
  {
    "task": "Create a function that returns the number of consonants in a given string.",
    "code": "```applescript\non countConsonants(inputString)\n\tset consonantCount to 0\n\trepeat with i from 1 to count of characters of inputString\n\t\tset currentChar to character i of inputString\n\t\tif currentChar is not in {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"} then\n\t\t\tif (currentChar is greater than or equal to \"a\" and currentChar is less than or equal to \"z\") or (currentChar is greater than or equal to \"A\" and currentChar is less than or equal to \"Z\") then\n\t\t\t\tset consonantCount to consonantCount + 1\n\t\t\tend if\n\t\tend if\n\tend repeat\n\treturn consonantCount\nend countConsonants\n```"
  },
  {
    "task": "Design a function that checks if a number is a perfect square and returns a boolean.",
    "code": "```applescript\non isPerfectSquare(n)\n\tset root to n ^ 0.5\n\tif root = (round root rounding down) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend if\nend isPerfectSquare\n```"
  },
  {
    "task": "Implement a function that takes a list of numbers and returns the mode.",
    "code": "```applescript\non modeOfList(numList)\n\tset countMap to {}\n\trepeat with num in numList\n\t\tif countMap's containsKey(num as text) then\n\t\t\tset countMap's valueForKey_(num as text) to (countMap's valueForKey_(num as text)) + 1\n\t\telse\n\t\t\tset countMap's valueForKey_(num as text) to 1\n\t\tend if\n\tend repeat\n\t\n\tset maxCount to 0\n\tset mode to missing value\n\trepeat with key in countMap's allKeys()\n\t\tset currentCount to countMap's valueForKey_(key)\n\t\tif currentCount > maxCount then\n\t\t\tset maxCount to currentCount\n\t\t\tset mode to key\n\t\tend if\n\tend repeat\n\t\n\treturn mode as real\nend modeOfList\n```"
  },
  {
    "task": "Write a function that accepts a string and returns a new string with characters in reverse order.",
    "code": "```applescript\non reverseString(inputString)\n\tset reversedString to \"\"\n\trepeat with i from (length of inputString) to 1 by -1\n\t\tset reversedString to reversedString & character i of inputString\n\tend repeat\n\treturn reversedString\nend reverseString\n```"
  },
  {
    "task": "Create a function that returns the sum of all even numbers in a list.",
    "code": "```applescript\non sumOfEvenNumbers(numList)\n\tset total to 0\n\trepeat with num in numList\n\t\tif num mod 2 is 0 then\n\t\t\tset total to total + num\n\t\tend if\n\tend repeat\n\treturn total\nend sumOfEvenNumbers\n```"
  },
  {
    "task": "Develop a function that receives two lists and returns their union.",
    "code": "```applescript\non unionLists(list1, list2)\n\tset unionSet to list1\n\trepeat with anItem in list2\n\t\tif anItem is not in unionSet then\n\t\t\tset end of unionSet to anItem\n\t\tend if\n\tend repeat\n\treturn unionSet\nend unionLists\n```"
  },
  {
    "task": "Implement a function that takes a string and returns the number of unique characters.",
    "code": "```applescript\non countUniqueCharacters(inputString)\n    set charList to {}\n    repeat with i from 1 to length of inputString\n        set charItem to character i of inputString\n        if charList does not contain charItem then\n            set end of charList to charItem\n        end if\n    end repeat\n    return length of charList\nend countUniqueCharacters\n```"
  },
  {
    "task": "Write a function that returns the cube of a given number.",
    "code": "```applescript\non cubeNumber(x)\n\treturn x * x * x\nend cubeNumber\n```"
  },
  {
    "task": "Create a function that calculates the power of a number given a base and exponent and returns the result.",
    "code": "```applescript\non powerOfNumber(base, exponent)\n\tset result to base ^ exponent\n\treturn result\nend powerOfNumber\n```"
  },
  {
    "task": "Design a function that accepts a URL and returns its domain name.",
    "code": "```applescript\non getDomainName(givenURL)\n\tset {ASTID, AppleScript's text item delimiters} to {AppleScript's text item delimiters, \"/\"}\n\tset urlParts to text items of givenURL\n\tset AppleScript's text item delimiters to \".\"\n\tset domainParts to text items of item 2 of urlParts\n\tset AppleScript's text item delimiters to ASTID\n\treturn item 1 of domainParts & \".\" & item 2 of domainParts\nend getDomainName\n```"
  },
  {
    "task": "Implement a function that takes a sentence and returns it with each letter shifted by one in the alphabet.",
    "code": "```applescript\non shiftSentence(sentence)\n\tset result to \"\"\n\trepeat with i from 1 to length of sentence\n\t\tset char to character i of sentence\n\t\tif char is in \"abcdefghijklmnopqrstuvwxyz\" then\n\t\t\tset result to result & (character (ASCII number of char - 96 mod 26 + 1) of \"abcdefghijklmnopqrstuvwxyz\")\n\t\telse if char is in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" then\n\t\t\tset result to result & (character (ASCII number of char - 64 mod 26 + 1) of \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n\t\telse\n\t\t\tset result to result & char\n\t\tend if\n\tend repeat\n\treturn result\nend shiftSentence\n```"
  },
  {
    "task": "Write a function that checks if a list is sorted and returns a boolean.",
    "code": "```applescript\non isListSorted(theList)\n\trepeat with i from 1 to (count theList) - 1\n\t\tif item i of theList > item (i + 1) of theList then\n\t\t\treturn false\n\t\tend if\n\tend repeat\n\treturn true\nend isListSorted\n```"
  },
  {
    "task": "Create a function that returns the longest increasing subsequence in a list of numbers.",
    "code": "```applescript\non longestIncreasingSubsequence(nums)\n\tscript\n\t\tproperty resultSeq : {}\n\t\tproperty maxLength : 0\n\t\tproperty currentSeq : {}\n\t\tproperty lastNum : missing value\n\tend script\n\t\n\trepeat with num in nums\n\t\tif lastNum is not missing value and num \u2264 lastNum then\n\t\t\tif (count of currentSeq) > maxLength then\n\t\t\t\tset resultSeq to currentSeq\n\t\t\t\tset maxLength to count of currentSeq\n\t\t\tend if\n\t\t\tset currentSeq to {}\n\t\tend if\n\t\tset end of currentSeq to num\n\t\tset lastNum to num\n\tend repeat\n\t\n\tif (count of currentSeq) > maxLength then\n\t\tset resultSeq to currentSeq\n\tend if\n\t\n\treturn resultSeq\nend longestIncreasingSubsequence\n```"
  },
  {
    "task": "Develop a function that calculates and returns the compound interest for given principal, rate, and time.",
    "code": "```applescript\non calculateCompoundInterest(principal, rate, time)\n\tset compoundInterest to principal * (1 + rate) ^ time - principal\n\treturn compoundInterest\nend calculateCompoundInterest\n```"
  },
  {
    "task": "Implement a function that accepts two strings and returns their longest common substring.",
    "code": "```applescript\non longestCommonSubstring(str1, str2)\n\tset len1 to length of str1\n\tset len2 to length of str2\n\tset maxLen to 0\n\tset endIndex to 0\n\t\n\trepeat with i from 1 to len1\n\t\trepeat with j from 1 to len2\n\t\t\tset k to 0\n\t\t\trepeat while (i + k \u2264 len1) and (j + k \u2264 len2) and (character (i + k) of str1 is equal to character (j + k) of str2)\n\t\t\t\tset k to k + 1\n\t\t\tend repeat\n\t\t\tif k > maxLen then\n\t\t\t\tset maxLen to k\n\t\t\t\tset endIndex to i + k - 1\n\t\t\tend if\n\t\tend repeat\n\tend repeat\n\t\n\tif maxLen > 0 then\n\t\treturn text (endIndex - maxLen + 1) thru endIndex of str1\n\telse\n\t\treturn \"\"\n\tend if\nend longestCommonSubstring\n```"
  },
  {
    "task": "Write a function that takes a number and returns true if it is a palindrome.",
    "code": "```applescript\non isPalindromeNumber(n)\n\tset numStr to n as string\n\tset reversedStr to reverse of characters of numStr\n\tif numStr is equal to reversedStr then\n\t\treturn true\n\telse\n\t\treturn false\n\tend if\nend isPalindromeNumber\n```"
  },
  {
    "task": "Create a function that returns the average length of words in a given sentence.",
    "code": "```applescript\non averageWordLength(sentence)\n\tset wordList to words of sentence\n\tset totalLength to 0\n\trepeat with w in wordList\n\t\tset totalLength to totalLength + (length of w)\n\tend repeat\n\treturn totalLength / (count of wordList)\nend averageWordLength\n```"
  },
  {
    "task": "Design a function that checks if a string contains only digits and returns a boolean.",
    "code": "```applescript\non isDigitsOnly(inputString)\n\tset isDigits to true\n\trepeat with i from 1 to length of inputString\n\t\tset charCode to ASCII number of character i of inputString\n\t\tif charCode is less than 48 or charCode is greater than 57 then\n\t\t\tset isDigits to false\n\t\t\texit repeat\n\t\tend if\n\tend repeat\n\treturn isDigits\nend isDigitsOnly\n```"
  },
  {
    "task": "Implement a function that receives a list of tuples and returns a list of the first elements.",
    "code": "```applescript\non getFirstElements(tupleList)\n\tset firstElements to {}\n\trepeat with aTuple in tupleList\n\t\tset end of firstElements to item 1 of aTuple\n\tend repeat\n\treturn firstElements\nend getFirstElements\n```"
  },
  {
    "task": "Write a function that takes a year and returns the Chinese zodiac sign for that year.",
    "code": "```applescript\non calculateZodiac(year)\n\tset zodiacSigns to {\"Monkey\", \"Rooster\", \"Dog\", \"Pig\", \"Rat\", \"Ox\", \"Tiger\", \"Rabbit\", \"Dragon\", \"Snake\", \"Horse\", \"Goat\"}\n\tset index to (year mod 12) + 1\n\treturn item index of zodiacSigns\nend calculateZodiac\n```"
  },
  {
    "task": "Create a function that returns the number of trailing zeros in a factorial of a given number.",
    "code": "```applescript\non trailingZerosInFactorial(n)\n\tset count to 0\n\tset p to 5\n\trepeat while n div p > 0\n\t\tset count to count + (n div p)\n\t\tset p to p * 5\n\tend repeat\n\treturn count\nend trailingZerosInFactorial\n```"
  },
  {
    "task": "Develop a function that accepts a list and returns a new list with elements multiplied by their index.",
    "code": "```applescript\non multiplyByIndex(theList)\n\tset newList to {}\n\trepeat with i from 1 to count of theList\n\t\tset end of newList to item i of theList * (i - 1)\n\tend repeat\n\treturn newList\nend multiplyByIndex\n\n-- Example usage\nset myList to {1, 2, 3, 4}\nset result to multiplyByIndex(myList)\n```"
  },
  {
    "task": "Implement a function that receives a string and returns a dictionary of word lengths.",
    "code": "```applescript\non wordLengths(inputString)\n\tset wordList to words of inputString\n\tset wordDict to {}\n\trepeat with aWord in wordList\n\t\tset theLength to length of aWord\n\t\tset end of wordDict to {(aWord as string):theLength}\n\tend repeat\n\treturn wordDict\nend wordLengths\n```"
  },
  {
    "task": "Write a function that takes a list of integers and returns a list of numbers that are divisible by 3.",
    "code": "```applescript\non divisibleByThree(theList)\n\tset divisibleList to {}\n\trepeat with i from 1 to count theList\n\t\tset currentNumber to item i of theList\n\t\tif currentNumber mod 3 is 0 then\n\t\t\tset end of divisibleList to currentNumber\n\t\tend if\n\tend repeat\n\treturn divisibleList\nend divisibleByThree\n```"
  },
  {
    "task": "Create a function that returns the result of a quadratic equation given its coefficients.",
    "code": "```applescript\non quadraticResult(a, b, c, x)\n    return a * x * x + b * x + c\nend quadraticResult\n```"
  },
  {
    "task": "Design a function that checks if two lists have any elements in common and returns a boolean.",
    "code": "```applescript\non haveCommonElements(list1, list2)\n\trepeat with item1 in list1\n\t\tif item1 is in list2 then\n\t\t\treturn true\n\t\tend if\n\tend repeat\n\treturn false\nend haveCommonElements\n```"
  },
  {
    "task": "Implement a function that accepts a list and returns the sum of its elements using recursion.",
    "code": "```applescript\non sumList(lst)\n    if lst is {} then\n        return 0\n    else\n        return (item 1 of lst) + sumList(rest of lst)\n    end if\nend sumList\n\non rest(lst)\n    if (count of lst) is greater than 1 then\n        return items 2 thru -1 of lst\n    else\n        return {}\n    end if\nend rest\n```"
  },
  {
    "task": "Write a function that takes a list of numbers and returns the variance.",
    "code": "```applescript\non calculateVariance(numbersList)\n\tif (count of numbersList) is 0 then return missing value\n\tset sum to 0\n\tset sumOfSquares to 0\n\tset listCount to count of numbersList\n\t\n\trepeat with aNumber in numbersList\n\t\tset sum to sum + aNumber\n\t\tset sumOfSquares to sumOfSquares + aNumber * aNumber\n\tend repeat\n\t\n\tset mean to sum / listCount\n\tset meanOfSquares to sumOfSquares / listCount\n\t\n\treturn meanOfSquares - (mean * mean)\nend calculateVariance\n```"
  },
  {
    "task": "Create a function that returns the ASCII value of a given character.",
    "code": "```applescript\non asciiValue(character)\n    return (ASCII number of character)\nend asciiValue\n```"
  },
  {
    "task": "Develop a function that takes a number and returns the number of bits required for its binary representation.",
    "code": "```applescript\non bitsRequiredForBinaryRepresentation(n)\n\tset numBits to 0\n\trepeat while n > 0\n\t\tset n to n div 2\n\t\tset numBits to numBits + 1\n\tend repeat\n\treturn numBits\nend bitsRequiredForBinaryRepresentation\n```"
  }
]