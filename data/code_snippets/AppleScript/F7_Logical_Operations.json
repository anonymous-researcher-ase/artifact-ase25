[
  {
    "task": "Create a function that takes two boolean inputs and returns true if both are true using logical AND.",
    "code": "```applescript\non bothTrue(a, b)\n    if a and b then\n        return true\n    else\n        return false\n    end if\nend bothTrue\n```"
  },
  {
    "task": "Write a script to check if either of two given conditions are met using logical OR.",
    "code": "```applescript\nset condition1 to true\nset condition2 to false\n\nif condition1 or condition2 then\n    display dialog \"At least one condition is met.\"\nelse\n    display dialog \"Neither condition is met.\"\nend if\n```"
  },
  {
    "task": "Develop a program that negates a boolean variable using logical NOT.",
    "code": "```applescript\nset myBoolean to true\nset negatedBoolean to not myBoolean\n```"
  },
  {
    "task": "Implement a feature that determines if a number is within a specific range using logical operators.",
    "code": "```applescript\nset theNumber to 10\nset lowerBound to 5\nset upperBound to 15\n\nif theNumber \u2265 lowerBound and theNumber \u2264 upperBound then\n    display dialog \"The number is within the range.\"\nelse\n    display dialog \"The number is outside the range.\"\nend if\n```"
  },
  {
    "task": "Design a system that checks if a user has both read and write permissions using logical AND.",
    "code": "```applescript\nset hasReadPermission to true\nset hasWritePermission to true\n\nif hasReadPermission and hasWritePermission then\n    display dialog \"User has both read and write permissions.\"\nelse\n    display dialog \"User does not have both read and write permissions.\"\nend if\n```"
  },
  {
    "task": "Write a function to verify if a string is neither empty nor null using logical NOT.",
    "code": "```applescript\non isNonEmptyNonNullString(inputString)\n    return not (inputString is missing value or inputString is \"\")\nend isNonEmptyNonNullString\n```"
  },
  {
    "task": "Create a conditional statement that executes a block of code if either of two expressions are true using logical OR.",
    "code": "```applescript\nset condition1 to true\nset condition2 to false\n\nif condition1 or condition2 then\n    display dialog \"At least one condition is true.\"\nend if\n```"
  },
  {
    "task": "Build a program that inverts the truth value of a given condition using logical NOT.",
    "code": "```applescript\nset condition to true\nset invertedCondition to not condition\ndisplay dialog \"The inverted condition is: \" & invertedCondition\n```"
  },
  {
    "task": "Compose a function to return true if a list is not empty using logical NOT.",
    "code": "```applescript\non isListNotEmpty(theList)\n    return not (theList is equal to {})\nend isListNotEmpty\n```"
  },
  {
    "task": "Develop a filter that selects items from a collection only if they meet multiple criteria using logical AND.",
    "code": "```applescript\nset collection to {{\"name\": \"Item1\", \"price\": 10, \"category\": \"A\"}, {\"name\": \"Item2\", \"price\": 20, \"category\": \"B\"}, {\"name\": \"Item3\", \"price\": 15, \"category\": \"A\"}, {\"name\": \"Item4\", \"price\": 25, \"category\": \"A\"}}\n\nset filteredItems to {}\nrepeat with item in collection\n    set itemPrice to price of item\n    set itemCategory to category of item\n    if itemPrice > 10 and itemCategory is \"A\" then\n        copy item to end of filteredItems\n    end if\nend repeat\n\nreturn filteredItems\n```"
  },
  {
    "task": "Write a script that checks if a value is outside a given range using logical OR.",
    "code": "```applescript\nset value to 10\nset lowerBound to 5\nset upperBound to 15\n\nif value < lowerBound or value > upperBound then\n    display dialog \"The value is outside the range.\"\nelse\n    display dialog \"The value is within the range.\"\nend if\n```"
  },
  {
    "task": "Create a small program to toggle a boolean flag using logical NOT.",
    "code": "```applescript\nset booleanFlag to true\n\n-- Toggle the boolean flag\nset booleanFlag to not booleanFlag\n\n-- Display the result\ndisplay dialog \"Boolean flag is now: \" & booleanFlag\n```"
  },
  {
    "task": "Implement a feature that evaluates if a username is both unique and valid using logical AND.",
    "code": "```applescript\nset username to \"exampleUser\"\n\nset unique to true\nset valid to true\n\nif unique and valid then\n\tdisplay dialog \"The username is both unique and valid.\"\nelse\n\tdisplay dialog \"The username is not both unique and valid.\"\nend if\n```"
  },
  {
    "task": "Design a conditional to perform an action if neither of two flags are set using logical NOT.",
    "code": "```applescript\nset flag1 to false\nset flag2 to false\n\nif not (flag1 or flag2) then\n    -- Perform the action here\nend if\n```"
  },
  {
    "task": "Write a function that returns true if at least one of multiple boolean inputs is true using logical OR.",
    "code": "```applescript\non atLeastOneTrue(inputList)\n\trepeat with booleanValue in inputList\n\t\tif booleanValue then return true\n\tend repeat\n\treturn false\nend atLeastOneTrue\n```"
  },
  {
    "task": "Create a loop that continues executing as long as two conditions are both false using logical NOT and AND.",
    "code": "```applescript\nset condition1 to false\nset condition2 to false\n\nrepeat while not (condition1 and condition2)\n    -- Your code here\n    -- Simulate changing conditions for demonstration\n    set condition1 to (random number from 0 to 1) is 1\n    set condition2 to (random number from 0 to 1) is 1\nend repeat\n```"
  },
  {
    "task": "Develop a sequence that checks if a character is either a vowel or a consonant using logical OR.",
    "code": "```applescript\nset char to \"a\" -- Replace with the character you want to check\n\nif char is in {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"} then\n    display dialog char & \" is a vowel.\"\nelse if char is greater than or equal to \"a\" and char is less than or equal to \"z\" or char is greater than or equal to \"A\" and char is less than or equal to \"Z\" then\n    display dialog char & \" is a consonant.\"\nelse\n    display dialog char & \" is not a letter.\"\nend if\n```"
  },
  {
    "task": "Implement a validation that ensures a password is both of minimum length and contains numbers using logical AND.",
    "code": "```applescript\nset thePassword to \"pass1234\"\nset minLength to 8\nset containsNumber to false\n\nif (length of thePassword \u2265 minLength) and (thePassword contains \"0\" or thePassword contains \"1\" or thePassword contains \"2\" or thePassword contains \"3\" or thePassword contains \"4\" or thePassword contains \"5\" or thePassword contains \"6\" or thePassword contains \"7\" or thePassword contains \"8\" or thePassword contains \"9\") then\n    set containsNumber to true\nend if\n\nif containsNumber then\n    display dialog \"Password is valid.\"\nelse\n    display dialog \"Password is invalid.\"\nend if\n```"
  },
  {
    "task": "Compose a test to determine if a point is not within a circle using logical NOT.",
    "code": "```applescript\nset pointX to 5\nset pointY to 5\nset circleCenterX to 0\nset circleCenterY to 0\nset circleRadius to 3\n\nset distanceSquared to (pointX - circleCenterX) ^ 2 + (pointY - circleCenterY) ^ 2\nset radiusSquared to circleRadius ^ 2\n\nset isNotWithinCircle to not (distanceSquared \u2264 radiusSquared)\n\nreturn isNotWithinCircle\n```"
  },
  {
    "task": "Write a function to decide if a user is either an admin or an editor using logical OR.",
    "code": "```applescript\non isUserAdminOrEditor(userRole)\n    if userRole is \"admin\" or userRole is \"editor\" then\n        return true\n    else\n        return false\n    end if\nend isUserAdminOrEditor\n```"
  },
  {
    "task": "Create a conditional statement to trigger an alert if two sensors both detect motion using logical AND.",
    "code": "```applescript\nset sensor1MotionDetected to true\nset sensor2MotionDetected to true\n\nif sensor1MotionDetected and sensor2MotionDetected then\n    display alert \"Motion detected by both sensors\"\nend if\n```"
  },
  {
    "task": "Design a program to validate an email format and ensure it contains a domain using logical AND.",
    "code": "```applescript\nset email to \"example@example.com\"\n\nset atSymbolPresent to false\nset domainPresent to false\n\nif (email contains \"@\") then\n\tset atSymbolPresent to true\nend if\n\nset domain to text (offset of \"@\" in email) thru -1 of email\nif (domain contains \".\") then\n\tset domainPresent to true\nend if\n\nif atSymbolPresent and domainPresent then\n\tdisplay dialog \"Valid email format and domain present\"\nelse\n\tdisplay dialog \"Invalid email format or missing domain\"\nend if\n```"
  },
  {
    "task": "Develop a method to confirm that a transaction is neither fraudulent nor unauthorized using logical NOT.",
    "code": "```applescript\non confirmTransaction(isFraudulent, isUnauthorized)\n    if not (isFraudulent or isUnauthorized) then\n        return true\n    else\n        return false\n    end if\nend confirmTransaction\n```"
  },
  {
    "task": "Write a function that outputs true if a file is either missing or empty using logical OR.",
    "code": "```applescript\non isFileMissingOrEmpty(filePath)\n\ttell application \"System Events\"\n\t\tif not (exists disk item filePath) or (size of disk item filePath is 0) then\n\t\t\treturn true\n\t\telse\n\t\t\treturn false\n\t\tend if\n\tend tell\nend isFileMissingOrEmpty\n```"
  },
  {
    "task": "Implement a system to check if a student's grade is neither failing nor incomplete using logical NOT.",
    "code": "```applescript\nset studentGrade to \"B\" -- Example grade, can be changed\n\nif not (studentGrade is \"F\" or studentGrade is \"Incomplete\") then\n    display dialog \"The student's grade is satisfactory.\"\nelse\n    display dialog \"The student's grade is failing or incomplete.\"\nend if\n```"
  },
  {
    "task": "Create a script that executes a command if a file is both readable and writable using logical AND.",
    "code": "```applescript\nset filePath to \"/path/to/your/file.txt\"\n\ntell application \"System Events\"\n    if (exists file filePath) then\n        set fileRef to file filePath\n        if (readable of fileRef) and (writable of fileRef) then\n            -- Place the command to execute here\n            display dialog \"The file is both readable and writable.\"\n        else\n            display dialog \"The file is not both readable and writable.\"\n        end if\n    else\n        display dialog \"The file does not exist.\"\n    end if\nend tell\n```"
  },
  {
    "task": "Compose a function to determine if a temperature is not within a safe operating range using logical NOT.",
    "code": "```applescript\non isTemperatureUnsafe(temp)\n    set safeMin to 15\n    set safeMax to 25\n    return not (temp \u2265 safeMin and temp \u2264 safeMax)\nend isTemperatureUnsafe\n```"
  },
  {
    "task": "Design a check to see if a car is either out of fuel or needs maintenance using logical OR.",
    "code": "```applescript\nset fuelLevel to 0\nset needsMaintenance to true\n\nif (fuelLevel is 0) or needsMaintenance then\n    display dialog \"The car is either out of fuel or needs maintenance.\"\nelse\n    display dialog \"The car is ready to go.\"\nend if\n```"
  },
  {
    "task": "Develop a routine that ensures a network connection is both stable and secure using logical AND.",
    "code": "```applescript\nset isStable to false\nset isSecure to false\n\n-- Simulated function to check network stability\non checkNetworkStability()\n    -- Simulate checking network stability\n    set isStable to true\n    return isStable\nend checkNetworkStability\n\n-- Simulated function to check network security\non checkNetworkSecurity()\n    -- Simulate checking network security\n    set isSecure to true\n    return isSecure\nend checkNetworkSecurity\n\n-- Routine to check if network is both stable and secure\non isNetworkStableAndSecure()\n    set networkStable to checkNetworkStability()\n    set networkSecure to checkNetworkSecurity()\n    \n    if networkStable and networkSecure then\n        return true\n    else\n        return false\n    end if\nend isNetworkStableAndSecure\n\n-- Execute the routine\nset connectionStatus to isNetworkStableAndSecure()\n```"
  },
  {
    "task": "Write a conditional to print a message if a user is not logged in using logical NOT.",
    "code": "```applescript\nset userLoggedIn to false\n\nif not userLoggedIn then\n    display dialog \"User is not logged in\"\nend if\n```"
  },
  {
    "task": "Create a function that checks if a number is both even and positive using logical AND.",
    "code": "```applescript\non isEvenAndPositive(n)\n\tif (n mod 2 = 0) and (n > 0) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend if\nend isEvenAndPositive\n```"
  },
  {
    "task": "Implement a feature that turns off a device if neither of two switches are on using logical NOT.",
    "code": "```applescript\nset switch1On to false\nset switch2On to false\n\nif not (switch1On or switch2On) then\n    -- Turn off the device\n    display dialog \"Device is turned off.\"\nend if\n```"
  },
  {
    "task": "Compose a script to alert if a server is either down or running slow using logical OR.",
    "code": "```applescript\nset serverDown to true\nset serverSlow to false\n\nif serverDown or serverSlow then\n    display alert \"Server Alert\" message \"The server is either down or running slow.\"\nend if\n```"
  },
  {
    "task": "Design a validation method to ensure a form field is not empty using logical NOT.",
    "code": "```applescript\non validateField(inputField)\n\tif not (inputField is \"\") then\n\t\treturn true\n\telse\n\t\treturn false\n\tend if\nend validateField\n```"
  },
  {
    "task": "Write a program to determine if two strings are both non-empty using logical AND.",
    "code": "```applescript\nset string1 to \"Hello\"\nset string2 to \"World\"\n\nif (string1 is not \"\" and string2 is not \"\") then\n    display dialog \"Both strings are non-empty.\"\nelse\n    display dialog \"One or both strings are empty.\"\nend if\n```"
  },
  {
    "task": "Create a function that checks if a number is either prime or a perfect square using logical OR.",
    "code": "```applescript\non isPrimeOrPerfectSquare(n)\n\tif n \u2264 1 then\n\t\treturn false\n\tend if\n\t\n\t-- Check for prime\n\tset isPrime to true\n\tif n = 2 then\n\t\tset isPrime to true\n\telse\n\t\tif n mod 2 = 0 then\n\t\t\tset isPrime to false\n\t\telse\n\t\t\tset isPrime to true\n\t\t\tset limit to (n div 2) as integer\n\t\t\trepeat with i from 3 to limit by 2\n\t\t\t\tif n mod i = 0 then\n\t\t\t\t\tset isPrime to false\n\t\t\t\t\texit repeat\n\t\t\t\tend if\n\t\t\tend repeat\n\t\tend if\n\tend if\n\t\n\t-- Check for perfect square\n\tset isPerfectSquare to false\n\tset root to (n ^ 0.5) as integer\n\tif root * root = n then\n\t\tset isPerfectSquare to true\n\tend if\n\t\n\t-- Logical OR operation\n\treturn isPrime or isPerfectSquare\nend isPrimeOrPerfectSquare\n```"
  },
  {
    "task": "Develop a script to ensure a user is either an adult or has parental consent using logical OR.",
    "code": "```applescript\nset userIsAdult to false\nset hasParentalConsent to true\n\nif userIsAdult or hasParentalConsent then\n    display dialog \"Access granted.\"\nelse\n    display dialog \"Access denied.\"\nend if\n```"
  },
  {
    "task": "Implement a condition to execute a task if a variable is neither zero nor negative using logical NOT.",
    "code": "```applescript\nset myVariable to 5\n\nif not (myVariable \u2264 0) then\n    -- Execute the task\n    display dialog \"The variable is positive and non-zero.\"\nend if\n```"
  },
  {
    "task": "Compose a method to verify if a system is both up-to-date and functioning using logical AND.",
    "code": "```applescript\non isSystemUpToDateAndFunctioning(upToDate, functioning)\n    return upToDate and functioning\nend isSystemUpToDateAndFunctioning\n\n-- Example usage:\nset systemUpToDate to true\nset systemFunctioning to true\nset result to isSystemUpToDateAndFunctioning(systemUpToDate, systemFunctioning)\ndisplay dialog \"System is up-to-date and functioning: \" & result\n```"
  },
  {
    "task": "Write a function that returns true if a list contains neither duplicates nor null values using logical NOT.",
    "code": "```applescript\non containsNoDuplicatesOrNullValues(myList)\n\tif length of myList is 0 then\n\t\treturn true\n\tend if\n\t\n\tset uniqueItems to {}\n\trepeat with item in myList\n\t\tif item is missing value or item is in uniqueItems then\n\t\t\treturn false\n\t\tend if\n\t\tset end of uniqueItems to item\n\tend repeat\n\treturn true\nend containsNoDuplicatesOrNullValues\n```"
  },
  {
    "task": "Create a script to perform an action if a temperature is either too high or too low using logical OR.",
    "code": "```applescript\nset temperature to 75 -- Example temperature value\nset highThreshold to 80\nset lowThreshold to 60\n\nif temperature > highThreshold or temperature < lowThreshold then\n    display dialog \"Temperature is out of range!\" buttons {\"OK\"} default button \"OK\"\nend if\n```"
  },
  {
    "task": "Design a feature to toggle an option if a setting is not enabled using logical NOT.",
    "code": "```applescript\nset settingEnabled to false\nset optionToggled to false\n\nif not settingEnabled then\n    set optionToggled to not optionToggled\nend if\n```"
  },
  {
    "task": "Develop a check to ensure a username is both available and meets length requirements using logical AND.",
    "code": "```applescript\nset username to \"exampleUser\"\nset isAvailable to true\nset minLength to 5\nset maxLength to 15\n\nif isAvailable and ((length of username) \u2265 minLength and (length of username) \u2264 maxLength) then\n    display dialog \"Username is valid.\"\nelse\n    display dialog \"Username is invalid.\"\nend if\n```"
  },
  {
    "task": "Implement a function that returns true if a number is neither too large nor too small using logical NOT.",
    "code": "```applescript\non isNeitherTooLargeNorTooSmall(theNumber)\n\tif not (theNumber > 100 or theNumber < 10) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend if\nend isNeitherTooLargeNorTooSmall\n```"
  },
  {
    "task": "Write a conditional to print a warning if a disk is either full or nearly full using logical OR.",
    "code": "```applescript\nset diskSpace to 5 -- Example percentage of disk space remaining\n\nif diskSpace \u2264 10 or diskSpace = 0 then\n    display dialog \"Warning: Disk is either full or nearly full.\"\nend if\n```"
  },
  {
    "task": "Create a routine to validate that two dates are both within a valid range using logical AND.",
    "code": "```applescript\nset startDate to date \"January 1, 2023\"\nset endDate to date \"December 31, 2023\"\n\non validateDates(date1, date2)\n\tif (date1 \u2265 startDate and date1 \u2264 endDate) and (date2 \u2265 startDate and date2 \u2264 endDate) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend if\nend validateDates\n\n-- Example usage\nset date1 to date \"June 15, 2023\"\nset date2 to date \"November 20, 2023\"\nset result to validateDates(date1, date2)\n```"
  },
  {
    "task": "Compose a function to decide if a person is either a minor or a senior using logical OR.",
    "code": "```applescript\non isMinorOrSenior(age)\n    if age < 18 or age >= 65 then\n        return true\n    else\n        return false\n    end if\nend isMinorOrSenior\n```"
  },
  {
    "task": "Design a script to execute a task if a condition is not met using logical NOT.",
    "code": "```applescript\nset conditionMet to false\n\nif not conditionMet then\n    -- Execute the task here\n    display dialog \"The condition is not met, executing the task.\"\nend if\n```"
  },
  {
    "task": "Develop a program to verify if a process is neither running nor scheduled using logical NOT.",
    "code": "```applescript\nset processName to \"YourProcessName\"\nset isRunning to false\nset isScheduled to false\n\ntell application \"System Events\"\n    set isRunning to (exists (processes where name is processName))\nend tell\n\ntry\n    tell application \"System Events\"\n        set isScheduled to (exists (scheduled tasks where name is processName))\n    end tell\nend try\n\nif not (isRunning or isScheduled) then\n    display dialog \"The process is neither running nor scheduled.\"\nelse\n    display dialog \"The process is either running or scheduled.\"\nend if\n```"
  },
  {
    "task": "Implement a feature that confirms a file is both accessible and not locked using logical AND.",
    "code": "```applescript\nset filePath to \"/path/to/your/file.txt\"\n\ntell application \"System Events\"\n    set fileExists to exists file filePath\n    set fileLocked to locked of file filePath\nend tell\n\nif fileExists and not fileLocked then\n    display dialog \"The file is accessible and not locked.\"\nelse\n    display dialog \"The file is either not accessible or locked.\"\nend if\n```"
  },
  {
    "task": "Write a script to check if a device is either offline or in maintenance mode using logical OR.",
    "code": "```applescript\nset deviceOffline to true -- Example value, should be checked dynamically\nset inMaintenanceMode to false -- Example value, should be checked dynamically\n\nif deviceOffline or inMaintenanceMode then\n    display dialog \"The device is either offline or in maintenance mode.\"\nelse\n    display dialog \"The device is online and not in maintenance mode.\"\nend if\n```"
  },
  {
    "task": "Create a function to ensure a password is both complex and unique using logical AND.",
    "code": "```applescript\non isPasswordComplexAndUnique(password, existingPasswords)\n    set minLength to 8\n    set hasUppercase to false\n    set hasLowercase to false\n    set hasNumber to false\n    set hasSpecialChar to false\n    \n    if length of password < minLength then\n        return false\n    end if\n    \n    repeat with i from 1 to length of password\n        set char to character i of password\n        if char is in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" then\n            set hasUppercase to true\n        else if char is in \"abcdefghijklmnopqrstuvwxyz\" then\n            set hasLowercase to true\n        else if char is in \"0123456789\" then\n            set hasNumber to true\n        else if char is in \"!@#$%^&*()_+-=[]{}|;':\\\",.<>/?`~\" then\n            set hasSpecialChar to true\n        end if\n    end repeat\n    \n    set isComplex to hasUppercase and hasLowercase and hasNumber and hasSpecialChar\n    set isUnique to password is not in existingPasswords\n    \n    return isComplex and isUnique\nend isPasswordComplexAndUnique\n```"
  },
  {
    "task": "Design a validation that ensures a value is not negative using logical NOT.",
    "code": "```applescript\nset myValue to -5\n\nif not (myValue < 0) then\n    display dialog \"The value is not negative.\"\nelse\n    display dialog \"The value is negative.\"\nend if\n```"
  },
  {
    "task": "Develop a check to see if a user has either exceeded their quota or is nearing it using logical OR.",
    "code": "```applescript\nset userQuota to 100\nset currentUsage to 90\nset threshold to 95\n\nif currentUsage > userQuota or currentUsage \u2265 threshold then\n    display dialog \"Quota exceeded or nearing quota.\"\nelse\n    display dialog \"Usage is within limits.\"\nend if\n```"
  },
  {
    "task": "Implement a routine to confirm that a user is both authenticated and authorized using logical AND.",
    "code": "```applescript\non checkUserStatus(isAuthenticated, isAuthorized)\n    if isAuthenticated and isAuthorized then\n        return \"User is authenticated and authorized.\"\n    else\n        return \"User is not authenticated and/or authorized.\"\n    end if\nend checkUserStatus\n\n-- Example usage\nset userAuthenticated to true\nset userAuthorized to true\nset result to checkUserStatus(userAuthenticated, userAuthorized)\ndisplay dialog result\n```"
  },
  {
    "task": "Compose a function to determine if a light is either on or blinking using logical OR.",
    "code": "```applescript\non isLightOnOrBlinking(isOn, isBlinking)\n    return (isOn or isBlinking)\nend isLightOnOrBlinking\n```"
  },
  {
    "task": "Write a script that executes a command if a network connection is neither weak nor unstable using logical NOT.",
    "code": "```applescript\nset networkWeak to false\nset networkUnstable to false\n\nif not (networkWeak or networkUnstable) then\n    do shell script \"echo 'Network is stable and strong'\"\nend if\n```"
  },
  {
    "task": "Create a program to verify that a sensor is both calibrated and active using logical AND.",
    "code": "```applescript\nset sensorCalibrated to true\nset sensorActive to true\n\nif sensorCalibrated and sensorActive then\n    display dialog \"The sensor is both calibrated and active.\"\nelse\n    display dialog \"The sensor is not both calibrated and active.\"\nend if\n```"
  },
  {
    "task": "Design a feature to alert if a process is either overdue or incomplete using logical OR.",
    "code": "```applescript\nset processOverdue to false\nset processIncomplete to true\n\nif processOverdue or processIncomplete then\n    display alert \"Process Alert\" message \"The process is either overdue or incomplete.\"\nend if\n```"
  },
  {
    "task": "Develop a script to check if a person is neither a guest nor a temporary user using logical NOT.",
    "code": "```applescript\nset isGuest to false\nset isTemporaryUser to false\n\nif not (isGuest or isTemporaryUser) then\n    display dialog \"The person is neither a guest nor a temporary user.\"\nelse\n    display dialog \"The person is either a guest or a temporary user.\"\nend if\n```"
  },
  {
    "task": "Implement a function to toggle a light if a switch is not pressed using logical NOT.",
    "code": "```applescript\non toggleLight(switchPressed)\n    if not switchPressed then\n        return \"Light toggled\"\n    else\n        return \"No change\"\n    end if\nend toggleLight\n```"
  },
  {
    "task": "Write a conditional to trigger an event if a file is either corrupted or missing using logical OR.",
    "code": "```applescript\nset filePath to \"/path/to/file.txt\"\n\ntell application \"Finder\"\n    if not (exists file filePath) or (size of file filePath is 0) then\n        display dialog \"The file is either missing or corrupted.\"\n    end if\nend tell\n```"
  },
  {
    "task": "Create a routine that verifies if a vehicle is both insured and registered using logical AND.",
    "code": "```applescript\nproperty insured : true\nproperty registered : true\n\non isVehicleLegal()\n    if insured and registered then\n        return true\n    else\n        return false\n    end if\nend isVehicleLegal\n\nset vehicleStatus to isVehicleLegal()\ndisplay dialog \"Vehicle legal status: \" & vehicleStatus\n```"
  },
  {
    "task": "Compose a method to check if an account is either overdrawn or flagged using logical OR.",
    "code": "```applescript\non checkAccountStatus(overdrawn, flagged)\n    if overdrawn or flagged then\n        return true\n    else\n        return false\n    end if\nend checkAccountStatus\n```"
  },
  {
    "task": "Design a program to ensure an application is both installed and updated using logical AND.",
    "code": "```applescript\nset isInstalled to true\nset isUpdated to true\n\nif isInstalled and isUpdated then\n    display dialog \"The application is both installed and updated.\"\nelse\n    display dialog \"The application is either not installed or not updated.\"\nend if\n```"
  },
  {
    "task": "Develop a function that returns true if a number is neither divisible by 3 nor 5 using logical NOT.",
    "code": "```applescript\non isNeitherDivisibleBy3Nor5(aNumber)\n\ttell (aNumber mod 3 \u2260 0 and aNumber mod 5 \u2260 0) to return (not it)\nend isNeitherDivisibleBy3Nor5\n```"
  },
  {
    "task": "Implement a script that alerts if a device is either overheating or underperforming using logical OR.",
    "code": "```applescript\nset deviceOverheating to true\nset deviceUnderperforming to false\n\nif deviceOverheating or deviceUnderperforming then\n    display alert \"Warning: Device is either overheating or underperforming!\"\nend if\n```"
  },
  {
    "task": "Write a function to validate that a directory is both writable and not full using logical AND.",
    "code": "```applescript\non isWritableAndNotFull(directoryPath)\n    tell application \"Finder\"\n        set dirAlias to POSIX file directoryPath as alias\n        set isWritable to (get writable of dirAlias)\n        set freeSpace to (get free space of dirAlias)\n        set isNotFull to (freeSpace > 0)\n        return isWritable and isNotFull\n    end tell\nend isWritableAndNotFull\n```"
  },
  {
    "task": "Create a conditional statement that executes if a button is not clicked using logical NOT.",
    "code": "```applescript\nset buttonClicked to false\n\nif not buttonClicked then\n    display dialog \"The button has not been clicked.\"\nend if\n```"
  },
  {
    "task": "Design a check to ensure a transaction is both verified and complete using logical AND.",
    "code": "```applescript\nset transactionVerified to true\nset transactionComplete to true\n\nif transactionVerified and transactionComplete then\n    display dialog \"Transaction is verified and complete.\"\nelse\n    display dialog \"Transaction is not valid.\"\nend if\n```"
  },
  {
    "task": "Develop a routine to determine if a string is either uppercase or lowercase using logical OR.",
    "code": "```applescript\non isUppercaseOrLowercase(theString)\n    if theString is equal to (theString as uppercase) or theString is equal to (theString as lowercase) then\n        return true\n    else\n        return false\n    end if\nend isUppercaseOrLowercase\n\n-- Example usage\nset testString to \"HELLO\"\nset result to isUppercaseOrLowercase(testString)\ndisplay dialog \"Is the string either all uppercase or all lowercase? \" & result\n```"
  },
  {
    "task": "Implement a feature to execute a task if a variable is neither null nor undefined using logical NOT.",
    "code": "```applescript\nset myVariable to \"Some Value\"\n\nif (myVariable is not missing value) and (myVariable is not null) then\n    -- Execute the task\n    display dialog \"Executing the task as myVariable is valid.\"\nend if\n```"
  },
  {
    "task": "Compose a function to return true if a date is either today or tomorrow using logical OR.",
    "code": "```applescript\non isTodayOrTomorrow(aDate)\n\tset currentDate to current date\n\tset tomorrowDate to currentDate + (1 * days)\n\t\n\tset isToday to (aDate's day = currentDate's day and aDate's month = currentDate's month and aDate's year = currentDate's year)\n\tset isTomorrow to (aDate's day = tomorrowDate's day and aDate's month = tomorrowDate's month and aDate's year = tomorrowDate's year)\n\t\n\treturn (isToday or isTomorrow)\nend isTodayOrTomorrow\n```"
  },
  {
    "task": "Write a script to confirm that a system is both running and not in maintenance mode using logical AND.",
    "code": "```applescript\nset systemRunning to true\nset maintenanceMode to false\n\nif systemRunning and not maintenanceMode then\n    display dialog \"The system is running and not in maintenance mode.\"\nelse\n    display dialog \"The system is either not running or in maintenance mode.\"\nend if\n```"
  },
  {
    "task": "Create a program to verify if a text field is neither empty nor exceeds character limit using logical NOT.",
    "code": "```applescript\nset textField to \"Hello, World!\"\nset charLimit to 50\n\nset isValid to not ((textField is \"\") or (length of textField > charLimit))\n\nreturn isValid\n```"
  },
  {
    "task": "Design a feature that checks if a user has either admin privileges or editor rights using logical OR.",
    "code": "```applescript\nset userHasAdminPrivileges to false\nset userHasEditorRights to true\n\nset userHasAccess to userHasAdminPrivileges or userHasEditorRights\n\nif userHasAccess then\n    display dialog \"User has access.\"\nelse\n    display dialog \"User does not have access.\"\nend if\n```"
  },
  {
    "task": "Develop a script to ensure a file is both present and not empty using logical AND.",
    "code": "```applescript\nset filePath to \"/path/to/your/file.txt\"\n\n-- Check if the file exists\nset fileExists to false\ntry\n    tell application \"System Events\"\n        set fileExists to exists file filePath\n    end tell\non error\n    set fileExists to false\nend try\n\n-- Check if the file is not empty\nset fileNotEmpty to false\nif fileExists then\n    set fileSize to (do shell script \"stat -f%z \" & quoted form of filePath) as integer\n    if fileSize > 0 then\n        set fileNotEmpty to true\n    end if\nend if\n\n-- Logical AND to ensure file is present and not empty\nif fileExists and fileNotEmpty then\n    display dialog \"The file is present and not empty.\"\nelse\n    display dialog \"The file is either absent or empty.\"\nend if\n```"
  },
  {
    "task": "Implement a condition to execute a command if a setting is not active using logical NOT.",
    "code": "```applescript\nset settingActive to false\n\nif not settingActive then\n    display dialog \"The setting is not active.\"\nend if\n```"
  },
  {
    "task": "Compose a method to decide if a person is either eligible or exempt using logical OR.",
    "code": "```applescript\non decideEligibilityOrExemption(age, hasExemption)\n\tif age is greater than or equal to 18 or hasExemption is true then\n\t\treturn \"Eligible or Exempt\"\n\telse\n\t\treturn \"Not Eligible\"\n\tend if\nend decideEligibilityOrExemption\n```"
  },
  {
    "task": "Write a function that returns true if a number is both greater than zero and less than ten using logical AND.",
    "code": "```applescript\non isNumberBetweenZeroAndTen(num)\n    if num > 0 and num < 10 then\n        return true\n    else\n        return false\n    end if\nend isNumberBetweenZeroAndTen\n```"
  },
  {
    "task": "Create a loop to continue as long as a condition is either true or false using logical OR.",
    "code": "```applescript\nset continueLoop to true\nrepeat while (continueLoop or false)\n    -- Your loop code here\n    set continueLoop to false -- Or some logic to potentially change the condition\nend repeat\n```"
  },
  {
    "task": "Design a program to verify if an account is neither inactive nor suspended using logical NOT.",
    "code": "```applescript\nset accountInactive to false\nset accountSuspended to false\n\nif not (accountInactive or accountSuspended) then\n    display dialog \"The account is active and not suspended.\"\nelse\n    display dialog \"The account is either inactive or suspended.\"\nend if\n```"
  },
  {
    "task": "Develop a feature to confirm that a document is both signed and verified using logical AND.",
    "code": "```applescript\nset isSigned to true\nset isVerified to true\n\nif isSigned and isVerified then\n    display dialog \"The document is both signed and verified.\"\nelse\n    display dialog \"The document is not both signed and verified.\"\nend if\n```"
  },
  {
    "task": "Implement a script to alert if a network is either congested or down using logical OR.",
    "code": "```applescript\nset networkCongested to false\nset networkDown to true\n\nif networkCongested or networkDown then\n    display alert \"Network Alert\" message \"The network is either congested or down.\"\nend if\n```"
  },
  {
    "task": "Write a function to ensure a list is both sorted and unique using logical AND.",
    "code": "```applescript\non ensureSortedUnique(inputList)\n\tset sortedList to sortList(inputList)\n\tset uniqueList to removeDuplicates(sortedList)\n\treturn uniqueList\nend ensureSortedUnique\n\non sortList(aList)\n\tset sortedList to {}\n\trepeat with anItem in aList\n\t\tset inserted to false\n\t\trepeat with i from 1 to count of sortedList\n\t\t\tif anItem is less than item i of sortedList then\n\t\t\t\tset sortedList to items 1 thru (i - 1) of sortedList & {anItem} & items i thru -1 of sortedList\n\t\t\t\tset inserted to true\n\t\t\t\texit repeat\n\t\t\tend if\n\t\tend repeat\n\t\tif not inserted then\n\t\t\tset end of sortedList to anItem\n\t\tend if\n\tend repeat\n\treturn sortedList\nend sortList\n\non removeDuplicates(aList)\n\tset uniqueList to {}\n\trepeat with anItem in aList\n\t\tif not (anItem is in uniqueList) then\n\t\t\tset end of uniqueList to anItem\n\t\tend if\n\tend repeat\n\treturn uniqueList\nend removeDuplicates\n```"
  },
  {
    "task": "Create a conditional statement to execute if a task is not completed using logical NOT.",
    "code": "```applescript\nset taskCompleted to false\n\nif not taskCompleted then\n    -- Execute your code here\n    display dialog \"The task is not completed.\"\nend if\n```"
  },
  {
    "task": "Design a check to determine if a component is either faulty or missing using logical OR.",
    "code": "```applescript\nset componentFaulty to false\nset componentMissing to true\n\nif componentFaulty or componentMissing then\n    display dialog \"The component is either faulty or missing.\"\nelse\n    display dialog \"The component is present and not faulty.\"\nend if\n```"
  },
  {
    "task": "Develop a routine to verify if a user is both online and available using logical AND.",
    "code": "```applescript\nset userOnline to true\nset userAvailable to true\n\nif userOnline and userAvailable then\n    display dialog \"The user is online and available.\"\nelse\n    display dialog \"The user is not both online and available.\"\nend if\n```"
  },
  {
    "task": "Implement a feature to toggle an alert if a condition is not satisfied using logical NOT.",
    "code": "```applescript\nset conditionMet to false\n\nif not conditionMet then\n    display alert \"Condition not satisfied!\"\nend if\n```"
  },
  {
    "task": "Compose a function to return true if a transaction is either pending or failed using logical OR.",
    "code": "```applescript\non transactionStatus(status)\n    if (status is \"pending\" or status is \"failed\") then\n        return true\n    else\n        return false\n    end if\nend transactionStatus\n```"
  },
  {
    "task": "Write a script to ensure a configuration is both correct and active using logical AND.",
    "code": "```applescript\nset configCorrect to true\nset configActive to true\n\nif configCorrect and configActive then\n    display dialog \"Configuration is both correct and active.\"\nelse\n    display dialog \"Configuration is not correct or not active.\"\nend if\n```"
  }
]