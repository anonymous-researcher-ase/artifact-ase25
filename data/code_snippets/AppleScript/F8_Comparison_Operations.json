[
  {
    "task": "Write a function that checks if two strings are equal, ignoring case sensitivity.",
    "code": "```applescript\non stringsEqualIgnoringCase(string1, string2)\n    if (string1 as text) is equal to (string2 as text) then\n        return true\n    else\n        return false\n    end if\nend stringsEqualIgnoringCase\n```"
  },
  {
    "task": "Create a program that determines if a number is greater than 10.",
    "code": "```applescript\nset myNumber to 15\nif myNumber > 10 then\n    display dialog \"The number is greater than 10.\"\nelse\n    display dialog \"The number is not greater than 10.\"\nend if\n```"
  },
  {
    "task": "Implement a feature that compares the current date to a given date and returns if it is in the future.",
    "code": "```applescript\nset givenDate to date \"January 1, 2025\"\nset currentDate to current date\n\nif currentDate < givenDate then\n    return \"The current date is in the past compared to the given date.\"\nelse if currentDate = givenDate then\n    return \"The current date is the same as the given date.\"\nelse\n    return \"The current date is in the future compared to the given date.\"\nend if\n```"
  },
  {
    "task": "Design a system that checks if a user's age is less than 18 and restricts access if true.",
    "code": "```applescript\nset userAge to 16 -- Example age value, replace with actual input\n\nif userAge < 18 then\n    display dialog \"Access Restricted\"\nelse\n    display dialog \"Access Granted\"\nend if\n```"
  },
  {
    "task": "Build an algorithm that finds the maximum of three given integers.",
    "code": "```applescript\nset a to 10\nset b to 15\nset c to 5\n\nif a > b and a > c then\n    set max to a\nelse if b > a and b > c then\n    set max to b\nelse\n    set max to c\nend if\n\nreturn max\n```"
  },
  {
    "task": "Write a function that verifies if two arrays contain the same elements in the same order.",
    "code": "```applescript\non arraysEqual(array1, array2)\n    if (count of array1) is not equal to (count of array2) then\n        return false\n    end if\n    repeat with i from 1 to count of array1\n        if item i of array1 is not equal to item i of array2 then\n            return false\n        end if\n    end repeat\n    return true\nend arraysEqual\n```"
  },
  {
    "task": "Create a script that checks if a product's price is within a specified range.",
    "code": "```applescript\nset productPrice to 150\nset lowerBound to 100\nset upperBound to 200\n\nif productPrice \u2265 lowerBound and productPrice \u2264 upperBound then\n    display dialog \"The product's price is within the specified range.\"\nelse\n    display dialog \"The product's price is outside the specified range.\"\nend if\n```"
  },
  {
    "task": "Develop a tool that compares two versions of a software application and determines which is newer.",
    "code": "```applescript\nset version1 to \"1.2.3\"\nset version2 to \"1.2.4\"\n\non compareVersions(v1, v2)\n\ttell application \"System Events\"\n\t\tset list1 to my splitVersion(v1)\n\t\tset list2 to my splitVersion(v2)\n\t\tset result to my compareLists(list1, list2)\n\t\tif result is 1 then\n\t\t\treturn v1 & \" is newer\"\n\t\telse if result is -1 then\n\t\t\treturn v2 & \" is newer\"\n\t\telse\n\t\t\treturn \"Both versions are the same\"\n\t\tend if\n\tend tell\nend compareVersions\n\non splitVersion(version)\n\ttell application \"System Events\"\n\t\treturn (every text item of version) as list\n\tend tell\nend splitVersion\n\non compareLists(list1, list2)\n\ttell application \"System Events\"\n\t\trepeat with i from 1 to (count list1)\n\t\t\tset num1 to item i of list1 as integer\n\t\t\tset num2 to item i of list2 as integer\n\t\t\tif num1 > num2 then\n\t\t\t\treturn 1\n\t\t\telse if num1 < num2 then\n\t\t\t\treturn -1\n\t\t\tend if\n\t\tend repeat\n\t\treturn 0\n\tend tell\nend compareLists\n\ndisplay dialog compareVersions(version1, version2)\n```"
  },
  {
    "task": "Implement a test to see if a given year is a leap year.",
    "code": "```applescript\nset givenYear to 2024\n\nif (givenYear mod 4 is 0 and givenYear mod 100 is not 0) or (givenYear mod 400 is 0) then\n    display dialog (givenYear as string) & \" is a leap year.\"\nelse\n    display dialog (givenYear as string) & \" is not a leap year.\"\nend if\n```"
  },
  {
    "task": "Design a feature that tells if a student\u2019s grade is passing or failing based on a threshold.",
    "code": "```applescript\nset grade to 75\nset threshold to 60\n\nif grade \u2265 threshold then\n    display dialog \"Passing\"\nelse\n    display dialog \"Failing\"\nend if\n```"
  },
  {
    "task": "Write a function to compare two file sizes and return the larger one.",
    "code": "```applescript\non compareFileSizes(file1, file2)\n\ttell application \"Finder\"\n\t\tset size1 to size of (file1 as alias)\n\t\tset size2 to size of (file2 as alias)\n\tend tell\n\t\n\tif size1 > size2 then\n\t\treturn file1\n\telse if size2 > size1 then\n\t\treturn file2\n\telse\n\t\treturn \"Files are of equal size.\"\n\tend if\nend compareFileSizes\n```"
  },
  {
    "task": "Build a program that checks if the temperature is below freezing point.",
    "code": "```applescript\nset temperature to 30 -- Example temperature value\nset freezingPoint to 32\n\nif temperature < freezingPoint then\n    display dialog \"The temperature is below freezing point.\"\nelse\n    display dialog \"The temperature is above freezing point.\"\nend if\n```"
  },
  {
    "task": "Create a logic that determines if a number is within the Fibonacci sequence.",
    "code": "```applescript\non isFibonacciNumber(n)\n\tset fib1 to 0\n\tset fib2 to 1\n\tif n = fib1 or n = fib2 then\n\t\treturn true\n\tend if\n\tset fibNext to fib1 + fib2\n\trepeat while fibNext \u2264 n\n\t\tif fibNext = n then\n\t\t\treturn true\n\t\tend if\n\t\tset fib1 to fib2\n\t\tset fib2 to fibNext\n\t\tset fibNext to fib1 + fib2\n\tend repeat\n\treturn false\nend isFibonacciNumber\n\n-- Example usage:\nset numberToCheck to 21\nset result to isFibonacciNumber(numberToCheck)\ndisplay dialog \"Is \" & numberToCheck & \" a Fibonacci number? \" & result\n```"
  },
  {
    "task": "Develop a function that checks if a given word is a palindrome.",
    "code": "```applescript\non isPalindrome(word)\n\tset reversedWord to (reverse of characters of word) as string\n\tif word is equal to reversedWord then\n\t\treturn true\n\telse\n\t\treturn false\n\tend if\nend isPalindrome\n```"
  },
  {
    "task": "Write a script to see if a password meets a minimum length requirement.",
    "code": "```applescript\nset password to \"examplePassword\"\nset minLength to 8\n\nif length of password \u2265 minLength then\n    display dialog \"Password meets the minimum length requirement.\"\nelse\n    display dialog \"Password does not meet the minimum length requirement.\"\nend if\n```"
  },
  {
    "task": "Implement a system that decides if a point is inside a circle based on its coordinates.",
    "code": "```applescript\non isPointInsideCircle(x, y, circleX, circleY, radius)\n    set distanceSquared to (x - circleX) ^ 2 + (y - circleY) ^ 2\n    set radiusSquared to radius ^ 2\n    if distanceSquared \u2264 radiusSquared then\n        return true\n    else\n        return false\n    end if\nend isPointInsideCircle\n\n-- Example usage\nset pointInside to isPointInsideCircle(1, 1, 0, 0, 5)\ndisplay dialog \"Is the point inside the circle? \" & pointInside\n```"
  },
  {
    "task": "Design a program that checks if a shopping cart total exceeds a certain budget.",
    "code": "```applescript\nset shoppingCartTotal to 150\nset budget to 100\n\nif shoppingCartTotal > budget then\n    display dialog \"The shopping cart total exceeds the budget.\"\nelse\n    display dialog \"The shopping cart total is within the budget.\"\nend if\n```"
  },
  {
    "task": "Create a function that compares two players' scores and returns the winner.",
    "code": "```applescript\non determineWinner(player1Score, player2Score)\n    if player1Score > player2Score then\n        return \"Player 1 is the winner\"\n    else if player2Score > player1Score then\n        return \"Player 2 is the winner\"\n    else\n        return \"It's a tie\"\n    end if\nend determineWinner\n```"
  },
  {
    "task": "Write a program to determine if one string is a substring of another.",
    "code": "```applescript\nset string1 to \"example\"\nset string2 to \"ample\"\n\nif string1 contains string2 then\n    display dialog \"String2 is a substring of String1\"\nelse\n    display dialog \"String2 is not a substring of String1\"\nend if\n```"
  },
  {
    "task": "Build a utility that checks if a number is a prime number.",
    "code": "```applescript\non isPrime(n)\n\tif n \u2264 1 then\n\t\treturn false\n\telse if n \u2264 3 then\n\t\treturn true\n\telse if n mod 2 = 0 or n mod 3 = 0 then\n\t\treturn false\n\tend if\n\t\n\tset i to 5\n\trepeat while i * i \u2264 n\n\t\tif n mod i = 0 or n mod (i + 2) = 0 then\n\t\t\treturn false\n\t\tend if\n\t\tset i to i + 6\n\tend repeat\n\t\n\treturn true\nend isPrime\n\n-- Example usage\nset testNumber to 17\nif isPrime(testNumber) then\n\tdisplay dialog (testNumber as string) & \" is a prime number.\"\nelse\n\tdisplay dialog (testNumber as string) & \" is not a prime number.\"\nend if\n```"
  },
  {
    "task": "Write a function that checks if a given number is a perfect square.",
    "code": "```applescript\non isPerfectSquare(n)\n\tset sqrtN to n ^ 0.5\n\tif sqrtN is equal to (round sqrtN rounding to nearest) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend if\nend isPerfectSquare\n```"
  },
  {
    "task": "Create a system that determines if a person is eligible for a senior citizen discount based on their age.",
    "code": "```applescript\nset age to 65 -- Example age, this can be replaced with any age input\n\nif age \u2265 65 then\n    set discountEligibility to \"Eligible for senior citizen discount\"\nelse\n    set discountEligibility to \"Not eligible for senior citizen discount\"\nend if\n\nreturn discountEligibility\n```"
  },
  {
    "task": "Develop a feature to check if a date falls on a weekend.",
    "code": "```applescript\nset inputDate to current date -- replace with the desired date\n\nset dayOfWeek to weekday of inputDate\n\nif dayOfWeek is Saturday or dayOfWeek is Sunday then\n    set isWeekend to true\nelse\n    set isWeekend to false\nend if\n\nreturn isWeekend\n```"
  },
  {
    "task": "Design a program that sees if a given email address is in the correct format.",
    "code": "```applescript\nset emailAddress to \"example@example.com\"\n\nif emailAddress contains \"@\" and emailAddress contains \".\" then\n\tset atIndex to offset of \"@\" in emailAddress\n\tset dotIndex to offset of \".\" in emailAddress\n\tif atIndex < dotIndex and atIndex > 1 and dotIndex < (length of emailAddress) - 1 then\n\t\tdisplay dialog \"The email address is in the correct format.\"\n\telse\n\t\tdisplay dialog \"The email address is not in the correct format.\"\n\tend if\nelse\n\tdisplay dialog \"The email address is not in the correct format.\"\nend if\n```"
  },
  {
    "task": "Implement a test to check if a rectangle's area is larger than a triangle's area.",
    "code": "```applescript\n-- Define the dimensions of the rectangle\nset rectangleWidth to 10\nset rectangleHeight to 5\n\n-- Calculate the area of the rectangle\nset rectangleArea to rectangleWidth * rectangleHeight\n\n-- Define the dimensions of the triangle\nset triangleBase to 8\nset triangleHeight to 6\n\n-- Calculate the area of the triangle\nset triangleArea to (triangleBase * triangleHeight) / 2\n\n-- Perform the comparison\nif rectangleArea > triangleArea then\n    display dialog \"The rectangle's area is larger than the triangle's area.\"\nelse\n    display dialog \"The rectangle's area is not larger than the triangle's area.\"\nend if\n```"
  },
  {
    "task": "Write a function that verifies if two rectangles overlap each other.",
    "code": "```applescript\non rectanglesOverlap(rect1, rect2)\n    set {x1, y1, w1, h1} to rect1\n    set {x2, y2, w2, h2} to rect2\n    \n    if x1 + w1 \u2264 x2 or x2 + w2 \u2264 x1 then\n        return false\n    end if\n    \n    if y1 + h1 \u2264 y2 or y2 + h2 \u2264 y1 then\n        return false\n    end if\n    \n    return true\nend rectanglesOverlap\n```"
  },
  {
    "task": "Create a script to compare two strings lexicographically.",
    "code": "```applescript\nset string1 to \"apple\"\nset string2 to \"banana\"\n\nif string1 < string2 then\n    display dialog \"String 1 comes before String 2.\"\nelse if string1 > string2 then\n    display dialog \"String 1 comes after String 2.\"\nelse\n    display dialog \"String 1 is equal to String 2.\"\nend if\n```"
  },
  {
    "task": "Build a program that checks if a list of numbers is in ascending order.",
    "code": "```applescript\nset numList to {1, 3, 5, 7, 9}\nset isAscending to true\n\nrepeat with i from 1 to (count numList) - 1\n    if item i of numList > item (i + 1) of numList then\n        set isAscending to false\n        exit repeat\n    end if\nend repeat\n\nreturn isAscending\n```"
  },
  {
    "task": "Design a system to compare the heights of two buildings.",
    "code": "```applescript\nset heightBuilding1 to 150\nset heightBuilding2 to 200\n\nif heightBuilding1 > heightBuilding2 then\n    display dialog \"Building 1 is taller than Building 2.\"\nelse if heightBuilding1 < heightBuilding2 then\n    display dialog \"Building 2 is taller than Building 1.\"\nelse\n    display dialog \"Both buildings are of equal height.\"\nend if\n```"
  },
  {
    "task": "Write a feature that determines if a given time is before noon.",
    "code": "```applescript\nset currentTime to (current date)\nset hours to hours of currentTime\n\nif hours < 12 then\n    display dialog \"The time is before noon.\"\nelse\n    display dialog \"The time is not before noon.\"\nend if\n```"
  },
  {
    "task": "Implement a function to check if a given number is a power of two.",
    "code": "```applescript\non isPowerOfTwo(n)\n    if n is less than 1 then\n        return false\n    end if\n    repeat until n is 1\n        if n mod 2 is not 0 then\n            return false\n        end if\n        set n to n div 2\n    end repeat\n    return true\nend isPowerOfTwo\n```"
  },
  {
    "task": "Create a program that determines if a word is longer than another word.",
    "code": "```applescript\nset word1 to \"Apple\"\nset word2 to \"Banana\"\n\nif (count characters of word1) > (count characters of word2) then\n    display dialog word1 & \" is longer than \" & word2\nelse\n    display dialog word2 & \" is longer than \" & word1\nend if\n```"
  },
  {
    "task": "Develop a function to compare the lengths of two lists and return the longer one.",
    "code": "```applescript\non compareListsLength(list1, list2)\n    if (count of list1) > (count of list2) then\n        return list1\n    else\n        return list2\n    end if\nend compareListsLength\n```"
  },
  {
    "task": "Write a script to see if a user's input matches a pre-defined secret code.",
    "code": "```applescript\nset secretCode to \"1234\"\ndisplay dialog \"Enter the secret code:\" default answer \"\"\nset userInput to text returned of result\n\nif userInput is equal to secretCode then\n    display dialog \"Access granted.\"\nelse\n    display dialog \"Access denied.\"\nend if\n```"
  },
  {
    "task": "Build a utility that checks if a given year is in the 21st century.",
    "code": "```applescript\non is21stCentury(year)\n\tif year \u2265 2001 and year \u2264 2100 then\n\t\treturn true\n\telse\n\t\treturn false\n\tend if\nend is21stCentury\n\n-- Example usage:\nset result to is21stCentury(2023)\ndisplay dialog \"Is the year 2023 in the 21st century? \" & result\n```"
  },
  {
    "task": "Create a logic that determines if a book's publication year is after 2000.",
    "code": "```applescript\nset publicationYear to 2005\nset isAfter2000 to false\n\nif publicationYear > 2000 then\n    set isAfter2000 to true\nend if\n\nisAfter2000\n```"
  },
  {
    "task": "Design a feature to see if a number is divisible by both 3 and 5.",
    "code": "```applescript\nset theNumber to 15\n\nif (theNumber mod 3 = 0) and (theNumber mod 5 = 0) then\n    display dialog \"The number is divisible by both 3 and 5.\"\nelse\n    display dialog \"The number is not divisible by both 3 and 5.\"\nend if\n```"
  },
  {
    "task": "Implement a system that checks if a student's GPA is above a certain threshold.",
    "code": "```applescript\nset gpaThreshold to 3.0\nset studentGPA to 3.5\n\nif studentGPA > gpaThreshold then\n    display dialog \"Student's GPA is above the threshold.\"\nelse\n    display dialog \"Student's GPA is not above the threshold.\"\nend if\n```"
  },
  {
    "task": "Write a function to determine if a given angle is acute, right, or obtuse.",
    "code": "```applescript\non determineAngleType(angle)\n    if angle > 0 and angle < 90 then\n        return \"acute\"\n    else if angle is 90 then\n        return \"right\"\n    else if angle > 90 and angle < 180 then\n        return \"obtuse\"\n    else\n        return \"invalid angle\"\n    end if\nend determineAngleType\n```"
  },
  {
    "task": "Develop a program that compares the lengths of two strings and returns the shorter one.",
    "code": "```applescript\nset string1 to \"Hello\"\nset string2 to \"World!\"\n\nif (length of string1) < (length of string2) then\n\treturn string1\nelse\n\treturn string2\nend if\n```"
  },
  {
    "task": "Create a script to verify if a username is unique within a list.",
    "code": "```applescript\nset usernameList to {\"Alice\", \"Bob\", \"Charlie\", \"Diana\"}\nset usernameToCheck to \"Eve\"\n\nif usernameList contains usernameToCheck then\n    display dialog \"The username is not unique.\"\nelse\n    display dialog \"The username is unique.\"\nend if\n```"
  },
  {
    "task": "Build a tool that checks if a job applicant meets all the listed qualifications.",
    "code": "```applescript\nset applicantQualifications to {\"Bachelor's degree\", \"3 years experience\", \"JavaScript knowledge\"}\nset requiredQualifications to {\"Bachelor's degree\", \"3 years experience\", \"JavaScript knowledge\", \"Team player\"}\n\non checkQualifications(applicantQualifications, requiredQualifications)\n\tset meetsAllQualifications to true\n\trepeat with qualification in requiredQualifications\n\t\tif qualification is not in applicantQualifications then\n\t\t\tset meetsAllQualifications to false\n\t\t\texit repeat\n\t\tend if\n\tend repeat\n\treturn meetsAllQualifications\nend checkQualifications\n\nset result to checkQualifications(applicantQualifications, requiredQualifications)\nif result is true then\n\tdisplay dialog \"Applicant meets all qualifications.\"\nelse\n\tdisplay dialog \"Applicant does not meet all qualifications.\"\nend if\n```"
  },
  {
    "task": "Write a feature to see if a vehicle's speed exceeds the speed limit.",
    "code": "```applescript\nset vehicleSpeed to 75\nset speedLimit to 65\n\nif vehicleSpeed > speedLimit then\n    display dialog \"The vehicle's speed exceeds the speed limit.\"\nelse\n    display dialog \"The vehicle's speed is within the speed limit.\"\nend if\n```"
  },
  {
    "task": "Design a system that determines whether a given point is above or below the x-axis.",
    "code": "```applescript\nset y to 5 -- Replace with the y-coordinate of the point\n\nif y > 0 then\n    display dialog \"The point is above the x-axis.\"\nelse if y < 0 then\n    display dialog \"The point is below the x-axis.\"\nelse\n    display dialog \"The point is on the x-axis.\"\nend if\n```"
  },
  {
    "task": "Create a function that checks if a given word appears in a sentence.",
    "code": "```applescript\non containsWord(sentence, word)\n    set sentenceWords to words of sentence\n    if word is in sentenceWords then\n        return true\n    else\n        return false\n    end if\nend containsWord\n```"
  },
  {
    "task": "Implement a program that identifies whether a given number is negative or positive.",
    "code": "```applescript\nset theNumber to 5 -- Replace 5 with any number to test\n\nif theNumber > 0 then\n    display dialog \"The number is positive.\"\nelse if theNumber < 0 then\n    display dialog \"The number is negative.\"\nelse\n    display dialog \"The number is zero.\"\nend if\n```"
  },
  {
    "task": "Write a script to see if the sum of two numbers is greater than 100.",
    "code": "```applescript\nset number1 to 45\nset number2 to 60\nset sumOfNumbers to number1 + number2\n\nif sumOfNumbers > 100 then\n    display dialog \"The sum is greater than 100.\"\nelse\n    display dialog \"The sum is not greater than 100.\"\nend if\n```"
  },
  {
    "task": "Build a utility that checks if a file exists in a specified directory.",
    "code": "```applescript\nset filePath to \"/path/to/directory/filename.txt\"\n\ntell application \"Finder\"\n    if exists file filePath then\n        display dialog \"The file exists.\"\n    else\n        display dialog \"The file does not exist.\"\n    end if\nend tell\n```"
  },
  {
    "task": "Develop a system to compare the weights of two different objects.",
    "code": "```applescript\nset weight1 to 50\nset weight2 to 75\n\nif weight1 > weight2 then\n    set result to \"Object 1 is heavier than Object 2.\"\nelse if weight1 < weight2 then\n    set result to \"Object 2 is heavier than Object 1.\"\nelse\n    set result to \"Both objects have the same weight.\"\nend if\n\nreturn result\n```"
  },
  {
    "task": "Create a logic to determine if a number falls within a defined range.",
    "code": "```applescript\nset number to 15\nset lowerBound to 10\nset upperBound to 20\n\nif number \u2265 lowerBound and number \u2264 upperBound then\n    display dialog \"The number is within the range.\"\nelse\n    display dialog \"The number is outside the range.\"\nend if\n```"
  },
  {
    "task": "Design a program that checks if an employee worked overtime based on hours worked.",
    "code": "```applescript\nset hoursWorked to 45\nset regularHours to 40\n\nif hoursWorked > regularHours then\n    display dialog \"The employee worked overtime.\"\nelse\n    display dialog \"The employee did not work overtime.\"\nend if\n```"
  },
  {
    "task": "Write a function to compare two dates and determine which is earlier.",
    "code": "```applescript\non compareDates(date1, date2)\n\tif date1 comes before date2 then\n\t\treturn \"Date1 is earlier\"\n\telse if date1 comes after date2 then\n\t\treturn \"Date2 is earlier\"\n\telse\n\t\treturn \"Both dates are the same\"\n\tend if\nend compareDates\n\n-- Example usage\nset date1 to date \"Monday, October 30, 2023 12:00:00 AM\"\nset date2 to date \"Tuesday, October 31, 2023 12:00:00 AM\"\ncompareDates(date1, date2)\n```"
  },
  {
    "task": "Create a script that verifies if a given word starts with a vowel.",
    "code": "```applescript\nset theWord to \"example\" -- Replace with any word to check\nset vowels to {\"a\", \"e\", \"i\", \"o\", \"u\"}\n\nset firstChar to character 1 of theWord\nset firstChar to firstChar as lowercase\n\nif firstChar is in vowels then\n    display dialog \"The word starts with a vowel.\"\nelse\n    display dialog \"The word does not start with a vowel.\"\nend if\n```"
  },
  {
    "task": "Build a utility that checks if a number is even or odd.",
    "code": "```applescript\nset inputNumber to 10 -- replace with any number you want to check\n\nif (inputNumber mod 2) is equal to 0 then\n    display dialog \"The number is even.\"\nelse\n    display dialog \"The number is odd.\"\nend if\n```"
  },
  {
    "task": "Implement a system that determines if a string contains only numeric characters.",
    "code": "```applescript\nset theString to \"123456\"\nset isNumeric to true\n\nrepeat with i from 1 to count of characters of theString\n    set theChar to character i of theString\n    if (theChar is less than \"0\" or theChar is greater than \"9\") then\n        set isNumeric to false\n        exit repeat\n    end if\nend repeat\n\nreturn isNumeric\n```"
  },
  {
    "task": "Write a function to see if a given character is a vowel or consonant.",
    "code": "```applescript\non isVowelOrConsonant(character)\n\tset vowels to \"aeiouAEIOU\"\n\tif character is in vowels then\n\t\treturn \"vowel\"\n\telse\n\t\treturn \"consonant\"\n\tend if\nend isVowelOrConsonant\n```"
  },
  {
    "task": "Create a program that checks if a point lies within a specified rectangle.",
    "code": "```applescript\nset pointX to 5\nset pointY to 10\n\nset rectangleLeft to 0\nset rectangleTop to 0\nset rectangleRight to 10\nset rectangleBottom to 20\n\nset isWithinRectangle to false\n\nif pointX \u2265 rectangleLeft and pointX \u2264 rectangleRight and pointY \u2265 rectangleTop and pointY \u2264 rectangleBottom then\n    set isWithinRectangle to true\nend if\n\nreturn isWithinRectangle\n```"
  },
  {
    "task": "Develop a feature to compare two lists and return the common elements.",
    "code": "```applescript\nset list1 to {1, 2, 3, 4, 5}\nset list2 to {4, 5, 6, 7, 8}\n\nset commonElements to {}\nrepeat with item1 in list1\n    if item1 is in list2 then\n        set end of commonElements to item1\n    end if\nend repeat\n\nreturn commonElements\n```"
  },
  {
    "task": "Design a function that determines if a text contains any uppercase letters.",
    "code": "```applescript\non containsUppercase(inputText)\n\tset uppercaseFound to false\n\trepeat with i from 1 to count of characters of inputText\n\t\tset currentChar to character i of inputText\n\t\tif currentChar is not equal to (do shell script \"echo \" & quoted form of currentChar & \" | tr '[:upper:]' '[:lower:]'\") then\n\t\t\tset uppercaseFound to true\n\t\t\texit repeat\n\t\tend if\n\tend repeat\n\treturn uppercaseFound\nend containsUppercase\n```"
  },
  {
    "task": "Implement a script to check if a given sentence is a question.",
    "code": "```applescript\nset givenSentence to \"Is this a question?\"\n\nif (givenSentence ends with \"?\") then\n    display dialog \"The sentence is a question.\"\nelse\n    display dialog \"The sentence is not a question.\"\nend if\n```"
  },
  {
    "task": "Write a program to determine if a temperature is measured in Celsius or Fahrenheit.",
    "code": "```applescript\nset temperature to \"25C\" -- Example input\n\nif temperature ends with \"C\" then\n    display dialog \"The temperature is measured in Celsius.\"\nelse if temperature ends with \"F\" then\n    display dialog \"The temperature is measured in Fahrenheit.\"\nelse\n    display dialog \"The temperature unit is unknown.\"\nend if\n```"
  },
  {
    "task": "Create a system that verifies if a student is enrolled in a particular course.",
    "code": "```applescript\nset studentList to {\"Alice\", \"Bob\", \"Charlie\"}\nset courseEnrollment to {\"Alice\", \"Charlie\"}\n\non isStudentEnrolled(studentName)\n\tif studentName is in courseEnrollment then\n\t\treturn true\n\telse\n\t\treturn false\n\tend if\nend isStudentEnrolled\n\nset studentName to \"Bob\"\nset enrollmentStatus to isStudentEnrolled(studentName)\n\nif enrollmentStatus then\n\tdisplay dialog studentName & \" is enrolled in the course.\"\nelse\n\tdisplay dialog studentName & \" is not enrolled in the course.\"\nend if\n```"
  },
  {
    "task": "Build a utility to check if a given string is a valid hexadecimal number.",
    "code": "```applescript\non isValidHex(inputString)\n\tset hexChars to \"0123456789abcdefABCDEF\"\n\tset isValid to true\n\trepeat with i from 1 to length of inputString\n\t\tset currentChar to character i of inputString\n\t\tif currentChar is not in hexChars then\n\t\t\tset isValid to false\n\t\t\texit repeat\n\t\tend if\n\tend repeat\n\treturn isValid\nend isValidHex\n\n-- Example usage\nset testString to \"1A3F\"\nset result to isValidHex(testString)\ndisplay dialog \"Is valid hex: \" & result\n```"
  },
  {
    "task": "Write a function to see if two circles intersect based on their radii and center points.",
    "code": "```applescript\non circlesIntersect(x1, y1, r1, x2, y2, r2)\n\tset dx to x2 - x1\n\tset dy to y2 - y1\n\tset distanceSquared to dx * dx + dy * dy\n\tset radiusSum to r1 + r2\n\treturn distanceSquared \u2264 (radiusSum * radiusSum)\nend circlesIntersect\n```"
  },
  {
    "task": "Develop a program that checks if a given number is within 10% of another number.",
    "code": "```applescript\nset number1 to 50\nset number2 to 55\n\nset percentDifference to (number2 - number1) / number1 * 100\n\nif percentDifference \u2264 10 and percentDifference \u2265 -10 then\n    display dialog \"Number 2 is within 10% of Number 1\"\nelse\n    display dialog \"Number 2 is not within 10% of Number 1\"\nend if\n```"
  },
  {
    "task": "Create a feature to determine if a character is alphanumeric.",
    "code": "```applescript\non isAlphanumeric(theChar)\n\tset theASCII to (ASCII number of theChar)\n\tif (theASCII \u2265 48 and theASCII \u2264 57) or (theASCII \u2265 65 and theASCII \u2264 90) or (theASCII \u2265 97 and theASCII \u2264 122) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend if\nend isAlphanumeric\n\n-- Example usage\nset testChar to \"A\"\nset result to isAlphanumeric(testChar)\ndisplay dialog \"Is '\" & testChar & \"' alphanumeric? \" & result\n```"
  },
  {
    "task": "Implement a system to compare the profit margins of two products.",
    "code": "```applescript\n-- Define profit margins for two products\nset profitMarginProductA to 25.5\nset profitMarginProductB to 30.0\n\n-- Compare the profit margins\nif profitMarginProductA > profitMarginProductB then\n    display dialog \"Product A has a higher profit margin.\"\nelse if profitMarginProductA < profitMarginProductB then\n    display dialog \"Product B has a higher profit margin.\"\nelse\n    display dialog \"Both products have the same profit margin.\"\nend if\n```"
  },
  {
    "task": "Design a script to check if a given string contains any special characters.",
    "code": "```applescript\nset givenString to \"example@string#with!special$chars\"\n\nset specialCharacters to \"!@#$%^&*()-_=+[{]}|;:'\\\",<.>/?`~\"\nset containsSpecialChars to false\n\nrepeat with i from 1 to length of givenString\n    set currentChar to character i of givenString\n    if specialCharacters contains currentChar then\n        set containsSpecialChars to true\n        exit repeat\n    end if\nend repeat\n\nreturn containsSpecialChars\n```"
  },
  {
    "task": "Write a function to verify if a number is a multiple of another number.",
    "code": "```applescript\non isMultipleOf(number, divisor)\n    if number mod divisor is equal to 0 then\n        return true\n    else\n        return false\n    end if\nend isMultipleOf\n```"
  },
  {
    "task": "Create a program that checks if a date is a holiday based on a list of holidays.",
    "code": "```applescript\nset holidayList to {\"2023-12-25\", \"2023-01-01\", \"2023-07-04\"}\nset inputDate to \"2023-12-25\"\n\nif holidayList contains inputDate then\n    display dialog inputDate & \" is a holiday.\"\nelse\n    display dialog inputDate & \" is not a holiday.\"\nend if\n```"
  },
  {
    "task": "Build a utility to compare two text files and highlight the differences.",
    "code": "```applescript\nset file1Path to POSIX path of (choose file with prompt \"Select the first text file:\")\nset file2Path to POSIX path of (choose file with prompt \"Select the second text file:\")\n\nset file1Contents to read POSIX file file1Path\nset file2Contents to read POSIX file file2Path\n\nset differences to {}\n\nset file1Lines to paragraphs of file1Contents\nset file2Lines to paragraphs of file2Contents\n\nset maxLines to (count file1Lines)\nif (count file2Lines) > maxLines then set maxLines to (count file2Lines)\n\nrepeat with i from 1 to maxLines\n    set line1 to \"\"\n    set line2 to \"\"\n    \n    if i \u2264 (count file1Lines) then set line1 to item i of file1Lines\n    if i \u2264 (count file2Lines) then set line2 to item i of file2Lines\n    \n    if line1 \u2260 line2 then\n        copy \"Line \" & i & \": File1: \" & line1 & \" | File2: \" & line2 to end of differences\n    end if\nend repeat\n\nif (count differences) is 0 then\n    display dialog \"The files are identical.\"\nelse\n    set differencesText to \"\"\n    repeat with diff in differences\n        set differencesText to differencesText & diff & return\n    end repeat\n    display dialog \"Differences found:\" buttons {\"OK\"} default button \"OK\" with title \"Comparison Result\" with icon note giving up after 10\n    set the clipboard to differencesText\nend if\n```"
  },
  {
    "task": "Develop a function to determine if a given password is strong based on length and character diversity.",
    "code": "```applescript\non isStrongPassword(password)\n\tset minLength to 8\n\tset hasUppercase to false\n\tset hasLowercase to false\n\tset hasDigit to false\n\tset hasSpecialChar to false\n\t\n\tif length of password < minLength then return false\n\t\n\trepeat with i from 1 to length of password\n\t\tset char to character i of password\n\t\tif char is in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" then\n\t\t\tset hasUppercase to true\n\t\telse if char is in \"abcdefghijklmnopqrstuvwxyz\" then\n\t\t\tset hasLowercase to true\n\t\telse if char is in \"0123456789\" then\n\t\t\tset hasDigit to true\n\t\telse\n\t\t\tset hasSpecialChar to true\n\t\tend if\n\tend repeat\n\t\n\treturn hasUppercase and hasLowercase and hasDigit and hasSpecialChar\nend isStrongPassword\n```"
  },
  {
    "task": "Write a script to see if a number is within a specified distance from zero.",
    "code": "```applescript\nset theNumber to 5 -- Example number\nset distance to 10 -- Specified distance\n\nif theNumber \u2264 distance and theNumber \u2265 -distance then\n    display dialog \"The number is within the specified distance from zero.\"\nelse\n    display dialog \"The number is not within the specified distance from zero.\"\nend if\n```"
  },
  {
    "task": "Create a system to check if a book title is available in a library database.",
    "code": "```applescript\nset libraryDatabase to {\"The Great Gatsby\", \"To Kill a Mockingbird\", \"1984\", \"Pride and Prejudice\"}\nset bookTitle to \"1984\"\n\nif libraryDatabase contains bookTitle then\n    display dialog \"The book is available.\"\nelse\n    display dialog \"The book is not available.\"\nend if\n```"
  },
  {
    "task": "Implement a feature that determines if a user has administrator privileges.",
    "code": "```applescript\ntell application \"System Events\"\n    set isAdmin to false\n    set userList to every user\n    repeat with userAccount in userList\n        if name of userAccount is equal to short user name of (get current user) then\n            if admin privileges of userAccount then\n                set isAdmin to true\n            end if\n            exit repeat\n        end if\n    end repeat\nend tell\n\nreturn isAdmin\n```"
  },
  {
    "task": "Design a function to compare the brightness of two colors.",
    "code": "```applescript\non compareBrightness(color1, color2)\n\tset {r1, g1, b1} to color1\n\tset {r2, g2, b2} to color2\n\t\n\tset brightness1 to (r1 * 299 + g1 * 587 + b1 * 114) / 1000\n\tset brightness2 to (r2 * 299 + g2 * 587 + b2 * 114) / 1000\n\t\n\tif brightness1 > brightness2 then\n\t\treturn \"Color 1 is brighter\"\n\telse if brightness1 < brightness2 then\n\t\treturn \"Color 2 is brighter\"\n\telse\n\t\treturn \"Both colors have the same brightness\"\n\tend if\nend compareBrightness\n```"
  },
  {
    "task": "Write a program to verify if a number is a valid credit card number using the Luhn algorithm.",
    "code": "```applescript\non isValidCreditCardNumber(cardNumber)\n\tset reversedDigits to reverseText(cardNumber)\n\tset luhnSum to 0\n\t\n\trepeat with i from 1 to length of reversedDigits\n\t\tset currentDigit to character i of reversedDigits as integer\n\t\t\n\t\tif i mod 2 = 0 then\n\t\t\tset currentDigit to currentDigit * 2\n\t\t\tif currentDigit > 9 then set currentDigit to currentDigit - 9\n\t\tend if\n\t\t\n\t\tset luhnSum to luhnSum + currentDigit\n\tend repeat\n\t\n\tif luhnSum mod 10 = 0 then\n\t\treturn true\n\telse\n\t\treturn false\n\tend if\nend isValidCreditCardNumber\n\non reverseText(theText)\n\tset reversedText to \"\"\n\trepeat with i from (length of theText) to 1 by -1\n\t\tset reversedText to reversedText & character i of theText\n\tend repeat\n\treturn reversedText\nend reverseText\n\n-- Example usage:\nset cardNumber to \"4532015112830366\"\nset isValid to isValidCreditCardNumber(cardNumber)\ndisplay dialog \"Credit Card Number Valid: \" & isValid\n```"
  },
  {
    "task": "Create a script to determine if a given string is a valid IP address.",
    "code": "```applescript\nset ipAddress to \"192.168.1.1\"\n\nif isValidIP(ipAddress) then\n    display dialog \"Valid IP Address\"\nelse\n    display dialog \"Invalid IP Address\"\nend if\n\non isValidIP(ip)\n    set segments to my split(ip, \".\")\n    if (count of segments) is not 4 then return false\n    repeat with segment in segments\n        try\n            set num to segment as number\n            if num < 0 or num > 255 then return false\n        on error\n            return false\n        end try\n    end repeat\n    return true\nend isValidIP\n\non split(theText, theDelimiter)\n    set AppleScript's text item delimiters to theDelimiter\n    set theItems to text items of theText\n    set AppleScript's text item delimiters to \"\"\n    return theItems\nend split\n```"
  },
  {
    "task": "Build a utility that checks if a number is part of an arithmetic sequence.",
    "code": "```applescript\non isInArithmeticSequence(number, start, difference)\n    set current to start\n    repeat\n        if current = number then\n            return true\n        else if current > number then\n            exit repeat\n        end if\n        set current to current + difference\n    end repeat\n    return false\nend isInArithmeticSequence\n\n-- Example usage\nset result to isInArithmeticSequence(10, 2, 3)\ndisplay dialog \"Is number in sequence? \" & result\n```"
  },
  {
    "task": "Develop a feature to compare the efficiency of two algorithms based on time complexity.",
    "code": "```applescript\n-- Define two algorithms with their time complexities\nset algo1Complexity to \"O(n^2)\"\nset algo2Complexity to \"O(n log n)\"\n\n-- Function to compare time complexities\non compareComplexity(complexity1, complexity2)\n\tif complexity1 is complexity2 then\n\t\treturn \"Both algorithms have the same time complexity.\"\n\telse if complexity1 is \"O(1)\" or (complexity1 is \"O(log n)\" and complexity2 is not \"O(1)\") or (complexity1 is \"O(n)\" and complexity2 is in {\"O(n log n)\", \"O(n^2)\", \"O(2^n)\", \"O(n!)\"}) or (complexity1 is \"O(n log n)\" and complexity2 is in {\"O(n^2)\", \"O(2^n)\", \"O(n!)\"}) or (complexity1 is \"O(n^2)\" and complexity2 is in {\"O(2^n)\", \"O(n!)\"}) or (complexity1 is \"O(2^n)\" and complexity2 is \"O(n!)\") then\n\t\treturn \"Algorithm 1 is more efficient than Algorithm 2.\"\n\telse\n\t\treturn \"Algorithm 2 is more efficient than Algorithm 1.\"\n\tend if\nend compareComplexity\n\nset result to compareComplexity(algo1Complexity, algo2Complexity)\ndisplay dialog result\n```"
  },
  {
    "task": "Write a function to see if a given date falls in a leap year.",
    "code": "```applescript\non isLeapYear(theDate)\n\tset theYear to year of theDate\n\tif (theYear mod 4 is 0 and theYear mod 100 is not 0) or (theYear mod 400 is 0) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend if\nend isLeapYear\n```"
  },
  {
    "task": "Create a program that determines if a user's subscription is active based on the current date.",
    "code": "```applescript\nset subscriptionEndDate to date \"Monday, October 30, 2023 12:00:00 AM\"\nset currentDate to current date\n\nif currentDate is greater than or equal to subscriptionEndDate then\n    display dialog \"Your subscription is not active.\"\nelse\n    display dialog \"Your subscription is active.\"\nend if\n```"
  },
  {
    "task": "Design a tool to check if a user\u2019s input is a palindrome phrase, ignoring spaces and punctuation.",
    "code": "```applescript\nset userInput to text returned of (display dialog \"Enter a phrase:\" default answer \"\")\nset cleanInput to do shell script \"echo \" & quoted form of userInput & \" | tr -d '[:space:][:punct:]' | tr '[:upper:]' '[:lower:]'\"\nset reversedInput to (reverse of characters of cleanInput) as string\n\nif cleanInput is equal to reversedInput then\n    display dialog \"The phrase is a palindrome.\"\nelse\n    display dialog \"The phrase is not a palindrome.\"\nend if\n```"
  },
  {
    "task": "Implement a system to verify if a given number is part of the Fibonacci sequence.",
    "code": "```applescript\non isFibonacci(n)\n\tset a to 0\n\tset b to 1\n\trepeat while b < n\n\t\tset temp to b\n\t\tset b to a + b\n\t\tset a to temp\n\tend repeat\n\treturn (b = n) or (n = 0)\nend isFibonacci\n\n-- Example usage:\nset number to 21\nset result to isFibonacci(number)\nif result then\n\tdisplay dialog (number as string) & \" is a Fibonacci number.\"\nelse\n\tdisplay dialog (number as string) & \" is not a Fibonacci number.\"\nend if\n```"
  },
  {
    "task": "Write a program to compare the elevation of two geographic locations.",
    "code": "```applescript\nset elevation1 to 1500 -- example elevation for location 1 in meters\nset elevation2 to 1200 -- example elevation for location 2 in meters\n\nif elevation1 > elevation2 then\n    display dialog \"Location 1 is at a higher elevation than Location 2.\"\nelse if elevation1 < elevation2 then\n    display dialog \"Location 2 is at a higher elevation than Location 1.\"\nelse\n    display dialog \"Both locations are at the same elevation.\"\nend if\n```"
  },
  {
    "task": "Create a function to determine if a given string is a valid JSON format.",
    "code": "```applescript\non isValidJSON(theString)\n    try\n        do shell script \"echo \" & quoted form of theString & \" | python3 -m json.tool > /dev/null 2>&1\"\n        return true\n    on error\n        return false\n    end try\nend isValidJSON\n```"
  },
  {
    "task": "Build a utility that checks if a number is a factorial of any integer.",
    "code": "```applescript\non isFactorial(n)\n\tset i to 1\n\tset factorial to 1\n\trepeat while factorial < n\n\t\tset i to i + 1\n\t\tset factorial to factorial * i\n\tend repeat\n\tif factorial is equal to n then\n\t\treturn true\n\telse\n\t\treturn false\n\tend if\nend isFactorial\n\n-- Example usage\nset numberToCheck to 120\nset result to isFactorial(numberToCheck)\nreturn result\n```"
  },
  {
    "task": "Develop a feature to compare the widths of two ribbons and return the wider one.",
    "code": "```applescript\nset ribbonWidth1 to 5.5\nset ribbonWidth2 to 3.75\n\nif ribbonWidth1 > ribbonWidth2 then\n    set widerRibbon to ribbonWidth1\nelse\n    set widerRibbon to ribbonWidth2\nend if\n\nreturn widerRibbon\n```"
  },
  {
    "task": "Write a script to see if a word is present in a list of banned words.",
    "code": "```applescript\nset bannedWords to {\"inappropriate\", \"banned\", \"prohibited\", \"restricted\"}\nset wordToCheck to \"example\"\n\nif wordToCheck is in bannedWords then\n    display dialog \"The word is banned.\"\nelse\n    display dialog \"The word is allowed.\"\nend if\n```"
  },
  {
    "task": "Design a system to determine if a patient's temperature is in the normal range.",
    "code": "```applescript\nset normalLowerLimit to 36.5\nset normalUpperLimit to 37.5\n\nset patientTemperature to 37.0 -- Example temperature\n\nif patientTemperature \u2265 normalLowerLimit and patientTemperature \u2264 normalUpperLimit then\n    display dialog \"Patient's temperature is in the normal range.\"\nelse\n    display dialog \"Patient's temperature is outside the normal range.\"\nend if\n```"
  },
  {
    "task": "Create a program that checks if a given time is during business hours.",
    "code": "```applescript\nset businessStartTime to 9 * hours\nset businessEndTime to 17 * hours\n\nset currentTime to (current date)\nset currentHour to (hours of currentTime)\n\nif currentHour \u2265 businessStartTime and currentHour < businessEndTime then\n    display dialog \"The current time is during business hours.\"\nelse\n    display dialog \"The current time is outside business hours.\"\nend if\n```"
  },
  {
    "task": "Implement a function to see if a number is a triangular number.",
    "code": "```applescript\non isTriangularNumber(n)\n    set i to 1\n    repeat\n        set triangularNumber to (i * (i + 1)) / 2\n        if triangularNumber is equal to n then\n            return true\n        else if triangularNumber is greater than n then\n            return false\n        end if\n        set i to i + 1\n    end repeat\nend isTriangularNumber\n```"
  },
  {
    "task": "Write a feature to compare the number of vowels in two given strings.",
    "code": "```applescript\nset string1 to \"Your first string here\"\nset string2 to \"Your second string here\"\n\non countVowels(inputString)\n\tset vowels to \"aeiouAEIOU\"\n\tset vowelCount to 0\n\trepeat with i from 1 to length of inputString\n\t\tif character i of inputString is in vowels then\n\t\t\tset vowelCount to vowelCount + 1\n\t\tend if\n\tend repeat\n\treturn vowelCount\nend countVowels\n\nset vowelCount1 to countVowels(string1)\nset vowelCount2 to countVowels(string2)\n\nif vowelCount1 is greater than vowelCount2 then\n\tdisplay dialog \"String 1 has more vowels\"\nelse if vowelCount2 is greater than vowelCount1 then\n\tdisplay dialog \"String 2 has more vowels\"\nelse\n\tdisplay dialog \"Both strings have the same number of vowels\"\nend if\n```"
  }
]