[
  {
    "task": "Write a program that checks if a number is even or odd and outputs the result.",
    "code": "```applescript\nset theNumber to 7\nif theNumber mod 2 is equal to 0 then\n    display dialog \"The number is even.\"\nelse\n    display dialog \"The number is odd.\"\nend if\n```"
  },
  {
    "task": "Create a function that determines if a given year is a leap year.",
    "code": "```applescript\non isLeapYear(theYear)\n    if (theYear mod 4 is 0) then\n        if (theYear mod 100 is 0) then\n            if (theYear mod 400 is 0) then\n                return true\n            else\n                return false\n            end if\n        else\n            return true\n        end if\n    else\n        return false\n    end if\nend isLeapYear\n```"
  },
  {
    "task": "Develop a script that categorizes an input number as positive, negative, or zero.",
    "code": "```applescript\nset inputNumber to 0 -- Replace 0 with the actual input number\n\nif inputNumber > 0 then\n    set result to \"positive\"\nelse if inputNumber < 0 then\n    set result to \"negative\"\nelse\n    set result to \"zero\"\nend if\n\nresult\n```"
  },
  {
    "task": "Implement a system that grants access only if a correct password and username are provided.",
    "code": "```applescript\nset correctUsername to \"admin\"\nset correctPassword to \"1234\"\n\nset inputUsername to text returned of (display dialog \"Enter Username:\" default answer \"\")\nset inputPassword to text returned of (display dialog \"Enter Password:\" default answer \"\" with hidden answer)\n\nif inputUsername is equal to correctUsername and inputPassword is equal to correctPassword then\n    display dialog \"Access Granted.\"\nelse\n    display dialog \"Access Denied.\"\nend if\n```"
  },
  {
    "task": "Design a program that outputs 'Fizz' for numbers divisible by 3, 'Buzz' for numbers divisible by 5, and 'FizzBuzz' for numbers divisible by both.",
    "code": "```applescript\nrepeat with i from 1 to 100\n    set output to \"\"\n    if i mod 3 is 0 then\n        set output to output & \"Fizz\"\n    end if\n    if i mod 5 is 0 then\n        set output to output & \"Buzz\"\n    end if\n    if output is \"\" then\n        set output to i\n    end if\n    display dialog output\nend repeat\n```"
  },
  {
    "task": "Write a function to determine if a character is a vowel or a consonant.",
    "code": "```applescript\non isVowelOrConsonant(character)\n\tset vowels to {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"}\n\tif character is in vowels then\n\t\treturn \"vowel\"\n\telse\n\t\treturn \"consonant\"\n\tend if\nend isVowelOrConsonant\n```"
  },
  {
    "task": "Create a program that assigns letter grades based on numerical scores.",
    "code": "```applescript\non getLetterGrade(score)\n    if score \u2265 90 then\n        return \"A\"\n    else if score \u2265 80 then\n        return \"B\"\n    else if score \u2265 70 then\n        return \"C\"\n    else if score \u2265 60 then\n        return \"D\"\n    else\n        return \"F\"\n    end if\nend getLetterGrade\n\n-- Example usage\nset score to 85\nset grade to getLetterGrade(score)\ndisplay dialog \"The grade for score \" & score & \" is \" & grade\n```"
  },
  {
    "task": "Develop a routine that suggests clothing based on the current temperature.",
    "code": "```applescript\nset temperature to 68 -- Example temperature; replace with real data source\n\nif temperature is greater than or equal to 85 then\n    set suggestion to \"Wear light clothing like shorts and a t-shirt.\"\nelse if temperature is greater than or equal to 65 then\n    set suggestion to \"Wear regular clothing like jeans and a shirt.\"\nelse if temperature is greater than or equal to 45 then\n    set suggestion to \"Wear warmer clothing like a sweater or light jacket.\"\nelse\n    set suggestion to \"Wear heavy clothing like a coat and scarf.\"\nend if\n\ndisplay dialog suggestion\n```"
  },
  {
    "task": "Implement a system that checks if a user is an adult or a minor based on their age.",
    "code": "```applescript\nset userAge to 20 -- Example age\nif userAge \u2265 18 then\n    display dialog \"The user is an adult.\"\nelse\n    display dialog \"The user is a minor.\"\nend if\n```"
  },
  {
    "task": "Design a program that validates if a triangle can exist based on its side lengths.",
    "code": "```applescript\nset sideA to 5\nset sideB to 7\nset sideC to 10\n\nif (sideA + sideB > sideC) and (sideA + sideC > sideB) and (sideB + sideC > sideA) then\n    display dialog \"A triangle can exist with these side lengths.\"\nelse\n    display dialog \"A triangle cannot exist with these side lengths.\"\nend if\n```"
  },
  {
    "task": "Write a function that determines the largest of three input numbers.",
    "code": "```applescript\non largestOfThree(a, b, c)\n    if a \u2265 b and a \u2265 c then\n        return a\n    else if b \u2265 a and b \u2265 c then\n        return b\n    else\n        return c\n    end if\nend largestOfThree\n```"
  },
  {
    "task": "Create a program that checks if a string is a palindrome.",
    "code": "```applescript\nset inputString to \"racecar\"\nset reversedString to (reverse of characters of inputString) as string\n\nif inputString is equal to reversedString then\n    display dialog \"The string is a palindrome.\"\nelse\n    display dialog \"The string is not a palindrome.\"\nend if\n```"
  },
  {
    "task": "Develop a routine that calculates the total cost with a discount applied if applicable.",
    "code": "```applescript\non calculateTotalCost(originalCost)\n    set discountThreshold to 100\n    set discountRate to 0.1\n    if originalCost > discountThreshold then\n        set discount to originalCost * discountRate\n    else\n        set discount to 0\n    end if\n    set totalCost to originalCost - discount\n    return totalCost\nend calculateTotalCost\n```"
  },
  {
    "task": "Implement a system that checks if a person is eligible to vote based on age and citizenship.",
    "code": "```applescript\nset age to 18\nset isCitizen to true\n\nif age \u2265 18 and isCitizen then\n    display dialog \"You are eligible to vote.\"\nelse\n    display dialog \"You are not eligible to vote.\"\nend if\n```"
  },
  {
    "task": "Design a function that returns the day of the week given a number from 1 to 7.",
    "code": "```applescript\non dayOfWeek(dayNumber)\n    if dayNumber is 1 then\n        return \"Monday\"\n    else if dayNumber is 2 then\n        return \"Tuesday\"\n    else if dayNumber is 3 then\n        return \"Wednesday\"\n    else if dayNumber is 4 then\n        return \"Thursday\"\n    else if dayNumber is 5 then\n        return \"Friday\"\n    else if dayNumber is 6 then\n        return \"Saturday\"\n    else if dayNumber is 7 then\n        return \"Sunday\"\n    else\n        return \"Invalid day number\"\n    end if\nend dayOfWeek\n```"
  },
  {
    "task": "Write a program that determines if a word is found within a given sentence.",
    "code": "```applescript\nset theSentence to \"This is an example sentence to search a word.\"\nset theWord to \"example\"\n\nif theSentence contains theWord then\n    display dialog \"The word '\" & theWord & \"' is found in the sentence.\"\nelse\n    display dialog \"The word '\" & theWord & \"' is not found in the sentence.\"\nend if\n```"
  },
  {
    "task": "Create a script that checks if a number is within a specified range.",
    "code": "```applescript\nset numberToCheck to 25\nset lowerBound to 10\nset upperBound to 50\n\nif numberToCheck \u2265 lowerBound and numberToCheck \u2264 upperBound then\n    display dialog \"The number is within the range.\"\nelse\n    display dialog \"The number is outside the range.\"\nend if\n```"
  },
  {
    "task": "Develop a routine to decide if a user input is a valid email address.",
    "code": "```applescript\nset validEmail to false\nset userInput to text returned of (display dialog \"Enter your email address:\" default answer \"\")\n\nif userInput contains \"@\" and userInput contains \".\" then\n\tset atIndex to offset of \"@\" in userInput\n\tset dotIndex to offset of \".\" in userInput\n\t\n\tif atIndex < dotIndex and dotIndex < (length of userInput) then\n\t\tset validEmail to true\n\tend if\nend if\n\nif validEmail then\n\tdisplay dialog \"The email address is valid.\"\nelse\n\tdisplay dialog \"The email address is invalid.\"\nend if\n```"
  },
  {
    "task": "Implement a program that categorizes a number as small, medium, or large.",
    "code": "```applescript\nset theNumber to 42 -- Example number, you can change it as needed\n\nif theNumber < 10 then\n\tset category to \"small\"\nelse if theNumber \u2265 10 and theNumber \u2264 100 then\n\tset category to \"medium\"\nelse\n\tset category to \"large\"\nend if\n\ndisplay dialog \"The number is categorized as: \" & category\n```"
  },
  {
    "task": "Design a function that outputs the season based on the month provided.",
    "code": "```applescript\non seasonForMonth(theMonth)\n\tif theMonth is in {\"December\", \"January\", \"February\"} then\n\t\treturn \"Winter\"\n\telse if theMonth is in {\"March\", \"April\", \"May\"} then\n\t\treturn \"Spring\"\n\telse if theMonth is in {\"June\", \"July\", \"August\"} then\n\t\treturn \"Summer\"\n\telse if theMonth is in {\"September\", \"October\", \"November\"} then\n\t\treturn \"Autumn\"\n\telse\n\t\treturn \"Invalid month\"\n\tend if\nend seasonForMonth\n```"
  },
  {
    "task": "Write a program that checks if a string contains only alphabetic characters.",
    "code": "```applescript\nset inputString to \"HelloWorld\"\n\nif (do shell script \"echo \" & quoted form of inputString & \" | grep -q '^[a-zA-Z]*$' && echo true || echo false\") is \"true\" then\n    display dialog \"The string contains only alphabetic characters.\"\nelse\n    display dialog \"The string contains non-alphabetic characters.\"\nend if\n```"
  },
  {
    "task": "Create a routine that decides the type of triangle based on its angles.",
    "code": "```applescript\non determineTriangleType(angle1, angle2, angle3)\n    if angle1 + angle2 + angle3 is not equal to 180 then\n        return \"Invalid angles\"\n    else if angle1 is equal to 90 or angle2 is equal to 90 or angle3 is equal to 90 then\n        return \"Right triangle\"\n    else if angle1 < 90 and angle2 < 90 and angle3 < 90 then\n        return \"Acute triangle\"\n    else\n        return \"Obtuse triangle\"\n    end if\nend determineTriangleType\n\n-- Example usage:\nset triangleType to determineTriangleType(60, 60, 60)\ndisplay dialog triangleType\n```"
  },
  {
    "task": "Develop a program that suggests a meal based on the time of day.",
    "code": "```applescript\nset currentHour to hours of (current date)\n\nif currentHour is greater than or equal to 6 and currentHour is less than 11 then\n    set mealSuggestion to \"Breakfast\"\nelse if currentHour is greater than or equal to 11 and currentHour is less than 16 then\n    set mealSuggestion to \"Lunch\"\nelse if currentHour is greater than or equal to 16 and currentHour is less than 21 then\n    set mealSuggestion to \"Dinner\"\nelse\n    set mealSuggestion to \"Snack\"\nend if\n\ndisplay dialog \"Suggested meal: \" & mealSuggestion\n```"
  },
  {
    "task": "Implement a function that determines if a point lies within a circle given its radius.",
    "code": "```applescript\non pointWithinCircle(x, y, radius)\n    set distanceSquared to (x * x) + (y * y)\n    if distanceSquared \u2264 (radius * radius) then\n        return true\n    else\n        return false\n    end if\nend pointWithinCircle\n```"
  },
  {
    "task": "Design a script that calculates overtime pay based on hours worked.",
    "code": "```applescript\nset regularHours to 40\nset overtimeRate to 1.5\nset hourlyWage to 20\nset hoursWorked to 45\n\nif hoursWorked > regularHours then\n    set overtimeHours to hoursWorked - regularHours\n    set overtimePay to overtimeHours * hourlyWage * overtimeRate\n    set regularPay to regularHours * hourlyWage\n    set totalPay to regularPay + overtimePay\nelse\n    set totalPay to hoursWorked * hourlyWage\nend if\n\nreturn totalPay\n```"
  },
  {
    "task": "Write a program that checks if two strings are anagrams of each other.",
    "code": "```applescript\non areAnagrams(string1, string2)\n    if (length of string1) is not equal to (length of string2) then\n        return false\n    end if\n    \n    set sortedString1 to sortCharacters(string1)\n    set sortedString2 to sortCharacters(string2)\n    \n    if sortedString1 is equal to sortedString2 then\n        return true\n    else\n        return false\n    end if\nend areAnagrams\n\non sortCharacters(s)\n    set charList to characters of s\n    set sortedCharList to my sortList(charList)\n    return sortedCharList as string\nend sortCharacters\n\non sortList(l)\n    set AppleScript's text item delimiters to {\"\"}\n    set sortedList to (do shell script \"echo \" & (quoted form of (l as string)) & \" | tr -d ' ' | fold -w1 | sort | tr -d '\\n'\")\n    return characters of sortedList\nend sortList\n\n-- Example usage\nareAnagrams(\"listen\", \"silent\")\n```"
  },
  {
    "task": "Create a function that classifies numbers as prime or composite.",
    "code": "```applescript\non isPrime(n)\n    if n \u2264 1 then\n        return \"Composite\"\n    else if n = 2 then\n        return \"Prime\"\n    else\n        set maxDivisor to (n div 2)\n        repeat with i from 2 to maxDivisor\n            if n mod i = 0 then\n                return \"Composite\"\n            end if\n        end repeat\n        return \"Prime\"\n    end if\nend isPrime\n```"
  },
  {
    "task": "Develop a routine to determine if a number is a power of two.",
    "code": "```applescript\non isPowerOfTwo(n)\n    if n < 1 then\n        return false\n    end if\n    set isPower to true\n    repeat while n > 1\n        if n mod 2 is not 0 then\n            set isPower to false\n            exit repeat\n        end if\n        set n to n / 2\n    end repeat\n    return isPower\nend isPowerOfTwo\n\n-- Example usage\nset number to 8\nset result to isPowerOfTwo(number)\ndisplay dialog \"Is \" & number & \" a power of two? \" & result\n```"
  },
  {
    "task": "Implement a program that checks if a list is sorted in ascending order.",
    "code": "```applescript\nset sortedList to {1, 2, 3, 4, 5}\nset unsortedList to {5, 3, 1, 4, 2}\n\non isSortedAscending(theList)\n    repeat with i from 1 to (count of theList) - 1\n        if item i of theList > item (i + 1) of theList then\n            return false\n        end if\n    end repeat\n    return true\nend isSortedAscending\n\n-- Example usage:\nset resultSorted to isSortedAscending(sortedList)\nset resultUnsorted to isSortedAscending(unsortedList)\n```"
  },
  {
    "task": "Design a function that suggests a sport based on the weather conditions.",
    "code": "```applescript\non suggestSport(weatherCondition)\n\tif weatherCondition is \"sunny\" then\n\t\treturn \"Tennis\"\n\telse if weatherCondition is \"rainy\" then\n\t\treturn \"Swimming\"\n\telse if weatherCondition is \"windy\" then\n\t\treturn \"Kite Surfing\"\n\telse if weatherCondition is \"snowy\" then\n\t\treturn \"Skiing\"\n\telse\n\t\treturn \"Reading a book indoors\"\n\tend if\nend suggestSport\n```"
  },
  {
    "task": "Write a program that determines if an entered date is valid.",
    "code": "```applescript\ndisplay dialog \"Enter a date (MM/DD/YYYY):\" default answer \"\"\nset inputDate to text returned of result\n\nset AppleScript's text item delimiters to \"/\"\nset dateComponents to text items of inputDate\nset AppleScript's text item delimiters to \"\"\n\nif (count of dateComponents) is not 3 then\n    display dialog \"Invalid date format.\"\nelse\n    set {monthStr, dayStr, yearStr} to dateComponents\n    try\n        set monthNum to monthStr as integer\n        set dayNum to dayStr as integer\n        set yearNum to yearStr as integer\n        \n        if (monthNum < 1 or monthNum > 12) or (dayNum < 1 or dayNum > 31) or (yearNum < 1) then\n            display dialog \"Invalid date.\"\n        else\n            set validDate to false\n            \n            if monthNum is in {1, 3, 5, 7, 8, 10, 12} then\n                if dayNum \u2264 31 then set validDate to true\n            else if monthNum is in {4, 6, 9, 11} then\n                if dayNum \u2264 30 then set validDate to true\n            else if monthNum is 2 then\n                if (yearNum mod 4 is 0 and (yearNum mod 100 is not 0 or yearNum mod 400 is 0)) then\n                    if dayNum \u2264 29 then set validDate to true\n                else\n                    if dayNum \u2264 28 then set validDate to true\n                end if\n            end if\n            \n            if validDate then\n                display dialog \"Valid date.\"\n            else\n                display dialog \"Invalid date.\"\n            end if\n        end if\n    on error\n        display dialog \"Invalid date input.\"\n    end try\nend if\n```"
  },
  {
    "task": "Create a script to decide which of two products to buy based on price and reviews.",
    "code": "```applescript\nset product1Price to 50\nset product1Reviews to 4.5\nset product2Price to 45\nset product2Reviews to 4.0\n\nif product1Price \u2264 product2Price then\n    if product1Reviews \u2265 product2Reviews then\n        set decision to \"Buy Product 1\"\n    else\n        set decision to \"Buy Product 2\"\n    end if\nelse\n    if product2Reviews \u2265 product1Reviews then\n        set decision to \"Buy Product 2\"\n    else\n        set decision to \"Buy Product 1\"\n    end if\nend if\n\nreturn decision\n```"
  },
  {
    "task": "Develop a function that categorizes a person\u2019s BMI as underweight, normal, overweight, or obese.",
    "code": "```applescript\non categorizeBMI(weight, height)\n\tset bmi to weight / (height ^ 2)\n\tif bmi < 18.5 then\n\t\treturn \"underweight\"\n\telse if bmi < 24.9 then\n\t\treturn \"normal\"\n\telse if bmi < 29.9 then\n\t\treturn \"overweight\"\n\telse\n\t\treturn \"obese\"\n\tend if\nend categorizeBMI\n```"
  },
  {
    "task": "Implement a program that checks if a credit card number is valid using the Luhn algorithm.",
    "code": "```applescript\non validateLuhn(cardNumber)\n\tset cardDigits to characters of cardNumber\n\tset totalSum to 0\n\tset isEvenIndex to false\n\trepeat with i from (count of cardDigits) to 1 by -1\n\t\tset currentDigit to item i of cardDigits as integer\n\t\tif isEvenIndex then\n\t\t\tset currentDigit to currentDigit * 2\n\t\t\tif currentDigit > 9 then set currentDigit to currentDigit - 9\n\t\tend if\n\t\tset totalSum to totalSum + currentDigit\n\t\tset isEvenIndex to not isEvenIndex\n\tend repeat\n\treturn (totalSum mod 10) is 0\nend validateLuhn\n\n-- Example Usage\nset cardNumber to \"4532015112830366\"\nset isValid to validateLuhn(cardNumber)\nif isValid then\n\tdisplay dialog \"The credit card number is valid.\"\nelse\n\tdisplay dialog \"The credit card number is invalid.\"\nend if\n```"
  },
  {
    "task": "Design a routine that outputs a greeting based on the current time of day.",
    "code": "```applescript\nset currentHour to (hour of (current date))\n\nif currentHour < 12 then\n    set greeting to \"Good morning!\"\nelse if currentHour is less than 18 then\n    set greeting to \"Good afternoon!\"\nelse\n    set greeting to \"Good evening!\"\nend if\n\ndisplay dialog greeting\n```"
  },
  {
    "task": "Write a program that determines if a given word can be formed with a set of letters.",
    "code": "```applescript\nset givenWord to \"example\"\nset availableLetters to \"axemlp\"\n\non canFormWord(word, letters)\n\tset lettersList to characters of letters\n\trepeat with char in characters of word\n\t\tif char is in lettersList then\n\t\t\tset lettersList to my removeFirstOccurrence(char, lettersList)\n\t\telse\n\t\t\treturn false\n\t\tend if\n\tend repeat\n\treturn true\nend canFormWord\n\non removeFirstOccurrence(char, lettersList)\n\tset newList to {}\n\tset foundFirst to false\n\trepeat with item in lettersList\n\t\tif item is char and not foundFirst then\n\t\t\tset foundFirst to true\n\t\telse\n\t\t\tset end of newList to item\n\t\tend if\n\tend repeat\n\treturn newList\nend removeFirstOccurrence\n\nset result to canFormWord(givenWord, availableLetters)\nif result is true then\n\tdisplay dialog \"The word can be formed.\"\nelse\n\tdisplay dialog \"The word cannot be formed.\"\nend if\n```"
  },
  {
    "task": "Create a function that outputs the appropriate greeting based on the day of the week.",
    "code": "```applescript\non getGreetingByDay(dayOfWeek)\n\ttell dayOfWeek\n\t\tif it is \"Monday\" then\n\t\t\treturn \"Hello, it's Monday!\"\n\t\telse if it is \"Tuesday\" then\n\t\t\treturn \"Happy Tuesday!\"\n\t\telse if it is \"Wednesday\" then\n\t\t\treturn \"Welcome to Wednesday!\"\n\t\telse if it is \"Thursday\" then\n\t\t\treturn \"It's Thursday, almost the weekend!\"\n\t\telse if it is \"Friday\" then\n\t\t\treturn \"Happy Friday!\"\n\t\telse if it is \"Saturday\" then\n\t\t\treturn \"Enjoy your Saturday!\"\n\t\telse if it is \"Sunday\" then\n\t\t\treturn \"Relax, it's Sunday!\"\n\t\telse\n\t\t\treturn \"Invalid day!\"\n\t\tend if\n\tend tell\nend getGreetingByDay\n```"
  },
  {
    "task": "Develop a system to determine if a person qualifies for a senior citizen discount.",
    "code": "```applescript\nset age to text returned of (display dialog \"Enter the person's age:\" default answer \"\")\nset age to age as integer\n\nif age \u2265 65 then\n    display dialog \"The person qualifies for a senior citizen discount.\" buttons {\"OK\"} default button \"OK\"\nelse\n    display dialog \"The person does not qualify for a senior citizen discount.\" buttons {\"OK\"} default button \"OK\"\nend if\n```"
  },
  {
    "task": "Implement a function that checks if a number is a perfect square.",
    "code": "```applescript\non isPerfectSquare(n)\n    if n < 0 then\n        return false\n    end if\n    set sqrtN to n ^ 0.5\n    if sqrtN = (sqrtN div 1) then\n        return true\n    else\n        return false\n    end if\nend isPerfectSquare\n```"
  },
  {
    "task": "Design a program that outputs the correct shipping cost based on weight and distance.",
    "code": "```applescript\nset weight to 10 -- example weight in kg\nset distance to 500 -- example distance in km\n\nset shippingCost to 0\n\nif weight \u2264 5 then\n\tif distance \u2264 100 then\n\t\tset shippingCost to 5\n\telse if distance \u2264 500 then\n\t\tset shippingCost to 10\n\telse\n\t\tset shippingCost to 15\n\tend if\nelse if weight \u2264 20 then\n\tif distance \u2264 100 then\n\t\tset shippingCost to 10\n\telse if distance \u2264 500 then\n\t\tset shippingCost to 15\n\telse\n\t\tset shippingCost to 20\n\tend if\nelse\n\tif distance \u2264 100 then\n\t\tset shippingCost to 20\n\telse if distance \u2264 500 then\n\t\tset shippingCost to 25\n\telse\n\t\tset shippingCost to 30\n\tend if\nend if\n\ndisplay dialog \"The shipping cost is $\" & shippingCost\n```"
  },
  {
    "task": "Write a routine that chooses the correct pronoun based on gender input.",
    "code": "```applescript\non choosePronoun(gender)\n\tif gender is \"male\" then\n\t\treturn \"he\"\n\telse if gender is \"female\" then\n\t\treturn \"she\"\n\telse\n\t\treturn \"they\"\n\tend if\nend choosePronoun\n```"
  },
  {
    "task": "Create a program that checks if a user input is a palindrome number.",
    "code": "```applescript\nset userInput to text returned of (display dialog \"Enter a number:\" default answer \"\")\n\non isPalindromeNumber(inputNumber)\n\tset reversedNumber to (reverse of (characters of inputNumber)) as string\n\tif inputNumber is equal to reversedNumber then\n\t\treturn true\n\telse\n\t\treturn false\n\tend if\nend isPalindromeNumber\n\nif isPalindromeNumber(userInput) then\n\tdisplay dialog \"The number is a palindrome.\"\nelse\n\tdisplay dialog \"The number is not a palindrome.\"\nend if\n```"
  },
  {
    "task": "Develop a script to decide if a number is a perfect number.",
    "code": "```applescript\nset theNumber to 28 -- change this number to test other numbers\n\non isPerfectNumber(n)\n\tset sumOfDivisors to 0\n\trepeat with i from 1 to (n - 1)\n\t\tif n mod i = 0 then\n\t\t\tset sumOfDivisors to sumOfDivisors + i\n\t\tend if\n\tend repeat\n\tif sumOfDivisors = n then\n\t\treturn true\n\telse\n\t\treturn false\n\tend if\nend isPerfectNumber\n\nif isPerfectNumber(theNumber) then\n\tdisplay dialog (theNumber as string) & \" is a perfect number.\"\nelse\n\tdisplay dialog (theNumber as string) & \" is not a perfect number.\"\nend if\n```"
  },
  {
    "task": "Implement a system that determines the winner in a rock-paper-scissors game.",
    "code": "```applescript\nset player1 to text returned of (display dialog \"Player 1, enter your choice: rock, paper, or scissors:\" default answer \"\")\nset player2 to text returned of (display dialog \"Player 2, enter your choice: rock, paper, or scissors:\" default answer \"\")\n\nif player1 is player2 then\n    display dialog \"It's a tie!\"\nelse if (player1 is \"rock\" and player2 is \"scissors\") or (player1 is \"scissors\" and player2 is \"paper\") or (player1 is \"paper\" and player2 is \"rock\") then\n    display dialog \"Player 1 wins!\"\nelse if (player2 is \"rock\" and player1 is \"scissors\") or (player2 is \"scissors\" and player1 is \"paper\") or (player2 is \"paper\" and player1 is \"rock\") then\n    display dialog \"Player 2 wins!\"\nelse\n    display dialog \"Invalid input.\"\nend if\n```"
  },
  {
    "task": "Design a function that suggests a movie genre based on user mood.",
    "code": "```applescript\non suggestMovieGenre(mood)\n\tif mood is equal to \"happy\" then\n\t\treturn \"Comedy\"\n\telse if mood is equal to \"sad\" then\n\t\treturn \"Drama\"\n\telse if mood is equal to \"excited\" then\n\t\treturn \"Action\"\n\telse if mood is equal to \"scared\" then\n\t\treturn \"Horror\"\n\telse if mood is equal to \"romantic\" then\n\t\treturn \"Romance\"\n\telse\n\t\treturn \"Documentary\"\n\tend if\nend suggestMovieGenre\n```"
  },
  {
    "task": "Write a program that checks if a file extension is valid for an image file.",
    "code": "```applescript\nset validExtensions to {\"jpg\", \"jpeg\", \"png\", \"gif\", \"bmp\", \"tiff\"}\nset fileName to \"example.png\"\n\nset AppleScript's text item delimiters to \".\"\nset fileExtension to last text item of fileName\n\nif fileExtension is in validExtensions then\n\tdisplay dialog \"The file extension is valid for an image file.\"\nelse\n\tdisplay dialog \"The file extension is not valid for an image file.\"\nend if\n```"
  },
  {
    "task": "Create a routine that decides the appropriate currency symbol based on country.",
    "code": "```applescript\non getCurrencySymbolForCountry(country)\n\tif country is \"United States\" then\n\t\treturn \"$\"\n\telse if country is \"United Kingdom\" then\n\t\treturn \"\u00a3\"\n\telse if country is \"Japan\" then\n\t\treturn \"\u00a5\"\n\telse if country is \"Eurozone\" then\n\t\treturn \"\u20ac\"\n\telse if country is \"India\" then\n\t\treturn \"\u20b9\"\n\telse\n\t\treturn \"Currency not found\"\n\tend if\nend getCurrencySymbolForCountry\n\n-- Example usage\nset country to \"Japan\"\nset currencySymbol to getCurrencySymbolForCountry(country)\ndisplay dialog \"The currency symbol for \" & country & \" is \" & currencySymbol\n```"
  },
  {
    "task": "Develop a function that determines if a string is a valid palindrome ignoring spaces and punctuation.",
    "code": "```applescript\non isPalindrome(inputString)\n\tset cleanString to \"\"\n\trepeat with i from 1 to length of inputString\n\t\tset char to character i of inputString\n\t\tif char is not in \" ,.!?;:\" then\n\t\t\tset cleanString to cleanString & char\n\t\tend if\n\tend repeat\n\t\n\tset cleanString to do shell script \"echo \" & quoted form of cleanString & \" | tr '[:upper:]' '[:lower:]'\"\n\tset reversedString to (reverse of characters of cleanString) as string\n\t\n\tif cleanString is equal to reversedString then\n\t\treturn true\n\telse\n\t\treturn false\n\tend if\nend isPalindrome\n```"
  },
  {
    "task": "Implement a program that checks if a number is in the Fibonacci sequence.",
    "code": "```applescript\nset inputNumber to 8 -- Example number to check\n\non isFibonacci(n)\n    if n < 0 then return false\n    set a to 0\n    set b to 1\n    if n = a or n = b then return true\n    repeat\n        set c to a + b\n        if c = n then return true\n        if c > n then exit repeat\n        set a to b\n        set b to c\n    end repeat\n    return false\nend isFibonacci\n\nset result to isFibonacci(inputNumber)\nif result then\n    display dialog (inputNumber as string) & \" is in the Fibonacci sequence.\"\nelse\n    display dialog (inputNumber as string) & \" is not in the Fibonacci sequence.\"\nend if\n```"
  },
  {
    "task": "Design a script to calculate the correct tip based on service quality rating.",
    "code": "```applescript\nset serviceQuality to text returned of (display dialog \"Enter service quality (excellent, good, average, poor):\" default answer \"\")\n\nset billAmount to text returned of (display dialog \"Enter bill amount:\" default answer \"\")\nset billAmount to billAmount as number\n\nset tipPercentage to 0\n\nif serviceQuality is equal to \"excellent\" then\n    set tipPercentage to 20\nelse if serviceQuality is equal to \"good\" then\n    set tipPercentage to 15\nelse if serviceQuality is equal to \"average\" then\n    set tipPercentage to 10\nelse if serviceQuality is equal to \"poor\" then\n    set tipPercentage to 5\nend if\n\nset tipAmount to (billAmount * tipPercentage / 100)\ndisplay dialog \"The tip amount is: $\" & tipAmount\n```"
  },
  {
    "task": "Write a function that determines if a year is a century year.",
    "code": "```applescript\non isCenturyYear(year)\n\tif year mod 100 is 0 then\n\t\treturn true\n\telse\n\t\treturn false\n\tend if\nend isCenturyYear\n```"
  },
  {
    "task": "Create a program that checks if a date falls on a weekend.",
    "code": "```applescript\nset inputDate to date \"Saturday, October 21, 2023 12:00:00 AM\"\n\nset dayOfWeek to weekday of inputDate\n\nif dayOfWeek is Saturday or dayOfWeek is Sunday then\n    display dialog \"The date falls on a weekend.\"\nelse\n    display dialog \"The date does not fall on a weekend.\"\nend if\n```"
  },
  {
    "task": "Develop a routine that suggests a book based on genre preference.",
    "code": "```applescript\nset genrePreference to text returned of (display dialog \"Enter your preferred genre (e.g., Fiction, Non-Fiction, Mystery):\" default answer \"\")\n\nif genrePreference is \"Fiction\" then\n    display dialog \"We suggest: 'To Kill a Mockingbird' by Harper Lee\"\nelse if genrePreference is \"Non-Fiction\" then\n    display dialog \"We suggest: 'Sapiens: A Brief History of Humankind' by Yuval Noah Harari\"\nelse if genrePreference is \"Mystery\" then\n    display dialog \"We suggest: 'The Girl with the Dragon Tattoo' by Stieg Larsson\"\nelse\n    display dialog \"Sorry, we don't have suggestions for that genre.\"\nend if\n```"
  },
  {
    "task": "Implement a system that determines if a student passes or fails based on their grades.",
    "code": "```applescript\nset studentGrade to 75\n\nif studentGrade \u2265 50 then\n    display dialog \"The student passes.\"\nelse\n    display dialog \"The student fails.\"\nend if\n```"
  },
  {
    "task": "Design a function to validate if a string is a valid URL.",
    "code": "```applescript\non isValidURL(theURL)\n    if theURL starts with \"http://\" or theURL starts with \"https://\" then\n        return true\n    else\n        return false\n    end if\nend isValidURL\n```"
  },
  {
    "task": "Write a program that checks if a point is inside a rectangle given its coordinates.",
    "code": "```applescript\nset pointX to 5\nset pointY to 5\n\nset rectLeft to 2\nset rectTop to 2\nset rectRight to 8\nset rectBottom to 8\n\nif pointX \u2265 rectLeft and pointX \u2264 rectRight and pointY \u2265 rectTop and pointY \u2264 rectBottom then\n    display dialog \"The point is inside the rectangle.\"\nelse\n    display dialog \"The point is outside the rectangle.\"\nend if\n```"
  },
  {
    "task": "Create a script to determine if a word can be constructed from a given set of letters.",
    "code": "```applescript\non canConstructWord(word, letters)\n\tset wordList to characters of word\n\tset lettersList to characters of letters\n\t\n\trepeat with letter in wordList\n\t\tif letter is in lettersList then\n\t\t\tset lettersList to removeFirstOccurrence(letter, lettersList)\n\t\telse\n\t\t\treturn false\n\t\tend if\n\tend repeat\n\t\n\treturn true\nend canConstructWord\n\non removeFirstOccurrence(letter, lettersList)\n\tset found to false\n\tset newList to {}\n\trepeat with l in lettersList\n\t\tif l is letter and not found then\n\t\t\tset found to true\n\t\telse\n\t\t\tset end of newList to l\n\t\tend if\n\tend repeat\n\treturn newList\nend removeFirstOccurrence\n\n-- Example usage\nset word to \"apple\"\nset letters to \"aplepp\"\nset result to canConstructWord(word, letters)\ndisplay dialog \"Can construct word: \" & result\n```"
  },
  {
    "task": "Develop a routine that calculates insurance premiums based on age and driving record.",
    "code": "```applescript\non calculateInsurancePremium(age, hasGoodDrivingRecord)\n\tif age < 25 then\n\t\tif hasGoodDrivingRecord then\n\t\t\tset premium to 1500\n\t\telse\n\t\t\tset premium to 2000\n\t\tend if\n\telse\n\t\tif hasGoodDrivingRecord then\n\t\t\tset premium to 1000\n\t\telse\n\t\t\tset premium to 1200\n\t\tend if\n\tend if\n\treturn premium\nend calculateInsurancePremium\n\n-- Example usage:\nset age to 30\nset hasGoodDrivingRecord to true\nset premium to calculateInsurancePremium(age, hasGoodDrivingRecord)\ndisplay dialog \"Your insurance premium is $\" & premium\n```"
  },
  {
    "task": "Implement a program that checks for palindrome sentences.",
    "code": "```applescript\nset inputSentence to \"A man a plan a canal Panama\"\nset cleanedSentence to do shell script \"echo \" & quoted form of inputSentence & \" | tr -d '[:space:]' | tr '[:upper:]' '[:lower:]'\"\nset reversedSentence to do shell script \"echo \" & quoted form of cleanedSentence & \" | rev\"\n\nif cleanedSentence is equal to reversedSentence then\n    display dialog \"The sentence is a palindrome.\"\nelse\n    display dialog \"The sentence is not a palindrome.\"\nend if\n```"
  },
  {
    "task": "Design a function to evaluate if a string contains balanced parentheses.",
    "code": "```applescript\non isBalancedParentheses(inputString)\n\tset openCount to 0\n\tset closeCount to 0\n\trepeat with i from 1 to (length of inputString)\n\t\tset currentChar to character i of inputString\n\t\tif currentChar is \"(\" then\n\t\t\tset openCount to openCount + 1\n\t\telse if currentChar is \")\" then\n\t\t\tset closeCount to closeCount + 1\n\t\t\tif closeCount is greater than openCount then\n\t\t\t\treturn false\n\t\t\tend if\n\t\tend if\n\tend repeat\n\tif openCount is equal to closeCount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend if\nend isBalancedParentheses\n```"
  },
  {
    "task": "Write a program that suggests a pet based on living conditions and preferences.",
    "code": "```applescript\nset livingCondition to text returned of (display dialog \"What is your living condition? (apartment/house)\" default answer \"\")\nset preference to text returned of (display dialog \"Do you prefer low maintenance pets? (yes/no)\" default answer \"\")\n\nif livingCondition is \"apartment\" then\n    if preference is \"yes\" then\n        set suggestion to \"fish\"\n    else\n        set suggestion to \"cat\"\n    end if\nelse if livingCondition is \"house\" then\n    if preference is \"yes\" then\n        set suggestion to \"bird\"\n    else\n        set suggestion to \"dog\"\n    end if\nelse\n    set suggestion to \"Please provide a valid input.\"\nend if\n\ndisplay dialog \"Based on your living condition and preference, we suggest you get a \" & suggestion\n```"
  },
  {
    "task": "Create a routine that determines if a phone number is valid based on format.",
    "code": "```applescript\non isValidPhoneNumber(phoneNumber)\n    set validFormat to false\n    \n    if (phoneNumber starts with \"+\") then\n        if ((count of phoneNumber) is equal to 12) then\n            set validFormat to true\n        end if\n    else if ((count of phoneNumber) is equal to 10) then\n        set validFormat to true\n    end if\n    \n    return validFormat\nend isValidPhoneNumber\n\n-- Example usage\nset phoneNumber to \"+1234567890\"\nset isValid to isValidPhoneNumber(phoneNumber)\ndisplay dialog \"Is the phone number valid? \" & isValid\n```"
  },
  {
    "task": "Develop a function that checks if two rectangles overlap.",
    "code": "```applescript\non rectanglesOverlap(rect1, rect2)\n    set {x1, y1, w1, h1} to rect1\n    set {x2, y2, w2, h2} to rect2\n\n    if (x1 + w1 > x2) and (x2 + w2 > x1) and (y1 + h1 > y2) and (y2 + h2 > y1) then\n        return true\n    else\n        return false\n    end if\nend rectanglesOverlap\n```"
  },
  {
    "task": "Implement a program that chooses a beverage based on user input time.",
    "code": "```applescript\nset userTime to text returned of (display dialog \"Enter the current time in 24-hour format (e.g., 13 for 1 PM):\" default answer \"\")\n\nif userTime is greater than or equal to 5 and userTime is less than 12 then\n    display dialog \"It's morning. How about a cup of coffee?\"\nelse if userTime is greater than or equal to 12 and userTime is less than 18 then\n    display dialog \"It's afternoon. How about some tea?\"\nelse if (userTime is greater than or equal to 18 and userTime is less than 24) or (userTime is greater than or equal to 0 and userTime is less than 5) then\n    display dialog \"It's evening/night. How about a glass of milk?\"\nelse\n    display dialog \"Invalid time entered. Please enter a valid time between 0 and 23.\"\nend if\n```"
  },
  {
    "task": "Design a script to determine if a URL is secure (HTTPS).",
    "code": "```applescript\nset url to \"https://www.example.com\"\n\nif url starts with \"https://\" then\n    display dialog \"The URL is secure.\"\nelse\n    display dialog \"The URL is not secure.\"\nend if\n```"
  },
  {
    "task": "Write a function that outputs different messages based on the input number's divisibility.",
    "code": "```applescript\non checkDivisibility(inputNumber)\n\tif inputNumber mod 15 is 0 then\n\t\treturn \"Divisible by 15\"\n\telse if inputNumber mod 5 is 0 then\n\t\treturn \"Divisible by 5\"\n\telse if inputNumber mod 3 is 0 then\n\t\treturn \"Divisible by 3\"\n\telse\n\t\treturn \"Not divisible by 3, 5, or 15\"\n\tend if\nend checkDivisibility\n```"
  },
  {
    "task": "Create a program to decide if a person should bring an umbrella based on the weather forecast.",
    "code": "```applescript\nset weatherForecast to \"rainy\" -- Example weather condition: \"sunny\", \"cloudy\", \"rainy\", etc.\n\nif weatherForecast is equal to \"rainy\" then\n    display dialog \"You should bring an umbrella.\"\nelse\n    display dialog \"No need for an umbrella.\"\nend if\n```"
  },
  {
    "task": "Develop a routine that checks if a chess move is valid.",
    "code": "```applescript\non isValidChessMove(startSquare, endSquare, pieceType, board)\n    set validMove to false\n    \n    if pieceType is \"Pawn\" then\n        if startSquare is not endSquare then\n            set validMove to true\n        end if\n    else if pieceType is \"Rook\" then\n        if item 1 of startSquare is item 1 of endSquare or item 2 of startSquare is item 2 of endSquare then\n            set validMove to true\n        end if\n    else if pieceType is \"Knight\" then\n        set dx to abs(item 1 of startSquare - item 1 of endSquare)\n        set dy to abs(item 2 of startSquare - item 2 of endSquare)\n        if (dx is 2 and dy is 1) or (dx is 1 and dy is 2) then\n            set validMove to true\n        end if\n    else if pieceType is \"Bishop\" then\n        if abs(item 1 of startSquare - item 1 of endSquare) is abs(item 2 of startSquare - item 2 of endSquare) then\n            set validMove to true\n        end if\n    else if pieceType is \"Queen\" then\n        if (item 1 of startSquare is item 1 of endSquare) or (item 2 of startSquare is item 2 of endSquare) or (abs(item 1 of startSquare - item 1 of endSquare) is abs(item 2 of startSquare - item 2 of endSquare)) then\n            set validMove to true\n        end if\n    else if pieceType is \"King\" then\n        if abs(item 1 of startSquare - item 1 of endSquare) \u2264 1 and abs(item 2 of startSquare - item 2 of endSquare) \u2264 1 then\n            set validMove to true\n        end if\n    end if\n    \n    return validMove\nend isValidChessMove\n```"
  },
  {
    "task": "Implement a program that outputs the number of days in a given month.",
    "code": "```applescript\nset monthName to \"February\"\n\nif monthName is \"January\" then\n\treturn 31\nelse if monthName is \"February\" then\n\treturn 28\nelse if monthName is \"March\" then\n\treturn 31\nelse if monthName is \"April\" then\n\treturn 30\nelse if monthName is \"May\" then\n\treturn 31\nelse if monthName is \"June\" then\n\treturn 30\nelse if monthName is \"July\" then\n\treturn 31\nelse if monthName is \"August\" then\n\treturn 31\nelse if monthName is \"September\" then\n\treturn 30\nelse if monthName is \"October\" then\n\treturn 31\nelse if monthName is \"November\" then\n\treturn 30\nelse if monthName is \"December\" then\n\treturn 31\nelse\n\treturn \"Invalid month\"\nend if\n```"
  },
  {
    "task": "Design a function that validates if a string is a valid hexadecimal number.",
    "code": "```applescript\non isValidHexadecimal(inputString)\n    set hexChars to \"0123456789abcdefABCDEF\"\n    set isValid to true\n    \n    repeat with i from 1 to (length of inputString)\n        set currentChar to character i of inputString\n        if hexChars does not contain currentChar then\n            set isValid to false\n            exit repeat\n        end if\n    end repeat\n    \n    return isValid\nend isValidHexadecimal\n```"
  },
  {
    "task": "Write a script that checks if a word is present in a list of predefined words.",
    "code": "```applescript\nset predefinedWords to {\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"}\nset wordToCheck to \"banana\"\n\nif wordToCheck is in predefinedWords then\n    display dialog \"The word is in the list.\"\nelse\n    display dialog \"The word is not in the list.\"\nend if\n```"
  },
  {
    "task": "Create a routine to decide the correct tax bracket for a given income.",
    "code": "```applescript\non decideTaxBracket(income)\n\tif income < 9875 then\n\t\tset taxBracket to \"10%\"\n\telse if income < 40125 then\n\t\tset taxBracket to \"12%\"\n\telse if income < 85525 then\n\t\tset taxBracket to \"22%\"\n\telse if income < 163300 then\n\t\tset taxBracket to \"24%\"\n\telse if income < 207350 then\n\t\tset taxBracket to \"32%\"\n\telse if income < 518400 then\n\t\tset taxBracket to \"35%\"\n\telse\n\t\tset taxBracket to \"37%\"\n\tend if\n\treturn taxBracket\nend decideTaxBracket\n```"
  },
  {
    "task": "Develop a function that determines if a point is within a triangle.",
    "code": "```applescript\non isPointInTriangle(px, py, ax, ay, bx, by, cx, cy)\n    set b1 to sign(px, py, ax, ay, bx, by) < 0\n    set b2 to sign(px, py, bx, by, cx, cy) < 0\n    set b3 to sign(px, py, cx, cy, ax, ay) < 0\n    \n    if (b1 is equal to b2) and (b2 is equal to b3) then\n        return true\n    else\n        return false\n    end if\nend isPointInTriangle\n\non sign(px, py, ax, ay, bx, by)\n    return (px - bx) * (ay - by) - (ax - bx) * (py - by)\nend sign\n```"
  },
  {
    "task": "Implement a program that checks if a given string is a valid binary number.",
    "code": "```applescript\nset binaryString to \"1100101\"\n\nif isValidBinary(binaryString) then\n    display dialog \"The string is a valid binary number.\"\nelse\n    display dialog \"The string is not a valid binary number.\"\nend if\n\non isValidBinary(inputString)\n    set binaryChars to \"01\"\n    set isValid to true\n    repeat with i from 1 to (length of inputString)\n        set currentChar to character i of inputString\n        if binaryChars does not contain currentChar then\n            set isValid to false\n            exit repeat\n        end if\n    end repeat\n    return isValid\nend isValidBinary\n```"
  },
  {
    "task": "Design a system to evaluate the risk level of an investment based on criteria.",
    "code": "```applescript\nset investmentAmount to 10000\nset investmentType to \"stocks\"\nset riskLevel to \"\"\n\nif investmentAmount < 5000 then\n    set riskLevel to \"low\"\nelse if investmentAmount \u2265 5000 and investmentAmount < 15000 then\n    if investmentType is \"stocks\" then\n        set riskLevel to \"medium\"\n    else\n        set riskLevel to \"low\"\n    end if\nelse\n    if investmentType is \"stocks\" then\n        set riskLevel to \"high\"\n    else if investmentType is \"bonds\" then\n        set riskLevel to \"medium\"\n    else\n        set riskLevel to \"low\"\n    end if\nend if\n\nreturn riskLevel\n```"
  },
  {
    "task": "Write a program that suggests a vacation destination based on budget and preferences.",
    "code": "```applescript\nset budget to 1000\nset preference to \"beach\"\n\nif budget < 500 then\n    if preference is \"beach\" then\n        set destination to \"Local Beach\"\n    else if preference is \"mountain\" then\n        set destination to \"Nearby Mountain\"\n    else\n        set destination to \"City Tour\"\n    end if\nelse if budget is greater than or equal to 500 and budget is less than 1500 then\n    if preference is \"beach\" then\n        set destination to \"Caribbean Island\"\n    else if preference is \"mountain\" then\n        set destination to \"Rocky Mountains\"\n    else\n        set destination to \"European City\"\n    end if\nelse\n    if preference is \"beach\" then\n        set destination to \"Maldives\"\n    else if preference is \"mountain\" then\n        set destination to \"Swiss Alps\"\n    else\n        set destination to \"World Tour\"\n    end if\nend if\n\ndisplay dialog \"Suggested Vacation Destination: \" & destination\n```"
  },
  {
    "task": "Create a routine that checks if a username is already taken in a database.",
    "code": "```applescript\nset usernameToCheck to \"desiredUsername\"\nset usernameTaken to false\n\n-- Simulated database of usernames\nset userDatabase to {\"user1\", \"user2\", \"desiredUsername\", \"user4\"}\n\nrepeat with user in userDatabase\n    if usernameToCheck is equal to user then\n        set usernameTaken to true\n        exit repeat\n    end if\nend repeat\n\nif usernameTaken then\n    display dialog \"Username is already taken.\"\nelse\n    display dialog \"Username is available.\"\nend if\n```"
  },
  {
    "task": "Develop a function that determines if a string is a valid IPv4 address.",
    "code": "```applescript\non isValidIPv4Address(ipAddress)\n    set ipParts to my split(ipAddress, \".\")\n    if (count of ipParts) is not 4 then\n        return false\n    end if\n    repeat with part in ipParts\n        if (part is \"\") or (part is not an integer) then\n            return false\n        end if\n        set numPart to (part as integer)\n        if numPart < 0 or numPart > 255 then\n            return false\n        end if\n    end repeat\n    return true\nend isValidIPv4Address\n\non split(theString, theDelimiter)\n    set AppleScript's text item delimiters to theDelimiter\n    set theItems to text items of theString\n    set AppleScript's text item delimiters to \"\"\n    return theItems\nend split\n```"
  },
  {
    "task": "Implement a program to decide which transportation method is quickest based on distance.",
    "code": "```applescript\nset distance to 10 -- example distance in kilometers\n\nif distance is less than or equal to 2 then\n    set transportMethod to \"walking\"\nelse if distance is greater than 2 and distance is less than or equal to 10 then\n    set transportMethod to \"biking\"\nelse if distance is greater than 10 and distance is less than or equal to 50 then\n    set transportMethod to \"car\"\nelse\n    set transportMethod to \"plane\"\nend if\n\ndisplay dialog \"The quickest transportation method is: \" & transportMethod\n```"
  },
  {
    "task": "Design a script to validate if a number is a prime number.",
    "code": "```applescript\non isPrime(n)\n    if n \u2264 1 then\n        return false\n    else if n = 2 then\n        return true\n    else if n mod 2 = 0 then\n        return false\n    end if\n    set divisor to 3\n    set maxCheck to n div 2\n    repeat while divisor \u2264 maxCheck\n        if n mod divisor = 0 then\n            return false\n        end if\n        set divisor to divisor + 2\n    end repeat\n    return true\nend isPrime\n\n-- Example usage\nset number to 29\nif isPrime(number) then\n    display dialog (number as string) & \" is a prime number.\"\nelse\n    display dialog (number as string) & \" is not a prime number.\"\nend if\n```"
  },
  {
    "task": "Write a function that checks if a number is divisible by another number without remainder.",
    "code": "```applescript\non isDivisible(number, divisor)\n\tif divisor is not 0 then\n\t\tif number mod divisor is 0 then\n\t\t\treturn true\n\t\telse\n\t\t\treturn false\n\t\tend if\n\telse\n\t\treturn false\n\tend if\nend isDivisible\n```"
  },
  {
    "task": "Create a program that determines the type of a quadrilateral based on side lengths.",
    "code": "```applescript\nset side1 to 10\nset side2 to 10\nset side3 to 10\nset side4 to 10\n\nif side1 = side2 and side2 = side3 and side3 = side4 then\n    set quadrilateralType to \"Square\"\nelse if (side1 = side3 and side2 = side4) or (side1 = side2 and side3 = side4) then\n    set quadrilateralType to \"Rectangle\"\nelse\n    set quadrilateralType to \"Other Quadrilateral\"\nend if\n\ndisplay dialog \"The quadrilateral is a \" & quadrilateralType\n```"
  },
  {
    "task": "Develop a routine to check if a sentence contains all letters of the alphabet.",
    "code": "```applescript\non containsAllLetters(sentence)\n    set alphabet to \"abcdefghijklmnopqrstuvwxyz\"\n    set sentenceLower to do shell script \"echo \" & quoted form of sentence & \" | tr '[:upper:]' '[:lower:]'\"\n    repeat with letter in alphabet\n        if sentenceLower does not contain letter then\n            return false\n        end if\n    end repeat\n    return true\nend containsAllLetters\n\n-- Example usage\nset testSentence to \"The quick brown fox jumps over the lazy dog\"\nset result to containsAllLetters(testSentence)\ndisplay dialog \"Does the sentence contain all letters of the alphabet? \" & result\n```"
  },
  {
    "task": "Implement a program that outputs the appropriate error message based on an error code.",
    "code": "```applescript\nset errorCode to 404\n\nif errorCode is 400 then\n    display dialog \"Bad Request\"\nelse if errorCode is 401 then\n    display dialog \"Unauthorized\"\nelse if errorCode is 403 then\n    display dialog \"Forbidden\"\nelse if errorCode is 404 then\n    display dialog \"Not Found\"\nelse if errorCode is 500 then\n    display dialog \"Internal Server Error\"\nelse\n    display dialog \"Unknown Error\"\nend if\n```"
  },
  {
    "task": "Design a function that categorizes a movie rating as G, PG, PG-13, or R.",
    "code": "```applescript\non categorizeMovieRating(rating)\n    if rating is greater than or equal to 0 and rating is less than or equal to 1 then\n        return \"G\"\n    else if rating is greater than 1 and rating is less than or equal to 2 then\n        return \"PG\"\n    else if rating is greater than 2 and rating is less than or equal to 3 then\n        return \"PG-13\"\n    else if rating is greater than 3 and rating is less than or equal to 4 then\n        return \"R\"\n    else\n        return \"Invalid rating\"\n    end if\nend categorizeMovieRating\n```"
  },
  {
    "task": "Write a script to check if a string is a valid Roman numeral.",
    "code": "```applescript\nset romanNumeral to \"XIV\"\n\nif isValidRomanNumeral(romanNumeral) then\n    display dialog \"Valid Roman numeral\"\nelse\n    display dialog \"Invalid Roman numeral\"\nend if\n\non isValidRomanNumeral(s)\n    set romanPattern to \"^(?i)(M{0,4}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3}))$\"\n    return (do shell script \"echo \" & quoted form of s & \" | grep -E \" & quoted form of romanPattern) is not \"\"\nend isValidRomanNumeral\n```"
  },
  {
    "task": "Create a routine that decides if a person can retire based on age and years worked.",
    "code": "```applescript\non canRetire(age, yearsWorked)\n    if age \u2265 65 or yearsWorked \u2265 40 then\n        return \"You can retire.\"\n    else\n        return \"You cannot retire yet.\"\n    end if\nend canRetire\n\n-- Example usage\nset age to 67\nset yearsWorked to 35\nset result to canRetire(age, yearsWorked)\ndisplay dialog result\n```"
  },
  {
    "task": "Develop a function that outputs a different emoji based on user mood input.",
    "code": "```applescript\non getEmojiForMood(mood)\n\tif mood is \"happy\" then\n\t\treturn \"\ud83d\ude0a\"\n\telse if mood is \"sad\" then\n\t\treturn \"\ud83d\ude22\"\n\telse if mood is \"angry\" then\n\t\treturn \"\ud83d\ude20\"\n\telse if mood is \"excited\" then\n\t\treturn \"\ud83d\ude03\"\n\telse if mood is \"bored\" then\n\t\treturn \"\ud83d\ude10\"\n\telse\n\t\treturn \"\ud83e\udd14\"\n\tend if\nend getEmojiForMood\n```"
  },
  {
    "task": "Implement a program that checks if a password meets security requirements.",
    "code": "```applescript\nset password to \"YourPasswordHere\"\n\nif (length of password) \u2265 8 then\n\tset hasUpperCase to false\n\tset hasLowerCase to false\n\tset hasDigit to false\n\t\n\trepeat with i from 1 to length of password\n\t\tset char to character i of password\n\t\tif char is in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" then\n\t\t\tset hasUpperCase to true\n\t\telse if char is in \"abcdefghijklmnopqrstuvwxyz\" then\n\t\t\tset hasLowerCase to true\n\t\telse if char is in \"0123456789\" then\n\t\t\tset hasDigit to true\n\t\tend if\n\tend repeat\n\t\n\tif hasUpperCase and hasLowerCase and hasDigit then\n\t\tdisplay dialog \"Password is secure.\"\n\telse\n\t\tdisplay dialog \"Password must contain uppercase, lowercase, and a digit.\"\n\tend if\nelse\n\tdisplay dialog \"Password must be at least 8 characters long.\"\nend if\n```"
  },
  {
    "task": "Design a script to determine if a number is a palindrome when reversed.",
    "code": "```applescript\nset num to \"12321\"\nset reversedNum to reverseText(num)\n\nif num is equal to reversedNum then\n    display dialog num & \" is a palindrome.\"\nelse\n    display dialog num & \" is not a palindrome.\"\nend if\n\non reverseText(t)\n    set charList to characters of t\n    set reversedList to reverse of charList\n    return reversedList as string\nend reverseText\n```"
  },
  {
    "task": "Write a function that evaluates if a given day is a holiday.",
    "code": "```applescript\non isHoliday(day)\n\tset holidays to {\"New Year's Day\", \"Christmas Day\", \"Independence Day\", \"Thanksgiving Day\"}\n\tif day is in holidays then\n\t\treturn true\n\telse\n\t\treturn false\n\tend if\nend isHoliday\n```"
  },
  {
    "task": "Create a program to decide if a library book is overdue based on the due date.",
    "code": "```applescript\nset dueDate to date \"Wednesday, October 25, 2023 at 12:00:00 AM\"\nset currentDate to current date\n\nif currentDate > dueDate then\n    display dialog \"The library book is overdue.\"\nelse\n    display dialog \"The library book is not overdue.\"\nend if\n```"
  },
  {
    "task": "Develop a routine that checks if a given year is part of a leap century.",
    "code": "```applescript\non isLeapCentury(theYear)\n    set isLeap to false\n    if (theYear mod 100 = 0) then\n        if (theYear mod 400 = 0) then\n            set isLeap to true\n        end if\n    end if\n    return isLeap\nend isLeapCentury\n\n-- Example usage\nset year to 2000\nset result to isLeapCentury(year)\nif result then\n    display dialog (year as string) & \" is a leap century.\"\nelse\n    display dialog (year as string) & \" is not a leap century.\"\nend if\n```"
  },
  {
    "task": "Implement a system to determine the correct category for a product based on user input.",
    "code": "```applescript\nset userInput to text returned of (display dialog \"Enter product type:\" default answer \"\")\n\nif userInput is equal to \"Electronics\" then\n    set category to \"Technology\"\nelse if userInput is equal to \"Shirts\" then\n    set category to \"Apparel\"\nelse if userInput is equal to \"Books\" then\n    set category to \"Literature\"\nelse\n    set category to \"Miscellaneous\"\nend if\n\ndisplay dialog \"The product category is: \" & category\n```"
  }
]