{
    "Rust Map": "fn my_map<F, T, U>(func: F, arr: Vec<T>) -> Vec<U>\nwhere\n    F: Fn(T) -> U,\n{\n    arr.into_iter().map(func).collect()\n}",
    "JavaScript Map": "function map(callback, arr) {\n    const result = [];\n    for (let i = 0; i < arr.length; i++) {\n        result.push(callback(arr[i]));\n    }\n    return result;\n}",
    "Python Map": "def my_map(func, lst):\n    result = []\n    for x in lst:\n        result.append(func(x))\n    return result\n",
    "Java Map": "public static <T, R> List<R> map(Function<T, R> mapper, List<T> list) {\n    List<R> result = new ArrayList<>();\n    for (T item : list) {\n        result.add(mapper.apply(item));\n    }\n    return result;\n}",
    "Kotlin Map": "fun <T, R> myMap(transform: (T) -> R, list: List<T>): List<R> {\n    val result = mutableListOf<R>()\n    for (item in list) {\n        result.add(transform(item))\n    }\n    return result\n}\n",
    "C++ Map": "std::vector<int> map(const std::vector<int> &arr, map_func func)\n{\n    std::vector<int> result;\n    for (int x : arr)\n    {\n        result.push_back(func(x));\n    }\n    return result;\n}",
    "Haskell Map": "map' :: (a -> b) -> [a] -> [b]\nmap' _ [] = []\nmap' f (x:xs) = f x : map' f xs",
    "C Map": "void map(int *arr, int size, map_func func)\n{\n    for (int i = 0; i < size; i++)\n    {\n        arr[i] = func(arr[i]);\n    }\n}"
}