{
    "Rust OOP": "struct MyClass {\n    data_value: i32,\n}\n\nimpl MyClass {\n    fn new(initial_value: i32) -> MyClass {\n        MyClass { data_value: initial_value }\n    }\n\n    fn set_data(&mut self, new_value: i32) {\n        self.data_value = new_value;\n    }\n\n    fn get_data(&self) -> i32 {\n        self.data_value\n    }\n}\n\nfn main() {\n    let mut obj = MyClass::new(42);\n\n    println!(\"Data: {}\", obj.get_data());\n\n    obj.set_data(100);\n\n    println!(\"Updated Data: {}\", obj.get_data());\n}\n",
    "JavaScript OOP": "class MyClass {\n    constructor(dataValue) {\n        this.dataValue = dataValue;\n    }\n\n    setData(newValue) {\n        this.dataValue = newValue;\n    }\n\n    getData() {\n        return this.dataValue;\n    }\n}\n\nlet obj = new MyClass(42);\n\nconsole.log(\"Data: \" + obj.getData());\n",
    "Python OOP": "class MyClass:\n    def __init__(self, data_value):\n        self.data_value = data_value\n\n    def set_data(self, new_value):\n        self.data_value = new_value\n\n    def get_data(self):\n        return self.data_value\n\n\nobj = MyClass(42)\n\nprint(\"Data:\", obj.get_data())\n",
    "Java OOP": "class MyClass {\n    private int dataValue;\n\n    public MyClass(int dataValue) {\n        this.dataValue = dataValue;\n    }\n\n    public void setData(int newValue) {\n        this.dataValue = newValue;\n    }\n\n    public int getData() {\n        return this.dataValue;\n    }\n}\n\npublic class code {\n    public static void main(String[] args) {\n        MyClass obj = new MyClass(42);\n\n        System.out.println(\"Data: \" + obj.getData());\n    }\n}\n",
    "Kotlin OOP": "class MyClass(private var dataValue: Int) {\n    fun setData(newValue: Int) {\n        dataValue = newValue\n    }\n\n    fun getData(): Int {\n        return dataValue\n    }\n}\n\nfun main() {\n    val obj = MyClass(42)\n\n    println(\"Data: ${obj.getData()}\")\n}\n",
    "C++ OOP": "class MyClass\n{\nprivate:\n    int data;\n\npublic:\n    MyClass()\n    {\n        data = 0;\n    }\n\n    void setData(int value)\n    {\n        data = value;\n    }\n\n    int getData()\n    {\n        return data;\n    }\n};\n\nint main()\n{\n    MyClass obj;\n\n    obj.setData(42);\n\n    std::cout << \"Data: \" << obj.getData() << std::endl;\n\n    return 0;\n}\n",
    "Haskell OOP": "data MyClass = MyClass { dataValue :: Int }\n\nsetData :: Int -> MyClass -> MyClass\nsetData newValue obj = obj { dataValue = newValue }\n\ngetData :: MyClass -> Int\ngetData obj = dataValue obj\n\nmain :: IO ()\nmain = do\n    let obj = MyClass { dataValue = 42 }\n\n    putStrLn $ \"Data: \" ++ show (getData obj)\n",
    "C OOP": "typedef struct\n{\n    int data;\n    void (*setData)(int);\n    int (*getData)();\n} MyClass;\n\nvoid MyClass_init(MyClass *self)\n{\n    self->data = 0;\n}\n\nvoid MyClass_setData(MyClass *self, int value)\n{\n    self->data = value;\n}\n\nint MyClass_getData(MyClass *self)\n{\n    return self->data;\n}\n\nint main()\n{\n    MyClass obj;\n\n    MyClass_init(&obj);\n\n    obj.setData(&obj, 42);\n\n    printf(\"Data: %d\\n\", obj.getData(&obj));\n\n    return 0;\n}\n"
}