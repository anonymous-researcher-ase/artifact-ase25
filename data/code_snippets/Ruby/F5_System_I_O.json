[
  {
    "task": "Write a program that reads a user's name and age from the input, then prints a greeting message using both values.",
    "code": "```ruby\nputs \"Enter your name:\"\nname = gets.chomp\nputs \"Enter your age:\"\nage = gets.chomp\nputs \"Hello, #{name}! You are #{age} years old.\"\n```"
  },
  {
    "task": "Create a script that continuously reads numbers from the input and prints their running total until a negative number is entered.",
    "code": "```ruby\nrunning_total = 0\n\nloop do\n  input = gets.chomp.to_i\n  break if input < 0\n  running_total += input\n  puts running_total\nend\n```"
  },
  {
    "task": "Design a program that asks the user for a sentence and outputs the number of words it contains.",
    "code": "```ruby\nputs \"Please enter a sentence:\"\nsentence = gets.chomp\nword_count = sentence.split.size\nputs \"The number of words in the sentence is: #{word_count}\"\n```"
  },
  {
    "task": "Build a command-line tool that reads a list of integers and outputs them in sorted order.",
    "code": "```ruby\nputs \"Enter a list of integers separated by spaces:\"\ninput = gets.chomp\nnumbers = input.split.map(&:to_i)\nsorted_numbers = numbers.sort\nputs \"Sorted numbers:\"\nputs sorted_numbers.join(' ')\n```"
  },
  {
    "task": "Develop a program that reads a file name from the input, then prints the number of lines in that file.",
    "code": "```ruby\nfile_name = gets.chomp\nline_count = File.readlines(file_name).size\nputs line_count\n```"
  },
  {
    "task": "Implement a calculator that reads two numbers and an operator (+, -, *, /) from the input and prints the result.",
    "code": "```ruby\nputs \"Enter first number:\"\nnum1 = gets.to_f\nputs \"Enter second number:\"\nnum2 = gets.to_f\nputs \"Enter operator (+, -, *, /):\"\noperator = gets.chomp\n\nresult = case operator\n         when \"+\"\n           num1 + num2\n         when \"-\"\n           num1 - num2\n         when \"*\"\n           num1 * num2\n         when \"/\"\n           num1 / num2\n         else\n           \"Invalid operator\"\n         end\n\nputs \"Result: #{result}\"\n```"
  },
  {
    "task": "Write a script that reads a user's full name and prints it in reverse order.",
    "code": "```ruby\nputs \"Enter your full name:\"\nfull_name = gets.chomp\nputs full_name.reverse\n```"
  },
  {
    "task": "Create a program that asks for a word and checks if it is a palindrome, printing the appropriate message.",
    "code": "```ruby\nputs \"Enter a word:\"\nword = gets.chomp\nif word == word.reverse\n  puts \"The word is a palindrome.\"\nelse\n  puts \"The word is not a palindrome.\"\nend\n```"
  },
  {
    "task": "Develop a tool that reads multiple lines of text and outputs the longest line.",
    "code": "```ruby\nlines = []\nwhile input = gets\n  lines << input.chomp\nend\n\nlongest_line = lines.max_by(&:length)\nputs longest_line\n```"
  },
  {
    "task": "Design a script that reads a number 'n' and prints the first 'n' Fibonacci numbers.",
    "code": "```ruby\ndef fibonacci(n)\n  fibs = []\n  a, b = 0, 1\n  n.times do\n    fibs << a\n    a, b = b, a + b\n  end\n  fibs\nend\n\nprint \"Enter a number: \"\nn = gets.to_i\nputs fibonacci(n).join(\", \")\n```"
  },
  {
    "task": "Write a program that takes a list of numbers from the input and prints only the even ones.",
    "code": "```ruby\nnumbers = gets.split.map(&:to_i)\neven_numbers = numbers.select { |num| num.even? }\nputs even_numbers\n```"
  },
  {
    "task": "Create a script that reads a date (day, month, year) and prints the day of the week for that date.",
    "code": "```ruby\nrequire 'date'\n\nputs \"Enter day:\"\nday = gets.chomp.to_i\nputs \"Enter month:\"\nmonth = gets.chomp.to_i\nputs \"Enter year:\"\nyear = gets.chomp.to_i\n\ndate = Date.new(year, month, day)\nputs date.strftime(\"%A\")\n```"
  },
  {
    "task": "Develop a program that reads a paragraph and counts the frequency of each letter in the text.",
    "code": "```ruby\nputs \"Enter a paragraph:\"\nparagraph = gets.chomp\n\nfrequency = Hash.new(0)\n\nparagraph.each_char do |char|\n  frequency[char.downcase] += 1 if char =~ /[a-zA-Z]/\nend\n\nfrequency.each do |letter, count|\n  puts \"#{letter}: #{count}\"\nend\n```"
  },
  {
    "task": "Build a tool that reads a text and a word, then prints the number of times the word appears in the text.",
    "code": "```ruby\nputs \"Enter the text:\"\ntext = gets.chomp\nputs \"Enter the word to count:\"\nword = gets.chomp\n\ncount = text.scan(/\\b#{Regexp.escape(word)}\\b/).size\n\nputs \"The word '#{word}' appears #{count} times in the text.\"\n```"
  },
  {
    "task": "Implement a script that reads a temperature in Celsius and converts it to Fahrenheit, printing the result.",
    "code": "```ruby\nputs \"Enter temperature in Celsius:\"\ncelsius = gets.to_f\nfahrenheit = (celsius * 9 / 5) + 32\nputs \"Temperature in Fahrenheit: #{fahrenheit}\"\n```"
  },
  {
    "task": "Write a program that continuously reads input until the word 'exit' is entered, then prints all entered inputs.",
    "code": "```ruby\ninputs = []\n\nloop do\n  input = gets.chomp\n  break if input.downcase == 'exit'\n  inputs << input\nend\n\nputs inputs\n```"
  },
  {
    "task": "Create a tool that prompts for a filename, reads the file, and prints its content in uppercase.",
    "code": "```ruby\nputs \"Enter the filename:\"\nfilename = gets.chomp\n\nbegin\n  content = File.read(filename)\n  puts content.upcase\nrescue Errno::ENOENT\n  puts \"File not found.\"\nend\n```"
  },
  {
    "task": "Develop a program that reads a series of email addresses and prints the unique domain names.",
    "code": "```ruby\nrequire 'set'\n\ndomains = Set.new\n\nwhile line = gets\n  email = line.strip\n  domain = email.split('@')[1]\n  domains.add(domain) if domain\nend\n\ndomains.each { |domain| puts domain }\n```"
  },
  {
    "task": "Design a script that reads a string and prints whether it contains all the letters of the alphabet.",
    "code": "```ruby\ndef contains_all_alphabet?(str)\n  ('a'..'z').all? { |letter| str.downcase.include?(letter) }\nend\n\nputs \"Enter a string: \"\ninput = gets.chomp\n\nif contains_all_alphabet?(input)\n  puts \"The string contains all the letters of the alphabet.\"\nelse\n  puts \"The string does not contain all the letters of the alphabet.\"\nend\n```"
  },
  {
    "task": "Write a program that reads a number and prints its factorial.",
    "code": "```ruby\ndef factorial(n)\n  return 1 if n <= 1\n  n * factorial(n - 1)\nend\n\nputs \"Enter a number:\"\nnumber = gets.to_i\nputs \"Factorial: #{factorial(number)}\"\n```"
  },
  {
    "task": "Create a tool that reads a list of names and prints them in alphabetical order.",
    "code": "```ruby\nnames = []\n\nputs \"Enter names one by one, and type 'done' when finished:\"\nwhile true\n  input = gets.chomp\n  break if input.downcase == 'done'\n  names << input\nend\n\nsorted_names = names.sort\nputs \"Names in alphabetical order:\"\nputs sorted_names\n```"
  },
  {
    "task": "Develop a program that asks for a sentence and prints each word on a new line.",
    "code": "```ruby\nputs \"Please enter a sentence:\"\nsentence = gets.chomp\nsentence.split.each { |word| puts word }\n```"
  },
  {
    "task": "Build a script that reads a time in 12-hour format and converts it to 24-hour format.",
    "code": "```ruby\ndef convert_time_to_24_hour_format(time_12_hour)\n  period = time_12_hour[-2..-1]\n  time_parts = time_12_hour[0..-3].split(':')\n  hour = time_parts[0].to_i\n  minute = time_parts[1]\n\n  if period.downcase == 'am'\n    hour = 0 if hour == 12\n  elsif period.downcase == 'pm'\n    hour += 12 unless hour == 12\n  end\n\n  format('%02d:%s', hour, minute)\nend\n\nputs \"Enter time in 12-hour format (e.g., 02:30PM):\"\ninput_time = gets.chomp\nconverted_time = convert_time_to_24_hour_format(input_time)\nputs \"24-hour format: #{converted_time}\"\n```"
  },
  {
    "task": "Implement a program that reads two strings and checks if they are anagrams, printing the result.",
    "code": "```ruby\ndef anagrams?(str1, str2)\n  str1.chars.sort == str2.chars.sort\nend\n\nputs \"Enter the first string:\"\nstring1 = gets.chomp\nputs \"Enter the second string:\"\nstring2 = gets.chomp\n\nif anagrams?(string1, string2)\n  puts \"The strings are anagrams.\"\nelse\n  puts \"The strings are not anagrams.\"\nend\n```"
  },
  {
    "task": "Write a tool that reads a paragraph and prints the first and last sentence.",
    "code": "```ruby\ndef first_and_last_sentence(paragraph)\n  sentences = paragraph.split(/(?<=[.!?])\\s+/)\n  puts sentences.first\n  puts sentences.last\nend\n\nparagraph = gets\nfirst_and_last_sentence(paragraph)\n```"
  },
  {
    "task": "Create a program that reads a binary number and converts it to decimal.",
    "code": "```ruby\nputs \"Enter a binary number:\"\nbinary_input = gets.chomp\ndecimal_output = binary_input.to_i(2)\nputs \"Decimal: #{decimal_output}\"\n```"
  },
  {
    "task": "Develop a script that reads a series of scores and prints the average score.",
    "code": "```ruby\nscores = []\n\nputs \"Enter scores (type 'done' to finish):\"\nwhile input = gets.chomp\n  break if input.downcase == 'done'\n  scores << input.to_f\nend\n\nif scores.empty?\n  puts \"No scores entered.\"\nelse\n  average = scores.sum / scores.size\n  puts \"Average score: #{average}\"\nend\n```"
  },
  {
    "task": "Design a program that reads a list of integers and prints the prime numbers.",
    "code": "```ruby\ndef prime?(number)\n  return false if number <= 1\n  (2..Math.sqrt(number)).each do |i|\n    return false if number % i == 0\n  end\n  true\nend\n\nputs \"Enter a list of integers separated by spaces:\"\ninput = gets.chomp\nnumbers = input.split.map(&:to_i)\n\nprime_numbers = numbers.select { |num| prime?(num) }\n\nputs \"Prime numbers: #{prime_numbers.join(' ')}\"\n```"
  },
  {
    "task": "Write a script that reads a word and prints its Pig Latin translation.",
    "code": "```ruby\ndef pig_latin(word)\n  first_vowel_index = word.index(/[aeiou]/i)\n  if first_vowel_index == 0\n    word + 'yay'\n  else\n    word[first_vowel_index..-1] + word[0...first_vowel_index] + 'ay'\n  end\nend\n\nputs \"Enter a word:\"\ninput_word = gets.chomp\nputs pig_latin(input_word)\n```"
  },
  {
    "task": "Create a tool that reads a matrix of numbers and prints its transpose.",
    "code": "```ruby\nmatrix = []\n\nwhile line = gets\n  matrix << line.split.map(&:to_i)\nend\n\ntranspose = matrix.transpose\n\ntranspose.each do |row|\n  puts row.join(' ')\nend\n```"
  },
  {
    "task": "Implement a program that reads a URL and prints the domain name.",
    "code": "```ruby\nrequire 'uri'\n\nputs \"Enter a URL:\"\nurl = gets.chomp\n\nbegin\n  uri = URI.parse(url)\n  puts \"Domain name: #{uri.host}\"\nrescue URI::InvalidURIError\n  puts \"Invalid URL\"\nend\n```"
  },
  {
    "task": "Write a script that reads a number and prints its multiplication table up to 12.",
    "code": "```ruby\nputs \"Enter a number:\"\nnumber = gets.to_i\n\n(1..12).each do |i|\n  puts \"#{number} x #{i} = #{number * i}\"\nend\n```"
  },
  {
    "task": "Develop a program that reads a list of dates and prints them in order of occurrence.",
    "code": "```ruby\ndates = []\nwhile input = gets.chomp\n  break if input.empty?\n  dates << Date.parse(input)\nend\ndates.sort.each { |date| puts date }\n```"
  },
  {
    "task": "Create a tool that reads a text and prints it with each sentence capitalized.",
    "code": "```ruby\ndef capitalize_sentences(text)\n  text.split('. ').map(&:capitalize).join('. ')\nend\n\nputs \"Enter your text:\"\ninput_text = gets.chomp\nputs capitalize_sentences(input_text)\n```"
  },
  {
    "task": "Design a program that reads a list of words and prints them in reverse alphabetical order.",
    "code": "```ruby\nwords = []\nputs \"Enter words (type 'done' to finish):\"\nloop do\n  input = gets.chomp\n  break if input.downcase == 'done'\n  words << input\nend\n\nsorted_words = words.sort.reverse\nputs \"Words in reverse alphabetical order:\"\nputs sorted_words\n```"
  },
  {
    "task": "Write a script that asks for two times and prints the difference in minutes.",
    "code": "```ruby\nrequire 'time'\n\nputs \"Enter the first time (HH:MM):\"\nfirst_time = gets.chomp\nputs \"Enter the second time (HH:MM):\"\nsecond_time = gets.chomp\n\nfirst_time_obj = Time.parse(first_time)\nsecond_time_obj = Time.parse(second_time)\n\ndifference_in_minutes = ((second_time_obj - first_time_obj) / 60).abs\n\nputs \"The difference is #{difference_in_minutes.to_i} minutes.\"\n```"
  },
  {
    "task": "Build a program that reads a text and prints the number of vowels and consonants.",
    "code": "```ruby\ndef count_vowels_and_consonants(text)\n  vowels = %w[a e i o u A E I O U]\n  vowel_count = 0\n  consonant_count = 0\n  \n  text.each_char do |char|\n    if vowels.include?(char)\n      vowel_count += 1\n    elsif char =~ /[a-zA-Z]/\n      consonant_count += 1\n    end\n  end\n\n  [vowel_count, consonant_count]\nend\n\nputs \"Enter text:\"\ninput_text = gets.chomp\nvowels, consonants = count_vowels_and_consonants(input_text)\nputs \"Vowels: #{vowels}\"\nputs \"Consonants: #{consonants}\"\n```"
  },
  {
    "task": "Implement a tool that reads a JSON object from input and prints its keys.",
    "code": "```ruby\nrequire 'json'\n\ninput = gets.chomp\njson_object = JSON.parse(input)\nputs json_object.keys\n```"
  },
  {
    "task": "Write a program that reads a CSV file from input and prints each row as a dictionary.",
    "code": "```ruby\nrequire 'csv'\n\ncsv_input = ARGF.read\n\nCSV.parse(csv_input, headers: true) do |row|\n  puts row.to_h\nend\n```"
  },
  {
    "task": "Create a script that reads a sentence and prints it with the words in reverse order.",
    "code": "```ruby\nputs \"Enter a sentence:\"\nsentence = gets.chomp\nreversed_sentence = sentence.split.reverse.join(' ')\nputs reversed_sentence\n```"
  },
  {
    "task": "Develop a tool that reads a list of numbers and prints their median.",
    "code": "```ruby\ndef median(numbers)\n  sorted = numbers.sort\n  len = sorted.length\n  if len.odd?\n    sorted[len / 2]\n  else\n    (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0\n  end\nend\n\nputs \"Enter numbers separated by spaces:\"\ninput = gets.chomp\nnumbers = input.split.map(&:to_i)\nputs \"The median is: #{median(numbers)}\"\n```"
  },
  {
    "task": "Design a program that reads a sequence of characters and prints the first non-repeated character.",
    "code": "```ruby\ndef first_non_repeated_character(input)\n  char_count = Hash.new(0)\n  input.each_char { |char| char_count[char] += 1 }\n  input.each_char { |char| return char if char_count[char] == 1 }\n  nil\nend\n\nputs \"Enter a sequence of characters:\"\nsequence = gets.chomp\nresult = first_non_repeated_character(sequence)\nif result\n  puts \"The first non-repeated character is: #{result}\"\nelse\n  puts \"No non-repeated character found.\"\nend\n```"
  },
  {
    "task": "Write a script that reads a list of tuples and prints them sorted by the second element.",
    "code": "```ruby\ntuples = []\n\nwhile line = gets\n  break if line.strip.empty?\n  tuples << line.strip.split.map(&:to_i)\nend\n\nsorted_tuples = tuples.sort_by { |tuple| tuple[1] }\n\nsorted_tuples.each do |tuple|\n  puts tuple.join(' ')\nend\n```"
  },
  {
    "task": "Create a program that reads a list of cities and prints them grouped by their starting letter.",
    "code": "```ruby\ncities = []\nputs \"Enter city names. Type 'done' when finished:\"\n\nloop do\n  city = gets.chomp\n  break if city.downcase == 'done'\n  cities << city\nend\n\ngrouped_cities = cities.group_by { |city| city[0].upcase }\n\ngrouped_cities.each do |letter, cities|\n  puts \"#{letter}: #{cities.join(', ')}\"\nend\n```"
  },
  {
    "task": "Build a tool that reads a text and prints the longest word.",
    "code": "```ruby\ndef longest_word(input)\n  words = input.split\n  longest = words.max_by(&:length)\n  puts longest\nend\n\ninput = gets.chomp\nlongest_word(input)\n```"
  },
  {
    "task": "Implement a program that reads a string and prints the number of unique characters.",
    "code": "```ruby\ninput = gets.chomp\nunique_characters_count = input.chars.uniq.count\nputs unique_characters_count\n```"
  },
  {
    "task": "Write a script that reads two strings and prints the longest common substring.",
    "code": "```ruby\ndef longest_common_substring(str1, str2)\n  max_length = 0\n  ending_index = str1.size\n  lengths = Array.new(str1.size) { Array.new(str2.size, 0) }\n\n  str1.size.times do |i|\n    str2.size.times do |j|\n      if str1[i] == str2[j]\n        if i == 0 || j == 0\n          lengths[i][j] = 1\n        else\n          lengths[i][j] = lengths[i - 1][j - 1] + 1\n        end\n        if lengths[i][j] > max_length\n          max_length = lengths[i][j]\n          ending_index = i\n        end\n      end\n    end\n  end\n\n  max_length.zero? ? \"\" : str1[ending_index - max_length + 1, max_length]\nend\n\nputs \"Enter first string:\"\nstring1 = gets.chomp\nputs \"Enter second string:\"\nstring2 = gets.chomp\n\nputs \"Longest common substring:\"\nputs longest_common_substring(string1, string2)\n```"
  },
  {
    "task": "Develop a program that reads a chessboard position and prints all possible moves for a knight.",
    "code": "```ruby\ndef knight_moves(position)\n  x, y = position[0].ord - 'a'.ord, position[1].to_i - 1\n  moves = [\n    [x + 2, y + 1], [x + 2, y - 1],\n    [x - 2, y + 1], [x - 2, y - 1],\n    [x + 1, y + 2], [x + 1, y - 2],\n    [x - 1, y + 2], [x - 1, y - 2]\n  ]\n  moves.select { |mx, my| mx.between?(0, 7) && my.between?(0, 7) }\n       .map { |mx, my| (mx + 'a'.ord).chr + (my + 1).to_s }\nend\n\ndef main\n  puts \"Enter the knight's position (e.g., 'e4'):\"\n  position = gets.chomp\n  moves = knight_moves(position)\n  puts \"Possible moves: #{moves.join(', ')}\"\nend\n\nmain\n```"
  },
  {
    "task": "Create a tool that reads a list of numbers and prints the mode.",
    "code": "```ruby\ndef find_mode(numbers)\n  frequency = Hash.new(0)\n  numbers.each { |number| frequency[number] += 1 }\n  mode = numbers.max_by { |number| frequency[number] }\n  mode\nend\n\nputs \"Enter numbers separated by spaces:\"\ninput = gets.chomp\nnumbers = input.split.map(&:to_i)\nmode = find_mode(numbers)\nputs \"The mode is: #{mode}\"\n```"
  },
  {
    "task": "Design a program that reads a list of file paths and prints the largest file.",
    "code": "```ruby\ndef largest_file(file_paths)\n  largest = nil\n  largest_size = 0\n\n  file_paths.each do |file_path|\n    if File.exist?(file_path)\n      size = File.size(file_path)\n      if size > largest_size\n        largest_size = size\n        largest = file_path\n      end\n    end\n  end\n\n  largest\nend\n\nputs \"Enter file paths, separated by commas:\"\ninput = gets.chomp\nfile_paths = input.split(\",\").map(&:strip)\nlargest = largest_file(file_paths)\n\nif largest\n  puts \"The largest file is: #{largest}\"\nelse\n  puts \"No valid files found.\"\nend\n```"
  },
  {
    "task": "Write a script that reads a list of prices and prints the total cost with tax.",
    "code": "```ruby\ndef calculate_total_with_tax(prices, tax_rate)\n  total = prices.sum\n  total_with_tax = total + (total * tax_rate)\n  total_with_tax\nend\n\nputs \"Enter prices separated by spaces:\"\nprices = gets.chomp.split.map(&:to_f)\n\nputs \"Enter tax rate as a decimal (e.g., 0.05 for 5%):\"\ntax_rate = gets.chomp.to_f\n\ntotal_cost = calculate_total_with_tax(prices, tax_rate)\nputs \"Total cost with tax: #{'%.2f' % total_cost}\"\n```"
  },
  {
    "task": "Build a program that reads a list of temperatures and prints them in Fahrenheit.",
    "code": "```ruby\ndef celsius_to_fahrenheit(celsius)\n  (celsius * 9.0 / 5) + 32\nend\n\nputs \"Enter temperatures in Celsius, separated by spaces:\"\ninput = gets.chomp\ntemperatures = input.split.map(&:to_f)\n\ntemperatures.each do |temp|\n  fahrenheit = celsius_to_fahrenheit(temp)\n  puts \"#{temp}\u00b0C is #{fahrenheit.round(2)}\u00b0F\"\nend\n```"
  },
  {
    "task": "Implement a tool that reads a list of book titles and prints them sorted by length.",
    "code": "```ruby\ntitles = []\nwhile line = gets\n  titles << line.chomp\nend\nsorted_titles = titles.sort_by(&:length)\nsorted_titles.each { |title| puts title }\n```"
  },
  {
    "task": "Write a program that reads a directory path and prints all file names.",
    "code": "```ruby\nputs \"Enter directory path:\"\ndir_path = gets.chomp\n\nif Dir.exist?(dir_path)\n  Dir.foreach(dir_path) do |file|\n    puts file unless File.directory?(File.join(dir_path, file))\n  end\nelse\n  puts \"Directory does not exist.\"\nend\n```"
  },
  {
    "task": "Create a script that reads a list of URLs and prints those with a secure connection.",
    "code": "```ruby\nurls = ARGF.readlines.map(&:chomp)\nurls.each do |url|\n  puts url if url.start_with?('https://')\nend\n```"
  },
  {
    "task": "Develop a tool that reads a sequence of numbers and prints if it is strictly increasing.",
    "code": "```ruby\ndef strictly_increasing?(numbers)\n  numbers.each_cons(2).all? { |a, b| a < b }\nend\n\nputs \"Enter a sequence of numbers separated by spaces:\"\ninput = gets.chomp\nnumbers = input.split.map(&:to_i)\n\nif strictly_increasing?(numbers)\n  puts \"The sequence is strictly increasing.\"\nelse\n  puts \"The sequence is not strictly increasing.\"\nend\n```"
  },
  {
    "task": "Design a program that reads a list of products and prints them grouped by category.",
    "code": "```ruby\nproducts = []\nputs \"Enter products in the format 'Product Name:Category' (type 'done' to finish):\"\n\nloop do\n  input = gets.chomp\n  break if input.downcase == 'done'\n  \n  name, category = input.split(':')\n  products << { name: name.strip, category: category.strip }\nend\n\ngrouped_products = products.group_by { |product| product[:category] }\n\ngrouped_products.each do |category, products|\n  puts \"Category: #{category}\"\n  products.each do |product|\n    puts \"  - #{product[:name]}\"\n  end\nend\n```"
  },
  {
    "task": "Write a script that reads a sentence and prints it with alternating word capitalization.",
    "code": "```ruby\nputs \"Enter a sentence:\"\nsentence = gets.chomp\nwords = sentence.split\nalternating_sentence = words.each_with_index.map do |word, index|\n  index.even? ? word.capitalize : word.downcase\nend\nputs alternating_sentence.join(\" \")\n```"
  },
  {
    "task": "Create a program that reads a list of grades and prints the highest and lowest grade.",
    "code": "```ruby\ngrades = []\n\nputs \"Enter grades separated by spaces:\"\ninput = gets.chomp\ngrades = input.split.map(&:to_i)\n\nputs \"Highest grade: #{grades.max}\"\nputs \"Lowest grade: #{grades.min}\"\n```"
  },
  {
    "task": "Build a tool that reads a text and prints the number of sentences.",
    "code": "```ruby\ntext = $stdin.read\nsentence_count = text.scan(/[^.!?]+[.!?]/).count\nputs sentence_count\n```"
  },
  {
    "task": "Implement a program that reads a list of integers and prints the sum of all odd numbers.",
    "code": "```ruby\nputs \"Enter a list of integers separated by spaces:\"\nnumbers = gets.chomp.split.map(&:to_i)\nsum_of_odds = numbers.select(&:odd?).sum\nputs \"Sum of odd numbers: #{sum_of_odds}\"\n```"
  },
  {
    "task": "Write a script that reads a text and prints the shortest sentence.",
    "code": "```ruby\ntext = $stdin.read\nsentences = text.split(/(?<=[.!?])\\s*/)\nshortest_sentence = sentences.min_by(&:length)\nputs shortest_sentence\n```"
  },
  {
    "task": "Develop a program that reads a list of dictionaries and prints them sorted by a specific key.",
    "code": "```ruby\nrequire 'json'\n\ndef read_and_sort_by_key(file_path, sort_key)\n  # Read JSON content from file\n  file_content = File.read(file_path)\n  list_of_dicts = JSON.parse(file_content)\n\n  # Sort the list of dictionaries by the specified key\n  sorted_list = list_of_dicts.sort_by { |dict| dict[sort_key] }\n\n  # Output the sorted list\n  sorted_list.each do |dict|\n    puts dict\n  end\nend\n\n# Example usage with input from a file\nfile_path = 'input.json'\nsort_key = 'your_sort_key'\nread_and_sort_by_key(file_path, sort_key)\n```"
  },
  {
    "task": "Create a tool that reads a sequence of strings and prints the common prefix.",
    "code": "```ruby\ndef common_prefix(strings)\n  return \"\" if strings.empty?\n  prefix = strings.first\n  strings.each do |string|\n    while string.index(prefix) != 0\n      prefix = prefix[0...-1]\n      return \"\" if prefix.empty?\n    end\n  end\n  prefix\nend\n\nstrings = []\nputs \"Enter strings, one per line. Press Ctrl+D (or Ctrl+Z on Windows) to end input:\"\nwhile line = gets\n  strings << line.chomp\nend\n\nputs \"Common prefix: #{common_prefix(strings)}\"\n```"
  },
  {
    "task": "Design a program that reads a number and prints all of its divisors.",
    "code": "```ruby\nputs \"Enter a number:\"\nnumber = gets.to_i\n\nputs \"Divisors of #{number}:\"\n(1..number).each do |i|\n  puts i if number % i == 0\nend\n```"
  },
  {
    "task": "Write a script that reads a text and prints each word with its length.",
    "code": "```ruby\nputs \"Enter text:\"\ninput_text = gets.chomp\ninput_text.split.each { |word| puts \"#{word} (#{word.length})\" }\n```"
  },
  {
    "task": "Build a program that reads a list of colors and prints them in a rainbow order.",
    "code": "```ruby\nrainbow_order = %w[red orange yellow green blue indigo violet]\ncolors = []\n\nputs \"Enter colors (type 'done' to finish):\"\nwhile true\n  input = gets.chomp.downcase\n  break if input == 'done'\n  colors << input\nend\n\nordered_colors = colors.select { |color| rainbow_order.include?(color) }\nordered_colors.sort_by! { |color| rainbow_order.index(color) }\n\nputs \"Colors in rainbow order:\"\nputs ordered_colors\n```"
  },
  {
    "task": "Implement a tool that reads a list of names and prints them with their initials.",
    "code": "```ruby\ndef print_names_with_initials\n  puts \"Enter names (type 'done' to finish):\"\n  names = []\n  \n  loop do\n    name = gets.chomp\n    break if name.downcase == 'done'\n    names << name\n  end\n  \n  names.each do |name|\n    initials = name.split.map { |word| word[0].upcase }.join\n    puts \"#{name} (#{initials})\"\n  end\nend\n\nprint_names_with_initials\n```"
  },
  {
    "task": "Write a program that reads a series of coordinates and prints the center point.",
    "code": "```ruby\ndef calculate_center_point(coordinates)\n  x_sum = 0.0\n  y_sum = 0.0\n  coordinates.each do |x, y|\n    x_sum += x\n    y_sum += y\n  end\n  count = coordinates.size\n  [x_sum / count, y_sum / count]\nend\n\ncoordinates = []\nputs \"Enter coordinates (format: x y), one per line. Type 'done' to finish:\"\nwhile (input = gets.chomp) != 'done'\n  x, y = input.split.map(&:to_f)\n  coordinates << [x, y]\nend\n\nif coordinates.any?\n  center = calculate_center_point(coordinates)\n  puts \"Center point: (#{center[0]}, #{center[1]})\"\nelse\n  puts \"No coordinates provided.\"\nend\n```"
  },
  {
    "task": "Create a script that reads a sentence and prints it with each vowel replaced by its uppercase form.",
    "code": "```ruby\nputs \"Enter a sentence:\"\nsentence = gets.chomp\nputs sentence.gsub(/[aeiou]/, 'a' => 'A', 'e' => 'E', 'i' => 'I', 'o' => 'O', 'u' => 'U')\n```"
  },
  {
    "task": "Develop a tool that reads a mathematical expression and evaluates its result.",
    "code": "```ruby\nputs \"Enter a mathematical expression:\"\nexpression = gets.chomp\nbegin\n  result = eval(expression)\n  puts \"Result: #{result}\"\nrescue StandardError => e\n  puts \"Error evaluating expression: #{e.message}\"\nend\n```"
  },
  {
    "task": "Design a program that reads a text and prints the first three words.",
    "code": "```ruby\ninput_text = gets.chomp\nwords = input_text.split\nputs words[0, 3].join(' ')\n```"
  },
  {
    "task": "Write a script that reads a list of numbers and prints them without duplicates.",
    "code": "```ruby\nnumbers = gets.chomp.split.map(&:to_i)\nunique_numbers = numbers.uniq\nputs unique_numbers\n```"
  },
  {
    "task": "Create a program that reads a string and prints it with spaces between each character.",
    "code": "```ruby\ninput = gets.chomp\noutput = input.chars.join(' ')\nputs output\n```"
  },
  {
    "task": "Build a tool that reads a list of events with dates and prints them by chronological order.",
    "code": "```ruby\nevents = []\n\nwhile true\n  puts \"Enter event (or press enter to finish):\"\n  input = gets.chomp\n  break if input.empty?\n\n  puts \"Enter date for '#{input}' (YYYY-MM-DD):\"\n  date_input = gets.chomp\n  begin\n    date = Date.parse(date_input)\n    events << { name: input, date: date }\n  rescue ArgumentError\n    puts \"Invalid date format. Please try again.\"\n  end\nend\n\nsorted_events = events.sort_by { |event| event[:date] }\n\nputs \"\\nEvents in chronological order:\"\nsorted_events.each do |event|\n  puts \"#{event[:date]}: #{event[:name]}\"\nend\n```"
  },
  {
    "task": "Implement a program that reads a list of fractions and prints their sum as a reduced fraction.",
    "code": "```ruby\nrequire 'rational'\n\ndef read_fractions\n  fractions = []\n  puts \"Enter fractions (e.g. '1/2'), one per line. Enter an empty line to finish:\"\n  loop do\n    input = gets.chomp\n    break if input.empty?\n    fractions << Rational(input)\n  end\n  fractions\nend\n\ndef sum_fractions(fractions)\n  fractions.reduce(:+)\nend\n\nfractions = read_fractions\nsum = sum_fractions(fractions)\nputs \"The sum of the fractions is: #{sum}\"\n```"
  },
  {
    "task": "Write a script that reads a text and prints it with each consonant doubled.",
    "code": "```ruby\ndef double_consonants(text)\n  text.gsub(/([bcdfghjklmnpqrstvwxyz])/i, '\\1\\1')\nend\n\ninput_text = gets.chomp\noutput_text = double_consonants(input_text)\nputs output_text\n```"
  },
  {
    "task": "Develop a program that reads a number and prints its representation in Roman numerals.",
    "code": "```ruby\ndef to_roman(num)\n  roman_mapping = {\n    1000 => \"M\", 900 => \"CM\", 500 => \"D\", 400 => \"CD\",\n    100 => \"C\", 90 => \"XC\", 50 => \"L\", 40 => \"XL\",\n    10 => \"X\", 9 => \"IX\", 5 => \"V\", 4 => \"IV\",\n    1 => \"I\"\n  }\n  result = \"\"\n  roman_mapping.each do |value, letter|\n    while num >= value\n      result += letter\n      num -= value\n    end\n  end\n  result\nend\n\nputs \"Enter a number:\"\nnumber = gets.to_i\nputs \"Roman numeral: #{to_roman(number)}\"\n```"
  },
  {
    "task": "Create a tool that reads a list of words and prints them with each letter in reverse order.",
    "code": "```ruby\nwords = $stdin.read.split\nwords.each do |word|\n  puts word.reverse\nend\n```"
  },
  {
    "task": "Design a program that reads a set of points and prints the one closest to the origin.",
    "code": "```ruby\ndef distance_from_origin(x, y)\n  Math.sqrt(x**2 + y**2)\nend\n\npoints = []\nputs \"Enter the number of points:\"\nn = gets.to_i\n\nputs \"Enter the points as x y pairs:\"\nn.times do\n  x, y = gets.split.map(&:to_i)\n  points << [x, y]\nend\n\nclosest_point = points.min_by { |x, y| distance_from_origin(x, y) }\nputs \"The point closest to the origin is: #{closest_point.join(' ')}\"\n```"
  },
  {
    "task": "Write a script that reads a text and prints the frequency of each word.",
    "code": "```ruby\ntext = ARGF.read\nwords = text.downcase.scan(/\\b\\w+\\b/)\nfrequency = Hash.new(0)\n\nwords.each do |word|\n  frequency[word] += 1\nend\n\nfrequency.each do |word, count|\n  puts \"#{word}: #{count}\"\nend\n```"
  },
  {
    "task": "Build a program that reads a list of integers and prints the second smallest.",
    "code": "```ruby\nnumbers = gets.chomp.split.map(&:to_i)\nunique_sorted_numbers = numbers.uniq.sort\nputs unique_sorted_numbers[1] if unique_sorted_numbers.length >= 2\n```"
  },
  {
    "task": "Implement a tool that reads a string and prints all its substrings.",
    "code": "```ruby\ndef print_substrings(input)\n  length = input.length\n  (0...length).each do |start|\n    (start...length).each do |finish|\n      puts input[start..finish]\n    end\n  end\nend\n\ninput = gets.chomp\nprint_substrings(input)\n```"
  },
  {
    "task": "Write a program that reads a number and generates a random number up to that number.",
    "code": "```ruby\nputs \"Enter a number:\"\nmax_number = gets.to_i\nrandom_number = rand(max_number)\nputs \"Random number: #{random_number}\"\n```"
  },
  {
    "task": "Create a script that reads a sentence and prints it with each word reversed.",
    "code": "```ruby\nputs \"Enter a sentence:\"\nsentence = gets.chomp\nreversed_sentence = sentence.split.map(&:reverse).join(' ')\nputs reversed_sentence\n```"
  },
  {
    "task": "Develop a tool that reads a text and prints it with each sentence on a new line.",
    "code": "```ruby\ndef format_text(input_text)\n  sentences = input_text.split(/(?<=[.!?])\\s*/)\n  sentences.each { |sentence| puts sentence.strip }\nend\n\nputs \"Enter the text:\"\ninput_text = gets\nformat_text(input_text)\n```"
  },
  {
    "task": "Design a program that reads a list of numbers and prints the product of all negative numbers.",
    "code": "```ruby\nnumbers = gets.chomp.split.map(&:to_i)\nproduct = 1\n\nnumbers.each do |num|\n  product *= num if num < 0\nend\n\nputs product\n```"
  },
  {
    "task": "Write a script that reads a dictionary and prints the keys and values in sorted order.",
    "code": "```ruby\ndictionary = {}\nwhile line = gets\n  key, value = line.chomp.split(':')\n  dictionary[key] = value\nend\n\ndictionary.sort.each do |key, value|\n  puts \"#{key}: #{value}\"\nend\n```"
  },
  {
    "task": "Create a program that reads a text and prints the number of unique words.",
    "code": "```ruby\nputs \"Enter text:\"\ninput_text = gets.chomp\nwords = input_text.split(/\\W+/)\nunique_words = words.map(&:downcase).uniq\nputs \"Number of unique words: #{unique_words.length}\"\n```"
  }
]