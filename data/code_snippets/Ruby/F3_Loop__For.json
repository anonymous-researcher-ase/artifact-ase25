[
  {
    "task": "Write a program that prints numbers from 1 to 10 using a for loop.",
    "code": "```ruby\nfor i in 1..10\n  puts i\nend\n```"
  },
  {
    "task": "Create a loop that iterates over an array of names and prints each name.",
    "code": "```ruby\nnames = [\"Alice\", \"Bob\", \"Charlie\", \"David\"]\n\nfor name in names\n  puts name\nend\n```"
  },
  {
    "task": "Design a for loop to calculate the factorial of a given number.",
    "code": "```ruby\ndef factorial(n)\n  result = 1\n  for i in 1..n\n    result *= i\n  end\n  result\nend\n```"
  },
  {
    "task": "Implement a program that uses a for loop to sum all even numbers between 1 and 100.",
    "code": "```ruby\nsum = 0\nfor num in 1..100\n  if num.even?\n    sum += num\n  end\nend\nputs sum\n```"
  },
  {
    "task": "Use a for loop to generate and print the Fibonacci sequence up to 20 terms.",
    "code": "```ruby\na, b = 0, 1\nfor i in 1..20\n  puts a\n  a, b = b, a + b\nend\n```"
  },
  {
    "task": "Construct a for loop that prints the multiplication table for a given number.",
    "code": "```ruby\nnumber = 5 # You can change this number to any other number for a different multiplication table\n\nfor i in 1..10\n  puts \"#{number} x #{i} = #{number * i}\"\nend\n```"
  },
  {
    "task": "Write code to iterate through a list of student grades and print only those above a certain threshold.",
    "code": "```ruby\ngrades = [85, 92, 78, 90, 67, 88]\nthreshold = 80\n\nfor grade in grades\n  if grade > threshold\n    puts grade\n  end\nend\n```"
  },
  {
    "task": "Create a for loop that appends the square of numbers 1 to 10 to a list.",
    "code": "```ruby\nsquares = []\nfor i in 1..10\n  squares << i**2\nend\n```"
  },
  {
    "task": "Develop a for loop that reverses a given string.",
    "code": "```ruby\ndef reverse_string(str)\n  reversed = \"\"\n  for i in (0...str.length)\n    reversed = str[i] + reversed\n  end\n  reversed\nend\n\n# Example usage\nputs reverse_string(\"example\")\n```"
  },
  {
    "task": "Build a program that uses a for loop to print all elements in a 2D matrix.",
    "code": "```ruby\nmatrix = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n]\n\nfor row in matrix\n  for element in row\n    puts element\n  end\nend\n```"
  },
  {
    "task": "Use a for loop to find the maximum value in an array of integers.",
    "code": "```ruby\ndef find_max_value(array)\n  max_value = array[0]\n  for num in array\n    max_value = num if num > max_value\n  end\n  max_value\nend\n\n# Example usage\nnumbers = [3, 1, 4, 1, 5, 9, 2, 6, 5]\nputs find_max_value(numbers)\n```"
  },
  {
    "task": "Write a program that uses a for loop to print the characters of a string, one per line.",
    "code": "```ruby\nstring = \"example\"\nfor char in string.chars\n  puts char\nend\n```"
  },
  {
    "task": "Create a for loop that counts the number of vowels in a given sentence.",
    "code": "```ruby\ndef count_vowels(sentence)\n  vowels = \"aeiouAEIOU\"\n  count = 0\n  for char in sentence.chars\n    count += 1 if vowels.include?(char)\n  end\n  count\nend\n\nsentence = \"This is a sample sentence.\"\nputs count_vowels(sentence)\n```"
  },
  {
    "task": "Implement a for loop to check if a number is prime by testing divisibility.",
    "code": "```ruby\ndef is_prime?(number)\n  return false if number <= 1\n  for i in 2...number\n    return false if number % i == 0\n  end\n  true\nend\n```"
  },
  {
    "task": "Design a for loop that prints a pyramid pattern of asterisks with a given height.",
    "code": "```ruby\nheight = 5\n\nfor i in 1..height\n  spaces = ' ' * (height - i)\n  stars = '*' * (2 * i - 1)\n  puts spaces + stars\nend\n```"
  },
  {
    "task": "Write a program that uses a for loop to calculate the sum of digits of a number.",
    "code": "```ruby\nnumber = 12345\nsum_of_digits = 0\n\nfor digit in number.to_s.chars.map(&:to_i)\n  sum_of_digits += digit\nend\n\nputs sum_of_digits\n```"
  },
  {
    "task": "Construct a for loop to flatten a list of lists into a single list.",
    "code": "```ruby\nlists = [[1, 2, 3], [4, 5], [6, 7, 8]]\nflattened_list = []\n\nfor sublist in lists\n  for item in sublist\n    flattened_list << item\n  end\nend\n\nflattened_list\n```"
  },
  {
    "task": "Use a for loop to generate a list of random numbers and print them.",
    "code": "```ruby\nrequire 'securerandom'\n\nrandom_numbers = []\n\nfor i in 1..10\n  random_numbers << SecureRandom.random_number(100)\nend\n\nputs random_numbers\n```"
  },
  {
    "task": "Create a for loop that iterates through a dictionary and prints its keys and values.",
    "code": "```ruby\ndictionary = { \"apple\" => \"fruit\", \"carrot\" => \"vegetable\", \"milk\" => \"dairy\" }\n\nfor key, value in dictionary\n  puts \"#{key}: #{value}\"\nend\n```"
  },
  {
    "task": "Develop a for loop that counts down from 10 to 1 and prints each number.",
    "code": "```ruby\nfor i in (10).downto(1)\n  puts i\nend\n```"
  },
  {
    "task": "Write code to multiply each element in an array by 2 using a for loop.",
    "code": "```ruby\narray = [1, 2, 3, 4, 5]\nfor i in 0...array.length\n  array[i] *= 2\nend\n```"
  },
  {
    "task": "Create a for loop that calculates the average of numbers in a list.",
    "code": "```ruby\nnumbers = [10, 20, 30, 40, 50]\nsum = 0\n\nfor number in numbers\n  sum += number\nend\n\naverage = sum.to_f / numbers.length\nputs average\n```"
  },
  {
    "task": "Implement a for loop to find duplicate elements in an array.",
    "code": "```ruby\ndef find_duplicates(array)\n  duplicates = []\n  array.each_with_index do |element, index|\n    for i in (index + 1)...array.length\n      if element == array[i]\n        duplicates << element unless duplicates.include?(element)\n        break\n      end\n    end\n  end\n  duplicates\nend\n\n# Example usage\narray = [1, 2, 3, 2, 4, 5, 3, 6, 1]\nputs find_duplicates(array).inspect\n```"
  },
  {
    "task": "Design a for loop that removes all occurrences of a specific element from a list.",
    "code": "```ruby\ndef remove_element(arr, element)\n  result = []\n  for item in arr\n    result << item unless item == element\n  end\n  result\nend\n\n# Example usage:\narr = [1, 2, 3, 4, 3, 5]\nelement_to_remove = 3\nnew_arr = remove_element(arr, element_to_remove)\nputs new_arr.inspect # => [1, 2, 4, 5]\n```"
  },
  {
    "task": "Use a for loop to simulate rolling a dice 100 times and count the occurrences of each face.",
    "code": "```ruby\ncounts = Hash.new(0)\n\nfor _ in 1..100\n  roll = rand(1..6)\n  counts[roll] += 1\nend\n\nputs counts\n```"
  },
  {
    "task": "Write a for loop that prints all the prime numbers between 1 and 50.",
    "code": "```ruby\nrequire 'prime'\n\nfor num in 1..50\n  if Prime.prime?(num)\n    puts num\n  end\nend\n```"
  },
  {
    "task": "Develop a for loop that extracts all the uppercase letters from a string.",
    "code": "```ruby\ndef extract_uppercase_letters(input_string)\n  uppercase_letters = ''\n  for char in input_string.chars\n    if char =~ /[A-Z]/\n      uppercase_letters << char\n    end\n  end\n  uppercase_letters\nend\n```"
  },
  {
    "task": "Create a for loop that checks if a list is sorted in ascending order.",
    "code": "```ruby\ndef sorted_ascending?(list)\n  for i in 0...(list.length - 1)\n    return false if list[i] > list[i + 1]\n  end\n  true\nend\n```"
  },
  {
    "task": "Implement a for loop to generate a list of the first 10 square numbers.",
    "code": "```ruby\nsquares = []\nfor i in 1..10\n  squares << i * i\nend\n```"
  },
  {
    "task": "Write code to print all the elements of a list that are greater than a given number using a for loop.",
    "code": "```ruby\nlist = [5, 10, 15, 20, 25]\ngiven_number = 12\n\nfor element in list\n  if element > given_number\n    puts element\n  end\nend\n```"
  },
  {
    "task": "Construct a for loop that finds the smallest number in an array.",
    "code": "```ruby\nnumbers = [5, 3, 9, 1, 6]\nsmallest_number = numbers.first\n\nfor number in numbers\n  if number < smallest_number\n    smallest_number = number\n  end\nend\n\nputs smallest_number\n```"
  },
  {
    "task": "Develop a for loop that prints the first N lines of Pascal's Triangle.",
    "code": "```ruby\ndef pascals_triangle(n)\n  for i in 0...n\n    row = [1]\n    for j in 1..i\n      row << (row[-1] * (i - j + 1)) / j\n    end\n    puts row.join(' ')\n  end\nend\n\npascals_triangle(5) # Replace 5 with the desired number of lines\n```"
  },
  {
    "task": "Create a for loop that calculates the product of all elements in a list.",
    "code": "```ruby\nnumbers = [2, 3, 5, 7]\nproduct = 1\n\nfor number in numbers\n  product *= number\nend\n\nputs product\n```"
  },
  {
    "task": "Use a for loop to print numbers from 1 to 100, but replace multiples of 3 with 'Fizz'.",
    "code": "```ruby\nfor i in 1..100\n  if i % 3 == 0\n    puts 'Fizz'\n  else\n    puts i\n  end\nend\n```"
  },
  {
    "task": "Write a for loop that iterates over a string and counts the number of words.",
    "code": "```ruby\ntext = \"This is a sample string with several words\"\nword_count = 0\n\nfor word in text.split\n  word_count += 1\nend\n\nputs word_count\n```"
  },
  {
    "task": "Design a for loop that prints numbers from 1 to 50, but skips numbers divisible by 5.",
    "code": "```ruby\nfor i in 1..50\n  next if i % 5 == 0\n  puts i\nend\n```"
  },
  {
    "task": "Implement a for loop that prints a checkerboard pattern of asterisks.",
    "code": "```ruby\nsize = 8\nfor i in 0...size\n  for j in 0...size\n    if (i + j) % 2 == 0\n      print '*'\n    else\n      print ' '\n    end\n  end\n  puts\nend\n```"
  },
  {
    "task": "Create a for loop that finds the index of a target value in a list.",
    "code": "```ruby\ndef find_index_of_target(list, target)\n  for index in 0...list.length\n    return index if list[index] == target\n  end\n  nil\nend\n```"
  },
  {
    "task": "Use a for loop to concatenate a list of strings into a single string.",
    "code": "```ruby\nstrings = [\"Hello\", \"world\", \"this\", \"is\", \"Ruby\"]\nresult = \"\"\n\nfor str in strings\n  result += str\nend\n```"
  },
  {
    "task": "Develop a for loop that rotates a list to the right by a given number of positions.",
    "code": "```ruby\ndef rotate_right(arr, positions)\n  n = arr.length\n  positions = positions % n\n  rotated_array = Array.new(n)\n\n  for i in 0...n\n    rotated_array[(i + positions) % n] = arr[i]\n  end\n\n  rotated_array\nend\n\n# Example usage:\n# arr = [1, 2, 3, 4, 5]\n# positions = 2\n# puts rotate_right(arr, positions).inspect\n```"
  },
  {
    "task": "Write code that uses a for loop to insert an element into a sorted list while maintaining order.",
    "code": "```ruby\ndef insert_into_sorted_list(sorted_list, element)\n  inserted = false\n  for i in 0...sorted_list.length\n    if element < sorted_list[i]\n      sorted_list.insert(i, element)\n      inserted = true\n      break\n    end\n  end\n  sorted_list.push(element) unless inserted\n  sorted_list\nend\n\n# Example usage\nsorted_list = [1, 3, 5, 7]\nelement = 4\ninsert_into_sorted_list(sorted_list, element)\n```"
  },
  {
    "task": "Implement a for loop that counts the frequency of each character in a string.",
    "code": "```ruby\ndef character_frequency(string)\n  frequency = Hash.new(0)\n  for char in string.chars\n    frequency[char] += 1\n  end\n  frequency\nend\n```"
  },
  {
    "task": "Create a for loop that prints all subsets of a given set.",
    "code": "```ruby\ndef print_subsets(set)\n  n = set.length\n  (0...(1 << n)).each do |i|\n    subset = []\n    (0...n).each do |j|\n      subset << set[j] if (i & (1 << j)) != 0\n    end\n    puts subset.inspect\n  end\nend\n\n# Example usage\nset = [1, 2, 3]\nprint_subsets(set)\n```"
  },
  {
    "task": "Design a for loop to generate all permutations of a string.",
    "code": "```ruby\ndef permutations(str)\n  return [str] if str.length <= 1\n\n  result = []\n  str.chars.each_with_index do |char, index|\n    sub_str = str[0...index] + str[index+1..-1]\n    permutations(sub_str).each do |perm|\n      result << char + perm\n    end\n  end\n  result\nend\n\nstr = \"abc\"\npermutations(str).each do |perm|\n  puts perm\nend\n```"
  },
  {
    "task": "Write a for loop that sorts an array in descending order.",
    "code": "```ruby\narr = [5, 3, 8, 1, 2]\nn = arr.length\n\nfor i in 0...(n - 1)\n  for j in 0...(n - i - 1)\n    if arr[j] < arr[j + 1]\n      arr[j], arr[j + 1] = arr[j + 1], arr[j]\n    end\n  end\nend\n\nputs arr.inspect\n```"
  },
  {
    "task": "Use a for loop to generate a sequence of random characters and print them.",
    "code": "```ruby\nrequire 'securerandom'\n\nfor i in 1..10\n  puts SecureRandom.alphanumeric(1)\nend\n```"
  },
  {
    "task": "Construct a for loop that finds the common elements between two lists.",
    "code": "```ruby\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [3, 4, 5, 6, 7]\ncommon_elements = []\n\nfor element in list1\n  if list2.include?(element)\n    common_elements << element\n  end\nend\n\ncommon_elements\n```"
  },
  {
    "task": "Develop a for loop to calculate and print the cumulative sum of a list.",
    "code": "```ruby\nnumbers = [1, 2, 3, 4, 5]\ncumulative_sum = 0\n\nfor number in numbers\n  cumulative_sum += number\n  puts cumulative_sum\nend\n```"
  },
  {
    "task": "Create a for loop that prints a diamond pattern using asterisks.",
    "code": "```ruby\ndef print_diamond(n)\n  # Print the upper part of the diamond\n  for i in 0...n\n    print ' ' * (n - i - 1)\n    print '*' * (2 * i + 1)\n    puts\n  end\n\n  # Print the lower part of the diamond\n  for i in (n-2).downto(0)\n    print ' ' * (n - i - 1)\n    print '*' * (2 * i + 1)\n    puts\n  end\nend\n\nprint_diamond(5)\n```"
  },
  {
    "task": "Write a for loop that simulates a countdown timer from a specified number of seconds.",
    "code": "```ruby\nstart_time = 10 # Specify the number of seconds for the countdown\n\nfor i in (start_time).downto(0)\n  puts i\n  sleep(1) # Simulate a 1-second delay\nend\n```"
  },
  {
    "task": "Use a for loop to print the transpose of a matrix.",
    "code": "```ruby\nmatrix = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n]\n\ntranspose = []\nfor i in 0...matrix[0].length\n  row = []\n  for j in 0...matrix.length\n    row << matrix[j][i]\n  end\n  transpose << row\nend\n\ntranspose.each do |row|\n  puts row.join(' ')\nend\n```"
  },
  {
    "task": "Implement a for loop that reverses the order of words in a sentence.",
    "code": "```ruby\nsentence = \"The quick brown fox jumps over the lazy dog\"\nwords = sentence.split\nreversed_sentence = \"\"\n\nfor i in (words.length - 1).downto(0)\n  reversed_sentence += words[i] + \" \"\nend\n\nreversed_sentence.strip!\n```"
  },
  {
    "task": "Create a for loop that deletes elements from a list that are less than a given value.",
    "code": "```ruby\ndef delete_less_than(arr, value)\n  arr.delete_if do |element|\n    element < value\n  end\nend\n\nlist = [1, 2, 3, 4, 5]\ndelete_less_than(list, 3)\nputs list\n```"
  },
  {
    "task": "Design a for loop to merge two sorted lists into a single sorted list.",
    "code": "```ruby\ndef merge_sorted_lists(list1, list2)\n  merged_list = []\n  i, j = 0, 0\n\n  for _ in 0...(list1.size + list2.size)\n    if i < list1.size && (j >= list2.size || list1[i] <= list2[j])\n      merged_list << list1[i]\n      i += 1\n    else\n      merged_list << list2[j]\n      j += 1\n    end\n  end\n\n  merged_list\nend\n```"
  },
  {
    "task": "Write a for loop that calculates the power of a number using repeated multiplication.",
    "code": "```ruby\ndef power(base, exponent)\n  result = 1\n  for i in 1..exponent\n    result *= base\n  end\n  result\nend\n```"
  },
  {
    "task": "Use a for loop to find the longest word in a list of words.",
    "code": "```ruby\nwords = [\"apple\", \"banana\", \"cherry\", \"date\"]\nlongest_word = \"\"\n\nfor word in words\n  if word.length > longest_word.length\n    longest_word = word\n  end\nend\n\nputs longest_word\n```"
  },
  {
    "task": "Develop a for loop that sorts a list of tuples based on the second element.",
    "code": "```ruby\nlist_of_tuples = [[3, 5], [1, 7], [4, 2], [2, 9]]\nsorted_list = list_of_tuples.sort_by { |tuple| tuple[1] }\nsorted_list.each do |tuple|\n  # Do something with each tuple if needed\n  puts tuple.inspect\nend\n```"
  },
  {
    "task": "Create a for loop that replicates each character in a string a given number of times.",
    "code": "```ruby\ndef replicate_characters(str, times)\n  result = ''\n  for char in str.chars\n    for _ in 1..times\n      result += char\n    end\n  end\n  result\nend\n```"
  },
  {
    "task": "Construct a for loop that replaces spaces in a string with hyphens.",
    "code": "```ruby\ndef replace_spaces_with_hyphens(input_string)\n  result = \"\"\n  for char in input_string.chars\n    if char == \" \"\n      result += \"-\"\n    else\n      result += char\n    end\n  end\n  result\nend\n\n# Example usage:\ninput_string = \"Replace spaces with hyphens\"\noutput_string = replace_spaces_with_hyphens(input_string)\nputs output_string\n```"
  },
  {
    "task": "Design a for loop to find the intersection of two sets.",
    "code": "```ruby\nset1 = [1, 2, 3, 4, 5]\nset2 = [3, 4, 5, 6, 7]\n\nintersection = []\nfor element in set1\n  if set2.include?(element)\n    intersection << element\n  end\nend\n\nputs intersection\n```"
  },
  {
    "task": "Write a for loop that generates a list of prime numbers up to a given number.",
    "code": "```ruby\ndef prime_numbers_upto(n)\n  primes = []\n  for num in 2..n\n    is_prime = true\n    for i in 2..Math.sqrt(num)\n      if num % i == 0\n        is_prime = false\n        break\n      end\n    end\n    primes << num if is_prime\n  end\n  primes\nend\n\nputs prime_numbers_upto(20)\n```"
  },
  {
    "task": "Use a for loop to implement a simple text-based progress bar.",
    "code": "```ruby\ntotal = 10\nfor i in 1..total\n  print \"\\rProgress: [#{'=' * i}#{' ' * (total - i)}] #{(i.to_f / total * 100).to_i}%\"\n  sleep(0.5)\nend\nputs\n```"
  },
  {
    "task": "Implement a for loop that finds and prints all palindromic numbers between 10 and 200.",
    "code": "```ruby\nfor num in 10..200\n  num_str = num.to_s\n  puts num if num_str == num_str.reverse\nend\n```"
  },
  {
    "task": "Create a for loop that multiplies corresponding elements of two lists and stores the result.",
    "code": "```ruby\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]\nresult = []\n\nfor i in 0...[list1.size, list2.size].min\n  result << list1[i] * list2[i]\nend\n```"
  },
  {
    "task": "Develop a for loop that finds the difference between the largest and smallest numbers in a list.",
    "code": "```ruby\nnumbers = [3, 7, 2, 9, 4]\nmin_number = numbers[0]\nmax_number = numbers[0]\n\nfor number in numbers\n  min_number = number if number < min_number\n  max_number = number if number > max_number\nend\n\ndifference = max_number - min_number\nputs difference\n```"
  },
  {
    "task": "Write a for loop that prints numbers from 1 to 100, replacing multiples of 5 with 'Buzz'.",
    "code": "```ruby\nfor i in 1..100\n  if i % 5 == 0\n    puts 'Buzz'\n  else\n    puts i\n  end\nend\n```"
  },
  {
    "task": "Use a for loop to convert a list of integers into their binary representation.",
    "code": "```ruby\nintegers = [10, 15, 20, 25]\nbinaries = []\n\nfor number in integers\n  binaries << number.to_s(2)\nend\n\nbinaries\n```"
  },
  {
    "task": "Design a for loop that fills a 2D array with consecutive numbers in a spiral pattern.",
    "code": "```ruby\ndef generate_spiral(n)\n  spiral = Array.new(n) { Array.new(n) }\n  num = 1\n  layers = (n / 2.0).ceil\n\n  (0...layers).each do |layer|\n    # Top row\n    (layer...n-layer).each do |i|\n      spiral[layer][i] = num\n      num += 1\n    end\n\n    # Right column\n    ((layer+1)...(n-layer)).each do |i|\n      spiral[i][n-layer-1] = num\n      num += 1\n    end\n\n    # Bottom row\n    (n-layer-2).downto(layer).each do |i|\n      spiral[n-layer-1][i] = num\n      num += 1\n    end\n\n    # Left column\n    (n-layer-2).downto(layer+1).each do |i|\n      spiral[i][layer] = num\n      num += 1\n    end\n  end\n\n  spiral\nend\n\n# Example usage\nn = 5\nspiral = generate_spiral(n)\nspiral.each { |row| puts row.join(\" \") }\n```"
  },
  {
    "task": "Create a for loop that iterates over a list and removes duplicates.",
    "code": "```ruby\nlist = [1, 2, 2, 3, 4, 4, 5]\nunique_list = []\n\nfor item in list\n  unique_list << item unless unique_list.include?(item)\nend\n\nputs unique_list\n```"
  },
  {
    "task": "Implement a for loop to calculate the dot product of two vectors.",
    "code": "```ruby\ndef dot_product(vector1, vector2)\n  product = 0\n  for i in 0...vector1.length\n    product += vector1[i] * vector2[i]\n  end\n  product\nend\n\nvector1 = [1, 2, 3]\nvector2 = [4, 5, 6]\nputs dot_product(vector1, vector2)\n```"
  },
  {
    "task": "Write a for loop that prints a sequence of numbers in reverse order.",
    "code": "```ruby\nfor i in (10).downto(1)\n  puts i\nend\n```"
  },
  {
    "task": "Develop a for loop that computes the greatest common divisor (GCD) of two numbers.",
    "code": "```ruby\ndef gcd(a, b)\n  for i in (1..[a, b].min).reverse_each\n    return i if a % i == 0 && b % i == 0\n  end\nend\n\nputs gcd(48, 18)\n```"
  },
  {
    "task": "Construct a for loop that prints a square pattern of numbers with a given side length.",
    "code": "```ruby\nside_length = 5\n\nfor i in 1..side_length\n  for j in 1..side_length\n    print \"#{j} \"\n  end\n  puts\nend\n```"
  },
  {
    "task": "Create a for loop that shifts all elements of a list to the left by one position.",
    "code": "```ruby\ndef shift_left(arr)\n  return arr if arr.empty?\n  \n  first_element = arr[0]\n  for i in 0...(arr.length - 1)\n    arr[i] = arr[i + 1]\n  end\n  arr[arr.length - 1] = first_element\n  arr\nend\n\n# Example usage:\nlist = [1, 2, 3, 4, 5]\nshift_left(list)\n# list is now [2, 3, 4, 5, 1]\n```"
  },
  {
    "task": "Use a for loop to print the first 20 triangular numbers.",
    "code": "```ruby\nfor n in 1..20\n  triangular_number = n * (n + 1) / 2\n  puts triangular_number\nend\n```"
  },
  {
    "task": "Write a for loop that finds the first repeating character in a string.",
    "code": "```ruby\ndef first_repeating_character(str)\n  seen = {}\n  str.each_char do |char|\n    return char if seen[char]\n    seen[char] = true\n  end\n  nil\nend\n\n# Example usage:\nputs first_repeating_character(\"swiss\")\n```"
  },
  {
    "task": "Design a for loop that transforms a list of temperatures from Celsius to Fahrenheit.",
    "code": "```ruby\ncelsius_temperatures = [0, 20, 37, 100]\nfahrenheit_temperatures = []\n\nfor temp in celsius_temperatures\n  fahrenheit = (temp * 9.0 / 5) + 32\n  fahrenheit_temperatures << fahrenheit\nend\n\nfahrenheit_temperatures\n```"
  },
  {
    "task": "Implement a for loop to determine if a string is an isogram.",
    "code": "```ruby\ndef is_isogram?(string)\n  string = string.downcase\n  seen_chars = {}\n  for char in string.chars\n    return false if seen_chars[char]\n    seen_chars[char] = true\n  end\n  true\nend\n```"
  },
  {
    "task": "Use a for loop to create a histogram from a list of integers.",
    "code": "```ruby\ndef create_histogram(numbers)\n  histogram = Hash.new(0)\n  \n  for number in numbers\n    histogram[number] += 1\n  end\n\n  histogram.each do |number, count|\n    puts \"#{number}: \" + \"#\" * count\n  end\nend\n\nnumbers = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\ncreate_histogram(numbers)\n```"
  },
  {
    "task": "Create a for loop that prints the indexes of all occurrences of a particular element in a list.",
    "code": "```ruby\ndef print_indexes_of_element(list, element)\n  for i in 0...list.length\n    puts i if list[i] == element\n  end\nend\n\n# Example usage:\n# print_indexes_of_element([1, 2, 3, 2, 4, 2], 2)\n```"
  },
  {
    "task": "Write a for loop that checks if a given string is a palindrome.",
    "code": "```ruby\ndef palindrome?(string)\n  length = string.length\n  for i in 0...(length / 2)\n    return false if string[i] != string[length - 1 - i]\n  end\n  true\nend\n```"
  },
  {
    "task": "Develop a for loop to simulate the behavior of a simple finite state machine.",
    "code": "```ruby\nstates = [\"State1\", \"State2\", \"State3\", \"State4\"]\ntransitions = {\n  \"State1\" => \"State2\",\n  \"State2\" => \"State3\",\n  \"State3\" => \"State4\",\n  \"State4\" => \"State1\"\n}\n\ncurrent_state = \"State1\"\n\nfor i in 0...10\n  puts \"Current State: #{current_state}\"\n  current_state = transitions[current_state]\nend\n```"
  },
  {
    "task": "Design a for loop that finds the sum of all odd numbers in a list.",
    "code": "```ruby\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nsum_of_odds = 0\n\nfor num in numbers\n  sum_of_odds += num if num.odd?\nend\n\nsum_of_odds\n```"
  },
  {
    "task": "Use a for loop to count how many words start with a vowel in a given sentence.",
    "code": "```ruby\ndef count_words_starting_with_vowel(sentence)\n  vowels = ['a', 'e', 'i', 'o', 'u']\n  words = sentence.split\n  count = 0\n\n  for word in words\n    count += 1 if vowels.include?(word[0].downcase)\n  end\n\n  count\nend\n\n# Example usage\nsentence = \"An example sentence to evaluate\"\nputs count_words_starting_with_vowel(sentence)\n```"
  },
  {
    "task": "Implement a for loop that sorts a list of strings by their length.",
    "code": "```ruby\nstrings = [\"apple\", \"banana\", \"cherry\", \"date\"]\n\nfor i in 0...(strings.length - 1)\n  for j in 0...(strings.length - i - 1)\n    if strings[j].length > strings[j + 1].length\n      strings[j], strings[j + 1] = strings[j + 1], strings[j]\n    end\n  end\nend\n\nputs strings\n```"
  },
  {
    "task": "Write a for loop that prints the factorial of numbers from 1 to 10.",
    "code": "```ruby\ndef factorial(n)\n  (1..n).inject(1, :*)\nend\n\nfor i in 1..10\n  puts \"Factorial of #{i} is #{factorial(i)}\"\nend\n```"
  },
  {
    "task": "Create a for loop that replaces all instances of a substring in a string with another substring.",
    "code": "```ruby\ndef replace_substring(original_string, target_substring, replacement_substring)\n  result_string = original_string.dup\n  (0...original_string.length).each do |i|\n    if original_string[i, target_substring.length] == target_substring\n      result_string[i, target_substring.length] = replacement_substring\n    end\n  end\n  result_string\nend\n```"
  },
  {
    "task": "Develop a for loop that squares each element in a list of numbers.",
    "code": "```ruby\nnumbers = [1, 2, 3, 4, 5]\nsquared_numbers = []\n\nfor number in numbers\n  squared_numbers << number**2\nend\n\nputs squared_numbers\n```"
  },
  {
    "task": "Use a for loop to reverse the order of elements in an array.",
    "code": "```ruby\narray = [1, 2, 3, 4, 5]\nreversed_array = []\n\nfor i in (array.length - 1).downto(0)\n  reversed_array << array[i]\nend\n```"
  },
  {
    "task": "Implement a for loop that tests if two strings are anagrams of each other.",
    "code": "```ruby\ndef are_anagrams?(str1, str2)\n  return false if str1.length != str2.length\n\n  char_count = Hash.new(0)\n  \n  for char in str1.chars\n    char_count[char] += 1\n  end\n\n  for char in str2.chars\n    char_count[char] -= 1\n  end\n\n  char_count.all? { |_, count| count == 0 }\nend\n```"
  },
  {
    "task": "Design a for loop to find and print all Armstrong numbers between 100 and 999.",
    "code": "```ruby\ndef armstrong_number?(num)\n  digits = num.to_s.chars.map(&:to_i)\n  sum_of_powers = digits.reduce(0) { |sum, digit| sum + digit**3 }\n  sum_of_powers == num\nend\n\n(100..999).each do |num|\n  puts num if armstrong_number?(num)\nend\n```"
  }
]