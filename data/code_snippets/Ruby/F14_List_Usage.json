[
  {
    "task": "Create a list of the first ten positive integers and calculate their sum.",
    "code": "```ruby\nnumbers = (1..10).to_a\nsum = numbers.sum\n```"
  },
  {
    "task": "Write a program to reverse the order of elements in a given list.",
    "code": "```ruby\ndef reverse_list(list)\n  list.reverse\nend\n\n# Example usage:\nlist = [1, 2, 3, 4, 5]\nreversed_list = reverse_list(list)\nputs reversed_list.inspect\n```"
  },
  {
    "task": "Implement a function that takes a list and returns the list with duplicates removed.",
    "code": "```ruby\ndef remove_duplicates(list)\n  list.uniq\nend\n```"
  },
  {
    "task": "Create a list of names and sort them in alphabetical order.",
    "code": "```ruby\nnames = [\"Alice\", \"Charlie\", \"Bob\"]\nsorted_names = names.sort\n```"
  },
  {
    "task": "Write a function that appends a new element to an existing list.",
    "code": "```ruby\ndef append_to_list(existing_list, new_element)\n  existing_list << new_element\nend\n```"
  },
  {
    "task": "Generate a list of the first 20 even numbers.",
    "code": "```ruby\neven_numbers = (1..40).select { |num| num.even? }\n```"
  },
  {
    "task": "Create a nested list (a list of lists) and access an element from the inner list.",
    "code": "```ruby\nnested_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nelement = nested_list[1][2]\n```"
  },
  {
    "task": "Write a program that finds the maximum value in a list of integers.",
    "code": "```ruby\ndef find_max_value(numbers)\n  numbers.max\nend\n\n# Example usage\nnumbers = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]\nmax_value = find_max_value(numbers)\nputs max_value\n```"
  },
  {
    "task": "Implement a function to merge two lists into a single list without duplicates.",
    "code": "```ruby\ndef merge_lists(list1, list2)\n  (list1 + list2).uniq\nend\n```"
  },
  {
    "task": "Create a list from user input, then display the list in reverse order.",
    "code": "```ruby\nlist = []\nputs \"Enter items for the list, one per line. Type 'done' to finish:\"\n\nwhile true\n  input = gets.chomp\n  break if input.downcase == 'done'\n  list << input\nend\n\nputs \"Reversed list:\"\nputs list.reverse\n```"
  },
  {
    "task": "Write a function that takes a list and returns a new list containing only the even numbers.",
    "code": "```ruby\ndef filter_even_numbers(numbers)\n  numbers.select { |num| num.even? }\nend\n```"
  },
  {
    "task": "Generate a list of squares for the numbers 1 through 10.",
    "code": "```ruby\nsquares = (1..10).map { |n| n**2 }\n```"
  },
  {
    "task": "Create a list of floating-point numbers and find their average.",
    "code": "```ruby\nnumbers = [1.2, 3.4, 5.6, 7.8, 9.0]\naverage = numbers.sum / numbers.size\n```"
  },
  {
    "task": "Implement a program to rotate the elements of a list to the right by a given number of steps.",
    "code": "```ruby\ndef rotate_list_right(lst, steps)\n  return lst if lst.empty?\n  steps = steps % lst.size\n  lst[-steps..-1] + lst[0...-steps]\nend\n\n# Example usage:\nlist = [1, 2, 3, 4, 5]\nsteps = 2\nrotated_list = rotate_list_right(list, steps)\nputs rotated_list.inspect\n```"
  },
  {
    "task": "Write a function that checks if a list is a palindrome (reads the same forwards and backwards).",
    "code": "```ruby\ndef palindrome?(list)\n  list == list.reverse\nend\n```"
  },
  {
    "task": "Create a list of random integers and count how many are greater than 50.",
    "code": "```ruby\nrandom_integers = Array.new(10) { rand(1..100) }\ncount_greater_than_50 = random_integers.count { |num| num > 50 }\n```"
  },
  {
    "task": "Write a program that removes the first occurrence of a specified element from a list.",
    "code": "```ruby\ndef remove_first_occurrence(list, element)\n  list.delete_at(list.index(element)) if list.include?(element)\n  list\nend\n\n# Example usage\nmy_list = [1, 2, 3, 4, 3]\nelement_to_remove = 3\nupdated_list = remove_first_occurrence(my_list, element_to_remove)\nputs updated_list.inspect\n```"
  },
  {
    "task": "Implement a function that takes two lists and returns a list containing their intersection.",
    "code": "```ruby\ndef list_intersection(list1, list2)\n  list1 & list2\nend\n```"
  },
  {
    "task": "Create a list of prime numbers less than 100.",
    "code": "```ruby\nrequire 'prime'\n\nprime_numbers = Prime.each(100).to_a\n```"
  },
  {
    "task": "Write a function to split a list into two lists: one with even numbers and one with odd numbers.",
    "code": "```ruby\ndef split_even_odd(numbers)\n  evens, odds = [], []\n  numbers.each do |number|\n    if number.even?\n      evens << number\n    else\n      odds << number\n    end\n  end\n  [evens, odds]\nend\n```"
  },
  {
    "task": "Create a list of strings and convert all the strings to uppercase.",
    "code": "```ruby\nstrings = [\"hello\", \"world\", \"example\"]\nuppercase_strings = strings.map(&:upcase)\n```"
  },
  {
    "task": "Implement a program that removes all elements from a list that are less than a specified value.",
    "code": "```ruby\ndef remove_less_than(lst, value)\n  lst.reject { |x| x < value }\nend\n\n# Example usage:\nlist = [1, 4, 6, 3, 7, 2]\nthreshold = 4\nfiltered_list = remove_less_than(list, threshold)\nputs filtered_list\n```"
  },
  {
    "task": "Write a function that takes a list and returns a new list with elements in random order.",
    "code": "```ruby\ndef shuffle_list(original_list)\n  original_list.shuffle\nend\n```"
  },
  {
    "task": "Create a list of tuples where each tuple contains a number and its square.",
    "code": "```ruby\nlist_of_tuples = (1..10).map { |n| [n, n**2] }\n```"
  },
  {
    "task": "Write a program to multiply all elements in a list by a given factor.",
    "code": "```ruby\ndef multiply_elements(list, factor)\n  list.map { |element| element * factor }\nend\n\n# Example usage\nlist = [1, 2, 3, 4, 5]\nfactor = 3\nresult = multiply_elements(list, factor)\nputs result.inspect\n```"
  },
  {
    "task": "Implement a function that flattens a nested list.",
    "code": "```ruby\ndef flatten_list(nested_list)\n  nested_list.flatten\nend\n```"
  },
  {
    "task": "Create a list of dates and sort them chronologically.",
    "code": "```ruby\nrequire 'date'\n\ndates = [\n  Date.new(2023, 10, 5),\n  Date.new(2022, 1, 15),\n  Date.new(2023, 5, 20)\n]\n\nsorted_dates = dates.sort\n\nputs sorted_dates\n```"
  },
  {
    "task": "Write a function that finds the index of the first occurrence of a given element in a list.",
    "code": "```ruby\ndef find_index_of_element(list, element)\n  list.index(element)\nend\n```"
  },
  {
    "task": "Generate a list of Fibonacci numbers up to a specified limit.",
    "code": "```ruby\ndef fibonacci_list(limit)\n  fibs = [0, 1]\n  while (next_fib = fibs[-1] + fibs[-2]) <= limit\n    fibs << next_fib\n  end\n  fibs\nend\n\nlimit = 100\nfibonacci_numbers = fibonacci_list(limit)\nputs fibonacci_numbers\n```"
  },
  {
    "task": "Create a list of booleans and determine if all are True.",
    "code": "```ruby\nbooleans = [true, true, false, true]\nall_true = booleans.all?(true)\n```"
  },
  {
    "task": "Write a program to concatenate two lists.",
    "code": "```ruby\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]\n\nconcatenated_list = list1 + list2\n\nputs concatenated_list\n```"
  },
  {
    "task": "Implement a function that returns the length of a list without using built-in functions.",
    "code": "```ruby\ndef list_length(lst)\n  length = 0\n  for _ in lst\n    length += 1\n  end\n  length\nend\n```"
  },
  {
    "task": "Create a list of words and find the longest word.",
    "code": "```ruby\nwords = [\"apple\", \"banana\", \"grapefruit\", \"kiwi\", \"strawberry\"]\nlongest_word = words.max_by(&:length)\nputs longest_word\n```"
  },
  {
    "task": "Write a function that takes a list and a predicate function, returning a list of elements that satisfy the predicate.",
    "code": "```ruby\ndef filter_list(list, predicate)\n  list.select { |element| predicate.call(element) }\nend\n```"
  },
  {
    "task": "Generate a list of strings and filter out those with less than 5 characters.",
    "code": "```ruby\nstrings = [\"apple\", \"bat\", \"carrot\", \"dog\", \"elephant\"]\nfiltered_strings = strings.select { |s| s.length >= 5 }\n```"
  },
  {
    "task": "Create a list of mixed data types and separate them into lists by type.",
    "code": "```ruby\nmixed_list = [1, \"hello\", 3.14, :symbol, true, nil, 42, \"world\"]\n\nintegers = mixed_list.select { |item| item.is_a?(Integer) }\nstrings = mixed_list.select { |item| item.is_a?(String) }\nfloats = mixed_list.select { |item| item.is_a?(Float) }\nsymbols = mixed_list.select { |item| item.is_a?(Symbol) }\nbooleans = mixed_list.select { |item| item.is_a?(TrueClass) || item.is_a?(FalseClass) }\nnils = mixed_list.select { |item| item.nil? }\n\nputs \"Integers: #{integers}\"\nputs \"Strings: #{strings}\"\nputs \"Floats: #{floats}\"\nputs \"Symbols: #{symbols}\"\nputs \"Booleans: #{booleans}\"\nputs \"Nils: #{nils}\"\n```"
  },
  {
    "task": "Write a program to find the common elements between two lists.",
    "code": "```ruby\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [4, 5, 6, 7, 8]\n\ncommon_elements = list1 & list2\n\nputs common_elements\n```"
  },
  {
    "task": "Implement a function to rotate the elements of a list to the left by a given number of steps.",
    "code": "```ruby\ndef rotate_left(list, steps)\n  steps %= list.length\n  list[steps..-1] + list[0...steps]\nend\n```"
  },
  {
    "task": "Create a list of numbers and find the product of all the elements.",
    "code": "```ruby\nnumbers = [1, 2, 3, 4, 5]\nproduct = numbers.reduce(1) { |acc, num| acc * num }\n```"
  },
  {
    "task": "Write a function that removes all occurrences of a specified element from a list.",
    "code": "```ruby\ndef remove_all_occurrences(lst, element)\n  lst.reject { |e| e == element }\nend\n```"
  },
  {
    "task": "Generate a list of random numbers and find the median value.",
    "code": "```ruby\nrequire 'securerandom'\n\ndef generate_random_numbers(count)\n  Array.new(count) { SecureRandom.random_number(100) }\nend\n\ndef find_median(numbers)\n  sorted_numbers = numbers.sort\n  mid_index = sorted_numbers.length / 2\n  if sorted_numbers.length.even?\n    (sorted_numbers[mid_index - 1] + sorted_numbers[mid_index]) / 2.0\n  else\n    sorted_numbers[mid_index]\n  end\nend\n\nrandom_numbers = generate_random_numbers(10)\nmedian = find_median(random_numbers)\nputs \"Random Numbers: #{random_numbers}\"\nputs \"Median: #{median}\"\n```"
  },
  {
    "task": "Create a list of dictionaries and sort them by a specific key.",
    "code": "```ruby\nlist_of_dicts = [\n  { 'name' => 'Alice', 'age' => 30 },\n  { 'name' => 'Bob', 'age' => 25 },\n  { 'name' => 'Charlie', 'age' => 35 }\n]\n\nsorted_list = list_of_dicts.sort_by { |dict| dict['age'] }\n```"
  },
  {
    "task": "Write a program to split a list into chunks of a specified size.",
    "code": "```ruby\ndef chunk_list(lst, chunk_size)\n  lst.each_slice(chunk_size).to_a\nend\n\n# Example usage:\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nchunk_size = 3\nresult = chunk_list(list, chunk_size)\nputs result.inspect\n```"
  },
  {
    "task": "Implement a function that takes a list and returns a dictionary with the frequency of each element.",
    "code": "```ruby\ndef frequency_count(list)\n  frequency = Hash.new(0)\n  list.each { |element| frequency[element] += 1 }\n  frequency\nend\n```"
  },
  {
    "task": "Create a list of integers and replace all negative numbers with zero.",
    "code": "```ruby\nintegers = [4, -1, 7, -3, 0, -8, 5]\nintegers.map! { |num| num < 0 ? 0 : num }\n```"
  },
  {
    "task": "Write a function that returns the first n elements of a list.",
    "code": "```ruby\ndef first_n_elements(list, n)\n  list[0, n]\nend\n```"
  },
  {
    "task": "Generate a list of strings and join them into a single string with spaces.",
    "code": "```ruby\nstrings = [\"Hello\", \"world\", \"this\", \"is\", \"Ruby\"]\nresult = strings.join(\" \")\n```"
  },
  {
    "task": "Create a list of lists and find the sum of each inner list.",
    "code": "```ruby\nlist_of_lists = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nsums = list_of_lists.map { |inner_list| inner_list.sum }\nputs sums\n```"
  },
  {
    "task": "Write a function that finds the second largest number in a list.",
    "code": "```ruby\ndef second_largest(numbers)\n  return nil if numbers.size < 2\n  sorted_numbers = numbers.uniq.sort\n  sorted_numbers[-2] if sorted_numbers.size >= 2\nend\n```"
  },
  {
    "task": "Generate a list of numbers and remove the duplicates while maintaining order.",
    "code": "```ruby\nnumbers = [1, 2, 3, 2, 4, 1, 5]\nunique_numbers = numbers.uniq\np unique_numbers\n```"
  },
  {
    "task": "Create a list of integers and partition it into two lists: one with numbers above the average and one below.",
    "code": "```ruby\nnumbers = [10, 20, 30, 40, 50]\naverage = numbers.sum / numbers.size.to_f\nabove_average = numbers.select { |n| n > average }\nbelow_average = numbers.select { |n| n < average }\n```"
  },
  {
    "task": "Write a program to find the longest increasing subsequence in a list of numbers.",
    "code": "```ruby\ndef longest_increasing_subsequence(nums)\n  return [] if nums.empty?\n  dp = Array.new(nums.size, 1)\n  prev = Array.new(nums.size, -1)\n\n  (1...nums.size).each do |i|\n    (0...i).each do |j|\n      if nums[i] > nums[j] && dp[i] < dp[j] + 1\n        dp[i] = dp[j] + 1\n        prev[i] = j\n      end\n    end\n  end\n\n  max_length = dp.max\n  index = dp.index(max_length)\n  lis = []\n\n  while index != -1\n    lis.unshift(nums[index])\n    index = prev[index]\n  end\n\n  lis\nend\n\n# Example usage:\nnumbers = [10, 9, 2, 5, 3, 7, 101, 18]\nputs longest_increasing_subsequence(numbers).inspect\n```"
  },
  {
    "task": "Implement a function to zip two lists into a single list of tuples.",
    "code": "```ruby\ndef zip_lists(list1, list2)\n  list1.zip(list2)\nend\n```"
  },
  {
    "task": "Create a list of characters and count the vowels.",
    "code": "```ruby\ncharacters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']\n\nvowels = ['a', 'e', 'i', 'o', 'u']\nvowel_count = characters.count { |char| vowels.include?(char) }\n\nputs vowel_count\n```"
  },
  {
    "task": "Write a function that returns the last n elements of a list.",
    "code": "```ruby\ndef last_n_elements(list, n)\n  list.last(n)\nend\n```"
  },
  {
    "task": "Generate a list of numbers and split it into two lists: one with positive numbers and one with negative numbers.",
    "code": "```ruby\nnumbers = [10, -3, 5, -8, 7, -1, 0, 4, -6]\n\npositive_numbers = numbers.select { |num| num > 0 }\nnegative_numbers = numbers.select { |num| num < 0 }\n```"
  },
  {
    "task": "Create a list of random integers and find the mode.",
    "code": "```ruby\nrequire 'securerandom'\n\n# Create a list of random integers\nlist = Array.new(100) { SecureRandom.random_number(1..10) }\n\n# Find the mode\nfrequency = list.tally\nmode = frequency.max_by { |_, count| count }.first\n\nputs \"List: #{list}\"\nputs \"Mode: #{mode}\"\n```"
  },
  {
    "task": "Write a program to find the shortest path in a grid using a list to represent the path.",
    "code": "```ruby\ndef shortest_path(grid)\n  rows = grid.size\n  cols = grid[0].size\n  directions = [[1, 0], [-1, 0], [0, 1], [0, -1]]\n  queue = [[0, 0, []]]\n  visited = Array.new(rows) { Array.new(cols, false) }\n  visited[0][0] = true\n\n  while !queue.empty?\n    x, y, path = queue.shift\n    new_path = path + [[x, y]]\n\n    return new_path if x == rows - 1 && y == cols - 1\n\n    directions.each do |dx, dy|\n      nx, ny = x + dx, y + dy\n      if nx.between?(0, rows - 1) && ny.between?(0, cols - 1) && !visited[nx][ny] && grid[nx][ny] == 0\n        visited[nx][ny] = true\n        queue << [nx, ny, new_path]\n      end\n    end\n  end\n\n  nil\nend\n\n# Example usage:\ngrid = [\n  [0, 1, 0, 0],\n  [0, 1, 0, 1],\n  [0, 0, 0, 0],\n  [1, 1, 1, 0]\n]\n\npath = shortest_path(grid)\nputs \"Shortest path: #{path.inspect}\"\n```"
  },
  {
    "task": "Implement a function that takes a list and returns a list with elements doubled.",
    "code": "```ruby\ndef double_elements(list)\n  list.map { |element| element * 2 }\nend\n```"
  },
  {
    "task": "Create a list of integers and sort them in descending order.",
    "code": "```ruby\nnumbers = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]\nsorted_numbers = numbers.sort.reverse\n```"
  },
  {
    "task": "Write a function that takes a list of intervals and merges overlapping intervals.",
    "code": "```ruby\ndef merge_intervals(intervals)\n  return [] if intervals.empty?\n\n  intervals.sort_by! { |interval| interval[0] }\n  merged = [intervals[0]]\n\n  intervals[1..-1].each do |current|\n    last = merged[-1]\n    if current[0] <= last[1]\n      last[1] = [last[1], current[1]].max\n    else\n      merged << current\n    end\n  end\n\n  merged\nend\n```"
  },
  {
    "task": "Generate a list of random numbers and find the range (difference between max and min).",
    "code": "```ruby\nrequire 'securerandom'\n\nnumbers = Array.new(10) { SecureRandom.random_number(100) }\nrange = numbers.max - numbers.min\n```"
  },
  {
    "task": "Create a list of strings and remove any that are palindromes.",
    "code": "```ruby\nstrings = [\"level\", \"world\", \"radar\", \"hello\", \"refer\"]\nfiltered_strings = strings.reject { |s| s == s.reverse }\n```"
  },
  {
    "task": "Write a program to cyclically permute the elements of a list.",
    "code": "```ruby\ndef cyclically_permute(list)\n  return list if list.empty?\n  list.rotate(-1)\nend\n\n# Example usage\nlist = [1, 2, 3, 4]\npermuted_list = cyclically_permute(list)\nputs permuted_list.inspect\n```"
  },
  {
    "task": "Implement a function to create a list of cumulative sums from a list of numbers.",
    "code": "```ruby\ndef cumulative_sums(numbers)\n  sums = []\n  sum = 0\n  numbers.each do |num|\n    sum += num\n    sums << sum\n  end\n  sums\nend\n```"
  },
  {
    "task": "Create a list of numbers and shift all zeros to the end.",
    "code": "```ruby\ndef shift_zeros_to_end(numbers)\n  non_zeros = numbers.select { |n| n != 0 }\n  zeros = numbers.select { |n| n == 0 }\n  non_zeros + zeros\nend\n\nnumbers = [0, 1, 0, 3, 12]\nresult = shift_zeros_to_end(numbers)\nputs result.inspect\n```"
  },
  {
    "task": "Write a program to simulate a queue using a list.",
    "code": "```ruby\nclass Queue\n  def initialize\n    @queue = []\n  end\n\n  def enqueue(element)\n    @queue.push(element)\n  end\n\n  def dequeue\n    @queue.shift\n  end\n\n  def peek\n    @queue.first\n  end\n\n  def empty?\n    @queue.empty?\n  end\n\n  def size\n    @queue.size\n  end\n\n  def display\n    @queue.each { |element| puts element }\n  end\nend\n\n# Example usage\nqueue = Queue.new\nqueue.enqueue(1)\nqueue.enqueue(2)\nqueue.enqueue(3)\nputs \"Dequeued: #{queue.dequeue}\"\nputs \"Peek: #{queue.peek}\"\nputs \"Is empty? #{queue.empty?}\"\nputs \"Size: #{queue.size}\"\nqueue.display\n```"
  },
  {
    "task": "Generate a list of numbers and identify all prime numbers.",
    "code": "```ruby\ndef prime?(number)\n  return false if number <= 1\n  (2..Math.sqrt(number)).none? { |i| number % i == 0 }\nend\n\nnumbers = (1..100).to_a\nprime_numbers = numbers.select { |num| prime?(num) }\n\nputs prime_numbers\n```"
  },
  {
    "task": "Create a list of strings and group them by their starting letter.",
    "code": "```ruby\nstrings = [\"apple\", \"apricot\", \"banana\", \"blueberry\", \"cherry\", \"cranberry\"]\ngrouped = strings.group_by { |string| string[0] }\n```"
  },
  {
    "task": "Write a function that takes a list and returns a new list with all elements squared.",
    "code": "```ruby\ndef square_elements(list)\n  list.map { |element| element ** 2 }\nend\n```"
  },
  {
    "task": "Generate a list of timestamps and find the time difference between consecutive elements.",
    "code": "```ruby\nrequire 'time'\n\ntimestamps = [\n  Time.parse(\"2023-10-01T15:30:00Z\"),\n  Time.parse(\"2023-10-01T16:00:00Z\"),\n  Time.parse(\"2023-10-01T16:45:00Z\"),\n  Time.parse(\"2023-10-01T17:30:00Z\")\n]\n\ntime_differences = timestamps.each_cons(2).map { |a, b| b - a }\n\nputs time_differences\n```"
  },
  {
    "task": "Create a list of numbers and rotate it such that the smallest number is first.",
    "code": "```ruby\nnumbers = [4, 1, 3, 5, 2]\nmin_index = numbers.index(numbers.min)\nrotated_numbers = numbers[min_index..-1] + numbers[0...min_index]\n```"
  },
  {
    "task": "Write a program to find all unique pairs in a list that sum up to a specific target.",
    "code": "```ruby\ndef find_pairs(nums, target)\n  pairs = []\n  nums.uniq.each do |num|\n    complement = target - num\n    if nums.include?(complement) && !pairs.include?([complement, num].sort)\n      pairs << [num, complement].sort\n    end\n  end\n  pairs\nend\n\nnums = [2, 4, 3, 5, 7, 8, 1]\ntarget = 9\nresult = find_pairs(nums, target)\nputs result.inspect\n```"
  },
  {
    "task": "Implement a function that returns true if a list contains a cycle.",
    "code": "```ruby\nclass ListNode\n  attr_accessor :val, :next\n  def initialize(val = 0, _next = nil)\n    @val = val\n    @next = _next\n  end\nend\n\ndef has_cycle(head)\n  slow = head\n  fast = head\n  while fast && fast.next\n    slow = slow.next\n    fast = fast.next.next\n    return true if slow == fast\n  end\n  false\nend\n```"
  },
  {
    "task": "Create a list of numbers and find the contiguous subarray with the maximum sum.",
    "code": "```ruby\ndef max_subarray(nums)\n  max_sum = nums[0]\n  current_sum = nums[0]\n  \n  nums[1..-1].each do |num|\n    current_sum = [num, current_sum + num].max\n    max_sum = [max_sum, current_sum].max\n  end\n  \n  max_sum\nend\n\nnumbers = [1, -2, 3, 4, -1, 2, 1, -5, 4]\nputs max_subarray(numbers)\n```"
  },
  {
    "task": "Write a function that takes a list and a number, and finds two numbers in the list that sum to the given number.",
    "code": "```ruby\ndef find_two_numbers_with_sum(list, target_sum)\n  list.each_with_index do |num1, index1|\n    list.each_with_index do |num2, index2|\n      next if index1 == index2\n      return [num1, num2] if num1 + num2 == target_sum\n    end\n  end\n  nil\nend\n```"
  },
  {
    "task": "Generate a list of even numbers and filter out those that are greater than a specific value.",
    "code": "```ruby\ndef filter_even_numbers(max_value, threshold)\n  (0..max_value).select { |num| num.even? && num <= threshold }\nend\n\nmax_value = 100  # Example maximum value\nthreshold = 50   # Example threshold value\nfiltered_list = filter_even_numbers(max_value, threshold)\nputs filtered_list\n```"
  },
  {
    "task": "Create a list of characters and reverse the vowels only.",
    "code": "```ruby\ndef reverse_vowels(characters)\n  vowels = 'aeiouAEIOU'\n  chars = characters.chars\n  vowel_indices = chars.each_index.select { |i| vowels.include?(chars[i]) }\n  vowel_indices.each_with_index do |index, i|\n    chars[index] = characters[vowel_indices[-i-1]]\n  end\n  chars.join\nend\n\ncharacters = ['h', 'e', 'l', 'l', 'o']\nputs reverse_vowels(characters.join)\n```"
  },
  {
    "task": "Write a program to find all permutations of a list of elements.",
    "code": "```ruby\ndef permutations(list)\n  return [list] if list.length <= 1\n\n  list.each_with_index.flat_map do |element, index|\n    sublist = list[0...index] + list[index+1..-1]\n    permutations(sublist).map { |perm| [element] + perm }\n  end\nend\n\nelements = [1, 2, 3]\nresult = permutations(elements)\nputs result.inspect\n```"
  },
  {
    "task": "Implement a function that takes a list and returns the most frequently occurring element.",
    "code": "```ruby\ndef most_frequent_element(list)\n  list.group_by { |e| e }.max_by { |_, v| v.size }.first\nend\n```"
  },
  {
    "task": "Create a list of numbers and calculate the variance.",
    "code": "```ruby\nnumbers = [1, 2, 3, 4, 5]\n\nmean = numbers.sum.to_f / numbers.size\n\nvariance = numbers.map { |n| (n - mean) ** 2 }.sum / numbers.size\n\nputs variance\n```"
  },
  {
    "task": "Write a function to concatenate a list of lists into a single list.",
    "code": "```ruby\ndef concatenate_lists(list_of_lists)\n  list_of_lists.flatten\nend\n```"
  },
  {
    "task": "Generate a list of numbers and replace each element with the product of all other elements.",
    "code": "```ruby\nnumbers = [1, 2, 3, 4, 5]\nproduct = numbers.reduce(:*)\nresult = numbers.map { |n| product / n }\np result\n```"
  },
  {
    "task": "Create a list of strings and find the common prefix.",
    "code": "```ruby\ndef common_prefix(strings)\n  return '' if strings.empty?\n\n  prefix = strings.min\n  strings.each do |string|\n    while string.index(prefix) != 0\n      prefix = prefix[0...-1]\n      return '' if prefix.empty?\n    end\n  end\n\n  prefix\nend\n\nstrings = [\"flower\", \"flow\", \"flight\"]\nputs common_prefix(strings)\n```"
  },
  {
    "task": "Write a program to partition a list into two lists based on a predicate function.",
    "code": "```ruby\ndef partition_list(list, predicate)\n  list.partition { |element| predicate.call(element) }\nend\n\n# Example usage\nlist = [1, 2, 3, 4, 5]\npredicate = ->(x) { x.even? }\npartitioned_lists = partition_list(list, predicate)\nputs partitioned_lists.inspect\n```"
  },
  {
    "task": "Implement a function to find the kth smallest element in a list.",
    "code": "```ruby\ndef kth_smallest_element(list, k)\n  sorted_list = list.sort\n  sorted_list[k - 1]\nend\n```"
  },
  {
    "task": "Create a list of integers and find the length of the longest contiguous sequence.",
    "code": "```ruby\ndef longest_contiguous_sequence(arr)\n  return 0 if arr.empty?\n\n  current_length = 1\n  max_length = 1\n\n  (1...arr.size).each do |i|\n    if arr[i] == arr[i - 1] + 1\n      current_length += 1\n      max_length = [max_length, current_length].max\n    else\n      current_length = 1\n    end\n  end\n\n  max_length\nend\n\n# Example usage:\nnumbers = [1, 2, 3, 5, 6, 7, 8, 10]\nputs longest_contiguous_sequence(numbers)\n```"
  },
  {
    "task": "Write a function that rotates elements in a list while maintaining the relative order of non-rotated elements.",
    "code": "```ruby\ndef rotate_list(list, k)\n  k %= list.length\n  list[-k..-1] + list[0...-k]\nend\n```"
  },
  {
    "task": "Generate a list of random numbers and sort them while maintaining the original index positions.",
    "code": "```ruby\nrequire 'securerandom'\n\n# Generate a list of random numbers\nlist = Array.new(10) { SecureRandom.random_number(100) }\n\n# Sort list while maintaining original index positions\nsorted_list = list.each_with_index.sort.map { |value, index| [value, index] }\n\n# Output original and sorted list with original indices\noriginal_with_indices = list.each_with_index.to_a\nsorted_with_original_indices = sorted_list\n\nputs \"Original list with indices: #{original_with_indices}\"\nputs \"Sorted list with original indices: #{sorted_with_original_indices}\"\n```"
  },
  {
    "task": "Create a list of numbers and find all subsets that sum up to a specific target.",
    "code": "```ruby\ndef find_subsets(nums, target)\n  result = []\n  backtrack(nums, target, 0, [], result)\n  result\nend\n\ndef backtrack(nums, target, index, path, result)\n  if path.sum == target\n    result << path.dup\n  end\n  \n  (index...nums.size).each do |i|\n    path << nums[i]\n    backtrack(nums, target, i + 1, path, result)\n    path.pop\n  end\nend\n\n# Example usage:\nnums = [1, 2, 3, 4, 5]\ntarget = 5\nsubsets = find_subsets(nums, target)\nputs subsets.inspect\n```"
  },
  {
    "task": "Write a program to simulate a stack using a list.",
    "code": "```ruby\nclass Stack\n  def initialize\n    @stack = []\n  end\n\n  def push(element)\n    @stack.push(element)\n  end\n\n  def pop\n    @stack.pop\n  end\n\n  def peek\n    @stack.last\n  end\n\n  def is_empty?\n    @stack.empty?\n  end\nend\n\n# Example usage\nstack = Stack.new\nstack.push(1)\nstack.push(2)\nputs stack.pop    # Outputs 2\nputs stack.peek   # Outputs 1\nputs stack.is_empty? # Outputs false\nstack.pop\nputs stack.is_empty? # Outputs true\n```"
  }
]