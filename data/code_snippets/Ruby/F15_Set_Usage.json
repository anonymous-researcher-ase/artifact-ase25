[
  {
    "task": "Create a set to store unique usernames and demonstrate adding new ones.",
    "code": "```ruby\nusernames = Set.new\n\nusernames.add(\"alice\")\nusernames.add(\"bob\")\nusernames.add(\"charlie\")\n\n# Demonstrating adding new usernames\nusernames.add(\"david\")\nusernames.add(\"eve\")\n\nputs usernames\n```"
  },
  {
    "task": "Write a function that returns the union of two sets of integers.",
    "code": "```ruby\ndef union_of_sets(set1, set2)\n  set1 | set2\nend\n```"
  },
  {
    "task": "Given two sets of strings, find their intersection.",
    "code": "```ruby\nset1 = Set.new([\"string1\", \"string2\", \"string3\"])\nset2 = Set.new([\"string2\", \"string3\", \"string4\"])\n\nintersection = set1 & set2\n```"
  },
  {
    "task": "Implement a set to track visited web pages and check if a page has been visited.",
    "code": "```ruby\nvisited_pages = Set.new\n\ndef visit_page(page, visited_pages)\n  visited_pages.add(page)\nend\n\ndef visited?(page, visited_pages)\n  visited_pages.include?(page)\nend\n\n# Example usage\nvisit_page(\"https://example.com\", visited_pages)\nputs visited?(\"https://example.com\", visited_pages) # Output: true\nputs visited?(\"https://another.com\", visited_pages) # Output: false\n```"
  },
  {
    "task": "Create a set from a list of numbers and remove duplicates.",
    "code": "```ruby\nnumbers = [1, 2, 2, 3, 4, 4, 5]\nunique_numbers = numbers.to_set\n```"
  },
  {
    "task": "Check if a set is a subset of another set.",
    "code": "```ruby\nset1 = Set.new([1, 2, 3])\nset2 = Set.new([1, 2, 3, 4, 5])\n\nis_subset = set1.subset?(set2)\n```"
  },
  {
    "task": "Demonstrate adding and removing elements from a set of book titles.",
    "code": "```ruby\nbook_titles = Set.new\n\n# Adding elements to the set\nbook_titles.add(\"To Kill a Mockingbird\")\nbook_titles.add(\"1984\")\nbook_titles.add(\"The Great Gatsby\")\n\n# Removing an element from the set\nbook_titles.delete(\"1984\")\n```"
  },
  {
    "task": "Create a set and show how to clear all its elements.",
    "code": "```ruby\nrequire 'set'\n\nmy_set = Set.new([1, 2, 3, 4, 5])\nmy_set.clear\n```"
  },
  {
    "task": "Write a program to find the difference between two sets of employee IDs.",
    "code": "```ruby\nset1 = Set.new([101, 102, 103, 104, 105])\nset2 = Set.new([104, 105, 106, 107])\n\ndifference = set1 - set2\nputs difference.to_a\n```"
  },
  {
    "task": "Implement a set to store unique email addresses and check membership.",
    "code": "```ruby\nemails = Set.new\n\n# Add email addresses\nemails.add('example1@example.com')\nemails.add('example2@example.com')\n\n# Check membership\nif emails.include?('example1@example.com')\n  puts 'Email is in the set.'\nelse\n  puts 'Email is not in the set.'\nend\n```"
  },
  {
    "task": "Use a set to determine if two lists have any common elements.",
    "code": "```ruby\ndef have_common_elements?(list1, list2)\n  set1 = Set.new(list1)\n  list2.any? { |element| set1.include?(element) }\nend\n```"
  },
  {
    "task": "Create a set to represent a group of students and update it with new entries.",
    "code": "```ruby\nstudents = Set.new\nstudents.merge([\"Alice\", \"Bob\", \"Charlie\"])\nstudents.add(\"David\")\nstudents.add(\"Eve\")\n```"
  },
  {
    "task": "Write a function to find symmetric difference between two sets of colors.",
    "code": "```ruby\ndef symmetric_difference(set1, set2)\n  set1.symmetric_difference(set2)\nend\n\ncolors1 = Set.new(['red', 'green', 'blue'])\ncolors2 = Set.new(['green', 'yellow', 'blue'])\n\nsymmetric_diff = symmetric_difference(colors1, colors2)\nputs symmetric_diff.to_a\n```"
  },
  {
    "task": "Implement a set to store unique product codes and demonstrate iteration over it.",
    "code": "```ruby\nproduct_codes = Set.new\n\nproduct_codes.add('P001')\nproduct_codes.add('P002')\nproduct_codes.add('P003')\nproduct_codes.add('P001') # Attempting to add a duplicate\n\nproduct_codes.each do |code|\n  puts code\nend\n```"
  },
  {
    "task": "Create a set and demonstrate the use of the `discard` method.",
    "code": "```ruby\nrequire 'set'\n\nmy_set = Set.new([1, 2, 3, 4, 5])\nmy_set.discard(3)\n\nputs my_set.to_a\n```"
  },
  {
    "task": "Given a list of numbers, create a set and check if a specific number is present.",
    "code": "```ruby\nnumbers = [1, 2, 3, 4, 5]\nnumber_to_check = 3\n\nnumber_set = numbers.to_set\nis_present = number_set.include?(number_to_check)\n\nputs is_present\n```"
  },
  {
    "task": "Use a set to find all unique words in a sentence.",
    "code": "```ruby\nsentence = \"This is a test sentence and this sentence is a test\"\nwords = sentence.downcase.split\nunique_words = words.to_set\nputs unique_words.to_a\n```"
  },
  {
    "task": "Create a set from a sequence of characters and demonstrate set operations.",
    "code": "```ruby\nrequire 'set'\n\n# Create a set from a sequence of characters\ncharacters = ['a', 'b', 'c', 'a', 'd', 'b']\nchar_set = Set.new(characters)\n\n# Demonstrate set operations\nanother_set = Set.new(['c', 'd', 'e', 'f'])\n\n# Union\nunion_set = char_set | another_set\n\n# Intersection\nintersection_set = char_set & another_set\n\n# Difference\ndifference_set = char_set - another_set\n\n# Output the results\nputs \"Original set: #{char_set.to_a}\"\nputs \"Another set: #{another_set.to_a}\"\nputs \"Union: #{union_set.to_a}\"\nputs \"Intersection: #{intersection_set.to_a}\"\nputs \"Difference: #{difference_set.to_a}\"\n```"
  },
  {
    "task": "Write a function to merge two sets and return the result.",
    "code": "```ruby\ndef merge_sets(set1, set2)\n  set1 | set2\nend\n```"
  },
  {
    "task": "Implement a set to hold unique IP addresses and demonstrate basic operations.",
    "code": "```ruby\n# Create a set to hold unique IP addresses\nrequire 'set'\n\nip_addresses = Set.new\n\n# Add IP addresses\nip_addresses.add('192.168.1.1')\nip_addresses.add('10.0.0.1')\nip_addresses.add('172.16.0.1')\n\n# Attempt to add a duplicate IP address\nip_addresses.add('192.168.1.1')\n\n# Display all IP addresses\nputs \"IP Addresses: #{ip_addresses.to_a}\"\n\n# Check if a specific IP address is present\nputs \"Contains 10.0.0.1? #{ip_addresses.include?('10.0.0.1')}\"\n\n# Remove an IP address\nip_addresses.delete('172.16.0.1')\n\n# Display all IP addresses after removal\nputs \"IP Addresses after removal: #{ip_addresses.to_a}\"\n```"
  },
  {
    "task": "Create a set and demonstrate how to find the size of the set.",
    "code": "```ruby\nmy_set = Set.new([1, 2, 3, 4, 5])\nset_size = my_set.size\n```"
  },
  {
    "task": "Write a program to check if two sets of dates are disjoint.",
    "code": "```ruby\nrequire 'set'\n\ndef disjoint_dates?(dates1, dates2)\n  set1 = dates1.to_set\n  set2 = dates2.to_set\n  set1.intersection(set2).empty?\nend\n\ndates1 = ['2023-01-01', '2023-02-01', '2023-03-01']\ndates2 = ['2023-04-01', '2023-05-01', '2023-06-01']\n\nputs disjoint_dates?(dates1, dates2)\n```"
  },
  {
    "task": "Create a set to manage a collection of tags and demonstrate addition and removal.",
    "code": "```ruby\ntags = Set.new\n\n# Adding tags\ntags.add('ruby')\ntags.add('programming')\ntags.add('development')\n\n# Removing a tag\ntags.delete('programming')\n\n# Output the current tags\nputs tags.to_a\n```"
  },
  {
    "task": "Implement a set to track unique inventory items in a store.",
    "code": "```ruby\ninventory = Set.new\n\n# Add items to the inventory\ninventory.add('apple')\ninventory.add('banana')\ninventory.add('orange')\n\n# Check if an item is in the inventory\nitem_in_stock = inventory.include?('apple')\n\n# Remove an item from the inventory\ninventory.delete('banana')\n\n# Display all unique items in the inventory\ninventory.each do |item|\n  puts item\nend\n```"
  },
  {
    "task": "Create a set of numbers and demonstrate conversion to a list.",
    "code": "```ruby\nnumbers_set = Set.new([1, 2, 3, 4, 5])\nnumbers_list = numbers_set.to_a\n```"
  },
  {
    "task": "Write a function that returns all elements present in either of two sets but not both.",
    "code": "```ruby\ndef symmetric_difference(set1, set2)\n  (set1 - set2) | (set2 - set1)\nend\n```"
  },
  {
    "task": "Use a set to manage a collection of unique transaction IDs.",
    "code": "```ruby\nrequire 'set'\n\ntransaction_ids = Set.new\n\n# Example usage\ntransaction_ids << \"TXN12345\"\ntransaction_ids << \"TXN67890\"\ntransaction_ids << \"TXN12345\" # Duplicate, will not be added\n\nputs transaction_ids.to_a\n```"
  },
  {
    "task": "Create a set of integers and demonstrate the `pop` operation.",
    "code": "```ruby\nintegers_set = Set.new([1, 2, 3, 4, 5])\npopped_element = integers_set.to_a.pop\n```"
  },
  {
    "task": "Write a program to find the maximum element in a set of floating-point numbers.",
    "code": "```ruby\nnumbers = Set.new([2.5, 3.7, 1.8, 4.9, 3.3])\nmax_number = numbers.max\nputs max_number\n```"
  },
  {
    "task": "Create a set and demonstrate the use of the `update` method with another set.",
    "code": "```ruby\nset1 = Set.new([1, 2, 3])\nset2 = Set.new([3, 4, 5])\n\nset1.update(set2)\n\nputs set1.to_a\n```"
  },
  {
    "task": "Implement a set to keep track of unique file extensions in a directory.",
    "code": "```ruby\nrequire 'set'\n\ndef unique_file_extensions(directory)\n  extensions = Set.new\n  Dir.foreach(directory) do |filename|\n    ext = File.extname(filename)\n    extensions.add(ext) unless ext.empty?\n  end\n  extensions\nend\n\n# Example usage:\n# puts unique_file_extensions('/path/to/directory').to_a\n```"
  },
  {
    "task": "Create a set of strings and demonstrate how to iterate over it in reverse order.",
    "code": "```ruby\nrequire 'set'\n\nset = Set.new([\"apple\", \"banana\", \"cherry\"])\nset.to_a.reverse_each do |item|\n  puts item\nend\n```"
  },
  {
    "task": "Write a function to check if a set is empty.",
    "code": "```ruby\ndef set_empty?(set)\n  set.empty?\nend\n```"
  },
  {
    "task": "Use a set to filter out duplicate entries from a list of participants.",
    "code": "```ruby\nparticipants = [\"Alice\", \"Bob\", \"Alice\", \"Charlie\", \"Bob\"]\nunique_participants = participants.to_set.to_a\n```"
  },
  {
    "task": "Create a set of tuples and demonstrate basic set operations.",
    "code": "```ruby\nrequire 'set'\n\nset_a = Set.new([[1, 2], [3, 4], [5, 6]])\nset_b = Set.new([[3, 4], [7, 8]])\n\n# Union\nunion_set = set_a | set_b\n\n# Intersection\nintersection_set = set_a & set_b\n\n# Difference\ndifference_set = set_a - set_b\n\nputs \"Set A: #{set_a.to_a}\"\nputs \"Set B: #{set_b.to_a}\"\nputs \"Union: #{union_set.to_a}\"\nputs \"Intersection: #{intersection_set.to_a}\"\nputs \"Difference: #{difference_set.to_a}\"\n```"
  },
  {
    "task": "Write a program to find the common elements between two sets of country names.",
    "code": "```ruby\nset1 = Set.new([\"USA\", \"Canada\", \"Mexico\", \"Brazil\"])\nset2 = Set.new([\"Brazil\", \"Argentina\", \"Canada\", \"Chile\"])\n\ncommon_elements = set1 & set2\nputs common_elements.to_a\n```"
  },
  {
    "task": "Create a set of characters and demonstrate the use of the `issubset` method.",
    "code": "```ruby\nrequire 'set'\n\nset1 = Set.new(['a', 'b', 'c', 'd'])\nset2 = Set.new(['a', 'b'])\n\nis_subset = set2.subset?(set1)\nputs is_subset\n```"
  },
  {
    "task": "Implement a set to manage a collection of unique hashtags from social media posts.",
    "code": "```ruby\nclass HashtagManager\n  def initialize\n    @hashtags = Set.new\n  end\n\n  def add_hashtag(hashtag)\n    @hashtags.add(hashtag)\n  end\n\n  def remove_hashtag(hashtag)\n    @hashtags.delete(hashtag)\n  end\n\n  def all_hashtags\n    @hashtags.to_a\n  end\n\n  def include?(hashtag)\n    @hashtags.include?(hashtag)\n  end\nend\n```"
  },
  {
    "task": "Create a set and demonstrate how to copy it to another set.",
    "code": "```ruby\nrequire 'set'\n\noriginal_set = Set.new([1, 2, 3, 4, 5])\ncopied_set = original_set.dup\n\nputs original_set.inspect\nputs copied_set.inspect\n```"
  },
  {
    "task": "Write a function that accepts two sets and returns a new set with elements found in both.",
    "code": "```ruby\ndef intersection(set1, set2)\n  set1 & set2\nend\n```"
  },
  {
    "task": "Use a set to determine the unique items purchased in a day.",
    "code": "```ruby\npurchases = [\"apple\", \"banana\", \"apple\", \"orange\", \"banana\"]\nunique_items = purchases.to_set\nputs unique_items.to_a\n```"
  },
  {
    "task": "Create a set of student IDs and demonstrate set comprehension to filter IDs.",
    "code": "```ruby\nstudent_ids = Set.new([101, 102, 103, 104, 105, 106])\nfiltered_ids = student_ids.select { |id| id > 103 }\nputs filtered_ids.to_a\n```"
  },
  {
    "task": "Write a program to check if a set of strings is a superset of another set.",
    "code": "```ruby\ndef superset?(set1, set2)\n  set1.superset?(set2)\nend\n\nset1 = Set.new([\"apple\", \"banana\", \"cherry\"])\nset2 = Set.new([\"banana\", \"cherry\"])\n\nputs superset?(set1, set2)\n```"
  },
  {
    "task": "Create a set of unique words from a text file.",
    "code": "```ruby\nrequire 'set'\n\ndef unique_words_from_file(filename)\n  words_set = Set.new\n  File.foreach(filename) do |line|\n    line.split.each { |word| words_set.add(word) }\n  end\n  words_set\nend\n\nfilename = 'path_to_your_text_file.txt'\nunique_words = unique_words_from_file(filename)\nputs unique_words.to_a\n```"
  },
  {
    "task": "Implement a set to store unique project identifiers and demonstrate membership testing.",
    "code": "```ruby\n# Create a set to store unique project identifiers\nrequire 'set'\n\n# Initialize the set\nproject_ids = Set.new\n\n# Add some project identifiers to the set\nproject_ids.add(\"proj_001\")\nproject_ids.add(\"proj_002\")\nproject_ids.add(\"proj_003\")\n\n# Demonstrate membership testing\nputs project_ids.include?(\"proj_001\") # => true\nputs project_ids.include?(\"proj_004\") # => false\n```"
  },
  {
    "task": "Create a set and demonstrate the `symmetric_difference_update` method.",
    "code": "```ruby\nrequire 'set'\n\nset1 = Set.new([1, 2, 3, 4])\nset2 = Set.new([3, 4, 5, 6])\n\nset1.merge(set2 - set1).subtract(set1 & set2)\n\nputs set1.to_a\n```"
  },
  {
    "task": "Write a function to remove all elements from a set that are also in another set.",
    "code": "```ruby\ndef remove_elements_from_set(set1, set2)\n  set1 - set2\nend\n```"
  },
  {
    "task": "Use a set to keep track of unique error codes from server logs.",
    "code": "```ruby\nrequire 'set'\n\nerror_codes = Set.new\n\n# Example of adding error codes\nerror_codes.add(\"404\")\nerror_codes.add(\"500\")\nerror_codes.add(\"404\") # Duplicate; won't be added\n\n# Example of using the set\nputs error_codes.include?(\"404\") # true\nputs error_codes.include?(\"403\") # false\n\nputs error_codes.size # 2\n```"
  },
  {
    "task": "Create a set and demonstrate how to find all unique pairs of elements.",
    "code": "```ruby\nrequire 'set'\n\ndef unique_pairs(set)\n  pairs = Set.new\n  elements = set.to_a\n  elements.each_with_index do |el1, index|\n    elements[(index+1)..-1].each do |el2|\n      pairs << [el1, el2].sort\n    end\n  end\n  pairs\nend\n\nset = Set.new([1, 2, 3, 4])\nunique_pairs_result = unique_pairs(set)\n\nunique_pairs_result.each do |pair|\n  puts pair.inspect\nend\n```"
  },
  {
    "task": "Write a program to find the smallest element in a set of integers.",
    "code": "```ruby\nnumbers = Set.new([5, 3, 8, 1, 9, 2])\nsmallest = numbers.min\nputs smallest\n```"
  },
  {
    "task": "Create a set and demonstrate the `add` method with multiple elements.",
    "code": "```ruby\nrequire 'set'\n\nmy_set = Set.new\nmy_set.add('apple')\nmy_set.add('banana')\nmy_set.add('orange')\n\nputs my_set.to_a\n```"
  },
  {
    "task": "Implement a set to manage a collection of unique author names.",
    "code": "```ruby\nauthors = Set.new\n\n# Adding author names\nauthors.add(\"J.K. Rowling\")\nauthors.add(\"George Orwell\")\nauthors.add(\"Agatha Christie\")\n\n# Attempting to add a duplicate name\nauthors.add(\"J.K. Rowling\")\n\n# Removing an author\nauthors.delete(\"George Orwell\")\n\n# Checking the presence of an author\nauthors.include?(\"Agatha Christie\")\n\n# Listing all authors\nauthors.each do |author|\n  puts author\nend\n```"
  },
  {
    "task": "Create a set of integers and demonstrate converting it to a sorted list.",
    "code": "```ruby\nrequire 'set'\n\ninteger_set = Set.new([5, 3, 9, 1, 4])\nsorted_list = integer_set.to_a.sort\n```"
  },
  {
    "task": "Write a function that returns the union of multiple sets.",
    "code": "```ruby\ndef union_of_sets(*sets)\n  sets.reduce(Set.new) { |acc, set| acc | set }\nend\n```"
  },
  {
    "task": "Use a set to identify unique characters in a string.",
    "code": "```ruby\nrequire 'set'\n\ndef unique_characters(string)\n  Set.new(string.chars)\nend\n\n# Example usage\nstring = \"hello world\"\nunique_chars = unique_characters(string)\nputs unique_chars.to_a.join(\", \")\n```"
  },
  {
    "task": "Create a set of prime numbers and demonstrate basic set operations.",
    "code": "```ruby\nrequire 'set'\n\ndef prime?(n)\n  return false if n <= 1\n  (2..Math.sqrt(n)).none? { |i| n % i == 0 }\nend\n\nprime_set = Set.new\n(2..30).each do |num|\n  prime_set.add(num) if prime?(num)\nend\n\n# Demonstrate basic set operations\nanother_set = Set.new([2, 3, 5, 7, 11, 13, 17, 19, 23, 29])\n\n# Union\nunion_set = prime_set | another_set\n\n# Intersection\nintersection_set = prime_set & another_set\n\n# Difference\ndifference_set = prime_set - another_set\n\n# Output results\nputs \"Prime Set: #{prime_set.to_a}\"\nputs \"Another Set: #{another_set.to_a}\"\nputs \"Union: #{union_set.to_a}\"\nputs \"Intersection: #{intersection_set.to_a}\"\nputs \"Difference: #{difference_set.to_a}\"\n```"
  },
  {
    "task": "Create a set and demonstrate how to check for non-membership.",
    "code": "```ruby\nmy_set = Set.new([1, 2, 3, 4, 5])\nelement = 6\nnon_member = !my_set.include?(element)\nputs non_member\n```"
  },
  {
    "task": "Write a program to find the largest element in a set of numbers.",
    "code": "```ruby\nnumbers = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5].to_set\nlargest_number = numbers.max\nputs largest_number\n```"
  },
  {
    "task": "Create a set of unique movie titles and demonstrate membership testing.",
    "code": "```ruby\nmovies = Set.new([\"Inception\", \"The Matrix\", \"Interstellar\", \"Inception\"])\n\n# Demonstrate membership testing\nputs movies.include?(\"Inception\") # true\nputs movies.include?(\"Avatar\")    # false\n```"
  },
  {
    "task": "Implement a set to store unique keys from a dictionary.",
    "code": "```ruby\ndictionary = { key1: 'value1', key2: 'value2', key3: 'value3' }\nunique_keys_set = dictionary.keys.to_set\n```"
  },
  {
    "task": "Create a set and demonstrate the `difference_update` method.",
    "code": "```ruby\nset1 = Set.new([1, 2, 3, 4, 5])\nset2 = Set.new([3, 4, 5, 6, 7])\n\nset1.difference_update(set2)\nputs set1.to_a\n```"
  },
  {
    "task": "Write a function to merge multiple sets into a single set.",
    "code": "```ruby\ndef merge_sets(*sets)\n  merged_set = Set.new\n  sets.each { |s| merged_set.merge(s) }\n  merged_set\nend\n```"
  },
  {
    "task": "Use a set to filter out duplicate letters from a word.",
    "code": "```ruby\ndef unique_letters(word)\n  word.chars.to_set.to_a.join\nend\n\n# Example usage:\nword = \"letters\"\nputs unique_letters(word)\n```"
  },
  {
    "task": "Create a set and demonstrate the use of the `isdisjoint` method.",
    "code": "```ruby\nrequire 'set'\n\nset1 = Set.new([1, 2, 3])\nset2 = Set.new([4, 5, 6])\nset3 = Set.new([3, 4, 5])\n\nputs set1.disjoint?(set2) # true\nputs set1.disjoint?(set3) # false\n```"
  },
  {
    "task": "Write a program to find all elements that are only in one of two sets.",
    "code": "```ruby\nset1 = Set.new([:a, :b, :c, :d])\nset2 = Set.new([:c, :d, :e, :f])\n\nonly_in_one = (set1 - set2) + (set2 - set1)\n\nputs only_in_one.to_a\n```"
  },
  {
    "task": "Create a set of unique book authors and demonstrate basic set operations.",
    "code": "```ruby\n# Create a set of unique book authors\nrequire 'set'\n\nauthors = Set.new([\"Author A\", \"Author B\", \"Author C\"])\n\n# Add a new author\nauthors.add(\"Author D\")\n\n# Remove an author\nauthors.delete(\"Author A\")\n\n# Check if a particular author is in the set\nputs authors.include?(\"Author B\")\n\n# Display all authors\nauthors.each do |author|\n  puts author\nend\n\n# Perform set operations\nother_authors = Set.new([\"Author C\", \"Author E\"])\n\n# Union of two sets\nunion_authors = authors | other_authors\nputs \"Union: #{union_authors.to_a}\"\n\n# Intersection of two sets\nintersection_authors = authors & other_authors\nputs \"Intersection: #{intersection_authors.to_a}\"\n\n# Difference between two sets\ndifference_authors = authors - other_authors\nputs \"Difference: #{difference_authors.to_a}\"\n```"
  },
  {
    "task": "Implement a set to store unique phone numbers and check for duplicates.",
    "code": "```ruby\nphone_numbers = Set.new\n\ndef add_phone_number(phone_numbers, number)\n  if phone_numbers.include?(number)\n    puts \"Duplicate phone number: #{number}\"\n  else\n    phone_numbers.add(number)\n    puts \"Phone number added: #{number}\"\n  end\nend\n\nrequire 'set'\n\n# Example usage\nadd_phone_number(phone_numbers, '123-456-7890')\nadd_phone_number(phone_numbers, '098-765-4321')\nadd_phone_number(phone_numbers, '123-456-7890')\n```"
  },
  {
    "task": "Create a set of floating-point numbers and demonstrate rounding each element.",
    "code": "```ruby\nfloat_set = Set.new([1.234, 2.345, 3.456, 4.567])\n\nrounded_set = float_set.map { |num| num.round }.to_set\n\nputs rounded_set.to_a\n```"
  },
  {
    "task": "Write a function that returns a set of all vowels present in a given sentence.",
    "code": "```ruby\ndef vowels_in_sentence(sentence)\n  vowels = Set.new(['a', 'e', 'i', 'o', 'u'])\n  sentence.downcase.chars.select { |char| vowels.include?(char) }.to_set\nend\n```"
  },
  {
    "task": "Use a set to track unique session IDs for a web application.",
    "code": "```ruby\nrequire 'set'\n\nsession_ids = Set.new\n\n# Example usage:\nsession_ids.add(\"session1\")\nsession_ids.add(\"session2\")\nsession_ids.add(\"session1\") # Duplicate, will not be added\n\nputs session_ids.to_a\n```"
  },
  {
    "task": "Create a set of unique city names and demonstrate set operations with it.",
    "code": "```ruby\nrequire 'set'\n\n# Create a set of unique city names\ncities = Set.new(['New York', 'Los Angeles', 'Chicago', 'Houston', 'Phoenix'])\n\n# Add a new city to the set\ncities.add('San Francisco')\n\n# Attempt to add a duplicate city\ncities.add('New York')\n\n# Remove a city from the set\ncities.delete('Houston')\n\n# Check if a city is in the set\nis_in_set = cities.include?('Chicago')\n\n# Get the union of two sets\nother_cities = Set.new(['Seattle', 'Boston'])\nunion_cities = cities.union(other_cities)\n\n# Get the intersection of two sets\nintersection_cities = cities.intersection(other_cities)\n\n# Get the difference between two sets\ndifference_cities = cities.difference(other_cities)\n\n# Output the results\nputs \"Cities: #{cities.to_a}\"\nputs \"Is Chicago in the set? #{is_in_set}\"\nputs \"Union of cities: #{union_cities.to_a}\"\nputs \"Intersection of cities: #{intersection_cities.to_a}\"\nputs \"Difference of cities: #{difference_cities.to_a}\"\n```"
  },
  {
    "task": "Write a program to find the common elements in three sets.",
    "code": "```ruby\nset1 = Set.new([1, 2, 3, 4, 5])\nset2 = Set.new([3, 4, 5, 6, 7])\nset3 = Set.new([5, 6, 7, 8, 9])\n\ncommon_elements = set1 & set2 & set3\nputs common_elements.to_a\n```"
  },
  {
    "task": "Create a set and demonstrate how to remove an element by its value.",
    "code": "```ruby\nrequire 'set'\n\nmy_set = Set.new([1, 2, 3, 4, 5])\nmy_set.delete(3)\nputs my_set.to_a\n```"
  },
  {
    "task": "Implement a set to store a collection of unique ISBN numbers.",
    "code": "```ruby\nisbn_set = Set.new\n\n# Example usage: adding ISBN numbers to the set\nisbn_set.add(\"978-3-16-148410-0\")\nisbn_set.add(\"978-1-4028-9462-6\")\nisbn_set.add(\"978-0-262-13472-9\")\n\n# Trying to add a duplicate ISBN number\nisbn_set.add(\"978-3-16-148410-0\")\n\n# Output the unique ISBN numbers\nputs isbn_set.to_a\n```"
  },
  {
    "task": "Create a set and demonstrate the `intersection_update` method.",
    "code": "```ruby\nset1 = Set.new([1, 2, 3, 4, 5])\nset2 = Set.new([3, 4, 5, 6, 7])\n\nset1.intersection_update(set2)\n\nputs set1.to_a\n```"
  },
  {
    "task": "Write a function to generate a set of all unique elements in a list.",
    "code": "```ruby\ndef unique_elements(list)\n  list.to_set\nend\n```"
  },
  {
    "task": "Use a set to determine the unique characters in two strings.",
    "code": "```ruby\nstring1 = \"example1\"\nstring2 = \"example2\"\n\nunique_chars = Set.new(string1.chars) | Set.new(string2.chars)\n```"
  },
  {
    "task": "Create a set of unique animal names and demonstrate the `discard` method.",
    "code": "```ruby\nanimal_names = Set.new([\"lion\", \"tiger\", \"bear\", \"elephant\", \"lion\"])\nanimal_names.delete(\"lion\") # equivalent to discard in some languages\n```"
  },
  {
    "task": "Write a program to find all elements present in the first set but not in the second.",
    "code": "```ruby\nset1 = Set.new([/* elements of set1 */])\nset2 = Set.new([/* elements of set2 */])\n\ndifference = set1 - set2\nputs difference.to_a\n```"
  },
  {
    "task": "Create a set of integers and demonstrate using it to eliminate duplicates from a list.",
    "code": "```ruby\nnumbers = [1, 2, 3, 2, 4, 5, 3, 6, 7, 8, 5]\nunique_numbers = numbers.to_set\nputs unique_numbers.to_a\n```"
  },
  {
    "task": "Implement a set to manage a collection of unique car models.",
    "code": "```ruby\ncar_models = Set.new\n\n# Adding car models\ncar_models.add('Toyota')\ncar_models.add('Ford')\ncar_models.add('Honda')\n\n# Attempting to add a duplicate model\ncar_models.add('Toyota')\n\n# Removing a car model\ncar_models.delete('Ford')\n\n# Checking if a model exists\ncar_exists = car_models.include?('Honda')\n\n# Outputting all car models\ncar_models.each do |model|\n  puts model\nend\n```"
  },
  {
    "task": "Create a set and demonstrate the use of the `clear` method.",
    "code": "```ruby\nmy_set = Set.new([1, 2, 3, 4, 5])\nmy_set.clear\n```"
  },
  {
    "task": "Write a function that finds the intersection of multiple sets.",
    "code": "```ruby\ndef intersection_of_sets(*sets)\n  sets.reduce { |intersection, set| intersection & set }\nend\n```"
  },
  {
    "task": "Use a set to identify unique words in a paragraph.",
    "code": "```ruby\nparagraph = \"This is a sample paragraph with some words. Some words are repeated and some are unique.\"\nwords = paragraph.downcase.scan(/\\b\\w+\\b/)\nunique_words = words.to_set\nputs unique_words.to_a\n```"
  },
  {
    "task": "Create a set of unique country codes and demonstrate membership testing.",
    "code": "```ruby\ncountry_codes = Set.new([\"US\", \"CA\", \"MX\", \"FR\", \"DE\"])\n\nputs country_codes.include?(\"US\") # true\nputs country_codes.include?(\"JP\") # false\n```"
  },
  {
    "task": "Write a program to find the union of two sets and return it as a list.",
    "code": "```ruby\ndef union_of_sets(set1, set2)\n  (set1 | set2).to_a\nend\n\nset1 = Set.new([1, 2, 3])\nset2 = Set.new([3, 4, 5])\n\nresult = union_of_sets(set1, set2)\nputs result.inspect\n```"
  },
  {
    "task": "Create a set and demonstrate using it to check if all elements of another set are present.",
    "code": "```ruby\nset_a = Set.new([1, 2, 3, 4, 5])\nset_b = Set.new([2, 3, 4])\n\nall_present = set_b.subset?(set_a)\nputs all_present\n```"
  },
  {
    "task": "Implement a set to store unique coupon codes and demonstrate adding new codes.",
    "code": "```ruby\ncoupon_codes = Set.new\n\ncoupon_codes.add(\"SAVE10\")\ncoupon_codes.add(\"WELCOME20\")\ncoupon_codes.add(\"SUMMER30\")\n\ncoupon_codes.each do |code|\n  puts code\nend\n```"
  },
  {
    "task": "Create a set and demonstrate the `copy` method.",
    "code": "```ruby\nrequire 'set'\n\noriginal_set = Set.new([1, 2, 3, 4, 5])\ncopied_set = original_set.dup\n```"
  },
  {
    "task": "Write a function to remove duplicates from a list using a set.",
    "code": "```ruby\ndef remove_duplicates(list)\n  list.to_set.to_a\nend\n```"
  },
  {
    "task": "Use a set to identify unique numbers in a sequence.",
    "code": "```ruby\nrequire 'set'\n\ndef unique_numbers(sequence)\n  Set.new(sequence).to_a\nend\n\nsequence = [1, 2, 2, 3, 4, 4, 5]\nunique_sequence = unique_numbers(sequence)\nputs unique_sequence\n```"
  },
  {
    "task": "Create a set of unique fruit names and demonstrate set operations with it.",
    "code": "```ruby\nrequire 'set'\n\n# Create a set of unique fruit names\nfruits = Set.new([\"apple\", \"banana\", \"cherry\", \"date\"])\n\n# Demonstrate set operations\n# Add a new fruit\nfruits.add(\"elderberry\")\n\n# Remove a fruit\nfruits.delete(\"banana\")\n\n# Check if a fruit is in the set\ncontains_apple = fruits.include?(\"apple\")\n\n# Get the union of two sets\ncitrus = Set.new([\"orange\", \"lemon\"])\nall_fruits = fruits.union(citrus)\n\n# Get the intersection of two sets\ncommon_fruits = fruits.intersection(citrus)\n\n# Get the difference of two sets\nnon_citrus_fruits = fruits.difference(citrus)\n\nputs \"Fruits: #{fruits.to_a}\"\nputs \"Contains apple: #{contains_apple}\"\nputs \"All fruits: #{all_fruits.to_a}\"\nputs \"Common fruits: #{common_fruits.to_a}\"\nputs \"Non-citrus fruits: #{non_citrus_fruits.to_a}\"\n```"
  }
]