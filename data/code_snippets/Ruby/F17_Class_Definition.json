[
  {
    "task": "Define a class representing a book with attributes for title, author, and number of pages, and a method to display the book's information.",
    "code": "```ruby\nclass Book\n  attr_accessor :title, :author, :number_of_pages\n\n  def initialize(title, author, number_of_pages)\n    @title = title\n    @author = author\n    @number_of_pages = number_of_pages\n  end\n\n  def display_info\n    \"Title: #{@title}, Author: #{@author}, Pages: #{@number_of_pages}\"\n  end\nend\n```"
  },
  {
    "task": "Create a class for a bank account that includes attributes for account number, balance, and a method to deposit funds.",
    "code": "```ruby\nclass BankAccount\n  attr_accessor :account_number, :balance\n\n  def initialize(account_number, balance = 0.0)\n    @account_number = account_number\n    @balance = balance\n  end\n\n  def deposit(amount)\n    @balance += amount\n  end\nend\n```"
  },
  {
    "task": "Design a class for a vehicle with properties for make, model, and year, and a method to start the engine.",
    "code": "```ruby\nclass Vehicle\n  attr_accessor :make, :model, :year\n\n  def initialize(make, model, year)\n    @make = make\n    @model = model\n    @year = year\n  end\n\n  def start_engine\n    \"Engine started!\"\n  end\nend\n```"
  },
  {
    "task": "Implement a class that models a student with attributes for name, ID, and grades, and a method to calculate the GPA.",
    "code": "```ruby\nclass Student\n  attr_accessor :name, :id, :grades\n\n  def initialize(name, id, grades = [])\n    @name = name\n    @id = id\n    @grades = grades\n  end\n\n  def calculate_gpa\n    return 0.0 if @grades.empty?\n    @grades.sum.to_f / @grades.size\n  end\nend\n```"
  },
  {
    "task": "Construct a class for a rectangle that has attributes for width and height, and methods to calculate area and perimeter.",
    "code": "```ruby\nclass Rectangle\n  attr_accessor :width, :height\n\n  def initialize(width, height)\n    @width = width\n    @height = height\n  end\n\n  def area\n    @width * @height\n  end\n\n  def perimeter\n    2 * (@width + @height)\n  end\nend\n```"
  },
  {
    "task": "Formulate a class for a smartphone with properties for brand, model, and battery life, and a method to make a call.",
    "code": "```ruby\nclass Smartphone\n  attr_accessor :brand, :model, :battery_life\n\n  def initialize(brand, model, battery_life)\n    @brand = brand\n    @model = model\n    @battery_life = battery_life\n  end\n\n  def make_call\n    \"Making a call...\"\n  end\nend\n```"
  },
  {
    "task": "Build a class representing a movie with attributes for title, director, and duration, and a method to play the movie.",
    "code": "```ruby\nclass Movie\n  attr_accessor :title, :director, :duration\n\n  def initialize(title, director, duration)\n    @title = title\n    @director = director\n    @duration = duration\n  end\n\n  def play\n    \"Playing #{@title} directed by #{@director}.\"\n  end\nend\n```"
  },
  {
    "task": "Create a class for an employee with attributes for name, position, and salary, and a method to display their profile.",
    "code": "```ruby\nclass Employee\n  attr_accessor :name, :position, :salary\n\n  def initialize(name, position, salary)\n    @name = name\n    @position = position\n    @salary = salary\n  end\n\n  def display_profile\n    \"Name: #{@name}, Position: #{@position}, Salary: #{@salary}\"\n  end\nend\n```"
  },
  {
    "task": "Design a class for a library that includes attributes for name, location, and books available, and a method to add a new book.",
    "code": "```ruby\nclass Library\n  attr_accessor :name, :location, :books_available\n\n  def initialize(name, location)\n    @name = name\n    @location = location\n    @books_available = []\n  end\n\n  def add_book(book)\n    @books_available << book\n  end\nend\n```"
  },
  {
    "task": "Develop a class for a shopping cart with properties for items and total cost, and methods to add and remove items.",
    "code": "```ruby\nclass ShoppingCart\n  attr_accessor :items, :total_cost\n\n  def initialize\n    @items = []\n    @total_cost = 0.0\n  end\n\n  def add_item(item, cost)\n    @items << item\n    @total_cost += cost\n  end\n\n  def remove_item(item, cost)\n    if @items.include?(item)\n      @items.delete(item)\n      @total_cost -= cost\n    end\n  end\nend\n```"
  },
  {
    "task": "Implement a class for a thermostat with attributes for current temperature and desired temperature, and a method to adjust the temperature.",
    "code": "```ruby\nclass Thermostat\n  attr_accessor :current_temperature, :desired_temperature\n\n  def initialize(current_temperature, desired_temperature)\n    @current_temperature = current_temperature\n    @desired_temperature = desired_temperature\n  end\n\n  def adjust_temperature\n    if @current_temperature < @desired_temperature\n      @current_temperature += 1\n    elsif @current_temperature > @desired_temperature\n      @current_temperature -= 1\n    end\n  end\nend\n```"
  },
  {
    "task": "Formulate a class for a person with attributes for first name, last name, and age, and a method to return the full name.",
    "code": "```ruby\nclass Person\n  attr_accessor :first_name, :last_name, :age\n\n  def initialize(first_name, last_name, age)\n    @first_name = first_name\n    @last_name = last_name\n    @age = age\n  end\n\n  def full_name\n    \"#{@first_name} #{@last_name}\"\n  end\nend\n```"
  },
  {
    "task": "Construct a class for a game character with properties for health, strength, and inventory, and a method to attack.",
    "code": "```ruby\nclass GameCharacter\n  attr_accessor :health, :strength, :inventory\n\n  def initialize(health, strength, inventory = [])\n    @health = health\n    @strength = strength\n    @inventory = inventory\n  end\n\n  def attack\n    \"Attacking with strength of #{@strength}\"\n  end\nend\n```"
  },
  {
    "task": "Create a class for a calendar event with attributes for title, date, and location, and a method to reschedule the event.",
    "code": "```ruby\nclass CalendarEvent\n  attr_accessor :title, :date, :location\n\n  def initialize(title, date, location)\n    @title = title\n    @date = date\n    @location = location\n  end\n\n  def reschedule(new_date)\n    @date = new_date\n  end\nend\n```"
  },
  {
    "task": "Design a class representing a song with properties for title, artist, and duration, and a method to play the song.",
    "code": "```ruby\nclass Song\n  attr_accessor :title, :artist, :duration\n\n  def initialize(title, artist, duration)\n    @title = title\n    @artist = artist\n    @duration = duration\n  end\n\n  def play\n    puts \"Playing '#{title}' by #{artist}...\"\n  end\nend\n```"
  },
  {
    "task": "Develop a class for an order in an e-commerce system with attributes for order ID, customer, and items, and a method to calculate total price.",
    "code": "```ruby\nclass Order\n  attr_accessor :order_id, :customer, :items\n\n  def initialize(order_id, customer, items)\n    @order_id = order_id\n    @customer = customer\n    @items = items\n  end\n\n  def total_price\n    @items.reduce(0) { |sum, item| sum + item[:price] * item[:quantity] }\n  end\nend\n```"
  },
  {
    "task": "Build a class for a social media post with attributes for content, author, and timestamp, and a method to like the post.",
    "code": "```ruby\nclass SocialMediaPost\n  attr_accessor :content, :author, :timestamp, :likes\n\n  def initialize(content, author, timestamp)\n    @content = content\n    @author = author\n    @timestamp = timestamp\n    @likes = 0\n  end\n\n  def like\n    @likes += 1\n  end\nend\n```"
  },
  {
    "task": "Create a class for a computer with properties for processor, RAM, and storage, and a method to display system specifications.",
    "code": "```ruby\nclass Computer\n  attr_accessor :processor, :ram, :storage\n\n  def initialize(processor, ram, storage)\n    @processor = processor\n    @ram = ram\n    @storage = storage\n  end\n\n  def display_specs\n    \"Processor: #{@processor}, RAM: #{@ram}, Storage: #{@storage}\"\n  end\nend\n```"
  },
  {
    "task": "Implement a class for a restaurant menu item with attributes for name, price, and description, and a method to update the price.",
    "code": "```ruby\nclass MenuItem\n  attr_accessor :name, :price, :description\n\n  def initialize(name, price, description)\n    @name = name\n    @price = price\n    @description = description\n  end\n\n  def update_price(new_price)\n    @price = new_price\n  end\nend\n```"
  },
  {
    "task": "Design a class for a package delivery with attributes for tracking number, destination, and status, and a method to update the status.",
    "code": "```ruby\nclass PackageDelivery\n  attr_accessor :tracking_number, :destination, :status\n\n  def initialize(tracking_number, destination, status)\n    @tracking_number = tracking_number\n    @destination = destination\n    @status = status\n  end\n\n  def update_status(new_status)\n    @status = new_status\n  end\nend\n```"
  },
  {
    "task": "Construct a class representing a pet with attributes for species, age, and name, and a method to display its details.",
    "code": "```ruby\nclass Pet\n  attr_accessor :species, :age, :name\n\n  def initialize(species, age, name)\n    @species = species\n    @age = age\n    @name = name\n  end\n\n  def display_details\n    \"Species: #{@species}, Age: #{@age}, Name: #{@name}\"\n  end\nend\n```"
  },
  {
    "task": "Formulate a class for a product in a store with properties for SKU, name, and price, and a method to apply a discount.",
    "code": "```ruby\nclass Product\n  attr_accessor :sku, :name, :price\n\n  def initialize(sku, name, price)\n    @sku = sku\n    @name = name\n    @price = price\n  end\n\n  def apply_discount(discount_percentage)\n    @price -= @price * (discount_percentage / 100.0)\n  end\nend\n```"
  },
  {
    "task": "Develop a class for a university course with attributes for course code, title, and credits, and a method to enroll a student.",
    "code": "```ruby\nclass UniversityCourse\n  attr_accessor :course_code, :title, :credits\n\n  def initialize(course_code, title, credits)\n    @course_code = course_code\n    @title = title\n    @credits = credits\n    @students_enrolled = []\n  end\n\n  def enroll_student(student_name)\n    @students_enrolled << student_name\n  end\nend\n```"
  },
  {
    "task": "Create a class for a smart light bulb with attributes for color, brightness, and state (on/off), and a method to change the color.",
    "code": "```ruby\nclass SmartLightBulb\n  attr_accessor :color, :brightness, :state\n\n  def initialize(color, brightness, state)\n    @color = color\n    @brightness = brightness\n    @state = state\n  end\n\n  def change_color(new_color)\n    @color = new_color\n  end\nend\n```"
  },
  {
    "task": "Design a class for a blog post with properties for title, content, and date published, and a method to edit the content.",
    "code": "```ruby\nclass BlogPost\n  attr_accessor :title, :content, :date_published\n\n  def initialize(title, content, date_published)\n    @title = title\n    @content = content\n    @date_published = date_published\n  end\n\n  def edit_content(new_content)\n    @content = new_content\n  end\nend\n```"
  },
  {
    "task": "Build a class for a bank transaction with attributes for transaction ID, amount, and type, and a method to reverse the transaction.",
    "code": "```ruby\nclass BankTransaction\n  attr_accessor :transaction_id, :amount, :type\n\n  def initialize(transaction_id, amount, type)\n    @transaction_id = transaction_id\n    @amount = amount\n    @type = type\n  end\n\n  def reverse_transaction\n    if @type == 'credit'\n      @type = 'debit'\n    elsif @type == 'debit'\n      @type = 'credit'\n    end\n    @amount = -@amount\n  end\nend\n```"
  },
  {
    "task": "Implement a class for a city with properties for name, population, and area, and a method to calculate population density.",
    "code": "```ruby\nclass City\n  attr_accessor :name, :population, :area\n\n  def initialize(name, population, area)\n    @name = name\n    @population = population\n    @area = area\n  end\n\n  def population_density\n    @population.to_f / @area\n  end\nend\n```"
  },
  {
    "task": "Construct a class for a library member with attributes for member ID, name, and borrowed books, and a method to borrow a book.",
    "code": "```ruby\nclass LibraryMember\n  attr_accessor :member_id, :name, :borrowed_books\n\n  def initialize(member_id, name)\n    @member_id = member_id\n    @name = name\n    @borrowed_books = []\n  end\n\n  def borrow_book(book)\n    @borrowed_books << book\n  end\nend\n```"
  },
  {
    "task": "Create a class for a flight reservation with attributes for flight number, passenger name, and seat number, and a method to change the seat.",
    "code": "```ruby\nclass FlightReservation\n  attr_accessor :flight_number, :passenger_name, :seat_number\n\n  def initialize(flight_number, passenger_name, seat_number)\n    @flight_number = flight_number\n    @passenger_name = passenger_name\n    @seat_number = seat_number\n  end\n\n  def change_seat(new_seat_number)\n    @seat_number = new_seat_number\n  end\nend\n```"
  },
  {
    "task": "Develop a class for a digital photo album with properties for album name, photos, and a method to add a new photo.",
    "code": "```ruby\nclass DigitalPhotoAlbum\n  attr_accessor :album_name, :photos\n\n  def initialize(album_name)\n    @album_name = album_name\n    @photos = []\n  end\n\n  def add_photo(photo)\n    @photos << photo\n  end\nend\n```"
  },
  {
    "task": "Design a class for a task in a to-do list with attributes for description, deadline, and status, and a method to mark it as complete.",
    "code": "```ruby\nclass Task\n  attr_accessor :description, :deadline, :status\n\n  def initialize(description, deadline, status = 'incomplete')\n    @description = description\n    @deadline = deadline\n    @status = status\n  end\n\n  def mark_as_complete\n    @status = 'complete'\n  end\nend\n```"
  },
  {
    "task": "Formulate a class for a conference speaker with attributes for name, topic, and time slot, and a method to update the time slot.",
    "code": "```ruby\nclass ConferenceSpeaker\n  attr_accessor :name, :topic, :time_slot\n\n  def initialize(name, topic, time_slot)\n    @name = name\n    @topic = topic\n    @time_slot = time_slot\n  end\n\n  def update_time_slot(new_time_slot)\n    @time_slot = new_time_slot\n  end\nend\n```"
  },
  {
    "task": "Construct a class for a real estate property with attributes for address, price, and square footage, and a method to change the price.",
    "code": "```ruby\nclass RealEstateProperty\n  attr_accessor :address, :price, :square_footage\n\n  def initialize(address, price, square_footage)\n    @address = address\n    @price = price\n    @square_footage = square_footage\n  end\n\n  def change_price(new_price)\n    @price = new_price\n  end\nend\n```"
  },
  {
    "task": "Create a class for a weather forecast with properties for temperature, humidity, and condition, and a method to update the forecast.",
    "code": "```ruby\nclass WeatherForecast\n  attr_accessor :temperature, :humidity, :condition\n\n  def initialize(temperature, humidity, condition)\n    @temperature = temperature\n    @humidity = humidity\n    @condition = condition\n  end\n\n  def update_forecast(new_temperature, new_humidity, new_condition)\n    @temperature = new_temperature\n    @humidity = new_humidity\n    @condition = new_condition\n  end\nend\n```"
  },
  {
    "task": "Build a class for a musical instrument with attributes for type, brand, and model, and a method to play a note.",
    "code": "```ruby\nclass MusicalInstrument\n  attr_accessor :type, :brand, :model\n\n  def initialize(type, brand, model)\n    @type = type\n    @brand = brand\n    @model = model\n  end\n\n  def play_note\n    puts \"Playing a note on the #{@brand} #{@model} #{@type}.\"\n  end\nend\n```"
  },
  {
    "task": "Design a class for a sports team with attributes for team name, players, and coach, and a method to add a new player.",
    "code": "```ruby\nclass SportsTeam\n  attr_accessor :team_name, :players, :coach\n\n  def initialize(team_name, players = [], coach)\n    @team_name = team_name\n    @players = players\n    @coach = coach\n  end\n\n  def add_player(player)\n    @players << player\n  end\nend\n```"
  },
  {
    "task": "Implement a class for a podcast episode with attributes for title, duration, and host, and a method to play the episode.",
    "code": "```ruby\nclass PodcastEpisode\n  attr_accessor :title, :duration, :host\n\n  def initialize(title, duration, host)\n    @title = title\n    @duration = duration\n    @host = host\n  end\n\n  def play\n    puts \"Playing #{@title} hosted by #{@host}\"\n  end\nend\n```"
  },
  {
    "task": "Develop a class for a space mission with properties for mission name, crew, and launch date, and a method to launch the mission.",
    "code": "```ruby\nclass SpaceMission\n  attr_accessor :mission_name, :crew, :launch_date\n\n  def initialize(mission_name, crew, launch_date)\n    @mission_name = mission_name\n    @crew = crew\n    @launch_date = launch_date\n  end\n\n  def launch\n    puts \"Launching mission '#{@mission_name}' with crew #{@crew} on #{@launch_date}.\"\n  end\nend\n```"
  },
  {
    "task": "Create a class for a virtual assistant with attributes for name, language, and skills, and a method to add a new skill.",
    "code": "```ruby\nclass VirtualAssistant\n  attr_accessor :name, :language, :skills\n\n  def initialize(name, language, skills = [])\n    @name = name\n    @language = language\n    @skills = skills\n  end\n\n  def add_skill(new_skill)\n    @skills << new_skill\n  end\nend\n```"
  },
  {
    "task": "Formulate a class for a news article with attributes for headline, content, and author, and a method to publish the article.",
    "code": "```ruby\nclass NewsArticle\n  attr_accessor :headline, :content, :author\n\n  def initialize(headline, content, author)\n    @headline = headline\n    @content = content\n    @author = author\n  end\n\n  def publish\n    puts \"Headline: #{@headline}\"\n    puts \"Content: #{@content}\"\n    puts \"Author: #{@author}\"\n  end\nend\n```"
  },
  {
    "task": "Construct a class for a hiking trail with attributes for trail name, length, and difficulty, and a method to update the difficulty.",
    "code": "```ruby\nclass HikingTrail\n  attr_accessor :trail_name, :length, :difficulty\n\n  def initialize(trail_name, length, difficulty)\n    @trail_name = trail_name\n    @length = length\n    @difficulty = difficulty\n  end\n\n  def update_difficulty(new_difficulty)\n    @difficulty = new_difficulty\n  end\nend\n```"
  },
  {
    "task": "Design a class for a subscription service with properties for service name, subscriber count, and subscription fee, and a method to update the fee.",
    "code": "```ruby\nclass SubscriptionService\n  attr_accessor :service_name, :subscriber_count, :subscription_fee\n\n  def initialize(service_name, subscriber_count, subscription_fee)\n    @service_name = service_name\n    @subscriber_count = subscriber_count\n    @subscription_fee = subscription_fee\n  end\n\n  def update_fee(new_fee)\n    @subscription_fee = new_fee\n  end\nend\n```"
  },
  {
    "task": "Build a class for a digital wallet with attributes for balance, transaction history, and a method to add funds.",
    "code": "```ruby\nclass DigitalWallet\n  attr_accessor :balance, :transaction_history\n\n  def initialize\n    @balance = 0\n    @transaction_history = []\n  end\n\n  def add_funds(amount)\n    @balance += amount\n    @transaction_history << { type: 'credit', amount: amount }\n  end\nend\n```"
  },
  {
    "task": "Implement a class for a cooking recipe with attributes for name, ingredients, and instructions, and a method to update the instructions.",
    "code": "```ruby\nclass Recipe\n  attr_accessor :name, :ingredients, :instructions\n\n  def initialize(name, ingredients, instructions)\n    @name = name\n    @ingredients = ingredients\n    @instructions = instructions\n  end\n\n  def update_instructions(new_instructions)\n    @instructions = new_instructions\n  end\nend\n```"
  },
  {
    "task": "Develop a class for a time zone with properties for zone name, offset, and a method to convert time from another time zone.",
    "code": "```ruby\nclass TimeZone\n  attr_accessor :zone_name, :offset\n\n  def initialize(zone_name, offset)\n    @zone_name = zone_name\n    @offset = offset\n  end\n\n  def convert_time(time, other_time_zone)\n    time + (@offset - other_time_zone.offset) * 3600\n  end\nend\n```"
  },
  {
    "task": "Create a class for a camera with attributes for resolution, brand, and model, and a method to take a picture.",
    "code": "```ruby\nclass Camera\n  attr_accessor :resolution, :brand, :model\n\n  def initialize(resolution, brand, model)\n    @resolution = resolution\n    @brand = brand\n    @model = model\n  end\n\n  def take_picture\n    puts \"Picture taken with #{@brand} #{@model} at #{@resolution} resolution.\"\n  end\nend\n```"
  },
  {
    "task": "Design a class for a gaming console with properties for brand, model, and storage capacity, and a method to install a game.",
    "code": "```ruby\nclass GamingConsole\n  attr_accessor :brand, :model, :storage_capacity\n\n  def initialize(brand, model, storage_capacity)\n    @brand = brand\n    @model = model\n    @storage_capacity = storage_capacity\n  end\n\n  def install_game(game_name)\n    puts \"Installing #{game_name}...\"\n  end\nend\n```"
  },
  {
    "task": "Formulate a class for a museum exhibit with attributes for exhibit name, artist, and year, and a method to update the year.",
    "code": "```ruby\nclass MuseumExhibit\n  attr_accessor :name, :artist, :year\n\n  def initialize(name, artist, year)\n    @name = name\n    @artist = artist\n    @year = year\n  end\n\n  def update_year(new_year)\n    @year = new_year\n  end\nend\n```"
  },
  {
    "task": "Construct a class for a fitness tracker with attributes for steps, calories burned, and heart rate, and a method to add steps.",
    "code": "```ruby\nclass FitnessTracker\n  attr_accessor :steps, :calories_burned, :heart_rate\n\n  def initialize(steps = 0, calories_burned = 0, heart_rate = 0)\n    @steps = steps\n    @calories_burned = calories_burned\n    @heart_rate = heart_rate\n  end\n\n  def add_steps(steps)\n    @steps += steps\n  end\nend\n```"
  },
  {
    "task": "Build a class for an aquarium with properties for tank size, fish species, and water temperature, and a method to add a new fish.",
    "code": "```ruby\nclass Aquarium\n  attr_accessor :tank_size, :fish_species, :water_temperature\n\n  def initialize(tank_size, fish_species, water_temperature)\n    @tank_size = tank_size\n    @fish_species = fish_species\n    @water_temperature = water_temperature\n  end\n\n  def add_fish(new_fish)\n    @fish_species << new_fish\n  end\nend\n```"
  },
  {
    "task": "Create a class for a chat message with attributes for sender, content, and timestamp, and a method to edit the content.",
    "code": "```ruby\nclass ChatMessage\n  attr_accessor :sender, :content, :timestamp\n\n  def initialize(sender, content, timestamp)\n    @sender = sender\n    @content = content\n    @timestamp = timestamp\n  end\n\n  def edit_content(new_content)\n    @content = new_content\n  end\nend\n```"
  },
  {
    "task": "Design a class for a vending machine with properties for items available, prices, and a method to dispense an item.",
    "code": "```ruby\nclass VendingMachine\n  attr_accessor :items, :prices\n\n  def initialize(items, prices)\n    @items = items\n    @prices = prices\n  end\n\n  def dispense(item)\n    if @items.include?(item) && @items[item] > 0\n      @items[item] -= 1\n      return \"Dispensing #{item}\"\n    else\n      return \"Item not available\"\n    end\n  end\nend\n```"
  },
  {
    "task": "Implement a class for a digital clock with attributes for current time, time zone, and a method to set an alarm.",
    "code": "```ruby\nclass DigitalClock\n  attr_accessor :current_time, :time_zone\n\n  def initialize(current_time, time_zone)\n    @current_time = current_time\n    @time_zone = time_zone\n    @alarm_time = nil\n  end\n\n  def set_alarm(alarm_time)\n    @alarm_time = alarm_time\n  end\nend\n```"
  },
  {
    "task": "Develop a class for a historical figure with attributes for name, birthdate, and achievements, and a method to add an achievement.",
    "code": "```ruby\nclass HistoricalFigure\n  attr_accessor :name, :birthdate, :achievements\n\n  def initialize(name, birthdate)\n    @name = name\n    @birthdate = birthdate\n    @achievements = []\n  end\n\n  def add_achievement(achievement)\n    @achievements << achievement\n  end\nend\n```"
  },
  {
    "task": "Formulate a class for a travel itinerary with attributes for destinations, travel dates, and activities, and a method to add a destination.",
    "code": "```ruby\nclass TravelItinerary\n  attr_accessor :destinations, :travel_dates, :activities\n\n  def initialize\n    @destinations = []\n    @travel_dates = {}\n    @activities = []\n  end\n\n  def add_destination(destination)\n    @destinations << destination\n  end\nend\n```"
  },
  {
    "task": "Construct a class for a fashion brand with properties for brand name, founder, and product lines, and a method to launch a new product line.",
    "code": "```ruby\nclass FashionBrand\n  attr_accessor :brand_name, :founder, :product_lines\n\n  def initialize(brand_name, founder, product_lines = [])\n    @brand_name = brand_name\n    @founder = founder\n    @product_lines = product_lines\n  end\n\n  def launch_new_product_line(new_product_line)\n    @product_lines << new_product_line\n  end\nend\n```"
  },
  {
    "task": "Create a class for a video game with attributes for title, genre, and rating, and a method to update the rating.",
    "code": "```ruby\nclass VideoGame\n  attr_accessor :title, :genre, :rating\n\n  def initialize(title, genre, rating)\n    @title = title\n    @genre = genre\n    @rating = rating\n  end\n\n  def update_rating(new_rating)\n    @rating = new_rating\n  end\nend\n```"
  },
  {
    "task": "Build a class for a scientific experiment with attributes for experiment name, hypothesis, and results, and a method to record results.",
    "code": "```ruby\nclass ScientificExperiment\n  attr_accessor :experiment_name, :hypothesis, :results\n\n  def initialize(experiment_name, hypothesis)\n    @experiment_name = experiment_name\n    @hypothesis = hypothesis\n    @results = []\n  end\n\n  def record_results(new_result)\n    @results << new_result\n  end\nend\n```"
  },
  {
    "task": "Design a class for a gourmet dish with properties for dish name, ingredients, and cooking time, and a method to change cooking time.",
    "code": "```ruby\nclass GourmetDish\n  attr_accessor :dish_name, :ingredients, :cooking_time\n\n  def initialize(dish_name, ingredients, cooking_time)\n    @dish_name = dish_name\n    @ingredients = ingredients\n    @cooking_time = cooking_time\n  end\n\n  def change_cooking_time(new_time)\n    @cooking_time = new_time\n  end\nend\n```"
  },
  {
    "task": "Implement a class for a political office with attributes for office title, holder, and term length, and a method to change the holder.",
    "code": "```ruby\nclass PoliticalOffice\n  attr_accessor :office_title, :holder, :term_length\n\n  def initialize(office_title, holder, term_length)\n    @office_title = office_title\n    @holder = holder\n    @term_length = term_length\n  end\n\n  def change_holder(new_holder)\n    @holder = new_holder\n  end\nend\n```"
  },
  {
    "task": "Develop a class for an astronomical object with properties for name, type, and distance from Earth, and a method to update the distance.",
    "code": "```ruby\nclass AstronomicalObject\n  attr_accessor :name, :type, :distance_from_earth\n\n  def initialize(name, type, distance_from_earth)\n    @name = name\n    @type = type\n    @distance_from_earth = distance_from_earth\n  end\n\n  def update_distance(new_distance)\n    @distance_from_earth = new_distance\n  end\nend\n```"
  },
  {
    "task": "Formulate a class for a public transportation route with attributes for route number, stops, and schedule, and a method to add a stop.",
    "code": "```ruby\nclass PublicTransportationRoute\n  attr_accessor :route_number, :stops, :schedule\n  \n  def initialize(route_number, stops, schedule)\n    @route_number = route_number\n    @stops = stops\n    @schedule = schedule\n  end\n  \n  def add_stop(stop)\n    @stops << stop\n  end\nend\n```"
  },
  {
    "task": "Construct a class for a board game with properties for game name, player count, and rules, and a method to change the rules.",
    "code": "```ruby\nclass BoardGame\n  attr_accessor :game_name, :player_count, :rules\n\n  def initialize(game_name, player_count, rules)\n    @game_name = game_name\n    @player_count = player_count\n    @rules = rules\n  end\n\n  def change_rules(new_rules)\n    @rules = new_rules\n  end\nend\n```"
  },
  {
    "task": "Create a class for a customer loyalty program with attributes for program name, points, and rewards, and a method to redeem points.",
    "code": "```ruby\nclass LoyaltyProgram\n  attr_accessor :program_name, :points, :rewards\n\n  def initialize(program_name, points, rewards)\n    @program_name = program_name\n    @points = points\n    @rewards = rewards\n  end\n\n  def redeem_points(points_to_redeem)\n    if points_to_redeem <= @points\n      @points -= points_to_redeem\n      \"Redeemed #{points_to_redeem} points.\"\n    else\n      \"Insufficient points.\"\n    end\n  end\nend\n```"
  },
  {
    "task": "Design a class for an art gallery with properties for gallery name, location, and exhibitions, and a method to add a new exhibition.",
    "code": "```ruby\nclass ArtGallery\n  attr_accessor :gallery_name, :location, :exhibitions\n\n  def initialize(gallery_name, location)\n    @gallery_name = gallery_name\n    @location = location\n    @exhibitions = []\n  end\n\n  def add_exhibition(exhibition)\n    @exhibitions << exhibition\n  end\nend\n```"
  },
  {
    "task": "Build a class for a personal blog with attributes for blog name, posts, and a method to add a new post.",
    "code": "```ruby\nclass PersonalBlog\n  attr_accessor :blog_name, :posts\n\n  def initialize(blog_name)\n    @blog_name = blog_name\n    @posts = []\n  end\n\n  def add_post(post)\n    @posts << post\n  end\nend\n```"
  },
  {
    "task": "Implement a class for a mobile application with properties for app name, version, and developer, and a method to update the version.",
    "code": "```ruby\nclass MobileApp\n  attr_accessor :app_name, :version, :developer\n\n  def initialize(app_name, version, developer)\n    @app_name = app_name\n    @version = version\n    @developer = developer\n  end\n\n  def update_version(new_version)\n    @version = new_version\n  end\nend\n```"
  },
  {
    "task": "Develop a class for a language translator with attributes for source language, target language, and translation method, and a method to translate a text.",
    "code": "```ruby\nclass LanguageTranslator\n  attr_accessor :source_language, :target_language, :translation_method\n\n  def initialize(source_language, target_language, translation_method)\n    @source_language = source_language\n    @target_language = target_language\n    @translation_method = translation_method\n  end\n\n  def translate(text)\n    # Implement translation logic here\n    \"Translated text\"\n  end\nend\n```"
  },
  {
    "task": "Formulate a class for a culinary school with properties for school name, courses offered, and a method to add a new course.",
    "code": "```ruby\nclass CulinarySchool\n  attr_accessor :school_name, :courses_offered\n\n  def initialize(school_name, courses_offered = [])\n    @school_name = school_name\n    @courses_offered = courses_offered\n  end\n\n  def add_course(course_name)\n    @courses_offered << course_name\n  end\nend\n```"
  },
  {
    "task": "Construct a class for a musical band with attributes for band name, members, and genre, and a method to add a new member.",
    "code": "```ruby\nclass MusicalBand\n  attr_accessor :band_name, :members, :genre\n\n  def initialize(band_name, members, genre)\n    @band_name = band_name\n    @members = members\n    @genre = genre\n  end\n\n  def add_member(new_member)\n    @members << new_member\n  end\nend\n```"
  },
  {
    "task": "Create a class for a television series with properties for series title, episodes, and network, and a method to add a new episode.",
    "code": "```ruby\nclass TelevisionSeries\n  attr_accessor :series_title, :episodes, :network\n\n  def initialize(series_title, network)\n    @series_title = series_title\n    @episodes = []\n    @network = network\n  end\n\n  def add_episode(episode)\n    @episodes << episode\n  end\nend\n```"
  },
  {
    "task": "Design a class for a wildlife reserve with attributes for reserve name, species protected, and area size, and a method to expand the area.",
    "code": "```ruby\nclass WildlifeReserve\n  attr_accessor :reserve_name, :species_protected, :area_size\n\n  def initialize(reserve_name, species_protected, area_size)\n    @reserve_name = reserve_name\n    @species_protected = species_protected\n    @area_size = area_size\n  end\n\n  def expand_area(additional_area)\n    @area_size += additional_area\n  end\nend\n```"
  },
  {
    "task": "Build a class for a luxury car with properties for brand, model, and price, and a method to update the price.",
    "code": "```ruby\nclass LuxuryCar\n  attr_accessor :brand, :model, :price\n\n  def initialize(brand, model, price)\n    @brand = brand\n    @model = model\n    @price = price\n  end\n\n  def update_price(new_price)\n    @price = new_price\n  end\nend\n```"
  },
  {
    "task": "Implement a class for a scientific journal with attributes for journal name, articles, and impact factor, and a method to add a new article.",
    "code": "```ruby\nclass ScientificJournal\n  attr_accessor :journal_name, :articles, :impact_factor\n\n  def initialize(journal_name, impact_factor)\n    @journal_name = journal_name\n    @articles = []\n    @impact_factor = impact_factor\n  end\n\n  def add_article(article)\n    @articles << article\n  end\nend\n```"
  },
  {
    "task": "Develop a class for a historical monument with properties for monument name, location, and year established, and a method to update the location.",
    "code": "```ruby\nclass HistoricalMonument\n  attr_accessor :name, :location, :year_established\n\n  def initialize(name, location, year_established)\n    @name = name\n    @location = location\n    @year_established = year_established\n  end\n\n  def update_location(new_location)\n    @location = new_location\n  end\nend\n```"
  },
  {
    "task": "Formulate a class for an educational course with attributes for course title, instructor, and syllabus, and a method to update the syllabus.",
    "code": "```ruby\nclass Course\n  attr_accessor :title, :instructor, :syllabus\n\n  def initialize(title, instructor, syllabus)\n    @title = title\n    @instructor = instructor\n    @syllabus = syllabus\n  end\n\n  def update_syllabus(new_syllabus)\n    @syllabus = new_syllabus\n  end\nend\n```"
  },
  {
    "task": "Construct a class for a city park with properties for park name, facilities, and opening hours, and a method to add a new facility.",
    "code": "```ruby\nclass CityPark\n  attr_accessor :name, :facilities, :opening_hours\n\n  def initialize(name, facilities, opening_hours)\n    @name = name\n    @facilities = facilities\n    @opening_hours = opening_hours\n  end\n\n  def add_facility(facility)\n    @facilities << facility\n  end\nend\n```"
  },
  {
    "task": "Create a class for a fitness class with attributes for class name, instructor, and schedule, and a method to update the schedule.",
    "code": "```ruby\nclass FitnessClass\n  attr_accessor :class_name, :instructor, :schedule\n\n  def initialize(class_name, instructor, schedule)\n    @class_name = class_name\n    @instructor = instructor\n    @schedule = schedule\n  end\n\n  def update_schedule(new_schedule)\n    @schedule = new_schedule\n  end\nend\n```"
  },
  {
    "task": "Design a class for a virtual reality game with properties for game name, platform, and VR compatibility, and a method to change the platform.",
    "code": "```ruby\nclass VirtualRealityGame\n  attr_accessor :game_name, :platform, :vr_compatible\n\n  def initialize(game_name, platform, vr_compatible)\n    @game_name = game_name\n    @platform = platform\n    @vr_compatible = vr_compatible\n  end\n\n  def change_platform(new_platform)\n    @platform = new_platform\n  end\nend\n```"
  },
  {
    "task": "Build a class for a mountain range with attributes for range name, highest peak, and countries covered, and a method to add a new peak.",
    "code": "```ruby\nclass MountainRange\n  attr_accessor :range_name, :highest_peak, :countries_covered\n\n  def initialize(range_name, highest_peak, countries_covered)\n    @range_name = range_name\n    @highest_peak = highest_peak\n    @countries_covered = countries_covered\n  end\n\n  def add_peak(new_peak)\n    @highest_peak = new_peak if new_peak > @highest_peak\n  end\nend\n```"
  },
  {
    "task": "Implement a class for a documentary film with properties for title, director, and subject, and a method to update the subject.",
    "code": "```ruby\nclass DocumentaryFilm\n  attr_accessor :title, :director, :subject\n\n  def initialize(title, director, subject)\n    @title = title\n    @director = director\n    @subject = subject\n  end\n\n  def update_subject(new_subject)\n    @subject = new_subject\n  end\nend\n```"
  },
  {
    "task": "Develop a class for a classical music composition with attributes for composition name, composer, and duration, and a method to change the duration.",
    "code": "```ruby\nclass ClassicalComposition\n  attr_accessor :name, :composer, :duration\n\n  def initialize(name, composer, duration)\n    @name = name\n    @composer = composer\n    @duration = duration\n  end\n\n  def change_duration(new_duration)\n    @duration = new_duration\n  end\nend\n```"
  },
  {
    "task": "Formulate a class for a public library with properties for library name, books available, and membership, and a method to add a new book.",
    "code": "```ruby\nclass PublicLibrary\n  attr_accessor :library_name, :books_available, :membership\n\n  def initialize(library_name, books_available, membership)\n    @library_name = library_name\n    @books_available = books_available\n    @membership = membership\n  end\n  \n  def add_new_book(book)\n    @books_available << book\n  end\nend\n```"
  },
  {
    "task": "Construct a class for a tech startup with attributes for startup name, founder, and funding, and a method to raise additional funding.",
    "code": "```ruby\nclass TechStartup\n  attr_accessor :name, :founder, :funding\n\n  def initialize(name, founder, funding)\n    @name = name\n    @founder = founder\n    @funding = funding\n  end\n\n  def raise_funding(amount)\n    @funding += amount\n  end\nend\n```"
  }
]