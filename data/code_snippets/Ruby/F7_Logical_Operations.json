[
  {
    "task": "Create a function that takes two boolean inputs and returns true if both are true using logical AND.",
    "code": "```ruby\ndef both_true?(a, b)\n  a && b\nend\n```"
  },
  {
    "task": "Write a script to check if either of two given conditions are met using logical OR.",
    "code": "```ruby\ncondition1 = true\ncondition2 = false\n\nif condition1 || condition2\n  puts \"At least one condition is met.\"\nelse\n  puts \"Neither condition is met.\"\nend\n```"
  },
  {
    "task": "Develop a program that negates a boolean variable using logical NOT.",
    "code": "```ruby\nboolean_variable = true\nnegated_variable = !boolean_variable\n```"
  },
  {
    "task": "Implement a feature that determines if a number is within a specific range using logical operators.",
    "code": "```ruby\ndef within_range?(number, min, max)\n  number >= min && number <= max\nend\n```"
  },
  {
    "task": "Design a system that checks if a user has both read and write permissions using logical AND.",
    "code": "```ruby\ndef has_read_and_write_permissions?(user)\n  user.has_read_permission? && user.has_write_permission?\nend\n```"
  },
  {
    "task": "Write a function to verify if a string is neither empty nor null using logical NOT.",
    "code": "```ruby\ndef valid_string?(str)\n  !(str.nil? || str.empty?)\nend\n```"
  },
  {
    "task": "Create a conditional statement that executes a block of code if either of two expressions are true using logical OR.",
    "code": "```ruby\nexpression1 = true # Example expression\nexpression2 = false # Example expression\n\nif expression1 || expression2\n  puts \"At least one expression is true.\"\nend\n```"
  },
  {
    "task": "Build a program that inverts the truth value of a given condition using logical NOT.",
    "code": "```ruby\ndef invert_truth(value)\n  !value\nend\n\n# Example usage\nputs invert_truth(true)  # Outputs: false\nputs invert_truth(false) # Outputs: true\n```"
  },
  {
    "task": "Compose a function to return true if a list is not empty using logical NOT.",
    "code": "```ruby\ndef list_not_empty?(list)\n  !list.empty?\nend\n```"
  },
  {
    "task": "Develop a filter that selects items from a collection only if they meet multiple criteria using logical AND.",
    "code": "```ruby\ndef filter_items(collection)\n  collection.select do |item|\n    # Replace the conditions below with the actual criteria\n    condition1 = item[:property1] == 'value1'\n    condition2 = item[:property2] > 10\n    condition3 = item[:property3].include?('keyword')\n\n    condition1 && condition2 && condition3\n  end\nend\n```"
  },
  {
    "task": "Write a script that checks if a value is outside a given range using logical OR.",
    "code": "```ruby\ndef value_outside_range?(value, range_start, range_end)\n  value < range_start || value > range_end\nend\n\n# Example usage:\nvalue = 10\nrange_start = 5\nrange_end = 8\n\nputs value_outside_range?(value, range_start, range_end) # Outputs: true\n```"
  },
  {
    "task": "Create a small program to toggle a boolean flag using logical NOT.",
    "code": "```ruby\nflag = false\n\n# Toggle the flag\nflag = !flag\nputs flag\n\n# Toggle the flag again\nflag = !flag\nputs flag\n```"
  },
  {
    "task": "Implement a feature that evaluates if a username is both unique and valid using logical AND.",
    "code": "```ruby\ndef is_username_unique_and_valid?(username, existing_usernames, valid_pattern)\n  is_unique = !existing_usernames.include?(username)\n  is_valid = username.match?(valid_pattern)\n  is_unique && is_valid\nend\n\n# Example usage\nexisting_usernames = [\"user1\", \"user2\", \"user3\"]\nvalid_pattern = /^[a-zA-Z0-9_]+$/\nusername = \"new_user\"\n\nresult = is_username_unique_and_valid?(username, existing_usernames, valid_pattern)\nputs result\n```"
  },
  {
    "task": "Design a conditional to perform an action if neither of two flags are set using logical NOT.",
    "code": "```ruby\nflag1 = false\nflag2 = false\n\nunless flag1 || flag2\n  # Perform the action here\nend\n```"
  },
  {
    "task": "Write a function that returns true if at least one of multiple boolean inputs is true using logical OR.",
    "code": "```ruby\ndef at_least_one_true(*bools)\n  bools.any? { |b| b }\nend\n```"
  },
  {
    "task": "Create a loop that continues executing as long as two conditions are both false using logical NOT and AND.",
    "code": "```ruby\ncondition1 = false\ncondition2 = false\n\nuntil !condition1 && !condition2\n  # Loop body here\n\n  # Update conditions to eventually break the loop\nend\n```"
  },
  {
    "task": "Develop a sequence that checks if a character is either a vowel or a consonant using logical OR.",
    "code": "```ruby\ndef check_character_type(char)\n  vowels = ['a', 'e', 'i', 'o', 'u']\n  char = char.downcase\n\n  if vowels.include?(char)\n    \"vowel\"\n  elsif ('a'..'z').include?(char)\n    \"consonant\"\n  else\n    \"not a letter\"\n  end\nend\n\n# Example usage\nputs check_character_type('a') # Output: vowel\nputs check_character_type('b') # Output: consonant\nputs check_character_type('1') # Output: not a letter\n```"
  },
  {
    "task": "Implement a validation that ensures a password is both of minimum length and contains numbers using logical AND.",
    "code": "```ruby\ndef valid_password?(password)\n  min_length = 8\n  contains_number = password.match?(/\\d/)\n  password.length >= min_length && contains_number\nend\n```"
  },
  {
    "task": "Compose a test to determine if a point is not within a circle using logical NOT.",
    "code": "```ruby\ndef point_not_in_circle?(point_x, point_y, circle_center_x, circle_center_y, radius)\n  distance_squared = (point_x - circle_center_x)**2 + (point_y - circle_center_y)**2\n  !(distance_squared < radius**2)\nend\n```"
  },
  {
    "task": "Write a function to decide if a user is either an admin or an editor using logical OR.",
    "code": "```ruby\ndef is_admin_or_editor(user)\n  user[:role] == 'admin' || user[:role] == 'editor'\nend\n```"
  },
  {
    "task": "Create a conditional statement to trigger an alert if two sensors both detect motion using logical AND.",
    "code": "```ruby\nsensor1_detects_motion = true\nsensor2_detects_motion = true\n\nif sensor1_detects_motion && sensor2_detects_motion\n  puts \"Alert: Both sensors detect motion!\"\nend\n```"
  },
  {
    "task": "Design a program to validate an email format and ensure it contains a domain using logical AND.",
    "code": "```ruby\ndef valid_email?(email)\n  email.include?('@') && email.split('@').last.include?('.')\nend\n\n# Example usage\nputs valid_email?('example@domain.com') # true\nputs valid_email?('example@domain')     # false\nputs valid_email?('exampledomain.com')  # false\n```"
  },
  {
    "task": "Develop a method to confirm that a transaction is neither fraudulent nor unauthorized using logical NOT.",
    "code": "```ruby\ndef transaction_valid?(is_fraudulent, is_unauthorized)\n  !is_fraudulent && !is_unauthorized\nend\n```"
  },
  {
    "task": "Write a function that outputs true if a file is either missing or empty using logical OR.",
    "code": "```ruby\ndef file_missing_or_empty?(file_path)\n  !File.exist?(file_path) || File.size(file_path).zero?\nend\n```"
  },
  {
    "task": "Implement a system to check if a student's grade is neither failing nor incomplete using logical NOT.",
    "code": "```ruby\ndef check_grade(grade)\n  passing_grades = ['A', 'B', 'C', 'D']\n  incomplete_grade = 'I'\n  if !(grade == incomplete_grade || !passing_grades.include?(grade))\n    return \"Grade is passing and complete.\"\n  else\n    return \"Grade is failing or incomplete.\"\n  end\nend\n\n# Example usage\nputs check_grade('A') # Grade is passing and complete.\nputs check_grade('I') # Grade is failing or incomplete.\nputs check_grade('F') # Grade is failing or incomplete.\n```"
  },
  {
    "task": "Create a script that executes a command if a file is both readable and writable using logical AND.",
    "code": "```ruby\nfilename = 'example.txt'\n\nif File.readable?(filename) && File.writable?(filename)\n  # Execute your command here\n  puts \"File is both readable and writable.\"\nend\n```"
  },
  {
    "task": "Compose a function to determine if a temperature is not within a safe operating range using logical NOT.",
    "code": "```ruby\ndef temperature_not_safe?(temperature, min_safe, max_safe)\n  !(temperature >= min_safe && temperature <= max_safe)\nend\n```"
  },
  {
    "task": "Design a check to see if a car is either out of fuel or needs maintenance using logical OR.",
    "code": "```ruby\ndef car_needs_attention?(out_of_fuel, needs_maintenance)\n  out_of_fuel || needs_maintenance\nend\n```"
  },
  {
    "task": "Develop a routine that ensures a network connection is both stable and secure using logical AND.",
    "code": "```ruby\ndef network_connection_stable_and_secure?(connection)\n  connection.stable? && connection.secure?\nend\n```"
  },
  {
    "task": "Write a conditional to print a message if a user is not logged in using logical NOT.",
    "code": "```ruby\nuser_logged_in = false\n\nunless user_logged_in\n  puts \"User is not logged in\"\nend\n```"
  },
  {
    "task": "Create a function that checks if a number is both even and positive using logical AND.",
    "code": "```ruby\ndef is_even_and_positive?(number)\n  number.even? && number > 0\nend\n```"
  },
  {
    "task": "Implement a feature that turns off a device if neither of two switches are on using logical NOT.",
    "code": "```ruby\ndef device_off?(switch1, switch2)\n  !switch1 && !switch2\nend\n\nif device_off?(false, false)\n  puts \"Device is off\"\nelse\n  puts \"Device is on\"\nend\n```"
  },
  {
    "task": "Compose a script to alert if a server is either down or running slow using logical OR.",
    "code": "```ruby\nserver_status = \"down\"  # Possible values: \"down\", \"slow\", \"up\"\n\nif server_status == \"down\" || server_status == \"slow\"\n  puts \"Alert: The server is either down or running slow!\"\nend\n```"
  },
  {
    "task": "Design a validation method to ensure a form field is not empty using logical NOT.",
    "code": "```ruby\ndef validate_presence(field_value)\n  !field_value.nil? && !field_value.empty?\nend\n```"
  },
  {
    "task": "Write a program to determine if two strings are both non-empty using logical AND.",
    "code": "```ruby\ndef both_non_empty?(str1, str2)\n  !str1.empty? && !str2.empty?\nend\n\n# Example usage:\nputs both_non_empty?(\"hello\", \"world\")  # => true\nputs both_non_empty?(\"hello\", \"\")       # => false\nputs both_non_empty?(\"\", \"world\")       # => false\nputs both_non_empty?(\"\", \"\")            # => false\n```"
  },
  {
    "task": "Create a function that checks if a number is either prime or a perfect square using logical OR.",
    "code": "```ruby\ndef is_prime_or_perfect_square(n)\n  return false if n <= 1\n\n  is_prime = (2..Math.sqrt(n)).none? { |i| n % i == 0 }\n  is_perfect_square = Math.sqrt(n) % 1 == 0\n\n  is_prime || is_perfect_square\nend\n```"
  },
  {
    "task": "Develop a script to ensure a user is either an adult or has parental consent using logical OR.",
    "code": "```ruby\ndef can_proceed?(age, has_parental_consent)\n  is_adult = age >= 18\n  is_adult || has_parental_consent\nend\n\n# Example usage\nuser_age = 16\nuser_has_parental_consent = true\n\nif can_proceed?(user_age, user_has_parental_consent)\n  puts \"Access granted.\"\nelse\n  puts \"Access denied.\"\nend\n```"
  },
  {
    "task": "Implement a condition to execute a task if a variable is neither zero nor negative using logical NOT.",
    "code": "```ruby\nvalue = 5\ntask_executed = false\n\nunless !value.positive?\n  # Execute the task\n  task_executed = true\nend\n```"
  },
  {
    "task": "Compose a method to verify if a system is both up-to-date and functioning using logical AND.",
    "code": "```ruby\ndef system_status(up_to_date, functioning)\n  up_to_date && functioning\nend\n```"
  },
  {
    "task": "Write a function that returns true if a list contains neither duplicates nor null values using logical NOT.",
    "code": "```ruby\ndef no_duplicates_or_nulls?(list)\n  !list.compact.uniq!\nend\n```"
  },
  {
    "task": "Create a script to perform an action if a temperature is either too high or too low using logical OR.",
    "code": "```ruby\ntemperature = 75\n\nif temperature > 85 || temperature < 60\n  puts \"Temperature is outside the acceptable range.\"\nelse\n  puts \"Temperature is within the acceptable range.\"\nend\n```"
  },
  {
    "task": "Design a feature to toggle an option if a setting is not enabled using logical NOT.",
    "code": "```ruby\nclass Settings\n  attr_accessor :option_enabled, :setting_enabled\n\n  def initialize(option_enabled = false, setting_enabled = false)\n    @option_enabled = option_enabled\n    @setting_enabled = setting_enabled\n  end\n\n  def toggle_option_if_setting_not_enabled\n    @option_enabled = !@option_enabled unless @setting_enabled\n  end\nend\n```"
  },
  {
    "task": "Develop a check to ensure a username is both available and meets length requirements using logical AND.",
    "code": "```ruby\ndef check_username_availability(username, existing_usernames)\n  is_available = !existing_usernames.include?(username)\n  meets_length_requirements = username.length.between?(5, 15)\n  is_available && meets_length_requirements\nend\n```"
  },
  {
    "task": "Implement a function that returns true if a number is neither too large nor too small using logical NOT.",
    "code": "```ruby\ndef within_range?(number, min, max)\n  !(number < min || number > max)\nend\n```"
  },
  {
    "task": "Write a conditional to print a warning if a disk is either full or nearly full using logical OR.",
    "code": "```ruby\ndisk_full = true\ndisk_nearly_full = false\n\nif disk_full || disk_nearly_full\n  puts \"Warning: Disk is full or nearly full!\"\nend\n```"
  },
  {
    "task": "Create a routine to validate that two dates are both within a valid range using logical AND.",
    "code": "```ruby\ndef dates_within_valid_range?(date1, date2, start_date, end_date)\n  valid_date1 = date1 >= start_date && date1 <= end_date\n  valid_date2 = date2 >= start_date && date2 <= end_date\n  valid_date1 && valid_date2\nend\n```"
  },
  {
    "task": "Compose a function to decide if a person is either a minor or a senior using logical OR.",
    "code": "```ruby\ndef minor_or_senior(age)\n  age < 18 || age >= 65\nend\n```"
  },
  {
    "task": "Design a script to execute a task if a condition is not met using logical NOT.",
    "code": "```ruby\ncondition = false\n\nunless condition\n  puts \"Executing task as condition is not met.\"\nend\n```"
  },
  {
    "task": "Develop a program to verify if a process is neither running nor scheduled using logical NOT.",
    "code": "```ruby\ndef process_status(running, scheduled)\n  if !running && !scheduled\n    \"The process is neither running nor scheduled.\"\n  else\n    \"The process is either running or scheduled.\"\n  end\nend\n\nrunning = false\nscheduled = false\n\nputs process_status(running, scheduled)\n```"
  },
  {
    "task": "Implement a feature that confirms a file is both accessible and not locked using logical AND.",
    "code": "```ruby\ndef file_accessible_and_not_locked?(file_path)\n  File.exist?(file_path) && !File.open(file_path, 'r+') { true } rescue false\nend\n```"
  },
  {
    "task": "Write a script to check if a device is either offline or in maintenance mode using logical OR.",
    "code": "```ruby\ndevice_status = { offline: false, maintenance: true }\n\nif device_status[:offline] || device_status[:maintenance]\n  puts \"Device is either offline or in maintenance mode.\"\nelse\n  puts \"Device is online and operational.\"\nend\n```"
  },
  {
    "task": "Create a function to ensure a password is both complex and unique using logical AND.",
    "code": "```ruby\ndef is_password_valid(password, used_passwords)\n  is_complex = password.length >= 8 && password.match?(/\\d/) && password.match?(/[A-Za-z]/)\n  is_unique = !used_passwords.include?(password)\n  is_complex && is_unique\nend\n```"
  },
  {
    "task": "Design a validation that ensures a value is not negative using logical NOT.",
    "code": "```ruby\ndef validate_not_negative(value)\n  if !(value < 0)\n    true\n  else\n    false\n  end\nend\n```"
  },
  {
    "task": "Develop a check to see if a user has either exceeded their quota or is nearing it using logical OR.",
    "code": "```ruby\ndef quota_check(current_usage, quota_limit, nearing_threshold)\n  exceeded_quota = current_usage > quota_limit\n  nearing_quota = current_usage >= nearing_threshold\n  exceeded_quota || nearing_quota\nend\n```"
  },
  {
    "task": "Implement a routine to confirm that a user is both authenticated and authorized using logical AND.",
    "code": "```ruby\ndef user_authenticated_and_authorized?(user)\n  user.authenticated? && user.authorized?\nend\n```"
  },
  {
    "task": "Compose a function to determine if a light is either on or blinking using logical OR.",
    "code": "```ruby\ndef light_status(is_on, is_blinking)\n  is_on || is_blinking\nend\n```"
  },
  {
    "task": "Write a script that executes a command if a network connection is neither weak nor unstable using logical NOT.",
    "code": "```ruby\nnetwork_status = { weak: false, unstable: false }\n\nunless network_status[:weak] || network_status[:unstable]\n  puts \"Executing command...\"\nend\n```"
  },
  {
    "task": "Create a program to verify that a sensor is both calibrated and active using logical AND.",
    "code": "```ruby\ndef sensor_verified?(calibrated, active)\n  calibrated && active\nend\n\n# Example usage:\ncalibrated = true\nactive = true\nputs sensor_verified?(calibrated, active) # Output: true\n```"
  },
  {
    "task": "Design a feature to alert if a process is either overdue or incomplete using logical OR.",
    "code": "```ruby\ndef alert_process_status(overdue, incomplete)\n  if overdue || incomplete\n    puts \"Alert: The process is either overdue or incomplete.\"\n  else\n    puts \"The process is on track.\"\n  end\nend\n\n# Example usage:\noverdue = true\nincomplete = false\n\nalert_process_status(overdue, incomplete)\n```"
  },
  {
    "task": "Develop a script to check if a person is neither a guest nor a temporary user using logical NOT.",
    "code": "```ruby\ndef check_user_status(is_guest, is_temporary_user)\n  if !is_guest && !is_temporary_user\n    \"The person is neither a guest nor a temporary user.\"\n  else\n    \"The person is either a guest or a temporary user.\"\n  end\nend\n\n# Example usage\nputs check_user_status(false, false) # The person is neither a guest nor a temporary user.\nputs check_user_status(true, false)  # The person is either a guest or a temporary user.\nputs check_user_status(false, true)  # The person is either a guest or a temporary user.\nputs check_user_status(true, true)   # The person is either a guest or a temporary user.\n```"
  },
  {
    "task": "Implement a function to toggle a light if a switch is not pressed using logical NOT.",
    "code": "```ruby\ndef toggle_light_if_switch_not_pressed(switch_pressed)\n  !switch_pressed\nend\n```"
  },
  {
    "task": "Write a conditional to trigger an event if a file is either corrupted or missing using logical OR.",
    "code": "```ruby\nfile_corrupted = true\nfile_missing = false\n\nif file_corrupted || file_missing\n  puts \"Triggering event: File is either corrupted or missing.\"\nend\n```"
  },
  {
    "task": "Create a routine that verifies if a vehicle is both insured and registered using logical AND.",
    "code": "```ruby\ndef vehicle_insured_and_registered?(insured, registered)\n  insured && registered\nend\n```"
  },
  {
    "task": "Compose a method to check if an account is either overdrawn or flagged using logical OR.",
    "code": "```ruby\ndef account_status(overdrawn, flagged)\n  overdrawn || flagged\nend\n```"
  },
  {
    "task": "Design a program to ensure an application is both installed and updated using logical AND.",
    "code": "```ruby\ndef check_application_status(installed, updated)\n  if installed && updated\n    \"Application is installed and updated.\"\n  else\n    \"Application is not properly installed or updated.\"\n  end\nend\n\n# Example usage:\ninstalled = true\nupdated = true\n\nputs check_application_status(installed, updated)\n```"
  },
  {
    "task": "Develop a function that returns true if a number is neither divisible by 3 nor 5 using logical NOT.",
    "code": "```ruby\ndef not_divisible_by_3_or_5?(number)\n  !(number % 3 == 0 || number % 5 == 0)\nend\n```"
  },
  {
    "task": "Implement a script that alerts if a device is either overheating or underperforming using logical OR.",
    "code": "```ruby\ndef check_device_status(temperature, performance)\n  if temperature > 80 || performance < 50\n    puts \"Alert: Device is either overheating or underperforming.\"\n  else\n    puts \"Device is operating normally.\"\n  end\nend\n\n# Example usage\ncheck_device_status(85, 60) # Overheating\ncheck_device_status(75, 45) # Underperforming\ncheck_device_status(70, 55) # Normal\n```"
  },
  {
    "task": "Write a function to validate that a directory is both writable and not full using logical AND.",
    "code": "```ruby\nrequire 'fileutils'\n\ndef directory_valid?(directory)\n  writable = File.writable?(directory)\n  not_full = FileUtils.compare_file('/', directory) == false # This checks if the directory is not the root, which is assumed to be not full.\n  writable && not_full\nend\n```"
  },
  {
    "task": "Create a conditional statement that executes if a button is not clicked using logical NOT.",
    "code": "```ruby\nbutton_clicked = false\n\nunless button_clicked\n  puts \"The button has not been clicked.\"\nend\n```"
  },
  {
    "task": "Design a check to ensure a transaction is both verified and complete using logical AND.",
    "code": "```ruby\ndef transaction_verified_and_complete?(verified, complete)\n  verified && complete\nend\n```"
  },
  {
    "task": "Develop a routine to determine if a string is either uppercase or lowercase using logical OR.",
    "code": "```ruby\ndef check_case(str)\n  str == str.upcase || str == str.downcase\nend\n```"
  },
  {
    "task": "Implement a feature to execute a task if a variable is neither null nor undefined using logical NOT.",
    "code": "```ruby\ndef execute_task_if_not_nil_or_undefined(variable)\n  unless variable.nil? || variable == :undefined\n    # Execute the task here\n    puts \"Task executed\"\n  end\nend\n\n# Example usage\nvariable = \"some value\"\nexecute_task_if_not_nil_or_undefined(variable)\n```"
  },
  {
    "task": "Compose a function to return true if a date is either today or tomorrow using logical OR.",
    "code": "```ruby\ndef is_today_or_tomorrow(date)\n  today = Date.today\n  tomorrow = today + 1\n  date == today || date == tomorrow\nend\n```"
  },
  {
    "task": "Write a script to confirm that a system is both running and not in maintenance mode using logical AND.",
    "code": "```ruby\nsystem_running = true\nmaintenance_mode = false\n\nif system_running && !maintenance_mode\n  puts \"System is running and not in maintenance mode.\"\nelse\n  puts \"System is either not running or in maintenance mode.\"\nend\n```"
  },
  {
    "task": "Create a program to verify if a text field is neither empty nor exceeds character limit using logical NOT.",
    "code": "```ruby\ndef verify_text_field(text, character_limit)\n  if !(text.empty? || text.length > character_limit)\n    puts \"Text is valid.\"\n  else\n    puts \"Text is invalid.\"\n  end\nend\n\n# Example usage\nverify_text_field(\"Hello, World!\", 20)\n```"
  },
  {
    "task": "Design a feature that checks if a user has either admin privileges or editor rights using logical OR.",
    "code": "```ruby\ndef has_access?(user)\n  user.admin? || user.editor?\nend\n```"
  },
  {
    "task": "Develop a script to ensure a file is both present and not empty using logical AND.",
    "code": "```ruby\nfile_path = 'example.txt'\n\nif File.exist?(file_path) && !File.zero?(file_path)\n  puts \"File is present and not empty.\"\nelse\n  puts \"File is either missing or empty.\"\nend\n```"
  },
  {
    "task": "Implement a condition to execute a command if a setting is not active using logical NOT.",
    "code": "```ruby\nsetting_active = false\n\nunless setting_active\n  puts \"Executing command as the setting is not active.\"\nend\n```"
  },
  {
    "task": "Compose a method to decide if a person is either eligible or exempt using logical OR.",
    "code": "```ruby\ndef eligible_or_exempt?(is_eligible, is_exempt)\n  is_eligible || is_exempt\nend\n```"
  },
  {
    "task": "Write a function that returns true if a number is both greater than zero and less than ten using logical AND.",
    "code": "```ruby\ndef number_in_range?(number)\n  number > 0 && number < 10\nend\n```"
  },
  {
    "task": "Create a loop to continue as long as a condition is either true or false using logical OR.",
    "code": "```ruby\ncondition1 = true\ncondition2 = false\n\nwhile condition1 || condition2\n  # Your loop logic here\n  # For demonstration, we can toggle the conditions to eventually break the loop\n  condition1 = !condition1\n  condition2 = !condition2\nend\n```"
  },
  {
    "task": "Design a program to verify if an account is neither inactive nor suspended using logical NOT.",
    "code": "```ruby\ndef account_active?(inactive, suspended)\n  !inactive && !suspended\nend\n\n# Example usage:\ninactive = false\nsuspended = false\nputs account_active?(inactive, suspended) # => true\n```"
  },
  {
    "task": "Develop a feature to confirm that a document is both signed and verified using logical AND.",
    "code": "```ruby\ndef document_signed_and_verified?(signed, verified)\n  signed && verified\nend\n\n# Example usage\nsigned = true\nverified = true\nputs document_signed_and_verified?(signed, verified) # Output: true\n```"
  },
  {
    "task": "Implement a script to alert if a network is either congested or down using logical OR.",
    "code": "```ruby\nnetwork_congested = true\nnetwork_down = false\n\nif network_congested || network_down\n  puts \"Alert: The network is either congested or down.\"\nend\n```"
  },
  {
    "task": "Write a function to ensure a list is both sorted and unique using logical AND.",
    "code": "```ruby\ndef ensure_sorted_and_unique(list)\n  list.sort.uniq\nend\n```"
  },
  {
    "task": "Create a conditional statement to execute if a task is not completed using logical NOT.",
    "code": "```ruby\ntask_completed = false\n\nunless task_completed\n  puts \"The task is not completed.\"\nend\n```"
  },
  {
    "task": "Design a check to determine if a component is either faulty or missing using logical OR.",
    "code": "```ruby\ndef check_component(faulty, missing)\n  faulty || missing\nend\n```"
  },
  {
    "task": "Develop a routine to verify if a user is both online and available using logical AND.",
    "code": "```ruby\ndef user_online_and_available?(user)\n  user.online? && user.available?\nend\n```"
  },
  {
    "task": "Implement a feature to toggle an alert if a condition is not satisfied using logical NOT.",
    "code": "```ruby\ndef toggle_alert(condition)\n  alert = !condition\n  alert\nend\n```"
  },
  {
    "task": "Compose a function to return true if a transaction is either pending or failed using logical OR.",
    "code": "```ruby\ndef transaction_status(pending, failed)\n  pending || failed\nend\n```"
  },
  {
    "task": "Write a script to ensure a configuration is both correct and active using logical AND.",
    "code": "```ruby\nconfiguration_correct = true\nconfiguration_active = true\n\nif configuration_correct && configuration_active\n  puts \"The configuration is correct and active.\"\nelse\n  puts \"The configuration is either incorrect or inactive.\"\nend\n```"
  }
]