[
  {
    "task": "Convert a list of temperatures from Celsius to Fahrenheit using a map function.",
    "code": "```ruby\ncelsius_temperatures = [0, 20, 37, 100]\nfahrenheit_temperatures = celsius_temperatures.map { |c| c * 9.0 / 5 + 32 }\n```"
  },
  {
    "task": "Use map to convert a list of lowercase words to uppercase.",
    "code": "```ruby\nwords = [\"apple\", \"banana\", \"cherry\"]\nuppercase_words = words.map(&:upcase)\n```"
  },
  {
    "task": "Apply map to add a prefix to each string in a list of filenames.",
    "code": "```ruby\nfilenames = [\"document.txt\", \"image.png\", \"presentation.pptx\"]\nprefix = \"new_\"\nmodified_filenames = filenames.map { |filename| prefix + filename }\n```"
  },
  {
    "task": "Transform a list of numbers by squaring each element with a map function.",
    "code": "```ruby\nnumbers = [1, 2, 3, 4, 5]\nsquared_numbers = numbers.map { |num| num ** 2 }\n```"
  },
  {
    "task": "Convert a list of integers to their string representations using map.",
    "code": "```ruby\nnumbers = [1, 2, 3, 4, 5]\nstring_representations = numbers.map(&:to_s)\n```"
  },
  {
    "task": "Use map to compute the length of each string in a list of sentences.",
    "code": "```ruby\nsentences = [\"Hello world\", \"Functional programming\", \"Ruby\"]\nlengths = sentences.map(&:length)\n```"
  },
  {
    "task": "Apply a discount to a list of prices using a map function.",
    "code": "```ruby\nprices = [100, 200, 300, 400, 500]\ndiscount_rate = 0.1\n\ndiscounted_prices = prices.map { |price| price - (price * discount_rate) }\n\nputs discounted_prices\n```"
  },
  {
    "task": "Extract the first element from each tuple in a list of tuples with map.",
    "code": "```ruby\ntuples = [(1, 2), (3, 4), (5, 6)]\nfirst_elements = tuples.map { |tuple| tuple[0] }\n```"
  },
  {
    "task": "Use map to round a list of floating-point numbers to two decimal places.",
    "code": "```ruby\nnumbers = [3.14159, 2.71828, 1.61803, 0.57721]\nrounded_numbers = numbers.map { |num| num.round(2) }\n```"
  },
  {
    "task": "Capitalize the first letter of each word in a list of names using map.",
    "code": "```ruby\nnames = [\"alice\", \"bob\", \"charlie\"]\ncapitalized_names = names.map { |name| name.split.map(&:capitalize).join(' ') }\n```"
  },
  {
    "task": "Convert a list of JSON strings to corresponding dictionary objects with map.",
    "code": "```ruby\nrequire 'json'\n\njson_strings = ['{\"key1\": \"value1\"}', '{\"key2\": \"value2\"}']\n\ndictionary_objects = json_strings.map { |json_str| JSON.parse(json_str) }\n```"
  },
  {
    "task": "Use map to double the value of each number in a list.",
    "code": "```ruby\nnumbers = [1, 2, 3, 4, 5]\ndoubled_numbers = numbers.map { |n| n * 2 }\n```"
  },
  {
    "task": "Transform a list of RGB tuples to hexadecimal color codes using map.",
    "code": "```ruby\nrgb_list = [[255, 0, 0], [0, 255, 0], [0, 0, 255]]\n\nhex_colors = rgb_list.map do |r, g, b|\n  format('#%02X%02X%02X', r, g, b)\nend\n\nputs hex_colors\n```"
  },
  {
    "task": "Use map to compute the factorial of each number in a list.",
    "code": "```ruby\ndef factorial(n)\n  (1..n).inject(1, :*)\nend\n\nnumbers = [1, 2, 3, 4, 5]\nfactorials = numbers.map { |n| factorial(n) }\nputs factorials\n```"
  },
  {
    "task": "Translate a list of English words to Spanish using a map function.",
    "code": "```ruby\nenglish_to_spanish = {\n  'hello' => 'hola',\n  'world' => 'mundo',\n  'cat' => 'gato',\n  'dog' => 'perro',\n  'car' => 'coche'\n}\n\nenglish_words = ['hello', 'world', 'cat', 'dog', 'car']\nspanish_words = english_words.map { |word| english_to_spanish[word] }\n\nputs spanish_words\n```"
  },
  {
    "task": "Apply a map function to format a list of dates from one format to another.",
    "code": "```ruby\nrequire 'date'\n\ndates = ['2023-10-01', '2023-10-02', '2023-10-03']\nformatted_dates = dates.map do |date|\n  Date.parse(date).strftime('%B %d, %Y')\nend\n\nputs formatted_dates\n```"
  },
  {
    "task": "Use map to check if each number in a list is even, returning a list of booleans.",
    "code": "```ruby\nnumbers = [1, 2, 3, 4, 5, 6]\neven_checks = numbers.map { |num| num.even? }\n```"
  },
  {
    "task": "Convert a list of binary strings to decimal numbers using map.",
    "code": "```ruby\nbinary_strings = ['101', '110', '111']\ndecimal_numbers = binary_strings.map { |binary| binary.to_i(2) }\n```"
  },
  {
    "task": "Use map to append a domain name to a list of user names to create email addresses.",
    "code": "```ruby\nusernames = [\"alice\", \"bob\", \"charlie\"]\ndomain = \"@example.com\"\n\nemails = usernames.map { |username| username + domain }\n```"
  },
  {
    "task": "Calculate the area of each circle in a list of radii using a map function.",
    "code": "```ruby\nradii = [1, 2, 3, 4, 5]\nareas = radii.map { |r| Math::PI * r**2 }\n```"
  },
  {
    "task": "Use map to strip whitespace from the start and end of each string in a list.",
    "code": "```ruby\nstrings = [\"  hello  \", \"  world\", \"example  \"]\nstripped_strings = strings.map(&:strip)\n```"
  },
  {
    "task": "Apply map to replace spaces with underscores in a list of file paths.",
    "code": "```ruby\nfile_paths = [\"path/to/file 1.txt\", \"another path/to/file 2.txt\", \"yet another path/file 3.txt\"]\nunderscored_paths = file_paths.map { |path| path.gsub(' ', '_') }\n```"
  },
  {
    "task": "Convert a list of mixed-case strings to title case using map.",
    "code": "```ruby\nstrings = [\"hElLo\", \"wOrLd\", \"RUBY\", \"ProGRamMing\"]\ntitle_cased_strings = strings.map { |s| s.downcase.split.map(&:capitalize).join(' ') }\n```"
  },
  {
    "task": "Use map to filter out only the digits from a list of mixed alphanumeric strings.",
    "code": "```ruby\nmixed_strings = [\"abc123\", \"def456\", \"ghi789\"]\ndigits = mixed_strings.map { |s| s.chars.select { |c| c =~ /\\d/ }.join }\n```"
  },
  {
    "task": "Apply map to convert a list of Unix timestamps to readable date strings.",
    "code": "```ruby\nrequire 'time'\n\ntimestamps = [1609459200, 1612137600, 1614556800]\nreadable_dates = timestamps.map { |ts| Time.at(ts).strftime(\"%Y-%m-%d %H:%M:%S\") }\nputs readable_dates\n```"
  },
  {
    "task": "Transform a list of dictionary objects by extracting a specific key's value using map.",
    "code": "```ruby\nlist_of_dicts = [\n  { 'name' => 'Alice', 'age' => 30 },\n  { 'name' => 'Bob', 'age' => 25 },\n  { 'name' => 'Charlie', 'age' => 35 }\n]\n\nnames = list_of_dicts.map { |dict| dict['name'] }\n```"
  },
  {
    "task": "Use map to compute the cube of each number in a list.",
    "code": "```ruby\nnumbers = [1, 2, 3, 4, 5]\ncubed_numbers = numbers.map { |n| n ** 3 }\n```"
  },
  {
    "task": "Translate a list of URLs to their respective domain names using a map function.",
    "code": "```ruby\nrequire 'uri'\n\nurls = [\n  \"https://www.example.com/path\",\n  \"http://anotherdomain.org\",\n  \"https://sub.domain.co.uk/path?query=string\"\n]\n\ndomains = urls.map do |url|\n  URI.parse(url).host\nend\n\nputs domains\n```"
  },
  {
    "task": "Use map to generate HTML list items from a list of text strings.",
    "code": "```ruby\ntext_strings = [\"First\", \"Second\", \"Third\"]\nhtml_list_items = text_strings.map { |text| \"<li>#{text}</li>\" }\n```"
  },
  {
    "task": "Convert a list of polar coordinates to Cartesian coordinates using map.",
    "code": "```ruby\npolar_coordinates = [[1, Math::PI / 4], [2, Math::PI / 2], [3, Math::PI]]\n\ncartesian_coordinates = polar_coordinates.map do |r, theta|\n  [r * Math.cos(theta), r * Math.sin(theta)]\nend\n\nputs cartesian_coordinates.inspect\n```"
  },
  {
    "task": "Use map to decode a list of Base64 encoded strings.",
    "code": "```ruby\nrequire 'base64'\n\nencoded_strings = ['SGVsbG8gd29ybGQ=', 'U29mdHdhcmUgRW5naW5lZXJpbmc=']\ndecoded_strings = encoded_strings.map { |encoded| Base64.decode64(encoded) }\n\nputs decoded_strings\n```"
  },
  {
    "task": "Convert a list of English sentences to Pig Latin using a map function.",
    "code": "```ruby\ndef pig_latin(sentence)\n  sentence.split.map do |word|\n    if word[0].match(/[aeiouAEIOU]/)\n      word + \"way\"\n    else\n      consonants = word.slice!(/^[^aeiouAEIOU]+/)\n      word + consonants + \"ay\"\n    end\n  end.join(\" \")\nend\n\nsentences = [\"hello world\", \"this is a test\", \"functional programming is fun\"]\npig_latin_sentences = sentences.map { |sentence| pig_latin(sentence) }\n\nputs pig_latin_sentences\n```"
  },
  {
    "task": "Use map to anonymize a list of email addresses by masking them.",
    "code": "```ruby\nemails = [\"user1@example.com\", \"user2@example.com\", \"user3@example.com\"]\n\nanonymized_emails = emails.map do |email|\n  local, domain = email.split('@')\n  masked_local = local[0] + '*' * (local.length - 2) + local[-1]\n  \"#{masked_local}@#{domain}\"\nend\n\nputs anonymized_emails\n```"
  },
  {
    "task": "Apply map to reverse each string in a list of words.",
    "code": "```ruby\nwords = [\"hello\", \"world\", \"ruby\", \"programming\"]\nreversed_words = words.map(&:reverse)\n```"
  },
  {
    "task": "Convert a list of hexadecimal color codes to RGB tuples using map.",
    "code": "```ruby\nhex_colors = ['#FF5733', '#33FF57', '#3357FF']\n\nrgb_colors = hex_colors.map do |hex|\n  hex.scan(/\\w\\w/).map(&:hex)\nend\n\nputs rgb_colors.inspect\n```"
  },
  {
    "task": "Use map to increment each integer in a list by a constant value.",
    "code": "```ruby\nlist = [1, 2, 3, 4, 5]\nconstant_value = 2\nincremented_list = list.map { |num| num + constant_value }\n```"
  },
  {
    "task": "Calculate the square root of each number in a list using a map function.",
    "code": "```ruby\nnumbers = [1, 4, 9, 16, 25]\nsquare_roots = numbers.map { |n| Math.sqrt(n) }\n```"
  },
  {
    "task": "Use map to convert a list of currency amounts from dollars to euros.",
    "code": "```ruby\ndollars = [10, 20, 30, 40, 50]\nexchange_rate = 0.85\n\neuros = dollars.map { |amount| amount * exchange_rate }\n```"
  },
  {
    "task": "Extract the domain from each email address in a list using map.",
    "code": "```ruby\nemails = [\"user1@example.com\", \"user2@test.org\", \"user3@domain.net\"]\ndomains = emails.map { |email| email.split('@').last }\n```"
  },
  {
    "task": "Use map to serialize a list of objects into JSON strings.",
    "code": "```ruby\nrequire 'json'\n\nobjects = [{ name: 'Alice', age: 30 }, { name: 'Bob', age: 25 }]\n\njson_strings = objects.map { |obj| JSON.generate(obj) }\n\nputs json_strings\n```"
  },
  {
    "task": "Transform a list of file sizes from bytes to kilobytes using map.",
    "code": "```ruby\nfile_sizes_bytes = [1024, 2048, 5120, 1048576]\nfile_sizes_kilobytes = file_sizes_bytes.map { |size| size / 1024.0 }\n```"
  },
  {
    "task": "Use map to append a suffix to each string in a list of identifiers.",
    "code": "```ruby\nidentifiers = [\"id1\", \"id2\", \"id3\"]\nsuffix = \"_suffix\"\nnew_identifiers = identifiers.map { |identifier| identifier + suffix }\n```"
  },
  {
    "task": "Apply map to convert measurements from inches to centimeters in a list.",
    "code": "```ruby\nmeasurements_in_inches = [10, 20, 30, 40, 50]\nmeasurements_in_centimeters = measurements_in_inches.map { |inch| inch * 2.54 }\n```"
  },
  {
    "task": "Use map to encrypt a list of plaintext messages using a simple cipher.",
    "code": "```ruby\ndef encrypt(messages, shift)\n  messages.map do |message|\n    message.chars.map do |char|\n      ((char.ord - 'a'.ord + shift) % 26 + 'a'.ord).chr\n    end.join\n  end\nend\n\nplaintext_messages = [\"hello\", \"world\", \"ruby\"]\nshift_value = 3\nencrypted_messages = encrypt(plaintext_messages, shift_value)\nputs encrypted_messages\n```"
  },
  {
    "task": "Transform a list of date strings to day of the week names using a map function.",
    "code": "```ruby\nrequire 'date'\n\ndate_strings = ['2023-10-11', '2023-10-12', '2023-10-13']\nday_of_week_names = date_strings.map { |date_str| Date.parse(date_str).strftime('%A') }\n```"
  },
  {
    "task": "Use map to derive the absolute value of each number in a list.",
    "code": "```ruby\nnumbers = [-3, 7, -1, 5, -9]\nabsolute_values = numbers.map(&:abs)\n```"
  },
  {
    "task": "Convert a list of lowercase hexadecimal strings to uppercase using map.",
    "code": "```ruby\nhex_strings = ['a1b2', 'c3d4', 'e5f6']\nuppercase_hex_strings = hex_strings.map(&:upcase)\n```"
  },
  {
    "task": "Use map to find the maximum value in a list of lists of numbers.",
    "code": "```ruby\nlists = [[3, 5, 8], [2, 9, 4], [7, 1, 6]]\nmax_values = lists.map { |sublist| sublist.max }\n```"
  },
  {
    "task": "Apply map to extract the year from each date in a list of date objects.",
    "code": "```ruby\ndates = [Date.new(2020, 5, 1), Date.new(2021, 6, 15), Date.new(2022, 7, 20)]\nyears = dates.map(&:year)\n```"
  },
  {
    "task": "Use map to prepend a country code to each phone number in a list.",
    "code": "```ruby\nphone_numbers = [\"1234567890\", \"9876543210\", \"5555555555\"]\ncountry_code = \"+1\"\n\nupdated_numbers = phone_numbers.map { |number| \"#{country_code}#{number}\" }\n```"
  },
  {
    "task": "Capitalize the last letter of each word in a list using a map function.",
    "code": "```ruby\nwords = [\"hello\", \"world\", \"from\", \"ruby\"]\ncapitalized_last_letters = words.map { |word| word[0...-1] + word[-1].upcase }\nputs capitalized_last_letters\n```"
  },
  {
    "task": "Use map to transform a list of strings by removing all vowels.",
    "code": "```ruby\nstrings = [\"example\", \"transformation\", \"Ruby\", \"programming\"]\nresult = strings.map { |s| s.gsub(/[aeiouAEIOU]/, '') }\n```"
  },
  {
    "task": "Convert a list of music notes to their corresponding frequencies using map.",
    "code": "```ruby\ndef note_to_frequency(note)\n  frequencies = {\n    'C4' => 261.63, 'D4' => 293.66, 'E4' => 329.63, 'F4' => 349.23,\n    'G4' => 392.00, 'A4' => 440.00, 'B4' => 493.88\n  }\n  frequencies[note]\nend\n\nnotes = ['C4', 'E4', 'G4', 'A4']\nfrequencies = notes.map { |note| note_to_frequency(note) }\n```"
  },
  {
    "task": "Use map to find the reciprocal of each number in a list.",
    "code": "```ruby\nnumbers = [1, 2, 3, 4, 5]\nreciprocals = numbers.map { |n| 1.0 / n }\n```"
  },
  {
    "task": "Transform a list of URLs to their shortened versions using a map function.",
    "code": "```ruby\nrequire 'uri'\nrequire 'net/http'\n\ndef shorten_url(url)\n  uri = URI.parse(\"http://tinyurl.com/api-create.php?url=#{url}\")\n  response = Net::HTTP.get(uri)\n  response\nend\n\nurls = [\n  \"http://example.com/1\",\n  \"http://example.com/2\",\n  \"http://example.com/3\"\n]\n\nshortened_urls = urls.map { |url| shorten_url(url) }\nputs shortened_urls\n```"
  },
  {
    "task": "Use map to generate a list of initials from a list of full names.",
    "code": "```ruby\nnames = [\"John Doe\", \"Jane Smith\", \"Emily Johnson\"]\ninitials = names.map { |name| name.split.map { |part| part[0] }.join }\n```"
  },
  {
    "task": "Convert a list of decimal numbers to their binary string representations using map.",
    "code": "```ruby\ndecimal_numbers = [10, 15, 23, 42]\nbinary_strings = decimal_numbers.map { |num| num.to_s(2) }\n```"
  },
  {
    "task": "Use map to adjust the brightness of each color in a list of RGB tuples.",
    "code": "```ruby\ndef adjust_brightness(colors, factor)\n  colors.map do |(r, g, b)|\n    [\n      [(r * factor).round, 255].min,\n      [(g * factor).round, 255].min,\n      [(b * factor).round, 255].min\n    ]\n  end\nend\n\ncolors = [[100, 150, 200], [50, 75, 100], [25, 30, 35]]\nfactor = 1.2\nadjusted_colors = adjust_brightness(colors, factor)\n```"
  },
  {
    "task": "Apply map to filter out only alphabetic characters from a list of strings.",
    "code": "```ruby\nstrings = [\"abc123\", \"def!@#\", \"456ghi\"]\nfiltered_strings = strings.map { |s| s.gsub(/[^a-zA-Z]/, '') }\n```"
  },
  {
    "task": "Use map to compute the prime factorization of each number in a list.",
    "code": "```ruby\nrequire 'prime'\n\ndef prime_factors(n)\n  factors = []\n  Prime.each(n) do |prime|\n    while n % prime == 0\n      factors << prime\n      n /= prime\n    end\n    break if n == 1\n  end\n  factors\nend\n\nnumbers = [12, 18, 25, 30]\nfactorizations = numbers.map { |num| prime_factors(num) }\nputs factorizations.inspect\n```"
  },
  {
    "task": "Calculate the exponential of each number in a list using a map function.",
    "code": "```ruby\nnumbers = [1, 2, 3, 4, 5]\nexponentials = numbers.map { |n| Math.exp(n) }\n```"
  },
  {
    "task": "Use map to convert a list of text messages to morse code.",
    "code": "```ruby\nmorse_code_map = {\n  'a' => '.-', 'b' => '-...', 'c' => '-.-.', 'd' => '-..', 'e' => '.', 'f' => '..-.',\n  'g' => '--.', 'h' => '....', 'i' => '..', 'j' => '.---', 'k' => '-.-', 'l' => '.-..',\n  'm' => '--', 'n' => '-.', 'o' => '---', 'p' => '.--.', 'q' => '--.-', 'r' => '.-.',\n  's' => '...', 't' => '-', 'u' => '..-', 'v' => '...-', 'w' => '.--', 'x' => '-..-',\n  'y' => '-.--', 'z' => '--..', '1' => '.----', '2' => '..---', '3' => '...--', \n  '4' => '....-', '5' => '.....', '6' => '-....', '7' => '--...', '8' => '---..',\n  '9' => '----.', '0' => '-----', ' ' => '/'\n}\n\ndef text_to_morse(texts, morse_code_map)\n  texts.map do |text|\n    text.downcase.chars.map { |char| morse_code_map[char] }.join(' ')\n  end\nend\n\nmessages = [\"hello world\", \"ruby code\"]\nmorse_messages = text_to_morse(messages, morse_code_map)\nputs morse_messages\n```"
  },
  {
    "task": "Transform a list of JSON objects to XML strings using a map function.",
    "code": "```ruby\nrequire 'json'\nrequire 'builder'\n\njson_objects = [\n  '{\"name\": \"John\", \"age\": 30}',\n  '{\"name\": \"Jane\", \"age\": 25}'\n]\n\nto_xml = lambda do |json_str|\n  hash = JSON.parse(json_str)\n  xml = Builder::XmlMarkup.new\n  xml.object do\n    hash.each { |key, value| xml.tag!(key, value) }\n  end\nend\n\nxml_strings = json_objects.map(&to_xml)\n```"
  },
  {
    "task": "Use map to extract the extension from each filename in a list.",
    "code": "```ruby\nfilenames = ['document.txt', 'report.pdf', 'image.jpeg']\nextensions = filenames.map { |filename| filename.split('.').last }\n```"
  },
  {
    "task": "Convert a list of temperatures from Fahrenheit to Kelvin using map.",
    "code": "```ruby\nfahrenheit_temps = [32, 68, 104, 140, 176]\n\nkelvin_temps = fahrenheit_temps.map { |f| (f - 32) * 5.0/9.0 + 273.15 }\n\nputs kelvin_temps\n```"
  },
  {
    "task": "Use map to calculate the perimeter of each rectangle in a list of dimensions.",
    "code": "```ruby\ndimensions = [[2, 3], [4, 5], [6, 7]]\nperimeters = dimensions.map { |length, width| 2 * (length + width) }\n```"
  },
  {
    "task": "Apply map to format a list of phone numbers into a standard format.",
    "code": "```ruby\nphone_numbers = ['123-456-7890', '9876543210', '555.123.4567']\nformatted_numbers = phone_numbers.map do |number|\n  number.tr('-.', '').gsub(/(\\d{3})(\\d{3})(\\d{4})/, '(\\1) \\2-\\3')\nend\nputs formatted_numbers\n```"
  },
  {
    "task": "Use map to generate a hashed version of passwords from a list.",
    "code": "```ruby\nrequire 'digest'\n\npasswords = ['password1', '123456', 'qwerty']\nhashed_passwords = passwords.map { |password| Digest::SHA256.hexdigest(password) }\nputs hashed_passwords\n```"
  },
  {
    "task": "Convert a list of text paragraphs to a word count using map.",
    "code": "```ruby\nparagraphs = [\n  \"This is the first paragraph.\",\n  \"Here is another one, with more words.\",\n  \"The last paragraph is here.\"\n]\n\nword_counts = paragraphs.map { |paragraph| paragraph.split.size }\n\nputs word_counts\n```"
  },
  {
    "task": "Use map to remove punctuation from each string in a list of sentences.",
    "code": "```ruby\nsentences = [\"Hello, world!\", \"This is a test.\", \"Ruby version: 3.0!\"]\nclean_sentences = sentences.map { |sentence| sentence.gsub(/[[:punct:]]/, '') }\n```"
  },
  {
    "task": "Transform a list of URLs to their base domain using a map function.",
    "code": "```ruby\nrequire 'uri'\n\nurls = ['https://www.example.com/page', 'http://subdomain.example.org', 'https://anotherexample.net/path']\n\nbase_domains = urls.map do |url|\n  URI.parse(url).host\nend\n\nputs base_domains\n```"
  },
  {
    "task": "Use map to translate a list of expressions to their symbolic algebraic forms.",
    "code": "```ruby\nexpressions = [\"3 + 5\", \"2 * 7\", \"8 / 4\", \"9 - 3\"]\n\nsymbolic_forms = expressions.map do |expression|\n  case expression\n  when /(\\d+) \\+ (\\d+)/ then \"#{$1} plus #{$2}\"\n  when /(\\d+) \\* (\\d+)/ then \"#{$1} times #{$2}\"\n  when /(\\d+) \\/ (\\d+)/ then \"#{$1} divided by #{$2}\"\n  when /(\\d+) - (\\d+)/ then \"#{$1} minus #{$2}\"\n  else expression\n  end\nend\n\nputs symbolic_forms\n```"
  },
  {
    "task": "Apply map to convert a list of ASCII codes to corresponding characters.",
    "code": "```ruby\nascii_codes = [65, 66, 67, 68, 69]\ncharacters = ascii_codes.map { |code| code.chr }\n```"
  },
  {
    "task": "Use map to transform a list of text strings to their lemmatized forms.",
    "code": "```ruby\nrequire 'lemmatizer'\n\nlemmatizer = Lemmatizer.new\n\ntexts = [\"running\", \"jumps\", \"easily\"]\nlemmatized_texts = texts.map { |text| lemmatizer.lemma(text) }\n\nputs lemmatized_texts\n```"
  },
  {
    "task": "Convert a list of HTML strings to plain text using map.",
    "code": "```ruby\nrequire 'nokogiri'\n\nhtml_strings = [\n  \"<p>Hello, <strong>world!</strong></p>\",\n  \"<div><span>Ruby</span> is <em>awesome</em>!</div>\"\n]\n\nplain_texts = html_strings.map do |html|\n  Nokogiri::HTML(html).text\nend\n\nputs plain_texts\n```"
  },
  {
    "task": "Use map to create a summary of each article in a list of texts.",
    "code": "```ruby\ntexts = [\n  \"The quick brown fox jumps over the lazy dog.\",\n  \"A journey of a thousand miles begins with a single step.\",\n  \"To be or not to be, that is the question.\"\n]\n\nsummaries = texts.map { |text| text.split[0..4].join(' ') + '...' }\n\nputs summaries\n```"
  },
  {
    "task": "Transform a list of paths to their absolute paths using a map function.",
    "code": "```ruby\nrequire 'pathname'\n\npaths = ['./file1.txt', '../file2.txt', '/absolute/file3.txt']\nabsolute_paths = paths.map { |path| Pathname.new(path).realpath.to_s }\n```"
  },
  {
    "task": "Use map to generate QR codes from a list of URLs.",
    "code": "```ruby\nrequire 'rqrcode'\n\nurls = ['https://example.com', 'https://another-example.com']\nqr_codes = urls.map do |url|\n  RQRCode::QRCode.new(url)\nend\n```"
  },
  {
    "task": "Convert a list of angles from degrees to radians using map.",
    "code": "```ruby\ndegrees = [0, 30, 45, 60, 90, 180, 270, 360]\nradians = degrees.map { |degree| degree * Math::PI / 180 }\n```"
  },
  {
    "task": "Use map to anonymize a list of IP addresses by masking parts of them.",
    "code": "```ruby\nip_addresses = [\"192.168.1.1\", \"10.0.0.1\", \"172.16.0.1\"]\n\nanonymized_ips = ip_addresses.map do |ip|\n  parts = ip.split('.')\n  parts[0..2] = ['xxx', 'xxx', 'xxx']\n  parts.join('.')\nend\n\nputs anonymized_ips\n```"
  },
  {
    "task": "Transform a list of tuples by swapping their elements using a map function.",
    "code": "```ruby\ntuples = [[1, 2], [3, 4], [5, 6]]\nswapped_tuples = tuples.map { |a, b| [b, a] }\n```"
  },
  {
    "task": "Use map to compute the greatest common divisor of pairs in a list of number pairs.",
    "code": "```ruby\ndef gcd(a, b)\n  while b != 0\n    a, b = b, a % b\n  end\n  a\nend\n\nnumber_pairs = [[48, 18], [56, 98], [101, 103], [45, 60]]\n\ngcd_results = number_pairs.map { |a, b| gcd(a, b) }\n```"
  },
  {
    "task": "Convert a list of file paths to their directory names using map.",
    "code": "```ruby\nfile_paths = ['/home/user/file1.txt', '/var/log/system.log', '/etc/config/settings.conf']\ndirectory_names = file_paths.map { |path| File.dirname(path) }\n```"
  },
  {
    "task": "Use map to replace each vowel in a list of strings with a specific character.",
    "code": "```ruby\ndef replace_vowels(strings, replacement_char)\n  vowels = 'aeiouAEIOU'\n  strings.map do |string|\n    string.chars.map { |char| vowels.include?(char) ? replacement_char : char }.join\n  end\nend\n\n# Example usage:\nstrings = [\"hello\", \"world\", \"example\"]\nreplacement_char = \"*\"\nreplaced_strings = replace_vowels(strings, replacement_char)\nputs replaced_strings\n```"
  },
  {
    "task": "Transform a list of integers to their hexadecimal representations using map.",
    "code": "```ruby\nintegers = [10, 15, 255, 1024]\nhex_values = integers.map { |num| num.to_s(16) }\n```"
  },
  {
    "task": "Use map to apply a transformation matrix to a list of 2D vectors.",
    "code": "```ruby\ntransformation_matrix = [[2, 0], [0, 2]]\nvectors = [[1, 2], [3, 4], [5, 6]]\n\ntransformed_vectors = vectors.map do |vector|\n  [\n    vector[0] * transformation_matrix[0][0] + vector[1] * transformation_matrix[0][1],\n    vector[0] * transformation_matrix[1][0] + vector[1] * transformation_matrix[1][1]\n  ]\nend\n\nputs transformed_vectors.inspect\n```"
  },
  {
    "task": "Convert a list of text strings to their phonetic alphabet equivalents using map.",
    "code": "```ruby\ndef phonetic_map(strings)\n  phonetic_alphabet = {\n    'A' => 'Alpha', 'B' => 'Bravo', 'C' => 'Charlie', 'D' => 'Delta', 'E' => 'Echo',\n    'F' => 'Foxtrot', 'G' => 'Golf', 'H' => 'Hotel', 'I' => 'India', 'J' => 'Juliett',\n    'K' => 'Kilo', 'L' => 'Lima', 'M' => 'Mike', 'N' => 'November', 'O' => 'Oscar',\n    'P' => 'Papa', 'Q' => 'Quebec', 'R' => 'Romeo', 'S' => 'Sierra', 'T' => 'Tango',\n    'U' => 'Uniform', 'V' => 'Victor', 'W' => 'Whiskey', 'X' => 'X-ray', 'Y' => 'Yankee', 'Z' => 'Zulu'\n  }\n\n  strings.map do |string|\n    string.upcase.chars.map { |char| phonetic_alphabet[char] }.join(' ')\n  end\nend\n```"
  },
  {
    "task": "Use map to determine if each word in a list is a palindrome, returning booleans.",
    "code": "```ruby\nwords = [\"level\", \"world\", \"radar\", \"hello\", \"racecar\"]\npalindrome_check = words.map { |word| word == word.reverse }\n```"
  },
  {
    "task": "Transform a list of dictionaries by renaming a specified key using a map function.",
    "code": "```ruby\ndef rename_key(dicts, old_key, new_key)\n  dicts.map do |dict|\n    dict.transform_keys { |key| key == old_key ? new_key : key }\n  end\nend\n\n# Example usage:\ndicts = [{ 'name' => 'Alice', 'age' => 30 }, { 'name' => 'Bob', 'age' => 25 }]\nnew_dicts = rename_key(dicts, 'name', 'first_name')\n```"
  },
  {
    "task": "Use map to compute the logarithm of each number in a list.",
    "code": "```ruby\nrequire 'mathn'\n\nnumbers = [1, 10, 100, 1000]\nlogarithms = numbers.map { |num| Math.log(num) }\n```"
  },
  {
    "task": "Convert a list of image file paths to grayscale versions using map.",
    "code": "```ruby\nrequire 'rmagick'\n\ndef convert_to_grayscale(image_paths)\n  image_paths.map do |path|\n    image = Magick::Image.read(path).first\n    grayscale_image = image.quantize(256, Magick::GRAYColorspace)\n    grayscale_image_path = path.sub(/(\\.\\w+)$/, '_grayscale\\1')\n    grayscale_image.write(grayscale_image_path)\n    grayscale_image_path\n  end\nend\n```"
  },
  {
    "task": "Use map to flatten a list of lists of strings into a single list of strings.",
    "code": "```ruby\nlists_of_strings = [[\"hello\", \"world\"], [\"foo\", \"bar\"], [\"ruby\", \"code\"]]\nflattened_list = lists_of_strings.map(&:itself).flatten\n```"
  },
  {
    "task": "Transform a list of temperature readings to temperature anomalies using a map function.",
    "code": "```ruby\ntemperatures = [15, 20, 25, 30, 35]\naverage_temperature = temperatures.sum.to_f / temperatures.size\n\ntemperature_anomalies = temperatures.map do |temp|\n  temp - average_temperature\nend\n```"
  }
]