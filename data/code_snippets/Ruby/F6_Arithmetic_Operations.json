[
  {
    "task": "Write a function that takes two numbers and returns their sum.",
    "code": "```ruby\ndef sum(a, b)\n  a + b\nend\n```"
  },
  {
    "task": "Create a program that calculates the difference between two given integers.",
    "code": "```ruby\ndef calculate_difference(a, b)\n  a - b\nend\n\n# Example usage:\nnum1 = 10\nnum2 = 5\ndifference = calculate_difference(num1, num2)\nputs \"The difference is #{difference}\"\n```"
  },
  {
    "task": "Design a function to multiply two floating-point numbers and return the result.",
    "code": "```ruby\ndef multiply_floats(a, b)\n  a * b\nend\n```"
  },
  {
    "task": "Implement a function that divides two numbers and handles division by zero exceptions.",
    "code": "```ruby\ndef divide_numbers(a, b)\n  begin\n    result = a / b\n  rescue ZeroDivisionError\n    return \"Division by zero error\"\n  else\n    return result\n  end\nend\n```"
  },
  {
    "task": "Build a calculator that can perform addition, subtraction, multiplication, and division on user-provided inputs.",
    "code": "```ruby\ndef calculator\n  puts \"Enter the first number:\"\n  num1 = gets.to_f\n  puts \"Enter the second number:\"\n  num2 = gets.to_f\n  puts \"Choose an operation: +, -, *, /\"\n  operation = gets.chomp\n\n  result = case operation\n  when \"+\"\n    num1 + num2\n  when \"-\"\n    num1 - num2\n  when \"*\"\n    num1 * num2\n  when \"/\"\n    num2 != 0 ? num1 / num2 : \"Error: Division by zero\"\n  else\n    \"Invalid operation\"\n  end\n\n  puts \"Result: #{result}\"\nend\n\ncalculator\n```"
  },
  {
    "task": "Write a script to compute the average of a list of numbers using arithmetic operations.",
    "code": "```ruby\ndef compute_average(numbers)\n  return 0 if numbers.empty?\n  sum = numbers.reduce(0) { |acc, num| acc + num }\n  sum.to_f / numbers.size\nend\n\nnumbers = [10, 20, 30, 40, 50]\naverage = compute_average(numbers)\nputs \"The average is #{average}\"\n```"
  },
  {
    "task": "Create a function that returns the remainder of the division of two integers.",
    "code": "```ruby\ndef remainder(a, b)\n  a % b\nend\n```"
  },
  {
    "task": "Develop a function that can add a variable number of arguments and return the total.",
    "code": "```ruby\ndef add(*numbers)\n  numbers.reduce(0, :+)\nend\n```"
  },
  {
    "task": "Write a program that subtracts a series of numbers from an initial value.",
    "code": "```ruby\ndef subtract_series(initial_value, numbers)\n  result = initial_value\n  numbers.each do |number|\n    result -= number\n  end\n  result\nend\n\ninitial_value = 100\nnumbers = [10, 20, 5, 15]\nputs subtract_series(initial_value, numbers)\n```"
  },
  {
    "task": "Implement a function that multiplies all elements in an array and returns the product.",
    "code": "```ruby\ndef multiply_elements(array)\n  array.reduce(1) { |product, num| product * num }\nend\n```"
  },
  {
    "task": "Design a program that divides a number by another and rounds the result to two decimal places.",
    "code": "```ruby\ndef divide_and_round(num, divisor)\n  result = num.to_f / divisor\n  result.round(2)\nend\n\nputs divide_and_round(10, 3)\n```"
  },
  {
    "task": "Create a function that performs arithmetic operations on complex numbers.",
    "code": "```ruby\nclass ComplexNumber\n  attr_accessor :real, :imaginary\n\n  def initialize(real, imaginary)\n    @real = real\n    @imaginary = imaginary\n  end\n\n  def +(other)\n    ComplexNumber.new(@real + other.real, @imaginary + other.imaginary)\n  end\n\n  def -(other)\n    ComplexNumber.new(@real - other.real, @imaginary - other.imaginary)\n  end\n\n  def *(other)\n    real = @real * other.real - @imaginary * other.imaginary\n    imaginary = @real * other.imaginary + @imaginary * other.real\n    ComplexNumber.new(real, imaginary)\n  end\n\n  def /(other)\n    denom = other.real**2 + other.imaginary**2\n    real = (@real * other.real + @imaginary * other.imaginary) / denom\n    imaginary = (@imaginary * other.real - @real * other.imaginary) / denom\n    ComplexNumber.new(real, imaginary)\n  end\nend\n```"
  },
  {
    "task": "Write a function to calculate the area of a rectangle given its length and width using multiplication.",
    "code": "```ruby\ndef rectangle_area(length, width)\n  length * width\nend\n```"
  },
  {
    "task": "Build a program that converts a price in dollars to another currency using multiplication with exchange rates.",
    "code": "```ruby\ndef convert_currency(dollars, exchange_rate)\n  dollars * exchange_rate\nend\n\ndollars = 100\nexchange_rate = 0.85 # Example exchange rate for USD to another currency\n\nconverted_price = convert_currency(dollars, exchange_rate)\nputs \"Converted price: #{converted_price}\"\n```"
  },
  {
    "task": "Implement a function that checks if a number is divisible by another and returns a boolean.",
    "code": "```ruby\ndef divisible?(numerator, denominator)\n  numerator % denominator == 0\nend\n```"
  },
  {
    "task": "Write a script to sum the digits of an integer using arithmetic operations.",
    "code": "```ruby\ndef sum_of_digits(number)\n  sum = 0\n  while number != 0\n    sum += number % 10\n    number /= 10\n  end\n  sum\nend\n\nputs sum_of_digits(12345)\n```"
  },
  {
    "task": "Develop a function that applies a discount percentage to a price using subtraction and multiplication.",
    "code": "```ruby\ndef apply_discount(price, discount_percentage)\n  discount_amount = price * (discount_percentage / 100.0)\n  discounted_price = price - discount_amount\n  discounted_price\nend\n```"
  },
  {
    "task": "Create a program to calculate the yearly salary given an hourly wage and hours worked per week.",
    "code": "```ruby\ndef calculate_yearly_salary(hourly_wage, hours_per_week)\n  weeks_per_year = 52\n  yearly_salary = hourly_wage * hours_per_week * weeks_per_year\n  yearly_salary\nend\n\nhourly_wage = 20.0  # Example hourly wage\nhours_per_week = 40 # Example hours worked per week\nyearly_salary = calculate_yearly_salary(hourly_wage, hours_per_week)\nputs \"Yearly Salary: $#{yearly_salary}\"\n```"
  },
  {
    "task": "Design a function that calculates the compound interest over a given period using arithmetic operations.",
    "code": "```ruby\ndef calculate_compound_interest(principal, rate, times_compounded, years)\n  principal * (1 + rate / times_compounded) ** (times_compounded * years)\nend\n```"
  },
  {
    "task": "Write a program that scales a 2D point by a given factor using multiplication.",
    "code": "```ruby\ndef scale_point(point, factor)\n  x, y = point\n  scaled_x = x * factor\n  scaled_y = y * factor\n  [scaled_x, scaled_y]\nend\n\npoint = [3, 4]\nfactor = 2\nscaled_point = scale_point(point, factor)\nputs \"Scaled point: #{scaled_point}\"\n```"
  },
  {
    "task": "Implement a function that calculates the perimeter of a triangle given its side lengths.",
    "code": "```ruby\ndef triangle_perimeter(side1, side2, side3)\n  side1 + side2 + side3\nend\n```"
  },
  {
    "task": "Create a function to determine if three sides can form a right triangle using the Pythagorean theorem.",
    "code": "```ruby\ndef is_right_triangle(a, b, c)\n  sides = [a, b, c].sort\n  sides[0]**2 + sides[1]**2 == sides[2]**2\nend\n```"
  },
  {
    "task": "Write a script that calculates the total cost of items in a shopping cart using addition.",
    "code": "```ruby\nshopping_cart = [9.99, 5.49, 12.99, 3.50]\ntotal_cost = shopping_cart.reduce(0) { |sum, price| sum + price }\nputs \"Total cost: $#{total_cost}\"\n```"
  },
  {
    "task": "Develop a function that returns the quotient and remainder of a division operation.",
    "code": "```ruby\ndef quotient_and_remainder(dividend, divisor)\n  quotient = dividend / divisor\n  remainder = dividend % divisor\n  return quotient, remainder\nend\n```"
  },
  {
    "task": "Build a program that simulates a basic checkout system using arithmetic operations for totals and discounts.",
    "code": "```ruby\nclass CheckoutSystem\n  def initialize\n    @total = 0.0\n    @discount = 0.0\n  end\n\n  def add_item(price)\n    @total += price\n  end\n\n  def apply_discount(percentage)\n    @discount = @total * (percentage / 100.0)\n  end\n\n  def total_amount\n    @total - @discount\n  end\nend\n\ncheckout = CheckoutSystem.new\ncheckout.add_item(50.0)\ncheckout.add_item(25.0)\ncheckout.apply_discount(10) # 10% discount\nputs \"Total amount: $#{checkout.total_amount}\"\n```"
  },
  {
    "task": "Implement a function to calculate the distance between two points on a plane using subtraction and square roots.",
    "code": "```ruby\ndef distance_between_points(x1, y1, x2, y2)\n  Math.sqrt((x2 - x1)**2 + (y2 - y1)**2)\nend\n```"
  },
  {
    "task": "Write a function that calculates the speed of a vehicle given distance and time using division.",
    "code": "```ruby\ndef calculate_speed(distance, time)\n  distance / time\nend\n```"
  },
  {
    "task": "Create a program to compute the total minutes in a given number of hours using multiplication.",
    "code": "```ruby\ndef total_minutes(hours)\n  hours * 60\nend\n```"
  },
  {
    "task": "Design a function that determines the number of dozens of eggs from a given total number of eggs.",
    "code": "```ruby\ndef dozens_of_eggs(total_eggs)\n  total_eggs / 12\nend\n```"
  },
  {
    "task": "Write a script to find the greatest common divisor of two numbers using arithmetic operations.",
    "code": "```ruby\ndef gcd(a, b)\n  while b != 0\n    a, b = b, a % b\n  end\n  a\nend\n\nputs gcd(48, 18)\n```"
  },
  {
    "task": "Develop a program that calculates the total weight of multiple items using addition.",
    "code": "```ruby\ndef total_weight(weights)\n  weights.sum\nend\n\nitems_weights = [2.5, 3.8, 1.4, 4.2]\nputs \"Total weight: #{total_weight(items_weights)}\"\n```"
  },
  {
    "task": "Implement a function to convert a temperature from Celsius to Fahrenheit using multiplication and addition.",
    "code": "```ruby\ndef celsius_to_fahrenheit(celsius)\n  (celsius * 9.0 / 5.0) + 32\nend\n```"
  },
  {
    "task": "Create a program that determines the age difference between two people given their birth years.",
    "code": "```ruby\ndef age_difference(year1, year2)\n  (year1 - year2).abs\nend\n\nbirth_year_person1 = 1990\nbirth_year_person2 = 1985\n\ndifference = age_difference(birth_year_person1, birth_year_person2)\nputs \"The age difference is #{difference} years.\"\n```"
  },
  {
    "task": "Write a function to calculate the final price after applying tax and discount using addition and subtraction.",
    "code": "```ruby\ndef calculate_final_price(initial_price, tax_rate, discount_amount)\n  price_with_tax = initial_price + (initial_price * tax_rate)\n  final_price = price_with_tax - discount_amount\n  final_price\nend\n```"
  },
  {
    "task": "Design a program to compute the net profit given total revenue and expenses.",
    "code": "```ruby\ndef net_profit(total_revenue, expenses)\n  total_revenue - expenses\nend\n\n# Example usage:\ntotal_revenue = 100000\nexpenses = 75000\nputs \"Net Profit: #{net_profit(total_revenue, expenses)}\"\n```"
  },
  {
    "task": "Develop a function to calculate the BMI given weight and height using division and multiplication.",
    "code": "```ruby\ndef calculate_bmi(weight_kg, height_m)\n  weight_kg / (height_m * height_m)\nend\n```"
  },
  {
    "task": "Create a function that calculates the midpoint between two numbers using addition and division.",
    "code": "```ruby\ndef calculate_midpoint(a, b)\n  (a + b) / 2.0\nend\n```"
  },
  {
    "task": "Write a program that outputs the result of dividing a number by another with remainder.",
    "code": "```ruby\ndef divide_with_remainder(dividend, divisor)\n  quotient = dividend / divisor\n  remainder = dividend % divisor\n  [quotient, remainder]\nend\n\ndividend = 10\ndivisor = 3\nresult = divide_with_remainder(dividend, divisor)\nputs \"Quotient: #{result[0]}, Remainder: #{result[1]}\"\n```"
  },
  {
    "task": "Implement a function to calculate the factorial of a number using multiplication.",
    "code": "```ruby\ndef factorial(n)\n  (1..n).inject(1, :*)\nend\n```"
  },
  {
    "task": "Build a script to find the average of three numbers using addition and division.",
    "code": "```ruby\ndef average_of_three(a, b, c)\n  (a + b + c) / 3.0\nend\n\nputs average_of_three(10, 20, 30)\n```"
  },
  {
    "task": "Create a program that simulates a simple bank account using arithmetic operations for deposits and withdrawals.",
    "code": "```ruby\nclass BankAccount\n  attr_reader :balance\n\n  def initialize\n    @balance = 0.0\n  end\n\n  def deposit(amount)\n    @balance += amount\n  end\n\n  def withdraw(amount)\n    @balance -= amount if amount <= @balance\n  end\nend\n\naccount = BankAccount.new\naccount.deposit(100.0)\naccount.withdraw(30.0)\nputs \"Current balance: #{account.balance}\"\n```"
  },
  {
    "task": "Write a function that computes the cost per item given a total cost and quantity using division.",
    "code": "```ruby\ndef cost_per_item(total_cost, quantity)\n  total_cost / quantity.to_f\nend\n```"
  },
  {
    "task": "Design a program that calculates the time required to travel a distance at a given speed.",
    "code": "```ruby\ndef travel_time(distance, speed)\n  time = distance.to_f / speed.to_f\n  time\nend\n\nputs \"Enter the distance (in kilometers):\"\ndistance = gets.chomp.to_f\nputs \"Enter the speed (in kilometers per hour):\"\nspeed = gets.chomp.to_f\n\ntime = travel_time(distance, speed)\nputs \"Time required to travel #{distance} km at #{speed} km/h is #{time} hours.\"\n```"
  },
  {
    "task": "Develop a function that returns the absolute difference between two numbers.",
    "code": "```ruby\ndef absolute_difference(num1, num2)\n  (num1 - num2).abs\nend\n```"
  },
  {
    "task": "Implement a program to compute the geometric mean of a set of numbers using multiplication and roots.",
    "code": "```ruby\ndef geometric_mean(numbers)\n  product = numbers.inject(1.0) { |acc, num| acc * num }\n  product ** (1.0 / numbers.size)\nend\n\n# Example usage:\nnumbers = [2, 8, 18]\nputs geometric_mean(numbers)\n```"
  },
  {
    "task": "Write a function to calculate the total interest paid on a loan using arithmetic operations.",
    "code": "```ruby\ndef total_interest_paid(principal, annual_rate, years)\n  total_payment = principal * (1 + annual_rate * years)\n  total_interest = total_payment - principal\n  total_interest\nend\n```"
  },
  {
    "task": "Create a program that calculates the sum of even numbers within a specified range.",
    "code": "```ruby\ndef sum_of_even_numbers(start_range, end_range)\n  (start_range..end_range).select(&:even?).reduce(0, :+)\nend\n\n# Example usage:\nputs sum_of_even_numbers(1, 10)\n```"
  },
  {
    "task": "Design a script to determine the final balance in a savings account after regular deposits and withdrawals.",
    "code": "```ruby\nclass SavingsAccount\n  attr_accessor :balance\n\n  def initialize(initial_balance)\n    @balance = initial_balance\n  end\n\n  def deposit(amount)\n    @balance += amount\n  end\n\n  def withdraw(amount)\n    @balance -= amount\n  end\n\n  def final_balance\n    @balance\n  end\nend\n\naccount = SavingsAccount.new(1000)\naccount.deposit(500)\naccount.withdraw(200)\nputs account.final_balance\n```"
  },
  {
    "task": "Develop a function to compute the surface area of a cylinder given its radius and height.",
    "code": "```ruby\ndef cylinder_surface_area(radius, height)\n  base_area = Math::PI * radius ** 2\n  lateral_area = 2 * Math::PI * radius * height\n  2 * base_area + lateral_area\nend\n```"
  },
  {
    "task": "Write a program that outputs the result of an arithmetic sequence given the first term and common difference.",
    "code": "```ruby\ndef arithmetic_sequence(first_term, common_difference, n)\n  sequence = []\n  n.times do |i|\n    sequence << first_term + i * common_difference\n  end\n  sequence\nend\n\nfirst_term = 5\ncommon_difference = 3\nn = 10\n\nsequence = arithmetic_sequence(first_term, common_difference, n)\nputs sequence.join(', ')\n```"
  },
  {
    "task": "Implement a function that finds the average speed for a trip given total distance and time.",
    "code": "```ruby\ndef average_speed(total_distance, total_time)\n  total_distance / total_time\nend\n```"
  },
  {
    "task": "Create a function to calculate the total cost of a road trip given fuel cost per mile and distance.",
    "code": "```ruby\ndef total_road_trip_cost(fuel_cost_per_mile, distance)\n  fuel_cost_per_mile * distance\nend\n```"
  },
  {
    "task": "Write a script that determines the number of tiles required to cover a floor area using arithmetic operations.",
    "code": "```ruby\ndef tiles_needed(floor_length, floor_width, tile_length, tile_width)\n  floor_area = floor_length * floor_width\n  tile_area = tile_length * tile_width\n  (floor_area / tile_area.to_f).ceil\nend\n\nfloor_length = 10.0\nfloor_width = 12.0\ntile_length = 2.0\ntile_width = 2.0\n\nputs tiles_needed(floor_length, floor_width, tile_length, tile_width)\n```"
  },
  {
    "task": "Develop a program to calculate the amount of paint needed to cover a wall given its area.",
    "code": "```ruby\ndef paint_needed(area, coverage_per_liter)\n  (area.to_f / coverage_per_liter).ceil\nend\n\nputs \"Enter the area of the wall in square meters:\"\narea = gets.to_f\n\nputs \"Enter coverage of paint per liter in square meters:\"\ncoverage_per_liter = gets.to_f\n\nliters_needed = paint_needed(area, coverage_per_liter)\nputs \"You will need #{liters_needed} liters of paint.\"\n```"
  },
  {
    "task": "Build a function that calculates the price per unit weight given total price and weight.",
    "code": "```ruby\ndef price_per_unit_weight(total_price, weight)\n  total_price / weight\nend\n```"
  },
  {
    "task": "Implement a program that computes the volume of a rectangular prism given its dimensions.",
    "code": "```ruby\ndef volume_of_prism(length, width, height)\n  length * width * height\nend\n\n# Example usage\nlength = 5\nwidth = 3\nheight = 2\nvolume = volume_of_prism(length, width, height)\nputs \"The volume of the rectangular prism is #{volume}\"\n```"
  },
  {
    "task": "Write a function to find the percentage increase or decrease between two numbers.",
    "code": "```ruby\ndef percentage_change(original, new)\n  return nil if original == 0\n  ((new - original) / original.to_f) * 100\nend\n```"
  },
  {
    "task": "Create a program to determine the number of complete weeks within a specified number of days.",
    "code": "```ruby\ndef complete_weeks(days)\n  days / 7\nend\n\nputs complete_weeks(15)  # Example usage\n```"
  },
  {
    "task": "Design a function that calculates the break-even point for a business using cost and revenue data.",
    "code": "```ruby\ndef break_even_point(fixed_costs, variable_costs_per_unit, price_per_unit)\n  break_even_units = fixed_costs / (price_per_unit - variable_costs_per_unit)\n  break_even_units\nend\n```"
  },
  {
    "task": "Develop a program that converts a total number of seconds into hours, minutes, and seconds.",
    "code": "```ruby\ndef convert_seconds(total_seconds)\n  hours = total_seconds / 3600\n  remaining_seconds = total_seconds % 3600\n  minutes = remaining_seconds / 60\n  seconds = remaining_seconds % 60\n  [hours, minutes, seconds]\nend\n\ntotal_seconds = 3665\nhours, minutes, seconds = convert_seconds(total_seconds)\nputs \"#{total_seconds} seconds is equal to #{hours} hours, #{minutes} minutes, and #{seconds} seconds.\"\n```"
  },
  {
    "task": "Write a function that calculates the depreciation of an asset over time using arithmetic operations.",
    "code": "```ruby\ndef calculate_depreciation(initial_value, salvage_value, useful_life_years, year)\n  depreciation_per_year = (initial_value - salvage_value) / useful_life_years\n  depreciation_value = depreciation_per_year * year\n  current_value = initial_value - depreciation_value\n  current_value\nend\n```"
  },
  {
    "task": "Create a program that computes the final exam grade needed to achieve a target course average.",
    "code": "```ruby\ndef final_exam_grade(current_average, target_average, weight_of_final)\n  ((target_average - current_average * (1 - weight_of_final)) / weight_of_final).round(2)\nend\n\nputs \"Enter your current course average (as a percentage):\"\ncurrent_average = gets.to_f\n\nputs \"Enter your target course average (as a percentage):\"\ntarget_average = gets.to_f\n\nputs \"Enter the weight of the final exam (as a decimal, e.g., 0.3 for 30%):\"\nweight_of_final = gets.to_f\n\nrequired_final_grade = final_exam_grade(current_average, target_average, weight_of_final)\nputs \"You need a score of #{required_final_grade}% on the final exam to achieve your target average.\"\n```"
  },
  {
    "task": "Implement a function to calculate the total cost of groceries given prices and quantities of items.",
    "code": "```ruby\ndef total_cost(prices, quantities)\n  total = 0\n  prices.each_with_index do |price, index|\n    total += price * quantities[index]\n  end\n  total\nend\n```"
  },
  {
    "task": "Write a script that determines the number of years required to double an investment using a fixed interest rate.",
    "code": "```ruby\nprincipal = 1.0\nrate = 0.05\nbalance = principal\nyears = 0\n\nwhile balance < 2 * principal\n  balance += balance * rate\n  years += 1\nend\n\nputs years\n```"
  },
  {
    "task": "Develop a function that computes the harmonic mean of a set of numbers using division and addition.",
    "code": "```ruby\ndef harmonic_mean(numbers)\n  return 0 if numbers.empty?\n  numbers.size / numbers.map { |n| 1.0 / n }.reduce(:+)\nend\n```"
  },
  {
    "task": "Create a program to find the sum of the squares of numbers in a given range.",
    "code": "```ruby\ndef sum_of_squares(range)\n  range.inject(0) { |sum, num| sum + num**2 }\nend\n\nrange = 1..10 # Example range\nputs sum_of_squares(range)\n```"
  },
  {
    "task": "Design a function that calculates the energy consumption of an appliance given power and usage time.",
    "code": "```ruby\ndef energy_consumption(power, usage_time)\n  power * usage_time\nend\n```"
  },
  {
    "task": "Write a program that simulates a simple stock portfolio using arithmetic operations for buying and selling.",
    "code": "```ruby\nclass StockPortfolio\n  attr_accessor :stocks\n\n  def initialize\n    @stocks = Hash.new(0)\n  end\n\n  def buy(stock_name, quantity, price_per_unit)\n    @stocks[stock_name] += quantity\n    total_price = quantity * price_per_unit\n    puts \"Bought #{quantity} of #{stock_name} for $#{total_price}\"\n  end\n\n  def sell(stock_name, quantity, price_per_unit)\n    if @stocks[stock_name] >= quantity\n      @stocks[stock_name] -= quantity\n      total_price = quantity * price_per_unit\n      puts \"Sold #{quantity} of #{stock_name} for $#{total_price}\"\n    else\n      puts \"Not enough stock to sell\"\n    end\n  end\n\n  def display_portfolio\n    puts \"Current Portfolio:\"\n    @stocks.each do |stock_name, quantity|\n      puts \"#{stock_name}: #{quantity} shares\"\n    end\n  end\nend\n\nportfolio = StockPortfolio.new\nportfolio.buy(\"AAPL\", 10, 150)\nportfolio.sell(\"AAPL\", 5, 160)\nportfolio.display_portfolio\n```"
  },
  {
    "task": "Implement a function to calculate the gravitational force between two masses using multiplication and division.",
    "code": "```ruby\ndef gravitational_force(mass1, mass2, distance)\n  gravitational_constant = 6.67430e-11\n  force = gravitational_constant * (mass1 * mass2) / (distance ** 2)\n  force\nend\n```"
  },
  {
    "task": "Create a function that determines the price per square foot of a piece of real estate.",
    "code": "```ruby\ndef price_per_square_foot(total_price, total_square_feet)\n  total_price / total_square_feet.to_f\nend\n```"
  },
  {
    "task": "Write a script to compute the total interest earned on a savings account with monthly compounding.",
    "code": "```ruby\nprincipal = 1000.0\nannual_rate = 0.05\nmonths = 12\n\nmonthly_rate = annual_rate / 12\ntotal_amount = principal * (1 + monthly_rate)**months\ntotal_interest = total_amount - principal\n\nputs \"Total Interest Earned: #{total_interest.round(2)}\"\n```"
  },
  {
    "task": "Develop a program that calculates the calories burned during exercise given MET value and duration.",
    "code": "```ruby\ndef calories_burned(met_value, duration_in_minutes, weight_in_kg)\n  (met_value * 3.5 * weight_in_kg / 200) * duration_in_minutes\nend\n\nmet_value = 8.0\nduration_in_minutes = 30\nweight_in_kg = 70\n\nputs calories_burned(met_value, duration_in_minutes, weight_in_kg)\n```"
  },
  {
    "task": "Build a function that converts a speed from miles per hour to kilometers per hour using multiplication.",
    "code": "```ruby\ndef mph_to_kph(mph)\n  mph * 1.60934\nend\n```"
  },
  {
    "task": "Implement a program to find the number of days between two dates using arithmetic operations.",
    "code": "```ruby\nrequire 'date'\n\ndef days_between_dates(date1, date2)\n  (Date.parse(date2) - Date.parse(date1)).to_i\nend\n\ndate1 = \"2023-01-01\"\ndate2 = \"2023-12-31\"\nputs days_between_dates(date1, date2)\n```"
  },
  {
    "task": "Write a function to calculate the area of a circle given its radius.",
    "code": "```ruby\ndef area_of_circle(radius)\n  Math::PI * radius**2\nend\n```"
  },
  {
    "task": "Create a program that determines the total distance driven given trips with varying speeds and durations.",
    "code": "```ruby\nclass Trip\n  attr_accessor :speed, :duration\n\n  def initialize(speed, duration)\n    @speed = speed\n    @duration = duration\n  end\n\n  def distance\n    @speed * @duration\n  end\nend\n\nclass TotalDistanceCalculator\n  def initialize(trips)\n    @trips = trips\n  end\n\n  def total_distance\n    @trips.map(&:distance).sum\n  end\nend\n\ntrip1 = Trip.new(60, 2) # speed in km/h, duration in hours\ntrip2 = Trip.new(80, 1.5)\ntrip3 = Trip.new(100, 1)\n\ntrips = [trip1, trip2, trip3]\ncalculator = TotalDistanceCalculator.new(trips)\nputs calculator.total_distance\n```"
  },
  {
    "task": "Design a function to compute the final price of an item after applying multiple discounts sequentially.",
    "code": "```ruby\ndef final_price(initial_price, discounts)\n  final_price = initial_price\n  discounts.each do |discount|\n    final_price -= final_price * (discount / 100.0)\n  end\n  final_price\nend\n```"
  },
  {
    "task": "Write a script that calculates the number of bricks needed to build a wall given wall dimensions and brick size.",
    "code": "```ruby\ndef calculate_bricks(wall_length, wall_height, brick_length, brick_height)\n  wall_area = wall_length * wall_height\n  brick_area = brick_length * brick_height\n  (wall_area / brick_area.to_f).ceil\nend\n\n# Example usage:\nwall_length = 10.0\nwall_height = 5.0\nbrick_length = 0.5\nbrick_height = 0.25\n\nbricks_needed = calculate_bricks(wall_length, wall_height, brick_length, brick_height)\nputs \"Number of bricks needed: #{bricks_needed}\"\n```"
  },
  {
    "task": "Develop a program to determine the number of pizzas required for a party given the number of people and slices per pizza.",
    "code": "```ruby\ndef pizzas_needed(people, slices_per_pizza, slices_per_person)\n  total_slices_needed = people * slices_per_person\n  (total_slices_needed / slices_per_pizza.to_f).ceil\nend\n\n# Example usage\npeople = 10\nslices_per_pizza = 8\nslices_per_person = 3\n\nputs pizzas_needed(people, slices_per_pizza, slices_per_person)\n```"
  },
  {
    "task": "Implement a function that calculates the total cost of a meal including tax and tip.",
    "code": "```ruby\ndef total_meal_cost(meal_cost, tax_rate, tip_rate)\n  tax_amount = meal_cost * tax_rate / 100.0\n  tip_amount = meal_cost * tip_rate / 100.0\n  total_cost = meal_cost + tax_amount + tip_amount\n  total_cost\nend\n```"
  },
  {
    "task": "Create a program to compute the average rainfall over a period using addition and division.",
    "code": "```ruby\ndef average_rainfall(rainfall_data)\n  total_rainfall = rainfall_data.reduce(0) { |sum, rainfall| sum + rainfall }\n  average = total_rainfall.to_f / rainfall_data.size\n  average\nend\n\nrainfall_data = [3.5, 4.2, 5.0, 3.8, 4.1] # example data\nputs average_rainfall(rainfall_data)\n```"
  },
  {
    "task": "Write a function that determines the number of batches needed to produce a specific quantity of a product.",
    "code": "```ruby\ndef batches_needed(total_quantity, batch_size)\n  (total_quantity.to_f / batch_size).ceil\nend\n```"
  },
  {
    "task": "Design a program to calculate the total energy consumption of a household given individual appliance usage.",
    "code": "```ruby\ndef total_energy_consumption(appliance_usage)\n  appliance_usage.values.reduce(:+)\nend\n\nappliance_usage = {\n  fridge: 100,     # energy in kWh\n  tv: 50,\n  washing_machine: 30,\n  oven: 40\n}\n\nputs total_energy_consumption(appliance_usage)\n```"
  },
  {
    "task": "Develop a function that computes the body surface area of a person using height and weight.",
    "code": "```ruby\ndef body_surface_area(height, weight)\n  Math.sqrt((height * weight) / 3600.0)\nend\n```"
  },
  {
    "task": "Build a script to calculate the monthly payment on a mortgage using principal, interest rate, and term.",
    "code": "```ruby\ndef calculate_monthly_payment(principal, annual_interest_rate, term_years)\n  monthly_interest_rate = annual_interest_rate / 12.0 / 100\n  number_of_payments = term_years * 12\n  numerator = monthly_interest_rate * (1 + monthly_interest_rate)**number_of_payments\n  denominator = (1 + monthly_interest_rate)**number_of_payments - 1\n  monthly_payment = principal * numerator / denominator\n  monthly_payment\nend\n\n# Example usage:\nprincipal = 250000\nannual_interest_rate = 3.5\nterm_years = 30\n\nmonthly_payment = calculate_monthly_payment(principal, annual_interest_rate, term_years)\nputs \"Monthly Payment: $#{monthly_payment.round(2)}\"\n```"
  },
  {
    "task": "Implement a function to find the volume of a cone given its height and radius.",
    "code": "```ruby\ndef cone_volume(height, radius)\n  (Math::PI * radius**2 * height) / 3\nend\n```"
  },
  {
    "task": "Write a program that estimates the cost of a trip using fuel efficiency and distance.",
    "code": "```ruby\ndef estimate_trip_cost(fuel_efficiency, distance, fuel_price_per_unit)\n  fuel_needed = distance / fuel_efficiency\n  cost = fuel_needed * fuel_price_per_unit\n  cost\nend\n\nfuel_efficiency = 25.0 # miles per gallon\ndistance = 300.0 # miles\nfuel_price_per_unit = 3.5 # dollars per gallon\n\ntrip_cost = estimate_trip_cost(fuel_efficiency, distance, fuel_price_per_unit)\nputs \"Estimated trip cost: $#{trip_cost}\"\n```"
  }
]