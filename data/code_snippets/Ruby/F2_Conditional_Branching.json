[
  {
    "task": "Write a program that checks if a number is even or odd and outputs the result.",
    "code": "```ruby\ndef even_or_odd(number)\n  if number.even?\n    puts \"The number is even.\"\n  else\n    puts \"The number is odd.\"\n  end\nend\n\n# Example usage:\nnumber = 10\neven_or_odd(number)\n```"
  },
  {
    "task": "Create a function that determines if a given year is a leap year.",
    "code": "```ruby\ndef leap_year?(year)\n  if year % 4 == 0\n    if year % 100 == 0\n      if year % 400 == 0\n        true\n      else\n        false\n      end\n    else\n      true\n    end\n  else\n    false\n  end\nend\n```"
  },
  {
    "task": "Develop a script that categorizes an input number as positive, negative, or zero.",
    "code": "```ruby\ndef categorize_number(number)\n  if number > 0\n    \"positive\"\n  elsif number < 0\n    \"negative\"\n  else\n    \"zero\"\n  end\nend\n\n# Example usage:\n# puts categorize_number(10)\n# puts categorize_number(-5)\n# puts categorize_number(0)\n```"
  },
  {
    "task": "Implement a system that grants access only if a correct password and username are provided.",
    "code": "```ruby\ndef access_granted?(username, password)\n  correct_username = \"admin\"\n  correct_password = \"12345\"\n\n  if username == correct_username && password == correct_password\n    true\n  else\n    false\n  end\nend\n\n# Example usage\nputs \"Access Granted!\" if access_granted?(\"admin\", \"12345\")\n```"
  },
  {
    "task": "Design a program that outputs 'Fizz' for numbers divisible by 3, 'Buzz' for numbers divisible by 5, and 'FizzBuzz' for numbers divisible by both.",
    "code": "```ruby\n(1..100).each do |i|\n  if i % 15 == 0\n    puts 'FizzBuzz'\n  elsif i % 3 == 0\n    puts 'Fizz'\n  elsif i % 5 == 0\n    puts 'Buzz'\n  else\n    puts i\n  end\nend\n```"
  },
  {
    "task": "Write a function to determine if a character is a vowel or a consonant.",
    "code": "```ruby\ndef vowel_or_consonant(char)\n  if char.downcase =~ /[aeiou]/\n    \"vowel\"\n  else\n    \"consonant\"\n  end\nend\n```"
  },
  {
    "task": "Create a program that assigns letter grades based on numerical scores.",
    "code": "```ruby\ndef assign_grade(score)\n  if score >= 90\n    'A'\n  elsif score >= 80\n    'B'\n  elsif score >= 70\n    'C'\n  elsif score >= 60\n    'D'\n  else\n    'F'\n  end\nend\n\n# Example usage:\nputs assign_grade(95)  # Output: A\nputs assign_grade(82)  # Output: B\nputs assign_grade(76)  # Output: C\nputs assign_grade(63)  # Output: D\nputs assign_grade(58)  # Output: F\n```"
  },
  {
    "task": "Develop a routine that suggests clothing based on the current temperature.",
    "code": "```ruby\ndef suggest_clothing(temperature)\n  if temperature < 0\n    \"Wear a heavy coat, gloves, and a hat.\"\n  elsif temperature >= 0 && temperature < 10\n    \"Wear a coat and a scarf.\"\n  elsif temperature >= 10 && temperature < 20\n    \"Wear a jacket.\"\n  elsif temperature >= 20 && temperature < 30\n    \"Wear a t-shirt and shorts.\"\n  else\n    \"Wear light clothing and stay cool.\"\n  end\nend\n```"
  },
  {
    "task": "Implement a system that checks if a user is an adult or a minor based on their age.",
    "code": "```ruby\ndef check_age(age)\n  if age >= 18\n    \"Adult\"\n  else\n    \"Minor\"\n  end\nend\n```"
  },
  {
    "task": "Design a program that validates if a triangle can exist based on its side lengths.",
    "code": "```ruby\ndef valid_triangle?(a, b, c)\n  if a <= 0 || b <= 0 || c <= 0\n    false\n  elsif a + b > c && a + c > b && b + c > a\n    true\n  else\n    false\n  end\nend\n\n# Example usage\nputs valid_triangle?(3, 4, 5) # => true\nputs valid_triangle?(1, 10, 12) # => false\n```"
  },
  {
    "task": "Write a function that determines the largest of three input numbers.",
    "code": "```ruby\ndef largest_of_three(a, b, c)\n  if a >= b && a >= c\n    a\n  elsif b >= a && b >= c\n    b\n  else\n    c\n  end\nend\n```"
  },
  {
    "task": "Create a program that checks if a string is a palindrome.",
    "code": "```ruby\ndef palindrome?(string)\n  string == string.reverse\nend\n\ninput = \"level\"\nif palindrome?(input)\n  puts \"#{input} is a palindrome.\"\nelse\n  puts \"#{input} is not a palindrome.\"\nend\n```"
  },
  {
    "task": "Develop a routine that calculates the total cost with a discount applied if applicable.",
    "code": "```ruby\ndef calculate_total_cost(price, quantity, discount_threshold, discount_rate)\n  total_cost = price * quantity\n  if total_cost >= discount_threshold\n    total_cost -= total_cost * discount_rate\n  end\n  total_cost\nend\n```"
  },
  {
    "task": "Implement a system that checks if a person is eligible to vote based on age and citizenship.",
    "code": "```ruby\ndef eligible_to_vote?(age, citizenship)\n  if age >= 18 && citizenship == 'citizen'\n    true\n  else\n    false\n  end\nend\n\n# Example usage:\n# puts eligible_to_vote?(20, 'citizen')  #=> true\n# puts eligible_to_vote?(16, 'citizen')  #=> false\n# puts eligible_to_vote?(20, 'non-citizen')  #=> false\n```"
  },
  {
    "task": "Design a function that returns the day of the week given a number from 1 to 7.",
    "code": "```ruby\ndef day_of_week(number)\n  case number\n  when 1\n    \"Monday\"\n  when 2\n    \"Tuesday\"\n  when 3\n    \"Wednesday\"\n  when 4\n    \"Thursday\"\n  when 5\n    \"Friday\"\n  when 6\n    \"Saturday\"\n  when 7\n    \"Sunday\"\n  else\n    \"Invalid number\"\n  end\nend\n```"
  },
  {
    "task": "Write a program that determines if a word is found within a given sentence.",
    "code": "```ruby\ndef word_in_sentence?(word, sentence)\n  sentence.include?(word)\nend\n\n# Example usage\nword = \"hello\"\nsentence = \"hello world\"\nputs word_in_sentence?(word, sentence) ? \"Word found.\" : \"Word not found.\"\n```"
  },
  {
    "task": "Create a script that checks if a number is within a specified range.",
    "code": "```ruby\ndef number_in_range?(number, min, max)\n  if number >= min && number <= max\n    true\n  else\n    false\n  end\nend\n\n# Example usage\nnumber = 10\nmin = 5\nmax = 15\n\nif number_in_range?(number, min, max)\n  puts \"#{number} is within the range of #{min} and #{max}.\"\nelse\n  puts \"#{number} is not within the range of #{min} and #{max}.\"\nend\n```"
  },
  {
    "task": "Develop a routine to decide if a user input is a valid email address.",
    "code": "```ruby\ndef valid_email?(email)\n  if email =~ /\\A[^@\\s]+@([^@\\s]+\\.)+[^@\\s]+\\z/\n    true\n  else\n    false\n  end\nend\n\nputs \"Enter an email address:\"\ninput = gets.chomp\n\nif valid_email?(input)\n  puts \"The email address is valid.\"\nelse\n  puts \"The email address is invalid.\"\nend\n```"
  },
  {
    "task": "Implement a program that categorizes a number as small, medium, or large.",
    "code": "```ruby\ndef categorize_number(number)\n  if number < 10\n    'small'\n  elsif number <= 100\n    'medium'\n  else\n    'large'\n  end\nend\n\n# Example usage\nnumber = 25\nputs \"The number #{number} is categorized as #{categorize_number(number)}.\"\n```"
  },
  {
    "task": "Design a function that outputs the season based on the month provided.",
    "code": "```ruby\ndef season_from_month(month)\n  case month.downcase\n  when 'december', 'january', 'february'\n    'Winter'\n  when 'march', 'april', 'may'\n    'Spring'\n  when 'june', 'july', 'august'\n    'Summer'\n  when 'september', 'october', 'november'\n    'Autumn'\n  else\n    'Invalid month'\n  end\nend\n```"
  },
  {
    "task": "Write a program that checks if a string contains only alphabetic characters.",
    "code": "```ruby\ndef alphabetic_only?(str)\n  if str.match?(/\\A[a-zA-Z]+\\z/)\n    true\n  else\n    false\n  end\nend\n```"
  },
  {
    "task": "Create a routine that decides the type of triangle based on its angles.",
    "code": "```ruby\ndef triangle_type(angle1, angle2, angle3)\n  if angle1 + angle2 + angle3 != 180\n    \"Invalid\"\n  elsif angle1 <= 0 || angle2 <= 0 || angle3 <= 0\n    \"Invalid\"\n  elsif angle1 == 90 || angle2 == 90 || angle3 == 90\n    \"Right\"\n  elsif angle1 < 90 && angle2 < 90 && angle3 < 90\n    \"Acute\"\n  else\n    \"Obtuse\"\n  end\nend\n```"
  },
  {
    "task": "Develop a program that suggests a meal based on the time of day.",
    "code": "```ruby\ndef suggest_meal(time_of_day)\n  if time_of_day >= 5 && time_of_day < 11\n    \"Breakfast\"\n  elsif time_of_day >= 11 && time_of_day < 15\n    \"Lunch\"\n  elsif time_of_day >= 15 && time_of_day < 18\n    \"Snack\"\n  elsif time_of_day >= 18 && time_of_day < 22\n    \"Dinner\"\n  else\n    \"Late Night Snack\"\n  end\nend\n\ncurrent_time = Time.now.hour\nputs suggest_meal(current_time)\n```"
  },
  {
    "task": "Implement a function that determines if a point lies within a circle given its radius.",
    "code": "```ruby\ndef point_in_circle?(x, y, radius)\n  distance_squared = x**2 + y**2\n  distance_squared <= radius**2\nend\n```"
  },
  {
    "task": "Design a script that calculates overtime pay based on hours worked.",
    "code": "```ruby\ndef calculate_overtime_pay(hours_worked, hourly_rate)\n  regular_hours = 40\n  overtime_rate_multiplier = 1.5\n\n  if hours_worked <= regular_hours\n    total_pay = hours_worked * hourly_rate\n  else\n    regular_pay = regular_hours * hourly_rate\n    overtime_hours = hours_worked - regular_hours\n    overtime_pay = overtime_hours * hourly_rate * overtime_rate_multiplier\n    total_pay = regular_pay + overtime_pay\n  end\n\n  total_pay\nend\n\nputs \"Enter hours worked:\"\nhours_worked = gets.to_f\nputs \"Enter hourly rate:\"\nhourly_rate = gets.to_f\n\novertime_pay = calculate_overtime_pay(hours_worked, hourly_rate)\nputs \"Total pay is: $#{overtime_pay}\"\n```"
  },
  {
    "task": "Write a program that checks if two strings are anagrams of each other.",
    "code": "```ruby\ndef anagrams?(string1, string2)\n  string1.chars.sort == string2.chars.sort\nend\n\nputs anagrams?('listen', 'silent') # true\nputs anagrams?('hello', 'world') # false\n```"
  },
  {
    "task": "Create a function that classifies numbers as prime or composite.",
    "code": "```ruby\ndef classify_number(n)\n  return \"Neither prime nor composite\" if n <= 1\n  return \"Prime\" if n == 2\n\n  (2..Math.sqrt(n).to_i).each do |i|\n    return \"Composite\" if n % i == 0\n  end\n\n  \"Prime\"\nend\n```"
  },
  {
    "task": "Develop a routine to determine if a number is a power of two.",
    "code": "```ruby\ndef power_of_two?(number)\n  return false if number <= 0\n  (number & (number - 1)).zero?\nend\n```"
  },
  {
    "task": "Implement a program that checks if a list is sorted in ascending order.",
    "code": "```ruby\ndef sorted_ascending?(list)\n  (0...list.length - 1).each do |i|\n    return false if list[i] > list[i + 1]\n  end\n  true\nend\n\n# Example usage\nlist = [1, 2, 3, 4, 5]\nputs sorted_ascending?(list) # => true\n\nlist = [1, 3, 2, 4, 5]\nputs sorted_ascending?(list) # => false\n```"
  },
  {
    "task": "Design a function that suggests a sport based on the weather conditions.",
    "code": "```ruby\ndef suggest_sport(weather)\n  case weather.downcase\n  when 'sunny'\n    'Tennis'\n  when 'rainy'\n    'Swimming'\n  when 'snowy'\n    'Skiing'\n  when 'windy'\n    'Kite Surfing'\n  else\n    'Gym'\n  end\nend\n```"
  },
  {
    "task": "Write a program that determines if an entered date is valid.",
    "code": "```ruby\ndef valid_date?(day, month, year)\n  return false if month < 1 || month > 12\n  return false if day < 1\n\n  days_in_month = case month\n                  when 1, 3, 5, 7, 8, 10, 12\n                    31\n                  when 4, 6, 9, 11\n                    30\n                  when 2\n                    if (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)\n                      29\n                    else\n                      28\n                    end\n                  else\n                    return false\n                  end\n\n  day <= days_in_month\nend\n\nputs \"Enter day:\"\nday = gets.to_i\nputs \"Enter month:\"\nmonth = gets.to_i\nputs \"Enter year:\"\nyear = gets.to_i\n\nif valid_date?(day, month, year)\n  puts \"The date is valid.\"\nelse\n  puts \"The date is invalid.\"\nend\n```"
  },
  {
    "task": "Create a script to decide which of two products to buy based on price and reviews.",
    "code": "```ruby\ndef choose_product(product1, price1, reviews1, product2, price2, reviews2)\n  if price1 < price2\n    if reviews1 >= reviews2\n      return product1\n    else\n      return product2\n    end\n  elsif price2 < price1\n    if reviews2 >= reviews1\n      return product2\n    else\n      return product1\n    end\n  else\n    if reviews1 >= reviews2\n      return product1\n    else\n      return product2\n    end\n  end\nend\n\nproduct1 = \"Product A\"\nprice1 = 100\nreviews1 = 4.5\n\nproduct2 = \"Product B\"\nprice2 = 120\nreviews2 = 4.7\n\nchosen_product = choose_product(product1, price1, reviews1, product2, price2, reviews2)\nputs \"You should buy: #{chosen_product}\"\n```"
  },
  {
    "task": "Develop a function that categorizes a person\u2019s BMI as underweight, normal, overweight, or obese.",
    "code": "```ruby\ndef categorize_bmi(weight, height)\n  bmi = weight / (height ** 2)\n\n  case\n  when bmi < 18.5\n    'underweight'\n  when bmi < 24.9\n    'normal'\n  when bmi < 29.9\n    'overweight'\n  else\n    'obese'\n  end\nend\n```"
  },
  {
    "task": "Implement a program that checks if a credit card number is valid using the Luhn algorithm.",
    "code": "```ruby\ndef luhn_algorithm(card_number)\n  digits = card_number.chars.map(&:to_i)\n  checksum = 0\n\n  digits.reverse.each_with_index do |digit, index|\n    if index.odd?\n      double = digit * 2\n      checksum += double > 9 ? double - 9 : double\n    else\n      checksum += digit\n    end\n  end\n\n  checksum % 10 == 0\nend\n\n# Example usage:\ncard_number = \"1234567812345670\" # Replace with actual card number\nputs luhn_algorithm(card_number) ? \"Valid\" : \"Invalid\"\n```"
  },
  {
    "task": "Design a routine that outputs a greeting based on the current time of day.",
    "code": "```ruby\ndef greet_based_on_time\n  current_hour = Time.now.hour\n\n  if current_hour < 12\n    puts \"Good morning!\"\n  elsif current_hour < 18\n    puts \"Good afternoon!\"\n  else\n    puts \"Good evening!\"\n  end\nend\n\ngreet_based_on_time\n```"
  },
  {
    "task": "Write a program that determines if a given word can be formed with a set of letters.",
    "code": "```ruby\ndef can_form_word(word, letters)\n  letters_hash = Hash.new(0)\n  \n  letters.each_char do |char|\n    letters_hash[char] += 1\n  end\n\n  word.each_char do |char|\n    return false if letters_hash[char] <= 0\n    letters_hash[char] -= 1\n  end\n\n  true\nend\n\n# Example usage:\nword = \"hello\"\nletters = \"ehlol\"\nputs can_form_word(word, letters) # Output: true\n```"
  },
  {
    "task": "Create a function that outputs the appropriate greeting based on the day of the week.",
    "code": "```ruby\ndef greeting_for_day(day)\n  case day.downcase\n  when 'monday'\n    \"Happy Monday!\"\n  when 'tuesday'\n    \"Terrific Tuesday!\"\n  when 'wednesday'\n    \"Wonderful Wednesday!\"\n  when 'thursday'\n    \"Thrilling Thursday!\"\n  when 'friday'\n    \"Fantastic Friday!\"\n  when 'saturday'\n    \"Superb Saturday!\"\n  when 'sunday'\n    \"Serene Sunday!\"\n  else\n    \"Invalid day!\"\n  end\nend\n```"
  },
  {
    "task": "Develop a system to determine if a person qualifies for a senior citizen discount.",
    "code": "```ruby\ndef senior_citizen_discount?(age)\n  if age >= 65\n    true\n  else\n    false\n  end\nend\n\n# Example usage\nage = 70\nif senior_citizen_discount?(age)\n  puts \"Qualifies for senior citizen discount.\"\nelse\n  puts \"Does not qualify for senior citizen discount.\"\nend\n```"
  },
  {
    "task": "Implement a function that checks if a number is a perfect square.",
    "code": "```ruby\ndef perfect_square?(number)\n  return false if number < 0\n  sqrt = Math.sqrt(number)\n  sqrt.to_i == sqrt\nend\n```"
  },
  {
    "task": "Design a program that outputs the correct shipping cost based on weight and distance.",
    "code": "```ruby\ndef shipping_cost(weight, distance)\n  cost = 0\n\n  if weight <= 5\n    if distance <= 100\n      cost = 5\n    else\n      cost = 10\n    end\n  elsif weight <= 20\n    if distance <= 100\n      cost = 10\n    else\n      cost = 20\n    end\n  else\n    if distance <= 100\n      cost = 20\n    else\n      cost = 30\n    end\n  end\n\n  cost\nend\n\nputs shipping_cost(4, 50)   # Example usage\nputs shipping_cost(10, 150) # Example usage\n```"
  },
  {
    "task": "Write a routine that chooses the correct pronoun based on gender input.",
    "code": "```ruby\ndef choose_pronoun(gender)\n  case gender.downcase\n  when 'male'\n    'he'\n  when 'female'\n    'she'\n  else\n    'they'\n  end\nend\n```"
  },
  {
    "task": "Create a program that checks if a user input is a palindrome number.",
    "code": "```ruby\nputs \"Enter a number:\"\nnumber = gets.chomp\n\nif number == number.reverse\n  puts \"The number is a palindrome.\"\nelse\n  puts \"The number is not a palindrome.\"\nend\n```"
  },
  {
    "task": "Develop a script to decide if a number is a perfect number.",
    "code": "```ruby\ndef perfect_number?(number)\n  return false if number <= 1\n  sum_of_divisors = (1...number).select { |i| number % i == 0 }.sum\n  sum_of_divisors == number\nend\n\nputs \"Enter a number:\"\nnumber = gets.to_i\n\nif perfect_number?(number)\n  puts \"#{number} is a perfect number.\"\nelse\n  puts \"#{number} is not a perfect number.\"\nend\n```"
  },
  {
    "task": "Implement a system that determines the winner in a rock-paper-scissors game.",
    "code": "```ruby\ndef determine_winner(player1_choice, player2_choice)\n  if player1_choice == player2_choice\n    \"It's a tie!\"\n  elsif (player1_choice == 'rock' && player2_choice == 'scissors') ||\n        (player1_choice == 'scissors' && player2_choice == 'paper') ||\n        (player1_choice == 'paper' && player2_choice == 'rock')\n    'Player 1 wins!'\n  else\n    'Player 2 wins!'\n  end\nend\n```"
  },
  {
    "task": "Design a function that suggests a movie genre based on user mood.",
    "code": "```ruby\ndef suggest_genre(mood)\n  case mood.downcase\n  when 'happy'\n    'Comedy'\n  when 'sad'\n    'Drama'\n  when 'excited'\n    'Action'\n  when 'romantic'\n    'Romance'\n  when 'scared'\n    'Horror'\n  else\n    'Documentary'\n  end\nend\n```"
  },
  {
    "task": "Write a program that checks if a file extension is valid for an image file.",
    "code": "```ruby\ndef valid_image_extension?(filename)\n  valid_extensions = ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.tiff']\n  extension = File.extname(filename).downcase\n  if valid_extensions.include?(extension)\n    true\n  else\n    false\n  end\nend\n```"
  },
  {
    "task": "Create a routine that decides the appropriate currency symbol based on country.",
    "code": "```ruby\ndef currency_symbol(country)\n  case country.downcase\n  when 'united states', 'usa'\n    '$'\n  when 'united kingdom', 'uk'\n    '\u00a3'\n  when 'eurozone', 'eu'\n    '\u20ac'\n  when 'japan'\n    '\u00a5'\n  when 'india'\n    '\u20b9'\n  else\n    'Currency symbol not found'\n  end\nend\n```"
  },
  {
    "task": "Develop a function that determines if a string is a valid palindrome ignoring spaces and punctuation.",
    "code": "```ruby\ndef valid_palindrome?(string)\n  cleaned_string = string.downcase.gsub(/[^a-z0-9]/, '')\n  cleaned_string == cleaned_string.reverse\nend\n```"
  },
  {
    "task": "Implement a program that checks if a number is in the Fibonacci sequence.",
    "code": "```ruby\ndef fibonacci?(number)\n  return true if number == 0 || number == 1\n\n  a, b = 0, 1\n  while b < number\n    a, b = b, a + b\n  end\n\n  b == number\nend\n\n# Example usage\nputs fibonacci?(5)    # true\nputs fibonacci?(4)    # false\nputs fibonacci?(13)   # true\nputs fibonacci?(22)   # false\n```"
  },
  {
    "task": "Design a script to calculate the correct tip based on service quality rating.",
    "code": "```ruby\ndef calculate_tip(amount, service_quality)\n  tip_percentage = case service_quality.downcase\n                   when 'excellent'\n                     0.20\n                   when 'good'\n                     0.15\n                   when 'average'\n                     0.10\n                   when 'poor'\n                     0.05\n                   else\n                     0.00\n                   end\n  tip = amount * tip_percentage\n  tip\nend\n\nputs \"Enter the bill amount:\"\namount = gets.to_f\n\nputs \"Rate the service quality (excellent, good, average, poor):\"\nservice_quality = gets.chomp\n\ntip = calculate_tip(amount, service_quality)\nputs \"The tip amount is: $#{'%.2f' % tip}\"\n```"
  },
  {
    "task": "Write a function that determines if a year is a century year.",
    "code": "```ruby\ndef century_year?(year)\n  year % 100 == 0\nend\n```"
  },
  {
    "task": "Create a program that checks if a date falls on a weekend.",
    "code": "```ruby\nrequire 'date'\n\ndef weekend?(date_string)\n  date = Date.parse(date_string)\n  date.saturday? || date.sunday?\nend\n\n# Example usage:\nputs weekend?('2023-10-14') # Output: true (Saturday)\nputs weekend?('2023-10-15') # Output: true (Sunday)\nputs weekend?('2023-10-16') # Output: false (Monday)\n```"
  },
  {
    "task": "Develop a routine that suggests a book based on genre preference.",
    "code": "```ruby\ndef suggest_book(genre)\n  case genre.downcase\n  when 'fiction'\n    'The Great Gatsby by F. Scott Fitzgerald'\n  when 'non-fiction'\n    'Sapiens: A Brief History of Humankind by Yuval Noah Harari'\n  when 'mystery'\n    'Gone Girl by Gillian Flynn'\n  when 'fantasy'\n    'Harry Potter and the Sorcerer\\'s Stone by J.K. Rowling'\n  when 'science fiction'\n    'Dune by Frank Herbert'\n  when 'romance'\n    'Pride and Prejudice by Jane Austen'\n  when 'horror'\n    'The Shining by Stephen King'\n  else\n    'Genre not recognized. Please try another genre.'\n  end\nend\n```"
  },
  {
    "task": "Implement a system that determines if a student passes or fails based on their grades.",
    "code": "```ruby\ndef determine_pass_fail(grades)\n  average = grades.sum / grades.size.to_f\n  if average >= 50\n    \"Pass\"\n  else\n    \"Fail\"\n  end\nend\n\n# Example usage\ngrades = [60, 70, 80, 90, 50]\nresult = determine_pass_fail(grades)\nputs result\n```"
  },
  {
    "task": "Design a function to validate if a string is a valid URL.",
    "code": "```ruby\nrequire 'uri'\n\ndef valid_url?(string)\n  uri = URI.parse(string)\n  uri.is_a?(URI::HTTP) || uri.is_a?(URI::HTTPS)\nrescue URI::InvalidURIError\n  false\nend\n```"
  },
  {
    "task": "Write a program that checks if a point is inside a rectangle given its coordinates.",
    "code": "```ruby\ndef point_in_rectangle?(point_x, point_y, rect_x1, rect_y1, rect_x2, rect_y2)\n  if point_x >= rect_x1 && point_x <= rect_x2 && point_y >= rect_y1 && point_y <= rect_y2\n    true\n  else\n    false\n  end\nend\n\n# Example usage:\npoint_x = 3\npoint_y = 4\nrect_x1 = 1\nrect_y1 = 2\nrect_x2 = 5\nrect_y2 = 6\n\nputs point_in_rectangle?(point_x, point_y, rect_x1, rect_y1, rect_x2, rect_y2)\n```"
  },
  {
    "task": "Create a script to determine if a word can be constructed from a given set of letters.",
    "code": "```ruby\ndef can_construct_word(word, letters)\n  letter_count = Hash.new(0)\n  letters.each_char { |char| letter_count[char] += 1 }\n  \n  word.each_char do |char|\n    if letter_count[char] > 0\n      letter_count[char] -= 1\n    else\n      return false\n    end\n  end\n  \n  true\nend\n\n# Example usage:\nword = \"apple\"\nletters = \"aelppx\"\nputs can_construct_word(word, letters) # Output: true\n```"
  },
  {
    "task": "Develop a routine that calculates insurance premiums based on age and driving record.",
    "code": "```ruby\ndef calculate_premium(age, driving_record)\n  base_premium = 100\n\n  if age < 18\n    return \"Not eligible for insurance\"\n  elsif age < 25\n    premium = base_premium + 50\n  else\n    premium = base_premium\n  end\n\n  case driving_record\n  when \"clean\"\n    premium -= 10\n  when \"minor\"\n    premium += 20\n  when \"major\"\n    premium += 50\n  end\n\n  premium > 0 ? premium : 0\nend\n```"
  },
  {
    "task": "Implement a program that checks for palindrome sentences.",
    "code": "```ruby\ndef palindrome_sentence?(sentence)\n  cleaned_sentence = sentence.downcase.gsub(/[^a-z]/, '')\n  cleaned_sentence == cleaned_sentence.reverse\nend\n\n# Example usage:\nsentence = \"A man, a plan, a canal, Panama\"\nputs palindrome_sentence?(sentence) ? \"Palindrome\" : \"Not a palindrome\"\n```"
  },
  {
    "task": "Design a function to evaluate if a string contains balanced parentheses.",
    "code": "```ruby\ndef balanced_parentheses?(string)\n  balance = 0\n  string.each_char do |char|\n    if char == '('\n      balance += 1\n    elsif char == ')'\n      balance -= 1\n    end\n    return false if balance < 0\n  end\n  balance == 0\nend\n```"
  },
  {
    "task": "Write a program that suggests a pet based on living conditions and preferences.",
    "code": "```ruby\ndef suggest_pet(living_space, preference)\n  if living_space == \"apartment\"\n    if preference == \"low maintenance\"\n      \"Consider a cat or a fish.\"\n    elsif preference == \"active\"\n      \"Consider a small dog or a bird.\"\n    else\n      \"Consider a hamster or a reptile.\"\n    end\n  elsif living_space == \"house\"\n    if preference == \"low maintenance\"\n      \"Consider a cat or a rabbit.\"\n    elsif preference == \"active\"\n      \"Consider a dog or a parrot.\"\n    else\n      \"Consider a guinea pig or a turtle.\"\n    end\n  else\n    \"Please provide valid living conditions.\"\n  end\nend\n```"
  },
  {
    "task": "Create a routine that determines if a phone number is valid based on format.",
    "code": "```ruby\ndef valid_phone_number?(phone_number)\n  if phone_number.match?(/^\\(\\d{3}\\) \\d{3}-\\d{4}$/)\n    true\n  else\n    false\n  end\nend\n```"
  },
  {
    "task": "Develop a function that checks if two rectangles overlap.",
    "code": "```ruby\ndef rectangles_overlap?(rect1, rect2)\n  rect1_x1, rect1_y1, rect1_x2, rect1_y2 = rect1\n  rect2_x1, rect2_y1, rect2_x2, rect2_y2 = rect2\n\n  if rect1_x1 >= rect2_x2 || rect2_x1 >= rect1_x2\n    return false\n  end\n\n  if rect1_y1 >= rect2_y2 || rect2_y1 >= rect1_y2\n    return false\n  end\n\n  true\nend\n```"
  },
  {
    "task": "Implement a program that chooses a beverage based on user input time.",
    "code": "```ruby\ndef choose_beverage(time)\n  case time\n  when 0..10\n    \"Drink coffee\"\n  when 11..15\n    \"Drink tea\"\n  when 16..20\n    \"Drink juice\"\n  else\n    \"Drink water\"\n  end\nend\n\nputs \"Enter the time (0-23):\"\ntime = gets.to_i\nputs choose_beverage(time)\n```"
  },
  {
    "task": "Design a script to determine if a URL is secure (HTTPS).",
    "code": "```ruby\ndef secure_url?(url)\n  url.start_with?('https://')\nend\n\n# Example usage\nurl = 'https://example.com'\nif secure_url?(url)\n  puts 'The URL is secure.'\nelse\n  puts 'The URL is not secure.'\nend\n```"
  },
  {
    "task": "Write a function that outputs different messages based on the input number's divisibility.",
    "code": "```ruby\ndef divisibility_message(number)\n  if number % 15 == 0\n    \"Divisible by 15\"\n  elsif number % 3 == 0\n    \"Divisible by 3\"\n  elsif number % 5 == 0\n    \"Divisible by 5\"\n  else\n    \"Not divisible by 3, 5, or 15\"\n  end\nend\n```"
  },
  {
    "task": "Create a program to decide if a person should bring an umbrella based on the weather forecast.",
    "code": "```ruby\ndef bring_umbrella?(forecast)\n  if forecast.downcase == 'rainy' || forecast.downcase == 'stormy' || forecast.downcase == 'drizzle'\n    true\n  else\n    false\n  end\nend\n\nforecast = 'Rainy'\nputs \"Should bring umbrella: #{bring_umbrella?(forecast)}\"\n```"
  },
  {
    "task": "Develop a routine that checks if a chess move is valid.",
    "code": "```ruby\ndef valid_chess_move?(piece, start_pos, end_pos)\n  start_x, start_y = start_pos\n  end_x, end_y = end_pos\n\n  case piece.downcase\n  when 'pawn'\n    if start_y == end_y && (end_x - start_x).abs == 1\n      true\n    elsif start_y == end_y && start_x == 1 && (end_x - start_x).abs == 2\n      true\n    else\n      false\n    end\n  when 'rook'\n    if start_x == end_x || start_y == end_y\n      true\n    else\n      false\n    end\n  when 'knight'\n    if (end_x - start_x).abs == 2 && (end_y - start_y).abs == 1 || \n       (end_x - start_x).abs == 1 && (end_y - start_y).abs == 2\n      true\n    else\n      false\n    end\n  when 'bishop'\n    if (end_x - start_x).abs == (end_y - start_y).abs\n      true\n    else\n      false\n    end\n  when 'queen'\n    if start_x == end_x || start_y == end_y || (end_x - start_x).abs == (end_y - start_y).abs\n      true\n    else\n      false\n    end\n  when 'king'\n    if (end_x - start_x).abs <= 1 && (end_y - start_y).abs <= 1\n      true\n    else\n      false\n    end\n  else\n    false\n  end\nend\n```"
  },
  {
    "task": "Implement a program that outputs the number of days in a given month.",
    "code": "```ruby\ndef days_in_month(month)\n  case month.downcase\n  when \"january\", \"march\", \"may\", \"july\", \"august\", \"october\", \"december\"\n    31\n  when \"april\", \"june\", \"september\", \"november\"\n    30\n  when \"february\"\n    28\n  else\n    \"Invalid month\"\n  end\nend\n\nputs days_in_month(\"February\")\n```"
  },
  {
    "task": "Design a function that validates if a string is a valid hexadecimal number.",
    "code": "```ruby\ndef valid_hexadecimal?(str)\n  if str.match?(/\\A\\h+\\z/)\n    true\n  else\n    false\n  end\nend\n```"
  },
  {
    "task": "Write a script that checks if a word is present in a list of predefined words.",
    "code": "```ruby\ndef word_in_list?(word, predefined_list)\n  if predefined_list.include?(word)\n    puts \"#{word} is present in the list.\"\n  else\n    puts \"#{word} is not present in the list.\"\n  end\nend\n\npredefined_list = [\"apple\", \"banana\", \"cherry\", \"date\"]\nword = \"banana\"\nword_in_list?(word, predefined_list)\n```"
  },
  {
    "task": "Create a routine to decide the correct tax bracket for a given income.",
    "code": "```ruby\ndef tax_bracket(income)\n  case income\n  when 0..9_999\n    \"Low\"\n  when 10_000..39_999\n    \"Middle\"\n  when 40_000..84_999\n    \"Upper Middle\"\n  else\n    \"High\"\n  end\nend\n```"
  },
  {
    "task": "Develop a function that determines if a point is within a triangle.",
    "code": "```ruby\ndef sign(x1, y1, x2, y2, x3, y3)\n  (x1 - x3) * (y2 - y3) - (x2 - x3) * (y1 - y3)\nend\n\ndef point_in_triangle?(px, py, x1, y1, x2, y2, x3, y3)\n  d1 = sign(px, py, x1, y1, x2, y2)\n  d2 = sign(px, py, x2, y2, x3, y3)\n  d3 = sign(px, py, x3, y3, x1, y1)\n\n  has_neg = (d1 < 0) || (d2 < 0) || (d3 < 0)\n  has_pos = (d1 > 0) || (d2 > 0) || (d3 > 0)\n\n  !(has_neg && has_pos)\nend\n```"
  },
  {
    "task": "Implement a program that checks if a given string is a valid binary number.",
    "code": "```ruby\ndef valid_binary?(string)\n  if string.match?(/\\A[01]+\\z/)\n    true\n  else\n    false\n  end\nend\n```"
  },
  {
    "task": "Design a system to evaluate the risk level of an investment based on criteria.",
    "code": "```ruby\ndef evaluate_investment_risk(investment_amount, investment_duration, market_volatility)\n  if investment_amount < 1000\n    risk_level = \"Low\"\n  elsif investment_amount >= 1000 && investment_amount < 10000\n    if investment_duration < 1\n      risk_level = \"Medium\"\n    else\n      risk_level = \"Low\"\n    end\n  else\n    if market_volatility > 5\n      risk_level = \"High\"\n    else\n      risk_level = \"Medium\"\n    end\n  end\n  risk_level\nend\n```"
  },
  {
    "task": "Write a program that suggests a vacation destination based on budget and preferences.",
    "code": "```ruby\ndef vacation_suggestion(budget, preference)\n  if budget < 100\n    if preference == 'beach'\n      'Staycation with a beach movie marathon'\n    elsif preference == 'mountains'\n      'Hiking day trip to local hills'\n    else\n      'Visit a local museum or park'\n    end\n  elsif budget < 500\n    if preference == 'beach'\n      'Weekend getaway to a nearby beach town'\n    elsif preference == 'mountains'\n      'Camping trip in a nearby national park'\n    else\n      'Road trip to a nearby city'\n    end\n  else\n    if preference == 'beach'\n      'Vacation in Hawaii or the Caribbean'\n    elsif preference == 'mountains'\n      'Skiing trip in the Alps'\n    else\n      'European tour across multiple cities'\n    end\n  end\nend\n\nputs vacation_suggestion(50, 'beach')\nputs vacation_suggestion(300, 'mountains')\nputs vacation_suggestion(1000, 'city')\n```"
  },
  {
    "task": "Create a routine that checks if a username is already taken in a database.",
    "code": "```ruby\ndef username_taken?(username, database)\n  if database.include?(username)\n    true\n  else\n    false\n  end\nend\n```"
  },
  {
    "task": "Develop a function that determines if a string is a valid IPv4 address.",
    "code": "```ruby\ndef valid_ipv4?(ip)\n  parts = ip.split('.')\n  return false unless parts.length == 4\n  \n  parts.all? do |part|\n    part.match?(/^\\d+$/) && part.to_i.between?(0, 255)\n  end\nend\n```"
  },
  {
    "task": "Implement a program to decide which transportation method is quickest based on distance.",
    "code": "```ruby\ndef quickest_transportation_method(distance)\n  if distance < 1\n    'Walking is the quickest method.'\n  elsif distance < 5\n    'Bicycling is the quickest method.'\n  elsif distance < 20\n    'Driving is the quickest method.'\n  else\n    'Flying is the quickest method.'\n  end\nend\n\n# Example usage:\ndistance = 10\nputs quickest_transportation_method(distance)\n```"
  },
  {
    "task": "Design a script to validate if a number is a prime number.",
    "code": "```ruby\ndef prime?(number)\n  return false if number <= 1\n  (2..Math.sqrt(number)).each do |i|\n    return false if number % i == 0\n  end\n  true\nend\n\nputs \"Enter a number:\"\nnumber = gets.to_i\n\nif prime?(number)\n  puts \"#{number} is a prime number.\"\nelse\n  puts \"#{number} is not a prime number.\"\nend\n```"
  },
  {
    "task": "Write a function that checks if a number is divisible by another number without remainder.",
    "code": "```ruby\ndef divisible?(num, divisor)\n  num % divisor == 0\nend\n```"
  },
  {
    "task": "Create a program that determines the type of a quadrilateral based on side lengths.",
    "code": "```ruby\ndef quadrilateral_type(a, b, c, d)\n  if a == b && b == c && c == d\n    \"Square\"\n  elsif a == c && b == d\n    \"Rectangle\"\n  elsif a == b || b == c || c == d || a == d\n    \"Rhombus\"\n  else\n    \"Irregular Quadrilateral\"\n  end\nend\n\n# Example usage\nputs quadrilateral_type(5, 5, 5, 5) # Square\nputs quadrilateral_type(5, 10, 5, 10) # Rectangle\nputs quadrilateral_type(5, 5, 8, 8) # Rhombus\nputs quadrilateral_type(4, 5, 6, 7) # Irregular Quadrilateral\n```"
  },
  {
    "task": "Develop a routine to check if a sentence contains all letters of the alphabet.",
    "code": "```ruby\ndef contains_all_letters?(sentence)\n  ('a'..'z').all? { |letter| sentence.downcase.include?(letter) }\nend\n\n# Example usage:\n# puts contains_all_letters?(\"The quick brown fox jumps over the lazy dog\")\n```"
  },
  {
    "task": "Implement a program that outputs the appropriate error message based on an error code.",
    "code": "```ruby\ndef error_message(error_code)\n  case error_code\n  when 1\n    \"Error 1: Invalid input.\"\n  when 2\n    \"Error 2: Connection failed.\"\n  when 3\n    \"Error 3: Access denied.\"\n  when 4\n    \"Error 4: Resource not found.\"\n  else\n    \"Unknown error code.\"\n  end\nend\n\n# Example usage:\nputs error_message(1)  # Outputs: Error 1: Invalid input.\nputs error_message(5)  # Outputs: Unknown error code.\n```"
  },
  {
    "task": "Design a function that categorizes a movie rating as G, PG, PG-13, or R.",
    "code": "```ruby\ndef categorize_movie_rating(rating)\n  case rating\n  when 'G'\n    'General Audiences'\n  when 'PG'\n    'Parental Guidance Suggested'\n  when 'PG-13'\n    'Parents Strongly Cautioned'\n  when 'R'\n    'Restricted'\n  else\n    'Unknown Rating'\n  end\nend\n```"
  },
  {
    "task": "Write a script to check if a string is a valid Roman numeral.",
    "code": "```ruby\ndef valid_roman_numeral?(s)\n  roman_numeral_regex = /\\A(M{0,3})(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})\\z/\n  if s.match?(roman_numeral_regex)\n    true\n  else\n    false\n  end\nend\n\n# Example usage:\nputs valid_roman_numeral?(\"XII\")   # => true\nputs valid_roman_numeral?(\"MMXX\")  # => true\nputs valid_roman_numeral?(\"ABCD\")  # => false\n```"
  },
  {
    "task": "Create a routine that decides if a person can retire based on age and years worked.",
    "code": "```ruby\ndef can_retire?(age, years_worked)\n  if age >= 65 || years_worked >= 30\n    true\n  elsif age >= 60 && years_worked >= 25\n    true\n  else\n    false\n  end\nend\n```"
  },
  {
    "task": "Develop a function that outputs a different emoji based on user mood input.",
    "code": "```ruby\ndef mood_to_emoji(mood)\n  case mood.downcase\n  when 'happy'\n    '\ud83d\ude0a'\n  when 'sad'\n    '\ud83d\ude22'\n  when 'angry'\n    '\ud83d\ude20'\n  when 'excited'\n    '\ud83d\ude03'\n  when 'bored'\n    '\ud83d\ude10'\n  else\n    '\ud83e\udd14'\n  end\nend\n```"
  },
  {
    "task": "Implement a program that checks if a password meets security requirements.",
    "code": "```ruby\ndef password_secure?(password)\n  if password.length < 8\n    return \"Password is too short\"\n  elsif !password.match(/[A-Z]/)\n    return \"Password must contain at least one uppercase letter\"\n  elsif !password.match(/[a-z]/)\n    return \"Password must contain at least one lowercase letter\"\n  elsif !password.match(/[0-9]/)\n    return \"Password must contain at least one digit\"\n  elsif !password.match(/[^A-Za-z0-9]/)\n    return \"Password must contain at least one special character\"\n  else\n    return \"Password is secure\"\n  end\nend\n\n# Example usage:\nputs password_secure?(\"Password1!\")\nputs password_secure?(\"pass\")\n```"
  },
  {
    "task": "Design a script to determine if a number is a palindrome when reversed.",
    "code": "```ruby\ndef palindrome?(number)\n  str_num = number.to_s\n  str_num == str_num.reverse\nend\n\nputs palindrome?(12321)  # Example usage\nputs palindrome?(12345)\n```"
  },
  {
    "task": "Write a function that evaluates if a given day is a holiday.",
    "code": "```ruby\ndef is_holiday(day)\n  holidays = [\"New Year's Day\", \"Christmas\", \"Independence Day\"]\n  if holidays.include?(day)\n    true\n  else\n    false\n  end\nend\n```"
  },
  {
    "task": "Create a program to decide if a library book is overdue based on the due date.",
    "code": "```ruby\nrequire 'date'\n\ndef book_overdue?(due_date_str)\n  due_date = Date.parse(due_date_str)\n  current_date = Date.today\n\n  if current_date > due_date\n    \"The book is overdue.\"\n  else\n    \"The book is not overdue.\"\n  end\nend\n\n# Example usage:\nputs book_overdue?('2023-10-01')\n```"
  },
  {
    "task": "Develop a routine that checks if a given year is part of a leap century.",
    "code": "```ruby\ndef leap_century?(year)\n  if year % 400 == 0\n    true\n  elsif year % 100 == 0\n    false\n  elsif year % 4 == 0\n    true\n  else\n    false\n  end\nend\n```"
  },
  {
    "task": "Implement a system to determine the correct category for a product based on user input.",
    "code": "```ruby\ndef determine_category(product)\n  case product.downcase\n  when 'apple', 'banana', 'orange'\n    'Fruit'\n  when 'carrot', 'broccoli', 'spinach'\n    'Vegetable'\n  when 'chicken', 'beef', 'fish'\n    'Meat'\n  else\n    'Unknown category'\n  end\nend\n\nputs \"Enter the product name:\"\nproduct_name = gets.chomp\ncategory = determine_category(product_name)\nputs \"The category for #{product_name} is: #{category}\"\n```"
  }
]