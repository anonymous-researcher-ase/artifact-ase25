[
  {
    "task": "Write a function that checks if two strings are equal, ignoring case sensitivity.",
    "code": "```ruby\ndef strings_equal_ignore_case?(str1, str2)\n  str1.casecmp?(str2)\nend\n```"
  },
  {
    "task": "Create a program that determines if a number is greater than 10.",
    "code": "```ruby\ndef greater_than_ten?(number)\n  number > 10\nend\n\nputs \"Enter a number:\"\ninput = gets.chomp.to_i\nif greater_than_ten?(input)\n  puts \"The number is greater than 10.\"\nelse\n  puts \"The number is not greater than 10.\"\nend\n```"
  },
  {
    "task": "Implement a feature that compares the current date to a given date and returns if it is in the future.",
    "code": "```ruby\nrequire 'date'\n\ndef date_in_future?(given_date)\n  current_date = Date.today\n  given_date > current_date\nend\n```"
  },
  {
    "task": "Design a system that checks if a user's age is less than 18 and restricts access if true.",
    "code": "```ruby\ndef check_access(age)\n  if age < 18\n    \"Access Restricted\"\n  else\n    \"Access Granted\"\n  end\nend\n```"
  },
  {
    "task": "Build an algorithm that finds the maximum of three given integers.",
    "code": "```ruby\ndef find_maximum(a, b, c)\n  max = a\n  max = b if b > max\n  max = c if c > max\n  max\nend\n```"
  },
  {
    "task": "Write a function that verifies if two arrays contain the same elements in the same order.",
    "code": "```ruby\ndef arrays_equal?(array1, array2)\n  array1 == array2\nend\n```"
  },
  {
    "task": "Create a script that checks if a product's price is within a specified range.",
    "code": "```ruby\ndef price_in_range?(price, min_price, max_price)\n  price >= min_price && price <= max_price\nend\n\n# Example usage:\nproduct_price = 25.0\nmin_price = 20.0\nmax_price = 30.0\n\nif price_in_range?(product_price, min_price, max_price)\n  puts \"The product's price is within the specified range.\"\nelse\n  puts \"The product's price is outside the specified range.\"\nend\n```"
  },
  {
    "task": "Develop a tool that compares two versions of a software application and determines which is newer.",
    "code": "```ruby\ndef compare_versions(version1, version2)\n  v1_parts = version1.split('.').map(&:to_i)\n  v2_parts = version2.split('.').map(&:to_i)\n  \n  length = [v1_parts.length, v2_parts.length].max\n  v1_parts.fill(0, v1_parts.length...length)\n  v2_parts.fill(0, v2_parts.length...length)\n\n  (0...length).each do |i|\n    if v1_parts[i] > v2_parts[i]\n      return \"#{version1} is newer\"\n    elsif v1_parts[i] < v2_parts[i]\n      return \"#{version2} is newer\"\n    end\n  end\n  \n  \"Both versions are the same\"\nend\n\n# Example usage:\nputs compare_versions(\"1.2.3\", \"1.2.4\")  # => \"1.2.4 is newer\"\nputs compare_versions(\"2.0\", \"1.9.9\")    # => \"2.0 is newer\"\nputs compare_versions(\"3.0.1\", \"3.0.1\")  # => \"Both versions are the same\"\n```"
  },
  {
    "task": "Implement a test to see if a given year is a leap year.",
    "code": "```ruby\ndef leap_year?(year)\n  (year % 4 == 0 && year % 100 != 0) || year % 400 == 0\nend\n\n# Example usage:\n# puts leap_year?(2000) # true\n# puts leap_year?(1900) # false\n# puts leap_year?(2004) # true\n# puts leap_year?(2001) # false\n```"
  },
  {
    "task": "Design a feature that tells if a student\u2019s grade is passing or failing based on a threshold.",
    "code": "```ruby\ndef check_passing_grade(grade, threshold)\n  if grade >= threshold\n    \"Passing\"\n  else\n    \"Failing\"\n  end\nend\n```"
  },
  {
    "task": "Write a function to compare two file sizes and return the larger one.",
    "code": "```ruby\ndef larger_file_size(file1, file2)\n  size1 = File.size(file1)\n  size2 = File.size(file2)\n  size1 > size2 ? size1 : size2\nend\n```"
  },
  {
    "task": "Build a program that checks if the temperature is below freezing point.",
    "code": "```ruby\ndef below_freezing?(temperature)\n  temperature < 0\nend\n\ntemperature = -5\nputs \"The temperature is below freezing point.\" if below_freezing?(temperature)\n```"
  },
  {
    "task": "Create a logic that determines if a number is within the Fibonacci sequence.",
    "code": "```ruby\ndef is_fibonacci?(n)\n  return false if n < 0\n\n  a, b = 0, 1\n  while a < n\n    a, b = b, a + b\n  end\n  a == n\nend\n```"
  },
  {
    "task": "Develop a function that checks if a given word is a palindrome.",
    "code": "```ruby\ndef palindrome?(word)\n  word == word.reverse\nend\n```"
  },
  {
    "task": "Write a script to see if a password meets a minimum length requirement.",
    "code": "```ruby\ndef password_meets_length_requirement?(password, min_length)\n  password.length >= min_length\nend\n\npassword = \"examplePassword123\"\nmin_length = 8\n\nif password_meets_length_requirement?(password, min_length)\n  puts \"Password meets the minimum length requirement.\"\nelse\n  puts \"Password does not meet the minimum length requirement.\"\nend\n```"
  },
  {
    "task": "Implement a system that decides if a point is inside a circle based on its coordinates.",
    "code": "```ruby\ndef point_in_circle?(x, y, circle_x, circle_y, radius)\n  distance_squared = (x - circle_x)**2 + (y - circle_y)**2\n  distance_squared <= radius**2\nend\n```"
  },
  {
    "task": "Design a program that checks if a shopping cart total exceeds a certain budget.",
    "code": "```ruby\ndef exceeds_budget?(total, budget)\n  total > budget\nend\n\nshopping_cart_total = 150.00\nbudget_limit = 100.00\n\nif exceeds_budget?(shopping_cart_total, budget_limit)\n  puts \"The shopping cart total exceeds the budget.\"\nelse\n  puts \"The shopping cart total is within the budget.\"\nend\n```"
  },
  {
    "task": "Create a function that compares two players' scores and returns the winner.",
    "code": "```ruby\ndef determine_winner(score1, score2)\n  if score1 > score2\n    \"Player 1 wins\"\n  elsif score2 > score1\n    \"Player 2 wins\"\n  else\n    \"It's a tie\"\n  end\nend\n```"
  },
  {
    "task": "Write a program to determine if one string is a substring of another.",
    "code": "```ruby\ndef is_substring?(str1, str2)\n  str2.include?(str1)\nend\n\n# Example usage:\nputs is_substring?(\"hello\", \"hello world\")  # Output: true\nputs is_substring?(\"bye\", \"hello world\")    # Output: false\n```"
  },
  {
    "task": "Build a utility that checks if a number is a prime number.",
    "code": "```ruby\ndef prime?(number)\n  return false if number <= 1\n  (2..Math.sqrt(number)).none? { |i| number % i == 0 }\nend\n```"
  },
  {
    "task": "Write a function that checks if a given number is a perfect square.",
    "code": "```ruby\ndef perfect_square?(num)\n  return false if num < 0\n  sqrt = Math.sqrt(num)\n  sqrt.to_i == sqrt\nend\n```"
  },
  {
    "task": "Create a system that determines if a person is eligible for a senior citizen discount based on their age.",
    "code": "```ruby\ndef eligible_for_senior_discount?(age)\n  age >= 65\nend\n\n# Example usage\nage = 70\nif eligible_for_senior_discount?(age)\n  puts \"Eligible for senior citizen discount.\"\nelse\n  puts \"Not eligible for senior citizen discount.\"\nend\n```"
  },
  {
    "task": "Develop a feature to check if a date falls on a weekend.",
    "code": "```ruby\nrequire 'date'\n\ndef weekend?(date)\n  date.saturday? || date.sunday?\nend\n\n# Example usage\ndate = Date.new(2023, 10, 21) # A Saturday\nputs weekend?(date) # => true\n```"
  },
  {
    "task": "Design a program that sees if a given email address is in the correct format.",
    "code": "```ruby\ndef valid_email?(email)\n  !!(email =~ /\\A[\\w+\\-.]+@[a-z\\d\\-.]+\\.[a-z]+\\z/i)\nend\n\n# Example usage:\nemail = \"example@test.com\"\nputs valid_email?(email) ? \"Valid email format\" : \"Invalid email format\"\n```"
  },
  {
    "task": "Implement a test to check if a rectangle's area is larger than a triangle's area.",
    "code": "```ruby\ndef rectangle_area(length, width)\n  length * width\nend\n\ndef triangle_area(base, height)\n  0.5 * base * height\nend\n\ndef is_rectangle_area_larger?(rect_length, rect_width, tri_base, tri_height)\n  rectangle_area(rect_length, rect_width) > triangle_area(tri_base, tri_height)\nend\n\n# Example usage:\nputs is_rectangle_area_larger?(10, 5, 8, 5) # Outputs true or false\n```"
  },
  {
    "task": "Write a function that verifies if two rectangles overlap each other.",
    "code": "```ruby\ndef rectangles_overlap?(rect1, rect2)\n  x1, y1, x2, y2 = rect1\n  x3, y3, x4, y4 = rect2\n\n  return false if x1 >= x4 || x3 >= x2\n  return false if y1 >= y4 || y3 >= y2\n  \n  true\nend\n```"
  },
  {
    "task": "Create a script to compare two strings lexicographically.",
    "code": "```ruby\nstring1 = \"apple\"\nstring2 = \"banana\"\n\nif string1 < string2\n  puts \"#{string1} is lexicographically smaller than #{string2}\"\nelsif string1 > string2\n  puts \"#{string1} is lexicographically greater than #{string2}\"\nelse\n  puts \"#{string1} is equal to #{string2}\"\nend\n```"
  },
  {
    "task": "Build a program that checks if a list of numbers is in ascending order.",
    "code": "```ruby\ndef ascending_order?(numbers)\n  numbers.each_cons(2).all? { |a, b| a <= b }\nend\n\nnumbers = [1, 2, 3, 4, 5]\nputs ascending_order?(numbers) # Output: true\n\nnumbers = [1, 3, 2, 4, 5]\nputs ascending_order?(numbers) # Output: false\n```"
  },
  {
    "task": "Design a system to compare the heights of two buildings.",
    "code": "```ruby\nclass Building\n  attr_accessor :height\n\n  def initialize(height)\n    @height = height\n  end\nend\n\ndef compare_building_heights(building1, building2)\n  if building1.height > building2.height\n    \"Building 1 is taller than Building 2.\"\n  elsif building1.height < building2.height\n    \"Building 2 is taller than Building 1.\"\n  else\n    \"Both buildings are of the same height.\"\n  end\nend\n\nbuilding1 = Building.new(150)\nbuilding2 = Building.new(200)\n\nputs compare_building_heights(building1, building2)\n```"
  },
  {
    "task": "Write a feature that determines if a given time is before noon.",
    "code": "```ruby\ndef before_noon?(time)\n  time.hour < 12\nend\n```"
  },
  {
    "task": "Implement a function to check if a given number is a power of two.",
    "code": "```ruby\ndef is_power_of_two?(number)\n  number > 0 && (number & (number - 1)) == 0\nend\n```"
  },
  {
    "task": "Create a program that determines if a word is longer than another word.",
    "code": "```ruby\ndef longer_word(word1, word2)\n  word1.length > word2.length\nend\n\n# Example usage:\nputs longer_word(\"hello\", \"world\") # false\nputs longer_word(\"programming\", \"code\") # true\n```"
  },
  {
    "task": "Develop a function to compare the lengths of two lists and return the longer one.",
    "code": "```ruby\ndef longer_list(list1, list2)\n  if list1.length > list2.length\n    list1\n  else\n    list2\n  end\nend\n```"
  },
  {
    "task": "Write a script to see if a user's input matches a pre-defined secret code.",
    "code": "```ruby\nsecret_code = \"ruby123\"\nputs \"Enter the secret code:\"\nuser_input = gets.chomp\n\nif user_input == secret_code\n  puts \"Access granted.\"\nelse\n  puts \"Access denied.\"\nend\n```"
  },
  {
    "task": "Build a utility that checks if a given year is in the 21st century.",
    "code": "```ruby\ndef in_21st_century?(year)\n  year >= 2001 && year <= 2100\nend\n```"
  },
  {
    "task": "Create a logic that determines if a book's publication year is after 2000.",
    "code": "```ruby\ndef published_after_2000?(publication_year)\n  publication_year > 2000\nend\n```"
  },
  {
    "task": "Design a feature to see if a number is divisible by both 3 and 5.",
    "code": "```ruby\ndef divisible_by_3_and_5?(number)\n  number % 3 == 0 && number % 5 == 0\nend\n```"
  },
  {
    "task": "Implement a system that checks if a student's GPA is above a certain threshold.",
    "code": "```ruby\ndef gpa_above_threshold?(gpa, threshold)\n  gpa > threshold\nend\n```"
  },
  {
    "task": "Write a function to determine if a given angle is acute, right, or obtuse.",
    "code": "```ruby\ndef angle_type(angle)\n  if angle < 90\n    'acute'\n  elsif angle == 90\n    'right'\n  elsif angle > 90\n    'obtuse'\n  else\n    'invalid'\n  end\nend\n```"
  },
  {
    "task": "Develop a program that compares the lengths of two strings and returns the shorter one.",
    "code": "```ruby\ndef shorter_string(str1, str2)\n  str1.length < str2.length ? str1 : str2\nend\n```"
  },
  {
    "task": "Create a script to verify if a username is unique within a list.",
    "code": "```ruby\ndef is_username_unique?(username, username_list)\n  !username_list.include?(username)\nend\n\n# Example usage:\nusername_list = [\"alice\", \"bob\", \"charlie\"]\nusername = \"dave\"\nputs is_username_unique?(username, username_list) # true\n```"
  },
  {
    "task": "Build a tool that checks if a job applicant meets all the listed qualifications.",
    "code": "```ruby\ndef qualified_applicant?(applicant_qualifications, required_qualifications)\n  required_qualifications.all? do |qualification, required_level|\n    applicant_level = applicant_qualifications[qualification] || 0\n    applicant_level >= required_level\n  end\nend\n\n# Example usage\napplicant_qualifications = {\n  experience_years: 5,\n  education_level: 4,\n  skill_ruby: 3,\n  skill_javascript: 2\n}\n\nrequired_qualifications = {\n  experience_years: 3,\n  education_level: 4,\n  skill_ruby: 2,\n  skill_javascript: 2\n}\n\nputs qualified_applicant?(applicant_qualifications, required_qualifications) # Output: true\n```"
  },
  {
    "task": "Write a feature to see if a vehicle's speed exceeds the speed limit.",
    "code": "```ruby\ndef speed_exceeds_limit?(vehicle_speed, speed_limit)\n  vehicle_speed > speed_limit\nend\n```"
  },
  {
    "task": "Design a system that determines whether a given point is above or below the x-axis.",
    "code": "```ruby\ndef point_position(x, y)\n  if y > 0\n    \"above\"\n  elsif y < 0\n    \"below\"\n  else\n    \"on\"\n  end\nend\n```"
  },
  {
    "task": "Create a function that checks if a given word appears in a sentence.",
    "code": "```ruby\ndef word_in_sentence?(word, sentence)\n  sentence.include?(word)\nend\n```"
  },
  {
    "task": "Implement a program that identifies whether a given number is negative or positive.",
    "code": "```ruby\ndef identify_number(num)\n  if num > 0\n    \"positive\"\n  elsif num < 0\n    \"negative\"\n  else\n    \"zero\"\n  end\nend\n\n# Example usage:\nnumber = -7\nputs identify_number(number)\n```"
  },
  {
    "task": "Write a script to see if the sum of two numbers is greater than 100.",
    "code": "```ruby\ndef sum_greater_than_100?(a, b)\n  (a + b) > 100\nend\n\n# Example usage\nputs sum_greater_than_100?(50, 60) # Output: true\nputs sum_greater_than_100?(30, 40) # Output: false\n```"
  },
  {
    "task": "Build a utility that checks if a file exists in a specified directory.",
    "code": "```ruby\ndef file_exists_in_directory?(directory, filename)\n  File.exist?(File.join(directory, filename))\nend\n\n# Example usage:\n# puts file_exists_in_directory?('/path/to/directory', 'file.txt')\n```"
  },
  {
    "task": "Develop a system to compare the weights of two different objects.",
    "code": "```ruby\nclass ObjectComparison\n  attr_accessor :weight\n\n  def initialize(weight)\n    @weight = weight\n  end\n\n  def compare_with(other_object)\n    if @weight > other_object.weight\n      \"This object is heavier.\"\n    elsif @weight < other_object.weight\n      \"This object is lighter.\"\n    else\n      \"Both objects have the same weight.\"\n    end\n  end\nend\n\nobject1 = ObjectComparison.new(10)\nobject2 = ObjectComparison.new(20)\n\nputs object1.compare_with(object2)\nputs object2.compare_with(object1)\n```"
  },
  {
    "task": "Create a logic to determine if a number falls within a defined range.",
    "code": "```ruby\ndef within_range?(number, min, max)\n  number >= min && number <= max\nend\n```"
  },
  {
    "task": "Design a program that checks if an employee worked overtime based on hours worked.",
    "code": "```ruby\ndef worked_overtime?(hours_worked)\n  standard_hours = 40\n  hours_worked > standard_hours\nend\n\n# Example usage:\nputs worked_overtime?(45) # true\nputs worked_overtime?(38) # false\n```"
  },
  {
    "task": "Write a function to compare two dates and determine which is earlier.",
    "code": "```ruby\nrequire 'date'\n\ndef compare_dates(date1_str, date2_str)\n  date1 = Date.parse(date1_str)\n  date2 = Date.parse(date2_str)\n  \n  if date1 < date2\n    'date1 is earlier'\n  elsif date1 > date2\n    'date2 is earlier'\n  else\n    'both dates are the same'\n  end\nend\n```"
  },
  {
    "task": "Create a script that verifies if a given word starts with a vowel.",
    "code": "```ruby\ndef starts_with_vowel?(word)\n  !!(word =~ /\\A[aeiouAEIOU]/)\nend\n\nword = \"example\"\nputs starts_with_vowel?(word)\n```"
  },
  {
    "task": "Build a utility that checks if a number is even or odd.",
    "code": "```ruby\ndef even_or_odd(number)\n  if number % 2 == 0\n    \"even\"\n  else\n    \"odd\"\n  end\nend\n```"
  },
  {
    "task": "Implement a system that determines if a string contains only numeric characters.",
    "code": "```ruby\ndef numeric_string?(str)\n  str =~ /\\A\\d+\\z/ ? true : false\nend\n```"
  },
  {
    "task": "Write a function to see if a given character is a vowel or consonant.",
    "code": "```ruby\ndef vowel_or_consonant(char)\n  vowels = ['a', 'e', 'i', 'o', 'u']\n  if vowels.include?(char.downcase)\n    'vowel'\n  else\n    'consonant'\n  end\nend\n```"
  },
  {
    "task": "Create a program that checks if a point lies within a specified rectangle.",
    "code": "```ruby\ndef point_in_rectangle?(point, rectangle)\n  x, y = point\n  rect_x1, rect_y1, rect_x2, rect_y2 = rectangle\n\n  x >= rect_x1 && x <= rect_x2 && y >= rect_y1 && y <= rect_y2\nend\n\n# Example usage:\npoint = [3, 4]\nrectangle = [1, 2, 5, 6]\nputs point_in_rectangle?(point, rectangle) # Output: true or false\n```"
  },
  {
    "task": "Develop a feature to compare two lists and return the common elements.",
    "code": "```ruby\ndef common_elements(list1, list2)\n  list1 & list2\nend\n\n# Example usage:\n# puts common_elements([1, 2, 3], [2, 3, 4]).inspect\n```"
  },
  {
    "task": "Design a function that determines if a text contains any uppercase letters.",
    "code": "```ruby\ndef contains_uppercase?(text)\n  text.each_char.any? { |char| char =~ /[A-Z]/ }\nend\n```"
  },
  {
    "task": "Implement a script to check if a given sentence is a question.",
    "code": "```ruby\ndef is_question?(sentence)\n  sentence.strip.end_with?('?')\nend\n\nsentence = \"Is this a question?\"\nputs is_question?(sentence)\n```"
  },
  {
    "task": "Write a program to determine if a temperature is measured in Celsius or Fahrenheit.",
    "code": "```ruby\ndef temperature_scale(temperature)\n  if temperature.include?('C')\n    puts \"Celsius\"\n  elsif temperature.include?('F')\n    puts \"Fahrenheit\"\n  else\n    puts \"Unknown scale\"\n  end\nend\n\ntemperature = \"25C\"\ntemperature_scale(temperature)\n```"
  },
  {
    "task": "Create a system that verifies if a student is enrolled in a particular course.",
    "code": "```ruby\nclass Student\n  attr_accessor :name, :courses\n\n  def initialize(name, courses = [])\n    @name = name\n    @courses = courses\n  end\n\n  def enrolled_in?(course)\n    courses.include?(course)\n  end\nend\n\n# Example Usage\nstudent = Student.new(\"Alice\", [\"Math\", \"Science\", \"History\"])\nputs student.enrolled_in?(\"Math\")      # Output: true\nputs student.enrolled_in?(\"Art\")       # Output: false\n```"
  },
  {
    "task": "Build a utility to check if a given string is a valid hexadecimal number.",
    "code": "```ruby\ndef valid_hexadecimal?(string)\n  !!(/\\A[0-9a-fA-F]+\\z/ =~ string)\nend\n```"
  },
  {
    "task": "Write a function to see if two circles intersect based on their radii and center points.",
    "code": "```ruby\ndef circles_intersect?(circle1, circle2)\n  x1, y1, r1 = circle1\n  x2, y2, r2 = circle2\n\n  distance_between_centers = Math.sqrt((x2 - x1)**2 + (y2 - y1)**2)\n  sum_of_radii = r1 + r2\n\n  distance_between_centers <= sum_of_radii\nend\n```"
  },
  {
    "task": "Develop a program that checks if a given number is within 10% of another number.",
    "code": "```ruby\ndef within_ten_percent?(num1, num2)\n  difference = (num1 - num2).abs\n  threshold = num2 * 0.1\n  difference <= threshold\nend\n\n# Example usage:\nputs within_ten_percent?(90, 100)  # true\nputs within_ten_percent?(85, 100)  # false\n```"
  },
  {
    "task": "Create a feature to determine if a character is alphanumeric.",
    "code": "```ruby\ndef alphanumeric?(char)\n  char.match?(/[A-Za-z0-9]/)\nend\n\n# Example usage:\n# puts alphanumeric?('a')  # true\n# puts alphanumeric?('1')  # true\n# puts alphanumeric?('!')  # false\n```"
  },
  {
    "task": "Implement a system to compare the profit margins of two products.",
    "code": "```ruby\nclass Product\n  attr_accessor :cost_price, :selling_price\n\n  def initialize(cost_price, selling_price)\n    @cost_price = cost_price\n    @selling_price = selling_price\n  end\n\n  def profit_margin\n    ((@selling_price - @cost_price) / @selling_price.to_f) * 100\n  end\nend\n\ndef compare_profit_margins(product1, product2)\n  margin1 = product1.profit_margin\n  margin2 = product2.profit_margin\n\n  if margin1 > margin2\n    \"Product 1 has a higher profit margin.\"\n  elsif margin2 > margin1\n    \"Product 2 has a higher profit margin.\"\n  else\n    \"Both products have the same profit margin.\"\n  end\nend\n\n# Example usage:\nproduct1 = Product.new(50, 100)\nproduct2 = Product.new(30, 100)\n\nputs compare_profit_margins(product1, product2)\n```"
  },
  {
    "task": "Design a script to check if a given string contains any special characters.",
    "code": "```ruby\ndef contains_special_characters?(string)\n  !!(string =~ /[^A-Za-z0-9]/)\nend\n\n# Example usage:\nputs contains_special_characters?(\"Hello!\")    # true\nputs contains_special_characters?(\"Hello123\") # false\n```"
  },
  {
    "task": "Write a function to verify if a number is a multiple of another number.",
    "code": "```ruby\ndef multiple_of?(num, divisor)\n  num % divisor == 0\nend\n```"
  },
  {
    "task": "Create a program that checks if a date is a holiday based on a list of holidays.",
    "code": "```ruby\nrequire 'date'\n\ndef holiday?(date, holidays)\n  holidays.include?(date)\nend\n\nholidays = [\n  Date.new(2023, 1, 1),  # New Year's Day\n  Date.new(2023, 12, 25) # Christmas Day\n]\n\ndate_to_check = Date.new(2023, 12, 25)\nputs holiday?(date_to_check, holidays) ? 'It is a holiday.' : 'It is not a holiday.'\n```"
  },
  {
    "task": "Build a utility to compare two text files and highlight the differences.",
    "code": "```ruby\nrequire 'colorize'\n\ndef compare_files(file1_path, file2_path)\n  file1_lines = File.readlines(file1_path)\n  file2_lines = File.readlines(file2_path)\n\n  max_lines = [file1_lines.size, file2_lines.size].max\n\n  max_lines.times do |i|\n    line1 = file1_lines[i] || \"\"\n    line2 = file2_lines[i] || \"\"\n\n    if line1 != line2\n      puts \"Line #{i + 1}:\".colorize(:red)\n      puts \"File 1: #{line1}\".chomp\n      puts \"File 2: #{line2}\".chomp\n    else\n      puts \"Line #{i + 1}: #{line1}\".chomp\n    end\n  end\nend\n\ncompare_files('file1.txt', 'file2.txt')\n```"
  },
  {
    "task": "Develop a function to determine if a given password is strong based on length and character diversity.",
    "code": "```ruby\ndef strong_password?(password)\n  return false if password.length < 8\n  has_upper = password =~ /[A-Z]/\n  has_lower = password =~ /[a-z]/\n  has_digit = password =~ /\\d/\n  has_special = password =~ /[\\W_]/\n  \n  has_upper && has_lower && has_digit && has_special\nend\n```"
  },
  {
    "task": "Write a script to see if a number is within a specified distance from zero.",
    "code": "```ruby\ndef within_distance_from_zero?(number, distance)\n  number.abs <= distance\nend\n\nnumber = 5\ndistance = 10\n\nputs within_distance_from_zero?(number, distance)\n```"
  },
  {
    "task": "Create a system to check if a book title is available in a library database.",
    "code": "```ruby\nclass Library\n  def initialize(books)\n    @books = books\n  end\n\n  def book_available?(title)\n    @books.include?(title)\n  end\nend\n\nlibrary = Library.new([\"The Great Gatsby\", \"1984\", \"To Kill a Mockingbird\"])\nputs library.book_available?(\"1984\") # Example usage\n```"
  },
  {
    "task": "Implement a feature that determines if a user has administrator privileges.",
    "code": "```ruby\ndef has_admin_privileges?(user)\n  user.role == 'admin'\nend\n```"
  },
  {
    "task": "Design a function to compare the brightness of two colors.",
    "code": "```ruby\ndef compare_brightness(color1, color2)\n  brightness1 = 0.2126 * color1[:r] + 0.7152 * color1[:g] + 0.0722 * color1[:b]\n  brightness2 = 0.2126 * color2[:r] + 0.7152 * color2[:g] + 0.0722 * color2[:b]\n  \n  if brightness1 > brightness2\n    return 'color1 is brighter'\n  elsif brightness1 < brightness2\n    return 'color2 is brighter'\n  else\n    return 'both colors have the same brightness'\n  end\nend\n```"
  },
  {
    "task": "Write a program to verify if a number is a valid credit card number using the Luhn algorithm.",
    "code": "```ruby\ndef valid_credit_card?(number)\n  digits = number.to_s.chars.map(&:to_i)\n  checksum = 0\n\n  digits.reverse.each_with_index do |digit, index|\n    if index.odd?\n      digit *= 2\n      digit -= 9 if digit > 9\n    end\n    checksum += digit\n  end\n\n  checksum % 10 == 0\nend\n\n# Example usage:\nputs valid_credit_card?(1234567812345670) # false\nputs valid_credit_card?(4532015112830366) # true\n```"
  },
  {
    "task": "Create a script to determine if a given string is a valid IP address.",
    "code": "```ruby\ndef valid_ip?(ip)\n  parts = ip.split('.')\n  return false unless parts.length == 4\n  parts.all? { |part| part.to_i.to_s == part && part.to_i.between?(0, 255) }\nend\n\n# Example usage:\nip = \"192.168.1.1\"\nputs valid_ip?(ip) ? \"Valid IP\" : \"Invalid IP\"\n```"
  },
  {
    "task": "Build a utility that checks if a number is part of an arithmetic sequence.",
    "code": "```ruby\ndef in_arithmetic_sequence?(sequence, number)\n  return false if sequence.size < 2\n\n  difference = sequence[1] - sequence[0]\n  sequence.each_with_index do |num, index|\n    return false if index > 0 && num - sequence[index - 1] != difference\n  end\n\n  (sequence.include?(number) || (number - sequence[0]) % difference == 0)\nend\n```"
  },
  {
    "task": "Develop a feature to compare the efficiency of two algorithms based on time complexity.",
    "code": "```ruby\ndef compare_algorithms(algorithm1, algorithm2)\n  time_complexity1 = algorithm1[:time_complexity]\n  time_complexity2 = algorithm2[:time_complexity]\n\n  if time_complexity1 < time_complexity2\n    \"Algorithm 1 is more efficient\"\n  elsif time_complexity1 > time_complexity2\n    \"Algorithm 2 is more efficient\"\n  else\n    \"Both algorithms have the same efficiency\"\n  end\nend\n\nalgorithm_a = { name: \"Algorithm A\", time_complexity: \"O(n)\" }\nalgorithm_b = { name: \"Algorithm B\", time_complexity: \"O(log n)\" }\n\nputs compare_algorithms(algorithm_a, algorithm_b)\n```"
  },
  {
    "task": "Write a function to see if a given date falls in a leap year.",
    "code": "```ruby\ndef leap_year?(date)\n  year = date.year\n  (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)\nend\n```"
  },
  {
    "task": "Create a program that determines if a user's subscription is active based on the current date.",
    "code": "```ruby\nrequire 'date'\n\ndef subscription_active?(subscription_end_date)\n  current_date = Date.today\n  current_date <= subscription_end_date\nend\n\n# Example usage\nsubscription_end_date = Date.new(2023, 12, 31)\nputs subscription_active?(subscription_end_date) ? 'Active' : 'Inactive'\n```"
  },
  {
    "task": "Design a tool to check if a user\u2019s input is a palindrome phrase, ignoring spaces and punctuation.",
    "code": "```ruby\ndef palindrome?(phrase)\n  sanitized = phrase.downcase.gsub(/[^a-z0-9]/, '')\n  sanitized == sanitized.reverse\nend\n\nputs \"Enter a phrase:\"\ninput = gets.chomp\nputs palindrome?(input) ? \"It's a palindrome!\" : \"It's not a palindrome.\"\n```"
  },
  {
    "task": "Implement a system to verify if a given number is part of the Fibonacci sequence.",
    "code": "```ruby\ndef is_fibonacci?(n)\n  return true if n == 0 || n == 1\n  a, b = 0, 1\n  while b < n\n    a, b = b, a + b\n  end\n  b == n\nend\n\n# Example usage:\n# puts is_fibonacci?(5) # => true\n# puts is_fibonacci?(4) # => false\n```"
  },
  {
    "task": "Write a program to compare the elevation of two geographic locations.",
    "code": "```ruby\nlocation1_elevation = 1500\nlocation2_elevation = 1200\n\nif location1_elevation > location2_elevation\n  puts \"Location 1 is at a higher elevation than Location 2.\"\nelsif location1_elevation < location2_elevation\n  puts \"Location 1 is at a lower elevation than Location 2.\"\nelse\n  puts \"Location 1 and Location 2 are at the same elevation.\"\nend\n```"
  },
  {
    "task": "Create a function to determine if a given string is a valid JSON format.",
    "code": "```ruby\nrequire 'json'\n\ndef valid_json?(string)\n  JSON.parse(string)\n  true\nrescue JSON::ParserError\n  false\nend\n```"
  },
  {
    "task": "Build a utility that checks if a number is a factorial of any integer.",
    "code": "```ruby\ndef is_factorial?(number)\n  return false if number < 1\n  factorial = 1\n  i = 1\n  while factorial < number\n    i += 1\n    factorial *= i\n  end\n  factorial == number\nend\n```"
  },
  {
    "task": "Develop a feature to compare the widths of two ribbons and return the wider one.",
    "code": "```ruby\ndef wider_ribbon(width1, width2)\n  if width1 > width2\n    width1\n  elsif width2 > width1\n    width2\n  else\n    \"Both ribbons have the same width\"\n  end\nend\n```"
  },
  {
    "task": "Write a script to see if a word is present in a list of banned words.",
    "code": "```ruby\nbanned_words = [\"inappropriate\", \"offensive\", \"banned\", \"prohibited\"]\nword_to_check = \"offensive\"\n\nif banned_words.include?(word_to_check)\n  puts \"#{word_to_check} is a banned word.\"\nelse\n  puts \"#{word_to_check} is not a banned word.\"\nend\n```"
  },
  {
    "task": "Design a system to determine if a patient's temperature is in the normal range.",
    "code": "```ruby\ndef temperature_in_normal_range?(temperature)\n  normal_range = 36.5..37.5\n  normal_range.include?(temperature)\nend\n\n# Example usage:\ntemperature = 37.0\nputs temperature_in_normal_range?(temperature) # Outputs: true or false\n```"
  },
  {
    "task": "Create a program that checks if a given time is during business hours.",
    "code": "```ruby\ndef during_business_hours?(time)\n  business_start = Time.parse(\"09:00\")\n  business_end = Time.parse(\"17:00\")\n  time >= business_start && time <= business_end\nend\n\n# Example usage:\n# puts during_business_hours?(Time.parse(\"10:00\")) # true\n# puts during_business_hours?(Time.parse(\"18:00\")) # false\n```"
  },
  {
    "task": "Implement a function to see if a number is a triangular number.",
    "code": "```ruby\ndef is_triangular_number?(num)\n  return false if num < 0\n  n = ((-1 + Math.sqrt(1 + 8 * num)) / 2).to_i\n  n * (n + 1) / 2 == num\nend\n```"
  },
  {
    "task": "Write a feature to compare the number of vowels in two given strings.",
    "code": "```ruby\ndef vowel_count(str)\n  str.count('aeiouAEIOU')\nend\n\ndef compare_vowel_counts(str1, str2)\n  count1 = vowel_count(str1)\n  count2 = vowel_count(str2)\n\n  if count1 > count2\n    \"String 1 has more vowels\"\n  elsif count1 < count2\n    \"String 2 has more vowels\"\n  else\n    \"Both strings have the same number of vowels\"\n  end\nend\n```"
  }
]