[
  {
    "task": "Create a base class for a vehicle with methods for speed and fuel efficiency, then derive a car class that overrides these methods to provide specific implementations.",
    "code": "```ruby\nclass Vehicle\n  def speed\n    \"Generic speed\"\n  end\n\n  def fuel_efficiency\n    \"Generic fuel efficiency\"\n  end\nend\n\nclass Car < Vehicle\n  def speed\n    \"Car-specific speed\"\n  end\n\n  def fuel_efficiency\n    \"Car-specific fuel efficiency\"\n  end\nend\n```"
  },
  {
    "task": "Design a base class for a multimedia file with properties like duration and format, then extend it with a video class that includes resolution and frame rate.",
    "code": "```ruby\nclass MultimediaFile\n  attr_accessor :duration, :format\n\n  def initialize(duration, format)\n    @duration = duration\n    @format = format\n  end\nend\n\nclass Video < MultimediaFile\n  attr_accessor :resolution, :frame_rate\n\n  def initialize(duration, format, resolution, frame_rate)\n    super(duration, format)\n    @resolution = resolution\n    @frame_rate = frame_rate\n  end\nend\n```"
  },
  {
    "task": "Develop a superclass for bank accounts with methods for deposit and withdrawal, then create a savings account subclass that overrides the withdrawal method to incorporate interest deductions.",
    "code": "```ruby\nclass BankAccount\n  attr_accessor :balance\n\n  def initialize(balance = 0)\n    @balance = balance\n  end\n\n  def deposit(amount)\n    @balance += amount\n  end\n\n  def withdraw(amount)\n    if amount <= @balance\n      @balance -= amount\n    else\n      \"Insufficient funds\"\n    end\n  end\nend\n\nclass SavingsAccount < BankAccount\n  def withdraw(amount)\n    interest = amount * 0.02\n    total_amount = amount + interest\n    if total_amount <= @balance\n      @balance -= total_amount\n    else\n      \"Insufficient funds\"\n    end\n  end\nend\n```"
  },
  {
    "task": "Implement a base class for a geometric shape with methods to calculate area and perimeter, then create a rectangle subclass that provides specific calculations for these methods.",
    "code": "```ruby\nclass GeometricShape\n  def area\n    raise NotImplementedError, \"This method should be overridden by subclasses\"\n  end\n\n  def perimeter\n    raise NotImplementedError, \"This method should be overridden by subclasses\"\n  end\nend\n\nclass Rectangle < GeometricShape\n  def initialize(length, width)\n    @length = length\n    @width = width\n  end\n\n  def area\n    @length * @width\n  end\n\n  def perimeter\n    2 * (@length + @width)\n  end\nend\n```"
  },
  {
    "task": "Construct a parent class for employees with a method to calculate salary, then derive a manager class that overrides this method to include bonuses.",
    "code": "```ruby\nclass Employee\n  def calculate_salary(base_salary)\n    base_salary\n  end\nend\n\nclass Manager < Employee\n  def calculate_salary(base_salary, bonus)\n    base_salary + bonus\n  end\nend\n```"
  },
  {
    "task": "Set up a base class for a library item with properties like title and author, and extend it with a book subclass that adds a number of pages property.",
    "code": "```ruby\nclass LibraryItem\n  attr_accessor :title, :author\n\n  def initialize(title, author)\n    @title = title\n    @author = author\n  end\nend\n\nclass Book < LibraryItem\n  attr_accessor :number_of_pages\n\n  def initialize(title, author, number_of_pages)\n    super(title, author)\n    @number_of_pages = number_of_pages\n  end\nend\n```"
  },
  {
    "task": "Create a foundation class for an electronic device with a method to turn on and off, and derive a smartphone class that overrides the turn on method to require a passcode.",
    "code": "```ruby\nclass ElectronicDevice\n  def initialize\n    @is_on = false\n  end\n\n  def turn_on\n    @is_on = true\n    puts \"Device is now on.\"\n  end\n\n  def turn_off\n    @is_on = false\n    puts \"Device is now off.\"\n  end\nend\n\nclass Smartphone < ElectronicDevice\n  def initialize\n    super\n    @passcode = '1234'\n  end\n\n  def turn_on(input_passcode)\n    if input_passcode == @passcode\n      @is_on = true\n      puts \"Smartphone is now on.\"\n    else\n      puts \"Incorrect passcode.\"\n    end\n  end\nend\n```"
  },
  {
    "task": "Design a base class for an animal with a method to make a sound, then create a dog subclass that overrides this method to bark.",
    "code": "```ruby\nclass Animal\n  def make_sound\n    puts \"Some generic animal sound\"\n  end\nend\n\nclass Dog < Animal\n  def make_sound\n    puts \"Bark\"\n  end\nend\n```"
  },
  {
    "task": "Develop a superclass for meals with a method to calculate calories, then create a dessert subclass that overrides it to add extra sugar calories.",
    "code": "```ruby\nclass Meal\n  def initialize(calories)\n    @calories = calories\n  end\n\n  def calculate_calories\n    @calories\n  end\nend\n\nclass Dessert < Meal\n  def initialize(calories, sugar_calories)\n    super(calories)\n    @sugar_calories = sugar_calories\n  end\n\n  def calculate_calories\n    super + @sugar_calories\n  end\nend\n```"
  },
  {
    "task": "Implement a base class for a transportation mode with a method to calculate travel time, then extend it with a plane subclass that overrides the method to calculate based on speed.",
    "code": "```ruby\nclass TransportationMode\n  def calculate_travel_time(distance)\n    raise NotImplementedError, \"This method should be overridden in a subclass\"\n  end\nend\n\nclass Plane < TransportationMode\n  def initialize(speed)\n    @speed = speed\n  end\n  \n  def calculate_travel_time(distance)\n    distance.to_f / @speed\n  end\nend\n```"
  },
  {
    "task": "Construct a parent class for a musical instrument with a method to play sound, then derive a piano class that overrides the method to play specific notes.",
    "code": "```ruby\nclass MusicalInstrument\n  def play_sound\n    puts \"Playing sound from the instrument.\"\n  end\nend\n\nclass Piano < MusicalInstrument\n  def play_sound\n    puts \"Playing specific notes from the piano.\"\n  end\nend\n```"
  },
  {
    "task": "Set up a base class for a user account with a method to reset password, and extend it with an admin account subclass that overrides it to include security questions.",
    "code": "```ruby\nclass UserAccount\n  def reset_password\n    puts \"Resetting password for user account.\"\n  end\nend\n\nclass AdminAccount < UserAccount\n  def reset_password\n    puts \"Resetting password for admin account with security questions.\"\n  end\nend\n```"
  },
  {
    "task": "Create a foundational class for a beverage with properties like volume and temperature, and derive a coffee class that overrides the temperature property to be hot.",
    "code": "```ruby\nclass Beverage\n  attr_accessor :volume, :temperature\n\n  def initialize(volume, temperature)\n    @volume = volume\n    @temperature = temperature\n  end\nend\n\nclass Coffee < Beverage\n  def initialize(volume)\n    super(volume, 'hot')\n  end\nend\n```"
  },
  {
    "task": "Design a base class for a service appointment with a method to schedule time, then create a doctor appointment subclass that overrides this method to include consultation duration.",
    "code": "```ruby\nclass ServiceAppointment\n  def schedule_time(time)\n    \"Appointment scheduled at #{time}\"\n  end\nend\n\nclass DoctorAppointment < ServiceAppointment\n  def schedule_time(time, duration)\n    \"Doctor appointment scheduled at #{time} for #{duration} minutes\"\n  end\nend\n```"
  },
  {
    "task": "Develop a superclass for electronic gadgets with a method to calculate battery life, then extend it with a laptop class that overrides this method to consider usage patterns.",
    "code": "```ruby\nclass ElectronicGadget\n  def calculate_battery_life\n    # Default battery life calculation\n    \"Calculating battery life for a generic gadget\"\n  end\nend\n\nclass Laptop < ElectronicGadget\n  def calculate_battery_life\n    # Custom battery life calculation for a laptop considering usage patterns\n    \"Calculating battery life for a laptop considering usage patterns\"\n  end\nend\n```"
  },
  {
    "task": "Implement a base class for a website component with a method to render content, then create a blog post subclass that overrides this method to include author information.",
    "code": "```ruby\nclass WebsiteComponent\n  def render_content\n    \"Rendering content from WebsiteComponent\"\n  end\nend\n\nclass BlogPost < WebsiteComponent\n  def render_content\n    \"Rendering blog post content with author information\"\n  end\nend\n```"
  },
  {
    "task": "Construct a parent class for a recipe with methods for ingredients and instructions, then derive a cake recipe class that overrides these methods to add baking steps.",
    "code": "```ruby\nclass Recipe\n  def ingredients\n    \"List of ingredients\"\n  end\n\n  def instructions\n    \"General instructions\"\n  end\nend\n\nclass CakeRecipe < Recipe\n  def ingredients\n    super + \" + specific cake ingredients\"\n  end\n\n  def instructions\n    super + \" + specific cake baking instructions\"\n  end\nend\n\n# Example usage\ncake = CakeRecipe.new\nputs cake.ingredients\nputs cake.instructions\n```"
  },
  {
    "task": "Set up a base class for a plant with methods for sunlight and water needs, and extend it with a cactus subclass that overrides these methods to require less water.",
    "code": "```ruby\nclass Plant\n  def sunlight_needs\n    \"Requires full sunlight\"\n  end\n\n  def water_needs\n    \"Requires regular watering\"\n  end\nend\n\nclass Cactus < Plant\n  def water_needs\n    \"Requires less water\"\n  end\nend\n```"
  },
  {
    "task": "Create a foundational class for a building with properties like height and material, and derive a skyscraper class that overrides the height property to be significantly taller.",
    "code": "```ruby\nclass Building\n  attr_accessor :height, :material\n\n  def initialize(height, material)\n    @height = height\n    @material = material\n  end\nend\n\nclass Skyscraper < Building\n  def initialize(material)\n    super(1000, material) # Significantly taller height for skyscraper\n  end\nend\n```"
  },
  {
    "task": "Design a base class for a payment method with a method to process transactions, then create a credit card subclass that overrides this method to include credit limits.",
    "code": "```ruby\nclass PaymentMethod\n  def process_transaction(amount)\n    puts \"Processing transaction of amount: #{amount}\"\n  end\nend\n\nclass CreditCard < PaymentMethod\n  def initialize(credit_limit)\n    @credit_limit = credit_limit\n    @current_balance = 0\n  end\n\n  def process_transaction(amount)\n    if @current_balance + amount > @credit_limit\n      puts \"Transaction declined: exceeds credit limit.\"\n    else\n      @current_balance += amount\n      puts \"Transaction approved: new balance is #{@current_balance}\"\n    end\n  end\nend\n\n# Example usage\ncredit_card = CreditCard.new(1000)\ncredit_card.process_transaction(500)\ncredit_card.process_transaction(600)\n```"
  },
  {
    "task": "Develop a superclass for a computer program with methods for input and output, then extend it with a game subclass that overrides these methods to include player interactions.",
    "code": "```ruby\nclass Program\n  def input\n    puts \"Enter input:\"\n    gets.chomp\n  end\n\n  def output(message)\n    puts \"Output: #{message}\"\n  end\nend\n\nclass Game < Program\n  def input\n    puts \"Player, enter your move:\"\n    gets.chomp\n  end\n\n  def output(message)\n    puts \"Game says: #{message}\"\n  end\nend\n```"
  },
  {
    "task": "Implement a base class for a dining establishment with a method to calculate wait time, then create a fast food subclass that overrides this method to be shorter.",
    "code": "```ruby\nclass DiningEstablishment\n  def calculate_wait_time\n    30 # default wait time in minutes\n  end\nend\n\nclass FastFood < DiningEstablishment\n  def calculate_wait_time\n    10 # shorter wait time for fast food\n  end\nend\n```"
  },
  {
    "task": "Construct a parent class for a social media profile with methods for posting and liking, then derive a business profile class that overrides these methods to include promotions.",
    "code": "```ruby\nclass SocialMediaProfile\n  def post(content)\n    \"Posting content: #{content}\"\n  end\n\n  def like\n    \"Liking a post\"\n  end\nend\n\nclass BusinessProfile < SocialMediaProfile\n  def post(content)\n    \"Posting promotional content: #{content}\"\n  end\n\n  def like\n    \"Liking a post with promotional intent\"\n  end\nend\n```"
  },
  {
    "task": "Set up a base class for an educational course with methods for syllabus and grading, and extend it with an online course subclass that overrides these methods for remote learning.",
    "code": "```ruby\nclass EducationalCourse\n  def syllabus\n    \"General syllabus for the course.\"\n  end\n\n  def grading\n    \"Standard grading system.\"\n  end\nend\n\nclass OnlineCourse < EducationalCourse\n  def syllabus\n    \"Online course syllabus with virtual resources.\"\n  end\n\n  def grading\n    \"Grading system includes online quizzes and assignments.\"\n  end\nend\n```"
  },
  {
    "task": "Create a foundational class for a sports team with properties like team name and coach, and derive a football team class that overrides the coach property with a specific person.",
    "code": "```ruby\nclass SportsTeam\n  attr_accessor :team_name, :coach\n\n  def initialize(team_name, coach)\n    @team_name = team_name\n    @coach = coach\n  end\nend\n\nclass FootballTeam < SportsTeam\n  def initialize(team_name)\n    super(team_name, \"Specific Person\")\n  end\nend\n\n# Example usage:\n# football_team = FootballTeam.new(\"Tigers\")\n# puts football_team.team_name  # Outputs: Tigers\n# puts football_team.coach      # Outputs: Specific Person\n```"
  },
  {
    "task": "Design a base class for a document with methods for printing and saving, then create a PDF document subclass that overrides these methods to include encryption.",
    "code": "```ruby\nclass Document\n  def print\n    puts \"Printing document...\"\n  end\n\n  def save\n    puts \"Saving document...\"\n  end\nend\n\nclass PDFDocument < Document\n  def print\n    puts \"Printing PDF document with encryption...\"\n  end\n\n  def save\n    puts \"Saving PDF document with encryption...\"\n  end\nend\n\n# Example usage\ndoc = PDFDocument.new\ndoc.print\ndoc.save\n```"
  },
  {
    "task": "Develop a superclass for a retail product with methods for pricing and discount, then extend it with an electronics product class that overrides the discount method to offer more.",
    "code": "```ruby\nclass RetailProduct\n  attr_accessor :price\n\n  def initialize(price)\n    @price = price\n  end\n\n  def calculate_price\n    @price\n  end\n\n  def discount\n    0\n  end\nend\n\nclass ElectronicsProduct < RetailProduct\n  def discount\n    10\n  end\nend\n```"
  },
  {
    "task": "Implement a base class for a subscription service with a method to renew membership, then create a monthly subscription subclass that overrides this method for automatic renewal.",
    "code": "```ruby\nclass SubscriptionService\n  def renew_membership\n    puts \"Membership renewed manually.\"\n  end\nend\n\nclass MonthlySubscription < SubscriptionService\n  def renew_membership\n    puts \"Membership renewed automatically for the month.\"\n  end\nend\n\n# Example usage:\n# service = SubscriptionService.new\n# service.renew_membership\n# monthly = MonthlySubscription.new\n# monthly.renew_membership\n```"
  },
  {
    "task": "Construct a parent class for a language translator with a method to translate text, then derive a French translator class that overrides this method for French language specifics.",
    "code": "```ruby\nclass Translator\n  def translate(text)\n    \"Translating text: #{text}\"\n  end\nend\n\nclass FrenchTranslator < Translator\n  def translate(text)\n    \"Traduction du texte: #{text}\"\n  end\nend\n```"
  },
  {
    "task": "Set up a base class for a customer order with methods for placing and tracking, and extend it with a food order subclass that overrides tracking for delivery status.",
    "code": "```ruby\nclass CustomerOrder\n  def place_order\n    \"Order placed.\"\n  end\n\n  def track_order\n    \"Tracking order.\"\n  end\nend\n\nclass FoodOrder < CustomerOrder\n  def track_order\n    \"Tracking food delivery status.\"\n  end\nend\n```"
  },
  {
    "task": "Create a foundational class for an artwork with properties like artist and medium, and derive a painting class that overrides the medium property to be 'canvas'.",
    "code": "```ruby\nclass Artwork\n  attr_accessor :artist, :medium\n  \n  def initialize(artist, medium)\n    @artist = artist\n    @medium = medium\n  end\nend\n\nclass Painting < Artwork\n  def initialize(artist)\n    super(artist, 'canvas')\n  end\nend\n```"
  },
  {
    "task": "Design a base class for a computer network with methods for connectivity and bandwidth, then create a wireless network subclass that overrides these methods for signal strength.",
    "code": "```ruby\nclass ComputerNetwork\n  def connectivity\n    \"Checking connectivity...\"\n  end\n\n  def bandwidth\n    \"Measuring bandwidth...\"\n  end\nend\n\nclass WirelessNetwork < ComputerNetwork\n  def connectivity\n    \"Checking wireless signal connectivity...\"\n  end\n\n  def bandwidth\n    \"Measuring wireless signal strength...\"\n  end\nend\n```"
  },
  {
    "task": "Develop a superclass for a messaging app with methods for sending and receiving messages, then extend it with a secure messaging subclass that overrides these methods for encryption.",
    "code": "```ruby\nclass MessagingApp\n  def send_message(message)\n    puts \"Sending message: #{message}\"\n  end\n\n  def receive_message\n    puts \"Receiving message...\"\n  end\nend\n\nclass SecureMessagingApp < MessagingApp\n  def send_message(message)\n    encrypted_message = encrypt(message)\n    puts \"Sending encrypted message: #{encrypted_message}\"\n  end\n\n  def receive_message\n    encrypted_message = super()\n    decrypt(encrypted_message)\n  end\n\n  private\n\n  def encrypt(message)\n    \"encrypted_#{message}\"\n  end\n\n  def decrypt(encrypted_message)\n    encrypted_message.gsub(\"encrypted_\", \"\")\n  end\nend\n```"
  },
  {
    "task": "Implement a base class for a travel itinerary with methods for destinations and activities, then create a vacation itinerary subclass that overrides these methods for leisure activities.",
    "code": "```ruby\nclass TravelItinerary\n  def destinations\n    \"List of destinations\"\n  end\n\n  def activities\n    \"List of activities\"\n  end\nend\n\nclass VacationItinerary < TravelItinerary\n  def destinations\n    \"List of vacation destinations\"\n  end\n\n  def activities\n    \"List of leisure activities\"\n  end\nend\n```"
  },
  {
    "task": "Construct a parent class for a healthcare record with methods for patient data and treatment history, then derive a pediatric record class that overrides these methods for child-specific data.",
    "code": "```ruby\nclass HealthcareRecord\n  def patient_data\n    \"General patient data\"\n  end\n\n  def treatment_history\n    \"General treatment history\"\n  end\nend\n\nclass PediatricRecord < HealthcareRecord\n  def patient_data\n    \"Child-specific patient data\"\n  end\n\n  def treatment_history\n    \"Child-specific treatment history\"\n  end\nend\n```"
  },
  {
    "task": "Set up a base class for a culinary dish with methods for preparation and serving, and extend it with an appetizer subclass that overrides these methods for smaller portions.",
    "code": "```ruby\nclass CulinaryDish\n  def prepare\n    \"Preparing the dish.\"\n  end\n\n  def serve\n    \"Serving the dish.\"\n  end\nend\n\nclass Appetizer < CulinaryDish\n  def prepare\n    \"Preparing a smaller portion of the dish.\"\n  end\n\n  def serve\n    \"Serving a smaller portion of the dish.\"\n  end\nend\n```"
  },
  {
    "task": "Create a foundational class for a book collection with properties like genre and author, and derive a mystery collection class that overrides the genre property to be 'mystery'.",
    "code": "```ruby\nclass BookCollection\n  attr_accessor :genre, :author\n\n  def initialize(genre, author)\n    @genre = genre\n    @author = author\n  end\nend\n\nclass MysteryCollection < BookCollection\n  def initialize(author)\n    super('mystery', author)\n  end\nend\n```"
  },
  {
    "task": "Design a base class for a file storage system with methods for saving and deleting files, then create a cloud storage subclass that overrides these methods for remote access.",
    "code": "```ruby\nclass FileStorage\n  def save_file(file_name, content)\n    puts \"Saving #{file_name} locally.\"\n  end\n\n  def delete_file(file_name)\n    puts \"Deleting #{file_name} locally.\"\n  end\nend\n\nclass CloudStorage < FileStorage\n  def save_file(file_name, content)\n    puts \"Uploading #{file_name} to the cloud.\"\n  end\n\n  def delete_file(file_name)\n    puts \"Removing #{file_name} from the cloud.\"\n  end\nend\n```"
  },
  {
    "task": "Develop a superclass for a seasonal sale event with methods for discounts and promotions, then extend it with a summer sale subclass that overrides these methods for summer items.",
    "code": "```ruby\nclass SeasonalSaleEvent\n  def discount\n    \"Standard discount: 10%\"\n  end\n\n  def promotion\n    \"Standard promotion: Buy 1 Get 1 Free\"\n  end\nend\n\nclass SummerSale < SeasonalSaleEvent\n  def discount\n    \"Summer discount: 20%\"\n  end\n\n  def promotion\n    \"Summer promotion: Buy 2 Get 1 Free\"\n  end\nend\n```"
  },
  {
    "task": "Implement a base class for a personal budget with methods for income and expenses, then create a student budget subclass that overrides these methods for tuition and fees.",
    "code": "```ruby\nclass PersonalBudget\n  def add_income(amount)\n    @income ||= 0\n    @income += amount\n  end\n\n  def add_expense(amount)\n    @expenses ||= 0\n    @expenses += amount\n  end\n\n  def income\n    @income || 0\n  end\n\n  def expenses\n    @expenses || 0\n  end\nend\n\nclass StudentBudget < PersonalBudget\n  def add_income(amount)\n    @income ||= 0\n    @income += amount\n    puts \"Income added: $#{amount}\"\n  end\n\n  def add_expense(amount)\n    @expenses ||= 0\n    @expenses += amount\n    puts \"Expense added for tuition or fees: $#{amount}\"\n  end\nend\n```"
  },
  {
    "task": "Construct a parent class for a fitness routine with methods for exercises and duration, then derive a yoga routine class that overrides these methods for flexibility exercises.",
    "code": "```ruby\nclass FitnessRoutine\n  def exercises\n    \"General exercises\"\n  end\n\n  def duration\n    \"Duration for general exercises\"\n  end\nend\n\nclass YogaRoutine < FitnessRoutine\n  def exercises\n    \"Flexibility exercises\"\n  end\n\n  def duration\n    \"Duration for flexibility exercises\"\n  end\nend\n```"
  },
  {
    "task": "Set up a base class for a transportation ticket with methods for pricing and validity, and extend it with an airline ticket subclass that overrides these methods for baggage allowance.",
    "code": "```ruby\nclass TransportationTicket\n  def pricing\n    \"Base price calculation\"\n  end\n\n  def validity\n    \"Base validity check\"\n  end\nend\n\nclass AirlineTicket < TransportationTicket\n  def pricing\n    \"Airline specific price calculation\"\n  end\n\n  def validity\n    \"Airline specific validity check\"\n  end\n\n  def baggage_allowance\n    \"Airline baggage allowance details\"\n  end\nend\n```"
  },
  {
    "task": "Create a foundational class for a digital photo album with properties like album name and date, and derive a vacation album class that overrides the date property to be specific.",
    "code": "```ruby\nclass PhotoAlbum\n  attr_accessor :album_name, :date\n\n  def initialize(album_name, date)\n    @album_name = album_name\n    @date = date\n  end\nend\n\nclass VacationAlbum < PhotoAlbum\n  def initialize(album_name, vacation_date)\n    super(album_name, vacation_date)\n  end\nend\n```"
  },
  {
    "task": "Design a base class for a home appliance with methods for power usage and warranty, then create a refrigerator subclass that overrides these methods for energy efficiency.",
    "code": "```ruby\nclass HomeAppliance\n  def power_usage\n    \"Standard power usage\"\n  end\n\n  def warranty\n    \"Standard warranty\"\n  end\nend\n\nclass Refrigerator < HomeAppliance\n  def power_usage\n    \"Enhanced energy-efficient power usage\"\n  end\n\n  def warranty\n    \"Extended warranty for refrigerators\"\n  end\nend\n```"
  },
  {
    "task": "Develop a superclass for a software update with methods for versioning and patch notes, then extend it with a security update subclass that overrides these methods for vulnerabilities.",
    "code": "```ruby\nclass SoftwareUpdate\n  attr_accessor :version, :patch_notes\n\n  def initialize(version, patch_notes)\n    @version = version\n    @patch_notes = patch_notes\n  end\n\n  def display_version\n    \"Version: #{@version}\"\n  end\n\n  def display_patch_notes\n    \"Patch Notes: #{@patch_notes}\"\n  end\nend\n\nclass SecurityUpdate < SoftwareUpdate\n  attr_accessor :vulnerabilities\n\n  def initialize(version, patch_notes, vulnerabilities)\n    super(version, patch_notes)\n    @vulnerabilities = vulnerabilities\n  end\n\n  def display_version\n    \"Security Update Version: #{@version}\"\n  end\n\n  def display_patch_notes\n    \"Security Patch Notes: #{@patch_notes}. Vulnerabilities: #{@vulnerabilities}\"\n  end\nend\n```"
  },
  {
    "task": "Implement a base class for a musical performance with methods for rehearsal and execution, then create a concert performance subclass that overrides these methods for live audience.",
    "code": "```ruby\nclass MusicalPerformance\n  def rehearsal\n    puts \"Rehearsing the musical performance.\"\n  end\n\n  def execute\n    puts \"Executing the musical performance.\"\n  end\nend\n\nclass ConcertPerformance < MusicalPerformance\n  def rehearsal\n    puts \"Rehearsing the concert performance for a live audience.\"\n  end\n\n  def execute\n    puts \"Executing the concert performance for a live audience.\"\n  end\nend\n```"
  },
  {
    "task": "Construct a parent class for an academic degree with methods for course requirements and credits, then derive a master's degree class that overrides these methods for advanced studies.",
    "code": "```ruby\nclass AcademicDegree\n  def course_requirements\n    \"General course requirements for a degree.\"\n  end\n\n  def credits\n    \"General credit requirements for a degree.\"\n  end\nend\n\nclass MastersDegree < AcademicDegree\n  def course_requirements\n    \"Advanced course requirements for a master's degree.\"\n  end\n\n  def credits\n    \"Advanced credit requirements for a master's degree.\"\n  end\nend\n```"
  },
  {
    "task": "Set up a base class for a weather forecast with methods for temperature and conditions, and extend it with a winter forecast subclass that overrides these methods for snow conditions.",
    "code": "```ruby\nclass WeatherForecast\n  def temperature\n    \"Generic temperature\"\n  end\n\n  def conditions\n    \"Generic conditions\"\n  end\nend\n\nclass WinterForecast < WeatherForecast\n  def temperature\n    \"Cold temperature\"\n  end\n\n  def conditions\n    \"Snowy conditions\"\n  end\nend\n```"
  },
  {
    "task": "Create a foundational class for a personal diary with properties like date and entries, and derive a travel diary class that overrides the date property with travel dates.",
    "code": "```ruby\nclass PersonalDiary\n  attr_accessor :date, :entries\n\n  def initialize(date, entries)\n    @date = date\n    @entries = entries\n  end\nend\n\nclass TravelDiary < PersonalDiary\n  def initialize(travel_date, entries)\n    @date = travel_date\n    @entries = entries\n  end\nend\n```"
  },
  {
    "task": "Design a base class for a pet with methods for feeding and grooming, then create a cat subclass that overrides these methods with specific food preferences.",
    "code": "```ruby\nclass Pet\n  def feed\n    \"Feeding the pet.\"\n  end\n\n  def groom\n    \"Grooming the pet.\"\n  end\nend\n\nclass Cat < Pet\n  def feed\n    \"Feeding the cat with fish.\"\n  end\n\n  def groom\n    \"Brushing the cat's fur carefully.\"\n  end\nend\n```"
  },
  {
    "task": "Develop a superclass for a software library with methods for installation and updates, then extend it with a graphics library subclass that overrides these methods for rendering capabilities.",
    "code": "```ruby\nclass SoftwareLibrary\n  def install\n    puts \"Installing software library...\"\n  end\n\n  def update\n    puts \"Updating software library...\"\n  end\nend\n\nclass GraphicsLibrary < SoftwareLibrary\n  def install\n    puts \"Installing graphics library with rendering capabilities...\"\n  end\n\n  def update\n    puts \"Updating graphics library with rendering capabilities...\"\n  end\nend\n\n# Example usage\nsoftware = SoftwareLibrary.new\nsoftware.install\nsoftware.update\n\ngraphics = GraphicsLibrary.new\ngraphics.install\ngraphics.update\n```"
  },
  {
    "task": "Implement a base class for a political campaign with methods for fundraising and events, then create a presidential campaign subclass that overrides these methods for national scale.",
    "code": "```ruby\nclass PoliticalCampaign\n  def fundraising\n    \"Raising funds for the campaign.\"\n  end\n\n  def events\n    \"Organizing campaign events.\"\n  end\nend\n\nclass PresidentialCampaign < PoliticalCampaign\n  def fundraising\n    \"Raising funds on a national scale for the presidential campaign.\"\n  end\n\n  def events\n    \"Organizing nationwide campaign events.\"\n  end\nend\n```"
  },
  {
    "task": "Construct a parent class for an automotive part with methods for durability and replacement, then derive an engine part class that overrides these methods for performance.",
    "code": "```ruby\nclass AutomotivePart\n  def durability\n    \"Standard durability\"\n  end\n\n  def replacement\n    \"Standard replacement procedure\"\n  end\nend\n\nclass EnginePart < AutomotivePart\n  def durability\n    \"Enhanced durability for performance\"\n  end\n\n  def replacement\n    \"Specialized replacement procedure for engine parts\"\n  end\nend\n```"
  },
  {
    "task": "Set up a base class for an online tutorial with methods for lessons and quizzes, and extend it with a coding tutorial subclass that overrides these methods for interactive exercises.",
    "code": "```ruby\nclass OnlineTutorial\n  def lessons\n    \"General lessons content.\"\n  end\n\n  def quizzes\n    \"General quizzes content.\"\n  end\nend\n\nclass CodingTutorial < OnlineTutorial\n  def lessons\n    \"Interactive coding lessons content.\"\n  end\n\n  def quizzes\n    \"Interactive coding exercises.\"\n  end\nend\n```"
  },
  {
    "task": "Create a foundational class for a personal collection with properties like item type and value, and derive a stamp collection class that overrides the item type property to be 'stamps'.",
    "code": "```ruby\nclass PersonalCollection\n  attr_accessor :item_type, :value\n\n  def initialize(item_type, value)\n    @item_type = item_type\n    @value = value\n  end\nend\n\nclass StampCollection < PersonalCollection\n  def initialize(value)\n    super('stamps', value)\n  end\nend\n```"
  },
  {
    "task": "Design a base class for a video game character with methods for health and abilities, then create a warrior character subclass that overrides these methods for strength.",
    "code": "```ruby\nclass Character\n  def health\n    \"Generic health\"\n  end\n\n  def abilities\n    \"Generic abilities\"\n  end\nend\n\nclass Warrior < Character\n  def health\n    \"High health\"\n  end\n\n  def abilities\n    \"High strength\"\n  end\nend\n```"
  },
  {
    "task": "Develop a superclass for an event planner with methods for scheduling and budgeting, then extend it with a wedding planner subclass that overrides these methods for ceremony details.",
    "code": "```ruby\nclass EventPlanner\n  def schedule\n    \"Scheduling the event...\"\n  end\n\n  def budget\n    \"Setting the budget for the event...\"\n  end\nend\n\nclass WeddingPlanner < EventPlanner\n  def schedule\n    \"Scheduling the wedding ceremony...\"\n  end\n\n  def budget\n    \"Setting the budget for the wedding ceremony...\"\n  end\nend\n```"
  },
  {
    "task": "Implement a base class for a software feature with methods for functionality and user feedback, then create a beta feature subclass that overrides these methods for testing.",
    "code": "```ruby\nclass Feature\n  def functionality\n    \"Base functionality\"\n  end\n\n  def user_feedback\n    \"Base user feedback\"\n  end\nend\n\nclass BetaFeature < Feature\n  def functionality\n    \"Beta functionality for testing\"\n  end\n\n  def user_feedback\n    \"Beta user feedback for testing\"\n  end\nend\n```"
  },
  {
    "task": "Construct a parent class for a gardening tool with methods for usage and maintenance, then derive a lawn mower class that overrides these methods for grass cutting.",
    "code": "```ruby\nclass GardeningTool\n  def usage\n    \"Use the tool as directed.\"\n  end\n\n  def maintenance\n    \"Regular maintenance required.\"\n  end\nend\n\nclass LawnMower < GardeningTool\n  def usage\n    \"Use the lawn mower to cut grass.\"\n  end\n\n  def maintenance\n    \"Sharpen the blades and check the engine regularly.\"\n  end\nend\n```"
  },
  {
    "task": "Set up a base class for a household chore with methods for time and effort, and extend it with a cleaning chore subclass that overrides these methods for dirt removal.",
    "code": "```ruby\nclass HouseholdChore\n  def time\n    \"Time required for chore\"\n  end\n\n  def effort\n    \"Effort required for chore\"\n  end\nend\n\nclass CleaningChore < HouseholdChore\n  def time\n    \"Time required for dirt removal\"\n  end\n\n  def effort\n    \"Effort required for dirt removal\"\n  end\nend\n```"
  },
  {
    "task": "Create a foundational class for a personal project with properties like name and deadline, and derive a coding project class that overrides the deadline property for milestones.",
    "code": "```ruby\nclass Project\n  attr_accessor :name, :deadline\n\n  def initialize(name, deadline)\n    @name = name\n    @deadline = deadline\n  end\nend\n\nclass CodingProject < Project\n  attr_accessor :milestones\n\n  def initialize(name, milestones)\n    super(name, nil)\n    @milestones = milestones\n  end\n\n  def deadline\n    @milestones.last[:deadline] if @milestones.any?\n  end\nend\n```"
  },
  {
    "task": "Design a base class for a holiday celebration with methods for traditions and activities, then create a Christmas celebration subclass that overrides these methods for gift exchange.",
    "code": "```ruby\nclass HolidayCelebration\n  def traditions\n    \"General holiday traditions\"\n  end\n\n  def activities\n    \"General holiday activities\"\n  end\nend\n\nclass ChristmasCelebration < HolidayCelebration\n  def traditions\n    \"Christmas traditions like decorating the tree\"\n  end\n\n  def activities\n    \"Gift exchange and singing carols\"\n  end\nend\n```"
  },
  {
    "task": "Develop a superclass for a customer feedback system with methods for collecting and analyzing, then extend it with a product feedback subclass that overrides these methods for reviews.",
    "code": "```ruby\nclass FeedbackSystem\n  def collect_feedback\n    \"Collecting general feedback\"\n  end\n\n  def analyze_feedback\n    \"Analyzing general feedback\"\n  end\nend\n\nclass ProductFeedback < FeedbackSystem\n  def collect_feedback\n    \"Collecting product-specific feedback\"\n  end\n\n  def analyze_feedback\n    \"Analyzing product-specific feedback\"\n  end\nend\n```"
  },
  {
    "task": "Implement a base class for a civic service with methods for public engagement and policy, then create a community service subclass that overrides these methods for local impact.",
    "code": "```ruby\nclass CivicService\n  def public_engagement\n    \"Engaging with the general public.\"\n  end\n\n  def policy\n    \"Implementing general policies.\"\n  end\nend\n\nclass CommunityService < CivicService\n  def public_engagement\n    \"Engaging with the local community.\"\n  end\n\n  def policy\n    \"Implementing local community policies.\"\n  end\nend\n```"
  },
  {
    "task": "Construct a parent class for a culinary ingredient with methods for flavor and preparation, then derive a spice ingredient class that overrides these methods for seasoning.",
    "code": "```ruby\nclass Ingredient\n  def flavor\n    \"Generic flavor\"\n  end\n\n  def preparation\n    \"Generic preparation\"\n  end\nend\n\nclass Spice < Ingredient\n  def flavor\n    \"Spicy flavor\"\n  end\n\n  def preparation\n    \"Used for seasoning\"\n  end\nend\n```"
  },
  {
    "task": "Set up a base class for a scientific experiment with methods for hypothesis and testing, and extend it with a chemistry experiment subclass that overrides these methods for reactions.",
    "code": "```ruby\nclass ScientificExperiment\n  def hypothesis\n    \"General hypothesis for a scientific experiment.\"\n  end\n\n  def testing\n    \"General testing procedure for a scientific experiment.\"\n  end\nend\n\nclass ChemistryExperiment < ScientificExperiment\n  def hypothesis\n    \"Hypothesis specific to a chemistry reaction experiment.\"\n  end\n\n  def testing\n    \"Testing procedure specific to a chemistry reaction experiment.\"\n  end\nend\n```"
  },
  {
    "task": "Create a foundational class for an inventory system with properties like item ID and quantity, and derive a warehouse inventory class that overrides the quantity property for bulk storage.",
    "code": "```ruby\nclass InventoryItem\n  attr_accessor :item_id, :quantity\n\n  def initialize(item_id, quantity)\n    @item_id = item_id\n    @quantity = quantity\n  end\nend\n\nclass WarehouseInventory < InventoryItem\n  def initialize(item_id, bulk_quantity)\n    super(item_id, bulk_quantity)\n  end\n\n  def quantity\n    \"Bulk Storage: #{@quantity}\"\n  end\nend\n```"
  },
  {
    "task": "Design a base class for a travel agency with methods for itinerary and bookings, then create a luxury travel subclass that overrides these methods for premium services.",
    "code": "```ruby\nclass TravelAgency\n  def itinerary\n    \"Standard itinerary.\"\n  end\n\n  def bookings\n    \"Standard bookings.\"\n  end\nend\n\nclass LuxuryTravel < TravelAgency\n  def itinerary\n    \"Luxury itinerary with premium options.\"\n  end\n\n  def bookings\n    \"Luxury bookings with exclusive services.\"\n  end\nend\n```"
  },
  {
    "task": "Develop a superclass for an educational tool with methods for teaching and assessment, then extend it with a math tool subclass that overrides these methods for problem-solving.",
    "code": "```ruby\nclass EducationalTool\n  def teach\n    puts \"Teaching a subject.\"\n  end\n\n  def assess\n    puts \"Assessing student knowledge.\"\n  end\nend\n\nclass MathTool < EducationalTool\n  def teach\n    puts \"Teaching math concepts.\"\n  end\n\n  def assess\n    puts \"Assessing math problem-solving skills.\"\n  end\nend\n```"
  },
  {
    "task": "Implement a base class for a community project with methods for planning and execution, then create a park renovation subclass that overrides these methods for landscaping.",
    "code": "```ruby\nclass CommunityProject\n  def planning\n    \"Planning the community project.\"\n  end\n\n  def execution\n    \"Executing the community project.\"\n  end\nend\n\nclass ParkRenovation < CommunityProject\n  def planning\n    \"Planning the park renovation with a focus on landscaping.\"\n  end\n\n  def execution\n    \"Executing the park renovation with landscaping activities.\"\n  end\nend\n```"
  },
  {
    "task": "Construct a parent class for a digital marketing strategy with methods for targeting and engagement, then derive a social media strategy class that overrides these methods for platforms.",
    "code": "```ruby\nclass DigitalMarketingStrategy\n  def targeting\n    \"General digital marketing targeting strategy\"\n  end\n\n  def engagement\n    \"General digital marketing engagement strategy\"\n  end\nend\n\nclass SocialMediaStrategy < DigitalMarketingStrategy\n  def targeting\n    \"Specific social media targeting strategy\"\n  end\n\n  def engagement\n    \"Specific social media engagement strategy\"\n  end\nend\n```"
  },
  {
    "task": "Set up a base class for a scientific publication with methods for research and review, and extend it with a journal article subclass that overrides these methods for peer review.",
    "code": "```ruby\nclass ScientificPublication\n  def research\n    \"Conducting scientific research\"\n  end\n\n  def review\n    \"Reviewing the scientific publication\"\n  end\nend\n\nclass JournalArticle < ScientificPublication\n  def research\n    \"Conducting scientific research for a journal article\"\n  end\n\n  def review\n    \"Peer reviewing the journal article\"\n  end\nend\n```"
  },
  {
    "task": "Create a foundational class for a software module with properties like name and dependencies, and derive a user interface module class that overrides the dependencies property for UI libraries.",
    "code": "```ruby\nclass SoftwareModule\n  attr_accessor :name, :dependencies\n\n  def initialize(name, dependencies)\n    @name = name\n    @dependencies = dependencies\n  end\nend\n\nclass UserInterfaceModule < SoftwareModule\n  def initialize(name, ui_dependencies)\n    super(name, ui_dependencies)\n  end\n\n  def dependencies\n    ['UI Library 1', 'UI Library 2']\n  end\nend\n```"
  },
  {
    "task": "Design a base class for a fashion line with methods for design and production, then create a summer collection subclass that overrides these methods for seasonal trends.",
    "code": "```ruby\nclass FashionLine\n  def design\n    \"Designing standard fashion line.\"\n  end\n\n  def production\n    \"Producing standard items.\"\n  end\nend\n\nclass SummerCollection < FashionLine\n  def design\n    \"Designing summer collection with bright colors and light fabrics.\"\n  end\n\n  def production\n    \"Producing summer collection items with focus on seasonal trends.\"\n  end\nend\n```"
  },
  {
    "task": "Develop a superclass for a family tree with methods for ancestry and descendants, then extend it with a royal lineage subclass that overrides these methods for historical accuracy.",
    "code": "```ruby\nclass FamilyTree\n  def ancestry\n    \"General family ancestry.\"\n  end\n\n  def descendants\n    \"General family descendants.\"\n  end\nend\n\nclass RoyalLineage < FamilyTree\n  def ancestry\n    \"Historically accurate royal ancestry.\"\n  end\n\n  def descendants\n    \"Historically accurate royal descendants.\"\n  end\nend\n```"
  },
  {
    "task": "Implement a base class for a musical score with methods for composition and arrangement, then create a symphony subclass that overrides these methods for orchestration.",
    "code": "```ruby\nclass MusicalScore\n  def composition\n    \"Composing a musical piece.\"\n  end\n\n  def arrangement\n    \"Arranging the musical score.\"\n  end\nend\n\nclass Symphony < MusicalScore\n  def composition\n    \"Composing a symphony with orchestration.\"\n  end\n\n  def arrangement\n    \"Arranging the symphony for full orchestra.\"\n  end\nend\n```"
  },
  {
    "task": "Construct a parent class for a historical record with methods for events and dates, then derive a war history class that overrides these methods for battles.",
    "code": "```ruby\nclass HistoricalRecord\n  def event\n    \"General historical event\"\n  end\n\n  def date\n    \"General date\"\n  end\nend\n\nclass WarHistory < HistoricalRecord\n  def event\n    \"Battle event\"\n  end\n\n  def date\n    \"Battle date\"\n  end\nend\n```"
  },
  {
    "task": "Set up a base class for a pet adoption service with methods for application and approval, and extend it with a dog adoption subclass that overrides these methods for breed compatibility.",
    "code": "```ruby\nclass PetAdoptionService\n  def apply(application)\n    \"Processing application for #{application}\"\n  end\n\n  def approve(application)\n    \"Approving application for #{application}\"\n  end\nend\n\nclass DogAdoptionService < PetAdoptionService\n  def apply(application, breed)\n    \"Processing application for #{application} with breed compatibility check for #{breed}\"\n  end\n\n  def approve(application, breed)\n    \"Approving application for #{application} with breed compatibility check for #{breed}\"\n  end\nend\n\n# Example usage:\n# pet_service = PetAdoptionService.new\n# dog_service = DogAdoptionService.new\n# puts pet_service.apply(\"John Doe\")\n# puts dog_service.apply(\"Jane Doe\", \"Labrador\")\n```"
  },
  {
    "task": "Create a foundational class for a financial report with properties like fiscal year and summary, and derive an annual report class that overrides the fiscal year property for yearly data.",
    "code": "```ruby\nclass FinancialReport\n  attr_accessor :fiscal_year, :summary\n  \n  def initialize(fiscal_year, summary)\n    @fiscal_year = fiscal_year\n    @summary = summary\n  end\nend\n\nclass AnnualReport < FinancialReport\n  attr_accessor :fiscal_year\n  \n  def initialize(fiscal_year, summary)\n    super\n    @fiscal_year = \"Yearly: #{fiscal_year}\"\n  end\nend\n```"
  },
  {
    "task": "Design a base class for a movie franchise with methods for casting and production, then create a sequel subclass that overrides these methods for continuity.",
    "code": "```ruby\nclass Movie\n  def casting\n    puts \"Casting for the original movie.\"\n  end\n  \n  def production\n    puts \"Production details for the original movie.\"\n  end\nend\n\nclass Sequel < Movie\n  def casting\n    puts \"Casting for the sequel with returning characters.\"\n  end\n  \n  def production\n    puts \"Production details for the sequel with continuity.\"\n  end\nend\n```"
  },
  {
    "task": "Develop a superclass for a real estate listing with methods for pricing and description, then extend it with a luxury listing subclass that overrides these methods for high-end features.",
    "code": "```ruby\nclass RealEstateListing\n  def initialize(price, description)\n    @price = price\n    @description = description\n  end\n\n  def pricing\n    \"Price: $#{@price}\"\n  end\n\n  def description\n    \"Description: #{@description}\"\n  end\nend\n\nclass LuxuryListing < RealEstateListing\n  def pricing\n    \"Luxury Price: $#{@price * 2}\"\n  end\n\n  def description\n    \"Luxury Description: #{@description} with high-end features.\"\n  end\nend\n```"
  },
  {
    "task": "Implement a base class for a mobile app with methods for user interface and performance, then create a gaming app subclass that overrides these methods for graphics and speed.",
    "code": "```ruby\nclass MobileApp\n  def user_interface\n    \"Standard user interface\"\n  end\n\n  def performance\n    \"Standard performance\"\n  end\nend\n\nclass GamingApp < MobileApp\n  def user_interface\n    \"High-performance graphics user interface\"\n  end\n\n  def performance\n    \"Optimized for speed\"\n  end\nend\n```"
  },
  {
    "task": "Construct a parent class for a corporate policy with methods for compliance and enforcement, then derive an HR policy class that overrides these methods for employee relations.",
    "code": "```ruby\nclass CorporatePolicy\n  def compliance\n    \"Corporate compliance guidelines\"\n  end\n\n  def enforcement\n    \"General enforcement procedures\"\n  end\nend\n\nclass HRPolicy < CorporatePolicy\n  def compliance\n    \"Employee relations compliance guidelines\"\n  end\n\n  def enforcement\n    \"HR-specific enforcement procedures\"\n  end\nend\n```"
  },
  {
    "task": "Set up a base class for a scientific calculator with methods for basic operations and advanced functions, and extend it with a graphing calculator subclass that overrides these methods for plotting.",
    "code": "```ruby\nclass ScientificCalculator\n  def add(a, b)\n    a + b\n  end\n\n  def subtract(a, b)\n    a - b\n  end\n\n  def multiply(a, b)\n    a * b\n  end\n\n  def divide(a, b)\n    return 'Error' if b == 0\n    a.to_f / b\n  end\n\n  def power(base, exponent)\n    base ** exponent\n  end\n\n  def sqrt(number)\n    Math.sqrt(number)\n  end\nend\n\nclass GraphingCalculator < ScientificCalculator\n  def add(a, b)\n    \"Plotting addition of #{a} and #{b}\"\n  end\n\n  def subtract(a, b)\n    \"Plotting subtraction of #{a} and #{b}\"\n  end\n\n  def multiply(a, b)\n    \"Plotting multiplication of #{a} and #{b}\"\n  end\n\n  def divide(a, b)\n    return 'Error' if b == 0\n    \"Plotting division of #{a} and #{b}\"\n  end\n\n  def power(base, exponent)\n    \"Plotting power of #{base} to #{exponent}\"\n  end\n\n  def sqrt(number)\n    \"Plotting square root of #{number}\"\n  end\nend\n```"
  },
  {
    "task": "Create a foundational class for a children's book with properties like age group and illustrations, and derive a picture book class that overrides the illustrations property to be more prominent.",
    "code": "```ruby\nclass ChildrensBook\n  attr_accessor :age_group, :illustrations\n\n  def initialize(age_group, illustrations)\n    @age_group = age_group\n    @illustrations = illustrations\n  end\nend\n\nclass PictureBook < ChildrensBook\n  def initialize(age_group, illustrations)\n    super\n    @illustrations = \"#{illustrations} (Prominent)\"\n  end\nend\n```"
  },
  {
    "task": "Design a base class for a cooking class with methods for ingredients and techniques, then create a baking class subclass that overrides these methods for dough preparation.",
    "code": "```ruby\nclass CookingClass\n  def ingredients\n    \"Generic ingredients\"\n  end\n\n  def techniques\n    \"Generic techniques\"\n  end\nend\n\nclass BakingClass < CookingClass\n  def ingredients\n    \"Flour, water, yeast\"\n  end\n\n  def techniques\n    \"Kneading, proofing, baking\"\n  end\nend\n```"
  },
  {
    "task": "Develop a superclass for a public transportation system with methods for routes and schedules, then extend it with a metro system subclass that overrides these methods for urban areas.",
    "code": "```ruby\nclass PublicTransportation\n  def routes\n    \"General public transportation routes.\"\n  end\n\n  def schedules\n    \"General public transportation schedules.\"\n  end\nend\n\nclass MetroSystem < PublicTransportation\n  def routes\n    \"Urban metro system routes.\"\n  end\n\n  def schedules\n    \"Urban metro system schedules.\"\n  end\nend\n```"
  },
  {
    "task": "Implement a base class for a music store inventory with methods for stock and sales, then create a vinyl record subclass that overrides these methods for collectible items.",
    "code": "```ruby\nclass MusicStoreInventory\n  def initialize(stock, sales)\n    @stock = stock\n    @sales = sales\n  end\n  \n  def stock\n    @stock\n  end\n\n  def sales\n    @sales\n  end\nend\n\nclass VinylRecord < MusicStoreInventory\n  def stock\n    \"Collectible Stock: #{@stock}\"\n  end\n\n  def sales\n    \"Collectible Sales: #{@sales}\"\n  end\nend\n```"
  },
  {
    "task": "Construct a parent class for a legal contract with methods for terms and conditions, then derive a rental agreement class that overrides these methods for tenant rights.",
    "code": "```ruby\nclass LegalContract\n  def terms\n    \"Standard terms of the contract.\"\n  end\n\n  def conditions\n    \"Standard conditions of the contract.\"\n  end\nend\n\nclass RentalAgreement < LegalContract\n  def terms\n    \"Terms specific to rental agreements.\"\n  end\n\n  def conditions\n    \"Conditions specific to tenant rights.\"\n  end\nend\n```"
  },
  {
    "task": "Set up a base class for a journalism piece with methods for reporting and editing, and extend it with an investigative article subclass that overrides these methods for in-depth analysis.",
    "code": "```ruby\nclass JournalismPiece\n  def report\n    \"Standard reporting\"\n  end\n\n  def edit\n    \"Standard editing\"\n  end\nend\n\nclass InvestigativeArticle < JournalismPiece\n  def report\n    \"In-depth investigative reporting\"\n  end\n\n  def edit\n    \"In-depth investigative editing\"\n  end\nend\n```"
  },
  {
    "task": "Create a foundational class for a wildlife reserve with properties like area and species, and derive a bird sanctuary class that overrides the species property for avians.",
    "code": "```ruby\nclass WildlifeReserve\n  attr_accessor :area, :species\n\n  def initialize(area, species)\n    @area = area\n    @species = species\n  end\nend\n\nclass BirdSanctuary < WildlifeReserve\n  def initialize(area)\n    super(area, 'Avians')\n  end\nend\n```"
  },
  {
    "task": "Design a base class for a subscription box service with methods for curation and delivery, then create a gourmet food box subclass that overrides these methods for artisanal products.",
    "code": "```ruby\nclass SubscriptionBoxService\n  def curation\n    \"Curating a selection of products.\"\n  end\n\n  def delivery\n    \"Delivering the box to the customer.\"\n  end\nend\n\nclass GourmetFoodBox < SubscriptionBoxService\n  def curation\n    \"Curating a selection of artisanal gourmet foods.\"\n  end\n\n  def delivery\n    \"Delivering the gourmet food box to the customer.\"\n  end\nend\n```"
  },
  {
    "task": "Develop a superclass for a fitness app with methods for tracking and motivation, then extend it with a running app subclass that overrides these methods for pace and distance.",
    "code": "```ruby\nclass FitnessApp\n  def track\n    \"Tracking your fitness progress.\"\n  end\n\n  def motivate\n    \"Keep going, you're doing great!\"\n  end\nend\n\nclass RunningApp < FitnessApp\n  def track\n    \"Tracking your running pace and distance.\"\n  end\n\n  def motivate\n    \"Push harder! You're almost at your goal pace!\"\n  end\nend\n```"
  },
  {
    "task": "Implement a base class for a digital portfolio with methods for showcasing and updating, then create an artist portfolio subclass that overrides these methods for galleries.",
    "code": "```ruby\nclass DigitalPortfolio\n  def showcase\n    \"Showcasing digital portfolio.\"\n  end\n\n  def update\n    \"Updating digital portfolio.\"\n  end\nend\n\nclass ArtistPortfolio < DigitalPortfolio\n  def showcase\n    \"Showcasing artist portfolio galleries.\"\n  end\n\n  def update\n    \"Updating artist portfolio galleries.\"\n  end\nend\n```"
  },
  {
    "task": "Construct a parent class for a gaming console with methods for performance and compatibility, then derive a next-gen console class that overrides these methods for new features.",
    "code": "```ruby\nclass GamingConsole\n  def performance\n    \"Standard performance\"\n  end\n\n  def compatibility\n    \"Compatible with standard games\"\n  end\nend\n\nclass NextGenConsole < GamingConsole\n  def performance\n    \"Enhanced performance with next-gen capabilities\"\n  end\n\n  def compatibility\n    \"Compatible with next-gen games and previous generation\"\n  end\nend\n```"
  },
  {
    "task": "Set up a base class for a cultural festival with methods for events and participation, and extend it with a music festival subclass that overrides these methods for performances.",
    "code": "```ruby\nclass CulturalFestival\n  def events\n    \"General cultural events\"\n  end\n\n  def participation\n    \"General public participation\"\n  end\nend\n\nclass MusicFestival < CulturalFestival\n  def events\n    \"Music performances and concerts\"\n  end\n\n  def participation\n    \"Musicians and audience participation\"\n  end\nend\n```"
  }
]