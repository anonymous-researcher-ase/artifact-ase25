[
  {
    "task": "Create a function that calculates the sum of two numbers and returns the result.",
    "code": "```ruby\ndef sum(a, b)\n  return a + b\nend\n```"
  },
  {
    "task": "Design a function that takes a string and returns its length.",
    "code": "```ruby\ndef string_length(input_string)\n  input_string.length\nend\n```"
  },
  {
    "task": "Write a function that checks if a number is prime and returns a boolean value.",
    "code": "```ruby\ndef is_prime?(number)\n  return false if number <= 1\n  (2..Math.sqrt(number)).each do |i|\n    return false if number % i == 0\n  end\n  true\nend\n```"
  },
  {
    "task": "Implement a function that returns the highest value in a list of integers.",
    "code": "```ruby\ndef highest_value(numbers)\n  numbers.max\nend\n```"
  },
  {
    "task": "Create a function that accepts a list of words and returns the longest word.",
    "code": "```ruby\ndef longest_word(words)\n  words.max_by(&:length)\nend\n```"
  },
  {
    "task": "Write a function that takes a temperature in Celsius and returns the equivalent in Fahrenheit.",
    "code": "```ruby\ndef celsius_to_fahrenheit(celsius)\n  (celsius * 9.0 / 5) + 32\nend\n```"
  },
  {
    "task": "Develop a function that returns the factorial of a given number.",
    "code": "```ruby\ndef factorial(n)\n  return 1 if n <= 1\n  n * factorial(n - 1)\nend\n```"
  },
  {
    "task": "Implement a function that receives a date and returns the day of the week.",
    "code": "```ruby\nrequire 'date'\n\ndef day_of_week(date_string)\n  date = Date.parse(date_string)\n  date.strftime('%A')\nend\n```"
  },
  {
    "task": "Write a function that calculates the area of a circle given its radius and returns the value.",
    "code": "```ruby\ndef area_of_circle(radius)\n  Math::PI * radius**2\nend\n```"
  },
  {
    "task": "Create a function that converts a string to uppercase and returns the modified string.",
    "code": "```ruby\ndef convert_to_uppercase(str)\n  str.upcase\nend\n```"
  },
  {
    "task": "Design a function that returns the reverse of a given list.",
    "code": "```ruby\ndef reverse_list(lst)\n  lst.reverse\nend\n```"
  },
  {
    "task": "Implement a function that accepts a string and returns a dictionary with character frequencies.",
    "code": "```ruby\ndef character_frequencies(str)\n  frequencies = Hash.new(0)\n  str.each_char { |char| frequencies[char] += 1 }\n  frequencies\nend\n```"
  },
  {
    "task": "Write a function that returns the first non-repeating character in a string.",
    "code": "```ruby\ndef first_non_repeating_char(str)\n  counts = Hash.new(0)\n  str.each_char { |char| counts[char] += 1 }\n  str.each_char { |char| return char if counts[char] == 1 }\n  nil\nend\n```"
  },
  {
    "task": "Create a function that takes a list of numbers and returns a new list with only even numbers.",
    "code": "```ruby\ndef filter_even_numbers(numbers)\n  numbers.select { |num| num.even? }\nend\n```"
  },
  {
    "task": "Develop a function that receives a sentence and returns the word count.",
    "code": "```ruby\ndef word_count(sentence)\n  sentence.split.size\nend\n```"
  },
  {
    "task": "Implement a function that returns the smallest element in an array.",
    "code": "```ruby\ndef smallest_element(array)\n  array.min\nend\n```"
  },
  {
    "task": "Write a function that takes two strings and returns true if they are anagrams.",
    "code": "```ruby\ndef are_anagrams?(str1, str2)\n  str1.chars.sort == str2.chars.sort\nend\n```"
  },
  {
    "task": "Create a function that accepts an integer and returns a list of its divisors.",
    "code": "```ruby\ndef divisors(n)\n  (1..n).select { |i| n % i == 0 }\nend\n```"
  },
  {
    "task": "Design a function that returns the square root of a given number.",
    "code": "```ruby\ndef square_root(number)\n  Math.sqrt(number)\nend\n```"
  },
  {
    "task": "Implement a function that accepts a list and returns it sorted in ascending order.",
    "code": "```ruby\ndef sort_list(lst)\n  lst.sort\nend\n```"
  },
  {
    "task": "Write a function that checks whether a given year is a leap year and returns a boolean.",
    "code": "```ruby\ndef leap_year?(year)\n  (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)\nend\n```"
  },
  {
    "task": "Create a function that receives a list of numbers and returns their average.",
    "code": "```ruby\ndef average(numbers)\n  return numbers.sum.to_f / numbers.size\nend\n```"
  },
  {
    "task": "Develop a function that returns the nth Fibonacci number.",
    "code": "```ruby\ndef fibonacci(n)\n  return n if n <= 1\n  fibonacci(n - 1) + fibonacci(n - 2)\nend\n```"
  },
  {
    "task": "Implement a function that accepts a string and returns it with vowels removed.",
    "code": "```ruby\ndef remove_vowels(str)\n  str.delete('aeiouAEIOU')\nend\n```"
  },
  {
    "task": "Write a function that takes two dates and returns the number of days between them.",
    "code": "```ruby\nrequire 'date'\n\ndef days_between(date1, date2)\n  (Date.parse(date2) - Date.parse(date1)).to_i\nend\n```"
  },
  {
    "task": "Create a function that returns the last element of a list.",
    "code": "```ruby\ndef last_element(list)\n  list.last\nend\n```"
  },
  {
    "task": "Design a function that calculates the GCD of two numbers and returns it.",
    "code": "```ruby\ndef gcd(a, b)\n  return a if b == 0\n  gcd(b, a % b)\nend\n```"
  },
  {
    "task": "Implement a function that takes a list and returns a tuple with the min and max values.",
    "code": "```ruby\ndef min_max(lst)\n  return [lst.min, lst.max]\nend\n```"
  },
  {
    "task": "Write a function that converts a binary string to its decimal representation and returns it.",
    "code": "```ruby\ndef binary_to_decimal(binary_string)\n  binary_string.to_i(2)\nend\n```"
  },
  {
    "task": "Create a function that accepts a dictionary and returns a list of its keys.",
    "code": "```ruby\ndef get_keys(dictionary)\n  dictionary.keys\nend\n```"
  },
  {
    "task": "Develop a function that returns the concatenation of two strings.",
    "code": "```ruby\ndef concatenate_strings(str1, str2)\n  str1 + str2\nend\n```"
  },
  {
    "task": "Implement a function that receives a list and returns a new list with duplicates removed.",
    "code": "```ruby\ndef remove_duplicates(lst)\n  lst.uniq\nend\n```"
  },
  {
    "task": "Write a function that returns the intersection of two lists.",
    "code": "```ruby\ndef intersection(list1, list2)\n  list1 & list2\nend\n```"
  },
  {
    "task": "Create a function that takes an integer and returns whether it is even or odd as a string.",
    "code": "```ruby\ndef even_or_odd(number)\n  number.even? ? 'even' : 'odd'\nend\n```"
  },
  {
    "task": "Design a function that returns the number of vowels in a given string.",
    "code": "```ruby\ndef count_vowels(s)\n  s.count('aeiouAEIOU')\nend\n```"
  },
  {
    "task": "Implement a function that counts the occurrences of a substring within a string and returns it.",
    "code": "```ruby\ndef count_substring_occurrences(string, substring)\n  string.scan(substring).length\nend\n```"
  },
  {
    "task": "Write a function that accepts a list of numbers and returns them sorted in descending order.",
    "code": "```ruby\ndef sort_descending(numbers)\n  numbers.sort.reverse\nend\n```"
  },
  {
    "task": "Create a function that returns the median of a list of numbers.",
    "code": "```ruby\ndef median(numbers)\n  sorted = numbers.sort\n  len = sorted.length\n  if len.odd?\n    sorted[len / 2]\n  else\n    (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0\n  end\nend\n```"
  },
  {
    "task": "Develop a function that receives a sentence and returns it with words in reverse order.",
    "code": "```ruby\ndef reverse_words(sentence)\n  sentence.split.reverse.join(' ')\nend\n```"
  },
  {
    "task": "Implement a function that returns the sum of all elements in a matrix.",
    "code": "```ruby\ndef sum_matrix(matrix)\n  matrix.flatten.reduce(0, :+)\nend\n```"
  },
  {
    "task": "Write a function that accepts a string and returns true if it is a palindrome.",
    "code": "```ruby\ndef is_palindrome?(str)\n  str == str.reverse\nend\n```"
  },
  {
    "task": "Create a function that takes a number and returns its binary representation as a string.",
    "code": "```ruby\ndef number_to_binary_string(number)\n  number.to_s(2)\nend\n```"
  },
  {
    "task": "Design a function that returns the number of words in a paragraph.",
    "code": "```ruby\ndef count_words(paragraph)\n  paragraph.split.size\nend\n```"
  },
  {
    "task": "Implement a function that accepts a list and returns the index of its maximum element.",
    "code": "```ruby\ndef index_of_max_element(list)\n  list.index(list.max)\nend\n```"
  },
  {
    "task": "Write a function that takes a list of grades and returns the highest grade.",
    "code": "```ruby\ndef highest_grade(grades)\n  grades.max\nend\n```"
  },
  {
    "task": "Create a function that returns the product of all positive integers up to a given number.",
    "code": "```ruby\ndef product_of_positives(n)\n  (1..n).reduce(1, :*)\nend\n```"
  },
  {
    "task": "Develop a function that receives a string and returns a new string with spaces replaced by hyphens.",
    "code": "```ruby\ndef replace_spaces_with_hyphens(input_string)\n  input_string.gsub(' ', '-')\nend\n```"
  },
  {
    "task": "Implement a function that takes a list of integers and returns their sum.",
    "code": "```ruby\ndef sum_of_integers(numbers)\n  numbers.reduce(0, :+)\nend\n```"
  },
  {
    "task": "Write a function that checks if a string is a valid email address and returns a boolean.",
    "code": "```ruby\ndef valid_email?(email)\n  !!(email =~ /\\A[\\w+\\-.]+@[a-z\\d\\-.]+\\.[a-z]+\\z/i)\nend\n```"
  },
  {
    "task": "Create a function that returns the decimal equivalent of a hexadecimal string.",
    "code": "```ruby\ndef hex_to_decimal(hex_string)\n  hex_string.to_i(16)\nend\n```"
  },
  {
    "task": "Design a function that calculates and returns the body mass index based on height and weight.",
    "code": "```ruby\ndef calculate_bmi(weight, height)\n  bmi = weight / (height ** 2)\n  return bmi\nend\n```"
  },
  {
    "task": "Implement a function that returns the initials of a person's name given a full name.",
    "code": "```ruby\ndef get_initials(full_name)\n  full_name.split.map { |name| name[0].upcase }.join\nend\n```"
  },
  {
    "task": "Write a function that accepts a list of names and returns them sorted alphabetically.",
    "code": "```ruby\ndef sort_names(names)\n  names.sort\nend\n```"
  },
  {
    "task": "Create a function that takes a list of integers and returns a list of their squares.",
    "code": "```ruby\ndef square_list(integers)\n  integers.map { |n| n ** 2 }\nend\n```"
  },
  {
    "task": "Develop a function that returns the common elements between two sets.",
    "code": "```ruby\ndef common_elements(set1, set2)\n  set1 & set2\nend\n```"
  },
  {
    "task": "Implement a function that receives a list of strings and returns the shortest string.",
    "code": "```ruby\ndef shortest_string(strings)\n  strings.min_by(&:length)\nend\n```"
  },
  {
    "task": "Write a function that returns the sum of digits of a given integer.",
    "code": "```ruby\ndef sum_of_digits(n)\n  n.to_s.chars.map(&:to_i).sum\nend\n```"
  },
  {
    "task": "Create a function that takes a matrix and returns its transpose.",
    "code": "```ruby\ndef transpose(matrix)\n  matrix.transpose\nend\n```"
  },
  {
    "task": "Design a function that returns the percentage of uppercase letters in a string.",
    "code": "```ruby\ndef percentage_of_uppercase(str)\n  total_letters = str.length\n  uppercase_letters = str.count('A-Z')\n  return (uppercase_letters.to_f / total_letters) * 100\nend\n```"
  },
  {
    "task": "Implement a function that accepts a string and returns it with each word capitalized.",
    "code": "```ruby\ndef capitalize_words(input_string)\n  input_string.split.map(&:capitalize).join(' ')\nend\n```"
  },
  {
    "task": "Write a function that takes a list and returns the difference between the max and min values.",
    "code": "```ruby\ndef difference_between_max_and_min(values)\n  return values.max - values.min\nend\n```"
  },
  {
    "task": "Create a function that returns a list containing the first n prime numbers.",
    "code": "```ruby\ndef first_n_primes(n)\n  primes = []\n  num = 2\n  while primes.length < n\n    is_prime = true\n    (2..Math.sqrt(num)).each do |i|\n      if num % i == 0\n        is_prime = false\n        break\n      end\n    end\n    primes << num if is_prime\n    num += 1\n  end\n  primes\nend\n```"
  },
  {
    "task": "Develop a function that receives a dictionary and returns a new dictionary with keys and values swapped.",
    "code": "```ruby\ndef swap_keys_and_values(original)\n  original.each_with_object({}) { |(key, value), new_hash| new_hash[value] = key }\nend\n```"
  },
  {
    "task": "Implement a function that accepts a string and returns the frequency of each word.",
    "code": "```ruby\ndef word_frequency(text)\n  words = text.split\n  frequency = Hash.new(0)\n  words.each { |word| frequency[word.downcase] += 1 }\n  frequency\nend\n```"
  },
  {
    "task": "Write a function that takes two numbers and returns their greatest common divisor.",
    "code": "```ruby\ndef greatest_common_divisor(a, b)\n  while b != 0\n    a, b = b, a % b\n  end\n  a\nend\n```"
  },
  {
    "task": "Create a function that returns the number of consonants in a given string.",
    "code": "```ruby\ndef count_consonants(input_string)\n  input_string.scan(/[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]/).length\nend\n```"
  },
  {
    "task": "Design a function that checks if a number is a perfect square and returns a boolean.",
    "code": "```ruby\ndef perfect_square?(number)\n  return false if number < 0\n  sqrt = Math.sqrt(number)\n  sqrt == sqrt.to_i\nend\n```"
  },
  {
    "task": "Implement a function that takes a list of numbers and returns the mode.",
    "code": "```ruby\ndef mode(numbers)\n  frequency = Hash.new(0)\n  numbers.each { |number| frequency[number] += 1 }\n  frequency.max_by { |_, count| count }[0]\nend\n```"
  },
  {
    "task": "Write a function that accepts a string and returns a new string with characters in reverse order.",
    "code": "```ruby\ndef reverse_string(str)\n  str.reverse\nend\n```"
  },
  {
    "task": "Create a function that returns the sum of all even numbers in a list.",
    "code": "```ruby\ndef sum_of_even_numbers(numbers)\n  numbers.select(&:even?).sum\nend\n```"
  },
  {
    "task": "Develop a function that receives two lists and returns their union.",
    "code": "```ruby\ndef union(list1, list2)\n  (list1 + list2).uniq\nend\n```"
  },
  {
    "task": "Implement a function that takes a string and returns the number of unique characters.",
    "code": "```ruby\ndef unique_char_count(str)\n  str.chars.uniq.length\nend\n```"
  },
  {
    "task": "Write a function that returns the cube of a given number.",
    "code": "```ruby\ndef cube(number)\n  number ** 3\nend\n```"
  },
  {
    "task": "Create a function that calculates the power of a number given a base and exponent and returns the result.",
    "code": "```ruby\ndef power(base, exponent)\n  base ** exponent\nend\n```"
  },
  {
    "task": "Design a function that accepts a URL and returns its domain name.",
    "code": "```ruby\nrequire 'uri'\n\ndef extract_domain(url)\n  uri = URI.parse(url)\n  uri.host.split('.').last(2).join('.')\nend\n```"
  },
  {
    "task": "Implement a function that takes a sentence and returns it with each letter shifted by one in the alphabet.",
    "code": "```ruby\ndef shift_sentence(sentence)\n  sentence.chars.map do |char|\n    if char =~ /[a-z]/\n      ((char.ord - 'a'.ord + 1) % 26 + 'a'.ord).chr\n    elsif char =~ /[A-Z]/\n      ((char.ord - 'A'.ord + 1) % 26 + 'A'.ord).chr\n    else\n      char\n    end\n  end.join\nend\n```"
  },
  {
    "task": "Write a function that checks if a list is sorted and returns a boolean.",
    "code": "```ruby\ndef is_sorted?(list)\n  list.each_cons(2).all? { |a, b| a <= b }\nend\n```"
  },
  {
    "task": "Create a function that returns the longest increasing subsequence in a list of numbers.",
    "code": "```ruby\ndef longest_increasing_subsequence(nums)\n  return [] if nums.empty?\n  \n  lengths = Array.new(nums.size, 1)\n  sequences = Array.new(nums.size, nil)\n\n  max_length_idx = 0\n\n  (1...nums.size).each do |i|\n    (0...i).each do |j|\n      if nums[j] < nums[i] && lengths[j] + 1 > lengths[i]\n        lengths[i] = lengths[j] + 1\n        sequences[i] = j\n      end\n    end\n    max_length_idx = i if lengths[i] > lengths[max_length_idx]\n  end\n\n  subsequence = []\n  current_idx = max_length_idx\n  while !current_idx.nil?\n    subsequence.unshift(nums[current_idx])\n    current_idx = sequences[current_idx]\n  end\n\n  subsequence\nend\n```"
  },
  {
    "task": "Develop a function that calculates and returns the compound interest for given principal, rate, and time.",
    "code": "```ruby\ndef compound_interest(principal, rate, time)\n  principal * (1 + rate) ** time\nend\n```"
  },
  {
    "task": "Implement a function that accepts two strings and returns their longest common substring.",
    "code": "```ruby\ndef longest_common_substring(str1, str2)\n  m, n = str1.length, str2.length\n  longest = 0\n  ending_index = 0\n  dp = Array.new(m + 1) { Array.new(n + 1, 0) }\n\n  (1..m).each do |i|\n    (1..n).each do |j|\n      if str1[i - 1] == str2[j - 1]\n        dp[i][j] = dp[i - 1][j - 1] + 1\n        if dp[i][j] > longest\n          longest = dp[i][j]\n          ending_index = i\n        end\n      end\n    end\n  end\n\n  str1[ending_index - longest, longest]\nend\n```"
  },
  {
    "task": "Write a function that takes a number and returns true if it is a palindrome.",
    "code": "```ruby\ndef is_palindrome?(number)\n  str = number.to_s\n  str == str.reverse\nend\n```"
  },
  {
    "task": "Create a function that returns the average length of words in a given sentence.",
    "code": "```ruby\ndef average_word_length(sentence)\n  words = sentence.split\n  total_length = words.map(&:length).reduce(:+)\n  total_length.to_f / words.size\nend\n```"
  },
  {
    "task": "Design a function that checks if a string contains only digits and returns a boolean.",
    "code": "```ruby\ndef only_digits?(str)\n  str.match?(/\\A\\d+\\z/)\nend\n```"
  },
  {
    "task": "Implement a function that receives a list of tuples and returns a list of the first elements.",
    "code": "```ruby\ndef first_elements(tuples)\n  tuples.map { |tuple| tuple.first }\nend\n```"
  },
  {
    "task": "Write a function that takes a year and returns the Chinese zodiac sign for that year.",
    "code": "```ruby\ndef chinese_zodiac(year)\n  zodiac_signs = [\n    \"Monkey\", \"Rooster\", \"Dog\", \"Pig\",\n    \"Rat\", \"Ox\", \"Tiger\", \"Rabbit\",\n    \"Dragon\", \"Snake\", \"Horse\", \"Goat\"\n  ]\n  zodiac_signs[year % 12]\nend\n```"
  },
  {
    "task": "Create a function that returns the number of trailing zeros in a factorial of a given number.",
    "code": "```ruby\ndef trailing_zeros_in_factorial(n)\n  count = 0\n  while n >= 5\n    n /= 5\n    count += n\n  end\n  count\nend\n```"
  },
  {
    "task": "Develop a function that accepts a list and returns a new list with elements multiplied by their index.",
    "code": "```ruby\ndef multiply_by_index(list)\n  list.map.with_index { |element, index| element * index }\nend\n```"
  },
  {
    "task": "Implement a function that receives a string and returns a dictionary of word lengths.",
    "code": "```ruby\ndef word_lengths(sentence)\n  words = sentence.split\n  lengths = {}\n  words.each do |word|\n    lengths[word] = word.length\n  end\n  lengths\nend\n```"
  },
  {
    "task": "Write a function that takes a list of integers and returns a list of numbers that are divisible by 3.",
    "code": "```ruby\ndef divisible_by_three(numbers)\n  numbers.select { |num| num % 3 == 0 }\nend\n```"
  },
  {
    "task": "Create a function that returns the result of a quadratic equation given its coefficients.",
    "code": "```ruby\ndef quadratic_equation(a, b, c)\n  discriminant = b**2 - 4 * a * c\n  return nil if discriminant < 0\n\n  sqrt_discriminant = Math.sqrt(discriminant)\n  root1 = (-b + sqrt_discriminant) / (2 * a)\n  root2 = (-b - sqrt_discriminant) / (2 * a)\n  \n  return [root1, root2]\nend\n```"
  },
  {
    "task": "Design a function that checks if two lists have any elements in common and returns a boolean.",
    "code": "```ruby\ndef have_common_elements?(list1, list2)\n  (list1 & list2).any?\nend\n```"
  },
  {
    "task": "Implement a function that accepts a list and returns the sum of its elements using recursion.",
    "code": "```ruby\ndef sum_recursive(arr)\n  return 0 if arr.empty?\n  arr[0] + sum_recursive(arr[1..-1])\nend\n```"
  },
  {
    "task": "Write a function that takes a list of numbers and returns the variance.",
    "code": "```ruby\ndef variance(numbers)\n  return nil if numbers.empty?\n\n  mean = numbers.sum.to_f / numbers.size\n  sum_of_squares = numbers.reduce(0) { |sum, num| sum + (num - mean) ** 2 }\n  sum_of_squares / numbers.size\nend\n```"
  },
  {
    "task": "Create a function that returns the ASCII value of a given character.",
    "code": "```ruby\ndef ascii_value(character)\n  character.ord\nend\n```"
  },
  {
    "task": "Develop a function that takes a number and returns the number of bits required for its binary representation.",
    "code": "```ruby\ndef bits_required(number)\n  number.to_s(2).length\nend\n```"
  }
]