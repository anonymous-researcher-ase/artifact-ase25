[
  {
    "task": "Create a program that continuously asks the user to enter a number until they input a negative number.",
    "code": "```ruby\nloop do\n  puts \"Please enter a number:\"\n  number = gets.to_i\n  break if number < 0\nend\n```"
  },
  {
    "task": "Write a function that doubles a number and repeats the process until the number is greater than 1000.",
    "code": "```ruby\ndef double_until_greater_than_1000(number)\n  while number <= 1000\n    number *= 2\n  end\n  number\nend\n```"
  },
  {
    "task": "Develop a routine to keep printing 'Hello, World!' until a counter reaches 10.",
    "code": "```ruby\ncounter = 0\nwhile counter < 10\n  puts 'Hello, World!'\n  counter += 1\nend\n```"
  },
  {
    "task": "Construct a loop that checks if a randomly generated number is even, repeating until an odd number is found.",
    "code": "```ruby\nloop do\n  number = rand(100) # Generates a random number between 0 and 99\n  break if number.odd?\nend\n```"
  },
  {
    "task": "Design a countdown timer that prints each second until it reaches zero.",
    "code": "```ruby\nseconds = 10\n\nwhile seconds >= 0\n  puts seconds\n  sleep 1\n  seconds -= 1\nend\n```"
  },
  {
    "task": "Implement a system where a user can keep adding items to a list until they type 'stop'.",
    "code": "```ruby\nitems = []\n\nwhile true\n  puts \"Enter an item (or type 'stop' to finish):\"\n  input = gets.chomp\n  break if input.downcase == 'stop'\n  items << input\nend\n\nputs \"You have added the following items:\"\nputs items\n```"
  },
  {
    "task": "Write a script that simulates rolling a die and continues until a six is rolled.",
    "code": "```ruby\nloop do\n  roll = rand(1..6)\n  break if roll == 6\nend\n```"
  },
  {
    "task": "Create a program that asks for a password and keeps prompting until the correct password is entered.",
    "code": "```ruby\ncorrect_password = \"secret\"\n\nloop do\n  print \"Enter password: \"\n  input = gets.chomp\n  break if input == correct_password\n  puts \"Incorrect password, please try again.\"\nend\n\nputs \"Access granted.\"\n```"
  },
  {
    "task": "Design a loop that calculates the sum of entered numbers until the user enters zero.",
    "code": "```ruby\nsum = 0\nloop do\n  print \"Enter a number: \"\n  number = gets.to_i\n  break if number == 0\n  sum += number\nend\nputs \"The total sum is: #{sum}\"\n```"
  },
  {
    "task": "Implement a feature that prints Fibonacci numbers until a number exceeds 100.",
    "code": "```ruby\na, b = 0, 1\nwhile a <= 100\n  puts a\n  a, b = b, a + b\nend\n```"
  },
  {
    "task": "Develop a loop that keeps halving a number until it becomes less than one.",
    "code": "```ruby\nnumber = 100  # Example starting number\n\nwhile number >= 1\n  number /= 2.0\nend\n```"
  },
  {
    "task": "Write a program that asks for names and keeps storing them until the user enters 'done'.",
    "code": "```ruby\nnames = []\n\nloop do\n  print \"Enter a name (or 'done' to finish): \"\n  name = gets.chomp\n  break if name.downcase == 'done'\n  names << name\nend\n```"
  },
  {
    "task": "Create a process that keeps flipping a coin, recording results until there have been five heads.",
    "code": "```ruby\nheads_count = 0\nresults = []\n\nwhile heads_count < 5\n  flip = ['heads', 'tails'].sample\n  results << flip\n  heads_count += 1 if flip == 'heads'\nend\n\nresults\n```"
  },
  {
    "task": "Implement a countdown that decreases by two each time, starting from 20, until it reaches zero.",
    "code": "```ruby\nnumber = 20\nwhile number >= 0\n  puts number\n  number -= 2\nend\n```"
  },
  {
    "task": "Design a solution that repeatedly asks for user input and repeats it back until they type 'exit'.",
    "code": "```ruby\ninput = ''\nwhile input != 'exit'\n  print 'Enter something: '\n  input = gets.chomp\n  puts input unless input == 'exit'\nend\n```"
  },
  {
    "task": "Develop a loop to simulate a bank account balance, repeatedly deducting a fee until the balance is below zero.",
    "code": "```ruby\nbalance = 1000  # Example starting balance\nfee = 50        # Example fee amount\n\nwhile balance >= 0\n  balance -= fee\nend\n```"
  },
  {
    "task": "Create a sequence generator that multiplies a number by three each time until it reaches or exceeds 100.",
    "code": "```ruby\nnumber = 1\nwhile number < 100\n  puts number\n  number *= 3\nend\n```"
  },
  {
    "task": "Write a program that keeps generating random numbers between 1 and 10 until it gets a five.",
    "code": "```ruby\nrequire 'securerandom'\n\nnumber = 0\nwhile number != 5\n  number = SecureRandom.random_number(1..10)\n  puts number\nend\n```"
  },
  {
    "task": "Implement a system to keep checking the temperature and only stop when it falls below freezing.",
    "code": "```ruby\ntemperature = 100 # assuming initial temperature is 100\n\nwhile temperature >= 32\n  # Simulate checking the temperature. Replace this with actual temperature fetching logic.\n  puts \"Current temperature: #{temperature}\"\n  temperature -= 1 # Adjust this logic as needed to simulate temperature change.\nend\n```"
  },
  {
    "task": "Construct a quiz game that continues asking questions until the player answers incorrectly.",
    "code": "```ruby\nquestions = {\n  \"What is the capital of France?\" => \"Paris\",\n  \"What is 2 + 2?\" => \"4\",\n  \"What is the color of the sky on a clear day?\" => \"Blue\"\n}\n\nquestions.each do |question, answer|\n  puts question\n  user_answer = gets.chomp\n  if user_answer.downcase != answer.downcase\n    puts \"Incorrect! Game over.\"\n    break\n  else\n    puts \"Correct!\"\n  end\nend\n```"
  },
  {
    "task": "Write a function that calculates factorials of a number, repeating the process for numbers 1 through 5.",
    "code": "```ruby\ndef calculate_factorials\n  number = 1\n  while number <= 5\n    factorial = 1\n    i = 1\n    while i <= number\n      factorial *= i\n      i += 1\n    end\n    puts \"Factorial of #{number} is #{factorial}\"\n    number += 1\n  end\nend\n\ncalculate_factorials\n```"
  },
  {
    "task": "Create a loop that prints all even numbers between 1 and 50.",
    "code": "```ruby\nnumber = 2\nwhile number <= 50\n  puts number\n  number += 2\nend\n```"
  },
  {
    "task": "Design a program that continuously asks for user input until a palindrome is entered.",
    "code": "```ruby\ndef palindrome?(string)\n  string == string.reverse\nend\n\ninput = nil\n\nwhile input.nil? || !palindrome?(input)\n  puts \"Enter a string:\"\n  input = gets.chomp\nend\n\nputs \"You entered a palindrome!\"\n```"
  },
  {
    "task": "Implement a countdown that decreases by one each second, starting from 100.",
    "code": "```ruby\ncount = 100\nwhile count > 0\n  puts count\n  sleep 1\n  count -= 1\nend\n```"
  },
  {
    "task": "Write a script that repeatedly asks for a number and adds it to a total until the total exceeds 500.",
    "code": "```ruby\ntotal = 0\n\nwhile total <= 500\n  print \"Enter a number: \"\n  number = gets.to_i\n  total += number\nend\n```"
  },
  {
    "task": "Create a loop that generates random letters until the letter 'Z' appears.",
    "code": "```ruby\nrequire 'securerandom'\n\nletter = ''\nwhile letter != 'Z'\n  letter = ('A'..'Z').to_a.sample\n  puts letter\nend\n```"
  },
  {
    "task": "Write a process that continues prompting for two numbers and prints their sum if it's even.",
    "code": "```ruby\nloop do\n  puts \"Enter the first number:\"\n  num1 = gets.to_i\n  puts \"Enter the second number:\"\n  num2 = gets.to_i\n  sum = num1 + num2\n  puts \"The sum is even: #{sum}\" if sum.even?\nend\n```"
  },
  {
    "task": "Develop a loop that simulates a traffic light sequence until a manual stop command is received.",
    "code": "```ruby\ncommand = ''\nlights = ['Red', 'Green', 'Yellow']\nindex = 0\n\nwhile command != 'stop'\n  puts lights[index]\n  index = (index + 1) % lights.size\n  sleep(2) # Simulate the delay for each light\n  print 'Enter \"stop\" to end the loop: '\n  command = gets.chomp.downcase\nend\n```"
  },
  {
    "task": "Implement a feature that keeps printing numbers in reverse order starting from 10.",
    "code": "```ruby\nnumber = 10\nwhile number > 0\n  puts number\n  number -= 1\nend\n```"
  },
  {
    "task": "Create a program that rolls two dice and continues until the sum is exactly seven.",
    "code": "```ruby\nloop do\n  die1 = rand(1..6)\n  die2 = rand(1..6)\n  break if die1 + die2 == 7\nend\n```"
  },
  {
    "task": "Design a loop that keeps asking for ages and prints the average once a negative age is entered.",
    "code": "```ruby\nages = []\nloop do\n  print \"Enter age: \"\n  age = gets.to_i\n  break if age < 0\n  ages << age\nend\n\nif ages.empty?\n  puts \"No ages entered.\"\nelse\n  average = ages.sum.to_f / ages.size\n  puts \"Average age: #{average}\"\nend\n```"
  },
  {
    "task": "Write a routine that squares numbers starting from 1 until the square is greater than 500.",
    "code": "```ruby\nnumber = 1\nwhile number**2 <= 500\n  puts number**2\n  number += 1\nend\n```"
  },
  {
    "task": "Implement a system to ask for a string and append it to a file until 'end' is typed.",
    "code": "```ruby\nFile.open('output.txt', 'a') do |file|\n  loop do\n    print \"Enter a string (type 'end' to finish): \"\n    input = gets.chomp\n    break if input == 'end'\n    file.puts(input)\n  end\nend\n```"
  },
  {
    "task": "Create a script that checks if a number is prime, repeating for each number entered by the user.",
    "code": "```ruby\ndef prime?(number)\n  return false if number <= 1\n  (2..Math.sqrt(number)).each do |i|\n    return false if number % i == 0\n  end\n  true\nend\n\nloop do\n  print \"Enter a number (or type 'exit' to quit): \"\n  input = gets.chomp\n  break if input.downcase == 'exit'\n  number = input.to_i\n  if prime?(number)\n    puts \"#{number} is a prime number.\"\n  else\n    puts \"#{number} is not a prime number.\"\n  end\nend\n```"
  },
  {
    "task": "Develop a countdown that prints numbers starting from 50 down to 1.",
    "code": "```ruby\nnumber = 50\nwhile number > 0\n  puts number\n  number -= 1\nend\n```"
  },
  {
    "task": "Write a program that keeps doubling the value of a variable until it exceeds 200.",
    "code": "```ruby\nvalue = 1\nwhile value <= 200\n  value *= 2\nend\n```"
  },
  {
    "task": "Design a loop that keeps generating a random string of letters until a specific word is formed.",
    "code": "```ruby\ntarget_word = \"hello\"\ngenerated_word = \"\"\n\nwhile generated_word != target_word\n  generated_word = (0...target_word.length).map { ('a'..'z').to_a[rand(26)] }.join\nend\n```"
  },
  {
    "task": "Implement a system that continuously fetches data from a sensor until a threshold is crossed.",
    "code": "```ruby\nsensor_data = 0\nthreshold = 100\n\nwhile sensor_data <= threshold\n  # Simulating fetching data from a sensor\n  sensor_data = rand(150) # Replace with actual sensor data fetching logic\n  puts \"Sensor data: #{sensor_data}\"\nend\n```"
  },
  {
    "task": "Create a game where a player guesses a number, and the game continues until the player guesses correctly.",
    "code": "```ruby\nsecret_number = rand(1..100)\nguess = nil\n\nwhile guess != secret_number\n  print \"Guess the number: \"\n  guess = gets.to_i\n  puts \"Correct!\" if guess == secret_number\nend\n```"
  },
  {
    "task": "Write a loop that continues to add random numbers to a list until the list has 10 even numbers.",
    "code": "```ruby\nrequire 'securerandom'\n\neven_numbers = []\n\nwhile even_numbers.length < 10\n  num = SecureRandom.random_number(100)\n  even_numbers << num if num.even?\nend\n```"
  },
  {
    "task": "Design a routine that keeps removing elements from a list until it is empty.",
    "code": "```ruby\ndef empty_list(list)\n  while !list.empty?\n    list.pop\n  end\n  list\nend\n```"
  },
  {
    "task": "Implement a sequence that prints the alphabet repeatedly until interrupted by the user.",
    "code": "```ruby\nbegin\n  loop do\n    ('a'..'z').each { |letter| print letter }\n  end\nrescue Interrupt\n  puts \"\\nSequence interrupted.\"\nend\n```"
  },
  {
    "task": "Create a program that continuously checks for updates and stops once an update is available.",
    "code": "```ruby\nupdate_available = false\n\nwhile !update_available\n  # Simulate checking for updates\n  puts \"Checking for updates...\"\n  sleep(1) # Simulate some delay\n\n  # Simulate update being available\n  update_available = [true, false].sample\nend\n\nputs \"Update is available!\"\n```"
  },
  {
    "task": "Write a function that keeps dividing a number by two until it results in a fractional value.",
    "code": "```ruby\ndef divide_until_fractional(number)\n  while number % 2 == 0\n    number /= 2\n  end\n  number\nend\n```"
  },
  {
    "task": "Develop a loop that keeps asking for student's grades and calculates the average until a grade of -1 is entered.",
    "code": "```ruby\ngrades = []\nloop do\n  print \"Enter grade (-1 to finish): \"\n  grade = gets.to_i\n  break if grade == -1\n  grades << grade\nend\n\nif grades.empty?\n  puts \"No grades entered.\"\nelse\n  average = grades.sum.to_f / grades.size\n  puts \"Average grade: #{average}\"\nend\n```"
  },
  {
    "task": "Design a feature that continuously monitors a file for changes and stops when no changes are detected for a minute.",
    "code": "```ruby\nrequire 'digest'\nrequire 'time'\n\ndef monitor_file(file_path)\n  last_hash = nil\n  unchanged_duration = 0\n\n  while unchanged_duration < 60\n    current_hash = Digest::MD5.file(file_path).hexdigest\n    if current_hash == last_hash\n      sleep(1)\n      unchanged_duration += 1\n    else\n      last_hash = current_hash\n      unchanged_duration = 0\n    end\n  end\nend\n\nmonitor_file('your_file_path_here.txt')\n```"
  },
  {
    "task": "Implement a process where a motor runs until a certain distance is reached.",
    "code": "```ruby\ndistance_covered = 0\ntarget_distance = 100 # example target distance in units\n\nwhile distance_covered < target_distance\n  # Simulate motor running and covering distance\n  distance_covered += 1 # increment distance covered\nend\n```"
  },
  {
    "task": "Create a script that keeps generating random numbers and stops when it generates a prime number.",
    "code": "```ruby\nrequire 'prime'\n\nloop do\n  number = rand(1..100)\n  break if Prime.prime?(number)\nend\n```"
  },
  {
    "task": "Write a program that asks for the user's favorite color and keeps asking until they say 'blue'.",
    "code": "```ruby\nfavorite_color = ''\n\nwhile favorite_color.downcase != 'blue'\n  print 'What is your favorite color? '\n  favorite_color = gets.chomp\nend\n```"
  },
  {
    "task": "Develop a loop that continuously prints the time every second until a key is pressed.",
    "code": "```ruby\nrequire 'io/console'\n\nThread.new do\n  STDIN.getch\n  exit\nend\n\nwhile true\n  puts Time.now\n  sleep 1\nend\n```"
  },
  {
    "task": "Create a system to keep downloading data from a server until the connection is lost.",
    "code": "```ruby\ndef download_data\n  # Simulate data download with a random connection status\n  connection_status = [true, false].sample\n  connection_status ? \"Data downloaded\" : nil\nend\n\nwhile true\n  data = download_data\n  break if data.nil?\n  puts data\nend\n```"
  },
  {
    "task": "Write a process to keep a light on until the ambient light level is sufficient.",
    "code": "```ruby\nambient_light_level = 0\nsufficient_light_level = 10\n\nwhile ambient_light_level < sufficient_light_level\n  puts \"Light is ON\"\n  # Simulate ambient light level change\n  ambient_light_level += 1\nend\n\nputs \"Light is OFF\"\n```"
  },
  {
    "task": "Implement a feature that continuously plays a sound until the user presses a button.",
    "code": "```ruby\nrequire 'io/console'\n\ndef play_sound\n  puts \"Playing sound...\"\n  # Insert sound playing logic here\nend\n\ndef button_pressed?\n  IO.console.getch\n  true\nrescue\n  false\nend\n\nwhile true\n  play_sound\n  break if button_pressed?\nend\n```"
  },
  {
    "task": "Design a program that keeps multiplying a matrix by itself until its determinant is greater than 1000.",
    "code": "```ruby\nrequire 'matrix'\n\ndef multiply_until_determinant_exceeds(matrix)\n  while matrix.determinant <= 1000\n    matrix *= matrix\n  end\n  matrix\nend\n\n# Example usage:\nmatrix = Matrix[[2, 1], [1, 2]]\nresult = multiply_until_determinant_exceeds(matrix)\nputs result\n```"
  },
  {
    "task": "Create a script that keeps prompting the user to guess a word until they get it right.",
    "code": "```ruby\ncorrect_word = \"ruby\"\nguess = \"\"\n\nwhile guess != correct_word\n  print \"Guess the word: \"\n  guess = gets.chomp\nend\n\nputs \"Congratulations! You guessed the word.\"\n```"
  },
  {
    "task": "Write a loop that simulates a car's fuel consumption and stops when the tank is empty.",
    "code": "```ruby\nfuel = 50 # assuming the fuel tank capacity is 50 units\n\nwhile fuel > 0\n  puts \"Driving... Fuel left: #{fuel} units\"\n  fuel -= 5 # assuming the car consumes 5 units of fuel per iteration\nend\n\nputs \"The tank is empty.\"\n```"
  },
  {
    "task": "Develop a routine that keeps checking if a file exists and stops once it does.",
    "code": "```ruby\nrequire 'fileutils'\n\nfile_path = 'path/to/your/file.txt'\n\nwhile !File.exist?(file_path)\n  sleep(1) # wait for 1 second before checking again\nend\n```"
  },
  {
    "task": "Implement a feature that continuously calculates the square root of a number until it's less than 0.1.",
    "code": "```ruby\nnumber = 10.0\n\nwhile number >= 0.1\n  number = Math.sqrt(number)\n  puts number\nend\n```"
  },
  {
    "task": "Create a system that prints 'Processing...' every second until a task is complete.",
    "code": "```ruby\ntask_complete = false\n\nwhile !task_complete\n  puts 'Processing...'\n  sleep(1)\n  # Add logic here to change task_complete to true when the task is complete\nend\n```"
  },
  {
    "task": "Write a loop that repeatedly checks the status of a process until it reports 'complete'.",
    "code": "```ruby\nstatus = get_process_status\n\nwhile status != 'complete'\n  status = get_process_status\nend\n```"
  },
  {
    "task": "Design a routine to keep pinging a server and alert when the connection is lost.",
    "code": "```ruby\nrequire 'net/http'\n\ndef ping_server(url)\n  uri = URI(url)\n  \n  while true\n    begin\n      response = Net::HTTP.get_response(uri)\n      if response.code.to_i != 200\n        puts \"Alert: Connection lost!\"\n        break\n      end\n    rescue\n      puts \"Alert: Connection lost!\"\n      break\n    end\n    sleep(5)\n  end\nend\n\nping_server('http://example.com')\n```"
  },
  {
    "task": "Implement a loop that counts down from 100 by fives until it reaches zero.",
    "code": "```ruby\nnumber = 100\nwhile number >= 0\n  puts number\n  number -= 5\nend\n```"
  },
  {
    "task": "Create a script that keeps track of inventory items being added or removed until an end signal is given.",
    "code": "```ruby\ninventory = {}\n\nloop do\n  puts \"Enter 'add' to add an item, 'remove' to remove an item, or 'end' to finish:\"\n  action = gets.chomp\n\n  break if action == 'end'\n\n  puts \"Enter item name:\"\n  item = gets.chomp\n\n  case action\n  when 'add'\n    puts \"Enter quantity to add:\"\n    quantity = gets.chomp.to_i\n    inventory[item] = (inventory[item] || 0) + quantity\n  when 'remove'\n    puts \"Enter quantity to remove:\"\n    quantity = gets.chomp.to_i\n    if inventory[item]\n      inventory[item] -= quantity\n      inventory.delete(item) if inventory[item] <= 0\n    else\n      puts \"Item not found in inventory.\"\n    end\n  else\n    puts \"Invalid action.\"\n  end\n\n  puts \"Current inventory: #{inventory}\"\nend\n```"
  },
  {
    "task": "Write a program that keeps calculating the power of two for numbers until a result is greater than 1000.",
    "code": "```ruby\nnumber = 1\nresult = 2 ** number\n\nwhile result <= 1000\n  number += 1\n  result = 2 ** number\nend\n```"
  },
  {
    "task": "Develop a sequence that keeps appending random numbers to an array until its length is 20.",
    "code": "```ruby\nrequire 'securerandom'\n\nnumbers = []\nwhile numbers.length < 20\n  numbers << SecureRandom.random_number\nend\n```"
  },
  {
    "task": "Implement a routine that continuously rotates an image until it matches a reference orientation.",
    "code": "```ruby\ndef rotate_image_until_match(image, reference)\n  while image != reference\n    image = rotate_image(image)\n  end\n  image\nend\n\ndef rotate_image(image)\n  # Placeholder function to simulate image rotation\n  # Implement actual rotation logic here\n  image\nend\n\n# Example usage\ncurrent_image = \"current_orientation\"\nreference_image = \"desired_orientation\"\nrotated_image = rotate_image_until_match(current_image, reference_image)\n```"
  },
  {
    "task": "Design a loop that keeps printing random jokes until the user stops it.",
    "code": "```ruby\nrequire 'net/http'\nrequire 'json'\n\ndef fetch_random_joke\n  uri = URI('https://official-joke-api.appspot.com/random_joke')\n  response = Net::HTTP.get(uri)\n  joke = JSON.parse(response)\n  \"#{joke['setup']} - #{joke['punchline']}\"\nend\n\ncontinue = true\n\nwhile continue\n  puts fetch_random_joke\n  puts \"Do you want to hear another joke? (yes/no)\"\n  answer = gets.chomp.downcase\n  continue = false if answer != 'yes'\nend\n```"
  },
  {
    "task": "Create a program that accepts user feedback and continues until a positive feedback is received.",
    "code": "```ruby\nfeedback = \"\"\n\nwhile feedback.downcase != \"positive\"\n  puts \"Please provide your feedback:\"\n  feedback = gets.chomp\nend\n\nputs \"Thank you for your positive feedback!\"\n```"
  },
  {
    "task": "Write a loop that repeatedly reads sensor data and stops when a stable reading is observed.",
    "code": "```ruby\nstable_reading = false\n\nwhile !stable_reading\n  sensor_data = read_sensor_data()\n  stable_reading = sensor_data_stable?(sensor_data)\nend\n```"
  },
  {
    "task": "Develop a system that simulates a stopwatch, counting seconds until stopped manually.",
    "code": "```ruby\nrunning = true\nseconds = 0\n\nputs \"Stopwatch started. Type 'stop' to stop it.\"\n\nwhile running\n  sleep(1)\n  seconds += 1\n  puts \"Elapsed time: #{seconds} seconds\"\n  \n  input = gets.chomp\n  running = false if input.downcase == \"stop\"\nend\n\nputs \"Stopwatch stopped at #{seconds} seconds.\"\n```"
  },
  {
    "task": "Create a script that continues adding random integers to a sum until the sum exceeds 100.",
    "code": "```ruby\nsum = 0\n\nwhile sum <= 100\n  sum += rand(1..10)\nend\n```"
  },
  {
    "task": "Implement a process to track a moving object until it stops.",
    "code": "```ruby\nposition = 0\nvelocity = 5\n\nwhile velocity != 0\n  # Simulate the object moving\n  position += velocity\n  # Update the velocity based on some condition\n  # For demonstration, we'll decrement the velocity until it stops\n  velocity -= 1\nend\n\nputs \"Final position: #{position}\"\n```"
  },
  {
    "task": "Design a routine to keep checking user login attempts until a successful login occurs.",
    "code": "```ruby\ndef successful_login?(username, password)\n  # Placeholder for actual authentication logic\n  username == \"user\" && password == \"pass\"\nend\n\nloop do\n  puts \"Enter username:\"\n  username = gets.chomp\n  puts \"Enter password:\"\n  password = gets.chomp\n\n  break if successful_login?(username, password)\n  \n  puts \"Login failed. Please try again.\"\nend\n\nputs \"Login successful!\"\n```"
  },
  {
    "task": "Write a loop that repeatedly calculates the area of a circle for radii from 1 to 10.",
    "code": "```ruby\nradius = 1\nwhile radius <= 10\n  area = Math::PI * radius**2\n  radius += 1\nend\n```"
  },
  {
    "task": "Create a program that continues flipping a card from a deck until an ace is drawn.",
    "code": "```ruby\ndeck = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A'].shuffle\n\ncard = nil\nwhile card != 'A'\n  card = deck.pop\n  puts \"Flipped: #{card}\"\nend\n```"
  },
  {
    "task": "Develop a loop that keeps asking for a word and stores it until a word with more than five letters is entered.",
    "code": "```ruby\nwords = []\n\nloop do\n  print \"Enter a word: \"\n  word = gets.chomp\n  words << word\n  break if word.length > 5\nend\n```"
  },
  {
    "task": "Implement a feature that continuously calculates the exponential growth of a population until it doubles.",
    "code": "```ruby\ninitial_population = 1000\npopulation = initial_population\ngrowth_rate = 0.05\n\nwhile population < initial_population * 2\n  population += population * growth_rate\nend\n```"
  },
  {
    "task": "Write a script that repeats a string a certain number of times until a limit is reached.",
    "code": "```ruby\ndef repeat_string_until_limit(string, repeat_count, limit)\n  result = \"\"\n  count = 0\n\n  while count < limit\n    result += string\n    count += 1\n    break if count == repeat_count\n  end\n\n  result\nend\n\n# Example usage\nputs repeat_string_until_limit(\"Hello\", 3, 5)\n```"
  },
  {
    "task": "Create a routine that keeps accessing an API endpoint until it returns a specific result.",
    "code": "```ruby\nrequire 'net/http'\nrequire 'json'\n\ndef fetch_until_specific_result(uri, specific_result)\n  loop do\n    response = Net::HTTP.get(URI(uri))\n    result = JSON.parse(response)\n    break if result == specific_result\n  end\nend\n\n# Example usage\nfetch_until_specific_result('http://example.com/api', 'desired_result')\n```"
  },
  {
    "task": "Design a loop that continues to fetch stock prices until a certain price threshold is crossed.",
    "code": "```ruby\nthreshold = 150\ncurrent_price = 0\n\nwhile current_price <= threshold\n  current_price = fetch_stock_price()\nend\n```"
  },
  {
    "task": "Implement a process that keeps monitoring CPU usage until it drops below 10%.",
    "code": "```ruby\ndef cpu_usage_below_threshold?\n  # Here you would implement the actual CPU usage check, \n  # this is a placeholder for the sake of example.\n  rand(100) < 10\nend\n\nwhile true\n  break if cpu_usage_below_threshold?\n  sleep(1) # Wait a bit before checking again\nend\n```"
  },
  {
    "task": "Write a program that asks for a series of numbers and prints the largest once a negative number is entered.",
    "code": "```ruby\nlargest = nil\n\nwhile true\n  print \"Enter a number: \"\n  input = gets.to_i\n\n  break if input < 0\n\n  largest = input if largest.nil? || input > largest\nend\n\nputs \"The largest number entered is: #{largest}\" if largest\n```"
  },
  {
    "task": "Develop a system that keeps a heater on until the room reaches a desired temperature.",
    "code": "```ruby\ndesired_temperature = 22\ncurrent_temperature = 18\nheater_on = true\n\nwhile heater_on\n  current_temperature += 1\n  \n  if current_temperature >= desired_temperature\n    heater_on = false\n  end\nend\n```"
  },
  {
    "task": "Create a loop that repeatedly checks if a door is open and alerts if it remains open for too long.",
    "code": "```ruby\ndoor_open = true\ntime_open = 0\n\nwhile door_open\n  puts \"Alert: Door is still open!\" if time_open > 5\n  sleep(1) # Simulate waiting for some time\n  time_open += 1\n  # This is where you would check the actual status of the door\n  # For demonstration, we will assume the door closes after some time\n  door_open = false if time_open == 10\nend\n```"
  },
  {
    "task": "Implement a feature that keeps adding random characters to a string until its length is 8.",
    "code": "```ruby\nresult = ''\nwhile result.length < 8\n  result += ('a'..'z').to_a.sample\nend\n```"
  },
  {
    "task": "Design a routine that simulates a race and continues until a participant crosses the finish line.",
    "code": "```ruby\nfinish_line = 100\nparticipants = { \"Alice\" => 0, \"Bob\" => 0, \"Charlie\" => 0 }\n\nwhile participants.values.all? { |position| position < finish_line }\n  participants.each do |name, position|\n    participants[name] += rand(1..10)\n    if participants[name] >= finish_line\n      puts \"#{name} has crossed the finish line!\"\n      break\n    end\n  end\nend\n```"
  },
  {
    "task": "Write a script that keeps checking an email inbox until a specific email is received.",
    "code": "```ruby\nrequire 'net/imap'\n\ndef check_inbox_for_email\n  imap = Net::IMAP.new('imap.example.com', 993, true)\n  imap.login('username', 'password')\n  imap.select('INBOX')\n\n  email_found = false\n\n  while !email_found\n    imap.search([\"ALL\"]).each do |message_id|\n      envelope = imap.fetch(message_id, \"ENVELOPE\")[0].attr[\"ENVELOPE\"]\n      if envelope.subject == \"Specific Email Subject\"\n        email_found = true\n        puts \"Email received!\"\n        break\n      end\n    end\n    sleep(60) # Wait a minute before checking again\n  end\n\n  imap.logout\n  imap.disconnect\nend\n\ncheck_inbox_for_email\n```"
  },
  {
    "task": "Create a loop that continues to play a video on repeat until the user interrupts.",
    "code": "```ruby\nloop do\n  play_video\n  break if user_interrupt?\nend\n```"
  },
  {
    "task": "Develop a process that keeps scanning for Bluetooth devices until a specific device is found.",
    "code": "```ruby\nrequire 'bluetooth'\n\ndef scan_for_device(target_device)\n  device_found = false\n\n  while !device_found\n    nearby_devices = Bluetooth.scan\n    nearby_devices.each do |device|\n      if device.name == target_device\n        device_found = true\n        break\n      end\n    end\n  end\n\n  puts \"#{target_device} found.\"\nend\n\nscan_for_device(\"Target Device Name\")\n```"
  },
  {
    "task": "Implement a script that continuously captures images from a webcam until a motion is detected.",
    "code": "```ruby\nrequire 'opencv'\ninclude OpenCV\n\ncapture = CvCapture.open\nprevious_frame = nil\n\nwhile true\n  frame = capture.query\n  gray_frame = frame.BGR2GRAY\n  if previous_frame\n    diff = gray_frame.abs_diff(previous_frame)\n    non_zero_count = diff.count_non_zero\n    break if non_zero_count > 1000\n  end\n  previous_frame = gray_frame\nend\n```"
  },
  {
    "task": "Design a program that keeps playing a sound file until the user presses a mute button.",
    "code": "```ruby\nrequire 'io/console'\n\ndef play_sound\n  puts \"Playing sound...\"\n  # Code to play the sound file goes here\nend\n\ndef sound_playing?\n  true # This should be a condition to check if sound is playing\nend\n\ndef mute_button_pressed?\n  $stdin.getch == 'm'\nend\n\nwhile sound_playing?\n  play_sound\n  break if mute_button_pressed?\nend\n\nputs \"Sound muted.\"\n```"
  },
  {
    "task": "Create a loop that repeatedly generates a random password until it meets certain security criteria.",
    "code": "```ruby\nrequire 'securerandom'\n\ndef secure_password?(password)\n  password.length >= 8 &&\n  password =~ /[A-Z]/ &&\n  password =~ /[a-z]/ &&\n  password =~ /[0-9]/ &&\n  password =~ /[\\W_]/\nend\n\npassword = ''\nwhile !secure_password?(password)\n  password = SecureRandom.base64(12)\nend\n\nputs password\n```"
  },
  {
    "task": "Write a process that keeps checking for file changes in a directory and logs them until stopped.",
    "code": "```ruby\nrequire 'rb-inotify'\n\nnotifier = INotify::Notifier.new\n\nnotifier.watch(\"/path/to/directory\", :modify, :create, :delete) do |event|\n  File.open(\"file_change_log.txt\", \"a\") do |file|\n    file.puts(\"#{event.flags.join(', ')}: #{event.name}\")\n  end\nend\n\nnotifier.run\n```"
  }
]