[
  {
    "task": "Create a function that initializes an array with the first ten prime numbers.",
    "code": "```ruby\ndef first_ten_primes\n  primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\nend\n```"
  },
  {
    "task": "Write a program to reverse the elements of a given array.",
    "code": "```ruby\ndef reverse_array(arr)\n  arr.reverse\nend\n\n# Example usage:\narray = [1, 2, 3, 4, 5]\nreversed_array = reverse_array(array)\nputs reversed_array.inspect\n```"
  },
  {
    "task": "Implement an algorithm that finds the maximum value in an array of integers.",
    "code": "```ruby\ndef find_max_value(array)\n  max_value = array[0]\n  array.each do |num|\n    max_value = num if num > max_value\n  end\n  max_value\nend\n```"
  },
  {
    "task": "Design a routine to rotate an array to the right by a given number of steps.",
    "code": "```ruby\ndef rotate_array(arr, steps)\n  return arr if arr.empty? || steps % arr.length == 0\n  \n  steps = steps % arr.length\n  arr[-steps..-1] + arr[0...-steps]\nend\n```"
  },
  {
    "task": "Develop a function to merge two sorted arrays into one sorted array.",
    "code": "```ruby\ndef merge_sorted_arrays(arr1, arr2)\n  merged_array = []\n  i, j = 0, 0\n\n  while i < arr1.length && j < arr2.length\n    if arr1[i] < arr2[j]\n      merged_array << arr1[i]\n      i += 1\n    else\n      merged_array << arr2[j]\n      j += 1\n    end\n  end\n\n  while i < arr1.length\n    merged_array << arr1[i]\n    i += 1\n  end\n\n  while j < arr2.length\n    merged_array << arr2[j]\n    j += 1\n  end\n  \n  merged_array\nend\n```"
  },
  {
    "task": "Create a method to remove duplicate values from an array.",
    "code": "```ruby\ndef remove_duplicates(arr)\n  arr.uniq\nend\n```"
  },
  {
    "task": "Write a script to calculate the sum of all elements in an array.",
    "code": "```ruby\narray = [1, 2, 3, 4, 5]\nsum = array.sum\nputs sum\n```"
  },
  {
    "task": "Construct a function that finds the second largest element in an array.",
    "code": "```ruby\ndef second_largest(arr)\n  return nil if arr.length < 2\n  unique_sorted = arr.uniq.sort\n  unique_sorted[-2]\nend\n```"
  },
  {
    "task": "Design a program to check if an array contains a specific value.",
    "code": "```ruby\ndef contains_value?(array, value)\n  array.include?(value)\nend\n\n# Example usage:\narray = [1, 2, 3, 4, 5]\nvalue_to_check = 3\nputs contains_value?(array, value_to_check)\n```"
  },
  {
    "task": "Implement a function to sort an array of strings alphabetically.",
    "code": "```ruby\ndef sort_strings_alphabetically(arr)\n  arr.sort\nend\n```"
  },
  {
    "task": "Create a method to search for a value in an array using binary search.",
    "code": "```ruby\ndef binary_search(array, value)\n  low = 0\n  high = array.length - 1\n\n  while low <= high\n    mid = (low + high) / 2\n    if array[mid] == value\n      return mid\n    elsif array[mid] < value\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n\n  nil\nend\n```"
  },
  {
    "task": "Write a routine to calculate the average of numbers in an array.",
    "code": "```ruby\ndef calculate_average(numbers)\n  return 0 if numbers.empty?\n  sum = numbers.reduce(0.0) { |acc, num| acc + num }\n  sum / numbers.size\nend\n```"
  },
  {
    "task": "Develop a function to find the intersection of two arrays.",
    "code": "```ruby\ndef intersection(array1, array2)\n  array1 & array2\nend\n```"
  },
  {
    "task": "Implement a method to find the union of two arrays without duplicates.",
    "code": "```ruby\ndef union_without_duplicates(array1, array2)\n  (array1 + array2).uniq\nend\n```"
  },
  {
    "task": "Create a program that shifts all zeroes in an array to the end.",
    "code": "```ruby\ndef shift_zeroes_to_end(arr)\n  non_zeroes = arr.select { |num| num != 0 }\n  zeroes = arr.select { |num| num == 0 }\n  non_zeroes + zeroes\nend\n\n# Example usage\narr = [0, 1, 0, 3, 12]\nresult = shift_zeroes_to_end(arr)\nputs result.inspect\n```"
  },
  {
    "task": "Write a function to split an array into two parts at a given index.",
    "code": "```ruby\ndef split_array(arr, index)\n  [arr[0...index], arr[index..-1]]\nend\n```"
  },
  {
    "task": "Design a script to find all pairs in an array that sum up to a specific target.",
    "code": "```ruby\ndef find_pairs_with_sum(array, target)\n  pairs = []\n  array.each_with_index do |num, idx|\n    array[(idx + 1)..-1].each do |other_num|\n      pairs << [num, other_num] if num + other_num == target\n    end\n  end\n  pairs\nend\n\n# Example usage:\narray = [2, 4, 3, 5, 7, 8, 1]\ntarget = 9\nresult = find_pairs_with_sum(array, target)\nputs result.inspect\n```"
  },
  {
    "task": "Construct a method to remove all occurrences of a specific value from an array.",
    "code": "```ruby\ndef remove_value(array, value)\n  array.reject { |element| element == value }\nend\n```"
  },
  {
    "task": "Write a function to find the longest increasing subsequence in an array.",
    "code": "```ruby\ndef longest_increasing_subsequence(arr)\n  return [] if arr.empty?\n\n  lengths = Array.new(arr.size, 1)\n  previous = Array.new(arr.size, -1)\n\n  max_length = 1\n  max_index = 0\n\n  (1...arr.size).each do |i|\n    (0...i).each do |j|\n      if arr[i] > arr[j] && lengths[i] < lengths[j] + 1\n        lengths[i] = lengths[j] + 1\n        previous[i] = j\n        if lengths[i] > max_length\n          max_length = lengths[i]\n          max_index = i\n        end\n      end\n    end\n  end\n\n  result = []\n  while max_index != -1\n    result.unshift(arr[max_index])\n    max_index = previous[max_index]\n  end\n\n  result\nend\n```"
  },
  {
    "task": "Develop an algorithm to find the missing number in a sequential array.",
    "code": "```ruby\ndef find_missing_number(arr)\n  n = arr.length + 1\n  expected_sum = n * (n + 1) / 2\n  actual_sum = arr.sum\n  expected_sum - actual_sum\nend\n```"
  },
  {
    "task": "Create a program to find the common elements between two arrays.",
    "code": "```ruby\narray1 = [1, 2, 3, 4, 5]\narray2 = [3, 4, 5, 6, 7]\n\ncommon_elements = array1 & array2\nputs common_elements\n```"
  },
  {
    "task": "Implement a function to move all negative numbers to the beginning of an array.",
    "code": "```ruby\ndef move_negatives_to_front(arr)\n  arr.partition { |x| x < 0 }.flatten\nend\n```"
  },
  {
    "task": "Write a method to check if an array is a palindrome.",
    "code": "```ruby\ndef palindrome_array?(arr)\n  arr == arr.reverse\nend\n```"
  },
  {
    "task": "Design a routine to create a new array that is the element-wise sum of two input arrays.",
    "code": "```ruby\ndef element_wise_sum(array1, array2)\n  array1.zip(array2).map { |a, b| a + b }\nend\n```"
  },
  {
    "task": "Create a function to find the product of all elements in an array, excluding the current element.",
    "code": "```ruby\ndef product_except_self(nums)\n  total_product = nums.reduce(:*)\n  nums.map { |num| total_product / num }\nend\n```"
  },
  {
    "task": "Develop a script to remove elements from an array that are smaller than a given threshold.",
    "code": "```ruby\ndef remove_smaller_than_threshold(array, threshold)\n  array.reject { |element| element < threshold }\nend\n\n# Example usage\narr = [1, 5, 8, 10, 3]\nthreshold = 5\nfiltered_array = remove_smaller_than_threshold(arr, threshold)\nputs filtered_array.inspect\n```"
  },
  {
    "task": "Implement a method to clone an array without using built-in functions.",
    "code": "```ruby\ndef clone_array(original_array)\n  cloned_array = []\n  original_array.each do |element|\n    cloned_array << element\n  end\n  cloned_array\nend\n```"
  },
  {
    "task": "Create a program that rotates a 2D array (matrix) 90 degrees clockwise.",
    "code": "```ruby\ndef rotate_matrix_90_clockwise(matrix)\n  return matrix if matrix.empty? || matrix[0].empty?\n\n  n = matrix.size\n  rotated = Array.new(n) { Array.new(n) }\n\n  (0...n).each do |i|\n    (0...n).each do |j|\n      rotated[j][n - i - 1] = matrix[i][j]\n    end\n  end\n\n  rotated\nend\n\n# Example usage:\nmatrix = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n]\n\nrotated_matrix = rotate_matrix_90_clockwise(matrix)\nrotated_matrix.each { |row| puts row.join(' ') }\n```"
  },
  {
    "task": "Write a function to find the kth smallest element in an unsorted array.",
    "code": "```ruby\ndef kth_smallest(arr, k)\n  arr.sort[k - 1]\nend\n```"
  },
  {
    "task": "Design a routine to partition an array into even and odd numbers.",
    "code": "```ruby\ndef partition_even_odd(arr)\n  evens = []\n  odds = []\n  arr.each do |num|\n    if num.even?\n      evens << num\n    else\n      odds << num\n    end\n  end\n  [evens, odds]\nend\n```"
  },
  {
    "task": "Create a method to merge overlapping intervals in an array.",
    "code": "```ruby\ndef merge_intervals(intervals)\n  return intervals if intervals.empty?\n  \n  intervals.sort_by! { |interval| interval[0] }\n  merged = [intervals[0]]\n\n  intervals.each do |current|\n    last_merged = merged[-1]\n    if current[0] <= last_merged[1]\n      last_merged[1] = [last_merged[1], current[1]].max\n    else\n      merged << current\n    end\n  end\n\n  merged\nend\n```"
  },
  {
    "task": "Develop a function to count the frequency of each unique element in an array.",
    "code": "```ruby\ndef count_frequencies(array)\n  frequencies = Hash.new(0)\n  array.each do |element|\n    frequencies[element] += 1\n  end\n  frequencies\nend\n```"
  },
  {
    "task": "Write a program to generate all possible subsets of an array.",
    "code": "```ruby\ndef subsets(array)\n  result = [[]]\n  array.each do |element|\n    result += result.map { |subset| subset + [element] }\n  end\n  result\nend\n\narray = [1, 2, 3]\nall_subsets = subsets(array)\nputs all_subsets.inspect\n```"
  },
  {
    "task": "Implement a routine to cyclically permute the elements of an array.",
    "code": "```ruby\ndef cyclic_permute(array)\n  return array if array.empty?\n  array.unshift(array.pop)\nend\n\n# Example usage:\narr = [1, 2, 3, 4, 5]\ncyclic_permute(arr)\nputs arr.inspect  # Output: [5, 1, 2, 3, 4]\n```"
  },
  {
    "task": "Create a function that checks if two arrays are equal regardless of element order.",
    "code": "```ruby\ndef arrays_equal?(arr1, arr2)\n  arr1.sort == arr2.sort\nend\n```"
  },
  {
    "task": "Design a script to initialize an array with random integers within a specified range.",
    "code": "```ruby\nrange_min = 1\nrange_max = 100\narray_size = 10\n\nrandom_array = Array.new(array_size) { rand(range_min..range_max) }\n```"
  },
  {
    "task": "Write a method to convert an array of integers to a single concatenated number.",
    "code": "```ruby\ndef concatenate_numbers(array)\n  array.join.to_i\nend\n```"
  },
  {
    "task": "Develop a function to find the median value of an unsorted array.",
    "code": "```ruby\ndef find_median(array)\n  sorted = array.sort\n  length = sorted.length\n  if length.odd?\n    sorted[length / 2]\n  else\n    (sorted[length / 2 - 1] + sorted[length / 2]) / 2.0\n  end\nend\n```"
  },
  {
    "task": "Create a routine to determine if an array is sorted in ascending order.",
    "code": "```ruby\ndef sorted_ascending?(array)\n  array.each_cons(2).all? { |a, b| a <= b }\nend\n```"
  },
  {
    "task": "Implement a method to find the longest contiguous subarray with equal number of 0s and 1s.",
    "code": "```ruby\ndef find_max_length(nums)\n  count = 0\n  max_length = 0\n  hash_map = {0 => -1}\n\n  nums.each_with_index do |num, i|\n    count += (num == 1 ? 1 : -1)\n    \n    if hash_map.key?(count)\n      max_length = [max_length, i - hash_map[count]].max\n    else\n      hash_map[count] = i\n    end\n  end\n\n  max_length\nend\n```"
  },
  {
    "task": "Write a function to interleave two arrays of equal length.",
    "code": "```ruby\ndef interleave_arrays(arr1, arr2)\n  interleaved = []\n  arr1.each_with_index do |element, index|\n    interleaved << element << arr2[index]\n  end\n  interleaved\nend\n```"
  },
  {
    "task": "Design a program to replace each element in an array with the next greatest element.",
    "code": "```ruby\ndef replace_with_next_greatest(arr)\n  n = arr.length\n  return arr if n == 0\n\n  greatest = arr[n - 1]\n  arr[n - 1] = -1\n\n  (n - 2).downto(0) do |i|\n    temp = arr[i]\n    arr[i] = greatest\n    greatest = [greatest, temp].max\n  end\n\n  arr\nend\n\n# Example usage:\narray = [16, 17, 4, 3, 5, 2]\nresult = replace_with_next_greatest(array)\nputs result.inspect  # Output: [17, 5, 5, 5, 2, -1]\n```"
  },
  {
    "task": "Create a function to calculate the dot product of two numeric arrays.",
    "code": "```ruby\ndef dot_product(array1, array2)\n  return nil unless array1.size == array2.size\n  array1.zip(array2).map { |a, b| a * b }.sum\nend\n```"
  },
  {
    "task": "Develop a script to find the first recurring element in an array.",
    "code": "```ruby\ndef first_recurring_element(arr)\n  seen = {}\n  arr.each do |element|\n    return element if seen[element]\n    seen[element] = true\n  end\n  nil\nend\n\n# Example usage:\narray = [2, 5, 1, 2, 3, 5, 1, 2, 4]\nputs first_recurring_element(array) # Output: 2\n```"
  },
  {
    "task": "Write a method to check if an array is a subset of another array.",
    "code": "```ruby\ndef subset?(array1, array2)\n  array1.all? { |element| array2.include?(element) }\nend\n```"
  },
  {
    "task": "Implement a function to add a specific value to each element in an array.",
    "code": "```ruby\ndef add_value_to_each_element(array, value)\n  array.map { |element| element + value }\nend\n```"
  },
  {
    "task": "Create a program that finds the largest product of three numbers in an array.",
    "code": "```ruby\ndef largest_product_of_three(arr)\n  arr.sort!\n  [arr[-1] * arr[-2] * arr[-3], arr[0] * arr[1] * arr[-1]].max\nend\n\n# Example usage:\narray = [1, 10, 2, 6, 5, 3]\nputs largest_product_of_three(array)\n```"
  },
  {
    "task": "Design a routine to find all unique permutations of an array.",
    "code": "```ruby\ndef unique_permutations(array)\n  return [array] if array.length <= 1\n  permutations = []\n  array.uniq.each do |element|\n    sub_array = array - [element]\n    unique_permutations(sub_array).each do |perm|\n      permutations << [element] + perm\n    end\n  end\n  permutations\nend\n```"
  },
  {
    "task": "Write a function to transpose a square matrix represented as a 2D array.",
    "code": "```ruby\ndef transpose(matrix)\n  n = matrix.length\n  (0...n).each do |i|\n    (i...n).each do |j|\n      matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n    end\n  end\n  matrix\nend\n```"
  },
  {
    "task": "Develop a method to find the longest common prefix in an array of strings.",
    "code": "```ruby\ndef longest_common_prefix(strs)\n  return \"\" if strs.empty?\n  prefix = strs.first\n  strs.each do |str|\n    while str.index(prefix) != 0\n      prefix = prefix[0...-1]\n      return \"\" if prefix.empty?\n    end\n  end\n  prefix\nend\n```"
  },
  {
    "task": "Implement a function to flatten a multi-dimensional array into a single array.",
    "code": "```ruby\ndef flatten_array(arr)\n  arr.flatten\nend\n```"
  },
  {
    "task": "Create a script to shift elements of an array to the left by a given number of positions.",
    "code": "```ruby\ndef shift_left(arr, positions)\n  positions.times do\n    arr.push(arr.shift)\n  end\n  arr\nend\n\n# Example usage:\narray = [1, 2, 3, 4, 5]\npositions = 2\nshifted_array = shift_left(array, positions)\nputs shifted_array.inspect\n```"
  },
  {
    "task": "Write a routine to sort an array of objects based on a specific property.",
    "code": "```ruby\ndef sort_objects_by_property(objects, property)\n  objects.sort_by { |obj| obj[property] }\nend\n```"
  },
  {
    "task": "Design a program to find the smallest missing positive integer in an array.",
    "code": "```ruby\ndef smallest_missing_positive(arr)\n  arr = arr.select { |x| x > 0 }.uniq.sort\n  missing = 1\n  arr.each do |num|\n    break if num > missing\n    missing += 1 if num == missing\n  end\n  missing\nend\n\n# Example usage:\n# puts smallest_missing_positive([3, 4, -1, 1]) # Output: 2\n# puts smallest_missing_positive([1, 2, 0])     # Output: 3\n```"
  },
  {
    "task": "Create a function to calculate the cumulative sum of an array.",
    "code": "```ruby\ndef cumulative_sum(array)\n  cumulative = []\n  sum = 0\n  array.each do |num|\n    sum += num\n    cumulative << sum\n  end\n  cumulative\nend\n```"
  },
  {
    "task": "Develop a function to remove consecutive duplicate elements in an array.",
    "code": "```ruby\ndef remove_consecutive_duplicates(arr)\n  arr.chunk_while { |i, j| i == j }.map(&:first)\nend\n```"
  },
  {
    "task": "Implement a method to find the majority element in an array, if any.",
    "code": "```ruby\ndef find_majority_element(arr)\n  counts = Hash.new(0)\n  arr.each { |num| counts[num] += 1 }\n  majority_count = arr.size / 2\n  counts.each do |key, value|\n    return key if value > majority_count\n  end\n  nil\nend\n```"
  },
  {
    "task": "Write a script to split an array into chunks of a given size.",
    "code": "```ruby\ndef chunk_array(array, chunk_size)\n  array.each_slice(chunk_size).to_a\nend\n\n# Example usage\narray = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nchunk_size = 3\nchunks = chunk_array(array, chunk_size)\nputs chunks.inspect\n```"
  },
  {
    "task": "Create a program to calculate the difference between the largest and smallest values in an array.",
    "code": "```ruby\ndef calculate_difference(array)\n  return array.max - array.min\nend\n\narray = [10, 3, 5, 6, 2]\ndifference = calculate_difference(array)\nputs difference\n```"
  },
  {
    "task": "Design a routine to find the starting index of a target subarray in a larger array.",
    "code": "```ruby\ndef find_subarray_index(arr, subarr)\n  subarr_length = subarr.length\n  (0..arr.length - subarr_length).each do |i|\n    return i if arr[i, subarr_length] == subarr\n  end\n  nil\nend\n```"
  },
  {
    "task": "Write a function to compress an array by eliminating zero values.",
    "code": "```ruby\ndef compress_array(arr)\n  arr.reject { |value| value == 0 }\nend\n```"
  },
  {
    "task": "Develop a method to determine if an array can be split into two parts with equal sums.",
    "code": "```ruby\ndef can_split_into_equal_sums?(array)\n  total_sum = array.sum\n  return false if total_sum.odd?\n\n  target = total_sum / 2\n  current_sum = 0\n\n  array.each do |num|\n    current_sum += num\n    return true if current_sum == target\n  end\n\n  false\nend\n```"
  },
  {
    "task": "Implement a function to round each element in an array to the nearest integer.",
    "code": "```ruby\ndef round_elements(array)\n  array.map { |element| element.round }\nend\n```"
  },
  {
    "task": "Create a routine to generate an array of the Fibonacci sequence up to a given number.",
    "code": "```ruby\ndef fibonacci_sequence_up_to(max)\n  fib_array = [0, 1]\n  while (next_fib = fib_array[-1] + fib_array[-2]) <= max\n    fib_array << next_fib\n  end\n  fib_array\nend\n```"
  },
  {
    "task": "Write a program to find the longest repeating sequence in an array.",
    "code": "```ruby\ndef longest_repeating_sequence(arr)\n  return [] if arr.empty?\n\n  max_sequence = []\n  current_sequence = [arr.first]\n\n  (1...arr.size).each do |i|\n    if arr[i] == arr[i - 1]\n      current_sequence << arr[i]\n    else\n      if current_sequence.size > max_sequence.size\n        max_sequence = current_sequence\n      end\n      current_sequence = [arr[i]]\n    end\n  end\n\n  max_sequence = current_sequence if current_sequence.size > max_sequence.size\n  max_sequence\nend\n\n# Example usage\narr = [1, 2, 2, 3, 3, 3, 2, 2, 2, 2]\nputs longest_repeating_sequence(arr).inspect\n```"
  },
  {
    "task": "Design a function to multiply each element of an array by its index.",
    "code": "```ruby\ndef multiply_by_index(arr)\n  arr.map.with_index { |value, index| value * index }\nend\n```"
  },
  {
    "task": "Create a method to convert an array of characters into a single string.",
    "code": "```ruby\ndef array_to_string(char_array)\n  char_array.join\nend\n```"
  },
  {
    "task": "Develop a function to fill an array with a specified value.",
    "code": "```ruby\ndef fill_array(size, value)\n  Array.new(size, value)\nend\n```"
  },
  {
    "task": "Implement a routine to determine if an array has any duplicate elements.",
    "code": "```ruby\ndef has_duplicates?(array)\n  array.uniq.length != array.length\nend\n```"
  },
  {
    "task": "Write a script to reverse the order of words in an array of strings.",
    "code": "```ruby\nwords = [\"hello\", \"world\", \"from\", \"ruby\"]\nreversed_words = words.reverse\nputs reversed_words\n```"
  },
  {
    "task": "Create a function to calculate the total number of distinct elements in an array.",
    "code": "```ruby\ndef count_distinct_elements(array)\n  array.uniq.length\nend\n```"
  },
  {
    "task": "Design a program to find the largest gap between consecutive elements in a sorted array.",
    "code": "```ruby\ndef largest_gap(arr)\n  return 0 if arr.size < 2\n  \n  sorted_arr = arr.sort\n  max_gap = 0\n  \n  (1...sorted_arr.size).each do |i|\n    gap = sorted_arr[i] - sorted_arr[i - 1]\n    max_gap = [max_gap, gap].max\n  end\n  \n  max_gap\nend\n```"
  },
  {
    "task": "Write a routine to perform element-wise multiplication of two arrays.",
    "code": "```ruby\ndef elementwise_multiply(arr1, arr2)\n  arr1.zip(arr2).map { |a, b| a * b }\nend\n```"
  },
  {
    "task": "Develop a method to split a string into an array of words.",
    "code": "```ruby\ndef split_string_into_words(string)\n  string.split\nend\n```"
  },
  {
    "task": "Implement a function to find the longest contiguous subarray with a sum less than a target.",
    "code": "```ruby\ndef longest_subarray_with_sum_less_than_target(arr, target)\n  max_length = 0\n  current_sum = 0\n  start_index = 0\n  \n  arr.each_with_index do |value, end_index|\n    current_sum += value\n    \n    while current_sum >= target && start_index <= end_index\n      current_sum -= arr[start_index]\n      start_index += 1\n    end\n\n    max_length = [max_length, end_index - start_index + 1].max\n  end\n\n  max_length\nend\n```"
  },
  {
    "task": "Create a script to rotate a 2D array (matrix) 180 degrees.",
    "code": "```ruby\ndef rotate_180(matrix)\n  matrix.reverse.map(&:reverse)\nend\n\n# Example usage\nmatrix = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n]\n\nrotated_matrix = rotate_180(matrix)\np rotated_matrix\n```"
  },
  {
    "task": "Write a program to convert an array of binary digits to its decimal equivalent.",
    "code": "```ruby\ndef binary_to_decimal(binary_array)\n  binary_array.reverse.each_with_index.reduce(0) do |decimal, (bit, index)|\n    decimal + bit * (2 ** index)\n  end\nend\n\nbinary_array = [1, 0, 1, 1]\ndecimal = binary_to_decimal(binary_array)\nputs decimal\n```"
  },
  {
    "task": "Design a function to return a new array with elements squared from the input array.",
    "code": "```ruby\ndef square_elements(array)\n  array.map { |element| element ** 2 }\nend\n```"
  },
  {
    "task": "Create a method to check if all elements in an array are unique.",
    "code": "```ruby\ndef all_unique?(array)\n  array.uniq.length == array.length\nend\n```"
  },
  {
    "task": "Develop a routine to find the indices of all occurrences of a specific element in an array.",
    "code": "```ruby\ndef find_indices(array, element)\n  indices = []\n  array.each_with_index do |item, index|\n    indices << index if item == element\n  end\n  indices\nend\n```"
  },
  {
    "task": "Implement a function to merge multiple arrays into one.",
    "code": "```ruby\ndef merge_arrays(*arrays)\n  arrays.flatten\nend\n```"
  },
  {
    "task": "Write a script to convert an array of integers into a formatted string.",
    "code": "```ruby\ndef format_array(arr)\n  arr.join(', ')\nend\n\narr = [1, 2, 3, 4, 5]\nformatted_string = format_array(arr)\nputs formatted_string\n```"
  },
  {
    "task": "Create a program to find the largest sum of any contiguous subarray.",
    "code": "```ruby\ndef max_subarray_sum(arr)\n  max_sum = arr[0]\n  current_sum = arr[0]\n\n  arr[1..-1].each do |num|\n    current_sum = [num, current_sum + num].max\n    max_sum = [max_sum, current_sum].max\n  end\n\n  max_sum\nend\n\n# Example usage:\narr = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\nputs max_subarray_sum(arr)\n```"
  },
  {
    "task": "Design a function to compare two arrays and return the differences.",
    "code": "```ruby\ndef array_differences(arr1, arr2)\n  differences = []\n  differences.concat(arr1 - arr2)\n  differences.concat(arr2 - arr1)\n  differences\nend\n```"
  },
  {
    "task": "Write a method to find the longest subarray with elements in arithmetic progression.",
    "code": "```ruby\ndef longest_arith_subarray(arr)\n  return arr if arr.size < 2\n\n  longest = []\n  start = 0\n  while start < arr.size - 1\n    diff = arr[start + 1] - arr[start]\n    temp = [arr[start]]\n    \n    while start < arr.size - 1 && arr[start + 1] - arr[start] == diff\n      temp << arr[start + 1]\n      start += 1\n    end\n\n    longest = temp if temp.size > longest.size\n    start += 1\n  end\n\n  longest\nend\n```"
  },
  {
    "task": "Develop a routine to remove elements from an array based on a predicate function.",
    "code": "```ruby\ndef remove_if(array, &predicate)\n  array.reject(&predicate)\nend\n```"
  },
  {
    "task": "Implement a function to determine if two arrays have any common elements.",
    "code": "```ruby\ndef have_common_elements?(array1, array2)\n  (array1 & array2).any?\nend\n```"
  },
  {
    "task": "Create a script to initialize an empty array and populate it with user input.",
    "code": "```ruby\narray = []\nputs \"Enter values to populate the array (type 'exit' to stop):\"\nloop do\n  input = gets.chomp\n  break if input.downcase == 'exit'\n  array << input\nend\nputs \"The populated array is: #{array}\"\n```"
  },
  {
    "task": "Write a program to find the maximum sum of non-adjacent elements in an array.",
    "code": "```ruby\ndef max_sum_non_adjacent(arr)\n  return 0 if arr.empty?\n  return arr.max if arr.size == 1\n\n  include_prev = arr[0]\n  exclude_prev = 0\n\n  arr[1..-1].each do |num|\n    new_exclude = [include_prev, exclude_prev].max\n    include_prev = exclude_prev + num\n    exclude_prev = new_exclude\n  end\n\n  [include_prev, exclude_prev].max\nend\n\n# Example usage:\n# arr = [3, 2, 5, 10, 7]\n# puts max_sum_non_adjacent(arr) # Output: 15\n```"
  },
  {
    "task": "Design a function to shuffle an array randomly.",
    "code": "```ruby\ndef shuffle_array(arr)\n  arr.shuffle\nend\n```"
  },
  {
    "task": "Create a method to generate a new array where each element is the cumulative product of the input array.",
    "code": "```ruby\ndef cumulative_product(array)\n  result = []\n  product = 1\n  array.each do |num|\n    product *= num\n    result << product\n  end\n  result\nend\n```"
  },
  {
    "task": "Develop a routine to find the largest element in each row of a 2D array.",
    "code": "```ruby\ndef largest_in_each_row(matrix)\n  matrix.map { |row| row.max }\nend\n\n# Example Usage\nmatrix = [\n  [3, 5, 9],\n  [1, 6, 2],\n  [7, 8, 4]\n]\n\nresult = largest_in_each_row(matrix)\nputs result.inspect\n```"
  },
  {
    "task": "Implement a function to count the number of negative numbers in an array.",
    "code": "```ruby\ndef count_negatives(array)\n  array.count { |num| num < 0 }\nend\n```"
  },
  {
    "task": "Write a script to find the longest subarray with all distinct elements.",
    "code": "```ruby\ndef longest_distinct_subarray(arr)\n  n = arr.length\n  max_len = 0\n  start = 0\n  seen = {}\n\n  arr.each_with_index do |value, i|\n    if seen.key?(value) && seen[value] >= start\n      start = seen[value] + 1\n    end\n\n    seen[value] = i\n    max_len = [max_len, i - start + 1].max\n  end\n\n  max_len\nend\n\n# Example usage\narr = [1, 2, 1, 3, 4, 2, 3]\nputs longest_distinct_subarray(arr)\n```"
  }
]