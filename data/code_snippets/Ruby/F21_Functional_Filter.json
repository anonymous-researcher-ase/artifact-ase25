[
  {
    "task": "Filter out all even numbers from a list of integers.",
    "code": "```ruby\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nfiltered_numbers = numbers.reject(&:even?)\n```"
  },
  {
    "task": "Select all words from a list that start with the letter 'a'.",
    "code": "```ruby\nwords = [\"apple\", \"banana\", \"apricot\", \"cherry\", \"avocado\"]\nselected_words = words.select { |word| word.start_with?('a') }\n```"
  },
  {
    "task": "Find all positive numbers in a collection of integers.",
    "code": "```ruby\nnumbers = [1, -2, 3, 4, -5, 6]\npositive_numbers = numbers.select { |n| n > 0 }\n```"
  },
  {
    "task": "Extract all employees who are older than 30 from an employee directory.",
    "code": "```ruby\nemployees = [\n  { name: \"Alice\", age: 28 },\n  { name: \"Bob\", age: 35 },\n  { name: \"Charlie\", age: 32 },\n  { name: \"David\", age: 29 }\n]\n\nolder_than_30 = employees.select { |employee| employee[:age] > 30 }\n```"
  },
  {
    "task": "List all cities with a population greater than one million from a dataset.",
    "code": "```ruby\ncities = [\n  { name: 'New York', population: 8419000 },\n  { name: 'Los Angeles', population: 3980000 },\n  { name: 'Chicago', population: 2716000 },\n  { name: 'Houston', population: 2328000 },\n  { name: 'Phoenix', population: 1690000 },\n  { name: 'Philadelphia', population: 1584200 },\n  { name: 'San Antonio', population: 1547200 },\n  { name: 'San Diego', population: 1423800 },\n  { name: 'Dallas', population: 1341000 },\n  { name: 'San Jose', population: 1027000 }\n]\n\nlarge_cities = cities.select { |city| city[:population] > 1_000_000 }.map { |city| city[:name] }\nputs large_cities\n```"
  },
  {
    "task": "Filter out products that are out of stock from a product list.",
    "code": "```ruby\nproducts = [\n  { name: \"Product A\", in_stock: true },\n  { name: \"Product B\", in_stock: false },\n  { name: \"Product C\", in_stock: true }\n]\n\nin_stock_products = products.select { |product| product[:in_stock] }\n```"
  },
  {
    "task": "Select all students who have passed with a grade above 70 from a list of student scores.",
    "code": "```ruby\nstudents = [\n  { name: 'Alice', grade: 85 },\n  { name: 'Bob', grade: 55 },\n  { name: 'Charlie', grade: 72 },\n  { name: 'David', grade: 60 }\n]\n\npassed_students = students.select { |student| student[:grade] > 70 }\n```"
  },
  {
    "task": "Identify all strings in an array that contain the substring 'cat'.",
    "code": "```ruby\nstrings = [\"concatenate\", \"dog\", \"category\", \"caterpillar\", \"rat\"]\nresult = strings.select { |s| s.include?(\"cat\") }\n```"
  },
  {
    "task": "Extract all transactions above $1000 from a financial record.",
    "code": "```ruby\ntransactions = [1200, 800, 1500, 300, 2000]\nfiltered_transactions = transactions.select { |amount| amount > 1000 }\n```"
  },
  {
    "task": "Filter out all non-prime numbers from a list of numbers.",
    "code": "```ruby\nrequire 'prime'\n\ndef filter_primes(numbers)\n  numbers.select { |num| Prime.prime?(num) }\nend\n```"
  },
  {
    "task": "Select all books with more than 300 pages from a library catalog.",
    "code": "```ruby\nlibrary_catalog = [\n  { title: \"Book 1\", pages: 150 },\n  { title: \"Book 2\", pages: 320 },\n  { title: \"Book 3\", pages: 450 },\n  { title: \"Book 4\", pages: 200 }\n]\n\nbooks_with_more_than_300_pages = library_catalog.select { |book| book[:pages] > 300 }\n```"
  },
  {
    "task": "Identify all users who have logged in within the past week from a user database.",
    "code": "```ruby\nrequire 'date'\n\nusers = [\n  { name: 'Alice', last_login: Date.today - 2 },\n  { name: 'Bob', last_login: Date.today - 10 },\n  { name: 'Charlie', last_login: Date.today - 5 }\n]\n\none_week_ago = Date.today - 7\n\nrecent_users = users.select { |user| user[:last_login] > one_week_ago }\n\nputs recent_users\n```"
  },
  {
    "task": "Extract all URLs that contain 'https' from a list of web addresses.",
    "code": "```ruby\nweb_addresses = [\n  \"http://example.com\",\n  \"https://secure-site.com\",\n  \"ftp://fileserver.com\",\n  \"https://another-secure-site.org\"\n]\n\nhttps_urls = web_addresses.select { |url| url.include?(\"https\") }\n```"
  },
  {
    "task": "Find all movies released after the year 2000 from a movie database.",
    "code": "```ruby\nmovies = [\n  { title: \"The Matrix\", year: 1999 },\n  { title: \"Inception\", year: 2010 },\n  { title: \"The Lord of the Rings: The Fellowship of the Ring\", year: 2001 },\n  { title: \"Fight Club\", year: 1999 },\n  { title: \"The Dark Knight\", year: 2008 }\n]\n\nmovies_after_2000 = movies.select { |movie| movie[:year] > 2000 }\n```"
  },
  {
    "task": "Select all tasks with a priority level of 'high' from a task management system.",
    "code": "```ruby\ntasks = [\n  { name: \"Task 1\", priority: \"high\" },\n  { name: \"Task 2\", priority: \"medium\" },\n  { name: \"Task 3\", priority: \"high\" },\n  { name: \"Task 4\", priority: \"low\" }\n]\n\nhigh_priority_tasks = tasks.select { |task| task[:priority] == \"high\" }\n```"
  },
  {
    "task": "Filter out all words longer than five characters from a text document.",
    "code": "```ruby\ntext = File.read('text_document.txt')\nfiltered_words = text.split.select { |word| word.length <= 5 }\nputs filtered_words.join(' ')\n```"
  },
  {
    "task": "Extract all odd numbers from a sequence of integers.",
    "code": "```ruby\ndef filter_odds(sequence)\n  sequence.select(&:odd?)\nend\n```"
  },
  {
    "task": "Select all files larger than 10MB from a list of files.",
    "code": "```ruby\nfiles = [\n  { name: 'file1.txt', size: 5 * 1024 * 1024 },\n  { name: 'file2.txt', size: 15 * 1024 * 1024 },\n  { name: 'file3.txt', size: 25 * 1024 * 1024 },\n  { name: 'file4.txt', size: 8 * 1024 * 1024 }\n]\n\nlarge_files = files.select { |file| file[:size] > 10 * 1024 * 1024 }\n```"
  },
  {
    "task": "Identify all events occurring on weekends from an event schedule.",
    "code": "```ruby\nrequire 'date'\n\nevents = [\n  { name: 'Conference', date: Date.new(2023, 10, 6) },\n  { name: 'Workshop', date: Date.new(2023, 10, 7) },\n  { name: 'Meetup', date: Date.new(2023, 10, 8) },\n  { name: 'Seminar', date: Date.new(2023, 10, 9) }\n]\n\nweekend_events = events.select { |event| event[:date].saturday? || event[:date].sunday? }\n\nputs weekend_events\n```"
  },
  {
    "task": "Find all emails from a specific domain in an email list.",
    "code": "```ruby\ndef filter_emails_by_domain(emails, domain)\n  emails.select { |email| email.end_with?(\"@#{domain}\") }\nend\n\nemail_list = [\"user1@example.com\", \"user2@test.com\", \"user3@example.com\"]\ndomain = \"example.com\"\nfiltered_emails = filter_emails_by_domain(email_list, domain)\nputs filtered_emails\n```"
  },
  {
    "task": "Filter out all people not living in a specific city from a contact list.",
    "code": "```ruby\ndef filter_contacts_by_city(contacts, city)\n  contacts.select { |contact| contact[:city] == city }\nend\n\ncontact_list = [\n  { name: 'Alice', city: 'New York' },\n  { name: 'Bob', city: 'Los Angeles' },\n  { name: 'Charlie', city: 'New York' },\n  { name: 'David', city: 'Chicago' }\n]\n\nfiltered_contacts = filter_contacts_by_city(contact_list, 'New York')\nputs filtered_contacts\n```"
  },
  {
    "task": "Select all rectangles with an area greater than 50 from a list of rectangles.",
    "code": "```ruby\nrectangles = [{ width: 5, height: 10 }, { width: 8, height: 7 }, { width: 3, height: 4 }]\n\nlarge_rectangles = rectangles.select do |rectangle|\n  rectangle[:width] * rectangle[:height] > 50\nend\n```"
  },
  {
    "task": "Extract all elements that are not null from a collection.",
    "code": "```ruby\ncollection = [1, nil, 2, nil, 3, 4, nil, 5]\nfiltered_collection = collection.reject(&:nil?)\n```"
  },
  {
    "task": "Identify all registered voters over the age of 18 from a voter registration list.",
    "code": "```ruby\nvoter_registration_list = [\n  { name: 'Alice', age: 30 },\n  { name: 'Bob', age: 17 },\n  { name: 'Charlie', age: 25 },\n  { name: 'David', age: 16 },\n  { name: 'Eve', age: 20 }\n]\n\nregistered_voters_over_18 = voter_registration_list.select { |voter| voter[:age] > 18 }\n```"
  },
  {
    "task": "Select all cars manufactured after 2015 from a vehicle registry.",
    "code": "```ruby\nvehicles = [\n  { make: 'Toyota', model: 'Camry', year: 2010 },\n  { make: 'Ford', model: 'Mustang', year: 2016 },\n  { make: 'Chevrolet', model: 'Malibu', year: 2018 }\n]\n\ncars_after_2015 = vehicles.select { |car| car[:year] > 2015 }\n```"
  },
  {
    "task": "Filter out all negative numbers from a dataset of integers.",
    "code": "```ruby\ndataset = [3, -1, 7, -5, 9, -2, 0, 6]\nfiltered_dataset = dataset.select { |num| num >= 0 }\n```"
  },
  {
    "task": "Extract all characters from a string that are uppercase.",
    "code": "```ruby\ndef extract_uppercase(str)\n  str.chars.select { |char| char =~ /[A-Z]/ }.join\nend\n```"
  },
  {
    "task": "Identify all projects with a deadline within the next month from a project database.",
    "code": "```ruby\nrequire 'date'\n\nprojects = [\n  { name: 'Project Alpha', deadline: Date.new(2023, 11, 15) },\n  { name: 'Project Beta', deadline: Date.new(2023, 12, 5) },\n  { name: 'Project Gamma', deadline: Date.new(2024, 1, 20) }\n]\n\ncurrent_date = Date.today\nnext_month = current_date >> 1\n\nprojects_within_next_month = projects.select do |project|\n  project[:deadline] <= next_month\nend\n\nputs projects_within_next_month\n```"
  },
  {
    "task": "Select all athletes with a score higher than 90 from a competition result list.",
    "code": "```ruby\nathletes = [\n  { name: 'Athlete 1', score: 88 },\n  { name: 'Athlete 2', score: 92 },\n  { name: 'Athlete 3', score: 95 },\n  { name: 'Athlete 4', score: 85 }\n]\n\nhigh_scorers = athletes.select { |athlete| athlete[:score] > 90 }\n```"
  },
  {
    "task": "Filter out all strings that do not contain vowels from a list of words.",
    "code": "```ruby\nwords = [\"sky\", \"apple\", \"dry\", \"orange\", \"fly\"]\n\nfiltered_words = words.select { |word| word =~ /[aeiou]/i }\n\nputs filtered_words\n```"
  },
  {
    "task": "Extract all dates that fall on a weekday from a calendar.",
    "code": "```ruby\nrequire 'date'\n\ndef filter_weekdays(dates)\n  dates.select { |date| !date.saturday? && !date.sunday? }\nend\n\ncalendar = [\n  Date.new(2023, 10, 1),\n  Date.new(2023, 10, 2),\n  Date.new(2023, 10, 3),\n  Date.new(2023, 10, 4),\n  Date.new(2023, 10, 5),\n  Date.new(2023, 10, 6),\n  Date.new(2023, 10, 7)\n]\n\nweekdays = filter_weekdays(calendar)\nputs weekdays\n```"
  },
  {
    "task": "Find all software versions that are stable releases from a list of software versions.",
    "code": "```ruby\nversions = [\"1.0.0\", \"1.1.0-alpha\", \"2.0.0\", \"2.1.0-beta\", \"3.0.0-stable\", \"4.0.0\"]\n\nstable_versions = versions.select { |version| version.match?(/^\\d+\\.\\d+\\.\\d+$/) }\n\nputs stable_versions\n```"
  },
  {
    "task": "Select all temperatures above freezing from a weather report.",
    "code": "```ruby\ntemperatures = [32, 45, 28, 50, 31, 40, 33]\nabove_freezing = temperatures.select { |temp| temp > 32 }\n```"
  },
  {
    "task": "Identify all countries with a GDP per capita above $40,000 from a country dataset.",
    "code": "```ruby\ncountries = [\n  { name: 'CountryA', gdp_per_capita: 45000 },\n  { name: 'CountryB', gdp_per_capita: 35000 },\n  { name: 'CountryC', gdp_per_capita: 50000 },\n  { name: 'CountryD', gdp_per_capita: 30000 }\n]\n\nrich_countries = countries.select { |country| country[:gdp_per_capita] > 40000 }\n```"
  },
  {
    "task": "Filter out all names shorter than four letters from a roster.",
    "code": "```ruby\nroster = [\"John\", \"Al\", \"Sue\", \"Chris\", \"Ben\"]\nfiltered_roster = roster.select { |name| name.length >= 4 }\n```"
  },
  {
    "task": "Extract all numbers divisible by five from a sequence.",
    "code": "```ruby\nsequence = [1, 5, 10, 15, 18, 20, 25, 30]\ndivisible_by_five = sequence.select { |num| num % 5 == 0 }\nputs divisible_by_five\n```"
  },
  {
    "task": "Select all movies with a rating above 4 stars from a film review site.",
    "code": "```ruby\nmovies = [\n  { title: \"Movie 1\", rating: 4.3 },\n  { title: \"Movie 2\", rating: 3.9 },\n  { title: \"Movie 3\", rating: 4.7 },\n  { title: \"Movie 4\", rating: 2.5 },\n  { title: \"Movie 5\", rating: 5.0 }\n]\n\nhigh_rated_movies = movies.select { |movie| movie[:rating] > 4.0 }\n```"
  },
  {
    "task": "Find all jobs with a salary above $50,000 from a job listing.",
    "code": "```ruby\njobs = [\n  { title: 'Software Developer', salary: 60000 },\n  { title: 'Data Analyst', salary: 48000 },\n  { title: 'Project Manager', salary: 75000 },\n  { title: 'UX Designer', salary: 50000 }\n]\n\nhigh_salary_jobs = jobs.select { |job| job[:salary] > 50000 }\n```"
  },
  {
    "task": "Filter out all entries without an email address from a contact form submission list.",
    "code": "```ruby\ncontact_submissions = [\n  { name: \"Alice\", email: \"alice@example.com\" },\n  { name: \"Bob\", email: nil },\n  { name: \"Charlie\", email: \"charlie@example.com\" },\n  { name: \"David\", email: \"\" }\n]\n\nfiltered_submissions = contact_submissions.select { |submission| submission[:email] && !submission[:email].empty? }\n```"
  },
  {
    "task": "Identify all animals weighing more than 50kg from a zoo inventory.",
    "code": "```ruby\nzoo_inventory = [\n  { name: 'Elephant', weight: 1200 },\n  { name: 'Tiger', weight: 220 },\n  { name: 'Kangaroo', weight: 85 },\n  { name: 'Monkey', weight: 35 },\n  { name: 'Penguin', weight: 25 }\n]\n\nheavy_animals = zoo_inventory.select { |animal| animal[:weight] > 50 }\n```"
  },
  {
    "task": "Select all songs with a duration longer than three minutes from a playlist.",
    "code": "```ruby\nplaylist = [\n  { title: 'Song 1', duration: 200 },\n  { title: 'Song 2', duration: 250 },\n  { title: 'Song 3', duration: 190 },\n  { title: 'Song 4', duration: 310 }\n]\n\nsongs_longer_than_three_minutes = playlist.select { |song| song[:duration] > 180 }\n```"
  },
  {
    "task": "Extract all accounts with a balance below zero from a bank statement.",
    "code": "```ruby\naccounts = [\n  { account_number: '12345', balance: 100.0 },\n  { account_number: '67890', balance: -50.0 },\n  { account_number: '54321', balance: 200.0 },\n  { account_number: '09876', balance: -10.0 }\n]\n\nnegative_balance_accounts = accounts.select { |account| account[:balance] < 0 }\n\nputs negative_balance_accounts\n```"
  },
  {
    "task": "Filter out all non-alphabetic characters from a string of text.",
    "code": "```ruby\ndef filter_alphabetic(text)\n  text.chars.select { |char| char.match?(/[A-Za-z]/) }.join\nend\n```"
  },
  {
    "task": "Select all participants who scored above average in a competition.",
    "code": "```ruby\nparticipants = [\n  { name: 'Alice', score: 85 },\n  { name: 'Bob', score: 95 },\n  { name: 'Charlie', score: 75 },\n  { name: 'David', score: 90 }\n]\n\naverage_score = participants.map { |p| p[:score] }.sum / participants.size.to_f\n\nabove_average_participants = participants.select { |p| p[:score] > average_score }\n\nabove_average_participants.each { |p| puts p[:name] }\n```"
  },
  {
    "task": "Find all houses priced under $300,000 from a real estate database.",
    "code": "```ruby\nhouses = [\n  { id: 1, price: 250_000 },\n  { id: 2, price: 320_000 },\n  { id: 3, price: 275_000 },\n  { id: 4, price: 400_000 }\n]\n\naffordable_houses = houses.select { |house| house[:price] < 300_000 }\n```"
  },
  {
    "task": "Identify all plants that bloom in spring from a botanical catalog.",
    "code": "```ruby\nbotanical_catalog = [\n  { name: 'Tulip', blooms_in: 'spring' },\n  { name: 'Rose', blooms_in: 'summer' },\n  { name: 'Daffodil', blooms_in: 'spring' },\n  { name: 'Sunflower', blooms_in: 'summer' }\n]\n\nspring_blooming_plants = botanical_catalog.select { |plant| plant[:blooms_in] == 'spring' }\n```"
  },
  {
    "task": "Extract all passwords that are longer than eight characters from a user database.",
    "code": "```ruby\nuser_database = [\n  { username: 'user1', password: 'short' },\n  { username: 'user2', password: 'longpassword123' },\n  { username: 'user3', password: 'pass' },\n  { username: 'user4', password: 'anotherlongpassword' }\n]\n\nlong_passwords = user_database.map { |user| user[:password] }.select { |password| password.length > 8 }\n\nputs long_passwords\n```"
  },
  {
    "task": "Filter out all projects that are not yet started from a project management tool.",
    "code": "```ruby\nprojects = [\n  { name: \"Project A\", status: \"completed\" },\n  { name: \"Project B\", status: \"not started\" },\n  { name: \"Project C\", status: \"in progress\" },\n  { name: \"Project D\", status: \"not started\" },\n  { name: \"Project E\", status: \"completed\" }\n]\n\nstarted_projects = projects.reject { |project| project[:status] == \"not started\" }\n```"
  },
  {
    "task": "Select all days with temperatures exceeding 25\u00b0C from a climate report.",
    "code": "```ruby\nclimate_report = [\n  { day: 'Monday', temperature: 22 },\n  { day: 'Tuesday', temperature: 27 },\n  { day: 'Wednesday', temperature: 24 },\n  { day: 'Thursday', temperature: 30 },\n  { day: 'Friday', temperature: 28 }\n]\n\nhot_days = climate_report.select { |entry| entry[:temperature] > 25 }\n```"
  },
  {
    "task": "Find all recipes that are vegetarian from a cookbook.",
    "code": "```ruby\ncookbook = [\n  { name: \"Spaghetti Bolognese\", vegetarian: false },\n  { name: \"Vegetable Stir Fry\", vegetarian: true },\n  { name: \"Chicken Curry\", vegetarian: false },\n  { name: \"Mushroom Risotto\", vegetarian: true }\n]\n\nvegetarian_recipes = cookbook.select { |recipe| recipe[:vegetarian] }\n\nvegetarian_recipes.each { |recipe| puts recipe[:name] }\n```"
  },
  {
    "task": "Identify all articles that mention a specific keyword from a news feed.",
    "code": "```ruby\ndef filter_articles_by_keyword(articles, keyword)\n  articles.select { |article| article.include?(keyword) }\nend\n\n# Example usage (assuming each article is a string in the articles array):\nnews_feed = [\n  \"Breaking news: Keyword found in this article!\",\n  \"Another article without the keyword.\",\n  \"Keyword is here too!\",\n  \"Nothing interesting in this one.\"\n]\n\nkeyword = \"Keyword\"\nfiltered_articles = filter_articles_by_keyword(news_feed, keyword)\nputs filtered_articles\n```"
  },
  {
    "task": "Extract all files with the '.jpg' extension from a directory.",
    "code": "```ruby\nDir.entries('your_directory_path').select { |file| file.end_with?('.jpg') }\n```"
  },
  {
    "task": "Filter out all transactions that are not categorized from a financial statement.",
    "code": "```ruby\ntransactions = [\n  { amount: 100, category: 'Groceries' },\n  { amount: 50, category: nil },\n  { amount: 200, category: 'Utilities' },\n  { amount: 75, category: nil }\n]\n\ncategorized_transactions = transactions.select { |transaction| !transaction[:category].nil? }\n\nputs categorized_transactions\n```"
  },
  {
    "task": "Select all paintings created before 1900 from an art gallery collection.",
    "code": "```ruby\nclass Painting\n  attr_reader :title, :year\n\n  def initialize(title, year)\n    @title = title\n    @year = year\n  end\nend\n\ngallery = [\n  Painting.new(\"Starry Night\", 1889),\n  Painting.new(\"The Persistence of Memory\", 1931),\n  Painting.new(\"The Night Watch\", 1642),\n  Painting.new(\"Guernica\", 1937),\n]\n\npaintings_before_1900 = gallery.select { |painting| painting.year < 1900 }\n```"
  },
  {
    "task": "Find all students with perfect attendance from a school record.",
    "code": "```ruby\nstudents = [\n  { name: 'Alice', attendance: 100 },\n  { name: 'Bob', attendance: 95 },\n  { name: 'Charlie', attendance: 100 },\n  { name: 'David', attendance: 90 }\n]\n\nperfect_attendance_students = students.select { |student| student[:attendance] == 100 }\n```"
  },
  {
    "task": "Identify all messages sent by a specific user from a chat application.",
    "code": "```ruby\ndef filter_messages_by_user(messages, username)\n  messages.select { |message| message[:user] == username }\nend\n\n# Example usage:\n# messages = [\n#   { user: 'alice', content: 'Hi there!' },\n#   { user: 'bob', content: 'Hello!' },\n#   { user: 'alice', content: 'How are you?' }\n# ]\n# username = 'alice'\n# puts filter_messages_by_user(messages, username)\n```"
  },
  {
    "task": "Extract all elements greater than 100 from an array of numbers.",
    "code": "```ruby\nnumbers = [150, 23, 75, 200, 123, 50]\nfiltered_numbers = numbers.select { |num| num > 100 }\n```"
  },
  {
    "task": "Filter out all words that do not end in 'ed' from a paragraph.",
    "code": "```ruby\nparagraph = \"She walked to the store and decided she needed some bread but realized she forgot her wallet.\"\n\nfiltered_words = paragraph.split.select { |word| word.end_with?('ed') }\nputs filtered_words\n```"
  },
  {
    "task": "Select all flights departing before noon from a flight schedule.",
    "code": "```ruby\nflights = [\n  { flight_number: 'AA123', departure_time: '08:30' },\n  { flight_number: 'BA456', departure_time: '13:00' },\n  { flight_number: 'CA789', departure_time: '11:45' }\n]\n\nflights_before_noon = flights.select do |flight|\n  Time.parse(flight[:departure_time]) < Time.parse('12:00')\nend\n\nputs flights_before_noon\n```"
  },
  {
    "task": "Find all products priced above $20 from an online store inventory.",
    "code": "```ruby\nproducts = [\n  { name: 'Book', price: 15 },\n  { name: 'Game', price: 25 },\n  { name: 'Pen', price: 5 },\n  { name: 'Headphones', price: 45 }\n]\n\nexpensive_products = products.select { |product| product[:price] > 20 }\n```"
  },
  {
    "task": "Identify all sessions longer than one hour from a webinar series.",
    "code": "```ruby\nsessions = [\n  { title: \"Session 1\", duration_in_minutes: 45 },\n  { title: \"Session 2\", duration_in_minutes: 90 },\n  { title: \"Session 3\", duration_in_minutes: 120 },\n  { title: \"Session 4\", duration_in_minutes: 30 }\n]\n\nlong_sessions = sessions.select { |session| session[:duration_in_minutes] > 60 }\n```"
  },
  {
    "task": "Extract all images with a resolution higher than 1080p from a photo library.",
    "code": "```ruby\nclass Image\n  attr_accessor :resolution\n\n  def initialize(resolution)\n    @resolution = resolution\n  end\n\n  def high_resolution?\n    width, height = @resolution.split('x').map(&:to_i)\n    width > 1920 && height > 1080\n  end\nend\n\nphoto_library = [\n  Image.new('1920x1080'),\n  Image.new('2560x1440'),\n  Image.new('3840x2160'),\n  Image.new('1280x720'),\n  Image.new('1920x1200')\n]\n\nhigh_res_images = photo_library.select(&:high_resolution?)\n```"
  },
  {
    "task": "Filter out all responses that are not 'yes' or 'no' from a survey result.",
    "code": "```ruby\nsurvey_responses = [\"yes\", \"no\", \"maybe\", \"yes\", \"no\", \"not sure\", \"yes\"]\n\nfiltered_responses = survey_responses.select { |response| response == \"yes\" || response == \"no\" }\n\nputs filtered_responses\n```"
  },
  {
    "task": "Select all tweets with more than 100 likes from a Twitter feed.",
    "code": "```ruby\ntweets = [\n  { content: \"Hello World!\", likes: 50 },\n  { content: \"Ruby is awesome!\", likes: 150 },\n  { content: \"I love coding!\", likes: 200 }\n]\n\npopular_tweets = tweets.select { |tweet| tweet[:likes] > 100 }\n```"
  },
  {
    "task": "Find all links that are broken from a webpage.",
    "code": "```ruby\nrequire 'nokogiri'\nrequire 'open-uri'\nrequire 'net/http'\n\ndef broken_links(url)\n  begin\n    doc = Nokogiri::HTML(URI.open(url))\n    links = doc.css('a').map { |link| link['href'] }.compact\n\n    links.select do |link|\n      begin\n        uri = URI.join(url, link)\n        response = Net::HTTP.get_response(uri)\n        response.code.to_i >= 400\n      rescue\n        true\n      end\n    end\n  rescue\n    []\n  end\nend\n\n# Example usage:\n# broken_links('http://example.com')\n```"
  },
  {
    "task": "Identify all machines that are currently offline from a network monitoring tool.",
    "code": "```ruby\nmachines = [\n  { name: 'Server1', status: 'online' },\n  { name: 'Server2', status: 'offline' },\n  { name: 'Server3', status: 'offline' },\n  { name: 'Server4', status: 'online' }\n]\n\noffline_machines = machines.select { |machine| machine[:status] == 'offline' }\n```"
  },
  {
    "task": "Extract all invoices with a due date in the current month from an accounting system.",
    "code": "```ruby\nrequire 'date'\n\ninvoices = [\n  { id: 1, due_date: Date.new(2023, 10, 15) },\n  { id: 2, due_date: Date.new(2023, 11, 5) },\n  { id: 3, due_date: Date.new(2023, 10, 25) }\n]\n\ncurrent_month = Date.today.month\ncurrent_year = Date.today.year\n\ndue_this_month = invoices.select do |invoice|\n  invoice[:due_date].month == current_month && invoice[:due_date].year == current_year\nend\n\nputs due_this_month\n```"
  },
  {
    "task": "Filter out all lines in a file that start with a '#' from a configuration file.",
    "code": "```ruby\nfiltered_lines = File.readlines('config_file.txt').reject { |line| line.start_with?('#') }\n```"
  },
  {
    "task": "Select all posts with a comment count higher than 50 from a blog.",
    "code": "```ruby\nposts = [\n  { title: 'Post 1', comments_count: 45 },\n  { title: 'Post 2', comments_count: 75 },\n  { title: 'Post 3', comments_count: 30 },\n  { title: 'Post 4', comments_count: 51 }\n]\n\nfiltered_posts = posts.select { |post| post[:comments_count] > 50 }\n```"
  },
  {
    "task": "Find all offers that expire within the next week from a promotional database.",
    "code": "```ruby\nrequire 'date'\n\ndef filter_offers_within_next_week(offers)\n  today = Date.today\n  next_week = today + 7\n\n  offers.select do |offer|\n    expiration_date = Date.parse(offer[:expiration_date])\n    expiration_date >= today && expiration_date <= next_week\n  end\nend\n```"
  },
  {
    "task": "Identify all items that are on sale from a shopping catalog.",
    "code": "```ruby\ncatalog = [\n  { name: \"Laptop\", price: 999, on_sale: false },\n  { name: \"Headphones\", price: 199, on_sale: true },\n  { name: \"Smartphone\", price: 599, on_sale: true },\n  { name: \"Monitor\", price: 299, on_sale: false }\n]\n\non_sale_items = catalog.select { |item| item[:on_sale] }\n```"
  },
  {
    "task": "Extract all notes that mention 'urgent' from a meeting record.",
    "code": "```ruby\nmeeting_notes = [\n  \"Discuss project timeline\",\n  \"urgent: finalize budget\",\n  \"Review team performance\",\n  \"urgent: client feedback\",\n  \"Plan next quarter goals\"\n]\n\nurgent_notes = meeting_notes.select { |note| note.include?('urgent') }\n```"
  },
  {
    "task": "Filter out all numbers that do not have a remainder when divided by two from a list.",
    "code": "```ruby\nnumbers = [1, 2, 3, 4, 5, 6]\nresult = numbers.reject { |number| number % 2 == 0 }\nputs result\n```"
  },
  {
    "task": "Select all concerts happening in the summer from an event calendar.",
    "code": "```ruby\nevents = [\n  { name: \"Concert A\", date: Date.new(2023, 6, 21) },\n  { name: \"Concert B\", date: Date.new(2023, 7, 15) },\n  { name: \"Concert C\", date: Date.new(2023, 8, 22) },\n  { name: \"Concert D\", date: Date.new(2023, 9, 1) }\n]\n\nsummer_concerts = events.select do |event|\n  event[:date].month >= 6 && event[:date].month <= 8\nend\n\nsummer_concerts\n```"
  },
  {
    "task": "Find all users with more than 1000 followers from a social media platform.",
    "code": "```ruby\nusers = [\n  { name: 'Alice', followers: 1500 },\n  { name: 'Bob', followers: 900 },\n  { name: 'Charlie', followers: 1200 },\n  { name: 'David', followers: 800 }\n]\n\npopular_users = users.select { |user| user[:followers] > 1000 }\n```"
  },
  {
    "task": "Identify all stocks with a growth rate above 10% from a financial portfolio.",
    "code": "```ruby\nportfolio = [\n  { name: \"Stock A\", growth_rate: 8 },\n  { name: \"Stock B\", growth_rate: 12 },\n  { name: \"Stock C\", growth_rate: 15 },\n  { name: \"Stock D\", growth_rate: 5 }\n]\n\nhigh_growth_stocks = portfolio.select { |stock| stock[:growth_rate] > 10 }\n```"
  },
  {
    "task": "Extract all reviews that have a five-star rating from a product review site.",
    "code": "```ruby\nreviews = [\n  { rating: 5, content: \"Excellent product!\" },\n  { rating: 4, content: \"Very good, but room for improvement.\" },\n  { rating: 5, content: \"Loved it, highly recommend.\" },\n  { rating: 3, content: \"Average experience.\" }\n]\n\nfive_star_reviews = reviews.select { |review| review[:rating] == 5 }\n```"
  },
  {
    "task": "Filter out all emails that are not flagged from an inbox.",
    "code": "```ruby\ninbox = [\n  { email: 'example1@example.com', flagged: true },\n  { email: 'example2@example.com', flagged: false },\n  { email: 'example3@example.com', flagged: true }\n]\n\nflagged_emails = inbox.select { |email| email[:flagged] }\n```"
  },
  {
    "task": "Select all entries with a timestamp from the past 24 hours from a log file.",
    "code": "```ruby\nrequire 'time'\n\ndef filter_recent_entries(log_file_path)\n  cutoff_time = Time.now - 24 * 60 * 60\n  File.readlines(log_file_path).select do |line|\n    timestamp_str = line.split.first\n    timestamp = Time.parse(timestamp_str) rescue nil\n    timestamp && timestamp > cutoff_time\n  end\nend\n\n# Example usage:\n# recent_entries = filter_recent_entries('path/to/log_file.log')\n```"
  },
  {
    "task": "Find all books by a specific author from a library database.",
    "code": "```ruby\ndef find_books_by_author(library, author)\n  library.select { |book| book[:author] == author }\nend\n\n# Example usage:\nlibrary = [\n  { title: 'Book 1', author: 'Author A' },\n  { title: 'Book 2', author: 'Author B' },\n  { title: 'Book 3', author: 'Author A' }\n]\n\nbooks_by_author_a = find_books_by_author(library, 'Author A')\nputs books_by_author_a\n```"
  },
  {
    "task": "Identify all donations above $500 from a charity fundraiser report.",
    "code": "```ruby\ndonations = [250, 550, 800, 300, 600, 450]\nhigh_donations = donations.select { |donation| donation > 500 }\n```"
  },
  {
    "task": "Extract all assignments due in the next week from a course syllabus.",
    "code": "```ruby\nrequire 'date'\n\nsyllabus = [\n  { assignment: 'Essay 1', due_date: Date.new(2023, 10, 20) },\n  { assignment: 'Project', due_date: Date.new(2023, 10, 25) },\n  { assignment: 'Homework 5', due_date: Date.new(2023, 10, 28) },\n  { assignment: 'Quiz 3', due_date: Date.new(2023, 11, 1) }\n]\n\ntoday = Date.today\nnext_week = today + 7\n\ndue_next_week = syllabus.select do |assignment|\n  assignment[:due_date] > today && assignment[:due_date] <= next_week\nend\n\nputs due_next_week\n```"
  },
  {
    "task": "Filter out all movies that are not in English from a streaming service.",
    "code": "```ruby\nmovies = [\n  { title: \"Inception\", language: \"English\" },\n  { title: \"Am\u00e9lie\", language: \"French\" },\n  { title: \"Parasite\", language: \"Korean\" },\n  { title: \"The Dark Knight\", language: \"English\" }\n]\n\nenglish_movies = movies.select { |movie| movie[:language] == \"English\" }\n```"
  },
  {
    "task": "Select all landmarks located in Europe from a travel guide.",
    "code": "```ruby\nlandmarks = [\n  { name: \"Eiffel Tower\", location: \"Europe\" },\n  { name: \"Statue of Liberty\", location: \"North America\" },\n  { name: \"Colosseum\", location: \"Europe\" },\n  { name: \"Great Wall of China\", location: \"Asia\" }\n]\n\neurope_landmarks = landmarks.select { |landmark| landmark[:location] == \"Europe\" }\n```"
  },
  {
    "task": "Find all contracts that are set to renew next month from a contract management system.",
    "code": "```ruby\nrequire 'date'\n\ncontracts = [\n  { id: 1, renewal_date: Date.new(2023, 11, 15) },\n  { id: 2, renewal_date: Date.new(2023, 12, 10) },\n  { id: 3, renewal_date: Date.new(2024, 1, 5) }\n]\n\nnext_month = Date.today.next_month\ncontracts_to_renew = contracts.select do |contract|\n  contract[:renewal_date].year == next_month.year &&\n  contract[:renewal_date].month == next_month.month\nend\n\nputs contracts_to_renew\n```"
  },
  {
    "task": "Identify all volunteer hours logged in the past year from a non-profit organization database.",
    "code": "```ruby\nrequire 'date'\n\ndef filter_volunteer_hours(volunteer_hours)\n  one_year_ago = Date.today << 12\n  volunteer_hours.select { |entry| Date.parse(entry[:date]) >= one_year_ago }\nend\n\n# Example usage:\n# volunteer_hours = [\n#   { date: '2022-01-01', hours: 5 },\n#   { date: '2023-02-15', hours: 3 },\n#   { date: '2023-08-20', hours: 7 }\n# ]\n# puts filter_volunteer_hours(volunteer_hours)\n```"
  },
  {
    "task": "Extract all elements that are not strings from a mixed-type list.",
    "code": "```ruby\nmixed_list = [1, 'apple', :symbol, 3.14, 'banana', 42]\nnon_strings = mixed_list.reject { |element| element.is_a?(String) }\n```"
  },
  {
    "task": "Filter out all orders that are not yet shipped from an e-commerce system.",
    "code": "```ruby\norders = [\n  { id: 1, status: 'shipped' },\n  { id: 2, status: 'processing' },\n  { id: 3, status: 'shipped' },\n  { id: 4, status: 'pending' }\n]\n\nshipped_orders = orders.select { |order| order[:status] == 'shipped' }\n```"
  },
  {
    "task": "Select all emails sent from a specific address in an email server.",
    "code": "```ruby\nemails = [\n  { from: 'example1@test.com', subject: 'Hello' },\n  { from: 'specific_address@example.com', subject: 'Meeting' },\n  { from: 'example2@test.com', subject: 'Greetings' },\n  { from: 'specific_address@example.com', subject: 'Follow-up' }\n]\n\nspecific_address = 'specific_address@example.com'\nfiltered_emails = emails.select { |email| email[:from] == specific_address }\n```"
  },
  {
    "task": "Find all passwords with at least one special character from a security database.",
    "code": "```ruby\npasswords = ['password1', 'hello@world', 'secure#123', 'simplepass', 'admin!']\n\nspecial_character_passwords = passwords.select do |password|\n  password =~ /[!@#$%^&*()_+{}\\[\\]:;'\"<>,.?\\/\\\\|`~\\-]/\nend\n\nputs special_character_passwords\n```"
  },
  {
    "task": "Identify all courses with a prerequisite from a university catalog.",
    "code": "```ruby\ncourses = [\n  { name: 'Calculus', prerequisite: 'Algebra' },\n  { name: 'Physics', prerequisite: 'Calculus' },\n  { name: 'Literature', prerequisite: nil },\n  { name: 'Chemistry', prerequisite: 'Physics' }\n]\n\ncourses_with_prerequisite = courses.select { |course| course[:prerequisite] }\n```"
  },
  {
    "task": "Extract all genes associated with a specific trait from a genetic database.",
    "code": "```ruby\ngenes = [\n  { name: 'GeneA', traits: ['Trait1', 'Trait2'] },\n  { name: 'GeneB', traits: ['Trait3', 'Trait4'] },\n  { name: 'GeneC', traits: ['Trait1', 'Trait5'] }\n]\n\nspecific_trait = 'Trait1'\n\nassociated_genes = genes.filter do |gene|\n  gene[:traits].include?(specific_trait)\nend\n\nassociated_genes\n```"
  },
  {
    "task": "Filter out all investments with a risk level below medium from a portfolio.",
    "code": "```ruby\nportfolio = [\n  { name: 'Investment A', risk_level: 'low' },\n  { name: 'Investment B', risk_level: 'medium' },\n  { name: 'Investment C', risk_level: 'high' }\n]\n\nfiltered_portfolio = portfolio.select { |investment| ['medium', 'high'].include?(investment[:risk_level]) }\n```"
  },
  {
    "task": "Select all calls longer than five minutes from a call log.",
    "code": "```ruby\ncall_log = [\n  { number: '123-456-7890', duration: 300 },\n  { number: '987-654-3210', duration: 600 },\n  { number: '555-555-5555', duration: 400 },\n  { number: '111-222-3333', duration: 360 }\n]\n\nlong_calls = call_log.select { |call| call[:duration] > 300 }\n```"
  }
]