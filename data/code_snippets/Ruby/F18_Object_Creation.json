[
  {
    "task": "Create a new instance of a class that represents a book, with properties for title, author, and ISBN number.",
    "code": "```ruby\nclass Book\n  attr_accessor :title, :author, :isbn\n\n  def initialize(title, author, isbn)\n    @title = title\n    @author = author\n    @isbn = isbn\n  end\nend\n\nnew_book = Book.new(\"The Great Gatsby\", \"F. Scott Fitzgerald\", \"978-0743273565\")\n```"
  },
  {
    "task": "Instantiate an object of a class named Car, and set its make, model, and year attributes.",
    "code": "```ruby\nclass Car\n  attr_accessor :make, :model, :year\n\n  def initialize(make, model, year)\n    @make = make\n    @model = model\n    @year = year\n  end\nend\n\ncar = Car.new('Toyota', 'Corolla', 2022)\n```"
  },
  {
    "task": "Develop a class to represent a rectangle, then create an object with specific width and height.",
    "code": "```ruby\nclass Rectangle\n  attr_accessor :width, :height\n\n  def initialize(width, height)\n    @width = width\n    @height = height\n  end\nend\n\nrectangle = Rectangle.new(10, 20)\n```"
  },
  {
    "task": "Construct an object of a class Person, initializing it with a name and age.",
    "code": "```ruby\nclass Person\n  attr_accessor :name, :age\n\n  def initialize(name, age)\n    @name = name\n    @age = age\n  end\nend\n\nperson = Person.new(\"John Doe\", 30)\n```"
  },
  {
    "task": "Create a new object from a class called Circle, initializing it with a radius value.",
    "code": "```ruby\nclass Circle\n  attr_accessor :radius\n\n  def initialize(radius)\n    @radius = radius\n  end\nend\n\ncircle = Circle.new(5)\n```"
  },
  {
    "task": "Instantiate a class named Student with properties for name, student ID, and GPA.",
    "code": "```ruby\nclass Student\n  attr_accessor :name, :student_id, :gpa\n  \n  def initialize(name, student_id, gpa)\n    @name = name\n    @student_id = student_id\n    @gpa = gpa\n  end\nend\n\n# Example of creating a Student object\nstudent = Student.new(\"John Doe\", \"12345\", 3.8)\n```"
  },
  {
    "task": "Design a class for a smartphone, then create an instance with specific brand, model, and storage capacity.",
    "code": "```ruby\nclass Smartphone\n  attr_accessor :brand, :model, :storage_capacity\n\n  def initialize(brand, model, storage_capacity)\n    @brand = brand\n    @model = model\n    @storage_capacity = storage_capacity\n  end\nend\n\nsmartphone = Smartphone.new(\"Apple\", \"iPhone 14\", \"128GB\")\n```"
  },
  {
    "task": "Create an object of a class named BankAccount, initializing it with an account number and balance.",
    "code": "```ruby\nclass BankAccount\n  attr_accessor :account_number, :balance\n\n  def initialize(account_number, balance)\n    @account_number = account_number\n    @balance = balance\n  end\nend\n\naccount = BankAccount.new('123456789', 1000.0)\n```"
  },
  {
    "task": "Write a class for a movie, then instantiate it with a title, director, and release year.",
    "code": "```ruby\nclass Movie\n  attr_accessor :title, :director, :release_year\n\n  def initialize(title, director, release_year)\n    @title = title\n    @director = director\n    @release_year = release_year\n  end\nend\n\nmovie = Movie.new(\"Inception\", \"Christopher Nolan\", 2010)\n```"
  },
  {
    "task": "Define a class representing a point in 2D space and create an object with x and y coordinates.",
    "code": "```ruby\nclass Point\n  attr_accessor :x, :y\n\n  def initialize(x, y)\n    @x = x\n    @y = y\n  end\nend\n\npoint = Point.new(3, 4)\n```"
  },
  {
    "task": "Create an instance of a class called Computer with attributes for CPU, RAM, and storage.",
    "code": "```ruby\nclass Computer\n  attr_accessor :cpu, :ram, :storage\n\n  def initialize(cpu, ram, storage)\n    @cpu = cpu\n    @ram = ram\n    @storage = storage\n  end\nend\n\ncomputer_instance = Computer.new(\"Intel i7\", \"16GB\", \"512GB SSD\")\n```"
  },
  {
    "task": "Design a class for a Song with properties for title, artist, and duration, and instantiate it.",
    "code": "```ruby\nclass Song\n  attr_accessor :title, :artist, :duration\n\n  def initialize(title, artist, duration)\n    @title = title\n    @artist = artist\n    @duration = duration\n  end\nend\n\nsong = Song.new(\"Shape of You\", \"Ed Sheeran\", 240)\n```"
  },
  {
    "task": "Create a new instance of a class named Pet, initializing it with type, breed, and age.",
    "code": "```ruby\nclass Pet\n  attr_accessor :type, :breed, :age\n\n  def initialize(type, breed, age)\n    @type = type\n    @breed = breed\n    @age = age\n  end\nend\n\n# Creating a new instance of Pet\npet_instance = Pet.new('Dog', 'Labrador', 3)\n```"
  },
  {
    "task": "Instantiate an object of a class named House with attributes for address, number of bedrooms, and price.",
    "code": "```ruby\nclass House\n  attr_accessor :address, :bedrooms, :price\n\n  def initialize(address, bedrooms, price)\n    @address = address\n    @bedrooms = bedrooms\n    @price = price\n  end\nend\n\nhouse = House.new(\"123 Main St\", 3, 250000)\n```"
  },
  {
    "task": "Develop a class for a Camera, then create an object with resolution and zoom level attributes.",
    "code": "```ruby\nclass Camera\n  attr_accessor :resolution, :zoom_level\n\n  def initialize(resolution, zoom_level)\n    @resolution = resolution\n    @zoom_level = zoom_level\n  end\nend\n\ncamera = Camera.new(\"1080p\", 5)\n```"
  },
  {
    "task": "Construct an object from a class named Bicycle with properties for brand, type, and gear count.",
    "code": "```ruby\nclass Bicycle\n  attr_accessor :brand, :type, :gear_count\n\n  def initialize(brand, type, gear_count)\n    @brand = brand\n    @type = type\n    @gear_count = gear_count\n  end\nend\n\nbicycle = Bicycle.new('Trek', 'Mountain', 21)\n```"
  },
  {
    "task": "Create a class for a book author with name and nationality, then instantiate it.",
    "code": "```ruby\nclass Author\n  attr_accessor :name, :nationality\n\n  def initialize(name, nationality)\n    @name = name\n    @nationality = nationality\n  end\nend\n\nauthor = Author.new(\"John Doe\", \"American\")\n```"
  },
  {
    "task": "Define a class representing a video game with attributes for title, genre, and platform, and create an object.",
    "code": "```ruby\nclass VideoGame\n  attr_accessor :title, :genre, :platform\n\n  def initialize(title, genre, platform)\n    @title = title\n    @genre = genre\n    @platform = platform\n  end\nend\n\ngame = VideoGame.new(\"The Legend of Ruby\", \"Adventure\", \"PC\")\n```"
  },
  {
    "task": "Instantiate a class named Plane with properties for airline, model, and capacity.",
    "code": "```ruby\nclass Plane\n  attr_accessor :airline, :model, :capacity\n\n  def initialize(airline, model, capacity)\n    @airline = airline\n    @model = model\n    @capacity = capacity\n  end\nend\n\n# Example of instantiation\nplane = Plane.new(\"Delta\", \"Boeing 747\", 416)\n```"
  },
  {
    "task": "Create a new object of a class called Lamp, initializing it with color and brightness level.",
    "code": "```ruby\nclass Lamp\n  attr_accessor :color, :brightness\n\n  def initialize(color, brightness)\n    @color = color\n    @brightness = brightness\n  end\nend\n\nlamp = Lamp.new('blue', 'high')\n```"
  },
  {
    "task": "Design a class for a TV show with properties for title, season, and episode count, then instantiate it.",
    "code": "```ruby\nclass TVShow\n  attr_accessor :title, :season, :episode_count\n\n  def initialize(title, season, episode_count)\n    @title = title\n    @season = season\n    @episode_count = episode_count\n  end\nend\n\n# Object creation\ntv_show = TVShow.new(\"Breaking Bad\", 5, 62)\n```"
  },
  {
    "task": "Instantiate an object of a class named Garden with attributes for size and number of plants.",
    "code": "```ruby\nclass Garden\n  attr_accessor :size, :number_of_plants\n\n  def initialize(size, number_of_plants)\n    @size = size\n    @number_of_plants = number_of_plants\n  end\nend\n\ngarden = Garden.new(100, 50)\n```"
  },
  {
    "task": "Develop a class for a Train, then create an object with properties for type and number of carriages.",
    "code": "```ruby\nclass Train\n  attr_accessor :type, :number_of_carriages\n  \n  def initialize(type, number_of_carriages)\n    @type = type\n    @number_of_carriages = number_of_carriages\n  end\nend\n\ntrain = Train.new('Freight', 20)\n```"
  },
  {
    "task": "Define a class representing a planet with attributes for name, size, and distance from the sun, and create an object.",
    "code": "```ruby\nclass Planet\n  attr_accessor :name, :size, :distance_from_sun\n\n  def initialize(name, size, distance_from_sun)\n    @name = name\n    @size = size\n    @distance_from_sun = distance_from_sun\n  end\nend\n\nearth = Planet.new(\"Earth\", \"Medium\", 93_000_000)\n```"
  },
  {
    "task": "Create an instance of a class named Fridge with properties for brand and capacity.",
    "code": "```ruby\nclass Fridge\n  attr_accessor :brand, :capacity\n  \n  def initialize(brand, capacity)\n    @brand = brand\n    @capacity = capacity\n  end\nend\n\nfridge_instance = Fridge.new(\"Samsung\", 300)\n```"
  },
  {
    "task": "Design a class for a Restaurant with attributes for name, cuisine type, and location, then create an instance.",
    "code": "```ruby\nclass Restaurant\n  attr_accessor :name, :cuisine_type, :location\n\n  def initialize(name, cuisine_type, location)\n    @name = name\n    @cuisine_type = cuisine_type\n    @location = location\n  end\nend\n\nrestaurant = Restaurant.new(\"The Gourmet Kitchen\", \"Italian\", \"New York\")\n```"
  },
  {
    "task": "Create a new object from a class named Bookstore, initializing it with name and number of books.",
    "code": "```ruby\nclass Bookstore\n  attr_accessor :name, :number_of_books\n\n  def initialize(name, number_of_books)\n    @name = name\n    @number_of_books = number_of_books\n  end\nend\n\nbookstore = Bookstore.new(\"The Book Nook\", 500)\n```"
  },
  {
    "task": "Instantiate a class named Library with properties for total books and number of members.",
    "code": "```ruby\nclass Library\n  attr_accessor :total_books, :number_of_members\n\n  def initialize(total_books, number_of_members)\n    @total_books = total_books\n    @number_of_members = number_of_members\n  end\nend\n\n# Example of object creation\nlibrary = Library.new(1000, 250)\n```"
  },
  {
    "task": "Write a class for a Beverage with properties for name, type, and volume, and instantiate it.",
    "code": "```ruby\nclass Beverage\n  attr_accessor :name, :type, :volume\n\n  def initialize(name, type, volume)\n    @name = name\n    @type = type\n    @volume = volume\n  end\nend\n\n# Instantiate an object\nbeverage = Beverage.new(\"Cola\", \"Soft Drink\", 330)\n```"
  },
  {
    "task": "Create an object of a class named User with attributes for username, email, and password.",
    "code": "```ruby\nclass User\n  attr_accessor :username, :email, :password\n  \n  def initialize(username, email, password)\n    @username = username\n    @email = email\n    @password = password\n  end\nend\n\nuser = User.new('example_user', 'user@example.com', 'secure_password')\n```"
  },
  {
    "task": "Define a class for a Laptop with properties for brand, processor, and RAM, then instantiate it.",
    "code": "```ruby\nclass Laptop\n  attr_accessor :brand, :processor, :ram\n\n  def initialize(brand, processor, ram)\n    @brand = brand\n    @processor = processor\n    @ram = ram\n  end\nend\n\nlaptop = Laptop.new(\"Dell\", \"Intel i7\", \"16GB\")\n```"
  },
  {
    "task": "Construct an object from a class named Mountain with attributes for name and elevation.",
    "code": "```ruby\nclass Mountain\n  attr_accessor :name, :elevation\n\n  def initialize(name, elevation)\n    @name = name\n    @elevation = elevation\n  end\nend\n\nmount_everest = Mountain.new(\"Mount Everest\", 8848)\n```"
  },
  {
    "task": "Create an instance of a class called Weather with properties for temperature, humidity, and condition.",
    "code": "```ruby\nclass Weather\n  attr_accessor :temperature, :humidity, :condition\n\n  def initialize(temperature, humidity, condition)\n    @temperature = temperature\n    @humidity = humidity\n    @condition = condition\n  end\nend\n\nweather_instance = Weather.new(25, 60, 'Sunny')\n```"
  },
  {
    "task": "Design a class for a Classroom with attributes for room number and capacity, then create an instance.",
    "code": "```ruby\nclass Classroom\n  attr_accessor :room_number, :capacity\n\n  def initialize(room_number, capacity)\n    @room_number = room_number\n    @capacity = capacity\n  end\nend\n\nclassroom_instance = Classroom.new(101, 30)\n```"
  },
  {
    "task": "Instantiate an object of a class named Zoo with properties for name and number of animals.",
    "code": "```ruby\nclass Zoo\n  attr_accessor :name, :number_of_animals\n\n  def initialize(name, number_of_animals)\n    @name = name\n    @number_of_animals = number_of_animals\n  end\nend\n\nzoo_instance = Zoo.new(\"Safari Park\", 200)\n```"
  },
  {
    "task": "Develop a class for an Album with properties for name, artist, and release date, then instantiate it.",
    "code": "```ruby\nclass Album\n  attr_accessor :name, :artist, :release_date\n\n  def initialize(name, artist, release_date)\n    @name = name\n    @artist = artist\n    @release_date = release_date\n  end\nend\n\nalbum = Album.new(\"Album Name\", \"Artist Name\", \"Release Date\")\n```"
  },
  {
    "task": "Create a new object from a class named Hotel, initializing it with name, location, and star rating.",
    "code": "```ruby\nclass Hotel\n  attr_accessor :name, :location, :star_rating\n  \n  def initialize(name, location, star_rating)\n    @name = name\n    @location = location\n    @star_rating = star_rating\n  end\nend\n\nhotel = Hotel.new(\"Grand Hotel\", \"New York\", 5)\n```"
  },
  {
    "task": "Write a class for a Recipe with properties for name, ingredients, and cooking time, and instantiate it.",
    "code": "```ruby\nclass Recipe\n  attr_accessor :name, :ingredients, :cooking_time\n\n  def initialize(name, ingredients, cooking_time)\n    @name = name\n    @ingredients = ingredients\n    @cooking_time = cooking_time\n  end\nend\n\n# Example of instantiation\nrecipe = Recipe.new(\"Pasta\", [\"noodles\", \"sauce\", \"cheese\"], 30)\n```"
  },
  {
    "task": "Define a class representing a Conference with attributes for name, date, and number of attendees, and create an object.",
    "code": "```ruby\nclass Conference\n  attr_accessor :name, :date, :attendees\n\n  def initialize(name, date, attendees)\n    @name = name\n    @date = date\n    @attendees = attendees\n  end\nend\n\nconference = Conference.new(\"Tech Summit\", \"2023-11-15\", 150)\n```"
  },
  {
    "task": "Create an instance of a class called Park with properties for name, location, and area.",
    "code": "```ruby\nclass Park\n  attr_accessor :name, :location, :area\n\n  def initialize(name, location, area)\n    @name = name\n    @location = location\n    @area = area\n  end\nend\n\npark_instance = Park.new(\"Central Park\", \"New York\", 843)\n```"
  },
  {
    "task": "Design a class for a Bicycle with attributes for brand, type, and wheel size, then create an instance.",
    "code": "```ruby\nclass Bicycle\n  attr_accessor :brand, :type, :wheel_size\n  \n  def initialize(brand, type, wheel_size)\n    @brand = brand\n    @type = type\n    @wheel_size = wheel_size\n  end\nend\n\nbicycle_instance = Bicycle.new('Trek', 'Mountain', 29)\n```"
  },
  {
    "task": "Instantiate an object of a class named Festival with properties for name, location, and duration.",
    "code": "```ruby\nclass Festival\n  attr_accessor :name, :location, :duration\n\n  def initialize(name, location, duration)\n    @name = name\n    @location = location\n    @duration = duration\n  end\nend\n\nfestival = Festival.new(\"Music Fest\", \"New York\", 3)\n```"
  },
  {
    "task": "Develop a class for a Ship with properties for name, capacity, and type, then instantiate it.",
    "code": "```ruby\nclass Ship\n  attr_accessor :name, :capacity, :type\n\n  def initialize(name, capacity, type)\n    @name = name\n    @capacity = capacity\n    @type = type\n  end\nend\n\nship = Ship.new(\"Poseidon\", 2000, \"Cruise\")\n```"
  },
  {
    "task": "Create an object of a class named Currency with attributes for name, symbol, and exchange rate.",
    "code": "```ruby\nclass Currency\n  attr_accessor :name, :symbol, :exchange_rate\n\n  def initialize(name, symbol, exchange_rate)\n    @name = name\n    @symbol = symbol\n    @exchange_rate = exchange_rate\n  end\nend\n\ncurrency = Currency.new(\"Dollar\", \"$\", 1.0)\n```"
  },
  {
    "task": "Define a class for a Gadget with properties for name, brand, and functionality, then instantiate it.",
    "code": "```ruby\nclass Gadget\n  attr_accessor :name, :brand, :functionality\n\n  def initialize(name, brand, functionality)\n    @name = name\n    @brand = brand\n    @functionality = functionality\n  end\nend\n\ngadget = Gadget.new(\"Smartphone\", \"TechBrand\", \"Communication\")\n```"
  },
  {
    "task": "Construct an object from a class named Bridge with attributes for name, length, and location.",
    "code": "```ruby\nclass Bridge\n  attr_accessor :name, :length, :location\n\n  def initialize(name, length, location)\n    @name = name\n    @length = length\n    @location = location\n  end\nend\n\nbridge = Bridge.new(\"Golden Gate\", 2737, \"San Francisco\")\n```"
  },
  {
    "task": "Create an instance of a class called Forest with properties for name, area, and tree species.",
    "code": "```ruby\nclass Forest\n  attr_accessor :name, :area, :tree_species\n\n  def initialize(name, area, tree_species)\n    @name = name\n    @area = area\n    @tree_species = tree_species\n  end\nend\n\nforest_instance = Forest.new(\"Amazon\", 5500, [\"Mahogany\", \"Cedar\", \"Ebony\"])\n```"
  },
  {
    "task": "Design a class for a Sculpture with attributes for title, artist, and material, then create an instance.",
    "code": "```ruby\nclass Sculpture\n  attr_accessor :title, :artist, :material\n\n  def initialize(title, artist, material)\n    @title = title\n    @artist = artist\n    @material = material\n  end\nend\n\nsculpture = Sculpture.new(\"The Thinker\", \"Auguste Rodin\", \"Bronze\")\n```"
  },
  {
    "task": "Instantiate an object of a class named Aquarium with properties for name and number of tanks.",
    "code": "```ruby\nclass Aquarium\n  attr_accessor :name, :number_of_tanks\n\n  def initialize(name, number_of_tanks)\n    @name = name\n    @number_of_tanks = number_of_tanks\n  end\nend\n\naquarium = Aquarium.new('Sea World', 5)\n```"
  },
  {
    "task": "Develop a class for a Play with properties for title, playwright, and genre, then instantiate it.",
    "code": "```ruby\nclass Play\n  attr_accessor :title, :playwright, :genre\n  \n  def initialize(title, playwright, genre)\n    @title = title\n    @playwright = playwright\n    @genre = genre\n  end\nend\n\nplay = Play.new(\"Hamlet\", \"William Shakespeare\", \"Tragedy\")\n```"
  },
  {
    "task": "Create a new object from a class named Telescope, initializing it with type and focal length.",
    "code": "```ruby\nclass Telescope\n  attr_accessor :type, :focal_length\n\n  def initialize(type, focal_length)\n    @type = type\n    @focal_length = focal_length\n  end\nend\n\ntelescope = Telescope.new(\"Reflector\", 1200)\n```"
  },
  {
    "task": "Write a class for a Monument with properties for name, location, and year built, and instantiate it.",
    "code": "```ruby\nclass Monument\n  attr_accessor :name, :location, :year_built\n\n  def initialize(name, location, year_built)\n    @name = name\n    @location = location\n    @year_built = year_built\n  end\nend\n\nmonument = Monument.new(\"Eiffel Tower\", \"Paris\", 1889)\n```"
  },
  {
    "task": "Define a class representing a Star with attributes for name, size, and distance from Earth, and create an object.",
    "code": "```ruby\nclass Star\n  attr_accessor :name, :size, :distance_from_earth\n\n  def initialize(name, size, distance_from_earth)\n    @name = name\n    @size = size\n    @distance_from_earth = distance_from_earth\n  end\nend\n\nstar = Star.new(\"Proxima Centauri\", \"small\", 4.24)\n```"
  },
  {
    "task": "Create an instance of a class called Festival with properties for name, location, and number of events.",
    "code": "```ruby\nclass Festival\n  attr_accessor :name, :location, :number_of_events\n\n  def initialize(name, location, number_of_events)\n    @name = name\n    @location = location\n    @number_of_events = number_of_events\n  end\nend\n\nfestival_instance = Festival.new(\"Music Fest\", \"New York\", 5)\n```"
  },
  {
    "task": "Design a class for a Clock with attributes for brand, type, and display, then create an instance.",
    "code": "```ruby\nclass Clock\n  attr_accessor :brand, :type, :display\n\n  def initialize(brand, type, display)\n    @brand = brand\n    @type = type\n    @display = display\n  end\nend\n\nclock_instance = Clock.new('Seiko', 'Analog', '12-hour')\n```"
  },
  {
    "task": "Instantiate an object of a class named Stadium with properties for name, capacity, and location.",
    "code": "```ruby\nclass Stadium\n  attr_accessor :name, :capacity, :location\n\n  def initialize(name, capacity, location)\n    @name = name\n    @capacity = capacity\n    @location = location\n  end\nend\n\nstadium = Stadium.new(\"Sample Stadium\", 50000, \"Sample City\")\n```"
  },
  {
    "task": "Develop a class for a Potion with properties for name, effect, and duration, then instantiate it.",
    "code": "```ruby\nclass Potion\n  attr_accessor :name, :effect, :duration\n\n  def initialize(name, effect, duration)\n    @name = name\n    @effect = effect\n    @duration = duration\n  end\nend\n\npotion = Potion.new(\"Healing Potion\", \"Restores health\", 5)\n```"
  },
  {
    "task": "Create an object of a class named Planet with attributes for name, mass, and orbital period.",
    "code": "```ruby\nclass Planet\n  attr_accessor :name, :mass, :orbital_period\n\n  def initialize(name, mass, orbital_period)\n    @name = name\n    @mass = mass\n    @orbital_period = orbital_period\n  end\nend\n\n# Create an object of the Planet class\nearth = Planet.new(\"Earth\", 5.972e24, 365.25)\n```"
  },
  {
    "task": "Define a class for a Lighthouse with properties for name, height, and light range, then instantiate it.",
    "code": "```ruby\nclass Lighthouse\n  attr_accessor :name, :height, :light_range\n\n  def initialize(name, height, light_range)\n    @name = name\n    @height = height\n    @light_range = light_range\n  end\nend\n\nlighthouse = Lighthouse.new(\"Cape Hatteras\", 210, 24)\n```"
  },
  {
    "task": "Construct an object from a class named Volcano with attributes for name, height, and eruption history.",
    "code": "```ruby\nclass Volcano\n  attr_accessor :name, :height, :eruption_history\n\n  def initialize(name, height, eruption_history)\n    @name = name\n    @height = height\n    @eruption_history = eruption_history\n  end\nend\n\nvolcano = Volcano.new(\"Mount St. Helens\", 2550, [\"1980\", \"2004\", \"2008\"])\n```"
  },
  {
    "task": "Create an instance of a class called Sculpture with properties for title, artist, and year created.",
    "code": "```ruby\nclass Sculpture\n  attr_accessor :title, :artist, :year_created\n\n  def initialize(title, artist, year_created)\n    @title = title\n    @artist = artist\n    @year_created = year_created\n  end\nend\n\nsculpture_instance = Sculpture.new(\"David\", \"Michelangelo\", 1504)\n```"
  },
  {
    "task": "Design a class for a Ship with attributes for name, type, and displacement, then create an instance.",
    "code": "```ruby\nclass Ship\n  attr_accessor :name, :type, :displacement\n\n  def initialize(name, type, displacement)\n    @name = name\n    @type = type\n    @displacement = displacement\n  end\nend\n\nship_instance = Ship.new(\"Titanic\", \"Ocean Liner\", 52310)\n```"
  },
  {
    "task": "Instantiate an object of a class named Opera with properties for title, composer, and act count.",
    "code": "```ruby\nclass Opera\n  attr_accessor :title, :composer, :act_count\n\n  def initialize(title, composer, act_count)\n    @title = title\n    @composer = composer\n    @act_count = act_count\n  end\nend\n\nopera_instance = Opera.new(\"La Traviata\", \"Giuseppe Verdi\", 3)\n```"
  },
  {
    "task": "Develop a class for a Waterfall with properties for name, height, and flow rate, then instantiate it.",
    "code": "```ruby\nclass Waterfall\n  attr_accessor :name, :height, :flow_rate\n\n  def initialize(name, height, flow_rate)\n    @name = name\n    @height = height\n    @flow_rate = flow_rate\n  end\nend\n\nwaterfall = Waterfall.new(\"Angel Falls\", 979, 1600)\n```"
  },
  {
    "task": "Create a new object from a class named Castle, initializing it with name, location, and year built.",
    "code": "```ruby\nclass Castle\n  attr_accessor :name, :location, :year_built\n\n  def initialize(name, location, year_built)\n    @name = name\n    @location = location\n    @year_built = year_built\n  end\nend\n\ncastle = Castle.new(\"Windsor\", \"England\", 1070)\n```"
  },
  {
    "task": "Write a class for a Cat with properties for name, breed, and color, and instantiate it.",
    "code": "```ruby\nclass Cat\n  attr_accessor :name, :breed, :color\n\n  def initialize(name, breed, color)\n    @name = name\n    @breed = breed\n    @color = color\n  end\nend\n\ncat = Cat.new(\"Whiskers\", \"Siamese\", \"Brown\")\n```"
  },
  {
    "task": "Define a class representing a Spaceship with attributes for name, speed, and crew capacity, and create an object.",
    "code": "```ruby\nclass Spaceship\n  attr_accessor :name, :speed, :crew_capacity\n\n  def initialize(name, speed, crew_capacity)\n    @name = name\n    @speed = speed\n    @crew_capacity = crew_capacity\n  end\nend\n\nspaceship = Spaceship.new(\"Galactic Cruiser\", 15000, 100)\n```"
  },
  {
    "task": "Create an instance of a class called Robot with properties for name, model, and function.",
    "code": "```ruby\nclass Robot\n  attr_accessor :name, :model, :function\n  \n  def initialize(name, model, function)\n    @name = name\n    @model = model\n    @function = function\n  end\nend\n\nrobot_instance = Robot.new('Robo1', 'XJ9', 'Assistance')\n```"
  },
  {
    "task": "Design a class for a Computer Program with attributes for name, language, and lines of code, then create an instance.",
    "code": "```ruby\nclass ComputerProgram\n  attr_accessor :name, :language, :lines_of_code\n\n  def initialize(name, language, lines_of_code)\n    @name = name\n    @language = language\n    @lines_of_code = lines_of_code\n  end\nend\n\nprogram = ComputerProgram.new(\"MyApp\", \"Ruby\", 1000)\n```"
  },
  {
    "task": "Instantiate an object of a class named Mountain with properties for name, range, and prominence.",
    "code": "```ruby\nclass Mountain\n  attr_accessor :name, :range, :prominence\n\n  def initialize(name, range, prominence)\n    @name = name\n    @range = range\n    @prominence = prominence\n  end\nend\n\nmountain = Mountain.new(\"Everest\", \"Himalayas\", 8848)\n```"
  },
  {
    "task": "Develop a class for a Painting with properties for title, artist, and dimensions, then instantiate it.",
    "code": "```ruby\nclass Painting\n  attr_accessor :title, :artist, :dimensions\n\n  def initialize(title, artist, dimensions)\n    @title = title\n    @artist = artist\n    @dimensions = dimensions\n  end\nend\n\npainting = Painting.new(\"Starry Night\", \"Vincent van Gogh\", \"73.7 cm \u00d7 92.1 cm\")\n```"
  },
  {
    "task": "Create an object of a class named Symphony with attributes for title, composer, and movement count.",
    "code": "```ruby\nclass Symphony\n  attr_accessor :title, :composer, :movement_count\n\n  def initialize(title, composer, movement_count)\n    @title = title\n    @composer = composer\n    @movement_count = movement_count\n  end\nend\n\nsymphony = Symphony.new(\"Symphony No. 5\", \"Beethoven\", 4)\n```"
  },
  {
    "task": "Define a class for a Dinosaur with properties for name, period, and diet, then instantiate it.",
    "code": "```ruby\nclass Dinosaur\n  attr_accessor :name, :period, :diet\n  \n  def initialize(name, period, diet)\n    @name = name\n    @period = period\n    @diet = diet\n  end\nend\n\ndino = Dinosaur.new(\"Tyrannosaurus\", \"Cretaceous\", \"Carnivore\")\n```"
  },
  {
    "task": "Construct an object from a class named River with attributes for name, length, and basin size.",
    "code": "```ruby\nclass River\n  attr_accessor :name, :length, :basin_size\n\n  def initialize(name, length, basin_size)\n    @name = name\n    @length = length\n    @basin_size = basin_size\n  end\nend\n\nriver = River.new(\"Amazon\", 6400, 7050000)\n```"
  },
  {
    "task": "Create an instance of a class called Instrument with properties for name, type, and material.",
    "code": "```ruby\nclass Instrument\n  attr_accessor :name, :type, :material\n\n  def initialize(name, type, material)\n    @name = name\n    @type = type\n    @material = material\n  end\nend\n\ninstrument = Instrument.new(\"Guitar\", \"String\", \"Wood\")\n```"
  },
  {
    "task": "Design a class for a Planetarium with attributes for name, location, and dome size, then create an instance.",
    "code": "```ruby\nclass Planetarium\n  attr_accessor :name, :location, :dome_size\n\n  def initialize(name, location, dome_size)\n    @name = name\n    @location = location\n    @dome_size = dome_size\n  end\nend\n\nplanetarium_instance = Planetarium.new(\"Star Observatory\", \"New York\", \"Large\")\n```"
  },
  {
    "task": "Instantiate an object of a class named Island with properties for name, area, and population.",
    "code": "```ruby\nclass Island\n  attr_accessor :name, :area, :population\n  \n  def initialize(name, area, population)\n    @name = name\n    @area = area\n    @population = population\n  end\nend\n\nisland = Island.new(\"Bora Bora\", 30.55, 10000)\n```"
  },
  {
    "task": "Develop a class for a Space Station with properties for name, crew size, and modules, then instantiate it.",
    "code": "```ruby\nclass SpaceStation\n  attr_accessor :name, :crew_size, :modules\n\n  def initialize(name, crew_size, modules)\n    @name = name\n    @crew_size = crew_size\n    @modules = modules\n  end\nend\n\nspace_station = SpaceStation.new(\"International Space Station\", 6, [\"Module1\", \"Module2\", \"Module3\"])\n```"
  },
  {
    "task": "Create a new object from a class named Dinosaur, initializing it with species and period.",
    "code": "```ruby\nclass Dinosaur\n  attr_accessor :species, :period\n\n  def initialize(species, period)\n    @species = species\n    @period = period\n  end\nend\n\ndinosaur = Dinosaur.new(\"Tyrannosaurus\", \"Cretaceous\")\n```"
  },
  {
    "task": "Write a class for a Tree with properties for species, height, and age, and instantiate it.",
    "code": "```ruby\nclass Tree\n  attr_accessor :species, :height, :age\n\n  def initialize(species, height, age)\n    @species = species\n    @height = height\n    @age = age\n  end\nend\n\n# Example of creating an instance of the Tree class\nmy_tree = Tree.new(\"Oak\", 30, 100)\n```"
  },
  {
    "task": "Define a class representing a Firework with attributes for name, color, and duration, and create an object.",
    "code": "```ruby\nclass Firework\n  attr_accessor :name, :color, :duration\n\n  def initialize(name, color, duration)\n    @name = name\n    @color = color\n    @duration = duration\n  end\nend\n\nfirework = Firework.new(\"Sparkler\", \"Red\", 30)\n```"
  },
  {
    "task": "Create an instance of a class called ComicBook with properties for title, author, and issue number.",
    "code": "```ruby\nclass ComicBook\n  attr_accessor :title, :author, :issue_number\n\n  def initialize(title, author, issue_number)\n    @title = title\n    @author = author\n    @issue_number = issue_number\n  end\nend\n\ncomic_book = ComicBook.new(\"Example Title\", \"Example Author\", 1)\n```"
  },
  {
    "task": "Design a class for a Metropolis with attributes for name, population, and GDP, then create an instance.",
    "code": "```ruby\nclass Metropolis\n  attr_accessor :name, :population, :gdp\n  \n  def initialize(name, population, gdp)\n    @name = name\n    @population = population\n    @gdp = gdp\n  end\nend\n\nmetropolis_instance = Metropolis.new(\"New York\", 8500000, 1500000)\n```"
  },
  {
    "task": "Instantiate an object of a class named Dragon with properties for name, element, and age.",
    "code": "```ruby\nclass Dragon\n  attr_accessor :name, :element, :age\n\n  def initialize(name, element, age)\n    @name = name\n    @element = element\n    @age = age\n  end\nend\n\ndragon = Dragon.new(\"Draco\", \"Fire\", 300)\n```"
  },
  {
    "task": "Develop a class for a Novel with properties for title, author, and genre, then instantiate it.",
    "code": "```ruby\nclass Novel\n  attr_accessor :title, :author, :genre\n\n  def initialize(title, author, genre)\n    @title = title\n    @author = author\n    @genre = genre\n  end\nend\n\nnovel = Novel.new(\"1984\", \"George Orwell\", \"Dystopian\")\n```"
  },
  {
    "task": "Create an object of a class named Satellite with attributes for name, orbit, and mission.",
    "code": "```ruby\nclass Satellite\n  attr_accessor :name, :orbit, :mission\n\n  def initialize(name, orbit, mission)\n    @name = name\n    @orbit = orbit\n    @mission = mission\n  end\nend\n\nsatellite = Satellite.new(\"Hubble\", \"Low Earth Orbit\", \"Astronomical Observations\")\n```"
  },
  {
    "task": "Define a class for a Castle with properties for name, location, and architectural style, then instantiate it.",
    "code": "```ruby\nclass Castle\n  attr_accessor :name, :location, :architectural_style\n\n  def initialize(name, location, architectural_style)\n    @name = name\n    @location = location\n    @architectural_style = architectural_style\n  end\nend\n\ncastle = Castle.new(\"Windsor Castle\", \"Windsor, England\", \"Gothic\")\n```"
  },
  {
    "task": "Construct an object from a class named Jungle with attributes for name, area, and biodiversity.",
    "code": "```ruby\nclass Jungle\n  attr_accessor :name, :area, :biodiversity\n\n  def initialize(name, area, biodiversity)\n    @name = name\n    @area = area\n    @biodiversity = biodiversity\n  end\nend\n\njungle = Jungle.new(\"Amazon\", 5500000, \"High\")\n```"
  },
  {
    "task": "Create an instance of a class called Dinosaur with properties for species, size, and diet.",
    "code": "```ruby\nclass Dinosaur\n  attr_accessor :species, :size, :diet\n\n  def initialize(species, size, diet)\n    @species = species\n    @size = size\n    @diet = diet\n  end\nend\n\ndinosaur_instance = Dinosaur.new('Tyrannosaurus Rex', 'Large', 'Carnivore')\n```"
  },
  {
    "task": "Design a class for a Superhero with attributes for name, powers, and alias, then create an instance.",
    "code": "```ruby\nclass Superhero\n  attr_accessor :name, :powers, :alias\n\n  def initialize(name, powers, alias_name)\n    @name = name\n    @powers = powers\n    @alias = alias_name\n  end\nend\n\nsuperhero_instance = Superhero.new(\"Clark Kent\", [\"Super Strength\", \"Flight\", \"X-ray Vision\"], \"Superman\")\n```"
  }
]