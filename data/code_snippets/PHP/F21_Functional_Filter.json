[
  {
    "task": "Filter out all even numbers from a list of integers.",
    "code": "```php\n$numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$oddNumbers = array_filter($numbers, fn($number) => $number % 2 !== 0);\n```"
  },
  {
    "task": "Select all words from a list that start with the letter 'a'.",
    "code": "```php\n$words = [\"apple\", \"banana\", \"apricot\", \"cherry\", \"avocado\"];\n$filteredWords = array_filter($words, fn($word) => str_starts_with($word, 'a'));\n```"
  },
  {
    "task": "Find all positive numbers in a collection of integers.",
    "code": "```php\n$numbers = [-5, 3, -2, 0, 7, 8, -1];\n$positiveNumbers = array_filter($numbers, fn($number) => $number > 0);\n```"
  },
  {
    "task": "Extract all employees who are older than 30 from an employee directory.",
    "code": "```php\n$employees = [\n    ['name' => 'John Doe', 'age' => 28],\n    ['name' => 'Jane Smith', 'age' => 35],\n    ['name' => 'Alice Johnson', 'age' => 40],\n    ['name' => 'Charlie Brown', 'age' => 25],\n];\n\n$olderThan30 = array_filter($employees, function($employee) {\n    return $employee['age'] > 30;\n});\n\nprint_r($olderThan30);\n```"
  },
  {
    "task": "List all cities with a population greater than one million from a dataset.",
    "code": "```php\n<?php\n\n$cities = [\n    ['name' => 'New York', 'population' => 8419000],\n    ['name' => 'Los Angeles', 'population' => 3980000],\n    ['name' => 'Chicago', 'population' => 2716000],\n    ['name' => 'Houston', 'population' => 2328000],\n    ['name' => 'Phoenix', 'population' => 1690000],\n    ['name' => 'Philadelphia', 'population' => 1584200],\n    ['name' => 'San Antonio', 'population' => 1547253],\n    ['name' => 'San Diego', 'population' => 1423851],\n    ['name' => 'Dallas', 'population' => 1341000],\n    ['name' => 'San Jose', 'population' => 1035000],\n    ['name' => 'Austin', 'population' => 998000],\n    ['name' => 'Jacksonville', 'population' => 949611],\n    ['name' => 'Fort Worth', 'population' => 942323],\n    ['name' => 'Columbus', 'population' => 905748],\n    ['name' => 'Charlotte', 'population' => 874579]\n];\n\n$largeCities = array_filter($cities, function($city) {\n    return $city['population'] > 1000000;\n});\n\nforeach ($largeCities as $city) {\n    echo $city['name'] . \"\\n\";\n}\n\n?>\n```"
  },
  {
    "task": "Filter out products that are out of stock from a product list.",
    "code": "```php\n<?php\n\n$products = [\n    ['name' => 'Product 1', 'in_stock' => true],\n    ['name' => 'Product 2', 'in_stock' => false],\n    ['name' => 'Product 3', 'in_stock' => true],\n];\n\n$inStockProducts = array_filter($products, fn($product) => $product['in_stock']);\n\nprint_r($inStockProducts);\n\n?>\n```"
  },
  {
    "task": "Select all students who have passed with a grade above 70 from a list of student scores.",
    "code": "```php\n<?php\n\n$students = [\n    ['name' => 'Alice', 'grade' => 85],\n    ['name' => 'Bob', 'grade' => 68],\n    ['name' => 'Charlie', 'grade' => 72],\n    ['name' => 'David', 'grade' => 90],\n    ['name' => 'Eve', 'grade' => 55]\n];\n\n$passedStudents = array_filter($students, function($student) {\n    return $student['grade'] > 70;\n});\n\nprint_r($passedStudents);\n\n?>\n```"
  },
  {
    "task": "Identify all strings in an array that contain the substring 'cat'.",
    "code": "```php\n$array = [\"caterpillar\", \"dog\", \"category\", \"concatenate\", \"apple\"];\n$result = array_filter($array, function($str) {\n    return strpos($str, 'cat') !== false;\n});\nprint_r($result);\n```"
  },
  {
    "task": "Extract all transactions above $1000 from a financial record.",
    "code": "```php\n$transactions = [1500, 450, 2000, 800, 1200];\n$filteredTransactions = array_filter($transactions, fn($transaction) => $transaction > 1000);\n```"
  },
  {
    "task": "Filter out all non-prime numbers from a list of numbers.",
    "code": "```php\nfunction isPrime($num) {\n    if ($num <= 1) return false;\n    for ($i = 2; $i <= sqrt($num); $i++) {\n        if ($num % $i == 0) return false;\n    }\n    return true;\n}\n\nfunction filterPrimes($numbers) {\n    return array_filter($numbers, 'isPrime');\n}\n\n$numbers = [2, 3, 4, 5, 6, 7, 8, 9, 10];\n$primes = filterPrimes($numbers);\nprint_r($primes);\n```"
  },
  {
    "task": "Select all books with more than 300 pages from a library catalog.",
    "code": "```php\n$libraryCatalog = [\n    ['title' => 'Book One', 'pages' => 150],\n    ['title' => 'Book Two', 'pages' => 320],\n    ['title' => 'Book Three', 'pages' => 450],\n    ['title' => 'Book Four', 'pages' => 280],\n    ['title' => 'Book Five', 'pages' => 500],\n];\n\n$booksWithMoreThan300Pages = array_filter($libraryCatalog, function($book) {\n    return $book['pages'] > 300;\n});\n\nprint_r($booksWithMoreThan300Pages);\n```"
  },
  {
    "task": "Identify all users who have logged in within the past week from a user database.",
    "code": "```php\n<?php\n\nfunction filterRecentLogins($users) {\n    $oneWeekAgo = strtotime('-1 week');\n    return array_filter($users, function($user) use ($oneWeekAgo) {\n        return strtotime($user['last_login']) >= $oneWeekAgo;\n    });\n}\n\n// Example usage\n$users = [\n    ['id' => 1, 'name' => 'Alice', 'last_login' => '2023-10-04'],\n    ['id' => 2, 'name' => 'Bob', 'last_login' => '2023-09-27'],\n    ['id' => 3, 'name' => 'Charlie', 'last_login' => '2023-10-01'],\n];\n\n$recentLogins = filterRecentLogins($users);\nprint_r($recentLogins);\n\n?>\n```"
  },
  {
    "task": "Extract all URLs that contain 'https' from a list of web addresses.",
    "code": "```php\n$urls = [\n    'http://example.com',\n    'https://secure.com',\n    'ftp://fileserver.com',\n    'https://anothersecure.com',\n    'http://insecure.com'\n];\n\n$httpsUrls = array_filter($urls, function($url) {\n    return strpos($url, 'https') === 0;\n});\n\nprint_r($httpsUrls);\n```"
  },
  {
    "task": "Find all movies released after the year 2000 from a movie database.",
    "code": "```php\n$movies = [\n    ['title' => 'Movie 1', 'year' => 1999],\n    ['title' => 'Movie 2', 'year' => 2001],\n    ['title' => 'Movie 3', 'year' => 2005],\n    ['title' => 'Movie 4', 'year' => 2000],\n];\n\n$filteredMovies = array_filter($movies, function($movie) {\n    return $movie['year'] > 2000;\n});\n\nprint_r($filteredMovies);\n```"
  },
  {
    "task": "Select all tasks with a priority level of 'high' from a task management system.",
    "code": "```php\n$tasks = [\n    ['name' => 'Task 1', 'priority' => 'low'],\n    ['name' => 'Task 2', 'priority' => 'medium'],\n    ['name' => 'Task 3', 'priority' => 'high'],\n    ['name' => 'Task 4', 'priority' => 'high'],\n    ['name' => 'Task 5', 'priority' => 'low'],\n];\n\n$highPriorityTasks = array_filter($tasks, function($task) {\n    return $task['priority'] === 'high';\n});\n\nprint_r($highPriorityTasks);\n```"
  },
  {
    "task": "Filter out all words longer than five characters from a text document.",
    "code": "```php\nfunction filterWords($text) {\n    $words = explode(' ', $text);\n    $filteredWords = array_filter($words, fn($word) => strlen($word) <= 5);\n    return implode(' ', $filteredWords);\n}\n\n$text = file_get_contents('text_document.txt');\n$filteredText = filterWords($text);\necho $filteredText;\n```"
  },
  {
    "task": "Extract all odd numbers from a sequence of integers.",
    "code": "```php\n$numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$oddNumbers = array_filter($numbers, fn($num) => $num % 2 !== 0);\n```"
  },
  {
    "task": "Select all files larger than 10MB from a list of files.",
    "code": "```php\n<?php\n\n$files = [\n    ['name' => 'file1.txt', 'size' => 5000000],\n    ['name' => 'file2.txt', 'size' => 15000000],\n    ['name' => 'file3.txt', 'size' => 20000000],\n    ['name' => 'file4.txt', 'size' => 8000000],\n    ['name' => 'file5.txt', 'size' => 12000000],\n];\n\n$largeFiles = array_filter($files, function($file) {\n    return $file['size'] > 10 * 1024 * 1024;\n});\n\nprint_r($largeFiles);\n\n?>\n```"
  },
  {
    "task": "Identify all events occurring on weekends from an event schedule.",
    "code": "```php\n$events = [\n    ['name' => 'Event 1', 'date' => '2023-10-06'],\n    ['name' => 'Event 2', 'date' => '2023-10-07'],\n    ['name' => 'Event 3', 'date' => '2023-10-08'],\n    ['name' => 'Event 4', 'date' => '2023-10-09'],\n];\n\n$weekendEvents = array_filter($events, function($event) {\n    $timestamp = strtotime($event['date']);\n    $dayOfWeek = date('N', $timestamp);\n    return $dayOfWeek >= 6;\n});\n\nprint_r($weekendEvents);\n```"
  },
  {
    "task": "Find all emails from a specific domain in an email list.",
    "code": "```php\nfunction filterEmailsByDomain(array $emails, string $domain): array {\n    return array_filter($emails, function($email) use ($domain) {\n        return strpos($email, '@' . $domain) !== false;\n    });\n}\n\n// Example usage\n$emailList = [\n    'user1@example.com',\n    'user2@test.com',\n    'user3@example.com',\n    'user4@anotherdomain.com'\n];\n\n$filteredEmails = filterEmailsByDomain($emailList, 'example.com');\nprint_r($filteredEmails);\n```"
  },
  {
    "task": "Filter out all people not living in a specific city from a contact list.",
    "code": "```php\nfunction filterByCity(array $contacts, string $city): array {\n    return array_filter($contacts, fn($contact) => $contact['city'] === $city);\n}\n\n// Example usage:\n$contacts = [\n    ['name' => 'Alice', 'city' => 'New York'],\n    ['name' => 'Bob', 'city' => 'Los Angeles'],\n    ['name' => 'Charlie', 'city' => 'New York'],\n    ['name' => 'David', 'city' => 'Chicago']\n];\n\n$result = filterByCity($contacts, 'New York');\nprint_r($result);\n```"
  },
  {
    "task": "Select all rectangles with an area greater than 50 from a list of rectangles.",
    "code": "```php\n$rectangles = [\n    ['width' => 5, 'height' => 11],\n    ['width' => 4, 'height' => 10],\n    ['width' => 7, 'height' => 8],\n    ['width' => 3, 'height' => 4],\n];\n\n$filteredRectangles = array_filter($rectangles, function($rectangle) {\n    return ($rectangle['width'] * $rectangle['height']) > 50;\n});\n\nprint_r($filteredRectangles);\n```"
  },
  {
    "task": "Extract all elements that are not null from a collection.",
    "code": "```php\nfunction filterNotNull($collection) {\n    return array_filter($collection, fn($element) => !is_null($element));\n}\n\n// Example usage:\n$collection = [1, null, 2, null, 3, 4];\n$filteredCollection = filterNotNull($collection);\nprint_r($filteredCollection);\n```"
  },
  {
    "task": "Identify all registered voters over the age of 18 from a voter registration list.",
    "code": "```php\n<?php\n\n$voterRegistrationList = [\n    ['name' => 'Alice', 'age' => 22],\n    ['name' => 'Bob', 'age' => 17],\n    ['name' => 'Charlie', 'age' => 19],\n    ['name' => 'David', 'age' => 16],\n    ['name' => 'Eve', 'age' => 25]\n];\n\n$eligibleVoters = array_filter($voterRegistrationList, function($voter) {\n    return $voter['age'] > 18;\n});\n\nprint_r($eligibleVoters);\n\n?>\n```"
  },
  {
    "task": "Select all cars manufactured after 2015 from a vehicle registry.",
    "code": "```php\n$vehicles = [\n    ['make' => 'Toyota', 'model' => 'Camry', 'year' => 2014],\n    ['make' => 'Honda', 'model' => 'Civic', 'year' => 2016],\n    ['make' => 'Ford', 'model' => 'Mustang', 'year' => 2018],\n    ['make' => 'Chevrolet', 'model' => 'Malibu', 'year' => 2015],\n];\n\n$carsAfter2015 = array_filter($vehicles, function($vehicle) {\n    return $vehicle['year'] > 2015;\n});\n\nprint_r($carsAfter2015);\n```"
  },
  {
    "task": "Filter out all negative numbers from a dataset of integers.",
    "code": "```php\n$numbers = [3, -1, 4, -5, 9, -2, 8];\n$positiveNumbers = array_filter($numbers, function($number) {\n    return $number >= 0;\n});\n```"
  },
  {
    "task": "Extract all characters from a string that are uppercase.",
    "code": "```php\nfunction extractUppercase($string) {\n    return implode('', array_filter(str_split($string), fn($char) => ctype_upper($char)));\n}\n\n$string = \"Hello World!\";\n$result = extractUppercase($string);\necho $result;\n```"
  },
  {
    "task": "Identify all projects with a deadline within the next month from a project database.",
    "code": "```php\n<?php\n\nfunction filterProjectsByDeadline($projects) {\n    $nextMonth = (new DateTime())->modify('+1 month');\n    return array_filter($projects, function($project) use ($nextMonth) {\n        $deadline = new DateTime($project['deadline']);\n        return $deadline <= $nextMonth;\n    });\n}\n\n$projects = [\n    ['name' => 'Project A', 'deadline' => '2023-11-15'],\n    ['name' => 'Project B', 'deadline' => '2023-12-01'],\n    ['name' => 'Project C', 'deadline' => '2024-01-10'],\n];\n\n$filteredProjects = filterProjectsByDeadline($projects);\nprint_r($filteredProjects);\n\n?>\n```"
  },
  {
    "task": "Select all athletes with a score higher than 90 from a competition result list.",
    "code": "```php\n$competitionResults = [\n    ['name' => 'Athlete 1', 'score' => 85],\n    ['name' => 'Athlete 2', 'score' => 92],\n    ['name' => 'Athlete 3', 'score' => 88],\n    ['name' => 'Athlete 4', 'score' => 91],\n];\n\n$highScorers = array_filter($competitionResults, function($athlete) {\n    return $athlete['score'] > 90;\n});\n\nprint_r($highScorers);\n```"
  },
  {
    "task": "Filter out all strings that do not contain vowels from a list of words.",
    "code": "```php\n$words = [\"apple\", \"sky\", \"banana\", \"fly\", \"grape\"];\n$vowelFilter = function($word) {\n    return preg_match('/[aeiouAEIOU]/', $word);\n};\n$filteredWords = array_filter($words, $vowelFilter);\nprint_r($filteredWords);\n```"
  },
  {
    "task": "Extract all dates that fall on a weekday from a calendar.",
    "code": "```php\nfunction isWeekday($date) {\n    $dayOfWeek = date('N', strtotime($date));\n    return $dayOfWeek >= 1 && $dayOfWeek <= 5;\n}\n\n$calendar = [\n    '2023-10-01', '2023-10-02', '2023-10-03', \n    '2023-10-04', '2023-10-05', '2023-10-06', \n    '2023-10-07', '2023-10-08', '2023-10-09'\n];\n\n$weekdays = array_filter($calendar, 'isWeekday');\n\nprint_r($weekdays);\n```"
  },
  {
    "task": "Find all software versions that are stable releases from a list of software versions.",
    "code": "```php\n$versions = [\n    '1.0.0-alpha',\n    '1.0.0',\n    '1.1.0-beta',\n    '1.1.0',\n    '2.0.0-rc',\n    '2.0.0'\n];\n\n$stableVersions = array_filter($versions, function($version) {\n    return preg_match('/^\\d+\\.\\d+\\.\\d+$/', $version);\n});\n\nprint_r($stableVersions);\n```"
  },
  {
    "task": "Select all temperatures above freezing from a weather report.",
    "code": "```php\n$weatherReport = [32, 45, 28, 40, 50, 31, 36];\n$aboveFreezing = array_filter($weatherReport, fn($temp) => $temp > 32);\n```"
  },
  {
    "task": "Identify all countries with a GDP per capita above $40,000 from a country dataset.",
    "code": "```php\n<?php\n\n$countries = [\n    ['name' => 'Country A', 'gdp_per_capita' => 45000],\n    ['name' => 'Country B', 'gdp_per_capita' => 30000],\n    ['name' => 'Country C', 'gdp_per_capita' => 50000],\n    ['name' => 'Country D', 'gdp_per_capita' => 40000],\n    ['name' => 'Country E', 'gdp_per_capita' => 55000],\n];\n\n$highGdpCountries = array_filter($countries, function($country) {\n    return $country['gdp_per_capita'] > 40000;\n});\n\nprint_r($highGdpCountries);\n\n?>\n```"
  },
  {
    "task": "Filter out all names shorter than four letters from a roster.",
    "code": "```php\n$roster = ['John', 'Amy', 'Eve', 'Tom', 'Sam', 'Anna'];\n$filteredRoster = array_filter($roster, function($name) {\n    return strlen($name) >= 4;\n});\n```"
  },
  {
    "task": "Extract all numbers divisible by five from a sequence.",
    "code": "```php\n$sequence = [1, 5, 10, 14, 15, 23, 25, 30, 42, 50];\n$divisibleByFive = array_filter($sequence, fn($number) => $number % 5 === 0);\n```"
  },
  {
    "task": "Select all movies with a rating above 4 stars from a film review site.",
    "code": "```php\n$movies = [\n    ['title' => 'Inception', 'rating' => 4.8],\n    ['title' => 'The Room', 'rating' => 3.6],\n    ['title' => 'Parasite', 'rating' => 4.6],\n    ['title' => 'The Godfather', 'rating' => 4.9],\n    ['title' => 'Cats', 'rating' => 2.7],\n];\n\n$highRatedMovies = array_filter($movies, function($movie) {\n    return $movie['rating'] > 4;\n});\n\nprint_r($highRatedMovies);\n```"
  },
  {
    "task": "Find all jobs with a salary above $50,000 from a job listing.",
    "code": "```php\n<?php\n\n$jobs = [\n    ['title' => 'Software Engineer', 'salary' => 75000],\n    ['title' => 'Data Analyst', 'salary' => 48000],\n    ['title' => 'Product Manager', 'salary' => 91000],\n    ['title' => 'Graphic Designer', 'salary' => 50000],\n];\n\n$highSalaryJobs = array_filter($jobs, function($job) {\n    return $job['salary'] > 50000;\n});\n\nprint_r($highSalaryJobs);\n\n?>\n```"
  },
  {
    "task": "Filter out all entries without an email address from a contact form submission list.",
    "code": "```php\n$submissions = [\n    ['name' => 'Alice', 'email' => 'alice@example.com'],\n    ['name' => 'Bob', 'email' => ''],\n    ['name' => 'Charlie', 'email' => 'charlie@example.com'],\n    ['name' => 'David', 'email' => null],\n];\n\n$filteredSubmissions = array_filter($submissions, function($submission) {\n    return !empty($submission['email']);\n});\n\nprint_r($filteredSubmissions);\n```"
  },
  {
    "task": "Identify all animals weighing more than 50kg from a zoo inventory.",
    "code": "```php\n$zooInventory = [\n    ['name' => 'Elephant', 'weight' => 5000],\n    ['name' => 'Giraffe', 'weight' => 800],\n    ['name' => 'Monkey', 'weight' => 30],\n    ['name' => 'Lion', 'weight' => 190],\n    ['name' => 'Parrot', 'weight' => 1],\n    ['name' => 'Panda', 'weight' => 100],\n];\n\n$heavyAnimals = array_filter($zooInventory, function($animal) {\n    return $animal['weight'] > 50;\n});\n\nprint_r($heavyAnimals);\n```"
  },
  {
    "task": "Select all songs with a duration longer than three minutes from a playlist.",
    "code": "```php\n$playlist = [\n    ['title' => 'Song One', 'duration' => 180],\n    ['title' => 'Song Two', 'duration' => 240],\n    ['title' => 'Song Three', 'duration' => 200],\n    ['title' => 'Song Four', 'duration' => 190],\n];\n\n$filteredSongs = array_filter($playlist, fn($song) => $song['duration'] > 180);\n\nprint_r($filteredSongs);\n```"
  },
  {
    "task": "Extract all accounts with a balance below zero from a bank statement.",
    "code": "```php\n$bankStatement = [\n    ['account' => '123', 'balance' => -50],\n    ['account' => '456', 'balance' => 150],\n    ['account' => '789', 'balance' => -20],\n    ['account' => '012', 'balance' => 200],\n];\n\n$negativeBalanceAccounts = array_filter($bankStatement, function($account) {\n    return $account['balance'] < 0;\n});\n\nprint_r($negativeBalanceAccounts);\n```"
  },
  {
    "task": "Filter out all non-alphabetic characters from a string of text.",
    "code": "```php\nfunction filterAlphabetic($text) {\n    return preg_replace('/[^a-zA-Z]/', '', $text);\n}\n\n$text = \"Example 123, with numbers & symbols!\";\n$filteredText = filterAlphabetic($text);\necho $filteredText;\n```"
  },
  {
    "task": "Select all participants who scored above average in a competition.",
    "code": "```php\n<?php\n\n$participants = [\n    ['name' => 'Alice', 'score' => 85],\n    ['name' => 'Bob', 'score' => 75],\n    ['name' => 'Charlie', 'score' => 95],\n    ['name' => 'David', 'score' => 70],\n    ['name' => 'Eva', 'score' => 90],\n];\n\n$scores = array_column($participants, 'score');\n$averageScore = array_sum($scores) / count($scores);\n\n$aboveAverageParticipants = array_filter($participants, function($participant) use ($averageScore) {\n    return $participant['score'] > $averageScore;\n});\n\nprint_r($aboveAverageParticipants);\n\n?>\n```"
  },
  {
    "task": "Find all houses priced under $300,000 from a real estate database.",
    "code": "```php\n<?php\n\n$houses = [\n    ['id' => 1, 'price' => 250000],\n    ['id' => 2, 'price' => 320000],\n    ['id' => 3, 'price' => 275000],\n    ['id' => 4, 'price' => 300000],\n    ['id' => 5, 'price' => 150000],\n];\n\n$filteredHouses = array_filter($houses, function($house) {\n    return $house['price'] < 300000;\n});\n\nprint_r($filteredHouses);\n\n?>\n```"
  },
  {
    "task": "Identify all plants that bloom in spring from a botanical catalog.",
    "code": "```php\n<?php\n\n$botanicalCatalog = [\n    ['name' => 'Rose', 'bloomSeason' => 'spring'],\n    ['name' => 'Tulip', 'bloomSeason' => 'spring'],\n    ['name' => 'Sunflower', 'bloomSeason' => 'summer'],\n    ['name' => 'Daffodil', 'bloomSeason' => 'spring'],\n    ['name' => 'Chrysanthemum', 'bloomSeason' => 'fall'],\n];\n\n$plantsThatBloomInSpring = array_filter($botanicalCatalog, function($plant) {\n    return $plant['bloomSeason'] === 'spring';\n});\n\nprint_r($plantsThatBloomInSpring);\n\n?>\n```"
  },
  {
    "task": "Extract all passwords that are longer than eight characters from a user database.",
    "code": "```php\n<?php\n\nfunction filterPasswords(array $userDatabase) {\n    return array_filter($userDatabase, function($user) {\n        return strlen($user['password']) > 8;\n    });\n}\n\n// Example usage\n$userDatabase = [\n    ['username' => 'user1', 'password' => 'short'],\n    ['username' => 'user2', 'password' => 'averylongpassword'],\n    ['username' => 'user3', 'password' => 'medium123'],\n    ['username' => 'user4', 'password' => 'toolongpassword'],\n];\n\n$filteredPasswords = filterPasswords($userDatabase);\nprint_r($filteredPasswords);\n\n?>\n```"
  },
  {
    "task": "Filter out all projects that are not yet started from a project management tool.",
    "code": "```php\n$projects = [\n    ['name' => 'Project A', 'status' => 'completed'],\n    ['name' => 'Project B', 'status' => 'not started'],\n    ['name' => 'Project C', 'status' => 'in progress'],\n    ['name' => 'Project D', 'status' => 'not started']\n];\n\n$startedProjects = array_filter($projects, function($project) {\n    return $project['status'] !== 'not started';\n});\n\nprint_r($startedProjects);\n```"
  },
  {
    "task": "Select all days with temperatures exceeding 25\u00b0C from a climate report.",
    "code": "```php\n$climateReport = [\n    ['day' => 'Monday', 'temperature' => 22],\n    ['day' => 'Tuesday', 'temperature' => 27],\n    ['day' => 'Wednesday', 'temperature' => 24],\n    ['day' => 'Thursday', 'temperature' => 30],\n    ['day' => 'Friday', 'temperature' => 25]\n];\n\n$hotDays = array_filter($climateReport, function($report) {\n    return $report['temperature'] > 25;\n});\n\nprint_r($hotDays);\n```"
  },
  {
    "task": "Find all recipes that are vegetarian from a cookbook.",
    "code": "```php\n$cookbook = [\n    ['name' => 'Spaghetti Bolognese', 'vegetarian' => false],\n    ['name' => 'Vegetable Stir Fry', 'vegetarian' => true],\n    ['name' => 'Chicken Curry', 'vegetarian' => false],\n    ['name' => 'Mushroom Risotto', 'vegetarian' => true]\n];\n\n$vegetarianRecipes = array_filter($cookbook, fn($recipe) => $recipe['vegetarian']);\n\nprint_r($vegetarianRecipes);\n```"
  },
  {
    "task": "Identify all articles that mention a specific keyword from a news feed.",
    "code": "```php\n<?php\n\nfunction filterArticlesByKeyword(array $articles, string $keyword): array {\n    return array_filter($articles, function($article) use ($keyword) {\n        return stripos($article, $keyword) !== false;\n    });\n}\n\n// Example usage\n$newsFeed = [\n    \"New technology is reshaping industries.\",\n    \"Political tensions rise in the region.\",\n    \"The latest sports update includes a major upset.\",\n    \"Technology companies report earnings.\"\n];\n\n$keyword = \"technology\";\n$filteredArticles = filterArticlesByKeyword($newsFeed, $keyword);\n\nprint_r($filteredArticles);\n\n?>\n```"
  },
  {
    "task": "Extract all files with the '.jpg' extension from a directory.",
    "code": "```php\n$directory = 'path/to/directory';\n$files = scandir($directory);\n$jpgFiles = array_filter($files, function($file) use ($directory) {\n    return is_file($directory . '/' . $file) && pathinfo($file, PATHINFO_EXTENSION) === 'jpg';\n});\n```"
  },
  {
    "task": "Filter out all transactions that are not categorized from a financial statement.",
    "code": "```php\n<?php\n\n$transactions = [\n    ['id' => 1, 'amount' => 100, 'category' => 'Food'],\n    ['id' => 2, 'amount' => 200, 'category' => null],\n    ['id' => 3, 'amount' => 300, 'category' => 'Transport'],\n    ['id' => 4, 'amount' => 400, 'category' => null],\n    ['id' => 5, 'amount' => 500, 'category' => 'Entertainment'],\n];\n\n$categorizedTransactions = array_filter($transactions, function($transaction) {\n    return !is_null($transaction['category']);\n});\n\nprint_r($categorizedTransactions);\n\n?>\n```"
  },
  {
    "task": "Select all paintings created before 1900 from an art gallery collection.",
    "code": "```php\n$artGallery = [\n    ['title' => 'Mona Lisa', 'year' => 1503],\n    ['title' => 'The Starry Night', 'year' => 1889],\n    ['title' => 'The Persistence of Memory', 'year' => 1931],\n    ['title' => 'The Scream', 'year' => 1893],\n    ['title' => 'Girl with a Pearl Earring', 'year' => 1665],\n];\n\n$paintingsBefore1900 = array_filter($artGallery, function($painting) {\n    return $painting['year'] < 1900;\n});\n\nprint_r($paintingsBefore1900);\n```"
  },
  {
    "task": "Find all students with perfect attendance from a school record.",
    "code": "```php\n<?php\n\n$students = [\n    ['name' => 'Alice', 'attendance' => 100],\n    ['name' => 'Bob', 'attendance' => 85],\n    ['name' => 'Charlie', 'attendance' => 100],\n    ['name' => 'David', 'attendance' => 95],\n];\n\n$perfectAttendanceStudents = array_filter($students, function($student) {\n    return $student['attendance'] === 100;\n});\n\nprint_r($perfectAttendanceStudents);\n\n?>\n```"
  },
  {
    "task": "Identify all messages sent by a specific user from a chat application.",
    "code": "```php\n<?php\n\nfunction filterMessagesByUser($messages, $userId) {\n    return array_filter($messages, function($message) use ($userId) {\n        return $message['user_id'] === $userId;\n    });\n}\n\n// Example usage:\n$messages = [\n    ['user_id' => 1, 'content' => 'Hello'],\n    ['user_id' => 2, 'content' => 'Hi'],\n    ['user_id' => 1, 'content' => 'How are you?'],\n    ['user_id' => 3, 'content' => 'Good morning'],\n];\n\n$specificUserMessages = filterMessagesByUser($messages, 1);\nprint_r($specificUserMessages);\n\n?>\n```"
  },
  {
    "task": "Extract all elements greater than 100 from an array of numbers.",
    "code": "```php\n$numbers = [150, 20, 300, 45, 100, 250, 90];\n$filtered = array_filter($numbers, fn($number) => $number > 100);\n```"
  },
  {
    "task": "Filter out all words that do not end in 'ed' from a paragraph.",
    "code": "```php\n$paragraph = \"The cat jumped and looked scared as it hurried towards the red shed.\";\n$words = explode(' ', $paragraph);\n$filteredWords = array_filter($words, fn($word) => substr($word, -2) === 'ed');\n$result = implode(' ', $filteredWords);\necho $result;\n```"
  },
  {
    "task": "Select all flights departing before noon from a flight schedule.",
    "code": "```php\n<?php\n\n$flights = [\n    ['flight' => 'AA123', 'departure' => '2023-10-01 08:30:00'],\n    ['flight' => 'BA456', 'departure' => '2023-10-01 13:45:00'],\n    ['flight' => 'CA789', 'departure' => '2023-10-01 11:15:00'],\n    ['flight' => 'DA012', 'departure' => '2023-10-01 09:00:00'],\n];\n\n$noon = strtotime('12:00:00');\n$flightsBeforeNoon = array_filter($flights, function($flight) use ($noon) {\n    return strtotime($flight['departure']) < $noon;\n});\n\nprint_r($flightsBeforeNoon);\n?>\n```"
  },
  {
    "task": "Find all products priced above $20 from an online store inventory.",
    "code": "```php\n$inventory = [\n    ['name' => 'Product 1', 'price' => 15],\n    ['name' => 'Product 2', 'price' => 25],\n    ['name' => 'Product 3', 'price' => 30],\n    ['name' => 'Product 4', 'price' => 10],\n    ['name' => 'Product 5', 'price' => 50],\n];\n\n$filteredProducts = array_filter($inventory, function($product) {\n    return $product['price'] > 20;\n});\n\nprint_r($filteredProducts);\n```"
  },
  {
    "task": "Identify all sessions longer than one hour from a webinar series.",
    "code": "```php\n<?php\n\n$sessions = [\n    ['title' => 'Introduction to PHP', 'duration' => 45],\n    ['title' => 'Advanced PHP Techniques', 'duration' => 75],\n    ['title' => 'PHP and Databases', 'duration' => 60],\n    ['title' => 'Web Security with PHP', 'duration' => 90],\n];\n\n$longSessions = array_filter($sessions, fn($session) => $session['duration'] > 60);\n\nprint_r($longSessions);\n\n?>\n```"
  },
  {
    "task": "Extract all images with a resolution higher than 1080p from a photo library.",
    "code": "```php\n<?php\n\n$photoLibrary = [\n    ['filename' => 'photo1.jpg', 'width' => 1920, 'height' => 1080],\n    ['filename' => 'photo2.jpg', 'width' => 2560, 'height' => 1440],\n    ['filename' => 'photo3.jpg', 'width' => 1280, 'height' => 720],\n    ['filename' => 'photo4.jpg', 'width' => 3840, 'height' => 2160],\n];\n\n$highResolutionImages = array_filter($photoLibrary, function($photo) {\n    return $photo['width'] > 1920 || $photo['height'] > 1080;\n});\n\nprint_r($highResolutionImages);\n\n?>\n```"
  },
  {
    "task": "Filter out all responses that are not 'yes' or 'no' from a survey result.",
    "code": "```php\n$responses = ['yes', 'no', 'maybe', 'yes', 'no', 'not sure', 'yes'];\n$filteredResponses = array_filter($responses, fn($response) => $response === 'yes' || $response === 'no');\n```"
  },
  {
    "task": "Select all tweets with more than 100 likes from a Twitter feed.",
    "code": "```php\n$tweets = [\n    ['text' => 'First tweet', 'likes' => 50],\n    ['text' => 'Second tweet', 'likes' => 150],\n    ['text' => 'Third tweet', 'likes' => 200],\n    ['text' => 'Fourth tweet', 'likes' => 80],\n];\n\n$popularTweets = array_filter($tweets, function($tweet) {\n    return $tweet['likes'] > 100;\n});\n\nprint_r($popularTweets);\n```"
  },
  {
    "task": "Find all links that are broken from a webpage.",
    "code": "```php\n<?php\n\nfunction isBrokenLink($url) {\n    $headers = @get_headers($url);\n    return $headers && strpos($headers[0], '200') === false;\n}\n\nfunction findBrokenLinks($webpageUrl) {\n    $htmlContent = file_get_contents($webpageUrl);\n    preg_match_all('/<a href=\"([^\"]+)\"/i', $htmlContent, $matches);\n    $links = $matches[1];\n    \n    $brokenLinks = array_filter($links, function($link) {\n        return isBrokenLink($link);\n    });\n    \n    return $brokenLinks;\n}\n\n$webpageUrl = 'http://example.com';\n$brokenLinks = findBrokenLinks($webpageUrl);\nprint_r($brokenLinks);\n\n?>\n```"
  },
  {
    "task": "Identify all machines that are currently offline from a network monitoring tool.",
    "code": "```php\n$machines = [\n    ['name' => 'Server1', 'status' => 'online'],\n    ['name' => 'Server2', 'status' => 'offline'],\n    ['name' => 'Server3', 'status' => 'online'],\n    ['name' => 'Server4', 'status' => 'offline'],\n];\n\n$offlineMachines = array_filter($machines, function($machine) {\n    return $machine['status'] === 'offline';\n});\n\nprint_r($offlineMachines);\n```"
  },
  {
    "task": "Extract all invoices with a due date in the current month from an accounting system.",
    "code": "```php\n<?php\n\nfunction filterInvoicesByCurrentMonth($invoices) {\n    $currentYear = date('Y');\n    $currentMonth = date('m');\n\n    return array_filter($invoices, function($invoice) use ($currentYear, $currentMonth) {\n        $dueDate = new DateTime($invoice['due_date']);\n        return $dueDate->format('Y') == $currentYear && $dueDate->format('m') == $currentMonth;\n    });\n}\n\n// Example usage:\n$invoices = [\n    ['id' => 1, 'due_date' => '2023-10-15'],\n    ['id' => 2, 'due_date' => '2023-11-10'],\n    ['id' => 3, 'due_date' => '2023-10-25'],\n];\n\n$currentMonthInvoices = filterInvoicesByCurrentMonth($invoices);\nprint_r($currentMonthInvoices);\n\n?>\n```"
  },
  {
    "task": "Filter out all lines in a file that start with a '#' from a configuration file.",
    "code": "```php\n<?php\n\nfunction filterConfigFile($filePath) {\n    $lines = file($filePath, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);\n    $filteredLines = array_filter($lines, function($line) {\n        return strpos(trim($line), '#') !== 0;\n    });\n    return $filteredLines;\n}\n\n$filePath = 'config.txt';\n$filteredConfig = filterConfigFile($filePath);\nprint_r($filteredConfig);\n\n?>\n```"
  },
  {
    "task": "Select all posts with a comment count higher than 50 from a blog.",
    "code": "```php\n$posts = [\n    ['title' => 'Post 1', 'comments' => 45],\n    ['title' => 'Post 2', 'comments' => 60],\n    ['title' => 'Post 3', 'comments' => 30],\n    ['title' => 'Post 4', 'comments' => 75],\n];\n\n$filteredPosts = array_filter($posts, function($post) {\n    return $post['comments'] > 50;\n});\n\nprint_r($filteredPosts);\n```"
  },
  {
    "task": "Find all offers that expire within the next week from a promotional database.",
    "code": "```php\n<?php\n\n$offers = [\n    ['name' => 'Offer 1', 'expiry_date' => '2023-10-10'],\n    ['name' => 'Offer 2', 'expiry_date' => '2023-10-15'],\n    ['name' => 'Offer 3', 'expiry_date' => '2023-10-18'],\n    ['name' => 'Offer 4', 'expiry_date' => '2023-10-05'],\n];\n\n$today = new DateTime();\n$nextWeek = (clone $today)->modify('+1 week');\n\n$expiringOffers = array_filter($offers, function($offer) use ($today, $nextWeek) {\n    $expiryDate = new DateTime($offer['expiry_date']);\n    return $expiryDate >= $today && $expiryDate <= $nextWeek;\n});\n\nprint_r($expiringOffers);\n\n?>\n```"
  },
  {
    "task": "Identify all items that are on sale from a shopping catalog.",
    "code": "```php\n$catalog = [\n    [\"name\" => \"Shirt\", \"price\" => 20, \"on_sale\" => true],\n    [\"name\" => \"Pants\", \"price\" => 30, \"on_sale\" => false],\n    [\"name\" => \"Shoes\", \"price\" => 50, \"on_sale\" => true],\n    [\"name\" => \"Hat\", \"price\" => 15, \"on_sale\" => false],\n];\n\n$onSaleItems = array_filter($catalog, fn($item) => $item[\"on_sale\"]);\n\nprint_r($onSaleItems);\n```"
  },
  {
    "task": "Extract all notes that mention 'urgent' from a meeting record.",
    "code": "```php\n$meetingNotes = [\n    \"Discuss project timeline\",\n    \"Review budget constraints\",\n    \"urgent: finalize the draft\",\n    \"urgent: set meeting with stakeholders\",\n    \"Team building activity planning\"\n];\n\n$urgentNotes = array_filter($meetingNotes, function($note) {\n    return strpos($note, 'urgent') !== false;\n});\n\nprint_r($urgentNotes);\n```"
  },
  {
    "task": "Filter out all numbers that do not have a remainder when divided by two from a list.",
    "code": "```php\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$filtered = array_filter($list, fn($num) => $num % 2 !== 0);\n```"
  },
  {
    "task": "Select all concerts happening in the summer from an event calendar.",
    "code": "```php\n<?php\n\n$events = [\n    ['name' => 'Concert A', 'date' => '2023-06-15'],\n    ['name' => 'Concert B', 'date' => '2023-07-20'],\n    ['name' => 'Concert C', 'date' => '2023-09-10'],\n    ['name' => 'Concert D', 'date' => '2023-12-01'],\n    ['name' => 'Concert E', 'date' => '2023-08-05'],\n];\n\n$summerConcerts = array_filter($events, function ($event) {\n    $month = (int)date('m', strtotime($event['date']));\n    return $month >= 6 && $month <= 8;\n});\n\nprint_r($summerConcerts);\n\n?>\n```"
  },
  {
    "task": "Find all users with more than 1000 followers from a social media platform.",
    "code": "```php\n$users = [\n    ['name' => 'Alice', 'followers' => 1200],\n    ['name' => 'Bob', 'followers' => 950],\n    ['name' => 'Charlie', 'followers' => 1100],\n    ['name' => 'David', 'followers' => 500],\n];\n\n$usersWithMoreThan1000Followers = array_filter($users, function($user) {\n    return $user['followers'] > 1000;\n});\n\nprint_r($usersWithMoreThan1000Followers);\n```"
  },
  {
    "task": "Identify all stocks with a growth rate above 10% from a financial portfolio.",
    "code": "```php\n$portfolio = [\n    ['name' => 'Stock A', 'growth_rate' => 0.15],\n    ['name' => 'Stock B', 'growth_rate' => 0.05],\n    ['name' => 'Stock C', 'growth_rate' => 0.12],\n    ['name' => 'Stock D', 'growth_rate' => 0.08],\n    ['name' => 'Stock E', 'growth_rate' => 0.20],\n];\n\n$growthStocks = array_filter($portfolio, function($stock) {\n    return $stock['growth_rate'] > 0.10;\n});\n\nprint_r($growthStocks);\n```"
  },
  {
    "task": "Extract all reviews that have a five-star rating from a product review site.",
    "code": "```php\n<?php\n\n$reviews = [\n    ['rating' => 5, 'review' => 'Excellent product!'],\n    ['rating' => 4, 'review' => 'Very good, but could be improved.'],\n    ['rating' => 5, 'review' => 'Loved it, highly recommend!'],\n    ['rating' => 3, 'review' => 'Average experience'],\n    ['rating' => 5, 'review' => 'Perfect, exactly what I needed.'],\n];\n\n$fiveStarReviews = array_filter($reviews, function($review) {\n    return $review['rating'] === 5;\n});\n\nprint_r($fiveStarReviews);\n```"
  },
  {
    "task": "Filter out all emails that are not flagged from an inbox.",
    "code": "```php\n<?php\n\n$inbox = [\n    ['email' => 'email1@example.com', 'flagged' => true],\n    ['email' => 'email2@example.com', 'flagged' => false],\n    ['email' => 'email3@example.com', 'flagged' => true],\n    ['email' => 'email4@example.com', 'flagged' => false],\n];\n\n$flaggedEmails = array_filter($inbox, function($email) {\n    return $email['flagged'] === true;\n});\n\nprint_r($flaggedEmails);\n```"
  },
  {
    "task": "Select all entries with a timestamp from the past 24 hours from a log file.",
    "code": "```php\n<?php\n\n$logEntries = [\n    ['timestamp' => '2023-10-15 14:00:00', 'message' => 'Log entry 1'],\n    ['timestamp' => '2023-10-16 10:00:00', 'message' => 'Log entry 2'],\n    ['timestamp' => '2023-10-16 14:30:00', 'message' => 'Log entry 3'],\n];\n\n$filteredEntries = array_filter($logEntries, function($entry) {\n    $entryTime = strtotime($entry['timestamp']);\n    $now = time();\n    return $entryTime >= ($now - 86400);\n});\n\nprint_r($filteredEntries);\n```"
  },
  {
    "task": "Find all books by a specific author from a library database.",
    "code": "```php\nfunction getBooksByAuthor($books, $author) {\n    return array_filter($books, function($book) use ($author) {\n        return $book['author'] === $author;\n    });\n}\n\n// Example usage:\n$library = [\n    ['title' => 'Book 1', 'author' => 'Author A'],\n    ['title' => 'Book 2', 'author' => 'Author B'],\n    ['title' => 'Book 3', 'author' => 'Author A'],\n    ['title' => 'Book 4', 'author' => 'Author C'],\n];\n\n$specificAuthorBooks = getBooksByAuthor($library, 'Author A');\nprint_r($specificAuthorBooks);\n```"
  },
  {
    "task": "Identify all donations above $500 from a charity fundraiser report.",
    "code": "```php\n$donations = [100, 250, 600, 750, 50, 800, 150]; // Example donations array\n\n$highValueDonations = array_filter($donations, fn($donation) => $donation > 500);\n\nprint_r($highValueDonations);\n```"
  },
  {
    "task": "Extract all assignments due in the next week from a course syllabus.",
    "code": "```php\n<?php\n\n$syllabus = [\n    ['title' => 'Assignment 1', 'due_date' => '2023-10-15'],\n    ['title' => 'Assignment 2', 'due_date' => '2023-10-20'],\n    ['title' => 'Assignment 3', 'due_date' => '2023-10-25'],\n    ['title' => 'Assignment 4', 'due_date' => '2023-11-01'],\n];\n\n$today = new DateTime();\n$nextWeek = (clone $today)->modify('+1 week');\n\n$dueNextWeek = array_filter($syllabus, function($assignment) use ($today, $nextWeek) {\n    $dueDate = new DateTime($assignment['due_date']);\n    return $dueDate > $today && $dueDate <= $nextWeek;\n});\n\nprint_r($dueNextWeek);\n\n?>\n```"
  },
  {
    "task": "Filter out all movies that are not in English from a streaming service.",
    "code": "```php\n$movies = [\n    ['title' => 'Movie 1', 'language' => 'English'],\n    ['title' => 'Movie 2', 'language' => 'French'],\n    ['title' => 'Movie 3', 'language' => 'English'],\n    ['title' => 'Movie 4', 'language' => 'Spanish'],\n];\n\n$englishMovies = array_filter($movies, function($movie) {\n    return $movie['language'] === 'English';\n});\n\nprint_r($englishMovies);\n```"
  },
  {
    "task": "Select all landmarks located in Europe from a travel guide.",
    "code": "```php\n$landmarks = [\n    ['name' => 'Eiffel Tower', 'location' => 'Europe'],\n    ['name' => 'Great Wall of China', 'location' => 'Asia'],\n    ['name' => 'Colosseum', 'location' => 'Europe'],\n    ['name' => 'Statue of Liberty', 'location' => 'North America'],\n];\n\n$europeanLandmarks = array_filter($landmarks, function($landmark) {\n    return $landmark['location'] === 'Europe';\n});\n\nprint_r($europeanLandmarks);\n```"
  },
  {
    "task": "Find all contracts that are set to renew next month from a contract management system.",
    "code": "```php\n<?php\n\n$contracts = [\n    ['id' => 1, 'renewalDate' => '2023-11-15'],\n    ['id' => 2, 'renewalDate' => '2023-12-10'],\n    ['id' => 3, 'renewalDate' => '2024-01-20'],\n];\n\n$nextMonth = new DateTime('first day of next month');\n\n$renewingContracts = array_filter($contracts, function($contract) use ($nextMonth) {\n    $renewalDate = new DateTime($contract['renewalDate']);\n    return $renewalDate->format('Y-m') === $nextMonth->format('Y-m');\n});\n\nprint_r($renewingContracts);\n\n?>\n```"
  },
  {
    "task": "Identify all volunteer hours logged in the past year from a non-profit organization database.",
    "code": "```php\n<?php\n\nfunction filterVolunteerHours($volunteerLogs) {\n    $oneYearAgo = strtotime('-1 year');\n    \n    return array_filter($volunteerLogs, function ($log) use ($oneYearAgo) {\n        return strtotime($log['date']) >= $oneYearAgo;\n    });\n}\n\n// Example usage\n$volunteerLogs = [\n    ['id' => 1, 'date' => '2022-11-10', 'hours' => 3],\n    ['id' => 2, 'date' => '2023-05-15', 'hours' => 5],\n    ['id' => 3, 'date' => '2021-10-01', 'hours' => 2],\n    // Additional logs...\n];\n\n$recentLogs = filterVolunteerHours($volunteerLogs);\nprint_r($recentLogs);\n\n?>\n```"
  },
  {
    "task": "Extract all elements that are not strings from a mixed-type list.",
    "code": "```php\nfunction filterNonStrings(array $list): array {\n    return array_filter($list, fn($element) => !is_string($element));\n}\n\n// Example usage:\n$input = [1, 'hello', 2.5, 'world', true, 'PHP', [], new stdClass()];\n$result = filterNonStrings($input);\nprint_r($result);\n```"
  },
  {
    "task": "Filter out all orders that are not yet shipped from an e-commerce system.",
    "code": "```php\n<?php\n\n$orders = [\n    ['id' => 1, 'status' => 'shipped'],\n    ['id' => 2, 'status' => 'pending'],\n    ['id' => 3, 'status' => 'shipped'],\n    ['id' => 4, 'status' => 'processing'],\n];\n\n$shippedOrders = array_filter($orders, fn($order) => $order['status'] === 'shipped');\n\nprint_r($shippedOrders);\n\n?>\n```"
  },
  {
    "task": "Select all emails sent from a specific address in an email server.",
    "code": "```php\nfunction filterEmailsFromAddress(array $emails, string $fromAddress): array {\n    return array_filter($emails, function($email) use ($fromAddress) {\n        return isset($email['from']) && $email['from'] === $fromAddress;\n    });\n}\n\n// Example usage\n$emails = [\n    ['from' => 'alice@example.com', 'subject' => 'Hello'],\n    ['from' => 'bob@example.com', 'subject' => 'Meeting'],\n    ['from' => 'alice@example.com', 'subject' => 'Update']\n];\n\n$filteredEmails = filterEmailsFromAddress($emails, 'alice@example.com');\nprint_r($filteredEmails);\n```"
  },
  {
    "task": "Find all passwords with at least one special character from a security database.",
    "code": "```php\n$passwords = ['password123', 'hello@world', 'secure#Password', 'justText'];\n\n$specialCharacterPattern = '/[!@#$%^&*(),.?\":{}|<>]/';\n\n$filteredPasswords = array_filter($passwords, function($password) use ($specialCharacterPattern) {\n    return preg_match($specialCharacterPattern, $password);\n});\n\nprint_r($filteredPasswords);\n```"
  },
  {
    "task": "Identify all courses with a prerequisite from a university catalog.",
    "code": "```php\n<?php\n\n$courses = [\n    ['name' => 'Calculus I', 'prerequisite' => null],\n    ['name' => 'Calculus II', 'prerequisite' => 'Calculus I'],\n    ['name' => 'Physics I', 'prerequisite' => null],\n    ['name' => 'Physics II', 'prerequisite' => 'Physics I'],\n    ['name' => 'Literature', 'prerequisite' => null],\n];\n\n$coursesWithPrerequisites = array_filter($courses, function($course) {\n    return !is_null($course['prerequisite']);\n});\n\nprint_r($coursesWithPrerequisites);\n\n?>\n```"
  },
  {
    "task": "Extract all genes associated with a specific trait from a genetic database.",
    "code": "```php\n<?php\n\nfunction getGenesAssociatedWithTrait(array $geneticDatabase, string $trait): array {\n    return array_filter($geneticDatabase, function($gene) use ($trait) {\n        return in_array($trait, $gene['traits']);\n    });\n}\n\n// Example usage:\n$geneticDatabase = [\n    ['gene' => 'GeneA', 'traits' => ['Trait1', 'Trait2']],\n    ['gene' => 'GeneB', 'traits' => ['Trait3', 'Trait4']],\n    ['gene' => 'GeneC', 'traits' => ['Trait1', 'Trait5']],\n];\n\n$trait = 'Trait1';\n$genesWithTrait = getGenesAssociatedWithTrait($geneticDatabase, $trait);\n\nprint_r($genesWithTrait);\n\n?>\n```"
  },
  {
    "task": "Filter out all investments with a risk level below medium from a portfolio.",
    "code": "```php\n<?php\n\n$portfolio = [\n    ['name' => 'Investment A', 'risk' => 'low'],\n    ['name' => 'Investment B', 'risk' => 'medium'],\n    ['name' => 'Investment C', 'risk' => 'high'],\n    ['name' => 'Investment D', 'risk' => 'medium'],\n    ['name' => 'Investment E', 'risk' => 'low'],\n];\n\n$filteredPortfolio = array_filter($portfolio, function($investment) {\n    return $investment['risk'] !== 'low';\n});\n\nprint_r($filteredPortfolio);\n?>\n```"
  },
  {
    "task": "Select all calls longer than five minutes from a call log.",
    "code": "```php\n<?php\n\n$callLog = [\n    ['number' => '123-456-7890', 'duration' => 300],\n    ['number' => '987-654-3210', 'duration' => 400],\n    ['number' => '555-555-5555', 'duration' => 600],\n    ['number' => '111-111-1111', 'duration' => 700],\n];\n\n$longCalls = array_filter($callLog, function($call) {\n    return $call['duration'] > 300; // 5 minutes * 60 seconds = 300 seconds\n});\n\nprint_r($longCalls);\n```"
  }
]