[
  {
    "task": "Create a function that calculates the sum of two numbers and returns the result.",
    "code": "```php\nfunction calculateSum($a, $b) {\n    return $a + $b;\n}\n```"
  },
  {
    "task": "Design a function that takes a string and returns its length.",
    "code": "```php\nfunction getStringLength($string) {\n    return strlen($string);\n}\n```"
  },
  {
    "task": "Write a function that checks if a number is prime and returns a boolean value.",
    "code": "```php\nfunction isPrime($number) {\n    if ($number <= 1) {\n        return false;\n    }\n    for ($i = 2; $i <= sqrt($number); $i++) {\n        if ($number % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n```"
  },
  {
    "task": "Implement a function that returns the highest value in a list of integers.",
    "code": "```php\nfunction findMaxValue(array $numbers) {\n    if (empty($numbers)) return null;\n    $maxValue = $numbers[0];\n    foreach ($numbers as $number) {\n        if ($number > $maxValue) {\n            $maxValue = $number;\n        }\n    }\n    return $maxValue;\n}\n```"
  },
  {
    "task": "Create a function that accepts a list of words and returns the longest word.",
    "code": "```php\nfunction findLongestWord($words) {\n    $longestWord = '';\n    foreach ($words as $word) {\n        if (strlen($word) > strlen($longestWord)) {\n            $longestWord = $word;\n        }\n    }\n    return $longestWord;\n}\n```"
  },
  {
    "task": "Write a function that takes a temperature in Celsius and returns the equivalent in Fahrenheit.",
    "code": "```php\nfunction celsiusToFahrenheit($celsius) {\n    return $celsius * 9 / 5 + 32;\n}\n```"
  },
  {
    "task": "Develop a function that returns the factorial of a given number.",
    "code": "```php\nfunction factorial($n) {\n    if ($n <= 1) {\n        return 1;\n    }\n    return $n * factorial($n - 1);\n}\n```"
  },
  {
    "task": "Implement a function that receives a date and returns the day of the week.",
    "code": "```php\nfunction getDayOfWeek($date) {\n    return date('l', strtotime($date));\n}\n```"
  },
  {
    "task": "Write a function that calculates the area of a circle given its radius and returns the value.",
    "code": "```php\n<?php\nfunction calculateCircleArea($radius) {\n    return pi() * $radius * $radius;\n}\n?>\n```"
  },
  {
    "task": "Create a function that converts a string to uppercase and returns the modified string.",
    "code": "```php\nfunction convertToUppercase($inputString) {\n    return strtoupper($inputString);\n}\n```"
  },
  {
    "task": "Design a function that returns the reverse of a given list.",
    "code": "```php\nfunction reverseList($list) {\n    return array_reverse($list);\n}\n```"
  },
  {
    "task": "Implement a function that accepts a string and returns a dictionary with character frequencies.",
    "code": "```php\nfunction characterFrequencies($string) {\n    $frequency = [];\n    $length = strlen($string);\n    for ($i = 0; $i < $length; $i++) {\n        $char = $string[$i];\n        if (array_key_exists($char, $frequency)) {\n            $frequency[$char]++;\n        } else {\n            $frequency[$char] = 1;\n        }\n    }\n    return $frequency;\n}\n```"
  },
  {
    "task": "Write a function that returns the first non-repeating character in a string.",
    "code": "```php\nfunction firstNonRepeatingCharacter($string) {\n    $charCount = [];\n    \n    for ($i = 0; $i < strlen($string); $i++) {\n        $char = $string[$i];\n        if (isset($charCount[$char])) {\n            $charCount[$char]++;\n        } else {\n            $charCount[$char] = 1;\n        }\n    }\n    \n    for ($i = 0; $i < strlen($string); $i++) {\n        if ($charCount[$string[$i]] === 1) {\n            return $string[$i];\n        }\n    }\n    \n    return null;\n}\n```"
  },
  {
    "task": "Create a function that takes a list of numbers and returns a new list with only even numbers.",
    "code": "```php\nfunction filterEvenNumbers($numbers) {\n    return array_filter($numbers, function($number) {\n        return $number % 2 === 0;\n    });\n}\n```"
  },
  {
    "task": "Develop a function that receives a sentence and returns the word count.",
    "code": "```php\nfunction countWords($sentence) {\n    return str_word_count($sentence);\n}\n```"
  },
  {
    "task": "Implement a function that returns the smallest element in an array.",
    "code": "```php\nfunction findSmallestElement($array) {\n    if (empty($array)) {\n        return null; // Handle empty array case if necessary\n    }\n    $smallest = $array[0];\n    foreach ($array as $element) {\n        if ($element < $smallest) {\n            $smallest = $element;\n        }\n    }\n    return $smallest;\n}\n```"
  },
  {
    "task": "Write a function that takes two strings and returns true if they are anagrams.",
    "code": "```php\nfunction areAnagrams($string1, $string2) {\n    $array1 = str_split($string1);\n    $array2 = str_split($string2);\n    sort($array1);\n    sort($array2);\n    return $array1 === $array2;\n}\n```"
  },
  {
    "task": "Create a function that accepts an integer and returns a list of its divisors.",
    "code": "```php\nfunction getDivisors($number) {\n    $divisors = [];\n    for ($i = 1; $i <= $number; $i++) {\n        if ($number % $i === 0) {\n            $divisors[] = $i;\n        }\n    }\n    return $divisors;\n}\n```"
  },
  {
    "task": "Design a function that returns the square root of a given number.",
    "code": "```php\nfunction calculateSquareRoot($number) {\n    return sqrt($number);\n}\n```"
  },
  {
    "task": "Implement a function that accepts a list and returns it sorted in ascending order.",
    "code": "```php\nfunction sortListAscending($list) {\n    sort($list);\n    return $list;\n}\n```"
  },
  {
    "task": "Write a function that checks whether a given year is a leap year and returns a boolean.",
    "code": "```php\nfunction isLeapYear($year) {\n    return ($year % 4 == 0 && $year % 100 != 0) || ($year % 400 == 0);\n}\n```"
  },
  {
    "task": "Create a function that receives a list of numbers and returns their average.",
    "code": "```php\nfunction calculateAverage($numbers) {\n    if (count($numbers) === 0) {\n        return 0;\n    }\n    $sum = array_sum($numbers);\n    return $sum / count($numbers);\n}\n```"
  },
  {
    "task": "Develop a function that returns the nth Fibonacci number.",
    "code": "```php\nfunction fibonacci($n) {\n    if ($n <= 0) return 0;\n    if ($n === 1) return 1;\n    $a = 0;\n    $b = 1;\n    for ($i = 2; $i <= $n; $i++) {\n        $temp = $a + $b;\n        $a = $b;\n        $b = $temp;\n    }\n    return $b;\n}\n```"
  },
  {
    "task": "Implement a function that accepts a string and returns it with vowels removed.",
    "code": "```php\nfunction removeVowels($input) {\n    return preg_replace('/[aeiouAEIOU]/', '', $input);\n}\n```"
  },
  {
    "task": "Write a function that takes two dates and returns the number of days between them.",
    "code": "```php\nfunction daysBetween($date1, $date2) {\n    $datetime1 = new DateTime($date1);\n    $datetime2 = new DateTime($date2);\n    $interval = $datetime1->diff($datetime2);\n    return $interval->days;\n}\n```"
  },
  {
    "task": "Create a function that returns the last element of a list.",
    "code": "```php\nfunction getLastElement($list) {\n    return end($list);\n}\n```"
  },
  {
    "task": "Design a function that calculates the GCD of two numbers and returns it.",
    "code": "```php\nfunction gcd($a, $b) {\n    while ($b != 0) {\n        $t = $b;\n        $b = $a % $b;\n        $a = $t;\n    }\n    return $a;\n}\n```"
  },
  {
    "task": "Implement a function that takes a list and returns a tuple with the min and max values.",
    "code": "```php\nfunction minMax(array $list): array {\n    if (empty($list)) {\n        return [null, null];\n    }\n    $minValue = min($list);\n    $maxValue = max($list);\n    return [$minValue, $maxValue];\n}\n```"
  },
  {
    "task": "Write a function that converts a binary string to its decimal representation and returns it.",
    "code": "```php\nfunction binaryToDecimal($binaryString) {\n    return bindec($binaryString);\n}\n```"
  },
  {
    "task": "Create a function that accepts a dictionary and returns a list of its keys.",
    "code": "```php\nfunction getKeys($dictionary) {\n    return array_keys($dictionary);\n}\n```"
  },
  {
    "task": "Develop a function that returns the concatenation of two strings.",
    "code": "```php\nfunction concatenateStrings($string1, $string2) {\n    return $string1 . $string2;\n}\n```"
  },
  {
    "task": "Implement a function that receives a list and returns a new list with duplicates removed.",
    "code": "```php\nfunction removeDuplicates($list) {\n    return array_values(array_unique($list));\n}\n```"
  },
  {
    "task": "Write a function that returns the intersection of two lists.",
    "code": "```php\nfunction intersection($list1, $list2) {\n    return array_values(array_intersect($list1, $list2));\n}\n```"
  },
  {
    "task": "Create a function that takes an integer and returns whether it is even or odd as a string.",
    "code": "```php\nfunction evenOrOdd($number) {\n    return ($number % 2 === 0) ? \"even\" : \"odd\";\n}\n```"
  },
  {
    "task": "Design a function that returns the number of vowels in a given string.",
    "code": "```php\nfunction countVowels($string) {\n    $vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n    $count = 0;\n    for ($i = 0; $i < strlen($string); $i++) {\n        if (in_array($string[$i], $vowels)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n```"
  },
  {
    "task": "Implement a function that counts the occurrences of a substring within a string and returns it.",
    "code": "```php\nfunction countSubstringOccurrences($string, $substring) {\n    return substr_count($string, $substring);\n}\n```"
  },
  {
    "task": "Write a function that accepts a list of numbers and returns them sorted in descending order.",
    "code": "```php\nfunction sortDescending($numbers) {\n    rsort($numbers);\n    return $numbers;\n}\n```"
  },
  {
    "task": "Create a function that returns the median of a list of numbers.",
    "code": "```php\nfunction findMedian($numbers) {\n    sort($numbers);\n    $count = count($numbers);\n    $middle = floor($count / 2);\n    \n    if ($count % 2) {\n        return $numbers[$middle];\n    } else {\n        return ($numbers[$middle - 1] + $numbers[$middle]) / 2;\n    }\n}\n```"
  },
  {
    "task": "Develop a function that receives a sentence and returns it with words in reverse order.",
    "code": "```php\nfunction reverseWordsInSentence($sentence) {\n    $words = explode(' ', $sentence);\n    $reversedWords = array_reverse($words);\n    return implode(' ', $reversedWords);\n}\n```"
  },
  {
    "task": "Implement a function that returns the sum of all elements in a matrix.",
    "code": "```php\nfunction sumMatrix($matrix) {\n    $sum = 0;\n    foreach ($matrix as $row) {\n        foreach ($row as $element) {\n            $sum += $element;\n        }\n    }\n    return $sum;\n}\n```"
  },
  {
    "task": "Write a function that accepts a string and returns true if it is a palindrome.",
    "code": "```php\nfunction isPalindrome($string) {\n    $reversedString = strrev($string);\n    return $string === $reversedString;\n}\n```"
  },
  {
    "task": "Create a function that takes a number and returns its binary representation as a string.",
    "code": "```php\nfunction toBinary($number) {\n    return decbin($number);\n}\n```"
  },
  {
    "task": "Design a function that returns the number of words in a paragraph.",
    "code": "```php\nfunction countWordsInParagraph($paragraph) {\n    return str_word_count($paragraph);\n}\n```"
  },
  {
    "task": "Implement a function that accepts a list and returns the index of its maximum element.",
    "code": "```php\nfunction indexOfMaxElement($list) {\n    if (empty($list)) {\n        return null;\n    }\n    $maxIndex = 0;\n    $maxValue = $list[0];\n    for ($i = 1; $i < count($list); $i++) {\n        if ($list[$i] > $maxValue) {\n            $maxValue = $list[$i];\n            $maxIndex = $i;\n        }\n    }\n    return $maxIndex;\n}\n```"
  },
  {
    "task": "Write a function that takes a list of grades and returns the highest grade.",
    "code": "```php\nfunction getHighestGrade($grades) {\n    return max($grades);\n}\n```"
  },
  {
    "task": "Create a function that returns the product of all positive integers up to a given number.",
    "code": "```php\nfunction productOfIntegers($n) {\n    $product = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $product *= $i;\n    }\n    return $product;\n}\n```"
  },
  {
    "task": "Develop a function that receives a string and returns a new string with spaces replaced by hyphens.",
    "code": "```php\nfunction replaceSpacesWithHyphens($inputString) {\n    return str_replace(' ', '-', $inputString);\n}\n```"
  },
  {
    "task": "Implement a function that takes a list of integers and returns their sum.",
    "code": "```php\nfunction sumOfIntegers($integers) {\n    return array_sum($integers);\n}\n```"
  },
  {
    "task": "Write a function that checks if a string is a valid email address and returns a boolean.",
    "code": "```php\nfunction isValidEmail($email) {\n    return filter_var($email, FILTER_VALIDATE_EMAIL) !== false;\n}\n```"
  },
  {
    "task": "Create a function that returns the decimal equivalent of a hexadecimal string.",
    "code": "```php\nfunction hexToDecimal($hexString) {\n    return hexdec($hexString);\n}\n```"
  },
  {
    "task": "Design a function that calculates and returns the body mass index based on height and weight.",
    "code": "```php\nfunction calculateBMI($weight, $height) {\n    return $weight / ($height * $height);\n}\n```"
  },
  {
    "task": "Implement a function that returns the initials of a person's name given a full name.",
    "code": "```php\nfunction getInitials($fullName) {\n    $words = explode(' ', $fullName);\n    $initials = '';\n    foreach ($words as $word) {\n        if (!empty($word)) {\n            $initials .= strtoupper($word[0]);\n        }\n    }\n    return $initials;\n}\n```"
  },
  {
    "task": "Write a function that accepts a list of names and returns them sorted alphabetically.",
    "code": "```php\nfunction sortNamesAlphabetically($names) {\n    sort($names);\n    return $names;\n}\n```"
  },
  {
    "task": "Create a function that takes a list of integers and returns a list of their squares.",
    "code": "```php\nfunction squareList($integers) {\n    return array_map(function($n) {\n        return $n * $n;\n    }, $integers);\n}\n```"
  },
  {
    "task": "Develop a function that returns the common elements between two sets.",
    "code": "```php\nfunction getCommonElements(array $set1, array $set2): array {\n    return array_values(array_intersect($set1, $set2));\n}\n```"
  },
  {
    "task": "Implement a function that receives a list of strings and returns the shortest string.",
    "code": "```php\nfunction findShortestString($strings) {\n    return array_reduce($strings, function($shortest, $current) {\n        return strlen($current) < strlen($shortest) ? $current : $shortest;\n    }, $strings[0]);\n}\n```"
  },
  {
    "task": "Write a function that returns the sum of digits of a given integer.",
    "code": "```php\nfunction sumOfDigits($number) {\n    $sum = 0;\n    $number = abs($number);\n    while ($number > 0) {\n        $sum += $number % 10;\n        $number = intdiv($number, 10);\n    }\n    return $sum;\n}\n```"
  },
  {
    "task": "Create a function that takes a matrix and returns its transpose.",
    "code": "```php\nfunction transposeMatrix($matrix) {\n    $transposed = [];\n    foreach ($matrix as $rowIndex => $row) {\n        foreach ($row as $colIndex => $element) {\n            $transposed[$colIndex][$rowIndex] = $element;\n        }\n    }\n    return $transposed;\n}\n```"
  },
  {
    "task": "Design a function that returns the percentage of uppercase letters in a string.",
    "code": "```php\nfunction uppercasePercentage($string) {\n    $uppercaseCount = preg_match_all('/[A-Z]/', $string);\n    $totalLength = strlen($string);\n    return $totalLength > 0 ? ($uppercaseCount / $totalLength) * 100 : 0;\n}\n```"
  },
  {
    "task": "Implement a function that accepts a string and returns it with each word capitalized.",
    "code": "```php\nfunction capitalizeWords($string) {\n    return ucwords($string);\n}\n```"
  },
  {
    "task": "Write a function that takes a list and returns the difference between the max and min values.",
    "code": "```php\nfunction calculateDifference($list) {\n    if (empty($list)) {\n        return null;\n    }\n    $maxValue = max($list);\n    $minValue = min($list);\n    return $maxValue - $minValue;\n}\n```"
  },
  {
    "task": "Create a function that returns a list containing the first n prime numbers.",
    "code": "```php\n<?php\nfunction isPrime($num) {\n    if ($num <= 1) return false;\n    if ($num <= 3) return true;\n    if ($num % 2 == 0 || $num % 3 == 0) return false;\n    for ($i = 5; $i * $i <= $num; $i += 6) {\n        if ($num % $i == 0 || $num % ($i + 2) == 0) return false;\n    }\n    return true;\n}\n\nfunction firstNPrimes($n) {\n    $primes = [];\n    $num = 2;\n    while (count($primes) < $n) {\n        if (isPrime($num)) {\n            $primes[] = $num;\n        }\n        $num++;\n    }\n    return $primes;\n}\n?>\n```"
  },
  {
    "task": "Develop a function that receives a dictionary and returns a new dictionary with keys and values swapped.",
    "code": "```php\nfunction swapKeysAndValues($dict) {\n    $newDict = [];\n    foreach ($dict as $key => $value) {\n        $newDict[$value] = $key;\n    }\n    return $newDict;\n}\n```"
  },
  {
    "task": "Implement a function that accepts a string and returns the frequency of each word.",
    "code": "```php\nfunction wordFrequency($string) {\n    $words = str_word_count(strtolower($string), 1);\n    $frequency = array_count_values($words);\n    return $frequency;\n}\n```"
  },
  {
    "task": "Write a function that takes two numbers and returns their greatest common divisor.",
    "code": "```php\nfunction greatestCommonDivisor($a, $b) {\n    while ($b != 0) {\n        $temp = $b;\n        $b = $a % $b;\n        $a = $temp;\n    }\n    return $a;\n}\n```"
  },
  {
    "task": "Create a function that returns the number of consonants in a given string.",
    "code": "```php\nfunction countConsonants($inputString) {\n    $consonants = 0;\n    $inputString = strtolower($inputString);\n    $length = strlen($inputString);\n    for ($i = 0; $i < $length; $i++) {\n        if (ctype_alpha($inputString[$i]) && !in_array($inputString[$i], ['a', 'e', 'i', 'o', 'u'])) {\n            $consonants++;\n        }\n    }\n    return $consonants;\n}\n```"
  },
  {
    "task": "Design a function that checks if a number is a perfect square and returns a boolean.",
    "code": "```php\nfunction isPerfectSquare($num) {\n    if ($num < 0) return false;\n    $root = sqrt($num);\n    return $root == floor($root);\n}\n```"
  },
  {
    "task": "Implement a function that takes a list of numbers and returns the mode.",
    "code": "```php\nfunction findMode($numbers) {\n    $frequency = array_count_values($numbers);\n    arsort($frequency);\n    $modes = array_keys($frequency, current($frequency));\n    return count($modes) === 1 ? $modes[0] : $modes;\n}\n```"
  },
  {
    "task": "Write a function that accepts a string and returns a new string with characters in reverse order.",
    "code": "```php\nfunction reverseString($input) {\n    return strrev($input);\n}\n```"
  },
  {
    "task": "Create a function that returns the sum of all even numbers in a list.",
    "code": "```php\nfunction sumOfEvenNumbers($numbers) {\n    $sum = 0;\n    foreach ($numbers as $number) {\n        if ($number % 2 === 0) {\n            $sum += $number;\n        }\n    }\n    return $sum;\n}\n```"
  },
  {
    "task": "Develop a function that receives two lists and returns their union.",
    "code": "```php\nfunction unionOfLists($list1, $list2) {\n    return array_unique(array_merge($list1, $list2));\n}\n```"
  },
  {
    "task": "Implement a function that takes a string and returns the number of unique characters.",
    "code": "```php\nfunction countUniqueCharacters($string) {\n    $uniqueChars = array_unique(str_split($string));\n    return count($uniqueChars);\n}\n```"
  },
  {
    "task": "Write a function that returns the cube of a given number.",
    "code": "```php\nfunction cube($number) {\n    return $number ** 3;\n}\n```"
  },
  {
    "task": "Create a function that calculates the power of a number given a base and exponent and returns the result.",
    "code": "```php\nfunction calculatePower($base, $exponent) {\n    return pow($base, $exponent);\n}\n```"
  },
  {
    "task": "Design a function that accepts a URL and returns its domain name.",
    "code": "```php\nfunction getDomainName($url) {\n    $parsedUrl = parse_url($url);\n    return $parsedUrl['host'] ?? null;\n}\n```"
  },
  {
    "task": "Implement a function that takes a sentence and returns it with each letter shifted by one in the alphabet.",
    "code": "```php\n<?php\n\nfunction shiftSentence($sentence) {\n    $shiftedSentence = '';\n    $length = strlen($sentence);\n    \n    for ($i = 0; $i < $length; $i++) {\n        $char = $sentence[$i];\n        \n        if (ctype_alpha($char)) {\n            $shiftedChar = chr(ord($char) + 1);\n            \n            if (($char === 'z' || $char === 'Z')) {\n                $shiftedChar = chr(ord($char) - 25);\n            }\n        } else {\n            $shiftedChar = $char;\n        }\n        \n        $shiftedSentence .= $shiftedChar;\n    }\n    \n    return $shiftedSentence;\n}\n\n?>\n```"
  },
  {
    "task": "Write a function that checks if a list is sorted and returns a boolean.",
    "code": "```php\nfunction isSorted($list) {\n    for ($i = 0; $i < count($list) - 1; $i++) {\n        if ($list[$i] > $list[$i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n```"
  },
  {
    "task": "Create a function that returns the longest increasing subsequence in a list of numbers.",
    "code": "```php\nfunction longestIncreasingSubsequence($nums) {\n    $n = count($nums);\n    if ($n == 0) return [];\n    \n    $lengths = array_fill(0, $n, 1);\n    $previous = array_fill(0, $n, -1);\n    \n    $maxLength = 1;\n    $maxIndex = 0;\n\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 0; $j < $i; $j++) {\n            if ($nums[$i] > $nums[$j] && $lengths[$i] < $lengths[$j] + 1) {\n                $lengths[$i] = $lengths[$j] + 1;\n                $previous[$i] = $j;\n            }\n        }\n        if ($lengths[$i] > $maxLength) {\n            $maxLength = $lengths[$i];\n            $maxIndex = $i;\n        }\n    }\n    \n    $lis = [];\n    for ($i = $maxIndex; $i != -1; $i = $previous[$i]) {\n        array_unshift($lis, $nums[$i]);\n    }\n    \n    return $lis;\n}\n```"
  },
  {
    "task": "Develop a function that calculates and returns the compound interest for given principal, rate, and time.",
    "code": "```php\nfunction calculateCompoundInterest($principal, $rate, $time) {\n    return $principal * pow((1 + $rate), $time);\n}\n```"
  },
  {
    "task": "Implement a function that accepts two strings and returns their longest common substring.",
    "code": "```php\n<?php\nfunction longestCommonSubstring($str1, $str2) {\n    $maxLen = 0;\n    $endPos = 0;\n    $len1 = strlen($str1);\n    $len2 = strlen($str2);\n    $dp = array_fill(0, $len1 + 1, array_fill(0, $len2 + 1, 0));\n\n    for ($i = 1; $i <= $len1; $i++) {\n        for ($j = 1; $j <= $len2; $j++) {\n            if ($str1[$i - 1] === $str2[$j - 1]) {\n                $dp[$i][$j] = $dp[$i - 1][$j - 1] + 1;\n                if ($dp[$i][$j] > $maxLen) {\n                    $maxLen = $dp[$i][$j];\n                    $endPos = $i;\n                }\n            }\n        }\n    }\n    return substr($str1, $endPos - $maxLen, $maxLen);\n}\n?>\n```"
  },
  {
    "task": "Write a function that takes a number and returns true if it is a palindrome.",
    "code": "```php\nfunction isPalindrome($number) {\n    $str = strval($number);\n    return $str === strrev($str);\n}\n```"
  },
  {
    "task": "Create a function that returns the average length of words in a given sentence.",
    "code": "```php\nfunction averageWordLength($sentence) {\n    $words = explode(' ', $sentence);\n    $totalLength = array_sum(array_map('strlen', $words));\n    $averageLength = $totalLength / count($words);\n    return $averageLength;\n}\n```"
  },
  {
    "task": "Design a function that checks if a string contains only digits and returns a boolean.",
    "code": "```php\nfunction isOnlyDigits($string) {\n    return ctype_digit($string);\n}\n```"
  },
  {
    "task": "Implement a function that receives a list of tuples and returns a list of the first elements.",
    "code": "```php\nfunction getFirstElements($tuples) {\n    return array_map(function($tuple) {\n        return $tuple[0];\n    }, $tuples);\n}\n```"
  },
  {
    "task": "Write a function that takes a year and returns the Chinese zodiac sign for that year.",
    "code": "```php\nfunction getChineseZodiacSign($year) {\n    $zodiacSigns = [\n        'Rat', 'Ox', 'Tiger', 'Rabbit', 'Dragon', 'Snake', \n        'Horse', 'Goat', 'Monkey', 'Rooster', 'Dog', 'Pig'\n    ];\n    return $zodiacSigns[$year % 12];\n}\n```"
  },
  {
    "task": "Create a function that returns the number of trailing zeros in a factorial of a given number.",
    "code": "```php\nfunction trailingZerosInFactorial($n) {\n    $count = 0;\n    for ($i = 5; $n / $i >= 1; $i *= 5) {\n        $count += floor($n / $i);\n    }\n    return $count;\n}\n```"
  },
  {
    "task": "Develop a function that accepts a list and returns a new list with elements multiplied by their index.",
    "code": "```php\nfunction multiplyByIndex($list) {\n    $result = [];\n    foreach ($list as $index => $value) {\n        $result[] = $value * $index;\n    }\n    return $result;\n}\n```"
  },
  {
    "task": "Implement a function that receives a string and returns a dictionary of word lengths.",
    "code": "```php\nfunction wordLengths($inputString) {\n    $words = explode(' ', $inputString);\n    $wordLengths = [];\n    foreach ($words as $word) {\n        $wordLengths[$word] = strlen($word);\n    }\n    return $wordLengths;\n}\n```"
  },
  {
    "task": "Write a function that takes a list of integers and returns a list of numbers that are divisible by 3.",
    "code": "```php\nfunction divisibleByThree($numbers) {\n    return array_filter($numbers, function($number) {\n        return $number % 3 === 0;\n    });\n}\n```"
  },
  {
    "task": "Create a function that returns the result of a quadratic equation given its coefficients.",
    "code": "```php\nfunction solveQuadratic($a, $b, $c) {\n    $discriminant = $b * $b - 4 * $a * $c;\n    if ($discriminant < 0) {\n        return null; // No real roots\n    } elseif ($discriminant == 0) {\n        $root = -$b / (2 * $a);\n        return [$root]; // One real root\n    } else {\n        $root1 = (-$b + sqrt($discriminant)) / (2 * $a);\n        $root2 = (-$b - sqrt($discriminant)) / (2 * $a);\n        return [$root1, $root2]; // Two real roots\n    }\n}\n```"
  },
  {
    "task": "Design a function that checks if two lists have any elements in common and returns a boolean.",
    "code": "```php\nfunction haveCommonElements($list1, $list2) {\n    foreach ($list1 as $element1) {\n        if (in_array($element1, $list2)) {\n            return true;\n        }\n    }\n    return false;\n}\n```"
  },
  {
    "task": "Implement a function that accepts a list and returns the sum of its elements using recursion.",
    "code": "```php\nfunction sumRecursive($list) {\n    if (empty($list)) {\n        return 0;\n    }\n    return array_shift($list) + sumRecursive($list);\n}\n```"
  },
  {
    "task": "Write a function that takes a list of numbers and returns the variance.",
    "code": "```php\nfunction calculateVariance($numbers) {\n    $count = count($numbers);\n    if ($count === 0) {\n        return 0;\n    }\n    $mean = array_sum($numbers) / $count;\n    $sumOfSquares = 0;\n    foreach ($numbers as $number) {\n        $sumOfSquares += pow($number - $mean, 2);\n    }\n    return $sumOfSquares / $count;\n}\n```"
  },
  {
    "task": "Create a function that returns the ASCII value of a given character.",
    "code": "```php\nfunction getAsciiValue($char) {\n    return ord($char);\n}\n```"
  },
  {
    "task": "Develop a function that takes a number and returns the number of bits required for its binary representation.",
    "code": "```php\nfunction bitsRequired($number) {\n    return strlen(decbin($number));\n}\n```"
  }
]