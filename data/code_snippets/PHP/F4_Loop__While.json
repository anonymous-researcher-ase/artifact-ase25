[
  {
    "task": "Create a program that continuously asks the user to enter a number until they input a negative number.",
    "code": "```php\n<?php\n\n$handle = fopen(\"php://stdin\", \"r\");\n\ndo {\n    echo \"Enter a number: \";\n    $input = trim(fgets($handle));\n    $number = (int)$input;\n} while ($number >= 0);\n\nfclose($handle);\n?>\n```"
  },
  {
    "task": "Write a function that doubles a number and repeats the process until the number is greater than 1000.",
    "code": "```php\nfunction doubleUntilGreaterThanThousand($number) {\n    while ($number <= 1000) {\n        $number *= 2;\n    }\n    return $number;\n}\n```"
  },
  {
    "task": "Develop a routine to keep printing 'Hello, World!' until a counter reaches 10.",
    "code": "```php\n<?php\n$counter = 0;\n\nwhile ($counter < 10) {\n    echo \"Hello, World!\\n\";\n    $counter++;\n}\n?>\n```"
  },
  {
    "task": "Construct a loop that checks if a randomly generated number is even, repeating until an odd number is found.",
    "code": "```php\n<?php\n\ndo {\n    $number = rand();\n} while ($number % 2 === 0);\n\necho \"Found an odd number: $number\";\n\n?>\n```"
  },
  {
    "task": "Design a countdown timer that prints each second until it reaches zero.",
    "code": "```php\n<?php\n$seconds = 10; // Set initial countdown time\n\nwhile ($seconds >= 0) {\n    echo $seconds . \"\\n\";\n    sleep(1);\n    $seconds--;\n}\n?>\n```"
  },
  {
    "task": "Implement a system where a user can keep adding items to a list until they type 'stop'.",
    "code": "```php\n<?php\n\n$items = [];\n$handle = fopen(\"php://stdin\", \"r\");\n\necho \"Enter items to add to the list. Type 'stop' to finish:\\n\";\n\nwhile (true) {\n    $input = trim(fgets($handle));\n    if ($input === 'stop') {\n        break;\n    }\n    $items[] = $input;\n}\n\nfclose($handle);\n\nprint_r($items);\n\n?>\n```"
  },
  {
    "task": "Write a script that simulates rolling a die and continues until a six is rolled.",
    "code": "```php\n<?php\n\ndo {\n    $roll = rand(1, 6);\n    echo \"Rolled: $roll\\n\";\n} while ($roll != 6);\n\n?>\n```"
  },
  {
    "task": "Create a program that asks for a password and keeps prompting until the correct password is entered.",
    "code": "```php\n<?php\n$correctPassword = 'secret';\n$inputPassword = '';\n\nwhile ($inputPassword !== $correctPassword) {\n    echo \"Enter password: \";\n    $inputPassword = trim(fgets(STDIN));\n}\n\necho \"Correct password entered.\";\n?>\n```"
  },
  {
    "task": "Design a loop that calculates the sum of entered numbers until the user enters zero.",
    "code": "```php\n<?php\n$sum = 0;\n$handle = fopen(\"php://stdin\", \"r\");\n\nwhile (true) {\n    echo \"Enter a number (0 to stop): \";\n    $input = fgets($handle);\n    $number = (int)trim($input);\n    \n    if ($number === 0) {\n        break;\n    }\n    \n    $sum += $number;\n}\n\necho \"The sum of entered numbers is: $sum\\n\";\nfclose($handle);\n?>\n```"
  },
  {
    "task": "Implement a feature that prints Fibonacci numbers until a number exceeds 100.",
    "code": "```php\n<?php\n$a = 0;\n$b = 1;\nwhile ($a <= 100) {\n    echo $a . \"\\n\";\n    $temp = $a + $b;\n    $a = $b;\n    $b = $temp;\n}\n?>\n```"
  },
  {
    "task": "Develop a loop that keeps halving a number until it becomes less than one.",
    "code": "```php\n$number = 100; // Example starting number\n\nwhile ($number >= 1) {\n    $number /= 2;\n}\n```"
  },
  {
    "task": "Write a program that asks for names and keeps storing them until the user enters 'done'.",
    "code": "```php\n<?php\n$names = [];\nwhile (true) {\n    $input = readline(\"Enter a name (or 'done' to finish): \");\n    if (strtolower($input) === 'done') {\n        break;\n    }\n    $names[] = $input;\n}\nprint_r($names);\n?>\n```"
  },
  {
    "task": "Create a process that keeps flipping a coin, recording results until there have been five heads.",
    "code": "```php\n$headsCount = 0;\n$results = [];\n\nwhile ($headsCount < 5) {\n    $flip = rand(0, 1) === 0 ? 'Heads' : 'Tails';\n    $results[] = $flip;\n    if ($flip === 'Heads') {\n        $headsCount++;\n    }\n}\n\nprint_r($results);\n```"
  },
  {
    "task": "Implement a countdown that decreases by two each time, starting from 20, until it reaches zero.",
    "code": "```php\n$count = 20;\nwhile ($count >= 0) {\n    echo $count . \"\\n\";\n    $count -= 2;\n}\n```"
  },
  {
    "task": "Design a solution that repeatedly asks for user input and repeats it back until they type 'exit'.",
    "code": "```php\n<?php\n\ndo {\n    $input = readline(\"Enter something: \");\n    if ($input !== \"exit\") {\n        echo $input . \"\\n\";\n    }\n} while ($input !== \"exit\");\n\n?>\n```"
  },
  {
    "task": "Develop a loop to simulate a bank account balance, repeatedly deducting a fee until the balance is below zero.",
    "code": "```php\n<?php\n\n$balance = 1000; // initial balance\n$fee = 50; // fee to be deducted\n\nwhile ($balance >= 0) {\n    $balance -= $fee;\n}\n\necho \"Final balance: $balance\";\n?>\n```"
  },
  {
    "task": "Create a sequence generator that multiplies a number by three each time until it reaches or exceeds 100.",
    "code": "```php\n<?php\n$number = 1;\nwhile ($number < 100) {\n    echo $number . \"\\n\";\n    $number *= 3;\n}\n?>\n```"
  },
  {
    "task": "Write a program that keeps generating random numbers between 1 and 10 until it gets a five.",
    "code": "```php\n<?php\ndo {\n    $number = rand(1, 10);\n    echo $number . \"\\n\";\n} while ($number !== 5);\n?>\n```"
  },
  {
    "task": "Implement a system to keep checking the temperature and only stop when it falls below freezing.",
    "code": "```php\n<?php\n\n$temperature = 35; // Initial temperature in Fahrenheit\n\nwhile ($temperature >= 32) {\n    // Simulate temperature change\n    $temperature -= 1; // Decrease temperature by 1 degree\n}\n\necho \"Temperature is below freezing: $temperature\u00b0F\\n\";\n```"
  },
  {
    "task": "Construct a quiz game that continues asking questions until the player answers incorrectly.",
    "code": "```php\n<?php\n\n$questions = [\n    \"What is the capital of France?\" => \"Paris\",\n    \"What is 2 + 2?\" => \"4\",\n    \"What color is the sky on a clear day?\" => \"blue\"\n];\n\necho \"Welcome to the Quiz Game!\\n\";\n$keepPlaying = true;\n\nwhile ($keepPlaying) {\n    foreach ($questions as $question => $answer) {\n        echo $question . \"\\n\";\n        $userAnswer = trim(fgets(STDIN));\n        \n        if (strtolower($userAnswer) !== strtolower($answer)) {\n            echo \"Incorrect! Game Over.\\n\";\n            $keepPlaying = false;\n            break;\n        } else {\n            echo \"Correct!\\n\";\n        }\n    }\n    \n    if ($keepPlaying) {\n        echo \"Congratulations, you've answered all questions correctly!\\n\";\n        $keepPlaying = false;\n    }\n}\n\n?>\n```"
  },
  {
    "task": "Write a function that calculates factorials of a number, repeating the process for numbers 1 through 5.",
    "code": "```php\nfunction calculateFactorials() {\n    $num = 1;\n    while ($num <= 5) {\n        $factorial = 1;\n        $i = 1;\n        while ($i <= $num) {\n            $factorial *= $i;\n            $i++;\n        }\n        echo \"Factorial of $num is $factorial\\n\";\n        $num++;\n    }\n}\n\ncalculateFactorials();\n```"
  },
  {
    "task": "Create a loop that prints all even numbers between 1 and 50.",
    "code": "```php\n$i = 2;\nwhile ($i <= 50) {\n    echo $i . \"\\n\";\n    $i += 2;\n}\n```"
  },
  {
    "task": "Design a program that continuously asks for user input until a palindrome is entered.",
    "code": "```php\n<?php\n\nfunction isPalindrome($string) {\n    $cleanedString = strtolower(preg_replace(\"/[^a-zA-Z0-9]/\", \"\", $string));\n    return $cleanedString === strrev($cleanedString);\n}\n\ndo {\n    echo \"Enter a string: \";\n    $input = trim(fgets(STDIN));\n} while (!isPalindrome($input));\n\necho \"You entered a palindrome.\\n\";\n\n?>\n```"
  },
  {
    "task": "Implement a countdown that decreases by one each second, starting from 100.",
    "code": "```php\n<?php\n$counter = 100;\nwhile ($counter > 0) {\n    echo $counter . \"\\n\";\n    $counter--;\n    sleep(1);\n}\n```"
  },
  {
    "task": "Write a script that repeatedly asks for a number and adds it to a total until the total exceeds 500.",
    "code": "```php\n$total = 0;\n\nwhile ($total <= 500) {\n    $number = (int)readline(\"Enter a number: \");\n    $total += $number;\n}\n```"
  },
  {
    "task": "Create a loop that generates random letters until the letter 'Z' appears.",
    "code": "```php\n<?php\n\ndo {\n    $letter = chr(rand(65, 90));\n    echo $letter . \"\\n\";\n} while ($letter !== 'Z');\n\n?>\n```"
  },
  {
    "task": "Write a process that continues prompting for two numbers and prints their sum if it's even.",
    "code": "```php\n<?php\n\nwhile (true) {\n    $number1 = readline(\"Enter the first number: \");\n    $number2 = readline(\"Enter the second number: \");\n    \n    if (is_numeric($number1) && is_numeric($number2)) {\n        $sum = $number1 + $number2;\n        \n        if ($sum % 2 == 0) {\n            echo \"The sum is even: $sum\\n\";\n        }\n    } else {\n        echo \"Please enter valid numbers.\\n\";\n    }\n}\n\n?>\n```"
  },
  {
    "task": "Develop a loop that simulates a traffic light sequence until a manual stop command is received.",
    "code": "```php\n$stopCommandReceived = false;\n\nfunction getManualStopCommand() {\n    // Simulate checking for a stop command.\n    // This function should return true if a stop command is received.\n    // For demonstration, it always returns false.\n    return false;\n}\n\n$currentLight = 'red';\n\nwhile (!$stopCommandReceived) {\n    echo \"Current light: $currentLight\\n\";\n\n    switch ($currentLight) {\n        case 'red':\n            $currentLight = 'green';\n            break;\n        case 'green':\n            $currentLight = 'yellow';\n            break;\n        case 'yellow':\n            $currentLight = 'red';\n            break;\n    }\n\n    // Check for a manual stop command\n    $stopCommandReceived = getManualStopCommand();\n\n    // Simulate delay for the traffic light change\n    sleep(1);\n}\n```"
  },
  {
    "task": "Implement a feature that keeps printing numbers in reverse order starting from 10.",
    "code": "```php\n$i = 10;\nwhile ($i > 0) {\n    echo $i . \"\\n\";\n    $i--;\n}\n```"
  },
  {
    "task": "Create a program that rolls two dice and continues until the sum is exactly seven.",
    "code": "```php\n<?php\n\ndo {\n    $die1 = rand(1, 6);\n    $die2 = rand(1, 6);\n    $sum = $die1 + $die2;\n} while ($sum !== 7);\n\n?>\n```"
  },
  {
    "task": "Design a loop that keeps asking for ages and prints the average once a negative age is entered.",
    "code": "```php\n<?php\n$totalAge = 0;\n$count = 0;\n\nwhile (true) {\n    $age = (int) readline(\"Enter age: \");\n    if ($age < 0) {\n        break;\n    }\n    $totalAge += $age;\n    $count++;\n}\n\nif ($count > 0) {\n    $average = $totalAge / $count;\n    echo \"Average age: \" . $average . \"\\n\";\n} else {\n    echo \"No ages were entered.\\n\";\n}\n?>\n```"
  },
  {
    "task": "Write a routine that squares numbers starting from 1 until the square is greater than 500.",
    "code": "```php\n<?php\n$number = 1;\nwhile ($number * $number <= 500) {\n    echo $number * $number . \"\\n\";\n    $number++;\n}\n?>\n```"
  },
  {
    "task": "Implement a system to ask for a string and append it to a file until 'end' is typed.",
    "code": "```php\n$filename = 'output.txt';\n$file = fopen($filename, 'a');\n\nwhile (true) {\n    $input = readline(\"Enter a string (type 'end' to stop): \");\n    if ($input === 'end') {\n        break;\n    }\n    fwrite($file, $input . PHP_EOL);\n}\n\nfclose($file);\n```"
  },
  {
    "task": "Create a script that checks if a number is prime, repeating for each number entered by the user.",
    "code": "```php\n<?php\nfunction isPrime($num) {\n    if ($num <= 1) return false;\n    if ($num <= 3) return true;\n    if ($num % 2 == 0 || $num % 3 == 0) return false;\n    $i = 5;\n    while ($i * $i <= $num) {\n        if ($num % $i == 0 || $num % ($i + 2) == 0) return false;\n        $i += 6;\n    }\n    return true;\n}\n\nwhile (true) {\n    echo \"Enter a number (or type 'exit' to quit): \";\n    $input = trim(fgets(STDIN));\n    if ($input == 'exit') break;\n    $number = intval($input);\n    if (isPrime($number)) {\n        echo \"$number is a prime number.\\n\";\n    } else {\n        echo \"$number is not a prime number.\\n\";\n    }\n}\n?>\n```"
  },
  {
    "task": "Develop a countdown that prints numbers starting from 50 down to 1.",
    "code": "```php\n<?php\n\n$number = 50;\n\nwhile ($number >= 1) {\n    echo $number . \"\\n\";\n    $number--;\n}\n\n?>\n```"
  },
  {
    "task": "Write a program that keeps doubling the value of a variable until it exceeds 200.",
    "code": "```php\n<?php\n$value = 1;\n\nwhile ($value <= 200) {\n    $value *= 2;\n}\n\necho $value;\n?>\n```"
  },
  {
    "task": "Design a loop that keeps generating a random string of letters until a specific word is formed.",
    "code": "```php\n<?php\n\nfunction generateRandomString($length = 5) {\n    $characters = 'abcdefghijklmnopqrstuvwxyz';\n    $charactersLength = strlen($characters);\n    $randomString = '';\n    for ($i = 0; $i < $length; $i++) {\n        $randomString .= $characters[rand(0, $charactersLength - 1)];\n    }\n    return $randomString;\n}\n\n$targetWord = \"hello\";\n$generatedWord = \"\";\n\nwhile ($generatedWord !== $targetWord) {\n    $generatedWord = generateRandomString(strlen($targetWord));\n    echo \"Generated: $generatedWord\\n\";\n}\n\necho \"Target word '$targetWord' formed!\\n\";\n```"
  },
  {
    "task": "Implement a system that continuously fetches data from a sensor until a threshold is crossed.",
    "code": "```php\n<?php\n\nfunction fetchSensorData() {\n    // Simulate fetching data from a sensor\n    return rand(0, 100);\n}\n\n$threshold = 50;\n$sensorValue = 0;\n\nwhile ($sensorValue <= $threshold) {\n    $sensorValue = fetchSensorData();\n    echo \"Sensor Value: $sensorValue\\n\";\n}\n\necho \"Threshold crossed. Stopping data fetch.\\n\";\n\n?>\n```"
  },
  {
    "task": "Create a game where a player guesses a number, and the game continues until the player guesses correctly.",
    "code": "```php\n<?php\n\n$numberToGuess = 7; // You can set it to any number you want the player to guess\n$guessedCorrectly = false;\n\nwhile (!$guessedCorrectly) {\n    echo \"Guess a number: \";\n    $playerGuess = trim(fgets(STDIN));\n\n    if ($playerGuess == $numberToGuess) {\n        echo \"Congratulations! You guessed correctly.\\n\";\n        $guessedCorrectly = true;\n    } else {\n        echo \"Try again.\\n\";\n    }\n}\n\n?>\n```"
  },
  {
    "task": "Write a loop that continues to add random numbers to a list until the list has 10 even numbers.",
    "code": "```php\n$list = [];\n$evenCount = 0;\n\nwhile ($evenCount < 10) {\n    $number = rand();\n    if ($number % 2 == 0) {\n        $list[] = $number;\n        $evenCount++;\n    }\n}\n```"
  },
  {
    "task": "Design a routine that keeps removing elements from a list until it is empty.",
    "code": "```php\n$list = [1, 2, 3, 4, 5];\n\nwhile (!empty($list)) {\n    array_pop($list);\n}\n```"
  },
  {
    "task": "Implement a sequence that prints the alphabet repeatedly until interrupted by the user.",
    "code": "```php\n<?php\n$continue = true;\n\nwhile ($continue) {\n    foreach (range('A', 'Z') as $letter) {\n        echo $letter;\n    }\n    echo PHP_EOL;\n    // Add a small delay to make it more readable\n    usleep(100000); // 0.1 seconds\n    // Check for user interruption (Ctrl+C in CLI)\n    if (stream_select($read = [STDIN], $write = null, $except = null, 0)) {\n        $input = trim(fgets(STDIN));\n        $continue = false;\n    }\n}\n?>\n```"
  },
  {
    "task": "Create a program that continuously checks for updates and stops once an update is available.",
    "code": "```php\n<?php\n\nfunction isUpdateAvailable() {\n    // Simulate checking for an update, return true if available\n    return rand(0, 10) > 8; // Randomly simulate an update being available\n}\n\n$updateAvailable = false;\n\nwhile (!$updateAvailable) {\n    $updateAvailable = isUpdateAvailable();\n    // Simulate waiting time before the next check\n    sleep(1);\n}\n\necho \"Update is available!\";\n```"
  },
  {
    "task": "Write a function that keeps dividing a number by two until it results in a fractional value.",
    "code": "```php\nfunction divideUntilFraction($number) {\n    while ($number % 2 === 0 && $number !== 0) {\n        $number /= 2;\n    }\n    return $number;\n}\n```"
  },
  {
    "task": "Develop a loop that keeps asking for student's grades and calculates the average until a grade of -1 is entered.",
    "code": "```php\n<?php\n$sum = 0;\n$count = 0;\nwhile (true) {\n    $grade = readline(\"Enter student's grade (or -1 to finish): \");\n    if ($grade == -1) {\n        break;\n    }\n    $sum += $grade;\n    $count++;\n}\nif ($count > 0) {\n    $average = $sum / $count;\n    echo \"The average grade is: $average\\n\";\n} else {\n    echo \"No grades were entered.\\n\";\n}\n?>\n```"
  },
  {
    "task": "Design a feature that continuously monitors a file for changes and stops when no changes are detected for a minute.",
    "code": "```php\n<?php\n\n$filename = 'path/to/your/file.txt';\n$lastModifiedTime = filemtime($filename);\n$noChangeDuration = 0;\n\nwhile (true) {\n    clearstatcache();\n    $currentModifiedTime = filemtime($filename);\n\n    if ($currentModifiedTime == $lastModifiedTime) {\n        $noChangeDuration += 10;\n    } else {\n        $lastModifiedTime = $currentModifiedTime;\n        $noChangeDuration = 0;\n    }\n\n    if ($noChangeDuration >= 60) {\n        break;\n    }\n\n    sleep(10);\n}\n```"
  },
  {
    "task": "Implement a process where a motor runs until a certain distance is reached.",
    "code": "```php\n<?php\n\n$distanceCovered = 0;\n$targetDistance = 100; // example target distance\n\nwhile ($distanceCovered < $targetDistance) {\n    // Simulate motor running\n    $distanceCovered += 5; // example increment\n\n    // Output current distance\n    echo \"Distance covered: $distanceCovered\\n\";\n}\n\necho \"Target distance reached.\";\n\n?>\n```"
  },
  {
    "task": "Create a script that keeps generating random numbers and stops when it generates a prime number.",
    "code": "```php\n<?php\n\nfunction isPrime($num) {\n    if ($num <= 1) {\n        return false;\n    }\n    if ($num <= 3) {\n        return true;\n    }\n    if ($num % 2 == 0 || $num % 3 == 0) {\n        return false;\n    }\n    for ($i = 5; $i * $i <= $num; $i += 6) {\n        if ($num % $i == 0 || $num % ($i + 2) == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\ndo {\n    $randomNumber = rand();\n} while (!isPrime($randomNumber));\n\necho \"Prime number generated: $randomNumber\\n\";\n```"
  },
  {
    "task": "Write a program that asks for the user's favorite color and keeps asking until they say 'blue'.",
    "code": "```php\n<?php\n$favoriteColor = '';\nwhile ($favoriteColor !== 'blue') {\n    echo \"What is your favorite color? \";\n    $favoriteColor = trim(fgets(STDIN));\n}\necho \"You like blue!\";\n?>\n```"
  },
  {
    "task": "Develop a loop that continuously prints the time every second until a key is pressed.",
    "code": "```php\n<?php\n\nwhile (true) {\n    echo date('H:i:s') . \"\\n\";\n    sleep(1);\n    \n    // Check for key press\n    if (stream_select($r = [STDIN], $w = [], $e = [], 0)) {\n        break;\n    }\n}\n\n?>\n```"
  },
  {
    "task": "Create a system to keep downloading data from a server until the connection is lost.",
    "code": "```php\n<?php\n\nfunction downloadDataFromServer() {\n    // Simulate data download, return false to simulate connection lost\n    return rand(0, 10) > 1; // 90% chance to continue downloading\n}\n\n$connectionActive = true;\n\nwhile ($connectionActive) {\n    $connectionActive = downloadDataFromServer();\n}\n?>\n```"
  },
  {
    "task": "Write a process to keep a light on until the ambient light level is sufficient.",
    "code": "```php\n<?php\n\nfunction getAmbientLightLevel() {\n    // Dummy function to simulate reading the ambient light level\n    // In a real scenario, this would interface with a sensor\n    return rand(0, 100);\n}\n\nfunction turnLightOn() {\n    echo \"Light is ON\\n\";\n}\n\nfunction turnLightOff() {\n    echo \"Light is OFF\\n\";\n}\n\n$requiredLightLevel = 70; // Define the required ambient light level\n\nturnLightOn(); // Initially turn the light on\n\nwhile (getAmbientLightLevel() < $requiredLightLevel) {\n    // Wait for the ambient light level to be sufficient\n    sleep(1); // Simulate waiting for a while before checking again\n}\n\nturnLightOff(); // Turn the light off when the ambient light level is sufficient\n\n?>\n```"
  },
  {
    "task": "Implement a feature that continuously plays a sound until the user presses a button.",
    "code": "```php\n<?php\n\n$keepPlaying = true;\n\nwhile ($keepPlaying) {\n    // Play the sound\n    echo \"Playing sound...\\n\";\n    \n    // Simulate a button press check\n    $buttonPressed = readline(\"Press 'q' to stop the sound: \");\n    \n    if ($buttonPressed === 'q') {\n        $keepPlaying = false;\n    }\n}\n\necho \"Sound stopped.\\n\";\n?>\n```"
  },
  {
    "task": "Design a program that keeps multiplying a matrix by itself until its determinant is greater than 1000.",
    "code": "```php\n<?php\n\nfunction determinant($matrix) {\n    $n = count($matrix);\n    if ($n == 1) {\n        return $matrix[0][0];\n    }\n    if ($n == 2) {\n        return $matrix[0][0] * $matrix[1][1] - $matrix[0][1] * $matrix[1][0];\n    }\n    $det = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $subMatrix = [];\n        for ($j = 1; $j < $n; $j++) {\n            $row = [];\n            for ($k = 0; $k < $n; $k++) {\n                if ($k != $i) {\n                    $row[] = $matrix[$j][$k];\n                }\n            }\n            $subMatrix[] = $row;\n        }\n        $det += ($i % 2 == 0 ? 1 : -1) * $matrix[0][$i] * determinant($subMatrix);\n    }\n    return $det;\n}\n\nfunction multiplyMatrices($matrixA, $matrixB) {\n    $n = count($matrixA);\n    $result = array_fill(0, $n, array_fill(0, $n, 0));\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            for ($k = 0; $k < $n; $k++) {\n                $result[$i][$j] += $matrixA[$i][$k] * $matrixB[$k][$j];\n            }\n        }\n    }\n    return $result;\n}\n\n$matrix = [\n    [1, 2],\n    [3, 4]\n];\n\nwhile (determinant($matrix) <= 1000) {\n    $matrix = multiplyMatrices($matrix, $matrix);\n}\n\nprint_r($matrix);\n\n?>\n```"
  },
  {
    "task": "Create a script that keeps prompting the user to guess a word until they get it right.",
    "code": "```php\n<?php\n\n$correctWord = \"apple\";\n$handle = fopen(\"php://stdin\", \"r\");\n\ndo {\n    echo \"Guess the word: \";\n    $input = trim(fgets($handle));\n} while ($input !== $correctWord);\n\necho \"Congratulations! You guessed the word correctly.\\n\";\n\nfclose($handle);\n```"
  },
  {
    "task": "Write a loop that simulates a car's fuel consumption and stops when the tank is empty.",
    "code": "```php\n<?php\n\n$fuel = 50; // initial fuel in liters\n\nwhile ($fuel > 0) {\n    echo \"The car is running. Fuel level: $fuel liters.\\n\";\n    $fuel -= 5; // decrease fuel by 5 liters per loop iteration\n}\n\necho \"The tank is empty. The car stops.\\n\";\n\n?>\n```"
  },
  {
    "task": "Develop a routine that keeps checking if a file exists and stops once it does.",
    "code": "```php\n<?php\n\n$filename = 'path/to/your/file.txt';\n\nwhile (!file_exists($filename)) {\n    // You might want to sleep for a while to avoid busy waiting\n    usleep(500000); // Sleep for 0.5 seconds\n}\n\n// File exists, you can proceed with your logic here\n\n?>\n```"
  },
  {
    "task": "Implement a feature that continuously calculates the square root of a number until it's less than 0.1.",
    "code": "```php\n<?php\n\n$number = 100; // Example starting number\n\nwhile ($number >= 0.1) {\n    $number = sqrt($number);\n    echo \"Current square root: $number\\n\";\n}\n\n?>\n```"
  },
  {
    "task": "Create a system that prints 'Processing...' every second until a task is complete.",
    "code": "```php\n<?php\n\n$taskComplete = false;\n\nwhile (!$taskComplete) {\n    echo \"Processing...\\n\";\n    sleep(1);\n    // Here you would normally check if the task is complete.\n    // For demonstration, let's just break the loop after a certain condition.\n    // $taskComplete = checkTaskStatus();\n}\n```"
  },
  {
    "task": "Write a loop that repeatedly checks the status of a process until it reports 'complete'.",
    "code": "```php\n$status = 'incomplete';\n\nwhile ($status !== 'complete') {\n    // Assuming `getProcessStatus()` is a function that returns the current status of the process\n    $status = getProcessStatus();\n}\n```"
  },
  {
    "task": "Design a routine to keep pinging a server and alert when the connection is lost.",
    "code": "```php\n<?php\n\nfunction isServerAlive($url) {\n    $ch = curl_init($url);\n    curl_setopt($ch, CURLOPT_NOBODY, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 5);\n    curl_exec($ch);\n    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n    curl_close($ch);\n    return ($httpCode >= 200 && $httpCode < 400);\n}\n\nfunction alertConnectionLost() {\n    echo \"Alert: Connection to the server is lost!\\n\";\n}\n\n$serverUrl = \"http://example.com\";\n\nwhile (true) {\n    if (!isServerAlive($serverUrl)) {\n        alertConnectionLost();\n        break;\n    }\n    sleep(5); // Wait for 5 seconds before the next ping\n}\n\n?>\n```"
  },
  {
    "task": "Implement a loop that counts down from 100 by fives until it reaches zero.",
    "code": "```php\n<?php\n$count = 100;\nwhile ($count >= 0) {\n    echo $count . \"\\n\";\n    $count -= 5;\n}\n?>\n```"
  },
  {
    "task": "Create a script that keeps track of inventory items being added or removed until an end signal is given.",
    "code": "```php\n<?php\n$inventory = 0;\n$handle = fopen(\"php://stdin\", \"r\");\n\necho \"Enter item changes (+ to add, - to remove, 'end' to finish):\\n\";\n\nwhile (true) {\n    $input = trim(fgets($handle));\n    \n    if ($input === 'end') {\n        break;\n    }\n    \n    if (is_numeric($input)) {\n        $inventory += (int)$input;\n    } else {\n        echo \"Invalid input. Please enter a number or 'end'.\\n\";\n    }\n    \n    echo \"Current inventory: $inventory\\n\";\n}\n\necho \"Final inventory: $inventory\\n\";\nfclose($handle);\n?>\n```"
  },
  {
    "task": "Write a program that keeps calculating the power of two for numbers until a result is greater than 1000.",
    "code": "```php\n<?php\n$number = 1;\n$result = 1;\n\nwhile ($result <= 1000) {\n    $result = pow(2, $number);\n    $number++;\n}\n```"
  },
  {
    "task": "Develop a sequence that keeps appending random numbers to an array until its length is 20.",
    "code": "```php\n<?php\n\n$numbers = [];\n\nwhile (count($numbers) < 20) {\n    $numbers[] = rand();\n}\n\n```"
  },
  {
    "task": "Implement a routine that continuously rotates an image until it matches a reference orientation.",
    "code": "```php\nfunction rotateImageUntilMatch($image, $reference) {\n    while (!imagesAreEqual($image, $reference)) {\n        $image = imagerotate($image, 90, 0);\n    }\n    return $image;\n}\n\nfunction imagesAreEqual($image1, $image2) {\n    ob_start();\n    imagepng($image1);\n    $image1Data = ob_get_contents();\n    ob_end_clean();\n\n    ob_start();\n    imagepng($image2);\n    $image2Data = ob_get_contents();\n    ob_end_clean();\n\n    return $image1Data === $image2Data;\n}\n```"
  },
  {
    "task": "Design a loop that keeps printing random jokes until the user stops it.",
    "code": "```php\n<?php\n\n$jokes = [\n    \"Why don't scientists trust atoms? Because they make up everything!\",\n    \"What do you call fake spaghetti? An impasta!\",\n    \"Why did the scarecrow win an award? Because he was outstanding in his field!\",\n    \"Why don't skeletons fight each other? They don't have the guts.\",\n    \"What did one wall say to the other? I'll meet you at the corner!\"\n];\n\n$handle = fopen(\"php://stdin\", \"r\");\n\nwhile (true) {\n    echo $jokes[array_rand($jokes)] . PHP_EOL;\n    echo \"Press 'q' to stop or any other key to continue: \";\n    $input = trim(fgets($handle));\n    if (strtolower($input) === 'q') {\n        break;\n    }\n}\n\nfclose($handle);\n\n?>\n```"
  },
  {
    "task": "Create a program that accepts user feedback and continues until a positive feedback is received.",
    "code": "```php\n<?php\n\n$positiveFeedback = false;\nwhile (!$positiveFeedback) {\n    echo \"Please enter your feedback: \";\n    $feedback = trim(fgets(STDIN));\n    \n    if (strpos(strtolower($feedback), 'good') !== false || strpos(strtolower($feedback), 'excellent') !== false || strpos(strtolower($feedback), 'great') !== false) {\n        $positiveFeedback = true;\n        echo \"Thank you for your positive feedback!\";\n    } else {\n        echo \"We appreciate your feedback, please try again.\\n\";\n    }\n}\n\n?>\n```"
  },
  {
    "task": "Write a loop that repeatedly reads sensor data and stops when a stable reading is observed.",
    "code": "```php\n<?php\n\nfunction readSensorData() {\n    // Simulated sensor data reading\n    return rand(90, 110);\n}\n\nfunction isStableReading($reading) {\n    // Define the range for a stable reading\n    return $reading >= 95 && $reading <= 105;\n}\n\n$reading = null;\ndo {\n    $reading = readSensorData();\n} while (!isStableReading($reading));\n\necho \"Stable reading observed: $reading\\n\";\n\n?>\n```"
  },
  {
    "task": "Develop a system that simulates a stopwatch, counting seconds until stopped manually.",
    "code": "```php\n<?php\n\nfunction startStopwatch() {\n    $seconds = 0;\n    echo \"Stopwatch started. Press Enter to stop...\\n\";\n    while (true) {\n        sleep(1);\n        $seconds++;\n        echo \"Elapsed time: {$seconds} seconds\\n\";\n        if (stream_get_line(STDIN, 1024, \"\\n\") !== false) {\n            break;\n        }\n    }\n    echo \"Stopwatch stopped at {$seconds} seconds.\\n\";\n}\n\nstartStopwatch();\n```"
  },
  {
    "task": "Create a script that continues adding random integers to a sum until the sum exceeds 100.",
    "code": "```php\n<?php\n\n$sum = 0;\n\nwhile ($sum <= 100) {\n    $sum += rand(1, 10);\n}\n\necho $sum;\n```"
  },
  {
    "task": "Implement a process to track a moving object until it stops.",
    "code": "```php\n<?php\n\n$objectMoving = true;\n\nwhile ($objectMoving) {\n    // Simulate checking if the object is still moving\n    $objectMoving = checkIfObjectIsMoving();\n}\n\nfunction checkIfObjectIsMoving() {\n    // Logic to determine if the object is still moving\n    // Replace with actual condition check\n    // Return true if moving, false if stopped\n    return rand(0, 1) === 1;\n}\n\n?>\n```"
  },
  {
    "task": "Design a routine to keep checking user login attempts until a successful login occurs.",
    "code": "```php\n<?php\n\nfunction checkLogin() {\n    // Simulate a login check; returns true for successful login\n    // In a real-world scenario, replace this with actual logic\n    return rand(0, 1) === 1;\n}\n\n$isLoggedIn = false;\n\nwhile (!$isLoggedIn) {\n    $isLoggedIn = checkLogin();\n    if (!$isLoggedIn) {\n        echo \"Login attempt failed. Try again.\\n\";\n    }\n}\n\necho \"Login successful.\\n\";\n?>\n```"
  },
  {
    "task": "Write a loop that repeatedly calculates the area of a circle for radii from 1 to 10.",
    "code": "```php\n$radius = 1;\nwhile ($radius <= 10) {\n    $area = pi() * $radius * $radius;\n    $radius++;\n}\n```"
  },
  {
    "task": "Create a program that continues flipping a card from a deck until an ace is drawn.",
    "code": "```php\n<?php\n\nfunction drawCard() {\n    $suits = ['Hearts', 'Diamonds', 'Clubs', 'Spades'];\n    $ranks = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'Jack', 'Queen', 'King', 'Ace'];\n    return $ranks[array_rand($ranks)] . ' of ' . $suits[array_rand($suits)];\n}\n\n$card = drawCard();\n\nwhile (strpos($card, 'Ace') === false) {\n    echo \"Drew a $card\\n\";\n    $card = drawCard();\n}\n\necho \"Drew an Ace! It's $card\\n\";\n```"
  },
  {
    "task": "Develop a loop that keeps asking for a word and stores it until a word with more than five letters is entered.",
    "code": "```php\n$words = [];\nwhile (true) {\n    $word = readline(\"Enter a word: \");\n    $words[] = $word;\n    if (strlen($word) > 5) {\n        break;\n    }\n}\n```"
  },
  {
    "task": "Implement a feature that continuously calculates the exponential growth of a population until it doubles.",
    "code": "```php\n<?php\n\n$initialPopulation = 1000;\n$currentPopulation = $initialPopulation;\n$growthRate = 1.05; // 5% growth rate\n$doubledPopulation = $initialPopulation * 2;\n\nwhile ($currentPopulation < $doubledPopulation) {\n    $currentPopulation *= $growthRate;\n}\n\necho \"Population has doubled to: \" . $currentPopulation;\n\n?>\n```"
  },
  {
    "task": "Write a script that repeats a string a certain number of times until a limit is reached.",
    "code": "```php\n<?php\n$string = \"Hello, World!\";\n$limit = 5;\n$count = 0;\n\nwhile ($count < $limit) {\n    echo $string . \"\\n\";\n    $count++;\n}\n?>\n```"
  },
  {
    "task": "Create a routine that keeps accessing an API endpoint until it returns a specific result.",
    "code": "```php\n<?php\n\nfunction callApiUntilSpecificResult($url, $specificResult) {\n    $result = null;\n    while ($result !== $specificResult) {\n        $response = file_get_contents($url);\n        $result = json_decode($response, true);\n    }\n    \n    return $result;\n}\n\n$url = \"http://example.com/api/endpoint\";\n$specificResult = \"desired_value\";\n$result = callApiUntilSpecificResult($url, $specificResult);\n\necho \"Final result: \" . json_encode($result);\n\n?>\n```"
  },
  {
    "task": "Design a loop that continues to fetch stock prices until a certain price threshold is crossed.",
    "code": "```php\n<?php\n\n$priceThreshold = 100; // Example threshold\n$currentPrice = 0;\n\nwhile ($currentPrice <= $priceThreshold) {\n    // Simulate fetching the current stock price\n    $currentPrice = rand(90, 110); // Random price for demonstration\n    echo \"Current Price: $currentPrice\\n\";\n}\n\n?>\n```"
  },
  {
    "task": "Implement a process that keeps monitoring CPU usage until it drops below 10%.",
    "code": "```php\n<?php\n\nfunction getCpuUsage() {\n    $load = sys_getloadavg();\n    return $load[0] * 10; // Example conversion to percentage\n}\n\nwhile (true) {\n    $cpuUsage = getCpuUsage();\n    if ($cpuUsage < 10) {\n        break;\n    }\n    sleep(1); // Wait for a second before checking again\n}\n\necho \"CPU usage has dropped below 10%.\";\n\n?>\n```"
  },
  {
    "task": "Write a program that asks for a series of numbers and prints the largest once a negative number is entered.",
    "code": "```php\n<?php\n\n$largest = null;\n\nwhile (true) {\n    $input = readline(\"Enter a number: \");\n    $number = (int)$input;\n    \n    if ($number < 0) {\n        break;\n    }\n    \n    if ($largest === null || $number > $largest) {\n        $largest = $number;\n    }\n}\n\nif ($largest !== null) {\n    echo \"The largest number entered is: \" . $largest . \"\\n\";\n}\n?>\n```"
  },
  {
    "task": "Develop a system that keeps a heater on until the room reaches a desired temperature.",
    "code": "```php\n<?php\n\n$desiredTemperature = 22; // Desired temperature in Celsius\n$currentTemperature = 18; // Current temperature in Celsius\n\nwhile ($currentTemperature < $desiredTemperature) {\n    // Turn on the heater\n    echo \"Heater is on. Current temperature: $currentTemperature\u00b0C\\n\";\n    \n    // Simulate heating the room\n    $currentTemperature++;\n    \n    // Pause for a moment to simulate time passing\n    sleep(1);\n}\n\n// Turn off the heater\necho \"Desired temperature reached. Heater is off.\\n\";\n\n?>\n```"
  },
  {
    "task": "Create a loop that repeatedly checks if a door is open and alerts if it remains open for too long.",
    "code": "```php\n<?php\n\nfunction isDoorOpen() {\n    // Simulate checking if the door is open\n    // You might replace this with actual checking logic\n    return rand(0, 1) === 1;\n}\n\n$openDuration = 0;\n$maxOpenDuration = 10;\n\nwhile (true) {\n    if (isDoorOpen()) {\n        $openDuration++;\n        if ($openDuration > $maxOpenDuration) {\n            echo \"Alert: The door has been open for too long!\\n\";\n            break;\n        }\n    } else {\n        $openDuration = 0;\n    }\n    sleep(1);\n}\n```"
  },
  {
    "task": "Implement a feature that keeps adding random characters to a string until its length is 8.",
    "code": "```php\n<?php\n$string = '';\nwhile (strlen($string) < 8) {\n    $string .= chr(rand(33, 126)); // Random printable character\n}\necho $string;\n?>\n```"
  },
  {
    "task": "Design a routine that simulates a race and continues until a participant crosses the finish line.",
    "code": "```php\n<?php\n\n$finishLine = 100;\n$participants = [\n    'Alice' => 0,\n    'Bob' => 0,\n    'Charlie' => 0\n];\n\nwhile (true) {\n    foreach ($participants as $name => $position) {\n        $participants[$name] += rand(1, 10);\n        if ($participants[$name] >= $finishLine) {\n            echo \"$name has crossed the finish line!\\n\";\n            break 2;\n        }\n    }\n}\n\n?>\n```"
  },
  {
    "task": "Write a script that keeps checking an email inbox until a specific email is received.",
    "code": "```php\n<?php\n\nfunction checkEmailInbox($targetSubject) {\n    // This is a placeholder function. In a real scenario, you'd connect to an email server.\n    // For simulation purposes, assume this function returns an array of subjects of the emails.\n    return [\n        \"Welcome to our service\",\n        \"Your invoice\",\n        \"Special offer just for you\",\n        \"The email you are looking for\"\n    ];\n}\n\n$targetSubject = \"The email you are looking for\";\n$emailFound = false;\n\nwhile (!$emailFound) {\n    $emails = checkEmailInbox($targetSubject);\n    foreach ($emails as $subject) {\n        if ($subject === $targetSubject) {\n            $emailFound = true;\n            break;\n        }\n    }\n    if (!$emailFound) {\n        sleep(60); // Wait for 60 seconds before checking again\n    }\n}\n\necho \"The specific email has been received.\";\n\n?>\n```"
  },
  {
    "task": "Create a loop that continues to play a video on repeat until the user interrupts.",
    "code": "```php\n<?php\n$playing = true;\n\nwhile ($playing) {\n    echo \"Playing video...\\n\";\n    // Simulate playing the video\n    sleep(5); // Assume the video is 5 seconds long\n\n    // Check if the user interrupts (this is a placeholder for actual input handling)\n    $userInput = readline(\"Type 'stop' to interrupt: \");\n    if (trim($userInput) === 'stop') {\n        $playing = false;\n    }\n}\n\necho \"Video stopped by user.\\n\";\n?>\n```"
  },
  {
    "task": "Develop a process that keeps scanning for Bluetooth devices until a specific device is found.",
    "code": "```php\n<?php\n\nfunction scanForBluetoothDevices() {\n    // Simulating a list of found devices with a random selection\n    $devices = [\"Device_A\", \"Device_B\", \"Target_Device\", \"Device_C\"];\n    return $devices[array_rand($devices)];\n}\n\n$targetDevice = \"Target_Device\";\n$found = false;\n\nwhile (!$found) {\n    $device = scanForBluetoothDevices();\n    if ($device === $targetDevice) {\n        $found = true;\n    }\n}\n\necho \"Target device found: \" . $targetDevice;\n\n?>\n```"
  },
  {
    "task": "Implement a script that continuously captures images from a webcam until a motion is detected.",
    "code": "```php\n<?php\n$cam = new \\CURLFile('/dev/video0');\n$motionDetected = false;\n\nwhile (!$motionDetected) {\n    // Capture image from webcam\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, 'http://localhost/capture-image');\n    curl_setopt($ch, CURLOPT_POST, true);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, ['image' => $cam]);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    $response = curl_exec($ch);\n    curl_close($ch);\n\n    // Here you would implement motion detection logic\n    // For demonstration purposes, let's say motion is detected randomly\n    $motionDetected = rand(0, 1) == 1;\n}\n\necho \"Motion detected, stopping capture.\";\n?>\n```"
  },
  {
    "task": "Design a program that keeps playing a sound file until the user presses a mute button.",
    "code": "```php\n<?php\n\nfunction playSound() {\n    echo \"Playing sound...\\n\";\n}\n\nfunction isMuteButtonPressed() {\n    // Simulate checking if the mute button is pressed\n    // Replace this with actual implementation\n    return rand(0, 1) === 1;\n}\n\nwhile (true) {\n    playSound();\n    if (isMuteButtonPressed()) {\n        break;\n    }\n    // Simulate a short delay between plays\n    usleep(500000);\n}\n\necho \"Sound muted.\\n\";\n\n?>\n```"
  },
  {
    "task": "Create a loop that repeatedly generates a random password until it meets certain security criteria.",
    "code": "```php\n<?php\n\nfunction generateRandomPassword($length = 8) {\n    $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()';\n    $charactersLength = strlen($characters);\n    $randomPassword = '';\n    for ($i = 0; $i < $length; $i++) {\n        $randomPassword .= $characters[rand(0, $charactersLength - 1)];\n    }\n    return $randomPassword;\n}\n\nfunction isPasswordSecure($password) {\n    return preg_match('/[A-Z]/', $password) && preg_match('/[a-z]/', $password) &&\n           preg_match('/[0-9]/', $password) && preg_match('/[\\W_]/', $password);\n}\n\n$password = '';\nwhile (!isPasswordSecure($password)) {\n    $password = generateRandomPassword();\n}\n\necho \"Generated secure password: $password\";\n?>\n```"
  },
  {
    "task": "Write a process that keeps checking for file changes in a directory and logs them until stopped.",
    "code": "```php\n<?php\n\n$directory = '/path/to/directory';\n$logFile = '/path/to/logfile.txt';\n$hashes = [];\n\nwhile (true) {\n    $changed = false;\n    \n    $handle = opendir($directory);\n    if ($handle) {\n        while (false !== ($entry = readdir($handle))) {\n            if ($entry != \".\" && $entry != \"..\") {\n                $filePath = $directory . '/' . $entry;\n                $fileHash = md5_file($filePath);\n                \n                if (!isset($hashes[$entry]) || $hashes[$entry] !== $fileHash) {\n                    $hashes[$entry] = $fileHash;\n                    $changed = true;\n                    $logEntry = date('Y-m-d H:i:s') . \" - Change detected in: $entry\\n\";\n                    file_put_contents($logFile, $logEntry, FILE_APPEND);\n                }\n            }\n        }\n        closedir($handle);\n    }\n    \n    if (!$changed) {\n        sleep(1);\n    }\n}\n```"
  }
]