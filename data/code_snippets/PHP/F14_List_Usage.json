[
  {
    "task": "Create a list of the first ten positive integers and calculate their sum.",
    "code": "```php\n<?php\n\n$numbers = range(1, 10);\n$sum = array_sum($numbers);\n\necho \"Sum: \" . $sum;\n\n?>\n```"
  },
  {
    "task": "Write a program to reverse the order of elements in a given list.",
    "code": "```php\nfunction reverseList($list) {\n    return array_reverse($list);\n}\n\n$originalList = [1, 2, 3, 4, 5];\n$reversedList = reverseList($originalList);\n\nprint_r($reversedList);\n```"
  },
  {
    "task": "Implement a function that takes a list and returns the list with duplicates removed.",
    "code": "```php\nfunction removeDuplicates($list) {\n    return array_values(array_unique($list));\n}\n```"
  },
  {
    "task": "Create a list of names and sort them in alphabetical order.",
    "code": "```php\n$names = [\"John\", \"Alice\", \"Bob\", \"Diana\"];\nsort($names);\n```"
  },
  {
    "task": "Write a function that appends a new element to an existing list.",
    "code": "```php\nfunction appendToList(&$list, $element) {\n    $list[] = $element;\n}\n```"
  },
  {
    "task": "Generate a list of the first 20 even numbers.",
    "code": "```php\n$evenNumbers = [];\nfor ($i = 1; $i <= 20; $i++) {\n    $evenNumbers[] = $i * 2;\n}\nprint_r($evenNumbers);\n```"
  },
  {
    "task": "Create a nested list (a list of lists) and access an element from the inner list.",
    "code": "```php\n<?php\n\n$nestedList = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\n\n$element = $nestedList[1][2];\n\necho $element;\n```"
  },
  {
    "task": "Write a program that finds the maximum value in a list of integers.",
    "code": "```php\nfunction findMaxValue($list) {\n    if (empty($list)) {\n        return null;\n    }\n    $maxValue = $list[0];\n    foreach ($list as $value) {\n        if ($value > $maxValue) {\n            $maxValue = $value;\n        }\n    }\n    return $maxValue;\n}\n\n$list = [3, 5, 7, 2, 8];\necho findMaxValue($list);\n```"
  },
  {
    "task": "Implement a function to merge two lists into a single list without duplicates.",
    "code": "```php\nfunction mergeLists($list1, $list2) {\n    $merged = array_unique(array_merge($list1, $list2));\n    return $merged;\n}\n```"
  },
  {
    "task": "Create a list from user input, then display the list in reverse order.",
    "code": "```php\n<?php\n$input = readline(\"Enter a comma-separated list of items: \");\n$list = explode(',', $input);\n$reversedList = array_reverse($list);\necho implode(',', $reversedList);\n?>\n```"
  },
  {
    "task": "Write a function that takes a list and returns a new list containing only the even numbers.",
    "code": "```php\nfunction filterEvenNumbers($list) {\n    return array_filter($list, function($num) {\n        return $num % 2 === 0;\n    });\n}\n```"
  },
  {
    "task": "Generate a list of squares for the numbers 1 through 10.",
    "code": "```php\n$squares = [];\nfor ($i = 1; $i <= 10; $i++) {\n    $squares[] = $i * $i;\n}\n```"
  },
  {
    "task": "Create a list of floating-point numbers and find their average.",
    "code": "```php\n<?php\n\n$numbers = [1.5, 2.3, 4.7, 3.6, 5.0];\n$sum = array_sum($numbers);\n$count = count($numbers);\n$average = $sum / $count;\n\necho \"Average: \" . $average;\n\n?>\n```"
  },
  {
    "task": "Implement a program to rotate the elements of a list to the right by a given number of steps.",
    "code": "```php\nfunction rotateRight(array $list, int $steps): array {\n    $length = count($list);\n    if ($length === 0) return $list;\n    $steps = $steps % $length;\n    return array_merge(array_slice($list, -$steps), array_slice($list, 0, $length - $steps));\n}\n\n// Example usage:\n$list = [1, 2, 3, 4, 5];\n$steps = 2;\n$result = rotateRight($list, $steps);\nprint_r($result);\n```"
  },
  {
    "task": "Write a function that checks if a list is a palindrome (reads the same forwards and backwards).",
    "code": "```php\nfunction isPalindrome(array $list): bool {\n    return $list === array_reverse($list);\n}\n```"
  },
  {
    "task": "Create a list of random integers and count how many are greater than 50.",
    "code": "```php\n<?php\n\n$list = array_map(fn() => rand(1, 100), range(1, 10));\n$countGreaterThan50 = count(array_filter($list, fn($number) => $number > 50));\n\necho $countGreaterThan50;\n```"
  },
  {
    "task": "Write a program that removes the first occurrence of a specified element from a list.",
    "code": "```php\nfunction removeFirstOccurrence(array &$list, $element) {\n    $key = array_search($element, $list);\n    if ($key !== false) {\n        unset($list[$key]);\n        $list = array_values($list);\n    }\n}\n\n$list = [1, 2, 3, 4, 2, 5];\n$elementToRemove = 2;\nremoveFirstOccurrence($list, $elementToRemove);\nprint_r($list);\n```"
  },
  {
    "task": "Implement a function that takes two lists and returns a list containing their intersection.",
    "code": "```php\nfunction listIntersection($list1, $list2) {\n    return array_values(array_intersect($list1, $list2));\n}\n```"
  },
  {
    "task": "Create a list of prime numbers less than 100.",
    "code": "```php\nfunction isPrime($num) {\n    if ($num <= 1) return false;\n    if ($num <= 3) return true;\n    if ($num % 2 == 0 || $num % 3 == 0) return false;\n    for ($i = 5; $i * $i <= $num; $i += 6) {\n        if ($num % $i == 0 || $num % ($i + 2) == 0) return false;\n    }\n    return true;\n}\n\n$primes = [];\nfor ($i = 2; $i < 100; $i++) {\n    if (isPrime($i)) {\n        $primes[] = $i;\n    }\n}\n\nprint_r($primes);\n```"
  },
  {
    "task": "Write a function to split a list into two lists: one with even numbers and one with odd numbers.",
    "code": "```php\nfunction splitEvenOdd(array $numbers): array {\n    $even = [];\n    $odd = [];\n    foreach ($numbers as $number) {\n        if ($number % 2 === 0) {\n            $even[] = $number;\n        } else {\n            $odd[] = $number;\n        }\n    }\n    return ['even' => $even, 'odd' => $odd];\n}\n```"
  },
  {
    "task": "Create a list of strings and convert all the strings to uppercase.",
    "code": "```php\n$strings = [\"apple\", \"banana\", \"cherry\"];\n$uppercaseStrings = array_map('strtoupper', $strings);\n```"
  },
  {
    "task": "Implement a program that removes all elements from a list that are less than a specified value.",
    "code": "```php\nfunction removeElementsLessThan($list, $value) {\n    return array_filter($list, function($element) use ($value) {\n        return $element >= $value;\n    });\n}\n\n// Example usage:\n$list = [1, 2, 3, 4, 5];\n$value = 3;\n$result = removeElementsLessThan($list, $value);\nprint_r($result);\n```"
  },
  {
    "task": "Write a function that takes a list and returns a new list with elements in random order.",
    "code": "```php\nfunction shuffleList($list) {\n    $shuffledList = $list;\n    shuffle($shuffledList);\n    return $shuffledList;\n}\n```"
  },
  {
    "task": "Create a list of tuples where each tuple contains a number and its square.",
    "code": "```php\n$list = [];\nfor ($i = 1; $i <= 10; $i++) {\n    $list[] = [$i, $i * $i];\n}\n```"
  },
  {
    "task": "Write a program to multiply all elements in a list by a given factor.",
    "code": "```php\nfunction multiplyListByFactor($list, $factor) {\n    return array_map(function($element) use ($factor) {\n        return $element * $factor;\n    }, $list);\n}\n\n$list = [1, 2, 3, 4, 5];\n$factor = 3;\n$result = multiplyListByFactor($list, $factor);\nprint_r($result);\n```"
  },
  {
    "task": "Implement a function that flattens a nested list.",
    "code": "```php\nfunction flattenArray(array $nestedArray): array {\n    $flattened = [];\n    array_walk_recursive($nestedArray, function($value) use (&$flattened) {\n        $flattened[] = $value;\n    });\n    return $flattened;\n}\n```"
  },
  {
    "task": "Create a list of dates and sort them chronologically.",
    "code": "```php\n<?php\n\n$dates = [\n    '2023-10-05',\n    '2021-03-12',\n    '2022-07-19',\n    '2024-01-01',\n    '2020-11-25'\n];\n\nusort($dates, function($a, $b) {\n    return strtotime($a) - strtotime($b);\n});\n\nprint_r($dates);\n\n?>\n```"
  },
  {
    "task": "Write a function that finds the index of the first occurrence of a given element in a list.",
    "code": "```php\nfunction findFirstOccurrenceIndex($list, $element) {\n    foreach ($list as $index => $item) {\n        if ($item === $element) {\n            return $index;\n        }\n    }\n    return -1;\n}\n```"
  },
  {
    "task": "Generate a list of Fibonacci numbers up to a specified limit.",
    "code": "```php\nfunction generateFibonacci($limit) {\n    $fibonacci = [0, 1];\n    while (true) {\n        $next = $fibonacci[count($fibonacci) - 1] + $fibonacci[count($fibonacci) - 2];\n        if ($next > $limit) {\n            break;\n        }\n        $fibonacci[] = $next;\n    }\n    return $fibonacci;\n}\n\n$limit = 100; // example limit\n$fibonacciList = generateFibonacci($limit);\nprint_r($fibonacciList);\n```"
  },
  {
    "task": "Create a list of booleans and determine if all are True.",
    "code": "```php\n$booleans = [true, true, true, true];\n$allTrue = !in_array(false, $booleans);\n```"
  },
  {
    "task": "Write a program to concatenate two lists.",
    "code": "```php\n$list1 = ['a', 'b', 'c'];\n$list2 = ['d', 'e', 'f'];\n\n$concatenatedList = array_merge($list1, $list2);\n\nprint_r($concatenatedList);\n```"
  },
  {
    "task": "Implement a function that returns the length of a list without using built-in functions.",
    "code": "```php\nfunction listLength($list) {\n    $length = 0;\n    foreach ($list as $item) {\n        $length++;\n    }\n    return $length;\n}\n```"
  },
  {
    "task": "Create a list of words and find the longest word.",
    "code": "```php\n$words = [\"apple\", \"banana\", \"strawberry\", \"kiwi\", \"pineapple\"];\n$longestWord = \"\";\n\nforeach ($words as $word) {\n    if (strlen($word) > strlen($longestWord)) {\n        $longestWord = $word;\n    }\n}\n\necho $longestWord;\n```"
  },
  {
    "task": "Write a function that takes a list and a predicate function, returning a list of elements that satisfy the predicate.",
    "code": "```php\nfunction filterList($list, $predicate) {\n    $result = [];\n    foreach ($list as $element) {\n        if ($predicate($element)) {\n            $result[] = $element;\n        }\n    }\n    return $result;\n}\n```"
  },
  {
    "task": "Generate a list of strings and filter out those with less than 5 characters.",
    "code": "```php\n$strings = [\"apple\", \"dog\", \"banana\", \"cat\", \"elephant\"];\n$filteredStrings = array_filter($strings, function($string) {\n    return strlen($string) >= 5;\n});\nprint_r($filteredStrings);\n```"
  },
  {
    "task": "Create a list of mixed data types and separate them into lists by type.",
    "code": "```php\n$mixedList = [1, 2.5, \"hello\", true, 3, 4.4, \"world\", false];\n\n$integers = [];\n$floats = [];\n$strings = [];\n$booleans = [];\n\nforeach ($mixedList as $item) {\n    if (is_int($item)) {\n        $integers[] = $item;\n    } elseif (is_float($item)) {\n        $floats[] = $item;\n    } elseif (is_string($item)) {\n        $strings[] = $item;\n    } elseif (is_bool($item)) {\n        $booleans[] = $item;\n    }\n}\n```"
  },
  {
    "task": "Write a program to find the common elements between two lists.",
    "code": "```php\n$list1 = [1, 2, 3, 4, 5];\n$list2 = [4, 5, 6, 7, 8];\n\n$commonElements = array_intersect($list1, $list2);\n\nprint_r($commonElements);\n```"
  },
  {
    "task": "Implement a function to rotate the elements of a list to the left by a given number of steps.",
    "code": "```php\nfunction rotateLeft(array $list, int $steps): array {\n    $count = count($list);\n    $steps = $steps % $count;\n    return array_merge(array_slice($list, $steps), array_slice($list, 0, $steps));\n}\n```"
  },
  {
    "task": "Create a list of numbers and find the product of all the elements.",
    "code": "```php\n$numbers = [2, 4, 6, 8];\n$product = array_product($numbers);\necho $product;\n```"
  },
  {
    "task": "Write a function that removes all occurrences of a specified element from a list.",
    "code": "```php\nfunction removeOccurrences(array $list, $element) {\n    return array_filter($list, function($item) use ($element) {\n        return $item !== $element;\n    });\n}\n```"
  },
  {
    "task": "Generate a list of random numbers and find the median value.",
    "code": "```php\n<?php\n\nfunction generateRandomNumbers($count, $min, $max) {\n    $numbers = [];\n    for ($i = 0; $i < $count; $i++) {\n        $numbers[] = rand($min, $max);\n    }\n    return $numbers;\n}\n\nfunction findMedian($numbers) {\n    sort($numbers);\n    $count = count($numbers);\n    $middle = floor($count / 2);\n\n    if ($count % 2) {\n        return $numbers[$middle];\n    } else {\n        return ($numbers[$middle - 1] + $numbers[$middle]) / 2;\n    }\n}\n\n$randomNumbers = generateRandomNumbers(10, 1, 100);\n$median = findMedian($randomNumbers);\n\necho \"Random Numbers: \" . implode(\", \", $randomNumbers) . \"\\n\";\necho \"Median Value: \" . $median . \"\\n\";\n\n?>\n```"
  },
  {
    "task": "Create a list of dictionaries and sort them by a specific key.",
    "code": "```php\n<?php\n\n$list = [\n    [\"name\" => \"Alice\", \"age\" => 30],\n    [\"name\" => \"Bob\", \"age\" => 25],\n    [\"name\" => \"Charlie\", \"age\" => 35],\n];\n\nusort($list, function($a, $b) {\n    return $a['age'] <=> $b['age'];\n});\n\nprint_r($list);\n\n?>\n```"
  },
  {
    "task": "Write a program to split a list into chunks of a specified size.",
    "code": "```php\nfunction chunkList(array $list, int $chunkSize): array {\n    $chunks = [];\n    for ($i = 0; $i < count($list); $i += $chunkSize) {\n        $chunks[] = array_slice($list, $i, $chunkSize);\n    }\n    return $chunks;\n}\n\n// Example usage\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n$chunkSize = 3;\n$result = chunkList($list, $chunkSize);\nprint_r($result);\n```"
  },
  {
    "task": "Implement a function that takes a list and returns a dictionary with the frequency of each element.",
    "code": "```php\nfunction listToFrequencyDict($list) {\n    $frequencyDict = [];\n    foreach ($list as $item) {\n        if (array_key_exists($item, $frequencyDict)) {\n            $frequencyDict[$item]++;\n        } else {\n            $frequencyDict[$item] = 1;\n        }\n    }\n    return $frequencyDict;\n}\n```"
  },
  {
    "task": "Create a list of integers and replace all negative numbers with zero.",
    "code": "```php\n$integers = [3, -1, 4, -5, 9];\nforeach ($integers as &$value) {\n    if ($value < 0) {\n        $value = 0;\n    }\n}\nunset($value);\n```"
  },
  {
    "task": "Write a function that returns the first n elements of a list.",
    "code": "```php\nfunction getFirstNElements(array $list, int $n): array {\n    return array_slice($list, 0, $n);\n}\n```"
  },
  {
    "task": "Generate a list of strings and join them into a single string with spaces.",
    "code": "```php\n$list = ['Hello', 'world', 'this', 'is', 'a', 'list'];\n$result = implode(' ', $list);\n```"
  },
  {
    "task": "Create a list of lists and find the sum of each inner list.",
    "code": "```php\n<?php\n\n$lists = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\n\n$sums = array_map(function($list) {\n    return array_sum($list);\n}, $lists);\n\nprint_r($sums);\n\n?>\n```"
  },
  {
    "task": "Write a function that finds the second largest number in a list.",
    "code": "```php\nfunction findSecondLargest($list) {\n    if (count($list) < 2) {\n        return null; // Not enough elements\n    }\n    $largest = $secondLargest = PHP_INT_MIN;\n    foreach ($list as $number) {\n        if ($number > $largest) {\n            $secondLargest = $largest;\n            $largest = $number;\n        } elseif ($number > $secondLargest && $number != $largest) {\n            $secondLargest = $number;\n        }\n    }\n    return $secondLargest;\n}\n```"
  },
  {
    "task": "Generate a list of numbers and remove the duplicates while maintaining order.",
    "code": "```php\nfunction removeDuplicates($numbers) {\n    $uniqueNumbers = [];\n    $seen = [];\n    \n    foreach ($numbers as $number) {\n        if (!isset($seen[$number])) {\n            $seen[$number] = true;\n            $uniqueNumbers[] = $number;\n        }\n    }\n    \n    return $uniqueNumbers;\n}\n\n$numbers = [1, 2, 3, 2, 4, 1, 5];\n$result = removeDuplicates($numbers);\nprint_r($result);\n```"
  },
  {
    "task": "Create a list of integers and partition it into two lists: one with numbers above the average and one below.",
    "code": "```php\n<?php\n\n$numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\n$average = array_sum($numbers) / count($numbers);\n\n$aboveAverage = [];\n$belowAverage = [];\n\nforeach ($numbers as $number) {\n    if ($number > $average) {\n        $aboveAverage[] = $number;\n    } else {\n        $belowAverage[] = $number;\n    }\n}\n\nprint_r($aboveAverage);\nprint_r($belowAverage);\n\n?>\n```"
  },
  {
    "task": "Write a program to find the longest increasing subsequence in a list of numbers.",
    "code": "```php\nfunction longestIncreasingSubsequence($nums) {\n    $n = count($nums);\n    if ($n == 0) {\n        return [];\n    }\n    $dp = array_fill(0, $n, 1);\n    $prev = array_fill(0, $n, -1);\n    $maxLength = 0;\n    $maxIndex = 0;\n\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 0; $j < $i; $j++) {\n            if ($nums[$i] > $nums[$j] && $dp[$i] < $dp[$j] + 1) {\n                $dp[$i] = $dp[$j] + 1;\n                $prev[$i] = $j;\n            }\n        }\n        if ($dp[$i] > $maxLength) {\n            $maxLength = $dp[$i];\n            $maxIndex = $i;\n        }\n    }\n\n    $lis = [];\n    for ($i = $maxIndex; $i >= 0; $i = $prev[$i]) {\n        array_unshift($lis, $nums[$i]);\n        if ($prev[$i] == -1) {\n            break;\n        }\n    }\n\n    return $lis;\n}\n\n// Example usage:\n$nums = [10, 9, 2, 5, 3, 7, 101, 18];\n$result = longestIncreasingSubsequence($nums);\nprint_r($result);\n```"
  },
  {
    "task": "Implement a function to zip two lists into a single list of tuples.",
    "code": "```php\nfunction zipLists($list1, $list2) {\n    $zippedList = [];\n    $length = min(count($list1), count($list2));\n    for ($i = 0; $i < $length; $i++) {\n        $zippedList[] = [$list1[$i], $list2[$i]];\n    }\n    return $zippedList;\n}\n\n// Example usage:\n$list1 = [1, 2, 3];\n$list2 = ['a', 'b', 'c'];\n$result = zipLists($list1, $list2);\nprint_r($result);\n```"
  },
  {
    "task": "Create a list of characters and count the vowels.",
    "code": "```php\n<?php\n\n$characters = ['a', 'b', 'c', 'e', 'i', 'o', 'u', 'x', 'y', 'z'];\n$vowels = ['a', 'e', 'i', 'o', 'u'];\n$vowelCount = 0;\n\nforeach ($characters as $char) {\n    if (in_array($char, $vowels)) {\n        $vowelCount++;\n    }\n}\n\necho \"Number of vowels: \" . $vowelCount;\n\n?>\n```"
  },
  {
    "task": "Write a function that returns the last n elements of a list.",
    "code": "```php\nfunction getLastNElements(array $list, int $n): array {\n    return array_slice($list, -$n);\n}\n```"
  },
  {
    "task": "Generate a list of numbers and split it into two lists: one with positive numbers and one with negative numbers.",
    "code": "```php\n$numbers = [3, -1, 4, -5, 9, -2, 7, -6, 8, -3];\n$positiveNumbers = [];\n$negativeNumbers = [];\n\nforeach ($numbers as $number) {\n    if ($number > 0) {\n        $positiveNumbers[] = $number;\n    } elseif ($number < 0) {\n        $negativeNumbers[] = $number;\n    }\n}\n\nprint_r($positiveNumbers);\nprint_r($negativeNumbers);\n```"
  },
  {
    "task": "Create a list of random integers and find the mode.",
    "code": "```php\n<?php\n\nfunction getRandomIntegers($n, $min = 1, $max = 100) {\n    $randomIntegers = [];\n    for ($i = 0; $i < $n; $i++) {\n        $randomIntegers[] = rand($min, $max);\n    }\n    return $randomIntegers;\n}\n\nfunction findMode($list) {\n    $frequency = array_count_values($list);\n    arsort($frequency);\n    $modes = array_keys($frequency, max($frequency));\n    return $modes;\n}\n\n$list = getRandomIntegers(20);\n$mode = findMode($list);\n\necho \"List: \" . implode(\", \", $list) . \"\\n\";\necho \"Mode: \" . implode(\", \", $mode) . \"\\n\";\n\n?>\n```"
  },
  {
    "task": "Write a program to find the shortest path in a grid using a list to represent the path.",
    "code": "```php\n<?php\n\nfunction shortestPath($grid) {\n    $rows = count($grid);\n    $cols = count($grid[0]);\n    $directions = [[1, 0], [0, 1], [-1, 0], [0, -1]];\n    \n    $queue = [[0, 0, []]];\n    $visited = array_fill(0, $rows, array_fill(0, $cols, false));\n    $visited[0][0] = true;\n    \n    while (!empty($queue)) {\n        list($x, $y, $path) = array_shift($queue);\n        $path[] = [$x, $y];\n        \n        if ($x == $rows - 1 && $y == $cols - 1) {\n            return $path;\n        }\n        \n        foreach ($directions as [$dx, $dy]) {\n            $nx = $x + $dx;\n            $ny = $y + $dy;\n            \n            if ($nx >= 0 && $ny >= 0 && $nx < $rows && $ny < $cols && !$visited[$nx][$ny] && $grid[$nx][$ny] == 0) {\n                $visited[$nx][$ny] = true;\n                $queue[] = [$nx, $ny, $path];\n            }\n        }\n    }\n    \n    return [];\n}\n\n// Example usage:\n$grid = [\n    [0, 1, 0, 0],\n    [0, 0, 0, 1],\n    [1, 1, 0, 0],\n    [0, 0, 0, 0]\n];\n\n$path = shortestPath($grid);\nprint_r($path);\n?>\n```"
  },
  {
    "task": "Implement a function that takes a list and returns a list with elements doubled.",
    "code": "```php\nfunction doubleListElements($list) {\n    return array_map(fn($x) => $x * 2, $list);\n}\n```"
  },
  {
    "task": "Create a list of integers and sort them in descending order.",
    "code": "```php\n$numbers = [5, 2, 8, 1, 3];\nrsort($numbers);\n```"
  },
  {
    "task": "Write a function that takes a list of intervals and merges overlapping intervals.",
    "code": "```php\nfunction mergeIntervals($intervals) {\n    if (empty($intervals)) return [];\n\n    usort($intervals, function($a, $b) {\n        return $a[0] <=> $b[0];\n    });\n\n    $merged = [];\n    $currentInterval = $intervals[0];\n\n    foreach ($intervals as $interval) {\n        if ($interval[0] <= $currentInterval[1]) {\n            $currentInterval[1] = max($currentInterval[1], $interval[1]);\n        } else {\n            $merged[] = $currentInterval;\n            $currentInterval = $interval;\n        }\n    }\n    $merged[] = $currentInterval;\n\n    return $merged;\n}\n```"
  },
  {
    "task": "Generate a list of random numbers and find the range (difference between max and min).",
    "code": "```php\n<?php\n\nfunction generateRandomNumbers($count, $min, $max) {\n    $numbers = [];\n    for ($i = 0; $i < $count; $i++) {\n        $numbers[] = rand($min, $max);\n    }\n    return $numbers;\n}\n\nfunction findRange($numbers) {\n    return max($numbers) - min($numbers);\n}\n\n$randomNumbers = generateRandomNumbers(10, 1, 100);\n$range = findRange($randomNumbers);\n\necho \"Range: \" . $range;\n\n?>\n```"
  },
  {
    "task": "Create a list of strings and remove any that are palindromes.",
    "code": "```php\n<?php\n\n$strings = [\"level\", \"world\", \"radar\", \"hello\", \"rotor\", \"php\"];\n$nonPalindromes = array_filter($strings, function($str) {\n    return $str !== strrev($str);\n});\n\nprint_r($nonPalindromes);\n```"
  },
  {
    "task": "Write a program to cyclically permute the elements of a list.",
    "code": "```php\nfunction cyclicallyPermute($list) {\n    if (count($list) > 1) {\n        $firstElement = array_shift($list);\n        array_push($list, $firstElement);\n    }\n    return $list;\n}\n\n// Example usage:\n$list = [1, 2, 3, 4, 5];\n$permutedList = cyclicallyPermute($list);\nprint_r($permutedList);\n```"
  },
  {
    "task": "Implement a function to create a list of cumulative sums from a list of numbers.",
    "code": "```php\nfunction cumulativeSums($numbers) {\n    $cumulative = [];\n    $sum = 0;\n    foreach ($numbers as $number) {\n        $sum += $number;\n        $cumulative[] = $sum;\n    }\n    return $cumulative;\n}\n```"
  },
  {
    "task": "Create a list of numbers and shift all zeros to the end.",
    "code": "```php\n$numbers = [0, 1, 2, 0, 3, 0, 4];\n$nonZeroNumbers = array_filter($numbers, fn($num) => $num !== 0);\n$zeroCount = count($numbers) - count($nonZeroNumbers);\n$shiftedList = array_merge($nonZeroNumbers, array_fill(0, $zeroCount, 0));\n```"
  },
  {
    "task": "Write a program to simulate a queue using a list.",
    "code": "```php\n<?php\n\nclass Queue {\n    private $list = [];\n\n    public function enqueue($item) {\n        array_push($this->list, $item);\n    }\n\n    public function dequeue() {\n        if (!$this->isEmpty()) {\n            return array_shift($this->list);\n        }\n        return null;\n    }\n\n    public function isEmpty() {\n        return empty($this->list);\n    }\n\n    public function size() {\n        return count($this->list);\n    }\n}\n\n// Example usage\n$queue = new Queue();\n$queue->enqueue('Item 1');\n$queue->enqueue('Item 2');\necho $queue->dequeue(); // Outputs: Item 1\necho $queue->dequeue(); // Outputs: Item 2\necho $queue->isEmpty() ? 'Queue is empty' : 'Queue is not empty'; // Outputs: Queue is empty\n?>\n```"
  },
  {
    "task": "Generate a list of numbers and identify all prime numbers.",
    "code": "```php\nfunction is_prime($num) {\n    if ($num <= 1) return false;\n    if ($num <= 3) return true;\n    if ($num % 2 == 0 || $num % 3 == 0) return false;\n    for ($i = 5; $i * $i <= $num; $i += 6) {\n        if ($num % $i == 0 || $num % ($i + 2) == 0) return false;\n    }\n    return true;\n}\n\nfunction list_prime_numbers($limit) {\n    $numbers = range(1, $limit);\n    $primes = array_filter($numbers, 'is_prime');\n    return $primes;\n}\n\n$prime_numbers = list_prime_numbers(100);\nprint_r($prime_numbers);\n```"
  },
  {
    "task": "Create a list of strings and group them by their starting letter.",
    "code": "```php\n$strings = [\"apple\", \"apricot\", \"banana\", \"blackberry\", \"blueberry\", \"cherry\", \"date\", \"fig\", \"grape\"];\n$groupedStrings = [];\n\nforeach ($strings as $string) {\n    $firstLetter = $string[0];\n    if (!isset($groupedStrings[$firstLetter])) {\n        $groupedStrings[$firstLetter] = [];\n    }\n    $groupedStrings[$firstLetter][] = $string;\n}\n\nprint_r($groupedStrings);\n```"
  },
  {
    "task": "Write a function that takes a list and returns a new list with all elements squared.",
    "code": "```php\nfunction squareList($list) {\n    return array_map(fn($x) => $x * $x, $list);\n}\n```"
  },
  {
    "task": "Generate a list of timestamps and find the time difference between consecutive elements.",
    "code": "```php\n$timestamps = [];\nfor ($i = 0; $i < 10; $i++) {\n    $timestamps[] = time() + $i * 60;\n}\n\n$differences = [];\nfor ($i = 1; $i < count($timestamps); $i++) {\n    $differences[] = $timestamps[$i] - $timestamps[$i - 1];\n}\n\nprint_r($timestamps);\nprint_r($differences);\n```"
  },
  {
    "task": "Create a list of numbers and rotate it such that the smallest number is first.",
    "code": "```php\n<?php\n\nfunction rotateListWithSmallestFirst($numbers) {\n    if (empty($numbers)) {\n        return $numbers;\n    }\n    \n    $minIndex = array_search(min($numbers), $numbers);\n    $rotatedList = array_merge(array_slice($numbers, $minIndex), array_slice($numbers, 0, $minIndex));\n    \n    return $rotatedList;\n}\n\n$list = [5, 3, 8, 1, 4];\n$result = rotateListWithSmallestFirst($list);\nprint_r($result);\n\n?>\n```"
  },
  {
    "task": "Write a program to find all unique pairs in a list that sum up to a specific target.",
    "code": "```php\n<?php\n\nfunction findPairsWithSum($list, $target) {\n    $seen = [];\n    $pairs = [];\n\n    foreach ($list as $number) {\n        $complement = $target - $number;\n        if (isset($seen[$complement])) {\n            $pair = [$complement, $number];\n            sort($pair);\n            $pairs[implode(',', $pair)] = $pair;\n        }\n        $seen[$number] = true;\n    }\n\n    return array_values($pairs);\n}\n\n// Example usage:\n$list = [2, 4, 3, 5, 7, 8, 9];\n$target = 10;\n$result = findPairsWithSum($list, $target);\nprint_r($result);\n\n?>\n```"
  },
  {
    "task": "Implement a function that returns true if a list contains a cycle.",
    "code": "```php\n<?php\n\nclass ListNode {\n    public $val = 0;\n    public $next = null;\n    public function __construct($val = 0, $next = null) {\n        $this->val = $val;\n        $this->next = $next;\n    }\n}\n\nfunction hasCycle($head) {\n    if ($head === null || $head->next === null) {\n        return false;\n    }\n    \n    $slow = $head;\n    $fast = $head->next;\n    \n    while ($slow !== $fast) {\n        if ($fast === null || $fast->next === null) {\n            return false;\n        }\n        $slow = $slow->next;\n        $fast = $fast->next->next;\n    }\n    \n    return true;\n}\n?>\n```"
  },
  {
    "task": "Create a list of numbers and find the contiguous subarray with the maximum sum.",
    "code": "```php\nfunction maxSubArray($nums) {\n    $maxSum = $nums[0];\n    $currentSum = $nums[0];\n    \n    for ($i = 1; $i < count($nums); $i++) {\n        $currentSum = max($nums[$i], $currentSum + $nums[$i]);\n        $maxSum = max($maxSum, $currentSum);\n    }\n    \n    return $maxSum;\n}\n\n$numbers = [1, -3, 2, 1, -1, 3, -2, 3];\necho maxSubArray($numbers);\n```"
  },
  {
    "task": "Write a function that takes a list and a number, and finds two numbers in the list that sum to the given number.",
    "code": "```php\nfunction findPairWithSum($list, $target) {\n    $seen = [];\n    foreach ($list as $number) {\n        $complement = $target - $number;\n        if (isset($seen[$complement])) {\n            return [$complement, $number];\n        }\n        $seen[$number] = true;\n    }\n    return null;\n}\n```"
  },
  {
    "task": "Generate a list of even numbers and filter out those that are greater than a specific value.",
    "code": "```php\n<?php\n\nfunction generateEvenNumbers($maxValue, $filterValue) {\n    $evenNumbers = range(2, $maxValue, 2);\n    return array_filter($evenNumbers, function($num) use ($filterValue) {\n        return $num <= $filterValue;\n    });\n}\n\n// Example usage:\n$evenNumbers = generateEvenNumbers(100, 50);\nprint_r($evenNumbers);\n\n?>\n```"
  },
  {
    "task": "Create a list of characters and reverse the vowels only.",
    "code": "```php\nfunction reverseVowels($string) {\n    $vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n    $chars = str_split($string);\n    $vowelPositions = [];\n    $vowelChars = [];\n\n    foreach ($chars as $index => $char) {\n        if (in_array($char, $vowels)) {\n            $vowelPositions[] = $index;\n            $vowelChars[] = $char;\n        }\n    }\n\n    $vowelChars = array_reverse($vowelChars);\n\n    foreach ($vowelPositions as $index => $position) {\n        $chars[$position] = $vowelChars[$index];\n    }\n\n    return implode('', $chars);\n}\n\n$inputString = \"hello world\";\n$result = reverseVowels($inputString);\necho $result;\n```"
  },
  {
    "task": "Write a program to find all permutations of a list of elements.",
    "code": "```php\nfunction permute($items, $perms = []) {\n    if (empty($items)) {\n        echo implode(' ', $perms) . \"\\n\";\n    } else {\n        for ($i = 0; $i < count($items); $i++) {\n            $newItems = $items;\n            $newPerms = $perms;\n            list($item) = array_splice($newItems, $i, 1);\n            array_push($newPerms, $item);\n            permute($newItems, $newPerms);\n        }\n    }\n}\n\n$list = ['a', 'b', 'c'];\npermute($list);\n```"
  },
  {
    "task": "Implement a function that takes a list and returns the most frequently occurring element.",
    "code": "```php\nfunction mostFrequentElement($list) {\n    $frequency = array_count_values($list);\n    arsort($frequency);\n    return key($frequency);\n}\n```"
  },
  {
    "task": "Create a list of numbers and calculate the variance.",
    "code": "```php\n$numbers = [1, 2, 3, 4, 5];\n$mean = array_sum($numbers) / count($numbers);\n$variance = array_sum(array_map(fn($n) => pow($n - $mean, 2), $numbers)) / count($numbers);\necho $variance;\n```"
  },
  {
    "task": "Write a function to concatenate a list of lists into a single list.",
    "code": "```php\nfunction concatenateLists($listOfLists) {\n    $result = [];\n    foreach ($listOfLists as $list) {\n        $result = array_merge($result, $list);\n    }\n    return $result;\n}\n```"
  },
  {
    "task": "Generate a list of numbers and replace each element with the product of all other elements.",
    "code": "```php\nfunction replaceWithProductOfOthers($numbers) {\n    $totalProduct = array_product($numbers);\n    $result = [];\n    foreach ($numbers as $num) {\n        $result[] = $totalProduct / $num;\n    }\n    return $result;\n}\n\n$numbers = [1, 2, 3, 4, 5];\n$result = replaceWithProductOfOthers($numbers);\nprint_r($result);\n```"
  },
  {
    "task": "Create a list of strings and find the common prefix.",
    "code": "```php\nfunction findCommonPrefix($strings) {\n    if (empty($strings)) return \"\";\n    \n    $prefix = $strings[0];\n    foreach ($strings as $string) {\n        while (strpos($string, $prefix) !== 0) {\n            $prefix = substr($prefix, 0, -1);\n            if ($prefix === \"\") return \"\";\n        }\n    }\n    return $prefix;\n}\n\n$list = [\"flower\", \"flow\", \"flight\"];\n$commonPrefix = findCommonPrefix($list);\necho $commonPrefix;\n```"
  },
  {
    "task": "Write a program to partition a list into two lists based on a predicate function.",
    "code": "```php\nfunction partition(array $list, callable $predicate): array {\n    $trueList = [];\n    $falseList = [];\n\n    foreach ($list as $item) {\n        if ($predicate($item)) {\n            $trueList[] = $item;\n        } else {\n            $falseList[] = $item;\n        }\n    }\n\n    return [$trueList, $falseList];\n}\n\n// Example usage:\n$list = [1, 2, 3, 4, 5, 6];\n$predicate = function($x) { return $x % 2 === 0; };\n\n[$evens, $odds] = partition($list, $predicate);\n\nprint_r($evens);\nprint_r($odds);\n```"
  },
  {
    "task": "Implement a function to find the kth smallest element in a list.",
    "code": "```php\nfunction findKthSmallest($list, $k) {\n    sort($list);\n    return $list[$k - 1];\n}\n```"
  },
  {
    "task": "Create a list of integers and find the length of the longest contiguous sequence.",
    "code": "```php\n<?php\n\nfunction findLongestContiguousSequence($list) {\n    if (empty($list)) return 0;\n\n    $maxLength = 1;\n    $currentLength = 1;\n\n    for ($i = 1; $i < count($list); $i++) {\n        if ($list[$i] == $list[$i - 1] + 1) {\n            $currentLength++;\n        } else {\n            $maxLength = max($maxLength, $currentLength);\n            $currentLength = 1;\n        }\n    }\n\n    return max($maxLength, $currentLength);\n}\n\n$list = [1, 2, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7];\necho findLongestContiguousSequence($list);\n\n?>\n```"
  },
  {
    "task": "Write a function that rotates elements in a list while maintaining the relative order of non-rotated elements.",
    "code": "```php\nfunction rotateList($list, $rotateBy) {\n    $count = count($list);\n    if ($count === 0) return $list;\n    $rotateBy = $rotateBy % $count;\n    if ($rotateBy < 0) $rotateBy += $count;\n    return array_merge(array_slice($list, -$rotateBy), array_slice($list, 0, $count - $rotateBy));\n}\n```"
  },
  {
    "task": "Generate a list of random numbers and sort them while maintaining the original index positions.",
    "code": "```php\n<?php\n\n$randomNumbers = [];\nfor ($i = 0; $i < 10; $i++) {\n    $randomNumbers[] = rand(1, 100);\n}\n\n$sortedNumbers = $randomNumbers;\nasort($sortedNumbers);\n\n$indexedSortedNumbers = [];\nforeach ($sortedNumbers as $index => $value) {\n    $indexedSortedNumbers[] = ['index' => $index, 'value' => $value];\n}\n\nprint_r($indexedSortedNumbers);\n```"
  },
  {
    "task": "Create a list of numbers and find all subsets that sum up to a specific target.",
    "code": "```php\nfunction findSubsetsThatSumToTarget($nums, $target) {\n    $result = [];\n    $subset = [];\n    findSubsets($nums, $target, 0, $subset, $result);\n    return $result;\n}\n\nfunction findSubsets($nums, $target, $index, $subset, &$result) {\n    if ($target == 0) {\n        $result[] = $subset;\n        return;\n    }\n\n    for ($i = $index; $i < count($nums); $i++) {\n        if ($nums[$i] <= $target) {\n            $subset[] = $nums[$i];\n            findSubsets($nums, $target - $nums[$i], $i + 1, $subset, $result);\n            array_pop($subset);\n        }\n    }\n}\n\n$numbers = [1, 2, 3, 4, 5];\n$target = 5;\n$subsets = findSubsetsThatSumToTarget($numbers, $target);\nprint_r($subsets);\n```"
  },
  {
    "task": "Write a program to simulate a stack using a list.",
    "code": "```php\n<?php\n\nclass Stack {\n    private $stack = [];\n\n    public function push($item) {\n        $this->stack[] = $item;\n    }\n\n    public function pop() {\n        if ($this->isEmpty()) {\n            throw new RuntimeException('Stack is empty');\n        }\n        return array_pop($this->stack);\n    }\n\n    public function isEmpty() {\n        return empty($this->stack);\n    }\n\n    public function peek() {\n        if ($this->isEmpty()) {\n            throw new RuntimeException('Stack is empty');\n        }\n        return end($this->stack);\n    }\n}\n\n// Example usage\n$stack = new Stack();\n$stack->push(1);\n$stack->push(2);\necho $stack->pop(); // Outputs: 2\necho $stack->peek(); // Outputs: 1\n?>\n```"
  }
]