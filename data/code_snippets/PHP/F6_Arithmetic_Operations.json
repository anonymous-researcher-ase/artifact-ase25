[
  {
    "task": "Write a function that takes two numbers and returns their sum.",
    "code": "```php\nfunction add($num1, $num2) {\n    return $num1 + $num2;\n}\n```"
  },
  {
    "task": "Create a program that calculates the difference between two given integers.",
    "code": "```php\n<?php\nfunction calculateDifference($a, $b) {\n    return $a - $b;\n}\n\n// Example usage:\n$number1 = 10;\n$number2 = 4;\n$difference = calculateDifference($number1, $number2);\necho \"The difference is: \" . $difference;\n?>\n```"
  },
  {
    "task": "Design a function to multiply two floating-point numbers and return the result.",
    "code": "```php\nfunction multiply($num1, $num2) {\n    return $num1 * $num2;\n}\n```"
  },
  {
    "task": "Implement a function that divides two numbers and handles division by zero exceptions.",
    "code": "```php\nfunction divideNumbers($numerator, $denominator) {\n    try {\n        if ($denominator == 0) {\n            throw new Exception(\"Division by zero.\");\n        }\n        return $numerator / $denominator;\n    } catch (Exception $e) {\n        return $e->getMessage();\n    }\n}\n```"
  },
  {
    "task": "Build a calculator that can perform addition, subtraction, multiplication, and division on user-provided inputs.",
    "code": "```php\n<?php\n\nfunction calculator($num1, $num2, $operation) {\n    switch ($operation) {\n        case 'add':\n            return $num1 + $num2;\n        case 'subtract':\n            return $num1 - $num2;\n        case 'multiply':\n            return $num1 * $num2;\n        case 'divide':\n            if ($num2 == 0) {\n                return \"Error: Division by zero\";\n            }\n            return $num1 / $num2;\n        default:\n            return \"Invalid operation\";\n    }\n}\n\n$num1 = (float)readline('Enter the first number: ');\n$num2 = (float)readline('Enter the second number: ');\n$operation = readline('Enter the operation (add, subtract, multiply, divide): ');\n\n$result = calculator($num1, $num2, $operation);\necho \"Result: \" . $result . \"\\n\";\n\n?>\n```"
  },
  {
    "task": "Write a script to compute the average of a list of numbers using arithmetic operations.",
    "code": "```php\n<?php\n\nfunction computeAverage($numbers) {\n    $sum = 0;\n    $count = count($numbers);\n\n    if ($count === 0) {\n        return 0; // Return 0 if the list is empty to avoid division by zero\n    }\n\n    foreach ($numbers as $number) {\n        $sum += $number;\n    }\n\n    return $sum / $count;\n}\n\n$numbers = [10, 20, 30, 40, 50];\n$average = computeAverage($numbers);\necho \"The average is: \" . $average;\n\n?>\n```"
  },
  {
    "task": "Create a function that returns the remainder of the division of two integers.",
    "code": "```php\nfunction getRemainder($a, $b) {\n    return $a % $b;\n}\n```"
  },
  {
    "task": "Develop a function that can add a variable number of arguments and return the total.",
    "code": "```php\nfunction add(...$numbers) {\n    return array_sum($numbers);\n}\n```"
  },
  {
    "task": "Write a program that subtracts a series of numbers from an initial value.",
    "code": "```php\n<?php\n\nfunction subtractSeries($initial, $numbers) {\n    foreach ($numbers as $number) {\n        $initial -= $number;\n    }\n    return $initial;\n}\n\n$initialValue = 100;\n$numbersToSubtract = [10, 20, 5, 15];\n\n$result = subtractSeries($initialValue, $numbersToSubtract);\n\necho $result;\n?>\n```"
  },
  {
    "task": "Implement a function that multiplies all elements in an array and returns the product.",
    "code": "```php\nfunction multiplyArrayElements($array) {\n    $product = 1;\n    foreach ($array as $element) {\n        $product *= $element;\n    }\n    return $product;\n}\n```"
  },
  {
    "task": "Design a program that divides a number by another and rounds the result to two decimal places.",
    "code": "```php\n<?php\nfunction divideAndRound($numerator, $denominator) {\n    if ($denominator == 0) {\n        return \"Division by zero error\";\n    }\n    $result = $numerator / $denominator;\n    return round($result, 2);\n}\n\necho divideAndRound(10, 3);\n```"
  },
  {
    "task": "Create a function that performs arithmetic operations on complex numbers.",
    "code": "```php\n<?php\n\nfunction complexArithmetic($num1, $num2, $operation) {\n    $real1 = $num1['real'];\n    $imag1 = $num1['imag'];\n    $real2 = $num2['real'];\n    $imag2 = $num2['imag'];\n\n    switch ($operation) {\n        case 'add':\n            return [\n                'real' => $real1 + $real2,\n                'imag' => $imag1 + $imag2\n            ];\n        case 'subtract':\n            return [\n                'real' => $real1 - $real2,\n                'imag' => $imag1 - $imag2\n            ];\n        case 'multiply':\n            return [\n                'real' => $real1 * $real2 - $imag1 * $imag2,\n                'imag' => $real1 * $imag2 + $imag1 * $real2\n            ];\n        case 'divide':\n            $denominator = $real2 * $real2 + $imag2 * $imag2;\n            return [\n                'real' => ($real1 * $real2 + $imag1 * $imag2) / $denominator,\n                'imag' => ($imag1 * $real2 - $real1 * $imag2) / $denominator\n            ];\n        default:\n            return null;\n    }\n}\n\n// Example usage:\n$num1 = ['real' => 3, 'imag' => 2];\n$num2 = ['real' => 1, 'imag' => 7];\n$result = complexArithmetic($num1, $num2, 'add');\nprint_r($result);\n\n?>\n```"
  },
  {
    "task": "Write a function to calculate the area of a rectangle given its length and width using multiplication.",
    "code": "```php\n<?php\nfunction calculateRectangleArea($length, $width) {\n    return $length * $width;\n}\n```"
  },
  {
    "task": "Build a program that converts a price in dollars to another currency using multiplication with exchange rates.",
    "code": "```php\n<?php\nfunction convertCurrency($amountInDollars, $exchangeRate) {\n    return $amountInDollars * $exchangeRate;\n}\n\n$amountInDollars = 100; // Example amount in dollars\n$exchangeRate = 0.85; // Example exchange rate (e.g., to Euros)\n\n$convertedAmount = convertCurrency($amountInDollars, $exchangeRate);\necho \"Converted amount: \" . $convertedAmount;\n?>\n```"
  },
  {
    "task": "Implement a function that checks if a number is divisible by another and returns a boolean.",
    "code": "```php\nfunction isDivisible($num, $divisor) {\n    return $divisor != 0 && $num % $divisor === 0;\n}\n```"
  },
  {
    "task": "Write a script to sum the digits of an integer using arithmetic operations.",
    "code": "```php\n<?php\nfunction sumDigits($number) {\n    $sum = 0;\n    $number = abs($number);\n    while ($number > 0) {\n        $sum += $number % 10;\n        $number = intdiv($number, 10);\n    }\n    return $sum;\n}\n\n// Example usage\n$integer = 12345;\necho sumDigits($integer);\n?>\n```"
  },
  {
    "task": "Develop a function that applies a discount percentage to a price using subtraction and multiplication.",
    "code": "```php\nfunction applyDiscount($price, $discountPercentage) {\n    $discountAmount = $price * ($discountPercentage / 100);\n    $finalPrice = $price - $discountAmount;\n    return $finalPrice;\n}\n\n// Example usage:\n$price = 100;\n$discountPercentage = 20;\necho applyDiscount($price, $discountPercentage);\n```"
  },
  {
    "task": "Create a program to calculate the yearly salary given an hourly wage and hours worked per week.",
    "code": "```php\n<?php\n\nfunction calculateYearlySalary($hourlyWage, $hoursPerWeek) {\n    $weeksPerYear = 52;\n    $yearlySalary = $hourlyWage * $hoursPerWeek * $weeksPerYear;\n    return $yearlySalary;\n}\n\n// Example usage:\n$hourlyWage = 25; // Example hourly wage\n$hoursPerWeek = 40; // Example hours worked per week\n$yearlySalary = calculateYearlySalary($hourlyWage, $hoursPerWeek);\necho \"Yearly Salary: $\" . $yearlySalary;\n\n?>\n```"
  },
  {
    "task": "Design a function that calculates the compound interest over a given period using arithmetic operations.",
    "code": "```php\n<?php\n\nfunction calculateCompoundInterest($principal, $rate, $timesCompounded, $years) {\n    $amount = $principal * pow((1 + $rate / $timesCompounded), $timesCompounded * $years);\n    return $amount - $principal;\n}\n\n$principal = 1000; // Principal amount\n$rate = 0.05; // Annual interest rate\n$timesCompounded = 4; // Number of times the interest is compounded per year\n$years = 5; // Number of years\n\n$compoundInterest = calculateCompoundInterest($principal, $rate, $timesCompounded, $years);\necho \"Compound Interest: $\" . number_format($compoundInterest, 2);\n\n?>\n```"
  },
  {
    "task": "Write a program that scales a 2D point by a given factor using multiplication.",
    "code": "```php\n<?php\n\nfunction scalePoint($x, $y, $factor) {\n    $scaledX = $x * $factor;\n    $scaledY = $y * $factor;\n    return [$scaledX, $scaledY];\n}\n\n// Example usage:\n$point = [3, 4];\n$factor = 2;\n$scaledPoint = scalePoint($point[0], $point[1], $factor);\n\necho \"Scaled Point: (\" . $scaledPoint[0] . \", \" . $scaledPoint[1] . \")\";\n\n?>\n```"
  },
  {
    "task": "Implement a function that calculates the perimeter of a triangle given its side lengths.",
    "code": "```php\nfunction calculateTrianglePerimeter($side1, $side2, $side3) {\n    return $side1 + $side2 + $side3;\n}\n```"
  },
  {
    "task": "Create a function to determine if three sides can form a right triangle using the Pythagorean theorem.",
    "code": "```php\n<?php\n\nfunction isRightTriangle($a, $b, $c) {\n    $sides = [$a, $b, $c];\n    sort($sides);\n    return pow($sides[0], 2) + pow($sides[1], 2) === pow($sides[2], 2);\n}\n\n// Example usage\n// var_dump(isRightTriangle(3, 4, 5)); // true\n// var_dump(isRightTriangle(5, 3, 4)); // true\n// var_dump(isRightTriangle(1, 2, 3)); // false\n?>\n```"
  },
  {
    "task": "Write a script that calculates the total cost of items in a shopping cart using addition.",
    "code": "```php\n<?php\n\n$shoppingCart = [12.99, 23.50, 9.75, 5.99, 14.30]; // Example item prices\n$totalCost = 0;\n\nforeach ($shoppingCart as $price) {\n    $totalCost += $price;\n}\n\necho \"Total Cost: $\" . number_format($totalCost, 2);\n?>\n```"
  },
  {
    "task": "Develop a function that returns the quotient and remainder of a division operation.",
    "code": "```php\nfunction divisionOperation($dividend, $divisor) {\n    $quotient = intdiv($dividend, $divisor);\n    $remainder = $dividend % $divisor;\n    return [$quotient, $remainder];\n}\n```"
  },
  {
    "task": "Build a program that simulates a basic checkout system using arithmetic operations for totals and discounts.",
    "code": "```php\n<?php\n\nfunction calculateTotal($items) {\n    $total = 0;\n    foreach ($items as $item) {\n        $total += $item['price'] * $item['quantity'];\n    }\n    return $total;\n}\n\nfunction applyDiscount($total, $discountPercentage) {\n    return $total - ($total * ($discountPercentage / 100));\n}\n\n$items = [\n    ['name' => 'Item 1', 'price' => 10.00, 'quantity' => 2],\n    ['name' => 'Item 2', 'price' => 5.00, 'quantity' => 1],\n    ['name' => 'Item 3', 'price' => 20.00, 'quantity' => 3],\n];\n\n$total = calculateTotal($items);\n$discountPercentage = 10; // Example discount\n$totalAfterDiscount = applyDiscount($total, $discountPercentage);\n\necho \"Total before discount: $\" . number_format($total, 2) . \"\\n\";\necho \"Total after discount: $\" . number_format($totalAfterDiscount, 2) . \"\\n\";\n\n?>\n```"
  },
  {
    "task": "Implement a function to calculate the distance between two points on a plane using subtraction and square roots.",
    "code": "```php\n<?php\n\nfunction calculateDistance($x1, $y1, $x2, $y2) {\n    $dx = $x2 - $x1;\n    $dy = $y2 - $y1;\n    return sqrt($dx * $dx + $dy * $dy);\n}\n```"
  },
  {
    "task": "Write a function that calculates the speed of a vehicle given distance and time using division.",
    "code": "```php\nfunction calculateSpeed($distance, $time) {\n    if ($time == 0) {\n        return null; // Handle division by zero\n    }\n    return $distance / $time;\n}\n```"
  },
  {
    "task": "Create a program to compute the total minutes in a given number of hours using multiplication.",
    "code": "```php\n<?php\n\nfunction computeTotalMinutes($hours) {\n    return $hours * 60;\n}\n\n// Example usage\n$hours = 5;\n$totalMinutes = computeTotalMinutes($hours);\necho \"Total minutes in $hours hours is $totalMinutes minutes.\";\n```"
  },
  {
    "task": "Design a function that determines the number of dozens of eggs from a given total number of eggs.",
    "code": "```php\n<?php\n\nfunction calculateDozens($totalEggs) {\n    return intdiv($totalEggs, 12);\n}\n\n?>\n```"
  },
  {
    "task": "Write a script to find the greatest common divisor of two numbers using arithmetic operations.",
    "code": "```php\nfunction gcd($a, $b) {\n    while ($b != 0) {\n        $t = $b;\n        $b = $a % $b;\n        $a = $t;\n    }\n    return $a;\n}\n\n$num1 = 48;\n$num2 = 180;\n\necho \"The GCD of $num1 and $num2 is: \" . gcd($num1, $num2);\n```"
  },
  {
    "task": "Develop a program that calculates the total weight of multiple items using addition.",
    "code": "```php\n<?php\n\nfunction calculateTotalWeight($weights) {\n    $totalWeight = 0;\n    foreach ($weights as $weight) {\n        $totalWeight += $weight;\n    }\n    return $totalWeight;\n}\n\n$itemsWeights = [2.5, 3.0, 1.75, 4.5]; // Example weights of items\n$totalWeight = calculateTotalWeight($itemsWeights);\necho \"Total Weight: \" . $totalWeight;\n\n?>\n```"
  },
  {
    "task": "Implement a function to convert a temperature from Celsius to Fahrenheit using multiplication and addition.",
    "code": "```php\nfunction celsiusToFahrenheit($celsius) {\n    return $celsius * 9 / 5 + 32;\n}\n```"
  },
  {
    "task": "Create a program that determines the age difference between two people given their birth years.",
    "code": "```php\n<?php\n\nfunction calculateAgeDifference($birthYear1, $birthYear2) {\n    $ageDifference = abs($birthYear1 - $birthYear2);\n    return $ageDifference;\n}\n\n$birthYearPerson1 = 1990;\n$birthYearPerson2 = 1985;\n\n$ageDifference = calculateAgeDifference($birthYearPerson1, $birthYearPerson2);\necho \"The age difference is: \" . $ageDifference . \" years.\";\n\n?>\n```"
  },
  {
    "task": "Write a function to calculate the final price after applying tax and discount using addition and subtraction.",
    "code": "```php\nfunction calculateFinalPrice($originalPrice, $taxRate, $discount) {\n    $taxAmount = $originalPrice * $taxRate;\n    $discountAmount = $originalPrice * $discount;\n    $finalPrice = $originalPrice + $taxAmount - $discountAmount;\n    return $finalPrice;\n}\n```"
  },
  {
    "task": "Design a program to compute the net profit given total revenue and expenses.",
    "code": "```php\n<?php\n\nfunction calculateNetProfit($revenue, $expenses) {\n    $netProfit = $revenue - $expenses;\n    return $netProfit;\n}\n\n// Example usage:\n$totalRevenue = 10000; // Example revenue\n$totalExpenses = 7000; // Example expenses\n\n$netProfit = calculateNetProfit($totalRevenue, $totalExpenses);\necho \"Net Profit: $\" . $netProfit;\n?>\n```"
  },
  {
    "task": "Develop a function to calculate the BMI given weight and height using division and multiplication.",
    "code": "```php\nfunction calculateBMI($weight, $height) {\n    return $weight / ($height * $height);\n}\n```"
  },
  {
    "task": "Create a function that calculates the midpoint between two numbers using addition and division.",
    "code": "```php\n<?php\n\nfunction calculateMidpoint($num1, $num2) {\n    return ($num1 + $num2) / 2;\n}\n\n?>\n```"
  },
  {
    "task": "Write a program that outputs the result of dividing a number by another with remainder.",
    "code": "```php\n<?php\n\nfunction divideWithRemainder($numerator, $denominator) {\n    $quotient = intdiv($numerator, $denominator);\n    $remainder = $numerator % $denominator;\n    return \"Quotient: $quotient, Remainder: $remainder\";\n}\n\necho divideWithRemainder(10, 3);\n\n?>\n```"
  },
  {
    "task": "Implement a function to calculate the factorial of a number using multiplication.",
    "code": "```php\nfunction factorial($n) {\n    $result = 1;\n    for ($i = 2; $i <= $n; $i++) {\n        $result *= $i;\n    }\n    return $result;\n}\n```"
  },
  {
    "task": "Build a script to find the average of three numbers using addition and division.",
    "code": "```php\n<?php\nfunction calculateAverage($num1, $num2, $num3) {\n    $sum = $num1 + $num2 + $num3;\n    $average = $sum / 3;\n    return $average;\n}\n\n$num1 = 10;\n$num2 = 20;\n$num3 = 30;\n\n$average = calculateAverage($num1, $num2, $num3);\necho \"The average is: \" . $average;\n?>\n```"
  },
  {
    "task": "Create a program that simulates a simple bank account using arithmetic operations for deposits and withdrawals.",
    "code": "```php\n<?php\n\nclass BankAccount {\n    private $balance;\n\n    public function __construct($initialBalance = 0) {\n        $this->balance = $initialBalance;\n    }\n\n    public function deposit($amount) {\n        if ($amount > 0) {\n            $this->balance += $amount;\n        }\n    }\n\n    public function withdraw($amount) {\n        if ($amount > 0 && $amount <= $this->balance) {\n            $this->balance -= $amount;\n        }\n    }\n\n    public function getBalance() {\n        return $this->balance;\n    }\n}\n\n$account = new BankAccount(100);\n$account->deposit(50);\n$account->withdraw(30);\necho \"Current Balance: \" . $account->getBalance();\n\n?>\n```"
  },
  {
    "task": "Write a function that computes the cost per item given a total cost and quantity using division.",
    "code": "```php\nfunction computeCostPerItem($totalCost, $quantity) {\n    if ($quantity == 0) {\n        return null; // Avoid division by zero\n    }\n    return $totalCost / $quantity;\n}\n```"
  },
  {
    "task": "Design a program that calculates the time required to travel a distance at a given speed.",
    "code": "```php\n<?php\n\nfunction calculateTravelTime($distance, $speed) {\n    if ($speed <= 0) {\n        return \"Speed must be greater than zero.\";\n    }\n    return $distance / $speed;\n}\n\n$distance = 150; // Example distance in kilometers\n$speed = 75;     // Example speed in kilometers per hour\n\n$travelTime = calculateTravelTime($distance, $speed);\necho \"Time required to travel $distance km at $speed km/h is $travelTime hours.\";\n\n?>\n```"
  },
  {
    "task": "Develop a function that returns the absolute difference between two numbers.",
    "code": "```php\nfunction absoluteDifference($num1, $num2) {\n    return abs($num1 - $num2);\n}\n```"
  },
  {
    "task": "Implement a program to compute the geometric mean of a set of numbers using multiplication and roots.",
    "code": "```php\n<?php\n\nfunction geometricMean(array $numbers): float {\n    $product = 1;\n    $count = count($numbers);\n\n    foreach ($numbers as $number) {\n        $product *= $number;\n    }\n\n    return pow($product, 1 / $count);\n}\n\n// Example usage:\n$numbers = [4, 1, 1/32];\necho geometricMean($numbers);\n```"
  },
  {
    "task": "Write a function to calculate the total interest paid on a loan using arithmetic operations.",
    "code": "```php\n<?php\n\nfunction calculateTotalInterest($principal, $annualRate, $years) {\n    $totalInterest = 0;\n    $monthlyRate = $annualRate / 12 / 100;\n    $numberOfPayments = $years * 12;\n\n    for ($i = 0; $i < $numberOfPayments; $i++) {\n        $interestPayment = $principal * $monthlyRate;\n        $totalInterest += $interestPayment;\n        $principal -= ($interestPayment); // Assuming a constant principal reduction\n    }\n\n    return $totalInterest;\n}\n\n$principal = 10000;  // Example principal\n$annualRate = 5;     // Example annual interest rate\n$years = 2;          // Example duration in years\n\n$totalInterestPaid = calculateTotalInterest($principal, $annualRate, $years);\necho \"Total Interest Paid: $\" . $totalInterestPaid;\n```"
  },
  {
    "task": "Create a program that calculates the sum of even numbers within a specified range.",
    "code": "```php\n<?php\n\nfunction sumOfEvenNumbers($start, $end) {\n    $sum = 0;\n    for ($i = $start; $i <= $end; $i++) {\n        if ($i % 2 == 0) {\n            $sum += $i;\n        }\n    }\n    return $sum;\n}\n\n$start = 1;\n$end = 10;\necho sumOfEvenNumbers($start, $end);\n\n?>\n```"
  },
  {
    "task": "Design a script to determine the final balance in a savings account after regular deposits and withdrawals.",
    "code": "```php\n<?php\n\nfunction calculateFinalBalance($initialBalance, $transactions) {\n    $balance = $initialBalance;\n    \n    foreach ($transactions as $transaction) {\n        if ($transaction['type'] === 'deposit') {\n            $balance += $transaction['amount'];\n        } elseif ($transaction['type'] === 'withdrawal') {\n            $balance -= $transaction['amount'];\n        }\n    }\n    \n    return $balance;\n}\n\n$initialBalance = 1000;\n$transactions = [\n    ['type' => 'deposit', 'amount' => 200],\n    ['type' => 'withdrawal', 'amount' => 150],\n    ['type' => 'deposit', 'amount' => 300],\n    ['type' => 'withdrawal', 'amount' => 50]\n];\n\n$finalBalance = calculateFinalBalance($initialBalance, $transactions);\necho \"Final Balance: $\" . $finalBalance;\n```"
  },
  {
    "task": "Develop a function to compute the surface area of a cylinder given its radius and height.",
    "code": "```php\nfunction computeCylinderSurfaceArea($radius, $height) {\n    $baseArea = pi() * $radius * $radius;\n    $sideArea = 2 * pi() * $radius * $height;\n    $surfaceArea = 2 * $baseArea + $sideArea;\n    return $surfaceArea;\n}\n```"
  },
  {
    "task": "Write a program that outputs the result of an arithmetic sequence given the first term and common difference.",
    "code": "```php\n<?php\n\nfunction arithmeticSequence($firstTerm, $commonDifference, $numberOfTerms) {\n    $sequence = [];\n    for ($i = 0; $i < $numberOfTerms; $i++) {\n        $sequence[] = $firstTerm + $i * $commonDifference;\n    }\n    return $sequence;\n}\n\n// Example usage:\n$firstTerm = 5;\n$commonDifference = 3;\n$numberOfTerms = 10;\n$sequence = arithmeticSequence($firstTerm, $commonDifference, $numberOfTerms);\nforeach ($sequence as $term) {\n    echo $term . PHP_EOL;\n}\n?>\n```"
  },
  {
    "task": "Implement a function that finds the average speed for a trip given total distance and time.",
    "code": "```php\nfunction calculateAverageSpeed($totalDistance, $totalTime) {\n    if ($totalTime == 0) {\n        return 0; // to avoid division by zero\n    }\n    return $totalDistance / $totalTime;\n}\n```"
  },
  {
    "task": "Create a function to calculate the total cost of a road trip given fuel cost per mile and distance.",
    "code": "```php\n<?php\nfunction calculateTotalCost($fuelCostPerMile, $distance) {\n    return $fuelCostPerMile * $distance;\n}\n?>\n```"
  },
  {
    "task": "Write a script that determines the number of tiles required to cover a floor area using arithmetic operations.",
    "code": "```php\n<?php\n\nfunction calculateTilesNeeded($floorLength, $floorWidth, $tileLength, $tileWidth) {\n    $floorArea = $floorLength * $floorWidth;\n    $tileArea = $tileLength * $tileWidth;\n    \n    if ($tileArea == 0) {\n        return 0;\n    }\n    \n    return ceil($floorArea / $tileArea);\n}\n\n// Example usage\n$floorLength = 10; // in meters\n$floorWidth = 8;   // in meters\n$tileLength = 0.5; // in meters\n$tileWidth = 0.5;  // in meters\n\n$tilesNeeded = calculateTilesNeeded($floorLength, $floorWidth, $tileLength, $tileWidth);\necho \"Number of tiles needed: \" . $tilesNeeded;\n\n?>\n```"
  },
  {
    "task": "Develop a program to calculate the amount of paint needed to cover a wall given its area.",
    "code": "```php\n<?php\n\nfunction calculatePaintNeeded($length, $width, $coveragePerLitre) {\n    $area = $length * $width;\n    $litresNeeded = $area / $coveragePerLitre;\n    return $litresNeeded;\n}\n\n$length = 10; // length of the wall in meters\n$width = 3; // width of the wall in meters\n$coveragePerLitre = 12; // square meters covered per litre of paint\n\n$paintNeeded = calculatePaintNeeded($length, $width, $coveragePerLitre);\necho \"Litres of paint needed: \" . $paintNeeded;\n```"
  },
  {
    "task": "Build a function that calculates the price per unit weight given total price and weight.",
    "code": "```php\nfunction calculatePricePerUnitWeight($totalPrice, $weight) {\n    return $totalPrice / $weight;\n}\n```"
  },
  {
    "task": "Implement a program that computes the volume of a rectangular prism given its dimensions.",
    "code": "```php\n<?php\n\nfunction calculateVolume($length, $width, $height) {\n    return $length * $width * $height;\n}\n\n$length = 5;\n$width = 3;\n$height = 2;\n\n$volume = calculateVolume($length, $width, $height);\necho \"The volume of the rectangular prism is: \" . $volume;\n?>\n```"
  },
  {
    "task": "Write a function to find the percentage increase or decrease between two numbers.",
    "code": "```php\n<?php\nfunction percentageChange($original, $new) {\n    if ($original == 0) {\n        return null; // Avoid division by zero\n    }\n    $change = $new - $original;\n    $percentageChange = ($change / $original) * 100;\n    return $percentageChange;\n}\n?>\n```"
  },
  {
    "task": "Create a program to determine the number of complete weeks within a specified number of days.",
    "code": "```php\nfunction completeWeeks($days) {\n    return intdiv($days, 7);\n}\n\n$days = 20; // Example input\necho completeWeeks($days);\n```"
  },
  {
    "task": "Design a function that calculates the break-even point for a business using cost and revenue data.",
    "code": "```php\n<?php\n\nfunction calculateBreakEvenPoint($fixedCosts, $variableCostPerUnit, $pricePerUnit) {\n    if ($pricePerUnit <= $variableCostPerUnit) {\n        return \"No Break-Even Point\";\n    }\n\n    $breakEvenUnits = $fixedCosts / ($pricePerUnit - $variableCostPerUnit);\n    return ceil($breakEvenUnits);\n}\n\n// Example usage\n$fixedCosts = 5000;\n$variableCostPerUnit = 30;\n$pricePerUnit = 50;\n\n$breakEvenPoint = calculateBreakEvenPoint($fixedCosts, $variableCostPerUnit, $pricePerUnit);\necho \"Break-Even Point: \" . $breakEvenPoint . \" units\";\n?>\n```"
  },
  {
    "task": "Develop a program that converts a total number of seconds into hours, minutes, and seconds.",
    "code": "```php\n<?php\n\nfunction convertSeconds($totalSeconds) {\n    $hours = floor($totalSeconds / 3600);\n    $minutes = floor(($totalSeconds % 3600) / 60);\n    $seconds = $totalSeconds % 60;\n    \n    return [\n        'hours' => $hours,\n        'minutes' => $minutes,\n        'seconds' => $seconds\n    ];\n}\n\n// Example usage\n$totalSeconds = 3661;\n$result = convertSeconds($totalSeconds);\necho \"Hours: \" . $result['hours'] . \", Minutes: \" . $result['minutes'] . \", Seconds: \" . $result['seconds'];\n?>\n```"
  },
  {
    "task": "Write a function that calculates the depreciation of an asset over time using arithmetic operations.",
    "code": "```php\n<?php\nfunction calculateDepreciation($initialValue, $residualValue, $usefulLife) {\n    if ($usefulLife <= 0) {\n        return 0;\n    }\n    return ($initialValue - $residualValue) / $usefulLife;\n}\n\n// Example usage:\n$initialValue = 10000;\n$residualValue = 1000;\n$usefulLife = 5;\n$annualDepreciation = calculateDepreciation($initialValue, $residualValue, $usefulLife);\necho \"Annual Depreciation: \" . $annualDepreciation;\n?>\n```"
  },
  {
    "task": "Create a program that computes the final exam grade needed to achieve a target course average.",
    "code": "```php\n<?php\n\nfunction calculateFinalExamGrade($currentAverage, $finalExamWeight, $targetAverage) {\n    $currentWeight = 1 - $finalExamWeight;\n    $finalExamGradeNeeded = ($targetAverage - ($currentAverage * $currentWeight)) / $finalExamWeight;\n    return $finalExamGradeNeeded;\n}\n\n// Example usage:\n$currentAverage = 85; // Current course average\n$finalExamWeight = 0.4; // Final exam weight (e.g., 40% of the course grade)\n$targetAverage = 90; // Target course average\n\n$finalExamGradeNeeded = calculateFinalExamGrade($currentAverage, $finalExamWeight, $targetAverage);\necho \"Final exam grade needed: \" . $finalExamGradeNeeded;\n```"
  },
  {
    "task": "Implement a function to calculate the total cost of groceries given prices and quantities of items.",
    "code": "```php\n<?php\n\nfunction calculateTotalCost($prices, $quantities) {\n    $totalCost = 0;\n    foreach ($prices as $item => $price) {\n        if (isset($quantities[$item])) {\n            $totalCost += $price * $quantities[$item];\n        }\n    }\n    return $totalCost;\n}\n\n// Example usage:\n$prices = ['apple' => 0.5, 'banana' => 0.3, 'milk' => 1.2];\n$quantities = ['apple' => 4, 'banana' => 6, 'milk' => 2];\n\necho calculateTotalCost($prices, $quantities);\n\n?>\n```"
  },
  {
    "task": "Write a script that determines the number of years required to double an investment using a fixed interest rate.",
    "code": "```php\n<?php\n\n$principal = 1000; // initial investment\n$rate = 0.05; // fixed interest rate (5%)\n$target = $principal * 2;\n$years = 0;\n\nwhile ($principal < $target) {\n    $principal += $principal * $rate;\n    $years++;\n}\n\necho \"Number of years to double the investment: $years\\n\";\n\n?>\n```"
  },
  {
    "task": "Develop a function that computes the harmonic mean of a set of numbers using division and addition.",
    "code": "```php\nfunction harmonicMean(array $numbers) {\n    $n = count($numbers);\n    if ($n === 0) {\n        return 0;\n    }\n    $sum = 0;\n    foreach ($numbers as $number) {\n        if ($number === 0) {\n            return 0;\n        }\n        $sum += 1 / $number;\n    }\n    return $n / $sum;\n}\n```"
  },
  {
    "task": "Create a program to find the sum of the squares of numbers in a given range.",
    "code": "```php\n<?php\n\nfunction sumOfSquares($start, $end) {\n    $sum = 0;\n    for ($i = $start; $i <= $end; $i++) {\n        $sum += $i * $i;\n    }\n    return $sum;\n}\n\n$start = 1; // Example starting point\n$end = 5;   // Example ending point\n\necho sumOfSquares($start, $end);\n\n?>\n```"
  },
  {
    "task": "Design a function that calculates the energy consumption of an appliance given power and usage time.",
    "code": "```php\nfunction calculateEnergyConsumption($power, $usageTime) {\n    return $power * $usageTime;\n}\n```"
  },
  {
    "task": "Write a program that simulates a simple stock portfolio using arithmetic operations for buying and selling.",
    "code": "```php\n<?php\n\nclass StockPortfolio {\n    private $stocks = [];\n\n    public function buyStock($ticker, $quantity, $pricePerShare) {\n        if (!isset($this->stocks[$ticker])) {\n            $this->stocks[$ticker] = ['quantity' => 0, 'totalCost' => 0];\n        }\n        $this->stocks[$ticker]['quantity'] += $quantity;\n        $this->stocks[$ticker]['totalCost'] += $quantity * $pricePerShare;\n    }\n\n    public function sellStock($ticker, $quantity, $pricePerShare) {\n        if (isset($this->stocks[$ticker]) && $this->stocks[$ticker]['quantity'] >= $quantity) {\n            $this->stocks[$ticker]['quantity'] -= $quantity;\n            $this->stocks[$ticker]['totalCost'] -= $quantity * $pricePerShare;\n            if ($this->stocks[$ticker]['quantity'] == 0) {\n                unset($this->stocks[$ticker]);\n            }\n        } else {\n            echo \"Not enough stock to sell.\\n\";\n        }\n    }\n\n    public function getPortfolioValue() {\n        $totalValue = 0;\n        foreach ($this->stocks as $ticker => $data) {\n            $totalValue += $data['totalCost'];\n        }\n        return $totalValue;\n    }\n\n    public function displayPortfolio() {\n        foreach ($this->stocks as $ticker => $data) {\n            echo \"Ticker: $ticker, Quantity: {$data['quantity']}, Total Cost: {$data['totalCost']}\\n\";\n        }\n        echo \"Total Portfolio Value: \" . $this->getPortfolioValue() . \"\\n\";\n    }\n}\n\n// Example usage:\n$portfolio = new StockPortfolio();\n$portfolio->buyStock('AAPL', 10, 150);\n$portfolio->buyStock('GOOGL', 5, 2800);\n$portfolio->sellStock('AAPL', 5, 150);\n$portfolio->displayPortfolio();\n```"
  },
  {
    "task": "Implement a function to calculate the gravitational force between two masses using multiplication and division.",
    "code": "```php\n<?php\n\nfunction calculateGravitationalForce($mass1, $mass2, $distance) {\n    $gravitationalConstant = 6.67430e-11; // in m^3 kg^-1 s^-2\n    return ($gravitationalConstant * $mass1 * $mass2) / ($distance * $distance);\n}\n```"
  },
  {
    "task": "Create a function that determines the price per square foot of a piece of real estate.",
    "code": "```php\n<?php\n\nfunction pricePerSquareFoot($totalPrice, $totalSquareFeet) {\n    if ($totalSquareFeet == 0) {\n        return 0; // Prevent division by zero\n    }\n    return $totalPrice / $totalSquareFeet;\n}\n\n$totalPrice = 500000;\n$totalSquareFeet = 2000;\n\necho pricePerSquareFoot($totalPrice, $totalSquareFeet);\n\n?>\n```"
  },
  {
    "task": "Write a script to compute the total interest earned on a savings account with monthly compounding.",
    "code": "```php\n<?php\n\n$principal = 1000; // Initial amount of money\n$annualRate = 0.05; // Annual interest rate\n$years = 5; // Number of years\n$months = $years * 12; // Total number of months\n$monthlyRate = $annualRate / 12; // Monthly interest rate\n\n$totalAmount = $principal * pow((1 + $monthlyRate), $months);\n$totalInterest = $totalAmount - $principal;\n\necho \"Total interest earned: $\" . number_format($totalInterest, 2);\n\n?>\n```"
  },
  {
    "task": "Develop a program that calculates the calories burned during exercise given MET value and duration.",
    "code": "```php\n<?php\nfunction calculateCaloriesBurned($weightKg, $metValue, $durationMinutes) {\n    $caloriesBurned = ($metValue * 3.5 * $weightKg / 200) * $durationMinutes;\n    return $caloriesBurned;\n}\n\n// Example usage\n$weightKg = 70; // User's weight in kilograms\n$metValue = 8;  // MET value for the exercise\n$durationMinutes = 30; // Duration of exercise in minutes\n\n$calories = calculateCaloriesBurned($weightKg, $metValue, $durationMinutes);\necho \"Calories burned: \" . $calories;\n?>\n```"
  },
  {
    "task": "Build a function that converts a speed from miles per hour to kilometers per hour using multiplication.",
    "code": "```php\nfunction mphToKph($mph) {\n    return $mph * 1.60934;\n}\n```"
  },
  {
    "task": "Implement a program to find the number of days between two dates using arithmetic operations.",
    "code": "```php\n<?php\n\nfunction daysBetweenDates($date1, $date2) {\n    $start = strtotime($date1);\n    $end = strtotime($date2);\n    $differenceInSeconds = abs($end - $start);\n    $differenceInDays = $differenceInSeconds / (60 * 60 * 24);\n    return $differenceInDays;\n}\n\n$date1 = '2023-10-01';\n$date2 = '2023-10-15';\necho daysBetweenDates($date1, $date2);\n\n?>\n```"
  },
  {
    "task": "Write a function to calculate the area of a circle given its radius.",
    "code": "```php\nfunction calculateCircleArea($radius) {\n    return pi() * $radius * $radius;\n}\n```"
  },
  {
    "task": "Create a program that determines the total distance driven given trips with varying speeds and durations.",
    "code": "```php\n<?php\n\nfunction calculateTotalDistance($trips) {\n    $totalDistance = 0;\n    foreach ($trips as $trip) {\n        $speed = $trip['speed'];\n        $duration = $trip['duration'];\n        $distance = $speed * $duration;\n        $totalDistance += $distance;\n    }\n    return $totalDistance;\n}\n\n// Example usage:\n$trips = [\n    ['speed' => 60, 'duration' => 2],\n    ['speed' => 80, 'duration' => 1.5],\n    ['speed' => 50, 'duration' => 3],\n];\n\n$totalDistance = calculateTotalDistance($trips);\necho \"Total Distance Driven: \" . $totalDistance . \" km\";\n\n?>\n```"
  },
  {
    "task": "Design a function to compute the final price of an item after applying multiple discounts sequentially.",
    "code": "```php\n<?php\nfunction computeFinalPrice($initialPrice, $discounts) {\n    $finalPrice = $initialPrice;\n    foreach ($discounts as $discount) {\n        $finalPrice -= $finalPrice * ($discount / 100);\n    }\n    return $finalPrice;\n}\n\n// Example usage:\n$initialPrice = 100;\n$discounts = [10, 20]; // 10% then 20%\n$finalPrice = computeFinalPrice($initialPrice, $discounts);\necho $finalPrice;\n?>\n```"
  },
  {
    "task": "Write a script that calculates the number of bricks needed to build a wall given wall dimensions and brick size.",
    "code": "```php\n<?php\n\nfunction calculateBricks($wallHeight, $wallWidth, $brickHeight, $brickWidth) {\n    $wallArea = $wallHeight * $wallWidth;\n    $brickArea = $brickHeight * $brickWidth;\n    \n    if ($brickArea == 0) {\n        throw new Exception('Brick dimensions must be greater than zero.');\n    }\n    \n    return ceil($wallArea / $brickArea);\n}\n\n// Example usage:\n$wallHeight = 10; // Wall height in meters\n$wallWidth = 20;  // Wall width in meters\n$brickHeight = 0.2; // Brick height in meters\n$brickWidth = 0.4;  // Brick width in meters\n\ntry {\n    $bricksNeeded = calculateBricks($wallHeight, $wallWidth, $brickHeight, $brickWidth);\n    echo \"Number of bricks needed: $bricksNeeded\";\n} catch (Exception $e) {\n    echo 'Error: ' . $e->getMessage();\n}\n\n?>\n```"
  },
  {
    "task": "Develop a program to determine the number of pizzas required for a party given the number of people and slices per pizza.",
    "code": "```php\n<?php\n\nfunction pizzasRequired($numberOfPeople, $slicesPerPizza, $slicesPerPerson) {\n    $totalSlicesNeeded = $numberOfPeople * $slicesPerPerson;\n    $pizzas = ceil($totalSlicesNeeded / $slicesPerPizza);\n    return $pizzas;\n}\n\n$numberOfPeople = 20;\n$slicesPerPizza = 8;\n$slicesPerPerson = 3;\n\necho \"Pizzas required: \" . pizzasRequired($numberOfPeople, $slicesPerPizza, $slicesPerPerson);\n\n?>\n```"
  },
  {
    "task": "Implement a function that calculates the total cost of a meal including tax and tip.",
    "code": "```php\n<?php\n\nfunction calculateTotalCost($mealCost, $taxRate, $tipRate) {\n    $taxAmount = $mealCost * $taxRate / 100;\n    $tipAmount = $mealCost * $tipRate / 100;\n    $totalCost = $mealCost + $taxAmount + $tipAmount;\n    return $totalCost;\n}\n\n$mealCost = 50.00; // Example meal cost\n$taxRate = 10;     // Example tax rate as a percentage\n$tipRate = 15;     // Example tip rate as a percentage\n\n$totalCost = calculateTotalCost($mealCost, $taxRate, $tipRate);\necho \"The total cost of the meal is: $\" . number_format($totalCost, 2);\n\n?>\n```"
  },
  {
    "task": "Create a program to compute the average rainfall over a period using addition and division.",
    "code": "```php\n<?php\n\nfunction calculateAverageRainfall($rainfalls) {\n    $totalRainfall = 0;\n    $numberOfPeriods = count($rainfalls);\n\n    foreach ($rainfalls as $rainfall) {\n        $totalRainfall += $rainfall;\n    }\n\n    if ($numberOfPeriods > 0) {\n        return $totalRainfall / $numberOfPeriods;\n    } else {\n        return 0;\n    }\n}\n\n$rainfalls = [20, 30, 25, 40, 10];\n$averageRainfall = calculateAverageRainfall($rainfalls);\necho \"Average Rainfall: \" . $averageRainfall;\n\n?>\n```"
  },
  {
    "task": "Write a function that determines the number of batches needed to produce a specific quantity of a product.",
    "code": "```php\n<?php\n\nfunction calculateBatches($totalQuantity, $batchSize) {\n    if ($batchSize <= 0) {\n        return null; // Batch size must be greater than zero\n    }\n    return ceil($totalQuantity / $batchSize);\n}\n\n// Example usage\n$totalQuantity = 1000;\n$batchSize = 250;\n$numberOfBatches = calculateBatches($totalQuantity, $batchSize);\necho $numberOfBatches;\n\n?>\n```"
  },
  {
    "task": "Design a program to calculate the total energy consumption of a household given individual appliance usage.",
    "code": "```php\n<?php\n\nfunction calculateTotalEnergyConsumption($applianceUsages) {\n    $totalEnergyConsumption = 0;\n\n    foreach ($applianceUsages as $appliance => $usage) {\n        $totalEnergyConsumption += $usage;\n    }\n\n    return $totalEnergyConsumption;\n}\n\n// Example usage\n$applianceUsages = [\n    'fridge' => 150, // kWh\n    'washing_machine' => 200, // kWh\n    'oven' => 100, // kWh\n    'tv' => 50, // kWh\n];\n\n$totalConsumption = calculateTotalEnergyConsumption($applianceUsages);\necho \"Total Energy Consumption: \" . $totalConsumption . \" kWh\";\n\n?>\n```"
  },
  {
    "task": "Develop a function that computes the body surface area of a person using height and weight.",
    "code": "```php\n<?php\n\nfunction calculateBodySurfaceArea($height, $weight) {\n    return sqrt(($height * $weight) / 3600);\n}\n\n// Example usage:\n$height = 170; // in centimeters\n$weight = 70;  // in kilograms\n\n$bsa = calculateBodySurfaceArea($height, $weight);\necho \"Body Surface Area: \" . $bsa . \" m\u00b2\";\n```"
  },
  {
    "task": "Build a script to calculate the monthly payment on a mortgage using principal, interest rate, and term.",
    "code": "```php\n<?php\n\nfunction calculateMonthlyPayment($principal, $annualInterestRate, $termInYears) {\n    $monthlyInterestRate = $annualInterestRate / 12 / 100;\n    $numberOfPayments = $termInYears * 12;\n    \n    $monthlyPayment = $principal * $monthlyInterestRate * pow(1 + $monthlyInterestRate, $numberOfPayments) / (pow(1 + $monthlyInterestRate, $numberOfPayments) - 1);\n    \n    return $monthlyPayment;\n}\n\n// Example usage\n$principal = 300000; // Principal amount\n$annualInterestRate = 3.5; // Annual interest rate in percentage\n$termInYears = 30; // Term in years\n\n$monthlyPayment = calculateMonthlyPayment($principal, $annualInterestRate, $termInYears);\necho \"Monthly Payment: $\" . number_format($monthlyPayment, 2);\n\n?>\n```"
  },
  {
    "task": "Implement a function to find the volume of a cone given its height and radius.",
    "code": "```php\nfunction volumeOfCone($radius, $height) {\n    return (1/3) * pi() * pow($radius, 2) * $height;\n}\n```"
  },
  {
    "task": "Write a program that estimates the cost of a trip using fuel efficiency and distance.",
    "code": "```php\n<?php\n\nfunction estimateTripCost($distance, $fuelEfficiency, $fuelCostPerUnit) {\n    $fuelNeeded = $distance / $fuelEfficiency;\n    $totalCost = $fuelNeeded * $fuelCostPerUnit;\n    return $totalCost;\n}\n\n// Example usage:\n$distance = 300; // kilometers\n$fuelEfficiency = 15; // kilometers per liter\n$fuelCostPerUnit = 1.2; // cost per liter\n\n$estimatedCost = estimateTripCost($distance, $fuelEfficiency, $fuelCostPerUnit);\necho \"Estimated cost of the trip: $\" . number_format($estimatedCost, 2);\n?>\n```"
  }
]