[
  {
    "task": "Write a program that prints numbers from 1 to 10 using a for loop.",
    "code": "```php\n<?php\n\nfor ($i = 1; $i <= 10; $i++) {\n    echo $i . \"\\n\";\n}\n\n?>\n```"
  },
  {
    "task": "Create a loop that iterates over an array of names and prints each name.",
    "code": "```php\n<?php\n\n$names = [\"Alice\", \"Bob\", \"Charlie\", \"Diana\", \"Eve\"];\n\nfor ($i = 0; $i < count($names); $i++) {\n    echo $names[$i] . \"\\n\";\n}\n\n?>\n```"
  },
  {
    "task": "Design a for loop to calculate the factorial of a given number.",
    "code": "```php\n<?php\nfunction factorial($number) {\n    $result = 1;\n    for ($i = 1; $i <= $number; $i++) {\n        $result *= $i;\n    }\n    return $result;\n}\n\n$number = 5; // Example number\necho \"Factorial of $number is \" . factorial($number);\n?>\n```"
  },
  {
    "task": "Implement a program that uses a for loop to sum all even numbers between 1 and 100.",
    "code": "```php\n<?php\n$sum = 0;\nfor ($i = 2; $i <= 100; $i += 2) {\n    $sum += $i;\n}\necho $sum;\n?>\n```"
  },
  {
    "task": "Use a for loop to generate and print the Fibonacci sequence up to 20 terms.",
    "code": "```php\n<?php\n$n = 20;\n$first = 0;\n$second = 1;\n\nfor ($i = 0; $i < $n; $i++) {\n    echo $first . \" \";\n    $next = $first + $second;\n    $first = $second;\n    $second = $next;\n}\n?>\n```"
  },
  {
    "task": "Construct a for loop that prints the multiplication table for a given number.",
    "code": "```php\n<?php\n$number = 5; // Example number for the multiplication table\nfor ($i = 1; $i <= 10; $i++) {\n    echo $number . \" x \" . $i . \" = \" . ($number * $i) . \"\\n\";\n}\n?>\n```"
  },
  {
    "task": "Write code to iterate through a list of student grades and print only those above a certain threshold.",
    "code": "```php\n$grades = [85, 78, 92, 65, 88];\n$threshold = 80;\n\nfor ($i = 0; $i < count($grades); $i++) {\n    if ($grades[$i] > $threshold) {\n        echo $grades[$i] . \"\\n\";\n    }\n}\n```"
  },
  {
    "task": "Create a for loop that appends the square of numbers 1 to 10 to a list.",
    "code": "```php\n$squares = [];\nfor ($i = 1; $i <= 10; $i++) {\n    $squares[] = $i * $i;\n}\n```"
  },
  {
    "task": "Develop a for loop that reverses a given string.",
    "code": "```php\nfunction reverseString($str) {\n    $reversed = '';\n    for ($i = strlen($str) - 1; $i >= 0; $i--) {\n        $reversed .= $str[$i];\n    }\n    return $reversed;\n}\n\n$originalString = \"example\";\n$reversedString = reverseString($originalString);\necho $reversedString;\n```"
  },
  {
    "task": "Build a program that uses a for loop to print all elements in a 2D matrix.",
    "code": "```php\n<?php\n$matrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\n\nfor ($i = 0; $i < count($matrix); $i++) {\n    for ($j = 0; $j < count($matrix[$i]); $j++) {\n        echo $matrix[$i][$j] . \" \";\n    }\n    echo \"\\n\";\n}\n?>\n```"
  },
  {
    "task": "Use a for loop to find the maximum value in an array of integers.",
    "code": "```php\n<?php\n$numbers = [3, 7, 1, 9, 4, 5];\n$maxValue = $numbers[0];\n\nfor ($i = 1; $i < count($numbers); $i++) {\n    if ($numbers[$i] > $maxValue) {\n        $maxValue = $numbers[$i];\n    }\n}\n\necho \"The maximum value is: $maxValue\";\n?>\n```"
  },
  {
    "task": "Write a program that uses a for loop to print the characters of a string, one per line.",
    "code": "```php\n<?php\n\n$string = \"Hello, World!\";\n$length = strlen($string);\n\nfor ($i = 0; $i < $length; $i++) {\n    echo $string[$i] . \"\\n\";\n}\n\n?>\n```"
  },
  {
    "task": "Create a for loop that counts the number of vowels in a given sentence.",
    "code": "```php\n<?php\n$sentence = \"This is an example sentence.\";\n$vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n$vowelCount = 0;\n\nfor ($i = 0; $i < strlen($sentence); $i++) {\n    if (in_array($sentence[$i], $vowels)) {\n        $vowelCount++;\n    }\n}\n\necho \"Number of vowels: \" . $vowelCount;\n?>\n```"
  },
  {
    "task": "Implement a for loop to check if a number is prime by testing divisibility.",
    "code": "```php\nfunction isPrime($number) {\n    if ($number <= 1) {\n        return false;\n    }\n    for ($i = 2; $i <= sqrt($number); $i++) {\n        if ($number % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\n$number = 29; // Example number\nif (isPrime($number)) {\n    echo \"$number is a prime number.\";\n} else {\n    echo \"$number is not a prime number.\";\n}\n```"
  },
  {
    "task": "Design a for loop that prints a pyramid pattern of asterisks with a given height.",
    "code": "```php\n<?php\n$height = 5; // You can set the desired height\n\nfor ($i = 1; $i <= $height; $i++) {\n    for ($j = $i; $j < $height; $j++) {\n        echo \" \";\n    }\n    for ($k = 1; $k <= (2 * $i - 1); $k++) {\n        echo \"*\";\n    }\n    echo \"\\n\";\n}\n?>\n```"
  },
  {
    "task": "Write a program that uses a for loop to calculate the sum of digits of a number.",
    "code": "```php\nfunction sumOfDigits($number) {\n    $sum = 0;\n    $numberString = strval($number);\n    $length = strlen($numberString);\n\n    for ($i = 0; $i < $length; $i++) {\n        $sum += intval($numberString[$i]);\n    }\n\n    return $sum;\n}\n\n$number = 12345;\necho sumOfDigits($number);\n```"
  },
  {
    "task": "Construct a for loop to flatten a list of lists into a single list.",
    "code": "```php\nfunction flatten($list_of_lists) {\n    $flattened_list = [];\n    for ($i = 0; $i < count($list_of_lists); $i++) {\n        for ($j = 0; $j < count($list_of_lists[$i]); $j++) {\n            $flattened_list[] = $list_of_lists[$i][$j];\n        }\n    }\n    return $flattened_list;\n}\n\n// Example usage:\n$list_of_lists = [[1, 2, 3], [4, 5], [6, 7, 8, 9]];\n$flattened_list = flatten($list_of_lists);\nprint_r($flattened_list);\n```"
  },
  {
    "task": "Use a for loop to generate a list of random numbers and print them.",
    "code": "```php\n<?php\n\nfor ($i = 0; $i < 10; $i++) {\n    echo rand() . \"\\n\";\n}\n\n?>\n```"
  },
  {
    "task": "Create a for loop that iterates through a dictionary and prints its keys and values.",
    "code": "```php\n<?php\n$dictionary = [\n    \"apple\" => \"fruit\",\n    \"carrot\" => \"vegetable\",\n    \"chicken\" => \"meat\"\n];\n\nforeach ($dictionary as $key => $value) {\n    echo \"Key: $key, Value: $value\\n\";\n}\n?>\n```"
  },
  {
    "task": "Develop a for loop that counts down from 10 to 1 and prints each number.",
    "code": "```php\nfor ($i = 10; $i >= 1; $i--) {\n    echo $i . \"\\n\";\n}\n```"
  },
  {
    "task": "Write code to multiply each element in an array by 2 using a for loop.",
    "code": "```php\n<?php\n\n$array = [1, 2, 3, 4, 5];\n\nfor ($i = 0; $i < count($array); $i++) {\n    $array[$i] *= 2;\n}\n\nprint_r($array);\n\n?>\n```"
  },
  {
    "task": "Create a for loop that calculates the average of numbers in a list.",
    "code": "```php\n$numbers = [10, 20, 30, 40, 50];\n$sum = 0;\n$count = count($numbers);\n\nfor ($i = 0; $i < $count; $i++) {\n    $sum += $numbers[$i];\n}\n\n$average = $sum / $count;\necho $average;\n```"
  },
  {
    "task": "Implement a for loop to find duplicate elements in an array.",
    "code": "```php\n<?php\n\nfunction findDuplicates($array) {\n    $duplicates = [];\n    $count = count($array);\n\n    for ($i = 0; $i < $count; $i++) {\n        for ($j = $i + 1; $j < $count; $j++) {\n            if ($array[$i] === $array[$j] && !in_array($array[$i], $duplicates)) {\n                $duplicates[] = $array[$i];\n            }\n        }\n    }\n\n    return $duplicates;\n}\n\n$array = [1, 2, 3, 4, 2, 5, 1, 3, 6];\n$duplicates = findDuplicates($array);\nprint_r($duplicates);\n\n?>\n```"
  },
  {
    "task": "Design a for loop that removes all occurrences of a specific element from a list.",
    "code": "```php\n<?php\nfunction removeElement($list, $elementToRemove) {\n    $result = [];\n    for ($i = 0; $i < count($list); $i++) {\n        if ($list[$i] !== $elementToRemove) {\n            $result[] = $list[$i];\n        }\n    }\n    return $result;\n}\n\n$list = [1, 2, 3, 4, 2, 5];\n$elementToRemove = 2;\n$filteredList = removeElement($list, $elementToRemove);\nprint_r($filteredList);\n?>\n```"
  },
  {
    "task": "Use a for loop to simulate rolling a dice 100 times and count the occurrences of each face.",
    "code": "```php\n<?php\n\n$occurrences = array_fill(1, 6, 0);\n\nfor ($i = 0; $i < 100; $i++) {\n    $roll = rand(1, 6);\n    $occurrences[$roll]++;\n}\n\nprint_r($occurrences);\n\n?>\n```"
  },
  {
    "task": "Write a for loop that prints all the prime numbers between 1 and 50.",
    "code": "```php\n<?php\n\nfunction isPrime($num) {\n    if ($num <= 1) return false;\n    for ($i = 2; $i <= sqrt($num); $i++) {\n        if ($num % $i == 0) return false;\n    }\n    return true;\n}\n\nfor ($i = 1; $i <= 50; $i++) {\n    if (isPrime($i)) {\n        echo $i . \"\\n\";\n    }\n}\n?>\n```"
  },
  {
    "task": "Develop a for loop that extracts all the uppercase letters from a string.",
    "code": "```php\n$string = \"Hello, World! This is a Test String.\";\n$uppercaseLetters = '';\n\nfor ($i = 0; $i < strlen($string); $i++) {\n    if (ctype_upper($string[$i])) {\n        $uppercaseLetters .= $string[$i];\n    }\n}\n\necho $uppercaseLetters;\n```"
  },
  {
    "task": "Create a for loop that checks if a list is sorted in ascending order.",
    "code": "```php\nfunction isSortedAscending($list) {\n    for ($i = 0; $i < count($list) - 1; $i++) {\n        if ($list[$i] > $list[$i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// Example usage:\n$list = [1, 2, 3, 4, 5];\n$isSorted = isSortedAscending($list);\necho $isSorted ? 'Sorted' : 'Not sorted';\n```"
  },
  {
    "task": "Implement a for loop to generate a list of the first 10 square numbers.",
    "code": "```php\n<?php\n\n$squares = [];\nfor ($i = 1; $i <= 10; $i++) {\n    $squares[] = $i * $i;\n}\n\nprint_r($squares);\n\n?>\n```"
  },
  {
    "task": "Write code to print all the elements of a list that are greater than a given number using a for loop.",
    "code": "```php\n$list = [5, 10, 15, 20, 25];\n$givenNumber = 12;\n\nfor ($i = 0; $i < count($list); $i++) {\n    if ($list[$i] > $givenNumber) {\n        echo $list[$i] . \"\\n\";\n    }\n}\n```"
  },
  {
    "task": "Construct a for loop that finds the smallest number in an array.",
    "code": "```php\n$array = [3, 7, 1, 9, 4];\n$smallest = $array[0];\n\nfor ($i = 1; $i < count($array); $i++) {\n    if ($array[$i] < $smallest) {\n        $smallest = $array[$i];\n    }\n}\n\necho $smallest;\n```"
  },
  {
    "task": "Develop a for loop that prints the first N lines of Pascal's Triangle.",
    "code": "```php\n<?php\nfunction generatePascalsTriangle($n) {\n    $triangle = [];\n    for ($line = 0; $line < $n; $line++) {\n        $row = [];\n        for ($i = 0; $i <= $line; $i++) {\n            if ($i === 0 || $i === $line) {\n                $row[] = 1;\n            } else {\n                $row[] = $triangle[$line - 1][$i - 1] + $triangle[$line - 1][$i];\n            }\n        }\n        $triangle[] = $row;\n    }\n    return $triangle;\n}\n\nfunction printPascalsTriangle($triangle) {\n    foreach ($triangle as $row) {\n        echo implode(' ', $row) . \"\\n\";\n    }\n}\n\n$n = 5; // Change this to the desired number of lines\n$pascalsTriangle = generatePascalsTriangle($n);\nprintPascalsTriangle($pascalsTriangle);\n?>\n```"
  },
  {
    "task": "Create a for loop that calculates the product of all elements in a list.",
    "code": "```php\n$list = [2, 3, 5, 7]; // Example list\n$product = 1;\n\nfor ($i = 0; $i < count($list); $i++) {\n    $product *= $list[$i];\n}\n\necho $product;\n```"
  },
  {
    "task": "Use a for loop to print numbers from 1 to 100, but replace multiples of 3 with 'Fizz'.",
    "code": "```php\nfor ($i = 1; $i <= 100; $i++) {\n    if ($i % 3 == 0) {\n        echo \"Fizz\\n\";\n    } else {\n        echo $i . \"\\n\";\n    }\n}\n```"
  },
  {
    "task": "Write a for loop that iterates over a string and counts the number of words.",
    "code": "```php\n$string = \"This is a sample string with several words.\";\n$wordCount = 0;\n$inWord = false;\n\nfor ($i = 0; $i < strlen($string); $i++) {\n    if (ctype_space($string[$i])) {\n        $inWord = false;\n    } else {\n        if (!$inWord) {\n            $wordCount++;\n            $inWord = true;\n        }\n    }\n}\n\necho $wordCount;\n```"
  },
  {
    "task": "Design a for loop that prints numbers from 1 to 50, but skips numbers divisible by 5.",
    "code": "```php\n<?php\nfor ($i = 1; $i <= 50; $i++) {\n    if ($i % 5 == 0) {\n        continue;\n    }\n    echo $i . \"\\n\";\n}\n?>\n```"
  },
  {
    "task": "Implement a for loop that prints a checkerboard pattern of asterisks.",
    "code": "```php\n<?php\n$size = 8; // Define the size of the checkerboard\nfor ($i = 0; $i < $size; $i++) {\n    for ($j = 0; $j < $size; $j++) {\n        if (($i + $j) % 2 == 0) {\n            echo \"*\";\n        } else {\n            echo \" \";\n        }\n    }\n    echo \"\\n\";\n}\n?>\n```"
  },
  {
    "task": "Create a for loop that finds the index of a target value in a list.",
    "code": "```php\nfunction findIndexOfTarget($list, $target) {\n    for ($i = 0; $i < count($list); $i++) {\n        if ($list[$i] === $target) {\n            return $i;\n        }\n    }\n    return -1;\n}\n\n$list = [10, 20, 30, 40, 50];\n$target = 30;\necho findIndexOfTarget($list, $target);\n```"
  },
  {
    "task": "Use a for loop to concatenate a list of strings into a single string.",
    "code": "```php\n<?php\n$strings = [\"Hello\", \" \", \"world\", \"!\"];\n$result = \"\";\n\nfor ($i = 0; $i < count($strings); $i++) {\n    $result .= $strings[$i];\n}\n\necho $result;\n?>\n```"
  },
  {
    "task": "Develop a for loop that rotates a list to the right by a given number of positions.",
    "code": "```php\nfunction rotateRight($array, $positions) {\n    $n = count($array);\n    $positions = $positions % $n;\n    $rotatedArray = [];\n\n    for ($i = 0; $i < $n; $i++) {\n        $rotatedArray[($i + $positions) % $n] = $array[$i];\n    }\n\n    ksort($rotatedArray);\n    return array_values($rotatedArray);\n}\n\n// Example usage\n$array = [1, 2, 3, 4, 5];\n$positions = 2;\n$result = rotateRight($array, $positions);\nprint_r($result);\n```"
  },
  {
    "task": "Write code that uses a for loop to insert an element into a sorted list while maintaining order.",
    "code": "```php\nfunction insertIntoSortedList($sortedList, $element) {\n    $inserted = false;\n    $result = [];\n\n    for ($i = 0; $i < count($sortedList); $i++) {\n        if (!$inserted && $element < $sortedList[$i]) {\n            $result[] = $element;\n            $inserted = true;\n        }\n        $result[] = $sortedList[$i];\n    }\n\n    if (!$inserted) {\n        $result[] = $element;\n    }\n    \n    return $result;\n}\n\n$sortedList = [1, 3, 5, 7];\n$element = 4;\n$newList = insertIntoSortedList($sortedList, $element);\nprint_r($newList);\n```"
  },
  {
    "task": "Implement a for loop that counts the frequency of each character in a string.",
    "code": "```php\n<?php\n\nfunction countCharacterFrequency($string) {\n    $frequency = [];\n    $length = strlen($string);\n\n    for ($i = 0; $i < $length; $i++) {\n        $char = $string[$i];\n        if (!isset($frequency[$char])) {\n            $frequency[$char] = 0;\n        }\n        $frequency[$char]++;\n    }\n\n    return $frequency;\n}\n\n$string = \"example\";\n$frequency = countCharacterFrequency($string);\nprint_r($frequency);\n\n?>\n```"
  },
  {
    "task": "Create a for loop that prints all subsets of a given set.",
    "code": "```php\nfunction printSubsets($set) {\n    $n = count($set);\n    $totalSubsets = 1 << $n; // 2^n subsets\n\n    for ($i = 0; $i < $totalSubsets; ++$i) {\n        echo '{';\n        $first = true;\n        for ($j = 0; $j < $n; ++$j) {\n            if ($i & (1 << $j)) {\n                if (!$first) {\n                    echo ', ';\n                }\n                echo $set[$j];\n                $first = false;\n            }\n        }\n        echo \"}\\n\";\n    }\n}\n\n// Example usage\n$set = ['a', 'b', 'c'];\nprintSubsets($set);\n```"
  },
  {
    "task": "Design a for loop to generate all permutations of a string.",
    "code": "```php\nfunction permute($str, $l, $r) {\n    if ($l == $r) {\n        echo $str . \"\\n\";\n    } else {\n        for ($i = $l; $i <= $r; $i++) {\n            $str = swap($str, $l, $i);\n            permute($str, $l + 1, $r);\n            $str = swap($str, $l, $i); // backtrack\n        }\n    }\n}\n\nfunction swap($str, $i, $j) {\n    $arr = str_split($str);\n    $temp = $arr[$i];\n    $arr[$i] = $arr[$j];\n    $arr[$j] = $temp;\n    return implode($arr);\n}\n\n$str = \"ABC\";\n$n = strlen($str);\npermute($str, 0, $n - 1);\n```"
  },
  {
    "task": "Write a for loop that sorts an array in descending order.",
    "code": "```php\n$array = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5];\n\nfor ($i = 0; $i < count($array) - 1; $i++) {\n    for ($j = 0; $j < count($array) - $i - 1; $j++) {\n        if ($array[$j] < $array[$j + 1]) {\n            $temp = $array[$j];\n            $array[$j] = $array[$j + 1];\n            $array[$j + 1] = $temp;\n        }\n    }\n}\n```"
  },
  {
    "task": "Use a for loop to generate a sequence of random characters and print them.",
    "code": "```php\n<?php\n$characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n$length = 10;\n$randomString = '';\n\nfor ($i = 0; $i < $length; $i++) {\n    $randomIndex = rand(0, strlen($characters) - 1);\n    $randomString .= $characters[$randomIndex];\n}\n\necho $randomString;\n?>\n```"
  },
  {
    "task": "Construct a for loop that finds the common elements between two lists.",
    "code": "```php\n$list1 = [1, 2, 3, 4, 5];\n$list2 = [3, 4, 5, 6, 7];\n$commonElements = [];\n\nfor ($i = 0; $i < count($list1); $i++) {\n    for ($j = 0; $j < count($list2); $j++) {\n        if ($list1[$i] === $list2[$j]) {\n            $commonElements[] = $list1[$i];\n            break;\n        }\n    }\n}\n\nprint_r($commonElements);\n```"
  },
  {
    "task": "Develop a for loop to calculate and print the cumulative sum of a list.",
    "code": "```php\n$list = [1, 2, 3, 4, 5];\n$cumulativeSum = 0;\n\nfor ($i = 0; $i < count($list); $i++) {\n    $cumulativeSum += $list[$i];\n    echo \"Cumulative sum after index $i: $cumulativeSum\\n\";\n}\n```"
  },
  {
    "task": "Create a for loop that prints a diamond pattern using asterisks.",
    "code": "```php\n<?php\n\nfunction printDiamond($n) {\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n - $i - 1; $j++) {\n            echo \" \";\n        }\n        for ($j = 0; $j < 2 * $i + 1; $j++) {\n            echo \"*\";\n        }\n        echo \"\\n\";\n    }\n    for ($i = $n - 2; $i >= 0; $i--) {\n        for ($j = 0; $j < $n - $i - 1; $j++) {\n            echo \" \";\n        }\n        for ($j = 0; $j < 2 * $i + 1; $j++) {\n            echo \"*\";\n        }\n        echo \"\\n\";\n    }\n}\n\nprintDiamond(5);\n?>\n```"
  },
  {
    "task": "Write a for loop that simulates a countdown timer from a specified number of seconds.",
    "code": "```php\n$seconds = 10; // specify the number of seconds for the countdown\nfor ($i = $seconds; $i >= 0; $i--) {\n    echo \"Time remaining: $i seconds\\n\";\n    sleep(1); // pause for 1 second between each iteration\n}\n```"
  },
  {
    "task": "Use a for loop to print the transpose of a matrix.",
    "code": "```php\n$matrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\n\n$rows = count($matrix);\n$cols = count($matrix[0]);\n\nfor ($i = 0; $i < $cols; $i++) {\n    for ($j = 0; $j < $rows; $j++) {\n        echo $matrix[$j][$i] . \" \";\n    }\n    echo \"\\n\";\n}\n```"
  },
  {
    "task": "Implement a for loop that reverses the order of words in a sentence.",
    "code": "```php\n$sentence = \"This is a test sentence\";\n$words = explode(\" \", $sentence);\n$reversedWords = [];\n\nfor ($i = count($words) - 1; $i >= 0; $i--) {\n    $reversedWords[] = $words[$i];\n}\n\n$reversedSentence = implode(\" \", $reversedWords);\necho $reversedSentence;\n```"
  },
  {
    "task": "Create a for loop that deletes elements from a list that are less than a given value.",
    "code": "```php\n<?php\n\nfunction deleteElementsLessThan(&$list, $value) {\n    for ($i = 0; $i < count($list); $i++) {\n        if ($list[$i] < $value) {\n            array_splice($list, $i, 1);\n            $i--;\n        }\n    }\n}\n\n$list = [5, 3, 9, 1, 6];\n$value = 4;\ndeleteElementsLessThan($list, $value);\n\nprint_r($list);\n\n?>\n```"
  },
  {
    "task": "Design a for loop to merge two sorted lists into a single sorted list.",
    "code": "```php\nfunction mergeSortedLists($list1, $list2) {\n    $mergedList = [];\n    $i = 0;\n    $j = 0;\n    $len1 = count($list1);\n    $len2 = count($list2);\n\n    for (; $i < $len1 && $j < $len2;) {\n        if ($list1[$i] <= $list2[$j]) {\n            $mergedList[] = $list1[$i++];\n        } else {\n            $mergedList[] = $list2[$j++];\n        }\n    }\n\n    for (; $i < $len1; $i++) {\n        $mergedList[] = $list1[$i];\n    }\n\n    for (; $j < $len2; $j++) {\n        $mergedList[] = $list2[$j];\n    }\n\n    return $mergedList;\n}\n```"
  },
  {
    "task": "Write a for loop that calculates the power of a number using repeated multiplication.",
    "code": "```php\n<?php\nfunction calculatePower($base, $exponent) {\n    $result = 1;\n    for ($i = 0; $i < $exponent; $i++) {\n        $result *= $base;\n    }\n    return $result;\n}\n\n$base = 2;\n$exponent = 5;\necho calculatePower($base, $exponent);\n?>\n```"
  },
  {
    "task": "Use a for loop to find the longest word in a list of words.",
    "code": "```php\n<?php\n$words = [\"apple\", \"banana\", \"cherry\", \"strawberry\", \"grape\"];\n$longestWord = \"\";\n$maxLength = 0;\n\nfor ($i = 0; $i < count($words); $i++) {\n    if (strlen($words[$i]) > $maxLength) {\n        $maxLength = strlen($words[$i]);\n        $longestWord = $words[$i];\n    }\n}\n\necho \"The longest word is: \" . $longestWord;\n?>\n```"
  },
  {
    "task": "Develop a for loop that sorts a list of tuples based on the second element.",
    "code": "```php\n<?php\n\n$list = [\n    [3, 1],\n    [1, 3],\n    [2, 2],\n    [4, 0]\n];\n\nfor ($i = 0; $i < count($list); $i++) {\n    for ($j = 0; $j < count($list) - 1; $j++) {\n        if ($list[$j][1] > $list[$j + 1][1]) {\n            $temp = $list[$j];\n            $list[$j] = $list[$j + 1];\n            $list[$j + 1] = $temp;\n        }\n    }\n}\n\nprint_r($list);\n\n?>\n```"
  },
  {
    "task": "Create a for loop that replicates each character in a string a given number of times.",
    "code": "```php\nfunction replicateCharacters($inputString, $times) {\n    $result = '';\n    for ($i = 0; $i < strlen($inputString); $i++) {\n        for ($j = 0; $j < $times; $j++) {\n            $result .= $inputString[$i];\n        }\n    }\n    return $result;\n}\n\necho replicateCharacters(\"hello\", 3);\n```"
  },
  {
    "task": "Construct a for loop that replaces spaces in a string with hyphens.",
    "code": "```php\n$string = \"Replace spaces with hyphens\";\n$result = \"\";\n\nfor ($i = 0; $i < strlen($string); $i++) {\n    if ($string[$i] === ' ') {\n        $result .= '-';\n    } else {\n        $result .= $string[$i];\n    }\n}\n\necho $result;\n```"
  },
  {
    "task": "Design a for loop to find the intersection of two sets.",
    "code": "```php\n<?php\n$set1 = [1, 2, 3, 4, 5];\n$set2 = [3, 4, 5, 6, 7];\n$intersection = [];\n\nfor ($i = 0; $i < count($set1); $i++) {\n    for ($j = 0; $j < count($set2); $j++) {\n        if ($set1[$i] === $set2[$j]) {\n            $intersection[] = $set1[$i];\n            break;\n        }\n    }\n}\n\nprint_r($intersection);\n?>\n```"
  },
  {
    "task": "Write a for loop that generates a list of prime numbers up to a given number.",
    "code": "```php\nfunction isPrime($num) {\n    if ($num <= 1) return false;\n    if ($num <= 3) return true;\n    if ($num % 2 == 0 || $num % 3 == 0) return false;\n    for ($i = 5; $i * $i <= $num; $i += 6) {\n        if ($num % $i == 0 || $num % ($i + 2) == 0) return false;\n    }\n    return true;\n}\n\nfunction generatePrimes($max) {\n    $primes = [];\n    for ($i = 2; $i <= $max; $i++) {\n        if (isPrime($i)) {\n            $primes[] = $i;\n        }\n    }\n    return $primes;\n}\n\n$maxNumber = 100; // Change this to your desired upper limit\n$primeNumbers = generatePrimes($maxNumber);\nprint_r($primeNumbers);\n```"
  },
  {
    "task": "Use a for loop to implement a simple text-based progress bar.",
    "code": "```php\n<?php\n$total = 10;\necho \"Progress:\\n\";\nfor ($i = 0; $i <= $total; $i++) {\n    echo \"[\";\n    for ($j = 0; $j < $total; $j++) {\n        if ($j < $i) {\n            echo \"#\";\n        } else {\n            echo \" \";\n        }\n    }\n    echo \"] \" . ($i * 10) . \"%\\r\";\n    usleep(500000); // Sleep for half a second\n}\necho \"\\nDone!\\n\";\n?>\n```"
  },
  {
    "task": "Implement a for loop that finds and prints all palindromic numbers between 10 and 200.",
    "code": "```php\n<?php\nfor ($i = 10; $i <= 200; $i++) {\n    if (strval($i) === strrev(strval($i))) {\n        echo $i . \"\\n\";\n    }\n}\n?>\n```"
  },
  {
    "task": "Create a for loop that multiplies corresponding elements of two lists and stores the result.",
    "code": "```php\n$list1 = [1, 2, 3, 4, 5];\n$list2 = [6, 7, 8, 9, 10];\n$result = [];\n\nfor ($i = 0; $i < count($list1); $i++) {\n    $result[] = $list1[$i] * $list2[$i];\n}\n```"
  },
  {
    "task": "Develop a for loop that finds the difference between the largest and smallest numbers in a list.",
    "code": "```php\n<?php\n\nfunction findDifference($numbers) {\n    if (empty($numbers)) {\n        return 0;\n    }\n\n    $min = $numbers[0];\n    $max = $numbers[0];\n\n    for ($i = 1; $i < count($numbers); $i++) {\n        if ($numbers[$i] < $min) {\n            $min = $numbers[$i];\n        }\n        if ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n        }\n    }\n\n    return $max - $min;\n}\n\n$list = [3, 1, 9, 7, 5];\necho findDifference($list);\n\n?>\n```"
  },
  {
    "task": "Write a for loop that prints numbers from 1 to 100, replacing multiples of 5 with 'Buzz'.",
    "code": "```php\nfor ($i = 1; $i <= 100; $i++) {\n    if ($i % 5 === 0) {\n        echo \"Buzz\\n\";\n    } else {\n        echo $i . \"\\n\";\n    }\n}\n```"
  },
  {
    "task": "Use a for loop to convert a list of integers into their binary representation.",
    "code": "```php\n$integers = [1, 2, 3, 4, 5];\n$binaries = [];\n\nfor ($i = 0; $i < count($integers); $i++) {\n    $binaries[] = decbin($integers[$i]);\n}\n\nprint_r($binaries);\n```"
  },
  {
    "task": "Design a for loop that fills a 2D array with consecutive numbers in a spiral pattern.",
    "code": "```php\nfunction createSpiralMatrix($n) {\n    $matrix = array_fill(0, $n, array_fill(0, $n, 0));\n    $num = 1;\n    $left = 0;\n    $right = $n - 1;\n    $top = 0;\n    $bottom = $n - 1;\n\n    while ($left <= $right && $top <= $bottom) {\n        for ($i = $left; $i <= $right; $i++) {\n            $matrix[$top][$i] = $num++;\n        }\n        $top++;\n        for ($i = $top; $i <= $bottom; $i++) {\n            $matrix[$i][$right] = $num++;\n        }\n        $right--;\n        if ($top <= $bottom) {\n            for ($i = $right; $i >= $left; $i--) {\n                $matrix[$bottom][$i] = $num++;\n            }\n            $bottom--;\n        }\n        if ($left <= $right) {\n            for ($i = $bottom; $i >= $top; $i--) {\n                $matrix[$i][$left] = $num++;\n            }\n            $left++;\n        }\n    }\n\n    return $matrix;\n}\n\n// Example usage:\n$n = 5;\n$matrix = createSpiralMatrix($n);\nforeach ($matrix as $row) {\n    echo implode(\" \", $row) . \"\\n\";\n}\n```"
  },
  {
    "task": "Create a for loop that iterates over a list and removes duplicates.",
    "code": "```php\n<?php\n\n$list = [1, 2, 3, 2, 4, 5, 3, 6];\n$uniqueList = [];\n\nfor ($i = 0; $i < count($list); $i++) {\n    if (!in_array($list[$i], $uniqueList)) {\n        $uniqueList[] = $list[$i];\n    }\n}\n\nprint_r($uniqueList);\n\n?>\n```"
  },
  {
    "task": "Implement a for loop to calculate the dot product of two vectors.",
    "code": "```php\n<?php\n\nfunction dotProduct($vector1, $vector2) {\n    $dotProduct = 0;\n    $length = count($vector1);\n\n    for ($i = 0; $i < $length; $i++) {\n        $dotProduct += $vector1[$i] * $vector2[$i];\n    }\n\n    return $dotProduct;\n}\n\n$vector1 = [1, 2, 3];\n$vector2 = [4, 5, 6];\n$result = dotProduct($vector1, $vector2);\necho \"Dot Product: \" . $result;\n\n?>\n```"
  },
  {
    "task": "Write a for loop that prints a sequence of numbers in reverse order.",
    "code": "```php\n<?php\nfor ($i = 10; $i >= 1; $i--) {\n    echo $i . \"\\n\";\n}\n?>\n```"
  },
  {
    "task": "Develop a for loop that computes the greatest common divisor (GCD) of two numbers.",
    "code": "```php\n<?php\n\nfunction gcd($a, $b) {\n    for ($i = min($a, $b); $i > 0; $i--) {\n        if ($a % $i == 0 && $b % $i == 0) {\n            return $i;\n        }\n    }\n    return 1;\n}\n\n$a = 56;\n$b = 98;\necho \"GCD of $a and $b is: \" . gcd($a, $b);\n\n?>\n```"
  },
  {
    "task": "Construct a for loop that prints a square pattern of numbers with a given side length.",
    "code": "```php\n<?php\n$sideLength = 5; // Example side length\n\nfor ($i = 0; $i < $sideLength; $i++) {\n    for ($j = 0; $j < $sideLength; $j++) {\n        echo $j + 1 . \" \";\n    }\n    echo \"\\n\";\n}\n?>\n```"
  },
  {
    "task": "Create a for loop that shifts all elements of a list to the left by one position.",
    "code": "```php\n<?php\n\nfunction shiftLeft($list) {\n    $length = count($list);\n    if ($length > 0) {\n        $firstElement = $list[0];\n        for ($i = 0; $i < $length - 1; $i++) {\n            $list[$i] = $list[$i + 1];\n        }\n        $list[$length - 1] = $firstElement;\n    }\n    return $list;\n}\n\n// Example usage:\n$list = [1, 2, 3, 4, 5];\n$list = shiftLeft($list);\nprint_r($list);\n\n?>\n```"
  },
  {
    "task": "Use a for loop to print the first 20 triangular numbers.",
    "code": "```php\n<?php\n\nfor ($n = 1; $n <= 20; $n++) {\n    $triangularNumber = ($n * ($n + 1)) / 2;\n    echo $triangularNumber . \"\\n\";\n}\n\n?>\n```"
  },
  {
    "task": "Write a for loop that finds the first repeating character in a string.",
    "code": "```php\nfunction firstRepeatingCharacter($string) {\n    $seen = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n        if (isset($seen[$string[$i]])) {\n            return $string[$i];\n        }\n        $seen[$string[$i]] = true;\n    }\n    return null;\n}\n\n// Example usage:\n$string = \"swiss\";\necho firstRepeatingCharacter($string);\n```"
  },
  {
    "task": "Design a for loop that transforms a list of temperatures from Celsius to Fahrenheit.",
    "code": "```php\n$celsiusTemperatures = [0, 20, 37, 100];\n$fahrenheitTemperatures = [];\n\nfor ($i = 0; $i < count($celsiusTemperatures); $i++) {\n    $fahrenheitTemperatures[] = $celsiusTemperatures[$i] * 9 / 5 + 32;\n}\n\nprint_r($fahrenheitTemperatures);\n```"
  },
  {
    "task": "Implement a for loop to determine if a string is an isogram.",
    "code": "```php\nfunction isIsogram($string) {\n    $string = strtolower($string);\n    $length = strlen($string);\n    for ($i = 0; $i < $length; $i++) {\n        for ($j = $i + 1; $j < $length; $j++) {\n            if ($string[$i] === $string[$j]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n// Example usage\n$string = \"Dermatoglyphics\";\necho isIsogram($string) ? 'Isogram' : 'Not an isogram';\n```"
  },
  {
    "task": "Use a for loop to create a histogram from a list of integers.",
    "code": "```php\n$numbers = [1, 3, 5, 7, 2]; // Example list of integers\n\nforeach ($numbers as $number) {\n    for ($i = 0; $i < $number; $i++) {\n        echo '*';\n    }\n    echo PHP_EOL;\n}\n```"
  },
  {
    "task": "Create a for loop that prints the indexes of all occurrences of a particular element in a list.",
    "code": "```php\n$list = [1, 2, 3, 2, 4, 2, 5];\n$element = 2;\n\nfor ($i = 0; $i < count($list); $i++) {\n    if ($list[$i] === $element) {\n        echo $i . \"\\n\";\n    }\n}\n```"
  },
  {
    "task": "Write a for loop that checks if a given string is a palindrome.",
    "code": "```php\nfunction isPalindrome($string) {\n    $length = strlen($string);\n    for ($i = 0; $i < $length / 2; $i++) {\n        if ($string[$i] !== $string[$length - $i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n$string = \"radar\";\n$result = isPalindrome($string);\necho $result ? \"The string is a palindrome.\" : \"The string is not a palindrome.\";\n```"
  },
  {
    "task": "Develop a for loop to simulate the behavior of a simple finite state machine.",
    "code": "```php\n<?php\n\n$states = ['START', 'PROCESSING', 'END'];\n$current_state = 0;\n\nfor ($i = 0; $i < count($states); $i++) {\n    switch ($states[$current_state]) {\n        case 'START':\n            echo \"State: START\\n\";\n            $current_state++;\n            break;\n        case 'PROCESSING':\n            echo \"State: PROCESSING\\n\";\n            $current_state++;\n            break;\n        case 'END':\n            echo \"State: END\\n\";\n            // Optionally reset to START or break the loop\n            $current_state = 0; // or use break to exit\n            break;\n    }\n}\n\n?>\n```"
  },
  {
    "task": "Design a for loop that finds the sum of all odd numbers in a list.",
    "code": "```php\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$sum = 0;\n\nfor ($i = 0; $i < count($list); $i++) {\n    if ($list[$i] % 2 !== 0) {\n        $sum += $list[$i];\n    }\n}\n\necho $sum;\n```"
  },
  {
    "task": "Use a for loop to count how many words start with a vowel in a given sentence.",
    "code": "```php\n<?php\n$sentence = \"An example sentence to evaluate with vowels\";\n$vowels = ['a', 'e', 'i', 'o', 'u'];\n$words = explode(\" \", strtolower($sentence));\n$count = 0;\n\nfor ($i = 0; $i < count($words); $i++) {\n    if (in_array($words[$i][0], $vowels)) {\n        $count++;\n    }\n}\n\necho $count;\n?>\n```"
  },
  {
    "task": "Implement a for loop that sorts a list of strings by their length.",
    "code": "```php\n<?php\nfunction sortStringsByLength($strings) {\n    $n = count($strings);\n    for ($i = 0; $i < $n - 1; $i++) {\n        for ($j = 0; $j < $n - $i - 1; $j++) {\n            if (strlen($strings[$j]) > strlen($strings[$j + 1])) {\n                $temp = $strings[$j];\n                $strings[$j] = $strings[$j + 1];\n                $strings[$j + 1] = $temp;\n            }\n        }\n    }\n    return $strings;\n}\n\n$strings = [\"apple\", \"banana\", \"pear\", \"kiwi\"];\n$sortedStrings = sortStringsByLength($strings);\nprint_r($sortedStrings);\n?>\n```"
  },
  {
    "task": "Write a for loop that prints the factorial of numbers from 1 to 10.",
    "code": "```php\nfor ($i = 1; $i <= 10; $i++) {\n    $factorial = 1;\n    for ($j = 1; $j <= $i; $j++) {\n        $factorial *= $j;\n    }\n    echo \"Factorial of $i is $factorial\\n\";\n}\n```"
  },
  {
    "task": "Create a for loop that replaces all instances of a substring in a string with another substring.",
    "code": "```php\nfunction replaceSubstrings($originalString, $search, $replacement) {\n    $position = 0;\n    $searchLength = strlen($search);\n\n    for ($position = strpos($originalString, $search); $position !== false; $position = strpos($originalString, $search, $position + strlen($replacement))) {\n        $originalString = substr_replace($originalString, $replacement, $position, $searchLength);\n    }\n\n    return $originalString;\n}\n\n$originalString = \"Hello world, welcome to the world of PHP.\";\n$search = \"world\";\n$replacement = \"universe\";\n\necho replaceSubstrings($originalString, $search, $replacement);\n```"
  },
  {
    "task": "Develop a for loop that squares each element in a list of numbers.",
    "code": "```php\n$numbers = [1, 2, 3, 4, 5];\n$squaredNumbers = [];\n\nfor ($i = 0; $i < count($numbers); $i++) {\n    $squaredNumbers[] = $numbers[$i] * $numbers[$i];\n}\n\nprint_r($squaredNumbers);\n```"
  },
  {
    "task": "Use a for loop to reverse the order of elements in an array.",
    "code": "```php\n<?php\n\nfunction reverseArray($array) {\n    $reversed = [];\n    for ($i = count($array) - 1; $i >= 0; $i--) {\n        $reversed[] = $array[$i];\n    }\n    return $reversed;\n}\n\n$originalArray = [1, 2, 3, 4, 5];\n$reversedArray = reverseArray($originalArray);\n\nprint_r($reversedArray);\n\n?>\n```"
  },
  {
    "task": "Implement a for loop that tests if two strings are anagrams of each other.",
    "code": "```php\n<?php\n\nfunction areAnagrams($string1, $string2) {\n    if (strlen($string1) !== strlen($string2)) {\n        return false;\n    }\n    \n    $count1 = array_fill(0, 256, 0);\n    $count2 = array_fill(0, 256, 0);\n    \n    for ($i = 0; $i < strlen($string1); $i++) {\n        $count1[ord($string1[$i])]++;\n        $count2[ord($string2[$i])]++;\n    }\n    \n    for ($i = 0; $i < 256; $i++) {\n        if ($count1[$i] !== $count2[$i]) {\n            return false;\n        }\n    }\n    \n    return true;\n}\n\n// Example usage:\n$string1 = \"listen\";\n$string2 = \"silent\";\n$result = areAnagrams($string1, $string2);\necho $result ? \"Anagrams\" : \"Not Anagrams\";\n\n?>\n```"
  },
  {
    "task": "Design a for loop to find and print all Armstrong numbers between 100 and 999.",
    "code": "```php\n<?php\nfor ($i = 100; $i <= 999; $i++) {\n    $sum = 0;\n    $num = $i;\n    while ($num > 0) {\n        $digit = $num % 10;\n        $sum += $digit ** 3;\n        $num = intdiv($num, 10);\n    }\n    if ($sum === $i) {\n        echo $i . \"\\n\";\n    }\n}\n?>\n```"
  }
]