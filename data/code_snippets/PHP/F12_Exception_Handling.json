[
  {
    "task": "Write a function that reads a file and handles the exception if the file is not found.",
    "code": "```php\nfunction readFileContents($filename) {\n    try {\n        if (!file_exists($filename)) {\n            throw new Exception(\"File not found\");\n        }\n        $contents = file_get_contents($filename);\n        return $contents;\n    } catch (Exception $e) {\n        return $e->getMessage();\n    }\n}\n```"
  },
  {
    "task": "Create a program that divides two numbers and catches any division by zero errors.",
    "code": "```php\n<?php\n\nfunction divide($numerator, $denominator) {\n    try {\n        if ($denominator == 0) {\n            throw new Exception(\"Division by zero.\");\n        }\n        return $numerator / $denominator;\n    } catch (Exception $e) {\n        echo \"Error: \" . $e->getMessage();\n    }\n}\n\n// Example usage\n$result = divide(10, 0);\nif ($result !== null) {\n    echo \"Result: \" . $result;\n}\n\n?>\n```"
  },
  {
    "task": "Design a function to parse an integer from a string and manage invalid input exceptions.",
    "code": "```php\nfunction parseInteger($string) {\n    try {\n        if (!is_string($string)) {\n            throw new InvalidArgumentException('Input must be a string.');\n        }\n\n        $result = intval($string);\n\n        if (strval($result) !== $string && !ctype_digit($string)) {\n            throw new UnexpectedValueException('Invalid input: not a valid integer.');\n        }\n\n        return $result;\n    } catch (InvalidArgumentException $e) {\n        echo 'Caught exception: ' . $e->getMessage();\n        return null;\n    } catch (UnexpectedValueException $e) {\n        echo 'Caught exception: ' . $e->getMessage();\n        return null;\n    }\n}\n\n// Example usage\necho parseInteger(\"123\");  // Outputs: 123\necho parseInteger(\"abc\");  // Outputs: Caught exception: Invalid input: not a valid integer.\n```"
  },
  {
    "task": "Implement an API call and catch exceptions related to network errors or timeouts.",
    "code": "```php\n<?php\n\nfunction callApi($url) {\n    try {\n        $options = [\n            'http' => [\n                'timeout' => 5 // Timeout in seconds\n            ]\n        ];\n        $context = stream_context_create($options);\n\n        $response = file_get_contents($url, false, $context);\n\n        if ($response === FALSE) {\n            throw new Exception(\"Error occurred while calling the API.\");\n        }\n\n        return $response;\n    } catch (Exception $e) {\n        echo \"Exception caught: \" . $e->getMessage();\n    }\n}\n\n$url = \"https://api.example.com/data\";\n$response = callApi($url);\n```"
  },
  {
    "task": "Develop a program that opens a database connection and handles any connection failure exceptions.",
    "code": "```php\n<?php\n\nfunction openDatabaseConnection($dsn, $username, $password) {\n    try {\n        $dbh = new PDO($dsn, $username, $password);\n        echo \"Connection successful!\";\n    } catch (PDOException $e) {\n        echo \"Connection failed: \" . $e->getMessage();\n    }\n}\n\n// Example usage\n$dsn = 'mysql:host=localhost;dbname=testdb';\n$username = 'root';\n$password = '';\n\nopenDatabaseConnection($dsn, $username, $password);\n```"
  },
  {
    "task": "Write a function that accesses an array by index and catches out-of-bounds exceptions.",
    "code": "```php\nfunction accessArrayByIndex($array, $index) {\n    try {\n        if (!isset($array[$index])) {\n            throw new OutOfBoundsException(\"Index out of bounds.\");\n        }\n        return $array[$index];\n    } catch (OutOfBoundsException $e) {\n        return $e->getMessage();\n    }\n}\n```"
  },
  {
    "task": "Create a function that converts a string to a date object and manages format exceptions.",
    "code": "```php\nfunction convertStringToDate($dateString) {\n    try {\n        $date = new DateTime($dateString);\n        return $date;\n    } catch (Exception $e) {\n        throw new Exception(\"Invalid date format: \" . $e->getMessage());\n    }\n}\n```"
  },
  {
    "task": "Design a program that writes data to a file and catches any file permission exceptions.",
    "code": "```php\n<?php\n\nfunction writeToFile($filename, $data) {\n    try {\n        if (!is_writable($filename)) {\n            throw new Exception(\"File is not writable.\");\n        }\n        \n        $file = fopen($filename, 'w');\n        if (!$file) {\n            throw new Exception(\"Failed to open the file.\");\n        }\n        \n        fwrite($file, $data);\n        fclose($file);\n    } catch (Exception $e) {\n        echo \"An error occurred: \" . $e->getMessage();\n    }\n}\n\n$filename = 'output.txt';\n$data = 'Sample data to write to the file.';\nwriteToFile($filename, $data);\n\n?>\n```"
  },
  {
    "task": "Implement a module that retrieves data from a URL and handles malformed URL exceptions.",
    "code": "```php\n<?php\n\nfunction fetchDataFromUrl($url) {\n    try {\n        if (!filter_var($url, FILTER_VALIDATE_URL)) {\n            throw new Exception(\"Malformed URL\");\n        }\n        \n        $data = file_get_contents($url);\n        if ($data === false) {\n            throw new Exception(\"Error retrieving data\");\n        }\n\n        return $data;\n    } catch (Exception $e) {\n        echo \"An error occurred: \" . $e->getMessage();\n    }\n}\n\n$url = \"http://example.com\";\n$data = fetchDataFromUrl($url);\n```"
  },
  {
    "task": "Write a function to calculate the square root of a number and catch any negative input exceptions.",
    "code": "```php\n<?php\n\nfunction calculateSquareRoot($number) {\n    try {\n        if ($number < 0) {\n            throw new Exception(\"Cannot calculate square root of a negative number.\");\n        }\n        return sqrt($number);\n    } catch (Exception $e) {\n        return $e->getMessage();\n    }\n}\n\n// Example usage\necho calculateSquareRoot(9); // Outputs: 3\necho calculateSquareRoot(-4); // Outputs: Cannot calculate square root of a negative number.\n\n?>\n```"
  },
  {
    "task": "Develop a program that sends an email and manages exceptions for invalid email addresses.",
    "code": "```php\n<?php\n\nfunction sendEmail($to, $subject, $body) {\n    if (!filter_var($to, FILTER_VALIDATE_EMAIL)) {\n        throw new InvalidArgumentException(\"Invalid email address: $to\");\n    }\n    \n    // Dummy email sending logic for demonstration\n    // In a real-world scenario, you would integrate with an email sending service\n    echo \"Email sent to $to with subject: $subject\\n\";\n}\n\n$to = \"invalid-email\";\n$subject = \"Test Email\";\n$body = \"This is a test email.\";\n\ntry {\n    sendEmail($to, $subject, $body);\n} catch (InvalidArgumentException $e) {\n    echo \"Error: \" . $e->getMessage() . \"\\n\";\n}\n\n?>\n```"
  },
  {
    "task": "Create a calculator application that handles invalid operations gracefully.",
    "code": "```php\n<?php\n\nclass Calculator\n{\n    public function add($a, $b)\n    {\n        return $a + $b;\n    }\n\n    public function subtract($a, $b)\n    {\n        return $a - $b;\n    }\n\n    public function multiply($a, $b)\n    {\n        return $a * $b;\n    }\n\n    public function divide($a, $b)\n    {\n        if ($b == 0) {\n            throw new Exception(\"Division by zero is not allowed.\");\n        }\n        return $a / $b;\n    }\n\n    public function calculate($operation, $a, $b)\n    {\n        try {\n            switch ($operation) {\n                case 'add':\n                    return $this->add($a, $b);\n                case 'subtract':\n                    return $this->subtract($a, $b);\n                case 'multiply':\n                    return $this->multiply($a, $b);\n                case 'divide':\n                    return $this->divide($a, $b);\n                default:\n                    throw new Exception(\"Invalid operation.\");\n            }\n        } catch (Exception $e) {\n            return \"Error: \" . $e->getMessage();\n        }\n    }\n}\n\n$calculator = new Calculator();\necho $calculator->calculate('add', 5, 3) . PHP_EOL;\necho $calculator->calculate('divide', 10, 0) . PHP_EOL;\necho $calculator->calculate('unknown', 7, 2) . PHP_EOL;\n?>\n```"
  },
  {
    "task": "Design a function that tries to parse JSON data and catches parsing errors.",
    "code": "```php\n<?php\n\nfunction parseJson($jsonString) {\n    try {\n        $data = json_decode($jsonString, true, 512, JSON_THROW_ON_ERROR);\n        return $data;\n    } catch (JsonException $e) {\n        return 'Parsing error: ' . $e->getMessage();\n    }\n}\n\n// Example usage\n$jsonData = '{\"name\": \"John\", \"age\": 30}';\n$result = parseJson($jsonData);\nprint_r($result);\n\n$jsonDataWithError = '{\"name\": \"John\", \"age\": 30'; // Missing closing brace\n$resultWithError = parseJson($jsonDataWithError);\necho $resultWithError;\n?>\n```"
  },
  {
    "task": "Implement a system that processes user input and handles any type conversion exceptions.",
    "code": "```php\n<?php\n\nfunction processUserInput($input) {\n    try {\n        // Attempt to convert input to integer\n        $number = intval($input);\n        if ($number == 0 && $input !== '0') {\n            throw new Exception(\"Invalid input: cannot convert to integer\");\n        }\n        echo \"Processed input: \" . $number;\n    } catch (Exception $e) {\n        echo \"Error: \" . $e->getMessage();\n    }\n}\n\n// Example usage\n$userInput = \"123abc\";\nprocessUserInput($userInput);\n\n?>\n```"
  },
  {
    "task": "Write a function that fetches data from a database and manages exceptions for missing records.",
    "code": "```php\n<?php\n\nfunction fetchDataFromDatabase($pdo, $query, $params = []) {\n    try {\n        $stmt = $pdo->prepare($query);\n        $stmt->execute($params);\n        $result = $stmt->fetch(PDO::FETCH_ASSOC);\n        if (!$result) {\n            throw new Exception(\"Record not found.\");\n        }\n        return $result;\n    } catch (Exception $e) {\n        echo \"An error occurred: \" . $e->getMessage();\n        return null;\n    }\n}\n\n// Example usage:\n// $pdo = new PDO('mysql:host=localhost;dbname=testdb', 'username', 'password');\n// $data = fetchDataFromDatabase($pdo, \"SELECT * FROM users WHERE id = ?\", [1]);\n```"
  },
  {
    "task": "Create a program that connects to a remote server and handles authentication failure exceptions.",
    "code": "```php\n<?php\n\nclass ServerConnectionException extends Exception {}\n\nfunction connectToServer($server, $username, $password) {\n    // Simulated server connection logic\n    if ($username !== 'admin' || $password !== 'password') {\n        throw new ServerConnectionException('Authentication failed.');\n    }\n    return \"Connected to server: $server\";\n}\n\n$server = 'remote.server.com';\n$username = 'admin';\n$password = 'wrongpassword';\n\ntry {\n    $result = connectToServer($server, $username, $password);\n    echo $result;\n} catch (ServerConnectionException $e) {\n    echo 'Error: ' . $e->getMessage();\n}\n\n?>\n```"
  },
  {
    "task": "Develop a function to download a file from the internet and handle file not found exceptions.",
    "code": "```php\n<?php\n\nfunction downloadFile($url, $saveTo) {\n    try {\n        $content = @file_get_contents($url);\n        if ($content === FALSE) {\n            throw new Exception(\"File not found at URL: $url\");\n        }\n        file_put_contents($saveTo, $content);\n    } catch (Exception $e) {\n        echo 'Error: ' . $e->getMessage();\n    }\n}\n\n// Example usage\ndownloadFile('http://example.com/file.txt', 'localfile.txt');\n?>\n```"
  },
  {
    "task": "Design a program that attempts to connect to an API and handles rate limit exceptions.",
    "code": "```php\n<?php\n\nfunction connectToApi($url) {\n    try {\n        $response = file_get_contents($url);\n\n        if ($http_response_header[0] === 'HTTP/1.1 429 Too Many Requests') {\n            throw new Exception('Rate limit exceeded');\n        }\n\n        return $response;\n    } catch (Exception $e) {\n        echo 'Error: ' . $e->getMessage();\n        // Handle the rate limit exception, e.g., retry after some time\n    }\n}\n\n$url = \"https://api.example.com/data\";\n$response = connectToApi($url);\n```"
  },
  {
    "task": "Write a function that reads from a configuration file and manages key not found exceptions.",
    "code": "```php\nfunction readConfig($filePath, $key) {\n    if (!file_exists($filePath)) {\n        throw new Exception(\"Configuration file not found.\");\n    }\n\n    $config = parse_ini_file($filePath);\n    \n    if (!isset($config[$key])) {\n        throw new Exception(\"Key not found in configuration.\");\n    }\n\n    return $config[$key];\n}\n\ntry {\n    $value = readConfig('config.ini', 'some_key');\n    echo \"Value: $value\";\n} catch (Exception $e) {\n    echo 'Error: ' . $e->getMessage();\n}\n```"
  },
  {
    "task": "Create an application that processes a list of tasks and catches any task execution exceptions.",
    "code": "```php\n<?php\n\nclass TaskProcessor {\n    private $tasks;\n\n    public function __construct($tasks) {\n        $this->tasks = $tasks;\n    }\n\n    public function processTasks() {\n        foreach ($this->tasks as $task) {\n            try {\n                $this->executeTask($task);\n            } catch (Exception $e) {\n                echo \"Exception caught while processing task: \" . $e->getMessage() . \"\\n\";\n            }\n        }\n    }\n\n    private function executeTask($task) {\n        if (rand(0, 1)) {\n            throw new Exception(\"Error executing task: $task\");\n        }\n        echo \"Successfully executed task: $task\\n\";\n    }\n}\n\n$taskList = ['Task 1', 'Task 2', 'Task 3'];\n$processor = new TaskProcessor($taskList);\n$processor->processTasks();\n\n?>\n```"
  },
  {
    "task": "Implement a program that performs batch processing and handles individual item processing exceptions.",
    "code": "```php\n<?php\n\nfunction processItem($item) {\n    if (rand(0, 1) === 0) { // Simulate random processing failure\n        throw new Exception(\"Error processing item: $item\");\n    }\n    return \"Processed item: $item\";\n}\n\nfunction batchProcess($items) {\n    $results = [];\n    foreach ($items as $item) {\n        try {\n            $result = processItem($item);\n            $results[] = $result;\n        } catch (Exception $e) {\n            $results[] = $e->getMessage();\n        }\n    }\n    return $results;\n}\n\n$itemsToProcess = ['item1', 'item2', 'item3', 'item4', 'item5'];\n$results = batchProcess($itemsToProcess);\n\nforeach ($results as $result) {\n    echo $result . PHP_EOL;\n}\n\n?>\n```"
  },
  {
    "task": "Develop a function that performs mathematical operations and catches arithmetic exceptions.",
    "code": "```php\n<?php\n\nfunction performOperation($a, $b, $operation) {\n    try {\n        switch ($operation) {\n            case 'add':\n                return $a + $b;\n            case 'subtract':\n                return $a - $b;\n            case 'multiply':\n                return $a * $b;\n            case 'divide':\n                if ($b == 0) {\n                    throw new Exception('Division by zero.');\n                }\n                return $a / $b;\n            default:\n                throw new Exception('Invalid operation.');\n        }\n    } catch (Exception $e) {\n        return 'Error: ' . $e->getMessage();\n    }\n}\n\necho performOperation(10, 0, 'divide');\n```"
  },
  {
    "task": "Write a program that logs error messages when exceptions occur during data processing.",
    "code": "```php\n<?php\n\nfunction processData($data) {\n    if (empty($data)) {\n        throw new Exception('Data cannot be empty');\n    }\n    // Simulate data processing\n    return strtoupper($data);\n}\n\nfunction logError($message) {\n    file_put_contents('error_log.txt', $message . PHP_EOL, FILE_APPEND);\n}\n\n$dataSet = [\"Hello\", \"\", \"World\"];\n\nforeach ($dataSet as $data) {\n    try {\n        $result = processData($data);\n        echo \"Processed Data: $result\\n\";\n    } catch (Exception $e) {\n        logError($e->getMessage());\n        echo \"An error occurred: \" . $e->getMessage() . \"\\n\";\n    }\n}\n?>\n```"
  },
  {
    "task": "Create a script that monitors system resources and handles exceptions when limits are exceeded.",
    "code": "```php\n<?php\n\nclass ResourceMonitorException extends Exception {}\n\nfunction monitorResources($cpuLimit, $memoryLimit) {\n    $cpuUsage = getSystemCpuUsage();\n    $memoryUsage = getSystemMemoryUsage();\n\n    if ($cpuUsage > $cpuLimit) {\n        throw new ResourceMonitorException(\"CPU usage exceeded: $cpuUsage%\");\n    }\n\n    if ($memoryUsage > $memoryLimit) {\n        throw new ResourceMonitorException(\"Memory usage exceeded: $memoryUsage MB\");\n    }\n\n    return \"Resources are within limits.\";\n}\n\nfunction getSystemCpuUsage() {\n    // Simulate CPU usage\n    return rand(1, 100);\n}\n\nfunction getSystemMemoryUsage() {\n    // Simulate Memory usage\n    return rand(100, 8000);\n}\n\ntry {\n    $cpuLimit = 75; // set CPU usage limit in percentage\n    $memoryLimit = 4000; // set memory limit in MB\n    echo monitorResources($cpuLimit, $memoryLimit);\n} catch (ResourceMonitorException $e) {\n    echo \"Exception caught: \" . $e->getMessage();\n}\n\n?>\n```"
  },
  {
    "task": "Design a function that validates user input and manages any format exceptions.",
    "code": "```php\nfunction validateUserInput($input) {\n    try {\n        if (!is_string($input)) {\n            throw new Exception(\"Input must be a string.\");\n        }\n        \n        if (empty($input)) {\n            throw new Exception(\"Input cannot be empty.\");\n        }\n        \n        // Additional validation logic can be added here\n        \n        return \"Input is valid.\";\n    } catch (Exception $e) {\n        return \"Validation Error: \" . $e->getMessage();\n    }\n}\n\n// Example usage\n$input = \"\"; // Test with various inputs\necho validateUserInput($input);\n```"
  },
  {
    "task": "Implement a service that interacts with third-party APIs and handles unexpected response exceptions.",
    "code": "```php\n<?php\n\nclass ApiService\n{\n    private $apiUrl;\n\n    public function __construct($apiUrl)\n    {\n        $this->apiUrl = $apiUrl;\n    }\n\n    public function fetchData($endpoint)\n    {\n        try {\n            $response = $this->makeRequest($endpoint);\n\n            if ($response === false) {\n                throw new Exception(\"Failed to connect to API\");\n            }\n            \n            $data = json_decode($response, true);\n            if (json_last_error() !== JSON_ERROR_NONE) {\n                throw new Exception(\"Invalid JSON response\");\n            }\n\n            return $data;\n        } catch (Exception $e) {\n            $this->handleException($e);\n            return null;\n        }\n    }\n\n    private function makeRequest($endpoint)\n    {\n        $url = $this->apiUrl . '/' . $endpoint;\n        return file_get_contents($url);\n    }\n\n    private function handleException(Exception $e)\n    {\n        error_log(\"API Error: \" . $e->getMessage());\n    }\n}\n\n// Example usage\n$apiService = new ApiService(\"https://api.example.com\");\n$data = $apiService->fetchData(\"some-endpoint\");\n```"
  },
  {
    "task": "Write a function that uploads files to a server and handles exceptions for unsupported file types.",
    "code": "```php\nfunction uploadFile($file) {\n    try {\n        $supportedTypes = ['image/jpeg', 'image/png', 'application/pdf'];\n        if (!in_array($file['type'], $supportedTypes)) {\n            throw new Exception('Unsupported file type.');\n        }\n\n        $uploadDirectory = '/uploads/';\n        $uploadPath = $uploadDirectory . basename($file['name']);\n\n        if (!move_uploaded_file($file['tmp_name'], $uploadPath)) {\n            throw new Exception('Failed to upload file.');\n        }\n\n        return 'File uploaded successfully.';\n    } catch (Exception $e) {\n        return 'Error: ' . $e->getMessage();\n    }\n}\n\n// Example usage\n// $file should be obtained from $_FILES array in a real scenario\n$file = [\n    'name' => 'example.jpg',\n    'type' => 'image/jpeg',\n    'tmp_name' => '/tmp/phpYzdqkD',\n    'error' => 0,\n    'size' => 12345\n];\n\necho uploadFile($file);\n```"
  },
  {
    "task": "Create a program that simulates network traffic and manages packet loss exceptions.",
    "code": "```php\n<?php\n\nclass NetworkException extends Exception {}\n\nfunction simulateNetworkTraffic($packetLossProbability) {\n    if (mt_rand(1, 100) <= $packetLossProbability) {\n        throw new NetworkException(\"Packet loss occurred!\");\n    }\n    return \"Packet sent successfully.\";\n}\n\n$packetLossProbability = 20; // 20% chance of packet loss\n\ntry {\n    echo simulateNetworkTraffic($packetLossProbability);\n} catch (NetworkException $e) {\n    echo \"Error: \" . $e->getMessage();\n}\n\n?>\n```"
  },
  {
    "task": "Develop a function that processes XML data and catches any structural exceptions.",
    "code": "```php\n<?php\n\nfunction processXmlData($xmlString) {\n    try {\n        $xml = new SimpleXMLElement($xmlString);\n        // Process the XML data here...\n    } catch (Exception $e) {\n        echo \"Error processing XML data: \" . $e->getMessage();\n    }\n}\n\n// Example usage\n$xmlData = '<root><item>Value</item></root>';\nprocessXmlData($xmlData);\n\n?>\n```"
  },
  {
    "task": "Design a program that handles exceptions when accessing environment variables.",
    "code": "```php\n<?php\n\nfunction getEnvVariable($key) {\n    try {\n        $value = getenv($key);\n        if ($value === false) {\n            throw new Exception(\"Environment variable '$key' not found.\");\n        }\n        return $value;\n    } catch (Exception $e) {\n        echo 'Error: ' . $e->getMessage();\n    }\n}\n\n// Example usage\n$var = getEnvVariable('HOME');\nif ($var !== null) {\n    echo \"Environment variable value: $var\";\n}\n\n?>\n```"
  },
  {
    "task": "Write a function that calculates factorial and manages exceptions for negative input values.",
    "code": "```php\nfunction calculateFactorial($number) {\n    if ($number < 0) {\n        throw new InvalidArgumentException(\"Negative numbers are not allowed.\");\n    }\n    $factorial = 1;\n    for ($i = 1; $i <= $number; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\ntry {\n    echo calculateFactorial(5);\n} catch (InvalidArgumentException $e) {\n    echo \"Error: \" . $e->getMessage();\n}\n```"
  },
  {
    "task": "Create a software tool that converts file formats and handles unsupported format exceptions.",
    "code": "```php\n<?php\n\nclass UnsupportedFormatException extends Exception {}\n\nclass FileConverter {\n    protected $supportedFormats = ['txt', 'csv', 'json'];\n\n    public function convert($filePath, $targetFormat) {\n        $fileInfo = pathinfo($filePath);\n        $sourceFormat = $fileInfo['extension'];\n\n        if (!in_array($sourceFormat, $this->supportedFormats)) {\n            throw new UnsupportedFormatException(\"Source format '$sourceFormat' is not supported.\");\n        }\n\n        if (!in_array($targetFormat, $this->supportedFormats)) {\n            throw new UnsupportedFormatException(\"Target format '$targetFormat' is not supported.\");\n        }\n\n        // Conversion logic goes here\n\n        return \"File converted from $sourceFormat to $targetFormat successfully.\";\n    }\n}\n\ntry {\n    $converter = new FileConverter();\n    echo $converter->convert('example.txt', 'json');\n} catch (UnsupportedFormatException $e) {\n    echo 'Error: ' . $e->getMessage();\n}\n\n?>\n```"
  },
  {
    "task": "Implement a function that sends HTTP requests and catches exceptions for invalid response status codes.",
    "code": "```php\n<?php\n\nfunction sendHttpRequest($url) {\n    try {\n        $response = file_get_contents($url);\n\n        if ($http_response_header) {\n            $status_line = $http_response_header[0];\n            preg_match('{HTTP\\/\\S*\\s(\\d{3})}', $status_line, $match);\n            $status_code = $match[1];\n\n            if ($status_code >= 400) {\n                throw new Exception(\"HTTP Error: $status_code\");\n            }\n        }\n        \n        return $response;\n    } catch (Exception $e) {\n        echo 'Caught exception: ',  $e->getMessage(), \"\\n\";\n        return null;\n    }\n}\n\n// Example usage\n$response = sendHttpRequest('https://example.com/api/data');\n```"
  },
  {
    "task": "Develop a program that interacts with a message queue and handles message delivery exceptions.",
    "code": "```php\n<?php\n\nclass MessageQueue {\n    public function sendMessage($message) {\n        // Simulating message sending and a possible failure\n        if (rand(0, 1) === 0) {\n            throw new Exception(\"Failed to deliver message.\");\n        }\n        return \"Message delivered successfully.\";\n    }\n}\n\nfunction main() {\n    $queue = new MessageQueue();\n    $message = \"Hello, World!\";\n    \n    try {\n        $result = $queue->sendMessage($message);\n        echo $result . PHP_EOL;\n    } catch (Exception $e) {\n        echo \"Exception: \" . $e->getMessage() . PHP_EOL;\n    }\n}\n\nmain();\n\n?>\n```"
  },
  {
    "task": "Write a function that reads user input and catches exceptions for unexpected data types.",
    "code": "```php\nfunction getInput() {\n    try {\n        $input = readline(\"Enter a number: \");\n        if (!is_numeric($input)) {\n            throw new Exception(\"Invalid input: not a number.\");\n        }\n        return (float)$input;\n    } catch (Exception $e) {\n        echo \"Error: \" . $e->getMessage() . PHP_EOL;\n    }\n}\n\n$number = getInput();\n```"
  },
  {
    "task": "Create a system that processes transactions and manages exceptions for insufficient funds.",
    "code": "```php\n<?php\n\nclass InsufficientFundsException extends Exception {}\n\nclass TransactionSystem {\n    private $balance;\n\n    public function __construct($initialBalance) {\n        $this->balance = $initialBalance;\n    }\n\n    public function processTransaction($amount) {\n        try {\n            $this->withdraw($amount);\n            echo \"Transaction successful. New balance: $\" . $this->balance . \"\\n\";\n        } catch (InsufficientFundsException $e) {\n            echo \"Transaction failed: \" . $e->getMessage() . \"\\n\";\n        }\n    }\n\n    private function withdraw($amount) {\n        if ($amount > $this->balance) {\n            throw new InsufficientFundsException(\"Insufficient funds for this transaction.\");\n        }\n        $this->balance -= $amount;\n    }\n}\n\n// Example usage:\n$transactionSystem = new TransactionSystem(100);\n$transactionSystem->processTransaction(50);\n$transactionSystem->processTransaction(60);\n?>\n```"
  },
  {
    "task": "Design a function that generates random numbers and handles exceptions when the range is invalid.",
    "code": "```php\n<?php\n\nfunction generateRandomNumber($min, $max) {\n    try {\n        if ($min > $max) {\n            throw new InvalidArgumentException(\"Invalid range: min should be less than or equal to max.\");\n        }\n        return rand($min, $max);\n    } catch (InvalidArgumentException $e) {\n        echo \"Exception caught: \" . $e->getMessage();\n    }\n}\n\n// Example usage:\necho generateRandomNumber(10, 5);\n```"
  },
  {
    "task": "Implement a program that performs image processing and catches exceptions for unsupported file dimensions.",
    "code": "```php\n<?php\n\nfunction processImage($imagePath) {\n    try {\n        $imageSize = getimagesize($imagePath);\n        if ($imageSize === false) {\n            throw new Exception(\"Unsupported image file.\");\n        }\n\n        $width = $imageSize[0];\n        $height = $imageSize[1];\n\n        if ($width > 2000 || $height > 2000) {\n            throw new Exception(\"Unsupported file dimensions.\");\n        }\n\n        // Continue processing the image\n        echo \"Image processed successfully with dimensions: {$width}x{$height}\\n\";\n\n    } catch (Exception $e) {\n        echo \"Error: \" . $e->getMessage() . \"\\n\";\n    }\n}\n\n$imagePath = \"path/to/image.jpg\";\nprocessImage($imagePath);\n\n?>\n```"
  },
  {
    "task": "Write a function that manipulates strings and manages exceptions for invalid operations.",
    "code": "```php\n<?php\n\nfunction manipulateString($input, $operation) {\n    try {\n        if (!is_string($input)) {\n            throw new InvalidArgumentException(\"Input must be a string.\");\n        }\n\n        switch ($operation) {\n            case 'reverse':\n                return strrev($input);\n            case 'uppercase':\n                return strtoupper($input);\n            case 'lowercase':\n                return strtolower($input);\n            default:\n                throw new InvalidArgumentException(\"Invalid operation specified.\");\n        }\n    } catch (InvalidArgumentException $e) {\n        return \"Error: \" . $e->getMessage();\n    }\n}\n\n// Example usage\necho manipulateString(\"Hello, World!\", \"reverse\");\necho manipulateString(\"Hello, World!\", \"uppercase\");\necho manipulateString(\"Hello, World!\", \"invalid_operation\");\n\n?>\n```"
  },
  {
    "task": "Create a script that automates tasks and handles exceptions for missing dependencies.",
    "code": "```php\n<?php\n\nclass MissingDependencyException extends Exception {}\n\nfunction checkDependency($dependency) {\n    // Simulate checking for a dependency\n    if (!in_array($dependency, ['dependency1', 'dependency2'])) {\n        throw new MissingDependencyException(\"Missing dependency: $dependency\");\n    }\n}\n\nfunction performAutomatedTasks() {\n    $dependencies = ['dependency1', 'dependency3'];\n\n    foreach ($dependencies as $dependency) {\n        try {\n            checkDependency($dependency);\n            echo \"Successfully checked $dependency.\\n\";\n        } catch (MissingDependencyException $e) {\n            echo $e->getMessage() . \"\\n\";\n        }\n    }\n}\n\nperformAutomatedTasks();\n?>\n```"
  },
  {
    "task": "Develop a function that accesses nested data structures and manages key access exceptions.",
    "code": "```php\nfunction accessNestedData(array $data, array $keys) {\n    try {\n        $current = $data;\n        foreach ($keys as $key) {\n            if (!is_array($current) || !array_key_exists($key, $current)) {\n                throw new Exception(\"Key not found: \" . $key);\n            }\n            $current = $current[$key];\n        }\n        return $current;\n    } catch (Exception $e) {\n        return $e->getMessage();\n    }\n}\n\n$data = [\n    'level1' => [\n        'level2' => [\n            'level3' => 'value'\n        ]\n    ]\n];\n\necho accessNestedData($data, ['level1', 'level2', 'level3']); // Outputs: value\necho accessNestedData($data, ['level1', 'level2', 'missing_key']); // Outputs: Key not found: missing_key\n```"
  },
  {
    "task": "Design a program that synchronizes data between sources and handles data mismatch exceptions.",
    "code": "```php\n<?php\n\nclass DataMismatchException extends Exception {}\n\nclass DataSource {\n    private $data;\n\n    public function __construct(array $data) {\n        $this->data = $data;\n    }\n\n    public function getData(): array {\n        return $this->data;\n    }\n}\n\nclass DataSynchronizer {\n    private $source1;\n    private $source2;\n\n    public function __construct(DataSource $source1, DataSource $source2) {\n        $this->source1 = $source1;\n        $this->source2 = $source2;\n    }\n\n    public function synchronize() {\n        try {\n            $data1 = $this->source1->getData();\n            $data2 = $this->source2->getData();\n\n            if ($data1 !== $data2) {\n                throw new DataMismatchException(\"Data mismatch between sources.\");\n            }\n\n            echo \"Data synchronized successfully.\\n\";\n        } catch (DataMismatchException $e) {\n            echo \"Error: \" . $e->getMessage() . \"\\n\";\n        }\n    }\n}\n\n$source1 = new DataSource(['id' => 1, 'value' => 'A']);\n$source2 = new DataSource(['id' => 1, 'value' => 'B']);\n$synchronizer = new DataSynchronizer($source1, $source2);\n$synchronizer->synchronize();\n\n?>\n```"
  },
  {
    "task": "Write a function that interacts with hardware devices and handles connection failure exceptions.",
    "code": "```php\n<?php\n\nfunction interactWithHardwareDevice() {\n    try {\n        // Simulate interaction with a hardware device\n        if (rand(0, 1)) {\n            throw new Exception(\"Connection to hardware device failed.\");\n        }\n        echo \"Connected to hardware device successfully.\";\n    } catch (Exception $e) {\n        echo \"Error: \" . $e->getMessage();\n    }\n}\n\n// Example usage\ninteractWithHardwareDevice();\n\n?>\n```"
  },
  {
    "task": "Create a tool that compresses files and manages exceptions for unsupported compression formats.",
    "code": "```php\n<?php\n\nclass FileCompressor {\n    protected $supportedFormats = ['zip', 'gz'];\n\n    public function compress($filePath, $format) {\n        try {\n            $this->validateFormat($format);\n            // Assuming compressFile is a function that handles the actual compression\n            $this->compressFile($filePath, $format);\n            echo \"File compressed successfully.\\n\";\n        } catch (UnsupportedFormatException $e) {\n            echo \"Error: \" . $e->getMessage() . \"\\n\";\n        } catch (Exception $e) {\n            echo \"An unexpected error occurred: \" . $e->getMessage() . \"\\n\";\n        }\n    }\n\n    protected function validateFormat($format) {\n        if (!in_array($format, $this->supportedFormats)) {\n            throw new UnsupportedFormatException(\"Unsupported compression format: $format\");\n        }\n    }\n\n    protected function compressFile($filePath, $format) {\n        // Dummy implementation for the sake of example\n        if (!file_exists($filePath)) {\n            throw new Exception(\"File does not exist: $filePath\");\n        }\n        // Actual compression logic would go here\n    }\n}\n\nclass UnsupportedFormatException extends Exception {}\n\n$compressor = new FileCompressor();\n$compressor->compress('example.txt', 'rar'); // Example usage with an unsupported format\n\n?>\n```"
  },
  {
    "task": "Implement a function that parses command-line arguments and handles missing argument exceptions.",
    "code": "```php\n<?php\n\nfunction parseCommandLineArguments($args) {\n    try {\n        if (count($args) < 2) {\n            throw new InvalidArgumentException(\"Missing command-line arguments.\");\n        }\n\n        // Process arguments (assuming first element is the script name)\n        $parsedArgs = array_slice($args, 1);\n\n        return $parsedArgs;\n\n    } catch (InvalidArgumentException $e) {\n        echo \"Error: \" . $e->getMessage() . PHP_EOL;\n        return null;\n    }\n}\n\n$arguments = $argv;\n$result = parseCommandLineArguments($arguments);\n\nif ($result !== null) {\n    print_r($result);\n}\n?>\n```"
  },
  {
    "task": "Develop a program that simulates user interactions and manages timing exceptions.",
    "code": "```php\n<?php\n\nclass TimingException extends Exception {}\n\nfunction simulateUserInteraction($seconds) {\n    if ($seconds < 0) {\n        throw new TimingException(\"Time cannot be negative.\");\n    }\n    echo \"Simulating user interaction for $seconds seconds.\\n\";\n}\n\nfunction main() {\n    try {\n        simulateUserInteraction(5);\n        simulateUserInteraction(-2); // This will trigger the exception\n    } catch (TimingException $e) {\n        echo \"Caught timing exception: \" . $e->getMessage() . \"\\n\";\n    } catch (Exception $e) {\n        echo \"Caught a general exception: \" . $e->getMessage() . \"\\n\";\n    } finally {\n        echo \"Finished user interaction simulations.\\n\";\n    }\n}\n\nmain();\n?>\n```"
  },
  {
    "task": "Write a function that encrypts data and handles exceptions for unsupported encryption algorithms.",
    "code": "```php\n<?php\n\nfunction encryptData($data, $algorithm, $key) {\n    try {\n        if (!in_array($algorithm, openssl_get_cipher_methods())) {\n            throw new Exception(\"Unsupported encryption algorithm: $algorithm\");\n        }\n        $ivLength = openssl_cipher_iv_length($algorithm);\n        $iv = openssl_random_pseudo_bytes($ivLength);\n        $encryptedData = openssl_encrypt($data, $algorithm, $key, 0, $iv);\n        if ($encryptedData === false) {\n            throw new Exception(\"Encryption failed.\");\n        }\n        return base64_encode($iv . $encryptedData);\n    } catch (Exception $e) {\n        return 'Error: ' . $e->getMessage();\n    }\n}\n\n?>\n```"
  },
  {
    "task": "Create a system that aggregates data and manages exceptions for data inconsistency.",
    "code": "```php\n<?php\n\nclass DataAggregator {\n    private $data = [];\n\n    public function addData(array $newData) {\n        try {\n            $this->validateData($newData);\n            $this->data = array_merge($this->data, $newData);\n        } catch (Exception $e) {\n            echo \"Error: \" . $e->getMessage();\n        }\n    }\n\n    private function validateData(array $data) {\n        foreach ($data as $key => $value) {\n            if (!is_string($key) || !is_numeric($value)) {\n                throw new Exception(\"Data inconsistency detected: Invalid key-value pair.\");\n            }\n        }\n    }\n\n    public function getData() {\n        return $this->data;\n    }\n}\n\n$aggregator = new DataAggregator();\n\n$aggregator->addData(['item1' => 10, 'item2' => 20]);\n$aggregator->addData(['item3' => 'invalid']); // This will trigger an exception\n\nprint_r($aggregator->getData());\n\n?>\n```"
  },
  {
    "task": "Design a program that processes real-time data streams and handles connection drop exceptions.",
    "code": "```php\n<?php\n\nclass DataStreamProcessor {\n    public function processStream($connection) {\n        try {\n            while (true) {\n                $data = $this->readFromStream($connection);\n                if ($data === null) {\n                    throw new Exception(\"Connection dropped\");\n                }\n                $this->handleData($data);\n            }\n        } catch (Exception $e) {\n            $this->handleException($e);\n        }\n    }\n\n    private function readFromStream($connection) {\n        // Simulate reading data from the stream\n        if (rand(0, 10) > 8) { // Simulate connection drop\n            return null;\n        }\n        return \"data\";\n    }\n\n    private function handleData($data) {\n        echo \"Processing: $data\\n\";\n    }\n\n    private function handleException(Exception $e) {\n        echo \"Error: \" . $e->getMessage() . \"\\n\";\n    }\n}\n\n$processor = new DataStreamProcessor();\n$processor->processStream(null);\n```"
  },
  {
    "task": "Implement a function that performs scientific calculations and manages precision exceptions.",
    "code": "```php\n<?php\n\nfunction scientificCalculation($a, $b) {\n    try {\n        if (!is_numeric($a) || !is_numeric($b)) {\n            throw new InvalidArgumentException(\"Inputs must be numbers.\");\n        }\n        \n        // Example calculation: power of $a to $b\n        $result = pow($a, $b);\n        \n        if (is_infinite($result)) {\n            throw new OverflowException(\"Calculation result is too large.\");\n        }\n        \n        if (is_nan($result)) {\n            throw new UnexpectedValueException(\"Calculation result is not a number.\");\n        }\n        \n        return $result;\n        \n    } catch (InvalidArgumentException $e) {\n        echo \"Error: \" . $e->getMessage();\n    } catch (OverflowException $e) {\n        echo \"Error: \" . $e->getMessage();\n    } catch (UnexpectedValueException $e) {\n        echo \"Error: \" . $e->getMessage();\n    } catch (Exception $e) {\n        echo \"An unexpected error occurred: \" . $e->getMessage();\n    }\n}\n\n// Example usage\necho scientificCalculation(2, 1000);\n```"
  },
  {
    "task": "Write a script that generates reports and handles exceptions for missing data sources.",
    "code": "```php\n<?php\n\nfunction generateReport($dataSource) {\n    if (!file_exists($dataSource)) {\n        throw new Exception(\"Data source not found: $dataSource\");\n    }\n    \n    // Simulate report generation\n    echo \"Report generated successfully using data source: $dataSource\\n\";\n}\n\n$dataSources = ['data1.csv', 'data2.csv', 'missing_data.csv'];\n\nforeach ($dataSources as $dataSource) {\n    try {\n        generateReport($dataSource);\n    } catch (Exception $e) {\n        echo \"Error: \" . $e->getMessage() . \"\\n\";\n    }\n}\n\n?>\n```"
  },
  {
    "task": "Create a program that validates digital certificates and manages trust exceptions.",
    "code": "```php\n<?php\n\nclass CertificateException extends Exception {}\n\nclass CertificateValidator {\n    private $trustedCertificates;\n\n    public function __construct(array $trustedCertificates) {\n        $this->trustedCertificates = $trustedCertificates;\n    }\n\n    public function validateCertificate($certificate) {\n        try {\n            if (!$this->isTrusted($certificate)) {\n                throw new CertificateException('Certificate is not trusted.');\n            }\n            echo \"Certificate is valid and trusted.\\n\";\n        } catch (CertificateException $e) {\n            echo \"Validation error: \" . $e->getMessage() . \"\\n\";\n            $this->handleTrustException($certificate);\n        }\n    }\n\n    private function isTrusted($certificate) {\n        // Dummy trust check for example purposes\n        return in_array($certificate, $this->trustedCertificates);\n    }\n\n    private function handleTrustException($certificate) {\n        echo \"Do you want to trust this certificate? (yes/no): \";\n        $handle = fopen (\"php://stdin\",\"r\");\n        $line = fgets($handle);\n        if (trim($line) == 'yes') {\n            $this->trustedCertificates[] = $certificate;\n            echo \"Certificate has been added to trusted list.\\n\";\n        } else {\n            echo \"Certificate not trusted.\\n\";\n        }\n        fclose($handle);\n    }\n}\n\n$trustedCerts = ['cert1', 'cert2', 'cert3'];\n$validator = new CertificateValidator($trustedCerts);\n\n$validator->validateCertificate('cert4');\n```"
  },
  {
    "task": "Develop a function that schedules tasks and handles exceptions for scheduling conflicts.",
    "code": "```php\n<?php\n\nclass SchedulingConflictException extends Exception {}\n\nclass TaskScheduler {\n    private $scheduledTasks = [];\n\n    public function scheduleTask($task, $time) {\n        try {\n            $this->checkForConflicts($time);\n            $this->scheduledTasks[] = ['task' => $task, 'time' => $time];\n            echo \"Task scheduled successfully.\\n\";\n        } catch (SchedulingConflictException $e) {\n            echo \"Error: \" . $e->getMessage() . \"\\n\";\n        } catch (Exception $e) {\n            echo \"An unexpected error occurred: \" . $e->getMessage() . \"\\n\";\n        }\n    }\n\n    private function checkForConflicts($time) {\n        foreach ($this->scheduledTasks as $scheduledTask) {\n            if ($scheduledTask['time'] == $time) {\n                throw new SchedulingConflictException(\"Scheduling conflict at time: \" . $time);\n            }\n        }\n    }\n}\n\n// Example usage\n$scheduler = new TaskScheduler();\n$scheduler->scheduleTask('Task 1', '2023-10-01 10:00');\n$scheduler->scheduleTask('Task 2', '2023-10-01 10:00');\n?>\n```"
  },
  {
    "task": "Design a system that manages user sessions and handles session timeout exceptions.",
    "code": "```php\n<?php\n\nclass SessionTimeoutException extends Exception {}\n\nclass SessionManager {\n    private $sessionLifetime;\n\n    public function __construct($lifetimeInSeconds) {\n        $this->sessionLifetime = $lifetimeInSeconds;\n        session_start();\n    }\n\n    public function startSession($userId) {\n        $_SESSION['user_id'] = $userId;\n        $_SESSION['start_time'] = time();\n    }\n\n    public function checkSession() {\n        if (!isset($_SESSION['start_time'])) {\n            throw new SessionTimeoutException(\"Session not started.\");\n        }\n\n        if (time() - $_SESSION['start_time'] > $this->sessionLifetime) {\n            $this->endSession();\n            throw new SessionTimeoutException(\"Session timed out.\");\n        }\n    }\n\n    public function endSession() {\n        session_unset();\n        session_destroy();\n    }\n}\n\ntry {\n    $sessionManager = new SessionManager(3600); // 1 hour session lifetime\n    $sessionManager->startSession(1); // Start session for user with ID 1\n\n    // Simulate some processing\n    sleep(2);\n\n    $sessionManager->checkSession(); // Check if session is still valid\n\n    echo \"Session is active.\";\n\n} catch (SessionTimeoutException $e) {\n    echo \"Error: \" . $e->getMessage();\n}\n\n```"
  },
  {
    "task": "Write a function that processes audio files and manages exceptions for unsupported audio formats.",
    "code": "```php\n<?php\n\nfunction processAudioFile($filePath) {\n    try {\n        $supportedFormats = ['mp3', 'wav', 'flac'];\n        $fileExtension = pathinfo($filePath, PATHINFO_EXTENSION);\n\n        if (!in_array($fileExtension, $supportedFormats)) {\n            throw new Exception(\"Unsupported audio format: $fileExtension\");\n        }\n\n        // Process the audio file (dummy processing for illustration)\n        echo \"Processing audio file: $filePath\\n\";\n\n    } catch (Exception $e) {\n        echo \"Error: \" . $e->getMessage() . \"\\n\";\n    }\n}\n\n// Example usage\nprocessAudioFile(\"song.mp3\");\nprocessAudioFile(\"track.ogg\");\n\n?>\n```"
  },
  {
    "task": "Create a service that sends notifications and handles exceptions for unreachable destinations.",
    "code": "```php\n<?php\n\nclass NotificationService\n{\n    public function sendNotification($destination, $message)\n    {\n        try {\n            $this->send($destination, $message);\n            echo \"Notification sent successfully to $destination.\" . PHP_EOL;\n        } catch (Exception $e) {\n            echo \"Failed to send notification: \" . $e->getMessage() . PHP_EOL;\n        }\n    }\n\n    private function send($destination, $message)\n    {\n        if (!$this->isDestinationReachable($destination)) {\n            throw new Exception(\"Destination $destination is unreachable.\");\n        }\n        // Simulate sending notification\n        // ...\n    }\n\n    private function isDestinationReachable($destination)\n    {\n        // Simulate destination reachability check\n        // Assume destinations starting with \"unreachable\" are not reachable\n        return strpos($destination, 'unreachable') !== 0;\n    }\n}\n\n// Example usage\n$service = new NotificationService();\n$service->sendNotification(\"unreachable@example.com\", \"Hello!\");\n$service->sendNotification(\"reachable@example.com\", \"Hi there!\");\n```"
  },
  {
    "task": "Implement a program that performs data migration and manages data transformation exceptions.",
    "code": "```php\n<?php\n\nclass DataMigrationException extends Exception {}\n\nfunction transformData($data) {\n    if (!is_array($data)) {\n        throw new DataMigrationException(\"Data must be an array.\");\n    }\n    // Simulate transformation logic\n    return array_map('strtoupper', $data);\n}\n\nfunction migrateData($data) {\n    try {\n        $transformedData = transformData($data);\n        // Simulate migration logic\n        echo \"Data migrated successfully: \" . implode(', ', $transformedData) . \"\\n\";\n    } catch (DataMigrationException $e) {\n        echo \"Data migration failed: \" . $e->getMessage() . \"\\n\";\n    }\n}\n\n$dataSet = [\"apple\", \"banana\", \"cherry\"];\nmigrateData($dataSet); // Should succeed\n\n$invalidDataSet = \"invalid data\";\nmigrateData($invalidDataSet); // Should fail\n?>\n```"
  },
  {
    "task": "Develop a function that processes video files and handles codec compatibility exceptions.",
    "code": "```php\n<?php\n\nfunction processVideoFile($videoFilePath) {\n    try {\n        if (!file_exists($videoFilePath)) {\n            throw new Exception(\"File not found.\");\n        }\n\n        $codec = getCodecFromFile($videoFilePath);\n        if (!isCodecCompatible($codec)) {\n            throw new Exception(\"Codec compatibility issue.\");\n        }\n\n        // Process the video file assuming codec is compatible\n        // processVideo($videoFilePath);\n\n        return \"Video processed successfully.\";\n    } catch (Exception $e) {\n        return \"Error: \" . $e->getMessage();\n    }\n}\n\nfunction getCodecFromFile($filePath) {\n    // Placeholder function to determine codec from file\n    return 'unsupported_codec';\n}\n\nfunction isCodecCompatible($codec) {\n    // Placeholder function to check codec compatibility\n    $supportedCodecs = ['h264', 'vp9'];\n    return in_array($codec, $supportedCodecs);\n}\n\n// Example usage: \n// echo processVideoFile(\"example_video.mp4\");\n\n?>\n```"
  },
  {
    "task": "Write a function that manages memory allocation and catches out-of-memory exceptions.",
    "code": "```php\n<?php\n\nfunction allocateMemory($size) {\n    try {\n        $memory = str_repeat('a', $size);\n        return $memory;\n    } catch (Exception $e) {\n        echo 'Caught exception: ',  $e->getMessage(), \"\\n\";\n        return null;\n    }\n}\n\n// Example usage\n$memoryBlock = allocateMemory(1024 * 1024 * 1024); // Attempt to allocate 1GB\nif ($memoryBlock === null) {\n    echo \"Failed to allocate memory.\";\n} else {\n    echo \"Memory allocated successfully.\";\n}\n?>\n```"
  },
  {
    "task": "Create a program that processes financial transactions and handles currency conversion exceptions.",
    "code": "```php\n<?php\n\nclass CurrencyConversionException extends Exception {}\n\nfunction convertCurrency($amount, $fromCurrency, $toCurrency) {\n    $exchangeRates = [\n        'USD' => ['EUR' => 0.85, 'GBP' => 0.76],\n        'EUR' => ['USD' => 1.18, 'GBP' => 0.89],\n        'GBP' => ['USD' => 1.32, 'EUR' => 1.12],\n    ];\n\n    if (!isset($exchangeRates[$fromCurrency][$toCurrency])) {\n        throw new CurrencyConversionException(\"Conversion rate from $fromCurrency to $toCurrency not found.\");\n    }\n\n    $rate = $exchangeRates[$fromCurrency][$toCurrency];\n    return $amount * $rate;\n}\n\nfunction processTransaction($amount, $fromCurrency, $toCurrency) {\n    try {\n        $convertedAmount = convertCurrency($amount, $fromCurrency, $toCurrency);\n        echo \"Converted amount: $convertedAmount $toCurrency\\n\";\n    } catch (CurrencyConversionException $e) {\n        echo \"Error: \" . $e->getMessage() . \"\\n\";\n    }\n}\n\n// Example transactions\nprocessTransaction(100, 'USD', 'EUR');\nprocessTransaction(100, 'USD', 'JPY');  // This will trigger an exception\n?>\n```"
  },
  {
    "task": "Design a function that interacts with cloud storage and manages access permission exceptions.",
    "code": "```php\n<?php\n\nfunction accessCloudStorage($action, $resource) {\n    try {\n        // Simulating cloud storage interaction\n        if ($action === 'read') {\n            // Simulate permission check\n            if (!hasReadPermission($resource)) {\n                throw new Exception(\"Access Denied: Read Permission Required\");\n            }\n            // Simulate reading data\n            return readDataFromCloud($resource);\n        } elseif ($action === 'write') {\n            // Simulate permission check\n            if (!hasWritePermission($resource)) {\n                throw new Exception(\"Access Denied: Write Permission Required\");\n            }\n            // Simulate writing data\n            writeDataToCloud($resource);\n            return \"Data written successfully.\";\n        } else {\n            throw new Exception(\"Invalid Action\");\n        }\n    } catch (Exception $e) {\n        return \"Error: \" . $e->getMessage();\n    }\n}\n\nfunction hasReadPermission($resource) {\n    // Simulate a permission check\n    return true; // Assume permission is granted for simplification\n}\n\nfunction hasWritePermission($resource) {\n    // Simulate a permission check\n    return false; // Assume permission is denied for simplification\n}\n\nfunction readDataFromCloud($resource) {\n    // Simulate reading from cloud storage\n    return \"Data from \" . $resource;\n}\n\nfunction writeDataToCloud($resource) {\n    // Simulate writing to cloud storage\n}\n\n// Example usage\necho accessCloudStorage('read', 'exampleResource'); // Should succeed\necho accessCloudStorage('write', 'exampleResource'); // Should fail\n\n?>\n```"
  },
  {
    "task": "Implement a script that automates deployment and handles exceptions for missing configuration files.",
    "code": "```php\n<?php\n\nclass DeploymentException extends Exception {}\n\nfunction loadConfiguration(string $filePath): array {\n    if (!file_exists($filePath)) {\n        throw new DeploymentException(\"Configuration file not found: $filePath\");\n    }\n    \n    $config = parse_ini_file($filePath);\n    if ($config === false) {\n        throw new DeploymentException(\"Failed to parse configuration file: $filePath\");\n    }\n    \n    return $config;\n}\n\nfunction deploy(string $configFilePath) {\n    try {\n        $config = loadConfiguration($configFilePath);\n        // Perform deployment using the configuration\n        echo \"Deployment successful with configuration: \" . json_encode($config) . \"\\n\";\n    } catch (DeploymentException $e) {\n        echo \"Deployment failed: \" . $e->getMessage() . \"\\n\";\n    }\n}\n\n// Example usage\n$configFilePath = 'config.ini';\ndeploy($configFilePath);\n\n?>\n```"
  },
  {
    "task": "Write a function that normalizes data and handles exceptions for invalid data ranges.",
    "code": "```php\n<?php\n\nfunction normalizeData($value, $min, $max) {\n    try {\n        if (!is_numeric($value) || !is_numeric($min) || !is_numeric($max)) {\n            throw new InvalidArgumentException(\"All inputs must be numeric.\");\n        }\n        if ($min >= $max) {\n            throw new RangeException(\"Minimum must be less than maximum.\");\n        }\n        if ($value < $min || $value > $max) {\n            throw new OutOfRangeException(\"Value is out of range.\");\n        }\n        return ($value - $min) / ($max - $min);\n    } catch (InvalidArgumentException $e) {\n        echo \"Invalid Argument: \" . $e->getMessage() . \"\\n\";\n        return null;\n    } catch (RangeException $e) {\n        echo \"Range Error: \" . $e->getMessage() . \"\\n\";\n        return null;\n    } catch (OutOfRangeException $e) {\n        echo \"Out of Range: \" . $e->getMessage() . \"\\n\";\n        return null;\n    }\n}\n\n// Example usage\n$result = normalizeData(5, 0, 10);\nif ($result !== null) {\n    echo \"Normalized Value: \" . $result . \"\\n\";\n}\n```"
  },
  {
    "task": "Create a system that monitors application performance and handles threshold breach exceptions.",
    "code": "```php\n<?php\n\nclass PerformanceException extends Exception {}\n\nclass PerformanceMonitor {\n    private $threshold;\n\n    public function __construct($threshold) {\n        $this->threshold = $threshold;\n    }\n\n    public function checkPerformance($metric) {\n        if ($metric > $this->threshold) {\n            throw new PerformanceException(\"Threshold breached: ${metric}\");\n        }\n        return \"Performance is within acceptable limits.\";\n    }\n}\n\nfunction monitorApplication($metric) {\n    $threshold = 75;\n    $monitor = new PerformanceMonitor($threshold);\n\n    try {\n        $result = $monitor->checkPerformance($metric);\n        echo $result;\n    } catch (PerformanceException $e) {\n        echo \"Exception caught: \" . $e->getMessage();\n    }\n}\n\n// Example usage\nmonitorApplication(80);\n```"
  },
  {
    "task": "Develop a program that processes social media data and manages API limit exceptions.",
    "code": "```php\n<?php\n\nclass SocialMediaAPIException extends Exception {}\n\nclass SocialMediaDataProcessor {\n    private $apiLimit = 1000; // Example limit\n    private $apiCalls = 0;\n\n    public function processData($data) {\n        try {\n            $this->checkApiLimit();\n            // Placeholder for data processing logic\n            echo \"Processing data: \" . $data . \"\\n\";\n            $this->apiCalls++;\n        } catch (SocialMediaAPIException $e) {\n            echo \"Error: \" . $e->getMessage() . \"\\n\";\n        }\n    }\n\n    private function checkApiLimit() {\n        if ($this->apiCalls >= $this->apiLimit) {\n            throw new SocialMediaAPIException(\"API limit exceeded\");\n        }\n    }\n}\n\n$processor = new SocialMediaDataProcessor();\n$testData = [\"post1\", \"post2\", \"post3\"];\n\nforeach ($testData as $data) {\n    $processor->processData($data);\n}\n?>\n```"
  },
  {
    "task": "Design a function that integrates with payment gateways and handles payment failure exceptions.",
    "code": "```php\n<?php\n\nfunction processPayment($amount, $paymentGateway) {\n    try {\n        // Simulate integration with a payment gateway\n        $transactionResult = $paymentGateway->charge($amount);\n\n        if (!$transactionResult) {\n            throw new Exception('Payment failed.');\n        }\n\n        return \"Payment successful.\";\n    } catch (Exception $e) {\n        return \"Error: \" . $e->getMessage();\n    }\n}\n\n// Example usage\nclass MockPaymentGateway {\n    public function charge($amount) {\n        // Simulate a payment failure\n        return false;\n    }\n}\n\n$gateway = new MockPaymentGateway();\necho processPayment(100, $gateway);\n\n?>\n```"
  },
  {
    "task": "Write a function that backs up data and handles exceptions for unavailable storage media.",
    "code": "```php\n<?php\n\nfunction backupData($data) {\n    try {\n        if (!isStorageAvailable()) {\n            throw new Exception(\"Storage media is unavailable.\");\n        }\n\n        // Simulate data backup\n        echo \"Backing up data: \" . $data . \"\\n\";\n        \n    } catch (Exception $e) {\n        echo \"Error: \" . $e->getMessage() . \"\\n\";\n    }\n}\n\nfunction isStorageAvailable() {\n    // Simulate storage availability check\n    return false;\n}\n\n// Example usage\nbackupData(\"Important Data\");\n?>\n```"
  },
  {
    "task": "Create a tool that manages software updates and handles exceptions for version conflicts.",
    "code": "```php\n<?php\n\nclass VersionConflictException extends Exception {}\n\nclass SoftwareUpdateManager {\n    private $currentVersion;\n\n    public function __construct($currentVersion) {\n        $this->currentVersion = $currentVersion;\n    }\n\n    public function updateSoftware($newVersion) {\n        try {\n            if ($this->isVersionConflict($newVersion)) {\n                throw new VersionConflictException(\"Version conflict: current version is {$this->currentVersion}, new version is {$newVersion}\");\n            }\n            $this->currentVersion = $newVersion;\n            echo \"Software updated successfully to version {$this->currentVersion}.\";\n        } catch (VersionConflictException $e) {\n            echo \"Update failed: \" . $e->getMessage();\n        }\n    }\n\n    private function isVersionConflict($newVersion) {\n        // A simple version conflict check: new version must be greater than current version\n        return version_compare($this->currentVersion, $newVersion, '>=');\n    }\n}\n\n// Usage example:\n$updateManager = new SoftwareUpdateManager('1.0.0');\n$updateManager->updateSoftware('1.0.1'); // Successful update\n$updateManager->updateSoftware('0.9.9'); // Version conflict\n?>\n```"
  },
  {
    "task": "Implement a program that performs sentiment analysis and manages exceptions for ambiguous texts.",
    "code": "```php\n<?php\n\nclass SentimentAnalyzer\n{\n    public function analyze($text)\n    {\n        // Dummy sentiment analysis logic\n        if (empty($text)) {\n            throw new Exception(\"Text cannot be empty.\");\n        }\n        \n        // Assume every text containing 'ambiguous' is considered ambiguous for this example\n        if (strpos($text, 'ambiguous') !== false) {\n            throw new Exception(\"Text is ambiguous and cannot be analyzed.\");\n        }\n\n        // Return a dummy sentiment\n        return \"Positive\";\n    }\n}\n\nfunction performSentimentAnalysis($text)\n{\n    $analyzer = new SentimentAnalyzer();\n    \n    try {\n        $sentiment = $analyzer->analyze($text);\n        echo \"Sentiment: \" . $sentiment . \"\\n\";\n    } catch (Exception $e) {\n        echo \"Error: \" . $e->getMessage() . \"\\n\";\n    }\n}\n\n// Example usage\nperformSentimentAnalysis(\"This is an ambiguous text.\");\nperformSentimentAnalysis(\"This is a clear text.\");\nperformSentimentAnalysis(\"\");\n?>\n```"
  },
  {
    "task": "Develop a function that manages user authentication and handles credential mismatch exceptions.",
    "code": "```php\n<?php\n\nclass AuthenticationException extends Exception {}\n\nfunction authenticateUser($username, $password) {\n    $storedUsername = 'admin';\n    $storedPassword = 'password123';\n\n    if ($username !== $storedUsername || $password !== $storedPassword) {\n        throw new AuthenticationException('Invalid credentials provided.');\n    }\n\n    return \"User authenticated successfully.\";\n}\n\ntry {\n    $result = authenticateUser('admin', 'wrongpassword');\n    echo $result;\n} catch (AuthenticationException $ex) {\n    echo $ex->getMessage();\n}\n\n?>\n```"
  },
  {
    "task": "Write a program that processes geographic data and handles exceptions for invalid coordinates.",
    "code": "```php\n<?php\n\nclass InvalidCoordinateException extends Exception {}\n\nfunction processGeographicData($latitude, $longitude) {\n    if ($latitude < -90 || $latitude > 90) {\n        throw new InvalidCoordinateException(\"Invalid latitude: $latitude. Must be between -90 and 90.\");\n    }\n    if ($longitude < -180 || $longitude > 180) {\n        throw new InvalidCoordinateException(\"Invalid longitude: $longitude. Must be between -180 and 180.\");\n    }\n\n    // Process valid coordinates here\n    return \"Coordinates ($latitude, $longitude) are valid.\";\n}\n\ntry {\n    $latitude = 95.0; // Example of invalid latitude\n    $longitude = 50.0; // Example of valid longitude\n    echo processGeographicData($latitude, $longitude);\n} catch (InvalidCoordinateException $e) {\n    echo \"Error: \" . $e->getMessage();\n}\n```"
  },
  {
    "task": "Create a script that manages network configurations and handles exceptions for invalid syntax.",
    "code": "```php\n<?php\n\nfunction loadNetworkConfig($configPath) {\n    if (!file_exists($configPath)) {\n        throw new Exception(\"Configuration file not found.\");\n    }\n\n    $configContent = file_get_contents($configPath);\n    if ($configContent === false) {\n        throw new Exception(\"Failed to read configuration file.\");\n    }\n\n    $config = parse_ini_string($configContent, true);\n    if ($config === false) {\n        throw new Exception(\"Invalid configuration syntax.\");\n    }\n\n    return $config;\n}\n\ntry {\n    $config = loadNetworkConfig('network_config.ini');\n    echo \"Network configuration loaded successfully.\";\n    // Further processing of $config\n} catch (Exception $e) {\n    echo \"Error: \" . $e->getMessage();\n}\n```"
  },
  {
    "task": "Design a function that processes biometric data and handles exceptions for sensor errors.",
    "code": "```php\n<?php\n\nfunction processBiometricData($data) {\n    try {\n        if (!is_array($data)) {\n            throw new Exception(\"Invalid data format. Array expected.\");\n        }\n\n        foreach ($data as $sensor => $value) {\n            if ($value === null) {\n                throw new Exception(\"Sensor error detected: $sensor has no data.\");\n            }\n            // Process the biometric data here\n        }\n\n        return \"Biometric data processed successfully.\";\n        \n    } catch (Exception $e) {\n        return \"Error: \" . $e->getMessage();\n    }\n}\n\n// Example usage\n$biometricData = [\n    'sensor1' => 98.6,\n    'sensor2' => null, // Simulating a sensor error\n    'sensor3' => 76.4\n];\n\necho processBiometricData($biometricData);\n\n?>\n```"
  },
  {
    "task": "Implement a system that manages access control and handles exceptions for unauthorized access attempts.",
    "code": "```php\n<?php\n\nclass UnauthorizedAccessException extends Exception\n{\n    public function __construct($message = \"Unauthorized access attempt\", $code = 0, Exception $previous = null)\n    {\n        parent::__construct($message, $code, $previous);\n    }\n}\n\nclass AccessControlSystem\n{\n    private $authorizedUsers;\n\n    public function __construct($authorizedUsers)\n    {\n        $this->authorizedUsers = $authorizedUsers;\n    }\n\n    public function checkAccess($user)\n    {\n        if (!in_array($user, $this->authorizedUsers)) {\n            throw new UnauthorizedAccessException(\"User '$user' is not authorized.\");\n        }\n        return \"Access granted to user '$user'.\";\n    }\n}\n\n// Example usage\n$authorizedUsers = ['Alice', 'Bob', 'Charlie'];\n$accessControl = new AccessControlSystem($authorizedUsers);\n\ntry {\n    echo $accessControl->checkAccess('Dave');\n} catch (UnauthorizedAccessException $e) {\n    echo $e->getMessage();\n}\n\n?>\n```"
  },
  {
    "task": "Write a function that performs load balancing and handles exceptions for unreachable nodes.",
    "code": "```php\n<?php\n\nclass NodeUnavailableException extends Exception {}\n\nfunction loadBalance($nodes) {\n    foreach ($nodes as $node) {\n        try {\n            if (!isNodeReachable($node)) {\n                throw new NodeUnavailableException(\"Node {$node} is unreachable.\");\n            }\n            // Perform load balancing operation\n            return \"Connected to node: {$node}\";\n        } catch (NodeUnavailableException $e) {\n            echo $e->getMessage() . \"\\n\";\n        }\n    }\n    return \"No available nodes for load balancing.\";\n}\n\nfunction isNodeReachable($node) {\n    // Simulate node reachability check\n    return rand(0, 1) === 1;\n}\n\n$nodes = ['node1', 'node2', 'node3'];\necho loadBalance($nodes);\n\n?>\n```"
  },
  {
    "task": "Create a program that simulates virtual environments and manages resource allocation exceptions.",
    "code": "```php\n<?php\n\nclass ResourceAllocationException extends Exception {}\n\nclass VirtualEnvironment {\n    private $resources;\n\n    public function __construct($resources) {\n        $this->resources = $resources;\n    }\n\n    public function allocateResources($requested) {\n        if ($requested > $this->resources) {\n            throw new ResourceAllocationException(\"Requested resources exceed available resources.\");\n        }\n        $this->resources -= $requested;\n        return true;\n    }\n\n    public function releaseResources($released) {\n        $this->resources += $released;\n    }\n\n    public function getAvailableResources() {\n        return $this->resources;\n    }\n}\n\ntry {\n    $env = new VirtualEnvironment(100);\n    $env->allocateResources(120);\n} catch (ResourceAllocationException $e) {\n    echo \"Exception: \" . $e->getMessage();\n}\n\necho \"Available resources: \" . $env->getAvailableResources();\n?>\n```"
  },
  {
    "task": "Develop a tool that manages digital rights and handles exceptions for unauthorized content access.",
    "code": "```php\n<?php\n\nclass DigitalRightsManager {\n    private $authorizedUsers;\n    \n    public function __construct() {\n        $this->authorizedUsers = ['user1', 'user2', 'user3']; // Example authorized users\n    }\n    \n    public function accessContent($user) {\n        try {\n            $this->checkAuthorization($user);\n            echo \"Access granted to content for user: $user\\n\";\n        } catch (UnauthorizedAccessException $e) {\n            echo \"Access denied: \" . $e->getMessage() . \"\\n\";\n        }\n    }\n    \n    private function checkAuthorization($user) {\n        if (!in_array($user, $this->authorizedUsers)) {\n            throw new UnauthorizedAccessException(\"User $user is not authorized to access this content.\");\n        }\n    }\n}\n\nclass UnauthorizedAccessException extends Exception {}\n\n$manager = new DigitalRightsManager();\n$manager->accessContent('user1'); // Should grant access\n$manager->accessContent('unauthorizedUser'); // Should deny access\n\n?>\n```"
  },
  {
    "task": "Design a function that synchronizes clocks and handles exceptions for time drift.",
    "code": "```php\n<?php\n\nfunction synchronizeClocks($serverTime) {\n    try {\n        if (!is_numeric($serverTime)) {\n            throw new Exception(\"Invalid time format.\");\n        }\n\n        $localTime = time();\n        $timeDrift = $localTime - $serverTime;\n\n        if (abs($timeDrift) > 5) { // Allowable drift is 5 seconds\n            throw new Exception(\"Time drift is too large: \" . $timeDrift . \" seconds.\");\n        }\n\n        return \"Clocks synchronized successfully.\";\n    } catch (Exception $e) {\n        return \"Error: \" . $e->getMessage();\n    }\n}\n\n// Example usage\necho synchronizeClocks(1696500000);\n\n?>\n```"
  },
  {
    "task": "Write a script that manages system backups and handles exceptions for insufficient backup space.",
    "code": "```php\n<?php\n\nclass BackupException extends Exception {}\n\nfunction checkBackupSpace($requiredSpace, $availableSpace) {\n    if ($requiredSpace > $availableSpace) {\n        throw new BackupException(\"Insufficient backup space.\");\n    }\n}\n\nfunction performBackup($requiredSpace) {\n    // Assume this function returns available space in GB\n    $availableSpace = getAvailableBackupSpace();\n\n    try {\n        checkBackupSpace($requiredSpace, $availableSpace);\n        // Code to perform backup\n        echo \"Backup completed successfully.\";\n    } catch (BackupException $e) {\n        echo \"Backup failed: \" . $e->getMessage();\n    }\n}\n\nfunction getAvailableBackupSpace() {\n    // Simulated available space in GB\n    return 50;\n}\n\n// Example usage\n$requiredBackupSpace = 100;\nperformBackup($requiredBackupSpace);\n\n?>\n```"
  },
  {
    "task": "Create a program that processes natural language text and handles parsing exceptions.",
    "code": "```php\n<?php\n\nfunction processText($text) {\n    try {\n        if (empty($text)) {\n            throw new Exception(\"Text cannot be empty.\");\n        }\n\n        $parsedText = parseText($text);\n        \n        return $parsedText;\n    } catch (Exception $e) {\n        return \"Error: \" . $e->getMessage();\n    }\n}\n\nfunction parseText($text) {\n    // Simulating a parsing process\n    if (strpos($text, 'error') !== false) {\n        throw new Exception(\"Parsing error occurred.\");\n    }\n    \n    // Assume parsing is successful\n    return strtoupper($text);\n}\n\n$text = \"This is a sample text.\";\n\n$result = processText($text);\necho $result;\n?>\n```"
  },
  {
    "task": "Implement a function that manages thread execution and handles race condition exceptions.",
    "code": "```php\n<?php\n\nclass RaceConditionException extends Exception {}\n\nclass ThreadManager\n{\n    private $lock;\n\n    public function __construct()\n    {\n        $this->lock = fopen(__FILE__, 'r');\n    }\n\n    public function manageThreads(callable $threadFunction)\n    {\n        if (flock($this->lock, LOCK_EX)) {\n            try {\n                $threadFunction();\n            } catch (RaceConditionException $e) {\n                echo \"Race condition handled: \" . $e->getMessage();\n            } finally {\n                flock($this->lock, LOCK_UN);\n            }\n        } else {\n            throw new RaceConditionException(\"Unable to acquire lock.\");\n        }\n    }\n}\n\n$threadManager = new ThreadManager();\n$threadManager->manageThreads(function() {\n    // Simulate thread execution\n    if (rand(0, 1)) {\n        throw new RaceConditionException(\"Simulated race condition.\");\n    }\n    echo \"Thread executed successfully.\";\n});\n\n?>\n```"
  },
  {
    "task": "Develop a system that integrates with IoT devices and handles connectivity exceptions.",
    "code": "```php\n<?php\n\nclass IoTDevice {\n    public function connect() {\n        // Simulate a connection attempt to an IoT device\n        if (rand(0, 1) == 0) {\n            throw new Exception(\"Failed to connect to the IoT device.\");\n        }\n        return \"Connected to IoT device.\";\n    }\n}\n\nclass IoTSystem {\n    private $device;\n\n    public function __construct(IoTDevice $device) {\n        $this->device = $device;\n    }\n\n    public function initializeConnection() {\n        try {\n            $result = $this->device->connect();\n            echo $result;\n        } catch (Exception $e) {\n            echo \"Exception caught: \" . $e->getMessage();\n        }\n    }\n}\n\n$device = new IoTDevice();\n$system = new IoTSystem($device);\n$system->initializeConnection();\n\n?>\n```"
  },
  {
    "task": "Write a function that manages application logging and handles exceptions for log overflow.",
    "code": "```php\n<?php\n\nclass LogOverflowException extends Exception {}\n\nclass Logger {\n    private $logs = [];\n    private $maxLogs;\n\n    public function __construct($maxLogs) {\n        $this->maxLogs = $maxLogs;\n    }\n\n    public function log($message) {\n        if (count($this->logs) >= $this->maxLogs) {\n            throw new LogOverflowException(\"Log overflow: Maximum log entries exceeded.\");\n        }\n        $this->logs[] = $message;\n    }\n\n    public function getLogs() {\n        return $this->logs;\n    }\n}\n\nfunction applicationLogging(Logger $logger, $message) {\n    try {\n        $logger->log($message);\n    } catch (LogOverflowException $e) {\n        echo \"Error: \" . $e->getMessage();\n    }\n}\n\n// Example usage\n$logger = new Logger(3);\napplicationLogging($logger, \"First log entry.\");\napplicationLogging($logger, \"Second log entry.\");\napplicationLogging($logger, \"Third log entry.\");\napplicationLogging($logger, \"This will cause an overflow.\");\n```"
  },
  {
    "task": "Create a tool that visualizes data and handles exceptions for unsupported visualization types.",
    "code": "```php\n<?php\n\nclass UnsupportedVisualizationTypeException extends Exception {}\n\nclass DataVisualizer {\n    private $data;\n\n    public function __construct($data) {\n        $this->data = $data;\n    }\n\n    public function visualize($type) {\n        try {\n            switch ($type) {\n                case 'bar':\n                    $this->visualizeBar();\n                    break;\n                case 'line':\n                    $this->visualizeLine();\n                    break;\n                case 'pie':\n                    $this->visualizePie();\n                    break;\n                default:\n                    throw new UnsupportedVisualizationTypeException(\"Unsupported visualization type: $type\");\n            }\n        } catch (UnsupportedVisualizationTypeException $e) {\n            echo \"Error: \" . $e->getMessage();\n        }\n    }\n\n    private function visualizeBar() {\n        echo \"Visualizing data as a bar chart.\";\n    }\n\n    private function visualizeLine() {\n        echo \"Visualizing data as a line chart.\";\n    }\n\n    private function visualizePie() {\n        echo \"Visualizing data as a pie chart.\";\n    }\n}\n\n// Example usage:\n$data = [1, 2, 3, 4, 5];\n$visualizer = new DataVisualizer($data);\n$visualizer->visualize('bar');  // Supported type\n$visualizer->visualize('scatter');  // Unsupported type\n?>\n```"
  },
  {
    "task": "Design a program that performs genetic algorithm simulations and manages exception for invalid mutations.",
    "code": "```php\n<?php\n\nclass GeneticAlgorithmSimulation {\n    private $population;\n\n    public function __construct(array $initialPopulation) {\n        $this->population = $initialPopulation;\n    }\n\n    public function runSimulation() {\n        try {\n            $this->mutatePopulation();\n            echo \"Simulation completed successfully.\\n\";\n        } catch (InvalidMutationException $e) {\n            echo \"Exception caught: \" . $e->getMessage() . \"\\n\";\n        }\n    }\n\n    private function mutatePopulation() {\n        foreach ($this->population as &$individual) {\n            $this->mutate($individual);\n        }\n    }\n\n    private function mutate(&$individual) {\n        if (rand(0, 10) > 8) {\n            throw new InvalidMutationException(\"Invalid mutation detected.\");\n        }\n        $individual = str_shuffle($individual);\n    }\n}\n\nclass InvalidMutationException extends Exception {}\n\n$initialPopulation = ['AAAA', 'BBBB', 'CCCC', 'DDDD'];\n$simulation = new GeneticAlgorithmSimulation($initialPopulation);\n$simulation->runSimulation();\n\n?>\n```"
  },
  {
    "task": "Implement a function that manages distributed transactions and handles consistency exceptions.",
    "code": "```php\n<?php\n\nclass DistributedTransactionException extends Exception {}\n\nfunction manageTransactions(callable $task) {\n    try {\n        // Begin transaction\n        echo \"Beginning transaction...\\n\";\n        \n        // Execute task\n        $task();\n\n        // Commit transaction\n        echo \"Committing transaction...\\n\";\n    } catch (DistributedTransactionException $e) {\n        // Handle consistency exception\n        echo \"Consistency exception caught: \" . $e->getMessage() . \"\\n\";\n        \n        // Rollback transaction\n        echo \"Rolling back transaction...\\n\";\n    } catch (Exception $e) {\n        // Handle any other exceptions\n        echo \"General exception caught: \" . $e->getMessage() . \"\\n\";\n        \n        // Rollback transaction\n        echo \"Rolling back transaction...\\n\";\n    }\n}\n\n// Example usage\nmanageTransactions(function() {\n    echo \"Performing distributed task...\\n\";\n    \n    // Simulate an exception\n    throw new DistributedTransactionException(\"Consistency error occurred!\");\n});\n```"
  },
  {
    "task": "Write a function that handles secure communications and manages encryption key exceptions.",
    "code": "```php\n<?php\n\nfunction secureCommunication($data, $encryptionKey) {\n    try {\n        if (empty($encryptionKey)) {\n            throw new Exception('Encryption key is missing.');\n        }\n\n        // Example encryption process (for demonstration purposes)\n        $encryptedData = openssl_encrypt($data, 'AES-128-ECB', $encryptionKey);\n        if ($encryptedData === false) {\n            throw new Exception('Encryption failed.');\n        }\n\n        return $encryptedData;\n\n    } catch (Exception $e) {\n        // Handle exceptions related to encryption\n        return 'Error: ' . $e->getMessage();\n    }\n}\n\n// Example usage\n$data = \"Sensitive Information\";\n$encryptionKey = \"securekey123\";\necho secureCommunication($data, $encryptionKey);\n```"
  },
  {
    "task": "Create a system that processes sensor data and handles out-of-range value exceptions.",
    "code": "```php\n<?php\n\nclass OutOfRangeException extends Exception {}\n\nclass SensorDataProcessor {\n    private $minValue;\n    private $maxValue;\n\n    public function __construct($minValue, $maxValue) {\n        $this->minValue = $minValue;\n        $this->maxValue = $maxValue;\n    }\n\n    public function process($value) {\n        try {\n            $this->checkRange($value);\n            echo \"Processing value: $value\\n\";\n        } catch (OutOfRangeException $e) {\n            echo \"Exception: \" . $e->getMessage() . \"\\n\";\n        }\n    }\n\n    private function checkRange($value) {\n        if ($value < $this->minValue || $value > $this->maxValue) {\n            throw new OutOfRangeException(\"Value $value is out of range.\");\n        }\n    }\n}\n\n$processor = new SensorDataProcessor(10, 100);\n$sensorValues = [5, 20, 150, 50];\n\nforeach ($sensorValues as $value) {\n    $processor->process($value);\n}\n\n?>\n```"
  },
  {
    "task": "Develop a program that simulates weather patterns and handles model prediction exceptions.",
    "code": "```php\n<?php\n\nclass WeatherModelException extends Exception {}\n\nclass WeatherModel {\n    public function predictWeather() {\n        // Simulate a random failure in prediction\n        $randomNumber = rand(1, 10);\n        if ($randomNumber > 7) {\n            throw new WeatherModelException(\"Prediction model failed.\");\n        }\n        // Simulate a successful weather prediction\n        $weatherPatterns = [\"Sunny\", \"Rainy\", \"Cloudy\", \"Windy\", \"Stormy\"];\n        return $weatherPatterns[array_rand($weatherPatterns)];\n    }\n}\n\nclass WeatherSimulator {\n    private $model;\n\n    public function __construct() {\n        $this->model = new WeatherModel();\n    }\n\n    public function simulate() {\n        try {\n            $prediction = $this->model->predictWeather();\n            echo \"Weather prediction: \" . $prediction . \"\\n\";\n        } catch (WeatherModelException $e) {\n            echo \"Error: \" . $e->getMessage() . \"\\n\";\n        }\n    }\n}\n\n$simulator = new WeatherSimulator();\n$simulator->simulate();\n\n?>\n```"
  },
  {
    "task": "Design a function that manages API versioning and handles backward compatibility exceptions.",
    "code": "```php\n<?php\n\nclass ApiVersionException extends Exception {}\n\nfunction handleApiVersion($version) {\n    try {\n        switch ($version) {\n            case '1.0':\n                // Code for version 1.0\n                echo \"Handling API version 1.0\\n\";\n                break;\n            case '2.0':\n                // Code for version 2.0\n                echo \"Handling API version 2.0\\n\";\n                break;\n            default:\n                throw new ApiVersionException(\"Unsupported API version: \" . $version);\n        }\n    } catch (ApiVersionException $e) {\n        echo \"Error: \" . $e->getMessage();\n        // Handle backward compatibility or default behavior\n        echo \"Handling default version\\n\";\n    }\n}\n\n// Example usage\nhandleApiVersion('1.0');\nhandleApiVersion('3.0');\n?>\n```"
  },
  {
    "task": "Write a tool that converts character encodings and handles unsupported encoding exceptions.",
    "code": "```php\n<?php\n\nfunction convertEncoding($string, $toEncoding, $fromEncoding = 'UTF-8') {\n    try {\n        $convertedString = mb_convert_encoding($string, $toEncoding, $fromEncoding);\n        if ($convertedString === false) {\n            throw new Exception(\"Conversion failed: Unsupported encoding.\");\n        }\n        return $convertedString;\n    } catch (Exception $e) {\n        echo 'Error: ' . $e->getMessage();\n    }\n}\n\n// Example usage\n$inputString = \"Hello, world!\";\n$toEncoding = \"ISO-8859-1\";\n\n$result = convertEncoding($inputString, $toEncoding);\nif ($result !== null) {\n    echo \"Converted string: \" . $result;\n}\n?>\n```"
  },
  {
    "task": "Create a program that handles dynamic content generation and manages template parsing exceptions.",
    "code": "```php\n<?php\n\nclass TemplateException extends Exception {}\n\nclass TemplateEngine {\n    private $template;\n    \n    public function __construct($template) {\n        $this->template = $template;\n    }\n    \n    public function render($data) {\n        try {\n            return $this->parseTemplate($data);\n        } catch (TemplateException $e) {\n            return \"Error rendering template: \" . $e->getMessage();\n        }\n    }\n    \n    private function parseTemplate($data) {\n        $parsedContent = $this->template;\n        foreach ($data as $key => $value) {\n            if (!is_string($value) && !is_numeric($value)) {\n                throw new TemplateException(\"Invalid data type for key '$key'\");\n            }\n            $parsedContent = str_replace(\"{{\" . $key . \"}}\", $value, $parsedContent);\n        }\n        if (preg_match('/{{\\s*[\\w]+\\s*}}/', $parsedContent)) {\n            throw new TemplateException(\"Unresolved placeholders in template\");\n        }\n        return $parsedContent;\n    }\n}\n\n$template = \"Hello, {{name}}! Welcome to {{site}}.\";\n$data = ['name' => 'John', 'site' => 'Example.com'];\n\n$templateEngine = new TemplateEngine($template);\necho $templateEngine->render($data);\n\n?>\n```"
  },
  {
    "task": "Implement a script that schedules automated tests and handles exceptions for missing test cases.",
    "code": "```php\n<?php\n\nfunction scheduleAutomatedTests($testCases) {\n    try {\n        if (empty($testCases)) {\n            throw new Exception(\"No test cases provided.\");\n        }\n\n        foreach ($testCases as $testCase) {\n            if (!testExists($testCase)) {\n                throw new Exception(\"Test case '{$testCase}' does not exist.\");\n            }\n            echo \"Scheduling test case: {$testCase}\\n\";\n            // Code to schedule the test goes here\n        }\n        \n        echo \"All test cases scheduled successfully.\\n\";\n    } catch (Exception $e) {\n        echo \"Error: \" . $e->getMessage() . \"\\n\";\n    }\n}\n\nfunction testExists($testCase) {\n    // Dummy function to simulate test case existence check\n    // Replace with actual logic to check if the test exists\n    $existingTests = ['test1', 'test2', 'test3'];\n    return in_array($testCase, $existingTests);\n}\n\n// Example test cases\n$testCases = ['test1', 'test4', 'test2'];\nscheduleAutomatedTests($testCases);\n\n?>\n```"
  },
  {
    "task": "Develop a system that manages virtual machine instances and handles provisioning exceptions.",
    "code": "```php\n<?php\n\nclass VirtualMachineException extends Exception {}\n\nclass VirtualMachineManager {\n    private $instances = [];\n\n    public function provisionInstance($instanceId) {\n        try {\n            if (isset($this->instances[$instanceId])) {\n                throw new VirtualMachineException(\"Instance already exists: \" . $instanceId);\n            }\n            // Simulate provisioning logic\n            if (rand(0, 1) === 0) {\n                throw new VirtualMachineException(\"Provisioning failed for instance: \" . $instanceId);\n            }\n            $this->instances[$instanceId] = 'running';\n            echo \"Instance provisioned successfully: \" . $instanceId . PHP_EOL;\n        } catch (VirtualMachineException $e) {\n            echo \"Error: \" . $e->getMessage() . PHP_EOL;\n        }\n    }\n\n    public function getInstanceStatus($instanceId) {\n        if (isset($this->instances[$instanceId])) {\n            return $this->instances[$instanceId];\n        }\n        return \"Instance not found: \" . $instanceId;\n    }\n}\n\n$vmManager = new VirtualMachineManager();\n$instanceIds = ['vm1', 'vm2', 'vm3'];\n\nforeach ($instanceIds as $id) {\n    $vmManager->provisionInstance($id);\n    echo $vmManager->getInstanceStatus($id) . PHP_EOL;\n}\n?>\n```"
  },
  {
    "task": "Write a function that processes credit scores and handles exceptions for missing credit history.",
    "code": "```php\n<?php\n\nfunction processCreditScore($creditScore) {\n    try {\n        if ($creditScore === null) {\n            throw new Exception('Missing credit history');\n        }\n        // Process the credit score\n        return \"Credit score processed: \" . $creditScore;\n    } catch (Exception $e) {\n        return 'Error: ' . $e->getMessage();\n    }\n}\n\n// Example usage\necho processCreditScore(null);\necho processCreditScore(750);\n```"
  },
  {
    "task": "Create a tool that manages digital certificates and handles expiration exceptions.",
    "code": "```php\n<?php\n\nclass CertificateException extends Exception {}\n\nclass Certificate {\n    private $name;\n    private $expirationDate;\n\n    public function __construct($name, $expirationDate) {\n        $this->name = $name;\n        $this->expirationDate = new DateTime($expirationDate);\n    }\n\n    public function checkExpiration() {\n        $currentDate = new DateTime();\n        if ($currentDate > $this->expirationDate) {\n            throw new CertificateException(\"The certificate '{$this->name}' has expired.\");\n        }\n    }\n\n    public function getName() {\n        return $this->name;\n    }\n\n    public function getExpirationDate() {\n        return $this->expirationDate->format('Y-m-d');\n    }\n}\n\nclass CertificateManager {\n    private $certificates = [];\n\n    public function addCertificate(Certificate $certificate) {\n        $this->certificates[] = $certificate;\n    }\n\n    public function validateCertificates() {\n        foreach ($this->certificates as $certificate) {\n            try {\n                $certificate->checkExpiration();\n                echo \"Certificate '{$certificate->getName()}' is valid.\\n\";\n            } catch (CertificateException $e) {\n                echo \"Error: \" . $e->getMessage() . \"\\n\";\n            }\n        }\n    }\n}\n\n// Example usage\n$manager = new CertificateManager();\n$manager->addCertificate(new Certificate(\"Cert1\", \"2022-01-01\"));\n$manager->addCertificate(new Certificate(\"Cert2\", \"2024-12-31\"));\n$manager->validateCertificates();\n\n?>\n```"
  },
  {
    "task": "Design a program that processes genome sequences and handles exceptions for sequence alignment.",
    "code": "```php\n<?php\n\nclass GenomeSequenceException extends Exception {}\n\nclass GenomeSequenceProcessor {\n    public function processSequence(string $sequence1, string $sequence2): string {\n        try {\n            $this->validateSequence($sequence1);\n            $this->validateSequence($sequence2);\n            return $this->alignSequences($sequence1, $sequence2);\n        } catch (GenomeSequenceException $e) {\n            return \"Error: \" . $e->getMessage();\n        }\n    }\n\n    private function validateSequence(string $sequence): void {\n        if (empty($sequence)) {\n            throw new GenomeSequenceException(\"Sequence cannot be empty.\");\n        }\n        if (!preg_match('/^[ATCG]+$/', $sequence)) {\n            throw new GenomeSequenceException(\"Invalid sequence. Only A, T, C, G are allowed.\");\n        }\n    }\n\n    private function alignSequences(string $sequence1, string $sequence2): string {\n        // Placeholder for actual alignment logic\n        if (strlen($sequence1) !== strlen($sequence2)) {\n            throw new GenomeSequenceException(\"Sequences must be of the same length for alignment.\");\n        }\n        return \"Aligned: \" . $sequence1 . \" | \" . $sequence2;\n    }\n}\n\n$processor = new GenomeSequenceProcessor();\necho $processor->processSequence(\"ATCG\", \"TAGC\");\n```"
  }
]