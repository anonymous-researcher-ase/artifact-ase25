[
  {
    "task": "Create a base class for a vehicle with methods for speed and fuel efficiency, then derive a car class that overrides these methods to provide specific implementations.",
    "code": "```php\n<?php\n\nclass Vehicle {\n    public function speed() {\n        return \"Generic vehicle speed\";\n    }\n\n    public function fuelEfficiency() {\n        return \"Generic vehicle fuel efficiency\";\n    }\n}\n\nclass Car extends Vehicle {\n    public function speed() {\n        return \"Car specific speed\";\n    }\n\n    public function fuelEfficiency() {\n        return \"Car specific fuel efficiency\";\n    }\n}\n\n// Example usage\n$car = new Car();\necho $car->speed(); // Output: Car specific speed\necho $car->fuelEfficiency(); // Output: Car specific fuel efficiency\n\n?>\n```"
  },
  {
    "task": "Design a base class for a multimedia file with properties like duration and format, then extend it with a video class that includes resolution and frame rate.",
    "code": "```php\nclass MultimediaFile {\n    protected $duration;\n    protected $format;\n\n    public function __construct($duration, $format) {\n        $this->duration = $duration;\n        $this->format = $format;\n    }\n\n    public function getDuration() {\n        return $this->duration;\n    }\n\n    public function getFormat() {\n        return $this->format;\n    }\n}\n\nclass VideoFile extends MultimediaFile {\n    private $resolution;\n    private $frameRate;\n\n    public function __construct($duration, $format, $resolution, $frameRate) {\n        parent::__construct($duration, $format);\n        $this->resolution = $resolution;\n        $this->frameRate = $frameRate;\n    }\n\n    public function getResolution() {\n        return $this->resolution;\n    }\n\n    public function getFrameRate() {\n        return $this->frameRate;\n    }\n}\n```"
  },
  {
    "task": "Develop a superclass for bank accounts with methods for deposit and withdrawal, then create a savings account subclass that overrides the withdrawal method to incorporate interest deductions.",
    "code": "```php\n<?php\n\nclass BankAccount {\n    protected $balance;\n\n    public function __construct($initialBalance = 0) {\n        $this->balance = $initialBalance;\n    }\n\n    public function deposit($amount) {\n        $this->balance += $amount;\n    }\n\n    public function withdraw($amount) {\n        if ($amount <= $this->balance) {\n            $this->balance -= $amount;\n        }\n    }\n\n    public function getBalance() {\n        return $this->balance;\n    }\n}\n\nclass SavingsAccount extends BankAccount {\n    private $interestRate;\n\n    public function __construct($initialBalance = 0, $interestRate = 0) {\n        parent::__construct($initialBalance);\n        $this->interestRate = $interestRate;\n    }\n\n    public function withdraw($amount) {\n        $interest = $amount * $this->interestRate;\n        $totalAmount = $amount + $interest;\n        if ($totalAmount <= $this->balance) {\n            $this->balance -= $totalAmount;\n        }\n    }\n}\n\n// Example Usage\n$savings = new SavingsAccount(1000, 0.02);\n$savings->deposit(500);\n$savings->withdraw(200);\necho $savings->getBalance();\n\n?>\n```"
  },
  {
    "task": "Implement a base class for a geometric shape with methods to calculate area and perimeter, then create a rectangle subclass that provides specific calculations for these methods.",
    "code": "```php\n<?php\n\n// Base class for a geometric shape\nabstract class GeometricShape {\n    // Method to calculate area\n    abstract public function calculateArea();\n    \n    // Method to calculate perimeter\n    abstract public function calculatePerimeter();\n}\n\n// Rectangle subclass\nclass Rectangle extends GeometricShape {\n    private $width;\n    private $height;\n\n    public function __construct($width, $height) {\n        $this->width = $width;\n        $this->height = $height;\n    }\n\n    public function calculateArea() {\n        return $this->width * $this->height;\n    }\n\n    public function calculatePerimeter() {\n        return 2 * ($this->width + $this->height);\n    }\n}\n\n// Example usage\n$rectangle = new Rectangle(10, 5);\necho \"Area: \" . $rectangle->calculateArea() . \"\\n\";\necho \"Perimeter: \" . $rectangle->calculatePerimeter() . \"\\n\";\n\n?>\n```"
  },
  {
    "task": "Construct a parent class for employees with a method to calculate salary, then derive a manager class that overrides this method to include bonuses.",
    "code": "```php\n<?php\n\nclass Employee {\n    protected $baseSalary;\n\n    public function __construct($baseSalary) {\n        $this->baseSalary = $baseSalary;\n    }\n\n    public function calculateSalary() {\n        return $this->baseSalary;\n    }\n}\n\nclass Manager extends Employee {\n    private $bonus;\n\n    public function __construct($baseSalary, $bonus) {\n        parent::__construct($baseSalary);\n        $this->bonus = $bonus;\n    }\n\n    public function calculateSalary() {\n        return $this->baseSalary + $this->bonus;\n    }\n}\n\n// Example usage:\n$employee = new Employee(50000);\necho $employee->calculateSalary(); // Output: 50000\n\n$manager = new Manager(50000, 10000);\necho $manager->calculateSalary(); // Output: 60000\n\n?>\n```"
  },
  {
    "task": "Set up a base class for a library item with properties like title and author, and extend it with a book subclass that adds a number of pages property.",
    "code": "```php\n<?php\n\nclass LibraryItem {\n    protected $title;\n    protected $author;\n\n    public function __construct($title, $author) {\n        $this->title = $title;\n        $this->author = $author;\n    }\n\n    public function getTitle() {\n        return $this->title;\n    }\n\n    public function getAuthor() {\n        return $this->author;\n    }\n}\n\nclass Book extends LibraryItem {\n    private $numberOfPages;\n\n    public function __construct($title, $author, $numberOfPages) {\n        parent::__construct($title, $author);\n        $this->numberOfPages = $numberOfPages;\n    }\n\n    public function getNumberOfPages() {\n        return $this->numberOfPages;\n    }\n}\n\n?>\n```"
  },
  {
    "task": "Create a foundation class for an electronic device with a method to turn on and off, and derive a smartphone class that overrides the turn on method to require a passcode.",
    "code": "```php\n<?php\n\nclass ElectronicDevice {\n    protected $isOn = false;\n\n    public function turnOn() {\n        $this->isOn = true;\n    }\n\n    public function turnOff() {\n        $this->isOn = false;\n    }\n}\n\nclass Smartphone extends ElectronicDevice {\n    private $passcode;\n\n    public function __construct($passcode) {\n        $this->passcode = $passcode;\n    }\n\n    public function turnOn($inputPasscode) {\n        if ($inputPasscode === $this->passcode) {\n            parent::turnOn();\n        }\n    }\n}\n\n?>\n```"
  },
  {
    "task": "Design a base class for an animal with a method to make a sound, then create a dog subclass that overrides this method to bark.",
    "code": "```php\n<?php\n\nclass Animal {\n    public function makeSound() {\n        echo \"Some generic animal sound\";\n    }\n}\n\nclass Dog extends Animal {\n    public function makeSound() {\n        echo \"Bark\";\n    }\n}\n\n// Example usage\n$animal = new Animal();\n$animal->makeSound(); // Outputs: Some generic animal sound\n\n$dog = new Dog();\n$dog->makeSound(); // Outputs: Bark\n\n?>\n```"
  },
  {
    "task": "Develop a superclass for meals with a method to calculate calories, then create a dessert subclass that overrides it to add extra sugar calories.",
    "code": "```php\nclass Meal {\n    protected $baseCalories;\n\n    public function __construct($baseCalories) {\n        $this->baseCalories = $baseCalories;\n    }\n\n    public function calculateCalories() {\n        return $this->baseCalories;\n    }\n}\n\nclass Dessert extends Meal {\n    private $sugarCalories;\n\n    public function __construct($baseCalories, $sugarCalories) {\n        parent::__construct($baseCalories);\n        $this->sugarCalories = $sugarCalories;\n    }\n\n    public function calculateCalories() {\n        return $this->baseCalories + $this->sugarCalories;\n    }\n}\n\n// Example usage:\n$meal = new Meal(500);\necho $meal->calculateCalories(); // Outputs: 500\n\n$dessert = new Dessert(300, 150);\necho $dessert->calculateCalories(); // Outputs: 450\n```"
  },
  {
    "task": "Implement a base class for a transportation mode with a method to calculate travel time, then extend it with a plane subclass that overrides the method to calculate based on speed.",
    "code": "```php\n<?php\n\nclass TransportationMode {\n    protected $distance;\n\n    public function __construct($distance) {\n        $this->distance = $distance;\n    }\n\n    public function calculateTravelTime($speed) {\n        return $this->distance / $speed;\n    }\n}\n\nclass Plane extends TransportationMode {\n    public function calculateTravelTime($speed) {\n        // Assuming speed is in km/h and distance in km\n        return $this->distance / $speed;\n    }\n}\n\n// Example usage:\n$plane = new Plane(1000); // 1000 km\necho $plane->calculateTravelTime(800); // Speed 800 km/h\n```"
  },
  {
    "task": "Construct a parent class for a musical instrument with a method to play sound, then derive a piano class that overrides the method to play specific notes.",
    "code": "```php\n<?php\n\nclass MusicalInstrument {\n    public function playSound() {\n        echo \"Playing sound from the instrument.\";\n    }\n}\n\nclass Piano extends MusicalInstrument {\n    public function playSound() {\n        echo \"Playing specific piano notes.\";\n    }\n}\n\n// Example usage:\n$instrument = new MusicalInstrument();\n$instrument->playSound(); // Output: Playing sound from the instrument.\n\n$piano = new Piano();\n$piano->playSound(); // Output: Playing specific piano notes.\n\n?>\n```"
  },
  {
    "task": "Set up a base class for a user account with a method to reset password, and extend it with an admin account subclass that overrides it to include security questions.",
    "code": "```php\n<?php\n\nclass UserAccount {\n    protected $password;\n\n    public function __construct($password) {\n        $this->password = $password;\n    }\n\n    public function resetPassword($newPassword) {\n        $this->password = $newPassword;\n        echo \"Password has been reset.\\n\";\n    }\n}\n\nclass AdminAccount extends UserAccount {\n    private $securityQuestions;\n\n    public function __construct($password, $securityQuestions) {\n        parent::__construct($password);\n        $this->securityQuestions = $securityQuestions;\n    }\n\n    public function resetPassword($newPassword, $answers) {\n        if ($this->verifySecurityQuestions($answers)) {\n            $this->password = $newPassword;\n            echo \"Password has been reset with security questions.\\n\";\n        } else {\n            echo \"Security questions verification failed.\\n\";\n        }\n    }\n\n    private function verifySecurityQuestions($answers) {\n        // Assume answers are correct for this example\n        return true;\n    }\n}\n\n// Example usage:\n$user = new UserAccount(\"user123\");\n$user->resetPassword(\"newUser123\");\n\n$admin = new AdminAccount(\"admin123\", [\"What is your pet's name?\" => \"Fluffy\"]);\n$admin->resetPassword(\"newAdmin123\", [\"What is your pet's name?\" => \"Fluffy\"]);\n\n?>\n```"
  },
  {
    "task": "Create a foundational class for a beverage with properties like volume and temperature, and derive a coffee class that overrides the temperature property to be hot.",
    "code": "```php\nclass Beverage {\n    protected $volume;\n    protected $temperature;\n\n    public function __construct($volume, $temperature) {\n        $this->volume = $volume;\n        $this->temperature = $temperature;\n    }\n\n    public function getVolume() {\n        return $this->volume;\n    }\n\n    public function getTemperature() {\n        return $this->temperature;\n    }\n}\n\nclass Coffee extends Beverage {\n    public function __construct($volume) {\n        parent::__construct($volume, 'hot');\n    }\n}\n\n$coffee = new Coffee(250);\necho $coffee->getVolume(); // 250\necho $coffee->getTemperature(); // hot\n```"
  },
  {
    "task": "Design a base class for a service appointment with a method to schedule time, then create a doctor appointment subclass that overrides this method to include consultation duration.",
    "code": "```php\n<?php\n\nclass ServiceAppointment {\n    protected $time;\n\n    public function scheduleTime($time) {\n        $this->time = $time;\n        return \"Service scheduled at \" . $this->time;\n    }\n}\n\nclass DoctorAppointment extends ServiceAppointment {\n    private $consultationDuration;\n\n    public function scheduleTime($time, $duration) {\n        $this->time = $time;\n        $this->consultationDuration = $duration;\n        return \"Doctor appointment scheduled at \" . $this->time . \" for \" . $this->consultationDuration . \" minutes\";\n    }\n}\n\n// Example usage:\n$appointment = new DoctorAppointment();\necho $appointment->scheduleTime('10:00 AM', 30);\n\n?>\n```"
  },
  {
    "task": "Develop a superclass for electronic gadgets with a method to calculate battery life, then extend it with a laptop class that overrides this method to consider usage patterns.",
    "code": "```php\n<?php\n\nclass ElectronicGadget {\n    protected $batteryCapacity; // in mAh\n    protected $powerConsumption; // in Watts\n\n    public function __construct($batteryCapacity, $powerConsumption) {\n        $this->batteryCapacity = $batteryCapacity;\n        $this->powerConsumption = $powerConsumption;\n    }\n\n    public function calculateBatteryLife() {\n        // Battery life in hours\n        return ($this->batteryCapacity / 1000) / $this->powerConsumption;\n    }\n}\n\nclass Laptop extends ElectronicGadget {\n    private $usagePattern; // percentage of power consumption\n\n    public function __construct($batteryCapacity, $powerConsumption, $usagePattern) {\n        parent::__construct($batteryCapacity, $powerConsumption);\n        $this->usagePattern = $usagePattern;\n    }\n\n    public function calculateBatteryLife() {\n        // Adjust power consumption based on usage pattern\n        $adjustedPowerConsumption = $this->powerConsumption * ($this->usagePattern / 100);\n        return ($this->batteryCapacity / 1000) / $adjustedPowerConsumption;\n    }\n}\n\n// Example usage:\n// $laptop = new Laptop(5000, 50, 75);\n// echo $laptop->calculateBatteryLife();\n\n?>\n```"
  },
  {
    "task": "Implement a base class for a website component with a method to render content, then create a blog post subclass that overrides this method to include author information.",
    "code": "```php\n<?php\n\nclass WebsiteComponent {\n    public function renderContent() {\n        return \"Rendering website component content.\";\n    }\n}\n\nclass BlogPost extends WebsiteComponent {\n    private $author;\n\n    public function __construct($author) {\n        $this->author = $author;\n    }\n\n    public function renderContent() {\n        return \"Rendering blog post content by \" . $this->author . \".\";\n    }\n}\n\n// Example usage\n$component = new WebsiteComponent();\necho $component->renderContent(); // Output: Rendering website component content.\n\n$blogPost = new BlogPost(\"John Doe\");\necho $blogPost->renderContent(); // Output: Rendering blog post content by John Doe.\n?>\n```"
  },
  {
    "task": "Construct a parent class for a recipe with methods for ingredients and instructions, then derive a cake recipe class that overrides these methods to add baking steps.",
    "code": "```php\n<?php\n\nclass Recipe {\n    public function ingredients() {\n        return \"Basic ingredients.\";\n    }\n\n    public function instructions() {\n        return \"Basic instructions.\";\n    }\n}\n\nclass CakeRecipe extends Recipe {\n    public function ingredients() {\n        return \"Cake ingredients: flour, sugar, eggs.\";\n    }\n\n    public function instructions() {\n        return \"Cake instructions: mix, bake, and cool.\";\n    }\n}\n\n// Example of usage\n$cake = new CakeRecipe();\necho $cake->ingredients();\necho \"\\n\";\necho $cake->instructions();\n\n?>\n```"
  },
  {
    "task": "Set up a base class for a plant with methods for sunlight and water needs, and extend it with a cactus subclass that overrides these methods to require less water.",
    "code": "```php\n<?php\n\nclass Plant {\n    public function sunlightNeeds() {\n        return \"Needs full sunlight\";\n    }\n\n    public function waterNeeds() {\n        return \"Needs regular watering\";\n    }\n}\n\nclass Cactus extends Plant {\n    public function waterNeeds() {\n        return \"Needs less water\";\n    }\n}\n\n$plant = new Plant();\necho $plant->sunlightNeeds() . \"\\n\";\necho $plant->waterNeeds() . \"\\n\";\n\n$cactus = new Cactus();\necho $cactus->sunlightNeeds() . \"\\n\";\necho $cactus->waterNeeds() . \"\\n\";\n\n?>\n```"
  },
  {
    "task": "Create a foundational class for a building with properties like height and material, and derive a skyscraper class that overrides the height property to be significantly taller.",
    "code": "```php\n<?php\n\nclass Building {\n    protected $height;\n    protected $material;\n\n    public function __construct($height, $material) {\n        $this->height = $height;\n        $this->material = $material;\n    }\n\n    public function getHeight() {\n        return $this->height;\n    }\n\n    public function getMaterial() {\n        return $this->material;\n    }\n}\n\nclass Skyscraper extends Building {\n    public function __construct($material) {\n        parent::__construct(1000, $material); // Overriding height to be significantly taller\n    }\n}\n\n// Example usage:\n$skyscraper = new Skyscraper(\"Steel\");\necho \"Height: \" . $skyscraper->getHeight() . \" meters, Material: \" . $skyscraper->getMaterial();\n\n?>\n```"
  },
  {
    "task": "Design a base class for a payment method with a method to process transactions, then create a credit card subclass that overrides this method to include credit limits.",
    "code": "```php\n<?php\n\nclass PaymentMethod {\n    public function processTransaction($amount) {\n        // Base method to process a transaction\n        echo \"Processing transaction of amount: $amount\\n\";\n    }\n}\n\nclass CreditCard extends PaymentMethod {\n    private $creditLimit;\n\n    public function __construct($creditLimit) {\n        $this->creditLimit = $creditLimit;\n    }\n\n    public function processTransaction($amount) {\n        if ($amount > $this->creditLimit) {\n            echo \"Transaction declined: amount exceeds credit limit.\\n\";\n        } else {\n            echo \"Processing credit card transaction of amount: $amount\\n\";\n        }\n    }\n}\n\n$payment = new PaymentMethod();\n$payment->processTransaction(500);\n\n$creditCard = new CreditCard(1000);\n$creditCard->processTransaction(1500);\n$creditCard->processTransaction(800);\n\n?>\n```"
  },
  {
    "task": "Develop a superclass for a computer program with methods for input and output, then extend it with a game subclass that overrides these methods to include player interactions.",
    "code": "```php\n<?php\n\nclass ComputerProgram {\n    public function input() {\n        return \"Generic input\";\n    }\n\n    public function output() {\n        return \"Generic output\";\n    }\n}\n\nclass Game extends ComputerProgram {\n    public function input() {\n        return \"Player input\";\n    }\n\n    public function output() {\n        return \"Player output\";\n    }\n}\n\n$program = new ComputerProgram();\necho $program->input();  // Output: Generic input\necho $program->output(); // Output: Generic output\n\n$game = new Game();\necho $game->input();     // Output: Player input\necho $game->output();    // Output: Player output\n\n?>\n```"
  },
  {
    "task": "Implement a base class for a dining establishment with a method to calculate wait time, then create a fast food subclass that overrides this method to be shorter.",
    "code": "```php\n<?php\n\nclass DiningEstablishment {\n    public function calculateWaitTime() {\n        return 30; // default wait time in minutes\n    }\n}\n\nclass FastFood extends DiningEstablishment {\n    public function calculateWaitTime() {\n        return 10; // shorter wait time for fast food\n    }\n}\n\n// Example usage:\n$dining = new DiningEstablishment();\necho $dining->calculateWaitTime(); // Outputs: 30\n\n$fastFood = new FastFood();\necho $fastFood->calculateWaitTime(); // Outputs: 10\n\n?>\n```"
  },
  {
    "task": "Construct a parent class for a social media profile with methods for posting and liking, then derive a business profile class that overrides these methods to include promotions.",
    "code": "```php\n<?php\n\nclass SocialMediaProfile {\n    public function post($content) {\n        echo \"Posting: \" . $content . \"\\n\";\n    }\n\n    public function like($post) {\n        echo \"Liking post: \" . $post . \"\\n\";\n    }\n}\n\nclass BusinessProfile extends SocialMediaProfile {\n    public function post($content) {\n        echo \"Posting with promotion: \" . $content . \"\\n\";\n    }\n\n    public function like($post) {\n        echo \"Liking post with promotion: \" . $post . \"\\n\";\n    }\n}\n\n// Example Usage\n$personalProfile = new SocialMediaProfile();\n$personalProfile->post(\"Hello World!\");\n$personalProfile->like(\"Post 1\");\n\n$businessProfile = new BusinessProfile();\n$businessProfile->post(\"Check out our new product!\");\n$businessProfile->like(\"Post 2\");\n\n?>\n```"
  },
  {
    "task": "Set up a base class for an educational course with methods for syllabus and grading, and extend it with an online course subclass that overrides these methods for remote learning.",
    "code": "```php\n<?php\n\nclass Course {\n    public function syllabus() {\n        return \"This is the syllabus for the course.\";\n    }\n\n    public function grading() {\n        return \"These are the grading criteria for the course.\";\n    }\n}\n\nclass OnlineCourse extends Course {\n    public function syllabus() {\n        return \"This is the online syllabus for the course.\";\n    }\n\n    public function grading() {\n        return \"These are the online grading criteria for the course.\";\n    }\n}\n\n// Example usage\n$onlineCourse = new OnlineCourse();\necho $onlineCourse->syllabus();\necho \"\\n\";\necho $onlineCourse->grading();\n\n?>\n```"
  },
  {
    "task": "Create a foundational class for a sports team with properties like team name and coach, and derive a football team class that overrides the coach property with a specific person.",
    "code": "```php\nclass SportsTeam {\n    protected $teamName;\n    protected $coach;\n\n    public function __construct($teamName, $coach) {\n        $this->teamName = $teamName;\n        $this->coach = $coach;\n    }\n\n    public function getTeamName() {\n        return $this->teamName;\n    }\n\n    public function getCoach() {\n        return $this->coach;\n    }\n}\n\nclass FootballTeam extends SportsTeam {\n    protected $coach = \"Specific Person\";\n\n    public function __construct($teamName) {\n        parent::__construct($teamName, $this->coach);\n    }\n}\n\n$footballTeam = new FootballTeam(\"Dream FC\");\necho $footballTeam->getTeamName(); // Outputs: Dream FC\necho $footballTeam->getCoach();    // Outputs: Specific Person\n```"
  },
  {
    "task": "Design a base class for a document with methods for printing and saving, then create a PDF document subclass that overrides these methods to include encryption.",
    "code": "```php\n<?php\n\nclass Document {\n    public function printDocument() {\n        echo \"Printing document...\\n\";\n    }\n\n    public function saveDocument() {\n        echo \"Saving document...\\n\";\n    }\n}\n\nclass PDFDocument extends Document {\n    public function printDocument() {\n        $this->encrypt();\n        echo \"Printing encrypted PDF document...\\n\";\n    }\n\n    public function saveDocument() {\n        $this->encrypt();\n        echo \"Saving encrypted PDF document...\\n\";\n    }\n\n    private function encrypt() {\n        echo \"Encrypting PDF document...\\n\";\n    }\n}\n\n$doc = new PDFDocument();\n$doc->printDocument();\n$doc->saveDocument();\n\n?>\n```"
  },
  {
    "task": "Develop a superclass for a retail product with methods for pricing and discount, then extend it with an electronics product class that overrides the discount method to offer more.",
    "code": "```php\nclass RetailProduct {\n    protected $price;\n\n    public function __construct($price) {\n        $this->price = $price;\n    }\n\n    public function getPrice() {\n        return $this->price;\n    }\n\n    public function applyDiscount($percent) {\n        $discountedPrice = $this->price - ($this->price * ($percent / 100));\n        return $discountedPrice;\n    }\n}\n\nclass ElectronicsProduct extends RetailProduct {\n\n    public function applyDiscount($percent) {\n        $extraDiscount = 5; // Additional discount for electronics\n        $totalDiscount = $percent + $extraDiscount;\n        $discountedPrice = $this->price - ($this->price * ($totalDiscount / 100));\n        return $discountedPrice;\n    }\n}\n\n// Example usage\n$product = new RetailProduct(100);\necho $product->applyDiscount(10); // Outputs: 90\n\n$electronic = new ElectronicsProduct(100);\necho $electronic->applyDiscount(10); // Outputs: 85\n```"
  },
  {
    "task": "Implement a base class for a subscription service with a method to renew membership, then create a monthly subscription subclass that overrides this method for automatic renewal.",
    "code": "```php\n<?php\n\nclass SubscriptionService {\n    public function renewMembership() {\n        echo \"Membership renewed manually.\\n\";\n    }\n}\n\nclass MonthlySubscription extends SubscriptionService {\n    public function renewMembership() {\n        echo \"Membership renewed automatically for the month.\\n\";\n    }\n}\n\n// Example usage:\n$baseSubscription = new SubscriptionService();\n$baseSubscription->renewMembership();\n\n$monthlySubscription = new MonthlySubscription();\n$monthlySubscription->renewMembership();\n?>\n```"
  },
  {
    "task": "Construct a parent class for a language translator with a method to translate text, then derive a French translator class that overrides this method for French language specifics.",
    "code": "```php\n<?php\n\nclass LanguageTranslator {\n    public function translate($text) {\n        return \"Translating text: \" . $text;\n    }\n}\n\nclass FrenchTranslator extends LanguageTranslator {\n    public function translate($text) {\n        // Implement French-specific translation logic here\n        return \"Traduction en fran\u00e7ais: \" . $text;\n    }\n}\n\n// Example usage\n$translator = new FrenchTranslator();\necho $translator->translate(\"Hello world!\");\n\n?>\n```"
  },
  {
    "task": "Set up a base class for a customer order with methods for placing and tracking, and extend it with a food order subclass that overrides tracking for delivery status.",
    "code": "```php\n<?php\n\nclass CustomerOrder {\n    protected $orderId;\n\n    public function __construct($orderId) {\n        $this->orderId = $orderId;\n    }\n\n    public function placeOrder() {\n        return \"Order with ID {$this->orderId} has been placed.\";\n    }\n\n    public function trackOrder() {\n        return \"Tracking order ID {$this->orderId}.\";\n    }\n}\n\nclass FoodOrder extends CustomerOrder {\n    public function trackOrder() {\n        return \"Tracking food order ID {$this->orderId}. Delivery status: On the way.\";\n    }\n}\n\n// Example usage:\n$generalOrder = new CustomerOrder(101);\necho $generalOrder->placeOrder() . PHP_EOL;\necho $generalOrder->trackOrder() . PHP_EOL;\n\n$foodOrder = new FoodOrder(202);\necho $foodOrder->placeOrder() . PHP_EOL;\necho $foodOrder->trackOrder() . PHP_EOL;\n\n?>\n```"
  },
  {
    "task": "Create a foundational class for an artwork with properties like artist and medium, and derive a painting class that overrides the medium property to be 'canvas'.",
    "code": "```php\nclass Artwork {\n    public $artist;\n    public $medium;\n    \n    public function __construct($artist, $medium) {\n        $this->artist = $artist;\n        $this->medium = $medium;\n    }\n}\n\nclass Painting extends Artwork {\n    public function __construct($artist) {\n        parent::__construct($artist, 'canvas');\n    }\n}\n```"
  },
  {
    "task": "Design a base class for a computer network with methods for connectivity and bandwidth, then create a wireless network subclass that overrides these methods for signal strength.",
    "code": "```php\n<?php\n\nclass ComputerNetwork {\n    public function connectivity() {\n        return \"Basic connectivity established.\";\n    }\n\n    public function bandwidth() {\n        return \"Standard bandwidth available.\";\n    }\n}\n\nclass WirelessNetwork extends ComputerNetwork {\n    public function connectivity() {\n        return \"Wireless connectivity established.\";\n    }\n\n    public function bandwidth() {\n        return \"Bandwidth varies based on signal strength.\";\n    }\n\n    public function signalStrength() {\n        return \"Signal strength is strong.\";\n    }\n}\n\n// Example usage\n$wireless = new WirelessNetwork();\necho $wireless->connectivity(); // Wireless connectivity established.\necho $wireless->bandwidth(); // Bandwidth varies based on signal strength.\necho $wireless->signalStrength(); // Signal strength is strong.\n```"
  },
  {
    "task": "Develop a superclass for a messaging app with methods for sending and receiving messages, then extend it with a secure messaging subclass that overrides these methods for encryption.",
    "code": "```php\nclass MessagingApp {\n    public function sendMessage($message, $recipient) {\n        // Logic to send a message\n        echo \"Sending message to $recipient: $message\\n\";\n    }\n\n    public function receiveMessage() {\n        // Logic to receive a message\n        return \"Received message\";\n    }\n}\n\nclass SecureMessagingApp extends MessagingApp {\n    private function encryptMessage($message) {\n        // Simple encryption logic (for demonstration)\n        return strrev($message);\n    }\n\n    private function decryptMessage($message) {\n        // Simple decryption logic (for demonstration)\n        return strrev($message);\n    }\n\n    public function sendMessage($message, $recipient) {\n        $encryptedMessage = $this->encryptMessage($message);\n        echo \"Sending encrypted message to $recipient: $encryptedMessage\\n\";\n    }\n\n    public function receiveMessage() {\n        $encryptedMessage = parent::receiveMessage();\n        return $this->decryptMessage($encryptedMessage);\n    }\n}\n\n// Example usage\n$secureApp = new SecureMessagingApp();\n$secureApp->sendMessage(\"Hello, World!\", \"Alice\");\necho $secureApp->receiveMessage();\n```"
  },
  {
    "task": "Implement a base class for a travel itinerary with methods for destinations and activities, then create a vacation itinerary subclass that overrides these methods for leisure activities.",
    "code": "```php\n<?php\n\nclass TravelItinerary {\n    protected $destinations = [];\n    protected $activities = [];\n\n    public function addDestination($destination) {\n        $this->destinations[] = $destination;\n    }\n\n    public function addActivity($activity) {\n        $this->activities[] = $activity;\n    }\n\n    public function getDestinations() {\n        return $this->destinations;\n    }\n\n    public function getActivities() {\n        return $this->activities;\n    }\n}\n\nclass VacationItinerary extends TravelItinerary {\n\n    public function addActivity($activity) {\n        $leisureActivities = [\"sightseeing\", \"beach\", \"spa\", \"museum\"];\n        if (in_array($activity, $leisureActivities)) {\n            $this->activities[] = $activity;\n        }\n    }\n}\n\n// Example usage:\n$vacation = new VacationItinerary();\n$vacation->addDestination(\"Hawaii\");\n$vacation->addActivity(\"sightseeing\");\n$vacation->addActivity(\"hiking\"); // This will be ignored\nprint_r($vacation->getDestinations());\nprint_r($vacation->getActivities());\n\n?>\n```"
  },
  {
    "task": "Construct a parent class for a healthcare record with methods for patient data and treatment history, then derive a pediatric record class that overrides these methods for child-specific data.",
    "code": "```php\n<?php\n\nclass HealthcareRecord {\n    protected $patientData;\n    protected $treatmentHistory;\n\n    public function __construct($patientData, $treatmentHistory) {\n        $this->patientData = $patientData;\n        $this->treatmentHistory = $treatmentHistory;\n    }\n\n    public function getPatientData() {\n        return $this->patientData;\n    }\n\n    public function getTreatmentHistory() {\n        return $this->treatmentHistory;\n    }\n}\n\nclass PediatricRecord extends HealthcareRecord {\n    public function __construct($patientData, $treatmentHistory) {\n        parent::__construct($patientData, $treatmentHistory);\n    }\n\n    public function getPatientData() {\n        return \"Child-specific data: \" . $this->patientData;\n    }\n\n    public function getTreatmentHistory() {\n        return \"Child-specific treatment history: \" . $this->treatmentHistory;\n    }\n}\n\n?>\n```"
  },
  {
    "task": "Set up a base class for a culinary dish with methods for preparation and serving, and extend it with an appetizer subclass that overrides these methods for smaller portions.",
    "code": "```php\n<?php\n\nclass CulinaryDish {\n    public function prepare() {\n        echo \"Preparing the dish.\\n\";\n    }\n\n    public function serve() {\n        echo \"Serving the dish.\\n\";\n    }\n}\n\nclass Appetizer extends CulinaryDish {\n    public function prepare() {\n        echo \"Preparing a small portion of the appetizer.\\n\";\n    }\n\n    public function serve() {\n        echo \"Serving a small portion of the appetizer.\\n\";\n    }\n}\n\n// Example usage:\n$dish = new CulinaryDish();\n$dish->prepare();\n$dish->serve();\n\n$appetizer = new Appetizer();\n$appetizer->prepare();\n$appetizer->serve();\n\n?>\n```"
  },
  {
    "task": "Create a foundational class for a book collection with properties like genre and author, and derive a mystery collection class that overrides the genre property to be 'mystery'.",
    "code": "```php\nclass BookCollection {\n    protected $genre;\n    protected $author;\n\n    public function __construct($genre, $author) {\n        $this->genre = $genre;\n        $this->author = $author;\n    }\n\n    public function getGenre() {\n        return $this->genre;\n    }\n\n    public function getAuthor() {\n        return $this->author;\n    }\n}\n\nclass MysteryCollection extends BookCollection {\n    public function __construct($author) {\n        parent::__construct('mystery', $author);\n    }\n}\n```"
  },
  {
    "task": "Design a base class for a file storage system with methods for saving and deleting files, then create a cloud storage subclass that overrides these methods for remote access.",
    "code": "```php\n<?php\n\nclass FileStorage {\n    public function saveFile($fileName) {\n        echo \"Saving $fileName to local storage.\\n\";\n    }\n\n    public function deleteFile($fileName) {\n        echo \"Deleting $fileName from local storage.\\n\";\n    }\n}\n\nclass CloudStorage extends FileStorage {\n    public function saveFile($fileName) {\n        echo \"Saving $fileName to cloud storage.\\n\";\n    }\n\n    public function deleteFile($fileName) {\n        echo \"Deleting $fileName from cloud storage.\\n\";\n    }\n}\n\n// Example usage:\n$localStorage = new FileStorage();\n$localStorage->saveFile(\"example.txt\");\n$localStorage->deleteFile(\"example.txt\");\n\n$cloudStorage = new CloudStorage();\n$cloudStorage->saveFile(\"example.txt\");\n$cloudStorage->deleteFile(\"example.txt\");\n\n?>\n```"
  },
  {
    "task": "Develop a superclass for a seasonal sale event with methods for discounts and promotions, then extend it with a summer sale subclass that overrides these methods for summer items.",
    "code": "```php\n<?php\n\nclass SeasonalSaleEvent {\n    public function discount() {\n        return \"Apply standard discount.\";\n    }\n\n    public function promotion() {\n        return \"Apply standard promotion.\";\n    }\n}\n\nclass SummerSale extends SeasonalSaleEvent {\n    public function discount() {\n        return \"Apply summer discount.\";\n    }\n\n    public function promotion() {\n        return \"Apply summer promotion.\";\n    }\n}\n\n// Example usage\n$sale = new SummerSale();\necho $sale->discount();    // Output: Apply summer discount.\necho $sale->promotion();   // Output: Apply summer promotion.\n\n?>\n```"
  },
  {
    "task": "Implement a base class for a personal budget with methods for income and expenses, then create a student budget subclass that overrides these methods for tuition and fees.",
    "code": "```php\n<?php\n\nclass PersonalBudget {\n    protected $income;\n    protected $expenses;\n\n    public function __construct($income = 0, $expenses = 0) {\n        $this->income = $income;\n        $this->expenses = $expenses;\n    }\n\n    public function addIncome($amount) {\n        $this->income += $amount;\n    }\n\n    public function addExpenses($amount) {\n        $this->expenses += $amount;\n    }\n\n    public function getNetBudget() {\n        return $this->income - $this->expenses;\n    }\n}\n\nclass StudentBudget extends PersonalBudget {\n    private $tuition;\n    private $fees;\n\n    public function __construct($income = 0, $expenses = 0, $tuition = 0, $fees = 0) {\n        parent::__construct($income, $expenses);\n        $this->tuition = $tuition;\n        $this->fees = $fees;\n    }\n\n    public function addIncome($amount) {\n        parent::addIncome($amount);\n        // Additional logic for student budget income can be added here\n    }\n\n    public function addExpenses($amount) {\n        parent::addExpenses($amount);\n        // Additional logic for student budget expenses can be added here\n    }\n\n    public function addTuition($amount) {\n        $this->tuition += $amount;\n        $this->addExpenses($amount);\n    }\n\n    public function addFees($amount) {\n        $this->fees += $amount;\n        $this->addExpenses($amount);\n    }\n\n    public function getNetBudget() {\n        return $this->income - ($this->expenses + $this->tuition + $this->fees);\n    }\n}\n\n?>\n```"
  },
  {
    "task": "Construct a parent class for a fitness routine with methods for exercises and duration, then derive a yoga routine class that overrides these methods for flexibility exercises.",
    "code": "```php\n<?php\n\nclass FitnessRoutine {\n    public function exercises() {\n        return \"General exercises\";\n    }\n\n    public function duration() {\n        return \"Duration varies\";\n    }\n}\n\nclass YogaRoutine extends FitnessRoutine {\n    public function exercises() {\n        return \"Flexibility exercises\";\n    }\n\n    public function duration() {\n        return \"Duration is 60 minutes\";\n    }\n}\n\n// Example usage\n$yoga = new YogaRoutine();\necho $yoga->exercises(); // Output: Flexibility exercises\necho $yoga->duration();  // Output: Duration is 60 minutes\n\n?>\n```"
  },
  {
    "task": "Set up a base class for a transportation ticket with methods for pricing and validity, and extend it with an airline ticket subclass that overrides these methods for baggage allowance.",
    "code": "```php\n<?php\n\nclass TransportationTicket {\n    protected $price;\n    protected $validityPeriod;\n\n    public function __construct($price, $validityPeriod) {\n        $this->price = $price;\n        $this->validityPeriod = $validityPeriod;\n    }\n\n    public function getPricing() {\n        return $this->price;\n    }\n\n    public function getValidity() {\n        return $this->validityPeriod;\n    }\n}\n\nclass AirlineTicket extends TransportationTicket {\n    private $baggageAllowance;\n\n    public function __construct($price, $validityPeriod, $baggageAllowance) {\n        parent::__construct($price, $validityPeriod);\n        $this->baggageAllowance = $baggageAllowance;\n    }\n\n    public function getPricing() {\n        return $this->price + 50; // Example: additional charge for airline ticket\n    }\n\n    public function getValidity() {\n        return $this->validityPeriod . ' (Airline Ticket Specific)';\n    }\n\n    public function getBaggageAllowance() {\n        return $this->baggageAllowance;\n    }\n}\n\n// Usage\n$ticket = new AirlineTicket(200, '2023-12-31', '20kg');\necho $ticket->getPricing();\necho $ticket->getValidity();\necho $ticket->getBaggageAllowance();\n\n?>\n```"
  },
  {
    "task": "Create a foundational class for a digital photo album with properties like album name and date, and derive a vacation album class that overrides the date property to be specific.",
    "code": "```php\n<?php\n\nclass PhotoAlbum {\n    protected $albumName;\n    protected $date;\n\n    public function __construct($albumName, $date) {\n        $this->albumName = $albumName;\n        $this->date = $date;\n    }\n\n    public function getAlbumName() {\n        return $this->albumName;\n    }\n\n    public function getDate() {\n        return $this->date;\n    }\n}\n\nclass VacationAlbum extends PhotoAlbum {\n    private $vacationDate;\n\n    public function __construct($albumName, $vacationDate) {\n        parent::__construct($albumName, null);\n        $this->vacationDate = $vacationDate;\n    }\n\n    public function getDate() {\n        return $this->vacationDate;\n    }\n}\n\n?>\n```"
  },
  {
    "task": "Design a base class for a home appliance with methods for power usage and warranty, then create a refrigerator subclass that overrides these methods for energy efficiency.",
    "code": "```php\n<?php\n\nclass HomeAppliance {\n    protected $powerUsage;\n    protected $warranty;\n\n    public function __construct($powerUsage, $warranty) {\n        $this->powerUsage = $powerUsage;\n        $this->warranty = $warranty;\n    }\n\n    public function getPowerUsage() {\n        return $this->powerUsage;\n    }\n\n    public function getWarranty() {\n        return $this->warranty;\n    }\n}\n\nclass Refrigerator extends HomeAppliance {\n\n    public function __construct($powerUsage, $warranty) {\n        parent::__construct($powerUsage, $warranty);\n    }\n\n    public function getPowerUsage() {\n        return $this->powerUsage * 0.8; // Assuming 20% more energy efficient\n    }\n\n    public function getWarranty() {\n        return $this->warranty + 1; // Assuming 1 extra year for refrigerators\n    }\n}\n\n// Example usage\n$fridge = new Refrigerator(100, 2);\necho \"Refrigerator Power Usage: \" . $fridge->getPowerUsage() . \" watts\\n\";\necho \"Refrigerator Warranty: \" . $fridge->getWarranty() . \" years\\n\";\n\n?>\n```"
  },
  {
    "task": "Develop a superclass for a software update with methods for versioning and patch notes, then extend it with a security update subclass that overrides these methods for vulnerabilities.",
    "code": "```php\nclass SoftwareUpdate {\n    protected $version;\n    protected $patchNotes;\n\n    public function __construct($version, $patchNotes) {\n        $this->version = $version;\n        $this->patchNotes = $patchNotes;\n    }\n\n    public function getVersion() {\n        return $this->version;\n    }\n\n    public function getPatchNotes() {\n        return $this->patchNotes;\n    }\n}\n\nclass SecurityUpdate extends SoftwareUpdate {\n    private $vulnerabilities;\n\n    public function __construct($version, $patchNotes, $vulnerabilities) {\n        parent::__construct($version, $patchNotes);\n        $this->vulnerabilities = $vulnerabilities;\n    }\n\n    public function getVersion() {\n        return \"Security Version: \" . $this->version;\n    }\n\n    public function getPatchNotes() {\n        return \"Security Patch Notes: \" . $this->patchNotes;\n    }\n\n    public function getVulnerabilities() {\n        return $this->vulnerabilities;\n    }\n}\n```"
  },
  {
    "task": "Implement a base class for a musical performance with methods for rehearsal and execution, then create a concert performance subclass that overrides these methods for live audience.",
    "code": "```php\n<?php\n\nclass MusicalPerformance {\n    public function rehearsal() {\n        echo \"Rehearsing performance.\\n\";\n    }\n\n    public function execute() {\n        echo \"Executing performance.\\n\";\n    }\n}\n\nclass ConcertPerformance extends MusicalPerformance {\n    public function rehearsal() {\n        echo \"Rehearsing concert for live audience.\\n\";\n    }\n\n    public function execute() {\n        echo \"Executing concert for live audience.\\n\";\n    }\n}\n\n// Example usage\n$concert = new ConcertPerformance();\n$concert->rehearsal();\n$concert->execute();\n\n?>\n```"
  },
  {
    "task": "Construct a parent class for an academic degree with methods for course requirements and credits, then derive a master's degree class that overrides these methods for advanced studies.",
    "code": "```php\n<?php\n\nclass AcademicDegree {\n    public function getCourseRequirements() {\n        return \"General course requirements for a degree.\";\n    }\n\n    public function getCredits() {\n        return \"Total credits required for a degree.\";\n    }\n}\n\nclass MastersDegree extends AcademicDegree {\n    public function getCourseRequirements() {\n        return \"Advanced course requirements for a master's degree.\";\n    }\n\n    public function getCredits() {\n        return \"Total credits required for a master's degree.\";\n    }\n}\n\n$degree = new AcademicDegree();\necho $degree->getCourseRequirements() . \"\\n\";\necho $degree->getCredits() . \"\\n\";\n\n$masters = new MastersDegree();\necho $masters->getCourseRequirements() . \"\\n\";\necho $masters->getCredits() . \"\\n\";\n\n?>\n```"
  },
  {
    "task": "Set up a base class for a weather forecast with methods for temperature and conditions, and extend it with a winter forecast subclass that overrides these methods for snow conditions.",
    "code": "```php\n<?php\n\nclass WeatherForecast {\n    protected $temperature;\n    protected $conditions;\n\n    public function __construct($temperature, $conditions) {\n        $this->temperature = $temperature;\n        $this->conditions = $conditions;\n    }\n\n    public function getTemperature() {\n        return \"The temperature is \" . $this->temperature . \" degrees.\";\n    }\n\n    public function getConditions() {\n        return \"The weather is \" . $this->conditions . \".\";\n    }\n}\n\nclass WinterForecast extends WeatherForecast {\n\n    public function getTemperature() {\n        return \"The winter temperature is \" . $this->temperature . \" degrees.\";\n    }\n\n    public function getConditions() {\n        return \"The winter conditions are snowy.\";\n    }\n}\n\n$forecast = new WinterForecast(-5, \"snowy\");\necho $forecast->getTemperature() . PHP_EOL;\necho $forecast->getConditions() . PHP_EOL;\n?>\n```"
  },
  {
    "task": "Create a foundational class for a personal diary with properties like date and entries, and derive a travel diary class that overrides the date property with travel dates.",
    "code": "```php\nclass PersonalDiary {\n    protected $date;\n    protected $entries;\n\n    public function __construct($date, $entries) {\n        $this->date = $date;\n        $this->entries = $entries;\n    }\n\n    public function getDate() {\n        return $this->date;\n    }\n\n    public function getEntries() {\n        return $this->entries;\n    }\n}\n\nclass TravelDiary extends PersonalDiary {\n    protected $travelDates;\n\n    public function __construct($travelDates, $entries) {\n        $this->travelDates = $travelDates;\n        parent::__construct($travelDates, $entries);\n    }\n\n    public function getTravelDates() {\n        return $this->travelDates;\n    }\n}\n```"
  },
  {
    "task": "Design a base class for a pet with methods for feeding and grooming, then create a cat subclass that overrides these methods with specific food preferences.",
    "code": "```php\n<?php\n\nclass Pet {\n    public function feed() {\n        echo \"Feeding the pet.\\n\";\n    }\n\n    public function groom() {\n        echo \"Grooming the pet.\\n\";\n    }\n}\n\nclass Cat extends Pet {\n    public function feed() {\n        echo \"Feeding the cat with cat food.\\n\";\n    }\n\n    public function groom() {\n        echo \"Grooming the cat with a brush.\\n\";\n    }\n}\n\n// Example usage\n$pet = new Pet();\n$pet->feed();\n$pet->groom();\n\n$cat = new Cat();\n$cat->feed();\n$cat->groom();\n\n?>\n```"
  },
  {
    "task": "Develop a superclass for a software library with methods for installation and updates, then extend it with a graphics library subclass that overrides these methods for rendering capabilities.",
    "code": "```php\n<?php\n\nclass SoftwareLibrary {\n    public function install() {\n        return \"Installing software library.\";\n    }\n\n    public function update() {\n        return \"Updating software library.\";\n    }\n}\n\nclass GraphicsLibrary extends SoftwareLibrary {\n    public function install() {\n        return \"Installing graphics library with rendering capabilities.\";\n    }\n\n    public function update() {\n        return \"Updating graphics library with rendering capabilities.\";\n    }\n}\n\n// Example usage\n$softwareLib = new SoftwareLibrary();\necho $softwareLib->install() . PHP_EOL;\necho $softwareLib->update() . PHP_EOL;\n\n$graphicsLib = new GraphicsLibrary();\necho $graphicsLib->install() . PHP_EOL;\necho $graphicsLib->update() . PHP_EOL;\n\n?>\n```"
  },
  {
    "task": "Implement a base class for a political campaign with methods for fundraising and events, then create a presidential campaign subclass that overrides these methods for national scale.",
    "code": "```php\nclass PoliticalCampaign {\n    public function fundraising() {\n        return \"Conducting local fundraising activities.\";\n    }\n\n    public function events() {\n        return \"Organizing local campaign events.\";\n    }\n}\n\nclass PresidentialCampaign extends PoliticalCampaign {\n    public function fundraising() {\n        return \"Conducting national fundraising activities.\";\n    }\n\n    public function events() {\n        return \"Organizing national campaign events.\";\n    }\n}\n\n// Example usage\n$campaign = new PresidentialCampaign();\necho $campaign->fundraising(); // Outputs: Conducting national fundraising activities.\necho $campaign->events();      // Outputs: Organizing national campaign events.\n```"
  },
  {
    "task": "Construct a parent class for an automotive part with methods for durability and replacement, then derive an engine part class that overrides these methods for performance.",
    "code": "```php\nclass AutomotivePart {\n    public function durability() {\n        return \"Standard durability\";\n    }\n\n    public function replacement() {\n        return \"General replacement procedure\";\n    }\n}\n\nclass EnginePart extends AutomotivePart {\n    public function durability() {\n        return \"Enhanced durability for high performance\";\n    }\n\n    public function replacement() {\n        return \"Specific replacement procedure for engine parts\";\n    }\n}\n```"
  },
  {
    "task": "Set up a base class for an online tutorial with methods for lessons and quizzes, and extend it with a coding tutorial subclass that overrides these methods for interactive exercises.",
    "code": "```php\n<?php\n\nclass OnlineTutorial {\n    public function lesson() {\n        return \"This is a lesson.\";\n    }\n\n    public function quiz() {\n        return \"This is a quiz.\";\n    }\n}\n\nclass CodingTutorial extends OnlineTutorial {\n    public function lesson() {\n        return \"This is an interactive coding lesson.\";\n    }\n\n    public function quiz() {\n        return \"This is an interactive coding quiz.\";\n    }\n}\n\n// Example usage\n$tutorial = new CodingTutorial();\necho $tutorial->lesson();\necho $tutorial->quiz();\n\n?>\n```"
  },
  {
    "task": "Create a foundational class for a personal collection with properties like item type and value, and derive a stamp collection class that overrides the item type property to be 'stamps'.",
    "code": "```php\nclass PersonalCollection {\n    protected $itemType;\n    protected $value;\n\n    public function __construct($itemType, $value) {\n        $this->itemType = $itemType;\n        $this->value = $value;\n    }\n\n    public function getItemType() {\n        return $this->itemType;\n    }\n\n    public function getValue() {\n        return $this->value;\n    }\n}\n\nclass StampCollection extends PersonalCollection {\n\n    public function __construct($value) {\n        parent::__construct('stamps', $value);\n    }\n}\n\n// Example usage\n$stampCollection = new StampCollection(1000);\necho $stampCollection->getItemType(); // Outputs: stamps\necho $stampCollection->getValue(); // Outputs: 1000\n```"
  },
  {
    "task": "Design a base class for a video game character with methods for health and abilities, then create a warrior character subclass that overrides these methods for strength.",
    "code": "```php\n<?php\n\nclass GameCharacter {\n    protected $health;\n    protected $abilities;\n\n    public function __construct($health, $abilities) {\n        $this->health = $health;\n        $this->abilities = $abilities;\n    }\n\n    public function getHealth() {\n        return $this->health;\n    }\n\n    public function getAbilities() {\n        return $this->abilities;\n    }\n}\n\nclass WarriorCharacter extends GameCharacter {\n    private $strength;\n\n    public function __construct($health, $abilities, $strength) {\n        parent::__construct($health, $abilities);\n        $this->strength = $strength;\n    }\n\n    public function getHealth() {\n        return $this->health + $this->strength;\n    }\n\n    public function getAbilities() {\n        return array_merge($this->abilities, ['strength' => $this->strength]);\n    }\n}\n\n// Example usage\n$warrior = new WarriorCharacter(100, ['sword fighting'], 50);\necho $warrior->getHealth(); // Outputs: 150\nprint_r($warrior->getAbilities()); // Outputs: Array ( [0] => sword fighting [strength] => 50 )\n\n?>\n```"
  },
  {
    "task": "Develop a superclass for an event planner with methods for scheduling and budgeting, then extend it with a wedding planner subclass that overrides these methods for ceremony details.",
    "code": "```php\nclass EventPlanner {\n    protected $schedule;\n    protected $budget;\n\n    public function __construct($schedule, $budget) {\n        $this->schedule = $schedule;\n        $this->budget = $budget;\n    }\n\n    public function scheduleEvent() {\n        echo \"Scheduling event on: \" . $this->schedule . \"\\n\";\n    }\n\n    public function budgetEvent() {\n        echo \"Budgeting event with: $\" . $this->budget . \"\\n\";\n    }\n}\n\nclass WeddingPlanner extends EventPlanner {\n    private $ceremonyDetails;\n\n    public function __construct($schedule, $budget, $ceremonyDetails) {\n        parent::__construct($schedule, $budget);\n        $this->ceremonyDetails = $ceremonyDetails;\n    }\n\n    public function scheduleEvent() {\n        echo \"Scheduling wedding ceremony on: \" . $this->schedule . \" with details: \" . $this->ceremonyDetails . \"\\n\";\n    }\n\n    public function budgetEvent() {\n        echo \"Budgeting wedding ceremony with: $\" . $this->budget . \" for details: \" . $this->ceremonyDetails . \"\\n\";\n    }\n}\n\n// Example usage\n$wedding = new WeddingPlanner(\"2024-06-15\", 20000, \"Beach ceremony\");\n$wedding->scheduleEvent();\n$wedding->budgetEvent();\n```"
  },
  {
    "task": "Implement a base class for a software feature with methods for functionality and user feedback, then create a beta feature subclass that overrides these methods for testing.",
    "code": "```php\n<?php\n\nclass SoftwareFeature {\n    public function functionality() {\n        return \"Base functionality\";\n    }\n\n    public function userFeedback() {\n        return \"Base user feedback\";\n    }\n}\n\nclass BetaFeature extends SoftwareFeature {\n    public function functionality() {\n        return \"Beta functionality for testing\";\n    }\n\n    public function userFeedback() {\n        return \"Beta user feedback for testing\";\n    }\n}\n\n// Example usage\n$baseFeature = new SoftwareFeature();\necho $baseFeature->functionality(); // Output: Base functionality\necho $baseFeature->userFeedback();  // Output: Base user feedback\n\n$betaFeature = new BetaFeature();\necho $betaFeature->functionality(); // Output: Beta functionality for testing\necho $betaFeature->userFeedback();  // Output: Beta user feedback for testing\n\n?>\n```"
  },
  {
    "task": "Construct a parent class for a gardening tool with methods for usage and maintenance, then derive a lawn mower class that overrides these methods for grass cutting.",
    "code": "```php\n<?php\n\nclass GardeningTool {\n    public function useTool() {\n        return \"Using the gardening tool.\";\n    }\n\n    public function maintainTool() {\n        return \"Maintaining the gardening tool.\";\n    }\n}\n\nclass LawnMower extends GardeningTool {\n    public function useTool() {\n        return \"Using the lawn mower to cut grass.\";\n    }\n\n    public function maintainTool() {\n        return \"Maintaining the lawn mower.\";\n    }\n}\n\n// Example usage\n$lawnMower = new LawnMower();\necho $lawnMower->useTool(); // Output: Using the lawn mower to cut grass.\necho $lawnMower->maintainTool(); // Output: Maintaining the lawn mower.\n\n?>\n```"
  },
  {
    "task": "Set up a base class for a household chore with methods for time and effort, and extend it with a cleaning chore subclass that overrides these methods for dirt removal.",
    "code": "```php\n<?php\n\nclass HouseholdChore {\n    public function time() {\n        return \"Calculate the time needed for the chore.\";\n    }\n\n    public function effort() {\n        return \"Calculate the effort needed for the chore.\";\n    }\n}\n\nclass CleaningChore extends HouseholdChore {\n    public function time() {\n        return \"Calculate the time needed for cleaning.\";\n    }\n\n    public function effort() {\n        return \"Calculate the effort needed for cleaning.\";\n    }\n}\n\n// Example usage\n$chore = new CleaningChore();\necho $chore->time() . PHP_EOL;\necho $chore->effort() . PHP_EOL;\n\n?>\n```"
  },
  {
    "task": "Create a foundational class for a personal project with properties like name and deadline, and derive a coding project class that overrides the deadline property for milestones.",
    "code": "```php\nclass Project {\n    protected $name;\n    protected $deadline;\n\n    public function __construct($name, $deadline) {\n        $this->name = $name;\n        $this->deadline = $deadline;\n    }\n\n    public function getName() {\n        return $this->name;\n    }\n\n    public function getDeadline() {\n        return $this->deadline;\n    }\n}\n\nclass CodingProject extends Project {\n    private $milestoneDeadline;\n\n    public function __construct($name, $milestoneDeadline) {\n        parent::__construct($name, null);\n        $this->milestoneDeadline = $milestoneDeadline;\n    }\n\n    public function getDeadline() {\n        return $this->milestoneDeadline;\n    }\n}\n```"
  },
  {
    "task": "Design a base class for a holiday celebration with methods for traditions and activities, then create a Christmas celebration subclass that overrides these methods for gift exchange.",
    "code": "```php\n<?php\n\nclass HolidayCelebration {\n    public function traditions() {\n        return \"General holiday traditions.\";\n    }\n\n    public function activities() {\n        return \"General holiday activities.\";\n    }\n}\n\nclass ChristmasCelebration extends HolidayCelebration {\n    public function traditions() {\n        return \"Christmas traditions: decorating the tree, singing carols.\";\n    }\n\n    public function activities() {\n        return \"Christmas activities: gift exchange, family dinner.\";\n    }\n}\n\n// Example usage\n$christmas = new ChristmasCelebration();\necho $christmas->traditions(); // Output: Christmas traditions: decorating the tree, singing carols.\necho $christmas->activities(); // Output: Christmas activities: gift exchange, family dinner.\n\n?>\n```"
  },
  {
    "task": "Develop a superclass for a customer feedback system with methods for collecting and analyzing, then extend it with a product feedback subclass that overrides these methods for reviews.",
    "code": "```php\n<?php\n\nclass FeedbackSystem {\n    public function collectFeedback() {\n        return \"Collecting general feedback.\";\n    }\n\n    public function analyzeFeedback() {\n        return \"Analyzing general feedback.\";\n    }\n}\n\nclass ProductFeedback extends FeedbackSystem {\n    public function collectFeedback() {\n        return \"Collecting product-specific feedback.\";\n    }\n\n    public function analyzeFeedback() {\n        return \"Analyzing product-specific feedback.\";\n    }\n}\n\n// Example usage\n$generalFeedback = new FeedbackSystem();\necho $generalFeedback->collectFeedback() . \"\\n\";\necho $generalFeedback->analyzeFeedback() . \"\\n\";\n\n$productFeedback = new ProductFeedback();\necho $productFeedback->collectFeedback() . \"\\n\";\necho $productFeedback->analyzeFeedback() . \"\\n\";\n\n?>\n```"
  },
  {
    "task": "Implement a base class for a civic service with methods for public engagement and policy, then create a community service subclass that overrides these methods for local impact.",
    "code": "```php\n<?php\n\nclass CivicService {\n    public function publicEngagement() {\n        return \"Engaging with the public at a national level.\";\n    }\n\n    public function policy() {\n        return \"Implementing general civic policies.\";\n    }\n}\n\nclass CommunityService extends CivicService {\n    public function publicEngagement() {\n        return \"Engaging with the community at a local level.\";\n    }\n\n    public function policy() {\n        return \"Implementing community-specific policies.\";\n    }\n}\n\n// Example usage:\n$civicService = new CivicService();\necho $civicService->publicEngagement() . PHP_EOL;\necho $civicService->policy() . PHP_EOL;\n\n$communityService = new CommunityService();\necho $communityService->publicEngagement() . PHP_EOL;\necho $communityService->policy() . PHP_EOL;\n\n?>\n```"
  },
  {
    "task": "Construct a parent class for a culinary ingredient with methods for flavor and preparation, then derive a spice ingredient class that overrides these methods for seasoning.",
    "code": "```php\n<?php\n\n// Parent class\nclass Ingredient {\n    public function flavor() {\n        return \"Generic flavor\";\n    }\n\n    public function preparation() {\n        return \"Generic preparation\";\n    }\n}\n\n// Derived class\nclass Spice extends Ingredient {\n    public function flavor() {\n        return \"Spicy flavor\";\n    }\n\n    public function preparation() {\n        return \"Grind and sprinkle\";\n    }\n}\n\n// Example usage\n$genericIngredient = new Ingredient();\necho $genericIngredient->flavor(); // Output: Generic flavor\necho $genericIngredient->preparation(); // Output: Generic preparation\n\n$spiceIngredient = new Spice();\necho $spiceIngredient->flavor(); // Output: Spicy flavor\necho $spiceIngredient->preparation(); // Output: Grind and sprinkle\n```"
  },
  {
    "task": "Set up a base class for a scientific experiment with methods for hypothesis and testing, and extend it with a chemistry experiment subclass that overrides these methods for reactions.",
    "code": "```php\n<?php\n\nclass ScientificExperiment {\n    public function hypothesis() {\n        return \"Formulating a general hypothesis for the experiment.\";\n    }\n    \n    public function testing() {\n        return \"Conducting general tests based on the hypothesis.\";\n    }\n}\n\nclass ChemistryExperiment extends ScientificExperiment {\n    public function hypothesis() {\n        return \"Formulating a hypothesis specific to a chemical reaction.\";\n    }\n    \n    public function testing() {\n        return \"Conducting tests specific to observing chemical reactions.\";\n    }\n}\n\n// Example usage\n$experiment = new ChemistryExperiment();\necho $experiment->hypothesis() . PHP_EOL;\necho $experiment->testing() . PHP_EOL;\n\n?>\n```"
  },
  {
    "task": "Create a foundational class for an inventory system with properties like item ID and quantity, and derive a warehouse inventory class that overrides the quantity property for bulk storage.",
    "code": "```php\n<?php\n\nclass InventoryItem {\n    protected $itemId;\n    protected $quantity;\n\n    public function __construct($itemId, $quantity) {\n        $this->itemId = $itemId;\n        $this->quantity = $quantity;\n    }\n}\n\nclass WarehouseInventoryItem extends InventoryItem {\n    protected $quantity;\n\n    public function __construct($itemId, $bulkQuantity) {\n        parent::__construct($itemId, $bulkQuantity);\n        $this->quantity = $bulkQuantity;\n    }\n}\n\n// Example usage\n$item = new WarehouseInventoryItem('A123', 1000);\n?>\n```"
  },
  {
    "task": "Design a base class for a travel agency with methods for itinerary and bookings, then create a luxury travel subclass that overrides these methods for premium services.",
    "code": "```php\n<?php\n\nclass TravelAgency {\n    public function itinerary() {\n        return \"Standard itinerary for your trip.\";\n    }\n\n    public function bookings() {\n        return \"Standard booking services.\";\n    }\n}\n\nclass LuxuryTravel extends TravelAgency {\n    public function itinerary() {\n        return \"Premium itinerary with exclusive destinations.\";\n    }\n\n    public function bookings() {\n        return \"Luxury booking services with VIP facilities.\";\n    }\n}\n\n// Example usage\n$standardTravel = new TravelAgency();\necho $standardTravel->itinerary(); // Output: Standard itinerary for your trip.\necho $standardTravel->bookings();  // Output: Standard booking services.\n\n$luxuryTravel = new LuxuryTravel();\necho $luxuryTravel->itinerary(); // Output: Premium itinerary with exclusive destinations.\necho $luxuryTravel->bookings();  // Output: Luxury booking services with VIP facilities.\n```"
  },
  {
    "task": "Develop a superclass for an educational tool with methods for teaching and assessment, then extend it with a math tool subclass that overrides these methods for problem-solving.",
    "code": "```php\n<?php\n\n// Superclass\nclass EducationalTool {\n    public function teach() {\n        echo \"Teaching a generic subject.\\n\";\n    }\n\n    public function assess() {\n        echo \"Assessing a generic subject.\\n\";\n    }\n}\n\n// Subclass\nclass MathTool extends EducationalTool {\n    public function teach() {\n        echo \"Teaching math concepts.\\n\";\n    }\n\n    public function assess() {\n        echo \"Assessing math problems.\\n\";\n    }\n}\n\n// Usage\n$genericTool = new EducationalTool();\n$genericTool->teach();\n$genericTool->assess();\n\n$mathTool = new MathTool();\n$mathTool->teach();\n$mathTool->assess();\n\n?>\n```"
  },
  {
    "task": "Implement a base class for a community project with methods for planning and execution, then create a park renovation subclass that overrides these methods for landscaping.",
    "code": "```php\n<?php\n\nclass CommunityProject {\n    public function plan() {\n        echo \"Planning the community project.\\n\";\n    }\n\n    public function execute() {\n        echo \"Executing the community project.\\n\";\n    }\n}\n\nclass ParkRenovation extends CommunityProject {\n    public function plan() {\n        echo \"Planning the park renovation with landscaping details.\\n\";\n    }\n\n    public function execute() {\n        echo \"Executing the park renovation with a focus on landscaping.\\n\";\n    }\n}\n\n// Example usage\n$project = new ParkRenovation();\n$project->plan();\n$project->execute();\n\n?>\n```"
  },
  {
    "task": "Construct a parent class for a digital marketing strategy with methods for targeting and engagement, then derive a social media strategy class that overrides these methods for platforms.",
    "code": "```php\n<?php\n\nclass DigitalMarketingStrategy {\n    public function targeting() {\n        return \"Targeting audience using general marketing strategies.\";\n    }\n\n    public function engagement() {\n        return \"Engaging audience with general content.\";\n    }\n}\n\nclass SocialMediaStrategy extends DigitalMarketingStrategy {\n    public function targeting() {\n        return \"Targeting audience using social media data and insights.\";\n    }\n\n    public function engagement() {\n        return \"Engaging audience with tailored social media content.\";\n    }\n}\n\n// Example usage\n$strategy = new SocialMediaStrategy();\necho $strategy->targeting() . PHP_EOL;\necho $strategy->engagement() . PHP_EOL;\n\n?>\n```"
  },
  {
    "task": "Set up a base class for a scientific publication with methods for research and review, and extend it with a journal article subclass that overrides these methods for peer review.",
    "code": "```php\n<?php\n\nclass ScientificPublication {\n    public function research() {\n        echo \"Conducting research for the publication.\\n\";\n    }\n\n    public function review() {\n        echo \"Reviewing the publication.\\n\";\n    }\n}\n\nclass JournalArticle extends ScientificPublication {\n    public function research() {\n        echo \"Conducting in-depth research for the journal article.\\n\";\n    }\n\n    public function review() {\n        echo \"Peer reviewing the journal article.\\n\";\n    }\n}\n\n// Example usage\n$article = new JournalArticle();\n$article->research();\n$article->review();\n?>\n```"
  },
  {
    "task": "Create a foundational class for a software module with properties like name and dependencies, and derive a user interface module class that overrides the dependencies property for UI libraries.",
    "code": "```php\n<?php\n\nclass SoftwareModule {\n    protected $name;\n    protected $dependencies;\n\n    public function __construct($name, $dependencies = []) {\n        $this->name = $name;\n        $this->dependencies = $dependencies;\n    }\n\n    public function getName() {\n        return $this->name;\n    }\n\n    public function getDependencies() {\n        return $this->dependencies;\n    }\n}\n\nclass UIModule extends SoftwareModule {\n    protected $dependencies = ['UI Library'];\n\n    public function __construct($name, $dependencies = []) {\n        parent::__construct($name, $this->dependencies);\n    }\n}\n\n$module = new UIModule('User Interface Module');\necho $module->getName(); // Output: User Interface Module\nprint_r($module->getDependencies()); // Output: Array ( [0] => UI Library )\n\n?>\n```"
  },
  {
    "task": "Design a base class for a fashion line with methods for design and production, then create a summer collection subclass that overrides these methods for seasonal trends.",
    "code": "```php\n<?php\n\nclass FashionLine {\n    \n    public function design() {\n        return \"Designing general fashion items.\";\n    }\n    \n    public function production() {\n        return \"Producing general fashion items.\";\n    }\n}\n\nclass SummerCollection extends FashionLine {\n    \n    public function design() {\n        return \"Designing summer fashion items with seasonal trends.\";\n    }\n    \n    public function production() {\n        return \"Producing summer fashion items with seasonal trends.\";\n    }\n}\n\n// Example usage:\n$springLine = new FashionLine();\necho $springLine->design(); // Output: Designing general fashion items.\necho \"\\n\";\necho $springLine->production(); // Output: Producing general fashion items.\n\n$summerLine = new SummerCollection();\necho \"\\n\";\necho $summerLine->design(); // Output: Designing summer fashion items with seasonal trends.\necho \"\\n\";\necho $summerLine->production(); // Output: Producing summer fashion items with seasonal trends.\n\n?>\n```"
  },
  {
    "task": "Develop a superclass for a family tree with methods for ancestry and descendants, then extend it with a royal lineage subclass that overrides these methods for historical accuracy.",
    "code": "```php\n<?php\n\nclass FamilyTree {\n    protected $name;\n    protected $ancestors = [];\n    protected $descendants = [];\n\n    public function __construct($name) {\n        $this->name = $name;\n    }\n\n    public function addAncestor($ancestor) {\n        $this->ancestors[] = $ancestor;\n    }\n\n    public function addDescendant($descendant) {\n        $this->descendants[] = $descendant;\n    }\n\n    public function getAncestors() {\n        return $this->ancestors;\n    }\n\n    public function getDescendants() {\n        return $this->descendants;\n    }\n}\n\nclass RoyalLineage extends FamilyTree {\n\n    public function getAncestors() {\n        return array_map(function($ancestor) {\n            return \"King/Queen \" . $ancestor;\n        }, $this->ancestors);\n    }\n\n    public function getDescendants() {\n        return array_map(function($descendant) {\n            return \"Prince/Princess \" . $descendant;\n        }, $this->descendants);\n    }\n}\n\n// Example usage\n// $royal = new RoyalLineage('Royal Family');\n// $royal->addAncestor('George');\n// $royal->addDescendant('Charles');\n// print_r($royal->getAncestors());\n// print_r($royal->getDescendants());\n\n?>\n```"
  },
  {
    "task": "Implement a base class for a musical score with methods for composition and arrangement, then create a symphony subclass that overrides these methods for orchestration.",
    "code": "```php\n<?php\n\nclass MusicalScore {\n    public function compose() {\n        return \"Composing music...\";\n    }\n\n    public function arrange() {\n        return \"Arranging music...\";\n    }\n}\n\nclass Symphony extends MusicalScore {\n    public function compose() {\n        return \"Composing a symphony...\";\n    }\n\n    public function arrange() {\n        return \"Arranging a symphony for orchestration...\";\n    }\n}\n\n// Example usage\n$score = new MusicalScore();\necho $score->compose(); // Outputs: Composing music...\necho $score->arrange(); // Outputs: Arranging music...\n\n$symphony = new Symphony();\necho $symphony->compose(); // Outputs: Composing a symphony...\necho $symphony->arrange(); // Outputs: Arranging a symphony for orchestration...\n?>\n```"
  },
  {
    "task": "Construct a parent class for a historical record with methods for events and dates, then derive a war history class that overrides these methods for battles.",
    "code": "```php\n<?php\n\nclass HistoricalRecord {\n    protected $events;\n    protected $dates;\n\n    public function __construct($events = [], $dates = []) {\n        $this->events = $events;\n        $this->dates = $dates;\n    }\n\n    public function getEvents() {\n        return $this->events;\n    }\n\n    public function getDates() {\n        return $this->dates;\n    }\n}\n\nclass WarHistory extends HistoricalRecord {\n    protected $battles;\n\n    public function __construct($battles = [], $dates = []) {\n        parent::__construct($battles, $dates);\n        $this->battles = $battles;\n    }\n\n    public function getEvents() {\n        return $this->battles;\n    }\n\n    public function getDates() {\n        return $this->dates;\n    }\n}\n\n?>\n```"
  },
  {
    "task": "Set up a base class for a pet adoption service with methods for application and approval, and extend it with a dog adoption subclass that overrides these methods for breed compatibility.",
    "code": "```php\n<?php\n\nclass PetAdoptionService {\n    public function applyForAdoption($applicantName) {\n        return \"Application received from $applicantName.\";\n    }\n\n    public function approveAdoption($applicantName) {\n        return \"Adoption approved for $applicantName.\";\n    }\n}\n\nclass DogAdoptionService extends PetAdoptionService {\n    public function applyForAdoption($applicantName, $desiredBreed) {\n        return \"Application received from $applicantName for a $desiredBreed.\";\n    }\n\n    public function approveAdoption($applicantName, $desiredBreed, $availableBreed) {\n        if ($desiredBreed === $availableBreed) {\n            return \"Adoption approved for $applicantName for a $desiredBreed.\";\n        } else {\n            return \"Adoption not approved for $applicantName. Desired breed $desiredBreed is not available.\";\n        }\n    }\n}\n\n// Example usage:\n$dogAdoption = new DogAdoptionService();\necho $dogAdoption->applyForAdoption(\"John Doe\", \"Labrador\");\necho \"\\n\";\necho $dogAdoption->approveAdoption(\"John Doe\", \"Labrador\", \"Labrador\");\n\n?>\n```"
  },
  {
    "task": "Create a foundational class for a financial report with properties like fiscal year and summary, and derive an annual report class that overrides the fiscal year property for yearly data.",
    "code": "```php\n<?php\n\nclass FinancialReport {\n    protected $fiscalYear;\n    protected $summary;\n\n    public function __construct($fiscalYear, $summary) {\n        $this->fiscalYear = $fiscalYear;\n        $this->summary = $summary;\n    }\n\n    public function getFiscalYear() {\n        return $this->fiscalYear;\n    }\n\n    public function getSummary() {\n        return $this->summary;\n    }\n}\n\nclass AnnualReport extends FinancialReport {\n    public function __construct($summary) {\n        parent::__construct(date('Y'), $summary);\n    }\n}\n\n$annualReport = new AnnualReport(\"Annual financial summary.\");\necho $annualReport->getFiscalYear(); // Outputs current year\necho $annualReport->getSummary(); // Outputs the summary provided\n?>\n```"
  },
  {
    "task": "Design a base class for a movie franchise with methods for casting and production, then create a sequel subclass that overrides these methods for continuity.",
    "code": "```php\n<?php\n\nclass MovieFranchise {\n    protected $title;\n    protected $director;\n    protected $cast = [];\n\n    public function __construct($title, $director) {\n        $this->title = $title;\n        $this->director = $director;\n    }\n\n    public function addCastMember($actor) {\n        $this->cast[] = $actor;\n    }\n\n    public function startProduction() {\n        return \"Starting production of {$this->title} directed by {$this->director}.\";\n    }\n}\n\nclass Sequel extends MovieFranchise {\n    public function addCastMember($actor) {\n        if (!in_array($actor, $this->cast)) {\n            $this->cast[] = $actor;\n        }\n    }\n\n    public function startProduction() {\n        return \"Continuing the franchise with {$this->title} sequel directed by {$this->director}.\";\n    }\n}\n\n// Usage example\n$movie = new MovieFranchise(\"Original Movie\", \"Director A\");\n$movie->addCastMember(\"Actor 1\");\n$movie->addCastMember(\"Actor 2\");\necho $movie->startProduction();\n\n$sequel = new Sequel(\"Original Movie Sequel\", \"Director B\");\n$sequel->addCastMember(\"Actor 1\");\n$sequel->addCastMember(\"Actor 3\");\necho $sequel->startProduction();\n\n?>\n```"
  },
  {
    "task": "Develop a superclass for a real estate listing with methods for pricing and description, then extend it with a luxury listing subclass that overrides these methods for high-end features.",
    "code": "```php\n<?php\n\nclass RealEstateListing {\n    protected $price;\n    protected $description;\n\n    public function __construct($price, $description) {\n        $this->price = $price;\n        $this->description = $description;\n    }\n\n    public function getPrice() {\n        return $this->price;\n    }\n\n    public function getDescription() {\n        return $this->description;\n    }\n}\n\nclass LuxuryRealEstateListing extends RealEstateListing {\n\n    public function __construct($price, $description) {\n        parent::__construct($price, $description);\n    }\n\n    public function getPrice() {\n        return \"$\" . number_format($this->price, 2) . \" (Luxury Price)\";\n    }\n\n    public function getDescription() {\n        return \"Luxury: \" . $this->description . \" with exclusive high-end features.\";\n    }\n}\n\n// Example usage:\n$basicListing = new RealEstateListing(300000, \"A cozy 3-bedroom house.\");\n$luxuryListing = new LuxuryRealEstateListing(5000000, \"An exquisite mansion.\");\n\necho $basicListing->getPrice() . \"\\n\";\necho $basicListing->getDescription() . \"\\n\";\necho $luxuryListing->getPrice() . \"\\n\";\necho $luxuryListing->getDescription() . \"\\n\";\n\n?>\n```"
  },
  {
    "task": "Implement a base class for a mobile app with methods for user interface and performance, then create a gaming app subclass that overrides these methods for graphics and speed.",
    "code": "```php\n<?php\n\nclass MobileApp {\n    public function userInterface() {\n        return \"Standard User Interface\";\n    }\n\n    public function performance() {\n        return \"Standard Performance\";\n    }\n}\n\nclass GamingApp extends MobileApp {\n    public function userInterface() {\n        return \"Enhanced Graphics User Interface\";\n    }\n\n    public function performance() {\n        return \"High-Speed Performance\";\n    }\n}\n\n// Example usage\n$standardApp = new MobileApp();\necho $standardApp->userInterface(); // Outputs: Standard User Interface\necho $standardApp->performance();   // Outputs: Standard Performance\n\n$gamingApp = new GamingApp();\necho $gamingApp->userInterface();   // Outputs: Enhanced Graphics User Interface\necho $gamingApp->performance();     // Outputs: High-Speed Performance\n\n?>\n```"
  },
  {
    "task": "Construct a parent class for a corporate policy with methods for compliance and enforcement, then derive an HR policy class that overrides these methods for employee relations.",
    "code": "```php\n<?php\n\nclass CorporatePolicy {\n    public function compliance() {\n        return \"Corporate compliance guidelines.\";\n    }\n\n    public function enforcement() {\n        return \"Corporate enforcement procedures.\";\n    }\n}\n\nclass HRPolicy extends CorporatePolicy {\n    public function compliance() {\n        return \"HR-specific compliance guidelines for employee relations.\";\n    }\n\n    public function enforcement() {\n        return \"HR-specific enforcement procedures for employee relations.\";\n    }\n}\n\n// Example usage\n$hrPolicy = new HRPolicy();\necho $hrPolicy->compliance(); // Output: HR-specific compliance guidelines for employee relations.\necho $hrPolicy->enforcement(); // Output: HR-specific enforcement procedures for employee relations.\n\n?>\n```"
  },
  {
    "task": "Set up a base class for a scientific calculator with methods for basic operations and advanced functions, and extend it with a graphing calculator subclass that overrides these methods for plotting.",
    "code": "```php\n<?php\n\nclass ScientificCalculator {\n    public function add($a, $b) {\n        return $a + $b;\n    }\n\n    public function subtract($a, $b) {\n        return $a - $b;\n    }\n\n    public function multiply($a, $b) {\n        return $a * $b;\n    }\n\n    public function divide($a, $b) {\n        if ($b == 0) {\n            throw new Exception(\"Division by zero.\");\n        }\n        return $a / $b;\n    }\n\n    public function sin($angle) {\n        return sin(deg2rad($angle));\n    }\n\n    public function cos($angle) {\n        return cos(deg2rad($angle));\n    }\n\n    public function tan($angle) {\n        return tan(deg2rad($angle));\n    }\n\n    public function log($value, $base = M_E) {\n        return log($value, $base);\n    }\n}\n\nclass GraphingCalculator extends ScientificCalculator {\n    public function add($a, $b) {\n        return \"Plotting addition of $a and $b on graph.\";\n    }\n\n    public function subtract($a, $b) {\n        return \"Plotting subtraction of $a from $b on graph.\";\n    }\n\n    public function multiply($a, $b) {\n        return \"Plotting multiplication of $a and $b on graph.\";\n    }\n\n    public function divide($a, $b) {\n        return \"Plotting division of $a by $b on graph.\";\n    }\n\n    public function sin($angle) {\n        return \"Plotting sine of $angle on graph.\";\n    }\n\n    public function cos($angle) {\n        return \"Plotting cosine of $angle on graph.\";\n    }\n\n    public function tan($angle) {\n        return \"Plotting tangent of $angle on graph.\";\n    }\n\n    public function log($value, $base = M_E) {\n        return \"Plotting logarithm of $value with base $base on graph.\";\n    }\n}\n\n?>\n```"
  },
  {
    "task": "Create a foundational class for a children's book with properties like age group and illustrations, and derive a picture book class that overrides the illustrations property to be more prominent.",
    "code": "```php\n<?php\n\nclass ChildrensBook {\n    protected $ageGroup;\n    protected $illustrations;\n\n    public function __construct($ageGroup, $illustrations) {\n        $this->ageGroup = $ageGroup;\n        $this->illustrations = $illustrations;\n    }\n\n    public function getAgeGroup() {\n        return $this->ageGroup;\n    }\n\n    public function getIllustrations() {\n        return $this->illustrations;\n    }\n}\n\nclass PictureBook extends ChildrensBook {\n    protected $illustrations;\n\n    public function __construct($ageGroup, $illustrations) {\n        parent::__construct($ageGroup, $illustrations);\n        $this->illustrations = strtoupper($illustrations);\n    }\n\n    public function getIllustrations() {\n        return $this->illustrations;\n    }\n}\n\n// Example usage\n$book = new PictureBook(\"3-5 years\", \"colorful illustrations\");\necho $book->getIllustrations(); // Output: COLORFUL ILLUSTRATIONS\n\n?>\n```"
  },
  {
    "task": "Design a base class for a cooking class with methods for ingredients and techniques, then create a baking class subclass that overrides these methods for dough preparation.",
    "code": "```php\n<?php\n\nclass CookingClass {\n    public function getIngredients() {\n        return \"Basic ingredients for cooking.\";\n    }\n\n    public function getTechniques() {\n        return \"Basic cooking techniques.\";\n    }\n}\n\nclass BakingClass extends CookingClass {\n    public function getIngredients() {\n        return \"Flour, water, yeast, salt.\";\n    }\n\n    public function getTechniques() {\n        return \"Mixing, kneading, proofing, baking.\";\n    }\n}\n\n// Example usage\n$bakingClass = new BakingClass();\necho $bakingClass->getIngredients(); // Outputs: Flour, water, yeast, salt.\necho $bakingClass->getTechniques(); // Outputs: Mixing, kneading, proofing, baking.\n\n?>\n```"
  },
  {
    "task": "Develop a superclass for a public transportation system with methods for routes and schedules, then extend it with a metro system subclass that overrides these methods for urban areas.",
    "code": "```php\n<?php\n\nclass PublicTransportationSystem {\n    public function getRoutes() {\n        return \"Listing all available routes.\";\n    }\n\n    public function getSchedules() {\n        return \"Listing all available schedules.\";\n    }\n}\n\nclass MetroSystem extends PublicTransportationSystem {\n    public function getRoutes() {\n        return \"Listing urban metro routes.\";\n    }\n\n    public function getSchedules() {\n        return \"Listing urban metro schedules.\";\n    }\n}\n\n// Example usage\n$metro = new MetroSystem();\necho $metro->getRoutes(); // Outputs: Listing urban metro routes.\necho $metro->getSchedules(); // Outputs: Listing urban metro schedules.\n\n?>\n```"
  },
  {
    "task": "Implement a base class for a music store inventory with methods for stock and sales, then create a vinyl record subclass that overrides these methods for collectible items.",
    "code": "```php\nclass MusicStoreInventory {\n    protected $stock;\n    protected $sales;\n\n    public function __construct($stock = 0, $sales = 0) {\n        $this->stock = $stock;\n        $this->sales = $sales;\n    }\n\n    public function addStock($amount) {\n        $this->stock += $amount;\n    }\n\n    public function recordSale($amount) {\n        if ($amount <= $this->stock) {\n            $this->stock -= $amount;\n            $this->sales += $amount;\n        } else {\n            echo \"Not enough stock available.\";\n        }\n    }\n\n    public function getStock() {\n        return $this->stock;\n    }\n\n    public function getSales() {\n        return $this->sales;\n    }\n}\n\nclass VinylRecord extends MusicStoreInventory {\n    public function addStock($amount) {\n        $this->stock += $amount * 2; // Assume collectible items have special handling\n    }\n\n    public function recordSale($amount) {\n        if ($amount <= $this->stock) {\n            $this->stock -= $amount;\n            $this->sales += $amount * 1.5; // Special sales calculation for collectibles\n        } else {\n            echo \"Not enough collectible stock available.\";\n        }\n    }\n}\n```"
  },
  {
    "task": "Construct a parent class for a legal contract with methods for terms and conditions, then derive a rental agreement class that overrides these methods for tenant rights.",
    "code": "```php\n<?php\n\nclass LegalContract {\n    public function terms() {\n        return \"Standard terms of the legal contract.\";\n    }\n\n    public function conditions() {\n        return \"Standard conditions of the legal contract.\";\n    }\n}\n\nclass RentalAgreement extends LegalContract {\n    public function terms() {\n        return \"Specific terms for tenant rights in the rental agreement.\";\n    }\n\n    public function conditions() {\n        return \"Specific conditions for tenant rights in the rental agreement.\";\n    }\n}\n\n// Example usage\n$contract = new LegalContract();\necho $contract->terms(); // Output: Standard terms of the legal contract.\necho $contract->conditions(); // Output: Standard conditions of the legal contract.\n\n$rental = new RentalAgreement();\necho $rental->terms(); // Output: Specific terms for tenant rights in the rental agreement.\necho $rental->conditions(); // Output: Specific conditions for tenant rights in the rental agreement.\n\n?>\n```"
  },
  {
    "task": "Set up a base class for a journalism piece with methods for reporting and editing, and extend it with an investigative article subclass that overrides these methods for in-depth analysis.",
    "code": "```php\n<?php\n\nclass JournalismPiece {\n    public function report() {\n        return \"Reporting the news...\";\n    }\n\n    public function edit() {\n        return \"Editing the article...\";\n    }\n}\n\nclass InvestigativeArticle extends JournalismPiece {\n    public function report() {\n        return \"Reporting with in-depth analysis...\";\n    }\n\n    public function edit() {\n        return \"Editing with a focus on detailed scrutiny...\";\n    }\n}\n\n// Example usage\n$article = new InvestigativeArticle();\necho $article->report();\necho \"\\n\";\necho $article->edit();\n\n?>\n```"
  },
  {
    "task": "Create a foundational class for a wildlife reserve with properties like area and species, and derive a bird sanctuary class that overrides the species property for avians.",
    "code": "```php\nclass WildlifeReserve {\n    protected $area;\n    protected $species;\n\n    public function __construct($area, $species) {\n        $this->area = $area;\n        $this->species = $species;\n    }\n\n    public function getArea() {\n        return $this->area;\n    }\n\n    public function getSpecies() {\n        return $this->species;\n    }\n}\n\nclass BirdSanctuary extends WildlifeReserve {\n    protected $species;\n\n    public function __construct($area, $species = 'Avians') {\n        parent::__construct($area, $species);\n    }\n\n    public function getSpecies() {\n        return $this->species;\n    }\n}\n```"
  },
  {
    "task": "Design a base class for a subscription box service with methods for curation and delivery, then create a gourmet food box subclass that overrides these methods for artisanal products.",
    "code": "```php\n<?php\n\nclass SubscriptionBox {\n    public function curate() {\n        echo \"Curating items for the subscription box.\\n\";\n    }\n\n    public function deliver() {\n        echo \"Delivering the subscription box.\\n\";\n    }\n}\n\nclass GourmetFoodBox extends SubscriptionBox {\n    public function curate() {\n        echo \"Curating artisanal food items for the gourmet box.\\n\";\n    }\n\n    public function deliver() {\n        echo \"Delivering the gourmet food box with artisanal products.\\n\";\n    }\n}\n\n// Usage example\n$box = new GourmetFoodBox();\n$box->curate();\n$box->deliver();\n?>\n```"
  },
  {
    "task": "Develop a superclass for a fitness app with methods for tracking and motivation, then extend it with a running app subclass that overrides these methods for pace and distance.",
    "code": "```php\n<?php\n\nclass FitnessApp {\n    public function track() {\n        return \"Tracking fitness activities.\";\n    }\n\n    public function motivate() {\n        return \"Stay motivated!\";\n    }\n}\n\nclass RunningApp extends FitnessApp {\n    public function track() {\n        return \"Tracking running pace and distance.\";\n    }\n\n    public function motivate() {\n        return \"Keep pushing your pace!\";\n    }\n}\n\n// Example usage:\n$runningApp = new RunningApp();\necho $runningApp->track(); // Output: Tracking running pace and distance.\necho $runningApp->motivate(); // Output: Keep pushing your pace!\n\n?>\n```"
  },
  {
    "task": "Implement a base class for a digital portfolio with methods for showcasing and updating, then create an artist portfolio subclass that overrides these methods for galleries.",
    "code": "```php\n<?php\n\nclass DigitalPortfolio {\n    public function showcase() {\n        return \"Displaying the general portfolio.\";\n    }\n\n    public function update() {\n        return \"Updating the general portfolio.\";\n    }\n}\n\nclass ArtistPortfolio extends DigitalPortfolio {\n    public function showcase() {\n        return \"Displaying the artist's gallery.\";\n    }\n\n    public function update() {\n        return \"Updating the artist's gallery.\";\n    }\n}\n\n// Usage\n$portfolio = new ArtistPortfolio();\necho $portfolio->showcase();\necho \"\\n\";\necho $portfolio->update();\n\n?>\n```"
  },
  {
    "task": "Construct a parent class for a gaming console with methods for performance and compatibility, then derive a next-gen console class that overrides these methods for new features.",
    "code": "```php\n<?php\n\nclass GamingConsole {\n    public function performance() {\n        return \"Standard performance\";\n    }\n\n    public function compatibility() {\n        return \"Compatible with current-gen games\";\n    }\n}\n\nclass NextGenConsole extends GamingConsole {\n    public function performance() {\n        return \"Enhanced performance with ray tracing\";\n    }\n\n    public function compatibility() {\n        return \"Backward compatible with all previous-gen games\";\n    }\n}\n\n// Example usage\n$console = new NextGenConsole();\necho $console->performance(); // Outputs: Enhanced performance with ray tracing\necho $console->compatibility(); // Outputs: Backward compatible with all previous-gen games\n\n?>\n```"
  },
  {
    "task": "Set up a base class for a cultural festival with methods for events and participation, and extend it with a music festival subclass that overrides these methods for performances.",
    "code": "```php\n<?php\n\nclass CulturalFestival {\n    public function events() {\n        return \"General cultural events.\";\n    }\n\n    public function participation() {\n        return \"Open for all.\";\n    }\n}\n\nclass MusicFestival extends CulturalFestival {\n    public function events() {\n        return \"Music performances and concerts.\";\n    }\n\n    public function participation() {\n        return \"Musicians and music lovers.\";\n    }\n}\n\n// Example usage\n$culturalFestival = new CulturalFestival();\necho $culturalFestival->events(); // Outputs: General cultural events.\necho $culturalFestival->participation(); // Outputs: Open for all.\n\n$musicFestival = new MusicFestival();\necho $musicFestival->events(); // Outputs: Music performances and concerts.\necho $musicFestival->participation(); // Outputs: Musicians and music lovers.\n\n?>\n```"
  }
]