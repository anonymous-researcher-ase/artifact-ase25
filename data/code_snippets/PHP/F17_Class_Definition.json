[
  {
    "task": "Define a class representing a book with attributes for title, author, and number of pages, and a method to display the book's information.",
    "code": "```php\n<?php\n\nclass Book {\n    private $title;\n    private $author;\n    private $numberOfPages;\n\n    public function __construct($title, $author, $numberOfPages) {\n        $this->title = $title;\n        $this->author = $author;\n        $this->numberOfPages = $numberOfPages;\n    }\n\n    public function displayInfo() {\n        echo \"Title: \" . $this->title . \"\\n\";\n        echo \"Author: \" . $this->author . \"\\n\";\n        echo \"Number of Pages: \" . $this->numberOfPages . \"\\n\";\n    }\n}\n\n?>\n```"
  },
  {
    "task": "Create a class for a bank account that includes attributes for account number, balance, and a method to deposit funds.",
    "code": "```php\n<?php\n\nclass BankAccount {\n    private $accountNumber;\n    private $balance;\n\n    public function __construct($accountNumber, $balance = 0) {\n        $this->accountNumber = $accountNumber;\n        $this->balance = $balance;\n    }\n\n    public function deposit($amount) {\n        if ($amount > 0) {\n            $this->balance += $amount;\n        }\n    }\n\n    public function getAccountNumber() {\n        return $this->accountNumber;\n    }\n\n    public function getBalance() {\n        return $this->balance;\n    }\n}\n\n?>\n```"
  },
  {
    "task": "Design a class for a vehicle with properties for make, model, and year, and a method to start the engine.",
    "code": "```php\n<?php\n\nclass Vehicle {\n    private $make;\n    private $model;\n    private $year;\n\n    public function __construct($make, $model, $year) {\n        $this->make = $make;\n        $this->model = $model;\n        $this->year = $year;\n    }\n\n    public function startEngine() {\n        return \"The engine has started.\";\n    }\n}\n```"
  },
  {
    "task": "Implement a class that models a student with attributes for name, ID, and grades, and a method to calculate the GPA.",
    "code": "```php\nclass Student {\n    private $name;\n    private $id;\n    private $grades;\n\n    public function __construct($name, $id, $grades = []) {\n        $this->name = $name;\n        $this->id = $id;\n        $this->grades = $grades;\n    }\n\n    public function calculateGPA() {\n        if (empty($this->grades)) {\n            return 0;\n        }\n        \n        $sum = array_sum($this->grades);\n        $count = count($this->grades);\n        return $sum / $count;\n    }\n}\n```"
  },
  {
    "task": "Construct a class for a rectangle that has attributes for width and height, and methods to calculate area and perimeter.",
    "code": "```php\n<?php\n\nclass Rectangle {\n    private $width;\n    private $height;\n\n    public function __construct($width, $height) {\n        $this->width = $width;\n        $this->height = $height;\n    }\n\n    public function getArea() {\n        return $this->width * $this->height;\n    }\n\n    public function getPerimeter() {\n        return 2 * ($this->width + $this->height);\n    }\n}\n```"
  },
  {
    "task": "Formulate a class for a smartphone with properties for brand, model, and battery life, and a method to make a call.",
    "code": "```php\n<?php\n\nclass Smartphone {\n    private $brand;\n    private $model;\n    private $batteryLife;\n\n    public function __construct($brand, $model, $batteryLife) {\n        $this->brand = $brand;\n        $this->model = $model;\n        $this->batteryLife = $batteryLife;\n    }\n\n    public function makeCall($number) {\n        return \"Calling \" . $number . \" using \" . $this->brand . \" \" . $this->model;\n    }\n}\n\n?>\n```"
  },
  {
    "task": "Build a class representing a movie with attributes for title, director, and duration, and a method to play the movie.",
    "code": "```php\n<?php\n\nclass Movie {\n    private $title;\n    private $director;\n    private $duration;\n\n    public function __construct($title, $director, $duration) {\n        $this->title = $title;\n        $this->director = $director;\n        $this->duration = $duration;\n    }\n\n    public function play() {\n        echo \"Playing the movie: \" . $this->title;\n    }\n}\n```"
  },
  {
    "task": "Create a class for an employee with attributes for name, position, and salary, and a method to display their profile.",
    "code": "```php\n<?php\n\nclass Employee {\n    private $name;\n    private $position;\n    private $salary;\n\n    public function __construct($name, $position, $salary) {\n        $this->name = $name;\n        $this->position = $position;\n        $this->salary = $salary;\n    }\n\n    public function displayProfile() {\n        echo \"Name: \" . $this->name . \"\\n\";\n        echo \"Position: \" . $this->position . \"\\n\";\n        echo \"Salary: \" . $this->salary . \"\\n\";\n    }\n}\n```"
  },
  {
    "task": "Design a class for a library that includes attributes for name, location, and books available, and a method to add a new book.",
    "code": "```php\n<?php\n\nclass Library {\n    private $name;\n    private $location;\n    private $books = array();\n\n    public function __construct($name, $location) {\n        $this->name = $name;\n        $this->location = $location;\n    }\n\n    public function addBook($book) {\n        $this->books[] = $book;\n    }\n\n    // Additional methods can be added here if needed\n}\n\n?>\n```"
  },
  {
    "task": "Develop a class for a shopping cart with properties for items and total cost, and methods to add and remove items.",
    "code": "```php\n<?php\n\nclass ShoppingCart {\n    private $items = [];\n    private $totalCost = 0.0;\n\n    public function addItem($item, $price) {\n        $this->items[] = $item;\n        $this->totalCost += $price;\n    }\n\n    public function removeItem($item, $price) {\n        $key = array_search($item, $this->items);\n        if ($key !== false) {\n            unset($this->items[$key]);\n            $this->totalCost -= $price;\n        }\n    }\n\n    public function getItems() {\n        return $this->items;\n    }\n\n    public function getTotalCost() {\n        return $this->totalCost;\n    }\n}\n?>\n```"
  },
  {
    "task": "Implement a class for a thermostat with attributes for current temperature and desired temperature, and a method to adjust the temperature.",
    "code": "```php\n<?php\n\nclass Thermostat {\n    private $currentTemperature;\n    private $desiredTemperature;\n\n    public function __construct($current, $desired) {\n        $this->currentTemperature = $current;\n        $this->desiredTemperature = $desired;\n    }\n\n    public function adjustTemperature() {\n        if ($this->currentTemperature < $this->desiredTemperature) {\n            $this->currentTemperature++;\n        } elseif ($this->currentTemperature > $this->desiredTemperature) {\n            $this->currentTemperature--;\n        }\n    }\n\n    public function getCurrentTemperature() {\n        return $this->currentTemperature;\n    }\n\n    public function getDesiredTemperature() {\n        return $this->desiredTemperature;\n    }\n}\n?>\n```"
  },
  {
    "task": "Formulate a class for a person with attributes for first name, last name, and age, and a method to return the full name.",
    "code": "```php\n<?php\n\nclass Person {\n    private $firstName;\n    private $lastName;\n    private $age;\n\n    public function __construct($firstName, $lastName, $age) {\n        $this->firstName = $firstName;\n        $this->lastName = $lastName;\n        $this->age = $age;\n    }\n\n    public function getFullName() {\n        return $this->firstName . ' ' . $this->lastName;\n    }\n}\n?>\n```"
  },
  {
    "task": "Construct a class for a game character with properties for health, strength, and inventory, and a method to attack.",
    "code": "```php\n<?php\n\nclass GameCharacter {\n    public $health;\n    public $strength;\n    public $inventory;\n\n    public function __construct($health, $strength, $inventory = []) {\n        $this->health = $health;\n        $this->strength = $strength;\n        $this->inventory = $inventory;\n    }\n\n    public function attack() {\n        // Attack logic can be implemented here\n        return \"The character attacks with strength of \" . $this->strength;\n    }\n}\n```"
  },
  {
    "task": "Create a class for a calendar event with attributes for title, date, and location, and a method to reschedule the event.",
    "code": "```php\n<?php\n\nclass CalendarEvent {\n    private $title;\n    private $date;\n    private $location;\n\n    public function __construct($title, $date, $location) {\n        $this->title = $title;\n        $this->date = $date;\n        $this->location = $location;\n    }\n\n    public function reschedule($newDate) {\n        $this->date = $newDate;\n    }\n\n    // Additional methods like getters can be added here if needed\n}\n\n?>\n```"
  },
  {
    "task": "Design a class representing a song with properties for title, artist, and duration, and a method to play the song.",
    "code": "```php\nclass Song {\n    private $title;\n    private $artist;\n    private $duration;\n\n    public function __construct($title, $artist, $duration) {\n        $this->title = $title;\n        $this->artist = $artist;\n        $this->duration = $duration;\n    }\n\n    public function play() {\n        echo \"Playing {$this->title} by {$this->artist}. Duration: {$this->duration} minutes.\";\n    }\n}\n```"
  },
  {
    "task": "Develop a class for an order in an e-commerce system with attributes for order ID, customer, and items, and a method to calculate total price.",
    "code": "```php\n<?php\n\nclass Order {\n    private $orderId;\n    private $customer;\n    private $items;\n\n    public function __construct($orderId, $customer, $items) {\n        $this->orderId = $orderId;\n        $this->customer = $customer;\n        $this->items = $items;\n    }\n\n    public function calculateTotalPrice() {\n        $total = 0;\n        foreach ($this->items as $item) {\n            $total += $item['price'] * $item['quantity'];\n        }\n        return $total;\n    }\n}\n```"
  },
  {
    "task": "Build a class for a social media post with attributes for content, author, and timestamp, and a method to like the post.",
    "code": "```php\n<?php\n\nclass SocialMediaPost {\n    private $content;\n    private $author;\n    private $timestamp;\n    private $likes;\n\n    public function __construct($content, $author, $timestamp) {\n        $this->content = $content;\n        $this->author = $author;\n        $this->timestamp = $timestamp;\n        $this->likes = 0;\n    }\n\n    public function likePost() {\n        $this->likes++;\n    }\n\n    public function getContent() {\n        return $this->content;\n    }\n\n    public function getAuthor() {\n        return $this->author;\n    }\n\n    public function getTimestamp() {\n        return $this->timestamp;\n    }\n\n    public function getLikes() {\n        return $this->likes;\n    }\n}\n\n?>\n```"
  },
  {
    "task": "Create a class for a computer with properties for processor, RAM, and storage, and a method to display system specifications.",
    "code": "```php\nclass Computer {\n    public $processor;\n    public $ram;\n    public $storage;\n\n    public function __construct($processor, $ram, $storage) {\n        $this->processor = $processor;\n        $this->ram = $ram;\n        $this->storage = $storage;\n    }\n\n    public function displaySpecifications() {\n        echo \"Processor: \" . $this->processor . \"\\n\";\n        echo \"RAM: \" . $this->ram . \" GB\\n\";\n        echo \"Storage: \" . $this->storage . \" GB\\n\";\n    }\n}\n```"
  },
  {
    "task": "Implement a class for a restaurant menu item with attributes for name, price, and description, and a method to update the price.",
    "code": "```php\n<?php\n\nclass MenuItem {\n    private $name;\n    private $price;\n    private $description;\n\n    public function __construct($name, $price, $description) {\n        $this->name = $name;\n        $this->price = $price;\n        $this->description = $description;\n    }\n\n    public function updatePrice($newPrice) {\n        $this->price = $newPrice;\n    }\n\n    public function getName() {\n        return $this->name;\n    }\n\n    public function getPrice() {\n        return $this->price;\n    }\n\n    public function getDescription() {\n        return $this->description;\n    }\n}\n\n?>\n```"
  },
  {
    "task": "Design a class for a package delivery with attributes for tracking number, destination, and status, and a method to update the status.",
    "code": "```php\n<?php\n\nclass PackageDelivery {\n    private $trackingNumber;\n    private $destination;\n    private $status;\n\n    public function __construct($trackingNumber, $destination, $status) {\n        $this->trackingNumber = $trackingNumber;\n        $this->destination = $destination;\n        $this->status = $status;\n    }\n\n    public function updateStatus($newStatus) {\n        $this->status = $newStatus;\n    }\n\n    public function getTrackingNumber() {\n        return $this->trackingNumber;\n    }\n\n    public function getDestination() {\n        return $this->destination;\n    }\n\n    public function getStatus() {\n        return $this->status;\n    }\n}\n\n?>\n```"
  },
  {
    "task": "Construct a class representing a pet with attributes for species, age, and name, and a method to display its details.",
    "code": "```php\n<?php\n\nclass Pet {\n    private $species;\n    private $age;\n    private $name;\n\n    public function __construct($species, $age, $name) {\n        $this->species = $species;\n        $this->age = $age;\n        $this->name = $name;\n    }\n\n    public function displayDetails() {\n        echo \"Species: \" . $this->species . \"\\n\";\n        echo \"Age: \" . $this->age . \"\\n\";\n        echo \"Name: \" . $this->name . \"\\n\";\n    }\n}\n\n?>\n```"
  },
  {
    "task": "Formulate a class for a product in a store with properties for SKU, name, and price, and a method to apply a discount.",
    "code": "```php\n<?php\n\nclass Product {\n    private $sku;\n    private $name;\n    private $price;\n\n    public function __construct($sku, $name, $price) {\n        $this->sku = $sku;\n        $this->name = $name;\n        $this->price = $price;\n    }\n\n    public function applyDiscount($discount) {\n        $this->price -= $this->price * ($discount / 100);\n    }\n\n    // Getters\n    public function getSku() {\n        return $this->sku;\n    }\n\n    public function getName() {\n        return $this->name;\n    }\n\n    public function getPrice() {\n        return $this->price;\n    }\n}\n\n?>\n```"
  },
  {
    "task": "Develop a class for a university course with attributes for course code, title, and credits, and a method to enroll a student.",
    "code": "```php\nclass UniversityCourse {\n    private $courseCode;\n    private $title;\n    private $credits;\n    private $enrolledStudents = [];\n\n    public function __construct($courseCode, $title, $credits) {\n        $this->courseCode = $courseCode;\n        $this->title = $title;\n        $this->credits = $credits;\n    }\n\n    public function enrollStudent($studentName) {\n        $this->enrolledStudents[] = $studentName;\n    }\n\n    public function getCourseCode() {\n        return $this->courseCode;\n    }\n\n    public function getTitle() {\n        return $this->title;\n    }\n\n    public function getCredits() {\n        return $this->credits;\n    }\n\n    public function getEnrolledStudents() {\n        return $this->enrolledStudents;\n    }\n}\n```"
  },
  {
    "task": "Create a class for a smart light bulb with attributes for color, brightness, and state (on/off), and a method to change the color.",
    "code": "```php\n<?php\n\nclass SmartLightBulb {\n    private $color;\n    private $brightness;\n    private $state;\n\n    public function __construct($color = 'white', $brightness = 100, $state = false) {\n        $this->color = $color;\n        $this->brightness = $brightness;\n        $this->state = $state;\n    }\n\n    public function changeColor($newColor) {\n        $this->color = $newColor;\n    }\n\n    // Additional methods for getting and setting attributes can be added here\n}\n\n?>\n```"
  },
  {
    "task": "Design a class for a blog post with properties for title, content, and date published, and a method to edit the content.",
    "code": "```php\nclass BlogPost {\n    private $title;\n    private $content;\n    private $datePublished;\n\n    public function __construct($title, $content, $datePublished) {\n        $this->title = $title;\n        $this->content = $content;\n        $this->datePublished = $datePublished;\n    }\n\n    public function editContent($newContent) {\n        $this->content = $newContent;\n    }\n\n    public function getTitle() {\n        return $this->title;\n    }\n\n    public function getContent() {\n        return $this->content;\n    }\n\n    public function getDatePublished() {\n        return $this->datePublished;\n    }\n}\n```"
  },
  {
    "task": "Build a class for a bank transaction with attributes for transaction ID, amount, and type, and a method to reverse the transaction.",
    "code": "```php\nclass BankTransaction {\n    private $transactionId;\n    private $amount;\n    private $type;\n\n    public function __construct($transactionId, $amount, $type) {\n        $this->transactionId = $transactionId;\n        $this->amount = $amount;\n        $this->type = $type;\n    }\n\n    public function reverseTransaction() {\n        if ($this->type === 'credit') {\n            $this->type = 'debit';\n        } elseif ($this->type === 'debit') {\n            $this->type = 'credit';\n        }\n    }\n\n    public function getTransactionId() {\n        return $this->transactionId;\n    }\n\n    public function getAmount() {\n        return $this->amount;\n    }\n\n    public function getType() {\n        return $this->type;\n    }\n}\n```"
  },
  {
    "task": "Implement a class for a city with properties for name, population, and area, and a method to calculate population density.",
    "code": "```php\n<?php\n\nclass City {\n    private $name;\n    private $population;\n    private $area;\n\n    public function __construct($name, $population, $area) {\n        $this->name = $name;\n        $this->population = $population;\n        $this->area = $area;\n    }\n\n    public function calculatePopulationDensity() {\n        return $this->population / $this->area;\n    }\n}\n```"
  },
  {
    "task": "Construct a class for a library member with attributes for member ID, name, and borrowed books, and a method to borrow a book.",
    "code": "```php\nclass LibraryMember {\n    private $memberId;\n    private $name;\n    private $borrowedBooks;\n\n    public function __construct($memberId, $name) {\n        $this->memberId = $memberId;\n        $this->name = $name;\n        $this->borrowedBooks = [];\n    }\n\n    public function borrowBook($book) {\n        $this->borrowedBooks[] = $book;\n    }\n\n    public function getMemberId() {\n        return $this->memberId;\n    }\n\n    public function getName() {\n        return $this->name;\n    }\n\n    public function getBorrowedBooks() {\n        return $this->borrowedBooks;\n    }\n}\n```"
  },
  {
    "task": "Create a class for a flight reservation with attributes for flight number, passenger name, and seat number, and a method to change the seat.",
    "code": "```php\n<?php\n\nclass FlightReservation {\n    private $flightNumber;\n    private $passengerName;\n    private $seatNumber;\n\n    public function __construct($flightNumber, $passengerName, $seatNumber) {\n        $this->flightNumber = $flightNumber;\n        $this->passengerName = $passengerName;\n        $this->seatNumber = $seatNumber;\n    }\n\n    public function changeSeat($newSeatNumber) {\n        $this->seatNumber = $newSeatNumber;\n    }\n\n    public function getFlightNumber() {\n        return $this->flightNumber;\n    }\n\n    public function getPassengerName() {\n        return $this->passengerName;\n    }\n\n    public function getSeatNumber() {\n        return $this->seatNumber;\n    }\n}\n\n?>\n```"
  },
  {
    "task": "Develop a class for a digital photo album with properties for album name, photos, and a method to add a new photo.",
    "code": "```php\n<?php\n\nclass DigitalPhotoAlbum {\n    private $albumName;\n    private $photos = [];\n\n    public function __construct($albumName) {\n        $this->albumName = $albumName;\n    }\n\n    public function addPhoto($photo) {\n        $this->photos[] = $photo;\n    }\n\n    public function getPhotos() {\n        return $this->photos;\n    }\n\n    public function getAlbumName() {\n        return $this->albumName;\n    }\n}\n\n?>\n```"
  },
  {
    "task": "Design a class for a task in a to-do list with attributes for description, deadline, and status, and a method to mark it as complete.",
    "code": "```php\n<?php\n\nclass Task {\n    private $description;\n    private $deadline;\n    private $status;\n\n    public function __construct($description, $deadline, $status = 'incomplete') {\n        $this->description = $description;\n        $this->deadline = $deadline;\n        $this->status = $status;\n    }\n\n    public function markAsComplete() {\n        $this->status = 'complete';\n    }\n\n    public function getDescription() {\n        return $this->description;\n    }\n\n    public function getDeadline() {\n        return $this->deadline;\n    }\n\n    public function getStatus() {\n        return $this->status;\n    }\n}\n\n?>\n```"
  },
  {
    "task": "Formulate a class for a conference speaker with attributes for name, topic, and time slot, and a method to update the time slot.",
    "code": "```php\n<?php\n\nclass ConferenceSpeaker {\n    private $name;\n    private $topic;\n    private $timeSlot;\n\n    public function __construct($name, $topic, $timeSlot) {\n        $this->name = $name;\n        $this->topic = $topic;\n        $this->timeSlot = $timeSlot;\n    }\n\n    public function updateTimeSlot($newTimeSlot) {\n        $this->timeSlot = $newTimeSlot;\n    }\n\n    // Optionally, you can add getters to access private attributes\n    public function getName() {\n        return $this->name;\n    }\n\n    public function getTopic() {\n        return $this->topic;\n    }\n\n    public function getTimeSlot() {\n        return $this->timeSlot;\n    }\n}\n\n?>\n```"
  },
  {
    "task": "Construct a class for a real estate property with attributes for address, price, and square footage, and a method to change the price.",
    "code": "```php\nclass RealEstateProperty {\n    private $address;\n    private $price;\n    private $squareFootage;\n\n    public function __construct($address, $price, $squareFootage) {\n        $this->address = $address;\n        $this->price = $price;\n        $this->squareFootage = $squareFootage;\n    }\n\n    public function changePrice($newPrice) {\n        $this->price = $newPrice;\n    }\n\n    public function getAddress() {\n        return $this->address;\n    }\n\n    public function getPrice() {\n        return $this->price;\n    }\n\n    public function getSquareFootage() {\n        return $this->squareFootage;\n    }\n}\n```"
  },
  {
    "task": "Create a class for a weather forecast with properties for temperature, humidity, and condition, and a method to update the forecast.",
    "code": "```php\n<?php\n\nclass WeatherForecast {\n    private $temperature;\n    private $humidity;\n    private $condition;\n\n    public function __construct($temperature, $humidity, $condition) {\n        $this->temperature = $temperature;\n        $this->humidity = $humidity;\n        $this->condition = $condition;\n    }\n\n    public function updateForecast($temperature, $humidity, $condition) {\n        $this->temperature = $temperature;\n        $this->humidity = $humidity;\n        $this->condition = $condition;\n    }\n\n    public function getForecast() {\n        return [\n            'temperature' => $this->temperature,\n            'humidity' => $this->humidity,\n            'condition' => $this->condition\n        ];\n    }\n}\n\n?>\n```"
  },
  {
    "task": "Build a class for a musical instrument with attributes for type, brand, and model, and a method to play a note.",
    "code": "```php\n<?php\n\nclass MusicalInstrument {\n    private $type;\n    private $brand;\n    private $model;\n\n    public function __construct($type, $brand, $model) {\n        $this->type = $type;\n        $this->brand = $brand;\n        $this->model = $model;\n    }\n\n    public function playNote($note) {\n        echo \"Playing note: $note\";\n    }\n}\n\n?>\n```"
  },
  {
    "task": "Design a class for a sports team with attributes for team name, players, and coach, and a method to add a new player.",
    "code": "```php\n<?php\n\nclass SportsTeam {\n    private $teamName;\n    private $players;\n    private $coach;\n\n    public function __construct($teamName, $coach) {\n        $this->teamName = $teamName;\n        $this->players = [];\n        $this->coach = $coach;\n    }\n\n    public function addPlayer($player) {\n        $this->players[] = $player;\n    }\n}\n```"
  },
  {
    "task": "Implement a class for a podcast episode with attributes for title, duration, and host, and a method to play the episode.",
    "code": "```php\n<?php\n\nclass PodcastEpisode {\n    private $title;\n    private $duration;\n    private $host;\n\n    public function __construct($title, $duration, $host) {\n        $this->title = $title;\n        $this->duration = $duration;\n        $this->host = $host;\n    }\n\n    public function play() {\n        echo \"Playing episode: \" . $this->title . \" hosted by \" . $this->host;\n    }\n}\n\n?>\n```"
  },
  {
    "task": "Develop a class for a space mission with properties for mission name, crew, and launch date, and a method to launch the mission.",
    "code": "```php\n<?php\n\nclass SpaceMission {\n    private $missionName;\n    private $crew;\n    private $launchDate;\n\n    public function __construct($missionName, $crew, $launchDate) {\n        $this->missionName = $missionName;\n        $this->crew = $crew;\n        $this->launchDate = $launchDate;\n    }\n\n    public function launchMission() {\n        echo \"Launching mission: \" . $this->missionName . \" with crew \" . implode(\", \", $this->crew) . \" on \" . $this->launchDate . \".\\n\";\n    }\n}\n\n?>\n```"
  },
  {
    "task": "Create a class for a virtual assistant with attributes for name, language, and skills, and a method to add a new skill.",
    "code": "```php\n<?php\n\nclass VirtualAssistant {\n    private $name;\n    private $language;\n    private $skills;\n\n    public function __construct($name, $language) {\n        $this->name = $name;\n        $this->language = $language;\n        $this->skills = [];\n    }\n\n    public function addSkill($skill) {\n        $this->skills[] = $skill;\n    }\n\n    // Additional methods to access the properties can be added here if needed\n}\n?>\n```"
  },
  {
    "task": "Formulate a class for a news article with attributes for headline, content, and author, and a method to publish the article.",
    "code": "```php\n<?php\n\nclass NewsArticle {\n    private $headline;\n    private $content;\n    private $author;\n\n    public function __construct($headline, $content, $author) {\n        $this->headline = $headline;\n        $this->content = $content;\n        $this->author = $author;\n    }\n\n    public function publish() {\n        return \"Headline: \" . $this->headline . \"\\n\" .\n               \"Content: \" . $this->content . \"\\n\" .\n               \"Author: \" . $this->author;\n    }\n}\n\n// Example usage:\n$article = new NewsArticle(\"Sample Headline\", \"This is the content of the article.\", \"John Doe\");\necho $article->publish();\n\n?>\n```"
  },
  {
    "task": "Construct a class for a hiking trail with attributes for trail name, length, and difficulty, and a method to update the difficulty.",
    "code": "```php\n<?php\n\nclass HikingTrail {\n    private $trailName;\n    private $length;\n    private $difficulty;\n\n    public function __construct($trailName, $length, $difficulty) {\n        $this->trailName = $trailName;\n        $this->length = $length;\n        $this->difficulty = $difficulty;\n    }\n\n    public function updateDifficulty($newDifficulty) {\n        $this->difficulty = $newDifficulty;\n    }\n\n    public function getTrailName() {\n        return $this->trailName;\n    }\n\n    public function getLength() {\n        return $this->length;\n    }\n\n    public function getDifficulty() {\n        return $this->difficulty;\n    }\n}\n\n?>\n```"
  },
  {
    "task": "Design a class for a subscription service with properties for service name, subscriber count, and subscription fee, and a method to update the fee.",
    "code": "```php\n<?php\n\nclass SubscriptionService {\n    private $serviceName;\n    private $subscriberCount;\n    private $subscriptionFee;\n    \n    public function __construct($serviceName, $subscriberCount, $subscriptionFee) {\n        $this->serviceName = $serviceName;\n        $this->subscriberCount = $subscriberCount;\n        $this->subscriptionFee = $subscriptionFee;\n    }\n    \n    public function updateSubscriptionFee($newFee) {\n        $this->subscriptionFee = $newFee;\n    }\n}\n\n?>\n```"
  },
  {
    "task": "Build a class for a digital wallet with attributes for balance, transaction history, and a method to add funds.",
    "code": "```php\n<?php\n\nclass DigitalWallet {\n    private $balance;\n    private $transactionHistory;\n\n    public function __construct() {\n        $this->balance = 0;\n        $this->transactionHistory = [];\n    }\n\n    public function addFunds($amount) {\n        if ($amount > 0) {\n            $this->balance += $amount;\n            $this->transactionHistory[] = \"Added funds: $\" . number_format($amount, 2);\n        }\n    }\n\n    public function getBalance() {\n        return $this->balance;\n    }\n\n    public function getTransactionHistory() {\n        return $this->transactionHistory;\n    }\n}\n```"
  },
  {
    "task": "Implement a class for a cooking recipe with attributes for name, ingredients, and instructions, and a method to update the instructions.",
    "code": "```php\nclass CookingRecipe {\n    private $name;\n    private $ingredients;\n    private $instructions;\n\n    public function __construct($name, $ingredients, $instructions) {\n        $this->name = $name;\n        $this->ingredients = $ingredients;\n        $this->instructions = $instructions;\n    }\n\n    public function updateInstructions($newInstructions) {\n        $this->instructions = $newInstructions;\n    }\n\n    public function getName() {\n        return $this->name;\n    }\n\n    public function getIngredients() {\n        return $this->ingredients;\n    }\n\n    public function getInstructions() {\n        return $this->instructions;\n    }\n}\n```"
  },
  {
    "task": "Develop a class for a time zone with properties for zone name, offset, and a method to convert time from another time zone.",
    "code": "```php\nclass TimeZone {\n    private $zoneName;\n    private $offset;\n\n    public function __construct($zoneName, $offset) {\n        $this->zoneName = $zoneName;\n        $this->offset = $offset;\n    }\n\n    public function convertTime($time, $fromOffset) {\n        $timeInSeconds = strtotime($time);\n        $offsetDifference = $this->offset - $fromOffset;\n        $convertedTimeInSeconds = $timeInSeconds + ($offsetDifference * 3600);\n        return date('Y-m-d H:i:s', $convertedTimeInSeconds);\n    }\n\n    public function getZoneName() {\n        return $this->zoneName;\n    }\n\n    public function getOffset() {\n        return $this->offset;\n    }\n}\n```"
  },
  {
    "task": "Create a class for a camera with attributes for resolution, brand, and model, and a method to take a picture.",
    "code": "```php\n<?php\n\nclass Camera {\n    private $resolution;\n    private $brand;\n    private $model;\n\n    public function __construct($resolution, $brand, $model) {\n        $this->resolution = $resolution;\n        $this->brand = $brand;\n        $this->model = $model;\n    }\n\n    public function takePicture() {\n        return \"Picture taken with {$this->brand} {$this->model} at {$this->resolution} resolution.\";\n    }\n}\n```"
  },
  {
    "task": "Design a class for a gaming console with properties for brand, model, and storage capacity, and a method to install a game.",
    "code": "```php\nclass GamingConsole {\n    public $brand;\n    public $model;\n    public $storageCapacity;\n\n    public function __construct($brand, $model, $storageCapacity) {\n        $this->brand = $brand;\n        $this->model = $model;\n        $this->storageCapacity = $storageCapacity;\n    }\n\n    public function installGame($gameName) {\n        echo \"Installing $gameName on $this->model...\";\n    }\n}\n```"
  },
  {
    "task": "Formulate a class for a museum exhibit with attributes for exhibit name, artist, and year, and a method to update the year.",
    "code": "```php\n<?php\n\nclass MuseumExhibit {\n    private $exhibitName;\n    private $artist;\n    private $year;\n\n    public function __construct($exhibitName, $artist, $year) {\n        $this->exhibitName = $exhibitName;\n        $this->artist = $artist;\n        $this->year = $year;\n    }\n\n    public function updateYear($newYear) {\n        $this->year = $newYear;\n    }\n\n    public function getExhibitName() {\n        return $this->exhibitName;\n    }\n\n    public function getArtist() {\n        return $this->artist;\n    }\n\n    public function getYear() {\n        return $this->year;\n    }\n}\n\n?>\n```"
  },
  {
    "task": "Construct a class for a fitness tracker with attributes for steps, calories burned, and heart rate, and a method to add steps.",
    "code": "```php\n<?php\n\nclass FitnessTracker {\n    private $steps;\n    private $caloriesBurned;\n    private $heartRate;\n\n    public function __construct($steps = 0, $caloriesBurned = 0, $heartRate = 0) {\n        $this->steps = $steps;\n        $this->caloriesBurned = $caloriesBurned;\n        $this->heartRate = $heartRate;\n    }\n\n    public function addSteps($additionalSteps) {\n        $this->steps += $additionalSteps;\n    }\n\n    // Getters for attributes\n    public function getSteps() {\n        return $this->steps;\n    }\n\n    public function getCaloriesBurned() {\n        return $this->caloriesBurned;\n    }\n\n    public function getHeartRate() {\n        return $this->heartRate;\n    }\n}\n\n?>\n```"
  },
  {
    "task": "Build a class for an aquarium with properties for tank size, fish species, and water temperature, and a method to add a new fish.",
    "code": "```php\n<?php\n\nclass Aquarium {\n    private $tankSize;\n    private $fishSpecies;\n    private $waterTemperature;\n\n    public function __construct($tankSize, $waterTemperature) {\n        $this->tankSize = $tankSize;\n        $this->fishSpecies = [];\n        $this->waterTemperature = $waterTemperature;\n    }\n\n    public function addFish($species) {\n        $this->fishSpecies[] = $species;\n    }\n\n    public function getTankSize() {\n        return $this->tankSize;\n    }\n\n    public function getFishSpecies() {\n        return $this->fishSpecies;\n    }\n\n    public function getWaterTemperature() {\n        return $this->waterTemperature;\n    }\n}\n\n?>\n```"
  },
  {
    "task": "Create a class for a chat message with attributes for sender, content, and timestamp, and a method to edit the content.",
    "code": "```php\n<?php\n\nclass ChatMessage {\n    private $sender;\n    private $content;\n    private $timestamp;\n\n    public function __construct($sender, $content, $timestamp) {\n        $this->sender = $sender;\n        $this->content = $content;\n        $this->timestamp = $timestamp;\n    }\n\n    public function editContent($newContent) {\n        $this->content = $newContent;\n    }\n\n    public function getSender() {\n        return $this->sender;\n    }\n\n    public function getContent() {\n        return $this->content;\n    }\n\n    public function getTimestamp() {\n        return $this->timestamp;\n    }\n}\n\n?>\n```"
  },
  {
    "task": "Design a class for a vending machine with properties for items available, prices, and a method to dispense an item.",
    "code": "```php\n<?php\n\nclass VendingMachine {\n    private $items;\n    private $prices;\n\n    public function __construct($items, $prices) {\n        $this->items = $items;\n        $this->prices = $prices;\n    }\n\n    public function dispenseItem($itemName) {\n        if (isset($this->items[$itemName]) && $this->items[$itemName] > 0) {\n            $this->items[$itemName]--;\n            return \"Dispensing \" . $itemName;\n        } else {\n            return \"Item not available\";\n        }\n    }\n}\n```"
  },
  {
    "task": "Implement a class for a digital clock with attributes for current time, time zone, and a method to set an alarm.",
    "code": "```php\nclass DigitalClock {\n    private $currentTime;\n    private $timeZone;\n    private $alarmTime;\n\n    public function __construct($currentTime, $timeZone) {\n        $this->currentTime = $currentTime;\n        $this->timeZone = $timeZone;\n    }\n\n    public function setAlarm($alarmTime) {\n        $this->alarmTime = $alarmTime;\n    }\n\n    public function getCurrentTime() {\n        return $this->currentTime;\n    }\n\n    public function getTimeZone() {\n        return $this->timeZone;\n    }\n\n    public function getAlarmTime() {\n        return $this->alarmTime;\n    }\n}\n```"
  },
  {
    "task": "Develop a class for a historical figure with attributes for name, birthdate, and achievements, and a method to add an achievement.",
    "code": "```php\nclass HistoricalFigure {\n    private $name;\n    private $birthdate;\n    private $achievements = [];\n\n    public function __construct($name, $birthdate) {\n        $this->name = $name;\n        $this->birthdate = $birthdate;\n    }\n\n    public function addAchievement($achievement) {\n        $this->achievements[] = $achievement;\n    }\n\n    public function getName() {\n        return $this->name;\n    }\n\n    public function getBirthdate() {\n        return $this->birthdate;\n    }\n\n    public function getAchievements() {\n        return $this->achievements;\n    }\n}\n```"
  },
  {
    "task": "Formulate a class for a travel itinerary with attributes for destinations, travel dates, and activities, and a method to add a destination.",
    "code": "```php\n<?php\n\nclass TravelItinerary {\n    private $destinations = [];\n    private $travelDates = [];\n    private $activities = [];\n\n    public function addDestination($destination) {\n        $this->destinations[] = $destination;\n    }\n    \n    // Additional methods can be added here for managing travel dates and activities\n}\n\n?>\n```"
  },
  {
    "task": "Construct a class for a fashion brand with properties for brand name, founder, and product lines, and a method to launch a new product line.",
    "code": "```php\n<?php\n\nclass FashionBrand {\n    private $brandName;\n    private $founder;\n    private $productLines;\n\n    public function __construct($brandName, $founder) {\n        $this->brandName = $brandName;\n        $this->founder = $founder;\n        $this->productLines = [];\n    }\n\n    public function launchProductLine($productLine) {\n        $this->productLines[] = $productLine;\n    }\n\n    // Optional: Add getter methods if needed\n    public function getBrandName() {\n        return $this->brandName;\n    }\n\n    public function getFounder() {\n        return $this->founder;\n    }\n\n    public function getProductLines() {\n        return $this->productLines;\n    }\n}\n\n?>\n```"
  },
  {
    "task": "Create a class for a video game with attributes for title, genre, and rating, and a method to update the rating.",
    "code": "```php\n<?php\n\nclass VideoGame {\n    private $title;\n    private $genre;\n    private $rating;\n\n    public function __construct($title, $genre, $rating) {\n        $this->title = $title;\n        $this->genre = $genre;\n        $this->rating = $rating;\n    }\n\n    public function updateRating($newRating) {\n        $this->rating = $newRating;\n    }\n\n    public function getTitle() {\n        return $this->title;\n    }\n\n    public function getGenre() {\n        return $this->genre;\n    }\n\n    public function getRating() {\n        return $this->rating;\n    }\n}\n?>\n```"
  },
  {
    "task": "Build a class for a scientific experiment with attributes for experiment name, hypothesis, and results, and a method to record results.",
    "code": "```php\n<?php\n\nclass ScientificExperiment {\n    private $experimentName;\n    private $hypothesis;\n    private $results;\n\n    public function __construct($experimentName, $hypothesis) {\n        $this->experimentName = $experimentName;\n        $this->hypothesis = $hypothesis;\n        $this->results = [];\n    }\n\n    public function recordResults($result) {\n        $this->results[] = $result;\n    }\n\n    public function getExperimentName() {\n        return $this->experimentName;\n    }\n\n    public function getHypothesis() {\n        return $this->hypothesis;\n    }\n\n    public function getResults() {\n        return $this->results;\n    }\n}\n\n?>\n```"
  },
  {
    "task": "Design a class for a gourmet dish with properties for dish name, ingredients, and cooking time, and a method to change cooking time.",
    "code": "```php\n<?php\n\nclass GourmetDish {\n    private $dishName;\n    private $ingredients;\n    private $cookingTime;\n\n    public function __construct($dishName, $ingredients, $cookingTime) {\n        $this->dishName = $dishName;\n        $this->ingredients = $ingredients;\n        $this->cookingTime = $cookingTime;\n    }\n\n    public function changeCookingTime($newCookingTime) {\n        $this->cookingTime = $newCookingTime;\n    }\n}\n\n?>\n```"
  },
  {
    "task": "Implement a class for a political office with attributes for office title, holder, and term length, and a method to change the holder.",
    "code": "```php\n<?php\n\nclass PoliticalOffice {\n    private $officeTitle;\n    private $holder;\n    private $termLength;\n\n    public function __construct($officeTitle, $holder, $termLength) {\n        $this->officeTitle = $officeTitle;\n        $this->holder = $holder;\n        $this->termLength = $termLength;\n    }\n\n    public function changeHolder($newHolder) {\n        $this->holder = $newHolder;\n    }\n\n    public function getOfficeTitle() {\n        return $this->officeTitle;\n    }\n\n    public function getHolder() {\n        return $this->holder;\n    }\n\n    public function getTermLength() {\n        return $this->termLength;\n    }\n}\n\n?>\n```"
  },
  {
    "task": "Develop a class for an astronomical object with properties for name, type, and distance from Earth, and a method to update the distance.",
    "code": "```php\n<?php\n\nclass AstronomicalObject {\n    private $name;\n    private $type;\n    private $distanceFromEarth;\n\n    public function __construct($name, $type, $distanceFromEarth) {\n        $this->name = $name;\n        $this->type = $type;\n        $this->distanceFromEarth = $distanceFromEarth;\n    }\n\n    public function updateDistance($newDistance) {\n        $this->distanceFromEarth = $newDistance;\n    }\n\n    public function getName() {\n        return $this->name;\n    }\n\n    public function getType() {\n        return $this->type;\n    }\n\n    public function getDistanceFromEarth() {\n        return $this->distanceFromEarth;\n    }\n}\n\n?>\n```"
  },
  {
    "task": "Formulate a class for a public transportation route with attributes for route number, stops, and schedule, and a method to add a stop.",
    "code": "```php\nclass PublicTransportRoute {\n    public $routeNumber;\n    public $stops = [];\n    public $schedule;\n\n    public function __construct($routeNumber, $schedule) {\n        $this->routeNumber = $routeNumber;\n        $this->schedule = $schedule;\n    }\n\n    public function addStop($stop) {\n        $this->stops[] = $stop;\n    }\n}\n```"
  },
  {
    "task": "Construct a class for a board game with properties for game name, player count, and rules, and a method to change the rules.",
    "code": "```php\n<?php\n\nclass BoardGame {\n    private $gameName;\n    private $playerCount;\n    private $rules;\n\n    public function __construct($gameName, $playerCount, $rules) {\n        $this->gameName = $gameName;\n        $this->playerCount = $playerCount;\n        $this->rules = $rules;\n    }\n\n    public function changeRules($newRules) {\n        $this->rules = $newRules;\n    }\n\n    public function getGameName() {\n        return $this->gameName;\n    }\n\n    public function getPlayerCount() {\n        return $this->playerCount;\n    }\n\n    public function getRules() {\n        return $this->rules;\n    }\n}\n\n?>\n```"
  },
  {
    "task": "Create a class for a customer loyalty program with attributes for program name, points, and rewards, and a method to redeem points.",
    "code": "```php\n<?php\n\nclass CustomerLoyaltyProgram {\n    public $programName;\n    public $points;\n    public $rewards;\n\n    public function __construct($programName, $points, $rewards) {\n        $this->programName = $programName;\n        $this->points = $points;\n        $this->rewards = $rewards;\n    }\n\n    public function redeemPoints($pointsToRedeem) {\n        if ($this->points >= $pointsToRedeem) {\n            $this->points -= $pointsToRedeem;\n            return \"Redeemed $pointsToRedeem points successfully.\";\n        } else {\n            return \"Insufficient points to redeem.\";\n        }\n    }\n}\n\n?>\n```"
  },
  {
    "task": "Design a class for an art gallery with properties for gallery name, location, and exhibitions, and a method to add a new exhibition.",
    "code": "```php\n<?php\n\nclass ArtGallery {\n    private $galleryName;\n    private $location;\n    private $exhibitions = [];\n\n    public function __construct($galleryName, $location) {\n        $this->galleryName = $galleryName;\n        $this->location = $location;\n    }\n\n    public function addExhibition($exhibition) {\n        $this->exhibitions[] = $exhibition;\n    }\n\n    public function getGalleryName() {\n        return $this->galleryName;\n    }\n\n    public function getLocation() {\n        return $this->location;\n    }\n\n    public function getExhibitions() {\n        return $this->exhibitions;\n    }\n}\n\n?>\n```"
  },
  {
    "task": "Build a class for a personal blog with attributes for blog name, posts, and a method to add a new post.",
    "code": "```php\n<?php\n\nclass PersonalBlog {\n    private $blogName;\n    private $posts;\n\n    public function __construct($blogName) {\n        $this->blogName = $blogName;\n        $this->posts = [];\n    }\n\n    public function addPost($post) {\n        $this->posts[] = $post;\n    }\n\n    public function getBlogName() {\n        return $this->blogName;\n    }\n\n    public function getPosts() {\n        return $this->posts;\n    }\n}\n```"
  },
  {
    "task": "Implement a class for a mobile application with properties for app name, version, and developer, and a method to update the version.",
    "code": "```php\n<?php\n\nclass MobileApp {\n    private $appName;\n    private $version;\n    private $developer;\n\n    public function __construct($appName, $version, $developer) {\n        $this->appName = $appName;\n        $this->version = $version;\n        $this->developer = $developer;\n    }\n\n    public function updateVersion($newVersion) {\n        $this->version = $newVersion;\n    }\n\n    public function getAppName() {\n        return $this->appName;\n    }\n\n    public function getVersion() {\n        return $this->version;\n    }\n\n    public function getDeveloper() {\n        return $this->developer;\n    }\n}\n\n?>\n```"
  },
  {
    "task": "Develop a class for a language translator with attributes for source language, target language, and translation method, and a method to translate a text.",
    "code": "```php\nclass LanguageTranslator {\n    private $sourceLanguage;\n    private $targetLanguage;\n    private $translationMethod;\n\n    public function __construct($sourceLanguage, $targetLanguage, $translationMethod) {\n        $this->sourceLanguage = $sourceLanguage;\n        $this->targetLanguage = $targetLanguage;\n        $this->translationMethod = $translationMethod;\n    }\n\n    public function translate($text) {\n        // Translation logic would be implemented here\n        return \"Translated text\"; // Placeholder return value\n    }\n}\n```"
  },
  {
    "task": "Formulate a class for a culinary school with properties for school name, courses offered, and a method to add a new course.",
    "code": "```php\n<?php\n\nclass CulinarySchool {\n    private $schoolName;\n    private $coursesOffered;\n\n    public function __construct($name) {\n        $this->schoolName = $name;\n        $this->coursesOffered = [];\n    }\n\n    public function addCourse($course) {\n        $this->coursesOffered[] = $course;\n    }\n\n    public function getCourses() {\n        return $this->coursesOffered;\n    }\n\n    public function getSchoolName() {\n        return $this->schoolName;\n    }\n}\n\n?>\n```"
  },
  {
    "task": "Construct a class for a musical band with attributes for band name, members, and genre, and a method to add a new member.",
    "code": "```php\n<?php\n\nclass MusicalBand {\n    private $bandName;\n    private $members;\n    private $genre;\n\n    public function __construct($bandName, $genre) {\n        $this->bandName = $bandName;\n        $this->genre = $genre;\n        $this->members = [];\n    }\n\n    public function addMember($member) {\n        $this->members[] = $member;\n    }\n\n    public function getBandName() {\n        return $this->bandName;\n    }\n\n    public function getMembers() {\n        return $this->members;\n    }\n\n    public function getGenre() {\n        return $this->genre;\n    }\n}\n\n?>\n```"
  },
  {
    "task": "Create a class for a television series with properties for series title, episodes, and network, and a method to add a new episode.",
    "code": "```php\n<?php\n\nclass TelevisionSeries {\n    private $seriesTitle;\n    private $episodes;\n    private $network;\n\n    public function __construct($seriesTitle, $network) {\n        $this->seriesTitle = $seriesTitle;\n        $this->network = $network;\n        $this->episodes = [];\n    }\n\n    public function addEpisode($episode) {\n        $this->episodes[] = $episode;\n    }\n\n    // Getters\n    public function getSeriesTitle() {\n        return $this->seriesTitle;\n    }\n\n    public function getEpisodes() {\n        return $this->episodes;\n    }\n\n    public function getNetwork() {\n        return $this->network;\n    }\n}\n?>\n```"
  },
  {
    "task": "Design a class for a wildlife reserve with attributes for reserve name, species protected, and area size, and a method to expand the area.",
    "code": "```php\n<?php\n\nclass WildlifeReserve {\n    private $reserveName;\n    private $speciesProtected;\n    private $areaSize;\n\n    public function __construct($reserveName, $speciesProtected, $areaSize) {\n        $this->reserveName = $reserveName;\n        $this->speciesProtected = $speciesProtected;\n        $this->areaSize = $areaSize;\n    }\n\n    public function expandArea($additionalSize) {\n        $this->areaSize += $additionalSize;\n    }\n\n    public function getReserveName() {\n        return $this->reserveName;\n    }\n\n    public function getSpeciesProtected() {\n        return $this->speciesProtected;\n    }\n\n    public function getAreaSize() {\n        return $this->areaSize;\n    }\n}\n\n?>\n```"
  },
  {
    "task": "Build a class for a luxury car with properties for brand, model, and price, and a method to update the price.",
    "code": "```php\n<?php\n\nclass LuxuryCar {\n    private $brand;\n    private $model;\n    private $price;\n\n    public function __construct($brand, $model, $price) {\n        $this->brand = $brand;\n        $this->model = $model;\n        $this->price = $price;\n    }\n\n    public function updatePrice($newPrice) {\n        $this->price = $newPrice;\n    }\n\n    public function getBrand() {\n        return $this->brand;\n    }\n\n    public function getModel() {\n        return $this->model;\n    }\n\n    public function getPrice() {\n        return $this->price;\n    }\n}\n\n?>\n```"
  },
  {
    "task": "Implement a class for a scientific journal with attributes for journal name, articles, and impact factor, and a method to add a new article.",
    "code": "```php\nclass ScientificJournal {\n    private $journalName;\n    private $articles = [];\n    private $impactFactor;\n\n    public function __construct($journalName, $impactFactor) {\n        $this->journalName = $journalName;\n        $this->impactFactor = $impactFactor;\n    }\n\n    public function addArticle($article) {\n        $this->articles[] = $article;\n    }\n}\n```"
  },
  {
    "task": "Develop a class for a historical monument with properties for monument name, location, and year established, and a method to update the location.",
    "code": "```php\n<?php\n\nclass HistoricalMonument {\n    private $name;\n    private $location;\n    private $yearEstablished;\n\n    public function __construct($name, $location, $yearEstablished) {\n        $this->name = $name;\n        $this->location = $location;\n        $this->yearEstablished = $yearEstablished;\n    }\n\n    public function updateLocation($newLocation) {\n        $this->location = $newLocation;\n    }\n\n    public function getName() {\n        return $this->name;\n    }\n\n    public function getLocation() {\n        return $this->location;\n    }\n\n    public function getYearEstablished() {\n        return $this->yearEstablished;\n    }\n}\n?>\n```"
  },
  {
    "task": "Formulate a class for an educational course with attributes for course title, instructor, and syllabus, and a method to update the syllabus.",
    "code": "```php\n<?php\n\nclass EducationalCourse {\n    private $courseTitle;\n    private $instructor;\n    private $syllabus;\n\n    public function __construct($courseTitle, $instructor, $syllabus) {\n        $this->courseTitle = $courseTitle;\n        $this->instructor = $instructor;\n        $this->syllabus = $syllabus;\n    }\n\n    public function updateSyllabus($newSyllabus) {\n        $this->syllabus = $newSyllabus;\n    }\n\n    public function getCourseTitle() {\n        return $this->courseTitle;\n    }\n\n    public function getInstructor() {\n        return $this->instructor;\n    }\n\n    public function getSyllabus() {\n        return $this->syllabus;\n    }\n}\n\n?>\n```"
  },
  {
    "task": "Construct a class for a city park with properties for park name, facilities, and opening hours, and a method to add a new facility.",
    "code": "```php\n<?php\n\nclass CityPark {\n    private $parkName;\n    private $facilities;\n    private $openingHours;\n\n    public function __construct($parkName, $openingHours) {\n        $this->parkName = $parkName;\n        $this->facilities = [];\n        $this->openingHours = $openingHours;\n    }\n\n    public function addFacility($facility) {\n        $this->facilities[] = $facility;\n    }\n\n    public function getParkName() {\n        return $this->parkName;\n    }\n\n    public function getFacilities() {\n        return $this->facilities;\n    }\n\n    public function getOpeningHours() {\n        return $this->openingHours;\n    }\n}\n?>\n```"
  },
  {
    "task": "Create a class for a fitness class with attributes for class name, instructor, and schedule, and a method to update the schedule.",
    "code": "```php\n<?php\n\nclass FitnessClass {\n    private $className;\n    private $instructor;\n    private $schedule;\n\n    public function __construct($className, $instructor, $schedule) {\n        $this->className = $className;\n        $this->instructor = $instructor;\n        $this->schedule = $schedule;\n    }\n\n    public function updateSchedule($newSchedule) {\n        $this->schedule = $newSchedule;\n    }\n\n    public function getClassName() {\n        return $this->className;\n    }\n\n    public function getInstructor() {\n        return $this->instructor;\n    }\n\n    public function getSchedule() {\n        return $this->schedule;\n    }\n}\n\n?>\n```"
  },
  {
    "task": "Design a class for a virtual reality game with properties for game name, platform, and VR compatibility, and a method to change the platform.",
    "code": "```php\n<?php\n\nclass VirtualRealityGame {\n    private $gameName;\n    private $platform;\n    private $vrCompatibility;\n\n    public function __construct($gameName, $platform, $vrCompatibility) {\n        $this->gameName = $gameName;\n        $this->platform = $platform;\n        $this->vrCompatibility = $vrCompatibility;\n    }\n\n    public function changePlatform($newPlatform) {\n        $this->platform = $newPlatform;\n    }\n}\n?>\n```"
  },
  {
    "task": "Build a class for a mountain range with attributes for range name, highest peak, and countries covered, and a method to add a new peak.",
    "code": "```php\n<?php\n\nclass MountainRange {\n    private $rangeName;\n    private $highestPeak;\n    private $countriesCovered;\n    private $peaks = [];\n\n    public function __construct($rangeName, $highestPeak, $countriesCovered) {\n        $this->rangeName = $rangeName;\n        $this->highestPeak = $highestPeak;\n        $this->countriesCovered = $countriesCovered;\n    }\n\n    public function addPeak($peak) {\n        $this->peaks[] = $peak;\n    }\n\n    // Getter methods can be added here if needed\n}\n\n?>\n```"
  },
  {
    "task": "Implement a class for a documentary film with properties for title, director, and subject, and a method to update the subject.",
    "code": "```php\n<?php\n\nclass DocumentaryFilm {\n    private $title;\n    private $director;\n    private $subject;\n\n    public function __construct($title, $director, $subject) {\n        $this->title = $title;\n        $this->director = $director;\n        $this->subject = $subject;\n    }\n\n    public function updateSubject($newSubject) {\n        $this->subject = $newSubject;\n    }\n\n    public function getTitle() {\n        return $this->title;\n    }\n\n    public function getDirector() {\n        return $this->director;\n    }\n\n    public function getSubject() {\n        return $this->subject;\n    }\n}\n```"
  },
  {
    "task": "Develop a class for a classical music composition with attributes for composition name, composer, and duration, and a method to change the duration.",
    "code": "```php\n<?php\n\nclass ClassicalMusicComposition {\n    private $compositionName;\n    private $composer;\n    private $duration;\n\n    public function __construct($compositionName, $composer, $duration) {\n        $this->compositionName = $compositionName;\n        $this->composer = $composer;\n        $this->duration = $duration;\n    }\n\n    public function changeDuration($newDuration) {\n        $this->duration = $newDuration;\n    }\n\n    public function getCompositionName() {\n        return $this->compositionName;\n    }\n\n    public function getComposer() {\n        return $this->composer;\n    }\n\n    public function getDuration() {\n        return $this->duration;\n    }\n}\n\n?>\n```"
  },
  {
    "task": "Formulate a class for a public library with properties for library name, books available, and membership, and a method to add a new book.",
    "code": "```php\n<?php\n\nclass PublicLibrary {\n    public $libraryName;\n    public $booksAvailable;\n    public $membership;\n\n    public function __construct($libraryName, $booksAvailable = [], $membership = false) {\n        $this->libraryName = $libraryName;\n        $this->booksAvailable = $booksAvailable;\n        $this->membership = $membership;\n    }\n\n    public function addNewBook($book) {\n        $this->booksAvailable[] = $book;\n    }\n}\n\n?>\n```"
  },
  {
    "task": "Construct a class for a tech startup with attributes for startup name, founder, and funding, and a method to raise additional funding.",
    "code": "```php\n<?php\n\nclass TechStartup {\n    public $startupName;\n    public $founder;\n    public $funding;\n\n    public function __construct($startupName, $founder, $funding) {\n        $this->startupName = $startupName;\n        $this->founder = $founder;\n        $this->funding = $funding;\n    }\n\n    public function raiseFunding($amount) {\n        $this->funding += $amount;\n    }\n}\n\n?>\n```"
  }
]