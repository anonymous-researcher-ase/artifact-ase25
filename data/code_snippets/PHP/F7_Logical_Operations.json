[
  {
    "task": "Create a function that takes two boolean inputs and returns true if both are true using logical AND.",
    "code": "```php\nfunction bothTrue($a, $b) {\n    return $a && $b;\n}\n```"
  },
  {
    "task": "Write a script to check if either of two given conditions are met using logical OR.",
    "code": "```php\n<?php\n\n$condition1 = true; // Example condition 1\n$condition2 = false; // Example condition 2\n\nif ($condition1 || $condition2) {\n    echo \"At least one condition is met.\";\n} else {\n    echo \"Neither condition is met.\";\n}\n\n?>\n```"
  },
  {
    "task": "Develop a program that negates a boolean variable using logical NOT.",
    "code": "```php\n<?php\n\n$booleanVariable = true;\n$negatedBoolean = !$booleanVariable;\n\necho $negatedBoolean ? 'true' : 'false';\n\n?>\n```"
  },
  {
    "task": "Implement a feature that determines if a number is within a specific range using logical operators.",
    "code": "```php\nfunction isNumberInRange($number, $min, $max) {\n    return $number >= $min && $number <= $max;\n}\n\n// Example usage\n$number = 10;\n$min = 5;\n$max = 15;\n$result = isNumberInRange($number, $min, $max);\necho $result ? 'Number is within range' : 'Number is out of range';\n```"
  },
  {
    "task": "Design a system that checks if a user has both read and write permissions using logical AND.",
    "code": "```php\n<?php\nfunction hasReadAndWritePermissions($permissions) {\n    return $permissions['read'] && $permissions['write'];\n}\n\n// Example usage:\n$userPermissions = ['read' => true, 'write' => true];\n\nif (hasReadAndWritePermissions($userPermissions)) {\n    echo \"User has both read and write permissions.\";\n} else {\n    echo \"User does not have both read and write permissions.\";\n}\n?>\n```"
  },
  {
    "task": "Write a function to verify if a string is neither empty nor null using logical NOT.",
    "code": "```php\nfunction isStringValid($str) {\n    return !empty($str) && !is_null($str);\n}\n```"
  },
  {
    "task": "Create a conditional statement that executes a block of code if either of two expressions are true using logical OR.",
    "code": "```php\n$condition1 = true; // Example condition\n$condition2 = false; // Example condition\n\nif ($condition1 || $condition2) {\n    // Code to execute if either condition1 or condition2 is true\n    echo \"At least one condition is true.\";\n}\n```"
  },
  {
    "task": "Build a program that inverts the truth value of a given condition using logical NOT.",
    "code": "```php\n<?php\n\nfunction invertTruthValue($condition) {\n    return !$condition;\n}\n\n// Example usage\n$condition = true;\n$inverted = invertTruthValue($condition);\necho \"Original: \" . ($condition ? \"true\" : \"false\") . \"\\n\";\necho \"Inverted: \" . ($inverted ? \"true\" : \"false\") . \"\\n\";\n\n?>\n```"
  },
  {
    "task": "Compose a function to return true if a list is not empty using logical NOT.",
    "code": "```php\nfunction isListNotEmpty($list) {\n    return !!$list;\n}\n```"
  },
  {
    "task": "Develop a filter that selects items from a collection only if they meet multiple criteria using logical AND.",
    "code": "```php\nfunction filterItems(array $items, callable $criteria): array {\n    $filteredItems = [];\n    foreach ($items as $item) {\n        if ($criteria($item)) {\n            $filteredItems[] = $item;\n        }\n    }\n    return $filteredItems;\n}\n\n$items = [\n    ['name' => 'Item1', 'price' => 100, 'inStock' => true],\n    ['name' => 'Item2', 'price' => 150, 'inStock' => false],\n    ['name' => 'Item3', 'price' => 200, 'inStock' => true],\n    // more items\n];\n\n$criteria = function($item) {\n    return $item['price'] > 100 && $item['inStock'] === true;\n};\n\n$filteredItems = filterItems($items, $criteria);\n\nprint_r($filteredItems);\n```"
  },
  {
    "task": "Write a script that checks if a value is outside a given range using logical OR.",
    "code": "```php\n<?php\n\nfunction isOutsideRange($value, $min, $max) {\n    return $value < $min || $value > $max;\n}\n\n$value = 10;\n$min = 5;\n$max = 15;\n\nif (isOutsideRange($value, $min, $max)) {\n    echo \"The value $value is outside the range $min to $max.\";\n} else {\n    echo \"The value $value is within the range $min to $max.\";\n}\n\n?>\n```"
  },
  {
    "task": "Create a small program to toggle a boolean flag using logical NOT.",
    "code": "```php\n<?php\n\n$flag = true;\n\necho \"Initial flag value: \" . ($flag ? 'true' : 'false') . \"\\n\";\n\n$flag = !$flag;\n\necho \"Toggled flag value: \" . ($flag ? 'true' : 'false') . \"\\n\";\n\n?>\n```"
  },
  {
    "task": "Implement a feature that evaluates if a username is both unique and valid using logical AND.",
    "code": "```php\nfunction isUniqueAndValid($username, $existingUsernames) {\n    $isUnique = !in_array($username, $existingUsernames);\n    $isValid = preg_match('/^[a-zA-Z0-9_]{3,20}$/', $username);\n    return $isUnique && $isValid;\n}\n\n$existingUsernames = ['user1', 'exampleUser', 'test_user123'];\n$username = 'new_user';\n\nif (isUniqueAndValid($username, $existingUsernames)) {\n    echo \"The username is both unique and valid.\";\n} else {\n    echo \"The username is either not unique or not valid.\";\n}\n```"
  },
  {
    "task": "Design a conditional to perform an action if neither of two flags are set using logical NOT.",
    "code": "```php\n$flag1 = false;\n$flag2 = false;\n\nif (!($flag1 || $flag2)) {\n    // Perform the action here\n}\n```"
  },
  {
    "task": "Write a function that returns true if at least one of multiple boolean inputs is true using logical OR.",
    "code": "```php\nfunction atLeastOneTrue(...$bools) {\n    foreach ($bools as $bool) {\n        if ($bool) {\n            return true;\n        }\n    }\n    return false;\n}\n```"
  },
  {
    "task": "Create a loop that continues executing as long as two conditions are both false using logical NOT and AND.",
    "code": "```php\n<?php\n$condition1 = false;\n$condition2 = false;\n\nwhile (!($condition1 || $condition2)) {\n    // Your code here\n\n    // Example of modifying conditions to eventually break the loop\n    $condition1 = rand(0, 1) == 1;\n    $condition2 = rand(0, 1) == 1;\n}\n?>\n```"
  },
  {
    "task": "Develop a sequence that checks if a character is either a vowel or a consonant using logical OR.",
    "code": "```php\n<?php\n\nfunction checkCharacter($char) {\n    $char = strtolower($char);\n    if (($char >= 'a' && $char <= 'z') && ($char == 'a' || $char == 'e' || $char == 'i' || $char == 'o' || $char == 'u')) {\n        return \"Vowel\";\n    } elseif ($char >= 'a' && $char <= 'z') {\n        return \"Consonant\";\n    } else {\n        return \"Invalid character\";\n    }\n}\n\n// Example usage\n$character = 'A';\n$result = checkCharacter($character);\necho \"The character '$character' is a $result.\\n\";\n\n?>\n```"
  },
  {
    "task": "Implement a validation that ensures a password is both of minimum length and contains numbers using logical AND.",
    "code": "```php\nfunction isPasswordValid($password) {\n    $minLength = 8;\n    return strlen($password) >= $minLength && preg_match('/\\d/', $password);\n}\n\n// Example usage\n$password = \"example123\";\nif (isPasswordValid($password)) {\n    echo \"Password is valid.\";\n} else {\n    echo \"Password is invalid.\";\n}\n```"
  },
  {
    "task": "Compose a test to determine if a point is not within a circle using logical NOT.",
    "code": "```php\n<?php\n\nfunction isPointOutsideCircle($pointX, $pointY, $circleCenterX, $circleCenterY, $radius) {\n    $distanceSquared = ($pointX - $circleCenterX) ** 2 + ($pointY - $circleCenterY) ** 2;\n    return !($distanceSquared <= $radius ** 2);\n}\n\n// Example usage:\n$pointX = 5;\n$pointY = 5;\n$circleCenterX = 0;\n$circleCenterY = 0;\n$radius = 3;\n\nif (isPointOutsideCircle($pointX, $pointY, $circleCenterX, $circleCenterY, $radius)) {\n    echo \"The point is outside the circle.\";\n} else {\n    echo \"The point is inside the circle.\";\n}\n\n?>\n```"
  },
  {
    "task": "Write a function to decide if a user is either an admin or an editor using logical OR.",
    "code": "```php\nfunction isAdminOrEditor($user) {\n    return $user === 'admin' || $user === 'editor';\n}\n```"
  },
  {
    "task": "Create a conditional statement to trigger an alert if two sensors both detect motion using logical AND.",
    "code": "```php\n<?php\n\n$sensor1 = true; // Assuming sensor1 detects motion\n$sensor2 = true; // Assuming sensor2 detects motion\n\nif ($sensor1 && $sensor2) {\n    echo \"Alert: Motion detected by both sensors!\";\n}\n\n?>\n```"
  },
  {
    "task": "Design a program to validate an email format and ensure it contains a domain using logical AND.",
    "code": "```php\n<?php\n\nfunction isValidEmail($email) {\n    return filter_var($email, FILTER_VALIDATE_EMAIL) && strpos($email, '@') !== false;\n}\n\n// Example usage\n$email = \"example@domain.com\";\nif (isValidEmail($email)) {\n    echo \"Valid email format.\";\n} else {\n    echo \"Invalid email format.\";\n}\n?>\n```"
  },
  {
    "task": "Develop a method to confirm that a transaction is neither fraudulent nor unauthorized using logical NOT.",
    "code": "```php\n<?php\n\nclass TransactionChecker {\n    public function isTransactionValid($isFraudulent, $isUnauthorized) {\n        return !$isFraudulent && !$isUnauthorized;\n    }\n}\n\n$checker = new TransactionChecker();\n$transactionStatus = $checker->isTransactionValid(false, false); // Example usage\necho $transactionStatus ? 'Transaction is valid' : 'Transaction is invalid';\n\n?>\n```"
  },
  {
    "task": "Write a function that outputs true if a file is either missing or empty using logical OR.",
    "code": "```php\nfunction isFileMissingOrEmpty($filename) {\n    return !file_exists($filename) || filesize($filename) === 0;\n}\n```"
  },
  {
    "task": "Implement a system to check if a student's grade is neither failing nor incomplete using logical NOT.",
    "code": "```php\n<?php\n\nfunction isGradeAcceptable($grade) {\n    $isFailing = $grade < 50;\n    $isIncomplete = $grade === null;\n    \n    return !($isFailing || $isIncomplete);\n}\n\n// Example usage\n$studentGrade = 70;\nif (isGradeAcceptable($studentGrade)) {\n    echo \"Grade is acceptable.\";\n} else {\n    echo \"Grade is either failing or incomplete.\";\n}\n\n?>\n```"
  },
  {
    "task": "Create a script that executes a command if a file is both readable and writable using logical AND.",
    "code": "```php\n$file = 'example.txt';\n\nif (is_readable($file) && is_writable($file)) {\n    // Execute your command here, for example:\n    echo \"The file is both readable and writable.\";\n}\n```"
  },
  {
    "task": "Compose a function to determine if a temperature is not within a safe operating range using logical NOT.",
    "code": "```php\nfunction isTemperatureUnsafe($temperature) {\n    $safeMin = 32;\n    $safeMax = 95;\n    \n    return !($temperature >= $safeMin && $temperature <= $safeMax);\n}\n```"
  },
  {
    "task": "Design a check to see if a car is either out of fuel or needs maintenance using logical OR.",
    "code": "```php\n<?php\n\nfunction checkCarStatus($fuelLevel, $needsMaintenance) {\n    return $fuelLevel <= 0 || $needsMaintenance;\n}\n\n// Example usage\n$fuelLevel = 0; // The car is out of fuel\n$needsMaintenance = false; // The car does not need maintenance\n\nif (checkCarStatus($fuelLevel, $needsMaintenance)) {\n    echo \"The car is either out of fuel or needs maintenance.\";\n} else {\n    echo \"The car is good to go.\";\n}\n```"
  },
  {
    "task": "Develop a routine that ensures a network connection is both stable and secure using logical AND.",
    "code": "```php\n<?php\n\nfunction isConnectionStable() {\n    // Simulate a check for a stable connection\n    return true; // Placeholder for actual stability check logic\n}\n\nfunction isConnectionSecure() {\n    // Simulate a check for a secure connection\n    return true; // Placeholder for actual security check logic\n}\n\nfunction isConnectionStableAndSecure() {\n    return isConnectionStable() && isConnectionSecure();\n}\n\nif (isConnectionStableAndSecure()) {\n    echo \"The network connection is stable and secure.\";\n} else {\n    echo \"The network connection is not stable or not secure.\";\n}\n\n?>\n```"
  },
  {
    "task": "Write a conditional to print a message if a user is not logged in using logical NOT.",
    "code": "```php\n<?php\n$isUserLoggedIn = false;\n\nif (!$isUserLoggedIn) {\n    echo \"User is not logged in.\";\n}\n?>\n```"
  },
  {
    "task": "Create a function that checks if a number is both even and positive using logical AND.",
    "code": "```php\nfunction isEvenAndPositive($number) {\n    return ($number > 0) && ($number % 2 === 0);\n}\n```"
  },
  {
    "task": "Implement a feature that turns off a device if neither of two switches are on using logical NOT.",
    "code": "```php\n<?php\n\nfunction shouldTurnOffDevice($switch1, $switch2) {\n    return !($switch1 || $switch2);\n}\n\n// Example usage:\n$switch1 = false;\n$switch2 = false;\n\nif (shouldTurnOffDevice($switch1, $switch2)) {\n    echo \"Turning off the device.\";\n} else {\n    echo \"The device remains on.\";\n}\n?>\n```"
  },
  {
    "task": "Compose a script to alert if a server is either down or running slow using logical OR.",
    "code": "```php\n<?php\n\n$serverStatus = \"down\"; // Possible values: \"down\", \"slow\", \"up\"\n\nif ($serverStatus === \"down\" || $serverStatus === \"slow\") {\n    echo \"Alert: Server is either down or running slow.\";\n}\n\n?>\n```"
  },
  {
    "task": "Design a validation method to ensure a form field is not empty using logical NOT.",
    "code": "```php\nfunction validateFieldNotEmpty($field) {\n    return !empty($field);\n}\n```"
  },
  {
    "task": "Write a program to determine if two strings are both non-empty using logical AND.",
    "code": "```php\n<?php\nfunction areBothStringsNonEmpty($string1, $string2) {\n    return !empty($string1) && !empty($string2);\n}\n\n$string1 = \"Hello\";\n$string2 = \"World\";\n\n$result = areBothStringsNonEmpty($string1, $string2);\necho $result ? \"Both strings are non-empty.\" : \"At least one string is empty.\";\n?>\n```"
  },
  {
    "task": "Create a function that checks if a number is either prime or a perfect square using logical OR.",
    "code": "```php\n<?php\n\nfunction isPrime($num) {\n    if ($num <= 1) return false;\n    for ($i = 2; $i <= sqrt($num); $i++) {\n        if ($num % $i == 0) return false;\n    }\n    return true;\n}\n\nfunction isPerfectSquare($num) {\n    $sqrt = sqrt($num);\n    return $sqrt == floor($sqrt);\n}\n\nfunction checkNumber($num) {\n    return isPrime($num) || isPerfectSquare($num);\n}\n\n```"
  },
  {
    "task": "Develop a script to ensure a user is either an adult or has parental consent using logical OR.",
    "code": "```php\n<?php\n\nfunction hasAccess($isAdult, $hasParentalConsent) {\n    return $isAdult || $hasParentalConsent;\n}\n\n// Example usage\n$userIsAdult = false;\n$userHasParentalConsent = true;\n\nif (hasAccess($userIsAdult, $userHasParentalConsent)) {\n    echo \"Access granted.\";\n} else {\n    echo \"Access denied.\";\n}\n\n?>\n```"
  },
  {
    "task": "Implement a condition to execute a task if a variable is neither zero nor negative using logical NOT.",
    "code": "```php\n<?php\n$value = 5; // Example value\n\nif (!($value <= 0)) {\n    // Task to be executed if $value is neither zero nor negative\n    echo \"The task is executed.\";\n}\n?>\n```"
  },
  {
    "task": "Compose a method to verify if a system is both up-to-date and functioning using logical AND.",
    "code": "```php\n<?php\n\nclass SystemChecker {\n    private $isUpToDate;\n    private $isFunctioning;\n\n    public function __construct($isUpToDate, $isFunctioning) {\n        $this->isUpToDate = $isUpToDate;\n        $this->isFunctioning = $isFunctioning;\n    }\n\n    public function isSystemValid() {\n        return $this->isUpToDate && $this->isFunctioning;\n    }\n}\n\n// Example usage:\n$checker = new SystemChecker(true, true);\necho $checker->isSystemValid() ? 'System is valid' : 'System is not valid';\n```"
  },
  {
    "task": "Write a function that returns true if a list contains neither duplicates nor null values using logical NOT.",
    "code": "```php\nfunction hasNoDuplicatesOrNulls($list) {\n    return !empty($list) && count($list) === count(array_unique($list)) && !in_array(null, $list, true);\n}\n```"
  },
  {
    "task": "Create a script to perform an action if a temperature is either too high or too low using logical OR.",
    "code": "```php\n<?php\n$temperature = 95; // Example temperature value\n\nif ($temperature > 100 || $temperature < 60) {\n    echo \"Temperature is out of the safe range!\";\n}\n?>\n```"
  },
  {
    "task": "Design a feature to toggle an option if a setting is not enabled using logical NOT.",
    "code": "```php\n<?php\n\nfunction toggleOption(&$option, $setting) {\n    if (!$setting) {\n        $option = !$option;\n    }\n}\n\n$settingEnabled = false;\n$option = true;\n\ntoggleOption($option, $settingEnabled);\n\necho $option ? 'Option is enabled' : 'Option is disabled';\n\n?>\n```"
  },
  {
    "task": "Develop a check to ensure a username is both available and meets length requirements using logical AND.",
    "code": "```php\nfunction isUsernameValid($username, $minLength, $maxLength, $availableUsernames) {\n    $isLengthValid = strlen($username) >= $minLength && strlen($username) <= $maxLength;\n    $isAvailable = in_array($username, $availableUsernames);\n    \n    return $isLengthValid && $isAvailable;\n}\n\n// Example usage:\n$availableUsernames = [\"user1\", \"user2\", \"user3\"];\n$username = \"user1\";\n$minLength = 5;\n$maxLength = 15;\n\n$isValid = isUsernameValid($username, $minLength, $maxLength, $availableUsernames);\necho $isValid ? \"Username is valid.\" : \"Username is not valid.\";\n```"
  },
  {
    "task": "Implement a function that returns true if a number is neither too large nor too small using logical NOT.",
    "code": "```php\nfunction isNumberInRange($number) {\n    return !($number > 100 || $number < 10);\n}\n```"
  },
  {
    "task": "Write a conditional to print a warning if a disk is either full or nearly full using logical OR.",
    "code": "```php\n$diskFull = true; // Example condition, replace with actual check\n$diskNearlyFull = false; // Example condition, replace with actual check\n\nif ($diskFull || $diskNearlyFull) {\n    echo \"Warning: Disk is either full or nearly full.\";\n}\n```"
  },
  {
    "task": "Create a routine to validate that two dates are both within a valid range using logical AND.",
    "code": "```php\nfunction areDatesWithinRange($date1, $date2, $startDate, $endDate) {\n    return ($date1 >= $startDate && $date1 <= $endDate) && \n           ($date2 >= $startDate && $date2 <= $endDate);\n}\n\n// Example usage\n$date1 = '2023-10-01';\n$date2 = '2023-10-15';\n$startDate = '2023-01-01';\n$endDate = '2023-12-31';\n\n$isValid = areDatesWithinRange($date1, $date2, $startDate, $endDate);\necho $isValid ? 'Both dates are within range.' : 'One or both dates are out of range.';\n```"
  },
  {
    "task": "Compose a function to decide if a person is either a minor or a senior using logical OR.",
    "code": "```php\n<?php\n\nfunction isMinorOrSenior($age) {\n    return $age < 18 || $age >= 65;\n}\n\n// Example usage\n$age = 20;\n$result = isMinorOrSenior($age);\necho $result ? \"Yes\" : \"No\";\n\n?>\n```"
  },
  {
    "task": "Design a script to execute a task if a condition is not met using logical NOT.",
    "code": "```php\n<?php\n\n$condition = false;\n\nif (!$condition) {\n    echo \"Executing task because the condition is not met.\";\n}\n\n?>\n```"
  },
  {
    "task": "Develop a program to verify if a process is neither running nor scheduled using logical NOT.",
    "code": "```php\n<?php\n\n$isRunning = false;\n$isScheduled = false;\n\nif (!($isRunning || $isScheduled)) {\n    echo \"The process is neither running nor scheduled.\";\n} else {\n    echo \"The process is either running or scheduled.\";\n}\n\n?>\n```"
  },
  {
    "task": "Implement a feature that confirms a file is both accessible and not locked using logical AND.",
    "code": "```php\n<?php\n\nfunction isFileAccessibleAndNotLocked($filePath) {\n    return is_readable($filePath) && !is_file_locked($filePath);\n}\n\nfunction is_file_locked($filePath) {\n    $handle = fopen($filePath, \"r+\");\n    if ($handle === false) {\n        return true; // File is locked or inaccessible\n    }\n    fclose($handle);\n    return false; // File is not locked\n}\n\n// Example usage\n$filePath = 'example.txt';\nif (isFileAccessibleAndNotLocked($filePath)) {\n    echo \"The file is accessible and not locked.\";\n} else {\n    echo \"The file is either not accessible or locked.\";\n}\n?>\n```"
  },
  {
    "task": "Write a script to check if a device is either offline or in maintenance mode using logical OR.",
    "code": "```php\n<?php\n\n$isOffline = true; // Example status\n$isInMaintenance = false; // Example status\n\nif ($isOffline || $isInMaintenance) {\n    echo \"The device is either offline or in maintenance mode.\";\n} else {\n    echo \"The device is online and not in maintenance mode.\";\n}\n\n?>\n```"
  },
  {
    "task": "Create a function to ensure a password is both complex and unique using logical AND.",
    "code": "```php\nfunction isPasswordValid($password, $existingPasswords) {\n    $isComplex = strlen($password) >= 8 && preg_match('/[A-Z]/', $password) && preg_match('/[a-z]/', $password) && preg_match('/[0-9]/', $password) && preg_match('/[\\W_]/', $password);\n    $isUnique = !in_array($password, $existingPasswords);\n    \n    return $isComplex && $isUnique;\n}\n```"
  },
  {
    "task": "Design a validation that ensures a value is not negative using logical NOT.",
    "code": "```php\nfunction isNotNegative($value) {\n    return !($value < 0);\n}\n\n// Example usage\n$value = 5;\nif (isNotNegative($value)) {\n    echo \"The value is not negative.\";\n} else {\n    echo \"The value is negative.\";\n}\n```"
  },
  {
    "task": "Develop a check to see if a user has either exceeded their quota or is nearing it using logical OR.",
    "code": "```php\nfunction checkQuota($used, $limit, $threshold) {\n    if ($used > $limit || $used >= $threshold) {\n        return true;\n    }\n    return false;\n}\n\n// Example usage\n$userUsed = 90;\n$userLimit = 100;\n$userThreshold = 95;\n\nif (checkQuota($userUsed, $userLimit, $userThreshold)) {\n    echo \"User has exceeded or is nearing their quota.\";\n} else {\n    echo \"User is within the quota limits.\";\n}\n```"
  },
  {
    "task": "Implement a routine to confirm that a user is both authenticated and authorized using logical AND.",
    "code": "```php\nfunction isUserAuthenticatedAndAuthorized($isAuthenticated, $isAuthorized) {\n    return $isAuthenticated && $isAuthorized;\n}\n\n// Example usage\n$isAuthenticated = true; // Example value\n$isAuthorized = true; // Example value\n\nif (isUserAuthenticatedAndAuthorized($isAuthenticated, $isAuthorized)) {\n    echo \"User is authenticated and authorized.\";\n} else {\n    echo \"User is not authenticated or not authorized.\";\n}\n```"
  },
  {
    "task": "Compose a function to determine if a light is either on or blinking using logical OR.",
    "code": "```php\nfunction isLightOnOrBlinking($isOn, $isBlinking) {\n    return $isOn || $isBlinking;\n}\n```"
  },
  {
    "task": "Write a script that executes a command if a network connection is neither weak nor unstable using logical NOT.",
    "code": "```php\n<?php\n\n$networkIsWeak = false;\n$networkIsUnstable = false;\n\nif (!$networkIsWeak && !$networkIsUnstable) {\n    // Execute the command\n    echo \"Executing command...\";\n}\n\n?>\n```"
  },
  {
    "task": "Create a program to verify that a sensor is both calibrated and active using logical AND.",
    "code": "```php\n<?php\n\nfunction isSensorOperational($isCalibrated, $isActive) {\n    return $isCalibrated && $isActive;\n}\n\n// Example usage\n$isCalibrated = true;\n$isActive = true;\n\nif (isSensorOperational($isCalibrated, $isActive)) {\n    echo \"Sensor is operational.\";\n} else {\n    echo \"Sensor is not operational.\";\n}\n\n?>\n```"
  },
  {
    "task": "Design a feature to alert if a process is either overdue or incomplete using logical OR.",
    "code": "```php\n<?php\n\nfunction alertIfOverdueOrIncomplete($isOverdue, $isIncomplete) {\n    if ($isOverdue || $isIncomplete) {\n        echo \"Alert: Process is either overdue or incomplete.\";\n    } else {\n        echo \"Process is on track and complete.\";\n    }\n}\n\n// Example usage:\n$processOverdue = true;\n$processIncomplete = false;\nalertIfOverdueOrIncomplete($processOverdue, $processIncomplete);\n\n?>\n```"
  },
  {
    "task": "Develop a script to check if a person is neither a guest nor a temporary user using logical NOT.",
    "code": "```php\n<?php\n\nfunction isPermanentUser($userStatus) {\n    return !($userStatus === 'guest' || $userStatus === 'temporary');\n}\n\n// Example usage\n$userStatus = 'permanent';\nif (isPermanentUser($userStatus)) {\n    echo \"The user is a permanent user.\";\n} else {\n    echo \"The user is either a guest or a temporary user.\";\n}\n\n?>\n```"
  },
  {
    "task": "Implement a function to toggle a light if a switch is not pressed using logical NOT.",
    "code": "```php\n<?php\n\nfunction toggleLight($isSwitchPressed) {\n    return !$isSwitchPressed;\n}\n\n// Example usage:\n$isSwitchPressed = false;\n$lightStatus = toggleLight($isSwitchPressed);\necho $lightStatus ? \"Light is ON\" : \"Light is OFF\";\n\n?>\n```"
  },
  {
    "task": "Write a conditional to trigger an event if a file is either corrupted or missing using logical OR.",
    "code": "```php\n$fileExists = false; // Assume the file does not exist\n$fileIsCorrupted = true; // Assume the file is corrupted\n\nif (!$fileExists || $fileIsCorrupted) {\n    triggerEvent();\n}\n\nfunction triggerEvent() {\n    echo \"The file is either missing or corrupted.\";\n}\n```"
  },
  {
    "task": "Create a routine that verifies if a vehicle is both insured and registered using logical AND.",
    "code": "```php\nfunction isVehicleInsuredAndRegistered($isInsured, $isRegistered) {\n    return $isInsured && $isRegistered;\n}\n\n// Example usage:\n$vehicleInsured = true;\n$vehicleRegistered = true;\n\n$result = isVehicleInsuredAndRegistered($vehicleInsured, $vehicleRegistered);\necho $result ? \"Vehicle is insured and registered.\" : \"Vehicle is not both insured and registered.\";\n```"
  },
  {
    "task": "Compose a method to check if an account is either overdrawn or flagged using logical OR.",
    "code": "```php\nclass AccountChecker {\n    private $isOverdrawn;\n    private $isFlagged;\n\n    public function __construct($isOverdrawn, $isFlagged) {\n        $this->isOverdrawn = $isOverdrawn;\n        $this->isFlagged = $isFlagged;\n    }\n\n    public function isAccountInTrouble() {\n        return $this->isOverdrawn || $this->isFlagged;\n    }\n}\n\n// Example usage:\n$accountChecker = new AccountChecker(true, false);\n$result = $accountChecker->isAccountInTrouble();\n```"
  },
  {
    "task": "Design a program to ensure an application is both installed and updated using logical AND.",
    "code": "```php\n<?php\n\nfunction isApplicationReady($isInstalled, $isUpdated) {\n    return $isInstalled && $isUpdated;\n}\n\n// Example usage\n$isInstalled = true;\n$isUpdated = true;\n\nif (isApplicationReady($isInstalled, $isUpdated)) {\n    echo \"Application is ready.\";\n} else {\n    echo \"Application is not ready.\";\n}\n\n?>\n```"
  },
  {
    "task": "Develop a function that returns true if a number is neither divisible by 3 nor 5 using logical NOT.",
    "code": "```php\nfunction isNotDivisibleBy3Or5($number) {\n    return !($number % 3 == 0 || $number % 5 == 0);\n}\n```"
  },
  {
    "task": "Implement a script that alerts if a device is either overheating or underperforming using logical OR.",
    "code": "```php\n<?php\n\n$temperature = 85; // Example temperature\n$performance = 40; // Example performance percentage\n\n$isOverheating = $temperature > 80;\n$isUnderperforming = $performance < 50;\n\nif ($isOverheating || $isUnderperforming) {\n    echo \"Alert: Device is either overheating or underperforming.\";\n}\n?>\n```"
  },
  {
    "task": "Write a function to validate that a directory is both writable and not full using logical AND.",
    "code": "```php\nfunction isDirectoryWritableAndNotFull($directory) {\n    return is_writable($directory) && disk_free_space($directory) > 0;\n}\n```"
  },
  {
    "task": "Create a conditional statement that executes if a button is not clicked using logical NOT.",
    "code": "```php\n<?php\nif (!isset($_POST['button_clicked'])) {\n    // Code to execute if the button is not clicked\n    echo \"Button has not been clicked.\";\n}\n?>\n```"
  },
  {
    "task": "Design a check to ensure a transaction is both verified and complete using logical AND.",
    "code": "```php\n$isVerified = true; // Example status of verification\n$isComplete = true; // Example status of completion\n\nif ($isVerified && $isComplete) {\n    echo \"Transaction is verified and complete.\";\n} else {\n    echo \"Transaction verification or completion failed.\";\n}\n```"
  },
  {
    "task": "Develop a routine to determine if a string is either uppercase or lowercase using logical OR.",
    "code": "```php\nfunction isUpperCaseOrLowerCase($str) {\n    if ($str === strtoupper($str) || $str === strtolower($str)) {\n        return true;\n    }\n    return false;\n}\n\n// Example usage\n$string1 = \"HELLO\";\n$string2 = \"hello\";\n$string3 = \"Hello\";\n\necho isUpperCaseOrLowerCase($string1) ? 'true' : 'false'; // true\necho isUpperCaseOrLowerCase($string2) ? 'true' : 'false'; // true\necho isUpperCaseOrLowerCase($string3) ? 'true' : 'false'; // false\n```"
  },
  {
    "task": "Implement a feature to execute a task if a variable is neither null nor undefined using logical NOT.",
    "code": "```php\n<?php\n\n$variable = 'some value';\n\nif ($variable !== null && $variable !== 'undefined') {\n    // Execute task\n    echo \"Task executed.\";\n}\n\n?>\n```"
  },
  {
    "task": "Compose a function to return true if a date is either today or tomorrow using logical OR.",
    "code": "```php\nfunction isTodayOrTomorrow($date) {\n    $today = date('Y-m-d');\n    $tomorrow = date('Y-m-d', strtotime('+1 day'));\n    return $date == $today || $date == $tomorrow;\n}\n```"
  },
  {
    "task": "Write a script to confirm that a system is both running and not in maintenance mode using logical AND.",
    "code": "```php\n$isRunning = true; // This should be dynamically determined\n$isInMaintenanceMode = false; // This should be dynamically determined\n\nif ($isRunning && !$isInMaintenanceMode) {\n    echo \"The system is running and not in maintenance mode.\";\n} else {\n    echo \"The system is either not running or in maintenance mode.\";\n}\n```"
  },
  {
    "task": "Create a program to verify if a text field is neither empty nor exceeds character limit using logical NOT.",
    "code": "```php\n<?php\n\nfunction verifyTextField($text, $maxLength) {\n    return !($text === '' || strlen($text) > $maxLength);\n}\n\n$text = \"Sample text\";\n$maxLength = 20;\n\nif (verifyTextField($text, $maxLength)) {\n    echo \"Text is valid.\";\n} else {\n    echo \"Text is invalid.\";\n}\n\n?>\n```"
  },
  {
    "task": "Design a feature that checks if a user has either admin privileges or editor rights using logical OR.",
    "code": "```php\nfunction hasAccess($user) {\n    return $user['isAdmin'] || $user['isEditor'];\n}\n\n$user = [\n    'isAdmin' => false,\n    'isEditor' => true\n];\n\nif (hasAccess($user)) {\n    echo \"User has access.\";\n} else {\n    echo \"User does not have access.\";\n}\n```"
  },
  {
    "task": "Develop a script to ensure a file is both present and not empty using logical AND.",
    "code": "```php\n$filePath = 'path/to/your/file.txt';\n\nif (file_exists($filePath) && filesize($filePath) > 0) {\n    echo \"File is present and not empty.\";\n} else {\n    echo \"File is either missing or empty.\";\n}\n```"
  },
  {
    "task": "Implement a condition to execute a command if a setting is not active using logical NOT.",
    "code": "```php\n$settingActive = false;\n\nif (!$settingActive) {\n    echo \"The setting is not active. Executing command.\";\n}\n```"
  },
  {
    "task": "Compose a method to decide if a person is either eligible or exempt using logical OR.",
    "code": "```php\nfunction isEligibleOrExempt($age, $hasExemption) {\n    return $age >= 18 || $hasExemption;\n}\n```"
  },
  {
    "task": "Write a function that returns true if a number is both greater than zero and less than ten using logical AND.",
    "code": "```php\nfunction isBetweenZeroAndTen($number) {\n    return $number > 0 && $number < 10;\n}\n```"
  },
  {
    "task": "Create a loop to continue as long as a condition is either true or false using logical OR.",
    "code": "```php\n$condition1 = true;\n$condition2 = false;\n\nwhile ($condition1 || $condition2) {\n    // Your code here\n    \n    // Update conditions to eventually break the loop\n    $condition1 = false;\n    $condition2 = false;\n}\n```"
  },
  {
    "task": "Design a program to verify if an account is neither inactive nor suspended using logical NOT.",
    "code": "```php\nfunction isAccountActive($isInactive, $isSuspended) {\n    return !$isInactive && !$isSuspended;\n}\n\n// Example usage:\n$isInactive = false;\n$isSuspended = false;\n\nif (isAccountActive($isInactive, $isSuspended)) {\n    echo \"The account is active.\";\n} else {\n    echo \"The account is either inactive or suspended.\";\n}\n```"
  },
  {
    "task": "Develop a feature to confirm that a document is both signed and verified using logical AND.",
    "code": "```php\nfunction isDocumentValid($isSigned, $isVerified) {\n    return $isSigned && $isVerified;\n}\n\n// Example usage:\n$isSigned = true;\n$isVerified = true;\n$isValid = isDocumentValid($isSigned, $isVerified);\necho $isValid ? \"Document is valid.\" : \"Document is invalid.\";\n```"
  },
  {
    "task": "Implement a script to alert if a network is either congested or down using logical OR.",
    "code": "```php\n<?php\n\n$isCongested = true; // Example value\n$isDown = false; // Example value\n\nif ($isCongested || $isDown) {\n    echo \"Alert: The network is either congested or down.\";\n}\n?>\n```"
  },
  {
    "task": "Write a function to ensure a list is both sorted and unique using logical AND.",
    "code": "```php\nfunction ensureSortedAndUnique(array $list) {\n    $uniqueList = array_unique($list);\n    sort($uniqueList);\n    return $uniqueList;\n}\n```"
  },
  {
    "task": "Create a conditional statement to execute if a task is not completed using logical NOT.",
    "code": "```php\n$taskCompleted = false;\n\nif (!$taskCompleted) {\n    // Execute some code if the task is not completed\n    echo \"The task is not completed.\";\n}\n```"
  },
  {
    "task": "Design a check to determine if a component is either faulty or missing using logical OR.",
    "code": "```php\n<?php\n\nfunction isComponentFaultyOrMissing($isFaulty, $isMissing) {\n    return $isFaulty || $isMissing;\n}\n\n// Example usage\n$isFaulty = true;\n$isMissing = false;\n\nif (isComponentFaultyOrMissing($isFaulty, $isMissing)) {\n    echo \"The component is either faulty or missing.\";\n} else {\n    echo \"The component is neither faulty nor missing.\";\n}\n\n?>\n```"
  },
  {
    "task": "Develop a routine to verify if a user is both online and available using logical AND.",
    "code": "```php\nfunction isUserOnlineAndAvailable($isOnline, $isAvailable) {\n    return $isOnline && $isAvailable;\n}\n\n// Example usage\n$userOnline = true;\n$userAvailable = true;\n\nif (isUserOnlineAndAvailable($userOnline, $userAvailable)) {\n    echo \"User is online and available.\";\n} else {\n    echo \"User is not both online and available.\";\n}\n```"
  },
  {
    "task": "Implement a feature to toggle an alert if a condition is not satisfied using logical NOT.",
    "code": "```php\n<?php\n\nfunction toggleAlert($condition) {\n    $alert = false;\n\n    if (!$condition) {\n        $alert = !$alert;\n    }\n\n    return $alert;\n}\n\n// Example usage:\n$condition = false;\n$alertStatus = toggleAlert($condition);\necho $alertStatus ? 'Alert is ON' : 'Alert is OFF';\n\n?>\n```"
  },
  {
    "task": "Compose a function to return true if a transaction is either pending or failed using logical OR.",
    "code": "```php\nfunction isTransactionPendingOrFailed($status) {\n    return $status === 'pending' || $status === 'failed';\n}\n```"
  },
  {
    "task": "Write a script to ensure a configuration is both correct and active using logical AND.",
    "code": "```php\n<?php\n\nfunction isConfigurationValid($configuration) {\n    // Example validation logic\n    return isset($configuration['correct']) && $configuration['correct'] === true;\n}\n\nfunction isConfigurationActive($configuration) {\n    // Example activation check\n    return isset($configuration['active']) && $configuration['active'] === true;\n}\n\n$configuration = [\n    'correct' => true,\n    'active' => true\n];\n\nif (isConfigurationValid($configuration) && isConfigurationActive($configuration)) {\n    echo \"Configuration is both correct and active.\";\n} else {\n    echo \"Configuration is not valid or not active.\";\n}\n?>\n```"
  }
]