[
  {
    "task": "Convert a list of temperatures from Celsius to Fahrenheit using a map function.",
    "code": "```php\n<?php\n\n$temperaturesCelsius = [0, 20, 30, 100];\n\n$temperaturesFahrenheit = array_map(function($celsius) {\n    return $celsius * 9/5 + 32;\n}, $temperaturesCelsius);\n\nprint_r($temperaturesFahrenheit);\n\n?>\n```"
  },
  {
    "task": "Use map to convert a list of lowercase words to uppercase.",
    "code": "```php\n$words = ['hello', 'world', 'php', 'code'];\n$uppercaseWords = array_map('strtoupper', $words);\nprint_r($uppercaseWords);\n```"
  },
  {
    "task": "Apply map to add a prefix to each string in a list of filenames.",
    "code": "```php\n$filenames = [\"file1.txt\", \"file2.txt\", \"file3.txt\"];\n$prefix = \"prefix_\";\n\n$prefixedFilenames = array_map(function($filename) use ($prefix) {\n    return $prefix . $filename;\n}, $filenames);\n\nprint_r($prefixedFilenames);\n```"
  },
  {
    "task": "Transform a list of numbers by squaring each element with a map function.",
    "code": "```php\n$numbers = [1, 2, 3, 4, 5];\n$squaredNumbers = array_map(fn($n) => $n * $n, $numbers);\n```"
  },
  {
    "task": "Convert a list of integers to their string representations using map.",
    "code": "```php\n$integers = [1, 2, 3, 4, 5];\n$strings = array_map('strval', $integers);\n```"
  },
  {
    "task": "Use map to compute the length of each string in a list of sentences.",
    "code": "```php\n$sentences = [\"Hello world\", \"PHP is awesome\", \"Functional programming\"];\n$lengths = array_map('strlen', $sentences);\n```"
  },
  {
    "task": "Apply a discount to a list of prices using a map function.",
    "code": "```php\n$prices = [100, 200, 300, 400, 500];\n$discountRate = 0.1; // 10% discount\n\n$applyDiscount = function($price) use ($discountRate) {\n    return $price * (1 - $discountRate);\n};\n\n$discountedPrices = array_map($applyDiscount, $prices);\n\nprint_r($discountedPrices);\n```"
  },
  {
    "task": "Extract the first element from each tuple in a list of tuples with map.",
    "code": "```php\n<?php\n\n$tuples = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\n\n$firstElements = array_map(fn($tuple) => $tuple[0], $tuples);\n\nprint_r($firstElements);\n\n?>\n```"
  },
  {
    "task": "Use map to round a list of floating-point numbers to two decimal places.",
    "code": "```php\n$numbers = [3.14159, 2.71828, 1.61803, 0.57721];\n$roundedNumbers = array_map(fn($number) => round($number, 2), $numbers);\n```"
  },
  {
    "task": "Capitalize the first letter of each word in a list of names using map.",
    "code": "```php\n$names = [\"alice\", \"bob\", \"charlie\"];\n$capitalizedNames = array_map(fn($name) => ucwords($name), $names);\n```"
  },
  {
    "task": "Convert a list of JSON strings to corresponding dictionary objects with map.",
    "code": "```php\n$jsonStrings = ['{\"name\": \"John\", \"age\": 30}', '{\"name\": \"Jane\", \"age\": 25}', '{\"name\": \"Doe\", \"age\": 40}'];\n$dictionaryObjects = array_map(fn($json) => json_decode($json, true), $jsonStrings);\n```"
  },
  {
    "task": "Use map to double the value of each number in a list.",
    "code": "```php\n$numbers = [1, 2, 3, 4, 5];\n$doubledNumbers = array_map(fn($n) => $n * 2, $numbers);\n```"
  },
  {
    "task": "Transform a list of RGB tuples to hexadecimal color codes using map.",
    "code": "```php\n$rgbList = [[255, 0, 0], [0, 255, 0], [0, 0, 255]];\n\n$toHex = function($rgb) {\n    list($r, $g, $b) = $rgb;\n    return sprintf(\"#%02x%02x%02x\", $r, $g, $b);\n};\n\n$hexList = array_map($toHex, $rgbList);\n\nprint_r($hexList);\n```"
  },
  {
    "task": "Use map to compute the factorial of each number in a list.",
    "code": "```php\nfunction factorial($n) {\n    return array_product(range(1, $n));\n}\n\n$numbers = [1, 2, 3, 4, 5];\n\n$factorials = array_map('factorial', $numbers);\n\nprint_r($factorials);\n```"
  },
  {
    "task": "Translate a list of English words to Spanish using a map function.",
    "code": "```php\n$englishWords = ['hello', 'world', 'apple', 'banana'];\n\n$translations = [\n    'hello' => 'hola',\n    'world' => 'mundo',\n    'apple' => 'manzana',\n    'banana' => 'pl\u00e1tano'\n];\n\n$spanishWords = array_map(function($word) use ($translations) {\n    return $translations[$word] ?? $word;\n}, $englishWords);\n\nprint_r($spanishWords);\n```"
  },
  {
    "task": "Apply a map function to format a list of dates from one format to another.",
    "code": "```php\n<?php\n\n$dates = [\"2023-10-01\", \"2023-11-15\", \"2023-12-25\"];\n$formattedDates = array_map(function($date) {\n    $dateTime = DateTime::createFromFormat('Y-m-d', $date);\n    return $dateTime->format('d/m/Y');\n}, $dates);\n\nprint_r($formattedDates);\n\n?>\n```"
  },
  {
    "task": "Use map to check if each number in a list is even, returning a list of booleans.",
    "code": "```php\n$numbers = [1, 2, 3, 4, 5, 6];\n$isEven = array_map(fn($n) => $n % 2 === 0, $numbers);\n```"
  },
  {
    "task": "Convert a list of binary strings to decimal numbers using map.",
    "code": "```php\n$binaryStrings = ['101', '1101', '1110', '1001'];\n\n$decimalNumbers = array_map(function($binaryString) {\n    return bindec($binaryString);\n}, $binaryStrings);\n\nprint_r($decimalNumbers);\n```"
  },
  {
    "task": "Use map to append a domain name to a list of user names to create email addresses.",
    "code": "```php\n$usernames = ['alice', 'bob', 'charlie'];\n$domain = '@example.com';\n$emails = array_map(fn($username) => $username . $domain, $usernames);\nprint_r($emails);\n```"
  },
  {
    "task": "Calculate the area of each circle in a list of radii using a map function.",
    "code": "```php\n$radii = [1, 2, 3, 4, 5];\n$areas = array_map(fn($radius) => pi() * $radius * $radius, $radii);\n```"
  },
  {
    "task": "Use map to strip whitespace from the start and end of each string in a list.",
    "code": "```php\n$list = [\"  apple  \", \"  banana  \", \"  cherry  \"];\n$strippedList = array_map('trim', $list);\n```"
  },
  {
    "task": "Apply map to replace spaces with underscores in a list of file paths.",
    "code": "```php\n$filePaths = ['path to/file one.txt', 'another path/to/file two.txt', 'yet another path/to/file three.txt'];\n\n$modifiedPaths = array_map(fn($path) => str_replace(' ', '_', $path), $filePaths);\n\nprint_r($modifiedPaths);\n```"
  },
  {
    "task": "Convert a list of mixed-case strings to title case using map.",
    "code": "```php\n$strings = [\"hello world\", \"php is awesome\", \"functional MAP example\"];\n$titleCasedStrings = array_map(fn($str) => ucwords(strtolower($str)), $strings);\n```"
  },
  {
    "task": "Use map to filter out only the digits from a list of mixed alphanumeric strings.",
    "code": "```php\n$strings = ['abc123', 'def456', 'ghi789'];\n$digits = array_map(function($str) {\n    return preg_replace('/\\D/', '', $str);\n}, $strings);\n\nprint_r($digits);\n```"
  },
  {
    "task": "Apply map to convert a list of Unix timestamps to readable date strings.",
    "code": "```php\n$timestamps = [1633072800, 1633159200, 1633245600];\n\n$readableDates = array_map(function($timestamp) {\n    return date('Y-m-d H:i:s', $timestamp);\n}, $timestamps);\n\nprint_r($readableDates);\n```"
  },
  {
    "task": "Transform a list of dictionary objects by extracting a specific key's value using map.",
    "code": "```php\n$list = [\n    ['key1' => 'value1', 'key2' => 'value2'],\n    ['key1' => 'value3', 'key2' => 'value4'],\n    ['key1' => 'value5', 'key2' => 'value6']\n];\n\n$keyToExtract = 'key1';\n\n$result = array_map(function($item) use ($keyToExtract) {\n    return $item[$keyToExtract];\n}, $list);\n\nprint_r($result);\n```"
  },
  {
    "task": "Use map to compute the cube of each number in a list.",
    "code": "```php\n$numbers = [1, 2, 3, 4, 5];\n$cubes = array_map(fn($n) => $n ** 3, $numbers);\n```"
  },
  {
    "task": "Translate a list of URLs to their respective domain names using a map function.",
    "code": "```php\n$urls = [\n    \"https://www.example.com\",\n    \"http://subdomain.example.org\",\n    \"https://another-example.net\"\n];\n\n$domains = array_map(function ($url) {\n    return parse_url($url, PHP_URL_HOST);\n}, $urls);\n\nprint_r($domains);\n```"
  },
  {
    "task": "Use map to generate HTML list items from a list of text strings.",
    "code": "```php\n$textStrings = [\"First\", \"Second\", \"Third\"];\n\n$htmlListItems = array_map(fn($text) => \"<li>$text</li>\", $textStrings);\n\necho implode(\"\\n\", $htmlListItems);\n```"
  },
  {
    "task": "Convert a list of polar coordinates to Cartesian coordinates using map.",
    "code": "```php\n$polarCoordinates = [\n    ['r' => 5, 'theta' => pi() / 4],\n    ['r' => 3, 'theta' => pi() / 6],\n    ['r' => 2, 'theta' => pi() / 3]\n];\n\n$cartesianCoordinates = array_map(function($polar) {\n    $x = $polar['r'] * cos($polar['theta']);\n    $y = $polar['r'] * sin($polar['theta']);\n    return ['x' => $x, 'y' => $y];\n}, $polarCoordinates);\n\nprint_r($cartesianCoordinates);\n```"
  },
  {
    "task": "Use map to decode a list of Base64 encoded strings.",
    "code": "```php\n<?php\n\n$encodedStrings = ['SGVsbG8gd29ybGQ=', 'U29tZSB0ZXh0', 'QmFzZTY0IGVuY29kaW5n'];\n$decodedStrings = array_map('base64_decode', $encodedStrings);\n\nprint_r($decodedStrings);\n```"
  },
  {
    "task": "Convert a list of English sentences to Pig Latin using a map function.",
    "code": "```php\n$sentences = [\n    \"hello world\",\n    \"programming is fun\",\n    \"i love coding\"\n];\n\nfunction convertToPigLatin($sentence) {\n    $words = explode(' ', $sentence);\n    $pigLatinWords = array_map(function ($word) {\n        $firstLetter = strtolower($word[0]);\n        $restOfWord = substr($word, 1);\n        return $restOfWord . $firstLetter . 'ay';\n    }, $words);\n    return implode(' ', $pigLatinWords);\n}\n\n$pigLatinSentences = array_map('convertToPigLatin', $sentences);\nprint_r($pigLatinSentences);\n```"
  },
  {
    "task": "Use map to anonymize a list of email addresses by masking them.",
    "code": "```php\n<?php\n\nfunction anonymizeEmails($emails) {\n    return array_map(function($email) {\n        list($username, $domain) = explode('@', $email);\n        $maskedUsername = substr($username, 0, 1) . str_repeat('*', max(0, strlen($username) - 2)) . substr($username, -1);\n        return $maskedUsername . '@' . $domain;\n    }, $emails);\n}\n\n$emails = ['example1@example.com', 'user2@test.com', 'sample@test.org'];\n$anonymizedEmails = anonymizeEmails($emails);\nprint_r($anonymizedEmails);\n\n?>\n```"
  },
  {
    "task": "Apply map to reverse each string in a list of words.",
    "code": "```php\n$words = ['hello', 'world', 'php', 'code'];\n$reversedWords = array_map(fn($word) => strrev($word), $words);\n```"
  },
  {
    "task": "Convert a list of hexadecimal color codes to RGB tuples using map.",
    "code": "```php\n$hexColors = ['#FF5733', '#33FF57', '#3357FF'];\n\n$hexToRgb = function($hex) {\n    $hex = ltrim($hex, '#');\n    return [\n        hexdec(substr($hex, 0, 2)),\n        hexdec(substr($hex, 2, 2)),\n        hexdec(substr($hex, 4, 2))\n    ];\n};\n\n$rgbColors = array_map($hexToRgb, $hexColors);\n\nprint_r($rgbColors);\n```"
  },
  {
    "task": "Use map to increment each integer in a list by a constant value.",
    "code": "```php\n<?php\n\nfunction incrementEach($list, $increment) {\n    return array_map(function($value) use ($increment) {\n        return $value + $increment;\n    }, $list);\n}\n\n$list = [1, 2, 3, 4, 5];\n$increment = 1;\n$newList = incrementEach($list, $increment);\n\nprint_r($newList);\n\n?>\n```"
  },
  {
    "task": "Calculate the square root of each number in a list using a map function.",
    "code": "```php\n$numbers = [4, 9, 16, 25];\n$squareRoots = array_map('sqrt', $numbers);\n```"
  },
  {
    "task": "Use map to convert a list of currency amounts from dollars to euros.",
    "code": "```php\n<?php\n\nfunction convertToEuros($amount) {\n    $exchangeRate = 0.85; // Example exchange rate\n    return $amount * $exchangeRate;\n}\n\n$dollarAmounts = [100, 200, 300, 400, 500];\n\n$euroAmounts = array_map('convertToEuros', $dollarAmounts);\n\nprint_r($euroAmounts);\n\n?>\n```"
  },
  {
    "task": "Extract the domain from each email address in a list using map.",
    "code": "```php\n$emailAddresses = ['user1@example.com', 'user2@test.org', 'person@website.net'];\n\n$domains = array_map(function($email) {\n    return substr(strrchr($email, \"@\"), 1);\n}, $emailAddresses);\n\nprint_r($domains);\n```"
  },
  {
    "task": "Use map to serialize a list of objects into JSON strings.",
    "code": "```php\n<?php\n\nclass MyObject {\n    public $property1;\n    public $property2;\n\n    public function __construct($property1, $property2) {\n        $this->property1 = $property1;\n        $this->property2 = $property2;\n    }\n}\n\n$objects = [\n    new MyObject('value1', 10),\n    new MyObject('value2', 20),\n    new MyObject('value3', 30)\n];\n\n$jsonStrings = array_map(fn($obj) => json_encode($obj), $objects);\n\nprint_r($jsonStrings);\n```"
  },
  {
    "task": "Transform a list of file sizes from bytes to kilobytes using map.",
    "code": "```php\n$fileSizesInBytes = [1024, 2048, 5120, 7680, 10240];\n$fileSizesInKilobytes = array_map(fn($size) => $size / 1024, $fileSizesInBytes);\n```"
  },
  {
    "task": "Use map to append a suffix to each string in a list of identifiers.",
    "code": "```php\n$identifiers = ['id1', 'id2', 'id3'];\n$suffix = '_suffix';\n\n$modifiedIdentifiers = array_map(function($identifier) use ($suffix) {\n    return $identifier . $suffix;\n}, $identifiers);\n\nprint_r($modifiedIdentifiers);\n```"
  },
  {
    "task": "Apply map to convert measurements from inches to centimeters in a list.",
    "code": "```php\n$inches = [2.5, 5, 7.75, 10, 12.5];\n$centimeters = array_map(fn($inch) => $inch * 2.54, $inches);\n```"
  },
  {
    "task": "Use map to encrypt a list of plaintext messages using a simple cipher.",
    "code": "```php\n<?php\n\nfunction simpleCipher($message) {\n    $shift = 3;\n    $result = '';\n    for ($i = 0; $i < strlen($message); $i++) {\n        $char = $message[$i];\n        if (ctype_alpha($char)) {\n            $offset = ctype_upper($char) ? ord('A') : ord('a');\n            $char = chr(($ord = ord($char)) + $shift <= $offset + 25 ? $ord + $shift : $ord + $shift - 26);\n        }\n        $result .= $char;\n    }\n    return $result;\n}\n\n$plaintextMessages = [\"Hello\", \"World\", \"Example\"];\n$encryptedMessages = array_map('simpleCipher', $plaintextMessages);\n\nprint_r($encryptedMessages);\n\n?>\n```"
  },
  {
    "task": "Transform a list of date strings to day of the week names using a map function.",
    "code": "```php\n<?php\n\n$dates = ['2023-10-01', '2023-10-02', '2023-10-03'];\n\n$daysOfWeek = array_map(function($date) {\n    return date('l', strtotime($date));\n}, $dates);\n\nprint_r($daysOfWeek);\n\n?>\n```"
  },
  {
    "task": "Use map to derive the absolute value of each number in a list.",
    "code": "```php\n$numbers = [-1, -2, 3, -4, 5];\n$absoluteValues = array_map('abs', $numbers);\n```"
  },
  {
    "task": "Convert a list of lowercase hexadecimal strings to uppercase using map.",
    "code": "```php\n$hexStrings = ['1a', '2b', '3c', '4d', '5e', '6f'];\n$upperHexStrings = array_map('strtoupper', $hexStrings);\n```"
  },
  {
    "task": "Use map to find the maximum value in a list of lists of numbers.",
    "code": "```php\nfunction findMaxValue($listOfLists) {\n    return max(array_map('max', $listOfLists));\n}\n\n$listOfLists = [\n    [3, 5, 2],\n    [8, 1, 4],\n    [7, 6, 9]\n];\n\n$maxValue = findMaxValue($listOfLists);\necho $maxValue;\n```"
  },
  {
    "task": "Apply map to extract the year from each date in a list of date objects.",
    "code": "```php\n$dates = [\n    new DateTime('2023-10-01'),\n    new DateTime('2022-05-15'),\n    new DateTime('2021-12-31')\n];\n\n$years = array_map(fn($date) => $date->format('Y'), $dates);\n\nprint_r($years);\n```"
  },
  {
    "task": "Use map to prepend a country code to each phone number in a list.",
    "code": "```php\n$phoneNumbers = ['123456789', '987654321', '555666777'];\n$countryCode = '+1';\n\n$prependCountryCode = array_map(fn($number) => $countryCode . $number, $phoneNumbers);\n\nprint_r($prependCountryCode);\n```"
  },
  {
    "task": "Capitalize the last letter of each word in a list using a map function.",
    "code": "```php\n$words = ['apple', 'banana', 'cherry'];\n\n$capitalizeLastLetter = function($word) {\n    return substr($word, 0, -1) . strtoupper(substr($word, -1));\n};\n\n$capitalizedWords = array_map($capitalizeLastLetter, $words);\n\nprint_r($capitalizedWords);\n```"
  },
  {
    "task": "Use map to transform a list of strings by removing all vowels.",
    "code": "```php\n$strings = [\"example\", \"functional\", \"map\", \"transform\"];\n$vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n\n$transformed = array_map(function($string) use ($vowels) {\n    return str_replace($vowels, '', $string);\n}, $strings);\n\nprint_r($transformed);\n```"
  },
  {
    "task": "Convert a list of music notes to their corresponding frequencies using map.",
    "code": "```php\n$notes = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\"];\n$frequencies = [\n    \"A\" => 440.00,\n    \"B\" => 493.88,\n    \"C\" => 261.63,\n    \"D\" => 293.66,\n    \"E\" => 329.63,\n    \"F\" => 349.23,\n    \"G\" => 392.00\n];\n\n$noteFrequencies = array_map(fn($note) => $frequencies[$note] ?? null, $notes);\n\nprint_r($noteFrequencies);\n```"
  },
  {
    "task": "Use map to find the reciprocal of each number in a list.",
    "code": "```php\n<?php\n\nfunction reciprocal($n) {\n    return 1 / $n;\n}\n\n$numbers = [1, 2, 3, 4, 5];\n$reciprocals = array_map('reciprocal', $numbers);\n\nprint_r($reciprocals);\n\n?>\n```"
  },
  {
    "task": "Transform a list of URLs to their shortened versions using a map function.",
    "code": "```php\n$urls = [\n    \"https://www.example.com\",\n    \"https://www.example.org\",\n    \"https://www.example.net\"\n];\n\nfunction shortenUrl($url) {\n    return \"short.ly/\" . substr(md5($url), 0, 6);\n}\n\n$shortenedUrls = array_map('shortenUrl', $urls);\n\nprint_r($shortenedUrls);\n```"
  },
  {
    "task": "Use map to generate a list of initials from a list of full names.",
    "code": "```php\n$names = [\"John Doe\", \"Jane Smith\", \"Alice Johnson\"];\n\n$initials = array_map(function($name) {\n    $parts = explode(' ', $name);\n    return strtoupper($parts[0][0] . $parts[1][0]);\n}, $names);\n\nprint_r($initials);\n```"
  },
  {
    "task": "Convert a list of decimal numbers to their binary string representations using map.",
    "code": "```php\n$decimalNumbers = [2, 5, 8, 10];\n$binaryStrings = array_map(fn($number) => decbin($number), $decimalNumbers);\n```"
  },
  {
    "task": "Use map to adjust the brightness of each color in a list of RGB tuples.",
    "code": "```php\nfunction adjustBrightness($colors, $factor) {\n    return array_map(function($color) use ($factor) {\n        return array_map(function($component) use ($factor) {\n            return min(255, max(0, (int)($component * $factor)));\n        }, $color);\n    }, $colors);\n}\n\n$colors = [\n    [100, 150, 200],\n    [50, 75, 100],\n    [200, 100, 50]\n];\n\n$factor = 1.2;\n$adjustedColors = adjustBrightness($colors, $factor);\n\nprint_r($adjustedColors);\n```"
  },
  {
    "task": "Apply map to filter out only alphabetic characters from a list of strings.",
    "code": "```php\n$strings = [\"hello123\", \"world!\", \"foo@bar\", \"php7.4\", \"code\"];\n\n$result = array_map(function($str) {\n    return preg_replace(\"/[^a-zA-Z]/\", \"\", $str);\n}, $strings);\n\nprint_r($result);\n```"
  },
  {
    "task": "Use map to compute the prime factorization of each number in a list.",
    "code": "```php\nfunction primeFactors($n) {\n    $factors = [];\n    for ($i = 2; $i <= $n; $i++) {\n        while ($n % $i == 0) {\n            $factors[] = $i;\n            $n /= $i;\n        }\n    }\n    return $factors;\n}\n\n$numbers = [12, 15, 77, 100];\n$primeFactorizations = array_map('primeFactors', $numbers);\n\nprint_r($primeFactorizations);\n```"
  },
  {
    "task": "Calculate the exponential of each number in a list using a map function.",
    "code": "```php\n$numbers = [1, 2, 3, 4, 5];\n$exponentials = array_map(function($number) {\n    return exp($number);\n}, $numbers);\n\nprint_r($exponentials);\n```"
  },
  {
    "task": "Use map to convert a list of text messages to morse code.",
    "code": "```php\nfunction textToMorse($text) {\n    $morseCodeMap = [\n        'A' => '.-', 'B' => '-...', 'C' => '-.-.', 'D' => '-..',\n        'E' => '.', 'F' => '..-.', 'G' => '--.', 'H' => '....',\n        'I' => '..', 'J' => '.---', 'K' => '-.-', 'L' => '.-..',\n        'M' => '--', 'N' => '-.', 'O' => '---', 'P' => '.--.',\n        'Q' => '--.-', 'R' => '.-.', 'S' => '...', 'T' => '-',\n        'U' => '..-', 'V' => '...-', 'W' => '.--', 'X' => '-..-',\n        'Y' => '-.--', 'Z' => '--..', '1' => '.----', '2' => '..---',\n        '3' => '...--', '4' => '....-', '5' => '.....', '6' => '-....',\n        '7' => '--...', '8' => '---..', '9' => '----.', '0' => '-----',\n        ' ' => '/'\n    ];\n    \n    $text = strtoupper($text);\n    $morse = array_map(function($char) use ($morseCodeMap) {\n        return $morseCodeMap[$char] ?? '';\n    }, str_split($text));\n    \n    return implode(' ', $morse);\n}\n\n$messages = [\"HELLO WORLD\", \"PHP CODE\"];\n$morseMessages = array_map('textToMorse', $messages);\n\nprint_r($morseMessages);\n```"
  },
  {
    "task": "Transform a list of JSON objects to XML strings using a map function.",
    "code": "```php\n<?php\n\n$jsonObjects = [\n    '{\"name\": \"Alice\", \"age\": 30}',\n    '{\"name\": \"Bob\", \"age\": 25}',\n    '{\"name\": \"Charlie\", \"age\": 35}'\n];\n\n$xmlStrings = array_map(function($json) {\n    $array = json_decode($json, true);\n    $xml = new SimpleXMLElement('<root/>');\n    array_walk_recursive($array, function($value, $key) use ($xml) {\n        $xml->addChild($key, $value);\n    });\n    return $xml->asXML();\n}, $jsonObjects);\n\nprint_r($xmlStrings);\n\n?>\n```"
  },
  {
    "task": "Use map to extract the extension from each filename in a list.",
    "code": "```php\n$filenames = ['document.txt', 'photo.jpg', 'archive.zip'];\n\n$extensions = array_map(function($filename) {\n    return pathinfo($filename, PATHINFO_EXTENSION);\n}, $filenames);\n\nprint_r($extensions);\n```"
  },
  {
    "task": "Convert a list of temperatures from Fahrenheit to Kelvin using map.",
    "code": "```php\n$fahrenheitTemps = [32, 68, 100, 212];\n$kelvinTemps = array_map(function($tempF) {\n    return ($tempF + 459.67) * (5/9);\n}, $fahrenheitTemps);\n```"
  },
  {
    "task": "Use map to calculate the perimeter of each rectangle in a list of dimensions.",
    "code": "```php\n$rectangles = [[3, 4], [5, 6], [7, 8]];\n\n$perimeters = array_map(function($dimensions) {\n    return 2 * ($dimensions[0] + $dimensions[1]);\n}, $rectangles);\n\nprint_r($perimeters);\n```"
  },
  {
    "task": "Apply map to format a list of phone numbers into a standard format.",
    "code": "```php\n$phoneNumbers = [\"1234567890\", \"0987654321\", \"1122334455\"];\n\n$standardFormatted = array_map(function($number) {\n    return sprintf(\"(%s) %s-%s\", substr($number, 0, 3), substr($number, 3, 3), substr($number, 6));\n}, $phoneNumbers);\n\nprint_r($standardFormatted);\n```"
  },
  {
    "task": "Use map to generate a hashed version of passwords from a list.",
    "code": "```php\n$passwords = ['password123', 'helloWorld', '123456'];\n$hashedPasswords = array_map(fn($password) => password_hash($password, PASSWORD_DEFAULT), $passwords);\n```"
  },
  {
    "task": "Convert a list of text paragraphs to a word count using map.",
    "code": "```php\n$paragraphs = [\n    \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\",\n    \"Vestibulum suscipit nulla quis orci facilisis, sit amet gravida.\",\n    \"Sed ut perspiciatis unde omnis iste natus error sit.\"\n];\n\n$wordCounts = array_map(function($paragraph) {\n    return str_word_count($paragraph);\n}, $paragraphs);\n\nprint_r($wordCounts);\n```"
  },
  {
    "task": "Use map to remove punctuation from each string in a list of sentences.",
    "code": "```php\n$sentences = [\n    \"Hello, world!\",\n    \"This is a test.\",\n    \"PHP is great; let's use it effectively.\"\n];\n\n$removePunctuation = function($sentence) {\n    return preg_replace(\"/[^\\w\\s]/\", \"\", $sentence);\n};\n\n$cleanSentences = array_map($removePunctuation, $sentences);\n\nprint_r($cleanSentences);\n```"
  },
  {
    "task": "Transform a list of URLs to their base domain using a map function.",
    "code": "```php\n$urls = [\n    \"https://www.example.com/path\",\n    \"http://subdomain.example.org/resource\",\n    \"https://anotherexample.net\",\n    \"http://yetanother.co.uk/path/to/page\"\n];\n\n$baseDomains = array_map(function($url) {\n    $parsedUrl = parse_url($url);\n    return $parsedUrl['host'] ?? '';\n}, $urls);\n\nprint_r($baseDomains);\n```"
  },
  {
    "task": "Use map to translate a list of expressions to their symbolic algebraic forms.",
    "code": "```php\n<?php\n\n$expressions = ['x^2', 'x+1', '3*x', '2*x+3'];\n$algebraicForms = array_map(function($expr) {\n    $symbols = [\n        '^2' => '^2',\n        '+1' => '+1',\n        '*x' => '*x',\n        '2*' => '2*',\n        '+3' => '+3'\n    ];\n    foreach ($symbols as $key => $value) {\n        $expr = str_replace($key, $value, $expr);\n    }\n    return $expr;\n}, $expressions);\n\nprint_r($algebraicForms);\n\n?>\n```"
  },
  {
    "task": "Apply map to convert a list of ASCII codes to corresponding characters.",
    "code": "```php\n$asciiCodes = [65, 66, 67, 68, 69];\n$characters = array_map('chr', $asciiCodes);\nprint_r($characters);\n```"
  },
  {
    "task": "Use map to transform a list of text strings to their lemmatized forms.",
    "code": "```php\n<?php\n\nrequire 'vendor/autoload.php';\n\nuse Phpml\\Tokenization\\WhitespaceTokenizer;\nuse Phpml\\FeatureExtraction\\StopWords\\English;\nuse Phpml\\Transformer\\StopWordsRemoval;\nuse Phpml\\NaturalLanguage\\Lemmatizer;\n\n// Sample list of text strings\n$texts = [\n    \"running\",\n    \"jumps\",\n    \"easily\",\n    \"better\"\n];\n\n$lemmatizer = new Lemmatizer();\n\n// Functional map to lemmatize each string\n$lemmatized = array_map(function ($text) use ($lemmatizer) {\n    return $lemmatizer->lemmatize($text);\n}, $texts);\n\nprint_r($lemmatized);\n```"
  },
  {
    "task": "Convert a list of HTML strings to plain text using map.",
    "code": "```php\n$htmlStrings = [\n    \"<p>Hello, <strong>World!</strong></p>\",\n    \"<h1>PHP</h1> <p>is awesome!</p>\",\n    \"<div>Functional <em>Map</em> Example</div>\"\n];\n\n$plainTextStrings = array_map(function($html) {\n    return strip_tags($html);\n}, $htmlStrings);\n\nprint_r($plainTextStrings);\n```"
  },
  {
    "task": "Use map to create a summary of each article in a list of texts.",
    "code": "```php\nfunction summarizeArticle($text) {\n    // Simple summary by taking the first 100 characters\n    return substr($text, 0, 100) . '...';\n}\n\n$articles = [\n    \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\",\n    \"Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\",\n    \"Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\"\n];\n\n$summaries = array_map('summarizeArticle', $articles);\n\nprint_r($summaries);\n```"
  },
  {
    "task": "Transform a list of paths to their absolute paths using a map function.",
    "code": "```php\n$paths = ['./file1.txt', '../file2.txt', '/absolute/path/file3.txt'];\n$absolutePaths = array_map('realpath', $paths);\n```"
  },
  {
    "task": "Use map to generate QR codes from a list of URLs.",
    "code": "```php\n<?php\n\nrequire 'vendor/autoload.php';\nuse Endroid\\QrCode\\QrCode;\n\n$urls = [\n    'https://example.com',\n    'https://example.org',\n    'https://example.net'\n];\n\n$qrCodes = array_map(function($url) {\n    $qrCode = new QrCode($url);\n    return $qrCode->writeDataUri();\n}, $urls);\n\nprint_r($qrCodes);\n\n?>\n```"
  },
  {
    "task": "Convert a list of angles from degrees to radians using map.",
    "code": "```php\n$anglesInDegrees = [0, 30, 45, 60, 90, 180, 270, 360];\n$anglesInRadians = array_map(fn($degree) => $degree * (pi() / 180), $anglesInDegrees);\n```"
  },
  {
    "task": "Use map to anonymize a list of IP addresses by masking parts of them.",
    "code": "```php\n$ipAddresses = ['192.168.1.1', '10.0.0.2', '172.16.0.3'];\n\n$anonymizedIPs = array_map(function($ip) {\n    $parts = explode('.', $ip);\n    return $parts[0] . '.' . $parts[1] . '.x.x';\n}, $ipAddresses);\n\nprint_r($anonymizedIPs);\n```"
  },
  {
    "task": "Transform a list of tuples by swapping their elements using a map function.",
    "code": "```php\n$list = [(1, 'a'), (2, 'b'), (3, 'c')];\n\n$swappedList = array_map(function($tuple) {\n    return [$tuple[1], $tuple[0]];\n}, $list);\n\nprint_r($swappedList);\n```"
  },
  {
    "task": "Use map to compute the greatest common divisor of pairs in a list of number pairs.",
    "code": "```php\nfunction gcd($a, $b) {\n    while ($b != 0) {\n        $t = $b;\n        $b = $a % $b;\n        $a = $t;\n    }\n    return $a;\n}\n\n$pairs = [[48, 18], [56, 42], [99, 66], [27, 36]];\n$result = array_map(function($pair) {\n    return gcd($pair[0], $pair[1]);\n}, $pairs);\n\nprint_r($result);\n```"
  },
  {
    "task": "Convert a list of file paths to their directory names using map.",
    "code": "```php\n$paths = [\n    '/var/www/html/index.php',\n    '/usr/local/bin/script.sh',\n    '/home/user/file.txt'\n];\n\n$directories = array_map(function($path) {\n    return dirname($path);\n}, $paths);\n\nprint_r($directories);\n```"
  },
  {
    "task": "Use map to replace each vowel in a list of strings with a specific character.",
    "code": "```php\nfunction replaceVowels($strings, $replacementChar) {\n    return array_map(function($string) use ($replacementChar) {\n        return preg_replace('/[aeiouAEIOU]/', $replacementChar, $string);\n    }, $strings);\n}\n\n$strings = [\"apple\", \"orange\", \"banana\"];\n$replacementChar = '*';\n$result = replaceVowels($strings, $replacementChar);\nprint_r($result);\n```"
  },
  {
    "task": "Transform a list of integers to their hexadecimal representations using map.",
    "code": "```php\n$integers = [10, 15, 255, 1024];\n$hexadecimals = array_map(fn($n) => dechex($n), $integers);\n```"
  },
  {
    "task": "Use map to apply a transformation matrix to a list of 2D vectors.",
    "code": "```php\nfunction applyTransformationMatrix($vectors, $matrix) {\n    return array_map(function($vector) use ($matrix) {\n        $x = $vector[0];\n        $y = $vector[1];\n        return [\n            $x * $matrix[0][0] + $y * $matrix[0][1],\n            $x * $matrix[1][0] + $y * $matrix[1][1]\n        ];\n    }, $vectors);\n}\n\n$vectors = [[1, 2], [3, 4], [5, 6]];\n$matrix = [[2, 0], [0, 2]];\n\n$result = applyTransformationMatrix($vectors, $matrix);\nprint_r($result);\n```"
  },
  {
    "task": "Convert a list of text strings to their phonetic alphabet equivalents using map.",
    "code": "```php\nfunction textToPhonetic($text) {\n    $phoneticAlphabet = [\n        'A' => 'Alpha', 'B' => 'Bravo', 'C' => 'Charlie', 'D' => 'Delta',\n        'E' => 'Echo', 'F' => 'Foxtrot', 'G' => 'Golf', 'H' => 'Hotel',\n        'I' => 'India', 'J' => 'Juliett', 'K' => 'Kilo', 'L' => 'Lima',\n        'M' => 'Mike', 'N' => 'November', 'O' => 'Oscar', 'P' => 'Papa',\n        'Q' => 'Quebec', 'R' => 'Romeo', 'S' => 'Sierra', 'T' => 'Tango',\n        'U' => 'Uniform', 'V' => 'Victor', 'W' => 'Whiskey', 'X' => 'X-ray',\n        'Y' => 'Yankee', 'Z' => 'Zulu'\n    ];\n    \n    $text = strtoupper($text);\n    $result = array_map(function($char) use ($phoneticAlphabet) {\n        return $phoneticAlphabet[$char] ?? $char;\n    }, str_split($text));\n    \n    return implode(' ', $result);\n}\n\n$texts = ['Hello', 'World'];\n$phoneticTexts = array_map('textToPhonetic', $texts);\n\nprint_r($phoneticTexts);\n```"
  },
  {
    "task": "Use map to determine if each word in a list is a palindrome, returning booleans.",
    "code": "```php\n$words = [\"level\", \"word\", \"radar\", \"hello\"];\n\n$isPalindrome = array_map(function($word) {\n    return $word === strrev($word);\n}, $words);\n\nprint_r($isPalindrome);\n```"
  },
  {
    "task": "Transform a list of dictionaries by renaming a specified key using a map function.",
    "code": "```php\nfunction renameKeyInList($list, $oldKey, $newKey) {\n    return array_map(function($dict) use ($oldKey, $newKey) {\n        if (array_key_exists($oldKey, $dict)) {\n            $dict[$newKey] = $dict[$oldKey];\n            unset($dict[$oldKey]);\n        }\n        return $dict;\n    }, $list);\n}\n\n$list = [\n    ['name' => 'Alice', 'age' => 25],\n    ['name' => 'Bob', 'age' => 30],\n];\n\n$transformed = renameKeyInList($list, 'name', 'first_name');\nprint_r($transformed);\n```"
  },
  {
    "task": "Use map to compute the logarithm of each number in a list.",
    "code": "```php\n$numbers = [1, 10, 100, 1000, 10000];\n$logarithms = array_map('log', $numbers);\nprint_r($logarithms);\n```"
  },
  {
    "task": "Convert a list of image file paths to grayscale versions using map.",
    "code": "```php\nfunction toGrayscale($imagePath) {\n    $image = imagecreatefromstring(file_get_contents($imagePath));\n    if ($image === false) {\n        return null;\n    }\n    imagefilter($image, IMG_FILTER_GRAYSCALE);\n    $outputPath = 'grayscale_' . basename($imagePath);\n    imagejpeg($image, $outputPath);\n    imagedestroy($image);\n    return $outputPath;\n}\n\n$imagePaths = ['image1.jpg', 'image2.png', 'image3.bmp'];\n$grayscaleImages = array_map('toGrayscale', $imagePaths);\n```"
  },
  {
    "task": "Use map to flatten a list of lists of strings into a single list of strings.",
    "code": "```php\n<?php\n\nfunction flattenLists($lists) {\n    return array_merge(...array_map(fn($list) => $list, $lists));\n}\n\n$nestedLists = [['apple', 'banana'], ['cherry', 'date'], ['elderberry', 'fig']];\n$flattenedList = flattenLists($nestedLists);\n\nprint_r($flattenedList);\n\n?>\n```"
  },
  {
    "task": "Transform a list of temperature readings to temperature anomalies using a map function.",
    "code": "```php\nfunction calculateAnomalies($temperatures, $average) {\n    return array_map(fn($temp) => $temp - $average, $temperatures);\n}\n\n$temperatures = [15.5, 17.0, 16.8, 14.2, 18.5];\n$averageTemperature = array_sum($temperatures) / count($temperatures);\n$anomalies = calculateAnomalies($temperatures, $averageTemperature);\n\nprint_r($anomalies);\n```"
  }
]