[
  {
    "task": "Create a function that initializes an array with the first ten prime numbers.",
    "code": "```php\nfunction initializePrimeArray() {\n    $primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29];\n    return $primes;\n}\n```"
  },
  {
    "task": "Write a program to reverse the elements of a given array.",
    "code": "```php\nfunction reverseArray($array) {\n    return array_reverse($array);\n}\n\n$originalArray = [1, 2, 3, 4, 5];\n$reversedArray = reverseArray($originalArray);\n\nprint_r($reversedArray);\n```"
  },
  {
    "task": "Implement an algorithm that finds the maximum value in an array of integers.",
    "code": "```php\nfunction findMaxValue($array) {\n    if (empty($array)) {\n        return null;\n    }\n    $maxValue = $array[0];\n    foreach ($array as $value) {\n        if ($value > $maxValue) {\n            $maxValue = $value;\n        }\n    }\n    return $maxValue;\n}\n```"
  },
  {
    "task": "Design a routine to rotate an array to the right by a given number of steps.",
    "code": "```php\nfunction rotateArrayRight($array, $steps) {\n    $length = count($array);\n    $steps = $steps % $length;\n    return array_merge(array_slice($array, -$steps), array_slice($array, 0, $length - $steps));\n}\n\n// Example usage:\n$array = [1, 2, 3, 4, 5];\n$steps = 2;\n$result = rotateArrayRight($array, $steps);\nprint_r($result);\n```"
  },
  {
    "task": "Develop a function to merge two sorted arrays into one sorted array.",
    "code": "```php\nfunction mergeSortedArrays($array1, $array2) {\n    $mergedArray = [];\n    $i = 0;\n    $j = 0;\n    $n1 = count($array1);\n    $n2 = count($array2);\n\n    while ($i < $n1 && $j < $n2) {\n        if ($array1[$i] < $array2[$j]) {\n            $mergedArray[] = $array1[$i];\n            $i++;\n        } else {\n            $mergedArray[] = $array2[$j];\n            $j++;\n        }\n    }\n\n    while ($i < $n1) {\n        $mergedArray[] = $array1[$i];\n        $i++;\n    }\n\n    while ($j < $n2) {\n        $mergedArray[] = $array2[$j];\n        $j++;\n    }\n\n    return $mergedArray;\n}\n```"
  },
  {
    "task": "Create a method to remove duplicate values from an array.",
    "code": "```php\nfunction removeDuplicates($array) {\n    return array_values(array_unique($array));\n}\n\n// Example usage\n$inputArray = [1, 2, 2, 3, 4, 4, 5];\n$result = removeDuplicates($inputArray);\nprint_r($result);\n```"
  },
  {
    "task": "Write a script to calculate the sum of all elements in an array.",
    "code": "```php\n<?php\n\n$numbers = [1, 2, 3, 4, 5];\n$sum = array_sum($numbers);\n\necho $sum;\n\n?>\n```"
  },
  {
    "task": "Construct a function that finds the second largest element in an array.",
    "code": "```php\nfunction findSecondLargest($arr) {\n    if (count($arr) < 2) {\n        return null;\n    }\n    $first = $second = PHP_INT_MIN;\n    foreach ($arr as $value) {\n        if ($value > $first) {\n            $second = $first;\n            $first = $value;\n        } elseif ($value > $second && $value != $first) {\n            $second = $value;\n        }\n    }\n    return $second == PHP_INT_MIN ? null : $second;\n}\n```"
  },
  {
    "task": "Design a program to check if an array contains a specific value.",
    "code": "```php\n<?php\n\nfunction containsValue($array, $value) {\n    return in_array($value, $array);\n}\n\n// Example usage:\n$array = [1, 2, 3, 4, 5];\n$valueToCheck = 3;\n\nif (containsValue($array, $valueToCheck)) {\n    echo \"Value found in the array.\";\n} else {\n    echo \"Value not found in the array.\";\n}\n\n?>\n```"
  },
  {
    "task": "Implement a function to sort an array of strings alphabetically.",
    "code": "```php\nfunction sortStringsAlphabetically($array) {\n    sort($array);\n    return $array;\n}\n\n// Example usage:\n$strings = [\"banana\", \"apple\", \"cherry\"];\n$sortedStrings = sortStringsAlphabetically($strings);\nprint_r($sortedStrings);\n```"
  },
  {
    "task": "Create a method to search for a value in an array using binary search.",
    "code": "```php\nfunction binarySearch(array $arr, $x) {\n    $low = 0;\n    $high = count($arr) - 1;\n    \n    while ($low <= $high) {\n        $mid = (int)(($low + $high) / 2);\n        \n        if ($arr[$mid] == $x) {\n            return $mid;\n        }\n        \n        if ($arr[$mid] < $x) {\n            $low = $mid + 1;\n        } else {\n            $high = $mid - 1;\n        }\n    }\n    \n    return -1; // Value not found\n}\n\n// Example usage\n$sortedArray = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n$valueToFind = 5;\n$result = binarySearch($sortedArray, $valueToFind);\necho \"Index of the value is: \" . $result;\n```"
  },
  {
    "task": "Write a routine to calculate the average of numbers in an array.",
    "code": "```php\nfunction calculateAverage($numbers) {\n    if (empty($numbers)) {\n        return 0;\n    }\n    $sum = array_sum($numbers);\n    $count = count($numbers);\n    return $sum / $count;\n}\n\n$numbers = [10, 20, 30, 40, 50];\n$average = calculateAverage($numbers);\necho $average;\n```"
  },
  {
    "task": "Develop a function to find the intersection of two arrays.",
    "code": "```php\nfunction arrayIntersection($array1, $array2) {\n    return array_values(array_intersect($array1, $array2));\n}\n\n// Example usage:\n$array1 = [1, 2, 3, 4, 5];\n$array2 = [4, 5, 6, 7, 8];\n$result = arrayIntersection($array1, $array2);\n\nprint_r($result); // Outputs: Array ( [0] => 4 [1] => 5 )\n```"
  },
  {
    "task": "Implement a method to find the union of two arrays without duplicates.",
    "code": "```php\nfunction arrayUnion($array1, $array2) {\n    $union = array_merge($array1, $array2);\n    $uniqueUnion = array_unique($union);\n    return $uniqueUnion;\n}\n\n// Example usage:\n$array1 = [1, 2, 3, 4];\n$array2 = [3, 4, 5, 6];\n$result = arrayUnion($array1, $array2);\nprint_r($result);\n```"
  },
  {
    "task": "Create a program that shifts all zeroes in an array to the end.",
    "code": "```php\nfunction shiftZeroesToEnd($arr) {\n    $nonZeroes = [];\n    $zeroCount = 0;\n\n    foreach ($arr as $value) {\n        if ($value !== 0) {\n            $nonZeroes[] = $value;\n        } else {\n            $zeroCount++;\n        }\n    }\n\n    while ($zeroCount > 0) {\n        $nonZeroes[] = 0;\n        $zeroCount--;\n    }\n\n    return $nonZeroes;\n}\n\n// Example usage:\n$array = [0, 1, 0, 3, 12];\n$result = shiftZeroesToEnd($array);\nprint_r($result);\n```"
  },
  {
    "task": "Write a function to split an array into two parts at a given index.",
    "code": "```php\nfunction splitArrayAtIndex($array, $index) {\n    $firstPart = array_slice($array, 0, $index);\n    $secondPart = array_slice($array, $index);\n    return [$firstPart, $secondPart];\n}\n```"
  },
  {
    "task": "Design a script to find all pairs in an array that sum up to a specific target.",
    "code": "```php\nfunction findPairsWithSum($arr, $target) {\n    $pairs = [];\n    $seen = [];\n\n    foreach ($arr as $number) {\n        $complement = $target - $number;\n        if (isset($seen[$complement])) {\n            $pairs[] = [$complement, $number];\n        }\n        $seen[$number] = true;\n    }\n\n    return $pairs;\n}\n\n// Example usage:\n$array = [1, 2, 3, 4, 5];\n$targetSum = 5;\n$result = findPairsWithSum($array, $targetSum);\n\nforeach ($result as $pair) {\n    echo \"(\" . $pair[0] . \", \" . $pair[1] . \")\\n\";\n}\n```"
  },
  {
    "task": "Construct a method to remove all occurrences of a specific value from an array.",
    "code": "```php\nfunction removeValueFromArray($array, $value) {\n    return array_values(array_filter($array, function($element) use ($value) {\n        return $element !== $value;\n    }));\n}\n```"
  },
  {
    "task": "Write a function to find the longest increasing subsequence in an array.",
    "code": "```php\nfunction longestIncreasingSubsequence($arr) {\n    $n = count($arr);\n    if ($n == 0) return [];\n    \n    $lengths = array_fill(0, $n, 1);\n    $previous = array_fill(0, $n, -1);\n    \n    $maxLength = 0;\n    $maxIndex = 0;\n    \n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 0; $j < $i; $j++) {\n            if ($arr[$i] > $arr[$j] && $lengths[$i] < $lengths[$j] + 1) {\n                $lengths[$i] = $lengths[$j] + 1;\n                $previous[$i] = $j;\n            }\n        }\n        if ($lengths[$i] > $maxLength) {\n            $maxLength = $lengths[$i];\n            $maxIndex = $i;\n        }\n    }\n    \n    $lis = [];\n    for ($i = $maxIndex; $i >= 0; $i = $previous[$i]) {\n        array_unshift($lis, $arr[$i]);\n        if ($previous[$i] == -1) break;\n    }\n    \n    return $lis;\n}\n\n// Example usage\n$array = [10, 9, 2, 5, 3, 7, 101, 18];\n$result = longestIncreasingSubsequence($array);\nprint_r($result);\n```"
  },
  {
    "task": "Develop an algorithm to find the missing number in a sequential array.",
    "code": "```php\nfunction findMissingNumber($array) {\n    $n = count($array) + 1;\n    $totalSum = ($n * ($n + 1)) / 2;\n    $arraySum = array_sum($array);\n    return $totalSum - $arraySum;\n}\n\n$sequentialArray = [1, 2, 3, 4, 6];\n$missingNumber = findMissingNumber($sequentialArray);\necho \"The missing number is: \" . $missingNumber;\n```"
  },
  {
    "task": "Create a program to find the common elements between two arrays.",
    "code": "```php\n<?php\n$array1 = [1, 2, 3, 4, 5];\n$array2 = [3, 4, 5, 6, 7];\n\n$commonElements = array_intersect($array1, $array2);\n\nprint_r($commonElements);\n?>\n```"
  },
  {
    "task": "Implement a function to move all negative numbers to the beginning of an array.",
    "code": "```php\nfunction moveNegativesToFront($arr) {\n    $negatives = [];\n    $nonNegatives = [];\n    \n    foreach ($arr as $value) {\n        if ($value < 0) {\n            $negatives[] = $value;\n        } else {\n            $nonNegatives[] = $value;\n        }\n    }\n    \n    return array_merge($negatives, $nonNegatives);\n}\n\n// Example usage\n$array = [1, -2, 3, -4, 5, -6];\n$result = moveNegativesToFront($array);\nprint_r($result);\n```"
  },
  {
    "task": "Write a method to check if an array is a palindrome.",
    "code": "```php\nfunction isPalindromeArray($arr) {\n    $reversedArray = array_reverse($arr);\n    return $arr === $reversedArray;\n}\n```"
  },
  {
    "task": "Design a routine to create a new array that is the element-wise sum of two input arrays.",
    "code": "```php\nfunction elementWiseSum($array1, $array2) {\n    $result = [];\n    $length = min(count($array1), count($array2));\n    for ($i = 0; $i < $length; $i++) {\n        $result[] = $array1[$i] + $array2[$i];\n    }\n    return $result;\n}\n\n// Example usage:\n$array1 = [1, 2, 3];\n$array2 = [4, 5, 6];\n$sumArray = elementWiseSum($array1, $array2);\nprint_r($sumArray);\n```"
  },
  {
    "task": "Create a function to find the product of all elements in an array, excluding the current element.",
    "code": "```php\nfunction productOfArrayExcludingCurrent($array) {\n    $n = count($array);\n    $result = array_fill(0, $n, 1);\n\n    $leftProduct = 1;\n    for ($i = 0; $i < $n; $i++) {\n        $result[$i] = $leftProduct;\n        $leftProduct *= $array[$i];\n    }\n\n    $rightProduct = 1;\n    for ($i = $n - 1; $i >= 0; $i--) {\n        $result[$i] *= $rightProduct;\n        $rightProduct *= $array[$i];\n    }\n\n    return $result;\n}\n```"
  },
  {
    "task": "Develop a script to remove elements from an array that are smaller than a given threshold.",
    "code": "```php\n<?php\n\nfunction removeSmallerThanThreshold($array, $threshold) {\n    return array_filter($array, function($value) use ($threshold) {\n        return $value >= $threshold;\n    });\n}\n\n// Example usage:\n$array = [1, 2, 3, 4, 5];\n$threshold = 3;\n$result = removeSmallerThanThreshold($array, $threshold);\nprint_r($result);\n\n?>\n```"
  },
  {
    "task": "Implement a method to clone an array without using built-in functions.",
    "code": "```php\nfunction cloneArray($array) {\n    $clonedArray = [];\n    foreach ($array as $element) {\n        $clonedArray[] = $element;\n    }\n    return $clonedArray;\n}\n```"
  },
  {
    "task": "Create a program that rotates a 2D array (matrix) 90 degrees clockwise.",
    "code": "```php\nfunction rotateMatrix90DegreesClockwise($matrix) {\n    $rows = count($matrix);\n    $cols = count($matrix[0]);\n    $rotatedMatrix = [];\n\n    for ($i = 0; $i < $cols; $i++) {\n        $newRow = [];\n        for ($j = $rows - 1; $j >= 0; $j--) {\n            $newRow[] = $matrix[$j][$i];\n        }\n        $rotatedMatrix[] = $newRow;\n    }\n\n    return $rotatedMatrix;\n}\n\n// Example usage:\n$matrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\n\n$rotated = rotateMatrix90DegreesClockwise($matrix);\nprint_r($rotated);\n```"
  },
  {
    "task": "Write a function to find the kth smallest element in an unsorted array.",
    "code": "```php\nfunction findKthSmallestElement($arr, $k) {\n    sort($arr);\n    return $arr[$k - 1];\n}\n\n// Example Usage:\n$array = [5, 3, 1, 2, 4];\n$k = 3;\necho findKthSmallestElement($array, $k); // Outputs: 3\n```"
  },
  {
    "task": "Design a routine to partition an array into even and odd numbers.",
    "code": "```php\nfunction partitionArray($arr) {\n    $even = [];\n    $odd = [];\n    \n    foreach ($arr as $number) {\n        if ($number % 2 === 0) {\n            $even[] = $number;\n        } else {\n            $odd[] = $number;\n        }\n    }\n\n    return ['even' => $even, 'odd' => $odd];\n}\n\n// Example usage\n$array = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n$result = partitionArray($array);\nprint_r($result);\n```"
  },
  {
    "task": "Create a method to merge overlapping intervals in an array.",
    "code": "```php\nfunction mergeIntervals($intervals) {\n    if (empty($intervals)) return [];\n    \n    usort($intervals, function($a, $b) {\n        return $a[0] - $b[0];\n    });\n    \n    $merged = [];\n    $currentInterval = $intervals[0];\n    \n    foreach ($intervals as $interval) {\n        if ($interval[0] <= $currentInterval[1]) {\n            $currentInterval[1] = max($currentInterval[1], $interval[1]);\n        } else {\n            $merged[] = $currentInterval;\n            $currentInterval = $interval;\n        }\n    }\n    \n    $merged[] = $currentInterval;\n    \n    return $merged;\n}\n\n// Example usage\n$intervals = [[1, 3], [2, 6], [8, 10], [15, 18]];\n$result = mergeIntervals($intervals);\nprint_r($result);\n```"
  },
  {
    "task": "Develop a function to count the frequency of each unique element in an array.",
    "code": "```php\nfunction countFrequencies($array) {\n    $frequency = [];\n    foreach ($array as $element) {\n        if (array_key_exists($element, $frequency)) {\n            $frequency[$element]++;\n        } else {\n            $frequency[$element] = 1;\n        }\n    }\n    return $frequency;\n}\n```"
  },
  {
    "task": "Write a program to generate all possible subsets of an array.",
    "code": "```php\nfunction generateSubsets($array) {\n    $results = [];\n    $total = 1 << count($array);\n    \n    for ($i = 0; $i < $total; $i++) {\n        $subset = [];\n        for ($j = 0; $j < count($array); $j++) {\n            if ($i & (1 << $j)) {\n                $subset[] = $array[$j];\n            }\n        }\n        $results[] = $subset;\n    }\n    \n    return $results;\n}\n\n$array = [1, 2, 3];\n$subsets = generateSubsets($array);\nprint_r($subsets);\n```"
  },
  {
    "task": "Implement a routine to cyclically permute the elements of an array.",
    "code": "```php\nfunction cyclicPermute(array &$arr) {\n    if (empty($arr)) return;\n    $lastElement = array_pop($arr);\n    array_unshift($arr, $lastElement);\n}\n\n// Example usage\n$array = [1, 2, 3, 4, 5];\ncyclicPermute($array);\nprint_r($array);\n```"
  },
  {
    "task": "Create a function that checks if two arrays are equal regardless of element order.",
    "code": "```php\nfunction arraysAreEqual($array1, $array2) {\n    sort($array1);\n    sort($array2);\n    return $array1 === $array2;\n}\n```"
  },
  {
    "task": "Design a script to initialize an array with random integers within a specified range.",
    "code": "```php\n<?php\n\nfunction initializeRandomArray($size, $min, $max) {\n    $array = [];\n    for ($i = 0; $i < $size; $i++) {\n        $array[] = rand($min, $max);\n    }\n    return $array;\n}\n\n$randomArray = initializeRandomArray(10, 1, 100);\nprint_r($randomArray);\n\n?>\n```"
  },
  {
    "task": "Write a method to convert an array of integers to a single concatenated number.",
    "code": "```php\nfunction concatenateArrayToNumber($array) {\n    return intval(implode(\"\", $array));\n}\n\n// Example usage:\n$integers = [1, 2, 3, 4];\n$result = concatenateArrayToNumber($integers);\necho $result; // Outputs: 1234\n```"
  },
  {
    "task": "Develop a function to find the median value of an unsorted array.",
    "code": "```php\nfunction findMedian($arr) {\n    sort($arr);\n    $count = count($arr);\n    $middle = floor($count / 2);\n\n    if ($count % 2) {\n        return $arr[$middle];\n    } else {\n        return ($arr[$middle - 1] + $arr[$middle]) / 2;\n    }\n}\n\n$array = [3, 1, 4, 2, 5];\n$median = findMedian($array);\necho $median;\n```"
  },
  {
    "task": "Create a routine to determine if an array is sorted in ascending order.",
    "code": "```php\nfunction isArraySortedAscending($array) {\n    for ($i = 0; $i < count($array) - 1; $i++) {\n        if ($array[$i] > $array[$i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// Example usage:\n$array = [1, 2, 3, 4, 5];\n$result = isArraySortedAscending($array);\necho $result ? 'Array is sorted in ascending order' : 'Array is not sorted';\n```"
  },
  {
    "task": "Implement a method to find the longest contiguous subarray with equal number of 0s and 1s.",
    "code": "```php\nfunction findMaxLength($nums) {\n    $count = 0;\n    $maxLength = 0;\n    $countMap = [0 => -1];\n\n    foreach ($nums as $i => $num) {\n        $count += ($num == 1) ? 1 : -1;\n\n        if (isset($countMap[$count])) {\n            $maxLength = max($maxLength, $i - $countMap[$count]);\n        } else {\n            $countMap[$count] = $i;\n        }\n    }\n\n    return $maxLength;\n}\n```"
  },
  {
    "task": "Write a function to interleave two arrays of equal length.",
    "code": "```php\nfunction interleaveArrays($array1, $array2) {\n    $result = [];\n    for ($i = 0; $i < count($array1); $i++) {\n        $result[] = $array1[$i];\n        $result[] = $array2[$i];\n    }\n    return $result;\n}\n```"
  },
  {
    "task": "Design a program to replace each element in an array with the next greatest element.",
    "code": "```php\nfunction replaceWithNextGreatest(&$arr) {\n    $n = count($arr);\n    $max = -1;\n\n    for ($i = $n - 1; $i >= 0; $i--) {\n        $newMax = max($max, $arr[$i]);\n        $arr[$i] = $max;\n        $max = $newMax;\n    }\n}\n\n$array = [16, 17, 4, 3, 5, 2];\nreplaceWithNextGreatest($array);\nprint_r($array);\n```"
  },
  {
    "task": "Create a function to calculate the dot product of two numeric arrays.",
    "code": "```php\nfunction dotProduct(array $a, array $b) {\n    if (count($a) !== count($b)) {\n        throw new InvalidArgumentException('Arrays must be of the same length.');\n    }\n    $product = 0;\n    for ($i = 0; $i < count($a); $i++) {\n        $product += $a[$i] * $b[$i];\n    }\n    return $product;\n}\n```"
  },
  {
    "task": "Develop a script to find the first recurring element in an array.",
    "code": "```php\nfunction findFirstRecurringElement($array) {\n    $seen = [];\n    foreach ($array as $element) {\n        if (isset($seen[$element])) {\n            return $element;\n        }\n        $seen[$element] = true;\n    }\n    return null;\n}\n\n// Example usage\n$array = [2, 5, 1, 2, 3, 5, 1, 2, 4];\necho findFirstRecurringElement($array);\n```"
  },
  {
    "task": "Write a method to check if an array is a subset of another array.",
    "code": "```php\nfunction isSubset($array1, $array2) {\n    return empty(array_diff($array1, $array2));\n}\n\n// Example usage\n$array1 = [1, 2, 3];\n$array2 = [1, 2, 3, 4, 5];\n$result = isSubset($array1, $array2);\nvar_dump($result); // Outputs: bool(true)\n```"
  },
  {
    "task": "Implement a function to add a specific value to each element in an array.",
    "code": "```php\nfunction addValueToArray($array, $value) {\n    foreach ($array as &$element) {\n        $element += $value;\n    }\n    return $array;\n}\n\n// Example usage:\n$numbers = [1, 2, 3, 4, 5];\n$newNumbers = addValueToArray($numbers, 10);\nprint_r($newNumbers);\n```"
  },
  {
    "task": "Create a program that finds the largest product of three numbers in an array.",
    "code": "```php\n<?php\n\nfunction largestProductOfThree($arr) {\n    if (count($arr) < 3) {\n        throw new Exception(\"Array must contain at least three numbers.\");\n    }\n    \n    sort($arr);\n    $n = count($arr);\n    \n    $product1 = $arr[$n-1] * $arr[$n-2] * $arr[$n-3];\n    $product2 = $arr[0] * $arr[1] * $arr[$n-1];\n    \n    return max($product1, $product2);\n}\n\n// Example usage:\n$numbers = [10, 3, 5, 6, 20];\necho largestProductOfThree($numbers);\n\n?>\n```"
  },
  {
    "task": "Design a routine to find all unique permutations of an array.",
    "code": "```php\nfunction permute($nums) {\n    $result = [];\n    sort($nums);\n    backtrack($nums, [], $result, array_fill(0, count($nums), false));\n    return $result;\n}\n\nfunction backtrack($nums, $path, &$result, &$used) {\n    if (count($path) == count($nums)) {\n        $result[] = $path;\n        return;\n    }\n    \n    for ($i = 0; $i < count($nums); $i++) {\n        if ($used[$i] || ($i > 0 && $nums[$i] == $nums[$i - 1] && !$used[$i - 1])) {\n            continue;\n        }\n        \n        $used[$i] = true;\n        $path[] = $nums[$i];\n        backtrack($nums, $path, $result, $used);\n        array_pop($path);\n        $used[$i] = false;\n    }\n}\n\n// Example usage:\n$array = [1, 2, 2];\n$uniquePermutations = permute($array);\nprint_r($uniquePermutations);\n```"
  },
  {
    "task": "Write a function to transpose a square matrix represented as a 2D array.",
    "code": "```php\nfunction transposeMatrix($matrix) {\n    $size = count($matrix);\n    $transposed = array_fill(0, $size, array_fill(0, $size, 0));\n    for ($i = 0; $i < $size; $i++) {\n        for ($j = 0; $j < $size; $j++) {\n            $transposed[$j][$i] = $matrix[$i][$j];\n        }\n    }\n    return $transposed;\n}\n```"
  },
  {
    "task": "Develop a method to find the longest common prefix in an array of strings.",
    "code": "```php\nfunction longestCommonPrefix($strs) {\n    if (empty($strs)) return \"\";\n    \n    $prefix = $strs[0];\n    for ($i = 1; $i < count($strs); $i++) {\n        while (strpos($strs[$i], $prefix) !== 0) {\n            $prefix = substr($prefix, 0, -1);\n            if ($prefix === \"\") return \"\";\n        }\n    }\n    \n    return $prefix;\n}\n\n// Example usage\n$strings = [\"flower\", \"flow\", \"flight\"];\necho longestCommonPrefix($strings); // Output: \"fl\"\n```"
  },
  {
    "task": "Implement a function to flatten a multi-dimensional array into a single array.",
    "code": "```php\nfunction flattenArray($array) {\n    $result = [];\n    array_walk_recursive($array, function($value) use (&$result) {\n        $result[] = $value;\n    });\n    return $result;\n}\n\n// Example usage:\n$multiDimensionalArray = [1, [2, 3], [4, [5, 6]]];\n$flattenedArray = flattenArray($multiDimensionalArray);\nprint_r($flattenedArray);\n```"
  },
  {
    "task": "Create a script to shift elements of an array to the left by a given number of positions.",
    "code": "```php\nfunction shiftArrayLeft($array, $positions) {\n    $length = count($array);\n    $positions = $positions % $length;\n    $shiftedArray = array_slice($array, $positions);\n    $shiftedArray = array_merge($shiftedArray, array_slice($array, 0, $positions));\n    return $shiftedArray;\n}\n\n$array = [1, 2, 3, 4, 5];\n$positions = 2;\n\n$result = shiftArrayLeft($array, $positions);\nprint_r($result);\n```"
  },
  {
    "task": "Write a routine to sort an array of objects based on a specific property.",
    "code": "```php\nfunction sortObjectsByProperty(array $objects, string $property): array {\n    usort($objects, function($a, $b) use ($property) {\n        return $a->$property <=> $b->$property;\n    });\n    return $objects;\n}\n\n// Example usage\n$objects = [\n    (object) ['name' => 'Alice', 'age' => 30],\n    (object) ['name' => 'Bob', 'age' => 25],\n    (object) ['name' => 'Charlie', 'age' => 35],\n];\n\n$sortedObjects = sortObjectsByProperty($objects, 'age');\nprint_r($sortedObjects);\n```"
  },
  {
    "task": "Design a program to find the smallest missing positive integer in an array.",
    "code": "```php\nfunction findSmallestMissingPositive($arr) {\n    $n = count($arr);\n    for ($i = 0; $i < $n; $i++) {\n        while ($arr[$i] > 0 && $arr[$i] <= $n && $arr[$arr[$i] - 1] != $arr[$i]) {\n            $temp = $arr[$arr[$i] - 1];\n            $arr[$arr[$i] - 1] = $arr[$i];\n            $arr[$i] = $temp;\n        }\n    }\n    \n    for ($i = 0; $i < $n; $i++) {\n        if ($arr[$i] != $i + 1) {\n            return $i + 1;\n        }\n    }\n    \n    return $n + 1;\n}\n\n// Example usage:\n$arr = [3, 4, -1, 1];\necho findSmallestMissingPositive($arr); // Output: 2\n```"
  },
  {
    "task": "Create a function to calculate the cumulative sum of an array.",
    "code": "```php\nfunction cumulativeSum(array $numbers): array {\n    $cumulative = [];\n    $sum = 0;\n    foreach ($numbers as $number) {\n        $sum += $number;\n        $cumulative[] = $sum;\n    }\n    return $cumulative;\n}\n```"
  },
  {
    "task": "Develop a function to remove consecutive duplicate elements in an array.",
    "code": "```php\nfunction removeConsecutiveDuplicates($array) {\n    $result = [];\n    $lastElement = null;\n    foreach ($array as $element) {\n        if ($element !== $lastElement) {\n            $result[] = $element;\n            $lastElement = $element;\n        }\n    }\n    return $result;\n}\n\n// Example usage:\n$array = [1, 2, 2, 3, 3, 3, 4, 5, 5, 6];\n$result = removeConsecutiveDuplicates($array);\nprint_r($result);\n```"
  },
  {
    "task": "Implement a method to find the majority element in an array, if any.",
    "code": "```php\nfunction findMajorityElement($array) {\n    $countMap = [];\n    $n = count($array);\n\n    foreach ($array as $element) {\n        if (isset($countMap[$element])) {\n            $countMap[$element]++;\n        } else {\n            $countMap[$element] = 1;\n        }\n    }\n\n    foreach ($countMap as $element => $count) {\n        if ($count > $n / 2) {\n            return $element;\n        }\n    }\n\n    return null;\n}\n\n// Example usage\n$array = [3, 3, 4, 2, 4, 4, 2, 4, 4];\necho findMajorityElement($array);\n```"
  },
  {
    "task": "Write a script to split an array into chunks of a given size.",
    "code": "```php\nfunction splitArrayIntoChunks($array, $chunkSize) {\n    return array_chunk($array, $chunkSize);\n}\n\n$array = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n$chunkSize = 3;\n$result = splitArrayIntoChunks($array, $chunkSize);\nprint_r($result);\n```"
  },
  {
    "task": "Create a program to calculate the difference between the largest and smallest values in an array.",
    "code": "```php\n<?php\n\nfunction calculateDifference($array) {\n    if (empty($array)) {\n        return 0;\n    }\n    $maxValue = max($array);\n    $minValue = min($array);\n    return $maxValue - $minValue;\n}\n\n$numbers = [5, 3, 9, 1, 7];\n$difference = calculateDifference($numbers);\necho $difference;\n\n?>\n```"
  },
  {
    "task": "Design a routine to find the starting index of a target subarray in a larger array.",
    "code": "```php\nfunction findSubarrayIndex($largerArray, $targetSubarray) {\n    $targetLength = count($targetSubarray);\n    $largerLength = count($largerArray);\n\n    for ($i = 0; $i <= $largerLength - $targetLength; $i++) {\n        $match = true;\n        for ($j = 0; $j < $targetLength; $j++) {\n            if ($largerArray[$i + $j] !== $targetSubarray[$j]) {\n                $match = false;\n                break;\n            }\n        }\n        if ($match) {\n            return $i;\n        }\n    }\n\n    return -1; // Return -1 if no match is found\n}\n```"
  },
  {
    "task": "Write a function to compress an array by eliminating zero values.",
    "code": "```php\nfunction compressArray($array) {\n    return array_values(array_filter($array, function($value) {\n        return $value !== 0;\n    }));\n}\n```"
  },
  {
    "task": "Develop a method to determine if an array can be split into two parts with equal sums.",
    "code": "```php\nfunction canBeSplitIntoEqualSums($arr) {\n    $totalSum = array_sum($arr);\n    if ($totalSum % 2 !== 0) {\n        return false;\n    }\n\n    $target = $totalSum / 2;\n    $n = count($arr);\n    $dp = array_fill(0, $n + 1, array_fill(0, $target + 1, false));\n    $dp[0][0] = true;\n\n    for ($i = 1; $i <= $n; $i++) {\n        for ($j = 0; $j <= $target; $j++) {\n            if ($j >= $arr[$i - 1]) {\n                $dp[$i][$j] = $dp[$i - 1][$j] || $dp[$i - 1][$j - $arr[$i - 1]];\n            } else {\n                $dp[$i][$j] = $dp[$i - 1][$j];\n            }\n        }\n    }\n\n    return $dp[$n][$target];\n}\n\n// Example usage\n$arr = [1, 5, 11, 5];\n$result = canBeSplitIntoEqualSums($arr);\necho $result ? 'True' : 'False';\n```"
  },
  {
    "task": "Implement a function to round each element in an array to the nearest integer.",
    "code": "```php\nfunction roundArrayElements($array) {\n    return array_map('round', $array);\n}\n\n// Example usage:\n$numbers = [1.2, 2.5, 3.7, 4.3];\n$roundedNumbers = roundArrayElements($numbers);\nprint_r($roundedNumbers);\n```"
  },
  {
    "task": "Create a routine to generate an array of the Fibonacci sequence up to a given number.",
    "code": "```php\nfunction generateFibonacci($n) {\n    $fibonacci = [];\n    $a = 0;\n    $b = 1;\n    while ($a <= $n) {\n        $fibonacci[] = $a;\n        $next = $a + $b;\n        $a = $b;\n        $b = $next;\n    }\n    return $fibonacci;\n}\n\n$n = 100; // Example limit\n$fibonacciSequence = generateFibonacci($n);\nprint_r($fibonacciSequence);\n```"
  },
  {
    "task": "Write a program to find the longest repeating sequence in an array.",
    "code": "```php\nfunction findLongestRepeatingSequence($arr) {\n    $maxSeqLength = 0;\n    $maxSeq = [];\n    $currentSeq = [];\n    $arrLength = count($arr);\n\n    for ($i = 0; $i < $arrLength; $i++) {\n        $currentSeq = [];\n        for ($j = $i; $j < $arrLength; $j++) {\n            $currentSeq[] = $arr[$j];\n            $currentSeqLength = count($currentSeq);\n            $subArray = array_slice($arr, $j + 1, $currentSeqLength);\n\n            if ($currentSeqLength > $maxSeqLength && $currentSeq == $subArray) {\n                $maxSeqLength = $currentSeqLength;\n                $maxSeq = $currentSeq;\n            }\n        }\n    }\n\n    return $maxSeq;\n}\n\n// Example usage\n$arr = [1, 2, 1, 2, 3, 1, 2];\n$longestRepeatingSeq = findLongestRepeatingSequence($arr);\nprint_r($longestRepeatingSeq);\n```"
  },
  {
    "task": "Design a function to multiply each element of an array by its index.",
    "code": "```php\nfunction multiplyElementsByIndex($array) {\n    foreach ($array as $index => $value) {\n        $array[$index] = $value * $index;\n    }\n    return $array;\n}\n```"
  },
  {
    "task": "Create a method to convert an array of characters into a single string.",
    "code": "```php\nfunction arrayToString($array) {\n    return implode('', $array);\n}\n\n// Example usage\n$chars = ['H', 'e', 'l', 'l', 'o'];\n$result = arrayToString($chars);\necho $result; // Outputs: Hello\n```"
  },
  {
    "task": "Develop a function to fill an array with a specified value.",
    "code": "```php\nfunction fillArrayWithValues($length, $value) {\n    return array_fill(0, $length, $value);\n}\n\n// Example usage:\n$result = fillArrayWithValues(5, 'exampleValue');\nprint_r($result);\n```"
  },
  {
    "task": "Implement a routine to determine if an array has any duplicate elements.",
    "code": "```php\nfunction hasDuplicates(array $arr): bool {\n    return count($arr) !== count(array_unique($arr));\n}\n\n// Example usage:\n$example = [1, 2, 3, 4, 5, 1];\nvar_dump(hasDuplicates($example)); // bool(true)\n```"
  },
  {
    "task": "Write a script to reverse the order of words in an array of strings.",
    "code": "```php\n<?php\nfunction reverseWordsInArray($array) {\n    return array_reverse($array);\n}\n\n$words = [\"Hello\", \"world\", \"this\", \"is\", \"a\", \"test\"];\n$reversedWords = reverseWordsInArray($words);\n\nprint_r($reversedWords);\n?>\n```"
  },
  {
    "task": "Create a function to calculate the total number of distinct elements in an array.",
    "code": "```php\nfunction countDistinctElements(array $arr): int {\n    $distinctElements = [];\n    \n    foreach ($arr as $element) {\n        $distinctElements[$element] = true;\n    }\n    \n    return count($distinctElements);\n}\n\n// Example usage:\n$array = [1, 2, 2, 3, 4, 4, 5];\necho countDistinctElements($array); // Output: 5\n```"
  },
  {
    "task": "Design a program to find the largest gap between consecutive elements in a sorted array.",
    "code": "```php\n<?php\n\nfunction findLargestGap($arr) {\n    if (count($arr) < 2) return 0;\n    sort($arr);\n    $maxGap = 0;\n    for ($i = 1; $i < count($arr); $i++) {\n        $gap = $arr[$i] - $arr[$i - 1];\n        if ($gap > $maxGap) {\n            $maxGap = $gap;\n        }\n    }\n    return $maxGap;\n}\n\n// Example usage\n$sortedArray = [1, 3, 7, 8, 10];\necho findLargestGap($sortedArray); // Output: 3\n\n?>\n```"
  },
  {
    "task": "Write a routine to perform element-wise multiplication of two arrays.",
    "code": "```php\nfunction elementWiseMultiplication($array1, $array2) {\n    $result = [];\n    $length = min(count($array1), count($array2));\n    for ($i = 0; $i < $length; $i++) {\n        $result[] = $array1[$i] * $array2[$i];\n    }\n    return $result;\n}\n\n$array1 = [1, 2, 3];\n$array2 = [4, 5, 6];\n$result = elementWiseMultiplication($array1, $array2);\nprint_r($result);\n```"
  },
  {
    "task": "Develop a method to split a string into an array of words.",
    "code": "```php\nfunction splitStringIntoWords($string) {\n    return preg_split('/\\s+/', trim($string));\n}\n```"
  },
  {
    "task": "Implement a function to find the longest contiguous subarray with a sum less than a target.",
    "code": "```php\nfunction longestSubarrayWithSumLessThanTarget($arr, $target) {\n    $maxLength = 0;\n    $currentSum = 0;\n    $start = 0;\n\n    for ($end = 0; $end < count($arr); $end++) {\n        $currentSum += $arr[$end];\n\n        while ($currentSum >= $target && $start <= $end) {\n            $currentSum -= $arr[$start];\n            $start++;\n        }\n\n        $maxLength = max($maxLength, $end - $start + 1);\n    }\n\n    return $maxLength;\n}\n```"
  },
  {
    "task": "Create a script to rotate a 2D array (matrix) 180 degrees.",
    "code": "```php\nfunction rotateMatrix180($matrix) {\n    $rows = count($matrix);\n    $cols = count($matrix[0]);\n    $rotated = array();\n\n    for ($i = $rows - 1; $i >= 0; $i--) {\n        $newRow = array();\n        for ($j = $cols - 1; $j >= 0; $j--) {\n            $newRow[] = $matrix[$i][$j];\n        }\n        $rotated[] = $newRow;\n    }\n\n    return $rotated;\n}\n\n// Example usage:\n$matrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\n\n$result = rotateMatrix180($matrix);\nprint_r($result);\n```"
  },
  {
    "task": "Write a program to convert an array of binary digits to its decimal equivalent.",
    "code": "```php\nfunction binaryArrayToDecimal($binaryArray) {\n    $decimal = 0;\n    $length = count($binaryArray);\n    for ($i = 0; $i < $length; $i++) {\n        $decimal += $binaryArray[$length - $i - 1] * pow(2, $i);\n    }\n    return $decimal;\n}\n\n$binaryArray = [1, 0, 1, 1];\n$decimal = binaryArrayToDecimal($binaryArray);\necho $decimal;\n```"
  },
  {
    "task": "Design a function to return a new array with elements squared from the input array.",
    "code": "```php\nfunction squareElements($inputArray) {\n    return array_map(function($element) {\n        return $element * $element;\n    }, $inputArray);\n}\n```"
  },
  {
    "task": "Create a method to check if all elements in an array are unique.",
    "code": "```php\nfunction areAllElementsUnique($array) {\n    return count($array) === count(array_unique($array));\n}\n```"
  },
  {
    "task": "Develop a routine to find the indices of all occurrences of a specific element in an array.",
    "code": "```php\nfunction findIndicesOfElement($array, $element) {\n    $indices = [];\n    foreach ($array as $index => $value) {\n        if ($value === $element) {\n            $indices[] = $index;\n        }\n    }\n    return $indices;\n}\n\n// Example usage:\n$array = [1, 2, 3, 2, 4, 2];\n$element = 2;\n$result = findIndicesOfElement($array, $element);\nprint_r($result); // Output: [1, 3, 5]\n```"
  },
  {
    "task": "Implement a function to merge multiple arrays into one.",
    "code": "```php\nfunction mergeArrays(...$arrays) {\n    return array_merge(...$arrays);\n}\n\n// Example usage:\n$array1 = [1, 2, 3];\n$array2 = [4, 5, 6];\n$array3 = [7, 8, 9];\n$result = mergeArrays($array1, $array2, $array3);\nprint_r($result);\n```"
  },
  {
    "task": "Write a script to convert an array of integers into a formatted string.",
    "code": "```php\n<?php\n$integers = [1, 2, 3, 4, 5];\n$formattedString = implode(', ', $integers);\necho $formattedString;\n?>\n```"
  },
  {
    "task": "Create a program to find the largest sum of any contiguous subarray.",
    "code": "```php\nfunction maxSubArraySum($arr) {\n    $maxSoFar = $arr[0];\n    $currentMax = $arr[0];\n    \n    for ($i = 1; $i < count($arr); $i++) {\n        $currentMax = max($arr[$i], $currentMax + $arr[$i]);\n        $maxSoFar = max($maxSoFar, $currentMax);\n    }\n    \n    return $maxSoFar;\n}\n\n$array = [-2, 1, -3, 4, -1, 2, 1, -5, 4];\necho maxSubArraySum($array);\n```"
  },
  {
    "task": "Design a function to compare two arrays and return the differences.",
    "code": "```php\nfunction arrayDifferences($array1, $array2) {\n    $diff1 = array_diff($array1, $array2);\n    $diff2 = array_diff($array2, $array1);\n    return array_merge($diff1, $diff2);\n}\n```"
  },
  {
    "task": "Write a method to find the longest subarray with elements in arithmetic progression.",
    "code": "```php\nfunction longestAPSubarray($arr) {\n    $n = count($arr);\n    if ($n <= 1) return $arr;\n\n    $maxLength = 1;\n    $start = 0;\n    $length = 1;\n\n    for ($i = 0; $i < $n - 1; $i++) {\n        $diff = $arr[$i + 1] - $arr[$i];\n        $length = 2;\n        \n        for ($j = $i + 2; $j < $n; $j++) {\n            if ($arr[$j] - $arr[$j - 1] == $diff) {\n                $length++;\n            } else {\n                break;\n            }\n        }\n        \n        if ($length > $maxLength) {\n            $maxLength = $length;\n            $start = $i;\n        }\n    }\n\n    return array_slice($arr, $start, $maxLength);\n}\n\n// Example usage:\n$arr = [1, 7, 10, 13, 14, 19];\n$result = longestAPSubarray($arr);\nprint_r($result);\n```"
  },
  {
    "task": "Develop a routine to remove elements from an array based on a predicate function.",
    "code": "```php\nfunction removeElementsByPredicate(array $array, callable $predicate): array {\n    $result = [];\n    foreach ($array as $element) {\n        if (!$predicate($element)) {\n            $result[] = $element;\n        }\n    }\n    return $result;\n}\n\n// Example usage:\n$array = [1, 2, 3, 4, 5];\n$predicate = function($x) {\n    return $x % 2 === 0; // Remove even numbers\n};\n$newArray = removeElementsByPredicate($array, $predicate);\nprint_r($newArray); // Outputs: [1, 3, 5]\n```"
  },
  {
    "task": "Implement a function to determine if two arrays have any common elements.",
    "code": "```php\nfunction haveCommonElements($array1, $array2) {\n    foreach ($array1 as $element) {\n        if (in_array($element, $array2)) {\n            return true;\n        }\n    }\n    return false;\n}\n```"
  },
  {
    "task": "Create a script to initialize an empty array and populate it with user input.",
    "code": "```php\n<?php\n$inputArray = array();\n$handle = fopen(\"php://stdin\", \"r\");\n\necho \"Enter number of inputs: \";\n$numberOfInputs = intval(fgets($handle));\n\nfor ($i = 0; $i < $numberOfInputs; $i++) {\n    echo \"Enter value for index $i: \";\n    $inputArray[] = trim(fgets($handle));\n}\n\nfclose($handle);\nprint_r($inputArray);\n?>\n```"
  },
  {
    "task": "Write a program to find the maximum sum of non-adjacent elements in an array.",
    "code": "```php\nfunction maxNonAdjacentSum($array) {\n    $include = 0;\n    $exclude = 0;\n\n    foreach ($array as $value) {\n        $newExclude = max($include, $exclude);\n        $include = $exclude + $value;\n        $exclude = $newExclude;\n    }\n\n    return max($include, $exclude);\n}\n\n// Example usage\n$array = [3, 2, 5, 10, 7];\necho maxNonAdjacentSum($array);\n```"
  },
  {
    "task": "Design a function to shuffle an array randomly.",
    "code": "```php\nfunction shuffleArray(array $arr): array {\n    shuffle($arr);\n    return $arr;\n}\n```"
  },
  {
    "task": "Create a method to generate a new array where each element is the cumulative product of the input array.",
    "code": "```php\nfunction cumulativeProduct($inputArray) {\n    $cumulativeArray = [];\n    $product = 1;\n    foreach ($inputArray as $value) {\n        $product *= $value;\n        $cumulativeArray[] = $product;\n    }\n    return $cumulativeArray;\n}\n\n// Example usage:\n$input = [1, 2, 3, 4];\n$result = cumulativeProduct($input);\nprint_r($result);\n```"
  },
  {
    "task": "Develop a routine to find the largest element in each row of a 2D array.",
    "code": "```php\nfunction findLargestInRows($array2D) {\n    $largestInRows = [];\n    \n    foreach ($array2D as $row) {\n        if (!empty($row)) {\n            $largestInRows[] = max($row);\n        }\n    }\n\n    return $largestInRows;\n}\n\n// Example usage:\n$array2D = [\n    [3, 5, 2],\n    [1, 9, 8],\n    [6, 4, 7]\n];\n\n$result = findLargestInRows($array2D);\nprint_r($result);\n```"
  },
  {
    "task": "Implement a function to count the number of negative numbers in an array.",
    "code": "```php\nfunction countNegativeNumbers($array) {\n    $count = 0;\n    foreach ($array as $number) {\n        if ($number < 0) {\n            $count++;\n        }\n    }\n    return $count;\n}\n```"
  },
  {
    "task": "Write a script to find the longest subarray with all distinct elements.",
    "code": "```php\nfunction longestDistinctSubarray($arr) {\n    $n = count($arr);\n    $maxLen = 0;\n    $start = 0;\n    $seen = [];\n    \n    for ($end = 0; $end < $n; $end++) {\n        if (isset($seen[$arr[$end]])) {\n            $start = max($start, $seen[$arr[$end]] + 1);\n        }\n        $seen[$arr[$end]] = $end;\n        $maxLen = max($maxLen, $end - $start + 1);\n    }\n    \n    return $maxLen;\n}\n\n$array = [1, 2, 3, 1, 2, 3, 4, 5];\necho longestDistinctSubarray($array);\n```"
  }
]