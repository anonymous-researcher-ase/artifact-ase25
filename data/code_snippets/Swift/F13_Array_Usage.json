[
  {
    "task": "Create a function that initializes an array with the first ten prime numbers.",
    "code": "```swift\nfunc firstTenPrimes() -> [Int] {\n    return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n}\n```"
  },
  {
    "task": "Write a program to reverse the elements of a given array.",
    "code": "```swift\nfunc reverseArray<T>(_ array: [T]) -> [T] {\n    return array.reversed()\n}\n\nlet originalArray = [1, 2, 3, 4, 5]\nlet reversedArray = reverseArray(originalArray)\nprint(reversedArray)\n```"
  },
  {
    "task": "Implement an algorithm that finds the maximum value in an array of integers.",
    "code": "```swift\nfunc findMaximum(in numbers: [Int]) -> Int? {\n    guard !numbers.isEmpty else { return nil }\n    var maxValue = numbers[0]\n    for number in numbers {\n        if number > maxValue {\n            maxValue = number\n        }\n    }\n    return maxValue\n}\n```"
  },
  {
    "task": "Design a routine to rotate an array to the right by a given number of steps.",
    "code": "```swift\nfunc rotateArrayRight(_ array: [Int], by steps: Int) -> [Int] {\n    guard !array.isEmpty else { return array }\n    let effectiveSteps = steps % array.count\n    let splitIndex = array.count - effectiveSteps\n    return Array(array[splitIndex...] + array[..<splitIndex])\n}\n\n// Example usage:\nlet rotatedArray = rotateArrayRight([1, 2, 3, 4, 5], by: 2)\nprint(rotatedArray) // Output: [4, 5, 1, 2, 3]\n```"
  },
  {
    "task": "Develop a function to merge two sorted arrays into one sorted array.",
    "code": "```swift\nfunc mergeSortedArrays(_ array1: [Int], _ array2: [Int]) -> [Int] {\n    var mergedArray: [Int] = []\n    var i = 0\n    var j = 0\n\n    while i < array1.count && j < array2.count {\n        if array1[i] < array2[j] {\n            mergedArray.append(array1[i])\n            i += 1\n        } else {\n            mergedArray.append(array2[j])\n            j += 1\n        }\n    }\n\n    while i < array1.count {\n        mergedArray.append(array1[i])\n        i += 1\n    }\n\n    while j < array2.count {\n        mergedArray.append(array2[j])\n        j += 1\n    }\n\n    return mergedArray\n}\n```"
  },
  {
    "task": "Create a method to remove duplicate values from an array.",
    "code": "```swift\nfunc removeDuplicates(from array: [Int]) -> [Int] {\n    var uniqueValues = [Int]()\n    var seenValues = Set<Int>()\n    \n    for value in array {\n        if !seenValues.contains(value) {\n            uniqueValues.append(value)\n            seenValues.insert(value)\n        }\n    }\n    \n    return uniqueValues\n}\n\nlet numbers = [1, 2, 2, 3, 4, 4, 5]\nlet uniqueNumbers = removeDuplicates(from: numbers)\nprint(uniqueNumbers) // Output: [1, 2, 3, 4, 5]\n```"
  },
  {
    "task": "Write a script to calculate the sum of all elements in an array.",
    "code": "```swift\nlet numbers = [1, 2, 3, 4, 5]\nlet sum = numbers.reduce(0, +)\nprint(\"Sum of array elements: \\(sum)\")\n```"
  },
  {
    "task": "Construct a function that finds the second largest element in an array.",
    "code": "```swift\nfunc secondLargestElement(in array: [Int]) -> Int? {\n    guard array.count > 1 else { return nil }\n    \n    var firstLargest = Int.min\n    var secondLargest = Int.min\n    \n    for number in array {\n        if number > firstLargest {\n            secondLargest = firstLargest\n            firstLargest = number\n        } else if number > secondLargest && number != firstLargest {\n            secondLargest = number\n        }\n    }\n    \n    return secondLargest == Int.min ? nil : secondLargest\n}\n```"
  },
  {
    "task": "Design a program to check if an array contains a specific value.",
    "code": "```swift\nfunc containsValue(array: [Int], value: Int) -> Bool {\n    return array.contains(value)\n}\n\n// Example usage\nlet numbers = [1, 2, 3, 4, 5]\nlet result = containsValue(array: numbers, value: 3)\nprint(result) // Output: true\n```"
  },
  {
    "task": "Implement a function to sort an array of strings alphabetically.",
    "code": "```swift\nfunc sortStringsAlphabetically(_ strings: [String]) -> [String] {\n    return strings.sorted()\n}\n```"
  },
  {
    "task": "Create a method to search for a value in an array using binary search.",
    "code": "```swift\nfunc binarySearch<T: Comparable>(_ array: [T], value: T) -> Int? {\n    var low = 0\n    var high = array.count - 1\n    \n    while low <= high {\n        let mid = low + (high - low) / 2\n        if array[mid] == value {\n            return mid\n        } else if array[mid] < value {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    \n    return nil\n}\n```"
  },
  {
    "task": "Write a routine to calculate the average of numbers in an array.",
    "code": "```swift\nfunc calculateAverage(of numbers: [Double]) -> Double? {\n    guard !numbers.isEmpty else { return nil }\n    let sum = numbers.reduce(0, +)\n    return sum / Double(numbers.count)\n}\n```"
  },
  {
    "task": "Develop a function to find the intersection of two arrays.",
    "code": "```swift\nfunc intersection<T: Hashable>(of array1: [T], and array2: [T]) -> [T] {\n    let set1 = Set(array1)\n    let set2 = Set(array2)\n    let intersectionSet = set1.intersection(set2)\n    return Array(intersectionSet)\n}\n```"
  },
  {
    "task": "Implement a method to find the union of two arrays without duplicates.",
    "code": "```swift\nfunc unionOfArrays<T: Hashable>(_ array1: [T], _ array2: [T]) -> [T] {\n    let set1 = Set(array1)\n    let set2 = Set(array2)\n    let unionSet = set1.union(set2)\n    return Array(unionSet)\n}\n\n// Example usage\nlet array1 = [1, 2, 3, 4, 5]\nlet array2 = [4, 5, 6, 7, 8]\nlet unionArray = unionOfArrays(array1, array2)\nprint(unionArray)\n```"
  },
  {
    "task": "Create a program that shifts all zeroes in an array to the end.",
    "code": "```swift\nfunc shiftZeroesToEnd(_ array: [Int]) -> [Int] {\n    var result = [Int]()\n    var zeroCount = 0\n    \n    for number in array {\n        if number == 0 {\n            zeroCount += 1\n        } else {\n            result.append(number)\n        }\n    }\n    \n    for _ in 0..<zeroCount {\n        result.append(0)\n    }\n    \n    return result\n}\n\nlet array = [0, 1, 0, 3, 12]\nlet shiftedArray = shiftZeroesToEnd(array)\nprint(shiftedArray)\n```"
  },
  {
    "task": "Write a function to split an array into two parts at a given index.",
    "code": "```swift\nfunc splitArray<T>(_ array: [T], at index: Int) -> ([T], [T]) {\n    guard index >= 0 && index <= array.count else {\n        return ([], [])\n    }\n    let firstPart = Array(array[0..<index])\n    let secondPart = Array(array[index..<array.count])\n    return (firstPart, secondPart)\n}\n```"
  },
  {
    "task": "Design a script to find all pairs in an array that sum up to a specific target.",
    "code": "```swift\nfunc findPairsWithSum(array: [Int], target: Int) -> [(Int, Int)] {\n    var pairs = [(Int, Int)]()\n    var seen = Set<Int>()\n    \n    for number in array {\n        let complement = target - number\n        if seen.contains(complement) {\n            pairs.append((complement, number))\n        }\n        seen.insert(number)\n    }\n    \n    return pairs\n}\n\n// Example usage:\nlet array = [2, 4, 3, 5, 7, 8, 9]\nlet target = 10\nlet pairs = findPairsWithSum(array: array, target: target)\nprint(pairs) // Output: [(7, 3), (8, 2)]\n```"
  },
  {
    "task": "Construct a method to remove all occurrences of a specific value from an array.",
    "code": "```swift\nfunc removeOccurrences(of value: Int, from array: [Int]) -> [Int] {\n    return array.filter { $0 != value }\n}\n\n// Example usage\nlet numbers = [1, 2, 3, 2, 4, 2, 5]\nlet result = removeOccurrences(of: 2, from: numbers)\nprint(result)  // Output: [1, 3, 4, 5]\n```"
  },
  {
    "task": "Write a function to find the longest increasing subsequence in an array.",
    "code": "```swift\nfunc longestIncreasingSubsequence(_ nums: [Int]) -> [Int] {\n    guard !nums.isEmpty else { return [] }\n    var dp = Array(repeating: 1, count: nums.count)\n    var prev = Array(repeating: -1, count: nums.count)\n    \n    var maxLength = 0\n    var maxIndex = 0\n    \n    for i in 1..<nums.count {\n        for j in 0..<i {\n            if nums[i] > nums[j] && dp[i] < dp[j] + 1 {\n                dp[i] = dp[j] + 1\n                prev[i] = j\n            }\n        }\n        if dp[i] > maxLength {\n            maxLength = dp[i]\n            maxIndex = i\n        }\n    }\n    \n    var lis = [Int]()\n    var index = maxIndex\n    while index != -1 {\n        lis.append(nums[index])\n        index = prev[index]\n    }\n    \n    return lis.reversed()\n}\n```"
  },
  {
    "task": "Develop an algorithm to find the missing number in a sequential array.",
    "code": "```swift\nfunc findMissingNumber(in array: [Int]) -> Int? {\n    guard !array.isEmpty else { return nil }\n    \n    let n = array.count + 1\n    let expectedSum = n * (n + 1) / 2\n    let actualSum = array.reduce(0, +)\n    \n    return expectedSum - actualSum\n}\n\n// Example usage:\nlet array = [1, 2, 4, 5, 6]\nif let missingNumber = findMissingNumber(in: array) {\n    print(\"The missing number is \\(missingNumber)\")\n} else {\n    print(\"No missing number found.\")\n}\n```"
  },
  {
    "task": "Create a program to find the common elements between two arrays.",
    "code": "```swift\nlet array1 = [1, 2, 3, 4, 5]\nlet array2 = [4, 5, 6, 7, 8]\n\nlet commonElements = array1.filter { array2.contains($0) }\n\nprint(commonElements)\n```"
  },
  {
    "task": "Implement a function to move all negative numbers to the beginning of an array.",
    "code": "```swift\nfunc moveNegativesToFront(_ array: inout [Int]) {\n    var negIndex = 0\n    for i in 0..<array.count {\n        if array[i] < 0 {\n            array.swapAt(i, negIndex)\n            negIndex += 1\n        }\n    }\n}\n\nvar numbers = [1, -2, 3, -4, 5, -6]\nmoveNegativesToFront(&numbers)\nprint(numbers)\n```"
  },
  {
    "task": "Write a method to check if an array is a palindrome.",
    "code": "```swift\nfunc isPalindrome(_ array: [Int]) -> Bool {\n    return array == array.reversed()\n}\n```"
  },
  {
    "task": "Design a routine to create a new array that is the element-wise sum of two input arrays.",
    "code": "```swift\nfunc elementWiseSum(array1: [Int], array2: [Int]) -> [Int]? {\n    guard array1.count == array2.count else {\n        return nil // Return nil if arrays are not of the same length\n    }\n    var resultArray: [Int] = []\n    for i in 0..<array1.count {\n        resultArray.append(array1[i] + array2[i])\n    }\n    return resultArray\n}\n```"
  },
  {
    "task": "Create a function to find the product of all elements in an array, excluding the current element.",
    "code": "```swift\nfunc productExceptSelf(_ nums: [Int]) -> [Int] {\n    let n = nums.count\n    var result = [Int](repeating: 1, count: n)\n    \n    var leftProduct = 1\n    for i in 0..<n {\n        result[i] = leftProduct\n        leftProduct *= nums[i]\n    }\n    \n    var rightProduct = 1\n    for i in (0..<n).reversed() {\n        result[i] *= rightProduct\n        rightProduct *= nums[i]\n    }\n    \n    return result\n}\n```"
  },
  {
    "task": "Develop a script to remove elements from an array that are smaller than a given threshold.",
    "code": "```swift\nfunc removeElementsBelowThreshold(from array: [Int], threshold: Int) -> [Int] {\n    return array.filter { $0 >= threshold }\n}\n\nlet numbers = [1, 3, 5, 7, 9]\nlet threshold = 5\nlet filteredNumbers = removeElementsBelowThreshold(from: numbers, threshold: threshold)\nprint(filteredNumbers)\n```"
  },
  {
    "task": "Implement a method to clone an array without using built-in functions.",
    "code": "```swift\nfunc cloneArray<T>(_ array: [T]) -> [T] {\n    var clonedArray: [T] = []\n    for element in array {\n        clonedArray.append(element)\n    }\n    return clonedArray\n}\n```"
  },
  {
    "task": "Create a program that rotates a 2D array (matrix) 90 degrees clockwise.",
    "code": "```swift\nfunc rotateMatrix90DegreesClockwise(_ matrix: inout [[Int]]) {\n    let n = matrix.count\n    // Transpose the matrix\n    for i in 0..<n {\n        for j in i..<n {\n            let temp = matrix[i][j]\n            matrix[i][j] = matrix[j][i]\n            matrix[j][i] = temp\n        }\n    }\n    // Reverse each row\n    for i in 0..<n {\n        matrix[i].reverse()\n    }\n}\n\n// Example usage\nvar matrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\n\nrotateMatrix90DegreesClockwise(&matrix)\nprint(matrix)\n```"
  },
  {
    "task": "Write a function to find the kth smallest element in an unsorted array.",
    "code": "```swift\nfunc kthSmallestElement(_ array: [Int], _ k: Int) -> Int? {\n    guard k > 0 && k <= array.count else { return nil }\n    let sortedArray = array.sorted()\n    return sortedArray[k - 1]\n}\n```"
  },
  {
    "task": "Design a routine to partition an array into even and odd numbers.",
    "code": "```swift\nfunc partitionArray(_ array: [Int]) -> ([Int], [Int]) {\n    var evens: [Int] = []\n    var odds: [Int] = []\n    \n    for number in array {\n        if number % 2 == 0 {\n            evens.append(number)\n        } else {\n            odds.append(number)\n        }\n    }\n    \n    return (evens, odds)\n}\n\nlet numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nlet (evens, odds) = partitionArray(numbers)\nprint(\"Evens: \\(evens)\")\nprint(\"Odds: \\(odds)\")\n```"
  },
  {
    "task": "Create a method to merge overlapping intervals in an array.",
    "code": "```swift\nimport Foundation\n\nstruct Interval {\n    var start: Int\n    var end: Int\n}\n\nfunc mergeIntervals(_ intervals: [Interval]) -> [Interval] {\n    guard intervals.count > 1 else { return intervals }\n    \n    let sortedIntervals = intervals.sorted { $0.start < $1.start }\n    var merged: [Interval] = []\n    var currentInterval = sortedIntervals[0]\n    \n    for interval in sortedIntervals.dropFirst() {\n        if interval.start <= currentInterval.end {\n            currentInterval.end = max(currentInterval.end, interval.end)\n        } else {\n            merged.append(currentInterval)\n            currentInterval = interval\n        }\n    }\n    \n    merged.append(currentInterval)\n    return merged\n}\n\n// Example usage\nlet intervals = [Interval(start: 1, end: 3), Interval(start: 2, end: 4), Interval(start: 5, end: 7), Interval(start: 6, end: 8)]\nlet mergedIntervals = mergeIntervals(intervals)\nprint(mergedIntervals.map { \"(\\($0.start), \\($0.end))\" })\n```"
  },
  {
    "task": "Develop a function to count the frequency of each unique element in an array.",
    "code": "```swift\nfunc countFrequency<T: Hashable>(in array: [T]) -> [T: Int] {\n    var frequencyDict: [T: Int] = [:]\n    for element in array {\n        frequencyDict[element, default: 0] += 1\n    }\n    return frequencyDict\n}\n```"
  },
  {
    "task": "Write a program to generate all possible subsets of an array.",
    "code": "```swift\nfunc subsets<T>(_ nums: [T]) -> [[T]] {\n    var result: [[T]] = [[]]\n    \n    for num in nums {\n        let currentSize = result.count\n        for i in 0..<currentSize {\n            var subset = result[i]\n            subset.append(num)\n            result.append(subset)\n        }\n    }\n    \n    return result\n}\n\nlet array = [1, 2, 3]\nlet allSubsets = subsets(array)\nprint(allSubsets)\n```"
  },
  {
    "task": "Implement a routine to cyclically permute the elements of an array.",
    "code": "```swift\nfunc cyclicallyPermute<T>(array: [T]) -> [T] {\n    guard !array.isEmpty else { return array }\n    var result = array\n    let lastElement = result.removeLast()\n    result.insert(lastElement, at: 0)\n    return result\n}\n\n// Example usage:\nlet originalArray = [1, 2, 3, 4, 5]\nlet permutedArray = cyclicallyPermute(array: originalArray)\nprint(permutedArray) // [5, 1, 2, 3, 4]\n```"
  },
  {
    "task": "Create a function that checks if two arrays are equal regardless of element order.",
    "code": "```swift\nfunc areArraysEqual<T: Hashable>(_ array1: [T], _ array2: [T]) -> Bool {\n    return Set(array1) == Set(array2)\n}\n```"
  },
  {
    "task": "Design a script to initialize an array with random integers within a specified range.",
    "code": "```swift\nimport Foundation\n\nfunc randomIntArray(count: Int, range: Range<Int>) -> [Int] {\n    return (0..<count).map { _ in Int.random(in: range) }\n}\n\nlet randomArray = randomIntArray(count: 10, range: 1..<100)\nprint(randomArray)\n```"
  },
  {
    "task": "Write a method to convert an array of integers to a single concatenated number.",
    "code": "```swift\nfunc concatenateArrayToNumber(_ array: [Int]) -> Int {\n    let concatenatedString = array.map { String($0) }.joined()\n    return Int(concatenatedString) ?? 0\n}\n```"
  },
  {
    "task": "Develop a function to find the median value of an unsorted array.",
    "code": "```swift\nfunc findMedian(of array: [Int]) -> Double? {\n    guard !array.isEmpty else { return nil }\n    \n    let sortedArray = array.sorted()\n    let count = sortedArray.count\n    if count % 2 == 0 {\n        return Double(sortedArray[count / 2 - 1] + sortedArray[count / 2]) / 2.0\n    } else {\n        return Double(sortedArray[count / 2])\n    }\n}\n```"
  },
  {
    "task": "Create a routine to determine if an array is sorted in ascending order.",
    "code": "```swift\nfunc isArraySortedAscending(_ array: [Int]) -> Bool {\n    for i in 0..<array.count - 1 {\n        if array[i] > array[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n// Example usage\nlet exampleArray = [1, 2, 3, 4, 5]\nlet isSorted = isArraySortedAscending(exampleArray)\nprint(isSorted) // Output: true\n```"
  },
  {
    "task": "Implement a method to find the longest contiguous subarray with equal number of 0s and 1s.",
    "code": "```swift\nfunc findMaxLength(_ nums: [Int]) -> Int {\n    var count = 0\n    var maxLength = 0\n    var countMap = [Int: Int]()\n    countMap[0] = -1\n\n    for (i, num) in nums.enumerated() {\n        count += (num == 1) ? 1 : -1\n        if let prevIndex = countMap[count] {\n            maxLength = max(maxLength, i - prevIndex)\n        } else {\n            countMap[count] = i\n        }\n    }\n\n    return maxLength\n}\n```"
  },
  {
    "task": "Write a function to interleave two arrays of equal length.",
    "code": "```swift\nfunc interleaveArrays<T>(_ array1: [T], _ array2: [T]) -> [T] {\n    var result: [T] = []\n    for i in 0..<array1.count {\n        result.append(array1[i])\n        result.append(array2[i])\n    }\n    return result\n}\n```"
  },
  {
    "task": "Design a program to replace each element in an array with the next greatest element.",
    "code": "```swift\nfunc replaceWithNextGreatest(arr: [Int]) -> [Int] {\n    guard !arr.isEmpty else { return [] }\n    var result = arr\n    var maxFromRight = arr[arr.count - 1]\n    result[arr.count - 1] = -1\n    \n    for i in stride(from: arr.count - 2, through: 0, by: -1) {\n        let temp = arr[i]\n        result[i] = maxFromRight\n        if temp > maxFromRight {\n            maxFromRight = temp\n        }\n    }\n    \n    return result\n}\n\nlet array = [16, 17, 4, 3, 5, 2]\nlet replacedArray = replaceWithNextGreatest(arr: array)\nprint(replacedArray)\n```"
  },
  {
    "task": "Create a function to calculate the dot product of two numeric arrays.",
    "code": "```swift\nfunc dotProduct(_ array1: [Double], _ array2: [Double]) -> Double? {\n    guard array1.count == array2.count else { return nil }\n    return zip(array1, array2).reduce(0.0) { $0 + $1.0 * $1.1 }\n}\n```"
  },
  {
    "task": "Develop a script to find the first recurring element in an array.",
    "code": "```swift\nfunc firstRecurringElement(in array: [Int]) -> Int? {\n    var seen = Set<Int>()\n    for element in array {\n        if seen.contains(element) {\n            return element\n        }\n        seen.insert(element)\n    }\n    return nil\n}\n\nlet numbers = [2, 5, 1, 2, 3, 5, 1, 2, 4]\nif let recurringElement = firstRecurringElement(in: numbers) {\n    print(\"First recurring element: \\(recurringElement)\")\n} else {\n    print(\"No recurring elements found.\")\n}\n```"
  },
  {
    "task": "Write a method to check if an array is a subset of another array.",
    "code": "```swift\nfunc isSubset<T: Equatable>(array: [T], of superArray: [T]) -> Bool {\n    return array.allSatisfy { superArray.contains($0) }\n}\n\n// Example usage:\nlet array1 = [1, 2, 3]\nlet array2 = [1, 2, 3, 4, 5]\nlet result = isSubset(array: array1, of: array2)\nprint(result)  // Output: true\n```"
  },
  {
    "task": "Implement a function to add a specific value to each element in an array.",
    "code": "```swift\nfunc addValue(to array: [Int], value: Int) -> [Int] {\n    return array.map { $0 + value }\n}\n```"
  },
  {
    "task": "Create a program that finds the largest product of three numbers in an array.",
    "code": "```swift\nfunc largestProductOfThree(_ nums: [Int]) -> Int {\n    let sortedNums = nums.sorted()\n    let n = sortedNums.count\n    let product1 = sortedNums[n - 1] * sortedNums[n - 2] * sortedNums[n - 3]\n    let product2 = sortedNums[0] * sortedNums[1] * sortedNums[n - 1]\n    return max(product1, product2)\n}\n\n// Example usage\nlet array = [1, 10, 2, 6, 5, 3]\nlet largestProduct = largestProductOfThree(array)\nprint(largestProduct)\n```"
  },
  {
    "task": "Design a routine to find all unique permutations of an array.",
    "code": "```swift\nfunc permuteUnique(_ nums: [Int]) -> [[Int]] {\n    var results = [[Int]]()\n    var nums = nums.sorted()\n    var used = Array(repeating: false, count: nums.count)\n    \n    func backtrack(_ path: inout [Int]) {\n        if path.count == nums.count {\n            results.append(path)\n            return\n        }\n        \n        for i in 0..<nums.count {\n            if used[i] || (i > 0 && nums[i] == nums[i - 1] && !used[i - 1]) {\n                continue\n            }\n            \n            used[i] = true\n            path.append(nums[i])\n            backtrack(&path)\n            path.removeLast()\n            used[i] = false\n        }\n    }\n    \n    var path = [Int]()\n    backtrack(&path)\n    return results\n}\n\n// Example usage\nlet uniquePermutations = permuteUnique([1, 1, 2])\nprint(uniquePermutations)\n```"
  },
  {
    "task": "Write a function to transpose a square matrix represented as a 2D array.",
    "code": "```swift\nfunc transposeMatrix(_ matrix: [[Int]]) -> [[Int]] {\n    let n = matrix.count\n    var transposedMatrix: [[Int]] = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        for j in 0..<n {\n            transposedMatrix[i][j] = matrix[j][i]\n        }\n    }\n    \n    return transposedMatrix\n}\n```"
  },
  {
    "task": "Develop a method to find the longest common prefix in an array of strings.",
    "code": "```swift\nfunc longestCommonPrefix(_ strs: [String]) -> String {\n    guard !strs.isEmpty else { return \"\" }\n    \n    var prefix = strs[0]\n    \n    for str in strs {\n        while !str.hasPrefix(prefix) {\n            prefix = String(prefix.dropLast())\n            if prefix.isEmpty { return \"\" }\n        }\n    }\n    \n    return prefix\n}\n\n// Example usage:\nlet strings = [\"flower\", \"flow\", \"flight\"]\nprint(longestCommonPrefix(strings)) // Output: \"fl\"\n```"
  },
  {
    "task": "Implement a function to flatten a multi-dimensional array into a single array.",
    "code": "```swift\nfunc flattenArray<T>(_ array: [Any]) -> [T] {\n    var result = [T]()\n    for element in array {\n        if let subArray = element as? [Any] {\n            result.append(contentsOf: flattenArray(subArray))\n        } else if let value = element as? T {\n            result.append(value)\n        }\n    }\n    return result\n}\n\n// Example usage:\nlet nestedArray: [Any] = [1, [2, 3], [4, [5, 6]], 7]\nlet flatArray: [Int] = flattenArray(nestedArray)\nprint(flatArray)  // Output: [1, 2, 3, 4, 5, 6, 7]\n```"
  },
  {
    "task": "Create a script to shift elements of an array to the left by a given number of positions.",
    "code": "```swift\nfunc shiftArrayLeft<T>(_ array: [T], by positions: Int) -> [T] {\n    guard !array.isEmpty else { return array }\n    let offset = positions % array.count\n    return Array(array[offset...] + array[..<offset])\n}\n\n// Example usage\nlet originalArray = [1, 2, 3, 4, 5]\nlet shiftedArray = shiftArrayLeft(originalArray, by: 2)\nprint(shiftedArray)  // Output: [3, 4, 5, 1, 2]\n```"
  },
  {
    "task": "Write a routine to sort an array of objects based on a specific property.",
    "code": "```swift\nstruct Item {\n    var name: String\n    var value: Int\n}\n\nfunc sortItemsByValue(_ items: [Item]) -> [Item] {\n    return items.sorted { $0.value < $1.value }\n}\n\n// Example Usage\nlet items = [\n    Item(name: \"Item1\", value: 10),\n    Item(name: \"Item2\", value: 5),\n    Item(name: \"Item3\", value: 7)\n]\n\nlet sortedItems = sortItemsByValue(items)\n```"
  },
  {
    "task": "Design a program to find the smallest missing positive integer in an array.",
    "code": "```swift\nfunc findSmallestMissingPositive(_ nums: [Int]) -> Int {\n    var set = Set(nums)\n    var i = 1\n    while true {\n        if !set.contains(i) {\n            return i\n        }\n        i += 1\n    }\n}\n\n// Example usage:\nlet nums = [3, 4, -1, 1]\nlet smallestMissingPositive = findSmallestMissingPositive(nums)\nprint(smallestMissingPositive) // Output should be 2\n```"
  },
  {
    "task": "Create a function to calculate the cumulative sum of an array.",
    "code": "```swift\nfunc cumulativeSum(of array: [Int]) -> [Int] {\n    var result: [Int] = []\n    var sum = 0\n    for number in array {\n        sum += number\n        result.append(sum)\n    }\n    return result\n}\n```"
  },
  {
    "task": "Develop a function to remove consecutive duplicate elements in an array.",
    "code": "```swift\nfunc removeConsecutiveDuplicates(from array: [Int]) -> [Int] {\n    guard !array.isEmpty else { return [] }\n    var result: [Int] = [array[0]]\n    \n    for element in array.dropFirst() {\n        if element != result.last {\n            result.append(element)\n        }\n    }\n    \n    return result\n}\n\n// Example usage:\nlet array = [1, 1, 2, 3, 3, 3, 4, 5, 5, 6]\nlet result = removeConsecutiveDuplicates(from: array)\nprint(result) // Output: [1, 2, 3, 4, 5, 6]\n```"
  },
  {
    "task": "Implement a method to find the majority element in an array, if any.",
    "code": "```swift\nfunc findMajorityElement(in array: [Int]) -> Int? {\n    var elementCount = [Int: Int]()\n    let majorityCount = array.count / 2\n    \n    for element in array {\n        elementCount[element, default: 0] += 1\n        if elementCount[element]! > majorityCount {\n            return element\n        }\n    }\n    \n    return nil\n}\n\n// Example usage:\nlet array = [3, 3, 4, 2, 4, 4, 2, 4, 4]\nif let majorityElement = findMajorityElement(in: array) {\n    print(\"Majority element is \\(majorityElement)\")\n} else {\n    print(\"No majority element found\")\n}\n```"
  },
  {
    "task": "Write a script to split an array into chunks of a given size.",
    "code": "```swift\nfunc chunkArray<T>(_ array: [T], chunkSize: Int) -> [[T]] {\n    guard chunkSize > 0 else { return [] }\n    var result: [[T]] = []\n    var index = 0\n    while index < array.count {\n        let chunk = Array(array[index..<min(index + chunkSize, array.count)])\n        result.append(chunk)\n        index += chunkSize\n    }\n    return result\n}\n\n// Example usage:\nlet array = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nlet chunkedArray = chunkArray(array, chunkSize: 3)\nprint(chunkedArray) // Output: [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n```"
  },
  {
    "task": "Create a program to calculate the difference between the largest and smallest values in an array.",
    "code": "```swift\nfunc calculateDifference(array: [Int]) -> Int? {\n    guard let max = array.max(), let min = array.min() else {\n        return nil\n    }\n    return max - min\n}\n\nlet numbers = [3, 8, 1, 9, 4]\nif let difference = calculateDifference(array: numbers) {\n    print(\"The difference is \\(difference)\")\n}\n```"
  },
  {
    "task": "Design a routine to find the starting index of a target subarray in a larger array.",
    "code": "```swift\nfunc findSubarrayIndex<T: Equatable>(array: [T], subarray: [T]) -> Int? {\n    guard !subarray.isEmpty && subarray.count <= array.count else {\n        return nil\n    }\n    \n    for i in 0...(array.count - subarray.count) {\n        if Array(array[i..<i + subarray.count]) == subarray {\n            return i\n        }\n    }\n    \n    return nil\n}\n\n// Example usage:\nlet array = [1, 2, 3, 4, 5, 6]\nlet subarray = [3, 4]\nif let index = findSubarrayIndex(array: array, subarray: subarray) {\n    print(\"Subarray found at index \\(index)\")\n} else {\n    print(\"Subarray not found\")\n}\n```"
  },
  {
    "task": "Write a function to compress an array by eliminating zero values.",
    "code": "```swift\nfunc compressArray(_ array: [Int]) -> [Int] {\n    return array.filter { $0 != 0 }\n}\n```"
  },
  {
    "task": "Develop a method to determine if an array can be split into two parts with equal sums.",
    "code": "```swift\nfunc canSplitArrayIntoEqualSumParts(_ array: [Int]) -> Bool {\n    let totalSum = array.reduce(0, +)\n    if totalSum % 2 != 0 {\n        return false\n    }\n    let target = totalSum / 2\n    var currentSum = 0\n    for number in array {\n        currentSum += number\n        if currentSum == target {\n            return true\n        }\n    }\n    return false\n}\n```"
  },
  {
    "task": "Implement a function to round each element in an array to the nearest integer.",
    "code": "```swift\nfunc roundArrayElements(_ array: [Double]) -> [Int] {\n    return array.map { Int(round($0)) }\n}\n\n// Example usage:\nlet numbers = [1.2, 2.5, 3.7, 4.4]\nlet roundedNumbers = roundArrayElements(numbers)\n// roundedNumbers will be [1, 3, 4, 4]\n```"
  },
  {
    "task": "Create a routine to generate an array of the Fibonacci sequence up to a given number.",
    "code": "```swift\nfunc generateFibonacci(upTo n: Int) -> [Int] {\n    guard n > 0 else { return [] }\n    var fibonacciArray = [0, 1]\n    while true {\n        let nextValue = fibonacciArray[fibonacciArray.count - 1] + fibonacciArray[fibonacciArray.count - 2]\n        if nextValue > n {\n            break\n        }\n        fibonacciArray.append(nextValue)\n    }\n    return fibonacciArray\n}\n```"
  },
  {
    "task": "Write a program to find the longest repeating sequence in an array.",
    "code": "```swift\nfunc longestRepeatingSequence(in array: [Int]) -> [Int] {\n    guard !array.isEmpty else { return [] }\n    \n    var longestSequence = [Int]()\n    var currentSequence = [array[0]]\n    \n    for i in 1..<array.count {\n        if array[i] == array[i - 1] {\n            currentSequence.append(array[i])\n        } else {\n            if currentSequence.count > longestSequence.count {\n                longestSequence = currentSequence\n            }\n            currentSequence = [array[i]]\n        }\n    }\n    \n    if currentSequence.count > longestSequence.count {\n        longestSequence = currentSequence\n    }\n    \n    return longestSequence\n}\n\n// Example usage:\nlet array = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5]\nlet result = longestRepeatingSequence(in: array)\nprint(result)  // Output: [4, 4, 4, 4]\n```"
  },
  {
    "task": "Design a function to multiply each element of an array by its index.",
    "code": "```swift\nfunc multiplyElementsByIndex(_ arr: [Int]) -> [Int] {\n    return arr.enumerated().map { index, element in\n        return index * element\n    }\n}\n```"
  },
  {
    "task": "Create a method to convert an array of characters into a single string.",
    "code": "```swift\nfunc convertArrayToString(characters: [Character]) -> String {\n    return String(characters)\n}\n```"
  },
  {
    "task": "Develop a function to fill an array with a specified value.",
    "code": "```swift\nfunc fillArray<T>(count: Int, with value: T) -> [T] {\n    return Array(repeating: value, count: count)\n}\n\n// Example usage:\nlet filledArray = fillArray(count: 5, with: \"Hello\")\n```"
  },
  {
    "task": "Implement a routine to determine if an array has any duplicate elements.",
    "code": "```swift\nfunc hasDuplicates(_ array: [Int]) -> Bool {\n    var seen = Set<Int>()\n    for element in array {\n        if seen.contains(element) {\n            return true\n        }\n        seen.insert(element)\n    }\n    return false\n}\n\n// Example usage\nlet array = [1, 2, 3, 4, 5, 1]\nprint(hasDuplicates(array)) // Output: true\n```"
  },
  {
    "task": "Write a script to reverse the order of words in an array of strings.",
    "code": "```swift\nlet words = [\"apple\", \"banana\", \"cherry\", \"date\"]\nlet reversedWords = words.reversed()\nprint(Array(reversedWords))\n```"
  },
  {
    "task": "Create a function to calculate the total number of distinct elements in an array.",
    "code": "```swift\nfunc countDistinctElements(in array: [Int]) -> Int {\n    let distinctElements = Set(array)\n    return distinctElements.count\n}\n```"
  },
  {
    "task": "Design a program to find the largest gap between consecutive elements in a sorted array.",
    "code": "```swift\nfunc largestGap(in array: [Int]) -> Int? {\n    guard array.count > 1 else { return nil }\n    var maxGap = 0\n    for i in 1..<array.count {\n        maxGap = max(maxGap, array[i] - array[i - 1])\n    }\n    return maxGap\n}\n\nlet sortedArray = [1, 3, 6, 7, 10]\nif let gap = largestGap(in: sortedArray) {\n    print(\"The largest gap is \\(gap)\")\n} else {\n    print(\"Array must have at least two elements to find a gap.\")\n}\n```"
  },
  {
    "task": "Write a routine to perform element-wise multiplication of two arrays.",
    "code": "```swift\nfunc elementWiseMultiplication(array1: [Int], array2: [Int]) -> [Int] {\n    guard array1.count == array2.count else {\n        fatalError(\"Arrays must have the same length\")\n    }\n    \n    var result = [Int](repeating: 0, count: array1.count)\n    for i in 0..<array1.count {\n        result[i] = array1[i] * array2[i]\n    }\n    \n    return result\n}\n```"
  },
  {
    "task": "Develop a method to split a string into an array of words.",
    "code": "```swift\nfunc splitStringIntoWords(_ input: String) -> [String] {\n    return input.components(separatedBy: .whitespacesAndNewlines).filter { !$0.isEmpty }\n}\n\n// Example usage\nlet sentence = \"Develop a method to split a string into an array of words.\"\nlet words = splitStringIntoWords(sentence)\nprint(words)\n```"
  },
  {
    "task": "Implement a function to find the longest contiguous subarray with a sum less than a target.",
    "code": "```swift\nfunc longestSubarrayWithSumLessThanTarget(_ nums: [Int], _ target: Int) -> Int {\n    var maxLength = 0\n    var currentSum = 0\n    var start = 0\n\n    for end in 0..<nums.count {\n        currentSum += nums[end]\n        \n        while currentSum >= target && start <= end {\n            currentSum -= nums[start]\n            start += 1\n        }\n        \n        maxLength = max(maxLength, end - start + 1)\n    }\n    \n    return maxLength\n}\n\n// Example usage\nlet array = [1, 2, 3, 4, 5]\nlet target = 9\nprint(longestSubarrayWithSumLessThanTarget(array, target)) // Output: 2\n```"
  },
  {
    "task": "Create a script to rotate a 2D array (matrix) 180 degrees.",
    "code": "```swift\nfunc rotateMatrix180Degrees(_ matrix: [[Int]]) -> [[Int]] {\n    var rotatedMatrix = matrix\n    let rowCount = matrix.count\n    let colCount = matrix[0].count\n    \n    for row in 0..<rowCount {\n        for col in 0..<colCount {\n            rotatedMatrix[row][col] = matrix[rowCount - row - 1][colCount - col - 1]\n        }\n    }\n    \n    return rotatedMatrix\n}\n\nlet matrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\n\nlet rotatedMatrix = rotateMatrix180Degrees(matrix)\nprint(rotatedMatrix)\n```"
  },
  {
    "task": "Write a program to convert an array of binary digits to its decimal equivalent.",
    "code": "```swift\nimport Foundation\n\nfunc binaryArrayToDecimal(_ binaryArray: [Int]) -> Int {\n    var decimalValue = 0\n    for (index, digit) in binaryArray.reversed().enumerated() {\n        decimalValue += digit * Int(pow(2.0, Double(index)))\n    }\n    return decimalValue\n}\n\nlet binaryArray = [1, 0, 1, 1]\nlet decimalEquivalent = binaryArrayToDecimal(binaryArray)\nprint(decimalEquivalent)\n```"
  },
  {
    "task": "Design a function to return a new array with elements squared from the input array.",
    "code": "```swift\nfunc squareElements(in array: [Int]) -> [Int] {\n    return array.map { $0 * $0 }\n}\n```"
  },
  {
    "task": "Create a method to check if all elements in an array are unique.",
    "code": "```swift\nfunc areAllElementsUnique<T: Hashable>(array: [T]) -> Bool {\n    var seenElements = Set<T>()\n    for element in array {\n        if seenElements.contains(element) {\n            return false\n        }\n        seenElements.insert(element)\n    }\n    return true\n}\n```"
  },
  {
    "task": "Develop a routine to find the indices of all occurrences of a specific element in an array.",
    "code": "```swift\nfunc findIndices(of element: Int, in array: [Int]) -> [Int] {\n    var indices: [Int] = []\n    for (index, value) in array.enumerated() {\n        if value == element {\n            indices.append(index)\n        }\n    }\n    return indices\n}\n\n// Example usage:\nlet array = [1, 2, 3, 2, 4, 2, 5]\nlet element = 2\nlet result = findIndices(of: element, in: array)\nprint(result) // Output: [1, 3, 5]\n```"
  },
  {
    "task": "Implement a function to merge multiple arrays into one.",
    "code": "```swift\nfunc mergeArrays<T>(_ arrays: [[T]]) -> [T] {\n    return arrays.flatMap { $0 }\n}\n\n// Example usage:\nlet array1 = [1, 2, 3]\nlet array2 = [4, 5, 6]\nlet array3 = [7, 8, 9]\nlet mergedArray = mergeArrays([array1, array2, array3])\nprint(mergedArray) // Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n```"
  },
  {
    "task": "Write a script to convert an array of integers into a formatted string.",
    "code": "```swift\nlet numbers = [1, 2, 3, 4, 5]\nlet formattedString = numbers.map { String($0) }.joined(separator: \", \")\nprint(formattedString)\n```"
  },
  {
    "task": "Create a program to find the largest sum of any contiguous subarray.",
    "code": "```swift\nfunc maxSubArray(_ nums: [Int]) -> Int {\n    guard !nums.isEmpty else { return 0 }\n    \n    var currentSum = nums[0]\n    var maxSum = nums[0]\n    \n    for num in nums[1...] {\n        currentSum = max(num, currentSum + num)\n        maxSum = max(maxSum, currentSum)\n    }\n    \n    return maxSum\n}\n\n// Example usage:\nlet array = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\nprint(maxSubArray(array)) // Output: 6\n```"
  },
  {
    "task": "Design a function to compare two arrays and return the differences.",
    "code": "```swift\nfunc compareArrays<T: Equatable>(_ array1: [T], _ array2: [T]) -> ([T], [T]) {\n    let differences1 = array1.filter { !array2.contains($0) }\n    let differences2 = array2.filter { !array1.contains($0) }\n    return (differences1, differences2)\n}\n\n// Example usage:\nlet array1 = [1, 2, 3, 4]\nlet array2 = [3, 4, 5, 6]\nlet differences = compareArrays(array1, array2)\nprint(differences) // Output: ([1, 2], [5, 6])\n```"
  },
  {
    "task": "Write a method to find the longest subarray with elements in arithmetic progression.",
    "code": "```swift\nfunc longestArithmeticSubarray(_ array: [Int]) -> [Int] {\n    guard array.count >= 2 else { return array }\n    \n    var maxLength = 1\n    var currentLength = 1\n    var startIndex = 0\n    var maxStartIndex = 0\n    var diff = array[1] - array[0]\n    \n    for i in 1..<array.count {\n        let currentDiff = array[i] - array[i - 1]\n        \n        if currentDiff == diff {\n            currentLength += 1\n        } else {\n            if currentLength > maxLength {\n                maxLength = currentLength\n                maxStartIndex = startIndex\n            }\n            diff = currentDiff\n            currentLength = 2\n            startIndex = i - 1\n        }\n    }\n    \n    if currentLength > maxLength {\n        maxLength = currentLength\n        maxStartIndex = startIndex\n    }\n    \n    return Array(array[maxStartIndex..<maxStartIndex + maxLength])\n}\n```"
  },
  {
    "task": "Develop a routine to remove elements from an array based on a predicate function.",
    "code": "```swift\nfunc removeElements<T>(from array: [T], where predicate: (T) -> Bool) -> [T] {\n    return array.filter { !predicate($0) }\n}\n\n// Example usage:\nlet numbers = [1, 2, 3, 4, 5, 6]\nlet result = removeElements(from: numbers) { $0 % 2 == 0 }\nprint(result) // Output: [1, 3, 5]\n```"
  },
  {
    "task": "Implement a function to determine if two arrays have any common elements.",
    "code": "```swift\nfunc haveCommonElements<T: Equatable>(array1: [T], array2: [T]) -> Bool {\n    for element in array1 {\n        if array2.contains(element) {\n            return true\n        }\n    }\n    return false\n}\n\n// Example usage:\n// let result = haveCommonElements(array1: [1, 2, 3], array2: [3, 4, 5])\n// print(result)  // Output: true\n```"
  },
  {
    "task": "Create a script to initialize an empty array and populate it with user input.",
    "code": "```swift\nimport Foundation\n\nvar numbers: [Int] = []\n\nwhile true {\n    print(\"Enter a number (or type 'exit' to finish): \", terminator: \"\")\n    if let input = readLine() {\n        if input.lowercased() == \"exit\" {\n            break\n        } else if let number = Int(input) {\n            numbers.append(number)\n        } else {\n            print(\"Please enter a valid number.\")\n        }\n    }\n}\n\nprint(\"Array contents: \\(numbers)\")\n```"
  },
  {
    "task": "Write a program to find the maximum sum of non-adjacent elements in an array.",
    "code": "```swift\nfunc maxSumOfNonAdjacent(_ nums: [Int]) -> Int {\n    guard !nums.isEmpty else { return 0 }\n    var prev1 = 0\n    var prev2 = 0\n    \n    for num in nums {\n        let temp = prev1\n        prev1 = max(prev1, prev2 + num)\n        prev2 = temp\n    }\n    \n    return prev1\n}\n\nlet numbers = [3, 2, 5, 10, 7]\nprint(maxSumOfNonAdjacent(numbers)) // Output: 15\n```"
  },
  {
    "task": "Design a function to shuffle an array randomly.",
    "code": "```swift\nimport Foundation\n\nfunc shuffleArray<T>(_ array: [T]) -> [T] {\n    var shuffledArray = array\n    for i in stride(from: shuffledArray.count - 1, through: 1, by: -1) {\n        let j = Int(arc4random_uniform(UInt32(i + 1)))\n        shuffledArray.swapAt(i, j)\n    }\n    return shuffledArray\n}\n```"
  },
  {
    "task": "Create a method to generate a new array where each element is the cumulative product of the input array.",
    "code": "```swift\nfunc cumulativeProduct(_ input: [Int]) -> [Int] {\n    var result: [Int] = []\n    var product = 1\n    for number in input {\n        product *= number\n        result.append(product)\n    }\n    return result\n}\n```"
  },
  {
    "task": "Develop a routine to find the largest element in each row of a 2D array.",
    "code": "```swift\nfunc largestInEachRow(matrix: [[Int]]) -> [Int] {\n    return matrix.map { row in\n        if let maxElement = row.max() {\n            return maxElement\n        } else {\n            fatalError(\"Row is empty\")\n        }\n    }\n}\n\n// Example usage\nlet matrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\n\nlet largestElements = largestInEachRow(matrix: matrix)\nprint(largestElements) // Output: [3, 6, 9]\n```"
  },
  {
    "task": "Implement a function to count the number of negative numbers in an array.",
    "code": "```swift\nfunc countNegativeNumbers(in array: [Int]) -> Int {\n    return array.filter { $0 < 0 }.count\n}\n```"
  },
  {
    "task": "Write a script to find the longest subarray with all distinct elements.",
    "code": "```swift\nfunc longestDistinctSubarray(_ array: [Int]) -> Int {\n    var maxLength = 0\n    var start = 0\n    var seenElements = [Int: Int]()\n\n    for (end, element) in array.enumerated() {\n        if let index = seenElements[element] {\n            start = max(start, index + 1)\n        }\n        seenElements[element] = end\n        maxLength = max(maxLength, end - start + 1)\n    }\n\n    return maxLength\n}\n\nlet array = [1, 2, 3, 2, 4, 5, 3, 4, 5, 6]\nlet result = longestDistinctSubarray(array)\nprint(result)\n```"
  }
]