[
  {
    "task": "Write a program that checks if a number is even or odd and outputs the result.",
    "code": "```swift\nimport Foundation\n\nfunc checkEvenOrOdd(number: Int) {\n    if number % 2 == 0 {\n        print(\"\\(number) is even\")\n    } else {\n        print(\"\\(number) is odd\")\n    }\n}\n\nlet numberToCheck = 7\ncheckEvenOrOdd(number: numberToCheck)\n```"
  },
  {
    "task": "Create a function that determines if a given year is a leap year.",
    "code": "```swift\nfunc isLeapYear(year: Int) -> Bool {\n    if year % 4 == 0 {\n        if year % 100 == 0 {\n            if year % 400 == 0 {\n                return true\n            } else {\n                return false\n            }\n        } else {\n            return true\n        }\n    } else {\n        return false\n    }\n}\n```"
  },
  {
    "task": "Develop a script that categorizes an input number as positive, negative, or zero.",
    "code": "```swift\nimport Foundation\n\nfunc categorizeNumber(_ number: Int) -> String {\n    if number > 0 {\n        return \"Positive\"\n    } else if number < 0 {\n        return \"Negative\"\n    } else {\n        return \"Zero\"\n    }\n}\n\nlet inputNumber = 10 // Example input\nlet category = categorizeNumber(inputNumber)\nprint(\"The number \\(inputNumber) is \\(category).\")\n```"
  },
  {
    "task": "Implement a system that grants access only if a correct password and username are provided.",
    "code": "```swift\nfunc authenticate(username: String, password: String) -> Bool {\n    let correctUsername = \"admin\"\n    let correctPassword = \"12345\"\n    \n    if username == correctUsername && password == correctPassword {\n        return true\n    } else {\n        return false\n    }\n}\n\n// Example Usage\nlet accessGranted = authenticate(username: \"admin\", password: \"12345\")\nprint(\"Access Granted: \\(accessGranted)\")\n```"
  },
  {
    "task": "Design a program that outputs 'Fizz' for numbers divisible by 3, 'Buzz' for numbers divisible by 5, and 'FizzBuzz' for numbers divisible by both.",
    "code": "```swift\nfor i in 1...100 {\n    if i % 3 == 0 && i % 5 == 0 {\n        print(\"FizzBuzz\")\n    } else if i % 3 == 0 {\n        print(\"Fizz\")\n    } else if i % 5 == 0 {\n        print(\"Buzz\")\n    } else {\n        print(i)\n    }\n}\n```"
  },
  {
    "task": "Write a function to determine if a character is a vowel or a consonant.",
    "code": "```swift\nfunc checkCharacter(_ character: Character) -> String {\n    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"]\n    if vowels.contains(character) {\n        return \"Vowel\"\n    } else if character.isLetter {\n        return \"Consonant\"\n    } else {\n        return \"Neither\"\n    }\n}\n```"
  },
  {
    "task": "Create a program that assigns letter grades based on numerical scores.",
    "code": "```swift\nfunc gradeFromScore(score: Int) -> String {\n    var grade: String\n    \n    if score >= 90 {\n        grade = \"A\"\n    } else if score >= 80 {\n        grade = \"B\"\n    } else if score >= 70 {\n        grade = \"C\"\n    } else if score >= 60 {\n        grade = \"D\"\n    } else {\n        grade = \"F\"\n    }\n    \n    return grade\n}\n\n// Example usage\nlet score = 85\nlet grade = gradeFromScore(score: score)\nprint(\"The grade for a score of \\(score) is \\(grade).\")\n```"
  },
  {
    "task": "Develop a routine that suggests clothing based on the current temperature.",
    "code": "```swift\nfunc suggestClothing(forTemperature temperature: Int) -> String {\n    if temperature < 0 {\n        return \"Wear a heavy coat, gloves, and a scarf.\"\n    } else if temperature < 10 {\n        return \"Wear a coat and a scarf.\"\n    } else if temperature < 20 {\n        return \"Wear a light jacket.\"\n    } else if temperature < 30 {\n        return \"A t-shirt should be fine.\"\n    } else {\n        return \"Wear shorts and a tank top.\"\n    }\n}\n\n// Example usage\nlet clothingSuggestion = suggestClothing(forTemperature: 15)\nprint(clothingSuggestion)  // Output: Wear a light jacket.\n```"
  },
  {
    "task": "Implement a system that checks if a user is an adult or a minor based on their age.",
    "code": "```swift\nfunc checkAgeStatus(age: Int) -> String {\n    if age >= 18 {\n        return \"Adult\"\n    } else {\n        return \"Minor\"\n    }\n}\n\n// Example usage:\nlet ageStatus = checkAgeStatus(age: 20)\nprint(ageStatus) // Outputs: Adult\n```"
  },
  {
    "task": "Design a program that validates if a triangle can exist based on its side lengths.",
    "code": "```swift\nfunc canFormTriangle(sideA: Double, sideB: Double, sideC: Double) -> Bool {\n    if sideA + sideB > sideC && sideA + sideC > sideB && sideB + sideC > sideA {\n        return true\n    } else {\n        return false\n    }\n}\n\n// Example usage:\nlet result = canFormTriangle(sideA: 3, sideB: 4, sideC: 5)\nprint(result) // Output: true\n```"
  },
  {
    "task": "Write a function that determines the largest of three input numbers.",
    "code": "```swift\nfunc largestOfThree(_ a: Int, _ b: Int, _ c: Int) -> Int {\n    if a >= b && a >= c {\n        return a\n    } else if b >= a && b >= c {\n        return b\n    } else {\n        return c\n    }\n}\n```"
  },
  {
    "task": "Create a program that checks if a string is a palindrome.",
    "code": "```swift\nfunc isPalindrome(_ str: String) -> Bool {\n    let cleanedStr = str.lowercased().filter { $0.isLetter }\n    return cleanedStr == String(cleanedStr.reversed())\n}\n\nlet testString = \"A man a plan a canal Panama\"\nif isPalindrome(testString) {\n    print(\"The string is a palindrome.\")\n} else {\n    print(\"The string is not a palindrome.\")\n}\n```"
  },
  {
    "task": "Develop a routine that calculates the total cost with a discount applied if applicable.",
    "code": "```swift\nfunc calculateTotalCost(originalPrice: Double, discountPercentage: Double?) -> Double {\n    var totalCost = originalPrice\n    \n    if let discount = discountPercentage, discount > 0 {\n        let discountAmount = originalPrice * (discount / 100)\n        totalCost -= discountAmount\n    }\n    \n    return totalCost\n}\n\nlet totalCostWithDiscount = calculateTotalCost(originalPrice: 100.0, discountPercentage: 15.0)\nlet totalCostWithoutDiscount = calculateTotalCost(originalPrice: 100.0, discountPercentage: nil)\n```"
  },
  {
    "task": "Implement a system that checks if a person is eligible to vote based on age and citizenship.",
    "code": "```swift\nfunc checkVotingEligibility(age: Int, isCitizen: Bool) -> String {\n    if age >= 18 && isCitizen {\n        return \"Eligible to vote\"\n    } else {\n        return \"Not eligible to vote\"\n    }\n}\n\n// Example usage\nlet result = checkVotingEligibility(age: 20, isCitizen: true)\nprint(result)\n```"
  },
  {
    "task": "Design a function that returns the day of the week given a number from 1 to 7.",
    "code": "```swift\nfunc dayOfWeek(for number: Int) -> String {\n    switch number {\n    case 1:\n        return \"Sunday\"\n    case 2:\n        return \"Monday\"\n    case 3:\n        return \"Tuesday\"\n    case 4:\n        return \"Wednesday\"\n    case 5:\n        return \"Thursday\"\n    case 6:\n        return \"Friday\"\n    case 7:\n        return \"Saturday\"\n    default:\n        return \"Invalid\"\n    }\n}\n```"
  },
  {
    "task": "Write a program that determines if a word is found within a given sentence.",
    "code": "```swift\nimport Foundation\n\nfunc isWordInSentence(word: String, sentence: String) -> Bool {\n    let words = sentence.split(separator: \" \")\n    for w in words {\n        if w.caseInsensitiveCompare(word) == .orderedSame {\n            return true\n        }\n    }\n    return false\n}\n\nlet sentence = \"The quick brown fox jumps over the lazy dog\"\nlet word = \"fox\"\n\nif isWordInSentence(word: word, sentence: sentence) {\n    print(\"The word '\\(word)' is in the sentence.\")\n} else {\n    print(\"The word '\\(word)' is not in the sentence.\")\n}\n```"
  },
  {
    "task": "Create a script that checks if a number is within a specified range.",
    "code": "```swift\nlet number = 25\nlet lowerBound = 10\nlet upperBound = 50\n\nif number >= lowerBound && number <= upperBound {\n    print(\"The number \\(number) is within the range.\")\n} else {\n    print(\"The number \\(number) is outside the range.\")\n}\n```"
  },
  {
    "task": "Develop a routine to decide if a user input is a valid email address.",
    "code": "```swift\nimport Foundation\n\nfunc isValidEmail(_ email: String) -> Bool {\n    let emailRegEx = \"[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,64}\"\n    let emailPredicate = NSPredicate(format: \"SELF MATCHES %@\", emailRegEx)\n    return emailPredicate.evaluate(with: email)\n}\n\n// Example usage\nlet email = \"example@example.com\"\nif isValidEmail(email) {\n    print(\"Valid email address.\")\n} else {\n    print(\"Invalid email address.\")\n}\n```"
  },
  {
    "task": "Implement a program that categorizes a number as small, medium, or large.",
    "code": "```swift\nfunc categorizeNumber(_ number: Int) -> String {\n    if number < 10 {\n        return \"small\"\n    } else if number <= 100 {\n        return \"medium\"\n    } else {\n        return \"large\"\n    }\n}\n\nlet number = 42\nlet category = categorizeNumber(number)\nprint(\"The number \\(number) is categorized as \\(category).\")\n```"
  },
  {
    "task": "Design a function that outputs the season based on the month provided.",
    "code": "```swift\nfunc season(forMonth month: Int) -> String {\n    switch month {\n    case 12, 1, 2:\n        return \"Winter\"\n    case 3, 4, 5:\n        return \"Spring\"\n    case 6, 7, 8:\n        return \"Summer\"\n    case 9, 10, 11:\n        return \"Fall\"\n    default:\n        return \"Invalid month\"\n    }\n}\n\n// Example usage:\nlet month = 3\nprint(\"The season is \\(season(forMonth: month)).\")\n```"
  },
  {
    "task": "Write a program that checks if a string contains only alphabetic characters.",
    "code": "```swift\nfunc containsOnlyAlphabetic(input: String) -> Bool {\n    for character in input {\n        if !character.isLetter {\n            return false\n        }\n    }\n    return true\n}\n\nlet testString = \"HelloWorld\"\nprint(containsOnlyAlphabetic(input: testString)) // Output: true or false\n```"
  },
  {
    "task": "Create a routine that decides the type of triangle based on its angles.",
    "code": "```swift\nfunc triangleType(angle1: Int, angle2: Int, angle3: Int) -> String {\n    if angle1 + angle2 + angle3 != 180 {\n        return \"Not a triangle\"\n    } else if angle1 == 90 || angle2 == 90 || angle3 == 90 {\n        return \"Right triangle\"\n    } else if angle1 > 90 || angle2 > 90 || angle3 > 90 {\n        return \"Obtuse triangle\"\n    } else {\n        return \"Acute triangle\"\n    }\n}\n```"
  },
  {
    "task": "Develop a program that suggests a meal based on the time of day.",
    "code": "```swift\nimport Foundation\n\nfunc suggestMeal(for hour: Int) -> String {\n    switch hour {\n    case 6..<11:\n        return \"Breakfast\"\n    case 11..<16:\n        return \"Lunch\"\n    case 16..<21:\n        return \"Dinner\"\n    default:\n        return \"Snack\"\n    }\n}\n\nlet currentHour = Calendar.current.component(.hour, from: Date())\nlet mealSuggestion = suggestMeal(for: currentHour)\nprint(\"Suggested Meal: \\(mealSuggestion)\")\n```"
  },
  {
    "task": "Implement a function that determines if a point lies within a circle given its radius.",
    "code": "```swift\nfunc isPointInCircle(x: Double, y: Double, centerX: Double, centerY: Double, radius: Double) -> Bool {\n    let dx = x - centerX\n    let dy = y - centerY\n    let distanceSquared = dx * dx + dy * dy\n    let radiusSquared = radius * radius\n    return distanceSquared <= radiusSquared\n}\n```"
  },
  {
    "task": "Design a script that calculates overtime pay based on hours worked.",
    "code": "```swift\nlet regularHours = 40\nlet overtimeRate = 1.5\nlet hourlyWage = 20.0\n\nfunc calculatePay(hoursWorked: Double) -> Double {\n    if hoursWorked > Double(regularHours) {\n        let overtimeHours = hoursWorked - Double(regularHours)\n        let regularPay = Double(regularHours) * hourlyWage\n        let overtimePay = overtimeHours * hourlyWage * overtimeRate\n        return regularPay + overtimePay\n    } else {\n        return hoursWorked * hourlyWage\n    }\n}\n\nlet hoursWorked = 45.0\nlet totalPay = calculatePay(hoursWorked: hoursWorked)\nprint(\"Total pay for \\(hoursWorked) hours is $\\(totalPay)\")\n```"
  },
  {
    "task": "Write a program that checks if two strings are anagrams of each other.",
    "code": "```swift\nfunc areAnagrams(_ str1: String, _ str2: String) -> Bool {\n    let sortedStr1 = String(str1.sorted())\n    let sortedStr2 = String(str2.sorted())\n    return sortedStr1 == sortedStr2\n}\n\nlet string1 = \"listen\"\nlet string2 = \"silent\"\n\nif areAnagrams(string1, string2) {\n    print(\"\\(string1) and \\(string2) are anagrams.\")\n} else {\n    print(\"\\(string1) and \\(string2) are not anagrams.\")\n}\n```"
  },
  {
    "task": "Create a function that classifies numbers as prime or composite.",
    "code": "```swift\nfunc classifyNumber(_ number: Int) -> String {\n    if number <= 1 {\n        return \"Neither prime nor composite\"\n    }\n    if number <= 3 {\n        return \"Prime\"\n    }\n    if number % 2 == 0 || number % 3 == 0 {\n        return \"Composite\"\n    }\n    var i = 5\n    while i * i <= number {\n        if number % i == 0 || number % (i + 2) == 0 {\n            return \"Composite\"\n        }\n        i += 6\n    }\n    return \"Prime\"\n}\n\n// Example usage:\n// let classification = classifyNumber(7)\n// print(classification)  // Output: Prime\n```"
  },
  {
    "task": "Develop a routine to determine if a number is a power of two.",
    "code": "```swift\nfunc isPowerOfTwo(_ n: Int) -> Bool {\n    if n <= 0 {\n        return false\n    }\n    return (n & (n - 1)) == 0\n}\n```"
  },
  {
    "task": "Implement a program that checks if a list is sorted in ascending order.",
    "code": "```swift\nfunc isSortedAscending(_ list: [Int]) -> Bool {\n    for i in 0..<list.count - 1 {\n        if list[i] > list[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n// Example usage:\nlet numbers = [1, 2, 3, 4, 5]\nprint(isSortedAscending(numbers)) // Output: true\n```"
  },
  {
    "task": "Design a function that suggests a sport based on the weather conditions.",
    "code": "```swift\nfunc suggestSport(basedOnWeather weather: String) -> String {\n    switch weather.lowercased() {\n    case \"sunny\":\n        return \"Tennis\"\n    case \"rainy\":\n        return \"Swimming\"\n    case \"snowy\":\n        return \"Skiing\"\n    case \"windy\":\n        return \"Sailing\"\n    default:\n        return \"Indoor Gym\"\n    }\n}\n\n// Example usage:\nlet sportSuggestion = suggestSport(basedOnWeather: \"Sunny\")\nprint(\"Suggested sport: \\(sportSuggestion)\")\n```"
  },
  {
    "task": "Write a program that determines if an entered date is valid.",
    "code": "```swift\nimport Foundation\n\nfunc isValidDate(year: Int, month: Int, day: Int) -> Bool {\n    var dateComponents = DateComponents()\n    dateComponents.year = year\n    dateComponents.month = month\n    dateComponents.day = day\n    \n    let calendar = Calendar.current\n    return calendar.date(from: dateComponents) != nil\n}\n\nprint(\"Enter year:\")\nif let year = Int(readLine() ?? \"\") {\n    print(\"Enter month:\")\n    if let month = Int(readLine() ?? \"\") {\n        print(\"Enter day:\")\n        if let day = Int(readLine() ?? \"\") {\n            if isValidDate(year: year, month: month, day: day) {\n                print(\"The date is valid.\")\n            } else {\n                print(\"The date is invalid.\")\n            }\n        } else {\n            print(\"Invalid input for day.\")\n        }\n    } else {\n        print(\"Invalid input for month.\")\n    }\n} else {\n    print(\"Invalid input for year.\")\n}\n```"
  },
  {
    "task": "Create a script to decide which of two products to buy based on price and reviews.",
    "code": "```swift\nlet product1Price = 49.99\nlet product1Reviews = 4.5\n\nlet product2Price = 59.99\nlet product2Reviews = 4.7\n\nlet budget = 55.00\n\nif product1Price <= budget && product2Price <= budget {\n    if product1Reviews > product2Reviews {\n        print(\"Buy Product 1\")\n    } else {\n        print(\"Buy Product 2\")\n    }\n} else if product1Price <= budget {\n    print(\"Buy Product 1\")\n} else if product2Price <= budget {\n    print(\"Buy Product 2\")\n} else {\n    print(\"Neither product is affordable\")\n}\n```"
  },
  {
    "task": "Develop a function that categorizes a person\u2019s BMI as underweight, normal, overweight, or obese.",
    "code": "```swift\nfunc categorizeBMI(bmi: Double) -> String {\n    if bmi < 18.5 {\n        return \"Underweight\"\n    } else if bmi < 24.9 {\n        return \"Normal\"\n    } else if bmi < 29.9 {\n        return \"Overweight\"\n    } else {\n        return \"Obese\"\n    }\n}\n```"
  },
  {
    "task": "Implement a program that checks if a credit card number is valid using the Luhn algorithm.",
    "code": "```swift\nfunc isValidCreditCardNumber(_ number: String) -> Bool {\n    var sum = 0\n    let reversedDigits = number.reversed().map { Int(String($0)) ?? 0 }\n\n    for (index, digit) in reversedDigits.enumerated() {\n        if index % 2 == 1 {\n            var doubled = digit * 2\n            if doubled > 9 {\n                doubled -= 9\n            }\n            sum += doubled\n        } else {\n            sum += digit\n        }\n    }\n\n    return sum % 10 == 0\n}\n\n// Example usage:\nlet cardNumber = \"4532015112830366\"\nprint(isValidCreditCardNumber(cardNumber)) // Outputs true or false\n```"
  },
  {
    "task": "Design a routine that outputs a greeting based on the current time of day.",
    "code": "```swift\nimport Foundation\n\nfunc greetingBasedOnTime() {\n    let currentTime = Calendar.current.component(.hour, from: Date())\n    \n    if currentTime >= 5 && currentTime < 12 {\n        print(\"Good morning!\")\n    } else if currentTime >= 12 && currentTime < 17 {\n        print(\"Good afternoon!\")\n    } else if currentTime >= 17 && currentTime < 21 {\n        print(\"Good evening!\")\n    } else {\n        print(\"Good night!\")\n    }\n}\n\ngreetingBasedOnTime()\n```"
  },
  {
    "task": "Write a program that determines if a given word can be formed with a set of letters.",
    "code": "```swift\nfunc canFormWord(word: String, letters: String) -> Bool {\n    var letterCounts = [Character: Int]()\n    \n    for letter in letters {\n        letterCounts[letter, default: 0] += 1\n    }\n    \n    for char in word {\n        if let count = letterCounts[char], count > 0 {\n            letterCounts[char]! -= 1\n        } else {\n            return false\n        }\n    }\n    \n    return true\n}\n\n// Example usage:\nlet word = \"apple\"\nlet letters = \"ppale\"\nprint(canFormWord(word: word, letters: letters)) // Output: true\n```"
  },
  {
    "task": "Create a function that outputs the appropriate greeting based on the day of the week.",
    "code": "```swift\nfunc greeting(for dayOfWeek: String) -> String {\n    switch dayOfWeek.lowercased() {\n    case \"monday\":\n        return \"Start of a new week! Happy Monday!\"\n    case \"tuesday\":\n        return \"It's Tuesday! Keep going!\"\n    case \"wednesday\":\n        return \"Midweek! Happy Wednesday!\"\n    case \"thursday\":\n        return \"Almost there! Happy Thursday!\"\n    case \"friday\":\n        return \"It's Friday! Weekend is near!\"\n    case \"saturday\":\n        return \"Happy Saturday! Enjoy your weekend!\"\n    case \"sunday\":\n        return \"Relax, it's Sunday!\"\n    default:\n        return \"Invalid day of the week.\"\n    }\n}\n```"
  },
  {
    "task": "Develop a system to determine if a person qualifies for a senior citizen discount.",
    "code": "```swift\nfunc qualifiesForSeniorDiscount(age: Int) -> Bool {\n    if age >= 65 {\n        return true\n    } else {\n        return false\n    }\n}\n\n// Example usage:\nlet age = 70\nif qualifiesForSeniorDiscount(age: age) {\n    print(\"Qualifies for senior citizen discount.\")\n} else {\n    print(\"Does not qualify for senior citizen discount.\")\n}\n```"
  },
  {
    "task": "Implement a function that checks if a number is a perfect square.",
    "code": "```swift\nfunc isPerfectSquare(_ num: Int) -> Bool {\n    if num < 0 {\n        return false\n    }\n    \n    let root = Int(Double(num).squareRoot())\n    return root * root == num\n}\n```"
  },
  {
    "task": "Design a program that outputs the correct shipping cost based on weight and distance.",
    "code": "```swift\nfunc calculateShippingCost(weight: Double, distance: Double) -> Double {\n    var cost: Double = 0.0\n    \n    if weight <= 5.0 {\n        if distance <= 100 {\n            cost = 5.0\n        } else if distance <= 500 {\n            cost = 10.0\n        } else {\n            cost = 15.0\n        }\n    } else if weight <= 20.0 {\n        if distance <= 100 {\n            cost = 10.0\n        } else if distance <= 500 {\n            cost = 20.0\n        } else {\n            cost = 30.0\n        }\n    } else {\n        if distance <= 100 {\n            cost = 15.0\n        } else if distance <= 500 {\n            cost = 30.0\n        } else {\n            cost = 45.0\n        }\n    }\n    \n    return cost\n}\n\n// Example usage:\nlet weight = 8.0\nlet distance = 250.0\nlet shippingCost = calculateShippingCost(weight: weight, distance: distance)\nprint(\"The shipping cost is: \\(shippingCost)\")\n```"
  },
  {
    "task": "Write a routine that chooses the correct pronoun based on gender input.",
    "code": "```swift\nfunc choosePronoun(gender: String) -> String {\n    switch gender.lowercased() {\n    case \"male\":\n        return \"he\"\n    case \"female\":\n        return \"she\"\n    case \"non-binary\":\n        return \"they\"\n    default:\n        return \"they\"\n    }\n}\n\n// Example usage:\nlet pronoun = choosePronoun(gender: \"female\")\nprint(pronoun) // Output: she\n```"
  },
  {
    "task": "Create a program that checks if a user input is a palindrome number.",
    "code": "```swift\nimport Foundation\n\nfunc isPalindromeNumber(_ number: Int) -> Bool {\n    let original = String(number)\n    let reversed = String(original.reversed())\n    return original == reversed\n}\n\nprint(\"Enter a number:\")\nif let input = readLine(), let number = Int(input) {\n    if isPalindromeNumber(number) {\n        print(\"\\(number) is a palindrome.\")\n    } else {\n        print(\"\\(number) is not a palindrome.\")\n    }\n} else {\n    print(\"Invalid input.\")\n}\n```"
  },
  {
    "task": "Develop a script to decide if a number is a perfect number.",
    "code": "```swift\nfunc isPerfectNumber(_ number: Int) -> Bool {\n    guard number > 1 else { return false }\n    \n    var sum = 0\n    for i in 1..<number {\n        if number % i == 0 {\n            sum += i\n        }\n    }\n    \n    return sum == number\n}\n\nlet number = 28\nif isPerfectNumber(number) {\n    print(\"\\(number) is a perfect number.\")\n} else {\n    print(\"\\(number) is not a perfect number.\")\n}\n```"
  },
  {
    "task": "Implement a system that determines the winner in a rock-paper-scissors game.",
    "code": "```swift\nfunc determineWinner(player1: String, player2: String) -> String {\n    if player1 == player2 {\n        return \"It's a tie!\"\n    } else if (player1 == \"rock\" && player2 == \"scissors\") ||\n              (player1 == \"scissors\" && player2 == \"paper\") ||\n              (player1 == \"paper\" && player2 == \"rock\") {\n        return \"Player 1 wins!\"\n    } else if (player2 == \"rock\" && player1 == \"scissors\") ||\n              (player2 == \"scissors\" && player1 == \"paper\") ||\n              (player2 == \"paper\" && player1 == \"rock\") {\n        return \"Player 2 wins!\"\n    } else {\n        return \"Invalid input!\"\n    }\n}\n\n// Example usage:\nlet result = determineWinner(player1: \"rock\", player2: \"scissors\")\nprint(result)\n```"
  },
  {
    "task": "Design a function that suggests a movie genre based on user mood.",
    "code": "```swift\nfunc suggestGenre(basedOn mood: String) -> String {\n    switch mood.lowercased() {\n    case \"happy\":\n        return \"Comedy\"\n    case \"sad\":\n        return \"Drama\"\n    case \"adventurous\":\n        return \"Action\"\n    case \"romantic\":\n        return \"Romance\"\n    case \"curious\":\n        return \"Mystery\"\n    case \"scared\":\n        return \"Horror\"\n    default:\n        return \"Documentary\"\n    }\n}\n\n// Example usage:\nlet mood = \"happy\"\nlet genre = suggestGenre(basedOn: mood)\nprint(\"Suggested genre: \\(genre)\")\n```"
  },
  {
    "task": "Write a program that checks if a file extension is valid for an image file.",
    "code": "```swift\nimport Foundation\n\nfunc isValidImageFileExtension(_ fileName: String) -> Bool {\n    let validExtensions = [\"jpg\", \"jpeg\", \"png\", \"gif\", \"bmp\", \"tiff\", \"webp\"]\n    guard let fileExtension = fileName.split(separator: \".\").last else {\n        return false\n    }\n    return validExtensions.contains(fileExtension.lowercased())\n}\n\n// Example usage\nlet fileName = \"example.png\"\nif isValidImageFileExtension(fileName) {\n    print(\"The file extension is valid for an image file.\")\n} else {\n    print(\"The file extension is not valid for an image file.\")\n}\n```"
  },
  {
    "task": "Create a routine that decides the appropriate currency symbol based on country.",
    "code": "```swift\nfunc currencySymbol(for country: String) -> String {\n    switch country.lowercased() {\n    case \"united states\":\n        return \"$\"\n    case \"canada\":\n        return \"C$\"\n    case \"united kingdom\":\n        return \"\u00a3\"\n    case \"european union\":\n        return \"\u20ac\"\n    case \"japan\":\n        return \"\u00a5\"\n    case \"china\":\n        return \"\u00a5\"\n    case \"switzerland\":\n        return \"CHF\"\n    case \"australia\":\n        return \"A$\"\n    default:\n        return \"Currency not found\"\n    }\n}\n```"
  },
  {
    "task": "Develop a function that determines if a string is a valid palindrome ignoring spaces and punctuation.",
    "code": "```swift\nfunc isValidPalindrome(_ s: String) -> Bool {\n    let filteredString = s.lowercased().filter { $0.isLetter }\n    return filteredString == String(filteredString.reversed())\n}\n```"
  },
  {
    "task": "Implement a program that checks if a number is in the Fibonacci sequence.",
    "code": "```swift\nfunc isFibonacci(_ num: Int) -> Bool {\n    if num < 0 {\n        return false\n    }\n    var a = 0\n    var b = 1\n    while b < num {\n        let temp = a\n        a = b\n        b = temp + b\n    }\n    return num == b || num == 0\n}\n\n// Example usage\nlet number = 13\nprint(isFibonacci(number))  // Output: true\n```"
  },
  {
    "task": "Design a script to calculate the correct tip based on service quality rating.",
    "code": "```swift\nimport Foundation\n\nfunc calculateTip(billAmount: Double, serviceQuality: String) -> Double {\n    let tipPercentage: Double\n    \n    switch serviceQuality.lowercased() {\n    case \"excellent\":\n        tipPercentage = 0.20\n    case \"good\":\n        tipPercentage = 0.15\n    case \"average\":\n        tipPercentage = 0.10\n    case \"poor\":\n        tipPercentage = 0.05\n    default:\n        tipPercentage = 0.0\n    }\n    \n    return billAmount * tipPercentage\n}\n\n// Example usage\nlet billAmount = 100.0\nlet serviceQuality = \"Good\"\nlet tip = calculateTip(billAmount: billAmount, serviceQuality: serviceQuality)\nprint(\"Tip amount: \\(tip)\")\n```"
  },
  {
    "task": "Write a function that determines if a year is a century year.",
    "code": "```swift\nfunc isCenturyYear(year: Int) -> Bool {\n    return year % 100 == 0\n}\n```"
  },
  {
    "task": "Create a program that checks if a date falls on a weekend.",
    "code": "```swift\nimport Foundation\n\nfunc isWeekend(date: Date) -> Bool {\n    let calendar = Calendar.current\n    let components = calendar.component(.weekday, from: date)\n    return components == 1 || components == 7\n}\n\n// Example usage\nlet dateFormatter = DateFormatter()\ndateFormatter.dateFormat = \"yyyy-MM-dd\"\n\nif let date = dateFormatter.date(from: \"2023-10-22\") { // Change the date here\n    if isWeekend(date: date) {\n        print(\"The date falls on a weekend.\")\n    } else {\n        print(\"The date does not fall on a weekend.\")\n    }\n}\n```"
  },
  {
    "task": "Develop a routine that suggests a book based on genre preference.",
    "code": "```swift\nfunc suggestBook(genre: String) -> String {\n    switch genre.lowercased() {\n    case \"fantasy\":\n        return \"The Hobbit by J.R.R. Tolkien\"\n    case \"science fiction\":\n        return \"Dune by Frank Herbert\"\n    case \"mystery\":\n        return \"The Girl with the Dragon Tattoo by Stieg Larsson\"\n    case \"romance\":\n        return \"Pride and Prejudice by Jane Austen\"\n    case \"horror\":\n        return \"It by Stephen King\"\n    default:\n        return \"No suggestion available for this genre\"\n    }\n}\n\n// Example usage:\nlet genrePreference = \"fantasy\"\nlet bookSuggestion = suggestBook(genre: genrePreference)\nprint(\"Suggested Book: \\(bookSuggestion)\")\n```"
  },
  {
    "task": "Implement a system that determines if a student passes or fails based on their grades.",
    "code": "```swift\nfunc determinePassOrFail(grades: [Int]) -> String {\n    guard !grades.isEmpty else {\n        return \"No grades available\"\n    }\n    \n    let average = grades.reduce(0, +) / grades.count\n    \n    if average >= 50 {\n        return \"Pass\"\n    } else {\n        return \"Fail\"\n    }\n}\n\n// Example usage\nlet studentGrades = [70, 85, 60, 90]\nlet result = determinePassOrFail(grades: studentGrades)\nprint(result)  // Output: Pass\n```"
  },
  {
    "task": "Design a function to validate if a string is a valid URL.",
    "code": "```swift\nimport Foundation\n\nfunc isValidURL(_ urlString: String) -> Bool {\n    if let url = URL(string: urlString) {\n        return UIApplication.shared.canOpenURL(url)\n    } else {\n        return false\n    }\n}\n```"
  },
  {
    "task": "Write a program that checks if a point is inside a rectangle given its coordinates.",
    "code": "```swift\nimport Foundation\n\nfunc isPointInsideRectangle(px: Double, py: Double, rx1: Double, ry1: Double, rx2: Double, ry2: Double) -> Bool {\n    let minX = min(rx1, rx2)\n    let maxX = max(rx1, rx2)\n    let minY = min(ry1, ry2)\n    let maxY = max(ry1, ry2)\n    \n    return px >= minX && px <= maxX && py >= minY && py <= maxY\n}\n\n// Example usage:\nlet pointX = 5.0\nlet pointY = 5.0\nlet rectX1 = 1.0\nlet rectY1 = 1.0\nlet rectX2 = 10.0\nlet rectY2 = 10.0\n\nlet result = isPointInsideRectangle(px: pointX, py: pointY, rx1: rectX1, ry1: rectY1, rx2: rectX2, ry2: rectY2)\nprint(\"Is the point inside the rectangle? \\(result)\")\n```"
  },
  {
    "task": "Create a script to determine if a word can be constructed from a given set of letters.",
    "code": "```swift\nfunc canConstructWord(_ word: String, from letters: String) -> Bool {\n    var letterCounts: [Character: Int] = [:]\n    \n    for letter in letters {\n        letterCounts[letter, default: 0] += 1\n    }\n    \n    for character in word {\n        if let count = letterCounts[character], count > 0 {\n            letterCounts[character]! -= 1\n        } else {\n            return false\n        }\n    }\n    \n    return true\n}\n\n// Example usage\nlet word = \"hello\"\nlet letters = \"hleol\"\nprint(canConstructWord(word, from: letters))  // Output: true\n```"
  },
  {
    "task": "Develop a routine that calculates insurance premiums based on age and driving record.",
    "code": "```swift\nfunc calculateInsurancePremium(age: Int, hasGoodDrivingRecord: Bool) -> Double {\n    let basePremium = 1000.0\n    var premium = basePremium\n    \n    if age < 25 {\n        premium += 500\n    } else if age >= 25 && age < 50 {\n        premium += 200\n    } else {\n        premium += 100\n    }\n    \n    if hasGoodDrivingRecord {\n        premium *= 0.8\n    } else {\n        premium *= 1.2\n    }\n    \n    return premium\n}\n\n// Example usage:\nlet premium1 = calculateInsurancePremium(age: 24, hasGoodDrivingRecord: true)\nlet premium2 = calculateInsurancePremium(age: 30, hasGoodDrivingRecord: false)\n```"
  },
  {
    "task": "Implement a program that checks for palindrome sentences.",
    "code": "```swift\nimport Foundation\n\nfunc isPalindrome(_ sentence: String) -> Bool {\n    let cleanedSentence = sentence.lowercased().filter { $0.isLetter }\n    return cleanedSentence == String(cleanedSentence.reversed())\n}\n\nlet testSentences = [\n    \"A man, a plan, a canal, Panama\",\n    \"Was it a car or a cat I saw?\",\n    \"No lemon, no melon\",\n    \"Hello, World!\"\n]\n\nfor sentence in testSentences {\n    if isPalindrome(sentence) {\n        print(\"\\\"\\(sentence)\\\" is a palindrome.\")\n    } else {\n        print(\"\\\"\\(sentence)\\\" is not a palindrome.\")\n    }\n}\n```"
  },
  {
    "task": "Design a function to evaluate if a string contains balanced parentheses.",
    "code": "```swift\nfunc isBalanced(_ s: String) -> Bool {\n    var stack: [Character] = []\n    \n    for char in s {\n        if char == \"(\" {\n            stack.append(char)\n        } else if char == \")\" {\n            if stack.isEmpty {\n                return false\n            }\n            stack.removeLast()\n        }\n    }\n    \n    return stack.isEmpty\n}\n```"
  },
  {
    "task": "Write a program that suggests a pet based on living conditions and preferences.",
    "code": "```swift\nfunc suggestPet(forLivingConditions conditions: String, prefersLowMaintenance: Bool) -> String {\n    if conditions == \"apartment\" {\n        if prefersLowMaintenance {\n            return \"Fish\"\n        } else {\n            return \"Cat\"\n        }\n    } else if conditions == \"house\" {\n        if prefersLowMaintenance {\n            return \"Bird\"\n        } else {\n            return \"Dog\"\n        }\n    } else {\n        return \"Pet Rock\"\n    }\n}\n\nlet livingConditions = \"apartment\"\nlet lowMaintenancePreference = true\nlet petSuggestion = suggestPet(forLivingConditions: livingConditions, prefersLowMaintenance: lowMaintenancePreference)\nprint(\"Suggested pet: \\(petSuggestion)\")\n```"
  },
  {
    "task": "Create a routine that determines if a phone number is valid based on format.",
    "code": "```swift\nfunc isValidPhoneNumber(_ phoneNumber: String) -> Bool {\n    // Assuming a valid phone number format is (XXX) XXX-XXXX\n    let validFormat = \"^\\\\(\\\\d{3}\\\\) \\\\d{3}-\\\\d{4}$\"\n    let regex = try! NSRegularExpression(pattern: validFormat)\n    let range = NSRange(location: 0, length: phoneNumber.utf16.count)\n    return regex.firstMatch(in: phoneNumber, options: [], range: range) != nil\n}\n\n// Example Usage\nlet phoneNumber = \"(123) 456-7890\"\nlet isValid = isValidPhoneNumber(phoneNumber)\nprint(\"Is valid: \\(isValid)\")\n```"
  },
  {
    "task": "Develop a function that checks if two rectangles overlap.",
    "code": "```swift\nstruct Rectangle {\n    var x: Int\n    var y: Int\n    var width: Int\n    var height: Int\n}\n\nfunc doRectanglesOverlap(_ rect1: Rectangle, _ rect2: Rectangle) -> Bool {\n    if rect1.x >= rect2.x + rect2.width || rect2.x >= rect1.x + rect1.width {\n        return false\n    }\n    if rect1.y >= rect2.y + rect2.height || rect2.y >= rect1.y + rect1.height {\n        return false\n    }\n    return true\n}\n```"
  },
  {
    "task": "Implement a program that chooses a beverage based on user input time.",
    "code": "```swift\nimport Foundation\n\nfunc chooseBeverage(for hour: Int) -> String {\n    switch hour {\n    case 6..<12:\n        return \"Coffee\"\n    case 12..<17:\n        return \"Tea\"\n    case 17..<22:\n        return \"Juice\"\n    default:\n        return \"Water\"\n    }\n}\n\nfunc getBeverage() {\n    let currentHour = Calendar.current.component(.hour, from: Date())\n    let beverage = chooseBeverage(for: currentHour)\n    print(\"Recommended beverage: \\(beverage)\")\n}\n\ngetBeverage()\n```"
  },
  {
    "task": "Design a script to determine if a URL is secure (HTTPS).",
    "code": "```swift\nfunc isSecureURL(url: String) -> Bool {\n    return url.hasPrefix(\"https://\")\n}\n\n// Example usage:\nlet url1 = \"https://www.example.com\"\nlet url2 = \"http://www.example.com\"\n\nprint(isSecureURL(url: url1)) // Output: true\nprint(isSecureURL(url: url2)) // Output: false\n```"
  },
  {
    "task": "Write a function that outputs different messages based on the input number's divisibility.",
    "code": "```swift\nfunc checkDivisibility(of number: Int) -> String {\n    if number % 15 == 0 {\n        return \"Divisible by both 3 and 5\"\n    } else if number % 3 == 0 {\n        return \"Divisible by 3\"\n    } else if number % 5 == 0 {\n        return \"Divisible by 5\"\n    } else {\n        return \"Not divisible by 3 or 5\"\n    }\n}\n```"
  },
  {
    "task": "Create a program to decide if a person should bring an umbrella based on the weather forecast.",
    "code": "```swift\nimport Foundation\n\nfunc shouldBringUmbrella(weatherForecast: String) -> String {\n    switch weatherForecast.lowercased() {\n    case \"rainy\", \"stormy\", \"showers\":\n        return \"Yes, you should bring an umbrella.\"\n    case \"cloudy\", \"partly cloudy\":\n        return \"Maybe, you might want to bring an umbrella just in case.\"\n    case \"sunny\", \"clear\":\n        return \"No, you do not need to bring an umbrella.\"\n    default:\n        return \"Weather forecast is unclear, decide based on your best judgment.\"\n    }\n}\n\nlet forecast = \"Rainy\"\nprint(shouldBringUmbrella(weatherForecast: forecast))\n```"
  },
  {
    "task": "Develop a routine that checks if a chess move is valid.",
    "code": "```swift\nenum ChessPiece {\n    case pawn, rook, knight, bishop, queen, king\n}\n\nstruct Position {\n    var x: Int\n    var y: Int\n}\n\nfunc isValidMove(piece: ChessPiece, from: Position, to: Position) -> Bool {\n    switch piece {\n    case .pawn:\n        return from.x == to.x && (to.y == from.y + 1 || to.y == from.y + 2)\n    case .rook:\n        return from.x == to.x || from.y == to.y\n    case .knight:\n        return (abs(from.x - to.x) == 2 && abs(from.y - to.y) == 1) || \n               (abs(from.x - to.x) == 1 && abs(from.y - to.y) == 2)\n    case .bishop:\n        return abs(from.x - to.x) == abs(from.y - to.y)\n    case .queen:\n        return from.x == to.x || from.y == to.y || \n               abs(from.x - to.x) == abs(from.y - to.y)\n    case .king:\n        return abs(from.x - to.x) <= 1 && abs(from.y - to.y) <= 1\n    }\n}\n```"
  },
  {
    "task": "Implement a program that outputs the number of days in a given month.",
    "code": "```swift\nfunc numberOfDays(in month: Int, year: Int) -> Int {\n    switch month {\n    case 1, 3, 5, 7, 8, 10, 12:\n        return 31\n    case 4, 6, 9, 11:\n        return 30\n    case 2:\n        if (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0) {\n            return 29 // Leap year\n        } else {\n            return 28\n        }\n    default:\n        return 0\n    }\n}\n\nlet month = 2\nlet year = 2024\nlet days = numberOfDays(in: month, year: year)\nprint(\"Number of days: \\(days)\")\n```"
  },
  {
    "task": "Design a function that validates if a string is a valid hexadecimal number.",
    "code": "```swift\nfunc isValidHexadecimal(_ input: String) -> Bool {\n    if input.isEmpty {\n        return false\n    }\n    \n    for char in input {\n        switch char {\n        case \"0\"...\"9\", \"a\"...\"f\", \"A\"...\"F\":\n            continue\n        default:\n            return false\n        }\n    }\n    \n    return true\n}\n```"
  },
  {
    "task": "Write a script that checks if a word is present in a list of predefined words.",
    "code": "```swift\nlet predefinedWords = [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]\nlet wordToCheck = \"banana\"\n\nif predefinedWords.contains(wordToCheck) {\n    print(\"\\(wordToCheck) is in the predefined words list.\")\n} else {\n    print(\"\\(wordToCheck) is not in the predefined words list.\")\n}\n```"
  },
  {
    "task": "Create a routine to decide the correct tax bracket for a given income.",
    "code": "```swift\nfunc determineTaxBracket(for income: Double) -> String {\n    if income <= 9875 {\n        return \"10% Bracket\"\n    } else if income <= 40125 {\n        return \"12% Bracket\"\n    } else if income <= 85525 {\n        return \"22% Bracket\"\n    } else if income <= 163300 {\n        return \"24% Bracket\"\n    } else if income <= 207350 {\n        return \"32% Bracket\"\n    } else if income <= 518400 {\n        return \"35% Bracket\"\n    } else {\n        return \"37% Bracket\"\n    }\n}\n```"
  },
  {
    "task": "Develop a function that determines if a point is within a triangle.",
    "code": "```swift\nimport Foundation\n\nstruct Point {\n    let x: Double\n    let y: Double\n}\n\nstruct Triangle {\n    let a: Point\n    let b: Point\n    let c: Point\n}\n\nfunc sign(_ p1: Point, _ p2: Point, _ p3: Point) -> Double {\n    return (p1.x - p3.x) * (p2.y - p3.y) - (p2.x - p3.x) * (p1.y - p3.y)\n}\n\nfunc isPointInTriangle(point: Point, triangle: Triangle) -> Bool {\n    let d1 = sign(point, triangle.a, triangle.b)\n    let d2 = sign(point, triangle.b, triangle.c)\n    let d3 = sign(point, triangle.c, triangle.a)\n    \n    let hasNeg = (d1 < 0) || (d2 < 0) || (d3 < 0)\n    let hasPos = (d1 > 0) || (d2 > 0) || (d3 > 0)\n    \n    return !(hasNeg && hasPos)\n}\n```"
  },
  {
    "task": "Implement a program that checks if a given string is a valid binary number.",
    "code": "```swift\nfunc isValidBinaryNumber(_ input: String) -> Bool {\n    for character in input {\n        if character != \"0\" && character != \"1\" {\n            return false\n        }\n    }\n    return true\n}\n\n// Example usage\nlet binaryString = \"1100101\"\nprint(isValidBinaryNumber(binaryString))  // Output: true\n\nlet nonBinaryString = \"102011\"\nprint(isValidBinaryNumber(nonBinaryString))  // Output: false\n```"
  },
  {
    "task": "Design a system to evaluate the risk level of an investment based on criteria.",
    "code": "```swift\nfunc evaluateInvestmentRisk(basedOnCriteria criteria: [String: Any]) -> String {\n    guard let investmentAmount = criteria[\"investmentAmount\"] as? Double,\n          let marketCondition = criteria[\"marketCondition\"] as? String,\n          let investmentDuration = criteria[\"investmentDuration\"] as? Int else {\n        return \"Invalid criteria\"\n    }\n    \n    if investmentAmount > 100000 {\n        if marketCondition == \"volatile\" {\n            return \"High Risk\"\n        } else if marketCondition == \"stable\" {\n            return \"Moderate Risk\"\n        }\n    } else if investmentAmount > 50000 {\n        if marketCondition == \"volatile\" {\n            return \"Moderate Risk\"\n        } else if marketCondition == \"stable\" {\n            return \"Low Risk\"\n        }\n    } else {\n        if investmentDuration > 5 {\n            return \"Low Risk\"\n        } else {\n            return \"Moderate Risk\"\n        }\n    }\n    \n    return \"Unknown Risk\"\n}\n\n// Example usage\nlet criteria: [String: Any] = [\n    \"investmentAmount\": 75000,\n    \"marketCondition\": \"stable\",\n    \"investmentDuration\": 3\n]\n\nlet riskLevel = evaluateInvestmentRisk(basedOnCriteria: criteria)\nprint(\"Risk Level: \\(riskLevel)\")\n```"
  },
  {
    "task": "Write a program that suggests a vacation destination based on budget and preferences.",
    "code": "```swift\nimport Foundation\n\nfunc suggestVacationDestination(budget: Int, preference: String) -> String {\n    if budget < 500 {\n        switch preference.lowercased() {\n        case \"beach\":\n            return \"Consider visiting a local beach or a nearby coastal town.\"\n        case \"mountain\":\n            return \"How about a camping trip in a nearby mountain area?\"\n        case \"city\":\n            return \"Explore a nearby city with affordable attractions.\"\n        default:\n            return \"Consider a staycation or exploring your local area.\"\n        }\n    } else if budget < 2000 {\n        switch preference.lowercased() {\n        case \"beach\":\n            return \"A Caribbean cruise might be a great option.\"\n        case \"mountain\":\n            return \"Visit the Rocky Mountains or the Swiss Alps.\"\n        case \"city\":\n            return \"Explore a vibrant city like New York or Tokyo.\"\n        default:\n            return \"Try a road trip to multiple destinations.\"\n        }\n    } else {\n        switch preference.lowercased() {\n        case \"beach\":\n            return \"Consider a luxurious resort in the Maldives.\"\n        case \"mountain\":\n            return \"An expedition to Mount Everest could be thrilling.\"\n        case \"city\":\n            return \"Experience the luxury of Paris or Dubai.\"\n        default:\n            return \"Embark on a world tour for an unforgettable experience.\"\n        }\n    }\n}\n\nlet budget = 1500\nlet preference = \"beach\"\nlet suggestion = suggestVacationDestination(budget: budget, preference: preference)\nprint(suggestion)\n```"
  },
  {
    "task": "Create a routine that checks if a username is already taken in a database.",
    "code": "```swift\nimport Foundation\n\nfunc isUsernameTaken(username: String, database: [String: Bool]) -> Bool {\n    if let isTaken = database[username] {\n        return isTaken\n    } else {\n        return false\n    }\n}\n\n// Example usage:\nlet userDatabase = [\"user1\": true, \"user2\": true, \"user3\": false]\nlet usernameToCheck = \"user2\"\nlet result = isUsernameTaken(username: usernameToCheck, database: userDatabase)\nprint(\"Is username '\\(usernameToCheck)' taken? \\(result)\")\n```"
  },
  {
    "task": "Develop a function that determines if a string is a valid IPv4 address.",
    "code": "```swift\nfunc isValidIPv4(_ address: String) -> Bool {\n    let parts = address.split(separator: \".\")\n    guard parts.count == 4 else { return false }\n    \n    for part in parts {\n        guard let number = Int(part), number >= 0 && number <= 255 else {\n            return false\n        }\n        if part.count > 1 && part.hasPrefix(\"0\") {\n            return false\n        }\n    }\n    \n    return true\n}\n```"
  },
  {
    "task": "Implement a program to decide which transportation method is quickest based on distance.",
    "code": "```swift\nimport Foundation\n\nfunc quickestTransportationMethod(for distance: Double) -> String {\n    if distance < 1.0 {\n        return \"Walking\"\n    } else if distance < 5.0 {\n        return \"Bicycle\"\n    } else if distance < 20.0 {\n        return \"Car\"\n    } else {\n        return \"Train\"\n    }\n}\n\nlet distance: Double = 10.0\nlet method = quickestTransportationMethod(for: distance)\nprint(\"The quickest transportation method for \\(distance) km is \\(method).\")\n```"
  },
  {
    "task": "Design a script to validate if a number is a prime number.",
    "code": "```swift\nfunc isPrime(_ number: Int) -> Bool {\n    if number <= 1 {\n        return false\n    }\n    if number <= 3 {\n        return true\n    }\n    if number % 2 == 0 || number % 3 == 0 {\n        return false\n    }\n    var i = 5\n    while i * i <= number {\n        if number % i == 0 || number % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n    }\n    return true\n}\n\n// Example usage\nlet number = 29\nprint(\"\\(number) is prime: \\(isPrime(number))\")\n```"
  },
  {
    "task": "Write a function that checks if a number is divisible by another number without remainder.",
    "code": "```swift\nfunc isDivisible(_ number: Int, by divisor: Int) -> Bool {\n    if divisor == 0 {\n        return false\n    }\n    return number % divisor == 0\n}\n```"
  },
  {
    "task": "Create a program that determines the type of a quadrilateral based on side lengths.",
    "code": "```swift\nfunc determineQuadrilateralType(a: Double, b: Double, c: Double, d: Double) -> String {\n    if a == b && b == c && c == d {\n        return \"Square\"\n    } else if a == c && b == d {\n        return \"Rectangle\"\n    } else if a == b && c == d {\n        return \"Rhombus\"\n    } else if (a == c && b != d) || (b == d && a != c) {\n        return \"Parallelogram\"\n    } else {\n        return \"Quadrilateral\"\n    }\n}\n\n// Example usage\nlet type = determineQuadrilateralType(a: 5, b: 5, c: 5, d: 5)\nprint(type) // Output: Square\n```"
  },
  {
    "task": "Develop a routine to check if a sentence contains all letters of the alphabet.",
    "code": "```swift\nfunc containsAllLetters(sentence: String) -> Bool {\n    let alphabet = Set(\"abcdefghijklmnopqrstuvwxyz\")\n    let sentenceLetters = Set(sentence.lowercased())\n    \n    return alphabet.isSubset(of: sentenceLetters)\n}\n\n// Example usage:\nlet result = containsAllLetters(sentence: \"The quick brown fox jumps over the lazy dog\")\nprint(result) // Output: true\n```"
  },
  {
    "task": "Implement a program that outputs the appropriate error message based on an error code.",
    "code": "```swift\nfunc errorMessage(forErrorCode errorCode: Int) -> String {\n    switch errorCode {\n    case 404:\n        return \"Error: Not Found\"\n    case 500:\n        return \"Error: Internal Server Error\"\n    case 403:\n        return \"Error: Forbidden\"\n    case 401:\n        return \"Error: Unauthorized\"\n    default:\n        return \"Error: Unknown Error Code\"\n    }\n}\n\n// Example usage:\nlet error = errorMessage(forErrorCode: 404)\nprint(error)\n```"
  },
  {
    "task": "Design a function that categorizes a movie rating as G, PG, PG-13, or R.",
    "code": "```swift\nfunc categorizeMovieRating(rating: Int) -> String {\n    if rating >= 0 && rating <= 12 {\n        return \"G\"\n    } else if rating >= 13 && rating <= 17 {\n        return \"PG\"\n    } else if rating == 18 {\n        return \"PG-13\"\n    } else if rating >= 19 {\n        return \"R\"\n    } else {\n        return \"Invalid rating\"\n    }\n}\n```"
  },
  {
    "task": "Write a script to check if a string is a valid Roman numeral.",
    "code": "```swift\nfunc isValidRomanNumeral(_ s: String) -> Bool {\n    let validRomanNumeralPattern = \"^(?i)(M{0,3})(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})$\"\n    let regex = try! NSRegularExpression(pattern: validRomanNumeralPattern, options: [])\n    let range = NSRange(location: 0, length: s.utf16.count)\n    return regex.firstMatch(in: s, options: [], range: range) != nil\n}\n\n// Example usage\nlet testString1 = \"XIV\"\nlet testString2 = \"MMXXI\"\nlet testString3 = \"IIII\"\n\nprint(isValidRomanNumeral(testString1)) // true\nprint(isValidRomanNumeral(testString2)) // true\nprint(isValidRomanNumeral(testString3)) // false\n```"
  },
  {
    "task": "Create a routine that decides if a person can retire based on age and years worked.",
    "code": "```swift\nfunc canRetire(age: Int, yearsWorked: Int) -> Bool {\n    if age >= 65 || yearsWorked >= 30 {\n        return true\n    } else if age >= 60 && yearsWorked >= 25 {\n        return true\n    } else {\n        return false\n    }\n}\n\n// Example usage:\nlet result = canRetire(age: 62, yearsWorked: 26)\nprint(\"Can retire:\", result)\n```"
  },
  {
    "task": "Develop a function that outputs a different emoji based on user mood input.",
    "code": "```swift\nfunc emojiForMood(mood: String) -> String {\n    switch mood.lowercased() {\n    case \"happy\":\n        return \"\ud83d\ude0a\"\n    case \"sad\":\n        return \"\ud83d\ude22\"\n    case \"angry\":\n        return \"\ud83d\ude21\"\n    case \"excited\":\n        return \"\ud83d\ude04\"\n    case \"tired\":\n        return \"\ud83d\ude34\"\n    default:\n        return \"\ud83d\ude10\"\n    }\n}\n\n// Example usage:\n// let emoji = emojiForMood(mood: \"happy\")\n// print(emoji) // Outputs: \ud83d\ude0a\n```"
  },
  {
    "task": "Implement a program that checks if a password meets security requirements.",
    "code": "```swift\nfunc checkPasswordSecurity(password: String) -> Bool {\n    let minLength = 8\n    let hasUppercase = password.range(of: \"[A-Z]\", options: .regularExpression) != nil\n    let hasLowercase = password.range(of: \"[a-z]\", options: .regularExpression) != nil\n    let hasDigit = password.range(of: \"[0-9]\", options: .regularExpression) != nil\n    let hasSpecialCharacter = password.range(of: \"[!@#$%^&*(),.?\\\":{}|<>]\", options: .regularExpression) != nil\n\n    if password.count >= minLength && hasUppercase && hasLowercase && hasDigit && hasSpecialCharacter {\n        return true\n    } else {\n        return false\n    }\n}\n\n// Example usage\nlet password = \"Password123!\"\nlet isSecure = checkPasswordSecurity(password: password)\nprint(\"Is the password secure? \\(isSecure)\")\n```"
  },
  {
    "task": "Design a script to determine if a number is a palindrome when reversed.",
    "code": "```swift\nfunc isPalindrome(_ number: Int) -> Bool {\n    let originalString = String(number)\n    let reversedString = String(originalString.reversed())\n    return originalString == reversedString\n}\n\n// Example usage\nlet number = 12321\nprint(\"Is \\(number) a palindrome? \\(isPalindrome(number))\")\n```"
  },
  {
    "task": "Write a function that evaluates if a given day is a holiday.",
    "code": "```swift\nfunc isHoliday(day: String) -> Bool {\n    switch day.lowercased() {\n    case \"new year's day\", \"independence day\", \"christmas\":\n        return true\n    default:\n        return false\n    }\n}\n```"
  },
  {
    "task": "Create a program to decide if a library book is overdue based on the due date.",
    "code": "```swift\nimport Foundation\n\nfunc isBookOverdue(dueDate: Date, currentDate: Date) -> Bool {\n    return currentDate > dueDate\n}\n\nlet dateFormatter = DateFormatter()\ndateFormatter.dateFormat = \"yyyy-MM-dd\"\n\nif let dueDate = dateFormatter.date(from: \"2023-10-01\"),\n   let currentDate = dateFormatter.date(from: \"2023-10-15\") {\n    if isBookOverdue(dueDate: dueDate, currentDate: currentDate) {\n        print(\"The book is overdue.\")\n    } else {\n        print(\"The book is not overdue.\")\n    }\n}\n```"
  },
  {
    "task": "Develop a routine that checks if a given year is part of a leap century.",
    "code": "```swift\nfunc isLeapCentury(year: Int) -> Bool {\n    if year % 400 == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\n// Example Usage\nlet year = 2000\nprint(\"\\(year) is a leap century: \\(isLeapCentury(year: year))\")\n```"
  },
  {
    "task": "Implement a system to determine the correct category for a product based on user input.",
    "code": "```swift\nimport Foundation\n\nfunc determineProductCategory(for product: String) -> String {\n    switch product.lowercased() {\n    case \"apple\", \"banana\", \"orange\":\n        return \"Fruits\"\n    case \"carrot\", \"broccoli\", \"spinach\":\n        return \"Vegetables\"\n    case \"chicken\", \"beef\", \"pork\":\n        return \"Meats\"\n    case \"milk\", \"cheese\", \"yogurt\":\n        return \"Dairy\"\n    case \"bread\", \"pasta\", \"rice\":\n        return \"Grains\"\n    default:\n        return \"Unknown Category\"\n    }\n}\n\nprint(\"Enter the product name:\")\nif let productInput = readLine() {\n    let category = determineProductCategory(for: productInput)\n    print(\"The product category is: \\(category)\")\n}\n```"
  }
]