[
  {
    "task": "Create a program that continuously asks the user to enter a number until they input a negative number.",
    "code": "```swift\nimport Foundation\n\nvar input: Int = 0\n\nwhile input >= 0 {\n    print(\"Enter a number:\")\n    if let line = readLine(), let number = Int(line) {\n        input = number\n    } else {\n        print(\"Invalid input. Please enter a valid number.\")\n    }\n}\n```"
  },
  {
    "task": "Write a function that doubles a number and repeats the process until the number is greater than 1000.",
    "code": "```swift\nfunc doubleUntilGreaterThanThousand(startingNumber: Int) -> Int {\n    var number = startingNumber\n    while number <= 1000 {\n        number *= 2\n    }\n    return number\n}\n```"
  },
  {
    "task": "Develop a routine to keep printing 'Hello, World!' until a counter reaches 10.",
    "code": "```swift\nvar counter = 0\nwhile counter < 10 {\n    print(\"Hello, World!\")\n    counter += 1\n}\n```"
  },
  {
    "task": "Construct a loop that checks if a randomly generated number is even, repeating until an odd number is found.",
    "code": "```swift\nimport Foundation\n\nvar number: Int\n\nrepeat {\n    number = Int.random(in: 1...100)\n} while number % 2 == 0\n\nprint(\"Found an odd number: \\(number)\")\n```"
  },
  {
    "task": "Design a countdown timer that prints each second until it reaches zero.",
    "code": "```swift\nimport Foundation\n\nvar countdown = 10  // Set the countdown start value\n\nwhile countdown >= 0 {\n    print(countdown)\n    countdown -= 1\n    sleep(1)\n}\n```"
  },
  {
    "task": "Implement a system where a user can keep adding items to a list until they type 'stop'.",
    "code": "```swift\nimport Foundation\n\nvar items: [String] = []\n\nprint(\"Enter items to add to the list. Type 'stop' to finish.\")\n\nwhile true {\n    if let input = readLine(), input.lowercased() != \"stop\" {\n        items.append(input)\n    } else {\n        break\n    }\n}\n\nprint(\"Final list of items:\")\nfor item in items {\n    print(item)\n}\n```"
  },
  {
    "task": "Write a script that simulates rolling a die and continues until a six is rolled.",
    "code": "```swift\nimport Foundation\n\nvar roll = 0\n\nwhile roll != 6 {\n    roll = Int.random(in: 1...6)\n    print(\"Rolled: \\(roll)\")\n}\n```"
  },
  {
    "task": "Create a program that asks for a password and keeps prompting until the correct password is entered.",
    "code": "```swift\nimport Foundation\n\nlet correctPassword = \"secret123\"\nvar inputPassword: String?\n\nrepeat {\n    print(\"Enter password:\")\n    inputPassword = readLine()\n} while inputPassword != correctPassword\n\nprint(\"Correct password entered!\")\n```"
  },
  {
    "task": "Design a loop that calculates the sum of entered numbers until the user enters zero.",
    "code": "```swift\nimport Foundation\n\nvar sum = 0\nvar input: Int\n\nrepeat {\n    print(\"Enter a number (0 to stop): \", terminator: \"\")\n    if let line = readLine(), let number = Int(line) {\n        input = number\n        sum += input\n    } else {\n        input = 0\n    }\n} while input != 0\n\nprint(\"The total sum is \\(sum)\")\n```"
  },
  {
    "task": "Implement a feature that prints Fibonacci numbers until a number exceeds 100.",
    "code": "```swift\nvar a = 0\nvar b = 1\n\nwhile a <= 100 {\n    print(a)\n    let next = a + b\n    a = b\n    b = next\n}\n```"
  },
  {
    "task": "Develop a loop that keeps halving a number until it becomes less than one.",
    "code": "```swift\nvar number: Double = 100.0\n\nwhile number >= 1.0 {\n    number /= 2.0\n}\n```"
  },
  {
    "task": "Write a program that asks for names and keeps storing them until the user enters 'done'.",
    "code": "```swift\nimport Foundation\n\nvar names: [String] = []\nvar input: String?\n\nrepeat {\n    print(\"Enter a name (or 'done' to finish): \", terminator: \"\")\n    input = readLine()\n    if let name = input, name.lowercased() != \"done\" {\n        names.append(name)\n    }\n} while input?.lowercased() != \"done\"\n\nprint(\"Names entered: \\(names)\")\n```"
  },
  {
    "task": "Create a process that keeps flipping a coin, recording results until there have been five heads.",
    "code": "```swift\nimport Foundation\n\nvar headsCount = 0\nvar results = [String]()\n\nwhile headsCount < 5 {\n    let flip = Bool.random() ? \"Heads\" : \"Tails\"\n    results.append(flip)\n    if flip == \"Heads\" {\n        headsCount += 1\n    }\n}\n\nprint(results)\n```"
  },
  {
    "task": "Implement a countdown that decreases by two each time, starting from 20, until it reaches zero.",
    "code": "```swift\nvar number = 20\nwhile number > 0 {\n    print(number)\n    number -= 2\n}\n```"
  },
  {
    "task": "Design a solution that repeatedly asks for user input and repeats it back until they type 'exit'.",
    "code": "```swift\nimport Foundation\n\nvar input: String?\n\nrepeat {\n    print(\"Enter something (type 'exit' to quit): \", terminator: \"\")\n    input = readLine()\n    if let userInput = input, userInput.lowercased() != \"exit\" {\n        print(\"You entered: \\(userInput)\")\n    }\n} while input?.lowercased() != \"exit\"\n```"
  },
  {
    "task": "Develop a loop to simulate a bank account balance, repeatedly deducting a fee until the balance is below zero.",
    "code": "```swift\nvar balance: Double = 100.0 // Initial balance\nlet fee: Double = 10.0 // Fee to deduct\n\nwhile balance >= 0 {\n    balance -= fee\n}\n```"
  },
  {
    "task": "Create a sequence generator that multiplies a number by three each time until it reaches or exceeds 100.",
    "code": "```swift\nvar number = 1\nwhile number < 100 {\n    print(number)\n    number *= 3\n}\n```"
  },
  {
    "task": "Write a program that keeps generating random numbers between 1 and 10 until it gets a five.",
    "code": "```swift\nimport Foundation\n\nvar number = 0\n\nwhile number != 5 {\n    number = Int.random(in: 1...10)\n    print(number)\n}\n```"
  },
  {
    "task": "Implement a system to keep checking the temperature and only stop when it falls below freezing.",
    "code": "```swift\nimport Foundation\n\nvar temperature = 10.0 // Initial temperature in degrees Celsius\n\nwhile temperature >= 0.0 {\n    // Simulate checking the temperature\n    temperature -= 0.5 // Example decrement, replace with real temperature check in practice\n    print(\"Current temperature: \\(temperature)\u00b0C\")\n}\n\nprint(\"Temperature has fallen below freezing.\")\n```"
  },
  {
    "task": "Construct a quiz game that continues asking questions until the player answers incorrectly.",
    "code": "```swift\nimport Foundation\n\nfunc startQuiz() {\n    let questions = [\n        (\"What is the capital of France?\", \"Paris\"),\n        (\"What is 2 + 2?\", \"4\"),\n        (\"What is the color of the sky on a clear day?\", \"Blue\")\n    ]\n    \n    var correct = true\n    var index = 0\n    \n    while correct && index < questions.count {\n        let (question, answer) = questions[index]\n        print(question)\n        \n        if let userAnswer = readLine(), userAnswer.lowercased() == answer.lowercased() {\n            print(\"Correct!\")\n            index += 1\n        } else {\n            correct = false\n            print(\"Incorrect. Game Over.\")\n        }\n    }\n}\n\nstartQuiz()\n```"
  },
  {
    "task": "Write a function that calculates factorials of a number, repeating the process for numbers 1 through 5.",
    "code": "```swift\nfunc calculateFactorials() {\n    var number = 1\n    while number <= 5 {\n        var factorial = 1\n        var i = 1\n        while i <= number {\n            factorial *= i\n            i += 1\n        }\n        print(\"Factorial of \\(number) is \\(factorial)\")\n        number += 1\n    }\n}\n\ncalculateFactorials()\n```"
  },
  {
    "task": "Create a loop that prints all even numbers between 1 and 50.",
    "code": "```swift\nvar number = 2\nwhile number <= 50 {\n    print(number)\n    number += 2\n}\n```"
  },
  {
    "task": "Design a program that continuously asks for user input until a palindrome is entered.",
    "code": "```swift\nimport Foundation\n\nfunc isPalindrome(_ string: String) -> Bool {\n    let cleanedString = string.lowercased().filter { $0.isLetter }\n    return cleanedString == String(cleanedString.reversed())\n}\n\nvar input: String? = nil\nrepeat {\n    print(\"Enter a string:\")\n    input = readLine()\n} while input == nil || !isPalindrome(input!)\nprint(\"You've entered a palindrome!\")\n```"
  },
  {
    "task": "Implement a countdown that decreases by one each second, starting from 100.",
    "code": "```swift\nimport Foundation\n\nvar countdown = 100\n\nwhile countdown > 0 {\n    print(countdown)\n    countdown -= 1\n    sleep(1)\n}\n\nprint(\"Countdown finished!\")\n```"
  },
  {
    "task": "Write a script that repeatedly asks for a number and adds it to a total until the total exceeds 500.",
    "code": "```swift\nimport Foundation\n\nvar total = 0\n\nwhile total <= 500 {\n    print(\"Enter a number:\")\n    if let input = readLine(), let number = Int(input) {\n        total += number\n    }\n}\n\nprint(\"Total exceeded 500: \\(total)\")\n```"
  },
  {
    "task": "Create a loop that generates random letters until the letter 'Z' appears.",
    "code": "```swift\nimport Foundation\n\nvar letter: Character = \"A\"\n\nwhile letter != \"Z\" {\n    letter = Character(UnicodeScalar(Int.random(in: 65...90))!)\n    print(letter)\n}\n```"
  },
  {
    "task": "Write a process that continues prompting for two numbers and prints their sum if it's even.",
    "code": "```swift\nimport Foundation\n\nwhile true {\n    print(\"Enter two numbers separated by space:\")\n    if let input = readLine() {\n        let numbers = input.split(separator: \" \").compactMap { Int($0) }\n        if numbers.count == 2 {\n            let sum = numbers[0] + numbers[1]\n            if sum % 2 == 0 {\n                print(\"The sum is even: \\(sum)\")\n            }\n        }\n    }\n}\n```"
  },
  {
    "task": "Develop a loop that simulates a traffic light sequence until a manual stop command is received.",
    "code": "```swift\nimport Foundation\n\nvar stopCommandReceived = false\nvar currentLight = \"Red\"\n\nwhile !stopCommandReceived {\n    switch currentLight {\n    case \"Red\":\n        print(\"Stop, the light is Red.\")\n        Thread.sleep(forTimeInterval: 3)\n        currentLight = \"Green\"\n    case \"Green\":\n        print(\"Go, the light is Green.\")\n        Thread.sleep(forTimeInterval: 3)\n        currentLight = \"Yellow\"\n    case \"Yellow\":\n        print(\"Caution, the light is Yellow.\")\n        Thread.sleep(forTimeInterval: 2)\n        currentLight = \"Red\"\n    default:\n        break\n    }\n\n    print(\"Enter 'stop' to end the simulation or press Enter to continue:\")\n    if let input = readLine(), input.lowercased() == \"stop\" {\n        stopCommandReceived = true\n    }\n}\n\nprint(\"Traffic light simulation ended.\")\n```"
  },
  {
    "task": "Implement a feature that keeps printing numbers in reverse order starting from 10.",
    "code": "```swift\nvar number = 10\nwhile number > 0 {\n    print(number)\n    number -= 1\n}\n```"
  },
  {
    "task": "Create a program that rolls two dice and continues until the sum is exactly seven.",
    "code": "```swift\nimport Foundation\n\nfunc rollDice() -> Int {\n    return Int.random(in: 1...6)\n}\n\nvar sum = 0\n\nwhile sum != 7 {\n    let die1 = rollDice()\n    let die2 = rollDice()\n    sum = die1 + die2\n    print(\"Rolled: \\(die1) + \\(die2) = \\(sum)\")\n}\n```"
  },
  {
    "task": "Design a loop that keeps asking for ages and prints the average once a negative age is entered.",
    "code": "```swift\nimport Foundation\n\nvar sum = 0\nvar count = 0\n\nwhile true {\n    print(\"Enter age:\")\n    if let input = readLine(), let age = Int(input), age >= 0 {\n        sum += age\n        count += 1\n    } else {\n        break\n    }\n}\n\nif count > 0 {\n    let average = Double(sum) / Double(count)\n    print(\"Average age: \\(average)\")\n} else {\n    print(\"No valid ages entered.\")\n}\n```"
  },
  {
    "task": "Write a routine that squares numbers starting from 1 until the square is greater than 500.",
    "code": "```swift\nvar number = 1\nwhile number * number <= 500 {\n    print(number * number)\n    number += 1\n}\n```"
  },
  {
    "task": "Implement a system to ask for a string and append it to a file until 'end' is typed.",
    "code": "```swift\nimport Foundation\n\nlet fileURL = FileManager.default.temporaryDirectory.appendingPathComponent(\"output.txt\")\n\nwhile true {\n    print(\"Enter a string (type 'end' to finish): \", terminator: \"\")\n    if let input = readLine() {\n        if input.lowercased() == \"end\" {\n            break\n        } else {\n            do {\n                let currentContent = try String(contentsOf: fileURL, encoding: .utf8)\n                let updatedContent = currentContent + input + \"\\n\"\n                try updatedContent.write(to: fileURL, atomically: true, encoding: .utf8)\n            } catch {\n                print(\"An error occurred: \\(error)\")\n            }\n        }\n    }\n}\n```"
  },
  {
    "task": "Create a script that checks if a number is prime, repeating for each number entered by the user.",
    "code": "```swift\nimport Foundation\n\nfunc isPrime(_ number: Int) -> Bool {\n    if number <= 1 { return false }\n    if number <= 3 { return true }\n    if number % 2 == 0 || number % 3 == 0 { return false }\n    var i = 5\n    while i * i <= number {\n        if number % i == 0 || number % (i + 2) == 0 { return false }\n        i += 6\n    }\n    return true\n}\n\nwhile true {\n    print(\"Enter a number to check if it is prime (or type 'exit' to quit): \", terminator: \"\")\n    guard let input = readLine(), input.lowercased() != \"exit\" else { break }\n    if let number = Int(input) {\n        if isPrime(number) {\n            print(\"\\(number) is a prime number.\")\n        } else {\n            print(\"\\(number) is not a prime number.\")\n        }\n    } else {\n        print(\"Invalid input. Please enter a valid number.\")\n    }\n}\n```"
  },
  {
    "task": "Develop a countdown that prints numbers starting from 50 down to 1.",
    "code": "```swift\nvar number = 50\nwhile number >= 1 {\n    print(number)\n    number -= 1\n}\n```"
  },
  {
    "task": "Write a program that keeps doubling the value of a variable until it exceeds 200.",
    "code": "```swift\nvar value = 1\n\nwhile value <= 200 {\n    value *= 2\n}\n```"
  },
  {
    "task": "Design a loop that keeps generating a random string of letters until a specific word is formed.",
    "code": "```swift\nimport Foundation\n\nlet targetWord = \"swift\"\nvar generatedWord = \"\"\n\nwhile generatedWord != targetWord {\n    generatedWord = String((0..<targetWord.count).map { _ in\n        \"abcdefghijklmnopqrstuvwxyz\".randomElement()!\n    })\n}\n\nprint(\"Generated word: \\(generatedWord)\")\n```"
  },
  {
    "task": "Implement a system that continuously fetches data from a sensor until a threshold is crossed.",
    "code": "```swift\nimport Foundation\n\nvar threshold = 100\nvar sensorValue = 0\n\nfunc fetchDataFromSensor() -> Int {\n    // Simulate fetching data from a sensor\n    return Int.random(in: 0...150)\n}\n\nwhile sensorValue <= threshold {\n    sensorValue = fetchDataFromSensor()\n    print(\"Sensor value: \\(sensorValue)\")\n}\n\nprint(\"Threshold crossed. Stopped fetching data.\")\n```"
  },
  {
    "task": "Create a game where a player guesses a number, and the game continues until the player guesses correctly.",
    "code": "```swift\nimport Foundation\n\nlet targetNumber = Int.random(in: 1...100)\nvar guessedCorrectly = false\n\nwhile !guessedCorrectly {\n    print(\"Guess the number (between 1 and 100): \", terminator: \"\")\n    if let input = readLine(), let guess = Int(input) {\n        if guess == targetNumber {\n            print(\"Congratulations! You guessed the number correctly.\")\n            guessedCorrectly = true\n        } else if guess < targetNumber {\n            print(\"Too low. Try again.\")\n        } else {\n            print(\"Too high. Try again.\")\n        }\n    } else {\n        print(\"Please enter a valid number.\")\n    }\n}\n```"
  },
  {
    "task": "Write a loop that continues to add random numbers to a list until the list has 10 even numbers.",
    "code": "```swift\nimport Foundation\n\nvar evenNumbers: [Int] = []\n\nwhile evenNumbers.count < 10 {\n    let randomNumber = Int.random(in: 0...100)\n    if randomNumber % 2 == 0 {\n        evenNumbers.append(randomNumber)\n    }\n}\n```"
  },
  {
    "task": "Design a routine that keeps removing elements from a list until it is empty.",
    "code": "```swift\nvar list = [1, 2, 3, 4, 5]\n\nwhile !list.isEmpty {\n    list.removeLast()\n}\n```"
  },
  {
    "task": "Implement a sequence that prints the alphabet repeatedly until interrupted by the user.",
    "code": "```swift\nimport Foundation\n\nvar shouldContinue = true\n\nSignalHandler.setup()\n\nwhile shouldContinue {\n    for letter in \"abcdefghijklmnopqrstuvwxyz\" {\n        print(letter, terminator: \"\")\n    }\n    print()\n}\n\nclass SignalHandler {\n    static func setup() {\n        signal(SIGINT) { _ in\n            shouldContinue = false\n        }\n    }\n}\n```"
  },
  {
    "task": "Create a program that continuously checks for updates and stops once an update is available.",
    "code": "```swift\nvar updateAvailable = false\n\nwhile !updateAvailable {\n    // Simulate checking for updates\n    updateAvailable = checkForUpdates()\n}\n\nfunc checkForUpdates() -> Bool {\n    // Simulate update check logic\n    // Replace with actual update checking logic\n    return Bool.random()\n}\n```"
  },
  {
    "task": "Write a function that keeps dividing a number by two until it results in a fractional value.",
    "code": "```swift\nfunc divideUntilFractional(_ number: Int) -> Double {\n    var result = Double(number)\n    while result.truncatingRemainder(dividingBy: 1) == 0 {\n        result /= 2\n    }\n    return result\n}\n```"
  },
  {
    "task": "Develop a loop that keeps asking for student's grades and calculates the average until a grade of -1 is entered.",
    "code": "```swift\nimport Foundation\n\nvar totalGrades = 0\nvar numberOfGrades = 0\n\nwhile true {\n    print(\"Enter a student's grade (-1 to stop): \", terminator: \"\")\n    if let input = readLine(), let grade = Int(input) {\n        if grade == -1 {\n            break\n        }\n        totalGrades += grade\n        numberOfGrades += 1\n    }\n}\n\nif numberOfGrades > 0 {\n    let average = Double(totalGrades) / Double(numberOfGrades)\n    print(\"The average grade is \\(average)\")\n} else {\n    print(\"No grades entered.\")\n}\n```"
  },
  {
    "task": "Design a feature that continuously monitors a file for changes and stops when no changes are detected for a minute.",
    "code": "```swift\nimport Foundation\n\nlet fileURL = URL(fileURLWithPath: \"path/to/your/file\")\nvar lastModificationDate: Date?\nvar noChangeDuration: TimeInterval = 0\n\nwhile noChangeDuration < 60 {\n    let currentModificationDate = try? FileManager.default.attributesOfItem(atPath: fileURL.path)[.modificationDate] as? Date\n    \n    if let currentModificationDate = currentModificationDate {\n        if currentModificationDate == lastModificationDate {\n            noChangeDuration += 5\n        } else {\n            noChangeDuration = 0\n            lastModificationDate = currentModificationDate\n        }\n    }\n    \n    Thread.sleep(forTimeInterval: 5)\n}\n\nprint(\"No changes detected for a minute. Stopping monitoring.\")\n```"
  },
  {
    "task": "Implement a process where a motor runs until a certain distance is reached.",
    "code": "```swift\nvar distanceCovered = 0\nlet targetDistance = 100 // Example target distance\n\nwhile distanceCovered < targetDistance {\n    // Simulate the motor running and increasing distance\n    distanceCovered += 10 // Example increment\n    print(\"Distance covered: \\(distanceCovered)\")\n}\n\n// Motor stops when the while loop condition is no longer true\n```"
  },
  {
    "task": "Create a script that keeps generating random numbers and stops when it generates a prime number.",
    "code": "```swift\nimport Foundation\n\nfunc isPrime(_ n: Int) -> Bool {\n    if n <= 1 { return false }\n    if n <= 3 { return true }\n    if n % 2 == 0 || n % 3 == 0 { return false }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 || n % (i + 2) == 0 { return false }\n        i += 6\n    }\n    return true\n}\n\nvar number: Int = 0\n\nwhile true {\n    number = Int.random(in: 1..<100)\n    if isPrime(number) {\n        break\n    }\n}\n\nprint(\"Generated prime number: \\(number)\")\n```"
  },
  {
    "task": "Write a program that asks for the user's favorite color and keeps asking until they say 'blue'.",
    "code": "```swift\nimport Foundation\n\nvar favoriteColor: String?\n\nrepeat {\n    print(\"What is your favorite color?\")\n    favoriteColor = readLine()\n} while favoriteColor?.lowercased() != \"blue\"\n```"
  },
  {
    "task": "Develop a loop that continuously prints the time every second until a key is pressed.",
    "code": "```swift\nimport Foundation\n\nvar running = true\n\nlet source = DispatchSource.makeSignalSource(signal: SIGINT, queue: .main)\nsource.setEventHandler {\n    running = false\n}\nsource.resume()\n\nwhile running {\n    let currentTime = Date()\n    let formatter = DateFormatter()\n    formatter.timeStyle = .medium\n    print(formatter.string(from: currentTime))\n    Thread.sleep(forTimeInterval: 1.0)\n}\n```"
  },
  {
    "task": "Create a system to keep downloading data from a server until the connection is lost.",
    "code": "```swift\nimport Foundation\n\nfunc downloadData() -> Bool {\n    // Simulate downloading data from a server\n    // Return true if the connection is still active, false if lost\n    return Bool.random() // Replace this with actual server connection logic\n}\n\nwhile downloadData() {\n    // Continue downloading\n}\n\nprint(\"Connection lost, stopped downloading.\")\n```"
  },
  {
    "task": "Write a process to keep a light on until the ambient light level is sufficient.",
    "code": "```swift\nimport Foundation\n\nfunc isAmbientLightSufficient() -> Bool {\n    // Placeholder function to simulate checking ambient light level\n    // Replace with actual implementation\n    return Bool.random()\n}\n\nfunc keepLightOnUntilSufficientLight() {\n    var lightIsOn = true\n\n    while lightIsOn {\n        if isAmbientLightSufficient() {\n            lightIsOn = false\n            print(\"Sufficient ambient light detected. Turning off the light.\")\n        } else {\n            print(\"Ambient light insufficient. Keeping the light on.\")\n            // Simulate waiting for some time before rechecking\n            Thread.sleep(forTimeInterval: 1.0)\n        }\n    }\n}\n\nkeepLightOnUntilSufficientLight()\n```"
  },
  {
    "task": "Implement a feature that continuously plays a sound until the user presses a button.",
    "code": "```swift\nimport AVFoundation\nimport UIKit\n\nclass SoundPlayerViewController: UIViewController {\n    var soundPlayer: AVAudioPlayer?\n    var isPlaying = true\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupSound()\n        playSoundLoop()\n        \n        let stopButton = UIButton(type: .system)\n        stopButton.setTitle(\"Stop\", for: .normal)\n        stopButton.addTarget(self, action: #selector(stopSound), for: .touchUpInside)\n        stopButton.frame = CGRect(x: 100, y: 100, width: 100, height: 50)\n        view.addSubview(stopButton)\n    }\n    \n    func setupSound() {\n        if let soundURL = Bundle.main.url(forResource: \"sound\", withExtension: \"mp3\") {\n            soundPlayer = try? AVAudioPlayer(contentsOf: soundURL)\n        }\n    }\n    \n    func playSoundLoop() {\n        DispatchQueue.global().async {\n            while self.isPlaying {\n                if let player = self.soundPlayer, !player.isPlaying {\n                    player.play()\n                }\n                usleep(100000) // Sleep for 0.1 seconds to prevent excessive CPU usage\n            }\n        }\n    }\n    \n    @objc func stopSound() {\n        isPlaying = false\n        soundPlayer?.stop()\n    }\n}\n```"
  },
  {
    "task": "Design a program that keeps multiplying a matrix by itself until its determinant is greater than 1000.",
    "code": "```swift\nimport Foundation\n\nfunc determinant(of matrix: [[Double]]) -> Double {\n    guard matrix.count == matrix[0].count else { return 0.0 }\n    let n = matrix.count\n    if n == 1 {\n        return matrix[0][0]\n    } else if n == 2 {\n        return matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0]\n    }\n    \n    var det = 0.0\n    for i in 0..<n {\n        var subMatrix = matrix\n        subMatrix.remove(at: 0)\n        for j in 0..<subMatrix.count {\n            subMatrix[j].remove(at: i)\n        }\n        det += (i % 2 == 0 ? 1.0 : -1.0) * matrix[0][i] * determinant(of: subMatrix)\n    }\n    \n    return det\n}\n\nfunc multiplyMatrices(_ a: [[Double]], _ b: [[Double]]) -> [[Double]] {\n    let rowsA = a.count\n    let colsA = a[0].count\n    let colsB = b[0].count\n    var result = Array(repeating: Array(repeating: 0.0, count: colsB), count: rowsA)\n    \n    for i in 0..<rowsA {\n        for j in 0..<colsB {\n            for k in 0..<colsA {\n                result[i][j] += a[i][k] * b[k][j]\n            }\n        }\n    }\n    \n    return result\n}\n\nvar matrix: [[Double]] = [\n    [1, 2],\n    [3, 4]\n]\n\nwhile determinant(of: matrix) <= 1000 {\n    matrix = multiplyMatrices(matrix, matrix)\n}\n```"
  },
  {
    "task": "Create a script that keeps prompting the user to guess a word until they get it right.",
    "code": "```swift\nimport Foundation\n\nlet secretWord = \"swift\"\nvar guessedWord = \"\"\n\nwhile guessedWord.lowercased() != secretWord {\n    print(\"Guess the word:\")\n    if let input = readLine() {\n        guessedWord = input\n    }\n}\n\nprint(\"Congratulations, you guessed the word!\")\n```"
  },
  {
    "task": "Write a loop that simulates a car's fuel consumption and stops when the tank is empty.",
    "code": "```swift\nvar fuelLevel = 100 // Assume the tank is full at 100 units\n\nwhile fuelLevel > 0 {\n    print(\"Fuel level: \\(fuelLevel)\")\n    fuelLevel -= 10 // Simulate fuel consumption\n}\n\nprint(\"The tank is empty.\")\n```"
  },
  {
    "task": "Develop a routine that keeps checking if a file exists and stops once it does.",
    "code": "```swift\nimport Foundation\n\nlet fileManager = FileManager.default\nlet filePath = \"/path/to/your/file\"\n\nwhile !fileManager.fileExists(atPath: filePath) {\n    sleep(1) // Wait for 1 second before checking again\n}\n\n// File exists, continue with the rest of the code\n```"
  },
  {
    "task": "Implement a feature that continuously calculates the square root of a number until it's less than 0.1.",
    "code": "```swift\nimport Foundation\n\nvar number: Double = 100.0\n\nwhile number >= 0.1 {\n    number = sqrt(number)\n    print(number)\n}\n```"
  },
  {
    "task": "Create a system that prints 'Processing...' every second until a task is complete.",
    "code": "```swift\nimport Foundation\n\nvar taskComplete = false\n\nfunc checkTaskCompletion() -> Bool {\n    // Placeholder for task completion logic\n    // For demonstration, we'll simulate task completion after 5 seconds\n    Thread.sleep(forTimeInterval: 5)\n    return true\n}\n\nwhile !taskComplete {\n    print(\"Processing...\")\n    Thread.sleep(forTimeInterval: 1)\n    taskComplete = checkTaskCompletion()\n}\n```"
  },
  {
    "task": "Write a loop that repeatedly checks the status of a process until it reports 'complete'.",
    "code": "```swift\nimport Foundation\n\nfunc checkProcessStatus() -> String {\n    // Simulate a process status check\n    let statuses = [\"running\", \"running\", \"running\", \"complete\"]\n    return statuses.randomElement() ?? \"running\"\n}\n\nvar status = checkProcessStatus()\nwhile status != \"complete\" {\n    print(\"Process status: \\(status)\")\n    status = checkProcessStatus()\n}\n\nprint(\"Process status: \\(status)\")\n```"
  },
  {
    "task": "Design a routine to keep pinging a server and alert when the connection is lost.",
    "code": "```swift\nimport Foundation\n\nfunc pingServer() -> Bool {\n    // Simulate server ping\n    return Bool.random()\n}\n\nfunc alertConnectionLost() {\n    print(\"Connection lost!\")\n}\n\nfunc monitorServer() {\n    var isConnected = true\n    while isConnected {\n        isConnected = pingServer()\n        if !isConnected {\n            alertConnectionLost()\n        }\n        sleep(1) // Wait for 1 second before next ping\n    }\n}\n\nmonitorServer()\n```"
  },
  {
    "task": "Implement a loop that counts down from 100 by fives until it reaches zero.",
    "code": "```swift\nvar number = 100\nwhile number >= 0 {\n    print(number)\n    number -= 5\n}\n```"
  },
  {
    "task": "Create a script that keeps track of inventory items being added or removed until an end signal is given.",
    "code": "```swift\nimport Foundation\n\nvar inventory = [String: Int]()\nvar input: String?\n\nprint(\"Enter inventory updates (add/remove item quantity) or 'end' to finish:\")\n\nrepeat {\n    input = readLine()?.trimmingCharacters(in: .whitespacesAndNewlines)\n    \n    if let input = input, input.lowercased() != \"end\" {\n        let components = input.split(separator: \" \")\n        if components.count == 3, let quantity = Int(components[2]) {\n            let action = components[0].lowercased()\n            let item = String(components[1])\n            \n            if action == \"add\" {\n                inventory[item, default: 0] += quantity\n            } else if action == \"remove\" {\n                inventory[item, default: 0] -= quantity\n                if inventory[item]! < 0 {\n                    inventory[item] = 0\n                }\n            }\n        } else {\n            print(\"Invalid input format. Use 'add/remove item quantity'.\")\n        }\n    }\n    \n} while input?.lowercased() != \"end\"\n\nprint(\"Final inventory:\", inventory)\n```"
  },
  {
    "task": "Write a program that keeps calculating the power of two for numbers until a result is greater than 1000.",
    "code": "```swift\nvar number = 1\nvar result = 1\n\nwhile result <= 1000 {\n    result = Int(pow(2.0, Double(number)))\n    number += 1\n}\n```"
  },
  {
    "task": "Develop a sequence that keeps appending random numbers to an array until its length is 20.",
    "code": "```swift\nimport Foundation\n\nvar numbers: [Int] = []\n\nwhile numbers.count < 20 {\n    let randomNumber = Int.random(in: 0...100)\n    numbers.append(randomNumber)\n}\n```"
  },
  {
    "task": "Implement a routine that continuously rotates an image until it matches a reference orientation.",
    "code": "```swift\nimport UIKit\n\nfunc rotateImageUntilMatch(original: UIImage, reference: UIImage) -> UIImage {\n    var rotatedImage = original\n    let referenceData = reference.pngData()\n    \n    while rotatedImage.pngData() != referenceData {\n        rotatedImage = rotatedImage.rotate90Degrees()\n    }\n    \n    return rotatedImage\n}\n\nextension UIImage {\n    func rotate90Degrees() -> UIImage {\n        UIGraphicsBeginImageContext(CGSize(width: self.size.height, height: self.size.width))\n        let context = UIGraphicsGetCurrentContext()!\n        context.translateBy(x: self.size.height / 2, y: self.size.width / 2)\n        context.rotate(by: .pi / 2)\n        self.draw(at: CGPoint(x: -self.size.width / 2, y: -self.size.height / 2))\n        let rotatedImage = UIGraphicsGetImageFromCurrentImageContext()!\n        UIGraphicsEndImageContext()\n        return rotatedImage\n    }\n}\n```"
  },
  {
    "task": "Design a loop that keeps printing random jokes until the user stops it.",
    "code": "```swift\nimport Foundation\n\nlet jokes = [\n    \"Why don't scientists trust atoms? Because they make up everything!\",\n    \"What do you get when you cross a snowman and a vampire? Frostbite.\",\n    \"Why was the math book sad? Because it had too many problems.\",\n    \"Why did the scarecrow win an award? Because he was outstanding in his field!\"\n]\n\nvar keepGoing = true\nlet input = FileHandle.standardInput\n\nprint(\"Press 'q' and Enter to stop the jokes.\")\n\nwhile keepGoing {\n    let randomIndex = Int(arc4random_uniform(UInt32(jokes.count)))\n    print(jokes[randomIndex])\n    \n    if let line = String(data: input.availableData, encoding: .utf8)?.trimmingCharacters(in: .whitespacesAndNewlines) {\n        if line.lowercased() == \"q\" {\n            keepGoing = false\n        }\n    }\n}\n```"
  },
  {
    "task": "Create a program that accepts user feedback and continues until a positive feedback is received.",
    "code": "```swift\nimport Foundation\n\nvar feedback: String = \"\"\n\nwhile !feedback.lowercased().contains(\"good\") && !feedback.lowercased().contains(\"excellent\") {\n    print(\"Please enter your feedback:\")\n    if let input = readLine() {\n        feedback = input\n    }\n}\n\nprint(\"Thank you for your positive feedback!\")\n```"
  },
  {
    "task": "Write a loop that repeatedly reads sensor data and stops when a stable reading is observed.",
    "code": "```swift\nimport Foundation\n\nfunc readSensorData() -> Int {\n    // Simulate reading sensor data\n    return Int.random(in: 0...100)\n}\n\nfunc isStableReading(_ reading: Int) -> Bool {\n    // Define a threshold for a stable reading\n    return reading == 50\n}\n\nvar sensorData: Int\nrepeat {\n    sensorData = readSensorData()\n    print(\"Sensor reading: \\(sensorData)\")\n} while !isStableReading(sensorData)\n\nprint(\"Stable reading observed: \\(sensorData)\")\n```"
  },
  {
    "task": "Develop a system that simulates a stopwatch, counting seconds until stopped manually.",
    "code": "```swift\nimport Foundation\n\nvar isRunning = true\nvar seconds = 0\n\nfunc simulateStopwatch() {\n    while isRunning {\n        print(\"Seconds: \\(seconds)\")\n        sleep(1)\n        seconds += 1\n    }\n}\n\nDispatchQueue.global().async {\n    simulateStopwatch()\n}\n\n// To stop the stopwatch manually, set `isRunning` to false\n```"
  },
  {
    "task": "Create a script that continues adding random integers to a sum until the sum exceeds 100.",
    "code": "```swift\nimport Foundation\n\nvar sum = 0\nwhile sum <= 100 {\n    let randomInt = Int(arc4random_uniform(10) + 1)\n    sum += randomInt\n}\n```"
  },
  {
    "task": "Implement a process to track a moving object until it stops.",
    "code": "```swift\nimport Foundation\n\nvar objectIsMoving = true\nvar position = 0\n\nwhile objectIsMoving {\n    // Update position\n    position += 1\n    \n    // Simulate conditions to stop the object\n    if position >= 10 {\n        objectIsMoving = false\n    }\n    \n    // Simulate a delay to track the object\n    Thread.sleep(forTimeInterval: 0.5)\n}\n\nprint(\"Object stopped at position \\(position)\")\n```"
  },
  {
    "task": "Design a routine to keep checking user login attempts until a successful login occurs.",
    "code": "```swift\nimport Foundation\n\nfunc checkLogin() -> Bool {\n    // Simulate a login check (replace with actual logic)\n    let successfulLogin = Bool.random() // Randomly simulate success or failure\n    return successfulLogin\n}\n\nvar loggedIn = false\n\nwhile !loggedIn {\n    print(\"Attempting login...\")\n    loggedIn = checkLogin()\n    if !loggedIn {\n        print(\"Login failed. Please try again.\")\n    }\n}\n\nprint(\"Login successful!\")\n```"
  },
  {
    "task": "Write a loop that repeatedly calculates the area of a circle for radii from 1 to 10.",
    "code": "```swift\nimport Foundation\n\nvar radius = 1\nwhile radius <= 10 {\n    let area = Double.pi * Double(radius) * Double(radius)\n    print(\"Radius: \\(radius), Area: \\(area)\")\n    radius += 1\n}\n```"
  },
  {
    "task": "Create a program that continues flipping a card from a deck until an ace is drawn.",
    "code": "```swift\nimport Foundation\n\nvar deck = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\nvar card: String\n\nrepeat {\n    card = deck.randomElement()!\n    print(\"Drew: \\(card)\")\n} while card != \"A\"\n```"
  },
  {
    "task": "Develop a loop that keeps asking for a word and stores it until a word with more than five letters is entered.",
    "code": "```swift\nimport Foundation\n\nvar words: [String] = []\n\nwhile true {\n    print(\"Enter a word:\")\n    if let input = readLine(), input.count > 5 {\n        break\n    } else if let input = input {\n        words.append(input)\n    }\n}\n```"
  },
  {
    "task": "Implement a feature that continuously calculates the exponential growth of a population until it doubles.",
    "code": "```swift\nvar initialPopulation = 1000.0\nvar currentPopulation = initialPopulation\nlet growthRate = 0.05\n\nwhile currentPopulation < initialPopulation * 2 {\n    currentPopulation += currentPopulation * growthRate\n}\n```"
  },
  {
    "task": "Write a script that repeats a string a certain number of times until a limit is reached.",
    "code": "```swift\nlet repeatString = \"Hello\"\nlet limit = 5\nvar repeatedString = \"\"\nvar count = 0\n\nwhile count < limit {\n    repeatedString += repeatString\n    count += 1\n}\n\nprint(repeatedString)\n```"
  },
  {
    "task": "Create a routine that keeps accessing an API endpoint until it returns a specific result.",
    "code": "```swift\nimport Foundation\n\nfunc fetchAPIResult() -> String? {\n    // Placeholder for actual API call\n    return [\"result1\", \"result2\", \"desiredResult\"].randomElement()\n}\n\nfunc accessAPIUntilSpecificResult() {\n    let specificResult = \"desiredResult\"\n    var currentResult: String? = nil\n\n    while currentResult != specificResult {\n        currentResult = fetchAPIResult()\n        print(\"Fetched result: \\(currentResult ?? \"nil\")\")\n    }\n\n    print(\"Specific result '\\(specificResult)' obtained.\")\n}\n\naccessAPIUntilSpecificResult()\n```"
  },
  {
    "task": "Design a loop that continues to fetch stock prices until a certain price threshold is crossed.",
    "code": "```swift\nimport Foundation\n\nfunc fetchStockPrice() -> Double {\n    // Simulated fetch function\n    return Double.random(in: 100.0...200.0)\n}\n\nlet priceThreshold: Double = 150.0\nvar currentPrice: Double = 0.0\n\nwhile currentPrice <= priceThreshold {\n    currentPrice = fetchStockPrice()\n    print(\"Current stock price: \\(currentPrice)\")\n}\n\nprint(\"Threshold crossed with price: \\(currentPrice)\")\n```"
  },
  {
    "task": "Implement a process that keeps monitoring CPU usage until it drops below 10%.",
    "code": "```swift\nimport Foundation\n\nfunc getCPUUsage() -> Double {\n    // This is a placeholder for actual CPU usage retrieval logic\n    return Double.random(in: 0...100)\n}\n\nwhile true {\n    let cpuUsage = getCPUUsage()\n    print(\"Current CPU Usage: \\(cpuUsage)%\")\n    if cpuUsage < 10 {\n        break\n    }\n    // Sleep for a short period to avoid busy-waiting\n    Thread.sleep(forTimeInterval: 1.0)\n}\nprint(\"CPU usage dropped below 10%\")\n```"
  },
  {
    "task": "Write a program that asks for a series of numbers and prints the largest once a negative number is entered.",
    "code": "```swift\nimport Foundation\n\nvar largestNumber: Int?\nvar input: Int = 0\n\nwhile input >= 0 {\n    print(\"Enter a number:\")\n    if let userInput = readLine(), let number = Int(userInput) {\n        input = number\n        if input >= 0 {\n            if largestNumber == nil || input > largestNumber! {\n                largestNumber = input\n            }\n        }\n    }\n}\n\nif let largest = largestNumber {\n    print(\"The largest number is \\(largest)\")\n} else {\n    print(\"No non-negative numbers were entered.\")\n}\n```"
  },
  {
    "task": "Develop a system that keeps a heater on until the room reaches a desired temperature.",
    "code": "```swift\nvar currentTemperature = 18.0\nlet desiredTemperature = 22.0\n\nwhile currentTemperature < desiredTemperature {\n    print(\"Heater is on. Current temperature: \\(currentTemperature)\u00b0C\")\n    currentTemperature += 0.5 // Simulating the temperature increase\n}\n\nprint(\"Desired temperature reached: \\(currentTemperature)\u00b0C. Heater is off.\")\n```"
  },
  {
    "task": "Create a loop that repeatedly checks if a door is open and alerts if it remains open for too long.",
    "code": "```swift\nvar isDoorOpen = true\nvar timeOpen = 0\nlet timeLimit = 10\n\nwhile isDoorOpen {\n    print(\"Checking if the door is open...\")\n    \n    // Simulate the door being open for a period of time\n    timeOpen += 1\n    \n    if timeOpen > timeLimit {\n        print(\"Alert: The door has been open for too long!\")\n        break\n    }\n    \n    // Here you would typically have code to update `isDoorOpen` based on real conditions\n}\n```"
  },
  {
    "task": "Implement a feature that keeps adding random characters to a string until its length is 8.",
    "code": "```swift\nimport Foundation\n\nvar result = \"\"\nlet characters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\n\nwhile result.count < 8 {\n    if let randomCharacter = characters.randomElement() {\n        result.append(randomCharacter)\n    }\n}\n\nprint(result)\n```"
  },
  {
    "task": "Design a routine that simulates a race and continues until a participant crosses the finish line.",
    "code": "```swift\nimport Foundation\n\nfunc simulateRace() {\n    let finishLine = 100\n    var position = 0\n    \n    while position < finishLine {\n        let randomStep = Int.random(in: 1...10)\n        position += randomStep\n        print(\"Current position: \\(position)\")\n        \n        if position >= finishLine {\n            print(\"A participant has crossed the finish line!\")\n        }\n        \n        sleep(1) // Simulate time passing\n    }\n}\n\nsimulateRace()\n```"
  },
  {
    "task": "Write a script that keeps checking an email inbox until a specific email is received.",
    "code": "```swift\nimport Foundation\n\nfunc checkEmailInbox() -> Bool {\n    // Simulate checking inbox and return true if specific email is found\n    // Placeholder for actual email checking logic\n    return Bool.random()\n}\n\nfunc waitForSpecificEmail() {\n    while !checkEmailInbox() {\n        print(\"Checking inbox...\")\n        sleep(5) // Wait for 5 seconds before checking again\n    }\n    print(\"Specific email received.\")\n}\n\nwaitForSpecificEmail()\n```"
  },
  {
    "task": "Create a loop that continues to play a video on repeat until the user interrupts.",
    "code": "```swift\nimport Foundation\n\nvar isPlaying = true\n\nwhile isPlaying {\n    print(\"Playing video...\")\n    \n    // Simulate user interrupt with a random condition\n    let userInterrupt = Bool.random()\n    if userInterrupt {\n        isPlaying = false\n    }\n}\n```"
  },
  {
    "task": "Develop a process that keeps scanning for Bluetooth devices until a specific device is found.",
    "code": "```swift\nimport CoreBluetooth\n\nclass BluetoothScanner: NSObject, CBCentralManagerDelegate {\n    var centralManager: CBCentralManager!\n    let targetDeviceName = \"TargetDevice\"\n    var deviceFound = false\n\n    override init() {\n        super.init()\n        centralManager = CBCentralManager(delegate: self, queue: nil)\n    }\n\n    func centralManagerDidUpdateState(_ central: CBCentralManager) {\n        if central.state == .poweredOn {\n            startScanning()\n        }\n    }\n\n    func startScanning() {\n        while !deviceFound {\n            centralManager.scanForPeripherals(withServices: nil, options: nil)\n            // Adding a small delay to avoid spinning too fast\n            Thread.sleep(forTimeInterval: 1.0)\n        }\n    }\n\n    func centralManager(_ central: CBCentralManager, didDiscover peripheral: CBPeripheral, advertisementData: [String : Any], rssi RSSI: NSNumber) {\n        if let name = peripheral.name, name == targetDeviceName {\n            deviceFound = true\n            centralManager.stopScan()\n            print(\"Found the target device: \\(name)\")\n        }\n    }\n}\n\nlet scanner = BluetoothScanner()\n```"
  },
  {
    "task": "Implement a script that continuously captures images from a webcam until a motion is detected.",
    "code": "```swift\nimport AVFoundation\nimport Vision\n\nclass MotionDetector {\n    private var captureSession: AVCaptureSession?\n    private var captureDevice: AVCaptureDevice?\n    private var isMotionDetected = false\n\n    init() {\n        setupCamera()\n    }\n\n    private func setupCamera() {\n        captureSession = AVCaptureSession()\n        captureSession?.sessionPreset = .photo\n        \n        guard let device = AVCaptureDevice.default(for: .video) else { return }\n        captureDevice = device\n        \n        do {\n            let input = try AVCaptureDeviceInput(device: device)\n            if captureSession?.canAddInput(input) == true {\n                captureSession?.addInput(input)\n            }\n        } catch {\n            print(\"Error setting up camera input: \\(error)\")\n            return\n        }\n        \n        let videoOutput = AVCaptureVideoDataOutput()\n        videoOutput.setSampleBufferDelegate(self, queue: DispatchQueue(label: \"videoQueue\"))\n        \n        if captureSession?.canAddOutput(videoOutput) == true {\n            captureSession?.addOutput(videoOutput)\n        }\n        \n        captureSession?.startRunning()\n    }\n    \n    func startCapturing() {\n        while !isMotionDetected {\n            // Continuously capture frames until motion is detected\n            RunLoop.current.run(until: Date().addingTimeInterval(0.1))\n        }\n    }\n    \n    private func detectMotion(in image: CIImage) {\n        // Implementation for detecting motion in the image\n        // Set isMotionDetected = true when motion is detected\n    }\n}\n\nextension MotionDetector: AVCaptureVideoDataOutputSampleBufferDelegate {\n    func captureOutput(_ output: AVCaptureOutput, didOutput sampleBuffer: CMSampleBuffer, from connection: AVCaptureConnection) {\n        guard let pixelBuffer = CMSampleBufferGetImageBuffer(sampleBuffer) else { return }\n        \n        let ciImage = CIImage(cvPixelBuffer: pixelBuffer)\n        detectMotion(in: ciImage)\n    }\n}\n\nlet motionDetector = MotionDetector()\nmotionDetector.startCapturing()\n```"
  },
  {
    "task": "Design a program that keeps playing a sound file until the user presses a mute button.",
    "code": "```swift\nimport AVFoundation\nimport UIKit\n\nclass SoundPlayer {\n    var player: AVAudioPlayer?\n    var isPlaying = true\n\n    init() {\n        if let soundURL = Bundle.main.url(forResource: \"sound\", withExtension: \"mp3\") {\n            player = try? AVAudioPlayer(contentsOf: soundURL)\n        }\n    }\n\n    func playSound() {\n        player?.play()\n    }\n\n    func stopSound() {\n        player?.stop()\n    }\n\n    func toggleSound() {\n        isPlaying.toggle()\n        if isPlaying {\n            playSound()\n        } else {\n            stopSound()\n        }\n    }\n}\n\nclass ViewController: UIViewController {\n    var soundPlayer = SoundPlayer()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        let muteButton = UIButton(type: .system)\n        muteButton.setTitle(\"Mute\", for: .normal)\n        muteButton.addTarget(self, action: #selector(muteButtonTapped), for: .touchUpInside)\n        view.addSubview(muteButton)\n        \n        muteButton.translatesAutoresizingMaskIntoConstraints = false\n        muteButton.centerXAnchor.constraint(equalTo: view.centerXAnchor).isActive = true\n        muteButton.centerYAnchor.constraint(equalTo: view.centerYAnchor).isActive = true\n\n        soundPlayer.playSound()\n        \n        while soundPlayer.isPlaying {\n            RunLoop.current.run(until: Date().addingTimeInterval(0.1))\n        }\n    }\n    \n    @objc func muteButtonTapped() {\n        soundPlayer.toggleSound()\n    }\n}\n```"
  },
  {
    "task": "Create a loop that repeatedly generates a random password until it meets certain security criteria.",
    "code": "```swift\nimport Foundation\n\nfunc isPasswordSecure(_ password: String) -> Bool {\n    let minLength = 8\n    let capitalLetterRegex = \".*[A-Z]+.*\"\n    let numberRegex = \".*[0-9]+.*\"\n    let specialCharRegex = \".*[!@#$%^&*()_+=-]+.*\"\n    \n    let capitalLetterPredicate = NSPredicate(format:\"SELF MATCHES %@\", capitalLetterRegex)\n    let numberPredicate = NSPredicate(format:\"SELF MATCHES %@\", numberRegex)\n    let specialCharPredicate = NSPredicate(format:\"SELF MATCHES %@\", specialCharRegex)\n    \n    return password.count >= minLength &&\n           capitalLetterPredicate.evaluate(with: password) &&\n           numberPredicate.evaluate(with: password) &&\n           specialCharPredicate.evaluate(with: password)\n}\n\nfunc generateRandomPassword() -> String {\n    let characters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+=-\"\n    let length = Int.random(in: 8...12)\n    return String((0..<length).compactMap { _ in characters.randomElement() })\n}\n\nvar password = \"\"\n\nwhile !isPasswordSecure(password) {\n    password = generateRandomPassword()\n}\n\nprint(\"Generated secure password: \\(password)\")\n```"
  },
  {
    "task": "Write a process that keeps checking for file changes in a directory and logs them until stopped.",
    "code": "```swift\nimport Foundation\n\nlet fileManager = FileManager.default\nlet directoryPath = \"/path/to/directory\"\nvar previousFiles: [String: Date] = [:]\n\nfunc checkForFileChanges() {\n    do {\n        let currentFiles = try fileManager.contentsOfDirectory(atPath: directoryPath)\n        var currentFileDates: [String: Date] = [:]\n        \n        for file in currentFiles {\n            let filePath = (directoryPath as NSString).appendingPathComponent(file)\n            let attributes = try fileManager.attributesOfItem(atPath: filePath)\n            if let modificationDate = attributes[FileAttributeKey.modificationDate] as? Date {\n                currentFileDates[file] = modificationDate\n                \n                if let previousDate = previousFiles[file], previousDate != modificationDate {\n                    print(\"File changed: \\(file)\")\n                } else if previousFiles[file] == nil {\n                    print(\"File added: \\(file)\")\n                }\n            }\n        }\n        \n        for file in previousFiles.keys where currentFileDates[file] == nil {\n            print(\"File removed: \\(file)\")\n        }\n        \n        previousFiles = currentFileDates\n    } catch {\n        print(\"Error while checking for file changes: \\(error)\")\n    }\n}\n\nwhile true {\n    checkForFileChanges()\n    sleep(5)\n}\n```"
  }
]