[
  {
    "task": "Write a function that checks if two strings are equal, ignoring case sensitivity.",
    "code": "```swift\nfunc areStringsEqualIgnoringCase(_ string1: String, _ string2: String) -> Bool {\n    return string1.caseInsensitiveCompare(string2) == .orderedSame\n}\n```"
  },
  {
    "task": "Create a program that determines if a number is greater than 10.",
    "code": "```swift\nlet number = 15\nif number > 10 {\n    print(\"\\(number) is greater than 10\")\n} else {\n    print(\"\\(number) is not greater than 10\")\n}\n```"
  },
  {
    "task": "Implement a feature that compares the current date to a given date and returns if it is in the future.",
    "code": "```swift\nimport Foundation\n\nfunc isFutureDate(givenDate: Date) -> Bool {\n    let currentDate = Date()\n    return givenDate > currentDate\n}\n```"
  },
  {
    "task": "Design a system that checks if a user's age is less than 18 and restricts access if true.",
    "code": "```swift\nfunc checkAccess(age: Int) -> String {\n    if age < 18 {\n        return \"Access Restricted: You must be 18 or older.\"\n    } else {\n        return \"Access Granted.\"\n    }\n}\n\nlet userAge = 17\nlet accessMessage = checkAccess(age: userAge)\nprint(accessMessage)\n```"
  },
  {
    "task": "Build an algorithm that finds the maximum of three given integers.",
    "code": "```swift\nfunc findMaximum(of a: Int, _ b: Int, _ c: Int) -> Int {\n    var max = a\n    if b > max {\n        max = b\n    }\n    if c > max {\n        max = c\n    }\n    return max\n}\n```"
  },
  {
    "task": "Write a function that verifies if two arrays contain the same elements in the same order.",
    "code": "```swift\nfunc arraysAreEqual<T: Equatable>(_ array1: [T], _ array2: [T]) -> Bool {\n    return array1 == array2\n}\n```"
  },
  {
    "task": "Create a script that checks if a product's price is within a specified range.",
    "code": "```swift\nlet productPrice = 150.0\nlet minPrice = 100.0\nlet maxPrice = 200.0\n\nif productPrice >= minPrice && productPrice <= maxPrice {\n    print(\"The product's price is within the specified range.\")\n} else {\n    print(\"The product's price is outside the specified range.\")\n}\n```"
  },
  {
    "task": "Develop a tool that compares two versions of a software application and determines which is newer.",
    "code": "```swift\nfunc compareVersions(version1: String, version2: String) -> String {\n    let v1Components = version1.split(separator: \".\").compactMap { Int($0) }\n    let v2Components = version2.split(separator: \".\").compactMap { Int($0) }\n    \n    let maxLength = max(v1Components.count, v2Components.count)\n    \n    for i in 0..<maxLength {\n        let v1 = i < v1Components.count ? v1Components[i] : 0\n        let v2 = i < v2Components.count ? v2Components[i] : 0\n        \n        if v1 > v2 {\n            return \"\\(version1) is newer\"\n        } else if v1 < v2 {\n            return \"\\(version2) is newer\"\n        }\n    }\n    \n    return \"Both versions are the same\"\n}\n\n// Example usage\nlet result = compareVersions(version1: \"1.2.3\", version2: \"1.2.4\")\nprint(result) // Output: \"1.2.4 is newer\"\n```"
  },
  {
    "task": "Implement a test to see if a given year is a leap year.",
    "code": "```swift\nfunc isLeapYear(year: Int) -> Bool {\n    if year % 4 == 0 {\n        if year % 100 == 0 {\n            return year % 400 == 0\n        }\n        return true\n    }\n    return false\n}\n```"
  },
  {
    "task": "Design a feature that tells if a student\u2019s grade is passing or failing based on a threshold.",
    "code": "```swift\nfunc isGradePassing(grade: Int, threshold: Int) -> Bool {\n    return grade >= threshold\n}\n\n// Example usage:\nlet studentGrade = 75\nlet passingThreshold = 60\nlet result = isGradePassing(grade: studentGrade, threshold: passingThreshold)\nprint(\"Is the grade passing? \\(result)\")\n```"
  },
  {
    "task": "Write a function to compare two file sizes and return the larger one.",
    "code": "```swift\nimport Foundation\n\nfunc largerFileSize(fileSize1: Int, fileSize2: Int) -> Int {\n    return fileSize1 > fileSize2 ? fileSize1 : fileSize2\n}\n```"
  },
  {
    "task": "Build a program that checks if the temperature is below freezing point.",
    "code": "```swift\nlet temperature = -5.0 // Example temperature in Celsius\n\nif temperature < 0.0 {\n    print(\"The temperature is below freezing point.\")\n} else {\n    print(\"The temperature is above freezing point.\")\n}\n```"
  },
  {
    "task": "Create a logic that determines if a number is within the Fibonacci sequence.",
    "code": "```swift\nfunc isFibonacciNumber(_ n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    var a = 0\n    var b = 1\n    while b < n {\n        let temp = a\n        a = b\n        b = temp + b\n    }\n    return b == n || n == 0\n}\n\n// Example usage\nlet number = 21\nprint(\"Is \\(number) a Fibonacci number? \\(isFibonacciNumber(number))\")\n```"
  },
  {
    "task": "Develop a function that checks if a given word is a palindrome.",
    "code": "```swift\nfunc isPalindrome(word: String) -> Bool {\n    let lowercasedWord = word.lowercased()\n    return lowercasedWord == String(lowercasedWord.reversed())\n}\n```"
  },
  {
    "task": "Write a script to see if a password meets a minimum length requirement.",
    "code": "```swift\nlet password = \"yourPasswordHere\"\nlet minimumLength = 8\n\nif password.count >= minimumLength {\n    print(\"Password meets the minimum length requirement.\")\n} else {\n    print(\"Password does not meet the minimum length requirement.\")\n}\n```"
  },
  {
    "task": "Implement a system that decides if a point is inside a circle based on its coordinates.",
    "code": "```swift\nimport Foundation\n\nstruct Point {\n    var x: Double\n    var y: Double\n}\n\nstruct Circle {\n    var center: Point\n    var radius: Double\n}\n\nfunc isPointInsideCircle(point: Point, circle: Circle) -> Bool {\n    let dx = point.x - circle.center.x\n    let dy = point.y - circle.center.y\n    let distanceSquared = dx * dx + dy * dy\n    return distanceSquared < circle.radius * circle.radius\n}\n\nlet center = Point(x: 0, y: 0)\nlet circle = Circle(center: center, radius: 5)\nlet point = Point(x: 3, y: 4)\n\nlet result = isPointInsideCircle(point: point, circle: circle)\nprint(result)\n```"
  },
  {
    "task": "Design a program that checks if a shopping cart total exceeds a certain budget.",
    "code": "```swift\nimport Foundation\n\nfunc isOverBudget(shoppingCartTotal: Double, budget: Double) -> Bool {\n    return shoppingCartTotal > budget\n}\n\nlet shoppingCartTotal: Double = 150.0\nlet budget: Double = 100.0\n\nif isOverBudget(shoppingCartTotal: shoppingCartTotal, budget: budget) {\n    print(\"The shopping cart total exceeds the budget.\")\n} else {\n    print(\"The shopping cart total is within the budget.\")\n}\n```"
  },
  {
    "task": "Create a function that compares two players' scores and returns the winner.",
    "code": "```swift\nfunc determineWinner(player1Score: Int, player2Score: Int) -> String {\n    if player1Score > player2Score {\n        return \"Player 1 wins\"\n    } else if player2Score > player1Score {\n        return \"Player 2 wins\"\n    } else {\n        return \"It's a tie\"\n    }\n}\n```"
  },
  {
    "task": "Write a program to determine if one string is a substring of another.",
    "code": "```swift\nfunc isSubstring(_ string: String, of anotherString: String) -> Bool {\n    return anotherString.contains(string)\n}\n\nlet string1 = \"hello\"\nlet string2 = \"world hello\"\n\nlet result = isSubstring(string1, of: string2)\nprint(result) // Output: true\n```"
  },
  {
    "task": "Build a utility that checks if a number is a prime number.",
    "code": "```swift\nfunc isPrime(_ number: Int) -> Bool {\n    if number <= 1 { return false }\n    if number <= 3 { return true }\n    if number % 2 == 0 || number % 3 == 0 { return false }\n    \n    var i = 5\n    while i * i <= number {\n        if number % i == 0 || number % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n    }\n    return true\n}\n```"
  },
  {
    "task": "Write a function that checks if a given number is a perfect square.",
    "code": "```swift\nfunc isPerfectSquare(_ num: Int) -> Bool {\n    if num < 0 { return false }\n    let root = Int(Double(num).squareRoot())\n    return root * root == num\n}\n```"
  },
  {
    "task": "Create a system that determines if a person is eligible for a senior citizen discount based on their age.",
    "code": "```swift\nfunc isEligibleForSeniorDiscount(age: Int) -> Bool {\n    return age >= 65\n}\n\nlet age = 70\nlet eligible = isEligibleForSeniorDiscount(age: age)\nprint(\"Eligible for senior discount: \\(eligible)\")\n```"
  },
  {
    "task": "Develop a feature to check if a date falls on a weekend.",
    "code": "```swift\nimport Foundation\n\nfunc isWeekend(date: Date) -> Bool {\n    let calendar = Calendar.current\n    let components = calendar.component(.weekday, from: date)\n    return components == 7 || components == 1\n}\n\n// Example usage\nlet date = Date()\nprint(isWeekend(date: date))\n```"
  },
  {
    "task": "Design a program that sees if a given email address is in the correct format.",
    "code": "```swift\nimport Foundation\n\nfunc isValidEmail(_ email: String) -> Bool {\n    let emailPattern = \"[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,}\"\n    let emailPredicate = NSPredicate(format: \"SELF MATCHES %@\", emailPattern)\n    return emailPredicate.evaluate(with: email)\n}\n\n// Example usage\nlet email = \"test@example.com\"\nprint(isValidEmail(email))  // Output: true or false\n```"
  },
  {
    "task": "Implement a test to check if a rectangle's area is larger than a triangle's area.",
    "code": "```swift\nimport Foundation\n\nfunc rectangleArea(width: Double, height: Double) -> Double {\n    return width * height\n}\n\nfunc triangleArea(base: Double, height: Double) -> Double {\n    return 0.5 * base * height\n}\n\nfunc isRectangleAreaLarger(rectWidth: Double, rectHeight: Double, triBase: Double, triHeight: Double) -> Bool {\n    let rectArea = rectangleArea(width: rectWidth, height: rectHeight)\n    let triArea = triangleArea(base: triBase, height: triHeight)\n    return rectArea > triArea\n}\n\n// Example usage\nlet result = isRectangleAreaLarger(rectWidth: 10, rectHeight: 5, triBase: 8, triHeight: 5)\nprint(result)\n```"
  },
  {
    "task": "Write a function that verifies if two rectangles overlap each other.",
    "code": "```swift\nstruct Rectangle {\n    var x: Int\n    var y: Int\n    var width: Int\n    var height: Int\n}\n\nfunc doRectanglesOverlap(_ rect1: Rectangle, _ rect2: Rectangle) -> Bool {\n    let noOverlap = rect1.x + rect1.width <= rect2.x ||\n                    rect2.x + rect2.width <= rect1.x ||\n                    rect1.y + rect1.height <= rect2.y ||\n                    rect2.y + rect2.height <= rect1.y\n    return !noOverlap\n}\n```"
  },
  {
    "task": "Create a script to compare two strings lexicographically.",
    "code": "```swift\nlet string1 = \"apple\"\nlet string2 = \"banana\"\n\nif string1 < string2 {\n    print(\"\\(string1) is less than \\(string2)\")\n} else if string1 > string2 {\n    print(\"\\(string1) is greater than \\(string2)\")\n} else {\n    print(\"\\(string1) is equal to \\(string2)\")\n}\n```"
  },
  {
    "task": "Build a program that checks if a list of numbers is in ascending order.",
    "code": "```swift\nfunc isAscendingOrder(_ numbers: [Int]) -> Bool {\n    for i in 0..<numbers.count - 1 {\n        if numbers[i] > numbers[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n// Example usage:\nlet numbers = [1, 2, 3, 4, 5]\nprint(isAscendingOrder(numbers))  // Output: true\n```"
  },
  {
    "task": "Design a system to compare the heights of two buildings.",
    "code": "```swift\nstruct Building {\n    let height: Double\n}\n\nfunc compareHeights(building1: Building, building2: Building) -> String {\n    if building1.height > building2.height {\n        return \"Building 1 is taller than Building 2.\"\n    } else if building1.height < building2.height {\n        return \"Building 2 is taller than Building 1.\"\n    } else {\n        return \"Both buildings have the same height.\"\n    }\n}\n\nlet building1 = Building(height: 150.0)\nlet building2 = Building(height: 200.0)\n\nlet result = compareHeights(building1: building1, building2: building2)\nprint(result)\n```"
  },
  {
    "task": "Write a feature that determines if a given time is before noon.",
    "code": "```swift\nimport Foundation\n\nfunc isBeforeNoon(time: Date) -> Bool {\n    let calendar = Calendar.current\n    let noon = calendar.date(bySettingHour: 12, minute: 0, second: 0, of: time)!\n    return time.compare(noon) == .orderedAscending\n}\n```"
  },
  {
    "task": "Implement a function to check if a given number is a power of two.",
    "code": "```swift\nfunc isPowerOfTwo(_ n: Int) -> Bool {\n    guard n > 0 else { return false }\n    return (n & (n - 1)) == 0\n}\n```"
  },
  {
    "task": "Create a program that determines if a word is longer than another word.",
    "code": "```swift\nfunc isWordLonger(_ word1: String, than word2: String) -> Bool {\n    return word1.count > word2.count\n}\n\n// Example usage\nlet word1 = \"apple\"\nlet word2 = \"pear\"\nlet result = isWordLonger(word1, than: word2)\nprint(result)  // Output: true\n```"
  },
  {
    "task": "Develop a function to compare the lengths of two lists and return the longer one.",
    "code": "```swift\nfunc longerList<T>(list1: [T], list2: [T]) -> [T] {\n    return list1.count >= list2.count ? list1 : list2\n}\n```"
  },
  {
    "task": "Write a script to see if a user's input matches a pre-defined secret code.",
    "code": "```swift\nimport Foundation\n\nlet secretCode = \"XYZ123\"\nprint(\"Enter the secret code:\")\nif let userInput = readLine() {\n    if userInput == secretCode {\n        print(\"Access granted.\")\n    } else {\n        print(\"Access denied.\")\n    }\n}\n```"
  },
  {
    "task": "Build a utility that checks if a given year is in the 21st century.",
    "code": "```swift\nfunc isIn21stCentury(year: Int) -> Bool {\n    return year >= 2001 && year <= 2100\n}\n```"
  },
  {
    "task": "Create a logic that determines if a book's publication year is after 2000.",
    "code": "```swift\nfunc isPublishedAfter2000(publicationYear: Int) -> Bool {\n    return publicationYear > 2000\n}\n\n// Example usage:\nlet publicationYear = 2005\nlet result = isPublishedAfter2000(publicationYear: publicationYear)\nprint(\"Is the book published after 2000? \\(result)\")\n```"
  },
  {
    "task": "Design a feature to see if a number is divisible by both 3 and 5.",
    "code": "```swift\nfunc isDivisibleBy3And5(_ number: Int) -> Bool {\n    return number % 3 == 0 && number % 5 == 0\n}\n\n// Example usage\nlet number = 15\nif isDivisibleBy3And5(number) {\n    print(\"\\(number) is divisible by both 3 and 5\")\n} else {\n    print(\"\\(number) is not divisible by both 3 and 5\")\n}\n```"
  },
  {
    "task": "Implement a system that checks if a student's GPA is above a certain threshold.",
    "code": "```swift\nfunc isGPAAboveThreshold(gpa: Double, threshold: Double) -> Bool {\n    return gpa > threshold\n}\n\n// Example usage:\nlet studentGPA = 3.8\nlet threshold = 3.5\nlet result = isGPAAboveThreshold(gpa: studentGPA, threshold: threshold)\nprint(\"Is the student's GPA above the threshold? \\(result)\")\n```"
  },
  {
    "task": "Write a function to determine if a given angle is acute, right, or obtuse.",
    "code": "```swift\nfunc determineAngleType(angle: Int) -> String {\n    if angle < 90 {\n        return \"Acute\"\n    } else if angle == 90 {\n        return \"Right\"\n    } else if angle > 90 && angle < 180 {\n        return \"Obtuse\"\n    } else {\n        return \"Invalid angle\"\n    }\n}\n```"
  },
  {
    "task": "Develop a program that compares the lengths of two strings and returns the shorter one.",
    "code": "```swift\nfunc shorterString(_ string1: String, _ string2: String) -> String {\n    return string1.count < string2.count ? string1 : string2\n}\n\nlet string1 = \"Hello\"\nlet string2 = \"World!\"\nlet result = shorterString(string1, string2)\nprint(\"The shorter string is: \\(result)\")\n```"
  },
  {
    "task": "Create a script to verify if a username is unique within a list.",
    "code": "```swift\nimport Foundation\n\nfunc isUsernameUnique(username: String, usernamesList: [String]) -> Bool {\n    return !usernamesList.contains(username)\n}\n\n// Example usage\nlet usernames = [\"alice\", \"bob\", \"charlie\"]\nlet usernameToCheck = \"dave\"\nlet isUnique = isUsernameUnique(username: usernameToCheck, usernamesList: usernames)\nprint(\"Is the username '\\(usernameToCheck)' unique? \\(isUnique)\")\n```"
  },
  {
    "task": "Build a tool that checks if a job applicant meets all the listed qualifications.",
    "code": "```swift\nstruct Applicant {\n    var hasDegree: Bool\n    var hasExperience: Bool\n    var knowsSwift: Bool\n}\n\nfunc checkQualifications(for applicant: Applicant) -> Bool {\n    return applicant.hasDegree && applicant.hasExperience && applicant.knowsSwift\n}\n\nlet applicant = Applicant(hasDegree: true, hasExperience: true, knowsSwift: true)\nlet isQualified = checkQualifications(for: applicant)\nprint(\"Applicant is qualified: \\(isQualified)\")\n```"
  },
  {
    "task": "Write a feature to see if a vehicle's speed exceeds the speed limit.",
    "code": "```swift\nfunc isSpeedExceedingLimit(vehicleSpeed: Double, speedLimit: Double) -> Bool {\n    return vehicleSpeed > speedLimit\n}\n\n// Example usage:\nlet vehicleSpeed = 80.0\nlet speedLimit = 60.0\nlet exceeding = isSpeedExceedingLimit(vehicleSpeed: vehicleSpeed, speedLimit: speedLimit)\nprint(\"Is the vehicle exceeding the speed limit? \\(exceeding)\")\n```"
  },
  {
    "task": "Design a system that determines whether a given point is above or below the x-axis.",
    "code": "```swift\nstruct Point {\n    var x: Double\n    var y: Double\n    \n    func positionRelativeToXAxis() -> String {\n        if y > 0 {\n            return \"above\"\n        } else if y < 0 {\n            return \"below\"\n        } else {\n            return \"on\"\n        }\n    }\n}\n\nlet point = Point(x: 3.0, y: -2.0)\nprint(\"The point is \\(point.positionRelativeToXAxis()) the x-axis.\")\n```"
  },
  {
    "task": "Create a function that checks if a given word appears in a sentence.",
    "code": "```swift\nfunc doesWordAppear(in sentence: String, word: String) -> Bool {\n    let wordsInSentence = sentence.split(separator: \" \")\n    return wordsInSentence.contains { $0 == word }\n}\n```"
  },
  {
    "task": "Implement a program that identifies whether a given number is negative or positive.",
    "code": "```swift\nimport Foundation\n\nfunc identifyNumber(_ number: Int) -> String {\n    if number > 0 {\n        return \"Positive\"\n    } else if number < 0 {\n        return \"Negative\"\n    } else {\n        return \"Zero\"\n    }\n}\n\nlet number = 5\nprint(identifyNumber(number))\n```"
  },
  {
    "task": "Write a script to see if the sum of two numbers is greater than 100.",
    "code": "```swift\nlet number1 = 60\nlet number2 = 45\nlet sum = number1 + number2\n\nif sum > 100 {\n    print(\"The sum is greater than 100.\")\n} else {\n    print(\"The sum is not greater than 100.\")\n}\n```"
  },
  {
    "task": "Build a utility that checks if a file exists in a specified directory.",
    "code": "```swift\nimport Foundation\n\nfunc fileExists(atPath path: String, inDirectory directory: String) -> Bool {\n    let fileManager = FileManager.default\n    let fullPath = (directory as NSString).appendingPathComponent(path)\n    return fileManager.fileExists(atPath: fullPath)\n}\n\n// Usage example\nlet directory = \"/path/to/directory\"\nlet filename = \"example.txt\"\nlet exists = fileExists(atPath: filename, inDirectory: directory)\nprint(\"File exists: \\(exists)\")\n```"
  },
  {
    "task": "Develop a system to compare the weights of two different objects.",
    "code": "```swift\nstruct Object {\n    var weight: Double\n}\n\nfunc compareWeights(object1: Object, object2: Object) -> String {\n    if object1.weight > object2.weight {\n        return \"Object 1 is heavier than Object 2.\"\n    } else if object1.weight < object2.weight {\n        return \"Object 1 is lighter than Object 2.\"\n    } else {\n        return \"Both objects weigh the same.\"\n    }\n}\n\nlet object1 = Object(weight: 10.5)\nlet object2 = Object(weight: 12.3)\n\nlet result = compareWeights(object1: object1, object2: object2)\nprint(result)\n```"
  },
  {
    "task": "Create a logic to determine if a number falls within a defined range.",
    "code": "```swift\nfunc isNumberInRange(_ number: Int, lowerBound: Int, upperBound: Int) -> Bool {\n    return number >= lowerBound && number <= upperBound\n}\n\n// Example usage\nlet number = 10\nlet lowerBound = 5\nlet upperBound = 15\nlet result = isNumberInRange(number, lowerBound: lowerBound, upperBound: upperBound)\nprint(\"Is the number \\(number) in range (\\(lowerBound), \\(upperBound))? \\(result)\")\n```"
  },
  {
    "task": "Design a program that checks if an employee worked overtime based on hours worked.",
    "code": "```swift\nfunc checkOvertime(hoursWorked: Int) -> Bool {\n    let standardHours = 40\n    return hoursWorked > standardHours\n}\n\nlet hoursWorked = 45\nlet workedOvertime = checkOvertime(hoursWorked: hoursWorked)\nprint(\"Worked overtime: \\(workedOvertime)\")\n```"
  },
  {
    "task": "Write a function to compare two dates and determine which is earlier.",
    "code": "```swift\nimport Foundation\n\nfunc compareDates(date1: Date, date2: Date) -> String {\n    if date1 < date2 {\n        return \"Date1 is earlier than Date2\"\n    } else if date1 > date2 {\n        return \"Date1 is later than Date2\"\n    } else {\n        return \"Date1 is the same as Date2\"\n    }\n}\n```"
  },
  {
    "task": "Create a script that verifies if a given word starts with a vowel.",
    "code": "```swift\nfunc startsWithVowel(word: String) -> Bool {\n    guard let firstLetter = word.first else { return false }\n    let vowels: Set<Character> = [\"A\", \"E\", \"I\", \"O\", \"U\", \"a\", \"e\", \"i\", \"o\", \"u\"]\n    return vowels.contains(firstLetter)\n}\n\n// Example usage\nlet word = \"Example\"\nprint(startsWithVowel(word: word)) // Output: true\n```"
  },
  {
    "task": "Build a utility that checks if a number is even or odd.",
    "code": "```swift\nfunc isEven(_ number: Int) -> Bool {\n    return number % 2 == 0\n}\n\nfunc isOdd(_ number: Int) -> Bool {\n    return number % 2 != 0\n}\n\n// Example usage:\nlet number = 4\nprint(\"\\(number) is even: \\(isEven(number))\") // True\nprint(\"\\(number) is odd: \\(isOdd(number))\")   // False\n```"
  },
  {
    "task": "Implement a system that determines if a string contains only numeric characters.",
    "code": "```swift\nfunc isNumeric(_ input: String) -> Bool {\n    return input.allSatisfy { $0.isNumber }\n}\n\n// Example usage:\nlet testString1 = \"123456\"\nlet testString2 = \"123abc\"\nprint(isNumeric(testString1)) // true\nprint(isNumeric(testString2)) // false\n```"
  },
  {
    "task": "Write a function to see if a given character is a vowel or consonant.",
    "code": "```swift\nfunc isVowelOrConsonant(_ character: Character) -> String {\n    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"]\n    if vowels.contains(character) {\n        return \"Vowel\"\n    } else if character.isLetter {\n        return \"Consonant\"\n    } else {\n        return \"Neither\"\n    }\n}\n```"
  },
  {
    "task": "Create a program that checks if a point lies within a specified rectangle.",
    "code": "```swift\nstruct Point {\n    var x: Double\n    var y: Double\n}\n\nstruct Rectangle {\n    var x: Double\n    var y: Double\n    var width: Double\n    var height: Double\n}\n\nfunc isPointInsideRectangle(point: Point, rectangle: Rectangle) -> Bool {\n    return point.x >= rectangle.x &&\n           point.x <= rectangle.x + rectangle.width &&\n           point.y >= rectangle.y &&\n           point.y <= rectangle.y + rectangle.height\n}\n\nlet point = Point(x: 5, y: 5)\nlet rectangle = Rectangle(x: 0, y: 0, width: 10, height: 10)\n\nlet result = isPointInsideRectangle(point: point, rectangle: rectangle)\nprint(result)\n```"
  },
  {
    "task": "Develop a feature to compare two lists and return the common elements.",
    "code": "```swift\nfunc findCommonElements<T: Equatable>(list1: [T], list2: [T]) -> [T] {\n    var commonElements: [T] = []\n    \n    for element in list1 {\n        if list2.contains(element) {\n            commonElements.append(element)\n        }\n    }\n    \n    return commonElements\n}\n\n// Example usage:\nlet listA = [1, 2, 3, 4, 5]\nlet listB = [3, 4, 5, 6, 7]\nlet common = findCommonElements(list1: listA, list2: listB)\nprint(common)  // Output: [3, 4, 5]\n```"
  },
  {
    "task": "Design a function that determines if a text contains any uppercase letters.",
    "code": "```swift\nfunc containsUppercase(_ text: String) -> Bool {\n    for character in text {\n        if character.isUppercase {\n            return true\n        }\n    }\n    return false\n}\n```"
  },
  {
    "task": "Implement a script to check if a given sentence is a question.",
    "code": "```swift\nfunc isQuestion(sentence: String) -> Bool {\n    return sentence.hasSuffix(\"?\")\n}\n\n// Example usage\nlet sentence1 = \"Is this a question?\"\nlet sentence2 = \"This is not a question.\"\n\nprint(isQuestion(sentence: sentence1)) // true\nprint(isQuestion(sentence: sentence2)) // false\n```"
  },
  {
    "task": "Write a program to determine if a temperature is measured in Celsius or Fahrenheit.",
    "code": "```swift\nimport Foundation\n\nfunc determineTemperatureUnit(_ temperature: String) -> String {\n    if let value = Double(temperature) {\n        if value < -273.15 {\n            return \"Invalid temperature\"\n        } else if value <= 100 {\n            return \"Celsius\"\n        } else {\n            return \"Fahrenheit\"\n        }\n    }\n    return \"Invalid input\"\n}\n\n// Example usage\nlet temp1 = \"25\"\nlet temp2 = \"212\"\nlet temp3 = \"-300\"\n\nprint(determineTemperatureUnit(temp1)) // Celsius\nprint(determineTemperatureUnit(temp2)) // Fahrenheit\nprint(determineTemperatureUnit(temp3)) // Invalid temperature\n```"
  },
  {
    "task": "Create a system that verifies if a student is enrolled in a particular course.",
    "code": "```swift\nstruct Student {\n    let name: String\n    let courses: [String]\n    \n    func isEnrolled(in course: String) -> Bool {\n        return courses.contains(course)\n    }\n}\n\nlet student = Student(name: \"Alice\", courses: [\"Math\", \"Science\", \"History\"])\nlet courseToCheck = \"Math\"\n\nif student.isEnrolled(in: courseToCheck) {\n    print(\"\\(student.name) is enrolled in \\(courseToCheck).\")\n} else {\n    print(\"\\(student.name) is not enrolled in \\(courseToCheck).\")\n}\n```"
  },
  {
    "task": "Build a utility to check if a given string is a valid hexadecimal number.",
    "code": "```swift\nfunc isValidHexadecimal(_ string: String) -> Bool {\n    let hexCharacterSet = CharacterSet(charactersIn: \"0123456789ABCDEFabcdef\")\n    return !string.isEmpty && string.rangeOfCharacter(from: hexCharacterSet.inverted) == nil\n}\n\n// Example usage\nlet example1 = \"1A3F\"\nlet example2 = \"G4H7\"\n\nprint(isValidHexadecimal(example1)) // true\nprint(isValidHexadecimal(example2)) // false\n```"
  },
  {
    "task": "Write a function to see if two circles intersect based on their radii and center points.",
    "code": "```swift\nimport Foundation\n\nstruct Point {\n    var x: Double\n    var y: Double\n}\n\nstruct Circle {\n    var center: Point\n    var radius: Double\n}\n\nfunc circlesIntersect(circle1: Circle, circle2: Circle) -> Bool {\n    let dx = circle1.center.x - circle2.center.x\n    let dy = circle1.center.y - circle2.center.y\n    let distance = sqrt(dx * dx + dy * dy)\n    return distance <= (circle1.radius + circle2.radius)\n}\n```"
  },
  {
    "task": "Develop a program that checks if a given number is within 10% of another number.",
    "code": "```swift\nfunc isWithinTenPercent(of number1: Double, comparedTo number2: Double) -> Bool {\n    let difference = abs(number1 - number2)\n    let tenPercent = number2 * 0.10\n    return difference <= tenPercent\n}\n\nlet number1 = 110.0\nlet number2 = 100.0\n\nlet result = isWithinTenPercent(of: number1, comparedTo: number2)\nprint(\"Is \\(number1) within 10% of \\(number2)? \\(result)\")\n```"
  },
  {
    "task": "Create a feature to determine if a character is alphanumeric.",
    "code": "```swift\nfunc isAlphanumeric(_ character: Character) -> Bool {\n    return character.isLetter || character.isNumber\n}\n\n// Example Usage\nlet char: Character = \"A\"\nprint(isAlphanumeric(char))  // Output: true\n```"
  },
  {
    "task": "Implement a system to compare the profit margins of two products.",
    "code": "```swift\nstruct Product {\n    var revenue: Double\n    var cost: Double\n    \n    var profitMargin: Double {\n        return (revenue - cost) / revenue\n    }\n}\n\nfunc compareProfitMargins(product1: Product, product2: Product) -> String {\n    if product1.profitMargin > product2.profitMargin {\n        return \"Product 1 has a higher profit margin.\"\n    } else if product1.profitMargin < product2.profitMargin {\n        return \"Product 2 has a higher profit margin.\"\n    } else {\n        return \"Both products have the same profit margin.\"\n    }\n}\n\nlet product1 = Product(revenue: 150.0, cost: 100.0)\nlet product2 = Product(revenue: 200.0, cost: 150.0)\n\nlet result = compareProfitMargins(product1: product1, product2: product2)\nprint(result)\n```"
  },
  {
    "task": "Design a script to check if a given string contains any special characters.",
    "code": "```swift\nimport Foundation\n\nfunc containsSpecialCharacters(_ input: String) -> Bool {\n    let specialCharacterRegex = \".*[^a-zA-Z0-9].*\"\n    let predicate = NSPredicate(format: \"SELF MATCHES %@\", specialCharacterRegex)\n    return predicate.evaluate(with: input)\n}\n\n// Example usage\nlet testString = \"Hello@World!\"\nprint(containsSpecialCharacters(testString))\n```"
  },
  {
    "task": "Write a function to verify if a number is a multiple of another number.",
    "code": "```swift\nfunc isMultiple(of number: Int, multiple: Int) -> Bool {\n    return number % multiple == 0\n}\n```"
  },
  {
    "task": "Create a program that checks if a date is a holiday based on a list of holidays.",
    "code": "```swift\nimport Foundation\n\nfunc isHoliday(date: Date, holidays: [Date]) -> Bool {\n    return holidays.contains { Calendar.current.isDate($0, inSameDayAs: date) }\n}\n\n// Example usage\nlet dateFormatter = DateFormatter()\ndateFormatter.dateFormat = \"yyyy/MM/dd\"\n\nlet holidays = [\n    dateFormatter.date(from: \"2023/12/25\")!,\n    dateFormatter.date(from: \"2023/01/01\")!\n]\n\nlet today = Date()\nlet result = isHoliday(date: today, holidays: holidays)\nprint(\"Is today a holiday? \\(result)\")\n```"
  },
  {
    "task": "Build a utility to compare two text files and highlight the differences.",
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    do {\n        return try String(contentsOfFile: path, encoding: .utf8)\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}\n\nfunc compareTextFiles(file1Path: String, file2Path: String) -> [(String?, String?)]? {\n    guard let file1Content = readTextFile(at: file1Path),\n          let file2Content = readTextFile(at: file2Path) else {\n        return nil\n    }\n    \n    let file1Lines = file1Content.split(separator: \"\\n\", omittingEmptySubsequences: false)\n    let file2Lines = file2Content.split(separator: \"\\n\", omittingEmptySubsequences: false)\n    \n    let maxLines = max(file1Lines.count, file2Lines.count)\n    var differences: [(String?, String?)] = []\n    \n    for i in 0..<maxLines {\n        let line1 = i < file1Lines.count ? String(file1Lines[i]) : nil\n        let line2 = i < file2Lines.count ? String(file2Lines[i]) : nil\n        if line1 != line2 {\n            differences.append((line1, line2))\n        }\n    }\n    \n    return differences\n}\n\nfunc highlightDifferences(differences: [(String?, String?)]) {\n    for (line1, line2) in differences {\n        if let line1 = line1, let line2 = line2 {\n            print(\"- \\(line1)\")\n            print(\"+ \\(line2)\")\n        } else if let line1 = line1 {\n            print(\"- \\(line1)\")\n        } else if let line2 = line2 {\n            print(\"+ \\(line2)\")\n        }\n    }\n}\n\nif let differences = compareTextFiles(file1Path: \"path/to/file1.txt\", file2Path: \"path/to/file2.txt\") {\n    highlightDifferences(differences: differences)\n}\n```"
  },
  {
    "task": "Develop a function to determine if a given password is strong based on length and character diversity.",
    "code": "```swift\nfunc isStrongPassword(_ password: String) -> Bool {\n    guard password.count >= 8 else { return false }\n    \n    var hasUppercase = false\n    var hasLowercase = false\n    var hasDigit = false\n    var hasSpecialCharacter = false\n    \n    for char in password {\n        if char.isUppercase { hasUppercase = true }\n        if char.isLowercase { hasLowercase = true }\n        if char.isNumber { hasDigit = true }\n        if char.isPunctuation || char.isSymbol { hasSpecialCharacter = true }\n        \n        if hasUppercase && hasLowercase && hasDigit && hasSpecialCharacter {\n            return true\n        }\n    }\n    \n    return false\n}\n```"
  },
  {
    "task": "Write a script to see if a number is within a specified distance from zero.",
    "code": "```swift\nfunc isWithinDistanceFromZero(number: Double, distance: Double) -> Bool {\n    return abs(number) <= distance\n}\n\nlet number = 4.5\nlet distance = 5.0\n\nif isWithinDistanceFromZero(number: number, distance: distance) {\n    print(\"\\(number) is within \\(distance) from zero.\")\n} else {\n    print(\"\\(number) is not within \\(distance) from zero.\")\n}\n```"
  },
  {
    "task": "Create a system to check if a book title is available in a library database.",
    "code": "```swift\nimport Foundation\n\nstruct Library {\n    var books: [String]\n    \n    func isBookAvailable(title: String) -> Bool {\n        return books.contains { $0.caseInsensitiveCompare(title) == .orderedSame }\n    }\n}\n\nlet library = Library(books: [\"To Kill a Mockingbird\", \"1984\", \"The Great Gatsby\"])\nlet bookTitle = \"1984\"\nlet isAvailable = library.isBookAvailable(title: bookTitle)\nprint(\"Is '\\(bookTitle)' available? \\(isAvailable ? \"Yes\" : \"No\")\")\n```"
  },
  {
    "task": "Implement a feature that determines if a user has administrator privileges.",
    "code": "```swift\nstruct User {\n    let username: String\n    let isAdmin: Bool\n}\n\nfunc hasAdminPrivileges(user: User) -> Bool {\n    return user.isAdmin\n}\n\n// Example usage\nlet user1 = User(username: \"john_doe\", isAdmin: false)\nlet user2 = User(username: \"admin_user\", isAdmin: true)\n\nprint(hasAdminPrivileges(user: user1)) // false\nprint(hasAdminPrivileges(user: user2)) // true\n```"
  },
  {
    "task": "Design a function to compare the brightness of two colors.",
    "code": "```swift\nimport UIKit\n\nfunc compareBrightness(of color1: UIColor, to color2: UIColor) -> String {\n    func brightness(of color: UIColor) -> CGFloat {\n        var red: CGFloat = 0.0\n        var green: CGFloat = 0.0\n        var blue: CGFloat = 0.0\n        var alpha: CGFloat = 0.0\n        color.getRed(&red, green: &green, blue: &blue, alpha: &alpha)\n        return (red * 299 + green * 587 + blue * 114) / 1000\n    }\n    \n    let brightness1 = brightness(of: color1)\n    let brightness2 = brightness(of: color2)\n    \n    if brightness1 > brightness2 {\n        return \"Color 1 is brighter\"\n    } else if brightness1 < brightness2 {\n        return \"Color 2 is brighter\"\n    } else {\n        return \"Both colors have the same brightness\"\n    }\n}\n```"
  },
  {
    "task": "Write a program to verify if a number is a valid credit card number using the Luhn algorithm.",
    "code": "```swift\nfunc isValidCreditCardNumber(_ number: String) -> Bool {\n    let reversedDigits = number.reversed().compactMap { Int(String($0)) }\n    guard reversedDigits.count > 1 else { return false }\n\n    let sum = reversedDigits.enumerated().reduce(0) { (sum, pair) in\n        let (index, digit) = pair\n        if index % 2 != 0 {\n            let doubled = digit * 2\n            return sum + (doubled > 9 ? doubled - 9 : doubled)\n        } else {\n            return sum + digit\n        }\n    }\n\n    return sum % 10 == 0\n}\n\n// Example usage:\nlet cardNumber = \"4539578763621486\"\nprint(isValidCreditCardNumber(cardNumber)) // Output: true or false\n```"
  },
  {
    "task": "Create a script to determine if a given string is a valid IP address.",
    "code": "```swift\nimport Foundation\n\nfunc isValidIPAddress(_ ipAddress: String) -> Bool {\n    let parts = ipAddress.split(separator: \".\")\n    guard parts.count == 4 else { return false }\n    \n    for part in parts {\n        guard let number = Int(part), number >= 0 && number <= 255 else {\n            return false\n        }\n        if part.hasPrefix(\"0\") && part.count > 1 {\n            return false\n        }\n    }\n    \n    return true\n}\n\n// Example usage:\nlet ipAddress = \"192.168.1.1\"\nprint(isValidIPAddress(ipAddress)) // true or false\n```"
  },
  {
    "task": "Build a utility that checks if a number is part of an arithmetic sequence.",
    "code": "```swift\nimport Foundation\n\nfunc isPartOfArithmeticSequence(number: Int, start: Int, difference: Int) -> Bool {\n    guard difference != 0 else {\n        return number == start\n    }\n    \n    let remainder = (number - start) % difference\n    return remainder == 0 && ((number - start) / difference) >= 0\n}\n```"
  },
  {
    "task": "Develop a feature to compare the efficiency of two algorithms based on time complexity.",
    "code": "```swift\nimport Foundation\n\nenum Algorithm {\n    case algorithm1, algorithm2\n    \n    var timeComplexity: String {\n        switch self {\n        case .algorithm1:\n            return \"O(n)\"\n        case .algorithm2:\n            return \"O(n log n)\"\n        }\n    }\n}\n\nfunc compareAlgorithms(_ algo1: Algorithm, _ algo2: Algorithm) -> String {\n    let complexities = [\"O(1)\": 1, \"O(log n)\": 2, \"O(n)\": 3, \"O(n log n)\": 4, \"O(n^2)\": 5, \"O(n^3)\": 6, \"O(2^n)\": 7, \"O(n!)\": 8]\n    \n    guard let complexity1 = complexities[algo1.timeComplexity],\n          let complexity2 = complexities[algo2.timeComplexity] else {\n        return \"Unknown complexity comparison\"\n    }\n    \n    if complexity1 < complexity2 {\n        return \"\\(algo1) is more efficient than \\(algo2)\"\n    } else if complexity1 > complexity2 {\n        return \"\\(algo2) is more efficient than \\(algo1)\"\n    } else {\n        return \"\\(algo1) and \\(algo2) have the same efficiency\"\n    }\n}\n\nlet result = compareAlgorithms(.algorithm1, .algorithm2)\nprint(result)\n```"
  },
  {
    "task": "Write a function to see if a given date falls in a leap year.",
    "code": "```swift\nfunc isLeapYear(for date: Date) -> Bool {\n    let calendar = Calendar.current\n    let year = calendar.component(.year, from: date)\n    if year % 4 == 0 {\n        if year % 100 == 0 {\n            return year % 400 == 0\n        }\n        return true\n    }\n    return false\n}\n```"
  },
  {
    "task": "Create a program that determines if a user's subscription is active based on the current date.",
    "code": "```swift\nimport Foundation\n\nlet currentDate = Date()\nlet dateFormatter = DateFormatter()\ndateFormatter.dateFormat = \"yyyy/MM/dd\"\n\n// Assuming the subscription end date is set in the format \"yyyy/MM/dd\"\nlet subscriptionEndDateString = \"2023/12/31\"\nif let subscriptionEndDate = dateFormatter.date(from: subscriptionEndDateString) {\n    if currentDate <= subscriptionEndDate {\n        print(\"Subscription is active.\")\n    } else {\n        print(\"Subscription has expired.\")\n    }\n} else {\n    print(\"Invalid subscription end date.\")\n}\n```"
  },
  {
    "task": "Design a tool to check if a user\u2019s input is a palindrome phrase, ignoring spaces and punctuation.",
    "code": "```swift\nimport Foundation\n\nfunc isPalindrome(_ input: String) -> Bool {\n    let filteredInput = input.lowercased().filter { $0.isLetter }\n    return filteredInput == String(filteredInput.reversed())\n}\n\n// Example usage:\nlet userInput = \"A man, a plan, a canal, Panama\"\nprint(isPalindrome(userInput))  // Output: true\n```"
  },
  {
    "task": "Implement a system to verify if a given number is part of the Fibonacci sequence.",
    "code": "```swift\nfunc isFibonacciNumber(_ n: Int) -> Bool {\n    var a = 0\n    var b = 1\n    while b < n {\n        let temp = a\n        a = b\n        b = temp + b\n    }\n    return b == n || n == 0\n}\n\nlet number = 21\nif isFibonacciNumber(number) {\n    print(\"\\(number) is a Fibonacci number.\")\n} else {\n    print(\"\\(number) is not a Fibonacci number.\")\n}\n```"
  },
  {
    "task": "Write a program to compare the elevation of two geographic locations.",
    "code": "```swift\nimport Foundation\n\nfunc compareElevation(elevation1: Double, elevation2: Double) -> String {\n    if elevation1 > elevation2 {\n        return \"Location 1 is higher than Location 2.\"\n    } else if elevation1 < elevation2 {\n        return \"Location 2 is higher than Location 1.\"\n    } else {\n        return \"Both locations have the same elevation.\"\n    }\n}\n\n// Example usage\nlet elevationOfLocation1 = 1500.0\nlet elevationOfLocation2 = 1200.0\n\nlet result = compareElevation(elevation1: elevationOfLocation1, elevation2: elevationOfLocation2)\nprint(result)\n```"
  },
  {
    "task": "Create a function to determine if a given string is a valid JSON format.",
    "code": "```swift\nimport Foundation\n\nfunc isValidJSON(_ jsonString: String) -> Bool {\n    guard let data = jsonString.data(using: .utf8) else {\n        return false\n    }\n    return (try? JSONSerialization.jsonObject(with: data, options: [])) != nil\n}\n```"
  },
  {
    "task": "Build a utility that checks if a number is a factorial of any integer.",
    "code": "```swift\nimport Foundation\n\nfunc isFactorial(of number: Int) -> Bool {\n    if number < 0 {\n        return false\n    }\n    \n    var n = 1\n    var factorial = 1\n    \n    while factorial <= number {\n        if factorial == number {\n            return true\n        }\n        n += 1\n        factorial *= n\n    }\n    \n    return false\n}\n\n// Example usage:\nlet number = 120\nlet result = isFactorial(of: number)\nprint(\"\\(number) is a factorial of an integer: \\(result)\")\n```"
  },
  {
    "task": "Develop a feature to compare the widths of two ribbons and return the wider one.",
    "code": "```swift\nfunc widerRibbon(ribbon1Width: Double, ribbon2Width: Double) -> Double {\n    return ribbon1Width > ribbon2Width ? ribbon1Width : ribbon2Width\n}\n```"
  },
  {
    "task": "Write a script to see if a word is present in a list of banned words.",
    "code": "```swift\nlet bannedWords = [\"spam\", \"advertisement\", \"clickbait\"]\nlet wordToCheck = \"spam\"\n\nif bannedWords.contains(wordToCheck) {\n    print(\"\\(wordToCheck) is a banned word.\")\n} else {\n    print(\"\\(wordToCheck) is not a banned word.\")\n}\n```"
  },
  {
    "task": "Design a system to determine if a patient's temperature is in the normal range.",
    "code": "```swift\nfunc isTemperatureNormal(_ temperature: Double) -> Bool {\n    let normalRange = 36.5...37.5\n    return normalRange.contains(temperature)\n}\n\n// Example usage\nlet patientTemperature = 37.0\nlet isNormal = isTemperatureNormal(patientTemperature)\nprint(\"Is the temperature normal? \\(isNormal)\")\n```"
  },
  {
    "task": "Create a program that checks if a given time is during business hours.",
    "code": "```swift\nimport Foundation\n\nfunc isDuringBusinessHours(hour: Int, minute: Int) -> Bool {\n    let openingHour = 9\n    let closingHour = 17\n    \n    if hour < openingHour || hour > closingHour {\n        return false\n    }\n    \n    // If it's exactly closing hour, minutes should be 0 to be considered within business hours\n    if hour == closingHour && minute > 0 {\n        return false\n    }\n    \n    return true\n}\n\n// Example usage:\nlet hour = 10\nlet minute = 30\nprint(isDuringBusinessHours(hour: hour, minute: minute)) // true or false\n```"
  },
  {
    "task": "Implement a function to see if a number is a triangular number.",
    "code": "```swift\nfunc isTriangularNumber(_ number: Int) -> Bool {\n    if number < 0 { return false }\n    \n    var sum = 0\n    var n = 1\n    \n    while sum < number {\n        sum += n\n        if sum == number {\n            return true\n        }\n        n += 1\n    }\n    \n    return false\n}\n```"
  },
  {
    "task": "Write a feature to compare the number of vowels in two given strings.",
    "code": "```swift\nfunc countVowels(in string: String) -> Int {\n    let vowels = Set(\"aeiouAEIOU\")\n    return string.reduce(0) { count, character in\n        vowels.contains(character) ? count + 1 : count\n    }\n}\n\nfunc compareVowelCount(string1: String, string2: String) -> Int {\n    let count1 = countVowels(in: string1)\n    let count2 = countVowels(in: string2)\n    if count1 > count2 {\n        return 1\n    } else if count1 < count2 {\n        return -1\n    } else {\n        return 0\n    }\n}\n```"
  }
]