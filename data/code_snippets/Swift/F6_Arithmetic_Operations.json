[
  {
    "task": "Write a function that takes two numbers and returns their sum.",
    "code": "```swift\nfunc sum(_ a: Double, _ b: Double) -> Double {\n    return a + b\n}\n```"
  },
  {
    "task": "Create a program that calculates the difference between two given integers.",
    "code": "```swift\nimport Foundation\n\nfunc calculateDifference(_ a: Int, _ b: Int) -> Int {\n    return a - b\n}\n\nlet firstNumber = 10\nlet secondNumber = 5\nlet difference = calculateDifference(firstNumber, secondNumber)\nprint(\"The difference is: \\(difference)\")\n```"
  },
  {
    "task": "Design a function to multiply two floating-point numbers and return the result.",
    "code": "```swift\nfunc multiply(_ a: Float, _ b: Float) -> Float {\n    return a * b\n}\n```"
  },
  {
    "task": "Implement a function that divides two numbers and handles division by zero exceptions.",
    "code": "```swift\nfunc safeDivide(_ numerator: Double, _ denominator: Double) -> Double? {\n    guard denominator != 0 else {\n        return nil\n    }\n    return numerator / denominator\n}\n\n// Example usage:\nif let result = safeDivide(10, 2) {\n    print(\"Result: \\(result)\")\n} else {\n    print(\"Cannot divide by zero.\")\n}\n```"
  },
  {
    "task": "Build a calculator that can perform addition, subtraction, multiplication, and division on user-provided inputs.",
    "code": "```swift\nimport Foundation\n\nfunc calculator() {\n    print(\"Enter first number:\")\n    guard let input1 = readLine(), let number1 = Double(input1) else {\n        print(\"Invalid input\")\n        return\n    }\n\n    print(\"Enter operation (+, -, *, /):\")\n    guard let operation = readLine(), \"+-*/\".contains(operation) else {\n        print(\"Invalid operation\")\n        return\n    }\n\n    print(\"Enter second number:\")\n    guard let input2 = readLine(), let number2 = Double(input2) else {\n        print(\"Invalid input\")\n        return\n    }\n\n    var result: Double?\n\n    switch operation {\n    case \"+\":\n        result = number1 + number2\n    case \"-\":\n        result = number1 - number2\n    case \"*\":\n        result = number1 * number2\n    case \"/\":\n        if number2 != 0 {\n            result = number1 / number2\n        } else {\n            print(\"Cannot divide by zero\")\n            return\n        }\n    default:\n        print(\"Unknown operation\")\n        return\n    }\n\n    if let result = result {\n        print(\"Result: \\(result)\")\n    }\n}\n\ncalculator()\n```"
  },
  {
    "task": "Write a script to compute the average of a list of numbers using arithmetic operations.",
    "code": "```swift\nimport Foundation\n\nfunc computeAverage(of numbers: [Double]) -> Double? {\n    guard !numbers.isEmpty else { return nil }\n    let sum = numbers.reduce(0, +)\n    return sum / Double(numbers.count)\n}\n\nlet numbers: [Double] = [10, 20, 30, 40, 50]\nif let average = computeAverage(of: numbers) {\n    print(\"The average is \\(average)\")\n} else {\n    print(\"The list is empty.\")\n}\n```"
  },
  {
    "task": "Create a function that returns the remainder of the division of two integers.",
    "code": "```swift\nfunc remainderOfDivision(_ a: Int, _ b: Int) -> Int {\n    return a % b\n}\n```"
  },
  {
    "task": "Develop a function that can add a variable number of arguments and return the total.",
    "code": "```swift\nfunc addNumbers(_ numbers: Double...) -> Double {\n    return numbers.reduce(0, +)\n}\n```"
  },
  {
    "task": "Write a program that subtracts a series of numbers from an initial value.",
    "code": "```swift\nfunc subtractSeries(from initialValue: Int, numbers: [Int]) -> Int {\n    var result = initialValue\n    for number in numbers {\n        result -= number\n    }\n    return result\n}\n\nlet initialValue = 100\nlet numbersToSubtract = [10, 20, 5, 15]\nlet result = subtractSeries(from: initialValue, numbers: numbersToSubtract)\nprint(\"Result: \\(result)\")\n```"
  },
  {
    "task": "Implement a function that multiplies all elements in an array and returns the product.",
    "code": "```swift\nfunc multiplyElements(in array: [Int]) -> Int {\n    return array.reduce(1, *)\n}\n```"
  },
  {
    "task": "Design a program that divides a number by another and rounds the result to two decimal places.",
    "code": "```swift\nimport Foundation\n\nfunc divideAndRound(_ numerator: Double, _ denominator: Double) -> Double? {\n    guard denominator != 0 else { return nil }\n    let result = numerator / denominator\n    return round(result * 100) / 100\n}\n\nif let result = divideAndRound(10.0, 3.0) {\n    print(result)\n} else {\n    print(\"Division by zero is not allowed.\")\n}\n```"
  },
  {
    "task": "Create a function that performs arithmetic operations on complex numbers.",
    "code": "```swift\nstruct Complex {\n    var real: Double\n    var imaginary: Double\n    \n    static func +(lhs: Complex, rhs: Complex) -> Complex {\n        return Complex(real: lhs.real + rhs.real, imaginary: lhs.imaginary + rhs.imaginary)\n    }\n    \n    static func -(lhs: Complex, rhs: Complex) -> Complex {\n        return Complex(real: lhs.real - rhs.real, imaginary: lhs.imaginary - rhs.imaginary)\n    }\n    \n    static func *(lhs: Complex, rhs: Complex) -> Complex {\n        return Complex(real: lhs.real * rhs.real - lhs.imaginary * rhs.imaginary, \n                       imaginary: lhs.real * rhs.imaginary + lhs.imaginary * rhs.real)\n    }\n    \n    static func /(lhs: Complex, rhs: Complex) -> Complex {\n        let denominator = rhs.real * rhs.real + rhs.imaginary * rhs.imaginary\n        return Complex(real: (lhs.real * rhs.real + lhs.imaginary * rhs.imaginary) / denominator,\n                       imaginary: (lhs.imaginary * rhs.real - lhs.real * rhs.imaginary) / denominator)\n    }\n}\n```"
  },
  {
    "task": "Write a function to calculate the area of a rectangle given its length and width using multiplication.",
    "code": "```swift\nfunc calculateRectangleArea(length: Double, width: Double) -> Double {\n    return length * width\n}\n```"
  },
  {
    "task": "Build a program that converts a price in dollars to another currency using multiplication with exchange rates.",
    "code": "```swift\nimport Foundation\n\nfunc convertCurrency(amountInDollars: Double, exchangeRate: Double) -> Double {\n    return amountInDollars * exchangeRate\n}\n\n// Example usage\nlet dollars = 100.0\nlet exchangeRate = 0.85 // Example: 1 USD to 0.85 EUR\nlet convertedAmount = convertCurrency(amountInDollars: dollars, exchangeRate: exchangeRate)\nprint(\"Converted Amount: \\(convertedAmount)\")\n```"
  },
  {
    "task": "Implement a function that checks if a number is divisible by another and returns a boolean.",
    "code": "```swift\nfunc isDivisible(_ dividend: Int, by divisor: Int) -> Bool {\n    return dividend % divisor == 0\n}\n```"
  },
  {
    "task": "Write a script to sum the digits of an integer using arithmetic operations.",
    "code": "```swift\nfunc sumOfDigits(of number: Int) -> Int {\n    var num = abs(number)\n    var sum = 0\n    while num > 0 {\n        sum += num % 10\n        num /= 10\n    }\n    return sum\n}\n\n// Example usage:\nlet number = 12345\nlet result = sumOfDigits(of: number)\nprint(\"Sum of digits: \\(result)\")\n```"
  },
  {
    "task": "Develop a function that applies a discount percentage to a price using subtraction and multiplication.",
    "code": "```swift\nfunc applyDiscount(price: Double, discountPercentage: Double) -> Double {\n    let discountAmount = price * (discountPercentage / 100)\n    let discountedPrice = price - discountAmount\n    return discountedPrice\n}\n```"
  },
  {
    "task": "Create a program to calculate the yearly salary given an hourly wage and hours worked per week.",
    "code": "```swift\nimport Foundation\n\nfunc calculateYearlySalary(hourlyWage: Double, hoursPerWeek: Double) -> Double {\n    let weeksInYear = 52.0\n    let yearlySalary = hourlyWage * hoursPerWeek * weeksInYear\n    return yearlySalary\n}\n\nlet hourlyWage = 25.0\nlet hoursPerWeek = 40.0\n\nlet yearlySalary = calculateYearlySalary(hourlyWage: hourlyWage, hoursPerWeek: hoursPerWeek)\nprint(\"Yearly Salary: \\(yearlySalary)\")\n```"
  },
  {
    "task": "Design a function that calculates the compound interest over a given period using arithmetic operations.",
    "code": "```swift\nfunc calculateCompoundInterest(principal: Double, rate: Double, timesCompounded: Int, years: Int) -> Double {\n    let amount = principal * pow((1 + rate / Double(timesCompounded)), Double(timesCompounded * years))\n    return amount\n}\n\n// Example usage:\nlet principalAmount = 1000.0\nlet annualRate = 0.05\nlet timesCompoundedPerYear = 4\nlet investmentYears = 10\n\nlet compoundInterest = calculateCompoundInterest(principal: principalAmount, rate: annualRate, timesCompounded: timesCompoundedPerYear, years: investmentYears)\nprint(compoundInterest)\n```"
  },
  {
    "task": "Write a program that scales a 2D point by a given factor using multiplication.",
    "code": "```swift\nstruct Point {\n    var x: Double\n    var y: Double\n\n    mutating func scale(by factor: Double) {\n        x *= factor\n        y *= factor\n    }\n}\n\nvar point = Point(x: 3.0, y: 4.0)\nlet scalingFactor = 2.5\npoint.scale(by: scalingFactor)\nprint(\"Scaled point: (\\(point.x), \\(point.y))\")\n```"
  },
  {
    "task": "Implement a function that calculates the perimeter of a triangle given its side lengths.",
    "code": "```swift\nfunc calculatePerimeter(side1: Double, side2: Double, side3: Double) -> Double {\n    return side1 + side2 + side3\n}\n```"
  },
  {
    "task": "Create a function to determine if three sides can form a right triangle using the Pythagorean theorem.",
    "code": "```swift\nfunc canFormRightTriangle(side1: Double, side2: Double, side3: Double) -> Bool {\n    let sides = [side1, side2, side3].sorted()\n    return pow(sides[0], 2) + pow(sides[1], 2) == pow(sides[2], 2)\n}\n```"
  },
  {
    "task": "Write a script that calculates the total cost of items in a shopping cart using addition.",
    "code": "```swift\nlet itemPrices = [12.99, 23.75, 9.99, 5.49, 15.00]\n\nlet totalCost = itemPrices.reduce(0, +)\n\nprint(\"Total cost of items in the shopping cart: $\\(totalCost)\")\n```"
  },
  {
    "task": "Develop a function that returns the quotient and remainder of a division operation.",
    "code": "```swift\nfunc divide(_ dividend: Int, by divisor: Int) -> (quotient: Int, remainder: Int) {\n    let quotient = dividend / divisor\n    let remainder = dividend % divisor\n    return (quotient, remainder)\n}\n```"
  },
  {
    "task": "Build a program that simulates a basic checkout system using arithmetic operations for totals and discounts.",
    "code": "```swift\nimport Foundation\n\nstruct Item {\n    let name: String\n    let price: Double\n}\n\nclass CheckoutSystem {\n    private var items: [Item] = []\n    private var discountRate: Double = 0.0\n    \n    func addItem(_ item: Item) {\n        items.append(item)\n    }\n    \n    func setDiscountRate(_ rate: Double) {\n        discountRate = rate\n    }\n    \n    func calculateTotal() -> Double {\n        let subtotal = items.reduce(0) { $0 + $1.price }\n        let discount = subtotal * discountRate\n        let total = subtotal - discount\n        return total\n    }\n    \n    func printReceipt() {\n        print(\"Receipt:\")\n        for item in items {\n            print(\"\\(item.name): $\\(String(format: \"%.2f\", item.price))\")\n        }\n        print(\"Discount Rate: \\(String(format: \"%.0f\", discountRate * 100))%\")\n        print(\"Total: $\\(String(format: \"%.2f\", calculateTotal()))\")\n    }\n}\n\nlet checkout = CheckoutSystem()\ncheckout.addItem(Item(name: \"Apple\", price: 0.99))\ncheckout.addItem(Item(name: \"Milk\", price: 2.49))\ncheckout.addItem(Item(name: \"Bread\", price: 1.99))\ncheckout.setDiscountRate(0.10)\ncheckout.printReceipt()\n```"
  },
  {
    "task": "Implement a function to calculate the distance between two points on a plane using subtraction and square roots.",
    "code": "```swift\nimport Foundation\n\nfunc distanceBetweenPoints(x1: Double, y1: Double, x2: Double, y2: Double) -> Double {\n    let deltaX = x2 - x1\n    let deltaY = y2 - y1\n    return sqrt(deltaX * deltaX + deltaY * deltaY)\n}\n```"
  },
  {
    "task": "Write a function that calculates the speed of a vehicle given distance and time using division.",
    "code": "```swift\nfunc calculateSpeed(distance: Double, time: Double) -> Double {\n    return distance / time\n}\n```"
  },
  {
    "task": "Create a program to compute the total minutes in a given number of hours using multiplication.",
    "code": "```swift\nfunc totalMinutes(in hours: Int) -> Int {\n    return hours * 60\n}\n\nlet hours = 5\nlet minutes = totalMinutes(in: hours)\nprint(\"Total minutes in \\(hours) hours is \\(minutes) minutes.\")\n```"
  },
  {
    "task": "Design a function that determines the number of dozens of eggs from a given total number of eggs.",
    "code": "```swift\nfunc numberOfDozens(from totalEggs: Int) -> Int {\n    return totalEggs / 12\n}\n```"
  },
  {
    "task": "Write a script to find the greatest common divisor of two numbers using arithmetic operations.",
    "code": "```swift\nfunc greatestCommonDivisor(_ a: Int, _ b: Int) -> Int {\n    var num1 = a\n    var num2 = b\n    \n    while num2 != 0 {\n        let remainder = num1 % num2\n        num1 = num2\n        num2 = remainder\n    }\n    \n    return num1\n}\n\nlet number1 = 56\nlet number2 = 98\nlet gcd = greatestCommonDivisor(number1, number2)\nprint(\"The GCD of \\(number1) and \\(number2) is \\(gcd).\")\n```"
  },
  {
    "task": "Develop a program that calculates the total weight of multiple items using addition.",
    "code": "```swift\nfunc calculateTotalWeight(of items: [Double]) -> Double {\n    return items.reduce(0, +)\n}\n\nlet itemWeights = [2.5, 3.0, 1.75, 4.25]\nlet totalWeight = calculateTotalWeight(of: itemWeights)\nprint(\"Total Weight: \\(totalWeight)\")\n```"
  },
  {
    "task": "Implement a function to convert a temperature from Celsius to Fahrenheit using multiplication and addition.",
    "code": "```swift\nfunc celsiusToFahrenheit(celsius: Double) -> Double {\n    return celsius * 9 / 5 + 32\n}\n```"
  },
  {
    "task": "Create a program that determines the age difference between two people given their birth years.",
    "code": "```swift\nimport Foundation\n\nfunc ageDifference(birthYear1: Int, birthYear2: Int) -> Int {\n    return abs(birthYear1 - birthYear2)\n}\n\nlet birthYearPerson1 = 1990\nlet birthYearPerson2 = 1985\n\nlet difference = ageDifference(birthYear1: birthYearPerson1, birthYear2: birthYearPerson2)\nprint(\"The age difference is \\(difference) years.\")\n```"
  },
  {
    "task": "Write a function to calculate the final price after applying tax and discount using addition and subtraction.",
    "code": "```swift\nfunc calculateFinalPrice(initialPrice: Double, taxRate: Double, discount: Double) -> Double {\n    let taxAmount = initialPrice * taxRate / 100\n    let discountAmount = initialPrice * discount / 100\n    let finalPrice = initialPrice + taxAmount - discountAmount\n    return finalPrice\n}\n```"
  },
  {
    "task": "Design a program to compute the net profit given total revenue and expenses.",
    "code": "```swift\nfunc calculateNetProfit(revenue: Double, expenses: Double) -> Double {\n    return revenue - expenses\n}\n\nlet totalRevenue = 10000.0\nlet totalExpenses = 7500.0\n\nlet netProfit = calculateNetProfit(revenue: totalRevenue, expenses: totalExpenses)\nprint(\"Net Profit: \\(netProfit)\")\n```"
  },
  {
    "task": "Develop a function to calculate the BMI given weight and height using division and multiplication.",
    "code": "```swift\nfunc calculateBMI(weight: Double, height: Double) -> Double {\n    return weight / (height * height)\n}\n```"
  },
  {
    "task": "Create a function that calculates the midpoint between two numbers using addition and division.",
    "code": "```swift\nfunc calculateMidpoint(_ a: Double, _ b: Double) -> Double {\n    return (a + b) / 2.0\n}\n```"
  },
  {
    "task": "Write a program that outputs the result of dividing a number by another with remainder.",
    "code": "```swift\nlet dividend = 10\nlet divisor = 3\n\nlet quotient = dividend / divisor\nlet remainder = dividend % divisor\n\nprint(\"Quotient: \\(quotient), Remainder: \\(remainder)\")\n```"
  },
  {
    "task": "Implement a function to calculate the factorial of a number using multiplication.",
    "code": "```swift\nfunc factorial(of number: Int) -> Int {\n    guard number >= 0 else { return 0 }\n    return (1...number).reduce(1, *)\n}\n```"
  },
  {
    "task": "Build a script to find the average of three numbers using addition and division.",
    "code": "```swift\nimport Foundation\n\nfunc averageOfThreeNumbers(_ a: Double, _ b: Double, _ c: Double) -> Double {\n    return (a + b + c) / 3.0\n}\n\nlet num1 = 5.0\nlet num2 = 10.0\nlet num3 = 15.0\n\nlet average = averageOfThreeNumbers(num1, num2, num3)\nprint(\"The average is \\(average)\")\n```"
  },
  {
    "task": "Create a program that simulates a simple bank account using arithmetic operations for deposits and withdrawals.",
    "code": "```swift\nclass BankAccount {\n    private var balance: Double\n    \n    init(initialBalance: Double) {\n        self.balance = initialBalance\n    }\n    \n    func deposit(amount: Double) {\n        balance += amount\n        print(\"Deposited: \\(amount), New Balance: \\(balance)\")\n    }\n    \n    func withdraw(amount: Double) -> Bool {\n        if amount <= balance {\n            balance -= amount\n            print(\"Withdrew: \\(amount), New Balance: \\(balance)\")\n            return true\n        } else {\n            print(\"Withdrawal failed: Insufficient funds\")\n            return false\n        }\n    }\n    \n    func getBalance() -> Double {\n        return balance\n    }\n}\n\nlet account = BankAccount(initialBalance: 1000.0)\naccount.deposit(amount: 250.0)\naccount.withdraw(amount: 100.0)\naccount.withdraw(amount: 2000.0)\nprint(\"Final Balance: \\(account.getBalance())\")\n```"
  },
  {
    "task": "Write a function that computes the cost per item given a total cost and quantity using division.",
    "code": "```swift\nfunc computeCostPerItem(totalCost: Double, quantity: Int) -> Double {\n    return totalCost / Double(quantity)\n}\n```"
  },
  {
    "task": "Design a program that calculates the time required to travel a distance at a given speed.",
    "code": "```swift\nimport Foundation\n\nfunc calculateTravelTime(distance: Double, speed: Double) -> Double {\n    return distance / speed\n}\n\nlet distance: Double = 150.0 // Distance in kilometers\nlet speed: Double = 60.0 // Speed in kilometers per hour\n\nlet travelTime = calculateTravelTime(distance: distance, speed: speed)\nprint(\"Time required to travel \\(distance) km at \\(speed) km/h is \\(travelTime) hours.\")\n```"
  },
  {
    "task": "Develop a function that returns the absolute difference between two numbers.",
    "code": "```swift\nfunc absoluteDifference(_ num1: Int, _ num2: Int) -> Int {\n    return abs(num1 - num2)\n}\n```"
  },
  {
    "task": "Implement a program to compute the geometric mean of a set of numbers using multiplication and roots.",
    "code": "```swift\nimport Foundation\n\nfunc geometricMean(of numbers: [Double]) -> Double? {\n    guard !numbers.isEmpty else { return nil }\n    \n    let product = numbers.reduce(1.0, *)\n    let n = Double(numbers.count)\n    \n    return pow(product, 1.0 / n)\n}\n\nif let result = geometricMean(of: [1.0, 2.0, 3.0, 4.0]) {\n    print(\"Geometric Mean: \\(result)\")\n} else {\n    print(\"No numbers provided.\")\n}\n```"
  },
  {
    "task": "Write a function to calculate the total interest paid on a loan using arithmetic operations.",
    "code": "```swift\nfunc calculateTotalInterest(loanAmount: Double, annualInterestRate: Double, loanTermInYears: Int) -> Double {\n    let monthlyInterestRate = annualInterestRate / 12 / 100\n    let numberOfPayments = loanTermInYears * 12\n    let monthlyPayment = loanAmount * monthlyInterestRate / (1 - pow(1 + monthlyInterestRate, -Double(numberOfPayments)))\n    let totalPayment = monthlyPayment * Double(numberOfPayments)\n    let totalInterest = totalPayment - loanAmount\n    return totalInterest\n}\n```"
  },
  {
    "task": "Create a program that calculates the sum of even numbers within a specified range.",
    "code": "```swift\nfunc sumOfEvenNumbers(in range: ClosedRange<Int>) -> Int {\n    return range.filter { $0 % 2 == 0 }.reduce(0, +)\n}\n\nlet range = 1...10\nlet sum = sumOfEvenNumbers(in: range)\nprint(\"Sum of even numbers in range \\(range): \\(sum)\")\n```"
  },
  {
    "task": "Design a script to determine the final balance in a savings account after regular deposits and withdrawals.",
    "code": "```swift\nimport Foundation\n\nfunc calculateFinalBalance(startingBalance: Double, transactions: [(type: String, amount: Double)]) -> Double {\n    var balance = startingBalance\n    \n    for transaction in transactions {\n        switch transaction.type {\n        case \"deposit\":\n            balance += transaction.amount\n        case \"withdrawal\":\n            balance -= transaction.amount\n        default:\n            continue\n        }\n    }\n    \n    return balance\n}\n\nlet startingBalance = 1000.0\nlet transactions = [\n    (type: \"deposit\", amount: 200.0),\n    (type: \"withdrawal\", amount: 100.0),\n    (type: \"deposit\", amount: 50.0),\n    (type: \"withdrawal\", amount: 30.0)\n]\n\nlet finalBalance = calculateFinalBalance(startingBalance: startingBalance, transactions: transactions)\nprint(\"Final Balance: \\(finalBalance)\")\n```"
  },
  {
    "task": "Develop a function to compute the surface area of a cylinder given its radius and height.",
    "code": "```swift\nimport Foundation\n\nfunc surfaceAreaOfCylinder(radius: Double, height: Double) -> Double {\n    let baseArea = Double.pi * pow(radius, 2)\n    let lateralSurfaceArea = 2 * Double.pi * radius * height\n    let totalSurfaceArea = 2 * baseArea + lateralSurfaceArea\n    return totalSurfaceArea\n}\n```"
  },
  {
    "task": "Write a program that outputs the result of an arithmetic sequence given the first term and common difference.",
    "code": "```swift\nimport Foundation\n\nfunc arithmeticSequence(firstTerm: Int, commonDifference: Int, numberOfTerms: Int) -> [Int] {\n    var sequence = [Int]()\n    for i in 0..<numberOfTerms {\n        let term = firstTerm + i * commonDifference\n        sequence.append(term)\n    }\n    return sequence\n}\n\nlet firstTerm = 3\nlet commonDifference = 5\nlet numberOfTerms = 10\n\nlet sequence = arithmeticSequence(firstTerm: firstTerm, commonDifference: commonDifference, numberOfTerms: numberOfTerms)\nprint(sequence)\n```"
  },
  {
    "task": "Implement a function that finds the average speed for a trip given total distance and time.",
    "code": "```swift\nfunc averageSpeed(distance: Double, time: Double) -> Double {\n    return distance / time\n}\n```"
  },
  {
    "task": "Create a function to calculate the total cost of a road trip given fuel cost per mile and distance.",
    "code": "```swift\nfunc calculateTotalCost(fuelCostPerMile: Double, distance: Double) -> Double {\n    return fuelCostPerMile * distance\n}\n```"
  },
  {
    "task": "Write a script that determines the number of tiles required to cover a floor area using arithmetic operations.",
    "code": "```swift\nimport Foundation\n\nfunc tilesNeeded(floorLength: Double, floorWidth: Double, tileLength: Double, tileWidth: Double) -> Int {\n    let floorArea = floorLength * floorWidth\n    let tileArea = tileLength * tileWidth\n    let tiles = floorArea / tileArea\n    return Int(ceil(tiles))\n}\n\n// Example usage\nlet floorLength = 10.0\nlet floorWidth = 12.0\nlet tileLength = 2.0\nlet tileWidth = 2.0\n\nlet numberOfTiles = tilesNeeded(floorLength: floorLength, floorWidth: floorWidth, tileLength: tileLength, tileWidth: tileWidth)\nprint(\"Number of tiles needed: \\(numberOfTiles)\")\n```"
  },
  {
    "task": "Develop a program to calculate the amount of paint needed to cover a wall given its area.",
    "code": "```swift\nimport Foundation\n\nfunc calculatePaintNeeded(forWallArea area: Double, coveragePerLiter: Double) -> Double {\n    return area / coveragePerLiter\n}\n\nlet wallArea = 20.0 // Example wall area in square meters\nlet paintCoveragePerLiter = 10.0 // Example coverage in square meters per liter\n\nlet paintNeeded = calculatePaintNeeded(forWallArea: wallArea, coveragePerLiter: paintCoveragePerLiter)\nprint(\"Paint needed: \\(paintNeeded) liters\")\n```"
  },
  {
    "task": "Build a function that calculates the price per unit weight given total price and weight.",
    "code": "```swift\nfunc pricePerUnitWeight(totalPrice: Double, weight: Double) -> Double {\n    return totalPrice / weight\n}\n```"
  },
  {
    "task": "Implement a program that computes the volume of a rectangular prism given its dimensions.",
    "code": "```swift\nimport Foundation\n\nfunc volumeOfRectangularPrism(length: Double, width: Double, height: Double) -> Double {\n    return length * width * height\n}\n\n// Example usage:\nlet length = 4.0\nlet width = 3.0\nlet height = 2.0\nlet volume = volumeOfRectangularPrism(length: length, width: width, height: height)\nprint(\"Volume of the rectangular prism: \\(volume)\")\n```"
  },
  {
    "task": "Write a function to find the percentage increase or decrease between two numbers.",
    "code": "```swift\nfunc percentageChange(from oldNumber: Double, to newNumber: Double) -> Double {\n    guard oldNumber != 0 else {\n        fatalError(\"Old number must not be zero to calculate percentage change.\")\n    }\n    let change = newNumber - oldNumber\n    let percentageChange = (change / oldNumber) * 100\n    return percentageChange\n}\n```"
  },
  {
    "task": "Create a program to determine the number of complete weeks within a specified number of days.",
    "code": "```swift\nimport Foundation\n\nfunc completeWeeks(from days: Int) -> Int {\n    return days / 7\n}\n\nlet numberOfDays = 45\nlet weeks = completeWeeks(from: numberOfDays)\nprint(\"Number of complete weeks: \\(weeks)\")\n```"
  },
  {
    "task": "Design a function that calculates the break-even point for a business using cost and revenue data.",
    "code": "```swift\nfunc calculateBreakEvenPoint(fixedCosts: Double, pricePerUnit: Double, variableCostPerUnit: Double) -> Double? {\n    let contributionMargin = pricePerUnit - variableCostPerUnit\n    guard contributionMargin > 0 else {\n        return nil // Break-even point cannot be calculated if contribution margin is zero or negative\n    }\n    return fixedCosts / contributionMargin\n}\n\n// Example usage:\nif let breakEvenPoint = calculateBreakEvenPoint(fixedCosts: 10000, pricePerUnit: 50, variableCostPerUnit: 30) {\n    print(\"Break-even point (in units): \\(breakEvenPoint)\")\n} else {\n    print(\"Break-even point cannot be calculated.\")\n}\n```"
  },
  {
    "task": "Develop a program that converts a total number of seconds into hours, minutes, and seconds.",
    "code": "```swift\nimport Foundation\n\nfunc convertSeconds(_ totalSeconds: Int) -> (hours: Int, minutes: Int, seconds: Int) {\n    let hours = totalSeconds / 3600\n    let minutes = (totalSeconds % 3600) / 60\n    let seconds = totalSeconds % 60\n    return (hours, minutes, seconds)\n}\n\nlet totalSeconds = 3661\nlet result = convertSeconds(totalSeconds)\nprint(\"Hours: \\(result.hours), Minutes: \\(result.minutes), Seconds: \\(result.seconds)\")\n```"
  },
  {
    "task": "Write a function that calculates the depreciation of an asset over time using arithmetic operations.",
    "code": "```swift\nfunc calculateDepreciation(initialValue: Double, depreciationRate: Double, years: Int) -> Double {\n    let depreciationFactor = 1 - depreciationRate\n    let depreciatedValue = initialValue * pow(depreciationFactor, Double(years))\n    return initialValue - depreciatedValue\n}\n\n// Example usage:\nlet initialValue = 1000.0\nlet depreciationRate = 0.1 // 10% per year\nlet years = 5\nlet depreciation = calculateDepreciation(initialValue: initialValue, depreciationRate: depreciationRate, years: years)\nprint(\"Depreciation after \\(years) years: \\(depreciation)\")\n```"
  },
  {
    "task": "Create a program that computes the final exam grade needed to achieve a target course average.",
    "code": "```swift\nimport Foundation\n\nfunc calculateFinalExamGrade(currentAverage: Double, finalExamWeight: Double, targetAverage: Double) -> Double {\n    let currentWeight = 1.0 - finalExamWeight\n    let requiredFinalExamGrade = (targetAverage - (currentAverage * currentWeight)) / finalExamWeight\n    return requiredFinalExamGrade\n}\n\n// Example usage\nlet currentAverage = 85.0\nlet finalExamWeight = 0.4\nlet targetAverage = 90.0\n\nlet neededFinalExamGrade = calculateFinalExamGrade(currentAverage: currentAverage, finalExamWeight: finalExamWeight, targetAverage: targetAverage)\nprint(\"The final exam grade needed is: \\(neededFinalExamGrade)\")\n```"
  },
  {
    "task": "Implement a function to calculate the total cost of groceries given prices and quantities of items.",
    "code": "```swift\nfunc calculateTotalCost(prices: [Double], quantities: [Int]) -> Double {\n    var totalCost = 0.0\n    for (index, price) in prices.enumerated() {\n        totalCost += price * Double(quantities[index])\n    }\n    return totalCost\n}\n```"
  },
  {
    "task": "Write a script that determines the number of years required to double an investment using a fixed interest rate.",
    "code": "```swift\nimport Foundation\n\nfunc yearsToDoubleInvestment(principal: Double, interestRate: Double) -> Int {\n    var years = 0\n    var balance = principal\n    let target = principal * 2\n    \n    while balance < target {\n        balance += balance * interestRate\n        years += 1\n    }\n    \n    return years\n}\n\nlet principalAmount = 1000.0\nlet annualInterestRate = 0.05\nlet years = yearsToDoubleInvestment(principal: principalAmount, interestRate: annualInterestRate)\nprint(\"Years to double investment: \\(years)\")\n```"
  },
  {
    "task": "Develop a function that computes the harmonic mean of a set of numbers using division and addition.",
    "code": "```swift\nfunc harmonicMean(of numbers: [Double]) -> Double? {\n    guard !numbers.isEmpty else { return nil }\n    let n = Double(numbers.count)\n    let sumOfReciprocals = numbers.reduce(0.0) { $0 + 1.0 / $1 }\n    return n / sumOfReciprocals\n}\n```"
  },
  {
    "task": "Create a program to find the sum of the squares of numbers in a given range.",
    "code": "```swift\nfunc sumOfSquares(in range: ClosedRange<Int>) -> Int {\n    return range.map { $0 * $0 }.reduce(0, +)\n}\n\nlet range = 1...10\nlet result = sumOfSquares(in: range)\nprint(\"The sum of the squares is \\(result)\")\n```"
  },
  {
    "task": "Design a function that calculates the energy consumption of an appliance given power and usage time.",
    "code": "```swift\nfunc calculateEnergyConsumption(power: Double, usageTime: Double) -> Double {\n    return power * usageTime\n}\n\n// Example usage\nlet energyConsumption = calculateEnergyConsumption(power: 1500, usageTime: 3)\nprint(\"Energy Consumption: \\(energyConsumption) Wh\")\n```"
  },
  {
    "task": "Write a program that simulates a simple stock portfolio using arithmetic operations for buying and selling.",
    "code": "```swift\nimport Foundation\n\nstruct Stock {\n    var name: String\n    var pricePerShare: Double\n    var shares: Int\n}\n\nstruct Portfolio {\n    var stocks: [String: Stock]\n    var cash: Double\n    \n    mutating func buyStock(stockName: String, shares: Int) {\n        if let stock = stocks[stockName] {\n            let totalCost = Double(shares) * stock.pricePerShare\n            if totalCost <= cash {\n                cash -= totalCost\n                stocks[stockName]?.shares += shares\n            } else {\n                print(\"Not enough cash to buy \\(shares) shares of \\(stockName).\")\n            }\n        } else {\n            print(\"Stock \\(stockName) not found in portfolio.\")\n        }\n    }\n    \n    mutating func sellStock(stockName: String, shares: Int) {\n        if let stock = stocks[stockName] {\n            if shares <= stock.shares {\n                let totalSale = Double(shares) * stock.pricePerShare\n                cash += totalSale\n                stocks[stockName]?.shares -= shares\n            } else {\n                print(\"Not enough shares to sell \\(shares) shares of \\(stockName).\")\n            }\n        } else {\n            print(\"Stock \\(stockName) not found in portfolio.\")\n        }\n    }\n    \n    func displayPortfolio() {\n        print(\"Portfolio:\")\n        for (name, stock) in stocks {\n            print(\"\\(name): \\(stock.shares) shares at $\\(stock.pricePerShare) each\")\n        }\n        print(\"Cash: $\\(cash)\")\n    }\n}\n\nvar myPortfolio = Portfolio(stocks: [\n    \"AAPL\": Stock(name: \"Apple\", pricePerShare: 150.0, shares: 10),\n    \"GOOGL\": Stock(name: \"Google\", pricePerShare: 2800.0, shares: 5)\n], cash: 10000.0)\n\nmyPortfolio.displayPortfolio()\nmyPortfolio.buyStock(stockName: \"AAPL\", shares: 5)\nmyPortfolio.sellStock(stockName: \"GOOGL\", shares: 2)\nmyPortfolio.displayPortfolio()\n```"
  },
  {
    "task": "Implement a function to calculate the gravitational force between two masses using multiplication and division.",
    "code": "```swift\nfunc gravitationalForce(mass1: Double, mass2: Double, distance: Double) -> Double {\n    let gravitationalConstant = 6.67430e-11\n    return (gravitationalConstant * mass1 * mass2) / (distance * distance)\n}\n```"
  },
  {
    "task": "Create a function that determines the price per square foot of a piece of real estate.",
    "code": "```swift\nfunc pricePerSquareFoot(price: Double, area: Double) -> Double {\n    return price / area\n}\n```"
  },
  {
    "task": "Write a script to compute the total interest earned on a savings account with monthly compounding.",
    "code": "```swift\nimport Foundation\n\nfunc calculateTotalInterest(principal: Double, annualRate: Double, years: Int) -> Double {\n    let monthlyRate = annualRate / 12 / 100\n    let months = years * 12\n    let totalAmount = principal * pow(1 + monthlyRate, Double(months))\n    let totalInterest = totalAmount - principal\n    return totalInterest\n}\n\nlet principal = 1000.0\nlet annualRate = 5.0\nlet years = 5\n\nlet totalInterest = calculateTotalInterest(principal: principal, annualRate: annualRate, years: years)\nprint(\"Total interest earned: \\(totalInterest)\")\n```"
  },
  {
    "task": "Develop a program that calculates the calories burned during exercise given MET value and duration.",
    "code": "```swift\nimport Foundation\n\nfunc calculateCaloriesBurned(metValue: Double, weightInKg: Double, durationInMinutes: Double) -> Double {\n    let caloriesBurned = metValue * weightInKg * durationInMinutes / 60.0\n    return caloriesBurned\n}\n\nlet metValue: Double = 8.0  // Example MET value for vigorous exercise\nlet weightInKg: Double = 70.0  // Example weight in kilograms\nlet durationInMinutes: Double = 30.0  // Example duration in minutes\n\nlet calories = calculateCaloriesBurned(metValue: metValue, weightInKg: weightInKg, durationInMinutes: durationInMinutes)\nprint(\"Calories burned: \\(calories)\")\n```"
  },
  {
    "task": "Build a function that converts a speed from miles per hour to kilometers per hour using multiplication.",
    "code": "```swift\nfunc convertMilesPerHourToKilometersPerHour(mph: Double) -> Double {\n    return mph * 1.60934\n}\n```"
  },
  {
    "task": "Implement a program to find the number of days between two dates using arithmetic operations.",
    "code": "```swift\nimport Foundation\n\nfunc daysBetweenDates(from startDate: String, to endDate: String) -> Int? {\n    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = \"yyyy-MM-dd\"\n\n    guard let start = dateFormatter.date(from: startDate),\n          let end = dateFormatter.date(from: endDate) else {\n        return nil\n    }\n\n    let calendar = Calendar.current\n    let components = calendar.dateComponents([.day], from: start, to: end)\n    \n    return components.day\n}\n\nif let days = daysBetweenDates(from: \"2023-01-01\", to: \"2023-12-31\") {\n    print(\"Number of days: \\(days)\")\n} else {\n    print(\"Invalid date format\")\n}\n```"
  },
  {
    "task": "Write a function to calculate the area of a circle given its radius.",
    "code": "```swift\nimport Foundation\n\nfunc calculateAreaOfCircle(radius: Double) -> Double {\n    return Double.pi * radius * radius\n}\n```"
  },
  {
    "task": "Create a program that determines the total distance driven given trips with varying speeds and durations.",
    "code": "```swift\nimport Foundation\n\nstruct Trip {\n    let speed: Double // in kilometers per hour\n    let duration: Double // in hours\n}\n\nfunc totalDistanceDriven(for trips: [Trip]) -> Double {\n    return trips.reduce(0.0) { total, trip in\n        total + (trip.speed * trip.duration)\n    }\n}\n\n// Example trips\nlet trips = [\n    Trip(speed: 60.0, duration: 1.5),\n    Trip(speed: 80.0, duration: 2.0),\n    Trip(speed: 100.0, duration: 0.5)\n]\n\nlet totalDistance = totalDistanceDriven(for: trips)\nprint(\"Total distance driven: \\(totalDistance) kilometers\")\n```"
  },
  {
    "task": "Design a function to compute the final price of an item after applying multiple discounts sequentially.",
    "code": "```swift\nfunc computeFinalPrice(initialPrice: Double, discounts: [Double]) -> Double {\n    var finalPrice = initialPrice\n    for discount in discounts {\n        finalPrice -= finalPrice * (discount / 100)\n    }\n    return finalPrice\n}\n```"
  },
  {
    "task": "Write a script that calculates the number of bricks needed to build a wall given wall dimensions and brick size.",
    "code": "```swift\nimport Foundation\n\nfunc calculateBricksNeeded(wallWidth: Double, wallHeight: Double, brickWidth: Double, brickHeight: Double) -> Int {\n    let wallArea = wallWidth * wallHeight\n    let brickArea = brickWidth * brickHeight\n    let bricksNeeded = wallArea / brickArea\n    return Int(ceil(bricksNeeded))\n}\n\nlet wallWidth = 10.0\nlet wallHeight = 5.0\nlet brickWidth = 0.5\nlet brickHeight = 0.25\n\nlet bricksNeeded = calculateBricksNeeded(wallWidth: wallWidth, wallHeight: wallHeight, brickWidth: brickWidth, brickHeight: brickHeight)\nprint(\"Bricks needed: \\(bricksNeeded)\")\n```"
  },
  {
    "task": "Develop a program to determine the number of pizzas required for a party given the number of people and slices per pizza.",
    "code": "```swift\nimport Foundation\n\nfunc pizzasRequired(people: Int, slicesPerPerson: Int, slicesPerPizza: Int) -> Int {\n    let totalSlicesNeeded = people * slicesPerPerson\n    let pizzas = Int(ceil(Double(totalSlicesNeeded) / Double(slicesPerPizza)))\n    return pizzas\n}\n\n// Example usage\nlet people = 10\nlet slicesPerPerson = 3\nlet slicesPerPizza = 8\n\nlet pizzas = pizzasRequired(people: people, slicesPerPerson: slicesPerPerson, slicesPerPizza: slicesPerPizza)\nprint(\"Pizzas required: \\(pizzas)\")\n```"
  },
  {
    "task": "Implement a function that calculates the total cost of a meal including tax and tip.",
    "code": "```swift\nfunc calculateTotalCost(mealCost: Double, taxRate: Double, tipRate: Double) -> Double {\n    let taxAmount = mealCost * taxRate\n    let tipAmount = mealCost * tipRate\n    let totalCost = mealCost + taxAmount + tipAmount\n    return totalCost\n}\n```"
  },
  {
    "task": "Create a program to compute the average rainfall over a period using addition and division.",
    "code": "```swift\nimport Foundation\n\nfunc averageRainfall(rainfalls: [Double]) -> Double {\n    let totalRainfall = rainfalls.reduce(0, +)\n    let average = totalRainfall / Double(rainfalls.count)\n    return average\n}\n\nlet rainfalls = [12.5, 15.0, 10.0, 13.5, 9.0]\nlet average = averageRainfall(rainfalls: rainfalls)\nprint(\"Average Rainfall: \\(average)\")\n```"
  },
  {
    "task": "Write a function that determines the number of batches needed to produce a specific quantity of a product.",
    "code": "```swift\nfunc calculateBatches(totalQuantity: Int, batchSize: Int) -> Int {\n    return (totalQuantity + batchSize - 1) / batchSize\n}\n```"
  },
  {
    "task": "Design a program to calculate the total energy consumption of a household given individual appliance usage.",
    "code": "```swift\nimport Foundation\n\nfunc calculateTotalEnergyConsumption(applianceUsages: [String: Double]) -> Double {\n    var totalEnergyConsumption: Double = 0.0\n    for (_, usage) in applianceUsages {\n        totalEnergyConsumption += usage\n    }\n    return totalEnergyConsumption\n}\n\nlet applianceUsages: [String: Double] = [\n    \"Refrigerator\": 150.0,\n    \"Washing Machine\": 500.0,\n    \"Television\": 100.0,\n    \"Microwave\": 120.0,\n    \"Air Conditioner\": 350.0\n]\n\nlet totalConsumption = calculateTotalEnergyConsumption(applianceUsages: applianceUsages)\nprint(\"Total Energy Consumption: \\(totalConsumption) kWh\")\n```"
  },
  {
    "task": "Develop a function that computes the body surface area of a person using height and weight.",
    "code": "```swift\nfunc bodySurfaceArea(height: Double, weight: Double) -> Double {\n    return 0.007184 * pow(height, 0.725) * pow(weight, 0.425)\n}\n```"
  },
  {
    "task": "Build a script to calculate the monthly payment on a mortgage using principal, interest rate, and term.",
    "code": "```swift\nimport Foundation\n\nfunc calculateMonthlyPayment(principal: Double, annualInterestRate: Double, termInYears: Int) -> Double {\n    let monthlyInterestRate = annualInterestRate / 12 / 100\n    let numberOfPayments = Double(termInYears * 12)\n    \n    let numerator = principal * monthlyInterestRate\n    let denominator = 1 - pow(1 + monthlyInterestRate, -numberOfPayments)\n    \n    return numerator / denominator\n}\n\nlet principal = 250000.0\nlet annualInterestRate = 3.5\nlet termInYears = 30\n\nlet monthlyPayment = calculateMonthlyPayment(principal: principal, annualInterestRate: annualInterestRate, termInYears: termInYears)\nprint(\"Monthly Payment: \\(monthlyPayment)\")\n```"
  },
  {
    "task": "Implement a function to find the volume of a cone given its height and radius.",
    "code": "```swift\nfunc volumeOfCone(radius: Double, height: Double) -> Double {\n    return (1.0 / 3.0) * Double.pi * radius * radius * height\n}\n```"
  },
  {
    "task": "Write a program that estimates the cost of a trip using fuel efficiency and distance.",
    "code": "```swift\nimport Foundation\n\nfunc estimateTripCost(fuelEfficiency: Double, distance: Double, fuelPrice: Double) -> Double {\n    let fuelNeeded = distance / fuelEfficiency\n    let cost = fuelNeeded * fuelPrice\n    return cost\n}\n\nlet fuelEfficiency = 25.0 // miles per gallon\nlet distance = 300.0 // miles\nlet fuelPrice = 3.5 // dollars per gallon\n\nlet tripCost = estimateTripCost(fuelEfficiency: fuelEfficiency, distance: distance, fuelPrice: fuelPrice)\nprint(\"Estimated trip cost: $\\(tripCost)\")\n```"
  }
]