[
  {
    "task": "Create a list of the first ten positive integers and calculate their sum.",
    "code": "```swift\nlet numbers = Array(1...10)\nlet sum = numbers.reduce(0, +)\n```"
  },
  {
    "task": "Write a program to reverse the order of elements in a given list.",
    "code": "```swift\nfunc reverseList<T>(_ list: [T]) -> [T] {\n    return list.reversed()\n}\n\nlet originalList = [1, 2, 3, 4, 5]\nlet reversedList = reverseList(originalList)\nprint(reversedList)\n```"
  },
  {
    "task": "Implement a function that takes a list and returns the list with duplicates removed.",
    "code": "```swift\nfunc removeDuplicates(from list: [Int]) -> [Int] {\n    var seen = Set<Int>()\n    return list.filter { seen.insert($0).inserted }\n}\n```"
  },
  {
    "task": "Create a list of names and sort them in alphabetical order.",
    "code": "```swift\nvar names = [\"Alice\", \"Bob\", \"Charlie\", \"Diana\"]\nnames.sort()\n```"
  },
  {
    "task": "Write a function that appends a new element to an existing list.",
    "code": "```swift\nfunc appendElement<T>(to list: inout [T], element: T) {\n    list.append(element)\n}\n```"
  },
  {
    "task": "Generate a list of the first 20 even numbers.",
    "code": "```swift\nlet evenNumbers = (1...20).map { $0 * 2 }\n```"
  },
  {
    "task": "Create a nested list (a list of lists) and access an element from the inner list.",
    "code": "```swift\nlet nestedList: [[Int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nlet element = nestedList[1][2]\n```"
  },
  {
    "task": "Write a program that finds the maximum value in a list of integers.",
    "code": "```swift\nlet numbers = [10, 45, 32, 67, 89, 21]\nif let maxNumber = numbers.max() {\n    print(\"The maximum value is \\(maxNumber).\")\n}\n```"
  },
  {
    "task": "Implement a function to merge two lists into a single list without duplicates.",
    "code": "```swift\nfunc mergeListsWithoutDuplicates<T: Hashable>(_ list1: [T], _ list2: [T]) -> [T] {\n    let combinedSet = Set(list1).union(Set(list2))\n    return Array(combinedSet)\n}\n\n// Example usage\nlet list1 = [1, 2, 3, 4, 5]\nlet list2 = [3, 4, 5, 6, 7]\nlet mergedList = mergeListsWithoutDuplicates(list1, list2)\nprint(mergedList)\n```"
  },
  {
    "task": "Create a list from user input, then display the list in reverse order.",
    "code": "```swift\nimport Foundation\n\nvar inputList = [String]()\n\nprint(\"Enter items for the list (type 'end' to finish):\")\nwhile let input = readLine(), input.lowercased() != \"end\" {\n    inputList.append(input)\n}\n\nlet reversedList = inputList.reversed()\n\nprint(\"Reversed list:\")\nfor item in reversedList {\n    print(item)\n}\n```"
  },
  {
    "task": "Write a function that takes a list and returns a new list containing only the even numbers.",
    "code": "```swift\nfunc filterEvenNumbers(from list: [Int]) -> [Int] {\n    return list.filter { $0 % 2 == 0 }\n}\n```"
  },
  {
    "task": "Generate a list of squares for the numbers 1 through 10.",
    "code": "```swift\nlet squares = (1...10).map { $0 * $0 }\n```"
  },
  {
    "task": "Create a list of floating-point numbers and find their average.",
    "code": "```swift\nlet numbers: [Float] = [3.5, 7.2, 9.8, 1.4, 5.6]\nlet sum = numbers.reduce(0, +)\nlet average = sum / Float(numbers.count)\nprint(\"The average is \\(average)\")\n```"
  },
  {
    "task": "Implement a program to rotate the elements of a list to the right by a given number of steps.",
    "code": "```swift\nfunc rotateList(_ list: [Int], by steps: Int) -> [Int] {\n    guard !list.isEmpty else { return list }\n    let count = list.count\n    let effectiveSteps = steps % count\n    let splitIndex = count - effectiveSteps\n    let rotatedList = Array(list[splitIndex..<count]) + Array(list[0..<splitIndex])\n    return rotatedList\n}\n\n// Example usage\nlet originalList = [1, 2, 3, 4, 5]\nlet rotated = rotateList(originalList, by: 2)\nprint(rotated) // Output: [4, 5, 1, 2, 3]\n```"
  },
  {
    "task": "Write a function that checks if a list is a palindrome (reads the same forwards and backwards).",
    "code": "```swift\nfunc isPalindrome<T: Equatable>(list: [T]) -> Bool {\n    return list == list.reversed()\n}\n```"
  },
  {
    "task": "Create a list of random integers and count how many are greater than 50.",
    "code": "```swift\nimport Foundation\n\nvar randomIntegers: [Int] = (1...10).map { _ in Int.random(in: 1...100) }\nlet countGreaterThanFifty = randomIntegers.filter { $0 > 50 }.count\n\nprint(\"Random Integers: \\(randomIntegers)\")\nprint(\"Count Greater Than 50: \\(countGreaterThanFifty)\")\n```"
  },
  {
    "task": "Write a program that removes the first occurrence of a specified element from a list.",
    "code": "```swift\nfunc removeFirstOccurrence(from list: inout [Int], element: Int) {\n    if let index = list.firstIndex(of: element) {\n        list.remove(at: index)\n    }\n}\n\nvar myList = [1, 2, 3, 4, 2, 5]\nremoveFirstOccurrence(from: &myList, element: 2)\nprint(myList) // Output will be [1, 3, 4, 2, 5]\n```"
  },
  {
    "task": "Implement a function that takes two lists and returns a list containing their intersection.",
    "code": "```swift\nfunc intersection<T: Equatable>(list1: [T], list2: [T]) -> [T] {\n    var result: [T] = []\n    for item in list1 {\n        if list2.contains(item) && !result.contains(item) {\n            result.append(item)\n        }\n    }\n    return result\n}\n```"
  },
  {
    "task": "Create a list of prime numbers less than 100.",
    "code": "```swift\nfunc isPrime(_ number: Int) -> Bool {\n    if number <= 1 { return false }\n    if number <= 3 { return true }\n    if number % 2 == 0 || number % 3 == 0 { return false }\n    var i = 5\n    while i * i <= number {\n        if number % i == 0 || number % (i + 2) == 0 { return false }\n        i += 6\n    }\n    return true\n}\n\nlet primeNumbers = (2..<100).filter { isPrime($0) }\n```"
  },
  {
    "task": "Write a function to split a list into two lists: one with even numbers and one with odd numbers.",
    "code": "```swift\nfunc splitListIntoEvenAndOdd(numbers: [Int]) -> (evenNumbers: [Int], oddNumbers: [Int]) {\n    var evenNumbers = [Int]()\n    var oddNumbers = [Int]()\n    \n    for number in numbers {\n        if number % 2 == 0 {\n            evenNumbers.append(number)\n        } else {\n            oddNumbers.append(number)\n        }\n    }\n    \n    return (evenNumbers, oddNumbers)\n}\n```"
  },
  {
    "task": "Create a list of strings and convert all the strings to uppercase.",
    "code": "```swift\nlet stringList = [\"apple\", \"banana\", \"cherry\"]\nlet uppercasedList = stringList.map { $0.uppercased() }\n```"
  },
  {
    "task": "Implement a program that removes all elements from a list that are less than a specified value.",
    "code": "```swift\nfunc removeElementsLessThan(_ list: [Int], value: Int) -> [Int] {\n    return list.filter { $0 >= value }\n}\n\n// Example usage\nlet originalList = [1, 2, 3, 4, 5, 6]\nlet filteredList = removeElementsLessThan(originalList, value: 3)\nprint(filteredList) // Output: [3, 4, 5, 6]\n```"
  },
  {
    "task": "Write a function that takes a list and returns a new list with elements in random order.",
    "code": "```swift\nimport Foundation\n\nfunc shuffleList<T>(_ list: [T]) -> [T] {\n    return list.shuffled()\n}\n```"
  },
  {
    "task": "Create a list of tuples where each tuple contains a number and its square.",
    "code": "```swift\nlet numbers = [1, 2, 3, 4, 5]\nlet numberSquares = numbers.map { ($0, $0 * $0) }\n```"
  },
  {
    "task": "Write a program to multiply all elements in a list by a given factor.",
    "code": "```swift\nfunc multiplyElements(in list: [Int], by factor: Int) -> [Int] {\n    return list.map { $0 * factor }\n}\n\n// Example usage:\nlet numbers = [1, 2, 3, 4, 5]\nlet factor = 3\nlet result = multiplyElements(in: numbers, by: factor)\nprint(result) // Output: [3, 6, 9, 12, 15]\n```"
  },
  {
    "task": "Implement a function that flattens a nested list.",
    "code": "```swift\nfunc flatten<T>(_ nestedList: [Any]) -> [T] {\n    var result: [T] = []\n    \n    for element in nestedList {\n        if let list = element as? [Any] {\n            result.append(contentsOf: flatten(list))\n        } else if let value = element as? T {\n            result.append(value)\n        }\n    }\n    \n    return result\n}\n```"
  },
  {
    "task": "Create a list of dates and sort them chronologically.",
    "code": "```swift\nimport Foundation\n\nvar dateStrings = [\"2023-10-01\", \"2023-05-15\", \"2023-08-21\", \"2023-03-10\"]\nlet dateFormatter = DateFormatter()\ndateFormatter.dateFormat = \"yyyy-MM-dd\"\n\nlet dates = dateStrings.compactMap { dateFormatter.date(from: $0) }\nlet sortedDates = dates.sorted()\n\nprint(sortedDates)\n```"
  },
  {
    "task": "Write a function that finds the index of the first occurrence of a given element in a list.",
    "code": "```swift\nfunc indexOfFirstOccurrence<T: Equatable>(of element: T, in list: [T]) -> Int? {\n    return list.firstIndex(of: element)\n}\n```"
  },
  {
    "task": "Generate a list of Fibonacci numbers up to a specified limit.",
    "code": "```swift\nfunc generateFibonacci(upTo limit: Int) -> [Int] {\n    var fibonacciList = [0, 1]\n    while true {\n        let next = fibonacciList[fibonacciList.count - 1] + fibonacciList[fibonacciList.count - 2]\n        if next > limit {\n            break\n        }\n        fibonacciList.append(next)\n    }\n    return fibonacciList\n}\n\nlet fibonacciNumbers = generateFibonacci(upTo: 1000)\nprint(fibonacciNumbers)\n```"
  },
  {
    "task": "Create a list of booleans and determine if all are True.",
    "code": "```swift\nlet booleanList: [Bool] = [true, true, false, true]\nlet allTrue = booleanList.allSatisfy { $0 }\nprint(allTrue)\n```"
  },
  {
    "task": "Write a program to concatenate two lists.",
    "code": "```swift\nlet list1 = [1, 2, 3]\nlet list2 = [4, 5, 6]\nlet concatenatedList = list1 + list2\nprint(concatenatedList)\n```"
  },
  {
    "task": "Implement a function that returns the length of a list without using built-in functions.",
    "code": "```swift\nfunc lengthOfList<T>(_ list: [T]) -> Int {\n    var count = 0\n    for _ in list {\n        count += 1\n    }\n    return count\n}\n```"
  },
  {
    "task": "Create a list of words and find the longest word.",
    "code": "```swift\nlet words = [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]\nif let longestWord = words.max(by: { $0.count < $1.count }) {\n    print(\"The longest word is: \\(longestWord)\")\n}\n```"
  },
  {
    "task": "Write a function that takes a list and a predicate function, returning a list of elements that satisfy the predicate.",
    "code": "```swift\nfunc filterList<T>(list: [T], predicate: (T) -> Bool) -> [T] {\n    return list.filter(predicate)\n}\n```"
  },
  {
    "task": "Generate a list of strings and filter out those with less than 5 characters.",
    "code": "```swift\nlet strings = [\"apple\", \"dog\", \"banana\", \"cat\", \"elephant\"]\nlet filteredStrings = strings.filter { $0.count >= 5 }\nprint(filteredStrings)\n```"
  },
  {
    "task": "Create a list of mixed data types and separate them into lists by type.",
    "code": "```swift\nlet mixedList: [Any] = [1, \"Hello\", 3.14, true, \"Swift\", 42]\n\nvar intList: [Int] = []\nvar stringList: [String] = []\nvar doubleList: [Double] = []\nvar boolList: [Bool] = []\n\nfor item in mixedList {\n    if let intItem = item as? Int {\n        intList.append(intItem)\n    } else if let stringItem = item as? String {\n        stringList.append(stringItem)\n    } else if let doubleItem = item as? Double {\n        doubleList.append(doubleItem)\n    } else if let boolItem = item as? Bool {\n        boolList.append(boolItem)\n    }\n}\n\nprint(\"Integers: \\(intList)\")\nprint(\"Strings: \\(stringList)\")\nprint(\"Doubles: \\(doubleList)\")\nprint(\"Booleans: \\(boolList)\")\n```"
  },
  {
    "task": "Write a program to find the common elements between two lists.",
    "code": "```swift\nlet list1 = [1, 2, 3, 4, 5]\nlet list2 = [4, 5, 6, 7, 8]\n\nlet commonElements = list1.filter { list2.contains($0) }\nprint(commonElements)\n```"
  },
  {
    "task": "Implement a function to rotate the elements of a list to the left by a given number of steps.",
    "code": "```swift\nfunc rotateLeft(_ list: [Int], by steps: Int) -> [Int] {\n    let count = list.count\n    guard count > 0 else { return list }\n    let effectiveSteps = steps % count\n    return Array(list[effectiveSteps...] + list[..<effectiveSteps])\n}\n```"
  },
  {
    "task": "Create a list of numbers and find the product of all the elements.",
    "code": "```swift\nlet numbers = [1, 2, 3, 4, 5]\nlet product = numbers.reduce(1, *)\nprint(product)\n```"
  },
  {
    "task": "Write a function that removes all occurrences of a specified element from a list.",
    "code": "```swift\nfunc removeOccurrences(of element: Int, from list: [Int]) -> [Int] {\n    return list.filter { $0 != element }\n}\n```"
  },
  {
    "task": "Generate a list of random numbers and find the median value.",
    "code": "```swift\nimport Foundation\n\nfunc generateRandomNumbers(count: Int, range: Range<Int>) -> [Int] {\n    return (0..<count).map { _ in Int.random(in: range) }\n}\n\nfunc findMedian(of numbers: [Int]) -> Double? {\n    guard !numbers.isEmpty else { return nil }\n    let sortedNumbers = numbers.sorted()\n    let count = sortedNumbers.count\n    if count % 2 == 0 {\n        return Double(sortedNumbers[count / 2 - 1] + sortedNumbers[count / 2]) / 2.0\n    } else {\n        return Double(sortedNumbers[count / 2])\n    }\n}\n\nlet randomNumbers = generateRandomNumbers(count: 10, range: 1..<100)\nif let median = findMedian(of: randomNumbers) {\n    print(\"Median value: \\(median)\")\n} else {\n    print(\"No median found.\")\n}\n```"
  },
  {
    "task": "Create a list of dictionaries and sort them by a specific key.",
    "code": "```swift\nimport Foundation\n\nvar listOfDicts: [[String: Any]] = [\n    [\"name\": \"Alice\", \"age\": 30],\n    [\"name\": \"Bob\", \"age\": 25],\n    [\"name\": \"Charlie\", \"age\": 35]\n]\n\nlet sortedList = listOfDicts.sorted { \n    guard let age1 = $0[\"age\"] as? Int, let age2 = $1[\"age\"] as? Int else { return false }\n    return age1 < age2\n}\n\nprint(sortedList)\n```"
  },
  {
    "task": "Write a program to split a list into chunks of a specified size.",
    "code": "```swift\nfunc splitListIntoChunks<T>(_ list: [T], chunkSize: Int) -> [[T]] {\n    guard chunkSize > 0 else { return [] }\n    \n    var chunks: [[T]] = []\n    var index = 0\n    \n    while index < list.count {\n        let end = index + chunkSize\n        let chunk = Array(list[index..<min(end, list.count)])\n        chunks.append(chunk)\n        index += chunkSize\n    }\n    \n    return chunks\n}\n\n// Example usage:\nlet numbers = [1, 2, 3, 4, 5, 6, 7]\nlet chunked = splitListIntoChunks(numbers, chunkSize: 3)\nprint(chunked) // [[1, 2, 3], [4, 5, 6], [7]]\n```"
  },
  {
    "task": "Implement a function that takes a list and returns a dictionary with the frequency of each element.",
    "code": "```swift\nfunc frequencyOfElements<T: Hashable>(in list: [T]) -> [T: Int] {\n    var frequencyDict: [T: Int] = [:]\n    for element in list {\n        frequencyDict[element, default: 0] += 1\n    }\n    return frequencyDict\n}\n```"
  },
  {
    "task": "Create a list of integers and replace all negative numbers with zero.",
    "code": "```swift\nvar integers = [3, -1, 4, -9, 5, -2]\nfor i in 0..<integers.count {\n    if integers[i] < 0 {\n        integers[i] = 0\n    }\n}\n```"
  },
  {
    "task": "Write a function that returns the first n elements of a list.",
    "code": "```swift\nfunc firstNElements<T>(from list: [T], count n: Int) -> [T] {\n    return Array(list.prefix(n))\n}\n```"
  },
  {
    "task": "Generate a list of strings and join them into a single string with spaces.",
    "code": "```swift\nlet stringList = [\"This\", \"is\", \"a\", \"list\", \"of\", \"strings\"]\nlet joinedString = stringList.joined(separator: \" \")\n```"
  },
  {
    "task": "Create a list of lists and find the sum of each inner list.",
    "code": "```swift\nlet listOfLists: [[Int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nvar sums: [Int] = []\n\nfor innerList in listOfLists {\n    let sum = innerList.reduce(0, +)\n    sums.append(sum)\n}\n\nprint(sums)\n```"
  },
  {
    "task": "Write a function that finds the second largest number in a list.",
    "code": "```swift\nfunc secondLargestNumber(in list: [Int]) -> Int? {\n    guard list.count >= 2 else { return nil }\n    \n    var firstLargest = Int.min\n    var secondLargest = Int.min\n    \n    for number in list {\n        if number > firstLargest {\n            secondLargest = firstLargest\n            firstLargest = number\n        } else if number > secondLargest && number != firstLargest {\n            secondLargest = number\n        }\n    }\n    \n    return secondLargest == Int.min ? nil : secondLargest\n}\n```"
  },
  {
    "task": "Generate a list of numbers and remove the duplicates while maintaining order.",
    "code": "```swift\nfunc removeDuplicates(from numbers: [Int]) -> [Int] {\n    var seen = Set<Int>()\n    var result: [Int] = []\n    \n    for number in numbers {\n        if !seen.contains(number) {\n            seen.insert(number)\n            result.append(number)\n        }\n    }\n    \n    return result\n}\n\nlet numbers = [1, 2, 3, 2, 1, 4, 5, 3, 6]\nlet uniqueNumbers = removeDuplicates(from: numbers)\nprint(uniqueNumbers)\n```"
  },
  {
    "task": "Create a list of integers and partition it into two lists: one with numbers above the average and one below.",
    "code": "```swift\nlet numbers = [5, 8, 2, 10, 3, 7, 4, 6]\nlet average = Double(numbers.reduce(0, +)) / Double(numbers.count)\n\nlet aboveAverage = numbers.filter { Double($0) > average }\nlet belowAverage = numbers.filter { Double($0) < average }\n\nprint(\"Above Average: \\(aboveAverage)\")\nprint(\"Below Average: \\(belowAverage)\")\n```"
  },
  {
    "task": "Write a program to find the longest increasing subsequence in a list of numbers.",
    "code": "```swift\nfunc longestIncreasingSubsequence(_ nums: [Int]) -> [Int] {\n    guard !nums.isEmpty else { return [] }\n    \n    var dp = Array(repeating: 1, count: nums.count)\n    var prevIndex = Array(repeating: -1, count: nums.count)\n    var maxLength = 0\n    var lastIndex = 0\n    \n    for i in 1..<nums.count {\n        for j in 0..<i {\n            if nums[i] > nums[j] && dp[i] < dp[j] + 1 {\n                dp[i] = dp[j] + 1\n                prevIndex[i] = j\n            }\n        }\n        if dp[i] > maxLength {\n            maxLength = dp[i]\n            lastIndex = i\n        }\n    }\n    \n    var lis = [Int]()\n    var k = lastIndex\n    while k >= 0 {\n        lis.append(nums[k])\n        k = prevIndex[k]\n    }\n    \n    return lis.reversed()\n}\n\n// Example usage:\nlet numbers = [10, 9, 2, 5, 3, 7, 101, 18]\nprint(longestIncreasingSubsequence(numbers))\n```"
  },
  {
    "task": "Implement a function to zip two lists into a single list of tuples.",
    "code": "```swift\nfunc zipLists<T, U>(_ list1: [T], _ list2: [U]) -> [(T, U)] {\n    let count = min(list1.count, list2.count)\n    var zippedList: [(T, U)] = []\n    for i in 0..<count {\n        zippedList.append((list1[i], list2[i]))\n    }\n    return zippedList\n}\n```"
  },
  {
    "task": "Create a list of characters and count the vowels.",
    "code": "```swift\nlet characters: [Character] = [\"a\", \"b\", \"c\", \"e\", \"i\", \"o\", \"u\", \"x\", \"y\", \"z\"]\nlet vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\nlet vowelCount = characters.filter { vowels.contains($0) }.count\n\nprint(\"Number of vowels: \\(vowelCount)\")\n```"
  },
  {
    "task": "Write a function that returns the last n elements of a list.",
    "code": "```swift\nfunc lastElements<T>(of list: [T], count n: Int) -> [T] {\n    guard n > 0 else { return [] }\n    return Array(list.suffix(n))\n}\n```"
  },
  {
    "task": "Generate a list of numbers and split it into two lists: one with positive numbers and one with negative numbers.",
    "code": "```swift\nlet numbers = [10, -3, 7, -1, 5, -8, 0, 6, -4]\nvar positiveNumbers: [Int] = []\nvar negativeNumbers: [Int] = []\n\nfor number in numbers {\n    if number > 0 {\n        positiveNumbers.append(number)\n    } else if number < 0 {\n        negativeNumbers.append(number)\n    }\n}\n\nprint(\"Positive Numbers: \\(positiveNumbers)\")\nprint(\"Negative Numbers: \\(negativeNumbers)\")\n```"
  },
  {
    "task": "Create a list of random integers and find the mode.",
    "code": "```swift\nimport Foundation\n\nvar randomIntegers = (1...100).map { _ in Int.random(in: 1...10) }\n\nvar frequency: [Int: Int] = [:]\nfor number in randomIntegers {\n    frequency[number, default: 0] += 1\n}\n\nlet mode = frequency.max(by: { $0.value < $1.value })?.key\n\nprint(\"Random Integers:\", randomIntegers)\nprint(\"Mode:\", mode ?? \"No mode\")\n```"
  },
  {
    "task": "Write a program to find the shortest path in a grid using a list to represent the path.",
    "code": "```swift\nimport Foundation\n\nstruct Point: Hashable {\n    let x: Int\n    let y: Int\n}\n\nfunc isValidMove(_ point: Point, rows: Int, cols: Int, visited: Set<Point>) -> Bool {\n    return point.x >= 0 && point.x < rows && point.y >= 0 && point.y < cols && !visited.contains(point)\n}\n\nfunc shortestPathInGrid(_ grid: [[Int]]) -> [Point] {\n    guard !grid.isEmpty else { return [] }\n    \n    let rows = grid.count\n    let cols = grid[0].count\n    let directions = [Point(x: 0, y: 1), Point(x: 1, y: 0), Point(x: 0, y: -1), Point(x: -1, y: 0)]\n    var queue: [(point: Point, path: [Point])] = [(Point(x: 0, y: 0), [Point(x: 0, y: 0)])]\n    var visited: Set<Point> = [Point(x: 0, y: 0)]\n    \n    while !queue.isEmpty {\n        let (currentPoint, path) = queue.removeFirst()\n        \n        if currentPoint.x == rows - 1 && currentPoint.y == cols - 1 {\n            return path\n        }\n        \n        for direction in directions {\n            let nextPoint = Point(x: currentPoint.x + direction.x, y: currentPoint.y + direction.y)\n            if isValidMove(nextPoint, rows: rows, cols: cols, visited: visited) && grid[nextPoint.x][nextPoint.y] == 0 {\n                visited.insert(nextPoint)\n                queue.append((nextPoint, path + [nextPoint]))\n            }\n        }\n    }\n    \n    return []\n}\n\nlet grid = [\n    [0, 0, 1],\n    [0, 0, 0],\n    [1, 0, 0]\n]\n\nlet path = shortestPathInGrid(grid)\nprint(path)\n```"
  },
  {
    "task": "Implement a function that takes a list and returns a list with elements doubled.",
    "code": "```swift\nfunc doubleElements(in list: [Int]) -> [Int] {\n    return list.map { $0 * 2 }\n}\n```"
  },
  {
    "task": "Create a list of integers and sort them in descending order.",
    "code": "```swift\nvar numbers = [5, 2, 9, 1, 7]\nnumbers.sort(by: >)\n```"
  },
  {
    "task": "Write a function that takes a list of intervals and merges overlapping intervals.",
    "code": "```swift\nstruct Interval {\n    var start: Int\n    var end: Int\n}\n\nfunc mergeIntervals(_ intervals: [Interval]) -> [Interval] {\n    guard intervals.count > 1 else { return intervals }\n    \n    let sortedIntervals = intervals.sorted { $0.start < $1.start }\n    var merged = [Interval]()\n    var current = sortedIntervals[0]\n    \n    for interval in sortedIntervals[1...] {\n        if interval.start <= current.end {\n            current.end = max(current.end, interval.end)\n        } else {\n            merged.append(current)\n            current = interval\n        }\n    }\n    \n    merged.append(current)\n    return merged\n}\n```"
  },
  {
    "task": "Generate a list of random numbers and find the range (difference between max and min).",
    "code": "```swift\nimport Foundation\n\nvar randomNumbers = (0..<10).map { _ in Int.random(in: 1...100) }\nlet range = (randomNumbers.max() ?? 0) - (randomNumbers.min() ?? 0)\n```"
  },
  {
    "task": "Create a list of strings and remove any that are palindromes.",
    "code": "```swift\nvar words = [\"level\", \"world\", \"radar\", \"swift\", \"noon\", \"code\"]\nwords.removeAll { word in\n    word == String(word.reversed())\n}\n```"
  },
  {
    "task": "Write a program to cyclically permute the elements of a list.",
    "code": "```swift\nfunc cyclicallyPermute<T>(_ list: inout [T]) {\n    guard !list.isEmpty else { return }\n    let lastElement = list.removeLast()\n    list.insert(lastElement, at: 0)\n}\n\nvar numbers = [1, 2, 3, 4, 5]\ncyclicallyPermute(&numbers)\nprint(numbers)\n```"
  },
  {
    "task": "Implement a function to create a list of cumulative sums from a list of numbers.",
    "code": "```swift\nfunc cumulativeSums(from numbers: [Int]) -> [Int] {\n    var cumulativeList: [Int] = []\n    var sum = 0\n    for number in numbers {\n        sum += number\n        cumulativeList.append(sum)\n    }\n    return cumulativeList\n}\n\n// Example usage\nlet numbers = [1, 2, 3, 4]\nlet result = cumulativeSums(from: numbers)\nprint(result) // Output: [1, 3, 6, 10]\n```"
  },
  {
    "task": "Create a list of numbers and shift all zeros to the end.",
    "code": "```swift\nfunc shiftZerosToEnd(_ numbers: [Int]) -> [Int] {\n    var result = [Int]()\n    var zeroCount = 0\n    \n    for number in numbers {\n        if number == 0 {\n            zeroCount += 1\n        } else {\n            result.append(number)\n        }\n    }\n    \n    result.append(contentsOf: Array(repeating: 0, count: zeroCount))\n    return result\n}\n\n// Example usage:\nlet numbers = [1, 0, 2, 0, 3, 4, 0, 5]\nlet shiftedNumbers = shiftZerosToEnd(numbers)\nprint(shiftedNumbers) // Output: [1, 2, 3, 4, 5, 0, 0, 0]\n```"
  },
  {
    "task": "Write a program to simulate a queue using a list.",
    "code": "```swift\nstruct Queue<T> {\n    private var elements: [T] = []\n    \n    mutating func enqueue(_ element: T) {\n        elements.append(element)\n    }\n    \n    mutating func dequeue() -> T? {\n        return elements.isEmpty ? nil : elements.removeFirst()\n    }\n    \n    func peek() -> T? {\n        return elements.first\n    }\n    \n    func isEmpty() -> Bool {\n        return elements.isEmpty\n    }\n    \n    func size() -> Int {\n        return elements.count\n    }\n}\n\n// Example usage:\nvar queue = Queue<Int>()\nqueue.enqueue(10)\nqueue.enqueue(20)\nprint(queue.dequeue() ?? \"Queue is empty\") // Output: 10\nprint(queue.peek() ?? \"Queue is empty\")   // Output: 20\nprint(queue.size())                       // Output: 1\n```"
  },
  {
    "task": "Generate a list of numbers and identify all prime numbers.",
    "code": "```swift\nfunc isPrime(_ number: Int) -> Bool {\n    if number <= 1 { return false }\n    if number <= 3 { return true }\n    if number % 2 == 0 || number % 3 == 0 { return false }\n    var i = 5\n    while i * i <= number {\n        if number % i == 0 || number % (i + 2) == 0 { return false }\n        i += 6\n    }\n    return true\n}\n\nlet numbers = Array(1...100)\nlet primeNumbers = numbers.filter { isPrime($0) }\nprint(primeNumbers)\n```"
  },
  {
    "task": "Create a list of strings and group them by their starting letter.",
    "code": "```swift\nlet strings = [\"apple\", \"banana\", \"apricot\", \"blueberry\", \"cherry\", \"avocado\"]\nvar groupedByFirstLetter: [Character: [String]] = [:]\n\nfor string in strings {\n    if let firstLetter = string.first {\n        groupedByFirstLetter[firstLetter, default: []].append(string)\n    }\n}\n\nprint(groupedByFirstLetter)\n```"
  },
  {
    "task": "Write a function that takes a list and returns a new list with all elements squared.",
    "code": "```swift\nfunc squareElements(in list: [Int]) -> [Int] {\n    return list.map { $0 * $0 }\n}\n```"
  },
  {
    "task": "Generate a list of timestamps and find the time difference between consecutive elements.",
    "code": "```swift\nimport Foundation\n\nfunc generateTimestamps(count: Int) -> [Date] {\n    var timestamps = [Date]()\n    for _ in 0..<count {\n        timestamps.append(Date())\n        sleep(1) // Simulate delay for noticeable difference\n    }\n    return timestamps\n}\n\nfunc calculateTimeDifferences(timestamps: [Date]) -> [TimeInterval] {\n    var differences = [TimeInterval]()\n    for i in 1..<timestamps.count {\n        let difference = timestamps[i].timeIntervalSince(timestamps[i - 1])\n        differences.append(difference)\n    }\n    return differences\n}\n\nlet timestamps = generateTimestamps(count: 5)\nlet timeDifferences = calculateTimeDifferences(timestamps: timestamps)\n\nprint(\"Timestamps:\")\nfor timestamp in timestamps {\n    print(timestamp)\n}\n\nprint(\"\\nTime Differences:\")\nfor difference in timeDifferences {\n    print(difference)\n}\n```"
  },
  {
    "task": "Create a list of numbers and rotate it such that the smallest number is first.",
    "code": "```swift\nvar numbers = [3, 8, 1, 4, 6]\nif let minIndex = numbers.firstIndex(of: numbers.min() ?? 0) {\n    let rotatedNumbers = Array(numbers[minIndex...] + numbers[..<minIndex])\n    print(rotatedNumbers)\n}\n```"
  },
  {
    "task": "Write a program to find all unique pairs in a list that sum up to a specific target.",
    "code": "```swift\nimport Foundation\n\nfunc findUniquePairs(nums: [Int], target: Int) -> [(Int, Int)] {\n    var seen = Set<Int>()\n    var output = Set<(Int, Int)>()\n\n    for number in nums {\n        let complement = target - number\n        if seen.contains(complement) {\n            let pair = number < complement ? (number, complement) : (complement, number)\n            output.insert(pair)\n        }\n        seen.insert(number)\n    }\n\n    return Array(output)\n}\n\nlet numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nlet targetSum = 10\nlet pairs = findUniquePairs(nums: numbers, target: targetSum)\nprint(pairs)\n```"
  },
  {
    "task": "Implement a function that returns true if a list contains a cycle.",
    "code": "```swift\nclass ListNode {\n    var value: Int\n    var next: ListNode?\n    \n    init(_ value: Int) {\n        self.value = value\n        self.next = nil\n    }\n}\n\nfunc hasCycle(_ head: ListNode?) -> Bool {\n    var slowPointer = head\n    var fastPointer = head\n    \n    while fastPointer != nil && fastPointer?.next != nil {\n        slowPointer = slowPointer?.next\n        fastPointer = fastPointer?.next?.next\n        \n        if slowPointer === fastPointer {\n            return true\n        }\n    }\n    return false\n}\n```"
  },
  {
    "task": "Create a list of numbers and find the contiguous subarray with the maximum sum.",
    "code": "```swift\nfunc maxSubArray(_ nums: [Int]) -> Int {\n    guard !nums.isEmpty else { return 0 }\n    var currentSum = nums[0]\n    var maxSum = nums[0]\n    for num in nums[1...] {\n        currentSum = max(num, currentSum + num)\n        maxSum = max(maxSum, currentSum)\n    }\n    return maxSum\n}\n\nlet numbers = [1, -3, 2, 1, -1, 3, -2, 3]\nlet result = maxSubArray(numbers)\nprint(result)\n```"
  },
  {
    "task": "Write a function that takes a list and a number, and finds two numbers in the list that sum to the given number.",
    "code": "```swift\nfunc findPairWithSum(numbers: [Int], targetSum: Int) -> (Int, Int)? {\n    var numberSet = Set<Int>()\n    \n    for number in numbers {\n        let complement = targetSum - number\n        if numberSet.contains(complement) {\n            return (complement, number)\n        }\n        numberSet.insert(number)\n    }\n    return nil\n}\n```"
  },
  {
    "task": "Generate a list of even numbers and filter out those that are greater than a specific value.",
    "code": "```swift\nlet specificValue = 10\nlet numbers = Array(2...20).filter { $0 % 2 == 0 }\nlet filteredNumbers = numbers.filter { $0 <= specificValue }\nprint(filteredNumbers)\n```"
  },
  {
    "task": "Create a list of characters and reverse the vowels only.",
    "code": "```swift\nfunc reverseVowels(in characters: [Character]) -> [Character] {\n    var vowels: [Character] = []\n    let vowelSet: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"]\n    \n    for char in characters {\n        if vowelSet.contains(char) {\n            vowels.append(char)\n        }\n    }\n    \n    var result: [Character] = characters\n    var vowelIndex = vowels.count - 1\n    \n    for i in 0..<result.count {\n        if vowelSet.contains(result[i]) {\n            result[i] = vowels[vowelIndex]\n            vowelIndex -= 1\n        }\n    }\n    \n    return result\n}\n\nlet characters: [Character] = [\"h\", \"e\", \"l\", \"l\", \"o\", \" \", \"w\", \"o\", \"r\", \"l\", \"d\"]\nlet reversedVowels = reverseVowels(in: characters)\nprint(String(reversedVowels))\n```"
  },
  {
    "task": "Write a program to find all permutations of a list of elements.",
    "code": "```swift\nfunc permute<T>(_ list: [T]) -> [[T]] {\n    if list.isEmpty {\n        return [[]]\n    }\n    \n    var result: [[T]] = []\n    \n    for i in 0..<list.count {\n        let current = list[i]\n        var remaining = list\n        remaining.remove(at: i)\n        \n        for perm in permute(remaining) {\n            result.append([current] + perm)\n        }\n    }\n    \n    return result\n}\n\n// Example usage\nlet elements = [1, 2, 3]\nlet permutations = permute(elements)\nprint(permutations)\n```"
  },
  {
    "task": "Implement a function that takes a list and returns the most frequently occurring element.",
    "code": "```swift\nfunc mostFrequentElement<T: Hashable>(in list: [T]) -> T? {\n    var frequencyMap = [T: Int]()\n    \n    for element in list {\n        frequencyMap[element, default: 0] += 1\n    }\n    \n    return frequencyMap.max(by: { $0.value < $1.value })?.key\n}\n```"
  },
  {
    "task": "Create a list of numbers and calculate the variance.",
    "code": "```swift\nimport Foundation\n\nlet numbers: [Double] = [1.0, 2.0, 3.0, 4.0, 5.0]\n\nlet mean = numbers.reduce(0, +) / Double(numbers.count)\n\nlet variance = numbers.map { pow($0 - mean, 2) }.reduce(0, +) / Double(numbers.count)\n\nprint(\"Variance: \\(variance)\")\n```"
  },
  {
    "task": "Write a function to concatenate a list of lists into a single list.",
    "code": "```swift\nfunc concatenateLists(lists: [[Any]]) -> [Any] {\n    return lists.flatMap { $0 }\n}\n```"
  },
  {
    "task": "Generate a list of numbers and replace each element with the product of all other elements.",
    "code": "```swift\nfunc replaceWithProductOfOthers(_ numbers: [Int]) -> [Int] {\n    let totalProduct = numbers.reduce(1, *)\n    return numbers.map { totalProduct / $0 }\n}\n\nlet numbers = [1, 2, 3, 4]\nlet result = replaceWithProductOfOthers(numbers)\nprint(result)\n```"
  },
  {
    "task": "Create a list of strings and find the common prefix.",
    "code": "```swift\nfunc findCommonPrefix(in strings: [String]) -> String {\n    guard !strings.isEmpty else { return \"\" }\n    var prefix = strings[0]\n    for string in strings {\n        while !string.hasPrefix(prefix) {\n            prefix = String(prefix.dropLast())\n            if prefix.isEmpty { return \"\" }\n        }\n    }\n    return prefix\n}\n\nlet strings = [\"flower\", \"flow\", \"flight\"]\nlet commonPrefix = findCommonPrefix(in: strings)\nprint(\"Common prefix: \\(commonPrefix)\")\n```"
  },
  {
    "task": "Write a program to partition a list into two lists based on a predicate function.",
    "code": "```swift\nfunc partition<T>(list: [T], predicate: (T) -> Bool) -> ([T], [T]) {\n    var trueList: [T] = []\n    var falseList: [T] = []\n    \n    for item in list {\n        if predicate(item) {\n            trueList.append(item)\n        } else {\n            falseList.append(item)\n        }\n    }\n    \n    return (trueList, falseList)\n}\n\n// Example usage:\nlet numbers = [1, 2, 3, 4, 5, 6]\nlet predicate: (Int) -> Bool = { $0 % 2 == 0 }\nlet (evens, odds) = partition(list: numbers, predicate: predicate)\nprint(\"Evens: \\(evens)\") // Evens: [2, 4, 6]\nprint(\"Odds: \\(odds)\")   // Odds: [1, 3, 5]\n```"
  },
  {
    "task": "Implement a function to find the kth smallest element in a list.",
    "code": "```swift\nfunc kthSmallestElement(_ list: [Int], _ k: Int) -> Int? {\n    guard k > 0 && k <= list.count else { return nil }\n    let sortedList = list.sorted()\n    return sortedList[k - 1]\n}\n```"
  },
  {
    "task": "Create a list of integers and find the length of the longest contiguous sequence.",
    "code": "```swift\nimport Foundation\n\nfunc longestContiguousSequence(integers: [Int]) -> Int {\n    guard !integers.isEmpty else { return 0 }\n\n    var maxLength = 1\n    var currentLength = 1\n\n    for i in 1..<integers.count {\n        if integers[i] == integers[i - 1] + 1 {\n            currentLength += 1\n        } else {\n            maxLength = max(maxLength, currentLength)\n            currentLength = 1\n        }\n    }\n    \n    return max(maxLength, currentLength)\n}\n\nlet integers = [1, 2, 2, 3, 4, 5, 1, 2, 3, 4, 6, 7, 8, 9]\nlet longestSequenceLength = longestContiguousSequence(integers: integers)\nprint(longestSequenceLength)\n```"
  },
  {
    "task": "Write a function that rotates elements in a list while maintaining the relative order of non-rotated elements.",
    "code": "```swift\nfunc rotateList<T>(_ list: [T], by positions: Int) -> [T] {\n    guard !list.isEmpty else { return list }\n    let effectivePositions = positions % list.count\n    let splitIndex = list.count - effectivePositions\n    let rotatedPart = list.suffix(effectivePositions)\n    let nonRotatedPart = list.prefix(splitIndex)\n    return Array(rotatedPart + nonRotatedPart)\n}\n\n// Example usage\nlet originalList = [1, 2, 3, 4, 5]\nlet rotatedList = rotateList(originalList, by: 2)\nprint(rotatedList)  // Output: [4, 5, 1, 2, 3]\n```"
  },
  {
    "task": "Generate a list of random numbers and sort them while maintaining the original index positions.",
    "code": "```swift\nimport Foundation\n\n// Generate a list of random numbers\nvar randomNumbers: [(index: Int, value: Int)] = (0..<10).map { (index: $0, value: Int.random(in: 1...100)) }\n\n// Sort the list while maintaining the original index positions\nlet sortedNumbers = randomNumbers.sorted { $0.value < $1.value }\n\n// Output the sorted list with original index positions\nfor item in sortedNumbers {\n    print(\"Index: \\(item.index), Value: \\(item.value)\")\n}\n```"
  },
  {
    "task": "Create a list of numbers and find all subsets that sum up to a specific target.",
    "code": "```swift\nfunc findSubsetsThatSumToTarget(_ nums: [Int], _ target: Int) -> [[Int]] {\n    var result: [[Int]] = []\n    \n    func backtrack(_ start: Int, _ currentSubset: inout [Int], _ currentSum: Int) {\n        if currentSum == target {\n            result.append(currentSubset)\n            return\n        }\n        \n        for i in start..<nums.count {\n            if currentSum + nums[i] <= target {\n                currentSubset.append(nums[i])\n                backtrack(i + 1, &currentSubset, currentSum + nums[i])\n                currentSubset.removeLast()\n            }\n        }\n    }\n    \n    var currentSubset: [Int] = []\n    backtrack(0, &currentSubset, 0)\n    return result\n}\n\nlet numbers = [1, 2, 3, 4, 5]\nlet targetSum = 5\nlet subsets = findSubsetsThatSumToTarget(numbers, targetSum)\nprint(subsets)\n```"
  },
  {
    "task": "Write a program to simulate a stack using a list.",
    "code": "```swift\nstruct Stack<T> {\n    private var elements: [T] = []\n    \n    mutating func push(_ element: T) {\n        elements.append(element)\n    }\n    \n    mutating func pop() -> T? {\n        return elements.popLast()\n    }\n    \n    func peek() -> T? {\n        return elements.last\n    }\n    \n    func isEmpty() -> Bool {\n        return elements.isEmpty\n    }\n    \n    func size() -> Int {\n        return elements.count\n    }\n}\n\n// Example usage:\nvar stack = Stack<Int>()\nstack.push(1)\nstack.push(2)\nprint(stack.pop() ?? \"Empty\") // Output: 2\nprint(stack.peek() ?? \"Empty\") // Output: 1\nprint(stack.isEmpty()) // Output: false\nprint(stack.size()) // Output: 1\n```"
  }
]