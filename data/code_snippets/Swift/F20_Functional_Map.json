[
  {
    "task": "Convert a list of temperatures from Celsius to Fahrenheit using a map function.",
    "code": "```swift\nlet celsiusTemperatures = [0.0, 20.0, 37.0, 100.0]\nlet fahrenheitTemperatures = celsiusTemperatures.map { $0 * 9.0 / 5.0 + 32.0 }\n```"
  },
  {
    "task": "Use map to convert a list of lowercase words to uppercase.",
    "code": "```swift\nlet lowercaseWords = [\"hello\", \"world\", \"swift\", \"programming\"]\nlet uppercaseWords = lowercaseWords.map { $0.uppercased() }\n```"
  },
  {
    "task": "Apply map to add a prefix to each string in a list of filenames.",
    "code": "```swift\nlet filenames = [\"document1.txt\", \"image1.png\", \"video1.mp4\"]\nlet prefix = \"backup_\"\n\nlet prefixedFilenames = filenames.map { prefix + $0 }\n\nprint(prefixedFilenames)\n```"
  },
  {
    "task": "Transform a list of numbers by squaring each element with a map function.",
    "code": "```swift\nlet numbers = [1, 2, 3, 4, 5]\nlet squaredNumbers = numbers.map { $0 * $0 }\n```"
  },
  {
    "task": "Convert a list of integers to their string representations using map.",
    "code": "```swift\nlet numbers = [1, 2, 3, 4, 5]\nlet stringRepresentations = numbers.map { String($0) }\n```"
  },
  {
    "task": "Use map to compute the length of each string in a list of sentences.",
    "code": "```swift\nlet sentences = [\"Swift is powerful\", \"Functional programming is elegant\", \"Map transforms collections\"]\nlet lengths = sentences.map { $0.count }\n```"
  },
  {
    "task": "Apply a discount to a list of prices using a map function.",
    "code": "```swift\nlet prices = [100.0, 200.0, 300.0, 400.0]\nlet discountRate = 0.1\n\nlet discountedPrices = prices.map { $0 * (1 - discountRate) }\n\nprint(discountedPrices)\n```"
  },
  {
    "task": "Extract the first element from each tuple in a list of tuples with map.",
    "code": "```swift\nlet tuplesList = [(1, \"a\"), (2, \"b\"), (3, \"c\")]\nlet firstElements = tuplesList.map { $0.0 }\n```"
  },
  {
    "task": "Use map to round a list of floating-point numbers to two decimal places.",
    "code": "```swift\nlet numbers: [Double] = [3.14159, 2.71828, 1.41421, 1.73205]\nlet roundedNumbers = numbers.map { Double(round(100 * $0) / 100) }\n```"
  },
  {
    "task": "Capitalize the first letter of each word in a list of names using map.",
    "code": "```swift\nlet names = [\"john doe\", \"jane smith\", \"alice johnson\"]\nlet capitalizedNames = names.map { name in\n    name.split(separator: \" \").map { word in\n        word.prefix(1).uppercased() + word.dropFirst()\n    }.joined(separator: \" \")\n}\nprint(capitalizedNames)\n```"
  },
  {
    "task": "Convert a list of JSON strings to corresponding dictionary objects with map.",
    "code": "```swift\nimport Foundation\n\nlet jsonStrings = [\n    \"{\\\"name\\\": \\\"Alice\\\", \\\"age\\\": 30}\",\n    \"{\\\"name\\\": \\\"Bob\\\", \\\"age\\\": 25}\",\n    \"{\\\"name\\\": \\\"Charlie\\\", \\\"age\\\": 35}\"\n]\n\nlet dictionaries = jsonStrings.compactMap { jsonString -> [String: Any]? in\n    guard let data = jsonString.data(using: .utf8) else { return nil }\n    return try? JSONSerialization.jsonObject(with: data, options: []) as? [String: Any]\n}\n\nprint(dictionaries)\n```"
  },
  {
    "task": "Use map to double the value of each number in a list.",
    "code": "```swift\nlet numbers = [1, 2, 3, 4, 5]\nlet doubledNumbers = numbers.map { $0 * 2 }\n```"
  },
  {
    "task": "Transform a list of RGB tuples to hexadecimal color codes using map.",
    "code": "```swift\nlet rgbTuples: [(Int, Int, Int)] = [(255, 0, 0), (0, 255, 0), (0, 0, 255)]\n\nlet hexColors = rgbTuples.map { (r, g, b) in\n    String(format: \"#%02X%02X%02X\", r, g, b)\n}\n\nprint(hexColors)\n```"
  },
  {
    "task": "Use map to compute the factorial of each number in a list.",
    "code": "```swift\nfunc factorial(_ n: Int) -> Int {\n    return (1...max(1, n)).reduce(1, *)\n}\n\nlet numbers = [1, 2, 3, 4, 5]\nlet factorials = numbers.map { factorial($0) }\n```"
  },
  {
    "task": "Translate a list of English words to Spanish using a map function.",
    "code": "```swift\nlet englishToSpanish: [String: String] = [\n    \"hello\": \"hola\",\n    \"world\": \"mundo\",\n    \"apple\": \"manzana\",\n    \"tree\": \"\u00e1rbol\",\n    \"car\": \"coche\"\n]\n\nlet englishWords = [\"hello\", \"world\", \"apple\"]\nlet spanishWords = englishWords.map { englishToSpanish[$0] ?? $0 }\nprint(spanishWords)\n```"
  },
  {
    "task": "Apply a map function to format a list of dates from one format to another.",
    "code": "```swift\nimport Foundation\n\nlet dateStrings = [\"2023-10-01\", \"2023-11-15\", \"2023-12-25\"]\nlet inputDateFormatter = DateFormatter()\ninputDateFormatter.dateFormat = \"yyyy-MM-dd\"\n\nlet outputDateFormatter = DateFormatter()\noutputDateFormatter.dateFormat = \"MMM dd, yyyy\"\n\nlet formattedDates = dateStrings.compactMap { dateString -> String? in\n    if let date = inputDateFormatter.date(from: dateString) {\n        return outputDateFormatter.string(from: date)\n    }\n    return nil\n}\n\nprint(formattedDates)\n```"
  },
  {
    "task": "Use map to check if each number in a list is even, returning a list of booleans.",
    "code": "```swift\nlet numbers = [1, 2, 3, 4, 5, 6]\nlet isEvenList = numbers.map { $0 % 2 == 0 }\n```"
  },
  {
    "task": "Convert a list of binary strings to decimal numbers using map.",
    "code": "```swift\nlet binaryStrings = [\"101\", \"110\", \"111\", \"1001\"]\n\nlet decimalNumbers = binaryStrings.compactMap { Int($0, radix: 2) }\n\nprint(decimalNumbers)\n```"
  },
  {
    "task": "Use map to append a domain name to a list of user names to create email addresses.",
    "code": "```swift\nlet userNames = [\"alice\", \"bob\", \"charlie\"]\nlet domain = \"@example.com\"\nlet emailAddresses = userNames.map { $0 + domain }\n```"
  },
  {
    "task": "Calculate the area of each circle in a list of radii using a map function.",
    "code": "```swift\nimport Foundation\n\nlet radii: [Double] = [1.0, 2.0, 3.0, 4.0, 5.0]\nlet areas = radii.map { radius in\n    Double.pi * radius * radius\n}\n\nprint(areas)\n```"
  },
  {
    "task": "Use map to strip whitespace from the start and end of each string in a list.",
    "code": "```swift\nlet strings = [\"  hello  \", \"  world  \", \"  swift  \"]\nlet trimmedStrings = strings.map { $0.trimmingCharacters(in: .whitespaces) }\n```"
  },
  {
    "task": "Apply map to replace spaces with underscores in a list of file paths.",
    "code": "```swift\nlet filePaths = [\"/user/docs/file 1.txt\", \"/user/music/song 1.mp3\", \"/user/images/photo 1.png\"]\nlet updatedFilePaths = filePaths.map { $0.replacingOccurrences(of: \" \", with: \"_\") }\n```"
  },
  {
    "task": "Convert a list of mixed-case strings to title case using map.",
    "code": "```swift\nlet mixedCaseStrings = [\"hello world\", \"swift programming\", \"functional map\"]\nlet titleCaseStrings = mixedCaseStrings.map { $0.capitalized }\n```"
  },
  {
    "task": "Use map to filter out only the digits from a list of mixed alphanumeric strings.",
    "code": "```swift\nlet mixedStrings = [\"abc123\", \"def456\", \"ghi789\", \"jkl0\"]\nlet digits = mixedStrings.map { $0.filter { $0.isNumber } }\nprint(digits)\n```"
  },
  {
    "task": "Apply map to convert a list of Unix timestamps to readable date strings.",
    "code": "```swift\nimport Foundation\n\nlet timestamps: [TimeInterval] = [1609459200, 1612137600, 1614556800]\n\nlet dateFormatter = DateFormatter()\ndateFormatter.dateStyle = .medium\n\nlet readableDates = timestamps.map { timestamp in\n    let date = Date(timeIntervalSince1970: timestamp)\n    return dateFormatter.string(from: date)\n}\n\nprint(readableDates)\n```"
  },
  {
    "task": "Transform a list of dictionary objects by extracting a specific key's value using map.",
    "code": "```swift\nlet dictionaries: [[String: Any]] = [\n    [\"name\": \"Alice\", \"age\": 30],\n    [\"name\": \"Bob\", \"age\": 25],\n    [\"name\": \"Charlie\", \"age\": 35]\n]\n\nlet names = dictionaries.compactMap { $0[\"name\"] as? String }\n```"
  },
  {
    "task": "Use map to compute the cube of each number in a list.",
    "code": "```swift\nlet numbers = [1, 2, 3, 4, 5]\nlet cubes = numbers.map { $0 * $0 * $0 }\n```"
  },
  {
    "task": "Translate a list of URLs to their respective domain names using a map function.",
    "code": "```swift\nimport Foundation\n\nlet urls = [\"https://www.example.com\", \"http://another-example.org\", \"https://swift.org\"]\n\nlet domainNames = urls.compactMap { url -> String? in\n    guard let urlComponents = URLComponents(string: url), let host = urlComponents.host else {\n        return nil\n    }\n    return host\n}\n\nprint(domainNames)\n```"
  },
  {
    "task": "Use map to generate HTML list items from a list of text strings.",
    "code": "```swift\nlet textStrings = [\"Item 1\", \"Item 2\", \"Item 3\"]\n\nlet htmlListItems = textStrings.map { \"<li>\\($0)</li>\" }\n\nprint(htmlListItems)\n```"
  },
  {
    "task": "Convert a list of polar coordinates to Cartesian coordinates using map.",
    "code": "```swift\nimport Foundation\n\nstruct PolarCoordinate {\n    var radius: Double\n    var angle: Double\n}\n\nstruct CartesianCoordinate {\n    var x: Double\n    var y: Double\n}\n\nlet polarCoordinates = [\n    PolarCoordinate(radius: 1.0, angle: .pi / 4),\n    PolarCoordinate(radius: 2.0, angle: .pi / 2),\n    PolarCoordinate(radius: 3.0, angle: .pi)\n]\n\nlet cartesianCoordinates = polarCoordinates.map { polar in\n    CartesianCoordinate(\n        x: polar.radius * cos(polar.angle),\n        y: polar.radius * sin(polar.angle)\n    )\n}\n\nprint(cartesianCoordinates)\n```"
  },
  {
    "task": "Use map to decode a list of Base64 encoded strings.",
    "code": "```swift\nimport Foundation\n\nlet base64EncodedStrings = [\"SGVsbG8gd29ybGQ=\", \"U3dpZnQ=\", \"VHJhbnNsYXRpb24=\"]\n\nlet decodedStrings = base64EncodedStrings.compactMap { encodedString in\n    if let data = Data(base64Encoded: encodedString),\n       let decodedString = String(data: data, encoding: .utf8) {\n        return decodedString\n    }\n    return nil\n}\n\nprint(decodedStrings)\n```"
  },
  {
    "task": "Convert a list of English sentences to Pig Latin using a map function.",
    "code": "```swift\nfunc toPigLatin(sentence: String) -> String {\n    return sentence.split(separator: \" \").map { word -> String in\n        var word = String(word)\n        let vowels = \"aeiouAEIOU\"\n        if let firstVowelIndex = word.firstIndex(where: { vowels.contains($0) }) {\n            if firstVowelIndex == word.startIndex {\n                return word + \"way\"\n            } else {\n                let prefix = word[..<firstVowelIndex]\n                let suffix = word[firstVowelIndex...]\n                return suffix + prefix + \"ay\"\n            }\n        }\n        return word + \"ay\"\n    }.joined(separator: \" \")\n}\n\nlet sentences = [\"hello world\", \"swift is fun\", \"I love programming\"]\nlet pigLatinSentences = sentences.map(toPigLatin)\nprint(pigLatinSentences)\n```"
  },
  {
    "task": "Use map to anonymize a list of email addresses by masking them.",
    "code": "```swift\nlet emails = [\"user1@example.com\", \"user2@example.com\", \"user3@example.com\"]\n\nlet anonymizedEmails = emails.map { email in\n    if let atIndex = email.firstIndex(of: \"@\") {\n        let username = email[..<atIndex]\n        let maskedUsername = username.map { _ in \"*\" }.joined()\n        return maskedUsername + email[atIndex...]\n    }\n    return email\n}\n\nprint(anonymizedEmails)\n```"
  },
  {
    "task": "Apply map to reverse each string in a list of words.",
    "code": "```swift\nlet words = [\"hello\", \"world\", \"swift\"]\nlet reversedWords = words.map { String($0.reversed()) }\n```"
  },
  {
    "task": "Convert a list of hexadecimal color codes to RGB tuples using map.",
    "code": "```swift\nimport Foundation\n\nfunc hexToRGB(hex: String) -> (Int, Int, Int)? {\n    var hexSanitized = hex.trimmingCharacters(in: .whitespacesAndNewlines)\n    hexSanitized = hexSanitized.hasPrefix(\"#\") ? String(hexSanitized.dropFirst()) : hexSanitized\n\n    guard hexSanitized.count == 6 else { return nil }\n\n    var rgbValue: UInt64 = 0\n    Scanner(string: hexSanitized).scanHexInt64(&rgbValue)\n\n    let red = Int((rgbValue & 0xFF0000) >> 16)\n    let green = Int((rgbValue & 0x00FF00) >> 8)\n    let blue = Int(rgbValue & 0x0000FF)\n\n    return (red, green, blue)\n}\n\nlet hexColors = [\"#FF5733\", \"#33FF57\", \"#3357FF\"]\nlet rgbColors = hexColors.compactMap { hexToRGB(hex: $0) }\n\nprint(rgbColors)\n```"
  },
  {
    "task": "Use map to increment each integer in a list by a constant value.",
    "code": "```swift\nlet numbers = [1, 2, 3, 4, 5]\nlet incrementedNumbers = numbers.map { $0 + 1 }\n```"
  },
  {
    "task": "Calculate the square root of each number in a list using a map function.",
    "code": "```swift\nimport Foundation\n\nlet numbers = [1.0, 4.0, 9.0, 16.0, 25.0]\nlet squareRoots = numbers.map { sqrt($0) }\nprint(squareRoots)\n```"
  },
  {
    "task": "Use map to convert a list of currency amounts from dollars to euros.",
    "code": "```swift\nlet dollarAmounts = [10.0, 25.0, 50.0, 100.0]\nlet conversionRate = 0.85\n\nlet euroAmounts = dollarAmounts.map { $0 * conversionRate }\n\nprint(euroAmounts)\n```"
  },
  {
    "task": "Extract the domain from each email address in a list using map.",
    "code": "```swift\nlet emails = [\"user1@example.com\", \"user2@test.org\", \"user3@domain.net\"]\n\nlet domains = emails.map { email in\n    email.split(separator: \"@\").last ?? \"\"\n}\n\nprint(domains)\n```"
  },
  {
    "task": "Use map to serialize a list of objects into JSON strings.",
    "code": "```swift\nimport Foundation\n\nstruct MyObject: Encodable {\n    let id: Int\n    let name: String\n}\n\nlet objects = [\n    MyObject(id: 1, name: \"Object One\"),\n    MyObject(id: 2, name: \"Object Two\"),\n    MyObject(id: 3, name: \"Object Three\")\n]\n\nlet jsonStrings = objects.map { object -> String in\n    if let jsonData = try? JSONEncoder().encode(object),\n       let jsonString = String(data: jsonData, encoding: .utf8) {\n        return jsonString\n    }\n    return \"\"\n}\n\nprint(jsonStrings)\n```"
  },
  {
    "task": "Transform a list of file sizes from bytes to kilobytes using map.",
    "code": "```swift\nlet fileSizesInBytes = [1024, 2048, 5120, 10240]\nlet fileSizesInKilobytes = fileSizesInBytes.map { $0 / 1024 }\n```"
  },
  {
    "task": "Use map to append a suffix to each string in a list of identifiers.",
    "code": "```swift\nlet identifiers = [\"id123\", \"id456\", \"id789\"]\nlet suffix = \"_suffix\"\nlet updatedIdentifiers = identifiers.map { $0 + suffix }\n```"
  },
  {
    "task": "Apply map to convert measurements from inches to centimeters in a list.",
    "code": "```swift\nlet measurementsInInches = [10.0, 15.5, 20.25, 5.0]\nlet inchesToCentimeters = 2.54\n\nlet measurementsInCentimeters = measurementsInInches.map { $0 * inchesToCentimeters }\n\nprint(measurementsInCentimeters)\n```"
  },
  {
    "task": "Use map to encrypt a list of plaintext messages using a simple cipher.",
    "code": "```swift\nlet plaintextMessages = [\"hello\", \"swift\", \"encrypted\", \"map\"]\nlet shift = 3\n\nfunc encrypt(message: String, shift: Int) -> String {\n    let shiftedCharacters = message.map { character -> Character in\n        if let asciiValue = character.asciiValue {\n            let shiftedAsciiValue = asciiValue + UInt8(shift)\n            return Character(UnicodeScalar(shiftedAsciiValue))\n        }\n        return character\n    }\n    return String(shiftedCharacters)\n}\n\nlet encryptedMessages = plaintextMessages.map { encrypt(message: $0, shift: shift) }\nprint(encryptedMessages)\n```"
  },
  {
    "task": "Transform a list of date strings to day of the week names using a map function.",
    "code": "```swift\nimport Foundation\n\nlet dateStrings = [\"2023-10-01\", \"2023-10-02\", \"2023-10-03\"]\n\nlet dateFormatter = DateFormatter()\ndateFormatter.dateFormat = \"yyyy-MM-dd\"\ndateFormatter.locale = Locale(identifier: \"en_US\")\n\nlet dayFormatter = DateFormatter()\ndayFormatter.dateFormat = \"EEEE\"\ndayFormatter.locale = Locale(identifier: \"en_US\")\n\nlet daysOfWeek = dateStrings.compactMap { dateString in\n    dateFormatter.date(from: dateString).map { date in\n        dayFormatter.string(from: date)\n    }\n}\n\nprint(daysOfWeek)\n```"
  },
  {
    "task": "Use map to derive the absolute value of each number in a list.",
    "code": "```swift\nlet numbers = [-1, -2, 3, -4, 5]\nlet absoluteValues = numbers.map { abs($0) }\n```"
  },
  {
    "task": "Convert a list of lowercase hexadecimal strings to uppercase using map.",
    "code": "```swift\nlet hexStrings = [\"1a\", \"2b\", \"3c\", \"4d\", \"5e\"]\nlet uppercasedHexStrings = hexStrings.map { $0.uppercased() }\nprint(uppercasedHexStrings)\n```"
  },
  {
    "task": "Use map to find the maximum value in a list of lists of numbers.",
    "code": "```swift\nlet listOfLists = [[3, 5, 1], [7, 2, 8], [6, 9, 4]]\nlet maxValues = listOfLists.map { $0.max() ?? Int.min }\nlet overallMax = maxValues.max() ?? Int.min\nprint(overallMax)\n```"
  },
  {
    "task": "Apply map to extract the year from each date in a list of date objects.",
    "code": "```swift\nimport Foundation\n\nlet dateFormatter = DateFormatter()\ndateFormatter.dateFormat = \"yyyy-MM-dd\"\n\nlet dates = [\n    dateFormatter.date(from: \"2023-10-01\"),\n    dateFormatter.date(from: \"2020-06-15\"),\n    dateFormatter.date(from: \"2018-03-22\")\n]\n\nlet calendar = Calendar.current\nlet years = dates.compactMap { $0 }.map { calendar.component(.year, from: $0) }\nprint(years)\n```"
  },
  {
    "task": "Use map to prepend a country code to each phone number in a list.",
    "code": "```swift\nlet phoneNumbers = [\"1234567890\", \"9876543210\", \"5555555555\"]\nlet countryCode = \"+1\"\nlet fullPhoneNumbers = phoneNumbers.map { countryCode + $0 }\nprint(fullPhoneNumbers)\n```"
  },
  {
    "task": "Capitalize the last letter of each word in a list using a map function.",
    "code": "```swift\nlet words = [\"hello\", \"world\", \"swift\", \"programming\"]\nlet capitalizedLastLetters = words.map { word in\n    guard let lastChar = word.last else { return word }\n    return word.dropLast() + String(lastChar).uppercased()\n}\nprint(capitalizedLastLetters)\n```"
  },
  {
    "task": "Use map to transform a list of strings by removing all vowels.",
    "code": "```swift\nlet strings = [\"hello\", \"world\", \"swift\", \"programming\"]\nlet vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"]\n\nlet transformedStrings = strings.map { string in\n    string.filter { !vowels.contains($0) }\n}\n\nprint(transformedStrings)\n```"
  },
  {
    "task": "Convert a list of music notes to their corresponding frequencies using map.",
    "code": "```swift\nlet notesToFrequencies: [String: Double] = [\n    \"C4\": 261.63, \"D4\": 293.66, \"E4\": 329.63, \"F4\": 349.23,\n    \"G4\": 392.00, \"A4\": 440.00, \"B4\": 493.88\n]\n\nlet musicNotes = [\"C4\", \"E4\", \"G4\", \"A4\"]\n\nlet frequencies = musicNotes.map { notesToFrequencies[$0] ?? 0.0 }\n\nprint(frequencies)\n```"
  },
  {
    "task": "Use map to find the reciprocal of each number in a list.",
    "code": "```swift\nlet numbers = [1.0, 2.0, 4.0, 5.0]\nlet reciprocals = numbers.map { 1.0 / $0 }\nprint(reciprocals)\n```"
  },
  {
    "task": "Transform a list of URLs to their shortened versions using a map function.",
    "code": "```swift\nimport Foundation\n\n// Assuming a simple function to mimic URL shortening\nfunc shortenURL(_ url: String) -> String {\n    return \"short.ly/\" + url.hashValue.description\n}\n\nlet urls = [\n    \"https://example.com/page1\",\n    \"https://example.com/page2\",\n    \"https://example.com/page3\"\n]\n\nlet shortenedURLs = urls.map { shortenURL($0) }\nprint(shortenedURLs)\n```"
  },
  {
    "task": "Use map to generate a list of initials from a list of full names.",
    "code": "```swift\nlet fullNames = [\"John Doe\", \"Jane Smith\", \"Alice Johnson\"]\nlet initials = fullNames.map { name in\n    name.split(separator: \" \").compactMap { $0.first }.map { String($0) }.joined()\n}\nprint(initials)\n```"
  },
  {
    "task": "Convert a list of decimal numbers to their binary string representations using map.",
    "code": "```swift\nlet decimalNumbers = [1, 2, 3, 4, 5]\nlet binaryStrings = decimalNumbers.map { String($0, radix: 2) }\n```"
  },
  {
    "task": "Use map to adjust the brightness of each color in a list of RGB tuples.",
    "code": "```swift\nimport Foundation\n\ntypealias RGB = (red: Double, green: Double, blue: Double)\n\nfunc adjustBrightness(of colors: [RGB], factor: Double) -> [RGB] {\n    return colors.map { (red, green, blue) in\n        let adjust = { (component: Double) -> Double in\n            return min(max(component * factor, 0.0), 1.0)\n        }\n        return (adjust(red), adjust(green), adjust(blue))\n    }\n}\n\nlet colors: [RGB] = [(0.5, 0.4, 0.3), (0.2, 0.6, 0.7), (0.9, 0.1, 0.1)]\nlet brightenedColors = adjustBrightness(of: colors, factor: 1.2)\nprint(brightenedColors)\n```"
  },
  {
    "task": "Apply map to filter out only alphabetic characters from a list of strings.",
    "code": "```swift\nlet strings = [\"abc123\", \"def456\", \"ghi789\"]\nlet alphabeticStrings = strings.map { $0.filter { $0.isLetter } }\n```"
  },
  {
    "task": "Use map to compute the prime factorization of each number in a list.",
    "code": "```swift\nimport Foundation\n\nfunc primeFactors(of number: Int) -> [Int] {\n    var n = number\n    var factors: [Int] = []\n    var divisor = 2\n    while n >= divisor * divisor {\n        while n % divisor == 0 {\n            factors.append(divisor)\n            n /= divisor\n        }\n        divisor += 1\n    }\n    if n > 1 {\n        factors.append(n)\n    }\n    return factors\n}\n\nlet numbers = [12, 15, 21, 29, 30]\nlet factorizedNumbers = numbers.map { primeFactors(of: $0) }\n\nprint(factorizedNumbers)\n```"
  },
  {
    "task": "Calculate the exponential of each number in a list using a map function.",
    "code": "```swift\nimport Foundation\n\nlet numbers = [1.0, 2.0, 3.0, 4.0, 5.0]\nlet exponentials = numbers.map { exp($0) }\nprint(exponentials)\n```"
  },
  {
    "task": "Use map to convert a list of text messages to morse code.",
    "code": "```swift\nlet morseCodeMap: [Character: String] = [\n    \"A\": \".-\", \"B\": \"-...\", \"C\": \"-.-.\", \"D\": \"-..\", \"E\": \".\", \"F\": \"..-.\", \"G\": \"--.\",\n    \"H\": \"....\", \"I\": \"..\", \"J\": \".---\", \"K\": \"-.-\", \"L\": \".-..\", \"M\": \"--\", \"N\": \"-.\",\n    \"O\": \"---\", \"P\": \".--.\", \"Q\": \"--.-\", \"R\": \".-.\", \"S\": \"...\", \"T\": \"-\", \"U\": \"..-\",\n    \"V\": \"...-\", \"W\": \".--\", \"X\": \"-..-\", \"Y\": \"-.--\", \"Z\": \"--..\", \"0\": \"-----\", \"1\": \".----\",\n    \"2\": \"..---\", \"3\": \"...--\", \"4\": \"....-\", \"5\": \".....\", \"6\": \"-....\", \"7\": \"--...\",\n    \"8\": \"---..\", \"9\": \"----.\", \" \": \"/\"\n]\n\nfunc textToMorseCode(_ text: String) -> String {\n    return text.uppercased().compactMap { morseCodeMap[$0] }.joined(separator: \" \")\n}\n\nlet messages = [\"Hello World\", \"Swift\"]\nlet morseMessages = messages.map { textToMorseCode($0) }\nprint(morseMessages)\n```"
  },
  {
    "task": "Transform a list of JSON objects to XML strings using a map function.",
    "code": "```swift\nimport Foundation\n\nlet jsonObjects: [[String: Any]] = [\n    [\"name\": \"Alice\", \"age\": 30],\n    [\"name\": \"Bob\", \"age\": 25]\n]\n\nfunc jsonToXML(json: [String: Any]) -> String {\n    var xmlString = \"<item>\"\n    for (key, value) in json {\n        xmlString += \"<\\(key)>\\(value)</\\(key)>\"\n    }\n    xmlString += \"</item>\"\n    return xmlString\n}\n\nlet xmlStrings = jsonObjects.map(jsonToXML)\n```"
  },
  {
    "task": "Use map to extract the extension from each filename in a list.",
    "code": "```swift\nlet filenames = [\"document.pdf\", \"image.jpg\", \"archive.zip\"]\nlet extensions = filenames.map { $0.split(separator: \".\").last.map(String.init) ?? \"\" }\nprint(extensions)\n```"
  },
  {
    "task": "Convert a list of temperatures from Fahrenheit to Kelvin using map.",
    "code": "```swift\nlet fahrenheitTemperatures = [32.0, 68.0, 104.0, 212.0]\nlet kelvinTemperatures = fahrenheitTemperatures.map { ($0 - 32) * 5/9 + 273.15 }\n```"
  },
  {
    "task": "Use map to calculate the perimeter of each rectangle in a list of dimensions.",
    "code": "```swift\nlet dimensions = [(width: 5, height: 10), (width: 8, height: 12), (width: 15, height: 20)]\nlet perimeters = dimensions.map { 2 * ($0.width + $0.height) }\n```"
  },
  {
    "task": "Apply map to format a list of phone numbers into a standard format.",
    "code": "```swift\nlet phoneNumbers = [\"1234567890\", \"0987654321\", \"5556667777\"]\n\nlet formattedNumbers = phoneNumbers.map { number -> String in\n    let areaCode = number.prefix(3)\n    let centralOfficeCode = number.dropFirst(3).prefix(3)\n    let lineNumber = number.dropFirst(6)\n    return \"(\\(areaCode)) \\(centralOfficeCode)-\\(lineNumber)\"\n}\n\nprint(formattedNumbers)\n```"
  },
  {
    "task": "Use map to generate a hashed version of passwords from a list.",
    "code": "```swift\nimport Foundation\nimport CryptoKit\n\nfunc hashPassword(_ password: String) -> String {\n    let data = Data(password.utf8)\n    let hashed = SHA256.hash(data: data)\n    return hashed.map { String(format: \"%02x\", $0) }.joined()\n}\n\nlet passwords = [\"password1\", \"123456\", \"qwerty\"]\nlet hashedPasswords = passwords.map { hashPassword($0) }\n\nprint(hashedPasswords)\n```"
  },
  {
    "task": "Convert a list of text paragraphs to a word count using map.",
    "code": "```swift\nlet paragraphs = [\n    \"This is the first paragraph.\",\n    \"Here is another paragraph, a bit longer than the first.\",\n    \"The third paragraph is here, testing the map function.\"\n]\n\nlet wordCounts = paragraphs.map { $0.split(separator: \" \").count }\n\nprint(wordCounts)\n```"
  },
  {
    "task": "Use map to remove punctuation from each string in a list of sentences.",
    "code": "```swift\nlet sentences = [\"Hello, world!\", \"Swift is great.\", \"Let's code: Swift!\"]\n\nlet cleanedSentences = sentences.map { sentence in\n    sentence.filter { $0.isLetter || $0.isWhitespace }\n}\n\nprint(cleanedSentences)\n```"
  },
  {
    "task": "Transform a list of URLs to their base domain using a map function.",
    "code": "```swift\nimport Foundation\n\nlet urls = [\"https://www.example.com/path\", \"http://subdomain.example.org\", \"https://anotherdomain.com/page\"]\n\nlet domains = urls.compactMap { url -> String? in\n    guard let urlComponents = URLComponents(string: url) else { return nil }\n    return urlComponents.host\n}\n\nprint(domains)\n```"
  },
  {
    "task": "Use map to translate a list of expressions to their symbolic algebraic forms.",
    "code": "```swift\nimport Foundation\n\nlet expressions = [\"2x\", \"3y + 4\", \"5z - 7\"]\n\nlet symbolicAlgebraicForms = expressions.map { expression in\n    return \"Symbolic(\\(expression))\"\n}\n\nprint(symbolicAlgebraicForms)\n```"
  },
  {
    "task": "Apply map to convert a list of ASCII codes to corresponding characters.",
    "code": "```swift\nlet asciiCodes = [65, 66, 67, 68, 69] // Example ASCII codes\nlet characters = asciiCodes.map { Character(UnicodeScalar($0)!) }\nprint(characters) // Output: [\"A\", \"B\", \"C\", \"D\", \"E\"]\n```"
  },
  {
    "task": "Use map to transform a list of text strings to their lemmatized forms.",
    "code": "```swift\nimport NaturalLanguage\n\nlet texts = [\"running\", \"jumps\", \"easily\", \"faster\"]\n\nfunc lemmatize(_ text: String) -> String {\n    let tagger = NLTagger(tagSchemes: [.lemma])\n    tagger.string = text\n    let range = text.startIndex..<text.endIndex\n    let options: NLTagger.Options = [.omitPunctuation, .omitWhitespace]\n\n    let (_, lemma) = tagger.tag(at: text.startIndex, unit: .word, scheme: .lemma, options: options)\n    return lemma ?? text\n}\n\nlet lemmatizedTexts = texts.map { lemmatize($0) }\nprint(lemmatizedTexts)\n```"
  },
  {
    "task": "Convert a list of HTML strings to plain text using map.",
    "code": "```swift\nimport Foundation\n\nlet htmlStrings = [\"<p>Hello, World!</p>\", \"<div><strong>Swift</strong> is amazing!</div>\"]\n\nlet plainTexts = htmlStrings.map { html -> String in\n    guard let data = html.data(using: .utf8) else { return \"\" }\n    let options: [NSAttributedString.DocumentReadingOptionKey: Any] = [\n        .documentType: NSAttributedString.DocumentType.html,\n        .characterEncoding: String.Encoding.utf8.rawValue\n    ]\n    let attributedString = try? NSAttributedString(data: data, options: options, documentAttributes: nil)\n    return attributedString?.string ?? \"\"\n}\n\nprint(plainTexts)\n```"
  },
  {
    "task": "Use map to create a summary of each article in a list of texts.",
    "code": "```swift\nlet articles = [\n    \"Swift is a powerful and intuitive programming language for iOS, macOS, watchOS, and tvOS.\",\n    \"The best way to learn Swift is to write Swift code.\",\n    \"Functional programming in Swift can help you write clean and concise code.\"\n]\n\nlet summaries = articles.map { article in\n    article.split(separator: \" \").prefix(5).joined(separator: \" \")\n}\n\nprint(summaries)\n```"
  },
  {
    "task": "Transform a list of paths to their absolute paths using a map function.",
    "code": "```swift\nimport Foundation\n\nlet paths = [\"./file1.txt\", \"../file2.txt\", \"/absolute/path/file3.txt\"]\nlet absolutePaths = paths.map { NSString(string: $0).expandingTildeInPath }\nprint(absolutePaths)\n```"
  },
  {
    "task": "Use map to generate QR codes from a list of URLs.",
    "code": "```swift\nimport CoreImage\n\nfunc generateQRCodes(from urls: [String]) -> [CIImage?] {\n    return urls.map { url in\n        let data = url.data(using: .ascii)\n        guard let filter = CIFilter(name: \"CIQRCodeGenerator\") else { return nil }\n        filter.setValue(data, forKey: \"inputMessage\")\n        filter.setValue(\"Q\", forKey: \"inputCorrectionLevel\")\n        return filter.outputImage\n    }\n}\n\nlet urls = [\"https://example.com\", \"https://swift.org\"]\nlet qrCodes = generateQRCodes(from: urls)\n```"
  },
  {
    "task": "Convert a list of angles from degrees to radians using map.",
    "code": "```swift\nlet degrees = [0.0, 30.0, 45.0, 60.0, 90.0, 120.0, 180.0, 270.0, 360.0]\nlet radians = degrees.map { $0 * .pi / 180 }\nprint(radians)\n```"
  },
  {
    "task": "Use map to anonymize a list of IP addresses by masking parts of them.",
    "code": "```swift\nlet ipAddresses = [\"192.168.1.1\", \"10.0.0.1\", \"172.16.0.1\"]\n\nlet anonymizedIPs = ipAddresses.map { ip in\n    ip.split(separator: \".\").enumerated().map { index, segment in\n        index < 2 ? segment : \"xxx\"\n    }.joined(separator: \".\")\n}\n\nprint(anonymizedIPs)\n```"
  },
  {
    "task": "Transform a list of tuples by swapping their elements using a map function.",
    "code": "```swift\nlet tuples = [(1, \"a\"), (2, \"b\"), (3, \"c\")]\nlet swappedTuples = tuples.map { ($1, $0) }\n```"
  },
  {
    "task": "Use map to compute the greatest common divisor of pairs in a list of number pairs.",
    "code": "```swift\nfunc gcd(_ a: Int, _ b: Int) -> Int {\n    var a = a\n    var b = b\n    while b != 0 {\n        let temp = b\n        b = a % b\n        a = temp\n    }\n    return a\n}\n\nlet pairs = [(48, 18), (56, 98), (99, 121)]\nlet gcdResults = pairs.map { gcd($0.0, $0.1) }\n```"
  },
  {
    "task": "Convert a list of file paths to their directory names using map.",
    "code": "```swift\nimport Foundation\n\nlet filePaths = [\"/usr/local/bin/script.sh\", \"/home/user/documents/file.txt\", \"/var/log/syslog\"]\n\nlet directoryNames = filePaths.map { (filePath: String) -> String in\n    return (filePath as NSString).deletingLastPathComponent\n}\n\nprint(directoryNames)\n```"
  },
  {
    "task": "Use map to replace each vowel in a list of strings with a specific character.",
    "code": "```swift\nlet strings = [\"apple\", \"banana\", \"cherry\", \"date\"]\nlet vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\nlet replacementCharacter: Character = \"*\"\n\nlet result = strings.map { string in\n    String(string.map { character in\n        vowels.contains(character) ? replacementCharacter : character\n    })\n}\n\nprint(result)\n```"
  },
  {
    "task": "Transform a list of integers to their hexadecimal representations using map.",
    "code": "```swift\nlet integers = [10, 15, 255, 4096]\nlet hexStrings = integers.map { String($0, radix: 16) }\nprint(hexStrings)\n```"
  },
  {
    "task": "Use map to apply a transformation matrix to a list of 2D vectors.",
    "code": "```swift\nimport Foundation\n\nstruct Vector2D {\n    var x: Double\n    var y: Double\n}\n\nlet vectors: [Vector2D] = [\n    Vector2D(x: 1.0, y: 2.0),\n    Vector2D(x: 3.0, y: 4.0),\n    Vector2D(x: 5.0, y: 6.0)\n]\n\nlet transformationMatrix: [[Double]] = [\n    [0.0, -1.0],\n    [1.0, 0.0]\n]\n\nlet transformedVectors = vectors.map { vector in\n    Vector2D(\n        x: vector.x * transformationMatrix[0][0] + vector.y * transformationMatrix[0][1],\n        y: vector.x * transformationMatrix[1][0] + vector.y * transformationMatrix[1][1]\n    )\n}\n\nprint(transformedVectors)\n```"
  },
  {
    "task": "Convert a list of text strings to their phonetic alphabet equivalents using map.",
    "code": "```swift\nlet phoneticAlphabet: [String: String] = [\n    \"a\": \"Alpha\", \"b\": \"Bravo\", \"c\": \"Charlie\", \"d\": \"Delta\", \"e\": \"Echo\",\n    \"f\": \"Foxtrot\", \"g\": \"Golf\", \"h\": \"Hotel\", \"i\": \"India\", \"j\": \"Juliett\",\n    \"k\": \"Kilo\", \"l\": \"Lima\", \"m\": \"Mike\", \"n\": \"November\", \"o\": \"Oscar\",\n    \"p\": \"Papa\", \"q\": \"Quebec\", \"r\": \"Romeo\", \"s\": \"Sierra\", \"t\": \"Tango\",\n    \"u\": \"Uniform\", \"v\": \"Victor\", \"w\": \"Whiskey\", \"x\": \"X-ray\", \"y\": \"Yankee\", \"z\": \"Zulu\"\n]\n\nfunc toPhonetic(_ text: String) -> [String] {\n    return text.lowercased().compactMap { phoneticAlphabet[String($0)] }\n}\n\nlet words = [\"Swift\", \"Code\", \"Map\"]\nlet phoneticWords = words.map { toPhonetic($0) }\nprint(phoneticWords)\n```"
  },
  {
    "task": "Use map to determine if each word in a list is a palindrome, returning booleans.",
    "code": "```swift\nlet words = [\"racecar\", \"hello\", \"level\", \"world\", \"deified\"]\nlet palindromeCheck = words.map { $0 == String($0.reversed()) }\n```"
  },
  {
    "task": "Transform a list of dictionaries by renaming a specified key using a map function.",
    "code": "```swift\nlet originalList: [[String: Any]] = [\n    [\"oldKey\": \"value1\", \"anotherKey\": 1],\n    [\"oldKey\": \"value2\", \"anotherKey\": 2],\n    [\"oldKey\": \"value3\", \"anotherKey\": 3]\n]\n\nlet transformedList = originalList.map { dictionary in\n    var newDict = dictionary\n    if let value = newDict.removeValue(forKey: \"oldKey\") {\n        newDict[\"newKey\"] = value\n    }\n    return newDict\n}\n\nprint(transformedList)\n```"
  },
  {
    "task": "Use map to compute the logarithm of each number in a list.",
    "code": "```swift\nimport Foundation\n\nlet numbers = [1.0, 2.0, 3.0, 4.0, 5.0]\nlet logarithms = numbers.map { log($0) }\n```"
  },
  {
    "task": "Convert a list of image file paths to grayscale versions using map.",
    "code": "```swift\nimport UIKit\n\nfunc convertToGrayscale(imagePaths: [String]) -> [UIImage?] {\n    return imagePaths.map { path in\n        guard let image = UIImage(contentsOfFile: path),\n              let cgImage = image.cgImage else { return nil }\n        \n        let context = CIContext(options: nil)\n        let filter = CIFilter(name: \"CIPhotoEffectMono\")\n        filter?.setValue(CIImage(cgImage: cgImage), forKey: kCIInputImageKey)\n        \n        guard let outputImage = filter?.outputImage,\n              let cgOutputImage = context.createCGImage(outputImage, from: outputImage.extent) else { return nil }\n        \n        return UIImage(cgImage: cgOutputImage)\n    }\n}\n```"
  },
  {
    "task": "Use map to flatten a list of lists of strings into a single list of strings.",
    "code": "```swift\nlet listOfLists: [[String]] = [[\"Hello\", \"World\"], [\"Swift\", \"Programming\"], [\"Map\", \"Function\"]]\nlet flattenedList: [String] = listOfLists.flatMap { $0 }\n```"
  },
  {
    "task": "Transform a list of temperature readings to temperature anomalies using a map function.",
    "code": "```swift\nlet temperatureReadings = [23.4, 25.6, 24.1, 22.8, 26.0]\nlet averageTemperature = temperatureReadings.reduce(0, +) / Double(temperatureReadings.count)\n\nlet temperatureAnomalies = temperatureReadings.map { $0 - averageTemperature }\n```"
  }
]