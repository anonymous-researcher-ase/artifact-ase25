[
  {
    "task": "Write a program that prints numbers from 1 to 10 using a for loop.",
    "code": "```swift\nfor number in 1...10 {\n    print(number)\n}\n```"
  },
  {
    "task": "Create a loop that iterates over an array of names and prints each name.",
    "code": "```swift\nlet names = [\"Alice\", \"Bob\", \"Charlie\", \"Diana\"]\n\nfor name in names {\n    print(name)\n}\n```"
  },
  {
    "task": "Design a for loop to calculate the factorial of a given number.",
    "code": "```swift\nfunc factorial(of number: Int) -> Int {\n    var result = 1\n    for i in 1...number {\n        result *= i\n    }\n    return result\n}\n\nlet number = 5\nlet factorialResult = factorial(of: number)\nprint(\"Factorial of \\(number) is \\(factorialResult)\")\n```"
  },
  {
    "task": "Implement a program that uses a for loop to sum all even numbers between 1 and 100.",
    "code": "```swift\nvar sum = 0\nfor number in 1...100 {\n    if number % 2 == 0 {\n        sum += number\n    }\n}\nprint(sum)\n```"
  },
  {
    "task": "Use a for loop to generate and print the Fibonacci sequence up to 20 terms.",
    "code": "```swift\nvar a = 0\nvar b = 1\n\nfor _ in 0..<20 {\n    print(a)\n    let next = a + b\n    a = b\n    b = next\n}\n```"
  },
  {
    "task": "Construct a for loop that prints the multiplication table for a given number.",
    "code": "```swift\nlet number = 5\nlet range = 1...10\n\nfor i in range {\n    print(\"\\(number) x \\(i) = \\(number * i)\")\n}\n```"
  },
  {
    "task": "Write code to iterate through a list of student grades and print only those above a certain threshold.",
    "code": "```swift\nlet grades = [75, 82, 93, 67, 88, 79, 95]\nlet threshold = 80\n\nfor grade in grades {\n    if grade > threshold {\n        print(grade)\n    }\n}\n```"
  },
  {
    "task": "Create a for loop that appends the square of numbers 1 to 10 to a list.",
    "code": "```swift\nvar squares = [Int]()\nfor number in 1...10 {\n    squares.append(number * number)\n}\n```"
  },
  {
    "task": "Develop a for loop that reverses a given string.",
    "code": "```swift\nfunc reverseString(_ input: String) -> String {\n    var reversedString = \"\"\n    for character in input {\n        reversedString = String(character) + reversedString\n    }\n    return reversedString\n}\n\nlet originalString = \"Hello, World!\"\nlet reversed = reverseString(originalString)\nprint(reversed)\n```"
  },
  {
    "task": "Build a program that uses a for loop to print all elements in a 2D matrix.",
    "code": "```swift\nlet matrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\n\nfor row in matrix {\n    for element in row {\n        print(element)\n    }\n}\n```"
  },
  {
    "task": "Use a for loop to find the maximum value in an array of integers.",
    "code": "```swift\nlet numbers = [3, 5, 1, 8, 2, 10, 4]\nvar maxValue = numbers[0]\n\nfor number in numbers {\n    if number > maxValue {\n        maxValue = number\n    }\n}\n\nprint(\"The maximum value is \\(maxValue)\")\n```"
  },
  {
    "task": "Write a program that uses a for loop to print the characters of a string, one per line.",
    "code": "```swift\nlet myString = \"Hello, World!\"\n\nfor character in myString {\n    print(character)\n}\n```"
  },
  {
    "task": "Create a for loop that counts the number of vowels in a given sentence.",
    "code": "```swift\nlet sentence = \"This is an example sentence.\"\nlet vowels = \"aeiouAEIOU\"\nvar vowelCount = 0\n\nfor character in sentence {\n    if vowels.contains(character) {\n        vowelCount += 1\n    }\n}\n\nprint(\"Number of vowels: \\(vowelCount)\")\n```"
  },
  {
    "task": "Implement a for loop to check if a number is prime by testing divisibility.",
    "code": "```swift\nfunc isPrime(_ number: Int) -> Bool {\n    if number <= 1 { return false }\n    if number <= 3 { return true }\n    \n    for i in 2...Int(Double(number).squareRoot()) {\n        if number % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n// Example usage\nlet number = 29\nprint(\"\\(number) is prime: \\(isPrime(number))\")\n```"
  },
  {
    "task": "Design a for loop that prints a pyramid pattern of asterisks with a given height.",
    "code": "```swift\nfunc printPyramid(height: Int) {\n    for i in 1...height {\n        let spaces = String(repeating: \" \", count: height - i)\n        let stars = String(repeating: \"*\", count: 2 * i - 1)\n        print(spaces + stars)\n    }\n}\n\nprintPyramid(height: 5)\n```"
  },
  {
    "task": "Write a program that uses a for loop to calculate the sum of digits of a number.",
    "code": "```swift\nlet number = 12345\nvar sumOfDigits = 0\n\nfor digit in String(number) {\n    if let digitValue = Int(String(digit)) {\n        sumOfDigits += digitValue\n    }\n}\n\nprint(sumOfDigits)\n```"
  },
  {
    "task": "Construct a for loop to flatten a list of lists into a single list.",
    "code": "```swift\nlet listOfLists = [[1, 2, 3], [4, 5], [6]]\nvar flatList = [Int]()\n\nfor sublist in listOfLists {\n    for item in sublist {\n        flatList.append(item)\n    }\n}\n\nprint(flatList)\n```"
  },
  {
    "task": "Use a for loop to generate a list of random numbers and print them.",
    "code": "```swift\nimport Foundation\n\nvar randomNumbers: [Int] = []\n\nfor _ in 0..<10 {\n    let randomNumber = Int.random(in: 1...100)\n    randomNumbers.append(randomNumber)\n}\n\nfor number in randomNumbers {\n    print(number)\n}\n```"
  },
  {
    "task": "Create a for loop that iterates through a dictionary and prints its keys and values.",
    "code": "```swift\nlet myDictionary: [String: String] = [\"one\": \"1\", \"two\": \"2\", \"three\": \"3\"]\n\nfor (key, value) in myDictionary {\n    print(\"Key: \\(key), Value: \\(value)\")\n}\n```"
  },
  {
    "task": "Develop a for loop that counts down from 10 to 1 and prints each number.",
    "code": "```swift\nfor number in (1...10).reversed() {\n    print(number)\n}\n```"
  },
  {
    "task": "Write code to multiply each element in an array by 2 using a for loop.",
    "code": "```swift\nvar numbers = [1, 2, 3, 4, 5]\nfor i in 0..<numbers.count {\n    numbers[i] *= 2\n}\n```"
  },
  {
    "task": "Create a for loop that calculates the average of numbers in a list.",
    "code": "```swift\nlet numbers = [10, 20, 30, 40, 50]\nvar sum = 0\n\nfor number in numbers {\n    sum += number\n}\n\nlet average = Double(sum) / Double(numbers.count)\nprint(\"Average: \\(average)\")\n```"
  },
  {
    "task": "Implement a for loop to find duplicate elements in an array.",
    "code": "```swift\nlet array = [1, 2, 3, 2, 4, 5, 5, 6]\nvar duplicates = [Int]()\nvar seen = Set<Int>()\n\nfor element in array {\n    if seen.contains(element) {\n        if !duplicates.contains(element) {\n            duplicates.append(element)\n        }\n    } else {\n        seen.insert(element)\n    }\n}\n\nprint(duplicates)\n```"
  },
  {
    "task": "Design a for loop that removes all occurrences of a specific element from a list.",
    "code": "```swift\nfunc removeOccurrences(of element: Int, from list: [Int]) -> [Int] {\n    var result: [Int] = []\n    for item in list {\n        if item != element {\n            result.append(item)\n        }\n    }\n    return result\n}\n\n// Example usage:\nlet originalList = [1, 2, 3, 4, 2, 5]\nlet elementToRemove = 2\nlet updatedList = removeOccurrences(of: elementToRemove, from: originalList)\nprint(updatedList) // Output: [1, 3, 4, 5]\n```"
  },
  {
    "task": "Use a for loop to simulate rolling a dice 100 times and count the occurrences of each face.",
    "code": "```swift\nimport Foundation\n\nvar diceCounts = [Int: Int]()\n\nfor _ in 1...100 {\n    let roll = Int.random(in: 1...6)\n    diceCounts[roll, default: 0] += 1\n}\n\nfor face in 1...6 {\n    let count = diceCounts[face, default: 0]\n    print(\"Face \\(face): \\(count) times\")\n}\n```"
  },
  {
    "task": "Write a for loop that prints all the prime numbers between 1 and 50.",
    "code": "```swift\nfunc isPrime(_ number: Int) -> Bool {\n    if number <= 1 { return false }\n    if number <= 3 { return true }\n    if number % 2 == 0 || number % 3 == 0 { return false }\n    var i = 5\n    while i * i <= number {\n        if number % i == 0 || number % (i + 2) == 0 { return false }\n        i += 6\n    }\n    return true\n}\n\nfor number in 1...50 {\n    if isPrime(number) {\n        print(number)\n    }\n}\n```"
  },
  {
    "task": "Develop a for loop that extracts all the uppercase letters from a string.",
    "code": "```swift\nlet inputString = \"ExampleStringWithUpperCaseLetters\"\nvar uppercaseLetters = \"\"\n\nfor character in inputString {\n    if character.isUppercase {\n        uppercaseLetters.append(character)\n    }\n}\n\nprint(uppercaseLetters)\n```"
  },
  {
    "task": "Create a for loop that checks if a list is sorted in ascending order.",
    "code": "```swift\nfunc isSortedAscending(_ list: [Int]) -> Bool {\n    for i in 0..<list.count - 1 {\n        if list[i] > list[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nlet numbers = [1, 2, 3, 4, 5]\nlet result = isSortedAscending(numbers)\nprint(\"Is the list sorted in ascending order? \\(result)\")\n```"
  },
  {
    "task": "Implement a for loop to generate a list of the first 10 square numbers.",
    "code": "```swift\nvar squareNumbers: [Int] = []\nfor i in 1...10 {\n    squareNumbers.append(i * i)\n}\n```"
  },
  {
    "task": "Write code to print all the elements of a list that are greater than a given number using a for loop.",
    "code": "```swift\nlet numbers = [1, 5, 8, 10, 15, 20]\nlet threshold = 10\n\nfor number in numbers {\n    if number > threshold {\n        print(number)\n    }\n}\n```"
  },
  {
    "task": "Construct a for loop that finds the smallest number in an array.",
    "code": "```swift\nlet numbers = [34, 15, 88, 2, 0, -5, 76]\nvar smallest = numbers[0]\n\nfor number in numbers {\n    if number < smallest {\n        smallest = number\n    }\n}\n\nprint(\"The smallest number is \\(smallest)\")\n```"
  },
  {
    "task": "Develop a for loop that prints the first N lines of Pascal's Triangle.",
    "code": "```swift\nfunc printPascalsTriangle(lines: Int) {\n    for line in 0..<lines {\n        var coefficient = 1\n        for i in 0...line {\n            print(coefficient, terminator: \" \")\n            coefficient = coefficient * (line - i) / (i + 1)\n        }\n        print()\n    }\n}\n\nlet N = 5\nprintPascalsTriangle(lines: N)\n```"
  },
  {
    "task": "Create a for loop that calculates the product of all elements in a list.",
    "code": "```swift\nlet numbers = [1, 2, 3, 4, 5]\nvar product = 1\n\nfor number in numbers {\n    product *= number\n}\n\nprint(product)\n```"
  },
  {
    "task": "Use a for loop to print numbers from 1 to 100, but replace multiples of 3 with 'Fizz'.",
    "code": "```swift\nfor number in 1...100 {\n    if number % 3 == 0 {\n        print(\"Fizz\")\n    } else {\n        print(number)\n    }\n}\n```"
  },
  {
    "task": "Write a for loop that iterates over a string and counts the number of words.",
    "code": "```swift\nlet inputString = \"Sample text with several words\"\nvar wordCount = 0\nvar isInsideWord = false\n\nfor character in inputString {\n    if character.isWhitespace {\n        if isInsideWord {\n            isInsideWord = false\n        }\n    } else {\n        if !isInsideWord {\n            wordCount += 1\n            isInsideWord = true\n        }\n    }\n}\n\nprint(\"Number of words: \\(wordCount)\")\n```"
  },
  {
    "task": "Design a for loop that prints numbers from 1 to 50, but skips numbers divisible by 5.",
    "code": "```swift\nfor number in 1...50 {\n    if number % 5 != 0 {\n        print(number)\n    }\n}\n```"
  },
  {
    "task": "Implement a for loop that prints a checkerboard pattern of asterisks.",
    "code": "```swift\nlet size = 8\nfor i in 0..<size {\n    var line = \"\"\n    for j in 0..<size {\n        if (i + j) % 2 == 0 {\n            line += \"*\"\n        } else {\n            line += \" \"\n        }\n    }\n    print(line)\n}\n```"
  },
  {
    "task": "Create a for loop that finds the index of a target value in a list.",
    "code": "```swift\nfunc findIndex(of target: Int, in list: [Int]) -> Int? {\n    for index in 0..<list.count {\n        if list[index] == target {\n            return index\n        }\n    }\n    return nil\n}\n\nlet numbers = [3, 8, 2, 5, 9]\nif let index = findIndex(of: 5, in: numbers) {\n    print(\"Index of target is \\(index)\")\n} else {\n    print(\"Target not found\")\n}\n```"
  },
  {
    "task": "Use a for loop to concatenate a list of strings into a single string.",
    "code": "```swift\nlet stringList = [\"Hello\", \"world\", \"this\", \"is\", \"Swift\"]\nvar concatenatedString = \"\"\n\nfor string in stringList {\n    concatenatedString += string\n}\n\nprint(concatenatedString)\n```"
  },
  {
    "task": "Develop a for loop that rotates a list to the right by a given number of positions.",
    "code": "```swift\nfunc rotateRight(_ array: [Int], by positions: Int) -> [Int] {\n    guard !array.isEmpty else { return array }\n    let count = array.count\n    let shift = positions % count\n    var rotatedArray = Array(repeating: 0, count: count)\n\n    for i in 0..<count {\n        rotatedArray[(i + shift) % count] = array[i]\n    }\n    \n    return rotatedArray\n}\n\n// Example usage\nlet array = [1, 2, 3, 4, 5]\nlet rotated = rotateRight(array, by: 2)\nprint(rotated)  // Output: [4, 5, 1, 2, 3]\n```"
  },
  {
    "task": "Write code that uses a for loop to insert an element into a sorted list while maintaining order.",
    "code": "```swift\nfunc insertIntoSortedList(_ list: [Int], element: Int) -> [Int] {\n    var sortedList = list\n    var inserted = false\n    \n    for i in 0..<sortedList.count {\n        if element < sortedList[i] {\n            sortedList.insert(element, at: i)\n            inserted = true\n            break\n        }\n    }\n    \n    if !inserted {\n        sortedList.append(element)\n    }\n    \n    return sortedList\n}\n\nlet sortedList = [1, 3, 4, 7, 9]\nlet newElement = 5\nlet updatedList = insertIntoSortedList(sortedList, element: newElement)\nprint(updatedList)\n```"
  },
  {
    "task": "Implement a for loop that counts the frequency of each character in a string.",
    "code": "```swift\nfunc characterFrequency(in text: String) -> [Character: Int] {\n    var frequency: [Character: Int] = [:]\n    for character in text {\n        frequency[character, default: 0] += 1\n    }\n    return frequency\n}\n\n// Example usage:\nlet text = \"hello world\"\nlet frequencies = characterFrequency(in: text)\nprint(frequencies)\n```"
  },
  {
    "task": "Create a for loop that prints all subsets of a given set.",
    "code": "```swift\nlet set = [1, 2, 3]\nlet numberOfSubsets = 1 << set.count\n\nfor i in 0..<numberOfSubsets {\n    var subset: [Int] = []\n    for j in 0..<set.count {\n        if (i & (1 << j)) != 0 {\n            subset.append(set[j])\n        }\n    }\n    print(subset)\n}\n```"
  },
  {
    "task": "Design a for loop to generate all permutations of a string.",
    "code": "```swift\nfunc permute(_ str: String) -> [String] {\n    var result = [String]()\n    var chars = Array(str)\n    \n    func generate(_ n: Int) {\n        if n == 1 {\n            result.append(String(chars))\n            return\n        }\n        \n        for i in 0..<n {\n            generate(n - 1)\n            if n % 2 == 0 {\n                chars.swapAt(i, n - 1)\n            } else {\n                chars.swapAt(0, n - 1)\n            }\n        }\n    }\n    \n    generate(chars.count)\n    return result\n}\n\n// Example usage\nlet permutations = permute(\"abc\")\nprint(permutations)\n```"
  },
  {
    "task": "Write a for loop that sorts an array in descending order.",
    "code": "```swift\nvar array = [5, 2, 9, 1, 5, 6]\n\nfor i in 0..<array.count {\n    for j in 0..<array.count - i - 1 {\n        if array[j] < array[j + 1] {\n            let temp = array[j]\n            array[j] = array[j + 1]\n            array[j + 1] = temp\n        }\n    }\n}\n\nprint(array)\n```"
  },
  {
    "task": "Use a for loop to generate a sequence of random characters and print them.",
    "code": "```swift\nimport Foundation\n\nlet length = 10\nlet characters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\n\nfor _ in 0..<length {\n    if let randomCharacter = characters.randomElement() {\n        print(randomCharacter, terminator: \"\")\n    }\n}\n```"
  },
  {
    "task": "Construct a for loop that finds the common elements between two lists.",
    "code": "```swift\nlet list1 = [1, 2, 3, 4, 5]\nlet list2 = [4, 5, 6, 7, 8]\nvar commonElements: [Int] = []\n\nfor element in list1 {\n    if list2.contains(element) {\n        commonElements.append(element)\n    }\n}\n\nprint(commonElements)\n```"
  },
  {
    "task": "Develop a for loop to calculate and print the cumulative sum of a list.",
    "code": "```swift\nlet numbers = [1, 2, 3, 4, 5]\nvar cumulativeSum = 0\n\nfor number in numbers {\n    cumulativeSum += number\n    print(cumulativeSum)\n}\n```"
  },
  {
    "task": "Create a for loop that prints a diamond pattern using asterisks.",
    "code": "```swift\nimport Foundation\n\nfunc printDiamond(n: Int) {\n    if n <= 0 { return }\n    \n    for i in 0..<n {\n        for _ in 0..<(n - i - 1) {\n            print(\" \", terminator: \"\")\n        }\n        for _ in 0..<(2 * i + 1) {\n            print(\"*\", terminator: \"\")\n        }\n        print(\"\")\n    }\n    \n    for i in (0..<(n - 1)).reversed() {\n        for _ in 0..<(n - i - 1) {\n            print(\" \", terminator: \"\")\n        }\n        for _ in 0..<(2 * i + 1) {\n            print(\"*\", terminator: \"\")\n        }\n        print(\"\")\n    }\n}\n\nlet numberOfRows = 5\nprintDiamond(n: numberOfRows)\n```"
  },
  {
    "task": "Write a for loop that simulates a countdown timer from a specified number of seconds.",
    "code": "```swift\nlet countdownStart = 10 // Specify the number of seconds for the countdown\nfor second in stride(from: countdownStart, through: 0, by: -1) {\n    print(\"Countdown: \\(second) seconds\")\n}\n```"
  },
  {
    "task": "Use a for loop to print the transpose of a matrix.",
    "code": "```swift\nlet matrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\n\nlet rows = matrix.count\nlet cols = matrix[0].count\n\nfor i in 0..<cols {\n    for j in 0..<rows {\n        print(matrix[j][i], terminator: \" \")\n    }\n    print()\n}\n```"
  },
  {
    "task": "Implement a for loop that reverses the order of words in a sentence.",
    "code": "```swift\nlet sentence = \"Hello world this is Swift\"\nlet words = sentence.split(separator: \" \")\nvar reversedSentence = \"\"\n\nfor word in words.reversed() {\n    reversedSentence += word + \" \"\n}\n\nreversedSentence = String(reversedSentence.dropLast())\nprint(reversedSentence)\n```"
  },
  {
    "task": "Create a for loop that deletes elements from a list that are less than a given value.",
    "code": "```swift\nvar numbers = [5, 8, 12, 3, 7, 10]\nlet threshold = 6\nvar filteredNumbers = [Int]()\n\nfor number in numbers {\n    if number >= threshold {\n        filteredNumbers.append(number)\n    }\n}\n\nnumbers = filteredNumbers\n```"
  },
  {
    "task": "Design a for loop to merge two sorted lists into a single sorted list.",
    "code": "```swift\nfunc mergeSortedLists(_ list1: [Int], _ list2: [Int]) -> [Int] {\n    var mergedList: [Int] = []\n    var i = 0\n    var j = 0\n    \n    while i < list1.count && j < list2.count {\n        if list1[i] < list2[j] {\n            mergedList.append(list1[i])\n            i += 1\n        } else {\n            mergedList.append(list2[j])\n            j += 1\n        }\n    }\n    \n    for k in i..<list1.count {\n        mergedList.append(list1[k])\n    }\n    \n    for k in j..<list2.count {\n        mergedList.append(list2[k])\n    }\n    \n    return mergedList\n}\n```"
  },
  {
    "task": "Write a for loop that calculates the power of a number using repeated multiplication.",
    "code": "```swift\nfunc power(base: Int, exponent: Int) -> Int {\n    var result = 1\n    for _ in 1...exponent {\n        result *= base\n    }\n    return result\n}\n\nlet base = 2\nlet exponent = 3\nlet result = power(base: base, exponent: exponent)\nprint(\"\\(base) to the power of \\(exponent) is \\(result)\")\n```"
  },
  {
    "task": "Use a for loop to find the longest word in a list of words.",
    "code": "```swift\nlet words = [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]\nvar longestWord = \"\"\n\nfor word in words {\n    if word.count > longestWord.count {\n        longestWord = word\n    }\n}\n\nprint(\"The longest word is: \\(longestWord)\")\n```"
  },
  {
    "task": "Develop a for loop that sorts a list of tuples based on the second element.",
    "code": "```swift\nlet listOfTuples = [(3, \"banana\"), (1, \"apple\"), (2, \"cherry\"), (4, \"date\")]\nlet sortedList = listOfTuples.sorted { $0.1 < $1.1 }\nfor tuple in sortedList {\n    print(tuple)\n}\n```"
  },
  {
    "task": "Create a for loop that replicates each character in a string a given number of times.",
    "code": "```swift\nfunc replicateCharacters(in string: String, times: Int) -> String {\n    var result = \"\"\n    for character in string {\n        for _ in 0..<times {\n            result.append(character)\n        }\n    }\n    return result\n}\n\nlet originalString = \"hello\"\nlet replicatedString = replicateCharacters(in: originalString, times: 3)\nprint(replicatedString)\n```"
  },
  {
    "task": "Construct a for loop that replaces spaces in a string with hyphens.",
    "code": "```swift\nlet inputString = \"Replace spaces in this string\"\nvar outputString = \"\"\n\nfor character in inputString {\n    if character == \" \" {\n        outputString.append(\"-\")\n    } else {\n        outputString.append(character)\n    }\n}\n\nprint(outputString)\n```"
  },
  {
    "task": "Design a for loop to find the intersection of two sets.",
    "code": "```swift\nlet set1: Set<Int> = [1, 2, 3, 4, 5]\nlet set2: Set<Int> = [3, 4, 5, 6, 7]\nvar intersection: Set<Int> = []\n\nfor element in set1 {\n    if set2.contains(element) {\n        intersection.insert(element)\n    }\n}\n\nprint(intersection)\n```"
  },
  {
    "task": "Write a for loop that generates a list of prime numbers up to a given number.",
    "code": "```swift\nfunc generatePrimes(upTo maxNumber: Int) -> [Int] {\n    guard maxNumber >= 2 else { return [] }\n    var primes: [Int] = []\n    for number in 2...maxNumber {\n        var isPrime = true\n        for divisor in 2..<number {\n            if number % divisor == 0 {\n                isPrime = false\n                break\n            }\n        }\n        if isPrime {\n            primes.append(number)\n        }\n    }\n    return primes\n}\n\nlet primes = generatePrimes(upTo: 30)\nprint(primes)\n```"
  },
  {
    "task": "Use a for loop to implement a simple text-based progress bar.",
    "code": "```swift\nlet totalSteps = 10\nfor step in 1...totalSteps {\n    let progressBar = String(repeating: \"#\", count: step) + String(repeating: \"-\", count: totalSteps - step)\n    print(\"[\\(progressBar)] \\(step * 10)%\")\n    // Simulate some work with a delay\n    Thread.sleep(forTimeInterval: 0.5)\n}\n```"
  },
  {
    "task": "Implement a for loop that finds and prints all palindromic numbers between 10 and 200.",
    "code": "```swift\nfor number in 10...200 {\n    let numberString = String(number)\n    if numberString == String(numberString.reversed()) {\n        print(number)\n    }\n}\n```"
  },
  {
    "task": "Create a for loop that multiplies corresponding elements of two lists and stores the result.",
    "code": "```swift\nlet list1 = [1, 2, 3, 4, 5]\nlet list2 = [6, 7, 8, 9, 10]\nvar result = [Int]()\n\nfor i in 0..<min(list1.count, list2.count) {\n    result.append(list1[i] * list2[i])\n}\n```"
  },
  {
    "task": "Develop a for loop that finds the difference between the largest and smallest numbers in a list.",
    "code": "```swift\nlet numbers = [3, 7, 2, 9, 5]\nvar minNumber = Int.max\nvar maxNumber = Int.min\n\nfor number in numbers {\n    if number < minNumber {\n        minNumber = number\n    }\n    if number > maxNumber {\n        maxNumber = number\n    }\n}\n\nlet difference = maxNumber - minNumber\nprint(\"Difference: \\(difference)\")\n```"
  },
  {
    "task": "Write a for loop that prints numbers from 1 to 100, replacing multiples of 5 with 'Buzz'.",
    "code": "```swift\nfor i in 1...100 {\n    if i % 5 == 0 {\n        print(\"Buzz\")\n    } else {\n        print(i)\n    }\n}\n```"
  },
  {
    "task": "Use a for loop to convert a list of integers into their binary representation.",
    "code": "```swift\nlet integers = [1, 2, 3, 4, 5]\nvar binaryRepresentations: [String] = []\n\nfor number in integers {\n    binaryRepresentations.append(String(number, radix: 2))\n}\n\nprint(binaryRepresentations)\n```"
  },
  {
    "task": "Design a for loop that fills a 2D array with consecutive numbers in a spiral pattern.",
    "code": "```swift\nfunc fillSpiralMatrix(_ n: Int) -> [[Int]] {\n    var matrix = Array(repeating: Array(repeating: 0, count: n), count: n)\n    var num = 1\n    var left = 0, right = n - 1, top = 0, bottom = n - 1\n\n    while left <= right && top <= bottom {\n        for i in left...right {\n            matrix[top][i] = num\n            num += 1\n        }\n        top += 1\n        \n        for i in top...bottom {\n            matrix[i][right] = num\n            num += 1\n        }\n        right -= 1\n        \n        if top <= bottom {\n            for i in stride(from: right, through: left, by: -1) {\n                matrix[bottom][i] = num\n                num += 1\n            }\n            bottom -= 1\n        }\n        \n        if left <= right {\n            for i in stride(from: bottom, through: top, by: -1) {\n                matrix[i][left] = num\n                num += 1\n            }\n            left += 1\n        }\n    }\n    \n    return matrix\n}\n\nlet size = 4\nlet spiralMatrix = fillSpiralMatrix(size)\nfor row in spiralMatrix {\n    print(row)\n}\n```"
  },
  {
    "task": "Create a for loop that iterates over a list and removes duplicates.",
    "code": "```swift\nlet list = [1, 2, 2, 3, 4, 4, 5]\nvar uniqueSet: Set<Int> = []\nvar uniqueList: [Int] = []\n\nfor item in list {\n    if !uniqueSet.contains(item) {\n        uniqueSet.insert(item)\n        uniqueList.append(item)\n    }\n}\n\nprint(uniqueList)\n```"
  },
  {
    "task": "Implement a for loop to calculate the dot product of two vectors.",
    "code": "```swift\nfunc dotProduct(vectorA: [Int], vectorB: [Int]) -> Int {\n    var result = 0\n    for i in 0..<vectorA.count {\n        result += vectorA[i] * vectorB[i]\n    }\n    return result\n}\n\n// Example usage:\nlet vectorA = [1, 2, 3]\nlet vectorB = [4, 5, 6]\nlet product = dotProduct(vectorA: vectorA, vectorB: vectorB)\nprint(product) // Output: 32\n```"
  },
  {
    "task": "Write a for loop that prints a sequence of numbers in reverse order.",
    "code": "```swift\nfor number in (1...10).reversed() {\n    print(number)\n}\n```"
  },
  {
    "task": "Develop a for loop that computes the greatest common divisor (GCD) of two numbers.",
    "code": "```swift\nfunc gcd(_ a: Int, _ b: Int) -> Int {\n    var gcdValue = 1\n    let minValue = min(a, b)\n    \n    for i in 1...minValue {\n        if a % i == 0 && b % i == 0 {\n            gcdValue = i\n        }\n    }\n    \n    return gcdValue\n}\n\nlet number1 = 48\nlet number2 = 18\nlet result = gcd(number1, number2)\nprint(\"GCD of \\(number1) and \\(number2) is \\(result)\")\n```"
  },
  {
    "task": "Construct a for loop that prints a square pattern of numbers with a given side length.",
    "code": "```swift\nlet sideLength = 5\n\nfor _ in 0..<sideLength {\n    for j in 1...sideLength {\n        print(j, terminator: \" \")\n    }\n    print()\n}\n```"
  },
  {
    "task": "Create a for loop that shifts all elements of a list to the left by one position.",
    "code": "```swift\nvar numbers = [1, 2, 3, 4, 5]\n\nif !numbers.isEmpty {\n    let firstElement = numbers[0]\n    for i in 0..<numbers.count - 1 {\n        numbers[i] = numbers[i + 1]\n    }\n    numbers[numbers.count - 1] = firstElement\n}\n\nprint(numbers)\n```"
  },
  {
    "task": "Use a for loop to print the first 20 triangular numbers.",
    "code": "```swift\nfor n in 1...20 {\n    let triangularNumber = n * (n + 1) / 2\n    print(triangularNumber)\n}\n```"
  },
  {
    "task": "Write a for loop that finds the first repeating character in a string.",
    "code": "```swift\nfunc firstRepeatingCharacter(in string: String) -> Character? {\n    var seenCharacters: Set<Character> = []\n    for character in string {\n        if seenCharacters.contains(character) {\n            return character\n        }\n        seenCharacters.insert(character)\n    }\n    return nil\n}\n\n// Example usage:\nif let repeatingChar = firstRepeatingCharacter(in: \"example\") {\n    print(\"First repeating character: \\(repeatingChar)\")\n} else {\n    print(\"No repeating characters found.\")\n}\n```"
  },
  {
    "task": "Design a for loop that transforms a list of temperatures from Celsius to Fahrenheit.",
    "code": "```swift\nlet celsiusTemperatures = [0.0, 10.0, 20.0, 30.0, 40.0]\nvar fahrenheitTemperatures = [Double]()\n\nfor celsius in celsiusTemperatures {\n    let fahrenheit = celsius * 9 / 5 + 32\n    fahrenheitTemperatures.append(fahrenheit)\n}\n\nprint(fahrenheitTemperatures)\n```"
  },
  {
    "task": "Implement a for loop to determine if a string is an isogram.",
    "code": "```swift\nfunc isIsogram(_ input: String) -> Bool {\n    var seenCharacters = Set<Character>()\n    for character in input.lowercased() {\n        if seenCharacters.contains(character) {\n            return false\n        }\n        seenCharacters.insert(character)\n    }\n    return true\n}\n\n// Example usage:\n// let result = isIsogram(\"Dermatoglyphics\")\n// print(result) // true\n```"
  },
  {
    "task": "Use a for loop to create a histogram from a list of integers.",
    "code": "```swift\nlet numbers = [1, 3, 2, 5, 4]\n\nfor value in numbers {\n    print(String(repeating: \"*\", count: value))\n}\n```"
  },
  {
    "task": "Create a for loop that prints the indexes of all occurrences of a particular element in a list.",
    "code": "```swift\nlet list = [1, 2, 3, 2, 4, 2, 5]\nlet elementToFind = 2\n\nfor (index, element) in list.enumerated() {\n    if element == elementToFind {\n        print(index)\n    }\n}\n```"
  },
  {
    "task": "Write a for loop that checks if a given string is a palindrome.",
    "code": "```swift\nfunc isPalindrome(_ string: String) -> Bool {\n    let characters = Array(string)\n    let count = characters.count\n    for i in 0..<count / 2 {\n        if characters[i] != characters[count - i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\nlet testString = \"radar\"\nprint(isPalindrome(testString))\n```"
  },
  {
    "task": "Develop a for loop to simulate the behavior of a simple finite state machine.",
    "code": "```swift\nenum State {\n    case start\n    case middle\n    case end\n}\n\nvar currentState = State.start\n\nfor _ in 0..<3 {\n    switch currentState {\n    case .start:\n        print(\"State: Start\")\n        currentState = .middle\n    case .middle:\n        print(\"State: Middle\")\n        currentState = .end\n    case .end:\n        print(\"State: End\")\n        currentState = .start\n    }\n}\n```"
  },
  {
    "task": "Design a for loop that finds the sum of all odd numbers in a list.",
    "code": "```swift\nlet numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nvar sumOfOddNumbers = 0\n\nfor number in numbers {\n    if number % 2 != 0 {\n        sumOfOddNumbers += number\n    }\n}\n\nprint(sumOfOddNumbers)\n```"
  },
  {
    "task": "Use a for loop to count how many words start with a vowel in a given sentence.",
    "code": "```swift\nlet sentence = \"Example sentence with a few words starting with vowels\"\nlet vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"]\nvar count = 0\n\nlet words = sentence.split(separator: \" \")\n\nfor word in words {\n    if let firstChar = word.first, vowels.contains(firstChar) {\n        count += 1\n    }\n}\n\nprint(count)\n```"
  },
  {
    "task": "Implement a for loop that sorts a list of strings by their length.",
    "code": "```swift\nvar strings = [\"apple\", \"banana\", \"kiwi\", \"grape\", \"strawberry\"]\n\nfor i in 0..<strings.count {\n    for j in 0..<(strings.count - i - 1) {\n        if strings[j].count > strings[j + 1].count {\n            let temp = strings[j]\n            strings[j] = strings[j + 1]\n            strings[j + 1] = temp\n        }\n    }\n}\n\nprint(strings)\n```"
  },
  {
    "task": "Write a for loop that prints the factorial of numbers from 1 to 10.",
    "code": "```swift\nfor number in 1...10 {\n    var factorial = 1\n    for i in 1...number {\n        factorial *= i\n    }\n    print(\"Factorial of \\(number) is \\(factorial)\")\n}\n```"
  },
  {
    "task": "Create a for loop that replaces all instances of a substring in a string with another substring.",
    "code": "```swift\nfunc replaceSubstring(in string: String, target: String, with replacement: String) -> String {\n    var result = string\n    let targetCount = target.count\n    let range = result.startIndex..<result.endIndex\n    var startIndex = range.lowerBound\n    \n    while let range = result.range(of: target, options: [], range: startIndex..<range.upperBound) {\n        result.replaceSubrange(range, with: replacement)\n        startIndex = result.index(range.lowerBound, offsetBy: replacement.count)\n    }\n    \n    return result\n}\n\nlet originalString = \"This is the original string with substring.\"\nlet targetSubstring = \"substring\"\nlet replacementSubstring = \"newstring\"\nlet newString = replaceSubstring(in: originalString, target: targetSubstring, with: replacementSubstring)\nprint(newString)\n```"
  },
  {
    "task": "Develop a for loop that squares each element in a list of numbers.",
    "code": "```swift\nlet numbers = [1, 2, 3, 4, 5]\nvar squaredNumbers = [Int]()\n\nfor number in numbers {\n    squaredNumbers.append(number * number)\n}\n\nprint(squaredNumbers)\n```"
  },
  {
    "task": "Use a for loop to reverse the order of elements in an array.",
    "code": "```swift\nvar array = [1, 2, 3, 4, 5]\nvar reversedArray = [Int]()\n\nfor element in array.reversed() {\n    reversedArray.append(element)\n}\n\nprint(reversedArray)\n```"
  },
  {
    "task": "Implement a for loop that tests if two strings are anagrams of each other.",
    "code": "```swift\nfunc areAnagrams(_ string1: String, _ string2: String) -> Bool {\n    guard string1.count == string2.count else {\n        return false\n    }\n    \n    let sortedString1 = string1.sorted()\n    let sortedString2 = string2.sorted()\n    \n    for i in 0..<sortedString1.count {\n        if sortedString1[i] != sortedString2[i] {\n            return false\n        }\n    }\n    \n    return true\n}\n\n// Example usage\nlet result = areAnagrams(\"listen\", \"silent\")\nprint(result) // Output: true\n```"
  },
  {
    "task": "Design a for loop to find and print all Armstrong numbers between 100 and 999.",
    "code": "```swift\nfor number in 100...999 {\n    let digits = String(number).compactMap { Int(String($0)) }\n    let sumOfCubes = digits.reduce(0) { $0 + Int(pow(Double($1), 3)) }\n    if sumOfCubes == number {\n        print(number)\n    }\n}\n```"
  }
]