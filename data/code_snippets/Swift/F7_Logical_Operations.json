[
  {
    "task": "Create a function that takes two boolean inputs and returns true if both are true using logical AND.",
    "code": "```swift\nfunc bothAreTrue(_ a: Bool, _ b: Bool) -> Bool {\n    return a && b\n}\n```"
  },
  {
    "task": "Write a script to check if either of two given conditions are met using logical OR.",
    "code": "```swift\nlet condition1 = true\nlet condition2 = false\n\nif condition1 || condition2 {\n    print(\"At least one condition is met.\")\n} else {\n    print(\"Neither condition is met.\")\n}\n```"
  },
  {
    "task": "Develop a program that negates a boolean variable using logical NOT.",
    "code": "```swift\nvar booleanValue: Bool = true\nbooleanValue = !booleanValue\n```"
  },
  {
    "task": "Implement a feature that determines if a number is within a specific range using logical operators.",
    "code": "```swift\nfunc isNumberInRange(number: Int, lowerBound: Int, upperBound: Int) -> Bool {\n    return number >= lowerBound && number <= upperBound\n}\n\n// Example usage\nlet number = 10\nlet lowerBound = 5\nlet upperBound = 15\nlet result = isNumberInRange(number: number, lowerBound: lowerBound, upperBound: upperBound)\nprint(\"Is the number within range? \\(result)\")\n```"
  },
  {
    "task": "Design a system that checks if a user has both read and write permissions using logical AND.",
    "code": "```swift\nstruct UserPermissions {\n    var canRead: Bool\n    var canWrite: Bool\n}\n\nfunc hasReadAndWritePermissions(user: UserPermissions) -> Bool {\n    return user.canRead && user.canWrite\n}\n\n// Example usage:\nlet user = UserPermissions(canRead: true, canWrite: true)\nlet hasPermissions = hasReadAndWritePermissions(user: user)\nprint(\"User has both read and write permissions: \\(hasPermissions)\")\n```"
  },
  {
    "task": "Write a function to verify if a string is neither empty nor null using logical NOT.",
    "code": "```swift\nfunc isStringValid(_ input: String?) -> Bool {\n    return !(input == nil || input!.isEmpty)\n}\n```"
  },
  {
    "task": "Create a conditional statement that executes a block of code if either of two expressions are true using logical OR.",
    "code": "```swift\nlet expression1 = true\nlet expression2 = false\n\nif expression1 || expression2 {\n    print(\"At least one of the expressions is true.\")\n}\n```"
  },
  {
    "task": "Build a program that inverts the truth value of a given condition using logical NOT.",
    "code": "```swift\nfunc invertTruthValue(condition: Bool) -> Bool {\n    return !condition\n}\n\nlet originalCondition = true\nlet invertedCondition = invertTruthValue(condition: originalCondition)\nprint(\"Original: \\(originalCondition), Inverted: \\(invertedCondition)\")\n```"
  },
  {
    "task": "Compose a function to return true if a list is not empty using logical NOT.",
    "code": "```swift\nfunc isListNotEmpty(_ list: [Any]) -> Bool {\n    return !list.isEmpty\n}\n```"
  },
  {
    "task": "Develop a filter that selects items from a collection only if they meet multiple criteria using logical AND.",
    "code": "```swift\nstruct Item {\n    let name: String\n    let value: Int\n    let isActive: Bool\n}\n\nfunc filterItems(items: [Item]) -> [Item] {\n    return items.filter { item in\n        item.value > 10 && item.isActive\n    }\n}\n\n// Example usage\nlet items = [\n    Item(name: \"Item1\", value: 5, isActive: true),\n    Item(name: \"Item2\", value: 15, isActive: true),\n    Item(name: \"Item3\", value: 20, isActive: false),\n    Item(name: \"Item4\", value: 25, isActive: true)\n]\n\nlet filteredItems = filterItems(items: items)\nprint(filteredItems)\n```"
  },
  {
    "task": "Write a script that checks if a value is outside a given range using logical OR.",
    "code": "```swift\nfunc isValueOutsideRange(value: Int, lowerBound: Int, upperBound: Int) -> Bool {\n    return value < lowerBound || value > upperBound\n}\n\nlet valueToCheck = 10\nlet lowerBound = 5\nlet upperBound = 15\n\nlet result = isValueOutsideRange(value: valueToCheck, lowerBound: lowerBound, upperBound: upperBound)\nprint(\"Is the value outside the range? \\(result)\")\n```"
  },
  {
    "task": "Create a small program to toggle a boolean flag using logical NOT.",
    "code": "```swift\nvar flag = true\nprint(\"Initial flag value: \\(flag)\")\n\nflag = !flag\nprint(\"Toggled flag value: \\(flag)\")\n\nflag = !flag\nprint(\"Toggled flag value again: \\(flag)\")\n```"
  },
  {
    "task": "Implement a feature that evaluates if a username is both unique and valid using logical AND.",
    "code": "```swift\nstruct User {\n    let username: String\n}\n\nfunc isUnique(username: String, existingUsernames: [String]) -> Bool {\n    return !existingUsernames.contains(username)\n}\n\nfunc isValid(username: String) -> Bool {\n    return username.count >= 3 && username.count <= 20\n}\n\nfunc isUniqueAndValid(username: String, existingUsernames: [String]) -> Bool {\n    return isUnique(username: username, existingUsernames: existingUsernames) && isValid(username: username)\n}\n\n// Example usage\nlet existingUsernames = [\"Alice\", \"Bob\", \"Charlie\"]\nlet usernameToCheck = \"David\"\nlet result = isUniqueAndValid(username: usernameToCheck, existingUsernames: existingUsernames)\nprint(\"Is the username '\\(usernameToCheck)' both unique and valid? \\(result)\")\n```"
  },
  {
    "task": "Design a conditional to perform an action if neither of two flags are set using logical NOT.",
    "code": "```swift\nlet flagA = false\nlet flagB = false\n\nif !flagA && !flagB {\n    // Perform action here\n    print(\"Neither flag is set.\")\n}\n```"
  },
  {
    "task": "Write a function that returns true if at least one of multiple boolean inputs is true using logical OR.",
    "code": "```swift\nfunc isAnyTrue(_ inputs: Bool...) -> Bool {\n    return inputs.contains(true)\n}\n```"
  },
  {
    "task": "Create a loop that continues executing as long as two conditions are both false using logical NOT and AND.",
    "code": "```swift\nvar condition1 = false\nvar condition2 = false\n\nwhile !(condition1 && condition2) {\n    // Your loop code here\n    // Update condition1 and condition2 as needed to eventually exit the loop\n}\n```"
  },
  {
    "task": "Develop a sequence that checks if a character is either a vowel or a consonant using logical OR.",
    "code": "```swift\nfunc checkCharacter(_ char: Character) -> String {\n    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"]\n    if (char.isLetter) && (vowels.contains(char) || !vowels.contains(char)) {\n        return vowels.contains(char) ? \"Vowel\" : \"Consonant\"\n    } else {\n        return \"Not a letter\"\n    }\n}\n\nlet character: Character = \"a\"\nprint(\"\\(character) is a \\(checkCharacter(character))\")\n```"
  },
  {
    "task": "Implement a validation that ensures a password is both of minimum length and contains numbers using logical AND.",
    "code": "```swift\nfunc isValidPassword(password: String) -> Bool {\n    let minimumLength = 8\n    let containsNumbers = password.rangeOfCharacter(from: .decimalDigits) != nil\n    return password.count >= minimumLength && containsNumbers\n}\n```"
  },
  {
    "task": "Compose a test to determine if a point is not within a circle using logical NOT.",
    "code": "```swift\nimport Foundation\n\nstruct Point {\n    var x: Double\n    var y: Double\n}\n\nstruct Circle {\n    var center: Point\n    var radius: Double\n}\n\nfunc isPointOutsideCircle(point: Point, circle: Circle) -> Bool {\n    let dx = point.x - circle.center.x\n    let dy = point.y - circle.center.y\n    let distanceSquared = dx * dx + dy * dy\n    return !(distanceSquared <= circle.radius * circle.radius)\n}\n\n// Example usage:\nlet circle = Circle(center: Point(x: 0, y: 0), radius: 5)\nlet point = Point(x: 6, y: 0)\nlet result = isPointOutsideCircle(point: point, circle: circle)\nprint(result) // true\n```"
  },
  {
    "task": "Write a function to decide if a user is either an admin or an editor using logical OR.",
    "code": "```swift\nfunc isAdminOrEditor(userRole: String) -> Bool {\n    return userRole == \"admin\" || userRole == \"editor\"\n}\n```"
  },
  {
    "task": "Create a conditional statement to trigger an alert if two sensors both detect motion using logical AND.",
    "code": "```swift\nimport Foundation\n\nlet sensor1DetectsMotion = true\nlet sensor2DetectsMotion = true\n\nif sensor1DetectsMotion && sensor2DetectsMotion {\n    print(\"Alert: Both sensors detect motion!\")\n}\n```"
  },
  {
    "task": "Design a program to validate an email format and ensure it contains a domain using logical AND.",
    "code": "```swift\nimport Foundation\n\nfunc isValidEmail(_ email: String) -> Bool {\n    let emailComponents = email.split(separator: \"@\")\n    return emailComponents.count == 2 && !emailComponents[1].isEmpty\n}\n\n// Example usage\nlet email = \"example@domain.com\"\nprint(isValidEmail(email)) // Output: true\n```"
  },
  {
    "task": "Develop a method to confirm that a transaction is neither fraudulent nor unauthorized using logical NOT.",
    "code": "```swift\nfunc isTransactionValid(isFraudulent: Bool, isUnauthorized: Bool) -> Bool {\n    return !isFraudulent && !isUnauthorized\n}\n```"
  },
  {
    "task": "Write a function that outputs true if a file is either missing or empty using logical OR.",
    "code": "```swift\nimport Foundation\n\nfunc isFileMissingOrEmpty(atPath path: String) -> Bool {\n    let fileManager = FileManager.default\n    return !fileManager.fileExists(atPath: path) || (fileManager.fileExists(atPath: path) && (try? Data(contentsOf: URL(fileURLWithPath: path)))?.isEmpty ?? true)\n}\n```"
  },
  {
    "task": "Implement a system to check if a student's grade is neither failing nor incomplete using logical NOT.",
    "code": "```swift\nfunc isGradeValid(grade: String) -> Bool {\n    let isFailing = grade == \"F\"\n    let isIncomplete = grade == \"I\"\n    return !(isFailing || isIncomplete)\n}\n\n// Example usage\nlet grade = \"B\"\nprint(isGradeValid(grade: grade)) // Output: true\n```"
  },
  {
    "task": "Create a script that executes a command if a file is both readable and writable using logical AND.",
    "code": "```swift\nimport Foundation\n\nlet filePath = \"/path/to/your/file.txt\"\n\nlet fileManager = FileManager.default\n\nif fileManager.isReadableFile(atPath: filePath) && fileManager.isWritableFile(atPath: filePath) {\n    // Execute your command here\n    print(\"The file is both readable and writable.\")\n} else {\n    print(\"The file is not both readable and writable.\")\n}\n```"
  },
  {
    "task": "Compose a function to determine if a temperature is not within a safe operating range using logical NOT.",
    "code": "```swift\nfunc isTemperatureUnsafe(temperature: Int, safeRange: ClosedRange<Int>) -> Bool {\n    return !(safeRange.contains(temperature))\n}\n```"
  },
  {
    "task": "Design a check to see if a car is either out of fuel or needs maintenance using logical OR.",
    "code": "```swift\nlet isOutOfFuel = true\nlet needsMaintenance = false\n\nif isOutOfFuel || needsMaintenance {\n    print(\"The car is either out of fuel or needs maintenance.\")\n} else {\n    print(\"The car is good to go.\")\n}\n```"
  },
  {
    "task": "Develop a routine that ensures a network connection is both stable and secure using logical AND.",
    "code": "```swift\nfunc isConnectionStable() -> Bool {\n    // Placeholder for actual stability check logic\n    return true\n}\n\nfunc isConnectionSecure() -> Bool {\n    // Placeholder for actual security check logic\n    return true\n}\n\nfunc isConnectionStableAndSecure() -> Bool {\n    return isConnectionStable() && isConnectionSecure()\n}\n\n// Example usage\nlet connectionStatus = isConnectionStableAndSecure()\nprint(\"Is the connection both stable and secure? \\(connectionStatus)\")\n```"
  },
  {
    "task": "Write a conditional to print a message if a user is not logged in using logical NOT.",
    "code": "```swift\nlet isLoggedIn = false\n\nif !isLoggedIn {\n    print(\"User is not logged in.\")\n}\n```"
  },
  {
    "task": "Create a function that checks if a number is both even and positive using logical AND.",
    "code": "```swift\nfunc isEvenAndPositive(_ number: Int) -> Bool {\n    return number > 0 && number % 2 == 0\n}\n```"
  },
  {
    "task": "Implement a feature that turns off a device if neither of two switches are on using logical NOT.",
    "code": "```swift\nfunc isDeviceOn(switch1: Bool, switch2: Bool) -> Bool {\n    return !(switch1 || switch2)\n}\n\nlet switch1 = false\nlet switch2 = false\n\nlet deviceIsOn = isDeviceOn(switch1: switch1, switch2: switch2)\nprint(\"Device is on: \\(deviceIsOn)\")\n```"
  },
  {
    "task": "Compose a script to alert if a server is either down or running slow using logical OR.",
    "code": "```swift\nlet isServerDown = true\nlet isServerRunningSlow = false\n\nif isServerDown || isServerRunningSlow {\n    print(\"Alert: Server is either down or running slow!\")\n}\n```"
  },
  {
    "task": "Design a validation method to ensure a form field is not empty using logical NOT.",
    "code": "```swift\nfunc isFieldNotEmpty(_ fieldValue: String) -> Bool {\n    return !fieldValue.isEmpty\n}\n```"
  },
  {
    "task": "Write a program to determine if two strings are both non-empty using logical AND.",
    "code": "```swift\nimport Foundation\n\nfunc areBothStringsNonEmpty(_ str1: String, _ str2: String) -> Bool {\n    return !str1.isEmpty && !str2.isEmpty\n}\n\n// Example usage:\nlet string1 = \"Hello\"\nlet string2 = \"World\"\nlet result = areBothStringsNonEmpty(string1, string2)\nprint(result)\n```"
  },
  {
    "task": "Create a function that checks if a number is either prime or a perfect square using logical OR.",
    "code": "```swift\nfunc isPrime(_ n: Int) -> Bool {\n    if n <= 1 { return false }\n    if n <= 3 { return true }\n    if n % 2 == 0 || n % 3 == 0 { return false }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 || n % (i + 2) == 0 { return false }\n        i += 6\n    }\n    return true\n}\n\nfunc isPerfectSquare(_ n: Int) -> Bool {\n    let root = Int(Double(n).squareRoot())\n    return root * root == n\n}\n\nfunc isPrimeOrPerfectSquare(_ n: Int) -> Bool {\n    return isPrime(n) || isPerfectSquare(n)\n}\n```"
  },
  {
    "task": "Develop a script to ensure a user is either an adult or has parental consent using logical OR.",
    "code": "```swift\nimport Foundation\n\nfunc canProceed(isAdult: Bool, hasParentalConsent: Bool) -> Bool {\n    return isAdult || hasParentalConsent\n}\n\n// Example usage\nlet userIsAdult = false\nlet userHasParentalConsent = true\n\nif canProceed(isAdult: userIsAdult, hasParentalConsent: userHasParentalConsent) {\n    print(\"Access granted.\")\n} else {\n    print(\"Access denied.\")\n}\n```"
  },
  {
    "task": "Implement a condition to execute a task if a variable is neither zero nor negative using logical NOT.",
    "code": "```swift\nlet value = 5\n\nif !(value <= 0) {\n    // Task to execute when value is neither zero nor negative\n    print(\"Value is positive and non-zero\")\n}\n```"
  },
  {
    "task": "Compose a method to verify if a system is both up-to-date and functioning using logical AND.",
    "code": "```swift\nfunc isSystemOperational(isUpdated: Bool, isFunctioning: Bool) -> Bool {\n    return isUpdated && isFunctioning\n}\n```"
  },
  {
    "task": "Write a function that returns true if a list contains neither duplicates nor null values using logical NOT.",
    "code": "```swift\nfunc containsNoDuplicatesOrNulls(_ list: [Any?]) -> Bool {\n    let noNulls = !list.contains(where: { $0 == nil })\n    let noDuplicates = Set(list).count == list.count\n    return noNulls && noDuplicates\n}\n```"
  },
  {
    "task": "Create a script to perform an action if a temperature is either too high or too low using logical OR.",
    "code": "```swift\nlet temperature = 95\nlet lowThreshold = 32\nlet highThreshold = 90\n\nif temperature < lowThreshold || temperature > highThreshold {\n    print(\"Temperature is out of range!\")\n}\n```"
  },
  {
    "task": "Design a feature to toggle an option if a setting is not enabled using logical NOT.",
    "code": "```swift\nstruct Settings {\n    var isOptionEnabled: Bool\n    var isSettingEnabled: Bool\n    \n    mutating func toggleOptionIfSettingNotEnabled() {\n        if !isSettingEnabled {\n            isOptionEnabled.toggle()\n        }\n    }\n}\n\n// Example usage\nvar settings = Settings(isOptionEnabled: false, isSettingEnabled: false)\nsettings.toggleOptionIfSettingNotEnabled()\nprint(settings.isOptionEnabled) // Output: true\n```"
  },
  {
    "task": "Develop a check to ensure a username is both available and meets length requirements using logical AND.",
    "code": "```swift\nfunc isUsernameValid(username: String, isAvailable: Bool) -> Bool {\n    let minLength = 5\n    let maxLength = 15\n    return isAvailable && username.count >= minLength && username.count <= maxLength\n}\n\n// Example usage\nlet username = \"new_user\"\nlet available = true\nlet isValid = isUsernameValid(username: username, isAvailable: available)\nprint(\"Is the username valid? \\(isValid)\")\n```"
  },
  {
    "task": "Implement a function that returns true if a number is neither too large nor too small using logical NOT.",
    "code": "```swift\nfunc isNeitherTooLargeNorTooSmall(_ number: Int, lowerBound: Int, upperBound: Int) -> Bool {\n    return !(number < lowerBound || number > upperBound)\n}\n```"
  },
  {
    "task": "Write a conditional to print a warning if a disk is either full or nearly full using logical OR.",
    "code": "```swift\nlet diskFull = true\nlet diskNearlyFull = false\n\nif diskFull || diskNearlyFull {\n    print(\"Warning: Disk is either full or nearly full.\")\n}\n```"
  },
  {
    "task": "Create a routine to validate that two dates are both within a valid range using logical AND.",
    "code": "```swift\nimport Foundation\n\nfunc areDatesWithinRange(date1: Date, date2: Date, validRange: ClosedRange<Date>) -> Bool {\n    return validRange.contains(date1) && validRange.contains(date2)\n}\n\n// Example usage:\nlet formatter = DateFormatter()\nformatter.dateFormat = \"yyyy/MM/dd\"\n\nif let startDate = formatter.date(from: \"2023/01/01\"),\n   let endDate = formatter.date(from: \"2023/12/31\"),\n   let date1 = formatter.date(from: \"2023/06/15\"),\n   let date2 = formatter.date(from: \"2023/07/20\") {\n    let validRange = startDate...endDate\n    let result = areDatesWithinRange(date1: date1, date2: date2, validRange: validRange)\n    print(result) // Output will be true if both dates are within range\n}\n```"
  },
  {
    "task": "Compose a function to decide if a person is either a minor or a senior using logical OR.",
    "code": "```swift\nfunc isMinorOrSenior(age: Int) -> Bool {\n    return age < 18 || age >= 65\n}\n```"
  },
  {
    "task": "Design a script to execute a task if a condition is not met using logical NOT.",
    "code": "```swift\nlet conditionMet = false\n\nif !conditionMet {\n    // Execute the task\n    print(\"Executing task because condition is not met.\")\n}\n```"
  },
  {
    "task": "Develop a program to verify if a process is neither running nor scheduled using logical NOT.",
    "code": "```swift\nimport Foundation\n\nfunc isProcessActive(isRunning: Bool, isScheduled: Bool) -> Bool {\n    return !(isRunning || isScheduled)\n}\n\n// Example usage\nlet isRunning = false\nlet isScheduled = false\nlet isActive = isProcessActive(isRunning: isRunning, isScheduled: isScheduled)\nprint(\"Process is neither running nor scheduled: \\(isActive)\")\n```"
  },
  {
    "task": "Implement a feature that confirms a file is both accessible and not locked using logical AND.",
    "code": "```swift\nimport Foundation\n\nfunc isFileAccessibleAndNotLocked(atPath path: String) -> Bool {\n    let fileManager = FileManager.default\n    let isAccessible = fileManager.isReadableFile(atPath: path)\n    let isNotLocked = !fileManager.isExecutableFile(atPath: path) // Assuming 'locked' means not executable\n\n    return isAccessible && isNotLocked\n}\n\n// Example usage\nlet filePath = \"/path/to/file\"\nlet fileStatus = isFileAccessibleAndNotLocked(atPath: filePath)\nprint(\"File is accessible and not locked: \\(fileStatus)\")\n```"
  },
  {
    "task": "Write a script to check if a device is either offline or in maintenance mode using logical OR.",
    "code": "```swift\nfunc isDeviceUnavailable(isOffline: Bool, isInMaintenance: Bool) -> Bool {\n    return isOffline || isInMaintenance\n}\n\n// Example usage\nlet isOffline = true\nlet isInMaintenance = false\nlet unavailable = isDeviceUnavailable(isOffline: isOffline, isInMaintenance: isInMaintenance)\nprint(\"Device unavailable: \\(unavailable)\")\n```"
  },
  {
    "task": "Create a function to ensure a password is both complex and unique using logical AND.",
    "code": "```swift\nimport Foundation\n\nvar usedPasswords: Set<String> = []\n\nfunc isPasswordComplexAndUnique(password: String) -> Bool {\n    let isComplex = password.count >= 8 && \n                    password.rangeOfCharacter(from: CharacterSet.uppercaseLetters) != nil && \n                    password.rangeOfCharacter(from: CharacterSet.lowercaseLetters) != nil && \n                    password.rangeOfCharacter(from: CharacterSet.decimalDigits) != nil && \n                    password.rangeOfCharacter(from: CharacterSet.punctuationCharacters) != nil\n    \n    let isUnique = !usedPasswords.contains(password)\n    \n    let isComplexAndUnique = isComplex && isUnique\n    \n    if isComplexAndUnique {\n        usedPasswords.insert(password)\n    }\n    \n    return isComplexAndUnique\n}\n```"
  },
  {
    "task": "Design a validation that ensures a value is not negative using logical NOT.",
    "code": "```swift\nfunc isNotNegative(_ value: Int) -> Bool {\n    return !(value < 0)\n}\n```"
  },
  {
    "task": "Develop a check to see if a user has either exceeded their quota or is nearing it using logical OR.",
    "code": "```swift\nfunc checkQuotaStatus(currentUsage: Int, quotaLimit: Int, warningThreshold: Int) -> String {\n    if currentUsage > quotaLimit || currentUsage > warningThreshold {\n        return \"User has exceeded or is nearing their quota.\"\n    } else {\n        return \"User is within quota limits.\"\n    }\n}\n\n// Example Usage\nlet usageStatus = checkQuotaStatus(currentUsage: 85, quotaLimit: 100, warningThreshold: 80)\nprint(usageStatus)\n```"
  },
  {
    "task": "Implement a routine to confirm that a user is both authenticated and authorized using logical AND.",
    "code": "```swift\nstruct User {\n    var isAuthenticated: Bool\n    var isAuthorized: Bool\n}\n\nfunc isUserAuthenticatedAndAuthorized(user: User) -> Bool {\n    return user.isAuthenticated && user.isAuthorized\n}\n```"
  },
  {
    "task": "Compose a function to determine if a light is either on or blinking using logical OR.",
    "code": "```swift\nfunc isLightOnOrBlinking(isOn: Bool, isBlinking: Bool) -> Bool {\n    return isOn || isBlinking\n}\n```"
  },
  {
    "task": "Write a script that executes a command if a network connection is neither weak nor unstable using logical NOT.",
    "code": "```swift\nimport Foundation\n\nfunc isNetworkWeak() -> Bool {\n    // Replace with actual logic to determine if network is weak\n    return false\n}\n\nfunc isNetworkUnstable() -> Bool {\n    // Replace with actual logic to determine if network is unstable\n    return false\n}\n\nfunc executeCommand() {\n    print(\"Executing command...\")\n}\n\nif !(isNetworkWeak() || isNetworkUnstable()) {\n    executeCommand()\n}\n```"
  },
  {
    "task": "Create a program to verify that a sensor is both calibrated and active using logical AND.",
    "code": "```swift\nfunc isSensorReady(calibrated: Bool, active: Bool) -> Bool {\n    return calibrated && active\n}\n\n// Example usage\nlet calibrated = true\nlet active = true\nlet sensorReady = isSensorReady(calibrated: calibrated, active: active)\nprint(\"Sensor is ready: \\(sensorReady)\")\n```"
  },
  {
    "task": "Design a feature to alert if a process is either overdue or incomplete using logical OR.",
    "code": "```swift\nfunc checkProcessStatus(isOverdue: Bool, isIncomplete: Bool) -> String {\n    if isOverdue || isIncomplete {\n        return \"Alert: The process is either overdue or incomplete.\"\n    } else {\n        return \"The process is on track.\"\n    }\n}\n\n// Example usage\nlet statusMessage = checkProcessStatus(isOverdue: true, isIncomplete: false)\nprint(statusMessage)\n```"
  },
  {
    "task": "Develop a script to check if a person is neither a guest nor a temporary user using logical NOT.",
    "code": "```swift\nfunc isPermanentUser(isGuest: Bool, isTemporaryUser: Bool) -> Bool {\n    return !(isGuest || isTemporaryUser)\n}\n\n// Example usage\nlet isGuest = false\nlet isTemporaryUser = false\nlet result = isPermanentUser(isGuest: isGuest, isTemporaryUser: isTemporaryUser)\nprint(\"Is permanent user: \\(result)\")\n```"
  },
  {
    "task": "Implement a function to toggle a light if a switch is not pressed using logical NOT.",
    "code": "```swift\nfunc toggleLight(isSwitchPressed: Bool) -> Bool {\n    return !isSwitchPressed\n}\n```"
  },
  {
    "task": "Write a conditional to trigger an event if a file is either corrupted or missing using logical OR.",
    "code": "```swift\nlet isFileCorrupted = true\nlet isFileMissing = false\n\nif isFileCorrupted || isFileMissing {\n    print(\"Triggering event due to file issue.\")\n}\n```"
  },
  {
    "task": "Create a routine that verifies if a vehicle is both insured and registered using logical AND.",
    "code": "```swift\nfunc isVehicleInsuredAndRegistered(isInsured: Bool, isRegistered: Bool) -> Bool {\n    return isInsured && isRegistered\n}\n\n// Example usage:\nlet insured = true\nlet registered = true\nlet result = isVehicleInsuredAndRegistered(isInsured: insured, isRegistered: registered)\nprint(result) // Output: true\n```"
  },
  {
    "task": "Compose a method to check if an account is either overdrawn or flagged using logical OR.",
    "code": "```swift\nclass Account {\n    var isOverdrawn: Bool\n    var isFlagged: Bool\n    \n    init(isOverdrawn: Bool, isFlagged: Bool) {\n        self.isOverdrawn = isOverdrawn\n        self.isFlagged = isFlagged\n    }\n    \n    func isOverdrawnOrFlagged() -> Bool {\n        return isOverdrawn || isFlagged\n    }\n}\n\n// Example usage\nlet account = Account(isOverdrawn: true, isFlagged: false)\nprint(account.isOverdrawnOrFlagged())  // Output: true\n```"
  },
  {
    "task": "Design a program to ensure an application is both installed and updated using logical AND.",
    "code": "```swift\nimport Foundation\n\nfunc isApplicationInstalled() -> Bool {\n    // Placeholder function to simulate checking if the application is installed\n    return true\n}\n\nfunc isApplicationUpdated() -> Bool {\n    // Placeholder function to simulate checking if the application is updated\n    return true\n}\n\nfunc isApplicationReady() -> Bool {\n    return isApplicationInstalled() && isApplicationUpdated()\n}\n\nif isApplicationReady() {\n    print(\"The application is both installed and updated.\")\n} else {\n    print(\"The application is not ready. Please check installation and updates.\")\n}\n```"
  },
  {
    "task": "Develop a function that returns true if a number is neither divisible by 3 nor 5 using logical NOT.",
    "code": "```swift\nfunc isNotDivisibleBy3Or5(_ number: Int) -> Bool {\n    return !(number % 3 == 0 || number % 5 == 0)\n}\n```"
  },
  {
    "task": "Implement a script that alerts if a device is either overheating or underperforming using logical OR.",
    "code": "```swift\nfunc checkDeviceStatus(isOverheating: Bool, isUnderperforming: Bool) {\n    if isOverheating || isUnderperforming {\n        print(\"Alert: The device is either overheating or underperforming!\")\n    }\n}\n\n// Example usage:\ncheckDeviceStatus(isOverheating: true, isUnderperforming: false)\ncheckDeviceStatus(isOverheating: false, isUnderperforming: true)\ncheckDeviceStatus(isOverheating: true, isUnderperforming: true)\ncheckDeviceStatus(isOverheating: false, isUnderperforming: false)\n```"
  },
  {
    "task": "Write a function to validate that a directory is both writable and not full using logical AND.",
    "code": "```swift\nimport Foundation\n\nfunc isDirectoryWritableAndNotFull(atPath path: String) -> Bool {\n    let fileManager = FileManager.default\n    var isDirectory: ObjCBool = false\n    if fileManager.fileExists(atPath: path, isDirectory: &isDirectory), isDirectory.boolValue {\n        let writable = fileManager.isWritableFile(atPath: path)\n        let attributes = try? fileManager.attributesOfFileSystem(forPath: path)\n        if let freeSize = attributes?[.systemFreeSize] as? NSNumber {\n            let notFull = freeSize.intValue > 0\n            return writable && notFull\n        }\n    }\n    return false\n}\n```"
  },
  {
    "task": "Create a conditional statement that executes if a button is not clicked using logical NOT.",
    "code": "```swift\nvar isButtonClicked = false\n\nif !isButtonClicked {\n    // Execute this block if the button is not clicked\n    print(\"Button has not been clicked.\")\n}\n```"
  },
  {
    "task": "Design a check to ensure a transaction is both verified and complete using logical AND.",
    "code": "```swift\nfunc isTransactionValid(isVerified: Bool, isComplete: Bool) -> Bool {\n    return isVerified && isComplete\n}\n\n// Example usage\nlet transactionVerified = true\nlet transactionComplete = false\nlet transactionIsValid = isTransactionValid(isVerified: transactionVerified, isComplete: transactionComplete)\nprint(\"Transaction is valid: \\(transactionIsValid)\")\n```"
  },
  {
    "task": "Develop a routine to determine if a string is either uppercase or lowercase using logical OR.",
    "code": "```swift\nfunc isUppercaseOrLowercase(_ input: String) -> Bool {\n    let isUppercase = input == input.uppercased()\n    let isLowercase = input == input.lowercased()\n    return isUppercase || isLowercase\n}\n\n// Example usage\nlet result1 = isUppercaseOrLowercase(\"HELLO\") // true\nlet result2 = isUppercaseOrLowercase(\"hello\") // true\nlet result3 = isUppercaseOrLowercase(\"Hello\") // false\n```"
  },
  {
    "task": "Implement a feature to execute a task if a variable is neither null nor undefined using logical NOT.",
    "code": "```swift\nvar optionalValue: Any? = /* some value */\n\nif let value = optionalValue, !(value is NSNull) {\n    // Execute the task here\n}\n```"
  },
  {
    "task": "Compose a function to return true if a date is either today or tomorrow using logical OR.",
    "code": "```swift\nimport Foundation\n\nfunc isTodayOrTomorrow(date: Date) -> Bool {\n    let calendar = Calendar.current\n    let today = calendar.startOfDay(for: Date())\n    let tomorrow = calendar.date(byAdding: .day, value: 1, to: today)!\n    let checkedDate = calendar.startOfDay(for: date)\n    \n    return checkedDate == today || checkedDate == tomorrow\n}\n```"
  },
  {
    "task": "Write a script to confirm that a system is both running and not in maintenance mode using logical AND.",
    "code": "```swift\nlet isSystemRunning = true\nlet isInMaintenanceMode = false\n\nif isSystemRunning && !isInMaintenanceMode {\n    print(\"The system is running and not in maintenance mode.\")\n} else {\n    print(\"The system is either not running or in maintenance mode.\")\n}\n```"
  },
  {
    "task": "Create a program to verify if a text field is neither empty nor exceeds character limit using logical NOT.",
    "code": "```swift\nimport Foundation\n\nfunc isTextFieldValid(_ text: String?, characterLimit: Int) -> Bool {\n    guard let text = text else {\n        return false\n    }\n    return !(text.isEmpty || text.count > characterLimit)\n}\n\n// Example usage\nlet isValid = isTextFieldValid(\"Hello, World!\", characterLimit: 20)\nprint(\"Is text field valid? \\(isValid)\")\n```"
  },
  {
    "task": "Design a feature that checks if a user has either admin privileges or editor rights using logical OR.",
    "code": "```swift\nstruct User {\n    var isAdmin: Bool\n    var isEditor: Bool\n}\n\nfunc hasPrivileges(user: User) -> Bool {\n    return user.isAdmin || user.isEditor\n}\n\n// Example usage:\nlet user1 = User(isAdmin: true, isEditor: false)\nlet user2 = User(isAdmin: false, isEditor: true)\nlet user3 = User(isAdmin: false, isEditor: false)\n\nprint(hasPrivileges(user: user1)) // true\nprint(hasPrivileges(user: user2)) // true\nprint(hasPrivileges(user: user3)) // false\n```"
  },
  {
    "task": "Develop a script to ensure a file is both present and not empty using logical AND.",
    "code": "```swift\nimport Foundation\n\nfunc isFilePresentAndNotEmpty(atPath path: String) -> Bool {\n    let fileManager = FileManager.default\n    if fileManager.fileExists(atPath: path) {\n        if let fileAttributes = try? fileManager.attributesOfItem(atPath: path),\n           let fileSize = fileAttributes[.size] as? UInt64 {\n            return fileSize > 0\n        }\n    }\n    return false\n}\n\n// Example usage\nlet path = \"/path/to/file.txt\"\nif isFilePresentAndNotEmpty(atPath: path) {\n    print(\"The file is present and not empty.\")\n} else {\n    print(\"The file is either not present or empty.\")\n}\n```"
  },
  {
    "task": "Implement a condition to execute a command if a setting is not active using logical NOT.",
    "code": "```swift\nlet isSettingActive = false\n\nif !isSettingActive {\n    // Execute the command here\n    print(\"Command executed because the setting is not active.\")\n}\n```"
  },
  {
    "task": "Compose a method to decide if a person is either eligible or exempt using logical OR.",
    "code": "```swift\nfunc isEligibleOrExempt(age: Int, isExempt: Bool) -> Bool {\n    return age >= 18 || isExempt\n}\n```"
  },
  {
    "task": "Write a function that returns true if a number is both greater than zero and less than ten using logical AND.",
    "code": "```swift\nfunc isGreaterThanZeroAndLessThanTen(_ number: Int) -> Bool {\n    return number > 0 && number < 10\n}\n```"
  },
  {
    "task": "Create a loop to continue as long as a condition is either true or false using logical OR.",
    "code": "```swift\nvar condition1 = true\nvar condition2 = false\n\nwhile condition1 || condition2 {\n    // Your loop code here\n\n    // Example toggle to eventually exit the loop\n    condition1 = false\n}\n```"
  },
  {
    "task": "Design a program to verify if an account is neither inactive nor suspended using logical NOT.",
    "code": "```swift\nfunc isAccountActiveAndNotSuspended(isInactive: Bool, isSuspended: Bool) -> Bool {\n    return !isInactive && !isSuspended\n}\n\n// Example usage\nlet accountStatus = isAccountActiveAndNotSuspended(isInactive: false, isSuspended: false)\nprint(accountStatus) // Output: true\n```"
  },
  {
    "task": "Develop a feature to confirm that a document is both signed and verified using logical AND.",
    "code": "```swift\nfunc isDocumentSignedAndVerified(isSigned: Bool, isVerified: Bool) -> Bool {\n    return isSigned && isVerified\n}\n\n// Example usage\nlet documentSigned = true\nlet documentVerified = true\nlet isConfirmed = isDocumentSignedAndVerified(isSigned: documentSigned, isVerified: documentVerified)\nprint(\"Document is confirmed: \\(isConfirmed)\")\n```"
  },
  {
    "task": "Implement a script to alert if a network is either congested or down using logical OR.",
    "code": "```swift\nfunc checkNetworkStatus(isCongested: Bool, isDown: Bool) {\n    if isCongested || isDown {\n        print(\"Alert: The network is either congested or down.\")\n    } else {\n        print(\"The network is operating normally.\")\n    }\n}\n\n// Example usage\ncheckNetworkStatus(isCongested: true, isDown: false)\ncheckNetworkStatus(isCongested: false, isDown: true)\ncheckNetworkStatus(isCongested: true, isDown: true)\ncheckNetworkStatus(isCongested: false, isDown: false)\n```"
  },
  {
    "task": "Write a function to ensure a list is both sorted and unique using logical AND.",
    "code": "```swift\nfunc ensureSortedAndUnique(_ list: [Int]) -> [Int] {\n    let sortedList = list.sorted()\n    let uniqueSortedList = sortedList.enumerated().compactMap { index, element in\n        (index == 0 || element != sortedList[index - 1]) && true ? element : nil\n    }\n    return uniqueSortedList\n}\n```"
  },
  {
    "task": "Create a conditional statement to execute if a task is not completed using logical NOT.",
    "code": "```swift\nlet isTaskCompleted = false\n\nif !isTaskCompleted {\n    // Code to execute if the task is not completed\n    print(\"Task is not completed.\")\n}\n```"
  },
  {
    "task": "Design a check to determine if a component is either faulty or missing using logical OR.",
    "code": "```swift\nfunc isComponentFaultyOrMissing(isFaulty: Bool, isMissing: Bool) -> Bool {\n    return isFaulty || isMissing\n}\n\n// Example usage\nlet componentStatus = isComponentFaultyOrMissing(isFaulty: true, isMissing: false)\nprint(\"Component is faulty or missing: \\(componentStatus)\")\n```"
  },
  {
    "task": "Develop a routine to verify if a user is both online and available using logical AND.",
    "code": "```swift\nstruct User {\n    var isOnline: Bool\n    var isAvailable: Bool\n}\n\nfunc isUserOnlineAndAvailable(user: User) -> Bool {\n    return user.isOnline && user.isAvailable\n}\n\n// Example usage\nlet user = User(isOnline: true, isAvailable: true)\nlet isAvailable = isUserOnlineAndAvailable(user: user)\nprint(isAvailable)\n```"
  },
  {
    "task": "Implement a feature to toggle an alert if a condition is not satisfied using logical NOT.",
    "code": "```swift\nimport Foundation\n\nfunc checkConditionAndToggleAlert(condition: Bool) -> Bool {\n    let alertIsActive = !condition\n    return alertIsActive\n}\n\n// Example usage\nlet condition = false\nlet alert = checkConditionAndToggleAlert(condition: condition)\nprint(\"Alert active: \\(alert)\")\n```"
  },
  {
    "task": "Compose a function to return true if a transaction is either pending or failed using logical OR.",
    "code": "```swift\nfunc isTransactionPendingOrFailed(status: String) -> Bool {\n    return status == \"pending\" || status == \"failed\"\n}\n```"
  },
  {
    "task": "Write a script to ensure a configuration is both correct and active using logical AND.",
    "code": "```swift\nlet isConfigurationCorrect = true // This would be determined by your logic\nlet isConfigurationActive = true // This would also be determined by your logic\n\nif isConfigurationCorrect && isConfigurationActive {\n    print(\"The configuration is both correct and active.\")\n} else {\n    print(\"The configuration is either incorrect or inactive.\")\n}\n```"
  }
]