[
  {
    "task": "Define a class representing a book with attributes for title, author, and number of pages, and a method to display the book's information.",
    "code": "```swift\nclass Book {\n    var title: String\n    var author: String\n    var numberOfPages: Int\n    \n    init(title: String, author: String, numberOfPages: Int) {\n        self.title = title\n        self.author = author\n        self.numberOfPages = numberOfPages\n    }\n    \n    func displayInformation() {\n        print(\"Title: \\(title), Author: \\(author), Pages: \\(numberOfPages)\")\n    }\n}\n```"
  },
  {
    "task": "Create a class for a bank account that includes attributes for account number, balance, and a method to deposit funds.",
    "code": "```swift\nclass BankAccount {\n    var accountNumber: String\n    var balance: Double\n    \n    init(accountNumber: String, balance: Double) {\n        self.accountNumber = accountNumber\n        self.balance = balance\n    }\n    \n    func deposit(amount: Double) {\n        if amount > 0 {\n            balance += amount\n        }\n    }\n}\n```"
  },
  {
    "task": "Design a class for a vehicle with properties for make, model, and year, and a method to start the engine.",
    "code": "```swift\nclass Vehicle {\n    var make: String\n    var model: String\n    var year: Int\n\n    init(make: String, model: String, year: Int) {\n        self.make = make\n        self.model = model\n        self.year = year\n    }\n\n    func startEngine() {\n        print(\"Engine started for \\(make) \\(model) (\\(year)).\")\n    }\n}\n```"
  },
  {
    "task": "Implement a class that models a student with attributes for name, ID, and grades, and a method to calculate the GPA.",
    "code": "```swift\nclass Student {\n    var name: String\n    var id: String\n    var grades: [Double]\n    \n    init(name: String, id: String, grades: [Double]) {\n        self.name = name\n        self.id = id\n        self.grades = grades\n    }\n    \n    func calculateGPA() -> Double {\n        let total = grades.reduce(0, +)\n        return grades.isEmpty ? 0.0 : total / Double(grades.count)\n    }\n}\n```"
  },
  {
    "task": "Construct a class for a rectangle that has attributes for width and height, and methods to calculate area and perimeter.",
    "code": "```swift\nclass Rectangle {\n    var width: Double\n    var height: Double\n    \n    init(width: Double, height: Double) {\n        self.width = width\n        self.height = height\n    }\n    \n    func area() -> Double {\n        return width * height\n    }\n    \n    func perimeter() -> Double {\n        return 2 * (width + height)\n    }\n}\n```"
  },
  {
    "task": "Formulate a class for a smartphone with properties for brand, model, and battery life, and a method to make a call.",
    "code": "```swift\nclass Smartphone {\n    var brand: String\n    var model: String\n    var batteryLife: Int\n\n    init(brand: String, model: String, batteryLife: Int) {\n        self.brand = brand\n        self.model = model\n        self.batteryLife = batteryLife\n    }\n\n    func makeCall(to number: String) {\n        print(\"Calling \\(number)...\")\n    }\n}\n```"
  },
  {
    "task": "Build a class representing a movie with attributes for title, director, and duration, and a method to play the movie.",
    "code": "```swift\nclass Movie {\n    var title: String\n    var director: String\n    var duration: Int\n    \n    init(title: String, director: String, duration: Int) {\n        self.title = title\n        self.director = director\n        self.duration = duration\n    }\n    \n    func play() {\n        print(\"Playing the movie: \\(title)\")\n    }\n}\n```"
  },
  {
    "task": "Create a class for an employee with attributes for name, position, and salary, and a method to display their profile.",
    "code": "```swift\nclass Employee {\n    var name: String\n    var position: String\n    var salary: Double\n    \n    init(name: String, position: String, salary: Double) {\n        self.name = name\n        self.position = position\n        self.salary = salary\n    }\n    \n    func displayProfile() {\n        print(\"Name: \\(name)\")\n        print(\"Position: \\(position)\")\n        print(\"Salary: \\(salary)\")\n    }\n}\n```"
  },
  {
    "task": "Design a class for a library that includes attributes for name, location, and books available, and a method to add a new book.",
    "code": "```swift\nclass Library {\n    var name: String\n    var location: String\n    var booksAvailable: [String]\n    \n    init(name: String, location: String, booksAvailable: [String]) {\n        self.name = name\n        self.location = location\n        self.booksAvailable = booksAvailable\n    }\n    \n    func addBook(book: String) {\n        booksAvailable.append(book)\n    }\n}\n```"
  },
  {
    "task": "Develop a class for a shopping cart with properties for items and total cost, and methods to add and remove items.",
    "code": "```swift\nclass ShoppingCart {\n    private var items: [String]\n    private var totalCost: Double\n    \n    init() {\n        self.items = []\n        self.totalCost = 0.0\n    }\n    \n    func addItem(name: String, cost: Double) {\n        items.append(name)\n        totalCost += cost\n    }\n    \n    func removeItem(name: String, cost: Double) {\n        if let index = items.firstIndex(of: name) {\n            items.remove(at: index)\n            totalCost -= cost\n        }\n    }\n    \n    func getItems() -> [String] {\n        return items\n    }\n    \n    func getTotalCost() -> Double {\n        return totalCost\n    }\n}\n```"
  },
  {
    "task": "Implement a class for a thermostat with attributes for current temperature and desired temperature, and a method to adjust the temperature.",
    "code": "```swift\nclass Thermostat {\n    var currentTemperature: Double\n    var desiredTemperature: Double\n    \n    init(currentTemperature: Double, desiredTemperature: Double) {\n        self.currentTemperature = currentTemperature\n        self.desiredTemperature = desiredTemperature\n    }\n    \n    func adjustTemperature() {\n        if currentTemperature < desiredTemperature {\n            currentTemperature += 1.0\n        } else if currentTemperature > desiredTemperature {\n            currentTemperature -= 1.0\n        }\n    }\n}\n```"
  },
  {
    "task": "Formulate a class for a person with attributes for first name, last name, and age, and a method to return the full name.",
    "code": "```swift\nclass Person {\n    var firstName: String\n    var lastName: String\n    var age: Int\n    \n    init(firstName: String, lastName: String, age: Int) {\n        self.firstName = firstName\n        self.lastName = lastName\n        self.age = age\n    }\n    \n    func fullName() -> String {\n        return \"\\(firstName) \\(lastName)\"\n    }\n}\n```"
  },
  {
    "task": "Construct a class for a game character with properties for health, strength, and inventory, and a method to attack.",
    "code": "```swift\nclass GameCharacter {\n    var health: Int\n    var strength: Int\n    var inventory: [String]\n    \n    init(health: Int, strength: Int, inventory: [String]) {\n        self.health = health\n        self.strength = strength\n        self.inventory = inventory\n    }\n    \n    func attack() {\n        print(\"Attacking with strength \\(strength)\")\n    }\n}\n```"
  },
  {
    "task": "Create a class for a calendar event with attributes for title, date, and location, and a method to reschedule the event.",
    "code": "```swift\nimport Foundation\n\nclass CalendarEvent {\n    var title: String\n    var date: Date\n    var location: String\n    \n    init(title: String, date: Date, location: String) {\n        self.title = title\n        self.date = date\n        self.location = location\n    }\n    \n    func reschedule(to newDate: Date) {\n        self.date = newDate\n    }\n}\n```"
  },
  {
    "task": "Design a class representing a song with properties for title, artist, and duration, and a method to play the song.",
    "code": "```swift\nclass Song {\n    var title: String\n    var artist: String\n    var duration: Double\n    \n    init(title: String, artist: String, duration: Double) {\n        self.title = title\n        self.artist = artist\n        self.duration = duration\n    }\n    \n    func play() {\n        print(\"Playing \\(title) by \\(artist).\")\n    }\n}\n```"
  },
  {
    "task": "Develop a class for an order in an e-commerce system with attributes for order ID, customer, and items, and a method to calculate total price.",
    "code": "```swift\nclass Order {\n    var orderId: String\n    var customer: String\n    var items: [Item]\n    \n    init(orderId: String, customer: String, items: [Item]) {\n        self.orderId = orderId\n        self.customer = customer\n        self.items = items\n    }\n    \n    func calculateTotalPrice() -> Double {\n        return items.reduce(0) { $0 + $1.price }\n    }\n}\n\nclass Item {\n    var name: String\n    var price: Double\n    \n    init(name: String, price: Double) {\n        self.name = name\n        self.price = price\n    }\n}\n```"
  },
  {
    "task": "Build a class for a social media post with attributes for content, author, and timestamp, and a method to like the post.",
    "code": "```swift\nimport Foundation\n\nclass SocialMediaPost {\n    var content: String\n    var author: String\n    var timestamp: Date\n    private(set) var likes: Int\n    \n    init(content: String, author: String, timestamp: Date) {\n        self.content = content\n        self.author = author\n        self.timestamp = timestamp\n        self.likes = 0\n    }\n    \n    func like() {\n        likes += 1\n    }\n}\n```"
  },
  {
    "task": "Create a class for a computer with properties for processor, RAM, and storage, and a method to display system specifications.",
    "code": "```swift\nclass Computer {\n    var processor: String\n    var ram: Int\n    var storage: Int\n\n    init(processor: String, ram: Int, storage: Int) {\n        self.processor = processor\n        self.ram = ram\n        self.storage = storage\n    }\n\n    func displaySpecifications() {\n        print(\"Processor: \\(processor)\")\n        print(\"RAM: \\(ram) GB\")\n        print(\"Storage: \\(storage) GB\")\n    }\n}\n```"
  },
  {
    "task": "Implement a class for a restaurant menu item with attributes for name, price, and description, and a method to update the price.",
    "code": "```swift\nclass MenuItem {\n    var name: String\n    var price: Double\n    var description: String\n    \n    init(name: String, price: Double, description: String) {\n        self.name = name\n        self.price = price\n        self.description = description\n    }\n    \n    func updatePrice(newPrice: Double) {\n        self.price = newPrice\n    }\n}\n```"
  },
  {
    "task": "Design a class for a package delivery with attributes for tracking number, destination, and status, and a method to update the status.",
    "code": "```swift\nclass PackageDelivery {\n    var trackingNumber: String\n    var destination: String\n    var status: String\n\n    init(trackingNumber: String, destination: String, status: String) {\n        self.trackingNumber = trackingNumber\n        self.destination = destination\n        self.status = status\n    }\n\n    func updateStatus(newStatus: String) {\n        self.status = newStatus\n    }\n}\n```"
  },
  {
    "task": "Construct a class representing a pet with attributes for species, age, and name, and a method to display its details.",
    "code": "```swift\nclass Pet {\n    var species: String\n    var age: Int\n    var name: String\n    \n    init(species: String, age: Int, name: String) {\n        self.species = species\n        self.age = age\n        self.name = name\n    }\n    \n    func displayDetails() {\n        print(\"Species: \\(species), Age: \\(age), Name: \\(name)\")\n    }\n}\n```"
  },
  {
    "task": "Formulate a class for a product in a store with properties for SKU, name, and price, and a method to apply a discount.",
    "code": "```swift\nclass Product {\n    var sku: String\n    var name: String\n    var price: Double\n    \n    init(sku: String, name: String, price: Double) {\n        self.sku = sku\n        self.name = name\n        self.price = price\n    }\n    \n    func applyDiscount(_ discount: Double) {\n        price -= price * discount / 100\n    }\n}\n```"
  },
  {
    "task": "Develop a class for a university course with attributes for course code, title, and credits, and a method to enroll a student.",
    "code": "```swift\nclass UniversityCourse {\n    var courseCode: String\n    var title: String\n    var credits: Int\n\n    init(courseCode: String, title: String, credits: Int) {\n        self.courseCode = courseCode\n        self.title = title\n        self.credits = credits\n    }\n\n    func enrollStudent(studentName: String) {\n        print(\"\\(studentName) has been enrolled in \\(title).\")\n    }\n}\n```"
  },
  {
    "task": "Create a class for a smart light bulb with attributes for color, brightness, and state (on/off), and a method to change the color.",
    "code": "```swift\nclass SmartLightBulb {\n    var color: String\n    var brightness: Int\n    var isOn: Bool\n\n    init(color: String, brightness: Int, isOn: Bool) {\n        self.color = color\n        self.brightness = brightness\n        self.isOn = isOn\n    }\n\n    func changeColor(to newColor: String) {\n        self.color = newColor\n    }\n}\n```"
  },
  {
    "task": "Design a class for a blog post with properties for title, content, and date published, and a method to edit the content.",
    "code": "```swift\nimport Foundation\n\nclass BlogPost {\n    var title: String\n    var content: String\n    var datePublished: Date\n\n    init(title: String, content: String, datePublished: Date) {\n        self.title = title\n        self.content = content\n        self.datePublished = datePublished\n    }\n\n    func editContent(newContent: String) {\n        self.content = newContent\n    }\n}\n```"
  },
  {
    "task": "Build a class for a bank transaction with attributes for transaction ID, amount, and type, and a method to reverse the transaction.",
    "code": "```swift\nclass BankTransaction {\n    var transactionID: String\n    var amount: Double\n    var type: String\n    \n    init(transactionID: String, amount: Double, type: String) {\n        self.transactionID = transactionID\n        self.amount = amount\n        self.type = type\n    }\n    \n    func reverseTransaction() {\n        if type == \"credit\" {\n            type = \"debit\"\n        } else if type == \"debit\" {\n            type = \"credit\"\n        }\n        amount = -amount\n    }\n}\n```"
  },
  {
    "task": "Implement a class for a city with properties for name, population, and area, and a method to calculate population density.",
    "code": "```swift\nclass City {\n    var name: String\n    var population: Int\n    var area: Double\n    \n    init(name: String, population: Int, area: Double) {\n        self.name = name\n        self.population = population\n        self.area = area\n    }\n    \n    func populationDensity() -> Double {\n        return Double(population) / area\n    }\n}\n```"
  },
  {
    "task": "Construct a class for a library member with attributes for member ID, name, and borrowed books, and a method to borrow a book.",
    "code": "```swift\nclass LibraryMember {\n    var memberID: String\n    var name: String\n    var borrowedBooks: [String]\n    \n    init(memberID: String, name: String) {\n        self.memberID = memberID\n        self.name = name\n        self.borrowedBooks = []\n    }\n    \n    func borrowBook(bookTitle: String) {\n        borrowedBooks.append(bookTitle)\n    }\n}\n```"
  },
  {
    "task": "Create a class for a flight reservation with attributes for flight number, passenger name, and seat number, and a method to change the seat.",
    "code": "```swift\nclass FlightReservation {\n    var flightNumber: String\n    var passengerName: String\n    var seatNumber: String\n    \n    init(flightNumber: String, passengerName: String, seatNumber: String) {\n        self.flightNumber = flightNumber\n        self.passengerName = passengerName\n        self.seatNumber = seatNumber\n    }\n    \n    func changeSeat(newSeatNumber: String) {\n        self.seatNumber = newSeatNumber\n    }\n}\n```"
  },
  {
    "task": "Develop a class for a digital photo album with properties for album name, photos, and a method to add a new photo.",
    "code": "```swift\nclass DigitalPhotoAlbum {\n    var albumName: String\n    var photos: [String]\n    \n    init(albumName: String) {\n        self.albumName = albumName\n        self.photos = []\n    }\n    \n    func addPhoto(photo: String) {\n        photos.append(photo)\n    }\n}\n```"
  },
  {
    "task": "Design a class for a task in a to-do list with attributes for description, deadline, and status, and a method to mark it as complete.",
    "code": "```swift\nclass Task {\n    var description: String\n    var deadline: Date\n    var status: Bool\n    \n    init(description: String, deadline: Date, status: Bool = false) {\n        self.description = description\n        self.deadline = deadline\n        self.status = status\n    }\n    \n    func markAsComplete() {\n        self.status = true\n    }\n}\n```"
  },
  {
    "task": "Formulate a class for a conference speaker with attributes for name, topic, and time slot, and a method to update the time slot.",
    "code": "```swift\nclass ConferenceSpeaker {\n    var name: String\n    var topic: String\n    var timeSlot: String\n    \n    init(name: String, topic: String, timeSlot: String) {\n        self.name = name\n        self.topic = topic\n        self.timeSlot = timeSlot\n    }\n    \n    func updateTimeSlot(newTimeSlot: String) {\n        self.timeSlot = newTimeSlot\n    }\n}\n```"
  },
  {
    "task": "Construct a class for a real estate property with attributes for address, price, and square footage, and a method to change the price.",
    "code": "```swift\nclass RealEstateProperty {\n    var address: String\n    var price: Double\n    var squareFootage: Int\n    \n    init(address: String, price: Double, squareFootage: Int) {\n        self.address = address\n        self.price = price\n        self.squareFootage = squareFootage\n    }\n    \n    func changePrice(to newPrice: Double) {\n        self.price = newPrice\n    }\n}\n```"
  },
  {
    "task": "Create a class for a weather forecast with properties for temperature, humidity, and condition, and a method to update the forecast.",
    "code": "```swift\nclass WeatherForecast {\n    var temperature: Double\n    var humidity: Double\n    var condition: String\n\n    init(temperature: Double, humidity: Double, condition: String) {\n        self.temperature = temperature\n        self.humidity = humidity\n        self.condition = condition\n    }\n\n    func updateForecast(temperature: Double, humidity: Double, condition: String) {\n        self.temperature = temperature\n        self.humidity = humidity\n        self.condition = condition\n    }\n}\n```"
  },
  {
    "task": "Build a class for a musical instrument with attributes for type, brand, and model, and a method to play a note.",
    "code": "```swift\nclass MusicalInstrument {\n    var type: String\n    var brand: String\n    var model: String\n\n    init(type: String, brand: String, model: String) {\n        self.type = type\n        self.brand = brand\n        self.model = model\n    }\n\n    func playNote() {\n        print(\"Playing a note on the \\(brand) \\(model) \\(type).\")\n    }\n}\n```"
  },
  {
    "task": "Design a class for a sports team with attributes for team name, players, and coach, and a method to add a new player.",
    "code": "```swift\nclass SportsTeam {\n    var teamName: String\n    var players: [String]\n    var coach: String\n\n    init(teamName: String, players: [String], coach: String) {\n        self.teamName = teamName\n        self.players = players\n        self.coach = coach\n    }\n\n    func addPlayer(_ player: String) {\n        players.append(player)\n    }\n}\n```"
  },
  {
    "task": "Implement a class for a podcast episode with attributes for title, duration, and host, and a method to play the episode.",
    "code": "```swift\nclass PodcastEpisode {\n    var title: String\n    var duration: Int // Duration in minutes\n    var host: String\n\n    init(title: String, duration: Int, host: String) {\n        self.title = title\n        self.duration = duration\n        self.host = host\n    }\n\n    func play() {\n        print(\"Playing episode: \\(title) hosted by \\(host)\")\n    }\n}\n```"
  },
  {
    "task": "Develop a class for a space mission with properties for mission name, crew, and launch date, and a method to launch the mission.",
    "code": "```swift\nclass SpaceMission {\n    var missionName: String\n    var crew: [String]\n    var launchDate: String\n    \n    init(missionName: String, crew: [String], launchDate: String) {\n        self.missionName = missionName\n        self.crew = crew\n        self.launchDate = launchDate\n    }\n    \n    func launchMission() {\n        print(\"Launching mission '\\(missionName)' with crew \\(crew) on \\(launchDate).\")\n    }\n}\n```"
  },
  {
    "task": "Create a class for a virtual assistant with attributes for name, language, and skills, and a method to add a new skill.",
    "code": "```swift\nclass VirtualAssistant {\n    var name: String\n    var language: String\n    var skills: [String]\n    \n    init(name: String, language: String, skills: [String]) {\n        self.name = name\n        self.language = language\n        self.skills = skills\n    }\n    \n    func addSkill(newSkill: String) {\n        skills.append(newSkill)\n    }\n}\n```"
  },
  {
    "task": "Formulate a class for a news article with attributes for headline, content, and author, and a method to publish the article.",
    "code": "```swift\nclass NewsArticle {\n    var headline: String\n    var content: String\n    var author: String\n    \n    init(headline: String, content: String, author: String) {\n        self.headline = headline\n        self.content = content\n        self.author = author\n    }\n    \n    func publish() {\n        print(\"Publishing Article: \\(headline)\")\n        print(\"By: \\(author)\")\n        print(\"\\n\\(content)\")\n    }\n}\n```"
  },
  {
    "task": "Construct a class for a hiking trail with attributes for trail name, length, and difficulty, and a method to update the difficulty.",
    "code": "```swift\nclass HikingTrail {\n    var trailName: String\n    var length: Double\n    var difficulty: String\n    \n    init(trailName: String, length: Double, difficulty: String) {\n        self.trailName = trailName\n        self.length = length\n        self.difficulty = difficulty\n    }\n    \n    func updateDifficulty(newDifficulty: String) {\n        self.difficulty = newDifficulty\n    }\n}\n```"
  },
  {
    "task": "Design a class for a subscription service with properties for service name, subscriber count, and subscription fee, and a method to update the fee.",
    "code": "```swift\nclass SubscriptionService {\n    var serviceName: String\n    var subscriberCount: Int\n    var subscriptionFee: Double\n    \n    init(serviceName: String, subscriberCount: Int, subscriptionFee: Double) {\n        self.serviceName = serviceName\n        self.subscriberCount = subscriberCount\n        self.subscriptionFee = subscriptionFee\n    }\n    \n    func updateFee(newFee: Double) {\n        self.subscriptionFee = newFee\n    }\n}\n```"
  },
  {
    "task": "Build a class for a digital wallet with attributes for balance, transaction history, and a method to add funds.",
    "code": "```swift\nclass DigitalWallet {\n    var balance: Double\n    var transactionHistory: [String]\n    \n    init(balance: Double = 0.0) {\n        self.balance = balance\n        self.transactionHistory = []\n    }\n    \n    func addFunds(amount: Double) {\n        balance += amount\n        transactionHistory.append(\"Added \\(amount)\")\n    }\n}\n```"
  },
  {
    "task": "Implement a class for a cooking recipe with attributes for name, ingredients, and instructions, and a method to update the instructions.",
    "code": "```swift\nclass CookingRecipe {\n    var name: String\n    var ingredients: [String]\n    var instructions: String\n    \n    init(name: String, ingredients: [String], instructions: String) {\n        self.name = name\n        self.ingredients = ingredients\n        self.instructions = instructions\n    }\n    \n    func updateInstructions(newInstructions: String) {\n        self.instructions = newInstructions\n    }\n}\n```"
  },
  {
    "task": "Develop a class for a time zone with properties for zone name, offset, and a method to convert time from another time zone.",
    "code": "```swift\nclass TimeZone {\n    var zoneName: String\n    var offset: Int\n\n    init(zoneName: String, offset: Int) {\n        self.zoneName = zoneName\n        self.offset = offset\n    }\n\n    func convertTime(from time: Int, fromOffset: Int) -> Int {\n        return time + (offset - fromOffset)\n    }\n}\n```"
  },
  {
    "task": "Create a class for a camera with attributes for resolution, brand, and model, and a method to take a picture.",
    "code": "```swift\nclass Camera {\n    var resolution: String\n    var brand: String\n    var model: String\n    \n    init(resolution: String, brand: String, model: String) {\n        self.resolution = resolution\n        self.brand = brand\n        self.model = model\n    }\n    \n    func takePicture() {\n        print(\"Taking a picture with the \\(brand) \\(model) camera at \\(resolution) resolution.\")\n    }\n}\n```"
  },
  {
    "task": "Design a class for a gaming console with properties for brand, model, and storage capacity, and a method to install a game.",
    "code": "```swift\nclass GamingConsole {\n    var brand: String\n    var model: String\n    var storageCapacity: Int\n    \n    init(brand: String, model: String, storageCapacity: Int) {\n        self.brand = brand\n        self.model = model\n        self.storageCapacity = storageCapacity\n    }\n    \n    func installGame(gameName: String) {\n        print(\"Installing \\(gameName) on \\(brand) \\(model)\")\n    }\n}\n```"
  },
  {
    "task": "Formulate a class for a museum exhibit with attributes for exhibit name, artist, and year, and a method to update the year.",
    "code": "```swift\nclass MuseumExhibit {\n    var exhibitName: String\n    var artist: String\n    var year: Int\n\n    init(exhibitName: String, artist: String, year: Int) {\n        self.exhibitName = exhibitName\n        self.artist = artist\n        self.year = year\n    }\n\n    func updateYear(newYear: Int) {\n        self.year = newYear\n    }\n}\n```"
  },
  {
    "task": "Construct a class for a fitness tracker with attributes for steps, calories burned, and heart rate, and a method to add steps.",
    "code": "```swift\nclass FitnessTracker {\n    var steps: Int\n    var caloriesBurned: Double\n    var heartRate: Int\n    \n    init(steps: Int, caloriesBurned: Double, heartRate: Int) {\n        self.steps = steps\n        self.caloriesBurned = caloriesBurned\n        self.heartRate = heartRate\n    }\n    \n    func addSteps(_ steps: Int) {\n        self.steps += steps\n    }\n}\n```"
  },
  {
    "task": "Build a class for an aquarium with properties for tank size, fish species, and water temperature, and a method to add a new fish.",
    "code": "```swift\nclass Aquarium {\n    var tankSize: Double\n    var fishSpecies: [String]\n    var waterTemperature: Double\n    \n    init(tankSize: Double, fishSpecies: [String], waterTemperature: Double) {\n        self.tankSize = tankSize\n        self.fishSpecies = fishSpecies\n        self.waterTemperature = waterTemperature\n    }\n    \n    func addFish(species: String) {\n        fishSpecies.append(species)\n    }\n}\n```"
  },
  {
    "task": "Create a class for a chat message with attributes for sender, content, and timestamp, and a method to edit the content.",
    "code": "```swift\nimport Foundation\n\nclass ChatMessage {\n    var sender: String\n    var content: String\n    var timestamp: Date\n    \n    init(sender: String, content: String, timestamp: Date) {\n        self.sender = sender\n        self.content = content\n        self.timestamp = timestamp\n    }\n    \n    func editContent(newContent: String) {\n        self.content = newContent\n    }\n}\n```"
  },
  {
    "task": "Design a class for a vending machine with properties for items available, prices, and a method to dispense an item.",
    "code": "```swift\nclass VendingMachine {\n    var itemsAvailable: [String: Int]\n    var prices: [String: Double]\n    \n    init(itemsAvailable: [String: Int], prices: [String: Double]) {\n        self.itemsAvailable = itemsAvailable\n        self.prices = prices\n    }\n    \n    func dispenseItem(itemName: String) -> String {\n        if let itemCount = itemsAvailable[itemName], itemCount > 0 {\n            itemsAvailable[itemName] = itemCount - 1\n            return \"Dispensed: \\(itemName)\"\n        } else {\n            return \"Item not available\"\n        }\n    }\n}\n```"
  },
  {
    "task": "Implement a class for a digital clock with attributes for current time, time zone, and a method to set an alarm.",
    "code": "```swift\nimport Foundation\n\nclass DigitalClock {\n    var currentTime: Date\n    var timeZone: TimeZone\n    private var alarmTime: Date?\n\n    init(currentTime: Date = Date(), timeZone: TimeZone = TimeZone.current) {\n        self.currentTime = currentTime\n        self.timeZone = timeZone\n    }\n\n    func setAlarm(for time: Date) {\n        alarmTime = time\n    }\n}\n```"
  },
  {
    "task": "Develop a class for a historical figure with attributes for name, birthdate, and achievements, and a method to add an achievement.",
    "code": "```swift\nclass HistoricalFigure {\n    var name: String\n    var birthdate: String\n    var achievements: [String]\n    \n    init(name: String, birthdate: String, achievements: [String] = []) {\n        self.name = name\n        self.birthdate = birthdate\n        self.achievements = achievements\n    }\n    \n    func addAchievement(_ achievement: String) {\n        achievements.append(achievement)\n    }\n}\n```"
  },
  {
    "task": "Formulate a class for a travel itinerary with attributes for destinations, travel dates, and activities, and a method to add a destination.",
    "code": "```swift\nclass TravelItinerary {\n    var destinations: [String]\n    var travelDates: [String]\n    var activities: [String]\n    \n    init(destinations: [String], travelDates: [String], activities: [String]) {\n        self.destinations = destinations\n        self.travelDates = travelDates\n        self.activities = activities\n    }\n    \n    func addDestination(destination: String) {\n        destinations.append(destination)\n    }\n}\n```"
  },
  {
    "task": "Construct a class for a fashion brand with properties for brand name, founder, and product lines, and a method to launch a new product line.",
    "code": "```swift\nclass FashionBrand {\n    var brandName: String\n    var founder: String\n    var productLines: [String]\n\n    init(brandName: String, founder: String, productLines: [String]) {\n        self.brandName = brandName\n        self.founder = founder\n        self.productLines = productLines\n    }\n\n    func launchNewProductLine(productLine: String) {\n        productLines.append(productLine)\n    }\n}\n```"
  },
  {
    "task": "Create a class for a video game with attributes for title, genre, and rating, and a method to update the rating.",
    "code": "```swift\nclass VideoGame {\n    var title: String\n    var genre: String\n    var rating: Double\n\n    init(title: String, genre: String, rating: Double) {\n        self.title = title\n        self.genre = genre\n        self.rating = rating\n    }\n\n    func updateRating(newRating: Double) {\n        self.rating = newRating\n    }\n}\n```"
  },
  {
    "task": "Build a class for a scientific experiment with attributes for experiment name, hypothesis, and results, and a method to record results.",
    "code": "```swift\nclass ScientificExperiment {\n    var experimentName: String\n    var hypothesis: String\n    var results: [String]\n    \n    init(experimentName: String, hypothesis: String) {\n        self.experimentName = experimentName\n        self.hypothesis = hypothesis\n        self.results = []\n    }\n    \n    func recordResult(result: String) {\n        results.append(result)\n    }\n}\n```"
  },
  {
    "task": "Design a class for a gourmet dish with properties for dish name, ingredients, and cooking time, and a method to change cooking time.",
    "code": "```swift\nclass GourmetDish {\n    var dishName: String\n    var ingredients: [String]\n    var cookingTime: Int\n    \n    init(dishName: String, ingredients: [String], cookingTime: Int) {\n        self.dishName = dishName\n        self.ingredients = ingredients\n        self.cookingTime = cookingTime\n    }\n    \n    func changeCookingTime(to newCookingTime: Int) {\n        self.cookingTime = newCookingTime\n    }\n}\n```"
  },
  {
    "task": "Implement a class for a political office with attributes for office title, holder, and term length, and a method to change the holder.",
    "code": "```swift\nclass PoliticalOffice {\n    var officeTitle: String\n    var holder: String\n    var termLength: Int\n    \n    init(officeTitle: String, holder: String, termLength: Int) {\n        self.officeTitle = officeTitle\n        self.holder = holder\n        self.termLength = termLength\n    }\n    \n    func changeHolder(newHolder: String) {\n        self.holder = newHolder\n    }\n}\n```"
  },
  {
    "task": "Develop a class for an astronomical object with properties for name, type, and distance from Earth, and a method to update the distance.",
    "code": "```swift\nclass AstronomicalObject {\n    var name: String\n    var type: String\n    var distanceFromEarth: Double\n    \n    init(name: String, type: String, distanceFromEarth: Double) {\n        self.name = name\n        self.type = type\n        self.distanceFromEarth = distanceFromEarth\n    }\n    \n    func updateDistance(_ newDistance: Double) {\n        self.distanceFromEarth = newDistance\n    }\n}\n```"
  },
  {
    "task": "Formulate a class for a public transportation route with attributes for route number, stops, and schedule, and a method to add a stop.",
    "code": "```swift\nclass PublicTransportationRoute {\n    var routeNumber: Int\n    var stops: [String]\n    var schedule: [String]\n\n    init(routeNumber: Int, stops: [String], schedule: [String]) {\n        self.routeNumber = routeNumber\n        self.stops = stops\n        self.schedule = schedule\n    }\n\n    func addStop(stop: String) {\n        stops.append(stop)\n    }\n}\n```"
  },
  {
    "task": "Construct a class for a board game with properties for game name, player count, and rules, and a method to change the rules.",
    "code": "```swift\nclass BoardGame {\n    var gameName: String\n    var playerCount: Int\n    var rules: String\n    \n    init(gameName: String, playerCount: Int, rules: String) {\n        self.gameName = gameName\n        self.playerCount = playerCount\n        self.rules = rules\n    }\n    \n    func changeRules(newRules: String) {\n        self.rules = newRules\n    }\n}\n```"
  },
  {
    "task": "Create a class for a customer loyalty program with attributes for program name, points, and rewards, and a method to redeem points.",
    "code": "```swift\nclass LoyaltyProgram {\n    var programName: String\n    var points: Int\n    var rewards: [String]\n    \n    init(programName: String, points: Int, rewards: [String]) {\n        self.programName = programName\n        self.points = points\n        self.rewards = rewards\n    }\n    \n    func redeemPoints(pointsToRedeem: Int) -> Bool {\n        if pointsToRedeem <= points {\n            points -= pointsToRedeem\n            return true\n        } else {\n            return false\n        }\n    }\n}\n```"
  },
  {
    "task": "Design a class for an art gallery with properties for gallery name, location, and exhibitions, and a method to add a new exhibition.",
    "code": "```swift\nclass ArtGallery {\n    var galleryName: String\n    var location: String\n    var exhibitions: [String]\n    \n    init(galleryName: String, location: String, exhibitions: [String] = []) {\n        self.galleryName = galleryName\n        self.location = location\n        self.exhibitions = exhibitions\n    }\n    \n    func addExhibition(newExhibition: String) {\n        exhibitions.append(newExhibition)\n    }\n}\n```"
  },
  {
    "task": "Build a class for a personal blog with attributes for blog name, posts, and a method to add a new post.",
    "code": "```swift\nclass PersonalBlog {\n    var blogName: String\n    var posts: [String]\n    \n    init(blogName: String) {\n        self.blogName = blogName\n        self.posts = []\n    }\n    \n    func addPost(_ post: String) {\n        posts.append(post)\n    }\n}\n```"
  },
  {
    "task": "Implement a class for a mobile application with properties for app name, version, and developer, and a method to update the version.",
    "code": "```swift\nclass MobileApp {\n    var appName: String\n    var version: String\n    var developer: String\n    \n    init(appName: String, version: String, developer: String) {\n        self.appName = appName\n        self.version = version\n        self.developer = developer\n    }\n    \n    func updateVersion(to newVersion: String) {\n        self.version = newVersion\n    }\n}\n```"
  },
  {
    "task": "Develop a class for a language translator with attributes for source language, target language, and translation method, and a method to translate a text.",
    "code": "```swift\nclass LanguageTranslator {\n    var sourceLanguage: String\n    var targetLanguage: String\n    var translationMethod: String\n\n    init(sourceLanguage: String, targetLanguage: String, translationMethod: String) {\n        self.sourceLanguage = sourceLanguage\n        self.targetLanguage = targetLanguage\n        self.translationMethod = translationMethod\n    }\n\n    func translate(text: String) -> String {\n        // Placeholder for translation logic\n        return \"Translated text from \\(sourceLanguage) to \\(targetLanguage) using \\(translationMethod)\"\n    }\n}\n```"
  },
  {
    "task": "Formulate a class for a culinary school with properties for school name, courses offered, and a method to add a new course.",
    "code": "```swift\nclass CulinarySchool {\n    var schoolName: String\n    var coursesOffered: [String]\n    \n    init(schoolName: String, coursesOffered: [String] = []) {\n        self.schoolName = schoolName\n        self.coursesOffered = coursesOffered\n    }\n    \n    func addCourse(courseName: String) {\n        coursesOffered.append(courseName)\n    }\n}\n```"
  },
  {
    "task": "Construct a class for a musical band with attributes for band name, members, and genre, and a method to add a new member.",
    "code": "```swift\nclass MusicalBand {\n    var bandName: String\n    var members: [String]\n    var genre: String\n    \n    init(bandName: String, members: [String], genre: String) {\n        self.bandName = bandName\n        self.members = members\n        self.genre = genre\n    }\n    \n    func addMember(_ newMember: String) {\n        members.append(newMember)\n    }\n}\n```"
  },
  {
    "task": "Create a class for a television series with properties for series title, episodes, and network, and a method to add a new episode.",
    "code": "```swift\nclass TelevisionSeries {\n    var seriesTitle: String\n    var episodes: [String]\n    var network: String\n    \n    init(seriesTitle: String, episodes: [String], network: String) {\n        self.seriesTitle = seriesTitle\n        self.episodes = episodes\n        self.network = network\n    }\n    \n    func addEpisode(newEpisode: String) {\n        episodes.append(newEpisode)\n    }\n}\n```"
  },
  {
    "task": "Design a class for a wildlife reserve with attributes for reserve name, species protected, and area size, and a method to expand the area.",
    "code": "```swift\nclass WildlifeReserve {\n    var reserveName: String\n    var speciesProtected: [String]\n    var areaSize: Double\n    \n    init(reserveName: String, speciesProtected: [String], areaSize: Double) {\n        self.reserveName = reserveName\n        self.speciesProtected = speciesProtected\n        self.areaSize = areaSize\n    }\n    \n    func expandArea(by additionalArea: Double) {\n        areaSize += additionalArea\n    }\n}\n```"
  },
  {
    "task": "Build a class for a luxury car with properties for brand, model, and price, and a method to update the price.",
    "code": "```swift\nclass LuxuryCar {\n    var brand: String\n    var model: String\n    var price: Double\n\n    init(brand: String, model: String, price: Double) {\n        self.brand = brand\n        self.model = model\n        self.price = price\n    }\n\n    func updatePrice(newPrice: Double) {\n        self.price = newPrice\n    }\n}\n```"
  },
  {
    "task": "Implement a class for a scientific journal with attributes for journal name, articles, and impact factor, and a method to add a new article.",
    "code": "```swift\nclass ScientificJournal {\n    var journalName: String\n    var articles: [String]\n    var impactFactor: Double\n    \n    init(journalName: String, impactFactor: Double) {\n        self.journalName = journalName\n        self.articles = []\n        self.impactFactor = impactFactor\n    }\n    \n    func addArticle(article: String) {\n        articles.append(article)\n    }\n}\n```"
  },
  {
    "task": "Develop a class for a historical monument with properties for monument name, location, and year established, and a method to update the location.",
    "code": "```swift\nclass HistoricalMonument {\n    var monumentName: String\n    var location: String\n    var yearEstablished: Int\n    \n    init(monumentName: String, location: String, yearEstablished: Int) {\n        self.monumentName = monumentName\n        self.location = location\n        self.yearEstablished = yearEstablished\n    }\n    \n    func updateLocation(newLocation: String) {\n        self.location = newLocation\n    }\n}\n```"
  },
  {
    "task": "Formulate a class for an educational course with attributes for course title, instructor, and syllabus, and a method to update the syllabus.",
    "code": "```swift\nclass EducationalCourse {\n    var courseTitle: String\n    var instructor: String\n    var syllabus: String\n    \n    init(courseTitle: String, instructor: String, syllabus: String) {\n        self.courseTitle = courseTitle\n        self.instructor = instructor\n        self.syllabus = syllabus\n    }\n    \n    func updateSyllabus(newSyllabus: String) {\n        self.syllabus = newSyllabus\n    }\n}\n```"
  },
  {
    "task": "Construct a class for a city park with properties for park name, facilities, and opening hours, and a method to add a new facility.",
    "code": "```swift\nclass CityPark {\n    var parkName: String\n    var facilities: [String]\n    var openingHours: String\n\n    init(parkName: String, facilities: [String], openingHours: String) {\n        self.parkName = parkName\n        self.facilities = facilities\n        self.openingHours = openingHours\n    }\n\n    func addFacility(_ facility: String) {\n        facilities.append(facility)\n    }\n}\n```"
  },
  {
    "task": "Create a class for a fitness class with attributes for class name, instructor, and schedule, and a method to update the schedule.",
    "code": "```swift\nclass FitnessClass {\n    var className: String\n    var instructor: String\n    var schedule: String\n\n    init(className: String, instructor: String, schedule: String) {\n        self.className = className\n        self.instructor = instructor\n        self.schedule = schedule\n    }\n\n    func updateSchedule(newSchedule: String) {\n        self.schedule = newSchedule\n    }\n}\n```"
  },
  {
    "task": "Design a class for a virtual reality game with properties for game name, platform, and VR compatibility, and a method to change the platform.",
    "code": "```swift\nclass VirtualRealityGame {\n    var gameName: String\n    var platform: String\n    var vrCompatible: Bool\n\n    init(gameName: String, platform: String, vrCompatible: Bool) {\n        self.gameName = gameName\n        self.platform = platform\n        self.vrCompatible = vrCompatible\n    }\n\n    func changePlatform(to newPlatform: String) {\n        self.platform = newPlatform\n    }\n}\n```"
  },
  {
    "task": "Build a class for a mountain range with attributes for range name, highest peak, and countries covered, and a method to add a new peak.",
    "code": "```swift\nclass MountainRange {\n    var rangeName: String\n    var highestPeak: String\n    var countriesCovered: [String]\n    var peaks: [String]\n\n    init(rangeName: String, highestPeak: String, countriesCovered: [String], peaks: [String] = []) {\n        self.rangeName = rangeName\n        self.highestPeak = highestPeak\n        self.countriesCovered = countriesCovered\n        self.peaks = peaks\n    }\n\n    func addPeak(_ peak: String) {\n        peaks.append(peak)\n    }\n}\n```"
  },
  {
    "task": "Implement a class for a documentary film with properties for title, director, and subject, and a method to update the subject.",
    "code": "```swift\nclass DocumentaryFilm {\n    var title: String\n    var director: String\n    var subject: String\n    \n    init(title: String, director: String, subject: String) {\n        self.title = title\n        self.director = director\n        self.subject = subject\n    }\n    \n    func updateSubject(newSubject: String) {\n        self.subject = newSubject\n    }\n}\n```"
  },
  {
    "task": "Develop a class for a classical music composition with attributes for composition name, composer, and duration, and a method to change the duration.",
    "code": "```swift\nclass ClassicalMusicComposition {\n    var compositionName: String\n    var composer: String\n    var duration: Int\n\n    init(compositionName: String, composer: String, duration: Int) {\n        self.compositionName = compositionName\n        self.composer = composer\n        self.duration = duration\n    }\n\n    func changeDuration(to newDuration: Int) {\n        self.duration = newDuration\n    }\n}\n```"
  },
  {
    "task": "Formulate a class for a public library with properties for library name, books available, and membership, and a method to add a new book.",
    "code": "```swift\nclass PublicLibrary {\n    var libraryName: String\n    var booksAvailable: [String]\n    var membership: Bool\n    \n    init(libraryName: String, booksAvailable: [String], membership: Bool) {\n        self.libraryName = libraryName\n        self.booksAvailable = booksAvailable\n        self.membership = membership\n    }\n    \n    func addNewBook(bookName: String) {\n        booksAvailable.append(bookName)\n    }\n}\n```"
  },
  {
    "task": "Construct a class for a tech startup with attributes for startup name, founder, and funding, and a method to raise additional funding.",
    "code": "```swift\nclass TechStartup {\n    var startupName: String\n    var founder: String\n    var funding: Double\n    \n    init(startupName: String, founder: String, funding: Double) {\n        self.startupName = startupName\n        self.founder = founder\n        self.funding = funding\n    }\n    \n    func raiseFunding(amount: Double) {\n        self.funding += amount\n    }\n}\n```"
  }
]