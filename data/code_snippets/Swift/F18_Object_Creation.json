[
  {
    "task": "Create a new instance of a class that represents a book, with properties for title, author, and ISBN number.",
    "code": "```swift\nclass Book {\n    var title: String\n    var author: String\n    var isbn: String\n    \n    init(title: String, author: String, isbn: String) {\n        self.title = title\n        self.author = author\n        self.isbn = isbn\n    }\n}\n\nlet newBook = Book(title: \"1984\", author: \"George Orwell\", isbn: \"0451524934\")\n```"
  },
  {
    "task": "Instantiate an object of a class named Car, and set its make, model, and year attributes.",
    "code": "```swift\nclass Car {\n    var make: String\n    var model: String\n    var year: Int\n    \n    init(make: String, model: String, year: Int) {\n        self.make = make\n        self.model = model\n        self.year = year\n    }\n}\n\nlet myCar = Car(make: \"Toyota\", model: \"Corolla\", year: 2020)\n```"
  },
  {
    "task": "Develop a class to represent a rectangle, then create an object with specific width and height.",
    "code": "```swift\nclass Rectangle {\n    var width: Double\n    var height: Double\n    \n    init(width: Double, height: Double) {\n        self.width = width\n        self.height = height\n    }\n}\n\nlet rectangle = Rectangle(width: 10.0, height: 5.0)\n```"
  },
  {
    "task": "Construct an object of a class Person, initializing it with a name and age.",
    "code": "```swift\nclass Person {\n    var name: String\n    var age: Int\n    \n    init(name: String, age: Int) {\n        self.name = name\n        self.age = age\n    }\n}\n\nlet person = Person(name: \"John Doe\", age: 30)\n```"
  },
  {
    "task": "Create a new object from a class called Circle, initializing it with a radius value.",
    "code": "```swift\nclass Circle {\n    var radius: Double\n    \n    init(radius: Double) {\n        self.radius = radius\n    }\n}\n\nlet circle = Circle(radius: 5.0)\n```"
  },
  {
    "task": "Instantiate a class named Student with properties for name, student ID, and GPA.",
    "code": "```swift\nclass Student {\n    var name: String\n    var studentID: Int\n    var gpa: Double\n    \n    init(name: String, studentID: Int, gpa: Double) {\n        self.name = name\n        self.studentID = studentID\n        self.gpa = gpa\n    }\n}\n\n// Creating an instance of the Student class\nlet student = Student(name: \"Alice\", studentID: 123456, gpa: 3.8)\n```"
  },
  {
    "task": "Design a class for a smartphone, then create an instance with specific brand, model, and storage capacity.",
    "code": "```swift\nclass Smartphone {\n    var brand: String\n    var model: String\n    var storageCapacity: Int\n    \n    init(brand: String, model: String, storageCapacity: Int) {\n        self.brand = brand\n        self.model = model\n        self.storageCapacity = storageCapacity\n    }\n}\n\nlet mySmartphone = Smartphone(brand: \"Apple\", model: \"iPhone 14\", storageCapacity: 128)\n```"
  },
  {
    "task": "Create an object of a class named BankAccount, initializing it with an account number and balance.",
    "code": "```swift\nclass BankAccount {\n    var accountNumber: String\n    var balance: Double\n    \n    init(accountNumber: String, balance: Double) {\n        self.accountNumber = accountNumber\n        self.balance = balance\n    }\n}\n\nlet myAccount = BankAccount(accountNumber: \"123456789\", balance: 1000.0)\n```"
  },
  {
    "task": "Write a class for a movie, then instantiate it with a title, director, and release year.",
    "code": "```swift\nclass Movie {\n    var title: String\n    var director: String\n    var releaseYear: Int\n    \n    init(title: String, director: String, releaseYear: Int) {\n        self.title = title\n        self.director = director\n        self.releaseYear = releaseYear\n    }\n}\n\nlet myMovie = Movie(title: \"Inception\", director: \"Christopher Nolan\", releaseYear: 2010)\n```"
  },
  {
    "task": "Define a class representing a point in 2D space and create an object with x and y coordinates.",
    "code": "```swift\nclass Point {\n    var x: Double\n    var y: Double\n    \n    init(x: Double, y: Double) {\n        self.x = x\n        self.y = y\n    }\n}\n\nlet point = Point(x: 3.0, y: 4.0)\n```"
  },
  {
    "task": "Create an instance of a class called Computer with attributes for CPU, RAM, and storage.",
    "code": "```swift\nclass Computer {\n    var CPU: String\n    var RAM: Int\n    var storage: Int\n    \n    init(CPU: String, RAM: Int, storage: Int) {\n        self.CPU = CPU\n        self.RAM = RAM\n        self.storage = storage\n    }\n}\n\nlet myComputer = Computer(CPU: \"Intel i7\", RAM: 16, storage: 512)\n```"
  },
  {
    "task": "Design a class for a Song with properties for title, artist, and duration, and instantiate it.",
    "code": "```swift\nclass Song {\n    var title: String\n    var artist: String\n    var duration: Int\n    \n    init(title: String, artist: String, duration: Int) {\n        self.title = title\n        self.artist = artist\n        self.duration = duration\n    }\n}\n\nlet song = Song(title: \"Imagine\", artist: \"John Lennon\", duration: 183)\n```"
  },
  {
    "task": "Create a new instance of a class named Pet, initializing it with type, breed, and age.",
    "code": "```swift\nclass Pet {\n    var type: String\n    var breed: String\n    var age: Int\n    \n    init(type: String, breed: String, age: Int) {\n        self.type = type\n        self.breed = breed\n        self.age = age\n    }\n}\n\nlet myPet = Pet(type: \"Dog\", breed: \"Golden Retriever\", age: 3)\n```"
  },
  {
    "task": "Instantiate an object of a class named House with attributes for address, number of bedrooms, and price.",
    "code": "```swift\nclass House {\n    var address: String\n    var numberOfBedrooms: Int\n    var price: Double\n\n    init(address: String, numberOfBedrooms: Int, price: Double) {\n        self.address = address\n        self.numberOfBedrooms = numberOfBedrooms\n        self.price = price\n    }\n}\n\nlet myHouse = House(address: \"123 Main St\", numberOfBedrooms: 3, price: 250000.0)\n```"
  },
  {
    "task": "Develop a class for a Camera, then create an object with resolution and zoom level attributes.",
    "code": "```swift\nclass Camera {\n    var resolution: String\n    var zoomLevel: Int\n    \n    init(resolution: String, zoomLevel: Int) {\n        self.resolution = resolution\n        self.zoomLevel = zoomLevel\n    }\n}\n\nlet camera = Camera(resolution: \"1080p\", zoomLevel: 5)\n```"
  },
  {
    "task": "Construct an object from a class named Bicycle with properties for brand, type, and gear count.",
    "code": "```swift\nclass Bicycle {\n    var brand: String\n    var type: String\n    var gearCount: Int\n    \n    init(brand: String, type: String, gearCount: Int) {\n        self.brand = brand\n        self.type = type\n        self.gearCount = gearCount\n    }\n}\n\nlet myBicycle = Bicycle(brand: \"Trek\", type: \"Mountain\", gearCount: 21)\n```"
  },
  {
    "task": "Create a class for a book author with name and nationality, then instantiate it.",
    "code": "```swift\nclass Author {\n    var name: String\n    var nationality: String\n\n    init(name: String, nationality: String) {\n        self.name = name\n        self.nationality = nationality\n    }\n}\n\nlet author = Author(name: \"J.K. Rowling\", nationality: \"British\")\n```"
  },
  {
    "task": "Define a class representing a video game with attributes for title, genre, and platform, and create an object.",
    "code": "```swift\nclass VideoGame {\n    var title: String\n    var genre: String\n    var platform: String\n    \n    init(title: String, genre: String, platform: String) {\n        self.title = title\n        self.genre = genre\n        self.platform = platform\n    }\n}\n\nlet game = VideoGame(title: \"The Legend of Zelda\", genre: \"Adventure\", platform: \"Nintendo Switch\")\n```"
  },
  {
    "task": "Instantiate a class named Plane with properties for airline, model, and capacity.",
    "code": "```swift\nclass Plane {\n    var airline: String\n    var model: String\n    var capacity: Int\n    \n    init(airline: String, model: String, capacity: Int) {\n        self.airline = airline\n        self.model = model\n        self.capacity = capacity\n    }\n}\n\nlet plane = Plane(airline: \"Delta\", model: \"Boeing 747\", capacity: 400)\n```"
  },
  {
    "task": "Create a new object of a class called Lamp, initializing it with color and brightness level.",
    "code": "```swift\nclass Lamp {\n    var color: String\n    var brightness: Int\n\n    init(color: String, brightness: Int) {\n        self.color = color\n        self.brightness = brightness\n    }\n}\n\nlet myLamp = Lamp(color: \"Red\", brightness: 75)\n```"
  },
  {
    "task": "Design a class for a TV show with properties for title, season, and episode count, then instantiate it.",
    "code": "```swift\nclass TVShow {\n    var title: String\n    var season: Int\n    var episodeCount: Int\n\n    init(title: String, season: Int, episodeCount: Int) {\n        self.title = title\n        self.season = season\n        self.episodeCount = episodeCount\n    }\n}\n\nlet myFavoriteShow = TVShow(title: \"Swift Programming\", season: 1, episodeCount: 10)\n```"
  },
  {
    "task": "Instantiate an object of a class named Garden with attributes for size and number of plants.",
    "code": "```swift\nclass Garden {\n    var size: Double\n    var numberOfPlants: Int\n    \n    init(size: Double, numberOfPlants: Int) {\n        self.size = size\n        self.numberOfPlants = numberOfPlants\n    }\n}\n\nlet myGarden = Garden(size: 25.0, numberOfPlants: 10)\n```"
  },
  {
    "task": "Develop a class for a Train, then create an object with properties for type and number of carriages.",
    "code": "```swift\nclass Train {\n    var type: String\n    var numberOfCarriages: Int\n\n    init(type: String, numberOfCarriages: Int) {\n        self.type = type\n        self.numberOfCarriages = numberOfCarriages\n    }\n}\n\nlet myTrain = Train(type: \"Freight\", numberOfCarriages: 10)\n```"
  },
  {
    "task": "Define a class representing a planet with attributes for name, size, and distance from the sun, and create an object.",
    "code": "```swift\nclass Planet {\n    var name: String\n    var size: Double\n    var distanceFromSun: Double\n    \n    init(name: String, size: Double, distanceFromSun: Double) {\n        self.name = name\n        self.size = size\n        self.distanceFromSun = distanceFromSun\n    }\n}\n\nlet earth = Planet(name: \"Earth\", size: 12742.0, distanceFromSun: 149.6)\n```"
  },
  {
    "task": "Create an instance of a class named Fridge with properties for brand and capacity.",
    "code": "```swift\nclass Fridge {\n    var brand: String\n    var capacity: Int\n    \n    init(brand: String, capacity: Int) {\n        self.brand = brand\n        self.capacity = capacity\n    }\n}\n\nlet fridgeInstance = Fridge(brand: \"Samsung\", capacity: 350)\n```"
  },
  {
    "task": "Design a class for a Restaurant with attributes for name, cuisine type, and location, then create an instance.",
    "code": "```swift\nclass Restaurant {\n    var name: String\n    var cuisineType: String\n    var location: String\n\n    init(name: String, cuisineType: String, location: String) {\n        self.name = name\n        self.cuisineType = cuisineType\n        self.location = location\n    }\n}\n\nlet myRestaurant = Restaurant(name: \"Gourmet Place\", cuisineType: \"Italian\", location: \"Downtown\")\n```"
  },
  {
    "task": "Create a new object from a class named Bookstore, initializing it with name and number of books.",
    "code": "```swift\nclass Bookstore {\n    var name: String\n    var numberOfBooks: Int\n    \n    init(name: String, numberOfBooks: Int) {\n        self.name = name\n        self.numberOfBooks = numberOfBooks\n    }\n}\n\nlet newBookstore = Bookstore(name: \"The Swift Library\", numberOfBooks: 1000)\n```"
  },
  {
    "task": "Instantiate a class named Library with properties for total books and number of members.",
    "code": "```swift\nclass Library {\n    var totalBooks: Int\n    var numberOfMembers: Int\n\n    init(totalBooks: Int, numberOfMembers: Int) {\n        self.totalBooks = totalBooks\n        self.numberOfMembers = numberOfMembers\n    }\n}\n\nlet myLibrary = Library(totalBooks: 1000, numberOfMembers: 150)\n```"
  },
  {
    "task": "Write a class for a Beverage with properties for name, type, and volume, and instantiate it.",
    "code": "```swift\nclass Beverage {\n    var name: String\n    var type: String\n    var volume: Double\n\n    init(name: String, type: String, volume: Double) {\n        self.name = name\n        self.type = type\n        self.volume = volume\n    }\n}\n\nlet myBeverage = Beverage(name: \"Coca-Cola\", type: \"Soda\", volume: 355.0)\n```"
  },
  {
    "task": "Create an object of a class named User with attributes for username, email, and password.",
    "code": "```swift\nclass User {\n    var username: String\n    var email: String\n    var password: String\n    \n    init(username: String, email: String, password: String) {\n        self.username = username\n        self.email = email\n        self.password = password\n    }\n}\n\nlet user = User(username: \"john_doe\", email: \"john@example.com\", password: \"securepassword123\")\n```"
  },
  {
    "task": "Define a class for a Laptop with properties for brand, processor, and RAM, then instantiate it.",
    "code": "```swift\nclass Laptop {\n    var brand: String\n    var processor: String\n    var ram: Int\n    \n    init(brand: String, processor: String, ram: Int) {\n        self.brand = brand\n        self.processor = processor\n        self.ram = ram\n    }\n}\n\nlet myLaptop = Laptop(brand: \"Apple\", processor: \"M1\", ram: 16)\n```"
  },
  {
    "task": "Construct an object from a class named Mountain with attributes for name and elevation.",
    "code": "```swift\nclass Mountain {\n    var name: String\n    var elevation: Int\n    \n    init(name: String, elevation: Int) {\n        self.name = name\n        self.elevation = elevation\n    }\n}\n\nlet everest = Mountain(name: \"Everest\", elevation: 8848)\n```"
  },
  {
    "task": "Create an instance of a class called Weather with properties for temperature, humidity, and condition.",
    "code": "```swift\nclass Weather {\n    var temperature: Double\n    var humidity: Double\n    var condition: String\n\n    init(temperature: Double, humidity: Double, condition: String) {\n        self.temperature = temperature\n        self.humidity = humidity\n        self.condition = condition\n    }\n}\n\nlet currentWeather = Weather(temperature: 72.0, humidity: 50.0, condition: \"Sunny\")\n```"
  },
  {
    "task": "Design a class for a Classroom with attributes for room number and capacity, then create an instance.",
    "code": "```swift\nclass Classroom {\n    var roomNumber: Int\n    var capacity: Int\n\n    init(roomNumber: Int, capacity: Int) {\n        self.roomNumber = roomNumber\n        self.capacity = capacity\n    }\n}\n\nlet classroomInstance = Classroom(roomNumber: 101, capacity: 30)\n```"
  },
  {
    "task": "Instantiate an object of a class named Zoo with properties for name and number of animals.",
    "code": "```swift\nclass Zoo {\n    var name: String\n    var numberOfAnimals: Int\n    \n    init(name: String, numberOfAnimals: Int) {\n        self.name = name\n        self.numberOfAnimals = numberOfAnimals\n    }\n}\n\nlet myZoo = Zoo(name: \"Safari Park\", numberOfAnimals: 150)\n```"
  },
  {
    "task": "Develop a class for an Album with properties for name, artist, and release date, then instantiate it.",
    "code": "```swift\nclass Album {\n    var name: String\n    var artist: String\n    var releaseDate: String\n\n    init(name: String, artist: String, releaseDate: String) {\n        self.name = name\n        self.artist = artist\n        self.releaseDate = releaseDate\n    }\n}\n\nlet myAlbum = Album(name: \"Album Name\", artist: \"Artist Name\", releaseDate: \"Release Date\")\n```"
  },
  {
    "task": "Create a new object from a class named Hotel, initializing it with name, location, and star rating.",
    "code": "```swift\nclass Hotel {\n    var name: String\n    var location: String\n    var starRating: Int\n\n    init(name: String, location: String, starRating: Int) {\n        self.name = name\n        self.location = location\n        self.starRating = starRating\n    }\n}\n\nlet newHotel = Hotel(name: \"Grand Plaza\", location: \"New York\", starRating: 5)\n```"
  },
  {
    "task": "Write a class for a Recipe with properties for name, ingredients, and cooking time, and instantiate it.",
    "code": "```swift\nclass Recipe {\n    var name: String\n    var ingredients: [String]\n    var cookingTime: Int\n    \n    init(name: String, ingredients: [String], cookingTime: Int) {\n        self.name = name\n        self.ingredients = ingredients\n        self.cookingTime = cookingTime\n    }\n}\n\nlet myRecipe = Recipe(name: \"Pasta\", ingredients: [\"Pasta\", \"Tomato Sauce\", \"Cheese\"], cookingTime: 20)\n```"
  },
  {
    "task": "Define a class representing a Conference with attributes for name, date, and number of attendees, and create an object.",
    "code": "```swift\nclass Conference {\n    var name: String\n    var date: String\n    var numberOfAttendees: Int\n\n    init(name: String, date: String, numberOfAttendees: Int) {\n        self.name = name\n        self.date = date\n        self.numberOfAttendees = numberOfAttendees\n    }\n}\n\nlet conference = Conference(name: \"Tech Summit\", date: \"2023-11-15\", numberOfAttendees: 150)\n```"
  },
  {
    "task": "Create an instance of a class called Park with properties for name, location, and area.",
    "code": "```swift\nclass Park {\n    var name: String\n    var location: String\n    var area: Double\n    \n    init(name: String, location: String, area: Double) {\n        self.name = name\n        self.location = location\n        self.area = area\n    }\n}\n\nlet centralPark = Park(name: \"Central Park\", location: \"New York\", area: 3.41)\n```"
  },
  {
    "task": "Design a class for a Bicycle with attributes for brand, type, and wheel size, then create an instance.",
    "code": "```swift\nclass Bicycle {\n    var brand: String\n    var type: String\n    var wheelSize: Int\n\n    init(brand: String, type: String, wheelSize: Int) {\n        self.brand = brand\n        self.type = type\n        self.wheelSize = wheelSize\n    }\n}\n\nlet myBicycle = Bicycle(brand: \"Trek\", type: \"Mountain\", wheelSize: 29)\n```"
  },
  {
    "task": "Instantiate an object of a class named Festival with properties for name, location, and duration.",
    "code": "```swift\nclass Festival {\n    var name: String\n    var location: String\n    var duration: Int\n    \n    init(name: String, location: String, duration: Int) {\n        self.name = name\n        self.location = location\n        self.duration = duration\n    }\n}\n\nlet festival = Festival(name: \"Music Fest\", location: \"Central Park\", duration: 3)\n```"
  },
  {
    "task": "Develop a class for a Ship with properties for name, capacity, and type, then instantiate it.",
    "code": "```swift\nclass Ship {\n    var name: String\n    var capacity: Int\n    var type: String\n\n    init(name: String, capacity: Int, type: String) {\n        self.name = name\n        self.capacity = capacity\n        self.type = type\n    }\n}\n\nlet ship = Ship(name: \"Titanic\", capacity: 2400, type: \"Cruise\")\n```"
  },
  {
    "task": "Create an object of a class named Currency with attributes for name, symbol, and exchange rate.",
    "code": "```swift\nclass Currency {\n    var name: String\n    var symbol: String\n    var exchangeRate: Double\n    \n    init(name: String, symbol: String, exchangeRate: Double) {\n        self.name = name\n        self.symbol = symbol\n        self.exchangeRate = exchangeRate\n    }\n}\n\nlet currency = Currency(name: \"US Dollar\", symbol: \"$\", exchangeRate: 1.0)\n```"
  },
  {
    "task": "Define a class for a Gadget with properties for name, brand, and functionality, then instantiate it.",
    "code": "```swift\nclass Gadget {\n    var name: String\n    var brand: String\n    var functionality: String\n    \n    init(name: String, brand: String, functionality: String) {\n        self.name = name\n        self.brand = brand\n        self.functionality = functionality\n    }\n}\n\nlet gadget = Gadget(name: \"Smartphone\", brand: \"TechBrand\", functionality: \"Communication\")\n```"
  },
  {
    "task": "Construct an object from a class named Bridge with attributes for name, length, and location.",
    "code": "```swift\nclass Bridge {\n    var name: String\n    var length: Double\n    var location: String\n    \n    init(name: String, length: Double, location: String) {\n        self.name = name\n        self.length = length\n        self.location = location\n    }\n}\n\nlet bridge = Bridge(name: \"Golden Gate\", length: 2737.4, location: \"San Francisco\")\n```"
  },
  {
    "task": "Create an instance of a class called Forest with properties for name, area, and tree species.",
    "code": "```swift\nclass Forest {\n    var name: String\n    var area: Double\n    var treeSpecies: [String]\n    \n    init(name: String, area: Double, treeSpecies: [String]) {\n        self.name = name\n        self.area = area\n        self.treeSpecies = treeSpecies\n    }\n}\n\nlet forestInstance = Forest(name: \"Amazon\", area: 5500.0, treeSpecies: [\"Cedar\", \"Oak\", \"Pine\"])\n```"
  },
  {
    "task": "Design a class for a Sculpture with attributes for title, artist, and material, then create an instance.",
    "code": "```swift\nclass Sculpture {\n    var title: String\n    var artist: String\n    var material: String\n    \n    init(title: String, artist: String, material: String) {\n        self.title = title\n        self.artist = artist\n        self.material = material\n    }\n}\n\nlet mySculpture = Sculpture(title: \"The Thinker\", artist: \"Auguste Rodin\", material: \"Bronze\")\n```"
  },
  {
    "task": "Instantiate an object of a class named Aquarium with properties for name and number of tanks.",
    "code": "```swift\nclass Aquarium {\n    var name: String\n    var numberOfTanks: Int\n    \n    init(name: String, numberOfTanks: Int) {\n        self.name = name\n        self.numberOfTanks = numberOfTanks\n    }\n}\n\nlet myAquarium = Aquarium(name: \"Ocean World\", numberOfTanks: 5)\n```"
  },
  {
    "task": "Develop a class for a Play with properties for title, playwright, and genre, then instantiate it.",
    "code": "```swift\nclass Play {\n    var title: String\n    var playwright: String\n    var genre: String\n    \n    init(title: String, playwright: String, genre: String) {\n        self.title = title\n        self.playwright = playwright\n        self.genre = genre\n    }\n}\n\nlet play = Play(title: \"Hamlet\", playwright: \"William Shakespeare\", genre: \"Tragedy\")\n```"
  },
  {
    "task": "Create a new object from a class named Telescope, initializing it with type and focal length.",
    "code": "```swift\nclass Telescope {\n    var type: String\n    var focalLength: Double\n    \n    init(type: String, focalLength: Double) {\n        self.type = type\n        self.focalLength = focalLength\n    }\n}\n\nlet myTelescope = Telescope(type: \"Refractor\", focalLength: 1200.0)\n```"
  },
  {
    "task": "Write a class for a Monument with properties for name, location, and year built, and instantiate it.",
    "code": "```swift\nclass Monument {\n    var name: String\n    var location: String\n    var yearBuilt: Int\n    \n    init(name: String, location: String, yearBuilt: Int) {\n        self.name = name\n        self.location = location\n        self.yearBuilt = yearBuilt\n    }\n}\n\nlet monument = Monument(name: \"Eiffel Tower\", location: \"Paris\", yearBuilt: 1889)\n```"
  },
  {
    "task": "Define a class representing a Star with attributes for name, size, and distance from Earth, and create an object.",
    "code": "```swift\nclass Star {\n    var name: String\n    var size: Double\n    var distanceFromEarth: Double\n    \n    init(name: String, size: Double, distanceFromEarth: Double) {\n        self.name = name\n        self.size = size\n        self.distanceFromEarth = distanceFromEarth\n    }\n}\n\nlet star = Star(name: \"Sirius\", size: 1.71, distanceFromEarth: 8.6)\n```"
  },
  {
    "task": "Create an instance of a class called Festival with properties for name, location, and number of events.",
    "code": "```swift\nclass Festival {\n    var name: String\n    var location: String\n    var numberOfEvents: Int\n    \n    init(name: String, location: String, numberOfEvents: Int) {\n        self.name = name\n        self.location = location\n        self.numberOfEvents = numberOfEvents\n    }\n}\n\nlet festivalInstance = Festival(name: \"Summer Fest\", location: \"Beach City\", numberOfEvents: 10)\n```"
  },
  {
    "task": "Design a class for a Clock with attributes for brand, type, and display, then create an instance.",
    "code": "```swift\nclass Clock {\n    var brand: String\n    var type: String\n    var display: String\n    \n    init(brand: String, type: String, display: String) {\n        self.brand = brand\n        self.type = type\n        self.display = display\n    }\n}\n\nlet myClock = Clock(brand: \"Seiko\", type: \"Analog\", display: \"12-hour\")\n```"
  },
  {
    "task": "Instantiate an object of a class named Stadium with properties for name, capacity, and location.",
    "code": "```swift\nclass Stadium {\n    var name: String\n    var capacity: Int\n    var location: String\n    \n    init(name: String, capacity: Int, location: String) {\n        self.name = name\n        self.capacity = capacity\n        self.location = location\n    }\n}\n\nlet stadium = Stadium(name: \"National Arena\", capacity: 50000, location: \"City Center\")\n```"
  },
  {
    "task": "Develop a class for a Potion with properties for name, effect, and duration, then instantiate it.",
    "code": "```swift\nclass Potion {\n    var name: String\n    var effect: String\n    var duration: Int\n    \n    init(name: String, effect: String, duration: Int) {\n        self.name = name\n        self.effect = effect\n        self.duration = duration\n    }\n}\n\nlet potion = Potion(name: \"Healing Potion\", effect: \"Restores Health\", duration: 5)\n```"
  },
  {
    "task": "Create an object of a class named Planet with attributes for name, mass, and orbital period.",
    "code": "```swift\nclass Planet {\n    var name: String\n    var mass: Double\n    var orbitalPeriod: Double\n    \n    init(name: String, mass: Double, orbitalPeriod: Double) {\n        self.name = name\n        self.mass = mass\n        self.orbitalPeriod = orbitalPeriod\n    }\n}\n\nlet earth = Planet(name: \"Earth\", mass: 5.972e24, orbitalPeriod: 365.25)\n```"
  },
  {
    "task": "Define a class for a Lighthouse with properties for name, height, and light range, then instantiate it.",
    "code": "```swift\nclass Lighthouse {\n    var name: String\n    var height: Double\n    var lightRange: Double\n    \n    init(name: String, height: Double, lightRange: Double) {\n        self.name = name\n        self.height = height\n        self.lightRange = lightRange\n    }\n}\n\nlet lighthouse = Lighthouse(name: \"Cape Hatteras\", height: 63.0, lightRange: 24.0)\n```"
  },
  {
    "task": "Construct an object from a class named Volcano with attributes for name, height, and eruption history.",
    "code": "```swift\nclass Volcano {\n    var name: String\n    var height: Double\n    var eruptionHistory: [String]\n    \n    init(name: String, height: Double, eruptionHistory: [String]) {\n        self.name = name\n        self.height = height\n        self.eruptionHistory = eruptionHistory\n    }\n}\n\nlet volcano = Volcano(name: \"Mount Fuji\", height: 3776.24, eruptionHistory: [\"1707-12-16\", \"864-11-23\"])\n```"
  },
  {
    "task": "Create an instance of a class called Sculpture with properties for title, artist, and year created.",
    "code": "```swift\nclass Sculpture {\n    var title: String\n    var artist: String\n    var yearCreated: Int\n\n    init(title: String, artist: String, yearCreated: Int) {\n        self.title = title\n        self.artist = artist\n        self.yearCreated = yearCreated\n    }\n}\n\nlet sculpture = Sculpture(title: \"The Thinker\", artist: \"Auguste Rodin\", yearCreated: 1902)\n```"
  },
  {
    "task": "Design a class for a Ship with attributes for name, type, and displacement, then create an instance.",
    "code": "```swift\nclass Ship {\n    var name: String\n    var type: String\n    var displacement: Double\n    \n    init(name: String, type: String, displacement: Double) {\n        self.name = name\n        self.type = type\n        self.displacement = displacement\n    }\n}\n\nlet myShip = Ship(name: \"Titanic\", type: \"Cruise\", displacement: 52310.0)\n```"
  },
  {
    "task": "Instantiate an object of a class named Opera with properties for title, composer, and act count.",
    "code": "```swift\nclass Opera {\n    var title: String\n    var composer: String\n    var actCount: Int\n    \n    init(title: String, composer: String, actCount: Int) {\n        self.title = title\n        self.composer = composer\n        self.actCount = actCount\n    }\n}\n\nlet operaInstance = Opera(title: \"La Traviata\", composer: \"Giuseppe Verdi\", actCount: 3)\n```"
  },
  {
    "task": "Develop a class for a Waterfall with properties for name, height, and flow rate, then instantiate it.",
    "code": "```swift\nclass Waterfall {\n    var name: String\n    var height: Double\n    var flowRate: Double\n    \n    init(name: String, height: Double, flowRate: Double) {\n        self.name = name\n        self.height = height\n        self.flowRate = flowRate\n    }\n}\n\nlet waterfall = Waterfall(name: \"Angel Falls\", height: 807.0, flowRate: 500.0)\n```"
  },
  {
    "task": "Create a new object from a class named Castle, initializing it with name, location, and year built.",
    "code": "```swift\nclass Castle {\n    var name: String\n    var location: String\n    var yearBuilt: Int\n    \n    init(name: String, location: String, yearBuilt: Int) {\n        self.name = name\n        self.location = location\n        self.yearBuilt = yearBuilt\n    }\n}\n\nlet castle = Castle(name: \"Windsor Castle\", location: \"Windsor, England\", yearBuilt: 1070)\n```"
  },
  {
    "task": "Write a class for a Cat with properties for name, breed, and color, and instantiate it.",
    "code": "```swift\nclass Cat {\n    var name: String\n    var breed: String\n    var color: String\n    \n    init(name: String, breed: String, color: String) {\n        self.name = name\n        self.breed = breed\n        self.color = color\n    }\n}\n\nlet myCat = Cat(name: \"Whiskers\", breed: \"Siamese\", color: \"Brown\")\n```"
  },
  {
    "task": "Define a class representing a Spaceship with attributes for name, speed, and crew capacity, and create an object.",
    "code": "```swift\nclass Spaceship {\n    var name: String\n    var speed: Double\n    var crewCapacity: Int\n    \n    init(name: String, speed: Double, crewCapacity: Int) {\n        self.name = name\n        self.speed = speed\n        self.crewCapacity = crewCapacity\n    }\n}\n\nlet spaceship = Spaceship(name: \"Galaxy Cruiser\", speed: 15000.0, crewCapacity: 5)\n```"
  },
  {
    "task": "Create an instance of a class called Robot with properties for name, model, and function.",
    "code": "```swift\nclass Robot {\n    var name: String\n    var model: String\n    var function: String\n\n    init(name: String, model: String, function: String) {\n        self.name = name\n        self.model = model\n        self.function = function\n    }\n}\n\nlet robotInstance = Robot(name: \"Robo1\", model: \"X100\", function: \"Cleaning\")\n```"
  },
  {
    "task": "Design a class for a Computer Program with attributes for name, language, and lines of code, then create an instance.",
    "code": "```swift\nclass ComputerProgram {\n    var name: String\n    var language: String\n    var linesOfCode: Int\n    \n    init(name: String, language: String, linesOfCode: Int) {\n        self.name = name\n        self.language = language\n        self.linesOfCode = linesOfCode\n    }\n}\n\nlet program = ComputerProgram(name: \"MyApp\", language: \"Swift\", linesOfCode: 1000)\n```"
  },
  {
    "task": "Instantiate an object of a class named Mountain with properties for name, range, and prominence.",
    "code": "```swift\nclass Mountain {\n    var name: String\n    var range: String\n    var prominence: Double\n    \n    init(name: String, range: String, prominence: Double) {\n        self.name = name\n        self.range = range\n        self.prominence = prominence\n    }\n}\n\nlet mountain = Mountain(name: \"Everest\", range: \"Himalayas\", prominence: 8848.86)\n```"
  },
  {
    "task": "Develop a class for a Painting with properties for title, artist, and dimensions, then instantiate it.",
    "code": "```swift\nclass Painting {\n    var title: String\n    var artist: String\n    var dimensions: (width: Double, height: Double)\n    \n    init(title: String, artist: String, dimensions: (width: Double, height: Double)) {\n        self.title = title\n        self.artist = artist\n        self.dimensions = dimensions\n    }\n}\n\nlet myPainting = Painting(title: \"Starry Night\", artist: \"Vincent van Gogh\", dimensions: (width: 73.7, height: 92.1))\n```"
  },
  {
    "task": "Create an object of a class named Symphony with attributes for title, composer, and movement count.",
    "code": "```swift\nclass Symphony {\n    var title: String\n    var composer: String\n    var movementCount: Int\n\n    init(title: String, composer: String, movementCount: Int) {\n        self.title = title\n        self.composer = composer\n        self.movementCount = movementCount\n    }\n}\n\nlet symphony = Symphony(title: \"Symphony No. 5\", composer: \"Ludwig van Beethoven\", movementCount: 4)\n```"
  },
  {
    "task": "Define a class for a Dinosaur with properties for name, period, and diet, then instantiate it.",
    "code": "```swift\nclass Dinosaur {\n    var name: String\n    var period: String\n    var diet: String\n    \n    init(name: String, period: String, diet: String) {\n        self.name = name\n        self.period = period\n        self.diet = diet\n    }\n}\n\nlet dinosaur = Dinosaur(name: \"Tyrannosaurus Rex\", period: \"Cretaceous\", diet: \"Carnivore\")\n```"
  },
  {
    "task": "Construct an object from a class named River with attributes for name, length, and basin size.",
    "code": "```swift\nclass River {\n    var name: String\n    var length: Double\n    var basinSize: Double\n\n    init(name: String, length: Double, basinSize: Double) {\n        self.name = name\n        self.length = length\n        self.basinSize = basinSize\n    }\n}\n\nlet river = River(name: \"Amazon\", length: 6400.0, basinSize: 7050000.0)\n```"
  },
  {
    "task": "Create an instance of a class called Instrument with properties for name, type, and material.",
    "code": "```swift\nclass Instrument {\n    var name: String\n    var type: String\n    var material: String\n    \n    init(name: String, type: String, material: String) {\n        self.name = name\n        self.type = type\n        self.material = material\n    }\n}\n\nlet instrument = Instrument(name: \"Guitar\", type: \"String\", material: \"Wood\")\n```"
  },
  {
    "task": "Design a class for a Planetarium with attributes for name, location, and dome size, then create an instance.",
    "code": "```swift\nclass Planetarium {\n    var name: String\n    var location: String\n    var domeSize: Double\n    \n    init(name: String, location: String, domeSize: Double) {\n        self.name = name\n        self.location = location\n        self.domeSize = domeSize\n    }\n}\n\nlet planetarium = Planetarium(name: \"Galactic Center\", location: \"Downtown\", domeSize: 30.5)\n```"
  },
  {
    "task": "Instantiate an object of a class named Island with properties for name, area, and population.",
    "code": "```swift\nclass Island {\n    var name: String\n    var area: Double\n    var population: Int\n    \n    init(name: String, area: Double, population: Int) {\n        self.name = name\n        self.area = area\n        self.population = population\n    }\n}\n\nlet island = Island(name: \"Paradise\", area: 250.5, population: 1500)\n```"
  },
  {
    "task": "Develop a class for a Space Station with properties for name, crew size, and modules, then instantiate it.",
    "code": "```swift\nclass SpaceStation {\n    var name: String\n    var crewSize: Int\n    var modules: [String]\n    \n    init(name: String, crewSize: Int, modules: [String]) {\n        self.name = name\n        self.crewSize = crewSize\n        self.modules = modules\n    }\n}\n\nlet spaceStation = SpaceStation(name: \"International Space Station\", crewSize: 6, modules: [\"Habitation\", \"Laboratory\", \"Observation\"])\n```"
  },
  {
    "task": "Create a new object from a class named Dinosaur, initializing it with species and period.",
    "code": "```swift\nclass Dinosaur {\n    var species: String\n    var period: String\n    \n    init(species: String, period: String) {\n        self.species = species\n        self.period = period\n    }\n}\n\nlet dinosaur = Dinosaur(species: \"Tyrannosaurus Rex\", period: \"Cretaceous\")\n```"
  },
  {
    "task": "Write a class for a Tree with properties for species, height, and age, and instantiate it.",
    "code": "```swift\nclass Tree {\n    var species: String\n    var height: Double\n    var age: Int\n    \n    init(species: String, height: Double, age: Int) {\n        self.species = species\n        self.height = height\n        self.age = age\n    }\n}\n\nlet myTree = Tree(species: \"Oak\", height: 15.5, age: 20)\n```"
  },
  {
    "task": "Define a class representing a Firework with attributes for name, color, and duration, and create an object.",
    "code": "```swift\nclass Firework {\n    var name: String\n    var color: String\n    var duration: Int\n    \n    init(name: String, color: String, duration: Int) {\n        self.name = name\n        self.color = color\n        self.duration = duration\n    }\n}\n\nlet myFirework = Firework(name: \"Sparkler\", color: \"Red\", duration: 10)\n```"
  },
  {
    "task": "Create an instance of a class called ComicBook with properties for title, author, and issue number.",
    "code": "```swift\nclass ComicBook {\n    var title: String\n    var author: String\n    var issueNumber: Int\n    \n    init(title: String, author: String, issueNumber: Int) {\n        self.title = title\n        self.author = author\n        self.issueNumber = issueNumber\n    }\n}\n\nlet comicBook = ComicBook(title: \"The Amazing Spider-Man\", author: \"Stan Lee\", issueNumber: 1)\n```"
  },
  {
    "task": "Design a class for a Metropolis with attributes for name, population, and GDP, then create an instance.",
    "code": "```swift\nclass Metropolis {\n    var name: String\n    var population: Int\n    var gdp: Double\n\n    init(name: String, population: Int, gdp: Double) {\n        self.name = name\n        self.population = population\n        self.gdp = gdp\n    }\n}\n\nlet metropolisInstance = Metropolis(name: \"Example City\", population: 1000000, gdp: 500000000.0)\n```"
  },
  {
    "task": "Instantiate an object of a class named Dragon with properties for name, element, and age.",
    "code": "```swift\nclass Dragon {\n    var name: String\n    var element: String\n    var age: Int\n    \n    init(name: String, element: String, age: Int) {\n        self.name = name\n        self.element = element\n        self.age = age\n    }\n}\n\nlet myDragon = Dragon(name: \"Smaug\", element: \"Fire\", age: 200)\n```"
  },
  {
    "task": "Develop a class for a Novel with properties for title, author, and genre, then instantiate it.",
    "code": "```swift\nclass Novel {\n    var title: String\n    var author: String\n    var genre: String\n    \n    init(title: String, author: String, genre: String) {\n        self.title = title\n        self.author = author\n        self.genre = genre\n    }\n}\n\nlet myNovel = Novel(title: \"To Kill a Mockingbird\", author: \"Harper Lee\", genre: \"Fiction\")\n```"
  },
  {
    "task": "Create an object of a class named Satellite with attributes for name, orbit, and mission.",
    "code": "```swift\nclass Satellite {\n    var name: String\n    var orbit: String\n    var mission: String\n    \n    init(name: String, orbit: String, mission: String) {\n        self.name = name\n        self.orbit = orbit\n        self.mission = mission\n    }\n}\n\nlet satellite = Satellite(name: \"Hubble\", orbit: \"Low Earth Orbit\", mission: \"Astronomy\")\n```"
  },
  {
    "task": "Define a class for a Castle with properties for name, location, and architectural style, then instantiate it.",
    "code": "```swift\nclass Castle {\n    var name: String\n    var location: String\n    var architecturalStyle: String\n\n    init(name: String, location: String, architecturalStyle: String) {\n        self.name = name\n        self.location = location\n        self.architecturalStyle = architecturalStyle\n    }\n}\n\nlet myCastle = Castle(name: \"Windsor Castle\", location: \"Windsor, England\", architecturalStyle: \"Gothic\")\n```"
  },
  {
    "task": "Construct an object from a class named Jungle with attributes for name, area, and biodiversity.",
    "code": "```swift\nclass Jungle {\n    var name: String\n    var area: Double\n    var biodiversity: Int\n    \n    init(name: String, area: Double, biodiversity: Int) {\n        self.name = name\n        self.area = area\n        self.biodiversity = biodiversity\n    }\n}\n\nlet amazon = Jungle(name: \"Amazon\", area: 5500000, biodiversity: 30000)\n```"
  },
  {
    "task": "Create an instance of a class called Dinosaur with properties for species, size, and diet.",
    "code": "```swift\nclass Dinosaur {\n    var species: String\n    var size: String\n    var diet: String\n    \n    init(species: String, size: String, diet: String) {\n        self.species = species\n        self.size = size\n        self.diet = diet\n    }\n}\n\nlet dinosaur = Dinosaur(species: \"Tyrannosaurus Rex\", size: \"Large\", diet: \"Carnivore\")\n```"
  },
  {
    "task": "Design a class for a Superhero with attributes for name, powers, and alias, then create an instance.",
    "code": "```swift\nclass Superhero {\n    var name: String\n    var powers: [String]\n    var alias: String\n\n    init(name: String, powers: [String], alias: String) {\n        self.name = name\n        self.powers = powers\n        self.alias = alias\n    }\n}\n\nlet superhero = Superhero(name: \"Superman\", powers: [\"Flight\", \"Super Strength\", \"X-Ray Vision\"], alias: \"Clark Kent\")\n```"
  }
]