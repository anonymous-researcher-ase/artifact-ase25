[
  {
    "task": "Write a program that reads a user's name and age from the input, then prints a greeting message using both values.",
    "code": "```swift\nimport Foundation\n\nprint(\"Enter your name:\")\nif let name = readLine() {\n    print(\"Enter your age:\")\n    if let age = readLine() {\n        print(\"Hello, \\(name)! You are \\(age) years old.\")\n    }\n}\n```"
  },
  {
    "task": "Create a script that continuously reads numbers from the input and prints their running total until a negative number is entered.",
    "code": "```swift\nimport Foundation\n\nvar runningTotal = 0\n\nwhile true {\n    if let input = readLine(), let number = Int(input) {\n        if number < 0 {\n            break\n        }\n        runningTotal += number\n        print(runningTotal)\n    } else {\n        print(\"Please enter a valid number.\")\n    }\n}\n```"
  },
  {
    "task": "Design a program that asks the user for a sentence and outputs the number of words it contains.",
    "code": "```swift\nimport Foundation\n\nprint(\"Please enter a sentence:\")\nif let input = readLine() {\n    let words = input.split(separator: \" \")\n    print(\"The number of words in the sentence is: \\(words.count)\")\n}\n```"
  },
  {
    "task": "Build a command-line tool that reads a list of integers and outputs them in sorted order.",
    "code": "```swift\nimport Foundation\n\nfunc main() {\n    var integers: [Int] = []\n    while let line = readLine(), !line.isEmpty {\n        if let number = Int(line) {\n            integers.append(number)\n        } else {\n            print(\"Please enter valid integers.\")\n            return\n        }\n    }\n    let sortedIntegers = integers.sorted()\n    for number in sortedIntegers {\n        print(number)\n    }\n}\n\nmain()\n```"
  },
  {
    "task": "Develop a program that reads a file name from the input, then prints the number of lines in that file.",
    "code": "```swift\nimport Foundation\n\nif let fileName = readLine() {\n    do {\n        let fileContents = try String(contentsOfFile: fileName)\n        let lineCount = fileContents.split(separator: \"\\n\").count\n        print(lineCount)\n    } catch {\n        print(\"Error reading file: \\(error.localizedDescription)\")\n    }\n}\n```"
  },
  {
    "task": "Implement a calculator that reads two numbers and an operator (+, -, *, /) from the input and prints the result.",
    "code": "```swift\nimport Foundation\n\nprint(\"Enter first number:\")\nif let firstInput = readLine(), let firstNumber = Double(firstInput) {\n    print(\"Enter an operator (+, -, *, /):\")\n    if let operatorInput = readLine() {\n        print(\"Enter second number:\")\n        if let secondInput = readLine(), let secondNumber = Double(secondInput) {\n            var result: Double?\n            switch operatorInput {\n            case \"+\":\n                result = firstNumber + secondNumber\n            case \"-\":\n                result = firstNumber - secondNumber\n            case \"*\":\n                result = firstNumber * secondNumber\n            case \"/\":\n                if secondNumber != 0 {\n                    result = firstNumber / secondNumber\n                } else {\n                    print(\"Error: Division by zero\")\n                }\n            default:\n                print(\"Error: Invalid operator\")\n            }\n            if let result = result {\n                print(\"Result: \\(result)\")\n            }\n        }\n    }\n}\n```"
  },
  {
    "task": "Write a script that reads a user's full name and prints it in reverse order.",
    "code": "```swift\nimport Foundation\n\nprint(\"Enter your full name:\")\nif let fullName = readLine() {\n    let reversedName = String(fullName.reversed())\n    print(\"Reversed Name: \\(reversedName)\")\n}\n```"
  },
  {
    "task": "Create a program that asks for a word and checks if it is a palindrome, printing the appropriate message.",
    "code": "```swift\nimport Foundation\n\nprint(\"Enter a word:\")\nif let input = readLine() {\n    let lowercasedInput = input.lowercased()\n    let reversedInput = String(lowercasedInput.reversed())\n    if lowercasedInput == reversedInput {\n        print(\"The word is a palindrome.\")\n    } else {\n        print(\"The word is not a palindrome.\")\n    }\n}\n```"
  },
  {
    "task": "Develop a tool that reads multiple lines of text and outputs the longest line.",
    "code": "```swift\nimport Foundation\n\nvar longestLine = \"\"\nvar maxLength = 0\n\nwhile let line = readLine() {\n    if line.count > maxLength {\n        maxLength = line.count\n        longestLine = line\n    }\n}\n\nprint(longestLine)\n```"
  },
  {
    "task": "Design a script that reads a number 'n' and prints the first 'n' Fibonacci numbers.",
    "code": "```swift\nimport Foundation\n\nfunc fibonacciNumbers(upTo n: Int) -> [Int] {\n    guard n > 0 else { return [] }\n    var sequence = [0, 1]\n    while sequence.count < n {\n        let next = sequence[sequence.count - 1] + sequence[sequence.count - 2]\n        sequence.append(next)\n    }\n    return Array(sequence.prefix(n))\n}\n\nif let input = readLine(), let n = Int(input) {\n    let fibonacciSequence = fibonacciNumbers(upTo: n)\n    for number in fibonacciSequence {\n        print(number)\n    }\n}\n```"
  },
  {
    "task": "Write a program that takes a list of numbers from the input and prints only the even ones.",
    "code": "```swift\nimport Foundation\n\nif let input = readLine() {\n    let numbers = input.split(separator: \" \").compactMap { Int($0) }\n    let evenNumbers = numbers.filter { $0 % 2 == 0 }\n    evenNumbers.forEach { print($0) }\n}\n```"
  },
  {
    "task": "Create a script that reads a date (day, month, year) and prints the day of the week for that date.",
    "code": "```swift\nimport Foundation\n\nif let input = readLine() {\n    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = \"d M yyyy\"\n    \n    if let date = dateFormatter.date(from: input) {\n        dateFormatter.dateFormat = \"EEEE\"\n        let dayOfWeek = dateFormatter.string(from: date)\n        print(dayOfWeek)\n    } else {\n        print(\"Invalid date\")\n    }\n}\n```"
  },
  {
    "task": "Develop a program that reads a paragraph and counts the frequency of each letter in the text.",
    "code": "```swift\nimport Foundation\n\nfunc countLetterFrequency(in paragraph: String) -> [Character: Int] {\n    var frequency: [Character: Int] = [:]\n    \n    for character in paragraph.lowercased() {\n        if character.isLetter {\n            frequency[character, default: 0] += 1\n        }\n    }\n    \n    return frequency\n}\n\nif let input = readLine() {\n    let frequency = countLetterFrequency(in: input)\n    for (letter, count) in frequency.sorted(by: { $0.key < $1.key }) {\n        print(\"\\(letter): \\(count)\")\n    }\n}\n```"
  },
  {
    "task": "Build a tool that reads a text and a word, then prints the number of times the word appears in the text.",
    "code": "```swift\nimport Foundation\n\nfunc countOccurrences(of word: String, in text: String) -> Int {\n    let textComponents = text.components(separatedBy: .whitespacesAndNewlines)\n    return textComponents.filter { $0 == word }.count\n}\n\nprint(\"Enter the text:\")\nif let text = readLine() {\n    print(\"Enter the word to count:\")\n    if let word = readLine() {\n        let count = countOccurrences(of: word, in: text)\n        print(\"The word '\\(word)' appears \\(count) times in the text.\")\n    }\n}\n```"
  },
  {
    "task": "Implement a script that reads a temperature in Celsius and converts it to Fahrenheit, printing the result.",
    "code": "```swift\nimport Foundation\n\nif let input = readLine(), let celsius = Double(input) {\n    let fahrenheit = (celsius * 9/5) + 32\n    print(\"Temperature in Fahrenheit: \\(fahrenheit)\")\n} else {\n    print(\"Invalid input\")\n}\n```"
  },
  {
    "task": "Write a program that continuously reads input until the word 'exit' is entered, then prints all entered inputs.",
    "code": "```swift\nimport Foundation\n\nvar inputs = [String]()\nwhile let input = readLine(), input.lowercased() != \"exit\" {\n    inputs.append(input)\n}\n\nfor input in inputs {\n    print(input)\n}\n```"
  },
  {
    "task": "Create a tool that prompts for a filename, reads the file, and prints its content in uppercase.",
    "code": "```swift\nimport Foundation\n\nprint(\"Enter the filename: \", terminator: \"\")\nif let filename = readLine() {\n    do {\n        let fileContents = try String(contentsOfFile: filename, encoding: .utf8)\n        print(fileContents.uppercased())\n    } catch {\n        print(\"Error reading the file.\")\n    }\n}\n```"
  },
  {
    "task": "Develop a program that reads a series of email addresses and prints the unique domain names.",
    "code": "```swift\nimport Foundation\n\nvar domains = Set<String>()\n\nwhile let line = readLine() {\n    let components = line.split(separator: \"@\")\n    if components.count == 2 {\n        let domain = String(components[1])\n        domains.insert(domain)\n    }\n}\n\nfor domain in domains {\n    print(domain)\n}\n```"
  },
  {
    "task": "Design a script that reads a string and prints whether it contains all the letters of the alphabet.",
    "code": "```swift\nimport Foundation\n\nfunc containsAllLetters(input: String) -> Bool {\n    let alphabetSet = Set(\"abcdefghijklmnopqrstuvwxyz\")\n    let inputSet = Set(input.lowercased().filter { $0.isLetter })\n    return alphabetSet.isSubset(of: inputSet)\n}\n\nif let input = readLine() {\n    if containsAllLetters(input: input) {\n        print(\"The input contains all letters of the alphabet.\")\n    } else {\n        print(\"The input does not contain all letters of the alphabet.\")\n    }\n}\n```"
  },
  {
    "task": "Write a program that reads a number and prints its factorial.",
    "code": "```swift\nimport Foundation\n\nfunc factorial(_ n: Int) -> Int {\n    return n == 0 ? 1 : n * factorial(n - 1)\n}\n\nif let input = readLine(), let number = Int(input) {\n    print(factorial(number))\n}\n```"
  },
  {
    "task": "Create a tool that reads a list of names and prints them in alphabetical order.",
    "code": "```swift\nimport Foundation\n\nfunc readNames() -> [String] {\n    var names = [String]()\n    while let line = readLine(), !line.isEmpty {\n        names.append(line)\n    }\n    return names\n}\n\nfunc printNamesInAlphabeticalOrder(_ names: [String]) {\n    let sortedNames = names.sorted()\n    for name in sortedNames {\n        print(name)\n    }\n}\n\nlet names = readNames()\nprintNamesInAlphabeticalOrder(names)\n```"
  },
  {
    "task": "Develop a program that asks for a sentence and prints each word on a new line.",
    "code": "```swift\nimport Foundation\n\nprint(\"Enter a sentence:\")\nif let sentence = readLine() {\n    let words = sentence.split(separator: \" \")\n    for word in words {\n        print(word)\n    }\n}\n```"
  },
  {
    "task": "Build a script that reads a time in 12-hour format and converts it to 24-hour format.",
    "code": "```swift\nimport Foundation\n\nfunc convertTo24HourFormat(_ time12: String) -> String? {\n    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = \"h:mm a\"\n    dateFormatter.amSymbol = \"AM\"\n    dateFormatter.pmSymbol = \"PM\"\n    \n    if let date = dateFormatter.date(from: time12) {\n        dateFormatter.dateFormat = \"HH:mm\"\n        return dateFormatter.string(from: date)\n    }\n    return nil\n}\n\nif let input = readLine(), let convertedTime = convertTo24HourFormat(input) {\n    print(convertedTime)\n} else {\n    print(\"Invalid time format\")\n}\n```"
  },
  {
    "task": "Implement a program that reads two strings and checks if they are anagrams, printing the result.",
    "code": "```swift\nimport Foundation\n\nfunc areAnagrams(_ s1: String, _ s2: String) -> Bool {\n    return s1.sorted() == s2.sorted()\n}\n\nprint(\"Enter the first string:\")\nif let firstString = readLine() {\n    print(\"Enter the second string:\")\n    if let secondString = readLine() {\n        if areAnagrams(firstString, secondString) {\n            print(\"The strings are anagrams.\")\n        } else {\n            print(\"The strings are not anagrams.\")\n        }\n    }\n}\n```"
  },
  {
    "task": "Write a tool that reads a paragraph and prints the first and last sentence.",
    "code": "```swift\nimport Foundation\n\nfunc readParagraph() -> String {\n    var paragraph = \"\"\n    while let line = readLine(), !line.isEmpty {\n        paragraph += line + \" \"\n    }\n    return paragraph.trimmingCharacters(in: .whitespaces)\n}\n\nfunc splitIntoSentences(paragraph: String) -> [String] {\n    let sentences = paragraph.split { $0 == \".\" || $0 == \"!\" || $0 == \"?\" }\n    return sentences.map { $0.trimmingCharacters(in: .whitespaces) }\n}\n\nlet paragraph = readParagraph()\nlet sentences = splitIntoSentences(paragraph: paragraph)\n\nif let firstSentence = sentences.first, let lastSentence = sentences.last {\n    print(firstSentence + \".\")\n    print(lastSentence + \".\")\n}\n```"
  },
  {
    "task": "Create a program that reads a binary number and converts it to decimal.",
    "code": "```swift\nimport Foundation\n\nfunc binaryToDecimal(_ binary: String) -> Int? {\n    return Int(binary, radix: 2)\n}\n\nprint(\"Enter a binary number:\")\nif let input = readLine(), let decimalValue = binaryToDecimal(input) {\n    print(\"Decimal value: \\(decimalValue)\")\n} else {\n    print(\"Invalid binary number.\")\n}\n```"
  },
  {
    "task": "Develop a script that reads a series of scores and prints the average score.",
    "code": "```swift\nimport Foundation\n\nfunc readScoresAndCalculateAverage() {\n    var scores = [Double]()\n    print(\"Enter scores one by one, and type 'done' when finished:\")\n\n    while let input = readLine() {\n        if input.lowercased() == \"done\" {\n            break\n        }\n\n        if let score = Double(input) {\n            scores.append(score)\n        } else {\n            print(\"Invalid input. Please enter a number or 'done'.\")\n        }\n    }\n\n    let totalScores = scores.reduce(0, +)\n    let average = scores.isEmpty ? 0 : totalScores / Double(scores.count)\n    print(\"Average score: \\(average)\")\n}\n\nreadScoresAndCalculateAverage()\n```"
  },
  {
    "task": "Design a program that reads a list of integers and prints the prime numbers.",
    "code": "```swift\nimport Foundation\n\nfunc isPrime(_ num: Int) -> Bool {\n    if num <= 1 { return false }\n    if num <= 3 { return true }\n    if num % 2 == 0 || num % 3 == 0 { return false }\n    var i = 5\n    while i * i <= num {\n        if num % i == 0 || num % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n    }\n    return true\n}\n\nif let input = readLine() {\n    let numbers = input.split(separator: \" \").compactMap { Int($0) }\n    let primes = numbers.filter { isPrime($0) }\n    primes.forEach { print($0) }\n}\n```"
  },
  {
    "task": "Write a script that reads a word and prints its Pig Latin translation.",
    "code": "```swift\nimport Foundation\n\nfunc pigLatinTranslation(word: String) -> String {\n    let vowels = CharacterSet(charactersIn: \"aeiouAEIOU\")\n    if let firstCharacter = word.first, let range = firstCharacter.unicodeScalars.first.map({ vowels.contains($0) }), range {\n        return word + \"ay\"\n    } else {\n        let index = word.index(after: word.startIndex)\n        let first = word[word.startIndex]\n        let rest = word[index...]\n        return rest + String(first) + \"ay\"\n    }\n}\n\nif let input = readLine() {\n    let translation = pigLatinTranslation(word: input)\n    print(translation)\n}\n```"
  },
  {
    "task": "Create a tool that reads a matrix of numbers and prints its transpose.",
    "code": "```swift\nimport Foundation\n\nfunc readMatrix() -> [[Int]] {\n    var matrix = [[Int]]()\n    while let line = readLine(), !line.isEmpty {\n        let row = line.split(separator: \" \").compactMap { Int($0) }\n        matrix.append(row)\n    }\n    return matrix\n}\n\nfunc transpose(matrix: [[Int]]) -> [[Int]] {\n    guard let firstRow = matrix.first else { return [] }\n    let rowCount = matrix.count\n    let columnCount = firstRow.count\n\n    var transposed = Array(repeating: Array(repeating: 0, count: rowCount), count: columnCount)\n\n    for i in 0..<rowCount {\n        for j in 0..<columnCount {\n            transposed[j][i] = matrix[i][j]\n        }\n    }\n    return transposed\n}\n\nfunc printMatrix(_ matrix: [[Int]]) {\n    for row in matrix {\n        print(row.map { String($0) }.joined(separator: \" \"))\n    }\n}\n\nlet matrix = readMatrix()\nlet transposedMatrix = transpose(matrix: matrix)\nprintMatrix(transposedMatrix)\n```"
  },
  {
    "task": "Implement a program that reads a URL and prints the domain name.",
    "code": "```swift\nimport Foundation\n\nif let input = readLine(), let url = URL(string: input), let host = url.host {\n    print(host)\n} else {\n    print(\"Invalid URL\")\n}\n```"
  },
  {
    "task": "Write a script that reads a number and prints its multiplication table up to 12.",
    "code": "```swift\nimport Foundation\n\nif let input = readLine(), let number = Int(input) {\n    for i in 1...12 {\n        print(\"\\(number) x \\(i) = \\(number * i)\")\n    }\n}\n```"
  },
  {
    "task": "Develop a program that reads a list of dates and prints them in order of occurrence.",
    "code": "```swift\nimport Foundation\n\nvar dates = [Date]()\n\nwhile let input = readLine(), !input.isEmpty {\n    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = \"yyyy-MM-dd\"\n    if let date = dateFormatter.date(from: input) {\n        dates.append(date)\n    }\n}\n\ndates.sort()\n\nlet outputFormatter = DateFormatter()\noutputFormatter.dateFormat = \"yyyy-MM-dd\"\n\nfor date in dates {\n    print(outputFormatter.string(from: date))\n}\n```"
  },
  {
    "task": "Create a tool that reads a text and prints it with each sentence capitalized.",
    "code": "```swift\nimport Foundation\n\nfunc capitalizeSentences(in text: String) -> String {\n    let sentences = text.split(separator: \".\", omittingEmptySubsequences: false)\n    let capitalizedSentences = sentences.map { sentence -> String in\n        let trimmed = sentence.trimmingCharacters(in: .whitespacesAndNewlines)\n        guard !trimmed.isEmpty else { return \"\" }\n        return trimmed.prefix(1).capitalized + trimmed.dropFirst()\n    }\n    return capitalizedSentences.joined(separator: \". \")\n}\n\nif let input = readLine() {\n    let output = capitalizeSentences(in: input)\n    print(output)\n}\n```"
  },
  {
    "task": "Design a program that reads a list of words and prints them in reverse alphabetical order.",
    "code": "```swift\nimport Foundation\n\nfunc readWords() -> [String] {\n    var words = [String]()\n    while let line = readLine(), !line.isEmpty {\n        words.append(line)\n    }\n    return words\n}\n\nfunc printWordsInReverseOrder(_ words: [String]) {\n    let sortedWords = words.sorted(by: >)\n    for word in sortedWords {\n        print(word)\n    }\n}\n\nlet words = readWords()\nprintWordsInReverseOrder(words)\n```"
  },
  {
    "task": "Write a script that asks for two times and prints the difference in minutes.",
    "code": "```swift\nimport Foundation\n\nfunc readTime(prompt: String) -> Date? {\n    print(prompt, terminator: \": \")\n    guard let input = readLine() else { return nil }\n    \n    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = \"HH:mm\"\n    return dateFormatter.date(from: input)\n}\n\nif let firstTime = readTime(prompt: \"Enter the first time (HH:mm)\"),\n   let secondTime = readTime(prompt: \"Enter the second time (HH:mm)\") {\n    let difference = Calendar.current.dateComponents([.minute], from: firstTime, to: secondTime)\n    if let minutes = difference.minute {\n        print(\"Difference in minutes: \\(minutes)\")\n    }\n} else {\n    print(\"Invalid input. Please enter times in HH:mm format.\")\n}\n```"
  },
  {
    "task": "Build a program that reads a text and prints the number of vowels and consonants.",
    "code": "```swift\nimport Foundation\n\nfunc countVowelsAndConsonants(in text: String) -> (vowels: Int, consonants: Int) {\n    let vowelsSet = CharacterSet(charactersIn: \"AEIOUaeiou\")\n    let consonantsSet = CharacterSet.letters.subtracting(vowelsSet)\n    \n    var vowelsCount = 0\n    var consonantsCount = 0\n    \n    for character in text.unicodeScalars {\n        if vowelsSet.contains(character) {\n            vowelsCount += 1\n        } else if consonantsSet.contains(character) {\n            consonantsCount += 1\n        }\n    }\n    \n    return (vowelsCount, consonantsCount)\n}\n\nfunc main() {\n    print(\"Enter a text:\")\n    if let input = readLine() {\n        let result = countVowelsAndConsonants(in: input)\n        print(\"Vowels: \\(result.vowels), Consonants: \\(result.consonants)\")\n    }\n}\n\nmain()\n```"
  },
  {
    "task": "Implement a tool that reads a JSON object from input and prints its keys.",
    "code": "```swift\nimport Foundation\n\nif let inputData = readLine()?.data(using: .utf8) {\n    do {\n        if let jsonObject = try JSONSerialization.jsonObject(with: inputData, options: []) as? [String: Any] {\n            for key in jsonObject.keys {\n                print(key)\n            }\n        }\n    } catch {\n        print(\"Invalid JSON\")\n    }\n}\n```"
  },
  {
    "task": "Write a program that reads a CSV file from input and prints each row as a dictionary.",
    "code": "```swift\nimport Foundation\n\n// Function to read CSV from standard input\nfunc readCSV() -> [[String: String]] {\n    guard let input = readLine() else { return [] }\n    let lines = input.split(separator: \"\\n\")\n    guard let headerLine = lines.first else { return [] }\n    \n    let headers = headerLine.split(separator: \",\").map { String($0) }\n    var rows: [[String: String]] = []\n    \n    for line in lines.dropFirst() {\n        let values = line.split(separator: \",\").map { String($0) }\n        var row: [String: String] = [:]\n        \n        for (index, header) in headers.enumerated() {\n            if index < values.count {\n                row[header] = values[index]\n            }\n        }\n        \n        rows.append(row)\n    }\n    \n    return rows\n}\n\n// Main function to execute the task\nfunc main() {\n    let rows = readCSV()\n    for row in rows {\n        print(row)\n    }\n}\n\nmain()\n```"
  },
  {
    "task": "Create a script that reads a sentence and prints it with the words in reverse order.",
    "code": "```swift\nimport Foundation\n\nif let input = readLine() {\n    let words = input.split(separator: \" \")\n    let reversedWords = words.reversed().joined(separator: \" \")\n    print(reversedWords)\n}\n```"
  },
  {
    "task": "Develop a tool that reads a list of numbers and prints their median.",
    "code": "```swift\nimport Foundation\n\nfunc readNumbers() -> [Double] {\n    var numbers = [Double]()\n    while let line = readLine(), let number = Double(line) {\n        numbers.append(number)\n    }\n    return numbers\n}\n\nfunc calculateMedian(numbers: [Double]) -> Double? {\n    guard !numbers.isEmpty else { return nil }\n    let sortedNumbers = numbers.sorted()\n    let count = sortedNumbers.count\n    if count % 2 == 0 {\n        return (sortedNumbers[count / 2 - 1] + sortedNumbers[count / 2]) / 2\n    } else {\n        return sortedNumbers[count / 2]\n    }\n}\n\nif let median = calculateMedian(numbers: readNumbers()) {\n    print(median)\n}\n```"
  },
  {
    "task": "Design a program that reads a sequence of characters and prints the first non-repeated character.",
    "code": "```swift\nimport Foundation\n\nfunc firstNonRepeatedCharacter(in input: String) -> Character? {\n    var charCount: [Character: Int] = [:]\n    \n    for char in input {\n        charCount[char, default: 0] += 1\n    }\n    \n    for char in input {\n        if charCount[char] == 1 {\n            return char\n        }\n    }\n    return nil\n}\n\nif let input = readLine() {\n    if let result = firstNonRepeatedCharacter(in: input) {\n        print(result)\n    } else {\n        print(\"No non-repeated character found\")\n    }\n}\n```"
  },
  {
    "task": "Write a script that reads a list of tuples and prints them sorted by the second element.",
    "code": "```swift\nimport Foundation\n\n// Read input from standard input\nlet input = readLine() ?? \"\"\n\n// Convert input into an array of tuples\nlet tuples = input.split(separator: \",\").map { tupleStr -> (Int, Int) in\n    let elements = tupleStr.trimmingCharacters(in: .whitespaces)\n                           .trimmingCharacters(in: CharacterSet(charactersIn: \"()\"))\n                           .split(separator: \" \")\n    let first = Int(elements[0]) ?? 0\n    let second = Int(elements[1]) ?? 0\n    return (first, second)\n}\n\n// Sort the tuples by the second element\nlet sortedTuples = tuples.sorted { $0.1 < $1.1 }\n\n// Print the sorted tuples\nfor tuple in sortedTuples {\n    print(\"(\\(tuple.0), \\(tuple.1))\")\n}\n```"
  },
  {
    "task": "Create a program that reads a list of cities and prints them grouped by their starting letter.",
    "code": "```swift\nimport Foundation\n\nfunc main() {\n    var cityDictionary = [Character: [String]]()\n    \n    while let line = readLine(), !line.isEmpty {\n        let city = line.trimmingCharacters(in: .whitespacesAndNewlines)\n        guard let firstLetter = city.first else { continue }\n        cityDictionary[firstLetter, default: []].append(city)\n    }\n    \n    for (letter, cities) in cityDictionary.sorted(by: { $0.key < $1.key }) {\n        print(\"\\(letter):\")\n        for city in cities.sorted() {\n            print(\"  \\(city)\")\n        }\n    }\n}\n\nmain()\n```"
  },
  {
    "task": "Build a tool that reads a text and prints the longest word.",
    "code": "```swift\nimport Foundation\n\nfunc findLongestWord(in text: String) -> String {\n    let words = text.components(separatedBy: .whitespacesAndNewlines)\n    return words.max(by: { $1.count > $0.count }) ?? \"\"\n}\n\nif let input = readLine() {\n    let longestWord = findLongestWord(in: input)\n    print(longestWord)\n}\n```"
  },
  {
    "task": "Implement a program that reads a string and prints the number of unique characters.",
    "code": "```swift\nimport Foundation\n\nif let input = readLine() {\n    let uniqueCharacters = Set(input)\n    print(uniqueCharacters.count)\n}\n```"
  },
  {
    "task": "Write a script that reads two strings and prints the longest common substring.",
    "code": "```swift\nimport Foundation\n\nfunc longestCommonSubstring(_ str1: String, _ str2: String) -> String {\n    let m = str1.count\n    let n = str2.count\n    \n    var maxLength = 0\n    var endIndex = 0\n    \n    var dp = Array(repeating: Array(repeating: 0, count: n + 1), count: m + 1)\n    \n    for i in 1...m {\n        for j in 1...n {\n            if str1[str1.index(str1.startIndex, offsetBy: i - 1)] == str2[str2.index(str2.startIndex, offsetBy: j - 1)] {\n                dp[i][j] = dp[i - 1][j - 1] + 1\n                if dp[i][j] > maxLength {\n                    maxLength = dp[i][j]\n                    endIndex = i\n                }\n            }\n        }\n    }\n    \n    let startIndex = endIndex - maxLength\n    let range = str1.index(str1.startIndex, offsetBy: startIndex)..<str1.index(str1.startIndex, offsetBy: endIndex)\n    return String(str1[range])\n}\n\nif let input1 = readLine(), let input2 = readLine() {\n    let result = longestCommonSubstring(input1, input2)\n    print(result)\n}\n```"
  },
  {
    "task": "Develop a program that reads a chessboard position and prints all possible moves for a knight.",
    "code": "```swift\nimport Foundation\n\nfunc isValidPosition(x: Int, y: Int) -> Bool {\n    return x >= 0 && x < 8 && y >= 0 && y < 8\n}\n\nfunc possibleKnightMoves(from position: (Int, Int)) -> [(Int, Int)] {\n    let moveOffsets = [\n        (2, 1), (2, -1), (-2, 1), (-2, -1),\n        (1, 2), (1, -2), (-1, 2), (-1, -2)\n    ]\n    var possibleMoves = [(Int, Int)]()\n    for offset in moveOffsets {\n        let newPosition = (position.0 + offset.0, position.1 + offset.1)\n        if isValidPosition(x: newPosition.0, y: newPosition.1) {\n            possibleMoves.append(newPosition)\n        }\n    }\n    return possibleMoves\n}\n\nfunc positionFromChessNotation(_ notation: String) -> (Int, Int)? {\n    guard notation.count == 2 else { return nil }\n    let file = notation.first!\n    let rank = notation.last!\n    \n    guard let fileIndex = \"abcdefgh\".firstIndex(of: file),\n          let rankIndex = \"12345678\".firstIndex(of: rank) else {\n        return nil\n    }\n    \n    return (fileIndex.utf16Offset(in: \"abcdefgh\"), rankIndex.utf16Offset(in: \"12345678\"))\n}\n\nfunc chessNotationFromPosition(_ position: (Int, Int)) -> String {\n    let file = \"abcdefgh\"[position.0]\n    let rank = \"12345678\"[position.1]\n    return \"\\(file)\\(rank)\"\n}\n\nif let input = readLine(), let position = positionFromChessNotation(input) {\n    let moves = possibleKnightMoves(from: position)\n    for move in moves {\n        print(chessNotationFromPosition(move))\n    }\n}\n```"
  },
  {
    "task": "Create a tool that reads a list of numbers and prints the mode.",
    "code": "```swift\nimport Foundation\n\nfunc readNumbers() -> [Int] {\n    var numbers = [Int]()\n    while let line = readLine(), let number = Int(line) {\n        numbers.append(number)\n    }\n    return numbers\n}\n\nfunc findMode(of numbers: [Int]) -> Int? {\n    guard !numbers.isEmpty else { return nil }\n    var frequency: [Int: Int] = [:]\n    for number in numbers {\n        frequency[number, default: 0] += 1\n    }\n    let maxFrequency = frequency.values.max() ?? 0\n    let mode = frequency.filter { $0.value == maxFrequency }.keys.sorted().first\n    return mode\n}\n\nlet numbers = readNumbers()\nif let mode = findMode(of: numbers) {\n    print(mode)\n} else {\n    print(\"No mode found\")\n}\n```"
  },
  {
    "task": "Design a program that reads a list of file paths and prints the largest file.",
    "code": "```swift\nimport Foundation\n\nfunc largestFile(inPaths paths: [String]) -> String? {\n    var largestFilePath: String? = nil\n    var largestFileSize: UInt64 = 0\n    \n    for path in paths {\n        let fileURL = URL(fileURLWithPath: path)\n        do {\n            let attributes = try FileManager.default.attributesOfItem(atPath: fileURL.path)\n            if let fileSize = attributes[.size] as? UInt64, fileSize > largestFileSize {\n                largestFileSize = fileSize\n                largestFilePath = path\n            }\n        } catch {\n            continue\n        }\n    }\n    \n    return largestFilePath\n}\n\nfunc main() {\n    guard CommandLine.argc > 1 else {\n        print(\"Please provide a list of file paths.\")\n        return\n    }\n    \n    let filePaths = Array(CommandLine.arguments.dropFirst())\n    if let largest = largestFile(inPaths: filePaths) {\n        print(\"The largest file is: \\(largest)\")\n    } else {\n        print(\"No valid files found.\")\n    }\n}\n\nmain()\n```"
  },
  {
    "task": "Write a script that reads a list of prices and prints the total cost with tax.",
    "code": "```swift\nimport Foundation\n\nfunc readPrices() -> [Double] {\n    print(\"Enter prices separated by spaces:\")\n    guard let input = readLine() else { return [] }\n    let prices = input.split(separator: \" \").compactMap { Double($0) }\n    return prices\n}\n\nfunc calculateTotalCost(with prices: [Double], taxRate: Double) -> Double {\n    let subtotal = prices.reduce(0, +)\n    return subtotal * (1 + taxRate)\n}\n\nlet taxRate = 0.07 // 7% sales tax\nlet prices = readPrices()\nlet totalCost = calculateTotalCost(with: prices, taxRate: taxRate)\nprint(\"Total cost with tax: \\(totalCost)\")\n```"
  },
  {
    "task": "Build a program that reads a list of temperatures and prints them in Fahrenheit.",
    "code": "```swift\nimport Foundation\n\nfunc celsiusToFahrenheit(_ celsius: Double) -> Double {\n    return (celsius * 9/5) + 32\n}\n\nprint(\"Enter temperatures in Celsius separated by spaces:\")\n\nif let input = readLine() {\n    let temperatures = input.split(separator: \" \").compactMap { Double($0) }\n    let fahrenheitTemperatures = temperatures.map { celsiusToFahrenheit($0) }\n    \n    print(\"Temperatures in Fahrenheit:\")\n    for fahrenheit in fahrenheitTemperatures {\n        print(fahrenheit)\n    }\n}\n```"
  },
  {
    "task": "Implement a tool that reads a list of book titles and prints them sorted by length.",
    "code": "```swift\nimport Foundation\n\nfunc readBookTitles() -> [String] {\n    var titles: [String] = []\n    while let line = readLine(), !line.isEmpty {\n        titles.append(line)\n    }\n    return titles\n}\n\nfunc printSortedTitlesByLength(titles: [String]) {\n    let sortedTitles = titles.sorted { $0.count < $1.count }\n    for title in sortedTitles {\n        print(title)\n    }\n}\n\nlet bookTitles = readBookTitles()\nprintSortedTitlesByLength(titles: bookTitles)\n```"
  },
  {
    "task": "Write a program that reads a directory path and prints all file names.",
    "code": "```swift\nimport Foundation\n\nlet fileManager = FileManager.default\n\nprint(\"Enter a directory path:\")\n\nif let input = readLine() {\n    let directoryURL = URL(fileURLWithPath: input)\n    do {\n        let fileURLs = try fileManager.contentsOfDirectory(at: directoryURL, includingPropertiesForKeys: nil)\n        for fileURL in fileURLs {\n            print(fileURL.lastPathComponent)\n        }\n    } catch {\n        print(\"Error reading directory: \\(error.localizedDescription)\")\n    }\n} else {\n    print(\"Invalid input.\")\n}\n```"
  },
  {
    "task": "Create a script that reads a list of URLs and prints those with a secure connection.",
    "code": "```swift\nimport Foundation\n\nfunc readURLs() -> [String] {\n    var urls = [String]()\n    while let line = readLine() {\n        urls.append(line)\n    }\n    return urls\n}\n\nfunc filterSecureURLs(urls: [String]) -> [String] {\n    return urls.filter { $0.starts(with: \"https://\") }\n}\n\nlet urls = readURLs()\nlet secureURLs = filterSecureURLs(urls: urls)\nsecureURLs.forEach { print($0) }\n```"
  },
  {
    "task": "Develop a tool that reads a sequence of numbers and prints if it is strictly increasing.",
    "code": "```swift\nimport Foundation\n\nfunc isStrictlyIncreasing(_ numbers: [Int]) -> Bool {\n    for i in 0..<numbers.count - 1 {\n        if numbers[i] >= numbers[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nif let input = readLine() {\n    let numbers = input.split(separator: \" \").compactMap { Int($0) }\n    if isStrictlyIncreasing(numbers) {\n        print(\"The sequence is strictly increasing.\")\n    } else {\n        print(\"The sequence is not strictly increasing.\")\n    }\n}\n```"
  },
  {
    "task": "Design a program that reads a list of products and prints them grouped by category.",
    "code": "```swift\nimport Foundation\n\n// Function to read input from the standard input until EOF\nfunc readInput() -> [String] {\n    var lines: [String] = []\n    while let line = readLine(), !line.isEmpty {\n        lines.append(line)\n    }\n    return lines\n}\n\n// Function to group products by category\nfunc groupProductsByCategory(_ products: [String]) -> [String: [String]] {\n    var categoryDict: [String: [String]] = [:]\n    for product in products {\n        let components = product.split(separator: \":\").map { $0.trimmingCharacters(in: .whitespacesAndNewlines) }\n        if components.count == 2 {\n            let category = components[0]\n            let productName = components[1]\n            categoryDict[category, default: []].append(productName)\n        }\n    }\n    return categoryDict\n}\n\n// Main function to execute the program\nfunc main() {\n    let products = readInput()\n    let groupedProducts = groupProductsByCategory(products)\n    \n    for (category, products) in groupedProducts {\n        print(\"\\(category):\")\n        for product in products {\n            print(\"  - \\(product)\")\n        }\n    }\n}\n\nmain()\n```"
  },
  {
    "task": "Write a script that reads a sentence and prints it with alternating word capitalization.",
    "code": "```swift\nimport Foundation\n\nif let input = readLine() {\n    let words = input.split(separator: \" \")\n    let alternatedWords = words.enumerated().map { index, word in\n        index % 2 == 0 ? word.capitalized : word.lowercased()\n    }\n    print(alternatedWords.joined(separator: \" \"))\n}\n```"
  },
  {
    "task": "Create a program that reads a list of grades and prints the highest and lowest grade.",
    "code": "```swift\nimport Foundation\n\nfunc readGrades() -> [Int] {\n    var grades: [Int] = []\n    while let line = readLine(), let grade = Int(line) {\n        grades.append(grade)\n    }\n    return grades\n}\n\nfunc findMinMaxGrades(grades: [Int]) -> (min: Int, max: Int) {\n    guard let minGrade = grades.min(), let maxGrade = grades.max() else {\n        return (min: 0, max: 0)\n    }\n    return (min: minGrade, max: maxGrade)\n}\n\nlet grades = readGrades()\nif !grades.isEmpty {\n    let (minGrade, maxGrade) = findMinMaxGrades(grades: grades)\n    print(\"Highest grade: \\(maxGrade)\")\n    print(\"Lowest grade: \\(minGrade)\")\n} else {\n    print(\"No grades entered.\")\n}\n```"
  },
  {
    "task": "Build a tool that reads a text and prints the number of sentences.",
    "code": "```swift\nimport Foundation\n\nfunc countSentences(in text: String) -> Int {\n    let sentenceEndings: CharacterSet = [\".\", \"!\", \"?\"]\n    let sentences = text.components(separatedBy: sentenceEndings)\n    return sentences.filter { !$0.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty }.count\n}\n\nif let input = readLine() {\n    let sentenceCount = countSentences(in: input)\n    print(sentenceCount)\n}\n```"
  },
  {
    "task": "Implement a program that reads a list of integers and prints the sum of all odd numbers.",
    "code": "```swift\nimport Foundation\n\nvar input = readLine() ?? \"\"\nlet integers = input.split(separator: \" \").compactMap { Int($0) }\nlet sumOfOddNumbers = integers.filter { $0 % 2 != 0 }.reduce(0, +)\nprint(sumOfOddNumbers)\n```"
  },
  {
    "task": "Write a script that reads a text and prints the shortest sentence.",
    "code": "```swift\nimport Foundation\n\nif let input = readLine() {\n    let sentences = input.split { \".!?\".contains($0) }.map { $0.trimmingCharacters(in: .whitespaces) }\n    if let shortestSentence = sentences.min(by: { $0.count < $1.count }) {\n        print(shortestSentence)\n    }\n}\n```"
  },
  {
    "task": "Develop a program that reads a list of dictionaries and prints them sorted by a specific key.",
    "code": "```swift\nimport Foundation\n\nfunc readInput() -> [[String: Any]] {\n    var dictionaries: [[String: Any]] = []\n    while let line = readLine(), !line.isEmpty {\n        if let data = line.data(using: .utf8) {\n            if let jsonObject = try? JSONSerialization.jsonObject(with: data, options: []),\n               let dictionary = jsonObject as? [String: Any] {\n                dictionaries.append(dictionary)\n            }\n        }\n    }\n    return dictionaries\n}\n\nfunc sortDictionaries(_ dictionaries: [[String: Any]], by key: String) -> [[String: Any]] {\n    dictionaries.sorted {\n        guard let first = $0[key] as? String, let second = $1[key] as? String else {\n            return false\n        }\n        return first < second\n    }\n}\n\nlet dictionaries = readInput()\nlet sortedDictionaries = sortDictionaries(dictionaries, by: \"keyToSortBy\")\nfor dictionary in sortedDictionaries {\n    if let jsonData = try? JSONSerialization.data(withJSONObject: dictionary, options: .prettyPrinted),\n       let jsonString = String(data: jsonData, encoding: .utf8) {\n        print(jsonString)\n    }\n}\n```"
  },
  {
    "task": "Create a tool that reads a sequence of strings and prints the common prefix.",
    "code": "```swift\nimport Foundation\n\nfunc findCommonPrefix(_ strings: [String]) -> String {\n    if strings.isEmpty { return \"\" }\n    var prefix = strings[0]\n    \n    for string in strings {\n        while !string.hasPrefix(prefix) {\n            prefix = String(prefix.dropLast())\n            if prefix.isEmpty { return \"\" }\n        }\n    }\n    return prefix\n}\n\nvar inputStrings = [String]()\n\nwhile let line = readLine(), !line.isEmpty {\n    inputStrings.append(line)\n}\n\nlet commonPrefix = findCommonPrefix(inputStrings)\nprint(\"Common prefix: \\(commonPrefix)\")\n```"
  },
  {
    "task": "Design a program that reads a number and prints all of its divisors.",
    "code": "```swift\nimport Foundation\n\nif let input = readLine(), let number = Int(input) {\n    for i in 1...number {\n        if number % i == 0 {\n            print(i)\n        }\n    }\n}\n```"
  },
  {
    "task": "Write a script that reads a text and prints each word with its length.",
    "code": "```swift\nimport Foundation\n\nif let input = readLine() {\n    let words = input.split(separator: \" \")\n    for word in words {\n        print(\"\\(word) \\(word.count)\")\n    }\n}\n```"
  },
  {
    "task": "Build a program that reads a list of colors and prints them in a rainbow order.",
    "code": "```swift\nimport Foundation\n\nlet rainbowOrder = [\"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"indigo\", \"violet\"]\n\nprint(\"Enter colors separated by commas:\")\nif let input = readLine() {\n    let colors = input.split(separator: \",\").map { $0.trimmingCharacters(in: .whitespaces) }\n    let sortedColors = colors.sorted { rainbowOrder.firstIndex(of: $0) ?? Int.max < rainbowOrder.firstIndex(of: $1) ?? Int.max }\n    print(\"Colors in rainbow order:\")\n    for color in sortedColors {\n        print(color)\n    }\n}\n```"
  },
  {
    "task": "Implement a tool that reads a list of names and prints them with their initials.",
    "code": "```swift\nimport Foundation\n\nfunc readInput() -> [String] {\n    var inputLines = [String]()\n    while let line = readLine() {\n        inputLines.append(line)\n    }\n    return inputLines\n}\n\nfunc getInitials(from name: String) -> String {\n    return name.split(separator: \" \").compactMap { $0.first }.map { String($0) }.joined()\n}\n\nlet names = readInput()\nfor name in names {\n    let initials = getInitials(from: name)\n    print(\"\\(name): \\(initials)\")\n}\n```"
  },
  {
    "task": "Write a program that reads a series of coordinates and prints the center point.",
    "code": "```swift\nimport Foundation\n\nfunc readCoordinates() -> [(Double, Double)] {\n    var coordinates: [(Double, Double)] = []\n    while let line = readLine(), !line.isEmpty {\n        let parts = line.split(separator: \" \")\n        if parts.count == 2, \n           let x = Double(parts[0]), \n           let y = Double(parts[1]) {\n            coordinates.append((x, y))\n        }\n    }\n    return coordinates\n}\n\nfunc calculateCenter(of coordinates: [(Double, Double)]) -> (Double, Double) {\n    let count = Double(coordinates.count)\n    let sum = coordinates.reduce((0.0, 0.0)) { (result, coordinate) in\n        (result.0 + coordinate.0, result.1 + coordinate.1)\n    }\n    return (sum.0 / count, sum.1 / count)\n}\n\nfunc main() {\n    let coordinates = readCoordinates()\n    if !coordinates.isEmpty {\n        let center = calculateCenter(of: coordinates)\n        print(\"Center point: (\\(center.0), \\(center.1))\")\n    } else {\n        print(\"No coordinates entered.\")\n    }\n}\n\nmain()\n```"
  },
  {
    "task": "Create a script that reads a sentence and prints it with each vowel replaced by its uppercase form.",
    "code": "```swift\nimport Foundation\n\nif let input = readLine() {\n    let vowels: [Character: Character] = [\"a\": \"A\", \"e\": \"E\", \"i\": \"I\", \"o\": \"O\", \"u\": \"U\"]\n    let result = input.map { char -> Character in\n        if let upperVowel = vowels[char] {\n            return upperVowel\n        } else {\n            return char\n        }\n    }\n    print(String(result))\n}\n```"
  },
  {
    "task": "Develop a tool that reads a mathematical expression and evaluates its result.",
    "code": "```swift\nimport Foundation\n\nfunc evaluateExpression(_ expression: String) -> Double? {\n    let exp = NSExpression(format: expression)\n    if let result = exp.expressionValue(with: nil, context: nil) as? NSNumber {\n        return result.doubleValue\n    }\n    return nil\n}\n\nfunc main() {\n    print(\"Enter a mathematical expression:\")\n    if let input = readLine() {\n        if let result = evaluateExpression(input) {\n            print(\"Result: \\(result)\")\n        } else {\n            print(\"Invalid expression.\")\n        }\n    }\n}\n\nmain()\n```"
  },
  {
    "task": "Design a program that reads a text and prints the first three words.",
    "code": "```swift\nimport Foundation\n\nif let input = readLine() {\n    let words = input.split(separator: \" \")\n    let firstThreeWords = words.prefix(3)\n    for word in firstThreeWords {\n        print(word)\n    }\n}\n```"
  },
  {
    "task": "Write a script that reads a list of numbers and prints them without duplicates.",
    "code": "```swift\nimport Foundation\n\nif let input = readLine() {\n    let numbers = input.split(separator: \" \").compactMap { Int($0) }\n    let uniqueNumbers = Array(Set(numbers))\n    for number in uniqueNumbers {\n        print(number)\n    }\n}\n```"
  },
  {
    "task": "Create a program that reads a string and prints it with spaces between each character.",
    "code": "```swift\nimport Foundation\n\nif let input = readLine() {\n    let output = input.map { String($0) }.joined(separator: \" \")\n    print(output)\n}\n```"
  },
  {
    "task": "Build a tool that reads a list of events with dates and prints them by chronological order.",
    "code": "```swift\nimport Foundation\n\nfunc readEvents() -> [(String, Date)] {\n    var events: [(String, Date)] = []\n    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = \"yyyy-MM-dd\"\n    \n    while let line = readLine() {\n        let components = line.split(separator: \",\")\n        if components.count == 2,\n           let date = dateFormatter.date(from: String(components[1]).trimmingCharacters(in: .whitespaces)) {\n            events.append((String(components[0]).trimmingCharacters(in: .whitespaces), date))\n        }\n    }\n    \n    return events\n}\n\nfunc printEventsInChronologicalOrder(events: [(String, Date)]) {\n    let sortedEvents = events.sorted { $0.1 < $1.1 }\n    for event in sortedEvents {\n        print(\"\\(event.0): \\(event.1)\")\n    }\n}\n\nlet events = readEvents()\nprintEventsInChronologicalOrder(events: events)\n```"
  },
  {
    "task": "Implement a program that reads a list of fractions and prints their sum as a reduced fraction.",
    "code": "```swift\nimport Foundation\n\nfunc gcd(_ a: Int, _ b: Int) -> Int {\n    if b == 0 {\n        return a\n    } else {\n        return gcd(b, a % b)\n    }\n}\n\nfunc reduceFraction(numerator: Int, denominator: Int) -> (Int, Int) {\n    let divisor = gcd(numerator, denominator)\n    return (numerator / divisor, denominator / divisor)\n}\n\nfunc sumFractions(fractions: [(Int, Int)]) -> (Int, Int) {\n    var numeratorSum = 0\n    var commonDenominator = 1\n    \n    for (_, denominator) in fractions {\n        commonDenominator *= denominator\n    }\n    \n    for (numerator, denominator) in fractions {\n        numeratorSum += numerator * (commonDenominator / denominator)\n    }\n    \n    return reduceFraction(numerator: numeratorSum, denominator: commonDenominator)\n}\n\nvar fractions: [(Int, Int)] = []\n\nif let input = readLine() {\n    let fractionStrings = input.components(separatedBy: \" \")\n    for fractionString in fractionStrings {\n        let components = fractionString.split(separator: \"/\").map { Int($0)! }\n        fractions.append((components[0], components[1]))\n    }\n}\n\nlet (resultNumerator, resultDenominator) = sumFractions(fractions: fractions)\nprint(\"\\(resultNumerator)/\\(resultDenominator)\")\n```"
  },
  {
    "task": "Write a script that reads a text and prints it with each consonant doubled.",
    "code": "```swift\nimport Foundation\n\n// Read input from standard input\nif let input = readLine() {\n    // Define a set of vowels\n    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"]\n\n    // Create a new string where each consonant is doubled\n    let output = input.reduce(\"\") { result, char in\n        if vowels.contains(char) || !char.isLetter {\n            return result + String(char)\n        } else {\n            return result + String(char) + String(char)\n        }\n    }\n\n    // Print the output\n    print(output)\n}\n```"
  },
  {
    "task": "Develop a program that reads a number and prints its representation in Roman numerals.",
    "code": "```swift\nimport Foundation\n\nfunc intToRoman(_ num: Int) -> String {\n    let valueSymbols = [\n        (1000, \"M\"),\n        (900, \"CM\"),\n        (500, \"D\"),\n        (400, \"CD\"),\n        (100, \"C\"),\n        (90, \"XC\"),\n        (50, \"L\"),\n        (40, \"XL\"),\n        (10, \"X\"),\n        (9, \"IX\"),\n        (5, \"V\"),\n        (4, \"IV\"),\n        (1, \"I\")\n    ]\n    \n    var number = num\n    var result = \"\"\n    \n    for (value, symbol) in valueSymbols {\n        while number >= value {\n            result += symbol\n            number -= value\n        }\n    }\n    return result\n}\n\nif let input = readLine(), let number = Int(input) {\n    let romanNumeral = intToRoman(number)\n    print(romanNumeral)\n}\n```"
  },
  {
    "task": "Create a tool that reads a list of words and prints them with each letter in reverse order.",
    "code": "```swift\nimport Foundation\n\nfunc reverseLettersInWords() {\n    while let input = readLine() {\n        let words = input.split(separator: \" \")\n        let reversedWords = words.map { String($0.reversed()) }\n        print(reversedWords.joined(separator: \" \"))\n    }\n}\n\nreverseLettersInWords()\n```"
  },
  {
    "task": "Design a program that reads a set of points and prints the one closest to the origin.",
    "code": "```swift\nimport Foundation\n\nfunc distanceFromOrigin(_ point: (x: Double, y: Double)) -> Double {\n    return sqrt(point.x * point.x + point.y * point.y)\n}\n\nfunc closestPointToOrigin(points: [(x: Double, y: Double)]) -> (x: Double, y: Double)? {\n    guard !points.isEmpty else { return nil }\n    return points.min(by: { distanceFromOrigin($0) < distanceFromOrigin($1) })\n}\n\nvar points: [(x: Double, y: Double)] = []\n\nwhile let input = readLine() {\n    let components = input.split(separator: \" \").compactMap { Double($0) }\n    if components.count == 2 {\n        points.append((x: components[0], y: components[1]))\n    }\n}\n\nif let closestPoint = closestPointToOrigin(points: points) {\n    print(\"Closest point to origin: (\\(closestPoint.x), \\(closestPoint.y))\")\n} else {\n    print(\"No points provided.\")\n}\n```"
  },
  {
    "task": "Write a script that reads a text and prints the frequency of each word.",
    "code": "```swift\nimport Foundation\n\nfunc readInput() -> String {\n    var input = \"\"\n    while let line = readLine() {\n        input += line + \"\\n\"\n    }\n    return input\n}\n\nfunc wordFrequencies(from text: String) -> [String: Int] {\n    let words = text.lowercased().components(separatedBy: CharacterSet.alphanumerics.inverted).filter { !$0.isEmpty }\n    var frequencies: [String: Int] = [:]\n    \n    for word in words {\n        frequencies[word, default: 0] += 1\n    }\n    \n    return frequencies\n}\n\nlet inputText = readInput()\nlet frequencies = wordFrequencies(from: inputText)\n\nfor (word, count) in frequencies.sorted(by: { $0.key < $1.key }) {\n    print(\"\\(word): \\(count)\")\n}\n```"
  },
  {
    "task": "Build a program that reads a list of integers and prints the second smallest.",
    "code": "```swift\nimport Foundation\n\nfunc readIntegers() -> [Int] {\n    guard let input = readLine() else { return [] }\n    return input.split(separator: \" \").compactMap { Int($0) }\n}\n\nif let integers = readIntegers().sorted(), integers.count > 1 {\n    print(integers[1])\n}\n```"
  },
  {
    "task": "Implement a tool that reads a string and prints all its substrings.",
    "code": "```swift\nimport Foundation\n\nif let input = readLine() {\n    let length = input.count\n    for start in 0..<length {\n        for end in start..<length {\n            let substring = input[input.index(input.startIndex, offsetBy: start)...input.index(input.startIndex, offsetBy: end)]\n            print(substring)\n        }\n    }\n}\n```"
  },
  {
    "task": "Write a program that reads a number and generates a random number up to that number.",
    "code": "```swift\nimport Foundation\n\nif let input = readLine(), let maxNumber = Int(input), maxNumber > 0 {\n    let randomNumber = Int.random(in: 0...maxNumber)\n    print(randomNumber)\n} else {\n    print(\"Invalid input\")\n}\n```"
  },
  {
    "task": "Create a script that reads a sentence and prints it with each word reversed.",
    "code": "```swift\nimport Foundation\n\nif let input = readLine() {\n    let reversedWords = input.split(separator: \" \").map { String($0.reversed()) }\n    print(reversedWords.joined(separator: \" \"))\n}\n```"
  },
  {
    "task": "Develop a tool that reads a text and prints it with each sentence on a new line.",
    "code": "```swift\nimport Foundation\n\nfunc readInput() -> String {\n    var inputText = \"\"\n    while let line = readLine() {\n        inputText += line + \"\\n\"\n    }\n    return inputText\n}\n\nfunc splitIntoSentences(text: String) -> [String] {\n    let pattern = #\"(?<=[.!?])\\s+\"#\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let range = NSRange(text.startIndex..., in: text)\n    let sentences = regex.split(text, range: range)\n    return sentences\n}\n\nfunc printSentences(sentences: [String]) {\n    for sentence in sentences {\n        print(sentence)\n    }\n}\n\nlet inputText = readInput()\nlet sentences = splitIntoSentences(text: inputText)\nprintSentences(sentences: sentences)\n```"
  },
  {
    "task": "Design a program that reads a list of numbers and prints the product of all negative numbers.",
    "code": "```swift\nimport Foundation\n\nfunc readNumbers() -> [Int] {\n    guard let input = readLine() else { return [] }\n    return input.split(separator: \" \").compactMap { Int($0) }\n}\n\nfunc productOfNegativeNumbers(in numbers: [Int]) -> Int {\n    return numbers.filter { $0 < 0 }.reduce(1, *)\n}\n\nlet numbers = readNumbers()\nlet product = productOfNegativeNumbers(in: numbers)\nprint(product)\n```"
  },
  {
    "task": "Write a script that reads a dictionary and prints the keys and values in sorted order.",
    "code": "```swift\nimport Foundation\n\n// Read input from standard input\nif let jsonString = readLine() {\n    let jsonData = jsonString.data(using: .utf8)!\n    if let dictionary = try? JSONSerialization.jsonObject(with: jsonData, options: []) as? [String: Any] {\n        let sortedKeys = dictionary.keys.sorted()\n        for key in sortedKeys {\n            if let value = dictionary[key] {\n                print(\"\\(key): \\(value)\")\n            }\n        }\n    }\n}\n```"
  },
  {
    "task": "Create a program that reads a text and prints the number of unique words.",
    "code": "```swift\nimport Foundation\n\nif let input = readLine() {\n    let words = input.split { !$0.isLetter }\n    let uniqueWords = Set(words.map { $0.lowercased() })\n    print(uniqueWords.count)\n}\n```"
  }
]