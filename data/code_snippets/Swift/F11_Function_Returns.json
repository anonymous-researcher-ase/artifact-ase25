[
  {
    "task": "Create a function that calculates the sum of two numbers and returns the result.",
    "code": "```swift\nfunc sumOfTwoNumbers(_ a: Int, _ b: Int) -> Int {\n    return a + b\n}\n```"
  },
  {
    "task": "Design a function that takes a string and returns its length.",
    "code": "```swift\nfunc stringLength(_ input: String) -> Int {\n    return input.count\n}\n```"
  },
  {
    "task": "Write a function that checks if a number is prime and returns a boolean value.",
    "code": "```swift\nfunc isPrime(_ number: Int) -> Bool {\n    if number <= 1 {\n        return false\n    }\n    if number <= 3 {\n        return true\n    }\n    if number % 2 == 0 || number % 3 == 0 {\n        return false\n    }\n    var i = 5\n    while i * i <= number {\n        if number % i == 0 || number % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n    }\n    return true\n}\n```"
  },
  {
    "task": "Implement a function that returns the highest value in a list of integers.",
    "code": "```swift\nfunc highestValue(in numbers: [Int]) -> Int? {\n    return numbers.max()\n}\n```"
  },
  {
    "task": "Create a function that accepts a list of words and returns the longest word.",
    "code": "```swift\nfunc longestWord(in words: [String]) -> String? {\n    return words.max(by: { $0.count < $1.count })\n}\n```"
  },
  {
    "task": "Write a function that takes a temperature in Celsius and returns the equivalent in Fahrenheit.",
    "code": "```swift\nfunc celsiusToFahrenheit(celsius: Double) -> Double {\n    return (celsius * 9/5) + 32\n}\n```"
  },
  {
    "task": "Develop a function that returns the factorial of a given number.",
    "code": "```swift\nfunc factorial(of number: Int) -> Int {\n    if number <= 1 {\n        return 1\n    } else {\n        return number * factorial(of: number - 1)\n    }\n}\n```"
  },
  {
    "task": "Implement a function that receives a date and returns the day of the week.",
    "code": "```swift\nimport Foundation\n\nfunc dayOfWeek(from date: Date) -> String {\n    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = \"EEEE\"\n    return dateFormatter.string(from: date)\n}\n```"
  },
  {
    "task": "Write a function that calculates the area of a circle given its radius and returns the value.",
    "code": "```swift\nfunc areaOfCircle(radius: Double) -> Double {\n    return Double.pi * radius * radius\n}\n```"
  },
  {
    "task": "Create a function that converts a string to uppercase and returns the modified string.",
    "code": "```swift\nfunc convertToUppercase(_ input: String) -> String {\n    return input.uppercased()\n}\n```"
  },
  {
    "task": "Design a function that returns the reverse of a given list.",
    "code": "```swift\nfunc reverseList<T>(_ list: [T]) -> [T] {\n    return list.reversed()\n}\n```"
  },
  {
    "task": "Implement a function that accepts a string and returns a dictionary with character frequencies.",
    "code": "```swift\nfunc characterFrequencies(in text: String) -> [Character: Int] {\n    var frequencyDict: [Character: Int] = [:]\n    \n    for char in text {\n        frequencyDict[char, default: 0] += 1\n    }\n    \n    return frequencyDict\n}\n```"
  },
  {
    "task": "Write a function that returns the first non-repeating character in a string.",
    "code": "```swift\nfunc firstNonRepeatingCharacter(in string: String) -> Character? {\n    var characterCount = [Character: Int]()\n    \n    for character in string {\n        characterCount[character, default: 0] += 1\n    }\n    \n    for character in string {\n        if characterCount[character] == 1 {\n            return character\n        }\n    }\n    \n    return nil\n}\n```"
  },
  {
    "task": "Create a function that takes a list of numbers and returns a new list with only even numbers.",
    "code": "```swift\nfunc filterEvenNumbers(from numbers: [Int]) -> [Int] {\n    return numbers.filter { $0 % 2 == 0 }\n}\n```"
  },
  {
    "task": "Develop a function that receives a sentence and returns the word count.",
    "code": "```swift\nfunc wordCount(in sentence: String) -> Int {\n    let words = sentence.split(separator: \" \")\n    return words.count\n}\n```"
  },
  {
    "task": "Implement a function that returns the smallest element in an array.",
    "code": "```swift\nfunc smallestElement(in array: [Int]) -> Int? {\n    return array.min()\n}\n```"
  },
  {
    "task": "Write a function that takes two strings and returns true if they are anagrams.",
    "code": "```swift\nfunc areAnagrams(_ str1: String, _ str2: String) -> Bool {\n    return str1.sorted() == str2.sorted()\n}\n```"
  },
  {
    "task": "Create a function that accepts an integer and returns a list of its divisors.",
    "code": "```swift\nfunc findDivisors(of number: Int) -> [Int] {\n    guard number > 0 else { return [] }\n    var divisors: [Int] = []\n    for i in 1...number {\n        if number % i == 0 {\n            divisors.append(i)\n        }\n    }\n    return divisors\n}\n```"
  },
  {
    "task": "Design a function that returns the square root of a given number.",
    "code": "```swift\nimport Foundation\n\nfunc squareRoot(of number: Double) -> Double {\n    return sqrt(number)\n}\n```"
  },
  {
    "task": "Implement a function that accepts a list and returns it sorted in ascending order.",
    "code": "```swift\nfunc sortListAscending(_ list: [Int]) -> [Int] {\n    return list.sorted()\n}\n```"
  },
  {
    "task": "Write a function that checks whether a given year is a leap year and returns a boolean.",
    "code": "```swift\nfunc isLeapYear(_ year: Int) -> Bool {\n    return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)\n}\n```"
  },
  {
    "task": "Create a function that receives a list of numbers and returns their average.",
    "code": "```swift\nfunc average(of numbers: [Double]) -> Double? {\n    guard !numbers.isEmpty else { return nil }\n    let sum = numbers.reduce(0, +)\n    return sum / Double(numbers.count)\n}\n```"
  },
  {
    "task": "Develop a function that returns the nth Fibonacci number.",
    "code": "```swift\nfunc fibonacci(n: Int) -> Int {\n    guard n > 0 else { return 0 }\n    if n == 1 || n == 2 {\n        return 1\n    }\n    var a = 1\n    var b = 1\n    for _ in 3...n {\n        let c = a + b\n        a = b\n        b = c\n    }\n    return b\n}\n```"
  },
  {
    "task": "Implement a function that accepts a string and returns it with vowels removed.",
    "code": "```swift\nfunc removeVowels(from input: String) -> String {\n    return input.filter { ![\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"].contains($0) }\n}\n```"
  },
  {
    "task": "Write a function that takes two dates and returns the number of days between them.",
    "code": "```swift\nimport Foundation\n\nfunc daysBetweenDates(_ startDate: Date, _ endDate: Date) -> Int? {\n    let calendar = Calendar.current\n    let components = calendar.dateComponents([.day], from: startDate, to: endDate)\n    return components.day\n}\n```"
  },
  {
    "task": "Create a function that returns the last element of a list.",
    "code": "```swift\nfunc lastElement<T>(of list: [T]) -> T? {\n    return list.last\n}\n```"
  },
  {
    "task": "Design a function that calculates the GCD of two numbers and returns it.",
    "code": "```swift\nfunc gcd(_ a: Int, _ b: Int) -> Int {\n    if b == 0 {\n        return a\n    } else {\n        return gcd(b, a % b)\n    }\n}\n```"
  },
  {
    "task": "Implement a function that takes a list and returns a tuple with the min and max values.",
    "code": "```swift\nfunc findMinMax<T: Comparable>(_ list: [T]) -> (min: T, max: T)? {\n    guard let firstValue = list.first else {\n        return nil\n    }\n    var minValue = firstValue\n    var maxValue = firstValue\n    for value in list {\n        if value < minValue {\n            minValue = value\n        } else if value > maxValue {\n            maxValue = value\n        }\n    }\n    return (min: minValue, max: maxValue)\n}\n```"
  },
  {
    "task": "Write a function that converts a binary string to its decimal representation and returns it.",
    "code": "```swift\nfunc binaryStringToDecimal(_ binary: String) -> Int? {\n    return Int(binary, radix: 2)\n}\n```"
  },
  {
    "task": "Create a function that accepts a dictionary and returns a list of its keys.",
    "code": "```swift\nfunc getKeys(from dictionary: [AnyHashable: Any]) -> [AnyHashable] {\n    return Array(dictionary.keys)\n}\n```"
  },
  {
    "task": "Develop a function that returns the concatenation of two strings.",
    "code": "```swift\nfunc concatenateStrings(_ first: String, _ second: String) -> String {\n    return first + second\n}\n```"
  },
  {
    "task": "Implement a function that receives a list and returns a new list with duplicates removed.",
    "code": "```swift\nfunc removeDuplicates(from list: [Int]) -> [Int] {\n    return Array(Set(list))\n}\n```"
  },
  {
    "task": "Write a function that returns the intersection of two lists.",
    "code": "```swift\nfunc intersection<T: Hashable>(list1: [T], list2: [T]) -> [T] {\n    let set1 = Set(list1)\n    let set2 = Set(list2)\n    let intersectionSet = set1.intersection(set2)\n    return Array(intersectionSet)\n}\n```"
  },
  {
    "task": "Create a function that takes an integer and returns whether it is even or odd as a string.",
    "code": "```swift\nfunc evenOrOdd(_ number: Int) -> String {\n    return number % 2 == 0 ? \"even\" : \"odd\"\n}\n```"
  },
  {
    "task": "Design a function that returns the number of vowels in a given string.",
    "code": "```swift\nfunc countVowels(in string: String) -> Int {\n    let vowels = \"aeiouAEIOU\"\n    return string.filter { vowels.contains($0) }.count\n}\n```"
  },
  {
    "task": "Implement a function that counts the occurrences of a substring within a string and returns it.",
    "code": "```swift\nfunc countOccurrences(of substring: String, in string: String) -> Int {\n    return string.components(separatedBy: substring).count - 1\n}\n```"
  },
  {
    "task": "Write a function that accepts a list of numbers and returns them sorted in descending order.",
    "code": "```swift\nfunc sortDescending(_ numbers: [Int]) -> [Int] {\n    return numbers.sorted(by: >)\n}\n```"
  },
  {
    "task": "Create a function that returns the median of a list of numbers.",
    "code": "```swift\nfunc median(of numbers: [Double]) -> Double? {\n    guard !numbers.isEmpty else { return nil }\n    let sortedNumbers = numbers.sorted()\n    let count = sortedNumbers.count\n    if count % 2 == 0 {\n        return (sortedNumbers[count / 2 - 1] + sortedNumbers[count / 2]) / 2\n    } else {\n        return sortedNumbers[count / 2]\n    }\n}\n```"
  },
  {
    "task": "Develop a function that receives a sentence and returns it with words in reverse order.",
    "code": "```swift\nfunc reverseWords(in sentence: String) -> String {\n    let words = sentence.split(separator: \" \")\n    let reversedWords = words.reversed()\n    return reversedWords.joined(separator: \" \")\n}\n```"
  },
  {
    "task": "Implement a function that returns the sum of all elements in a matrix.",
    "code": "```swift\nfunc sumOfMatrix(_ matrix: [[Int]]) -> Int {\n    var total = 0\n    for row in matrix {\n        for element in row {\n            total += element\n        }\n    }\n    return total\n}\n```"
  },
  {
    "task": "Write a function that accepts a string and returns true if it is a palindrome.",
    "code": "```swift\nfunc isPalindrome(_ str: String) -> Bool {\n    let reversedStr = String(str.reversed())\n    return str == reversedStr\n}\n```"
  },
  {
    "task": "Create a function that takes a number and returns its binary representation as a string.",
    "code": "```swift\nfunc toBinaryString(_ number: Int) -> String {\n    return String(number, radix: 2)\n}\n```"
  },
  {
    "task": "Design a function that returns the number of words in a paragraph.",
    "code": "```swift\nfunc countWords(in paragraph: String) -> Int {\n    let words = paragraph.split { $0.isWhitespace }\n    return words.count\n}\n```"
  },
  {
    "task": "Implement a function that accepts a list and returns the index of its maximum element.",
    "code": "```swift\nfunc indexOfMaxElement<T: Comparable>(in list: [T]) -> Int? {\n    guard let maxElement = list.max() else { return nil }\n    return list.firstIndex(of: maxElement)\n}\n```"
  },
  {
    "task": "Write a function that takes a list of grades and returns the highest grade.",
    "code": "```swift\nfunc highestGrade(grades: [Int]) -> Int? {\n    return grades.max()\n}\n```"
  },
  {
    "task": "Create a function that returns the product of all positive integers up to a given number.",
    "code": "```swift\nfunc productUpTo(_ number: Int) -> Int {\n    guard number > 0 else { return 0 }\n    return (1...number).reduce(1, *)\n}\n```"
  },
  {
    "task": "Develop a function that receives a string and returns a new string with spaces replaced by hyphens.",
    "code": "```swift\nfunc replaceSpacesWithHyphens(in input: String) -> String {\n    return input.replacingOccurrences(of: \" \", with: \"-\")\n}\n```"
  },
  {
    "task": "Implement a function that takes a list of integers and returns their sum.",
    "code": "```swift\nfunc sum(of numbers: [Int]) -> Int {\n    return numbers.reduce(0, +)\n}\n```"
  },
  {
    "task": "Write a function that checks if a string is a valid email address and returns a boolean.",
    "code": "```swift\nimport Foundation\n\nfunc isValidEmail(_ email: String) -> Bool {\n    let emailRegEx = \"[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,}\"\n    let emailPred = NSPredicate(format:\"SELF MATCHES %@\", emailRegEx)\n    return emailPred.evaluate(with: email)\n}\n```"
  },
  {
    "task": "Create a function that returns the decimal equivalent of a hexadecimal string.",
    "code": "```swift\nfunc hexToDecimal(_ hex: String) -> Int? {\n    return Int(hex, radix: 16)\n}\n```"
  },
  {
    "task": "Design a function that calculates and returns the body mass index based on height and weight.",
    "code": "```swift\nfunc calculateBMI(weight: Double, height: Double) -> Double {\n    return weight / (height * height)\n}\n```"
  },
  {
    "task": "Implement a function that returns the initials of a person's name given a full name.",
    "code": "```swift\nfunc getInitials(from fullName: String) -> String {\n    let names = fullName.split(separator: \" \")\n    let initials = names.compactMap { $0.first }\n    return String(initials)\n}\n```"
  },
  {
    "task": "Write a function that accepts a list of names and returns them sorted alphabetically.",
    "code": "```swift\nfunc sortNamesAlphabetically(names: [String]) -> [String] {\n    return names.sorted()\n}\n```"
  },
  {
    "task": "Create a function that takes a list of integers and returns a list of their squares.",
    "code": "```swift\nfunc squareIntegers(integers: [Int]) -> [Int] {\n    return integers.map { $0 * $0 }\n}\n```"
  },
  {
    "task": "Develop a function that returns the common elements between two sets.",
    "code": "```swift\nfunc commonElements<T: Hashable>(between set1: Set<T>, and set2: Set<T>) -> Set<T> {\n    return set1.intersection(set2)\n}\n```"
  },
  {
    "task": "Implement a function that receives a list of strings and returns the shortest string.",
    "code": "```swift\nfunc shortestString(in strings: [String]) -> String? {\n    return strings.min(by: { $0.count < $1.count })\n}\n```"
  },
  {
    "task": "Write a function that returns the sum of digits of a given integer.",
    "code": "```swift\nfunc sumOfDigits(of number: Int) -> Int {\n    let digits = String(abs(number)).compactMap { $0.wholeNumberValue }\n    return digits.reduce(0, +)\n}\n```"
  },
  {
    "task": "Create a function that takes a matrix and returns its transpose.",
    "code": "```swift\nfunc transpose(matrix: [[Int]]) -> [[Int]] {\n    guard let rowCount = matrix.first?.count else { return [] }\n    var transposedMatrix = Array(repeating: [Int](), count: rowCount)\n    for row in matrix {\n        for (index, element) in row.enumerated() {\n            transposedMatrix[index].append(element)\n        }\n    }\n    return transposedMatrix\n}\n```"
  },
  {
    "task": "Design a function that returns the percentage of uppercase letters in a string.",
    "code": "```swift\nfunc percentageOfUppercase(in string: String) -> Double {\n    let totalCharacters = string.count\n    guard totalCharacters > 0 else { return 0.0 }\n    \n    let uppercaseCount = string.filter { $0.isUppercase }.count\n    return (Double(uppercaseCount) / Double(totalCharacters)) * 100.0\n}\n```"
  },
  {
    "task": "Implement a function that accepts a string and returns it with each word capitalized.",
    "code": "```swift\nfunc capitalizeWords(in text: String) -> String {\n    return text.split(separator: \" \").map { $0.capitalized }.joined(separator: \" \")\n}\n```"
  },
  {
    "task": "Write a function that takes a list and returns the difference between the max and min values.",
    "code": "```swift\nfunc differenceBetweenMaxAndMin(values: [Int]) -> Int? {\n    guard let maxValue = values.max(), let minValue = values.min() else {\n        return nil\n    }\n    return maxValue - minValue\n}\n```"
  },
  {
    "task": "Create a function that returns a list containing the first n prime numbers.",
    "code": "```swift\nfunc generatePrimes(n: Int) -> [Int] {\n    guard n > 0 else { return [] }\n    var primes: [Int] = []\n    var number = 2\n    \n    while primes.count < n {\n        if isPrime(number) {\n            primes.append(number)\n        }\n        number += 1\n    }\n    \n    return primes\n}\n\nfunc isPrime(_ num: Int) -> Bool {\n    if num < 2 { return false }\n    for i in 2...Int(sqrt(Double(num))) {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n```"
  },
  {
    "task": "Develop a function that receives a dictionary and returns a new dictionary with keys and values swapped.",
    "code": "```swift\nfunc swapKeysAndValues<T, U>(_ dictionary: [T: U]) -> [U: T] {\n    var swappedDictionary = [U: T]()\n    for (key, value) in dictionary {\n        swappedDictionary[value] = key\n    }\n    return swappedDictionary\n}\n```"
  },
  {
    "task": "Implement a function that accepts a string and returns the frequency of each word.",
    "code": "```swift\nfunc wordFrequency(in text: String) -> [String: Int] {\n    var frequencyDict = [String: Int]()\n    let words = text.split(separator: \" \").map { String($0) }\n    \n    for word in words {\n        frequencyDict[word, default: 0] += 1\n    }\n    \n    return frequencyDict\n}\n```"
  },
  {
    "task": "Write a function that takes two numbers and returns their greatest common divisor.",
    "code": "```swift\nfunc greatestCommonDivisor(_ a: Int, _ b: Int) -> Int {\n    var x = a\n    var y = b\n    while y != 0 {\n        let temp = y\n        y = x % y\n        x = temp\n    }\n    return x\n}\n```"
  },
  {
    "task": "Create a function that returns the number of consonants in a given string.",
    "code": "```swift\nfunc countConsonants(in string: String) -> Int {\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    return string.filter { consonants.contains($0) }.count\n}\n```"
  },
  {
    "task": "Design a function that checks if a number is a perfect square and returns a boolean.",
    "code": "```swift\nfunc isPerfectSquare(_ num: Int) -> Bool {\n    let root = Int(Double(num).squareRoot())\n    return root * root == num\n}\n```"
  },
  {
    "task": "Implement a function that takes a list of numbers and returns the mode.",
    "code": "```swift\nfunc findMode(numbers: [Int]) -> Int? {\n    var frequency: [Int: Int] = [:]\n    \n    for number in numbers {\n        frequency[number, default: 0] += 1\n    }\n    \n    let maxFrequency = frequency.values.max()\n    let mode = frequency.first { $0.value == maxFrequency }?.key\n    \n    return mode\n}\n```"
  },
  {
    "task": "Write a function that accepts a string and returns a new string with characters in reverse order.",
    "code": "```swift\nfunc reverseString(_ input: String) -> String {\n    return String(input.reversed())\n}\n```"
  },
  {
    "task": "Create a function that returns the sum of all even numbers in a list.",
    "code": "```swift\nfunc sumOfEvenNumbers(in numbers: [Int]) -> Int {\n    return numbers.filter { $0 % 2 == 0 }.reduce(0, +)\n}\n```"
  },
  {
    "task": "Develop a function that receives two lists and returns their union.",
    "code": "```swift\nfunc union<T: Hashable>(_ list1: [T], _ list2: [T]) -> [T] {\n    let set1 = Set(list1)\n    let set2 = Set(list2)\n    let unionSet = set1.union(set2)\n    return Array(unionSet)\n}\n```"
  },
  {
    "task": "Implement a function that takes a string and returns the number of unique characters.",
    "code": "```swift\nfunc countUniqueCharacters(in input: String) -> Int {\n    let uniqueCharacters = Set(input)\n    return uniqueCharacters.count\n}\n```"
  },
  {
    "task": "Write a function that returns the cube of a given number.",
    "code": "```swift\nfunc cube(of number: Double) -> Double {\n    return number * number * number\n}\n```"
  },
  {
    "task": "Create a function that calculates the power of a number given a base and exponent and returns the result.",
    "code": "```swift\nfunc power(base: Double, exponent: Int) -> Double {\n    return pow(base, Double(exponent))\n}\n```"
  },
  {
    "task": "Design a function that accepts a URL and returns its domain name.",
    "code": "```swift\nimport Foundation\n\nfunc extractDomainName(from urlString: String) -> String? {\n    guard let url = URL(string: urlString), let host = url.host else {\n        return nil\n    }\n    return host\n}\n```"
  },
  {
    "task": "Implement a function that takes a sentence and returns it with each letter shifted by one in the alphabet.",
    "code": "```swift\nfunc shiftSentence(_ sentence: String) -> String {\n    let shiftedSentence = sentence.map { character -> Character in\n        guard let asciiValue = character.asciiValue else { return character }\n        \n        switch character {\n        case \"a\"...\"y\", \"A\"...\"Y\":\n            return Character(UnicodeScalar(asciiValue + 1))\n        case \"z\":\n            return \"a\"\n        case \"Z\":\n            return \"A\"\n        default:\n            return character\n        }\n    }\n    \n    return String(shiftedSentence)\n}\n```"
  },
  {
    "task": "Write a function that checks if a list is sorted and returns a boolean.",
    "code": "```swift\nfunc isSorted<T: Comparable>(_ list: [T]) -> Bool {\n    for i in 0..<list.count - 1 {\n        if list[i] > list[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n```"
  },
  {
    "task": "Create a function that returns the longest increasing subsequence in a list of numbers.",
    "code": "```swift\nfunc longestIncreasingSubsequence(_ nums: [Int]) -> [Int] {\n    guard !nums.isEmpty else { return [] }\n    \n    var lengths = Array(repeating: 1, count: nums.count)\n    var predecessors = Array(repeating: -1, count: nums.count)\n    \n    for i in 1..<nums.count {\n        for j in 0..<i {\n            if nums[i] > nums[j] && lengths[i] < lengths[j] + 1 {\n                lengths[i] = lengths[j] + 1\n                predecessors[i] = j\n            }\n        }\n    }\n    \n    let maxLength = lengths.max() ?? 0\n    var index = lengths.firstIndex(of: maxLength) ?? -1\n    var sequence = [Int]()\n    \n    while index != -1 {\n        sequence.append(nums[index])\n        index = predecessors[index]\n    }\n    \n    return sequence.reversed()\n}\n```"
  },
  {
    "task": "Develop a function that calculates and returns the compound interest for given principal, rate, and time.",
    "code": "```swift\nfunc calculateCompoundInterest(principal: Double, rate: Double, time: Double) -> Double {\n    return principal * pow((1 + rate), time)\n}\n```"
  },
  {
    "task": "Implement a function that accepts two strings and returns their longest common substring.",
    "code": "```swift\nfunc longestCommonSubstring(_ str1: String, _ str2: String) -> String {\n    let len1 = str1.count\n    let len2 = str2.count\n    var maxLength = 0\n    var endIndex = 0\n    var dp = Array(repeating: Array(repeating: 0, count: len2 + 1), count: len1 + 1)\n    \n    for i in 1...len1 {\n        for j in 1...len2 {\n            if Array(str1)[i - 1] == Array(str2)[j - 1] {\n                dp[i][j] = dp[i - 1][j - 1] + 1\n                if dp[i][j] > maxLength {\n                    maxLength = dp[i][j]\n                    endIndex = i\n                }\n            }\n        }\n    }\n    let startIndex = endIndex - maxLength\n    let start = str1.index(str1.startIndex, offsetBy: startIndex)\n    let end = str1.index(str1.startIndex, offsetBy: endIndex)\n    return String(str1[start..<end])\n}\n```"
  },
  {
    "task": "Write a function that takes a number and returns true if it is a palindrome.",
    "code": "```swift\nfunc isPalindrome(_ number: Int) -> Bool {\n    let original = String(number)\n    let reversed = String(original.reversed())\n    return original == reversed\n}\n```"
  },
  {
    "task": "Create a function that returns the average length of words in a given sentence.",
    "code": "```swift\nfunc averageWordLength(in sentence: String) -> Double {\n    let words = sentence.split(separator: \" \")\n    let totalLength = words.reduce(0) { $0 + $1.count }\n    return words.isEmpty ? 0.0 : Double(totalLength) / Double(words.count)\n}\n```"
  },
  {
    "task": "Design a function that checks if a string contains only digits and returns a boolean.",
    "code": "```swift\nfunc containsOnlyDigits(_ input: String) -> Bool {\n    return input.allSatisfy { $0.isNumber }\n}\n```"
  },
  {
    "task": "Implement a function that receives a list of tuples and returns a list of the first elements.",
    "code": "```swift\nfunc getFirstElements<T>(_ tuples: [(T, Any)]) -> [T] {\n    return tuples.map { $0.0 }\n}\n```"
  },
  {
    "task": "Write a function that takes a year and returns the Chinese zodiac sign for that year.",
    "code": "```swift\nfunc chineseZodiacSign(for year: Int) -> String {\n    let zodiacSigns = [\"Monkey\", \"Rooster\", \"Dog\", \"Pig\", \"Rat\", \"Ox\", \"Tiger\", \"Rabbit\", \"Dragon\", \"Snake\", \"Horse\", \"Goat\"]\n    let index = (year - 1900) % 12\n    return zodiacSigns[index]\n}\n```"
  },
  {
    "task": "Create a function that returns the number of trailing zeros in a factorial of a given number.",
    "code": "```swift\nfunc trailingZerosInFactorial(_ n: Int) -> Int {\n    var count = 0\n    var powerOf5 = 5\n    while n / powerOf5 > 0 {\n        count += n / powerOf5\n        powerOf5 *= 5\n    }\n    return count\n}\n```"
  },
  {
    "task": "Develop a function that accepts a list and returns a new list with elements multiplied by their index.",
    "code": "```swift\nfunc multiplyElementsByIndex(_ list: [Int]) -> [Int] {\n    return list.enumerated().map { index, element in\n        return index * element\n    }\n}\n```"
  },
  {
    "task": "Implement a function that receives a string and returns a dictionary of word lengths.",
    "code": "```swift\nfunc wordLengths(in text: String) -> [String: Int] {\n    let words = text.split(separator: \" \").map { String($0) }\n    var lengths: [String: Int] = [:]\n    for word in words {\n        lengths[word] = word.count\n    }\n    return lengths\n}\n```"
  },
  {
    "task": "Write a function that takes a list of integers and returns a list of numbers that are divisible by 3.",
    "code": "```swift\nfunc numbersDivisibleByThree(from numbers: [Int]) -> [Int] {\n    return numbers.filter { $0 % 3 == 0 }\n}\n```"
  },
  {
    "task": "Create a function that returns the result of a quadratic equation given its coefficients.",
    "code": "```swift\nimport Foundation\n\nfunc quadraticEquation(a: Double, b: Double, c: Double) -> (Double?, Double?) {\n    let discriminant = b * b - 4 * a * c\n    \n    if discriminant < 0 {\n        return (nil, nil)\n    }\n    \n    let sqrtDiscriminant = sqrt(discriminant)\n    let root1 = (-b + sqrtDiscriminant) / (2 * a)\n    let root2 = (-b - sqrtDiscriminant) / (2 * a)\n    \n    return (root1, root2)\n}\n```"
  },
  {
    "task": "Design a function that checks if two lists have any elements in common and returns a boolean.",
    "code": "```swift\nfunc haveCommonElements<T: Equatable>(list1: [T], list2: [T]) -> Bool {\n    for element in list1 {\n        if list2.contains(element) {\n            return true\n        }\n    }\n    return false\n}\n```"
  },
  {
    "task": "Implement a function that accepts a list and returns the sum of its elements using recursion.",
    "code": "```swift\nfunc sumOfElements(_ list: [Int]) -> Int {\n    if list.isEmpty {\n        return 0\n    } else {\n        return list[0] + sumOfElements(Array(list.dropFirst()))\n    }\n}\n```"
  },
  {
    "task": "Write a function that takes a list of numbers and returns the variance.",
    "code": "```swift\nfunc calculateVariance(numbers: [Double]) -> Double {\n    guard !numbers.isEmpty else { return 0.0 }\n    \n    let mean = numbers.reduce(0, +) / Double(numbers.count)\n    let variance = numbers.reduce(0, { $0 + pow($1 - mean, 2) }) / Double(numbers.count)\n    \n    return variance\n}\n```"
  },
  {
    "task": "Create a function that returns the ASCII value of a given character.",
    "code": "```swift\nfunc asciiValue(of character: Character) -> Int? {\n    return character.asciiValue.map { Int($0) }\n}\n```"
  },
  {
    "task": "Develop a function that takes a number and returns the number of bits required for its binary representation.",
    "code": "```swift\nfunc numberOfBits(for number: Int) -> Int {\n    return number == 0 ? 1 : Int(bitPattern: number).bitWidth - number.leadingZeroBitCount\n}\n```"
  }
]