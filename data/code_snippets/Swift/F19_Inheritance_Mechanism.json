[
  {
    "task": "Create a base class for a vehicle with methods for speed and fuel efficiency, then derive a car class that overrides these methods to provide specific implementations.",
    "code": "```swift\nclass Vehicle {\n    func speed() -> Double {\n        return 0.0\n    }\n    \n    func fuelEfficiency() -> Double {\n        return 0.0\n    }\n}\n\nclass Car: Vehicle {\n    override func speed() -> Double {\n        return 120.0\n    }\n    \n    override func fuelEfficiency() -> Double {\n        return 15.0\n    }\n}\n```"
  },
  {
    "task": "Design a base class for a multimedia file with properties like duration and format, then extend it with a video class that includes resolution and frame rate.",
    "code": "```swift\nclass MultimediaFile {\n    var duration: Double\n    var format: String\n\n    init(duration: Double, format: String) {\n        self.duration = duration\n        self.format = format\n    }\n}\n\nclass VideoFile: MultimediaFile {\n    var resolution: String\n    var frameRate: Double\n\n    init(duration: Double, format: String, resolution: String, frameRate: Double) {\n        self.resolution = resolution\n        self.frameRate = frameRate\n        super.init(duration: duration, format: format)\n    }\n}\n```"
  },
  {
    "task": "Develop a superclass for bank accounts with methods for deposit and withdrawal, then create a savings account subclass that overrides the withdrawal method to incorporate interest deductions.",
    "code": "```swift\nclass BankAccount {\n    var balance: Double\n    \n    init(initialBalance: Double) {\n        self.balance = initialBalance\n    }\n    \n    func deposit(amount: Double) {\n        balance += amount\n    }\n    \n    func withdraw(amount: Double) {\n        if amount <= balance {\n            balance -= amount\n        }\n    }\n}\n\nclass SavingsAccount: BankAccount {\n    var interestRate: Double\n    \n    init(initialBalance: Double, interestRate: Double) {\n        self.interestRate = interestRate\n        super.init(initialBalance: initialBalance)\n    }\n    \n    override func withdraw(amount: Double) {\n        let interestDeduction = amount * interestRate\n        let totalAmount = amount + interestDeduction\n        if totalAmount <= balance {\n            balance -= totalAmount\n        }\n    }\n}\n```"
  },
  {
    "task": "Implement a base class for a geometric shape with methods to calculate area and perimeter, then create a rectangle subclass that provides specific calculations for these methods.",
    "code": "```swift\nclass GeometricShape {\n    func area() -> Double {\n        return 0.0\n    }\n    \n    func perimeter() -> Double {\n        return 0.0\n    }\n}\n\nclass Rectangle: GeometricShape {\n    var width: Double\n    var height: Double\n    \n    init(width: Double, height: Double) {\n        self.width = width\n        self.height = height\n    }\n    \n    override func area() -> Double {\n        return width * height\n    }\n    \n    override func perimeter() -> Double {\n        return 2 * (width + height)\n    }\n}\n```"
  },
  {
    "task": "Construct a parent class for employees with a method to calculate salary, then derive a manager class that overrides this method to include bonuses.",
    "code": "```swift\nclass Employee {\n    var baseSalary: Double\n    \n    init(baseSalary: Double) {\n        self.baseSalary = baseSalary\n    }\n    \n    func calculateSalary() -> Double {\n        return baseSalary\n    }\n}\n\nclass Manager: Employee {\n    var bonus: Double\n    \n    init(baseSalary: Double, bonus: Double) {\n        self.bonus = bonus\n        super.init(baseSalary: baseSalary)\n    }\n    \n    override func calculateSalary() -> Double {\n        return baseSalary + bonus\n    }\n}\n```"
  },
  {
    "task": "Set up a base class for a library item with properties like title and author, and extend it with a book subclass that adds a number of pages property.",
    "code": "```swift\nclass LibraryItem {\n    var title: String\n    var author: String\n    \n    init(title: String, author: String) {\n        self.title = title\n        self.author = author\n    }\n}\n\nclass Book: LibraryItem {\n    var numberOfPages: Int\n    \n    init(title: String, author: String, numberOfPages: Int) {\n        self.numberOfPages = numberOfPages\n        super.init(title: title, author: author)\n    }\n}\n```"
  },
  {
    "task": "Create a foundation class for an electronic device with a method to turn on and off, and derive a smartphone class that overrides the turn on method to require a passcode.",
    "code": "```swift\nclass ElectronicDevice {\n    func turnOn() {\n        print(\"Device is now on.\")\n    }\n    \n    func turnOff() {\n        print(\"Device is now off.\")\n    }\n}\n\nclass Smartphone: ElectronicDevice {\n    override func turnOn() {\n        print(\"Enter passcode to turn on the smartphone.\")\n    }\n}\n\nlet genericDevice = ElectronicDevice()\ngenericDevice.turnOn()\ngenericDevice.turnOff()\n\nlet myPhone = Smartphone()\nmyPhone.turnOn()\nmyPhone.turnOff()\n```"
  },
  {
    "task": "Design a base class for an animal with a method to make a sound, then create a dog subclass that overrides this method to bark.",
    "code": "```swift\nclass Animal {\n    func makeSound() {\n        print(\"Some generic sound\")\n    }\n}\n\nclass Dog: Animal {\n    override func makeSound() {\n        print(\"Bark\")\n    }\n}\n\nlet genericAnimal = Animal()\ngenericAnimal.makeSound()\n\nlet dog = Dog()\ndog.makeSound()\n```"
  },
  {
    "task": "Develop a superclass for meals with a method to calculate calories, then create a dessert subclass that overrides it to add extra sugar calories.",
    "code": "```swift\nclass Meal {\n    var name: String\n    var baseCalories: Int\n    \n    init(name: String, baseCalories: Int) {\n        self.name = name\n        self.baseCalories = baseCalories\n    }\n    \n    func calculateCalories() -> Int {\n        return baseCalories\n    }\n}\n\nclass Dessert: Meal {\n    var sugarCalories: Int\n    \n    init(name: String, baseCalories: Int, sugarCalories: Int) {\n        self.sugarCalories = sugarCalories\n        super.init(name: name, baseCalories: baseCalories)\n    }\n    \n    override func calculateCalories() -> Int {\n        return baseCalories + sugarCalories\n    }\n}\n```"
  },
  {
    "task": "Implement a base class for a transportation mode with a method to calculate travel time, then extend it with a plane subclass that overrides the method to calculate based on speed.",
    "code": "```swift\nclass TransportationMode {\n    func calculateTravelTime(distance: Double) -> Double {\n        return 0.0 // Default implementation, should be overridden\n    }\n}\n\nclass Plane: TransportationMode {\n    override func calculateTravelTime(distance: Double) -> Double {\n        let averageSpeed = 900.0 // Average speed of a plane in km/h\n        return distance / averageSpeed\n    }\n}\n```"
  },
  {
    "task": "Construct a parent class for a musical instrument with a method to play sound, then derive a piano class that overrides the method to play specific notes.",
    "code": "```swift\nclass MusicalInstrument {\n    func playSound() {\n        print(\"Playing sound from a musical instrument.\")\n    }\n}\n\nclass Piano: MusicalInstrument {\n    override func playSound() {\n        print(\"Playing specific notes on the piano.\")\n    }\n}\n\nlet instrument = MusicalInstrument()\ninstrument.playSound()\n\nlet piano = Piano()\npiano.playSound()\n```"
  },
  {
    "task": "Set up a base class for a user account with a method to reset password, and extend it with an admin account subclass that overrides it to include security questions.",
    "code": "```swift\nclass UserAccount {\n    var username: String\n    var password: String\n    \n    init(username: String, password: String) {\n        self.username = username\n        self.password = password\n    }\n    \n    func resetPassword(newPassword: String) {\n        self.password = newPassword\n        print(\"Password has been reset to \\(newPassword)\")\n    }\n}\n\nclass AdminAccount: UserAccount {\n    var securityQuestions: [String: String]\n    \n    init(username: String, password: String, securityQuestions: [String: String]) {\n        self.securityQuestions = securityQuestions\n        super.init(username: username, password: password)\n    }\n    \n    override func resetPassword(newPassword: String) {\n        for (question, answer) in securityQuestions {\n            print(\"Security Question: \\(question), Answer: \\(answer)\")\n        }\n        super.resetPassword(newPassword: newPassword)\n    }\n}\n```"
  },
  {
    "task": "Create a foundational class for a beverage with properties like volume and temperature, and derive a coffee class that overrides the temperature property to be hot.",
    "code": "```swift\nclass Beverage {\n    var volume: Double\n    var temperature: String\n    \n    init(volume: Double, temperature: String) {\n        self.volume = volume\n        self.temperature = temperature\n    }\n}\n\nclass Coffee: Beverage {\n    override init(volume: Double, temperature: String = \"Hot\") {\n        super.init(volume: volume, temperature: temperature)\n    }\n}\n```"
  },
  {
    "task": "Design a base class for a service appointment with a method to schedule time, then create a doctor appointment subclass that overrides this method to include consultation duration.",
    "code": "```swift\nclass ServiceAppointment {\n    var time: String\n    \n    init(time: String) {\n        self.time = time\n    }\n    \n    func scheduleTime() -> String {\n        return \"Appointment scheduled at \\(time).\"\n    }\n}\n\nclass DoctorAppointment: ServiceAppointment {\n    var consultationDuration: Int // in minutes\n    \n    init(time: String, consultationDuration: Int) {\n        self.consultationDuration = consultationDuration\n        super.init(time: time)\n    }\n    \n    override func scheduleTime() -> String {\n        return \"Doctor appointment scheduled at \\(time) for \\(consultationDuration) minutes.\"\n    }\n}\n```"
  },
  {
    "task": "Develop a superclass for electronic gadgets with a method to calculate battery life, then extend it with a laptop class that overrides this method to consider usage patterns.",
    "code": "```swift\nclass ElectronicGadget {\n    var batteryCapacity: Double\n    var powerConsumption: Double\n    \n    init(batteryCapacity: Double, powerConsumption: Double) {\n        self.batteryCapacity = batteryCapacity\n        self.powerConsumption = powerConsumption\n    }\n    \n    func calculateBatteryLife() -> Double {\n        return batteryCapacity / powerConsumption\n    }\n}\n\nclass Laptop: ElectronicGadget {\n    var usagePatternFactor: Double\n    \n    init(batteryCapacity: Double, powerConsumption: Double, usagePatternFactor: Double) {\n        self.usagePatternFactor = usagePatternFactor\n        super.init(batteryCapacity: batteryCapacity, powerConsumption: powerConsumption)\n    }\n    \n    override func calculateBatteryLife() -> Double {\n        return (batteryCapacity / powerConsumption) * usagePatternFactor\n    }\n}\n```"
  },
  {
    "task": "Implement a base class for a website component with a method to render content, then create a blog post subclass that overrides this method to include author information.",
    "code": "```swift\nclass WebsiteComponent {\n    func renderContent() -> String {\n        return \"Rendering base content\"\n    }\n}\n\nclass BlogPost: WebsiteComponent {\n    var author: String\n    \n    init(author: String) {\n        self.author = author\n    }\n    \n    override func renderContent() -> String {\n        return \"Rendering blog post content by \\(author)\"\n    }\n}\n\n// Usage\nlet component = WebsiteComponent()\nprint(component.renderContent()) // Output: Rendering base content\n\nlet blogPost = BlogPost(author: \"John Doe\")\nprint(blogPost.renderContent()) // Output: Rendering blog post content by John Doe\n```"
  },
  {
    "task": "Construct a parent class for a recipe with methods for ingredients and instructions, then derive a cake recipe class that overrides these methods to add baking steps.",
    "code": "```swift\nclass Recipe {\n    func ingredients() -> [String] {\n        return []\n    }\n    \n    func instructions() -> [String] {\n        return []\n    }\n}\n\nclass CakeRecipe: Recipe {\n    override func ingredients() -> [String] {\n        return [\"flour\", \"sugar\", \"eggs\", \"butter\", \"baking powder\", \"vanilla extract\"]\n    }\n    \n    override func instructions() -> [String] {\n        return [\n            \"Preheat the oven to 350\u00b0F (175\u00b0C).\",\n            \"In a bowl, mix flour, sugar, and baking powder.\",\n            \"Add eggs, melted butter, and vanilla extract to the dry ingredients.\",\n            \"Pour the batter into a greased cake pan.\",\n            \"Bake for 30-35 minutes or until a toothpick comes out clean.\",\n            \"Let the cake cool before serving.\"\n        ]\n    }\n}\n```"
  },
  {
    "task": "Set up a base class for a plant with methods for sunlight and water needs, and extend it with a cactus subclass that overrides these methods to require less water.",
    "code": "```swift\nclass Plant {\n    func sunlightNeeds() -> String {\n        return \"This plant needs moderate sunlight.\"\n    }\n    \n    func waterNeeds() -> String {\n        return \"This plant needs regular watering.\"\n    }\n}\n\nclass Cactus: Plant {\n    override func waterNeeds() -> String {\n        return \"This cactus needs minimal watering.\"\n    }\n}\n```"
  },
  {
    "task": "Create a foundational class for a building with properties like height and material, and derive a skyscraper class that overrides the height property to be significantly taller.",
    "code": "```swift\nclass Building {\n    var height: Double\n    var material: String\n    \n    init(height: Double, material: String) {\n        self.height = height\n        self.material = material\n    }\n}\n\nclass Skyscraper: Building {\n    \n    override init(height: Double = 1000.0, material: String) {\n        super.init(height: height, material: material)\n    }\n}\n```"
  },
  {
    "task": "Design a base class for a payment method with a method to process transactions, then create a credit card subclass that overrides this method to include credit limits.",
    "code": "```swift\nclass PaymentMethod {\n    func processTransaction(amount: Double) -> String {\n        return \"Processing transaction of $\\(amount)\"\n    }\n}\n\nclass CreditCard: PaymentMethod {\n    var creditLimit: Double\n    \n    init(creditLimit: Double) {\n        self.creditLimit = creditLimit\n    }\n    \n    override func processTransaction(amount: Double) -> String {\n        if amount > creditLimit {\n            return \"Transaction declined: amount exceeds credit limit\"\n        } else {\n            return \"Transaction approved for $\\(amount)\"\n        }\n    }\n}\n\n// Example usage:\nlet card = CreditCard(creditLimit: 5000)\nprint(card.processTransaction(amount: 6000)) // Transaction declined: amount exceeds credit limit\nprint(card.processTransaction(amount: 3000)) // Transaction approved for $3000\n```"
  },
  {
    "task": "Develop a superclass for a computer program with methods for input and output, then extend it with a game subclass that overrides these methods to include player interactions.",
    "code": "```swift\nclass ComputerProgram {\n    func input() {\n        print(\"Generic input handling\")\n    }\n    \n    func output() {\n        print(\"Generic output handling\")\n    }\n}\n\nclass Game: ComputerProgram {\n    override func input() {\n        print(\"Player input handling\")\n    }\n    \n    override func output() {\n        print(\"Player output interactions\")\n    }\n}\n\n// Example usage\nlet genericProgram = ComputerProgram()\ngenericProgram.input()\ngenericProgram.output()\n\nlet game = Game()\ngame.input()\ngame.output()\n```"
  },
  {
    "task": "Implement a base class for a dining establishment with a method to calculate wait time, then create a fast food subclass that overrides this method to be shorter.",
    "code": "```swift\nclass DiningEstablishment {\n    func calculateWaitTime() -> Int {\n        return 30 // Default wait time in minutes\n    }\n}\n\nclass FastFood: DiningEstablishment {\n    override func calculateWaitTime() -> Int {\n        return 10 // Shorter wait time for fast food\n    }\n}\n\n// Example usage\nlet restaurant = DiningEstablishment()\nprint(\"Dining Establishment Wait Time: \\(restaurant.calculateWaitTime()) minutes\")\n\nlet fastFoodPlace = FastFood()\nprint(\"Fast Food Wait Time: \\(fastFoodPlace.calculateWaitTime()) minutes\")\n```"
  },
  {
    "task": "Construct a parent class for a social media profile with methods for posting and liking, then derive a business profile class that overrides these methods to include promotions.",
    "code": "```swift\nclass SocialMediaProfile {\n    func post(content: String) {\n        print(\"Post: \\(content)\")\n    }\n    \n    func like(postID: Int) {\n        print(\"Liked post with ID: \\(postID)\")\n    }\n}\n\nclass BusinessProfile: SocialMediaProfile {\n    override func post(content: String) {\n        print(\"Business Post: \\(content) with promotion\")\n    }\n    \n    override func like(postID: Int) {\n        print(\"Liked post with ID: \\(postID) with promotion\")\n    }\n}\n\n// Example usage\nlet personalProfile = SocialMediaProfile()\npersonalProfile.post(content: \"Hello, world!\")\npersonalProfile.like(postID: 1)\n\nlet businessProfile = BusinessProfile()\nbusinessProfile.post(content: \"Check out our new product!\")\nbusinessProfile.like(postID: 2)\n```"
  },
  {
    "task": "Set up a base class for an educational course with methods for syllabus and grading, and extend it with an online course subclass that overrides these methods for remote learning.",
    "code": "```swift\nclass Course {\n    func syllabus() -> String {\n        return \"Course syllabus is available in the library.\"\n    }\n    \n    func grading() -> String {\n        return \"Grading is based on assignments and exams.\"\n    }\n}\n\nclass OnlineCourse: Course {\n    override func syllabus() -> String {\n        return \"Course syllabus is available online.\"\n    }\n    \n    override func grading() -> String {\n        return \"Grading is based on online quizzes and projects.\"\n    }\n}\n```"
  },
  {
    "task": "Create a foundational class for a sports team with properties like team name and coach, and derive a football team class that overrides the coach property with a specific person.",
    "code": "```swift\nclass SportsTeam {\n    var teamName: String\n    var coach: String\n    \n    init(teamName: String, coach: String) {\n        self.teamName = teamName\n        self.coach = coach\n    }\n}\n\nclass FootballTeam: SportsTeam {\n    override init(teamName: String, coach: String = \"Specific Coach\") {\n        super.init(teamName: teamName, coach: coach)\n    }\n}\n\nlet footballTeam = FootballTeam(teamName: \"Eagles\")\nprint(\"Team Name: \\(footballTeam.teamName), Coach: \\(footballTeam.coach)\")\n```"
  },
  {
    "task": "Design a base class for a document with methods for printing and saving, then create a PDF document subclass that overrides these methods to include encryption.",
    "code": "```swift\nclass Document {\n    func printDocument() {\n        print(\"Printing document...\")\n    }\n    \n    func saveDocument() {\n        print(\"Saving document...\")\n    }\n}\n\nclass PDFDocument: Document {\n    override func printDocument() {\n        print(\"Printing PDF document with encryption...\")\n    }\n    \n    override func saveDocument() {\n        print(\"Saving PDF document with encryption...\")\n    }\n}\n\n// Example usage\nlet pdfDoc = PDFDocument()\npdfDoc.printDocument()\npdfDoc.saveDocument()\n```"
  },
  {
    "task": "Develop a superclass for a retail product with methods for pricing and discount, then extend it with an electronics product class that overrides the discount method to offer more.",
    "code": "```swift\nclass RetailProduct {\n    var name: String\n    var price: Double\n    \n    init(name: String, price: Double) {\n        self.name = name\n        self.price = price\n    }\n    \n    func pricing() -> Double {\n        return price\n    }\n    \n    func discount() -> Double {\n        return price * 0.10 // 10% discount\n    }\n}\n\nclass ElectronicsProduct: RetailProduct {\n    override func discount() -> Double {\n        return price * 0.20 // 20% discount\n    }\n}\n\n// Example usage:\nlet genericProduct = RetailProduct(name: \"Generic Item\", price: 100.0)\nprint(\"Generic Product Price: \\(genericProduct.pricing())\")\nprint(\"Generic Product Discount: \\(genericProduct.discount())\")\n\nlet electronicProduct = ElectronicsProduct(name: \"Laptop\", price: 1000.0)\nprint(\"Electronics Product Price: \\(electronicProduct.pricing())\")\nprint(\"Electronics Product Discount: \\(electronicProduct.discount())\")\n```"
  },
  {
    "task": "Implement a base class for a subscription service with a method to renew membership, then create a monthly subscription subclass that overrides this method for automatic renewal.",
    "code": "```swift\nclass SubscriptionService {\n    func renewMembership() {\n        print(\"Renewing membership manually.\")\n    }\n}\n\nclass MonthlySubscription: SubscriptionService {\n    override func renewMembership() {\n        print(\"Automatically renewing monthly membership.\")\n    }\n}\n\nlet service = SubscriptionService()\nservice.renewMembership()\n\nlet monthlyService = MonthlySubscription()\nmonthlyService.renewMembership()\n```"
  },
  {
    "task": "Construct a parent class for a language translator with a method to translate text, then derive a French translator class that overrides this method for French language specifics.",
    "code": "```swift\nclass LanguageTranslator {\n    func translate(text: String) -> String {\n        return \"Translation not available\"\n    }\n}\n\nclass FrenchTranslator: LanguageTranslator {\n    override func translate(text: String) -> String {\n        return \"Translation to French: \\(text)\"\n    }\n}\n```"
  },
  {
    "task": "Set up a base class for a customer order with methods for placing and tracking, and extend it with a food order subclass that overrides tracking for delivery status.",
    "code": "```swift\nclass CustomerOrder {\n    func placeOrder() {\n        print(\"Order placed.\")\n    }\n    \n    func trackOrder() {\n        print(\"Tracking order.\")\n    }\n}\n\nclass FoodOrder: CustomerOrder {\n    override func trackOrder() {\n        print(\"Tracking food order delivery status.\")\n    }\n}\n\n// Example usage:\nlet order = CustomerOrder()\norder.placeOrder()\norder.trackOrder()\n\nlet foodOrder = FoodOrder()\nfoodOrder.placeOrder()\nfoodOrder.trackOrder()\n```"
  },
  {
    "task": "Create a foundational class for an artwork with properties like artist and medium, and derive a painting class that overrides the medium property to be 'canvas'.",
    "code": "```swift\nclass Artwork {\n    var artist: String\n    var medium: String\n    \n    init(artist: String, medium: String) {\n        self.artist = artist\n        self.medium = medium\n    }\n}\n\nclass Painting: Artwork {\n    override init(artist: String, medium: String = \"canvas\") {\n        super.init(artist: artist, medium: medium)\n    }\n}\n```"
  },
  {
    "task": "Design a base class for a computer network with methods for connectivity and bandwidth, then create a wireless network subclass that overrides these methods for signal strength.",
    "code": "```swift\nclass ComputerNetwork {\n    func connectivity() -> String {\n        return \"Standard connectivity\"\n    }\n    \n    func bandwidth() -> String {\n        return \"Standard bandwidth\"\n    }\n}\n\nclass WirelessNetwork: ComputerNetwork {\n    override func connectivity() -> String {\n        return \"Wireless connectivity with signal strength\"\n    }\n    \n    override func bandwidth() -> String {\n        return \"Wireless bandwidth with signal strength\"\n    }\n}\n```"
  },
  {
    "task": "Develop a superclass for a messaging app with methods for sending and receiving messages, then extend it with a secure messaging subclass that overrides these methods for encryption.",
    "code": "```swift\nimport Foundation\n\n// Superclass for a messaging app\nclass MessagingApp {\n    func sendMessage(_ message: String) {\n        print(\"Sending message: \\(message)\")\n    }\n    \n    func receiveMessage() -> String {\n        return \"Received message\"\n    }\n}\n\n// Subclass for secure messaging with encryption\nclass SecureMessagingApp: MessagingApp {\n    override func sendMessage(_ message: String) {\n        let encryptedMessage = encrypt(message)\n        print(\"Sending encrypted message: \\(encryptedMessage)\")\n    }\n    \n    override func receiveMessage() -> String {\n        let encryptedMessage = super.receiveMessage()\n        return decrypt(encryptedMessage)\n    }\n    \n    private func encrypt(_ message: String) -> String {\n        return String(message.reversed())  // Simple encryption with reversal\n    }\n    \n    private func decrypt(_ message: String) -> String {\n        return String(message.reversed())  // Simple decryption with reversal\n    }\n}\n```"
  },
  {
    "task": "Implement a base class for a travel itinerary with methods for destinations and activities, then create a vacation itinerary subclass that overrides these methods for leisure activities.",
    "code": "```swift\nclass TravelItinerary {\n    func destinations() -> [String] {\n        return [\"Generic Destination\"]\n    }\n    \n    func activities() -> [String] {\n        return [\"Generic Activity\"]\n    }\n}\n\nclass VacationItinerary: TravelItinerary {\n    override func destinations() -> [String] {\n        return [\"Beach\", \"Mountain Resort\"]\n    }\n    \n    override func activities() -> [String] {\n        return [\"Sunbathing\", \"Hiking\", \"Spa\"]\n    }\n}\n```"
  },
  {
    "task": "Construct a parent class for a healthcare record with methods for patient data and treatment history, then derive a pediatric record class that overrides these methods for child-specific data.",
    "code": "```swift\nclass HealthcareRecord {\n    func patientData() -> String {\n        return \"Generic patient data\"\n    }\n    \n    func treatmentHistory() -> String {\n        return \"General treatment history\"\n    }\n}\n\nclass PediatricRecord: HealthcareRecord {\n    override func patientData() -> String {\n        return \"Child-specific patient data\"\n    }\n    \n    override func treatmentHistory() -> String {\n        return \"Pediatric treatment history\"\n    }\n}\n```"
  },
  {
    "task": "Set up a base class for a culinary dish with methods for preparation and serving, and extend it with an appetizer subclass that overrides these methods for smaller portions.",
    "code": "```swift\nclass CulinaryDish {\n    func prepare() -> String {\n        return \"Preparing the dish.\"\n    }\n    \n    func serve() -> String {\n        return \"Serving the dish.\"\n    }\n}\n\nclass Appetizer: CulinaryDish {\n    override func prepare() -> String {\n        return \"Preparing a smaller portion of the dish.\"\n    }\n    \n    override func serve() -> String {\n        return \"Serving a smaller portion of the dish.\"\n    }\n}\n```"
  },
  {
    "task": "Create a foundational class for a book collection with properties like genre and author, and derive a mystery collection class that overrides the genre property to be 'mystery'.",
    "code": "```swift\nclass BookCollection {\n    var genre: String\n    var author: String\n    \n    init(genre: String, author: String) {\n        self.genre = genre\n        self.author = author\n    }\n}\n\nclass MysteryCollection: BookCollection {\n    override init(author: String) {\n        super.init(genre: \"mystery\", author: author)\n    }\n}\n```"
  },
  {
    "task": "Design a base class for a file storage system with methods for saving and deleting files, then create a cloud storage subclass that overrides these methods for remote access.",
    "code": "```swift\nclass FileStorage {\n    func saveFile(name: String, data: Data) {\n        print(\"Saving file locally: \\(name)\")\n    }\n    \n    func deleteFile(name: String) {\n        print(\"Deleting file locally: \\(name)\")\n    }\n}\n\nclass CloudStorage: FileStorage {\n    override func saveFile(name: String, data: Data) {\n        print(\"Saving file to cloud: \\(name)\")\n    }\n    \n    override func deleteFile(name: String) {\n        print(\"Deleting file from cloud: \\(name)\")\n    }\n}\n```"
  },
  {
    "task": "Develop a superclass for a seasonal sale event with methods for discounts and promotions, then extend it with a summer sale subclass that overrides these methods for summer items.",
    "code": "```swift\nclass SeasonalSaleEvent {\n    func discount() -> Double {\n        return 0.10 // Default 10% discount\n    }\n    \n    func promotion() -> String {\n        return \"General promotion: Buy one, get one 50% off!\"\n    }\n}\n\nclass SummerSale: SeasonalSaleEvent {\n    override func discount() -> Double {\n        return 0.20 // 20% discount for summer items\n    }\n    \n    override func promotion() -> String {\n        return \"Summer promotion: Buy two summer items, get one free!\"\n    }\n}\n\n// Usage\nlet generalSale = SeasonalSaleEvent()\nprint(\"General Discount: \\(generalSale.discount() * 100)%\")\nprint(\"General Promotion: \\(generalSale.promotion())\")\n\nlet summerSale = SummerSale()\nprint(\"Summer Discount: \\(summerSale.discount() * 100)%\")\nprint(\"Summer Promotion: \\(summerSale.promotion())\")\n```"
  },
  {
    "task": "Implement a base class for a personal budget with methods for income and expenses, then create a student budget subclass that overrides these methods for tuition and fees.",
    "code": "```swift\nclass PersonalBudget {\n    var totalIncome: Double = 0.0\n    var totalExpenses: Double = 0.0\n    \n    func addIncome(amount: Double) {\n        totalIncome += amount\n    }\n    \n    func addExpense(amount: Double) {\n        totalExpenses += amount\n    }\n    \n    func getNetBalance() -> Double {\n        return totalIncome - totalExpenses\n    }\n}\n\nclass StudentBudget: PersonalBudget {\n    var tuitionFees: Double = 0.0\n    \n    override func addIncome(amount: Double) {\n        super.addIncome(amount: amount)\n        print(\"Income added for student budget\")\n    }\n    \n    override func addExpense(amount: Double) {\n        tuitionFees += amount\n        totalExpenses += amount\n        print(\"Expense added for student budget\")\n    }\n}\n\nlet studentBudget = StudentBudget()\nstudentBudget.addIncome(amount: 1000)\nstudentBudget.addExpense(amount: 200)\nprint(\"Net Balance: \\(studentBudget.getNetBalance())\")\n```"
  },
  {
    "task": "Construct a parent class for a fitness routine with methods for exercises and duration, then derive a yoga routine class that overrides these methods for flexibility exercises.",
    "code": "```swift\nclass FitnessRoutine {\n    func exercises() -> String {\n        return \"General exercises\"\n    }\n    \n    func duration() -> String {\n        return \"General duration\"\n    }\n}\n\nclass YogaRoutine: FitnessRoutine {\n    override func exercises() -> String {\n        return \"Flexibility exercises\"\n    }\n    \n    override func duration() -> String {\n        return \"Yoga duration\"\n    }\n}\n\nlet yoga = YogaRoutine()\nprint(yoga.exercises()) // Outputs: Flexibility exercises\nprint(yoga.duration())  // Outputs: Yoga duration\n```"
  },
  {
    "task": "Set up a base class for a transportation ticket with methods for pricing and validity, and extend it with an airline ticket subclass that overrides these methods for baggage allowance.",
    "code": "```swift\nclass TransportationTicket {\n    func pricing() -> String {\n        return \"Base price calculation\"\n    }\n    \n    func validity() -> String {\n        return \"Base validity check\"\n    }\n}\n\nclass AirlineTicket: TransportationTicket {\n    override func pricing() -> String {\n        return \"Airline ticket price calculation with baggage allowance\"\n    }\n    \n    override func validity() -> String {\n        return \"Airline ticket validity check with baggage allowance\"\n    }\n}\n```"
  },
  {
    "task": "Create a foundational class for a digital photo album with properties like album name and date, and derive a vacation album class that overrides the date property to be specific.",
    "code": "```swift\nclass DigitalPhotoAlbum {\n    var albumName: String\n    var date: String\n    \n    init(albumName: String, date: String) {\n        self.albumName = albumName\n        self.date = date\n    }\n}\n\nclass VacationAlbum: DigitalPhotoAlbum {\n    var vacationDate: String {\n        didSet {\n            self.date = vacationDate\n        }\n    }\n    \n    override init(albumName: String, date: String) {\n        self.vacationDate = date\n        super.init(albumName: albumName, date: date)\n    }\n}\n```"
  },
  {
    "task": "Design a base class for a home appliance with methods for power usage and warranty, then create a refrigerator subclass that overrides these methods for energy efficiency.",
    "code": "```swift\nclass HomeAppliance {\n    func powerUsage() -> String {\n        return \"Standard power usage\"\n    }\n    \n    func warranty() -> String {\n        return \"1 year warranty\"\n    }\n}\n\nclass Refrigerator: HomeAppliance {\n    override func powerUsage() -> String {\n        return \"Energy efficient power usage\"\n    }\n    \n    override func warranty() -> String {\n        return \"2 years warranty with energy efficiency coverage\"\n    }\n}\n\n// Example usage\nlet fridge = Refrigerator()\nprint(fridge.powerUsage())  // Energy efficient power usage\nprint(fridge.warranty())    // 2 years warranty with energy efficiency coverage\n```"
  },
  {
    "task": "Develop a superclass for a software update with methods for versioning and patch notes, then extend it with a security update subclass that overrides these methods for vulnerabilities.",
    "code": "```swift\nclass SoftwareUpdate {\n    var version: String\n    var patchNotes: String\n    \n    init(version: String, patchNotes: String) {\n        self.version = version\n        self.patchNotes = patchNotes\n    }\n    \n    func getVersion() -> String {\n        return \"Version: \\(version)\"\n    }\n    \n    func getPatchNotes() -> String {\n        return \"Patch Notes: \\(patchNotes)\"\n    }\n}\n\nclass SecurityUpdate: SoftwareUpdate {\n    var vulnerabilities: [String]\n    \n    init(version: String, patchNotes: String, vulnerabilities: [String]) {\n        self.vulnerabilities = vulnerabilities\n        super.init(version: version, patchNotes: patchNotes)\n    }\n    \n    override func getVersion() -> String {\n        return \"Security Update Version: \\(version)\"\n    }\n    \n    override func getPatchNotes() -> String {\n        let vulnerabilitiesList = vulnerabilities.joined(separator: \", \")\n        return \"Security Patch Notes: \\(patchNotes). Vulnerabilities addressed: \\(vulnerabilitiesList)\"\n    }\n}\n```"
  },
  {
    "task": "Implement a base class for a musical performance with methods for rehearsal and execution, then create a concert performance subclass that overrides these methods for live audience.",
    "code": "```swift\nclass MusicalPerformance {\n    func rehearsal() {\n        print(\"Rehearsing the performance.\")\n    }\n    \n    func execute() {\n        print(\"Executing the performance.\")\n    }\n}\n\nclass ConcertPerformance: MusicalPerformance {\n    override func rehearsal() {\n        print(\"Rehearsing the concert with focus on stage presence.\")\n    }\n    \n    override func execute() {\n        print(\"Performing live for the audience.\")\n    }\n}\n```"
  },
  {
    "task": "Construct a parent class for an academic degree with methods for course requirements and credits, then derive a master's degree class that overrides these methods for advanced studies.",
    "code": "```swift\nclass AcademicDegree {\n    func courseRequirements() -> String {\n        return \"Complete all required undergraduate courses.\"\n    }\n    \n    func credits() -> Int {\n        return 120\n    }\n}\n\nclass MastersDegree: AcademicDegree {\n    override func courseRequirements() -> String {\n        return \"Complete all required graduate-level courses and a thesis.\"\n    }\n    \n    override func credits() -> Int {\n        return 30\n    }\n}\n```"
  },
  {
    "task": "Set up a base class for a weather forecast with methods for temperature and conditions, and extend it with a winter forecast subclass that overrides these methods for snow conditions.",
    "code": "```swift\nclass WeatherForecast {\n    func temperature() -> String {\n        return \"The temperature is moderate.\"\n    }\n    \n    func conditions() -> String {\n        return \"The weather conditions are clear.\"\n    }\n}\n\nclass WinterForecast: WeatherForecast {\n    override func temperature() -> String {\n        return \"The temperature is below freezing.\"\n    }\n    \n    override func conditions() -> String {\n        return \"Snow is expected.\"\n    }\n}\n\n// Example usage\nlet generalForecast = WeatherForecast()\nprint(generalForecast.temperature())\nprint(generalForecast.conditions())\n\nlet winterForecast = WinterForecast()\nprint(winterForecast.temperature())\nprint(winterForecast.conditions())\n```"
  },
  {
    "task": "Create a foundational class for a personal diary with properties like date and entries, and derive a travel diary class that overrides the date property with travel dates.",
    "code": "```swift\nimport Foundation\n\nclass PersonalDiary {\n    var date: Date\n    var entries: [String]\n    \n    init(date: Date, entries: [String]) {\n        self.date = date\n        self.entries = entries\n    }\n}\n\nclass TravelDiary: PersonalDiary {\n    override var date: Date {\n        get {\n            return super.date\n        }\n        set {\n            super.date = newValue\n        }\n    }\n    \n    init(travelDate: Date, entries: [String]) {\n        super.init(date: travelDate, entries: entries)\n    }\n}\n```"
  },
  {
    "task": "Design a base class for a pet with methods for feeding and grooming, then create a cat subclass that overrides these methods with specific food preferences.",
    "code": "```swift\nclass Pet {\n    func feed() {\n        print(\"Feeding the pet\")\n    }\n    \n    func groom() {\n        print(\"Grooming the pet\")\n    }\n}\n\nclass Cat: Pet {\n    override func feed() {\n        print(\"Feeding the cat with specific food preferences\")\n    }\n    \n    override func groom() {\n        print(\"Grooming the cat specifically\")\n    }\n}\n\nlet myCat = Cat()\nmyCat.feed()\nmyCat.groom()\n```"
  },
  {
    "task": "Develop a superclass for a software library with methods for installation and updates, then extend it with a graphics library subclass that overrides these methods for rendering capabilities.",
    "code": "```swift\nclass SoftwareLibrary {\n    func install() {\n        print(\"Installing software library...\")\n    }\n    \n    func update() {\n        print(\"Updating software library...\")\n    }\n}\n\nclass GraphicsLibrary: SoftwareLibrary {\n    override func install() {\n        print(\"Installing graphics library with rendering capabilities...\")\n    }\n    \n    override func update() {\n        print(\"Updating graphics library with rendering enhancements...\")\n    }\n}\n\n// Example usage\nlet library = SoftwareLibrary()\nlibrary.install()\nlibrary.update()\n\nlet graphicsLibrary = GraphicsLibrary()\ngraphicsLibrary.install()\ngraphicsLibrary.update()\n```"
  },
  {
    "task": "Implement a base class for a political campaign with methods for fundraising and events, then create a presidential campaign subclass that overrides these methods for national scale.",
    "code": "```swift\nclass PoliticalCampaign {\n    func fundraise() {\n        print(\"Fundraising for the campaign.\")\n    }\n    \n    func holdEvent() {\n        print(\"Holding a local campaign event.\")\n    }\n}\n\nclass PresidentialCampaign: PoliticalCampaign {\n    override func fundraise() {\n        print(\"Fundraising for the national presidential campaign.\")\n    }\n    \n    override func holdEvent() {\n        print(\"Holding a national campaign event.\")\n    }\n}\n```"
  },
  {
    "task": "Construct a parent class for an automotive part with methods for durability and replacement, then derive an engine part class that overrides these methods for performance.",
    "code": "```swift\nclass AutomotivePart {\n    func durability() -> String {\n        return \"Standard durability\"\n    }\n    \n    func replacement() -> String {\n        return \"Standard replacement procedure\"\n    }\n}\n\nclass EnginePart: AutomotivePart {\n    override func durability() -> String {\n        return \"High performance durability\"\n    }\n    \n    override func replacement() -> String {\n        return \"Engine-specific replacement procedure\"\n    }\n}\n```"
  },
  {
    "task": "Set up a base class for an online tutorial with methods for lessons and quizzes, and extend it with a coding tutorial subclass that overrides these methods for interactive exercises.",
    "code": "```swift\nclass OnlineTutorial {\n    func lesson() {\n        print(\"Conducting a lesson.\")\n    }\n    \n    func quiz() {\n        print(\"Taking a quiz.\")\n    }\n}\n\nclass CodingTutorial: OnlineTutorial {\n    override func lesson() {\n        print(\"Conducting an interactive coding lesson.\")\n    }\n    \n    override func quiz() {\n        print(\"Taking an interactive coding quiz.\")\n    }\n}\n\nlet tutorial = CodingTutorial()\ntutorial.lesson()\ntutorial.quiz()\n```"
  },
  {
    "task": "Create a foundational class for a personal collection with properties like item type and value, and derive a stamp collection class that overrides the item type property to be 'stamps'.",
    "code": "```swift\nclass PersonalCollection {\n    var itemType: String\n    var value: Double\n    \n    init(itemType: String, value: Double) {\n        self.itemType = itemType\n        self.value = value\n    }\n}\n\nclass StampCollection: PersonalCollection {\n    override init(itemType: String = \"stamps\", value: Double) {\n        super.init(itemType: itemType, value: value)\n    }\n}\n```"
  },
  {
    "task": "Design a base class for a video game character with methods for health and abilities, then create a warrior character subclass that overrides these methods for strength.",
    "code": "```swift\nclass GameCharacter {\n    var health: Int = 100\n    \n    func abilities() -> String {\n        return \"Basic abilities\"\n    }\n}\n\nclass Warrior: GameCharacter {\n    override init() {\n        super.init()\n        self.health = 150\n    }\n    \n    override func abilities() -> String {\n        return \"Enhanced strength\"\n    }\n}\n\n// Example usage:\nlet warrior = Warrior()\nprint(warrior.health) // Outputs: 150\nprint(warrior.abilities()) // Outputs: Enhanced strength\n```"
  },
  {
    "task": "Develop a superclass for an event planner with methods for scheduling and budgeting, then extend it with a wedding planner subclass that overrides these methods for ceremony details.",
    "code": "```swift\nclass EventPlanner {\n    func scheduleEvent(date: String) -> String {\n        return \"Event scheduled on \\(date)\"\n    }\n    \n    func budgetEvent(amount: Double) -> String {\n        return \"Event budget is \\(amount)\"\n    }\n}\n\nclass WeddingPlanner: EventPlanner {\n    override func scheduleEvent(date: String) -> String {\n        return \"Wedding ceremony scheduled on \\(date)\"\n    }\n    \n    override func budgetEvent(amount: Double) -> String {\n        return \"Wedding ceremony budget is \\(amount)\"\n    }\n}\n```"
  },
  {
    "task": "Implement a base class for a software feature with methods for functionality and user feedback, then create a beta feature subclass that overrides these methods for testing.",
    "code": "```swift\nclass SoftwareFeature {\n    func functionality() {\n        print(\"Executing main feature functionality.\")\n    }\n    \n    func userFeedback() {\n        print(\"Gathering user feedback for the main feature.\")\n    }\n}\n\nclass BetaFeature: SoftwareFeature {\n    override func functionality() {\n        print(\"Executing beta feature functionality for testing.\")\n    }\n    \n    override func userFeedback() {\n        print(\"Gathering user feedback for the beta feature.\")\n    }\n}\n\n// Example usage\nlet mainFeature = SoftwareFeature()\nmainFeature.functionality()\nmainFeature.userFeedback()\n\nlet betaFeature = BetaFeature()\nbetaFeature.functionality()\nbetaFeature.userFeedback()\n```"
  },
  {
    "task": "Construct a parent class for a gardening tool with methods for usage and maintenance, then derive a lawn mower class that overrides these methods for grass cutting.",
    "code": "```swift\nclass GardeningTool {\n    func usage() {\n        print(\"Using the gardening tool.\")\n    }\n    \n    func maintenance() {\n        print(\"Performing maintenance on the gardening tool.\")\n    }\n}\n\nclass LawnMower: GardeningTool {\n    override func usage() {\n        print(\"Using the lawn mower to cut grass.\")\n    }\n    \n    override func maintenance() {\n        print(\"Performing maintenance specific to the lawn mower.\")\n    }\n}\n\n// Example usage\nlet tool = GardeningTool()\ntool.usage()\ntool.maintenance()\n\nlet mower = LawnMower()\nmower.usage()\nmower.maintenance()\n```"
  },
  {
    "task": "Set up a base class for a household chore with methods for time and effort, and extend it with a cleaning chore subclass that overrides these methods for dirt removal.",
    "code": "```swift\nclass HouseholdChore {\n    func timeRequired() -> String {\n        return \"Time required for chore\"\n    }\n    \n    func effortRequired() -> String {\n        return \"Effort required for chore\"\n    }\n}\n\nclass CleaningChore: HouseholdChore {\n    override func timeRequired() -> String {\n        return \"Time required for cleaning chore\"\n    }\n    \n    override func effortRequired() -> String {\n        return \"Effort required for dirt removal\"\n    }\n}\n```"
  },
  {
    "task": "Create a foundational class for a personal project with properties like name and deadline, and derive a coding project class that overrides the deadline property for milestones.",
    "code": "```swift\nclass Project {\n    var name: String\n    var deadline: String\n\n    init(name: String, deadline: String) {\n        self.name = name\n        self.deadline = deadline\n    }\n}\n\nclass CodingProject: Project {\n    var milestoneDeadline: String\n\n    init(name: String, deadline: String, milestoneDeadline: String) {\n        self.milestoneDeadline = milestoneDeadline\n        super.init(name: name, deadline: deadline)\n    }\n\n    override var deadline: String {\n        get {\n            return milestoneDeadline\n        }\n        set {\n            milestoneDeadline = newValue\n        }\n    }\n}\n```"
  },
  {
    "task": "Design a base class for a holiday celebration with methods for traditions and activities, then create a Christmas celebration subclass that overrides these methods for gift exchange.",
    "code": "```swift\nclass HolidayCelebration {\n    func traditions() -> String {\n        return \"General holiday traditions\"\n    }\n    \n    func activities() -> String {\n        return \"General holiday activities\"\n    }\n}\n\nclass ChristmasCelebration: HolidayCelebration {\n    override func traditions() -> String {\n        return \"Christmas traditions\"\n    }\n    \n    override func activities() -> String {\n        return \"Gift exchange\"\n    }\n}\n\n// Example usage:\nlet celebration = ChristmasCelebration()\nprint(celebration.traditions()) // Output: Christmas traditions\nprint(celebration.activities()) // Output: Gift exchange\n```"
  },
  {
    "task": "Develop a superclass for a customer feedback system with methods for collecting and analyzing, then extend it with a product feedback subclass that overrides these methods for reviews.",
    "code": "```swift\nclass CustomerFeedback {\n    func collectFeedback() {\n        print(\"Collecting general feedback\")\n    }\n    \n    func analyzeFeedback() {\n        print(\"Analyzing general feedback\")\n    }\n}\n\nclass ProductFeedback: CustomerFeedback {\n    override func collectFeedback() {\n        print(\"Collecting product feedback\")\n    }\n    \n    override func analyzeFeedback() {\n        print(\"Analyzing product feedback\")\n    }\n}\n```"
  },
  {
    "task": "Implement a base class for a civic service with methods for public engagement and policy, then create a community service subclass that overrides these methods for local impact.",
    "code": "```swift\nclass CivicService {\n    func publicEngagement() {\n        print(\"Engaging with the public on a national level.\")\n    }\n    \n    func policy() {\n        print(\"Implementing national policies.\")\n    }\n}\n\nclass CommunityService: CivicService {\n    override func publicEngagement() {\n        print(\"Engaging with the community at a local level.\")\n    }\n    \n    override func policy() {\n        print(\"Implementing policies with local impact.\")\n    }\n}\n\n// Example usage\nlet communityService = CommunityService()\ncommunityService.publicEngagement()\ncommunityService.policy()\n```"
  },
  {
    "task": "Construct a parent class for a culinary ingredient with methods for flavor and preparation, then derive a spice ingredient class that overrides these methods for seasoning.",
    "code": "```swift\nclass CulinaryIngredient {\n    func flavor() -> String {\n        return \"Generic flavor\"\n    }\n    \n    func preparation() -> String {\n        return \"Generic preparation\"\n    }\n}\n\nclass Spice: CulinaryIngredient {\n    override func flavor() -> String {\n        return \"Spicy flavor\"\n    }\n    \n    override func preparation() -> String {\n        return \"Used for seasoning\"\n    }\n}\n\n// Example usage\nlet ingredient = CulinaryIngredient()\nprint(ingredient.flavor()) // Output: Generic flavor\nprint(ingredient.preparation()) // Output: Generic preparation\n\nlet spice = Spice()\nprint(spice.flavor()) // Output: Spicy flavor\nprint(spice.preparation()) // Output: Used for seasoning\n```"
  },
  {
    "task": "Set up a base class for a scientific experiment with methods for hypothesis and testing, and extend it with a chemistry experiment subclass that overrides these methods for reactions.",
    "code": "```swift\nclass ScientificExperiment {\n    func hypothesis() {\n        print(\"Formulating a general hypothesis for the experiment.\")\n    }\n    \n    func test() {\n        print(\"Conducting a general test for the experiment.\")\n    }\n}\n\nclass ChemistryExperiment: ScientificExperiment {\n    override func hypothesis() {\n        print(\"Formulating a hypothesis specific to a chemical reaction.\")\n    }\n    \n    override func test() {\n        print(\"Conducting a test specific to observing a chemical reaction.\")\n    }\n}\n\n// Example usage\nlet experiment = ChemistryExperiment()\nexperiment.hypothesis()\nexperiment.test()\n```"
  },
  {
    "task": "Create a foundational class for an inventory system with properties like item ID and quantity, and derive a warehouse inventory class that overrides the quantity property for bulk storage.",
    "code": "```swift\nclass InventoryItem {\n    var itemID: String\n    var quantity: Int\n    \n    init(itemID: String, quantity: Int) {\n        self.itemID = itemID\n        self.quantity = quantity\n    }\n}\n\nclass WarehouseInventory: InventoryItem {\n    override var quantity: Int {\n        didSet {\n            if quantity < 0 {\n                quantity = 0\n            }\n        }\n    }\n    \n    init(itemID: String, bulkQuantity: Int) {\n        super.init(itemID: itemID, quantity: bulkQuantity)\n    }\n}\n```"
  },
  {
    "task": "Design a base class for a travel agency with methods for itinerary and bookings, then create a luxury travel subclass that overrides these methods for premium services.",
    "code": "```swift\nclass TravelAgency {\n    func itinerary() -> String {\n        return \"Standard itinerary details.\"\n    }\n    \n    func bookings() -> String {\n        return \"Standard booking process.\"\n    }\n}\n\nclass LuxuryTravel: TravelAgency {\n    override func itinerary() -> String {\n        return \"Luxury itinerary details with premium services.\"\n    }\n    \n    override func bookings() -> String {\n        return \"Luxury booking process with exclusive offers.\"\n    }\n}\n\nlet standardTravel = TravelAgency()\nprint(standardTravel.itinerary()) // Output: Standard itinerary details.\nprint(standardTravel.bookings())  // Output: Standard booking process.\n\nlet luxuryTravel = LuxuryTravel()\nprint(luxuryTravel.itinerary())   // Output: Luxury itinerary details with premium services.\nprint(luxuryTravel.bookings())    // Output: Luxury booking process with exclusive offers.\n```"
  },
  {
    "task": "Develop a superclass for an educational tool with methods for teaching and assessment, then extend it with a math tool subclass that overrides these methods for problem-solving.",
    "code": "```swift\nclass EducationalTool {\n    func teach() {\n        print(\"Teaching general subjects.\")\n    }\n    \n    func assess() {\n        print(\"Assessing general understanding.\")\n    }\n}\n\nclass MathTool: EducationalTool {\n    override func teach() {\n        print(\"Teaching math concepts and problem-solving techniques.\")\n    }\n    \n    override func assess() {\n        print(\"Assessing math problem-solving skills.\")\n    }\n}\n\n// Usage\nlet mathTool = MathTool()\nmathTool.teach()\nmathTool.assess()\n```"
  },
  {
    "task": "Implement a base class for a community project with methods for planning and execution, then create a park renovation subclass that overrides these methods for landscaping.",
    "code": "```swift\nclass CommunityProject {\n    func plan() {\n        print(\"Planning the community project.\")\n    }\n    \n    func execute() {\n        print(\"Executing the community project.\")\n    }\n}\n\nclass ParkRenovation: CommunityProject {\n    override func plan() {\n        print(\"Planning the park renovation with landscaping details.\")\n    }\n    \n    override func execute() {\n        print(\"Executing the park renovation with landscaping implementation.\")\n    }\n}\n\n// Example usage\nlet project = ParkRenovation()\nproject.plan()\nproject.execute()\n```"
  },
  {
    "task": "Construct a parent class for a digital marketing strategy with methods for targeting and engagement, then derive a social media strategy class that overrides these methods for platforms.",
    "code": "```swift\nclass DigitalMarketingStrategy {\n    func targeting() -> String {\n        return \"Generic Targeting Strategy\"\n    }\n    \n    func engagement() -> String {\n        return \"Generic Engagement Strategy\"\n    }\n}\n\nclass SocialMediaStrategy: DigitalMarketingStrategy {\n    override func targeting() -> String {\n        return \"Social Media Targeting Strategy\"\n    }\n    \n    override func engagement() -> String {\n        return \"Social Media Engagement Strategy\"\n    }\n}\n```"
  },
  {
    "task": "Set up a base class for a scientific publication with methods for research and review, and extend it with a journal article subclass that overrides these methods for peer review.",
    "code": "```swift\nclass ScientificPublication {\n    func conductResearch() {\n        print(\"Conducting generic research.\")\n    }\n    \n    func review() {\n        print(\"Reviewing the publication.\")\n    }\n}\n\nclass JournalArticle: ScientificPublication {\n    override func conductResearch() {\n        print(\"Conducting in-depth research specific to a journal article.\")\n    }\n    \n    override func review() {\n        print(\"Performing peer review for the journal article.\")\n    }\n}\n\nlet publication = ScientificPublication()\npublication.conductResearch()\npublication.review()\n\nlet journalArticle = JournalArticle()\njournalArticle.conductResearch()\njournalArticle.review()\n```"
  },
  {
    "task": "Create a foundational class for a software module with properties like name and dependencies, and derive a user interface module class that overrides the dependencies property for UI libraries.",
    "code": "```swift\nclass SoftwareModule {\n    var name: String\n    var dependencies: [String]\n    \n    init(name: String, dependencies: [String]) {\n        self.name = name\n        self.dependencies = dependencies\n    }\n}\n\nclass UserInterfaceModule: SoftwareModule {\n    override var dependencies: [String] {\n        get {\n            return super.dependencies + [\"UIKit\", \"SwiftUI\"]\n        }\n        set {\n            super.dependencies = newValue\n        }\n    }\n    \n    init(name: String, additionalDependencies: [String]) {\n        super.init(name: name, dependencies: additionalDependencies)\n    }\n}\n```"
  },
  {
    "task": "Design a base class for a fashion line with methods for design and production, then create a summer collection subclass that overrides these methods for seasonal trends.",
    "code": "```swift\nclass FashionLine {\n    func design() {\n        print(\"Designing general fashion line.\")\n    }\n    \n    func production() {\n        print(\"Producing general fashion line.\")\n    }\n}\n\nclass SummerCollection: FashionLine {\n    override func design() {\n        print(\"Designing summer collection with seasonal trends.\")\n    }\n    \n    override func production() {\n        print(\"Producing summer collection with seasonal materials.\")\n    }\n}\n\nlet summerCollection = SummerCollection()\nsummerCollection.design()\nsummerCollection.production()\n```"
  },
  {
    "task": "Develop a superclass for a family tree with methods for ancestry and descendants, then extend it with a royal lineage subclass that overrides these methods for historical accuracy.",
    "code": "```swift\nclass FamilyTree {\n    var name: String\n    var children: [FamilyTree]\n    \n    init(name: String) {\n        self.name = name\n        self.children = []\n    }\n    \n    func addChild(_ child: FamilyTree) {\n        children.append(child)\n    }\n    \n    func ancestry() -> [String] {\n        return [name]\n    }\n    \n    func descendants() -> [String] {\n        var result = [name]\n        for child in children {\n            result.append(contentsOf: child.descendants())\n        }\n        return result\n    }\n}\n\nclass RoyalLineage: FamilyTree {\n    \n    override func ancestry() -> [String] {\n        // Custom implementation for historical accuracy\n        return [\"Royal Ancestry for \\(name)\"]\n    }\n    \n    override func descendants() -> [String] {\n        // Custom implementation for historical accuracy\n        var result = [\"Royal Descendants of \\(name)\"]\n        for child in children {\n            result.append(contentsOf: child.descendants())\n        }\n        return result\n    }\n}\n```"
  },
  {
    "task": "Implement a base class for a musical score with methods for composition and arrangement, then create a symphony subclass that overrides these methods for orchestration.",
    "code": "```swift\nclass MusicalScore {\n    func compose() {\n        print(\"Composing a musical piece\")\n    }\n    \n    func arrange() {\n        print(\"Arranging the musical score\")\n    }\n}\n\nclass Symphony: MusicalScore {\n    override func compose() {\n        print(\"Composing a symphony\")\n    }\n    \n    override func arrange() {\n        print(\"Orchestrating the symphony\")\n    }\n}\n\nlet mySymphony = Symphony()\nmySymphony.compose()\nmySymphony.arrange()\n```"
  },
  {
    "task": "Construct a parent class for a historical record with methods for events and dates, then derive a war history class that overrides these methods for battles.",
    "code": "```swift\nclass HistoricalRecord {\n    func eventDescription() -> String {\n        return \"General historical event.\"\n    }\n    \n    func eventDate() -> String {\n        return \"Unknown date.\"\n    }\n}\n\nclass WarHistory: HistoricalRecord {\n    override func eventDescription() -> String {\n        return \"Battle in a war.\"\n    }\n    \n    override func eventDate() -> String {\n        return \"Date of the battle.\"\n    }\n}\n\nlet generalEvent = HistoricalRecord()\nprint(generalEvent.eventDescription()) // General historical event.\nprint(generalEvent.eventDate()) // Unknown date.\n\nlet battleEvent = WarHistory()\nprint(battleEvent.eventDescription()) // Battle in a war.\nprint(battleEvent.eventDate()) // Date of the battle.\n```"
  },
  {
    "task": "Set up a base class for a pet adoption service with methods for application and approval, and extend it with a dog adoption subclass that overrides these methods for breed compatibility.",
    "code": "```swift\nclass PetAdoptionService {\n    func applyForAdoption() {\n        print(\"Application submitted for adoption.\")\n    }\n    \n    func approveAdoption() {\n        print(\"Adoption approved.\")\n    }\n}\n\nclass DogAdoptionService: PetAdoptionService {\n    override func applyForAdoption() {\n        print(\"Application submitted for dog adoption.\")\n    }\n    \n    override func approveAdoption() {\n        print(\"Dog adoption approved based on breed compatibility.\")\n    }\n}\n```"
  },
  {
    "task": "Create a foundational class for a financial report with properties like fiscal year and summary, and derive an annual report class that overrides the fiscal year property for yearly data.",
    "code": "```swift\nclass FinancialReport {\n    var fiscalYear: String\n    var summary: String\n    \n    init(fiscalYear: String, summary: String) {\n        self.fiscalYear = fiscalYear\n        self.summary = summary\n    }\n}\n\nclass AnnualReport: FinancialReport {\n    override var fiscalYear: String {\n        didSet {\n            // Additional logic for yearly data can be added here\n        }\n    }\n    \n    init(year: String, summary: String) {\n        super.init(fiscalYear: year, summary: summary)\n    }\n}\n```"
  },
  {
    "task": "Design a base class for a movie franchise with methods for casting and production, then create a sequel subclass that overrides these methods for continuity.",
    "code": "```swift\nclass MovieFranchise {\n    func cast() -> String {\n        return \"Casting actors for the movie.\"\n    }\n    \n    func produce() -> String {\n        return \"Producing the movie.\"\n    }\n}\n\nclass Sequel: MovieFranchise {\n    override func cast() -> String {\n        return \"Casting original actors for continuity.\"\n    }\n    \n    override func produce() -> String {\n        return \"Producing the sequel with continuity in mind.\"\n    }\n}\n\n// Example usage\nlet original = MovieFranchise()\nprint(original.cast())  // Output: Casting actors for the movie.\nprint(original.produce())  // Output: Producing the movie.\n\nlet sequel = Sequel()\nprint(sequel.cast())  // Output: Casting original actors for continuity.\nprint(sequel.produce())  // Output: Producing the sequel with continuity in mind.\n```"
  },
  {
    "task": "Develop a superclass for a real estate listing with methods for pricing and description, then extend it with a luxury listing subclass that overrides these methods for high-end features.",
    "code": "```swift\nclass RealEstateListing {\n    var price: Double\n    var description: String\n\n    init(price: Double, description: String) {\n        self.price = price\n        self.description = description\n    }\n\n    func getPricingDetails() -> String {\n        return \"The price of this listing is $\\(price).\"\n    }\n\n    func getDescription() -> String {\n        return \"Description: \\(description)\"\n    }\n}\n\nclass LuxuryListing: RealEstateListing {\n    var luxuryFeatures: [String]\n\n    init(price: Double, description: String, luxuryFeatures: [String]) {\n        self.luxuryFeatures = luxuryFeatures\n        super.init(price: price, description: description)\n    }\n\n    override func getPricingDetails() -> String {\n        return \"The price of this luxury listing is $\\(price).\"\n    }\n\n    override func getDescription() -> String {\n        let features = luxuryFeatures.joined(separator: \", \")\n        return \"Luxury Description: \\(description). Features: \\(features)\"\n    }\n}\n```"
  },
  {
    "task": "Implement a base class for a mobile app with methods for user interface and performance, then create a gaming app subclass that overrides these methods for graphics and speed.",
    "code": "```swift\nclass MobileApp {\n    func userInterface() {\n        print(\"Standard user interface\")\n    }\n    \n    func performance() {\n        print(\"Standard performance\")\n    }\n}\n\nclass GamingApp: MobileApp {\n    override func userInterface() {\n        print(\"High-quality graphics user interface\")\n    }\n    \n    override func performance() {\n        print(\"Optimized speed performance\")\n    }\n}\n```"
  },
  {
    "task": "Construct a parent class for a corporate policy with methods for compliance and enforcement, then derive an HR policy class that overrides these methods for employee relations.",
    "code": "```swift\nclass CorporatePolicy {\n    func compliance() {\n        print(\"General corporate compliance procedures.\")\n    }\n    \n    func enforcement() {\n        print(\"Enforcing general corporate policies.\")\n    }\n}\n\nclass HRPolicy: CorporatePolicy {\n    override func compliance() {\n        print(\"HR-specific compliance procedures for employee relations.\")\n    }\n    \n    override func enforcement() {\n        print(\"Enforcing HR policies related to employee relations.\")\n    }\n}\n```"
  },
  {
    "task": "Set up a base class for a scientific calculator with methods for basic operations and advanced functions, and extend it with a graphing calculator subclass that overrides these methods for plotting.",
    "code": "```swift\nimport Foundation\n\nclass ScientificCalculator {\n    func add(_ a: Double, _ b: Double) -> Double {\n        return a + b\n    }\n\n    func subtract(_ a: Double, _ b: Double) -> Double {\n        return a - b\n    }\n\n    func multiply(_ a: Double, _ b: Double) -> Double {\n        return a * b\n    }\n\n    func divide(_ a: Double, _ b: Double) -> Double {\n        return a / b\n    }\n\n    func squareRoot(_ a: Double) -> Double {\n        return sqrt(a)\n    }\n\n    func power(_ base: Double, exponent: Double) -> Double {\n        return pow(base, exponent)\n    }\n}\n\nclass GraphingCalculator: ScientificCalculator {\n    override func add(_ a: Double, _ b: Double) -> Double {\n        // Implementation for plotting\n        return super.add(a, b)\n    }\n\n    override func subtract(_ a: Double, _ b: Double) -> Double {\n        // Implementation for plotting\n        return super.subtract(a, b)\n    }\n\n    override func multiply(_ a: Double, _ b: Double) -> Double {\n        // Implementation for plotting\n        return super.multiply(a, b)\n    }\n\n    override func divide(_ a: Double, _ b: Double) -> Double {\n        // Implementation for plotting\n        return super.divide(a, b)\n    }\n\n    override func squareRoot(_ a: Double) -> Double {\n        // Implementation for plotting\n        return super.squareRoot(a)\n    }\n\n    override func power(_ base: Double, exponent: Double) -> Double {\n        // Implementation for plotting\n        return super.power(base, exponent)\n    }\n}\n```"
  },
  {
    "task": "Create a foundational class for a children's book with properties like age group and illustrations, and derive a picture book class that overrides the illustrations property to be more prominent.",
    "code": "```swift\nclass ChildrensBook {\n    var ageGroup: String\n    var illustrations: String\n    \n    init(ageGroup: String, illustrations: String) {\n        self.ageGroup = ageGroup\n        self.illustrations = illustrations\n    }\n}\n\nclass PictureBook: ChildrensBook {\n    override init(ageGroup: String, illustrations: String) {\n        super.init(ageGroup: ageGroup, illustrations: \"Prominent Illustrations\")\n    }\n}\n```"
  },
  {
    "task": "Design a base class for a cooking class with methods for ingredients and techniques, then create a baking class subclass that overrides these methods for dough preparation.",
    "code": "```swift\nclass CookingClass {\n    func ingredients() -> String {\n        return \"Generic cooking ingredients\"\n    }\n    \n    func techniques() -> String {\n        return \"Generic cooking techniques\"\n    }\n}\n\nclass BakingClass: CookingClass {\n    override func ingredients() -> String {\n        return \"Flour, water, yeast, and salt\"\n    }\n    \n    override func techniques() -> String {\n        return \"Kneading, proofing, and baking\"\n    }\n}\n```"
  },
  {
    "task": "Develop a superclass for a public transportation system with methods for routes and schedules, then extend it with a metro system subclass that overrides these methods for urban areas.",
    "code": "```swift\nclass PublicTransportationSystem {\n    func routes() -> String {\n        return \"General routes for public transportation.\"\n    }\n    \n    func schedules() -> String {\n        return \"General schedules for public transportation.\"\n    }\n}\n\nclass MetroSystem: PublicTransportationSystem {\n    override func routes() -> String {\n        return \"Urban area metro routes.\"\n    }\n    \n    override func schedules() -> String {\n        return \"Urban area metro schedules.\"\n    }\n}\n\n// Example usage\nlet metro = MetroSystem()\nprint(metro.routes()) // Outputs: Urban area metro routes.\nprint(metro.schedules()) // Outputs: Urban area metro schedules.\n```"
  },
  {
    "task": "Implement a base class for a music store inventory with methods for stock and sales, then create a vinyl record subclass that overrides these methods for collectible items.",
    "code": "```swift\nclass MusicStoreInventory {\n    var stock: Int\n    var sales: Int\n\n    init(stock: Int, sales: Int) {\n        self.stock = stock\n        self.sales = sales\n    }\n\n    func updateStock(by amount: Int) {\n        stock += amount\n    }\n\n    func recordSale() {\n        if stock > 0 {\n            stock -= 1\n            sales += 1\n        }\n    }\n}\n\nclass VinylRecord: MusicStoreInventory {\n    override func updateStock(by amount: Int) {\n        stock += amount\n        print(\"Vinyl record stock updated by \\(amount). Current stock: \\(stock)\")\n    }\n\n    override func recordSale() {\n        if stock > 0 {\n            stock -= 1\n            sales += 1\n            print(\"Vinyl record sold. Current stock: \\(stock), Total sales: \\(sales)\")\n        } else {\n            print(\"No vinyl records in stock to sell.\")\n        }\n    }\n}\n```"
  },
  {
    "task": "Construct a parent class for a legal contract with methods for terms and conditions, then derive a rental agreement class that overrides these methods for tenant rights.",
    "code": "```swift\nclass LegalContract {\n    func termsAndConditions() -> String {\n        return \"General terms and conditions of the contract.\"\n    }\n}\n\nclass RentalAgreement: LegalContract {\n    override func termsAndConditions() -> String {\n        return \"Specific terms and conditions related to tenant rights.\"\n    }\n}\n\n// Example Usage\nlet contract = LegalContract()\nprint(contract.termsAndConditions())\n\nlet rentalAgreement = RentalAgreement()\nprint(rentalAgreement.termsAndConditions())\n```"
  },
  {
    "task": "Set up a base class for a journalism piece with methods for reporting and editing, and extend it with an investigative article subclass that overrides these methods for in-depth analysis.",
    "code": "```swift\nclass JournalismPiece {\n    func report() -> String {\n        return \"Reporting general news...\"\n    }\n    \n    func edit() -> String {\n        return \"Editing the journalism piece...\"\n    }\n}\n\nclass InvestigativeArticle: JournalismPiece {\n    override func report() -> String {\n        return \"Reporting with in-depth analysis...\"\n    }\n    \n    override func edit() -> String {\n        return \"Editing with thorough fact-checking...\"\n    }\n}\n```"
  },
  {
    "task": "Create a foundational class for a wildlife reserve with properties like area and species, and derive a bird sanctuary class that overrides the species property for avians.",
    "code": "```swift\nclass WildlifeReserve {\n    var area: Double\n    var species: [String]\n    \n    init(area: Double, species: [String]) {\n        self.area = area\n        self.species = species\n    }\n}\n\nclass BirdSanctuary: WildlifeReserve {\n    override init(area: Double, species: [String] = [\"Birds\"]) {\n        super.init(area: area, species: species)\n    }\n}\n```"
  },
  {
    "task": "Design a base class for a subscription box service with methods for curation and delivery, then create a gourmet food box subclass that overrides these methods for artisanal products.",
    "code": "```swift\nclass SubscriptionBox {\n    func curateItems() {\n        print(\"Curating items for the subscription box.\")\n    }\n    \n    func deliver() {\n        print(\"Delivering the subscription box to the customer.\")\n    }\n}\n\nclass GourmetFoodBox: SubscriptionBox {\n    override func curateItems() {\n        print(\"Curating artisanal gourmet food items for the subscription box.\")\n    }\n    \n    override func deliver() {\n        print(\"Delivering the gourmet food box to the customer.\")\n    }\n}\n\n// Example usage\nlet gourmetBox = GourmetFoodBox()\ngourmetBox.curateItems()\ngourmetBox.deliver()\n```"
  },
  {
    "task": "Develop a superclass for a fitness app with methods for tracking and motivation, then extend it with a running app subclass that overrides these methods for pace and distance.",
    "code": "```swift\nclass FitnessApp {\n    func trackActivity() {\n        print(\"Tracking activity...\")\n    }\n    \n    func provideMotivation() {\n        print(\"Keep going! You're doing great!\")\n    }\n}\n\nclass RunningApp: FitnessApp {\n    override func trackActivity() {\n        print(\"Tracking running pace and distance...\")\n    }\n    \n    override func provideMotivation() {\n        print(\"Push for a faster pace and longer distance!\")\n    }\n}\n\n// Example usage\nlet runningApp = RunningApp()\nrunningApp.trackActivity()\nrunningApp.provideMotivation()\n```"
  },
  {
    "task": "Implement a base class for a digital portfolio with methods for showcasing and updating, then create an artist portfolio subclass that overrides these methods for galleries.",
    "code": "```swift\nclass DigitalPortfolio {\n    func showcase() {\n        print(\"Displaying the digital portfolio.\")\n    }\n    \n    func update() {\n        print(\"Updating the digital portfolio.\")\n    }\n}\n\nclass ArtistPortfolio: DigitalPortfolio {\n    override func showcase() {\n        print(\"Displaying the artist's gallery.\")\n    }\n    \n    override func update() {\n        print(\"Updating the artist's gallery.\")\n    }\n}\n\nlet artistPortfolio = ArtistPortfolio()\nartistPortfolio.showcase()\nartistPortfolio.update()\n```"
  },
  {
    "task": "Construct a parent class for a gaming console with methods for performance and compatibility, then derive a next-gen console class that overrides these methods for new features.",
    "code": "```swift\nclass GamingConsole {\n    func performance() -> String {\n        return \"Standard performance\"\n    }\n    \n    func compatibility() -> String {\n        return \"Compatible with older games\"\n    }\n}\n\nclass NextGenConsole: GamingConsole {\n    override func performance() -> String {\n        return \"Enhanced performance with ray tracing\"\n    }\n    \n    override func compatibility() -> String {\n        return \"Compatible with all previous generations\"\n    }\n}\n\n// Usage example\nlet console = NextGenConsole()\nprint(console.performance()) // Output: Enhanced performance with ray tracing\nprint(console.compatibility()) // Output: Compatible with all previous generations\n```"
  },
  {
    "task": "Set up a base class for a cultural festival with methods for events and participation, and extend it with a music festival subclass that overrides these methods for performances.",
    "code": "```swift\nclass CulturalFestival {\n    func events() -> String {\n        return \"General cultural events.\"\n    }\n    \n    func participation() -> String {\n        return \"Open for everyone.\"\n    }\n}\n\nclass MusicFestival: CulturalFestival {\n    override func events() -> String {\n        return \"Music performances and concerts.\"\n    }\n    \n    override func participation() -> String {\n        return \"Musicians and bands only.\"\n    }\n}\n\n// Example usage\nlet festival = CulturalFestival()\nprint(festival.events())\nprint(festival.participation())\n\nlet musicFestival = MusicFestival()\nprint(musicFestival.events())\nprint(musicFestival.participation())\n```"
  }
]