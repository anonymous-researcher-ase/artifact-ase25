[
  {
    "task": "Filter out all even numbers from a list of integers.",
    "code": "```swift\nlet numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nlet oddNumbers = numbers.filter { $0 % 2 != 0 }\n```"
  },
  {
    "task": "Select all words from a list that start with the letter 'a'.",
    "code": "```swift\nlet words = [\"apple\", \"banana\", \"avocado\", \"cherry\", \"apricot\"]\nlet wordsStartingWithA = words.filter { $0.hasPrefix(\"a\") }\nprint(wordsStartingWithA)\n```"
  },
  {
    "task": "Find all positive numbers in a collection of integers.",
    "code": "```swift\nlet numbers = [-10, 2, -3, 5, 0, 7, -1]\nlet positiveNumbers = numbers.filter { $0 > 0 }\nprint(positiveNumbers)\n```"
  },
  {
    "task": "Extract all employees who are older than 30 from an employee directory.",
    "code": "```swift\nstruct Employee {\n    let name: String\n    let age: Int\n}\n\nlet employeeDirectory = [\n    Employee(name: \"Alice\", age: 28),\n    Employee(name: \"Bob\", age: 35),\n    Employee(name: \"Charlie\", age: 32),\n    Employee(name: \"David\", age: 25)\n]\n\nlet employeesOlderThan30 = employeeDirectory.filter { $0.age > 30 }\n```"
  },
  {
    "task": "List all cities with a population greater than one million from a dataset.",
    "code": "```swift\nstruct City {\n    let name: String\n    let population: Int\n}\n\nlet cities = [\n    City(name: \"New York\", population: 8419600),\n    City(name: \"Los Angeles\", population: 3980400),\n    City(name: \"Chicago\", population: 2716000),\n    City(name: \"Houston\", population: 2328000),\n    City(name: \"Phoenix\", population: 1690000),\n    City(name: \"Philadelphia\", population: 1584200),\n    City(name: \"San Antonio\", population: 1547200),\n    City(name: \"San Diego\", population: 1423800),\n    City(name: \"Dallas\", population: 1341000),\n    City(name: \"San Jose\", population: 1027000),\n    City(name: \"Austin\", population: 995484),\n    City(name: \"Jacksonville\", population: 949611)\n]\n\nlet largeCities = cities.filter { $0.population > 1000000 }\n\nlargeCities.forEach { city in\n    print(city.name)\n}\n```"
  },
  {
    "task": "Filter out products that are out of stock from a product list.",
    "code": "```swift\nstruct Product {\n    let name: String\n    let isInStock: Bool\n}\n\nlet products = [\n    Product(name: \"Laptop\", isInStock: true),\n    Product(name: \"Smartphone\", isInStock: false),\n    Product(name: \"Tablet\", isInStock: true)\n]\n\nlet inStockProducts = products.filter { $0.isInStock }\n\nprint(inStockProducts)\n```"
  },
  {
    "task": "Select all students who have passed with a grade above 70 from a list of student scores.",
    "code": "```swift\nstruct Student {\n    let name: String\n    let grade: Int\n}\n\nlet students = [\n    Student(name: \"Alice\", grade: 85),\n    Student(name: \"Bob\", grade: 67),\n    Student(name: \"Charlie\", grade: 78),\n    Student(name: \"David\", grade: 92),\n    Student(name: \"Eve\", grade: 60)\n]\n\nlet passedStudents = students.filter { $0.grade > 70 }\n```"
  },
  {
    "task": "Identify all strings in an array that contain the substring 'cat'.",
    "code": "```swift\nlet strings = [\"catalog\", \"dog\", \"caterpillar\", \"apple\", \"catfish\"]\nlet filteredStrings = strings.filter { $0.contains(\"cat\") }\nprint(filteredStrings)\n```"
  },
  {
    "task": "Extract all transactions above $1000 from a financial record.",
    "code": "```swift\nstruct Transaction {\n    let amount: Double\n}\n\nlet transactions = [\n    Transaction(amount: 500),\n    Transaction(amount: 1500),\n    Transaction(amount: 900),\n    Transaction(amount: 1200),\n    Transaction(amount: 700)\n]\n\nlet filteredTransactions = transactions.filter { $0.amount > 1000 }\n```"
  },
  {
    "task": "Filter out all non-prime numbers from a list of numbers.",
    "code": "```swift\nfunc isPrime(_ number: Int) -> Bool {\n    if number <= 1 { return false }\n    if number <= 3 { return true }\n    if number % 2 == 0 || number % 3 == 0 { return false }\n    var i = 5\n    while i * i <= number {\n        if number % i == 0 || number % (i + 2) == 0 { return false }\n        i += 6\n    }\n    return true\n}\n\nfunc filterPrimes(from numbers: [Int]) -> [Int] {\n    return numbers.filter(isPrime)\n}\n\n// Example usage:\nlet numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nlet primes = filterPrimes(from: numbers)\nprint(primes) // Output will be [2, 3, 5, 7]\n```"
  },
  {
    "task": "Select all books with more than 300 pages from a library catalog.",
    "code": "```swift\nstruct Book {\n    let title: String\n    let pageCount: Int\n}\n\nlet libraryCatalog: [Book] = [\n    Book(title: \"Book One\", pageCount: 250),\n    Book(title: \"Book Two\", pageCount: 300),\n    Book(title: \"Book Three\", pageCount: 350),\n    Book(title: \"Book Four\", pageCount: 400)\n]\n\nlet filteredBooks = libraryCatalog.filter { $0.pageCount > 300 }\n```"
  },
  {
    "task": "Identify all users who have logged in within the past week from a user database.",
    "code": "```swift\nimport Foundation\n\nstruct User {\n    let id: Int\n    let lastLogin: Date\n}\n\nlet users: [User] = [\n    User(id: 1, lastLogin: Calendar.current.date(byAdding: .day, value: -3, to: Date())!),\n    User(id: 2, lastLogin: Calendar.current.date(byAdding: .day, value: -10, to: Date())!),\n    User(id: 3, lastLogin: Calendar.current.date(byAdding: .day, value: -5, to: Date())!)\n]\n\nlet oneWeekAgo = Calendar.current.date(byAdding: .day, value: -7, to: Date())!\n\nlet recentUsers = users.filter { $0.lastLogin >= oneWeekAgo }\n\nprint(recentUsers)\n```"
  },
  {
    "task": "Extract all URLs that contain 'https' from a list of web addresses.",
    "code": "```swift\nlet webAddresses = [\n    \"http://example.com\",\n    \"https://secure-site.com\",\n    \"https://another-secure-site.org\",\n    \"ftp://file-transfer.com\"\n]\n\nlet httpsURLs = webAddresses.filter { $0.contains(\"https\") }\n```"
  },
  {
    "task": "Find all movies released after the year 2000 from a movie database.",
    "code": "```swift\nstruct Movie {\n    let title: String\n    let releaseYear: Int\n}\n\nlet movies = [\n    Movie(title: \"Inception\", releaseYear: 2010),\n    Movie(title: \"The Matrix\", releaseYear: 1999),\n    Movie(title: \"Interstellar\", releaseYear: 2014),\n    Movie(title: \"The Godfather\", releaseYear: 1972)\n]\n\nlet filteredMovies = movies.filter { $0.releaseYear > 2000 }\n\nfilteredMovies.forEach { print($0.title) }\n```"
  },
  {
    "task": "Select all tasks with a priority level of 'high' from a task management system.",
    "code": "```swift\nstruct Task {\n    let title: String\n    let priority: String\n}\n\nlet tasks: [Task] = [\n    Task(title: \"Task 1\", priority: \"high\"),\n    Task(title: \"Task 2\", priority: \"low\"),\n    Task(title: \"Task 3\", priority: \"medium\"),\n    Task(title: \"Task 4\", priority: \"high\")\n]\n\nlet highPriorityTasks = tasks.filter { $0.priority == \"high\" }\n```"
  },
  {
    "task": "Filter out all words longer than five characters from a text document.",
    "code": "```swift\nimport Foundation\n\nfunc filterWords(in text: String) -> [String] {\n    return text.components(separatedBy: .whitespacesAndNewlines).filter { $0.count <= 5 }\n}\n\nlet text = \"\"\"\nYour text document content here.\n\"\"\"\nlet filteredWords = filterWords(in: text)\n```"
  },
  {
    "task": "Extract all odd numbers from a sequence of integers.",
    "code": "```swift\nlet numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nlet oddNumbers = numbers.filter { $0 % 2 != 0 }\n```"
  },
  {
    "task": "Select all files larger than 10MB from a list of files.",
    "code": "```swift\nstruct File {\n    let name: String\n    let sizeInMB: Double\n}\n\nlet files: [File] = [\n    File(name: \"file1.txt\", sizeInMB: 5.0),\n    File(name: \"file2.txt\", sizeInMB: 15.0),\n    File(name: \"file3.txt\", sizeInMB: 20.0),\n    File(name: \"file4.txt\", sizeInMB: 8.0)\n]\n\nlet largeFiles = files.filter { $0.sizeInMB > 10.0 }\n```"
  },
  {
    "task": "Identify all events occurring on weekends from an event schedule.",
    "code": "```swift\nimport Foundation\n\nstruct Event {\n    let name: String\n    let date: Date\n}\n\nfunc isWeekend(date: Date) -> Bool {\n    let calendar = Calendar.current\n    let components = calendar.component(.weekday, from: date)\n    return components == 1 || components == 7 // Sunday: 1, Saturday: 7\n}\n\nfunc filterWeekendEvents(events: [Event]) -> [Event] {\n    return events.filter { isWeekend(date: $0.date) }\n}\n\n// Example usage with sample events:\nlet dateFormatter = DateFormatter()\ndateFormatter.dateFormat = \"yyyy-MM-dd\"\n\nlet events = [\n    Event(name: \"Conference\", date: dateFormatter.date(from: \"2023-10-14\")!), // Saturday\n    Event(name: \"Workshop\", date: dateFormatter.date(from: \"2023-10-15\")!),   // Sunday\n    Event(name: \"Meeting\", date: dateFormatter.date(from: \"2023-10-16\")!)     // Monday\n]\n\nlet weekendEvents = filterWeekendEvents(events: events)\nprint(weekendEvents.map { $0.name }) // Output should be [\"Conference\", \"Workshop\"]\n```"
  },
  {
    "task": "Find all emails from a specific domain in an email list.",
    "code": "```swift\nlet emails = [\"user1@example.com\", \"user2@test.com\", \"contact@example.com\", \"admin@another.com\"]\nlet domain = \"example.com\"\n\nlet filteredEmails = emails.filter { $0.hasSuffix(\"@\\(domain)\") }\n```"
  },
  {
    "task": "Filter out all people not living in a specific city from a contact list.",
    "code": "```swift\nstruct Person {\n    let name: String\n    let city: String\n}\n\nfunc filterPeopleByCity(people: [Person], city: String) -> [Person] {\n    return people.filter { $0.city == city }\n}\n\n// Example usage\nlet contacts = [\n    Person(name: \"Alice\", city: \"New York\"),\n    Person(name: \"Bob\", city: \"Los Angeles\"),\n    Person(name: \"Charlie\", city: \"New York\")\n]\n\nlet filteredContacts = filterPeopleByCity(people: contacts, city: \"New York\")\nprint(filteredContacts)\n```"
  },
  {
    "task": "Select all rectangles with an area greater than 50 from a list of rectangles.",
    "code": "```swift\nstruct Rectangle {\n    let width: Double\n    let height: Double\n    \n    var area: Double {\n        return width * height\n    }\n}\n\nlet rectangles: [Rectangle] = [\n    Rectangle(width: 5, height: 11),\n    Rectangle(width: 6, height: 8),\n    Rectangle(width: 10, height: 5),\n    Rectangle(width: 4, height: 12)\n]\n\nlet largeRectangles = rectangles.filter { $0.area > 50 }\n```"
  },
  {
    "task": "Extract all elements that are not null from a collection.",
    "code": "```swift\nlet collection: [Int?] = [1, nil, 2, nil, 3, 4]\nlet filteredCollection = collection.compactMap { $0 }\n```"
  },
  {
    "task": "Identify all registered voters over the age of 18 from a voter registration list.",
    "code": "```swift\nstruct Voter {\n    let name: String\n    let age: Int\n    let isRegistered: Bool\n}\n\nlet voterList: [Voter] = [\n    Voter(name: \"Alice\", age: 25, isRegistered: true),\n    Voter(name: \"Bob\", age: 17, isRegistered: true),\n    Voter(name: \"Charlie\", age: 30, isRegistered: true),\n    Voter(name: \"David\", age: 19, isRegistered: false),\n    Voter(name: \"Eve\", age: 22, isRegistered: true)\n]\n\nlet registeredVotersOver18 = voterList.filter { $0.isRegistered && $0.age > 18 }\n```"
  },
  {
    "task": "Select all cars manufactured after 2015 from a vehicle registry.",
    "code": "```swift\nstruct Car {\n    let make: String\n    let model: String\n    let year: Int\n}\n\nlet vehicleRegistry: [Car] = [\n    Car(make: \"Toyota\", model: \"Camry\", year: 2018),\n    Car(make: \"Honda\", model: \"Civic\", year: 2014),\n    Car(make: \"Ford\", model: \"Focus\", year: 2016),\n    Car(make: \"Chevrolet\", model: \"Malibu\", year: 2012)\n]\n\nlet carsAfter2015 = vehicleRegistry.filter { $0.year > 2015 }\n```"
  },
  {
    "task": "Filter out all negative numbers from a dataset of integers.",
    "code": "```swift\nlet dataset = [3, -1, 4, -5, 9, -2, 7]\nlet positiveNumbers = dataset.filter { $0 >= 0 }\n```"
  },
  {
    "task": "Extract all characters from a string that are uppercase.",
    "code": "```swift\nlet inputString = \"HeLLo WoRLd\"\nlet uppercaseCharacters = inputString.filter { $0.isUppercase }\nprint(String(uppercaseCharacters))\n```"
  },
  {
    "task": "Identify all projects with a deadline within the next month from a project database.",
    "code": "```swift\nimport Foundation\n\nstruct Project {\n    let name: String\n    let deadline: Date\n}\n\nfunc projectsDueNextMonth(from projects: [Project]) -> [Project] {\n    let calendar = Calendar.current\n    let now = Date()\n    let oneMonthAhead = calendar.date(byAdding: .month, value: 1, to: now)!\n    \n    return projects.filter { project in\n        project.deadline > now && project.deadline <= oneMonthAhead\n    }\n}\n\n// Example usage\nlet projects = [\n    Project(name: \"Project A\", deadline: Calendar.current.date(byAdding: .day, value: 10, to: Date())!),\n    Project(name: \"Project B\", deadline: Calendar.current.date(byAdding: .day, value: 40, to: Date())!)\n]\n\nlet dueProjects = projectsDueNextMonth(from: projects)\nprint(dueProjects.map { $0.name })\n```"
  },
  {
    "task": "Select all athletes with a score higher than 90 from a competition result list.",
    "code": "```swift\nstruct Athlete {\n    let name: String\n    let score: Int\n}\n\nlet competitionResults = [\n    Athlete(name: \"John\", score: 88),\n    Athlete(name: \"Alice\", score: 95),\n    Athlete(name: \"Bob\", score: 92),\n    Athlete(name: \"Eve\", score: 85)\n]\n\nlet topAthletes = competitionResults.filter { $0.score > 90 }\n```"
  },
  {
    "task": "Filter out all strings that do not contain vowels from a list of words.",
    "code": "```swift\nlet words = [\"sky\", \"apple\", \"try\", \"orange\", \"brr\", \"grape\"]\nlet vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\nlet filteredWords = words.filter { word in\n    word.contains { vowels.contains($0) }\n}\n\nprint(filteredWords)\n```"
  },
  {
    "task": "Extract all dates that fall on a weekday from a calendar.",
    "code": "```swift\nimport Foundation\n\nlet calendar = Calendar.current\nlet formatter = DateFormatter()\nformatter.dateFormat = \"yyyy/MM/dd\"\n\nlet dateStrings = [\n    \"2023/10/01\", \"2023/10/02\", \"2023/10/03\", \"2023/10/04\",\n    \"2023/10/05\", \"2023/10/06\", \"2023/10/07\", \"2023/10/08\"\n]\n\nlet dates = dateStrings.compactMap { formatter.date(from: $0) }\n\nlet weekdays = dates.filter {\n    let weekday = calendar.component(.weekday, from: $0)\n    return weekday != 1 && weekday != 7\n}\n\nlet weekdayStrings = weekdays.map { formatter.string(from: $0) }\nprint(weekdayStrings)\n```"
  },
  {
    "task": "Find all software versions that are stable releases from a list of software versions.",
    "code": "```swift\nlet versions = [\"1.0.0\", \"1.0.1-beta\", \"2.0.0\", \"3.0.0-alpha\", \"3.1.0\"]\nlet stableVersions = versions.filter { !$0.contains(\"alpha\") && !$0.contains(\"beta\") && !$0.contains(\"rc\") }\nprint(stableVersions)\n```"
  },
  {
    "task": "Select all temperatures above freezing from a weather report.",
    "code": "```swift\nlet temperatures = [32, 45, 28, 50, 31, 40]\nlet aboveFreezing = temperatures.filter { $0 > 32 }\n```"
  },
  {
    "task": "Identify all countries with a GDP per capita above $40,000 from a country dataset.",
    "code": "```swift\nstruct Country {\n    let name: String\n    let gdpPerCapita: Double\n}\n\nlet countries = [\n    Country(name: \"Country A\", gdpPerCapita: 35000),\n    Country(name: \"Country B\", gdpPerCapita: 42000),\n    Country(name: \"Country C\", gdpPerCapita: 50000),\n    Country(name: \"Country D\", gdpPerCapita: 39000)\n]\n\nlet highGdpCountries = countries.filter { $0.gdpPerCapita > 40000 }\n```"
  },
  {
    "task": "Filter out all names shorter than four letters from a roster.",
    "code": "```swift\nlet roster = [\"John\", \"Amy\", \"Alex\", \"Tim\", \"Eve\", \"Zoe\"]\nlet filteredRoster = roster.filter { $0.count >= 4 }\nprint(filteredRoster)\n```"
  },
  {
    "task": "Extract all numbers divisible by five from a sequence.",
    "code": "```swift\nlet numbers = [1, 5, 10, 14, 20, 22, 25, 30]\nlet divisibleByFive = numbers.filter { $0 % 5 == 0 }\nprint(divisibleByFive)\n```"
  },
  {
    "task": "Select all movies with a rating above 4 stars from a film review site.",
    "code": "```swift\nstruct Movie {\n    let title: String\n    let rating: Double\n}\n\nlet movies = [\n    Movie(title: \"Inception\", rating: 4.5),\n    Movie(title: \"The Room\", rating: 3.2),\n    Movie(title: \"Interstellar\", rating: 4.7),\n    Movie(title: \"Cats\", rating: 2.0)\n]\n\nlet highRatedMovies = movies.filter { $0.rating > 4.0 }\n```"
  },
  {
    "task": "Find all jobs with a salary above $50,000 from a job listing.",
    "code": "```swift\nstruct Job {\n    let title: String\n    let salary: Double\n}\n\nlet jobs = [\n    Job(title: \"Software Engineer\", salary: 75000),\n    Job(title: \"Data Analyst\", salary: 48000),\n    Job(title: \"Project Manager\", salary: 65000),\n    Job(title: \"Graphic Designer\", salary: 45000)\n]\n\nlet highPayingJobs = jobs.filter { $0.salary > 50000 }\n```"
  },
  {
    "task": "Filter out all entries without an email address from a contact form submission list.",
    "code": "```swift\nstruct ContactFormSubmission {\n    let name: String\n    let email: String?\n}\n\nlet submissions: [ContactFormSubmission] = [\n    ContactFormSubmission(name: \"Alice\", email: \"alice@example.com\"),\n    ContactFormSubmission(name: \"Bob\", email: nil),\n    ContactFormSubmission(name: \"Charlie\", email: \"charlie@example.com\"),\n    ContactFormSubmission(name: \"David\", email: nil)\n]\n\nlet filteredSubmissions = submissions.filter { $0.email != nil }\n```"
  },
  {
    "task": "Identify all animals weighing more than 50kg from a zoo inventory.",
    "code": "```swift\nstruct Animal {\n    let name: String\n    let weight: Double\n}\n\nlet zooInventory = [\n    Animal(name: \"Elephant\", weight: 5000),\n    Animal(name: \"Giraffe\", weight: 1200),\n    Animal(name: \"Lion\", weight: 190),\n    Animal(name: \"Monkey\", weight: 40),\n    Animal(name: \"Panda\", weight: 100),\n    Animal(name: \"Kangaroo\", weight: 85)\n]\n\nlet heavyAnimals = zooInventory.filter { $0.weight > 50 }\n```"
  },
  {
    "task": "Select all songs with a duration longer than three minutes from a playlist.",
    "code": "```swift\nstruct Song {\n    let title: String\n    let durationInMinutes: Double\n}\n\nlet playlist: [Song] = [\n    Song(title: \"Song A\", durationInMinutes: 2.5),\n    Song(title: \"Song B\", durationInMinutes: 3.2),\n    Song(title: \"Song C\", durationInMinutes: 4.0),\n    Song(title: \"Song D\", durationInMinutes: 3.0)\n]\n\nlet longSongs = playlist.filter { $0.durationInMinutes > 3.0 }\n```"
  },
  {
    "task": "Extract all accounts with a balance below zero from a bank statement.",
    "code": "```swift\nstruct Account {\n    let id: Int\n    let balance: Double\n}\n\nlet bankStatement: [Account] = [\n    Account(id: 1, balance: 500.0),\n    Account(id: 2, balance: -150.0),\n    Account(id: 3, balance: 0.0),\n    Account(id: 4, balance: -75.0)\n]\n\nlet accountsWithNegativeBalance = bankStatement.filter { $0.balance < 0 }\n```"
  },
  {
    "task": "Filter out all non-alphabetic characters from a string of text.",
    "code": "```swift\nlet text = \"Example! 123 Text with #symbols & numbers.\"\nlet filteredText = text.filter { $0.isLetter }\nprint(filteredText)\n```"
  },
  {
    "task": "Select all participants who scored above average in a competition.",
    "code": "```swift\nlet participants = [(\"Alice\", 85), (\"Bob\", 90), (\"Charlie\", 78), (\"Dave\", 92), (\"Eve\", 88)]\n\nlet scores = participants.map { $0.1 }\nlet averageScore = scores.reduce(0, +) / scores.count\n\nlet aboveAverageParticipants = participants.filter { $0.1 > averageScore }\n```"
  },
  {
    "task": "Find all houses priced under $300,000 from a real estate database.",
    "code": "```swift\nstruct House {\n    let price: Double\n}\n\nlet realEstateDatabase: [House] = [\n    House(price: 250000),\n    House(price: 350000),\n    House(price: 200000),\n    House(price: 450000),\n    House(price: 275000)\n]\n\nlet affordableHouses = realEstateDatabase.filter { $0.price < 300000 }\n```"
  },
  {
    "task": "Identify all plants that bloom in spring from a botanical catalog.",
    "code": "```swift\nstruct Plant {\n    let name: String\n    let bloomsInSpring: Bool\n}\n\nlet botanicalCatalog = [\n    Plant(name: \"Tulip\", bloomsInSpring: true),\n    Plant(name: \"Rose\", bloomsInSpring: false),\n    Plant(name: \"Daffodil\", bloomsInSpring: true),\n    Plant(name: \"Sunflower\", bloomsInSpring: false)\n]\n\nlet springBloomingPlants = botanicalCatalog.filter { $0.bloomsInSpring }\n```"
  },
  {
    "task": "Extract all passwords that are longer than eight characters from a user database.",
    "code": "```swift\nlet passwords = [\"short\", \"muchlongerpassword\", \"eightchr\", \"longenoughpassword123\", \"tiny\"]\nlet longPasswords = passwords.filter { $0.count > 8 }\n```"
  },
  {
    "task": "Filter out all projects that are not yet started from a project management tool.",
    "code": "```swift\nstruct Project {\n    let name: String\n    let status: String\n}\n\nlet projects = [\n    Project(name: \"Project A\", status: \"Not Started\"),\n    Project(name: \"Project B\", status: \"In Progress\"),\n    Project(name: \"Project C\", status: \"Completed\"),\n    Project(name: \"Project D\", status: \"Not Started\")\n]\n\nlet filteredProjects = projects.filter { $0.status != \"Not Started\" }\n```"
  },
  {
    "task": "Select all days with temperatures exceeding 25\u00b0C from a climate report.",
    "code": "```swift\nlet climateReport = [\n    (\"Monday\", 20),\n    (\"Tuesday\", 28),\n    (\"Wednesday\", 23),\n    (\"Thursday\", 30),\n    (\"Friday\", 18),\n    (\"Saturday\", 27),\n    (\"Sunday\", 22)\n]\n\nlet hotDays = climateReport.filter { $0.1 > 25 }.map { $0.0 }\n```"
  },
  {
    "task": "Find all recipes that are vegetarian from a cookbook.",
    "code": "```swift\nstruct Recipe {\n    let name: String\n    let isVegetarian: Bool\n}\n\nlet cookbook = [\n    Recipe(name: \"Spaghetti Bolognese\", isVegetarian: false),\n    Recipe(name: \"Vegetable Stir Fry\", isVegetarian: true),\n    Recipe(name: \"Chicken Curry\", isVegetarian: false),\n    Recipe(name: \"Caprese Salad\", isVegetarian: true)\n]\n\nlet vegetarianRecipes = cookbook.filter { $0.isVegetarian }\n```"
  },
  {
    "task": "Identify all articles that mention a specific keyword from a news feed.",
    "code": "```swift\nstruct Article {\n    let title: String\n    let content: String\n}\n\nfunc filterArticlesByKeyword(articles: [Article], keyword: String) -> [Article] {\n    return articles.filter { article in\n        article.title.contains(keyword) || article.content.contains(keyword)\n    }\n}\n\n// Example usage:\nlet articles = [\n    Article(title: \"Swift Programming\", content: \"Swift is a powerful programming language...\"),\n    Article(title: \"Sports Update\", content: \"Today's match was exciting...\"),\n    Article(title: \"Tech News\", content: \"The new iPhone was announced...\")\n]\n\nlet keyword = \"Swift\"\nlet filteredArticles = filterArticlesByKeyword(articles: articles, keyword: keyword)\n```"
  },
  {
    "task": "Extract all files with the '.jpg' extension from a directory.",
    "code": "```swift\nimport Foundation\n\nlet fileManager = FileManager.default\nlet directoryURL = URL(fileURLWithPath: \"/path/to/directory\")\n\ndo {\n    let fileURLs = try fileManager.contentsOfDirectory(at: directoryURL, includingPropertiesForKeys: nil)\n    let jpgFiles = fileURLs.filter { $0.pathExtension.lowercased() == \"jpg\" }\n    print(jpgFiles)\n} catch {\n    print(\"Error reading directory: \\(error)\")\n}\n```"
  },
  {
    "task": "Filter out all transactions that are not categorized from a financial statement.",
    "code": "```swift\nstruct Transaction {\n    let amount: Double\n    let category: String?\n}\n\nlet transactions = [\n    Transaction(amount: 100.0, category: \"Groceries\"),\n    Transaction(amount: 200.0, category: nil),\n    Transaction(amount: 50.0, category: \"Entertainment\"),\n    Transaction(amount: 150.0, category: nil)\n]\n\nlet categorizedTransactions = transactions.filter { $0.category != nil }\n```"
  },
  {
    "task": "Select all paintings created before 1900 from an art gallery collection.",
    "code": "```swift\nstruct Painting {\n    let title: String\n    let year: Int\n}\n\nlet gallery = [\n    Painting(title: \"Starry Night\", year: 1889),\n    Painting(title: \"The Persistence of Memory\", year: 1931),\n    Painting(title: \"The Scream\", year: 1893),\n    Painting(title: \"Guernica\", year: 1937)\n]\n\nlet paintingsBefore1900 = gallery.filter { $0.year < 1900 }\n```"
  },
  {
    "task": "Find all students with perfect attendance from a school record.",
    "code": "```swift\nstruct Student {\n    let name: String\n    let attendance: Int\n}\n\nlet students = [\n    Student(name: \"Alice\", attendance: 100),\n    Student(name: \"Bob\", attendance: 95),\n    Student(name: \"Charlie\", attendance: 100)\n]\n\nlet perfectAttendanceStudents = students.filter { $0.attendance == 100 }\n```"
  },
  {
    "task": "Identify all messages sent by a specific user from a chat application.",
    "code": "```swift\nstruct Message {\n    let user: String\n    let content: String\n}\n\nfunc filterMessagesByUser(messages: [Message], user: String) -> [Message] {\n    return messages.filter { $0.user == user }\n}\n\n// Example usage:\nlet messages = [\n    Message(user: \"Alice\", content: \"Hello!\"),\n    Message(user: \"Bob\", content: \"Hi!\"),\n    Message(user: \"Alice\", content: \"How are you?\")\n]\n\nlet filteredMessages = filterMessagesByUser(messages: messages, user: \"Alice\")\nprint(filteredMessages)\n```"
  },
  {
    "task": "Extract all elements greater than 100 from an array of numbers.",
    "code": "```swift\nlet numbers = [23, 150, 95, 200, 78, 130, 40]\nlet filteredNumbers = numbers.filter { $0 > 100 }\n```"
  },
  {
    "task": "Filter out all words that do not end in 'ed' from a paragraph.",
    "code": "```swift\nlet paragraph = \"The quick brown fox jumped over the lazy dog. The dog barked and wagged its tail excitedly.\"\nlet words = paragraph.split(separator: \" \")\nlet filteredWords = words.filter { $0.hasSuffix(\"ed\") }\nprint(filteredWords)\n```"
  },
  {
    "task": "Select all flights departing before noon from a flight schedule.",
    "code": "```swift\nstruct Flight {\n    let departureTime: Date\n    let destination: String\n}\n\nfunc flightsBeforeNoon(from schedule: [Flight]) -> [Flight] {\n    let calendar = Calendar.current\n    return schedule.filter { flight in\n        let hour = calendar.component(.hour, from: flight.departureTime)\n        return hour < 12\n    }\n}\n```"
  },
  {
    "task": "Find all products priced above $20 from an online store inventory.",
    "code": "```swift\nstruct Product {\n    let name: String\n    let price: Double\n}\n\nlet inventory = [\n    Product(name: \"Book\", price: 15.0),\n    Product(name: \"Headphones\", price: 45.0),\n    Product(name: \"Coffee Mug\", price: 12.0),\n    Product(name: \"Laptop\", price: 999.0),\n    Product(name: \"Notebook\", price: 5.0)\n]\n\nlet productsAbove20 = inventory.filter { $0.price > 20.0 }\n```"
  },
  {
    "task": "Identify all sessions longer than one hour from a webinar series.",
    "code": "```swift\nstruct Session {\n    let title: String\n    let durationInMinutes: Int\n}\n\nlet sessions = [\n    Session(title: \"Introduction to Swift\", durationInMinutes: 45),\n    Session(title: \"Advanced Swift Features\", durationInMinutes: 75),\n    Session(title: \"SwiftUI Basics\", durationInMinutes: 60),\n    Session(title: \"Concurrency in Swift\", durationInMinutes: 95)\n]\n\nlet longSessions = sessions.filter { $0.durationInMinutes > 60 }\n```"
  },
  {
    "task": "Extract all images with a resolution higher than 1080p from a photo library.",
    "code": "```swift\nstruct Image {\n    let width: Int\n    let height: Int\n}\n\nlet photoLibrary: [Image] = [\n    Image(width: 1920, height: 1080),\n    Image(width: 2560, height: 1440),\n    Image(width: 1280, height: 720),\n    Image(width: 3840, height: 2160)\n]\n\nlet highResolutionImages = photoLibrary.filter { $0.width > 1920 || $0.height > 1080 }\n```"
  },
  {
    "task": "Filter out all responses that are not 'yes' or 'no' from a survey result.",
    "code": "```swift\nlet surveyResponses = [\"yes\", \"no\", \"maybe\", \"yes\", \"no\", \"unsure\"]\nlet filteredResponses = surveyResponses.filter { $0 == \"yes\" || $0 == \"no\" }\n```"
  },
  {
    "task": "Select all tweets with more than 100 likes from a Twitter feed.",
    "code": "```swift\nstruct Tweet {\n    let text: String\n    let likes: Int\n}\n\nlet twitterFeed: [Tweet] = [\n    Tweet(text: \"Hello, world!\", likes: 50),\n    Tweet(text: \"Swift is amazing!\", likes: 150),\n    Tweet(text: \"Just another tweet\", likes: 200)\n]\n\nlet popularTweets = twitterFeed.filter { $0.likes > 100 }\n```"
  },
  {
    "task": "Find all links that are broken from a webpage.",
    "code": "```swift\nimport Foundation\n\nfunc fetchHTML(from urlString: String, completion: @escaping (String?) -> Void) {\n    guard let url = URL(string: urlString) else {\n        completion(nil)\n        return\n    }\n    let task = URLSession.shared.dataTask(with: url) { data, _, error in\n        if let error = error {\n            print(\"Error fetching HTML: \\(error)\")\n            completion(nil)\n            return\n        }\n        if let data = data, let html = String(data: data, encoding: .utf8) {\n            completion(html)\n        } else {\n            completion(nil)\n        }\n    }\n    task.resume()\n}\n\nfunc extractLinks(from html: String) -> [String] {\n    let regexPattern = \"<a\\\\s+(?:[^>]*?\\\\s+)?href=([\\\"'])(.*?)\\\\1\"\n    guard let regex = try? NSRegularExpression(pattern: regexPattern, options: .caseInsensitive) else {\n        return []\n    }\n    let nsString = html as NSString\n    let matches = regex.matches(in: html, options: [], range: NSRange(location: 0, length: nsString.length))\n    return matches.compactMap {\n        guard let range = Range($0.range(at: 2), in: html) else {\n            return nil\n        }\n        return String(html[range])\n    }\n}\n\nfunc checkLink(_ urlString: String, completion: @escaping (Bool) -> Void) {\n    guard let url = URL(string: urlString) else {\n        completion(false)\n        return\n    }\n    var request = URLRequest(url: url)\n    request.httpMethod = \"HEAD\"\n    let task = URLSession.shared.dataTask(with: request) { _, response, error in\n        if let error = error {\n            print(\"Error checking link: \\(error)\")\n            completion(false)\n            return\n        }\n        if let httpResponse = response as? HTTPURLResponse {\n            completion(!(200...299).contains(httpResponse.statusCode))\n        } else {\n            completion(false)\n        }\n    }\n    task.resume()\n}\n\nfunc findBrokenLinks(on webpage: String, completion: @escaping ([String]) -> Void) {\n    fetchHTML(from: webpage) { html in\n        guard let html = html else {\n            completion([])\n            return\n        }\n        let links = extractLinks(from: html)\n        let dispatchGroup = DispatchGroup()\n        var brokenLinks = [String]()\n        \n        links.forEach { link in\n            dispatchGroup.enter()\n            checkLink(link) { isBroken in\n                if isBroken {\n                    brokenLinks.append(link)\n                }\n                dispatchGroup.leave()\n            }\n        }\n        \n        dispatchGroup.notify(queue: .main) {\n            completion(brokenLinks)\n        }\n    }\n}\n\n// Example usage:\n// findBrokenLinks(on: \"https://example.com\") { brokenLinks in\n//     print(\"Broken Links: \\(brokenLinks)\")\n// }\n```"
  },
  {
    "task": "Identify all machines that are currently offline from a network monitoring tool.",
    "code": "```swift\nstruct Machine {\n    let name: String\n    let isOnline: Bool\n}\n\nlet machines = [\n    Machine(name: \"Machine1\", isOnline: true),\n    Machine(name: \"Machine2\", isOnline: false),\n    Machine(name: \"Machine3\", isOnline: true),\n    Machine(name: \"Machine4\", isOnline: false)\n]\n\nlet offlineMachines = machines.filter { !$0.isOnline }\n```"
  },
  {
    "task": "Extract all invoices with a due date in the current month from an accounting system.",
    "code": "```swift\nimport Foundation\n\nstruct Invoice {\n    let id: Int\n    let dueDate: Date\n}\n\nfunc invoicesDueThisMonth(from invoices: [Invoice]) -> [Invoice] {\n    let calendar = Calendar.current\n    let currentDate = Date()\n    let currentMonth = calendar.component(.month, from: currentDate)\n    let currentYear = calendar.component(.year, from: currentDate)\n\n    return invoices.filter { invoice in\n        let invoiceMonth = calendar.component(.month, from: invoice.dueDate)\n        let invoiceYear = calendar.component(.year, from: invoice.dueDate)\n        return invoiceMonth == currentMonth && invoiceYear == currentYear\n    }\n}\n```"
  },
  {
    "task": "Filter out all lines in a file that start with a '#' from a configuration file.",
    "code": "```swift\nimport Foundation\n\nfunc filterComments(from filePath: String) throws -> [String] {\n    let contents = try String(contentsOfFile: filePath, encoding: .utf8)\n    return contents.split(separator: \"\\n\").filter { !$0.trimmingCharacters(in: .whitespaces).hasPrefix(\"#\") }.map { String($0) }\n}\n\n// Example usage:\n// let filteredLines = try filterComments(from: \"path/to/config/file\")\n```"
  },
  {
    "task": "Select all posts with a comment count higher than 50 from a blog.",
    "code": "```swift\nstruct Post {\n    let title: String\n    let commentCount: Int\n}\n\nlet posts: [Post] = [\n    Post(title: \"Post 1\", commentCount: 30),\n    Post(title: \"Post 2\", commentCount: 70),\n    Post(title: \"Post 3\", commentCount: 51),\n    Post(title: \"Post 4\", commentCount: 20)\n]\n\nlet filteredPosts = posts.filter { $0.commentCount > 50 }\n```"
  },
  {
    "task": "Find all offers that expire within the next week from a promotional database.",
    "code": "```swift\nimport Foundation\n\nstruct Offer {\n    let id: Int\n    let expirationDate: Date\n}\n\nfunc offersExpiringWithinNextWeek(from offers: [Offer]) -> [Offer] {\n    let calendar = Calendar.current\n    let now = Date()\n    guard let nextWeek = calendar.date(byAdding: .weekOfYear, value: 1, to: now) else { return [] }\n    \n    return offers.filter { offer in\n        offer.expirationDate > now && offer.expirationDate <= nextWeek\n    }\n}\n\n// Example usage (you would replace this with actual data):\nlet offers = [\n    Offer(id: 1, expirationDate: Calendar.current.date(byAdding: .day, value: 3, to: Date())!),\n    Offer(id: 2, expirationDate: Calendar.current.date(byAdding: .day, value: 10, to: Date())!),\n    Offer(id: 3, expirationDate: Calendar.current.date(byAdding: .day, value: 5, to: Date())!)\n]\n\nlet expiringOffers = offersExpiringWithinNextWeek(from: offers)\n```"
  },
  {
    "task": "Identify all items that are on sale from a shopping catalog.",
    "code": "```swift\nstruct Item {\n    let name: String\n    let price: Double\n    let onSale: Bool\n}\n\nlet catalog = [\n    Item(name: \"Laptop\", price: 999.99, onSale: false),\n    Item(name: \"Headphones\", price: 199.99, onSale: true),\n    Item(name: \"Smartphone\", price: 699.99, onSale: true),\n    Item(name: \"Tablet\", price: 299.99, onSale: false)\n]\n\nlet itemsOnSale = catalog.filter { $0.onSale }\n```"
  },
  {
    "task": "Extract all notes that mention 'urgent' from a meeting record.",
    "code": "```swift\nlet meetingNotes = [\n    \"Discuss project timeline\",\n    \"urgent: finalize budget proposal\",\n    \"Review team performance\",\n    \"urgent: prepare presentation slides\",\n    \"Plan team building activity\"\n]\n\nlet urgentNotes = meetingNotes.filter { $0.contains(\"urgent\") }\n```"
  },
  {
    "task": "Filter out all numbers that do not have a remainder when divided by two from a list.",
    "code": "```swift\nlet numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nlet oddNumbers = numbers.filter { $0 % 2 != 0 }\n```"
  },
  {
    "task": "Select all concerts happening in the summer from an event calendar.",
    "code": "```swift\nstruct Concert {\n    let name: String\n    let date: Date\n}\n\nfunc isSummerConcert(date: Date) -> Bool {\n    let calendar = Calendar.current\n    let month = calendar.component(.month, from: date)\n    return month >= 6 && month <= 8\n}\n\nfunc filterSummerConcerts(from concerts: [Concert]) -> [Concert] {\n    return concerts.filter { isSummerConcert(date: $0.date) }\n}\n\n// Example usage\nlet concerts = [\n    Concert(name: \"Concert A\", date: DateComponents(calendar: .current, year: 2023, month: 6, day: 15).date!),\n    Concert(name: \"Concert B\", date: DateComponents(calendar: .current, year: 2023, month: 9, day: 10).date!),\n    Concert(name: \"Concert C\", date: DateComponents(calendar: .current, year: 2023, month: 7, day: 20).date!)\n]\n\nlet summerConcerts = filterSummerConcerts(from: concerts)\n```"
  },
  {
    "task": "Find all users with more than 1000 followers from a social media platform.",
    "code": "```swift\nstruct User {\n    let username: String\n    let followersCount: Int\n}\n\nlet users: [User] = [\n    User(username: \"user1\", followersCount: 500),\n    User(username: \"user2\", followersCount: 1500),\n    User(username: \"user3\", followersCount: 3000),\n    User(username: \"user4\", followersCount: 800)\n]\n\nlet usersWithMoreThan1000Followers = users.filter { $0.followersCount > 1000 }\n```"
  },
  {
    "task": "Identify all stocks with a growth rate above 10% from a financial portfolio.",
    "code": "```swift\nstruct Stock {\n    let name: String\n    let growthRate: Double\n}\n\nlet portfolio = [\n    Stock(name: \"AAPL\", growthRate: 12.5),\n    Stock(name: \"GOOGL\", growthRate: 9.8),\n    Stock(name: \"AMZN\", growthRate: 15.3),\n    Stock(name: \"MSFT\", growthRate: 8.7),\n    Stock(name: \"TSLA\", growthRate: 20.1)\n]\n\nlet highGrowthStocks = portfolio.filter { $0.growthRate > 10.0 }\n```"
  },
  {
    "task": "Extract all reviews that have a five-star rating from a product review site.",
    "code": "```swift\nstruct Review {\n    let rating: Int\n    let content: String\n}\n\nlet reviews = [\n    Review(rating: 5, content: \"Excellent product!\"),\n    Review(rating: 4, content: \"Good, but could be better.\"),\n    Review(rating: 5, content: \"Absolutely loved it!\"),\n    Review(rating: 3, content: \"It's okay, not great.\"),\n    Review(rating: 5, content: \"Perfect in every way!\")\n]\n\nlet fiveStarReviews = reviews.filter { $0.rating == 5 }\n```"
  },
  {
    "task": "Filter out all emails that are not flagged from an inbox.",
    "code": "```swift\nstruct Email {\n    let subject: String\n    let isFlagged: Bool\n}\n\nlet inbox: [Email] = [\n    Email(subject: \"Hello\", isFlagged: false),\n    Email(subject: \"Urgent\", isFlagged: true),\n    Email(subject: \"Meeting\", isFlagged: false),\n    Email(subject: \"Follow up\", isFlagged: true)\n]\n\nlet flaggedEmails = inbox.filter { $0.isFlagged }\n```"
  },
  {
    "task": "Select all entries with a timestamp from the past 24 hours from a log file.",
    "code": "```swift\nimport Foundation\n\nstruct LogEntry {\n    let timestamp: Date\n    let message: String\n}\n\nfunc filterRecentEntries(logEntries: [LogEntry]) -> [LogEntry] {\n    let oneDayAgo = Date().addingTimeInterval(-24 * 60 * 60)\n    return logEntries.filter { $0.timestamp >= oneDayAgo }\n}\n```"
  },
  {
    "task": "Find all books by a specific author from a library database.",
    "code": "```swift\nstruct Book {\n    let title: String\n    let author: String\n}\n\nfunc booksByAuthor(from books: [Book], author: String) -> [Book] {\n    return books.filter { $0.author == author }\n}\n\n// Example usage\nlet library = [\n    Book(title: \"1984\", author: \"George Orwell\"),\n    Book(title: \"Animal Farm\", author: \"George Orwell\"),\n    Book(title: \"To Kill a Mockingbird\", author: \"Harper Lee\")\n]\n\nlet orwellBooks = booksByAuthor(from: library, author: \"George Orwell\")\n```"
  },
  {
    "task": "Identify all donations above $500 from a charity fundraiser report.",
    "code": "```swift\nlet donations = [250, 600, 150, 800, 400, 550]\nlet filteredDonations = donations.filter { $0 > 500 }\n```"
  },
  {
    "task": "Extract all assignments due in the next week from a course syllabus.",
    "code": "```swift\nimport Foundation\n\nstruct Assignment {\n    let title: String\n    let dueDate: Date\n}\n\nfunc assignmentsDueNextWeek(from syllabus: [Assignment]) -> [Assignment] {\n    let calendar = Calendar.current\n    let now = Date()\n    guard let nextWeek = calendar.date(byAdding: .weekOfYear, value: 1, to: now) else {\n        return []\n    }\n    return syllabus.filter { assignment in\n        assignment.dueDate >= now && assignment.dueDate < nextWeek\n    }\n}\n\n// Example usage\nlet dateFormatter = DateFormatter()\ndateFormatter.dateFormat = \"yyyy/MM/dd\"\n\nlet syllabus = [\n    Assignment(title: \"Assignment 1\", dueDate: dateFormatter.date(from: \"2023/10/20\")!),\n    Assignment(title: \"Assignment 2\", dueDate: dateFormatter.date(from: \"2023/10/25\")!),\n    Assignment(title: \"Assignment 3\", dueDate: dateFormatter.date(from: \"2023/11/01\")!)\n]\n\nlet dueNextWeek = assignmentsDueNextWeek(from: syllabus)\nprint(dueNextWeek.map { $0.title })\n```"
  },
  {
    "task": "Filter out all movies that are not in English from a streaming service.",
    "code": "```swift\nstruct Movie {\n    let title: String\n    let language: String\n}\n\nlet movies = [\n    Movie(title: \"Inception\", language: \"English\"),\n    Movie(title: \"Am\u00e9lie\", language: \"French\"),\n    Movie(title: \"Parasite\", language: \"Korean\"),\n    Movie(title: \"The Dark Knight\", language: \"English\")\n]\n\nlet englishMovies = movies.filter { $0.language == \"English\" }\n```"
  },
  {
    "task": "Select all landmarks located in Europe from a travel guide.",
    "code": "```swift\nstruct Landmark {\n    let name: String\n    let location: String\n}\n\nlet landmarks = [\n    Landmark(name: \"Eiffel Tower\", location: \"Europe\"),\n    Landmark(name: \"Statue of Liberty\", location: \"North America\"),\n    Landmark(name: \"Colosseum\", location: \"Europe\"),\n    Landmark(name: \"Great Wall of China\", location: \"Asia\")\n]\n\nlet europeanLandmarks = landmarks.filter { $0.location == \"Europe\" }\n```"
  },
  {
    "task": "Find all contracts that are set to renew next month from a contract management system.",
    "code": "```swift\nimport Foundation\n\nstruct Contract {\n    let renewalDate: Date\n}\n\nfunc contractsRenewingNextMonth(from contracts: [Contract]) -> [Contract] {\n    let calendar = Calendar.current\n    let nextMonth = calendar.date(byAdding: .month, value: 1, to: Date())!\n    return contracts.filter { contract in\n        calendar.isDate(contract.renewalDate, equalTo: nextMonth, toGranularity: .month)\n    }\n}\n\n// Example usage:\n// let contracts: [Contract] = ...\n// let renewingContracts = contractsRenewingNextMonth(from: contracts)\n```"
  },
  {
    "task": "Identify all volunteer hours logged in the past year from a non-profit organization database.",
    "code": "```swift\nimport Foundation\n\nstruct VolunteerLog {\n    let date: Date\n    let hours: Int\n}\n\nfunc filterLogsForPastYear(logs: [VolunteerLog]) -> [VolunteerLog] {\n    let calendar = Calendar.current\n    let oneYearAgo = calendar.date(byAdding: .year, value: -1, to: Date())!\n    \n    return logs.filter { $0.date >= oneYearAgo }\n}\n\n// Example usage:\nlet volunteerLogs = [\n    VolunteerLog(date: Calendar.current.date(byAdding: .month, value: -5, to: Date())!, hours: 5),\n    VolunteerLog(date: Calendar.current.date(byAdding: .year, value: -2, to: Date())!, hours: 3),\n    VolunteerLog(date: Date(), hours: 4)\n]\n\nlet recentLogs = filterLogsForPastYear(logs: volunteerLogs)\n```"
  },
  {
    "task": "Extract all elements that are not strings from a mixed-type list.",
    "code": "```swift\nlet mixedList: [Any] = [1, \"two\", 3.0, \"four\", 5, \"six\", true]\nlet nonStrings = mixedList.filter { !($0 is String) }\nprint(nonStrings)\n```"
  },
  {
    "task": "Filter out all orders that are not yet shipped from an e-commerce system.",
    "code": "```swift\nstruct Order {\n    let id: Int\n    let status: String\n}\n\nlet orders = [\n    Order(id: 1, status: \"shipped\"),\n    Order(id: 2, status: \"pending\"),\n    Order(id: 3, status: \"shipped\"),\n    Order(id: 4, status: \"processing\")\n]\n\nlet shippedOrders = orders.filter { $0.status == \"shipped\" }\n```"
  },
  {
    "task": "Select all emails sent from a specific address in an email server.",
    "code": "```swift\nstruct Email {\n    let sender: String\n    let subject: String\n    let body: String\n}\n\nfunc filterEmails(from sender: String, in emails: [Email]) -> [Email] {\n    return emails.filter { $0.sender == sender }\n}\n\n// Example usage:\nlet emails = [\n    Email(sender: \"example1@example.com\", subject: \"Hello\", body: \"How are you?\"),\n    Email(sender: \"specific@example.com\", subject: \"Meeting\", body: \"Let's meet at 5.\"),\n    Email(sender: \"example2@example.com\", subject: \"Greetings\", body: \"Good morning!\"),\n    Email(sender: \"specific@example.com\", subject: \"Follow-up\", body: \"Did you get my email?\")\n]\n\nlet filteredEmails = filterEmails(from: \"specific@example.com\", in: emails)\n```"
  },
  {
    "task": "Find all passwords with at least one special character from a security database.",
    "code": "```swift\nlet passwords = [\"password1\", \"pass@word\", \"123456\", \"pass#123\", \"secure*pass\"]\n\nlet specialCharacterSet = CharacterSet(charactersIn: \"!@#$%^&*()-_=+[]{}|;:'\\\",.<>?/~`\")\n\nlet filteredPasswords = passwords.filter { password in\n    password.unicodeScalars.contains { unicodeScalar in\n        specialCharacterSet.contains(unicodeScalar)\n    }\n}\n\nprint(filteredPasswords)\n```"
  },
  {
    "task": "Identify all courses with a prerequisite from a university catalog.",
    "code": "```swift\nstruct Course {\n    let name: String\n    let prerequisite: String?\n}\n\nlet catalog = [\n    Course(name: \"Introduction to Programming\", prerequisite: nil),\n    Course(name: \"Advanced Algorithms\", prerequisite: \"Introduction to Programming\"),\n    Course(name: \"Data Structures\", prerequisite: \"Introduction to Programming\"),\n    Course(name: \"Linear Algebra\", prerequisite: nil),\n    Course(name: \"Machine Learning\", prerequisite: \"Linear Algebra\")\n]\n\nlet coursesWithPrerequisites = catalog.filter { $0.prerequisite != nil }\n\nfor course in coursesWithPrerequisites {\n    print(course.name)\n}\n```"
  },
  {
    "task": "Extract all genes associated with a specific trait from a genetic database.",
    "code": "```swift\nstruct Gene {\n    let name: String\n    let traits: [String]\n}\n\nfunc extractGenes(forTrait trait: String, fromDatabase database: [Gene]) -> [Gene] {\n    return database.filter { $0.traits.contains(trait) }\n}\n\n// Example usage\nlet geneticDatabase = [\n    Gene(name: \"Gene1\", traits: [\"TraitA\", \"TraitB\"]),\n    Gene(name: \"Gene2\", traits: [\"TraitC\"]),\n    Gene(name: \"Gene3\", traits: [\"TraitA\", \"TraitD\"])\n]\n\nlet associatedGenes = extractGenes(forTrait: \"TraitA\", fromDatabase: geneticDatabase)\n```"
  },
  {
    "task": "Filter out all investments with a risk level below medium from a portfolio.",
    "code": "```swift\nstruct Investment {\n    let name: String\n    let riskLevel: String\n}\n\nlet portfolio = [\n    Investment(name: \"Investment A\", riskLevel: \"high\"),\n    Investment(name: \"Investment B\", riskLevel: \"medium\"),\n    Investment(name: \"Investment C\", riskLevel: \"low\"),\n    Investment(name: \"Investment D\", riskLevel: \"medium\"),\n    Investment(name: \"Investment E\", riskLevel: \"high\")\n]\n\nlet filteredPortfolio = portfolio.filter { $0.riskLevel == \"medium\" || $0.riskLevel == \"high\" }\n```"
  },
  {
    "task": "Select all calls longer than five minutes from a call log.",
    "code": "```swift\nstruct Call {\n    let duration: Int // Duration in seconds\n}\n\nlet callLog: [Call] = [\n    Call(duration: 120),\n    Call(duration: 400),\n    Call(duration: 600),\n    Call(duration: 360),\n    Call(duration: 780)\n]\n\nlet longCalls = callLog.filter { $0.duration > 300 }\n```"
  }
]