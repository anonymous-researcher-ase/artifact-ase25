[
  {
    "task": "Create a set to store unique usernames and demonstrate adding new ones.",
    "code": "```swift\nvar usernames: Set<String> = []\n\nusernames.insert(\"Alice\")\nusernames.insert(\"Bob\")\nusernames.insert(\"Charlie\")\n\n// Trying to add duplicate\nusernames.insert(\"Alice\")\n\nprint(usernames)\n```"
  },
  {
    "task": "Write a function that returns the union of two sets of integers.",
    "code": "```swift\nfunc unionOfSets(_ set1: Set<Int>, _ set2: Set<Int>) -> Set<Int> {\n    return set1.union(set2)\n}\n```"
  },
  {
    "task": "Given two sets of strings, find their intersection.",
    "code": "```swift\nlet set1: Set<String> = [\"apple\", \"banana\", \"cherry\"]\nlet set2: Set<String> = [\"banana\", \"cherry\", \"date\"]\n\nlet intersection = set1.intersection(set2)\n```"
  },
  {
    "task": "Implement a set to track visited web pages and check if a page has been visited.",
    "code": "```swift\nimport Foundation\n\nclass VisitedPagesTracker {\n    private var visitedPages: Set<String> = []\n\n    func visitPage(_ url: String) {\n        visitedPages.insert(url)\n    }\n\n    func hasVisited(_ url: String) -> Bool {\n        return visitedPages.contains(url)\n    }\n}\n\n// Example usage:\nlet tracker = VisitedPagesTracker()\ntracker.visitPage(\"https://www.example.com\")\nlet hasVisited = tracker.hasVisited(\"https://www.example.com\") // true\n```"
  },
  {
    "task": "Create a set from a list of numbers and remove duplicates.",
    "code": "```swift\nlet numbers = [1, 2, 3, 2, 1, 4, 5, 3]\nlet uniqueNumbers = Set(numbers)\n```"
  },
  {
    "task": "Check if a set is a subset of another set.",
    "code": "```swift\nlet setA: Set<Int> = [1, 2, 3]\nlet setB: Set<Int> = [1, 2, 3, 4, 5]\n\nlet isSubset = setA.isSubset(of: setB)\nprint(isSubset)\n```"
  },
  {
    "task": "Demonstrate adding and removing elements from a set of book titles.",
    "code": "```swift\nvar bookTitles: Set<String> = [\"1984\", \"To Kill a Mockingbird\", \"The Great Gatsby\"]\n\n// Add a new book title\nbookTitles.insert(\"Pride and Prejudice\")\n\n// Remove a book title\nbookTitles.remove(\"1984\")\n```"
  },
  {
    "task": "Create a set and show how to clear all its elements.",
    "code": "```swift\nvar mySet: Set<Int> = [1, 2, 3, 4, 5]\nmySet.removeAll()\n```"
  },
  {
    "task": "Write a program to find the difference between two sets of employee IDs.",
    "code": "```swift\nlet setA: Set<Int> = [101, 102, 103, 104, 105]\nlet setB: Set<Int> = [104, 105, 106, 107]\n\nlet difference = setA.subtracting(setB)\n\nprint(difference)\n```"
  },
  {
    "task": "Implement a set to store unique email addresses and check membership.",
    "code": "```swift\nvar emailSet: Set<String> = []\n\n// Function to add an email\nfunc addEmail(_ email: String) {\n    emailSet.insert(email)\n}\n\n// Function to check if an email is in the set\nfunc containsEmail(_ email: String) -> Bool {\n    return emailSet.contains(email)\n}\n```"
  },
  {
    "task": "Use a set to determine if two lists have any common elements.",
    "code": "```swift\nlet list1 = [1, 2, 3, 4, 5]\nlet list2 = [5, 6, 7, 8, 9]\n\nlet set1 = Set(list1)\nlet set2 = Set(list2)\n\nlet hasCommonElements = !set1.isDisjoint(with: set2)\n\nprint(hasCommonElements)\n```"
  },
  {
    "task": "Create a set to represent a group of students and update it with new entries.",
    "code": "```swift\nvar studentSet: Set<String> = [\"Alice\", \"Bob\", \"Charlie\"]\n\n// Adding new entries\nstudentSet.insert(\"David\")\nstudentSet.insert(\"Eve\")\n```"
  },
  {
    "task": "Write a function to find symmetric difference between two sets of colors.",
    "code": "```swift\nfunc symmetricDifference<T: Hashable>(between set1: Set<T>, and set2: Set<T>) -> Set<T> {\n    return set1.symmetricDifference(set2)\n}\n\nlet colorsSet1: Set<String> = [\"red\", \"green\", \"blue\"]\nlet colorsSet2: Set<String> = [\"yellow\", \"green\", \"blue\", \"purple\"]\nlet result = symmetricDifference(between: colorsSet1, and: colorsSet2)\n\nprint(result) // Output will be a set containing \"red\", \"yellow\", \"purple\"\n```"
  },
  {
    "task": "Implement a set to store unique product codes and demonstrate iteration over it.",
    "code": "```swift\nvar productCodes: Set<String> = [\"P123\", \"P456\", \"P789\"]\n\nproductCodes.insert(\"P101\")\nproductCodes.insert(\"P123\") // Duplicate, won't be added\n\nfor code in productCodes {\n    print(\"Product Code: \\(code)\")\n}\n```"
  },
  {
    "task": "Create a set and demonstrate the use of the `discard` method.",
    "code": "```swift\nvar mySet: Set<Int> = [1, 2, 3, 4, 5]\nmySet.remove(3)\nprint(mySet)\n```"
  },
  {
    "task": "Given a list of numbers, create a set and check if a specific number is present.",
    "code": "```swift\nlet numbers = [1, 2, 3, 4, 5]\nlet numberSet = Set(numbers)\nlet specificNumber = 3\n\nif numberSet.contains(specificNumber) {\n    print(\"\\(specificNumber) is present in the set.\")\n} else {\n    print(\"\\(specificNumber) is not present in the set.\")\n}\n```"
  },
  {
    "task": "Use a set to find all unique words in a sentence.",
    "code": "```swift\nlet sentence = \"This is a test sentence with some test words and some unique words\"\nlet words = sentence.split(separator: \" \").map { String($0) }\nlet uniqueWords = Set(words)\nprint(uniqueWords)\n```"
  },
  {
    "task": "Create a set from a sequence of characters and demonstrate set operations.",
    "code": "```swift\nimport Foundation\n\nlet charSequence = \"abracadabra\"\nlet charSet = Set(charSequence)\n\nlet anotherCharSequence = \"alakazam\"\nlet anotherCharSet = Set(anotherCharSequence)\n\n// Set Operations\nlet unionSet = charSet.union(anotherCharSet)\nlet intersectionSet = charSet.intersection(anotherCharSet)\nlet differenceSet = charSet.subtracting(anotherCharSet)\nlet symmetricDifferenceSet = charSet.symmetricDifference(anotherCharSet)\n\n// Output results\nprint(\"Character Set: \\(charSet)\")\nprint(\"Another Character Set: \\(anotherCharSet)\")\nprint(\"Union: \\(unionSet)\")\nprint(\"Intersection: \\(intersectionSet)\")\nprint(\"Difference: \\(differenceSet)\")\nprint(\"Symmetric Difference: \\(symmetricDifferenceSet)\")\n```"
  },
  {
    "task": "Write a function to merge two sets and return the result.",
    "code": "```swift\nfunc mergeSets<T>(_ set1: Set<T>, _ set2: Set<T>) -> Set<T> {\n    return set1.union(set2)\n}\n```"
  },
  {
    "task": "Implement a set to hold unique IP addresses and demonstrate basic operations.",
    "code": "```swift\nimport Foundation\n\n// Create a set to hold unique IP addresses\nvar ipAddresses: Set<String> = []\n\n// Add IP addresses to the set\nipAddresses.insert(\"192.168.1.1\")\nipAddresses.insert(\"10.0.0.2\")\nipAddresses.insert(\"172.16.0.3\")\n\n// Attempt to add a duplicate IP address\nipAddresses.insert(\"192.168.1.1\")\n\n// Remove an IP address\nipAddresses.remove(\"10.0.0.2\")\n\n// Check if an IP address is in the set\nlet containsIPAddress = ipAddresses.contains(\"172.16.0.3\")\n\n// Get the number of unique IP addresses\nlet count = ipAddresses.count\n\n// Iterate over the set\nfor ipAddress in ipAddresses {\n    print(ipAddress)\n}\n```"
  },
  {
    "task": "Create a set and demonstrate how to find the size of the set.",
    "code": "```swift\nvar mySet: Set<Int> = [1, 2, 3, 4, 5]\nlet setSize = mySet.count\nprint(\"The size of the set is \\(setSize)\")\n```"
  },
  {
    "task": "Write a program to check if two sets of dates are disjoint.",
    "code": "```swift\nimport Foundation\n\nlet dateFormatter = DateFormatter()\ndateFormatter.dateFormat = \"yyyy-MM-dd\"\n\nlet set1: Set<Date> = [\n    dateFormatter.date(from: \"2023-10-01\")!,\n    dateFormatter.date(from: \"2023-10-02\")!,\n    dateFormatter.date(from: \"2023-10-03\")!\n]\n\nlet set2: Set<Date> = [\n    dateFormatter.date(from: \"2023-10-04\")!,\n    dateFormatter.date(from: \"2023-10-05\")!,\n    dateFormatter.date(from: \"2023-10-06\")!\n]\n\nlet areDisjoint = set1.isDisjoint(with: set2)\nprint(areDisjoint)\n```"
  },
  {
    "task": "Create a set to manage a collection of tags and demonstrate addition and removal.",
    "code": "```swift\nvar tags: Set<String> = [\"swift\", \"programming\", \"development\"]\n\n// Add a tag\ntags.insert(\"ios\")\n\n// Remove a tag\ntags.remove(\"development\")\n```"
  },
  {
    "task": "Implement a set to track unique inventory items in a store.",
    "code": "```swift\nvar inventoryItems: Set<String> = []\n\nfunc addItem(_ item: String) {\n    inventoryItems.insert(item)\n}\n\nfunc removeItem(_ item: String) {\n    inventoryItems.remove(item)\n}\n\nfunc isItemInInventory(_ item: String) -> Bool {\n    return inventoryItems.contains(item)\n}\n\nfunc inventoryCount() -> Int {\n    return inventoryItems.count\n}\n\nfunc allItems() -> [String] {\n    return Array(inventoryItems)\n}\n```"
  },
  {
    "task": "Create a set of numbers and demonstrate conversion to a list.",
    "code": "```swift\nvar numberSet: Set<Int> = [1, 2, 3, 4, 5]\nlet numberList = Array(numberSet)\n```"
  },
  {
    "task": "Write a function that returns all elements present in either of two sets but not both.",
    "code": "```swift\nfunc symmetricDifference<T: Hashable>(set1: Set<T>, set2: Set<T>) -> Set<T> {\n    return set1.symmetricDifference(set2)\n}\n```"
  },
  {
    "task": "Use a set to manage a collection of unique transaction IDs.",
    "code": "```swift\nvar transactionIDs: Set<String> = []\n\n// Adding transaction IDs\ntransactionIDs.insert(\"TXN123\")\ntransactionIDs.insert(\"TXN456\")\ntransactionIDs.insert(\"TXN789\")\n\n// Attempting to add a duplicate transaction ID\ntransactionIDs.insert(\"TXN123\")\n\n// Checking if a transaction ID exists\nlet exists = transactionIDs.contains(\"TXN456\")\n\n// Removing a transaction ID\ntransactionIDs.remove(\"TXN789\")\n```"
  },
  {
    "task": "Create a set of integers and demonstrate the `pop` operation.",
    "code": "```swift\nimport Foundation\n\nvar numbers: Set<Int> = [1, 2, 3, 4, 5]\n\nif let poppedNumber = numbers.popFirst() {\n    print(\"Popped number: \\(poppedNumber)\")\n}\n\nprint(\"Remaining numbers in the set: \\(numbers)\")\n```"
  },
  {
    "task": "Write a program to find the maximum element in a set of floating-point numbers.",
    "code": "```swift\nlet numbers: Set<Float> = [3.2, 5.5, 1.8, 4.9, 2.3]\nif let maxElement = numbers.max() {\n    print(\"The maximum element is \\(maxElement)\")\n}\n```"
  },
  {
    "task": "Create a set and demonstrate the use of the `update` method with another set.",
    "code": "```swift\nvar setA: Set<Int> = [1, 2, 3]\nlet setB: Set<Int> = [3, 4, 5]\nsetA.formUnion(setB)\n```"
  },
  {
    "task": "Implement a set to keep track of unique file extensions in a directory.",
    "code": "```swift\nimport Foundation\n\nfunc getUniqueFileExtensions(in directory: String) -> Set<String> {\n    let fileManager = FileManager.default\n    var uniqueExtensions = Set<String>()\n\n    do {\n        let files = try fileManager.contentsOfDirectory(atPath: directory)\n        for file in files {\n            let fileExtension = (file as NSString).pathExtension\n            if !fileExtension.isEmpty {\n                uniqueExtensions.insert(fileExtension)\n            }\n        }\n    } catch {\n        print(\"Error reading directory: \\(error.localizedDescription)\")\n    }\n    \n    return uniqueExtensions\n}\n\nlet directoryPath = \"/path/to/directory\"\nlet uniqueExtensions = getUniqueFileExtensions(in: directoryPath)\nprint(uniqueExtensions)\n```"
  },
  {
    "task": "Create a set of strings and demonstrate how to iterate over it in reverse order.",
    "code": "```swift\nimport Foundation\n\nvar stringSet: Set<String> = [\"apple\", \"banana\", \"cherry\"]\n\nfor string in stringSet.sorted(by: >) {\n    print(string)\n}\n```"
  },
  {
    "task": "Write a function to check if a set is empty.",
    "code": "```swift\nfunc isSetEmpty<T>(_ set: Set<T>) -> Bool {\n    return set.isEmpty\n}\n```"
  },
  {
    "task": "Use a set to filter out duplicate entries from a list of participants.",
    "code": "```swift\nlet participants = [\"Alice\", \"Bob\", \"Charlie\", \"Alice\", \"David\", \"Bob\"]\nlet uniqueParticipants = Set(participants)\nprint(uniqueParticipants)\n```"
  },
  {
    "task": "Create a set of tuples and demonstrate basic set operations.",
    "code": "```swift\nimport Foundation\n\n// Create a set of tuples\nvar tupleSet: Set<(Int, String)> = [(1, \"Apple\"), (2, \"Banana\"), (3, \"Cherry\")]\n\n// Add a new tuple to the set\ntupleSet.insert((4, \"Date\"))\n\n// Remove a tuple from the set\ntupleSet.remove((2, \"Banana\"))\n\n// Check if a tuple exists in the set\nlet containsTuple = tupleSet.contains((1, \"Apple\"))\n\n// Iterate over the set\nfor tuple in tupleSet {\n    print(tuple)\n}\n\n// Get the count of elements in the set\nlet count = tupleSet.count\n\n// Create another set of tuples\nlet anotherTupleSet: Set<(Int, String)> = [(3, \"Cherry\"), (5, \"Elderberry\")]\n\n// Perform set union\nlet unionSet = tupleSet.union(anotherTupleSet)\n\n// Perform set intersection\nlet intersectionSet = tupleSet.intersection(anotherTupleSet)\n\n// Perform set difference\nlet differenceSet = tupleSet.subtracting(anotherTupleSet)\n\n// Print results\nprint(\"Contains Tuple: \\(containsTuple)\")\nprint(\"Count: \\(count)\")\nprint(\"Union Set: \\(unionSet)\")\nprint(\"Intersection Set: \\(intersectionSet)\")\nprint(\"Difference Set: \\(differenceSet)\")\n```"
  },
  {
    "task": "Write a program to find the common elements between two sets of country names.",
    "code": "```swift\nlet set1: Set<String> = [\"USA\", \"Canada\", \"Mexico\", \"Germany\"]\nlet set2: Set<String> = [\"Germany\", \"France\", \"Italy\", \"USA\"]\n\nlet commonElements = set1.intersection(set2)\nprint(commonElements)\n```"
  },
  {
    "task": "Create a set of characters and demonstrate the use of the `issubset` method.",
    "code": "```swift\nlet setA: Set<Character> = [\"a\", \"b\", \"c\"]\nlet setB: Set<Character> = [\"a\", \"b\", \"c\", \"d\", \"e\"]\n\nlet isSubset = setA.isSubset(of: setB)\nprint(isSubset)\n```"
  },
  {
    "task": "Implement a set to manage a collection of unique hashtags from social media posts.",
    "code": "```swift\nimport Foundation\n\nstruct HashtagManager {\n    private var hashtags: Set<String> = []\n\n    mutating func addHashtag(_ hashtag: String) {\n        hashtags.insert(hashtag)\n    }\n\n    mutating func removeHashtag(_ hashtag: String) {\n        hashtags.remove(hashtag)\n    }\n\n    func containsHashtag(_ hashtag: String) -> Bool {\n        return hashtags.contains(hashtag)\n    }\n\n    func allHashtags() -> [String] {\n        return Array(hashtags)\n    }\n}\n```"
  },
  {
    "task": "Create a set and demonstrate how to copy it to another set.",
    "code": "```swift\nvar originalSet: Set<Int> = [1, 2, 3, 4, 5]\nvar copiedSet = originalSet\n```"
  },
  {
    "task": "Write a function that accepts two sets and returns a new set with elements found in both.",
    "code": "```swift\nfunc intersection<T>(of set1: Set<T>, and set2: Set<T>) -> Set<T> {\n    return set1.intersection(set2)\n}\n```"
  },
  {
    "task": "Use a set to determine the unique items purchased in a day.",
    "code": "```swift\nlet purchases = [\"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"kiwi\"]\nlet uniqueItemsPurchased = Set(purchases)\nprint(uniqueItemsPurchased)\n```"
  },
  {
    "task": "Create a set of student IDs and demonstrate set comprehension to filter IDs.",
    "code": "```swift\nlet studentIDs: Set<Int> = [101, 102, 103, 104, 105, 106]\nlet filteredIDs = studentIDs.filter { $0 > 103 }\nprint(filteredIDs)\n```"
  },
  {
    "task": "Write a program to check if a set of strings is a superset of another set.",
    "code": "```swift\nlet superset: Set<String> = [\"apple\", \"banana\", \"cherry\", \"date\"]\nlet subset: Set<String> = [\"banana\", \"cherry\"]\n\nlet isSuperset = superset.isSuperset(of: subset)\nprint(isSuperset)\n```"
  },
  {
    "task": "Create a set of unique words from a text file.",
    "code": "```swift\nimport Foundation\n\ndo {\n    let fileURL = URL(fileURLWithPath: \"path/to/your/file.txt\")\n    let content = try String(contentsOf: fileURL, encoding: .utf8)\n    let words = content.components(separatedBy: .whitespacesAndNewlines)\n    let uniqueWords = Set(words).filter { !$0.isEmpty }\n    print(uniqueWords)\n} catch {\n    print(\"Error reading file: \\(error)\")\n}\n```"
  },
  {
    "task": "Implement a set to store unique project identifiers and demonstrate membership testing.",
    "code": "```swift\nimport Foundation\n\n// Creating a set to store unique project identifiers\nvar projectIdentifiers: Set<String> = []\n\n// Adding some identifiers to the set\nprojectIdentifiers.insert(\"ProjectA\")\nprojectIdentifiers.insert(\"ProjectB\")\nprojectIdentifiers.insert(\"ProjectC\")\n\n// Demonstrating membership testing\nlet checkIdentifier = \"ProjectB\"\nif projectIdentifiers.contains(checkIdentifier) {\n    print(\"\\(checkIdentifier) is in the set.\")\n} else {\n    print(\"\\(checkIdentifier) is not in the set.\")\n}\n```"
  },
  {
    "task": "Create a set and demonstrate the `symmetric_difference_update` method.",
    "code": "```swift\nimport Foundation\n\nvar setA: Set<Int> = [1, 2, 3, 4, 5]\nlet setB: Set<Int> = [4, 5, 6, 7, 8]\n\nsetA.formSymmetricDifference(setB)\n\nprint(setA)\n```"
  },
  {
    "task": "Write a function to remove all elements from a set that are also in another set.",
    "code": "```swift\nfunc removeElements(from set1: inout Set<Int>, using set2: Set<Int>) {\n    set1.subtract(set2)\n}\n```"
  },
  {
    "task": "Use a set to keep track of unique error codes from server logs.",
    "code": "```swift\nimport Foundation\n\n// Example server logs with error codes\nlet serverLogs = [\n    \"ERROR 404: Not Found\",\n    \"ERROR 500: Internal Server Error\",\n    \"ERROR 403: Forbidden\",\n    \"ERROR 404: Not Found\",\n    \"ERROR 500: Internal Server Error\"\n]\n\n// Function to extract error codes from logs\nfunc extractErrorCodes(from logs: [String]) -> Set<String> {\n    var errorCodes = Set<String>()\n    \n    for log in logs {\n        if let range = log.range(of: \"ERROR\") {\n            let errorCode = log[range.upperBound..<log.index(range.upperBound, offsetBy: 3)]\n            errorCodes.insert(String(errorCode))\n        }\n    }\n    \n    return errorCodes\n}\n\n// Get unique error codes\nlet uniqueErrorCodes = extractErrorCodes(from: serverLogs)\nprint(uniqueErrorCodes)\n```"
  },
  {
    "task": "Create a set and demonstrate how to find all unique pairs of elements.",
    "code": "```swift\nimport Foundation\n\nfunc findUniquePairs(in numbers: [Int]) -> Set<Set<Int>> {\n    var uniquePairs = Set<Set<Int>>()\n    let numbersSet = Set(numbers)\n    \n    for num1 in numbersSet {\n        for num2 in numbersSet {\n            if num1 != num2 {\n                let pair = Set([num1, num2])\n                uniquePairs.insert(pair)\n            }\n        }\n    }\n    return uniquePairs\n}\n\n// Example usage\nlet numbers = [1, 2, 3, 4]\nlet uniquePairs = findUniquePairs(in: numbers)\n\nfor pair in uniquePairs {\n    print(pair)\n}\n```"
  },
  {
    "task": "Write a program to find the smallest element in a set of integers.",
    "code": "```swift\nlet numbers: Set<Int> = [5, 3, 8, 1, 9]\nif let smallest = numbers.min() {\n    print(smallest)\n}\n```"
  },
  {
    "task": "Create a set and demonstrate the `add` method with multiple elements.",
    "code": "```swift\nvar mySet: Set<Int> = []\n\nmySet.insert(10)\nmySet.insert(20)\nmySet.insert(30)\n\nprint(mySet)\n```"
  },
  {
    "task": "Implement a set to manage a collection of unique author names.",
    "code": "```swift\nimport Foundation\n\nvar authorSet: Set<String> = []\n\nfunc addAuthor(name: String) {\n    authorSet.insert(name)\n}\n\nfunc removeAuthor(name: String) {\n    authorSet.remove(name)\n}\n\nfunc containsAuthor(name: String) -> Bool {\n    return authorSet.contains(name)\n}\n\nfunc listAuthors() -> [String] {\n    return Array(authorSet)\n}\n```"
  },
  {
    "task": "Create a set of integers and demonstrate converting it to a sorted list.",
    "code": "```swift\nimport Foundation\n\nvar integerSet: Set<Int> = [5, 2, 9, 1, 3]\nlet sortedList = integerSet.sorted()\nprint(sortedList)\n```"
  },
  {
    "task": "Write a function that returns the union of multiple sets.",
    "code": "```swift\nfunc unionOfSets<T>(_ sets: Set<T>...) -> Set<T> {\n    return sets.reduce(into: Set<T>()) { result, currentSet in\n        result.formUnion(currentSet)\n    }\n}\n```"
  },
  {
    "task": "Use a set to identify unique characters in a string.",
    "code": "```swift\nlet inputString = \"example string\"\nlet uniqueCharacters = Set(inputString)\nprint(uniqueCharacters)\n```"
  },
  {
    "task": "Create a set of prime numbers and demonstrate basic set operations.",
    "code": "```swift\nvar primeNumbers: Set<Int> = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n\n// Demonstrate basic set operations\nlet morePrimes: Set<Int> = [31, 37, 41, 43, 47]\n\n// Union of two sets\nlet unionPrimes = primeNumbers.union(morePrimes)\n\n// Intersection of two sets\nlet intersectionPrimes = primeNumbers.intersection(morePrimes)\n\n// Subtracting one set from another\nlet subtractPrimes = primeNumbers.subtracting(morePrimes)\n\n// Symmetric difference of two sets\nlet symmetricDifferencePrimes = primeNumbers.symmetricDifference(morePrimes)\n\n// Print results\nprint(\"Union: \\(unionPrimes)\")\nprint(\"Intersection: \\(intersectionPrimes)\")\nprint(\"Subtract: \\(subtractPrimes)\")\nprint(\"Symmetric Difference: \\(symmetricDifferencePrimes)\")\n```"
  },
  {
    "task": "Create a set and demonstrate how to check for non-membership.",
    "code": "```swift\nvar mySet: Set<Int> = [1, 2, 3, 4, 5]\nlet isNotMember = !mySet.contains(6)\nprint(isNotMember)\n```"
  },
  {
    "task": "Write a program to find the largest element in a set of numbers.",
    "code": "```swift\nlet numbers: Set<Int> = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]\nif let largest = numbers.max() {\n    print(\"The largest element is \\(largest)\")\n}\n```"
  },
  {
    "task": "Create a set of unique movie titles and demonstrate membership testing.",
    "code": "```swift\nvar movieTitles: Set<String> = [\"Inception\", \"The Matrix\", \"Interstellar\", \"The Prestige\", \"Inception\"]\n\nlet isMember1 = movieTitles.contains(\"Inception\")\nlet isMember2 = movieTitles.contains(\"Avatar\")\n\nprint(\"Is 'Inception' a member? \\(isMember1)\")\nprint(\"Is 'Avatar' a member? \\(isMember2)\")\n```"
  },
  {
    "task": "Implement a set to store unique keys from a dictionary.",
    "code": "```swift\nlet dictionary: [String: Any] = [\"key1\": \"value1\", \"key2\": \"value2\", \"key3\": \"value3\"]\nlet uniqueKeysSet: Set<String> = Set(dictionary.keys)\n```"
  },
  {
    "task": "Create a set and demonstrate the `difference_update` method.",
    "code": "```swift\nvar set1: Set<Int> = [1, 2, 3, 4, 5]\nlet set2: Set<Int> = [3, 4, 5, 6, 7]\n\nset1.subtract(set2)\n\nprint(set1)\n```"
  },
  {
    "task": "Write a function to merge multiple sets into a single set.",
    "code": "```swift\nfunc mergeSets<T>(_ sets: Set<T>...) -> Set<T> {\n    var resultSet: Set<T> = []\n    for set in sets {\n        resultSet.formUnion(set)\n    }\n    return resultSet\n}\n\n// Example usage:\nlet set1: Set<Int> = [1, 2, 3]\nlet set2: Set<Int> = [3, 4, 5]\nlet set3: Set<Int> = [5, 6, 7]\nlet mergedSet = mergeSets(set1, set2, set3)\n```"
  },
  {
    "task": "Use a set to filter out duplicate letters from a word.",
    "code": "```swift\nlet word = \"example\"\nlet uniqueLetters = Set(word)\nprint(String(uniqueLetters))\n```"
  },
  {
    "task": "Create a set and demonstrate the use of the `isdisjoint` method.",
    "code": "```swift\nvar setA: Set<Int> = [1, 2, 3, 4, 5]\nvar setB: Set<Int> = [6, 7, 8, 9, 10]\nvar setC: Set<Int> = [3, 6, 9]\n\nlet isDisjointAB = setA.isDisjoint(with: setB)\nlet isDisjointAC = setA.isDisjoint(with: setC)\n\nprint(isDisjointAB) // true\nprint(isDisjointAC) // false\n```"
  },
  {
    "task": "Write a program to find all elements that are only in one of two sets.",
    "code": "```swift\nlet setA: Set<Int> = [1, 2, 3, 4, 5]\nlet setB: Set<Int> = [4, 5, 6, 7, 8]\n\nlet onlyInOneSet = (setA.subtracting(setB)).union(setB.subtracting(setA))\nprint(onlyInOneSet)\n```"
  },
  {
    "task": "Create a set of unique book authors and demonstrate basic set operations.",
    "code": "```swift\nvar authors: Set<String> = [\"J.K. Rowling\", \"George R.R. Martin\", \"J.R.R. Tolkien\", \"Agatha Christie\"]\n\n// Add a new author\nauthors.insert(\"Isaac Asimov\")\n\n// Remove an author\nauthors.remove(\"Agatha Christie\")\n\n// Check if an author exists\nlet hasTolkien = authors.contains(\"J.R.R. Tolkien\")\n\n// Iterate over the authors\nfor author in authors {\n    print(author)\n}\n\n// Get the count of unique authors\nlet authorCount = authors.count\n\n// Create another set for comparison\nlet moreAuthors: Set<String> = [\"Isaac Asimov\", \"Arthur C. Clarke\", \"Philip K. Dick\"]\n\n// Union of two sets\nlet allAuthors = authors.union(moreAuthors)\n\n// Intersection of two sets\nlet commonAuthors = authors.intersection(moreAuthors)\n\n// Difference of two sets\nlet uniqueAuthors = authors.subtracting(moreAuthors)\n```"
  },
  {
    "task": "Implement a set to store unique phone numbers and check for duplicates.",
    "code": "```swift\nvar phoneNumbers: Set<String> = []\n\nfunc addPhoneNumber(_ number: String) -> Bool {\n    if phoneNumbers.contains(number) {\n        return false // Duplicate found\n    } else {\n        phoneNumbers.insert(number)\n        return true // Added successfully\n    }\n}\n\n// Example usage:\nlet isAdded1 = addPhoneNumber(\"123-456-7890\") // true\nlet isAdded2 = addPhoneNumber(\"123-456-7890\") // false\n```"
  },
  {
    "task": "Create a set of floating-point numbers and demonstrate rounding each element.",
    "code": "```swift\nimport Foundation\n\nvar floatSet: Set<Double> = [2.3, 3.7, 4.5, 5.9, 6.1]\n\nvar roundedSet: Set<Int> = Set(floatSet.map { Int(round($0)) })\n\nprint(roundedSet)\n```"
  },
  {
    "task": "Write a function that returns a set of all vowels present in a given sentence.",
    "code": "```swift\nfunc findVowels(in sentence: String) -> Set<Character> {\n    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"]\n    return Set(sentence.filter { vowels.contains($0) })\n}\n```"
  },
  {
    "task": "Use a set to track unique session IDs for a web application.",
    "code": "```swift\nimport Foundation\n\nvar uniqueSessionIDs: Set<String> = []\n\nfunc addSessionID(_ sessionID: String) {\n    uniqueSessionIDs.insert(sessionID)\n}\n\nfunc hasSessionID(_ sessionID: String) -> Bool {\n    return uniqueSessionIDs.contains(sessionID)\n}\n\nfunc removeSessionID(_ sessionID: String) {\n    uniqueSessionIDs.remove(sessionID)\n}\n\n// Example usage\naddSessionID(\"session123\")\naddSessionID(\"session456\")\nprint(hasSessionID(\"session123\")) // true\nremoveSessionID(\"session123\")\nprint(hasSessionID(\"session123\")) // false\n```"
  },
  {
    "task": "Create a set of unique city names and demonstrate set operations with it.",
    "code": "```swift\nimport Foundation\n\nvar citySet: Set<String> = [\"New York\", \"Los Angeles\", \"Chicago\", \"Houston\", \"Phoenix\"]\n\n// Add a city\ncitySet.insert(\"San Francisco\")\n\n// Remove a city\ncitySet.remove(\"Houston\")\n\n// Check if a city is in the set\nlet hasChicago = citySet.contains(\"Chicago\")\n\n// Iterate through the set\nfor city in citySet {\n    print(city)\n}\n\n// Perform set operations\nlet anotherCitySet: Set<String> = [\"Miami\", \"Boston\", \"Chicago\", \"Phoenix\"]\n\n// Union\nlet unionSet = citySet.union(anotherCitySet)\n\n// Intersection\nlet intersectionSet = citySet.intersection(anotherCitySet)\n\n// Subtracting\nlet subtractingSet = citySet.subtracting(anotherCitySet)\n\n// Symmetric Difference\nlet symmetricDifferenceSet = citySet.symmetricDifference(anotherCitySet)\n\n// Print results\nprint(\"Union: \\(unionSet)\")\nprint(\"Intersection: \\(intersectionSet)\")\nprint(\"Subtracting: \\(subtractingSet)\")\nprint(\"Symmetric Difference: \\(symmetricDifferenceSet)\")\n```"
  },
  {
    "task": "Write a program to find the common elements in three sets.",
    "code": "```swift\nlet set1: Set<Int> = [1, 2, 3, 4, 5]\nlet set2: Set<Int> = [3, 4, 5, 6, 7]\nlet set3: Set<Int> = [5, 6, 7, 8, 9]\n\nlet commonElements = set1.intersection(set2).intersection(set3)\nprint(commonElements)\n```"
  },
  {
    "task": "Create a set and demonstrate how to remove an element by its value.",
    "code": "```swift\nvar mySet: Set<String> = [\"apple\", \"banana\", \"orange\"]\nmySet.remove(\"banana\")\n```"
  },
  {
    "task": "Implement a set to store a collection of unique ISBN numbers.",
    "code": "```swift\nvar isbnSet: Set<String> = []\n\nfunc addISBN(_ isbn: String) {\n    isbnSet.insert(isbn)\n}\n\nfunc removeISBN(_ isbn: String) {\n    isbnSet.remove(isbn)\n}\n\nfunc containsISBN(_ isbn: String) -> Bool {\n    return isbnSet.contains(isbn)\n}\n\nfunc allISBNs() -> [String] {\n    return Array(isbnSet)\n}\n```"
  },
  {
    "task": "Create a set and demonstrate the `intersection_update` method.",
    "code": "```swift\nvar setA: Set<Int> = [1, 2, 3, 4, 5]\nlet setB: Set<Int> = [3, 4, 5, 6, 7]\n\nsetA.formIntersection(setB)\n\nprint(setA) // Output: [3, 4, 5]\n```"
  },
  {
    "task": "Write a function to generate a set of all unique elements in a list.",
    "code": "```swift\nfunc generateUniqueSet<T: Hashable>(from list: [T]) -> Set<T> {\n    return Set(list)\n}\n```"
  },
  {
    "task": "Use a set to determine the unique characters in two strings.",
    "code": "```swift\nlet string1 = \"hello\"\nlet string2 = \"world\"\n\nlet set1 = Set(string1)\nlet set2 = Set(string2)\n\nlet uniqueCharacters = set1.union(set2)\nprint(uniqueCharacters)\n```"
  },
  {
    "task": "Create a set of unique animal names and demonstrate the `discard` method.",
    "code": "```swift\nvar animalNames: Set<String> = [\"Elephant\", \"Tiger\", \"Lion\", \"Giraffe\"]\nanimalNames.remove(\"Tiger\")\n```"
  },
  {
    "task": "Write a program to find all elements present in the first set but not in the second.",
    "code": "```swift\nlet set1: Set<Int> = [1, 2, 3, 4, 5]\nlet set2: Set<Int> = [4, 5, 6, 7, 8]\n\nlet difference = set1.subtracting(set2)\nprint(difference)\n```"
  },
  {
    "task": "Create a set of integers and demonstrate using it to eliminate duplicates from a list.",
    "code": "```swift\nlet listWithDuplicates = [1, 2, 3, 2, 4, 5, 1, 6, 3]\nlet setOfIntegers = Set(listWithDuplicates)\nlet listWithoutDuplicates = Array(setOfIntegers)\n```"
  },
  {
    "task": "Implement a set to manage a collection of unique car models.",
    "code": "```swift\nimport Foundation\n\nvar carModels: Set<String> = []\n\nfunc addCarModel(_ model: String) {\n    carModels.insert(model)\n}\n\nfunc removeCarModel(_ model: String) {\n    carModels.remove(model)\n}\n\nfunc containsCarModel(_ model: String) -> Bool {\n    return carModels.contains(model)\n}\n\nfunc listCarModels() -> [String] {\n    return Array(carModels)\n}\n```"
  },
  {
    "task": "Create a set and demonstrate the use of the `clear` method.",
    "code": "```swift\nvar mySet: Set<Int> = [1, 2, 3, 4, 5]\nmySet.removeAll()\n```"
  },
  {
    "task": "Write a function that finds the intersection of multiple sets.",
    "code": "```swift\nfunc intersection<T>(of sets: Set<T>...) -> Set<T> {\n    guard let firstSet = sets.first else { return [] }\n    return sets.dropFirst().reduce(firstSet) { result, set in\n        result.intersection(set)\n    }\n}\n```"
  },
  {
    "task": "Use a set to identify unique words in a paragraph.",
    "code": "```swift\nlet paragraph = \"\"\"\nSwift is a powerful and intuitive programming language for iOS, macOS, watchOS, and tvOS. Writing Swift code is interactive and fun, the syntax is concise yet expressive, and Swift includes modern features developers love. Swift code is safe by design, yet also produces software that runs lightning-fast.\n\"\"\"\n\nlet words = paragraph.lowercased().split { !$0.isLetter }\nlet uniqueWords = Set(words)\n\nprint(uniqueWords)\n```"
  },
  {
    "task": "Create a set of unique country codes and demonstrate membership testing.",
    "code": "```swift\nvar countryCodes: Set<String> = [\"US\", \"CA\", \"MX\", \"FR\", \"DE\"]\nlet isMember = countryCodes.contains(\"US\")\nprint(isMember)\n```"
  },
  {
    "task": "Write a program to find the union of two sets and return it as a list.",
    "code": "```swift\nfunc unionOfSets<T>(_ set1: Set<T>, _ set2: Set<T>) -> [T] {\n    let unionSet = set1.union(set2)\n    return Array(unionSet)\n}\n\n// Example usage:\nlet setA: Set<Int> = [1, 2, 3, 4]\nlet setB: Set<Int> = [3, 4, 5, 6]\nlet result = unionOfSets(setA, setB)\nprint(result)\n```"
  },
  {
    "task": "Create a set and demonstrate using it to check if all elements of another set are present.",
    "code": "```swift\nlet setA: Set<Int> = [1, 2, 3, 4, 5]\nlet setB: Set<Int> = [2, 4, 5]\n\nlet isSubset = setB.isSubset(of: setA)\nprint(isSubset)\n```"
  },
  {
    "task": "Implement a set to store unique coupon codes and demonstrate adding new codes.",
    "code": "```swift\nimport Foundation\n\nvar couponCodes: Set<String> = []\n\n// Adding new coupon codes\ncouponCodes.insert(\"SAVE10\")\ncouponCodes.insert(\"WELCOME20\")\ncouponCodes.insert(\"FREESHIP\")\n\n// Attempt to add a duplicate code\ncouponCodes.insert(\"SAVE10\")\n\n// Printing the set to show unique coupon codes\nprint(couponCodes)\n```"
  },
  {
    "task": "Create a set and demonstrate the `copy` method.",
    "code": "```swift\nimport Foundation\n\nlet originalSet: Set<Int> = [1, 2, 3, 4, 5]\nlet copiedSet = originalSet\n\nprint(\"Original Set: \\(originalSet)\")\nprint(\"Copied Set: \\(copiedSet)\")\n```"
  },
  {
    "task": "Write a function to remove duplicates from a list using a set.",
    "code": "```swift\nfunc removeDuplicates(from list: [Int]) -> [Int] {\n    let uniqueSet = Set(list)\n    return Array(uniqueSet)\n}\n```"
  },
  {
    "task": "Use a set to identify unique numbers in a sequence.",
    "code": "```swift\nlet numbers = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]\nlet uniqueNumbers = Set(numbers)\nprint(uniqueNumbers)\n```"
  },
  {
    "task": "Create a set of unique fruit names and demonstrate set operations with it.",
    "code": "```swift\nimport Foundation\n\nvar fruitSet: Set<String> = [\"Apple\", \"Banana\", \"Cherry\", \"Date\"]\n\n// Add a new fruit\nfruitSet.insert(\"Elderberry\")\n\n// Remove a fruit\nfruitSet.remove(\"Banana\")\n\n// Check if a fruit is in the set\nlet hasApple = fruitSet.contains(\"Apple\")\n\n// Iterate over the set\nfor fruit in fruitSet {\n    print(fruit)\n}\n\n// Perform set operations\nlet tropicalFruits: Set<String> = [\"Pineapple\", \"Mango\", \"Banana\", \"Date\"]\nlet commonFruits = fruitSet.intersection(tropicalFruits)\nlet allFruits = fruitSet.union(tropicalFruits)\nlet differentFruits = fruitSet.symmetricDifference(tropicalFruits)\nlet uniqueFruits = fruitSet.subtracting(tropicalFruits)\n\nprint(\"Common Fruits: \\(commonFruits)\")\nprint(\"All Fruits: \\(allFruits)\")\nprint(\"Different Fruits: \\(differentFruits)\")\nprint(\"Unique Fruits: \\(uniqueFruits)\")\n```"
  }
]